// Decompiled with JetBrains decompiler
// Type: ​‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections;
using System.Globalization;
using System.Text;

[Serializable]
public class \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮
{
  internal static readonly int[][] primeLists = new int[64][]
  {
    new int[8]{ 3, 5, 7, 11, 13, 17, 19, 23 },
    new int[5]{ 29, 31, 37, 41, 43 },
    new int[5]{ 47, 53, 59, 61, 67 },
    new int[4]{ 71, 73, 79, 83 },
    new int[4]{ 89, 97, 101, 103 },
    new int[4]{ 107, 109, 113, (int) sbyte.MaxValue },
    new int[4]{ 131, 137, 139, 149 },
    new int[4]{ 151, 157, 163, 167 },
    new int[4]{ 173, 179, 181, 191 },
    new int[4]{ 193, 197, 199, 211 },
    new int[3]{ 223, 227, 229 },
    new int[3]{ 233, 239, 241 },
    new int[3]{ 251, 257, 263 },
    new int[3]{ 269, 271, 277 },
    new int[3]{ 281, 283, 293 },
    new int[3]{ 307, 311, 313 },
    new int[3]{ 317, 331, 337 },
    new int[3]{ 347, 349, 353 },
    new int[3]{ 359, 367, 373 },
    new int[3]{ 379, 383, 389 },
    new int[3]{ 397, 401, 409 },
    new int[3]{ 419, 421, 431 },
    new int[3]{ 433, 439, 443 },
    new int[3]{ 449, 457, 461 },
    new int[3]{ 463, 467, 479 },
    new int[3]{ 487, 491, 499 },
    new int[3]{ 503, 509, 521 },
    new int[3]{ 523, 541, 547 },
    new int[3]{ 557, 563, 569 },
    new int[3]{ 571, 577, 587 },
    new int[3]{ 593, 599, 601 },
    new int[3]{ 607, 613, 617 },
    new int[3]{ 619, 631, 641 },
    new int[3]{ 643, 647, 653 },
    new int[3]{ 659, 661, 673 },
    new int[3]{ 677, 683, 691 },
    new int[3]{ 701, 709, 719 },
    new int[3]{ 727, 733, 739 },
    new int[3]{ 743, 751, 757 },
    new int[3]{ 761, 769, 773 },
    new int[3]{ 787, 797, 809 },
    new int[3]{ 811, 821, 823 },
    new int[3]{ 827, 829, 839 },
    new int[3]{ 853, 857, 859 },
    new int[3]{ 863, 877, 881 },
    new int[3]{ 883, 887, 907 },
    new int[3]{ 911, 919, 929 },
    new int[3]{ 937, 941, 947 },
    new int[3]{ 953, 967, 971 },
    new int[3]{ 977, 983, 991 },
    new int[3]{ 997, 1009, 1013 },
    new int[3]{ 1019, 1021, 1031 },
    new int[3]{ 1033, 1039, 1049 },
    new int[3]{ 1051, 1061, 1063 },
    new int[3]{ 1069, 1087, 1091 },
    new int[3]{ 1093, 1097, 1103 },
    new int[3]{ 1109, 1117, 1123 },
    new int[3]{ 1129, 1151, 1153 },
    new int[3]{ 1163, 1171, 1181 },
    new int[3]{ 1187, 1193, 1201 },
    new int[3]{ 1213, 1217, 1223 },
    new int[3]{ 1229, 1231, 1237 },
    new int[3]{ 1249, 1259, 1277 },
    new int[3]{ 1279, 1283, 1289 }
  };
  internal static readonly int[] primeProducts;
  private const long IMASK = 4294967295;
  private const ulong UIMASK = 4294967295;
  private static readonly int[] ZeroMagnitude = new int[0];
  private static readonly byte[] ZeroEncoding = new byte[0];
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[] SMALL_CONSTANTS = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[17];
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ Zero;
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ One;
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ Two;
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ Three;
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ Four;
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ Ten;
  private static readonly byte[] BitLengthTable = new byte[256]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 2,
    (byte) 3,
    (byte) 3,
    (byte) 3,
    (byte) 3,
    (byte) 4,
    (byte) 4,
    (byte) 4,
    (byte) 4,
    (byte) 4,
    (byte) 4,
    (byte) 4,
    (byte) 4,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 5,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8
  };
  private const int chunk2 = 1;
  private const int chunk8 = 1;
  private const int chunk10 = 19;
  private const int chunk16 = 16;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix2;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix2E;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix8;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix8E;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix10;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix10E;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix16;
  private static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ radix16E;
  private static readonly \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮ RandomSource = new \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮();
  private static readonly int[] ExpWindowThresholds = new int[8]
  {
    7,
    25,
    81,
    241,
    673,
    1793,
    4609,
    int.MaxValue
  };
  private const int BitsPerByte = 8;
  private const int BitsPerInt = 32;
  private const int BytesPerInt = 4;
  private int[] magnitude;
  private int sign;
  private int nBits = -1;
  private int nBitLength = -1;
  private int mQuote;

  static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮()
  {
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(0, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude, false);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero.nBits = 0;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero.nBitLength = 0;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[0] = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    for (uint index = 1; (long) index < (long) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS.Length; ++index)
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[(int) index] = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D⁫‫‭‏‌⁫‌‪⁫⁪‎‏⁬‭‎⁫‪‭⁭‌⁭‭⁮⁯‎​⁮⁮‬​⁪‍⁫‪‏‬⁯⁪⁫‮((ulong) index);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[1];
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[2];
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Three = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[3];
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Four = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[4];
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Ten = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[10];
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮(2L);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix2E = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix2.\u206A‮‮⁫⁫⁫⁭‪⁫⁫‭‬⁬‭‬‎⁫‮‮‎⁫‍⁫‪‮‭‎⁫‬‪‍⁯⁮⁯⁯⁫‪​⁪⁪‮(1);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix8 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮(8L);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix8E = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix8.\u206A‮‮⁫⁫⁫⁭‪⁫⁫‭‬⁬‭‬‎⁫‮‮‎⁫‍⁫‪‮‭‎⁫‬‪‍⁯⁮⁯⁯⁫‪​⁪⁪‮(1);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix10 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮(10L);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix10E = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix10.\u206A‮‮⁫⁫⁫⁭‪⁫⁫‭‬⁬‭‬‎⁫‮‮‎⁫‍⁫‪‮‭‎⁫‬‪‍⁯⁮⁯⁯⁫‪​⁪⁪‮(19);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix16 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮(16L);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix16E = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix16.\u206A‮‮⁫⁫⁫⁭‪⁫⁫‭‬⁬‭‬‎⁫‮‮‎⁫‍⁫‪‮‭‎⁫‬‪‍⁯⁮⁯⁯⁫‪​⁪⁪‮(16);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeProducts = new int[\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeLists.Length];
    for (int index1 = 0; index1 < \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeLists.Length; ++index1)
    {
      int[] primeList = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeLists[index1];
      int num = primeList[0];
      for (int index2 = 1; index2 < primeList.Length; ++index2)
        num *= primeList[index2];
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeProducts[index1] = num;
    }
  }

  private static int \u206E⁮‎⁪‏‎‬‪⁮‮⁮‪‌‍‬⁭‭‪⁪‭‌‮‍‌‮‌‬‎‪‪‬‏‎⁬‍‌⁭‎⁪‪‮(int _param0) => (_param0 + 8 - 1) / 8;

  public static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200B‎‬⁮‪⁭‪‫‍⁭‌⁯‫‍‏⁬‎⁮‭⁫‮‍‎⁯‌‍‍⁯⁫⁯‫⁭⁯⁭⁫‏⁬‬‮‮‮(
    int _param0)
  {
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(_param0, (Random) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.RandomSource);
  }

  private \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(int _param1, int[] _param2, bool _param3)
  {
    if (_param3)
    {
      int sourceIndex = 0;
      while (sourceIndex < _param2.Length && _param2[sourceIndex] == 0)
        ++sourceIndex;
      if (sourceIndex == _param2.Length)
      {
        this.sign = 0;
        this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude;
      }
      else
      {
        this.sign = _param1;
        if (sourceIndex == 0)
        {
          this.magnitude = _param2;
        }
        else
        {
          this.magnitude = new int[_param2.Length - sourceIndex];
          Array.Copy((Array) _param2, sourceIndex, (Array) this.magnitude, 0, this.magnitude.Length);
        }
      }
    }
    else
    {
      this.sign = _param1;
      this.magnitude = _param2;
    }
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(string _param1)
    : this(_param1, 10)
  {
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(string _param1, int _param2)
  {
    if (_param1.Length == 0)
      throw new FormatException("Zero length BigInteger");
    NumberStyles style;
    int length;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2;
    switch (_param2)
    {
      case 2:
        style = NumberStyles.Integer;
        length = 1;
        obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix2;
        obj2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix2E;
        break;
      case 8:
        style = NumberStyles.Integer;
        length = 1;
        obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix8;
        obj2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix8E;
        break;
      case 10:
        style = NumberStyles.Integer;
        length = 19;
        obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix10;
        obj2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix10E;
        break;
      case 16:
        style = NumberStyles.AllowHexSpecifier;
        length = 16;
        obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix16;
        obj2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.radix16E;
        break;
      default:
        throw new FormatException("Only bases 2, 8, 10, or 16 allowed");
    }
    int num1 = 0;
    this.sign = 1;
    if (_param1[0] == '-')
    {
      if (_param1.Length == 1)
        throw new FormatException("Zero length BigInteger");
      this.sign = -1;
      num1 = 1;
    }
    while (num1 < _param1.Length && int.Parse(_param1[num1].ToString(), style) == 0)
      ++num1;
    if (num1 >= _param1.Length)
    {
      this.sign = 0;
      this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude;
    }
    else
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
      int num2 = num1 + length;
      if (num2 <= _param1.Length)
      {
        do
        {
          string s = _param1.Substring(num1, length);
          ulong num3 = ulong.Parse(s, style);
          \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj4 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D⁫‫‭‏‌⁫‌‪⁫⁪‎‏⁬‭‎⁫‪‭⁭‌⁭‭⁮⁯‎​⁮⁮‬​⁪‍⁫‪‏‬⁯⁪⁫‮(num3);
          \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj5;
          switch (_param2)
          {
            case 2:
              if (num3 >= 2UL)
                throw new FormatException("Bad character in radix 2 string: " + s);
              obj5 = obj3.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(1);
              break;
            case 8:
              if (num3 >= 8UL)
                throw new FormatException("Bad character in radix 8 string: " + s);
              obj5 = obj3.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(3);
              break;
            case 16:
              obj5 = obj3.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(64);
              break;
            default:
              obj5 = obj3.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj2);
              break;
          }
          obj3 = obj5.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(obj4);
          num1 = num2;
          num2 += length;
        }
        while (num2 <= _param1.Length);
      }
      if (num1 < _param1.Length)
      {
        string s = _param1.Substring(num1);
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj6 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D⁫‫‭‏‌⁫‌‪⁫⁪‎‏⁬‭‎⁫‪‭⁭‌⁭‭⁮⁯‎​⁮⁮‬​⁪‍⁫‪‏‬⁯⁪⁫‮(ulong.Parse(s, style));
        if (obj3.sign > 0)
        {
          switch (_param2)
          {
            case 2:
            case 8:
              obj3 = obj3.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(obj6);
              break;
            case 16:
              obj3 = obj3.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(s.Length << 2);
              goto case 2;
            default:
              obj3 = obj3.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj1.\u206A‮‮⁫⁫⁫⁭‪⁫⁫‭‬⁬‭‬‎⁫‮‮‎⁫‍⁫‪‮‭‎⁫‬‪‍⁯⁮⁯⁯⁫‪​⁪⁪‮(s.Length));
              goto case 2;
          }
        }
        else
          obj3 = obj6;
      }
      this.magnitude = obj3.magnitude;
    }
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(byte[] _param1)
    : this(_param1, 0, _param1.Length)
  {
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(byte[] _param1, int _param2, int _param3)
  {
    if (_param3 == 0)
      throw new FormatException("Zero length BigInteger");
    if ((sbyte) _param1[_param2] < (sbyte) 0)
    {
      this.sign = -1;
      int num = _param2 + _param3;
      int index1 = _param2;
      while (index1 < num && _param1[index1] == byte.MaxValue)
        ++index1;
      if (index1 >= num)
      {
        this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.magnitude;
      }
      else
      {
        int length = num - index1;
        byte[] numArray = new byte[length];
        int index2 = 0;
        while (index2 < length)
          numArray[index2++] = ~_param1[index1++];
        while (numArray[--index2] == byte.MaxValue)
          numArray[index2] = (byte) 0;
        ++numArray[index2];
        this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D‎⁫‬‫‬⁮‬⁪​‭‪‫⁬‫‬‏‌⁭⁯​⁭⁫‭‏‬‍‮⁫‪⁫⁭⁪⁭‍‭‫‍‭‎‮(numArray, 0, numArray.Length);
      }
    }
    else
    {
      this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D‎⁫‬‫‬⁮‬⁪​‭‪‫⁬‫‬‏‌⁭⁯​⁭⁫‭‏‬‍‮⁫‪⁫⁭⁪⁭‍‭‫‍‭‎‮(_param1, _param2, _param3);
      this.sign = this.magnitude.Length != 0 ? 1 : 0;
    }
  }

  private static int[] \u200D‎⁫‬‫‬⁮‬⁪​‭‪‫⁬‫‬‏‌⁭⁯​⁭⁫‭‏‬‍‮⁫‪⁫⁭⁪⁭‍‭‫‍‭‎‮(
    byte[] _param0,
    int _param1,
    int _param2)
  {
    int num1 = _param1 + _param2;
    int index1 = _param1;
    while (index1 < num1 && _param0[index1] == (byte) 0)
      ++index1;
    if (index1 >= num1)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude;
    int length = (num1 - index1 + 3) / 4;
    int num2 = (num1 - index1) % 4;
    if (num2 == 0)
      num2 = 4;
    if (length < 1)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude;
    int[] numArray = new int[length];
    int num3 = 0;
    int index2 = 0;
    for (int index3 = index1; index3 < num1; ++index3)
    {
      num3 = num3 << 8 | (int) _param0[index3] & (int) byte.MaxValue;
      --num2;
      if (num2 <= 0)
      {
        numArray[index2] = num3;
        ++index2;
        num2 = 4;
        num3 = 0;
      }
    }
    if (index2 < numArray.Length)
      numArray[index2] = num3;
    return numArray;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(int _param1, byte[] _param2)
    : this(_param1, _param2, 0, _param2.Length)
  {
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(
    int _param1,
    byte[] _param2,
    int _param3,
    int _param4)
  {
    if (_param1 < -1 || _param1 > 1)
      throw new FormatException("Invalid sign value");
    if (_param1 == 0)
    {
      this.sign = 0;
      this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude;
    }
    else
    {
      this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D‎⁫‬‫‬⁮‬⁪​‭‪‫⁬‫‬‏‌⁭⁯​⁭⁫‭‏‬‍‮⁫‪⁫⁭⁪⁭‍‭‫‍‭‎‮(_param2, _param3, _param4);
      this.sign = this.magnitude.Length < 1 ? 0 : _param1;
    }
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(int _param1, Random _param2)
  {
    if (_param1 < 0)
      throw new ArgumentException("sizeInBits must be non-negative");
    this.nBits = -1;
    this.nBitLength = -1;
    if (_param1 == 0)
    {
      this.sign = 0;
      this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude;
    }
    else
    {
      int length = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206E⁮‎⁪‏‎‬‪⁮‮⁮‪‌‍‬⁭‭‪⁪‭‌‮‍‌‮‌‬‎‪‪‬‏‎⁬‍‌⁭‎⁪‪‮(_param1);
      byte[] buffer = new byte[length];
      _param2.NextBytes(buffer);
      int num = 8 * length - _param1;
      buffer[0] &= (byte) ((uint) byte.MaxValue >> num);
      this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D‎⁫‬‫‬⁮‬⁪​‭‪‫⁬‫‬‏‌⁭⁯​⁭⁫‭‏‬‍‮⁫‪⁫⁭⁪⁭‍‭‫‍‭‎‮(buffer, 0, buffer.Length);
      this.sign = this.magnitude.Length < 1 ? 0 : 1;
    }
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(int _param1, int _param2, Random _param3)
  {
    if (_param1 < 2)
      throw new ArithmeticException("bitLength < 2");
    this.sign = 1;
    this.nBitLength = _param1;
    if (_param1 == 2)
    {
      this.magnitude = _param3.Next(2) == 0 ? \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two.magnitude : \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Three.magnitude;
    }
    else
    {
      int length = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206E⁮‎⁪‏‎‬‪⁮‮⁮‪‌‍‬⁭‭‪⁪‭‌‮‍‌‮‌‬‎‪‪‬‏‎⁬‍‌⁭‎⁪‪‮(_param1);
      byte[] buffer = new byte[length];
      int num1 = 8 * length - _param1;
      byte num2 = (byte) ((uint) byte.MaxValue >> num1);
      byte num3 = (byte) (1 << 7 - num1);
label_5:
      _param3.NextBytes(buffer);
      buffer[0] &= num2;
      buffer[0] |= num3;
      buffer[length - 1] |= (byte) 1;
      this.magnitude = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D‎⁫‬‫‬⁮‬⁪​‭‪‫⁬‫‬‏‌⁭⁯​⁭⁫‭‏‬‍‮⁫‪⁫⁭⁪⁭‍‭‫‍‭‎‮(buffer, 0, buffer.Length);
      this.nBits = -1;
      this.mQuote = 0;
      if (_param2 < 1 || this.\u200C‫​‬‮⁪‭‏‍⁪⁮⁮‫‭‭‮‪‌⁭⁭‎⁯‌‍‮‮‮⁬⁪‮‪‬‮⁪‮⁯⁫‮⁮‌‮(_param2, _param3, true))
        return;
      for (int index = 1; index < this.magnitude.Length - 1; ++index)
      {
        this.magnitude[index] ^= _param3.Next();
        if (this.\u200C‫​‬‮⁪‭‏‍⁪⁮⁮‫‭‭‮‪‌⁭⁭‎⁯‌‍‮‮‮⁬⁪‮‪‬‮⁪‮⁯⁫‮⁮‌‮(_param2, _param3, true))
          return;
      }
      goto label_5;
    }
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮() => this.sign < 0 ? this.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮() : this;

  private static int[] \u200C‫‪​⁯⁮⁬‪‭⁮‍‬⁪‮‏‮⁯‪‌⁮‍‫‍‎‮⁬‎⁭‎​​⁯‭⁫⁭‏‌‪⁫‍‮(int[] _param0, int[] _param1)
  {
    int index = _param0.Length - 1;
    int num1 = _param1.Length - 1;
    long num2 = 0;
    while (num1 >= 0)
    {
      long num3 = num2 + ((long) (uint) _param0[index] + (long) (uint) _param1[num1--]);
      _param0[index--] = (int) num3;
      num2 = (long) ((ulong) num3 >> 32);
    }
    if (num2 != 0L)
    {
      while (index >= 0 && ++_param0[index--] == 0)
        ;
    }
    return _param0;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (this.sign == 0)
      return _param1;
    if (this.sign == _param1.sign)
      return this.\u200D‍‫‏‌⁫‫⁪⁪⁭‮‎‎‌‮​‍‮‌‭‬‍⁮‏‬⁪⁬‍⁬‭⁪‪‌⁫‬​‪‮⁫⁪‮(_param1.magnitude);
    if (_param1.sign == 0)
      return this;
    return _param1.sign < 0 ? this.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(_param1.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮()) : _param1.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(this.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮());
  }

  private \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200D‍‫‏‌⁫‫⁪⁪⁭‮‎‎‌‮​‍‮‌‭‬‍⁮‏‬⁪⁬‍⁬‭⁪‪‌⁫‬​‪‮⁫⁪‮(
    int[] _param1)
  {
    int[] numArray1;
    int[] numArray2;
    if (this.magnitude.Length < _param1.Length)
    {
      numArray1 = _param1;
      numArray2 = this.magnitude;
    }
    else
    {
      numArray1 = this.magnitude;
      numArray2 = _param1;
    }
    uint maxValue = uint.MaxValue;
    if (numArray1.Length == numArray2.Length)
      maxValue -= (uint) numArray2[0];
    bool flag = (uint) numArray1[0] >= maxValue;
    int[] numArray3;
    if (flag)
    {
      numArray3 = new int[numArray1.Length + 1];
      numArray1.CopyTo((Array) numArray3, 1);
    }
    else
      numArray3 = (int[]) numArray1.Clone();
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C‫‪​⁯⁮⁬‪‭⁮‍‬⁪‮‏‮⁯‪‌⁮‍‫‍‎‮⁬‎⁭‎​​⁯‭⁫⁭‏‌‪⁫‍‮(numArray3, numArray2), flag);
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206C⁪‬‎‏‮‪‬‬⁮⁪⁭‮‬‭‎‌‎‪‭⁪⁮‌‌‮‬‏​⁬‌‏‭⁭⁯‌‎⁯​⁯⁫‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (this.sign == 0 || _param1.sign == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    int[] numArray1 = this.sign > 0 ? this.magnitude : this.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One).magnitude;
    int[] numArray2 = _param1.sign > 0 ? _param1.magnitude : _param1.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One).magnitude;
    bool flag = this.sign < 0 && _param1.sign < 0;
    int[] numArray3 = new int[Math.Max(numArray1.Length, numArray2.Length)];
    int num1 = numArray3.Length - numArray1.Length;
    int num2 = numArray3.Length - numArray2.Length;
    for (int index = 0; index < numArray3.Length; ++index)
    {
      int num3 = index >= num1 ? numArray1[index - num1] : 0;
      int num4 = index >= num2 ? numArray2[index - num2] : 0;
      if (this.sign < 0)
        num3 = ~num3;
      if (_param1.sign < 0)
        num4 = ~num4;
      numArray3[index] = num3 & num4;
      if (flag)
        numArray3[index] = ~numArray3[index];
    }
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, numArray3, true);
    if (flag)
      obj = obj.\u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮();
    return obj;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202E‌​‍‬‮⁬⁫⁫⁬⁬‮⁭‏⁬‪⁫‪⁪‮⁪‍‪⁭‎‍⁯⁪‭‏⁬⁮‍‬‫‌‎‎‬⁬‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    return this.\u206C⁪‬‎‏‮‪‬‬⁮⁪⁭‮‬‭‎‌‎‪‭⁪⁮‌‌‮‬‏​⁬‌‏‭⁭⁯‌‎⁯​⁯⁫‮(_param1.\u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮());
  }

  public int \u206C⁯‎‮⁪⁯⁫‬‍⁮‭⁪‏‌‏‎⁯‎⁫⁭‏‏​‮​‎‬‌‫⁪‫​​⁫‏‭​⁪⁮‪‮
  {
    get
    {
      if (this.nBits == -1)
      {
        if (this.sign < 0)
        {
          this.nBits = this.\u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮().\u206C⁯‎‮⁪⁯⁫‬‍⁮‭⁪‏‌‏‎⁯‎⁫⁭‏‏​‮​‎‬‌‫⁪‫​​⁫‏‭​⁪⁮‪‮;
        }
        else
        {
          int num = 0;
          for (int index = 0; index < this.magnitude.Length; ++index)
            num += \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C‪‮⁯⁪‮⁯‮‪‬⁮‬⁮⁮⁬‮⁯‌​⁯‭‫‮⁫‮‮‬‬⁮‫‪‍‏‎‮‬‏⁬‮⁪‮(this.magnitude[index]);
          this.nBits = num;
        }
      }
      return this.nBits;
    }
  }

  public static int \u200C‪‮⁯⁪‮⁯‮‪‬⁮‬⁮⁮⁬‮⁯‌​⁯‭‫‮⁫‮‮‬‬⁮‫‪‍‏‎‮‬‏⁬‮⁪‮(int _param0)
  {
    uint num1 = (uint) _param0;
    uint num2 = num1 - (num1 >> 1 & 1431655765U);
    uint num3 = (uint) (((int) num2 & 858993459) + ((int) (num2 >> 2) & 858993459));
    uint num4 = (uint) ((int) num3 + (int) (num3 >> 4) & 252645135);
    uint num5 = num4 + (num4 >> 8);
    return (int) (num5 + (num5 >> 16) & 63U);
  }

  private static int \u206C⁭‍‬⁪⁪‭‌⁭‫‍‪⁪‭⁭​‎⁫⁯⁫‪⁫⁭‮‎‫‭‫‬⁫‏⁭‍‎‪‎⁮⁭‪‮(
    int _param0,
    int _param1,
    int[] _param2)
  {
    for (; _param1 < _param2.Length; ++_param1)
    {
      if (_param2[_param1] != 0)
      {
        int num1 = 32 * (_param2.Length - _param1 - 1);
        int num2 = _param2[_param1];
        int num3 = num1 + \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D‎‍​‫‪‪⁮‫‏⁫⁭⁭​‪‌⁪‍‍‮‍‎​‌‭⁯⁬⁫‪⁪‭‭⁭⁮‫‬⁭‌⁫⁭‮(num2);
        if (_param0 < 0 && (num2 & -num2) == num2)
        {
          while (++_param1 < _param2.Length)
          {
            if (_param2[_param1] != 0)
              goto label_8;
          }
          --num3;
        }
label_8:
        return num3;
      }
    }
    return 0;
  }

  public int \u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮
  {
    get
    {
      if (this.nBitLength == -1)
        this.nBitLength = this.sign == 0 ? 0 : \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206C⁭‍‬⁪⁪‭‌⁭‫‍‪⁪‭⁭​‎⁫⁯⁫‪⁫⁭‮‎‫‭‫‬⁫‏⁭‍‎‪‎⁮⁭‪‮(this.sign, 0, this.magnitude);
      return this.nBitLength;
    }
  }

  internal static int \u206D‎‍​‫‪‪⁮‫‏⁫⁭⁭​‪‌⁪‍‍‮‍‎​‌‭⁯⁬⁫‪⁪‭‭⁭⁮‫‬⁭‌⁫⁭‮(int _param0)
  {
    uint index1 = (uint) _param0;
    uint index2 = index1 >> 24;
    if (index2 != 0U)
      return 24 + (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.BitLengthTable[(int) index2];
    uint index3 = index1 >> 16;
    if (index3 != 0U)
      return 16 + (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.BitLengthTable[(int) index3];
    uint index4 = index1 >> 8;
    return index4 != 0U ? 8 + (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.BitLengthTable[(int) index4] : (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.BitLengthTable[(int) index1];
  }

  private bool \u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮() => this.sign > 0 && this.nBits == 1;

  public int \u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(object _param1) => this.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) _param1);

  private static int \u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(
    int _param0,
    int[] _param1,
    int _param2,
    int[] _param3)
  {
    while (_param0 != _param1.Length && _param1[_param0] == 0)
      ++_param0;
    while (_param2 != _param3.Length && _param3[_param2] == 0)
      ++_param2;
    return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(_param0, _param1, _param2, _param3);
  }

  private static int \u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(
    int _param0,
    int[] _param1,
    int _param2,
    int[] _param3)
  {
    int num1 = _param1.Length - _param3.Length - (_param0 - _param2);
    if (num1 != 0)
      return num1 >= 0 ? 1 : -1;
    while (_param0 < _param1.Length)
    {
      uint num2 = (uint) _param1[_param0++];
      uint num3 = (uint) _param3[_param2++];
      if ((int) num2 != (int) num3)
        return num2 >= num3 ? 1 : -1;
    }
    return 0;
  }

  public int \u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (this.sign < _param1.sign)
      return -1;
    if (this.sign > _param1.sign)
      return 1;
    return this.sign != 0 ? this.sign * \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(0, this.magnitude, 0, _param1.magnitude) : 0;
  }

  private int[] \u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮(int[] _param1, int[] _param2)
  {
    int index1 = 0;
    while (index1 < _param1.Length && _param1[index1] == 0)
      ++index1;
    int sourceIndex = 0;
    while (sourceIndex < _param2.Length && _param2[sourceIndex] == 0)
      ++sourceIndex;
    int num1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(index1, _param1, sourceIndex, _param2);
    int[] numArray1;
    if (num1 > 0)
    {
      int num2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206C⁭‍‬⁪⁪‭‌⁭‫‍‪⁪‭⁭​‎⁫⁯⁫‪⁫⁭‮‎‫‭‫‬⁫‏⁭‍‎‪‎⁮⁭‪‮(1, sourceIndex, _param2);
      int num3 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206C⁭‍‬⁪⁪‭‌⁭‫‍‪⁪‭⁭​‎⁫⁯⁫‪⁫⁭‮‎‫‭‫‬⁫‏⁭‍‎‪‎⁮⁭‪‮(1, index1, _param1);
      int num4 = num3 - num2;
      int index2 = 0;
      int index3 = 0;
      int num5 = num2;
      int[] numArray2;
      int[] destinationArray;
      if (num4 > 0)
      {
        numArray2 = new int[(num4 >> 5) + 1];
        numArray2[0] = 1 << num4 % 32;
        destinationArray = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(_param2, num4);
        num5 += num4;
      }
      else
      {
        numArray2 = new int[1]{ 1 };
        int length = _param2.Length - sourceIndex;
        destinationArray = new int[length];
        Array.Copy((Array) _param2, sourceIndex, (Array) destinationArray, 0, length);
      }
      numArray1 = new int[numArray2.Length];
label_11:
      if (num5 < num3 || \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(index1, _param1, index3, destinationArray) >= 0)
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(index1, _param1, index3, destinationArray);
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C‫‪​⁯⁮⁬‪‭⁮‍‬⁪‮‏‮⁯‪‌⁮‍‫‍‎‮⁬‎⁭‎​​⁯‭⁫⁭‏‌‪⁫‍‮(numArray1, numArray2);
        while (_param1[index1] == 0)
        {
          if (++index1 == _param1.Length)
            return numArray1;
        }
        num3 = 32 * (_param1.Length - index1 - 1) + \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D‎‍​‫‪‪⁮‫‏⁫⁭⁭​‪‌⁪‍‍‮‍‎​‌‭⁯⁬⁫‪⁪‭‭⁭⁮‫‬⁭‌⁫⁭‮(_param1[index1]);
        if (num3 <= num2)
        {
          if (num3 < num2)
            return numArray1;
          num1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(index1, _param1, sourceIndex, _param2);
          if (num1 <= 0)
            goto label_30;
        }
      }
      int num6 = num5 - num3;
      if (num6 == 1 && (uint) destinationArray[index3] >> 1 > (uint) _param1[index1])
        ++num6;
      if (num6 < 2)
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F⁬‍⁬‮‏⁫⁪⁮‎⁪⁪‮‭​‍‬​⁭‫‫⁯​‎⁫⁬‫‬⁪‎⁯⁭‭⁮‬⁫‫‬⁮‫‮(index3, destinationArray);
        --num5;
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F⁬‍⁬‮‏⁫⁪⁮‎⁪⁪‮‭​‍‬​⁭‫‫⁯​‎⁫⁬‫‬⁪‎⁯⁭‭⁮‬⁫‫‬⁮‫‮(index2, numArray2);
      }
      else
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F⁫​‎‌⁮⁬⁮⁫‏‭‎⁮⁪⁮⁮⁮‮⁫⁬‎⁭⁭⁮⁬⁭⁫⁮⁪‫‫‌⁭‍‍⁬⁯‍‏‫‮(index3, destinationArray, num6);
        num5 -= num6;
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F⁫​‎‌⁮⁬⁮⁫‏‭‎⁮⁪⁮⁮⁮‮⁫⁬‎⁭⁭⁮⁬⁭⁫⁮⁪‫‫‌⁭‍‍⁬⁯‍‏‫‮(index2, numArray2, num6);
      }
      while (destinationArray[index3] == 0)
        ++index3;
      while (numArray2[index2] == 0)
        ++index2;
      goto label_11;
    }
    else
      numArray1 = new int[1];
label_30:
    if (num1 == 0)
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C‫‪​⁯⁮⁬‪‭⁮‍‬⁪‮‏‮⁯‪‌⁮‍‫‍‎‮⁬‎⁭‎​​⁯‭⁫⁭‏‌‪⁫‍‮(numArray1, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.magnitude);
      Array.Clear((Array) _param1, index1, _param1.Length - index1);
    }
    return numArray1;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (_param1.sign == 0)
      throw new ArithmeticException("Division by zero error");
    if (this.sign == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    if (_param1.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮())
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200D⁪‏‏⁬‭⁭⁯⁬‭​⁬‫‭‫‮⁬‭‫‮‫‍‫‮‏‏⁬⁭⁬‭⁫‍​⁮⁬‮​‫⁯‎‮(_param1.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1);
      return _param1.sign != this.sign ? obj.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮() : obj;
    }
    int[] numArray = (int[]) this.magnitude.Clone();
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign * _param1.sign, this.\u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮(numArray, _param1.magnitude), true);
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[] \u206E‎‪⁫⁯‌⁮⁫‎‭⁮‎‏⁭⁪⁬⁭‫⁭‫⁫‍⁪⁯‫‪⁬‮⁫‪⁭⁯⁭‎‮‫‍​‮⁫‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (_param1.sign == 0)
      throw new ArithmeticException("Division by zero error");
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[] objArray = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[2];
    if (this.sign == 0)
    {
      objArray[0] = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
      objArray[1] = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    }
    else if (_param1.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮())
    {
      int num = _param1.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1;
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200D⁪‏‏⁬‭⁭⁯⁬‭​⁬‫‭‫‮⁬‭‫‮‫‍‫‮‏‏⁬⁭⁬‭⁫‍​⁮⁬‮​‫⁯‎‮(num);
      int[] numArray = this.\u206B‫⁪‭​⁯‍‪‍⁯‪‍⁯⁪‎​‏‮⁬⁬‍‌⁬‫⁬‫​‏‪⁮‪⁮⁪⁫‭⁪‌⁫​⁯‮(num);
      objArray[0] = _param1.sign == this.sign ? obj : obj.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮();
      objArray[1] = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, numArray, true);
    }
    else
    {
      int[] numArray1 = (int[]) this.magnitude.Clone();
      int[] numArray2 = this.\u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮(numArray1, _param1.magnitude);
      objArray[0] = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign * _param1.sign, numArray2, true);
      objArray[1] = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, numArray1, true);
    }
    return objArray;
  }

  bool object.\u200F​⁮‫⁭‌‬‭‬‎‭‍‍‌‭⁮‫‪‫‬⁬‮‬‬‏‮‫⁬‏​⁮⁮‍​⁬⁮⁬‍‪‌‮(object _param1)
  {
    if (_param1 == this)
      return true;
    return _param1 is \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj && this.sign == obj.sign && this.\u206F‎⁮⁫‍‫‍‍⁮⁯‏‮⁭‍‬⁫⁬⁮⁪‮⁪‬⁫⁭‭⁭‭​⁮⁭⁬‪‪⁮⁪‮​‪‪‏‮(obj);
  }

  private bool \u206F‎⁮⁫‍‫‍‍⁮⁯‏‮⁭‍‬⁫⁬⁮⁪‮⁪‬⁫⁭‭⁭‭​⁮⁭⁬‪‪⁮⁪‮​‪‪‏‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    int[] magnitude = _param1.magnitude;
    if (this.magnitude.Length != _param1.magnitude.Length)
      return false;
    for (int index = 0; index < this.magnitude.Length; ++index)
    {
      if (this.magnitude[index] != _param1.magnitude[index])
        return false;
    }
    return true;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202C‭⁫‎⁫‍⁯⁬⁬⁮⁫‪‎‪⁭​⁪⁬⁪⁭‬‬⁫‫⁯⁪⁫⁭⁬⁮‬​⁯‏‭‭⁫‫⁬⁫‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (_param1.sign == 0)
      return this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮();
    if (this.sign == 0)
      return _param1.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮();
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = this;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2;
    for (\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = _param1; obj3.sign != 0; obj3 = obj2)
    {
      obj2 = obj1.\u206A‎‏⁫⁪‫‪‎⁭‮‮‭⁬⁮⁪⁬‮‍‫‏‮‎⁯‏‏‭⁯‭⁯‍‪⁮‬⁭‏⁬‎‍‭⁮‮(obj3);
      obj1 = obj3;
    }
    return obj1;
  }

  int object.\u202A⁯⁬​⁫⁯‮‭‎⁭⁯‫⁭​​‌‍‪‍⁮‏⁭⁯⁯‮⁭​⁯⁪‫‪‏⁮‪‫‪⁮‌‌‭‮()
  {
    int length = this.magnitude.Length;
    if (this.magnitude.Length != 0)
    {
      length ^= this.magnitude[0];
      if (this.magnitude.Length > 1)
        length ^= this.magnitude[this.magnitude.Length - 1];
    }
    return this.sign >= 0 ? length : ~length;
  }

  private \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202C‌‪‫‭‮‫‌‭‮‌⁯⁬⁬⁬‏‎‍⁭‬‪‎‮⁯‎⁮‮⁮‌‍‫⁮‌⁭⁭‬⁮‪‫‫‮()
  {
    if (this.sign == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One;
    return this.sign < 0 ? new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(-1, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202A‏⁮⁯⁫‬⁫⁯‮⁬⁯‮‌‏⁪‍‍‬‏⁮‍‫⁬‫‌⁭⁬‍‭‎‬‍⁯‪⁪⁭‍‮‌‭‮(this.magnitude, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.magnitude), true) : this.\u200D‍‫‏‌⁫‫⁪⁪⁭‮‎‎‌‮​‍‮‌‭‬‍⁮‏‬⁪⁬‍⁬‭⁪‪‌⁫‬​‪‮⁫⁪‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.magnitude);
  }

  public int \u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮
  {
    get
    {
      if (this.sign == 0)
        return 0;
      int num = this.magnitude[this.magnitude.Length - 1];
      return this.sign >= 0 ? num : -num;
    }
  }

  public int \u202E‭‫⁪‮​‎⁮‏‬⁬⁫‬‍‍‌‏‍⁭‮‭⁭⁫‮⁭‍‎⁬‫‮‬⁮‌⁪⁬‭⁮⁬‬‪‮
  {
    get
    {
      if (this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ > 31)
        throw new ArithmeticException("BigInteger out of int range");
      return this.\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮;
    }
  }

  public bool \u202C​⁭‎‪‮‏‮‌⁭‎⁫‌‫⁭‌⁯‎⁮‎⁯⁯‬‬‬‍‍⁫​‎‫‌⁭‮‍⁮⁮⁬‍‬‮(int _param1) => this.\u202C​⁭‎‪‮‏‮‌⁭‎⁫‌‫⁭‌⁯‎⁮‎⁯⁯‬‬‬‍‍⁫​‎‫‌⁭‮‍⁮⁮⁬‍‬‮(_param1, false);

  internal bool \u202C​⁭‎‪‮‏‮‌⁭‎⁫‌‫⁭‌⁯‎⁮‎⁯⁯‬‬‬‍‍⁫​‎‫‌⁭‮‍⁮⁮⁬‍‬‮(int _param1, bool _param2)
  {
    if (_param1 <= 0)
      return true;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮();
    if (!obj.\u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(0))
      return ((object) obj).Equals((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two);
    return !((object) obj).Equals((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One) && obj.\u200C‫​‬‮⁪‭‏‍⁪⁮⁮‫‭‭‮‪‌⁭⁭‎⁯‌‍‮‮‮⁬⁪‮‪‬‮⁪‮⁯⁫‮⁮‌‮(_param1, (Random) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.RandomSource, _param2);
  }

  private bool \u200C‫​‬‮⁪‭‏‍⁪⁮⁮‫‭‭‮‪‌⁭⁭‎⁯‌‍‮‮‮⁬⁪‮‪‬‮⁪‮⁯⁫‮⁮‌‮(
    int _param1,
    Random _param2,
    bool _param3)
  {
    int num1 = Math.Min(this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeLists.Length);
    for (int index = 0; index < num1; ++index)
    {
      int num2 = this.\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeProducts[index]);
      foreach (int num3 in \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.primeLists[index])
      {
        if (num2 % num3 == 0)
          return this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ < 16 && this.\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮ == num3;
      }
    }
    return this.\u206F‎⁫‎⁭⁯‎‪⁪‪⁪​⁯‫⁪‏‏⁫⁬‬‭‏⁬⁪‏⁮‭⁫⁭‎‏‭‫⁮‪⁮⁪​‮⁮‮(_param1, _param2, _param3);
  }

  public bool \u206F‎⁫‎⁭⁯‎‪⁪‪⁪​⁯‫⁪‏‏⁫⁬‬‭‏⁬⁪‏⁮‭⁫⁭‎‏‭‫⁮‪⁮⁪​‮⁮‮(int _param1, Random _param2) => this.\u206F‎⁫‎⁭⁯‎‪⁪‪⁪​⁯‫⁪‏‏⁫⁬‬‭‏⁬⁪‏⁮‭⁫⁭‎‏‭‫⁮‪⁮⁪​‮⁮‮(_param1, _param2, false);

  internal bool \u206F‎⁫‎⁭⁯‎‪⁪‪⁪​⁯‫⁪‏‏⁫⁬‬‭‏⁬⁪‏⁮‭⁫⁭‎‏‭‫⁮‪⁮⁪​‮⁮‮(
    int _param1,
    Random _param2,
    bool _param3)
  {
    int num1 = this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
    int val2 = (_param1 - 1) / 2 + 1;
    if (_param3)
    {
      int val1 = num1 >= 1024 ? 4 : (num1 >= 512 ? 8 : (num1 >= 256 ? 16 : 50));
      val2 = _param1 >= 100 ? val2 - 50 + val1 : Math.Min(val1, val2);
    }
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = this;
    int num2 = obj1.\u200C‌⁫‮‍‎‮‏⁭‍⁮‮‎‎⁮‪‮‍‏‮⁭‎⁫⁪⁭⁪‎⁯⁬‭‌⁫​⁪‭‎⁫⁬‌⁬‮(-2);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = obj1.\u200D⁪‏‏⁬‭⁭⁯⁬‭​⁬‫‭‫‮⁬‭‫‮‫‍‫‮‏‏⁬⁭⁬‭⁫‍​⁮⁬‮​‫⁯‎‮(num2);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(32 * obj1.magnitude.Length).\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(obj1);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj4 = obj1.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(obj3);
    do
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj5;
      do
      {
        obj5 = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(obj1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮, _param2);
      }
      while (obj5.sign == 0 || obj5.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(obj1) >= 0 || obj5.\u206F‎⁮⁫‍‫‍‍⁮⁯‏‮⁭‍‬⁫⁬⁮⁪‮⁪‬⁫⁭‭⁭‭​⁮⁭⁬‪‪⁮⁪‮​‪‪‏‮(obj3) || obj5.\u206F‎⁮⁫‍‫‍‍⁮⁯‏‮⁭‍‬⁫⁬⁮⁪‮⁪‬⁫⁭‭⁭‭​⁮⁭⁬‪‪⁮⁪‮​‪‪‏‮(obj4));
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj6 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C⁭⁮⁯‍‎‬⁪‫​⁯‭‫‪‬‌​⁪⁪‭‪‍⁪‮⁬‭‮⁯‭⁬⁭‮⁮‫⁯‏​⁮⁭⁮‮(obj5, obj2, obj1, false);
      if (!((object) obj6).Equals((object) obj3))
      {
        int num3 = 0;
        while (!((object) obj6).Equals((object) obj4))
        {
          if (++num3 == num2)
            return false;
          obj6 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C⁭⁮⁯‍‎‬⁪‫​⁯‭‫‪‬‌​⁪⁪‭‪‍⁪‮⁬‭‮⁯‭⁬⁭‮⁮‫⁯‏​⁮⁭⁮‮(obj6, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two, obj1, false);
          if (((object) obj6).Equals((object) obj3))
            return false;
        }
      }
    }
    while (--val2 > 0);
    return true;
  }

  public long \u202A‍‭‎⁫⁮‏⁮‫‭⁬‏‌‬‌​‮‬‍‏‎‬‏‎⁪‌‭‎‭‎​​⁬⁯‪‫⁯‏⁯‬‮
  {
    get
    {
      if (this.sign == 0)
        return 0;
      int length = this.magnitude.Length;
      long num = (long) this.magnitude[length - 1] & (long) uint.MaxValue;
      if (length > 1)
        num |= ((long) this.magnitude[length - 2] & (long) uint.MaxValue) << 32;
      return this.sign >= 0 ? num : -num;
    }
  }

  public long \u206A⁯⁮⁭‫‭‏‌⁯‪⁪⁫‬‭⁯‪‭‎‮‬⁯⁭‎⁭​‪‮​‭‍‮‌‎⁪⁯‌​⁪⁮‏‮
  {
    get
    {
      if (this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ > 63)
        throw new ArithmeticException("BigInteger out of long range");
      return this.\u202A‍‭‎⁫⁮‏⁮‫‭⁬‏‌‬‌​‮‬‍‏‎‬‏‎⁪‌‭‎‭‎​​⁬⁯‪‫⁯‏⁯‬‮;
    }
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206C⁮⁮‪⁯‎​⁮‬‫‌⁮⁮⁯‍‫‭⁮⁬⁪⁭‎⁬⁯​‭⁪⁬⁯⁯‬⁫‭​⁯⁭⁬​‫⁫‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    return this.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param1) <= 0 ? _param1 : this;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200D​‮⁮⁫‪‏‎‍⁮⁭‎⁪‎‮‏⁮‪‮‌⁫⁯‭‎​⁯‬‌‌‫‬‬‍⁭‏‏‮‭‏‫‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    return this.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param1) >= 0 ? _param1 : this;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206A‎‏⁫⁪‫‪‎⁭‮‮‭⁬⁮⁪⁬‮‍‫‏‮‎⁯‏‏‭⁯‭⁯‍‪⁮‬⁭‏⁬‎‍‭⁮‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = _param1.sign >= 1 ? this.\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(_param1) : throw new ArithmeticException("Modulus must be positive");
    return obj.sign < 0 ? obj.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(_param1) : obj;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200B⁫‮‍‬‎​‏‪‏​‏‫⁪⁫⁯‍‬⁯⁪‎‪​⁬‫‌‍‌‪⁭‭‪‫‫‪‮⁬‬‍‪‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (_param1.sign < 1)
      throw new ArithmeticException("Modulus must be positive");
    if (_param1.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮())
      return this.\u200D⁯‫⁬‍‏⁫⁬​‬‮⁫⁭⁪⁫‎‎​⁭‍⁮⁭⁭​‪‪⁯‪‫⁫‭⁫‏‍⁬‏⁪⁫‬⁬‮(_param1);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj;
    if (!((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206A​⁯⁫‌‬⁯‎‌​⁯⁮‍⁫⁫‏‍‍‎‏⁫​‍⁯‪​⁪⁮⁬‭⁮⁮⁫‎⁮⁮‌‪‏‎‮(this.\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(_param1), _param1, out obj)).Equals((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One))
      throw new ArithmeticException("Numbers not relatively prime.");
    if (obj.sign < 0)
      obj = obj.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(_param1);
    return obj;
  }

  private \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200D⁯‫⁬‍‏⁫⁬​‬‮⁫⁭⁪⁫‎‎​⁭‍⁮⁭⁭​‪‪⁯‪‫⁫‭⁫‏‍⁬‏⁪⁫‬⁬‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (!this.\u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(0))
      throw new ArithmeticException("Numbers not relatively prime.");
    int num1 = _param1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1;
    long num2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C⁭‮⁬⁫⁪‮‏⁭​‪‌⁫‭⁭‍‭‮‪‮⁯‬‍⁬‪⁯⁬​‎‫‬‪⁯⁬⁭‬‬‎‮‌‮(this.\u202A‍‭‎⁫⁮‏⁮‫‭⁬‏‌‬‌​‮‬‍‏‎‬‏‎⁪‌‭‎‭‎​​⁬⁯‪‫⁯‏⁯‬‮);
    if (num1 < 64)
      num2 &= (1L << num1) - 1L;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮(num2);
    if (num1 > 64)
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = this.\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(_param1);
      int num3 = 64;
      do
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = obj1.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj2).\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(_param1);
        obj1 = obj1.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(obj3)).\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(_param1);
        num3 <<= 1;
      }
      while (num3 < num1);
    }
    if (obj1.sign < 0)
      obj1 = obj1.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(_param1);
    return obj1;
  }

  private static int \u202E​⁮‌⁪‭‮⁬‫‫‎‭‪‏‎‫‭‏⁮‫⁫⁫‭⁪⁬‬⁫‬‏⁯​‏⁪⁭‌‮⁭‎‍‍‮(int _param0)
  {
    int num1 = _param0 + ((_param0 + 1 & 4) << 1);
    int num2 = num1 * (2 - _param0 * num1);
    int num3 = num2 * (2 - _param0 * num2);
    return num3 * (2 - _param0 * num3);
  }

  private static long \u200C⁭‮⁬⁫⁪‮‏⁭​‪‌⁫‭⁭‍‭‮‪‮⁯‬‍⁬‪⁯⁬​‎‫‬‪⁯⁬⁭‬‬‎‮‌‮(long _param0)
  {
    long num1 = _param0 + ((_param0 + 1L & 4L) << 1);
    long num2 = num1 * (2L - _param0 * num1);
    long num3 = num2 * (2L - _param0 * num2);
    long num4 = num3 * (2L - _param0 * num3);
    return num4 * (2L - _param0 * num4);
  }

  private static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206A​⁯⁫‌‬⁯‎‌​⁯⁮‍⁫⁫‏‍‍‎‏⁫​‍⁯‪​⁪⁮⁬‭⁮⁮⁫‎⁮⁮‌‪‏‎‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1,
    out \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param2)
  {
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = _param0;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj4 = _param1;
    if (obj4.sign > 0)
    {
      while (true)
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[] objArray = obj3.\u206E‎‪⁫⁯‌⁮⁫‎‭⁮‎‏⁭⁪⁬⁭‫⁭‫⁫‍⁪⁯‫‪⁬‮⁫‪⁭⁯⁭‎‮‫‍​‮⁫‮(obj4);
        obj3 = obj4;
        obj4 = objArray[1];
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj5 = obj1;
        obj1 = obj2;
        if (obj4.sign > 0)
          obj2 = obj5.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(obj2.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(objArray[0]));
        else
          break;
      }
    }
    _param2 = obj1;
    return obj3;
  }

  private static void \u206D‎⁪⁪‏‏​⁬⁬‌⁮‍‭‏‏‌‏‏⁬⁭⁮‫​‮⁬⁫⁫⁭‌‎⁮‬‬⁮‏‪‪‏‌⁫‮(int[] _param0) => Array.Clear((Array) _param0, 0, _param0.Length);

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206B‫‌‍⁮​‌‮‮​⁬‏​⁯‍‮‍⁯‪‌⁬​⁯‏⁬‎⁬‌​⁪‬‮‭‎‎⁪​⁫‫‪‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param2)
  {
    if (_param2.sign < 1)
      throw new ArithmeticException("Modulus must be positive");
    if (((object) _param2).Equals((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One))
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    if (_param1.sign == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One;
    if (this.sign == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    int num = _param1.sign < 0 ? 1 : 0;
    if (num != 0)
      _param1 = _param1.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮();
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = this.\u206A‎‏⁫⁪‫‪‎⁭‮‮‭⁬⁮⁪⁬‮‍‫‏‮‎⁯‏‏‭⁯‭⁯‍‪⁮‬⁭‏⁬‎‍‭⁮‮(_param2);
    if (!((object) _param1).Equals((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One))
      obj = (_param2.magnitude[_param2.magnitude.Length - 1] & 1) != 0 ? \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200C⁭⁮⁯‍‎‬⁪‫​⁯‭‫‪‬‌​⁪⁪‭‪‍⁪‮⁬‭‮⁯‭⁬⁭‮⁮‫⁯‏​⁮⁭⁮‮(obj, _param1, _param2, true) : \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200E⁫⁭‫⁫⁯‍‏⁯​⁭‎‎‫‎⁯​‪⁮‬⁭‎⁬‌⁮​‏⁫‮‍⁭​‪⁯⁯​⁮​‭‌‮(obj, _param1, _param2);
    if (num != 0)
      obj = obj.\u200B⁫‮‍‬‎​‏‪‏​‏‫⁪⁫⁯‍‬⁯⁪‎‪​⁬‫‌‍‌‪⁭‭‪‫‫‪‮⁬‬‍‪‮(_param2);
    return obj;
  }

  private static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200E⁫⁭‫⁫⁯‍‏⁯​⁭‎‎‫‎⁯​‪⁮‬⁭‎⁬‌⁮​‏⁫‮‍⁭​‪⁯⁯​⁮​‭‌‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param2)
  {
    int length1 = _param2.magnitude.Length;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(length1 + 1 << 5);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(length1 << 6).\u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮(_param2);
    int index1 = 0;
    int num1 = _param1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
    while (num1 > \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ExpWindowThresholds[index1])
      ++index1;
    int length2 = 1 << index1;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[] objArray = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[length2];
    objArray[0] = _param0;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206A‪‮‌⁭⁪​⁯‎⁯⁪⁬‬⁯‎‏⁬⁫⁪⁮⁯​‍‎‍⁪‎‍⁬⁫‮‮​‌⁬⁯‎‏‎‬‮(_param0.\u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮(), _param2, obj1, obj2);
    for (int index2 = 1; index2 < length2; ++index2)
      objArray[index2] = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206A‪‮‌⁭⁪​⁯‎⁯⁪⁬‬⁯‎‏⁬⁫⁪⁮⁯​‍‎‍⁪‎‍⁬⁫‮‮​‌⁬⁯‎‏‎‬‮(objArray[index2 - 1].\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj3), _param2, obj1, obj2);
    int[] numArray1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200B‭‌⁫‮‏‎‪‪‌​‫⁪‍‍‪⁬‪‭‭‪⁬​⁭‮‌⁫‪⁪⁭⁫‭‏⁯‌‫‏⁮⁫‍‮(_param1.magnitude, index1);
    int num2 = numArray1[0];
    int num3 = num2 & (int) byte.MaxValue;
    int num4 = num2 >> 8;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj4;
    if (num3 == 1)
    {
      obj4 = obj3;
      --num4;
    }
    else
      obj4 = objArray[num3 >> 1];
    int num5 = 1;
    while (true)
    {
      int[] numArray2 = numArray1;
      int index3 = num5++;
      int num6;
      if ((num6 = numArray2[index3]) != -1)
      {
        int index4 = num6 & (int) byte.MaxValue;
        int num7 = num4 + (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.BitLengthTable[index4];
        for (int index5 = 0; index5 < num7; ++index5)
          obj4 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206A‪‮‌⁭⁪​⁯‎⁯⁪⁬‬⁯‎‏⁬⁫⁪⁮⁯​‍‎‍⁪‎‍⁬⁫‮‮​‌⁬⁯‎‏‎‬‮(obj4.\u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮(), _param2, obj1, obj2);
        obj4 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206A‪‮‌⁭⁪​⁯‎⁯⁪⁬‬⁯‎‏⁬⁫⁪⁮⁯​‍‎‍⁪‎‍⁬⁫‮‮​‌⁬⁯‎‏‎‬‮(obj4.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(objArray[index4 >> 1]), _param2, obj1, obj2);
        num4 = num6 >> 8;
      }
      else
        break;
    }
    for (int index6 = 0; index6 < num4; ++index6)
      obj4 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206A‪‮‌⁭⁪​⁯‎⁯⁪⁬‬⁯‎‏⁬⁫⁪⁮⁯​‍‎‍⁪‎‍⁬⁫‮‮​‌⁬⁯‎‏‎‬‮(obj4.\u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮(), _param2, obj1, obj2);
    return obj4;
  }

  private static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206A‪‮‌⁭⁪​⁯‎⁯⁪⁬‬⁯‎‏⁬⁫⁪⁮⁯​‍‎‍⁪‎‍⁬⁫‮‮​‌⁬⁯‎‏‎‬‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param2,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param3)
  {
    int num1 = _param0.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
    int num2 = _param1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
    if (num1 < num2)
      return _param0;
    if (num1 - num2 > 1)
    {
      int length = _param1.magnitude.Length;
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = _param0.\u206B‫⁮​‮‮⁪⁪‍⁮​⁮⁯‌⁯⁬⁬⁫‭​‮‬‭⁬⁯​‌‎​⁮‬‮‪‏‌⁫⁬​⁭⁭‮(length - 1).\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(_param3).\u206B‫⁮​‮‮⁪⁪‍⁮​⁮⁯‌⁯⁬⁬⁫‭​‮‬‭⁬⁯​‌‎​⁮‬‮‪‏‌⁫⁬​⁭⁭‮(length + 1);
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = _param0.\u206D‬⁬​⁫​⁫‍‪⁫⁪‫‌‬‪⁮‏⁮‮⁮⁫⁬‮‫‌⁮‎⁮‍⁯⁮⁭‏⁯⁪⁯⁯‫⁯⁫‮(length + 1);
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = _param1;
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj4 = obj1.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj3).\u206D‬⁬​⁫​⁫‍‪⁫⁪‫‌‬‪⁮‏⁮‮⁮⁫⁬‮‫‌⁮‎⁮‍⁯⁮⁭‏⁯⁪⁯⁯‫⁯⁫‮(length + 1);
      _param0 = obj2.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(obj4);
      if (_param0.sign < 0)
        _param0 = _param0.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(_param2);
    }
    while (_param0.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param1) >= 0)
      _param0 = _param0.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(_param1);
    return _param0;
  }

  private static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200C⁭⁮⁯‍‎‬⁪‫​⁯‭‫‪‬‌​⁪⁪‭‪‍⁪‮⁬‭‮⁯‭⁬⁭‮⁮‫⁯‏​⁮⁭⁮‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param2,
    bool _param3)
  {
    int length1 = _param2.magnitude.Length;
    int num1 = 32 * length1;
    bool flag = _param2.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ + 2 <= num1;
    uint num2 = (uint) _param2.\u206A‭‬⁪‍⁬⁯‏‌⁭‎⁭‬‭⁪‏‫‏‌​⁪‍‭‪‬​‏⁫​⁯‎⁪‎⁬⁬⁯‍⁮‭⁪‮();
    if (_param3)
      _param0 = _param0.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(num1).\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(_param2);
    int[] numArray1 = new int[length1 + 1];
    int[] numArray2 = _param0.magnitude;
    if (numArray2.Length < length1)
    {
      int[] numArray3 = new int[length1];
      numArray2.CopyTo((Array) numArray3, length1 - numArray2.Length);
      numArray2 = numArray3;
    }
    int index1 = 0;
    if (_param1.magnitude.Length > 1 || _param1.\u206C⁯‎‮⁪⁯⁫‬‍⁮‭⁪‏‌‏‎⁯‎⁫⁭‏‏​‮​‎‬‌‫⁪‫​​⁫‏‭​⁪⁮‪‮ > 2)
    {
      int num3 = _param1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
      while (num3 > \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ExpWindowThresholds[index1])
        ++index1;
    }
    int length2 = 1 << index1;
    int[][] numArray4 = new int[length2][];
    numArray4[0] = numArray2;
    int[] numArray5 = \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u206F‬⁯‪⁬⁮⁭⁮‮‭‬‌‌‎⁪⁫‍‭‍‮‌⁬‮‏‍‪‬‮⁯‫‪‭‬⁭‏⁮⁯​‮⁬‮(numArray2);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200F⁪‮⁪‎‌‬‪‎‏⁫‪⁬⁮‎‮‌​​​‎‪‮​​‌‫⁭‮‏‮‮‬⁫⁮‭⁪‬‎⁪‮(numArray1, numArray5, _param2.magnitude, num2, flag);
    for (int index2 = 1; index2 < length2; ++index2)
    {
      numArray4[index2] = \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u206F‬⁯‪⁬⁮⁭⁮‮‭‬‌‌‎⁪⁫‍‭‍‮‌⁬‮‏‍‪‬‮⁯‫‪‭‬⁭‏⁮⁯​‮⁬‮(numArray4[index2 - 1]);
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200F⁬‮⁬⁯‭‎‎⁬‪‌⁫‎⁮⁫⁭‎⁫⁪‬⁫⁬‏‌‎​‮⁭‬‍‎‭⁬‎⁪‪⁯‮⁪‬‮(numArray1, numArray4[index2], numArray5, _param2.magnitude, num2, flag);
    }
    int[] numArray6 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200B‭‌⁫‮‏‎‪‪‌​‫⁪‍‍‪⁬‪‭‭‪⁬​⁭‮‌⁫‪⁪⁭⁫‭‏⁯‌‫‏⁮⁫‍‮(_param1.magnitude, index1);
    int num4 = numArray6[0];
    int num5 = num4 & (int) byte.MaxValue;
    int num6 = num4 >> 8;
    int[] numArray7;
    if (num5 == 1)
    {
      numArray7 = numArray5;
      --num6;
    }
    else
      numArray7 = \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u206F‬⁯‪⁬⁮⁭⁮‮‭‬‌‌‎⁪⁫‍‭‍‮‌⁬‮‏‍‪‬‮⁯‫‪‭‬⁭‏⁮⁯​‮⁬‮(numArray4[num5 >> 1]);
    int num7 = 1;
    while (true)
    {
      int[] numArray8 = numArray6;
      int index3 = num7++;
      int num8;
      if ((num8 = numArray8[index3]) != -1)
      {
        int index4 = num8 & (int) byte.MaxValue;
        int num9 = num6 + (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.BitLengthTable[index4];
        for (int index5 = 0; index5 < num9; ++index5)
          \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200F⁪‮⁪‎‌‬‪‎‏⁫‪⁬⁮‎‮‌​​​‎‪‮​​‌‫⁭‮‏‮‮‬⁫⁮‭⁪‬‎⁪‮(numArray1, numArray7, _param2.magnitude, num2, flag);
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200F⁬‮⁬⁯‭‎‎⁬‪‌⁫‎⁮⁫⁭‎⁫⁪‬⁫⁬‏‌‎​‮⁭‬‍‎‭⁬‎⁪‪⁯‮⁪‬‮(numArray1, numArray7, numArray4[index4 >> 1], _param2.magnitude, num2, flag);
        num6 = num8 >> 8;
      }
      else
        break;
    }
    for (int index6 = 0; index6 < num6; ++index6)
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200F⁪‮⁪‎‌‬‪‎‏⁫‪⁬⁮‎‮‌​​​‎‪‮​​‌‫⁭‮‏‮‮‬⁫⁮‭⁪‬‎⁪‮(numArray1, numArray7, _param2.magnitude, num2, flag);
    if (_param3)
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200E‎‬‎⁬‍‍‪‎‌⁬⁭⁮⁭‎‌‏‍‪⁬⁪‮⁪​⁬‎‭⁫‏‎⁬‫‬⁭‮​‭​⁫‪‮(numArray7, _param2.magnitude, num2);
    else if (flag && \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(0, numArray7, 0, _param2.magnitude) >= 0)
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(0, numArray7, 0, _param2.magnitude);
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, numArray7, true);
  }

  private static int[] \u200B‭‌⁫‮‏‎‪‪‌​‫⁪‍‍‪⁬‪‭‭‪⁬​⁭‮‌⁫‪⁪⁭⁫‭‏⁯‌‫‏⁮⁫‍‮(int[] _param0, int _param1)
  {
    int num1 = _param0[0];
    int num2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D‎‍​‫‪‪⁮‫‏⁫⁭⁭​‪‌⁪‍‍‮‍‎​‌‭⁯⁬⁫‪⁪‭‭⁭⁮‫‬⁭‌⁫⁭‮(num1);
    int[] numArray1 = new int[((_param0.Length - 1 << 5) + num2) / (1 + _param1) + 2];
    int num3 = 0;
    int num4 = 33 - num2;
    int num5 = num1 << num4;
    int num6 = 1;
    int num7 = 1 << _param1;
    int num8 = 0;
    int index1 = 0;
    while (true)
    {
      for (; num4 < 32; ++num4)
      {
        if (num6 < num7)
          num6 = num6 << 1 | (int) ((uint) num5 >> 31);
        else if (num5 < 0)
        {
          numArray1[num3++] = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‪⁪⁪⁮⁭⁮‎‌​‎⁭‬‭⁭‫⁭‮‪‭‪‎‏‌⁮‍⁯⁯⁭‭‪⁭‏‪⁬‭⁭‌⁯⁮‮(num6, num8);
          num6 = 1;
          num8 = 0;
        }
        else
          ++num8;
        num5 <<= 1;
      }
      if (++index1 != _param0.Length)
      {
        num5 = _param0[index1];
        num4 = 0;
      }
      else
        break;
    }
    int[] numArray2 = numArray1;
    int index2 = num3;
    int index3 = index2 + 1;
    int num9 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‪⁪⁪⁮⁭⁮‎‌​‎⁭‬‭⁭‫⁭‮‪‭‪‎‏‌⁮‍⁯⁯⁭‭‪⁭‏‪⁬‭⁭‌⁯⁮‮(num6, num8);
    numArray2[index2] = num9;
    numArray1[index3] = -1;
    return numArray1;
  }

  private static int \u202C‪⁪⁪⁮⁭⁮‎‌​‎⁭‬‭⁭‫⁭‮‪‭‪‎‏‌⁮‍⁯⁯⁭‭‪⁭‏‪⁬‭⁭‌⁯⁮‮(int _param0, int _param1)
  {
    while ((_param0 & 1) == 0)
    {
      _param0 >>= 1;
      ++_param1;
    }
    return _param0 | _param1 << 8;
  }

  private static int[] \u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮(int[] _param0, int[] _param1)
  {
    int index1 = _param0.Length - 1;
    for (int index2 = _param1.Length - 1; index2 > 0; --index2)
    {
      ulong num1 = (ulong) (uint) _param1[index2];
      ulong num2 = num1 * num1 + (ulong) (uint) _param0[index1];
      _param0[index1] = (int) num2;
      ulong num3 = num2 >> 32;
      for (int index3 = index2 - 1; index3 >= 0; --index3)
      {
        ulong num4 = num1 * (ulong) (uint) _param1[index3];
        ulong num5 = num3 + (((ulong) (uint) _param0[--index1] & (ulong) uint.MaxValue) + (ulong) ((uint) num4 << 1));
        _param0[index1] = (int) num5;
        num3 = (num5 >> 32) + (num4 >> 31);
      }
      int index4;
      ulong num6 = num3 + (ulong) (uint) _param0[index4 = index1 - 1];
      _param0[index4] = (int) num6;
      int index5;
      if ((index5 = index4 - 1) >= 0)
        _param0[index5] = (int) (num6 >> 32);
      index1 = index5 + index2;
    }
    ulong num7 = (ulong) (uint) _param1[0];
    ulong num8 = num7 * num7 + (ulong) (uint) _param0[index1];
    _param0[index1] = (int) num8;
    int index6;
    if ((index6 = index1 - 1) >= 0)
      _param0[index6] += (int) (num8 >> 32);
    return _param0;
  }

  private static int[] \u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(
    int[] _param0,
    int[] _param1,
    int[] _param2)
  {
    int length = _param2.Length;
    if (length < 1)
      return _param0;
    int index1 = _param0.Length - _param1.Length;
    do
    {
      long num1 = (long) _param2[--length] & (long) uint.MaxValue;
      long num2 = 0;
      if (num1 != 0L)
      {
        for (int index2 = _param1.Length - 1; index2 >= 0; --index2)
        {
          long num3 = num2 + (num1 * ((long) _param1[index2] & (long) uint.MaxValue) + ((long) _param0[index1 + index2] & (long) uint.MaxValue));
          _param0[index1 + index2] = (int) num3;
          num2 = (long) ((ulong) num3 >> 32);
        }
      }
      --index1;
      if (index1 >= 0)
        _param0[index1] = (int) num2;
    }
    while (length > 0);
    return _param0;
  }

  private int \u206A‭‬⁪‍⁬⁯‏‌⁭‎⁭‬‭⁪‏‫‏‌​⁪‍‭‪‬​‏⁫​⁯‎⁪‎⁬⁬⁯‍⁮‭⁪‮() => this.mQuote != 0 ? this.mQuote : (this.mQuote = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202E​⁮‌⁪‭‮⁬‫‫‎‭‪‏‎‫‭‏⁮‫⁫⁫‭⁪⁬‬⁫‬‏⁯​‏⁪⁭‌‮⁭‎‍‍‮(-this.magnitude[this.magnitude.Length - 1]));

  private static void \u200E‎‬‎⁬‍‍‪‎‌⁬⁭⁮⁭‎‌‏‍‪⁬⁪‮⁪​⁬‎‭⁫‏‎⁬‫‬⁭‮​‭​⁫‪‮(
    int[] _param0,
    int[] _param1,
    uint _param2)
  {
    int length = _param1.Length;
    for (int index1 = length - 1; index1 >= 0; --index1)
    {
      uint num1 = (uint) _param0[length - 1];
      ulong num2 = (ulong) (num1 * _param2);
      ulong num3 = num2 * (ulong) (uint) _param1[length - 1] + (ulong) num1 >> 32;
      for (int index2 = length - 2; index2 >= 0; --index2)
      {
        ulong num4 = num3 + (num2 * (ulong) (uint) _param1[index2] + (ulong) (uint) _param0[index2]);
        _param0[index2 + 1] = (int) num4;
        num3 = num4 >> 32;
      }
      _param0[0] = (int) num3;
    }
    if (\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(0, _param0, 0, _param1) < 0)
      return;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(0, _param0, 0, _param1);
  }

  private static void \u200F⁬‮⁬⁯‭‎‎⁬‪‌⁫‎⁮⁫⁭‎⁫⁪‬⁫⁬‏‌‎​‮⁭‬‍‎‭⁬‎⁪‪⁯‮⁪‬‮(
    int[] _param0,
    int[] _param1,
    int[] _param2,
    int[] _param3,
    uint _param4,
    bool _param5)
  {
    int length = _param3.Length;
    if (length == 1)
    {
      _param1[0] = (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‭‬⁮⁫⁮‮⁪⁯‪‭‌‎⁫‍‮‫‫​‭⁮​⁬‌⁭⁯‍⁬⁪⁯‪⁭‫‫⁮‍‎‭⁮⁯‮((uint) _param1[0], (uint) _param2[0], (uint) _param3[0], _param4);
    }
    else
    {
      uint num1 = (uint) _param2[length - 1];
      ulong num2 = (ulong) (uint) _param1[length - 1];
      ulong num3 = num2 * (ulong) num1;
      ulong num4 = (ulong) ((uint) num3 * _param4);
      ulong num5 = num4 * (ulong) (uint) _param3[length - 1];
      ulong num6 = (num3 + (ulong) (uint) num5 >> 32) + (num5 >> 32);
      for (int index = length - 2; index >= 0; --index)
      {
        ulong num7 = num2 * (ulong) (uint) _param2[index];
        ulong num8 = num4 * (ulong) (uint) _param3[index];
        ulong num9 = num6 + ((num7 & (ulong) uint.MaxValue) + (ulong) (uint) num8);
        _param0[index + 2] = (int) num9;
        num6 = (num9 >> 32) + (num7 >> 32) + (num8 >> 32);
      }
      _param0[1] = (int) num6;
      int num10 = (int) (num6 >> 32);
      for (int index1 = length - 2; index1 >= 0; --index1)
      {
        uint num11 = (uint) _param0[length];
        ulong num12 = (ulong) (uint) _param1[index1];
        ulong num13 = num12 * (ulong) num1;
        ulong num14 = (num13 & (ulong) uint.MaxValue) + (ulong) num11;
        ulong num15 = (ulong) ((uint) num14 * _param4);
        ulong num16 = num15 * (ulong) (uint) _param3[length - 1];
        ulong num17 = (num14 + (ulong) (uint) num16 >> 32) + (num13 >> 32) + (num16 >> 32);
        for (int index2 = length - 2; index2 >= 0; --index2)
        {
          ulong num18 = num12 * (ulong) (uint) _param2[index2];
          ulong num19 = num15 * (ulong) (uint) _param3[index2];
          ulong num20 = num17 + ((num18 & (ulong) uint.MaxValue) + (ulong) (uint) num19 + (ulong) (uint) _param0[index2 + 1]);
          _param0[index2 + 2] = (int) num20;
          num17 = (num20 >> 32) + (num18 >> 32) + (num19 >> 32);
        }
        ulong num21 = num17 + (ulong) (uint) num10;
        _param0[1] = (int) num21;
        num10 = (int) (num21 >> 32);
      }
      _param0[0] = num10;
      if (!_param5 && \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(0, _param0, 0, _param3) >= 0)
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(0, _param0, 0, _param3);
      Array.Copy((Array) _param0, 1, (Array) _param1, 0, length);
    }
  }

  private static void \u200F⁪‮⁪‎‌‬‪‎‏⁫‪⁬⁮‎‮‌​​​‎‪‮​​‌‫⁭‮‏‮‮‬⁫⁮‭⁪‬‎⁪‮(
    int[] _param0,
    int[] _param1,
    int[] _param2,
    uint _param3,
    bool _param4)
  {
    int length = _param2.Length;
    if (length == 1)
    {
      uint num = (uint) _param1[0];
      _param1[0] = (int) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‭‬⁮⁫⁮‮⁪⁯‪‭‌‎⁫‍‮‫‫​‭⁮​⁬‌⁭⁯‍⁬⁪⁯‪⁭‫‫⁮‍‎‭⁮⁯‮(num, num, (uint) _param2[0], _param3);
    }
    else
    {
      ulong num1 = (ulong) (uint) _param1[length - 1];
      ulong num2 = num1 * num1;
      ulong num3 = (ulong) ((uint) num2 * _param3);
      ulong num4 = num3 * (ulong) (uint) _param2[length - 1];
      ulong num5 = (num2 + (ulong) (uint) num4 >> 32) + (num4 >> 32);
      for (int index = length - 2; index >= 0; --index)
      {
        ulong num6 = num1 * (ulong) (uint) _param1[index];
        ulong num7 = num3 * (ulong) (uint) _param2[index];
        ulong num8 = num5 + ((num7 & (ulong) uint.MaxValue) + (ulong) ((uint) num6 << 1));
        _param0[index + 2] = (int) num8;
        num5 = (num8 >> 32) + (num6 >> 31) + (num7 >> 32);
      }
      _param0[1] = (int) num5;
      int num9 = (int) (num5 >> 32);
      for (int index1 = length - 2; index1 >= 0; --index1)
      {
        uint num10 = (uint) _param0[length];
        ulong num11 = (ulong) (num10 * _param3);
        ulong num12 = num11 * (ulong) (uint) _param2[length - 1] + (ulong) num10 >> 32;
        for (int index2 = length - 2; index2 > index1; --index2)
        {
          ulong num13 = num12 + (num11 * (ulong) (uint) _param2[index2] + (ulong) (uint) _param0[index2 + 1]);
          _param0[index2 + 2] = (int) num13;
          num12 = num13 >> 32;
        }
        ulong num14 = (ulong) (uint) _param1[index1];
        ulong num15 = num14 * num14;
        ulong num16 = num11 * (ulong) (uint) _param2[index1];
        ulong num17 = num12 + ((num15 & (ulong) uint.MaxValue) + (ulong) (uint) num16 + (ulong) (uint) _param0[index1 + 1]);
        _param0[index1 + 2] = (int) num17;
        ulong num18 = (num17 >> 32) + (num15 >> 32) + (num16 >> 32);
        for (int index3 = index1 - 1; index3 >= 0; --index3)
        {
          ulong num19 = num14 * (ulong) (uint) _param1[index3];
          ulong num20 = num11 * (ulong) (uint) _param2[index3];
          ulong num21 = num18 + ((num20 & (ulong) uint.MaxValue) + (ulong) ((uint) num19 << 1) + (ulong) (uint) _param0[index3 + 1]);
          _param0[index3 + 2] = (int) num21;
          num18 = (num21 >> 32) + (num19 >> 31) + (num20 >> 32);
        }
        ulong num22 = num18 + (ulong) (uint) num9;
        _param0[1] = (int) num22;
        num9 = (int) (num22 >> 32);
      }
      _param0[0] = num9;
      if (!_param4 && \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(0, _param0, 0, _param2) >= 0)
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(0, _param0, 0, _param2);
      Array.Copy((Array) _param0, 1, (Array) _param1, 0, length);
    }
  }

  private static uint \u202B‭‬⁮⁫⁮‮⁪⁯‪‭‌‎⁫‍‮‫‫​‭⁮​⁬‌⁭⁯‍⁬⁪⁯‪⁭‫‫⁮‍‎‭⁮⁯‮(
    uint _param0,
    uint _param1,
    uint _param2,
    uint _param3)
  {
    ulong num1 = (ulong) _param0 * (ulong) _param1;
    uint num2 = (uint) num1 * _param3;
    ulong num3 = (ulong) _param2;
    ulong num4 = num3 * (ulong) num2;
    ulong num5 = (num1 + (ulong) (uint) num4 >> 32) + (num4 >> 32);
    if (num5 > num3)
      num5 -= num3;
    return (uint) num5;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (_param1 == this)
      return this.\u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮();
    if ((this.sign & _param1.sign) == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    if (_param1.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮())
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = this.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(_param1.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1);
      return _param1.sign <= 0 ? obj.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮() : obj;
    }
    if (this.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮())
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = _param1.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1);
      return this.sign <= 0 ? obj.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮() : obj;
    }
    int[] numArray = new int[this.magnitude.Length + _param1.magnitude.Length];
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(numArray, this.magnitude, _param1.magnitude);
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign ^ _param1.sign ^ 1, numArray, true);
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮()
  {
    if (this.sign == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    if (this.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮())
      return this.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1);
    int length = this.magnitude.Length << 1;
    if ((uint) this.magnitude[0] >> 16 == 0U)
      --length;
    int[] numArray = new int[length];
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮(numArray, this.magnitude);
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, numArray, false);
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮() => this.sign == 0 ? this : new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(-this.sign, this.magnitude, false);

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200D​‪⁮‭‭⁫⁬‭⁫‬​⁬⁯‮⁮‭‫‏⁯‮⁪⁪‪​⁬‫⁭⁮⁪⁯‭‬⁬‌‬⁭⁬‮‫‮()
  {
    if (this.sign < 0)
      throw new ArithmeticException("Cannot be called on value < 0");
    if (this.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two) < 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = this.\u202C‌‪‫‭‮‫‌‭‮‌⁯⁬⁬⁬‏‎‍⁭‬‪‎‮⁯‎⁮‮⁮‌‍‫⁮‌⁭⁭‬⁮‪‫‫‮().\u206A​⁭‪⁯‪⁭‍‪‮‭‮⁪‪⁭⁫​‎⁮‏⁪‭‫‬‏‪⁫⁬‪⁬‪‭⁭‭‎⁮‫‍⁭⁪‮(0);
    while (!obj.\u200C‫​‬‮⁪‭‏‍⁪⁮⁮‫‭‭‮‪‌⁭⁭‎⁯‌‍‮‮‮⁬⁪‮‪‬‮⁪‮⁯⁫‮⁮‌‮(100, (Random) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.RandomSource, false))
      obj = obj.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Two);
    return obj;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮() => this.\u202C‌‪‫‭‮‫‌‭‮‌⁯⁬⁬⁬‏‎‍⁭‬‪‎‮⁯‎⁮‮⁮‌‍‫⁮‌⁭⁭‬⁮‪‫‫‮().\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮();

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206A‮‮⁫⁫⁫⁭‪⁫⁫‭‬⁬‭‬‎⁫‮‮‎⁫‍⁫‪‮‭‎⁫‬‪‍⁯⁮⁯⁯⁫‪​⁪⁪‮(
    int _param1)
  {
    if (_param1 <= 0)
    {
      if (_param1 < 0)
        throw new ArithmeticException("Negative exponent");
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One;
    }
    if (this.sign == 0)
      return this;
    if (this.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮())
    {
      long num = (long) _param1 * (long) (this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1);
      return num <= (long) int.MaxValue ? \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮((int) num) : throw new ArithmeticException("Result too large");
    }
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = this;
    while (true)
    {
      if ((_param1 & 1) == 1)
        obj1 = obj1.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj2);
      _param1 >>= 1;
      if (_param1 != 0)
        obj2 = obj2.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj2);
      else
        break;
    }
    return obj1;
  }

  public static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200C​‬‌‫⁫‪‌​‪⁭‏⁯⁯‎⁯‎‎​​​⁮⁫‌⁭‬‪⁭⁬⁪⁬​⁮⁭‍‭⁯‭‮⁫‮(
    int _param0,
    Random _param1)
  {
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(_param0, 100, _param1);
  }

  private int \u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(int _param1)
  {
    long num1 = 0;
    for (int index = 0; index < this.magnitude.Length; ++index)
    {
      long num2 = (long) (uint) this.magnitude[index];
      num1 = (num1 << 32 | num2) % (long) _param1;
    }
    return (int) num1;
  }

  private static int[] \u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(int[] _param0, int[] _param1)
  {
    int index1 = 0;
    while (index1 < _param0.Length && _param0[index1] == 0)
      ++index1;
    int sourceIndex = 0;
    while (sourceIndex < _param1.Length && _param1[sourceIndex] == 0)
      ++sourceIndex;
    int num1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(index1, _param0, sourceIndex, _param1);
    if (num1 > 0)
    {
      int num2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206C⁭‍‬⁪⁪‭‌⁭‫‍‪⁪‭⁭​‎⁫⁯⁫‪⁫⁭‮‎‫‭‫‬⁫‏⁭‍‎‪‎⁮⁭‪‮(1, sourceIndex, _param1);
      int num3 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206C⁭‍‬⁪⁪‭‌⁭‫‍‪⁪‭⁭​‎⁫⁯⁫‪⁫⁭‮‎‫‭‫‬⁫‏⁭‍‎‪‎⁮⁭‪‮(1, index1, _param0);
      int num4 = num3 - num2;
      int index2 = 0;
      int num5 = num2;
      int[] destinationArray;
      if (num4 > 0)
      {
        destinationArray = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(_param1, num4);
        num5 += num4;
      }
      else
      {
        int length = _param1.Length - sourceIndex;
        destinationArray = new int[length];
        Array.Copy((Array) _param1, sourceIndex, (Array) destinationArray, 0, length);
      }
label_10:
      if (num5 < num3 || \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(index1, _param0, index2, destinationArray) >= 0)
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(index1, _param0, index2, destinationArray);
        while (_param0[index1] == 0)
        {
          if (++index1 == _param0.Length)
            return _param0;
        }
        num3 = 32 * (_param0.Length - index1 - 1) + \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D‎‍​‫‪‪⁮‫‏⁫⁭⁭​‪‌⁪‍‍‮‍‎​‌‭⁯⁬⁫‪⁪‭‭⁭⁮‫‬⁭‌⁫⁭‮(_param0[index1]);
        if (num3 <= num2)
        {
          if (num3 < num2)
            return _param0;
          num1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(index1, _param0, sourceIndex, _param1);
          if (num1 <= 0)
            goto label_26;
        }
      }
      int num6 = num5 - num3;
      if (num6 == 1 && (uint) destinationArray[index2] >> 1 > (uint) _param0[index1])
        ++num6;
      if (num6 < 2)
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F⁬‍⁬‮‏⁫⁪⁮‎⁪⁪‮‭​‍‬​⁭‫‫⁯​‎⁫⁬‫‬⁪‎⁯⁭‭⁮‬⁫‫‬⁮‫‮(index2, destinationArray);
        --num5;
      }
      else
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F⁫​‎‌⁮⁬⁮⁫‏‭‎⁮⁪⁮⁮⁮‮⁫⁬‎⁭⁭⁮⁬⁭⁫⁮⁪‫‫‌⁭‍‍⁬⁯‍‏‫‮(index2, destinationArray, num6);
        num5 -= num6;
      }
      while (destinationArray[index2] == 0)
        ++index2;
      goto label_10;
    }
label_26:
    if (num1 == 0)
      Array.Clear((Array) _param0, index1, _param0.Length - index1);
    return _param0;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (_param1.sign == 0)
      throw new ArithmeticException("Division by zero error");
    if (this.sign == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    if (_param1.magnitude.Length == 1)
    {
      int num1 = _param1.magnitude[0];
      if (num1 > 0)
      {
        if (num1 == 1)
          return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
        int num2 = this.\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮(num1);
        if (num2 == 0)
          return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
        return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, new int[1]
        {
          num2
        }, false);
      }
    }
    return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(0, this.magnitude, 0, _param1.magnitude) < 0 ? this : new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, !_param1.\u200B​‮‪⁭​‎⁭‌‫⁫‪‎⁯‏‎‬⁯⁮‍⁭‬‮‏⁭‏‫⁫‬⁭‎⁪⁫⁯‫‬​⁯⁬⁯‮() ? \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202D⁫‪​‫⁪⁫‌‪⁯‮⁯⁯⁫‏‍‭⁪⁬‪‭‭‍⁮‎‪⁮⁪⁪⁯‮‌​⁯‬⁫‪⁪‪⁭‮((int[]) this.magnitude.Clone(), _param1.magnitude) : this.\u206B‫⁪‭​⁯‍‪‍⁯‪‍⁯⁪‎​‏‮⁬⁬‍‌⁬‫⁬‫​‏‪⁮‪⁮⁪⁫‭⁪‌⁫​⁯‮(_param1.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮().\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1), true);
  }

  private int[] \u206B‫⁪‭​⁯‍‪‍⁯‪‍⁯⁪‎​‏‮⁬⁬‍‌⁬‫⁬‫​‏‪⁮‪⁮⁪⁫‭⁪‌⁫​⁯‮(int _param1)
  {
    if (_param1 < 1)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroMagnitude;
    int length = Math.Min((_param1 + 32 - 1) / 32, this.magnitude.Length);
    int[] destinationArray = new int[length];
    Array.Copy((Array) this.magnitude, this.magnitude.Length - length, (Array) destinationArray, 0, length);
    int num = (length << 5) - _param1;
    if (num > 0)
      destinationArray[0] &= (int) (uint.MaxValue >> num);
    return destinationArray;
  }

  private \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206B‫⁮​‮‮⁪⁪‍⁮​⁮⁯‌⁯⁬⁬⁫‭​‮‬‭⁬⁯​‌‎​⁮‬‮‪‏‌⁫⁬​⁭⁭‮(
    int _param1)
  {
    int length = this.magnitude.Length;
    if (_param1 >= length)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    int[] destinationArray = new int[length - _param1];
    Array.Copy((Array) this.magnitude, 0, (Array) destinationArray, 0, length - _param1);
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, destinationArray, false);
  }

  private \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206D‬⁬​⁫​⁫‍‪⁫⁪‫‌‬‪⁮‏⁮‮⁮⁫⁬‮‫‌⁮‎⁮‍⁯⁮⁭‏⁯⁪⁯⁯‫⁯⁫‮(
    int _param1)
  {
    int length = this.magnitude.Length;
    if (_param1 >= length)
      return this;
    int[] destinationArray = new int[_param1];
    Array.Copy((Array) this.magnitude, length - _param1, (Array) destinationArray, 0, _param1);
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, destinationArray, false);
  }

  private static int[] \u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(int[] _param0, int _param1)
  {
    int num1 = (int) ((uint) _param1 >> 5);
    int num2 = _param1 & 31;
    int length = _param0.Length;
    int[] numArray;
    if (num2 == 0)
    {
      numArray = new int[length + num1];
      _param0.CopyTo((Array) numArray, 0);
    }
    else
    {
      int index1 = 0;
      int num3 = 32 - num2;
      int num4 = (int) ((uint) _param0[0] >> num3);
      if (num4 != 0)
      {
        numArray = new int[length + num1 + 1];
        numArray[index1++] = num4;
      }
      else
        numArray = new int[length + num1];
      int num5 = _param0[0];
      for (int index2 = 0; index2 < length - 1; ++index2)
      {
        int num6 = _param0[index2 + 1];
        numArray[index1++] = num5 << num2 | (int) ((uint) num6 >> num3);
        num5 = num6;
      }
      numArray[index1] = _param0[length - 1] << num2;
    }
    return numArray;
  }

  private static int \u202E‎‌‌‌‏‍‪‪‮‏⁭‪​⁭​‬‎⁯‌​⁮⁭⁮⁭‪‏‬‏‎‪‭‬‬‎‫‮‎‎‮‮(int[] _param0, int _param1)
  {
    int length = _param0.Length;
    while (--length >= 0)
    {
      uint num = (uint) _param0[length];
      _param0[length] = (int) num << 1 | _param1;
      _param1 = (int) (num >> 31);
    }
    return _param1;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(
    int _param1)
  {
    if (this.sign == 0 || this.magnitude.Length == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    if (_param1 == 0)
      return this;
    if (_param1 < 0)
      return this.\u200D⁪‏‏⁬‭⁭⁯⁬‭​⁬‫‭‫‮⁬‭‫‮‫‍‫‮‏‏⁬⁭⁬‭⁫‍​⁮⁬‮​‫⁯‎‮(-_param1);
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(this.magnitude, _param1), true);
    if (this.nBits != -1)
      obj.nBits = this.sign > 0 ? this.nBits : this.nBits + _param1;
    if (this.nBitLength != -1)
      obj.nBitLength = this.nBitLength + _param1;
    return obj;
  }

  private static void \u206F⁫​‎‌⁮⁬⁮⁫‏‭‎⁮⁪⁮⁮⁮‮⁫⁬‎⁭⁭⁮⁬⁭⁫⁮⁪‫‫‌⁭‍‍⁬⁯‍‏‫‮(
    int _param0,
    int[] _param1,
    int _param2)
  {
    int index1 = (int) ((uint) _param2 >> 5) + _param0;
    int num1 = _param2 & 31;
    int index2 = _param1.Length - 1;
    if (index1 != _param0)
    {
      int num2 = index1 - _param0;
      for (int index3 = index2; index3 >= index1; --index3)
        _param1[index3] = _param1[index3 - num2];
      for (int index4 = index1 - 1; index4 >= _param0; --index4)
        _param1[index4] = 0;
    }
    if (num1 == 0)
      return;
    int num3 = 32 - num1;
    int num4 = _param1[index2];
    for (int index5 = index2; index5 > index1; --index5)
    {
      int num5 = _param1[index5 - 1];
      _param1[index5] = (int) ((uint) num4 >> num1) | num5 << num3;
      num4 = num5;
    }
    _param1[index1] = (int) ((uint) _param1[index1] >> num1);
  }

  private static void \u206F⁬‍⁬‮‏⁫⁪⁮‎⁪⁪‮‭​‍‬​⁭‫‫⁯​‎⁫⁬‫‬⁪‎⁯⁭‭⁮‬⁫‫‬⁮‫‮(int _param0, int[] _param1)
  {
    int length = _param1.Length;
    int num1 = _param1[length - 1];
    while (--length > _param0)
    {
      int num2 = _param1[length - 1];
      _param1[length] = (int) ((uint) num1 >> 1) | num2 << 31;
      num1 = num2;
    }
    _param1[_param0] = (int) ((uint) _param1[_param0] >> 1);
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200D⁪‏‏⁬‭⁭⁯⁬‭​⁬‫‭‫‮⁬‭‫‮‫‍‫‮‏‏⁬⁭⁬‭⁫‍​⁮⁬‮​‫⁯‎‮(
    int _param1)
  {
    if (_param1 == 0)
      return this;
    if (_param1 < 0)
      return this.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(-_param1);
    if (_param1 >= this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮)
      return this.sign >= 0 ? \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero : \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮();
    int length = this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - _param1 + 31 >> 5;
    int[] destinationArray = new int[length];
    int num1 = _param1 >> 5;
    int num2 = _param1 & 31;
    if (num2 == 0)
    {
      Array.Copy((Array) this.magnitude, 0, (Array) destinationArray, 0, destinationArray.Length);
    }
    else
    {
      int num3 = 32 - num2;
      int index1 = this.magnitude.Length - 1 - num1;
      for (int index2 = length - 1; index2 >= 0; --index2)
      {
        destinationArray[index2] = (int) ((uint) this.magnitude[index1--] >> num2);
        if (index1 >= 0)
          destinationArray[index2] |= this.magnitude[index1] << num3;
      }
    }
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, destinationArray, false);
  }

  public int \u202C⁪⁮‬⁭‌‍‍⁫‍‌⁪⁮⁫‭‏⁫‎‭​‪⁪‏‍‎‮⁫‫⁬‭⁫⁬‭⁪⁫‮‮‌⁭⁭‮ => this.sign;

  private static int[] \u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(
    int _param0,
    int[] _param1,
    int _param2,
    int[] _param3)
  {
    int length1 = _param1.Length;
    int length2 = _param3.Length;
    int num1 = 0;
    do
    {
      long num2 = ((long) _param1[--length1] & (long) uint.MaxValue) - ((long) _param3[--length2] & (long) uint.MaxValue) + (long) num1;
      _param1[length1] = (int) num2;
      num1 = (int) (num2 >> 63);
    }
    while (length2 > _param2);
    if (num1 != 0)
    {
      while (--_param1[--length1] == -1)
        ;
    }
    return _param1;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (_param1.sign == 0)
      return this;
    if (this.sign == 0)
      return _param1.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮();
    if (this.sign != _param1.sign)
      return this.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(_param1.\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮());
    int num = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C‎‎‮⁮⁯‌⁯⁪⁭‫⁭⁯‬⁫‌‬‫‏‫‭‌‎‍‪‭⁮‪‎‏‌⁮⁪⁫‬⁭⁬⁮‌⁭‮(0, this.magnitude, 0, _param1.magnitude);
    if (num == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2;
    if (num < 0)
    {
      obj1 = _param1;
      obj2 = this;
    }
    else
    {
      obj1 = this;
      obj2 = _param1;
    }
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign * num, \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202A‏⁮⁯⁫‬⁫⁯‮⁬⁯‮‌‏⁪‍‍‬‏⁮‍‫⁬‫‌⁭⁬‍‭‎‬‍⁯‪⁪⁭‍‮‌‭‮(obj1.magnitude, obj2.magnitude), true);
  }

  private static int[] \u202A‏⁮⁯⁫‬⁫⁯‮⁬⁯‮‌‏⁪‍‍‬‏⁮‍‫⁬‫‌⁭⁬‍‭‎‬‍⁯‪⁪⁭‍‮‌‭‮(int[] _param0, int[] _param1) => \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(0, (int[]) _param0.Clone(), 0, _param1);

  public byte[] \u202E‫‪⁭‍​‌‬⁯⁬‏‪⁪⁯‭⁭​‍⁮‎‬‌‏⁭⁯‌⁬‮​‭‭⁮‫‫⁮‍‭⁮⁬⁬‮() => this.\u202E‫‪⁭‍​‌‬⁯⁬‏‪⁪⁯‭⁭​‍⁮‎‬‌‏⁭⁯‌⁬‮​‭‭⁮‫‫⁮‍‭⁮⁬⁬‮(false);

  public byte[] \u206D‬​⁪⁭​​⁬‍⁪⁫⁬‫‫⁪‌‬‬⁯‮‌‏‮⁬⁮‎‎‬‭‮‫⁪‪⁯‎⁬‏⁯⁯‮‮() => this.\u202E‫‪⁭‍​‌‬⁯⁬‏‪⁪⁯‭⁭​‍⁮‎‬‌‏⁭⁯‌⁬‮​‭‭⁮‫‫⁮‍‭⁮⁬⁬‮(true);

  private byte[] \u202E‫‪⁭‍​‌‬⁯⁬‏‪⁪⁯‭⁭​‍⁮‎‬‌‏⁭⁯‌⁬‮​‭‭⁮‫‫⁮‍‭⁮⁬⁬‮(bool _param1)
  {
    if (this.sign == 0)
      return !_param1 ? new byte[1] : \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.ZeroEncoding;
    byte[] numArray = new byte[\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206E⁮‎⁪‏‎‬‪⁮‮⁮‪‌‍‬⁭‭‪⁪‭‌‮‍‌‮‌‬‎‪‪‬‏‎⁬‍‌⁭‎⁪‪‮(!_param1 || this.sign <= 0 ? this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ + 1 : this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮)];
    int length = this.magnitude.Length;
    int num1 = numArray.Length;
    int num2;
    if (this.sign > 0)
    {
      while (length > 1)
      {
        uint num3 = (uint) this.magnitude[--length];
        int num4;
        numArray[num4 = num1 - 1] = (byte) num3;
        int num5;
        numArray[num5 = num4 - 1] = (byte) (num3 >> 8);
        int num6;
        numArray[num6 = num5 - 1] = (byte) (num3 >> 16);
        numArray[num1 = num6 - 1] = (byte) (num3 >> 24);
      }
      uint num7;
      for (num7 = (uint) this.magnitude[0]; num7 > (uint) byte.MaxValue; num7 >>= 8)
        numArray[--num1] = (byte) num7;
      numArray[num2 = num1 - 1] = (byte) num7;
    }
    else
    {
      bool flag = true;
      while (length > 1)
      {
        uint num8 = (uint) ~this.magnitude[--length];
        if (flag)
          flag = ++num8 == 0U;
        int num9;
        numArray[num9 = num1 - 1] = (byte) num8;
        int num10;
        numArray[num10 = num9 - 1] = (byte) (num8 >> 8);
        int num11;
        numArray[num11 = num10 - 1] = (byte) (num8 >> 16);
        numArray[num1 = num11 - 1] = (byte) (num8 >> 24);
      }
      uint num12 = (uint) this.magnitude[0];
      if (flag)
        --num12;
      for (; num12 > (uint) byte.MaxValue; num12 >>= 8)
        numArray[--num1] = (byte) ~num12;
      int num13;
      numArray[num13 = num1 - 1] = (byte) ~num12;
      if (num13 > 0)
        numArray[num2 = num13 - 1] = byte.MaxValue;
    }
    return numArray;
  }

  string object.\u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮() => this.\u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮(10);

  public string \u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮(int _param1)
  {
    if (_param1 <= 8)
    {
      if (_param1 == 2 || _param1 == 8)
        goto label_4;
    }
    else if (_param1 == 10 || _param1 == 16)
      goto label_4;
    throw new FormatException("Only bases 2, 8, 10, 16 are allowed");
label_4:
    if (this.magnitude == null)
      return "null";
    if (this.sign == 0)
      return "0";
    int index1 = 0;
    while (index1 < this.magnitude.Length && this.magnitude[index1] == 0)
      ++index1;
    if (index1 == this.magnitude.Length)
      return "0";
    StringBuilder stringBuilder = new StringBuilder();
    if (this.sign == -1)
      stringBuilder.Append('-');
    switch (_param1)
    {
      case 2:
        int index2 = index1;
        stringBuilder.Append(Convert.ToString(this.magnitude[index2], 2));
        while (++index2 < this.magnitude.Length)
          \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F‌‫⁬⁬‮‬‏‌⁫‫⁮⁫⁭‏⁫‏‬⁫‏⁮⁪​⁫‭‪‍⁮‎​‬⁬⁪‏⁫⁯‭​⁯‪‮(stringBuilder, Convert.ToString(this.magnitude[index2], 2), 32);
        break;
      case 8:
        int num1 = 1073741823;
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮();
        int num2 = obj1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
        IList list1 = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();
        for (; num2 > 30; num2 -= 30)
        {
          list1.Add((object) Convert.ToString(obj1.\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮ & num1, 8));
          obj1 = obj1.\u200D⁪‏‏⁬‭⁭⁯⁬‭​⁬‫‭‫‮⁬‭‫‮‫‍‫‮‏‏⁬⁭⁬‭⁫‍​⁮⁬‮​‫⁯‎‮(30);
        }
        stringBuilder.Append(Convert.ToString(obj1.\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮, 8));
        for (int index3 = list1.Count - 1; index3 >= 0; --index3)
          \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F‌‫⁬⁬‮‬‏‌⁫‫⁮⁫⁭‏⁫‏‬⁫‏⁮⁪​⁫‭‪‍⁮‎​‬⁬⁪‏⁫⁯‭​⁯‪‮(stringBuilder, (string) list1[index3], 10);
        break;
      case 10:
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = this.\u202E‏⁭‏‏​⁮⁭⁮‌‌‎⁪⁭​‫‏⁮‍‫⁫‍‫⁬‬⁫‪⁭⁪‎⁮‎⁪‪‬‌‍‭⁭⁮‮();
        if (obj2.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ < 64)
        {
          stringBuilder.Append(Convert.ToString(obj2.\u202A‍‭‎⁫⁮‏⁮‫‭⁬‏‌‬‌​‮‬‍‏‎‬‏‎⁪‌‭‎‭‎​​⁬⁯‪‫⁯‏⁯‬‮, _param1));
          break;
        }
        IList list2 = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();
        for (\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮((long) _param1); obj3.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(obj2) <= 0; obj3 = obj3.\u200E‎‪⁬‬‏‌⁪⁭‌⁯‮‎‍‬⁬‮⁭‭‏‫‫⁪⁫‪‍‭‫⁪‎‍⁫‫‎‍‏⁯‫‫‮‮())
          list2.Add((object) obj3);
        int count = list2.Count;
        stringBuilder.EnsureCapacity(stringBuilder.Length + (1 << count));
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮(stringBuilder, _param1, list2, count, obj2);
        break;
      case 16:
        int index4 = index1;
        stringBuilder.Append(Convert.ToString(this.magnitude[index4], 16));
        while (++index4 < this.magnitude.Length)
          \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F‌‫⁬⁬‮‬‏‌⁫‫⁮⁫⁭‏⁫‏‬⁫‏⁮⁪​⁫‭‪‍⁮‎​‬⁬⁪‏⁫⁯‭​⁯‪‮(stringBuilder, Convert.ToString(this.magnitude[index4], 16), 8);
        break;
    }
    return stringBuilder.ToString();
  }

  private static void \u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮(
    StringBuilder _param0,
    int _param1,
    IList _param2,
    int _param3,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param4)
  {
    if (_param4.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ < 64)
    {
      string str = Convert.ToString(_param4.\u202A‍‭‎⁫⁮‏⁮‫‭⁬‏‌‬‌​‮‬‍‏‎‬‏‎⁪‌‭‎‭‎​​⁬⁯‪‫⁯‏⁯‬‮, _param1);
      if (_param0.Length > 1 || _param0.Length == 1 && _param0[0] != '-')
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206F‌‫⁬⁬‮‬‏‌⁫‫⁮⁫⁭‏⁫‏‬⁫‏⁮⁪​⁫‭‪‍⁮‎​‬⁬⁪‏⁫⁯‭​⁯‪‮(_param0, str, 1 << _param3);
      }
      else
      {
        if (_param4.\u202C⁪⁮‬⁭‌‍‍⁫‍‌⁪⁮⁫‭‏⁫‎‭​‪⁪‏‍‎‮⁫‫⁬‭⁫⁬‭⁪⁫‮‮‌⁭⁭‮ == 0)
          return;
        _param0.Append(str);
      }
    }
    else
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮[] objArray = _param4.\u206E‎‪⁫⁯‌⁮⁫‎‭⁮‎‏⁭⁪⁬⁭‫⁭‫⁫‍⁪⁯‫‪⁬‮⁫‪⁭⁯⁭‎‮‫‍​‮⁫‮((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) _param2[--_param3]);
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮(_param0, _param1, _param2, _param3, objArray[0]);
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮(_param0, _param1, _param2, _param3, objArray[1]);
    }
  }

  private static void \u206F‌‫⁬⁬‮‬‏‌⁫‫⁮⁫⁭‏⁫‏‬⁫‏⁮⁪​⁫‭‪‍⁮‎​‬⁬⁪‏⁫⁯‭​⁯‪‮(
    StringBuilder _param0,
    string _param1,
    int _param2)
  {
    for (int length = _param1.Length; length < _param2; ++length)
      _param0.Append('0');
    _param0.Append(_param1);
  }

  private static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200D⁫‫‭‏‌⁫‌‪⁫⁪‎‏⁬‭‎⁫‪‭⁭‌⁭‭⁮⁯‎​⁮⁮‬​⁪‍⁫‪‏‬⁯⁪⁫‮(
    ulong _param0)
  {
    int num1 = (int) (_param0 >> 32);
    int num2 = (int) _param0;
    if (num1 != 0)
      return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, new int[2]
      {
        num1,
        num2
      }, false);
    if (num2 == 0)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, new int[1]
    {
      num2
    }, false);
    if ((num2 & -num2) == num2)
      obj.nBits = 1;
    return obj;
  }

  private static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202A⁫⁬⁭‬‎‎​⁮⁮⁪​⁯‪⁬⁪‭‎‏‏‌⁮‮‏⁯⁬​⁯‭⁮⁬‬‪⁭‌⁭‭‪⁯‬‮(
    long _param0)
  {
    if (_param0 >= 0L)
      return \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u200D⁫‫‭‏‌⁫‌‪⁫⁪‎‏⁬‭‎⁫‪‭⁭‌⁭‭⁮⁯‎​⁮⁮‬​⁪‍⁫‪‏‬⁯⁪⁫‮((ulong) _param0);
    return _param0 == long.MinValue ? \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202A⁫⁬⁭‬‎‎​⁮⁮⁪​⁯‪⁬⁪‭‎‏‏‌⁮‮‏⁯⁬​⁯‭⁮⁬‬‪⁭‌⁭‭‪⁯‬‮(~_param0).\u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮() : \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202A⁫⁬⁭‬‎‎​⁮⁮⁪​⁯‪⁬⁪‭‎‏‏‌⁮‮‏⁯⁬​⁯‭⁮⁬‬‪⁭‌⁭‭‪⁯‬‮(-_param0).\u200E⁬‮‭‌‌⁯⁬‍‌‍‎‬⁬⁮‫​​‬‪‪⁫‏‮‌​​‬‏‎‏‬⁬‪‍⁯⁫⁮‪‮();
  }

  public static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮(
    long _param0)
  {
    return _param0 >= 0L && _param0 < (long) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS.Length ? \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.SMALL_CONSTANTS[_param0] : \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202A⁫⁬⁭‬‎‎​⁮⁮⁪​⁯‪⁬⁪‭‎‏‏‌⁮‮‏⁯⁬​⁯‭⁮⁬‬‪⁭‌⁭‭‪⁯‬‮(_param0);
  }

  public int \u206D​‬‌‏⁯‍‪‏‫⁫⁪⁭⁪‍⁪‏‫⁬‎‪‬‫‫‌‬‮‍‌⁯‭‬‍‍⁬‎‮‎‫⁬‮() => this.sign == 0 ? -1 : this.\u200C‌⁫‮‍‎‮‏⁭‍⁮‮‎‎⁮‪‮‍‏‮⁭‎⁫⁪⁭⁪‎⁯⁬‭‌⁫​⁪‭‎⁫⁬‌⁬‮(-1);

  private int \u200C‌⁫‮‍‎‮‏⁭‍⁮‮‎‎⁮‪‮‍‏‮⁭‎⁫⁪⁭⁪‎⁯⁬‭‌⁫​⁪‭‎⁫⁬‌⁬‮(int _param1)
  {
    int length = this.magnitude.Length;
    int num1 = 0;
    int num2;
    uint num3 = (uint) (this.magnitude[num2 = length - 1] & _param1);
    while (num3 == 0U)
    {
      num3 = (uint) this.magnitude[--num2];
      num1 += 32;
    }
    while (((int) num3 & (int) byte.MaxValue) == 0)
    {
      num3 >>= 8;
      num1 += 8;
    }
    while (((int) num3 & 1) == 0)
    {
      num3 >>= 1;
      ++num1;
    }
    return num1;
  }

  public bool \u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(int _param1)
  {
    if (_param1 < 0)
      throw new ArithmeticException("Bit position must not be negative");
    if (this.sign < 0)
      return !this.\u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮().\u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(_param1);
    int num = _param1 / 32;
    return num < this.magnitude.Length && (this.magnitude[this.magnitude.Length - 1 - num] >> _param1 % 32 & 1) > 0;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200E‮​‏⁯‭‪‬⁯‪⁫​⁭‬‬‫⁯⁭⁫⁬⁯​‫‌‫‎‭⁬‫​‬‪‪‍​‮‏⁭‍⁯‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (this.sign == 0)
      return _param1;
    if (_param1.sign == 0)
      return this;
    int[] numArray1 = this.sign > 0 ? this.magnitude : this.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One).magnitude;
    int[] numArray2 = _param1.sign > 0 ? _param1.magnitude : _param1.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One).magnitude;
    bool flag = this.sign < 0 || _param1.sign < 0;
    int[] numArray3 = new int[Math.Max(numArray1.Length, numArray2.Length)];
    int num1 = numArray3.Length - numArray1.Length;
    int num2 = numArray3.Length - numArray2.Length;
    for (int index = 0; index < numArray3.Length; ++index)
    {
      int num3 = index >= num1 ? numArray1[index - num1] : 0;
      int num4 = index >= num2 ? numArray2[index - num2] : 0;
      if (this.sign < 0)
        num3 = ~num3;
      if (_param1.sign < 0)
        num4 = ~num4;
      numArray3[index] = num3 | num4;
      if (flag)
        numArray3[index] = ~numArray3[index];
    }
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, numArray3, true);
    if (flag)
      obj = obj.\u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮();
    return obj;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202B⁬‍⁭‎‭‌⁯⁭‎⁮‭‫‬‎‬⁬⁬‪‏‍‏‭‪‪⁫⁫‌‪⁬‪⁬‬⁮​​‍​⁯‎‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (this.sign == 0)
      return _param1;
    if (_param1.sign == 0)
      return this;
    int[] numArray1 = this.sign > 0 ? this.magnitude : this.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One).magnitude;
    int[] numArray2 = _param1.sign > 0 ? _param1.magnitude : _param1.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One).magnitude;
    bool flag = this.sign < 0 && _param1.sign >= 0 || this.sign >= 0 && _param1.sign < 0;
    int[] numArray3 = new int[Math.Max(numArray1.Length, numArray2.Length)];
    int num1 = numArray3.Length - numArray1.Length;
    int num2 = numArray3.Length - numArray2.Length;
    for (int index = 0; index < numArray3.Length; ++index)
    {
      int num3 = index >= num1 ? numArray1[index - num1] : 0;
      int num4 = index >= num2 ? numArray2[index - num2] : 0;
      if (this.sign < 0)
        num3 = ~num3;
      if (_param1.sign < 0)
        num4 = ~num4;
      numArray3[index] = num3 ^ num4;
      if (flag)
        numArray3[index] = ~numArray3[index];
    }
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, numArray3, true);
    if (flag)
      obj = obj.\u206F⁪⁭‎⁪⁮‎‍⁭​‪⁬⁫‪‮⁮‏⁫​‌⁪‭​‫‌‍⁫‪‎‮‏⁮‌‍‬‏‮⁭‪⁭‮();
    return obj;
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206A​⁭‪⁯‪⁭‍‪‮‭‮⁪‪⁭⁫​‎⁮‏⁪‭‫‬‏‪⁫⁬‪⁬‪‭⁭‭‎⁮‫‍⁭⁪‮(
    int _param1)
  {
    if (_param1 < 0)
      throw new ArithmeticException("Bit address less than zero");
    if (this.\u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(_param1))
      return this;
    return this.sign > 0 && _param1 < this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1 ? this.\u202C‭‭⁭‌⁭‮⁯‍⁬‌‮‭‪‬‪⁯‬⁪‫‬⁭⁮⁯‎⁯‫‌⁭‎⁭‏‬⁭‌⁬‏‏⁬⁫‮(_param1) : this.\u200E‮​‏⁯‭‪‬⁯‪⁫​⁭‬‬‫⁯⁭⁫⁬⁯​‫‌‫‎‭⁬‫​‬‪‪‍​‮‏⁭‍⁯‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(_param1));
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200E‎‌‎‮⁫⁪​‪​‭‮‫‎‮‪‌‮‌​‫‬⁫⁬‍⁬⁯⁯‮‪‬⁪‮⁬‎‬⁫‎‭‫‮(
    int _param1)
  {
    if (_param1 < 0)
      throw new ArithmeticException("Bit address less than zero");
    if (!this.\u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(_param1))
      return this;
    return this.sign > 0 && _param1 < this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1 ? this.\u202C‭‭⁭‌⁭‮⁯‍⁬‌‮‭‪‬‪⁯‬⁪‫‬⁭⁮⁯‎⁯‫‌⁭‎⁭‏‬⁭‌⁬‏‏⁬⁫‮(_param1) : this.\u202E‌​‍‬‮⁬⁫⁫⁬⁬‮⁭‏⁬‪⁫‪⁪‮⁪‍‪⁭‎‍⁯⁪‭‏⁬⁮‍‬‫‌‎‎‬⁬‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(_param1));
  }

  public \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200E​‫⁪⁮‫​⁪‫⁬‫‌‮‎⁬⁮​‏​‮‮‍‭⁭‌‭⁭‮⁯‎‭‏‭⁭⁪‍‏‬‌⁫‮(
    int _param1)
  {
    if (_param1 < 0)
      throw new ArithmeticException("Bit address less than zero");
    return this.sign > 0 && _param1 < this.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1 ? this.\u202C‭‭⁭‌⁭‮⁯‍⁬‌‮‭‪‬‪⁯‬⁪‫‬⁭⁮⁯‎⁯‫‌⁭‎⁭‏‬⁭‌⁬‏‏⁬⁫‮(_param1) : this.\u202B⁬‍⁭‎‭‌⁯⁭‎⁮‭‫‬‎‬⁬⁬‪‏‍‏‭‪‪⁫⁫‌‪⁬‪⁬‬⁮​​‍​⁯‎‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(_param1));
  }

  private \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202C‭‭⁭‌⁭‮⁯‍⁬‌‮‭‪‬‪⁯‬⁪‫‬⁭⁮⁯‎⁯‫‌⁭‎⁭‏‬⁭‌⁬‏‏⁬⁫‮(
    int _param1)
  {
    int[] numArray = (int[]) this.magnitude.Clone();
    numArray[numArray.Length - 1 - (_param1 >> 5)] ^= 1 << _param1;
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(this.sign, numArray, false);
  }
}
