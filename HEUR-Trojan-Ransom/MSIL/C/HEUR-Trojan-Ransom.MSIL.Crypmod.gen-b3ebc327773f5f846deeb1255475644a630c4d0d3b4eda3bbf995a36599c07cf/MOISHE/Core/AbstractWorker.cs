// Decompiled with JetBrains decompiler
// Type: MOISHE.Core.AbstractWorker
// Assembly: lsassd, Version=3.4.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 432C6617-1CB7-4116-A49C-FF7B0B5EE7E5
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.MSIL.Crypmod.gen-b3ebc327773f5f846deeb1255475644a630c4d0d3b4eda3bbf995a36599c07cf.exe

using System;
using System.Collections.Concurrent;
using System.Threading;

namespace MOISHE.Core
{
  public abstract class AbstractWorker
  {
    protected Thread runner;
    protected bool _run;

    public static BlockingCollection<T> NewBlockingQueue<T>(int capacity) => new BlockingCollection<T>((IProducerConsumerCollection<T>) new ConcurrentQueue<T>(), capacity);

    public static void ExecuteOnce(ThreadStart Entrypoint) => new Thread(Entrypoint)
    {
      IsBackground = true
    }.Start();

    protected abstract void Execute();

    public void Start()
    {
      lock (this)
      {
        if (this.runner == null)
        {
          this._run = true;
          this.runner = new Thread(new ThreadStart(this.ThreadEntry));
          this.runner.IsBackground = true;
          this.runner.Priority = ThreadPriority.BelowNormal;
        }
        this.runner.Start();
      }
    }

    public void Cancel()
    {
      if (!this._run)
        return;
      lock (this)
      {
        this._run = false;
        if (this.runner == null || !this.runner.IsAlive)
          return;
        if (this.runner.ThreadState != ThreadState.Aborted)
          this.runner.Abort();
        this.runner.Join();
        this.runner = (Thread) null;
      }
    }

    protected void ThreadEntry()
    {
      try
      {
        this.Execute();
      }
      catch (Exception ex)
      {
      }
      finally
      {
        this.runner = (Thread) null;
      }
    }
  }
}
