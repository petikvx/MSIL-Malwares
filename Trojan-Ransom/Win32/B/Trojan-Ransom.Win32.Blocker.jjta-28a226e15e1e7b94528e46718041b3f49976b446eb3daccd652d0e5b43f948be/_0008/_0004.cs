// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BOMBS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b01670ee6fa4859f
// MVID: D5D8F5B0-12EB-4325-8C3D-C60F341D062A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.jjta-28a226e15e1e7b94528e46718041b3f49976b446eb3daccd652d0e5b43f948be.exe

using \u0001;
using \u0006;
using \u0008;
using \u000E;
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0008
{
  internal abstract class \u0004
  {
    private static bool \u0001;
    private \u0003 \u0001;
    private static readonly object \u0001;

    protected void \u0001([In] uint obj0)
    {
      object obj1;
      try
      {
        try
        {
          \u0095\u0003.\u0016\u0006(obj1 = \u0008.\u0004.\u0001);
          try
          {
            this.\u0001();
            \u0003.\u0001(obj0);
          }
          finally
          {
            \u0095\u0003.\u0017\u0006(obj1);
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        object obj2 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<uint> local = (ValueType) obj0;
        \u0003.\u0001(ex, obj2, (object) this, (object) local);
        throw;
      }
    }

    protected void \u0001([In] string obj0)
    {
      object obj1;
      try
      {
        try
        {
          \u0095\u0003.\u0016\u0006(obj1 = \u0008.\u0004.\u0001);
          try
          {
            this.\u0001();
            \u0003.\u0002(obj0);
          }
          finally
          {
            do
            {
              \u0095\u0003.\u0017\u0006(obj1);
            }
            while (false);
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        object obj2 = obj1;
        string str = obj0;
        \u0003.\u0001(ex, obj2, (object) this, (object) str);
        throw;
      }
    }

    private void \u0001()
    {
      Thread thread1;
      \u0008.\u0004.\u0001 obj1;
      try
      {
        if (\u0008.\u0004.\u0001)
          return;
        obj1 = new \u0008.\u0004.\u0001();
        obj1.\u0001 = this;
        obj1.\u0001 = \u0003.\u0001();
        // ISSUE: method pointer
        thread1 = new Thread(new ThreadStart((object) obj1, __methodptr(\u0001)));
        \u008E\u0002.\u007E\u0096\u0004((object) thread1, true);
        \u0096\u0003.\u007E\u0018\u0006((object) thread1, ApartmentState.STA);
        \u0015.\u007E\u009F((object) thread1);
        \u0018\u0003.\u007E\u008F\u0005((object) \u0003\u0002.\u0097\u0003(), new EventHandler(this.\u0001));
        \u0008.\u0004.\u0001 = true;
      }
      catch (Exception ex)
      {
        Thread thread2 = thread1;
        \u0008.\u0004.\u0001 obj2 = obj1;
        \u0003.\u0001(ex, (object) thread2, (object) obj2, (object) this);
        throw;
      }
    }

    private void \u0001([In] object obj0, [In] EventArgs obj1)
    {
      \u000F.\u000F obj2;
      \u0004.\u000E obj3;
      try
      {
        obj3 = \u0003.\u0002();
        if (obj3.\u0001())
          return;
        obj2 = new \u000F.\u000F(obj3);
        // ISSUE: method pointer
        obj2.\u0001(new \u0003((object) this, __methodptr(\u0001)));
        if (!this.\u0001())
          return;
        this.\u0001(obj2);
        \u0003.\u0001();
      }
      catch (Exception ex)
      {
        \u0004.\u000E obj4 = obj3;
        \u000F.\u000F obj5 = obj2;
        object obj6 = obj0;
        EventArgs eventArgs = obj1;
        \u0003.\u0001(ex, (object) obj4, (object) obj5, (object) this, obj6, (object) eventArgs);
        throw;
      }
    }

    protected abstract void \u0001([In] \u000F.\u000F obj0);

    protected abstract bool \u0001();

    private void \u0001([In] \u0004.\u000E obj0)
    {
      \u000F.\u000F obj1;
      try
      {
        if (false)
          return;
        obj1 = new \u000F.\u000F(obj0);
        // ISSUE: method pointer
        obj1.\u0001(new \u0003((object) this, __methodptr(\u0001)));
        if (!this.\u0001())
          goto label_2;
label_1:
        \u008E\u0002.\u007E\u0096\u0004((object) \u0081\u0003.\u009B\u0005(), false);
        this.\u0001(obj1);
label_2:
        if (true)
          \u0004.\u0008.\u0001();
        else
          goto label_1;
      }
      catch (Exception ex)
      {
        \u000F.\u000F obj2 = obj1;
        \u0004.\u000E obj3 = obj0;
        \u0003.\u0001(ex, (object) obj2, (object) this, (object) obj3);
        throw;
      }
    }

    private void \u0001([In] object obj0, [In] \u0007 obj1)
    {
      \u0003 obj2;
      try
      {
        do
        {
          \u0003 obj3 = this.\u0001;
          if (true)
            goto label_6;
label_1:
          if (obj2 == null)
            goto label_3;
label_2:
          if (true)
            obj2(obj0, obj1);
label_3:
          if (true)
            continue;
          goto label_2;
label_6:
          obj2 = obj3;
          goto label_1;
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003 obj4 = obj2;
        object obj5 = obj0;
        \u0007 obj6 = obj1;
        \u0003.\u0001(ex, (object) obj4, (object) this, obj5, (object) obj6);
        throw;
      }
    }

    static \u0004()
    {
      try
      {
        \u0008.\u0004.\u0001 = new object();
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex);
        throw;
      }
    }

    private sealed class \u0001
    {
      public \u0004.\u000E \u0001;
      public \u0008.\u0004 \u0001;

      public void \u0001()
      {
        try
        {
          this.\u0001.\u0001(this.\u0001);
        }
        catch (Exception ex)
        {
          \u0003.\u0001(ex, (object) this);
          throw;
        }
      }
    }
  }
}
