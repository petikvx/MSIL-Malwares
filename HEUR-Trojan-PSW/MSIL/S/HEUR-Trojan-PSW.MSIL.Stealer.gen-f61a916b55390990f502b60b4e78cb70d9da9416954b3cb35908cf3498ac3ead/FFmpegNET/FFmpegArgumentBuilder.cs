// Decompiled with JetBrains decompiler
// Type: SimpleVideoCutter.FFmpegNET.FFmpegArgumentBuilder
// Assembly: SimpleVideoCutter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC3F1699-ABA1-43FB-A799-9F64138760E7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f61a916b55390990f502b60b4e78cb70d9da9416954b3cb35908cf3498ac3ead.exe

using System;
using System.Globalization;
using System.Text;

namespace SimpleVideoCutter.FFmpegNET
{
  internal class FFmpegArgumentBuilder
  {
    public static string BuildArgumentsSingleCutOperation(
      string inputFileFullPath,
      string outputFileFullPath,
      TimeSpan start,
      TimeSpan end,
      bool lossless)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (lossless)
      {
        stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture, " -ss {0:0.000} ", new object[1]
        {
          (object) start.TotalSeconds
        });
        stringBuilder.AppendFormat(" -i \"{0}\" ", (object) inputFileFullPath);
        stringBuilder.AppendFormat(" -codec copy -copyts ");
        stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture, " -to {0:0.000} ", new object[1]
        {
          (object) end.TotalSeconds
        });
        stringBuilder.AppendFormat(" -map 0 ");
      }
      else
      {
        stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture, " -ss {0:0.000} ", new object[1]
        {
          (object) start.TotalSeconds
        });
        stringBuilder.AppendFormat(" -i \"{0}\" ", (object) inputFileFullPath);
        stringBuilder.AppendFormat(" -copyts ");
        stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture, " -to {0:0.000} ", new object[1]
        {
          (object) end.TotalSeconds
        });
        stringBuilder.AppendFormat(" -map 0 ");
      }
      return stringBuilder.AppendFormat(" \"{0}\" ", (object) outputFileFullPath).ToString();
    }
  }
}
