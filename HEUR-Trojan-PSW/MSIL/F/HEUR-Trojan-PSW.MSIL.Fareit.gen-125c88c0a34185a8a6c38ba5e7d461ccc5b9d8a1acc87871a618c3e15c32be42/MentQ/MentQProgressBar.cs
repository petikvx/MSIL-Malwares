// Decompiled with JetBrains decompiler
// Type: MentQ.MentQProgressBar
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MentQ
{
  [Category("MentQ")]
  public class MentQProgressBar : ProgressBar
  {
    private Color _alternateForeColor;
    private bool _underline;
    private Color _underlineColor;
    private int _underlineSize;

    public MentQProgressBar()
    {
      this.InactiveBackColor = Color.FromArgb(150, 200, 200, 200);
      this.CornerRounding = 5;
      this.Size = new Size(170, 20);
      this.UnderlineSize = 2;
      this.UnderlineColor = Color.FromArgb(100, 70, 70, 70);
      this.BackColor = MentQDefaults.MentQBlue;
      this.ForeColor = Color.White;
      this.DoubleBuffered = true;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.OptimizedDoubleBuffer, true);
      this.Font = new Font("Segoe UI", 7f);
      this.AlternateForeColor = Color.FromArgb(40, 40, 40);
    }

    [Category("Appearance")]
    public bool DiagonalLines { get; set; }

    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    [Category("Appearance")]
    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public Color AlternateForeColor
    {
      get => this._alternateForeColor;
      set
      {
        this._alternateForeColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public bool Underline
    {
      get => this._underline;
      set
      {
        this._underline = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public int UnderlineSize
    {
      get => this._underlineSize;
      set
      {
        this._underlineSize = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public Color UnderlineColor
    {
      get => this._underlineColor;
      set
      {
        this._underlineColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public int CornerRounding { get; set; }

    [Category("Appearance")]
    public Color InactiveBackColor { get; set; }

    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    [Category("Appearance")]
    public override Font Font
    {
      get => base.Font;
      set => base.Font = value;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      Graphics graphics = e.Graphics;
      float num = (float) this.Width / (float) this.Maximum * (float) this.Value;
      graphics.Clear(this.Parent.BackColor);
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.SetClip(new RectangleF(0.0f, 0.0f, (float) this.Width, (float) this.Height));
      using (SolidBrush solidBrush1 = new SolidBrush(this.InactiveBackColor))
      {
        graphics.FillPath((Brush) solidBrush1, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, (float) (this.Width + 1), (float) (this.Height + 1)), (float) this.CornerRounding));
        graphics.SetClip(new Rectangle(0, 0, Convert.ToInt32(num), this.Height));
        using (SolidBrush solidBrush2 = new SolidBrush(this.BackColor))
          graphics.FillPath((Brush) solidBrush2, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, num + 1f, (float) (this.Height + 1)), (float) this.CornerRounding));
        if (this.Underline)
        {
          using (SolidBrush solidBrush3 = new SolidBrush(this.UnderlineColor))
          {
            graphics.SetClip(new Rectangle(0, this.Height - this.UnderlineSize, Convert.ToInt32(num), this.UnderlineSize));
            graphics.FillPath((Brush) solidBrush3, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, num + 1f, (float) (this.Height + 1)), (float) this.CornerRounding));
          }
        }
      }
      using (SolidBrush solidBrush4 = new SolidBrush(this.ForeColor))
      {
        using (SolidBrush solidBrush5 = new SolidBrush(this.AlternateForeColor))
        {
          graphics.SetClip(new Rectangle(0, 0, Convert.ToInt32(num), this.Height));
          graphics.DrawString(this.Text, this.Font, (Brush) solidBrush4, 5f, (float) (((double) this.Height - (double) graphics.MeasureString(this.Text, this.Font).Height) / 2.0));
          graphics.SetClip(new Rectangle(Convert.ToInt32(num), 0, this.Width, this.Height));
          graphics.DrawString(this.Text, this.Font, (Brush) solidBrush5, 5f, (float) (((double) this.Height - (double) graphics.MeasureString(this.Text, this.Font).Height) / 2.0));
        }
      }
      if (!this.Enabled)
      {
        using (SolidBrush solidBrush = new SolidBrush(Color.FromArgb(100, 222, 222, 222)))
          graphics.FillPath((Brush) solidBrush, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, (float) (this.Width + 1), (float) (this.Height + 1)), (float) this.CornerRounding));
      }
      graphics.ResetClip();
      base.OnPaint(e);
    }
  }
}
