// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSControlButton
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  internal class NSControlButton : Control
  {
    private NSControlButton.Button _ControlButton;
    private GraphicsPath ClosePath;

    public NSControlButton.Button ControlButton
    {
      get => this._ControlButton;
      set
      {
        this._ControlButton = value;
        this.Invalidate();
      }
    }

    public NSControlButton()
    {
      this._ControlButton = NSControlButton.Button.Close;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.Width = 18;
      this.Height = 20;
      this.MinimumSize = this.Size;
      this.MaximumSize = this.Size;
      this.Margin = new Padding(0);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.Clear(this.BackColor);
      switch (this._ControlButton)
      {
        case NSControlButton.Button.Minimize:
          this.DrawMinimize(3, 10);
          break;
        case NSControlButton.Button.MaximizeRestore:
          if (this.FindForm().WindowState == FormWindowState.Normal)
          {
            this.DrawMaximize(3, 5);
            break;
          }
          this.DrawRestore(3, 4);
          break;
        case NSControlButton.Button.Close:
          this.DrawClose(4, 5);
          break;
      }
    }

    private void DrawMinimize(int x, int y)
    {
      ThemeModule.G.FillRectangle(Brushes.WhiteSmoke, x, y, 12, 5);
      ThemeModule.G.DrawRectangle(Pens.Black, x, y, 11, 4);
    }

    private void DrawMaximize(int x, int y)
    {
      ThemeModule.G.DrawRectangle(new Pen(Color.FromArgb(235, 235, 235), 2f), checked (x + 2), checked (y + 2), 8, 6);
      ThemeModule.G.DrawRectangle(Pens.Black, x, y, 11, 9);
      ThemeModule.G.DrawRectangle(Pens.Black, checked (x + 3), checked (y + 3), 5, 3);
    }

    private void DrawRestore(int x, int y)
    {
      ThemeModule.G.FillRectangle(Brushes.WhiteSmoke, checked (x + 3), checked (y + 1), 8, 4);
      ThemeModule.G.FillRectangle(Brushes.WhiteSmoke, checked (x + 7), checked (y + 5), 4, 4);
      ThemeModule.G.DrawRectangle(Pens.Black, checked (x + 2), checked (y + 0), 9, 9);
      ThemeModule.G.FillRectangle(Brushes.WhiteSmoke, checked (x + 1), checked (y + 3), 2, 6);
      ThemeModule.G.FillRectangle(Brushes.WhiteSmoke, checked (x + 1), checked (y + 9), 8, 2);
      ThemeModule.G.DrawRectangle(Pens.Black, x, checked (y + 2), 9, 9);
      ThemeModule.G.DrawRectangle(Pens.Black, checked (x + 3), checked (y + 5), 3, 3);
    }

    private void DrawClose(int x, int y)
    {
      if (this.ClosePath == null)
      {
        this.ClosePath = new GraphicsPath();
        this.ClosePath.AddLine(checked (x + 1), y, checked (x + 3), y);
        this.ClosePath.AddLine(checked (x + 5), checked (y + 2), checked (x + 7), y);
        this.ClosePath.AddLine(checked (x + 9), y, checked (x + 10), checked (y + 1));
        this.ClosePath.AddLine(checked (x + 7), checked (y + 4), checked (x + 7), checked (y + 5));
        this.ClosePath.AddLine(checked (x + 10), checked (y + 8), checked (x + 9), checked (y + 9));
        this.ClosePath.AddLine(checked (x + 7), checked (y + 9), checked (x + 5), checked (y + 7));
        this.ClosePath.AddLine(checked (x + 3), checked (y + 9), checked (x + 1), checked (y + 9));
        this.ClosePath.AddLine(checked (x + 0), checked (y + 8), checked (x + 3), checked (y + 5));
        this.ClosePath.AddLine(checked (x + 3), checked (y + 4), checked (x + 0), checked (y + 1));
      }
      ThemeModule.G.FillPath(Brushes.WhiteSmoke, this.ClosePath);
      ThemeModule.G.DrawPath(Pens.Black, this.ClosePath);
    }

    protected override void OnMouseClick(MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        Form form = this.FindForm();
        switch (this._ControlButton)
        {
          case NSControlButton.Button.Minimize:
            form.WindowState = FormWindowState.Minimized;
            break;
          case NSControlButton.Button.MaximizeRestore:
            form.WindowState = form.WindowState != FormWindowState.Normal ? FormWindowState.Normal : FormWindowState.Maximized;
            break;
          case NSControlButton.Button.Close:
            form.Close();
            break;
        }
      }
      this.Invalidate();
      base.OnMouseClick(e);
    }

    public enum Button : byte
    {
      None,
      Minimize,
      MaximizeRestore,
      Close,
    }
  }
}
