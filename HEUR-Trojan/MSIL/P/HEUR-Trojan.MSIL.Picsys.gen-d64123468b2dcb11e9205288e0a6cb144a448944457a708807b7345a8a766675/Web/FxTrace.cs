// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.FxTrace
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Runtime;
using System.Runtime.Diagnostics;
using System.Security;

namespace System.ServiceModel.Web
{
  internal static class FxTrace
  {
    private const string baseEventSourceName = "System.ServiceModel.Web";
    private const string EventSourceVersion = "4.0.0.0";
    private static Guid etwProviderId;
    private static string eventSourceName;
    private static ExceptionTrace exceptionTrace;
    private static bool[] enabledEvents;
    private static SortedSet<ushort> end2EndEvents;
    [SecurityCritical]
    private static EventDescriptor[] eventDescriptors;
    private static object lockObject = new object();
    private static bool tracingEnabled = true;
    private static bool shouldTraceVerbose = true;
    private static bool shouldTraceInformation = true;
    private static bool shouldTraceWarning = true;
    private static bool shouldTraceError = true;
    private static bool shouldTraceCritical = true;
    private static bool shouldTraceVerboseToTraceSource = true;
    private static bool shouldTraceInformationToTraceSource = true;
    private static bool shouldTraceWarningToTraceSource = true;
    private static bool shouldTraceErrorToTraceSource = true;
    private static bool shouldTraceCriticalToTraceSource = true;
    private static EtwDiagnosticTrace diagnosticTrace;

    [SecuritySafeCritical]
    public static void UpdateEventDefinitions(
      EventDescriptor[] eventDescriptors,
      ushort[] end2EndEvents)
    {
      FxTrace.EnsureEtwProviderInitialized();
      FxTrace.eventDescriptors = eventDescriptors;
      FxTrace.end2EndEvents = new SortedSet<ushort>((IEnumerable<ushort>) end2EndEvents);
      FxTrace.UpdateEnabledEventsList(FxTrace.diagnosticTrace);
    }

    public static bool IsEventEnabled(int index) => FxTrace.enabledEvents == null || FxTrace.enabledEvents[index];

    public static bool ShouldTraceCritical => FxTrace.shouldTraceCritical;

    public static bool TracingEnabled => FxTrace.tracingEnabled;

    public static bool ShouldTraceError => FxTrace.shouldTraceError;

    public static bool ShouldTraceInformation => FxTrace.shouldTraceInformation;

    public static bool ShouldTraceVerbose => FxTrace.shouldTraceVerbose;

    public static bool ShouldTraceWarning => FxTrace.shouldTraceWarning;

    public static bool ShouldTraceCriticalToTraceSource => FxTrace.shouldTraceCriticalToTraceSource;

    public static bool ShouldTraceErrorToTraceSource => FxTrace.shouldTraceErrorToTraceSource;

    public static bool ShouldTraceInformationToTraceSource => FxTrace.shouldTraceInformationToTraceSource;

    public static bool ShouldTraceVerboseToTraceSource => FxTrace.shouldTraceVerboseToTraceSource;

    public static bool ShouldTraceWarningToTraceSource => FxTrace.shouldTraceWarningToTraceSource;

    public static ExceptionTrace Exception
    {
      get
      {
        if (FxTrace.exceptionTrace == null)
          FxTrace.exceptionTrace = new ExceptionTrace(FxTrace.EventSourceName, FxTrace.Trace);
        return FxTrace.exceptionTrace;
      }
    }

    public static EtwDiagnosticTrace Trace
    {
      get
      {
        FxTrace.EnsureEtwProviderInitialized();
        return FxTrace.diagnosticTrace;
      }
    }

    public static EventLogger EventLog => new EventLogger(FxTrace.EventSourceName, (DiagnosticTraceBase) FxTrace.Trace);

    private static string EventSourceName
    {
      get
      {
        if (FxTrace.eventSourceName == null)
          FxTrace.eventSourceName = "System.ServiceModel.Web" + " " + "4.0.0.0";
        return FxTrace.eventSourceName;
      }
    }

    [SecuritySafeCritical]
    private static void UpdateEnabledEventsList(EtwDiagnosticTrace trace)
    {
      lock (FxTrace.lockObject)
      {
        int num = -1;
        EventDescriptor[] eventDescriptors = FxTrace.eventDescriptors;
        if (eventDescriptors == null)
          return;
        if (FxTrace.enabledEvents == null)
          FxTrace.enabledEvents = new bool[eventDescriptors.Length];
        for (int index = 0; index < FxTrace.enabledEvents.Length; ++index)
        {
          EventDescriptor eventDescriptor = eventDescriptors[index];
          bool flag = FxTrace.Trace.IsEtwEventEnabled(ref eventDescriptor);
          FxTrace.enabledEvents[index] = flag;
          if (flag && !FxTrace.Trace.IsEnd2EndActivityTracingEnabled && FxTrace.end2EndEvents.Contains((ushort) eventDescriptor.EventId))
            FxTrace.Trace.SetEnd2EndActivityTracingEnabled(true);
          if (flag && num < (int) eventDescriptor.Level)
            num = (int) eventDescriptor.Level;
        }
        FxTrace.shouldTraceCritical = FxTrace.shouldTraceCriticalToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Critical) && num >= 1;
        FxTrace.shouldTraceError = FxTrace.shouldTraceErrorToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Error) && num >= 2;
        FxTrace.shouldTraceWarning = FxTrace.shouldTraceWarningToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Warning) && num >= 3;
        FxTrace.shouldTraceInformation = FxTrace.shouldTraceInformationToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Informational) && num >= 4;
        FxTrace.shouldTraceVerbose = FxTrace.shouldTraceVerboseToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Verbose) && num >= 5;
      }
    }

    [SecuritySafeCritical]
    private static EtwDiagnosticTrace InitializeTracing()
    {
      FxTrace.etwProviderId = EtwDiagnosticTrace.DefaultEtwProviderId;
      EtwDiagnosticTrace trace = new EtwDiagnosticTrace("System.ServiceModel.Web", FxTrace.etwProviderId);
      if (trace.EtwProvider != null)
        trace.RefreshState += (Action) (() => FxTrace.UpdateLevel());
      FxTrace.UpdateLevel(trace);
      return trace;
    }

    private static void UpdateLevel(EtwDiagnosticTrace trace)
    {
      if (trace == null)
        return;
      FxTrace.tracingEnabled = trace.TracingEnabled;
      FxTrace.shouldTraceCriticalToTraceSource = trace.ShouldTraceToTraceSource(TraceEventLevel.Critical);
      FxTrace.shouldTraceErrorToTraceSource = trace.ShouldTraceToTraceSource(TraceEventLevel.Error);
      FxTrace.shouldTraceWarningToTraceSource = trace.ShouldTraceToTraceSource(TraceEventLevel.Warning);
      FxTrace.shouldTraceInformationToTraceSource = trace.ShouldTraceToTraceSource(TraceEventLevel.Informational);
      FxTrace.shouldTraceVerboseToTraceSource = trace.ShouldTraceToTraceSource(TraceEventLevel.Verbose);
      FxTrace.shouldTraceCritical = FxTrace.shouldTraceCriticalToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Critical);
      FxTrace.shouldTraceError = FxTrace.shouldTraceErrorToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Error);
      FxTrace.shouldTraceWarning = FxTrace.shouldTraceWarningToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Warning);
      FxTrace.shouldTraceInformation = FxTrace.shouldTraceInformationToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Informational);
      FxTrace.shouldTraceVerbose = FxTrace.shouldTraceVerboseToTraceSource || trace.ShouldTraceToEtw(TraceEventLevel.Verbose);
      FxTrace.UpdateEnabledEventsList(trace);
    }

    private static void UpdateLevel() => FxTrace.UpdateLevel(FxTrace.Trace);

    private static void EnsureEtwProviderInitialized()
    {
      if (FxTrace.diagnosticTrace != null)
        return;
      lock (FxTrace.lockObject)
      {
        if (FxTrace.diagnosticTrace != null)
          return;
        FxTrace.diagnosticTrace = FxTrace.InitializeTracing();
      }
    }
  }
}
