// Decompiled with JetBrains decompiler
// Type: TumblrAPI.FormUpload
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;

namespace TumblrAPI
{
  internal static class FormUpload
  {
    private static readonly Encoding encoding = Encoding.UTF8;

    public static HttpWebRequest MultipartFormDataPost(
      string postUrl,
      string userAgent,
      Dictionary<string, object> postParameters)
    {
      string boundary = "-----------------------------28947758029299";
      string contentType = "multipart/form-data; boundary=" + boundary;
      byte[] multipartFormData = FormUpload.GetMultipartFormData(postParameters, boundary);
      return FormUpload.PostForm(postUrl, userAgent, contentType, multipartFormData);
    }

    private static HttpWebRequest PostForm(
      string postUrl,
      string userAgent,
      string contentType,
      byte[] formData)
    {
      if (!(WebRequest.Create(postUrl) is HttpWebRequest httpWebRequest))
        throw new NullReferenceException("request is not a http request");
      httpWebRequest.Method = "POST";
      httpWebRequest.ContentType = contentType;
      httpWebRequest.UserAgent = userAgent;
      httpWebRequest.SendChunked = true;
      httpWebRequest.CookieContainer = new CookieContainer();
      httpWebRequest.ContentLength = (long) formData.Length;
      using (Stream requestStream = httpWebRequest.GetRequestStream())
      {
        requestStream.Write(formData, 0, formData.Length);
        requestStream.Close();
      }
      return httpWebRequest;
    }

    private static byte[] GetMultipartFormData(
      Dictionary<string, object> postParameters,
      string boundary)
    {
      Stream stream = (Stream) new MemoryStream();
      foreach (KeyValuePair<string, object> postParameter in postParameters)
      {
        if (postParameter.Value is FormUpload.FileParameter)
        {
          FormUpload.FileParameter fileParameter = (FormUpload.FileParameter) postParameter.Value;
          string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\";\r\nContent-Type: {3}\r\n\r\n", (object) boundary, (object) postParameter.Key, (object) (fileParameter.FileName ?? postParameter.Key), (object) (fileParameter.ContentType ?? "application/octet-stream"));
          stream.Write(FormUpload.encoding.GetBytes(s), 0, s.Length);
          stream.Write(fileParameter.File, 0, fileParameter.File.Length);
          stream.Write(FormUpload.encoding.GetBytes("\r\n"), 0, 2);
        }
        else
        {
          string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}\r\n", (object) boundary, (object) postParameter.Key, postParameter.Value);
          stream.Write(FormUpload.encoding.GetBytes(s), 0, s.Length);
        }
      }
      string s1 = "\r\n--" + boundary + "--\r\n";
      stream.Write(FormUpload.encoding.GetBytes(s1), 0, s1.Length);
      stream.Position = 0L;
      byte[] buffer = new byte[stream.Length];
      stream.Read(buffer, 0, buffer.Length);
      stream.Close();
      return buffer;
    }

    public class FileParameter
    {
      public byte[] File { get; set; }

      public string FileName { get; set; }

      public string ContentType { get; set; }

      public FileParameter(byte[] file)
        : this(file, (string) null)
      {
      }

      public FileParameter(byte[] file, string filename)
        : this(file, filename, (string) null)
      {
      }

      public FileParameter(byte[] file, string filename, string contenttype)
      {
        this.File = file;
        this.FileName = filename;
        this.ContentType = contenttype;
      }
    }
  }
}
