// Decompiled with JetBrains decompiler
// Type: ATM_Final.AccountsDataSet
// Assembly: ObjRefSurrog, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3AC6506B-4A94-4066-A76F-E3EA4A03BC27
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan.MSIL.VBKrypt.gen-1a8d9888103b10597efba13da4fd7938444cf181a493a6063925d18df3fefdcf.exe

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace ATM_Final
{
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [HelpKeyword("vs.data.DataSet")]
  [ToolboxItem(true)]
  [XmlRoot("AccountsDataSet")]
  [DesignerCategory("code")]
  [Serializable]
  public class AccountsDataSet : DataSet
  {
    private AccountsDataSet.TableDataTable tableTable;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public AccountsDataSet()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected AccountsDataSet(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
label_1:
      int num1 = 846609700;
      DataSet dataSet;
      string s;
      CollectionChangeEventHandler changeEventHandler1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1720037730)) % 39U)
        {
          case 0:
            num1 = (int) num2 * 112772403 ^ -27998806;
            continue;
          case 1:
            num1 = (int) num2 * -1489550483 ^ -456312699;
            continue;
          case 2:
            this.Prefix = dataSet.Prefix;
            this.Namespace = dataSet.Namespace;
            num1 = (int) num2 * 1687677440 ^ -1290711121;
            continue;
          case 3:
            num1 = (int) num2 * 1853961149 ^ -692601658;
            continue;
          case 4:
            num1 = (int) num2 * 1068113589 ^ 1968942391;
            continue;
          case 5:
            this.DataSetName = dataSet.DataSetName;
            num1 = 337435205;
            continue;
          case 6:
            num1 = (int) num2 * 120009606 ^ -2096632491;
            continue;
          case 7:
            this.InitVars(false);
            num1 = (int) num2 * 1263022962 ^ -1862461021;
            continue;
          case 8:
            goto label_3;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * -1141043777 ^ 1030289315;
            continue;
          case 11:
            dataSet = new DataSet();
            num1 = (int) num2 * 493826816 ^ -209917637;
            continue;
          case 12:
            dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
            num1 = (int) num2 * 1513645614 ^ 1711968196;
            continue;
          case 13:
            this.GetSerializationData(info, context);
            CollectionChangeEventHandler changeEventHandler2 = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += changeEventHandler2;
            this.Relations.CollectionChanged += changeEventHandler2;
            num1 = 672142598;
            continue;
          case 14:
            num1 = (int) num2 * 246756656 ^ -1218561632;
            continue;
          case 15:
            this.Relations.CollectionChanged += changeEventHandler1;
            num1 = (int) num2 * -2103656853 ^ 1915448100;
            continue;
          case 16:
            num1 = (int) num2 * 901667094 ^ -1053153363;
            continue;
          case 17:
            this.EnforceConstraints = dataSet.EnforceConstraints;
            num1 = (int) num2 * 1817575419 ^ 20867045;
            continue;
          case 18:
            num1 = (int) num2 * 574684033 ^ 295047229;
            continue;
          case 19:
            num1 = (int) num2 * -270485259 ^ -1285275021;
            continue;
          case 20:
            this.Locale = dataSet.Locale;
            this.CaseSensitive = dataSet.CaseSensitive;
            num1 = (int) num2 * -330043649 ^ 1821913748;
            continue;
          case 21:
            this.InitVars();
            num1 = (int) num2 * 328944136 ^ 818636015;
            continue;
          case 22:
            changeEventHandler1 = new CollectionChangeEventHandler(this.SchemaChanged);
            num1 = (int) num2 * -851366520 ^ -1095108903;
            continue;
          case 23:
            this.Tables.CollectionChanged += changeEventHandler1;
            num1 = (int) num2 * 1621373859 ^ 482419398;
            continue;
          case 24:
            num1 = (int) num2 * 32221094 ^ 910338892;
            continue;
          case 25:
            base.Tables.Add((DataTable) new AccountsDataSet.TableDataTable(dataSet.Tables[nameof (Table)]));
            num1 = (int) num2 * -432785506 ^ 568379354;
            continue;
          case 26:
            num1 = (int) num2 * -378339582 ^ -1071851703;
            continue;
          case 27:
            s = (string) info.GetValue("XmlSchema", typeof (string));
            int num3;
            num1 = num3 = this.DetermineSchemaSerializationMode(info, context) != SchemaSerializationMode.IncludeSchema ? 425580763 : (num3 = 1824864525);
            continue;
          case 28:
            int num4 = dataSet.Tables[nameof (Table)] == null ? -318295428 : (num4 = -240987212);
            num1 = num4 ^ (int) num2 * 1618861278;
            continue;
          case 29:
            num1 = (int) num2 * 1650235429 ^ -1664478756;
            continue;
          case 30:
            this.Merge(dataSet, false, MissingSchemaAction.Add);
            num1 = (int) num2 * 662898495 ^ -759560956;
            continue;
          case 31:
            int num5 = this.IsBinarySerialized(info, context) ? 322465346 : (num5 = 421073250);
            num1 = num5 ^ (int) num2 * 644238061;
            continue;
          case 32:
            num1 = (int) num2 * -1292246827 ^ 130448073;
            continue;
          case 33:
            num1 = 453689516;
            continue;
          case 34:
            num1 = (int) num2 * 971384735 ^ 877286365;
            continue;
          case 35:
            this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
            num1 = (int) num2 * 27558170 ^ -39436564;
            continue;
          case 36:
            num1 = (int) num2 * -1738548571 ^ -1256726417;
            continue;
          case 37:
            num1 = (int) num2 * -1687212327 ^ 1680324442;
            continue;
          case 38:
            num1 = (int) num2 * 1319754295 ^ 1332537425;
            continue;
          default:
            goto label_41;
        }
      }
label_3:
      return;
label_41:;
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public AccountsDataSet.TableDataTable Table
    {
      get
      {
label_1:
        int num1 = -119439110;
        AccountsDataSet.TableDataTable tableTable;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -94746617)) % 4U)
          {
            case 1:
              tableTable = this.tableTable;
              num1 = (int) num2 * -268106200 ^ 508932801;
              continue;
            case 2:
              num1 = (int) num2 * -534224640 ^ -850842501;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return tableTable;
      }
    }

    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get
      {
label_1:
        int num1 = 1993020765;
        SchemaSerializationMode serializationMode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1278920592)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -1537396319 ^ -1158344522;
              continue;
            case 1:
              serializationMode = this._schemaSerializationMode;
              num1 = (int) num2 * 1469872882 ^ 196916462;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return serializationMode;
      }
      set => this._schemaSerializationMode = value;
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public new DataTableCollection Tables
    {
      get
      {
        DataTableCollection tables = base.Tables;
label_1:
        int num1 = -780881851;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1085319503)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -1049501600 ^ 874393709;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return tables;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [DebuggerNonUserCode]
    public new DataRelationCollection Relations
    {
      get
      {
        DataRelationCollection relations = base.Relations;
label_1:
        int num1 = 1598214077;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1019829477)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -957613641 ^ 1453393828;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return relations;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override void InitializeDerivedDataSet()
    {
label_1:
      int num1 = -266462640;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -761373048)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            this.BeginInit();
            num1 = (int) num2 * -2085441490 ^ 343847786;
            continue;
          case 2:
            num1 = (int) num2 * 871590242 ^ -872216022;
            continue;
          case 3:
            this.EndInit();
            num1 = (int) num2 * 1893467438 ^ 1189474380;
            continue;
          case 4:
            this.InitClass();
            num1 = (int) num2 * 1165707470 ^ -1868698907;
            continue;
          case 5:
            num1 = (int) num2 * 530429244 ^ 23757765;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public override DataSet Clone()
    {
label_1:
      int num1 = 1199827543;
      AccountsDataSet accountsDataSet;
      DataSet dataSet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1743560826)) % 4U)
        {
          case 0:
            accountsDataSet.SchemaSerializationMode = this.SchemaSerializationMode;
            dataSet = (DataSet) accountsDataSet;
            num1 = (int) num2 * -449231777 ^ 1580304912;
            continue;
          case 1:
            accountsDataSet = (AccountsDataSet) base.Clone();
            accountsDataSet.InitVars();
            num1 = (int) num2 * -2052303907 ^ 1785427891;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return dataSet;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override bool ShouldSerializeTables()
    {
label_1:
      int num1 = -793593614;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1428388344)) % 3U)
        {
          case 1:
            flag = false;
            num1 = (int) num2 * 1919513730 ^ -1544362182;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override bool ShouldSerializeRelations() => false;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
label_1:
      int num1 = 1214588700;
      DataSet dataSet;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2109198359)) % 25U)
        {
          case 0:
            num1 = (int) num2 * 657006968 ^ 1966154434;
            continue;
          case 1:
            flag = this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema;
            num1 = (int) num2 * 294015201 ^ 407717053;
            continue;
          case 2:
            this.Namespace = dataSet.Namespace;
            this.Locale = dataSet.Locale;
            num1 = (int) num2 * 1211543752 ^ -351141829;
            continue;
          case 3:
            int num3 = (int) dataSet.ReadXml(reader);
            int num4 = dataSet.Tables["Table"] == null ? 2113696857 : (num4 = 1013297933);
            num1 = num4 ^ (int) num2 * 1876217435;
            continue;
          case 4:
            int num5 = !flag ? 1243391539 : (num5 = 284496721);
            num1 = num5 ^ (int) num2 * 1344460069;
            continue;
          case 5:
            num1 = (int) num2 * 1434285463 ^ 698787522;
            continue;
          case 6:
            num1 = (int) num2 * -121244461 ^ 650535651;
            continue;
          case 7:
            int num6 = (int) this.ReadXml(reader);
            num1 = (int) num2 * 2078212458 ^ 657023744;
            continue;
          case 8:
            base.Tables.Add((DataTable) new AccountsDataSet.TableDataTable(dataSet.Tables["Table"]));
            num1 = (int) num2 * 1131722698 ^ 675528132;
            continue;
          case 9:
            num1 = (int) num2 * -1398753530 ^ -1369678091;
            continue;
          case 10:
            this.Prefix = dataSet.Prefix;
            num1 = (int) num2 * 42128740 ^ 1655478906;
            continue;
          case 11:
            this.CaseSensitive = dataSet.CaseSensitive;
            num1 = (int) num2 * 1944101282 ^ -998366840;
            continue;
          case 12:
            this.EnforceConstraints = dataSet.EnforceConstraints;
            num1 = (int) num2 * 1966969179 ^ -25155653;
            continue;
          case 13:
            this.InitVars();
            num1 = (int) num2 * 1001816282 ^ -1933253300;
            continue;
          case 14:
            goto label_3;
          case 15:
            goto label_1;
          case 16:
            num1 = (int) num2 * -86272385 ^ -308280819;
            continue;
          case 17:
            this.InitVars();
            num1 = (int) num2 * 359625175 ^ 1603516549;
            continue;
          case 18:
            this.DataSetName = dataSet.DataSetName;
            num1 = 885387689;
            continue;
          case 19:
            this.Reset();
            num1 = (int) num2 * -2136650868 ^ -109009393;
            continue;
          case 20:
            this.Merge(dataSet, false, MissingSchemaAction.Add);
            num1 = (int) num2 * 1135268616 ^ -1738202668;
            continue;
          case 21:
            num1 = 1272071503;
            continue;
          case 22:
            num1 = (int) num2 * -843333332 ^ -65731438;
            continue;
          case 23:
            num1 = (int) num2 * -176884538 ^ -14146505;
            continue;
          case 24:
            dataSet = new DataSet();
            num1 = (int) num2 * -327910743 ^ -1428000194;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override XmlSchema GetSchemaSerializable()
    {
label_1:
      int num1 = -887644548;
      MemoryStream memoryStream;
      XmlSchema schemaSerializable;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1254317384)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -457833716 ^ 388518127;
            continue;
          case 2:
            this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
            num1 = (int) num2 * 767271574 ^ 2075335106;
            continue;
          case 4:
            memoryStream = new MemoryStream();
            num1 = (int) num2 * 1134543703 ^ 113067006;
            continue;
          case 5:
            num1 = (int) num2 * 1396436923 ^ 2030018760;
            continue;
          case 6:
            memoryStream.Position = 0L;
            num1 = (int) num2 * -1556196837 ^ 1204681727;
            continue;
          case 7:
            schemaSerializable = XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
            num1 = (int) num2 * 1153100799 ^ -876031928;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return schemaSerializable;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    internal void InitVars()
    {
label_1:
      int num1 = -1310254070;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1609492027)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.InitVars(true);
            num1 = (int) num2 * -1142216222 ^ 1480543280;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    internal void InitVars(bool initTable)
    {
label_1:
      int num1 = -503873826;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1382647806)) % 11U)
        {
          case 0:
            num1 = -787823862;
            continue;
          case 1:
            num1 = (int) num2 * 1878750558 ^ 1073444209;
            continue;
          case 2:
            int num3 = !flag1 ? -785277622 : (num3 = -435581381);
            num1 = num3 ^ (int) num2 * 797793180;
            continue;
          case 3:
            num1 = (int) num2 * 592289045 ^ 1977914932;
            continue;
          case 4:
            goto label_1;
          case 5:
            int num4 = !flag2 ? 1652845183 : (num4 = 345996294);
            num1 = num4 ^ (int) num2 * 2112350139;
            continue;
          case 6:
            this.tableTable = (AccountsDataSet.TableDataTable) base.Tables["Table"];
            flag1 = initTable;
            num1 = (int) num2 * 396125999 ^ -699762794;
            continue;
          case 7:
            num1 = (int) num2 * -1814888786 ^ -775431262;
            continue;
          case 8:
            goto label_3;
          case 9:
            flag2 = this.tableTable != null;
            num1 = (int) num2 * 845954938 ^ 1484928853;
            continue;
          case 10:
            this.tableTable.InitVars();
            num1 = (int) num2 * -667523373 ^ -153453088;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (AccountsDataSet);
label_1:
      int num1 = -1953645688;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -804127495)) % 12U)
        {
          case 0:
            this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            num1 = (int) num2 * 379744837 ^ 163531171;
            continue;
          case 1:
            num1 = (int) num2 * -1931179574 ^ -724091005;
            continue;
          case 2:
            num1 = (int) num2 * -186419158 ^ -1078713274;
            continue;
          case 3:
            num1 = (int) num2 * -1159265093 ^ -867603934;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.Prefix = "";
            num1 = (int) num2 * 1737556207 ^ -717368866;
            continue;
          case 6:
            base.Tables.Add((DataTable) this.tableTable);
            num1 = (int) num2 * -1141639327 ^ -757384657;
            continue;
          case 7:
            this.tableTable = new AccountsDataSet.TableDataTable();
            num1 = (int) num2 * 1392582751 ^ 1152230518;
            continue;
          case 8:
            num1 = (int) num2 * 2072481512 ^ -1794936042;
            continue;
          case 9:
            goto label_1;
          case 10:
            this.EnforceConstraints = true;
            num1 = (int) num2 * 496566867 ^ -1827099730;
            continue;
          case 11:
            this.Namespace = "http://tempuri.org/AccountsDataSet.xsd";
            num1 = (int) num2 * 1807772546 ^ -1083310700;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    private bool ShouldSerializeTable()
    {
label_1:
      int num1 = -421563884;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -53881095)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            flag = false;
            num1 = (int) num2 * 1075903175 ^ -664400316;
            continue;
          case 2:
            num1 = (int) num2 * 2084772525 ^ 368932244;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
label_1:
      int num1 = 1692477425;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 986015196)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 502484894 ^ 1016985112;
            continue;
          case 1:
            int num3 = e.Action == CollectionChangeAction.Remove ? 792794454 : (num3 = 1123385314);
            num1 = num3 ^ (int) num2 * -1786798592;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -646780019 ^ -2142097485;
            continue;
          case 4:
            this.InitVars();
            num1 = (int) num2 * 728035781 ^ -1048997503;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
label_1:
      int num1 = -870536102;
      AccountsDataSet accountsDataSet;
      XmlSchema schemaSerializable;
      XmlSchemaAny xmlSchemaAny;
      XmlSchemaComplexType schemaComplexType;
      XmlSchemaSequence xmlSchemaSequence;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1024410401)) % 8U)
        {
          case 0:
            xmlSchemaAny = new XmlSchemaAny();
            num1 = (int) num2 * 1008327391 ^ 380668867;
            continue;
          case 1:
            schemaSerializable = accountsDataSet.GetSchemaSerializable();
            if (xs.Contains(schemaSerializable.TargetNamespace))
            {
              num1 = (int) num2 * -1553436900 ^ 508816857;
              continue;
            }
            goto label_58;
          case 2:
            num1 = (int) num2 * 1546267560 ^ 962177180;
            continue;
          case 4:
            xmlSchemaAny.Namespace = accountsDataSet.Namespace;
            num1 = (int) num2 * 1726835238 ^ 1542049385;
            continue;
          case 5:
            accountsDataSet = new AccountsDataSet();
            schemaComplexType = new XmlSchemaComplexType();
            xmlSchemaSequence = new XmlSchemaSequence();
            num1 = (int) num2 * -808580177 ^ -1889063924;
            continue;
          case 6:
            xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny);
            schemaComplexType.Particle = (XmlSchemaParticle) xmlSchemaSequence;
            num1 = (int) num2 * -1049715707 ^ -461695408;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      MemoryStream memoryStream1 = new MemoryStream();
      MemoryStream memoryStream2 = new MemoryStream();
      XmlSchemaComplexType typedDataSetSchema;
      try
      {
label_12:
        int num3 = -1235598036;
        while (true)
        {
          uint num4;
          bool flag1;
          IEnumerator enumerator;
          bool flag2;
          int num5;
          switch ((num4 = (uint) (num3 ^ -1024410401)) % 27U)
          {
            case 0:
              num5 = memoryStream1.ReadByte() == memoryStream2.ReadByte() ? 1 : 0;
              break;
            case 1:
              int num6 = memoryStream1.Position != memoryStream1.Length ? 1469413979 : (num6 = 1540855174);
              num3 = num6 ^ (int) num4 * 334596941;
              continue;
            case 2:
              typedDataSetSchema = schemaComplexType;
              num3 = (int) num4 * 878063769 ^ -245166008;
              continue;
            case 3:
              num3 = (int) num4 * 1013574879 ^ 1884638854;
              continue;
            case 4:
              memoryStream1.Position = 0L;
              num3 = (int) num4 * 1729586109 ^ -316351456;
              continue;
            case 5:
              num3 = -590318957;
              continue;
            case 6:
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              num3 = (int) num4 * 1808613150 ^ 71307497;
              continue;
            case 7:
              num3 = (int) num4 * 1531313121 ^ -344529006;
              continue;
            case 8:
              int num7 = flag2 ? -815552237 : (num7 = -1381786412);
              num3 = num7 ^ (int) num4 * -948941035;
              continue;
            case 9:
              if (memoryStream1.Position != memoryStream1.Length)
              {
                num3 = -805165680;
                continue;
              }
              num5 = 0;
              break;
            case 10:
              flag1 = memoryStream1.Length == memoryStream2.Length;
              num3 = (int) num4 * -729820269 ^ -1200750255;
              continue;
            case 11:
              num3 = -1205401517;
              continue;
            case 12:
              int num8 = !flag1 ? 846606227 : (num8 = 2050820486);
              num3 = num8 ^ (int) num4 * 639130237;
              continue;
            case 13:
              num3 = -814823181;
              continue;
            case 14:
              num3 = (int) num4 * -96137952 ^ -1199876008;
              continue;
            case 15:
              enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
              num3 = (int) num4 * -184381409 ^ -1621283954;
              continue;
            case 16:
              num3 = (int) num4 * 1536059758 ^ 1683241241;
              continue;
            case 17:
              goto label_60;
            case 18:
              num3 = -1881635483;
              continue;
            case 19:
              goto label_12;
            case 20:
              memoryStream2.Position = 0L;
              num3 = (int) num4 * -432461297 ^ -483162171;
              continue;
            case 21:
              int num9;
              num3 = num9 = enumerator.MoveNext() ? -793464642 : (num9 = -828046934);
              continue;
            case 22:
              num3 = (int) num4 * 114965462 ^ -434013581;
              continue;
            case 23:
              num3 = (int) num4 * -46665214 ^ -193309372;
              continue;
            case 24:
              num3 = (int) num4 * 484521592 ^ 2079795609;
              continue;
            case 25:
              schemaSerializable.Write((Stream) memoryStream1);
              num3 = (int) num4 * 989014734 ^ -144124639;
              continue;
            default:
              goto label_55;
          }
          flag2 = num5 != 0;
          num3 = -520785649;
        }
      }
      finally
      {
label_42:
        int num10 = -989318806;
        bool flag3;
        bool flag4;
        while (true)
        {
          uint num11;
          switch ((num11 = (uint) (num10 ^ -1024410401)) % 12U)
          {
            case 0:
              int num12 = flag3 ? 1101706939 : (num12 = 425066964);
              num10 = num12 ^ (int) num11 * 720840822;
              continue;
            case 1:
              flag3 = memoryStream1 != null;
              num10 = (int) num11 * -1583772169 ^ -1056601844;
              continue;
            case 2:
              num10 = (int) num11 * 1629974007 ^ -1324832506;
              continue;
            case 3:
              flag4 = memoryStream2 != null;
              num10 = -1357088482;
              continue;
            case 4:
              memoryStream1.Close();
              num10 = (int) num11 * -588334998 ^ -78601904;
              continue;
            case 5:
              num10 = (int) num11 * 617296843 ^ 142162387;
              continue;
            case 6:
              goto label_42;
            case 7:
              num10 = (int) num11 * 1020717672 ^ 818616082;
              continue;
            case 8:
              memoryStream2.Close();
              num10 = (int) num11 * -277690602 ^ -2038082719;
              continue;
            case 9:
              int num13 = flag4 ? 1325851009 : (num13 = 1839582412);
              num10 = num13 ^ (int) num11 * 2122432280;
              continue;
            case 10:
              num10 = (int) num11 * 1911494843 ^ 1741994045;
              continue;
            default:
              goto label_54;
          }
        }
label_54:;
      }
label_55:
label_56:
      int num14 = -868432536;
label_57:
      while (true)
      {
        uint num15;
        switch ((num15 = (uint) (num14 ^ -1024410401)) % 4U)
        {
          case 0:
            typedDataSetSchema = schemaComplexType;
            num14 = (int) num15 * 1670837037 ^ 669719842;
            continue;
          case 2:
            goto label_56;
          case 3:
            goto label_58;
          default:
            goto label_60;
        }
      }
label_58:
      xs.Add(schemaSerializable);
      num14 = -138869353;
      goto label_57;
label_60:
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public delegate void TableRowChangeEventHandler(
      object sender,
      AccountsDataSet.TableRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TableDataTable : TypedTableBase<AccountsDataSet.TableRow>
    {
      private DataColumn columnId;
      private DataColumn columnName;
      private DataColumn columnAccNo;
      private DataColumn columnPIN;
      private DataColumn columnBalance;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public TableDataTable()
      {
        this.TableName = "Table";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal TableDataTable(DataTable table)
      {
label_1:
        int num1 = -1305144483;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1077830632)) % 19U)
          {
            case 0:
              num1 = (int) num2 * 851089402 ^ -412787115;
              continue;
            case 1:
              num1 = (int) num2 * -640384507 ^ -1384250264;
              continue;
            case 2:
              this.MinimumCapacity = table.MinimumCapacity;
              num1 = (int) num2 * -750319835 ^ -2125421920;
              continue;
            case 3:
              int num3 = table.CaseSensitive == table.DataSet.CaseSensitive ? 760897442 : (num3 = 610774896);
              num1 = num3 ^ (int) num2 * -1350653675;
              continue;
            case 4:
              this.Locale = table.Locale;
              num1 = (int) num2 * 2041784630 ^ 1245943418;
              continue;
            case 5:
              num1 = (int) num2 * -942854001 ^ -2032717066;
              continue;
            case 6:
              int num4;
              num1 = num4 = !(table.Namespace != table.DataSet.Namespace) ? -1032407878 : (num4 = -311143204);
              continue;
            case 7:
              num1 = (int) num2 * -1946574347 ^ 813977188;
              continue;
            case 8:
              this.TableName = table.TableName;
              num1 = (int) num2 * 70487317 ^ -901854263;
              continue;
            case 9:
              goto label_3;
            case 10:
              num1 = (int) num2 * 101549755 ^ 1605866809;
              continue;
            case 11:
              num1 = (int) num2 * 1838860853 ^ -453996323;
              continue;
            case 12:
              num1 = (int) num2 * -1758660684 ^ -1327032573;
              continue;
            case 13:
              this.Prefix = table.Prefix;
              num1 = -71360665;
              continue;
            case 14:
              int num5;
              num1 = num5 = !(table.Locale.ToString() != table.DataSet.Locale.ToString()) ? -204570326 : (num5 = -1260632671);
              continue;
            case 15:
              this.CaseSensitive = table.CaseSensitive;
              num1 = (int) num2 * -711861621 ^ -952170506;
              continue;
            case 16:
              goto label_1;
            case 17:
              this.Namespace = table.Namespace;
              num1 = (int) num2 * 401700874 ^ -2033075732;
              continue;
            case 18:
              num1 = (int) num2 * 1309359024 ^ 1984943215;
              continue;
            default:
              goto label_21;
          }
        }
label_3:
        return;
label_21:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected TableDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataColumn IdColumn
      {
        get
        {
label_1:
          int num1 = -961397792;
          DataColumn columnId;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1289588069)) % 4U)
            {
              case 0:
                goto label_1;
              case 2:
                num1 = (int) num2 * -1682271887 ^ -380618716;
                continue;
              case 3:
                columnId = this.columnId;
                num1 = (int) num2 * -1752483051 ^ -346225938;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return columnId;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataColumn NameColumn
      {
        get
        {
label_1:
          int num1 = 840622004;
          DataColumn columnName;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1771689473)) % 4U)
            {
              case 1:
                columnName = this.columnName;
                num1 = (int) num2 * -150141851 ^ 1381648334;
                continue;
              case 2:
                num1 = (int) num2 * 835326309 ^ 507941675;
                continue;
              case 3:
                goto label_1;
              default:
                goto label_5;
            }
          }
label_5:
          return columnName;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn AccNoColumn
      {
        get
        {
          DataColumn columnAccNo = this.columnAccNo;
label_1:
          int num1 = -1663189641;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1735278980)) % 3U)
            {
              case 0:
                goto label_1;
              case 1:
                num1 = (int) num2 * -452101624 ^ -836465653;
                continue;
              default:
                goto label_4;
            }
          }
label_4:
          return columnAccNo;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn PINColumn
      {
        get
        {
label_1:
          int num1 = 1714852062;
          DataColumn columnPin;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 468682484)) % 3U)
            {
              case 1:
                columnPin = this.columnPIN;
                num1 = (int) num2 * -1546219939 ^ 1083336144;
                continue;
              case 2:
                goto label_1;
              default:
                goto label_4;
            }
          }
label_4:
          return columnPin;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn BalanceColumn
      {
        get
        {
          DataColumn columnBalance = this.columnBalance;
label_1:
          int num1 = -1333883445;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -139672280)) % 3U)
            {
              case 1:
                num1 = (int) num2 * -1275218439 ^ -673350917;
                continue;
              case 2:
                goto label_1;
              default:
                goto label_4;
            }
          }
label_4:
          return columnBalance;
        }
      }

      [Browsable(false)]
      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public int Count
      {
        get
        {
label_1:
          int num1 = 490251777;
          int count;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1458011328)) % 4U)
            {
              case 0:
                goto label_1;
              case 1:
                count = this.Rows.Count;
                num1 = (int) num2 * -340691936 ^ 215460874;
                continue;
              case 2:
                num1 = (int) num2 * 270646460 ^ 562542391;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return count;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public AccountsDataSet.TableRow this[int index]
      {
        get
        {
          AccountsDataSet.TableRow row = (AccountsDataSet.TableRow) this.Rows[index];
label_1:
          int num1 = 1494202083;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1028211512)) % 3U)
            {
              case 0:
                goto label_1;
              case 1:
                num1 = (int) num2 * -1253266795 ^ 1954330827;
                continue;
              default:
                goto label_4;
            }
          }
label_4:
          return row;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowChanging
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowChanging;
label_1:
          int num1 = -1850415629;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -2008092056)) % 5U)
            {
              case 0:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanging, changeEventHandler2, comparand);
                num1 = (int) num2 * 1683086327 ^ -1771299500;
                continue;
              case 1:
                int num3 = changeEventHandler1 == comparand ? -324893863 : (num3 = -932570469);
                num1 = num3 ^ (int) num2 * -1766652837;
                continue;
              case 2:
                goto label_3;
              case 3:
                comparand = changeEventHandler1;
                changeEventHandler2 = comparand + value;
                num1 = -1721729036;
                continue;
              case 4:
                goto label_1;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowChanging;
label_1:
          int num1 = 54394050;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1677392531)) % 5U)
            {
              case 0:
                goto label_3;
              case 1:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanging, changeEventHandler2, comparand);
                num1 = (int) num2 * 714014809 ^ -406693760;
                continue;
              case 2:
                comparand = changeEventHandler1;
                changeEventHandler2 = comparand - value;
                num1 = 1090574751;
                continue;
              case 3:
                int num3 = changeEventHandler1 != comparand ? -1343870920 : (num3 = -707659048);
                num1 = num3 ^ (int) num2 * -414016890;
                continue;
              case 4:
                goto label_1;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowChanged
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowChanged;
label_1:
          int num1 = -2112275627;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -694389189)) % 4U)
            {
              case 0:
                goto label_1;
              case 1:
                goto label_3;
              case 2:
                comparand = changeEventHandler1;
                changeEventHandler2 = comparand + value;
                num1 = -1818395936;
                continue;
              case 3:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanged, changeEventHandler2, comparand);
                int num3 = changeEventHandler1 == comparand ? 1720995076 : (num3 = 1135708455);
                num1 = num3 ^ (int) num2 * 722897142;
                continue;
              default:
                goto label_6;
            }
          }
label_3:
          return;
label_6:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowChanged;
label_1:
          int num1 = -74605115;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1280139001)) % 5U)
            {
              case 0:
                changeEventHandler2 = comparand - value;
                num1 = (int) num2 * 427180547 ^ 1106730785;
                continue;
              case 1:
                goto label_3;
              case 2:
                goto label_1;
              case 3:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanged, changeEventHandler2, comparand);
                int num3 = changeEventHandler1 != comparand ? -132582551 : (num3 = -1783183678);
                num1 = num3 ^ (int) num2 * 1501349606;
                continue;
              case 4:
                comparand = changeEventHandler1;
                num1 = -1249409285;
                continue;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowDeleting
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler = this.TableRowDeleting;
label_1:
          int num1 = 578787940;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1671103741)) % 3U)
            {
              case 0:
                goto label_3;
              case 1:
                AccountsDataSet.TableRowChangeEventHandler comparand = changeEventHandler;
                changeEventHandler = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleting, comparand + value, comparand);
                int num3;
                num1 = num3 = changeEventHandler == comparand ? 148811872 : (num3 = 578787940);
                continue;
              case 2:
                goto label_1;
              default:
                goto label_5;
            }
          }
label_3:
          return;
label_5:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowDeleting;
label_1:
          int num1 = -2074847568;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1086245754)) % 5U)
            {
              case 0:
                goto label_3;
              case 1:
                int num3 = changeEventHandler1 == comparand ? -455795850 : (num3 = -137800089);
                num1 = num3 ^ (int) num2 * -469731513;
                continue;
              case 2:
                comparand = changeEventHandler1;
                changeEventHandler2 = comparand - value;
                num1 = -1270817192;
                continue;
              case 3:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleting, changeEventHandler2, comparand);
                num1 = (int) num2 * 1024160013 ^ -80163279;
                continue;
              case 4:
                goto label_1;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowDeleted
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowDeleted;
label_1:
          int num1 = 80083158;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 84622681)) % 6U)
            {
              case 0:
                goto label_1;
              case 1:
                comparand = changeEventHandler1;
                num1 = 287278609;
                continue;
              case 2:
                changeEventHandler2 = comparand + value;
                num1 = (int) num2 * 1862366636 ^ -598029644;
                continue;
              case 3:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleted, changeEventHandler2, comparand);
                num1 = (int) num2 * 766772170 ^ 1811278194;
                continue;
              case 4:
                goto label_3;
              case 5:
                int num3 = changeEventHandler1 == comparand ? 1685859655 : (num3 = 1130416820);
                num1 = num3 ^ (int) num2 * 2132366098;
                continue;
              default:
                goto label_8;
            }
          }
label_3:
          return;
label_8:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowDeleted;
label_1:
          int num1 = -1657360357;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1014929300)) % 5U)
            {
              case 0:
                goto label_3;
              case 1:
                changeEventHandler2 = comparand - value;
                num1 = (int) num2 * 842354648 ^ -650558250;
                continue;
              case 2:
                comparand = changeEventHandler1;
                num1 = -679170752;
                continue;
              case 3:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleted, changeEventHandler2, comparand);
                int num3 = changeEventHandler1 != comparand ? -245715691 : (num3 = -1910803105);
                num1 = num3 ^ (int) num2 * -95515997;
                continue;
              case 4:
                goto label_1;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void AddTableRow(AccountsDataSet.TableRow row)
      {
label_1:
        int num1 = -958909382;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1985969716)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Rows.Add((DataRow) row);
              num1 = (int) num2 * -1297919375 ^ 527578454;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public AccountsDataSet.TableRow AddTableRow(
        string Name,
        Decimal AccNo,
        Decimal PIN,
        Decimal Balance)
      {
        AccountsDataSet.TableRow row = (AccountsDataSet.TableRow) this.NewRow();
label_1:
        int num1 = 1610755068;
        object[] objArray;
        AccountsDataSet.TableRow tableRow;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2014843402)) % 8U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -2077512856 ^ -1592056136;
              continue;
            case 2:
              this.Rows.Add((DataRow) row);
              num1 = (int) num2 * 972163371 ^ -274158705;
              continue;
            case 3:
              tableRow = row;
              num1 = (int) num2 * 344198820 ^ -2003585781;
              continue;
            case 5:
              num1 = (int) num2 * -812478624 ^ -171648546;
              continue;
            case 6:
              objArray = new object[5]
              {
                null,
                (object) Name,
                (object) AccNo,
                (object) PIN,
                (object) Balance
              };
              num1 = (int) num2 * -1758649193 ^ 884159287;
              continue;
            case 7:
              row.ItemArray = objArray;
              num1 = (int) num2 * -1690134293 ^ 1699894094;
              continue;
            default:
              goto label_9;
          }
        }
label_9:
        return tableRow;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public AccountsDataSet.TableRow FindById(int Id)
      {
        AccountsDataSet.TableRow byId = (AccountsDataSet.TableRow) this.Rows.Find(new object[1]
        {
          (object) Id
        });
label_1:
        int num1 = 2013104780;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 654755976)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 1198065243 ^ -1060982271;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return byId;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public override DataTable Clone()
      {
        AccountsDataSet.TableDataTable tableDataTable = (AccountsDataSet.TableDataTable) base.Clone();
label_1:
        int num1 = 1119468539;
        DataTable dataTable;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1722123539)) % 3U)
          {
            case 1:
              tableDataTable.InitVars();
              dataTable = (DataTable) tableDataTable;
              num1 = (int) num2 * 752822110 ^ 2018352149;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return dataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override DataTable CreateInstance()
      {
label_1:
        int num1 = 1568113374;
        DataTable instance;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 513119500)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1394595271 ^ -1405924086;
              continue;
            case 2:
              instance = (DataTable) new AccountsDataSet.TableDataTable();
              num1 = (int) num2 * 1566020417 ^ 1541622859;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return instance;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnId = this.Columns["Id"];
        this.columnName = this.Columns["Name"];
label_1:
        int num1 = -1910750977;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1011575211)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.columnAccNo = this.Columns["AccNo"];
              this.columnPIN = this.Columns["PIN"];
              this.columnBalance = this.Columns["Balance"];
              num1 = (int) num2 * 703280767 ^ -75349887;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnId = new DataColumn("Id", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnId);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
label_1:
        int num1 = 1619151100;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1575484248)) % 27U)
          {
            case 0:
              this.Columns.Add(this.columnPIN);
              num1 = (int) num2 * 752192911 ^ -1738590420;
              continue;
            case 1:
              this.Columns.Add(this.columnName);
              num1 = (int) num2 * 1449828075 ^ -645032581;
              continue;
            case 2:
              this.columnId.Unique = true;
              this.columnName.MaxLength = 50;
              this.ExtendedProperties.Add((object) "Generator_RowClassName", (object) "TableRow");
              num1 = (int) num2 * 1253572326 ^ 325614963;
              continue;
            case 3:
              this.ExtendedProperties.Add((object) "Generator_RowEvArgName", (object) "TableRowChangeEvent");
              this.ExtendedProperties.Add((object) "Generator_RowEvHandlerName", (object) "TableRowChangeEventHandler");
              num1 = (int) num2 * 1546996845 ^ -201537010;
              continue;
            case 4:
              this.columnId.AllowDBNull = false;
              num1 = (int) num2 * -114891454 ^ 1638564031;
              continue;
            case 5:
              num1 = (int) num2 * 149379648 ^ -1723930696;
              continue;
            case 6:
              num1 = (int) num2 * 1594482399 ^ 734937135;
              continue;
            case 7:
              this.columnId.AutoIncrementStep = -1L;
              num1 = (int) num2 * -63476093 ^ -1234697915;
              continue;
            case 8:
              this.columnAccNo = new DataColumn("AccNo", typeof (Decimal), (string) null, MappingType.Element);
              num1 = (int) num2 * 856404563 ^ -967154071;
              continue;
            case 9:
              this.ExtendedProperties.Add((object) "Generator_UserTableName", (object) "Table");
              num1 = (int) num2 * -102426452 ^ -2018754546;
              continue;
            case 10:
              this.columnBalance = new DataColumn("Balance", typeof (Decimal), (string) null, MappingType.Element);
              num1 = (int) num2 * -860953489 ^ -911645085;
              continue;
            case 11:
              this.columnId.AutoIncrementSeed = -1L;
              num1 = (int) num2 * 1908339867 ^ 1614951778;
              continue;
            case 12:
              this.ExtendedProperties.Add((object) "Generator_TablePropName", (object) "Table");
              num1 = (int) num2 * -1586444780 ^ 1982696566;
              continue;
            case 13:
              this.ExtendedProperties.Add((object) "Generator_TableVarName", (object) "tableTable");
              num1 = (int) num2 * -2023302734 ^ -682770229;
              continue;
            case 14:
              num1 = (int) num2 * 1289727350 ^ -17520211;
              continue;
            case 15:
              this.columnPIN = new DataColumn("PIN", typeof (Decimal), (string) null, MappingType.Element);
              num1 = (int) num2 * -143715943 ^ 1045558583;
              continue;
            case 16:
              num1 = (int) num2 * -160367073 ^ 644657854;
              continue;
            case 17:
              this.Columns.Add(this.columnBalance);
              num1 = (int) num2 * -227773785 ^ -1551800503;
              continue;
            case 18:
              num1 = (int) num2 * -1964119906 ^ -1148381313;
              continue;
            case 19:
              goto label_3;
            case 20:
              this.columnId.ReadOnly = true;
              num1 = (int) num2 * 731518097 ^ 550484869;
              continue;
            case 21:
              goto label_1;
            case 22:
              num1 = (int) num2 * 91822861 ^ -1776867156;
              continue;
            case 23:
              this.Columns.Add(this.columnAccNo);
              num1 = (int) num2 * -1405042376 ^ 397944823;
              continue;
            case 24:
              this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
              {
                this.columnId
              }, true));
              this.columnId.AutoIncrement = true;
              num1 = (int) num2 * 890869200 ^ 1042524289;
              continue;
            case 25:
              this.ExtendedProperties.Add((object) "Generator_TableClassName", (object) nameof (TableDataTable));
              num1 = (int) num2 * 693754638 ^ 1785110490;
              continue;
            case 26:
              num1 = (int) num2 * 1229267905 ^ -1036334243;
              continue;
            default:
              goto label_29;
          }
        }
label_3:
        return;
label_29:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public AccountsDataSet.TableRow NewTableRow()
      {
label_1:
        int num1 = -779140428;
        AccountsDataSet.TableRow tableRow;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1803685329)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -334136067 ^ 553160554;
              continue;
            case 2:
              goto label_1;
            case 3:
              tableRow = (AccountsDataSet.TableRow) this.NewRow();
              num1 = (int) num2 * 451333918 ^ 303391973;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return tableRow;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new AccountsDataSet.TableRow(builder);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override Type GetRowType()
      {
        Type rowType = typeof (AccountsDataSet.TableRow);
label_1:
        int num1 = -906994522;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -50823011)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -178236436 ^ 378985649;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return rowType;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = -1226245180;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -319372936)) % 7U)
          {
            case 0:
              flag = this.TableRowChanged != null;
              num1 = (int) num2 * 1560919419 ^ 1670029870;
              continue;
            case 1:
              int num3 = flag ? -380422750 : (num3 = -1838535919);
              num1 = num3 ^ (int) num2 * -2025802901;
              continue;
            case 2:
              goto label_3;
            case 3:
              base.OnRowChanged(e);
              num1 = (int) num2 * 1746175192 ^ 212474872;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -785519261 ^ 1071106682;
              continue;
            case 6:
              this.TableRowChanged((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * 71263683 ^ -1093487533;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = -1793808756;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2928803)) % 8U)
          {
            case 0:
              goto label_1;
            case 1:
              base.OnRowChanging(e);
              num1 = (int) num2 * 2101603337 ^ -1698889392;
              continue;
            case 2:
              int num3 = !flag ? 356708289 : (num3 = 1436040100);
              num1 = num3 ^ (int) num2 * 2052498749;
              continue;
            case 3:
              this.TableRowChanging((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * 887319917 ^ -2044440177;
              continue;
            case 4:
              num1 = (int) num2 * 984606750 ^ 1642508170;
              continue;
            case 5:
              num1 = (int) num2 * 544511648 ^ 376769723;
              continue;
            case 6:
              goto label_3;
            case 7:
              flag = this.TableRowChanging != null;
              num1 = (int) num2 * 1282171381 ^ -628273564;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = -1972600318;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1356626261)) % 9U)
          {
            case 0:
              num1 = (int) num2 * -1439256802 ^ -347126183;
              continue;
            case 1:
              base.OnRowDeleted(e);
              num1 = (int) num2 * 430348415 ^ 1917072284;
              continue;
            case 2:
              num1 = (int) num2 * 806377850 ^ -136455577;
              continue;
            case 3:
              this.TableRowDeleted((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * -1137606553 ^ -1437685667;
              continue;
            case 4:
              goto label_3;
            case 5:
              int num3 = this.TableRowDeleted != null ? 753288113 : (num3 = 712176490);
              num1 = num3 ^ (int) num2 * -1524331815;
              continue;
            case 6:
              num1 = (int) num2 * -1014041621 ^ 223376585;
              continue;
            case 7:
              goto label_1;
            case 8:
              num1 = (int) num2 * -184577793 ^ 2103399772;
              continue;
            default:
              goto label_11;
          }
        }
label_3:
        return;
label_11:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = -1697548116;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -776943409)) % 6U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * -637811508 ^ -1057588477;
              continue;
            case 2:
              int num3 = this.TableRowDeleting != null ? -558589689 : (num3 = -1892165613);
              num1 = num3 ^ (int) num2 * -1076920614;
              continue;
            case 3:
              base.OnRowDeleting(e);
              num1 = (int) num2 * -1400292591 ^ -1832966374;
              continue;
            case 4:
              this.TableRowDeleting((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * -1078706434 ^ -590457402;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void RemoveTableRow(AccountsDataSet.TableRow row) => this.Rows.Remove((DataRow) row);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
label_1:
        int num1 = 45110830;
        XmlSchemaAny xmlSchemaAny1;
        XmlSchemaComplexType schemaComplexType;
        XmlSchemaAttribute xmlSchemaAttribute1;
        AccountsDataSet accountsDataSet;
        XmlSchema schemaSerializable;
        bool flag1;
        XmlSchemaAny xmlSchemaAny2;
        XmlSchemaSequence xmlSchemaSequence;
        XmlSchemaAttribute xmlSchemaAttribute2;
        MemoryStream memoryStream1;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 919548103)) % 29U)
          {
            case 1:
              xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
              num1 = (int) num2 * 670532865 ^ -604350008;
              continue;
            case 2:
              xmlSchemaAny1.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
              num1 = (int) num2 * 735355177 ^ 818680660;
              continue;
            case 3:
              xmlSchemaAttribute2.FixedValue = nameof (TableDataTable);
              num1 = (int) num2 * -1331785800 ^ -1976668423;
              continue;
            case 4:
              schemaSerializable = accountsDataSet.GetSchemaSerializable();
              flag1 = xs.Contains(schemaSerializable.TargetNamespace);
              num1 = (int) num2 * 1207597790 ^ -2056515090;
              continue;
            case 5:
              xmlSchemaAttribute2 = new XmlSchemaAttribute();
              xmlSchemaAttribute2.Name = "tableTypeName";
              num1 = (int) num2 * -1048511019 ^ 897673147;
              continue;
            case 6:
              xmlSchemaAny2.Namespace = "http://www.w3.org/2001/XMLSchema";
              num1 = (int) num2 * 1063312475 ^ 1897090272;
              continue;
            case 7:
              schemaComplexType.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute2);
              schemaComplexType.Particle = (XmlSchemaParticle) xmlSchemaSequence;
              num1 = (int) num2 * 278910985 ^ -913885403;
              continue;
            case 8:
              num1 = (int) num2 * 1746465485 ^ 1569963561;
              continue;
            case 9:
              num1 = (int) num2 * 1415649499 ^ -1806140999;
              continue;
            case 10:
              xmlSchemaAttribute1 = new XmlSchemaAttribute();
              num1 = (int) num2 * -1221456953 ^ -521064144;
              continue;
            case 11:
              xmlSchemaAny1 = new XmlSchemaAny();
              num1 = (int) num2 * 956929159 ^ -1652410489;
              continue;
            case 12:
              xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
              num1 = (int) num2 * 2011744486 ^ -417420589;
              continue;
            case 13:
              if (flag1)
              {
                num1 = (int) num2 * 1969065544 ^ -1013751604;
                continue;
              }
              goto label_79;
            case 14:
              num1 = (int) num2 * 662864075 ^ -522260260;
              continue;
            case 15:
              xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
              num1 = (int) num2 * 967551953 ^ 132657228;
              continue;
            case 16:
              xmlSchemaAny2.MaxOccurs = Decimal.MaxValue;
              num1 = (int) num2 * 913696369 ^ -417889141;
              continue;
            case 17:
              goto label_1;
            case 18:
              xmlSchemaAny1.MinOccurs = 1M;
              xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
              num1 = (int) num2 * -1863383540 ^ 1717121755;
              continue;
            case 19:
              num1 = (int) num2 * 198323120 ^ -581883808;
              continue;
            case 20:
              num1 = (int) num2 * 1391966387 ^ 125360261;
              continue;
            case 21:
              memoryStream1 = new MemoryStream();
              num1 = (int) num2 * -1494558762 ^ -601922440;
              continue;
            case 22:
              num1 = (int) num2 * 301076431 ^ 156333427;
              continue;
            case 23:
              schemaComplexType = new XmlSchemaComplexType();
              xmlSchemaSequence = new XmlSchemaSequence();
              accountsDataSet = new AccountsDataSet();
              num1 = (int) num2 * 1416495155 ^ 316880916;
              continue;
            case 24:
              xmlSchemaAny2.MinOccurs = 0M;
              num1 = (int) num2 * -329873684 ^ -1505115714;
              continue;
            case 25:
              xmlSchemaAttribute1.FixedValue = accountsDataSet.Namespace;
              num1 = (int) num2 * -1930652360 ^ -310365593;
              continue;
            case 26:
              xmlSchemaAny2 = new XmlSchemaAny();
              num1 = (int) num2 * -802248066 ^ 1274802097;
              continue;
            case 27:
              xmlSchemaAttribute1.Name = "namespace";
              num1 = (int) num2 * 953608416 ^ -1624035941;
              continue;
            case 28:
              schemaComplexType.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute1);
              num1 = (int) num2 * 2106983527 ^ -169431681;
              continue;
            default:
              goto label_31;
          }
        }
label_31:
        MemoryStream memoryStream2 = new MemoryStream();
        XmlSchemaComplexType typedTableSchema;
        try
        {
          XmlSchema xmlSchema = (XmlSchema) null;
label_33:
          int num3 = 990002469;
          while (true)
          {
            uint num4;
            IEnumerator enumerator;
            bool flag2;
            bool flag3;
            bool flag4;
            bool flag5;
            int num5;
            switch ((num4 = (uint) (num3 ^ 919548103)) % 28U)
            {
              case 0:
                if (memoryStream1.Position == memoryStream1.Length)
                {
                  num5 = 0;
                  break;
                }
                num3 = 12166698;
                continue;
              case 1:
                num3 = 1809067372;
                continue;
              case 2:
                int num6 = !flag5 ? -401896998 : (num6 = -1250143641);
                num3 = num6 ^ (int) num4 * -1288195719;
                continue;
              case 3:
                num3 = (int) num4 * -983667225 ^ 780829798;
                continue;
              case 4:
                num3 = (int) num4 * -2042002890 ^ -324850469;
                continue;
              case 5:
                int num7 = !flag2 ? 573204089 : (num7 = 1098667470);
                num3 = num7 ^ (int) num4 * -898506533;
                continue;
              case 6:
                num3 = (int) num4 * -933814840 ^ 558549867;
                continue;
              case 7:
                num3 = 946772699;
                continue;
              case 8:
                flag5 = enumerator.MoveNext();
                num3 = 1038979141;
                continue;
              case 9:
                goto label_33;
              case 10:
                num3 = 1775595020;
                continue;
              case 11:
                num3 = (int) num4 * -1240216115 ^ 228872772;
                continue;
              case 12:
                typedTableSchema = schemaComplexType;
                num3 = (int) num4 * -534109294 ^ -911777530;
                continue;
              case 13:
                goto label_80;
              case 14:
                memoryStream2.SetLength(0L);
                num3 = (int) num4 * -1736613604 ^ -1137092204;
                continue;
              case 15:
                xmlSchema.Write((Stream) memoryStream2);
                num3 = (int) num4 * -1317577155 ^ 1112790883;
                continue;
              case 16:
                int num8 = flag4 ? 1010009324 : (num8 = 1837187452);
                num3 = num8 ^ (int) num4 * -1934093359;
                continue;
              case 17:
                flag3 = memoryStream1.Position == memoryStream1.Length;
                num3 = (int) num4 * 2100603916 ^ -975316686;
                continue;
              case 18:
                xmlSchema = (XmlSchema) enumerator.Current;
                num3 = 1974990069;
                continue;
              case 19:
                num3 = (int) num4 * 501502310 ^ -920754239;
                continue;
              case 20:
                flag4 = memoryStream1.Length == memoryStream2.Length;
                num3 = (int) num4 * -865210997 ^ -267653309;
                continue;
              case 21:
                num5 = memoryStream1.ReadByte() == memoryStream2.ReadByte() ? 1 : 0;
                break;
              case 22:
                schemaSerializable.Write((Stream) memoryStream1);
                enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                num3 = (int) num4 * 1917610346 ^ -955857995;
                continue;
              case 23:
                num3 = (int) num4 * 1159480921 ^ -861917160;
                continue;
              case 25:
                int num9 = !flag3 ? -649976313 : (num9 = -1228655811);
                num3 = num9 ^ (int) num4 * -526548103;
                continue;
              case 26:
                memoryStream2.Position = 0L;
                num3 = (int) num4 * 1779845649 ^ -1416843399;
                continue;
              case 27:
                memoryStream1.Position = 0L;
                num3 = (int) num4 * -58857570 ^ -1285019577;
                continue;
              default:
                goto label_74;
            }
            flag2 = num5 != 0;
            num3 = 1076626586;
          }
        }
        finally
        {
          bool flag6 = memoryStream1 != null;
label_64:
          int num10 = 2117466539;
          bool flag7;
          while (true)
          {
            uint num11;
            switch ((num11 = (uint) (num10 ^ 919548103)) % 9U)
            {
              case 1:
                num10 = (int) num11 * 2041657435 ^ 319738680;
                continue;
              case 2:
                num10 = (int) num11 * -288575884 ^ 1481520071;
                continue;
              case 3:
                int num12 = !flag7 ? -1000171117 : (num12 = -1305709210);
                num10 = num12 ^ (int) num11 * 586401940;
                continue;
              case 4:
                goto label_64;
              case 5:
                memoryStream2.Close();
                num10 = (int) num11 * -116951346 ^ -1267500706;
                continue;
              case 6:
                memoryStream1.Close();
                num10 = (int) num11 * 34697311 ^ -674170125;
                continue;
              case 7:
                int num13 = !flag6 ? -642164757 : (num13 = -672377945);
                num10 = num13 ^ (int) num11 * -1349319685;
                continue;
              case 8:
                flag7 = memoryStream2 != null;
                num10 = 378085391;
                continue;
              default:
                goto label_73;
            }
          }
label_73:;
        }
label_74:
label_75:
        int num14 = 1080982454;
label_76:
        while (true)
        {
          uint num15;
          switch ((num15 = (uint) (num14 ^ 919548103)) % 5U)
          {
            case 0:
              goto label_75;
            case 2:
              goto label_79;
            case 3:
              num14 = (int) num15 * -1284861267 ^ 1004002506;
              continue;
            case 4:
              typedTableSchema = schemaComplexType;
              num14 = (int) num15 * 1551814747 ^ -1664872415;
              continue;
            default:
              goto label_80;
          }
        }
label_79:
        xs.Add(schemaSerializable);
        num14 = 872600209;
        goto label_76;
label_80:
        return typedTableSchema;
      }
    }

    public class TableRow : DataRow
    {
      private AccountsDataSet.TableDataTable tableTable;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      internal TableRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTable = (AccountsDataSet.TableDataTable) this.Table;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public int Id
      {
        get => (int) this[this.tableTable.IdColumn];
        set
        {
          this[this.tableTable.IdColumn] = (object) value;
label_1:
          int num1 = -547716542;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1467692373)) % 3U)
            {
              case 0:
                goto label_3;
              case 1:
                num1 = (int) num2 * 1616803074 ^ 400379867;
                continue;
              case 2:
                goto label_1;
              default:
                goto label_5;
            }
          }
label_3:
          return;
label_5:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public string Name
      {
        get
        {
          string name;
          try
          {
label_2:
            int num1 = -418566125;
            while (true)
            {
              uint num2;
              switch ((num2 = (uint) (num1 ^ -762350606)) % 3U)
              {
                case 0:
                  goto label_2;
                case 1:
                  name = (string) this[this.tableTable.NameColumn];
                  num1 = (int) num2 * 891420262 ^ 1185821470;
                  continue;
                default:
                  goto label_6;
              }
            }
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'Table' is DBNull.", (Exception) ex);
          }
label_6:
          return name;
        }
        set
        {
label_1:
          int num1 = 440030639;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1627959502)) % 4U)
            {
              case 0:
                goto label_3;
              case 1:
                this[this.tableTable.NameColumn] = (object) value;
                num1 = (int) num2 * 18065866 ^ 1446259794;
                continue;
              case 2:
                num1 = (int) num2 * -1673836555 ^ 248782252;
                continue;
              case 3:
                goto label_1;
              default:
                goto label_6;
            }
          }
label_3:
          return;
label_6:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public Decimal AccNo
      {
        get
        {
          Decimal accNo;
          try
          {
label_2:
            int num1 = 1534779659;
            while (true)
            {
              uint num2;
              switch ((num2 = (uint) (num1 ^ 338395460)) % 3U)
              {
                case 0:
                  goto label_2;
                case 2:
                  accNo = (Decimal) this[this.tableTable.AccNoColumn];
                  num1 = (int) num2 * 1380086617 ^ 732221594;
                  continue;
                default:
                  goto label_10;
              }
            }
          }
          catch (InvalidCastException ex)
          {
label_6:
            int num3 = 159031349;
            while (true)
            {
              uint num4;
              switch ((num4 = (uint) (num3 ^ 338395460)) % 3U)
              {
                case 1:
                  num3 = (int) num4 * -389603406 ^ -874837659;
                  continue;
                case 2:
                  goto label_6;
                default:
                  goto label_9;
              }
            }
label_9:
            throw new StrongTypingException("The value for column 'AccNo' in table 'Table' is DBNull.", (Exception) ex);
          }
label_10:
          return accNo;
        }
        set
        {
label_1:
          int num1 = 958494436;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1674036295)) % 4U)
            {
              case 0:
                num1 = (int) num2 * 1587616496 ^ -1946361626;
                continue;
              case 1:
                goto label_3;
              case 2:
                goto label_1;
              case 3:
                this[this.tableTable.AccNoColumn] = (object) value;
                num1 = (int) num2 * -1374752305 ^ 411252342;
                continue;
              default:
                goto label_6;
            }
          }
label_3:
          return;
label_6:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public Decimal PIN
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableTable.PINColumn];
          }
          catch (InvalidCastException ex)
          {
label_3:
            int num1 = 1183704830;
            while (true)
            {
              uint num2;
              switch ((num2 = (uint) (num1 ^ 476917269)) % 3U)
              {
                case 0:
                  goto label_3;
                case 2:
                  num1 = (int) num2 * 894624839 ^ 2111154766;
                  continue;
                default:
                  goto label_6;
              }
            }
label_6:
            throw new StrongTypingException("The value for column 'PIN' in table 'Table' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTable.PINColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public Decimal Balance
      {
        get
        {
          Decimal balance;
          try
          {
label_2:
            int num1 = -1941321271;
            while (true)
            {
              uint num2;
              switch ((num2 = (uint) (num1 ^ -483782204)) % 3U)
              {
                case 1:
                  balance = (Decimal) this[this.tableTable.BalanceColumn];
                  num1 = (int) num2 * 520664620 ^ -692815031;
                  continue;
                case 2:
                  goto label_2;
                default:
                  goto label_6;
              }
            }
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Balance' in table 'Table' is DBNull.", (Exception) ex);
          }
label_6:
          return balance;
        }
        set => this[this.tableTable.BalanceColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public bool IsNameNull()
      {
label_1:
        int num1 = 1243026174;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 218011371)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -397327188 ^ -714245623;
              continue;
            case 1:
              flag = this.IsNull(this.tableTable.NameColumn);
              num1 = (int) num2 * -1793529580 ^ -449167929;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return flag;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void SetNameNull() => this[this.tableTable.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public bool IsAccNoNull()
      {
label_1:
        int num1 = 1582141172;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 252577025)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -684154748 ^ 370479326;
              continue;
            case 1:
              flag = this.IsNull(this.tableTable.AccNoColumn);
              num1 = (int) num2 * -45464457 ^ 962244894;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return flag;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetAccNoNull()
      {
label_1:
        int num1 = 840954830;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1604738122)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this[this.tableTable.AccNoColumn] = Convert.DBNull;
              num1 = (int) num2 * 265593774 ^ -750461140;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public bool IsPINNull() => this.IsNull(this.tableTable.PINColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetPINNull() => this[this.tableTable.PINColumn] = Convert.DBNull;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public bool IsBalanceNull()
      {
        bool flag = this.IsNull(this.tableTable.BalanceColumn);
label_1:
        int num1 = 1920004010;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1973539813)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 315109370 ^ -2098144778;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return flag;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetBalanceNull()
      {
label_1:
        int num1 = -106614047;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -544009403)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this[this.tableTable.BalanceColumn] = Convert.DBNull;
              num1 = (int) num2 * -1322210952 ^ -847124091;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public class TableRowChangeEvent : EventArgs
    {
      private AccountsDataSet.TableRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public TableRowChangeEvent(AccountsDataSet.TableRow row, DataRowAction action)
      {
label_1:
        int num1 = 1313189481;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1667971915)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              this.eventAction = action;
              num1 = (int) num2 * 1996658785 ^ -270230586;
              continue;
            case 2:
              goto label_3;
            case 3:
              num1 = (int) num2 * 500596733 ^ 1325905201;
              continue;
            case 4:
              num1 = (int) num2 * -944376445 ^ -1326070242;
              continue;
            case 5:
              this.eventRow = row;
              num1 = (int) num2 * -210329071 ^ 863484585;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public AccountsDataSet.TableRow Row
      {
        get
        {
label_1:
          int num1 = -219775426;
          AccountsDataSet.TableRow eventRow;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1964067295)) % 4U)
            {
              case 0:
                goto label_1;
              case 1:
                num1 = (int) num2 * -225388726 ^ -876635091;
                continue;
              case 3:
                eventRow = this.eventRow;
                num1 = (int) num2 * 1734595393 ^ 1444419107;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return eventRow;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}
