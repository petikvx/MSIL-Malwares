// Decompiled with JetBrains decompiler
// Type: SmartAssembly.StringsEncoding.Strings
// Assembly: LCDStudio, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BEF96371-2C95-4469-8D1E-06EE21BF714F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-fbe952a94ea2bb4b96d16021f64e0b8955c6b05ca6fa48a562e4e2135e1643f7.exe

using System.Collections;
using System.IO;
using System.Reflection;

namespace SmartAssembly.StringsEncoding
{
  public class Strings
  {
    private static readonly string MustUseCache = "0";
    private static readonly string OffsetValue = "4";
    private static readonly byte[] bytes;
    private static readonly Hashtable hashtable;
    private static readonly bool cacheStrings;
    private static readonly int offset;

    public static string Get(int stringID)
    {
      int num1 = stringID;
      int num2;
      int num3;
      string str1;
      int num4;
      while (true)
      {
        int offset = Strings.offset;
        int num5 = num1 - offset;
        if (true)
          goto label_19;
label_2:
        if (Strings.cacheStrings)
        {
          str1 = (string) \u001F.\u007E\u0082((object) Strings.hashtable, (object) stringID);
          switch (str1)
          {
            case null:
              break;
            default:
              goto label_20;
          }
        }
        int num6 = 0;
        if (num6 == 0)
          goto label_21;
label_9:
        if ((num6 & 64) != 0)
        {
          int num7 = (num3 & 31) << 24;
          byte[] bytes1 = Strings.bytes;
          int index1 = num2;
          int num8 = index1 + 1;
          int num9 = (int) bytes1[index1] << 16;
          int num10 = num7 + num9;
          byte[] bytes2 = Strings.bytes;
          int index2 = num8;
          int num11 = index2 + 1;
          int num12 = (int) bytes2[index2] << 8;
          int num13 = num10 + num12;
          byte[] bytes3 = Strings.bytes;
          int index3 = num11;
          num2 = index3 + 1;
          int num14 = (int) bytes3[index3];
          num4 = num13 + num14;
          if (false)
          {
            num1 = num4;
            continue;
          }
          goto label_12;
        }
        else
          goto label_10;
label_21:
        num2 = stringID;
        if (true)
        {
          num3 = (int) Strings.bytes[num2++];
          if ((num3 & 128) == 0)
            break;
        }
        num6 = num3;
        goto label_9;
label_19:
        stringID = num5;
        goto label_2;
      }
      int num15 = num3;
      if (num15 == 0)
        return string.Empty;
      goto label_13;
label_10:
      num15 = ((num3 & 63) << 8) + (int) Strings.bytes[num2++];
      goto label_13;
label_12:
      num15 = num4;
label_13:
      try
      {
        byte[] numArray = \u0081.\u0086(\u0080.\u007E\u0084((object) \u007F.\u0083(), Strings.bytes, num2, num15));
        string str2 = \u0082.\u0087(\u0080.\u007E\u0084((object) \u007F.\u0083(), numArray, 0, numArray.Length));
        if (Strings.cacheStrings)
        {
          try
          {
            \u0083.\u007E\u0088((object) Strings.hashtable, (object) stringID, (object) str2);
          }
          catch
          {
          }
        }
        return str2;
      }
      catch
      {
        return (string) null;
      }
label_20:
      return str1;
    }

    static Strings()
    {
      int num1;
      if (true)
      {
        Strings.bytes = (byte[]) null;
        Strings.hashtable = (Hashtable) null;
        Strings.cacheStrings = false;
        num1 = 0;
      }
      else
        goto label_4;
label_2:
      int num2;
      if (num1 == 0)
      {
        Strings.offset = num1;
      }
      else
      {
        num2 = num1;
        goto label_5;
      }
label_4:
      num2 = \u0084.\u0089(Strings.MustUseCache, "1") ? 1 : 0;
label_5:
      if (num2 != 0)
      {
        if (false)
          return;
        Strings.cacheStrings = true;
        Strings.hashtable = new Hashtable();
      }
      num1 = \u0086.\u008A(Strings.OffsetValue);
      if (true)
      {
        Strings.offset = num1;
        Assembly assembly = \u0087.\u008B();
        Stream stream = \u0088.\u007E\u008C((object) assembly, "{de8d6456-2448-407c-9413-43df6e234186}");
        try
        {
          int length = \u0089.\u008D(\u0019.\u007E\u001C((object) stream));
          Strings.bytes = new byte[length];
          do
          {
            int num3 = \u0017.\u007E\u0019((object) stream, Strings.bytes, 0, length);
            \u001C.\u007E\u007F((object) stream);
          }
          while (false);
        }
        finally
        {
          if (stream != null)
            \u001C.\u007E\u001F((object) stream);
        }
      }
      else
        goto label_2;
    }
  }
}
