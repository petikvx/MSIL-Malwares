// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.NET.MonoOfflineStorageManager
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.IsolatedStorage;
using System.Linq;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.NET
{
  public class MonoOfflineStorageManager : IOfflineStorageManager, IDisposable
  {
    private IsolatedStorageFile a;
    private readonly string b;

    public MonoOfflineStorageManager(string appid)
    {
      int A_1 = 16;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.b = Utils.a("铃듅귇迉ꇋ뻍\uA4CF믑ꋓ돕\uF6D7諙鷛\uF0DD", A_1) + appid;
      try
      {
        this.a = IsolatedStorageFile.GetUserStoreForAssembly();
      }
      catch
      {
        this.a = IsolatedStorageFile.GetMachineStoreForAssembly();
      }
      this.a.CreateDirectory(this.b);
    }

    public void MoveFile(string origin, string destination)
    {
      int num1 = 27376;
      int num2 = num1;
      num1 = 27376;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.a.MoveFile(Path.Combine(this.b, origin), Path.Combine(this.b, destination));
          break;
        default:
          goto case 1;
      }
    }

    public IEnumerable<string> GetFilesEndingWith(string suffix, [Optional] string contains)
    {
      int A_1 = 11;
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 15360;
      int num2 = num1;
      num1 = 15360;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          // ISSUE: object of a compiler-generated type is created
          // ISSUE: reference to a compiler-generated method
          return (IEnumerable<string>) ((IEnumerable<string>) this.a.GetFileNames(Path.Combine(this.b, Utils.a("閾", A_1)))).Where<string>(new Func<string, bool>(new MonoOfflineStorageManager.a()
          {
            a = suffix,
            b = contains
          }.c)).OrderBy<string, string>((Func<string, string>) (A_0 =>
          {
            int num4 = 26298;
            int num5 = num4;
            num4 = 26298;
            int num6 = num4;
            switch (num5 == num6)
            {
              case true:
                int num7 = 1;
                if (num7 == 0)
                  ;
                num7 = 0;
                if (num7 == 0)
                  ;
                return A_0;
              default:
                goto case 1;
            }
          }));
        default:
          goto case 1;
      }
    }

    public void DeleteFile(string filename)
    {
      int num1 = 16615;
      int num2 = num1;
      num1 = 16615;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.a.DeleteFile(Path.Combine(this.b, filename));
          break;
        default:
          goto case 1;
      }
    }

    public void WriteToFile(string filename, string text)
    {
      int num1 = 26004;
      int num2 = num1;
      num1 = 26004;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
          break;
        case 2:
          break;
        default:
          if (true)
            ;
          IsolatedStorageFileStream storageFileStream = this.a.OpenFile(Path.Combine(this.b, filename), FileMode.Create, FileAccess.ReadWrite, FileShare.Delete);
          try
          {
            StreamWriter streamWriter = new StreamWriter((Stream) storageFileStream);
            try
            {
              streamWriter.Write(text);
              streamWriter.Flush();
              streamWriter.Close();
            }
            finally
            {
              int num4 = 0;
              int num5 = num4;
              while (true)
              {
                switch (num5)
                {
                  case 0:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 1:
                    streamWriter.Dispose();
                    num4 = 2;
                    num5 = num4;
                    continue;
                  case 2:
                    goto label_11;
                }
                if (streamWriter != null)
                {
                  num4 = 1;
                  num5 = num4;
                }
                else
                  break;
              }
label_11:;
            }
            storageFileStream.Close();
            break;
          }
          finally
          {
            int num6 = 0;
            int num7 = num6;
            while (true)
            {
              switch (num7)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  storageFileStream.Dispose();
                  num6 = 1;
                  if (num6 == 0)
                    ;
                  num6 = 2;
                  num7 = num6;
                  continue;
                case 2:
                  goto label_22;
              }
              if (storageFileStream != null)
              {
                num6 = 1;
                num7 = num6;
              }
              else
                break;
            }
label_22:;
          }
      }
    }

    public string ReadFile(string filename)
    {
      int num1 = -3493;
      int num2 = num1;
      num1 = -3493;
      int num3 = num1;
      string end;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          return end;
        default:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          IsolatedStorageFileStream storageFileStream = this.a.OpenFile(Path.Combine(this.b, filename), FileMode.Open, FileAccess.ReadWrite, FileShare.None);
          try
          {
            storageFileStream.Seek(0L, SeekOrigin.Begin);
            StreamReader streamReader = new StreamReader((Stream) storageFileStream);
            try
            {
              end = streamReader.ReadToEnd();
              goto case 0;
            }
            finally
            {
              int num5 = 0;
              int num6 = num5;
              while (true)
              {
                switch (num6)
                {
                  case 0:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 1:
                    streamReader.Dispose();
                    num5 = 2;
                    num6 = num5;
                    continue;
                  case 2:
                    goto label_12;
                }
                if (streamReader != null)
                {
                  num5 = 1;
                  num6 = num5;
                }
                else
                  break;
              }
label_12:;
            }
          }
          finally
          {
            int num7 = 0;
            int num8 = num7;
            while (true)
            {
              switch (num8)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  storageFileStream.Dispose();
                  num7 = 2;
                  num8 = num7;
                  continue;
                case 2:
                  goto label_19;
              }
              if (storageFileStream != null)
              {
                num7 = 1;
                num8 = num7;
              }
              else
                break;
            }
label_19:;
          }
      }
    }

    public void Dispose()
    {
      int num1 = 21808;
      int num2 = num1;
      num1 = 21808;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.a.Dispose();
          break;
        default:
          goto case 1;
      }
    }
  }
}
