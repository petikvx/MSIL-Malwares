// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.Model.VpnStatusModel
// Assembly: EventRegistrationTokenTa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 99BE195C-C4C5-4E88-A9C4-8AB7EF40C780
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-663451636c9a3ca0013887bcd4433cce5b890f862e9ba01b94d2060d4d4c0c70.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;

namespace CiscoAnyconnectControl.Model
{
  public class VpnStatusModel : INotifyPropertyChanged, IDisposable
  {
    private static Lazy<VpnStatusModel> _instance = new Lazy<VpnStatusModel>((Func<VpnStatusModel>) (() => new VpnStatusModel()));
    private VpnStatusModel.VpnStatus _status = VpnStatusModel.VpnStatus.Unknown;
    private string _message = (string) null;
    private TimeSpan? _timeConnected = new TimeSpan?();
    private VpnDataModel _connectData;

    public static VpnStatusModel Instance => VpnStatusModel._instance.Value;

    private VpnStatusModel()
    {
    }

    public VpnStatusModel.VpnStatus Status
    {
      get => this._status;
      set
      {
        if (this._status == value)
          return;
        this._status = value;
        if (value == VpnStatusModel.VpnStatus.Disconnected)
          this.TimeConnected = new TimeSpan?();
        this.OnPropertyChanged();
      }
    }

    public void Connect(VpnDataModel vpnData)
    {
      this._connectData = vpnData;
      try
      {
      }
      catch (Exception ex)
      {
        this.OnNotice("Error connecting to VPN, you probybly need to restart the program or hit the debug menu.\n" + ex.Message, VpnStatusModel.NoticeType.Error);
      }
    }

    public void Disconnect()
    {
    }

    public TimeSpan? TimeConnected
    {
      get => this.Status == VpnStatusModel.VpnStatus.Connected || this.Status == VpnStatusModel.VpnStatus.Disconnecting ? this._timeConnected : new TimeSpan?();
      set
      {
        TimeSpan? nullable = value;
        TimeSpan? timeConnected = this._timeConnected;
        if (nullable.HasValue == timeConnected.HasValue && (!nullable.HasValue || !(nullable.GetValueOrDefault() != timeConnected.GetValueOrDefault())))
          return;
        this._timeConnected = value;
        this.OnPropertyChanged();
      }
    }

    public string Message
    {
      get => this._message;
      set
      {
        if (this._message == value)
          return;
        this._message = value;
        this.OnPropertyChanged();
      }
    }

    public virtual void OnNotice(string notice, VpnStatusModel.NoticeType noticeType)
    {
      EventHandler<VpnStatusModel.NoticeEventArgs> notice1 = this.Notice;
      if (notice1 == null)
        return;
      notice1((object) this, new VpnStatusModel.NoticeEventArgs(notice, noticeType));
    }

    public event EventHandler<VpnStatusModel.NoticeEventArgs> Notice;

    private string OnGroupRequested(List<string> availableGroups)
    {
      VpnStatusModel.GroupEventArgs e = new VpnStatusModel.GroupEventArgs(availableGroups);
      EventHandler<VpnStatusModel.GroupEventArgs> groupRequested = this.GroupRequested;
      if (groupRequested != null)
        groupRequested((object) this, e);
      return e.SelectedGroup;
    }

    public event EventHandler<VpnStatusModel.GroupEventArgs> GroupRequested;

    public event PropertyChangedEventHandler PropertyChanged;

    [NotifyPropertyChangedInvocator]
    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
      if (propertyChanged == null)
        return;
      propertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    public void Dispose()
    {
    }

    public class GroupEventArgs : EventArgs
    {
      public List<string> AvailableGroups;

      public GroupEventArgs(List<string> availableGroups) => this.AvailableGroups = availableGroups;

      public string SelectedGroup { get; set; } = (string) null;
    }

    public enum NoticeType
    {
      Error,
      Warning,
      Info,
      Status,
    }

    public class NoticeEventArgs : EventArgs
    {
      public NoticeEventArgs(string notice, VpnStatusModel.NoticeType noticeType)
      {
        this.Notice = notice;
        this.NoticeType = noticeType;
      }

      public string Notice { get; set; }

      public VpnStatusModel.NoticeType NoticeType { get; set; }
    }

    public enum VpnStatus
    {
      Disconnected,
      Connecting,
      Connected,
      Disconnecting,
      Reconnecting,
      Pausing,
      Paused,
      SsoPolling,
      Unknown,
    }

    private class VpnApiEventListener
    {
      private readonly VpnStatusModel _model;

      public object VPNStatsTag { get; private set; }

      public VpnApiEventListener(VpnStatusModel model) => this._model = model;

      public void VpnBannerNotification(string strBannerMessage)
      {
        Trace.TraceInformation("VpnBannerNotification: " + strBannerMessage);
        this._model.Message = strBannerMessage;
      }

      public void VpnExitNotification(string strExitMessage, int exitCode) => Trace.TraceError(string.Format("VpnExitNotification: '{0}' exit code: {1}", (object) strExitMessage, (object) exitCode));

      public void VpnServiceReadyNotification() => Trace.TraceError(nameof (VpnServiceReadyNotification));

      public void VpnUserPromptNotification(IConnectPromptInfo pConnectPromptInfo)
      {
      }

      public void VpnWebLaunchHostNotification(string strActiveHost) => Trace.TraceError("VpnWebLaunchHostNotification not implemented: " + strActiveHost);

      public void VpnEventAvailableNotification() => Trace.TraceError("VpnEventAvailableNotification not implemented ... trying VpnApi.ProcessEvents()");

      public void VpnCertBlockedNotification(string strUntrustedServer) => Trace.TraceError("VpnCertBlockedNotification: " + strUntrustedServer);
    }
  }
}
