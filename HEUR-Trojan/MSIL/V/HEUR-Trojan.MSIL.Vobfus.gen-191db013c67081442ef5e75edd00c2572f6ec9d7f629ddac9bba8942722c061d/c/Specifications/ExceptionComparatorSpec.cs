// Decompiled with JetBrains decompiler
// Type: c.Specifications.ExceptionComparatorSpec
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Adapter;
using c.Configurations;
using c.Connections;
using c.Filter;
using c.Services;
using c.States;
using GLuaR.Importers;
using GLuaR.Shared;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using System.Xml.Serialization;

namespace c.Specifications
{
  public class ExceptionComparatorSpec
  {
    public string _Role;
    public string @struct;
    public string _Item;
    public string _Params;
    public List<Page> broadcaster;
    public List<RefThreadFilter> listener;
    [XmlIgnore]
    public string _Interpreter;
    public bool m_Printer;
    public string m_Product;
    [XmlIgnore]
    public string _Code;
    public List<ProcessPropertyConnector> m_Creator;
    [XmlIgnore]
    public bool m_Proxy;
    public List<MappingInvocationAdapter> _Helper;
    public LsBrkCond strategy;
    public string m_Global;
    public string m_Attr;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExceptionComparatorSpec()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_2;
            case 1:
            case 2:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              if (ExceptionComparatorSpec.RegisterManager())
              {
                num2 = 3;
                continue;
              }
              goto label_2;
            case 3:
              goto label_4;
            case 4:
              goto label_3;
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_8;
          }
        }
label_2:
        ImporterMapper.InitAccount();
        num1 = 2;
        continue;
label_3:
        this.listener = new List<RefThreadFilter>();
        this._Helper = new List<MappingInvocationAdapter>();
        num1 = 6;
        continue;
label_4:
        this.m_Creator = new List<ProcessPropertyConnector>();
        this.broadcaster = new List<Page>();
        goto label_3;
      }
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool RemoveField()
    {
      int num1 = 4;
      List<RefThreadFilter>.Enumerator enumerator1;
      bool flag1;
      List<Page>.Enumerator enumerator2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            try
            {
              while (enumerator2.MoveNext())
              {
                Page current = enumerator2.Current;
                int num2 = 3;
                if (true)
                  goto label_15;
label_14:
                bool flag2 = !current.m_Connection;
                goto label_17;
label_15:
                while (true)
                {
                  switch (num2)
                  {
                    case 0:
                    case 3:
                      goto label_14;
                    case 1:
                    case 2:
                      goto label_17;
                    case 4:
                      goto label_24;
                    default:
                      num2 = 2;
                      continue;
                  }
                }
label_17:
                if (flag2)
                {
                  flag1 = false;
                  num2 = 4;
                  goto label_15;
                }
              }
            }
            finally
            {
              enumerator2.Dispose();
            }
            enumerator1 = this.listener.GetEnumerator();
            goto case 2;
          case 2:
          case 3:
            try
            {
label_8:
              while (enumerator1.MoveNext())
              {
                RefThreadFilter current = enumerator1.Current;
                int num3 = 2;
                bool flag3;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 2:
                      flag3 = !current.CreateField();
                      goto case 1;
                    case 1:
                    case 3:
                      if (flag3)
                      {
                        flag1 = false;
                        if (ExceptionComparatorSpec.RegisterManager())
                        {
                          num3 = 4;
                          continue;
                        }
                        goto case 0;
                      }
                      else
                        goto label_8;
                    case 4:
                      goto label_24;
                    default:
                      if (true)
                      {
                        num3 = 3;
                        continue;
                      }
                      goto label_24;
                  }
                }
              }
            }
            finally
            {
              enumerator1.Dispose();
            }
            flag1 = this.m_Proxy;
            num1 = 5;
            continue;
          case 4:
            enumerator2 = this.broadcaster.GetEnumerator();
            num1 = 0;
            continue;
          case 5:
            goto label_24;
          default:
            num1 = 3;
            continue;
        }
      }
label_24:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Save()
    {
      int num1 = 4;
      List<Page>.Enumerator enumerator1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              ExceptionComparatorSpec.ExcludeField(this._Interpreter, this);
              num2 = 3;
              continue;
            case 1:
            case 2:
              goto label_1;
            case 3:
              goto label_11;
            case 5:
              goto label_15;
            default:
              goto label_14;
          }
        }
label_1:
        List<RefThreadFilter>.Enumerator enumerator2;
        try
        {
          while (enumerator2.MoveNext())
          {
            RefThreadFilter current = enumerator2.Current;
            int num3 = 2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_3;
                case 1:
                case 3:
                  goto label_6;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_3:
            current.Save();
label_6:;
          }
        }
        finally
        {
          enumerator2.Dispose();
        }
        enumerator1 = this.broadcaster.GetEnumerator();
        num1 = 5;
        continue;
label_11:
        this.m_Proxy = true;
        enumerator2 = this.listener.GetEnumerator();
        goto label_1;
label_14:
        num1 = 1;
      }
label_15:
      try
      {
        while (enumerator1.MoveNext())
        {
          Page current = enumerator1.Current;
          int num4 = 2;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                goto label_17;
              case 1:
              case 3:
                goto label_20;
              default:
                num4 = 3;
                continue;
            }
          }
label_17:
          current.Save();
label_20:;
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExceptionComparatorSpec CalcField()
    {
      int num1 = 5;
      if (true)
        goto label_15;
label_1:
      DirectoryInfo directory;
      int num2;
      if (!directory.Exists)
      {
        num2 = 1;
        goto label_14;
      }
label_8:
      SchemaThreadService schemaThreadService;
      ExceptionComparatorSpec exceptionComparatorSpec = new ExceptionComparatorSpec()
      {
        m_Product = schemaThreadService.PublishRule(),
        _Params = schemaThreadService.NewRule(),
        strategy = schemaThreadService.RevertRule(),
        m_Attr = "",
        m_Global = "",
        @struct = "",
        _Role = "",
        _Item = "",
        m_Printer = false,
        m_Proxy = false,
        _Code = schemaThreadService.MoveDefinition(),
        _Interpreter = schemaThreadService.MoveDefinition() + "\\" + (schemaThreadService.PublishRule().EndsWith(".glu") ? schemaThreadService.PublishRule() : schemaThreadService.PublishRule() + ".glu")
      };
      int num3 = 8;
      num1 = ExceptionComparatorSpec.RunManager() ? num3 : num3;
      goto label_15;
label_14:
      num1 = num2;
label_15:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            schemaThreadService = new SchemaThreadService();
            num1 = 4;
            continue;
          case 1:
            goto label_7;
          case 2:
          case 7:
            goto label_3;
          case 3:
            goto label_13;
          case 4:
            goto label_10;
          case 6:
            goto label_1;
          case 8:
            goto label_17;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto label_17;
        }
      }
label_3:
      bool flag;
      if (flag)
      {
        int num4 = (int) ConsumerConfigConfig.EnableFactory("Error! The project already exists!");
        exceptionComparatorSpec = ExceptionComparatorSpec.CalcField();
        goto label_17;
      }
      else if (!Directory.Exists(schemaThreadService.MoveDefinition()))
      {
        num2 = 3;
        goto label_14;
      }
      else
        goto label_8;
label_7:
      int num5 = (int) ConsumerConfigConfig.EnableFactory("Invalid project directory");
      exceptionComparatorSpec = ExceptionComparatorSpec.CalcField();
      goto label_17;
label_10:
      if (schemaThreadService.ShowDialog() != DialogResult.OK)
      {
        exceptionComparatorSpec = (ExceptionComparatorSpec) null;
        goto label_17;
      }
      else
      {
        flag = File.Exists(schemaThreadService.MoveDefinition() + "\\" + (schemaThreadService.PublishRule().EndsWith(".glu") ? schemaThreadService.PublishRule() : schemaThreadService.PublishRule() + ".glu"));
        num2 = 7;
        goto label_14;
      }
label_13:
      directory = Directory.CreateDirectory(schemaThreadService.MoveDefinition());
      goto label_1;
label_17:
      return exceptionComparatorSpec;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExceptionComparatorSpec DestroyField(string spec)
    {
      int num1 = 2;
      ExceptionComparatorSpec exceptionComparatorSpec1;
      while (true)
      {
        int num2 = num1;
        XmlSerializer xmlSerializer;
        ExceptionComparatorSpec exceptionComparatorSpec2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              FileStream fileStream;
              try
              {
                fileStream = File.Open(spec, FileMode.Open, FileAccess.Read, FileShare.Read);
              }
              catch (System.Exception ex)
              {
                int num3 = (int) new IndexerStateStatus(ex).ShowDialog();
                exceptionComparatorSpec1 = (ExceptionComparatorSpec) null;
                goto label_12;
              }
              try
              {
                exceptionComparatorSpec2 = (ExceptionComparatorSpec) xmlSerializer.Deserialize((Stream) fileStream);
              }
              catch (System.Exception ex)
              {
                int num4 = (int) new IndexerStateStatus(ex).ShowDialog();
                fileStream.Close();
                exceptionComparatorSpec1 = (ExceptionComparatorSpec) null;
                goto label_12;
              }
              fileStream.Close();
              goto case 4;
            case 4:
              exceptionComparatorSpec1 = exceptionComparatorSpec2;
              num2 = 5;
              continue;
            case 5:
              goto label_12;
            default:
              int num5 = 4;
              num2 = ExceptionComparatorSpec.RunManager() ? num5 : num5;
              continue;
          }
        }
label_1:
        xmlSerializer = new XmlSerializer(typeof (ExceptionComparatorSpec));
        num1 = 3;
      }
label_12:
      return exceptionComparatorSpec1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void ExcludeField(string instance, ExceptionComparatorSpec b)
    {
      int num1 = 3;
      if (ExceptionComparatorSpec.RunManager())
        ;
      FileStream fileStream;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            XmlSerializer xmlSerializer;
            try
            {
              xmlSerializer = new XmlSerializer(typeof (ExceptionComparatorSpec));
            }
            catch (System.Exception ex)
            {
              int num3 = (int) new IndexerStateStatus(ex).ShowDialog();
              return;
            }
            try
            {
              fileStream = File.Create(instance);
            }
            catch (System.Exception ex)
            {
              int num4 = (int) new IndexerStateStatus(ex).ShowDialog();
              return;
            }
            xmlSerializer.Serialize((Stream) fileStream, (object) b);
            num2 = 2;
            break;
          case 1:
          case 2:
            goto label_7;
          case 4:
            goto label_11;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_7:
      fileStream.Close();
label_11:;
    }

    internal static bool RegisterManager() => true;

    internal static bool RunManager() => false;
  }
}
