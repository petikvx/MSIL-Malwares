// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: جY, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4509E19C-3738-48CD-AFB9-B77E11D0C93B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-64fa23f22cfa820eb89b80e1db1502fcaebcb66c1731e92f550c12ca940e8075.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = 1401498076;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 91735574)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -995965363 ^ -1759510584;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.board = b;
    }

    public void FindAllMoves()
    {
      this.Clear();
label_1:
      int num1 = 1538451199;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 643578736)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1757489728 ^ 180683763;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_10:
        int num3 = enumerator.MoveNext() ? 1167431999 : (num3 = 1353776999);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 643578736)) % 5U)
          {
            case 0:
              num3 = (int) num4 * -1052816145 ^ 323619939;
              continue;
            case 1:
              this.FindMoveFrom(enumerator.Current.Current);
              num3 = 1513880805;
              continue;
            case 2:
              num3 = 1167431999;
              continue;
            case 4:
              goto label_10;
            default:
              goto label_12;
          }
        }
      }
label_12:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.BlackPieces.Values.GetEnumerator())
      {
label_16:
        int num5 = !enumerator.MoveNext() ? 2146031044 : (num5 = 2051122511);
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 643578736)) % 5U)
          {
            case 0:
              goto label_16;
            case 1:
              num5 = (int) num6 * 1728109076 ^ 1372553768;
              continue;
            case 2:
              this.FindMoveFrom(enumerator.Current.Current);
              num5 = 473766541;
              continue;
            case 4:
              num5 = 2051122511;
              continue;
            default:
              goto label_21;
          }
        }
      }
label_21:
      bool showAllMoves = this.board.ShowAllMoves;
label_22:
      int num7 = 1964920422;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ 643578736)) % 5U)
        {
          case 0:
            this.HighLightMoveStyle();
            num7 = (int) num8 * 43400799 ^ 1626206056;
            continue;
          case 1:
            num7 = (int) num8 * 1962588638 ^ -543391876;
            continue;
          case 2:
            goto label_24;
          case 3:
            int num9 = showAllMoves ? 2144272973 : (num9 = 785140328);
            num7 = num9 ^ (int) num8 * 2101651615;
            continue;
          case 4:
            goto label_22;
          default:
            goto label_19;
        }
      }
label_24:
      return;
label_19:;
    }

    public void FindMoveFrom(Square x)
    {
      Pieces kind = x.Piece.Kind;
label_1:
      int num1 = -2021310656;
      Pieces pieces;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1850316246)) % 17U)
        {
          case 0:
label_12:
            this.handleKnight(x);
            num1 = -906133052;
            continue;
          case 1:
label_13:
            this.handleRook(x);
            num1 = -1901217673;
            continue;
          case 2:
            num1 = (int) num2 * -984620514 ^ -1684169137;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 581554587 ^ 543577558;
            continue;
          case 5:
label_10:
            this.handleKing(x);
            num1 = -906133052;
            continue;
          case 6:
            num1 = (int) num2 * 1559270079 ^ 494280505;
            continue;
          case 7:
            goto label_3;
          case 8:
label_6:
            this.handleQueen(x);
            num1 = -1161713053;
            continue;
          case 9:
            pieces = kind;
            num1 = (int) num2 * 1728545362 ^ -370951768;
            continue;
          case 10:
            num1 = (int) num2 * -913780766 ^ -323101896;
            continue;
          case 11:
label_17:
            this.handleBishop(x);
            num1 = -906133052;
            continue;
          case 12:
            num1 = (int) num2 * -1337583285 ^ -1980814667;
            continue;
          case 13:
            num1 = (int) num2 * 1841353484 ^ 566355392;
            continue;
          case 14:
            switch (pieces)
            {
              case Pieces.Pawn:
                goto label_4;
              case Pieces.Knight:
                goto label_12;
              case Pieces.Bishop:
                goto label_17;
              case Pieces.Rook:
                goto label_13;
              case Pieces.King:
                goto label_10;
              case Pieces.Queen:
                goto label_6;
              default:
                num1 = (int) num2 * -686718814 ^ -1852241496;
                continue;
            }
          case 15:
label_4:
            this.handlePawn(x);
            num1 = -2120372263;
            continue;
          case 16:
            num1 = (int) num2 * 443813185 ^ -109657238;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
label_1:
      int num2 = -1794207932;
      while (true)
      {
        uint num3;
        int num4;
        int num5;
        int b;
        bool flag1;
        bool flag2;
        int num6;
        bool flag3;
        int num7;
        Square square;
        int num8;
        bool flag4;
        bool flag5;
        bool flag6;
        bool isEmpty;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num3 = (uint) (num2 ^ -1944519360)) % 68U)
        {
          case 0:
            int num19 = this.board[num5, x.Rank].Piece == null ? 1862161692 : (num19 = 2016338555);
            num2 = num19 ^ (int) num3 * -1598029330;
            continue;
          case 1:
            num4 = x.Rank + num8;
            num2 = (int) num3 * -165076954 ^ 1272780428;
            continue;
          case 2:
            num9 = this.board[num6, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_34;
          case 3:
            goto label_1;
          case 4:
            num2 = -1525169739;
            continue;
          case 5:
            num2 = (int) num3 * -704733804 ^ 1197974428;
            continue;
          case 6:
            int num20;
            num2 = num20 = num5 >= 8 ? -206126692 : (num20 = -201504128);
            continue;
          case 7:
            flag9 = !square.IsEmpty;
            num2 = (int) num3 * -1539797456 ^ 1930618952;
            continue;
          case 8:
            int num21 = !flag7 ? 510888924 : (num21 = 210752269);
            num2 = num21 ^ (int) num3 * 2077251281;
            continue;
          case 9:
            num2 = (int) num3 * 1202002645 ^ 1402374478;
            continue;
          case 10:
            if (num4 >= 0)
            {
              num2 = (int) num3 * -1769151033 ^ -457118508;
              continue;
            }
            goto label_90;
          case 11:
            this.addMove(num1, num4, x);
            num2 = (int) num3 * -1031676601 ^ -1015916930;
            continue;
          case 12:
            num4 = 0;
            num2 = (int) num3 * 1309668049 ^ 1052335977;
            continue;
          case 13:
            if (num1 >= 0)
            {
              num2 = (int) num3 * 259062622 ^ -118774455;
              continue;
            }
            goto label_58;
          case 14:
            flag7 = flag1 | flag8;
            num2 = (int) num3 * -104040724 ^ -1954838696;
            continue;
          case 15:
            square = this.board[num1, num4];
            num2 = (int) num3 * -1127727845 ^ -1359626038;
            continue;
          case 16:
            num2 = (int) num3 * -213096310 ^ -537593881;
            continue;
          case 17:
            num2 = -265346874;
            continue;
          case 18:
            int num22 = flag2 ? -1029092483 : (num22 = -1691144249);
            num2 = num22 ^ (int) num3 * -766407132;
            continue;
          case 19:
            this.addMove(num1, num4, x);
            num2 = (int) num3 * 2087406966 ^ 1089795923;
            continue;
          case 20:
            num2 = -628901172;
            continue;
          case 21:
            num1 = x.File + 1;
            num2 = -1393484672;
            continue;
          case 22:
            num12 = num4 < 8 ? 1 : 0;
            goto label_76;
          case 23:
            num1 = x.File - 1;
            num4 = x.Rank + num8;
            num2 = -27698991;
            continue;
          case 24:
            this.addMove(num1, num4, x);
            num2 = (int) num3 * 339779970 ^ 1606974840;
            continue;
          case 25:
            num13 = x.Piece.Color == PieceColor.White ? 1 : 0;
            break;
          case 26:
            num2 = (int) num3 * -1199528684 ^ 732435175;
            continue;
          case 27:
            num2 = -707243167;
            continue;
          case 28:
            num14 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_94;
          case 29:
            if (x.Rank != 4)
            {
              num13 = 0;
              break;
            }
            num2 = -31757415;
            continue;
          case 30:
            flag10 = this.board[num6, x.Rank].Piece != null;
            num2 = (int) num3 * 1005232246 ^ 1187563994;
            continue;
          case 31:
            square = this.board[num1, num4];
            num2 = (int) num3 * 836039871 ^ -9339692;
            continue;
          case 32:
            this.addMove(num1, num4, x);
            num2 = (int) num3 * -2063831670 ^ -2115828094;
            continue;
          case 33:
            if (x.Piece.Color == PieceColor.White)
            {
              num16 = 1;
              goto label_20;
            }
            else
            {
              num2 = (int) num3 * -295031127 ^ 1133148477;
              continue;
            }
          case 34:
            int num23 = flag10 ? -2047971913 : (num23 = -1376672142);
            num2 = num23 ^ (int) num3 * -859629800;
            continue;
          case 35:
            if (this.board[num6, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num2 = (int) num3 * -1709830079 ^ -940910807;
              continue;
            }
            num9 = 0;
            goto label_34;
          case 36:
            num4 = x.Rank + num8;
            if (num1 < 8)
            {
              num2 = (int) num3 * -1329232593 ^ -180397326;
              continue;
            }
            goto label_90;
          case 37:
            int num24 = flag6 ? 732524331 : (num24 = 817995296);
            num2 = num24 ^ (int) num3 * 1997387820;
            continue;
          case 38:
            num2 = (int) num3 * -645653181 ^ 227510410;
            continue;
          case 39:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num2 = (int) num3 * -1337860112 ^ -856755294;
            continue;
          case 40:
            num2 = (int) num3 * -1712297063 ^ 1118180218;
            continue;
          case 41:
            num17 = -1;
            goto label_49;
          case 42:
            num10 = num4 < 8 ? 1 : 0;
            goto label_91;
          case 43:
            num2 = (int) num3 * 1549935883 ^ 1602120007;
            continue;
          case 44:
            flag2 = x.Rank == num7;
            num2 = -549858574;
            continue;
          case 45:
            int num25 = !square.IsEmpty ? 1604074734 : (num25 = 1407911168);
            num2 = num25 ^ (int) num3 * 1057531505;
            continue;
          case 46:
            square = this.board[num1, num4];
            num2 = (int) num3 * 921136387 ^ 1301572022;
            continue;
          case 47:
            if (this.board[num5, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num2 = (int) num3 * -954621460 ^ 343629014;
              continue;
            }
            num18 = 0;
            goto label_82;
          case 48:
            isEmpty = square.IsEmpty;
            num2 = (int) num3 * -186940004 ^ -454943085;
            continue;
          case 49:
            num15 = 2;
            goto label_44;
          case 50:
            if (num4 < 0)
            {
              num12 = 0;
              goto label_76;
            }
            else
            {
              num2 = (int) num3 * -1933196680 ^ -740909986;
              continue;
            }
          case 51:
            int num26 = !flag4 ? -905084927 : (num26 = -866982482);
            num2 = num26 ^ (int) num3 * 1257559063;
            continue;
          case 52:
            int num27 = flag5 ? -1289245923 : (num27 = -398888194);
            num2 = num27 ^ (int) num3 * 69449941;
            continue;
          case 53:
            if (x.Piece.Color == PieceColor.White)
            {
              num17 = 1;
              goto label_49;
            }
            else
            {
              num2 = (int) num3 * 1616102621 ^ 1430374308;
              continue;
            }
          case 54:
            num18 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_82;
          case 55:
            flag4 = this.board.lastPassantPawn == this.board[num5, x.Rank].Piece;
            num2 = (int) num3 * -194243975 ^ -461418060;
            continue;
          case 56:
            num4 = x.Rank + 2 * num8;
            num2 = (int) num3 * 1390828924 ^ 1163816256;
            continue;
          case 57:
            num6 = x.File - 1;
            num5 = x.File + 1;
            int num28 = num6 >= 0 ? -219139005 : (num28 = -269977049);
            num2 = num28 ^ (int) num3 * -1535766199;
            continue;
          case 58:
            goto label_3;
          case 59:
            if (num4 >= 0)
            {
              num2 = (int) num3 * 10857402 ^ 1468422460;
              continue;
            }
            goto label_58;
          case 60:
            num16 = 6;
            goto label_20;
          case 61:
            int num29 = flag3 ? -116486480 : (num29 = -1607065151);
            num2 = num29 ^ (int) num3 * -1990990433;
            continue;
          case 62:
            num11 = num4 < 8 ? 1 : 0;
            goto label_59;
          case 63:
            this.addCapture(num6, b, x, this.board[num6, x.Rank].Piece);
            num2 = (int) num3 * -1246199312 ^ -593191928;
            continue;
          case 64:
            int num30 = !flag9 ? 1812738872 : (num30 = 1412514720);
            num2 = num30 ^ (int) num3 * -4801680;
            continue;
          case 65:
            flag3 = this.board.lastPassantPawn == this.board[num6, x.Rank].Piece;
            num2 = (int) num3 * -1505386063 ^ -747438772;
            continue;
          case 66:
            num1 = x.File;
            num2 = (int) num3 * 425901198 ^ -1195350743;
            continue;
          case 67:
            int num31 = !isEmpty ? -27995764 : (num31 = -1787804316);
            num2 = num31 ^ (int) num3 * -565673075;
            continue;
          default:
            goto label_102;
        }
        flag1 = num13 != 0;
        if (x.Rank == 3)
        {
          num2 = -792050548;
          continue;
        }
        num14 = 0;
        goto label_94;
label_20:
        num7 = num16;
        num2 = -1094108571;
        continue;
label_34:
        flag5 = num9 != 0;
        num2 = -1029892180;
        continue;
label_44:
        b = num15;
        num2 = -1233864666;
        continue;
label_49:
        num8 = num17;
        num2 = -1328089450;
        continue;
label_58:
        num11 = 0;
label_59:
        int num32;
        num2 = num32 = num11 != 0 ? -274643728 : (num32 = -1525169739);
        continue;
label_76:
        int num33;
        num2 = num33 = num12 != 0 ? -1812837685 : (num33 = -707243167);
        continue;
label_82:
        flag6 = num18 != 0;
        num2 = -64848531;
        continue;
label_90:
        num10 = 0;
label_91:
        int num34;
        num2 = num34 = num10 != 0 ? -942562647 : (num34 = -265346874);
        continue;
label_94:
        flag8 = num14 != 0;
        if (flag1)
        {
          num15 = 5;
          goto label_44;
        }
        else
          num2 = -646706903;
      }
label_3:
      return;
label_102:;
    }

    private void handleQueen(Square x)
    {
      this.handleRook(x);
label_1:
      int num1 = 1596186194;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 43681255)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.handleBishop(x);
            num1 = (int) num2 * -1564302048 ^ 708900880;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -268052296 ^ 63071143;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
label_1:
      int num1 = -388247357;
      bool canCastleQueenSide;
      bool canCastleKingSide;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -746525456)) % 27U)
        {
          case 0:
            num1 = (int) num2 * -1385460373 ^ -596253125;
            continue;
          case 1:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1756624155 ^ 583469713;
            continue;
          case 2:
            num1 = (int) num2 * -498713985 ^ -2030841790;
            continue;
          case 3:
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 1147575288 ^ -495040834;
            continue;
          case 4:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1503159744 ^ -565116366;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.addMove(x.File + 1, x.Rank + 1, x);
            this.addMove(x.File + 1, x.Rank - 1, x);
            num1 = (int) num2 * 1075871716 ^ -1339396255;
            continue;
          case 7:
            flag = x.Piece.Color == PieceColor.Black;
            num1 = -20254050;
            continue;
          case 8:
            int num3 = x.Piece.Color == PieceColor.White ? -1072674796 : (num3 = -1068250099);
            num1 = num3 ^ (int) num2 * -1457208219;
            continue;
          case 9:
            goto label_3;
          case 10:
            int num4 = !flag ? -1018780101 : (num4 = -55289640);
            num1 = num4 ^ (int) num2 * -1356901066;
            continue;
          case 11:
            int num5 = canCastleKingSide ? 460092065 : (num5 = 1038861652);
            num1 = num5 ^ (int) num2 * -1594688689;
            continue;
          case 12:
            this.handleBigCastling(x);
            num1 = (int) num2 * 779425562 ^ 9087505;
            continue;
          case 13:
            num1 = -934783217;
            continue;
          case 14:
            num1 = (int) num2 * -433404433 ^ -852860341;
            continue;
          case 15:
            int num6;
            num1 = num6 = !this.board.WhiteCanCastleQueenSide ? -714965593 : (num6 = -540548120);
            continue;
          case 16:
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * 1741885628 ^ 448071282;
            continue;
          case 17:
            num1 = (int) num2 * 1157226176 ^ -380218402;
            continue;
          case 18:
            canCastleKingSide = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * 1065484230 ^ -104042781;
            continue;
          case 19:
            int num7 = !this.board.BlackCanCastleKingSide ? 1646598396 : (num7 = 1866668148);
            num1 = num7 ^ (int) num2 * -158323343;
            continue;
          case 20:
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * -1797431036 ^ -859401492;
            continue;
          case 21:
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * 1994507348 ^ 1160943057;
            continue;
          case 22:
            int num8 = canCastleQueenSide ? -1894675406 : (num8 = -1347368245);
            num1 = num8 ^ (int) num2 * 873894845;
            continue;
          case 23:
            num1 = -417233637;
            continue;
          case 24:
            canCastleQueenSide = this.board.BlackCanCastleQueenSide;
            num1 = -1599317179;
            continue;
          case 25:
            num1 = (int) num2 * 191179540 ^ 1940193631;
            continue;
          case 26:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1682652758 ^ -1326304460;
            continue;
          default:
            goto label_29;
        }
      }
label_3:
      return;
label_29:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = -1598031530;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1131475228)) % 7U)
        {
          case 0:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 1941657498 ^ 1237591607;
              continue;
            }
            break;
          case 1:
            goto label_3;
          case 2:
            square3 = this.board[x.File - 1, x.Rank];
            num1 = (int) num2 * 333619638 ^ 1026470376;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -1648805285 ^ -291724183;
            continue;
          case 5:
            num3 = square1.IsEmpty ? 1 : 0;
            goto label_6;
          case 6:
            square2 = this.board[x.File - 2, x.Rank];
            square1 = this.board[x.File - 3, x.Rank];
            if (square3.IsEmpty)
            {
              num1 = (int) num2 * -760491525 ^ -1810778026;
              continue;
            }
            break;
          default:
            goto label_13;
        }
        num3 = 0;
label_6:
        int num4;
        num1 = num4 = num3 != 0 ? -1203415483 : (num4 = -1144627374);
      }
label_3:
      return;
label_13:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = -595273804;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1865127144)) % 7U)
        {
          case 0:
            int num4 = flag ? -1571385788 : (num4 = -341573633);
            num1 = num4 ^ (int) num2 * -234911612;
            continue;
          case 1:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1745757659 ^ 599465047;
              continue;
            }
            num3 = 0;
            break;
          case 2:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          case 3:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * 2033858995 ^ -1994653389;
            continue;
          case 4:
            goto label_3;
          case 5:
            square1 = this.board[x.File + 1, x.Rank];
            square2 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * -1108164184 ^ -1912478270;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = -1037558899;
      }
label_3:
      return;
label_12:;
    }

    private void handleRook(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = -1884003387;
      int num3;
      bool flag1;
      int num4;
      int num5;
      bool flag2;
      int b1;
      bool flag3;
      int a;
      int b2;
      bool flag4;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ -1065940486)) % 35U)
        {
          case 0:
            b1 = x.Rank + num1;
            num2 = -1842594423;
            continue;
          case 1:
            flag2 = num4 < 8;
            num2 = -1645463198;
            continue;
          case 2:
            num2 = (int) num6 * -1169113904 ^ -2113228792;
            continue;
          case 3:
            a = x.File - num5;
            num2 = -518396054;
            continue;
          case 4:
            num4 = 1;
            num2 = -1821825304;
            continue;
          case 5:
            int num7 = this.addMove(a, x.Rank, x) ? -1734808196 : (num7 = -35768251);
            num2 = num7 ^ (int) num6 * -867743161;
            continue;
          case 6:
            int num8 = flag1 ? 311726109 : (num8 = 1788602469);
            num2 = num8 ^ (int) num6 * 873626073;
            continue;
          case 7:
            num2 = (int) num6 * 665216187 ^ 1521827837;
            continue;
          case 8:
            int num9 = !flag4 ? 1758900113 : (num9 = 272810199);
            num2 = num9 ^ (int) num6 * -548085189;
            continue;
          case 9:
            num2 = -942378536;
            continue;
          case 10:
            num5 = 1;
            num2 = -214204108;
            continue;
          case 11:
            flag4 = this.addMove(x.File, b2, x);
            num2 = (int) num6 * -781369960 ^ 1103836909;
            continue;
          case 12:
            num2 = -1712054377;
            continue;
          case 13:
            num2 = (int) num6 * -490300341 ^ -1111659954;
            continue;
          case 14:
            flag1 = this.addMove(x.File + num3, x.Rank, x);
            num2 = (int) num6 * 722772740 ^ -2118172961;
            continue;
          case 15:
            num2 = -1325263056;
            continue;
          case 16:
            ++num4;
            num2 = (int) num6 * -4742017 ^ 1251957787;
            continue;
          case 17:
            num3 = 1;
            num2 = -1199775921;
            continue;
          case 18:
            num2 = (int) num6 * -855955960 ^ 928774840;
            continue;
          case 19:
            goto label_3;
          case 20:
            int num10 = this.addMove(x.File, b1, x) ? 264919753 : (num10 = 1859709997);
            num2 = num10 ^ (int) num6 * 1152052663;
            continue;
          case 21:
            num2 = (int) num6 * 151990847 ^ 479202105;
            continue;
          case 22:
            goto label_1;
          case 23:
            num2 = -1117762488;
            continue;
          case 24:
            ++num3;
            num2 = -1199775921;
            continue;
          case 25:
            int num11 = flag3 ? -1118447019 : (num11 = -1379397095);
            num2 = num11 ^ (int) num6 * 158695610;
            continue;
          case 26:
            int num12;
            num2 = num12 = num1 < 8 ? -708404882 : (num12 = -1281553341);
            continue;
          case 27:
            num2 = -31089612;
            continue;
          case 28:
            num2 = (int) num6 * -20909619 ^ -461204884;
            continue;
          case 29:
            flag3 = num5 < 8;
            num2 = -849981795;
            continue;
          case 30:
            b2 = x.Rank - num4;
            num2 = (int) num6 * -1140427397 ^ -737433051;
            continue;
          case 31:
            int num13;
            num2 = num13 = num3 < 8 ? -1816457914 : (num13 = -442160714);
            continue;
          case 32:
            ++num1;
            num2 = (int) num6 * 682221985 ^ -957368758;
            continue;
          case 33:
            int num14 = flag2 ? -1379837498 : (num14 = -1294529784);
            num2 = num14 ^ (int) num6 * 1735600560;
            continue;
          case 34:
            ++num5;
            num2 = (int) num6 * -1077748094 ^ -1999685720;
            continue;
          default:
            goto label_37;
        }
      }
label_3:
      return;
label_37:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = -1594250666;
      int num2;
      int num3;
      int a1;
      int num4;
      int num5;
      int a2;
      int b1;
      int a3;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1265147652)) % 37U)
        {
          case 0:
            flag3 = num5 < 8;
            num1 = -572644281;
            continue;
          case 1:
            num1 = (int) num6 * -879597093 ^ -1773217382;
            continue;
          case 2:
            goto label_3;
          case 3:
            num2 = 1;
            num1 = -230742134;
            continue;
          case 4:
            ++num5;
            num1 = (int) num6 * 1883485551 ^ -1850882621;
            continue;
          case 5:
            num3 = 1;
            num1 = -921847337;
            continue;
          case 6:
            a3 = x.File + num4;
            num1 = -208704417;
            continue;
          case 7:
            num1 = -807760876;
            continue;
          case 8:
            num1 = (int) num6 * 79801473 ^ -929373192;
            continue;
          case 9:
            num1 = (int) num6 * 2145165704 ^ -102899190;
            continue;
          case 10:
            int num7;
            num1 = num7 = num4 >= 8 ? -194420288 : (num7 = -1060642334);
            continue;
          case 11:
            num1 = -647192015;
            continue;
          case 12:
            ++num3;
            num1 = (int) num6 * -919285371 ^ -42719146;
            continue;
          case 13:
            goto label_1;
          case 14:
            num4 = 1;
            num1 = (int) num6 * 1068134142 ^ -1110003191;
            continue;
          case 15:
            a1 = x.File - num2;
            num1 = -281468482;
            continue;
          case 16:
            int b2 = x.Rank + num2;
            int num8 = !this.addMove(a1, b2, x) ? -595041086 : (num8 = -1392033377);
            num1 = num8 ^ (int) num6 * -1189765270;
            continue;
          case 17:
            int b3 = x.Rank + num4;
            flag1 = this.addMove(a3, b3, x);
            num1 = (int) num6 * 101586780 ^ -258321669;
            continue;
          case 18:
            num1 = -333526938;
            continue;
          case 19:
            int num9 = this.addMove(x.File - num3, x.Rank - num3, x) ? 946175793 : (num9 = 933617684);
            num1 = num9 ^ (int) num6 * -892953319;
            continue;
          case 20:
            int num10;
            num1 = num10 = num2 < 8 ? -1956178018 : (num10 = -701069683);
            continue;
          case 21:
            int num11 = !flag2 ? 1859304473 : (num11 = 646994203);
            num1 = num11 ^ (int) num6 * 1925546971;
            continue;
          case 22:
            num1 = -1475477666;
            continue;
          case 23:
            num5 = 1;
            num1 = -683546553;
            continue;
          case 24:
            ++num4;
            num1 = (int) num6 * 409611384 ^ -460924302;
            continue;
          case 25:
            int num12 = !flag3 ? -1977065360 : (num12 = -1003453733);
            num1 = num12 ^ (int) num6 * -676409723;
            continue;
          case 26:
            num1 = (int) num6 * 1928312114 ^ -1730334618;
            continue;
          case 27:
            num1 = -392119422;
            continue;
          case 28:
            a2 = x.File + num5;
            b1 = x.Rank - num5;
            num1 = (int) num6 * -1230885266 ^ 1250256785;
            continue;
          case 29:
            num1 = (int) num6 * 2086222241 ^ -573749990;
            continue;
          case 30:
            int num13;
            num1 = num13 = num3 < 8 ? -688007287 : (num13 = -1902141665);
            continue;
          case 31:
            num1 = (int) num6 * 1156747173 ^ -1648324388;
            continue;
          case 32:
            int num14 = !flag1 ? 2012754209 : (num14 = 1190368444);
            num1 = num14 ^ (int) num6 * 387120297;
            continue;
          case 33:
            ++num2;
            num1 = (int) num6 * -1269513303 ^ -1606989408;
            continue;
          case 34:
            flag2 = this.addMove(a2, b1, x);
            num1 = (int) num6 * -218363629 ^ 605408391;
            continue;
          case 35:
            num1 = -351454317;
            continue;
          case 36:
            num1 = (int) num6 * 908339577 ^ 1541198906;
            continue;
          default:
            goto label_39;
        }
      }
label_3:
      return;
label_39:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = -2023830642;
      while (true)
      {
        uint num2;
        bool flag1;
        int File;
        int Rank;
        Square sq;
        bool flag2;
        int[] numArray1;
        int index;
        int[] numArray2;
        bool isEmpty;
        ChessPiece piece;
        bool flag3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -882760976)) % 27U)
        {
          case 0:
            num3 = Rank > 7 ? 1 : 0;
            goto label_22;
          case 1:
            num1 = (int) num2 * 1124812261 ^ 367194656;
            continue;
          case 2:
            num1 = (int) num2 * -1582652023 ^ -1309155673;
            continue;
          case 3:
            int num4 = !flag3 ? 1036655101 : (num4 = 964928156);
            num1 = num4 ^ (int) num2 * -2103294324;
            continue;
          case 4:
            File = x.File + numArray2[index];
            num1 = -948581509;
            continue;
          case 5:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * -416214837 ^ -1985141246;
            continue;
          case 6:
            sq = this.board[File, Rank];
            num1 = -779355562;
            continue;
          case 7:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 128099917 ^ 2076616777;
            continue;
          case 8:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 2134979175 ^ -104761913;
            continue;
          case 9:
            flag3 = index < 8;
            num1 = -928488608;
            continue;
          case 10:
            ++index;
            num1 = -633825152;
            continue;
          case 11:
            goto label_3;
          case 12:
            flag2 = sq.Piece.Color != x.Piece.Color;
            num1 = -616891351;
            continue;
          case 13:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206F‮‎⁯‬‌‪‌⁫‭‌⁫⁮⁮‪‪⁯‭‫⁯‫‍‪‍‭‍⁭‬‫‎‭⁭‍‏⁭⁬‌⁫​‌‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray2 = numArray3;
            num1 = (int) num2 * 1868453049 ^ -2044304291;
            continue;
          case 14:
            int num5 = flag1 ? -735521931 : (num5 = -1410654579);
            num1 = num5 ^ (int) num2 * -412420609;
            continue;
          case 15:
            piece = x.Piece;
            num1 = (int) num2 * 1140043716 ^ 39351249;
            continue;
          case 16:
            int num6 = !isEmpty ? 1943937013 : (num6 = 245906319);
            num1 = num6 ^ (int) num2 * 1690475046;
            continue;
          case 17:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206F‮‎⁯‬‌‪‌⁫‭‌⁫⁮⁮‪‪⁯‭‫⁯‫‍‪‍‭‍⁭‬‫‎‭⁭‍‏⁭⁬‌⁫​‌‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray1 = numArray4;
            index = 0;
            num1 = (int) num2 * 1988871674 ^ -1349447480;
            continue;
          case 18:
            int num7 = !flag2 ? 1325486577 : (num7 = 35956322);
            num1 = num7 ^ (int) num2 * 1076191203;
            continue;
          case 19:
            num1 = (int) num2 * -674558428 ^ 1378515962;
            continue;
          case 20:
            Rank = x.Rank + numArray1[index];
            num1 = (int) num2 * -1466524302 ^ -1809449027;
            continue;
          case 21:
            goto label_1;
          case 22:
            if (File <= 7)
            {
              num1 = (int) num2 * 1905061653 ^ -2007574314;
              continue;
            }
            break;
          case 23:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 563083279 ^ 1582823404;
              continue;
            }
            break;
          case 24:
            if (File >= 0)
            {
              num1 = (int) num2 * 1399099967 ^ -577477405;
              continue;
            }
            break;
          case 25:
            num1 = -84524482;
            continue;
          case 26:
            num1 = (int) num2 * 2131445783 ^ -1652190692;
            continue;
          default:
            goto label_34;
        }
        num3 = 1;
label_22:
        flag1 = num3 != 0;
        num1 = -1210290660;
      }
label_3:
      return;
label_34:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
      ChessPiece piece = x.Piece;
      Square sq = this.board[a, b];
label_1:
      int num1 = -544795703;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1526884656)) % 4U)
        {
          case 0:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -2038761585 ^ -1369681094;
            continue;
          case 1:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * 1781304952 ^ -1218614948;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_9;
label_1:
      int num1 = 1164548245;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        bool flag3;
        bool isEmpty;
        bool flag4;
        ChessPiece piece;
        Square sq;
        UserAction kind;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1564853148)) % 29U)
        {
          case 1:
            this.IsOnCheck = true;
            num1 = (int) num2 * -920275323 ^ 1473569216;
            continue;
          case 2:
            sq = this.board[a, b];
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * 809663258 ^ -1291392268;
            continue;
          case 3:
            if (a <= 7)
            {
              num1 = (int) num2 * 1335586557 ^ -2099909949;
              continue;
            }
            goto label_9;
          case 4:
            num1 = (int) num2 * 423609862 ^ 1861221655;
            continue;
          case 5:
            goto label_1;
          case 6:
            if (x.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -2072144625 ^ 1314943631;
              continue;
            }
            num3 = 0;
            break;
          case 7:
            kind = UserAction.Capture;
            flag4 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * -185552698 ^ 1254536356;
            continue;
          case 8:
            int num4 = flag2 ? -2005758096 : (num4 = -451568396);
            num1 = num4 ^ (int) num2 * -309520267;
            continue;
          case 9:
            num1 = (int) num2 * -396518927 ^ -1868526827;
            continue;
          case 10:
            flag1 = true;
            num1 = (int) num2 * 93772258 ^ 1759757533;
            continue;
          case 11:
            int num5;
            num1 = num5 = sq.Piece.Color == x.Piece.Color ? 1227969805 : (num5 = 43456982);
            continue;
          case 12:
            num1 = (int) num2 * -1404582578 ^ -811131925;
            continue;
          case 13:
            flag1 = false;
            num1 = 1020074122;
            continue;
          case 14:
            int num6 = isEmpty ? 44999893 : (num6 = 1584879511);
            num1 = num6 ^ (int) num2 * 2022497747;
            continue;
          case 15:
            num1 = (int) num2 * -208456287 ^ -1226219152;
            continue;
          case 16:
            num1 = (int) num2 * 838407356 ^ -70562273;
            continue;
          case 17:
            flag1 = true;
            num1 = (int) num2 * -1701812536 ^ -1922352685;
            continue;
          case 18:
            int num7 = flag4 ? -1863211109 : (num7 = -1391671701);
            num1 = num7 ^ (int) num2 * -309797407;
            continue;
          case 19:
            num1 = 604409911;
            continue;
          case 20:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 21:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 2004467190 ^ -1932326633;
            continue;
          case 22:
            goto label_8;
          case 23:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = 453187511;
            continue;
          case 24:
            piece = x.Piece;
            num1 = 1972513979;
            continue;
          case 25:
            if (b >= 0)
            {
              num1 = (int) num2 * -1901703830 ^ -267904345;
              continue;
            }
            goto label_9;
          case 26:
            int num8 = !flag3 ? -364264986 : (num8 = -35030992);
            num1 = num8 ^ (int) num2 * -1412549202;
            continue;
          case 27:
            flag1 = true;
            num1 = 1576917907;
            continue;
          case 28:
            this.KingColorOnCheck = sq.Piece.Color;
            num1 = (int) num2 * 1824602764 ^ -974488397;
            continue;
          default:
            goto label_37;
        }
        flag3 = num3 != 0;
        num1 = 101904506;
      }
label_8:
      int num9 = b > 7 ? 1 : 0;
      goto label_10;
label_37:
      return flag1;
label_9:
      num9 = 1;
label_10:
      flag2 = num9 != 0;
      num1 = 1524037832;
      goto label_2;
    }

    static void \u206F‮‎⁯‬‌‪‌⁫‭‌⁫⁮⁮‪‪⁯‭‫⁯‫‍‪‍‭‍⁭‬‫‎‭⁭‍‏⁭⁬‌⁫​‌‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
