// Decompiled with JetBrains decompiler
// Type: svchost.Other.BrowserHandler
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using svchost.My;
using System;
using System.Diagnostics;

namespace svchost.Other
{
  [StandardModule]
  [OptionText]
  internal sealed class BrowserHandler
  {
    public static void OpenWebPage(string URL)
    {
      if (MyProject.Computer.Info.OSFullName.Contains("10"))
        BrowserHandler.OpenWebPageWind10(URL);
      else
        BrowserHandler.OpenWebPageOther(URL);
    }

    private static string getDefaultBrowser()
    {
      string empty = string.Empty;
      using (RegistryKey registryKey1 = MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Clients\\StartmenuInternet"))
      {
        string Right = registryKey1.GetValue("").ToString();
        using (RegistryKey registryKey2 = MyProject.Computer.Registry.LocalMachine.OpenSubKey(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "SOFTWARE\\", Interaction.IIf(Operators.CompareString(Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"), "AMD64", true) == 0, (object) "Wow6432Node\\", (object) "")), (object) "Clients\\StartMenuInternet\\"), (object) Right))))
          return registryKey2.GetValue("").ToString();
      }
    }

    public static void OpenWebPageWind10(string URL)
    {
      try
      {
        if (BrowserHandler.getDefaultBrowserWin10().Contains("Firefox"))
          Process.Start("firefox", URL);
        else if (BrowserHandler.getDefaultBrowserWin10().Contains("IE"))
          Process.Start("iexplore", URL);
        else if (BrowserHandler.getDefaultBrowserWin10().Contains("Chrome"))
          Process.Start("chrome", URL);
        else
          Process.Start(URL);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void OpenWebPageOther(string URL)
    {
      try
      {
        string defaultBrowser = BrowserHandler.getDefaultBrowser();
        if (Operators.CompareString(defaultBrowser, "Internet Explorer", true) == 0)
          Process.Start("iexplore", URL);
        else if (Operators.CompareString(defaultBrowser, "Mozilla Firefox", true) == 0)
        {
          Process.Start("firefox", URL);
        }
        else
        {
          if (Operators.CompareString(defaultBrowser, "Google Chrome", true) != 0)
            return;
          Process.Start("chrome", URL);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static string getDefaultBrowserWin10()
    {
      string empty = string.Empty;
      using (RegistryKey registryKey = MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice"))
        return registryKey.GetValue("ProgId").ToString();
    }
  }
}
