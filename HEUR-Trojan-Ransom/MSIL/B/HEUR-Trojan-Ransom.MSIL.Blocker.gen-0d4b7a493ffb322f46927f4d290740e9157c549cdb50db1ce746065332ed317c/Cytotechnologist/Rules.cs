// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ByteTokenEncodi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 9BCE2B70-1A4C-43FA-BCC8-8DBBEE1C54F3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0d4b7a493ffb322f46927f4d290740e9157c549cdb50db1ce746065332ed317c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -157704085;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1014588954)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1523117716 ^ -854319240;
            continue;
          case 1:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -40040380 ^ 763183698;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -1265135319;
      int aIndex;
      float[] numArray;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1738494349)) % 8U)
        {
          case 0:
            riskChances = numArray;
            num1 = (int) num2 * -181936294 ^ -2106409170;
            continue;
          case 1:
            num1 = (int) num2 * -52678435 ^ -1761857387;
            continue;
          case 2:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * 205045413 ^ 1428696360;
            continue;
          case 3:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -1673591265 : (num3 = -233054565);
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -1529728948;
            continue;
          case 6:
            goto label_1;
          case 7:
            ++aIndex;
            num1 = (int) num2 * 67147745 ^ 447371295;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 1949487613;
      int num2;
      int aIndex1;
      bool flag1;
      List<Card> cardList;
      Card[] array;
      int aIndex2;
      int count;
      JSONNode jsonNode;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 398590100)) % 21U)
        {
          case 0:
            goto label_1;
          case 1:
            aIndex1 = 0;
            num1 = (int) num3 * -688628028 ^ -1088133189;
            continue;
          case 2:
            ++num2;
            num1 = (int) num3 * -1051864571 ^ -542300495;
            continue;
          case 3:
            array = cardList.ToArray();
            num1 = (int) num3 * -513647782 ^ -1769323069;
            continue;
          case 4:
            num2 = 0;
            num1 = 134088276;
            continue;
          case 5:
            ++aIndex2;
            num1 = (int) num3 * -231470662 ^ -1166172827;
            continue;
          case 6:
            flag2 = num2 < jsonNode[aIndex1].AsInt;
            num1 = 1091640178;
            continue;
          case 7:
            aIndex2 = 0;
            num1 = (int) num3 * -1141956129 ^ 789051851;
            continue;
          case 8:
            count = json.Count;
            cardList = new List<Card>();
            num1 = (int) num3 * -62413024 ^ 1907108394;
            continue;
          case 9:
            num1 = (int) num3 * -695719741 ^ -1825919025;
            continue;
          case 10:
            int num4;
            num1 = num4 = aIndex2 >= count ? 1279658724 : (num4 = 1080570358);
            continue;
          case 11:
            num1 = (int) num3 * 1544291958 ^ 2118308556;
            continue;
          case 12:
            int num5 = flag1 ? 2034505433 : (num5 = 183160364);
            num1 = num5 ^ (int) num3 * -359178383;
            continue;
          case 13:
            flag1 = aIndex1 < maxImpact * 2;
            num1 = 1704212594;
            continue;
          case 14:
            jsonNode = json[aIndex2];
            num1 = 742938025;
            continue;
          case 15:
            ++aIndex1;
            num1 = (int) num3 * 1260406847 ^ 1697438246;
            continue;
          case 16:
            num1 = (int) num3 * 986297803 ^ 896268915;
            continue;
          case 18:
            num1 = (int) num3 * 1815157178 ^ -121503707;
            continue;
          case 19:
            bool flag3 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 951187775;
            continue;
          case 20:
            int num6 = !flag2 ? 1173986889 : (num6 = 547568520);
            num1 = num6 ^ (int) num3 * -2100645179;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1019991163;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1938681841)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -77419597 ^ -2124472973;
            continue;
          case 2:
            str = Rules.\u206A‫‪‮‎‍‬‎⁬‭‏⁬​⁫‮‫‪⁯‬⁯‪⁫⁫⁬‫⁬‬⁪⁬⁭⁫⁯⁪​‌‎⁫‮​‬‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 1231411842 ^ 143526962;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 1823427873;
      int index;
      Card[] cards;
      Card card1;
      int num2;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1716921616)) % 16U)
        {
          case 0:
            num1 = (int) num3 * 7178794 ^ -785517464;
            continue;
          case 1:
            str1 = "[\n\t";
            num2 = 0;
            num1 = (int) num3 * -1953897809 ^ 1355070352;
            continue;
          case 2:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202D​‪⁭‭⁬​⁮⁯‬⁬‭‌⁪⁮‎‫⁮⁯⁭⁬‏⁪⁫‪​​‏‫‍‬⁭⁬‌⁪‍​‏‫⁭‮((object) card2) : (string) null;
            str1 = Rules.\u206F‮‮‍‬⁬​⁮⁬‮‬⁭‬‏‮‭‮‎‮⁬‮⁪‌‮‫‪⁯⁬‪‭​‮⁫‍⁬‍⁪‮⁮‭‮(str3, str4, " ");
            num1 = 1906253392;
            continue;
          case 3:
            num1 = (int) num3 * 1627668462 ^ 1273686078;
            continue;
          case 5:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -1457039489 ^ -1835394035;
            continue;
          case 6:
            int num4 = !flag ? 991614996 : (num4 = 361106620);
            num1 = num4 ^ (int) num3 * -117955495;
            continue;
          case 7:
            int num5;
            num1 = num5 = index >= cards.Length ? 149673833 : (num5 = 390645404);
            continue;
          case 8:
            ++index;
            num1 = (int) num3 * -1923573732 ^ 22761335;
            continue;
          case 9:
            str2 = Rules.\u206B⁭⁮‏‎⁪⁯‌⁭⁮‌​‏‌⁫‬‌‮⁪‮⁭⁫⁬⁭⁬‎‌‪‫⁫​​‏‍​‎‪⁯⁬‮(str1, "\n]");
            num1 = (int) num3 * -1600220359 ^ 1364680962;
            continue;
          case 10:
            str1 = Rules.\u206B⁭⁮‏‎⁪⁯‌⁭⁮‌​‏‌⁫‬‌‮⁪‮⁭⁫⁬⁭⁬‎‌‪‫⁫​​‏‍​‎‪⁯⁬‮(str1, "\n\t");
            num1 = (int) num3 * 1660386324 ^ 943754869;
            continue;
          case 11:
            goto label_1;
          case 12:
            card1 = cards[index];
            num1 = 1094584149;
            continue;
          case 13:
            num2 = card1.Type;
            num1 = (int) num3 * 1394854525 ^ -1071016677;
            continue;
          case 14:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1139071326 ^ 1811102571;
            continue;
          case 15:
            num1 = (int) num3 * -1752825578 ^ 717128644;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 1424685307;
      string str1;
      string str2;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 565489188)) % 9U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * -136230066 ^ -949087499;
            continue;
          case 1:
            str1 = Rules.\u206B⁭⁮‏‎⁪⁯‌⁭⁮‌​‏‌⁫‬‌‮⁪‮⁭⁫⁬⁭⁬‎‌‪‫⁫​​‏‍​‎‪⁯⁬‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200F‌‬​‎⁬‍⁭‮‮‎⁬⁬‮⁫‎‮⁯⁮⁪⁮‪⁮⁮⁫⁪‫⁫⁭⁫‭⁮​‫‌‬‍‮‏⁮‮()));
            num1 = (int) num2 * 1249038716 ^ 358505161;
            continue;
          case 2:
            index = 1;
            num1 = (int) num2 * 607686197 ^ 1673928306;
            continue;
          case 4:
            int num3 = !flag ? -1532489070 : (num3 = -1147987123);
            num1 = num3 ^ (int) num2 * 2135055855;
            continue;
          case 5:
            flag = index < this.RiskChances.Length;
            num1 = 676642954;
            continue;
          case 6:
            str1 = Rules.\u206F‮‮‍‬⁬​⁮⁬‮‬⁭‬‏‮‭‮‎‮⁬‮⁪‌‮‫‪⁯⁬‪‭​‮⁫‍⁬‍⁪‮⁮‭‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200F‌‬​‎⁬‍⁭‮‮‎⁬⁬‮⁫‎‮⁯⁮⁪⁮‪⁮⁮⁫⁪‫⁫⁭⁫‭⁮​‫‌‬‍‮‏⁮‮()));
            num1 = 2030248447;
            continue;
          case 7:
            str2 = Rules.\u206B⁭⁮‏‎⁪⁯‌⁭⁮‌​‏‌⁫‬‌‮⁪‮⁭⁫⁬⁭⁬‎‌‪‫⁫​​‏‍​‎‪⁯⁬‮(str1, " ]");
            num1 = (int) num2 * -150567099 ^ 49385076;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u206A‫‪‮‎‍‬‎⁬‭‏⁬​⁫‮‫‪⁯‬⁯‪⁫⁫⁬‫⁬‬⁪⁬⁭⁫⁯⁪​‌‎⁫‮​‬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206B⁭⁮‏‎⁪⁯‌⁭⁮‌​‏‌⁫‬‌‮⁪‮⁭⁫⁬⁭⁬‎‌‪‫⁫​​‏‍​‎‪⁯⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202D​‪⁭‭⁬​⁮⁯‬⁬‭‌⁪⁮‎‫⁮⁯⁭⁬‏⁪⁫‪​​‏‫‍‬⁭⁬‌⁪‍​‏‫⁭‮([In] object obj0) => obj0.ToString();

    static string \u206F‮‮‍‬⁬​⁮⁬‮‬⁭‬‏‮‭‮‎‮⁬‮⁪‌‮‫‪⁯⁬‪‭​‮⁫‍⁬‍⁪‮⁮‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200F‌‬​‎⁬‍⁭‮‮‎⁬⁬‮⁫‎‮⁯⁮⁪⁮‪⁮⁮⁫⁪‫⁫⁭⁫‭⁮​‫‌‬‍‮‏⁮‮() => CultureInfo.InvariantCulture;
  }
}
