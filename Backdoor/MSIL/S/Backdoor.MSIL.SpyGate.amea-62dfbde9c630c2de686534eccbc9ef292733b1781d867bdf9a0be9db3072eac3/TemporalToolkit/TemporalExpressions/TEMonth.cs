// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEMonth
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;
using System.Runtime.InteropServices;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEMonth : TemporalExpression
  {
    public Month Start { get; set; }

    public Month? End { get; set; }

    public TEMonth(DateTime date)
    {
label_1:
      int num1 = -1924010634;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2105375677)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -356852210 ^ -1980321913;
            continue;
          case 2:
            this.Start = Month.January;
            this.End = new Month?();
            num1 = (int) num2 * 169098650 ^ 1712799819;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public TEMonth(int month)
    {
      this.Start = month <= 12 && month >= 1 ? (Month) month : throw TEMonth.\u200B‎‮‍‫⁫‬⁮‮‭‌⁭⁮‫‍‮‭‫​​‏‬‬⁮​‮‪‌⁮‍‌⁬‍‫‬⁪‍‌‬‍‮(\u003CModule\u003E.\u206C‮⁬⁭​⁭‬⁫‌⁯‬⁪‫⁯​‎⁯⁬⁯‭‮⁪⁪‮‮⁮⁪‏⁮‪‎⁬‫‏⁭⁪‮⁫‮⁮‮<string>(2950301556U));
      this.End = new Month?();
    }

    public TEMonth(Month month)
    {
      this.Start = month;
      this.End = new Month?();
    }

    public TEMonth(Month start, Month end)
    {
      this.Start = start;
      this.End = new Month?(end);
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = -42946221;
      bool flag1;
      while (true)
      {
        uint num2;
        Month? end;
        bool flag2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1713086309)) % 16U)
        {
          case 0:
            num1 = (int) num2 * -1486219614 ^ -1666920226;
            continue;
          case 1:
            num1 = (int) num2 * 242832 ^ 1566575253;
            continue;
          case 2:
            int month1 = aDate.Month;
            end = this.End;
            int num5 = (int) end.Value;
            if (month1 > num5)
            {
              num1 = (int) num2 * 986142719 ^ 1918272414;
              continue;
            }
            num3 = 1;
            break;
          case 3:
            flag1 = this.Start == (Month) aDate.Month;
            num1 = -227387110;
            continue;
          case 4:
            num1 = (int) num2 * -1460458984 ^ -19794971;
            continue;
          case 5:
            int month2 = aDate.Month;
            end = this.End;
            int num6 = (int) end.Value;
            if (month2 > num6)
            {
              num4 = 0;
              goto label_19;
            }
            else
            {
              num1 = (int) num2 * 491970932 ^ -1986203853;
              continue;
            }
          case 6:
            num1 = -341054615;
            continue;
          case 7:
            flag2 = end.Value >= this.Start;
            num1 = (int) num2 * -365242534 ^ 2098240416;
            continue;
          case 8:
            end = this.End;
            num1 = (int) num2 * -840131656 ^ 1686050034;
            continue;
          case 9:
            int num7 = !end.HasValue ? -1976927705 : (num7 = -130666069);
            num1 = num7 ^ (int) num2 * -2138336313;
            continue;
          case 10:
            goto label_1;
          case 11:
            num3 = (Month) aDate.Month >= this.Start ? 1 : 0;
            break;
          case 12:
            num4 = (Month) aDate.Month >= this.Start ? 1 : 0;
            goto label_19;
          case 13:
            int num8 = !flag2 ? 1415497193 : (num8 = 1900615487);
            num1 = num8 ^ (int) num2 * 1998894436;
            continue;
          case 15:
            end = this.End;
            num1 = (int) num2 * -2027798729 ^ -1394940555;
            continue;
          default:
            goto label_23;
        }
        flag1 = num3 != 0;
        num1 = -655582193;
        continue;
label_19:
        flag1 = num4 != 0;
        num1 = -1944975867;
      }
label_23:
      return flag1;
    }

    static ArgumentOutOfRangeException \u200B‎‮‍‫⁫‬⁮‮‭‌⁭⁮‫‍‮‭‫​​‏‬‬⁮​‮‪‌⁮‍‌⁬‍‫‬⁪‍‌‬‍‮(
      [In] string obj0)
    {
      return new ArgumentOutOfRangeException(obj0);
    }
  }
}
