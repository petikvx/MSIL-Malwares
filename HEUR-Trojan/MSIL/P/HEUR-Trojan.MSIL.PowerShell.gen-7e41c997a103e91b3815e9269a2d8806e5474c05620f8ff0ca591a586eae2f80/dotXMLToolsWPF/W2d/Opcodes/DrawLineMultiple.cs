// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.W2d.Opcodes.DrawLineMultiple
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace dotXMLToolsWPF.W2d.Opcodes
{
  public struct DrawLineMultiple : IOpcode
  {
    public static readonly byte Id = 140;
    public readonly DrawLineShort[] Lines;

    public DrawLineMultiple(IEnumerable<DrawLineShort> lines)
      : this()
    {
      this.Lines = lines.ToArray<DrawLineShort>();
    }

    public CoordinatesType CoordinatesType => CoordinatesType.Relative;

    public class Factory : OpcodeFactory, ISingleByteOpcodeFactory
    {
      private static readonly DrawLineShort.Factory _DrawLineShortFactory = new DrawLineShort.Factory();

      public int OpcodeId => (int) DrawLineMultiple.Id;

      public override IOpcode ReadOpcode(Stream stream)
      {
        byte length = OpcodeFactory.ReadUnsignedByte(stream);
        DrawLineShort[] lines = new DrawLineShort[(int) length];
        for (int index = 0; index < (int) length; ++index)
          lines[index] = (DrawLineShort) DrawLineMultiple.Factory._DrawLineShortFactory.ReadOpcode(stream);
        return (IOpcode) new DrawLineMultiple((IEnumerable<DrawLineShort>) lines);
      }
    }
  }
}
