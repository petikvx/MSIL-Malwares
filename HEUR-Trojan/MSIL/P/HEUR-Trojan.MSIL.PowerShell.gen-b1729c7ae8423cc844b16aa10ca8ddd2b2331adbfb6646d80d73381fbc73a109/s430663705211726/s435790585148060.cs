// Decompiled with JetBrains decompiler
// Type: s430663705211726.s435790585148060
// Assembly: s968508024776124, Version=2.0.47.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: E3596912-35E7-405B-A05A-F5F12AB5E292
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-b1729c7ae8423cc844b16aa10ca8ddd2b2331adbfb6646d80d73381fbc73a109.exe

using s084803648469506;
using s206683195330003;
using s281263176400562;
using s375012979798828;
using s392159531523887;
using s496354618597361;
using s596259820889768;
using s608480027755992;
using s720612247931570;
using s827992872880859;
using s831499078525373;
using s861533304863238;
using s980438210111899;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace s430663705211726
{
  public sealed class s435790585148060 : IDisposable
  {
    private s996935620943990 s814302791303946;
    private string s247899401572688;
    internal List<string> s475426342862647;
    internal TextWriter s472927214603781;
    private List<string> s345949115705178;
    private DateTime s177037381132416;
    private string s667212349753247;
    private string s448506335398179;
    private s900448252129696<string, s389047933096245> s551613939726783;
    private s900448252129696<s435790585148060.s382375549924857, string> s385570428570992;
    private string s947327536048771;

    public s435790585148060(TextWriter log, string nt_symbol_path = null)
    {
      this.s472927214603781 = log;
      this.s551613939726783 = new s900448252129696<string, s389047933096245>(10);
      this.s385570428570992 = new s900448252129696<s435790585148060.s382375549924857, string>(10);
      this.s947327536048771 = nt_symbol_path;
      if (this.s947327536048771 == null)
        this.s947327536048771 = s434060066659844.s400210463566645;
      log.WriteLine("Created s435790585148060 with SymbolPath {0}", (object) this.s947327536048771);
      s434060066659844 s434060066659844_1 = new s434060066659844(this.s951718356567001);
      s434060066659844 s434060066659844_2 = new s434060066659844();
      foreach (s510332200009347 s792982884493650 in (IEnumerable<s510332200009347>) s434060066659844_1.s961392083075505)
      {
        s434060066659844_2.s645172089134810(s792982884493650);
        if (!s792982884493650.s716760580544950)
        {
          string str1 = Path.Combine(s792982884493650.s165124766661382, "dll");
          if (Directory.Exists(str1))
            s434060066659844_2.s223464777124550(str1);
          string str2 = Path.Combine(s792982884493650.s165124766661382, "exe");
          if (Directory.Exists(str2))
            s434060066659844_2.s223464777124550(str2);
        }
      }
      this.s947327536048771 = s434060066659844_2.ToString();
    }

    public string s421965818717042(string s921295171609133, bool s222560465075942 = false)
    {
      this.s472927214603781.WriteLine("FindSymbolFilePathForModule: searching for PDB for DLL {0}.", (object) s921295171609133);
      try
      {
        s921295171609133 = s435790585148060.s297445822149510(s921295171609133);
        if (File.Exists(s921295171609133))
        {
          using (s201548822181988 s201548822181988 = new s201548822181988(s921295171609133))
          {
            string s829541715749206;
            Guid s575593211458573;
            int s302084413933267;
            if (s201548822181988.s782853471849472(out s829541715749206, out s575593211458573, out s302084413933267, !s222560465075942))
            {
              string s552697994295416 = (string) null;
              s265107053941038 s265107053941038 = s201548822181988.s035114760393254();
              if (s265107053941038 != null)
                s552697994295416 = s265107053941038.s263010181332728;
              string str = this.s686953150455467(s829541715749206, s575593211458573, s302084413933267, s921295171609133, s552697994295416);
              if (str == null && (0 <= s921295171609133.IndexOf(".ni.", StringComparison.OrdinalIgnoreCase) || s201548822181988.s618415157162403))
              {
                if ((this.s640920822593308 & s996935620943990.NoNGenSymbolCreation) != s996935620943990.None)
                {
                  this.s472927214603781.WriteLine("FindSymbolFilePathForModule: Could not find NGEN image, NoNGenPdb set, giving up.");
                }
                else
                {
                  this.s472927214603781.WriteLine("FindSymbolFilePathForModule: Could not find PDB for NGEN image, Trying to generate it.");
                  str = this.s204217166642935(Path.GetFullPath(s921295171609133));
                }
              }
              this.s472927214603781.WriteLine("FindSymbolFilePathForModule returns {0} for {1} {2} {3} {4}", (object) (str ?? "NULL"), (object) s829541715749206, (object) s575593211458573, (object) s302084413933267, (object) (s552697994295416 ?? "NULL"));
              return str;
            }
            this.s472927214603781.WriteLine("FindSymbolFilePathForModule: {0} does not have a codeview debug signature.", (object) s921295171609133);
          }
        }
        else
          this.s472927214603781.WriteLine("FindSymbolFilePathForModule: {0} does not exist.", (object) s921295171609133);
      }
      catch (Exception ex)
      {
        this.s472927214603781.WriteLine("FindSymbolFilePathForModule: Failure opening PE file: {0}", (object) ex.Message);
      }
      this.s472927214603781.WriteLine("[Failed to find PDB file for DLL {0}]", (object) s921295171609133);
      return (string) null;
    }

    public string s686953150455467(
      string s527106938930506,
      Guid s541877679444789,
      int s508494266935918,
      string s815808269041090 = null,
      string s552697994295416 = "")
    {
      this.s472927214603781.WriteLine("FindSymbolFilePath: *{{ Locating PDB {0} GUID {1} Age {2} Version {3}", (object) s527106938930506, (object) s541877679444789, (object) s508494266935918, (object) s552697994295416);
      if (s815808269041090 != null)
        this.s472927214603781.WriteLine("FindSymbolFilePath: Pdb is for DLL {0}", (object) s815808269041090);
      s435790585148060.s382375549924857 s382375549924857_1 = new s435790585148060.s382375549924857();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      (^(s124532765434765.s583869561809011&) ref s382375549924857_1).s318625857757190 = s527106938930506;
      s382375549924857_1.s599721232320144 = s541877679444789;
      s382375549924857_1.s022678996988242 = s508494266935918;
      s435790585148060.s382375549924857 s382375549924857_2 = s382375549924857_1;
      string str1 = (string) null;
      if (this.s385570428570992.TryGet(s382375549924857_2, ref str1))
      {
        this.s472927214603781.WriteLine("FindSymbolFilePath: }} Hit Cache, returning {0}", str1 != null ? (object) s527106938930506 : (object) "NULL");
        return str1;
      }
      string str2 = (string) null;
      string fileName = Path.GetFileName(s527106938930506);
      if (str1 == null && s815808269041090 != null)
      {
        this.s472927214603781.WriteLine("FindSymbolFilePath: Checking relative to DLL path {0}", (object) s815808269041090);
        string s983680833351803_1 = Path.Combine(Path.GetDirectoryName(s815808269041090), Path.GetFileName(s527106938930506));
        if (this.s048910704496564(s983680833351803_1, s541877679444789, s508494266935918))
          str1 = s983680833351803_1;
        if (str1 == null)
        {
          string s983680833351803_2 = Path.Combine(Path.GetDirectoryName(s815808269041090), "symbols.pri\\retail\\dll\\" + Path.GetFileName(s527106938930506));
          if (this.s048910704496564(s983680833351803_2, s541877679444789, s508494266935918))
            str1 = s983680833351803_2;
        }
        if (str1 == null)
        {
          string s983680833351803_3 = Path.Combine(Path.GetDirectoryName(s815808269041090), "symbols\\retail\\dll\\" + Path.GetFileName(s527106938930506));
          if (this.s048910704496564(s983680833351803_3, s541877679444789, s508494266935918))
            str1 = s983680833351803_3;
        }
      }
      if (str1 == null && 0 < s527106938930506.IndexOf('\\') && this.s048910704496564(s527106938930506, s541877679444789, s508494266935918))
        str1 = s527106938930506;
      if (str1 == null)
      {
        s434060066659844 s434060066659844 = new s434060066659844(this.s951718356567001);
        foreach (s510332200009347 s510332200009347 in (IEnumerable<s510332200009347>) s434060066659844.s961392083075505)
        {
          if (s510332200009347.s716760580544950)
          {
            if (str2 == null)
              str2 = fileName + "\\" + s541877679444789.ToString("N").ToUpper() + s508494266935918.ToString() + "\\" + fileName;
            string path1 = s510332200009347.s591646264667756 ?? s434060066659844.s218113742055380();
            str1 = this.s466738196778296(s510332200009347.s165124766661382, str2, Path.Combine(path1, str2));
          }
          else
          {
            string s983680833351803 = Path.Combine(s510332200009347.s165124766661382, fileName);
            if ((this.s640920822593308 & s996935620943990.CacheOnly) == s996935620943990.None || !s510332200009347.s888663747703038)
            {
              if (this.s048910704496564(s983680833351803, s541877679444789, s508494266935918, false))
                str1 = s983680833351803;
            }
            else
              this.s472927214603781.WriteLine("FindSymbolFilePath: location {0} is remote and cacheOnly set, giving up.", (object) s983680833351803);
          }
          if (str1 != null)
            break;
        }
      }
      if (str1 != null)
      {
        // ISSUE: reference to a compiler-generated field
        if (this.s045690946070846 != null)
        {
          // ISSUE: reference to a compiler-generated field
          this.s045690946070846(str1, s541877679444789, s508494266935918);
        }
        this.s472927214603781.WriteLine("FindSymbolFilePath: *}} Successfully found PDB {0} GUID {1} Age {2} Version {3}", (object) str1, (object) s541877679444789, (object) s508494266935918, (object) s552697994295416);
      }
      else
      {
        string str3 = "";
        if ((this.s640920822593308 & s996935620943990.CacheOnly) != s996935620943990.None)
          str3 = " in local cache";
        this.s472927214603781.WriteLine("FindSymbolFilePath: *}} Failed to find PDB {0}{1} GUID {2} Age {3} Version {4}", (object) fileName, (object) str3, (object) s541877679444789, (object) s508494266935918, (object) s552697994295416);
      }
      this.s385570428570992.Add(s382375549924857_2, str1);
      return str1;
    }

    public string s028299625204067(
      string s191728620697672,
      int s612266133469163,
      int s536221950004254,
      bool s784208775550827 = false)
    {
      string str1 = (string) null;
      s434060066659844 s434060066659844 = new s434060066659844(this.s951718356567001);
      foreach (s510332200009347 s510332200009347 in (IEnumerable<s510332200009347>) s434060066659844.s961392083075505)
      {
        if (s510332200009347.s716760580544950)
        {
          if (str1 == null)
            str1 = s191728620697672 + "\\" + s612266133469163.ToString("x") + s536221950004254.ToString("x") + "\\" + s191728620697672;
          string path1 = s510332200009347.s591646264667756 ?? s434060066659844.s218113742055380();
          string str2 = this.s466738196778296(s510332200009347.s165124766661382, str1, Path.Combine(path1, str1));
          if (str2 != null)
            return str2;
        }
        else if (!s784208775550827)
        {
          string str3 = Path.Combine(s510332200009347.s165124766661382, s191728620697672);
          this.s472927214603781.WriteLine("Probing file {0}", (object) str3);
          if (File.Exists(str3))
          {
            using (s201548822181988 s201548822181988 = new s201548822181988(str3))
            {
              if (s201548822181988.s908829323971250.s822618162070778 == s612266133469163 && (long) s201548822181988.s908829323971250.s364788527373848 == (long) s536221950004254)
                return str3;
              this.s472927214603781.WriteLine("Found file {0} but file timestamp:size {1}:{2} != desired {3}:{4}, rejecting.", (object) str3, (object) s201548822181988.s908829323971250.s822618162070778, (object) s201548822181988.s908829323971250.s364788527373848, (object) s612266133469163, (object) s536221950004254);
            }
          }
        }
      }
      return (string) null;
    }

    public s389047933096245 s410989997732674(string s349210490078763)
    {
      s389047933096245 s389047933096245;
      if (!this.s551613939726783.TryGet(s349210490078763, ref s389047933096245))
      {
        Stream stream = (Stream) File.Open(s349210490078763, FileMode.Open, FileAccess.Read, FileShare.Read);
        byte[] buffer = new byte[4];
        if (stream.Read(buffer, 0, buffer.Length) != 4)
          throw new InvalidOperationException("PDB corrupted (too small) " + s349210490078763);
        if (buffer[0] == (byte) 66 && buffer[1] == (byte) 83 && buffer[2] == (byte) 74 && buffer[3] == (byte) 66)
        {
          stream.Seek(0L, SeekOrigin.Begin);
          s389047933096245 = (s389047933096245) new s124532765434765(this, stream, s349210490078763);
        }
        else
        {
          stream.Dispose();
          s389047933096245 = (s389047933096245) new s649740525511456(this, s349210490078763);
        }
        this.s551613939726783.Add(s349210490078763, s389047933096245);
      }
      return s389047933096245;
    }

    public s649740525511456 s905848721006528(string s314198984364896) => this.s410989997732674(s314198984364896) as s649740525511456;

    public string s951718356567001
    {
      get => this.s947327536048771;
      set
      {
        this.s947327536048771 = value;
        this.s551613939726783.Clear();
        this.s385570428570992.Clear();
        this.s472927214603781.WriteLine("Symbol Path Updated to {0}", (object) this.s947327536048771);
        this.s472927214603781.WriteLine("Symbol Path update forces clearing Pdb lookup cache");
      }
    }

    public string s185486578165193
    {
      get
      {
        if (this.s247899401572688 == null)
        {
          this.s247899401572688 = Environment.GetEnvironmentVariable("_NT_SOURCE_PATH");
          if (this.s247899401572688 == null)
            this.s247899401572688 = "";
        }
        return this.s247899401572688;
      }
      set
      {
        this.s247899401572688 = value;
        this.s475426342862647 = (List<string>) null;
      }
    }

    public string s027845466956700
    {
      get
      {
        if (this.s667212349753247 == null)
          this.s667212349753247 = new s434060066659844(this.s951718356567001).s218113742055380();
        return this.s667212349753247;
      }
    }

    public string s395526091369185
    {
      get
      {
        if (this.s448506335398179 == null)
          this.s448506335398179 = Path.Combine(Environment.GetEnvironmentVariable("TEMP"), "SrcCache");
        return this.s448506335398179;
      }
      set => this.s448506335398179 = value;
    }

    public s996935620943990 s640920822593308
    {
      get => this.s814302791303946;
      set
      {
        this.s814302791303946 = value;
        this.s385570428570992.Clear();
        this.s472927214603781.WriteLine("Setting SYmbolReaderOptions forces clearing Pdb lookup cache");
      }
    }

    public Func<string, bool> s629529705812616 { get; set; }

    public event Action<string, Guid, int> s280964794531775;

    public TextWriter s682952334786273 => this.s472927214603781;

    public string s204217166642935(string s338372449922748, string s271143586914302 = null)
    {
      if (s271143586914302 == null)
        s271143586914302 = this.s027845466956700;
      if (!File.Exists(s338372449922748))
      {
        this.s472927214603781.WriteLine("Warning, NGEN image does not exist: {0}", (object) s338372449922748);
        return (string) null;
      }
      string s829541715749206;
      Guid s575593211458573;
      int s302084413933267;
      using (s201548822181988 s201548822181988 = new s201548822181988(s338372449922748))
      {
        if (!s201548822181988.s782853471849472(out s829541715749206, out s575593211458573, out s302084413933267, true))
        {
          this.s472927214603781.WriteLine("Could not get PDB signature for {0}", (object) s338372449922748);
          return (string) null;
        }
      }
      string fileName = Path.GetFileName(s829541715749206);
      string path2 = fileName + "\\" + s575593211458573.ToString("N") + s302084413933267.ToString();
      string str1 = Path.Combine(Path.Combine(s271143586914302, path2), fileName);
      if (File.Exists(str1))
        return str1;
      if (!str1.EndsWith(".ni.pdb", StringComparison.OrdinalIgnoreCase))
      {
        this.s472927214603781.WriteLine("Pdb does not have .ni.pdb suffix");
        return (string) null;
      }
      string s889294413903503;
      string path1 = s435790585148060.s591238017931873(s338372449922748, this.s472927214603781, out s889294413903503);
      if (path1 == null)
      {
        this.s472927214603781.WriteLine("Could not find CLR directory for NGEN image {0}, Trying .NET Core", (object) s338372449922748);
        return this.s031162944839709(s338372449922748, str1);
      }
      string str2 = "";
      string str3 = Path.Combine(path1, "ngen.exe");
      this.s472927214603781.WriteLine("Checking for V4.5 for NGEN image {0}", (object) str3);
      if (!File.Exists(str3))
        return (string) null;
      bool flag = false;
      using (s201548822181988 s201548822181988 = new s201548822181988(str3))
      {
        s265107053941038 s265107053941038 = s201548822181988.s035114760393254();
        if (s265107053941038 != null)
        {
          string s263010181332728 = s265107053941038.s263010181332728;
          this.s472927214603781.WriteLine("Got NGEN image file version number: {0}", (object) s263010181332728);
          Match match1 = Regex.Match(s263010181332728, "(\\d+).(\\d+)((\\d|\\.)*)");
          if (match1.Success)
          {
            int num = int.Parse(match1.Groups[1].Value) * 10 + int.Parse(match1.Groups[2].Value);
            if (num >= 46)
            {
              this.s472927214603781.WriteLine("Is a V4.6 or beyond");
              flag = true;
            }
            else if (num == 40)
            {
              Match match2 = Regex.Match(match1.Groups[3].Value, "(\\d+)$");
              if (match2.Success)
              {
                if (int.Parse(match2.Groups[1].Value) >= 16000)
                  flag = true;
              }
            }
          }
        }
      }
      s434305609096598 s610084872719370 = new s434305609096598();
      s610084872719370.s455952820099390("_NT_SYMBOL_PATH", this.s951718356567001);
      s610084872719370.s768668256682897(this.s472927214603781);
      s610084872719370.s356792493822912();
      s610084872719370.s455952820099390("COMPLUS_NGenEnableCreatePdb", "1");
      if (!flag)
        s610084872719370.s455952820099390("COMPLUS_NGenLocalWorker", "1");
      string s307750981110952 = "%PATH%;" + path1;
      s610084872719370.s455952820099390("PATH", s307750981110952);
      string str4 = str1;
      string s803618712810166 = s271143586914302;
      string str5 = (string) null;
      Match match = Regex.Match(s338372449922748, "(.*)\\\\Microsoft\\\\CLR_v(\\d+)\\.\\d+(_(\\d\\d))?\\\\NativeImages", RegexOptions.IgnoreCase);
      if (match.Success)
      {
        str5 = Path.Combine(match.Groups[1].Value, "Temp\\NGenPdb");
        s538263490857989.s638795668894298(str5);
        Directory.CreateDirectory(str5);
        s803618712810166 = str5;
        str4 = Path.Combine(str5, path2, fileName);
        this.s472927214603781.WriteLine("Updating NGEN createPdb output file to {0}", (object) str4);
      }
      if (flag)
        this.s384282474905098(this.s472927214603781, ref s338372449922748);
      try
      {
        s062136670151047 s062136670151047;
        while (true)
        {
          if (!string.IsNullOrEmpty(s889294413903503))
          {
            this.s472927214603781.WriteLine("Ngen will run for private runtime ", (object) s889294413903503);
            this.s472927214603781.WriteLine("set COMPLUS_Version=" + s889294413903503);
            s610084872719370.s455952820099390("COMPLUS_Version", s889294413903503);
          }
          string s761710075308025 = string.Format("{0}\\ngen.exe createpdb {1} {2} {3}", (object) path1, (object) s062136670151047.s304435938141627(s338372449922748), (object) s062136670151047.s304435938141627(s803618712810166), (object) str2);
          this.s472927214603781.WriteLine("set COMPLUS_NGenEnableCreatePdb=1");
          if (!flag)
            this.s472927214603781.WriteLine("set COMPLUS_NGenLocalWorker=1");
          this.s472927214603781.WriteLine("set PATH=" + s307750981110952);
          this.s472927214603781.WriteLine("set _NT_SYMBOL_PATH={0}", (object) this.s951718356567001);
          this.s472927214603781.WriteLine("*** NGEN  CREATEPDB cmdline: {0}\r\n", (object) s761710075308025);
          s062136670151047 = s062136670151047.s455031916978056(s761710075308025, s610084872719370);
          this.s472927214603781.WriteLine("*** NGEN CREATEPDB returns: {0}", (object) s062136670151047.s458846704520366);
          if (s062136670151047.s458846704520366 != 0)
          {
            if (File.Exists(str4))
              File.Delete(str4);
            if (str2.Length != 0)
            {
              this.s472927214603781.WriteLine("Ngen failed to generate pdb for {0}, trying again without /lines", (object) s338372449922748);
              str2 = "";
            }
            else
              break;
          }
          else
            break;
        }
        if (s062136670151047.s458846704520366 != 0 || !File.Exists(str4))
        {
          this.s472927214603781.WriteLine("ngen failed to generate pdb for {0} at expected location {1}", (object) s338372449922748, (object) str4);
          return (string) null;
        }
        if (str4 != str1)
        {
          Directory.CreateDirectory(Path.GetDirectoryName(str1));
          File.Copy(str4, str1);
        }
        return str1;
      }
      finally
      {
        if (str5 != null)
          s538263490857989.s638795668894298(str5);
      }
    }

    private string s031162944839709(string s292765856824673, string s811324694459016)
    {
      if (!s811324694459016.EndsWith(".ni.pdb", StringComparison.OrdinalIgnoreCase))
      {
        this.s472927214603781.WriteLine("Not a crossGen PDB {0}", (object) s811324694459016);
        return (string) null;
      }
      string directoryName1 = Path.GetDirectoryName(s292765856824673);
      string directoryName2 = Path.GetDirectoryName(s811324694459016);
      string s803618712810166 = this.s406772915668789(s292765856824673);
      if (s803618712810166 == null)
      {
        this.s472927214603781.WriteLine("Could not find Crossgen.exe to generate PDBs, giving up.");
        return (string) null;
      }
      string environmentVariable = Environment.GetEnvironmentVariable("winDir");
      if (environmentVariable == null)
        return (string) null;
      Directory.CreateDirectory(directoryName2);
      string str = s292765856824673;
      if (!str.EndsWith(".ni.dll", StringComparison.OrdinalIgnoreCase))
      {
        str = s811324694459016.Substring(0, s811324694459016.Length - 3) + "dll";
        File.Copy(s292765856824673, str);
      }
      string s761710075308025 = s062136670151047.s304435938141627(s803618712810166) + " /CreatePdb " + s062136670151047.s304435938141627(directoryName2) + " /Platform_Assemblies_Paths " + s062136670151047.s304435938141627(directoryName1) + " " + s062136670151047.s304435938141627(str);
      s434305609096598 s610084872719370 = new s434305609096598();
      s610084872719370.s768668256682897(this.s472927214603781);
      s610084872719370.s356792493822912();
      string s307750981110952 = environmentVariable + "\\Microsoft.NET\\Framework\\v4.0.30319;" + environmentVariable + "\\Microsoft.NET\\Framework64\\v4.0.30319;%PATH%";
      s610084872719370.s455952820099390("PATH", s307750981110952);
      s610084872719370.s944891987073780(directoryName1);
      this.s472927214603781.WriteLine("**** Running CrossGen");
      this.s472927214603781.WriteLine("set PATH=" + s307750981110952);
      this.s472927214603781.WriteLine("{0}\r\n", (object) s761710075308025);
      s062136670151047 s062136670151047 = s062136670151047.s455031916978056(s761710075308025, s610084872719370);
      if (str != s292765856824673)
        s916389884151353.s760644410246924(str);
      if (s062136670151047.s458846704520366 == 0 && File.Exists(s811324694459016))
        return s811324694459016;
      this.s472927214603781.WriteLine("CrossGen failed to generate {0} exit code {0}", (object) s811324694459016, (object) s062136670151047.s458846704520366);
      return (string) null;
    }

    private static string s467953938771915()
    {
      string environmentVariable1 = Environment.GetEnvironmentVariable("HOMEDRIVE");
      if (environmentVariable1 == null)
        return (string) null;
      string environmentVariable2 = Environment.GetEnvironmentVariable("HOMEPATH");
      if (environmentVariable2 == null)
        return (string) null;
      string path = environmentVariable1 + environmentVariable2 + "\\.nuget\\packages";
      return !Directory.Exists(path) ? (string) null : path;
    }

    private string s406772915668789(string s387680196658647)
    {
      string directoryName = Path.GetDirectoryName(s387680196658647);
      string path1 = Path.Combine(directoryName, "crossGen.exe");
      this.s472927214603781.WriteLine("Checking for CoreCLR case, looking for CrossGen at {0}", (object) path1);
      if (File.Exists(path1))
        return path1;
      string path2 = Path.Combine(directoryName, "coreclr.dll");
      if (File.Exists(path2))
      {
        DateTime lastWriteTimeUtc1 = File.GetLastWriteTimeUtc(path2);
        this.s472927214603781.WriteLine("Found coreclr: at  {0}, timestamp {1}", (object) path2, (object) lastWriteTimeUtc1);
        string path3 = s435790585148060.s467953938771915();
        if (path3 != null)
        {
          this.s472927214603781.WriteLine("Found nuget package dir: at  {0}", (object) path3);
          foreach (string directory1 in Directory.GetDirectories(path3, "runtime.win*.microsoft.netcore.runtime.coreclr"))
          {
            foreach (string directory2 in Directory.GetDirectories(directory1))
            {
              foreach (string directory3 in Directory.GetDirectories(Path.Combine(directory2, "runtimes"), "win*"))
              {
                string path4 = Path.Combine(directory3, "native\\coreclr.dll");
                DateTime lastWriteTimeUtc2 = File.GetLastWriteTimeUtc(path4);
                this.s472927214603781.WriteLine("Checking timestamp of file {0} = {1}", (object) path4, (object) lastWriteTimeUtc2);
                if (File.Exists(path4) && lastWriteTimeUtc2 == lastWriteTimeUtc1)
                {
                  string path5 = Path.Combine(directory2, "tools\\crossgen.exe");
                  this.s472927214603781.WriteLine("Found matching CoreCLR, probing for crossgen at {0}", (object) path5);
                  if (File.Exists(path5))
                    return path5;
                }
              }
            }
          }
        }
      }
      Match match = Regex.Match(directoryName, "^(.*)\\\\runtimes\\\\win.*\\\\native$", RegexOptions.IgnoreCase);
      if (match.Success)
      {
        string path6 = Path.Combine(match.Groups[1].Value, "tools", "crossGen.exe");
        if (File.Exists(path6))
          return path6;
      }
      this.s472927214603781.WriteLine("Could not find crossgen, giving up");
      return (string) null;
    }

    private void s384282474905098(TextWriter s599037867903974, ref string s918683551205125)
    {
      if (File.Exists(s918683551205125 + ".aux"))
      {
        s599037867903974.WriteLine("Path has a AUX file in NIC: {0}", (object) s918683551205125);
      }
      else
      {
        string fileName = Path.GetFileName(s918683551205125);
        long length = new FileInfo(s918683551205125).Length;
        s599037867903974.WriteLine("Path is not in NIC, trying to put it in the NIC: Size {0} {1}", (object) length, (object) s918683551205125);
        string environmentVariable = Environment.GetEnvironmentVariable("WinDir");
        if (environmentVariable == null)
          return;
        string str = (string) null;
        foreach (string directory in Directory.GetDirectories(Path.Combine(environmentVariable, "Assembly"), "NativeImages_v4*"))
        {
          foreach (string enumerateFile in Directory.EnumerateFiles(directory, fileName, SearchOption.AllDirectories))
          {
            if (new FileInfo(enumerateFile).Length == length)
            {
              if (str != null)
              {
                s599037867903974.WriteLine("There is more than one file in the NIC with matching name and size! giving up.");
                return;
              }
              str = enumerateFile;
            }
          }
        }
        if (str == null)
          return;
        s918683551205125 = str;
        s599037867903974.WriteLine("Updating path to be in NIC: {0}", (object) s918683551205125);
      }
    }

    public void s377083174577364() => this.s551613939726783.Clear();

    private bool s048910704496564(
      string s983680833351803,
      Guid s894622467420000,
      int s852758863006096,
      bool s436280994277676 = true)
    {
      try
      {
        if (File.Exists(s983680833351803))
        {
          if (s436280994277676 && !this.s258862443859523(s983680833351803))
          {
            this.s472927214603781.WriteLine("FindSymbolFilePath: Aborting, security check failed on {0}", (object) s983680833351803);
            return false;
          }
          if (s894622467420000 == Guid.Empty)
          {
            this.s472927214603781.WriteLine("FindSymbolFilePath: No PDB Guid = Guid.Empty provided, assuming an unsafe PDB match for {0}", (object) s983680833351803);
            return true;
          }
          s389047933096245 s389047933096245 = this.s410989997732674(s983680833351803);
          if (s389047933096245.s956138111746114 == s894622467420000 && s389047933096245.s516659163850869 == s852758863006096)
            return true;
          this.s472927214603781.WriteLine("FindSymbolFilePath: ************ FOUND PDB File {0} has Guid {1} age {2} != Desired Guid {3} age {4}", (object) s983680833351803, (object) s389047933096245.s956138111746114, (object) s389047933096245.s516659163850869, (object) s894622467420000, (object) s852758863006096);
        }
        else
          this.s472927214603781.WriteLine("FindSymbolFilePath: Probed file location {0} does not exist", (object) s983680833351803);
      }
      catch (Exception ex)
      {
        this.s472927214603781.WriteLine("FindSymbolFilePath: Aborting pdbMatch of {0} Exception thrown: {1}", (object) s983680833351803, (object) ex.Message);
      }
      return false;
    }

    internal bool s361021071448665(
      string s919210332600772,
      string s067190967822732,
      string s566703521838405,
      Predicate<string> s698340066129044 = null)
    {
      // ISSUE: variable of a compiler-generated type
      s435790585148060.s599453117253623 s599453117253623 = (s435790585148060.s599453117253623) new s435790585148060.s382375549924857();
      ((s435790585148060.s382375549924857) s599453117253623).s558876746887091 = s919210332600772;
      // ISSUE: reference to a compiler-generated field
      s599453117253623.s878536350385506 = this;
      // ISSUE: reference to a compiler-generated field
      s599453117253623.s682901270600017 = s067190967822732;
      // ISSUE: reference to a compiler-generated field
      s599453117253623.s760077248324816 = s698340066129044;
      // ISSUE: reference to a compiler-generated field
      s599453117253623.s137615915650300 = s566703521838405;
      // ISSUE: reference to a compiler-generated field
      if (File.Exists(s599453117253623.s137615915650300))
        return true;
      Stopwatch stopwatch = Stopwatch.StartNew();
      if (this.s345949115705178 != null && (DateTime.UtcNow - this.s177037381132416).TotalSeconds > 300.0)
        this.s345949115705178 = (List<string>) null;
      if (this.s345949115705178 != null && this.s345949115705178.Contains(((s435790585148060.s382375549924857) s599453117253623).s558876746887091))
      {
        this.s472927214603781.WriteLine("FindSymbolFilePath: Skipping server {0} because it was unreachable in the past, will try again in 5 min.", (object) ((s435790585148060.s382375549924857) s599453117253623).s558876746887091);
        return false;
      }
      // ISSUE: reference to a compiler-generated field
      s599453117253623.s868655185289381 = false;
      // ISSUE: reference to a compiler-generated field
      s599453117253623.s180545491943646 = false;
      // ISSUE: reference to a compiler-generated field
      s599453117253623.s531111165431994 = false;
      try
      {
        // ISSUE: reference to a compiler-generated method
        Task task = Task.Factory.StartNew(new Action(s599453117253623.s905671138258395));
        int num = 100;
        if (((s435790585148060.s382375549924857) s599453117253623).s558876746887091.StartsWith("\\\\symbols", StringComparison.OrdinalIgnoreCase))
          num = 250;
        for (int index = 0; index < num; ++index)
        {
          if (index == 10)
          {
            // ISSUE: reference to a compiler-generated field
            this.s472927214603781.WriteLine("\r\nFindSymbolFilePath: Waiting for initial connection to {0}/{1}.", (object) ((s435790585148060.s382375549924857) s599453117253623).s558876746887091, (object) s599453117253623.s682901270600017);
          }
          if (!task.Wait(100))
            Thread.Sleep(0);
          else
            break;
        }
        // ISSUE: reference to a compiler-generated field
        if (s599453117253623.s180545491943646)
        {
          if (!task.Wait(100))
          {
            // ISSUE: reference to a compiler-generated field
            this.s472927214603781.WriteLine("\r\nFindSymbolFilePath: Copy in progress on {0}/{1}, waiting for completion.", (object) ((s435790585148060.s382375549924857) s599453117253623).s558876746887091, (object) s599453117253623.s682901270600017);
          }
          while (!task.Wait(100))
            Thread.Sleep(0);
        }
        else if (!task.IsCompleted)
        {
          // ISSUE: reference to a compiler-generated field
          s599453117253623.s868655185289381 = true;
          this.s472927214603781.WriteLine("FindSymbolFilePath: Time {0} sec.  Timeout of {1} seconds exceeded for {2}.  Setting as dead server", (object) stopwatch.Elapsed.TotalSeconds, (object) (num / 10), (object) ((s435790585148060.s382375549924857) s599453117253623).s558876746887091);
          if (this.s345949115705178 == null)
            this.s345949115705178 = new List<string>();
          this.s345949115705178.Add(((s435790585148060.s382375549924857) s599453117253623).s558876746887091);
          this.s177037381132416 = DateTime.UtcNow;
        }
      }
      finally
      {
        // ISSUE: reference to a compiler-generated field
        s599453117253623.s868655185289381 = true;
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      return s599453117253623.s531111165431994 && File.Exists(s599453117253623.s137615915650300);
    }

    private string s102740706589382(string s265469709101428, string s117908534166295)
    {
      string str = s117908534166295.Replace('\\', '/');
      if (!str.StartsWith("/", StringComparison.Ordinal))
        str = "/" + str;
      int startIndex = s265469709101428.IndexOf('?');
      return startIndex > 0 ? s265469709101428.Insert(startIndex, str) : s265469709101428 + str;
    }

    private int s459651765286212(
      Stream s730376875132495,
      string s908096697659704,
      string s549086372827390,
      ref bool s224372898772267)
    {
      bool flag = false;
      int num1 = 0;
      string str = s549086372827390 + ".new";
      try
      {
        Directory.CreateDirectory(Path.GetDirectoryName(s549086372827390));
        this.s472927214603781.WriteLine("CopyStreamToFile: Copying {0} to {1}", (object) s908096697659704, (object) str);
        Stopwatch stopwatch = Stopwatch.StartNew();
        int num2 = 0;
        int num3 = 0;
        using (Stream stream = (Stream) File.Create(str))
        {
          byte[] buffer = new byte[8192];
          do
          {
            int count = s730376875132495.Read(buffer, 0, buffer.Length);
            if (count != 0)
            {
              stream.Write(buffer, 0, count);
              num1 += count;
              if (num1 - num3 >= 10000)
              {
                this.s472927214603781.Write(".");
                num3 += 10000;
              }
              if (num1 - num2 >= 1000000)
              {
                this.s472927214603781.WriteLine(" {0:f1} Meg", (object) ((double) num1 / 1000000.0));
                this.s472927214603781.Flush();
                num2 += 1000000;
              }
              if (stopwatch.Elapsed.TotalMilliseconds > 100.0)
              {
                this.s472927214603781.Flush();
                Thread.Sleep(0);
                stopwatch.Restart();
              }
            }
            else
              break;
          }
          while (!s224372898772267);
        }
        if (!s224372898772267)
          flag = true;
      }
      finally
      {
        this.s472927214603781.WriteLine();
        if (flag)
        {
          s916389884151353.s390345387705666(str, s549086372827390);
          this.s472927214603781.WriteLine("CopyStreamToFile: Copy Done, moving to {0}", (object) s549086372827390);
        }
        else
        {
          this.s472927214603781.WriteLine("CopyStreamToFile: Copy not complete, deleting temp copy to file");
          s916389884151353.s760644410246924(str);
        }
      }
      return num1;
    }

    private string s466738196778296(
      string s990155172340905,
      string s467661255745443,
      string s636826317353788)
    {
      if (File.Exists(s636826317353788))
      {
        this.s472927214603781.WriteLine("FindSymbolFilePath: Found in cache {0}", (object) s636826317353788);
        return s636826317353788;
      }
      if ((this.s640920822593308 & s996935620943990.CacheOnly) != s996935620943990.None)
      {
        this.s472927214603781.WriteLine("FindSymbolFilePath: no file at cache location {0} and cacheOnly set, giving up.", (object) s636826317353788);
        return (string) null;
      }
      if (s990155172340905 == null)
        return (string) null;
      Predicate<string> s698340066129044 = (Predicate<string>) (s565847733592322 =>
      {
        bool flag = s565847733592322.EndsWith("octet-stream");
        if (!flag)
          this.s472927214603781.WriteLine("FindSymbolFilePath: expecting 'octet-stream' (Binary) data, got '{0}' (are you redirected to a login page?)", (object) s565847733592322);
        return flag;
      });
      this.s472927214603781.WriteLine("FindSymbolFilePath: Searching Symbol Server {0}.", (object) s990155172340905);
      if (this.s361021071448665(s990155172340905, s467661255745443, s636826317353788, s698340066129044))
        return s636826317353788;
      if (!s990155172340905.StartsWith("\\\\") && !Uri.IsWellFormedUriString(s990155172340905, UriKind.Absolute))
        return (string) null;
      string s067190967822732_1 = s467661255745443.Substring(0, s467661255745443.Length - 1) + "_";
      string str1 = s636826317353788.Substring(0, s636826317353788.Length - 1) + "_";
      if (this.s361021071448665(s990155172340905, s067190967822732_1, str1, s698340066129044))
      {
        this.s472927214603781.WriteLine("FindSymbolFilePath: Expanding {0} to {1}", (object) str1, (object) s636826317353788);
        string s761710075308025 = "Expand " + s062136670151047.s304435938141627(str1) + " " + s062136670151047.s304435938141627(s636826317353788);
        s434305609096598 s610084872719370 = new s434305609096598().s356792493822912();
        if (s062136670151047.s455031916978056(s761710075308025, s610084872719370).s458846704520366 != 0)
        {
          this.s472927214603781.WriteLine("FindSymbolFilePath: Failure executing: {0}", (object) s761710075308025);
          return (string) null;
        }
        File.Delete(str1);
        return s636826317353788;
      }
      string s067190967822732_2 = Path.Combine(Path.GetDirectoryName(s467661255745443), "file.ptr");
      string str2 = Path.Combine(Path.GetDirectoryName(s636826317353788), "file.ptr");
      s916389884151353.s760644410246924(str2);
      string str3 = s990155172340905.StartsWith("\\\\") ? "\\\\" : "/";
      if (this.s361021071448665(s990155172340905, s067190967822732_2, str2))
      {
        string s467661255745443_1 = File.ReadAllText(str2).Trim();
        s916389884151353.s760644410246924(str2);
        if (s467661255745443_1.StartsWith("MSG"))
        {
          this.s472927214603781.WriteLine("FindSymbolFilePath: Probe of {0}{1}{2} fails with message '{3}'", (object) s990155172340905, (object) str3, (object) s067190967822732_2, (object) s467661255745443_1);
          this.s472927214603781.WriteLine("FindSymbolFilePath: target File.ptr file {0} ", (object) str2);
          return (string) null;
        }
        if (s467661255745443_1.StartsWith("PATH:"))
          s467661255745443_1 = s467661255745443_1.Substring(5);
        else
          this.s472927214603781.WriteLine("FindSymbolFilePath: file.ptr data: {0}", (object) s467661255745443_1);
        if (s467661255745443_1.EndsWith(s467661255745443, StringComparison.OrdinalIgnoreCase))
        {
          string s990155172340905_1 = s467661255745443_1.Substring(0, s467661255745443_1.Length - s467661255745443.Length - 1);
          string str4 = s990155172340905_1.StartsWith("\\\\") ? "\\\\" : "/";
          this.s472927214603781.WriteLine("FindSymbolFilePath: Probe of {0}{1}{2} redirecting to {3}{4}{5}", (object) s990155172340905, (object) str3, (object) s067190967822732_2, (object) s990155172340905_1, (object) str4, (object) s467661255745443);
          return this.s466738196778296(s990155172340905_1, s467661255745443, s636826317353788);
        }
        if (s467661255745443_1.StartsWith("\\\\"))
        {
          int length = s467661255745443_1.IndexOf('\\', 2);
          if (0 <= length)
          {
            this.s472927214603781.WriteLine("FindSymbolFilePath: Looking up UNC path {0}", (object) s467661255745443_1);
            return this.s466738196778296(s467661255745443_1.Substring(0, length), s467661255745443_1.Substring(length + 1), s636826317353788);
          }
        }
        else if (s467661255745443_1.StartsWith("..\\") || s467661255745443_1.StartsWith(".\\"))
        {
          this.s472927214603781.WriteLine("FindSymbolFilePath: Probe of {0}{1}{2} redirecting to {3}\\{4}", (object) s990155172340905, (object) str3, (object) s067190967822732_2, (object) s990155172340905, (object) s467661255745443_1);
          return this.s466738196778296(s990155172340905, s467661255745443_1, s636826317353788);
        }
        this.s472927214603781.WriteLine("FindSymbolFilePath: Error, Don't know how to look up redirected location {0}", (object) s467661255745443_1);
      }
      if (2 >= s467661255745443.Length || s467661255745443[2] == '/')
        return (string) null;
      this.s472927214603781.WriteLine("Trying the XX/XXYYY.PDB convention");
      string s467661255745443_2 = s467661255745443.Substring(0, 2) + "/" + s467661255745443;
      return this.s466738196778296(s990155172340905, s467661255745443_2, s636826317353788);
    }

    private static string s591238017931873(
      string s834212262355330,
      TextWriter s350119675540172,
      out string s889294413903503)
    {
      s889294413903503 = (string) null;
      Match match1 = Regex.Match(s834212262355330, "^(.*)\\\\assembly\\\\NativeImages_(v(\\d+)[\\dA-Za-z.]*)_(\\d\\d)\\\\", RegexOptions.IgnoreCase);
      string s;
      string str1;
      if (match1.Success)
      {
        string path = match1.Groups[1].Value;
        string str2 = match1.Groups[2].Value;
        s = match1.Groups[3].Value;
        str1 = match1.Groups[4].Value;
        if (path.EndsWith(str2) && Directory.Exists(path))
        {
          s889294413903503 = str2;
          return path;
        }
      }
      else
      {
        Match match2 = Regex.Match(s834212262355330, "\\\\Microsoft\\\\CLR_v(\\d+)\\.\\d+(_(\\d\\d))?\\\\NativeImages", RegexOptions.IgnoreCase);
        if (match2.Success)
        {
          s = match2.Groups[1].Value;
          str1 = match2.Groups[3].Value;
        }
        else
        {
          Match match3 = Regex.Match(s834212262355330, "\\\\Microsoft.NET\\\\Framework((\\d\\d)?)\\\\v(\\d+).*\\\\NativeImages", RegexOptions.IgnoreCase);
          if (!match3.Success)
            return (string) null;
          s = match3.Groups[3].Value;
          str1 = match3.Groups[1].Value;
        }
      }
      if (int.Parse(s) < 4)
      {
        s350119675540172.WriteLine("Pre V4.0 native image, skipping: {0}", (object) s834212262355330);
        return (string) null;
      }
      string environmentVariable = Environment.GetEnvironmentVariable("winDir");
      if (str1 != "64")
        str1 = "";
      string path1 = Path.Combine(environmentVariable, "Microsoft.NET\\Framework" + str1);
      string[] directories = Directory.GetDirectories(path1, "v" + s + ".*");
      if (directories.Length == 1)
        return directories[0];
      s350119675540172.WriteLine("Warning: Could not find Version {0} of the .NET Framework in {1}", (object) s, (object) path1);
      return (string) null;
    }

    internal List<string> s265005195981961
    {
      get
      {
        if (this.s475426342862647 == null)
        {
          this.s475426342862647 = new List<string>();
          string s185486578165193 = this.s185486578165193;
          char[] chArray = new char[1]{ ';' };
          foreach (string str in s185486578165193.Split(chArray))
          {
            string path = str.Trim();
            if (path.EndsWith("\\"))
              path = path.Substring(0, path.Length - 1);
            if (Directory.Exists(path))
              this.s475426342862647.Add(path);
            else
              this.s472927214603781.WriteLine("Path {0} in source path does not exist, skipping.", (object) path);
          }
        }
        return this.s475426342862647;
      }
    }

    private bool s258862443859523(string s128880125885121)
    {
      if (this.s629529705812616 == null)
      {
        this.s472927214603781.WriteLine("Found PDB {0}, however this is in an unsafe location.", (object) s128880125885121);
        this.s472927214603781.WriteLine("If you trust this location, place this directory the symbol path to correct this (or use the SecurityCheck method to override)");
        return false;
      }
      if (this.s629529705812616(s128880125885121))
        return true;
      this.s472927214603781.WriteLine("Found PDB {0}, but failed security check.", (object) s128880125885121);
      return false;
    }

    internal static string s297445822149510(string s883556710234253)
    {
      if (0 <= s883556710234253.IndexOf("System32\\", StringComparison.OrdinalIgnoreCase))
      {
        string environmentVariable = Environment.GetEnvironmentVariable("WinDir");
        if (environmentVariable != null)
        {
          string str = Path.Combine(environmentVariable, "System32");
          if (s883556710234253.StartsWith(str, StringComparison.OrdinalIgnoreCase) && Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432") != null)
          {
            string path = Path.Combine(Path.Combine(environmentVariable, "Sysnative"), s883556710234253.Substring(str.Length + 1));
            if (File.Exists(path))
              s883556710234253 = path;
          }
        }
      }
      return s883556710234253;
    }

    private struct s382375549924857 : IEquatable<s435790585148060.s382375549924857>
    {
      public Guid s599721232320144;
      public int s022678996988242;
      public string s558876746887091;

      public bool s259798380352613(s435790585148060.s382375549924857 s323270119954553) => this.s599721232320144 == s323270119954553.s599721232320144 && (^(s124532765434765.s583869561809011&) ref this).s318625857757190 == s323270119954553.s318625857757190 && this.s022678996988242 == s323270119954553.s022678996988242;

      public s382375549924857() => ((object) ref this).\u002Ector();
    }
  }
}
