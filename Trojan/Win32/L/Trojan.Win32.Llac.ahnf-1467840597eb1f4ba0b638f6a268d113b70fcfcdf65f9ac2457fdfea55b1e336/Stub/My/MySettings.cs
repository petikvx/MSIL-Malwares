// Decompiled with JetBrains decompiler
// Type: Stub.My.MySettings
// Assembly: Stub, Version=10.1.0.54, Culture=neutral, PublicKeyToken=null
// MVID: B6CAF90E-24AA-429E-AF0C-6337F759D114
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.Win32.Llac.ahnf-1467840597eb1f4ba0b638f6a268d113b70fcfcdf65f9ac2457fdfea55b1e336.exe

using \u0005;
using \u0006;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Stub.My
{
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \u0001 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool \u0001;
    private static object \u0001 = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void \u0002(object sender, EventArgs e)
    {
      if (!\u0002.\u0002().SaveMySettingsOnExit)
        return;
      // ISSUE: reference to a compiler-generated method
      \u0001.\u0002().Save();
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.\u0001)
        {
label_1:
          object Expression;
          if (true)
            Expression = MySettings.\u0001;
          ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
          if (true)
          {
            Monitor.Enter(Expression);
            try
            {
              int num1 = MySettings.\u0001 ? 1 : 0;
              while (true)
              {
                if (num1 == 0)
                  goto label_8;
label_6:
                if (true)
                  break;
label_8:
                \u0002.\u0002().Shutdown += (ShutdownEventHandler) ((sender, e) =>
                {
                  if (!\u0002.\u0002().SaveMySettingsOnExit)
                    return;
                  \u0001.\u0002().Save();
                });
                int num2 = 1;
                if (num2 == 0)
                {
                  num1 = num2;
                }
                else
                {
                  MySettings.\u0001 = num2 != 0;
                  goto label_6;
                }
              }
            }
            finally
            {
              if (true)
                Monitor.Exit(Expression);
            }
          }
          else
            goto label_1;
        }
        return MySettings.\u0001;
      }
    }
  }
}
