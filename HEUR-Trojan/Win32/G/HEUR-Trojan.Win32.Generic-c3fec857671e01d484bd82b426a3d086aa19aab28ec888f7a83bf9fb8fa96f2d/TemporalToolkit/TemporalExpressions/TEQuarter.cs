// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEQuarter
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;
using TemporalToolkit.Extensions;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEQuarter : TemporalExpression
  {
    public Quarter Start { get; set; }

    public Quarter? End { get; set; }

    public Month StartOfYear { get; set; }

    public TEQuarter(Quarter quarter)
    {
label_1:
      int num1 = 1567598602;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1091942446)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Start = quarter;
            this.End = new Quarter?();
            this.StartOfYear = Month.January;
            num1 = (int) num2 * -1752331595 ^ 1843612874;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -1863190572 ^ 1251293539;
            continue;
          case 4:
            num1 = (int) num2 * 1528768764 ^ -1064257529;
            continue;
          case 5:
            num1 = (int) num2 * 2077755988 ^ 2116292246;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public TEQuarter(Quarter start, Quarter end)
    {
label_1:
      int num1 = 1539495052;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2032343171)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1648541230 ^ -1839928062;
            continue;
          case 2:
            this.StartOfYear = Month.January;
            num1 = (int) num2 * -306397906 ^ 1138800583;
            continue;
          case 3:
            this.End = new Quarter?(end);
            num1 = (int) num2 * 1228841514 ^ 1532860205;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.Start = start;
            num1 = (int) num2 * -76589845 ^ -1500314679;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public TEQuarter(Quarter quarter, Month startOfYear)
    {
      this.Start = quarter;
      this.End = new Quarter?();
      this.StartOfYear = startOfYear;
    }

    public TEQuarter(Quarter start, Quarter end, Month startOfYear)
    {
label_1:
      int num1 = 1260559248;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1389701909)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -2068548668 ^ -144303593;
            continue;
          case 2:
            this.Start = start;
            num1 = (int) num2 * 1376829008 ^ -1855699756;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 361890604 ^ 1890134588;
            continue;
          case 5:
            this.End = new Quarter?(end);
            num1 = (int) num2 * -2018226033 ^ -203390483;
            continue;
          case 6:
            this.StartOfYear = startOfYear;
            num1 = (int) num2 * 276278672 ^ -1505103449;
            continue;
          case 7:
            num1 = (int) num2 * 1602919842 ^ -199357564;
            continue;
          case 8:
            num1 = (int) num2 * 1160904329 ^ 1925889671;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public override bool Includes(DateTime aDate)
    {
      if (this.Start == Quarter.Unset)
        goto label_5;
label_1:
      int num1 = 2022649360;
label_2:
      Quarter? end;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        bool flag3;
        bool hasValue;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 482267782)) % 21U)
        {
          case 0:
            end = this.End;
            flag3 = end.Value >= this.Start;
            num1 = (int) num2 * -1186320498 ^ -238415867;
            continue;
          case 1:
            flag2 = flag4;
            num1 = 1387893015;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = 1077099669;
            continue;
          case 4:
            int num5 = (int) aDate.Quarter(this.StartOfYear);
            end = this.End;
            int num6 = (int) end.Value;
            if (num5 <= num6)
            {
              num1 = (int) num2 * -2145332549 ^ -53538204;
              continue;
            }
            num3 = 0;
            goto label_30;
          case 5:
            end = this.End;
            num1 = (int) num2 * -991598606 ^ -1796358828;
            continue;
          case 6:
            flag4 = this.Start == aDate.Quarter(this.StartOfYear);
            num1 = 1077099669;
            continue;
          case 7:
            goto label_3;
          case 8:
            int num7 = (int) aDate.Quarter(this.StartOfYear);
            end = this.End;
            int num8 = (int) end.Value;
            if (num7 <= num8)
            {
              num4 = 1;
              break;
            }
            num1 = 1065075724;
            continue;
          case 10:
            end = this.End;
            num1 = 135489473;
            continue;
          case 11:
            num4 = aDate.Quarter(this.StartOfYear) >= this.Start ? 1 : 0;
            break;
          case 12:
            int num9 = !flag3 ? 1654055174 : (num9 = 1536888253);
            num1 = num9 ^ (int) num2 * 1893409647;
            continue;
          case 13:
            hasValue = end.HasValue;
            num1 = (int) num2 * 1315116061 ^ -1398095812;
            continue;
          case 14:
            num1 = (int) num2 * 586228070 ^ 930357504;
            continue;
          case 15:
            num1 = (int) num2 * -1660265971 ^ 1694795685;
            continue;
          case 16:
            goto label_21;
          case 17:
            int num10 = !flag1 ? -608317305 : (num10 = -1820589566);
            num1 = num10 ^ (int) num2 * 412773999;
            continue;
          case 18:
            int num11 = !hasValue ? 1944592718 : (num11 = 1326510776);
            num1 = num11 ^ (int) num2 * 5169689;
            continue;
          case 19:
            if (end.HasValue)
            {
              num1 = (int) num2 * -371650204 ^ 81494709;
              continue;
            }
            goto label_4;
          case 20:
            num3 = aDate.Quarter(this.StartOfYear) >= this.Start ? 1 : 0;
            goto label_30;
          default:
            goto label_32;
        }
        flag4 = num4 != 0;
        num1 = 1431074940;
        continue;
label_30:
        flag4 = num3 != 0;
        num1 = 1431074940;
      }
label_3:
      end = this.End;
      int num12 = end.Value == Quarter.Unset ? 1 : 0;
      goto label_6;
label_4:
      num12 = 0;
      goto label_6;
label_21:
      throw TEQuarter.\u200B⁬‬⁯⁭‫⁬⁭⁭‎‎‍‪‏‏‌‌‬‪‫⁯‪⁮⁭​‪⁫‏‬‪‪⁪‮​⁯‮‌⁪‮();
label_32:
      return flag2;
label_5:
      num12 = 1;
label_6:
      flag1 = num12 != 0;
      num1 = 1715048176;
      goto label_2;
    }

    static ArgumentException \u200B⁬‬⁯⁭‫⁬⁭⁭‎‎‍‪‏‏‌‌‬‪‫⁯‪⁮⁭​‪⁫‏‬‪‪⁪‮​⁯‮‌⁪‮() => new ArgumentException();
  }
}
