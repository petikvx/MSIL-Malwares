// Decompiled with JetBrains decompiler
// Type: GEHero109UserManager.WebReference.GEHero109DataSet
// Assembly: GEHero109UserManager, Version=1.0.2862.40490, Culture=neutral, PublicKeyToken=null
// MVID: 21C53E68-B0BB-4831-B4CF-E259C39019AA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Genome.hfr-a502fa096d200769d89945ccb4b95991eb5071aefe205af12d3864166f2e8367.exe

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;

namespace GEHero109UserManager.WebReference
{
  [ToolboxItem(true)]
  [DesignerCategory("code")]
  [DebuggerStepThrough]
  [Serializable]
  public class GEHero109DataSet : DataSet
  {
    private GEHero109DataSet.角色类别资料DataTable table角色类别资料;
    private GEHero109DataSet.角色资料DataTable table角色资料;
    private GEHero109DataSet.卡表资料DataTable table卡表资料;
    private GEHero109DataSet.授权帐号资料DataTable table授权帐号资料;
    private GEHero109DataSet.帐户资料DataTable table帐户资料;

    public GEHero109DataSet()
    {
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      this.Tables.CollectionChanged += changeEventHandler;
      this.Relations.CollectionChanged += changeEventHandler;
    }

    protected GEHero109DataSet(SerializationInfo info, StreamingContext context)
    {
      string s = (string) info.GetValue("XmlSchema", typeof (string));
      if (s != null)
      {
        DataSet dataSet = new DataSet();
        dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        if (dataSet.Tables[nameof (角色类别资料)] != null)
          this.Tables.Add((DataTable) new GEHero109DataSet.角色类别资料DataTable(dataSet.Tables[nameof (角色类别资料)]));
        if (dataSet.Tables[nameof (角色资料)] != null)
          this.Tables.Add((DataTable) new GEHero109DataSet.角色资料DataTable(dataSet.Tables[nameof (角色资料)]));
        if (dataSet.Tables[nameof (卡表资料)] != null)
          this.Tables.Add((DataTable) new GEHero109DataSet.卡表资料DataTable(dataSet.Tables[nameof (卡表资料)]));
        if (dataSet.Tables[nameof (授权帐号资料)] != null)
          this.Tables.Add((DataTable) new GEHero109DataSet.授权帐号资料DataTable(dataSet.Tables[nameof (授权帐号资料)]));
        if (dataSet.Tables[nameof (帐户资料)] != null)
          this.Tables.Add((DataTable) new GEHero109DataSet.帐户资料DataTable(dataSet.Tables[nameof (帐户资料)]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
        this.InitClass();
      this.GetSerializationData(info, context);
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      this.Tables.CollectionChanged += changeEventHandler;
      this.Relations.CollectionChanged += changeEventHandler;
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public GEHero109DataSet.角色类别资料DataTable 角色类别资料 => this.table角色类别资料;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public GEHero109DataSet.角色资料DataTable 角色资料 => this.table角色资料;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public GEHero109DataSet.卡表资料DataTable 卡表资料 => this.table卡表资料;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public GEHero109DataSet.授权帐号资料DataTable 授权帐号资料 => this.table授权帐号资料;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public GEHero109DataSet.帐户资料DataTable 帐户资料 => this.table帐户资料;

    public override DataSet Clone()
    {
      GEHero109DataSet geHero109DataSet = (GEHero109DataSet) base.Clone();
      geHero109DataSet.InitVars();
      return (DataSet) geHero109DataSet;
    }

    protected override bool ShouldSerializeTables() => false;

    protected override bool ShouldSerializeRelations() => false;

    protected override void ReadXmlSerializable(XmlReader reader)
    {
      this.Reset();
      DataSet dataSet = new DataSet();
      int num = (int) dataSet.ReadXml(reader);
      if (dataSet.Tables["角色类别资料"] != null)
        this.Tables.Add((DataTable) new GEHero109DataSet.角色类别资料DataTable(dataSet.Tables["角色类别资料"]));
      if (dataSet.Tables["角色资料"] != null)
        this.Tables.Add((DataTable) new GEHero109DataSet.角色资料DataTable(dataSet.Tables["角色资料"]));
      if (dataSet.Tables["卡表资料"] != null)
        this.Tables.Add((DataTable) new GEHero109DataSet.卡表资料DataTable(dataSet.Tables["卡表资料"]));
      if (dataSet.Tables["授权帐号资料"] != null)
        this.Tables.Add((DataTable) new GEHero109DataSet.授权帐号资料DataTable(dataSet.Tables["授权帐号资料"]));
      if (dataSet.Tables["帐户资料"] != null)
        this.Tables.Add((DataTable) new GEHero109DataSet.帐户资料DataTable(dataSet.Tables["帐户资料"]));
      this.DataSetName = dataSet.DataSetName;
      this.Prefix = dataSet.Prefix;
      this.Namespace = dataSet.Namespace;
      this.Locale = dataSet.Locale;
      this.CaseSensitive = dataSet.CaseSensitive;
      this.EnforceConstraints = dataSet.EnforceConstraints;
      this.Merge(dataSet, false, MissingSchemaAction.Add);
      this.InitVars();
    }

    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    internal void InitVars()
    {
      this.table角色类别资料 = (GEHero109DataSet.角色类别资料DataTable) this.Tables["角色类别资料"];
      if (this.table角色类别资料 != null)
        this.table角色类别资料.InitVars();
      this.table角色资料 = (GEHero109DataSet.角色资料DataTable) this.Tables["角色资料"];
      if (this.table角色资料 != null)
        this.table角色资料.InitVars();
      this.table卡表资料 = (GEHero109DataSet.卡表资料DataTable) this.Tables["卡表资料"];
      if (this.table卡表资料 != null)
        this.table卡表资料.InitVars();
      this.table授权帐号资料 = (GEHero109DataSet.授权帐号资料DataTable) this.Tables["授权帐号资料"];
      if (this.table授权帐号资料 != null)
        this.table授权帐号资料.InitVars();
      this.table帐户资料 = (GEHero109DataSet.帐户资料DataTable) this.Tables["帐户资料"];
      if (this.table帐户资料 == null)
        return;
      this.table帐户资料.InitVars();
    }

    private void InitClass()
    {
      this.DataSetName = nameof (GEHero109DataSet);
      this.Prefix = "";
      this.Namespace = "http://www.tempuri.org/GEHero109DataSet.xsd";
      this.Locale = new CultureInfo("zh-CN");
      this.CaseSensitive = false;
      this.EnforceConstraints = true;
      this.table角色类别资料 = new GEHero109DataSet.角色类别资料DataTable();
      this.Tables.Add((DataTable) this.table角色类别资料);
      this.table角色资料 = new GEHero109DataSet.角色资料DataTable();
      this.Tables.Add((DataTable) this.table角色资料);
      this.table卡表资料 = new GEHero109DataSet.卡表资料DataTable();
      this.Tables.Add((DataTable) this.table卡表资料);
      this.table授权帐号资料 = new GEHero109DataSet.授权帐号资料DataTable();
      this.Tables.Add((DataTable) this.table授权帐号资料);
      this.table帐户资料 = new GEHero109DataSet.帐户资料DataTable();
      this.Tables.Add((DataTable) this.table帐户资料);
    }

    private bool ShouldSerialize角色类别资料() => false;

    private bool ShouldSerialize角色资料() => false;

    private bool ShouldSerialize卡表资料() => false;

    private bool ShouldSerialize授权帐号资料() => false;

    private bool ShouldSerialize帐户资料() => false;

    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    public delegate void 角色类别资料RowChangeEventHandler(
      object sender,
      GEHero109DataSet.角色类别资料RowChangeEvent e);

    public delegate void 角色资料RowChangeEventHandler(
      object sender,
      GEHero109DataSet.角色资料RowChangeEvent e);

    public delegate void 卡表资料RowChangeEventHandler(
      object sender,
      GEHero109DataSet.卡表资料RowChangeEvent e);

    public delegate void 授权帐号资料RowChangeEventHandler(
      object sender,
      GEHero109DataSet.授权帐号资料RowChangeEvent e);

    public delegate void 帐户资料RowChangeEventHandler(
      object sender,
      GEHero109DataSet.帐户资料RowChangeEvent e);

    [DebuggerStepThrough]
    public class 角色类别资料DataTable : DataTable, IEnumerable
    {
      private DataColumn column角色类别ID;
      private DataColumn column角色类别;

      internal 角色类别资料DataTable()
        : base("角色类别资料")
      {
        this.InitClass();
      }

      internal 角色类别资料DataTable(DataTable table)
        : base(table.TableName)
      {
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
        this.DisplayExpression = table.DisplayExpression;
      }

      [Browsable(false)]
      public int Count => this.Rows.Count;

      internal DataColumn 角色类别IDColumn => this.column角色类别ID;

      internal DataColumn 角色类别Column => this.column角色类别;

      public GEHero109DataSet.角色类别资料Row this[int index] => (GEHero109DataSet.角色类别资料Row) this.Rows[index];

      public event GEHero109DataSet.角色类别资料RowChangeEventHandler 角色类别资料RowChanged;

      public event GEHero109DataSet.角色类别资料RowChangeEventHandler 角色类别资料RowChanging;

      public event GEHero109DataSet.角色类别资料RowChangeEventHandler 角色类别资料RowDeleted;

      public event GEHero109DataSet.角色类别资料RowChangeEventHandler 角色类别资料RowDeleting;

      public void Add角色类别资料Row(GEHero109DataSet.角色类别资料Row row) => this.Rows.Add((DataRow) row);

      public GEHero109DataSet.角色类别资料Row Add角色类别资料Row(string 角色类别)
      {
        GEHero109DataSet.角色类别资料Row row = (GEHero109DataSet.角色类别资料Row) this.NewRow();
        row.ItemArray = new object[2]{ null, (object) 角色类别 };
        this.Rows.Add((DataRow) row);
        return row;
      }

      public GEHero109DataSet.角色类别资料Row FindBy角色类别ID(int 角色类别ID) => (GEHero109DataSet.角色类别资料Row) this.Rows.Find(new object[1]
      {
        (object) 角色类别ID
      });

      public IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      public override DataTable Clone()
      {
        GEHero109DataSet.角色类别资料DataTable 角色类别资料DataTable = (GEHero109DataSet.角色类别资料DataTable) base.Clone();
        角色类别资料DataTable.InitVars();
        return (DataTable) 角色类别资料DataTable;
      }

      protected override DataTable CreateInstance() => (DataTable) new GEHero109DataSet.角色类别资料DataTable();

      internal void InitVars()
      {
        this.column角色类别ID = this.Columns["角色类别ID"];
        this.column角色类别 = this.Columns["角色类别"];
      }

      private void InitClass()
      {
        this.column角色类别ID = new DataColumn("角色类别ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column角色类别ID);
        this.column角色类别 = new DataColumn("角色类别", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column角色类别);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.column角色类别ID
        }, true));
        this.column角色类别ID.AutoIncrement = true;
        this.column角色类别ID.AllowDBNull = false;
        this.column角色类别ID.Unique = true;
      }

      public GEHero109DataSet.角色类别资料Row New角色类别资料Row() => (GEHero109DataSet.角色类别资料Row) this.NewRow();

      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new GEHero109DataSet.角色类别资料Row(builder);

      protected override Type GetRowType() => typeof (GEHero109DataSet.角色类别资料Row);

      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.角色类别资料RowChanged == null)
          return;
        this.角色类别资料RowChanged((object) this, new GEHero109DataSet.角色类别资料RowChangeEvent((GEHero109DataSet.角色类别资料Row) e.Row, e.Action));
      }

      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.角色类别资料RowChanging == null)
          return;
        this.角色类别资料RowChanging((object) this, new GEHero109DataSet.角色类别资料RowChangeEvent((GEHero109DataSet.角色类别资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.角色类别资料RowDeleted == null)
          return;
        this.角色类别资料RowDeleted((object) this, new GEHero109DataSet.角色类别资料RowChangeEvent((GEHero109DataSet.角色类别资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.角色类别资料RowDeleting == null)
          return;
        this.角色类别资料RowDeleting((object) this, new GEHero109DataSet.角色类别资料RowChangeEvent((GEHero109DataSet.角色类别资料Row) e.Row, e.Action));
      }

      public void Remove角色类别资料Row(GEHero109DataSet.角色类别资料Row row) => this.Rows.Remove((DataRow) row);
    }

    [DebuggerStepThrough]
    public class 角色类别资料Row : DataRow
    {
      private GEHero109DataSet.角色类别资料DataTable table角色类别资料;

      internal 角色类别资料Row(DataRowBuilder rb)
        : base(rb)
      {
        this.table角色类别资料 = (GEHero109DataSet.角色类别资料DataTable) this.Table;
      }

      public int 角色类别ID
      {
        get => (int) this[this.table角色类别资料.角色类别IDColumn];
        set => this[this.table角色类别资料.角色类别IDColumn] = (object) value;
      }

      public string 角色类别
      {
        get
        {
          try
          {
            return (string) this[this.table角色类别资料.角色类别Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色类别资料.角色类别Column] = (object) value;
      }

      public bool Is角色类别Null() => this.IsNull(this.table角色类别资料.角色类别Column);

      public void Set角色类别Null() => this[this.table角色类别资料.角色类别Column] = Convert.DBNull;
    }

    [DebuggerStepThrough]
    public class 角色类别资料RowChangeEvent : EventArgs
    {
      private GEHero109DataSet.角色类别资料Row eventRow;
      private DataRowAction eventAction;

      public 角色类别资料RowChangeEvent(GEHero109DataSet.角色类别资料Row row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      public GEHero109DataSet.角色类别资料Row Row => this.eventRow;

      public DataRowAction Action => this.eventAction;
    }

    [DebuggerStepThrough]
    public class 角色资料DataTable : DataTable, IEnumerable
    {
      private DataColumn column角色ID;
      private DataColumn column帐户名;
      private DataColumn column位置;
      private DataColumn column角色名;
      private DataColumn column角色类别;
      private DataColumn columnLV;
      private DataColumn column左手LV;
      private DataColumn column左手装备;
      private DataColumn column右手LV;
      private DataColumn column右手装备;
      private DataColumn column身体LV;
      private DataColumn column身体装备;
      private DataColumn column护手LV;
      private DataColumn column护腿LV;
      private DataColumn column更换装备LV;

      internal 角色资料DataTable()
        : base("角色资料")
      {
        this.InitClass();
      }

      internal 角色资料DataTable(DataTable table)
        : base(table.TableName)
      {
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
        this.DisplayExpression = table.DisplayExpression;
      }

      [Browsable(false)]
      public int Count => this.Rows.Count;

      internal DataColumn 角色IDColumn => this.column角色ID;

      internal DataColumn 帐户名Column => this.column帐户名;

      internal DataColumn 位置Column => this.column位置;

      internal DataColumn 角色名Column => this.column角色名;

      internal DataColumn 角色类别Column => this.column角色类别;

      internal DataColumn LVColumn => this.columnLV;

      internal DataColumn 左手LVColumn => this.column左手LV;

      internal DataColumn 左手装备Column => this.column左手装备;

      internal DataColumn 右手LVColumn => this.column右手LV;

      internal DataColumn 右手装备Column => this.column右手装备;

      internal DataColumn 身体LVColumn => this.column身体LV;

      internal DataColumn 身体装备Column => this.column身体装备;

      internal DataColumn 护手LVColumn => this.column护手LV;

      internal DataColumn 护腿LVColumn => this.column护腿LV;

      internal DataColumn 更换装备LVColumn => this.column更换装备LV;

      public GEHero109DataSet.角色资料Row this[int index] => (GEHero109DataSet.角色资料Row) this.Rows[index];

      public event GEHero109DataSet.角色资料RowChangeEventHandler 角色资料RowChanged;

      public event GEHero109DataSet.角色资料RowChangeEventHandler 角色资料RowChanging;

      public event GEHero109DataSet.角色资料RowChangeEventHandler 角色资料RowDeleted;

      public event GEHero109DataSet.角色资料RowChangeEventHandler 角色资料RowDeleting;

      public void Add角色资料Row(GEHero109DataSet.角色资料Row row) => this.Rows.Add((DataRow) row);

      public GEHero109DataSet.角色资料Row Add角色资料Row(
        string 帐户名,
        int 位置,
        string 角色名,
        string 角色类别,
        int LV,
        int 左手LV,
        string 左手装备,
        int 右手LV,
        string 右手装备,
        int 身体LV,
        string 身体装备,
        int 护手LV,
        int 护腿LV,
        int 更换装备LV)
      {
        GEHero109DataSet.角色资料Row row = (GEHero109DataSet.角色资料Row) this.NewRow();
        row.ItemArray = new object[15]
        {
          null,
          (object) 帐户名,
          (object) 位置,
          (object) 角色名,
          (object) 角色类别,
          (object) LV,
          (object) 左手LV,
          (object) 左手装备,
          (object) 右手LV,
          (object) 右手装备,
          (object) 身体LV,
          (object) 身体装备,
          (object) 护手LV,
          (object) 护腿LV,
          (object) 更换装备LV
        };
        this.Rows.Add((DataRow) row);
        return row;
      }

      public GEHero109DataSet.角色资料Row FindBy角色ID(int 角色ID) => (GEHero109DataSet.角色资料Row) this.Rows.Find(new object[1]
      {
        (object) 角色ID
      });

      public IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      public override DataTable Clone()
      {
        GEHero109DataSet.角色资料DataTable 角色资料DataTable = (GEHero109DataSet.角色资料DataTable) base.Clone();
        角色资料DataTable.InitVars();
        return (DataTable) 角色资料DataTable;
      }

      protected override DataTable CreateInstance() => (DataTable) new GEHero109DataSet.角色资料DataTable();

      internal void InitVars()
      {
        this.column角色ID = this.Columns["角色ID"];
        this.column帐户名 = this.Columns["帐户名"];
        this.column位置 = this.Columns["位置"];
        this.column角色名 = this.Columns["角色名"];
        this.column角色类别 = this.Columns["角色类别"];
        this.columnLV = this.Columns["LV"];
        this.column左手LV = this.Columns["左手LV"];
        this.column左手装备 = this.Columns["左手装备"];
        this.column右手LV = this.Columns["右手LV"];
        this.column右手装备 = this.Columns["右手装备"];
        this.column身体LV = this.Columns["身体LV"];
        this.column身体装备 = this.Columns["身体装备"];
        this.column护手LV = this.Columns["护手LV"];
        this.column护腿LV = this.Columns["护腿LV"];
        this.column更换装备LV = this.Columns["更换装备LV"];
      }

      private void InitClass()
      {
        this.column角色ID = new DataColumn("角色ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column角色ID);
        this.column帐户名 = new DataColumn("帐户名", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column帐户名);
        this.column位置 = new DataColumn("位置", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column位置);
        this.column角色名 = new DataColumn("角色名", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column角色名);
        this.column角色类别 = new DataColumn("角色类别", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column角色类别);
        this.columnLV = new DataColumn("LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLV);
        this.column左手LV = new DataColumn("左手LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column左手LV);
        this.column左手装备 = new DataColumn("左手装备", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column左手装备);
        this.column右手LV = new DataColumn("右手LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column右手LV);
        this.column右手装备 = new DataColumn("右手装备", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column右手装备);
        this.column身体LV = new DataColumn("身体LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column身体LV);
        this.column身体装备 = new DataColumn("身体装备", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column身体装备);
        this.column护手LV = new DataColumn("护手LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column护手LV);
        this.column护腿LV = new DataColumn("护腿LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column护腿LV);
        this.column更换装备LV = new DataColumn("更换装备LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column更换装备LV);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.column角色ID
        }, true));
        this.column角色ID.AutoIncrement = true;
        this.column角色ID.AllowDBNull = false;
        this.column角色ID.Unique = true;
      }

      public GEHero109DataSet.角色资料Row New角色资料Row() => (GEHero109DataSet.角色资料Row) this.NewRow();

      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new GEHero109DataSet.角色资料Row(builder);

      protected override Type GetRowType() => typeof (GEHero109DataSet.角色资料Row);

      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.角色资料RowChanged == null)
          return;
        this.角色资料RowChanged((object) this, new GEHero109DataSet.角色资料RowChangeEvent((GEHero109DataSet.角色资料Row) e.Row, e.Action));
      }

      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.角色资料RowChanging == null)
          return;
        this.角色资料RowChanging((object) this, new GEHero109DataSet.角色资料RowChangeEvent((GEHero109DataSet.角色资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.角色资料RowDeleted == null)
          return;
        this.角色资料RowDeleted((object) this, new GEHero109DataSet.角色资料RowChangeEvent((GEHero109DataSet.角色资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.角色资料RowDeleting == null)
          return;
        this.角色资料RowDeleting((object) this, new GEHero109DataSet.角色资料RowChangeEvent((GEHero109DataSet.角色资料Row) e.Row, e.Action));
      }

      public void Remove角色资料Row(GEHero109DataSet.角色资料Row row) => this.Rows.Remove((DataRow) row);
    }

    [DebuggerStepThrough]
    public class 角色资料Row : DataRow
    {
      private GEHero109DataSet.角色资料DataTable table角色资料;

      internal 角色资料Row(DataRowBuilder rb)
        : base(rb)
      {
        this.table角色资料 = (GEHero109DataSet.角色资料DataTable) this.Table;
      }

      public int 角色ID
      {
        get => (int) this[this.table角色资料.角色IDColumn];
        set => this[this.table角色资料.角色IDColumn] = (object) value;
      }

      public string 帐户名
      {
        get
        {
          try
          {
            return (string) this[this.table角色资料.帐户名Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.帐户名Column] = (object) value;
      }

      public int 位置
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.位置Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.位置Column] = (object) value;
      }

      public string 角色名
      {
        get
        {
          try
          {
            return (string) this[this.table角色资料.角色名Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.角色名Column] = (object) value;
      }

      public string 角色类别
      {
        get
        {
          try
          {
            return (string) this[this.table角色资料.角色类别Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.角色类别Column] = (object) value;
      }

      public int LV
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.LVColumn] = (object) value;
      }

      public int 左手LV
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.左手LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.左手LVColumn] = (object) value;
      }

      public string 左手装备
      {
        get
        {
          try
          {
            return (string) this[this.table角色资料.左手装备Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.左手装备Column] = (object) value;
      }

      public int 右手LV
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.右手LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.右手LVColumn] = (object) value;
      }

      public string 右手装备
      {
        get
        {
          try
          {
            return (string) this[this.table角色资料.右手装备Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.右手装备Column] = (object) value;
      }

      public int 身体LV
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.身体LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.身体LVColumn] = (object) value;
      }

      public string 身体装备
      {
        get
        {
          try
          {
            return (string) this[this.table角色资料.身体装备Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.身体装备Column] = (object) value;
      }

      public int 护手LV
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.护手LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.护手LVColumn] = (object) value;
      }

      public int 护腿LV
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.护腿LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.护腿LVColumn] = (object) value;
      }

      public int 更换装备LV
      {
        get
        {
          try
          {
            return (int) this[this.table角色资料.更换装备LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table角色资料.更换装备LVColumn] = (object) value;
      }

      public bool Is帐户名Null() => this.IsNull(this.table角色资料.帐户名Column);

      public void Set帐户名Null() => this[this.table角色资料.帐户名Column] = Convert.DBNull;

      public bool Is位置Null() => this.IsNull(this.table角色资料.位置Column);

      public void Set位置Null() => this[this.table角色资料.位置Column] = Convert.DBNull;

      public bool Is角色名Null() => this.IsNull(this.table角色资料.角色名Column);

      public void Set角色名Null() => this[this.table角色资料.角色名Column] = Convert.DBNull;

      public bool Is角色类别Null() => this.IsNull(this.table角色资料.角色类别Column);

      public void Set角色类别Null() => this[this.table角色资料.角色类别Column] = Convert.DBNull;

      public bool IsLVNull() => this.IsNull(this.table角色资料.LVColumn);

      public void SetLVNull() => this[this.table角色资料.LVColumn] = Convert.DBNull;

      public bool Is左手LVNull() => this.IsNull(this.table角色资料.左手LVColumn);

      public void Set左手LVNull() => this[this.table角色资料.左手LVColumn] = Convert.DBNull;

      public bool Is左手装备Null() => this.IsNull(this.table角色资料.左手装备Column);

      public void Set左手装备Null() => this[this.table角色资料.左手装备Column] = Convert.DBNull;

      public bool Is右手LVNull() => this.IsNull(this.table角色资料.右手LVColumn);

      public void Set右手LVNull() => this[this.table角色资料.右手LVColumn] = Convert.DBNull;

      public bool Is右手装备Null() => this.IsNull(this.table角色资料.右手装备Column);

      public void Set右手装备Null() => this[this.table角色资料.右手装备Column] = Convert.DBNull;

      public bool Is身体LVNull() => this.IsNull(this.table角色资料.身体LVColumn);

      public void Set身体LVNull() => this[this.table角色资料.身体LVColumn] = Convert.DBNull;

      public bool Is身体装备Null() => this.IsNull(this.table角色资料.身体装备Column);

      public void Set身体装备Null() => this[this.table角色资料.身体装备Column] = Convert.DBNull;

      public bool Is护手LVNull() => this.IsNull(this.table角色资料.护手LVColumn);

      public void Set护手LVNull() => this[this.table角色资料.护手LVColumn] = Convert.DBNull;

      public bool Is护腿LVNull() => this.IsNull(this.table角色资料.护腿LVColumn);

      public void Set护腿LVNull() => this[this.table角色资料.护腿LVColumn] = Convert.DBNull;

      public bool Is更换装备LVNull() => this.IsNull(this.table角色资料.更换装备LVColumn);

      public void Set更换装备LVNull() => this[this.table角色资料.更换装备LVColumn] = Convert.DBNull;
    }

    [DebuggerStepThrough]
    public class 角色资料RowChangeEvent : EventArgs
    {
      private GEHero109DataSet.角色资料Row eventRow;
      private DataRowAction eventAction;

      public 角色资料RowChangeEvent(GEHero109DataSet.角色资料Row row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      public GEHero109DataSet.角色资料Row Row => this.eventRow;

      public DataRowAction Action => this.eventAction;
    }

    [DebuggerStepThrough]
    public class 卡表资料DataTable : DataTable, IEnumerable
    {
      private DataColumn columnCode;
      private DataColumn columnID;
      private DataColumn columnPW;
      private DataColumn columnUserName;

      internal 卡表资料DataTable()
        : base("卡表资料")
      {
        this.InitClass();
      }

      internal 卡表资料DataTable(DataTable table)
        : base(table.TableName)
      {
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
        this.DisplayExpression = table.DisplayExpression;
      }

      [Browsable(false)]
      public int Count => this.Rows.Count;

      internal DataColumn CodeColumn => this.columnCode;

      internal DataColumn IDColumn => this.columnID;

      internal DataColumn PWColumn => this.columnPW;

      internal DataColumn UserNameColumn => this.columnUserName;

      public GEHero109DataSet.卡表资料Row this[int index] => (GEHero109DataSet.卡表资料Row) this.Rows[index];

      public event GEHero109DataSet.卡表资料RowChangeEventHandler 卡表资料RowChanged;

      public event GEHero109DataSet.卡表资料RowChangeEventHandler 卡表资料RowChanging;

      public event GEHero109DataSet.卡表资料RowChangeEventHandler 卡表资料RowDeleted;

      public event GEHero109DataSet.卡表资料RowChangeEventHandler 卡表资料RowDeleting;

      public void Add卡表资料Row(GEHero109DataSet.卡表资料Row row) => this.Rows.Add((DataRow) row);

      public GEHero109DataSet.卡表资料Row Add卡表资料Row(
        string Code,
        string PW,
        string UserName)
      {
        GEHero109DataSet.卡表资料Row row = (GEHero109DataSet.卡表资料Row) this.NewRow();
        row.ItemArray = new object[4]
        {
          (object) Code,
          null,
          (object) PW,
          (object) UserName
        };
        this.Rows.Add((DataRow) row);
        return row;
      }

      public GEHero109DataSet.卡表资料Row FindByID(int ID) => (GEHero109DataSet.卡表资料Row) this.Rows.Find(new object[1]
      {
        (object) ID
      });

      public IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      public override DataTable Clone()
      {
        GEHero109DataSet.卡表资料DataTable 卡表资料DataTable = (GEHero109DataSet.卡表资料DataTable) base.Clone();
        卡表资料DataTable.InitVars();
        return (DataTable) 卡表资料DataTable;
      }

      protected override DataTable CreateInstance() => (DataTable) new GEHero109DataSet.卡表资料DataTable();

      internal void InitVars()
      {
        this.columnCode = this.Columns["Code"];
        this.columnID = this.Columns["ID"];
        this.columnPW = this.Columns["PW"];
        this.columnUserName = this.Columns["UserName"];
      }

      private void InitClass()
      {
        this.columnCode = new DataColumn("Code", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCode);
        this.columnID = new DataColumn("ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnID);
        this.columnPW = new DataColumn("PW", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPW);
        this.columnUserName = new DataColumn("UserName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnID
        }, true));
        this.columnID.AutoIncrement = true;
        this.columnID.AllowDBNull = false;
        this.columnID.Unique = true;
      }

      public GEHero109DataSet.卡表资料Row New卡表资料Row() => (GEHero109DataSet.卡表资料Row) this.NewRow();

      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new GEHero109DataSet.卡表资料Row(builder);

      protected override Type GetRowType() => typeof (GEHero109DataSet.卡表资料Row);

      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.卡表资料RowChanged == null)
          return;
        this.卡表资料RowChanged((object) this, new GEHero109DataSet.卡表资料RowChangeEvent((GEHero109DataSet.卡表资料Row) e.Row, e.Action));
      }

      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.卡表资料RowChanging == null)
          return;
        this.卡表资料RowChanging((object) this, new GEHero109DataSet.卡表资料RowChangeEvent((GEHero109DataSet.卡表资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.卡表资料RowDeleted == null)
          return;
        this.卡表资料RowDeleted((object) this, new GEHero109DataSet.卡表资料RowChangeEvent((GEHero109DataSet.卡表资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.卡表资料RowDeleting == null)
          return;
        this.卡表资料RowDeleting((object) this, new GEHero109DataSet.卡表资料RowChangeEvent((GEHero109DataSet.卡表资料Row) e.Row, e.Action));
      }

      public void Remove卡表资料Row(GEHero109DataSet.卡表资料Row row) => this.Rows.Remove((DataRow) row);
    }

    [DebuggerStepThrough]
    public class 卡表资料Row : DataRow
    {
      private GEHero109DataSet.卡表资料DataTable table卡表资料;

      internal 卡表资料Row(DataRowBuilder rb)
        : base(rb)
      {
        this.table卡表资料 = (GEHero109DataSet.卡表资料DataTable) this.Table;
      }

      public string Code
      {
        get
        {
          try
          {
            return (string) this[this.table卡表资料.CodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table卡表资料.CodeColumn] = (object) value;
      }

      public int ID
      {
        get => (int) this[this.table卡表资料.IDColumn];
        set => this[this.table卡表资料.IDColumn] = (object) value;
      }

      public string PW
      {
        get
        {
          try
          {
            return (string) this[this.table卡表资料.PWColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table卡表资料.PWColumn] = (object) value;
      }

      public string UserName
      {
        get
        {
          try
          {
            return (string) this[this.table卡表资料.UserNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table卡表资料.UserNameColumn] = (object) value;
      }

      public bool IsCodeNull() => this.IsNull(this.table卡表资料.CodeColumn);

      public void SetCodeNull() => this[this.table卡表资料.CodeColumn] = Convert.DBNull;

      public bool IsPWNull() => this.IsNull(this.table卡表资料.PWColumn);

      public void SetPWNull() => this[this.table卡表资料.PWColumn] = Convert.DBNull;

      public bool IsUserNameNull() => this.IsNull(this.table卡表资料.UserNameColumn);

      public void SetUserNameNull() => this[this.table卡表资料.UserNameColumn] = Convert.DBNull;
    }

    [DebuggerStepThrough]
    public class 卡表资料RowChangeEvent : EventArgs
    {
      private GEHero109DataSet.卡表资料Row eventRow;
      private DataRowAction eventAction;

      public 卡表资料RowChangeEvent(GEHero109DataSet.卡表资料Row row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      public GEHero109DataSet.卡表资料Row Row => this.eventRow;

      public DataRowAction Action => this.eventAction;
    }

    [DebuggerStepThrough]
    public class 授权帐号资料DataTable : DataTable, IEnumerable
    {
      private DataColumn columnBak;
      private DataColumn columnCode;
      private DataColumn columnID;
      private DataColumn columnLastDate;
      private DataColumn columnName;
      private DataColumn columnPW;
      private DataColumn columnValid;

      internal 授权帐号资料DataTable()
        : base("授权帐号资料")
      {
        this.InitClass();
      }

      internal 授权帐号资料DataTable(DataTable table)
        : base(table.TableName)
      {
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
        this.DisplayExpression = table.DisplayExpression;
      }

      [Browsable(false)]
      public int Count => this.Rows.Count;

      internal DataColumn BakColumn => this.columnBak;

      internal DataColumn CodeColumn => this.columnCode;

      internal DataColumn IDColumn => this.columnID;

      internal DataColumn LastDateColumn => this.columnLastDate;

      internal DataColumn NameColumn => this.columnName;

      internal DataColumn PWColumn => this.columnPW;

      internal DataColumn ValidColumn => this.columnValid;

      public GEHero109DataSet.授权帐号资料Row this[int index] => (GEHero109DataSet.授权帐号资料Row) this.Rows[index];

      public event GEHero109DataSet.授权帐号资料RowChangeEventHandler 授权帐号资料RowChanged;

      public event GEHero109DataSet.授权帐号资料RowChangeEventHandler 授权帐号资料RowChanging;

      public event GEHero109DataSet.授权帐号资料RowChangeEventHandler 授权帐号资料RowDeleted;

      public event GEHero109DataSet.授权帐号资料RowChangeEventHandler 授权帐号资料RowDeleting;

      public void Add授权帐号资料Row(GEHero109DataSet.授权帐号资料Row row) => this.Rows.Add((DataRow) row);

      public GEHero109DataSet.授权帐号资料Row Add授权帐号资料Row(
        string Bak,
        string Code,
        DateTime LastDate,
        string Name,
        string PW,
        int Valid)
      {
        GEHero109DataSet.授权帐号资料Row row = (GEHero109DataSet.授权帐号资料Row) this.NewRow();
        row.ItemArray = new object[7]
        {
          (object) Bak,
          (object) Code,
          null,
          (object) LastDate,
          (object) Name,
          (object) PW,
          (object) Valid
        };
        this.Rows.Add((DataRow) row);
        return row;
      }

      public GEHero109DataSet.授权帐号资料Row FindByID(int ID) => (GEHero109DataSet.授权帐号资料Row) this.Rows.Find(new object[1]
      {
        (object) ID
      });

      public IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      public override DataTable Clone()
      {
        GEHero109DataSet.授权帐号资料DataTable 授权帐号资料DataTable = (GEHero109DataSet.授权帐号资料DataTable) base.Clone();
        授权帐号资料DataTable.InitVars();
        return (DataTable) 授权帐号资料DataTable;
      }

      protected override DataTable CreateInstance() => (DataTable) new GEHero109DataSet.授权帐号资料DataTable();

      internal void InitVars()
      {
        this.columnBak = this.Columns["Bak"];
        this.columnCode = this.Columns["Code"];
        this.columnID = this.Columns["ID"];
        this.columnLastDate = this.Columns["LastDate"];
        this.columnName = this.Columns["Name"];
        this.columnPW = this.Columns["PW"];
        this.columnValid = this.Columns["Valid"];
      }

      private void InitClass()
      {
        this.columnBak = new DataColumn("Bak", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBak);
        this.columnCode = new DataColumn("Code", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCode);
        this.columnID = new DataColumn("ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnID);
        this.columnLastDate = new DataColumn("LastDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastDate);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnPW = new DataColumn("PW", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPW);
        this.columnValid = new DataColumn("Valid", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValid);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnID
        }, true));
        this.columnID.AutoIncrement = true;
        this.columnID.AllowDBNull = false;
        this.columnID.Unique = true;
      }

      public GEHero109DataSet.授权帐号资料Row New授权帐号资料Row() => (GEHero109DataSet.授权帐号资料Row) this.NewRow();

      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new GEHero109DataSet.授权帐号资料Row(builder);

      protected override Type GetRowType() => typeof (GEHero109DataSet.授权帐号资料Row);

      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.授权帐号资料RowChanged == null)
          return;
        this.授权帐号资料RowChanged((object) this, new GEHero109DataSet.授权帐号资料RowChangeEvent((GEHero109DataSet.授权帐号资料Row) e.Row, e.Action));
      }

      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.授权帐号资料RowChanging == null)
          return;
        this.授权帐号资料RowChanging((object) this, new GEHero109DataSet.授权帐号资料RowChangeEvent((GEHero109DataSet.授权帐号资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.授权帐号资料RowDeleted == null)
          return;
        this.授权帐号资料RowDeleted((object) this, new GEHero109DataSet.授权帐号资料RowChangeEvent((GEHero109DataSet.授权帐号资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.授权帐号资料RowDeleting == null)
          return;
        this.授权帐号资料RowDeleting((object) this, new GEHero109DataSet.授权帐号资料RowChangeEvent((GEHero109DataSet.授权帐号资料Row) e.Row, e.Action));
      }

      public void Remove授权帐号资料Row(GEHero109DataSet.授权帐号资料Row row) => this.Rows.Remove((DataRow) row);
    }

    [DebuggerStepThrough]
    public class 授权帐号资料Row : DataRow
    {
      private GEHero109DataSet.授权帐号资料DataTable table授权帐号资料;

      internal 授权帐号资料Row(DataRowBuilder rb)
        : base(rb)
      {
        this.table授权帐号资料 = (GEHero109DataSet.授权帐号资料DataTable) this.Table;
      }

      public string Bak
      {
        get
        {
          try
          {
            return (string) this[this.table授权帐号资料.BakColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table授权帐号资料.BakColumn] = (object) value;
      }

      public string Code
      {
        get
        {
          try
          {
            return (string) this[this.table授权帐号资料.CodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table授权帐号资料.CodeColumn] = (object) value;
      }

      public int ID
      {
        get => (int) this[this.table授权帐号资料.IDColumn];
        set => this[this.table授权帐号资料.IDColumn] = (object) value;
      }

      public DateTime LastDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.table授权帐号资料.LastDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table授权帐号资料.LastDateColumn] = (object) value;
      }

      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.table授权帐号资料.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table授权帐号资料.NameColumn] = (object) value;
      }

      public string PW
      {
        get
        {
          try
          {
            return (string) this[this.table授权帐号资料.PWColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table授权帐号资料.PWColumn] = (object) value;
      }

      public int Valid
      {
        get
        {
          try
          {
            return (int) this[this.table授权帐号资料.ValidColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table授权帐号资料.ValidColumn] = (object) value;
      }

      public bool IsBakNull() => this.IsNull(this.table授权帐号资料.BakColumn);

      public void SetBakNull() => this[this.table授权帐号资料.BakColumn] = Convert.DBNull;

      public bool IsCodeNull() => this.IsNull(this.table授权帐号资料.CodeColumn);

      public void SetCodeNull() => this[this.table授权帐号资料.CodeColumn] = Convert.DBNull;

      public bool IsLastDateNull() => this.IsNull(this.table授权帐号资料.LastDateColumn);

      public void SetLastDateNull() => this[this.table授权帐号资料.LastDateColumn] = Convert.DBNull;

      public bool IsNameNull() => this.IsNull(this.table授权帐号资料.NameColumn);

      public void SetNameNull() => this[this.table授权帐号资料.NameColumn] = Convert.DBNull;

      public bool IsPWNull() => this.IsNull(this.table授权帐号资料.PWColumn);

      public void SetPWNull() => this[this.table授权帐号资料.PWColumn] = Convert.DBNull;

      public bool IsValidNull() => this.IsNull(this.table授权帐号资料.ValidColumn);

      public void SetValidNull() => this[this.table授权帐号资料.ValidColumn] = Convert.DBNull;
    }

    [DebuggerStepThrough]
    public class 授权帐号资料RowChangeEvent : EventArgs
    {
      private GEHero109DataSet.授权帐号资料Row eventRow;
      private DataRowAction eventAction;

      public 授权帐号资料RowChangeEvent(GEHero109DataSet.授权帐号资料Row row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      public GEHero109DataSet.授权帐号资料Row Row => this.eventRow;

      public DataRowAction Action => this.eventAction;
    }

    [DebuggerStepThrough]
    public class 帐户资料DataTable : DataTable, IEnumerable
    {
      private DataColumn column帐户ID;
      private DataColumn column帐户名;
      private DataColumn column密码;
      private DataColumn column服务器类别;
      private DataColumn column服位置;
      private DataColumn column区位置;
      private DataColumn column有效;
      private DataColumn column被封;
      private DataColumn column地图;
      private DataColumn column更换地图LV;
      private DataColumn column更新时间;
      private DataColumn column备注;

      internal 帐户资料DataTable()
        : base("帐户资料")
      {
        this.InitClass();
      }

      internal 帐户资料DataTable(DataTable table)
        : base(table.TableName)
      {
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
        this.DisplayExpression = table.DisplayExpression;
      }

      [Browsable(false)]
      public int Count => this.Rows.Count;

      internal DataColumn 帐户IDColumn => this.column帐户ID;

      internal DataColumn 帐户名Column => this.column帐户名;

      internal DataColumn 密码Column => this.column密码;

      internal DataColumn 服务器类别Column => this.column服务器类别;

      internal DataColumn 服位置Column => this.column服位置;

      internal DataColumn 区位置Column => this.column区位置;

      internal DataColumn 有效Column => this.column有效;

      internal DataColumn 被封Column => this.column被封;

      internal DataColumn 地图Column => this.column地图;

      internal DataColumn 更换地图LVColumn => this.column更换地图LV;

      internal DataColumn 更新时间Column => this.column更新时间;

      internal DataColumn 备注Column => this.column备注;

      public GEHero109DataSet.帐户资料Row this[int index] => (GEHero109DataSet.帐户资料Row) this.Rows[index];

      public event GEHero109DataSet.帐户资料RowChangeEventHandler 帐户资料RowChanged;

      public event GEHero109DataSet.帐户资料RowChangeEventHandler 帐户资料RowChanging;

      public event GEHero109DataSet.帐户资料RowChangeEventHandler 帐户资料RowDeleted;

      public event GEHero109DataSet.帐户资料RowChangeEventHandler 帐户资料RowDeleting;

      public void Add帐户资料Row(GEHero109DataSet.帐户资料Row row) => this.Rows.Add((DataRow) row);

      public GEHero109DataSet.帐户资料Row Add帐户资料Row(
        string 帐户名,
        string 密码,
        string 服务器类别,
        int 服位置,
        int 区位置,
        int 有效,
        int 被封,
        string 地图,
        int 更换地图LV,
        DateTime 更新时间,
        string 备注)
      {
        GEHero109DataSet.帐户资料Row row = (GEHero109DataSet.帐户资料Row) this.NewRow();
        row.ItemArray = new object[12]
        {
          null,
          (object) 帐户名,
          (object) 密码,
          (object) 服务器类别,
          (object) 服位置,
          (object) 区位置,
          (object) 有效,
          (object) 被封,
          (object) 地图,
          (object) 更换地图LV,
          (object) 更新时间,
          (object) 备注
        };
        this.Rows.Add((DataRow) row);
        return row;
      }

      public GEHero109DataSet.帐户资料Row FindBy帐户ID(int 帐户ID) => (GEHero109DataSet.帐户资料Row) this.Rows.Find(new object[1]
      {
        (object) 帐户ID
      });

      public IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      public override DataTable Clone()
      {
        GEHero109DataSet.帐户资料DataTable 帐户资料DataTable = (GEHero109DataSet.帐户资料DataTable) base.Clone();
        帐户资料DataTable.InitVars();
        return (DataTable) 帐户资料DataTable;
      }

      protected override DataTable CreateInstance() => (DataTable) new GEHero109DataSet.帐户资料DataTable();

      internal void InitVars()
      {
        this.column帐户ID = this.Columns["帐户ID"];
        this.column帐户名 = this.Columns["帐户名"];
        this.column密码 = this.Columns["密码"];
        this.column服务器类别 = this.Columns["服务器类别"];
        this.column服位置 = this.Columns["服位置"];
        this.column区位置 = this.Columns["区位置"];
        this.column有效 = this.Columns["有效"];
        this.column被封 = this.Columns["被封"];
        this.column地图 = this.Columns["地图"];
        this.column更换地图LV = this.Columns["更换地图LV"];
        this.column更新时间 = this.Columns["更新时间"];
        this.column备注 = this.Columns["备注"];
      }

      private void InitClass()
      {
        this.column帐户ID = new DataColumn("帐户ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column帐户ID);
        this.column帐户名 = new DataColumn("帐户名", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column帐户名);
        this.column密码 = new DataColumn("密码", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column密码);
        this.column服务器类别 = new DataColumn("服务器类别", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column服务器类别);
        this.column服位置 = new DataColumn("服位置", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column服位置);
        this.column区位置 = new DataColumn("区位置", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column区位置);
        this.column有效 = new DataColumn("有效", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column有效);
        this.column被封 = new DataColumn("被封", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column被封);
        this.column地图 = new DataColumn("地图", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column地图);
        this.column更换地图LV = new DataColumn("更换地图LV", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.column更换地图LV);
        this.column更新时间 = new DataColumn("更新时间", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.column更新时间);
        this.column备注 = new DataColumn("备注", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.column备注);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.column帐户ID
        }, true));
        this.column帐户ID.AutoIncrement = true;
        this.column帐户ID.AllowDBNull = false;
        this.column帐户ID.Unique = true;
      }

      public GEHero109DataSet.帐户资料Row New帐户资料Row() => (GEHero109DataSet.帐户资料Row) this.NewRow();

      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new GEHero109DataSet.帐户资料Row(builder);

      protected override Type GetRowType() => typeof (GEHero109DataSet.帐户资料Row);

      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.帐户资料RowChanged == null)
          return;
        this.帐户资料RowChanged((object) this, new GEHero109DataSet.帐户资料RowChangeEvent((GEHero109DataSet.帐户资料Row) e.Row, e.Action));
      }

      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.帐户资料RowChanging == null)
          return;
        this.帐户资料RowChanging((object) this, new GEHero109DataSet.帐户资料RowChangeEvent((GEHero109DataSet.帐户资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.帐户资料RowDeleted == null)
          return;
        this.帐户资料RowDeleted((object) this, new GEHero109DataSet.帐户资料RowChangeEvent((GEHero109DataSet.帐户资料Row) e.Row, e.Action));
      }

      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.帐户资料RowDeleting == null)
          return;
        this.帐户资料RowDeleting((object) this, new GEHero109DataSet.帐户资料RowChangeEvent((GEHero109DataSet.帐户资料Row) e.Row, e.Action));
      }

      public void Remove帐户资料Row(GEHero109DataSet.帐户资料Row row) => this.Rows.Remove((DataRow) row);
    }

    [DebuggerStepThrough]
    public class 帐户资料Row : DataRow
    {
      private GEHero109DataSet.帐户资料DataTable table帐户资料;

      internal 帐户资料Row(DataRowBuilder rb)
        : base(rb)
      {
        this.table帐户资料 = (GEHero109DataSet.帐户资料DataTable) this.Table;
      }

      public int 帐户ID
      {
        get => (int) this[this.table帐户资料.帐户IDColumn];
        set => this[this.table帐户资料.帐户IDColumn] = (object) value;
      }

      public string 帐户名
      {
        get
        {
          try
          {
            return (string) this[this.table帐户资料.帐户名Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.帐户名Column] = (object) value;
      }

      public string 密码
      {
        get
        {
          try
          {
            return (string) this[this.table帐户资料.密码Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.密码Column] = (object) value;
      }

      public string 服务器类别
      {
        get
        {
          try
          {
            return (string) this[this.table帐户资料.服务器类别Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.服务器类别Column] = (object) value;
      }

      public int 服位置
      {
        get
        {
          try
          {
            return (int) this[this.table帐户资料.服位置Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.服位置Column] = (object) value;
      }

      public int 区位置
      {
        get
        {
          try
          {
            return (int) this[this.table帐户资料.区位置Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.区位置Column] = (object) value;
      }

      public int 有效
      {
        get
        {
          try
          {
            return (int) this[this.table帐户资料.有效Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.有效Column] = (object) value;
      }

      public int 被封
      {
        get
        {
          try
          {
            return (int) this[this.table帐户资料.被封Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.被封Column] = (object) value;
      }

      public string 地图
      {
        get
        {
          try
          {
            return (string) this[this.table帐户资料.地图Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.地图Column] = (object) value;
      }

      public int 更换地图LV
      {
        get
        {
          try
          {
            return (int) this[this.table帐户资料.更换地图LVColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.更换地图LVColumn] = (object) value;
      }

      public DateTime 更新时间
      {
        get
        {
          try
          {
            return (DateTime) this[this.table帐户资料.更新时间Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.更新时间Column] = (object) value;
      }

      public string 备注
      {
        get
        {
          try
          {
            return (string) this[this.table帐户资料.备注Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("无法获取值，因为它是 DBNull。", (Exception) ex);
          }
        }
        set => this[this.table帐户资料.备注Column] = (object) value;
      }

      public bool Is帐户名Null() => this.IsNull(this.table帐户资料.帐户名Column);

      public void Set帐户名Null() => this[this.table帐户资料.帐户名Column] = Convert.DBNull;

      public bool Is密码Null() => this.IsNull(this.table帐户资料.密码Column);

      public void Set密码Null() => this[this.table帐户资料.密码Column] = Convert.DBNull;

      public bool Is服务器类别Null() => this.IsNull(this.table帐户资料.服务器类别Column);

      public void Set服务器类别Null() => this[this.table帐户资料.服务器类别Column] = Convert.DBNull;

      public bool Is服位置Null() => this.IsNull(this.table帐户资料.服位置Column);

      public void Set服位置Null() => this[this.table帐户资料.服位置Column] = Convert.DBNull;

      public bool Is区位置Null() => this.IsNull(this.table帐户资料.区位置Column);

      public void Set区位置Null() => this[this.table帐户资料.区位置Column] = Convert.DBNull;

      public bool Is有效Null() => this.IsNull(this.table帐户资料.有效Column);

      public void Set有效Null() => this[this.table帐户资料.有效Column] = Convert.DBNull;

      public bool Is被封Null() => this.IsNull(this.table帐户资料.被封Column);

      public void Set被封Null() => this[this.table帐户资料.被封Column] = Convert.DBNull;

      public bool Is地图Null() => this.IsNull(this.table帐户资料.地图Column);

      public void Set地图Null() => this[this.table帐户资料.地图Column] = Convert.DBNull;

      public bool Is更换地图LVNull() => this.IsNull(this.table帐户资料.更换地图LVColumn);

      public void Set更换地图LVNull() => this[this.table帐户资料.更换地图LVColumn] = Convert.DBNull;

      public bool Is更新时间Null() => this.IsNull(this.table帐户资料.更新时间Column);

      public void Set更新时间Null() => this[this.table帐户资料.更新时间Column] = Convert.DBNull;

      public bool Is备注Null() => this.IsNull(this.table帐户资料.备注Column);

      public void Set备注Null() => this[this.table帐户资料.备注Column] = Convert.DBNull;
    }

    [DebuggerStepThrough]
    public class 帐户资料RowChangeEvent : EventArgs
    {
      private GEHero109DataSet.帐户资料Row eventRow;
      private DataRowAction eventAction;

      public 帐户资料RowChangeEvent(GEHero109DataSet.帐户资料Row row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      public GEHero109DataSet.帐户资料Row Row => this.eventRow;

      public DataRowAction Action => this.eventAction;
    }
  }
}
