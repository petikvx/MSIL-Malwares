// Decompiled with JetBrains decompiler
// Type:   
// Assembly: Egoebwgfjtvapr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1CC6CB3C-932E-4FDA-6A81-0D2F63757017
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-c90a123be3ef2de313a0b0b214833fe883c236120f1a22948a762ac3f936fca3.exe

using Microsoft.Win32.SafeHandles;
using System;
using System.Runtime.InteropServices;
using System.Security;

internal static class \u000F\u2000\u2000
{
  public static void \u0002(uint _param0)
  {
    if (_param0 == 0U)
      return;
    int num1 = (int) _param0;
    if (true)
      goto label_3;
label_2:
    uint num2;
    throw new InvalidOperationException(num2.ToString());
label_3:
    num2 = (uint) num1;
    goto label_2;
  }

  [DllImport("ncrypt.dll", EntryPoint = "NCryptFreeObject")]
  public static extern uint \u0002(IntPtr _param0);

  [DllImport("ncrypt.dll", EntryPoint = "NCryptEncrypt")]
  public static extern uint \u0002(
    \u000F\u2000\u2000.\u0003 _param0,
    [MarshalAs(UnmanagedType.LPArray)] byte[] _param1,
    int _param2,
    IntPtr _param3,
    [MarshalAs(UnmanagedType.LPArray)] byte[] _param4,
    int _param5,
    out int _param6,
    int _param7);

  [DllImport("ncrypt.dll", EntryPoint = "NCryptImportKey", CharSet = CharSet.Unicode)]
  public static extern uint \u0002(
    \u000F\u2000\u2000.\u0005 _param0,
    IntPtr _param1,
    string _param2,
    IntPtr _param3,
    out \u000F\u2000\u2000.\u0003 _param4,
    [MarshalAs(UnmanagedType.LPArray)] byte[] _param5,
    int _param6,
    uint _param7);

  [DllImport("ncrypt.dll", EntryPoint = "NCryptOpenStorageProvider", CharSet = CharSet.Unicode)]
  public static extern uint \u0002(
    out \u000F\u2000\u2000.\u0005 _param0,
    string _param1,
    uint _param2);

  public struct \u0002
  {
    public uint \u0002;
    public int \u0003;
    public int \u0005;
    public int \u0008;
    public int \u0006;
    public int \u000E;
  }

  [SecurityCritical]
  public sealed class \u0003 : SafeHandleZeroOrMinusOneIsInvalid
  {
    public \u0003()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector(true);
    }

    public override bool IsInvalid
    {
      get
      {
        if (true)
          ;
        return this.handle == IntPtr.Zero;
      }
    }

    protected override bool ReleaseHandle()
    {
      if (true)
        ;
      return \u000F\u2000\u2000.\u0002(this.handle) == 0U;
    }
  }

  [SecurityCritical]
  public sealed class \u0005 : SafeHandleZeroOrMinusOneIsInvalid
  {
    public \u0005()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector(true);
    }

    public override bool IsInvalid
    {
      get
      {
        if (true)
          ;
        return this.handle == IntPtr.Zero;
      }
    }

    protected override bool ReleaseHandle()
    {
      if (true)
        ;
      return \u000F\u2000\u2000.\u0002(this.handle) == 0U;
    }
  }
}
