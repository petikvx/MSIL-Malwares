// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.DotExpression
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using System;
using System.Collections.Generic;

namespace AjScript.Expressions
{
  public class DotExpression : IExpression
  {
    private IExpression expression;
    private string name;
    private ICollection<IExpression> arguments;
    private Type type;

    public DotExpression(IExpression expression, string name)
      : this(expression, name, (ICollection<IExpression>) null)
    {
    }

    public DotExpression(IExpression expression, string name, ICollection<IExpression> arguments)
    {
      this.expression = expression;
      this.name = name;
      this.arguments = arguments;
      this.type = DotExpression.AsType(this.expression);
    }

    public string Name => this.name;

    public IExpression Expression => this.expression;

    public Type Type => this.type;

    public ICollection<IExpression> Arguments => this.arguments;

    public object Evaluate(IContext context)
    {
      object obj1 = (object) null;
      if (this.type == (Type) null)
        obj1 = this.expression.Evaluate(context);
      object[] parameters = (object[]) null;
      if (this.arguments != null)
      {
        List<object> objectList = new List<object>();
        foreach (IExpression expression in (IEnumerable<IExpression>) this.arguments)
        {
          object obj2 = expression.Evaluate(context);
          objectList.Add(obj2);
        }
        parameters = objectList.ToArray();
      }
      if (this.type != (Type) null)
        return TypeUtilities.InvokeTypeMember(this.type, this.name, parameters);
      if ((object) (obj1 as Type) != null)
        return TypeUtilities.InvokeTypeMember((Type) obj1, this.name, parameters);
      return obj1 == null ? (object) null : ObjectUtilities.GetValue(obj1, this.name, parameters);
    }

    private static Type AsType(IExpression expression)
    {
      string name = DotExpression.AsName(expression);
      return name == null ? (Type) null : TypeUtilities.AsType(name);
    }

    private static string AsName(IExpression expression)
    {
      if (!(expression is DotExpression))
        return (string) null;
      DotExpression dotExpression = (DotExpression) expression;
      return DotExpression.AsName(dotExpression.Expression) + "." + dotExpression.Name;
    }
  }
}
