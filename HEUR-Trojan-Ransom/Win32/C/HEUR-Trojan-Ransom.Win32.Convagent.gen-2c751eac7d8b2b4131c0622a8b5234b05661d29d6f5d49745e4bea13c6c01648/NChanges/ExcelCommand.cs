// Decompiled with JetBrains decompiler
// Type: NChanges.ExcelCommand
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using Mono.Options;
using NPOI;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;
using NPOI.SS.Util;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml;

namespace NChanges
{
  public class ExcelCommand
  {
    private readonly OptionSet _optionSet;
    private string _output = "%name%-%version%-report.xls";
    private string _columns = "assembly,version,change,changeDetails,namespace,typeKind,type,memberKind,member,params,memberType";
    private string[] _splitColumns;
    private string _name;
    private bool _multipleSheets;
    private int _rowIndex = 1;
    private static string _currentName;
    private static readonly Dictionary<string, ExcelCommand.FieldInfo> _columnMap = new Dictionary<string, ExcelCommand.FieldInfo>();

    static ExcelCommand()
    {
      ExcelCommand._columnMap["name"] = new ExcelCommand.FieldInfo()
      {
        Header = "Name",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => ExcelCommand._currentName)
      };
      ExcelCommand._columnMap["assembly"] = new ExcelCommand.FieldInfo()
      {
        Header = "Assembly",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => a.Name)
      };
      ExcelCommand._columnMap["version"] = new ExcelCommand.FieldInfo()
      {
        Header = "Version",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => tc == null ? mc.Version : tc.Version)
      };
      ExcelCommand._columnMap["change"] = new ExcelCommand.FieldInfo()
      {
        Header = "Change",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => tc == null ? mc.Kind.ToString() : tc.Kind.ToString())
      };
      ExcelCommand._columnMap["changeDetails"] = new ExcelCommand.FieldInfo()
      {
        Header = "Change Details",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => ExcelCommand.GetDetails(tc, mc))
      };
      ExcelCommand._columnMap["namespace"] = new ExcelCommand.FieldInfo()
      {
        Header = "Namespace",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => t.Namespace)
      };
      ExcelCommand._columnMap["typeKind"] = new ExcelCommand.FieldInfo()
      {
        Header = "Type Kind",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => t.Kind.ToString())
      };
      ExcelCommand._columnMap["type"] = new ExcelCommand.FieldInfo()
      {
        Header = "Type",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => t.Name)
      };
      ExcelCommand._columnMap["memberKind"] = new ExcelCommand.FieldInfo()
      {
        Header = "Member Kind",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => m == null ? "" : m.Kind.ToString())
      };
      ExcelCommand._columnMap["member"] = new ExcelCommand.FieldInfo()
      {
        Header = "Member",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => m == null ? "" : m.Name)
      };
      ExcelCommand._columnMap["params"] = new ExcelCommand.FieldInfo()
      {
        Header = "Parameters",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => m == null ? "" : string.Join(", ", m.Parameters.Select<ParameterInfo, string>((Func<ParameterInfo, string>) (mi => TypeHelpers.NormalizeTypeName(mi.Type) + " " + mi.Name)).ToArray<string>()))
      };
      ExcelCommand._columnMap["memberType"] = new ExcelCommand.FieldInfo()
      {
        Header = "Return/Property/Event/Field Type",
        Getter = (ExcelCommand.Getter) ((a, t, tc, m, mc) => m == null ? "" : TypeHelpers.NormalizeTypeName(m.Type))
      };
    }

    private static string GetDetails(TypeChangeInfo tc, MemberChangeInfo mc)
    {
      if (mc == null)
        return (string) null;
      string details = "";
      if (!string.IsNullOrEmpty(mc.Old))
      {
        details = mc.Old;
        if (!string.IsNullOrEmpty(mc.New))
          details += " → ";
      }
      if (!string.IsNullOrEmpty(mc.New))
        details += mc.New;
      return details;
    }

    public ExcelCommand() => this._optionSet = new OptionSet()
    {
      {
        "o|output=",
        "output file",
        (Action<string>) (v => this._output = v)
      },
      {
        "c|columns=",
        "columns",
        (Action<string>) (v => this._columns = v)
      },
      {
        "m|multiple-sheets",
        "create a new worksheet for each report",
        (Action<string>) (v => this._multipleSheets = true)
      },
      {
        "n|name=",
        "library name regex pattern",
        (Action<string>) (v => this._name = v)
      }
    };

    public void Run(IEnumerable<string> args)
    {
      List<string> paths = this._optionSet.Parse(args);
      if (!string.IsNullOrEmpty(this._name) && !this._multipleSheets)
        this._columns = "name," + this._columns;
      this._splitColumns = this._columns.Split(',');
      HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
      ICellStyle cellStyle = hssfWorkbook.CreateCellStyle();
      IFont font = hssfWorkbook.CreateFont();
      font.Boldweight = (short) 700;
      cellStyle.SetFont(font);
      string path = (string) null;
      ISheet worksheet = (ISheet) null;
      foreach (string expandPath in PathHelper.ExpandPaths((IEnumerable<string>) paths))
      {
        AssemblyInfo assemblyInfo = this.LoadReport(expandPath);
        if (path == null)
          path = PathHelper.FormatPath(this._output, assemblyInfo);
        if (assemblyInfo.HasChanges())
        {
          ExcelCommand._currentName = assemblyInfo.Name;
          if (!string.IsNullOrEmpty(this._name))
          {
            Match match = Regex.Match(ExcelCommand._currentName, this._name);
            if (match.Success)
              ExcelCommand._currentName = match.Groups.Cast<Group>().Skip<Group>(1).First<Group>((Func<Group, bool>) (g => !string.IsNullOrEmpty(g.Value))).Value;
          }
          if (this._multipleSheets || worksheet == null)
          {
            worksheet = hssfWorkbook.CreateSheet(this._multipleSheets ? ExcelCommand._currentName : "Changes");
            this.AddHeaders(worksheet, cellStyle);
          }
          this.AddData(assemblyInfo, worksheet);
          if (this._multipleSheets)
            this.FinalizeWorkSheet(worksheet);
        }
      }
      if (!this._multipleSheets)
        this.FinalizeWorkSheet(worksheet);
      ((POIDocument) hssfWorkbook).Write((Stream) new FileStream(path, FileMode.Create));
    }

    private void FinalizeWorkSheet(ISheet worksheet)
    {
      if (worksheet == null)
        return;
      if (worksheet is HSSFSheet hssfSheet)
        hssfSheet.SetAutoFilter(new CellRangeAddress(0, this._rowIndex - 1, 0, this._splitColumns.Length - 1));
      this.ForEachColumn((Action<int, ExcelCommand.FieldInfo>) ((i, f) =>
      {
        worksheet.AutoSizeColumn(i);
        int num = Math.Min(worksheet.GetColumnWidth(i) + 1024, 65280);
        worksheet.SetColumnWidth(i, num);
      }));
    }

    private AssemblyInfo LoadReport(string path)
    {
      AssemblyInfo assemblyInfo = new AssemblyInfo();
      assemblyInfo.ReadXml((XmlReader) new XmlTextReader(path));
      return assemblyInfo;
    }

    private void AddHeaders(ISheet worksheet, ICellStyle headerCellStyle)
    {
      IRow row = worksheet.CreateRow(0);
      this.ForEachColumn((Action<int, ExcelCommand.FieldInfo>) ((i, f) =>
      {
        ICell cell = row.CreateCell(i);
        cell.SetCellValue(f.Header);
        cell.CellStyle = headerCellStyle;
      }));
    }

    private void AddData(AssemblyInfo report, ISheet worksheet)
    {
      List<List<string>> source = new List<List<string>>();
      foreach (TypeInfo type in (IEnumerable<TypeInfo>) report.Types)
      {
        TypeInfo typeInfo = type;
        foreach (TypeChangeInfo change1 in (IEnumerable<TypeChangeInfo>) typeInfo.Changes)
        {
          TypeChangeInfo change = change1;
          List<string> row = new List<string>();
          source.Add(row);
          this.ForEachColumn((Action<int, ExcelCommand.FieldInfo>) ((i, f) => row.Add(f.Getter(report, typeInfo, change, (MemberInfo) null, (MemberChangeInfo) null))));
        }
        foreach (MemberInfo member in (IEnumerable<MemberInfo>) typeInfo.Members)
        {
          MemberInfo memberInfo = member;
          foreach (MemberChangeInfo change2 in (IEnumerable<MemberChangeInfo>) memberInfo.Changes)
          {
            MemberChangeInfo change = change2;
            List<string> row = new List<string>();
            source.Add(row);
            this.ForEachColumn((Action<int, ExcelCommand.FieldInfo>) ((i, f) => row.Add(f.Getter(report, typeInfo, (TypeChangeInfo) null, memberInfo, change))));
          }
        }
      }
      List<List<string>> list = source.OrderByDescending<List<string>, string>((Func<List<string>, string>) (row => row[0])).ToList<List<string>>();
      if (this._multipleSheets)
        this._rowIndex = 1;
      foreach (List<string> stringList in list)
      {
        IRow row = worksheet.CreateRow(this._rowIndex);
        for (int index = 0; index < stringList.Count; ++index)
          row.CreateCell(index).SetCellValue(stringList[index]);
        ++this._rowIndex;
      }
    }

    private void ForEachColumn(Action<int, ExcelCommand.FieldInfo> worker)
    {
      int num = 0;
      foreach (string splitColumn in this._splitColumns)
        worker(num++, ExcelCommand._columnMap[splitColumn.Trim()]);
    }

    public void ShowHelp()
    {
      this._optionSet.WriteOptionDescriptions(Console.Error);
      Console.Error.WriteLine();
      Console.Error.WriteLine("Avaliable Columns: " + string.Join(",", ExcelCommand._columnMap.Keys.OrderBy<string, string>((Func<string, string>) (c => c)).ToArray<string>()));
      Console.Error.WriteLine("Default Columns: " + this._columns);
    }

    private class FieldInfo
    {
      public string Header { get; set; }

      public ExcelCommand.Getter Getter { get; set; }
    }

    private delegate string Getter(
      AssemblyInfo a,
      TypeInfo t,
      TypeChangeInfo tc,
      MemberInfo m,
      MemberChangeInfo mi);
  }
}
