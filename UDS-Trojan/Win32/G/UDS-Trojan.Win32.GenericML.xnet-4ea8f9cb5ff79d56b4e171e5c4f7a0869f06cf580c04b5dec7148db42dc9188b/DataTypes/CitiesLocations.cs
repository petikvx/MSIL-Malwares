// Decompiled with JetBrains decompiler
// Type: Path_Finder.DataTypes.CitiesLocations
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using System.Collections.Generic;

namespace Path_Finder.DataTypes
{
  public class CitiesLocations
  {
    public Dictionary<City, Coordinates> locations;

    public CitiesLocations() => this.locations = new Dictionary<City, Coordinates>();

    private void Reset() => this.locations = (Dictionary<City, Coordinates>) null;

    public void Copy(CitiesLocations newCitiesLocations)
    {
      this.Reset();
      this.locations = new Dictionary<City, Coordinates>();
      foreach (City key in newCitiesLocations.locations.Keys)
      {
        Coordinates coordinates;
        newCitiesLocations.locations.TryGetValue(key, out coordinates);
        this.locations.Add(new City(key), new Coordinates(coordinates));
      }
    }

    public override int GetHashCode()
    {
      int hashCode = 0;
      foreach (City key in this.locations.Keys)
      {
        Coordinates coordinates;
        this.locations.TryGetValue(key, out coordinates);
        int num = key.GetHashCode() ^ coordinates.GetHashCode();
        if (hashCode == 0)
          hashCode = num;
        else
          hashCode ^= num;
      }
      return hashCode;
    }

    public override bool Equals(object obj) => this.Equals(obj as CitiesLocations);

    public bool Equals(CitiesLocations toCompare)
    {
      if (toCompare == null || this.locations.Count != toCompare.locations.Count)
        return false;
      foreach (KeyValuePair<City, Coordinates> location in this.locations)
      {
        if (!toCompare.locations.ContainsKey(location.Key) || !location.Value.Equals(toCompare.locations[location.Key]))
          return false;
      }
      return true;
    }
  }
}
