// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.TransmitterThread
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace PreEmptive.Analytics.Common
{
  public class TransmitterThread : MessageQueueProcessor, IQueueTransmitter, IQueueProcessor
  {
    private IXMLTransmitter a;
    private AgentInfo b;
    private IConfigurationProvider c;
    private IMessageDequeuer d;
    private IPlatform e;
    private Action<MessageBatch> f;
    private AutoResetEvent g;
    private object h;
    private volatile bool i;
    private ManualResetEvent j;

    public event Action<MessageBatch> TransmissionFailed
    {
      add
      {
        int num1;
        int num2;
        Action<MessageBatch> action;
        switch (0)
        {
          case 0:
label_2:
            num2 = 1;
            if (num2 == 0)
              ;
            action = this.f;
            num2 = 1;
            num1 = num2;
            goto default;
          default:
label_1:
            Action<MessageBatch> comparand;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  if (action == comparand)
                  {
                    num2 = 2;
                    num1 = num2;
                    continue;
                  }
                  goto case 1;
                case 1:
                  comparand = action;
                  action = Interlocked.CompareExchange<Action<MessageBatch>>(ref this.f, comparand + value, comparand);
                  num2 = 0;
                  num1 = num2;
                  continue;
                case 2:
                  goto label_8;
                default:
                  goto label_2;
              }
            }
label_8:
            num2 = -9698;
            int num3 = num2;
            num2 = -9698;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                return;
            }
        }
      }
      remove
      {
        int num1;
        Action<MessageBatch> action;
        int num2;
        switch (0)
        {
          case 0:
label_2:
            action = this.f;
            num2 = 1;
            num1 = num2;
            goto default;
          default:
label_1:
            Action<MessageBatch> comparand;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  if (action == comparand)
                  {
                    num2 = 2;
                    num1 = num2;
                    continue;
                  }
                  goto case 1;
                case 1:
                  comparand = action;
                  action = Interlocked.CompareExchange<Action<MessageBatch>>(ref this.f, comparand - value, comparand);
                  num2 = 0;
                  num1 = num2;
                  continue;
                case 2:
                  goto label_7;
                default:
                  goto label_2;
              }
            }
label_7:
            num2 = -11350;
            int num3 = num2;
            num2 = -11350;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                num2 = 1;
                if (num2 == 0)
                  ;
                num2 = 0;
                if (num2 == 0)
                  ;
                return;
            }
        }
      }
    }

    public TransmitterThread(
      AgentInfo info,
      IMessageDequeuer dequeuer,
      IFlowController flowController,
      IClientToolsProvider tools)
    {
      int A_1 = 8;
      this.g = new AutoResetEvent(true);
      this.h = new object();
      this.j = new ManualResetEvent(false);
      // ISSUE: explicit constructor call
      base.\u002Ector(flowController, tools.Logger, (IAsyncProvider) tools.Platform);
      try
      {
        this.a = tools.Platform.CreateXMLTransmitter();
      }
      catch (Exception ex)
      {
        tools.Logger.LogException(ex, Utils.a("ﶻ킽\uE0BF럁\uAAC3ꏅ냇뫉꧋귍\uA4CF럑냓\uF6D5뷗ꋙ뿛믝郟雡跣觥蛧쫩菫跭鏯蟱蛳鏵鳷", A_1));
        tools.Logger.LogError(Utils.a("僚첽늿귁뛃\uE6C5ꇇ\uA4C9ꗋ뫍맏돑룓뿕ꋗ동닛망샟뫡ꧣꫥ죧뻩黫迭黯臱駳\u9FF5賷軹駻賽\u2EFF∁䤃挅笇礉洋植甏愑㐓甕礗琙㰛瀝伟嘡У䐥䴧\u0A29堫尭儯就䜳嬵儷丹䠻嬽\u243F捁", A_1));
      }
      this.a = this.a ?? (IXMLTransmitter) new TransmitterThread.a();
      this.c = (IConfigurationProvider) tools;
      this.b = info;
      this.d = dequeuer;
      this.e = tools.Platform;
    }

    public override void Start()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = -3858;
      int num2 = num1;
      num1 = -3858;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          base.Start();
          this.i = false;
          this.g = new AutoResetEvent(true);
          break;
        default:
          goto case 1;
      }
    }

    public override void ProcessBatch(MessageBatch batch)
    {
      int A_1 = 19;
      int num1 = 5;
      int num2;
      while (true)
      {
        bool sendSucceeded;
        switch (num1)
        {
          case 0:
            this.logger.LogWarning(Utils.a("鏆믈\uAACAꏌ볎볐뫒ꛔꓖ냘듚돜\uFFDE軠藢엤諦賨飪黬軮雰雲헴闶飸迺黼韾℀琂氄猆愈⬊", A_1) + (object) batch.Messages.Count + Utils.a("\uE7C6\uA4C8껊뻌볎냐듒냔ￖ\uAAD8\uF2DA\uFDDC럞胠郢엤臦裨苪臬諮闰\uDDF2", A_1));
            num2 = 4;
            num1 = num2;
            continue;
          case 1:
            if (!sendSucceeded)
            {
              num2 = 0;
              num1 = num2;
              continue;
            }
            goto label_23;
          case 2:
            if (this.flowController.SupportOfflineStorage)
            {
              num2 = 7;
              num1 = num2;
              continue;
            }
            goto label_22;
          case 3:
            goto label_9;
          case 4:
            if (!this.flowController.SupportOfflineStorage)
              goto label_18;
            else
              break;
          case 5:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 6:
            sendSucceeded = this.Transmit(batch);
            this.flowController.OnSend(sendSucceeded);
            num2 = 1;
            num1 = num2;
            continue;
          case 7:
            num2 = -581;
            int num3 = num2;
            num2 = -581;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                break;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                this.a(batch);
                num2 = 8;
                num1 = num2;
                continue;
            }
            break;
          case 8:
            goto label_17;
          default:
label_3:
            if (this.flowController.OkToTransmit())
            {
              num2 = 6;
              num1 = num2;
              continue;
            }
            this.logger.LogWarning(Utils.a("蓆ꛈꗊꯌꛎ뛐ꛒ\uA7D4뛖귘닚닜뇞쇠蟢諤苦髨쯪菬胮藰폲藴鋶诸雺铼课℀眂洄戆⤈砊栌愎甐稒笔瀖㤘琚笜㼞䰠䘢嘤否䠨䰪䠬尮ἰጲ破制䨸䠺尼堾⑀あ敄う⁈❊⅌潎㽐㱒\u2154睖㭘㹚絜ⱞѠൢᅤ䥦", A_1));
            num2 = 2;
            num1 = num2;
            continue;
        }
        num2 = 3;
        num1 = num2;
      }
label_22:
      return;
label_9:
      this.a(batch);
      return;
label_17:
      num2 = 1;
      if (num2 == 0)
        ;
      return;
label_18:
      return;
label_23:
      this.logger.LogInfo(Utils.a("鏆믈\uAACAꏌ볎볐뫒ꛔꓖ냘듚돜\uFFDE軠藢엤諦賨飪黬軮雰雲헴闶飸迺黼韾℀琂氄猆愈⬊", A_1) + (object) batch.Messages.Count + Utils.a("\uE7C6\uA4C8껊뻌볎냐듒냔ￖ\uAAD8\uF2DA\uFDDC럞胠郢엤铦鳨裪軬諮铰韲郴鏶ퟸ", A_1));
    }

    private void a(MessageBatch A_0)
    {
      int num = 1;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.f(A_0);
            num = 2;
            continue;
          case 1:
            switch (0)
            {
              case 0:
                break;
              default:
                continue;
            }
            break;
          case 2:
            goto label_7;
        }
        if (this.f != null)
          num = 0;
        else
          break;
      }
      return;
label_7:
      switch (true ? 1 : 0)
      {
        case 0:
          break;
        case 2:
          break;
        default:
          if (false)
            ;
          if (true)
            break;
          break;
      }
    }

    public void FailTransmissionsNow()
    {
      int A_1 = 15;
      int num1 = 11104;
      int num2 = num1;
      num1 = 11104;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (true)
            ;
          if (false)
            ;
          this.logger.LogInfo(Utils.a("苂꧄ꯆ\uE9C8뿊뿌껎뿐ꃒ룔뻖\uAAD8\uA8DA드냞迠郢엤蛦鯨軪췬跮铰髲鯴郶\uD9F8鋺鏼课搀焂眄爆礈缊栌欎ㄐ爒笔猖㤘稚渜氞吠丢䀤䌦न弪䈬\u0F2E夰刲䌴制ᤸ崺尼嘾ⵀ♂⅄", A_1));
          this.i = true;
          this.j.Set();
          this.g.Set();
          break;
        default:
          goto case 1;
      }
    }

    public bool Transmit(MessageBatch batch)
    {
      int A_1 = 1;
      int num1 = 0;
      switch (num1)
      {
        default:
          // ISSUE: variable of a compiler-generated type
          TransmitterThread.b b;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              // ISSUE: object of a compiler-generated type is created
              b = new TransmitterThread.b();
              // ISSUE: reference to a compiler-generated field
              b.c = this;
              num2 = 1;
              num1 = num2;
              goto default;
            default:
              MessagesTag messagesTag;
              bool flag;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    try
                    {
                      // ISSUE: reference to a compiler-generated field
                      b.b = messagesTag.ToString(this.c.Configuration.AttributeLimiter);
                    }
                    catch (OutOfMemoryException ex)
                    {
                      this.logger.LogWarning(Utils.a("\uE7B4횶ힸ鮺튼쪾뗀\uE3C2\uAAC4ꇆ\uE9C8ꛊ\uA8CCꋎ뻐ꇒ곔\uF7D6\uAAD8뻚꿜뛞胠迢賤鷦胨藪諬쿮鳰雲蛴蓶飸鳺飼\uDFFE挀戂焄搆愈⬊渌怎缐朒琔縖眘爚猜砞Ġ", A_1) + (object) batch.Messages.Count + Utils.a("閴\uDAB6\uDCB8좺캼\uDEBEꛀꛂ\uEDC4듆\uE0C8\uEACA\uEDCC軎ꗐ\uA7D2냔뫖꧘꿚드뇞蛠쏢釤裦짨飪鷬菮飰蟲헴闶飸迺黼韾℀戂欄挆⤈礊栌笎挐樒", A_1));
                      MessageBatch[] source = batch.Split();
                      if (((IEnumerable<MessageBatch>) source).Count<MessageBatch>() == 1)
                      {
                        this.logger.LogError(Utils.a("\uF7B4횶춸\uD8BA햼龾ꋀ곂ꯄ돆\uA8C8ꋊꏌ\uAACE뗐\uF3D2듔\uF7D6듘뻚껜곞胠蓢胤쟦鷨蓪苬쿮鷰鋲蟴郶鳸\uDBFA觼郾℀瀂怄甆怈樊愌明欐瘒㬔㜖崘椚爜漞儠䨢䬤䀦न䘪䠬尮䈰刲刴制", A_1));
                        flag = true;
                        goto label_35;
                      }
                      else
                      {
                        this.ProcessBatch(source[0]);
                        this.ProcessBatch(source[1]);
                        flag = true;
                        goto label_35;
                      }
                    }
                    this.g.WaitOne();
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    num2 = 3;
                    num1 = num2;
                    continue;
                  case 1:
                    if (this.i)
                    {
                      num2 = 2;
                      num1 = num2;
                      continue;
                    }
                    messagesTag = new MessagesTag(batch.Configuration, batch.AgentInfo, (IEnumerable<Message>) batch.Messages);
                    // ISSUE: reference to a compiler-generated field
                    b.a = this.ConstructHeaders(batch);
                    // ISSUE: reference to a compiler-generated field
                    b.b = (string) null;
                    num2 = 0;
                    num1 = num2;
                    continue;
                  case 2:
                    goto label_9;
                  case 3:
                    goto label_10;
                  default:
                    goto label_3;
                }
              }
label_9:
              return false;
label_10:
              try
              {
                // ISSUE: variable of a compiler-generated type
                TransmitterThread.c c;
                switch (0)
                {
                  case 0:
label_12:
                    // ISSUE: object of a compiler-generated type is created
                    c = new TransmitterThread.c();
                    // ISSUE: reference to a compiler-generated field
                    c.a = b;
                    num2 = 8;
                    num1 = num2;
                    goto default;
                  default:
                    while (true)
                    {
                      switch (num1)
                      {
                        case 0:
                          if (this.flowController.SupportOfflineStorage)
                          {
                            num2 = -2842;
                            int num3 = num2;
                            num2 = -2842;
                            int num4 = num2;
                            switch (num3 == num4 ? 1 : 0)
                            {
                              case 0:
                              case 2:
                                goto label_19;
                              default:
                                num2 = 0;
                                if (num2 == 0)
                                  ;
                                num2 = 11;
                                num1 = num2;
                                continue;
                            }
                          }
                          else
                            break;
                        case 1:
                          if (!this.i)
                          {
                            num2 = 7;
                            num1 = num2;
                            continue;
                          }
                          num2 = 5;
                          num1 = num2;
                          continue;
                        case 2:
                          num2 = 0;
                          num1 = num2;
                          continue;
                        case 3:
                        case 6:
                        case 9:
                          goto label_35;
                        case 4:
                          this.logger.LogInfo(Utils.a("ﲴ쒶視풺킼쾾귀ꛂ뇄ꋆ\uE9C8룊\uA4CC꣎뿐닒맔\uF7D6귘닚냜뫞藠쏢諤鋦鷨쯪髬蟮飰\u9FF2郴ퟶ軸髺铼课栀洂戄✆漈搊缌⼎攐愒琔礖樘瘚琜氞删䨢䨤䤦न弪䈬\u0F2E到尲場䜶唸帺䤼娾", A_1));
                          num2 = 10;
                          num1 = num2;
                          continue;
                        case 5:
                          this.logger.LogInfo(Utils.a("ﶴ횶햸쾺\uEEBC\uDABE꿀\uA7C2계꧆껈\uEBCA뻌ꛎ뛐뷒듔믖律\uA9DA룜볞蓠諢鏤苦跨쯪髬蟮飰\u9FF2郴ퟶ軸髺铼课栀洂戄✆漈搊缌⼎攐昒朔礖㤘漚爜㼞唠儢䐤䤦娨䘪䐬嬮ᄰ帲倴䐶䨸娺娼娾㉀浂敄ن╈㥊⡌\u2E4E㕐⩒畔㙖ⵘ⽚㡜\u325Eᅠᝢdͦ䥨Ὢɬ佮հŲᑴ\u1976\u0A78ᙺᑼ\u0B7E궀ꎂ\uE784\uF286ﶈꮊ\uEC8Cﲎ\uE290\uE692\uF894ﺖ\uF798ﲚ붜咽삠쪢즤튦\uDBA8캪莬", A_1));
                          flag = false;
                          num2 = 9;
                          num1 = num2;
                          continue;
                        case 7:
label_19:
                          if (!this.j.WaitOne(300000))
                          {
                            num2 = 4;
                            num1 = num2;
                            continue;
                          }
                          goto case 10;
                        case 8:
                          if (this.i)
                          {
                            num2 = 2;
                            num1 = num2;
                            continue;
                          }
                          break;
                        case 10:
                          // ISSUE: reference to a compiler-generated field
                          flag = c.b;
                          num2 = 3;
                          num1 = num2;
                          continue;
                        case 11:
                          this.logger.LogInfo(Utils.a("ﶴ횶햸쾺\uEEBC\uDABE꿀\uA7C2계꧆껈\uEBCA뻌ꛎ뛐뷒듔믖律\uA9DA룜볞蓠諢鏤苦跨쯪髬蟮飰\u9FF2郴ퟶ軸髺铼课栀洂戄✆漈搊缌⼎攐昒朔礖㤘漚爜㼞唠儢䐤䤦娨䘪䐬嬮ᄰ帲倴䐶䨸娺娼娾㉀浂敄\u0A46⡈㥊♌♎㽐㑒畔⍖ㅘ\u325A\u2E5C罞ᕠᅢѤ०ᩨ٪Ѭᱮɰᩲᩴ\u1976奸᩺\u0E7C彾\uE780\uE282\uEC84\uEB86\uEC88\uEF8Aꎌ", A_1));
                          flag = false;
                          num2 = 6;
                          num1 = num2;
                          continue;
                        default:
                          goto label_12;
                      }
                      this.j.Reset();
                      // ISSUE: reference to a compiler-generated field
                      c.b = false;
                      // ISSUE: reference to a compiler-generated method
                      this.e.ExecuteAsync<object>(new Func<object>(c.c));
                      num2 = 1;
                      num1 = num2;
                    }
                }
              }
              finally
              {
                this.g.Set();
              }
label_35:
              return flag;
          }
      }
    }

    public List<KeyValuePair<string, string>> ConstructHeaders(MessageBatch batch)
    {
      int A_1 = 9;
      int num1 = 21070;
      int num2 = num1;
      num1 = 21070;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (false)
            ;
          if (true)
            ;
          List<KeyValuePair<string, string>> A_0_1 = new List<KeyValuePair<string, string>>();
          A_0_1.a(Utils.a("\uE5BC銾鏀諂\uE8C4蓆胈迊", A_1), batch.Configuration.CompanyID.ToString().ToUpperInvariant());
          A_0_1.a(Utils.a("\uE5BC銾鏀諂\uE8C4蛆胈迊", A_1), batch.Configuration.ApplicationID.ToString().ToUpperInvariant());
          A_0_1.a(Utils.a("\uE5BC銾鏀諂\uE8C4胆胈迊", A_1), batch.Configuration.MessageGroup.ToString().ToUpperInvariant());
          A_0_1.a(Utils.a("\uE5BC銾鏀諂\uE8C4蛆駈苊", A_1), this.GetUserAgent(batch.AgentInfo));
          A_0_1.a(Utils.a("\uE5BC銾鏀諂\uE8C4蓆\uA8C8믊곌귎룐뿒볔ꏖ냘뻚껜", A_1), string.Join(Utils.a("醼龾", A_1), this.c.Configuration.a.OrderBy<string, string>((Func<string, string>) (A_0 =>
          {
            int num4 = 22891;
            int num5 = num4;
            num4 = 22891;
            int num6 = num4;
            switch (num5 == num6)
            {
              case true:
                int num7 = 1;
                if (num7 == 0)
                  ;
                num7 = 0;
                if (num7 == 0)
                  ;
                return A_0;
              default:
                goto case 1;
            }
          })).ToArray<string>()));
          return A_0_1;
        default:
          goto case 1;
      }
    }

    public string GetUserAgent(AgentInfo agentInfo)
    {
      int A_1 = 1;
      int num1 = -11899;
      int num2 = num1;
      num1 = -11899;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (true)
            ;
          if (false)
            ;
          return string.Format(Utils.a("캴螶쒸钺욼躾변룂\uF7C4뫆", A_1), new object[3]
          {
            (object) agentInfo.Name,
            (object) agentInfo.Version,
            string.IsNullOrEmpty(agentInfo.AdditionalInfo) ? (object) "" : (object) (Utils.a("閴", A_1) + agentInfo.AdditionalInfo)
          });
        default:
          goto case 1;
      }
    }

    public override MessageBatch GetMessageBatch()
    {
      int num1 = -26591;
      int num2 = num1;
      num1 = -26591;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          return new MessageBatch(this.b, this.c.Configuration.Copy(), this.d.DequeueMessages());
        default:
          goto case 1;
      }
    }

    private class a : IXMLTransmitter
    {
      public bool Post(IEnumerable<KeyValuePair<string, string>> headers, string data)
      {
        int num1 = -4289;
        int num2 = num1;
        num1 = -4289;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return false;
          default:
            goto case 1;
        }
      }
    }
  }
}
