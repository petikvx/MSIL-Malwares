// Decompiled with JetBrains decompiler
// Type: Tourield.Workers.RefWorker
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using DebuggerTypeProxyAttrib.Templates;
using System;
using System.Runtime.CompilerServices;
using Tourield.Attributes;

namespace Tourield.Workers
{
  public abstract class RefWorker
  {
    protected int m_ParamsWrapper;
    private byte _ListWrapper;
    private string setterWrapper;
    private string _StubWrapper;
    private ulong expressionWrapper;
    private ulong m_SchemaWrapper;
    private DateTime _ListenerWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public byte CalcWrapper() => this._ListWrapper;

    public string Title
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.setterWrapper;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string FillWrapper() => this._StubWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ulong ChangeWrapper() => this.expressionWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ulong MapWrapper() => this.m_SchemaWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public DateTime ReadWrapper() => this._ListenerWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal RefWorker(BroadcasterRulesTemplate param)
    {
      RegistryPagePage.ListMethod();
      // ISSUE: explicit constructor call
      this.\u002Ector((TestsWrapperAttribute) param, param.WriteWrapper());
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal RefWorker(TestsWrapperAttribute first, int max_vis)
    {
      int num1 = 6;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this._ListenerWrapper = first.RestartPrototype();
            num2 = 3;
            break;
          case 1:
          case 5:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num2 = 2;
            break;
          case 2:
            this.m_ParamsWrapper = max_vis;
            this._ListWrapper = first.EnablePrototype();
            this.setterWrapper = first.ChangePrototype();
            this._StubWrapper = first.ChangePrototype();
            this.expressionWrapper = first.ExcludePrototype();
            this.m_SchemaWrapper = first.ExcludePrototype();
            goto case 0;
          case 3:
          case 4:
            this.RestartAdapter(first);
            if (RefWorker.ValidateMethod())
            {
              num1 = 7;
              continue;
            }
            goto label_9;
          case 6:
            RegistryPagePage.ListMethod();
            num1 = 5;
            continue;
          case 7:
            goto label_10;
          default:
            num1 = 0;
            continue;
        }
        num1 = num2;
      }
label_10:
      return;
label_9:;
    }

    protected abstract void RestartAdapter(TestsWrapperAttribute v);

    internal static bool ValidateMethod() => true;

    internal static bool DefineMethod() => false;
  }
}
