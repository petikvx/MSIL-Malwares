// Decompiled with JetBrains decompiler
// Type: SpatialController.Ray3D
// Assembly: Rea, Version=1.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 014AEBFB-7EE8-4B39-A7D6-AE7A18313427
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-fb4fb24a50b7f600c65d2bbc049f44337673fa7b0e6e16b6967c06d0cfb666ad.exe

using System;
using System.Windows.Media.Media3D;

namespace SpatialController
{
  public class Ray3D
  {
    private const double MAX_CALIBRATION_DISTANCE = 300.0;
    private const double MAX_COMMAND_DISTANCE = 500.0;
    private Vector3D p0;
    private Vector3D p1;

    public Ray3D()
    {
      this.p0 = new Vector3D();
      this.p1 = new Vector3D();
    }

    public Ray3D(Vector3D point0, Vector3D point1)
    {
      this.p0 = point0;
      this.p1 = point1;
    }

    public Ray3D(double x0, double y0, double z0, double x1, double y1, double z1)
      : this(new Vector3D(x0, y0, z0), new Vector3D(x1, y1, z1))
    {
    }

    public Vector3D intersectionWith(Ray3D other)
    {
      Vector3D p0_1 = this.p0;
      Vector3D p1_1 = this.p1;
      Vector3D p0_2 = other.p0;
      Vector3D p1_2 = other.p1;
      Vector3D vector3D1 = p0_1 - p0_2;
      Vector3D vector3D2 = p1_2 - p0_2;
      if (vector3D2.LengthSquared < double.Epsilon)
        return new Vector3D();
      Vector3D vector3D3 = p1_1 - p0_1;
      if (vector3D3.LengthSquared < double.Epsilon)
        return new Vector3D();
      double num1 = vector3D1.X * vector3D2.X + vector3D1.Y * vector3D2.Y + vector3D1.Z * vector3D2.Z;
      double num2 = vector3D2.X * vector3D3.X + vector3D2.Y * vector3D3.Y + vector3D2.Z * vector3D3.Z;
      double num3 = vector3D1.X * vector3D3.X + vector3D1.Y * vector3D3.Y + vector3D1.Z * vector3D3.Z;
      double num4 = vector3D2.X * vector3D2.X + vector3D2.Y * vector3D2.Y + vector3D2.Z * vector3D2.Z;
      double num5 = (vector3D3.X * vector3D3.X + vector3D3.Y * vector3D3.Y + vector3D3.Z * vector3D3.Z) * num4 - num2 * num2;
      if (Math.Abs(num5) < double.Epsilon)
        return new Vector3D();
      double num6 = (num1 * num2 - num3 * num4) / num5;
      double num7 = (num1 + num2 * num6) / num4;
      Vector3D p0_3 = new Vector3D(p0_1.X + num6 * vector3D3.X, p0_1.Y + num6 * vector3D3.Y, p0_1.Z + num6 * vector3D3.Z);
      Vector3D p1_3 = new Vector3D(p0_2.X + num7 * vector3D2.X, p0_2.Y + num7 * vector3D2.Y, p0_2.Z + num7 * vector3D2.Z);
      return Ray3D.distance3D(p0_3, p1_3) > 300.0 ? new Vector3D() : (p0_3 + p1_3) / 2.0;
    }

    public bool closeTo(Vector3D otherPoint)
    {
      Vector3D p0 = this.p0;
      Vector3D p1_1 = this.p1;
      Vector3D vector3D1 = otherPoint;
      Vector3D vector3D2 = vector3D1 - p0;
      Vector3D vector3D3 = p1_1 - p0;
      double num1 = (vector3D2.X * vector3D3.X + vector3D2.Y * vector3D3.Y + vector3D2.Z + vector3D3.Z) / (vector3D3.X * vector3D3.X + vector3D3.Y * vector3D3.Y + vector3D3.Z + vector3D3.Z);
      Vector3D p1_2 = new Vector3D(p0.X + num1 * vector3D3.X, p0.Y + num1 * vector3D3.Y, p0.Z + num1 * vector3D3.Z);
      double num2 = Ray3D.distance3D(vector3D1, p1_2);
      Console.Write("Distance (ray to point) = " + num2.ToString());
      return num2 <= 500.0 && this.pointsToward(vector3D1);
    }

    private bool pointsToward(Vector3D p) => Ray3D.distance3D(p, this.p1) < Ray3D.distance3D(p, this.p0);

    private static double distance3D(Vector3D p0, Vector3D p1)
    {
      double num1 = p0.X - p1.X;
      double num2 = p0.Y - p1.Y;
      double num3 = p0.Z - p1.Z;
      return Math.Sqrt(num1 * num1 + num2 * num2 + num3 * num3);
    }

    public int[] point0() => new int[3]
    {
      (int) this.p0.X,
      (int) this.p0.Y,
      (int) this.p0.Z
    };

    public int[] point1() => new int[3]
    {
      (int) this.p1.X,
      (int) this.p1.Y,
      (int) this.p1.Z
    };

    public override string ToString() => "FROM (" + this.p0.X.ToString() + "," + this.p0.Y.ToString() + "," + this.p0.Z.ToString() + ") TO (" + this.p1.X.ToString() + "," + this.p1.Y.ToString() + "," + this.p1.Z.ToString() + ")";
  }
}
