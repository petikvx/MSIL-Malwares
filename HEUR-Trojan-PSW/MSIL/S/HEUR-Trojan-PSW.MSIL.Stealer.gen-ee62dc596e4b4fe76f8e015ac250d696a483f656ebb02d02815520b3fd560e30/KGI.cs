// Decompiled with JetBrains decompiler
// Type: wG.KGI
// Assembly: Type, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 716CE3A9-BAD1-470D-912F-B421D403F66E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee62dc596e4b4fe76f8e015ac250d696a483f656ebb02d02815520b3fd560e30.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace wG
{
  internal class KGI : pGN
  {
    private static KGI lH2;

    public void QCS(mI _param1)
    {
      bool flag1 = false;
      foreach (MW mw in (IEnumerable<MW>) _param1.Kek())
      {
        bool flag2 = false;
        if (!mw.d1q() || flag1)
          goto label_92;
        else
          goto label_155;
label_36:
        bool flag3 = _param1.PeH().ContainsKey(mw.T1V());
        int num1 = 8;
        if (KGI.KHg())
          goto label_8;
label_7:
        int num2;
        num1 = num2;
label_8:
        HashSet<long> longSet1;
        HashSet<string> stringSet;
        HashSet<long> longSet2;
        bool flag4;
        while (true)
        {
          Ph ph;
          IEnumerator<Jo> enumerator1;
          switch (num1)
          {
            case 1:
              break;
            case 2:
              stringSet = new HashSet<string>();
              flag4 = mw is yO;
              num1 = 10;
              continue;
            case 3:
              _param1.PeH().Add(mw.T1V(), mw);
              goto default;
            case 4:
              goto label_89;
            case 5:
              try
              {
                while (enumerator1.MoveNext())
                {
label_41:
                  Jo current = enumerator1.Current;
                  if (current.T1V() == "value")
                    RG2.u91(current.f19(), "'value' is a reserved name for use in expressions in consumable types.");
                  else if (!mw.R1z().ContainsKey(current.T1V()))
                  {
                    mw.R1z().Add(current.T1V(), current);
                  }
                  else
                  {
                    int num3 = 0;
                    if (!KGI.KHg())
                      goto label_45;
label_39:
                    switch (num3)
                    {
                      case 1:
                        goto label_41;
                      default:
                        RG2.u91(current.f19(), "Duplicate local variable name not allowed: '" + current.T1V() + "'");
                        continue;
                    }
label_45:
                    int num4;
                    num3 = num4;
                    goto label_39;
                  }
                }
              }
              finally
              {
                enumerator1?.Dispose();
              }
              if (mw is PK)
              {
                PK pk = mw as PK;
                foreach (G6 g6_1 in (IEnumerable<G6>) pk.eC3())
                {
label_54:
                  G6 g6_2 = g6_1;
                  if (g6_2.T1V() == "value")
                    RG2.u91(KGI.AHo((object) g6_2), "'value' is a reserved name for use in expressions in consumable types.");
                  else
                    goto label_61;
label_59:
                  continue;
label_61:
                  if (!pk.ACA().ContainsKey(g6_2.T1V()))
                  {
                    pk.ACA().Add((string) KGI.lH5((object) g6_2), g6_2);
                    int num5 = 1;
                    if (!KGI.KHg())
                      goto label_56;
label_53:
                    switch (num5)
                    {
                      case 1:
                        goto label_59;
                      default:
                        goto label_54;
                    }
label_56:
                    int num6;
                    num5 = num6;
                    goto label_53;
                  }
                  else
                  {
                    RG2.u91(g6_2.f19(), "Duplicate field name not allowed: '" + g6_2.T1V() + "'");
                    goto label_59;
                  }
                }
                IEnumerator<G6> enumerator2 = pk.eC3().GetEnumerator();
                try
                {
                  while (enumerator2.MoveNext())
                  {
                    G6 current = enumerator2.Current;
                    if (pk.R1z().ContainsKey(current.T1V()))
                      RG2.u91(KGI.AHo((object) current), (string) KGI.YHE((object) "Name clash with local variable: '", (object) current.T1V(), (object) "'"));
                  }
                }
                finally
                {
                  if (enumerator2 != null)
                    KGI.jH0((object) enumerator2);
                }
                if (KGI.xHf((object) pk) != null && (string) KGI.xHf((object) pk) != "GZip" && pk.mC2() != "Deflate")
                  RG2.u91(pk.bCM(), "Unknown compression method: '" + pk.mC2() + "'. Expected 'GZip' or 'Deflate'.");
              }
              if (mw is Ph)
              {
                ph = mw as Ph;
                ph.iCe(KGI.o9C(ph.BC0()));
                num1 = 7;
                continue;
              }
              break;
            case 6:
              HashSet<gGm> gGmSet = new HashSet<gGm>();
              using (IEnumerator<Hl> enumerator3 = ph.NfN().GetEnumerator())
              {
                while (enumerator3.MoveNext())
                {
                  Hl current1 = enumerator3.Current;
                  bool flag5 = current1.OyW() is vGj;
                  if (flag5)
                    goto label_131;
                  else
                    goto label_121;
label_94:
                  int num7;
                  int num8 = num7;
label_95:
                  gGm gGm1;
                  bool flag6;
                  while (true)
                  {
                    long num9;
                    bool flag7;
                    bool flag8;
                    bool flag9;
                    switch (num8)
                    {
                      case 1:
                        goto label_141;
                      case 2:
                        goto label_129;
                      case 3:
                        RG2.u91(gGm1.f19(), "Range is empty because of the inclusions brackets: '" + gGm1?.ToString() + "'");
                        goto label_117;
                      case 4:
                        Jt jt = new Jt();
                        jt.AyL(current1.MyJ());
                        ph.zfR().Add((string) KGI.OHj((object) current1), jt);
                        goto label_127;
                      case 5:
                        if (flag8)
                          goto case 3;
                        else
                          goto label_117;
                      case 6:
                        goto label_128;
                      case 7:
                        goto label_132;
                      case 8:
                        if (flag9)
                        {
                          RG2.d9u(gGm1.f19(), "Range is of length 1, why not use a single value instead?: '" + gGm1?.ToString() + "'");
                          num8 = 2;
                          continue;
                        }
                        goto label_129;
                      case 9:
                        eGy eGy = current1.OyW() as eGy;
                        foreach (int num10 in longSet2)
                        {
                          if (eGy.kjK() == (long) num10)
                            RG2.u91(current1.f19(), "Value already defined: '" + num10.ToString() + "'");
                        }
                        foreach (gGm gGm2 in gGmSet)
                          KGI.I9i(eGy.kjK(), gGm2, current1);
                        longSet2.Add(KGI.DHS((object) eGy));
                        break;
                      case 10:
                        if (flag6)
                        {
                          num8 = 4;
                          continue;
                        }
                        goto label_127;
                      case 11:
                        goto label_145;
                      default:
                        if (flag7)
                          goto label_122;
label_110:
                        flag8 = num9 == 0L;
                        num8 = 5;
                        continue;
label_122:
                        --num9;
                        goto label_110;
                    }
label_102:
                    if (current1.OyW() is gGm)
                    {
                      gGm1 = current1.OyW() as gGm;
                      if (KGI.gHL((object) gGm1) <= KGI.sHk((object) gGm1))
                        goto label_114;
label_96:
                      num9 = gGm1.Mjs() - gGm1.sjZ() + 1L;
                      if (gGm1.mjn() == (Ar) 1)
                        goto label_142;
label_103:
                      flag7 = gGm1.Gjh() == (Ar) 1;
                      if (KGI.KHg())
                      {
                        num8 = 0;
                        continue;
                      }
                      goto label_94;
label_142:
                      --num9;
                      goto label_103;
label_114:
                      RG2.u91(gGm1.f19(), "End-value must be larger than start-value in the range");
                      goto label_96;
                    }
                    else
                      break;
label_117:
                    flag9 = num9 == 1L;
                    if (KGI.KHg())
                    {
                      num8 = 8;
                      continue;
                    }
                    goto label_94;
label_127:
                    if (current1.OyW() is eGy)
                    {
                      if (KGI.KHg())
                        num8 = 9;
                      else
                        goto label_94;
                    }
                    else
                      goto label_102;
                  }
label_112:
                  continue;
label_128:
                  using (HashSet<gGm>.Enumerator enumerator4 = gGmSet.GetEnumerator())
                  {
                    while (enumerator4.MoveNext())
                    {
                      gGm current2 = enumerator4.Current;
                      KGI.y9L(gGm1, current2, current1);
                    }
                    goto label_132;
                  }
label_129:
                  using (HashSet<long>.Enumerator enumerator5 = longSet2.GetEnumerator())
                  {
                    while (enumerator5.MoveNext())
                      KGI.I9i((long) (int) enumerator5.Current, gGm1, current1);
                    goto label_128;
                  }
label_132:
                  gGmSet.Add(gGm1);
                  goto label_112;
label_145:
                  int num11 = 0;
                  goto label_146;
label_121:
                  if (KGI.uHw() == null)
                  {
                    num8 = 11;
                    goto label_95;
                  }
                  else
                    goto label_94;
label_131:
                  num11 = !flag2 ? 1 : 0;
                  goto label_146;
label_141:
                  flag6 = current1.MyJ() != null && !ph.zfR().ContainsKey(current1.MyJ());
                  num8 = 10;
                  if (KGI.KHg())
                    goto label_95;
                  else
                    goto label_94;
label_146:
                  if (num11 == 0)
                  {
                    if (flag5 && flag2)
                    {
                      RG2.u91(current1.f19(), "Only one 'else' event allowed");
                      if (KGI.KHg())
                      {
                        num8 = 1;
                        goto label_95;
                      }
                      else
                        goto label_94;
                    }
                    else
                      goto label_141;
                  }
                  else
                  {
                    flag2 = true;
                    goto label_141;
                  }
                }
                goto case 1;
              }
            case 7:
              goto label_66;
            case 8:
              if (flag3)
              {
                num1 = 9;
                continue;
              }
              goto case 3;
            case 9:
              RG2.u91(mw.f19(), "Duplicate datablock name not allowed: '" + mw.T1V() + "'");
              if (KGI.KHg())
              {
                num1 = 0;
                continue;
              }
              goto label_7;
            case 10:
              goto label_88;
            default:
              enumerator1 = mw.HCb().GetEnumerator();
              num1 = 5;
              continue;
          }
          longSet1 = new HashSet<long>();
          num1 = 2;
        }
label_66:
        longSet2 = new HashSet<long>();
        num2 = 6;
        goto label_7;
label_88:
        if (flag4)
        {
          yO yO = mw as yO;
          yO.iCe(KGI.o9C(yO.BC0()));
          foreach (B8 b8 in (IEnumerable<B8>) yO.BfJ())
          {
            if (longSet1.Contains(b8.Gyv()))
              RG2.u91(b8.f19(), "Bit may only be listed once: '" + b8.Gyv().ToString() + "'");
            else
              goto label_28;
label_25:
            if (KGI.IHx((object) b8) == null)
              goto label_30;
            else
              goto label_26;
label_13:
            long num12;
            int num13;
            while (true)
            {
              switch (num13)
              {
                case 1:
                  goto label_19;
                case 2:
                  RG2.u91(b8.f19(), (string) KGI.HHu((object) "Bit-index exceeds the boundary of the primitive type: '", (object) b8.Gyv().ToString(), (object) "' > ", (object) num12.ToString()));
                  num13 = !KGI.KHg() ? 0 : 1;
                  continue;
                case 3:
                  goto label_15;
                default:
                  goto label_24;
              }
            }
label_15:
            int num14 = stringSet.Contains(b8.Jy3()) ? 1 : 0;
            goto label_31;
label_19:
            continue;
label_24:
            num12 = (long) (KGI.o9C(yO.BC0()) * 8 - 1);
            if (KGI.IHy((object) b8) > num12)
            {
              num13 = 0;
              if (KGI.uHw() == null)
              {
                num13 = 2;
                goto label_13;
              }
              else
                goto label_13;
            }
            else
              goto label_19;
label_26:
            num13 = KGI.uHw() != null ? 3 : 3;
            goto label_13;
label_30:
            num14 = 0;
label_31:
            if (num14 == 0)
            {
              if (b8.Jy3() != null)
              {
                stringSet.Add(b8.Jy3());
                num13 = KGI.uHw() != null ? 0 : 0;
                goto label_13;
              }
              else
                goto label_24;
            }
            else
            {
              RG2.u91(KGI.vHq((object) b8), "Two identical bitnames found: '" + b8.Jy3() + "'");
              goto label_24;
            }
label_28:
            longSet1.Add(b8.Gyv());
            goto label_25;
          }
        }
        else
          goto label_90;
label_89:
label_90:
        continue;
label_92:
        if (mw.d1q() && flag1)
        {
          RG2.u91(mw.f19(), "Only one 'format' specifier is allowed per schema");
          goto label_36;
        }
        else
          goto label_36;
label_155:
        flag1 = true;
        _param1.Aej(mw);
        goto label_36;
      }
      bool flag10 = KGI.WHO((object) _param1) == null;
      int num15 = 0;
      if (KGI.uHw() != null)
        goto label_4;
label_1:
      switch (num15)
      {
        default:
          if (!flag10)
            return;
          KGI.tHv((object) "No 'format' block specified. Schema needs an entry point.");
          return;
      }
label_4:
      int num16;
      num15 = num16;
      goto label_1;
    }

    private static void I9i(long _param0, gGm _param1, Hl _param2)
    {
      int num1 = 1;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 1:
            if (_param0 >= KGI.sHk((object) _param1))
            {
              num1 = KGI.uHw() != null ? 0 : 0;
              continue;
            }
            num2 = 1;
            break;
          case 2:
            goto label_2;
          case 3:
            if (_param0 > KGI.sHk((object) _param1))
            {
              num1 = KGI.KHg() ? 2 : 2;
              continue;
            }
            goto label_15;
          case 4:
            goto label_9;
          default:
            num2 = _param0 > KGI.gHL((object) _param1) ? 1 : 0;
            break;
        }
        if (num2 == 0)
          num1 = 3;
        else
          goto label_8;
      }
label_9:
      return;
label_2:
      int num3 = _param0 < _param1.Mjs() ? 1 : 0;
      goto label_16;
label_8:
      return;
label_15:
      num3 = 0;
label_16:
      if (num3 != 0)
        goto label_17;
label_6:
      if ((_param1.mjn() != (Ar) 0 || _param0 != _param1.sjZ()) && (_param1.Gjh() != (Ar) 0 || _param0 != _param1.Mjs()))
        return;
      RG2.u91(_param2.f19(), "Value intersecting range is not allowed. Check the inclusion brackets: '" + _param1?.ToString() + "'");
      return;
label_17:
      RG2.u91(_param2.f19(), (string) KGI.YHE((object) "Value intersecting range is not allowed: '", (object) _param1?.ToString(), (object) "'"));
      goto label_6;
    }

    private static void y9L(gGm _param0, gGm _param1, Hl _param2)
    {
      if (_param0.sjZ() <= _param1.Mjs() && _param1.sjZ() <= _param0.Mjs())
        goto label_3;
      else
        goto label_6;
label_1:
      int num1;
      int num2;
      switch (num2)
      {
        case 1:
          return;
        case 2:
          num1 = KGI.SHp((object) _param0) == (Ar) 1 ? 1 : (_param1.mjn() == (Ar) 1 ? 1 : 0);
          goto label_12;
        case 3:
          goto label_13;
      }
label_2:
      if (_param1.Mjs() == _param0.sjZ() && (_param1.Gjh() == (Ar) 1 || _param0.mjn() == (Ar) 1))
        return;
      goto label_13;
label_3:
      if (_param0.Mjs() == _param1.sjZ())
      {
        num2 = 2;
        if (KGI.uHw() != null)
        {
          num2 = 1;
          goto label_1;
        }
        else
          goto label_1;
      }
      else
      {
        num1 = 0;
        goto label_12;
      }
label_6:
      int num3;
      num2 = KGI.KHg() ? 1 : num3;
      goto label_1;
label_12:
      if (num1 != 0)
        return;
      goto label_2;
label_13:
      RG2.u91(_param2.f19(), "Intersecting ranges not allowed: '" + _param0?.ToString() + "' and '" + _param1?.ToString() + "'");
    }

    public static int o9C(sC _param0)
    {
      int num1;
      int num2;
      switch (_param0.if6())
      {
        case tn.CallExpression:
label_12:
          RG2.u9I("Function type...");
          num2 = 4;
          if (KGI.uHw() == null)
          {
            num2 = 5;
            break;
          }
          break;
        case tn.Bool:
          num1 = 1;
          goto label_4;
        case tn.Ubyte:
          num1 = 1;
          goto label_4;
        case tn.Sbyte:
          num1 = 1;
          goto label_4;
        case tn.Ushort:
          num1 = 2;
          goto label_4;
        case tn.Short:
          num1 = 2;
          goto label_4;
        case tn.Uint:
          num1 = 4;
          goto label_4;
        case tn.Int:
label_5:
          num1 = 4;
          int num3;
          num2 = KGI.KHg() ? 3 : num3;
          break;
        case tn.Ulong:
label_2:
          num1 = 4;
          goto label_4;
        case tn.Long:
label_3:
          num1 = 4;
          goto label_4;
        default:
          num1 = 1;
          goto label_4;
      }
      switch (num2)
      {
        case 1:
          goto label_5;
        case 2:
          goto label_2;
        case 3:
          break;
        case 4:
          goto label_12;
        case 5:
          num1 = 1;
          break;
        default:
          goto label_3;
      }
label_4:
      return num1;
    }

    public KGI()
    {
      XTG.fvQjdC();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static Xp AHo([In] object obj0) => ((G6) obj0).f19();

    internal static object lH5([In] object obj0) => (object) ((G6) obj0).T1V();

    internal static object YHE([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0 + (string) obj1 + (string) obj2);

    internal static void jH0([In] object obj0) => ((IDisposable) obj0).Dispose();

    internal static object xHf([In] object obj0) => (object) ((PK) obj0).mC2();

    internal static object OHj([In] object obj0) => (object) ((Hl) obj0).MyJ();

    internal static long DHS([In] object obj0) => ((eGy) obj0).kjK();

    internal static long gHL([In] object obj0) => ((gGm) obj0).Mjs();

    internal static long sHk([In] object obj0) => ((gGm) obj0).sjZ();

    internal static object IHx([In] object obj0) => (object) ((B8) obj0).Jy3();

    internal static Xp vHq([In] object obj0) => ((B8) obj0).f19();

    internal static long IHy([In] object obj0) => ((B8) obj0).Gyv();

    internal static object HHu([In] object obj0, [In] object obj1, [In] object obj2, [In] object obj3) => (object) ((string) obj0 + (string) obj1 + (string) obj2 + (string) obj3);

    internal static object WHO([In] object obj0) => (object) ((mI) obj0).uem();

    internal static void tHv([In] object obj0) => RG2.e9p((string) obj0);

    internal static bool KHg() => KGI.lH2 == null;

    internal static KGI uHw() => KGI.lH2;

    internal static Ar SHp([In] object obj0) => ((gGm) obj0).Gjh();
  }
}
