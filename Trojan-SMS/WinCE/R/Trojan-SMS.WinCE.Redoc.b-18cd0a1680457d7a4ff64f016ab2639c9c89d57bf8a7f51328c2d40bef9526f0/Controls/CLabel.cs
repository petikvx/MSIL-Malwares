// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CLabel
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CLabel : CControls
  {
    public CLabel(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedLabel control = (CEnhancedLabel) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      return this.CRunner.htSharedProperties.Contains((object) str) ? this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals) : new MethodReturn(place);
    }

    public MethodReturn addLabel(Place place, ref Locals locals)
    {
      Color black = Color.Black;
      ++place.WordI;
      Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string lower2 = runReturn1.vString.ToLower(CRunner.cul);
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble1 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble3 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble4 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn2.place;
      string vString = runReturn2.vString;
      Color color = Color.FromArgb(-2830136);
      ++place.WordI;
      CEnhancedLabel control = new CEnhancedLabel();
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) control, (CControls) this));
      control.name = lower2;
      control.Left = vDouble1;
      control.Top = vDouble2;
      control.Height = vDouble4;
      control.Width = vDouble3;
      control.Text = vString;
      control.BackColor = color;
      control.ForeColor = black;
      control.Visible = true;
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) control);
      return new MethodReturn(place);
    }

    private void AddEvents(CEnhancedLabel lbl)
    {
    }

    public override void AddRunTimeEvent(object sender, string name)
    {
    }

    public void ShortAdd(string s)
    {
      CEnhancedLabel control = new CEnhancedLabel();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      string Text;
      Color BackColor;
      Color ForeColor;
      bool myEnabled;
      bool myVisible;
      float FontSize;
      CBuildDesigner.LabelGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out Text, out BackColor, out ForeColor, out myEnabled, out myVisible, out FontSize);
      control.name = Name.ToLower(CRunner.cul);
      control.Left = Left;
      control.Top = Top;
      control.Width = Width;
      control.Height = Height;
      control.Text = Text;
      control.BackColor = BackColor;
      control.ForeColor = ForeColor;
      control.Enabled = myEnabled;
      control.Visible = myVisible;
      control.Font = new Font(control.Font.Name, FontSize, control.Font.Style);
      this.CRunner.htControls.Add((object) control.name, (object) new WrapControl((object) control, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) control);
    }
  }
}
