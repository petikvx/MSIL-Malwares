// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.WindowsNameTransform
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Core;
using System;
using System.IO;
using System.Text;

namespace ICSharpCode.SharpZipLib.Zip
{
  public class WindowsNameTransform : INameTransform
  {
    private const int \uE004 = 260;
    private string \uE003;
    private bool \uE002;
    private char \uE001 = '_';
    private static readonly char[] \uE000;

    public WindowsNameTransform(string baseDirectory)
    {
      switch (baseDirectory)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uF820\uF823\uF831\uF827\uF806\uF82B\uF830\uF827\uF821\uF836\uF82D\uF830\uF83B", 63554), \uE01B.\uE000("\uE0DC\uE0F1\uE0EA\uE0FD\uE0FB\uE0EC\uE0F7\uE0EA\uE0E1\uE0B8\uE0F6\uE0F9\uE0F5\uE0FD\uE0B8\uE0F1\uE0EB\uE0B8\uE0F1\uE0F6\uE0EE\uE0F9\uE0F4\uE0F1\uE0FC", 57496));
        default:
          this.BaseDirectory = baseDirectory;
          break;
      }
    }

    public WindowsNameTransform()
    {
    }

    public string BaseDirectory
    {
      get => this.\uE003;
      set
      {
        switch (value)
        {
          case null:
            throw new ArgumentNullException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
          default:
            this.\uE003 = Path.GetFullPath(value);
            break;
        }
      }
    }

    public bool TrimIncomingPaths
    {
      get => this.\uE002;
      set => this.\uE002 = value;
    }

    public string TransformDirectory(string name)
    {
      name = this.TransformFile(name);
      if (name.Length <= 0)
        throw new ZipException(\uE01B.\uE000("\uF1AE\uF18C\uF183\uF183\uF182\uF199\uF1CD\uF185\uF18C\uF19B\uF188\uF1CD\uF18C\uF183\uF1CD\uF188\uF180\uF19D\uF199\uF194\uF1CD\uF189\uF184\uF19F\uF188\uF18E\uF199\uF182\uF19F\uF194\uF1CD\uF183\uF18C\uF180\uF188", 61933));
      while (name.EndsWith(\uE01B.\uE000("\uE22F", 57971)))
        name = name.Remove(name.Length - 1, 1);
      return name;
    }

    public string TransformFile(string name)
    {
      switch (name)
      {
        case null:
          name = string.Empty;
          break;
        default:
          name = WindowsNameTransform.MakeValidName(name, this.\uE001);
          if (this.\uE002)
            name = Path.GetFileName(name);
          if (this.\uE003 != null)
          {
            name = Path.Combine(this.\uE003, name);
            break;
          }
          break;
      }
      return name;
    }

    public static bool IsValidName(string name)
    {
      int num;
      switch (name)
      {
        case null:
          num = 0;
          break;
        default:
          if (name.Length <= 260)
          {
            num = string.Compare(name, WindowsNameTransform.MakeValidName(name, '_')) == 0 ? 1 : 0;
            break;
          }
          goto case null;
      }
      return num != 0;
    }

    static WindowsNameTransform()
    {
      char[] invalidPathChars = Path.GetInvalidPathChars();
      int length = invalidPathChars.Length + 3;
      WindowsNameTransform.\uE000 = new char[length];
      Array.Copy((Array) invalidPathChars, 0, (Array) WindowsNameTransform.\uE000, 0, invalidPathChars.Length);
      WindowsNameTransform.\uE000[length - 1] = '*';
      WindowsNameTransform.\uE000[length - 2] = '?';
      WindowsNameTransform.\uE000[length - 2] = ':';
    }

    public static string MakeValidName(string name, char replacement)
    {
      switch (name)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uF1C2\uF1CD\uF1C1\uF1C9", 61868));
        default:
          name = WindowsPathUtils.DropPathRoot(name.Replace(\uE01B.\uE000("\uEDB0", 60831), \uE01B.\uE000("\uE22F", 57971)));
          while (name.Length > 0 && name[0] == '\\')
            name = name.Remove(0, 1);
          while (name.Length > 0 && name[name.Length - 1] == '\\')
            name = name.Remove(name.Length - 1, 1);
          for (int startIndex = name.IndexOf(\uE01B.\uE000("\uE957\uE957", 59659)); startIndex >= 0; startIndex = name.IndexOf(\uE01B.\uE000("\uE957\uE957", 59659)))
            name = name.Remove(startIndex, 1);
          int index = name.IndexOfAny(WindowsNameTransform.\uE000);
          if (index >= 0)
          {
            StringBuilder stringBuilder = new StringBuilder(name);
            for (; index >= 0; index = index < name.Length ? name.IndexOfAny(WindowsNameTransform.\uE000, index + 1) : -1)
              stringBuilder[index] = replacement;
            name = stringBuilder.ToString();
          }
          return name.Length <= 260 ? name : throw new PathTooLongException();
      }
    }

    public char Replacement
    {
      get => this.\uE001;
      set
      {
        for (int index = 0; index < WindowsNameTransform.\uE000.Length; ++index)
        {
          if ((int) WindowsNameTransform.\uE000[index] == (int) value)
            throw new ArgumentException(\uE01B.\uE000("\uED42\uED45\uED5D\uED4A\uED47\uED42\uED4F\uED0B\uED5B\uED4A\uED5F\uED43\uED0B\uED48\uED43\uED4A\uED59\uED4A\uED48\uED5F\uED4E\uED59", 60715));
        }
        this.\uE001 = value != '\\' && value != '/' ? value : throw new ArgumentException(\uE01B.\uE000("\uEF23\uEF24\uEF3C\uEF2B\uEF26\uEF23\uEF2E\uEF6A\uEF38\uEF2F\uEF3A\uEF26\uEF2B\uEF29\uEF2F\uEF27\uEF2F\uEF24\uEF3E\uEF6A\uEF29\uEF22\uEF2B\uEF38\uEF2B\uEF29\uEF3E\uEF2F\uEF38", 61258));
      }
    }
  }
}
