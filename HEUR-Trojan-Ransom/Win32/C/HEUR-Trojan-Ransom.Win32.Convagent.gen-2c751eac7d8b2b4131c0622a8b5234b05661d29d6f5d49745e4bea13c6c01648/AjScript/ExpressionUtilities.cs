// Decompiled with JetBrains decompiler
// Type: AjScript.ExpressionUtilities
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using AjScript.Expressions;
using AjScript.Language;
using System;
using System.Collections;

namespace AjScript
{
  public static class ExpressionUtilities
  {
    public static void SetValue(IExpression expression, object value, IContext context)
    {
      switch (expression)
      {
        case VariableExpression _:
          ExpressionUtilities.SetValue((VariableExpression) expression, value, context);
          break;
        case DotExpression _:
          ExpressionUtilities.SetValue((DotExpression) expression, value, context);
          break;
        default:
          throw new InvalidOperationException("Invalid left value");
      }
    }

    public static object ResolveToObject(IExpression expression, IContext context)
    {
      switch (expression)
      {
        case VariableExpression _:
          return ExpressionUtilities.ResolveToObject((VariableExpression) expression, context);
        case DotExpression _:
          return ExpressionUtilities.ResolveToObject((DotExpression) expression, context);
        default:
          return expression.Evaluate(context);
      }
    }

    public static object ResolveToList(IExpression expression, IContext context)
    {
      switch (expression)
      {
        case VariableExpression _:
          return ExpressionUtilities.ResolveToList((VariableExpression) expression, context);
        case DotExpression _:
          return (object) ExpressionUtilities.ResolveToList((DotExpression) expression, context);
        default:
          return expression.Evaluate(context);
      }
    }

    public static IDictionary ResolveToDictionary(
      IExpression expression,
      IContext context)
    {
      switch (expression)
      {
        case VariableExpression _:
          return ExpressionUtilities.ResolveToDictionary((VariableExpression) expression, context);
        case DotExpression _:
          return ExpressionUtilities.ResolveToDictionary((DotExpression) expression, context);
        default:
          return (IDictionary) expression.Evaluate(context);
      }
    }

    private static void SetValue(VariableExpression expression, object value, IContext context) => context.SetValue(expression.Name, value);

    private static void SetValue(DotExpression expression, object value, IContext context)
    {
      if (expression.Arguments != null)
        throw new InvalidOperationException("Invalid left value");
      ObjectUtilities.SetValue(ExpressionUtilities.ResolveToObject(expression.Expression, context), expression.Name, value);
    }

    private static object ResolveToObject(VariableExpression expression, IContext context)
    {
      string name = expression.Name;
      object obj = context.GetValue(name);
      if (obj == null || obj == Undefined.Instance)
      {
        obj = (object) new DynamicObject();
        context.SetValue(name, obj);
      }
      return obj;
    }

    private static object ResolveToObject(DotExpression expression, IContext context)
    {
      object obj1 = ExpressionUtilities.ResolveToObject(expression.Expression, context);
      if (!(obj1 is DynamicObject))
        return ObjectUtilities.GetValue(obj1, expression.Name);
      DynamicObject dynamicObject = (DynamicObject) obj1;
      object obj2 = dynamicObject.GetValue(expression.Name);
      if (obj2 == null || obj2 == Undefined.Instance)
      {
        obj2 = (object) new DynamicObject();
        dynamicObject.SetValue(expression.Name, obj2);
      }
      return obj2;
    }

    private static object ResolveToList(VariableExpression expression, IContext context)
    {
      string name = expression.Name;
      object list = context.GetValue(name);
      if (list == null || list == Undefined.Instance)
      {
        list = (object) new ArrayList();
        context.SetValue(name, list);
      }
      return list;
    }

    private static IList ResolveToList(DotExpression expression, IContext context)
    {
      object obj = ExpressionUtilities.ResolveToObject(expression.Expression, context);
      if (!(obj is DynamicObject))
        return (IList) ObjectUtilities.GetValue(obj, expression.Name);
      DynamicObject dynamicObject = (DynamicObject) obj;
      object list = dynamicObject.GetValue(expression.Name);
      if (list == null || list == Undefined.Instance)
      {
        list = (object) new ArrayList();
        dynamicObject.SetValue(expression.Name, list);
      }
      return (IList) list;
    }

    private static IDictionary ResolveToDictionary(
      VariableExpression expression,
      IContext context)
    {
      string name = expression.Name;
      object dictionary = context.GetValue(name);
      if (dictionary == null || dictionary == Undefined.Instance)
      {
        dictionary = (object) new Hashtable();
        context.SetValue(name, dictionary);
      }
      return (IDictionary) dictionary;
    }

    private static IDictionary ResolveToDictionary(
      DotExpression expression,
      IContext context)
    {
      object obj = ExpressionUtilities.ResolveToObject(expression.Expression, context);
      if (!(obj is DynamicObject))
        return (IDictionary) ObjectUtilities.GetValue(obj, expression.Name);
      DynamicObject dynamicObject = (DynamicObject) obj;
      object dictionary = dynamicObject.GetValue(expression.Name);
      if (dictionary == null || dictionary == Undefined.Instance)
      {
        dictionary = (object) new Hashtable();
        dynamicObject.SetValue(expression.Name, dictionary);
      }
      return (IDictionary) dictionary;
    }
  }
}
