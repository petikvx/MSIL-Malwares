// Decompiled with JetBrains decompiler
// Type: 014704444930.428504663926
// Assembly: 052709057542, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 359C9CB9-9F6B-407E-806A-B212EE061A4B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-863aa9d936ae1e503405345248a0f92c12efaa795df31afd30568cac9e6c7a0e.exe

using \u003014704444930;
using \u003345716802872;
using \u003402059658500;
using \u003906611120407;
using \u003972828631872;
using EnvDTE;
using Microsoft.AspNet.Scaffolding;
using Microsoft.AspNet.Scaffolding.Telemetry;
using Microsoft.WebTools.Shared.VS.Helpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.IO;

namespace \u003014704444930
{
  internal class \u003428504663926 : IDbContextEditorService
  {
    private const string \u003007653544475 = "System.Data.Entity.DbContext";
    private const string \u003690313076331 = "System.Data.Entity.DbSet`1";
    private readonly IServiceProvider \u003256841806584;
    private string[] \u003448124323617;

    public \u003428504663926(IServiceProvider serviceProvider) => this.\u003256841806584 = serviceProvider != null ? serviceProvider : throw new ArgumentNullException(nameof (serviceProvider));

    private IReflectedTypesService \u003902117891936 => IServiceProviderExtensions.GetService<IReflectedTypesService>(this.\u003256841806584);

    internal IEnumerable<string> \u003533938435268
    {
      get
      {
        if (this.\u003448124323617 == null)
          this.\u003448124323617 = new string[1]
          {
            Path.Combine(IServiceProviderExtensions.GetService<IVisualStudioInformation>(this.\u003256841806584).ScaffoldingInstallDirectory, "Templates", "EntityFrameworkDBContextCodeGenerator")
          };
        return (IEnumerable<string>) this.\u003448124323617;
      }
    }

    public string \u003465213833153(CodeGenerationContext _param1, string _param2)
    {
      if (_param1 == null)
        throw new ArgumentNullException("context");
      if (string.IsNullOrEmpty(_param2))
        \u003830580932209.\u003582701895366("contextTypeFullName");
      string defaultNamespace = ProjectExtensions.GetDefaultNamespace(_param1.ActiveProject);
      string str;
      this.\u003244403695953(_param1.ActiveProject, _param2, defaultNamespace, out string _, out str);
      return \u003428504663926.\u003379538985157(str, _param1);
    }

    public CodeType \u003760164079270(
      CodeGenerationContext _param1,
      string _param2,
      string _param3)
    {
      if (_param1 == null)
        throw new ArgumentNullException("context");
      if (string.IsNullOrEmpty(_param2))
        \u003830580932209.\u003582701895366("contextTypeFullName");
      if (string.IsNullOrEmpty(_param3))
        \u003830580932209.\u003582701895366("connectionStringName");
      string defaultNamespace = ProjectExtensions.GetDefaultNamespace(_param1.ActiveProject);
      string str1 = _param2.StartsWith(defaultNamespace + ".", StringComparison.OrdinalIgnoreCase) ? _param2.Substring(defaultNamespace.Length + 1).Replace('.', Path.DirectorySeparatorChar) : _param2.Replace('.', Path.DirectorySeparatorChar);
      string str2;
      string str3;
      this.\u003244403695953(_param1.ActiveProject, _param2, defaultNamespace, out str2, out str3);
      string textTemplatePath = IServiceProviderExtensions.GetService<ICodeGeneratorFilesLocator>(_param1.ServiceProvider).GetTextTemplatePath("DbContext", this.\u003533938435268, ProjectExtensions.GetCodeLanguage(_param1.ActiveProject).CodeFileExtension);
      this.\u003960287326506(textTemplatePath, this.\u003533938435268);
      IServiceProviderExtensions.GetService<ICodeGeneratorActionsService>(_param1.ServiceProvider).AddFileFromTemplate(_param1.ActiveProject, str1, textTemplatePath, (IDictionary<string, object>) new Dictionary<string, object>()
      {
        {
          "DbContextNamespace",
          (object) str2
        },
        {
          "DbContextType",
          (object) str3
        },
        {
          "ConnectionStringName",
          (object) _param3
        }
      }, true);
      CodeType codeType = IServiceProviderExtensions.GetService<ICodeTypeService>(_param1.ServiceProvider).GetCodeType(_param1.ActiveProject, _param2);
      if (codeType == null)
        throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003887654838092.\u003563599828216, (object) _param2));
      CodeGenerationContextExtensions.AddTelemetryData(_param1, "MSInternal_EntityFrameworkInfo", "DbContextCreated", (object) true);
      return codeType;
    }

    public void \u003575040495899(
      CodeGenerationContext _param1,
      CodeType _param2,
      CodeType _param3,
      string _param4)
    {
      if (_param1 == null)
        throw new ArgumentNullException("context");
      if (_param2 == null)
        throw new ArgumentNullException("dbContextCodeType");
      if (_param3 == null)
        throw new ArgumentNullException("entityCodeType");
      if (string.IsNullOrEmpty(_param4))
        \u003830580932209.\u003582701895366("entitySetName");
      Type type = this.\u003753178862082(_param1.ActiveProject, "System.Data.Entity.DbContext");
      if (type == (Type) null)
        throw new InvalidOperationException(\u003887654838092.\u003431310802493);
      if (this.\u003109488243593(_param3, _param2, _param1.ActiveProject))
        return;
      if (!CodeTypeExtensions.IsDerivedType(_param2, type))
        throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003887654838092.\u003092247206453, (object) _param2.FullName, (object) _param4));
      string str1 = _param3.FullName;
      if (_param2.Language == "{B5E9BD33-6D3E-4B5D-925E-8A43B79820B4}")
        str1 = \u003428504663926.\u003889526463519(ProjectExtensions.GetDefaultNamespace(_param1.ActiveProject), str1);
      string textTemplatePath = IServiceProviderExtensions.GetService<ICodeGeneratorFilesLocator>(this.\u003256841806584).GetTextTemplatePath("DbContextEntityMember", this.\u003533938435268, ProjectExtensions.GetCodeLanguage(_param1.ActiveProject).CodeFileExtension);
      this.\u003960287326506(textTemplatePath, this.\u003533938435268);
      ICodeGeneratorActionsService service = IServiceProviderExtensions.GetService<ICodeGeneratorActionsService>(this.\u003256841806584);
      CodeType codeType = _param2;
      string str2 = textTemplatePath;
      Dictionary<string, object> dictionary = new Dictionary<string, object>();
      dictionary.Add("EntityTypeName", (object) str1);
      dictionary.Add("EntityTypeNamePluralized", (object) _param4);
      string str3 = _param4;
      service.AddClassMemberFromTemplate(codeType, str2, (IDictionary<string, object>) dictionary, str3);
      CodeGenerationContextExtensions.AddTelemetryData(_param1, "MSInternal_EntityFrameworkInfo", "DbContextEdited", (object) true);
    }

    private Type \u003753178862082(Project _param1, string _param2) => this.\u003902117891936.GetType(_param1, _param2);

    internal static string \u003889526463519(string _param0, string _param1)
    {
      _param0 = _param0 ?? string.Empty;
      if (string.IsNullOrEmpty(_param1))
        \u003830580932209.\u003582701895366("fullTypeName");
      if (_param1.StartsWith(_param0 + ".", StringComparison.OrdinalIgnoreCase))
        _param1 = _param1.Substring(_param0.Length + 1);
      return _param1;
    }

    private static string \u003379538985157(string _param0, CodeGenerationContext _param1)
    {
      Project activeProject = _param1.ActiveProject;
      string str1 = IServiceProviderExtensions.GetService<IVisualStudioInformation>(_param1.ServiceProvider).Version.Major < 14 ? "v11.0" : "MSSQLLocalDB";
      string str2 = DateTime.Now.ToString("yyyyMMddHHmmss", (IFormatProvider) CultureInfo.InvariantCulture);
      string empty = string.Empty;
      string connectionString = !\u003428504663926.\u003408325212087(activeProject) ? string.Format((IFormatProvider) CultureInfo.InvariantCulture, "Data Source=(localdb)\\{2}; Initial Catalog={0}-{1}; Integrated Security=True; MultipleActiveResultSets=True; AttachDbFilename=|DataDirectory|{0}-{1}.mdf", (object) _param0, (object) str2, (object) str1) : string.Format((IFormatProvider) CultureInfo.InvariantCulture, "Data Source=.\\SQLEXPRESS; Initial Catalog={0}-{1}; Integrated Security=True; MultipleActiveResultSets=True", (object) _param0, (object) str2);
      string webConfig = ProjectExtensions.GetWebConfig(activeProject);
      if (webConfig == null)
      {
        using (\u003757024331992 obj = new \u003757024331992())
        {
          File.WriteAllText(obj.\u003056430582453, "<configuration></configuration>");
          activeProject.ProjectItems.AddFromTemplate(obj.\u003056430582453, "Web.config");
          webConfig = ProjectExtensions.GetWebConfig(activeProject);
        }
      }
      if (((_DTE) activeProject.DTE).SourceControl.IsItemUnderSCC(webConfig) && !((_DTE) activeProject.DTE).SourceControl.IsItemCheckedOut(webConfig) && !((_DTE) activeProject.DTE).SourceControl.CheckOutItem(webConfig))
        throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003887654838092.\u003685987994156, (object) webConfig));
      System.Configuration.Configuration configuration = ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap()
      {
        ExeConfigFilename = webConfig
      }, ConfigurationUserLevel.None);
      string name = _param0;
      if (configuration.ConnectionStrings.ConnectionStrings[_param0] == null)
      {
        ConnectionStringSettings settings = new ConnectionStringSettings(name, connectionString, "System.Data.SqlClient");
        configuration.ConnectionStrings.ConnectionStrings.Add(settings);
        configuration.Save(ConfigurationSaveMode.Minimal);
      }
      return name;
    }

    private void \u003244403695953(
      Project _param1,
      string _param2,
      string _param3,
      out string _param4,
      out string _param5)
    {
      string str = _param2;
      if (ProjectExtensions.GetCodeLanguage(_param1) == ProjectLanguage.VisualBasic)
        str = \u003428504663926.\u003889526463519(_param3, str);
      \u003428504663926.\u003283044212149(str, out _param4, out _param5);
    }

    internal static void \u003283044212149(string _param0, out string _param1, out string _param2)
    {
      if (string.IsNullOrEmpty(_param0))
        \u003830580932209.\u003582701895366("fullTypeName");
      int length = _param0.LastIndexOf('.');
      if (length == -1)
      {
        _param1 = string.Empty;
        _param2 = _param0;
      }
      else
      {
        _param1 = _param0.Substring(0, length);
        _param2 = _param0.Substring(length + 1);
      }
    }

    private static bool \u003408325212087(Project _param0) => ProjectExtensions.GetPropertyValue<bool>(_param0, "WebApplication.UseIIS") && !ProjectExtensions.GetPropertyValue<bool>(_param0, "WebApplication.IsUsingIISExpress");

    private void \u003960287326506(string _param1, IEnumerable<string> _param2)
    {
      if (string.IsNullOrEmpty(_param1))
        throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003887654838092.\u003958046065995, (object) _param1, (object) string.Join(Environment.NewLine, _param2)));
    }

    internal bool \u003109488243593(CodeType _param1, CodeType _param2, Project _param3)
    {
      Type type1 = this.\u003753178862082(_param3, _param1.FullName);
      Type type2 = !(type1 == (Type) null) ? this.\u003753178862082(_param3, "System.Data.Entity.DbSet`1").MakeGenericType(type1) : throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003887654838092.\u003183851431401, (object) _param1.FullName));
      foreach (CodeElement publicMember in CodeTypeExtensions.GetPublicMembers(_param2))
      {
        if (publicMember.Kind == 4)
        {
          string forReflectionType = TypeUtil.GetLanguageSpecificTypeNameForReflectionType(type2, publicMember.Language);
          if (publicMember is CodeProperty codeProperty && (codeProperty.Type.AsFullName.Equals(forReflectionType, StringComparison.OrdinalIgnoreCase) || codeProperty.Type.CodeType != null && CodeTypeExtensions.IsDerivedType(codeProperty.Type.CodeType, type2)))
            return true;
        }
      }
      return false;
    }
  }
}
