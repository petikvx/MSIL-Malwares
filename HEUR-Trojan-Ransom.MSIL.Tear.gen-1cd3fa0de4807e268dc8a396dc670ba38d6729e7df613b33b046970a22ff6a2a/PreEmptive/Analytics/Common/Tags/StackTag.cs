// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.StackTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common.Tags
{
  public class StackTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 5;
        int num1 = -14110;
        int num2 = num1;
        num1 = -14110;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("쪸쾺\uDCBC\uDCBEꫀ", A_1);
          default:
            goto case 1;
        }
      }
    }

    public StackTag(
      [Optional] int sequence,
      [Optional] string type,
      [Optional] string method,
      [Optional] string signature,
      [Optional] string file,
      [Optional] string line)
    {
      int A_1 = 15;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.AddAttribute(Utils.a("냂ꃄ뛆", A_1), sequence.ToString());
      this.AddAttribute(Utils.a("럂별럆곈", A_1), string.IsNullOrEmpty(type) ? Utils.a("雂ꯄ곆\uA7C8\uA4CA뫌ꇎ", A_1) : type);
      this.AddAttribute(Utils.a("껂ꃄ돆ꇈ\uA4CA꧌", A_1), string.IsNullOrEmpty(method) ? Utils.a("雂ꯄ곆\uA7C8\uA4CA뫌ꇎ", A_1) : method);
      this.AddOptionalAttribute(Utils.a("냂계ꃆ\uA7C8\uAACA만뫎ꏐ뛒", A_1), signature);
      this.AddOptionalAttribute(Utils.a("ꗂ계ꯆ곈", A_1), file);
      this.AddOptionalAttribute(Utils.a("꿂계꧆곈", A_1), line);
    }
  }
}
