// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.W2d.Opcodes.SetUrlLink
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace dotXMLToolsWPF.W2d.Opcodes
{
  public class SetUrlLink : IOpcode
  {
    public static readonly string Id = "URL";
    public readonly long Index;
    public readonly SetUrlLink.UrlLink[] Links;

    public SetUrlLink() => this.Links = new SetUrlLink.UrlLink[0];

    public SetUrlLink(long index)
      : this()
    {
      this.Index = index;
    }

    public SetUrlLink(long index, IEnumerable<SetUrlLink.UrlLink> links)
    {
      this.Index = index;
      this.Links = links.ToArray<SetUrlLink.UrlLink>();
    }

    public override string ToString() => string.Format("(Index: {0} Elements: {1})", (object) this.Index, this.Links.Length != 0 ? (object) string.Join<SetUrlLink.UrlLink>(",", (IEnumerable<SetUrlLink.UrlLink>) this.Links) : (object) string.Empty).Trim();

    public CoordinatesType CoordinatesType => CoordinatesType.Undefined;

    public struct UrlLink : IOpcode
    {
      public readonly long Index;
      public readonly string Address;
      public readonly string Name;

      public UrlLink(long index, string address)
        : this()
      {
        this.Index = index;
        this.Address = address;
      }

      public UrlLink(long index, string address, string name)
        : this()
      {
        this.Index = index;
        this.Address = address;
        this.Name = name;
      }

      public override string ToString() => string.Format("({0})", (object) string.Format("{0} {1} {2}", (object) this.Index, (object) this.Address, (object) this.Name).Trim());

      public CoordinatesType CoordinatesType => CoordinatesType.Undefined;

      public class Factory : OpcodeFactory
      {
        public override IOpcode ReadOpcode(Stream stream)
        {
          OpcodeFactory.AdvanceThroughWhitespace(stream);
          long index = OpcodeFactory.ReadIntegerString(stream);
          OpcodeFactory.AdvanceThroughWhitespace(stream);
          string address = OpcodeFactory.ReadString(stream);
          if (OpcodeFactory.ExtendedAsciiHasEnded(stream))
            return (IOpcode) new SetUrlLink.UrlLink(index, address);
          OpcodeFactory.AdvanceThroughWhitespace(stream);
          string name = OpcodeFactory.ReadString(stream);
          OpcodeFactory.AdvanceThroughWhitespace(stream);
          OpcodeFactory.ExtendedAsciiHasEnded(stream);
          return (IOpcode) new SetUrlLink.UrlLink(index, address, name);
        }
      }
    }

    public class Factory : OpcodeFactory, IExtendedAsciiOpcodeFactory
    {
      public string OpcodeId => SetUrlLink.Id;

      public override IOpcode ReadOpcode(Stream stream)
      {
        OpcodeFactory.AdvanceThroughWhitespace(stream);
        if (OpcodeFactory.ExtendedAsciiHasEnded(stream))
          return (IOpcode) new SetUrlLink();
        OpcodeFactory.AdvanceThroughWhitespace(stream);
        long index = 0;
        bool flag = OpcodeFactory.ExtendedAsciiIsBeginning(stream);
        if (!flag)
          index = OpcodeFactory.ReadIntegerString(stream);
        OpcodeFactory.AdvanceThroughWhitespace(stream);
        if (!flag && !OpcodeFactory.ExtendedAsciiIsBeginning(stream))
          return (IOpcode) new SetUrlLink(index);
        OpcodeFactory.AdvanceThroughWhitespace(stream);
        SetUrlLink.UrlLink.Factory factory = new SetUrlLink.UrlLink.Factory();
        List<SetUrlLink.UrlLink> links = new List<SetUrlLink.UrlLink>();
        do
        {
          SetUrlLink.UrlLink urlLink = (SetUrlLink.UrlLink) factory.ReadOpcode(stream);
          links.Add(urlLink);
          OpcodeFactory.AdvanceThroughWhitespace(stream);
        }
        while (!OpcodeFactory.ExtendedAsciiHasEnded(stream));
        return (IOpcode) new SetUrlLink(index, (IEnumerable<SetUrlLink.UrlLink>) links);
      }
    }
  }
}
