// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CTable
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System;
using System.Collections;
using System.Data;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace Dbasic.Controls
{
  public class CTable : CControls
  {
    public CTable(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedTable control = (CEnhancedTable) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      DataTable dataTable = control.dataTable;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "addcol":
          RunReturn runReturn1 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn1.place;
          ++place.WordI;
          string typeName = (string) null;
          switch (runReturn1.vDouble)
          {
            case 1.0:
              typeName = "System.String";
              break;
            case 2.0:
              typeName = "System.Double";
              break;
          }
          RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn2.place;
          ++place.WordI;
          string vString1 = runReturn2.vString;
          DataGridTextBoxColumn gridTextBoxColumn = this.NewColumnStyle(vString1);
          RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          bool flag = false;
          ((DataGridColumnStyle) gridTextBoxColumn).Width = (int) runReturn3.vDouble;
          if (this.CRunner.nextWord(true, ref place).Value == ",")
          {
            RunReturn runReturn4 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn4.place;
            flag = !(runReturn4.vString == "false") && !(runReturn4.vString == "0");
            ++place.WordI;
          }
          control.TableStyles[0].GridColumnStyles.Add((DataGridColumnStyle) gridTextBoxColumn);
          dataTable.Columns.Add(vString1, System.Type.GetType(typeName));
          for (int index = 0; index < dataTable.Rows.Count; ++index)
            dataTable.Rows[index][vString1] = !(typeName == "System.Double") ? (object) "" : (object) 0;
          dataTable.Columns[vString1].AllowDBNull = false;
          dataTable.Columns[vString1].Unique = flag;
          return new MethodReturn(place);
        case "filter":
          RunReturn runReturn5 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn5.place;
          ++place.WordI;
          dataTable.DefaultView.RowFilter = runReturn5.vString;
          return new MethodReturn(place);
        case "tablesort":
          RunReturn runReturn6 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn6.place;
          ++place.WordI;
          dataTable.DefaultView.Sort = runReturn6.vString;
          return new MethodReturn(place);
        case "addrow":
          object[] objArray = new object[dataTable.Columns.Count];
          int index1 = 0;
          if (this.CRunner.GetWord(place.LineI, place.WordI + 1).Value != ")")
          {
            --place.WordI;
            for (; this.CRunner.nextWord(true, ref place).Value != ")" && index1 < dataTable.Columns.Count; ++index1)
            {
              if ((object) dataTable.Columns[index1].DataType == (object) System.Type.GetType("System.Double"))
              {
                RunReturn runReturn7 = this.CRunner.RunCode(place, false, true, ref locals);
                place = runReturn7.place;
                objArray[index1] = (object) runReturn7.vDouble;
              }
              else
              {
                RunReturn runReturn8 = this.CRunner.RunCode(place, true, true, ref locals);
                place = runReturn8.place;
                objArray[index1] = (object) runReturn8.vString;
              }
            }
          }
          else
            ++place.WordI;
          for (; index1 < dataTable.Columns.Count; ++index1)
            objArray[index1] = (object) dataTable.Columns[index1].DataType != (object) System.Type.GetType("System.Double") ? (object) "" : (object) 0.0;
          dataTable.Rows.Add(objArray);
          return new MethodReturn(place);
        case "removerow":
          RunReturn runReturn9 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn9.place;
          ++place.WordI;
          dataTable.DefaultView[(int) runReturn9.vDouble].Delete();
          dataTable.AcceptChanges();
          return new MethodReturn(place);
        case "removecol":
          dataTable.DefaultView.RowFilter = "";
          RunReturn runReturn10 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn10.place;
          ++place.WordI;
          int ordinal = dataTable.Columns[runReturn10.vString].Ordinal;
          dataTable.Columns.Remove(runReturn10.vString);
          control.TableStyles[0].GridColumnStyles.RemoveAt(ordinal);
          dataTable.AcceptChanges();
          return new MethodReturn(place);
        case "clear":
          dataTable.Clear();
          dataTable.AcceptChanges();
          return new MethodReturn(place);
        case "cell":
          if (assign)
          {
            RunReturn runReturn11 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn11.place;
            string vString2 = runReturn11.vString;
            ++place.WordI;
            RunReturn runReturn12 = this.CRunner.RunCode(place, false, true, ref locals);
            place = runReturn12.place;
            ++place.WordI;
            ++place.WordI;
            int vDouble = (int) runReturn12.vDouble;
            RunReturn runReturn13;
            if ((object) dataTable.Columns[vString2].DataType == (object) System.Type.GetType("System.Double"))
            {
              runReturn13 = this.CRunner.RunCode(place, false, true, ref locals);
              dataTable.DefaultView[vDouble][vString2] = (object) runReturn13.vDouble;
            }
            else
            {
              runReturn13 = this.CRunner.RunCode(place, true, true, ref locals);
              dataTable.DefaultView[vDouble][vString2] = (object) runReturn13.vString;
            }
            place = runReturn13.place;
            dataTable.AcceptChanges();
            return new MethodReturn(place);
          }
          ++place.WordI;
          RunReturn runReturn14 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn14.place;
          string vString3 = runReturn14.vString;
          ++place.WordI;
          RunReturn runReturn15 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn15.place;
          ++place.WordI;
          return (object) dataTable.Columns[vString3].DataType == (object) System.Type.GetType("System.Double") ? new MethodReturn(place, ((double) dataTable.DefaultView[(int) runReturn15.vDouble][vString3]).ToString((IFormatProvider) CRunner.cul), 0.0) : new MethodReturn(place, dataTable.DefaultView[(int) runReturn15.vDouble][vString3].ToString(), 0.0);
        case "selectedrow":
          Place place1 = place;
          DataGridCell currentCell1 = control.CurrentCell;
          string vString4 = ((DataGridCell) ref currentCell1).RowNumber.ToString((IFormatProvider) CRunner.cul);
          return new MethodReturn(place1, vString4, 0.0);
        case "selectedcol":
          Place place2 = place;
          GridColumnStylesCollection gridColumnStyles = control.TableStyles[0].GridColumnStyles;
          DataGridCell currentCell2 = control.CurrentCell;
          int columnNumber = ((DataGridCell) ref currentCell2).ColumnNumber;
          string mappingName = gridColumnStyles[columnNumber].MappingName;
          return new MethodReturn(place2, mappingName, 0.0);
        case "colname":
          ++place.WordI;
          RunReturn runReturn16 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn16.place;
          ++place.WordI;
          return new MethodReturn(place, control.TableStyles[0].GridColumnStyles[(int) runReturn16.vDouble].MappingName, 0.0);
        case "colnumber":
          ++place.WordI;
          RunReturn runReturn17 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn17.place;
          ++place.WordI;
          return new MethodReturn(place, dataTable.Columns[runReturn17.vString].Ordinal.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "colwidth":
          if (assign)
          {
            RunReturn runReturn18 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn18.place;
            ++place.WordI;
            ++place.WordI;
            string vString5 = runReturn18.vString;
            RunReturn runReturn19 = this.CRunner.RunCode(place, false, true, ref locals);
            place = runReturn19.place;
            control.TableStyles[0].GridColumnStyles[vString5].Width = (int) runReturn19.vDouble;
            return new MethodReturn(place);
          }
          ++place.WordI;
          RunReturn runReturn20 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn20.place;
          ++place.WordI;
          return new MethodReturn(place, control.TableStyles[0].GridColumnStyles[runReturn20.vString].Width.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "savexml":
          string sort = dataTable.DefaultView.Sort;
          string rowFilter = dataTable.DefaultView.RowFilter;
          DataSet dataSet1 = new DataSet("temp");
          dataSet1.Tables.Add(dataTable);
          RunReturn runReturn21 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn21.place;
          ++place.WordI;
          XmlTextWriter writer = new XmlTextWriter(Path.Combine(CRunner.b4pDir, runReturn21.vString), Encoding.UTF8);
          dataSet1.WriteXml((XmlWriter) writer, XmlWriteMode.WriteSchema);
          dataSet1.Tables.Clear();
          dataTable.DefaultView.Sort = sort;
          dataTable.DefaultView.RowFilter = rowFilter;
          writer.Close();
          control.DataSource = (object) dataTable.DefaultView;
          dataTable.AcceptChanges();
          return new MethodReturn(place);
        case "loadxml":
          RunReturn runReturn22 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn22.place;
          ++place.WordI;
          XmlTextReader reader = new XmlTextReader(Path.Combine(CRunner.b4pDir, runReturn22.vString));
          control.TableStyles[0].GridColumnStyles.Clear();
          DataSet dataSet2 = new DataSet("temp");
          int num = (int) dataSet2.ReadXml((XmlReader) reader, XmlReadMode.ReadSchema);
          foreach (DataColumn column in (InternalDataCollectionBase) dataSet2.Tables[0].Columns)
            control.TableStyles[0].GridColumnStyles.Add((DataGridColumnStyle) this.NewColumnStyle(column.ColumnName));
          control.DataSource = (object) dataSet2.Tables[0].DefaultView;
          DataTable table = dataSet2.Tables[0];
          control.dataTable = table;
          table.Locale = CRunner.cul;
          dataSet2.Tables.Clear();
          reader.Close();
          return new MethodReturn(place);
        case "savecsv":
          RunReturn runReturn23 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn23.place;
          ++place.WordI;
          string vString6 = runReturn23.vString;
          RunReturn runReturn24 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn24.place;
          ++place.WordI;
          char sep1 = runReturn24.vString[0];
          RunReturn runReturn25 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn25.place;
          ++place.WordI;
          bool includeHeader = !(runReturn25.vString == "false") && !(runReturn25.vString == "0");
          this.SaveCSV(vString6, sep1, includeHeader, dataTable);
          return new MethodReturn(place);
        case "loadcsv":
          RunReturn runReturn26 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn26.place;
          ++place.WordI;
          string vString7 = runReturn26.vString;
          RunReturn runReturn27 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn27.place;
          ++place.WordI;
          char sep2 = runReturn27.vString[0];
          RunReturn runReturn28 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn28.place;
          ++place.WordI;
          bool headerExist = !(runReturn28.vString == "false") && !(runReturn28.vString == "0");
          runReturn28 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn28.place;
          ++place.WordI;
          bool createColumns = !(runReturn28.vString == "false") && !(runReturn28.vString == "0");
          this.LoadCSV(vString7, sep2, headerExist, createColumns, dataTable, control, place);
          return new MethodReturn(place);
        case "colcount":
          return new MethodReturn(place, dataTable.Columns.Count.ToString(), 0.0);
        case "rowcount":
          return new MethodReturn(place, dataTable.DefaultView.Count.ToString(), 0.0);
        case "selectcell":
          RunReturn runReturn29 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn29.place;
          ++place.WordI;
          string vString8 = runReturn29.vString;
          RunReturn runReturn30 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn30.place;
          ++place.WordI;
          control.CurrentCell = new DataGridCell((int) runReturn30.vDouble, dataTable.Columns[vString8].Ordinal);
          return new MethodReturn(place);
        case "casesensitive":
          if (!assign)
            return new MethodReturn(place, dataTable.CaseSensitive.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn31 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn31.place;
          if (runReturn31.vString == "false" || runReturn31.vString == "0")
          {
            dataTable.CaseSensitive = false;
            return new MethodReturn(place);
          }
          if (runReturn31.vString == "true" || runReturn31.vString == "1")
          {
            dataTable.CaseSensitive = true;
            return new MethodReturn(place);
          }
          this.CRunner.ThrowError("Syntax error", place.LineI);
          break;
        case "color":
          if (!assign)
            return new MethodReturn(place, control.propColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          control.propColor = this.CRunner.GetColor(ref place, ref locals);
          return new MethodReturn(place);
        case "fontcolor":
          if (!assign)
            return new MethodReturn(place, ((Control) control).ForeColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          ((Control) control).ForeColor = this.CRunner.GetColor(ref place, ref locals);
          return new MethodReturn(place);
        case "headercolor":
          if (!assign)
            return new MethodReturn(place, control.HeaderBackColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          control.HeaderBackColor = this.CRunner.GetColor(ref place, ref locals);
          return new MethodReturn(place);
        case "linescolor":
          if (!assign)
            return new MethodReturn(place, control.GridLineColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          control.GridLineColor = this.CRunner.GetColor(ref place, ref locals);
          return new MethodReturn(place);
        case "headerfontcolor":
          if (!assign)
            return new MethodReturn(place, control.HeaderForeColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          control.HeaderForeColor = this.CRunner.GetColor(ref place, ref locals);
          return new MethodReturn(place);
        case "headervisible":
          if (!assign)
            return new MethodReturn(place, control.ColumnHeadersVisible.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn32 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn32.place;
          if (runReturn32.vString == "false" || runReturn32.vString == "0")
          {
            control.ColumnHeadersVisible = false;
            return new MethodReturn(place);
          }
          if (runReturn32.vString == "true" || runReturn32.vString == "1")
          {
            control.ColumnHeadersVisible = true;
            return new MethodReturn(place);
          }
          this.CRunner.ThrowError("Syntax error", place.LineI);
          break;
      }
      return this.CRunner.htSharedProperties.Contains((object) str) ? this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals) : new MethodReturn(place);
    }

    private void SaveCSV(string fileName, char sep, bool includeHeader, DataTable dt)
    {
      int count1 = dt.Rows.Count;
      int count2 = dt.Columns.Count;
      bool[] flagArray = new bool[count2];
      StringBuilder stringBuilder = new StringBuilder();
      char[] charArray = ("\"\r\n" + (object) sep).ToCharArray();
      using (StreamWriter streamWriter = new StreamWriter(Path.Combine(CRunner.b4pDir, fileName), false, Encoding.UTF8))
      {
        for (int index = 0; index < count2; ++index)
        {
          if (includeHeader)
            stringBuilder.Append(this.Word(dt.Columns[index].ColumnName, charArray, sep));
          flagArray[index] = (object) dt.Columns[index].DataType == (object) System.Type.GetType("System.Double");
        }
        if (includeHeader)
        {
          stringBuilder[stringBuilder.Length - 1] = '\r';
          stringBuilder.Append('\n');
        }
        foreach (DataRow row in (InternalDataCollectionBase) dt.Rows)
        {
          for (int columnIndex = 0; columnIndex < count2; ++columnIndex)
          {
            if (flagArray[columnIndex])
              stringBuilder.Append(this.Word(((double) row[columnIndex]).ToString((IFormatProvider) CRunner.cul), charArray, sep));
            else
              stringBuilder.Append(this.Word((string) row[columnIndex], charArray, sep));
          }
          stringBuilder[stringBuilder.Length - 1] = '\r';
          stringBuilder.Append('\n');
        }
        streamWriter.Write((object) stringBuilder);
      }
    }

    private string Word(string word, char[] problemChars, char sep)
    {
      if (word.IndexOfAny(problemChars) > -1)
      {
        word = "\"" + word + "\"";
        for (int startIndex = word.IndexOf('"', 1); startIndex > -1 && startIndex < word.Length - 1; startIndex = word.IndexOf("\"", startIndex + 2))
          word = word.Insert(startIndex, "\"");
      }
      return word + (object) sep;
    }

    private void LoadCSV(
      string fileName,
      char sep,
      bool headerExist,
      bool createColumns,
      DataTable dt,
      CEnhancedTable cmb,
      Place place)
    {
      try
      {
        using (StreamReader streamReader = new StreamReader(Path.Combine(CRunner.b4pDir, fileName), Encoding.UTF8))
        {
          cmb.DataSource = (object) null;
          StringBuilder stringBuilder = new StringBuilder();
          char[] buffer = new char[4096];
          int i;
          while ((i = streamReader.Read(buffer, 0, 4096)) > 0)
            stringBuilder.Append(buffer, 0, i);
          string data = stringBuilder[stringBuilder.Length - 1] == '\n' ? stringBuilder.ToString() : stringBuilder.ToString() + "\r\n";
          ArrayList arrayList = new ArrayList();
          while (i < data.Length)
          {
            if (data[i] == '"')
            {
              int num = data.IndexOf("\"", i + 1);
              while (num < data.Length && num > -1 && num != data.Length - 1 && data[num + 1] == '"')
                num = data.IndexOf("\"", num + 2);
              arrayList.Add((object) data.Substring(i + 1, num - i - 1));
              i = num + 2;
              if (data[num + 1] == '\r')
              {
                ++i;
                break;
              }
            }
            else
            {
              int num1 = data.IndexOf(sep, i);
              int num2 = data.IndexOf('\r', i);
              if (num2 < num1 || num1 == -1)
              {
                arrayList.Add((object) data.Substring(i, num2 - i));
                i = num2 + 2;
                break;
              }
              arrayList.Add((object) data.Substring(i, num1 - i));
              i = num1 + 1;
            }
          }
          bool[] flagArray = new bool[arrayList.Count];
          int count = arrayList.Count;
          object[] objArray = new object[count];
          if (createColumns)
          {
            dt.DefaultView.RowFilter = "";
            dt.DefaultView.Sort = "";
            dt.Columns.Clear();
            dt.Rows.Clear();
            cmb.TableStyles[0].GridColumnStyles.Clear();
            for (int index = 0; index < count; ++index)
            {
              if (!headerExist)
              {
                cmb.TableStyles[0].GridColumnStyles.Add((DataGridColumnStyle) this.NewColumnStyle("Column" + (index + 1).ToString()));
                dt.Columns.Add("Column" + (index + 1).ToString(), System.Type.GetType("System.String"));
              }
              else
              {
                cmb.TableStyles[0].GridColumnStyles.Add((DataGridColumnStyle) this.NewColumnStyle(arrayList[index].ToString()));
                dt.Columns.Add(arrayList[index].ToString(), System.Type.GetType("System.String"));
              }
            }
            if (!headerExist)
            {
              for (int index = 0; index < count; ++index)
                objArray[index] = (object) arrayList[index].ToString();
              dt.Rows.Add(objArray);
            }
          }
          else
          {
            if (dt.Columns.Count != arrayList.Count)
              this.CRunner.ThrowError("Columns number and type do not match data file.", place.LineI);
            for (int index = 0; index < count; ++index)
            {
              if ((object) dt.Columns[index].DataType == (object) System.Type.GetType("System.Double"))
              {
                flagArray[index] = true;
                if (!headerExist)
                  objArray[index] = (object) double.Parse(arrayList[index].ToString(), (IFormatProvider) CRunner.cul);
              }
              else
              {
                flagArray[index] = false;
                if (!headerExist)
                  objArray[index] = (object) arrayList[index].ToString();
              }
            }
            if (!headerExist)
              dt.Rows.Add(objArray);
          }
          while (i < data.Length - 1)
          {
            int index;
            for (index = 0; index < count - 1; ++index)
              objArray[index] = !flagArray[index] ? (object) this.ReadWord(ref data, ref i, sep) : (object) double.Parse(this.ReadWord(ref data, ref i, sep), (IFormatProvider) CRunner.cul);
            objArray[index] = !flagArray[index] ? (object) this.ReadWord(ref data, ref i, '\r') : (object) double.Parse(this.ReadWord(ref data, ref i, '\r'), (IFormatProvider) CRunner.cul);
            ++i;
            dt.Rows.Add(objArray);
          }
        }
      }
      finally
      {
        cmb.DataSource = (object) dt.DefaultView;
      }
    }

    private string ReadWord(ref string data, ref int i, char sep)
    {
      string str;
      if (data[i] == '"')
      {
        int num;
        for (num = data.IndexOf("\"", i + 1); num < data.Length && num > -1 && num != data.Length - 1 && data[num + 1] == '"'; num = data.IndexOf("\"", num + 1))
          data = data.Remove(num + 1, 1);
        str = data.Substring(i + 1, num - i - 1);
        i = num + 2;
      }
      else
      {
        int num = data.IndexOf(sep, i);
        str = data.Substring(i, num - i);
        i = num + 1;
      }
      return str;
    }

    private DataGridTextBoxColumn NewColumnStyle(string name)
    {
      DataGridTextBoxColumn gridTextBoxColumn = new DataGridTextBoxColumn();
      ((DataGridColumnStyle) gridTextBoxColumn).MappingName = name;
      ((DataGridColumnStyle) gridTextBoxColumn).HeaderText = name;
      return gridTextBoxColumn;
    }

    private void AddEvents(CEnhancedTable cmb)
    {
      if (!this.CRunner.htSubs.Contains((object) (cmb.name + "_selectionchanged")))
        return;
      cmb.CurrentCellChanged += new EventHandler(this.SelectionChanged);
    }

    private void SelectionChanged(object sender, EventArgs e)
    {
      CEnhancedTable cenhancedTable = (CEnhancedTable) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedTable.name + "_selectionchanged")];
      Hashtable localsReg = new Hashtable();
      localsReg.Add((object) nameof (sender), (object) cenhancedTable.name);
      Hashtable hashtable1 = localsReg;
      string key1 = ((Dbasic.Word) ((Line) this.CRunner.lines[htSub.LineI]).words[2]).Value;
      GridColumnStylesCollection gridColumnStyles = cenhancedTable.TableStyles[0].GridColumnStyles;
      DataGridCell currentCell1 = cenhancedTable.CurrentCell;
      int columnNumber = ((DataGridCell) ref currentCell1).ColumnNumber;
      string mappingName = gridColumnStyles[columnNumber].MappingName;
      hashtable1.Add((object) key1, (object) mappingName);
      Hashtable hashtable2 = localsReg;
      string key2 = ((Dbasic.Word) ((Line) this.CRunner.lines[htSub.LineI]).words[3]).Value;
      DataGridCell currentCell2 = cenhancedTable.CurrentCell;
      string str = ((DataGridCell) ref currentCell2).RowNumber.ToString((IFormatProvider) CRunner.cul);
      hashtable2.Add((object) key2, (object) str);
      this.CRunner.StartSub(htSub, localsReg);
    }

    public override void AddRunTimeEvent(object sender, string name)
    {
      CEnhancedTable cenhancedTable = (CEnhancedTable) sender;
      switch (name)
      {
        case "selectionchanged":
          cenhancedTable.CurrentCellChanged += new EventHandler(this.SelectionChanged);
          break;
      }
    }

    public void ShortAdd(string s)
    {
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      string Text;
      Color BackColor;
      Color ForeColor;
      bool myEnabled;
      bool myVisible;
      float FontSize;
      CBuildDesigner.TableGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out Text, out BackColor, out ForeColor, out myEnabled, out myVisible, out FontSize);
      string lower = Name.ToLower(CRunner.cul);
      CEnhancedTable cenhancedTable = new CEnhancedTable(lower);
      cenhancedTable.name = lower;
      ((Control) cenhancedTable).Left = Left;
      ((Control) cenhancedTable).Top = Top;
      ((Control) cenhancedTable).Width = Width;
      ((Control) cenhancedTable).Height = Height;
      ((Control) cenhancedTable).Text = Text;
      cenhancedTable.propColor = BackColor;
      ((Control) cenhancedTable).ForeColor = ForeColor;
      ((Control) cenhancedTable).Enabled = myEnabled;
      ((Control) cenhancedTable).Visible = myVisible;
      ((Control) cenhancedTable).Font = new Font(((Control) cenhancedTable).Font.Name, FontSize, ((Control) cenhancedTable).Font.Style);
      this.CRunner.htControls.Add((object) cenhancedTable.name, (object) new WrapControl((object) cenhancedTable, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedTable);
      this.AddEvents(cenhancedTable);
    }

    public MethodReturn addTable(Place place, ref Locals locals)
    {
      ++place.WordI;
      Dbasic.Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      RunReturn runReturn;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn.place;
      string lower2 = runReturn.vString.ToLower(CRunner.cul);
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble1 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble2 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble3 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble4 = (int) runReturn.vDouble;
      ++place.WordI;
      CEnhancedTable cenhancedTable = new CEnhancedTable(lower2);
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) cenhancedTable, (CControls) this));
      cenhancedTable.name = lower2;
      ((Control) cenhancedTable).Left = vDouble1;
      ((Control) cenhancedTable).Top = vDouble2;
      ((Control) cenhancedTable).Height = vDouble4;
      ((Control) cenhancedTable).Width = vDouble3;
      ((Control) cenhancedTable).Visible = true;
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) cenhancedTable);
      this.AddEvents(cenhancedTable);
      return new MethodReturn(place);
    }
  }
}
