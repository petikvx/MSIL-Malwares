// Decompiled with JetBrains decompiler
// Type: k5FS.Gy8k
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using Fm49;
using k8ZQ;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Windows.Forms.Automation;
using x7X;

namespace k5FS
{
  [DesignerGenerated]
  public class Gy8k : Form
  {
    private IContainer ႳႰ;
    [AccessedThroughProperty("Ⴀ")]
    private Label ႳႷ;
    [AccessedThroughProperty("Ⴍ")]
    private Label ႳႨ;
    [AccessedThroughProperty("Ⴅ")]
    private Label ႳႣ;
    [AccessedThroughProperty("Ⴐ")]
    private Label ႳႥ;
    [AccessedThroughProperty("Ⴄ")]
    private Label ႳႤ;
    [AccessedThroughProperty("Ⴓ")]
    private Label ႳႼ;
    [AccessedThroughProperty("Ⴜ")]
    private Label ႨႰ;
    [AccessedThroughProperty("ႷႠ")]
    private TextBox ႨႷ;
    [AccessedThroughProperty("ႷႷ")]
    private TextBox ႨႳ;
    [AccessedThroughProperty("ႷႭ")]
    private TextBox ႨႨ;
    [AccessedThroughProperty("ႷႥ")]
    private Button ႨႣ;
    [AccessedThroughProperty("ႷႤ")]
    private Label ႨႤ;
    [AccessedThroughProperty("ႷႼ")]
    private Button ႠႰ;
    [AccessedThroughProperty("ႭႠ")]
    private Label ႠႷ;
    public int ႠႳ;
    private Xn72.Ej9.Zo9 Ⴍ = new Xn72.Ej9.Zo9();

    public Gy8k()
    {
      this.Load += new EventHandler(this.y8WQ);
      this.Shown += new EventHandler(this.Tk2d);
      this.x4P2();
    }

    protected virtual void Qj9r([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.ႳႰ == null)
          return;
        this.ႳႰ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void x4P2()
    {
      this.ႳႰ = (IContainer) new System.ComponentModel.Container();
      this.Ⴀ = new Label();
      this.Ⴗ = new Label();
      this.Ⴍ = new Label();
      this.Ⴈ = new Label();
      this.Ⴃ = new Label();
      this.Ⴅ = new Label();
      this.Ⴐ = new Label();
      this.Ⴄ = new Label();
      this.Ⴓ = new Label();
      this.Ⴜ = new Label();
      this.ႷႠ = new TextBox();
      this.ႷႷ = new TextBox();
      this.ႷႭ = new TextBox();
      this.ႷႨ = new TextBox();
      this.ႷႣ = new Button();
      this.ႷႥ = new Button();
      this.ႷႰ = new Label();
      this.ႷႤ = new Label();
      this.ႷႳ = new ErrorProvider(this.ႳႰ);
      this.ႷႼ = new Button();
      this.ႭႠ = new Label();
      ((ISupportInitialize) this.ႷႳ).BeginInit();
      this.SuspendLayout();
      this.Ⴀ.AutoSize = true;
      this.Ⴀ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴀ.Location = new Point(212, 62);
      this.Ⴀ.Name = "Label1";
      this.Ⴀ.Size = new Size(96, 20);
      this.Ⴀ.TabIndex = 0;
      this.Ⴀ.Text = "Payroll ID :";
      this.Ⴗ.AutoSize = true;
      this.Ⴗ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴗ.Location = new Point(213, 105);
      this.Ⴗ.Name = "Label2";
      this.Ⴗ.Size = new Size(93, 20);
      this.Ⴗ.TabIndex = 1;
      this.Ⴗ.Text = "People ID:";
      this.Ⴍ.AutoSize = true;
      this.Ⴍ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴍ.Location = new Point(196, 148);
      this.Ⴍ.Name = "Label3";
      this.Ⴍ.Size = new Size(112, 20);
      this.Ⴍ.TabIndex = 2;
      this.Ⴍ.Text = "Attendance :";
      this.Ⴈ.AutoSize = true;
      this.Ⴈ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴈ.Location = new Point(216, 191);
      this.Ⴈ.Name = "Label4";
      this.Ⴈ.Size = new Size(89, 20);
      this.Ⴈ.TabIndex = 3;
      this.Ⴈ.Text = "Absence :";
      this.Ⴃ.AutoSize = true;
      this.Ⴃ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴃ.Location = new Point(197, 234);
      this.Ⴃ.Name = "Label5";
      this.Ⴃ.Size = new Size(113, 20);
      this.Ⴃ.TabIndex = 4;
      this.Ⴃ.Text = "Final Salary :";
      this.Ⴅ.AutoSize = true;
      this.Ⴅ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴅ.Location = new Point(163, 277);
      this.Ⴅ.Name = "Label6";
      this.Ⴅ.Size = new Size(149, 20);
      this.Ⴅ.TabIndex = 5;
      this.Ⴅ.Text = "Generated Date :";
      this.Ⴐ.AutoSize = true;
      this.Ⴐ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴐ.Location = new Point((int) sbyte.MaxValue, 320);
      this.Ⴐ.Name = "Label7";
      this.Ⴐ.Size = new Size(190, 20);
      this.Ⴐ.TabIndex = 6;
      this.Ⴐ.Text = "Mandatory Deduction :";
      this.Ⴄ.AutoSize = true;
      this.Ⴄ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴄ.Location = new Point(165, 363);
      this.Ⴄ.Name = "Label8";
      this.Ⴄ.Size = new Size(148, 20);
      this.Ⴄ.TabIndex = 7;
      this.Ⴄ.Text = "Extra Deduction :";
      this.Ⴓ.BorderStyle = BorderStyle.FixedSingle;
      this.Ⴓ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴓ.Location = new Point(373, 57);
      this.Ⴓ.Name = "lblPayrollID";
      this.Ⴓ.Size = new Size(245, 31);
      this.Ⴓ.TabIndex = 8;
      this.Ⴓ.TextAlign = ContentAlignment.MiddleLeft;
      this.Ⴜ.BorderStyle = BorderStyle.FixedSingle;
      this.Ⴜ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴜ.Location = new Point(373, 272);
      this.Ⴜ.Name = "lblGenerateDate";
      this.Ⴜ.Size = new Size(245, 31);
      this.Ⴜ.TabIndex = 9;
      this.Ⴜ.Text = "Label10";
      this.Ⴜ.TextAlign = ContentAlignment.MiddleLeft;
      this.ႷႠ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႠ.Location = new Point(373, 188);
      this.ႷႠ.Name = "txtAbsence";
      this.ႷႠ.Size = new Size(245, 26);
      this.ႷႠ.TabIndex = 0;
      this.ႷႷ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႷ.Location = new Point(373, 231);
      this.ႷႷ.Name = "txtFinalPay";
      this.ႷႷ.Size = new Size(245, 26);
      this.ႷႷ.TabIndex = 1;
      this.ႷႭ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႭ.Location = new Point(373, 317);
      this.ႷႭ.Name = "txtManDdt";
      this.ႷႭ.Size = new Size(245, 26);
      this.ႷႭ.TabIndex = 2;
      this.ႷႨ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႨ.Location = new Point(373, 360);
      this.ႷႨ.Name = "txtExtraDdt";
      this.ႷႨ.Size = new Size(245, 26);
      this.ႷႨ.TabIndex = 3;
      this.ႷႣ.AutoSize = true;
      this.ႷႣ.BackColor = Color.MediumSeaGreen;
      this.ႷႣ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႣ.ForeColor = SystemColors.ControlLightLight;
      this.ႷႣ.Location = new Point(310, 408);
      this.ႷႣ.Name = "btnUpdate";
      this.ႷႣ.Size = new Size(99, 45);
      this.ႷႣ.TabIndex = 4;
      this.ႷႣ.Text = "&Update";
      this.ႷႣ.UseVisualStyleBackColor = false;
      this.ႷႥ.AutoSize = true;
      this.ႷႥ.BackColor = Color.LightCoral;
      this.ႷႥ.CausesValidation = false;
      this.ႷႥ.DialogResult = DialogResult.Cancel;
      this.ႷႥ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႥ.ForeColor = SystemColors.ControlLightLight;
      this.ႷႥ.Location = new Point(520, 407);
      this.ႷႥ.Name = "btnCancel";
      this.ႷႥ.Size = new Size(99, 46);
      this.ႷႥ.TabIndex = 6;
      this.ႷႥ.Text = "&Cancel";
      this.ႷႥ.UseVisualStyleBackColor = false;
      this.ႷႰ.BorderStyle = BorderStyle.FixedSingle;
      this.ႷႰ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႰ.Location = new Point(373, 100);
      this.ႷႰ.Name = "lblPplID";
      this.ႷႰ.Size = new Size(245, 31);
      this.ႷႰ.TabIndex = 19;
      this.ႷႰ.TextAlign = ContentAlignment.MiddleLeft;
      this.ႷႤ.BorderStyle = BorderStyle.FixedSingle;
      this.ႷႤ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႤ.Location = new Point(373, 143);
      this.ႷႤ.Name = "lblAttendance";
      this.ႷႤ.Size = new Size(245, 31);
      this.ႷႤ.TabIndex = 20;
      this.ႷႤ.TextAlign = ContentAlignment.MiddleLeft;
      this.ႷႳ.BlinkStyle = ErrorBlinkStyle.NeverBlink;
      this.ႷႳ.ContainerControl = (ContainerControl) this;
      this.ႷႼ.AutoSize = true;
      this.ႷႼ.BackColor = Color.IndianRed;
      this.ႷႼ.CausesValidation = false;
      this.ႷႼ.DialogResult = DialogResult.Cancel;
      this.ႷႼ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႷႼ.ForeColor = SystemColors.ControlLightLight;
      this.ႷႼ.Location = new Point(415, 407);
      this.ႷႼ.Name = "btnDelete";
      this.ႷႼ.Size = new Size(99, 46);
      this.ႷႼ.TabIndex = 5;
      this.ႷႼ.Text = "&Delete";
      this.ႷႼ.UseVisualStyleBackColor = false;
      this.ႭႠ.AutoSize = true;
      this.ႭႠ.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႭႠ.Location = new Point(307, 9);
      this.ႭႠ.Name = "Label9";
      this.ႭႠ.Size = new Size(186, 29);
      this.ႭႠ.TabIndex = 22;
      this.ႭႠ.Text = "Netpay Update";
      this.AcceptButton = (IButtonControl) this.ႷႣ;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.AutoValidate = AutoValidate.EnableAllowFocusChange;
      this.BackColor = Color.LightSteelBlue;
      this.CancelButton = (IButtonControl) this.ႷႥ;
      this.ClientSize = new Size(801, 465);
      this.Controls.Add((Control) this.ႭႠ);
      this.Controls.Add((Control) this.ႷႼ);
      this.Controls.Add((Control) this.ႷႤ);
      this.Controls.Add((Control) this.ႷႰ);
      this.Controls.Add((Control) this.ႷႥ);
      this.Controls.Add((Control) this.ႷႣ);
      this.Controls.Add((Control) this.ႷႨ);
      this.Controls.Add((Control) this.ႷႭ);
      this.Controls.Add((Control) this.ႷႷ);
      this.Controls.Add((Control) this.ႷႠ);
      this.Controls.Add((Control) this.Ⴜ);
      this.Controls.Add((Control) this.Ⴓ);
      this.Controls.Add((Control) this.Ⴄ);
      this.Controls.Add((Control) this.Ⴐ);
      this.Controls.Add((Control) this.Ⴅ);
      this.Controls.Add((Control) this.Ⴃ);
      this.Controls.Add((Control) this.Ⴈ);
      this.Controls.Add((Control) this.Ⴍ);
      this.Controls.Add((Control) this.Ⴗ);
      this.Controls.Add((Control) this.Ⴀ);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Name = "ႰႤ";
      this.StartPosition = FormStartPosition.CenterScreen;
      ((ISupportInitialize) this.ႷႳ).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Ⴀ
    {
      get => this.ႳႷ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႷ = value;
    }

    internal virtual Label Ⴗ
    {
      get => this.Ⴍ.Ⴐ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴍ.Ⴐ = (object) value as Label;
    }

    internal virtual Label Ⴍ
    {
      get => this.ႳႨ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႨ = value;
    }

    internal virtual Label Ⴈ
    {
      get => this.Ⴍ.Ⴅ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴍ.Ⴅ = value;
    }

    internal virtual Label Ⴃ
    {
      get => this.Ⴍ.Ⴀ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴍ.Ⴀ = value;
    }

    internal virtual Label Ⴅ
    {
      get => this.ႳႣ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႣ = value;
    }

    internal virtual Label Ⴐ
    {
      get => this.ႳႥ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႥ = value;
    }

    internal virtual Label Ⴄ
    {
      get => this.ႳႤ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႤ = value;
    }

    internal virtual Label Ⴓ
    {
      get => this.ႳႼ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႼ = value;
    }

    internal virtual Label Ⴜ
    {
      get => this.ႨႰ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႨႰ = value;
    }

    internal virtual TextBox ႷႠ
    {
      get => this.ႨႷ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new CancelEventHandler(this.c5XH);
        object ⴈⴗ1 = (object) this.ႨႷ;
        if (ⴈⴗ1 is TextBox)
          (ⴈⴗ1 as TextBox).Validating -= obj as CancelEventHandler;
        this.ႨႷ = value;
        object ⴈⴗ2 = (object) this.ႨႷ;
        if ((TextBox) ⴈⴗ2 == null)
          return;
        ((Control) ⴈⴗ2).Validating += (CancelEventHandler) obj;
      }
    }

    internal virtual TextBox ႷႷ
    {
      get => this.ႨႳ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new CancelEventHandler(this.k9J2);
        TextBoxBase ⴈⴓ1 = (TextBoxBase) this.ႨႳ;
        if ((TextBox) ⴈⴓ1 != null)
          ⴈⴓ1.Validating -= obj as CancelEventHandler;
        this.ႨႳ = value;
        TextBoxBase ⴈⴓ2 = (TextBoxBase) this.ႨႳ;
        if ((TextBox) ⴈⴓ2 == null)
          return;
        ⴈⴓ2.Validating += obj as CancelEventHandler;
      }
    }

    internal virtual TextBox ႷႭ
    {
      get => this.ႨႨ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new CancelEventHandler(this.q5HR);
        object ⴈⴈ1 = (object) this.ႨႨ;
        if ((TextBox) ⴈⴈ1 != null)
          (ⴈⴈ1 as TextBox).Validating -= obj as CancelEventHandler;
        this.ႨႨ = value;
        object ⴈⴈ2 = (object) this.ႨႨ;
        if (!(ⴈⴈ2 is TextBox))
          return;
        (ⴈⴈ2 as TextBox).Validating += (CancelEventHandler) obj;
      }
    }

    internal virtual TextBox ႷႨ
    {
      get => this.Ⴍ.Ⴄ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new CancelEventHandler(this.f4Q1);
        object ⴄ1 = (object) this.Ⴍ.Ⴄ;
        if (ⴄ1 is TextBox)
          ((Control) ⴄ1).Validating -= obj as CancelEventHandler;
        this.Ⴍ.Ⴄ = (TextBoxBase) value as TextBox;
        object ⴄ2 = (object) this.Ⴍ.Ⴄ;
        if (!(ⴄ2 is TextBox))
          return;
        ((Control) ⴄ2).Validating += obj as CancelEventHandler;
      }
    }

    internal virtual Button ႷႣ
    {
      get => this.Ⴍ.Ⴈ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.Zj79);
        IButtonControl ⴈ1 = (IButtonControl) this.Ⴍ.Ⴈ;
        if (ⴈ1 is Button)
          (ⴈ1 as Button).Click -= (EventHandler) multicastDelegate;
        this.Ⴍ.Ⴈ = (object) value as Button;
        IButtonControl ⴈ2 = (IButtonControl) this.Ⴍ.Ⴈ;
        if (!(ⴈ2 is Button))
          return;
        ((Control) ⴈ2).Click += (EventHandler) multicastDelegate;
      }
    }

    internal virtual Button ႷႥ
    {
      get => this.ႨႣ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.Mr8m);
        IButtonControl ⴈⴃ1 = (IButtonControl) this.ႨႣ;
        if (ⴈⴃ1 is Button)
          (ⴈⴃ1 as Button).Click -= obj as EventHandler;
        this.ႨႣ = value;
        IButtonControl ⴈⴃ2 = (IButtonControl) this.ႨႣ;
        if ((Button) ⴈⴃ2 == null)
          return;
        ((Control) ⴈⴃ2).Click += (EventHandler) obj;
      }
    }

    internal virtual Label ႷႰ
    {
      get => this.Ⴍ.Ⴗ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴍ.Ⴗ = (IAutomationLiveRegion) value as Label;
    }

    internal virtual Label ႷႤ
    {
      get => this.ႨႤ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႨႤ = value;
    }

    internal virtual ErrorProvider ႷႳ
    {
      get => this.Ⴍ.Ⴃ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴍ.Ⴃ = value;
    }

    internal virtual Button ႷႼ
    {
      get => this.ႠႰ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.f0E9);
        ButtonBase ⴀⴐ1 = (ButtonBase) this.ႠႰ;
        if ((Button) ⴀⴐ1 != null)
          ⴀⴐ1.Click -= multicastDelegate as EventHandler;
        this.ႠႰ = value;
        ButtonBase ⴀⴐ2 = (ButtonBase) this.ႠႰ;
        if (!(ⴀⴐ2 is Button))
          return;
        (ⴀⴐ2 as Button).Click += multicastDelegate as EventHandler;
      }
    }

    internal virtual Label ႭႠ
    {
      get => this.ႠႷ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႠႷ = value;
    }

    private void y8WQ([In] object obj0, [In] EventArgs obj1)
    {
    }

    private void Zj79([In] object obj0, [In] EventArgs obj1)
    {
      if (!this.ValidateChildren())
        return;
      object obj2 = (object) new Tt1();
      Table<Xz10> ⴈ = (obj2 as Tt1).Ⴈ;
      Expression expression = (Expression) Expression.Parameter(typeof (Xz10), "o");
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Xz10, bool>> predicate = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.Equal((Expression) Expression.Property((Expression) (expression as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.q3S5))), (Expression) Expression.Field((Expression) Expression.Constant((object) this, typeof (Gy8k)), FieldInfo.GetFieldFromHandle(__fieldref (Gy8k.ႠႳ))), false, (MethodInfo) null), expression as ParameterExpression);
      object obj3 = (object) ⴈ.FirstOrDefault<Xz10>(predicate);
      if (!(obj3 is Xz10))
      {
        int num = (int) MessageBox.Show("Netpay not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        this.Close();
      }
      else
      {
        try
        {
          ((Xz10) obj3).Ⴅ = new int?(int.Parse(this.ႷႤ.Text));
          ((Xz10) obj3).Ⴐ = new int?(int.Parse(this.ႷႠ.Text));
          ((Xz10) obj3).Ⴅ = new Decimal?(Decimal.Parse(this.ႷႷ.Text));
          (obj3 as Xz10).Ⴗ = new Decimal?(Decimal.Parse(this.ႷႭ.Text));
          (obj3 as Xz10).Ⴐ = new Decimal?(Decimal.Parse(this.ႷႨ.Text));
          (obj2 as Tt1).SubmitChanges();
          int num = (int) MessageBox.Show("Payroll [" + Conversions.ToString(((Xz10) obj3).Ⴐ) + "] updated", "Done", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num = (int) MessageBox.Show("Fail :" + ((_Exception) ex as Exception).Message, "Done", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          ProjectData.ClearProjectError();
        }
      }
    }

    private void Mr8m([In] object obj0, [In] EventArgs obj1) => this.Close();

    private void Tk2d([In] object obj0, [In] EventArgs obj1)
    {
      Table<Xz10> ⴈ = new Tt1().Ⴈ;
      object obj2 = (object) Expression.Parameter(typeof (Xz10), "o");
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Xz10, bool>> predicate = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.Equal((Expression) Expression.Property((Expression) obj2, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.q3S5))), (Expression) Expression.Field((Expression) Expression.Constant((object) this, typeof (Gy8k)), FieldInfo.GetFieldFromHandle(__fieldref (Gy8k.ႠႳ))), false, (MethodInfo) null), obj2 as ParameterExpression);
      object obj3 = (object) ⴈ.FirstOrDefault<Xz10>(predicate);
      if ((Xz10) obj3 == null)
      {
        int num = (int) MessageBox.Show("Netpay not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        this.Close();
      }
      else
      {
        this.Ⴓ.Text = this.ႠႳ.ToString("0");
        this.ႷႰ.Text = (obj3 as Xz10).Ⴗ;
        this.ႷႤ.Text = Conversions.ToString((obj3 as Xz10).Ⴅ.Value);
        this.ႷႠ.Text = Conversions.ToString((obj3 as Xz10).Ⴐ.Value);
        this.ႷႷ.Text = Conversions.ToString(((Xz10) obj3).Ⴅ.Value);
        this.Ⴜ.Text = Conversions.ToString(((Xz10) obj3).Ⴓ.Value);
        this.ႷႭ.Text = Conversions.ToString(((Xz10) obj3).Ⴗ.Value);
        this.ႷႨ.Text = Conversions.ToString((obj3 as Xz10).Ⴐ.Value);
      }
    }

    private void c5XH([In] object obj0, [In] CancelEventArgs obj1)
    {
      object text = (object) this.ႷႠ.Text;
      if (string.IsNullOrEmpty((string) text))
      {
        this.ႷႳ.SetError((Control) this.ႷႠ, "Absence should not left blank");
        obj1.Cancel = true;
      }
      else if (!Versioned.IsNumeric((object) (string) text))
      {
        this.ႷႳ.SetError((Control) this.ႷႠ, "Absence should be made of numeric");
        obj1.Cancel = true;
      }
      else
        this.ႷႳ.SetError((Control) this.ႷႠ, (string) null);
    }

    private void k9J2([In] object obj0, [In] CancelEventArgs obj1)
    {
      IEnumerable<char> text = (IEnumerable<char>) this.ႷႷ.Text;
      if (string.IsNullOrEmpty((string) text))
      {
        this.ႷႳ.SetError((Control) this.ႷႷ, "Final Pay should not left blank");
        obj1.Cancel = true;
      }
      else if (!Versioned.IsNumeric((object) (string) text))
      {
        this.ႷႳ.SetError((Control) this.ႷႷ, "Final Pay should be made of numeric");
        obj1.Cancel = true;
      }
      else
        this.ႷႳ.SetError((Control) this.ႷႷ, (string) null);
    }

    private void f4Q1([In] object obj0, [In] CancelEventArgs obj1)
    {
      object text = (object) this.ႷႨ.Text;
      if (string.IsNullOrEmpty((string) text))
      {
        this.ႷႳ.SetError((Control) this.ႷႨ, "Extra deduction should not left blank");
        obj1.Cancel = true;
      }
      else if (!Versioned.IsNumeric((object) (text as string)))
      {
        this.ႷႳ.SetError((Control) this.ႷႨ, "Extra deduction be made of numeric");
        obj1.Cancel = true;
      }
      else
        this.ႷႳ.SetError((Control) this.ႷႨ, (string) null);
    }

    private void q5HR([In] object obj0, [In] CancelEventArgs obj1)
    {
      IComparable text = (IComparable) this.ႷႭ.Text;
      if (string.IsNullOrEmpty(text as string))
      {
        this.ႷႳ.SetError((Control) this.ႷႭ, "Mandatory Deduction should not left blank");
        obj1.Cancel = true;
      }
      else if (!Versioned.IsNumeric((object) (string) text))
      {
        this.ႷႳ.SetError((Control) this.ႷႭ, "Mandatory Deduction should be made of numeric");
        obj1.Cancel = true;
      }
      else
        this.ႷႳ.SetError((Control) this.ႷႭ, (string) null);
    }

    private void f0E9([In] object obj0, [In] EventArgs obj1)
    {
      object obj2 = (object) new Tt1();
      Table<Xz10> ⴈ = ((Tt1) obj2).Ⴈ;
      object obj3 = (object) Expression.Parameter(typeof (Xz10), "o");
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Xz10, bool>> predicate = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.Equal((Expression) Expression.Property((Expression) obj3, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.q3S5))), (Expression) Expression.Field((Expression) Expression.Constant((object) this, typeof (Gy8k)), FieldInfo.GetFieldFromHandle(__fieldref (Gy8k.ႠႳ))), false, (MethodInfo) null), (ParameterExpression) obj3);
      INotifyPropertyChanging entity = (INotifyPropertyChanging) ⴈ.FirstOrDefault<Xz10>(predicate);
      if ((Xz10) entity == null)
      {
        int num = (int) MessageBox.Show("Netpay not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        this.Close();
      }
      else
      {
        (obj2 as Tt1).Ⴈ.DeleteOnSubmit((Xz10) entity);
        (obj2 as Tt1).SubmitChanges();
        int num = (int) MessageBox.Show("Netpay [" + Conversions.ToString(((Xz10) entity).Ⴐ) + "] deleted", "Done", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        this.Close();
      }
    }

    internal sealed class y8G0
    {
      internal Button Ⴀ;
      internal Button Ⴄ;
      internal Button Ⴅ;

      internal y8G0()
      {
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ft4p
    {
      internal ComboBox Ⴀ;
      internal Label Ⴈ;
      internal TextBox Ⴓ;
      internal Button Ⴍ;
      internal ErrorProvider Ⴗ;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct q4CY
    {
      internal ComboBox Ⴀ;
    }
  }
}
