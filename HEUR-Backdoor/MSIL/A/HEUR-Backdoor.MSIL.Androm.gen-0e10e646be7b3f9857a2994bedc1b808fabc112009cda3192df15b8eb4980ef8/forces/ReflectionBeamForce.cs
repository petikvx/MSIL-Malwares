// Decompiled with JetBrains decompiler
// Type: forces.ReflectionBeamForce
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using System;

namespace forces
{
  public class ReflectionBeamForce : PointBaemForce
  {
    private bool isleft;

    public ReflectionBeamForce(double power, double position, double beamLength)
      : base(power, position, beamLength, false)
    {
      this.isleft = position == 0.0;
    }

    public override double getMomentom(double distance) => !this.isleft ? 0.0 : distance * this.Power * 1.0;

    public override double getShaer(double distance) => 0.0;

    public override double getfMomentomd2x(double distance)
    {
      if (!this.isleft)
        return 0.0;
      double num = -this.Power * Math.Pow(this.BeamLength, 2.0) / 6.0;
      return (this.Power * Math.Pow(distance, 3.0) / 6.0 + num * distance) * 1.0;
    }

    public override ReflectionBeamForce getReflection(int x) => (ReflectionBeamForce) null;

    public override void add(Force_ force)
    {
      if (!this.canAdd(force))
        return;
      base.add(force);
    }

    public override bool canAdd(Force_ force) => base.canAdd(force) && this.isleft == ((ReflectionBeamForce) force).isleft;
  }
}
