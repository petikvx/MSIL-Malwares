// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportSender
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using My;
using SmartAssembly.Shared;
using SmartAssembly.SmartExceptionsCore.UI;
using SmartAssembly.Zip;
using System;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using Ⴈ;

namespace SmartAssembly.SmartExceptionsCore
{
  public class ReportSender
  {
    protected const string AssemblyID = "{100fd8cd-4fe2-410e-8c33-ae1af08ef31d}";
    private \u003CPrivateImplementationDetails\u003E.Ⴗ Ⴓ;

    public void SetProxy(IWebProxy proxy)
    {
      IWebProxy webProxy;
      try
      {
        webProxy = proxy;
        this.Ⴓ.Ⴅ = webProxy;
      }
      catch (Exception ex)
      {
        IWebProxy o1 = webProxy;
        IWebProxy o3 = proxy;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    internal bool Ⴅ(byte[] Ⴃ, ReportSender.ႳႠ Ⴗ)
    {
      int num1;
      byte[] Ⴗ1;
      int num2;
      byte[] Ⴗ2;
      ႷႷ Ⴈ;
      ReportSender.ႳႷ ⴓⴗ;
      try
      {
        bool flag;
        try
        {
          num1 = 2;
          switch (num1)
          {
            default:
              Ⴗ1 = SimpleZip.Zip(Ⴃ);
              break;
          }
        }
        catch (Exception ex)
        {
          this.InvokeSendingReportFeedback(SendingReportStep.PreparingReport, SimpleZip.ExceptionMessage);
          flag = false;
          goto label_12;
        }
        num2 = 4;
        while (true)
        {
          switch (num2)
          {
            case 2:
              goto label_11;
            case 3:
              goto label_6;
            case 5:
              goto label_12;
            case 6:
            case 9:
              this.InvokeSendingReportFeedback(SendingReportStep.ConnectingToServer);
              Ⴈ = new ႷႷ(Ⴈ.ႷႭ.ႥႭ(490613291, 6));
              num2 = this.Ⴓ.Ⴅ == null ? 7 : 8;
              continue;
            case 7:
              ⴓⴗ = new ReportSender.ႳႷ(this, Ⴗ2, Ⴈ, Ⴗ);
              Ⴈ.Ⴈ(new Ⴈ.Ⴃ(ⴓⴗ.Ⴗ));
              goto case 10;
            case 8:
              Ⴈ.Ⴐ(this.Ⴓ.Ⴅ);
              goto case 7;
            case 10:
              num2 = 2;
              continue;
            default:
              Ⴗ2 = Ⴈ.Ⴍ.Ⴀ(Ⴗ1, MyComputer.Ⴗ(834543085, 8));
              num2 = Ⴗ2 != null ? 6 : 3;
              continue;
          }
        }
label_6:
        this.InvokeSendingReportFeedback(SendingReportStep.PreparingReport, Ⴈ.Ⴍ.Ⴃ);
        return false;
label_11:
        return ⴓⴗ.Ⴐ;
label_12:
        return flag;
      }
      catch (Exception ex)
      {
        byte[] o1 = Ⴗ1;
        byte[] o2 = Ⴗ2;
        ႷႷ o3 = Ⴈ;
        ReportSender.ႳႷ o4 = ⴓⴗ;
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o5 = (ValueType) flag;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) num2;
        byte[] o9 = Ⴃ;
        ReportSender.ႳႠ o10 = Ⴗ;
        StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this, (object) o9, (object) o10);
        throw;
      }
    }

    public event SendingReportFeedbackEventHandler SendingReportFeedback
    {
      add
      {
        int num;
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        SendingReportFeedbackEventHandler comparand;
        SendingReportFeedbackEventHandler feedbackEventHandler2;
        try
        {
          num = 1;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_6;
              case 2:
                goto label_8;
              case 3:
                comparand = feedbackEventHandler1;
                goto case 5;
              case 4:
                feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.Ⴓ.Ⴈ, feedbackEventHandler2, comparand);
                num = feedbackEventHandler1 != comparand ? 3 : 2;
                continue;
              case 5:
                feedbackEventHandler2 = (SendingReportFeedbackEventHandler) WaitSendingReportControl.Ⴐ((Delegate) comparand, (Delegate) value, 912, 912);
                num = 4;
                continue;
              default:
                feedbackEventHandler1 = this.Ⴓ.Ⴈ;
                num = 3;
                continue;
            }
          }
label_6:
          return;
label_8:;
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler o1 = feedbackEventHandler1;
          SendingReportFeedbackEventHandler o2 = comparand;
          SendingReportFeedbackEventHandler o3 = feedbackEventHandler2;
          __Boxed<int> o4 = (ValueType) num;
          SendingReportFeedbackEventHandler o6 = value;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }
      remove
      {
        int num;
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        SendingReportFeedbackEventHandler comparand;
        SendingReportFeedbackEventHandler feedbackEventHandler2;
        try
        {
          num = 4;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_5;
              case 1:
              case 5:
                comparand = feedbackEventHandler1;
                feedbackEventHandler2 = (SendingReportFeedbackEventHandler) AutoHeightLabel.Ⴍ((Delegate) comparand, (Delegate) value, 687, 765);
                num = 2;
                continue;
              case 2:
              case 6:
                feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.Ⴓ.Ⴈ, feedbackEventHandler2, comparand);
                num = feedbackEventHandler1 != comparand ? 1 : 0;
                continue;
              case 3:
                goto label_7;
              default:
                feedbackEventHandler1 = this.Ⴓ.Ⴈ;
                num = 1;
                continue;
            }
          }
label_5:
          return;
label_7:;
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler o1 = feedbackEventHandler1;
          SendingReportFeedbackEventHandler o2 = comparand;
          SendingReportFeedbackEventHandler o3 = feedbackEventHandler2;
          __Boxed<int> o4 = (ValueType) num;
          SendingReportFeedbackEventHandler o6 = value;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }
    }

    protected void InvokeSendingReportFeedback(
      SendingReportStep step,
      string errorMessage,
      string reportId)
    {
      int num;
      SendingReportFeedbackEventHandler ⴈ;
      try
      {
        num = 4;
        while (true)
        {
          switch (num)
          {
            case 1:
              num = ⴈ == null ? 2 : 3;
              continue;
            case 2:
              goto label_5;
            case 3:
            case 5:
              goto label_4;
            default:
              ⴈ = this.Ⴓ.Ⴈ;
              goto case 1;
          }
        }
label_5:
        return;
label_4:
        ⴈ((object) this, new SendingReportFeedbackEventArgs(step, errorMessage, reportId));
      }
      catch (Exception ex)
      {
        SendingReportFeedbackEventHandler o1 = ⴈ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        // ISSUE: variable of a boxed type
        __Boxed<SendingReportStep> o4 = (System.Enum) step;
        string o5 = errorMessage;
        string o6 = reportId;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    protected void InvokeSendingReportFeedback(SendingReportStep step, string errorMessage)
    {
      try
      {
        this.InvokeSendingReportFeedback(step, errorMessage, string.Empty);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<SendingReportStep> o2 = (System.Enum) step;
        string o3 = errorMessage;
        StackFrameHelper.CreateException3(ex, (object) this, (object) o2, (object) o3);
        throw;
      }
    }

    protected void InvokeSendingReportFeedback(SendingReportStep step)
    {
      try
      {
        this.InvokeSendingReportFeedback(step, string.Empty);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<SendingReportStep> o2 = (System.Enum) step;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    public ReportSender()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static ReportSender()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static Size Ⴗ([In] Form obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 11:
            num2 = 1;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 7:
              goto label_8;
            case 2:
            case 6:
              num1 = 5;
              continue;
            case 3:
            case 5:
              goto label_3;
            case 4:
              num1 = 5;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportSender.Ⴗ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return obj0.ClientSize;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Form o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static int Ⴓ([In] ref Size obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 106:
            num2 = 6;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 7:
              num1 = 4;
              continue;
            case 2:
            case 4:
              goto label_3;
            case 5:
              num1 = 4;
              continue;
            case 6:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportSender.Ⴓ);
              num1 = 4;
              continue;
          }
        }
label_8:
        return obj0.Height;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<Size> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static string Ⴄ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 42:
            num2 = 5;
            break;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              num1 = 3;
              continue;
            case 2:
            case 5:
              goto label_8;
            case 3:
            case 7:
              goto label_3;
            case 4:
            case 6:
              num1 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportSender.Ⴄ);
              num1 = 3;
              continue;
          }
        }
label_8:
        return Path.GetFileName(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void Ⴍ([In] object obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
        num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_8;
            case 1:
            case 3:
              goto label_7;
            case 4:
            case 5:
              num1 = 2;
              continue;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 85:
                  num2 = 3;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        Monitor.Exit(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        object o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, o3, (object) o4, (object) o5);
        throw;
      }
    }

    private sealed class ႳႷ
    {
      private readonly ReportSender.ႳႠ Ⴍ;
      public bool Ⴐ = true;
      private SimpleZip.Ⴜ Ⴈ;

      public ႳႷ(ReportSender Ⴃ, byte[] Ⴗ, ႷႷ Ⴈ, ReportSender.ႳႠ Ⴄ)
      {
        ReportSender reportSender;
        ႷႷ ⴗⴗ;
        byte[] numArray;
        try
        {
          reportSender = Ⴃ;
          this.Ⴈ.Ⴅ = reportSender;
          this.Ⴍ = Ⴄ;
          ⴗⴗ = Ⴈ;
          this.Ⴈ.Ⴐ = ⴗⴗ;
          numArray = Ⴗ;
          this.Ⴈ.Ⴗ = numArray;
        }
        catch (Exception ex)
        {
          ReportSender o1 = reportSender;
          ႷႷ o2 = ⴗⴗ;
          byte[] o3 = numArray;
          ReportSender o5 = Ⴃ;
          byte[] o6 = Ⴗ;
          ႷႷ o7 = Ⴈ;
          ReportSender.ႳႠ o8 = Ⴄ;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7, (object) o8);
          throw;
        }
      }

      public void Ⴗ(string Ⴗ)
      {
        int num1;
        byte[] numArray;
        byte[] Ⴀ;
        ReportSender.ႳႥ ⴓⴅ;
        int num2;
        string Ⴃ;
        try
        {
          num1 = 2;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 3:
                goto label_10;
              case 1:
                AppPathFinder.Ⴍ((Array) this.Ⴈ.Ⴗ, 0, (Array) Ⴀ, numArray.Length, this.Ⴈ.Ⴗ.Length, 950, 940);
                goto case 5;
              case 4:
                ⴓⴅ = new ReportSender.ႳႥ(this.Ⴈ.Ⴅ);
                this.Ⴈ.Ⴐ.Ⴅ(Ⴀ, this.Ⴍ.Ⴄ(), this.Ⴍ.Ⴀ(), this.Ⴍ.Ⴐ(), new Ⴈ.Ⴃ(ⴓⴅ.Ⴀ));
                num1 = 0;
                continue;
              case 5:
                num1 = 4;
                continue;
              case 6:
                SmartAssembly.SmartUsageCore.DoNotObfuscateAttribute.Ⴈ((Array) numArray, (Array) Ⴀ, numArray.Length, 509, 416);
                goto case 1;
              case 7:
                Ⴀ = new byte[numArray.Length + this.Ⴈ.Ⴗ.Length];
                num1 = 6;
                continue;
              case 8:
                this.Ⴈ.Ⴅ.InvokeSendingReportFeedback(SendingReportStep.Transfering);
                numArray = ႷႨ.Ⴄ(ႷႼ.Ⴗ(928, 1021), Ⴈ.ႷႭ.ႥႭ(490613361, 1), 768, 886);
                num1 = 7;
                continue;
              default:
                if (Ⴈ.Ⴅ.Ⴐ(Ⴗ, Ⴈ.ႳႷ.Ⴗ(2059790529, 6), 780, 854))
                {
                  num1 = 8;
                  continue;
                }
                goto label_12;
            }
          }
label_10:
          this.Ⴐ = ⴓⴅ.Ⴈ;
          return;
label_12:
          Ⴃ = Ⴗ;
label_13:
          num2 = this.Ⴈ.Ⴅ.Ⴓ.Ⴈ == null ? 2 : 0;
          switch (num2)
          {
            case 0:
              this.Ⴈ.Ⴅ.Ⴓ.Ⴈ((object) this, new SendingReportFeedbackEventArgs(SendingReportStep.ConnectingToServer, Ⴃ));
              goto case 2;
            case 1:
              goto label_13;
            case 2:
            case 6:
              this.Ⴐ = false;
              break;
            case 3:
            case 4:
              goto label_12;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportSender.ႳႷ.Ⴗ);
              break;
          }
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray;
          byte[] o2 = Ⴀ;
          ReportSender.ႳႥ o3 = ⴓⴅ;
          string o4 = Ⴃ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num2;
          string o8 = Ⴗ;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
          throw;
        }
      }

      static ႳႷ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }

    private sealed class ႳႥ
    {
      public bool Ⴈ;
      private SimpleZip.ႤႭ.Ⴍ Ⴅ;

      public ႳႥ(ReportSender Ⴐ)
      {
        ReportSender reportSender;
        try
        {
          reportSender = Ⴐ;
          this.Ⴅ.Ⴀ = reportSender;
        }
        catch (Exception ex)
        {
          ReportSender o1 = reportSender;
          ReportSender o3 = Ⴐ;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void Ⴀ(string Ⴓ)
      {
        int num1;
        try
        {
          num1 = 2;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_8;
              case 1:
                goto label_5;
              case 3:
                goto label_4;
              default:
                if (AppNameFinder.Ⴓ(Ⴓ, Ⴈ.ႳႷ.Ⴗ(2059790474, 4), 279, 336))
                {
                  num1 = 3;
                  continue;
                }
                goto label_6;
            }
          }
label_8:
          return;
label_4:
          this.Ⴅ.Ⴀ.InvokeSendingReportFeedback(SendingReportStep.Transfering, Ⴓ);
label_5:
          this.Ⴈ = false;
          return;
label_6:
          this.Ⴅ.Ⴀ.InvokeSendingReportFeedback(SendingReportStep.Finished, string.Empty, Ⴓ);
          this.Ⴈ = true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          string o4 = Ⴓ;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
          throw;
        }
      }

      static ႳႥ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }

    internal sealed class ႳႠ
    {
      public static ReportSender.ႳႠ Ⴅ;
      private SimpleZip.ႤႭ.Ⴗ Ⴀ;

      public ႳႠ(string Ⴃ, string Ⴀ, string Ⴈ)
      {
        string str1;
        string str2;
        string str3;
        try
        {
          str1 = Ⴃ;
          this.Ⴀ.Ⴐ = str1;
          str2 = Ⴈ;
          this.Ⴀ.Ⴄ = str2;
          str3 = Ⴀ;
          this.Ⴀ.Ⴀ = str3;
        }
        catch (Exception ex)
        {
          string o1 = str1;
          string o2 = str2;
          string o3 = str3;
          string o5 = Ⴃ;
          string o6 = Ⴀ;
          string o7 = Ⴈ;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }

      [SpecialName]
      public string Ⴐ()
      {
        try
        {
          return this.Ⴀ.Ⴄ;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      [SpecialName]
      public string Ⴀ()
      {
        try
        {
          return this.Ⴀ.Ⴀ;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      [SpecialName]
      public string Ⴄ()
      {
        try
        {
          return this.Ⴀ.Ⴐ;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      static ႳႠ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
          ReportSender.ႳႠ.Ⴅ = new ReportSender.ႳႠ((string) null, (string) null, (string) null);
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }
  }
}
