// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.Resource
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace fLaSh.Dissembler
{
  public class Resource
  {
    protected string _type;
    protected string _name;
    protected ushort _language;
    protected IntPtr _hModule;
    protected IntPtr _hResource;
    protected int _size;

    public int Size
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._size;
    }

    public ushort Language
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._language;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._language = value;
    }

    public string Type
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._type;
    }

    public string Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._name;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._name = value;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Resource()
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this._hModule = IntPtr.Zero;
      this._hResource = IntPtr.Zero;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Resource(
      IntPtr hModule,
      IntPtr hResource,
      IntPtr type,
      IntPtr name,
      ushort wIDLanguage,
      int size)
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this._hModule = IntPtr.Zero;
      this._hResource = IntPtr.Zero;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this._hModule = hModule;
      this._type = ResourceUtil.GetResourceName(type);
      this._name = ResourceUtil.GetResourceName(name);
      this._language = wIDLanguage;
      this._hResource = hResource;
      this._size = size;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static byte[] LoadBytesFrom(string filename, IntPtr name, IntPtr type)
    {
      IntPtr num = IntPtr.Zero;
      try
      {
        num = Kernel32.LoadLibraryEx(filename, IntPtr.Zero, 3U);
        if (IntPtr.Zero == num)
          throw new Win32Exception(Marshal.GetLastWin32Error());
        IntPtr resource = Kernel32.FindResource(num, name, type);
        IntPtr hResData = !(IntPtr.Zero == resource) ? Kernel32.LoadResource(num, resource) : throw new Win32Exception(Marshal.GetLastWin32Error());
        IntPtr source = !(IntPtr.Zero == hResData) ? Kernel32.LockResource(hResData) : throw new Win32Exception(Marshal.GetLastWin32Error());
        if (source == IntPtr.Zero)
          throw new Win32Exception(Marshal.GetLastWin32Error());
        int length = Kernel32.SizeofResource(num, resource);
        byte[] destination = length > 0 ? new byte[length] : throw new Win32Exception(Marshal.GetLastWin32Error());
        Marshal.Copy(source, destination, 0, length);
        return destination;
      }
      finally
      {
        if (num != IntPtr.Zero)
          Kernel32.FreeLibrary(num);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LoadFrom(string filename, IntPtr name, IntPtr type)
    {
      this._type = ResourceUtil.GetResourceName(type);
      this._name = ResourceUtil.GetResourceName(name);
      IntPtr num = IntPtr.Zero;
      try
      {
        num = Kernel32.LoadLibraryEx(filename, IntPtr.Zero, 3U);
        if (IntPtr.Zero == num)
          throw new Win32Exception(Marshal.GetLastWin32Error());
        IntPtr resource = Kernel32.FindResource(num, name, type);
        IntPtr hResData = !(IntPtr.Zero == resource) ? Kernel32.LoadResource(num, resource) : throw new Win32Exception(Marshal.GetLastWin32Error());
        IntPtr lpRes = !(IntPtr.Zero == hResData) ? Kernel32.LockResource(hResData) : throw new Win32Exception(Marshal.GetLastWin32Error());
        if (lpRes == IntPtr.Zero)
          throw new Win32Exception(Marshal.GetLastWin32Error());
        this._size = Kernel32.SizeofResource(num, resource);
        if (this._size <= 0)
          throw new Win32Exception(Marshal.GetLastWin32Error());
        this.Read(num, lpRes);
      }
      finally
      {
        if (num != IntPtr.Zero)
          Kernel32.FreeLibrary(num);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual IntPtr Read(IntPtr hModule, IntPtr lpRes) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual void Write(BinaryWriter w) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public byte[] WriteAndGetBytes()
    {
      MemoryStream output = new MemoryStream();
      BinaryWriter w = new BinaryWriter((Stream) output, Encoding.Default);
      this.Write(w);
      w.Close();
      return output.ToArray();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SaveTo(string filename, IntPtr name, IntPtr type, ushort langid)
    {
      byte[] bytes = this.WriteAndGetBytes();
      Resource.SaveTo(filename, name, type, langid, bytes);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void SaveTo(
      string filename,
      IntPtr name,
      IntPtr type,
      ushort lang,
      byte[] data)
    {
      IntPtr hUpdate = Kernel32.BeginUpdateResource(filename, false);
      if (hUpdate == IntPtr.Zero)
        throw new Win32Exception(Marshal.GetLastWin32Error());
      if (!Kernel32.UpdateResource(hUpdate, type, name, lang, data, (uint) data.Length))
        throw new Win32Exception(Marshal.GetLastWin32Error());
      if (!Kernel32.EndUpdateResource(hUpdate, false))
        throw new Win32Exception(Marshal.GetLastWin32Error());
    }
  }
}
