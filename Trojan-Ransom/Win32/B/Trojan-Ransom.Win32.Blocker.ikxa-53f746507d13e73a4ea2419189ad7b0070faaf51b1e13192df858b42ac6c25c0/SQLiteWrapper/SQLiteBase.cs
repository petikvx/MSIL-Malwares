// Decompiled with JetBrains decompiler
// Type: OpenSource_RAT_Schäding.SQLiteWrapper.SQLiteBase
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8170AD08-ABA5-4012-BCC7-4CC67D0071A1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.ikxa-53f746507d13e73a4ea2419189ad7b0070faaf51b1e13192df858b42ac6c25c0.exe

using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace OpenSource_RAT_Schäding.SQLiteWrapper
{
  public class SQLiteBase
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr database;

    [DllImport("kernel32")]
    private static extern IntPtr HeapAlloc(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32")]
    private static extern IntPtr GetProcessHeap();

    [DllImport("kernel32")]
    private static extern int lstrlen(IntPtr str);

    [DllImport("sqlite3")]
    private static extern int sqlite3_open(IntPtr fileName, ref IntPtr database);

    [DllImport("sqlite3")]
    private static extern int sqlite3_close(IntPtr database);

    [DllImport("sqlite3")]
    private static extern int sqlite3_exec(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      ref IntPtr error);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_errmsg(IntPtr database);

    [DllImport("sqlite3")]
    private static extern int sqlite3_prepare_v2(
      IntPtr database,
      IntPtr query,
      int length,
      ref IntPtr statement,
      ref IntPtr tail);

    [DllImport("sqlite3")]
    private static extern int sqlite3_step(IntPtr statement);

    [DllImport("sqlite3")]
    private static extern int sqlite3_column_count(IntPtr statement);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_name(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern int sqlite3_column_type(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern int sqlite3_column_int(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern double sqlite3_column_double(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_text(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_blob(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_table_name(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern int sqlite3_finalize(IntPtr handle);

    public SQLiteBase() => this.database = IntPtr.Zero;

    public SQLiteBase(string baseName) => this.OpenDatabase(baseName);

    public void OpenDatabase(string baseName)
    {
      if (SQLiteBase.sqlite3_open(this.StringToPointer(baseName), ref this.database) != 0)
      {
        this.database = IntPtr.Zero;
        throw new Exception(\u003F0\u003F.\u003F1\u003F("YũɨͶѪԷ١ݼ\u0860ॻਲ\u0B7Eౠ൪\u0E60ཤၢᅬሪ\u136Dᑩᕳᙧᝧᡥᥰᩧᬡ") + baseName + \u003F0\u003F.\u003F1\u003F(" "));
      }
    }

    public void CloseDatabase()
    {
      if (!(this.database != IntPtr.Zero))
        return;
      SQLiteBase.sqlite3_close(this.database);
    }

    public ArrayList GetTables()
    {
      DataTable dataTable = this.ExecuteQuery(\u003F0\u003F.\u003F1\u003F("âǵˣϫӮ\u05F8ڋ߄\u08C8\u09C5ૂஆೣ\u0DF6\u0EEC\u0FEFႁᇓዮᏲᓴᗨ\u16FEៅᣴ᧹\u1AE4ᯢᳰᷦẳ\u1FC5⃙⇕⋝⏋⒭◸⛲⟺⣬⦨⫎⯈ⲥⶬ⺤⿶ム㇢㈓㌛㑚㕐㙜㜌㠐㤝㨀㭑㱜㵔㸲㼼䀵䅐䈁䌏䐀䔉䙋䜤䠦䤼䩇䬪䰬䴯並佂偆儓刮匲吴唨嘾圅塼奿娂嬘尜崛帝彲怐愜戃据搞攉昇朏栊検橧欨氤洩渦潢瀇焒牰獳琝畏癊睖硐祌穒筩籁絑繞罂聮腝艎荝葙蕉虙蜊衾襠詢譴豠贄蹗轛遑酅鈿鍗鑓锼阳霽顭饹驵魺鱰鴳鸿鼵ꁧꅹꉪꍹꐪꔥꘫꝅꡛꥌꩂꭔ갥굆깚꼢뀰"));
      ArrayList tables = new ArrayList();
      IEnumerator enumerator;
      try
      {
        enumerator = dataTable.Rows.GetEnumerator();
        while (enumerator.MoveNext())
        {
          DataRow current = (DataRow) enumerator.Current;
          tables.Add((object) current.ItemArray[0].ToString());
        }
      }
      finally
      {
        if (enumerator is IDisposable _)
          (enumerator as IDisposable).Dispose();
      }
      return tables;
    }

    public void ExecuteNonQuery(string query)
    {
      IntPtr error;
      SQLiteBase.sqlite3_exec(this.database, this.StringToPointer(query), IntPtr.Zero, IntPtr.Zero, ref error);
      if (error != IntPtr.Zero)
        throw new Exception(\u003F0\u003F.\u003F1\u003F("dŒɭͱѯԼ٬ݳ\u086D॰\u0A37\u0B73౭\u0D71\u0E70ཧၥᅹቡ\u1369ᐭᕢᙤᝤᠤ\u1979ᩲ᭣ᱷᵽḹἢ‣") + query + \u003F0\u003F.\u003F1\u003F("!ģȋ") + this.PointerToString(SQLiteBase.sqlite3_errmsg(error)));
    }

    public DataTable ExecuteQuery(string query)
    {
      IntPtr statement;
      IntPtr tail;
      SQLiteBase.sqlite3_prepare_v2(this.database, this.StringToPointer(query), this.GetPointerLenght(this.StringToPointer(query)), ref statement, ref tail);
      DataTable table = new DataTable();
      int num = this.ReadFirstRow(statement, ref table);
      while (num == 100)
        num = this.ReadNextRow(statement, ref table);
      SQLiteBase.sqlite3_finalize(statement);
      return table;
    }

    private int ReadFirstRow(IntPtr statement, ref DataTable table)
    {
      table = new DataTable(\u003F0\u003F.\u003F1\u003F("yůɺͽѫղّݥ\u0861८\u0A64"));
      if (SQLiteBase.sqlite3_step(statement) == 100)
        goto label_10;
label_9:
      return SQLiteBase.sqlite3_step(statement);
label_10:
      int num1 = SQLiteBase.sqlite3_column_count(statement);
      \u003F0\u003F.\u003F1\u003F("");
      object[] objArray = new object[checked (num1 - 1 + 1)];
      int num2 = checked (num1 - 1);
      int columnNumber = 0;
      while (columnNumber <= num2)
      {
        string columnName = this.PointerToString(SQLiteBase.sqlite3_column_name(statement, columnNumber));
        switch (SQLiteBase.sqlite3_column_type(statement, columnNumber))
        {
          case 1:
            table.Columns.Add(columnName, Type.GetType(\u003F0\u003F.\u003F1\u003F("_Ųɹͽѭժب\u074C\u086Aॷ\u0A31ଳ")));
            objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_int(statement, columnNumber);
            break;
          case 2:
            table.Columns.Add(columnName, Type.GetType(\u003F0\u003F.\u003F1\u003F("^ŵɸ;Ѭեةݕ\u086C४\u0A64୮\u0C64")));
            objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_double(statement, columnNumber);
            break;
          case 3:
            table.Columns.Add(columnName, Type.GetType(\u003F0\u003F.\u003F1\u003F("^ŵɸ;Ѭեةݕ\u0871ॶ੪୬౦")));
            objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_text(statement, columnNumber));
            break;
          case 4:
            table.Columns.Add(columnName, Type.GetType(\u003F0\u003F.\u003F1\u003F("^ŵɸ;Ѭեةݕ\u0871ॶ੪୬౦")));
            objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_blob(statement, columnNumber));
            break;
          default:
            table.Columns.Add(columnName, Type.GetType(\u003F0\u003F.\u003F1\u003F("^ŵɸ;Ѭեةݕ\u0871ॶ੪୬౦")));
            objArray[columnNumber] = (object) \u003F0\u003F.\u003F1\u003F("");
            break;
        }
        checked { ++columnNumber; }
      }
      table.Rows.Add(objArray);
      goto label_9;
    }

    private int ReadNextRow(IntPtr statement, ref DataTable table)
    {
      int num1 = SQLiteBase.sqlite3_column_count(statement);
      object[] objArray = new object[checked (num1 - 1 + 1)];
      int num2 = checked (num1 - 1);
      int columnNumber = 0;
      while (columnNumber <= num2)
      {
        switch (SQLiteBase.sqlite3_column_type(statement, columnNumber))
        {
          case 1:
            objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_int(statement, columnNumber);
            break;
          case 2:
            objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_double(statement, columnNumber);
            break;
          case 3:
            objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_text(statement, columnNumber));
            break;
          case 4:
            objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_blob(statement, columnNumber));
            break;
          default:
            objArray[columnNumber] = (object) \u003F0\u003F.\u003F1\u003F("");
            break;
        }
        checked { ++columnNumber; }
      }
      table.Rows.Add(objArray);
      return SQLiteBase.sqlite3_step(statement);
    }

    private IntPtr StringToPointer(string str)
    {
      switch (str)
      {
        case null:
          return IntPtr.Zero;
        default:
          byte[] bytes1 = Encoding.UTF8.GetBytes(str);
          uint bytes2 = checked ((uint) (bytes1.Length + 1));
          IntPtr pointer = SQLiteBase.HeapAlloc(SQLiteBase.GetProcessHeap(), 0U, bytes2);
          Marshal.Copy(bytes1, 0, pointer, bytes1.Length);
          Marshal.WriteByte(pointer, bytes1.Length, (byte) 0);
          return pointer;
      }
    }

    private string PointerToString(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int pointerLenght = this.GetPointerLenght(ptr);
      byte[] numArray = new byte[checked (pointerLenght - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, pointerLenght);
      return utF8.GetString(numArray, 0, pointerLenght);
    }

    private int GetPointerLenght(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : SQLiteBase.lstrlen(ptr);

    public enum SQLiteDataTypes
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
