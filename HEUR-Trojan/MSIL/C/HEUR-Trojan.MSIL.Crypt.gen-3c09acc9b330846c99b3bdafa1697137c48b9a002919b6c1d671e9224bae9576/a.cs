// Decompiled with JetBrains decompiler
// Type: a
// Assembly: SafeHeapHandleCa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 86070057-00F7-426E-5B63-54B8EF531843
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-3c09acc9b330846c99b3bdafa1697137c48b9a002919b6c1d671e9224bae9576.exe

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

[XmlSchemaProvider("GetTypedDataSetSchema")]
[HelpKeyword("vs.data.DataSet")]
[ToolboxItem(true)]
[XmlRoot("DataSet1")]
[Serializable]
public sealed class a : DataSet
{
  private a.\u0008 \u0002;
  private a.\u0006 \u0003;
  private SchemaSerializationMode \u0005;

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public a()
  {
    int num1 = 6;
    while (true)
    {
      int num2 = num1;
      CollectionChangeEventHandler changeEventHandler;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_9;
          case 1:
          case 7:
            goto label_1;
          case 3:
            this.EndInit();
            num2 = 8;
            continue;
          case 4:
            this.Tables.CollectionChanged += changeEventHandler;
            goto case 5;
          case 5:
            this.Relations.CollectionChanged += changeEventHandler;
            if (!a.\u0003())
            {
              num2 = 3;
              continue;
            }
            goto label_8;
          case 6:
            goto label_8;
          case 8:
            goto label_10;
          default:
            goto label_6;
        }
      }
label_1:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.BeginInit();
      this.\u0003();
      num1 = 0;
      continue;
label_6:
      num1 = 5;
      continue;
label_8:
      this.\u0005 = SchemaSerializationMode.IncludeSchema;
      num1 = 7;
      continue;
label_9:
      changeEventHandler = new CollectionChangeEventHandler(this.\u0002);
      num1 = 4;
    }
label_10:;
  }

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected a(SerializationInfo _param1, StreamingContext _param2)
  {
    int num1 = 0;
    CollectionChangeEventHandler changeEventHandler1;
    while (true)
    {
      CollectionChangeEventHandler changeEventHandler2;
      string s;
      int num2;
      DataSet dataSet;
      bool flag;
      switch (num1)
      {
        case 0:
          this.\u0005 = SchemaSerializationMode.IncludeSchema;
          num2 = 10;
          break;
        case 1:
        case 10:
          // ISSUE: explicit constructor call
          base.\u002Ector(_param1, _param2, false);
          num1 = 11;
          continue;
        case 2:
        case 11:
          if (!this.IsBinarySerialized(_param1, _param2))
          {
            s = (string) _param1.GetValue(\u0002\u2003.\u0002(-1094102528), typeof (string));
            num2 = 12;
            break;
          }
          this.\u0002(false);
          changeEventHandler1 = new CollectionChangeEventHandler(this.\u0002);
          num2 = 6;
          break;
        case 3:
          dataSet = new DataSet();
          if (a.\u0002())
          {
            num1 = 16;
            continue;
          }
          goto case 7;
        case 4:
          goto label_2;
        case 5:
          this.GetSerializationData(_param1, _param2);
          num2 = 13;
          break;
        case 6:
          this.\u0002().CollectionChanged += changeEventHandler1;
          num2 = 4;
          break;
        case 7:
          this.CaseSensitive = dataSet.CaseSensitive;
          num2 = 14;
          break;
        case 8:
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          num2 = 7;
          break;
        case 9:
          if (dataSet.Tables[\u0002\u2003.\u0002(-1094102465)] != null)
          {
            this.Tables.Add((DataTable) new a.\u0006(dataSet.Tables[\u0002\u2003.\u0002(-1094102465)]));
            num1 = 8;
            continue;
          }
          goto case 8;
        case 12:
          if (this.DetermineSchemaSerializationMode(_param1, _param2) == SchemaSerializationMode.IncludeSchema)
          {
            num2 = 3;
            break;
          }
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          num1 = 5;
          continue;
        case 13:
          changeEventHandler2 = new CollectionChangeEventHandler(this.\u0002);
          this.Tables.CollectionChanged += changeEventHandler2;
          num1 = 18;
          continue;
        case 14:
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          num2 = 17;
          break;
        case 15:
          if (flag)
          {
            this.Tables.Add((DataTable) new a.\u0008(dataSet.Tables[\u0002\u2003.\u0002(-1094102245)]));
            goto case 9;
          }
          else
            goto case 9;
        case 16:
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          flag = dataSet.Tables[\u0002\u2003.\u0002(-1094102245)] != null;
          num1 = 15;
          continue;
        case 17:
          this.\u0002();
          goto case 5;
        case 18:
          this.\u0002().CollectionChanged += changeEventHandler2;
          num1 = 19;
          continue;
        case 19:
          goto label_27;
        default:
          num2 = 9;
          break;
      }
      num1 = num2;
    }
label_2:
    this.\u0002().CollectionChanged += changeEventHandler1;
    return;
label_27:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public a.\u0008 \u0002() => this.\u0002;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public a.\u0006 \u0002() => this.\u0003;

  [DebuggerNonUserCode]
  [Browsable(true)]
  [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  public override SchemaSerializationMode SchemaSerializationMode
  {
    [MethodImpl(MethodImplOptions.NoInlining)] get => this.\u0005;
    [MethodImpl(MethodImplOptions.NoInlining)] set => this.\u0005 = value;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public DataTableCollection \u0002() => this.Tables;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public DataRelationCollection \u0002() => this.Relations;

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void InitializeDerivedDataSet()
  {
    int num1 = 4;
    if (a.\u0002())
      goto label_5;
label_1:
    this.EndInit();
    int num2 = 5;
label_4:
    num1 = num2;
label_5:
    switch (num1)
    {
      case 0:
      case 1:
        this.\u0003();
        goto label_1;
      case 2:
      case 3:
        goto label_1;
      case 4:
        this.BeginInit();
        num2 = 0;
        goto label_4;
      case 5:
        break;
      default:
        num2 = 3;
        goto label_4;
    }
  }

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public override DataSet Clone()
  {
    int num = 3;
    a a;
    DataSet dataSet;
    while (true)
    {
      switch (num)
      {
        case 0:
        case 3:
          a = (a) base.Clone();
          num = 4;
          continue;
        case 1:
          dataSet = (DataSet) a;
          num = 6;
          continue;
        case 2:
        case 5:
          a.SchemaSerializationMode = this.SchemaSerializationMode;
          goto case 1;
        case 4:
          a.\u0002();
          num = 5;
          continue;
        case 6:
          goto label_7;
        default:
          num = 1;
          continue;
      }
    }
label_7:
    return dataSet;
  }

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override bool ShouldSerializeTables() => false;

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override bool ShouldSerializeRelations() => false;

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void ReadXmlSerializable(XmlReader _param1)
  {
    int num1 = 9;
    while (true)
    {
      int num2;
      DataSet dataSet;
      bool flag1;
      bool flag2;
      switch (num1)
      {
        case 0:
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          num1 = 8;
          continue;
        case 1:
          if (!flag1)
          {
            int num3 = (int) this.ReadXml(_param1);
            num2 = 12;
            break;
          }
          this.Reset();
          dataSet = new DataSet();
          num1 = 6;
          continue;
        case 2:
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          goto case 4;
        case 3:
          this.EnforceConstraints = dataSet.EnforceConstraints;
          num2 = 0;
          break;
        case 4:
          this.CaseSensitive = dataSet.CaseSensitive;
          if (a.\u0002())
          {
            num1 = 3;
            continue;
          }
          goto label_22;
        case 5:
        case 11:
          this.Prefix = dataSet.Prefix;
          num1 = 2;
          continue;
        case 6:
          int num4 = (int) dataSet.ReadXml(_param1);
          num2 = 13;
          break;
        case 7:
          if (flag2)
            this.Tables.Add((DataTable) new a.\u0008(dataSet.Tables[\u0002\u2003.\u0002(-1094102245)]));
          if (dataSet.Tables[\u0002\u2003.\u0002(-1094102465)] != null)
            this.Tables.Add((DataTable) new a.\u0006(dataSet.Tables[\u0002\u2003.\u0002(-1094102465)]));
          this.DataSetName = dataSet.DataSetName;
          num1 = 11;
          continue;
        case 8:
        case 10:
          goto label_1;
        case 9:
          flag1 = this.DetermineSchemaSerializationMode(_param1) == SchemaSerializationMode.IncludeSchema;
          if (a.\u0002())
          {
            num1 = 1;
            continue;
          }
          goto case 12;
        case 12:
          this.\u0002();
          num2 = 14;
          break;
        case 13:
          flag2 = dataSet.Tables[\u0002\u2003.\u0002(-1094102245)] != null;
          num2 = 7;
          break;
        case 14:
          goto label_23;
        default:
          num2 = 4;
          break;
      }
      num1 = num2;
    }
label_1:
    this.\u0002();
    return;
label_23:
    return;
label_22:;
  }

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override XmlSchema GetSchemaSerializable()
  {
    int num1 = 2;
    XmlSchema schemaSerializable;
    while (true)
    {
      int num2 = num1;
      MemoryStream memoryStream;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            memoryStream = new MemoryStream();
            num2 = 5;
            continue;
          case 1:
          case 5:
            goto label_6;
          case 3:
            goto label_2;
          case 4:
            goto label_7;
          case 6:
            goto label_8;
          default:
            num2 = 4;
            continue;
        }
      }
label_2:
      memoryStream.Position = 0L;
      goto label_7;
label_6:
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      num1 = 3;
      continue;
label_7:
      schemaSerializable = XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
      num1 = 6;
    }
label_8:
    return schemaSerializable;
  }

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.NoInlining)]
  internal void \u0002() => this.\u0002(true);

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.NoInlining)]
  internal void \u0002(bool _param1)
  {
    int num1 = 8;
    while (true)
    {
      int num2 = num1;
      bool flag1;
      while (true)
      {
        bool flag2;
        bool flag3;
        bool flag4;
        switch (num2)
        {
          case 0:
          case 8:
            goto label_10;
          case 1:
          case 7:
            this.\u0003.\u0002();
            num2 = 10;
            continue;
          case 2:
            if (flag1)
            {
              this.\u0002.\u0002();
              break;
            }
            break;
          case 3:
            if (!flag3)
              break;
            goto label_7;
          case 4:
            if (flag4)
            {
              if (a.\u0002())
              {
                num2 = 1;
                continue;
              }
              goto label_18;
            }
            else
              goto label_19;
          case 5:
            if (!flag2)
              goto label_9;
            else
              goto case 9;
          case 6:
            flag3 = _param1;
            if (a.\u0002())
            {
              num2 = 3;
              continue;
            }
            goto case 4;
          case 9:
            flag4 = this.\u0003 != null;
            int num3 = 4;
            num2 = a.\u0003() ? num3 : num3;
            continue;
          case 10:
            goto label_2;
          default:
            goto label_5;
        }
        this.\u0003 = (a.\u0006) this.Tables[\u0002\u2003.\u0002(-1094102465)];
        flag2 = _param1;
        num2 = 5;
      }
label_5:
      num1 = 9;
      continue;
label_7:
      flag1 = this.\u0002 != null;
      num1 = 2;
      continue;
label_10:
      this.\u0002 = (a.\u0008) this.Tables[\u0002\u2003.\u0002(-1094102245)];
      num1 = 6;
    }
label_9:
    return;
label_2:
    return;
label_19:
    return;
label_18:;
  }

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0003()
  {
    int num1 = 0;
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
          this.DataSetName = \u0002\u2003.\u0002(-1094102438);
          num2 = 2;
          break;
        case 1:
        case 3:
          this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
          goto case 4;
        case 2:
          this.Prefix = string.Empty;
          if (a.\u0002())
          {
            num1 = 8;
            continue;
          }
          goto case 0;
        case 4:
        case 6:
          this.\u0002 = new a.\u0008();
          num2 = 5;
          break;
        case 5:
          this.Tables.Add((DataTable) this.\u0002);
          this.\u0003 = new a.\u0006();
          num1 = 7;
          continue;
        case 7:
          this.Tables.Add((DataTable) this.\u0003);
          num2 = 9;
          break;
        case 8:
          this.Namespace = \u0002\u2003.\u0002(-1094102416);
          this.EnforceConstraints = true;
          num2 = 1;
          break;
        case 9:
          goto label_11;
        default:
          num1 = 6;
          continue;
      }
      num1 = num2;
    }
label_11:;
  }

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  private bool \u0002() => false;

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  private bool \u0003() => false;

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002(object _param1, CollectionChangeEventArgs _param2)
  {
    int num1 = 4;
    while (true)
    {
      int num2 = num1;
      bool flag;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            goto label_2;
          case 1:
          case 2:
            if (!flag)
              goto label_4;
            else
              goto case 3;
          case 3:
            this.\u0002();
            if (a.\u0002())
            {
              num2 = 5;
              continue;
            }
            goto label_2;
          case 5:
            goto label_8;
          default:
            num2 = 3;
            continue;
        }
      }
label_2:
      flag = _param2.Action == CollectionChangeAction.Remove;
      num1 = 2;
    }
label_4:
    return;
label_8:;
  }

  [DebuggerNonUserCode]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public static XmlSchemaComplexType \u0002(XmlSchemaSet _param0)
  {
    int num1 = 3;
    XmlSchemaComplexType schemaComplexType1;
    while (true)
    {
      int num2 = num1;
      XmlSchemaComplexType schemaComplexType2;
      XmlSchemaSequence xmlSchemaSequence;
      XmlSchemaAny xmlSchemaAny;
      a a;
      while (true)
      {
        MemoryStream memoryStream1;
        MemoryStream memoryStream2;
        XmlSchema schemaSerializable;
        bool flag1;
        switch (num2)
        {
          case 0:
          case 3:
            goto label_39;
          case 1:
          case 6:
            if (flag1)
            {
              num2 = 9;
              continue;
            }
            break;
          case 2:
            try
            {
              XmlSchema xmlSchema = (XmlSchema) null;
              int num3 = 7;
              while (true)
              {
                int num4 = num3;
                bool flag2;
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                    case 7:
                      goto label_11;
                    case 1:
                      goto label_5;
                    case 2:
                      goto label_9;
                    case 3:
                      goto label_19;
                    case 4:
                      xmlSchema.Write((Stream) memoryStream2);
                      if (memoryStream1.Length == memoryStream2.Length)
                      {
                        if (a.\u0002())
                        {
                          num4 = 6;
                          continue;
                        }
                        goto label_5;
                      }
                      else
                        goto label_10;
                    case 5:
                      goto label_13;
                    case 6:
                      memoryStream1.Position = 0L;
                      num4 = 9;
                      continue;
                    case 8:
                    case 10:
                      if (!flag2)
                      {
                        if (a.\u0002())
                        {
                          num4 = 11;
                          continue;
                        }
                        goto label_9;
                      }
                      else
                        goto label_12;
                    case 9:
                      goto label_20;
                    case 11:
                      goto label_29;
                    default:
                      goto label_23;
                  }
                }
label_5:
                if (memoryStream1.Position != memoryStream1.Length)
                {
                  num3 = 5;
                  continue;
                }
                int num5 = 0;
                goto label_15;
label_10:
                IEnumerator enumerator;
                flag2 = enumerator.MoveNext();
                num3 = 10;
                continue;
label_11:
                schemaSerializable.Write((Stream) memoryStream1);
                enumerator = _param0.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                goto label_10;
label_12:
                xmlSchema = (XmlSchema) enumerator.Current;
                num3 = 3;
                continue;
label_13:
                num5 = memoryStream1.ReadByte() == memoryStream2.ReadByte() ? 1 : 0;
label_15:
                if (num5 == 0)
                {
                  if (memoryStream1.Position == memoryStream1.Length)
                  {
                    num3 = 2;
                    continue;
                  }
                  goto label_10;
                }
                else
                  goto label_5;
label_19:
                memoryStream2.SetLength(0L);
                num3 = 4;
                continue;
label_20:
                memoryStream2.Position = 0L;
                goto label_5;
label_23:
                num3 = 1;
              }
label_9:
              schemaComplexType1 = schemaComplexType2;
              goto label_41;
            }
            finally
            {
              memoryStream1?.Close();
              memoryStream2?.Close();
            }
          case 4:
            xmlSchemaAny = new XmlSchemaAny();
            if (!a.\u0003())
            {
              num2 = 7;
              continue;
            }
            goto case 5;
          case 5:
            schemaSerializable = a.GetSchemaSerializable();
            flag1 = _param0.Contains(schemaSerializable.TargetNamespace);
            if (a.\u0002())
            {
              num2 = 1;
              continue;
            }
            goto label_39;
          case 7:
            goto label_36;
          case 8:
            schemaComplexType2.Particle = (XmlSchemaParticle) xmlSchemaSequence;
            goto case 5;
          case 9:
            memoryStream1 = new MemoryStream();
            memoryStream2 = new MemoryStream();
            if (a.\u0002())
            {
              num2 = 2;
              continue;
            }
            goto case 2;
          case 10:
            goto label_40;
          case 11:
            goto label_41;
          default:
            goto label_33;
        }
label_29:
        _param0.Add(schemaSerializable);
        schemaComplexType1 = schemaComplexType2;
        num2 = 11;
      }
label_33:
      num1 = 5;
      continue;
label_36:
      xmlSchemaAny.Namespace = a.Namespace;
      xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny);
      num1 = 8;
      continue;
label_39:
      a = new a();
      num1 = 10;
      continue;
label_40:
      schemaComplexType2 = new XmlSchemaComplexType();
      xmlSchemaSequence = new XmlSchemaSequence();
      num1 = 4;
    }
label_41:
    return schemaComplexType1;
  }

  internal static bool \u0002() => true;

  internal static bool \u0003() => false;

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  public sealed class \u0002 : EventArgs
  {
    private a.Manager \u0002;
    private DataRowAction \u0003;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0002(a.Manager _param1, DataRowAction _param2)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              if (a.\u0002.\u0002())
              {
                num2 = 3;
                continue;
              }
              goto case 2;
            case 2:
            case 4:
              this.\u0003 = _param2;
              num2 = 5;
              continue;
            case 3:
              this.\u0002 = _param1;
              goto case 2;
            case 5:
              goto label_8;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 4;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.Manager \u0002() => this.\u0002;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataRowAction \u0002() => this.\u0003;

    internal static bool \u0002() => true;

    internal static bool \u0003() => false;
  }

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  public delegate void \u0003(object _param1, a.\u0005 _param2);

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  public sealed class \u0005 : EventArgs
  {
    private a.ListClientReader \u0002;
    private DataRowAction \u0003;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0005(a.ListClientReader _param1, DataRowAction _param2)
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num = 4;
            continue;
          case 1:
          case 4:
            this.\u0002 = _param1;
            goto case 2;
          case 2:
            this.\u0003 = _param2;
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 2;
            continue;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.ListClientReader \u0002() => this.\u0002;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataRowAction \u0002() => this.\u0003;

    internal static bool \u0002() => true;

    internal static bool \u0003() => false;
  }

  [XmlSchemaProvider("GetTypedTableSchema")]
  [DefaultMember("Item")]
  [Serializable]
  public sealed class \u0006 : TypedTableBase<a.Manager>
  {
    private DataColumn \u0002;
    private DataColumn \u0003;
    private DataColumn \u0005;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u000E \u0008;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u000E \u0006;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u000E \u000E;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u000E \u000F;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0006()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_8;
            case 1:
              this.BeginInit();
              goto case 6;
            case 2:
              goto label_7;
            case 4:
            case 5:
              this.EndInit();
              num2 = 7;
              continue;
            case 6:
              this.\u0003();
              num2 = 5;
              continue;
            case 7:
              goto label_9;
            default:
              num2 = 6;
              continue;
          }
        }
label_7:
        this.TableName = \u0002\u2003.\u0002(-1094102465);
        num1 = 1;
        continue;
label_8:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        num1 = 2;
      }
label_9:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal \u0006(DataTable _param1)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              if (a.\u0006.\u0002())
              {
                num2 = 9;
                continue;
              }
              goto case 3;
            case 1:
              goto label_2;
            case 2:
              if (!flag)
                goto case 7;
              else
                goto label_16;
            case 3:
            case 6:
              this.Prefix = _param1.Prefix;
              if (a.\u0006.\u0002())
              {
                num2 = 1;
                continue;
              }
              goto case 2;
            case 5:
              this.Locale = _param1.Locale;
              goto case 7;
            case 7:
              if (_param1.Namespace != _param1.DataSet.Namespace)
              {
                this.Namespace = _param1.Namespace;
                num2 = 3;
                continue;
              }
              goto case 3;
            case 8:
              if (_param1.CaseSensitive != _param1.DataSet.CaseSensitive)
                this.CaseSensitive = _param1.CaseSensitive;
              flag = _param1.Locale.ToString() != _param1.DataSet.Locale.ToString();
              num2 = 2;
              continue;
            case 9:
              goto label_1;
            case 10:
              goto label_10;
            default:
              int num3 = 7;
              num2 = a.\u0006.\u0003() ? num3 : num3;
              continue;
          }
        }
label_1:
        this.TableName = _param1.TableName;
        num1 = 8;
        continue;
label_2:
        this.MinimumCapacity = _param1.MinimumCapacity;
        num1 = 10;
        continue;
label_16:
        num1 = 5;
      }
label_10:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected \u0006(SerializationInfo _param1, StreamingContext _param2)
      : base(_param1, _param2)
    {
      this.\u0002();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataColumn \u0002() => this.\u0002;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataColumn \u0003() => this.\u0003;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataColumn \u0005() => this.\u0005;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public int \u0002() => this.Rows.Count;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.Manager \u0002(int _param1) => (a.Manager) this.Rows[_param1];

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0002(a.\u000E _param1)
    {
      int num1 = 6;
      while (true)
      {
        a.\u000E obj1;
        a.\u000E comparand;
        int num2;
        a.\u000E obj2;
        switch (num1)
        {
          case 0:
            if (obj1 == comparand)
            {
              num1 = 7;
              continue;
            }
            goto case 1;
          case 1:
            comparand = obj1;
            num2 = 5;
            break;
          case 2:
          case 5:
            obj2 = comparand + _param1;
            goto case 3;
          case 3:
          case 4:
            obj1 = Interlocked.CompareExchange<a.\u000E>(ref this.\u0008, obj2, comparand);
            if (a.\u0006.\u0002())
            {
              num1 = 0;
              continue;
            }
            goto case 6;
          case 6:
            obj1 = this.\u0008;
            num2 = 1;
            break;
          case 7:
            goto label_10;
          default:
            num1 = 4;
            continue;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0003(a.\u000E _param1)
    {
      int num1 = 3;
      while (true)
      {
        a.\u000E obj1;
        a.\u000E comparand;
        int num2;
        a.\u000E obj2;
        switch (num1)
        {
          case 0:
          case 2:
            obj2 = comparand - _param1;
            goto case 4;
          case 1:
          case 5:
            comparand = obj1;
            num2 = 0;
            break;
          case 3:
            obj1 = this.\u0008;
            num2 = 5;
            break;
          case 4:
            obj1 = Interlocked.CompareExchange<a.\u000E>(ref this.\u0008, obj2, comparand);
            num1 = 6;
            continue;
          case 6:
            if (obj1 == comparand)
            {
              num2 = 7;
              break;
            }
            goto case 1;
          case 7:
            goto label_10;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0005(a.\u000E _param1)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        a.\u000E comparand;
        a.\u000E obj1;
        a.\u000E obj2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              obj2 = Interlocked.CompareExchange<a.\u000E>(ref this.\u0006, obj1, comparand);
              if (!a.\u0006.\u0003())
              {
                num2 = 2;
                continue;
              }
              goto label_8;
            case 1:
            case 6:
              goto label_6;
            case 2:
            case 4:
              goto label_8;
            case 3:
              obj1 = comparand + _param1;
              goto case 0;
            case 5:
              obj2 = this.\u0006;
              num2 = 6;
              continue;
            case 7:
              goto label_11;
            default:
              num2 = 0;
              continue;
          }
        }
label_6:
        comparand = obj2;
        num1 = 3;
        continue;
label_8:
        if (obj2 == comparand)
          num1 = 7;
        else
          goto label_6;
      }
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0008(a.\u000E _param1)
    {
      int num1 = 5;
      while (true)
      {
        a.\u000E obj1;
        a.\u000E comparand;
        int num2;
        a.\u000E obj2;
        switch (num1)
        {
          case 0:
          case 5:
            obj1 = this.\u0006;
            num2 = 2;
            break;
          case 1:
          case 3:
            obj1 = Interlocked.CompareExchange<a.\u000E>(ref this.\u0006, obj2, comparand);
            num2 = 6;
            break;
          case 2:
            comparand = obj1;
            num2 = 4;
            break;
          case 4:
            obj2 = comparand - _param1;
            goto case 1;
          case 6:
            if (obj1 == comparand)
            {
              num2 = 7;
              break;
            }
            goto case 2;
          case 7:
            goto label_10;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0006(a.\u000E _param1)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        a.\u000E obj1;
        a.\u000E comparand;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
              goto label_4;
            case 3:
              comparand = obj1;
              num2 = 5;
              continue;
            case 4:
            case 6:
              if (obj1 != comparand)
                goto case 3;
              else
                goto label_3;
            case 5:
              goto label_6;
            case 7:
              goto label_10;
            default:
              goto label_9;
          }
        }
label_1:
        obj1 = this.\u000E;
        num1 = 3;
        continue;
label_3:
        num1 = 7;
        continue;
label_4:
        a.\u000E obj2;
        obj1 = Interlocked.CompareExchange<a.\u000E>(ref this.\u000E, obj2, comparand);
        num1 = 6;
        continue;
label_6:
        obj2 = comparand + _param1;
        goto label_4;
label_9:
        num1 = 1;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u000E(a.\u000E _param1)
    {
      int num1 = 0;
      while (true)
      {
        a.\u000E obj1;
        a.\u000E comparand;
        int num2;
        a.\u000E obj2;
        switch (num1)
        {
          case 0:
            obj1 = this.\u000E;
            int num3 = 4;
            num1 = a.\u0006.\u0003() ? num3 : num3;
            continue;
          case 1:
          case 4:
            comparand = obj1;
            num2 = 6;
            break;
          case 2:
          case 6:
            obj2 = comparand - _param1;
            goto case 3;
          case 3:
            obj1 = Interlocked.CompareExchange<a.\u000E>(ref this.\u000E, obj2, comparand);
            num2 = 5;
            break;
          case 5:
            if (obj1 == comparand)
            {
              num2 = 7;
              break;
            }
            goto case 1;
          case 7:
            goto label_10;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u000F(a.\u000E _param1)
    {
      int num = 2;
      if (a.\u0006.\u0002())
        goto label_2;
label_1:
      a.\u000E comparand;
      a.\u000E obj1 = comparand + _param1;
      goto label_8;
label_2:
      a.\u000E obj2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            obj2 = this.\u000F;
            num = 4;
            continue;
          case 1:
          case 4:
            comparand = obj2;
            num = 5;
            continue;
          case 3:
            if (obj2 == comparand)
            {
              num = 7;
              continue;
            }
            goto case 1;
          case 5:
            goto label_1;
          case 6:
            goto label_8;
          case 7:
            goto label_9;
          default:
            num = 6;
            continue;
        }
      }
label_9:
      return;
label_8:
      obj2 = Interlocked.CompareExchange<a.\u000E>(ref this.\u000F, obj1, comparand);
      num = 3;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0002\u2000(a.\u000E _param1)
    {
      int num1 = 5;
      while (true)
      {
        a.\u000E obj1;
        a.\u000E comparand;
        a.\u000E obj2;
        int num2;
        switch (num1)
        {
          case 0:
          case 5:
            obj2 = this.\u000F;
            num1 = 3;
            continue;
          case 1:
            obj1 = comparand - _param1;
            goto case 6;
          case 2:
          case 4:
            if (obj2 == comparand)
            {
              num2 = 7;
              break;
            }
            goto case 3;
          case 3:
            comparand = obj2;
            if (a.\u0006.\u0002())
            {
              num1 = 1;
              continue;
            }
            goto case 1;
          case 6:
            obj2 = Interlocked.CompareExchange<a.\u000E>(ref this.\u000F, obj1, comparand);
            num2 = 2;
            break;
          case 7:
            goto label_10;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0002(a.Manager _param1) => this.Rows.Add((DataRow) _param1);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.Manager \u0002(string _param1, string _param2, string _param3)
    {
      int num1 = 0;
      a.Manager manager;
      while (true)
      {
        int num2 = num1;
        a.Manager row;
        object[] objArray;
        while (true)
        {
          switch (num2)
          {
            case 0:
              row = (a.Manager) this.NewRow();
              num2 = 5;
              continue;
            case 1:
            case 2:
              row.ItemArray = objArray;
              goto case 3;
            case 3:
            case 4:
              this.Rows.Add((DataRow) row);
              int num3 = 6;
              num2 = a.\u0006.\u0003() ? num3 : num3;
              continue;
            case 5:
              goto label_2;
            case 6:
              goto label_1;
            case 7:
              goto label_9;
            default:
              goto label_8;
          }
        }
label_1:
        manager = row;
        num1 = 7;
        continue;
label_2:
        objArray = new object[3]
        {
          (object) _param1,
          (object) _param2,
          (object) _param3
        };
        num1 = 1;
        continue;
label_8:
        num1 = 4;
      }
label_9:
      return manager;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override DataTable Clone()
    {
      int num = 3;
      if (a.\u0006.\u0003())
        ;
      a.\u0006 obj;
      DataTable dataTable;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            obj = (a.\u0006) base.Clone();
            num = 2;
            continue;
          case 1:
          case 2:
            obj.\u0002();
            goto case 4;
          case 4:
            dataTable = (DataTable) obj;
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 4;
            continue;
        }
      }
label_6:
      return dataTable;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override DataTable CreateInstance() => (DataTable) new a.\u0006();

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0002()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_6;
            case 1:
            case 4:
              goto label_1;
            case 3:
              this.\u0002 = this.Columns[\u0002\u2003.\u0002(-1094102170)];
              if (a.\u0006.\u0002())
              {
                num2 = 4;
                continue;
              }
              goto label_6;
            case 5:
              goto label_7;
            default:
              goto label_4;
          }
        }
label_1:
        this.\u0003 = this.Columns[\u0002\u2003.\u0002(-1094102188)];
        goto label_6;
label_4:
        num1 = 0;
        continue;
label_6:
        this.\u0005 = this.Columns[\u0002\u2003.\u0002(-1094102264)];
        num1 = 5;
      }
label_7:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0003()
    {
      int num1 = 6;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            this.Columns.Add(this.\u0005);
            num1 = 7;
            continue;
          case 1:
          case 2:
            this.\u0003 = new DataColumn(\u0002\u2003.\u0002(-1094102188), typeof (string), (string) null, MappingType.Element);
            this.Columns.Add(this.\u0003);
            goto case 5;
          case 3:
            this.Columns.Add(this.\u0002);
            if (a.\u0006.\u0002())
            {
              num1 = 1;
              continue;
            }
            goto case 6;
          case 5:
            this.\u0005 = new DataColumn(\u0002\u2003.\u0002(-1094102264), typeof (string), (string) null, MappingType.Element);
            int num2 = 0;
            num1 = a.\u0006.\u0003() ? num2 : num2;
            continue;
          case 6:
            this.\u0002 = new DataColumn(\u0002\u2003.\u0002(-1094102170), typeof (string), (string) null, MappingType.Element);
            int num3 = 3;
            num1 = a.\u0006.\u0003() ? num3 : num3;
            continue;
          case 7:
            goto label_8;
          default:
            num1 = 5;
            continue;
        }
      }
label_8:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.Manager \u0002() => (a.Manager) this.NewRow();

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override DataRow NewRowFromBuilder(DataRowBuilder _param1) => (DataRow) new a.Manager(_param1);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override Type GetRowType() => typeof (a.Manager);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowChanged(DataRowChangeEventArgs _param1)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              base.OnRowChanged(_param1);
              num2 = 2;
              continue;
            case 1:
              goto label_4;
            case 2:
              goto label_3;
            case 3:
            case 5:
              goto label_2;
            case 6:
              goto label_9;
            default:
              goto label_8;
          }
        }
label_2:
        this.\u0006((object) this, new a.\u0002((a.Manager) _param1.Row, _param1.Action));
        num1 = 6;
        continue;
label_3:
        bool flag = this.\u0006 != null;
        num1 = 1;
        continue;
label_4:
        if (!flag)
          break;
        goto label_2;
label_8:
        num1 = 5;
      }
      return;
label_9:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowChanging(DataRowChangeEventArgs _param1)
    {
      int num1 = 0;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
            base.OnRowChanging(_param1);
            num2 = 4;
            break;
          case 1:
          case 2:
            if (!flag)
              goto label_5;
            else
              goto case 3;
          case 3:
          case 5:
            this.\u0008((object) this, new a.\u0002((a.Manager) _param1.Row, _param1.Action));
            num1 = 6;
            continue;
          case 4:
            flag = this.\u0008 != null;
            num2 = 1;
            break;
          case 6:
            goto label_9;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_5:
      return;
label_9:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowDeleted(DataRowChangeEventArgs _param1)
    {
      int num = 4;
      if (a.\u0006.\u0003())
        ;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            this.\u000F((object) this, new a.\u0002((a.Manager) _param1.Row, _param1.Action));
            num = 6;
            continue;
          case 1:
          case 2:
            if (!flag)
              goto label_3;
            else
              goto case 0;
          case 4:
            base.OnRowDeleted(_param1);
            if (a.\u0006.\u0002())
            {
              num = 5;
              continue;
            }
            goto label_9;
          case 5:
            flag = this.\u000F != null;
            num = 1;
            continue;
          case 6:
            goto label_1;
          default:
            num = 0;
            continue;
        }
      }
label_3:
      return;
label_1:
      return;
label_9:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowDeleting(DataRowChangeEventArgs _param1)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              base.OnRowDeleting(_param1);
              num2 = 1;
              continue;
            case 1:
              goto label_7;
            case 2:
            case 4:
              if (!flag)
                goto label_3;
              else
                goto case 3;
            case 3:
              this.\u000E((object) this, new a.\u0002((a.Manager) _param1.Row, _param1.Action));
              num2 = 6;
              continue;
            case 6:
              goto label_9;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 3;
        continue;
label_7:
        flag = this.\u000E != null;
        num1 = 4;
      }
label_3:
      return;
label_9:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0003(a.Manager _param1) => this.Rows.Remove((DataRow) _param1);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static XmlSchemaComplexType \u0002(XmlSchemaSet _param0)
    {
      int num1 = 6;
      XmlSchemaComplexType schemaComplexType1;
      while (true)
      {
        int num2 = num1;
        a a;
        XmlSchema schemaSerializable;
        bool flag;
        XmlSchemaComplexType schemaComplexType2;
        XmlSchemaAny xmlSchemaAny1;
        XmlSchemaAttribute xmlSchemaAttribute1;
        XmlSchemaAttribute xmlSchemaAttribute2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_41;
            case 1:
              schemaSerializable = a.GetSchemaSerializable();
              flag = _param0.Contains(schemaSerializable.TargetNamespace);
              num2 = 15;
              continue;
            case 2:
            case 8:
              a = new a();
              xmlSchemaAny1 = new XmlSchemaAny();
              xmlSchemaAny1.Namespace = \u0002\u2003.\u0002(-1094102060);
              num2 = 11;
              continue;
            case 3:
            case 9:
              goto label_34;
            case 4:
              goto label_29;
            case 5:
              goto label_43;
            case 6:
              schemaComplexType2 = new XmlSchemaComplexType();
              if (!a.\u0006.\u0003())
              {
                num2 = 12;
                continue;
              }
              goto label_32;
            case 7:
              schemaComplexType1 = schemaComplexType2;
              if (a.\u0006.\u0002())
              {
                num2 = 18;
                continue;
              }
              goto case 11;
            case 10:
              goto label_2;
            case 11:
              xmlSchemaAny1.MinOccurs = 0M;
              xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
              num2 = 4;
              continue;
            case 12:
              goto label_32;
            case 13:
              goto label_35;
            case 14:
              goto label_42;
            case 15:
              goto label_44;
            case 16:
              xmlSchemaAttribute2.Name = \u0002\u2003.\u0002(-1094102126);
              xmlSchemaAttribute2.FixedValue = a.Namespace;
              schemaComplexType2.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute2);
              xmlSchemaAttribute1 = new XmlSchemaAttribute();
              num2 = 13;
              continue;
            case 17:
              goto label_33;
            case 18:
              goto label_47;
            default:
              num2 = 3;
              continue;
          }
        }
label_2:
        MemoryStream memoryStream1;
        MemoryStream memoryStream2;
        try
        {
          XmlSchema xmlSchema = (XmlSchema) null;
          int num3 = 1;
          while (true)
          {
            IEnumerator enumerator;
            int num4;
            switch (num3)
            {
              case 0:
              case 1:
label_7:
                schemaSerializable.Write((Stream) memoryStream1);
                num3 = 7;
                continue;
              case 2:
              case 5:
                memoryStream2.Position = 0L;
                goto label_16;
              case 3:
                goto label_18;
              case 4:
                xmlSchema.Write((Stream) memoryStream2);
                if (memoryStream1.Length == memoryStream2.Length)
                {
                  memoryStream1.Position = 0L;
                  goto case 2;
                }
                else
                  goto case 6;
              case 6:
                if (enumerator.MoveNext())
                {
                  xmlSchema = (XmlSchema) enumerator.Current;
                  if (!a.\u0006.\u0003())
                  {
                    num3 = 8;
                    continue;
                  }
                  goto case 8;
                }
                else
                {
                  num3 = 11;
                  continue;
                }
              case 7:
                enumerator = _param0.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                num3 = 6;
                continue;
              case 8:
                memoryStream2.SetLength(0L);
                num3 = 4;
                continue;
              case 9:
                num4 = memoryStream1.ReadByte() == memoryStream2.ReadByte() ? 1 : 0;
                break;
              case 10:
                if (memoryStream1.Position == memoryStream1.Length)
                {
                  if (a.\u0006.\u0002())
                  {
                    num3 = 3;
                    continue;
                  }
                  goto label_28;
                }
                else
                  goto case 6;
              case 11:
                goto label_28;
              default:
                num3 = 2;
                continue;
            }
label_5:
            if (num4 == 0)
            {
              if (a.\u0006.\u0002())
              {
                num3 = 10;
                continue;
              }
              goto label_7;
            }
label_16:
            if (memoryStream1.Position == memoryStream1.Length)
            {
              num4 = 0;
              goto label_5;
            }
            else if (a.\u0006.\u0002())
              num3 = 9;
            else
              break;
          }
label_18:
          schemaComplexType1 = schemaComplexType2;
          break;
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
label_28:
        _param0.Add(schemaSerializable);
        num1 = 7;
        continue;
label_29:
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        num1 = 14;
        continue;
label_32:
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        num1 = 8;
        continue;
label_33:
        memoryStream1 = new MemoryStream();
        num1 = 0;
        continue;
label_34:
        schemaComplexType2.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute1);
        schemaComplexType2.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        num1 = 1;
        continue;
label_35:
        xmlSchemaAttribute1.Name = \u0002\u2003.\u0002(-1094102142);
        xmlSchemaAttribute1.FixedValue = \u0002\u2003.\u0002(-1094102483);
        goto label_34;
label_41:
        memoryStream2 = new MemoryStream();
        num1 = 10;
        continue;
label_42:
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = \u0002\u2003.\u0002(-1094102206);
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        num1 = 5;
        continue;
label_43:
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        xmlSchemaAttribute2 = new XmlSchemaAttribute();
        num1 = 16;
        continue;
label_44:
        if (flag)
          num1 = 17;
        else
          goto label_28;
      }
label_47:
      return schemaComplexType1;
    }

    internal static bool \u0002() => true;

    internal static bool \u0003() => false;
  }

  [DefaultMember("Item")]
  [XmlSchemaProvider("GetTypedTableSchema")]
  [Serializable]
  public sealed class \u0008 : TypedTableBase<a.ListClientReader>
  {
    private DataColumn \u0002;
    private DataColumn \u0003;
    private DataColumn \u0005;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u0003 \u0008;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u0003 \u0006;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u0003 \u000E;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private a.\u0003 \u000F;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0008()
    {
      int num1 = 2;
      if (!a.\u0008.\u0003())
        goto label_6;
label_1:
      this.EndInit();
      int num2 = 7;
label_5:
      num1 = num2;
label_6:
      switch (num1)
      {
        case 0:
        case 2:
          // ISSUE: explicit constructor call
          base.\u002Ector();
          num2 = 3;
          goto label_5;
        case 1:
        case 3:
          this.TableName = \u0002\u2003.\u0002(-1094102245);
          num2 = 6;
          goto label_5;
        case 4:
          this.\u0003();
          num2 = 5;
          goto label_5;
        case 5:
          goto label_1;
        case 6:
          this.BeginInit();
          goto case 4;
        case 7:
          break;
        default:
          num2 = 4;
          goto label_5;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal \u0008(DataTable _param1)
    {
      int num1 = 8;
      while (true)
      {
        int num2;
        bool flag1;
        bool flag2;
        switch (num1)
        {
          case 0:
          case 7:
            this.Prefix = _param1.Prefix;
            this.MinimumCapacity = _param1.MinimumCapacity;
            num2 = 10;
            break;
          case 1:
            this.TableName = _param1.TableName;
            num1 = 3;
            continue;
          case 2:
            if (flag2)
            {
              this.Locale = _param1.Locale;
              if (a.\u0008.\u0002())
              {
                num1 = 5;
                continue;
              }
              goto case 1;
            }
            else
              goto case 5;
          case 3:
            if (_param1.CaseSensitive != _param1.DataSet.CaseSensitive)
              this.CaseSensitive = _param1.CaseSensitive;
            flag2 = _param1.Locale.ToString() != _param1.DataSet.Locale.ToString();
            num1 = 2;
            continue;
          case 4:
          case 6:
            this.Namespace = _param1.Namespace;
            num2 = 0;
            break;
          case 5:
            flag1 = _param1.Namespace != _param1.DataSet.Namespace;
            goto case 9;
          case 8:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num2 = 1;
            break;
          case 9:
            if (flag1)
            {
              num2 = 4;
              break;
            }
            goto case 0;
          case 10:
            goto label_16;
          default:
            num1 = 9;
            continue;
        }
        num1 = num2;
      }
label_16:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected \u0008(SerializationInfo _param1, StreamingContext _param2)
      : base(_param1, _param2)
    {
      this.\u0002();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataColumn \u0002() => this.\u0002;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataColumn \u0003() => this.\u0003;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DataColumn \u0005() => this.\u0005;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public int \u0002() => this.Rows.Count;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.ListClientReader \u0002(int _param1) => (a.ListClientReader) this.Rows[_param1];

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0002(a.\u0003 _param1)
    {
      int num = 4;
      a.\u0003 comparand;
      a.\u0003 obj1;
      a.\u0003 obj2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            obj2 = this.\u0008;
            num = 2;
            continue;
          case 1:
          case 2:
            comparand = obj2;
            num = 6;
            continue;
          case 3:
            if (obj2 == comparand)
            {
              num = 7;
              continue;
            }
            goto case 1;
          case 5:
            obj2 = Interlocked.CompareExchange<a.\u0003>(ref this.\u0008, obj1, comparand);
            num = 3;
            continue;
          case 6:
            obj1 = comparand + _param1;
            goto case 5;
          case 7:
            goto label_9;
          default:
            num = 5;
            continue;
        }
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0003(a.\u0003 _param1)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        a.\u0003 obj1;
        a.\u0003 comparand;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              if (obj1 == comparand)
              {
                if (a.\u0008.\u0002())
                {
                  num2 = 7;
                  continue;
                }
                goto label_10;
              }
              else
                goto case 6;
            case 1:
            case 3:
              goto label_2;
            case 2:
              goto label_3;
            case 5:
              goto label_1;
            case 6:
              comparand = obj1;
              num2 = 2;
              continue;
            case 7:
              goto label_11;
            default:
              num2 = 1;
              continue;
          }
        }
label_1:
        obj1 = this.\u0008;
        num1 = 6;
        continue;
label_2:
        a.\u0003 obj2;
        obj1 = Interlocked.CompareExchange<a.\u0003>(ref this.\u0008, obj2, comparand);
        num1 = 0;
        continue;
label_3:
        obj2 = comparand - _param1;
        goto label_2;
      }
label_11:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0005(a.\u0003 _param1)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        a.\u0003 obj1;
        a.\u0003 comparand;
        a.\u0003 obj2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              obj2 = this.\u0006;
              num2 = 5;
              continue;
            case 1:
            case 5:
              goto label_2;
            case 2:
              obj1 = comparand + _param1;
              goto case 6;
            case 3:
              if (obj2 == comparand)
              {
                num2 = 7;
                continue;
              }
              goto label_2;
            case 6:
              obj2 = Interlocked.CompareExchange<a.\u0003>(ref this.\u0006, obj1, comparand);
              num2 = 3;
              continue;
            case 7:
              goto label_10;
            default:
              goto label_7;
          }
        }
label_2:
        comparand = obj2;
        num1 = 2;
        continue;
label_7:
        num1 = 6;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0008(a.\u0003 _param1)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        a.\u0003 comparand;
        a.\u0003 obj1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_9;
            case 1:
            case 4:
              comparand = obj1;
              num2 = 2;
              continue;
            case 2:
              goto label_1;
            case 5:
              if (obj1 != comparand)
                goto case 1;
              else
                goto label_6;
            case 6:
              goto label_7;
            case 7:
              goto label_10;
            default:
              goto label_4;
          }
        }
label_1:
        a.\u0003 obj2 = comparand - _param1;
        goto label_7;
label_4:
        num1 = 6;
        continue;
label_6:
        num1 = 7;
        continue;
label_7:
        obj1 = Interlocked.CompareExchange<a.\u0003>(ref this.\u0006, obj2, comparand);
        num1 = 5;
        continue;
label_9:
        obj1 = this.\u0006;
        num1 = 4;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0006(a.\u0003 _param1)
    {
      int num1 = 6;
      if (a.\u0008.\u0003())
        ;
      while (true)
      {
        a.\u0003 obj1;
        a.\u0003 comparand;
        int num2;
        a.\u0003 obj2;
        switch (num1)
        {
          case 0:
          case 6:
            obj1 = this.\u000E;
            num1 = 1;
            continue;
          case 1:
            comparand = obj1;
            num2 = 5;
            break;
          case 2:
          case 5:
            obj2 = comparand + _param1;
            goto case 4;
          case 3:
            if (obj1 == comparand)
            {
              num2 = 7;
              break;
            }
            goto case 1;
          case 4:
            obj1 = Interlocked.CompareExchange<a.\u0003>(ref this.\u000E, obj2, comparand);
            if (a.\u0008.\u0002())
            {
              num1 = 3;
              continue;
            }
            goto label_11;
          case 7:
            goto label_1;
          default:
            num1 = 4;
            continue;
        }
        num1 = num2;
      }
label_1:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u000E(a.\u0003 _param1)
    {
      int num1 = 4;
      while (true)
      {
        a.\u0003 comparand;
        a.\u0003 obj1;
        int num2;
        a.\u0003 obj2;
        switch (num1)
        {
          case 0:
            obj1 = comparand - _param1;
            goto case 2;
          case 1:
          case 6:
            comparand = obj2;
            if (a.\u0008.\u0002())
            {
              num1 = 0;
              continue;
            }
            goto case 4;
          case 2:
          case 3:
            obj2 = Interlocked.CompareExchange<a.\u0003>(ref this.\u000E, obj1, comparand);
            num1 = 5;
            continue;
          case 4:
            obj2 = this.\u000E;
            num1 = 6;
            continue;
          case 5:
            if (obj2 == comparand)
            {
              num2 = 7;
              break;
            }
            goto case 1;
          case 7:
            goto label_10;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u000F(a.\u0003 _param1)
    {
      int num1 = 5;
      while (true)
      {
        a.\u0003 obj1;
        a.\u0003 comparand;
        a.\u0003 obj2;
        int num2;
        switch (num1)
        {
          case 0:
          case 5:
            obj1 = this.\u000F;
            num1 = 2;
            continue;
          case 1:
          case 2:
            comparand = obj1;
            num2 = 4;
            break;
          case 3:
            obj1 = Interlocked.CompareExchange<a.\u0003>(ref this.\u000F, obj2, comparand);
            num2 = 6;
            break;
          case 4:
            obj2 = comparand + _param1;
            goto case 3;
          case 6:
            if (obj1 == comparand)
            {
              int num3 = 7;
              num1 = a.\u0008.\u0003() ? num3 : num3;
              continue;
            }
            goto case 1;
          case 7:
            goto label_3;
          default:
            num1 = 3;
            continue;
        }
        num1 = num2;
      }
label_3:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0002\u2000(a.\u0003 _param1)
    {
      int num1 = 5;
      while (true)
      {
        a.\u0003 comparand;
        a.\u0003 obj1;
        int num2;
        a.\u0003 obj2;
        switch (num1)
        {
          case 0:
          case 5:
            obj2 = this.\u000F;
            num2 = 2;
            break;
          case 1:
            obj1 = comparand - _param1;
            goto case 3;
          case 2:
            comparand = obj2;
            num1 = 1;
            continue;
          case 3:
            obj2 = Interlocked.CompareExchange<a.\u0003>(ref this.\u000F, obj1, comparand);
            num2 = 6;
            break;
          case 4:
          case 6:
            if (obj2 == comparand)
            {
              num2 = 7;
              break;
            }
            goto case 2;
          case 7:
            goto label_10;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0002(a.ListClientReader _param1) => this.Rows.Add((DataRow) _param1);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.ListClientReader \u0002(string _param1, string _param2, string _param3)
    {
      int num1 = 1;
      if (a.\u0008.\u0002())
        goto label_4;
label_1:
      a.ListClientReader row;
      a.ListClientReader listClientReader = row;
      num1 = 7;
label_4:
      while (true)
      {
        object[] objArray;
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            row.ItemArray = objArray;
            goto case 3;
          case 1:
            row = (a.ListClientReader) this.NewRow();
            num2 = 5;
            break;
          case 3:
          case 6:
            this.Rows.Add((DataRow) row);
            num2 = 4;
            break;
          case 4:
            goto label_1;
          case 5:
            objArray = new object[3]
            {
              (object) _param1,
              (object) _param2,
              (object) _param3
            };
            num1 = 0;
            continue;
          case 7:
            goto label_9;
          default:
            num1 = 6;
            continue;
        }
        num1 = num2;
      }
label_9:
      return listClientReader;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override DataTable Clone()
    {
      int num1 = 3;
      DataTable dataTable;
      while (true)
      {
        int num2 = num1;
        a.\u0008 obj;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              obj = (a.\u0008) base.Clone();
              num2 = 4;
              continue;
            case 1:
            case 4:
              obj.\u0002();
              goto case 2;
            case 2:
              dataTable = (DataTable) obj;
              num2 = 5;
              continue;
            case 5:
              goto label_7;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 2;
      }
label_7:
      return dataTable;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override DataTable CreateInstance() => (DataTable) new a.\u0008();

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0002()
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.\u0002 = this.Columns[\u0002\u2003.\u0002(-1094102170)];
              num2 = 4;
              continue;
            case 1:
            case 4:
              goto label_3;
            case 2:
            case 3:
              goto label_1;
            case 5:
              goto label_7;
            default:
              int num3 = 3;
              num2 = a.\u0008.\u0003() ? num3 : num3;
              continue;
          }
        }
label_1:
        this.\u0005 = this.Columns[\u0002\u2003.\u0002(-1094102264)];
        num1 = 5;
        continue;
label_3:
        this.\u0003 = this.Columns[\u0002\u2003.\u0002(-1094102188)];
        goto label_1;
      }
label_7:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0003()
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              this.Columns.Add(this.\u0002);
              num2 = 5;
              continue;
            case 2:
            case 5:
              goto label_3;
            case 3:
              goto label_2;
            case 4:
              goto label_8;
            case 6:
              this.\u0002 = new DataColumn(\u0002\u2003.\u0002(-1094102170), typeof (string), (string) null, MappingType.Element);
              num2 = 0;
              continue;
            case 7:
              goto label_9;
            default:
              num2 = 4;
              continue;
          }
        }
label_2:
        this.Columns.Add(this.\u0005);
        num1 = 7;
        continue;
label_3:
        this.\u0003 = new DataColumn(\u0002\u2003.\u0002(-1094102188), typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.\u0003);
label_8:
        this.\u0005 = new DataColumn(\u0002\u2003.\u0002(-1094102264), typeof (string), (string) null, MappingType.Element);
        num1 = 3;
      }
label_9:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public a.ListClientReader \u0002() => (a.ListClientReader) this.NewRow();

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override DataRow NewRowFromBuilder(DataRowBuilder _param1) => (DataRow) new a.ListClientReader(_param1);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override Type GetRowType() => typeof (a.ListClientReader);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowChanged(DataRowChangeEventArgs _param1)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              base.OnRowChanged(_param1);
              num2 = 5;
              continue;
            case 1:
              this.\u0006((object) this, new a.\u0005((a.ListClientReader) _param1.Row, _param1.Action));
              num2 = 6;
              continue;
            case 2:
            case 4:
              if (!flag)
                goto label_4;
              else
                goto case 1;
            case 5:
              flag = this.\u0006 != null;
              num2 = 4;
              continue;
            case 6:
              goto label_9;
            default:
              goto label_7;
          }
        }
label_7:
        num1 = 1;
      }
label_4:
      return;
label_9:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowChanging(DataRowChangeEventArgs _param1)
    {
      int num1 = 3;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            flag = this.\u0008 != null;
            num2 = 4;
            break;
          case 2:
          case 4:
            if (!flag)
              goto label_3;
            else
              goto case 5;
          case 3:
            base.OnRowChanging(_param1);
            if (a.\u0008.\u0002())
            {
              num1 = 0;
              continue;
            }
            goto case 2;
          case 5:
            this.\u0008((object) this, new a.\u0005((a.ListClientReader) _param1.Row, _param1.Action));
            num2 = 6;
            break;
          case 6:
            goto label_9;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_3:
      return;
label_9:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowDeleted(DataRowChangeEventArgs _param1)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 3:
            base.OnRowDeleted(_param1);
            num1 = 4;
            continue;
          case 1:
            this.\u000F((object) this, new a.\u0005((a.ListClientReader) _param1.Row, _param1.Action));
            num2 = 6;
            break;
          case 2:
          case 5:
            if (!flag)
              goto label_4;
            else
              goto case 1;
          case 4:
            flag = this.\u000F != null;
            num2 = 5;
            break;
          case 6:
            goto label_9;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_4:
      return;
label_9:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnRowDeleting(DataRowChangeEventArgs _param1)
    {
      int num = 1;
      if (a.\u0008.\u0002())
        goto label_6;
label_1:
      base.OnRowDeleting(_param1);
      num = 4;
label_6:
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            goto label_1;
          case 2:
          case 3:
            if (!flag)
              goto label_5;
            else
              goto case 5;
          case 4:
            flag = this.\u000E != null;
            num = 3;
            continue;
          case 5:
            this.\u000E((object) this, new a.\u0005((a.ListClientReader) _param1.Row, _param1.Action));
            num = 6;
            continue;
          case 6:
            goto label_8;
          default:
            num = 5;
            continue;
        }
      }
label_5:
      return;
label_8:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void \u0003(a.ListClientReader _param1) => this.Rows.Remove((DataRow) _param1);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static XmlSchemaComplexType \u0002(XmlSchemaSet _param0)
    {
      int num1 = 5;
      XmlSchemaComplexType schemaComplexType1;
      while (true)
      {
        XmlSchemaAny xmlSchemaAny1;
        int num2;
        XmlSchemaAttribute xmlSchemaAttribute1;
        a a;
        XmlSchemaComplexType schemaComplexType2;
        XmlSchemaSequence xmlSchemaSequence;
        XmlSchemaAttribute xmlSchemaAttribute2;
        XmlSchemaAny xmlSchemaAny2;
        switch (num1)
        {
          case 0:
            schemaComplexType2.Particle = (XmlSchemaParticle) xmlSchemaSequence;
            XmlSchema schemaSerializable = a.GetSchemaSerializable();
            if (_param0.Contains(schemaSerializable.TargetNamespace))
            {
              MemoryStream memoryStream1 = new MemoryStream();
              MemoryStream memoryStream2 = new MemoryStream();
              try
              {
                XmlSchema xmlSchema = (XmlSchema) null;
                int num3 = 3;
                if (!a.\u0008.\u0003())
                  goto label_8;
label_6:
                memoryStream1.Position = 0L;
                goto label_24;
label_7:
                int num4;
                num3 = num4;
label_8:
                IEnumerator enumerator;
                while (true)
                {
                  bool flag;
                  switch (num3)
                  {
                    case 0:
                    case 1:
                      goto label_14;
                    case 2:
                      goto label_20;
                    case 3:
                      schemaSerializable.Write((Stream) memoryStream1);
                      enumerator = _param0.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                      break;
                    case 4:
                      goto label_6;
                    case 5:
                      flag = memoryStream1.Length == memoryStream2.Length;
                      num3 = 6;
                      continue;
                    case 6:
                      if (!flag)
                        break;
                      goto label_16;
                    case 7:
                      if (memoryStream1.Position == memoryStream1.Length)
                      {
                        schemaComplexType1 = schemaComplexType2;
                        if (!a.\u0008.\u0003())
                        {
                          num3 = 9;
                          continue;
                        }
                        goto label_49;
                      }
                      else
                        break;
                    case 8:
                    case 9:
                      goto label_49;
                    case 10:
                      goto label_24;
                    case 11:
                      goto label_32;
                    default:
                      num3 = 10;
                      continue;
                  }
                  if (!enumerator.MoveNext())
                  {
                    int num5 = 11;
                    num3 = a.\u0008.\u0003() ? num5 : num5;
                  }
                  else
                    goto label_18;
                }
label_14:
                memoryStream2.SetLength(0L);
                xmlSchema.Write((Stream) memoryStream2);
                num4 = 5;
                goto label_7;
label_16:
                num4 = 4;
                goto label_7;
label_18:
                xmlSchema = (XmlSchema) enumerator.Current;
                num4 = 0;
                goto label_7;
label_20:
                int num6 = memoryStream1.ReadByte() == memoryStream2.ReadByte() ? 1 : 0;
label_22:
                if (num6 == 0)
                {
                  num4 = 7;
                  goto label_7;
                }
                else
                  goto label_25;
label_24:
                memoryStream2.Position = 0L;
label_25:
                if (memoryStream1.Position == memoryStream1.Length)
                {
                  num6 = 0;
                  goto label_22;
                }
                else
                {
                  num4 = 2;
                  goto label_7;
                }
              }
              finally
              {
                memoryStream1?.Close();
                memoryStream2?.Close();
              }
            }
label_32:
            _param0.Add(schemaSerializable);
            schemaComplexType1 = schemaComplexType2;
            num1 = 18;
            continue;
          case 1:
          case 11:
            xmlSchemaSequence = new XmlSchemaSequence();
            num2 = 4;
            break;
          case 2:
            xmlSchemaAttribute2.Name = \u0002\u2003.\u0002(-1094102142);
            num1 = 6;
            continue;
          case 3:
          case 7:
            xmlSchemaAny1 = new XmlSchemaAny();
            xmlSchemaAny1.Namespace = \u0002\u2003.\u0002(-1094102206);
            num2 = 17;
            break;
          case 4:
            a = new a();
            xmlSchemaAny2 = new XmlSchemaAny();
            num1 = 8;
            continue;
          case 5:
            schemaComplexType2 = new XmlSchemaComplexType();
            num1 = 11;
            continue;
          case 6:
            xmlSchemaAttribute2.FixedValue = \u0002\u2003.\u0002(-1094102018);
            num1 = 10;
            continue;
          case 8:
            xmlSchemaAny2.Namespace = \u0002\u2003.\u0002(-1094102060);
            xmlSchemaAny2.MinOccurs = 0M;
            if (!a.\u0008.\u0003())
            {
              num1 = 16;
              continue;
            }
            goto label_49;
          case 9:
            xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
            if (!a.\u0008.\u0003())
            {
              num1 = 14;
              continue;
            }
            goto case 1;
          case 10:
            schemaComplexType2.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute2);
            num2 = 0;
            break;
          case 12:
            xmlSchemaAttribute1 = new XmlSchemaAttribute();
            xmlSchemaAttribute1.Name = \u0002\u2003.\u0002(-1094102126);
            xmlSchemaAttribute1.FixedValue = a.Namespace;
            num2 = 15;
            break;
          case 13:
            xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
            num1 = 12;
            continue;
          case 14:
            xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
            num2 = 3;
            break;
          case 15:
            schemaComplexType2.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute1);
            xmlSchemaAttribute2 = new XmlSchemaAttribute();
            if (a.\u0008.\u0002())
            {
              num1 = 2;
              continue;
            }
            goto case 9;
          case 16:
            xmlSchemaAny2.MaxOccurs = Decimal.MaxValue;
            num2 = 9;
            break;
          case 17:
            xmlSchemaAny1.MinOccurs = 1M;
            xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
            goto case 13;
          case 18:
            goto label_49;
          default:
            num1 = 13;
            continue;
        }
        num1 = num2;
      }
label_49:
      return schemaComplexType1;
    }

    internal static bool \u0002() => true;

    internal static bool \u0003() => false;
  }

  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
  public delegate void \u000E(object _param1, a.\u0002 _param2);

  public class ListClientReader : DataRow
  {
    private a.\u0008 \u0002;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal ListClientReader(DataRowBuilder _param1)
      : base(_param1)
    {
      this.\u0002 = (a.\u0008) this.Table;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public string DataColumn1
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return (string) this[this.\u0002.\u0002()];
        }
        catch (InvalidCastException ex)
        {
          throw new StrongTypingException(\u0002\u2003.\u0002(-1094103720), (Exception) ex);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] set => this[this.\u0002.\u0002()] = (object) value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public string DataColumn2
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return (string) this[this.\u0002.\u0003()];
        }
        catch (InvalidCastException ex)
        {
          throw new StrongTypingException(\u0002\u2003.\u0002(-1094103666), (Exception) ex);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] set => this[this.\u0002.\u0003()] = (object) value;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public string DataColumn3
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return (string) this[this.\u0002.\u0005()];
        }
        catch (InvalidCastException ex)
        {
          throw new StrongTypingException(\u0002\u2003.\u0002(-1094104012), (Exception) ex);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] set => this[this.\u0002.\u0005()] = (object) value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool SortCustomer() => this.IsNull(this.\u0002.\u0002());

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void StopCustomer() => this[this.\u0002.\u0002()] = Convert.DBNull;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool PopCustomer() => this.IsNull(this.\u0002.\u0003());

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ChangeCustomer() => this[this.\u0002.\u0003()] = Convert.DBNull;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CountCustomer() => this.IsNull(this.\u0002.\u0005());

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void WriteCustomer() => this[this.\u0002.\u0005()] = Convert.DBNull;

    internal static bool \u0002() => true;

    internal static bool \u0003() => false;
  }

  public class Manager : DataRow
  {
    private a.\u0006 \u0002;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Manager(DataRowBuilder _param1)
      : base(_param1)
    {
      this.\u0002 = (a.\u0006) this.Table;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public string DataColumn1
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return (string) this[this.\u0002.\u0002()];
        }
        catch (InvalidCastException ex)
        {
          throw new StrongTypingException(\u0002\u2003.\u0002(-1094103942), (Exception) ex);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] set => this[this.\u0002.\u0002()] = (object) value;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public string DataColumn2
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return (string) this[this.\u0002.\u0003()];
        }
        catch (InvalidCastException ex)
        {
          throw new StrongTypingException(\u0002\u2003.\u0002(-1094103903), (Exception) ex);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] set => this[this.\u0002.\u0003()] = (object) value;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public string DataColumn3
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return (string) this[this.\u0002.\u0005()];
        }
        catch (InvalidCastException ex)
        {
          throw new StrongTypingException(\u0002\u2003.\u0002(-1094103852), (Exception) ex);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] set => this[this.\u0002.\u0005()] = (object) value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool PatchModel() => this.IsNull(this.\u0002.\u0002());

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DeleteModel() => this[this.\u0002.\u0002()] = Convert.DBNull;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool QueryModel() => this.IsNull(this.\u0002.\u0003());

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InvokeModel() => this[this.\u0002.\u0003()] = Convert.DBNull;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool InsertModel() => this.IsNull(this.\u0002.\u0005());

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DisableModel() => this[this.\u0002.\u0005()] = Convert.DBNull;

    internal static bool \u0002() => true;

    internal static bool \u0003() => false;
  }
}
