// Decompiled with JetBrains decompiler
// Type: Fanny_HeirdooDebugger.botDebug
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using FannyHeirdooBot;
using PlanetDebug;

namespace Fanny_HeirdooDebugger
{
  public class botDebug : botDebugBase
  {
    private Universe gameboard;

    public botDebug()
    {
label_1:
      int num1 = -1119146967;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1914695857)) % 5U)
        {
          case 0:
            BotEnvironment.DUMP_MAP = false;
            num1 = (int) num2 * -1029585364 ^ 1904945799;
            continue;
          case 1:
            num1 = (int) num2 * 24439330 ^ -527565548;
            continue;
          case 2:
            num1 = (int) num2 * 808104471 ^ 344125993;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      this.gameboard = new Universe((botDebugBase) this);
    }

    public override void CreateGameBoardInstance()
    {
    }

    public override void DoMove()
    {
label_1:
      int num1 = 2141613915;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1566636633)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            this.gameboard.StartTurn(this.GameBoardData);
            num1 = (int) num2 * 250723177 ^ -469363446;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.gameboard.FinishTurn();
    }

    public override bool QueryPlanetCanSurviveAttack(int planetId)
    {
      if (this.gameboard == null)
        goto label_6;
label_1:
      int num1 = -637441968;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -415186762)) % 6U)
        {
          case 0:
            goto label_1;
          case 2:
            goto label_5;
          case 3:
            num1 = (int) num2 * 1951298715 ^ 285700584;
            continue;
          case 4:
            flag = true;
            num1 = -1299330605;
            continue;
          case 5:
            flag = this.gameboard.Planets[planetId].DoesNotChangeOwner;
            num1 = (int) num2 * 1256267676 ^ -623066733;
            continue;
          default:
            goto label_9;
        }
      }
label_5:
      int num3 = this.gameboard.Planets.Count > 0 ? 1 : 0;
      goto label_7;
label_9:
      return flag;
label_6:
      num3 = 0;
label_7:
      num1 = num3 != 0 ? -886528943 : (num1 = -1549891498);
      goto label_2;
    }

    public override bool QueryIsDominating() => this.gameboard.IsDominating;
  }
}
