// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Messages.PerformanceProbe
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Tags.PerformanceProbeTags;
using PreEmptive.Analytics.Common.Utilities;
using System;

namespace PreEmptive.Analytics.Common.Messages
{
  public class PerformanceProbe : Message
  {
    public PerformanceProbe(
      string name,
      PerformanceInfo performance,
      ExtendedKeys keys,
      Guid session,
      BinaryInfoTag binaryInfo)
    {
      int A_1 = 18;
      // ISSUE: explicit constructor call
      base.\u002Ector(session, keys, binaryInfo);
      if (performance == null)
        goto label_4;
label_3:
      this.AddAttribute(Utils.a("\uA8C5꧇\uA7C9꧋", A_1), name);
      this.InnerTags.Add((Tag) new MemoryUseTag(performance.TotalMemory, performance.UsedMemory));
      if (!performance.CpuUtilization.HasValue)
        return;
      this.InnerTags.Add((Tag) new CpuUseTag(performance.CpuUtilization));
      return;
label_4:
      performance = new PerformanceInfo()
      {
        CpuUtilization = new int?(),
        TotalMemory = new int?(),
        UsedMemory = new int?()
      };
      goto label_3;
    }

    public override string TagName
    {
      get
      {
        int A_1 = 10;
        int num1 = 5565;
        int num2 = num1;
        num1 = 5565;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("캽ꖿ냁ꋃ꧅뫇\uA7C9귋ꃍ돏럑陸ꛕ\uAAD7뗙뻛믝", A_1);
          default:
            goto case 1;
        }
      }
    }

    public override string TagDescription
    {
      get
      {
        int A_1 = 13;
        int num1 = 26220;
        int num2 = num1;
        num1 = 26220;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("뇀ꛂ럄ꇆꛈ맊ꃌ껎뿐냒냔\uF7D6꧘\uA9DA닜뷞蓠", A_1);
          default:
            goto case 1;
        }
      }
    }
  }
}
