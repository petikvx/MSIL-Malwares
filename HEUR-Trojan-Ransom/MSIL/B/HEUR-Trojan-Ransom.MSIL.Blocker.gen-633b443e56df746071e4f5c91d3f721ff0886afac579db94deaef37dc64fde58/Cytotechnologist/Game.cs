// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: SecurityContextSwitch, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: B550A3E4-7AB3-42E5-BA1E-9838306CED9A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-633b443e56df746071e4f5c91d3f721ff0886afac579db94deaef37dc64fde58.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 967142861;
      int aIndex;
      JSONNode jsonNode;
      int index;
      bool flag;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1179615594)) % 20U)
        {
          case 0:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = 1844182437;
            continue;
          case 1:
            this.Players = new Player[count];
            num1 = (int) num2 * -31412207 ^ -365835044;
            continue;
          case 2:
            goto label_3;
          case 3:
            ++aIndex;
            num1 = (int) num2 * 438937661 ^ 2006957077;
            continue;
          case 4:
            int num3;
            num1 = num3 = index < count ? 1367617516 : (num3 = 882156384);
            continue;
          case 5:
            this._random = Game.\u200E‎⁬‬⁭‎​‬⁯‪‎‪‪⁬‭‏‎⁮⁭‫​⁫‎⁭‪‌​‫⁫⁯‫‌‮‬⁯⁬⁭⁯‌‌‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * 319608546 ^ 2081710969;
            continue;
          case 6:
            num1 = (int) num2 * -1836079085 ^ -1686320368;
            continue;
          case 7:
            jsonNode = json["players"];
            num1 = (int) num2 * -614082144 ^ 1484591340;
            continue;
          case 8:
            num1 = (int) num2 * 1116019428 ^ -1388569298;
            continue;
          case 9:
            goto label_1;
          case 10:
            count = jsonNode.Count;
            num1 = (int) num2 * 1738149104 ^ -444537925;
            continue;
          case 11:
            index = 0;
            num1 = (int) num2 * -1239898827 ^ 55018605;
            continue;
          case 12:
            flag = aIndex < count;
            num1 = 1293670052;
            continue;
          case 13:
            ++index;
            num1 = (int) num2 * 1138266991 ^ 821216845;
            continue;
          case 14:
            this._playerStates[index] = new PlayerState();
            num1 = 1137454903;
            continue;
          case 15:
            aIndex = 0;
            num1 = (int) num2 * -1550821628 ^ -1499988060;
            continue;
          case 16:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -972970603 ^ 1383793601;
            continue;
          case 17:
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            num1 = (int) num2 * -1477764352 ^ 624879521;
            continue;
          case 18:
            int num4 = !flag ? 705424626 : (num4 = 91726402);
            num1 = num4 ^ (int) num2 * -942609838;
            continue;
          case 19:
            this._buffer = buffer;
            num1 = (int) num2 * -1221463343 ^ 1807744656;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -1277379532;
        bool finished;
        int index;
        PlayerState[] playerStates;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1604768026)) % 14U)
          {
            case 0:
              num1 = (int) num2 * 183894461 ^ -367565331;
              continue;
            case 1:
              finished = true;
              num1 = (int) num2 * 631487025 ^ 1374095289;
              continue;
            case 2:
              int num3 = playerState.State == State.Playing ? 886995623 : (num3 = 1276855988);
              num1 = num3 ^ (int) num2 * 1950818912;
              continue;
            case 4:
              playerState = playerStates[index];
              num1 = -87359998;
              continue;
            case 5:
              int num4;
              num1 = num4 = index >= playerStates.Length ? -2031068205 : (num4 = -1964141004);
              continue;
            case 6:
              goto label_1;
            case 7:
              index = 0;
              num1 = (int) num2 * -1680661074 ^ -1299470801;
              continue;
            case 8:
              int num5 = !this._finished ? -1817709967 : (num5 = -14412266);
              num1 = num5 ^ (int) num2 * -266230131;
              continue;
            case 9:
              num1 = (int) num2 * -1585266601 ^ 1934077220;
              continue;
            case 10:
              ++index;
              num1 = -869008643;
              continue;
            case 11:
              finished = false;
              num1 = (int) num2 * 905097251 ^ -989565796;
              continue;
            case 12:
              finished = true;
              num1 = (int) num2 * -817814532 ^ 2078198631;
              continue;
            case 13:
              playerStates = this._playerStates;
              num1 = -1195780077;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 2115918994;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 634221991)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            this._currentTurn = 0;
            num1 = (int) num2 * -679936022 ^ 1844321664;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * 169684073 ^ -1363698790;
            continue;
          case 4:
            this.Winners.Clear();
            this.Losers.Clear();
            num1 = (int) num2 * -85325661 ^ -1230530922;
            continue;
          case 5:
            this._finished = false;
            num1 = (int) num2 * 1231897674 ^ -1475345319;
            continue;
          case 6:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -123952189 ^ -882435694;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this._currentChanceIndex = -1;
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -1110747541;
      PlayerState playerState;
      int num2;
      bool flag1;
      int planningCardsCount;
      bool flag2;
      int index;
      bool flag3;
      Player player;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1957671191)) % 22U)
        {
          case 0:
            num2 = 0;
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 2105302552 ^ 420620475;
            continue;
          case 1:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -1576012315 ^ 435105063;
            continue;
          case 2:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1488618708 ^ -1275149984;
            continue;
          case 3:
            int num4 = !flag1 ? -528361950 : (num4 = -762169269);
            num1 = num4 ^ (int) num3 * 145336008;
            continue;
          case 4:
            num1 = (int) num3 * 1557086172 ^ -184637320;
            continue;
          case 5:
            ++index;
            num1 = (int) num3 * 1303930122 ^ -238703558;
            continue;
          case 6:
            int num5 = !player.UseOneMorePlanningSprint ? -507874533 : (num5 = -1588576138);
            num1 = num5 ^ (int) num3 * -1348183974;
            continue;
          case 7:
            num1 = -1517303089;
            continue;
          case 8:
            index = 0;
            num1 = (int) num3 * 1362421110 ^ -192697609;
            continue;
          case 9:
            playerState.Sprint = -1;
            num1 = (int) num3 * 2038008512 ^ 380076858;
            continue;
          case 10:
            num1 = (int) num3 * 457992971 ^ -832695909;
            continue;
          case 11:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = -1675829753;
            continue;
          case 12:
            int num6 = flag2 ? -79518597 : (num6 = -1328372266);
            num1 = num6 ^ (int) num3 * 558889508;
            continue;
          case 13:
            goto label_1;
          case 14:
            flag1 = num2 > 0;
            num1 = -284403584;
            continue;
          case 15:
            int num7 = flag3 ? -1658951836 : (num7 = -1346269995);
            num1 = num7 ^ (int) num3 * 1111369687;
            continue;
          case 16:
            playerState.Sprint = 1;
            num1 = (int) num3 * -22344216 ^ 466332421;
            continue;
          case 17:
            goto label_3;
          case 18:
            player = this.Players[index];
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num1 = -1618179869;
            continue;
          case 19:
            num2 = 0;
            num1 = -705138088;
            continue;
          case 20:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -1197045616;
            continue;
          case 21:
            flag3 = index < this.Players.Length;
            num1 = -711153148;
            continue;
          default:
            goto label_24;
        }
      }
label_3:
      return;
label_24:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -819588649;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1478900064)) % 13U)
        {
          case 0:
            int num3 = flag1 ? -1260156950 : (num3 = -1358137120);
            num1 = num3 ^ (int) num2 * -65586867;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u202E⁬⁭‭‎⁬⁫‍‬‫‬‎⁭‬‬⁮⁯⁯⁮‬‭‍‎‭⁮‭⁭‭​‫⁯‮⁫‮‎‍⁬⁭‭‌‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1090742489 ^ -615879890;
            continue;
          case 4:
            num1 = (int) num2 * -4285955 ^ 451029325;
            continue;
          case 5:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1349735007 ^ 869644470;
            continue;
          case 6:
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * -1215944972 ^ -1206659086;
            continue;
          case 7:
            this.PlayerTurn(this._currentPlayer);
            num1 = -1826068563;
            continue;
          case 8:
            this._currentPlayer = 0;
            num1 = (int) num2 * -424446604 ^ -1377296941;
            continue;
          case 9:
            this.Print((object) Game.\u206A⁪​⁬‏‮⁫⁪⁪⁬‍‪‫⁭⁯‏⁬‏‍‌‮⁬⁭⁮⁪‬‫‫⁮⁪‭⁫‫‏⁫‌⁫‫‌‏‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1841703862;
            continue;
          case 10:
            num1 = (int) num2 * 1818806186 ^ -432791137;
            continue;
          case 11:
            ++this._currentPlayer;
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 1173357289 ^ 1237231778;
            continue;
          case 12:
            int num4 = !flag2 ? -1044060884 : (num4 = -2049226234);
            num1 = num4 ^ (int) num2 * -2057828052;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -609163373;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        int num3;
        bool flag1;
        Card card;
        int num4;
        int index;
        PlayerState playerState2;
        bool flag2;
        bool flag3;
        bool onlyOneWinner;
        bool flag4;
        bool flag5;
        Player player;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        int num5;
        bool flag10;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1666760840)) % 83U)
        {
          case 0:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag10 ? (object) "ALL " : (object) "", flag8 ? (object) "receives" : (object) "pays", (object) Game.\u202D‮⁪‪⁮‌‍‫⁮⁮‮‮‫‭‍⁯⁬‎‎⁯⁭‌⁫​⁮‏⁭‪‫‏⁬⁪​⁮‍⁪‌​⁫⁯‮(num4), flag1 ? (object) "advance" : (object) "stay");
            num1 = -787512576;
            continue;
          case 1:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 2:
            ++num3;
            num1 = -264821845;
            continue;
          case 3:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1762142920 ^ 640853251;
            continue;
          case 4:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u206E‏‌‭‍⁫⁬‬⁯‫‮⁫‎‏‬⁭⁬‫‍‍‮‮‫‏⁯⁯​⁪⁫⁯‮⁭⁫⁪⁪‌‭​‭⁫‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = -1534185190;
            continue;
          case 5:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -1945701867 ^ -1377609743;
            continue;
          case 6:
            flag5 = playerState1.Sprint < 0;
            num1 = -1487786647;
            continue;
          case 7:
            num1 = (int) num2 * -1497311948 ^ 608084552;
            continue;
          case 8:
            card = this.DrawCard();
            flag8 = card.Impact < 0;
            num1 = (int) num2 * -1127092071 ^ -1420769137;
            continue;
          case 9:
            num1 = (int) num2 * 1910978028 ^ 473015122;
            continue;
          case 10:
            num1 = -1486532492;
            continue;
          case 11:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202E⁬⁭‭‎⁬⁫‍‬‫‬‎⁭‬‬⁮⁯⁯⁮‬‭‍‎‭⁮‭⁭‭​‫⁯‮⁫‮‎‍⁬⁭‭‌‮("\t", playerState3 != null ? Game.\u206D⁭‫‏​⁯‪⁫‪‏‭‎⁯⁬⁪⁪‪⁬‪⁯⁪​​‫‌⁮‍⁫‬‎‎‭⁭‬‏⁫⁮⁪‫‌‮((object) playerState3) : (string) null));
            num1 = -1589345438;
            continue;
          case 12:
            int num7 = flag7 ? -1817267819 : (num7 = -972859724);
            num1 = num7 ^ (int) num2 * 996316125;
            continue;
          case 13:
            num1 = -532785877;
            continue;
          case 14:
            ++playerState1.Sprint;
            num1 = (int) num2 * 2056431229 ^ -105831855;
            continue;
          case 15:
            int num8 = flag5 ? -2062058382 : (num8 = -839238063);
            num1 = num8 ^ (int) num2 * -1324867992;
            continue;
          case 16:
            flag1 = true;
            num4 = card.Impact;
            num1 = -1035254840;
            continue;
          case 17:
            this._finished = true;
            num1 = (int) num2 * -677373119 ^ 198332091;
            continue;
          case 18:
            num1 = (int) num2 * -421084667 ^ -758449851;
            continue;
          case 19:
            flag2 = num3 < this._playerStates.Length;
            num1 = -1591130034;
            continue;
          case 20:
            flag6 = !flag8;
            num1 = (int) num2 * 1694234434 ^ -33114301;
            continue;
          case 21:
            num1 = (int) num2 * 399081166 ^ 1386440179;
            continue;
          case 22:
            goto label_3;
          case 23:
            num1 = -428788561;
            continue;
          case 24:
            playerState1.State = State.Lose;
            int num9 = this.Losers.Contains(playerIndex) ? 1235644761 : (num9 = 57553100);
            num1 = num9 ^ (int) num2 * -1058425441;
            continue;
          case 25:
            int num10 = !this.Losers.Contains(index) ? 1312327001 : (num10 = 471704572);
            num1 = num10 ^ (int) num2 * -279730793;
            continue;
          case 26:
            num1 = (int) num2 * 1743726252 ^ 1257346831;
            continue;
          case 27:
            num1 = (int) num2 * 696408196 ^ -1671362070;
            continue;
          case 28:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 960966589 ^ -1014348840;
            continue;
          case 29:
            int num11 = !flag4 ? -1790502456 : (num11 = -435469816);
            num1 = num11 ^ (int) num2 * -2033099217;
            continue;
          case 30:
            num1 = (int) num2 * -1849484061 ^ 997783116;
            continue;
          case 31:
            num1 = (int) num2 * 1799802527 ^ -1099504238;
            continue;
          case 32:
            int num12 = !onlyOneWinner ? -1503242620 : (num12 = -1351751006);
            num1 = num12 ^ (int) num2 * -1070043166;
            continue;
          case 33:
            num1 = (int) num2 * -127675403 ^ 398413374;
            continue;
          case 34:
            num1 = (int) num2 * 1089165837 ^ 1976232694;
            continue;
          case 35:
            ++index;
            num1 = -1887434567;
            continue;
          case 36:
            num1 = (int) num2 * 15977044 ^ -943126472;
            continue;
          case 37:
            int num13 = playerState1.State == 0 ? 1677741011 : (num13 = 20145813);
            num1 = num13 ^ (int) num2 * 1131800272;
            continue;
          case 38:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -5599495 ^ 1566438735;
            continue;
          case 39:
            index = 0;
            num1 = -654521081;
            continue;
          case 40:
            num4 = Game.\u206E‏‌‭‍⁫⁬‬⁯‫‮⁫‎‏‬⁭⁬‫‍‍‮‮‫‏⁯⁯​⁪⁫⁯‮⁭⁫⁪⁪‌‭​‭⁫‮(0, num5);
            num1 = (int) num2 * -2048313369 ^ 534530068;
            continue;
          case 41:
            playerState2.State = State.Lose;
            num1 = -996289711;
            continue;
          case 42:
            int num14;
            num1 = num14 = index < this._playerStates.Length ? -1972150053 : (num14 = -808403262);
            continue;
          case 43:
            flag1 = false;
            num1 = -1468341930;
            continue;
          case 44:
            num1 = (int) num2 * 2100244155 ^ -1490212867;
            continue;
          case 45:
            num1 = (int) num2 * -415173718 ^ -1703986010;
            continue;
          case 46:
            int num15 = !flag10 ? -343659211 : (num15 = -1213469845);
            num1 = num15 ^ (int) num2 * 1186600407;
            continue;
          case 47:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 48312611 ^ 497733630;
            continue;
          case 48:
            goto label_1;
          case 49:
            num1 = -1338113392;
            continue;
          case 50:
            int num16 = flag2 ? 656902022 : (num16 = 909398617);
            num1 = num16 ^ (int) num2 * 1268698169;
            continue;
          case 51:
            num1 = (int) num2 * -737307575 ^ 869380974;
            continue;
          case 52:
            ++playerState1.Sprint;
            num1 = (int) num2 * 1660553029 ^ 260211824;
            continue;
          case 53:
            num1 = -914116953;
            continue;
          case 54:
            int num17 = !flag9 ? -1832172066 : (num17 = -1066921821);
            num1 = num17 ^ (int) num2 * 301428775;
            continue;
          case 55:
            num1 = (int) num2 * -291969721 ^ 1547314396;
            continue;
          case 56:
            num1 = (int) num2 * 1666268731 ^ 1385868796;
            continue;
          case 57:
            num1 = (int) num2 * -1476425881 ^ -819147538;
            continue;
          case 58:
            flag9 = flag1;
            num1 = -1384677592;
            continue;
          case 59:
            num1 = (int) num2 * -1653752584 ^ 2010408306;
            continue;
          case 60:
            this.Losers.Add(num3);
            num1 = (int) num2 * -399439957 ^ 1752895495;
            continue;
          case 61:
            num1 = -318752795;
            continue;
          case 62:
            num3 = 0;
            num1 = (int) num2 * -984180223 ^ 1801458935;
            continue;
          case 63:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 643920539 ^ -2019302998;
              continue;
            }
            num6 = 0;
            break;
          case 64:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -2145646209 ^ -359410095;
            continue;
          case 65:
            flag7 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -698087173;
            continue;
          case 66:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1048811373 ^ -1524185002;
            continue;
          case 67:
            int num18;
            num1 = num18 = playerState1.Sprint <= this.Rules.SprintCount ? -318752795 : (num18 = -949864947);
            continue;
          case 68:
            int num19 = !flag3 ? -1667760238 : (num19 = -519564179);
            num1 = num19 ^ (int) num2 * -802814417;
            continue;
          case 69:
            int num20 = playerState1.Resources >= 0 ? 2137338217 : (num20 = 910749697);
            num1 = num20 ^ (int) num2 * -1482673491;
            continue;
          case 70:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 1932725435 ^ 447198896;
            continue;
          case 71:
            int num21 = num3 == playerIndex ? -1009171049 : (num21 = -201426911);
            num1 = num21 ^ (int) num2 * -2098980744;
            continue;
          case 72:
            this.Print((object) Game.\u202E⁬⁭‭‎⁬⁫‍‬‫‬‎⁭‬‬⁮⁯⁯⁮‬‭‍‎‭⁮‭⁭‭​‫⁯‮⁫‮‎‍⁬⁭‭‌‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -528190375 ^ -817005902;
            continue;
          case 73:
            this.Losers.Add(index);
            num1 = (int) num2 * -884985238 ^ 1561402073;
            continue;
          case 74:
            int num22 = flag6 ? 1635959650 : (num22 = 56419428);
            num1 = num22 ^ (int) num2 * 434089290;
            continue;
          case 75:
            num1 = (int) num2 * -1977999828 ^ -811051779;
            continue;
          case 76:
            num1 = -1492893037;
            continue;
          case 77:
            num1 = (int) num2 * -1635321859 ^ 1061229162;
            continue;
          case 78:
            flag1 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 420110309 ^ 59669508;
            continue;
          case 79:
            num1 = (int) num2 * 2106748826 ^ -1996695670;
            continue;
          case 80:
            num1 = (int) num2 * 1642123570 ^ 1476376769;
            continue;
          case 81:
            flag3 = !this.Losers.Contains(num3);
            num1 = -804376509;
            continue;
          case 82:
            flag4 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1491396592 ^ -817762497;
            continue;
          default:
            goto label_88;
        }
        flag10 = num6 != 0;
        num1 = -1745291212;
      }
label_3:
      return;
label_88:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 144279299;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1385733912)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = flag ? 1646581162 : (num3 = 1043984819);
            num1 = num3 ^ (int) num2 * 1023951439;
            continue;
          case 2:
            num1 = (int) num2 * -1099808287 ^ 2074387981;
            continue;
          case 3:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 355643167 ^ -114751700;
            continue;
          case 4:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = 1298077658;
            continue;
          case 5:
            this.ShuffleCards();
            num1 = (int) num2 * 2069521306 ^ -1005307394;
            continue;
          case 7:
            card2 = card1;
            num1 = (int) num2 * -1956559512 ^ -1555968394;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -1189406041;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -51634568)) % 8U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206D⁭‫‏​⁯‪⁫‪‏‭‎⁯⁬⁪⁪‪⁬‪⁯⁪​​‫‌⁮‍⁫‬‎‎‭⁭‬‏⁫⁮⁪‫‌‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200D‮‮⁫‭‎‍‬‮‬‮‏‬‫‮‍⁭‫‬⁫‎‫‫⁮​‪⁮‌‎⁫‪‍⁭‮⁮‎‌‬‪⁪‮(strArray);
            num1 = -1627879819;
            continue;
          case 1:
            num1 = (int) num2 * -1891367233 ^ -103182203;
            continue;
          case 2:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? -1809423229 : (num3 = -1885458008);
            continue;
          case 3:
            str2 = str1;
            num1 = (int) num2 * -1832755365 ^ 1528070773;
            continue;
          case 5:
            ++index;
            num1 = (int) num2 * 1169008341 ^ -912440181;
            continue;
          case 6:
            goto label_1;
          case 7:
            str1 = "";
            index = 0;
            num1 = (int) num2 * 1785913057 ^ -1567539610;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 481707624;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1529425487)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Game.\u200F‌‏‍⁪⁫‎‌‮‬‏⁮‫‭‍⁫‍⁫‍⁯‏‬‫​⁬⁭‫​⁬‫‏​‎⁭⁪‬‮⁫⁮⁫‮(Game.\u206D⁭‫‏​⁯‪⁫‪‏‭‎⁯⁬⁪⁪‪⁬‪⁯⁪​​‫‌⁮‍⁫‬‎‎‭⁭‬‏⁫⁮⁪‫‌‮(text), more);
            num1 = (int) num2 * 710741150 ^ -1262969125;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      Game.\u206B⁫⁪⁯‏‌⁫⁮‍‌⁪‎⁮​⁬​⁫⁪⁮‎⁬‍⁮​‍‏‬‬⁬‌⁪⁯‍‪⁬​⁮⁮‍‎‮(this._buffer, str);
    }

    static Random \u200E‎⁬‬⁭‎​‬⁯‪‎‪‪⁬‭‏‎⁮⁭‫​⁫‎⁭‪‌​‫⁫⁯‫‌‮‬⁯⁬⁭⁯‌‌‮([In] int obj0) => new Random(obj0);

    static string \u206A⁪​⁬‏‮⁫⁪⁪⁬‍‪‫⁭⁯‏⁬‏‍‌‮⁬⁭⁮⁪‬‫‫⁮⁪‭⁫‫‏⁫‌⁫‫‌‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202E⁬⁭‭‎⁬⁫‍‬‫‬‎⁭‬‬⁮⁯⁯⁮‬‭‍‎‭⁮‭⁭‭​‫⁯‮⁫‮‎‍⁬⁭‭‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206E‏‌‭‍⁫⁬‬⁯‫‮⁫‎‏‬⁭⁬‫‍‍‮‮‫‏⁯⁯​⁪⁫⁯‮⁭⁫⁪⁪‌‭​‭⁫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202D‮⁪‪⁮‌‍‫⁮⁮‮‮‫‭‍⁯⁬‎‎⁯⁭‌⁫​⁮‏⁭‪‫‏⁬⁪​⁮‍⁪‌​⁫⁯‮([In] int obj0) => Math.Abs(obj0);

    static string \u206D⁭‫‏​⁯‪⁫‪‏‭‎⁯⁬⁪⁪‪⁬‪⁯⁪​​‫‌⁮‍⁫‬‎‎‭⁭‬‏⁫⁮⁪‫‌‮([In] object obj0) => obj0.ToString();

    static string \u200D‮‮⁫‭‎‍‬‮‬‮‏‬‫‮‍⁭‫‬⁫‎‫‫⁮​‪⁮‌‎⁫‪‍⁭‮⁮‎‌‬‪⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F‌‏‍⁪⁫‎‌‮‬‏⁮‫‭‍⁫‍⁫‍⁯‏‬‫​⁬⁭‫​⁬‫‏​‎⁭⁪‬‮⁫⁮⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206B⁫⁪⁯‏‌⁫⁮‍‌⁪‎⁮​⁬​⁫⁪⁮‎⁬‍⁮​‍‏‬‬⁬‌⁪⁯‍‪⁬​⁮⁮‍‎‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
