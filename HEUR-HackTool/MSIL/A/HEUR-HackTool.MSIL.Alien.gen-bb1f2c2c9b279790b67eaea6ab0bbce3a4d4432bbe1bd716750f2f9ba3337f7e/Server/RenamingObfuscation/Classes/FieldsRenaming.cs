// Decompiled with JetBrains decompiler
// Type: Server.RenamingObfuscation.Classes.FieldsRenaming
// Assembly: AsyncRAT, Version=0.5.7.0, Culture=neutral, PublicKeyToken=null
// MVID: 51786A10-CF9D-455B-B8A4-B82CB9EDE322
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-bb1f2c2c9b279790b67eaea6ab0bbce3a4d4432bbe1bd716750f2f9ba3337f7e.exe

using dnlib.DotNet;
using dnlib.DotNet.Emit;
using Server.RenamingObfuscation.Interfaces;
using System.Collections.Generic;

namespace Server.RenamingObfuscation.Classes
{
  public class FieldsRenaming : IRenaming
  {
    private static Dictionary<string, string> _names = new Dictionary<string, string>();

    public ModuleDefMD Rename(ModuleDefMD module)
    {
      ModuleDefMD module1 = module;
      foreach (TypeDef type in ((ModuleDef) module1).GetTypes())
      {
        if (!type.IsGlobalModuleType)
        {
          foreach (FieldDef field in (IEnumerable<FieldDef>) type.Fields)
          {
            string str;
            if (FieldsRenaming._names.TryGetValue(UTF8String.op_Implicit(field.Name), out str))
              field.Name = UTF8String.op_Implicit(str);
            else if (!field.IsSpecialName && !field.HasCustomAttributes)
            {
              string randomString = Utils.GenerateRandomString();
              FieldsRenaming._names.Add(UTF8String.op_Implicit(field.Name), randomString);
              field.Name = UTF8String.op_Implicit(randomString);
            }
          }
        }
      }
      return FieldsRenaming.ApplyChangesToResources(module1);
    }

    private static ModuleDefMD ApplyChangesToResources(ModuleDefMD module)
    {
      ModuleDefMD resources = module;
      foreach (TypeDef type in ((ModuleDef) resources).GetTypes())
      {
        if (!type.IsGlobalModuleType)
        {
          foreach (MethodDef method in (IEnumerable<MethodDef>) type.Methods)
          {
            if (!UTF8String.op_Inequality(method.Name, "InitializeComponent"))
            {
              IList<Instruction> instructions = method.Body.Instructions;
              for (int index = 0; index < ((ICollection<Instruction>) instructions).Count - 3; ++index)
              {
                if (instructions[index].OpCode == OpCodes.Ldstr)
                {
                  foreach (KeyValuePair<string, string> name in FieldsRenaming._names)
                  {
                    if (name.Key == instructions[index].Operand.ToString())
                      instructions[index].Operand = (object) name.Value;
                  }
                }
              }
            }
          }
        }
      }
      return resources;
    }
  }
}
