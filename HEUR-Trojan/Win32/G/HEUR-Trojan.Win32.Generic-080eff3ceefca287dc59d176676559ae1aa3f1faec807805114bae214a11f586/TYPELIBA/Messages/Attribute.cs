// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Messages.Attribute
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Consumers;
using ProjNet.Roles;
using ProjNet.Structs;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;
using TYPELIBA.Pages;

namespace TYPELIBA.Messages
{
  public class Attribute : TaskRepositoryConsumer, RegistryPolicyList, MapAccountPage, Worker
  {
    private Stub facade;
    private AccountTokenStructBuilder code;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Attribute(
      Stub res,
      AccountTokenStructBuilder attr,
      AuthorTaskCommentPriority control,
      string key2,
      string value3,
      long no__pred4,
      string instance5,
      string token6,
      string res7)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector(control, key2, value3, no__pred4, instance5, token6, res7);
              this.facade = res;
              goto case 3;
            case 3:
              this.code = attr;
              if (Attribute.MoveDispatcher())
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 5:
              goto label_7;
            default:
              num2 = 3;
              continue;
          }
        }
label_2:
        ManagerParamsID.NewExpression();
        num1 = 4;
      }
label_7:;
    }

    public static Attribute WGS84
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new Attribute((Stub) PoolPolicyList.WGS84, (AccountTokenStructBuilder) null, (AuthorTaskCommentPriority) 1002, "World Geodetic System 1984", "EPSG", 6326L, string.Empty, "EPSG's WGS 84 datum has been the then current realisation. No distinction is made between the original WGS 84 frame, WGS 84 (G730), WGS 84 (G873) and WGS 84 (G1150). Since 1997, WGS 84 has been maintained within 10cm of the then current ITRF.", string.Empty);
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Attribute PatchProcess()
    {
      int num = 2;
      Attribute attribute1;
      Attribute attribute2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            attribute1 = new Attribute((Stub) PoolPolicyList.ForgotObject(), (AccountTokenStructBuilder) null, (AuthorTaskCommentPriority) 1002, "World Geodetic System 1972", "EPSG", 6322L, string.Empty, "Used by GPS before 1987. For Transit satellite positioning see also WGS 72BE. Datum code 6323 reserved for southern hemisphere ProjCS's.", string.Empty);
            num = 3;
            continue;
          case 1:
          case 3:
            attribute1.QueryState(new AccountTokenStructBuilder(0.0, 0.0, 4.5, 0.0, 0.0, 0.554, 0.219));
            goto case 4;
          case 4:
            attribute2 = attribute1;
            if (true)
            {
              num = 5;
              continue;
            }
            goto label_6;
          case 5:
            goto label_6;
          default:
            if (true)
            {
              num = 4;
              continue;
            }
            goto case 0;
        }
      }
label_6:
      return attribute2;
    }

    public static Attribute ETRF89
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        int num1 = 3;
        Attribute attribute1;
        while (true)
        {
          Attribute attribute2;
          int num2;
          switch (num1)
          {
            case 0:
            case 3:
              attribute2 = new Attribute((Stub) PoolPolicyList.StopObject(), (AccountTokenStructBuilder) null, (AuthorTaskCommentPriority) 1002, "European Terrestrial Reference System 1989", "EPSG", 6258L, nameof (ETRF89), "The distinction in usage between ETRF89 and ETRS89 is confused: although in principle conceptually different in practice both are used for the realisation.", string.Empty);
              num2 = 1;
              break;
            case 1:
              attribute2.QueryState(new AccountTokenStructBuilder());
              goto case 2;
            case 2:
            case 4:
              attribute1 = attribute2;
              num2 = 5;
              break;
            case 5:
              goto label_7;
            default:
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto case 0;
          }
          num1 = num2;
        }
label_7:
        return attribute1;
      }
    }

    public static Attribute ED50
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new Attribute((Stub) PoolPolicyList.InterruptProcess(), new AccountTokenStructBuilder(-87.0, -98.0, -121.0, 0.0, 0.0, 0.0, 0.0), (AuthorTaskCommentPriority) 1002, "European Datum 1950", "EPSG", 6230L, nameof (ED50), string.Empty, string.Empty);
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Stub NewState() => this.facade;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InsertState(Stub value) => this.facade = value;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public AccountTokenStructBuilder PushState() => this.code;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void QueryState(AccountTokenStructBuilder i) => this.code = i;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 0;
      string str;
      while (true)
      {
        int num2 = num1;
        bool flag;
        StringBuilder stringBuilder;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
label_14:
              stringBuilder = new StringBuilder();
              if (Attribute.MoveDispatcher())
              {
                num2 = 2;
                continue;
              }
              goto label_16;
            case 1:
            case 2:
              goto label_8;
            case 3:
            case 4:
              num3 = this.RestartState() > 0L ? 1 : 0;
              break;
            case 5:
              str = stringBuilder.ToString();
              if (Attribute.MoveDispatcher())
              {
                num2 = 7;
                continue;
              }
              goto label_8;
            case 6:
              if (flag)
                stringBuilder.AppendFormat(", {0}", (object) this.code.MapProcess());
              if (string.IsNullOrEmpty(this.LoginState()))
              {
                num3 = 0;
                break;
              }
              goto case 3;
            case 7:
              goto label_16;
            default:
              goto label_6;
          }
          if (num3 != 0)
            stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.LoginState(), (object) this.RestartState());
          stringBuilder.Append("]");
          if (Attribute.MoveDispatcher())
            num2 = 5;
          else
            goto label_14;
        }
label_6:
        num1 = 4;
        continue;
label_8:
        stringBuilder.AppendFormat("DATUM[\"{0}\", {1}", (object) this.Name, (object) this.facade.RevertError());
        flag = this.code != null;
        num1 = 6;
      }
label_16:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_HorizontalDatum DatumType=\"{0}\">{1}{2}{3}</CS_HorizontalDatum>", (object) (int) this.SetState(), (object) this.AddProcess(), (object) this.NewState().InterruptState(), this.PushState() == null ? (object) string.Empty : (object) this.PushState().PrepareProcess());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object first)
    {
      int num1 = 0;
      Attribute attribute;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_12;
            case 1:
            case 3:
              goto label_15;
            case 2:
              goto label_1;
            case 4:
            case 7:
              goto label_10;
            case 5:
              goto label_4;
            case 6:
              if (this.NewState() == null)
              {
                if (true)
                {
                  num2 = 8;
                  continue;
                }
                goto label_15;
              }
              else
                goto label_20;
            case 8:
              goto label_19;
            default:
              if (Attribute.MoveDispatcher())
              {
                num2 = 7;
                continue;
              }
              goto label_19;
          }
        }
label_4:
        bool flag;
        if (!flag)
        {
          attribute = first as Attribute;
          if (attribute.PushState() != null || this.PushState() == null)
          {
            if (attribute.PushState() == null || attribute.PushState().Equals(this.PushState()))
            {
              if (attribute != null)
              {
                num1 = 1;
                continue;
              }
            }
            else
            {
              num1 = 2;
              continue;
            }
          }
          else
            goto label_7;
        }
        else
          goto label_5;
label_10:
        if (attribute == null)
        {
          num1 = 6;
          continue;
        }
        goto label_20;
label_12:
        flag = !(first is Attribute);
        num1 = 5;
        continue;
label_15:
        if (this.NewState() == null || !attribute.NewState().CompareState((object) this.NewState()))
          goto label_10;
        else
          goto label_19;
      }
label_1:
      return false;
label_5:
      return false;
label_7:
      return false;
label_19:
      int num3 = this.SetState() == attribute.SetState() ? 1 : 0;
      goto label_21;
label_20:
      num3 = 0;
label_21:
      return num3 != 0;
    }

    internal static bool MoveDispatcher() => true;

    internal static bool UpdateDispatcher() => false;
  }
}
