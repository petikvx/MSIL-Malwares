// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: q是, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A217F07-6E26-47B2-8CBC-BCC0D26AE04B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-566554b534a53102dd67fc20bd07ca49241b51616d73619e383e80bdfc4fe08a.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = -1901562637;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1900419700)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 961211654 ^ 509738575;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.board = b;
    }

    public void FindAllMoves()
    {
      this.Clear();
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_5:
        int num1 = enumerator.MoveNext() ? -1265774816 : (num1 = -1952783593);
        ChessPiece current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1758223779)) % 5U)
          {
            case 0:
              this.FindMoveFrom(current.Current);
              num1 = (int) num2 * -555194330 ^ 156409466;
              continue;
            case 2:
              goto label_5;
            case 3:
              num1 = -1265774816;
              continue;
            case 4:
              current = enumerator.Current;
              num1 = -991505774;
              continue;
            default:
              goto label_8;
          }
        }
      }
label_8:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_13:
        int num3 = !enumerator1.MoveNext() ? -1647391667 : (num3 = -1142960812);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1758223779)) % 4U)
          {
            case 1:
              this.FindMoveFrom(enumerator1.Current.Current);
              num3 = -391741274;
              continue;
            case 2:
              num3 = -1142960812;
              continue;
            case 3:
              goto label_13;
            default:
              goto label_20;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_15:
        int num5 = -1706527525;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -1758223779)) % 3U)
          {
            case 0:
              goto label_15;
            case 1:
              num5 = (int) num6 * 590330152 ^ -972276891;
              continue;
            default:
              goto label_19;
          }
        }
label_19:;
      }
label_20:
      bool showAllMoves = this.board.ShowAllMoves;
label_21:
      int num7 = -937091414;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ -1758223779)) % 5U)
        {
          case 0:
            goto label_23;
          case 1:
            num7 = (int) num8 * -1459539708 ^ 1517269745;
            continue;
          case 2:
            int num9 = showAllMoves ? 228585299 : (num9 = 1084053332);
            num7 = num9 ^ (int) num8 * 295737963;
            continue;
          case 3:
            this.HighLightMoveStyle();
            num7 = (int) num8 * -670984025 ^ 810280126;
            continue;
          case 4:
            goto label_21;
          default:
            goto label_17;
        }
      }
label_23:
      return;
label_17:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = 816158134;
      Pieces kind;
      Pieces pieces;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 343722604)) % 18U)
        {
          case 0:
label_15:
            this.handleKing(x);
            num1 = 2121362574;
            continue;
          case 1:
            num1 = (int) num2 * 2055555413 ^ 1032445288;
            continue;
          case 2:
            kind = x.Piece.Kind;
            num1 = (int) num2 * -763251388 ^ -888850742;
            continue;
          case 3:
label_6:
            this.handleQueen(x);
            num1 = 2053049713;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * -1547332103 ^ 2039080689;
            continue;
          case 6:
            switch (pieces)
            {
              case Pieces.Pawn:
                goto label_5;
              case Pieces.Knight:
                goto label_19;
              case Pieces.Bishop:
                goto label_16;
              case Pieces.Rook:
                goto label_17;
              case Pieces.King:
                goto label_15;
              case Pieces.Queen:
                goto label_6;
              default:
                num1 = (int) num2 * 858390694 ^ -114995669;
                continue;
            }
          case 7:
label_16:
            this.handleBishop(x);
            num1 = 768372771;
            continue;
          case 8:
label_19:
            this.handleKnight(x);
            num1 = 1719816638;
            continue;
          case 9:
            num1 = (int) num2 * 1769803996 ^ -593560334;
            continue;
          case 10:
label_17:
            this.handleRook(x);
            num1 = 2085426559;
            continue;
          case 11:
            goto label_1;
          case 12:
label_5:
            this.handlePawn(x);
            num1 = 1199960489;
            continue;
          case 13:
            num1 = (int) num2 * 723758140 ^ -2018247918;
            continue;
          case 14:
            pieces = kind;
            num1 = (int) num2 * 197187926 ^ 11006456;
            continue;
          case 15:
            num1 = (int) num2 * 119274756 ^ 951430530;
            continue;
          case 16:
            num1 = (int) num2 * 932972095 ^ -864089056;
            continue;
          case 17:
            num1 = (int) num2 * -2037685111 ^ 698784917;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
label_1:
      int num2 = 1846991874;
      while (true)
      {
        uint num3;
        int num4;
        int num5;
        bool flag1;
        int num6;
        bool flag2;
        bool flag3;
        int b;
        bool flag4;
        bool flag5;
        int num7;
        int num8;
        Square square;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num3 = (uint) (num2 ^ 1108033731)) % 64U)
        {
          case 0:
            num9 = num4 < 8 ? 1 : 0;
            goto label_62;
          case 1:
            num4 = 0;
            num2 = (int) num3 * 415687060 ^ -159216266;
            continue;
          case 2:
            int num19 = flag5 ? 1878342439 : (num19 = 50220157);
            num2 = num19 ^ (int) num3 * 1237774115;
            continue;
          case 3:
            num2 = 245332136;
            continue;
          case 4:
            int num20 = flag11 ? 1199914804 : (num20 = 1735782994);
            num2 = num20 ^ (int) num3 * 1161870035;
            continue;
          case 5:
            flag6 = this.board[num5, x.Rank].Piece != null;
            num2 = (int) num3 * -1885482381 ^ -1048571232;
            continue;
          case 6:
            int num21 = !flag3 ? 1932744342 : (num21 = 1170764797);
            num2 = num21 ^ (int) num3 * -642027488;
            continue;
          case 7:
            num10 = this.board[num8, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_55;
          case 8:
            int num22 = !flag7 ? -367895002 : (num22 = -944435347);
            num2 = num22 ^ (int) num3 * -1159697529;
            continue;
          case 9:
            int num23 = flag2 ? -32502960 : (num23 = -880090148);
            num2 = num23 ^ (int) num3 * -791841580;
            continue;
          case 10:
            this.addCapture(num8, b, x, this.board[num8, x.Rank].Piece);
            num2 = (int) num3 * 1640463202 ^ -813755190;
            continue;
          case 11:
            int num24 = !flag12 ? -1537785856 : (num24 = -1220124094);
            num2 = num24 ^ (int) num3 * 1723206451;
            continue;
          case 12:
            num2 = 1704265906;
            continue;
          case 13:
            if (num4 >= 0)
            {
              num2 = (int) num3 * -1708830875 ^ -714286447;
              continue;
            }
            break;
          case 14:
            this.addMove(num1, num4, x);
            num2 = (int) num3 * -1514729822 ^ -520880352;
            continue;
          case 15:
            if (x.Piece.Color != PieceColor.White)
            {
              num2 = (int) num3 * -1807868996 ^ -1055877714;
              continue;
            }
            num12 = 1;
            goto label_77;
          case 16:
            num14 = 6;
            goto label_13;
          case 17:
            num15 = 2;
            goto label_20;
          case 18:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num2 = (int) num3 * 373711345 ^ -496623800;
            continue;
          case 19:
            num4 = x.Rank + num7;
            if (num1 < 8)
            {
              num2 = (int) num3 * -2142023120 ^ 257830110;
              continue;
            }
            break;
          case 20:
            if (this.board[num5, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num16 = 0;
              goto label_81;
            }
            else
            {
              num2 = (int) num3 * 494700092 ^ 1861441543;
              continue;
            }
          case 21:
            num1 = x.File - 1;
            num4 = x.Rank + num7;
            num2 = 1137699958;
            continue;
          case 22:
            flag10 = this.board.lastPassantPawn == this.board[num8, x.Rank].Piece;
            num2 = (int) num3 * -2134821732 ^ -3762829;
            continue;
          case 23:
            num13 = num4 < 8 ? 1 : 0;
            goto label_16;
          case 24:
            int num25 = !flag10 ? 1076983014 : (num25 = 144910577);
            num2 = num25 ^ (int) num3 * 2052304605;
            continue;
          case 25:
            if (this.board[num8, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num2 = (int) num3 * 1547235229 ^ 467431953;
              continue;
            }
            num10 = 0;
            goto label_55;
          case 26:
            num17 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_84;
          case 27:
            if (num4 >= 0)
            {
              num2 = (int) num3 * 1786701357 ^ -84060356;
              continue;
            }
            goto label_61;
          case 28:
            int num26 = !flag6 ? -929243194 : (num26 = -3985301);
            num2 = num26 ^ (int) num3 * 2091094441;
            continue;
          case 29:
            num2 = 1103320315;
            continue;
          case 30:
            square = this.board[num1, num4];
            flag9 = !square.IsEmpty;
            num2 = (int) num3 * -1251896307 ^ 590243489;
            continue;
          case 31:
            goto label_1;
          case 32:
            int num27 = !flag8 ? -1092389602 : (num27 = -1469686950);
            num2 = num27 ^ (int) num3 * -2073405036;
            continue;
          case 33:
            if (x.Piece.Color == PieceColor.White)
            {
              num14 = 1;
              goto label_13;
            }
            else
            {
              num2 = (int) num3 * 794605637 ^ -1389275914;
              continue;
            }
          case 34:
            num2 = (int) num3 * -1067090290 ^ 508214961;
            continue;
          case 35:
            int num28 = square.IsEmpty ? -1466444204 : (num28 = -834807107);
            num2 = num28 ^ (int) num3 * 1318691295;
            continue;
          case 36:
            int num29 = flag9 ? -1775499935 : (num29 = -1310977712);
            num2 = num29 ^ (int) num3 * -188437853;
            continue;
          case 37:
            int num30 = this.board.lastPassantPawn != this.board[num5, x.Rank].Piece ? 1346659436 : (num30 = 1014436487);
            num2 = num30 ^ (int) num3 * 1632120286;
            continue;
          case 38:
            num18 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_88;
          case 39:
            num2 = (int) num3 * 70968350 ^ 1514453163;
            continue;
          case 40:
            if (flag4)
            {
              num15 = 5;
              goto label_20;
            }
            else
            {
              num2 = (int) num3 * -686786516 ^ -612629006;
              continue;
            }
          case 41:
            num12 = -1;
            goto label_77;
          case 42:
            this.addMove(num1, num4, x);
            num2 = (int) num3 * -2091426835 ^ 1833141474;
            continue;
          case 43:
            if (x.Rank == 4)
            {
              num2 = 1941431257;
              continue;
            }
            num17 = 0;
            goto label_84;
          case 44:
            if (x.Rank == 3)
            {
              num2 = (int) num3 * 1926105293 ^ -1964376743;
              continue;
            }
            num18 = 0;
            goto label_88;
          case 45:
            square = this.board[num1, num4];
            int num31 = square.IsEmpty ? -820898030 : (num31 = -605458647);
            num2 = num31 ^ (int) num3 * 1436928881;
            continue;
          case 46:
            num5 = x.File - 1;
            num8 = x.File + 1;
            num2 = (int) num3 * 765641281 ^ -853457711;
            continue;
          case 47:
            int num32 = flag1 ? -573246003 : (num32 = -1906743695);
            num2 = num32 ^ (int) num3 * 1563339557;
            continue;
          case 48:
            num2 = (int) num3 * 1236952354 ^ 1287691325;
            continue;
          case 49:
            goto label_3;
          case 50:
            num1 = x.File + 1;
            num2 = 1999126416;
            continue;
          case 51:
            num11 = num4 < 8 ? 1 : 0;
            goto label_9;
          case 52:
            num16 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_81;
          case 53:
            if (num1 >= 0)
            {
              num2 = (int) num3 * 1255825260 ^ 131217924;
              continue;
            }
            goto label_61;
          case 54:
            num2 = (int) num3 * -746508005 ^ 1481273820;
            continue;
          case 55:
            this.addMove(num1, num4, x);
            num2 = (int) num3 * -1695035528 ^ -134221689;
            continue;
          case 56:
            flag3 = x.Rank == num6;
            num2 = 71363333;
            continue;
          case 57:
            flag11 = num8 < 8;
            num2 = 1841005639;
            continue;
          case 58:
            square = this.board[num1, num4];
            num2 = (int) num3 * 1385847232 ^ -1251635552;
            continue;
          case 59:
            flag8 = this.board[num8, x.Rank].Piece != null;
            num2 = (int) num3 * -1570733398 ^ 966039437;
            continue;
          case 60:
            flag1 = num5 >= 0;
            num2 = (int) num3 * -1102115867 ^ 1177485568;
            continue;
          case 61:
            num4 = x.Rank + 2 * num7;
            this.addMove(num1, num4, x);
            num2 = (int) num3 * -1059613590 ^ -904136172;
            continue;
          case 62:
            num2 = (int) num3 * 783341726 ^ -977216582;
            continue;
          case 63:
            num2 = 1455012145;
            continue;
          default:
            goto label_98;
        }
        num11 = 0;
label_9:
        int num33;
        num2 = num33 = num11 == 0 ? 1704265906 : (num33 = 28753141);
        continue;
label_13:
        num6 = num14;
        num2 = 394765388;
        continue;
label_16:
        flag2 = num13 != 0;
        num2 = 1662378186;
        continue;
label_20:
        b = num15;
        bool flag13;
        flag5 = flag4 | flag13;
        num2 = 1212801025;
        continue;
label_55:
        flag7 = num10 != 0;
        num2 = 1708518219;
        continue;
label_61:
        num9 = 0;
label_62:
        flag12 = num9 != 0;
        num2 = 1990904520;
        continue;
label_77:
        num7 = num12;
        num1 = x.File;
        num4 = x.Rank + num7;
        if (num4 < 0)
        {
          num13 = 0;
          goto label_16;
        }
        else
        {
          num2 = 2109138772;
          continue;
        }
label_81:
        int num34;
        num2 = num34 = num16 != 0 ? 345615142 : (num34 = 1409529338);
        continue;
label_84:
        flag4 = num17 != 0;
        num2 = 1618503151;
        continue;
label_88:
        flag13 = num18 != 0;
        num2 = 1282803499;
      }
label_3:
      return;
label_98:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = -1987033951;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1890999256)) % 4U)
        {
          case 0:
            this.handleBishop(x);
            num1 = (int) num2 * 33120741 ^ 600164118;
            continue;
          case 1:
            this.handleRook(x);
            num1 = (int) num2 * 423814666 ^ -186160030;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
      this.addMove(x.File + 1, x.Rank - 1, x);
label_1:
      int num1 = -1551324682;
      bool canCastleKingSide;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -828142843)) % 23U)
        {
          case 0:
            goto label_1;
          case 1:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1035872688 ^ -1364515993;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = -1325307881;
            continue;
          case 4:
            num1 = (int) num2 * -1842329417 ^ 537228859;
            continue;
          case 5:
            int num3 = !canCastleKingSide ? 2118119865 : (num3 = 1859659753);
            num1 = num3 ^ (int) num2 * 1174316096;
            continue;
          case 6:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1328287731 ^ -1599809591;
            continue;
          case 7:
            num1 = (int) num2 * -1390346181 ^ -1384031547;
            continue;
          case 8:
            int num4 = flag ? -313761849 : (num4 = -875527658);
            num1 = num4 ^ (int) num2 * -1643853495;
            continue;
          case 9:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1431381115 ^ -1259090267;
            continue;
          case 10:
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 159739690 ^ 13970894;
            continue;
          case 11:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1797837102 ^ -116049564;
            continue;
          case 12:
            int num5;
            num1 = num5 = this.board.BlackCanCastleQueenSide ? -508635726 : (num5 = -1363628678);
            continue;
          case 13:
            flag = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 859284424 ^ -1447402620;
            continue;
          case 14:
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * -805928993 ^ -1092380569;
            continue;
          case 15:
            int num6;
            num1 = num6 = this.board.WhiteCanCastleQueenSide ? -841475570 : (num6 = -1594166772);
            continue;
          case 16:
            num1 = (int) num2 * 280419824 ^ 1226202860;
            continue;
          case 17:
            num1 = -972962483;
            continue;
          case 18:
            this.addMove(x.File - 1, x.Rank + 1, x);
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * -942058789 ^ 1115457200;
            continue;
          case 19:
            int num7 = !this.board.WhiteCanCastleKingSide ? 1512002659 : (num7 = 545542635);
            num1 = num7 ^ (int) num2 * 1685843889;
            continue;
          case 20:
            int num8;
            num1 = num8 = x.Piece.Color == PieceColor.Black ? -1112894170 : (num8 = -972962483);
            continue;
          case 21:
            canCastleKingSide = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * -404679270 ^ 1296989142;
            continue;
          case 22:
            num1 = (int) num2 * -787067525 ^ -558916725;
            continue;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
label_1:
      int num1 = -39274029;
      while (true)
      {
        uint num2;
        Square square2;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -775982271)) % 8U)
        {
          case 0:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 1281331554 ^ -81919026;
              continue;
            }
            break;
          case 1:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -944166948 ^ -147183395;
              continue;
            }
            break;
          case 2:
            square2 = this.board[x.File - 2, x.Rank];
            num1 = (int) num2 * -1535807931 ^ -403913827;
            continue;
          case 3:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -1542344794 ^ 170602967;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_1;
          case 6:
            square3 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * 1906182711 ^ 933446202;
            continue;
          case 7:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_12;
          default:
            goto label_14;
        }
        num3 = 0;
label_12:
        int num4;
        num1 = num4 = num3 != 0 ? -1345509270 : (num4 = -830491851);
      }
label_3:
      return;
label_14:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = 106636439;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1466214033)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -353293779 ^ 84900241;
            continue;
          case 3:
            square1 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * 811779261 ^ -553442345;
            continue;
          case 4:
            if (!square2.IsEmpty)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -577894161 ^ -1610095887;
            continue;
          case 5:
            square2 = this.board[x.File + 1, x.Rank];
            num1 = (int) num2 * 933300633 ^ -16911771;
            continue;
          case 6:
            num3 = square1.IsEmpty ? 1 : 0;
            break;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 != 0 ? 1779747879 : (num4 = 177595503);
      }
label_3:
      return;
label_12:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = -587063958;
      int num2;
      int b1;
      int num3;
      bool flag1;
      int num4;
      bool flag2;
      bool flag3;
      int num5;
      int a;
      bool flag4;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -283274396)) % 34U)
        {
          case 0:
            num2 = 1;
            num1 = -679684645;
            continue;
          case 1:
            flag3 = num2 < 8;
            num1 = -1904090790;
            continue;
          case 2:
            ++num3;
            num1 = -33991172;
            continue;
          case 3:
            num1 = (int) num6 * -1927565279 ^ -1687506583;
            continue;
          case 4:
            int num7 = flag3 ? 541090042 : (num7 = 101369292);
            num1 = num7 ^ (int) num6 * -829290822;
            continue;
          case 5:
            int num8;
            num1 = num8 = this.addMove(x.File + num4, x.Rank, x) ? -1106726416 : (num8 = -2063854015);
            continue;
          case 6:
            num1 = (int) num6 * 615710059 ^ 1796992823;
            continue;
          case 7:
            num1 = (int) num6 * -1037016814 ^ -2139885550;
            continue;
          case 8:
            num1 = -871971433;
            continue;
          case 9:
            ++num4;
            num1 = -230278327;
            continue;
          case 10:
            num1 = (int) num6 * -2041744647 ^ 1602960691;
            continue;
          case 11:
            num5 = 1;
            num1 = -1188436674;
            continue;
          case 12:
            num1 = (int) num6 * -817383233 ^ 480768709;
            continue;
          case 13:
            ++num5;
            num1 = -1201437015;
            continue;
          case 14:
            int b2 = x.Rank + num3;
            flag1 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * -568580591 ^ -1687351758;
            continue;
          case 15:
            goto label_1;
          case 16:
            num3 = 1;
            num1 = (int) num6 * 83716042 ^ 914074903;
            continue;
          case 17:
            a = x.File - num5;
            num1 = (int) num6 * 2091077405 ^ -1957989910;
            continue;
          case 18:
            flag4 = num3 < 8;
            num1 = -298319574;
            continue;
          case 19:
            num1 = (int) num6 * -1369525758 ^ 899113115;
            continue;
          case 20:
            int num9 = !flag2 ? -1453839959 : (num9 = -329229020);
            num1 = num9 ^ (int) num6 * -1682455022;
            continue;
          case 21:
            goto label_3;
          case 22:
            int num10 = flag1 ? 948893321 : (num10 = 855340492);
            num1 = num10 ^ (int) num6 * -606428947;
            continue;
          case 23:
            num1 = (int) num6 * 1239028699 ^ -1633693434;
            continue;
          case 24:
            int num11 = !flag4 ? -849285838 : (num11 = -1371101410);
            num1 = num11 ^ (int) num6 * 1966138105;
            continue;
          case 25:
            flag2 = this.addMove(a, x.Rank, x);
            num1 = (int) num6 * 48529067 ^ -2054462703;
            continue;
          case 26:
            num4 = 1;
            num1 = -1189527667;
            continue;
          case 27:
            int num12;
            num1 = num12 = num4 < 8 ? -342605927 : (num12 = -301146455);
            continue;
          case 28:
            b1 = x.Rank - num2;
            num1 = -1811124981;
            continue;
          case 29:
            int num13 = this.addMove(x.File, b1, x) ? -1521181543 : (num13 = -504416358);
            num1 = num13 ^ (int) num6 * 1655398860;
            continue;
          case 30:
            ++num2;
            num1 = -1216191645;
            continue;
          case 31:
            int num14;
            num1 = num14 = num5 < 8 ? -486106462 : (num14 = -336893793);
            continue;
          case 32:
            num1 = -78098496;
            continue;
          case 33:
            num1 = (int) num6 * -2045832484 ^ 2002035560;
            continue;
          default:
            goto label_36;
        }
      }
label_3:
      return;
label_36:;
    }

    private void handleBishop(Square x)
    {
      int num1 = 1;
label_36:
      int num2 = num1 < 8 ? -2005781533 : (num2 = -1575697737);
      int num3;
      bool flag1;
      bool flag2;
      int num4;
      int a1;
      bool flag3;
      int b1;
      bool flag4;
      int a2;
      int b2;
      bool flag5;
      int a3;
      int b3;
      int num5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ -359049579)) % 37U)
        {
          case 0:
            num2 = -228763150;
            continue;
          case 1:
            num2 = -1322187501;
            continue;
          case 2:
            int num7 = this.addMove(a1, b1, x) ? 1070453230 : (num7 = 1090811589);
            num2 = num7 ^ (int) num6 * 56240835;
            continue;
          case 3:
            a1 = x.File - num4;
            num2 = (int) num6 * -66816606 ^ 407175497;
            continue;
          case 4:
            num4 = 1;
            num2 = -524715087;
            continue;
          case 5:
            num2 = -16112166;
            continue;
          case 6:
            flag5 = this.addMove(a2, b2, x);
            num2 = (int) num6 * 1537276980 ^ -1340634469;
            continue;
          case 7:
            num2 = (int) num6 * -576817381 ^ 549887587;
            continue;
          case 8:
            b1 = x.Rank - num4;
            num2 = (int) num6 * 2026107083 ^ -975325241;
            continue;
          case 9:
            ++num1;
            num2 = (int) num6 * -1399946357 ^ -1120002495;
            continue;
          case 10:
            a3 = x.File + num5;
            b3 = x.Rank - num5;
            num2 = -245476560;
            continue;
          case 11:
            int num8 = !flag1 ? -770286304 : (num8 = -64679836);
            num2 = num8 ^ (int) num6 * -1089393385;
            continue;
          case 12:
            flag2 = this.addMove(x.File + num1, x.Rank + num1, x);
            num2 = (int) num6 * 2063743312 ^ -1698629388;
            continue;
          case 13:
            ++num3;
            num2 = (int) num6 * 1999397703 ^ -1098721044;
            continue;
          case 14:
            num3 = 1;
            num2 = -1615228557;
            continue;
          case 15:
            int num9 = !flag5 ? 1969116963 : (num9 = 1594896088);
            num2 = num9 ^ (int) num6 * 1496982623;
            continue;
          case 16:
            goto label_36;
          case 17:
            num2 = -19904953;
            continue;
          case 18:
            num2 = (int) num6 * 1796127509 ^ 164119320;
            continue;
          case 19:
            int num10 = flag2 ? -2030979870 : (num10 = -1711216576);
            num2 = num10 ^ (int) num6 * 279138766;
            continue;
          case 20:
            a2 = x.File - num3;
            b2 = x.Rank + num3;
            num2 = (int) num6 * 1466914107 ^ 947106829;
            continue;
          case 21:
            num2 = (int) num6 * 1695601952 ^ 280288790;
            continue;
          case 22:
            goto label_3;
          case 23:
            flag1 = num3 < 8;
            num2 = -398941392;
            continue;
          case 24:
            num2 = -2074392008;
            continue;
          case 25:
            num5 = 1;
            num2 = -391276240;
            continue;
          case 26:
            num2 = (int) num6 * -1940660828 ^ -498785869;
            continue;
          case 27:
            ++num4;
            num2 = (int) num6 * 1742954485 ^ 1847037218;
            continue;
          case 28:
            flag3 = this.addMove(a3, b3, x);
            num2 = (int) num6 * -1483603945 ^ -1713974675;
            continue;
          case 29:
            num2 = -2005781533;
            continue;
          case 30:
            flag4 = num4 < 8;
            num2 = -2133795517;
            continue;
          case 31:
            num2 = (int) num6 * 950000378 ^ 108787813;
            continue;
          case 32:
            int num11;
            num2 = num11 = num5 >= 8 ? -635873717 : (num11 = -865958610);
            continue;
          case 33:
            int num12 = flag3 ? -522621710 : (num12 = -550550945);
            num2 = num12 ^ (int) num6 * -1854711715;
            continue;
          case 34:
            int num13 = flag4 ? -259400307 : (num13 = -1889000774);
            num2 = num13 ^ (int) num6 * -65687438;
            continue;
          case 35:
            num2 = -58425110;
            continue;
          case 36:
            ++num5;
            num2 = -391276240;
            continue;
          default:
            goto label_39;
        }
      }
label_3:
      return;
label_39:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = 2001896093;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        Square sq;
        int File;
        int[] numArray1;
        int index;
        int Rank;
        int[] numArray2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1994917617)) % 21U)
        {
          case 0:
            num1 = (int) num2 * 1643575758 ^ 881414123;
            continue;
          case 1:
            piece = x.Piece;
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u202D‍⁪⁫‎‫‏‌⁬‪‪⁫‫​​‪‌‫‌⁫⁮⁭​⁮‫⁮‍‫⁮‍⁪‮‏‬‎‭‪⁫⁫⁮‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray2 = numArray3;
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u202D‍⁪⁫‎‫‏‌⁬‪‪⁫‫​​‪‌‫‌⁫⁮⁭​⁮‫⁮‍‫⁮‍⁪‮‏‬‎‭‪⁫⁫⁮‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray1 = numArray4;
            num1 = (int) num2 * 1814796484 ^ -2065203125;
            continue;
          case 2:
            num1 = (int) num2 * 1585558959 ^ 843341600;
            continue;
          case 3:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -658145089 ^ -30311424;
            continue;
          case 4:
            if (File >= 0)
            {
              num1 = (int) num2 * -1459972472 ^ -620312343;
              continue;
            }
            break;
          case 5:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 1037054492 ^ 1112793056;
              continue;
            }
            break;
          case 6:
            Rank = x.Rank + numArray1[index];
            num1 = (int) num2 * -620874471 ^ 201093274;
            continue;
          case 7:
            sq = this.board[File, Rank];
            int num4;
            num1 = num4 = !sq.IsEmpty ? 1082008885 : (num4 = 87815017);
            continue;
          case 8:
            goto label_1;
          case 9:
            File = x.File + numArray2[index];
            num1 = 680274928;
            continue;
          case 10:
            ++index;
            num1 = 21904451;
            continue;
          case 11:
            num1 = (int) num2 * 1384728553 ^ -1390642363;
            continue;
          case 12:
            goto label_3;
          case 13:
            num1 = 775041807;
            continue;
          case 14:
            flag = index < 8;
            num1 = 377906978;
            continue;
          case 15:
            if (File <= 7)
            {
              num1 = (int) num2 * -61271536 ^ 950631011;
              continue;
            }
            break;
          case 16:
            index = 0;
            num1 = (int) num2 * 1975214751 ^ 696836561;
            continue;
          case 17:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 794467882 ^ -413873935;
            continue;
          case 18:
            int num5;
            num1 = num5 = sq.Piece.Color == x.Piece.Color ? 1272901621 : (num5 = 709145355);
            continue;
          case 19:
            int num6 = !flag ? 923324703 : (num6 = 373551297);
            num1 = num6 ^ (int) num2 * -1627124177;
            continue;
          case 20:
            num3 = Rank > 7 ? 1 : 0;
            goto label_17;
          default:
            goto label_28;
        }
        num3 = 1;
label_17:
        int num7;
        num1 = num7 = num3 != 0 ? 1794299760 : (num7 = 75600987);
      }
label_3:
      return;
label_28:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = 1220554299;
      ChessPiece piece;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2057374163)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -358818568 ^ 1628932404;
            continue;
          case 2:
            goto label_1;
          case 3:
            piece = x.Piece;
            sq = this.board[a, b];
            num1 = (int) num2 * 1539237881 ^ -1524806742;
            continue;
          case 4:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * -193514611 ^ 50796966;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = -2114267012;
      bool flag1;
      while (true)
      {
        uint num2;
        UserAction kind;
        bool isEmpty;
        ChessPiece piece;
        Square sq;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1432945894)) % 29U)
        {
          case 0:
            num1 = (int) num2 * 1550528991 ^ -403808029;
            continue;
          case 1:
            int num5;
            num1 = num5 = sq.Piece.Color != x.Piece.Color ? -156848984 : (num5 = -1555658357);
            continue;
          case 2:
            int num6 = !flag2 ? 1546239806 : (num6 = 119330066);
            num1 = num6 ^ (int) num2 * 1778445445;
            continue;
          case 3:
            num1 = (int) num2 * -1394356296 ^ 1366733892;
            continue;
          case 4:
            flag3 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * -887897369 ^ 1759290661;
            continue;
          case 5:
            num1 = (int) num2 * 459694391 ^ 861982274;
            continue;
          case 6:
            piece = x.Piece;
            num1 = -1998465775;
            continue;
          case 7:
            if (a >= 0)
            {
              num1 = (int) num2 * -1289694220 ^ -175803038;
              continue;
            }
            break;
          case 8:
            int num7 = !flag3 ? -1435778401 : (num7 = -1593326589);
            num1 = num7 ^ (int) num2 * 675907250;
            continue;
          case 9:
            if (a <= 7)
            {
              num1 = (int) num2 * -1229039256 ^ 2136439623;
              continue;
            }
            break;
          case 10:
            kind = UserAction.Capture;
            num1 = (int) num2 * -136452535 ^ -511646946;
            continue;
          case 11:
            int num8 = isEmpty ? 1026521873 : (num8 = 1782007288);
            num1 = num8 ^ (int) num2 * -1651357910;
            continue;
          case 12:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            flag1 = true;
            num1 = -677658348;
            continue;
          case 13:
            num1 = (int) num2 * -306215800 ^ -1251080699;
            continue;
          case 14:
            sq = this.board[a, b];
            num1 = (int) num2 * -2059191793 ^ 1733502263;
            continue;
          case 15:
            num3 = b > 7 ? 1 : 0;
            goto label_14;
          case 16:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1400670603 ^ 824681168;
            continue;
          case 17:
            flag1 = true;
            num1 = (int) num2 * 1908613536 ^ 1316384860;
            continue;
          case 18:
            goto label_1;
          case 19:
            flag1 = false;
            num1 = -677658348;
            continue;
          case 20:
            if (b >= 0)
            {
              num1 = (int) num2 * 1988214720 ^ -1918695438;
              continue;
            }
            break;
          case 21:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * -1326839015 ^ 673738792;
            continue;
          case 22:
            num1 = -277672439;
            continue;
          case 23:
            num4 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            goto label_22;
          case 24:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * 1576949318 ^ -520245648;
            continue;
          case 25:
            flag1 = true;
            num1 = -1472693773;
            continue;
          case 27:
            if (x.Piece.Kind == Pieces.King)
            {
              num4 = 0;
              goto label_22;
            }
            else
            {
              num1 = (int) num2 * 1611251787 ^ 1522219605;
              continue;
            }
          case 28:
            num1 = (int) num2 * 1271912955 ^ -1347128900;
            continue;
          default:
            goto label_38;
        }
        num3 = 1;
label_14:
        flag2 = num3 != 0;
        num1 = -451977095;
        continue;
label_22:
        int num9;
        num1 = num9 = num4 != 0 ? -1087943859 : (num9 = -1680899639);
      }
label_38:
      return flag1;
    }

    static void \u202D‍⁪⁫‎‫‏‌⁬‪‪⁫‫​​‪‌‫‌⁫⁮⁭​⁮‫⁮‍‫⁮‍⁪‮‏‬‎‭‪⁫⁫⁮‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
