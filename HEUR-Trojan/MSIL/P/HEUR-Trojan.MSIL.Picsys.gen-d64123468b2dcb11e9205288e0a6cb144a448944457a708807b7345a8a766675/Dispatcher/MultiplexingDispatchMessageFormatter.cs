// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.MultiplexingDispatchMessageFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.ServiceModel.Channels;
using System.ServiceModel.Web;

namespace System.ServiceModel.Dispatcher
{
  internal class MultiplexingDispatchMessageFormatter : IDispatchMessageFormatter
  {
    private Dictionary<WebMessageFormat, IDispatchMessageFormatter> formatters;
    private WebMessageFormat defaultFormat;
    private Dictionary<WebMessageFormat, string> defaultContentTypes;

    public WebMessageFormat DefaultFormat => this.defaultFormat;

    public Dictionary<WebMessageFormat, string> DefaultContentTypes => this.defaultContentTypes;

    public MultiplexingDispatchMessageFormatter(
      Dictionary<WebMessageFormat, IDispatchMessageFormatter> formatters,
      WebMessageFormat defaultFormat)
    {
      this.formatters = formatters != null ? formatters : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (formatters));
      this.defaultFormat = defaultFormat;
      this.defaultContentTypes = new Dictionary<WebMessageFormat, string>();
    }

    public void DeserializeRequest(Message message, object[] parameters) => throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.SerializingRequestNotSupportedByFormatter, (object) this)));

    public Message SerializeReply(
      MessageVersion messageVersion,
      object[] parameters,
      object result)
    {
      WebOperationContext current = WebOperationContext.Current;
      OutgoingWebResponseContext webResponseContext = (OutgoingWebResponseContext) null;
      if (current != null)
        webResponseContext = current.OutgoingResponse;
      WebMessageFormat defaultFormat = this.defaultFormat;
      if (webResponseContext != null)
      {
        WebMessageFormat? format = webResponseContext.Format;
        if (format.HasValue)
          defaultFormat = format.Value;
      }
      if (!this.formatters.ContainsKey(defaultFormat))
      {
        string str = "<null>";
        // ISSUE: reference to a compiler-generated method
        MessageProperties messageProperties = OperationContext.Current != null ? OperationContext.Current.IncomingMessageProperties : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.OperationDoesNotSupportFormat, (object) str, (object) defaultFormat.ToString())));
        if (messageProperties.ContainsKey("HttpOperationName"))
          str = messageProperties["HttpOperationName"] as string;
      }
      else
      {
        if (webResponseContext != null && string.IsNullOrEmpty(webResponseContext.ContentType))
        {
          string selectionContentType = webResponseContext.AutomatedFormatSelectionContentType;
          if (!string.IsNullOrEmpty(selectionContentType))
          {
            if (!string.Equals(selectionContentType, this.defaultContentTypes[WebMessageFormat.Xml], StringComparison.OrdinalIgnoreCase))
              webResponseContext.ContentType = selectionContentType;
          }
          else if (defaultFormat != WebMessageFormat.Xml)
            webResponseContext.ContentType = this.defaultContentTypes[defaultFormat];
        }
        return this.formatters[defaultFormat].SerializeReply(messageVersion, parameters, result);
      }
    }

    public bool SupportsMessageFormat(WebMessageFormat format) => this.formatters.ContainsKey(format);
  }
}
