// Decompiled with JetBrains decompiler
// Type: ProtoBuf.Serializers.EnumSerializer
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;

namespace ProtoBuf.Serializers
{
  internal sealed class EnumSerializer : IProtoSerializer
  {
    private readonly Type enumType;
    private readonly EnumSerializer.EnumPair[] map;

    public EnumSerializer(Type enumType, EnumSerializer.EnumPair[] map)
    {
      this.enumType = (object) enumType != null ? enumType : throw new ArgumentNullException(nameof (enumType));
      this.map = map;
      if (map == null)
        return;
      for (int index1 = 1; index1 < map.Length; ++index1)
      {
        for (int index2 = 0; index2 < index1; ++index2)
        {
          if (map[index1].WireValue == map[index2].WireValue && !object.Equals(map[index1].RawValue, map[index2].RawValue))
            throw new ProtoException("Multiple enums with wire-value " + map[index1].WireValue.ToString());
          if (object.Equals(map[index1].RawValue, map[index2].RawValue) && map[index1].WireValue != map[index2].WireValue)
            throw new ProtoException("Multiple enums with deserialized-value " + map[index1].RawValue);
        }
      }
    }

    private ProtoTypeCode GetTypeCode()
    {
      Type type = Helpers.GetUnderlyingType(this.enumType);
      if ((object) type == null)
        type = this.enumType;
      return Helpers.GetTypeCode(type);
    }

    public Type ExpectedType => this.enumType;

    bool IProtoSerializer.RequiresOldValue => false;

    bool IProtoSerializer.ReturnsValue => true;

    private int EnumToWire(object value)
    {
      switch (this.GetTypeCode())
      {
        case ProtoTypeCode.SByte:
          return (int) (sbyte) value;
        case ProtoTypeCode.Byte:
          return (int) (byte) value;
        case ProtoTypeCode.Int16:
          return (int) (short) value;
        case ProtoTypeCode.UInt16:
          return (int) (ushort) value;
        case ProtoTypeCode.Int32:
          return (int) value;
        case ProtoTypeCode.UInt32:
          return (int) (uint) value;
        case ProtoTypeCode.Int64:
          return (int) (long) value;
        case ProtoTypeCode.UInt64:
          return (int) (ulong) value;
        default:
          throw new InvalidOperationException();
      }
    }

    private object WireToEnum(int value)
    {
      switch (this.GetTypeCode())
      {
        case ProtoTypeCode.SByte:
          return Enum.ToObject(this.enumType, (sbyte) value);
        case ProtoTypeCode.Byte:
          return Enum.ToObject(this.enumType, (byte) value);
        case ProtoTypeCode.Int16:
          return Enum.ToObject(this.enumType, (short) value);
        case ProtoTypeCode.UInt16:
          return Enum.ToObject(this.enumType, (ushort) value);
        case ProtoTypeCode.Int32:
          return Enum.ToObject(this.enumType, value);
        case ProtoTypeCode.UInt32:
          return Enum.ToObject(this.enumType, (uint) value);
        case ProtoTypeCode.Int64:
          return Enum.ToObject(this.enumType, (long) value);
        case ProtoTypeCode.UInt64:
          return Enum.ToObject(this.enumType, (ulong) value);
        default:
          throw new InvalidOperationException();
      }
    }

    public object Read(object value, ProtoReader source)
    {
      int num = source.ReadInt32();
      if (this.map == null)
        return this.WireToEnum(num);
      for (int index = 0; index < this.map.Length; ++index)
      {
        if (this.map[index].WireValue == num)
          return (object) this.map[index].TypedValue;
      }
      source.ThrowEnumException(this.ExpectedType, num);
      return (object) null;
    }

    public void Write(object value, ProtoWriter dest)
    {
      if (this.map == null)
      {
        ProtoWriter.WriteInt32(this.EnumToWire(value), dest);
      }
      else
      {
        for (int index = 0; index < this.map.Length; ++index)
        {
          if (object.Equals((object) this.map[index].TypedValue, value))
          {
            ProtoWriter.WriteInt32(this.map[index].WireValue, dest);
            return;
          }
        }
        ProtoWriter.ThrowEnumException(dest, value);
      }
    }

    public struct EnumPair
    {
      public readonly object RawValue;
      public readonly Enum TypedValue;
      public readonly int WireValue;

      public EnumPair(int wireValue, object raw, Type type)
      {
        this.WireValue = wireValue;
        this.RawValue = raw;
        this.TypedValue = (Enum) Enum.ToObject(type, raw);
      }
    }
  }
}
