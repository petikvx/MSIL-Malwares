// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: 司6, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E96108F1-63B0-49D9-ABCC-EB6314F0AFE2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-81e7927ab5ca518d06687dc18d5c4df22198011494322486e562136344d2513b.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = 2140459305;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1365467995)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 2028193204 ^ 709105948;
            continue;
          case 3:
            this.b = board;
            num1 = (int) num2 * 209137024 ^ 1550464842;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestSinglePiece(Pieces x)
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1798994011;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1385363587)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 2043191307 ^ -213792995;
            continue;
          case 1:
            this.b.WhiteCanCastleKingSide = false;
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 2141345308 ^ 546602681;
            continue;
          case 2:
            this.b.DisableTurns = true;
            num1 = -1407228322;
            continue;
          case 3:
            int num3 = x == Pieces.King ? -1820550979 : (num3 = -1023801239);
            num1 = num3 ^ (int) num2 * 930180668;
            continue;
          case 4:
            num1 = (int) num2 * -573793322 ^ -1167473378;
            continue;
          case 5:
            num1 = (int) num2 * 991138134 ^ -361703395;
            continue;
          case 6:
            num1 = (int) num2 * 2042858295 ^ -882219466;
            continue;
          case 7:
            this.b.addWhite(4, 4, x);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -524526095 ^ 555560049;
            continue;
          case 8:
            goto label_3;
          case 9:
            goto label_1;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 1996592771;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 842918054)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * 49232274 ^ 2036175827;
            continue;
          case 2:
            num1 = (int) num2 * 2063765735 ^ -1449993111;
            continue;
          case 3:
            num1 = (int) num2 * -776896763 ^ -2008476163;
            continue;
          case 4:
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 773484855 ^ -8563446;
            continue;
          case 5:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -945475592 ^ 1595276612;
            continue;
          case 6:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -1334381487 ^ -1662288529;
            continue;
          case 7:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 1480434520 ^ -1007084272;
            continue;
          case 8:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 588666995 ^ 1514005911;
            continue;
          case 9:
            num1 = (int) num2 * 1870760324 ^ -708564996;
            continue;
          case 10:
            this.b.addBlack(6, 6, Pieces.Pawn);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 340633982 ^ 605317201;
            continue;
          case 11:
            goto label_3;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -1957225717;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1776613260)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -1570168346 ^ 126666633;
            continue;
          case 1:
            this.b.addWhite(4, 6, Pieces.Pawn);
            this.b.addBlack(3, 7, Pieces.King);
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * -617904316 ^ -1320392784;
            continue;
          case 2:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 864377112 ^ -150699723;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -414155985 ^ -306110917;
            continue;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 357566115 ^ -1485615521;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.b.ClearBoard();
            num1 = (int) num2 * -1338050773 ^ -1139743573;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1396449094;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -316718151)) % 10U)
        {
          case 0:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1888198418 ^ 1248267612;
            continue;
          case 1:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 150973889 ^ -2040036388;
            continue;
          case 2:
            num1 = (int) num2 * -530110144 ^ -152514636;
            continue;
          case 4:
            num1 = (int) num2 * -312767386 ^ 1977592831;
            continue;
          case 5:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 1266341790 ^ -1643924061;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -201542602 ^ 1840116932;
            continue;
          case 8:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -311612467 ^ -1751171559;
            continue;
          case 9:
            this.b.addBlack(4, 7, Pieces.King);
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 821995953 ^ -532534525;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this.b.lights.FindAllMoves();
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 1315100809;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1136681770)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -1810615310 ^ -1636820988;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1934608253 ^ -1045873279;
            continue;
          case 2:
            num1 = (int) num2 * 1244780305 ^ 854462189;
            continue;
          case 3:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -944982771 ^ -497378643;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.b.ClearBoard();
            num1 = (int) num2 * 1752696784 ^ -1553444647;
            continue;
          case 6:
            num1 = (int) num2 * -1241387492 ^ 548999603;
            continue;
          case 7:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1369359926 ^ -1519049879;
            continue;
          case 8:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * 319229042 ^ -180076486;
            continue;
          case 9:
            goto label_3;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -502099623;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -173914572)) % 5U)
        {
          case 0:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * 298680336 ^ -153207575;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -477126895 ^ -2049502047;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.ClearBoard();
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1137790147 ^ 331088648;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -361511162;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -76416876)) % 15U)
        {
          case 0:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1525986595 ^ 1481232791;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1468799998 ^ 1722240575;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.b.ClearBoard();
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 556927891 ^ -912445717;
            continue;
          case 4:
            num1 = (int) num2 * 1426126330 ^ 934365791;
            continue;
          case 5:
            num1 = (int) num2 * 1099461667 ^ 1540656892;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -1147739285 ^ 1620829101;
            continue;
          case 8:
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -1107603777 ^ -698664142;
            continue;
          case 9:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -171174660 ^ -1623520827;
            continue;
          case 10:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1203594445 ^ -1658609633;
            continue;
          case 11:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * -670640314 ^ 1520405652;
            continue;
          case 12:
            num1 = (int) num2 * 1997319166 ^ 503390157;
            continue;
          case 13:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * -1639420719 ^ -286067079;
            continue;
          case 14:
            num1 = (int) num2 * -290502021 ^ 1761725273;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }
  }
}
