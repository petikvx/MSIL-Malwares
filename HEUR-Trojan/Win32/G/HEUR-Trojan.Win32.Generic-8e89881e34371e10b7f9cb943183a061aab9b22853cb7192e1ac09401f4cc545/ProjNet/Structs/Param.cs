// Decompiled with JetBrains decompiler
// Type: ProjNet.Structs.Param
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Serialization;
using System;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;

namespace ProjNet.Structs
{
  internal class Param : ErrorFacadeSerializer
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Param(TextReader task)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_1;
            case 1:
            case 2:
              // ISSUE: explicit constructor call
              base.\u002Ector(task, true);
              flag = task == null;
              goto case 3;
            case 3:
              if (flag)
              {
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto case 1;
              }
              else
                goto label_9;
            case 5:
              goto label_8;
            default:
              if (!Param.StartList())
              {
                num2 = 3;
                continue;
              }
              goto label_8;
          }
        }
label_1:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 2;
      }
label_9:
      return;
label_8:
      throw new ArgumentNullException("reader");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void ValidateProcess(string last)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 1:
            flag = this.MoveProcess() != last;
            goto case 2;
          case 2:
          case 4:
            if (flag)
            {
              num2 = 5;
              break;
            }
            goto label_9;
          case 3:
            int num3 = (int) this.ConcatProcess();
            num2 = 0;
            break;
          case 5:
            goto label_8;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_9:
      return;
label_8:
      throw new ArgumentException(string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "Expecting ('{3}') but got a '{0}' at line {1} column {2}.", (object) this.MoveProcess(), (object) this.UpdateProcess(), (object) this.RemoveProcess(), (object) last));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string AwakeProcess()
    {
      int num = 3;
      if (Param.StartList())
        ;
      string str1;
      string str2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            str1 = "";
            if (true)
            {
              num = 2;
              continue;
            }
            goto case 1;
          case 1:
          case 2:
            this.ValidateProcess("\"");
            int process1 = (int) this.ComputeProcess(false);
            goto case 5;
          case 4:
            str2 = str1;
            if (Param.RegisterList())
            {
              num = 6;
              continue;
            }
            goto case 0;
          case 5:
            if (this.MoveProcess() != "\"")
            {
              str1 += this.MoveProcess();
              int process2 = (int) this.ComputeProcess(false);
              if (Param.RegisterList())
              {
                num = 5;
                continue;
              }
              goto label_11;
            }
            else
              goto case 4;
          case 6:
            goto label_11;
          default:
            num = 4;
            continue;
        }
      }
label_11:
      return str2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalculateProcess(ref string item, ref long pred)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          bool flag;
          switch (num2)
          {
            case 0:
            case 1:
              if (!flag)
                break;
              goto label_9;
            case 2:
              flag = this.MoveProcess() != "AUTHORITY";
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto case 5;
            case 3:
            case 4:
label_1:
              long.TryParse(this.AwakeProcess(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out pred);
              this.ValidateProcess("]");
              num2 = 6;
              continue;
            case 5:
              this.ValidateProcess("AUTHORITY");
              break;
            case 6:
              goto label_10;
            default:
              goto label_7;
          }
          this.ValidateProcess("[");
          item = this.AwakeProcess();
          this.ValidateProcess(",");
          goto label_1;
        }
label_7:
        num1 = 4;
        continue;
label_9:
        num1 = 5;
      }
label_10:;
    }

    internal static bool RegisterList() => true;

    internal static bool StartList() => false;
  }
}
