// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: CustomQueryInterfaceMo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B293447-7555-427F-9A9F-AB127E35E000
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d42aac0420fddf3828862d0a9a1e79708beccbc282bf11d5b45daa35c47ba73f.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u200C‫⁬‬⁭‏‌‍⁮‌‪‌‫‏⁪‪⁮⁭‪‍‪‫‍⁮⁯​‍‫‬​‌⁫⁮‮​‍⁬‮⁬‎‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -1413188458;
        bool finished1;
        bool finished2;
        int index;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1290406912)) % 16U)
          {
            case 1:
              index = 0;
              num1 = (int) num2 * 1755521534 ^ 1541838342;
              continue;
            case 2:
              int num3 = !finished1 ? -1831371571 : (num3 = -1624148433);
              num1 = num3 ^ (int) num2 * 1829754115;
              continue;
            case 3:
              goto label_1;
            case 4:
              ++index;
              num1 = -1410410532;
              continue;
            case 5:
              finished2 = true;
              num1 = (int) num2 * 76832198 ^ -2123347223;
              continue;
            case 6:
              finished1 = this._finished;
              num1 = (int) num2 * 1110891284 ^ 1054432714;
              continue;
            case 7:
              num1 = (int) num2 * 1491202968 ^ -1466433800;
              continue;
            case 8:
              num1 = (int) num2 * -714139022 ^ -1744102420;
              continue;
            case 9:
              finished2 = true;
              num1 = (int) num2 * -239746759 ^ 1994641820;
              continue;
            case 10:
              int num4;
              num1 = num4 = playerStates[index].State != State.Playing ? -741925596 : (num4 = -340920738);
              continue;
            case 11:
              playerStates = this._playerStates;
              num1 = -629453167;
              continue;
            case 12:
              int num5;
              num1 = num5 = index < playerStates.Length ? -1937545350 : (num5 = -1513015419);
              continue;
            case 13:
              num1 = (int) num2 * 1614453882 ^ 1357120162;
              continue;
            case 14:
              finished2 = false;
              num1 = (int) num2 * -1865970916 ^ -1662172201;
              continue;
            case 15:
              num1 = (int) num2 * -880213798 ^ 1336165942;
              continue;
            default:
              goto label_17;
          }
        }
label_17:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = 1745417125;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1910867806)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -725677063 ^ -51802781;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = -1901887683;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -395474037)) % 9U)
        {
          case 1:
            this.Winners.Clear();
            num1 = (int) num2 * -988273372 ^ 1933893763;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * -176408229 ^ -346900884;
            continue;
          case 3:
            num1 = (int) num2 * -505606979 ^ -296162587;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -516657761 ^ 542263926;
            continue;
          case 6:
            this.Losers.Clear();
            num1 = (int) num2 * 88936548 ^ 1750857306;
            continue;
          case 7:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1038538057 ^ -1116765283;
            continue;
          case 8:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * -1312227560 ^ 2024193266;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_5:
      bool flag1 = index < this.Players.Length;
      int num1 = -459722698;
      Player player;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      bool morePlanningSprint;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -63544716)) % 26U)
        {
          case 0:
            playerState.Sprint = 0;
            num1 = (int) num3 * 121027496 ^ 1078367299;
            continue;
          case 1:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -1552775611;
            continue;
          case 2:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 406060743 ^ 2037289105;
            continue;
          case 3:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1686747617 ^ 1088207077;
            continue;
          case 4:
            num1 = (int) num3 * -1482254252 ^ 1062010671;
            continue;
          case 5:
            playerState.State = State.Playing;
            num1 = (int) num3 * 139052676 ^ 311076159;
            continue;
          case 6:
            num1 = (int) num3 * -1028521952 ^ 904563478;
            continue;
          case 7:
            int num4 = !flag2 ? 678496250 : (num4 = 529670063);
            num1 = num4 ^ (int) num3 * 336133980;
            continue;
          case 8:
            int num5;
            num1 = num5 = num2 <= 0 ? -1383646649 : (num5 = -1275711795);
            continue;
          case 9:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -1365824982 ^ -74559505;
            continue;
          case 10:
            num1 = -1641642507;
            continue;
          case 11:
            goto label_5;
          case 12:
            num1 = (int) num3 * -1328291103 ^ 651193827;
            continue;
          case 13:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -2052750218 ^ 1246976550;
            continue;
          case 14:
            int num6 = !flag1 ? -190175766 : (num6 = -1996026872);
            num1 = num6 ^ (int) num3 * -754829364;
            continue;
          case 15:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 489902579 ^ 147859077;
            continue;
          case 16:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = -1360579145;
            continue;
          case 17:
            num1 = (int) num3 * -1622034026 ^ -658356140;
            continue;
          case 18:
            num1 = -371018096;
            continue;
          case 19:
            playerState.Sprint = 1;
            num1 = (int) num3 * -99469988 ^ -2007281818;
            continue;
          case 20:
            goto label_3;
          case 21:
            ++index;
            num1 = (int) num3 * -1097900028 ^ -1700297415;
            continue;
          case 22:
            playerState.Sprint = -1;
            num1 = (int) num3 * -2038813970 ^ 920482833;
            continue;
          case 23:
            int num7 = morePlanningSprint ? 1859877576 : (num7 = 1002461348);
            num1 = num7 ^ (int) num3 * -2044319568;
            continue;
          case 24:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = -1420609164;
            continue;
          case 25:
            num2 = 0;
            num1 = -1566976554;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 1872981308;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1026133405)) % 15U)
        {
          case 0:
            this.Print((object) Game.\u202A⁭⁯⁬⁬⁭⁬‮‍‏‫⁭‍‌‪⁪‎‏​⁮⁬⁭‭‌⁬‬‫⁪‎‬⁫⁪‏​‎‭⁫‫⁯‬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 590734227;
            continue;
          case 1:
            int num3 = !flag ? 1062208105 : (num3 = 1702143421);
            num1 = num3 ^ (int) num2 * -1079878070;
            continue;
          case 2:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1727978117 ^ -90216720;
            continue;
          case 3:
            this.Print((object) Game.\u200B⁭⁪⁯‪⁪​⁬‌‬‪⁪‮⁬‮‪⁫⁭⁬⁭⁭‬‎​​‭‫‌‪‏‍‎‭⁯⁮‏‏‪⁭‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -77624545 ^ -1215047503;
            continue;
          case 4:
            goto label_1;
          case 5:
            ++this._currentPlayer;
            flag = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -1468465669 ^ 946861654;
            continue;
          case 6:
            num1 = (int) num2 * -719979530 ^ 927017757;
            continue;
          case 7:
            num1 = (int) num2 * -537088064 ^ 741049472;
            continue;
          case 8:
            this.PlayerTurn(this._currentPlayer);
            num1 = 718067057;
            continue;
          case 9:
            num1 = (int) num2 * -1821565510 ^ -1795873136;
            continue;
          case 10:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1952910048 ^ 2051573043;
            continue;
          case 11:
            goto label_3;
          case 12:
            this._currentPlayer = 0;
            num1 = (int) num2 * -2117528707 ^ -1003728423;
            continue;
          case 13:
            num1 = (int) num2 * -1724708018 ^ 638948439;
            continue;
          case 14:
            int num4 = this._currentTurn > 0 ? 394443248 : (num4 = 831697943);
            num1 = num4 ^ (int) num2 * -635907785;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = -1642777215;
      while (true)
      {
        uint num2;
        Card card;
        bool flag1;
        bool flag2;
        bool flag3;
        PlayerState playerState1;
        bool flag4;
        int num3;
        PlayerState playerState2;
        int index;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        int num4;
        int num5;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool flag14;
        bool flag15;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1012253028)) % 82U)
        {
          case 0:
            ++num3;
            num1 = -1347396534;
            continue;
          case 1:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 690066152 ^ -1486378975;
            continue;
          case 2:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200B⁭⁪⁯‪⁪​⁬‌‬‪⁪‮⁬‮‪⁫⁭⁬⁭⁭‬‎​​‭‫‌‪‏‍‎‭⁯⁮‏‏‪⁭‮("\t", playerState3 != null ? Game.\u206F‮​​⁫⁭⁪⁬‫⁫⁮‌⁪‪‮⁫⁫‮⁬‪‎‮‍⁪⁪‎⁪⁬⁫‬‬⁮⁬⁭⁭⁮⁯⁮⁭⁫‮((object) playerState3) : (string) null));
            num1 = -1320637807;
            continue;
          case 3:
            num1 = (int) num2 * -997828997 ^ -1761114594;
            continue;
          case 4:
            num1 = (int) num2 * 282406583 ^ -1931193254;
            continue;
          case 5:
            num1 = (int) num2 * 200559637 ^ -1195476004;
            continue;
          case 6:
            int num7 = !flag3 ? 74543223 : (num7 = 1675794300);
            num1 = num7 ^ (int) num2 * -808595078;
            continue;
          case 7:
            num1 = -1217317467;
            continue;
          case 8:
            num1 = (int) num2 * -236255275 ^ -573106189;
            continue;
          case 9:
            flag7 = true;
            num1 = (int) num2 * -29907278 ^ -923995196;
            continue;
          case 10:
            this.Losers.Add(num3);
            num1 = (int) num2 * -613560613 ^ -20583116;
            continue;
          case 11:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 12:
            num1 = (int) num2 * -1444795960 ^ -1376793627;
            continue;
          case 13:
            int num8 = flag4 ? -1534961195 : (num8 = -1840398183);
            num1 = num8 ^ (int) num2 * -265124480;
            continue;
          case 14:
            playerState1.State = State.Lose;
            int num9 = this.Losers.Contains(playerIndex) ? -102338765 : (num9 = -1940625957);
            num1 = num9 ^ (int) num2 * 1859023475;
            continue;
          case 15:
            num1 = (int) num2 * 770818482 ^ 1822939821;
            continue;
          case 16:
            int num10 = !flag6 ? 1455653964 : (num10 = 30676365);
            num1 = num10 ^ (int) num2 * -422802288;
            continue;
          case 17:
            flag9 = index < this._playerStates.Length;
            num1 = -1892480282;
            continue;
          case 18:
            int num11 = !flag11 ? -1012748516 : (num11 = -769364104);
            num1 = num11 ^ (int) num2 * -2083531551;
            continue;
          case 19:
            num1 = (int) num2 * -1248894423 ^ 1276863106;
            continue;
          case 20:
            int num12 = !flag9 ? 1969548120 : (num12 = 520463927);
            num1 = num12 ^ (int) num2 * -847311394;
            continue;
          case 21:
            num1 = (int) num2 * 1833063684 ^ -880644079;
            continue;
          case 22:
            num1 = (int) num2 * -1039652860 ^ -2119590171;
            continue;
          case 23:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag14 ? (object) "ALL " : (object) "", flag1 ? (object) "receives" : (object) "pays", (object) Game.\u206E‬⁮‮‏⁪‪‍⁭‪⁯‎‪⁫‪‍‫⁪⁬‪‫‬⁮‏‌‍⁫‬‮‌⁮‏⁯‍‌⁮‭‮‭‭‮(num5), flag7 ? (object) "advance" : (object) "stay");
            int num13;
            num1 = num13 = !flag14 ? -1151570640 : (num13 = -2004843712);
            continue;
          case 24:
            num1 = (int) num2 * -1037017764 ^ -1121748994;
            continue;
          case 25:
            num1 = (int) num2 * -536375394 ^ 133135782;
            continue;
          case 26:
            flag4 = playerState1.Sprint < 0;
            num1 = -1196360483;
            continue;
          case 27:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * -928234659 ^ 1567634304;
            continue;
          case 28:
            int num14;
            num1 = num14 = num3 >= this._playerStates.Length ? -842197068 : (num14 = -750085030);
            continue;
          case 29:
            flag7 = false;
            num1 = -1977352922;
            continue;
          case 30:
            num1 = (int) num2 * -658931772 ^ -1462526689;
            continue;
          case 31:
            flag3 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -109736642;
            continue;
          case 32:
            int num15 = !flag13 ? -1161946114 : (num15 = -1371985047);
            num1 = num15 ^ (int) num2 * 657832932;
            continue;
          case 33:
            goto label_3;
          case 34:
            num5 = Game.\u202C‪‍‎‮⁮⁮‍‎‏‬⁫⁯‬‭‪‪‪‫‎⁫‌⁮‌​‌​‮‏⁬‬‬⁮⁪⁪‪‭‎‭‪‮(0, num4);
            num1 = (int) num2 * 1513802057 ^ 1693740057;
            continue;
          case 35:
            goto label_1;
          case 36:
            playerState2.State = State.Lose;
            flag5 = !this.Losers.Contains(index);
            num1 = -690960462;
            continue;
          case 37:
            playerState2 = this._playerStates[index];
            num1 = -1862242187;
            continue;
          case 38:
            num1 = -1592989005;
            continue;
          case 39:
            num1 = -1123226920;
            continue;
          case 40:
            int num16 = !flag2 ? -797089418 : (num16 = -2144116278);
            num1 = num16 ^ (int) num2 * 413143700;
            continue;
          case 41:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 491416229 ^ 1052657797;
            continue;
          case 42:
            num1 = (int) num2 * 611303378 ^ 1505045215;
            continue;
          case 43:
            num1 = (int) num2 * -2042829715 ^ -877826322;
            continue;
          case 44:
            num1 = -443451522;
            continue;
          case 45:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 539660515 ^ -1861658704;
            continue;
          case 46:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            int num17 = !this.Rules.OnlyOneWinner ? 726858098 : (num17 = 879546940);
            num1 = num17 ^ (int) num2 * -682608044;
            continue;
          case 47:
            num1 = (int) num2 * -634746090 ^ -564357620;
            continue;
          case 48:
            index = 0;
            num1 = -947492871;
            continue;
          case 49:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 600903985 ^ -1489111042;
            continue;
          case 50:
            flag2 = !this.Losers.Contains(num3);
            num1 = -1558983512;
            continue;
          case 51:
            flag6 = playerState1.State != 0;
            num1 = (int) num2 * -1222278518 ^ -147227134;
            continue;
          case 52:
            playerState1.Resources -= num5;
            flag10 = playerState1.Resources < 0;
            num1 = (int) num2 * -923947329 ^ 919521450;
            continue;
          case 53:
            flag12 = playerState2.Resources >= 0;
            num1 = (int) num2 * -203502984 ^ 1729129236;
            continue;
          case 54:
            num1 = (int) num2 * 1750007324 ^ -1527316678;
            continue;
          case 55:
            playerState2.Resources -= Game.\u202C‪‍‎‮⁮⁮‍‎‏‬⁫⁯‬‭‪‪‪‫‎⁫‌⁮‌​‌​‮‏⁬‬‬⁮⁪⁪‪‭‎‭‪‮(0, num5 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 596759010 ^ 1388231129;
            continue;
          case 56:
            num1 = -614159328;
            continue;
          case 57:
            flag8 = flag7;
            num1 = -1160377981;
            continue;
          case 58:
            ++index;
            num1 = -746493201;
            continue;
          case 59:
            this.Losers.Add(index);
            num1 = (int) num2 * -1796449121 ^ 30733056;
            continue;
          case 60:
            flag7 = true;
            num1 = (int) num2 * 2106318764 ^ 2030368701;
            continue;
          case 61:
            num1 = -1727462811;
            continue;
          case 62:
            flag7 = num4 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -235491638 ^ -712086492;
            continue;
          case 63:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * -1403991141 ^ -1655813435;
            continue;
          case 64:
            num1 = -622453521;
            continue;
          case 65:
            num1 = (int) num2 * -1279947461 ^ 159705139;
            continue;
          case 66:
            int num18 = flag5 ? 628886859 : (num18 = 27662857);
            num1 = num18 ^ (int) num2 * -138709641;
            continue;
          case 67:
            num1 = (int) num2 * -442857879 ^ -1229334492;
            continue;
          case 68:
            num1 = (int) num2 * -563262718 ^ 529434842;
            continue;
          case 69:
            num1 = (int) num2 * -1846829506 ^ -999847456;
            continue;
          case 70:
            this.Print((object) Game.\u200B⁭⁪⁯‪⁪​⁬‌‬‪⁪‮⁬‮‪⁫⁭⁬⁭⁭‬‎​​‭‫‌‪‏‍‎‭⁯⁮‏‏‪⁭‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 1398532406 ^ 1591816729;
            continue;
          case 71:
            flag11 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -772056002;
            continue;
          case 72:
            int num19 = flag15 ? -2107687345 : (num19 = -96499236);
            num1 = num19 ^ (int) num2 * 65732769;
            continue;
          case 73:
            num1 = -742245390;
            continue;
          case 74:
            card = this.DrawCard();
            flag1 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 796063178 ^ -1506954291;
              continue;
            }
            num6 = 0;
            break;
          case 75:
            int num20 = !flag8 ? 1446832888 : (num20 = 457442328);
            num1 = num20 ^ (int) num2 * -1875693283;
            continue;
          case 76:
            int num21 = flag10 ? -1519607918 : (num21 = -43470515);
            num1 = num21 ^ (int) num2 * 599411245;
            continue;
          case 77:
            ++playerState1.Sprint;
            num1 = (int) num2 * -129912101 ^ -1224517754;
            continue;
          case 78:
            int num22 = !flag12 ? 1519726146 : (num22 = 470238418);
            num1 = num22 ^ (int) num2 * 770448055;
            continue;
          case 79:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 329950048 ^ 744318971;
            continue;
          case 80:
            num5 = card.Impact;
            num1 = (int) num2 * -1870852091 ^ 904448503;
            continue;
          case 81:
            flag15 = num3 == playerIndex;
            num1 = (int) num2 * 1817162916 ^ 1081801182;
            continue;
          default:
            goto label_87;
        }
        flag14 = num6 != 0;
        flag13 = !flag1;
        num1 = -1442121104;
      }
label_3:
      return;
label_87:;
    }

    private Card DrawCard()
    {
      if (this._deck.Count > 0)
        goto label_7;
label_1:
      int num1 = 432020362;
label_2:
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 492160010)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 100603067 ^ -1768205982;
            continue;
          case 2:
            card2 = card1;
            num1 = (int) num2 * 1387600270 ^ 477582677;
            continue;
          case 3:
            goto label_7;
          case 4:
            goto label_1;
          case 5:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1834771785 ^ 962170715;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * -1312905655 ^ -1292136242;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card2;
label_7:
      card1 = this._deck[0];
      num1 = 1493532643;
      goto label_2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = 871270940;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1372150064)) % 8U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206F‮​​⁫⁭⁪⁬‫⁫⁮‌⁪‪‮⁫⁫‮⁬‪‎‮‍⁪⁪‎⁪⁬⁫‬‬⁮⁬⁭⁭⁮⁯⁮⁭⁫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200D‏​⁫⁯‎⁫‬‎‏⁬​​‪⁯‎⁯‪‬‫‫‎‏⁮​‍‌⁮‍⁯‍‎‭‎⁫‭‏‭‬⁫‮(strArray);
            ++index;
            num1 = 87393151;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * 1777012756 ^ 771130785;
            continue;
          case 3:
            num1 = (int) num2 * -1047586610 ^ 784406325;
            continue;
          case 4:
            index = 0;
            num1 = (int) num2 * 813330716 ^ 2000404595;
            continue;
          case 5:
            int num3 = !flag ? 1724363879 : (num3 = 1651129781);
            num1 = num3 ^ (int) num2 * 505744025;
            continue;
          case 6:
            goto label_1;
          case 7:
            flag = index < this._playerStates.Length;
            num1 = 881913037;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 418433723;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1969054744)) % 3U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1350103383 ^ -294993000;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 1261724271;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 48243432)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u200F⁫⁮⁬‎‎​‬‎⁫⁬‫⁪⁪‏⁪‌‪⁪‮‬⁭‌⁮⁬​‏‍‌⁪‍‬‭‪​‏‌‌⁬‌‮(this._buffer, str);
            num1 = (int) num2 * 592470673 ^ 1009624331;
            continue;
          case 2:
            goto label_3;
          case 3:
            str = Game.\u206F⁬‌⁫‎‍‮⁭​‪‫‬⁫‍‎⁯⁬‬‫‭⁪​‏‏‌​‌‬‫⁯‌‌‍‪‬‫‌⁭‮‭‮(Game.\u206F‮​​⁫⁭⁪⁬‫⁫⁮‌⁪‪‮⁫⁫‮⁬‪‎‮‍⁪⁪‎⁪⁬⁫‬‬⁮⁬⁭⁭⁮⁯⁮⁭⁫‮(text), more);
            num1 = (int) num2 * 467247226 ^ -47947645;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u200C‫⁬‬⁭‏‌‍⁮‌‪‌‫‏⁪‪⁮⁭‪‍‪‫‍⁮⁯​‍‫‬​‌⁫⁮‮​‍⁬‮⁬‎‮([In] int obj0) => new Random(obj0);

    static string \u202A⁭⁯⁬⁬⁭⁬‮‍‏‫⁭‍‌‪⁪‎‏​⁮⁬⁭‭‌⁬‬‫⁪‎‬⁫⁪‏​‎‭⁫‫⁯‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200B⁭⁪⁯‪⁪​⁬‌‬‪⁪‮⁬‮‪⁫⁭⁬⁭⁭‬‎​​‭‫‌‪‏‍‎‭⁯⁮‏‏‪⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202C‪‍‎‮⁮⁮‍‎‏‬⁫⁯‬‭‪‪‪‫‎⁫‌⁮‌​‌​‮‏⁬‬‬⁮⁪⁪‪‭‎‭‪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206E‬⁮‮‏⁪‪‍⁭‪⁯‎‪⁫‪‍‫⁪⁬‪‫‬⁮‏‌‍⁫‬‮‌⁮‏⁯‍‌⁮‭‮‭‭‮([In] int obj0) => Math.Abs(obj0);

    static string \u206F‮​​⁫⁭⁪⁬‫⁫⁮‌⁪‪‮⁫⁫‮⁬‪‎‮‍⁪⁪‎⁪⁬⁫‬‬⁮⁬⁭⁭⁮⁯⁮⁭⁫‮([In] object obj0) => obj0.ToString();

    static string \u200D‏​⁫⁯‎⁫‬‎‏⁬​​‪⁯‎⁯‪‬‫‫‎‏⁮​‍‌⁮‍⁯‍‎‭‎⁫‭‏‭‬⁫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F⁬‌⁫‎‍‮⁭​‪‫‬⁫‍‎⁯⁬‬‫‭⁪​‏‏‌​‌‬‫⁯‌‌‍‪‬‫‌⁭‮‭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200F⁫⁮⁬‎‎​‬‎⁫⁬‫⁪⁪‏⁪‌‪⁪‮‬⁭‌⁮⁬​‏‍‌⁪‍‬‭‪​‏‌‌⁬‌‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
