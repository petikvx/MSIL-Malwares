// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Listeners.Server
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Definitions;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;
using TYPELIBA.Pages;

namespace TYPELIBA.Listeners
{
  public class Server : Field, CallbackStateDef, Worker
  {
    private RulesAccountCollection iterator;
    private RulesAccountCollection m_Tag;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Server(
      string init,
      string pred,
      long filter,
      string instance2,
      string def3,
      string reference4,
      RulesAccountCollection asset5,
      RulesAccountCollection var16)
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            this.m_Tag = var16;
            num = 5;
            continue;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector(init, pred, filter, instance2, reference4, def3);
            this.iterator = asset5;
            goto case 0;
          case 3:
            ManagerParamsID.NewExpression();
            num = 4;
            continue;
          case 5:
            goto label_6;
          default:
            num = 0;
            continue;
        }
      }
label_6:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public RulesAccountCollection TestState() => this.iterator;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void MoveState(RulesAccountCollection info) => this.iterator = info;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public RulesAccountCollection CollectState() => this.m_Tag;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ConcatState(RulesAccountCollection def) => this.m_Tag = def;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public RegAccountPage DefineState() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public List<double[]> VerifyState(List<double[]> def) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public List<double[]> CreateState(List<double[]> first) => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object config)
    {
      int num1 = 2;
      Server server;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_6;
            case 1:
            case 5:
              if (!flag)
              {
                server = config as Server;
                goto case 4;
              }
              else
                goto label_8;
            case 3:
              goto label_1;
            case 4:
              if (server.TestState().CompareState((object) this.TestState()))
              {
                num2 = 6;
                continue;
              }
              goto label_12;
            case 6:
              goto label_11;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_6:
        flag = !(config is Server);
        num1 = 5;
        continue;
label_8:
        num1 = 3;
      }
label_1:
      return false;
label_11:
      int num3 = server.CollectState().CompareState((object) this.CollectState()) ? 1 : 0;
      goto label_13;
label_12:
      num3 = 0;
label_13:
      return num3 != 0;
    }

    internal static bool CalcDispatcher() => true;

    internal static bool InstantiateDispatcher() => false;
  }
}
