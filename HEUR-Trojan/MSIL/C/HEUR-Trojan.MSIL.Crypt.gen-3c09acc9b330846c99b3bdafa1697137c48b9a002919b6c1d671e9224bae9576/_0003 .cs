// Decompiled with JetBrains decompiler
// Type:  
// Assembly: SafeHeapHandleCa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 86070057-00F7-426E-5B63-54B8EF531843
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-3c09acc9b330846c99b3bdafa1697137c48b9a002919b6c1d671e9224bae9576.exe

using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;

public sealed class \u0003\u2002 : \u000E\u2000
{
  private Image[] \u0002;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private Size \u0003;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private Size \u0005;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private int[,] \u0008;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private int \u0006;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0003\u2002(\u0008\u2001 _param1)
  {
    int num1 = 1;
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
          // ISSUE: reference to a compiler-generated method
          this.CountVisitor(new Size(40, 40));
          num2 = 2;
          break;
        case 1:
          // ISSUE: explicit constructor call
          base.\u002Ector((Image) null, Point.Empty);
          num1 = 0;
          continue;
        case 2:
          // ISSUE: reference to a compiler-generated method
          this.AddState(new Size(10, 15));
          goto case 3;
        case 3:
        case 5:
          Size size = this.RevertVisitor();
          int width = size.Width;
          size = this.RevertVisitor();
          int height = size.Height;
          // ISSUE: reference to a compiler-generated method
          this.UpdateState(new int[width, height]);
          if (!\u0003\u2002.\u0003())
          {
            num1 = 6;
            continue;
          }
          goto case 2;
        case 4:
        case 6:
          this.\u0002 = new Image[7]
          {
            _param1.QueryState(),
            _param1.DisableState(),
            _param1.MoveState(),
            _param1.VisitState(),
            _param1.ResolveState(),
            _param1.CompareState(),
            _param1.ResetState()
          };
          num2 = 7;
          break;
        case 7:
          goto label_9;
        default:
          num1 = 5;
          continue;
      }
      num1 = num2;
    }
label_9:;
  }

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public Size ChangeVisitor() => this.\u0003;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public Size RevertVisitor() => this.\u0005;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u0002() => this.\u0006;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002(int _param1) => this.\u0006 = _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool \u0002(Point _param1)
  {
    int num1 = 0;
    bool flag;
    while (true)
    {
      Size size;
      int num2;
      switch (num1)
      {
        case 0:
          int y = _param1.Y;
          size = this.RevertVisitor();
          int height = size.Height;
          if (y < height)
          {
            num1 = 5;
            continue;
          }
          num2 = 1;
          break;
        case 1:
        case 5:
          int x = _param1.X;
          size = this.RevertVisitor();
          int width = size.Width;
          num2 = x >= width ? 1 : 0;
          break;
        case 2:
        case 4:
          goto label_2;
        case 3:
        case 6:
          goto label_11;
        default:
          num1 = 3;
          continue;
      }
      if (num2 == 0)
      {
        // ISSUE: reference to a compiler-generated method
        flag = this.ComputeState()[_param1.X, _param1.Y] > 0;
        num1 = 6;
      }
      else if (\u0003\u2002.\u0002())
        num1 = 4;
      else
        goto label_11;
    }
label_2:
    flag = true;
label_11:
    return flag;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002(\u000F\u2000 _param1)
  {
    int num1 = 0;
    while (true)
    {
      bool flag1;
      int index1;
      Size size;
      int index2;
      int num2;
      bool flag2;
      int num3;
      bool flag3;
      switch (num1)
      {
        case 0:
          flag1 = _param1 == null;
          int num4 = 10;
          num1 = \u0003\u2002.\u0003() ? num4 : num4;
          continue;
        case 1:
          if (!flag2)
          {
            num1 = 11;
            continue;
          }
          index1 = 0;
          break;
        case 2:
          goto label_18;
        case 3:
        case 6:
          ++index1;
          break;
        case 4:
          if (!flag3)
            goto case 3;
          else
            goto case 7;
        case 5:
        case 9:
          int num5 = index2;
          size = _param1.AwakeVisitor();
          int height = size.Height;
          flag2 = num5 < height;
          num2 = 1;
          goto label_19;
        case 7:
          Point point1;
          ref Point local = ref point1;
          int num6 = index1;
          Point point2 = _param1.ViewVisitor();
          int x1 = point2.X;
          int x2 = num6 + x1;
          int num7 = index2;
          point2 = _param1.ViewVisitor();
          int y1 = point2.Y;
          int y2 = num7 + y1;
          local = new Point(x2, y2);
          // ISSUE: reference to a compiler-generated method
          this.ComputeState()[point1.X, point1.Y] = num3;
          num2 = 3;
          goto label_19;
        case 8:
          goto label_11;
        case 10:
          if (flag1)
          {
            num1 = 8;
            continue;
          }
          index2 = 0;
          num2 = 9;
          goto label_19;
        case 11:
          goto label_7;
        default:
          num2 = 7;
          goto label_19;
      }
      int num8 = index1;
      size = _param1.AwakeVisitor();
      int width = size.Width;
      if (num8 >= width)
      {
        ++index2;
        if (\u0003\u2002.\u0002())
        {
          num1 = 5;
          continue;
        }
        break;
      }
      num3 = _param1.CheckVisitor()[index2, index1];
      flag3 = num3 > 0;
      num2 = 4;
label_19:
      num1 = num2;
    }
    return;
label_18:
    return;
label_11:
    return;
label_7:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002(\u000F\u2000 _param1, int _param2)
  {
    int num1 = 4;
    if (!\u0003\u2002.\u0003())
      goto label_3;
label_1:
    \u000F\u2000 obj = _param1;
    Point point1 = _param1.ViewVisitor();
    Size size1;
    Size size2;
    int x = point1.X - (size1.Width - size2.Width);
    point1 = _param1.ViewVisitor();
    int y = point1.Y;
    Point point2 = new Point(x, y);
    obj.TestVisitor(point2);
    goto label_16;
label_2:
    int num2;
    num1 = num2;
label_3:
    bool flag1;
    Point point3;
    bool flag2;
    bool flag3;
    while (true)
    {
      switch (num1)
      {
        case 0:
          goto label_16;
        case 1:
          if (!flag1)
          {
            point3 = _param1.ViewVisitor();
            size2 = _param1.AwakeVisitor();
            _param1.\u0002(_param2);
            int num3 = 6;
            num1 = \u0003\u2002.\u0003() ? num3 : num3;
            continue;
          }
          goto label_19;
        case 2:
        case 6:
          flag2 = this.\u0002(_param1, Point.Empty);
          if (!\u0003\u2002.\u0003())
          {
            num1 = 3;
            continue;
          }
          goto label_18;
        case 3:
          if (flag2)
          {
            size1 = _param1.AwakeVisitor();
            int num4 = 5;
            num1 = \u0003\u2002.\u0003() ? num4 : num4;
            continue;
          }
          goto label_9;
        case 4:
          goto label_5;
        case 5:
          goto label_1;
        case 7:
        case 8:
          goto label_15;
        case 9:
          if (flag3)
          {
            _param1.\u0002(_param2 * -1);
            if (\u0003\u2002.\u0002())
            {
              num1 = 8;
              continue;
            }
            goto label_15;
          }
          else
            goto label_7;
        case 10:
          goto label_12;
        default:
          if (\u0003\u2002.\u0002())
          {
            num1 = 0;
            continue;
          }
          goto label_5;
      }
    }
label_12:
    return;
label_5:
    flag1 = _param1 == null;
    num2 = 1;
    goto label_2;
label_19:
    return;
label_9:
    return;
label_7:
    return;
label_15:
    _param1.TestVisitor(point3);
    num2 = 10;
    goto label_2;
label_18:
    return;
label_16:
    flag3 = this.\u0002(_param1, Point.Empty);
    num2 = 9;
    goto label_2;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool \u0002(\u000F\u2000 _param1, Point _param2)
  {
    int num1 = 3;
    bool flag1;
    while (true)
    {
      int num2 = num1;
      int index1;
      int index2;
      int num3;
      bool flag2;
      while (true)
      {
        bool flag3;
        Point point;
        switch (num2)
        {
          case 0:
          case 4:
          case 13:
            goto label_24;
          case 1:
          case 5:
            if (!flag2)
            {
              index2 = 0;
              goto label_5;
            }
            else
              goto label_19;
          case 2:
            goto label_7;
          case 3:
            goto label_17;
          case 6:
            point = new Point(_param1.ViewVisitor().X + index1 + _param2.X, _param1.ViewVisitor().Y + index2 + _param2.Y);
            goto case 10;
          case 7:
label_3:
            if (!flag3)
            {
              ++index2;
              goto label_5;
            }
            else
              goto label_23;
          case 8:
            if (num3 <= 0)
              break;
            goto label_9;
          case 9:
          case 11:
label_10:
            flag3 = index1 < _param1.AwakeVisitor().Width;
            num2 = 7;
            continue;
          case 10:
            if (this.\u0002(point))
            {
              num2 = 12;
              continue;
            }
            break;
          case 12:
            goto label_20;
          default:
            goto label_14;
        }
        ++index1;
        if (!\u0003\u2002.\u0003())
        {
          num2 = 11;
          continue;
        }
        goto label_3;
label_5:
        if (index2 >= _param1.AwakeVisitor().Height)
        {
          flag1 = false;
          if (\u0003\u2002.\u0002())
            num2 = 13;
          else
            break;
        }
        else
        {
          index1 = 0;
          goto label_10;
        }
      }
label_7:
      flag1 = true;
      num1 = 4;
      continue;
label_9:
      num1 = 6;
      continue;
label_14:
      num1 = 10;
      continue;
label_17:
      flag2 = _param1 == null;
      num1 = 5;
      continue;
label_19:
      num1 = 2;
      continue;
label_20:
      flag1 = true;
      num1 = 0;
      continue;
label_23:
      num3 = _param1.CheckVisitor()[index2, index1];
      num1 = 8;
    }
label_24:
    return flag1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002()
  {
    int num1 = 8;
    while (true)
    {
      int num2 = num1;
      int index1;
      int num3;
      bool flag1;
      int index2;
      bool flag2;
      while (true)
      {
        int index3;
        bool flag3;
        bool flag4;
        int index4;
        int num4;
        int num5;
        switch (num2)
        {
          case 0:
            index4 = index2;
            goto case 15;
          case 1:
          case 9:
          case 10:
            goto label_6;
          case 2:
          case 16:
            goto label_5;
          case 3:
            if (!flag2)
            {
              num2 = 17;
              continue;
            }
            goto label_11;
          case 4:
          case 5:
            if (index1 < this.RevertVisitor().Width)
            {
              // ISSUE: reference to a compiler-generated method
              num4 = this.ComputeState()[index1, index2];
              num2 = 7;
              continue;
            }
            goto label_2;
          case 6:
            ++index3;
            break;
          case 7:
            num3 += num4 > 0 ? 1 : 0;
            ++index1;
            num2 = 5;
            continue;
          case 8:
            goto label_12;
          case 11:
label_29:
            if (flag1)
            {
              num5 = this.\u0002();
              num2 = 12;
              continue;
            }
            goto label_28;
          case 12:
            this.\u0002(num5 + 1);
            goto case 0;
          case 13:
            if (!flag3)
            {
              --index4;
              num2 = 15;
              continue;
            }
            flag4 = index4 > 0;
            num2 = 14;
            continue;
          case 14:
            if (flag4)
            {
              // ISSUE: reference to a compiler-generated method
              // ISSUE: reference to a compiler-generated method
              this.ComputeState()[index3, index4] = this.ComputeState()[index3, index4 - 1];
              goto case 6;
            }
            else
            {
              // ISSUE: reference to a compiler-generated method
              this.ComputeState()[index3, index4] = 0;
              num2 = 6;
              continue;
            }
          case 15:
            if (index4 >= 0)
            {
              index3 = 0;
              break;
            }
            goto label_28;
          case 17:
            goto label_18;
          default:
            num2 = 0;
            continue;
        }
        flag3 = index3 < this.RevertVisitor().Width;
        num2 = 13;
        continue;
label_28:
        ++index2;
        if (\u0003\u2002.\u0002())
          num2 = 9;
        else
          goto label_29;
      }
label_2:
      flag1 = num3 == this.RevertVisitor().Width;
      num1 = 11;
      continue;
label_5:
      index1 = 0;
      num1 = 4;
      continue;
label_6:
      flag2 = index2 < this.RevertVisitor().Height;
      num1 = 3;
      continue;
label_11:
      num3 = 0;
      num1 = 16;
      continue;
label_12:
      index2 = 0;
      num1 = 10;
    }
label_18:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override void \u000E\u2000\u200A\u2001\u0002(\u000E\u2002 _param1)
  {
    int num1 = 9;
    while (true)
    {
      int num2 = num1;
      int num3;
      int index1;
      int index2;
      while (true)
      {
        Point point;
        Size size;
        Image image;
        switch (num2)
        {
          case 0:
label_16:
            int num4 = index2;
            size = this.RevertVisitor();
            int height1 = size.Height;
            if (num4 >= height1)
            {
              num2 = 10;
              continue;
            }
            goto label_10;
          case 1:
            if (num3 > 0)
            {
              num2 = 3;
              continue;
            }
            break;
          case 2:
          case 4:
          case 8:
            int num5 = index1;
            size = this.RevertVisitor();
            int width1 = size.Width;
            if (num5 < width1)
            {
              index2 = 0;
              num2 = 0;
              continue;
            }
            goto label_13;
          case 3:
            ref Point local = ref point;
            int num6 = index1;
            size = this.ChangeVisitor();
            int width2 = size.Width;
            int x = num6 * width2;
            int num7 = index2;
            size = this.ChangeVisitor();
            int height2 = size.Height;
            int y = num7 * height2;
            local = new Point(x, y);
            goto case 6;
          case 5:
            _param1.\u0002(image, point);
            break;
          case 6:
            image = this.\u0002[num3 - 1];
            num2 = 5;
            continue;
          case 7:
          case 10:
            goto label_11;
          case 9:
            goto label_18;
          case 11:
            goto label_9;
          default:
            goto label_6;
        }
        ++index2;
        goto label_16;
      }
label_6:
      num1 = 6;
      continue;
label_10:
      // ISSUE: reference to a compiler-generated method
      num3 = this.ComputeState()[index1, index2];
      num1 = 1;
      continue;
label_11:
      ++index1;
      num1 = 2;
      continue;
label_13:
      num1 = 11;
      continue;
label_18:
      index1 = 0;
      num1 = 4;
    }
label_9:;
  }

  internal new static bool \u0002() => true;

  internal new static bool \u0003() => false;
}
