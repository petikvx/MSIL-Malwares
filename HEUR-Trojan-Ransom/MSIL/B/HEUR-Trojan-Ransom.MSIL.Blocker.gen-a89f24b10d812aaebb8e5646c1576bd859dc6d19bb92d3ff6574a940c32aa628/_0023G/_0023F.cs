// Decompiled with JetBrains decompiler
// Type: #G.#F
// Assembly: 2012, Version=0.0.0.0, Culture=neutral, PublicKeyToken=6bd9dd2807ddb306
// MVID: 60A44901-35B0-4353-8B52-C0C6D76F7330
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a89f24b10d812aaebb8e5646c1576bd859dc6d19bb92d3ff6574a940c32aa628.exe

using \u0023G;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0023G
{
  internal sealed class \u0023F
  {
    private static readonly string \u0023z = "1";
    private static readonly string \u0023A = "40";
    private static readonly byte[] \u0023B = (byte[]) null;
    private static readonly Hashtable \u0023g = (Hashtable) null;
    private static readonly bool \u0023C = false;
    private static readonly int \u0023D = 0;

    [\u0023H]
    [\u0023I]
    public static string \u0023E([In] int obj0)
    {
      obj0 -= \u0023F.\u0023D;
      if (\u0023F.\u0023C)
      {
        string str = (string) \u0023F.\u0023g[(object) obj0];
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] b1 = \u0023F.\u0023B;
      int index1 = num1;
      int index2 = index1 + 1;
      int num2 = (int) b1[index1];
      int count;
      if ((num2 & 128) == 0)
      {
        count = num2;
        if (count == 0)
          return string.Empty;
      }
      else if ((num2 & 64) == 0)
      {
        count = ((num2 & 63) << 8) + (int) \u0023F.\u0023B[index2++];
      }
      else
      {
        int num3 = (num2 & 31) << 24;
        byte[] b2 = \u0023F.\u0023B;
        int index3 = index2;
        int num4 = index3 + 1;
        int num5 = (int) b2[index3] << 16;
        int num6 = num3 + num5;
        byte[] b3 = \u0023F.\u0023B;
        int index4 = num4;
        int num7 = index4 + 1;
        int num8 = (int) b3[index4] << 8;
        int num9 = num6 + num8;
        byte[] b4 = \u0023F.\u0023B;
        int index5 = num7;
        index2 = index5 + 1;
        int num10 = (int) b4[index5];
        count = num9 + num10;
      }
      try
      {
        byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0023F.\u0023B, index2, count));
        string str = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
        if (\u0023F.\u0023C)
        {
          try
          {
            \u0023F.\u0023g.Add((object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0023F()
    {
      if (\u0023F.\u0023z == "1")
      {
        \u0023F.\u0023C = true;
        \u0023F.\u0023g = new Hashtable();
      }
      \u0023F.\u0023D = Convert.ToInt32(\u0023F.\u0023A);
      using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("{62e88cba-8f69-4525-a3c3-5ecabfe80049}"))
      {
        int int32 = Convert.ToInt32(manifestResourceStream.Length);
        byte[] buffer = new byte[int32];
        manifestResourceStream.Read(buffer, 0, int32);
        \u0023F.\u0023B = \u0023\u0023.\u0023uc(buffer);
        manifestResourceStream.Close();
      }
    }
  }
}
