// Decompiled with JetBrains decompiler
// Type: ⁯⁭⁭⁫‪‍‏⁯‬‪⁫⁯‬⁭⁭⁫⁭‭⁮⁭⁮‍‫‮‎⁫⁮‬⁯⁭⁫‏‌‏‪‎​​​⁯‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u206F⁭⁭⁫‪‍‏⁯‬‪⁫⁯‬⁭⁭⁫⁭‭⁮⁭⁮‍‫‮‎⁫⁮‬⁯⁭⁫‏‌‏‪‎​​​⁯‮ : 
  \u206F⁪‍⁯‬‌‮‏⁬​⁮‫⁮⁬‬‭‪⁫⁪⁪⁯⁮⁮‎‌‭‮‎​‌⁫‭⁮⁬‮‌⁫​⁯⁪‮
{
  private \u202A⁯⁯⁭⁪⁯‪‎‮‬‮⁮‍⁯‫‎⁫‪‪​⁭⁬‌⁯⁮‏‍⁪⁪‎‏⁫⁭⁯‮⁮⁭‏‏‍‮ \u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮;
  private \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮ \u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮;
  private bool \u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮;
  private \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮ \u200D⁯‪‪‬⁭⁬‬⁬​‮⁯‪⁪⁯⁯‌⁬⁯‏‍‏‫‮⁭‬‪⁪‌‭⁪‏‫⁫⁪​‎‭⁭‏‮;

  public \u206F⁭⁭⁫‪‍‏⁯‬‪⁫⁯‬⁭⁭⁫⁭‭⁮⁭⁮‍‫‮‎⁫⁮‬⁯⁭⁫‏‌‏‪‎​​​⁯‮(
    \u206F‮‪⁭⁮‮‏⁭⁮⁫‏‬‫‏‬‍‪‫⁯⁪‏⁫⁯‫⁫‮‪‮‌‌⁭‪‪‌⁮‫‭⁪⁭‪‮ _param1)
  {
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮ = new \u202A⁯⁯⁭⁪⁯‪‎‮‬‮⁮‍⁯‫‎⁫‪‪​⁭⁬‌⁯⁮‏‍⁪⁪‎‏⁫⁭⁯‮⁮⁭‏‏‍‮(_param1);
  }

  public virtual void \u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(
    bool _param1,
    \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ _param2)
  {
    this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮ = _param1;
    if (_param2 is \u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮)
    {
      \u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮ obj = (\u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮) _param2;
      this.\u200D⁯‪‪‬⁭⁬‬⁬​‮⁯‪⁪⁯⁯‌⁬⁯‏‍‏‫‮⁭‬‪⁪‌‭⁪‏‫⁫⁪​‎‭⁭‏‮ = obj.\u206A‫⁯‭⁯⁭‫‌‍​⁭‬‮‪⁭⁭⁬⁯‍​‌‮‪⁪‬⁮⁭‬‌⁬⁬⁬‌‭‏‏⁭⁬​‏‮;
      this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮ = obj.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮ as \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮;
    }
    else
    {
      if (_param1)
        this.\u200D⁯‪‪‬⁭⁬‬⁬​‮⁯‪⁪⁯⁯‌⁬⁯‏‍‏‫‮⁭‬‪⁪‌‭⁪‏‫⁫⁪​‎‭⁭‏‮ = new \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮();
      this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮ = _param2 as \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮;
    }
    if (this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮ == null)
      throw new ArgumentException("RFC3211Wrap requires an IV", "param");
  }

  public virtual string \u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ => this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206F‍‬‪⁭⁭⁬⁪⁭⁪‌‎‮‌‍⁮⁪⁮⁯‪‭⁬‭‬‪​⁭⁮⁫‬⁪⁫⁪​‏​‎⁪‍‭‮().\u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ + "/RFC3211Wrap";

  public virtual byte[] \u202B⁯‏⁮​‏⁭⁯⁯⁯‭​⁪⁮⁫‎‌‮‪‫⁮‏‭⁬⁬⁯⁫‍⁪‮‏‌‍‌‬‪‎⁭‬⁭‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (!this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
      throw new InvalidOperationException("not set for wrapping");
    if (_param3 > (int) byte.MaxValue || _param3 < 0)
      throw new ArgumentException("input must be from 0 to 255 bytes", "inLen");
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(true, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮);
    int num = this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
    byte[] destinationArray = _param3 + 4 >= num * 2 ? new byte[(_param3 + 4) % num == 0 ? _param3 + 4 : ((_param3 + 4) / num + 1) * num] : new byte[num * 2];
    destinationArray[0] = (byte) _param3;
    Array.Copy((Array) _param1, _param2, (Array) destinationArray, 4, _param3);
    this.\u200D⁯‪‪‬⁭⁬‬⁬​‮⁯‪⁪⁯⁯‌⁬⁯‏‍‏‫‮⁭‬‪⁪‌‭⁪‏‫⁫⁪​‎‭⁭‏‮.\u206C‮⁪‭⁬‎‏⁪⁫‏‬⁫⁯‌⁬​‭‍⁫⁬‮‌​‪⁪‍⁮​⁯⁭​‬⁮⁬⁫‫⁭‫‬‮(destinationArray, _param3 + 4, destinationArray.Length - _param3 - 4);
    destinationArray[1] = ~destinationArray[4];
    destinationArray[2] = ~destinationArray[5];
    destinationArray[3] = ~destinationArray[6];
    for (int index = 0; index < destinationArray.Length; index += num)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(destinationArray, index, destinationArray, index);
    for (int index = 0; index < destinationArray.Length; index += num)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(destinationArray, index, destinationArray, index);
    return destinationArray;
  }

  public virtual byte[] \u206D‬‍⁫⁯‮‮​‌​‍‎‏‫⁪‬⁬⁪‪​⁬​⁫​‫‫⁬​⁫‭⁯‪⁪⁪⁭‍⁮​‬‍‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
      throw new InvalidOperationException("not set for unwrapping");
    int length = this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
    byte[] numArray = _param3 >= 2 * length ? new byte[_param3] : throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("input too short");
    byte[] destinationArray1 = new byte[length];
    Array.Copy((Array) _param1, _param2, (Array) numArray, 0, _param3);
    Array.Copy((Array) _param1, _param2, (Array) destinationArray1, 0, destinationArray1.Length);
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(false, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮(this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮, destinationArray1));
    for (int index = length; index < numArray.Length; index += length)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(numArray, index, numArray, index);
    Array.Copy((Array) numArray, numArray.Length - destinationArray1.Length, (Array) destinationArray1, 0, destinationArray1.Length);
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(false, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮(this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮, destinationArray1));
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(numArray, 0, numArray, 0);
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(false, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮);
    for (int index = 0; index < numArray.Length; index += length)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(numArray, index, numArray, index);
    bool flag = (int) numArray[0] > numArray.Length - 4;
    byte[] destinationArray2 = !flag ? new byte[(int) numArray[0]] : new byte[numArray.Length - 4];
    Array.Copy((Array) numArray, 4, (Array) destinationArray2, 0, destinationArray2.Length);
    int num1 = 0;
    for (int index = 0; index != 3; ++index)
    {
      byte num2 = ~numArray[1 + index];
      num1 |= (int) num2 ^ (int) numArray[4 + index];
    }
    Array.Clear((Array) numArray, 0, numArray.Length);
    if (num1 != 0 | flag)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("wrapped key corrupted");
    return destinationArray2;
  }
}
