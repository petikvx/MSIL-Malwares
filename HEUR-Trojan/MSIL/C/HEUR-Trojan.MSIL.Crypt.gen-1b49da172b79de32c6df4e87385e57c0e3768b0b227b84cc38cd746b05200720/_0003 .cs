// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CustomQueryInterfaceResult, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C313905-EBD1-4523-EACC-B48B0BED3910
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b49da172b79de32c6df4e87385e57c0e3768b0b227b84cc38cd746b05200720.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

public sealed class \u0003\u2004
{
  private string \u0002;
  private Dictionary<\u0003\u2004.\u0002, string> \u0003;

  public \u0003\u2004(string _param1 = "Consolas")
  {
    this.\u0003 = new Dictionary<\u0003\u2004.\u0002, string>();
    this.\u0002 = _param1;
  }

  public string \u0002() => this.\u0002;

  public Size \u0002(string _param1, string _param2, float _param3, double _param4)
  {
    if (Operators.CompareString(_param2, string.Empty, false) == 0)
      _param2 = this.\u0002;
    this.\u0002(Conversions.ToString(_param1[0]), _param2, _param3);
    \u0003\u2004.\u0002 obj = new \u0003\u2004.\u0002(_param1[0], _param2, _param3);
    Size size1;
    ref Size local = ref size1;
    Size size2 = obj.\u0002();
    int width = checked ((int) Math.Round(unchecked ((double) size2.Width * _param4 * (double) _param1.Length + 0.6)));
    size2 = obj.\u0002();
    int height = size2.Height;
    local = new Size(width, height);
    return size1;
  }

  public void \u0002(
    string _param1,
    int _param2,
    int _param3,
    ConsoleColor _param4,
    string _param5,
    float _param6,
    string _param7,
    double _param8)
  {
    if (Operators.CompareString(_param5, string.Empty, false) == 0)
      _param5 = this.\u0002;
    this.\u0002(_param1, _param5, _param6);
    Console.ForegroundColor = _param4;
    try
    {
      int num1 = checked (_param1.Length - 1);
      int index1 = 0;
      while (index1 <= num1)
      {
        \u0003\u2004.\u0002 key = new \u0003\u2004.\u0002(_param1[index1], _param5, _param6);
        string str1 = this.\u0003[key];
        Size size = key.\u0002();
        int num2 = checked (size.Height - 1);
        int num3 = 0;
        while (num3 <= num2)
        {
          Console.CursorTop = checked (num3 + _param3);
          Console.CursorLeft = _param2;
          size = key.\u0002();
          int num4 = checked (size.Width - 1);
          int num5 = 0;
          while (num5 <= num4)
          {
            string str2 = str1;
            int num6 = num5;
            int num7 = num3;
            size = key.\u0002();
            int width = size.Width;
            int num8 = checked (num7 * width);
            int index2 = checked (num6 + num8);
            if (Operators.CompareString(Conversions.ToString(str2[index2]), \u0006\u2004.\u0002(670555527), false) == 0)
              Console.Write(_param7);
            else
              checked { ++Console.CursorLeft; }
            checked { ++num5; }
          }
          checked { ++num3; }
        }
        double num9 = (double) _param2;
        size = key.\u0002();
        double num10 = (double) size.Width * _param8;
        _param2 = checked ((int) Math.Round(unchecked (num9 + num10)));
        checked { ++index1; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void \u0002(string _param1, string _param2, float _param3)
  {
    Point point = new Point(0, 0);
    using (SolidBrush solidBrush = new SolidBrush(Color.White))
    {
      using (Font font = new Font(_param2, _param3, FontStyle.Regular))
      {
        Size size = new Size(font.Height, font.Height);
        checked { --size.Width; }
        checked { --size.Height; }
        using (Bitmap bitmap = new Bitmap(size.Width, size.Height, PixelFormat.Format16bppRgb555))
        {
          Rectangle rect = new Rectangle(0, 0, bitmap.Width, bitmap.Height);
          using (Graphics graphics = Graphics.FromImage((Image) bitmap))
          {
            int num1 = checked (_param1.Length - 1);
            int index = 0;
            while (index <= num1)
            {
              char ch = _param1[index];
              \u0003\u2004.\u0002 key = new \u0003\u2004.\u0002(ch, _param2, _param3);
              if (!this.\u0003.ContainsKey(key))
              {
                graphics.Clear(Color.Black);
                graphics.DrawString(Conversions.ToString(ch), font, (Brush) solidBrush, (PointF) point);
                object Instance = (object) bitmap.LockBits(rect, ImageLockMode.ReadOnly, bitmap.PixelFormat);
                object objectValue1 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (Type) null, \u0006\u2004.\u0002(670555535), new object[0], (string[]) null, (Type[]) null, (bool[]) null));
                object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (Type) null, \u0006\u2004.\u0002(670555507), new object[0], (string[]) null, (Type[]) null, (bool[]) null));
                object Right = Operators.IntDivideObject(objectValue2, (object) bitmap.Width);
                string str = string.Empty;
                int num2 = checked (bitmap.Height - 1);
                int Left1 = 0;
                while (Left1 <= num2)
                {
                  int num3 = checked (bitmap.Width - 1);
                  int Left2 = 0;
                  while (Left2 <= num3)
                  {
                    int integer = Conversions.ToInteger(Operators.AddObject(Operators.MultiplyObject((object) Left2, Right), Operators.MultiplyObject((object) Left1, objectValue2)));
                    str = Marshal.ReadByte(RuntimeHelpers.GetObjectValue(objectValue1), checked (integer + 0)) != (byte) 0 ? str + \u0006\u2004.\u0002(670555527) : str + \u0006\u2004.\u0002(670563780);
                    checked { ++Left2; }
                  }
                  str += \u0006\u2004.\u0002(670558328);
                  checked { ++Left1; }
                }
                this.\u0003.Add(key, str.Replace(\u0006\u2004.\u0002(670558328), string.Empty));
                bitmap.UnlockBits((BitmapData) Instance);
              }
              checked { ++index; }
            }
          }
        }
      }
    }
  }

  private sealed class \u0002 : IEquatable<\u0003\u2004.\u0002>
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private char \u0002;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private string \u0003;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private float \u0005;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private Size \u0008;
    private int \u0006;

    public \u0002(char _param1, string _param2, float _param3)
    {
      this.\u0002 = _param1;
      this.\u0003 = _param2;
      this.\u0005 = _param3;
      using (SHA256Managed shA256Managed = new SHA256Managed())
      {
        byte[] bytes = Encoding.Unicode.GetBytes(string.Format(\u0006\u2004.\u0002(670555543), (object) _param1, (object) _param2, (object) _param3));
        shA256Managed.ComputeHash(bytes);
      }
      using (Font font = new Font(_param2, _param3, FontStyle.Regular))
        this.\u0008 = new Size(checked (font.Height - 1), checked (font.Height - 1));
    }

    public char \u0002() => this.\u0002;

    public string \u0002() => this.\u0003;

    public float \u0002() => this.\u0005;

    public Size \u0002() => this.\u0008;

    public static bool operator ==(\u0003\u2004.\u0002 _param0, \u0003\u2004.\u0002 _param1) => (int) _param0.\u0002() == (int) _param1.\u0002() && Operators.CompareString(_param0.\u0002(), _param1.\u0002(), false) == 0 && (double) _param0.\u0002() == (double) _param1.\u0002();

    public static bool operator !=(\u0003\u2004.\u0002 _param0, \u0003\u2004.\u0002 _param1) => !(_param0 == _param1);

    public override int GetHashCode() => this.\u0006;

    public bool Equals(\u0003\u2004.\u0002 _param1) => this == _param1;
  }
}
