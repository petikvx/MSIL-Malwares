// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CustomQueryInterfaceResult, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C313905-EBD1-4523-EACC-B48B0BED3910
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b49da172b79de32c6df4e87385e57c0e3768b0b227b84cc38cd746b05200720.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

public sealed class \u0003\u2003
{
  public ArrayList \u0002;
  public ArrayList \u0003;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private \u0003\u2003.\u0002 \u0005;

  public \u0003\u2003()
  {
    this.\u0002 = new ArrayList();
    this.\u0003 = new ArrayList();
    string Left = \u0006\u2004.\u0002(670561039);
    int num1 = 1;
    do
    {
      int num2 = 1;
      do
      {
        this.\u0002.Add((object) new \u0008\u2000(Left, num2));
        checked { ++num2; }
      }
      while (num2 <= 13);
      if (Operators.CompareString(Left, \u0006\u2004.\u0002(670561039), false) != 0)
      {
        if (Operators.CompareString(Left, \u0006\u2004.\u0002(670561017), false) != 0)
        {
          if (Operators.CompareString(Left, \u0006\u2004.\u0002(670560978), false) == 0)
            Left = \u0006\u2004.\u0002(670560966);
        }
        else
          Left = \u0006\u2004.\u0002(670560978);
      }
      else
        Left = \u0006\u2004.\u0002(670561017);
      checked { ++num1; }
    }
    while (num1 <= 4);
  }

  public void \u0002(\u0003\u2003.\u0002 _param1)
  {
    \u0003\u2003.\u0002 obj = this.\u0005;
    \u0003\u2003.\u0002 comparand;
    do
    {
      comparand = obj;
      obj = Interlocked.CompareExchange<\u0003\u2003.\u0002>(ref this.\u0005, comparand + _param1, comparand);
    }
    while (obj != comparand);
  }

  public void \u0003(\u0003\u2003.\u0002 _param1)
  {
    \u0003\u2003.\u0002 obj = this.\u0005;
    \u0003\u2003.\u0002 comparand;
    do
    {
      comparand = obj;
      obj = Interlocked.CompareExchange<\u0003\u2003.\u0002>(ref this.\u0005, comparand - _param1, comparand);
    }
    while (obj != comparand);
  }

  public void \u0002()
  {
    ArrayList c = new ArrayList();
    Random random = new Random();
label_9:
    while (c.Count < this.\u0002.Count)
    {
      int int32 = Convert.ToInt32(Math.Floor(random.NextDouble() * (double) this.\u0002.Count));
      try
      {
        foreach (\u0008\u2000 obj in c)
        {
          if (Operators.ConditionalCompareObjectEqual((object) obj.\u0005, NewLateBinding.LateGet(this.\u0002[int32], (Type) null, \u0006\u2004.\u0002(670553860), new object[0], (string[]) null, (Type[]) null, (bool[]) null), false))
            goto label_9;
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      c.Add(RuntimeHelpers.GetObjectValue(this.\u0002[int32]));
    }
    this.\u0002.Clear();
    this.\u0002.AddRange((ICollection) c);
  }

  public \u0008\u2000 \u0002()
  {
    \u0008\u2000 obj1;
    try
    {
      \u0008\u2000 obj2 = (\u0008\u2000) this.\u0002[checked (this.\u0002.Count - 1)];
      this.\u0002.Remove((object) obj2);
      if (this.\u0002.Count == 0)
      {
        \u0003\u2003.\u0002 obj3 = this.\u0005;
        if (obj3 != null)
          obj3();
      }
      obj1 = obj2;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      obj1 = (\u0008\u2000) null;
      ProjectData.ClearProjectError();
    }
    return obj1;
  }

  public delegate void \u0002();
}
