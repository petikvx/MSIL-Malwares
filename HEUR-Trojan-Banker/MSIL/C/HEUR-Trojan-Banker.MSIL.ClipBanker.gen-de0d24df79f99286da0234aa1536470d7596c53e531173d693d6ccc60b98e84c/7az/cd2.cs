// Decompiled with JetBrains decompiler
// Type: 7az.cd2
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using o3x;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0037az
{
  [DefaultMember("Item")]
  internal sealed class cd2 : 
    \u0039U7,
    IList<\u0039U7>,
    ICollection<\u0039U7>,
    IEnumerable<\u0039U7>,
    IEnumerable
  {
    private List<\u0039U7> \u0031D1 = new List<\u0039U7>();
    private Dictionary<string, \u0039U7> \u00342N = new Dictionary<string, \u0039U7>();

    public cd2([In] string obj0)
      : base(obj0)
    {
    }

    public int \u0023C([In] \u0039U7 obj0) => this.\u0031D1.IndexOf(obj0);

    public void \u0023D([In] int obj0, [In] \u0039U7 obj1)
    {
      if (obj1 == null)
        throw new ArgumentNullException("item");
      if (obj0 < 0 || obj0 >= this.\u0031D1.Count)
        throw new ArgumentOutOfRangeException("index");
      if (string.IsNullOrEmpty(obj1.KB7()))
        throw new ArgumentException("item name cannot be empty or null");
      if (this.\u003212(obj1.KB7()))
        throw new ArgumentException("a value with name " + obj1.KB7() + " already exists in the table");
      obj1.\u0036Zj((\u0039U7) this);
      this.\u0031D1.Insert(obj0, obj1);
      this.\u00342N.Add(obj1.KB7(), obj1);
    }

    public void \u0023E([In] int obj0)
    {
      \u0039U7 obj = this.\u0031D1[obj0];
      this.\u0031D1.RemoveAt(obj0);
      this.\u00342N.Remove(obj.KB7());
    }

    [SpecialName]
    public \u0039U7 \u0023F([In] int obj0) => this.\u0031D1[obj0];

    [SpecialName]
    public void \u0023G([In] int obj0, [In] \u0039U7 obj1)
    {
      if (this.\u0031D1[obj0].KB7() != obj1.KB7())
      {
        this.\u00342N.Remove(this.\u0031D1[obj0].KB7());
        this.\u00342N.Add(obj1.KB7(), obj1);
      }
      else
        this.\u00342N[obj1.KB7()] = obj1;
      this.\u0031D1[obj0] = obj1;
    }

    [SpecialName]
    public \u0039U7 \u00355D([In] string obj0) => this.\u00342N[obj0];

    public void Add([In] \u0039U7 obj0)
    {
      if (obj0 == null)
        throw new ArgumentNullException("item");
      if (string.IsNullOrEmpty(obj0.KB7()))
        throw new ArgumentException("item name cannot be empty or null");
      if (this.\u003212(obj0.KB7()))
        throw new ArgumentException("a value with name " + obj0.KB7() + " already exists in the table");
      obj0.\u0036Zj((\u0039U7) this);
      this.\u0031D1.Add(obj0);
      this.\u00342N.Add(obj0.KB7(), obj0);
    }

    public void \u0023I()
    {
      this.\u0031D1.Clear();
      this.\u00342N.Clear();
    }

    public bool \u0023J([In] \u0039U7 obj0)
    {
      if (obj0 == null)
        throw new ArgumentNullException("item");
      if (string.IsNullOrEmpty(obj0.KB7()))
        throw new ArgumentException("item name cannot be empty or null");
      return this.\u00342N.ContainsKey(obj0.KB7()) && this.\u00342N[obj0.KB7()] == obj0;
    }

    public bool \u003212([In] string obj0)
    {
      if (obj0 == null)
        throw new ArgumentNullException("name");
      return !string.IsNullOrEmpty(obj0) ? this.\u00342N.ContainsKey(obj0) : throw new ArgumentException("name cannot be empty");
    }

    public void \u0023L([In] \u0039U7[] obj0, [In] int obj1) => this.\u0031D1.CopyTo(obj0, obj1);

    [SpecialName]
    public int \u0023M() => this.\u0031D1.Count;

    public bool \u0023N([In] \u0039U7 obj0)
    {
      if (obj0 == null)
        throw new ArgumentNullException("item");
      if (string.IsNullOrEmpty(obj0.KB7()))
        throw new ArgumentException("item name cannot be empty or null");
      if (!this.\u0023J(obj0))
        return false;
      this.\u00342N.Remove(obj0.KB7());
      this.\u0031D1.Remove(obj0);
      return true;
    }

    public IEnumerator<\u0039U7> \u0023O() => (IEnumerator<\u0039U7>) this.\u0031D1.GetEnumerator();

    IEnumerator IEnumerable.\u0023P() => (IEnumerator) this.\u0031D1.GetEnumerator();

    [SpecialName]
    bool ICollection<\u0039U7>.\u0023Q() => false;
  }
}
