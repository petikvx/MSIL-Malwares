// Decompiled with JetBrains decompiler
// Type: C3904355907.C3707901625
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace C3904355907
{
  public sealed class C3707901625 : HashAlgorithm
  {
    private const int C3554254475 = 12;
    private const int C3904355907 = 128;
    private const int C1255198513 = 64;
    private static readonly ulong[] C3554254475 = new ulong[8]
    {
      7640891576956012808UL,
      13503953896175478587UL,
      4354685564936845355UL,
      11912009170470909681UL,
      5840696475078001361UL,
      11170449401992604703UL,
      2270897969802886507UL,
      6620516959819538809UL
    };
    private static readonly int[] C3554254475 = new int[192]
    {
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    };
    private readonly int C1908338681;
    private ulong[] C3904355907 = new ulong[8];
    private ulong[] C1255198513 = new ulong[2];
    private ulong[] C1908338681 = new ulong[2];
    private byte[] C3554254475 = new byte[128];
    private int C1037565863 = 0;
    private ulong[] C1037565863 = new ulong[16];
    private ulong[] C112844655 = new ulong[16];

    public C3707901625()
    {
      this.C1908338681 = 64;
      this.HashSizeValue = 512;
      this.Initialize();
    }

    public C3707901625([In] int obj0)
    {
      this.C1908338681 = obj0 >= 0 && obj0 <= 64 ? obj0 : throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cO());
      this.HashSizeValue = obj0 * 8;
      this.Initialize();
    }

    public override void Initialize()
    {
      Debug.Assert(this.C3904355907.Length == C3707901625.C3554254475.Length);
      Array.Copy((Array) C3707901625.C3554254475, (Array) this.C3904355907, this.C3904355907.Length);
      this.C3904355907[0] ^= 16842752UL ^ (ulong) this.C1908338681;
      Array.Clear((Array) this.C1255198513, 0, this.C1255198513.Length);
      Array.Clear((Array) this.C1908338681, 0, this.C1908338681.Length);
      Array.Clear((Array) this.C3554254475, 0, this.C3554254475.Length);
      this.C1037565863 = 0;
      Array.Clear((Array) this.C1037565863, 0, this.C1037565863.Length);
      Array.Clear((Array) this.C112844655, 0, this.C112844655.Length);
    }

    private static void C3554254475(
      [In] ulong[] obj0,
      [In] ulong[] obj1,
      [In] int obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5,
      [In] int obj6,
      [In] int obj7)
    {
      int index = obj2 + obj3;
      obj0[obj4] += obj0[obj5] + obj1[C3707901625.C3554254475[index]];
      obj0[obj7] = C3554254475.C2137352139.C3904355907(obj0[obj7] ^ obj0[obj4], 32);
      obj0[obj6] += obj0[obj7];
      obj0[obj5] = C3554254475.C2137352139.C3904355907(obj0[obj5] ^ obj0[obj6], 24);
      obj0[obj4] += obj0[obj5] + obj1[C3707901625.C3554254475[index + 1]];
      obj0[obj7] = C3554254475.C2137352139.C3904355907(obj0[obj7] ^ obj0[obj4], 16);
      obj0[obj6] += obj0[obj7];
      obj0[obj5] = C3554254475.C2137352139.C3904355907(obj0[obj5] ^ obj0[obj6], 63);
    }

    private void C3554254475([In] byte[] obj0, [In] int obj1)
    {
      ulong[] c112844655 = this.C112844655;
      ulong[] c1037565863 = this.C1037565863;
      ulong[] c3904355907 = this.C3904355907;
      for (int index = 0; index < 16; ++index)
        c1037565863[index] = C3554254475.C2137352139.C1255198513(obj0, obj1 + (index << 3));
      Array.Copy((Array) c3904355907, (Array) c112844655, 8);
      c112844655[8] = C3707901625.C3554254475[0];
      c112844655[9] = C3707901625.C3554254475[1];
      c112844655[10] = C3707901625.C3554254475[2];
      c112844655[11] = C3707901625.C3554254475[3];
      c112844655[12] = C3707901625.C3554254475[4] ^ this.C1255198513[0];
      c112844655[13] = C3707901625.C3554254475[5] ^ this.C1255198513[1];
      c112844655[14] = C3707901625.C3554254475[6] ^ this.C1908338681[0];
      c112844655[15] = C3707901625.C3554254475[7] ^ this.C1908338681[1];
      for (int index = 0; index < 12; ++index)
      {
        int num = index << 4;
        C3707901625.C3554254475(c112844655, c1037565863, num, 0, 0, 4, 8, 12);
        C3707901625.C3554254475(c112844655, c1037565863, num, 2, 1, 5, 9, 13);
        C3707901625.C3554254475(c112844655, c1037565863, num, 4, 2, 6, 10, 14);
        C3707901625.C3554254475(c112844655, c1037565863, num, 6, 3, 7, 11, 15);
        C3707901625.C3554254475(c112844655, c1037565863, num, 8, 0, 5, 10, 15);
        C3707901625.C3554254475(c112844655, c1037565863, num, 10, 1, 6, 11, 12);
        C3707901625.C3554254475(c112844655, c1037565863, num, 12, 2, 7, 8, 13);
        C3707901625.C3554254475(c112844655, c1037565863, num, 14, 3, 4, 9, 14);
      }
      for (int index = 0; index < 8; ++index)
        c3904355907[index] ^= c112844655[index] ^ c112844655[index + 8];
    }

    private void C3554254475([In] ulong obj0)
    {
      this.C1255198513[0] += obj0;
      if (this.C1255198513[0] >= obj0)
        return;
      ++this.C1255198513[1];
    }

    protected override void HashCore([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      Debug.Assert(this.C1908338681[0] == 0UL);
      if (this.C1037565863 + obj2 > 128)
      {
        int length = 128 - this.C1037565863;
        if (length > 0)
          Array.Copy((Array) obj0, obj1, (Array) this.C3554254475, this.C1037565863, length);
        this.C3554254475(128UL);
        this.C3554254475(this.C3554254475, 0);
        this.C1037565863 = 0;
        obj2 -= length;
        obj1 += length;
        while (obj2 > 128)
        {
          this.C3554254475(128UL);
          this.C3554254475(obj0, obj1);
          obj2 -= 128;
          obj1 += 128;
        }
      }
      if (obj2 <= 0)
        return;
      Debug.Assert(this.C1037565863 + obj2 <= 128);
      Array.Copy((Array) obj0, obj1, (Array) this.C3554254475, this.C1037565863, obj2);
      this.C1037565863 += obj2;
    }

    protected override byte[] HashFinal()
    {
      if (this.C1908338681[0] > 0UL)
      {
        Debug.Assert(false);
        throw new InvalidOperationException();
      }
      Debug.Assert(this.C1255198513[1] == 0UL && this.C1255198513[0] == 0UL || this.C1037565863 > 0);
      this.C1908338681[0] = ulong.MaxValue;
      int length = 128 - this.C1037565863;
      if (length > 0)
        Array.Clear((Array) this.C3554254475, this.C1037565863, length);
      this.C3554254475((ulong) this.C1037565863);
      this.C3554254475(this.C3554254475, 0);
      byte[] sourceArray = new byte[64];
      for (int index = 0; index < this.C3904355907.Length; ++index)
        C3554254475.C2137352139.C3554254475(this.C3904355907[index], sourceArray, index << 3);
      if (this.C1908338681 == 64)
        return sourceArray;
      Debug.Assert(this.C1908338681 < 64);
      byte[] destinationArray = new byte[this.C1908338681];
      if (this.C1908338681 > 0)
        Array.Copy((Array) sourceArray, (Array) destinationArray, this.C1908338681);
      C3554254475.C2137352139.C3904355907(sourceArray);
      return destinationArray;
    }
  }
}
