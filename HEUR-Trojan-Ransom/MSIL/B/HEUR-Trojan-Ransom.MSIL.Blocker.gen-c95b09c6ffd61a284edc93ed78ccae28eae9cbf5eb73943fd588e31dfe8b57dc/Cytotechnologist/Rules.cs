// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: WaitHand, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A25291C7-A109-4713-B14B-FDD04827C77F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c95b09c6ffd61a284edc93ed78ccae28eae9cbf5eb73943fd588e31dfe8b57dc.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -127063595;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1289055050)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1050554294 ^ 1141664514;
            continue;
          case 3:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 162607964 ^ 1913674563;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1074359559;
      bool flag;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2145118858)) % 8U)
        {
          case 0:
            int num3 = !flag ? -1793655400 : (num3 = -1065557541);
            num1 = num3 ^ (int) num2 * 2098254925;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 410893553;
            continue;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * -2145439694 ^ 865060618;
            continue;
          case 3:
            flag = aIndex < numArray.Length;
            num1 = 995508610;
            continue;
          case 4:
            num1 = (int) num2 * 1471998764 ^ 549576829;
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * -1938861302 ^ -1171079565;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -480059690;
      int aIndex1;
      List<Card> cardList;
      int aIndex2;
      bool flag1;
      bool flag2;
      int num2;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1606761386)) % 23U)
        {
          case 0:
            flag2 = aIndex2 < count;
            num1 = -610449467;
            continue;
          case 1:
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * -1583367144 ^ 934663458;
            continue;
          case 2:
            ++aIndex1;
            num1 = (int) num3 * -1822509755 ^ 520029567;
            continue;
          case 4:
            int num4;
            num1 = num4 = num2 >= jsonNode[aIndex1].AsInt ? -194725198 : (num4 = -2051369472);
            continue;
          case 5:
            int num5 = flag2 ? 1172803195 : (num5 = 1763900476);
            num1 = num5 ^ (int) num3 * -19676379;
            continue;
          case 6:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -31869216;
            continue;
          case 7:
            num2 = 0;
            num1 = (int) num3 * -1478324043 ^ -289568416;
            continue;
          case 8:
            num1 = -1660683976;
            continue;
          case 9:
            num1 = -1128973774;
            continue;
          case 10:
            aIndex1 = 0;
            num1 = (int) num3 * 2099368715 ^ 1872027239;
            continue;
          case 11:
            ++num2;
            num1 = (int) num3 * -2056735151 ^ 934387764;
            continue;
          case 12:
            num1 = (int) num3 * -64317380 ^ 808811217;
            continue;
          case 13:
            num1 = (int) num3 * -2142494560 ^ -344337390;
            continue;
          case 14:
            array = cardList.ToArray();
            num1 = (int) num3 * 1339769055 ^ 1976343663;
            continue;
          case 15:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * 1944477817 ^ -128861709;
            continue;
          case 16:
            num1 = (int) num3 * -1122991821 ^ 216510084;
            continue;
          case 17:
            num1 = (int) num3 * 12548272 ^ 2001293856;
            continue;
          case 18:
            ++aIndex2;
            num1 = (int) num3 * 530777646 ^ -425550028;
            continue;
          case 19:
            num1 = (int) num3 * 251830871 ^ 1043109114;
            continue;
          case 20:
            goto label_1;
          case 21:
            int num6;
            num1 = num6 = aIndex1 >= maxImpact * 2 ? -1670892421 : (num6 = -1271432883);
            continue;
          case 22:
            flag1 = aIndex1 < maxImpact;
            num1 = -755144172;
            continue;
          default:
            goto label_24;
        }
      }
label_24:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1749460614;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1058852257)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 2032228732 ^ 1259388148;
            continue;
          case 3:
            str = Rules.\u206D​‪⁬⁯‌‮⁫‍⁮‫‍‏‌⁫⁫⁭‫‍⁪‍​‪‌‏⁬⁬‍​‪‏‏⁬⁯‮‬‬⁭‫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 1053797061 ^ 52893372;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 1935375044;
      Card[] cards;
      int index;
      Card card1;
      int num2;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1949211534)) % 16U)
        {
          case 1:
            str2 = Rules.\u200E‏⁬‌⁬⁯​⁭⁮⁪‌‫‭‍⁮​⁯⁫‌⁭‍‏‎⁬⁬⁮‫‏⁮‎‍⁮‍‌‮⁮‫⁪⁪⁭‮(str1, "\n]");
            num1 = (int) num3 * 933500747 ^ -1748791366;
            continue;
          case 2:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206E‌‍‪⁯⁭⁯⁭‪⁪⁯‎‬‎‏‌​‪⁪‬‭‮‪⁭‪‌⁯⁬⁪‌‪‏‍⁪⁭‏‏‮‮⁮‮((object) card2) : (string) null;
            str1 = Rules.\u202C⁯​⁪‫⁪‎‎‬‍‍‭⁬‍‎⁮​‮⁭‫⁭​‮​⁭‬‮​‭‫‎⁮⁮‍‭⁫⁮⁪‪‌‮(str3, str4, " ");
            num1 = 159777317;
            continue;
          case 3:
            int num4;
            num1 = num4 = index < cards.Length ? 946475049 : (num4 = 1424433519);
            continue;
          case 4:
            str1 = Rules.\u200E‏⁬‌⁬⁯​⁭⁮⁪‌‫‭‍⁮​⁯⁫‌⁭‍‏‎⁬⁬⁮‫‏⁮‎‍⁮‍‌‮⁮‫⁪⁪⁭‮(str1, "\n\t");
            num1 = (int) num3 * 1641662106 ^ -336683536;
            continue;
          case 5:
            index = 0;
            num1 = (int) num3 * 245345479 ^ -1963009343;
            continue;
          case 6:
            num2 = card1.Type;
            num1 = (int) num3 * 718643932 ^ -559542780;
            continue;
          case 7:
            card1 = cards[index];
            num1 = 2006704230;
            continue;
          case 8:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -1860785125 ^ 851892584;
            continue;
          case 9:
            goto label_1;
          case 10:
            str1 = "[\n\t";
            num2 = 0;
            cards = this.Cards;
            num1 = (int) num3 * -343062815 ^ -685498335;
            continue;
          case 11:
            num1 = (int) num3 * -196065793 ^ -175070490;
            continue;
          case 12:
            num1 = (int) num3 * -53543981 ^ 1698510377;
            continue;
          case 13:
            ++index;
            num1 = (int) num3 * -1756267339 ^ -2066305556;
            continue;
          case 14:
            int num5 = flag ? -275420462 : (num5 = -797636972);
            num1 = num5 ^ (int) num3 * 921786244;
            continue;
          case 15:
            num1 = (int) num3 * 2008965006 ^ 1564892956;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 583689503;
      string str1;
      string str2;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2100941891)) % 8U)
        {
          case 0:
            str2 = Rules.\u200E‏⁬‌⁬⁯​⁭⁮⁪‌‫‭‍⁮​⁯⁫‌⁭‍‏‎⁬⁬⁮‫‏⁮‎‍⁮‍‌‮⁮‫⁪⁪⁭‮(str1, " ]");
            num1 = (int) num2 * -663957313 ^ 145277700;
            continue;
          case 1:
            int num3 = !flag ? -949583683 : (num3 = -1991949386);
            num1 = num3 ^ (int) num2 * 1027317558;
            continue;
          case 2:
            goto label_1;
          case 3:
            str1 = Rules.\u202C⁯​⁪‫⁪‎‎‬‍‍‭⁬‍‎⁮​‮⁭‫⁭​‮​⁭‬‮​‭‫‎⁮⁮‍‭⁫⁮⁪‪‌‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200C⁯⁭‫‏⁮‫‮‮‭‬‌‬​​⁭‍‫‬​⁮‌‪‭⁬⁮‎‮‎‪‫‎‪‪​‬⁯‪‏⁬‮()));
            ++index;
            num1 = 2021346718;
            continue;
          case 4:
            str1 = Rules.\u200E‏⁬‌⁬⁯​⁭⁮⁪‌‫‭‍⁮​⁯⁫‌⁭‍‏‎⁬⁬⁮‫‏⁮‎‍⁮‍‌‮⁮‫⁪⁪⁭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200C⁯⁭‫‏⁮‫‮‮‭‬‌‬​​⁭‍‫‬​⁮‌‪‭⁬⁮‎‮‎‪‫‎‪‪​‬⁯‪‏⁬‮()));
            index = 1;
            num1 = (int) num2 * -632416216 ^ 1234309413;
            continue;
          case 5:
            flag = index < this.RiskChances.Length;
            num1 = 1925324306;
            continue;
          case 6:
            num1 = (int) num2 * -119397270 ^ -1782516254;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u206D​‪⁬⁯‌‮⁫‍⁮‫‍‏‌⁫⁫⁭‫‍⁪‍​‪‌‏⁬⁬‍​‪‏‏⁬⁯‮‬‬⁭‫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200E‏⁬‌⁬⁯​⁭⁮⁪‌‫‭‍⁮​⁯⁫‌⁭‍‏‎⁬⁬⁮‫‏⁮‎‍⁮‍‌‮⁮‫⁪⁪⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206E‌‍‪⁯⁭⁯⁭‪⁪⁯‎‬‎‏‌​‪⁪‬‭‮‪⁭‪‌⁯⁬⁪‌‪‏‍⁪⁭‏‏‮‮⁮‮([In] object obj0) => obj0.ToString();

    static string \u202C⁯​⁪‫⁪‎‎‬‍‍‭⁬‍‎⁮​‮⁭‫⁭​‮​⁭‬‮​‭‫‎⁮⁮‍‭⁫⁮⁪‪‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200C⁯⁭‫‏⁮‫‮‮‭‬‌‬​​⁭‍‫‬​⁮‌‪‭⁬⁮‎‮‎‪‫‎‪‪​‬⁯‪‏⁬‮() => CultureInfo.InvariantCulture;
  }
}
