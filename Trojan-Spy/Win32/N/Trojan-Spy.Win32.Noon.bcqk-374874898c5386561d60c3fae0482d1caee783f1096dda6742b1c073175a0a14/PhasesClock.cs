// Decompiled with JetBrains decompiler
// Type: mmxAH.PhasesClock
// Assembly: IAsyncLocalValue, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 5C4F3FBF-C751-4B18-BBEA-B1DDBC6F76B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqk-374874898c5386561d60c3fae0482d1caee783f1096dda6742b1c073175a0a14.exe

using System;
using System.IO;

namespace mmxAH
{
  public class PhasesClock
  {
    private GameEngine en;
    private Phases curPhase;
    private byte curTurn;
    private byte curPlayer;
    private byte firstPlayer;

    public PhasesClock(GameEngine eng)
    {
      this.en = eng;
      this.Reset();
    }

    public void Reset()
    {
      this.curPhase = Phases.SetupFix;
      this.curTurn = (byte) 0;
      this.curPlayer = (byte) 0;
      this.firstPlayer = (byte) 0;
    }

    public void WriteToSave(BinaryWriter wr)
    {
      wr.Write((byte) this.curPhase);
      wr.Write(this.curTurn);
      wr.Write(this.curPlayer);
      wr.Write(this.firstPlayer);
    }

    public void ReadFromSave(BinaryReader rd)
    {
      this.curPhase = (Phases) rd.ReadByte();
      this.curTurn = rd.ReadByte();
      this.curPlayer = rd.ReadByte();
      this.firstPlayer = rd.ReadByte();
    }

    public void EndMovementSegment()
    {
      short locathion = this.en.ActiveInvistigators[(int) this.curPlayer].GetLocathion();
      LocathionType locType = this.en.locs[(int) locathion].GetLocType();
      if (locType == LocathionType.LiTaS || locType == LocathionType.OW)
        return;
      ((ArchemArea) this.en.locs[(int) locathion]).EndMovementClues(this.curPlayer);
    }

    public void NextPlayer()
    {
      ++this.curPlayer;
      if ((int) this.curPlayer == (int) this.en.GetPlayersNumber())
        this.curPlayer = (byte) 0;
      if ((int) this.curPlayer == (int) this.firstPlayer)
        this.NextPhase();
      if ((int) this.curPlayer == (int) this.firstPlayer && this.en.pref.StopOnPhase || this.en.pref.StopOnSegment)
      {
        this.en.io.SetSaveEnable(true);
        this.en.io.Pause(new Func(this.BeginSegment));
      }
      else
        this.BeginSegment();
    }

    public void EndTurn()
    {
      if (this.curTurn > (byte) 0)
      {
        ++this.firstPlayer;
        if ((int) this.firstPlayer == (int) this.en.GetPlayersNumber())
          this.firstPlayer = (byte) 0;
        this.curPlayer = this.firstPlayer;
        this.en.io.PrintToLog(Environment.NewLine + this.en.sysstr.GetString(SSType.Turn) + "  " + this.curTurn.ToString() + " " + this.en.sysstr.GetString(SSType.TurnEndMessage), (byte) 14);
        this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.FirstPlayer) + "  : ", (byte) 14, true);
        this.en.io.PrintToLog(this.en.ActiveInvistigators[(int) this.firstPlayer].GetTitle() + Environment.NewLine + Environment.NewLine + Environment.NewLine, (byte) 14, isItalic: true);
      }
      ++this.curTurn;
      this.curPhase = Phases.Upkeep;
      if (this.en.pref.StopOnTurn)
      {
        this.en.io.SetSaveEnable(true);
        this.en.io.Pause(new Func(this.BeginSegment));
      }
      else
        this.BeginSegment();
    }

    private void NextPhase()
    {
      switch (this.curPhase)
      {
        case Phases.SetupFix:
          this.curPhase = Phases.SetupRandom;
          break;
        case Phases.SetupRandom:
          this.curPhase = Phases.SetupSliders;
          break;
        case Phases.SetupSliders:
          this.curPhase = Phases.SetupMythos;
          break;
        case Phases.SetupMythos:
          this.curTurn = (byte) 1;
          this.curPhase = Phases.Upkeep;
          break;
        case Phases.Upkeep:
          this.curPhase = Phases.Movement;
          break;
        case Phases.Movement:
          this.curPhase = Phases.AhEnc;
          break;
        case Phases.AhEnc:
          this.curPhase = Phases.OwEnc;
          break;
        case Phases.OwEnc:
          this.curPhase = Phases.Mythos;
          break;
      }
    }

    private void BeginSegment()
    {
      this.en.io.SetSaveEnable(false);
      Investigator activeInvistigator = this.en.ActiveInvistigators[(int) this.curPlayer];
      switch (this.curPhase)
      {
        case Phases.SetupRandom:
          activeInvistigator.SetupRandom();
          break;
        case Phases.SetupSliders:
          activeInvistigator.Setup_Sliders();
          break;
        case Phases.SetupMythos:
          this.en.ga.SetupMythos();
          break;
        case Phases.Upkeep:
          activeInvistigator.Upkeep();
          break;
        case Phases.Movement:
          foreach (MonsterIndivid activeMonster in this.en.ActiveMonsters)
            activeMonster.isEncountred = false;
          activeInvistigator.Movement();
          break;
        case Phases.AhEnc:
          activeInvistigator.AhEnc();
          break;
        case Phases.OwEnc:
          activeInvistigator.OwEnc();
          break;
        case Phases.Mythos:
          this.PrintCurPhase();
          this.en.mythosDeck.Draw().Execute();
          break;
      }
    }

    public byte GetCurPlayer() => this.curPlayer;

    public byte GetFirstPlayer() => this.firstPlayer;

    public void PrintCurPhase(bool isServer = true)
    {
      string str1 = Environment.NewLine + "==";
      string str2;
      if ((byte) this.curPhase <= (byte) 4)
      {
        str2 = str1 + this.GetSetupPhaseString();
      }
      else
      {
        string str3 = str1 + this.en.sysstr.GetString(SSType.Turn) + " " + this.curTurn.ToString() + " . ";
        if (this.curPhase == Phases.Mythos)
        {
          str2 = str3 + this.en.sysstr.GetString(SSType.Mythos);
        }
        else
        {
          switch (this.curPhase)
          {
            case Phases.Upkeep:
              str3 += this.en.sysstr.GetString(SSType.Upkeep);
              break;
            case Phases.Movement:
              str3 += this.en.sysstr.GetString(SSType.Movement);
              break;
            case Phases.AhEnc:
              str3 += this.en.sysstr.GetString(SSType.ArcEncPhase);
              break;
            case Phases.OwEnc:
              str3 += this.en.sysstr.GetString(SSType.OwEncPhase);
              break;
          }
          str2 = str3 + " . " + this.en.ActiveInvistigators[(int) this.curPlayer].GetTitle();
        }
      }
      string Text = str2 + "==" + Environment.NewLine;
      if (isServer)
        this.en.io.PrintToLog(Text, (byte) 14, true);
      else
        this.en.io.Print(Text, (byte) 14, true);
    }

    private string GetSetupPhaseString()
    {
      switch (this.curPhase)
      {
        case Phases.SetupFix:
          return this.en.sysstr.GetString(SSType.Setup);
        case Phases.SetupRandom:
          return this.en.sysstr.GetString(SSType.SetupRandomStep) + " . " + this.en.ActiveInvistigators[(int) this.curPlayer].GetTitle();
        case Phases.SetupSliders:
          return this.en.sysstr.GetString(SSType.SetupSlidersStep) + " . " + this.en.ActiveInvistigators[(int) this.curPlayer].GetTitle();
        case Phases.SetupMythos:
          return this.en.sysstr.GetString(SSType.SetupMythosStep);
        default:
          return "";
      }
    }

    public void ResumeFromSave() => this.BeginSegment();

    public void StartRandomSetup()
    {
      this.curPlayer = (byte) 0;
      this.curPhase = Phases.SetupRandom;
      this.BeginSegment();
    }
  }
}
