// Decompiled with JetBrains decompiler
// Type: D3DHelper.HandlerList
// Assembly: jW4W, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F794319B-26EC-4D2B-9F2A-1AE265F208BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-c21d98b14bd6be43d4ecc4cdaed93b309043c07a9d4653e05bd952006f8b6597.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;

namespace D3DHelper
{
  internal class HandlerList
  {
    private IFFReader m_IFFReader;
    private List<HandlerNode> m_Handlers;
    public ChunkHandler DefaultHandler;

    public HandlerList(IFFReader IFFReader)
    {
      this.m_IFFReader = IFFReader;
      this.m_Handlers = new List<HandlerNode>();
    }

    public void AddHandler(string ID, ChunkType Type, ChunkHandler Handler, uint Version = 0)
    {
      HandlerList handlerList = this;
      if (Handler == null)
        throw new ArgumentNullException(nameof (Handler));
      HandlerNode h2 = this.__MakeHandlerNode(ID, Type, Version);
      if (Operators.CompareString(h2.ID, "", false) == 0)
        return;
      if (this.FindHandler(ID, Type, Version) != null)
        this.m_Handlers.RemoveAll((Predicate<HandlerNode>) (h => handlerList.__CompareHandlers(h, h2)));
      h2.Handler = Handler;
      this.m_Handlers.Add(h2);
    }

    public ChunkHandler FindHandler(string ID, ChunkType Type, uint Version = 0)
    {
      HandlerList handlerList = this;
      if (this.m_Handlers.Count == 0)
        return this.DefaultHandler;
      HandlerNode h2 = this.__MakeHandlerNode(ID, Type, Version);
      if (Operators.CompareString(h2.ID, "", false) == 0)
        return (ChunkHandler) null;
      return this.m_Handlers.Exists((Predicate<HandlerNode>) (h => handlerList.__CompareHandlers(h, h2))) ? this.m_Handlers.Find((Predicate<HandlerNode>) (h => handlerList.__CompareHandlers(h, h2))).Handler : this.DefaultHandler;
    }

    private bool __CompareHandlers(HandlerNode h1, HandlerNode h2) => Operators.CompareString(h1.ID, h2.ID, false) == 0 && h1.Type == h2.Type && (h1.Type != ChunkType.Normal || (int) h1.Version == (int) h2.Version);

    private HandlerNode __MakeHandlerNode(string ID, ChunkType Type, uint Version = 0)
    {
      try
      {
        ChunkAttributes chunkAttributes = new ChunkAttributes(ID, 0, Type, Version);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw ex;
      }
      return new HandlerNode()
      {
        ID = ID,
        Type = Type,
        Version = Version
      };
    }
  }
}
