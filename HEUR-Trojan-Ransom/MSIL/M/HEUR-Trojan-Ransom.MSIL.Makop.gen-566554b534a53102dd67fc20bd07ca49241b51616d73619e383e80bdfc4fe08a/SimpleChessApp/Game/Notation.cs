// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: q是, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A217F07-6E26-47B2-8CBC-BCC0D26AE04B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-566554b534a53102dd67fc20bd07ca49241b51616d73619e383e80bdfc4fe08a.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
label_1:
        int num1 = 452673409;
        string move;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 954260348)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 1120662660 ^ 1223777299;
              continue;
            case 1:
              move = Notation.\u206A⁮‮⁭⁫‭‌‭⁬⁯‎‬‏‫‏⁪‎⁭‎‎‪⁫‫‪⁫⁯⁮‫‪‮⁮‎​⁭‫⁬‌‏⁮⁮‮(this.from.CurrentSquare, \u003CModule\u003E.\u202E⁯⁪⁯⁮‏⁬‮⁭‏⁫⁯‌⁯​‎⁫‮‫‭⁭⁭⁭​⁮‫⁭⁪‮⁯‍⁫‍⁯​‎‍⁮‍‍‮<string>(3576009577U), this.to.CurrentSquare);
              num1 = (int) num2 * 821289558 ^ -1983813102;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = -1757504827;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1740336595)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            this.from = square2;
            num1 = (int) num2 * -135602708 ^ -600489748;
            continue;
          case 3:
            square1.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * 1793930901 ^ 700094697;
            continue;
          case 4:
            num1 = (int) num2 * 1830384362 ^ -160936584;
            continue;
          case 5:
            square2 = new Square(f.File, f.Rank, bo);
            num1 = (int) num2 * -1384907982 ^ -1293415542;
            continue;
          case 6:
            square1 = new Square(t.File, t.Rank, bo);
            square2.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * 1796509244 ^ -944624311;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this.to = square1;
    }

    public override string ToString()
    {
      string move = this.Move;
label_1:
      int num1 = 953906960;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2111723638)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 341805371 ^ 2036756563;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return move;
    }

    static string \u206A⁮‮⁭⁫‭‌‭⁬⁯‎‬‏‫‏⁪‎⁭‎‎‪⁫‫‪⁫⁯⁮‫‪‮⁮‎​⁭‫⁬‌‏⁮⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
