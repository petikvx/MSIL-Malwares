// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSComboBox
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  internal class NSComboBox : ComboBox
  {
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private SizeF SZ1;
    private PointF PT1;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private Pen P4;
    private SolidBrush B1;
    private SolidBrush B2;
    private LinearGradientBrush GB1;

    public NSComboBox()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.DrawMode = DrawMode.OwnerDrawFixed;
      this.DropDownStyle = ComboBoxStyle.DropDownList;
      this.BackColor = Color.FromArgb(50, 50, 50);
      this.ForeColor = Color.FromArgb(235, 235, 235);
      this.P1 = new Pen(Color.FromArgb(24, 24, 24));
      this.P2 = new Pen(Color.FromArgb(235, 235, 235), 2f);
      this.P3 = new Pen(Brushes.Black, 2f);
      this.P4 = new Pen(Color.FromArgb(65, 65, 65));
      this.B1 = new SolidBrush(Color.FromArgb(65, 65, 65));
      this.B2 = new SolidBrush(Color.FromArgb(55, 55, 55));
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = ThemeModule.CreateRound(0, 0, checked (this.Width - 1), checked (this.Height - 1), 7);
      this.GP2 = ThemeModule.CreateRound(1, 1, checked (this.Width - 3), checked (this.Height - 3), 7);
      this.GB1 = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(60, 60, 60), Color.FromArgb(55, 55, 55), 90f);
      ThemeModule.G.SetClip(this.GP1);
      ThemeModule.G.FillRectangle((Brush) this.GB1, this.ClientRectangle);
      ThemeModule.G.ResetClip();
      ThemeModule.G.DrawPath(this.P1, this.GP1);
      ThemeModule.G.DrawPath(this.P4, this.GP2);
      this.SZ1 = ThemeModule.G.MeasureString(this.Text, this.Font);
      this.PT1 = new PointF(5f, (float) (this.Height / 2) - this.SZ1.Height / 2f);
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.Black, this.PT1.X + 1f, this.PT1.Y + 1f);
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.WhiteSmoke, this.PT1);
      ThemeModule.G.DrawLine(this.P3, checked (this.Width - 15), 10, checked (this.Width - 11), 13);
      ThemeModule.G.DrawLine(this.P3, checked (this.Width - 7), 10, checked (this.Width - 11), 13);
      ThemeModule.G.DrawLine(Pens.Black, checked (this.Width - 11), 13, checked (this.Width - 11), 14);
      ThemeModule.G.DrawLine(this.P2, checked (this.Width - 16), 9, checked (this.Width - 12), 12);
      ThemeModule.G.DrawLine(this.P2, checked (this.Width - 8), 9, checked (this.Width - 12), 12);
      ThemeModule.G.DrawLine(Pens.WhiteSmoke, checked (this.Width - 12), 12, checked (this.Width - 12), 13);
      ThemeModule.G.DrawLine(this.P1, checked (this.Width - 22), 0, checked (this.Width - 22), this.Height);
      ThemeModule.G.DrawLine(this.P4, checked (this.Width - 23), 1, checked (this.Width - 23), checked (this.Height - 2));
      ThemeModule.G.DrawLine(this.P4, checked (this.Width - 21), 1, checked (this.Width - 21), checked (this.Height - 2));
    }

    protected override void OnDrawItem(DrawItemEventArgs e)
    {
      e.Graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
        e.Graphics.FillRectangle((Brush) this.B1, e.Bounds);
      else
        e.Graphics.FillRectangle((Brush) this.B2, e.Bounds);
      if (e.Index == -1)
        return;
      e.Graphics.DrawString(this.GetItemText(RuntimeHelpers.GetObjectValue(this.Items[e.Index])), e.Font, Brushes.WhiteSmoke, (RectangleF) e.Bounds);
    }
  }
}
