// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.AcceptHeaderElementComparer
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Net.Mime;

namespace System.ServiceModel.Web
{
  internal class AcceptHeaderElementComparer : IComparer<ContentType>
  {
    private static NumberStyles numberStyles = NumberStyles.AllowDecimalPoint;

    public int Compare(ContentType x, ContentType y)
    {
      string[] strArray1 = x.MediaType.Split('/');
      string[] strArray2 = y.MediaType.Split('/');
      if (string.Equals(strArray1[0], strArray2[0], StringComparison.OrdinalIgnoreCase))
      {
        if (string.Equals(strArray1[1], strArray2[1], StringComparison.OrdinalIgnoreCase))
        {
          bool flag1 = this.HasParameters(x);
          bool flag2 = this.HasParameters(y);
          if (flag1 && !flag2)
            return 1;
          if (!flag1 & flag2)
            return -1;
        }
        else
        {
          if (strArray1[1][0] == '*' && strArray1[1].Length == 1)
            return 1;
          if (strArray2[1][0] == '*' && strArray2[1].Length == 1)
            return -1;
        }
      }
      else
      {
        if (strArray1[0][0] == '*' && strArray1[0].Length == 1)
          return 1;
        if (strArray2[0][0] == '*' && strArray2[0].Length == 1)
          return -1;
      }
      Decimal num = this.GetQualityFactor(x) - this.GetQualityFactor(y);
      if (num < 0M)
        return 1;
      return num > 0M ? -1 : 0;
    }

    private Decimal GetQualityFactor(ContentType contentType)
    {
      foreach (string key in (IEnumerable) contentType.Parameters.Keys)
      {
        Decimal result;
        if (string.Equals("q", key, StringComparison.OrdinalIgnoreCase) && Decimal.TryParse(contentType.Parameters[key], AcceptHeaderElementComparer.numberStyles, (IFormatProvider) CultureInfo.InvariantCulture, out result) && result <= 1M)
          return result;
      }
      return 1M;
    }

    private bool HasParameters(ContentType contentType)
    {
      int num = 0;
      foreach (string key in (IEnumerable) contentType.Parameters.Keys)
      {
        if (!string.Equals("q", key, StringComparison.OrdinalIgnoreCase))
          ++num;
      }
      return num > 0;
    }
  }
}
