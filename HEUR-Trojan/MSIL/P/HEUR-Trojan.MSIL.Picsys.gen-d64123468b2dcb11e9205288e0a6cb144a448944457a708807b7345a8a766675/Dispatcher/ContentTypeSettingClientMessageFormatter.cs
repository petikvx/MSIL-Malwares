// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.ContentTypeSettingClientMessageFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Net;
using System.ServiceModel.Channels;
using System.ServiceModel.Web;

namespace System.ServiceModel.Dispatcher
{
  internal class ContentTypeSettingClientMessageFormatter : IClientMessageFormatter
  {
    private IClientMessageFormatter innerFormatter;
    private string outgoingContentType;

    public ContentTypeSettingClientMessageFormatter(
      string outgoingContentType,
      IClientMessageFormatter innerFormatter)
    {
      if (outgoingContentType == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (outgoingContentType));
      if (innerFormatter == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (innerFormatter));
      this.outgoingContentType = outgoingContentType;
      this.innerFormatter = innerFormatter;
    }

    public object DeserializeReply(Message message, object[] parameters) => this.innerFormatter.DeserializeReply(message, parameters);

    public Message SerializeRequest(MessageVersion messageVersion, object[] parameters)
    {
      Message message = this.innerFormatter.SerializeRequest(messageVersion, parameters);
      if (message != null)
        ContentTypeSettingClientMessageFormatter.AddRequestContentTypeProperty(message, this.outgoingContentType);
      return message;
    }

    private static void AddRequestContentTypeProperty(Message message, string contentType)
    {
      if (message == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (message));
      if (contentType == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (contentType));
      if (OperationContext.Current != null && OperationContext.Current.HasOutgoingMessageProperties)
      {
        if (!string.IsNullOrEmpty(WebOperationContext.Current.OutgoingRequest.ContentType))
          return;
        WebOperationContext.Current.OutgoingRequest.ContentType = contentType;
      }
      else
      {
        object obj;
        message.Properties.TryGetValue(HttpRequestMessageProperty.Name, out obj);
        HttpRequestMessageProperty property;
        if (obj != null)
        {
          property = (HttpRequestMessageProperty) obj;
        }
        else
        {
          property = new HttpRequestMessageProperty();
          message.Properties.Add(HttpRequestMessageProperty.Name, (object) property);
        }
        if (!string.IsNullOrEmpty(property.Headers[HttpRequestHeader.ContentType]))
          return;
        property.Headers[HttpRequestHeader.ContentType] = contentType;
      }
    }
  }
}
