// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.SvcFileManager
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.ServiceModel.Activation;
using System.ServiceModel.ComIntegration;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class SvcFileManager
  {
    private string webDirectoryPath;
    private Dictionary<Guid, SvcFileManager.SvcFile> svcFiles;

    public SvcFileManager(string webDirectoryPath)
    {
      this.webDirectoryPath = webDirectoryPath;
      this.svcFiles = new Dictionary<Guid, SvcFileManager.SvcFile>();
      foreach (string file in Directory.GetFiles(webDirectoryPath, "*.svc"))
      {
        SvcFileManager.SvcFile svcFile = SvcFileManager.SvcFile.OpenExisting(file);
        if (svcFile != null)
          this.svcFiles.Add(svcFile.Clsid, svcFile);
      }
    }

    public void Abort()
    {
      foreach (SvcFileManager.SvcFile svcFile in this.svcFiles.Values)
        svcFile.Abort();
    }

    public void Add(Guid appid, Guid clsid)
    {
      SvcFileManager.SvcFile svcFile1 = (SvcFileManager.SvcFile) null;
      if (this.svcFiles.TryGetValue(clsid, out svcFile1))
        return;
      SvcFileManager.SvcFile svcFile2 = SvcFileManager.SvcFile.CreateNew(this.webDirectoryPath, appid, clsid);
      this.svcFiles.Add(clsid, svcFile2);
    }

    public bool Remove(Guid appid, Guid clsid)
    {
      SvcFileManager.SvcFile svcFile = (SvcFileManager.SvcFile) null;
      if (!this.svcFiles.TryGetValue(clsid, out svcFile))
        return false;
      if (svcFile.State == SvcFileManager.SvcFileState.Deleted)
        return true;
      svcFile.Delete();
      return true;
    }

    public void Prepare()
    {
      foreach (SvcFileManager.SvcFile svcFile in this.svcFiles.Values)
        svcFile.Prepare();
    }

    public void Commit()
    {
      foreach (SvcFileManager.SvcFile svcFile in this.svcFiles.Values)
        svcFile.Commit();
    }

    public bool ResolveClsid(Guid clsid, out Guid appid)
    {
      appid = Guid.Empty;
      SvcFileManager.SvcFile svcFile;
      if (!this.svcFiles.TryGetValue(clsid, out svcFile) || svcFile.State == SvcFileManager.SvcFileState.Deleted)
        return false;
      appid = svcFile.Appid;
      return true;
    }

    private enum SvcFileState
    {
      Existing,
      Added,
      Deleted,
    }

    private class SvcFile
    {
      private const string factoryAttributeName = "Factory";
      private const string serviceAttributeName = "Service";
      private Guid appid;
      private Guid clsid;
      private SvcFileManager.SvcFileState state;
      private AtomicFile svcFile;

      private SvcFile(
        Guid appid,
        Guid clsid,
        SvcFileManager.SvcFileState state,
        AtomicFile svcFile)
      {
        this.appid = appid;
        this.clsid = clsid;
        this.state = state;
        this.svcFile = svcFile;
      }

      public static SvcFileManager.SvcFile CreateNew(
        string webDirectoryPath,
        Guid appid,
        Guid clsid)
      {
        ComAdminClassInfo comAdminClassInfo = (ComAdminWrapper.GetAppInfo(appid.ToString("B")) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindAppInfo", (object) appid.ToString("B")), (Exception) null)).FindClass(clsid.ToString("B"));
        if (comAdminClassInfo == null)
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindClassInfo", (object) clsid.ToString("B")), (Exception) null);
        string str1 = webDirectoryPath + "\\" + comAdminClassInfo.Name;
        if (File.Exists(str1 + ".svc"))
        {
          int num = 1;
          while (File.Exists(str1 + "." + num.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ".svc"))
            ++num;
          str1 = str1 + "." + num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
        }
        string str2 = str1 + ".svc";
        string str3 = clsid.ToString("B") + "," + appid.ToString("B");
        using (StreamWriter text = File.CreateText(str2))
          text.WriteLine("<%@ServiceHost {0}=\"{1}\" {2}=\"{3}\" %>", (object) "Factory", (object) typeof (WasHostedComPlusFactory).FullName, (object) "Service", (object) str3);
        return new SvcFileManager.SvcFile(appid, clsid, SvcFileManager.SvcFileState.Added, new AtomicFile(str2));
      }

      private static IDictionary<string, string> ParseServiceDirective(string serviceText)
      {
        try
        {
          return (IDictionary<string, string>) typeof (ServiceHostFactory).Assembly.GetType("System.ServiceModel.Activation.ServiceParser").InvokeMember(nameof (ParseServiceDirective), BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
          {
            (object) serviceText
          }, CultureInfo.InvariantCulture);
        }
        catch (TargetInvocationException ex)
        {
          throw ex.InnerException;
        }
      }

      public static SvcFileManager.SvcFile OpenExisting(string fileName)
      {
        if (!File.Exists(fileName))
          return (SvcFileManager.SvcFile) null;
        string serviceText = (string) null;
        using (StreamReader streamReader = File.OpenText(fileName))
          serviceText = streamReader.ReadToEnd();
        IDictionary<string, string> serviceDirective;
        try
        {
          serviceDirective = SvcFileManager.SvcFile.ParseServiceDirective(serviceText);
        }
        catch (Exception ex)
        {
          switch (ex)
          {
            case NullReferenceException _:
            case SEHException _:
              throw ex;
            default:
              ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("SvcFileParsingFailedWithError", (object) fileName, (object) ex.Message));
              return (SvcFileManager.SvcFile) null;
          }
        }
        if (serviceDirective == null)
          return (SvcFileManager.SvcFile) null;
        if (!serviceDirective.ContainsKey("Factory") || !serviceDirective.ContainsKey("Service"))
          return (SvcFileManager.SvcFile) null;
        string str = serviceDirective["Factory"];
        Type type = typeof (WasHostedComPlusFactory);
        if (type.Assembly.GetType(serviceDirective["Factory"], false) != type)
          return (SvcFileManager.SvcFile) null;
        string[] strArray = serviceDirective["Service"].Split(',');
        if (strArray.Length != 2)
        {
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("BadlyFormattedSvcFile", (object) fileName));
          return (SvcFileManager.SvcFile) null;
        }
        Guid clsid;
        Guid appid;
        try
        {
          clsid = new Guid(strArray[0]);
          appid = new Guid(strArray[1]);
        }
        catch (FormatException ex)
        {
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("BadlyFormattedAppIDOrClsidInSvcFile", (object) fileName));
          return (SvcFileManager.SvcFile) null;
        }
        return new SvcFileManager.SvcFile(appid, clsid, SvcFileManager.SvcFileState.Existing, new AtomicFile(fileName));
      }

      public Guid Appid => this.appid;

      public Guid Clsid => this.clsid;

      public SvcFileManager.SvcFileState State => this.state;

      public void Abort() => this.svcFile.Abort();

      public void Commit() => this.svcFile.Commit();

      public void Delete()
      {
        this.svcFile.Delete();
        this.state = SvcFileManager.SvcFileState.Deleted;
      }

      public void Prepare() => this.svcFile.Prepare();
    }
  }
}
