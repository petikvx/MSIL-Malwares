// Decompiled with JetBrains decompiler
// Type: BeamDesign.DRBPartialDesign
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using System;

namespace BeamDesign
{
  public class DRBPartialDesign : DoubleReinforcement
  {
    public DRBPartialDesign(double Mu, double B, double H, double A, double Fy, double Fc)
      : base(Mu, B, H, A, Fy, Fc)
    {
      if (H - A <= 0.0)
        throw new Exception("α should be less than h");
      this.AsCalc();
    }

    protected override double AlphaCalc() => 0.5 * this.Beta1Calc() * (630.0 / (630.0 + this.Fy));

    protected override double AzeroCalc() => this.AlphaCalc() * (1.0 - 0.5 * this.AlphaCalc());

    protected double YMax() => this.AlphaCalc() * this.D;

    protected double As1Calc() => this.Mu1Calc() / (0.9 * this.GammazeroCalc() * this.D * this.Fy);

    protected double Mu1Calc() => 0.9 * this.Beta1Calc() * this.Fc * this.B * Math.Pow(this.D, 2.0) * this.AzeroCalc();

    protected double As_Calc()
    {
      this.AreaS_ = (this.Mu - this.Mu1Calc()) / (0.9 * this.Fy * (this.D - this.D_));
      return this.AreaS_;
    }

    protected void AsCalc()
    {
      this.AreaS = this.As1Calc() + this.As_Calc();
      if ((this.AreaS - Math.Abs(this.AreaS_)) / this.B * this.D < this.Beta1Calc() * this.Fc / this.Fy * (this.D_ * 535.0 / (this.D * (630.0 - this.Fy))) || this.AreaS_ <= 0.0)
        throw new Exception("Use single reinforcement");
      double num1 = 0.9 / this.Fy * this.B * this.D;
      double num2 = 0.75 * this.AsbCalc();
      this.AreaS = this.AreaS < num1 ? num1 : this.AreaS;
      if (this.AreaS > num2)
        throw new Exception("b or h must be bigger");
      bool flag = this.AreaS - this.AreaS_ < num2;
    }

    private double AsbCalc() => (455.0 / (630.0 + this.Fy) * (this.Fc / this.Fy) + this.As_Calc() * this.FsCalc() / (this.B * this.D * this.Fy)) * this.B * this.D;

    private double FsCalc()
    {
      double num = 630.0 * (1.0 - this.D_ * (630.0 + this.Fy) / (this.D * 630.0));
      return num < this.Fy ? num : this.Fy;
    }
  }
}
