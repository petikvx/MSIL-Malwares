// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: TypeLimitingDeserializationBind, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D6D78DD-B812-498A-928B-6D9E4655E6A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0f32fcee5fe0e98a2f219eac2c9b9c19cbb2f48660a676a0992bf38c59cdf153.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -1839117392;
      int index;
      JSONNode jsonNode;
      int count;
      int aIndex;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -397781614)) % 16U)
        {
          case 0:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * -1268420488 ^ 1153478712;
            continue;
          case 1:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -291095685 ^ -986709071;
            continue;
          case 2:
            num1 = (int) num2 * -1283312755 ^ 1032892229;
            continue;
          case 3:
            num1 = (int) num2 * -1907345234 ^ -1119151775;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1784243722 ^ -643067734;
            continue;
          case 6:
            int num3;
            num1 = num3 = index >= count ? -1308134547 : (num3 = -288512994);
            continue;
          case 7:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = -1234428821;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * -487631895 ^ -1060991457;
            continue;
          case 9:
            flag = aIndex < count;
            num1 = -1154519575;
            continue;
          case 10:
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * 2092030473 ^ -218186261;
            continue;
          case 11:
            int num4 = flag ? -1962361044 : (num4 = -1640151990);
            num1 = num4 ^ (int) num2 * -1908490085;
            continue;
          case 12:
            this._playerStates[index] = new PlayerState();
            ++index;
            num1 = -367164348;
            continue;
          case 13:
            this._buffer = buffer;
            this._random = Game.\u206A‪​‬‏‫‭‮‬‭‮⁫‫‬⁯‮⁪‫‎‍⁭⁮⁮‎‫‮​‌‫‌⁭‮​‎​‍⁭‬‫⁭‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * 1977195684 ^ 1535039016;
            continue;
          case 14:
            this._dice = new Dice();
            num1 = (int) num2 * -291046611 ^ 86541508;
            continue;
          case 15:
            goto label_3;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    public bool Finished
    {
      get
      {
        if (!this._finished)
          goto label_4;
label_1:
        int num1 = -44422664;
label_2:
        bool finished;
        PlayerState playerState;
        int index;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -22625598)) % 13U)
          {
            case 0:
              goto label_1;
            case 1:
              playerStates = this._playerStates;
              num1 = (int) num2 * 351714730 ^ -1426624463;
              continue;
            case 3:
              playerState = playerStates[index];
              num1 = -1334604477;
              continue;
            case 4:
              finished = false;
              num1 = (int) num2 * -191545846 ^ -1348116387;
              continue;
            case 5:
              index = 0;
              num1 = (int) num2 * 1220114961 ^ -1728379366;
              continue;
            case 6:
              int num3;
              num1 = num3 = index < playerStates.Length ? -1579636703 : (num3 = -206771573);
              continue;
            case 7:
              finished = true;
              num1 = (int) num2 * 1589441595 ^ -104066835;
              continue;
            case 8:
              finished = true;
              num1 = (int) num2 * 411910259 ^ -1844562312;
              continue;
            case 9:
              ++index;
              num1 = -2078123741;
              continue;
            case 10:
              int num4 = playerState.State == State.Playing ? -119204378 : (num4 = -823094831);
              num1 = num4 ^ (int) num2 * 1892872687;
              continue;
            case 11:
              num1 = (int) num2 * 1607230989 ^ -253827740;
              continue;
            case 12:
              goto label_4;
            default:
              goto label_14;
          }
        }
label_14:
        return finished;
label_4:
        num1 = -1722747154;
        goto label_2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -1306458243;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1021021630)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 198756977 ^ 138724167;
            continue;
          case 1:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1177489049 ^ 216070433;
            continue;
          case 2:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -1469316311 ^ -21471516;
            continue;
          case 3:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 1012075728 ^ -335572637;
            continue;
          case 4:
            goto label_3;
          case 5:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 892428440 ^ -1362794783;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.ShuffleCards();
            this.Winners.Clear();
            this.Losers.Clear();
            num1 = (int) num2 * -637328411 ^ 1670165009;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = -469271302;
      int planningCardsCount;
      PlayerState playerState;
      Player player;
      int num2;
      int index;
      bool flag;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1745692115)) % 25U)
        {
          case 0:
            num2 = 0;
            num1 = (int) num3 * 618330477 ^ 1523470629;
            continue;
          case 1:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -1081394589;
            continue;
          case 2:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = -1628315081;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = -152891928;
            continue;
          case 5:
            int num4;
            num1 = num4 = index >= this.Players.Length ? -1198203799 : (num4 = -488371839);
            continue;
          case 6:
            int num5 = !flag ? -1249273648 : (num5 = -1139287147);
            num1 = num5 ^ (int) num3 * -886158368;
            continue;
          case 7:
            num1 = (int) num3 * 1258978762 ^ -1665073934;
            continue;
          case 8:
            playerState.Sprint = -1;
            num1 = (int) num3 * -610817294 ^ 967426448;
            continue;
          case 9:
            num2 = 0;
            num1 = -548986024;
            continue;
          case 10:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1933480128 ^ -1469879823;
            continue;
          case 11:
            goto label_1;
          case 12:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1328956306 ^ -387949450;
            continue;
          case 13:
            playerState.State = State.Playing;
            num1 = (int) num3 * 440404770 ^ -2031437167;
            continue;
          case 14:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -1281181293 ^ -994631898;
            continue;
          case 15:
            int num6 = planningCardsCount == 0 ? -513242463 : (num6 = -1305196045);
            num1 = num6 ^ (int) num3 * 506795968;
            continue;
          case 16:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -623745622 ^ -976421051;
            continue;
          case 17:
            int num7 = !morePlanningSprint ? 446537427 : (num7 = 1791920567);
            num1 = num7 ^ (int) num3 * -165162070;
            continue;
          case 18:
            ++index;
            num1 = (int) num3 * 1607358391 ^ 1515102189;
            continue;
          case 19:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -2058336931 ^ -1209732388;
            continue;
          case 20:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = -368423663;
            continue;
          case 21:
            index = 0;
            num1 = (int) num3 * -1198062960 ^ -2027962145;
            continue;
          case 22:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 342864355 ^ 519687280;
            continue;
          case 23:
            num1 = (int) num3 * -1880129192 ^ 1381440072;
            continue;
          case 24:
            flag = num2 > 0;
            num1 = -1353854923;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 633073069;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 247890016)) % 15U)
        {
          case 0:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1759491248;
            continue;
          case 1:
            int num3 = flag2 ? 1573612612 : (num3 = 1951204345);
            num1 = num3 ^ (int) num2 * 600664956;
            continue;
          case 2:
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 1290693110 ^ 975130350;
            continue;
          case 3:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1178420908 ^ 459958802;
            continue;
          case 4:
            num1 = (int) num2 * -2031818868 ^ -1457186717;
            continue;
          case 5:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1127492132 ^ -1506163061;
            continue;
          case 6:
            this._currentPlayer = 0;
            num1 = (int) num2 * 747946713 ^ -778372239;
            continue;
          case 7:
            num1 = (int) num2 * -1695135525 ^ 1949244221;
            continue;
          case 8:
            int num4 = !flag1 ? 1163236408 : (num4 = 777231511);
            num1 = num4 ^ (int) num2 * -2046340869;
            continue;
          case 9:
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * -826495941 ^ 140356359;
            continue;
          case 10:
            num1 = (int) num2 * -751843164 ^ 326754043;
            continue;
          case 11:
            goto label_1;
          case 12:
            goto label_3;
          case 13:
            this.Print((object) Game.\u206B⁫⁮⁯‎⁫‏⁬⁫‭‫‌⁪​‫‌⁮‮‏‮‫⁪‍​‎‪‎‮‏‬⁫‫⁫‭⁬‪‏‫‬⁬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -684339799 ^ -517478090;
            continue;
          case 14:
            this.Print((object) Game.\u202B⁭⁫⁯‌⁫‌‍‭‬‍‮⁪⁮‪⁪‭⁬⁮​‌⁫‭⁭‫‪‮‮​⁯⁮‫‪⁬⁮‪‌⁭‎⁫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 336962389;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = -601346433;
      while (true)
      {
        uint num2;
        bool flag1;
        Card card;
        int num3;
        bool flag2;
        bool flag3;
        int num4;
        bool flag4;
        PlayerState playerState1;
        int index;
        PlayerState playerState2;
        int num5;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1021490965)) % 77U)
        {
          case 0:
            flag1 = num5 < this._playerStates.Length;
            num1 = -1141943120;
            continue;
          case 1:
            num1 = (int) num2 * 344133842 ^ 1372177086;
            continue;
          case 2:
            flag7 = !flag2;
            num1 = (int) num2 * 34252116 ^ 622560670;
            continue;
          case 3:
            num1 = (int) num2 * -738229558 ^ 811170038;
            continue;
          case 4:
            num1 = (int) num2 * 1360110147 ^ 1910909786;
            continue;
          case 5:
            int num7 = flag7 ? -1018163690 : (num7 = -1259908638);
            num1 = num7 ^ (int) num2 * 38957690;
            continue;
          case 6:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1118773559 ^ -990910333;
            continue;
          case 7:
            num1 = -2105746957;
            continue;
          case 8:
            num1 = -90291139;
            continue;
          case 9:
            num3 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 922183404 ^ -1293869660;
            continue;
          case 10:
            ++playerState2.Sprint;
            num1 = (int) num2 * -1749432865 ^ -617797167;
            continue;
          case 11:
            num1 = (int) num2 * -1332709574 ^ 1189330659;
            continue;
          case 12:
            playerState1.Resources -= Game.\u200C‫‎⁬‭⁭‎‮‌‮‪‮​‎‏⁫‭⁯‭⁪⁪⁫⁯‬⁮⁮⁫​‬‎‎‏‪‬‬‍‎‍‫‬‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 27078665 ^ 822103446;
            continue;
          case 13:
            playerState1.State = State.Lose;
            int num8;
            num1 = num8 = !this.Losers.Contains(index) ? -741313395 : (num8 = -1188073058);
            continue;
          case 14:
            card = this.DrawCard();
            flag3 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -579275910 ^ -476927275;
            continue;
          case 15:
            int num9 = this.Rules.OnlyOneWinner ? -1210675490 : (num9 = -62560665);
            num1 = num9 ^ (int) num2 * -1280746673;
            continue;
          case 16:
            int num10 = !flag1 ? -201513728 : (num10 = -1167029935);
            num1 = num10 ^ (int) num2 * 81290241;
            continue;
          case 17:
            num1 = (int) num2 * 920454690 ^ -182790980;
            continue;
          case 18:
            num1 = (int) num2 * -1309700317 ^ 1078683334;
            continue;
          case 19:
            int num11;
            num1 = num11 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? -1513231944 : (num11 = -755835734);
            continue;
          case 20:
            int num12 = !flag8 ? 1515713608 : (num12 = 1117815066);
            num1 = num12 ^ (int) num2 * -406790918;
            continue;
          case 21:
            num1 = -1339352055;
            continue;
          case 22:
            int num13 = num5 == playerIndex ? 298431585 : (num13 = 1051401219);
            num1 = num13 ^ (int) num2 * 1211157846;
            continue;
          case 23:
            num1 = (int) num2 * 1366762066 ^ 698862983;
            continue;
          case 24:
            num1 = (int) num2 * 929926688 ^ 1315866411;
            continue;
          case 25:
            num5 = 0;
            num1 = (int) num2 * -2034590458 ^ -646623444;
            continue;
          case 26:
            ++num5;
            num1 = -1372459185;
            continue;
          case 27:
            num1 = -1956724721;
            continue;
          case 28:
            num1 = -1721068314;
            continue;
          case 29:
            playerState2.Resources -= num4;
            int num14 = playerState2.Resources >= 0 ? -828746379 : (num14 = -1777576006);
            num1 = num14 ^ (int) num2 * -1662874065;
            continue;
          case 30:
            num1 = (int) num2 * -1973217749 ^ 409313175;
            continue;
          case 31:
            flag4 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -503373051 ^ 1244165084;
            continue;
          case 32:
            int num15 = flag9 ? 849629818 : (num15 = 870390306);
            num1 = num15 ^ (int) num2 * 1434497335;
            continue;
          case 33:
            playerState2.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1497019530 ^ 1361096847;
            continue;
          case 34:
            int num16 = playerState1.Resources >= 0 ? 994593537 : (num16 = 1340922017);
            num1 = num16 ^ (int) num2 * -1541232476;
            continue;
          case 35:
            num1 = -431587293;
            continue;
          case 36:
            num1 = (int) num2 * 1937205727 ^ -580639351;
            continue;
          case 37:
            int num17;
            num1 = num17 = playerState2.Sprint <= this.Rules.SprintCount ? -2105746957 : (num17 = -1858514245);
            continue;
          case 38:
            ++index;
            num1 = -403664906;
            continue;
          case 39:
            num1 = (int) num2 * -479210737 ^ -1750557342;
            continue;
          case 40:
            this.Losers.Add(index);
            num1 = (int) num2 * -2032286412 ^ 1459055453;
            continue;
          case 41:
            num1 = (int) num2 * 1026625930 ^ 1085253099;
            continue;
          case 42:
            playerState1 = this._playerStates[index];
            num1 = (int) num2 * 1953636017 ^ 824206626;
            continue;
          case 43:
            flag4 = true;
            num4 = card.Impact;
            num1 = (int) num2 * 353809647 ^ 2086932024;
            continue;
          case 44:
            this._finished = true;
            num1 = (int) num2 * 1127533454 ^ 326604743;
            continue;
          case 45:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * 1000603969 ^ 1356856228;
            continue;
          case 46:
            goto label_3;
          case 47:
            index = 0;
            num1 = -917144435;
            continue;
          case 48:
            int num18 = flag5 ? 1534763365 : (num18 = 1144769231);
            num1 = num18 ^ (int) num2 * 472413254;
            continue;
          case 49:
            flag4 = false;
            num1 = -118419726;
            continue;
          case 50:
            flag6 = !flag3;
            num1 = (int) num2 * -1902416314 ^ 1275390007;
            continue;
          case 51:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u206B⁫⁮⁯‎⁫‏⁬⁫‭‫‌⁪​‫‌⁮‮‏‮‫⁪‍​‎‪‎‮‏‬⁫‫⁫‭⁬‪‏‫‬⁬‮("\t", playerState3 != null ? Game.\u200E⁭‌⁭‬⁬‏⁮⁬‫‫‮⁯‍‪⁬‍‬⁪‎‌‬⁬‌‎‮⁮⁫​⁪⁬‬⁯⁬‭‫⁫⁮‫‮((object) playerState3) : (string) null));
            num1 = -85024615;
            continue;
          case 52:
            ++playerState2.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * -113412357 ^ 503190628;
            continue;
          case 53:
            num1 = -256632601;
            continue;
          case 54:
            flag5 = playerState2.Sprint < 0;
            num1 = -946233168;
            continue;
          case 55:
            num1 = -88479177;
            continue;
          case 56:
            num1 = (int) num2 * 499095984 ^ 1238432936;
            continue;
          case 57:
            num1 = (int) num2 * 1512839457 ^ -121761456;
            continue;
          case 58:
            this.Losers.Add(num5);
            num1 = (int) num2 * -1903307849 ^ 774589602;
            continue;
          case 59:
            num1 = (int) num2 * 180787745 ^ -563358218;
            continue;
          case 60:
            num1 = (int) num2 * 237559787 ^ 420376439;
            continue;
          case 61:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 62:
            goto label_1;
          case 63:
            playerState2 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206B⁫⁮⁯‎⁫‏⁬⁫‭‫‌⁪​‫‌⁮‮‏‮‫⁪‍​‎‪‎‮‏‬⁫‫⁫‭⁬‪‏‫‬⁬‮("\nPLAYER ", playerIndex.ToString()));
            int num19 = playerState2.State != 0 ? 226746191 : (num19 = 1166116274);
            num1 = num19 ^ (int) num2 * -1674200899;
            continue;
          case 64:
            flag8 = !this.Losers.Contains(num5);
            num1 = -692766668;
            continue;
          case 65:
            num1 = (int) num2 * 725075441 ^ 1170562544;
            continue;
          case 66:
            num1 = (int) num2 * 330709608 ^ -187660385;
            continue;
          case 67:
            num1 = (int) num2 * -1099867824 ^ 1735970374;
            continue;
          case 68:
            int num20;
            num1 = num20 = index >= this._playerStates.Length ? -2019974591 : (num20 = -911586121);
            continue;
          case 69:
            int num21 = !flag6 ? 440041092 : (num21 = 1430375806);
            num1 = num21 ^ (int) num2 * 307989698;
            continue;
          case 70:
            int num22;
            num1 = num22 = !flag4 ? -346688810 : (num22 = -303777998);
            continue;
          case 71:
            num1 = -168255957;
            continue;
          case 72:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag2 ? (object) "ALL " : (object) "", flag3 ? (object) "receives" : (object) "pays", (object) Game.\u200C‏​⁭⁬‪‬‭⁭⁫⁭⁯⁭‮⁫⁭⁬‮‎‮‌⁬⁬‪‬⁭⁬⁫⁭​⁪‎⁬‮⁯​‎‫⁫‏‮(num4), flag4 ? (object) "advance" : (object) "stay");
            num1 = -682414172;
            continue;
          case 73:
            playerState2.State = State.Lose;
            flag9 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 965241996 ^ -1174708553;
            continue;
          case 74:
            num1 = (int) num2 * -1918644193 ^ -414434649;
            continue;
          case 75:
            num1 = (int) num2 * -1619568444 ^ -2117383581;
            continue;
          case 76:
            flag4 = num3 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u200C‫‎⁬‭⁭‎‮‌‮‪‮​‎‏⁫‭⁯‭⁪⁪⁫⁯‬⁮⁮⁫​‬‎‎‏‪‬‬‍‎‍‫‬‮(0, num3);
            num1 = (int) num2 * -1855149031 ^ 1579599299;
            continue;
          default:
            goto label_82;
        }
        flag2 = num6 != 0;
        num1 = -851167415;
      }
label_3:
      return;
label_82:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 392476589;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 188415)) % 9U)
        {
          case 0:
            card1 = this._deck[0];
            num1 = 1566581552;
            continue;
          case 1:
            num1 = (int) num2 * 1760800705 ^ -1468557102;
            continue;
          case 2:
            int num3 = this._deck.Count > 0 ? 272951435 : (num3 = 1448393812);
            num1 = num3 ^ (int) num2 * -236310269;
            continue;
          case 3:
            card2 = card1;
            num1 = (int) num2 * 399753086 ^ -478249368;
            continue;
          case 5:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1211617009 ^ 1026618956;
            continue;
          case 6:
            num1 = (int) num2 * 2125363859 ^ 524441558;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * -831550659 ^ -1024588871;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = -1960392008;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -170103365)) % 10U)
        {
          case 1:
            index = 0;
            num1 = (int) num2 * -1411433262 ^ -127978041;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * 1993553305 ^ 573954394;
            continue;
          case 3:
            num1 = (int) num2 * 1821761456 ^ 1088115823;
            continue;
          case 4:
            goto label_1;
          case 5:
            int num3 = !flag ? 418257844 : (num3 = 1328926837);
            num1 = num3 ^ (int) num2 * 1152520315;
            continue;
          case 6:
            num1 = (int) num2 * 1893264182 ^ -478894934;
            continue;
          case 7:
            flag = index < this._playerStates.Length;
            num1 = -157731712;
            continue;
          case 8:
            ++index;
            num1 = (int) num2 * -1424846905 ^ -194228522;
            continue;
          case 9:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200E⁭‌⁭‬⁬‏⁮⁬‫‫‮⁯‍‪⁬‍‬⁪‎‌‬⁬‌‎‮⁮⁫​⁪⁬‬⁯⁬‭‫⁫⁮‫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200B⁪‌‮​‎⁬⁭⁭⁯‭​‪⁫⁫⁬‭⁯⁫‌‬‮​‭‏‎​⁯‌‫⁮‍‮‪⁯‮⁫‌⁮⁮‮(strArray);
            num1 = -744720613;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1042160045;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 137598764)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 455942619 ^ -1834738711;
            continue;
          case 2:
            num1 = (int) num2 * -1172599385 ^ 2087163117;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
      string str = Game.\u202A⁮‍‮​‬‭‍‮‭‍‬​⁭⁪⁯‭‫‪⁪‌‍‬‍‍‬‏‎⁪⁮⁪⁮​​‫‎⁯‏⁫⁯‮(Game.\u200E⁭‌⁭‬⁬‏⁮⁬‫‫‮⁯‍‪⁬‍‬⁪‎‌‬⁬‌‎‮⁮⁫​⁪⁬‬⁯⁬‭‫⁫⁮‫‮(text), more);
label_1:
      int num1 = 909448691;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1534014858)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            Game.\u202A‬⁫⁮‮⁫⁮⁪⁯⁯‫‮​⁬‍⁬⁫⁪⁪‎‎‌‮‍‮‌⁪‮⁬‭​⁫‬⁯‍⁪‎⁫⁮‎‮(this._buffer, str);
            num1 = (int) num2 * -195446312 ^ 1584039568;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u206A‪​‬‏‫‭‮‬‭‮⁫‫‬⁯‮⁪‫‎‍⁭⁮⁮‎‫‮​‌‫‌⁭‮​‎​‍⁭‬‫⁭‮([In] int obj0) => new Random(obj0);

    static string \u202B⁭⁫⁯‌⁫‌‍‭‬‍‮⁪⁮‪⁪‭⁬⁮​‌⁫‭⁭‫‪‮‮​⁯⁮‫‪⁬⁮‪‌⁭‎⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206B⁫⁮⁯‎⁫‏⁬⁫‭‫‌⁪​‫‌⁮‮‏‮‫⁪‍​‎‪‎‮‏‬⁫‫⁫‭⁬‪‏‫‬⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200C‫‎⁬‭⁭‎‮‌‮‪‮​‎‏⁫‭⁯‭⁪⁪⁫⁯‬⁮⁮⁫​‬‎‎‏‪‬‬‍‎‍‫‬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200C‏​⁭⁬‪‬‭⁭⁫⁭⁯⁭‮⁫⁭⁬‮‎‮‌⁬⁬‪‬⁭⁬⁫⁭​⁪‎⁬‮⁯​‎‫⁫‏‮([In] int obj0) => Math.Abs(obj0);

    static string \u200E⁭‌⁭‬⁬‏⁮⁬‫‫‮⁯‍‪⁬‍‬⁪‎‌‬⁬‌‎‮⁮⁫​⁪⁬‬⁯⁬‭‫⁫⁮‫‮([In] object obj0) => obj0.ToString();

    static string \u200B⁪‌‮​‎⁬⁭⁭⁯‭​‪⁫⁫⁬‭⁯⁫‌‬‮​‭‏‎​⁯‌‫⁮‍‮‪⁯‮⁫‌⁮⁮‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A⁮‍‮​‬‭‍‮‭‍‬​⁭⁪⁯‭‫‪⁪‌‍‬‍‍‬‏‎⁪⁮⁪⁮​​‫‎⁯‏⁫⁯‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202A‬⁫⁮‮⁫⁮⁪⁯⁯‫‮​⁬‍⁬⁫⁪⁪‎‎‌‮‍‮‌⁪‮⁬‭​⁫‬⁯‍⁪‎⁫⁮‎‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
