// Decompiled with JetBrains decompiler
// Type: MentQ.MentQButton
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MentQ
{
  [Category("MentQ")]
  public class MentQButton : Button
  {
    private Color _overlapColor;
    private bool _underline;
    private Color _underlineColor;
    private int _underlineSize;

    public MentQButton()
    {
      this.Font = new Font("Verdana", 7f);
      this.ForeColor = Color.White;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.BackColor = MentQDefaults.MentQBlue;
      this.UnderlineSize = 2;
      this.UnderlineColor = Color.FromArgb(100, 70, 70, 70);
    }

    [Category("Appearance")]
    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public bool Underline
    {
      get => this._underline;
      set
      {
        this._underline = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public int UnderlineSize
    {
      get => this._underlineSize;
      set
      {
        this._underlineSize = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public Color UnderlineColor
    {
      get => this._underlineColor;
      set
      {
        this._underlineColor = value;
        this.Invalidate();
      }
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      Graphics graphics = pevent.Graphics;
      graphics.Clear(this.Parent.BackColor);
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
      using (SolidBrush solidBrush = new SolidBrush(this.BackColor))
        graphics.FillPath((Brush) solidBrush, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, (float) (this.Width + 1), (float) (this.Height + 1)), 5f));
      using (SolidBrush solidBrush = new SolidBrush(this._overlapColor))
        graphics.FillPath((Brush) solidBrush, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, (float) (this.Width + 1), (float) (this.Height + 1)), 5f));
      using (SolidBrush solidBrush = new SolidBrush(this.ForeColor))
      {
        PointF point;
        ref PointF local = ref point;
        double width1 = (double) this.Width;
        SizeF sizeF = graphics.MeasureString(this.Text, this.Font);
        double width2 = (double) sizeF.Width;
        double x = (width1 - width2) / 2.0;
        double height1 = (double) this.Height;
        sizeF = graphics.MeasureString(this.Text, this.Font);
        double height2 = (double) sizeF.Height;
        double y = (height1 - height2) / 2.0;
        local = new PointF((float) x, (float) y);
        if (this.ImageList != null)
        {
          int num = this.ImageIndex;
          if (!string.IsNullOrEmpty(this.ImageKey) && num != -1)
            num = this.ImageList.Images.IndexOfKey(this.ImageKey);
          if (num != -1)
            this.ImageList.Draw(graphics, Convert.ToInt32(point.X) - this.ImageList.ImageSize.Width - 5, (this.Height - this.ImageList.ImageSize.Height) / 2, this.ImageIndex);
        }
        else if (this.Image != null)
          graphics.DrawImage(this.Image, new Point(Convert.ToInt32(point.X) - this.Image.Width - 5, (this.Height - this.Image.Height) / 2));
        graphics.DrawString(this.Text, this.Font, (Brush) solidBrush, point);
      }
      if (this.Underline)
      {
        using (SolidBrush solidBrush = new SolidBrush(this.UnderlineColor))
        {
          graphics.SetClip(new Rectangle(0, this.Height - this.UnderlineSize, this.Width, this.UnderlineSize));
          graphics.FillPath((Brush) solidBrush, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, (float) (this.Width + 1), (float) (this.Height + 1)), 5f));
        }
      }
      if (this.Enabled)
        return;
      using (SolidBrush solidBrush = new SolidBrush(Color.FromArgb(100, 222, 222, 222)))
        graphics.FillPath((Brush) solidBrush, GlobalHelpers.GetRoundedRect(new RectangleF(-1f, -1f, (float) (this.Width + 1), (float) (this.Height + 1)), 5f));
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      this._overlapColor = Color.FromArgb(40, 50, 50, 50);
      this.Invalidate();
      base.OnMouseEnter(e);
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this._overlapColor = Color.FromArgb(40, 50, 50, 50);
      this.Invalidate();
      base.OnMouseUp(e);
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      this._overlapColor = Color.FromArgb(0, 0, 0, 0);
      this.Invalidate();
      base.OnMouseLeave(e);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this._overlapColor = Color.FromArgb(60, 0, 0, 0);
      this.Invalidate();
      base.OnMouseDown(e);
    }

    protected override void OnGotFocus(EventArgs e)
    {
      this._overlapColor = Color.FromArgb(40, 50, 50, 50);
      this.Invalidate();
      base.OnGotFocus(e);
    }

    protected override void OnLostFocus(EventArgs e)
    {
      this._overlapColor = Color.FromArgb(0, 0, 0, 0);
      this.Invalidate();
      base.OnLostFocus(e);
    }
  }
}
