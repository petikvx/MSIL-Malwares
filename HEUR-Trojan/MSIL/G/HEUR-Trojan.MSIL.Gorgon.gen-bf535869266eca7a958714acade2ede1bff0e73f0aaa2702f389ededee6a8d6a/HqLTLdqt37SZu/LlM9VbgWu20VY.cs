// Decompiled with JetBrains decompiler
// Type: HqLTLdqt37SZu.LlM9VbgWu20VY
// Assembly: Udby4Jt48oXkJ, Version=3.17.2.31, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 37899E89-D673-4F5B-A193-2E4DF6A54096
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-bf535869266eca7a958714acade2ede1bff0e73f0aaa2702f389ededee6a8d6a.exe

using System;
using System.Globalization;

namespace HqLTLdqt37SZu
{
  public class LlM9VbgWu20VY : Exception
  {
    public LlM9VbgWu20VY()
      : base("Unknown error")
    {
      this.drw00J0V6EObe = "unknown_error";
    }

    public LlM9VbgWu20VY(string errorCode)
      : base(LlM9VbgWu20VY.\u0030EtNxI3T6db5Y(errorCode))
    {
      this.drw00J0V6EObe = errorCode;
    }

    public LlM9VbgWu20VY(string errorCode, string message)
      : base(message)
    {
      this.drw00J0V6EObe = errorCode;
    }

    public LlM9VbgWu20VY(string errorCode, Exception innerException)
      : base(LlM9VbgWu20VY.\u0030EtNxI3T6db5Y(errorCode), innerException)
    {
      this.drw00J0V6EObe = errorCode;
    }

    public LlM9VbgWu20VY(string errorCode, string message, Exception innerException)
      : base(message, innerException)
    {
      this.drw00J0V6EObe = errorCode;
    }

    public string drw00J0V6EObe { get; private set; }

    public virtual string LnUAd7Ezjrwt6() => this.ToString() + string.Format((IFormatProvider) CultureInfo.CurrentCulture, "\n\tErrorCode: {0}", new object[1]
    {
      (object) this.drw00J0V6EObe
    });

    internal static string \u0030EtNxI3T6db5Y(string zjl2ZVDdV5dIU)
    {
      string str;
      // ISSUE: reference to a compiler-generated method
      switch (iO9GnQ57Udgog.KziVsv7bH52i9(zjl2ZVDdV5dIU))
      {
        case 104685493:
          if (zjl2ZVDdV5dIU == "interaction_required")
          {
            str = "interaction_required";
            break;
          }
          goto default;
        case 401983839:
          if (zjl2ZVDdV5dIU == "network_not_available")
          {
            str = "The network is down so authentication cannot proceed";
            break;
          }
          goto default;
        case 529414910:
          if (zjl2ZVDdV5dIU == "unknown_user_type")
          {
            str = "Unknown User Type";
            break;
          }
          goto default;
        case 633653449:
          if (zjl2ZVDdV5dIU == "authentication_canceled")
          {
            str = "User canceled authentication";
            break;
          }
          goto default;
        case 653509632:
          if (zjl2ZVDdV5dIU == "wstrust_endpoint_not_found")
          {
            str = "WS-Trust endpoint not found in metadata document";
            break;
          }
          goto default;
        case 657250756:
          if (zjl2ZVDdV5dIU == "authority_not_in_valid_list")
          {
            str = "'authority' is not in the list of valid addresses";
            break;
          }
          goto default;
        case 684321013:
          if (zjl2ZVDdV5dIU == "identity_provider_request_failed")
          {
            str = "Token request made to identity provider failed. Check InnerException for more details";
            break;
          }
          goto default;
        case 846959685:
          if (zjl2ZVDdV5dIU == "invalid_credential_type")
          {
            str = "Invalid credential type";
            break;
          }
          goto default;
        case 921373053:
          if (zjl2ZVDdV5dIU == "get_user_name_failed")
          {
            str = "Failed to get user name";
            break;
          }
          goto default;
        case 1076444645:
          if (zjl2ZVDdV5dIU == "missing_federation_metadata_url")
          {
            str = "Federation Metadata Url is missing for federated user. This user type is unsupported.";
            break;
          }
          goto default;
        case 1081884187:
          if (zjl2ZVDdV5dIU == "multiple_matching_tokens_detected")
          {
            str = "The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more arguments (e.g. UserId)";
            break;
          }
          goto default;
        case 1121732919:
          if (zjl2ZVDdV5dIU == "user_interaction_required")
          {
            str = "One of two conditions was encountered: 1. The PromptBehavior.Never flag was passed, but the constraint could not be honored, because user interaction was required. 2. An error occurred during a silent web authentication that prevented the http authentication flow from completing in a short enough time frame";
            break;
          }
          goto default;
        case 1210803605:
          if (zjl2ZVDdV5dIU == "user_realm_discovery_failed")
          {
            str = "User realm discovery failed";
            break;
          }
          goto default;
        case 1710369199:
          if (zjl2ZVDdV5dIU == "integrated_authentication_failed")
          {
            str = "Integrated authentication failed. You may try an alternative authentication method";
            break;
          }
          goto default;
        case 1987999452:
          if (zjl2ZVDdV5dIU == "unauthorized_response_expected")
          {
            str = "Unauthorized http response (status code 401) was expected";
            break;
          }
          goto default;
        case 2308089928:
          if (zjl2ZVDdV5dIU == "password_required_for_managed_user")
          {
            str = "Password is required for managed user";
            break;
          }
          goto default;
        case 2383118141:
          if (zjl2ZVDdV5dIU == "email_address_suffix_mismatch")
          {
            str = "No identity provider email address suffix matches the provided address";
            break;
          }
          goto default;
        case 2859216982:
          if (zjl2ZVDdV5dIU == "parsing_wstrust_response_failed")
          {
            str = "Parsing WS-Trust response failed";
            break;
          }
          goto default;
        case 2955936668:
          if (zjl2ZVDdV5dIU == "accessing_ws_metadata_exchange_failed")
          {
            str = "Accessing WS metadata exchange failed";
            break;
          }
          goto default;
        case 2999991670:
          if (zjl2ZVDdV5dIU == "parsing_ws_metadata_exchange_failed")
          {
            str = "Parsing WS metadata exchange failed";
            break;
          }
          goto default;
        case 3153273021:
          if (zjl2ZVDdV5dIU == "sts_token_request_failed")
          {
            str = "Token request to security token service failed.  Check InnerException for more details";
            break;
          }
          goto default;
        case 3370335793:
          if (zjl2ZVDdV5dIU == "identity_protocol_mismatch")
          {
            str = "No identity provider matches the requested protocol";
            break;
          }
          goto default;
        case 3444794840:
          if (zjl2ZVDdV5dIU == "authentication_ui_failed")
          {
            str = "The browser based authentication dialog failed to complete";
            break;
          }
          goto default;
        case 3572762709:
          if (zjl2ZVDdV5dIU == "unknown_user")
          {
            str = "Could not identify logged in user";
            break;
          }
          goto default;
        case 3584620217:
          if (zjl2ZVDdV5dIU == "encoded_token_too_long")
          {
            str = "Encoded token size is beyond the upper limit";
            break;
          }
          goto default;
        case 4015649612:
          if (zjl2ZVDdV5dIU == "identity_protocol_login_url_null")
          {
            str = "The LoginUrl property in identityProvider cannot be null";
            break;
          }
          goto default;
        case 4192118957:
          if (zjl2ZVDdV5dIU == "sts_metadata_request_failed")
          {
            str = "Metadata request to Access Control service failed. Check InnerException for more details";
            break;
          }
          goto default;
        default:
          str = "Unknown error";
          break;
      }
      return string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}: {1}", new object[2]
      {
        (object) zjl2ZVDdV5dIU,
        (object) str
      });
    }

    internal enum dJDX8UitCfQrf
    {
      Json,
      Other,
    }
  }
}
