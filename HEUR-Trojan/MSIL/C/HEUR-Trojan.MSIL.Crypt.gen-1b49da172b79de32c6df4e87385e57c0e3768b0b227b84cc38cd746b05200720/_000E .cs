// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CustomQueryInterfaceResult, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C313905-EBD1-4523-EACC-B48B0BED3910
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b49da172b79de32c6df4e87385e57c0e3768b0b227b84cc38cd746b05200720.exe

using Microsoft.VisualBasic.CompilerServices;
using System;

public sealed class \u000E\u2003 : ICloneable
{
  private int \u0002;
  private int \u0003;
  private int \u0005;
  private int \u0008;
  private \u000E\u2003.\u0002 \u0006;
  private ConsoleColor \u000E;

  public \u000E\u2003(int _param1, int _param2, \u000E\u2003.\u0002 _param3, ConsoleColor _param4)
  {
    this.\u0002 = _param1;
    this.\u0003 = _param2;
    this.\u0006 = _param3;
    this.\u000E = _param4;
  }

  public void \u0002(\u000E\u2003.\u0002 _param1)
  {
    if (_param1 != (\u000E\u2003.\u0002) 4)
      this.\u0006 = _param1;
    this.\u0005 = this.\u0002;
    this.\u0008 = this.\u0003;
    switch (this.\u0006)
    {
      case (\u000E\u2003.\u0002) 0:
        // ISSUE: variable of a reference type
        int& local1;
        // ISSUE: explicit reference operation
        int num1 = checked (^(local1 = ref this.\u0002) - 1);
        local1 = num1;
        break;
      case (\u000E\u2003.\u0002) 1:
        // ISSUE: variable of a reference type
        int& local2;
        // ISSUE: explicit reference operation
        int num2 = checked (^(local2 = ref this.\u0002) + 1);
        local2 = num2;
        break;
      case (\u000E\u2003.\u0002) 2:
        // ISSUE: variable of a reference type
        int& local3;
        // ISSUE: explicit reference operation
        int num3 = checked (^(local3 = ref this.\u0003) - 1);
        local3 = num3;
        break;
      case (\u000E\u2003.\u0002) 3:
        // ISSUE: variable of a reference type
        int& local4;
        // ISSUE: explicit reference operation
        int num4 = checked (^(local4 = ref this.\u0003) + 1);
        local4 = num4;
        break;
    }
  }

  public void \u0002(char _param1, ConsoleColor _param2)
  {
    Console.CursorLeft = this.\u0002;
    Console.CursorTop = this.\u0003;
    Console.BackgroundColor = _param2;
    Console.ForegroundColor = this.\u000E;
    Console.Write(Conversions.ToString(_param1), (object) this.\u0002, (object) this.\u0003);
  }

  public void \u0002()
  {
    Console.CursorLeft = this.\u0002;
    Console.CursorTop = this.\u0003;
    Console.BackgroundColor = this.\u000E;
    Console.Write(\u0006\u2004.\u0002(670560309), (object) this.\u0002, (object) this.\u0003);
  }

  public bool \u0002(\u000E\u2003 _param1) => this.\u0002 == _param1.\u0002() && this.\u0003 == _param1.\u0003();

  public object Clone() => (object) new \u000E\u2003(this.\u0002, this.\u0003, this.\u0006, this.\u000E);

  public object \u0002(ConsoleColor _param1) => (object) new \u000E\u2003(this.\u0002, this.\u0003, this.\u0006, _param1);

  public int \u0002() => this.\u0002;

  public void \u0002(int _param1)
  {
    this.\u0005 = this.\u0002;
    this.\u0002 = _param1;
  }

  public int \u0003() => this.\u0003;

  public void \u0003(int _param1)
  {
    this.\u0008 = this.\u0003;
    this.\u0003 = _param1;
  }

  public \u000E\u2003.\u0002 \u0002() => this.\u0006;

  public void \u0003(\u000E\u2003.\u0002 _param1) => this.\u0006 = _param1;

  public ConsoleColor \u0002() => this.\u000E;

  public void \u0002(ConsoleColor _param1) => this.\u000E = _param1;

  public int \u0005() => this.\u0005;

  public int \u0008() => this.\u0008;

  public static bool operator ==(\u000E\u2003 _param0, \u000E\u2003 _param1) => _param0.\u0002() == _param1.\u0002() && _param0.\u0003() == _param1.\u0003() && _param0.\u0002() == _param1.\u0002();

  public static bool operator !=(\u000E\u2003 _param0, \u000E\u2003 _param1) => !(_param0 == _param1);

  public enum \u0002
  {
  }
}
