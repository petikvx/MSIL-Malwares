// Decompiled with JetBrains decompiler
// Type: BlockGameApp.FrmBlockGameVersion3
// Assembly: FormatterAssemblySt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 877C36BA-E94F-4F44-80EE-D68074F87B8D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqs-8ed13e4fb92eef7aee7b0a64e9a77c702327206d71ea5cb0806d987f1b14ea9c.exe

using BlockGameApp.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Threading;
using System.Windows.Forms;

namespace BlockGameApp
{
  public class FrmBlockGameVersion3 : Form
  {
    private Bitmap _background;
    private Graphics _drawSurface;
    private Graphics _displaySurface;
    private Rectangle _screen = new Rectangle(0, 0, 800, 600);
    private Font _gameFont = Control.DefaultFont;
    private bool _retroMode = false;
    private System.Windows.Forms.Timer _timer = new System.Windows.Forms.Timer();
    private int _interval = 17;
    private Stopwatch _stopwatch = new Stopwatch();
    private long _lastTime;
    private float _delta;
    private bool _paused = false;
    private Color _playerFill = Color.DeepSkyBlue;
    private Color _playerOutline = Color.CornflowerBlue;
    private Color _goalFill = Color.LightGreen;
    private Color _goalOutline = Color.DarkGreen;
    private Color _enemyFill = Color.Tomato;
    private Color _enemyOutline = Color.DarkRed;
    private Color _starFill = Color.LightYellow;
    private Color _starOutline = Color.SandyBrown;
    private Brush _bgGradientBrush;
    private Player _player;
    private Sprite _goal;
    private List<Npc> _enemies = new List<Npc>();
    private List<Star> _starsForeground = new List<Star>();
    private List<Star> _starsBackground = new List<Star>();
    private Moon _moon = (Moon) null;
    private int _playerVelocity = 20;
    private int _objectSize = 45;
    private int _noOfEnemies = 3;
    private int _noOfEnemiesIncrement = 2;
    private const int _DEFAULT_NO_OF_ENEMIES = 3;
    private int _noOfStars = 3;
    private int _noOfStarsIncrement = 2;
    private const int _DEFAULT_NO_OF_STARS = 3;
    private int _score = 0;
    private int _numberOfMoves = 0;
    private bool _gameOver;
    private GameTools.Direction _lastPressed;
    private bool _firstFrame;
    private IContainer components = (IContainer) null;

    public FrmBlockGameVersion3()
    {
      this.InitializeComponent();
      this.Text = "Simple Block Game v2";
      this.SetClientSizeCore(this._screen.Width, this._screen.Height);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this._timer.Interval = this._interval;
      this._timer.Tick += (EventHandler) ((a, b) =>
      {
        this.CalculateDelta();
        this.UpdateGameObjects();
        this.CollisionDetection();
        if ((double) this._delta > (double) this._interval)
          return;
        this.Draw();
      });
      this.Shown += (EventHandler) ((a, b) => this.SetupGame());
      this.KeyDown += (KeyEventHandler) ((a, b) =>
      {
        if (b.KeyCode == Keys.Space)
        {
          if (this._paused)
          {
            this._paused = false;
            this.Start();
          }
          else
          {
            this._paused = true;
            this.Stop();
          }
        }
        else
        {
          switch (b.KeyCode)
          {
            case Keys.Left:
              if (this._lastPressed == GameTools.Direction.Left)
                break;
              ++this._numberOfMoves;
              this._lastPressed = GameTools.Direction.Left;
              break;
            case Keys.Up:
              if (this._lastPressed == GameTools.Direction.Up)
                break;
              ++this._numberOfMoves;
              this._lastPressed = GameTools.Direction.Up;
              break;
            case Keys.Right:
              if (this._lastPressed == GameTools.Direction.Right)
                break;
              ++this._numberOfMoves;
              this._lastPressed = GameTools.Direction.Right;
              break;
            case Keys.Down:
              if (this._lastPressed == GameTools.Direction.Down)
                break;
              ++this._numberOfMoves;
              this._lastPressed = GameTools.Direction.Down;
              break;
            default:
              this._lastPressed = GameTools.Direction.None;
              break;
          }
        }
      });
      this.KeyUp += (KeyEventHandler) ((a, b) => this._lastPressed = GameTools.Direction.None);
      this.FormClosing += (FormClosingEventHandler) ((a, b) =>
      {
        this._timer.Dispose();
        this._drawSurface.Dispose();
        this._background.Dispose();
        this._displaySurface.Dispose();
      });
    }

    private void SetupGame()
    {
      this._background = new Bitmap(this._screen.Width, this._screen.Height);
      this._drawSurface = Graphics.FromImage((Image) this._background);
      this._drawSurface.Clip = new Region(this._screen);
      this._displaySurface = this.CreateGraphics();
      this._bgGradientBrush = (Brush) new LinearGradientBrush(this._screen, Color.Transparent, Color.FromArgb(60, Color.OrangeRed), 90f);
      this._player = new Player((int) ((double) this._screen.Width * 0.5 - (double) this._objectSize * 0.5), 0, this._objectSize, this._objectSize, this._screen, this._playerVelocity, this._playerFill, this._playerOutline);
      this._goal = new Sprite(-5, this._screen.Height - this._objectSize, this._screen.Width + 10, this._objectSize + 10, this._goalFill, this._goalOutline);
      this._enemies.Clear();
      Rectangle bounds = new Rectangle(0, this._objectSize + 10, this._screen.Width, this._screen.Height - this._objectSize);
      for (int index = 0; index < this._noOfEnemies; ++index)
      {
        int randomNumber1 = GameTools.GetRandomNumber(15, 100);
        int randomNumber2 = GameTools.GetRandomNumber(bounds.X, bounds.Width - randomNumber1);
        int randomNumber3 = GameTools.GetRandomNumber(bounds.Y, bounds.Height - randomNumber1);
        int velocity = 400 / randomNumber1;
        this._enemies.Add(new Npc(randomNumber2, randomNumber3, randomNumber1, randomNumber1, bounds, velocity, this._enemyFill, this._enemyOutline));
      }
      this._starsBackground.Clear();
      for (int index = 0; index < this._noOfStars; ++index)
      {
        int randomNumber4 = GameTools.GetRandomNumber(this._screen.X, this._screen.Width);
        int randomNumber5 = GameTools.GetRandomNumber(this._screen.Y, this._screen.Height);
        int randomNumber6 = GameTools.GetRandomNumber(1, 5);
        int height = randomNumber6 * 3;
        int randomNumber7 = GameTools.GetRandomNumber(3, 5);
        this._starsForeground.Add(new Star(randomNumber4, randomNumber5, randomNumber6, height, this._screen, randomNumber7, Color.FromArgb(50, this._starOutline), Color.FromArgb(50, this._starFill)));
      }
      this._starsForeground.Clear();
      for (int index = 0; index < this._noOfStars; ++index)
      {
        int randomNumber8 = GameTools.GetRandomNumber(this._screen.X, this._screen.Width);
        int randomNumber9 = GameTools.GetRandomNumber(this._screen.Y, this._screen.Height);
        int randomNumber10 = GameTools.GetRandomNumber(3, 7);
        int height = randomNumber10 * 5;
        int randomNumber11 = GameTools.GetRandomNumber(7, 14);
        this._starsForeground.Add(new Star(randomNumber8, randomNumber9, randomNumber10, height, this._screen, randomNumber11, Color.FromArgb(100, this._starFill), Color.FromArgb(100, this._starOutline)));
      }
      if (this._moon == null)
        this._moon = new Moon(this._screen.X, this._screen.Height, 175, 175, this._screen, 3, Color.LightGoldenrodYellow, Color.NavajoWhite);
      this._lastPressed = GameTools.Direction.None;
      this._numberOfMoves = 0;
      this._firstFrame = true;
      this._stopwatch.Restart();
      this._lastTime = this._stopwatch.ElapsedMilliseconds;
      this._timer.Enabled = true;
    }

    private void CalculateDelta()
    {
      long elapsedMilliseconds = this._stopwatch.ElapsedMilliseconds;
      this._delta = (float) (elapsedMilliseconds - this._lastTime) / 100f;
      this._lastTime = elapsedMilliseconds;
    }

    private void UpdateGameObjects()
    {
      this._player.Direction = this._lastPressed;
      this._player.Move(this._delta);
      this._enemies.ForEach((Action<Npc>) (enemy => enemy.Move(this._delta)));
      this._starsForeground.ForEach((Action<Star>) (star => star.Move(this._delta)));
      this._starsBackground.ForEach((Action<Star>) (star => star.Move(this._delta)));
      this._moon.Move(this._delta);
    }

    private void Draw()
    {
      if (this._gameOver)
        return;
      if (!this._retroMode)
      {
        this._drawSurface.Clear(Color.LightBlue);
        this._starsBackground.ForEach((Action<Star>) (star => star.Draw(this._drawSurface)));
        this._starsForeground.ForEach((Action<Star>) (star => star.Draw(this._drawSurface)));
        this._moon.Draw(this._drawSurface);
        this._goal.Draw(this._drawSurface);
        this._enemies.ForEach((Action<Npc>) (enemy => enemy.Draw(this._drawSurface)));
        this._player.Draw(this._drawSurface);
        this._drawSurface.FillRectangle(this._bgGradientBrush, this._screen);
      }
      this._drawSurface.DrawString(string.Format("Score: {0}\n", (object) this._score) + "Time: " + this._stopwatch.Elapsed.ToString("mm\\:ss\\.ff") + "\n" + string.Format("Moves: {0}\n", (object) this._numberOfMoves) + string.Format("Enemies: {0}", (object) this._noOfEnemies), this._gameFont, Brushes.Black, 10f, 10f);
      this._displaySurface.DrawImage((Image) this._background, 0, 0);
      if (!this._firstFrame)
        return;
      this._firstFrame = false;
      this.Stop(true);
      Thread.Sleep(500);
      this.Start();
    }

    private void CollisionDetection()
    {
      if (Rectangle.Intersect(this._player.Rectangle, this._goal.Rectangle) != Rectangle.Empty)
      {
        this.Stop(true);
        this.CalculateScore();
        this._noOfEnemies += this._noOfEnemiesIncrement;
        this._noOfStars += this._noOfStarsIncrement;
        this.SetupGame();
      }
      else
      {
        foreach (Sprite enemy in this._enemies)
        {
          if (Rectangle.Intersect(this._player.Rectangle, enemy.Rectangle) != Rectangle.Empty)
          {
            this.Stop(true);
            if (MessageBox.Show(string.Format("Final score: {0}\nNew game?", (object) this._score), "Game over", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
              this._score = 0;
              this._moon = (Moon) null;
              this._noOfEnemies = 3;
              this._noOfStars = 3;
              this.SetupGame();
              break;
            }
            this._gameOver = true;
            this.Close();
            break;
          }
        }
      }
    }

    private void Stop(bool suppressPauseMessage = false)
    {
      this._timer.Stop();
      this._stopwatch.Stop();
      if (suppressPauseMessage)
        return;
      this._drawSurface.DrawString("Paused", this._gameFont, Brushes.Black, 10f, 60f);
      this._displaySurface.DrawImage((Image) this._background, 0, 0);
    }

    private void Start(bool stopwatchReset = false)
    {
      this._timer.Start();
      if (stopwatchReset)
        this._stopwatch.Restart();
      else
        this._stopwatch.Start();
    }

    private void CalculateScore()
    {
      int num1 = this._noOfEnemies * 100;
      long num2 = 15000L - this._stopwatch.ElapsedMilliseconds;
      int num3 = 10000 - this._numberOfMoves * 100;
      this._score += num1;
      if (num2 > 0L)
        this._score += (int) num2;
      if (num3 <= 0)
        return;
      this._score += num3;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Text = nameof (FrmBlockGameVersion3);
    }
  }
}
