// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Serialization.ObserverMapSerializer
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using TYPELIBA.Identifiers;
using TYPELIBA.Wrappers;

namespace TYPELIBA.Serialization
{
  public class ObserverMapSerializer : Form
  {
    private IContainer globalProcess;
    private Button _MockProcess;
    private Label _ExceptionProcess;
    private TextBox interpreterProcess;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ObserverMapSerializer()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              this.globalProcess = (IContainer) null;
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 2;
            case 2:
            case 4:
              this.CollectRepository();
              num2 = 5;
              continue;
            case 3:
              goto label_5;
            case 5:
              goto label_7;
            default:
              if (ObserverMapSerializer.PostCreator())
              {
                num2 = 4;
                continue;
              }
              goto label_5;
          }
        }
label_5:
        ManagerParamsID.NewExpression();
        num1 = 0;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MoveRepository(object ident, EventArgs reg)
    {
      try
      {
        MethodProcess.DeleteAuthor(int.Parse(this.interpreterProcess.Text));
        int num1 = 2;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_2;
              case 1:
              case 3:
                goto label_7;
              case 4:
                goto label_6;
              default:
                int num3 = 3;
                num2 = ObserverMapSerializer.ConcatCreator() ? num3 : num3;
                continue;
            }
          }
label_2:
          int num4 = (int) MessageBox.Show("Success");
label_7:
          this.interpreterProcess.Text = "";
          num1 = 4;
        }
label_6:;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Deletion Failed.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool readasset)
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            if (!readasset)
            {
              num2 = 0;
              break;
            }
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 3;
          case 1:
          case 4:
            num2 = this.globalProcess != null ? 1 : 0;
            break;
          case 3:
label_9:
            goto label_10;
          case 5:
            goto label_13;
          default:
            num1 = 3;
            continue;
        }
        if (num2 != 0)
        {
          this.globalProcess.Dispose();
          goto label_9;
        }
label_10:
        base.Dispose(readasset);
        if (ObserverMapSerializer.PostCreator())
          num1 = 5;
        else
          goto label_11;
      }
label_13:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CollectRepository()
    {
      int num1 = 0;
      if (true)
        goto label_3;
label_1:
      this._ExceptionProcess.Size = new Size(55, 13);
      this._ExceptionProcess.TabIndex = 1;
      this._ExceptionProcess.Text = "Author ID:";
      this.interpreterProcess.Location = new Point(75, 13);
      this.interpreterProcess.Name = "authorIDTextBox";
      this.interpreterProcess.Size = new Size(100, 20);
      this.interpreterProcess.TabIndex = 2;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      goto label_10;
label_2:
      int num2;
      num1 = num2;
label_3:
      switch (num1)
      {
        case 0:
          this._MockProcess = new Button();
          num2 = 3;
          goto label_2;
        case 1:
        case 3:
          this._ExceptionProcess = new Label();
          this.interpreterProcess = new TextBox();
          this.SuspendLayout();
          this._MockProcess.Location = new Point(75, 58);
          this._MockProcess.Name = "deleteButton";
          this._MockProcess.Size = new Size(75, 23);
          this._MockProcess.TabIndex = 0;
          this._MockProcess.Text = "Delete";
          this._MockProcess.UseVisualStyleBackColor = true;
          this._MockProcess.Click += new EventHandler(this.MoveRepository);
          num2 = 2;
          goto label_2;
        case 2:
          this._ExceptionProcess.AutoSize = true;
          this._ExceptionProcess.Location = new Point(13, 13);
          num2 = 8;
          goto label_2;
        case 4:
          this.ClientSize = new Size(197, 94);
          this.Controls.Add((Control) this.interpreterProcess);
          this.Controls.Add((Control) this._ExceptionProcess);
          num2 = 9;
          goto label_2;
        case 5:
        case 7:
          break;
        case 6:
          this.PerformLayout();
          num2 = 11;
          goto label_2;
        case 8:
          this._ExceptionProcess.Name = "label1";
          num2 = 10;
          goto label_2;
        case 9:
          this.Controls.Add((Control) this._MockProcess);
          this.Name = "DeleteAuthor";
          this.Text = "Delete Author";
          this.ResumeLayout(false);
          num2 = 6;
          goto label_2;
        case 10:
          goto label_1;
        case 11:
          return;
        default:
          num2 = 7;
          goto label_2;
      }
label_10:
      this.AutoScaleMode = AutoScaleMode.Font;
      num2 = 4;
      goto label_2;
    }

    internal static bool PostCreator() => true;

    internal static bool ConcatCreator() => false;
  }
}
