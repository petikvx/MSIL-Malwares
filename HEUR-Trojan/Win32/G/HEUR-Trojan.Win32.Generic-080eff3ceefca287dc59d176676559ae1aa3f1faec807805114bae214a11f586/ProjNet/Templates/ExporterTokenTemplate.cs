// Decompiled with JetBrains decompiler
// Type: ProjNet.Templates.ExporterTokenTemplate
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.CompilerServices;
using System.Threading;
using TYPELIBA.Identifiers;
using TYPELIBA.Importers;

namespace ProjNet.Templates
{
  [Table(Name = "dbo.Authors")]
  public class ExporterTokenTemplate : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs m_ModelProcess;
    private int _AuthorID;
    private string _FirstName;
    private string _LastName;
    private EntitySet<DispatcherProcess> _AuthorISBNs;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExporterTokenTemplate()
    {
      int num = 3;
      if (true)
        goto label_3;
label_1:
      ManagerParamsID.NewExpression();
      if (ExporterTokenTemplate.GetCreator())
      {
        num = 2;
        goto label_3;
      }
label_2:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_5;
label_3:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
          case 2:
            goto label_2;
          case 4:
            goto label_5;
          case 5:
            goto label_7;
          default:
            if (true)
            {
              num = 4;
              continue;
            }
            goto label_5;
        }
      }
label_7:
      return;
label_5:
      this._AuthorISBNs = new EntitySet<DispatcherProcess>(new Action<DispatcherProcess>(this.ResolveRepository), new Action<DispatcherProcess>(this.CallRepository));
      num = 5;
      goto label_3;
    }

    [Column(AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true, Storage = "_AuthorID")]
    public int AuthorID
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorID;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          bool flag;
          int num2;
          switch (num1)
          {
            case 0:
            case 3:
              flag = this._AuthorID != value;
              num2 = 2;
              break;
            case 1:
            case 2:
              if (flag)
              {
                if (ExporterTokenTemplate.GetCreator())
                {
                  num1 = 4;
                  continue;
                }
                goto label_9;
              }
              else
                goto label_10;
            case 4:
              this.SendPropertyChanging();
              this._AuthorID = value;
              goto case 5;
            case 5:
              this.SendPropertyChanged(nameof (AuthorID));
              num2 = 6;
              break;
            case 6:
              goto label_9;
            default:
              num1 = 5;
              continue;
          }
          num1 = num2;
        }
label_10:
        return;
label_9:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(30) NOT NULL", Storage = "_FirstName")]
    public string FirstName
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._FirstName;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 1;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_2;
              case 1:
                goto label_1;
              case 2:
              case 4:
                goto label_5;
              case 3:
              case 5:
                goto label_4;
              case 6:
                goto label_9;
              default:
                num2 = 5;
                continue;
            }
          }
label_1:
          bool flag = this._FirstName != value;
          num1 = 0;
          continue;
label_2:
          if (flag)
          {
            this.SendPropertyChanging();
            num1 = 4;
            continue;
          }
          break;
label_4:
          this.SendPropertyChanged(nameof (FirstName));
          num1 = 6;
          continue;
label_5:
          this._FirstName = value;
          goto label_4;
        }
        return;
label_9:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(30) NOT NULL", Storage = "_LastName")]
    public string LastName
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._LastName;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        if (true)
          goto label_3;
label_1:
        this.SendPropertyChanging();
        this._LastName = value;
        goto label_7;
label_2:
        int num2;
        num1 = num2;
label_3:
        bool flag;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_5;
            case 1:
            case 3:
              goto label_7;
            case 2:
            case 5:
              goto label_1;
            case 4:
              flag = this._LastName != value;
              if (ExporterTokenTemplate.GetCreator())
              {
                num1 = 0;
                continue;
              }
              goto label_9;
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num1 = 1;
                continue;
              }
              goto label_5;
          }
        }
label_5:
        if (!flag)
          return;
        num2 = 5;
        goto label_2;
label_9:
        return;
label_7:
        this.SendPropertyChanged(nameof (LastName));
        num2 = 6;
        goto label_2;
      }
    }

    [Association(Name = "Author_AuthorISBN", OtherKey = "AuthorID", Storage = "_AuthorISBNs", ThisKey = "AuthorID")]
    public EntitySet<DispatcherProcess> AuthorISBNs
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorISBNs;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._AuthorISBNs.Assign((IEnumerable<DispatcherProcess>) value);
    }

    public event PropertyChangingEventHandler PropertyChanging
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          PropertyChangingEventHandler comparand;
          PropertyChangingEventHandler changingEventHandler;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                changingEventHandler = this._RoleProcess;
                if (!ExporterTokenTemplate.WriteCreator())
                {
                  num2 = 5;
                  continue;
                }
                goto case 2;
              case 1:
              case 5:
                comparand = changingEventHandler;
                if (ExporterTokenTemplate.GetCreator())
                {
                  num2 = 4;
                  continue;
                }
                goto case 0;
              case 2:
                if (changingEventHandler != comparand)
                  goto case 1;
                else
                  goto label_8;
              case 4:
                changingEventHandler = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this._RoleProcess, comparand + value, comparand);
                goto case 2;
              case 6:
                goto label_10;
              default:
                num2 = 2;
                continue;
            }
          }
label_8:
          num1 = 6;
        }
label_10:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          PropertyChangingEventHandler comparand;
          PropertyChangingEventHandler changingEventHandler1;
          PropertyChangingEventHandler changingEventHandler2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_8;
              case 1:
              case 5:
                comparand = changingEventHandler2;
                num2 = 4;
                continue;
              case 2:
                changingEventHandler2 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this._RoleProcess, changingEventHandler1, comparand);
                if (changingEventHandler2 != comparand)
                  goto case 1;
                else
                  goto label_6;
              case 4:
                changingEventHandler1 = comparand - value;
                goto case 2;
              case 6:
                goto label_9;
              default:
                goto label_4;
            }
          }
label_4:
          num1 = 2;
          continue;
label_6:
          num1 = 6;
          continue;
label_8:
          changingEventHandler2 = this._RoleProcess;
          num1 = 5;
        }
label_9:;
      }
    }

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        while (true)
        {
          int num2 = num1;
          PropertyChangedEventHandler changedEventHandler1;
          PropertyChangedEventHandler comparand;
          PropertyChangedEventHandler changedEventHandler2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
                changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_TokenizerProcess, changedEventHandler2, comparand);
                goto case 3;
              case 3:
              case 5:
                if (changedEventHandler1 == comparand)
                {
                  if (true)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_3;
                }
                else
                  goto label_4;
              case 4:
                goto label_4;
              case 6:
                goto label_9;
              default:
                goto label_8;
            }
          }
label_3:
          changedEventHandler1 = this.m_TokenizerProcess;
          num1 = 4;
          continue;
label_4:
          comparand = changedEventHandler1;
          changedEventHandler2 = comparand + value;
          num1 = 1;
          continue;
label_8:
          num1 = 5;
        }
label_9:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num = 5;
        PropertyChangedEventHandler comparand;
        PropertyChangedEventHandler changedEventHandler1;
        PropertyChangedEventHandler changedEventHandler2;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 5:
              changedEventHandler2 = this.m_TokenizerProcess;
              num = 3;
              continue;
            case 1:
            case 3:
              comparand = changedEventHandler2;
              num = 2;
              continue;
            case 2:
              changedEventHandler1 = comparand - value;
              goto case 4;
            case 4:
              changedEventHandler2 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_TokenizerProcess, changedEventHandler1, comparand);
              if (changedEventHandler2 == comparand)
              {
                num = 6;
                continue;
              }
              goto case 1;
            case 6:
              goto label_8;
            default:
              num = 4;
              continue;
          }
        }
label_8:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanging()
    {
      int num = 3;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            // ISSUE: reference to a compiler-generated field
            this._RoleProcess((object) this, ExporterTokenTemplate.m_ModelProcess);
            num = 5;
            continue;
          case 1:
          case 4:
            if (!flag)
              goto label_4;
            else
              goto case 0;
          case 3:
            // ISSUE: reference to a compiler-generated field
            flag = this._RoleProcess != null;
            num = 4;
            continue;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_4:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanged(string asset)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              if (!flag)
                goto label_4;
              else
                goto case 2;
            case 2:
            case 4:
              // ISSUE: reference to a compiler-generated field
              this.m_TokenizerProcess((object) this, new PropertyChangedEventArgs(asset));
              if (ExporterTokenTemplate.GetCreator())
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 3:
              goto label_2;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_8;
          }
        }
label_2:
        // ISSUE: reference to a compiler-generated field
        flag = this.m_TokenizerProcess != null;
        num1 = 0;
      }
label_4:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResolveRepository(DispatcherProcess v)
    {
      this.SendPropertyChanging();
      v.Author = this;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallRepository(DispatcherProcess config)
    {
      this.SendPropertyChanging();
      config.Author = (ExporterTokenTemplate) null;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ExporterTokenTemplate()
    {
      ManagerParamsID.NewExpression();
      ExporterTokenTemplate.m_ModelProcess = new PropertyChangingEventArgs(string.Empty);
    }

    internal static bool GetCreator() => true;

    internal static bool WriteCreator() => false;
  }
}
