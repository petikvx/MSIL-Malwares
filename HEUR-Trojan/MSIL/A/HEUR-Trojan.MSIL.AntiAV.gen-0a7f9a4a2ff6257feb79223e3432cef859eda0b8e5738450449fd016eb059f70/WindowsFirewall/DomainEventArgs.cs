// Decompiled with JetBrains decompiler
// Type: WindowsFirewall.DomainEventArgs
// Assembly: Windows Firewall, Version=12.5.2.3, Culture=neutral, PublicKeyToken=null
// MVID: B2F50818-876B-4F01-AE88-291FA22C03A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.AntiAV.gen-0a7f9a4a2ff6257feb79223e3432cef859eda0b8e5738450449fd016eb059f70.exe

using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace WindowsFirewall
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  internal class DomainEventArgs : WindowsFormsApplicationBase
  {
    private static List<WeakReference> currentColor = ToolbarQueue.SelectToolbox();

    [DebuggerNonUserCode]
    static DomainEventArgs()
    {
    }

    [DebuggerStepThrough]
    public DomainEventArgs()
      : base(AuthenticationMode.Windows)
    {
      DomainEventArgs.SelectToolbox((object) this);
      Stub.SelectToolbox((object) this, false);
      NodeManager.SelectToolbox((object) this, true);
      SolutionStack.SelectToolbox((object) this, true);
      RegistryList.SelectToolbox((object) this, ShutdownMode.AfterMainFormCloses);
    }

    [DebuggerNonUserCode]
    private static void SelectToolbox(object currentColor)
    {
      List<WeakReference> currentColor1 = DomainEventArgs.currentColor;
      EditorQueue.SelectToolbox((object) currentColor1);
      try
      {
        if (PluginAttribute.SelectToolbox((object) DomainEventArgs.currentColor) == PartitionOptions.SelectToolbox((object) DomainEventArgs.currentColor))
        {
label_2:
          switch (4)
          {
            case 0:
              goto label_2;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (DomainEventArgs.SelectToolbox);
              }
              int generatorPosition1 = 0;
              int num = checked (PluginAttribute.SelectToolbox((object) DomainEventArgs.currentColor) - 1);
              int generatorPosition2 = 0;
              while (generatorPosition2 <= num)
              {
                if (ContextLayout.SelectToolbox((object) ProcessStream.SelectToolbox((object) DomainEventArgs.currentColor, generatorPosition2)))
                {
label_7:
                  switch (6)
                  {
                    case 0:
                      goto label_7;
                    default:
                      if (generatorPosition2 != generatorPosition1)
                      {
label_9:
                        switch (1)
                        {
                          case 0:
                            goto label_9;
                          default:
                            EmulatorStream.SelectToolbox((object) DomainEventArgs.currentColor, generatorPosition1, ProcessStream.SelectToolbox((object) DomainEventArgs.currentColor, generatorPosition2));
                            break;
                        }
                      }
                      checked { ++generatorPosition1; }
                      break;
                  }
                }
                checked { ++generatorPosition2; }
              }
label_14:
              switch (5)
              {
                case 0:
                  goto label_14;
                default:
                  DriveEditor.SelectToolbox((object) DomainEventArgs.currentColor, generatorPosition1, checked (PluginAttribute.SelectToolbox((object) DomainEventArgs.currentColor) - generatorPosition1));
                  ServerSite.SelectToolbox((object) DomainEventArgs.currentColor, PluginAttribute.SelectToolbox((object) DomainEventArgs.currentColor));
                  break;
              }
              break;
          }
        }
        NodeInfo.SelectToolbox((object) DomainEventArgs.currentColor, AssemblyLoader.SelectToolbox(ProjectSet.SelectToolbox(currentColor)));
      }
      finally
      {
        ConditionOptions.SelectToolbox((object) currentColor1);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerHidden]
    [STAThread]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void SelectToolbox(string[] currentColor)
    {
      PluginContext.SelectToolbox();
      try
      {
        CommandTable.SelectToolbox(PageQueue.SelectToolbox());
      }
      finally
      {
      }
      StoreProvider.SelectToolbox((object) ActivityContext.SelectToolbox, currentColor);
    }

    [DebuggerStepThrough]
    protected override void OnCreateMainForm() => NetworkEventArgs.SelectToolbox((object) this, (Form) ActivityContext.SelectToolbox.SelectToolbox);
  }
}
