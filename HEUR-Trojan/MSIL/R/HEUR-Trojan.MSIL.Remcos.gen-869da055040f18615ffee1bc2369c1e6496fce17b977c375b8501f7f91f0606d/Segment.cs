// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.Segment
// Assembly: W1rxzw3ZKeRvpGn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 142397A1-15D1-D7EF-251C-AE295CB71E89
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-869da055040f18615ffee1bc2369c1e6496fce17b977c375b8501f7f91f0606d.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class Segment : ICloneable
  {
    private int mX;
    private int mY;
    private int mLastX;
    private int mLastY;
    private Segment.Directions mDirection;
    private ConsoleColor mColor;

    public Segment(int x, int y, Segment.Directions d, ConsoleColor c)
    {
label_7:
      int num1 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(53);
      int num2 = 126;
      while (true)
      {
        switch (num2 ^ 64)
        {
          case 59:
            switch (num1 + 54)
            {
              case 0:
                this.mDirection = d;
                num1 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(45);
                goto label_1;
              case 1:
                this.mColor = c;
                num1 = -11;
                goto label_1;
              case 2:
                this.mY = y;
                num1 = -16;
                goto label_1;
              case 3:
                this.mX = x;
                num1 = -10;
                goto label_1;
              case 4:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Move);
                num1 = -12;
                goto label_1;
              case 5:
                goto label_13;
              default:
                num2 = 125;
                continue;
            }
          case 60:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.op_Equality);
            num2 = 124;
            continue;
          case 61:
            goto label_7;
          case 62:
label_1:
            num1 ^= 58;
            break;
        }
        num2 = 123;
      }
label_13:;
    }

    public void Move(Segment.Directions d = Segment.Directions.Same)
    {
      if ((d == Segment.Directions.Same ? 1 : 0) == 0)
        this.mDirection = d;
      this.mLastX = this.mX;
label_4:
      // ISSUE: reference to a compiler-generated method
      int num1 = \uF05A\uF4FF\uF524\uE25F\uF3A8\uF3B5\uE9DA\uF65C\uE3C6\uE7E0\uEE49\uEA90.\uE152\uE14D\uE4B1\uE4CF\uEFA5\uEAA8\uF7D2\uF85C\uF37D\uF074\uF5CA\uE496(19);
      Segment.Directions mDirection;
      while (true)
      {
        switch ((num1 ^ 57) + 54)
        {
          case 0:
            mDirection = this.mDirection;
            num1 = -14;
            continue;
          case 1:
            switch (mDirection)
            {
              case Segment.Directions.Left:
                goto label_11;
              case Segment.Directions.Right:
                goto label_12;
              case Segment.Directions.Up:
                goto label_13;
              case Segment.Directions.Down:
                goto label_15;
              default:
                num1 = -10;
                continue;
            }
          case 2:
            num1 = -13;
            continue;
          case 3:
            this.mLastY = this.mY;
            num1 = Form2.\uE173\uE5E4\uEAC5\uE066\uEF7F\uE101\uE4C9\uF1BF\uF45C\uECF8\uF52C\uEDC5(63);
            continue;
          case 4:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Draw);
            num1 = -9;
            continue;
          case 5:
            goto label_19;
          default:
            goto label_4;
        }
      }
label_11:
      // ISSUE: variable of a reference type
      int& local1;
      // ISSUE: explicit reference operation
      int num2 = checked (^(local1 = ref this.mX) - 1);
      local1 = num2;
      goto label_19;
label_12:
      // ISSUE: variable of a reference type
      int& local2;
      // ISSUE: explicit reference operation
      int num3 = checked (^(local2 = ref this.mX) + 1);
      local2 = num3;
      goto label_19;
label_13:
      // ISSUE: variable of a reference type
      int& local3;
      // ISSUE: explicit reference operation
      int num4 = checked (^(local3 = ref this.mY) - 1);
      local3 = num4;
      goto label_19;
label_14:
      int num5;
      while (true)
      {
        switch (num5 ^ 64)
        {
          case 59:
            // ISSUE: variable of a reference type
            int& local4;
            // ISSUE: explicit reference operation
            int num6 = checked (^(local4 = ref this.mY) + 1);
            local4 = num6;
            num5 = 125;
            continue;
          case 60:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Draw);
            num5 = 124;
            continue;
          case 61:
          case 62:
            goto label_19;
          case 63:
            goto label_18;
          default:
            goto label_15;
        }
      }
label_18:
      return;
label_15:
      num5 = 123;
      goto label_14;
label_19:
      num5 = (int) sbyte.MaxValue;
      goto label_14;
    }

    public void Draw(char c = '█', ConsoleColor bc = ConsoleColor.Black)
    {
label_4:
      int num1 = 5;
      int num2 = -16;
      while (true)
      {
        switch ((num2 ^ 62) + 53)
        {
          case 0:
            goto label_4;
          case 1:
            switch (num1)
            {
              case 56:
                Console.ForegroundColor = this.mColor;
                num1 = (int) sbyte.MaxValue;
                goto label_1;
              case 57:
                num1 = 6;
                goto label_1;
              case 58:
                num1 = 1;
                goto label_1;
              case 59:
                Console.CursorLeft = this.mX;
                num1 = 4;
                goto label_1;
              case 60:
                num1 = 125;
                goto label_1;
              case 61:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Move);
                num1 = 3;
                goto label_1;
              case 62:
                num1 = 124;
                goto label_1;
              case 63:
                Console.CursorTop = this.mY;
                num1 = 0;
                goto label_1;
              case 64:
                Console.Write(Conversions.ToString(c), (object) this.mX, (object) this.mY);
                num1 = 2;
                goto label_1;
              case 65:
                num1 = 126;
                goto label_1;
              case 66:
                Console.BackgroundColor = bc;
                num1 = 7;
                goto label_1;
              case 67:
                goto label_17;
              default:
                num2 = -11;
                continue;
            }
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_Y);
            num2 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(35);
            continue;
          case 3:
label_1:
            num1 ^= 62;
            break;
        }
        num2 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(62);
      }
label_17:;
    }

    public void Draw()
    {
label_7:
      int num1 = FoodItem.\uE607\uE6C8\uF041\uE1D1\uEB67\uF562\uF59C\uEDEA\uEABB\uE409\uF42B\uF64E(34);
      int num2 = -8;
      while (true)
      {
        switch ((num2 ^ 62) + 61)
        {
          case 0:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_LastX);
            num2 = FoodItem.\uE607\uE6C8\uF041\uE1D1\uEB67\uF562\uF59C\uEDEA\uEABB\uE409\uF42B\uF64E(26);
            continue;
          case 1:
            switch (num1 + 58)
            {
              case 0:
                Console.BackgroundColor = this.mColor;
                num1 = -5;
                goto label_1;
              case 1:
                num1 = -6;
                goto label_1;
              case 2:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_LastY);
                num1 = -3;
                goto label_1;
              case 3:
                Console.CursorLeft = this.mX;
                num1 = -7;
                goto label_1;
              case 4:
                Console.CursorTop = this.mY;
                num1 = -2;
                goto label_1;
              case 5:
                num1 = -13;
                goto label_1;
              case 6:
                num1 = -1;
                goto label_1;
              case 7:
                Console.Write(" ", (object) this.mX, (object) this.mY);
                num1 = -14;
                goto label_1;
              case 8:
                num1 = FoodItem.\uE607\uE6C8\uF041\uE1D1\uEB67\uF562\uF59C\uEDEA\uEABB\uE409\uF42B\uF64E(16);
                goto label_1;
              case 9:
                goto label_13;
              default:
                num2 = -5;
                continue;
            }
          case 2:
            goto label_7;
          case 3:
label_1:
            num1 ^= 53;
            break;
        }
        num2 = FoodItem.\uE607\uE6C8\uF041\uE1D1\uEB67\uF562\uF59C\uEDEA\uEABB\uE409\uF42B\uF64E(28);
      }
label_13:;
    }

    public bool IntersectsWith(Segment s) => this.mX == s.X && this.mY == s.Y;

    public object Clone()
    {
label_6:
      int num1 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(44);
      int num2 = 13;
      object obj;
      while (true)
      {
        switch (num2 ^ 54)
        {
          case 56:
            switch (num1 + 53)
            {
              case 0:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Draw);
                num1 = -15;
                goto label_1;
              case 1:
                obj = (object) new Segment(this.mX, this.mY, this.mDirection, this.mColor);
                num1 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(53);
                goto label_1;
              case 2:
              case 3:
                goto label_10;
              default:
                num2 = 15;
                continue;
            }
          case 57:
            goto label_6;
          case 58:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Draw);
            num2 = 12;
            continue;
          case 59:
label_1:
            num1 ^= 58;
            break;
        }
        num2 = 14;
      }
label_10:
      return obj;
    }

    public object Clone(ConsoleColor newColor)
    {
label_5:
      int num1 = 2;
      int num2 = -9;
      object obj;
      while (true)
      {
        switch ((num2 ^ 58) + 54)
        {
          case 0:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.IntersectsWith);
            num2 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(36);
            continue;
          case 1:
            goto label_5;
          case 2:
            switch (num1)
            {
              case 57:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_Y);
                num1 = 1;
                goto label_1;
              case 58:
                obj = (object) new Segment(this.mX, this.mY, this.mDirection, newColor);
                num1 = 3;
                goto label_1;
              case 59:
              case 60:
                goto label_10;
              default:
                num2 = -15;
                continue;
            }
          case 3:
label_1:
            num1 ^= 56;
            break;
        }
        num2 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(44);
      }
label_10:
      return obj;
    }

    public int X
    {
      get
      {
label_4:
        int num1 = Form2.\uE173\uE5E4\uEAC5\uE066\uEF7F\uE101\uE4C9\uF1BF\uF45C\uECF8\uF52C\uEDC5(57);
        int num2 = 10;
        int mX;
        while (true)
        {
          switch (num2 ^ 55)
          {
            case 58:
              goto label_4;
            case 59:
              switch (num1 + 57)
              {
                case 0:
                  mX = this.mX;
                  num1 = -120;
                  goto label_1;
                case 1:
                case 3:
                  goto label_10;
                case 2:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.set_Direction);
                  num1 = -119;
                  goto label_1;
                default:
                  num2 = 13;
                  continue;
              }
            case 60:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Clone);
              num2 = 11;
              continue;
            case 61:
label_1:
              num1 ^= 64;
              break;
          }
          num2 = 12;
        }
label_10:
        return mX;
      }
      set
      {
label_4:
        int num1 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(45);
        int num2 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(45);
        while (true)
        {
          switch ((num2 ^ 61) + 55)
          {
            case 0:
              goto label_4;
            case 1:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_Color);
              num2 = -9;
              continue;
            case 2:
              switch (num1 + 62)
              {
                case 0:
                  this.mX = value;
                  num1 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(36);
                  goto label_1;
                case 1:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_LastX);
                  num1 = -10;
                  goto label_1;
                case 2:
                  this.mLastX = this.mX;
                  num1 = -9;
                  goto label_1;
                case 3:
                  goto label_10;
                default:
                  num2 = -12;
                  continue;
              }
            case 3:
label_1:
              num1 ^= 53;
              break;
          }
          num2 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(44);
        }
label_10:;
      }
    }

    public int Y
    {
      get
      {
label_6:
        int num1 = 5;
        int num2 = -11;
        int mY;
        while (true)
        {
          switch ((num2 ^ 62) + 56)
          {
            case 0:
              switch (num1)
              {
                case 61:
                  mY = this.mY;
                  num1 = 6;
                  goto label_1;
                case 62:
                case 64:
                  goto label_10;
                case 63:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.set_Direction);
                  num1 = 7;
                  goto label_1;
                default:
                  num2 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(53);
                  continue;
              }
            case 1:
              goto label_6;
            case 2:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_Color);
              num2 = -12;
              continue;
            case 3:
label_1:
              num1 ^= 56;
              break;
          }
          num2 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(44);
        }
label_10:
        return mY;
      }
      set
      {
label_4:
        int num1 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(35);
        int num2 = 121;
        while (true)
        {
          switch (num2 ^ 57)
          {
            case 61:
              goto label_4;
            case 62:
              switch (num1 + 53)
              {
                case 0:
                  this.mLastY = this.mY;
                  num1 = -11;
                  goto label_1;
                case 1:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_X);
                  num1 = -12;
                  goto label_1;
                case 2:
                  this.mY = value;
                  num1 = -10;
                  goto label_1;
                case 3:
                  goto label_10;
                default:
                  num2 = 4;
                  continue;
              }
            case 63:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Move);
              num2 = 6;
              continue;
            case 64:
label_1:
              num1 ^= 56;
              break;
          }
          num2 = 7;
        }
label_10:;
      }
    }

    public Segment.Directions Direction
    {
      get
      {
label_7:
        int num1 = \uF05A\uF4FF\uF524\uE25F\uF3A8\uF3B5\uE9DA\uF65C\uE3C6\uE7E0\uEE49\uEA90.\uE152\uE14D\uE4B1\uE4CF\uEFA5\uEAA8\uF7D2\uF85C\uF37D\uF074\uF5CA\uE496(19);
        int num2 = -14;
        Segment.Directions mDirection;
        while (true)
        {
          switch ((num2 ^ 56) + 57)
          {
            case 0:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_Color);
              num2 = -1;
              continue;
            case 1:
              switch (num1 + 64)
              {
                case 0:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.\u002Ector);
                  num1 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(44);
                  goto label_1;
                case 1:
                case 3:
                  goto label_10;
                case 2:
                  mDirection = this.mDirection;
                  num1 = -9;
                  goto label_1;
                default:
                  num2 = Mazes.\uED64\uF7C9\uE463\uE570\uEDE5\uF0EF\uEC88\uF1DB\uF4DB\uE913\uF508\uF2F8(45);
                  continue;
              }
            case 2:
              goto label_7;
            case 3:
label_1:
              num1 ^= 54;
              break;
          }
          num2 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(36);
        }
label_10:
        return mDirection;
      }
      set => this.mDirection = value;
    }

    public ConsoleColor Color
    {
      get
      {
label_7:
        int num1 = FormLoader.\uF6D9\uF827\uF028\uED0F\uECCA\uE547\uF4C8\uF468\uEA41\uE615\uE78E\uE0F5(31);
        int num2 = \uF05A\uF4FF\uF524\uE25F\uF3A8\uF3B5\uE9DA\uF65C\uE3C6\uE7E0\uEE49\uEA90.\uE152\uE14D\uE4B1\uE4CF\uEFA5\uEAA8\uF7D2\uF85C\uF37D\uF074\uF5CA\uE496(14);
        ConsoleColor mColor;
        while (true)
        {
          switch ((num2 ^ 53) + 53)
          {
            case 0:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.IntersectsWith);
              num2 = -2;
              continue;
            case 1:
              switch (num1 + 58)
              {
                case 0:
                  mColor = this.mColor;
                  num1 = -2;
                  goto label_1;
                case 1:
                case 3:
                  goto label_10;
                case 2:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_LastY);
                  num1 = -15;
                  goto label_1;
                default:
                  num2 = -8;
                  continue;
              }
            case 2:
              goto label_7;
            case 3:
label_1:
              num1 ^= 57;
              break;
          }
          num2 = FoodItem.\uE607\uE6C8\uF041\uE1D1\uEB67\uF562\uF59C\uEDEA\uEABB\uE409\uF42B\uF64E(13);
        }
label_10:
        return mColor;
      }
      set => this.mColor = value;
    }

    public int LastX
    {
      get
      {
label_4:
        int num1 = 9;
        int num2 = 3;
        int mLastX;
        while (true)
        {
          switch (num2 ^ 58)
          {
            case 54:
              goto label_4;
            case 55:
              switch (num1)
              {
                case 53:
                case 56:
                  goto label_10;
                case 54:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.\u002Ector);
                  num1 = 8;
                  goto label_1;
                case 55:
                  mLastX = this.mLastX;
                  num1 = 11;
                  goto label_1;
                default:
                  num2 = 12;
                  continue;
              }
            case 56:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_Y);
              num2 = 2;
              continue;
            case 57:
label_1:
              num1 ^= 62;
              break;
          }
          num2 = 13;
        }
label_10:
        return mLastX;
      }
    }

    public int LastY
    {
      get
      {
label_4:
        int num1 = 3;
        int num2 = 5;
        int mLastY;
        while (true)
        {
          switch (num2 ^ 62)
          {
            case 56:
              goto label_4;
            case 57:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_LastY);
              num2 = 7;
              continue;
            case 58:
              switch (num1)
              {
                case 58:
                  mLastY = this.mLastY;
                  num1 = 5;
                  goto label_1;
                case 59:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.set_Direction);
                  num1 = 2;
                  goto label_1;
                case 60:
                case 61:
                  goto label_10;
                default:
                  num2 = 6;
                  continue;
              }
            case 59:
label_1:
              num1 ^= 57;
              break;
          }
          num2 = 4;
        }
label_10:
        return mLastY;
      }
    }

    public static bool operator ==(Segment s1, Segment s2) => s1.X == s2.X && s1.Y == s2.Y && s1.Direction == s2.Direction;

    public static bool operator !=(Segment s1, Segment s2)
    {
label_4:
      int num1 = 0;
      int num2 = 116;
      bool flag;
      while (true)
      {
        switch (num2 ^ 55)
        {
          case 64:
            goto label_4;
          case 65:
            switch (num1)
            {
              case 62:
                flag = !(s1 == s2);
                num1 = 126;
                goto label_1;
              case 63:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.set_X);
                num1 = 1;
                goto label_1;
              case 64:
              case 65:
                goto label_10;
              default:
                num2 = 119;
                continue;
            }
          case 66:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Clone);
            num2 = 117;
            continue;
          case 67:
label_1:
            num1 ^= 62;
            break;
        }
        num2 = 118;
      }
label_10:
      return flag;
    }

    public enum Directions
    {
      Left,
      Right,
      Up,
      Down,
      Same,
    }
  }
}
