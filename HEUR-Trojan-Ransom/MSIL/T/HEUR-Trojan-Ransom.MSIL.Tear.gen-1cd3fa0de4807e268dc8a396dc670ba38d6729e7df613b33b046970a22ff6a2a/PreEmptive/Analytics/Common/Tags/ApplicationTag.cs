// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.ApplicationTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags
{
  public class ApplicationTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 18;
        int num1 = 30234;
        int num2 = num1;
        num1 = 30234;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("\uA7C5룇뫉ꃋ\uA7CD돏돑ꃓ뿕럗듙", A_1);
          default:
            goto case 1;
        }
      }
    }

    public ApplicationTag(
      string applicationId,
      string applicationName,
      string applicationVersion,
      string applicationType,
      string applicationInstanceId)
    {
      int A_1 = 16;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.AddAttribute(Utils.a("귃ꋅ", A_1), applicationId);
      this.AddOptionalAttribute(Utils.a("\uAAC3\uA7C5ꗇ꿉", A_1), applicationName);
      this.AddOptionalAttribute(Utils.a("닃ꏅ뫇막ꗋꇍ뻏", A_1), applicationVersion);
      this.AddOptionalAttribute(Utils.a("냃뿅룇꿉", A_1), applicationType);
      this.AddOptionalAttribute(Utils.a("귃\uA8C5믇뻉귋ꃍ돏럑", A_1), applicationInstanceId);
    }
  }
}
