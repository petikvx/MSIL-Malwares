// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ResourceTypeCo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: D98D3237-A321-4821-9049-807D7FD195EE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2bf24741d28e493dd3c0fabc7478edccab0bc3835b2648c09ba153c94c065f3c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -633691773;
      int index;
      int aIndex;
      int count;
      bool flag;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -708858167)) % 17U)
        {
          case 0:
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * 78813223 ^ 1669817411;
            continue;
          case 1:
            this._buffer = buffer;
            this._random = Game.\u200E⁭‫⁯‮‏‮‌​⁭⁬‍‌‭‮‎⁮‏⁮⁬‫‮⁪‬‮‬​‌‏‪⁫⁬⁫‍‌‪‪‍⁫‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * 1926657673 ^ 1475128325;
            continue;
          case 2:
            num1 = (int) num2 * 1209173176 ^ 442096792;
            continue;
          case 3:
            goto label_3;
          case 4:
            ++aIndex;
            num1 = (int) num2 * -1940154676 ^ -1916648972;
            continue;
          case 5:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -83405226 ^ -1915446969;
            continue;
          case 6:
            int num3;
            num1 = num3 = index >= count ? -362085522 : (num3 = -296271151);
            continue;
          case 7:
            this._playerStates[index] = new PlayerState();
            num1 = -1400827284;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * -2020658064 ^ -680088058;
            continue;
          case 9:
            ++index;
            num1 = (int) num2 * 992161460 ^ -982478979;
            continue;
          case 10:
            this._dice = new Dice();
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * 1901041651 ^ -1352159035;
            continue;
          case 11:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -548156226;
            continue;
          case 12:
            int num4 = flag ? 491891685 : (num4 = 403451799);
            num1 = num4 ^ (int) num2 * -1879378269;
            continue;
          case 13:
            flag = aIndex < count;
            num1 = -1944246854;
            continue;
          case 14:
            goto label_1;
          case 15:
            num1 = (int) num2 * 1121079458 ^ -461599737;
            continue;
          case 16:
            num1 = (int) num2 * -1505105002 ^ 1085405114;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1571831518;
        bool finished;
        int index;
        PlayerState[] playerStates;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 63379545)) % 13U)
          {
            case 0:
              num1 = 677271279;
              continue;
            case 1:
              playerState = playerStates[index];
              num1 = 1211747568;
              continue;
            case 2:
              int num3 = playerState.State == State.Playing ? 1864917069 : (num3 = 1207830391);
              num1 = num3 ^ (int) num2 * -1738722240;
              continue;
            case 3:
              num1 = (int) num2 * 1956196953 ^ -667579091;
              continue;
            case 4:
              finished = true;
              num1 = (int) num2 * 1771062977 ^ -111591795;
              continue;
            case 5:
              int num4 = this._finished ? -1073379317 : (num4 = -340693260);
              num1 = num4 ^ (int) num2 * 151704285;
              continue;
            case 6:
              ++index;
              num1 = 1420891733;
              continue;
            case 7:
              int num5;
              num1 = num5 = index < playerStates.Length ? 1427221534 : (num5 = 721821402);
              continue;
            case 8:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * -1524986511 ^ -1355748861;
              continue;
            case 9:
              goto label_1;
            case 11:
              finished = true;
              num1 = (int) num2 * -34733802 ^ -1344110342;
              continue;
            case 12:
              finished = false;
              num1 = (int) num2 * -1278103405 ^ -737880792;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = 1878105088;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 443831101)) % 7U)
        {
          case 0:
            this.Winners.Clear();
            num1 = (int) num2 * 1584092177 ^ -1781413351;
            continue;
          case 1:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            this._finished = false;
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -1464238927 ^ -1948420153;
            continue;
          case 2:
            num1 = (int) num2 * -672630817 ^ 1938400534;
            continue;
          case 3:
            this.Losers.Clear();
            num1 = (int) num2 * -1360139227 ^ -730981670;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1143500454 ^ -712275173;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = 1242269356;
      PlayerState playerState;
      bool flag1;
      int num2;
      int planningCardsCount;
      Player player;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 641079741)) % 30U)
        {
          case 0:
            num2 = 0;
            num1 = (int) num3 * 799851680 ^ -683664032;
            continue;
          case 1:
            num1 = (int) num3 * 103494536 ^ 27850922;
            continue;
          case 2:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 88942961;
            continue;
          case 3:
            goto label_3;
          case 4:
            playerState.State = State.Playing;
            num1 = (int) num3 * -1003560021 ^ -558087776;
            continue;
          case 5:
            num1 = (int) num3 * 453384859 ^ 1796681558;
            continue;
          case 6:
            num1 = 602263721;
            continue;
          case 7:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 1008672785 ^ -165478130;
            continue;
          case 8:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1752088690 ^ 1044924148;
            continue;
          case 9:
            flag1 = index < this.Players.Length;
            num1 = 738832823;
            continue;
          case 10:
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            num1 = (int) num3 * 1401364522 ^ 982253081;
            continue;
          case 11:
            num2 = 0;
            num1 = 1578882249;
            continue;
          case 12:
            playerState.Sprint = 1;
            num1 = (int) num3 * 440905885 ^ 1581044970;
            continue;
          case 13:
            num1 = (int) num3 * 1984460096 ^ -807489015;
            continue;
          case 14:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1036051829 ^ 1683117262;
            continue;
          case 15:
            num1 = (int) num3 * 1278187914 ^ 199096038;
            continue;
          case 16:
            player = this.Players[index];
            num1 = 1010926143;
            continue;
          case 17:
            num1 = 2128129327;
            continue;
          case 18:
            int num4;
            num1 = num4 = num2 > 0 ? 276420521 : (num4 = 1229352046);
            continue;
          case 19:
            int num5 = !flag2 ? -556608159 : (num5 = -1203587110);
            num1 = num5 ^ (int) num3 * 1764966425;
            continue;
          case 20:
            ++index;
            num1 = (int) num3 * -1687267928 ^ -854991060;
            continue;
          case 21:
            num1 = (int) num3 * 645057642 ^ -1973737774;
            continue;
          case 22:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 2107197102 ^ -1632428741;
            continue;
          case 23:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 999761785 ^ -645408539;
            continue;
          case 24:
            int num6 = !player.UseOneMorePlanningSprint ? 1758239505 : (num6 = 657513664);
            num1 = num6 ^ (int) num3 * 593297521;
            continue;
          case 25:
            playerState.Sprint = -1;
            num1 = (int) num3 * -790181957 ^ 738482130;
            continue;
          case 26:
            int num7 = flag1 ? -1989063607 : (num7 = -1787682430);
            num1 = num7 ^ (int) num3 * 626158286;
            continue;
          case 27:
            num1 = (int) num3 * 1397579835 ^ -2015883818;
            continue;
          case 28:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 1961618954 ^ -444425945;
            continue;
          case 29:
            goto label_1;
          default:
            goto label_32;
        }
      }
label_3:
      return;
label_32:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = -324520552;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1242332433)) % 10U)
        {
          case 0:
            this._currentPlayer = 0;
            int num3 = this._currentTurn <= 0 ? -165486304 : (num3 = -657720922);
            num1 = num3 ^ (int) num2 * 441702942;
            continue;
          case 1:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 407074446 ^ -1415021055;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.PlayerTurn(this._currentPlayer);
            num1 = -1304911309;
            continue;
          case 4:
            num1 = (int) num2 * 98413165 ^ -1542195090;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 379012649 ^ -1170368108;
            continue;
          case 7:
            int num4 = this._currentPlayer >= this.Players.Length ? 494559763 : (num4 = 198378620);
            num1 = num4 ^ (int) num2 * -376571098;
            continue;
          case 8:
            num1 = (int) num2 * -1589622544 ^ -318984019;
            continue;
          case 9:
            this.Print((object) Game.\u200E⁮‍‏‮‭‌⁫‏‌⁮‬‬​⁮‏‌‭⁭‌⁮‍⁯‎‮⁬‏⁭⁭⁮⁪⁮‍‪​‪‫‫‎⁪‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u202A⁬⁬⁫‌‮‭‎‍⁮⁫‍⁫‭‫‏‌⁪‭⁫‌⁬‌‏‭‮⁬⁬⁫‫‪‏⁫‭‌⁮‮‎‪‏‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = -1495304585;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 505549851;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        int num3;
        int index;
        PlayerState playerState2;
        bool flag1;
        bool flag2;
        Card card;
        bool flag3;
        Player player;
        bool onlyOneWinner;
        bool flag4;
        int num4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool flag14;
        int num5;
        switch ((num2 = (uint) (num1 ^ 1798526964)) % 86U)
        {
          case 0:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202A⁬⁬⁫‌‮‭‎‍⁮⁫‍⁫‭‫‏‌⁪‭⁫‌⁬‌‏‭‮⁬⁬⁫‫‪‏⁫‭‌⁮‮‎‪‏‮("\t", playerState3 != null ? Game.\u200C⁪⁫‮‬⁬⁮‬‭‍‌‭⁪⁬‪⁮⁪⁮⁭‫‎‮⁭⁮⁪⁮⁯‍‎⁬⁯‌⁫‬‫‭‏⁬‌⁯‮((object) playerState3) : (string) null));
            num1 = 2002773167;
            continue;
          case 1:
            int num6 = onlyOneWinner ? -1964936732 : (num6 = -592413557);
            num1 = num6 ^ (int) num2 * -1551326487;
            continue;
          case 2:
            flag12 = num4 == playerIndex;
            num1 = (int) num2 * 696327819 ^ 1650135421;
            continue;
          case 3:
            ++playerState1.Sprint;
            num1 = (int) num2 * -801102111 ^ 1430083947;
            continue;
          case 4:
            num1 = (int) num2 * -1609194223 ^ 844428574;
            continue;
          case 5:
            ++index;
            num1 = 372556600;
            continue;
          case 6:
            num1 = (int) num2 * 137426706 ^ 1172784727;
            continue;
          case 7:
            num1 = 1504580185;
            continue;
          case 8:
            num1 = (int) num2 * -1624364728 ^ -923411971;
            continue;
          case 9:
            flag1 = playerState2.Resources >= 0;
            num1 = (int) num2 * -1613297974 ^ -996663373;
            continue;
          case 10:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 2001565960 ^ -1977593933;
            continue;
          case 11:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 175140923 ^ -3863223;
            continue;
          case 12:
            flag2 = playerState1.Sprint < 0;
            num1 = 991367359;
            continue;
          case 13:
            num1 = (int) num2 * 1340649792 ^ 804284678;
            continue;
          case 14:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1168030703 ^ 1553624182;
            continue;
          case 15:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1513818042 ^ 148169727;
            continue;
          case 16:
            index = 0;
            num1 = (int) num2 * -275529507 ^ 1942223821;
            continue;
          case 17:
            num1 = (int) num2 * 1321566749 ^ -1453793303;
            continue;
          case 18:
            int num7 = flag13 ? -1692210049 : (num7 = -276934090);
            num1 = num7 ^ (int) num2 * 244973470;
            continue;
          case 19:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -790160082 ^ 511227435;
            continue;
          case 20:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u200F‭‭‪⁬⁯‎‪‫⁭⁪‬‭⁫‏‮⁪⁯‍⁯‏‮⁮⁯‎‭⁭⁯‌⁮​⁫‏​​‪⁭‏‌⁮‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -1390422909 ^ 273170453;
            continue;
          case 21:
            flag5 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 2094146457;
            continue;
          case 22:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 86275761 ^ 803184644;
            continue;
          case 23:
            num1 = 1675945402;
            continue;
          case 24:
            int num8 = flag9 ? -1482413341 : (num8 = -869807853);
            num1 = num8 ^ (int) num2 * 1342461089;
            continue;
          case 25:
            num1 = (int) num2 * -1246006534 ^ 355502970;
            continue;
          case 26:
            num1 = (int) num2 * -908017476 ^ 1259846508;
            continue;
          case 27:
            goto label_3;
          case 28:
            this.Losers.Add(num4);
            num1 = (int) num2 * -1615743698 ^ -571168345;
            continue;
          case 29:
            num1 = (int) num2 * -758997453 ^ 1870979646;
            continue;
          case 30:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 1010242117 ^ -1071508806;
              continue;
            }
            num5 = 0;
            break;
          case 31:
            int num9 = flag1 ? 312902944 : (num9 = 1433653991);
            num1 = num9 ^ (int) num2 * -377487489;
            continue;
          case 32:
            flag9 = !this.Losers.Contains(index);
            num1 = (int) num2 * -727581681 ^ 1037282802;
            continue;
          case 33:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1750866034 ^ -236311447;
            continue;
          case 34:
            num1 = 1783718455;
            continue;
          case 35:
            num1 = 857379928;
            continue;
          case 36:
            flag8 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 1731660603 ^ -1588638971;
            continue;
          case 37:
            num1 = (int) num2 * 1982981688 ^ -2123837174;
            continue;
          case 38:
            num1 = (int) num2 * 851069591 ^ -903156461;
            continue;
          case 39:
            int num10 = flag2 ? 1538773181 : (num10 = 1633838275);
            num1 = num10 ^ (int) num2 * -976867633;
            continue;
          case 40:
            flag4 = true;
            num3 = card.Impact;
            num1 = (int) num2 * 1772254095 ^ 860728681;
            continue;
          case 41:
            num1 = (int) num2 * 42405853 ^ -1554896345;
            continue;
          case 42:
            num1 = (int) num2 * -1512081271 ^ 1450087098;
            continue;
          case 43:
            flag6 = flag4;
            num1 = 19543834;
            continue;
          case 44:
            playerState2.State = State.Lose;
            num1 = 226161718;
            continue;
          case 45:
            num1 = 615787209;
            continue;
          case 46:
            int num11;
            num1 = num11 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? 1984211896 : (num11 = 1328617916);
            continue;
          case 47:
            int num12 = flag8 ? -371599357 : (num12 = -1175927747);
            num1 = num12 ^ (int) num2 * 2090273264;
            continue;
          case 48:
            num1 = 1691882024;
            continue;
          case 49:
            card = this.DrawCard();
            flag3 = card.Impact < 0;
            num1 = (int) num2 * -1280772634 ^ 1673777358;
            continue;
          case 50:
            num1 = (int) num2 * 390273440 ^ -1276312478;
            continue;
          case 51:
            int num13 = playerState1.State == 0 ? 1285792018 : (num13 = 1340571469);
            num1 = num13 ^ (int) num2 * -1428645796;
            continue;
          case 52:
            playerState1.Resources -= num3;
            num1 = (int) num2 * 1211012830 ^ -1756509562;
            continue;
          case 53:
            num1 = (int) num2 * 707840012 ^ -163663334;
            continue;
          case 54:
            int num14;
            num1 = num14 = index >= this._playerStates.Length ? 560915564 : (num14 = 2043337095);
            continue;
          case 55:
            goto label_1;
          case 56:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag10 ? (object) "ALL " : (object) "", flag3 ? (object) "receives" : (object) "pays", (object) Game.\u200F‬‫‍‮‌‍‮⁫‎‌‭⁮‫⁫‬‭‪⁫‪​‫⁯‬⁬⁮‍⁯⁯‏⁬‍⁯‌⁬⁬‬‎⁮⁫‮(num3), flag4 ? (object) "advance" : (object) "stay");
            flag11 = !flag10;
            num1 = 1158020300;
            continue;
          case 57:
            num1 = (int) num2 * 943765962 ^ 935683343;
            continue;
          case 58:
            int num15 = !flag14 ? -715998643 : (num15 = -350045914);
            num1 = num15 ^ (int) num2 * -397154097;
            continue;
          case 59:
            flag4 = false;
            num1 = 374984039;
            continue;
          case 60:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 959275106 ^ -1071610166;
            continue;
          case 61:
            this._finished = true;
            num4 = 0;
            num1 = (int) num2 * 425390142 ^ -1271005015;
            continue;
          case 62:
            flag13 = playerState1.Resources < 0;
            num1 = (int) num2 * 569778627 ^ -846596356;
            continue;
          case 63:
            ++num4;
            num1 = 1398765720;
            continue;
          case 64:
            num1 = (int) num2 * 549342830 ^ -979606532;
            continue;
          case 65:
            num1 = (int) num2 * 1381194545 ^ 1096099603;
            continue;
          case 66:
            flag4 = true;
            num1 = (int) num2 * -135706263 ^ 1262160891;
            continue;
          case 67:
            int num16 = !flag7 ? -1374660038 : (num16 = -1476362939);
            num1 = num16 ^ (int) num2 * -1662338664;
            continue;
          case 68:
            int num17 = card.Impact - player.PlannedForCard(card.Type);
            flag4 = num17 < this.Rules.StayOnSprintMinDiff;
            num3 = Game.\u200F‭‭‪⁬⁯‎‪‫⁭⁪‬‭⁫‏‮⁪⁯‍⁯‏‮⁮⁯‎‭⁭⁯‌⁮​⁫‏​​‪⁭‏‌⁮‮(0, num17);
            num1 = (int) num2 * -953225868 ^ -1458175517;
            continue;
          case 69:
            int num18 = !flag12 ? 387205925 : (num18 = 1301865987);
            num1 = num18 ^ (int) num2 * -444521346;
            continue;
          case 70:
            this.Print((object) Game.\u202A⁬⁬⁫‌‮‭‎‍⁮⁫‍⁫‭‫‏‌⁪‭⁫‌⁬‌‏‭‮⁬⁬⁫‫‪‏⁫‭‌⁮‮‎‪‏‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -33039910 ^ 153348671;
            continue;
          case 71:
            int num19;
            num1 = num19 = this.Losers.Contains(num4) ? 1064810199 : (num19 = 170535676);
            continue;
          case 72:
            int num20 = flag6 ? -1391904233 : (num20 = -363624527);
            num1 = num20 ^ (int) num2 * -873071874;
            continue;
          case 73:
            this.Losers.Add(index);
            num1 = (int) num2 * -1611924746 ^ -803838346;
            continue;
          case 74:
            num1 = 979458029;
            continue;
          case 75:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1672743937 ^ -1242636236;
            continue;
          case 76:
            num1 = 1718017500;
            continue;
          case 77:
            int num21 = flag5 ? 1174559672 : (num21 = 1894615844);
            num1 = num21 ^ (int) num2 * -870930472;
            continue;
          case 78:
            int num22 = !flag11 ? 1934335709 : (num22 = 2080696104);
            num1 = num22 ^ (int) num2 * -978938967;
            continue;
          case 79:
            num1 = (int) num2 * 1571038630 ^ 1867767161;
            continue;
          case 80:
            num1 = (int) num2 * -1658590472 ^ 457031431;
            continue;
          case 81:
            num1 = 270338834;
            continue;
          case 82:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 83:
            num1 = 2121338150;
            continue;
          case 84:
            flag7 = num4 < this._playerStates.Length;
            num1 = 1570617931;
            continue;
          case 85:
            num1 = (int) num2 * -1503232340 ^ 1522087581;
            continue;
          default:
            goto label_91;
        }
        flag10 = num5 != 0;
        flag14 = !flag3;
        num1 = 73152908;
      }
label_3:
      return;
label_91:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1679875759;
      Card card1;
      bool flag;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 762088792)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = !flag ? -1728904064 : (num3 = -1711447897);
            num1 = num3 ^ (int) num2 * 2007521523;
            continue;
          case 2:
            this._deck.RemoveAt(0);
            card2 = card1;
            num1 = (int) num2 * -1875015556 ^ -482845338;
            continue;
          case 3:
            card1 = this._deck[0];
            num1 = 834688482;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -1448852420 ^ 848919155;
            continue;
          case 6:
            num1 = (int) num2 * -1739094907 ^ -1964262085;
            continue;
          case 7:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -773747140 ^ -1110734227;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 1095188770;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1151379795)) % 8U)
        {
          case 0:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? 943824014 : (num3 = 184987080);
            continue;
          case 1:
            str1 = "";
            num1 = (int) num2 * -357172915 ^ -1463147039;
            continue;
          case 2:
            num1 = (int) num2 * 399751561 ^ 1482338689;
            continue;
          case 3:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200C⁪⁫‮‬⁬⁮‬‭‍‌‭⁪⁬‪⁮⁪⁮⁭‫‎‮⁭⁮⁪⁮⁯‍‎⁬⁯‌⁫‬‫‭‏⁬‌⁯‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206A⁫‌‍​⁮⁮⁭⁫⁬‎⁯‮‏‪‎‍‪⁪‮‎‫⁭‎‌‎‎​‏​​‫‌‫⁭⁭⁫‭‮‬‮(strArray);
            ++index;
            num1 = 1098494699;
            continue;
          case 4:
            goto label_1;
          case 5:
            str2 = str1;
            num1 = (int) num2 * 1308575970 ^ -1915489273;
            continue;
          case 7:
            index = 0;
            num1 = (int) num2 * 431585064 ^ -1191201903;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more) => Game.\u200B⁯⁪⁮‫​‏⁪‎‍‫⁮‬‪‪‫‮‌‌‌‭​‌⁮⁮‮‌‍⁮⁮‮‌‏⁪‪⁬⁫‬⁯⁫‮(this._buffer, Game.\u200F⁭⁮⁯‏⁯⁯‌‏‌​⁪‏​​⁭⁯‭‮‎⁫‍‌‮⁭‪‬⁫​⁫⁬⁪⁫‭‪‭⁮⁯‏‍‮(Game.\u200C⁪⁫‮‬⁬⁮‬‭‍‌‭⁪⁬‪⁮⁪⁮⁭‫‎‮⁭⁮⁪⁮⁯‍‎⁬⁯‌⁫‬‫‭‏⁬‌⁯‮(text), more));

    static Random \u200E⁭‫⁯‮‏‮‌​⁭⁬‍‌‭‮‎⁮‏⁮⁬‫‮⁪‬‮‬​‌‏‪⁫⁬⁫‍‌‪‪‍⁫‮([In] int obj0) => new Random(obj0);

    static string \u200E⁮‍‏‮‭‌⁫‏‌⁮‬‬​⁮‏‌‭⁭‌⁮‍⁯‎‮⁬‏⁭⁭⁮⁪⁮‍‪​‪‫‫‎⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202A⁬⁬⁫‌‮‭‎‍⁮⁫‍⁫‭‫‏‌⁪‭⁫‌⁬‌‏‭‮⁬⁬⁫‫‪‏⁫‭‌⁮‮‎‪‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200F‭‭‪⁬⁯‎‪‫⁭⁪‬‭⁫‏‮⁪⁯‍⁯‏‮⁮⁯‎‭⁭⁯‌⁮​⁫‏​​‪⁭‏‌⁮‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200F‬‫‍‮‌‍‮⁫‎‌‭⁮‫⁫‬‭‪⁫‪​‫⁯‬⁬⁮‍⁯⁯‏⁬‍⁯‌⁬⁬‬‎⁮⁫‮([In] int obj0) => Math.Abs(obj0);

    static string \u200C⁪⁫‮‬⁬⁮‬‭‍‌‭⁪⁬‪⁮⁪⁮⁭‫‎‮⁭⁮⁪⁮⁯‍‎⁬⁯‌⁫‬‫‭‏⁬‌⁯‮([In] object obj0) => obj0.ToString();

    static string \u206A⁫‌‍​⁮⁮⁭⁫⁬‎⁯‮‏‪‎‍‪⁪‮‎‫⁭‎‌‎‎​‏​​‫‌‫⁭⁭⁫‭‮‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F⁭⁮⁯‏⁯⁯‌‏‌​⁪‏​​⁭⁯‭‮‎⁫‍‌‮⁭‪‬⁫​⁫⁬⁪⁫‭‪‭⁮⁯‏‍‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200B⁯⁪⁮‫​‏⁪‎‍‫⁮‬‪‪‫‮‌‌‌‭​‌⁮⁮‮‌‍⁮⁮‮‌‏⁪‪⁬⁫‬⁯⁫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
