// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEInterval
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;
using TemporalToolkit.Extensions;
using TemporalToolkit.Utils;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEInterval : TemporalExpression
  {
    public int Interval;
    public DateTime Start;

    public IntervalPrecision Precision { get; set; }

    public TEInterval(DateTime start, int interval, IntervalPrecision precision)
    {
label_1:
      int num1 = -1487327061;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -596856124)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Precision = precision;
            num1 = (int) num2 * -141374500 ^ -1005285856;
            continue;
          case 2:
            this.Start = start;
            num1 = (int) num2 * -565904553 ^ 1209119927;
            continue;
          case 3:
            num1 = (int) num2 * 820296085 ^ -411626844;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Interval = interval;
            num1 = (int) num2 * -1563696959 ^ -1880102003;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = -496360569;
      DateDifference dateDifference;
      DateTime dateTime1;
      TimeSpan timeSpan1;
      DateTime dateTime2;
      bool flag1;
      TimeSpan timeSpan2;
      bool flag2;
      TimeSpan timeSpan3;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1258303050)) % 29U)
        {
          case 0:
            flag1 = false;
            num1 = (int) num2 * 1532200106 ^ 2066743995;
            continue;
          case 1:
            switch (this.Precision)
            {
              case IntervalPrecision.Seconds:
                goto label_28;
              case IntervalPrecision.Minutes:
                goto label_27;
              case IntervalPrecision.Hours:
                goto label_3;
              case IntervalPrecision.Days:
                goto label_19;
              case IntervalPrecision.Weeks:
                goto label_30;
              case IntervalPrecision.Months:
                goto label_4;
              case IntervalPrecision.Hours | IntervalPrecision.Days:
                goto label_26;
              case IntervalPrecision.Years:
                goto label_25;
              default:
                num1 = -293348941;
                continue;
            }
          case 2:
            num1 = (int) num2 * -1081744774 ^ 1567793600;
            continue;
          case 3:
            goto label_1;
          case 4:
label_27:
            flag1 = (this.Start - aDate).Minutes % this.Interval == 0;
            num1 = -518989146;
            continue;
          case 5:
label_25:
            num1 = -924973289;
            continue;
          case 6:
            flag1 = dateDifference.TotalMonths % this.Interval == 0;
            num1 = (int) num2 * 164603764 ^ 430455430;
            continue;
          case 7:
            dateTime2 = new DateTime(this.Start.Year, this.Start.Month, this.Start.Day).StartOfWeek();
            num1 = (int) num2 * -978226600 ^ -1712329272;
            continue;
          case 8:
            flag1 = timeSpan1.Days % this.Interval == 0;
            num1 = (int) num2 * 566584922 ^ -498425236;
            continue;
          case 10:
            goto label_26;
          case 11:
            flag1 = timeSpan2.Days % (this.Interval * 7) == 0;
            num1 = (int) num2 * 733378674 ^ 231120404;
            continue;
          case 12:
            num1 = (int) num2 * -1748356238 ^ -234254264;
            continue;
          case 13:
            dateTime1 = new DateTime(this.Start.Year, this.Start.Month, this.Start.Day);
            num1 = (int) num2 * -2076502296 ^ -1193950129;
            continue;
          case 14:
            DateTime dateTime3 = new DateTime(aDate.Year, aDate.Month, aDate.Day).StartOfWeek();
            timeSpan2 = dateTime2 - dateTime3;
            num1 = (int) num2 * 478714318 ^ -1949132221;
            continue;
          case 15:
label_3:
            num1 = -68898899;
            continue;
          case 16:
label_19:
            num1 = -865603094;
            continue;
          case 17:
label_4:
            dateDifference = new DateDifference(this.Start, aDate);
            num1 = -753755618;
            continue;
          case 18:
            flag1 = new DateDifference(this.Start, aDate).Years % this.Interval == 0;
            num1 = (int) num2 * 1020978468 ^ -147383363;
            continue;
          case 19:
            num1 = (int) num2 * 1574608315 ^ -1476433545;
            continue;
          case 20:
            flag1 = timeSpan3.Hours % this.Interval == 0;
            num1 = (int) num2 * -399731505 ^ 1536915768;
            continue;
          case 21:
            flag2 = aDate < this.Start;
            num1 = (int) num2 * 625951024 ^ -2143491917;
            continue;
          case 22:
            num1 = (int) num2 * -702515929 ^ 392918420;
            continue;
          case 23:
            int num3 = flag2 ? -2137862886 : (num3 = -871290371);
            num1 = num3 ^ (int) num2 * -1608966211;
            continue;
          case 24:
label_30:
            num1 = -807125157;
            continue;
          case 25:
            num1 = (int) num2 * 1435326522 ^ 1427487672;
            continue;
          case 26:
label_28:
            flag1 = (this.Start - aDate).Seconds % this.Interval == 0;
            num1 = -1742952915;
            continue;
          case 27:
            DateTime dateTime4 = new DateTime(aDate.Year, aDate.Month, aDate.Day);
            timeSpan1 = dateTime1 - aDate;
            num1 = (int) num2 * 1153196973 ^ 901949642;
            continue;
          case 28:
            timeSpan3 = this.Start - aDate;
            num1 = (int) num2 * -101703526 ^ 988658827;
            continue;
          default:
            goto label_31;
        }
      }
label_26:
      throw TEInterval.\u206F‎‏‬‭‏⁭‮⁪⁫⁬‮‪​⁭‬‌​⁬⁮⁫​⁪‌⁬‪⁬‏⁪‫‏⁯‬​‌‌‪‫‬‬‮();
label_31:
      return flag1;
    }

    static NotImplementedException \u206F‎‏‬‭‏⁭‮⁪⁫⁬‮‪​⁭‬‌​⁬⁮⁫​⁪‌⁬‪⁬‏⁪‫‏⁯‬​‌‌‪‫‬‬‮() => new NotImplementedException();
  }
}
