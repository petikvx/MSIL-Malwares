// Decompiled with JetBrains decompiler
// Type: mmxAH.Investigator
// Assembly: IAsyncLocalValue, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 5C4F3FBF-C751-4B18-BBEA-B1DDBC6F76B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqk-374874898c5386561d60c3fae0482d1caee783f1096dda6742b1c073175a0a14.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace mmxAH
{
  public class Investigator : Card
  {
    private string DisplayName;
    private short locnum;
    private byte investnum;
    private byte clues;
    private string Pronoun;
    private string Occupashion;
    private GameEngine en;
    public TrigerCollrecthion myTrigers;
    public byte MovementPoints = 0;
    private Investigator.ArcSlider SpeedSneak;
    private Investigator.ArcSlider FightWill;
    private Investigator.ArcSlider LoreLuck;
    public SkillTestInfos STInfo;
    private byte maxSanity;
    private byte maxStamina;
    private byte curSanity;
    private byte curStamina;
    private Investigator.SetupInfo setupi;
    private byte Money;
    private byte Focus;
    private byte CurFocus;
    private List<SpecialCard> specCards;
    private byte STTresh = 5;
    private bool isDelayed = false;
    public bool isCanMove = true;
    private List<MonsterIndivid> monsterTrofies;
    private List<GatePrototype> gateTrofies;
    public bool isExploredToken = false;
    public bool isMonsterImunity = false;

    public Investigator(GameEngine eng, short pId)
    {
      this.en = eng;
      this.ID = pId;
      this.myTrigers = new TrigerCollrecthion();
      this.SpeedSneak = new Investigator.ArcSlider(this.en, this.en.sysstr.GetCharekteresticName(SkillTestType.Speed) + "/" + this.en.sysstr.GetCharekteresticName(SkillTestType.Sneak));
      this.FightWill = new Investigator.ArcSlider(this.en, this.en.sysstr.GetCharekteresticName(SkillTestType.Fight) + "/" + this.en.sysstr.GetCharekteresticName(SkillTestType.Will));
      this.LoreLuck = new Investigator.ArcSlider(this.en, this.en.sysstr.GetCharekteresticName(SkillTestType.Lore) + "/" + this.en.sysstr.GetCharekteresticName(SkillTestType.Luck));
      this.STInfo = new SkillTestInfos();
      this.specCards = new List<SpecialCard>();
      this.monsterTrofies = new List<MonsterIndivid>();
      this.gateTrofies = new List<GatePrototype>();
    }

    public string GetTitle() => this.DisplayName;

    public string GetPronaun() => this.Pronoun;

    public void SetLocathion(short newLoc)
    {
      this.en.locs[(int) this.locnum].RemoveInvestigator(this.investnum);
      this.locnum = newLoc;
      this.en.locs[(int) this.locnum].AddInvestigator(this.investnum);
      this.isExploredToken = false;
    }

    public short GetLocathion() => this.locnum;

    public void Setup(byte newInvestNum)
    {
      this.investnum = newInvestNum;
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.Investigitor) + " " + ((int) this.investnum + 1).ToString() + ": ");
      this.en.io.PrintToLog(this.DisplayName + Environment.NewLine, isItalic: true);
      this.locnum = this.setupi.StartLoc;
      this.en.locs[(int) this.locnum].AddInvestigator(this.investnum);
      this.clues = this.setupi.StartClues;
      this.Money = this.setupi.StartMoney;
      this.curSanity = this.maxSanity;
      this.curStamina = this.maxStamina;
    }

    public void SetupRandom()
    {
      this.en.clock.PrintCurPhase();
      this.en.clock.NextPlayer();
    }

    public void MoveChicle() => this.en.locs[(int) this.locnum].Move();

    public void MoveTo(short locindex)
    {
      this.MovementPoints -= ((ArchemArea) this.en.locs[(int) locindex]).GetCost();
      this.en.io.PrintToLog(this.DisplayName + "  " + this.en.sysstr.GetString(SSType.MoveToFact) + " ");
      this.en.io.PrintToLog(this.en.locs[(int) locindex].GetMoveToTitle(), isItalic: true);
      this.en.io.PrintToLog(" .  " + this.en.sysstr.GetString(SSType.RemainMP) + "  " + this.MovementPoints.ToString() + Environment.NewLine);
      this.SetLocathion(locindex);
      this.en.map.Print();
      this.en.locs[(int) locindex].Move();
    }

    public byte GetCluesValue() => this.clues;

    public void AddClues(byte count)
    {
      this.clues += count;
      this.en.io.PrintToLog(this.Pronoun + "  " + this.en.sysstr.GetString(SSType.NowHas) + "  " + this.en.sysstr.GetNumberClueToken((short) this.clues) + "." + Environment.NewLine);
    }

    public void RemoveClues(byte count)
    {
      if ((int) count > (int) this.clues)
        this.clues = (byte) 0;
      else
        this.clues -= count;
      this.en.io.PrintToLog(this.DisplayName + "  " + this.en.sysstr.GetString(SSType.DiscardFact) + " ");
      this.en.io.PrintToLog(this.en.sysstr.GetNumberClueToken((short) count), ChooseColor: "Green");
      this.en.io.PrintToLog(" ( " + this.clues.ToString() + " " + this.en.sysstr.GetString(SSType.Remain) + "). ");
    }

    private short GetSliderValue(SkillTestType t)
    {
      switch (t)
      {
        case SkillTestType.Speed:
          return (short) this.SpeedSneak.GetFirstChar();
        case SkillTestType.Sneak:
          return (short) this.SpeedSneak.GetSecondChar();
        case SkillTestType.Fight:
          return (short) this.FightWill.GetFirstChar();
        case SkillTestType.Will:
          return (short) this.FightWill.GetSecondChar();
        case SkillTestType.Lore:
          return (short) this.LoreLuck.GetFirstChar();
        case SkillTestType.Luck:
          return (short) this.LoreLuck.GetSecondChar();
        default:
          return 0;
      }
    }

    public short GetCharValue(SkillTestType t) => (short) ((int) this.GetSliderValue(t) + (int) this.STInfo.GetInfo(t).CharModif + (int) this.en.GlobalModifs.GetInfo(t).CharModif);

    public short GetSkillTestValue(SkillTestType t) => (short) ((int) this.GetCharValue(t) + (int) this.STInfo.GetInfo(t).SCmodif + (int) this.en.GlobalModifs.GetInfo(t).CharModif);

    public bool FromTextFile(TextFileParser data, TextFileParser text)
    {
      this.DisplayName = text.GetCurString();
      this.Pronoun = text.GetCurString();
      this.Occupashion = text.GetCurString();
      if (!byte.TryParse(data.GetToken(), out this.maxSanity) || !byte.TryParse(data.GetToken(), out this.maxStamina))
        return false;
      this.setupi.StartLoc = this.en.map.GetNumberByCodeName(data.GetToken());
      if (this.setupi.StartLoc == (short) -1 || !byte.TryParse(data.GetToken(), out this.setupi.StartClues) || !byte.TryParse(data.GetToken(), out this.setupi.StartMoney))
        return false;
      data.GetToken();
      if (!byte.TryParse(data.GetToken(), out this.setupi.DrawCommon) || !byte.TryParse(data.GetToken(), out this.setupi.DrawUnice) || !byte.TryParse(data.GetToken(), out this.setupi.DrawSpells) || !byte.TryParse(data.GetToken(), out this.setupi.DrawSkils) || !byte.TryParse(data.GetToken(), out this.Focus) || !this.SpeedSneak.FromTextFile(data) || !this.FightWill.FromTextFile(data) || !this.LoreLuck.FromTextFile(data))
        return false;
      data.GetToken();
      return true;
    }

    public void Print()
    {
      this.en.io.Print(this.DisplayName, isItalic: true);
      this.en.io.Print("," + this.Occupashion);
      if (this.isDelayed)
        this.en.io.Print("    " + this.en.sysstr.GetString(SSType.Delayed), isItalic: true);
      if (this.isExploredToken)
        this.en.io.Print("    " + this.en.sysstr.GetString(SSType.ExploredToken), isItalic: true);
      if ((int) this.investnum == (int) this.en.clock.GetFirstPlayer())
        this.en.io.Print("    " + this.en.sysstr.GetString(SSType.FirstPlayer), isBold: true);
      this.en.io.Print(Environment.NewLine + this.en.sysstr.GetNumberClueToken((short) this.clues), ChooseColor: "Green");
      this.en.io.Print("  $" + this.Money.ToString() + Environment.NewLine);
      this.en.io.Print(this.en.sysstr.GetString(SSType.Sanity) + ": ", isBold: true, ChooseColor: "Blue");
      this.en.io.Print(this.curSanity.ToString() + "/ " + this.maxSanity.ToString() + Environment.NewLine, ChooseColor: "Blue");
      this.en.io.Print(this.en.sysstr.GetString(SSType.Stamina) + ": ", isBold: true, ChooseColor: "Red");
      this.en.io.Print(this.curStamina.ToString() + "/ " + this.maxStamina.ToString() + Environment.NewLine, ChooseColor: "Red");
      this.en.io.Print(this.en.sysstr.GetString(SSType.Focus) + ": ", isBold: true);
      this.en.io.Print(this.Focus.ToString() + Environment.NewLine);
      this.en.io.Print(this.en.sysstr.GetString(SSType.Speed) + "/" + this.en.sysstr.GetString(SSType.Sneak) + Environment.NewLine);
      this.en.io.Print(this.SpeedSneak.PrintCharA() + this.STInfo.PrintInfo(SkillTestType.Speed, this.en.sysstr));
      this.en.io.Print(this.en.GlobalModifs.PrintInfo(SkillTestType.Speed, this.en.sysstr) + Environment.NewLine, isBold: true);
      this.en.io.Print(this.SpeedSneak.PrintCharB() + this.STInfo.PrintInfo(SkillTestType.Sneak, this.en.sysstr) + this.STInfo.PrintInfo(SkillTestType.Evade, this.en.sysstr));
      this.en.io.Print(this.en.GlobalModifs.PrintInfo(SkillTestType.Sneak, this.en.sysstr) + this.en.GlobalModifs.PrintInfo(SkillTestType.Evade, this.en.sysstr) + Environment.NewLine, isBold: true);
      this.en.io.Print(Environment.NewLine + this.en.sysstr.GetString(SSType.Fight) + "/" + this.en.sysstr.GetString(SSType.Will) + Environment.NewLine);
      this.en.io.Print(this.FightWill.PrintCharA() + this.STInfo.PrintInfo(SkillTestType.Fight, this.en.sysstr) + this.STInfo.PrintInfo(SkillTestType.Combat, this.en.sysstr));
      this.en.io.Print(this.en.GlobalModifs.PrintInfo(SkillTestType.Fight, this.en.sysstr) + this.en.GlobalModifs.PrintInfo(SkillTestType.Combat, this.en.sysstr) + Environment.NewLine, isBold: true);
      this.en.io.Print(this.FightWill.PrintCharB() + this.STInfo.PrintInfo(SkillTestType.Will, this.en.sysstr) + this.STInfo.PrintInfo(SkillTestType.Horror, this.en.sysstr));
      this.en.io.Print(this.en.GlobalModifs.PrintInfo(SkillTestType.Will, this.en.sysstr) + this.en.GlobalModifs.PrintInfo(SkillTestType.Horror, this.en.sysstr) + Environment.NewLine, isBold: true);
      this.en.io.Print(Environment.NewLine + this.en.sysstr.GetString(SSType.Lore) + "/" + this.en.sysstr.GetString(SSType.Luck) + Environment.NewLine);
      this.en.io.Print(this.LoreLuck.PrintCharA() + this.STInfo.PrintInfo(SkillTestType.Lore, this.en.sysstr) + this.STInfo.PrintInfo(SkillTestType.SpellCast, this.en.sysstr));
      this.en.io.Print(this.en.GlobalModifs.PrintInfo(SkillTestType.Lore, this.en.sysstr) + this.en.GlobalModifs.PrintInfo(SkillTestType.SpellCast, this.en.sysstr) + Environment.NewLine, isBold: true);
      this.en.io.Print(this.LoreLuck.PrintCharB() + this.STInfo.PrintInfo(SkillTestType.Luck, this.en.sysstr));
      this.en.io.Print(this.en.GlobalModifs.PrintInfo(SkillTestType.Luck, this.en.sysstr) + Environment.NewLine);
      if (this.specCards.Count != 0)
      {
        this.en.io.Print(Environment.NewLine + this.en.sysstr.GetString(SSType.SpecialCards) + Environment.NewLine, isBold: true);
        foreach (SpecialCard specCard in this.specCards)
          specCard.Print();
      }
      if (this.monsterTrofies.Count != 0)
      {
        this.en.io.Print(Environment.NewLine + this.en.sysstr.GetString(SSType.MonsterTrofies) + Environment.NewLine, isBold: true);
        for (int index = 0; index < this.monsterTrofies.Count; ++index)
        {
          if (index != 0)
            this.en.io.Print(",");
          this.monsterTrofies[index].PrintAsTrofy();
        }
      }
      if (this.gateTrofies.Count == 0)
        return;
      this.en.io.Print(Environment.NewLine + this.en.sysstr.GetString(SSType.GateTrofies) + " (" + this.gateTrofies.Count.ToString() + "):" + Environment.NewLine, isBold: true);
      for (int index = 0; index < this.gateTrofies.Count; ++index)
      {
        if (index != 0)
          this.en.io.Print(",");
        this.en.io.Print(this.gateTrofies[index].GetShortDiscripthion());
      }
    }

    public void AddSpecCards(SpecialCard sc) => this.specCards.Add(sc);

    public bool isSpecCards(string codeName)
    {
      foreach (SpecialCard specCard in this.specCards)
      {
        if (specCard.GetCodeName() == codeName)
          return true;
      }
      return false;
    }

    public bool RemoveSpecCards(string codeName, bool isPrint = true)
    {
      foreach (SpecialCard specCard in this.specCards)
      {
        if (specCard.GetCodeName() == codeName)
        {
          this.specCards.Remove(specCard);
          specCard.Discard(isPrint);
          return true;
        }
      }
      return false;
    }

    public void SetSTTresh(byte value) => this.STTresh = value;

    public byte GetSTTresh() => this.STTresh;

    public void Upkeep()
    {
      this.CurFocus = this.Focus;
      this.en.clock.PrintCurPhase();
      this.myTrigers.ExecuteMandeoratory(TrigerEvent.Upkeep);
      this.UpkeepChicle();
    }

    public void UpkeepChicle()
    {
      List<IOOption> chooseOpthions = this.myTrigers.GetChooseOpthions(TrigerEvent.Upkeep, (short) 0);
      if (chooseOpthions.Count == 0)
      {
        this.Change_Sliders();
      }
      else
      {
        chooseOpthions.Add((IOOption) new IOOpthionWithoutParam(this.en.sysstr.GetString(SSType.SetupSliders), new Func(this.Change_Sliders)));
        this.en.io.StartChoose(chooseOpthions, this.en.sysstr.GetString(SSType.ChooseActhioPromt), this.en.sysstr.GetString(SSType.ChooseActhionButton));
      }
    }

    private void Change_Sliders()
    {
      if (this.CurFocus == (byte) 0)
      {
        this.en.clock.NextPlayer();
      }
      else
      {
        List<IOOption> opts = new List<IOOption>();
        if (this.SpeedSneak.CanIncreseA())
          opts.Add((IOOption) new IOOpthionWithoutParam("+1 " + this.en.sysstr.GetCharekteresticName(SkillTestType.Speed), new Func(this.SpeedSneak.IncriseA)));
        if (this.SpeedSneak.CanIncreseB())
          opts.Add((IOOption) new IOOpthionWithoutParam("+1 " + this.en.sysstr.GetCharekteresticName(SkillTestType.Sneak), new Func(this.SpeedSneak.IncriseB)));
        if (this.FightWill.CanIncreseA())
          opts.Add((IOOption) new IOOpthionWithoutParam("+1 " + this.en.sysstr.GetCharekteresticName(SkillTestType.Fight), new Func(this.FightWill.IncriseA)));
        if (this.FightWill.CanIncreseB())
          opts.Add((IOOption) new IOOpthionWithoutParam("+1 " + this.en.sysstr.GetCharekteresticName(SkillTestType.Will), new Func(this.FightWill.IncriseB)));
        if (this.LoreLuck.CanIncreseA())
          opts.Add((IOOption) new IOOpthionWithoutParam("+1 " + this.en.sysstr.GetCharekteresticName(SkillTestType.Lore), new Func(this.LoreLuck.IncriseA)));
        if (this.LoreLuck.CanIncreseB())
          opts.Add((IOOption) new IOOpthionWithoutParam("+1 " + this.en.sysstr.GetCharekteresticName(SkillTestType.Luck), new Func(this.LoreLuck.IncriseB)));
        opts.Add((IOOption) new IOOpthionWithoutParam("End Upkeep", new Func(this.en.clock.NextPlayer)));
        this.en.io.SetFormMode(FormMode.Investigators);
        this.en.io.StartChoose(opts, this.en.sysstr.GetString(SSType.ChooseActhioPromt), this.en.sysstr.GetString(SSType.ChooseActhionButton));
      }
    }

    public void GainMoney(byte count)
    {
      this.Money += count;
      this.en.io.PrintToLog(this.DisplayName + " " + this.en.sysstr.GetString(SSType.Gain) + " $  " + count.ToString() + ", ");
      this.en.io.PrintToLog(this.Pronoun + "  " + this.en.sysstr.GetString(SSType.NowHas) + "  $  " + this.Money.ToString() + ".");
    }

    public void LoseMoney(byte count)
    {
      if ((int) count > (int) this.Money)
        this.Money = (byte) 0;
      else
        this.Money -= count;
      this.en.io.PrintToLog(this.DisplayName + "  " + this.en.sysstr.GetString(SSType.Lose) + "  $ " + count.ToString());
      this.en.io.PrintToLog(" ( $ " + this.Money.ToString() + " " + this.en.sysstr.GetString(SSType.Remain) + "). ");
    }

    public bool LoseSanity(byte count)
    {
      if ((int) count > (int) this.curSanity)
        this.curSanity = (byte) 0;
      else
        this.curSanity -= count;
      this.en.io.PrintToLog(this.DisplayName + "  " + this.en.sysstr.GetString(SSType.Lose) + " ");
      this.en.io.PrintToLog(count.ToString() + " " + this.en.sysstr.GetString(SSType.Sanity), ChooseColor: "Blue");
      this.en.io.PrintToLog(" ( " + this.curSanity.ToString() + " " + this.en.sysstr.GetString(SSType.Sanity) + " " + this.en.sysstr.GetString(SSType.Remain) + "). ");
      if (this.curSanity != (byte) 0)
        return true;
      this.en.clock.NextPlayer();
      return false;
    }

    public bool LoseStamina(byte count)
    {
      if ((int) count > (int) this.curStamina)
        this.curStamina = (byte) 0;
      else
        this.curStamina -= count;
      this.en.io.PrintToLog(this.DisplayName + "  " + this.en.sysstr.GetString(SSType.Lose) + " ");
      this.en.io.PrintToLog(count.ToString() + " " + this.en.sysstr.GetString(SSType.Stamina), ChooseColor: "Red");
      this.en.io.PrintToLog(" ( " + this.curStamina.ToString() + " " + this.en.sysstr.GetString(SSType.Stamina) + " " + this.en.sysstr.GetString(SSType.Remain) + "). ");
      if (this.curStamina != (byte) 0)
        return true;
      this.en.clock.NextPlayer();
      return false;
    }

    public void Setup_Sliders()
    {
      this.en.clock.PrintCurPhase();
      this.en.io.SetFormMode(FormMode.Investigators);
      this.en.io.StartChoose(this.SpeedSneak.SetupChoses(new FuncWithParam(this.Setup_Slider_1)), this.en.sysstr.GetString(SSType.SetYourSlider) + " " + this.SpeedSneak.GetTitle(), this.en.sysstr.GetString(SSType.ChooseActhionButton));
    }

    private void Setup_Slider_1(short p)
    {
      this.SpeedSneak.SetToPlace((byte) p);
      this.en.io.SetFormMode(FormMode.Investigators);
      this.en.io.StartChoose(this.FightWill.SetupChoses(new FuncWithParam(this.Setup_Slider_2)), this.en.sysstr.GetString(SSType.SetYourSlider) + " " + this.FightWill.GetTitle(), this.en.sysstr.GetString(SSType.ChooseActhionButton));
    }

    private void Setup_Slider_2(short p)
    {
      this.FightWill.SetToPlace((byte) p);
      this.en.io.SetFormMode(FormMode.Investigators);
      this.en.io.StartChoose(this.LoreLuck.SetupChoses(new FuncWithParam(this.Setup_Slider_3)), this.en.sysstr.GetString(SSType.SetYourSlider) + " " + this.LoreLuck.GetTitle(), this.en.sysstr.GetString(SSType.ChooseActhionButton));
    }

    private void Setup_Slider_3(short p)
    {
      this.LoreLuck.SetToPlace((byte) p);
      this.en.clock.NextPlayer();
    }

    public void DecreaseCurFocus()
    {
      if (this.CurFocus < (byte) 1)
        return;
      --this.CurFocus;
    }

    public void Movement()
    {
      this.en.clock.PrintCurPhase();
      this.isMonsterImunity = false;
      if (this.isDelayed)
      {
        this.isDelayed = false;
        this.isCanMove = false;
        this.en.io.PrintToLog(this.DisplayName + " " + this.en.sysstr.GetString(SSType.DelaydEnd) + Environment.NewLine);
        this.MovementPoints = (byte) 0;
      }
      else
      {
        this.isCanMove = true;
        if (this.en.locs[(int) this.locnum].GetLocType() != LocathionType.OW)
        {
          short num = (short) ((int) (short) ((int) (short) ((int) (short) ((int) this.SpeedSneak.GetFirstChar() + (int) this.STInfo.GetInfo(SkillTestType.Speed).CharModif) + (int) this.en.GlobalModifs.GetInfo(SkillTestType.Speed).CharModif) + (int) this.STInfo.GetMPModif()) + (int) this.en.GlobalModifs.GetMPModif());
          if (num < (short) 0)
            num = (short) 0;
          this.MovementPoints = (byte) num;
        }
        else
          this.MovementPoints = (byte) 0;
      }
      this.en.io.SetFormMode(FormMode.Map);
      this.en.locs[(int) this.locnum].Move();
    }

    public void Delayed()
    {
      this.isDelayed = true;
      this.en.io.PrintToLog(this.DisplayName, isItalic: true);
      this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.DelayedStart) + Environment.NewLine);
    }

    public override void WriteToSave(BinaryWriter wr)
    {
      base.WriteToSave(wr);
      this.SpeedSneak.WriteToSave(wr);
      this.FightWill.WriteToSave(wr);
      this.LoreLuck.WriteToSave(wr);
      wr.Write(this.curSanity);
      wr.Write(this.curStamina);
      wr.Write(this.clues);
      wr.Write(this.Money);
      wr.Write(this.isDelayed);
      wr.Write(this.isExploredToken);
      wr.Write(this.isMonsterImunity);
      wr.Write(this.locnum);
      wr.Write(this.investnum);
      wr.Write((byte) this.specCards.Count);
      foreach (SpecialCard specCard in this.specCards)
        specCard.WriteToSave(wr);
      wr.Write((byte) this.monsterTrofies.Count);
      foreach (MonsterIndivid monsterTrofy in this.monsterTrofies)
        wr.Write(monsterTrofy.GetID());
      wr.Write((byte) this.gateTrofies.Count);
      foreach (GatePrototype gateTrofy in this.gateTrofies)
        wr.Write(gateTrofy.GetID());
    }

    public override void ReadFromSave(BinaryReader rd)
    {
      this.SpeedSneak.ReadFromSave(rd);
      this.FightWill.ReadFromSave(rd);
      this.LoreLuck.ReadFromSave(rd);
      this.curSanity = rd.ReadByte();
      this.curStamina = rd.ReadByte();
      this.clues = rd.ReadByte();
      this.Money = rd.ReadByte();
      this.isDelayed = rd.ReadBoolean();
      this.isExploredToken = rd.ReadBoolean();
      this.isMonsterImunity = rd.ReadBoolean();
      this.locnum = rd.ReadInt16();
      this.investnum = rd.ReadByte();
      if (this.en.locs[(int) this.locnum].GetLocType() != LocathionType.OW)
        this.en.locs[(int) this.locnum].AddInvestigator(this.investnum);
      this.specCards.Clear();
      byte num1 = rd.ReadByte();
      for (int index = 0; index < (int) num1; ++index)
      {
        SpecialCard specialCard = SpecialCard.ReadFromSave(this.en, rd);
        specialCard.Init(this, false);
        specialCard.ReadFromSaveIndivid(rd);
      }
      this.monsterTrofies.Clear();
      byte num2 = rd.ReadByte();
      for (int index = 0; index < (int) num2; ++index)
        this.monsterTrofies.Add(this.en.MonstersCup.GetCardById(rd.ReadInt16()));
      this.gateTrofies.Clear();
      byte num3 = rd.ReadByte();
      for (int index = 0; index < (int) num3; ++index)
        this.gateTrofies.Add(this.en.gates.GetCardById(rd.ReadInt16()));
    }

    public void Reset()
    {
      this.SpeedSneak.Reset();
      this.FightWill.Reset();
      this.LoreLuck.Reset();
      this.curSanity = this.maxSanity;
      this.curStamina = this.maxStamina;
      this.clues = (byte) 0;
      this.Money = (byte) 0;
      this.locnum = (short) 0;
      this.isCanMove = true;
      this.isDelayed = false;
      this.isExploredToken = false;
      this.isMonsterImunity = false;
      this.specCards.Clear();
      foreach (MonsterIndivid monsterTrofy in this.monsterTrofies)
        this.en.MonstersCup.Add(monsterTrofy);
      foreach (GatePrototype gateTrofy in this.gateTrofies)
        this.en.gates.Add(gateTrofy);
      this.monsterTrofies.Clear();
      this.gateTrofies.Clear();
    }

    public void AhEnc()
    {
      this.en.curs.DiscardEncounters();
      if (this.en.locs[(int) this.locnum].GetLocType() != LocathionType.OW)
        this.en.locs[(int) this.locnum].Encounter();
      else
        this.en.clock.NextPlayer();
    }

    public void OwEnc()
    {
      this.en.curs.DiscardEncounters();
      if (this.en.locs[(int) this.locnum].GetLocType() == LocathionType.OW)
        this.en.locs[(int) this.locnum].Encounter();
      else
        this.en.clock.NextPlayer();
    }

    public void AddTrophy(MonsterIndivid mons) => this.monsterTrofies.Add(mons);

    public void AddTrophy(GatePrototype gate) => this.gateTrofies.Add(gate);

    public void BeforeCombatCheck() => this.en.curs.curFight.DoCombatCheck();

    public string PrintToMap()
    {
      string map = this.DisplayName;
      if (this.isDelayed)
        map = map + "( " + this.en.sysstr.GetString(SSType.Delayed) + ")";
      if (this.isExploredToken)
        map = map + "( " + this.en.sysstr.GetString(SSType.ExploredToken) + ")";
      return map;
    }

    private struct SetupInfo
    {
      public short StartLoc;
      public byte StartClues;
      public byte StartMoney;
      public byte DrawCommon;
      public byte DrawUnice;
      public byte DrawSpells;
      public byte DrawSkils;
    }

    private class ArcSlider
    {
      private const byte slider_places = 4;
      private byte[] charA;
      private byte[] charB;
      private byte curPos;
      private string Title;
      private GameEngine en;

      public ArcSlider(GameEngine eng, string tit)
      {
        this.charA = new byte[4];
        this.charB = new byte[4];
        this.curPos = (byte) 0;
        this.Title = tit;
        this.en = eng;
      }

      public byte GetFirstChar() => this.charA[(int) this.curPos];

      public byte GetSecondChar() => this.charB[(int) this.curPos];

      public bool FromTextFile(TextFileParser data) => byte.TryParse(data.GetToken(), out this.charA[0]) && byte.TryParse(data.GetToken(), out this.charA[1]) && byte.TryParse(data.GetToken(), out this.charA[2]) && byte.TryParse(data.GetToken(), out this.charA[3]) && byte.TryParse(data.GetToken(), out this.charB[0]) && byte.TryParse(data.GetToken(), out this.charB[1]) && byte.TryParse(data.GetToken(), out this.charB[2]) && byte.TryParse(data.GetToken(), out this.charB[3]);

      public string PrintCharA()
      {
        string str1 = "";
        for (int index = 0; index < 4; ++index)
        {
          string str2 = str1 + this.charA[index].ToString();
          if (index == (int) this.curPos)
            str2 += "*";
          str1 = str2 + "\t";
        }
        return str1;
      }

      public string PrintCharB()
      {
        string str1 = "";
        for (int index = 0; index < 4; ++index)
        {
          string str2 = str1 + this.charB[index].ToString();
          if (index == (int) this.curPos)
            str2 += "*";
          str1 = str2 + "\t";
        }
        return str1;
      }

      public void SetToPlace(byte place)
      {
        if (place < (byte) 0 && place >= (byte) 4)
          return;
        this.curPos = place;
        this.PrintPlacement();
      }

      public void IncriseA()
      {
        if (this.curPos < (byte) 3)
          ++this.curPos;
        this.PrintPlacement();
        this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].DecreaseCurFocus();
        this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].Change_Sliders();
      }

      public void IncriseB()
      {
        if (this.curPos >= (byte) 1)
          --this.curPos;
        this.PrintPlacement();
        this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].DecreaseCurFocus();
        this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].Change_Sliders();
      }

      private void PrintPlacement()
      {
        this.en.io.PrintToLog(this.Title, isBold: true);
        this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.isPlacedTo) + " ");
        this.en.io.PrintToLog(this.charA[(int) this.curPos].ToString() + "/" + this.charB[(int) this.curPos].ToString() + Environment.NewLine, isItalic: true);
      }

      public bool CanIncreseA() => this.curPos < (byte) 3;

      public bool CanIncreseB() => this.curPos >= (byte) 1;

      public List<IOOption> SetupChoses(FuncWithParam rp)
      {
        List<IOOption> ioOptionList = new List<IOOption>();
        for (byte p = 0; p < (byte) 4; ++p)
          ioOptionList.Add((IOOption) new IOOptionWithParam(this.charA[(int) p].ToString() + "/" + this.charB[(int) p].ToString(), rp, (short) p));
        return ioOptionList;
      }

      public string GetTitle() => this.Title;

      public void WriteToSave(BinaryWriter wr) => wr.Write(this.curPos);

      public void ReadFromSave(BinaryReader rd) => this.curPos = rd.ReadByte();

      public void Reset() => this.curPos = (byte) 0;
    }
  }
}
