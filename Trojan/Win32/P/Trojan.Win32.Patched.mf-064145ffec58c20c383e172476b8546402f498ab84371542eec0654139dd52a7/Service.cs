// Decompiled with JetBrains decompiler
// Type: eLock.Serv.Service.Service
// Assembly: eLockServ, Version=2.5.4007.0, Culture=neutral, PublicKeyToken=null
// MVID: B5CD21BD-8179-4389-9DFE-3B9352BA45C0
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Patched.mf-064145ffec58c20c383e172476b8546402f498ab84371542eec0654139dd52a7.exe

using eLock.Serv.Interface;
using eLock.Serv.Library;
using System;
using System.Collections;
using System.ComponentModel;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Ipc;
using System.Runtime.Serialization.Formatters;
using System.Security.Principal;
using System.ServiceProcess;

namespace eLock.Serv.Service
{
  public class Service : ServiceBase
  {
    private IContainer components = (IContainer) null;
    private eLock.Serv.Main.Main mainControl = (eLock.Serv.Main.Main) null;
    private IpcChannel channel = (IpcChannel) null;
    private static DateTime start = DateTime.Now;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.ServiceName = "eLockService";
    }

    private static void outputTimeStart(string str)
    {
      eLock.Serv.Service.Service.start = DateTime.Now;
      DebugPrint.OutputInformation(string.Format("*** {0} Start ***", (object) str));
    }

    private static void outputTimeEnd(string str) => DebugPrint.OutputInformation(string.Format("*** {0} End: {1} milliseconds ***", (object) str, (object) (DateTime.Now - eLock.Serv.Service.Service.start).TotalMilliseconds));

    public Service()
    {
      eLock.Serv.Service.Service.outputTimeStart("InitializeComponent");
      this.InitializeComponent();
      eLock.Serv.Service.Service.outputTimeEnd("InitializeComponent");
      eLock.Serv.Service.Service.outputTimeStart("Prepare IPC channel");
      IDictionary properties = (IDictionary) new Hashtable();
      properties[(object) "name"] = (object) "ipc";
      properties[(object) "portName"] = (object) "eLockServ";
      properties[(object) "connectionTimeout"] = (object) 500;
      properties[(object) "authorizedGroup"] = (object) ImpersonateUser.GetNameByWellKnownSidType(WellKnownSidType.BuiltinUsersSid);
      BinaryServerFormatterSinkProvider serverSinkProvider = new BinaryServerFormatterSinkProvider();
      serverSinkProvider.TypeFilterLevel = TypeFilterLevel.Full;
      BinaryClientFormatterSinkProvider clientSinkProvider = new BinaryClientFormatterSinkProvider();
      this.channel = new IpcChannel(properties, (IClientChannelSinkProvider) clientSinkProvider, (IServerChannelSinkProvider) serverSinkProvider);
      eLock.Serv.Service.Service.outputTimeEnd("Prepare IPC channel");
    }

    protected override void OnCustomCommand(int command)
    {
      base.OnCustomCommand(command);
      if (command != 201)
        return;
      this.mainControl.byPassRefreshExistentDriver();
    }

    protected override void OnStart(string[] args)
    {
      DebugPrint.OutputInformation("*** [OnStart] Start ***");
      eLock.Serv.Service.Service.outputTimeStart("Unregister previos registered IPC channel");
      IChannel channel = ChannelServices.GetChannel("eLockServ");
      if (channel != null)
        ChannelServices.UnregisterChannel(channel);
      eLock.Serv.Service.Service.outputTimeEnd("Unregister previos registered IPC channel");
      eLock.Serv.Service.Service.outputTimeStart("Prepare Main object");
      if (this.mainControl == null)
        this.mainControl = new eLock.Serv.Main.Main();
      eLock.Serv.Service.Service.outputTimeEnd("Prepare Main object");
      eLock.Serv.Service.Service.outputTimeStart("Marshalling Main object");
      RemotingServices.Marshal((MarshalByRefObject) this.mainControl, "eLock", typeof (IeLockServ));
      eLock.Serv.Service.Service.outputTimeEnd("Marshalling Main object");
      eLock.Serv.Service.Service.outputTimeStart("Register IPC channel");
      if (this.channel != null)
        ChannelServices.RegisterChannel((IChannel) this.channel, true);
      eLock.Serv.Service.Service.outputTimeEnd("Register IPC channel");
      DebugPrint.OutputInformation("*** [OnStart] End ***");
    }

    protected override void OnStop()
    {
      DebugPrint.OutputInformation("*** [OnStop] Start ***");
      eLock.Serv.Service.Service.outputTimeStart("Dispose Main object");
      if (this.mainControl != null)
      {
        this.mainControl.Dispose();
        this.mainControl = (eLock.Serv.Main.Main) null;
      }
      eLock.Serv.Service.Service.outputTimeEnd("Dispose Main object");
      eLock.Serv.Service.Service.outputTimeStart("Unregister registered IPC channel");
      if (this.channel != null)
        ChannelServices.UnregisterChannel((IChannel) this.channel);
      eLock.Serv.Service.Service.outputTimeEnd("Unregister registered IPC channel");
      DebugPrint.OutputInformation("*** [OnStop] End ***");
    }
  }
}
