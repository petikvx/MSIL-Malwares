// Decompiled with JetBrains decompiler
// Type: C1255198513.C2852464175
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using C3904355907;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Cryptography;

namespace C1255198513
{
  public sealed class C2852464175 : C856455061
  {
    private const CipherMode C3554254475 = CipherMode.CBC;
    private const PaddingMode C3554254475 = PaddingMode.PKCS7;
    private static C3554254475.C3865851505 C3554254475;

    [SpecialName]
    public static C3554254475.C3865851505 C1037565863()
    {
      C3554254475.C3865851505 c3865851505 = C2852464175.C3554254475;
      if (c3865851505 == null)
      {
        c3865851505 = new C3554254475.C3865851505(new byte[16]
        {
          (byte) 49,
          (byte) 193,
          (byte) 242,
          (byte) 230,
          (byte) 191,
          (byte) 113,
          (byte) 67,
          (byte) 80,
          (byte) 190,
          (byte) 88,
          (byte) 5,
          (byte) 33,
          (byte) 106,
          (byte) 252,
          (byte) 90,
          byte.MaxValue
        });
        C2852464175.C3554254475 = c3865851505;
      }
      return c3865851505;
    }

    [SpecialName]
    public C3554254475.C3865851505 C3554254475() => C2852464175.C1037565863();

    [SpecialName]
    public string C3904355907() => DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Kp() + C3554254475.C4110462503.C878818188().Replace(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Kn(), DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KQ()) + DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Kq();

    private static void C3554254475([In] Stream obj0, [In] bool obj1, [In] byte[] obj2, [In] byte[] obj3)
    {
      if (obj0 == null)
      {
        Debug.Assert(false);
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.C453955339());
      }
      if (obj2 == null)
      {
        Debug.Assert(false);
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cA());
      }
      if (obj2.Length != 32)
      {
        Debug.Assert(false);
        throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cA());
      }
      if (obj3 == null)
      {
        Debug.Assert(false);
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KR());
      }
      if (obj3.Length != 16)
      {
        Debug.Assert(false);
        throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KR());
      }
      if (obj1)
      {
        Debug.Assert(obj0.CanWrite);
        if (!obj0.CanWrite)
          throw new ArgumentException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Kr());
      }
      else
      {
        Debug.Assert(obj0.CanRead);
        if (!obj0.CanRead)
          throw new ArgumentException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KS());
      }
    }

    private static Stream C3904355907([In] Stream obj0, [In] bool obj1, [In] byte[] obj2, [In] byte[] obj3)
    {
      C2852464175.C3554254475(obj0, obj1, obj2, obj3);
      SymmetricAlgorithm symmetricAlgorithm = C3904355907.C1304234792.C3904355907();
      if (symmetricAlgorithm.BlockSize != 128)
      {
        Debug.Assert(false);
        symmetricAlgorithm.BlockSize = 128;
      }
      symmetricAlgorithm.KeySize = 256;
      symmetricAlgorithm.Mode = CipherMode.CBC;
      symmetricAlgorithm.Padding = PaddingMode.PKCS7;
      ICryptoTransform cryptoTransform = !obj1 ? symmetricAlgorithm.CreateDecryptor(obj2, obj3) : symmetricAlgorithm.CreateEncryptor(obj2, obj3);
      if (cryptoTransform == null)
      {
        Debug.Assert(false);
        throw new SecurityException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Ks());
      }
      return (Stream) new C3904355907.C4024072794(obj0, cryptoTransform, obj1 ? CryptoStreamMode.Write : CryptoStreamMode.Read, symmetricAlgorithm);
    }

    public Stream C3554254475([In] Stream obj0, [In] byte[] obj1, [In] byte[] obj2) => C2852464175.C3904355907(obj0, true, obj1, obj2);

    public Stream C3904355907([In] Stream obj0, [In] byte[] obj1, [In] byte[] obj2) => C2852464175.C3904355907(obj0, false, obj1, obj2);
  }
}
