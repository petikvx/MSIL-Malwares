// Decompiled with JetBrains decompiler
// Type: 741381466672.945301884499
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003462605226301;
using \u003660835381033;
using \u003741381466672;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;

namespace \u003741381466672
{
  [DefaultMember("Item")]
  internal class \u003945301884499<TKey, TValue> : 
    IDictionary<TKey, TValue>,
    ICollection<KeyValuePair<TKey, TValue>>,
    IEnumerable<KeyValuePair<TKey, TValue>>,
    IEnumerable,
    IWrappedDictionary,
    IDictionary,
    ICollection
  {
    private readonly IDictionary \u003406788026234;
    private readonly IDictionary<TKey, TValue> \u003131467976413;
    private readonly IReadOnlyDictionary<TKey, TValue> \u003330907130838;
    private object \u003245479345320;

    public \u003945301884499(IDictionary dictionary)
    {
      \u003821784578685.\u003260732825936((object) dictionary, nameof (dictionary));
      this._dictionary = dictionary;
    }

    public \u003945301884499(IDictionary<TKey, TValue> dictionary)
    {
      \u003821784578685.\u003260732825936((object) dictionary, nameof (dictionary));
      this._genericDictionary = dictionary;
    }

    public \u003945301884499(IReadOnlyDictionary<TKey, TValue> dictionary)
    {
      \u003821784578685.\u003260732825936((object) dictionary, nameof (dictionary));
      this._readOnlyDictionary = dictionary;
    }

    public void \u003316621282629(TKey _param1, TValue _param2)
    {
      if (this._dictionary != null)
      {
        this._dictionary.Add((object) _param1, (object) _param2);
      }
      else
      {
        if (this._genericDictionary == null)
          throw new NotSupportedException();
        this._genericDictionary.Add(_param1, _param2);
      }
    }

    public bool \u003092687048749(TKey _param1)
    {
      if (this._dictionary != null)
        return this._dictionary.Contains((object) _param1);
      return this._readOnlyDictionary != null ? this._readOnlyDictionary.ContainsKey(_param1) : this._genericDictionary.ContainsKey(_param1);
    }

    public ICollection<TKey> \u003911122687858
    {
      get
      {
        if (this._dictionary != null)
          return (ICollection<TKey>) this._dictionary.Keys.Cast<TKey>().ToList<TKey>();
        return this._readOnlyDictionary != null ? (ICollection<TKey>) this._readOnlyDictionary.Keys.ToList<TKey>() : this._genericDictionary.Keys;
      }
    }

    public bool \u003885495898074(TKey _param1)
    {
      if (this._dictionary != null)
      {
        if (!this._dictionary.Contains((object) _param1))
          return false;
        this._dictionary.Remove((object) _param1);
        return true;
      }
      if (this._readOnlyDictionary != null)
        throw new NotSupportedException();
      return this._genericDictionary.Remove(_param1);
    }

    public bool \u003885978504014(TKey _param1, out TValue _param2)
    {
      if (this._dictionary != null)
      {
        if (!this._dictionary.Contains((object) _param1))
        {
          _param2 = default (TValue);
          return false;
        }
        _param2 = (TValue) this._dictionary[(object) _param1];
        return true;
      }
      if (this._readOnlyDictionary != null)
        throw new NotSupportedException();
      return this._genericDictionary.TryGetValue(_param1, out _param2);
    }

    public ICollection<TValue> \u003305120153927
    {
      get
      {
        if (this._dictionary != null)
          return (ICollection<TValue>) this._dictionary.Values.Cast<TValue>().ToList<TValue>();
        return this._readOnlyDictionary != null ? (ICollection<TValue>) this._readOnlyDictionary.Values.ToList<TValue>() : this._genericDictionary.Values;
      }
    }

    public TValue get_Item(TKey key)
    {
      if (this._dictionary != null)
        return (TValue) this._dictionary[(object) key];
      return this._readOnlyDictionary != null ? this._readOnlyDictionary[key] : this._genericDictionary[key];
    }

    public void set_Item(TKey key, TValue value)
    {
      if (this._dictionary != null)
      {
        this._dictionary[(object) key] = (object) value;
      }
      else
      {
        if (this._readOnlyDictionary != null)
          throw new NotSupportedException();
        this._genericDictionary[key] = value;
      }
    }

    public void \u003618799345694(KeyValuePair<TKey, TValue> _param1)
    {
      if (this._dictionary != null)
      {
        ((IList) this._dictionary).Add((object) _param1);
      }
      else
      {
        if (this._readOnlyDictionary != null)
          throw new NotSupportedException();
        this._genericDictionary?.Add(_param1);
      }
    }

    public void \u003709309892881()
    {
      if (this._dictionary != null)
      {
        this._dictionary.Clear();
      }
      else
      {
        if (this._readOnlyDictionary != null)
          throw new NotSupportedException();
        this._genericDictionary.Clear();
      }
    }

    public bool \u003857387477669(KeyValuePair<TKey, TValue> _param1)
    {
      if (this._dictionary != null)
        return ((IList) this._dictionary).Contains((object) _param1);
      return this._readOnlyDictionary != null ? this._readOnlyDictionary.Contains<KeyValuePair<TKey, TValue>>(_param1) : this._genericDictionary.Contains(_param1);
    }

    public void \u003609586475743(KeyValuePair<TKey, TValue>[] _param1, int _param2)
    {
      if (this._dictionary != null)
      {
        IDictionaryEnumerator enumerator = this._dictionary.GetEnumerator();
        try
        {
          while (enumerator.MoveNext())
          {
            DictionaryEntry entry = enumerator.Entry;
            _param1[_param2++] = new KeyValuePair<TKey, TValue>((TKey) entry.Key, (TValue) entry.Value);
          }
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            disposable.Dispose();
        }
      }
      else
      {
        if (this._readOnlyDictionary != null)
          throw new NotSupportedException();
        this._genericDictionary.CopyTo(_param1, _param2);
      }
    }

    public int \u003937898146434
    {
      get
      {
        if (this._dictionary != null)
          return this._dictionary.Count;
        return this._readOnlyDictionary != null ? this._readOnlyDictionary.Count : this._genericDictionary.Count;
      }
    }

    public bool \u003205848696721
    {
      get
      {
        if (this._dictionary != null)
          return this._dictionary.IsReadOnly;
        return this._readOnlyDictionary != null || this._genericDictionary.IsReadOnly;
      }
    }

    public bool \u003560574647330(KeyValuePair<TKey, TValue> _param1)
    {
      if (this._dictionary != null)
      {
        if (!this._dictionary.Contains((object) _param1.Key))
          return true;
        if (!object.Equals(this._dictionary[(object) _param1.Key], (object) _param1.Value))
          return false;
        this._dictionary.Remove((object) _param1.Key);
        return true;
      }
      if (this._readOnlyDictionary != null)
        throw new NotSupportedException();
      return ((ICollection<KeyValuePair<TKey, TValue>>) this._genericDictionary).Remove(_param1);
    }

    public IEnumerator<KeyValuePair<TKey, TValue>> \u003468283693455()
    {
      if (this._dictionary != null)
        return this._dictionary.Cast<DictionaryEntry>().Select<DictionaryEntry, KeyValuePair<TKey, TValue>>((Func<DictionaryEntry, KeyValuePair<TKey, TValue>>) delegate); //unable to render the statement
      return this._readOnlyDictionary != null ? this._readOnlyDictionary.GetEnumerator() : this._genericDictionary.GetEnumerator();
    }

    IEnumerator IEnumerable.\u003928389007365() => (IEnumerator) this.GetEnumerator();

    void IDictionary.\u003725614647335(object _param1, object _param2)
    {
      if (this._dictionary != null)
      {
        this._dictionary.Add(_param1, _param2);
      }
      else
      {
        if (this._readOnlyDictionary != null)
          throw new NotSupportedException();
        this._genericDictionary.Add((TKey) _param1, (TValue) _param2);
      }
    }

    [IndexerName("645748418614")]
    object IDictionary.this[object key]
    {
      get
      {
        if (this._dictionary != null)
          return this._dictionary[key];
        return this._readOnlyDictionary != null ? (object) this._readOnlyDictionary[(TKey) key] : (object) this._genericDictionary[(TKey) key];
      }
      set
      {
        if (this._dictionary != null)
        {
          this._dictionary[key] = value;
        }
        else
        {
          if (this._readOnlyDictionary != null)
            throw new NotSupportedException();
          this._genericDictionary[(TKey) key] = (TValue) value;
        }
      }
    }

    IDictionaryEnumerator IDictionary.\u003117021588075()
    {
      if (this._dictionary != null)
        return this._dictionary.GetEnumerator();
      return this._readOnlyDictionary != null ? (IDictionaryEnumerator) new \u003945301884499<TKey, TValue>.\u003030626253379<TKey, TValue>(this._readOnlyDictionary.GetEnumerator()) : (IDictionaryEnumerator) new \u003945301884499<TKey, TValue>.\u003030626253379<TKey, TValue>(this._genericDictionary.GetEnumerator());
    }

    bool IDictionary.\u003896250071719(object _param1)
    {
      if (this._genericDictionary != null)
        return this._genericDictionary.ContainsKey((TKey) _param1);
      return this._readOnlyDictionary != null ? this._readOnlyDictionary.ContainsKey((TKey) _param1) : this._dictionary.Contains(_param1);
    }

    bool IDictionary.\u003927119873728
    {
      get
      {
        if (this._genericDictionary != null)
          return false;
        return this._readOnlyDictionary != null || this._dictionary.IsFixedSize;
      }
    }

    ICollection IDictionary.\u003975003448666
    {
      get
      {
        if (this._genericDictionary != null)
          return (ICollection) this._genericDictionary.Keys.ToList<TKey>();
        return this._readOnlyDictionary != null ? (ICollection) this._readOnlyDictionary.Keys.ToList<TKey>() : this._dictionary.Keys;
      }
    }

    public void \u003650773322765(object _param1)
    {
      if (this._dictionary != null)
      {
        this._dictionary.Remove(_param1);
      }
      else
      {
        if (this._readOnlyDictionary != null)
          throw new NotSupportedException();
        this._genericDictionary.Remove((TKey) _param1);
      }
    }

    ICollection IDictionary.\u003176406397855
    {
      get
      {
        if (this._genericDictionary != null)
          return (ICollection) this._genericDictionary.Values.ToList<TValue>();
        return this._readOnlyDictionary != null ? (ICollection) this._readOnlyDictionary.Values.ToList<TValue>() : this._dictionary.Values;
      }
    }

    void ICollection.\u003298722861587(Array _param1, int _param2)
    {
      if (this._dictionary != null)
      {
        this._dictionary.CopyTo(_param1, _param2);
      }
      else
      {
        if (this._readOnlyDictionary != null)
          throw new NotSupportedException();
        this._genericDictionary.CopyTo((KeyValuePair<TKey, TValue>[]) _param1, _param2);
      }
    }

    bool ICollection.\u003727394014450 => this._dictionary != null && this._dictionary.IsSynchronized;

    object ICollection.\u003453232770580
    {
      get
      {
        if (this._syncRoot == null)
          Interlocked.CompareExchange(ref this._syncRoot, new object(), (object) null);
        return this._syncRoot;
      }
    }

    public object \u003564713112906
    {
      get
      {
        if (this._dictionary != null)
          return (object) this._dictionary;
        return this._readOnlyDictionary != null ? (object) this._readOnlyDictionary : (object) this._genericDictionary;
      }
    }

    private struct \u003030626253379<TEnumeratorKey, TEnumeratorValue> : 
      IDictionaryEnumerator,
      IEnumerator
    {
      public static readonly \u003945301884499<TKey, TValue>.\u003737726972631 \u003120461035229;

      public DictionaryEntry \u003497989786739 => (DictionaryEntry) this.\u003849628260349;

      public object \u003773733502514 => this.\u003497989786739.Key;

      public object \u003554302769944 => this.\u003497989786739.Value;

      public object \u003849628260349
      {
        get
        {
          KeyValuePair<TEnumeratorKey, TEnumeratorValue> current = this._e.Current;
          __Boxed<TEnumeratorKey> key = (object) current.Key;
          current = this._e.Current;
          __Boxed<TEnumeratorValue> local = (object) current.Value;
          return (object) new DictionaryEntry((object) key, (object) local);
        }
      }

      public bool \u003166921153238() => this._e.MoveNext();

      public void \u003142990524399() => this._e.Reset();

      static \u003030626253379() => \u003945301884499<TKey, TValue>.\u003737726972631.\u003C\u003E9 = new \u003945301884499<TKey, TValue>.\u003737726972631();
    }
  }
}
