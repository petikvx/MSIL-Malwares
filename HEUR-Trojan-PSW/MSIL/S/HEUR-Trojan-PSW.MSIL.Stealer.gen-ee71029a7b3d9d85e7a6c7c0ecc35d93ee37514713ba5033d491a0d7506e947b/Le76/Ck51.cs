// Decompiled with JetBrains decompiler
// Type: Le76.Ck51
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using Ft2;
using System;
using System.ComponentModel;
using System.Data.Linq.Mapping;
using System.Runtime.InteropServices;
using System.Threading;

namespace Le76
{
  [Table(Name = "dbo.overtime")]
  public class Ck51 : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs Ⴐ = new PropertyChangingEventArgs(string.Empty);
    private int _overtime_id;
    private string _people_id;
    private int? _overtime_duration;
    private DateTime? _overtime_date;
    private Df9.d9F Ⴅ;

    [Column(DbType = "Int NOT NULL", IsPrimaryKey = true, Storage = "_overtime_id")]
    public int Ⴈ
    {
      get => this._overtime_id;
      [param: In] set
      {
        if (this._overtime_id == value)
          return;
        this.Ag2s();
        this._overtime_id = value;
        this.Zf92("overtime_id");
      }
    }

    [Column(DbType = "VarChar(15)", Storage = "_people_id")]
    public string Ⴅ
    {
      get => this._people_id;
      [param: In] set
      {
        if (string.Equals(this._people_id, value))
          return;
        this.Ag2s();
        this._people_id = value;
        this.Zf92("people_id");
      }
    }

    [Column(DbType = "Int", Storage = "_overtime_duration")]
    public int? Ⴄ
    {
      get => this._overtime_duration;
      [param: In] set
      {
        if (this._overtime_duration.Equals((object) value))
          return;
        this.Ag2s();
        this._overtime_duration = value;
        this.Zf92("overtime_duration");
      }
    }

    [Column(DbType = "Date", Storage = "_overtime_date")]
    public DateTime? Ⴃ
    {
      get => this._overtime_date;
      [param: In] set
      {
        if (this._overtime_date.Equals((object) value))
          return;
        this.Ag2s();
        this._overtime_date = value;
        this.Zf92("overtime_date");
      }
    }

    public event PropertyChangingEventHandler Ⴐ
    {
      add
      {
        MulticastDelegate multicastDelegate1 = (MulticastDelegate) this.Ⴅ.Ⴈ;
        MulticastDelegate multicastDelegate2;
        do
        {
          multicastDelegate2 = (MulticastDelegate) (multicastDelegate1 as PropertyChangingEventHandler);
          multicastDelegate1 = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴅ.Ⴈ, (PropertyChangingEventHandler) Delegate.Combine((Delegate) multicastDelegate2, (Delegate) value), multicastDelegate2 as PropertyChangingEventHandler);
        }
        while (multicastDelegate1 as PropertyChangingEventHandler != (PropertyChangingEventHandler) multicastDelegate2);
      }
      remove
      {
        object obj1 = (object) this.Ⴅ.Ⴈ;
        object obj2;
        do
        {
          obj2 = (object) (PropertyChangingEventHandler) obj1;
          obj1 = (object) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴅ.Ⴈ, (MulticastDelegate) Delegate.Remove((Delegate) obj2, (Delegate) value) as PropertyChangingEventHandler, (PropertyChangingEventHandler) obj2);
        }
        while (obj1 as PropertyChangingEventHandler != (PropertyChangingEventHandler) obj2);
      }
    }

    public event PropertyChangedEventHandler Ⴓ
    {
      add
      {
        object obj = (object) this.Ⴅ.Ⴐ;
        MulticastDelegate multicastDelegate;
        do
        {
          multicastDelegate = (MulticastDelegate) obj;
          obj = (object) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴅ.Ⴐ, (MulticastDelegate) Delegate.Combine((Delegate) multicastDelegate, (Delegate) value) as PropertyChangedEventHandler, (PropertyChangedEventHandler) multicastDelegate);
        }
        while (obj as PropertyChangedEventHandler != (PropertyChangedEventHandler) multicastDelegate);
      }
      remove
      {
        object obj = (object) this.Ⴅ.Ⴐ;
        MulticastDelegate comparand;
        do
        {
          comparand = (MulticastDelegate) obj;
          obj = (object) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴅ.Ⴐ, (comparand as PropertyChangedEventHandler) - value, comparand as PropertyChangedEventHandler);
        }
        while (obj as PropertyChangedEventHandler != comparand as PropertyChangedEventHandler);
      }
    }

    protected virtual void Ag2s()
    {
      if (this.Ⴅ.Ⴈ == null)
        return;
      MulticastDelegate ⴈ = (MulticastDelegate) this.Ⴅ.Ⴈ;
      if (!(ⴈ is PropertyChangingEventHandler))
        return;
      (ⴈ as PropertyChangingEventHandler)((object) this, Ck51.Ⴐ);
    }

    protected virtual void Zf92([In] string obj0)
    {
      if (this.Ⴅ.Ⴐ == null)
        return;
      object ⴐ = (object) this.Ⴅ.Ⴐ;
      if (!(ⴐ is PropertyChangedEventHandler))
        return;
      ((PropertyChangedEventHandler) ⴐ)((object) this, new PropertyChangedEventArgs(obj0));
    }
  }
}
