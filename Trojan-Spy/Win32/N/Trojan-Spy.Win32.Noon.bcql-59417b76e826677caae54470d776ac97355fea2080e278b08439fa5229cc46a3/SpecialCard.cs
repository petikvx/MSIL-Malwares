// Decompiled with JetBrains decompiler
// Type: mmxAH.SpecialCard
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.IO;

namespace mmxAH
{
  public class SpecialCard
  {
    protected string CodeName;
    protected Investigator inv;
    protected GameEngine en;
    protected bool isFirstTurn;
    protected SpecialCardText text;

    public string GetCodeName() => this.CodeName;

    public void Print()
    {
      this.en.io.Print(this.text.Title + Environment.NewLine, isBold: true);
      this.en.io.PrintTag(this.text.InfoText + Environment.NewLine);
    }

    public virtual void Init(Investigator invest, bool isWrite = true)
    {
      this.inv = invest;
      this.inv.AddSpecCards(this);
      if (!isWrite)
        return;
      this.en.io.SetFormMode(FormMode.Log);
      this.en.io.PrintTag(this.inv.GetTitle() + " " + this.text.InitMessage + Environment.NewLine);
    }

    public virtual void Discard(bool isPrint)
    {
      this.inv.RemoveSpecCards(this.CodeName, false);
      if (!isPrint)
        return;
      this.en.io.SetFormMode(FormMode.Log);
      this.en.io.PrintTag(this.inv.GetTitle() + " " + this.text.DiscardMessage + Environment.NewLine);
    }

    protected virtual void Tick()
    {
      if (this.isFirstTurn)
      {
        this.isFirstTurn = false;
      }
      else
      {
        this.en.io.PrintToLog(this.text.Title + ":", isBold: true);
        if (new DiceRoller(this.en).RollOneDice() == (byte) 1)
          this.Discard(true);
        this.en.io.PrintToLog(Environment.NewLine);
      }
    }

    protected void InitTriger() => this.inv.myTrigers.AddMandarotoryTriger(new MandoratoryTriger(TrigerEvent.Upkeep, new Func(this.Tick), this.CodeName));

    public virtual void WriteToSave(BinaryWriter wr)
    {
    }

    public virtual void ReadFromSaveIndivid(BinaryReader rd)
    {
    }

    public static SpecialCard ReadFromSave(GameEngine en, BinaryReader rd)
    {
      switch (rd.ReadByte())
      {
        case 0:
          return (SpecialCard) new STLMembership(en);
        case 1:
          return (SpecialCard) new Bless(en);
        case 2:
          return (SpecialCard) new Curse(en);
        case 3:
          return (SpecialCard) new Retainer(en);
        case 4:
          return (SpecialCard) new DeputatiOfArchem(en);
        default:
          return (SpecialCard) null;
      }
    }
  }
}
