// Decompiled with JetBrains decompiler
// Type: FileCash_v3._0.FileCash
// Assembly: FileCash_v3.0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1DECC99D-34C5-4E02-A85D-DC744B5C555A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Constructor.MSIL.ArchSMS.a-33cc8dceb24ed9df287e1f92d02773477af42b8d2b6de53a45bb9b5a3ead070b.exe

using System;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace FileCash_v3._0
{
  public class FileCash
  {
    public string DomainIP = "http://ccdev1.ru/_arch_api";
    public string SavedPassFolder = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\FileCash";
    public string SavedPassXml;
    public string LocalTmpPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\FileCash";
    public string FTP_XML_Path;
    public string SavedProfilePath;
    public string SavedProjectPath;
    public string HDD_Serial;
    public string SID;
    public string Login;
    public string Password;
    public string OS_Version;
    public int USERID;
    public string LastAuth;
    public string Boundary = "--JHG87t709*&tert5546jh^hg6je1ghj98rhjt646err54*er%^465SDFF45S46";

    public FileCash()
    {
      this.SavedPassXml = this.SavedPassFolder + "\\svauth.lpiud";
      this.FTP_XML_Path = this.LocalTmpPath + "\\ftp.fcf";
      this.SavedProfilePath = this.LocalTmpPath + "\\profile.fcprfl";
      this.SavedProjectPath = this.LocalTmpPath + "\\project.fcproj";
    }

    public void GetSID(string Url)
    {
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(Url);
        httpWebRequest.Method = "GET";
        WebResponse response = httpWebRequest.GetResponse();
        StreamReader streamReader = new StreamReader(response.GetResponseStream(), Encoding.UTF8);
        this.SID = streamReader.ReadToEnd();
        streamReader.Close();
        response.Close();
      }
      catch
      {
        int num = (int) MessageBox.Show("Не возможно подлючится к серверу!", "Ошибка авторизации", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
    }

    public string SendPost(string Url, string PostData)
    {
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(Url);
        httpWebRequest.Method = "POST";
        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
        byte[] bytes = Encoding.UTF8.GetBytes(PostData);
        httpWebRequest.ContentLength = (long) bytes.Length;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
        WebResponse response = httpWebRequest.GetResponse();
        StreamReader streamReader = new StreamReader(response.GetResponseStream(), Encoding.UTF8);
        string end = streamReader.ReadToEnd();
        streamReader.Close();
        response.Close();
        switch (end)
        {
          case "erDel":
            int num1 = (int) MessageBox.Show("Ошибка удаления архива!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return (string) null;
          case "erSDB":
            int num2 = (int) MessageBox.Show("В настоящее время сервер базы данных не доступен!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return (string) null;
          case "erDB":
            int num3 = (int) MessageBox.Show("В настоящее время база данных не доступна!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return (string) null;
          case "erDBq":
            int num4 = (int) MessageBox.Show("Сбой запроса к базе данных!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return (string) null;
          case "msgNoArh":
            int num5 = (int) MessageBox.Show("Список архивов пуст!", "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            return (string) null;
          case "msgNoStyle":
            int num6 = (int) MessageBox.Show("Список стилей пуст!", "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            return (string) null;
          case "erAutId":
            int num7 = (int) MessageBox.Show("Ошибка обновления идентификатора!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            Application.Exit();
            break;
        }
        return end;
      }
      catch
      {
        int num = (int) MessageBox.Show("Не возможно подлючится к серверу!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return (string) null;
      }
    }

    public string MD5(string password)
    {
      byte[] bytes = Encoding.Default.GetBytes(password);
      try
      {
        byte[] hash = new MD5CryptoServiceProvider().ComputeHash(bytes);
        string str = "";
        foreach (byte num in hash)
          str = num >= (byte) 16 ? str + num.ToString("x") : str + "0" + num.ToString("x");
        return str;
      }
      catch
      {
        throw;
      }
    }
  }
}
