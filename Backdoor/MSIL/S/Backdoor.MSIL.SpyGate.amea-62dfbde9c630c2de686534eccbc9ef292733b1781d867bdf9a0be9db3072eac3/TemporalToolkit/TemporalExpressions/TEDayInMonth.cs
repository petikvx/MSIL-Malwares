// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEDayInMonth
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;
using System.Runtime.InteropServices;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEDayInMonth : TemporalExpression
  {
    public int Start { get; set; }

    public int? End { get; set; }

    public TEDayInMonth(DateTime date)
    {
      this.Start = date.Day;
      this.End = new int?();
    }

    public TEDayInMonth(int day)
    {
      this.Start = day;
      this.End = new int?();
    }

    public TEDayInMonth(int start, int end)
    {
label_1:
      int num1 = 910763604;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1820440982)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1058226155 ^ 108038112;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.Start = start;
      this.End = new int?(end);
    }

    public override bool Includes(DateTime aDate)
    {
      int? end = this.End;
label_1:
      int num1 = -693815882;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -877068243)) % 17U)
        {
          case 0:
            int start = this.Start;
            end = this.End;
            int num4 = end.Value;
            flag2 = start > num4;
            num1 = (int) num2 * 122991648 ^ -971470225;
            continue;
          case 1:
            num1 = (int) num2 * 1233010056 ^ -1548972297;
            continue;
          case 2:
            flag3 = DateTime.DaysInMonth(aDate.Year, aDate.Month) + this.Start + 1 == aDate.Day;
            num1 = -1316919978;
            continue;
          case 3:
            num1 = (int) num2 * 1104404805 ^ 1334142595;
            continue;
          case 4:
            goto label_6;
          case 5:
            num1 = -1977382200;
            continue;
          case 7:
            flag3 = aDate.Day == this.Start;
            num1 = (int) num2 * 1981810103 ^ 844583138;
            continue;
          case 8:
            int num5 = this.Start <= 0 ? -1196775214 : (num5 = -389648962);
            num1 = num5 ^ (int) num2 * 1813693843;
            continue;
          case 9:
            flag1 = flag3;
            num1 = -17718974;
            continue;
          case 10:
            int num6 = end.HasValue ? -1484396045 : (num6 = -330109883);
            num1 = num6 ^ (int) num2 * -943677293;
            continue;
          case 11:
            num1 = -419008242;
            continue;
          case 12:
            int num7 = !flag2 ? 605931152 : (num7 = 729032989);
            num1 = num7 ^ (int) num2 * -1920909252;
            continue;
          case 13:
            num1 = (int) num2 * -1239487666 ^ 1874529360;
            continue;
          case 14:
            if (aDate.Day >= this.Start)
            {
              num1 = -1774895818;
              continue;
            }
            num3 = 0;
            break;
          case 15:
            int day = aDate.Day;
            end = this.End;
            int num8 = end.Value;
            num3 = day <= num8 ? 1 : 0;
            break;
          case 16:
            goto label_1;
          default:
            goto label_21;
        }
        flag3 = num3 != 0;
        num1 = -1188134778;
      }
label_6:
      throw TEDayInMonth.\u206E‭‍‭‭‭⁭⁯‬​‎⁬⁮⁯‬​‪‎⁯‎​⁫​‍⁯⁬⁭‌⁬⁮‪⁪⁪‮‎‎⁯‪‍‭‮(\u003CModule\u003E.\u206C‮⁬⁭​⁭‬⁫‌⁯‬⁪‫⁯​‎⁯⁬⁯‭‮⁪⁪‮‮⁮⁪‏⁮‪‎⁬‫‏⁭⁪‮⁫‮⁮‮<string>(2428426771U));
label_21:
      return flag1;
    }

    static ArgumentException \u206E‭‍‭‭‭⁭⁯‬​‎⁬⁮⁯‬​‪‎⁯‎​⁫​‍⁯⁬⁭‌⁬⁮‪⁪⁪‮‎‎⁯‪‍‭‮(
      [In] string obj0)
    {
      return new ArgumentException(obj0);
    }
  }
}
