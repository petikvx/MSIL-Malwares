// Decompiled with JetBrains decompiler
// Type: ABC_Bot.mod_hwid
// Assembly: ABC-Bot LITE, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E9E554F4-9AFA-414B-A1D5-AE64E23AD16E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00013-msil\Trojan-Ransom.Win32.PornoAsset.davi-d3bafcbbb2aacb297f2bd46e205cfb6b97d90b2a88fecf80d25ec75555856328.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Management;
using System.Security.Cryptography;
using System.Text;

namespace ABC_Bot
{
  [StandardModule]
  internal sealed class mod_hwid
  {
    internal static string GetProcessorId()
    {
label_0:
      int num1;
      string str;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string empty = string.Empty;
label_2:
        num3 = 3;
        SelectQuery query = new SelectQuery("Win32_processor");
label_3:
        num3 = 4;
        ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher((ObjectQuery) query);
label_4:
        num3 = 5;
        ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator();
        goto label_8;
label_6:
        num3 = 6;
        ManagementObject current;
        empty = current["processorId"].ToString();
label_7:
        num3 = 7;
label_8:
        if (enumerator.MoveNext())
        {
          current = (ManagementObject) enumerator.Current;
          goto label_6;
        }
        else
          enumerator?.Dispose();
label_11:
        str = empty;
        goto label_18;
label_13:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_11;
              case 9:
                goto label_18;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_13;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_18:
      string processorId = str;
      if (num2 == 0)
        return processorId;
      ProjectData.ClearProjectError();
      return processorId;
    }

    internal static string GetMACAddress()
    {
label_0:
      int num1;
      string str1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        ManagementClass managementClass = new ManagementClass("Win32_NetworkAdapterConfiguration");
label_2:
        num3 = 3;
        ManagementObjectCollection instances = managementClass.GetInstances();
label_3:
        num3 = 4;
        string str2 = string.Empty;
label_4:
        num3 = 5;
        ManagementObjectCollection.ManagementObjectEnumerator enumerator = instances.GetEnumerator();
        goto label_12;
label_6:
        num3 = 6;
        if (!str2.Equals(string.Empty))
          goto label_10;
label_7:
        num3 = 7;
        ManagementObject current;
        if (!Conversions.ToBoolean(current["IPEnabled"]))
          goto label_9;
label_8:
        num3 = 8;
        str2 = current["MacAddress"].ToString();
label_9:
        num3 = 10;
        current.Dispose();
label_10:
        num3 = 12;
        str2 = str2.Replace(":", string.Empty);
label_11:
        num3 = 13;
label_12:
        if (enumerator.MoveNext())
        {
          current = (ManagementObject) enumerator.Current;
          goto label_6;
        }
        else
          enumerator?.Dispose();
label_15:
        str1 = str2;
        goto label_22;
label_17:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_8;
              case 9:
              case 10:
                goto label_9;
              case 11:
              case 12:
                goto label_10;
              case 13:
                goto label_11;
              case 14:
                goto label_15;
              case 15:
                goto label_22;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_17;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_22:
      string macAddress = str1;
      if (num2 == 0)
        return macAddress;
      ProjectData.ClearProjectError();
      return macAddress;
    }

    internal static string GetVolumeSerial(string strDriveLetter = "C")
    {
label_0:
      int num1;
      string str;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        ManagementObject managementObject = new ManagementObject(string.Format("win32_logicaldisk.deviceid=\"{0}:\"", (object) strDriveLetter));
label_2:
        num3 = 3;
        managementObject.Get();
label_3:
        num3 = 4;
        str = managementObject["VolumeSerialNumber"].ToString();
        goto label_10;
label_5:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_10;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_5;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_10:
      string volumeSerial = str;
      if (num2 == 0)
        return volumeSerial;
      ProjectData.ClearProjectError();
      return volumeSerial;
    }

    internal static string GetMotherBoardID()
    {
label_0:
      int num1;
      string str;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string empty = string.Empty;
label_2:
        num3 = 3;
        SelectQuery query = new SelectQuery("Win32_BaseBoard");
label_3:
        num3 = 4;
        ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher((ObjectQuery) query);
label_4:
        num3 = 5;
        ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator();
        goto label_8;
label_6:
        num3 = 6;
        ManagementObject current;
        empty = current["SerialNumber"].ToString();
label_7:
        num3 = 7;
label_8:
        if (enumerator.MoveNext())
        {
          current = (ManagementObject) enumerator.Current;
          goto label_6;
        }
        else
          enumerator?.Dispose();
label_11:
        str = empty;
        goto label_18;
label_13:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_11;
              case 9:
                goto label_18;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_13;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_18:
      string motherBoardId = str;
      if (num2 == 0)
        return motherBoardId;
      ProjectData.ClearProjectError();
      return motherBoardId;
    }

    public static object hwid()
    {
label_0:
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string s = mod_hwid.GetProcessorId() + mod_hwid.GetMACAddress() + mod_hwid.GetMotherBoardID() + mod_hwid.GetVolumeSerial();
label_2:
        num3 = 3;
        MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
label_3:
        num3 = 4;
        string str = "";
label_4:
        num3 = 5;
        string Expression = "";
label_5:
        num3 = 6;
        byte[] bytes = Encoding.ASCII.GetBytes(s);
label_6:
        num3 = 7;
        byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
label_7:
        num3 = 8;
        int num4 = checked (hash.Length - 1);
        int index = 0;
        goto label_13;
label_8:
        num3 = 9;
        Expression = Conversion.Hex(hash[index]);
label_9:
        num3 = 10;
        if (Strings.Len(Expression) != 1)
          goto label_11;
label_10:
        num3 = 11;
        Expression = "0" + Expression;
label_11:
        num3 = 13;
        str += Expression;
label_12:
        num3 = 14;
        checked { ++index; }
label_13:
        if (index <= num4)
          goto label_8;
label_14:
        num3 = 15;
        if (!main.debug)
          goto label_16;
label_15:
        num3 = 16;
        int num5 = (int) Interaction.MsgBox((object) ("HardwareID: " + str));
label_16:
        obj1 = (object) str;
        goto label_23;
label_18:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num6 = num2 + 1;
            num2 = 0;
            switch (num6)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
              case 13:
                goto label_11;
              case 14:
                goto label_12;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
              case 18:
                goto label_16;
              case 19:
                goto label_23;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_18;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_23:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }
  }
}
