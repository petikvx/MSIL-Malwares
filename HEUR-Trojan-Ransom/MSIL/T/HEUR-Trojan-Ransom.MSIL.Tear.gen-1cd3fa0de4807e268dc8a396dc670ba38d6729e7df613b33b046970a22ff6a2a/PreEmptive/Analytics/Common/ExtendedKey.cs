// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.ExtendedKey
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;

namespace PreEmptive.Analytics.Common
{
  public class ExtendedKey
  {
    private const long a = 999999999999999999;
    private const long b = -999999999999999999;
    private string c;

    public string Key
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 8425;
        int num2 = num1;
        num1 = 8425;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 23138;
        int num2 = num1;
        num1 = 23138;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.c = value.Length > 2000 ? value.Substring(0, 2000) : value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Value
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 21695;
        int num2 = num1;
        num1 = 21695;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -17032;
        int num2 = num1;
        num1 = -17032;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool IsNumeric
    {
      get
      {
        int num1 = -32372;
        int num2 = num1;
        num1 = -32372;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.e;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 2845;
        int num2 = num1;
        num1 = 2845;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.e = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ExtendedKey(string key, string value)
    {
      this.Key = key;
      this.Value = value.Length > 4000 ? value.Substring(0, 4000) : value;
      this.IsNumeric = false;
    }

    public ExtendedKey(string key, int value)
    {
      this.Key = key;
      this.Value = value.ToString();
      this.IsNumeric = true;
    }

    public ExtendedKey(string key, long value)
    {
      this.Key = key;
      this.Value = value <= 999999999999999999L ? (value >= -999999999999999999L ? value.ToString() : -999999999999999999L.ToString()) : 999999999999999999L.ToString();
      this.IsNumeric = true;
    }

    public ExtendedKey(string key, float value)
    {
      this.Key = key;
      this.Value = this.a(value);
      this.IsNumeric = true;
    }

    public ExtendedKey(string key, double value)
    {
      this.Key = key;
      this.Value = this.a(value);
      this.IsNumeric = true;
    }

    public ExtendedKey(string key, Decimal value)
    {
      this.Key = key;
      this.Value = this.a(value);
      this.IsNumeric = true;
    }

    private string a(float A_0)
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
            switch (true ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                if (true)
                  ;
                if ((double) A_0 < -9.99999984306749E+17)
                {
                  num = 2;
                  continue;
                }
                goto label_13;
            }
          case 1:
            goto label_12;
          case 2:
            goto label_5;
          case 3:
label_1:
            switch (0)
            {
              case 0:
                break;
              default:
                continue;
            }
            break;
        }
        if ((double) A_0 > 9.99999984306749E+17)
        {
          num = 1;
        }
        else
        {
          if (false)
            ;
          num = 0;
        }
      }
label_5:
      return -999999999999999999L.ToString();
label_12:
      return 999999999999999999L.ToString();
label_13:
      return this.a((Decimal) A_0);
    }

    private string a(double A_0)
    {
      int num = 3;
      while (true)
      {
        if (false)
          ;
        switch (num)
        {
          case 0:
            switch (true ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                if (true)
                  ;
                if (A_0 < -1E+18)
                {
                  num = 2;
                  continue;
                }
                goto label_11;
            }
          case 1:
            goto label_10;
          case 2:
            goto label_5;
          case 3:
label_1:
            switch (0)
            {
              case 0:
                break;
              default:
                continue;
            }
            break;
        }
        num = A_0 <= 1E+18 ? 0 : 1;
      }
label_5:
      return -999999999999999999L.ToString();
label_10:
      return 999999999999999999L.ToString();
label_11:
      return this.a((Decimal) A_0);
    }

    private string a(Decimal A_0)
    {
      int A_1 = 19;
      switch (0)
      {
        default:
          int num1 = 10;
          string str1;
          while (true)
          {
            int num2;
            string str2;
            switch (num1)
            {
              case 0:
                str2 = str1.Substring(0, Math.Min(20, str1.Length));
                break;
              case 1:
                num2 = 1;
                if (num2 == 0)
                  ;
                if (A_0 < -999999999999999999M)
                {
                  num2 = 8;
                  num1 = num2;
                  continue;
                }
                str1 = Math.Round(A_0, 5).ToString();
                num2 = 6;
                num1 = num2;
                continue;
              case 2:
label_8:
                num2 = 4;
                num1 = num2;
                continue;
              case 3:
                if (!(A_0 < 0M))
                {
                  num2 = 2;
                  num1 = num2;
                  continue;
                }
                num2 = 0;
                num1 = num2;
                continue;
              case 4:
                str2 = str1.Substring(0, Math.Min(19, str1.Length));
                break;
              case 5:
                goto label_18;
              case 6:
                if (str1.Contains(Utils.a("\uE9C6", A_1)))
                {
                  num2 = 9;
                  num1 = num2;
                  continue;
                }
                goto label_25;
              case 7:
                goto label_25;
              case 8:
                goto label_24;
              case 9:
                num2 = 3;
                num1 = num2;
                continue;
              case 10:
                switch (0)
                {
                  case 0:
                    goto label_4;
                  default:
                    continue;
                }
              default:
label_4:
                if (A_0 > 999999999999999999M)
                {
                  num2 = -8025;
                  int num3 = num2;
                  num2 = -8025;
                  int num4 = num2;
                  switch (num3 == num4 ? 1 : 0)
                  {
                    case 0:
                    case 2:
                      goto label_8;
                    default:
                      num2 = 0;
                      if (num2 == 0)
                        ;
                      num2 = 5;
                      num1 = num2;
                      continue;
                  }
                }
                else
                {
                  num2 = 1;
                  num1 = num2;
                  continue;
                }
            }
            str1 = str2;
            num2 = 7;
            num1 = num2;
          }
label_18:
          return 999999999999999999L.ToString();
label_24:
          return -999999999999999999L.ToString();
label_25:
          return str1;
      }
    }
  }
}
