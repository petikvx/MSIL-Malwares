// Decompiled with JetBrains decompiler
// Type: Installer.CParams
// Assembly: Installer, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1758E6E6-4A2C-4F5D-B94B-6A8535362219
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00041-msil\Trojan-Ransom.MSIL.FakeInstaller.a-e5b6db4cf2671d40cdb3beb400d636bba3fd2f3b1f4f193696cf5e0df1a23b5c.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Text;

namespace Installer
{
  public class CParams
  {
    private bool m_default = true;
    private Dictionary<string, string> m_values;

    public bool isDefault
    {
      get => this.m_default;
      set => this.m_default = value;
    }

    public CParams() => this.m_values = new Dictionary<string, string>();

    public CParams(string p)
      : this()
    {
      p = this.LoadFromString(p);
    }

    private string LoadFromString(string p)
    {
      p = p.Trim();
      string str1 = p;
      char[] chArray = new char[1]{ '|' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (!(str2 == ""))
        {
          string str3 = str2.Trim().Split(new char[1]{ ':' }, 2)[0];
          string str4 = str2.Trim().Split(new char[1]{ ':' }, 2)[1];
          this.m_values.Add(str3.Trim(), str4.Trim());
        }
      }
      return p;
    }

    public void LoadFromFile(string file)
    {
      StreamReader streamReader = new StreamReader((Stream) File.Open(file, FileMode.Open), Encoding.Default);
      this.LoadFromString(streamReader.ReadToEnd());
      this.m_default = false;
      streamReader.Close();
    }

    public string caption
    {
      get => this.m_values.ContainsKey(nameof (caption)) ? this.m_values[nameof (caption)] : "Instalador";
      set
      {
        if (this.m_values.ContainsKey(nameof (caption)))
          this.m_values[nameof (caption)] = value;
        else
          this.m_values.Add(nameof (caption), value);
      }
    }

    public string confirmCloseCaption
    {
      get => this.m_values.ContainsKey(nameof (confirmCloseCaption)) ? this.m_values[nameof (confirmCloseCaption)] : this.caption;
      set
      {
        if (this.m_values.ContainsKey(nameof (confirmCloseCaption)))
          this.m_values[nameof (confirmCloseCaption)] = value;
        else
          this.m_values.Add(nameof (confirmCloseCaption), value);
      }
    }

    public string confirmCloseText
    {
      get => this.m_values.ContainsKey(nameof (confirmCloseText)) ? this.m_values[nameof (confirmCloseText)] : "¿Está seguro de que desea salir de la instalación?";
      set
      {
        if (this.m_values.ContainsKey(nameof (confirmCloseText)))
          this.m_values[nameof (confirmCloseText)] = value;
        else
          this.m_values.Add(nameof (confirmCloseText), value);
      }
    }

    public Point acceptLocation
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (acceptLocation)))
          return new Point(331, 328);
        string[] strArray = this.m_values[nameof (acceptLocation)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (acceptLocation)))
          this.m_values[nameof (acceptLocation)] = str;
        else
          this.m_values.Add(nameof (acceptLocation), str);
      }
    }

    public Size acceptSize
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (acceptSize)))
          return new Size(75, 23);
        string[] strArray = this.m_values[nameof (acceptSize)].Split(',');
        return new Size(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.Width.ToString() + "," + (object) value.Height;
        if (this.m_values.ContainsKey(nameof (acceptSize)))
          this.m_values[nameof (acceptSize)] = str;
        else
          this.m_values.Add(nameof (acceptSize), str);
      }
    }

    public string acceptCaption
    {
      get => this.m_values.ContainsKey(nameof (acceptCaption)) ? this.m_values[nameof (acceptCaption)] : "Siguiente >";
      set
      {
        if (this.m_values.ContainsKey(nameof (acceptCaption)))
          this.m_values[nameof (acceptCaption)] = value;
        else
          this.m_values.Add(nameof (acceptCaption), value);
      }
    }

    public Point cancelLocation
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (cancelLocation)))
          return new Point(412, 328);
        string[] strArray = this.m_values[nameof (cancelLocation)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (cancelLocation)))
          this.m_values[nameof (cancelLocation)] = str;
        else
          this.m_values.Add(nameof (cancelLocation), str);
      }
    }

    public Size cancelSize
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (cancelSize)))
          return new Size(75, 23);
        string[] strArray = this.m_values[nameof (cancelSize)].Split(',');
        return new Size(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.Width.ToString() + "," + (object) value.Height;
        if (this.m_values.ContainsKey(nameof (cancelSize)))
          this.m_values[nameof (cancelSize)] = str;
        else
          this.m_values.Add(nameof (cancelSize), str);
      }
    }

    public string cancelCaption
    {
      get => this.m_values.ContainsKey(nameof (cancelCaption)) ? this.m_values[nameof (cancelCaption)] : "Cancelar";
      set
      {
        if (this.m_values.ContainsKey(nameof (cancelCaption)))
          this.m_values[nameof (cancelCaption)] = value;
        else
          this.m_values.Add(nameof (cancelCaption), value);
      }
    }

    public Point textboxLocation
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (textboxLocation)))
          return new Point(170, 125);
        string[] strArray = this.m_values[nameof (textboxLocation)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (textboxLocation)))
          this.m_values[nameof (textboxLocation)] = str;
        else
          this.m_values.Add(nameof (textboxLocation), str);
      }
    }

    public Size textboxSize
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (textboxSize)))
          return new Size(123, 20);
        string[] strArray = this.m_values[nameof (textboxSize)].Split(',');
        return new Size(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.Width.ToString() + "," + (object) value.Height;
        if (this.m_values.ContainsKey(nameof (textboxSize)))
          this.m_values[nameof (textboxSize)] = str;
        else
          this.m_values.Add(nameof (textboxSize), str);
      }
    }

    public string programName
    {
      get => this.m_values.ContainsKey(nameof (programName)) ? this.m_values[nameof (programName)] : "Instalador";
      set
      {
        if (this.m_values.ContainsKey(nameof (programName)))
          this.m_values[nameof (programName)] = value;
        else
          this.m_values.Add(nameof (programName), value);
      }
    }

    public string wrongCodeCaption
    {
      get => this.m_values.ContainsKey(nameof (wrongCodeCaption)) ? this.m_values[nameof (wrongCodeCaption)] : "Código invalido";
      set
      {
        if (this.m_values.ContainsKey(nameof (wrongCodeCaption)))
          this.m_values[nameof (wrongCodeCaption)] = value;
        else
          this.m_values.Add(nameof (wrongCodeCaption), value);
      }
    }

    public string wrongCodeText
    {
      get => this.m_values.ContainsKey(nameof (wrongCodeText)) ? this.m_values[nameof (wrongCodeText)] : "El código introducido no es válido";
      set
      {
        if (this.m_values.ContainsKey(nameof (wrongCodeText)))
          this.m_values[nameof (wrongCodeText)] = value;
        else
          this.m_values.Add(nameof (wrongCodeText), value);
      }
    }

    public string errorConnectionCaption
    {
      get => this.m_values.ContainsKey(nameof (errorConnectionCaption)) ? this.m_values[nameof (errorConnectionCaption)] : "Error de conexión";
      set
      {
        if (this.m_values.ContainsKey(nameof (errorConnectionCaption)))
          this.m_values[nameof (errorConnectionCaption)] = value;
        else
          this.m_values.Add(nameof (errorConnectionCaption), value);
      }
    }

    public string errorConnectionText
    {
      get => this.m_values.ContainsKey(nameof (errorConnectionText)) ? this.m_values[nameof (errorConnectionText)] : "Imposible conectar con el servidor\nAsegurese que tiene conexión con internet\nIntentelo en unos instantes";
      set
      {
        if (this.m_values.ContainsKey(nameof (errorConnectionText)))
          this.m_values[nameof (errorConnectionText)] = value;
        else
          this.m_values.Add(nameof (errorConnectionText), value);
      }
    }

    public bool otherCountriesShow
    {
      get => !this.m_values.ContainsKey(nameof (otherCountriesShow)) || this.m_values[nameof (otherCountriesShow)] == "1";
      set
      {
        string str = value ? "1" : "0";
        if (this.m_values.ContainsKey(nameof (otherCountriesShow)))
          this.m_values[nameof (otherCountriesShow)] = str;
        else
          this.m_values.Add(nameof (otherCountriesShow), str);
      }
    }

    public Point otherCountriesLocation
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (otherCountriesLocation)))
          return new Point(331, 328);
        string[] strArray = this.m_values[nameof (otherCountriesLocation)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (otherCountriesLocation)))
          this.m_values[nameof (otherCountriesLocation)] = str;
        else
          this.m_values.Add(nameof (otherCountriesLocation), str);
      }
    }

    public string otherCountriesCaption
    {
      get => this.m_values.ContainsKey(nameof (otherCountriesCaption)) ? this.m_values[nameof (otherCountriesCaption)] : "Otros paises";
      set
      {
        if (this.m_values.ContainsKey(nameof (otherCountriesCaption)))
          this.m_values[nameof (otherCountriesCaption)] = value;
        else
          this.m_values.Add(nameof (otherCountriesCaption), value);
      }
    }

    public bool checkBoxShow
    {
      get => !this.m_values.ContainsKey(nameof (checkBoxShow)) || this.m_values[nameof (checkBoxShow)] == "True";
      set
      {
        string str = value ? "True" : "False";
        if (this.m_values.ContainsKey(nameof (checkBoxShow)))
          this.m_values[nameof (checkBoxShow)] = str;
        else
          this.m_values.Add(nameof (checkBoxShow), str);
      }
    }

    public Point checkBoxLocation
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (checkBoxLocation)))
          return new Point(336, 275);
        string[] strArray = this.m_values[nameof (checkBoxLocation)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (checkBoxLocation)))
          this.m_values[nameof (checkBoxLocation)] = str;
        else
          this.m_values.Add(nameof (checkBoxLocation), str);
      }
    }

    public string checkBoxText
    {
      get => this.m_values.ContainsKey(nameof (checkBoxText)) ? this.m_values[nameof (checkBoxText)] : "Actualización automática";
      set
      {
        if (this.m_values.ContainsKey(nameof (checkBoxText)))
          this.m_values[nameof (checkBoxText)] = value;
        else
          this.m_values.Add(nameof (checkBoxText), value);
      }
    }

    public string captionOtherCountries
    {
      get => this.m_values.ContainsKey(nameof (captionOtherCountries)) ? this.m_values[nameof (captionOtherCountries)] : "Instalador - Other countries";
      set
      {
        if (this.m_values.ContainsKey(nameof (captionOtherCountries)))
          this.m_values[nameof (captionOtherCountries)] = value;
        else
          this.m_values.Add(nameof (captionOtherCountries), value);
      }
    }

    public Point acceptLocationOtherCountries
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (acceptLocationOtherCountries)))
          return new Point(331, 328);
        string[] strArray = this.m_values[nameof (acceptLocationOtherCountries)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (acceptLocationOtherCountries)))
          this.m_values[nameof (acceptLocationOtherCountries)] = str;
        else
          this.m_values.Add(nameof (acceptLocationOtherCountries), str);
      }
    }

    public Size acceptSizeOtherCountries
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (acceptSizeOtherCountries)))
          return new Size(75, 23);
        string[] strArray = this.m_values[nameof (acceptSizeOtherCountries)].Split(',');
        return new Size(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.Width.ToString() + "," + (object) value.Height;
        if (this.m_values.ContainsKey(nameof (acceptSizeOtherCountries)))
          this.m_values[nameof (acceptSizeOtherCountries)] = str;
        else
          this.m_values.Add(nameof (acceptSizeOtherCountries), str);
      }
    }

    public Point cancelLocationOtherCountries
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (cancelLocationOtherCountries)))
          return new Point(412, 328);
        string[] strArray = this.m_values[nameof (cancelLocationOtherCountries)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (cancelLocationOtherCountries)))
          this.m_values[nameof (cancelLocationOtherCountries)] = str;
        else
          this.m_values.Add(nameof (cancelLocationOtherCountries), str);
      }
    }

    public Size cancelSizeOtherCountries
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (cancelSizeOtherCountries)))
          return new Size(75, 23);
        string[] strArray = this.m_values[nameof (cancelSizeOtherCountries)].Split(',');
        return new Size(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.Width.ToString() + "," + (object) value.Height;
        if (this.m_values.ContainsKey(nameof (cancelSizeOtherCountries)))
          this.m_values[nameof (cancelSizeOtherCountries)] = str;
        else
          this.m_values.Add(nameof (cancelSizeOtherCountries), str);
      }
    }

    public Point textboxLocationOtherCountries
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (textboxLocationOtherCountries)))
          return new Point(170, 125);
        string[] strArray = this.m_values[nameof (textboxLocationOtherCountries)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (textboxLocationOtherCountries)))
          this.m_values[nameof (textboxLocationOtherCountries)] = str;
        else
          this.m_values.Add(nameof (textboxLocationOtherCountries), str);
      }
    }

    public Size textboxSizeOtherCountries
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (textboxSizeOtherCountries)))
          return new Size(123, 20);
        string[] strArray = this.m_values[nameof (textboxSizeOtherCountries)].Split(',');
        return new Size(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.Width.ToString() + "," + (object) value.Height;
        if (this.m_values.ContainsKey(nameof (textboxSizeOtherCountries)))
          this.m_values[nameof (textboxSizeOtherCountries)] = str;
        else
          this.m_values.Add(nameof (textboxSizeOtherCountries), str);
      }
    }

    public bool otherCountriesShowOtherCountries
    {
      get => !this.m_values.ContainsKey(nameof (otherCountriesShowOtherCountries)) || this.m_values[nameof (otherCountriesShowOtherCountries)] == "1";
      set
      {
        string str = value ? "1" : "0";
        if (this.m_values.ContainsKey(nameof (otherCountriesShowOtherCountries)))
          this.m_values[nameof (otherCountriesShowOtherCountries)] = str;
        else
          this.m_values.Add(nameof (otherCountriesShowOtherCountries), str);
      }
    }

    public Point otherCountriesLocationOtherCountries
    {
      get
      {
        if (!this.m_values.ContainsKey(nameof (otherCountriesLocationOtherCountries)))
          return new Point(331, 328);
        string[] strArray = this.m_values[nameof (otherCountriesLocationOtherCountries)].Split(',');
        return new Point(int.Parse(strArray[0]), int.Parse(strArray[1]));
      }
      set
      {
        string str = value.X.ToString() + "," + (object) value.Y;
        if (this.m_values.ContainsKey(nameof (otherCountriesLocationOtherCountries)))
          this.m_values[nameof (otherCountriesLocationOtherCountries)] = str;
        else
          this.m_values.Add(nameof (otherCountriesLocationOtherCountries), str);
      }
    }

    public string otherCountriesCaptionOtherCountries
    {
      get => this.m_values.ContainsKey(nameof (otherCountriesCaptionOtherCountries)) ? this.m_values[nameof (otherCountriesCaptionOtherCountries)] : "Otros paises";
      set
      {
        if (this.m_values.ContainsKey(nameof (otherCountriesCaptionOtherCountries)))
          this.m_values[nameof (otherCountriesCaptionOtherCountries)] = value;
        else
          this.m_values.Add(nameof (otherCountriesCaptionOtherCountries), value);
      }
    }

    public override string ToString()
    {
      object[] objArray1 = new object[47]
      {
        (object) this.caption,
        (object) this.programName,
        (object) this.textboxLocation.X,
        (object) this.textboxLocation.Y,
        (object) this.textboxSize.Width,
        (object) this.textboxSize.Height,
        (object) this.acceptCaption,
        (object) this.acceptLocation.X,
        (object) this.acceptLocation.Y,
        (object) this.acceptSize.Width,
        (object) this.acceptSize.Height,
        (object) this.cancelCaption,
        (object) this.cancelLocation.X,
        (object) this.cancelLocation.Y,
        (object) this.cancelSize.Width,
        (object) this.cancelSize.Height,
        (object) this.confirmCloseCaption,
        (object) this.confirmCloseText,
        (object) this.wrongCodeCaption,
        (object) this.wrongCodeText,
        (object) this.errorConnectionCaption,
        (object) this.errorConnectionText,
        this.otherCountriesShow ? (object) "1" : (object) "0",
        (object) this.otherCountriesCaption,
        (object) this.otherCountriesLocation.X,
        (object) this.otherCountriesLocation.Y,
        (object) this.captionOtherCountries,
        (object) this.textboxLocationOtherCountries.X,
        (object) this.textboxLocationOtherCountries.Y,
        (object) this.textboxSizeOtherCountries.Width,
        (object) this.textboxSizeOtherCountries.Height,
        (object) this.acceptLocationOtherCountries.X,
        (object) this.acceptLocationOtherCountries.Y,
        (object) this.acceptSizeOtherCountries.Width,
        (object) this.acceptSizeOtherCountries.Height,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      };
      object[] objArray2 = objArray1;
      Point locationOtherCountries = this.cancelLocationOtherCountries;
      // ISSUE: variable of a boxed type
      __Boxed<int> x = (ValueType) locationOtherCountries.X;
      objArray2[35] = (object) x;
      object[] objArray3 = objArray1;
      locationOtherCountries = this.cancelLocationOtherCountries;
      // ISSUE: variable of a boxed type
      __Boxed<int> y = (ValueType) locationOtherCountries.Y;
      objArray3[36] = (object) y;
      object[] objArray4 = objArray1;
      Size sizeOtherCountries = this.cancelSizeOtherCountries;
      // ISSUE: variable of a boxed type
      __Boxed<int> width = (ValueType) sizeOtherCountries.Width;
      objArray4[37] = (object) width;
      object[] objArray5 = objArray1;
      sizeOtherCountries = this.cancelSizeOtherCountries;
      // ISSUE: variable of a boxed type
      __Boxed<int> height = (ValueType) sizeOtherCountries.Height;
      objArray5[38] = (object) height;
      objArray1[39] = this.otherCountriesShowOtherCountries ? (object) "1" : (object) "0";
      objArray1[40] = (object) this.otherCountriesCaptionOtherCountries;
      objArray1[41] = (object) this.otherCountriesLocationOtherCountries.X;
      objArray1[42] = (object) this.otherCountriesLocationOtherCountries.Y;
      objArray1[43] = this.checkBoxShow ? (object) "True" : (object) "False";
      objArray1[44] = (object) this.checkBoxLocation.X;
      objArray1[45] = (object) this.checkBoxLocation.Y;
      objArray1[46] = (object) this.checkBoxText;
      return string.Format("caption:{0}|\nprogramName:{1}|\ntextboxLocation:{2},{3}|\ntextboxSize:{4},{5}|\nacceptCaption:{6}|\nacceptLocation:{7},{8}|\nacceptSize:{9},{10}|\ncancelCaption:{11}|\ncancelLocation:{12},{13}|\ncancelSize:{14},{15}|\nconfirmCloseCaption:{16}|\nconfirmCloseText:{17}|\nwrongCodeCaption:{18}|\nwrongCodeText:{19}|\nerrorConnectionCaption:{20}|\nerrorConnectionText:{21}|\notherCountriesShow:{22}|\notherCountriesCaption:{23}|\notherCountriesLocation:{24},{25}|\ncaptionOtherCountries:{26}|\ntextboxLocationOtherCountries:{27},{28}|\ntextboxSizeOtherCountries:{29},{30}|\ncheckBoxShow:{43}|\ncheckBoxLocation:{44},{45}|\ncheckBoxText:{46}|\nacceptLocationOtherCountries:{31},{32}|\nacceptSizeOtherCountries:{33},{34}|\ncancelLocationOtherCountries:{35},{36}|\ncancelSizeOtherCountries:{37},{38}|\notherCountriesShowOtherCountries:{39}|\notherCountriesCaptionOtherCountries:{40}|\notherCountriesLocationOtherCountries:{41},{42}|\n", objArray1);
    }
  }
}
