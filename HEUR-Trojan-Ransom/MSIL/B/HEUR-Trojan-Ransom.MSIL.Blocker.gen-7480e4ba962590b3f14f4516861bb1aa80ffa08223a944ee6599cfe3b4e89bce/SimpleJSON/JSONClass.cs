// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: TimeSpanTok, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: ECAE311E-CE0C-4BF9-8C57-F98A452B360E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7480e4ba962590b3f14f4516861bb1aa80ffa08223a944ee6599cfe3b4e89bce.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1174131717;
        JSONNode jsonNode;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1845432972)) % 7U)
          {
            case 0:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = 274245136;
              continue;
            case 1:
              num1 = (int) num2 * 1856232735 ^ 717480497;
              continue;
            case 2:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * -1672419383 ^ 1977846073;
              continue;
            case 3:
              goto label_1;
            case 4:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -1200890551 ^ -2116992618;
              continue;
            case 6:
              int num3 = flag ? 1812330679 : (num3 = 1974754766);
              num1 = num3 ^ (int) num2 * -629020381;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return jsonNode;
      }
      set
      {
        bool flag = this.m_Dict.ContainsKey(aKey);
label_1:
        int num1 = -1113250013;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -981436330)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * -524150609 ^ -1322353409;
              continue;
            case 3:
              int num3 = !flag ? -2103133864 : (num3 = -1988681405);
              num1 = num3 ^ (int) num2 * -122155899;
              continue;
            case 4:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -336387483 ^ -1199954938;
              continue;
            case 5:
              this.m_Dict.Add(aKey, value);
              num1 = -290401701;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        if (aIndex < 0)
          goto label_4;
label_1:
        int num1 = -1877752995;
label_2:
        bool flag;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1351544298)) % 8U)
          {
            case 0:
              int num3 = flag ? 1483910824 : (num3 = 1724666559);
              num1 = num3 ^ (int) num2 * -1842932489;
              continue;
            case 1:
              jsonNode = (JSONNode) null;
              num1 = -851255469;
              continue;
            case 2:
              num1 = (int) num2 * 874627424 ^ 441198481;
              continue;
            case 3:
              goto label_3;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * 320713947 ^ 1185488726;
              continue;
            case 6:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -1924286597 ^ 628784430;
              continue;
            default:
              goto label_11;
          }
        }
label_3:
        int num4 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_5;
label_11:
        return jsonNode;
label_4:
        num4 = 1;
label_5:
        flag = num4 != 0;
        num1 = -1465171930;
        goto label_2;
      }
      set
      {
        if (aIndex < 0)
          goto label_5;
label_1:
        int num1 = 80231403;
label_2:
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 482029365)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_4;
            case 2:
              goto label_3;
            case 3:
              num1 = (int) num2 * -688693459 ^ -2118826468;
              continue;
            case 4:
              int num3 = !flag ? 1199532442 : (num3 = 975279779);
              num1 = num3 ^ (int) num2 * 742285774;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:
        return;
label_4:
        int num4 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_6;
label_5:
        num4 = 1;
label_6:
        flag = num4 != 0;
        num1 = 900859038;
        goto label_2;
      }
    }

    public override int Count => this.m_Dict.Count;

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = -423347465;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1833186501)) % 14U)
        {
          case 0:
            num1 = -1670280930;
            continue;
          case 1:
            num1 = (int) num2 * -1025614033 ^ -1685629506;
            continue;
          case 2:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * -1308445186 ^ 1600147844;
            continue;
          case 3:
            num1 = (int) num2 * 1217017061 ^ 333615278;
            continue;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          case 6:
            int num3 = !this.m_Dict.ContainsKey(aKey) ? 457586131 : (num3 = 1746903103);
            num1 = num3 ^ (int) num2 * -82585848;
            continue;
          case 7:
            num1 = (int) num2 * 1165053473 ^ -1329045989;
            continue;
          case 8:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = -207204514;
            continue;
          case 9:
            num1 = (int) num2 * 890623246 ^ 379171903;
            continue;
          case 10:
            this.m_Dict.Add(aKey, aItem);
            num1 = -1256500780;
            continue;
          case 11:
            int num4 = flag ? -967145756 : (num4 = -1805493561);
            num1 = num4 ^ (int) num2 * 47822852;
            continue;
          case 12:
            flag = !JSONClass.\u202A​​⁮‬‭⁬‎⁯⁪‪⁯⁬⁮⁮‪‪‪‮⁪‮⁫‮‏‌‏‌⁬‌‍⁯‪⁮⁬‪‫‬⁬‎‪‮(aKey);
            num1 = (int) num2 * -192898979 ^ 843331428;
            continue;
          case 13:
            num1 = (int) num2 * 262558801 ^ 2024644839;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = 166123039;
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 537919105)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -1885150560 ^ -1165071182;
            continue;
          case 1:
            jsonNode2 = jsonNode1;
            num1 = (int) num2 * 692253993 ^ -591752500;
            continue;
          case 2:
            flag = !this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * 1210171973 ^ -1797339466;
            continue;
          case 3:
            int num3 = flag ? -1593725333 : (num3 = -1601991683);
            num1 = num3 ^ (int) num2 * 249574645;
            continue;
          case 4:
            this.m_Dict.Remove(aKey);
            num1 = (int) num2 * 1327946781 ^ -1042697402;
            continue;
          case 5:
            jsonNode2 = (JSONNode) null;
            num1 = (int) num2 * -353296814 ^ 396834307;
            continue;
          case 6:
            num1 = (int) num2 * 1478029971 ^ -1582432330;
            continue;
          case 8:
            goto label_1;
          case 9:
            jsonNode1 = this.m_Dict[aKey];
            num1 = 562521809;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return jsonNode2;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -1494747402;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1058547996)) % 7U)
        {
          case 1:
            int num4 = !flag ? 1014191348 : (num4 = 1338427379);
            num1 = num4 ^ (int) num2 * 1306184205;
            continue;
          case 2:
            jsonNode = (JSONNode) null;
            num1 = -290279489;
            continue;
          case 3:
            if (aIndex < 0)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -973801997 ^ -1124735562;
            continue;
          case 4:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 5:
            goto label_1;
          case 6:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -96322346 ^ -1866453511;
            continue;
          default:
            goto label_11;
        }
        flag = num3 != 0;
        num1 = -1825174446;
      }
label_11:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode;
      try
      {
        jsonNode = (JSONNode) null;
      }
      catch
      {
label_3:
        int num1 = -751306139;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1010457908)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * -2054130374 ^ -1529745416;
              continue;
            case 2:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 2119859936 ^ 261201559;
              continue;
            default:
              goto label_7;
          }
        }
      }
label_7:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        JSONClass.\u003Cget_Childs\u003Ed__14 getChildsD14 = new JSONClass.\u003Cget_Childs\u003Ed__14(-2);
label_1:
        int num1 = -308153794;
        IEnumerable<JSONNode> childs;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2033504197)) % 3U)
          {
            case 1:
              getChildsD14.\u003C\u003E4__this = this;
              childs = (IEnumerable<JSONNode>) getChildsD14;
              num1 = (int) num2 * -1950099596 ^ 1255784590;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
      string str = "{";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_6:
        int num1 = enumerator.MoveNext() ? 1253872364 : (num1 = 208119942);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 927136535)) % 8U)
          {
            case 0:
              num1 = 1253872364;
              continue;
            case 2:
              goto label_6;
            case 3:
              current = enumerator.Current;
              num1 = 1540970520;
              continue;
            case 4:
              str = JSONClass.\u202A‬⁯⁭⁪⁮‮‍‎‭⁬‎⁪⁭⁭⁭‮​⁪‍‍‫‬‍‎‎‍‍‬​⁬⁫⁫‌⁭⁬‪‪‎⁬‮(new string[5]
              {
                str,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u202A⁫‪⁯‌‬⁮‎‎⁬‬‫‫‎⁮‫⁮‫⁮⁪⁫‎‌‪‍‮⁪⁮‌⁬⁫‎‬⁬‭⁫‪‏⁭⁯‮((object) current.Value)
              });
              num1 = 1292179065;
              continue;
            case 5:
              str = JSONClass.\u202A⁯⁭‫‎⁫⁬⁯⁪⁪‪‌‎‮‮⁫⁮‪‮‭‪‍⁫‏​‫‏⁭‪‭‮‎‫‪‭‏​⁫‭‎‮(str, ", ");
              num1 = (int) num2 * 1209172627 ^ -406445180;
              continue;
            case 6:
              num1 = (int) num2 * -1179031204 ^ -367049419;
              continue;
            case 7:
              int num3 = JSONClass.\u202C‍‭‭⁯‮⁯‮‪⁯⁫⁫⁭⁬​‍​⁮⁫⁯‎⁪‫‏‭⁬‬⁫⁭‎‍‭‬⁮‮⁯‌‫‌‬‮(str) > 2 ? -897039000 : (num3 = -850601247);
              num1 = num3 ^ (int) num2 * 448950790;
              continue;
            default:
              goto label_11;
          }
        }
      }
label_11:
      return JSONClass.\u202A⁯⁭‫‎⁫⁬⁯⁪⁪‪‌‎‮‮⁫⁮‪‮‭‪‍⁫‏​‫‏⁭‪‭‮‎‫‪‭‏​⁫‭‎‮(str, "}");
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_8:
        int num1 = enumerator.MoveNext() ? -1707413750 : (num1 = -2134671479);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -346431745)) % 9U)
          {
            case 0:
              int num3 = flag ? -1135253297 : (num3 = -742989252);
              num1 = num3 ^ (int) num2 * -1799571237;
              continue;
            case 1:
              num1 = (int) num2 * -1101209156 ^ -648926754;
              continue;
            case 2:
              goto label_8;
            case 4:
              num1 = -1707413750;
              continue;
            case 5:
              current = enumerator.Current;
              num1 = -797267461;
              continue;
            case 6:
              flag = JSONClass.\u202C‍‭‭⁯‮⁯‮‪⁯⁫⁫⁭⁬​‍​⁮⁫⁯‎⁪‫‏‭⁬‬⁫⁭‎‍‭‬⁮‮⁯‌‫‌‬‮(str1) > 3;
              num1 = (int) num2 * 485942599 ^ -1203521063;
              continue;
            case 7:
              str1 = JSONClass.\u202A⁯⁭‫‎⁫⁬⁯⁪⁪‪‌‎‮‮⁫⁮‪‮‭‪‍⁫‏​‫‏⁭‪‭‮‎‫‪‭‏​⁫‭‎‮(str1, ", ");
              num1 = (int) num2 * -647175414 ^ -817309639;
              continue;
            case 8:
              str1 = JSONClass.\u202E⁪‌⁪⁭‏‪⁪‎​‪‫‭​⁫‫​‎‎‫⁯‪​‌‌‫‫⁪‬‫⁭‬⁮‫‬⁫‫‫‍‪‮(str1, "\n", aPrefix, "   ");
              str1 = JSONClass.\u202A‬⁯⁭⁪⁮‮‍‎‭⁬‎⁪⁭⁭⁭‮​⁪‍‍‫‬‍‎‎‍‍‬​⁬⁫⁫‌⁭⁬‪‪‎⁬‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u202A⁯⁭‫‎⁫⁬⁯⁪⁪‪‌‎‮‮⁫⁮‪‮‭‪‍⁫‏​‫‏⁭‪‭‮‎‫‪‭‏​⁫‭‎‮(aPrefix, "   "))
              });
              num1 = -1542436889;
              continue;
            default:
              goto label_16;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_12:
        int num4 = -1327591784;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ -346431745)) % 3U)
          {
            case 1:
              num4 = (int) num5 * -2124155656 ^ 1468915435;
              continue;
            case 2:
              goto label_12;
            default:
              goto label_15;
          }
        }
label_15:;
      }
label_16:
      string str2 = JSONClass.\u202E⁪‌⁪⁭‏‪⁪‎​‪‫‭​⁫‫​‎‎‫⁯‪​‌‌‫‫⁪‬‫⁭‬⁮‫‬⁫‫‫‍‪‮(str1, "\n", aPrefix, "}");
label_17:
      int num6 = -1042326510;
      string str3;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -346431745)) % 4U)
        {
          case 0:
            num6 = (int) num7 * -1868920472 ^ -562065151;
            continue;
          case 1:
            str3 = str2;
            num6 = (int) num7 * -125883493 ^ 1065418028;
            continue;
          case 3:
            goto label_17;
          default:
            goto label_21;
        }
      }
label_21:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -2017131889;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2064096181)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            JSONClass.\u206E⁫⁫‭⁭⁮‎‍⁬⁫‮⁮⁫‏⁭‏⁪‏‌‬‏⁮‬‬⁫⁬⁮‌⁭⁪‏​‪⁬⁫​⁫‭‫⁯‮(aWriter, (byte) 2);
            num1 = (int) num2 * 1487299867 ^ 879404725;
            continue;
          case 3:
            JSONClass.\u206D‏⁭⁯⁪‭⁭‎⁬‏⁪‮⁬‭‌⁪​⁮‍⁮⁯⁮⁬⁬⁬‏⁬​‌⁫‌⁪‮​‍⁬⁪‍‪⁯‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -1871273764 ^ 654070638;
            continue;
          case 4:
            num1 = (int) num2 * -640550615 ^ 150151756;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_12:
        int num3 = !enumerator.MoveNext() ? -2050718134 : (num3 = -2058321761);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -2064096181)) % 9U)
          {
            case 0:
              goto label_12;
            case 1:
              JSONClass.\u202C⁯⁭‫‎‏⁭‎‌‪‬⁬‍‍‎⁮⁬‎⁭‍‭‭‌⁬‌‬‏‮⁭‫⁯‎⁮⁮‌⁭⁮⁪‬‭‮(aWriter, current);
              num3 = (int) num4 * 952133292 ^ 1302597057;
              continue;
            case 2:
              num3 = (int) num4 * 1425269812 ^ -906611217;
              continue;
            case 3:
              goto label_18;
            case 4:
              num3 = (int) num4 * -803473609 ^ -93805056;
              continue;
            case 5:
              num3 = (int) num4 * 547774902 ^ -1872033774;
              continue;
            case 6:
              current = enumerator.Current;
              num3 = -2073824835;
              continue;
            case 7:
              num3 = -2058321761;
              continue;
            case 8:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -703220268 ^ 1107569585;
              continue;
            default:
              goto label_10;
          }
        }
label_18:
        return;
label_10:;
      }
    }

    static bool \u202A​​⁮‬‭⁬‎⁯⁪‪⁯⁬⁮⁮‪‪‪‮⁪‮⁫‮‏‌‏‌⁬‌‍⁯‪⁮⁬‪‫‬⁬‎‪‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u202C‍‭‭⁯‮⁯‮‪⁯⁫⁫⁭⁬​‍​⁮⁫⁯‎⁪‫‏‭⁬‬⁫⁭‎‍‭‬⁮‮⁯‌‫‌‬‮([In] string obj0) => obj0.Length;

    static string \u202A⁯⁭‫‎⁫⁬⁯⁪⁪‪‌‎‮‮⁫⁮‪‮‭‪‍⁫‏​‫‏⁭‪‭‮‎‫‪‭‏​⁫‭‎‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202A⁫‪⁯‌‬⁮‎‎⁬‬‫‫‎⁮‫⁮‫⁮⁪⁫‎‌‪‍‮⁪⁮‌⁬⁫‎‬⁬‭⁫‪‏⁭⁯‮([In] object obj0) => obj0.ToString();

    static string \u202A‬⁯⁭⁪⁮‮‍‎‭⁬‎⁪⁭⁭⁭‮​⁪‍‍‫‬‍‎‎‍‍‬​⁬⁫⁫‌⁭⁬‪‪‎⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202E⁪‌⁪⁭‏‪⁪‎​‪‫‭​⁫‫​‎‎‫⁯‪​‌‌‫‫⁪‬‫⁭‬⁮‫‬⁫‫‫‍‪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206E⁫⁫‭⁭⁮‎‍⁬⁫‮⁮⁫‏⁭‏⁪‏‌‬‏⁮‬‬⁫⁬⁮‌⁭⁪‏​‪⁬⁫​⁫‭‫⁯‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206D‏⁭⁯⁪‭⁭‎⁬‏⁪‮⁬‭‌⁪​⁮‍⁮⁯⁮⁬⁬⁬‏⁬​‌⁫‌⁪‮​‍⁬⁪‍‪⁯‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202C⁯⁭‫‎‏⁭‎‌‪‬⁬‍‍‎⁮⁬‎⁭‍‭‭‌⁬‌‬‏‮⁭‫⁯‎⁮⁮‌⁭⁮⁪‬‭‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
