// Decompiled with JetBrains decompiler
// Type: ‪⁫‬‭⁮‏​⁭‪‪⁭⁮⁭‌‌‌​⁭‬⁬‏⁬‫​‫⁫⁮‮⁭​​⁬⁫⁬⁫‪‪⁮‬⁬‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u202A⁫‬‭⁮‏​⁭‪‪⁭⁮⁭‌‌‌​⁭‬⁬‏⁬‫​‫⁫⁮‮⁭​​⁬⁫⁬⁫‪‪⁮‬⁬‮ : 
  \u206E‬‮‪⁯‏⁮⁯‬​⁭⁯‫⁭‪⁮⁪⁪‍⁫‭⁯‍⁯‎‍‬​‎⁪⁭‎⁭‪⁫⁭‫⁮‫⁬‮
{
  private const byte \u206A‌⁪‬‬‌‎‮⁭⁫‌⁪⁮‍‍‭‮‫‮‮⁭‪‮‭⁫‍​‭‍⁭⁬‌‪‮‭⁪‮‪⁭‍‮ = 135;
  private const byte \u206B⁪⁪‌⁭‪⁭‎‮‬‍‭⁫‏‏⁭‫‫‫‫⁯⁮‌⁯⁮‭⁪⁮‮‏‎⁫⁯‮‎‏⁬​‎⁪‮ = 27;
  private byte[] \u206F‭⁬‌‏‭⁭‍⁫‮⁭⁬‮⁯‌‬⁯⁭‫⁫⁯⁫‮‫‎‍⁯⁯⁬‏‏‬‬⁭⁫‌⁬‎⁬‬‮;
  private byte[] \u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮;
  private byte[] \u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮;
  private int \u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮;
  private \u206F‮‪⁭⁮‮‏⁭⁮⁫‏‬‫‏‬‍‪‫⁯⁪‏⁫⁯‫⁫‮‪‮‌‌⁭‪‪‌⁮‫‭⁪⁭‪‮ \u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮;
  private int \u202D⁬‪‎​⁬‫‮⁫‫⁭‭‫‍‍‮‪⁭‭​​⁮‍‍⁬⁮​​⁪⁯‌⁫⁯‮⁮‍⁯⁮⁪‏‮;
  private byte[] \u200D⁭‫​‮‪‎‌⁬⁯⁫‌⁫‍‎⁬⁬‫‭⁪‭‪‏‎‬‮‬‎‎​‎‫⁪⁮‬‮‮​‎⁬‮;
  private byte[] \u200F‏‮⁯‮‪‎‍⁬⁯⁬‬‬‪⁪⁪‮⁫​‪‏‬⁮‫⁫‮⁮‌‌‍​‬‏⁮‪​⁪‬‏⁯‮;
  private byte[] \u206C‍⁮‮‎‬⁮⁮⁮‪‭‍‮​⁮‮‫⁭⁮⁫‍⁯⁮⁫‮‍⁯‏⁪⁮‏‮‭​⁭⁭‮⁭‌‪‮;

  public \u202A⁫‬‭⁮‏​⁭‪‪⁭⁮⁭‌‌‌​⁭‬⁬‏⁬‫​‫⁫⁮‮⁭​​⁬⁫⁬⁫‪‪⁮‬⁬‮(
    \u206F‮‪⁭⁮‮‏⁭⁮⁫‏‬‫‏‬‍‪‫⁯⁪‏⁫⁯‫⁫‮‪‮‌‌⁭‪‪‌⁮‫‭⁪⁭‪‮ _param1)
    : this(_param1, _param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮() * 8)
  {
  }

  public \u202A⁫‬‭⁮‏​⁭‪‪⁭⁮⁭‌‌‌​⁭‬⁬‏⁬‫​‫⁫⁮‮⁭​​⁬⁫⁬⁫‪‪⁮‬⁬‮(
    \u206F‮‪⁭⁮‮‏⁭⁮⁫‏‬‫‏‬‍‪‫⁯⁪‏⁫⁯‫⁫‮‪‮‌‌⁭‪‪‌⁮‫‭⁪⁭‪‮ _param1,
    int _param2)
  {
    if (_param2 % 8 != 0)
      throw new ArgumentException("MAC size must be multiple of 8");
    if (_param2 > _param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮() * 8)
      throw new ArgumentException("MAC size must be less or equal to " + (_param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮() * 8).ToString());
    this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮ = _param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮() == 8 || _param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮() == 16 ? (\u206F‮‪⁭⁮‮‏⁭⁮⁫‏‬‫‏‬‍‪‫⁯⁪‏⁫⁯‫⁫‮‪‮‌‌⁭‪‪‌⁮‫‭⁪⁭‪‮) new \u202A⁯⁯⁭⁪⁯‪‎‮‬‮⁮‍⁯‫‎⁫‪‪​⁭⁬‌⁯⁮‏‍⁪⁪‎‏⁫⁭⁯‮⁮⁭‏‏‍‮(_param1) : throw new ArgumentException("Block size must be either 64 or 128 bits");
    this.\u202D⁬‪‎​⁬‫‮⁫‫⁭‭‫‍‍‮‪⁭‭​​⁮‍‍⁬⁮​​⁪⁯‌⁫⁯‮⁮‍⁯⁮⁪‏‮ = _param2 / 8;
    this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮ = new byte[_param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮()];
    this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮ = new byte[_param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮()];
    this.\u206F‭⁬‌‏‭⁭‍⁫‮⁭⁬‮⁯‌‬⁯⁭‫⁫⁯⁫‮‫‎‍⁯⁯⁬‏‏‬‬⁭⁫‌⁬‎⁬‬‮ = new byte[_param1.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮()];
    this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
  }

  public string \u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ => this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮;

  private static int \u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(byte[] _param0, byte[] _param1)
  {
    int length = _param0.Length;
    uint num1 = 0;
    while (--length >= 0)
    {
      uint num2 = (uint) _param0[length];
      _param1[length] = (byte) (num2 << 1 | num1);
      num1 = num2 >> 7 & 1U;
    }
    return (int) num1;
  }

  private static byte[] \u206C‎⁪⁫​​‬‎‫‎​⁬‪⁫‪‬‏‮‪‫⁫‎‫‬‮⁭‍⁪​‬‏‮‮‮‫⁮‍‬‪⁬‮(byte[] _param0)
  {
    byte[] numArray = new byte[_param0.Length];
    int num1 = \u202A⁫‬‭⁮‏​⁭‪‪⁭⁮⁭‌‌‌​⁭‬⁬‏⁬‫​‫⁫⁮‮⁭​​⁬⁫⁬⁫‪‪⁮‬⁬‮.\u202B‭‪⁯‫‪⁯​‎‭⁮⁬⁬⁫‍⁯‍‌⁯‏‭‪‌‮‪‭‪‌⁬⁭‫⁫⁭⁪‌​‫‎‎‬‮(_param0, numArray);
    int num2 = _param0.Length == 16 ? 135 : 27;
    numArray[_param0.Length - 1] ^= (byte) (num2 >> (1 - num1 << 3));
    return numArray;
  }

  public void \u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(
    \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ _param1)
  {
    if (_param1 is \u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮)
    {
      this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(true, _param1);
      this.\u200D⁭‫​‮‪‎‌⁬⁯⁫‌⁫‍‎⁬⁬‫‭⁪‭‪‏‎‬‮‬‎‎​‎‫⁪⁮‬‮‮​‎⁬‮ = new byte[this.\u206F‭⁬‌‏‭⁭‍⁫‮⁭⁬‮⁯‌‬⁯⁭‫⁫⁯⁫‮‫‎‍⁯⁯⁬‏‏‬‬⁭⁫‌⁬‎⁬‬‮.Length];
      this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(this.\u206F‭⁬‌‏‭⁭‍⁫‮⁭⁬‮⁯‌‬⁯⁭‫⁫⁯⁫‮‫‎‍⁯⁯⁬‏‏‬‬⁭⁫‌⁬‎⁬‬‮, 0, this.\u200D⁭‫​‮‪‎‌⁬⁯⁫‌⁫‍‎⁬⁬‫‭⁪‭‪‏‎‬‮‬‎‎​‎‫⁪⁮‬‮‮​‎⁬‮, 0);
      this.\u200F‏‮⁯‮‪‎‍⁬⁯⁬‬‬‪⁪⁪‮⁫​‪‏‬⁮‫⁫‮⁮‌‌‍​‬‏⁮‪​⁪‬‏⁯‮ = \u202A⁫‬‭⁮‏​⁭‪‪⁭⁮⁭‌‌‌​⁭‬⁬‏⁬‫​‫⁫⁮‮⁭​​⁬⁫⁬⁫‪‪⁮‬⁬‮.\u206C‎⁪⁫​​‬‎‫‎​⁬‪⁫‪‬‏‮‪‫⁫‎‫‬‮⁭‍⁪​‬‏‮‮‮‫⁮‍‬‪⁬‮(this.\u200D⁭‫​‮‪‎‌⁬⁯⁫‌⁫‍‎⁬⁬‫‭⁪‭‪‏‎‬‮‬‎‎​‎‫⁪⁮‬‮‮​‎⁬‮);
      this.\u206C‍⁮‮‎‬⁮⁮⁮‪‭‍‮​⁮‮‫⁭⁮⁫‍⁯⁮⁫‮‍⁯‏⁪⁮‏‮‭​⁭⁭‮⁭‌‪‮ = \u202A⁫‬‭⁮‏​⁭‪‪⁭⁮⁭‌‌‌​⁭‬⁬‏⁬‫​‫⁫⁮‮⁭​​⁬⁫⁬⁫‪‪⁮‬⁬‮.\u206C‎⁪⁫​​‬‎‫‎​⁬‪⁫‪‬‏‮‪‫⁫‎‫‬‮⁭‍⁪​‬‏‮‮‮‫⁮‍‬‪⁬‮(this.\u200F‏‮⁯‮‪‎‍⁬⁯⁬‬‬‪⁪⁪‮⁫​‪‏‬⁮‫⁫‮⁮‌‌‍​‬‏⁮‪​⁪‬‏⁯‮);
    }
    else if (_param1 != null)
      throw new ArgumentException("CMac mode only permits key to be set.", "parameters");
    this.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
  }

  public int \u202D​⁮‍⁭⁫‍‌​‮⁫​​⁭⁯⁬⁪‫‬‭‪‫‭⁫⁬‫‭‬⁯‭⁮‎‍‫‌‎⁪⁭⁭‫‮() => this.\u202D⁬‪‎​⁬‫‮⁫‫⁭‭‫‍‍‮‪⁭‭​​⁮‍‍⁬⁮​​⁪⁯‌⁫⁯‮⁮‍⁯⁮⁪‏‮;

  public void \u200E‍⁬‍‮‍⁮⁮​‭‪⁫‬⁭​⁯‭⁯‪‬⁮‬‏​⁪⁫‎‮​⁬⁮‪‎‮⁭​‏⁯‬⁮‮(byte _param1)
  {
    if (this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ == this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮.Length)
    {
      this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
      this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
    }
    this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮[this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮++] = _param1;
  }

  public void \u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (_param3 < 0)
      throw new ArgumentException("Can't have a negative input length!");
    int num = this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
    int length = num - this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮;
    if (_param3 > length)
    {
      Array.Copy((Array) _param1, _param2, (Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮, length);
      this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
      this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
      _param3 -= length;
      _param2 += length;
      while (_param3 > num)
      {
        this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(_param1, _param2, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
        _param3 -= num;
        _param2 += num;
      }
    }
    Array.Copy((Array) _param1, _param2, (Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮, _param3);
    this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ += _param3;
  }

  public int \u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(byte[] _param1, int _param2)
  {
    byte[] numArray;
    if (this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ == this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮())
    {
      numArray = this.\u200F‏‮⁯‮‪‎‍⁬⁯⁬‬‬‪⁪⁪‮⁫​‪‏‬⁮‫⁫‮⁮‌‌‍​‬‏⁮‪​⁪‬‏⁯‮;
    }
    else
    {
      new \u202A‪⁯‬‬‮‪‎⁬​‌‍⁮⁪⁫⁫⁬‍​⁯‫‬⁮⁬‬⁯‌‬⁯‮‬⁯⁮‭‌‫‎⁭‮⁬‮().\u206F‭‭‎⁫⁯‫‎⁫‍‬‬‪‮​‬‪⁪‫⁪⁫‫‫‏‍⁭‮⁬‍​⁭‌‎‭​‬‪⁪‫‫‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮);
      numArray = this.\u206C‍⁮‮‎‬⁮⁮⁮‪‭‍‮​⁮‮‫⁭⁮⁫‍⁯⁮⁫‮‍⁯‏⁪⁮‏‮‭​⁭⁭‮⁭‌‪‮;
    }
    for (int index = 0; index < this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮.Length; ++index)
      this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮[index] ^= numArray[index];
    this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
    Array.Copy((Array) this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0, (Array) _param1, _param2, this.\u202D⁬‪‎​⁬‫‮⁫‫⁭‭‫‍‍‮‪⁭‭​​⁮‍‍⁬⁮​​⁪⁯‌⁫⁯‮⁮‍⁯⁮⁪‏‮);
    this.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
    return this.\u202D⁬‪‎​⁬‫‮⁫‫⁭‭‫‍‍‮‪⁭‭​​⁮‍‍⁬⁮​​⁪⁯‌⁫⁯‮⁮‍⁯⁮⁪‏‮;
  }

  public void \u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮()
  {
    Array.Clear((Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮.Length);
    this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
    this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
  }
}
