// Decompiled with JetBrains decompiler
// Type: Alero.Querying.FieldReference
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;

namespace Alero.Querying
{
  public class FieldReference : WherePart
  {
    private readonly QueryTable _table;
    private readonly string _fieldName;

    public FieldReference(QueryTable table, string fieldName)
    {
      this._table = table;
      this._fieldName = fieldName;
    }

    internal override void BuildSql(BuildSqlContext context)
    {
      context.Builder.Append(context.ResolveAlias(this._table));
      context.Builder.Append(".[");
      context.Builder.Append(this._fieldName);
      context.Builder.Append("]");
    }

    public QueryTable Table => this._table;

    public string FieldName => this._fieldName;

    public EqualsClause EqualTo(int value) => new EqualsClause((WherePart) this, (WherePart) new IntConstant(value));

    public EqualsClause EqualTo(string value) => new EqualsClause((WherePart) this, (WherePart) new StringConstant(value));

    public EqualsClause EqualTo(long value) => new EqualsClause((WherePart) this, (WherePart) new LongConstant(value));

    public EqualsClause EqualTo(bool value) => new EqualsClause((WherePart) this, (WherePart) new BoolConstant(value));

    public EqualsClause EqualTo(FieldReference field) => new EqualsClause((WherePart) this, (WherePart) field);

    public WherePart StartsWith(string name) => (WherePart) new StartsWithClause((WherePart) this, name);

    public WherePart LessThan(DateTime value) => (WherePart) new LessThanClause((WherePart) this, (WherePart) new DateTimeConstant(value));
  }
}
