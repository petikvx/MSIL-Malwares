// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 1m, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9A9758D8-D673-4760-AFDD-69A3D20C59FF
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.krdt-d2cd288694c5883ae6364f17a60ae3fe9619748d94946bbd3e1ff8ba566b1e0f.exe

using \u0001;
using \u0007;
using \u0008;
using \u000E;
using \u0020;
using System;
using System.Runtime.CompilerServices;

namespace \u000E
{
  internal class \u0001 : \u0002
  {
    private new static int \u0001;
    private new int \u0001;
    private short[] \u0001;
    private short[] \u0001;
    private new int \u0002;
    private new int \u0003;
    private new bool \u0001;
    private new int \u0004;
    private new int \u0005;
    private new int \u0006;
    private byte[] \u0001;
    private \u0026 \u0001;
    private new int \u0007;
    private new int \u0008;
    private new int \u0002;
    private new int \u0003;
    private new int \u0004;
    private byte[] \u0001;
    private new int \u0005;
    private new int \u0006;
    private new int \u0007;
    private \u0003 \u0001;
    private \u005D \u0001;
    private \u0010.\u0001 \u0001;
    [NonSerialized]
    internal static \u0013 \u007F;

    public \u0001(\u0003 _param1)
    {
      this.\u0001 = _param1;
      this.\u0001 = new \u005D(_param1);
      this.\u0001 = new \u0010.\u0001();
      this.\u0001 = new byte[65536];
      this.\u0001 = new short[32768];
      this.\u0001 = new short[32768];
      this.\u0004 = this.\u0005 = 1;
    }

    static \u0001()
    {
      \u0003.\u0001(typeof (\u000E.\u0001));
      \u000E.\u0001.\u0001 = 4096;
    }

    public void \u0001()
    {
      this.\u0001.\u0001();
      this.\u0001.\u0001();
      this.\u0004 = this.\u0005 = 1;
      this.\u0006 = 0;
      this.\u0005 = 0;
      this.\u0001 = false;
      this.\u0003 = 2;
      for (int index = 0; index < 32768; ++index)
        this.\u0001[index] = (short) 0;
      for (int index = 0; index < 32768; ++index)
        this.\u0001[index] = (short) 0;
    }

    public void \u0001() => this.\u0001.\u0001();

    [SpecialName]
    public int \u0002() => (int) this.\u0001.\u0001();

    [SpecialName]
    public int \u0003() => this.\u0005;

    [SpecialName]
    public \u0026 \u0004() => this.\u0001;

    [SpecialName]
    public void \u0001(\u0026 _param1) => this.\u0001 = _param1;

    public void \u0001(int _param1)
    {
      this.\u0003 = \u0002.\u0001[_param1];
      this.\u0008 = \u0002.\u0001[_param1];
      this.\u0002 = \u0002.\u0002[_param1];
      this.\u0007 = \u0002.\u0003[_param1];
      if (\u0002.\u0004[_param1] == this.\u0004)
        return;
      switch (this.\u0004)
      {
        case 0:
          if (this.\u0005 > this.\u0004)
          {
            this.\u0001.\u0001(this.\u0001, this.\u0004, this.\u0005 - this.\u0004, false);
            this.\u0004 = this.\u0005;
          }
          this.\u0005();
          break;
        case 1:
          if (this.\u0005 > this.\u0004)
          {
            this.\u0001.\u0001(this.\u0001, this.\u0004, this.\u0005 - this.\u0004, false);
            this.\u0004 = this.\u0005;
            break;
          }
          break;
        case 2:
          if (this.\u0001)
            this.\u0001.\u0004((int) this.\u0001[this.\u0005 - 1] & (int) byte.MaxValue);
          if (this.\u0005 > this.\u0004)
          {
            this.\u0001.\u0001(this.\u0001, this.\u0004, this.\u0005 - this.\u0004, false);
            this.\u0004 = this.\u0005;
          }
          this.\u0001 = false;
          this.\u0003 = 2;
          break;
      }
      this.\u0004 = \u0002.\u0004[_param1];
    }

    private void \u0005() => this.\u0001 = (int) this.\u0001[this.\u0005] << 5 ^ (int) this.\u0001[this.\u0005 + 1];

    private int \u0006()
    {
      int index = (this.\u0001 << 5 ^ (int) this.\u0001[this.\u0005 + 2]) & (int) short.MaxValue;
      short num;
      this.\u0001[this.\u0005 & (int) short.MaxValue] = num = this.\u0001[index];
      this.\u0001[index] = (short) this.\u0005;
      this.\u0001 = index;
      return (int) num & (int) ushort.MaxValue;
    }

    private void \u0007()
    {
      Array.Copy((Array) this.\u0001, 32768, (Array) this.\u0001, 0, 32768);
      this.\u0002 -= 32768;
      this.\u0005 -= 32768;
      this.\u0004 -= 32768;
      for (int index = 0; index < 32768; ++index)
      {
        int num = (int) this.\u0001[index] & (int) ushort.MaxValue;
        this.\u0001[index] = num >= 32768 ? (short) (num - 32768) : (short) 0;
      }
      for (int index = 0; index < 32768; ++index)
      {
        int num = (int) this.\u0001[index] & (int) ushort.MaxValue;
        this.\u0001[index] = num >= 32768 ? (short) (num - 32768) : (short) 0;
      }
    }

    public void \u0008()
    {
      if (this.\u0005 >= 65274)
        this.\u0007();
      int length;
      for (; this.\u0006 < 262 && this.\u0006 < this.\u0007; this.\u0006 += length)
      {
        length = 65536 - this.\u0006 - this.\u0005;
        if (length > this.\u0007 - this.\u0006)
          length = this.\u0007 - this.\u0006;
        Array.Copy((Array) this.\u0001, this.\u0006, (Array) this.\u0001, this.\u0005 + this.\u0006, length);
        this.\u0001.\u0001(this.\u0001, this.\u0006, length);
        this.\u0006 += length;
        this.\u0005 += length;
      }
      if (this.\u0006 < 3)
        return;
      this.\u0005();
    }

    private bool \u0001(int _param1)
    {
      int num1 = this.\u0007;
      int num2 = this.\u0002;
      short[] numArray = this.\u0001;
      int index1 = this.\u0005;
      int index2 = this.\u0005 + this.\u0003;
      int val1 = Math.Max(this.\u0003, 2);
      int num3 = Math.Max(this.\u0005 - 32506, 0);
      int num4 = this.\u0005 + 258 - 1;
      byte num5 = this.\u0001[index2 - 1];
      byte num6 = this.\u0001[index2];
      if (val1 >= this.\u0003)
        num1 >>= 2;
      if (num2 > this.\u0006)
        num2 = this.\u0006;
      do
      {
        if ((int) this.\u0001[_param1 + val1] == (int) num6 && (int) this.\u0001[_param1 + val1 - 1] == (int) num5 && (int) this.\u0001[_param1] == (int) this.\u0001[index1] && (int) this.\u0001[_param1 + 1] == (int) this.\u0001[index1 + 1])
        {
          int num7 = _param1 + 2;
          int num8 = index1 + 2;
          int num9;
          int num10;
          int num11;
          int num12;
          int num13;
          int num14;
          int num15;
          do
            ;
          while ((int) this.\u0001[++num8] == (int) this.\u0001[num9 = num7 + 1] && (int) this.\u0001[++num8] == (int) this.\u0001[num10 = num9 + 1] && (int) this.\u0001[++num8] == (int) this.\u0001[num11 = num10 + 1] && (int) this.\u0001[++num8] == (int) this.\u0001[num12 = num11 + 1] && (int) this.\u0001[++num8] == (int) this.\u0001[num13 = num12 + 1] && (int) this.\u0001[++num8] == (int) this.\u0001[num14 = num13 + 1] && (int) this.\u0001[++num8] == (int) this.\u0001[num15 = num14 + 1] && (int) this.\u0001[++num8] == (int) this.\u0001[num7 = num15 + 1] && num8 < num4);
          if (num8 > index2)
          {
            this.\u0002 = _param1;
            index2 = num8;
            val1 = num8 - this.\u0005;
            if (val1 < num2)
            {
              num5 = this.\u0001[index2 - 1];
              num6 = this.\u0001[index2];
            }
            else
              break;
          }
          index1 = this.\u0005;
        }
      }
      while ((_param1 = (int) numArray[_param1 & (int) short.MaxValue] & (int) ushort.MaxValue) > num3 && --num1 != 0);
      this.\u0003 = Math.Min(val1, this.\u0006);
      return this.\u0003 >= 3;
    }

    public void \u0001(byte[] _param1, int _param2, int _param3)
    {
      this.\u0001.\u0001(_param1, _param2, _param3);
      if (_param3 < 3)
        return;
      if (_param3 > 32506)
      {
        _param2 += _param3 - 32506;
        _param3 = 32506;
      }
      Array.Copy((Array) _param1, _param2, (Array) this.\u0001, this.\u0005, _param3);
      this.\u0005();
      --_param3;
      while (--_param3 > 0)
      {
        this.\u0006();
        ++this.\u0005;
      }
      this.\u0005 += 2;
      this.\u0004 = this.\u0005;
    }

    private bool \u0001(bool _param1, bool _param2)
    {
      if (!_param1 && this.\u0006 == 0)
        return false;
      this.\u0005 += this.\u0006;
      this.\u0006 = 0;
      int num = this.\u0005 - this.\u0004;
      if (num < \u0002.\u0012 && (this.\u0004 >= 32768 || num < 32506) && !_param1)
        return true;
      bool flag = _param2;
      if (num > \u0002.\u0012)
      {
        num = \u0002.\u0012;
        flag = false;
      }
      this.\u0001.\u0001(this.\u0001, this.\u0004, num, flag);
      this.\u0004 += num;
      return !flag;
    }

    private bool \u0001(bool _param1, bool _param2)
    {
      if (this.\u0006 < 262 && !_param1)
        return false;
      while (this.\u0006 >= 262 || _param1)
      {
        if (this.\u0006 == 0)
        {
          this.\u0001.\u0001(this.\u0001, this.\u0004, this.\u0005 - this.\u0004, _param2);
          this.\u0004 = this.\u0005;
          return false;
        }
        if (this.\u0005 > 65274)
          this.\u0007();
        int num;
        if (this.\u0006 >= 3 && (num = this.\u0006()) != 0 && this.\u0001 != \u0026.\u0002 && this.\u0005 - num <= 32506 && this.\u0001(num))
        {
          this.\u0001.\u0001(this.\u0005 - this.\u0002, this.\u0003);
          this.\u0006 -= this.\u0003;
          if (this.\u0003 <= this.\u0008 && this.\u0006 >= 3)
          {
            while (--this.\u0003 > 0)
            {
              ++this.\u0005;
              this.\u0006();
            }
            ++this.\u0005;
          }
          else
          {
            this.\u0005 += this.\u0003;
            if (this.\u0006 >= 2)
              this.\u0005();
          }
          this.\u0003 = 2;
        }
        else
        {
          this.\u0001.\u0004((int) this.\u0001[this.\u0005] & (int) byte.MaxValue);
          ++this.\u0005;
          --this.\u0006;
          if (this.\u0001.\u0002())
          {
            bool flag = _param2 && this.\u0006 == 0;
            this.\u0001.\u0001(this.\u0001, this.\u0004, this.\u0005 - this.\u0004, flag);
            this.\u0004 = this.\u0005;
            return !flag;
          }
        }
      }
      return true;
    }

    private bool \u0002(bool _param1, bool _param2)
    {
      if (this.\u0006 < 262 && !_param1)
        return false;
      while (this.\u0006 >= 262 || _param1)
      {
        if (this.\u0006 == 0)
        {
          if (this.\u0001)
            this.\u0001.\u0004((int) this.\u0001[this.\u0005 - 1] & (int) byte.MaxValue);
          this.\u0001 = false;
          this.\u0001.\u0001(this.\u0001, this.\u0004, this.\u0005 - this.\u0004, _param2);
          this.\u0004 = this.\u0005;
          return false;
        }
        if (this.\u0005 >= 65274)
          this.\u0007();
        int num1 = this.\u0002;
        int num2 = this.\u0003;
        if (this.\u0006 >= 3)
        {
          int num3 = this.\u0006();
          if (this.\u0001 != \u0026.\u0002 && num3 != 0 && this.\u0005 - num3 <= 32506 && this.\u0001(num3) && this.\u0003 <= 5 && (this.\u0001 == \u0026.\u0001 || this.\u0003 == 3 && this.\u0005 - this.\u0002 > \u000E.\u0001.\u0001))
            this.\u0003 = 2;
        }
        if (num2 >= 3 && this.\u0003 <= num2)
        {
          this.\u0001.\u0001(this.\u0005 - 1 - num1, num2);
          int num4 = num2 - 2;
          do
          {
            ++this.\u0005;
            --this.\u0006;
            if (this.\u0006 >= 3)
              this.\u0006();
          }
          while (--num4 > 0);
          ++this.\u0005;
          --this.\u0006;
          this.\u0001 = false;
          this.\u0003 = 2;
        }
        else
        {
          if (this.\u0001)
            this.\u0001.\u0004((int) this.\u0001[this.\u0005 - 1] & (int) byte.MaxValue);
          this.\u0001 = true;
          ++this.\u0005;
          --this.\u0006;
        }
        if (this.\u0001.\u0002())
        {
          int num5 = this.\u0005 - this.\u0004;
          if (this.\u0001)
            --num5;
          bool flag = _param2 && this.\u0006 == 0 && !this.\u0001;
          this.\u0001.\u0001(this.\u0001, this.\u0004, num5, flag);
          this.\u0004 += num5;
          return !flag;
        }
      }
      return true;
    }

    public bool \u0003(bool _param1, bool _param2)
    {
      bool flag1;
      do
      {
        this.\u0008();
        bool flag2 = _param1 && this.\u0006 == this.\u0007;
        switch (this.\u0004)
        {
          case 0:
            flag1 = this.\u0001(flag2, _param2);
            break;
          case 1:
            flag1 = this.\u0001(flag2, _param2);
            break;
          case 2:
            flag1 = this.\u0002(flag2, _param2);
            break;
          default:
            throw new InvalidOperationException(\u0002.\u0001(651273013, 1304045089, 1924234096));
        }
      }
      while (this.\u0001.\u0003() && flag1);
      return flag1;
    }

    public void \u0001(byte[] _param1, int _param2, int _param3)
    {
      if (this.\u0006 < this.\u0007)
        throw new InvalidOperationException(\u0002.\u0001(959695900, 1304045059, 1924234014));
      int num = _param2 + _param3;
      if (0 > _param2 || _param2 > num || num > _param1.Length)
        throw new ArgumentOutOfRangeException();
      this.\u0001 = _param1;
      this.\u0006 = _param2;
      this.\u0007 = num;
    }

    public bool \u0001() => this.\u0007 == this.\u0006;
  }
}
