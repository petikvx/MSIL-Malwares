// Decompiled with JetBrains decompiler
// Type: 715672977127.418950873144
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003073564145303;
using \u003398049663276;
using \u003463056308027;
using \u003521629421529;
using \u003708529027770;
using \u003715672977127;
using \u003720905794659;
using Microsoft.ProgramSynthesis.DslLibrary;
using Microsoft.ProgramSynthesis.DslLibrary.Dates;
using Microsoft.ProgramSynthesis.FormatParsing;
using Microsoft.ProgramSynthesis.FormatParsing.Dates;
using Microsoft.ProgramSynthesis.Utils;
using Microsoft.ProgramSynthesis.Utils.Interactive;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using System.Threading;

namespace \u003715672977127
{
  public class \u003418950873144 : \u003896586978368<\u003513888654302>
  {
    private static readonly Regex \u003345393901795 = new Regex("\\d", RegexOptions.Compiled);
    private static readonly Lazy<DateTimeFormatParserBuilder> \u003171725913152 = new Lazy<DateTimeFormatParserBuilder>(new Func<DateTimeFormatParserBuilder>(\u003418950873144.\u003775073288066), LazyThreadSafetyMode.ExecutionAndPublication);
    private static readonly Lazy<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>> \u003822346248675 = new Lazy<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>>(new Func<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>>(\u003513888654302.\u003266099870862.\u003020308307432.\u003957173559253), LazyThreadSafetyMode.ExecutionAndPublication);

    public \u003418950873144()
      : base(\u003547566135655.DateTime)
    {
    }

    public virtual \u003547566135655 \u003217171232893
    {
      get
      {
        List<\u003547566135655> list = this.\u003075871274016.SelectMany<\u003640858318621<\u003513888654302>, \u003513888654302>((Func<\u003640858318621<\u003513888654302>, IEnumerable<\u003513888654302>>) (_param1 => (IEnumerable<\u003513888654302>) _param1)).Select<\u003513888654302, \u003547566135655>((Func<\u003513888654302, \u003547566135655>) (_param1 => _param1.\u003675045363428)).Distinct<\u003547566135655>().ToList<\u003547566135655>();
        if (list.All<\u003547566135655>((Func<\u003547566135655, bool>) (_param1 => _param1 == \u003547566135655.Time)))
          return \u003547566135655.Time;
        return list.All<\u003547566135655>((Func<\u003547566135655, bool>) (_param1 => _param1 == \u003547566135655.Date)) ? \u003547566135655.Date : \u003547566135655.DateTime;
      }
    }

    public IEnumerable<\u003513888654302> \u003953727517004 => this.\u003075871274016.SelectMany<\u003640858318621<\u003513888654302>, \u003513888654302>((Func<\u003640858318621<\u003513888654302>, IEnumerable<\u003513888654302>>) (_param1 => (IEnumerable<\u003513888654302>) _param1));

    public bool \u003677979328390 => this.\u003953727517004.Any<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => _param1.\u003285820676843));

    public bool \u003780160262527 => this.\u003953727517004.Any<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => _param1.\u003151745816375));

    public bool \u003965734076178 => this.\u003677979328390 && this.\u003780160262527;

    public bool \u003950676948739 => this.\u003953727517004.Any<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => _param1.\u003958478973093));

    public bool \u003534640380945 => this.\u003953727517004.Any<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => _param1.\u003304209070870));

    public virtual bool \u003452908220854(\u003896586978368<\u003513888654302> _param1_1)
    {
      if (_param1_1 == this)
        return true;
      return _param1_1 != null && _param1_1 is \u003418950873144 obj && CollectionUtils.ConvertToHashSet<\u003513888654302>(obj.\u003075871274016.SelectMany<\u003640858318621<\u003513888654302>, \u003513888654302>((Func<\u003640858318621<\u003513888654302>, IEnumerable<\u003513888654302>>) (_param1_2 => (IEnumerable<\u003513888654302>) _param1_2))).SetEquals(this.\u003075871274016.SelectMany<\u003640858318621<\u003513888654302>, \u003513888654302>((Func<\u003640858318621<\u003513888654302>, IEnumerable<\u003513888654302>>) (_param1_3 => (IEnumerable<\u003513888654302>) _param1_3)));
    }

    private static bool \u003913841958649(string _param0)
    {
      string str1;
      string str2;
      _param0 = UnicodeUtils.UnquoteStringIfQuoted(_param0, ref str1, ref str2);
      List<char> list = _param0.Where<char>((Func<char, bool>) (_param1 => !char.IsDigit(_param1))).ToList<char>();
      if (list.Count != 1)
        return false;
      char ch = list.Single<char>();
      if (!\u003415651442941.\u003060133616807.Contains(ch.ToString()))
        return false;
      return _param0.Split(ch)[1].Length == 1;
    }

    protected override \u003640858318621<\u003513888654302> ProcessSample(
      string sample)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003418950873144.\u003013203585735 obj = (\u003418950873144.\u003013203585735) new \u003418950873144.\u003395871734480();
      // ISSUE: reference to a compiler-generated field
      ((\u003418950873144.\u003395871734480) obj).\u003938007441513 = sample;
      // ISSUE: reference to a compiler-generated field
      if (\u003418950873144.\u003913841958649(((\u003418950873144.\u003395871734480) obj).\u003938007441513))
      {
        this.\u003492451362301 = true;
        return (\u003640858318621<\u003513888654302>) null;
      }
      // ISSUE: reference to a compiler-generated field
      obj.\u003985311769128 = new Dictionary<string, string>();
      // ISSUE: reference to a compiler-generated field
      string str = ((\u003418950873144.\u003395871734480) obj).\u003938007441513;
      string key1;
      string key2;
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      ((\u003418950873144.\u003395871734480) obj).\u003938007441513 = UnicodeUtils.UnquoteStringIfQuoted(((\u003418950873144.\u003395871734480) obj).\u003938007441513, ref key1, ref key2);
      if (!string.IsNullOrEmpty(key1) && !string.IsNullOrEmpty(key2))
      {
        // ISSUE: reference to a compiler-generated field
        obj.\u003985311769128[key1] = string.Empty;
        // ISSUE: reference to a compiler-generated field
        obj.\u003985311769128[key2] = string.Empty;
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      List<DateTimeFormatMatch> list = EnumerableEx.Distinct<DateTimeFormatMatch, DateTimeFormat>(\u003418950873144.\u003662324765433.Parse(new StringRegion(((\u003418950873144.\u003395871734480) obj).\u003938007441513, Token.Tokens), (ParseConfig) null), (Func<DateTimeFormatMatch, DateTimeFormat>) (_param1 => _param1.DateTimeFormat)).Where<DateTimeFormatMatch>((Func<DateTimeFormatMatch, bool>) (_param1 => (long) ((Substring) _param1.ParsedRegion).Length == (long) ((Substring) _param1.ParsedRegion).S.Length)).Where<DateTimeFormatMatch>(new Func<DateTimeFormatMatch, bool>(obj.\u003841528284468)).ToList<DateTimeFormatMatch>();
      if (((IEnumerable<DateTimeFormatMatch>) list).Any<DateTimeFormatMatch>())
      {
        // ISSUE: reference to a compiler-generated method
        return \u003463967682737.\u003290065528177<\u003513888654302>(((IEnumerable<DateTimeFormatMatch>) list).Select<DateTimeFormatMatch, \u003513888654302>(new Func<DateTimeFormatMatch, \u003513888654302>(obj.\u003567688177593)));
      }
      IEnumerable<\u003513888654302> objs = this.\u003151141607508(str);
      return objs != null ? \u003463967682737.\u003290065528177<\u003513888654302>(objs) : (\u003640858318621<\u003513888654302>) null;
    }

    private IEnumerable<\u003513888654302> \u003151141607508(
      string _param1)
    {
      return !\u003418950873144.\u003345393901795.IsMatch(_param1) ? CollectionUtils.Yield<\u003513888654302>(new \u003513888654302(_param1)) : (IEnumerable<\u003513888654302>) null;
    }

    protected override void FinishImpl(long numSamples) => this.\u003923546956631 = this.\u003046595673668 > 0 && (double) this.\u003808985421630 < (double) numSamples * 0.1 && this.\u003918958449927 <= 0;

    private static DateTimeFormatParserBuilder \u003387821254304 => \u003418950873144.\u003171725913152.Value;

    private static FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion> \u003662324765433 => \u003418950873144.\u003822346248675.Value;

    public virtual long \u003762107700554 => (long) ((double) this.\u003808985421630 / 0.1);

    private static DateTimeFormatParserBuilder \u003775073288066()
    {
      DateTimeFormat dateTimeFormat1 = \u003418950873144.\u003191814710801("yy", (FormatAttributes) null);
      DateTimeFormat dateTimeFormat2 = \u003418950873144.\u003191814710801("yyyy", (FormatAttributes) null);
      DateTimeFormatParserBuilder formatParserBuilder1 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder1).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[2]
      {
        dateTimeFormat1,
        dateTimeFormat2
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) new DateTimeFormatParserBuilder()).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[2]
      {
        \u003418950873144.\u003191814710801("YY", (FormatAttributes) null),
        \u003418950873144.\u003191814710801("YYYY", (FormatAttributes) null)
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      DateTimeFormat dateTimeFormat3 = \u003418950873144.\u003191814710801("M", DateTimeFormatPart.AllowLeadingZerosFormatAttributes);
      DateTimeFormat dateTimeFormat4 = \u003418950873144.\u003191814710801("MMM", (FormatAttributes) null);
      DateTimeFormat dateTimeFormat5 = \u003418950873144.\u003191814710801("MMMM", (FormatAttributes) null);
      DateTimeFormatParserBuilder formatParserBuilder2 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder2).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[3]
      {
        dateTimeFormat3,
        dateTimeFormat5,
        dateTimeFormat4
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      DateTimeFormat dateTimeFormat6 = \u003418950873144.\u003191814710801("d", DateTimeFormatPart.AllowLeadingZerosFormatAttributes);
      DateTimeFormat dateTimeFormat7 = \u003418950873144.\u003191814710801("H", DateTimeFormatPart.AllowLeadingZerosAndDisallow24HourFormatAttributes);
      DateTimeFormat dateTimeFormat8 = \u003418950873144.\u003191814710801("h", DateTimeFormatPart.AllowLeadingZerosFormatAttributes);
      DateTimeFormatParserBuilder formatParserBuilder3 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder3).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[2]
      {
        dateTimeFormat7,
        dateTimeFormat8
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      DateTimeFormat dateTimeFormat9 = \u003418950873144.\u003191814710801("m", DateTimeFormatPart.AllowLeadingZerosFormatAttributes);
      DateTimeFormatParserBuilder formatParserBuilder4 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder4).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[4]
      {
        \u003418950873144.\u003191814710801("tt", (FormatAttributes) null),
        \u003418950873144.\u003191814710801("tt", new FormatAttributes((IReadOnlyDictionary<string, string>) new Dictionary<string, string>()
        {
          ["casing"] = "lower"
        })),
        \u003418950873144.\u003191814710801("t", (FormatAttributes) null),
        \u003418950873144.\u003191814710801("t", new FormatAttributes((IReadOnlyDictionary<string, string>) new Dictionary<string, string>()
        {
          ["casing"] = "lower"
        }))
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      DateTimeFormat dateTimeFormat10 = \u003418950873144.\u003191814710801("s", DateTimeFormatPart.AllowLeadingZerosFormatAttributes);
      DateTimeFormatParserBuilder formatParserBuilder5 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder5).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[3]
      {
        \u003418950873144.\u003191814710801("f", (FormatAttributes) null),
        \u003418950873144.\u003191814710801("ff", (FormatAttributes) null),
        \u003418950873144.\u003191814710801("fff", (FormatAttributes) null)
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      DateTimeFormatParserBuilder formatParserBuilder6 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder6).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[2]
      {
        \u003418950873144.\u003191814710801("ddd", (FormatAttributes) null),
        \u003418950873144.\u003191814710801("dddd", (FormatAttributes) null)
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) new DateTimeFormatParserBuilder()).AppendUnion((IEnumerable<DateTimeFormat>) new DateTimeFormat[2]
      {
        \u003418950873144.\u003191814710801("MMM", (FormatAttributes) null),
        \u003418950873144.\u003191814710801("MMMM", (FormatAttributes) null)
      }, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      DateTimeFormatParserBuilder formatParserBuilder7 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder6, "day_of_week_1", (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 0, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).AppendSpacer("day_of_week_1_delimiter", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).AssertDirectionalConstraint("day_of_week_1_delimiter", (Func<DateTimeFormatMatch, IReadOnlyList<Optional<DateTimeFormatMatch>>, bool>) ((_param1, _param2) =>
      {
        Optional<DateTimeFormatMatch> optional = _param2[0];
        return !optional.HasValue || ((Substring) optional.Value.Region).Length == 0U ? ((Substring) _param1.Region).Length == 0U : ((Substring) _param1.Region).Length > 0U;
      }), new string[1]{ "day_of_week_1" });
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder1, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, true, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).AppendSpacer("date_delimiter_1", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder2, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, true, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).AppendSpacer("date_delimiter_2", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).Append(dateTimeFormat6, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, true, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).AssertGroupConstraint((Func<int, DateTimeFormatMatch, IReadOnlyList<Optional<DateTimeFormatMatch>>, bool>) ((_param1, _param2, _param3) => DateTimeSpacerFormatParser.SpacerCompatibilityChecker(_param2, _param3[1 - _param1].Value)), new string[2]
      {
        "date_delimiter_1",
        "date_delimiter_2"
      });
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).AppendSpacer("day_of_week_2_delimiter", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder6, "day_of_week_2", (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 0, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7).AssertDirectionalConstraint("day_of_week_2", (Func<DateTimeFormatMatch, IReadOnlyList<Optional<DateTimeFormatMatch>>, bool>) ((_param1, _param2) =>
      {
        Optional<DateTimeFormatMatch> optional = _param2[0];
        return !optional.HasValue || ((Substring) optional.Value.Region).Length <= 0U;
      }), new string[1]{ "day_of_week_1" });
      DateTimeFormatParserBuilder formatParserBuilder8 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder8).Append(dateTimeFormat10, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder8).AppendSpacer("seconds_milliseconds_delimiter", new DateTimeSpacerFormatParser(true, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder8).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder5, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 0, 1);
      DateTimeFormatParserBuilder formatParserBuilder9 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder3, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).AppendSpacer("time_delimiter_1", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).Append(dateTimeFormat9, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 1, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).AppendSpacer("time_delimiter_2", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder8, "seconds_milliseconds_builder", (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 0, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).AppendSpacer("time_delimiter_before_period", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder4, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, false, 0, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9).AssertGroupConstraint((Func<int, DateTimeFormatMatch, IReadOnlyList<Optional<DateTimeFormatMatch>>, bool>) ((_param1, _param2, _param3) => DateTimeSpacerFormatParser.SpacerCompatibilityChecker(_param2, _param3[1 - _param1].Value)), new string[2]
      {
        "time_delimiter_1",
        "time_delimiter_2"
      });
      DateTimeFormatParserBuilder formatParserBuilder10 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder10).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder7, "date_builder", (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, true, 0, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder10).AppendSpacer("date_time_delimiter", new DateTimeSpacerFormatParser(false, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.DirectionalConstraint>) null, (IEnumerable<FormatParser<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion>.GroupConstraint>) null, 1, 1, new int?()), (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder10).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder9, "time_builder", (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) null, true, 0, 1);
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder10).AssertGroupConstraint((Func<int, DateTimeFormatMatch, IReadOnlyList<Optional<DateTimeFormatMatch>>, bool>) ((_param1, _param2, _param3) => ((Substring) _param3[1 - _param1].Value.Region).Length != 0U || ((Substring) _param2.Region).Length > 0U), new string[2]
      {
        "date_builder",
        "time_builder"
      });
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder10).AssertGroupConstraint((Func<int, DateTimeFormatMatch, IReadOnlyList<Optional<DateTimeFormatMatch>>, bool>) ((_param1, _param2, _param3) =>
      {
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: variable of a compiler-generated type
        \u003418950873144.\u003519974731100 obj = (\u003418950873144.\u003519974731100) new \u003418950873144.\u003013203585735();
        // ISSUE: reference to a compiler-generated field
        ((\u003418950873144.\u003013203585735) obj).\u003211457454586 = _param3;
        // ISSUE: reference to a compiler-generated method
        // ISSUE: reference to a compiler-generated method
        IEnumerable<DateTimeFormatMatch> source = (IEnumerable<DateTimeFormatMatch>) EnumerableEx.Memoize<DateTimeFormatMatch>(CollectionUtils.Append<DateTimeFormatMatch>(Enumerable.Range(0, _param1).Select<int, DateTimeFormatMatch>(new Func<int, DateTimeFormatMatch>(obj.\u003582060539501)), _param2).Concat<DateTimeFormatMatch>(Enumerable.Range(_param1 + 1, 4 - _param1 - 1).Select<int, DateTimeFormatMatch>(new Func<int, DateTimeFormatMatch>(obj.\u003455967038795))));
        return \u003418950873144.\u003127206659062((IReadOnlyList<DateTimeFormatMatch>) source.Take<DateTimeFormatMatch>(2).ToList<DateTimeFormatMatch>(), (IReadOnlyList<DateTimeFormatMatch>) source.Skip<DateTimeFormatMatch>(2).ToList<DateTimeFormatMatch>());
      }), new string[4]
      {
        "time_builder.time_delimiter_1",
        "time_builder.time_delimiter_2",
        "date_builder.date_delimiter_1",
        "date_builder.date_delimiter_2"
      });
      DateTimeFormatParserBuilder formatParserBuilder11 = new DateTimeFormatParserBuilder();
      ((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder11).Append((FormatParserBuilder<DateTimeFormat, DateTimeFormatMatch, PartialDateTime, StringRegion, DateTimeSpacerFormatParser>) formatParserBuilder10, (string) null, (Predicate<DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>>) (_param0 =>
      {
        if (!((FormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>) _param0).CumulativeParse.HasValue || ((Substring) ((FormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>) _param0).CumulativeParse.Value.ParsedRegion).Length == 0U)
          return false;
        DateTimeFormatMatch dateTimeFormatMatch = ((FormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>) _param0).CumulativeParse.Value;
        List<DateTimeFormatPart> list = ((IEnumerable<DateTimeFormatPart>) dateTimeFormatMatch.DateTimeFormat.FormatParts).Where<DateTimeFormatPart>((Func<DateTimeFormatPart, bool>) (_param1 => _param1.MinimumLength > 0)).ToList<DateTimeFormatPart>();
        return (list.Count < 1 || !(((IEnumerable<DateTimeFormatPart>) list).First<DateTimeFormatPart>() is NumericDateTimeFormatPart) || ((Substring) dateTimeFormatMatch.Region).Start <= 0U || !char.IsDigit(((Substring) dateTimeFormatMatch.Region).S[(int) ((Substring) dateTimeFormatMatch.Region).Start - 1])) && (list.Count <= 1 || !(((IEnumerable<DateTimeFormatPart>) list).Last<DateTimeFormatPart>() is NumericDateTimeFormatPart) || (long) ((Substring) dateTimeFormatMatch.Region).End >= (long) ((Substring) dateTimeFormatMatch.Region).S.Length || !char.IsDigit(((Substring) dateTimeFormatMatch.Region).S[(int) ((Substring) dateTimeFormatMatch.Region).End]));
      }), false, 1, 1);
      return formatParserBuilder11;
    }

    [CompilerGenerated]
    internal static bool \u003448652835151(
      DeltaFormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion> _param0)
    {
      if (!((FormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>) _param0).CumulativeParse.HasValue || ((Substring) ((FormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>) _param0).CumulativeParse.Value.ParsedRegion).Length == 0U)
        return false;
      DateTimeFormatMatch dateTimeFormatMatch = ((FormatMatchState<DateTimeFormatMatch, PartialDateTime, DateTimeFormat, StringRegion>) _param0).CumulativeParse.Value;
      List<DateTimeFormatPart> list = ((IEnumerable<DateTimeFormatPart>) dateTimeFormatMatch.DateTimeFormat.FormatParts).Where<DateTimeFormatPart>((Func<DateTimeFormatPart, bool>) (_param1 => _param1.MinimumLength > 0)).ToList<DateTimeFormatPart>();
      return (list.Count < 1 || !(((IEnumerable<DateTimeFormatPart>) list).First<DateTimeFormatPart>() is NumericDateTimeFormatPart) || ((Substring) dateTimeFormatMatch.Region).Start <= 0U || !char.IsDigit(((Substring) dateTimeFormatMatch.Region).S[(int) ((Substring) dateTimeFormatMatch.Region).Start - 1])) && (list.Count <= 1 || !(((IEnumerable<DateTimeFormatPart>) list).Last<DateTimeFormatPart>() is NumericDateTimeFormatPart) || (long) ((Substring) dateTimeFormatMatch.Region).End >= (long) ((Substring) dateTimeFormatMatch.Region).S.Length || !char.IsDigit(((Substring) dateTimeFormatMatch.Region).S[(int) ((Substring) dateTimeFormatMatch.Region).End]));
    }

    [CompilerGenerated]
    internal static DateTimeFormat \u003191814710801(
      string _param0,
      FormatAttributes _param1)
    {
      return new DateTimeFormat(new DateTimeFormatPart[1]
      {
        DateTimeFormatPart.Create(_param0, _param1)
      });
    }

    [CompilerGenerated]
    internal static bool \u003127206659062(
      IReadOnlyList<DateTimeFormatMatch> _param0,
      IReadOnlyList<DateTimeFormatMatch> _param1_1)
    {
      foreach (DateTimeFormatMatch dateTimeFormatMatch1 in ((IEnumerable<DateTimeFormatMatch>) _param1_1).Where<DateTimeFormatMatch>((Func<DateTimeFormatMatch, bool>) (_param1_3 => DateTimeFormatMatch.op_Inequality(_param1_3, (DateTimeFormatMatch) null))))
      {
        foreach (DateTimeFormatMatch dateTimeFormatMatch2 in ((IEnumerable<DateTimeFormatMatch>) _param0).Where<DateTimeFormatMatch>((Func<DateTimeFormatMatch, bool>) (_param1_2 => DateTimeFormatMatch.op_Inequality(_param1_2, (DateTimeFormatMatch) null))))
        {
          if ((!string.IsNullOrWhiteSpace(((Substring) dateTimeFormatMatch2.Region).Value) || !string.IsNullOrWhiteSpace(((Substring) dateTimeFormatMatch1.Region).Value)) && ((Substring) dateTimeFormatMatch2.Region).Value == ((Substring) dateTimeFormatMatch1.Region).Value)
            return false;
        }
      }
      return true;
    }
  }
}
