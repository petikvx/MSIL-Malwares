// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Wrappers.FacadeTemplateWrapper
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using ProjNet.Mocks;
using ProjNet.Pools;
using ProjNet.Roles;
using ProjNet.Rules;
using ProjNet.Shared;
using ProjNet.Visitors;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Importers;
using TYPELIBA.Listeners;
using TYPELIBA.Lists;
using TYPELIBA.Serialization;

namespace TYPELIBA.Wrappers
{
  public class FacadeTemplateWrapper : InstanceErrorPool
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public PrinterRefListener StartConfiguration(Listener init, Listener counter)
    {
      int num1 = 1;
      PrinterRefListener printerRefListener1;
      while (true)
      {
        int num2 = num1;
        PrinterRefListener printerRefListener2;
        while (true)
        {
          int num3;
          int num4;
          int num5;
          switch (num2)
          {
            case 0:
            case 2:
            case 5:
            case 6:
              goto label_10;
            case 1:
              if (!(init is Utils))
              {
                num3 = 0;
                goto label_24;
              }
              else
                goto label_2;
            case 3:
label_26:
              num4 = counter is Advisor ? 1 : 0;
              goto label_28;
            case 4:
              num3 = counter is RulesAccountCollection ? 1 : 0;
              goto label_24;
            case 7:
              num5 = counter is RulesAccountCollection ? 1 : 0;
              break;
            case 8:
              goto label_15;
            case 9:
              goto label_32;
            default:
              goto label_31;
          }
label_13:
          if (num5 != 0)
          {
            printerRefListener2 = FacadeTemplateWrapper.ExcludeConsumer((Advisor) init, (RulesAccountCollection) counter);
            num2 = 5;
            continue;
          }
          goto label_3;
label_24:
          if (num3 == 0)
          {
            if (!(init is RulesAccountCollection) || !(counter is Utils))
            {
              if (init is RulesAccountCollection)
              {
                int num6 = 3;
                num2 = FacadeTemplateWrapper.MoveDescriptor() ? num6 : num6;
                continue;
              }
              num4 = 0;
            }
            else
              goto label_19;
          }
          else
          {
            printerRefListener2 = FacadeTemplateWrapper.ResolveConsumer((Utils) init, (RulesAccountCollection) counter);
            if (!FacadeTemplateWrapper.MoveDescriptor())
            {
              num2 = 0;
              continue;
            }
            goto label_26;
          }
label_28:
          if (num4 == 0)
          {
            if (!(init is Advisor))
            {
              num5 = 0;
              goto label_13;
            }
            else
              goto label_17;
          }
          else
            goto label_15;
        }
label_2:
        num1 = 4;
        continue;
label_3:
        if (init is Utils && counter is Utils)
          printerRefListener2 = FacadeTemplateWrapper.DestroyConsumer(init as Utils, counter as Utils);
        else if (init is Advisor && counter is Advisor)
          printerRefListener2 = FacadeTemplateWrapper.RegisterConsumer((Advisor) init, (Advisor) counter);
        else if (init is RulesAccountCollection && counter is RulesAccountCollection)
          printerRefListener2 = this.CallConsumer(init as RulesAccountCollection, counter as RulesAccountCollection);
        else
          break;
label_10:
        printerRefListener1 = printerRefListener2;
        num1 = 9;
        continue;
label_15:
        printerRefListener2 = FacadeTemplateWrapper.PublishConsumer((RulesAccountCollection) init, (Advisor) counter);
        goto label_10;
label_17:
        num1 = 7;
        continue;
label_19:
        printerRefListener2 = FacadeTemplateWrapper.ChangeConsumer((RulesAccountCollection) init, (Utils) counter);
        goto label_10;
label_31:
        num1 = 8;
      }
      throw new NotSupportedException("No support for transforming between the two specified coordinate systems");
label_32:
      return printerRefListener1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void VisitConsumer(WriterMapSerializer info, ref List<PrinterRefListener> pred)
    {
      foreach (PrinterRefListener info1 in info.IncludeConsumer())
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
              case 5:
                goto label_11;
              case 1:
              case 3:
                if (!flag)
                {
                  pred.Add(info1);
                  if (FacadeTemplateWrapper.CalculateDescriptor())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto case 4;
                }
                else
                  goto label_7;
              case 4:
                flag = info1 is WriterMapSerializer;
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto case 1;
              default:
                goto label_10;
            }
          }
label_10:
          num1 = 0;
        }
label_7:
        FacadeTemplateWrapper.VisitConsumer(info1 as WriterMapSerializer, ref pred);
label_11:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static PrinterRefListener PublishConsumer(
      RulesAccountCollection config,
      Advisor col)
    {
      RepositoryProcess asset2 = FacadeTemplateWrapper.PatchConsumer(col);
      return (PrinterRefListener) new ParamConsumerAdapter((Listener) config, (Listener) col, (ConfigurationValueFlags) 1, asset2, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static PrinterRefListener ExcludeConsumer(
      Advisor param,
      RulesAccountCollection visitor)
    {
      RepositoryProcess state = FacadeTemplateWrapper.PatchConsumer(param).CreateState();
      return (PrinterRefListener) new ParamConsumerAdapter((Listener) param, (Listener) visitor, (ConfigurationValueFlags) 1, state, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static PrinterRefListener DestroyConsumer(Utils res, Utils result)
    {
      int num1 = 5;
      if (true)
        goto label_6;
label_1:
      WriterMapSerializer asset2;
      PrinterRefListener printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) res, (Listener) result, (ConfigurationValueFlags) 2, (RepositoryProcess) asset2, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
      int num2 = 6;
label_5:
      num1 = num2;
label_6:
      FacadeTemplateWrapper facadeTemplateWrapper;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            facadeTemplateWrapper = new FacadeTemplateWrapper();
            asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) res, (Listener) res.InterruptConfiguration()));
            num1 = 3;
            continue;
          case 2:
          case 3:
            goto label_4;
          case 4:
            goto label_1;
          case 5:
            asset2 = new WriterMapSerializer();
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 0;
          case 6:
            goto label_8;
          default:
            goto label_7;
        }
      }
label_4:
      asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) res.InterruptConfiguration(), (Listener) result.InterruptConfiguration()));
      asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) result.InterruptConfiguration(), (Listener) result));
      goto label_1;
label_7:
      num2 = 4;
      goto label_5;
label_8:
      return printerRefListener;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static PrinterRefListener ChangeConsumer(
      RulesAccountCollection v,
      Utils result)
    {
      int num1 = 6;
      RepositoryProcess asset2_1;
      PrinterRefListener printerRefListener;
      while (true)
      {
        int num2 = num1;
        bool flag;
        WriterMapSerializer asset2_2;
        FacadeTemplateWrapper facadeTemplateWrapper;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_9;
            case 1:
            case 2:
              goto label_4;
            case 3:
              asset2_2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) v, (Listener) result.InterruptConfiguration()));
              asset2_2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) result.InterruptConfiguration(), (Listener) result));
              printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) v, (Listener) result, (ConfigurationValueFlags) 2, (RepositoryProcess) asset2_2, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
              int num3 = 7;
              num2 = FacadeTemplateWrapper.MoveDescriptor() ? num3 : num3;
              continue;
            case 4:
              if (!flag)
              {
                asset2_2 = new WriterMapSerializer();
                facadeTemplateWrapper = new FacadeTemplateWrapper();
                num2 = 3;
                continue;
              }
              goto label_2;
            case 5:
            case 7:
              goto label_10;
            default:
              goto label_7;
          }
        }
label_2:
        asset2_1 = FacadeTemplateWrapper.InstantiateConsumer(result.IncludeConfiguration(), result.InterruptConfiguration().RemoveState().NewState(), result.CalcState());
        num1 = 1;
        continue;
label_7:
        num1 = 5;
        continue;
label_9:
        flag = v.CompareState((object) result.InterruptConfiguration());
        num1 = 4;
      }
label_4:
      printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) v, (Listener) result, (ConfigurationValueFlags) 2, asset2_1, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
label_10:
      return printerRefListener;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static PrinterRefListener ResolveConsumer(
      Utils key,
      RulesAccountCollection result)
    {
      int num1 = 0;
      PrinterRefListener printerRefListener;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_4;
            case 1:
            case 5:
              if (flag)
              {
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_3;
              }
              else
                goto label_6;
            case 2:
              goto label_10;
            case 3:
              goto label_5;
            case 4:
            case 6:
              goto label_3;
            case 7:
              goto label_11;
            default:
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_10;
          }
        }
label_3:
        WriterMapSerializer asset2;
        FacadeTemplateWrapper facadeTemplateWrapper;
        asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) key.InterruptConfiguration(), (Listener) result));
        printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) key, (Listener) result, (ConfigurationValueFlags) 2, (RepositoryProcess) asset2, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
        num1 = 7;
        continue;
label_4:
        flag = key.InterruptConfiguration().CompareState((object) result);
        num1 = 5;
        continue;
label_6:
        asset2 = new WriterMapSerializer();
label_10:
        facadeTemplateWrapper = new FacadeTemplateWrapper();
        asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) key, (Listener) key.InterruptConfiguration()));
        num1 = 6;
      }
label_5:
      RepositoryProcess state = FacadeTemplateWrapper.InstantiateConsumer(key.IncludeConfiguration(), key.InterruptConfiguration().RemoveState().NewState(), key.CalcState()).CreateState();
      printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) key, (Listener) result, (ConfigurationValueFlags) 2, state, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
label_11:
      return printerRefListener;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private PrinterRefListener CallConsumer(
      RulesAccountCollection def,
      RulesAccountCollection pol)
    {
      int num1 = 6;
      if (FacadeTemplateWrapper.CalculateDescriptor())
        goto label_5;
label_1:
      WriterMapSerializer asset2;
      FacadeTemplateWrapper facadeTemplateWrapper;
      Advisor advisor1;
      Advisor advisor2;
      asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) advisor1, (Listener) advisor2));
      asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) advisor2, (Listener) pol));
      PrinterRefListener printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) def, (Listener) pol, (ConfigurationValueFlags) 2, (RepositoryProcess) asset2, string.Empty, string.Empty, -1L, string.Empty, string.Empty);
      int num2 = 7;
label_4:
      num1 = num2;
label_5:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_3;
          case 1:
          case 4:
            goto label_7;
          case 2:
          case 3:
            goto label_2;
          case 5:
            goto label_1;
          case 6:
            flag = def.RemoveState().CompareState((object) pol.RemoveState());
            if (!FacadeTemplateWrapper.MoveDescriptor())
            {
              num1 = 4;
              continue;
            }
            goto label_11;
          case 7:
            goto label_11;
          default:
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto label_7;
        }
      }
label_2:
      asset2 = new WriterMapSerializer();
      asset2.IncludeConsumer().Add(facadeTemplateWrapper.StartConfiguration((Listener) def, (Listener) advisor1));
      num2 = 5;
      goto label_4;
label_3:
      Candidate candidate;
      advisor2 = candidate.FillObject(pol.RemoveState().Name + " Geocentric", pol.RemoveState(), InterpreterRule.ManageProcess(), def.CalculateState());
      goto label_2;
label_7:
      if (flag)
      {
        printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) def, (Listener) pol, (ConfigurationValueFlags) 1, (RepositoryProcess) new Proc(def, pol), string.Empty, string.Empty, -1L, string.Empty, string.Empty);
      }
      else
      {
        facadeTemplateWrapper = new FacadeTemplateWrapper();
        candidate = new Candidate();
        advisor1 = candidate.FillObject(def.RemoveState().Name + " Geocentric", def.RemoveState(), InterpreterRule.ManageProcess(), def.CalculateState());
        num2 = 0;
        goto label_4;
      }
label_11:
      return printerRefListener;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static PrinterRefListener RegisterConsumer(Advisor v, Advisor counter)
    {
      int num1 = 6;
      WriterMapSerializer asset2;
      PrinterRefListener printerRefListener;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
              if (v.RemoveState().PushState() != null)
              {
                if (true)
                {
                  num2 = 1;
                  continue;
                }
                goto case 3;
              }
              else
              {
                num3 = 0;
                goto label_8;
              }
            case 1:
label_6:
              num3 = !v.RemoveState().PushState().RevertProcess() ? 1 : 0;
              goto label_8;
            case 2:
            case 4:
              goto label_14;
            case 3:
            case 5:
label_3:
              break;
            case 6:
              goto label_13;
            case 7:
              goto label_18;
            default:
              goto label_12;
          }
label_4:
          if (counter.RemoveState().PushState() != null && !counter.RemoveState().PushState().RevertProcess())
          {
            asset2.IncludeConsumer().Add((PrinterRefListener) new ParamConsumerAdapter(v.RemoveState().PushState() == null || v.RemoveState().PushState().RevertProcess() ? (Listener) v : (Listener) AnnotationPropertyImporter.WGS84, (Listener) counter, (ConfigurationValueFlags) 2, new Queue(counter.RemoveState().PushState()).CreateState(), "", "", -1L, "", ""));
            if (true)
            {
              num2 = 2;
              continue;
            }
            goto label_6;
          }
          else
            goto label_15;
label_8:
          if (num3 != 0)
          {
            asset2.IncludeConsumer().Add((PrinterRefListener) new ParamConsumerAdapter(counter.RemoveState().PushState() == null || counter.RemoveState().PushState().RevertProcess() ? (Listener) counter : (Listener) AnnotationPropertyImporter.WGS84, (Listener) v, (ConfigurationValueFlags) 2, (RepositoryProcess) new Queue(v.RemoveState().PushState()), "", "", -1L, "", ""));
            goto label_3;
          }
          else
            goto label_4;
        }
label_12:
        num1 = 5;
        continue;
label_13:
        asset2 = new WriterMapSerializer();
        num1 = 0;
        continue;
label_14:
label_15:
        if (asset2.IncludeConsumer().Count != 1)
        {
          printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) v, (Listener) counter, (ConfigurationValueFlags) 3, (RepositoryProcess) asset2, "", "", -1L, "", "");
          num1 = 7;
        }
        else
          break;
      }
      printerRefListener = (PrinterRefListener) new ParamConsumerAdapter((Listener) v, (Listener) counter, (ConfigurationValueFlags) 3, asset2.IncludeConsumer()[0].ViewConfiguration(), "", "", -1L, "", "");
label_18:
      return printerRefListener;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static RepositoryProcess PatchConsumer(Advisor init)
    {
      int num1 = 0;
      RepositoryProcess repositoryProcess;
      while (true)
      {
        int num2 = num1;
        List<Interceptor> config;
        while (true)
        {
          switch (num2)
          {
            case 0:
              config = new List<Interceptor>(2);
              num2 = 4;
              continue;
            case 1:
            case 4:
              goto label_2;
            case 2:
            case 3:
              goto label_1;
            case 5:
              goto label_7;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 0;
          }
        }
label_1:
        config.Add(new Interceptor("semi_minor", init.RemoveState().NewState().ManageState()));
        repositoryProcess = (RepositoryProcess) new CodeTemplateWrapper(config);
        num1 = 5;
        continue;
label_2:
        config.Add(new Interceptor("semi_major", init.RemoveState().NewState().AddState()));
        goto label_1;
      }
label_7:
      return repositoryProcess;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static RepositoryProcess InstantiateConsumer(
      Factory info,
      Stub visitor,
      ExceptionRule dic)
    {
      int num1 = 7;
      RepositoryProcess repositoryProcess1;
      while (true)
      {
        string s;
        int num2;
        List<Interceptor> interceptorList;
        uint stringHash;
        RepositoryProcess repositoryProcess2;
        int infoZ;
        switch (num1)
        {
          case 0:
          case 5:
          case 10:
label_22:
            repositoryProcess1 = repositoryProcess2;
            num2 = 14;
            break;
          case 1:
          case 12:
            infoZ = 0;
            num2 = 13;
            break;
          case 2:
          case 3:
          case 6:
          case 8:
          case 9:
            goto label_21;
          case 4:
            if (stringHash != 3986553434U || !(s == "lambert_conic_conformal_(2sp)"))
              goto label_21;
            else
              goto label_20;
          case 7:
            interceptorList = new List<Interceptor>(info.CloneState());
            num1 = 12;
            continue;
          case 11:
            interceptorList.Add(new Interceptor("semi_major", visitor.AddState()));
            interceptorList.Add(new Interceptor("semi_minor", visitor.ManageState()));
            interceptorList.Add(new Interceptor("unit", dic.LogoutState()));
            repositoryProcess2 = (RepositoryProcess) null;
            s = info.InitConfiguration().ToLower(CultureInfo.InvariantCulture).Replace(' ', '_');
            // ISSUE: reference to a compiler-generated method
            stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(s);
            if (stringHash > 1033055774U)
            {
              if (stringHash <= 1452798200U)
              {
                if (stringHash == 1431470630U)
                {
                  if (!(s == "mercator_2sp"))
                    goto label_21;
                }
                else if (stringHash == 1452798200U)
                {
                  if (!(s == "mercator"))
                  {
                    num2 = 8;
                    break;
                  }
                }
                else
                  goto label_21;
              }
              else if (stringHash != 2862604809U)
              {
                if (stringHash == 3278977974U)
                {
                  if (s == "transverse_mercator")
                  {
                    repositoryProcess2 = (RepositoryProcess) new CustomerConsumerAdapter(interceptorList);
                    num2 = 5;
                    break;
                  }
                  goto label_21;
                }
                else
                {
                  num2 = 4;
                  break;
                }
              }
              else if (s == "krovak")
              {
                repositoryProcess2 = (RepositoryProcess) new WrapperConsumerAdapter(interceptorList);
                goto case 0;
              }
              else
              {
                num2 = 3;
                break;
              }
            }
            else if (stringHash > 635500119U)
            {
              if (stringHash != 731662293U)
              {
                if (stringHash == 782370278U)
                {
                  if (!(s == "albers"))
                    goto label_21;
                }
                else if (stringHash != 1033055774U || !(s == "albers_conic_equal_area"))
                  goto label_21;
                repositoryProcess2 = (RepositoryProcess) new ContainerErrorPool(interceptorList);
                num2 = 0;
                break;
              }
              if (!(s == "lambert_conformal_conic"))
              {
                num2 = 6;
                break;
              }
              goto label_20;
            }
            else if (stringHash != 518387999U)
            {
              if (stringHash == 635500119U)
              {
                if (!(s == "mercator_1sp"))
                  goto label_21;
              }
              else
              {
                num2 = 9;
                break;
              }
            }
            else if (s == "lambert_conformal_conic_2sp")
              goto label_20;
            else
              goto label_21;
            repositoryProcess2 = (RepositoryProcess) new AdvisorRefListener(interceptorList);
            goto case 0;
          case 13:
            for (; infoZ < info.CloneState(); ++infoZ)
              interceptorList.Add(info.VisitConfiguration(infoZ));
            if (true)
            {
              num1 = 11;
              continue;
            }
            goto label_42;
          case 14:
            goto label_42;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
        continue;
label_20:
        repositoryProcess2 = (RepositoryProcess) new ServerPropertyImporter(interceptorList);
        goto label_22;
      }
label_21:
      throw new NotSupportedException(string.Format("Projection {0} is not supported.", (object) info.InitConfiguration()));
label_42:
      return repositoryProcess1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public FacadeTemplateWrapper()
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool CalculateDescriptor() => true;

    internal static bool MoveDescriptor() => false;
  }
}
