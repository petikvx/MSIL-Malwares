// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: DESCUNI, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF116ADB-6018-4560-80A5-0C66813DC3F1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-4f6383c6ae7c88ff6ab189dc208b3f159d87b824011a697f438a218fc07fa3bb.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1442790528;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1940414709)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1851539361 ^ 2055624966;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 912572530;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1732052347)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 686541407 ^ 287609740;
            continue;
          case 1:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 66735008 ^ -1808395141;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -1273338474;
      float[] numArray;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -861469691)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -1277848658 ^ -323271916;
            continue;
          case 1:
            riskChances = numArray;
            num1 = (int) num2 * -126956513 ^ 843951220;
            continue;
          case 2:
            int num3 = !flag ? 1241309582 : (num3 = 136553745);
            num1 = num3 ^ (int) num2 * 1347324485;
            continue;
          case 3:
            numArray = new float[json.Count];
            num1 = (int) num2 * 1548272796 ^ 1115408709;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -867831186;
            continue;
          case 5:
            flag = aIndex < numArray.Length;
            num1 = -1927650057;
            continue;
          case 6:
            goto label_1;
          case 8:
            aIndex = 0;
            num1 = (int) num2 * 1364175070 ^ 1711556958;
            continue;
          case 9:
            ++aIndex;
            num1 = (int) num2 * 1446490161 ^ -1578414851;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -359020360;
      int aIndex1;
      bool flag1;
      int aIndex2;
      bool flag2;
      List<Card> cardList;
      int num2;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -567322652)) % 22U)
        {
          case 0:
            num1 = -1332980474;
            continue;
          case 1:
            num1 = (int) num3 * -747231680 ^ 509884211;
            continue;
          case 2:
            aIndex2 = 0;
            num1 = (int) num3 * 1674224170 ^ -382908342;
            continue;
          case 3:
            num2 = 0;
            num1 = (int) num3 * 412518023 ^ -164439190;
            continue;
          case 4:
            num1 = (int) num3 * -1036475249 ^ -900033971;
            continue;
          case 5:
            flag2 = aIndex2 < count;
            num1 = -1740386864;
            continue;
          case 6:
            num1 = -1128832375;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = -590672563;
            continue;
          case 9:
            flag1 = aIndex1 < maxImpact * 2;
            num1 = -437045218;
            continue;
          case 10:
            int num4 = !flag2 ? 901049856 : (num4 = 1340437852);
            num1 = num4 ^ (int) num3 * -912924547;
            continue;
          case 11:
            int num5;
            num1 = num5 = num2 >= jsonNode[aIndex1].AsInt ? -1692930151 : (num5 = -1114389442);
            continue;
          case 13:
            ++aIndex2;
            num1 = (int) num3 * -1733202421 ^ 380210328;
            continue;
          case 14:
            cardList = new List<Card>();
            num1 = (int) num3 * -793546921 ^ -1617573942;
            continue;
          case 15:
            bool flag3 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -841013997;
            continue;
          case 16:
            jsonNode = json[aIndex2];
            aIndex1 = 0;
            num1 = (int) num3 * -1678723213 ^ 2004334327;
            continue;
          case 17:
            ++num2;
            num1 = (int) num3 * -1903806122 ^ -1920355959;
            continue;
          case 18:
            array = cardList.ToArray();
            num1 = (int) num3 * -864311522 ^ -380018715;
            continue;
          case 19:
            ++aIndex1;
            num1 = (int) num3 * 1137871062 ^ -1079455985;
            continue;
          case 20:
            int num6 = !flag1 ? -258671353 : (num6 = -1199515802);
            num1 = num6 ^ (int) num3 * 138238889;
            continue;
          case 21:
            num1 = (int) num3 * -666562545 ^ 1708054923;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 826181710;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 667975816)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Rules.\u202C‬‪‏⁮‬‭‪‏‬⁮⁯⁮‫⁫⁮‪‫⁯‬‎‎‫⁭‏‭⁭⁭‏⁯​‌‭⁭​‭⁪‪⁬‪‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 44037632 ^ -1095981278;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
      int num1 = 0;
label_1:
      int num2 = -603210290;
      string str2;
      int index;
      Card[] cards;
      bool flag;
      Card card1;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -161999072)) % 16U)
        {
          case 0:
            int num4;
            num2 = num4 = index < cards.Length ? -73936622 : (num4 = -160553828);
            continue;
          case 1:
            str1 = Rules.\u206A‎‎‬⁭‪‎⁭‎‏‍‫‌⁬⁮‪‪⁫‎⁭⁭‏‪⁭‎‍‍‫⁬‪⁮⁪⁯‌⁫‮‎​‭⁮‮(str1, "\n\t");
            num1 = card1.Type;
            num2 = (int) num3 * -1469836912 ^ -1586579048;
            continue;
          case 2:
            card1 = cards[index];
            num2 = -1221525093;
            continue;
          case 4:
            flag = num1 != card1.Type;
            num2 = (int) num3 * -413081029 ^ -325165045;
            continue;
          case 5:
            goto label_1;
          case 6:
            index = 0;
            num2 = (int) num3 * -1571383558 ^ 12786801;
            continue;
          case 7:
            int num5 = !flag ? 1929450041 : (num5 = 865243371);
            num2 = num5 ^ (int) num3 * 305181495;
            continue;
          case 8:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202E⁭‮‌⁯‮‪⁭‏⁬‫‬⁯‌‮‮⁪⁯‎‫‫‌‎⁭⁭⁪⁪‮‬​‮‎⁫⁫⁮‪‪‍⁭‫‮((object) card2) : (string) null;
            str1 = Rules.\u200E⁪⁫‏​⁬⁬⁪​⁮‫⁮⁮‏⁬⁯‮‏⁮‭‭‏‌‎‎‏⁫⁮‮‎‬⁭⁭​⁯⁮‍⁭⁭⁮‮(str3, str4, " ");
            num2 = -548612033;
            continue;
          case 9:
            ++index;
            num2 = (int) num3 * -972742392 ^ -149843480;
            continue;
          case 10:
            num2 = (int) num3 * 257123805 ^ 1892978867;
            continue;
          case 11:
            num2 = (int) num3 * -664172821 ^ -242192963;
            continue;
          case 12:
            str2 = Rules.\u206A‎‎‬⁭‪‎⁭‎‏‍‫‌⁬⁮‪‪⁫‎⁭⁭‏‪⁭‎‍‍‫⁬‪⁮⁪⁯‌⁫‮‎​‭⁮‮(str1, "\n]");
            num2 = (int) num3 * -88077528 ^ 612958819;
            continue;
          case 13:
            num2 = (int) num3 * -298331264 ^ 1852485408;
            continue;
          case 14:
            cards = this.Cards;
            num2 = (int) num3 * -441861291 ^ 1925419696;
            continue;
          case 15:
            num2 = (int) num3 * -1622430212 ^ -866261011;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -538495664;
      string str1;
      string str2;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1545885111)) % 8U)
        {
          case 0:
            str2 = Rules.\u206A‎‎‬⁭‪‎⁭‎‏‍‫‌⁬⁮‪‪⁫‎⁭⁭‏‪⁭‎‍‍‫⁬‪⁮⁪⁯‌⁫‮‎​‭⁮‮(str1, " ]");
            num1 = (int) num2 * -1788710768 ^ 1268983410;
            continue;
          case 1:
            str1 = Rules.\u206A‎‎‬⁭‪‎⁭‎‏‍‫‌⁬⁮‪‪⁫‎⁭⁭‏‪⁭‎‍‍‫⁬‪⁮⁪⁯‌⁫‮‎​‭⁮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206D‬‮⁯‌‮‪‪‮⁮⁬‬⁬‪‪‌‪‎‮‮‏‪‫⁮⁮​‫‬‏‬​‪‫​⁯⁮‬‫⁪‭‮()));
            num1 = (int) num2 * -2035483383 ^ -768592001;
            continue;
          case 2:
            int num3 = !flag ? 517231565 : (num3 = 562565691);
            num1 = num3 ^ (int) num2 * -476357022;
            continue;
          case 4:
            flag = index < this.RiskChances.Length;
            num1 = -282713453;
            continue;
          case 5:
            goto label_1;
          case 6:
            str1 = Rules.\u200E⁪⁫‏​⁬⁬⁪​⁮‫⁮⁮‏⁬⁯‮‏⁮‭‭‏‌‎‎‏⁫⁮‮‎‬⁭⁭​⁯⁮‍⁭⁭⁮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206D‬‮⁯‌‮‪‪‮⁮⁬‬⁬‪‪‌‪‎‮‮‏‪‫⁮⁮​‫‬‏‬​‪‫​⁯⁮‬‫⁪‭‮()));
            ++index;
            num1 = -1433199803;
            continue;
          case 7:
            index = 1;
            num1 = (int) num2 * -1863090240 ^ 1038029061;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u202C‬‪‏⁮‬‭‪‏‬⁮⁯⁮‫⁫⁮‪‫⁯‬‎‎‫⁭‏‭⁭⁭‏⁯​‌‭⁭​‭⁪‪⁬‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206A‎‎‬⁭‪‎⁭‎‏‍‫‌⁬⁮‪‪⁫‎⁭⁭‏‪⁭‎‍‍‫⁬‪⁮⁪⁯‌⁫‮‎​‭⁮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202E⁭‮‌⁯‮‪⁭‏⁬‫‬⁯‌‮‮⁪⁯‎‫‫‌‎⁭⁭⁪⁪‮‬​‮‎⁫⁫⁮‪‪‍⁭‫‮([In] object obj0) => obj0.ToString();

    static string \u200E⁪⁫‏​⁬⁬⁪​⁮‫⁮⁮‏⁬⁯‮‏⁮‭‭‏‌‎‎‏⁫⁮‮‎‬⁭⁭​⁯⁮‍⁭⁭⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206D‬‮⁯‌‮‪‪‮⁮⁬‬⁬‪‪‌‪‎‮‮‏‪‫⁮⁮​‫‬‏‬​‪‫​⁯⁮‬‫⁪‭‮() => CultureInfo.InvariantCulture;
  }
}
