// Decompiled with JetBrains decompiler
// Type: ProjNet.Consumers.InfoRepositoryConsumer
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using TYPELIBA.Identifiers;

namespace ProjNet.Consumers
{
  internal class InfoRepositoryConsumer
  {
    private static bool broadcasterConsumer = false;
    private static Assembly m_ExpressionConsumer = typeof (InfoRepositoryConsumer).Assembly;
    private static uint[] _StructConsumer = new uint[64]
    {
      3614090360U,
      3905402710U,
      606105819U,
      3250441966U,
      4118548399U,
      1200080426U,
      2821735955U,
      4249261313U,
      1770035416U,
      2336552879U,
      4294925233U,
      2304563134U,
      1804603682U,
      4254626195U,
      2792965006U,
      1236535329U,
      4129170786U,
      3225465664U,
      643717713U,
      3921069994U,
      3593408605U,
      38016083U,
      3634488961U,
      3889429448U,
      568446438U,
      3275163606U,
      4107603335U,
      1163531501U,
      2850285829U,
      4243563512U,
      1735328473U,
      2368359562U,
      4294588738U,
      2272392833U,
      1839030562U,
      4259657740U,
      2763975236U,
      1272893353U,
      4139469664U,
      3200236656U,
      681279174U,
      3936430074U,
      3572445317U,
      76029189U,
      3654602809U,
      3873151461U,
      530742520U,
      3299628645U,
      4096336452U,
      1126891415U,
      2878612391U,
      4237533241U,
      1700485571U,
      2399980690U,
      4293915773U,
      2240044497U,
      1873313359U,
      4264355552U,
      2734768916U,
      1309151649U,
      4149444226U,
      3174756917U,
      718787259U,
      3951481745U
    };
    private static bool m_GlobalConsumer = false;
    private static bool m_MockConsumer = false;
    private static byte[] m_ExceptionConsumer = new byte[0];
    private static byte[] interpreterConsumer = new byte[0];
    private static byte[] mappingConsumer = new byte[0];
    private static byte[] _TestsConsumer = new byte[0];
    private static IntPtr m_MapperConsumer = IntPtr.Zero;
    private static IntPtr m_ProcConsumer = IntPtr.Zero;
    private static object m_ObjectRepository = (object) new string[0];
    private static int[] processRepository = new int[0];
    private static int m_ConsumerRepository = 1;
    private static bool m_RepositoryRepository = false;
    private static SortedList errorRepository = new SortedList();
    private static int stateRepository = 0;
    private static long _ConfigurationRepository = 0;
    internal static InfoRepositoryConsumer.ConnectionRepository m_TokenRepository = (InfoRepositoryConsumer.ConnectionRepository) null;
    internal static InfoRepositoryConsumer.ConnectionRepository _EventRepository = (InfoRepositoryConsumer.ConnectionRepository) null;
    private static long m_PropertyRepository = 0;
    private static int m_AccountRepository = 0;
    private static bool m_SingletonRepository = false;
    private static bool templateRepository = false;
    private static int paramsRepository = 0;
    private static IntPtr _PolicyRepository = IntPtr.Zero;
    [InfoRepositoryConsumer.ValuePolicyList(typeof (InfoRepositoryConsumer.ValuePolicyList.IdentifierParamsID<object>[]))]
    private static bool m_RefRepository = false;
    internal static Hashtable m_RegRepository = new Hashtable();

    [MethodImpl(MethodImplOptions.NoInlining)]
    static InfoRepositoryConsumer()
    {
      try
      {
        RSACryptoServiceProvider.UseMachineKeyStore = true;
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountExpression()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static byte[] PatchError(byte[] ident)
    {
      uint[] numArray1 = new uint[16];
      uint num1 = (uint) ((448 - ident.Length * 8 % 512 + 512) % 512);
      if (num1 == 0U)
        num1 = 512U;
      uint length = (uint) ((ulong) ident.Length + (ulong) (num1 / 8U) + 8UL);
      ulong num2 = (ulong) ident.Length * 8UL;
      byte[] numArray2 = new byte[(IntPtr) length];
      for (int index = 0; index < ident.Length; ++index)
        numArray2[index] = ident[index];
      numArray2[ident.Length] |= (byte) 128;
      for (int index = 8; index > 0; --index)
        numArray2[(long) length - (long) index] = (byte) (num2 >> (8 - index) * 8 & (ulong) byte.MaxValue);
      uint num3 = (uint) (numArray2.Length * 8) / 32U;
      uint num4 = 1732584193;
      uint num5 = 4023233417;
      uint num6 = 2562383102;
      uint num7 = 271733878;
      for (uint index1 = 0; index1 < num3 / 16U; ++index1)
      {
        uint num8 = index1 << 6;
        for (uint index2 = 0; index2 < 61U; index2 += 4U)
          numArray1[(IntPtr) (index2 >> 2)] = (uint) ((int) numArray2[(IntPtr) (num8 + (index2 + 3U))] << 24 | (int) numArray2[(IntPtr) (num8 + (index2 + 2U))] << 16 | (int) numArray2[(IntPtr) (num8 + (index2 + 1U))] << 8) | (uint) numArray2[(IntPtr) (num8 + index2)];
        uint num9 = num4;
        uint num10 = num5;
        uint num11 = num6;
        uint num12 = num7;
        InfoRepositoryConsumer.InstantiateError(ref num4, num5, num6, num7, 0U, (ushort) 7, 1U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num7, num4, num5, num6, 1U, (ushort) 12, 2U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num6, num7, num4, num5, 2U, (ushort) 17, 3U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num5, num6, num7, num4, 3U, (ushort) 22, 4U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num4, num5, num6, num7, 4U, (ushort) 7, 5U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num7, num4, num5, num6, 5U, (ushort) 12, 6U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num6, num7, num4, num5, 6U, (ushort) 17, 7U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num5, num6, num7, num4, 7U, (ushort) 22, 8U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num4, num5, num6, num7, 8U, (ushort) 7, 9U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num7, num4, num5, num6, 9U, (ushort) 12, 10U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num6, num7, num4, num5, 10U, (ushort) 17, 11U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num5, num6, num7, num4, 11U, (ushort) 22, 12U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num4, num5, num6, num7, 12U, (ushort) 7, 13U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num7, num4, num5, num6, 13U, (ushort) 12, 14U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num6, num7, num4, num5, 14U, (ushort) 17, 15U, numArray1);
        InfoRepositoryConsumer.InstantiateError(ref num5, num6, num7, num4, 15U, (ushort) 22, 16U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num4, num5, num6, num7, 1U, (ushort) 5, 17U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num7, num4, num5, num6, 6U, (ushort) 9, 18U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num6, num7, num4, num5, 11U, (ushort) 14, 19U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num5, num6, num7, num4, 0U, (ushort) 20, 20U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num4, num5, num6, num7, 5U, (ushort) 5, 21U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num7, num4, num5, num6, 10U, (ushort) 9, 22U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num6, num7, num4, num5, 15U, (ushort) 14, 23U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num5, num6, num7, num4, 4U, (ushort) 20, 24U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num4, num5, num6, num7, 9U, (ushort) 5, 25U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num7, num4, num5, num6, 14U, (ushort) 9, 26U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num6, num7, num4, num5, 3U, (ushort) 14, 27U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num5, num6, num7, num4, 8U, (ushort) 20, 28U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num4, num5, num6, num7, 13U, (ushort) 5, 29U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num7, num4, num5, num6, 2U, (ushort) 9, 30U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num6, num7, num4, num5, 7U, (ushort) 14, 31U, numArray1);
        InfoRepositoryConsumer.OrderError(ref num5, num6, num7, num4, 12U, (ushort) 20, 32U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num4, num5, num6, num7, 5U, (ushort) 4, 33U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num7, num4, num5, num6, 8U, (ushort) 11, 34U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num6, num7, num4, num5, 11U, (ushort) 16, 35U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num5, num6, num7, num4, 14U, (ushort) 23, 36U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num4, num5, num6, num7, 1U, (ushort) 4, 37U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num7, num4, num5, num6, 4U, (ushort) 11, 38U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num6, num7, num4, num5, 7U, (ushort) 16, 39U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num5, num6, num7, num4, 10U, (ushort) 23, 40U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num4, num5, num6, num7, 13U, (ushort) 4, 41U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num7, num4, num5, num6, 0U, (ushort) 11, 42U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num6, num7, num4, num5, 3U, (ushort) 16, 43U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num5, num6, num7, num4, 6U, (ushort) 23, 44U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num4, num5, num6, num7, 9U, (ushort) 4, 45U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num7, num4, num5, num6, 12U, (ushort) 11, 46U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num6, num7, num4, num5, 15U, (ushort) 16, 47U, numArray1);
        InfoRepositoryConsumer.DisableError(ref num5, num6, num7, num4, 2U, (ushort) 23, 48U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num4, num5, num6, num7, 0U, (ushort) 6, 49U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num7, num4, num5, num6, 7U, (ushort) 10, 50U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num6, num7, num4, num5, 14U, (ushort) 15, 51U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num5, num6, num7, num4, 5U, (ushort) 21, 52U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num4, num5, num6, num7, 12U, (ushort) 6, 53U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num7, num4, num5, num6, 3U, (ushort) 10, 54U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num6, num7, num4, num5, 10U, (ushort) 15, 55U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num5, num6, num7, num4, 1U, (ushort) 21, 56U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num4, num5, num6, num7, 8U, (ushort) 6, 57U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num7, num4, num5, num6, 15U, (ushort) 10, 58U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num6, num7, num4, num5, 6U, (ushort) 15, 59U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num5, num6, num7, num4, 13U, (ushort) 21, 60U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num4, num5, num6, num7, 4U, (ushort) 6, 61U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num7, num4, num5, num6, 11U, (ushort) 10, 62U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num6, num7, num4, num5, 2U, (ushort) 15, 63U, numArray1);
        InfoRepositoryConsumer.SearchError(ref num5, num6, num7, num4, 9U, (ushort) 21, 64U, numArray1);
        num4 += num9;
        num5 += num10;
        num6 += num11;
        num7 += num12;
      }
      byte[] destinationArray = new byte[16];
      Array.Copy((Array) BitConverter.GetBytes(num4), 0, (Array) destinationArray, 0, 4);
      Array.Copy((Array) BitConverter.GetBytes(num5), 0, (Array) destinationArray, 4, 4);
      Array.Copy((Array) BitConverter.GetBytes(num6), 0, (Array) destinationArray, 8, 4);
      Array.Copy((Array) BitConverter.GetBytes(num7), 0, (Array) destinationArray, 12, 4);
      return destinationArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void InstantiateError(
      ref uint def,
      uint offsetvisitor,
      uint rowcontrol,
      uint idx_asset2,
      uint ident3X,
      ushort sizepol4,
      uint second5Ptr,
      uint[] v6)
    {
      def = offsetvisitor + InfoRepositoryConsumer.ValidateError(def + (uint) ((int) offsetvisitor & (int) rowcontrol | ~(int) offsetvisitor & (int) idx_asset2) + v6[(IntPtr) ident3X] + InfoRepositoryConsumer._StructConsumer[(IntPtr) (second5Ptr - 1U)], sizepol4);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void OrderError(
      ref uint i,
      uint end_cust,
      uint comp_Z,
      uint next_map2,
      uint IDtask3,
      ushort flagsmap4,
      uint version_config5,
      uint[] asset6)
    {
      i = end_cust + InfoRepositoryConsumer.ValidateError(i + (uint) ((int) end_cust & (int) next_map2 | (int) comp_Z & ~(int) next_map2) + asset6[(IntPtr) IDtask3] + InfoRepositoryConsumer._StructConsumer[(IntPtr) (version_config5 - 1U)], flagsmap4);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void DisableError(
      ref uint asset,
      uint indexOf_map,
      uint proc,
      uint last2_Ptr,
      uint pol3min,
      ushort IDcaller4,
      uint cust5_counter,
      uint[] last6)
    {
      asset = indexOf_map + InfoRepositoryConsumer.ValidateError(asset + (indexOf_map ^ proc ^ last2_Ptr) + last6[(IntPtr) pol3min] + InfoRepositoryConsumer._StructConsumer[(IntPtr) (cust5_counter - 1U)], IDcaller4);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void SearchError(
      ref uint param,
      uint no_result,
      uint previoustemplate,
      uint asset2_length,
      uint token3_X,
      ushort sum_cont4,
      uint cust5_Ptr,
      uint[] col6)
    {
      param = no_result + InfoRepositoryConsumer.ValidateError(param + (previoustemplate ^ (no_result | ~asset2_length)) + col6[(IntPtr) token3_X] + InfoRepositoryConsumer._StructConsumer[(IntPtr) (cust5_Ptr - 1U)], sum_cont4);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static uint ValidateError(uint ID_var1, ushort pred) => ID_var1 >> 32 - (int) pred | ID_var1 << (int) pred;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static bool AssetError()
    {
      if (!InfoRepositoryConsumer.m_GlobalConsumer)
      {
        InfoRepositoryConsumer.SetError();
        InfoRepositoryConsumer.m_GlobalConsumer = true;
      }
      return InfoRepositoryConsumer.m_MockConsumer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static SymmetricAlgorithm ViewError()
    {
      if (InfoRepositoryConsumer.AssetError())
        return (SymmetricAlgorithm) new AesCryptoServiceProvider();
      try
      {
        return (SymmetricAlgorithm) new RijndaelManaged();
      }
      catch
      {
        return (SymmetricAlgorithm) Activator.CreateInstance("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Security.Cryptography.AesCryptoServiceProvider").Unwrap();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void SetError()
    {
      try
      {
        InfoRepositoryConsumer.m_MockConsumer = CryptoConfig.AllowOnlyFipsAlgorithms;
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static byte[] ComputeError(byte[] item) => !InfoRepositoryConsumer.AssetError() ? new MD5CryptoServiceProvider().ComputeHash(item) : InfoRepositoryConsumer.PatchError(item);

    [InfoRepositoryConsumer.ValuePolicyList(typeof (InfoRepositoryConsumer.ValuePolicyList.IdentifierParamsID<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static bool AddError(int lastcounter)
    {
      if (InfoRepositoryConsumer.interpreterConsumer.Length == 0)
      {
        BinaryReader binaryReader = new BinaryReader(InfoRepositoryConsumer.m_ExpressionConsumer.GetManifestResourceStream("{11111-22222-20001-00000}"));
        binaryReader.BaseStream.Position = 0L;
        RSACryptoServiceProvider.UseMachineKeyStore = true;
        byte[] buffer = binaryReader.ReadBytes((int) binaryReader.BaseStream.Length);
        byte[] rgbKey = new InfoRepositoryConsumer().WriteError();
        byte[] rgbIV = new InfoRepositoryConsumer().CalcError();
        byte[] publicKeyToken = InfoRepositoryConsumer.m_ExpressionConsumer.GetName().GetPublicKeyToken();
        if (publicKeyToken != null && publicKeyToken.Length > 0)
        {
          rgbIV[1] = publicKeyToken[0];
          rgbIV[3] = publicKeyToken[1];
          rgbIV[5] = publicKeyToken[2];
          rgbIV[7] = publicKeyToken[3];
          rgbIV[9] = publicKeyToken[4];
          rgbIV[11] = publicKeyToken[5];
          rgbIV[13] = publicKeyToken[6];
          rgbIV[15] = publicKeyToken[7];
        }
        SymmetricAlgorithm symmetricAlgorithm = InfoRepositoryConsumer.ViewError();
        symmetricAlgorithm.Mode = CipherMode.CBC;
        ICryptoTransform decryptor = symmetricAlgorithm.CreateDecryptor(rgbKey, rgbIV);
        MemoryStream memoryStream = new MemoryStream();
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Write);
        cryptoStream.Write(buffer, 0, buffer.Length);
        cryptoStream.FlushFinalBlock();
        InfoRepositoryConsumer.interpreterConsumer = memoryStream.ToArray();
        memoryStream.Close();
        cryptoStream.Close();
        binaryReader.Close();
      }
      if (InfoRepositoryConsumer.m_ExceptionConsumer.Length == 0)
        InfoRepositoryConsumer.m_ExceptionConsumer = InfoRepositoryConsumer.AwakeError(InfoRepositoryConsumer.DeleteError((object) InfoRepositoryConsumer.m_ExpressionConsumer).ToString());
      int index = 0;
      try
      {
        index = BitConverter.ToInt32(new byte[4]
        {
          InfoRepositoryConsumer.interpreterConsumer[lastcounter],
          InfoRepositoryConsumer.interpreterConsumer[lastcounter + 1],
          InfoRepositoryConsumer.interpreterConsumer[lastcounter + 2],
          InfoRepositoryConsumer.interpreterConsumer[lastcounter + 3]
        }, 0);
      }
      catch
      {
      }
      try
      {
        if (InfoRepositoryConsumer.m_ExceptionConsumer[index] == (byte) 128)
          return true;
      }
      catch
      {
      }
      return false;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static uint StartError(uint indextask) => (uint) "{11111-22222-10009-11111}".Length;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static uint ManageError(uint row_first) => (uint) "{11111-22222-10009-11112}".Length;

    [InfoRepositoryConsumer.ValuePolicyList(typeof (InfoRepositoryConsumer.ValuePolicyList.IdentifierParamsID<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static string ListError(string first)
    {
      "{11111-22222-50001-00000}".Trim();
      byte[] bytes = Convert.FromBase64String(first);
      return Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static int PopError() => 5;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void CheckError()
    {
      try
      {
        RSACryptoServiceProvider.UseMachineKeyStore = true;
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Delegate CancelError(IntPtr reference, Type pred) => (Delegate) typeof (Marshal).GetMethod("GetDelegateForFunctionPointer", new Type[2]
    {
      typeof (IntPtr),
      typeof (Type)
    }).Invoke((object) null, new object[2]
    {
      (object) reference,
      (object) pred
    });

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object DeleteError(object asset)
    {
      try
      {
        if (File.Exists(((Assembly) asset).Location))
          return (object) ((Assembly) asset).Location;
      }
      catch
      {
      }
      try
      {
        if (File.Exists(((Assembly) asset).GetName().CodeBase.ToString().Replace("file:///", "")))
          return (object) ((Assembly) asset).GetName().CodeBase.ToString().Replace("file:///", "");
      }
      catch
      {
      }
      try
      {
        if (File.Exists(asset.GetType().GetProperty("Location").GetValue(asset, new object[0]).ToString()))
          return (object) asset.GetType().GetProperty("Location").GetValue(asset, new object[0]).ToString();
      }
      catch
      {
      }
      return (object) "";
    }

    [InfoRepositoryConsumer.ValuePolicyList(typeof (InfoRepositoryConsumer.ValuePolicyList.IdentifierParamsID<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private static byte[] AwakeError(string config)
    {
      byte[] buffer;
      using (FileStream fileStream = new FileStream(config, FileMode.Open, FileAccess.Read, FileShare.Read))
      {
        int offset = 0;
        int length = (int) fileStream.Length;
        buffer = new byte[length];
        int num;
        for (; length > 0; length -= num)
        {
          num = fileStream.Read(buffer, offset, length);
          offset += num;
        }
      }
      return buffer;
    }

    [InfoRepositoryConsumer.ValuePolicyList(typeof (InfoRepositoryConsumer.ValuePolicyList.IdentifierParamsID<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private static byte[] ReflectError(byte[] last)
    {
      MemoryStream memoryStream = new MemoryStream();
      SymmetricAlgorithm symmetricAlgorithm = InfoRepositoryConsumer.ViewError();
      symmetricAlgorithm.Key = new byte[32]
      {
        (byte) 123,
        (byte) 5,
        (byte) 74,
        (byte) 12,
        (byte) 244,
        (byte) 156,
        (byte) 221,
        (byte) 154,
        (byte) 121,
        (byte) 221,
        (byte) 183,
        (byte) 41,
        (byte) 121,
        (byte) 65,
        (byte) 9,
        (byte) 43,
        (byte) 67,
        (byte) 81,
        (byte) 23,
        (byte) 43,
        (byte) 74,
        (byte) 63,
        (byte) 64,
        (byte) 23,
        (byte) 95,
        (byte) 185,
        (byte) 226,
        (byte) 244,
        (byte) 45,
        (byte) 194,
        (byte) 211,
        (byte) 43
      };
      symmetricAlgorithm.IV = new byte[16]
      {
        (byte) 117,
        (byte) 254,
        (byte) 41,
        (byte) 121,
        (byte) 65,
        (byte) 52,
        (byte) 9,
        (byte) 43,
        (byte) 221,
        (byte) 154,
        (byte) 12,
        (byte) 54,
        (byte) 68,
        (byte) 241,
        (byte) 68,
        (byte) 66
      };
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, symmetricAlgorithm.CreateDecryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(last, 0, last.Length);
      cryptoStream.Close();
      return memoryStream.ToArray();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] RemoveError() => "{11111-22222-10001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] UpdateError() => "{11111-22222-10001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] CalcError() => "{11111-22222-20001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] WriteError() => "{11111-22222-20001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] CalculateError() => "{11111-22222-30001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] CustomizeError() => "{11111-22222-30001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] InvokeError() => "{11111-22222-40001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] ReadError() => "{11111-22222-40001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] PostError() => "{11111-22222-50001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] FlushError() => "{11111-22222-50001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    public InfoRepositoryConsumer()
    {
    }

    internal class ValuePolicyList : Attribute
    {
      [InfoRepositoryConsumer.ValuePolicyList(typeof (InfoRepositoryConsumer.ValuePolicyList.IdentifierParamsID<object>[]))]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public ValuePolicyList(object value)
      {
        ManagerParamsID.NewExpression();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      internal class IdentifierParamsID<T>
      {
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IdentifierParamsID()
        {
          ManagerParamsID.NewExpression();
          // ISSUE: explicit constructor call
          base.\u002Ector();
        }

        internal static bool ExcludeExpression() => true;

        internal static bool RestartExpression() => false;
      }
    }

    internal class PredicateSingletonSchema
    {
      [InfoRepositoryConsumer.ValuePolicyList(typeof (InfoRepositoryConsumer.ValuePolicyList.IdentifierParamsID<object>[]))]
      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static string TestError(string spec, string cont)
      {
        byte[] bytes = Encoding.Unicode.GetBytes(spec);
        byte[] numArray = new byte[32]
        {
          (byte) 82,
          (byte) 102,
          (byte) 104,
          (byte) 110,
          (byte) 32,
          (byte) 77,
          (byte) 24,
          (byte) 34,
          (byte) 118,
          (byte) 181,
          (byte) 51,
          (byte) 17,
          (byte) 18,
          (byte) 51,
          (byte) 12,
          (byte) 109,
          (byte) 10,
          (byte) 32,
          (byte) 77,
          (byte) 24,
          (byte) 34,
          (byte) 158,
          (byte) 161,
          (byte) 41,
          (byte) 97,
          (byte) 28,
          (byte) 118,
          (byte) 181,
          (byte) 5,
          (byte) 25,
          (byte) 1,
          (byte) 88
        };
        byte[] error = InfoRepositoryConsumer.ComputeError(Encoding.Unicode.GetBytes(cont));
        MemoryStream memoryStream = new MemoryStream();
        SymmetricAlgorithm symmetricAlgorithm = InfoRepositoryConsumer.ViewError();
        symmetricAlgorithm.Key = numArray;
        symmetricAlgorithm.IV = error;
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, symmetricAlgorithm.CreateEncryptor(), CryptoStreamMode.Write);
        cryptoStream.Write(bytes, 0, bytes.Length);
        cryptoStream.Close();
        return Convert.ToBase64String(memoryStream.ToArray());
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public PredicateSingletonSchema()
      {
        ManagerParamsID.NewExpression();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    internal delegate uint ConnectionRepository(
      IntPtr classthis,
      IntPtr comp,
      IntPtr info,
      [MarshalAs(UnmanagedType.U4)] uint flags,
      IntPtr nativeEntry,
      ref uint nativeSizeOfCode);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr TagPropertyImporter();

    internal struct ParserRepository
    {
      internal bool _StatusRepository;
      internal byte[] bridgeRepository;
    }

    [Flags]
    private enum SaferPolicy
    {
    }
  }
}
