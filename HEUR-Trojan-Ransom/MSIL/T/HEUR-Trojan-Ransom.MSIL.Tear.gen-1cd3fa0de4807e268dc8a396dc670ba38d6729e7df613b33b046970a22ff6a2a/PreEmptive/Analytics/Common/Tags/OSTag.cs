// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.OSTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags
{
  public class OSTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 18;
        int num1 = -9478;
        int num2 = num1;
        num1 = -9478;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("꧅믇", A_1);
          default:
            goto case 1;
        }
      }
    }

    public OSInfo OSInfo
    {
      get
      {
        int num1 = -29396;
        int num2 = num1;
        num1 = -29396;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 2302;
        int num2 = num1;
        num1 = 2302;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public OSTag(OSInfo osInfo, bool omitPII)
    {
      int A_1 = 17;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (omitPII)
        osInfo.ProductCode = (string) null;
      this.OSInfo = osInfo;
      this.AddAttribute(Utils.a("ꯄꛆ\uA4C8껊", A_1), osInfo.Name);
      this.AddAttribute(Utils.a("뛄럆\uE4C8ꛊ곌ꗎ뻐ꇒ", A_1), osInfo.ServicePackVersionMajor.ToString());
      this.AddAttribute(Utils.a("뛄럆\uE4C8ꛊ\uA4CCꇎ뻐ꇒ", A_1), osInfo.ServicePackVersionMinor.ToString());
      this.AddOptionalAttribute(Utils.a("뗄뗆ꛈ꿊료곎ꗐﻒ뛔룖뷘뻚", A_1), osInfo.ProductCode);
      this.AddOptionalAttribute(Utils.a("계꧆뫈뿊곌ꏎ뷐뛒뇔𥳐뷘뫚\uA9DC뫞", A_1), osInfo.InstallDate);
      this.AddOptionalAttribute(Utils.a("꧄ꛆ\uA7C8곊료껎뛐뛒", A_1), osInfo.Language);
    }
  }
}
