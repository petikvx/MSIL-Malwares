// Decompiled with JetBrains decompiler
// Type: .
// Assembly: C, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F25E1EAB-EB04-4ECD-A70E-0143E63DFF03
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Refroso.hrpz-e40496d5f84ff83ebc4a14536714c2842f292149aa58d7861f48ee8d2476be88.exe

using \u0006;
using \u0008;
using Microsoft.Win32;
using SmartAssembly.SmartUsageCore;
using System;
using System.Runtime.InteropServices;

namespace \u0004
{
  internal static class \u0008
  {
    public static void \u0002()
    {
      int num1;
      int num2;
      int num3;
      try
      {
        try
        {
          while (\u0004.\u0008.\u0002("v4"))
          {
            \u0004.\u0008.\u0002("Platform: .NET 4.0 installed");
            if (true)
              goto label_14;
          }
label_2:
          int num4 = \u0004.\u0008.\u0002("v3.5") ? 1 : 0;
label_3:
          if (num4 != 0)
          {
            \u0004.\u0008.\u0002("Platform: .NET 3.5 installed");
          }
          else
          {
            if (true)
            {
              if (\u0004.\u0008.\u0002("v3.0"))
              {
                \u0004.\u0008.\u0002("Platform: .NET 3.0 installed");
                goto label_14;
              }
              else if (\u0004.\u0008.\u0002("v2.0.50727"))
              {
                \u0004.\u0008.\u0002("Platform: .NET 2.0 installed");
                goto label_14;
              }
              else if (true)
              {
                if (!\u0004.\u0008.\u0002("v1.1.4322"))
                  goto label_14;
              }
              else
                goto label_2;
            }
            \u0004.\u0008.\u0002("Platform: .NET 1.1 installed");
          }
label_14:
          int num5;
          do
          {
            int num6 = \u0081\u0003.\u007E\u0086\u0004((object) \u0082\u0004.\u007E\u009A\u0003((object) \u001C\u0004.\u0084\u0003()));
            if (true)
              goto label_27;
label_15:
            switch (num1)
            {
              case 5:
                int num7 = \u0081\u0003.\u007E\u0087\u0004((object) \u0082\u0004.\u007E\u009A\u0003((object) \u001C\u0004.\u0084\u0003()));
                if (true)
                  goto label_28;
label_17:
                switch (num2)
                {
                  case 0:
                    \u0004.\u0008.\u0002("Platform: Windows 2000");
                    goto label_26;
                  case 1:
                    \u0004.\u0008.\u0002("Platform: Windows XP");
                    goto label_26;
                  case 2:
                    \u0004.\u0008.\u0002("Platform: Windows 2003");
                    goto label_26;
                  default:
                    goto label_26;
                }
label_28:
                num2 = num7;
                goto label_17;
              case 6:
                int num8 = \u0081\u0003.\u007E\u0087\u0004((object) \u0082\u0004.\u007E\u009A\u0003((object) \u001C\u0004.\u0084\u0003()));
                if (true)
                  goto label_29;
label_22:
                num5 = num3;
                if (true)
                {
                  switch (num5)
                  {
                    case 0:
                      \u0004.\u0008.\u0002("Platform: Windows Vista/2008");
                      continue;
                    case 1:
                      goto label_25;
                    default:
                      goto label_26;
                  }
                }
                else
                  goto label_10;
label_29:
                num3 = num8;
                goto label_22;
              default:
                goto label_26;
            }
label_27:
            num1 = num6;
            goto label_15;
          }
          while (false);
          goto label_26;
label_10:
          num4 = num5;
          goto label_3;
label_25:
          \u0004.\u0008.\u0002("Platform: Windows 7/2008 R2");
label_26:
          \u0004.\u0008.\u0003();
          \u0004.\u0008.\u0004();
          \u0004.\u0008.\u0005();
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num3;
        \u0005.\u0002(ex, (object) local1, (object) local2, (object) local3);
        throw;
      }
    }

    public static void \u0003()
    {
      try
      {
        try
        {
          \u0004.\u0008.\u0002("Platform CPU Cores: " + (object) \u001A\u0004.\u0082\u0003());
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0005.\u0002(ex);
        throw;
      }
    }

    public static void \u0004()
    {
      try
      {
        try
        {
          \u0004.\u0008.\u0002("Platform Culture Name: " + \u0011\u0005.\u001E\u0006().Name);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0005.\u0002(ex);
        throw;
      }
    }

    public static void \u0005()
    {
      try
      {
        try
        {
          \u0004.\u0008.\u0002("Platform OS Bitness: " + (object) (\u0004.\u0008.\u0002() ? 64 : 32));
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0005.\u0002(ex);
        throw;
      }
    }

    private static bool \u0002()
    {
      bool wow64Process;
      try
      {
        if (\u001A\u0004.\u0095\u0003() != 8)
          goto label_4;
label_1:
        int num1 = 0;
label_2:
        if (num1 == 0)
          return true;
        goto label_7;
label_4:
        if (true)
        {
          int num2 = \u0004.\u0008.\u0002("kernel32.dll", "IsWow64Process") ? 1 : 0;
          if (false)
          {
            num1 = num2;
            goto label_2;
          }
          else if (num2 == 0)
            goto label_12;
          else
            goto label_13;
        }
        else
          goto label_9;
label_7:
        if (true)
        {
          if (false)
            goto label_4;
        }
        else
          goto label_1;
label_9:
        if (true)
        {
          if (true)
          {
            if (true)
              return wow64Process;
            goto label_4;
          }
        }
        else
          goto label_13;
label_12:
        return false;
label_13:
        if (!\u0004.\u0008.\u0002(\u0004.\u0008.\u0002(), out wow64Process))
          goto label_12;
        else
          goto label_7;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) wow64Process;
        \u0005.\u0002(ex, (object) local);
        throw;
      }
    }

    private static bool \u0002([In] string obj0, [In] string obj1)
    {
      IntPtr hModule;
      try
      {
        IntPtr num1 = \u0004.\u0008.\u0002(obj0);
        if (true)
          goto label_10;
label_8:
        IntPtr num2 = hModule;
        int num3;
        if (true)
        {
          IntPtr zero = IntPtr.Zero;
          num3 = num2 == zero ? 1 : 0;
        }
        else
          goto label_6;
label_2:
        if (num3 != 0)
        {
          num3 = 0;
        }
        else
        {
          num2 = \u0004.\u0008.\u0002(hModule, obj1);
          goto label_6;
        }
label_4:
        if (num3 == 0)
          return num3 != 0;
        goto label_2;
label_6:
        IntPtr zero1 = IntPtr.Zero;
        num3 = num2 != zero1 ? 1 : 0;
        if (true)
          return num3 != 0;
        goto label_4;
label_10:
        hModule = num1;
        goto label_8;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local = (ValueType) hModule;
        string str1 = obj0;
        string str2 = obj1;
        \u0005.\u0002(ex, (object) local, (object) str1, (object) str2);
        throw;
      }
    }

    [DllImport("kernel32.dll", EntryPoint = "GetCurrentProcess")]
    private static extern IntPtr \u0002();

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle", CharSet = CharSet.Auto)]
    private static extern IntPtr \u0002([In] string obj0);

    [DllImport("kernel32", EntryPoint = "GetProcAddress", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr \u0002(IntPtr hModule, [MarshalAs(UnmanagedType.LPStr)] string procName);

    [DllImport("kernel32.dll", EntryPoint = "IsWow64Process", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0002(IntPtr hProcess, out bool wow64Process);

    private static bool \u0002([In] string obj0)
    {
      RegistryKey registryKey1;
      bool flag;
      try
      {
        if (true)
        {
          if (true)
            goto label_17;
label_2:
          try
          {
            RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\" + obj0);
            if (true)
              goto label_12;
label_10:
            if (registryKey1 == null)
            {
              RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node\\Microsoft\\NET Framework Setup\\NDP\\" + obj0);
              if (true)
                registryKey1 = registryKey3;
            }
            do
            {
              do
              {
                if (true)
                  goto label_11;
label_5:
                continue;
label_11:
                int num = registryKey1 != null ? 1 : 0;
                if (true)
                {
                  flag = num != 0;
                  goto label_5;
                }
                else
                  goto label_5;
              }
              while (false);
              if (false)
                break;
            }
            while (false);
            goto label_16;
label_12:
            registryKey1 = registryKey2;
            goto label_10;
          }
          finally
          {
            if (registryKey1 != null)
              \u0014\u0003.\u007E\u008A\u0006((object) registryKey1);
          }
label_17:
          registryKey1 = (RegistryKey) null;
          goto label_2;
        }
label_16:
        return flag;
      }
      catch (Exception ex)
      {
        RegistryKey registryKey4 = registryKey1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        string str = obj0;
        \u0005.\u0002(ex, (object) registryKey4, (object) local, (object) str);
        throw;
      }
    }

    public static void \u0002([FeatureName] string featureName) => \u0001.\u0003(featureName);
  }
}
