// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: SingleArrayTypeIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 96646636-5181-465D-A45F-CFFED007E535
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c30e1e448c40d6cf6fae39ea6bb5874bdbb3607fa9f601a121dad5ca9645808e.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 2130821143;
      int index;
      int aIndex;
      JSONNode jsonNode;
      int count;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1589693356)) % 17U)
        {
          case 0:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -198033936 ^ -1850337461;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * 880596436 ^ -1425298756;
            continue;
          case 2:
            this._playerStates[index] = new PlayerState();
            num1 = 270975882;
            continue;
          case 3:
            flag2 = aIndex < count;
            num1 = 689438599;
            continue;
          case 4:
            int num3 = flag2 ? -393711395 : (num3 = -1488259396);
            num1 = num3 ^ (int) num2 * 625422560;
            continue;
          case 5:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * 1847488749 ^ -1972748221;
            continue;
          case 6:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = 46290366;
            continue;
          case 7:
            int num4 = flag1 ? -1533958978 : (num4 = -1753037292);
            num1 = num4 ^ (int) num2 * -2131807344;
            continue;
          case 8:
            goto label_3;
          case 9:
            num1 = (int) num2 * 151029174 ^ -1140067793;
            continue;
          case 10:
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * -25239505 ^ -1246000977;
            continue;
          case 11:
            goto label_1;
          case 12:
            flag1 = index < count;
            num1 = 831730068;
            continue;
          case 13:
            this._dice = new Dice();
            num1 = (int) num2 * 2026353378 ^ -581449109;
            continue;
          case 14:
            ++index;
            num1 = (int) num2 * -1233353120 ^ -2067855609;
            continue;
          case 15:
            ++aIndex;
            num1 = (int) num2 * 1542127599 ^ 629426855;
            continue;
          case 16:
            this._buffer = buffer;
            this._random = Game.\u200D⁭‌‬‍‏‫⁪‌⁯‮⁬‌‬‍​‬​⁪‏‭‏‭‌‬⁫⁬‭⁭⁬⁫‫⁭⁪‫⁮‌‫​⁪‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -1606599217 ^ -304710018;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 773320696;
        int index;
        bool finished1;
        PlayerState[] playerStates;
        bool finished2;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 297153325)) % 16U)
          {
            case 0:
              num1 = (int) num2 * 68585591 ^ -927739810;
              continue;
            case 1:
              int num3;
              num1 = num3 = index >= playerStates.Length ? 580983536 : (num3 = 1362864569);
              continue;
            case 2:
              int num4 = finished1 ? 1500677393 : (num4 = 1391616815);
              num1 = num4 ^ (int) num2 * 1345257658;
              continue;
            case 4:
              playerState = playerStates[index];
              num1 = 349951703;
              continue;
            case 5:
              finished1 = this._finished;
              num1 = (int) num2 * -47634935 ^ 501235282;
              continue;
            case 6:
              num1 = 1907640170;
              continue;
            case 7:
              playerStates = this._playerStates;
              num1 = (int) num2 * 185990632 ^ 1736859739;
              continue;
            case 8:
              finished2 = true;
              num1 = (int) num2 * -1521549036 ^ 1754638574;
              continue;
            case 9:
              ++index;
              num1 = 1894735260;
              continue;
            case 10:
              int num5 = playerState.State == State.Playing ? -506302293 : (num5 = -1993962962);
              num1 = num5 ^ (int) num2 * -620571655;
              continue;
            case 11:
              num1 = (int) num2 * 16856966 ^ 1079860044;
              continue;
            case 12:
              finished2 = false;
              num1 = (int) num2 * 195206464 ^ -1653436579;
              continue;
            case 13:
              finished2 = true;
              num1 = (int) num2 * -1028182964 ^ -712255142;
              continue;
            case 14:
              index = 0;
              num1 = (int) num2 * 1032763774 ^ -42665672;
              continue;
            case 15:
              goto label_1;
            default:
              goto label_17;
          }
        }
label_17:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -476738098;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -242451977)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * 1587512438 ^ -551844165;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -1645630580;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2073295616)) % 8U)
        {
          case 0:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -1656485462 ^ 66649381;
            continue;
          case 1:
            num1 = (int) num2 * 424223368 ^ -102753674;
            continue;
          case 2:
            num1 = (int) num2 * 683081023 ^ -2085657003;
            continue;
          case 3:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * -307141271 ^ -1731879941;
            continue;
          case 4:
            this.Winners.Clear();
            num1 = (int) num2 * -1049691605 ^ -475435539;
            continue;
          case 6:
            this.Losers.Clear();
            num1 = (int) num2 * 214930780 ^ 1544779106;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -515399539;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      Player player;
      int index;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1361173387)) % 23U)
        {
          case 0:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -2123693427;
            continue;
          case 1:
            int num4 = flag1 ? 1112193412 : (num4 = 2032039234);
            num1 = num4 ^ (int) num3 * 2134487859;
            continue;
          case 2:
            int num5 = flag2 ? 1532736110 : (num5 = 1292256275);
            num1 = num5 ^ (int) num3 * -768051471;
            continue;
          case 3:
            goto label_1;
          case 4:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = -1754015931;
            continue;
          case 5:
            num1 = -1286992303;
            continue;
          case 6:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1956751016 ^ -84560663;
            continue;
          case 7:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 189493571 ^ 26279449;
            continue;
          case 8:
            flag1 = index < this.Players.Length;
            num1 = -2505280;
            continue;
          case 9:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * 1122336404 ^ 468208957;
            continue;
          case 10:
            num1 = (int) num3 * 1304675727 ^ -348693822;
            continue;
          case 11:
            num1 = -1413340115;
            continue;
          case 12:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 663612082 ^ 897377906;
            continue;
          case 13:
            num1 = (int) num3 * 779006926 ^ -1282435310;
            continue;
          case 14:
            index = 0;
            num1 = (int) num3 * 2017288055 ^ 13465163;
            continue;
          case 15:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num6 = player.UseOneMorePlanningSprint ? -1401902943 : (num6 = -946280929);
            num1 = num6 ^ (int) num3 * -717795574;
            continue;
          case 16:
            goto label_3;
          case 17:
            ++index;
            num1 = (int) num3 * 1416058149 ^ -1616840208;
            continue;
          case 18:
            num2 = 0;
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 1481728303 ^ -2138779470;
            continue;
          case 19:
            num2 = 0;
            num1 = -1255173614;
            continue;
          case 20:
            num1 = (int) num3 * -1734392077 ^ 92122293;
            continue;
          case 21:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -736569531 ^ 53484872;
            continue;
          case 22:
            int num7;
            num1 = num7 = num2 > 0 ? -414459339 : (num7 = -534200598);
            continue;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 2017186330;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1588828302)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -624178630 ^ 2076895999;
            continue;
          case 1:
            num1 = (int) num2 * -326402346 ^ 296353029;
            continue;
          case 2:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 2097359046 ^ 140018119;
            continue;
          case 3:
            num1 = (int) num2 * -2124817518 ^ 421253109;
            continue;
          case 4:
            this.PlayerTurn(this._currentPlayer);
            num1 = 612225610;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3 = !flag1 ? 1484832549 : (num3 = 301136579);
            num1 = num3 ^ (int) num2 * 799054682;
            continue;
          case 7:
            goto label_3;
          case 8:
            this.Print((object) Game.\u200C‪‌‭⁫‬‌‍‬‎⁭​‭⁪⁮‬⁭‫⁪‫‏‪⁫‫⁯‬‪‮⁮‪⁫‍⁬⁯⁯⁯‮‍⁯‍‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 587158419;
            continue;
          case 9:
            int num4 = !flag2 ? 1973370563 : (num4 = 107034410);
            num1 = num4 ^ (int) num2 * 1467453669;
            continue;
          case 10:
            this._currentPlayer = 0;
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * -514040940 ^ 1451056550;
            continue;
          case 11:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206C⁬‭⁫​‌⁬⁬‍‭⁫⁪⁭⁫‬‫⁭⁯⁪⁪‏‭‎‭‫⁬⁪​‫‎⁯‌​⁬‬‫‮⁭‍⁬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 433422482 ^ 1731861048;
            continue;
          case 12:
            ++this._currentPlayer;
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -931323437 ^ 1977570797;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 1217956529;
      while (true)
      {
        uint num2;
        bool flag1;
        int num3;
        int index;
        PlayerState playerState1;
        PlayerState playerState2;
        bool flag2;
        bool flag3;
        bool flag4;
        int num4;
        bool flag5;
        bool flag6;
        Card card;
        bool flag7;
        bool flag8;
        bool flag9;
        Player player;
        int num5;
        bool flag10;
        bool flag11;
        int num6;
        switch ((num2 = (uint) (num1 ^ 978623337)) % 81U)
        {
          case 0:
            int num7 = this.Losers.Contains(index) ? -2076748474 : (num7 = -421454054);
            num1 = num7 ^ (int) num2 * 224524962;
            continue;
          case 1:
            int num8 = this.Rules.OnlyOneWinner ? -446688403 : (num8 = -356026388);
            num1 = num8 ^ (int) num2 * -553452250;
            continue;
          case 2:
            num1 = (int) num2 * 2080295414 ^ -224062184;
            continue;
          case 3:
            num1 = 407622923;
            continue;
          case 4:
            num1 = 1938278086;
            continue;
          case 5:
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u206A‪‫‪‌⁫⁪‮⁭‮‪‫‪⁮⁯⁯⁮‎‎‬⁬⁫‏‮⁫⁪‏‬‭‌‮⁬⁯‫‫⁪⁪​⁫‭‮(0, num5);
            num1 = (int) num2 * -991198163 ^ 1468888589;
            continue;
          case 6:
            playerState1.State = State.Lose;
            num1 = 93740954;
            continue;
          case 7:
            num1 = (int) num2 * -1772215420 ^ -126667323;
            continue;
          case 8:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -1798678090 ^ -659031526;
            continue;
          case 9:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1677918042 ^ 1443293579;
            continue;
          case 10:
            int num9 = !flag11 ? 972170500 : (num9 = 711039255);
            num1 = num9 ^ (int) num2 * -2140536850;
            continue;
          case 11:
            this.Print((object) Game.\u206C⁬‭⁫​‌⁬⁬‍‭⁫⁪⁭⁫‬‫⁭⁯⁪⁪‏‭‎‭‫⁬⁪​‫‎⁯‌​⁬‬‫‮⁭‍⁬‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -118232904 ^ -77560227;
            continue;
          case 12:
            goto label_3;
          case 13:
            int num10 = !flag10 ? 1660955999 : (num10 = 1946338081);
            num1 = num10 ^ (int) num2 * 316795342;
            continue;
          case 14:
            num1 = (int) num2 * 414666273 ^ -1130065448;
            continue;
          case 15:
            flag8 = playerState2.State != 0;
            num1 = (int) num2 * 1220737514 ^ -1031168334;
            continue;
          case 16:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1805052413 ^ 1998355458;
            continue;
          case 17:
            int num11 = !flag5 ? 1270443408 : (num11 = 398652906);
            num1 = num11 ^ (int) num2 * 782087978;
            continue;
          case 18:
            int num12;
            num1 = num12 = playerState2.Sprint >= 0 ? 911136020 : (num12 = 1118980030);
            continue;
          case 19:
            int num13 = flag4 ? -692945619 : (num13 = -248441373);
            num1 = num13 ^ (int) num2 * 2006947256;
            continue;
          case 20:
            num1 = (int) num2 * -1796430046 ^ 1167648227;
            continue;
          case 21:
            playerState2.Resources -= num4;
            flag4 = playerState2.Resources < 0;
            num1 = (int) num2 * 1117744384 ^ -761646645;
            continue;
          case 22:
            card = this.DrawCard();
            num1 = 39264004;
            continue;
          case 23:
            playerState2 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1287142029 ^ -618323276;
            continue;
          case 24:
            num1 = (int) num2 * 1790139513 ^ -127923544;
            continue;
          case 25:
            playerState2.State = State.Won;
            num1 = (int) num2 * 1531143904 ^ 921824856;
            continue;
          case 26:
            num1 = (int) num2 * 1907832577 ^ 214557160;
            continue;
          case 27:
            ++num3;
            num1 = 403628085;
            continue;
          case 28:
            index = 0;
            num1 = 981756369;
            continue;
          case 29:
            int num14;
            num1 = num14 = this.Losers.Contains(num3) ? 2048547086 : (num14 = 740001570);
            continue;
          case 30:
            num1 = 2117524686;
            continue;
          case 31:
            num1 = 1117877805;
            continue;
          case 32:
            flag1 = true;
            num1 = (int) num2 * 1997858446 ^ 1896110782;
            continue;
          case 33:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * 1562758159 ^ 1114722295;
            continue;
          case 34:
            num1 = (int) num2 * -91161493 ^ 1378941311;
            continue;
          case 35:
            flag6 = index < this._playerStates.Length;
            num1 = 1296213096;
            continue;
          case 36:
            int num15 = flag3 ? 1007637936 : (num15 = 1906909610);
            num1 = num15 ^ (int) num2 * 337430242;
            continue;
          case 37:
            this._finished = true;
            num1 = (int) num2 * -824897431 ^ -2145295488;
            continue;
          case 38:
            ++playerState2.Sprint;
            num1 = (int) num2 * -975638592 ^ -1975220921;
            continue;
          case 39:
            num1 = (int) num2 * 1766693921 ^ -1050617868;
            continue;
          case 40:
            int num16;
            num1 = num16 = flag1 ? 2008220335 : (num16 = 1226288071);
            continue;
          case 41:
            int num17 = !flag2 ? 1783063326 : (num17 = 1537597857);
            num1 = num17 ^ (int) num2 * -650426777;
            continue;
          case 42:
            num1 = (int) num2 * -1180846429 ^ -990690504;
            continue;
          case 43:
            flag1 = true;
            num4 = card.Impact;
            num1 = (int) num2 * 1694496937 ^ -1039322139;
            continue;
          case 44:
            num1 = (int) num2 * 1775523787 ^ 1755697517;
            continue;
          case 45:
            playerState2.State = State.Lose;
            int num18 = this.Losers.Contains(playerIndex) ? 236073864 : (num18 = 1121633988);
            num1 = num18 ^ (int) num2 * -1240492247;
            continue;
          case 46:
            flag1 = false;
            num1 = 1430291347;
            continue;
          case 47:
            goto label_1;
          case 48:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -350192490 ^ -969372223;
              continue;
            }
            num6 = 0;
            break;
          case 49:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u206C⁬‭⁫​‌⁬⁬‍‭⁫⁪⁭⁫‬‫⁭⁯⁪⁪‏‭‎‭‫⁬⁪​‫‎⁯‌​⁬‬‫‮⁭‍⁬‮("\t", playerState3 != null ? Game.\u200D⁪​‪‬‎⁬⁬⁫⁭‫‫‮‎⁫‏⁬‌‬‭⁫‍‎‭‌⁫⁭⁫‏‪‬⁬⁪‍⁯‫‫‏‏‮((object) playerState3) : (string) null));
            num1 = 1436326505;
            continue;
          case 50:
            num1 = 478020335;
            continue;
          case 51:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 52:
            num1 = (int) num2 * -213052107 ^ 886243321;
            continue;
          case 53:
            ++playerState2.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * -216093419 ^ -200547242;
            continue;
          case 54:
            num3 = 0;
            num1 = (int) num2 * -1866199247 ^ -1386908696;
            continue;
          case 55:
            num1 = (int) num2 * -1151831593 ^ -719548393;
            continue;
          case 56:
            int num19 = !flag8 ? -280968348 : (num19 = -160958621);
            num1 = num19 ^ (int) num2 * -1447253922;
            continue;
          case 57:
            flag7 = card.Impact < 0;
            num1 = (int) num2 * -206297673 ^ 77541840;
            continue;
          case 58:
            int num20 = flag6 ? 1835791149 : (num20 = 1694633831);
            num1 = num20 ^ (int) num2 * 879437470;
            continue;
          case 59:
            playerState1 = this._playerStates[index];
            playerState1.Resources -= Game.\u206A‪‫‪‌⁫⁪‮⁭‮‪‫‪⁮⁯⁯⁮‎‎‬⁬⁫‏‮⁫⁪‏‬‭‌‮⁬⁯‫‫⁪⁪​⁫‭‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = 820291914;
            continue;
          case 60:
            int num21 = !flag9 ? -543282026 : (num21 = -827622704);
            num1 = num21 ^ (int) num2 * -1983640612;
            continue;
          case 61:
            ++index;
            num1 = 336558885;
            continue;
          case 62:
            num1 = (int) num2 * -1373751892 ^ 40353796;
            continue;
          case 63:
            this.Losers.Add(index);
            num1 = (int) num2 * -1073576921 ^ 1580941961;
            continue;
          case 64:
            flag11 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 1132116515;
            continue;
          case 65:
            num1 = (int) num2 * -1983440194 ^ 1361561505;
            continue;
          case 66:
            num1 = (int) num2 * -865550354 ^ 1632850255;
            continue;
          case 67:
            num1 = (int) num2 * 159702042 ^ -2050551035;
            continue;
          case 68:
            flag2 = playerState2.Sprint > this.Rules.SprintCount;
            num1 = 1309139274;
            continue;
          case 69:
            int num22;
            num1 = num22 = num3 < this._playerStates.Length ? 181301844 : (num22 = 575508305);
            continue;
          case 70:
            flag10 = num3 == playerIndex;
            num1 = (int) num2 * 1932070715 ^ -489749768;
            continue;
          case 71:
            num1 = 435873601;
            continue;
          case 72:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 974026928 ^ -46762153;
            continue;
          case 73:
            flag9 = playerState1.Resources >= 0;
            num1 = (int) num2 * 789999989 ^ 76307272;
            continue;
          case 74:
            num1 = (int) num2 * -1257810641 ^ -2093866374;
            continue;
          case 75:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag3 ? (object) "ALL " : (object) "", flag7 ? (object) "receives" : (object) "pays", (object) Game.\u200B⁬‫‭‫⁯⁪​‫⁫⁮⁫‎⁯‮⁭‮‫‫‌‌⁪⁭⁯⁭⁮​‪⁯⁮​‍⁬‬‬‬‎‫‬‎‮(num4), flag1 ? (object) "advance" : (object) "stay");
            num1 = 1479070657;
            continue;
          case 76:
            num1 = (int) num2 * 105798662 ^ 64883128;
            continue;
          case 77:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 981195157 ^ 1799056354;
            continue;
          case 78:
            this.Losers.Add(num3);
            num1 = (int) num2 * 1641479203 ^ -1576010946;
            continue;
          case 79:
            num1 = (int) num2 * -785841783 ^ 1192232715;
            continue;
          case 80:
            num1 = 412217615;
            continue;
          default:
            goto label_86;
        }
        flag3 = num6 != 0;
        flag5 = !flag7;
        num1 = 831782575;
      }
label_3:
      return;
label_86:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 700257847;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 904593435)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            this.ShuffleCards();
            num1 = (int) num2 * -572702014 ^ 655702205;
            continue;
          case 3:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -520948511 ^ 185197099;
            continue;
          case 4:
            int num3 = !flag ? -1081965377 : (num3 = -1729766264);
            num1 = num3 ^ (int) num2 * -545821876;
            continue;
          case 5:
            card2 = card1;
            num1 = (int) num2 * 841732266 ^ 374528593;
            continue;
          case 6:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 2133913465 ^ -942687718;
            continue;
          case 7:
            num1 = (int) num2 * 636435999 ^ -1663423040;
            continue;
          case 8:
            card1 = this._deck[0];
            num1 = 1806206711;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 785799441;
      int index;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 825377928)) % 10U)
        {
          case 0:
            flag = index < this._playerStates.Length;
            num1 = 328713512;
            continue;
          case 1:
            str1 = "";
            num1 = (int) num2 * -2126952165 ^ 493224327;
            continue;
          case 3:
            goto label_1;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200D⁪​‪‬‎⁬⁬⁫⁭‫‫‮‎⁫‏⁬‌‬‭⁫‍‎‭‌⁫⁭⁫‏‪‬⁬⁪‍⁯‫‫‏‏‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200C⁬‬⁭‪‌⁯⁮‌‍⁬⁭⁫‪⁫​‍‮‫‮⁭⁪⁫‭‍⁬⁫‬‫‫⁮⁮⁫‬‬‪​⁭‮‎‮(strArray);
            num1 = 1711091035;
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * -594651016 ^ 706977276;
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * -1956038836 ^ -845923775;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -792518365 ^ 337876089;
            continue;
          case 8:
            int num3 = flag ? 1866056172 : (num3 = 1395468923);
            num1 = num3 ^ (int) num2 * -1216694509;
            continue;
          case 9:
            num1 = (int) num2 * 497342031 ^ -901764265;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more)
    {
      string str = Game.\u206D‌‏⁮⁪‍⁬‬⁫‪‏⁯​‫⁭⁭⁮⁭‪⁭⁪‍‭‮‏‮‏‍⁯‭‪⁪‪‬‬​⁪⁪​‏‮(Game.\u200D⁪​‪‬‎⁬⁬⁫⁭‫‫‮‎⁫‏⁬‌‬‭⁫‍‎‭‌⁫⁭⁫‏‪‬⁬⁪‍⁯‫‫‏‏‮(text), more);
label_1:
      int num1 = -652404946;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1508966206)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Game.\u200B‍‭‮⁮‬‭‬‎⁬‏‏⁭⁫‮‍⁮‭‍‍‪‮‭‌‎‭‌‭⁬⁪⁬‌‮⁫⁯⁬⁭‌‍‎‮(this._buffer, str);
            num1 = (int) num2 * 162705088 ^ 1861151313;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u200D⁭‌‬‍‏‫⁪‌⁯‮⁬‌‬‍​‬​⁪‏‭‏‭‌‬⁫⁬‭⁭⁬⁫‫⁭⁪‫⁮‌‫​⁪‮([In] int obj0) => new Random(obj0);

    static string \u200C‪‌‭⁫‬‌‍‬‎⁭​‭⁪⁮‬⁭‫⁪‫‏‪⁫‫⁯‬‪‮⁮‪⁫‍⁬⁯⁯⁯‮‍⁯‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206C⁬‭⁫​‌⁬⁬‍‭⁫⁪⁭⁫‬‫⁭⁯⁪⁪‏‭‎‭‫⁬⁪​‫‎⁯‌​⁬‬‫‮⁭‍⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206A‪‫‪‌⁫⁪‮⁭‮‪‫‪⁮⁯⁯⁮‎‎‬⁬⁫‏‮⁫⁪‏‬‭‌‮⁬⁯‫‫⁪⁪​⁫‭‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200B⁬‫‭‫⁯⁪​‫⁫⁮⁫‎⁯‮⁭‮‫‫‌‌⁪⁭⁯⁭⁮​‪⁯⁮​‍⁬‬‬‬‎‫‬‎‮([In] int obj0) => Math.Abs(obj0);

    static string \u200D⁪​‪‬‎⁬⁬⁫⁭‫‫‮‎⁫‏⁬‌‬‭⁫‍‎‭‌⁫⁭⁫‏‪‬⁬⁪‍⁯‫‫‏‏‮([In] object obj0) => obj0.ToString();

    static string \u200C⁬‬⁭‪‌⁯⁮‌‍⁬⁭⁫‪⁫​‍‮‫‮⁭⁪⁫‭‍⁬⁫‬‫‫⁮⁮⁫‬‬‪​⁭‮‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206D‌‏⁮⁪‍⁬‬⁫‪‏⁯​‫⁭⁭⁮⁭‪⁭⁪‍‭‮‏‮‏‍⁯‭‪⁪‪‬‬​⁪⁪​‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200B‍‭‮⁮‬‭‬‎⁬‏‏⁭⁫‮‍⁮‭‍‍‪‮‭‌‎‭‌‭⁬⁪⁬‌‮⁫⁯⁬⁭‌‍‎‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
