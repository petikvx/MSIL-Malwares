// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.NewExpression
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using AjScript.Language;
using System;
using System.Collections.Generic;

namespace AjScript.Expressions
{
  [Serializable]
  public class NewExpression : IExpression
  {
    private string name;
    private ICollection<IExpression> arguments;

    public NewExpression(string name, ICollection<IExpression> arguments)
    {
      this.name = name;
      this.arguments = arguments;
    }

    public string TypeName => this.name;

    public ICollection<IExpression> Arguments => this.arguments;

    public object Evaluate(IContext context)
    {
      object obj = context.GetValue(this.name);
      Type type = (Type) null;
      if (!(obj is IFunction))
        type = TypeUtilities.GetType(context, this.name);
      object[] parameters = (object[]) null;
      if (this.arguments != null && this.arguments.Count > 0)
      {
        List<object> objectList = new List<object>();
        foreach (IExpression expression in (IEnumerable<IExpression>) this.arguments)
          objectList.Add(expression.Evaluate(context));
        parameters = objectList.ToArray();
      }
      return obj is IFunction ? ((IFunction) obj).NewInstance(parameters) : Activator.CreateInstance(type, parameters);
    }
  }
}
