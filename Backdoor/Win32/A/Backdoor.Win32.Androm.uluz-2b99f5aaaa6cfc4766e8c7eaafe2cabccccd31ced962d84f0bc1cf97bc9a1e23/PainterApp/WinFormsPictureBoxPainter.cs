// Decompiled with JetBrains decompiler
// Type: PainterApp.WinFormsPictureBoxPainter
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using PainterApp.Models;
using PainterApp.Models.DrawingShapes;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace PainterApp
{
  public class WinFormsPictureBoxPainter
  {
    private MyColor color;
    private int lineWidth;
    private List<IDrawingShape> shapes = new List<IDrawingShape>();
    private List<IDrawingShape> cancaledShapes = new List<IDrawingShape>();
    private IDrawingShape shape;

    public WinFormsPictureBoxPainter(
      PictureBox pictureBox,
      ShapeType shapeType,
      MyColor color,
      int lineWidth)
    {
      this.PictureBox = pictureBox;
      this.ShapeType = shapeType;
      this.Color = color;
      this.LineWidth = lineWidth;
      this.SetHandlers();
    }

    private void SetHandlers()
    {
      this.PictureBox.Paint += new PaintEventHandler(this.Refresh);
      this.PictureBox.MouseDown += new MouseEventHandler(this.Draw);
      this.PictureBox.MouseMove += new MouseEventHandler(this.DrawProcess);
      this.PictureBox.MouseUp += new MouseEventHandler(this.EndDraw);
    }

    public PictureBox PictureBox { get; private set; }

    public ShapeType ShapeType { get; set; }

    public MyColor Color
    {
      get => this.color;
      set
      {
        if (value == null)
          throw new ArgumentNullException("Argument must have a value");
        this.color = value.IsValid ? value : throw new ArgumentException("Invalid value");
      }
    }

    public int LineWidth
    {
      get => this.lineWidth;
      set => this.lineWidth = value >= 1 ? value : throw new ArgumentOutOfRangeException("Value must be positive");
    }

    private void DrawAll(Graphics graphics)
    {
      foreach (IDrawingShape shape in this.shapes)
        shape.Draw(graphics);
    }

    private void Draw(object sender, MouseEventArgs e)
    {
      Point location = e.Location;
      switch (this.ShapeType)
      {
        case ShapeType.Custom:
          this.shape = (IDrawingShape) new DrawingCustomShape(location, location, this.color, this.lineWidth);
          break;
        case ShapeType.Line:
          this.shape = (IDrawingShape) new DrawingLine(location, location, this.color, this.lineWidth);
          break;
        case ShapeType.Rectangle:
          this.shape = (IDrawingShape) new DrawingRectangle(location, location, this.color, this.lineWidth);
          break;
        case ShapeType.Ellipse:
          this.shape = (IDrawingShape) new DrawingEllipse(location, location, this.color, this.lineWidth);
          break;
        default:
          throw new NotImplementedException("Unsupported shape type");
      }
    }

    private void DrawProcess(object sender, MouseEventArgs e)
    {
      if (this.shape == null)
        return;
      this.shape.Scale(e.Location);
      this.PictureBox.Invalidate();
    }

    private void EndDraw(object sender, MouseEventArgs e)
    {
      if (this.shape == null)
        return;
      this.shapes.Add(this.shape);
      this.shape = (IDrawingShape) null;
    }

    private void Refresh(object sender, PaintEventArgs e)
    {
      this.DrawAll(e.Graphics);
      this.shape?.Draw(e.Graphics);
    }

    public void StepBack()
    {
      if (this.shapes.Count <= 0)
        ;
    }

    public void StepForward()
    {
      if (this.cancaledShapes.Count <= 0)
        ;
    }

    public void Clear(bool saveHistory)
    {
      if (saveHistory)
        this.cancaledShapes.AddRange((IEnumerable<IDrawingShape>) this.shapes);
      else
        this.cancaledShapes.Clear();
      this.shapes.Clear();
      this.PictureBox.Invalidate();
    }
  }
}
