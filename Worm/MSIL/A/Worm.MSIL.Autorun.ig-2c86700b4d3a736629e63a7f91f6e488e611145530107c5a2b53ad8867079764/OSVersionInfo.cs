// Decompiled with JetBrains decompiler
// Type: explorer.OSVersionInfo
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 56E5CD67-A795-400A-AA93-F7890471D495
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.ig-2c86700b4d3a736629e63a7f91f6e488e611145530107c5a2b53ad8867079764.exe

using System;

namespace explorer
{
  public class OSVersionInfo : IComparable, ICloneable
  {
    private static readonly OSVersionInfo _Win32s = new OSVersionInfo(OSPlatformId.Win32s, 0, 0, true);
    private static readonly OSVersionInfo _Win95 = new OSVersionInfo(OSPlatformId.Win32Windows, 4, 0, true);
    private static readonly OSVersionInfo _Win98 = new OSVersionInfo(OSPlatformId.Win32Windows, 4, 10, true);
    private static readonly OSVersionInfo _WinME = new OSVersionInfo(OSPlatformId.Win32Windows, 4, 90, true);
    private static readonly OSVersionInfo _WinNT351 = new OSVersionInfo(OSPlatformId.Win32NT, 3, 51, true);
    private static readonly OSVersionInfo _WinNT4 = new OSVersionInfo(OSPlatformId.Win32NT, 4, 0, true);
    private static readonly OSVersionInfo _Win2000 = new OSVersionInfo(OSPlatformId.Win32NT, 5, 0, true);
    private static readonly OSVersionInfo _WinXP = new OSVersionInfo(OSPlatformId.Win32NT, 5, 1, true);
    private static readonly OSVersionInfo _Win2003 = new OSVersionInfo(OSPlatformId.Win32NT, 5, 2, true);
    private static readonly OSVersionInfo _WinCE = new OSVersionInfo(OSPlatformId.WinCE, true);
    private static readonly OSVersionInfo _Vista = new OSVersionInfo(OSPlatformId.Win32NT, 6, 0, true);
    private OSPlatformId _OSPlatformId;
    private int _MajorVersion = -1;
    private int _MinorVersion = -1;
    private int _BuildNumber = -1;
    private string _CSDVersion = string.Empty;
    private OSSuites _OSSuiteFlags;
    private OSProductType _OSProductType;
    private short _ServicePackMajor = -1;
    private short _ServicePackMinor = -1;
    private byte _Reserved;
    private bool _Locked;
    private bool _ExtendedPropertiesAreSet;

    public static OSVersionInfo Win32s => OSVersionInfo._Win32s;

    public static OSVersionInfo Win95 => OSVersionInfo._Win95;

    public static OSVersionInfo Win98 => OSVersionInfo._Win98;

    public static OSVersionInfo WinME => OSVersionInfo._WinME;

    public static OSVersionInfo WinNT351 => OSVersionInfo._WinNT351;

    public static OSVersionInfo WinNT4 => OSVersionInfo._WinNT4;

    public static OSVersionInfo Win2000 => OSVersionInfo._Win2000;

    public static OSVersionInfo WinXP => OSVersionInfo._WinXP;

    public static OSVersionInfo Win2003 => OSVersionInfo._Win2003;

    public static OSVersionInfo WinCE => OSVersionInfo._WinCE;

    public static OSVersionInfo Vista => OSVersionInfo._Vista;

    public static OSVersionInfo GetOSVersionInfo(OSVersion v)
    {
      switch (v)
      {
        case OSVersion.Win32s:
          return OSVersionInfo.Win32s;
        case OSVersion.Win95:
          return OSVersionInfo.Win95;
        case OSVersion.Win98:
          return OSVersionInfo.Win98;
        case OSVersion.WinME:
          return OSVersionInfo.WinME;
        case OSVersion.WinNT351:
          return OSVersionInfo.WinNT351;
        case OSVersion.WinNT4:
          return OSVersionInfo.WinNT4;
        case OSVersion.Win2000:
          return OSVersionInfo.Win2000;
        case OSVersion.WinXP:
          return OSVersionInfo.WinXP;
        case OSVersion.Win2003:
          return OSVersionInfo.Win2003;
        case OSVersion.WinCE:
          return OSVersionInfo.WinCE;
        case OSVersion.Vista:
          return OSVersionInfo.Vista;
        default:
          throw new InvalidOperationException();
      }
    }

    public OSPlatformId OSPlatformId
    {
      get => this._OSPlatformId;
      set
      {
        this.CheckLock(nameof (OSPlatformId));
        this._OSPlatformId = value;
      }
    }

    public int OSMajorVersion
    {
      get => this._MajorVersion;
      set
      {
        this.CheckLock("MajorVersion");
        this._MajorVersion = value;
      }
    }

    public int OSMinorVersion
    {
      get => this._MinorVersion;
      set
      {
        this.CheckLock("MinorVersion");
        this._MinorVersion = value;
      }
    }

    public int BuildNumber
    {
      get => this._BuildNumber;
      set
      {
        this.CheckLock(nameof (BuildNumber));
        this._BuildNumber = value;
      }
    }

    public string OSCSDVersion
    {
      get => this._CSDVersion;
      set
      {
        this.CheckLock("CSDVersion");
        this._CSDVersion = value;
      }
    }

    public OSSuites OSSuiteFlags
    {
      get
      {
        this.CheckExtendedProperty(nameof (OSSuiteFlags));
        return this._OSSuiteFlags;
      }
      set
      {
        this.CheckLock(nameof (OSSuiteFlags));
        this._OSSuiteFlags = value;
      }
    }

    public OSProductType OSProductType
    {
      get
      {
        this.CheckExtendedProperty(nameof (OSProductType));
        return this._OSProductType;
      }
      set
      {
        this.CheckLock(nameof (OSProductType));
        this._OSProductType = value;
      }
    }

    public short OSServicePackMajor
    {
      get
      {
        this.CheckExtendedProperty("ServicePackMajor");
        return this._ServicePackMajor;
      }
      set
      {
        this.CheckLock("ServicePackMajor");
        this._ServicePackMajor = value;
      }
    }

    public short OSServicePackMinor
    {
      get
      {
        this.CheckExtendedProperty("ServicePackMinor");
        return this._ServicePackMinor;
      }
      set
      {
        this.CheckLock("ServicePackMinor");
        this._ServicePackMinor = value;
      }
    }

    public byte OSReserved
    {
      get
      {
        this.CheckExtendedProperty("Reserved");
        return this._Reserved;
      }
      set
      {
        this.CheckLock("Reserved");
        this._Reserved = value;
      }
    }

    public int Platform => (int) this._OSPlatformId;

    public int SuiteMask
    {
      get
      {
        this.CheckExtendedProperty(nameof (SuiteMask));
        return (int) this._OSSuiteFlags;
      }
    }

    public byte ProductType
    {
      get
      {
        this.CheckExtendedProperty(nameof (ProductType));
        return (byte) this._OSProductType;
      }
    }

    public Version Version
    {
      get
      {
        if (this.OSMajorVersion < 0 || this.OSMinorVersion < 0)
          return new Version();
        return this.BuildNumber < 0 ? new Version(this.OSMajorVersion, this.OSMinorVersion) : new Version(this.OSMajorVersion, this.OSMinorVersion, this.BuildNumber);
      }
    }

    public string VersionString => this.Version.ToString();

    public string OSPlatformIdString
    {
      get
      {
        switch (this.OSPlatformId)
        {
          case OSPlatformId.Win32s:
            return "Windows 32s";
          case OSPlatformId.Win32Windows:
            return "Windows 32";
          case OSPlatformId.Win32NT:
            return "Windows NT";
          case OSPlatformId.WinCE:
            return "Windows CE";
          default:
            throw new InvalidOperationException("Invalid OSPlatformId: " + (object) this.OSPlatformId);
        }
      }
    }

    public static bool OSSuiteFlag(OSSuites flags, OSSuites test) => (flags & test) > OSSuites.None;

    public string OSSuiteString
    {
      get
      {
        string empty = string.Empty;
        OSSuites osSuiteFlags = this.OSSuiteFlags;
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.SmallBusiness))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Small Business");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.Enterprise))
        {
          switch (this.OSVersion)
          {
            case OSVersion.WinNT4:
              OSVersionInfo.OSSuiteStringAdd(ref empty, "Enterprise");
              break;
            case OSVersion.Win2000:
              OSVersionInfo.OSSuiteStringAdd(ref empty, "Advanced");
              break;
            case OSVersion.Win2003:
              OSVersionInfo.OSSuiteStringAdd(ref empty, "Enterprise");
              break;
          }
        }
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.BackOffice))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "BackOffice");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.Communications))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Communications");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.Terminal))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Terminal Services");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.SmallBusinessRestricted))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Small Business Restricted");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.EmbeddedNT))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Embedded");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.Datacenter))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Datacenter");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.Personal))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Home Edition");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.Blade))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Web Edition");
        if (OSVersionInfo.OSSuiteFlag(osSuiteFlags, OSSuites.EmbeddedRestricted))
          OSVersionInfo.OSSuiteStringAdd(ref empty, "Embedded Restricted");
        return empty;
      }
    }

    private static void OSSuiteStringAdd(ref string s, string suite)
    {
      if (s.Length > 0)
        s += ", ";
      s += suite;
    }

    public string OSProductTypeString
    {
      get
      {
        switch (this.OSProductType)
        {
          case OSProductType.Workstation:
            switch (this.OSVersion)
            {
              case OSVersion.Win32s:
                return string.Empty;
              case OSVersion.Win95:
                return string.Empty;
              case OSVersion.Win98:
                return string.Empty;
              case OSVersion.WinME:
                return string.Empty;
              case OSVersion.WinNT351:
                return string.Empty;
              case OSVersion.WinNT4:
                return "Workstation";
              case OSVersion.Win2000:
                return "Professional";
              case OSVersion.WinXP:
                return OSVersionInfo.OSSuiteFlag(this.OSSuiteFlags, OSSuites.Personal) ? "Home Edition" : "Professional";
              case OSVersion.Win2003:
                return string.Empty;
              case OSVersion.WinCE:
                return string.Empty;
              case OSVersion.Vista:
                return string.Empty;
              default:
                throw new InvalidOperationException("Invalid OSVersion: " + (object) this.OSVersion);
            }
          case OSProductType.DomainController:
            string osSuiteString1 = this.OSSuiteString;
            if (osSuiteString1.Length > 0)
              osSuiteString1 += " ";
            return osSuiteString1 + "Domain Controller";
          case OSProductType.Server:
            string osSuiteString2 = this.OSSuiteString;
            if (osSuiteString2.Length > 0)
              osSuiteString2 += " ";
            return osSuiteString2 + "Server";
          default:
            throw new InvalidOperationException("Invalid OSProductType: " + (object) this.OSProductType);
        }
      }
    }

    public OSVersion OSVersion
    {
      get
      {
        switch (this.OSPlatformId)
        {
          case OSPlatformId.Win32s:
            return OSVersion.Win32s;
          case OSPlatformId.Win32Windows:
            switch (this.OSMinorVersion)
            {
              case 0:
                return OSVersion.Win95;
              case 10:
                return OSVersion.Win98;
              case 90:
                return OSVersion.WinME;
              default:
                throw new InvalidOperationException("Invalid Win32Windows MinorVersion: " + (object) this.OSMinorVersion);
            }
          case OSPlatformId.Win32NT:
            switch (this.OSMajorVersion)
            {
              case 3:
                return OSVersion.WinNT351;
              case 4:
                return OSVersion.WinNT4;
              case 5:
                switch (this.OSMinorVersion)
                {
                  case 0:
                    return OSVersion.Win2000;
                  case 1:
                    return OSVersion.WinXP;
                  case 2:
                    return OSVersion.Win2003;
                  default:
                    throw new InvalidOperationException("Invalid Win32NT WinNT5 MinorVersion: " + (object) this.OSMinorVersion);
                }
              case 6:
                return OSVersion.Vista;
              default:
                throw new InvalidOperationException("Invalid Win32NT MajorVersion: " + (object) this.OSMajorVersion);
            }
          case OSPlatformId.WinCE:
            return OSVersion.WinCE;
          default:
            throw new InvalidOperationException("Invalid OSPlatformId: " + (object) this.OSPlatformId);
        }
      }
    }

    public string OSVersionString
    {
      get
      {
        switch (this.OSVersion)
        {
          case OSVersion.Win32s:
            return "Windows 32s";
          case OSVersion.Win95:
            return "Windows 95";
          case OSVersion.Win98:
            return "Windows 98";
          case OSVersion.WinME:
            return "Windows ME";
          case OSVersion.WinNT351:
            return "Windows NT 3.51";
          case OSVersion.WinNT4:
            return "Windows NT 4";
          case OSVersion.Win2000:
            return "Windows 2000";
          case OSVersion.WinXP:
            return "Windows XP";
          case OSVersion.Win2003:
            return "Windows 2003";
          case OSVersion.WinCE:
            return "Windows CE";
          case OSVersion.Vista:
            return "Windows Vista";
          default:
            throw new InvalidOperationException("Invalid OSVersion: " + (object) this.OSVersion);
        }
      }
    }

    public bool ExtendedPropertiesAreSet
    {
      get => this._ExtendedPropertiesAreSet;
      set => this._ExtendedPropertiesAreSet = value;
    }

    public bool IsLocked => this._Locked;

    public void Lock() => this._Locked = true;

    private void CheckExtendedProperty(string property)
    {
      if (!this._ExtendedPropertiesAreSet)
        throw new InvalidOperationException("'" + property + "' is not set");
    }

    private void CheckLock(string property)
    {
      if (this._Locked)
        throw new InvalidOperationException("Cannot set '" + property + "' on locked instance");
    }

    public OSVersionInfo()
    {
    }

    public OSVersionInfo(OSPlatformId osPlatformId) => this._OSPlatformId = osPlatformId;

    public OSVersionInfo(OSPlatformId osPlatformId, bool locked)
    {
      this._OSPlatformId = osPlatformId;
      this._Locked = locked;
    }

    public OSVersionInfo(OSPlatformId osPlatformId, int majorVersion, int minorVersion)
    {
      this._OSPlatformId = osPlatformId;
      this._MajorVersion = majorVersion;
      this._MinorVersion = minorVersion;
    }

    public OSVersionInfo(
      OSPlatformId osPlatformId,
      int majorVersion,
      int minorVersion,
      bool locked)
    {
      this._OSPlatformId = osPlatformId;
      this._MajorVersion = majorVersion;
      this._MinorVersion = minorVersion;
      this._Locked = locked;
    }

    public OSVersionInfo(OSVersionInfo o) => this.CopyThis(o);

    public virtual void Copy(OSVersionInfo o) => this.CopyThis(o);

    public virtual OSVersionInfo CreateCopy() => new OSVersionInfo(this);

    public virtual object Clone() => (object) this.CreateCopy();

    private void CopyThis(OSVersionInfo o)
    {
      this._OSPlatformId = o._OSPlatformId;
      this._MajorVersion = o._MajorVersion;
      this._MinorVersion = o._MinorVersion;
      this._BuildNumber = o._BuildNumber;
      this._CSDVersion = o._CSDVersion;
      this._OSSuiteFlags = o._OSSuiteFlags;
      this._OSProductType = o._OSProductType;
      this._ServicePackMajor = o._ServicePackMajor;
      this._ServicePackMinor = o._ServicePackMinor;
      this._Reserved = o._Reserved;
      this._Locked = false;
      this._ExtendedPropertiesAreSet = o._ExtendedPropertiesAreSet;
    }

    public override bool Equals(object o)
    {
      OSVersionInfo osVersionInfo = o as OSVersionInfo;
      return osVersionInfo != (OSVersionInfo) null ? this == osVersionInfo : base.Equals(o);
    }

    public override int GetHashCode() => base.GetHashCode();

    public override string ToString()
    {
      string str = this.OSVersionString;
      if (this.ExtendedPropertiesAreSet)
        str = str + " " + this.OSProductTypeString;
      if (this.OSCSDVersion.Length > 0)
        str = str + " " + this.OSCSDVersion;
      return str + " v" + this.VersionString;
    }

    public static bool operator ==(OSVersionInfo o, OSVersionInfo p) => o.OSPlatformId == p.OSPlatformId && (o.OSMajorVersion < 0 || p.OSMajorVersion < 0 || o.OSMajorVersion == p.OSMajorVersion && (o.OSMinorVersion < 0 || p.OSMinorVersion < 0 || o.OSMinorVersion == p.OSMinorVersion && (o.BuildNumber < 0 || p.BuildNumber < 0 || o.BuildNumber == p.BuildNumber && (!o.ExtendedPropertiesAreSet || !p.ExtendedPropertiesAreSet || o.OSServicePackMajor < (short) 0 || p.OSServicePackMajor < (short) 0 || (int) o.OSServicePackMajor == (int) p.OSServicePackMajor && (o.OSServicePackMinor < (short) 0 || p.OSServicePackMinor < (short) 0 || (int) o.OSServicePackMinor == (int) p.OSServicePackMinor)))));

    public static bool operator !=(OSVersionInfo o, OSVersionInfo p) => !(o == p);

    public static bool operator <(OSVersionInfo o, OSVersionInfo p)
    {
      if (o.OSPlatformId < p.OSPlatformId)
        return true;
      if (o.OSPlatformId > p.OSPlatformId || o.OSMajorVersion < 0 || p.OSMajorVersion < 0)
        return false;
      if (o.OSMajorVersion < p.OSMajorVersion)
        return true;
      if (o.OSMajorVersion > p.OSMajorVersion || o.OSMinorVersion < 0 || p.OSMinorVersion < 0)
        return false;
      if (o.OSMinorVersion < p.OSMinorVersion)
        return true;
      if (o.OSMinorVersion > p.OSMinorVersion || o.BuildNumber < 0 || p.BuildNumber < 0)
        return false;
      if (o.BuildNumber < p.BuildNumber)
        return true;
      if (o.BuildNumber > p.BuildNumber || !o.ExtendedPropertiesAreSet || !p.ExtendedPropertiesAreSet || o.OSServicePackMajor < (short) 0 || p.OSServicePackMajor < (short) 0)
        return false;
      if ((int) o.OSServicePackMajor < (int) p.OSServicePackMajor)
        return true;
      if ((int) o.OSServicePackMajor > (int) p.OSServicePackMajor || o.OSServicePackMinor < (short) 0 || p.OSServicePackMinor < (short) 0)
        return false;
      if ((int) o.OSServicePackMinor < (int) p.OSServicePackMinor)
        return true;
      return (int) o.OSServicePackMinor > (int) p.OSServicePackMinor && false;
    }

    public static bool operator >(OSVersionInfo o, OSVersionInfo p) => o.OSPlatformId >= p.OSPlatformId && (o.OSPlatformId > p.OSPlatformId || o.OSMajorVersion >= 0 && p.OSMajorVersion >= 0 && o.OSMajorVersion >= p.OSMajorVersion && (o.OSMajorVersion > p.OSMajorVersion || o.OSMinorVersion >= 0 && p.OSMinorVersion >= 0 && o.OSMinorVersion >= p.OSMinorVersion && (o.OSMinorVersion > p.OSMinorVersion || o.BuildNumber >= 0 && p.BuildNumber >= 0 && o.BuildNumber >= p.BuildNumber && (o.BuildNumber > p.BuildNumber || o.ExtendedPropertiesAreSet && p.ExtendedPropertiesAreSet && o.OSServicePackMajor >= (short) 0 && p.OSServicePackMajor >= (short) 0 && (int) o.OSServicePackMajor >= (int) p.OSServicePackMajor && ((int) o.OSServicePackMajor > (int) p.OSServicePackMajor || o.OSServicePackMinor >= (short) 0 && p.OSServicePackMinor >= (short) 0 && (int) o.OSServicePackMinor >= (int) p.OSServicePackMinor && (int) o.OSServicePackMinor > (int) p.OSServicePackMinor)))));

    public static bool operator <=(OSVersionInfo o, OSVersionInfo p) => o < p || o == p;

    public static bool operator >=(OSVersionInfo o, OSVersionInfo p) => o > p || o == p;

    public virtual int CompareTo(object o)
    {
      OSVersionInfo osVersionInfo = o != null ? o as OSVersionInfo : throw new InvalidOperationException("CompareTo( object o ): 'o' is null");
      if (osVersionInfo == (OSVersionInfo) null)
        throw new InvalidOperationException("CompareTo( object o ): 'o' is not an OSVersionInfo");
      if (this == osVersionInfo)
        return 0;
      return this > osVersionInfo ? 1 : -1;
    }

    private class MajorVersionConst
    {
      public const int Win32s = 0;
      public const int Win95 = 4;
      public const int Win98 = 4;
      public const int WinME = 4;
      public const int WinNT351 = 3;
      public const int WinNT4 = 4;
      public const int WinNT5 = 5;
      public const int Win2000 = 5;
      public const int WinXP = 5;
      public const int Win2003 = 5;
      public const int Vista = 6;

      private MajorVersionConst()
      {
      }
    }

    private class MinorVersionConst
    {
      public const int Win32s = 0;
      public const int Win95 = 0;
      public const int Win98 = 10;
      public const int WinME = 90;
      public const int WinNT351 = 51;
      public const int WinNT4 = 0;
      public const int Win2000 = 0;
      public const int WinXP = 1;
      public const int Win2003 = 2;
      public const int Vista = 0;

      private MinorVersionConst()
      {
      }
    }
  }
}
