// Decompiled with JetBrains decompiler
// Type: Maxs_Gorn.Palette
// Assembly: ThrowHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FEB54C5-CA11-4457-9687-04CC2C090BB8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.Win32.Stealer.gen-537ceee1192d7c3ef3f360c4e509d5d64ab3a506bab5fecf7ad5d0e8f6ff219f.exe

using System;
using System.Drawing;
using System.IO;
using System.Text;

namespace Maxs_Gorn
{
  public class Palette
  {
    public const string FileHeader = "TGRP";
    private Color[] colors = new Color[256];
    public const int Length = 256;

    public Color this[int key]
    {
      get => this.colors[key];
      set => this.colors[key] = Color.FromArgb((int) value.R, (int) value.G, (int) value.B);
    }

    public static Palette Load(string filename)
    {
      FileStream inStream = new FileStream(filename, FileMode.Open);
      Palette palette = Palette.Load((Stream) inStream);
      inStream.Close();
      return palette;
    }

    public static Palette Load(Stream inStream)
    {
      BinaryReader binaryReader = new BinaryReader(inStream, Encoding.ASCII);
      if (new string(binaryReader.ReadChars("TGRP".Length)) != "TGRP")
        throw new Exception("Invalid format");
      int num = 0;
      Palette palette = new Palette();
      while (num < 256)
        palette[num++] = Color.FromArgb((int) binaryReader.ReadByte(), (int) binaryReader.ReadByte(), (int) binaryReader.ReadByte());
      return palette;
    }

    public void Save(string filename)
    {
      FileStream outStream = new FileStream(filename, FileMode.Create);
      this.Save((Stream) outStream);
      outStream.Close();
    }

    public void Save(Stream outStream)
    {
      BinaryWriter binaryWriter = new BinaryWriter(outStream, Encoding.ASCII);
      binaryWriter.Write("TGRP".ToCharArray());
      foreach (Color color in this.colors)
      {
        byte[] buffer = new byte[3]
        {
          color.R,
          color.G,
          color.B
        };
        binaryWriter.Write(buffer);
      }
    }

    public static Palette VGA
    {
      get
      {
        Palette vga = new Palette();
        int num1 = 0;
        Palette palette1 = vga;
        int key1 = num1;
        int num2 = key1 + 1;
        Color color1 = Color.FromArgb(0, 0, 0);
        palette1[key1] = color1;
        Palette palette2 = vga;
        int key2 = num2;
        int num3 = key2 + 1;
        Color color2 = Color.FromArgb(0, 0, 170);
        palette2[key2] = color2;
        Palette palette3 = vga;
        int key3 = num3;
        int num4 = key3 + 1;
        Color color3 = Color.FromArgb(0, 170, 0);
        palette3[key3] = color3;
        Palette palette4 = vga;
        int key4 = num4;
        int num5 = key4 + 1;
        Color color4 = Color.FromArgb(0, 170, 170);
        palette4[key4] = color4;
        Palette palette5 = vga;
        int key5 = num5;
        int num6 = key5 + 1;
        Color color5 = Color.FromArgb(170, 0, 0);
        palette5[key5] = color5;
        Palette palette6 = vga;
        int key6 = num6;
        int num7 = key6 + 1;
        Color color6 = Color.FromArgb(170, 0, 170);
        palette6[key6] = color6;
        Palette palette7 = vga;
        int key7 = num7;
        int num8 = key7 + 1;
        Color color7 = Color.FromArgb(170, 85, 170);
        palette7[key7] = color7;
        Palette palette8 = vga;
        int key8 = num8;
        int num9 = key8 + 1;
        Color color8 = Color.FromArgb(170, 170, 170);
        palette8[key8] = color8;
        Palette palette9 = vga;
        int key9 = num9;
        int num10 = key9 + 1;
        Color color9 = Color.FromArgb(85, 85, 85);
        palette9[key9] = color9;
        Palette palette10 = vga;
        int key10 = num10;
        int num11 = key10 + 1;
        Color color10 = Color.FromArgb(85, 85, (int) byte.MaxValue);
        palette10[key10] = color10;
        Palette palette11 = vga;
        int key11 = num11;
        int num12 = key11 + 1;
        Color color11 = Color.FromArgb(85, (int) byte.MaxValue, 85);
        palette11[key11] = color11;
        Palette palette12 = vga;
        int key12 = num12;
        int num13 = key12 + 1;
        Color color12 = Color.FromArgb(85, (int) byte.MaxValue, (int) byte.MaxValue);
        palette12[key12] = color12;
        Palette palette13 = vga;
        int key13 = num13;
        int num14 = key13 + 1;
        Color color13 = Color.FromArgb((int) byte.MaxValue, 85, 85);
        palette13[key13] = color13;
        Palette palette14 = vga;
        int key14 = num14;
        int num15 = key14 + 1;
        Color color14 = Color.FromArgb((int) byte.MaxValue, 85, (int) byte.MaxValue);
        palette14[key14] = color14;
        Palette palette15 = vga;
        int key15 = num15;
        int num16 = key15 + 1;
        Color color15 = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, 85);
        palette15[key15] = color15;
        Palette palette16 = vga;
        int key16 = num16;
        int num17 = key16 + 1;
        Color color16 = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        palette16[key16] = color16;
        byte num18 = 0;
        for (int index = 0; index < 16; ++index)
        {
          vga[num17++] = Color.FromArgb((int) num18, (int) num18, (int) num18);
          num18 += (byte) 16;
        }
        double[] numArray = new double[3]{ 1.0, 0.5, 0.25 };
        foreach (double v in numArray)
        {
          foreach (double s in numArray)
          {
            for (int h = 240; h < 600; h += 15)
              vga[num17++] = Palette.FromHsv((double) h, s, v);
          }
        }
        while (num17 < 256)
          vga[num17++] = Color.FromArgb(0, 0, 0);
        return vga;
      }
    }

    public static Palette Grayscale
    {
      get
      {
        Palette grayscale = new Palette();
        for (int index = 0; index < 256; ++index)
          grayscale[index] = Color.FromArgb(index, index, index);
        return grayscale;
      }
    }

    public static Palette PurpleScale
    {
      get
      {
        Palette purpleScale = new Palette();
        for (int index = 0; index < 256; ++index)
          purpleScale[index] = Color.FromArgb(index, 0, index);
        return purpleScale;
      }
    }

    public static Palette GreenScale
    {
      get
      {
        Palette greenScale = new Palette();
        for (int index = 0; index < 256; ++index)
          greenScale[index] = Color.FromArgb(0, index, 0);
        return greenScale;
      }
    }

    public static Palette RedScale
    {
      get
      {
        Palette redScale = new Palette();
        for (int index = 0; index < 256; ++index)
          redScale[index] = Color.FromArgb(index, 0, 0);
        return redScale;
      }
    }

    public static Palette LightBlueScale
    {
      get
      {
        Palette lightBlueScale = new Palette();
        for (int index = 0; index < 256; ++index)
          lightBlueScale[index] = Color.FromArgb(0, index, index);
        return lightBlueScale;
      }
    }

    public static Palette YellowScale
    {
      get
      {
        Palette yellowScale = new Palette();
        for (int index = 0; index < 256; ++index)
          yellowScale[index] = Color.FromArgb(index, index, 0);
        return yellowScale;
      }
    }

    public static Palette BlueScale
    {
      get
      {
        Palette blueScale = new Palette();
        for (int index = 0; index < 256; ++index)
          blueScale[index] = Color.FromArgb(0, 0, index);
        return blueScale;
      }
    }

    private static Color FromHsv(double h, double s, double v)
    {
      h %= 360.0;
      double num1 = v * s;
      double num2 = num1 * (1.0 - Math.Abs(h / 60.0 % 2.0 - 1.0));
      double num3 = v - num1;
      double num4;
      double num5;
      double num6;
      if (h >= 0.0 && h < 60.0)
      {
        num4 = num1;
        num5 = num2;
        num6 = 0.0;
      }
      else if (h >= 60.0 && h < 120.0)
      {
        num4 = num2;
        num5 = num1;
        num6 = 0.0;
      }
      else if (h >= 120.0 && h < 180.0)
      {
        num4 = 0.0;
        num5 = num1;
        num6 = num2;
      }
      else if (h >= 180.0 && h < 240.0)
      {
        num4 = 0.0;
        num5 = num2;
        num6 = num1;
      }
      else if (h >= 240.0 && h < 300.0)
      {
        num4 = num2;
        num5 = 0.0;
        num6 = num1;
      }
      else
      {
        if (h < 300.0 || h >= 360.0)
          throw new Exception("Значення не в межах діапазону 0..360");
        num4 = num1;
        num5 = 0.0;
        num6 = num2;
      }
      return Color.FromArgb((int) (Palette.Clip(num4 + num3) * (double) byte.MaxValue), (int) (Palette.Clip(num5 + num3) * (double) byte.MaxValue), (int) (Palette.Clip(num6 + num3) * (double) byte.MaxValue));
    }

    private static double Clip(double input, double min = 0.0, double max = 1.0)
    {
      if (input < min)
        return min;
      return input <= max ? input : max;
    }
  }
}
