// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.SendingReportFeedbackEventArgs3
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;

namespace SmartAssembly.SmartExceptionsCore
{
  public class SendingReportFeedbackEventArgs3 : EventArgs
  {
    private SendingReportStep3 step;
    private readonly bool failed;
    private readonly string errorMessage = string.Empty;
    private readonly string reportID = string.Empty;

    public SendingReportStep3 Step
    {
      get
      {
        try
        {
          return this.step;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }

    public bool Failed
    {
      get
      {
        try
        {
          return this.failed;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }

    public string ErrorMessage
    {
      get
      {
        try
        {
          return this.errorMessage;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }

    public string ReportID
    {
      get
      {
        try
        {
          return this.reportID;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }

    internal SendingReportFeedbackEventArgs3(SendingReportStep3 step)
      : this(step, string.Empty)
    {
    }

    internal SendingReportFeedbackEventArgs3(SendingReportStep3 step, string errorMessage)
      : this(step, errorMessage, string.Empty)
    {
    }

    internal SendingReportFeedbackEventArgs3(
      SendingReportStep3 step,
      string errorMessage,
      string reportId)
    {
      try
      {
        this.step = step;
        this.failed = errorMessage != null && errorMessage.Length > 0;
        this.errorMessage = errorMessage;
        this.reportID = reportId;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<SendingReportStep3> o2 = (Enum) step;
        string o3 = errorMessage;
        string o4 = reportId;
        StackFrameHelper.CreateException4(ex, (object) this, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }
  }
}
