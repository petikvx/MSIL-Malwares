// Decompiled with JetBrains decompiler
// Type: Dbasic.EnhancedControls.CEnhancedImageButton
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;

namespace Dbasic.EnhancedControls
{
  public class CEnhancedImageButton : Control, IImage, IEnhancedControl
  {
    public string name;
    private bool bPushed = false;
    private SolidBrush pushedBrush = new SolidBrush(Color.LightGray);
    private bool transparent = true;
    private Bitmap bitmap;
    private Bitmap button;
    private Graphics g;
    public ImageAttributes imageAttr = new ImageAttributes();
    public string imageMode;
    private Pen pen = new Pen(Color.Black);
    private SolidBrush textBrush = new SolidBrush(Color.Black);
    private SolidBrush brush = new SolidBrush(Color.Black);

    public CEnhancedImageButton() => this.Font = new Font(this.Font.Name, this.Font.Size, FontStyle.Bold);

    protected override void OnPaintBackground(PaintEventArgs pevent)
    {
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      int num = 0;
      if (this.bPushed)
        num = 1;
      if (this.button == null || this.button.Size != this.Size)
      {
        if (this.button != null)
          this.button.Dispose();
        this.button = new Bitmap(this.Width, this.Height);
        this.g = Graphics.FromImage((Image) this.button);
      }
      if (!this.transparent)
      {
        if (this.brush.Color != this.BackColor)
          this.brush.Color = this.BackColor;
        if (this.bPushed)
          this.g.FillRectangle((Brush) this.pushedBrush, 0, 0, this.Width, this.Height);
        else
          this.g.FillRectangle((Brush) this.brush, 0, 0, this.Width, this.Height);
      }
      else if (this.Parent is Panel)
        this.g.FillRectangle((Brush) new SolidBrush(this.Parent.BackColor), 0, 0, this.Width, this.Height);
      else
        this.g.DrawImage((Image) ((CEnhancedForm) this.Parent).bitmap, new Rectangle(0, 0, this.Width, this.Height), new Rectangle(this.Left, this.Top, this.Width, this.Height), GraphicsUnit.Pixel);
      if (this.bitmap != null)
      {
        switch (this.imageMode.ToLower(CRunner.cul))
        {
          case "ccenterimage":
            this.g.DrawImage((Image) this.bitmap, new Rectangle(this.Width / 2 - this.bitmap.Width / 2 + num, this.Height / 2 - this.bitmap.Height / 2 + num, this.bitmap.Width, this.bitmap.Height), 0, 0, this.bitmap.Width, this.bitmap.Height, GraphicsUnit.Pixel, this.imageAttr);
            break;
          case "cstretchimage":
            this.g.DrawImage((Image) this.bitmap, new Rectangle(num, num, this.Width, this.Height), 0, 0, this.bitmap.Width, this.bitmap.Height, GraphicsUnit.Pixel, this.imageAttr);
            break;
          default:
            this.g.DrawImage((Image) this.bitmap, new Rectangle(num, num, this.bitmap.Width, this.bitmap.Height), 0, 0, this.bitmap.Width, this.bitmap.Height, GraphicsUnit.Pixel, this.imageAttr);
            break;
        }
      }
      SizeF sizeF = this.g.MeasureString(this.Text, this.Font);
      if (this.textBrush.Color != this.ForeColor)
        this.textBrush.Color = this.ForeColor;
      this.g.DrawString(this.Text, this.Font, (Brush) this.textBrush, (float) (((double) this.Width - (double) sizeF.Width) / 2.0) + (float) num, (float) (((double) this.Height - (double) sizeF.Height) / 2.0) + (float) num);
      e.Graphics.DrawImage((Image) this.button, 0, 0);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      base.OnMouseDown(e);
      this.bPushed = true;
      this.Invalidate();
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      base.OnMouseUp(e);
      this.bPushed = false;
      this.Invalidate();
    }

    public bool Transparent
    {
      get => this.transparent;
      set
      {
        if (value && this.bitmap != null)
          this.imageAttr.SetColorKey(this.bitmap.GetPixel(0, 0), this.bitmap.GetPixel(0, 0));
        else
          this.imageAttr.ClearColorKey();
        this.transparent = value;
      }
    }

    public Bitmap MyBitmap
    {
      get => this.bitmap;
      set
      {
        this.bitmap = value != null ? new Bitmap((Image) value) : (Bitmap) null;
        if (value == null || !this.transparent)
          return;
        this.imageAttr.SetColorKey(this.bitmap.GetPixel(0, 0), this.bitmap.GetPixel(0, 0));
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (this.textBrush != null)
        this.textBrush.Dispose();
      if (this.pen != null)
        this.pen.Dispose();
      if (this.button != null)
        this.button.Dispose();
      if (this.brush != null)
        this.brush.Dispose();
      base.Dispose(disposing);
    }

    public string propName => this.name;

    public Image ReturnImage => (Image) this.bitmap;
  }
}
