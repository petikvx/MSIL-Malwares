// Decompiled with JetBrains decompiler
// Type: C3904355907.C985283518
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using System;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace C3904355907
{
  public static class C985283518
  {
    private static readonly uint[] C3554254475 = new uint[9]
    {
      1U,
      10U,
      100U,
      1000U,
      10000U,
      100000U,
      1000000U,
      10000000U,
      100000000U
    };
    private static readonly uint[] C3904355907 = new uint[10]
    {
      0U,
      2U,
      4U,
      6U,
      8U,
      1U,
      3U,
      5U,
      7U,
      9U
    };

    public static string C3554254475([In] byte[] obj0, [In] ulong obj1, [In] uint obj2, [In] bool obj3, [In] int obj4)
    {
      byte[] buffer = C3554254475.C2137352139.C3554254475(obj1);
      Array.Reverse((Array) buffer);
      byte[] hash;
      using (HMACSHA1 hmacshA1 = new HMACSHA1(obj0))
        hash = hmacshA1.ComputeHash(buffer);
      uint index = (uint) hash[hash.Length - 1] & 15U;
      if (obj4 >= 0 && obj4 < hash.Length - 4)
        index = (uint) obj4;
      uint num = (uint) (((int) hash[(int) index] & (int) sbyte.MaxValue) << 24 | ((int) hash[(int) index + 1] & (int) byte.MaxValue) << 16 | ((int) hash[(int) index + 2] & (int) byte.MaxValue) << 8 | (int) hash[(int) index + 3] & (int) byte.MaxValue) % C985283518.C3554254475[(int) obj2];
      if (obj3)
        num = num * 10U + C985283518.C3554254475(num, obj2);
      uint totalWidth = obj3 ? obj2 + 1U : obj2;
      return num.ToString((IFormatProvider) NumberFormatInfo.InvariantInfo).PadLeft((int) totalWidth, '0');
    }

    private static uint C3554254475([In] uint obj0, [In] uint obj1)
    {
      bool flag = true;
      uint num1 = 0;
      while (0U < obj1--)
      {
        uint index = obj0 % 10U;
        obj0 /= 10U;
        if (flag)
          index = C985283518.C3904355907[(int) index];
        num1 += index;
        flag = !flag;
      }
      uint num2 = num1 % 10U;
      if (num2 > 0U)
        num2 = 10U - num2;
      return num2;
    }
  }
}
