// Decompiled with JetBrains decompiler
// Type: ProjNet.Adapter.CustomerConsumerAdapter
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Roles;
using ProjNet.Rules;
using ProjNet.Shared;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;
using TYPELIBA.Importers;

namespace ProjNet.Adapter
{
  internal class CustomerConsumerAdapter : MerchantEventRole
  {
    private double m_FieldProcess;
    private double _ParamProcess;
    private double wrapperProcess;
    private double _CustomerProcess;
    private double m_ComposerProcess;
    private double m_SpecificationProcess;
    private double callbackProcess;
    private double utilsProcess;
    private double m_FactoryProcess;
    private double _SetterProcess;
    private double m_PublisherProcess;
    private double m_AlgoProcess;
    private double m_GetterProcess;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CustomerConsumerAdapter(List<Interceptor> last)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(last, false);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CustomerConsumerAdapter(List<Interceptor> task, bool iscounter)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector(task, iscounter);
      this.Name = "Transverse_Mercator";
      this.ConnectConsumer("EPSG");
      this.CountConsumer(9807L);
      Interceptor interceptor1 = this.VisitConfiguration("scale_factor");
      Interceptor interceptor2 = this.VisitConfiguration("central_meridian");
      Interceptor interceptor3 = this.VisitConfiguration("latitude_of_origin");
      Interceptor interceptor4 = this.VisitConfiguration("false_easting");
      Interceptor interceptor5 = this.VisitConfiguration("false_northing");
      if (interceptor1 == null)
        throw new ArgumentException("Missing projection parameter 'scale_factor'");
      if (interceptor2 == null)
        throw new ArgumentException("Missing projection parameter 'central_meridian'");
      if (interceptor3 == null)
        throw new ArgumentException("Missing projection parameter 'latitude_of_origin'");
      if (interceptor4 == null)
        throw new ArgumentException("Missing projection parameter 'false_easting'");
      if (interceptor5 == null)
        throw new ArgumentException("Missing projection parameter 'false_northing'");
      this.m_FieldProcess = interceptor1.LoginProcess();
      this._ParamProcess = StateProcess.PopConsumer(interceptor2.LoginProcess());
      this.wrapperProcess = StateProcess.PopConsumer(interceptor3.LoginProcess());
      this.m_GetterProcess = interceptor4.LoginProcess() * this.m_ServerProcess;
      this.m_AlgoProcess = interceptor5.LoginProcess() * this.m_ServerProcess;
      this.m_FactoryProcess = 1.0 - Math.Pow(this._AnnotationProcess / this.proxyProcess, 2.0);
      this.utilsProcess = Math.Sqrt(this.m_FactoryProcess);
      this._CustomerProcess = MerchantEventRole.CollectConsumer(this.m_FactoryProcess);
      this.m_ComposerProcess = MerchantEventRole.ConcatConsumer(this.m_FactoryProcess);
      this.m_SpecificationProcess = MerchantEventRole.DefineConsumer(this.m_FactoryProcess);
      this.callbackProcess = MerchantEventRole.VerifyConsumer(this.m_FactoryProcess);
      this.m_PublisherProcess = this.proxyProcess * MerchantEventRole.NewConsumer(this._CustomerProcess, this.m_ComposerProcess, this.m_SpecificationProcess, this.callbackProcess, this.wrapperProcess);
      this._SetterProcess = this.m_FactoryProcess / (1.0 - this.m_FactoryProcess);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] InvokeConfiguration(double[] instance)
    {
      int num1 = 6;
      double num2;
      double num3;
      double[] numArray;
      while (true)
      {
        int num4 = num1;
        double d;
        double num5;
        double num6;
        double num7;
        double cfg;
        double state;
        double x1;
        double num8;
        double x2;
        double x3;
        double x4;
        while (true)
        {
          switch (num4)
          {
            case 0:
              num5 = this.proxyProcess / Math.Sqrt(d);
              if (true)
              {
                num4 = 7;
                continue;
              }
              goto label_2;
            case 1:
            case 3:
              goto label_2;
            case 2:
            case 5:
              double consumer = MerchantEventRole.CalculateConsumer(num7 - this._ParamProcess);
              MerchantEventRole.ReadConsumer(num6, out cfg, out state);
              x1 = state * consumer;
              num8 = Math.Pow(x1, 2.0);
              num4 = 4;
              continue;
            case 4:
              x3 = this._SetterProcess * Math.Pow(state, 2.0);
              x4 = Math.Tan(num6);
              x2 = Math.Pow(x4, 2.0);
              d = 1.0 - this.m_FactoryProcess * Math.Pow(cfg, 2.0);
              goto case 0;
            case 6:
              goto label_7;
            case 7:
              double num9 = this.proxyProcess * MerchantEventRole.NewConsumer(this._CustomerProcess, this.m_ComposerProcess, this.m_SpecificationProcess, this.callbackProcess, num6);
              num2 = this.m_FieldProcess * num5 * x1 * (1.0 + num8 / 6.0 * (1.0 - x2 + x3 + num8 / 20.0 * (5.0 - 18.0 * x2 + Math.Pow(x2, 2.0) + 72.0 * x3 - 58.0 * this._SetterProcess))) + this.m_GetterProcess;
              num3 = this.m_FieldProcess * (num9 - this.m_PublisherProcess + num5 * x4 * (num8 * (0.5 + num8 / 24.0 * (5.0 - x2 + 9.0 * x3 + 4.0 * Math.Pow(x3, 2.0) + num8 / 30.0 * (61.0 - 58.0 * x2 + Math.Pow(x2, 2.0) + 600.0 * x3 - 330.0 * this._SetterProcess))))) + this.m_AlgoProcess;
              if (!CustomerConsumerAdapter.ReadCreator())
              {
                num4 = 8;
                continue;
              }
              goto case 4;
            case 8:
              goto label_3;
            case 9:
              goto label_14;
            default:
              goto label_12;
          }
        }
label_2:
        num6 = StateProcess.PopConsumer(instance[1]);
        num1 = 5;
        continue;
label_3:
        if (instance.Length >= 3)
        {
          numArray = new double[3]
          {
            num2 / this.m_ServerProcess,
            num3 / this.m_ServerProcess,
            instance[2]
          };
          num1 = 9;
          continue;
        }
        break;
label_7:
        num7 = StateProcess.PopConsumer(instance[0]);
        num1 = 3;
        continue;
label_12:
        num1 = 0;
      }
      numArray = new double[2]
      {
        num2 / this.m_ServerProcess,
        num3 / this.m_ServerProcess
      };
label_14:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] ReadConfiguration(double[] res)
    {
      int num1 = 7;
      double var1;
      double instance;
      double consumer;
      double[] numArray;
      while (true)
      {
        int num2 = num1;
        double num3;
        double d;
        double num4;
        double state;
        double cfg;
        long num5;
        long num6;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_17;
            case 1:
            case 3:
            case 6:
              goto label_13;
            case 2:
            case 10:
            case 13:
              goto label_24;
            case 4:
              num3 = res[0] * this.m_ServerProcess - this.m_GetterProcess;
              var1 = res[1] * this.m_ServerProcess - this.m_AlgoProcess;
              d = (this.m_PublisherProcess + var1 / this.m_FieldProcess) / this.proxyProcess;
              num4 = d;
              if (true)
              {
                num2 = 11;
                continue;
              }
              goto case 12;
            case 5:
              goto label_14;
            case 7:
              num5 = 6L;
              int num7 = 4;
              num2 = CustomerConsumerAdapter.ReadCreator() ? num7 : num7;
              continue;
            case 8:
              if (flag1)
              {
                MerchantEventRole.ReadConsumer(num4, out cfg, out state);
                if (true)
                {
                  num2 = 12;
                  continue;
                }
                goto label_13;
              }
              else
                goto label_7;
            case 9:
              goto label_10;
            case 11:
              num6 = 0L;
              num2 = 1;
              continue;
            case 12:
              double x1 = Math.Tan(num4);
              double x2 = this._SetterProcess * Math.Pow(state, 2.0);
              double num8 = Math.Pow(x2, 2.0);
              double x3 = Math.Pow(x1, 2.0);
              double num9 = Math.Pow(x3, 2.0);
              d = 1.0 - this.m_FactoryProcess * Math.Pow(cfg, 2.0);
              double num10 = this.proxyProcess / Math.Sqrt(d);
              double num11 = num10 * (1.0 - this.m_FactoryProcess) / d;
              double x4 = num3 / (num10 * this.m_FieldProcess);
              double num12 = Math.Pow(x4, 2.0);
              instance = num4 - num10 * x1 * num12 / num11 * (0.5 - num12 / 24.0 * (5.0 + 3.0 * x3 + 10.0 * x2 - 4.0 * num8 - 9.0 * this._SetterProcess - num12 / 30.0 * (61.0 + 90.0 * x3 + 298.0 * x2 + 45.0 * num9 - 252.0 * this._SetterProcess - 3.0 * num8)));
              consumer = MerchantEventRole.CalculateConsumer(this._ParamProcess + x4 * (1.0 - num12 / 6.0 * (1.0 + 2.0 * x3 + x2 - num12 / 20.0 * (5.0 - 2.0 * x2 + 28.0 * x3 - 3.0 * num8 + 8.0 * this._SetterProcess + 24.0 * num9))) / state);
              if (res.Length < 3)
              {
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto case 7;
              }
              else
                goto label_15;
            default:
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_24;
          }
        }
label_7:
        if (res.Length >= 3)
        {
          numArray = new double[3]
          {
            StateProcess.CheckConsumer(Math.PI / 2.0 * MerchantEventRole.WriteConsumer(var1)),
            StateProcess.CheckConsumer(this._ParamProcess),
            res[2]
          };
          num1 = 13;
          continue;
        }
        break;
label_10:
        double num13;
        num4 += num13;
        bool flag2 = Math.Abs(num13) <= 1E-10;
        num1 = 0;
        continue;
label_13:
        num13 = (d + this.m_ComposerProcess * Math.Sin(2.0 * num4) - this.m_SpecificationProcess * Math.Sin(4.0 * num4) + this.callbackProcess * Math.Sin(6.0 * num4)) / this._CustomerProcess - num4;
        num1 = 9;
        continue;
label_15:
        numArray = new double[3]
        {
          StateProcess.CheckConsumer(consumer),
          StateProcess.CheckConsumer(instance),
          res[2]
        };
        num1 = 2;
        continue;
label_17:
        if (flag2)
        {
          flag1 = Math.Abs(num4) < Math.PI / 2.0;
          num1 = 8;
        }
        else if (num6 < num5)
        {
          ++num6;
          goto label_13;
        }
        else
          goto label_19;
      }
      numArray = new double[2]
      {
        StateProcess.CheckConsumer(Math.PI / 2.0 * MerchantEventRole.WriteConsumer(var1)),
        StateProcess.CheckConsumer(this._ParamProcess)
      };
      goto label_24;
label_14:
      numArray = new double[2]
      {
        StateProcess.CheckConsumer(consumer),
        StateProcess.CheckConsumer(instance)
      };
      goto label_24;
label_19:
      throw new ArgumentException("Latitude failed to converge");
label_24:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override RepositoryProcess CreateState()
    {
      int num1 = 1;
      if (CustomerConsumerAdapter.DisableCreator())
        goto label_4;
label_1:
      RepositoryProcess tagProcess = (RepositoryProcess) this.tagProcess;
      num1 = 5;
label_4:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            flag = this.tagProcess == null;
            if (!CustomerConsumerAdapter.ReadCreator())
            {
              num1 = 3;
              continue;
            }
            goto label_8;
          case 2:
          case 4:
            goto label_1;
          case 3:
            goto label_2;
          case 5:
            goto label_8;
          default:
            int num2 = 4;
            num1 = CustomerConsumerAdapter.ReadCreator() ? num2 : num2;
            continue;
        }
      }
label_2:
      if (flag)
      {
        this.tagProcess = (StateProcess) new CustomerConsumerAdapter(this._IteratorProcess, !this._ReaderProcess);
        goto label_1;
      }
      else
        goto label_1;
label_8:
      return tagProcess;
    }

    internal static bool DisableCreator() => true;

    internal static bool ReadCreator() => false;
  }
}
