// Decompiled with JetBrains decompiler
// Type: Alero.Querying.OperatorClause
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Alero.Querying
{
  public class OperatorClause : WherePart
  {
    private readonly string _operatorName;
    private readonly List<WherePart> _parts;

    private IEnumerable<WherePart> ActiveParts => this._parts.Where<WherePart>((Func<WherePart, bool>) (x => x.Active));

    public override bool Active => this._parts.Exists((Predicate<WherePart>) (x => x.Active));

    public OperatorClause(string operatorName, params WherePart[] parts)
    {
      this._operatorName = operatorName;
      this._parts = new List<WherePart>();
      foreach (WherePart part in parts)
        this.AddPart(part);
    }

    internal override void BuildSql(BuildSqlContext context)
    {
      List<WherePart> wherePartList = new List<WherePart>(this.ActiveParts);
      if (wherePartList.Count == 0)
        return;
      if (wherePartList.Count == 1)
      {
        wherePartList[0].BuildSql(context);
      }
      else
      {
        bool flag = false;
        context.Builder.Append("(");
        foreach (WherePart wherePart in wherePartList)
        {
          if (flag)
          {
            context.Builder.Append(" ");
            context.Builder.Append(this._operatorName);
            context.Builder.Append(" ");
          }
          wherePart.BuildSql(context);
          flag = true;
        }
        context.Builder.Append(")");
      }
    }

    public void AddPart(WherePart clause)
    {
      if (clause == null)
        return;
      this._parts.Add(clause);
    }

    public int Count => this._parts.Count;

    public bool Empty => this._parts.Count == 0;

    public ReadOnlyCollection<WherePart> Parts => this._parts.AsReadOnly();
  }
}
