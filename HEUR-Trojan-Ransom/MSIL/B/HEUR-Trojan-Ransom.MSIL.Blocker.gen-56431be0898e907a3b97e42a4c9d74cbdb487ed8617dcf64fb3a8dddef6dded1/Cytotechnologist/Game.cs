// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: AdjustmentRu, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 295D2DB0-E85F-4EE4-A4D8-BB22DC4EE57D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-56431be0898e907a3b97e42a4c9d74cbdb487ed8617dcf64fb3a8dddef6dded1.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u200D‌‪⁯⁫‭‮‎‭‬‌⁮⁭‍⁮​‪‭‏⁮‭⁯‏‎‭‬‭‬⁭‬⁫‏‏‮‮‫​⁪⁮⁯‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        if (!this._finished)
          goto label_9;
label_1:
        int num1 = -491303389;
label_2:
        bool finished;
        PlayerState playerState;
        bool flag;
        int index;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1715105909)) % 14U)
          {
            case 0:
              goto label_1;
            case 1:
              ++index;
              num1 = -198964045;
              continue;
            case 2:
              playerStates = this._playerStates;
              num1 = (int) num2 * 2041340245 ^ -1107498199;
              continue;
            case 3:
              num1 = (int) num2 * -1137460270 ^ 1608381528;
              continue;
            case 4:
              finished = false;
              num1 = (int) num2 * -13128662 ^ -1228939606;
              continue;
            case 5:
              int num3 = flag ? 1831749941 : (num3 = 1645684792);
              num1 = num3 ^ (int) num2 * 804942128;
              continue;
            case 6:
              goto label_9;
            case 7:
              finished = true;
              num1 = (int) num2 * 2007227107 ^ 2032105177;
              continue;
            case 8:
              index = 0;
              num1 = (int) num2 * 307835484 ^ -341770997;
              continue;
            case 10:
              finished = true;
              num1 = (int) num2 * 730902028 ^ 112831468;
              continue;
            case 11:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * 787642259 ^ 385884787;
              continue;
            case 12:
              int num4;
              num1 = num4 = index < playerStates.Length ? -238797544 : (num4 = -406339714);
              continue;
            case 13:
              playerState = playerStates[index];
              num1 = -1417330152;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished;
label_9:
        num1 = -940171413;
        goto label_2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 1722627708;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2018907414)) % 8U)
        {
          case 0:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 793841227 ^ 1488405745;
            continue;
          case 1:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 1872232789 ^ -660972337;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * -516223601 ^ 595954902;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          case 5:
            this._finished = false;
            num1 = (int) num2 * -1012498170 ^ -1469344935;
            continue;
          case 6:
            this.Winners.Clear();
            this.Losers.Clear();
            num1 = (int) num2 * -1574899528 ^ 2032264974;
            continue;
          case 7:
            this._currentTurn = 0;
            num1 = (int) num2 * -722661987 ^ 613582712;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1836394219;
      int planningCardsCount;
      int num2;
      Player player;
      int index;
      PlayerState playerState;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1316288344)) % 26U)
        {
          case 0:
            num1 = (int) num3 * -1720198853 ^ 1258619267;
            continue;
          case 1:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -1725691235 ^ -1160158283;
            continue;
          case 2:
            int num4;
            num1 = num4 = index < this.Players.Length ? 1937234951 : (num4 = 720134854);
            continue;
          case 3:
            playerState.State = State.Playing;
            num1 = (int) num3 * -220418841 ^ 1302874548;
            continue;
          case 4:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1493835265 ^ 121425774;
            continue;
          case 5:
            index = 0;
            num1 = (int) num3 * 1872990097 ^ -1773597609;
            continue;
          case 6:
            num1 = (int) num3 * -1646879124 ^ 1022662961;
            continue;
          case 7:
            player = this.Players[index];
            num1 = (int) num3 * 1580407750 ^ 675067681;
            continue;
          case 8:
            num1 = (int) num3 * 1539499326 ^ 1712626988;
            continue;
          case 9:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -414717078 ^ -817891567;
            continue;
          case 10:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = 397859588;
            continue;
          case 11:
            playerState.Sprint = 0;
            num1 = (int) num3 * -1518031300 ^ 295315220;
            continue;
          case 12:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 564367803 ^ 534226871;
            continue;
          case 13:
            int num5 = planningCardsCount != 0 ? 821984241 : (num5 = 1892176499);
            num1 = num5 ^ (int) num3 * -1863782887;
            continue;
          case 14:
            goto label_3;
          case 15:
            int num6;
            num1 = num6 = num2 > 0 ? 1534018280 : (num6 = 88759929);
            continue;
          case 16:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num7;
            num1 = num7 = !player.UseOneMorePlanningSprint ? 1389626949 : (num7 = 2036720450);
            continue;
          case 17:
            num1 = (int) num3 * 591009064 ^ -915016735;
            continue;
          case 18:
            num2 = 0;
            num1 = (int) num3 * 1890224622 ^ -926341951;
            continue;
          case 19:
            num1 = 1822355207;
            continue;
          case 20:
            goto label_1;
          case 21:
            num2 = 0;
            num1 = 337847897;
            continue;
          case 22:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 500969015 ^ -1437939290;
            continue;
          case 23:
            num1 = 1078303138;
            continue;
          case 24:
            num1 = (int) num3 * 1815091084 ^ 367735554;
            continue;
          case 25:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -811629823 ^ 7540310;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 2064726885;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 740111366)) % 19U)
        {
          case 0:
            num1 = (int) num2 * -607877004 ^ -1891278888;
            continue;
          case 1:
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -2072389253 ^ 266648692;
            continue;
          case 2:
            this.Print((object) Game.\u202E‍⁪‬⁯‌‮‬‪‬⁬⁬‫⁬‫‌‬⁮⁭‫⁪​‍⁫⁭‎⁮‪‬⁪⁭⁭⁬⁬‎‭‍⁯‭⁪‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1462500610 ^ 2068706600;
            continue;
          case 3:
            num1 = (int) num2 * 1271894150 ^ -1168021283;
            continue;
          case 4:
            num1 = (int) num2 * 822045614 ^ -1118340029;
            continue;
          case 5:
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * -1389631658 ^ -1137119125;
            continue;
          case 6:
            int num3 = flag1 ? 277829822 : (num3 = 436916363);
            num1 = num3 ^ (int) num2 * 1902288570;
            continue;
          case 7:
            int num4 = flag2 ? 1409458270 : (num4 = 1142093960);
            num1 = num4 ^ (int) num2 * -44789993;
            continue;
          case 8:
            num1 = (int) num2 * -1214413807 ^ -1771117323;
            continue;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 2080541280 ^ 2020977699;
            continue;
          case 10:
            ++this._currentPlayer;
            num1 = (int) num2 * 589710795 ^ 1933950824;
            continue;
          case 11:
            num1 = (int) num2 * 1959056614 ^ 1228789076;
            continue;
          case 12:
            goto label_1;
          case 13:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1052423569 ^ -1762902508;
            continue;
          case 14:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 804040051 ^ 1054716836;
            continue;
          case 15:
            goto label_3;
          case 16:
            num1 = (int) num2 * 909670604 ^ 837698525;
            continue;
          case 17:
            this.PlayerTurn(this._currentPlayer);
            num1 = 307184906;
            continue;
          case 18:
            this.Print((object) Game.\u200F‎‭‪‏‬⁬‮‮⁯⁪‬⁪‫⁮‍⁪‎​⁪‍‍⁬‫‌‪⁮⁮⁪‫‫​⁯‌⁫​‪‫⁭‪‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 390304081;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 1667445706;
      while (true)
      {
        uint num2;
        int index;
        bool flag1;
        int num3;
        Card card;
        bool flag2;
        PlayerState playerState1;
        int num4;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        Player player;
        int num5;
        bool flag7;
        PlayerState playerState2;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        int num6;
        switch ((num2 = (uint) (num1 ^ 1192488903)) % 94U)
        {
          case 0:
            flag4 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -1260425039 ^ 1814865378;
            continue;
          case 1:
            flag8 = playerState2.Resources >= 0;
            num1 = (int) num2 * 100287179 ^ -717562375;
            continue;
          case 2:
            int num7 = playerState1.State != 0 ? 1713032004 : (num7 = 1446378248);
            num1 = num7 ^ (int) num2 * 1603422665;
            continue;
          case 3:
            num1 = (int) num2 * -63686 ^ -1109344453;
            continue;
          case 4:
            num1 = (int) num2 * -1002587795 ^ 468462880;
            continue;
          case 5:
            int num8 = flag10 ? 1822871803 : (num8 = 1023751399);
            num1 = num8 ^ (int) num2 * 169003806;
            continue;
          case 6:
            card = this.DrawCard();
            num1 = 1780450652;
            continue;
          case 7:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1501563018 ^ 141878584;
            continue;
          case 8:
            num1 = (int) num2 * 614701227 ^ -755795287;
            continue;
          case 9:
            num1 = (int) num2 * 703883875 ^ -1167465967;
            continue;
          case 10:
            goto label_3;
          case 11:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1388165801 ^ -765276793;
            continue;
          case 12:
            flag2 = !this.Losers.Contains(index);
            num1 = (int) num2 * -825165519 ^ -1682728276;
            continue;
          case 13:
            num1 = (int) num2 * 964158680 ^ 1175174708;
            continue;
          case 14:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202E‍⁪‬⁯‌‮‬‪‬⁬⁬‫⁬‫‌‬⁮⁭‫⁪​‍⁫⁭‎⁮‪‬⁪⁭⁭⁬⁬‎‭‍⁯‭⁪‮("\t", playerState3 != null ? Game.\u202E‮‭⁬‌‌‍‌‮‮‭⁫⁮‪⁫⁮⁯‭⁮⁯⁬⁯‌⁯​⁬⁭‮‪⁪‪‌⁪⁪⁬‌‌‏‭⁫‮((object) playerState3) : (string) null));
            num1 = 1714086021;
            continue;
          case 15:
            num1 = 1318591850;
            continue;
          case 16:
            num1 = (int) num2 * 864307776 ^ -1548183135;
            continue;
          case 17:
            num1 = (int) num2 * 191297668 ^ -243107039;
            continue;
          case 18:
            num1 = 1160551371;
            continue;
          case 19:
            num1 = (int) num2 * -701137616 ^ -2089122483;
            continue;
          case 20:
            playerState1.State = State.Won;
            num1 = (int) num2 * -568846893 ^ 703704830;
            continue;
          case 21:
            num1 = (int) num2 * -410969427 ^ -1195440628;
            continue;
          case 22:
            num1 = (int) num2 * 135176160 ^ -591575551;
            continue;
          case 23:
            flag4 = false;
            num1 = 1134153496;
            continue;
          case 24:
            num1 = 1672678428;
            continue;
          case 25:
            num1 = (int) num2 * -1965546042 ^ -1173864382;
            continue;
          case 26:
            num1 = 20894087;
            continue;
          case 27:
            flag4 = true;
            num1 = (int) num2 * -954884229 ^ -24262023;
            continue;
          case 28:
            int num9 = !flag12 ? 950929353 : (num9 = 1604253536);
            num1 = num9 ^ (int) num2 * 1349367947;
            continue;
          case 29:
            playerState2.State = State.Lose;
            num1 = 92480497;
            continue;
          case 30:
            num1 = 1989079688;
            continue;
          case 31:
            int num10 = flag1 ? 1039818035 : (num10 = 1752943841);
            num1 = num10 ^ (int) num2 * 1082684153;
            continue;
          case 32:
            int num11;
            num1 = num11 = playerState1.Sprint <= this.Rules.SprintCount ? 1160551371 : (num11 = 1781098553);
            continue;
          case 33:
            num4 = Game.\u200C​⁯⁫⁫⁬‌⁮⁮⁪‮⁪‬⁫⁫‭⁮‮‍⁬‏⁪‫‬⁪‬​‏‍​‌⁫‪⁭‏‬‎‪‫⁪‮(0, num5);
            num1 = (int) num2 * -756668730 ^ 619014168;
            continue;
          case 34:
            num1 = (int) num2 * -1630497845 ^ 368076431;
            continue;
          case 35:
            flag5 = num3 == playerIndex;
            num1 = (int) num2 * 1784426202 ^ -425066598;
            continue;
          case 36:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag9 ? (object) "ALL " : (object) "", flag7 ? (object) "receives" : (object) "pays", (object) Game.\u202C‌⁭⁫‎⁫‫⁫‏‪⁭‏‏‎⁯‮‬‌⁮‍‬⁮‎⁫⁫⁪‮‍‎⁫‭‮⁬‎‬‫⁫‍‌⁭‮(num4), flag4 ? (object) "advance" : (object) "stay");
            num1 = 443248782;
            continue;
          case 37:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -380414953 ^ 114055116;
            continue;
          case 38:
            num1 = 979016551;
            continue;
          case 39:
            num1 = (int) num2 * 2051683360 ^ 136826314;
            continue;
          case 40:
            num1 = (int) num2 * 1462307369 ^ -583060629;
            continue;
          case 41:
            int num12 = !flag13 ? -1991757963 : (num12 = -1322558421);
            num1 = num12 ^ (int) num2 * 510909936;
            continue;
          case 42:
            num1 = (int) num2 * -788414061 ^ -171235834;
            continue;
          case 43:
            num1 = (int) num2 * 272523049 ^ -623724692;
            continue;
          case 44:
            flag1 = index < this._playerStates.Length;
            num1 = 1651592922;
            continue;
          case 45:
            int num13 = flag8 ? 1335399781 : (num13 = 1384876747);
            num1 = num13 ^ (int) num2 * -171325601;
            continue;
          case 46:
            int num14 = !flag6 ? 427632575 : (num14 = 1147198701);
            num1 = num14 ^ (int) num2 * -111864066;
            continue;
          case 47:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 204255616 ^ -325933198;
            continue;
          case 48:
            num4 = card.Impact;
            num1 = (int) num2 * -1189480274 ^ 388865431;
            continue;
          case 49:
            num1 = (int) num2 * -259401703 ^ -1363601665;
            continue;
          case 50:
            flag11 = !flag7;
            num1 = (int) num2 * 513836827 ^ 332260220;
            continue;
          case 51:
            int num15 = !this.Rules.OnlyOneWinner ? 831665814 : (num15 = 214158379);
            num1 = num15 ^ (int) num2 * -1010791339;
            continue;
          case 52:
            index = 0;
            num1 = (int) num2 * 204303657 ^ -875496611;
            continue;
          case 53:
            int num16 = flag5 ? 1521174567 : (num16 = 524133520);
            num1 = num16 ^ (int) num2 * 1792864543;
            continue;
          case 54:
            num1 = (int) num2 * -1179258136 ^ 1843243684;
            continue;
          case 55:
            flag7 = card.Impact < 0;
            num1 = (int) num2 * -1946445832 ^ -1845637895;
            continue;
          case 56:
            playerState1.State = State.Lose;
            int num17 = this.Losers.Contains(playerIndex) ? -1834720810 : (num17 = -1048210479);
            num1 = num17 ^ (int) num2 * -851848684;
            continue;
          case 57:
            int num18 = flag3 ? 91659870 : (num18 = 228092562);
            num1 = num18 ^ (int) num2 * -273548939;
            continue;
          case 58:
            num1 = 1511835203;
            continue;
          case 59:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 60:
            flag4 = true;
            num1 = (int) num2 * 1155625668 ^ -1905079783;
            continue;
          case 61:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -1640653691 ^ 1731818328;
            continue;
          case 62:
            num1 = 1861641422;
            continue;
          case 63:
            playerState1.Resources -= num4;
            flag3 = playerState1.Resources < 0;
            num1 = (int) num2 * 931464430 ^ 291816266;
            continue;
          case 64:
            num1 = (int) num2 * -1535085297 ^ -1190342113;
            continue;
          case 65:
            int num19;
            num1 = num19 = num3 < this._playerStates.Length ? 1903150171 : (num19 = 2131942859);
            continue;
          case 66:
            num1 = (int) num2 * 1897958496 ^ 1823352984;
            continue;
          case 67:
            ++num3;
            num1 = 1619868624;
            continue;
          case 68:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -1317604641 ^ -1246471808;
              continue;
            }
            num6 = 0;
            break;
          case 69:
            num1 = (int) num2 * -1723328831 ^ 268820388;
            continue;
          case 70:
            playerState2.Resources -= Game.\u200C​⁯⁫⁫⁬‌⁮⁮⁪‮⁪‬⁫⁫‭⁮‮‍⁬‏⁪‫‬⁪‬​‏‍​‌⁫‪⁭‏‬‎‪‫⁪‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -2020583115 ^ -218522354;
            continue;
          case 71:
            flag10 = !flag9;
            num1 = (int) num2 * 1448962181 ^ -1777974311;
            continue;
          case 72:
            num1 = (int) num2 * 1282485699 ^ 148005559;
            continue;
          case 73:
            playerState2 = this._playerStates[index];
            num1 = 1013229881;
            continue;
          case 74:
            num1 = (int) num2 * 2011491910 ^ 402004754;
            continue;
          case 75:
            int num20 = flag11 ? 1218259213 : (num20 = 1736806890);
            num1 = num20 ^ (int) num2 * -1546179173;
            continue;
          case 76:
            ++playerState1.Sprint;
            num1 = (int) num2 * -50053346 ^ 207867778;
            continue;
          case 77:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -348238590 ^ 766065858;
            continue;
          case 78:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -978802745 ^ -2099617945;
            continue;
          case 79:
            this.Losers.Add(index);
            num1 = (int) num2 * -1234062656 ^ -2053624141;
            continue;
          case 80:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1231476168 ^ -1102638683;
            continue;
          case 81:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u202E‍⁪‬⁯‌‮‬‪‬⁬⁬‫⁬‫‌‬⁮⁭‫⁪​‍⁫⁭‎⁮‪‬⁪⁭⁭⁬⁬‎‭‍⁯‭⁪‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 461742734 ^ 1469171734;
            continue;
          case 82:
            num1 = (int) num2 * -1254454000 ^ -1697249223;
            continue;
          case 83:
            num1 = (int) num2 * 1365370392 ^ -1063967039;
            continue;
          case 84:
            int num21;
            num1 = num21 = !this.Losers.Contains(num3) ? 1492315148 : (num21 = 1482783146);
            continue;
          case 85:
            flag12 = playerState1.Sprint < 0;
            num1 = 1338957119;
            continue;
          case 86:
            goto label_1;
          case 87:
            ++index;
            num1 = 1402872185;
            continue;
          case 88:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1271824202 ^ 105244357;
            continue;
          case 89:
            flag13 = flag4;
            num1 = 729587606;
            continue;
          case 90:
            num1 = (int) num2 * -915021971 ^ -356006289;
            continue;
          case 91:
            int num22 = !flag2 ? 421566883 : (num22 = 630414202);
            num1 = num22 ^ (int) num2 * 464191184;
            continue;
          case 92:
            flag6 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 2126411529;
            continue;
          case 93:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * -1833462574 ^ -1605344985;
            continue;
          default:
            goto label_99;
        }
        flag9 = num6 != 0;
        num1 = 575739441;
      }
label_3:
      return;
label_99:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1074024504;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -300369165)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1864747294 ^ -582214711;
            continue;
          case 2:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = -1720914584;
            continue;
          case 3:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -1390830312 ^ 1108986262;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * 2130384531 ^ -1406880936;
            continue;
          case 5:
            int num3 = !flag ? 1384597415 : (num3 = 343377757);
            num1 = num3 ^ (int) num2 * -1532881008;
            continue;
          case 6:
            num1 = (int) num2 * -54986668 ^ -1691097023;
            continue;
          case 7:
            num1 = (int) num2 * -1651259546 ^ -316988766;
            continue;
          case 9:
            card2 = card1;
            num1 = (int) num2 * 2018628978 ^ -1567748023;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
      int index = 0;
label_7:
      bool flag = index < this._playerStates.Length;
      int num1 = 235436214;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1346667987)) % 8U)
        {
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202E‮‭⁬‌‌‍‌‮‮‭⁫⁮‪⁫⁮⁯‭⁮⁯⁬⁯‌⁯​⁬⁭‮‪⁪‪‌⁪⁪⁬‌‌‏‭⁫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206F⁬⁬‬⁪‍⁯‬‍‪‫‌​‍‍‍⁪‮‍⁯‏‫‍​⁬⁪‪​‍‏‫⁯‮⁫‎⁯⁭⁬‫⁭‮(strArray);
            num1 = 1593627103;
            continue;
          case 2:
            num1 = (int) num2 * -370900964 ^ -466485757;
            continue;
          case 3:
            str2 = str1;
            num1 = (int) num2 * 1958289728 ^ 559533425;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * -1446802197 ^ 1148171321;
            continue;
          case 5:
            int num3 = flag ? -697289180 : (num3 = -526963866);
            num1 = num3 ^ (int) num2 * -805193010;
            continue;
          case 6:
            goto label_7;
          case 7:
            num1 = 151289698;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more)
    {
      string str = Game.\u206C‫‏⁫​‎⁮‮⁭‏‎‮‭⁭⁯‎‪‌‍⁫⁬‏⁭‭⁯​​​⁯‏‪⁯⁮​⁯‏⁪⁭‏‮(Game.\u202E‮‭⁬‌‌‍‌‮‮‭⁫⁮‪⁫⁮⁯‭⁮⁯⁬⁯‌⁯​⁬⁭‮‪⁪‪‌⁪⁪⁬‌‌‏‭⁫‮(text), more);
label_1:
      int num1 = 981941228;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 987631848)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u200F‪⁯‭‬⁫⁯‪‎‍‭⁮⁪‫⁬⁯‍‎⁭⁫⁮⁬​‏‪⁪‍⁪⁭‪‌​‎⁯⁮‪⁫‬⁬‮‮(this._buffer, str);
            num1 = (int) num2 * -841333144 ^ 703131715;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u200D‌‪⁯⁫‭‮‎‭‬‌⁮⁭‍⁮​‪‭‏⁮‭⁯‏‎‭‬‭‬⁭‬⁫‏‏‮‮‫​⁪⁮⁯‮([In] int obj0) => new Random(obj0);

    static string \u200F‎‭‪‏‬⁬‮‮⁯⁪‬⁪‫⁮‍⁪‎​⁪‍‍⁬‫‌‪⁮⁮⁪‫‫​⁯‌⁫​‪‫⁭‪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202E‍⁪‬⁯‌‮‬‪‬⁬⁬‫⁬‫‌‬⁮⁭‫⁪​‍⁫⁭‎⁮‪‬⁪⁭⁭⁬⁬‎‭‍⁯‭⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200C​⁯⁫⁫⁬‌⁮⁮⁪‮⁪‬⁫⁫‭⁮‮‍⁬‏⁪‫‬⁪‬​‏‍​‌⁫‪⁭‏‬‎‪‫⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202C‌⁭⁫‎⁫‫⁫‏‪⁭‏‏‎⁯‮‬‌⁮‍‬⁮‎⁫⁫⁪‮‍‎⁫‭‮⁬‎‬‫⁫‍‌⁭‮([In] int obj0) => Math.Abs(obj0);

    static string \u202E‮‭⁬‌‌‍‌‮‮‭⁫⁮‪⁫⁮⁯‭⁮⁯⁬⁯‌⁯​⁬⁭‮‪⁪‪‌⁪⁪⁬‌‌‏‭⁫‮([In] object obj0) => obj0.ToString();

    static string \u206F⁬⁬‬⁪‍⁯‬‍‪‫‌​‍‍‍⁪‮‍⁯‏‫‍​⁬⁪‪​‍‏‫⁯‮⁫‎⁯⁭⁬‫⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C‫‏⁫​‎⁮‮⁭‏‎‮‭⁭⁯‎‪‌‍⁫⁬‏⁭‭⁯​​​⁯‏‪⁯⁮​⁯‏⁪⁭‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200F‪⁯‭‬⁫⁯‪‎‍‭⁮⁪‫⁬⁯‍‎⁭⁫⁮⁬​‏‪⁪‍⁪⁭‪‌​‎⁯⁮‪⁫‬⁬‮‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
