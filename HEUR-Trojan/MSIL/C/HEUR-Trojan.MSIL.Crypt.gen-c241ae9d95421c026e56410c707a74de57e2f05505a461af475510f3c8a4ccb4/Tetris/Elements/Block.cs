// Decompiled with JetBrains decompiler
// Type: Tetris.Elements.Block
// Assembly: IPropertyVa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C23A2FEC-DAFF-46A7-87BE-130D61523A70
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c241ae9d95421c026e56410c707a74de57e2f05505a461af475510f3c8a4ccb4.exe

using Game.Elements;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;

namespace Tetris.Elements
{
  public class Block : Sprite
  {
    public Block(Image image, Size size)
      : base(image, Point.Empty)
    {
label_1:
      int num1 = 88508204;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1284700313)) % 6U)
        {
          case 0:
            this.MatrixIndex = 0;
            num1 = (int) num2 * 678783463 ^ -1795757624;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.Block_Size = size;
            num1 = (int) num2 * -1921951968 ^ 1437435697;
            continue;
          case 3:
            num1 = (int) num2 * 1146955036 ^ 1521175847;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 318128118 ^ -391991082;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public int[,] Matrix
    {
      get
      {
label_1:
        int num1 = -301779207;
        int[,] matrix;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -628275769)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              matrix = this.Matrices[this.MatrixIndex];
              num1 = (int) num2 * -674803037 ^ 953752366;
              continue;
            case 3:
              num1 = (int) num2 * 948792633 ^ -796749651;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return matrix;
      }
    }

    protected List<int[,]> Matrices { get; set; }

    private int MatrixIndex { get; set; }

    public Point Location { get; set; }

    public Size Matrix_Size
    {
      get
      {
        Size matrixSize = new Size(Block.\u202A⁬‫​‫⁪‮⁬⁪⁬‭‭⁯‏⁯‭​⁫⁫‪‍‏‎‭‍‏‍⁪⁯‭⁪⁭‎⁬⁬​‮⁭‭‭‮((Array) this.Matrix, 1), Block.\u202A⁬‫​‫⁪‮⁬⁪⁬‭‭⁯‏⁯‭​⁫⁫‪‍‏‎‭‍‏‍⁪⁯‭⁪⁭‎⁬⁬​‮⁭‭‭‮((Array) this.Matrix, 0));
label_1:
        int num1 = -89148108;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -27776904)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1158418086 ^ -1058512017;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return matrixSize;
      }
    }

    public Size Block_Size { get; private set; }

    public void Rotate(int value)
    {
      int num1 = this.MatrixIndex + value;
      bool flag = num1 < 0;
label_1:
      int num2 = 2112713418;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 455440302)) % 7U)
        {
          case 0:
            this.MatrixIndex = num1;
            num2 = 1224650000;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = this.Matrices.Count - 1;
            num2 = (int) num3 * 232928026 ^ -41184613;
            continue;
          case 3:
            int num4;
            num2 = num4 = num1 == this.Matrices.Count ? 1494690799 : (num4 = 514088521);
            continue;
          case 4:
            num1 = 0;
            num2 = (int) num3 * -1243017595 ^ 268051852;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num5 = !flag ? -1304325283 : (num5 = -32513425);
            num2 = num5 ^ (int) num3 * 1162030777;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void SetDefault() => this.MatrixIndex = 0;

    public override void Draw(DrawHandler drawHandler)
    {
label_1:
      int num1 = -931020935;
      int index1;
      bool flag1;
      int index2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1164388710)) % 16U)
        {
          case 0:
            num1 = (int) num2 * 65619771 ^ 26630658;
            continue;
          case 1:
            Point position;
            ref Point local = ref position;
            int num3 = index2;
            Point location = this.Location;
            int x1 = location.X;
            int x2 = (num3 + x1) * this.Block_Size.Width;
            int num4 = index1;
            location = this.Location;
            int y1 = location.Y;
            int y2 = (num4 + y1) * this.Block_Size.Height;
            local = new Point(x2, y2);
            drawHandler.Draw(this.Image, position);
            num1 = (int) num2 * 605134557 ^ -2051510745;
            continue;
          case 2:
            ++index2;
            num1 = (int) num2 * -1894493810 ^ 441425809;
            continue;
          case 3:
            index1 = 0;
            num1 = (int) num2 * 1943594429 ^ -282290572;
            continue;
          case 4:
            goto label_3;
          case 5:
            ++index1;
            num1 = (int) num2 * -1953836680 ^ 32499452;
            continue;
          case 6:
            index2 = 0;
            num1 = -1642040587;
            continue;
          case 7:
            flag2 = index2 < this.Matrix_Size.Width;
            num1 = -493793279;
            continue;
          case 8:
            num1 = -1194970360;
            continue;
          case 9:
            num1 = (int) num2 * -836733851 ^ -1043529319;
            continue;
          case 10:
            goto label_1;
          case 11:
            int num5 = flag2 ? -1667142645 : (num5 = -1873490846);
            num1 = num5 ^ (int) num2 * -305855305;
            continue;
          case 12:
            int num6;
            num1 = num6 = this.Matrix[index1, index2] > 0 ? -757360821 : (num6 = -143845646);
            continue;
          case 13:
            int num7 = !flag1 ? 1488098107 : (num7 = 565864425);
            num1 = num7 ^ (int) num2 * -1122927975;
            continue;
          case 14:
            flag1 = index1 < this.Matrix_Size.Height;
            num1 = -2078475433;
            continue;
          case 15:
            num1 = (int) num2 * -47220430 ^ -1681357885;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    static int \u202A⁬‫​‫⁪‮⁬⁪⁬‭‭⁯‏⁯‭​⁫⁫‪‍‏‎‭‍‏‍⁪⁯‭⁪⁭‎⁬⁬​‮⁭‭‭‮([In] Array obj0, [In] int obj1) => obj0.GetLength(obj1);
  }
}
