// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: fC, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2BFFC2A0-BEF7-47FD-8B55-B5339EE53E65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-a1558391914f4235dfdcdddcdf0de915a800541a4271feb4aff34af82b83a935.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1758896508;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 115644892)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              comparand = eventHandler1;
              num1 = 342981053;
              continue;
            case 2:
              goto label_1;
            case 3:
              EventHandler eventHandler2 = (EventHandler) Square.\u206A⁭‍‏‍‬‌‍⁫‎⁬⁭⁮‮‎‌⁫‪‌‪⁯⁮‌‪⁮⁫‏‎‎‬⁭‫⁫⁮⁪‌⁪‫‫‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -1583066121 ^ 554678865;
              continue;
            case 4:
              int num3 = eventHandler1 != comparand ? 955541178 : (num3 = 2006433958);
              num1 = num3 ^ (int) num2 * 2142654255;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 686677626;
        EventHandler eventHandler2;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1596474376)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -176446957 ^ 1120746291;
              continue;
            case 2:
              comparand = eventHandler1;
              num1 = 2037292551;
              continue;
            case 3:
              goto label_3;
            case 4:
              int num3 = eventHandler1 != comparand ? 888011266 : (num3 = 2095485139);
              num1 = num3 ^ (int) num2 * -1887274254;
              continue;
            case 5:
              eventHandler2 = (EventHandler) Square.\u206D⁭‍⁭⁮‏⁭⁯‌​‭⁯⁭‮‭‫‍‫‎‬​‪​‭⁯‍‍⁫‪​‫​⁪⁬‫‍​‏‌⁮‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -2061680622 ^ -19486949;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = 2129532406;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 325471756)) % 3U)
          {
            case 1:
              specialName = Square.\u202D‎⁪‭‏⁫‮⁪‭‎​‪⁬‍⁯‌⁭‍‮‪‌‌⁬⁫‬‭‪​‮‮‭‮‫‮⁫‬‫⁬⁯⁮‮(this.CurrentSquare, \u003CModule\u003E.\u200F⁫‭​‭‍⁮‎‬‮‏​‪⁫‮‬‭⁪‌⁮⁪‎‍⁯‭⁭‮⁪⁬⁫‬⁮‭⁭​⁭‬‮⁬‫‮<string>(2000143222U), Square.\u200E‪⁪‪‫​⁮‪⁮‪‎⁪‌‫‪⁬‬‫‪‪⁬⁮‌⁪⁮⁭⁯‭⁭‭‫‏‫‍⁬‫​‎‎‭‮((object) this.Piece));
              num1 = (int) num2 * -328759053 ^ -1654236394;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = -223070336;
        char ch;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1220685451)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              ch = Square.\u206F⁭‫⁫‫⁮⁫‮‫‪‮⁪⁭‪⁬⁮⁪‎‬⁯‏‮⁭⁫‍‪⁯⁯⁮⁭‭​⁮‎‪‭‍​⁪‪‮(\u003CModule\u003E.\u200E‍⁭‏‍⁬‌⁪‏‏⁯‎‭‫⁫⁪‏‮⁪‪‪‎​⁯‭‪‪‪‫⁪‫⁭‮‮‌‪⁮‎⁯⁭‮<string>(2587039108U), this.File);
              num1 = (int) num2 * -1843697919 ^ 557003398;
              continue;
            case 2:
              currentSquare = Square.\u206C‍⁪⁭​‏​‍‮‬⁪‪‌‪‍⁯‭‫⁪‫⁪⁮⁪⁪⁫‎⁮‍⁫‮⁮​⁯⁮‎‌⁪⁪‍‏‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -187631609 ^ -1031195626;
              continue;
            case 3:
              num1 = (int) num2 * -1545711767 ^ 610632044;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = -833319986;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -179222782)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * 2040548984 ^ 962029848;
              continue;
            }
            goto label_5;
          case 2:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = -734336212;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1680170233)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -1177034850 ^ -871701672;
            continue;
          case 1:
            num1 = (int) num2 * -1779540449 ^ -1323425744;
            continue;
          case 2:
            this.Rank = rank;
            this.Name = Square.\u206C‍⁪⁭​‏​‍‮‬⁪‪‌‪‍⁯‭‫⁪‫⁪⁮⁪⁪⁫‎⁮‍⁫‮⁮​⁯⁮‎‌⁪⁪‍‏‮(Square.\u206F⁭‫⁫‫⁮⁫‮‫‪‮⁪⁭‪⁬⁮⁪‎‬⁯‏‮⁭⁫‍‪⁯⁯⁮⁭‭​⁮‎‪‭‍​⁪‪‮(\u003CModule\u003E.\u200F⁫‭​‭‍⁮‎‬‮‏​‪⁫‮‬‭⁪‌⁮⁪‎‍⁯‭⁭‮⁪⁬⁫‬⁮‭⁭​⁭‬‮⁬‫‮<string>(1438604365U), file).ToString(), (this.Rank + 1).ToString());
            num1 = (int) num2 * 1183758210 ^ -261758367;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          case 5:
            this.Board = Board;
            this.File = file;
            num1 = (int) num2 * 68073653 ^ 1796054938;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = 253431000;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1554189359)) % 11U)
        {
          case 0:
            int num3 = flag2 ? -585184177 : (num3 = -903297485);
            num1 = num3 ^ (int) num2 * 170866713;
            continue;
          case 1:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = 47699534;
            continue;
          case 2:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 1575722962 ^ 1736182335;
            continue;
          case 3:
            flag1 = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * -969023243 ^ 1953258000;
            continue;
          case 4:
            num1 = (int) num2 * -1523480609 ^ 1703088456;
            continue;
          case 5:
            goto label_3;
          case 6:
            int num4 = flag1 ? 1787976914 : (num4 = 2074670698);
            num1 = num4 ^ (int) num2 * 594897232;
            continue;
          case 7:
            goto label_1;
          case 8:
            flag2 = !this.Board.DisableTurns;
            num1 = (int) num2 * -1071252668 ^ 1434045341;
            continue;
          case 9:
            num1 = (int) num2 * 1575493036 ^ -1131950037;
            continue;
          case 10:
            num1 = 467882829;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private bool getSide(Square x)
    {
      if (this.Board.DisableTurns)
        goto label_4;
label_1:
      int num1 = 1816092524;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 951320654)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -1959171387 ^ 1008839403;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
      goto label_5;
label_7:
      bool side;
      return side;
label_4:
      num3 = 1;
label_5:
      side = num3 != 0;
      num1 = 1319874179;
      goto label_2;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 1094420895;
      while (true)
      {
        uint num2;
        List<PossibleMoves> move;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 1037824657)) % 80U)
        {
          case 0:
            num1 = (int) num2 * 400221463 ^ 103062428;
            continue;
          case 1:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            goto label_60;
          case 2:
            num1 = (int) num2 * 819852886 ^ 693730229;
            continue;
          case 3:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1627961698 ^ 1137454094;
            continue;
          case 4:
            to.HighLight();
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200D‫‌​‬⁫‏⁭​​‪‬‫‭​⁮‎‎‌⁫​⁭​‮⁫‭‮‍‪‌‭‬⁫‌‭‬⁫⁭⁮⁫‮<string>(4263957837U);
            num1 = (int) num2 * 203789294 ^ 1889308337;
            continue;
          case 5:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -1174954550 ^ -646254205;
            continue;
          case 6:
            int num5;
            num1 = num5 = !flag7 ? 1766225289 : (num5 = 2012894307);
            continue;
          case 7:
            num1 = 369401881;
            continue;
          case 8:
            flag1 = move.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * -2086634003 ^ -949439616;
            continue;
          case 9:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -854569397 ^ -1281541559;
            continue;
          case 10:
            num1 = (int) num2 * 549780415 ^ -1106203708;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num2 * 568353240 ^ -1153251411;
            continue;
          case 13:
            this.msg = \u003CModule\u003E.\u202D‮‬‪⁯‌⁫⁭​⁫⁪⁯⁫‏​‪⁮⁫⁮⁯‬‏⁮‌‎‪⁫‬⁭‪⁪‭⁭⁮‭‫⁫⁪⁬‮<string>(3913542810U);
            num1 = (int) num2 * 2135832956 ^ 1802535938;
            continue;
          case 14:
            this.msg = \u003CModule\u003E.\u200F⁫‭​‭‍⁮‎‬‮‏​‪⁫‮‬‭⁪‌⁮⁪‎‍⁯‭⁭‮⁪⁬⁫‬⁮‭⁭​⁭‬‮⁬‫‮<string>(3017496057U);
            num1 = (int) num2 * -800276994 ^ 1897828406;
            continue;
          case 15:
            num4 = this.getSide(to) ? 1 : 0;
            break;
          case 16:
            int num6 = flag5 ? 1334357374 : (num6 = 1525266921);
            num1 = num6 ^ (int) num2 * 1506610613;
            continue;
          case 17:
            this.msg = \u003CModule\u003E.\u202E⁪⁭⁪‍‫⁭‏⁪⁪‏‪⁭⁯‭‫‏‪‬​‬‭‭⁮​⁫‫‭⁬⁭​⁫⁮‮⁮‏⁬⁫‍‮<string>(3303730062U);
            int num7 = this.Board.From.Piece.Kind != Pieces.Pawn ? 1866703649 : (num7 = 1357464176);
            num1 = num7 ^ (int) num2 * 1123213184;
            continue;
          case 18:
            num1 = (int) num2 * -1479499465 ^ -1625999873;
            continue;
          case 19:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 73815129 ^ 1352403470;
            continue;
          case 20:
            num1 = (int) num2 * -1971078093 ^ -219745325;
            continue;
          case 21:
            int num8;
            num1 = num8 = this.getSide(this.Board.From) ? 527864943 : (num8 = 1060782278);
            continue;
          case 22:
            num1 = (int) num2 * 977203296 ^ -333408297;
            continue;
          case 23:
            Square.action(this.msg);
            num1 = 1294991795;
            continue;
          case 24:
            num1 = 673997990;
            continue;
          case 25:
            num1 = (int) num2 * 1737776424 ^ -1903997555;
            continue;
          case 26:
            num1 = (int) num2 * -1009619825 ^ 206483506;
            continue;
          case 27:
            this.msg = \u003CModule\u003E.\u200F⁫‭​‭‍⁮‎‬‮‏​‪⁫‮‬‭⁪‌⁮⁪‎‍⁯‭⁭‮⁪⁬⁫‬⁮‭⁭​⁭‬‮⁬‫‮<string>(603292133U);
            int num9 = this.Board.lights.MoveList[this.Board.From.Piece.Id].Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 1237309476 : (num9 = 29822404);
            num1 = num9 ^ (int) num2 * -29087263;
            continue;
          case 28:
            num1 = (int) num2 * 1408158560 ^ -265895190;
            continue;
          case 29:
            num1 = (int) num2 * 335623692 ^ 1499013893;
            continue;
          case 30:
            int num10 = Square.\u200D⁪‮⁫⁮‭‏‬‬‫⁬​⁭⁯‍‍⁮‮⁬‌⁮⁪‮‎⁪‭⁪​‫‬⁮⁭⁫​⁮​⁫‍‭‫‮(e) == MouseButtons.Left ? 1926114351 : (num10 = 1245138312);
            num1 = num10 ^ (int) num2 * 732247153;
            continue;
          case 31:
            this.msg = Square.\u206A⁫​‫​⁬⁬‪‭⁭‎​‏‏‬‮‭‍‌⁬​‮‎‫⁭⁯‍‭‪‏⁭⁭⁮‫⁪⁮‮‬‬‬‮(\u003CModule\u003E.\u200D‫‌​‬⁫‏⁭​​‪‬‫‭​⁮‎‎‌⁫​⁭​‮⁫‭‮‍‪‌‭‬⁫‌‭‬⁫⁭⁮⁫‮<string>(37111753U), (object) move.Count);
            num1 = (int) num2 * -14511498 ^ 1666059388;
            continue;
          case 32:
            to.MovePawn(this.Board.From);
            num1 = 957322098;
            continue;
          case 33:
            num1 = (int) num2 * -967763471 ^ -1182365358;
            continue;
          case 34:
            num1 = (int) num2 * 1847927513 ^ -1926561614;
            continue;
          case 35:
            num1 = (int) num2 * 268849161 ^ 866030087;
            continue;
          case 36:
            this.msg = \u003CModule\u003E.\u200D‫‌​‬⁫‏⁭​​‪‬‫‭​⁮‎‎‌⁫​⁭​‮⁫‭‮‍‪‌‭‬⁫‌‭‬⁫⁭⁮⁫‮<string>(3520211717U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 329801003 ^ 2002879697;
            continue;
          case 37:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200D‫‌​‬⁫‏⁭​​‪‬‫‭​⁮‎‎‌⁫​⁭​‮⁫‭‮‍‪‌‭‬⁫‌‭‬⁫⁭⁮⁫‮<string>(3520211717U);
            num1 = (int) num2 * -567372792 ^ -2078654256;
            continue;
          case 38:
            to.HighLight();
            num1 = (int) num2 * 749282711 ^ 416956081;
            continue;
          case 39:
            int num11 = !flag4 ? 151915142 : (num11 = 129074469);
            num1 = num11 ^ (int) num2 * -956897093;
            continue;
          case 40:
            if (to.Piece != null)
            {
              num1 = 2087983246;
              continue;
            }
            num4 = 0;
            break;
          case 41:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 443553371 ^ 527492801;
            continue;
          case 42:
            int num12 = !flag2 ? 876853125 : (num12 = 816196455);
            num1 = num12 ^ (int) num2 * -524137507;
            continue;
          case 43:
            to.HighLight();
            num1 = (int) num2 * -516484083 ^ -1572529341;
            continue;
          case 44:
            num1 = (int) num2 * -496516235 ^ -239074817;
            continue;
          case 45:
            this.Board.From = (Square) null;
            num1 = (int) num2 * -42883367 ^ 1335652110;
            continue;
          case 46:
            int num13;
            num1 = num13 = !this.Board.DisableTurns ? 136139905 : (num13 = 427679499);
            continue;
          case 47:
            num1 = (int) num2 * -1312896463 ^ 730256136;
            continue;
          case 48:
            num1 = 1959384970;
            continue;
          case 49:
            goto label_3;
          case 50:
            flag3 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * 2028180575 ^ 76539790;
            continue;
          case 51:
            num1 = (int) num2 * 241385662 ^ -264154949;
            continue;
          case 52:
            num1 = (int) num2 * -1571558462 ^ -2067591028;
            continue;
          case 53:
            num1 = (int) num2 * 1930150757 ^ -1442644696;
            continue;
          case 54:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = 748377196;
            continue;
          case 55:
            int num14 = !flag6 ? -316651873 : (num14 = -1668401558);
            num1 = num14 ^ (int) num2 * -2082519496;
            continue;
          case 56:
            this.msg = \u003CModule\u003E.\u202D‮‬‪⁯‌⁫⁭​⁫⁪⁯⁫‏​‪⁮⁫⁮⁯‬‏⁮‌‎‪⁫‬⁭‪⁪‭⁭⁮‭‫⁫⁪⁬‮<string>(2736560343U);
            num1 = 369401881;
            continue;
          case 57:
            int num15 = !flag1 ? 1257562242 : (num15 = 94128527);
            num1 = num15 ^ (int) num2 * -1022830883;
            continue;
          case 58:
            this.Board.From = to;
            num1 = (int) num2 * -11470595 ^ -489075145;
            continue;
          case 59:
            num1 = (int) num2 * -540885590 ^ -1956606290;
            continue;
          case 60:
            num1 = (int) num2 * 825948090 ^ -1176823669;
            continue;
          case 61:
            to = this;
            num1 = (int) num2 * -1319864415 ^ -1510008669;
            continue;
          case 62:
            move = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 86542251 ^ -1906935580;
            continue;
          case 63:
            if (this.Board.From == null)
            {
              num3 = 0;
              goto label_60;
            }
            else
            {
              num1 = (int) num2 * -2119394032 ^ 2035149136;
              continue;
            }
          case 64:
            num1 = (int) num2 * -825478497 ^ -742085272;
            continue;
          case 65:
            int num16 = !flag3 ? -275730713 : (num16 = -102908306);
            num1 = num16 ^ (int) num2 * -1742273421;
            continue;
          case 66:
            num1 = (int) num2 * 1753508748 ^ -358632177;
            continue;
          case 67:
            num1 = 668586748;
            continue;
          case 68:
            to.HighLight();
            num1 = (int) num2 * 989113123 ^ 108829704;
            continue;
          case 69:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -770002853 ^ 1685042658;
            continue;
          case 70:
            num1 = 1060782278;
            continue;
          case 71:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 178027530 ^ -410445729;
            continue;
          case 72:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 354907359 ^ 138641375;
            continue;
          case 73:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 534338446 ^ -379325962;
            continue;
          case 74:
            flag6 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = 171083142;
            continue;
          case 75:
            num1 = (int) num2 * -1239536000 ^ 1776101190;
            continue;
          case 76:
            flag2 = to.Piece == null & flag7;
            num1 = (int) num2 * -1832030870 ^ -1999442269;
            continue;
          case 77:
            num1 = (int) num2 * -606008522 ^ -660325460;
            continue;
          case 78:
            flag4 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * -1685680365 ^ 1648830300;
            continue;
          case 79:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1666669543 ^ 332225236;
            continue;
          default:
            goto label_88;
        }
        flag5 = num4 != 0;
        num1 = 474958369;
        continue;
label_60:
        flag7 = num3 != 0;
        num1 = 834199165;
      }
label_3:
      return;
label_88:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = -706385723;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -336304508)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 1394973091 ^ 1197023328;
            continue;
          case 1:
            int num3 = this.Board.From != null ? -1265571935 : (num3 = -1233844286);
            num1 = num3 ^ (int) num2 * 1830491741;
            continue;
          case 2:
            num1 = (int) num2 * 1755651868 ^ 1069404795;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 715978857 ^ -805202259;
            continue;
          case 5:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * 963532487 ^ -1229794491;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 1916273937 ^ -1127975192;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
      bool flag1 = this.Piece.Color == PieceColor.White;
label_1:
      int num1 = 2126497582;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1416362242)) % 35U)
        {
          case 0:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1291097774 ^ -145937277;
            continue;
          case 1:
            num1 = (int) num2 * -1371259210 ^ -626105518;
            continue;
          case 2:
            flag6 = flag5;
            num1 = (int) num2 * 357799699 ^ 880469725;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1521040255 ^ -893557434;
            continue;
          case 5:
            int num5 = flag8 ? -987969044 : (num5 = -1491130998);
            num1 = num5 ^ (int) num2 * -1930685025;
            continue;
          case 6:
            int num6 = !flag6 ? 1759383679 : (num6 = 374301443);
            num1 = num6 ^ (int) num2 * 279890702;
            continue;
          case 7:
            flag3 = from.Piece.Color == PieceColor.White;
            num1 = 647574646;
            continue;
          case 8:
            flag2 = true;
            num1 = (int) num2 * -1766328403 ^ 465214468;
            continue;
          case 9:
            int num7 = flag4 ? -2121444713 : (num7 = -1117096555);
            num1 = num7 ^ (int) num2 * -154647262;
            continue;
          case 10:
            from.Piece = (ChessPiece) null;
            num1 = 1424036415;
            continue;
          case 11:
            int num8 = !flag7 ? -1339222325 : (num8 = -1426809027);
            num1 = num8 ^ (int) num2 * -683942453;
            continue;
          case 12:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * 1673388641 ^ 1233476735;
            continue;
          case 13:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 1393762257 ^ 1760200978;
            continue;
          case 14:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 268721404;
            continue;
          case 15:
            this.handleWhiteCastling();
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1404685152 ^ -1442506846;
              continue;
            }
            num4 = 0;
            goto label_34;
          case 16:
            this.handleBlackCastling();
            num1 = (int) num2 * 1018712609 ^ -679710490;
            continue;
          case 18:
            flag2 = true;
            num1 = (int) num2 * -1102914323 ^ 1798390736;
            continue;
          case 19:
            num1 = (int) num2 * -125489193 ^ 2087966874;
            continue;
          case 20:
            flag8 = this.Piece.Color == PieceColor.Black;
            num1 = 2013747115;
            continue;
          case 21:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_34;
          case 22:
            int num9 = flag3 ? 11312721 : (num9 = 631065754);
            num1 = num9 ^ (int) num2 * 250171900;
            continue;
          case 23:
            num1 = (int) num2 * -753382460 ^ 1625567322;
            continue;
          case 24:
            if (flag2)
            {
              num1 = (int) num2 * -909360694 ^ 23284817;
              continue;
            }
            goto label_54;
          case 25:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 1084996231;
            continue;
          case 26:
            num1 = 1455387261;
            continue;
          case 27:
            flag2 = false;
            flag5 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 1646711685 ^ -1583220460;
            continue;
          case 28:
            this.Piece = from.Piece;
            num1 = 149999150;
            continue;
          case 29:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 30:
            int num10 = flag1 ? 62515963 : (num10 = 1547715151);
            num1 = num10 ^ (int) num2 * 853772579;
            continue;
          case 31:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 189456819 ^ -1422390066;
            continue;
          case 32:
            num1 = 1812855833;
            continue;
          case 33:
            num1 = (int) num2 * 1743669636 ^ -1944661672;
            continue;
          case 34:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1727554795 ^ -1903113542;
            continue;
          default:
            goto label_43;
        }
        flag7 = num3 != 0;
        num1 = 340374364;
        continue;
label_34:
        flag4 = num4 != 0;
        num1 = 806160825;
      }
label_43:
      Promotion promotion = new Promotion(Square.\u206B‭‫⁪‌⁪⁮‍​⁮​⁬‪‏​⁮⁪⁯⁬‎⁯⁬‭‪‏‮‭‫‌⁪‮‏⁬‬⁬‍⁫⁪‮‎‮());
      try
      {
        int num11 = (int) Square.\u206D​‫‌‮‌‫‫‍‍⁪⁮‭‌​⁭‌⁫​⁫⁪‬‮⁭⁭⁬‪⁭⁬⁬‪‬‫⁮‪‏⁮‪⁯⁭‮((Form) promotion);
        this.Kind = promotion.Piece;
      }
      finally
      {
        if (promotion != null)
        {
label_46:
          int num12 = 858775553;
          while (true)
          {
            uint num13;
            switch ((num13 = (uint) (num12 ^ 1416362242)) % 3U)
            {
              case 1:
                Square.\u200C‬‎⁫⁭​‍​‭‌‌⁬⁪⁬⁬⁫⁯‫⁯⁮​‭⁯‍‪⁯‌⁯‍‭⁪⁬‎‬⁬‍‮‏⁭⁪‮((IDisposable) promotion);
                num12 = (int) num13 * 1271566627 ^ 213936139;
                continue;
              case 2:
                goto label_46;
              default:
                goto label_50;
            }
          }
        }
label_50:;
      }
label_51:
      int num14 = 575689963;
label_52:
      while (true)
      {
        uint num15;
        switch ((num15 = (uint) (num14 ^ 1416362242)) % 5U)
        {
          case 0:
            goto label_53;
          case 1:
            this.SwitchPlayer();
            num14 = (int) num15 * 1344261340 ^ -2114036045;
            continue;
          case 2:
            goto label_51;
          case 3:
            goto label_54;
          case 4:
            PlaySound.Play();
            num14 = (int) num15 * 923217934 ^ 1437593378;
            continue;
          default:
            goto label_48;
        }
      }
label_53:
      return;
label_48:
      return;
label_54:
      this.Board.lights.FindAllMoves();
      num14 = 1679837301;
      goto label_52;
    }

    private void MovePawn(Square from)
    {
      ChessPiece chessPiece = (ChessPiece) null;
label_1:
      int num1 = -71160451;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -318119614)) % 29U)
        {
          case 0:
            num1 = (int) num2 * -552737974 ^ -103331630;
            continue;
          case 1:
            num3 = this.Rank == 4 ? 1 : 0;
            goto label_14;
          case 2:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 546994977 ^ 538004565;
            continue;
          case 3:
            flag1 = this.Piece.Color == PieceColor.White;
            flag7 = flag1;
            num1 = (int) num2 * 681471459 ^ -1065314931;
            continue;
          case 4:
            num1 = -1258756668;
            continue;
          case 5:
            this.Piece = from.Piece;
            this.Board.lastPassantPawn = (ChessPiece) null;
            int num6 = this.Piece.Kind != Pieces.Pawn ? 498282350 : (num6 = 1600000143);
            num1 = num6 ^ (int) num2 * 1989273816;
            continue;
          case 6:
            flag4 = flag5;
            num1 = (int) num2 * 963192611 ^ -1568495761;
            continue;
          case 7:
            int num7 = !flag3 ? -932773294 : (num7 = -1924044337);
            num1 = num7 ^ (int) num2 * 146406915;
            continue;
          case 8:
            if (flag4)
            {
              num1 = (int) num2 * 1771737652 ^ -1912044066;
              continue;
            }
            goto label_87;
          case 9:
            from.Piece = (ChessPiece) null;
            num1 = -300624188;
            continue;
          case 10:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 11:
            num1 = (int) num2 * 922998744 ^ 100450517;
            continue;
          case 12:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 613016193 ^ 222790337;
            continue;
          case 13:
            flag5 = true;
            num1 = (int) num2 * -1616002445 ^ 1836713480;
            continue;
          case 14:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            chessPiece = this.handleWhiteCastling();
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1432868397 ^ -431670307;
              continue;
            }
            num5 = 0;
            goto label_21;
          case 15:
            flag5 = false;
            num1 = -923155839;
            continue;
          case 16:
            num5 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_21;
          case 17:
            int num8 = !flag7 ? -1422986895 : (num8 = -1144833274);
            num1 = num8 ^ (int) num2 * 2019338737;
            continue;
          case 18:
            num1 = -354811230;
            continue;
          case 20:
            chessPiece = this.handleBlackCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -1535563651 ^ 211156892;
            continue;
          case 21:
            int num9 = flag6 ? 245120325 : (num9 = 687837237);
            num1 = num9 ^ (int) num2 * -48778140;
            continue;
          case 22:
            goto label_1;
          case 23:
            num1 = (int) num2 * -1361805538 ^ -211272518;
            continue;
          case 24:
            num1 = -2024502410;
            continue;
          case 25:
            int num10 = flag2 ? -1574307983 : (num10 = -1060937102);
            num1 = num10 ^ (int) num2 * 1991973499;
            continue;
          case 26:
            num1 = -1156627898;
            continue;
          case 27:
            if (this.Rank == 3)
            {
              num3 = 1;
              goto label_14;
            }
            else
            {
              num1 = (int) num2 * -182223901 ^ -1127476157;
              continue;
            }
          case 28:
            flag5 = true;
            num1 = (int) num2 * -805014546 ^ -316043771;
            continue;
          default:
            goto label_40;
        }
        flag3 = num4 != 0;
        num1 = -1246985325;
        continue;
label_14:
        flag2 = num3 != 0;
        num1 = -1609781764;
        continue;
label_21:
        flag6 = num5 != 0;
        num1 = -1199668899;
      }
label_40:
      Promotion promotion = new Promotion(Square.\u206B‭‫⁪‌⁪⁮‍​⁮​⁬‪‏​⁮⁪⁯⁬‎⁯⁬‭‪‏‮‭‫‌⁪‮‏⁬‬⁬‍⁫⁪‮‎‮());
      try
      {
        int num11 = (int) Square.\u206D​‫‌‮‌‫‫‍‍⁪⁮‭‌​⁭‌⁫​⁫⁪‬‮⁭⁭⁬‪⁭⁬⁬‪‬‫⁮‪‏⁮‪⁯⁭‮((Form) promotion);
        this.Kind = promotion.Piece;
      }
      finally
      {
        if (promotion != null)
        {
label_43:
          int num12 = -230126352;
          while (true)
          {
            uint num13;
            switch ((num13 = (uint) (num12 ^ -318119614)) % 3U)
            {
              case 0:
                goto label_43;
              case 2:
                Square.\u200C‬‎⁫⁭​‍​‭‌‌⁬⁪⁬⁬⁫⁯‫⁯⁮​‭⁯‍‪⁯‌⁯‍‭⁪⁬‎‬⁬‍‮‏⁭⁪‮((IDisposable) promotion);
                num12 = (int) num13 * -894560002 ^ -715236545;
                continue;
              default:
                goto label_47;
            }
          }
        }
label_47:;
      }
label_48:
      int num14 = -1387602479;
label_49:
      while (true)
      {
        uint num15;
        int rank;
        Square square1;
        bool isOnCheck;
        bool flag8;
        bool flag9;
        int file;
        bool flag10;
        Square square2;
        switch ((num15 = (uint) (num14 ^ -318119614)) % 49U)
        {
          case 0:
            this.Board.lights.FindAllMoves();
            num14 = -1527555711;
            continue;
          case 1:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num14 = (int) num15 * -1226417465 ^ -131453913;
            continue;
          case 2:
            flag10 = this.Piece.Kind == Pieces.King;
            num14 = (int) num15 * 515015643 ^ 271250055;
            continue;
          case 3:
            num14 = (int) num15 * 494409324 ^ 1590849519;
            continue;
          case 4:
            num14 = (int) num15 * 1003688813 ^ 61768494;
            continue;
          case 5:
            PlaySound.Play();
            num14 = -928010272;
            continue;
          case 6:
            num14 = -1095538207;
            continue;
          case 7:
            int num16;
            num14 = num16 = chessPiece == null ? -672926418 : (num16 = -1245110768);
            continue;
          case 8:
            num14 = (int) num15 * -1785855478 ^ -1673426638;
            continue;
          case 9:
            this.Board.BlackCanCastleKingSide = true;
            num14 = (int) num15 * 182956910 ^ -928571146;
            continue;
          case 10:
            num14 = (int) num15 * 944129341 ^ -1597526520;
            continue;
          case 11:
            this.SwitchPlayer();
            num14 = (int) num15 * -246269669 ^ -1687487158;
            continue;
          case 12:
            this.msg = \u003CModule\u003E.\u202D‮‬‪⁯‌⁫⁭​⁫⁪⁯⁫‏​‪⁮⁫⁮⁯‬‏⁮‌‎‪⁫‬⁭‪⁪‭⁭⁮‭‫⁫⁪⁬‮<string>(3176792534U);
            int num17 = !flag1 ? -1293267447 : (num17 = -356022057);
            num14 = num17 ^ (int) num15 * 1229249196;
            continue;
          case 13:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            this.Board.WhiteCanCastleQueenSide = true;
            num14 = (int) num15 * 504341037 ^ -2023317890;
            continue;
          case 14:
            int num18 = flag9 ? 816103263 : (num18 = 1746264159);
            num14 = num18 ^ (int) num15 * -1012777464;
            continue;
          case 15:
            this.Board.WhiteCanCastleKingSide = true;
            num14 = (int) num15 * 1008402434 ^ 453653039;
            continue;
          case 16:
            square1.Piece = chessPiece;
            int num19 = flag1 ? -1478393672 : (num19 = -720859717);
            num14 = num19 ^ (int) num15 * -693591589;
            continue;
          case 17:
            file = chessPiece.Current.File;
            num14 = (int) num15 * -666053548 ^ 336958410;
            continue;
          case 18:
            goto label_87;
          case 19:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num14 = (int) num15 * -1581098997 ^ 567273762;
            continue;
          case 20:
            num14 = (int) num15 * -195685969 ^ -770146821;
            continue;
          case 21:
            num14 = (int) num15 * -1627776502 ^ -496149833;
            continue;
          case 22:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num14 = -1760495780;
            continue;
          case 23:
            this.msg = \u003CModule\u003E.\u200F⁫‭​‭‍⁮‎‬‮‏​‪⁫‮‬‭⁪‌⁮⁪‎‍⁯‭⁭‮⁪⁬⁫‬⁮‭⁭​⁭‬‮⁬‫‮<string>(146822730U);
            num14 = -1567958615;
            continue;
          case 24:
            this.Piece = (ChessPiece) null;
            num14 = (int) num15 * -1355869494 ^ 1921542282;
            continue;
          case 25:
            isOnCheck = this.Board.lights.IsOnCheck;
            num14 = (int) num15 * 1885376660 ^ -691241504;
            continue;
          case 26:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num14 = -258890104;
            continue;
          case 27:
            num14 = (int) num15 * -936961603 ^ 694146776;
            continue;
          case 28:
            goto label_48;
          case 29:
            square2 = this.Board[0, rank];
            break;
          case 30:
            num14 = (int) num15 * 601882148 ^ -408039245;
            continue;
          case 31:
            flag8 = this.Board.lights.IsOnCheck;
            num14 = (int) num15 * 1940777615 ^ -1602186927;
            continue;
          case 32:
            this.Board.lights.FindAllMoves();
            num14 = (int) num15 * -1402612309 ^ -824846379;
            continue;
          case 33:
            num14 = -920642015;
            continue;
          case 34:
            rank = chessPiece.Current.Rank;
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num14 = (int) num15 * -295576424 ^ -792312446;
            continue;
          case 35:
            num14 = (int) num15 * -29591776 ^ 1333919945;
            continue;
          case 36:
            flag8 = true;
            num14 = (int) num15 * -397953089 ^ -332937866;
            continue;
          case 37:
            num14 = -128988753;
            continue;
          case 38:
            num14 = (int) num15 * 41982938 ^ -1545212994;
            continue;
          case 39:
            from.Piece = this.Piece;
            num14 = (int) num15 * 262387399 ^ -2001740328;
            continue;
          case 40:
            this.Board.BlackCanCastleQueenSide = true;
            num14 = (int) num15 * 796080405 ^ -1505075963;
            continue;
          case 41:
            int num20 = !flag10 ? -103121835 : (num20 = -2011960586);
            num14 = num20 ^ (int) num15 * 311490709;
            continue;
          case 42:
            flag9 = flag8;
            num14 = -731694527;
            continue;
          case 43:
            num14 = (int) num15 * -1714548874 ^ 711579015;
            continue;
          case 44:
            num14 = (int) num15 * 299838212 ^ -125182356;
            continue;
          case 45:
            int num21 = isOnCheck ? 316314483 : (num21 = 32237139);
            num14 = num21 ^ (int) num15 * -1138952606;
            continue;
          case 46:
            num14 = (int) num15 * 30304365 ^ 1812497263;
            continue;
          case 47:
            int num22 = this.Board.lights.KingColorOnCheck != this.Piece.Color ? 1044011992 : (num22 = 1263359056);
            num14 = num22 ^ (int) num15 * -1685074289;
            continue;
          case 48:
            goto label_50;
          default:
            goto label_45;
        }
        square1 = square2;
        num14 = -1239178927;
      }
label_50:
      return;
label_45:
      return;
label_87:
      this.Board.lights.IsOnCheck = false;
      num14 = -588792432;
      goto label_49;
    }

    private ChessPiece handleBlackCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
      if (this.Board.BlackCanCastleKingSide)
        goto label_37;
label_1:
      int num1 = -1245974045;
label_2:
      ChessPiece chessPiece2;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        Square square1;
        Square square2;
        bool flag3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1845314406)) % 35U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = -1205074090;
            continue;
          case 2:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -2009904891 ^ 1833139793;
            continue;
          case 3:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 381896456 ^ 320872824;
              continue;
            }
            num3 = 1;
            break;
          case 4:
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 562515524 ^ -1860777481;
            continue;
          case 5:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = -940712291;
            continue;
          case 6:
            square1 = this.Board[5, 7];
            square1.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -1519579946 ^ -1682287579;
            continue;
          case 7:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 103595568 ^ -921278447;
            continue;
          case 8:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 988251988 ^ 113584797;
            continue;
          case 9:
            this.Board.BlackCanCastleKingSide = false;
            num1 = -1507725852;
            continue;
          case 10:
            num1 = (int) num2 * -1933525378 ^ 666106217;
            continue;
          case 11:
            num1 = (int) num2 * 1513112011 ^ -455686454;
            continue;
          case 12:
            goto label_36;
          case 13:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 1777679391 ^ 1170455238;
            continue;
          case 14:
            flag3 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * 1554434596 ^ 1032545521;
            continue;
          case 15:
            num1 = -92384536;
            continue;
          case 16:
            flag2 = Square.\u206C‭​⁭‭⁯⁭‭‌​‬‎‪‍⁮‏⁬‭‬‌⁯⁯⁪⁪‌‎​‎​‮‬‪‬‍⁮​​‎⁬‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u200D‫‌​‬⁫‏⁭​​‪‬‫‭​⁮‎‎‌⁫​⁭​‮⁫‭‮‍‪‌‭‬⁫‌‭‬⁫⁭⁮⁫‮<string>(4060991004U));
            num1 = (int) num2 * -1641180965 ^ 904988612;
            continue;
          case 17:
            num1 = (int) num2 * 2121459297 ^ -80560194;
            continue;
          case 18:
            int num4;
            num1 = num4 = this.Piece.Current.File != 6 ? -243390764 : (num4 = -304329307);
            continue;
          case 19:
            num1 = -1488844647;
            continue;
          case 20:
            chessPiece2 = chessPiece1;
            num1 = -383852319;
            continue;
          case 21:
            int num5 = !flag2 ? 403862199 : (num5 = 1355796118);
            num1 = num5 ^ (int) num2 * 1263101199;
            continue;
          case 22:
            int num6 = flag1 ? 1089632415 : (num6 = 1916551838);
            num1 = num6 ^ (int) num2 * -1835889195;
            continue;
          case 23:
            num1 = (int) num2 * 853083601 ^ 454018289;
            continue;
          case 24:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * 551916402 ^ -312171385;
            continue;
          case 25:
            num1 = -674308603;
            continue;
          case 27:
            square2 = this.Board[3, 7];
            num1 = (int) num2 * -1121308095 ^ 161707406;
            continue;
          case 28:
            int num7 = !flag3 ? 1915494769 : (num7 = 506370682);
            num1 = num7 ^ (int) num2 * 242654963;
            continue;
          case 29:
            int num8 = this.Piece.Current.File != 2 ? -66033767 : (num8 = -1885993238);
            num1 = num8 ^ (int) num2 * 1234853406;
            continue;
          case 30:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * -1134448140 ^ 786223236;
            continue;
          case 31:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 178320158 ^ 58807410;
            continue;
          case 32:
            num1 = (int) num2 * -1632796492 ^ 1393333760;
            continue;
          case 33:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 34:
            square2.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * 1735174701 ^ -462659479;
            continue;
          default:
            goto label_41;
        }
        int num9;
        num1 = num9 = num3 != 0 ? -403104578 : (num9 = -92384536);
      }
label_36:
      int num10 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
      goto label_38;
label_41:
      return chessPiece2;
label_37:
      num10 = 1;
label_38:
      flag1 = num10 != 0;
      num1 = -645680075;
      goto label_2;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = 1484604999;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        Square square2;
        ChessPiece chessPiece2;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 309142901)) % 37U)
        {
          case 0:
            int num5 = !flag3 ? -285359701 : (num5 = -1170223456);
            num1 = num5 ^ (int) num2 * 2583658;
            continue;
          case 1:
            square2 = this.Board[3, 0];
            num1 = (int) num2 * 378246989 ^ -1301955494;
            continue;
          case 2:
            num1 = (int) num2 * -1417678190 ^ 797014165;
            continue;
          case 3:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1472357893 ^ 1331128538;
            continue;
          case 4:
            num1 = 967021503;
            continue;
          case 5:
            num1 = (int) num2 * -642851228 ^ -1250235031;
            continue;
          case 6:
            flag4 = Square.\u206C‭​⁭‭⁯⁭‭‌​‬‎‪‍⁮‏⁬‭‬‌⁯⁯⁪⁪‌‎​‎​‮‬‪‬‍⁮​​‎⁬‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u200D‫‌​‬⁫‏⁭​​‪‬‫‭​⁮‎‎‌⁫​⁭​‮⁫‭‮‍‪‌‭‬⁫‌‭‬⁫⁭⁮⁫‮<string>(543830434U));
            num1 = (int) num2 * -1653282973 ^ -1284713606;
            continue;
          case 7:
            int num6 = flag4 ? 1782068266 : (num6 = 662586876);
            num1 = num6 ^ (int) num2 * -1226905704;
            continue;
          case 8:
            chessPiece2 = (ChessPiece) null;
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * 1997168987 ^ -281739659;
              continue;
            }
            num3 = 1;
            break;
          case 9:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = 58894120;
            continue;
          case 10:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 11:
            int num7;
            num1 = num7 = this.Piece.Current.File != 6 ? 612220537 : (num7 = 1658117954);
            continue;
          case 12:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1090596535 ^ -709125556;
            continue;
          case 13:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 619066341 ^ 1111553720;
            continue;
          case 14:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1560740154 ^ 998255787;
            continue;
          case 15:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 1237827713 ^ 2006608448;
            continue;
          case 16:
            num1 = 595649480;
            continue;
          case 17:
            num1 = (int) num2 * 745904320 ^ -224599073;
            continue;
          case 18:
            square1 = this.Board[5, 0];
            square1.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -2048614340 ^ 203988788;
            continue;
          case 19:
            num1 = (int) num2 * -2145743589 ^ -1654918838;
            continue;
          case 20:
            num1 = 129401526;
            continue;
          case 21:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 1436552887;
            continue;
          case 22:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_21;
          case 23:
            flag1 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * 49545635 ^ 946400989;
            continue;
          case 24:
            num1 = (int) num2 * 1026570597 ^ 1738321154;
            continue;
          case 25:
            int num8 = this.Piece.Current.File == 2 ? -1799616688 : (num8 = -1097376359);
            num1 = num8 ^ (int) num2 * 764081489;
            continue;
          case 26:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 1740544829 ^ 33452467;
            continue;
          case 27:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * 993128886 ^ 688336273;
            continue;
          case 28:
            int num9 = flag1 ? 1982400947 : (num9 = 1791469526);
            num1 = num9 ^ (int) num2 * 1847391401;
            continue;
          case 29:
            goto label_1;
          case 30:
            num1 = 2012753562;
            continue;
          case 32:
            num1 = (int) num2 * 1089251748 ^ -1430307494;
            continue;
          case 33:
            int num10 = flag2 ? 1574856862 : (num10 = 526313836);
            num1 = num10 ^ (int) num2 * -1684959247;
            continue;
          case 34:
            square2.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * -1447458921 ^ 83217642;
            continue;
          case 35:
            chessPiece1 = chessPiece2;
            num1 = 1836354754;
            continue;
          case 36:
            if (this.Piece.Kind == Pieces.King)
            {
              num4 = 1;
              goto label_21;
            }
            else
            {
              num1 = (int) num2 * -767565099 ^ -561770320;
              continue;
            }
          default:
            goto label_44;
        }
        flag2 = num3 != 0;
        num1 = 1388477841;
        continue;
label_21:
        flag3 = num4 != 0;
        num1 = 283048791;
      }
label_44:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = -1092463740;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -46114773)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Square.\u206D‎⁭⁪⁭⁫‍⁮‪⁮‪‍‭‏‌‍‭‍‫‮⁭⁭‌‎‌‬⁫‌‏‪⁬⁭‏‫‎‭‍⁪⁯‌‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * 440948752 ^ 128273641;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_5;
label_1:
      int num1 = 1853158612;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 968747207)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            Square.\u200C‬‎⁫⁭​‍​‭‌‌⁬⁪⁬⁬⁫⁯‫⁯⁮​‭⁯‍‪⁯‌⁯‍‭⁪⁬‎‬⁬‍‮‏⁭⁪‮((IDisposable) this.components);
            num1 = (int) num2 * 422810685 ^ -1790642910;
            continue;
          case 2:
            int num3 = !flag ? -233546443 : (num3 = -1693598302);
            num1 = num3 ^ (int) num2 * 1589382918;
            continue;
          case 3:
            num1 = (int) num2 * 729775244 ^ 844877515;
            continue;
          case 4:
            goto label_4;
          case 5:
            goto label_1;
          case 6:
            base.Dispose(disposing);
            num1 = 1409431178;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:
      return;
label_4:
      int num4 = this.components != null ? 1 : 0;
      goto label_6;
label_5:
      num4 = 0;
label_6:
      flag = num4 != 0;
      num1 = 386623990;
      goto label_2;
    }

    private void InitializeComponent()
    {
      Square.\u202C‎⁫⁮‪‎‭⁯‍⁭‎⁭⁭‌‬⁮⁬‏⁯​‍‏⁫⁭⁮‌‫⁯⁪⁯​‫‭⁯⁬⁮⁬‮‍‫‮((Control) this);
label_1:
      int num1 = 32608916;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1802808198)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Square.\u202D​‌‌⁫⁪⁫‮⁬‮‮‫⁬‏‮‪‭⁮‪​⁭‏⁬‭⁪‏⁯‫‭‍⁯‫‬‪⁫​⁫‎‮‭‮((Control) this, false);
            num1 = (int) num2 * -343067863 ^ -222033253;
            continue;
          case 3:
            num1 = (int) num2 * 333671873 ^ 1914425655;
            continue;
          case 4:
            num1 = (int) num2 * 20754369 ^ -1200700120;
            continue;
          case 5:
            Square.\u202E‏⁭‏‬​‍‮‌‭⁮‫‭‎‭⁪⁮‬‬‮‬‭⁫‏​‍⁪⁪‬​⁪⁪‬‏⁭⁪⁪​⁮‍‮((Control) this, new Padding(0));
            num1 = (int) num2 * -2002313041 ^ -440215549;
            continue;
          case 6:
            Square.\u202E‏​⁯‬⁪⁪‌⁯⁫⁯⁮⁯⁬‍‍‭‎‮⁮​‌‌‪⁯⁪​‬‭‌​‍‪‫‎⁬⁫⁭⁬‏‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 831110345 ^ 390250755;
            continue;
          case 7:
            Square.\u206C⁪​‫⁮⁫⁪‪‫⁬‍‭‍‭‫⁭‪‪⁫​‌​‮‬‮‮‏⁯⁬⁪‪⁫‎⁭⁭⁭‫​‬⁪‮((ContainerControl) this, AutoScaleMode.Font);
            Square.\u202B‬⁫‍‭‬‫‮⁪‎‍‬⁬‬​⁮‭⁪‪⁮⁪‎‭‫⁪⁮‌‪⁯‮‬⁫‭‫‭‍‌⁫‌‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -342699021 ^ 1621463116;
            continue;
          case 8:
            this.Name = \u003CModule\u003E.\u200E‍⁭‏‍⁬‌⁪‏‏⁯‎‭‫⁫⁪‏‮⁪‪‪‎​⁯‭‪‪‪‫⁪‫⁭‮‮‌‪⁮‎⁯⁭‮<string>(1344457908U);
            num1 = (int) num2 * 2063371370 ^ -169238955;
            continue;
          case 9:
            Square.\u202A⁯⁬⁪‌‌​⁪⁬⁮‎⁫⁮⁯‭‭‎‪⁮‫⁫‪‫‌‎‌⁪‍‪‏⁪‮‎‌⁮‪‏‏‮‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1744028414 ^ 1154918707;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    static Delegate \u206A⁭‍‏‍‬‌‍⁫‎⁬⁭⁮‮‎‌⁫‪‌‪⁯⁮‌‪⁮⁫‏‎‎‬⁭‫⁫⁮⁪‌⁪‫‫‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206D⁭‍⁭⁮‏⁭⁯‌​‭⁯⁭‮‭‫‍‫‎‬​‪​‭⁯‍‍⁫‪​‫​⁪⁬‫‍​‏‌⁮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u200E‪⁪‪‫​⁮‪⁮‪‎⁪‌‫‪⁬‬‫‪‪⁬⁮‌⁪⁮⁭⁯‭⁭‭‫‏‫‍⁬‫​‎‎‭‮([In] object obj0) => obj0.ToString();

    static string \u202D‎⁪‭‏⁫‮⁪‭‎​‪⁬‍⁯‌⁭‍‮‪‌‌⁬⁫‬‭‪​‮‮‭‮‫‮⁫‬‫⁬⁯⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206F⁭‫⁫‫⁮⁫‮‫‪‮⁪⁭‪⁬⁮⁪‎‬⁯‏‮⁭⁫‍‪⁯⁯⁮⁭‭​⁮‎‪‭‍​⁪‪‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206C‍⁪⁭​‏​‍‮‬⁪‪‌‪‍⁯‭‫⁪‫⁪⁮⁪⁪⁫‎⁮‍⁫‮⁮​⁯⁮‎‌⁪⁪‍‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u200D⁪‮⁫⁮‭‏‬‬‫⁬​⁭⁯‍‍⁮‮⁬‌⁮⁪‮‎⁪‭⁪​‫‬⁮⁭⁫​⁮​⁫‍‭‫‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u206A⁫​‫​⁬⁬‪‭⁭‎​‏‏‬‮‭‍‌⁬​‮‎‫⁭⁯‍‭‪‏⁭⁭⁮‫⁪⁮‮‬‬‬‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u206B‭‫⁪‌⁪⁮‍​⁮​⁬‪‏​⁮⁪⁯⁬‎⁯⁬‭‪‏‮‭‫‌⁪‮‏⁬‬⁬‍⁫⁪‮‎‮() => Cursor.Position;

    static DialogResult \u206D​‫‌‮‌‫‫‍‍⁪⁮‭‌​⁭‌⁫​⁫⁪‬‮⁭⁭⁬‪⁭⁬⁬‪‬‫⁮‪‏⁮‪⁯⁭‮([In] Form obj0) => obj0.ShowDialog();

    static void \u200C‬‎⁫⁭​‍​‭‌‌⁬⁪⁬⁬⁫⁯‫⁯⁮​‭⁯‍‪⁯‌⁯‍‭⁪⁬‎‬⁬‍‮‏⁭⁪‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u206C‭​⁭‭⁯⁭‭‌​‬‎‪‍⁮‏⁬‭‬‌⁯⁯⁪⁪‌‎​‎​‮‬‪‬‍⁮​​‎⁬‏‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u206D‎⁭⁪⁭⁫‍⁮‪⁮‪‍‭‏‌‍‭‍‫‮⁭⁭‌‎‌‬⁫‌‏‪⁬⁭‏‫‎‭‍⁪⁯‌‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202C‎⁫⁮‪‎‭⁯‍⁭‎⁭⁭‌‬⁮⁬‏⁯​‍‏⁫⁭⁮‌‫⁯⁪⁯​‫‭⁯⁬⁮⁬‮‍‫‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202E‏​⁯‬⁪⁪‌⁯⁫⁯⁮⁯⁬‍‍‭‎‮⁮​‌‌‪⁯⁪​‬‭‌​‍‪‫‎⁬⁫⁭⁬‏‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u206C⁪​‫⁮⁫⁪‪‫⁬‍‭‍‭‫⁭‪‪⁫​‌​‮‬‮‮‏⁯⁬⁪‪⁫‎⁭⁭⁭‫​‬⁪‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u202B‬⁫‍‭‬‫‮⁪‎‍‬⁬‬​⁮‭⁪‪⁮⁪‎‭‫⁪⁮‌‪⁯‮‬⁫‭‫‭‍‌⁫‌‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u202E‏⁭‏‬​‍‮‌‭⁮‫‭‎‭⁪⁮‬‬‮‬‭⁫‏​‍⁪⁪‬​⁪⁪‬‏⁭⁪⁪​⁮‍‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202A⁯⁬⁪‌‌​⁪⁬⁮‎⁫⁮⁯‭‭‎‪⁮‫⁫‪‫‌‎‌⁪‍‪‏⁪‮‎‌⁮‪‏‏‮‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u202D​‌‌⁫⁪⁫‮⁬‮‮‫⁬‏‮‪‭⁮‪​⁭‏⁬‭⁪‏⁯‫‭‍⁯‫‬‪⁫​⁫‎‮‭‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
