// Decompiled with JetBrains decompiler
// Type: Cradiator.ViewModels.ProjectStatusViewModel
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Config;
using Cradiator.Model;
using System;
using System.Windows;

namespace Cradiator.ViewModels
{
  public class ProjectStatusViewModel : NotifyingClass
  {
    private string _name;
    private string _currentState;
    private string _CurrentMessage;
    private string _ProjectActivity;
    private string _serverName;
    private bool _isBroken;
    private bool _isSuccessful;
    private Visibility _serverNameVisible;
    private DateTime _lastBuildTime;

    [Obsolete("only used by xaml")]
    public ProjectStatusViewModel()
    {
    }

    public ProjectStatusViewModel(ProjectStatus ps, IViewSettings vs)
    {
      this.CurrentMessage = ps.CurrentMessage;
      this.CurrentState = ps.CurrentState;
      this.IsBroken = ps.IsBroken;
      this.IsSuccessful = ps.IsSuccessful;
      this.Name = ps.Name;
      this.ProjectActivity = ps.ProjectActivity.ToString();
      this.ServerName = ps.ServerName;
      this.LastBuildTime = ps.LastBuildTime;
      if (vs.ShowServerName)
        this.ServerNameVisible = Visibility.Visible;
      else
        this.ServerNameVisible = Visibility.Collapsed;
    }

    public string Name
    {
      get => this._name;
      set
      {
        if (this._name == value)
          return;
        this._name = value;
        this.Notify(nameof (Name));
      }
    }

    public string CurrentState
    {
      get => this._currentState;
      set
      {
        if (this._currentState == value)
          return;
        this._currentState = value;
        this.Notify(nameof (CurrentState));
      }
    }

    public string CurrentMessage
    {
      get => this._CurrentMessage;
      set
      {
        if (this._CurrentMessage == value)
          return;
        this._CurrentMessage = value;
        this.Notify(nameof (CurrentMessage));
      }
    }

    public string ProjectActivity
    {
      get => this._ProjectActivity;
      set
      {
        if (this._ProjectActivity == value)
          return;
        this._ProjectActivity = value;
        this.Notify(nameof (ProjectActivity));
      }
    }

    public bool IsBroken
    {
      get => this._isBroken;
      set
      {
        if (this._isBroken == value)
          return;
        this._isBroken = value;
        this.Notify(nameof (IsBroken));
      }
    }

    public bool IsSuccessful
    {
      get => this._isSuccessful;
      set
      {
        if (this._isSuccessful == value)
          return;
        this._isSuccessful = value;
        this.Notify(nameof (IsSuccessful));
      }
    }

    public string ServerName
    {
      get => this._serverName;
      set
      {
        if (this._serverName == value)
          return;
        this._serverName = value;
        this.Notify(nameof (ServerName));
      }
    }

    public DateTime LastBuildTime
    {
      get => this._lastBuildTime;
      set
      {
        if (this._lastBuildTime == value)
          return;
        this._lastBuildTime = value;
        this.Notify(nameof (LastBuildTime));
      }
    }

    public Visibility ServerNameVisible
    {
      get => this._serverNameVisible;
      set
      {
        if (this._serverNameVisible == value)
          return;
        this._serverNameVisible = value;
        this.Notify(nameof (ServerNameVisible));
      }
    }
  }
}
