// Decompiled with JetBrains decompiler
// Type: flac.Format.ResidualCodingMethodPartitionedRice
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using System.Collections.Generic;

namespace flac.Format
{
  public class ResidualCodingMethodPartitionedRice : ResidualCodingMethod
  {
    private const int PARTITION_ORDER_BITS_COUNT = 4;
    private sbyte partitionOrder_;
    private List<RicePartition> partitions_ = new List<RicePartition>();
    private int predictorOrder_;
    private int blockSize_;

    public override void Read(
      FlacStream stream,
      int frameBlockSize,
      int predictorOrder,
      ref uint[] samples)
    {
      this.partitionOrder_ = stream.Reader.ReadBitsAsSByte(4);
      this.predictorOrder_ = predictorOrder;
      this.blockSize_ = frameBlockSize;
      int num = 1 << (int) this.partitionOrder_;
      Validation.IsValid(num >= 1);
      int currentSubframeSample = predictorOrder;
      int sampleCount1 = ResidualCodingMethodPartitionedRice.GetSampleCount(frameBlockSize, predictorOrder, (int) this.partitionOrder_, true);
      int sampleCount2 = ResidualCodingMethodPartitionedRice.GetSampleCount(frameBlockSize, predictorOrder, (int) this.partitionOrder_, false);
      while (this.partitions_.Count < num)
      {
        int sampleCount3 = this.partitions_.Count == 0 ? sampleCount1 : sampleCount2;
        RicePartition ricePartition = new RicePartition();
        ricePartition.Read(stream, sampleCount3, ref currentSubframeSample, ref samples);
        this.partitions_.Add(ricePartition);
      }
    }

    public override void Write(FlacStream stream, ref uint[] samples)
    {
      stream.Writer.WriteBits((int) this.partitionOrder_, 4);
      int num = 0;
      int predictorOrder = this.predictorOrder_;
      foreach (RicePartition partition in this.partitions_)
      {
        partition.Write(stream, ResidualCodingMethodPartitionedRice.GetSampleCount(this.blockSize_, this.predictorOrder_, (int) this.partitionOrder_, num == 0), ref predictorOrder, ref samples);
        ++num;
      }
    }

    public override void Write(FlacStream stream, int blockSize, ref uint[] samples)
    {
      this.partitionOrder_ = (sbyte) 0;
      this.blockSize_ = blockSize;
      stream.Writer.WriteBits((int) this.partitionOrder_, 4);
      int predictorOrder = this.predictorOrder_;
      new RicePartition() { EncodingParameter = (sbyte) 0 }.Write(stream, ResidualCodingMethodPartitionedRice.GetSampleCount(this.blockSize_, this.predictorOrder_, (int) this.partitionOrder_, true), ref predictorOrder, ref samples);
    }

    private static int GetSampleCount(
      int frameBlockSize,
      int predictorOrder,
      int partitionOrder,
      bool isFirstPartition)
    {
      return partitionOrder != 0 ? (isFirstPartition ? (frameBlockSize >> partitionOrder) - predictorOrder : frameBlockSize >> partitionOrder) : frameBlockSize - predictorOrder;
    }
  }
}
