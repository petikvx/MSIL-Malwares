// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: ةE, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B83DFD6-FCF7-4EFA-B68A-746E3BD488E0
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-0ae22d4877231b64b2e9e1252bbe8636ea43fe5692ca899733e715ccfc82e224.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1975139049;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1080253186)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              int num3 = eventHandler1 != comparand ? 1425525699 : (num3 = 1110964481);
              num1 = num3 ^ (int) num2 * -252364103;
              continue;
            case 3:
              comparand = eventHandler1;
              EventHandler eventHandler2 = (EventHandler) Square.\u200F‬‮‍⁮‮‪‌⁭‪⁭‭‮‎⁭‪‎⁮‫‪⁬‏⁫‌‭‮⁭‬​​‭‎⁬​⁭‎⁬‭⁭‮‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = 317867640;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1071362701;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1899124569)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? 689247940 : (num3 = 588510857);
              num1 = num3 ^ (int) num2 * 1998089239;
              continue;
            case 2:
              comparand = eventHandler1;
              num1 = 785761363;
              continue;
            case 3:
              eventHandler2 = (EventHandler) Square.\u202A‏⁭​‬⁮‎⁫‌⁪​‪‌⁭‪⁬‭‍⁯⁮‏⁭⁬‎⁭⁯⁬‪‌​⁯‪⁭⁪​‭‎⁫​⁯‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -955263696 ^ 633617957;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName => Square.\u206D‬‍⁪⁪‪‏‫⁭⁬‮​⁪⁫‍⁫‮‌‍⁮‪‌‏⁮⁬⁬‍‮‏⁮‭‭‍‎⁪⁫‎‎‎⁬‮(this.CurrentSquare, \u003CModule\u003E.\u206C⁯⁬​‎⁪‏‮‫⁭‌‪⁬‎⁫‭‬⁬‫‫‌​‭‫‬‫‮‬‮⁫‌‌⁬‌‎⁫⁭⁬‍‌‮<string>(561972688U), Square.\u206D⁮⁬‫‌‪‎‍‎‬‭‏⁭‭⁭‮⁯​‬‬‎‎‫⁬‭‭​⁬‫⁮‮⁯‮⁫‍⁮⁬‪‍‎‮((object) this.Piece));

    public string CurrentSquare
    {
      get
      {
        char ch = Square.\u206F‫⁫‏‎‎⁭‍‎⁪⁫‌⁫‪‌‫‫‌‏‏‬‫⁭⁮‮‮⁯‪‌‬‏⁪‫⁬‭‪‬​‫⁪‮(\u003CModule\u003E.\u202B⁬‍​‮‫⁪‪​​⁭‭⁬‎‪‎‪‎‍‌‍⁫⁬⁯‌⁪‍‏‌‭⁯‫⁫‪‍‬⁭⁯‪‍‮<string>(2084807345U), this.File);
label_1:
        int num1 = 2015689337;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1068037627)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              currentSquare = Square.\u200D⁭⁫⁭‫​‭‭‌‫‪⁮⁭‏‪‮⁯⁬⁯⁫‎⁭​‮⁯‏‌‭⁯⁪‎‎‭‍⁭‎‪⁯⁯‮‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * 528080148 ^ -1583906169;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = 1631555732;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1909798811)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -2123369509 ^ 131422406;
            continue;
          case 2:
            goto label_3;
          case 3:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * 2097577143 ^ -2055995469;
              continue;
            }
            goto label_5;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
      this.Board = Board;
      this.File = file;
      this.Rank = rank;
      this.Name = Square.\u200D⁭⁫⁭‫​‭‭‌‫‪⁮⁭‏‪‮⁯⁬⁯⁫‎⁭​‮⁯‏‌‭⁯⁪‎‎‭‍⁭‎‪⁯⁯‮‮(Square.\u206F‫⁫‏‎‎⁭‍‎⁪⁫‌⁫‪‌‫‫‌‏‏‬‫⁭⁮‮‮⁯‪‌‬‏⁪‫⁬‭‪‬​‫⁪‮(\u003CModule\u003E.\u200D⁮‫⁪⁭​⁫⁫⁮‭‍‍⁮‎‏‫​⁪⁭​⁬‍⁪‬⁬‍‍⁪‮‍‎‮⁬⁯‏‮‫‪‮‌‮<string>(278260754U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
label_1:
      int num1 = 693415696;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 942515110)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * 1780809898 ^ -850147376;
            continue;
          case 2:
            this.InitializeComponent();
            num1 = (int) num2 * -1659143139 ^ -1360505814;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 1960407513 ^ -1444076257;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void SwitchPlayer()
    {
      if (this.Board.DisableTurns)
        return;
label_1:
      int num1 = 766951599;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 418036951)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_9;
          case 2:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = 720099155;
            continue;
          case 3:
            num1 = 1798852464;
            continue;
          case 4:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 2097599906 ^ 1739457489;
            continue;
          case 5:
            int num3 = this.Board.WhosPlaying == PieceColor.White ? -317479820 : (num3 = -2141752049);
            num1 = num3 ^ (int) num2 * 1031857253;
            continue;
          case 6:
            num1 = (int) num2 * 736538404 ^ -693331107;
            continue;
          default:
            goto label_10;
        }
      }
label_9:
      return;
label_10:;
    }

    private bool getSide(Square x)
    {
      if (this.Board.DisableTurns)
        goto label_4;
label_1:
      int num1 = 1665509212;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 784322609)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1959507210 ^ -224262526;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
      goto label_5;
label_7:
      bool side;
      return side;
label_4:
      num3 = 1;
label_5:
      side = num3 != 0;
      num1 = 627468529;
      goto label_2;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      bool flag1 = Square.\u200E⁫‬‍​⁪⁮⁫⁮⁭⁪⁯‏‏‎​⁬‎‭​⁯⁯‪‭⁯⁯⁬‭‮‍⁮⁪‎⁯⁪‍‌​‏⁮‮(e) == MouseButtons.Left;
label_1:
      int num1 = -631618097;
      while (true)
      {
        uint num2;
        List<PossibleMoves> move;
        bool flag2;
        bool side;
        bool disableTurns;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ -1893283939)) % 83U)
        {
          case 0:
            num1 = (int) num2 * -1052287221 ^ -1542052626;
            continue;
          case 1:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1648627719 ^ 1371427879;
            continue;
          case 2:
            this.msg = \u003CModule\u003E.\u200D⁮‫⁪⁭​⁫⁫⁮‭‍‍⁮‎‏‫​⁪⁭​⁬‍⁪‬⁬‍‍⁪‮‍‎‮⁬⁯‏‮‫‪‮‌‮<string>(1793668854U);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1250799880 ^ -403765441;
            continue;
          case 3:
            int num5;
            num1 = num5 = !flag5 ? -2057598234 : (num5 = -508218117);
            continue;
          case 4:
            num1 = (int) num2 * 1984216721 ^ 212935950;
            continue;
          case 5:
            move = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u200C⁮⁪‬⁭⁭‮⁪‬‭‫‭‎⁬‭‪⁬‪⁬⁬‌‌‍‫⁫‌‪⁬‏‌‫‌​​⁯⁭⁮‬⁪⁭‮(\u003CModule\u003E.\u202B⁬‍​‮‫⁪‪​​⁭‭⁬‎‪‎‪‎‍‌‍⁫⁬⁯‌⁪‍‏‌‭⁯‫⁫‪‍‬⁭⁯‪‍‮<string>(987202582U), (object) move.Count);
            num1 = (int) num2 * -467762511 ^ 1523413797;
            continue;
          case 6:
            num1 = (int) num2 * 592473215 ^ -1240261243;
            continue;
          case 7:
            flag7 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * -1423055305 ^ 1501335366;
            continue;
          case 8:
            if (to.Piece == null)
            {
              num3 = 0;
              break;
            }
            num1 = -1030967896;
            continue;
          case 9:
            to.MovePawn(this.Board.From);
            num1 = -571270157;
            continue;
          case 10:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -1605409491 ^ -1514758783;
            continue;
          case 11:
            num1 = (int) num2 * 633714036 ^ 1975647142;
            continue;
          case 12:
            num3 = this.getSide(to) ? 1 : 0;
            break;
          case 13:
            this.msg = \u003CModule\u003E.\u200B‬‮‪‮‭‮⁫⁮‎⁮‎⁬‏⁭‎‎‮‮‍‪⁪⁬⁬‍‌‎⁪⁫‏⁭‫‍‍‭⁮⁫‎⁪⁭‮<string>(3371167720U);
            num1 = (int) num2 * 155897856 ^ -235337069;
            continue;
          case 14:
            num1 = (int) num2 * 1559688740 ^ -1236998826;
            continue;
          case 15:
            to.HighLight();
            num1 = (int) num2 * 1813200141 ^ -1090630986;
            continue;
          case 16:
            num1 = (int) num2 * 1540244712 ^ 1960657156;
            continue;
          case 17:
            num1 = (int) num2 * -2032168255 ^ 811641425;
            continue;
          case 18:
            int num6 = !flag3 ? 1270295234 : (num6 = 553078295);
            num1 = num6 ^ (int) num2 * -1046461564;
            continue;
          case 19:
            num1 = (int) num2 * -1621967930 ^ 1969988937;
            continue;
          case 20:
            this.msg = \u003CModule\u003E.\u200B‬‮‪‮‭‮⁫⁮‎⁮‎⁬‏⁭‎‎‮‮‍‪⁪⁬⁬‍‌‎⁪⁫‏⁭‫‍‍‭⁮⁫‎⁪⁭‮<string>(1164213507U);
            num1 = -561503944;
            continue;
          case 21:
            num1 = (int) num2 * 2097538366 ^ 1487096713;
            continue;
          case 22:
            num1 = (int) num2 * 262381987 ^ -1242878193;
            continue;
          case 23:
            side = this.getSide(this.Board.From);
            num1 = -1142801131;
            continue;
          case 24:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 2130728699 ^ 1840487089;
            continue;
          case 25:
            num1 = (int) num2 * -2117423496 ^ -959663539;
            continue;
          case 26:
            int num7 = move.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -1069210881 : (num7 = -1009573989);
            num1 = num7 ^ (int) num2 * 1533581421;
            continue;
          case 27:
            int num8 = !side ? -36926080 : (num8 = -580257513);
            num1 = num8 ^ (int) num2 * 1017830559;
            continue;
          case 28:
            num1 = (int) num2 * 1396439423 ^ -1897560167;
            continue;
          case 29:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 948205343 ^ -780503381;
            continue;
          case 30:
            num1 = (int) num2 * 1609755627 ^ 1381235613;
            continue;
          case 31:
            if (this.Board.From == null)
            {
              num4 = 0;
              goto label_81;
            }
            else
            {
              num1 = (int) num2 * -1187603904 ^ -430946274;
              continue;
            }
          case 32:
            num1 = (int) num2 * -319891751 ^ 1335985957;
            continue;
          case 33:
            flag4 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * -600007696 ^ 678303511;
            continue;
          case 34:
            this.Board.From = to;
            num1 = (int) num2 * -944181357 ^ 1326725805;
            continue;
          case 35:
            int num9 = flag1 ? 965715878 : (num9 = 1108436124);
            num1 = num9 ^ (int) num2 * -503625638;
            continue;
          case 36:
            int num10 = flag6 ? 890891668 : (num10 = 2106168967);
            num1 = num10 ^ (int) num2 * 1381042158;
            continue;
          case 37:
            num1 = -1799428929;
            continue;
          case 38:
            this.msg = \u003CModule\u003E.\u202B⁬‍​‮‫⁪‪​​⁭‭⁬‎‪‎‪‎‍‌‍⁫⁬⁯‌⁪‍‏‌‭⁯‫⁫‪‍‬⁭⁯‪‍‮<string>(167598466U);
            num1 = (int) num2 * -1050743994 ^ -1066474625;
            continue;
          case 39:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            goto label_81;
          case 40:
            num1 = (int) num2 * 1651964750 ^ -1427663673;
            continue;
          case 41:
            num1 = (int) num2 * -2078056312 ^ -253214399;
            continue;
          case 42:
            int num11 = !flag2 ? -1208161973 : (num11 = -884189709);
            num1 = num11 ^ (int) num2 * -424851210;
            continue;
          case 43:
            disableTurns = this.Board.DisableTurns;
            num1 = -932115759;
            continue;
          case 44:
            num1 = -561503944;
            continue;
          case 45:
            this.msg = \u003CModule\u003E.\u206C⁯⁬​‎⁪‏‮‫⁭‌‪⁬‎⁫‭‬⁬‫‫‌​‭‫‬‫‮‬‮⁫‌‌⁬‌‎⁫⁭⁬‍‌‮<string>(3222773590U);
            num1 = (int) num2 * 342472561 ^ 1818899524;
            continue;
          case 46:
            num1 = -561503944;
            continue;
          case 47:
            num1 = -1237780488;
            continue;
          case 49:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * 1280087010 ^ -1702673081;
            continue;
          case 50:
            to.HighLight();
            num1 = (int) num2 * -1155314451 ^ -304169791;
            continue;
          case 51:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1728965379 ^ 1266807822;
            continue;
          case 52:
            to.HighLight();
            num1 = (int) num2 * 1645398677 ^ -1935707952;
            continue;
          case 53:
            num1 = (int) num2 * 1078411256 ^ 2036664844;
            continue;
          case 54:
            num1 = (int) num2 * 2139784234 ^ 1132144968;
            continue;
          case 55:
            int num12 = flag7 ? 1998602 : (num12 = 1266689433);
            num1 = num12 ^ (int) num2 * -1903854725;
            continue;
          case 56:
            num1 = (int) num2 * 2045986334 ^ -158491132;
            continue;
          case 57:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1489073828 ^ 1221854829;
            continue;
          case 58:
            this.Board.From = to;
            num1 = (int) num2 * 1320848506 ^ -608986037;
            continue;
          case 59:
            to = this;
            num1 = (int) num2 * 1992082339 ^ -330889862;
            continue;
          case 60:
            flag6 = this.Board.lights.MoveList[this.Board.From.Piece.Id].Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * 1220239228 ^ -766002089;
            continue;
          case 61:
            this.msg = \u003CModule\u003E.\u206C⁯⁬​‎⁪‏‮‫⁭‌‪⁬‎⁫‭‬⁬‫‫‌​‭‫‬‫‮‬‮⁫‌‌⁬‌‎⁫⁭⁬‍‌‮<string>(4114580063U);
            flag2 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * 1829969731 ^ 777975074;
            continue;
          case 62:
            num1 = (int) num2 * -639400604 ^ 630453396;
            continue;
          case 63:
            this.msg = \u003CModule\u003E.\u202B⁬‍​‮‫⁪‪​​⁭‭⁬‎‪‎‪‎‍‌‍⁫⁬⁯‌⁪‍‏‌‭⁯‫⁫‪‍‬⁭⁯‪‍‮<string>(3246188649U);
            num1 = (int) num2 * -1076490703 ^ -447846761;
            continue;
          case 64:
            num1 = (int) num2 * 449224900 ^ -231910835;
            continue;
          case 65:
            this.msg = \u003CModule\u003E.\u202B⁬‍​‮‫⁪‪​​⁭‭⁬‎‪‎‪‎‍‌‍⁫⁬⁯‌⁪‍‏‌‭⁯‫⁫‪‍‬⁭⁯‪‍‮<string>(2626410814U);
            num1 = (int) num2 * 1610263235 ^ -2083363992;
            continue;
          case 66:
            num1 = (int) num2 * 212896028 ^ 1682865448;
            continue;
          case 67:
            goto label_1;
          case 68:
            to.HighLight();
            num1 = (int) num2 * -691732680 ^ 2039616793;
            continue;
          case 69:
            num1 = (int) num2 * -1920431566 ^ 984062273;
            continue;
          case 70:
            num1 = -1463581624;
            continue;
          case 71:
            num1 = (int) num2 * -550700573 ^ -988376272;
            continue;
          case 72:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -580357636 ^ -5631702;
            continue;
          case 73:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1450908017 ^ 213886786;
            continue;
          case 74:
            int num13 = flag4 ? -56298254 : (num13 = -1324144193);
            num1 = num13 ^ (int) num2 * -1846092925;
            continue;
          case 75:
            this.Board.From = (Square) null;
            num1 = (int) num2 * 1210347971 ^ 2126815134;
            continue;
          case 76:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 630961607 ^ 1921427632;
            continue;
          case 77:
            num1 = (int) num2 * 100806663 ^ -1683475984;
            continue;
          case 78:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1868529233 ^ 1275368738;
            continue;
          case 79:
            this.Board.From = to;
            num1 = (int) num2 * 1753567514 ^ -1060242701;
            continue;
          case 80:
            num1 = -865159086;
            continue;
          case 81:
            int num14 = !disableTurns ? -1902930396 : (num14 = -1930339192);
            num1 = num14 ^ (int) num2 * 789967660;
            continue;
          case 82:
            int num15;
            num1 = num15 = this.Board.From.Piece.Color == to.Piece.Color ? -1041047819 : (num15 = -1228100604);
            continue;
          default:
            goto label_90;
        }
        flag3 = num3 != 0;
        num1 = -1427790135;
        continue;
label_81:
        flag5 = num4 != 0;
        int num16;
        num1 = num16 = !(to.Piece == null & flag5) ? -1370554006 : (num16 = -1270854576);
      }
label_90:
      Square.action(this.msg);
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = 676699663;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 696387488)) % 6U)
        {
          case 0:
            this.Board.From.ClearHighLight();
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * 1017467901 ^ -285759025;
            continue;
          case 1:
            flag = this.Board.From != null;
            num1 = (int) num2 * -778095892 ^ 64622760;
            continue;
          case 2:
            int num3 = flag ? 1495661302 : (num3 = 359900635);
            num1 = num3 ^ (int) num2 * 263030253;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 241807501 ^ 2057792266;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void CaptPawn(Square from)
    {
      if (this.Piece.Color != PieceColor.White)
        goto label_6;
label_1:
      int num1 = -2114217170;
label_2:
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1210639781)) % 29U)
        {
          case 0:
            this.handleWhiteCastling();
            num1 = (int) num2 * 754958448 ^ 1736738793;
            continue;
          case 1:
            flag3 = from.Piece.Color == PieceColor.White;
            num1 = -952175579;
            continue;
          case 2:
            this.Piece = from.Piece;
            num1 = -2108141428;
            continue;
          case 3:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 4:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = -979747134;
            continue;
          case 5:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 67084555 ^ 766668883;
              continue;
            }
            num4 = 0;
            goto label_35;
          case 6:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            this.handleBlackCastling();
            num1 = (int) num2 * 551615375 ^ 441630857;
            continue;
          case 7:
            num1 = (int) num2 * 917455154 ^ 1088618654;
            continue;
          case 8:
            num1 = (int) num2 * 2007383977 ^ 1020240513;
            continue;
          case 9:
            num1 = (int) num2 * 36012430 ^ 1082359238;
            continue;
          case 10:
            int num5;
            num1 = num5 = this.Piece.Color != PieceColor.Black ? -159874914 : (num5 = -559229592);
            continue;
          case 11:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1781031949 ^ -667695451;
            continue;
          case 12:
            int num6 = flag3 ? 1564569618 : (num6 = 393605520);
            num1 = num6 ^ (int) num2 * -524770877;
            continue;
          case 13:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1449019850 ^ -1735942734;
              continue;
            }
            num3 = 0;
            break;
          case 14:
            flag2 = false;
            int num7 = this.Piece.Color != PieceColor.White ? 1618909343 : (num7 = 554862974);
            num1 = num7 ^ (int) num2 * -895665451;
            continue;
          case 15:
            num1 = (int) num2 * 104124829 ^ 1556117317;
            continue;
          case 16:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_35;
          case 17:
            if (flag1)
            {
              num1 = (int) num2 * 224278076 ^ 139935868;
              continue;
            }
            goto label_51;
          case 18:
            num1 = -159874914;
            continue;
          case 19:
            num1 = -210345348;
            continue;
          case 20:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -744314003 ^ -1308678142;
            continue;
          case 21:
            flag2 = true;
            num1 = (int) num2 * 665558259 ^ 2123534552;
            continue;
          case 22:
            flag2 = true;
            num1 = (int) num2 * -5541993 ^ 936082281;
            continue;
          case 24:
            goto label_1;
          case 25:
            goto label_6;
          case 26:
            num1 = (int) num2 * -407677770 ^ -314362305;
            continue;
          case 27:
            from.Piece = (ChessPiece) null;
            flag1 = flag2;
            num1 = -155499329;
            continue;
          case 28:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 1944423987 ^ 1384446073;
            continue;
          default:
            goto label_37;
        }
        int num8;
        num1 = num8 = num3 == 0 ? -579873279 : (num8 = -2111780264);
        continue;
label_35:
        int num9;
        num1 = num9 = num4 != 0 ? -1706330739 : (num9 = -1367426477);
      }
label_37:
      Promotion promotion = new Promotion(Square.\u206C⁬‬⁬‍‭‎‮‭‏‮‍‏‍‫‬⁯⁪⁪‫‬‌‫​​​⁪⁭‌⁭⁮⁪‍‬‪​⁯‪‮⁫‮());
      try
      {
        int num10 = (int) Square.\u206E⁮⁫⁭​‌⁫⁯‫⁮‪‌​‌⁫⁮⁫⁬​⁫⁫‎‪‎⁯‬⁯‏‏⁭‍​⁯⁭⁫‬‌‍⁭⁯‮((Form) promotion);
        this.Kind = promotion.Piece;
label_39:
        int num11 = -1556216638;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -1210639781)) % 3U)
          {
            case 0:
              goto label_39;
            case 1:
              num11 = (int) num12 * -883011126 ^ 1836730421;
              continue;
            default:
              goto label_48;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_43:
          int num13 = -1608856612;
          while (true)
          {
            uint num14;
            switch ((num14 = (uint) (num13 ^ -1210639781)) % 4U)
            {
              case 0:
                num13 = (int) num14 * -2088336831 ^ -55633070;
                continue;
              case 2:
                goto label_43;
              case 3:
                Square.\u206D‪⁯⁭‍‪⁬‬‌‭‮‮⁮‏‫‭⁪‬‌‭‏‪⁫‍⁪‌⁯‫‎⁫⁭​‏⁬​‪‎​‭⁯‮((IDisposable) promotion);
                num13 = (int) num14 * 1011613477 ^ -2076301888;
                continue;
              default:
                goto label_47;
            }
          }
        }
label_47:;
      }
label_48:
label_49:
      int num15 = -802388670;
label_50:
      while (true)
      {
        uint num16;
        switch ((num16 = (uint) (num15 ^ -1210639781)) % 4U)
        {
          case 0:
            PlaySound.Play();
            num15 = (int) num16 * 1240545671 ^ -9501216;
            continue;
          case 1:
            goto label_51;
          case 2:
            goto label_49;
          default:
            goto label_53;
        }
      }
label_53:
      this.SwitchPlayer();
      return;
label_51:
      this.Board.lights.FindAllMoves();
      num15 = -512296773;
      goto label_50;
label_6:
      this.Board.BlackPieces.Remove(this.Piece.Id);
      num1 = -1897095564;
      goto label_2;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = 978353995;
      bool flag1;
      ChessPiece chessPiece;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 1251801192)) % 33U)
        {
          case 0:
            num1 = (int) num2 * 231397174 ^ -1750703406;
            continue;
          case 1:
            flag4 = false;
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = 1102993934;
            continue;
          case 2:
            int num6 = !flag6 ? -1338926661 : (num6 = -1593543208);
            num1 = num6 ^ (int) num2 * -13589720;
            continue;
          case 3:
            flag7 = flag1;
            num1 = (int) num2 * -1641823513 ^ 287858576;
            continue;
          case 4:
            flag4 = true;
            num1 = (int) num2 * -535389440 ^ -976947429;
            continue;
          case 5:
            num1 = 946204368;
            continue;
          case 7:
            chessPiece = this.handleBlackCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -84813324 ^ 1638504586;
            continue;
          case 8:
            num1 = 75710715;
            continue;
          case 9:
            chessPiece = (ChessPiece) null;
            num1 = (int) num2 * 1425334776 ^ 483563748;
            continue;
          case 10:
            num1 = (int) num2 * 1406836210 ^ 153485529;
            continue;
          case 11:
            num1 = 1106577291;
            continue;
          case 12:
            int num7 = !flag7 ? -1737444023 : (num7 = -1474407380);
            num1 = num7 ^ (int) num2 * -1367471744;
            continue;
          case 13:
            int num8 = flag5 ? 645804994 : (num8 = 1433575776);
            num1 = num8 ^ (int) num2 * 1276576877;
            continue;
          case 14:
            from.Piece = (ChessPiece) null;
            num1 = 512661418;
            continue;
          case 15:
            goto label_1;
          case 16:
            flag4 = true;
            num1 = (int) num2 * 501153404 ^ -767460882;
            continue;
          case 17:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 18:
            num1 = 946204368;
            continue;
          case 19:
            flag3 = flag4;
            num1 = (int) num2 * -538602119 ^ -1053043430;
            continue;
          case 20:
            num1 = (int) num2 * -1968907892 ^ -119946215;
            continue;
          case 21:
            num4 = this.Rank == 4 ? 1 : 0;
            goto label_17;
          case 22:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * -1652772557 ^ 182404156;
              continue;
            }
            num4 = 1;
            goto label_17;
          case 23:
            num5 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_13;
          case 24:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * -1925581887 ^ 1547916426;
            continue;
          case 25:
            int num9 = flag2 ? -147606892 : (num9 = -466449231);
            num1 = num9 ^ (int) num2 * -65441459;
            continue;
          case 26:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1359016078 ^ 347606964;
            continue;
          case 27:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num5 = 0;
              goto label_13;
            }
            else
            {
              num1 = (int) num2 * -944974610 ^ 1356087323;
              continue;
            }
          case 28:
            this.Board.lastPassantPawn = (ChessPiece) null;
            num1 = (int) num2 * -1288778534 ^ 2100510645;
            continue;
          case 29:
            if (flag3)
            {
              num1 = (int) num2 * 2087171847 ^ 49669133;
              continue;
            }
            goto label_89;
          case 30:
            this.Piece = from.Piece;
            num1 = (int) num2 * -78639577 ^ 1896206725;
            continue;
          case 31:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * 1649586839 ^ 1774819686;
            continue;
          case 32:
            flag6 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -1436597152 ^ 1904855942;
            continue;
          default:
            goto label_44;
        }
        flag2 = num3 != 0;
        num1 = 119726906;
        continue;
label_13:
        int num10;
        num1 = num10 = num5 == 0 ? 683551802 : (num10 = 260078083);
        continue;
label_17:
        flag5 = num4 != 0;
        num1 = 2078082391;
      }
label_44:
      Promotion promotion = new Promotion(Square.\u206C⁬‬⁬‍‭‎‮‭‏‮‍‏‍‫‬⁯⁪⁪‫‬‌‫​​​⁪⁭‌⁭⁮⁪‍‬‪​⁯‪‮⁫‮());
      try
      {
        int num11 = (int) Square.\u206E⁮⁫⁭​‌⁫⁯‫⁮‪‌​‌⁫⁮⁫⁬​⁫⁫‎‪‎⁯‬⁯‏‏⁭‍​⁯⁭⁫‬‌‍⁭⁯‮((Form) promotion);
label_46:
        int num12 = 498944229;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ 1251801192)) % 4U)
          {
            case 0:
              num12 = (int) num13 * 974467897 ^ 202054698;
              continue;
            case 1:
              this.Kind = promotion.Piece;
              num12 = (int) num13 * -11052664 ^ 539181552;
              continue;
            case 3:
              goto label_46;
            default:
              goto label_57;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_51:
          int num14 = 1218008129;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1251801192)) % 4U)
            {
              case 0:
                goto label_51;
              case 1:
                Square.\u206D‪⁯⁭‍‪⁬‬‌‭‮‮⁮‏‫‭⁪‬‌‭‏‪⁫‍⁪‌⁯‫‎⁫⁭​‏⁬​‪‎​‭⁯‮((IDisposable) promotion);
                num14 = (int) num15 * -1494826765 ^ 559758889;
                continue;
              case 2:
                num14 = (int) num15 * -1092286261 ^ 1484584645;
                continue;
              default:
                goto label_56;
            }
          }
        }
label_56:;
      }
label_57:
label_58:
      int num16 = 286754046;
label_59:
      while (true)
      {
        uint num17;
        int rank;
        Square square1;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int file;
        bool flag13;
        bool flag14;
        Square square2;
        switch ((num17 = (uint) (num16 ^ 1251801192)) % 51U)
        {
          case 0:
            num16 = 438007412;
            continue;
          case 1:
            num16 = (int) num17 * -2141523034 ^ -1330873887;
            continue;
          case 2:
            num16 = 618896128;
            continue;
          case 3:
            num16 = 54123786;
            continue;
          case 4:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = 1478127668;
            continue;
          case 5:
            this.msg = \u003CModule\u003E.\u200B‬‮‪‮‭‮⁫⁮‎⁮‎⁬‏⁭‎‎‮‮‍‪⁪⁬⁬‍‌‎⁪⁫‏⁭‫‍‍‭⁮⁫‎⁪⁭‮<string>(2963369560U);
            flag14 = flag1;
            num16 = (int) num17 * 632426800 ^ 555535247;
            continue;
          case 6:
            num16 = (int) num17 * -6008068 ^ 440437454;
            continue;
          case 7:
            int num18 = !flag14 ? 1525269587 : (num18 = 1090779113);
            num16 = num18 ^ (int) num17 * 2145385628;
            continue;
          case 8:
            from.Piece = this.Piece;
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * -1034360052 ^ -924932450;
            continue;
          case 9:
            num16 = (int) num17 * 1442916957 ^ -1848780216;
            continue;
          case 10:
            PlaySound.Play();
            num16 = 1078802999;
            continue;
          case 11:
            int num19 = flag11 ? -1587397049 : (num19 = -1208022061);
            num16 = num19 ^ (int) num17 * -1203882749;
            continue;
          case 12:
            flag10 = flag9;
            num16 = 1734072291;
            continue;
          case 13:
            int num20 = !flag12 ? -782307779 : (num20 = -519641540);
            num16 = num20 ^ (int) num17 * -882746398;
            continue;
          case 14:
            file = chessPiece.Current.File;
            num16 = (int) num17 * 1886597616 ^ 1060165127;
            continue;
          case 15:
            num16 = (int) num17 * -1306738465 ^ -869091336;
            continue;
          case 16:
            num16 = 578516729;
            continue;
          case 17:
            num16 = (int) num17 * 472553750 ^ -227634251;
            continue;
          case 18:
            rank = chessPiece.Current.Rank;
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * -1113410274 ^ 525036337;
            continue;
          case 19:
            int num21 = this.Board.lights.IsOnCheck ? 1657829866 : (num21 = 907582425);
            num16 = num21 ^ (int) num17 * 1372338464;
            continue;
          case 20:
            flag11 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num16 = (int) num17 * 1141255418 ^ -356332258;
            continue;
          case 21:
            goto label_60;
          case 22:
            int num22 = !flag10 ? -45780850 : (num22 = -1409147231);
            num16 = num22 ^ (int) num17 * -879437;
            continue;
          case 23:
            num16 = (int) num17 * 227404134 ^ -1102259750;
            continue;
          case 24:
            num16 = (int) num17 * 940176466 ^ 452109891;
            continue;
          case 25:
            num16 = (int) num17 * 864003493 ^ -1561427400;
            continue;
          case 26:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = 1741919529;
            continue;
          case 27:
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * -2026708100 ^ 1621894238;
            continue;
          case 28:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * 491922478 ^ 1953648579;
            continue;
          case 29:
            num16 = (int) num17 * -1676574965 ^ 1155452255;
            continue;
          case 30:
            flag9 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1022991731 ^ -1697671865;
            continue;
          case 31:
            flag13 = flag1;
            num16 = (int) num17 * -723623181 ^ -910259184;
            continue;
          case 32:
            this.msg = \u003CModule\u003E.\u200D⁮‫⁪⁭​⁫⁫⁮‭‍‍⁮‎‏‫​⁪⁭​⁬‍⁪‬⁬‍‍⁪‮‍‎‮⁬⁯‏‮‫‪‮‌‮<string>(3933907937U);
            num16 = (int) num17 * 1930746778 ^ -165088343;
            continue;
          case 33:
            this.Board.lights.FindAllMoves();
            num16 = (int) num17 * -2111841909 ^ 1805700390;
            continue;
          case 34:
            square1.Piece = chessPiece;
            num16 = (int) num17 * 665615621 ^ -535707627;
            continue;
          case 35:
            num16 = (int) num17 * -1344927638 ^ -1753187131;
            continue;
          case 36:
            flag9 = true;
            flag12 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * -1590708544 ^ -1209777882;
            continue;
          case 37:
            int num23 = !flag13 ? -606652769 : (num23 = -224631487);
            num16 = num23 ^ (int) num17 * -1954880190;
            continue;
          case 38:
            num16 = (int) num17 * -541146454 ^ 304140480;
            continue;
          case 39:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * 18597981 ^ 1374315448;
            continue;
          case 40:
            goto label_58;
          case 41:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -1151276736 ^ -2088263660;
            continue;
          case 42:
            num16 = (int) num17 * 867089854 ^ 97718679;
            continue;
          case 43:
            flag8 = chessPiece != null;
            num16 = 321146610;
            continue;
          case 44:
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * -1615185534 ^ -2039247088;
            continue;
          case 45:
            goto label_89;
          case 46:
            num16 = (int) num17 * -151958195 ^ -837304619;
            continue;
          case 47:
            square2 = this.Board[0, rank];
            break;
          case 48:
            int num24 = flag8 ? 974596903 : (num24 = 327473742);
            num16 = num24 ^ (int) num17 * 409874620;
            continue;
          case 49:
            this.SwitchPlayer();
            num16 = (int) num17 * 627922998 ^ -1732777261;
            continue;
          case 50:
            this.Board.lights.FindAllMoves();
            num16 = 563107356;
            continue;
          default:
            goto label_53;
        }
        square1 = square2;
        num16 = 1387141546;
      }
label_60:
      return;
label_53:
      return;
label_89:
      this.Board.lights.IsOnCheck = false;
      num16 = 497738181;
      goto label_59;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = 1631463611;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        Square square1;
        ChessPiece chessPiece2;
        Square square2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 840408893)) % 36U)
        {
          case 0:
            num1 = 900026293;
            continue;
          case 1:
            int num5 = !flag1 ? 2131297405 : (num5 = 1433036694);
            num1 = num5 ^ (int) num2 * -441988520;
            continue;
          case 2:
            num1 = (int) num2 * 738074359 ^ 467033516;
            continue;
          case 3:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 2041464485 ^ -170251987;
            continue;
          case 4:
            chessPiece1 = chessPiece2;
            num1 = 297015059;
            continue;
          case 5:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -448056544 ^ -1516587929;
            continue;
          case 6:
            num1 = (int) num2 * 559110289 ^ -590179612;
            continue;
          case 7:
            if (this.Piece.Kind == Pieces.King)
            {
              num3 = 1;
              goto label_18;
            }
            else
            {
              num1 = (int) num2 * 763545184 ^ 753126651;
              continue;
            }
          case 8:
            num1 = (int) num2 * -885857633 ^ 1744381959;
            continue;
          case 9:
            num1 = (int) num2 * 1911154374 ^ 704722319;
            continue;
          case 10:
            num1 = (int) num2 * 1691137515 ^ 1807731379;
            continue;
          case 11:
            int num6 = this.Piece.Kind != Pieces.Rook ? -1465938668 : (num6 = -582425627);
            num1 = num6 ^ (int) num2 * -462951065;
            continue;
          case 12:
            flag4 = Square.\u200D‮‏‮‬⁯⁪‍‪‮‏⁫​⁪‪‎⁯‭‍⁫‮⁮⁪⁬⁭​‌⁪‎‌⁬‏​⁯‪‭‬‍‫‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u206C⁯⁬​‎⁪‏‮‫⁭‌‪⁬‎⁫‭‬⁬‫‫‌​‭‫‬‫‮‬‮⁫‌‌⁬‌‎⁫⁭⁬‍‌‮<string>(2629860221U));
            num1 = (int) num2 * -116147560 ^ 1719068618;
            continue;
          case 13:
            num1 = (int) num2 * 796716275 ^ -606355122;
            continue;
          case 14:
            num1 = 1992691668;
            continue;
          case 15:
            int num7 = flag4 ? 714638643 : (num7 = 908545969);
            num1 = num7 ^ (int) num2 * -1763675109;
            continue;
          case 16:
            num1 = 494222821;
            continue;
          case 17:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 787683098 ^ 1204404762;
            continue;
          case 18:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_18;
          case 19:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 1715580795 ^ 631458396;
            continue;
          case 20:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * 423934823 ^ 1529269809;
            continue;
          case 21:
            flag2 = this.Piece.Current.File == 6;
            num1 = 153575025;
            continue;
          case 22:
            goto label_1;
          case 23:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 2022120385 ^ -691774994;
            continue;
          case 24:
            int num8;
            num1 = num8 = this.Piece.Current.File != 2 ? 453145400 : (num8 = 245809738);
            continue;
          case 25:
            square2.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * 1741980727 ^ 457110925;
            continue;
          case 26:
            square1 = this.Board[5, 7];
            square1.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -2107489080 ^ -1842223844;
            continue;
          case 27:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1613492882 ^ -141196194;
            continue;
          case 28:
            int num9 = !flag2 ? -1915489739 : (num9 = -1624236045);
            num1 = num9 ^ (int) num2 * 1367630079;
            continue;
          case 29:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            break;
          case 30:
            chessPiece2 = (ChessPiece) null;
            if (this.Board.BlackCanCastleKingSide)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * -1685492492 ^ 282223156;
            continue;
          case 32:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1004991907;
            continue;
          case 33:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1323741879;
            continue;
          case 34:
            int num10 = !flag3 ? 2024793215 : (num10 = 1080875376);
            num1 = num10 ^ (int) num2 * -646276945;
            continue;
          case 35:
            square2 = this.Board[3, 7];
            num1 = (int) num2 * 1964246370 ^ 1728325378;
            continue;
          default:
            goto label_43;
        }
        flag1 = num4 != 0;
        num1 = 743292804;
        continue;
label_18:
        flag3 = num3 != 0;
        num1 = 1302818923;
      }
label_43:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = -876142473;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        Square square1;
        bool flag1;
        bool flag2;
        Square square2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -332280592)) % 37U)
        {
          case 0:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            goto label_42;
          case 1:
            square1 = this.Board[3, 0];
            num1 = (int) num2 * -502391808 ^ 366813069;
            continue;
          case 2:
            this.Board[0, 0].Piece = (ChessPiece) null;
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * -1912834910 ^ 1825106869;
            continue;
          case 3:
            chessPiece2 = chessPiece1;
            num1 = -2119862719;
            continue;
          case 4:
            int num5 = flag1 ? -154157993 : (num5 = -798551387);
            num1 = num5 ^ (int) num2 * -1845900669;
            continue;
          case 5:
            num1 = -730530299;
            continue;
          case 6:
            num1 = (int) num2 * 174973223 ^ 2127670571;
            continue;
          case 7:
            square2 = this.Board[5, 0];
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * 1385959124 ^ 1952115313;
            continue;
          case 8:
            num1 = (int) num2 * -602515415 ^ 1683761381;
            continue;
          case 9:
            num1 = (int) num2 * -1310104235 ^ -1876625323;
            continue;
          case 10:
            square1.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * -1943084978 ^ 15043522;
            continue;
          case 11:
            num1 = (int) num2 * -253665215 ^ 87064614;
            continue;
          case 12:
            num1 = (int) num2 * 1950897155 ^ -787009857;
            continue;
          case 13:
            this.Board[7, 0].Piece = (ChessPiece) null;
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 1251123761 ^ -1362271877;
            continue;
          case 14:
            goto label_1;
          case 15:
            num1 = (int) num2 * -1241159212 ^ -1804383902;
            continue;
          case 16:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = -2128300702;
            continue;
          case 17:
            int num6 = flag3 ? 481077698 : (num6 = 443786519);
            num1 = num6 ^ (int) num2 * 1181952787;
            continue;
          case 18:
            num1 = -4593548;
            continue;
          case 19:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 1677739263 ^ 887040566;
              continue;
            }
            num4 = 1;
            break;
          case 20:
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * -778089772 ^ -1262227531;
            continue;
          case 22:
            num1 = (int) num2 * 102506237 ^ 1354503284;
            continue;
          case 23:
            flag3 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 1628218233 ^ 1611181605;
            continue;
          case 24:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = -2098141828;
            continue;
          case 25:
            int num7 = !flag2 ? 1579015093 : (num7 = 1894545240);
            num1 = num7 ^ (int) num2 * 1873482627;
            continue;
          case 26:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -507407506 ^ -1486182996;
            continue;
          case 27:
            num1 = (int) num2 * 1503827900 ^ 2084031829;
            continue;
          case 28:
            flag1 = Square.\u200D‮‏‮‬⁯⁪‍‪‮‏⁫​⁪‪‎⁯‭‍⁫‮⁮⁪⁬⁭​‌⁪‎‌⁬‏​⁯‪‭‬‍‫‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u200B‬‮‪‮‭‮⁫⁮‎⁮‎⁬‏⁭‎‎‮‮‍‪⁪⁬⁬‍‌‎⁪⁫‏⁭‫‍‍‭⁮⁫‎⁪⁭‮<string>(977306017U));
            num1 = (int) num2 * -2134068356 ^ 1841000206;
            continue;
          case 29:
            num1 = -362514689;
            continue;
          case 30:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1790758770 ^ -1710254498;
            continue;
          case 31:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 32:
            num1 = -1389659491;
            continue;
          case 33:
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * -1166081464 ^ 892590607;
              continue;
            }
            num3 = 1;
            goto label_42;
          case 34:
            int num8;
            num1 = num8 = this.Piece.Current.File != 6 ? -1804144721 : (num8 = -805121288);
            continue;
          case 35:
            int num9 = !flag4 ? -2094603627 : (num9 = -107852078);
            num1 = num9 ^ (int) num2 * -2055316104;
            continue;
          case 36:
            int num10 = this.Piece.Kind == Pieces.Rook ? -338132026 : (num10 = -539370494);
            num1 = num10 ^ (int) num2 * -1081547811;
            continue;
          default:
            goto label_44;
        }
        flag2 = num4 != 0;
        num1 = -420034405;
        continue;
label_42:
        flag4 = num3 != 0;
        num1 = -496474945;
      }
label_44:
      return chessPiece2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove() => Square.\u200C‍⁭‎‫⁪⁭​‏⁯⁬‌⁬‬​‬⁭‍‭⁮⁪‎⁪⁬‭​‏⁭‬‫‍‏⁪⁬⁯⁯‪⁯‪‬‮((Control) this.panel1, (Image) null);

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -11111504;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -37376607)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 1856440931 ^ -1485815218;
            continue;
          case 1:
            if (disposing)
            {
              num1 = (int) num2 * 895264806 ^ 1033170826;
              continue;
            }
            num3 = 0;
            break;
          case 2:
            goto label_1;
          case 3:
            Square.\u206D‪⁯⁭‍‪⁬‬‌‭‮‮⁮‏‫‭⁪‬‌‭‏‪⁫‍⁪‌⁯‫‎⁫⁭​‏⁬​‪‎​‭⁯‮((IDisposable) this.components);
            num1 = (int) num2 * 1764344792 ^ 1876518411;
            continue;
          case 4:
            base.Dispose(disposing);
            num1 = -1401298005;
            continue;
          case 5:
            goto label_3;
          case 6:
            num3 = this.components != null ? 1 : 0;
            break;
          case 7:
            num1 = (int) num2 * 206649065 ^ 1339309897;
            continue;
          case 8:
            num1 = (int) num2 * -655872406 ^ -192247303;
            continue;
          default:
            goto label_14;
        }
        int num4;
        num1 = num4 = num3 == 0 ? -224253981 : (num4 = -903217400);
      }
label_3:
      return;
label_14:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 57741770;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 61356475)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 1562509894 ^ 1086926214;
            continue;
          case 1:
            Square.\u202B‭⁭⁮‫⁬​‏⁬‎‍‬⁮⁮​‬⁮⁭⁯‎‎⁫‪‭​‬⁬⁯‬‏⁪‪⁪⁪‎‭⁬‍‪⁯‮((Control) this);
            num1 = (int) num2 * -1972600664 ^ 520097668;
            continue;
          case 2:
            Square.\u202E⁮‭⁫‌‎‮⁬⁮​‏⁫‌⁯⁭‬‎⁭‮‌⁯‮‭‍‬⁯⁮‍⁮‎‍‭‎‮‍⁬‪‭‏‮‮((ContainerControl) this, AutoScaleMode.Font);
            Square.\u200F‮‏‏‪​⁫⁪⁪‎⁯⁭‎⁮‎⁫‮‍⁯‫⁭⁬‪⁪⁭‏‌‏‪⁬‬⁬⁬‬⁭⁯‎‌‌⁬‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 909853470 ^ 23432917;
            continue;
          case 3:
            goto label_3;
          case 4:
            Square.\u206C‪‏⁫‫⁪⁭⁯‌‌⁯​‫‮‬‏⁯⁭‭‫⁯‮‎‫‍⁫‬‮‎‬⁯‪⁫⁫‪‭‎‏⁮⁭‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1452705022 ^ 414090451;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * -1298117545 ^ 1361694737;
            continue;
          case 7:
            Square.\u202B‮‮⁫‍⁮⁬⁫⁮⁮⁮‬‎‍‬⁪⁫‏⁪⁬⁬‏‎⁪⁯‌‪​⁫‪⁬‭‎⁮‎‬‍‏‭‍‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -459448001 ^ -1552857932;
            continue;
          case 8:
            this.Name = \u003CModule\u003E.\u206C⁯⁬​‎⁪‏‮‫⁭‌‪⁬‎⁫‭‬⁬‫‫‌​‭‫‬‫‮‬‮⁫‌‌⁬‌‎⁫⁭⁬‍‌‮<string>(407653297U);
            num1 = (int) num2 * 1666756850 ^ -879806173;
            continue;
          case 9:
            Square.\u206F⁯‬​⁬‬‪⁪‬⁯‌‍⁫‏‌‬‬‭⁬⁬⁬‎​‮​​‮‌‫⁪⁮⁯⁯‏‫⁯‪⁯⁬‪‮((Control) this, false);
            num1 = (int) num2 * -565914256 ^ 1571438844;
            continue;
          case 10:
            Square.\u206E⁬‬‮​‫‎‪‬‍⁬‌‪​‎‌‬⁬‎‭⁯⁭​​‌⁫‪⁪‭‍‬⁬⁪‪⁫⁪‌‮‍⁮‮((Control) this, new Padding(0));
            num1 = (int) num2 * 2066612751 ^ 1903713431;
            continue;
          case 11:
            num1 = (int) num2 * -413339439 ^ 1335819971;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    static Delegate \u200F‬‮‍⁮‮‪‌⁭‪⁭‭‮‎⁭‪‎⁮‫‪⁬‏⁫‌‭‮⁭‬​​‭‎⁬​⁭‎⁬‭⁭‮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u202A‏⁭​‬⁮‎⁫‌⁪​‪‌⁭‪⁬‭‍⁯⁮‏⁭⁬‎⁭⁯⁬‪‌​⁯‪⁭⁪​‭‎⁫​⁯‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206D⁮⁬‫‌‪‎‍‎‬‭‏⁭‭⁭‮⁯​‬‬‎‎‫⁬‭‭​⁬‫⁮‮⁯‮⁫‍⁮⁬‪‍‎‮([In] object obj0) => obj0.ToString();

    static string \u206D‬‍⁪⁪‪‏‫⁭⁬‮​⁪⁫‍⁫‮‌‍⁮‪‌‏⁮⁬⁬‍‮‏⁮‭‭‍‎⁪⁫‎‎‎⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206F‫⁫‏‎‎⁭‍‎⁪⁫‌⁫‪‌‫‫‌‏‏‬‫⁭⁮‮‮⁯‪‌‬‏⁪‫⁬‭‪‬​‫⁪‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u200D⁭⁫⁭‫​‭‭‌‫‪⁮⁭‏‪‮⁯⁬⁯⁫‎⁭​‮⁯‏‌‭⁯⁪‎‎‭‍⁭‎‪⁯⁯‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u200E⁫‬‍​⁪⁮⁫⁮⁭⁪⁯‏‏‎​⁬‎‭​⁯⁯‪‭⁯⁯⁬‭‮‍⁮⁪‎⁯⁪‍‌​‏⁮‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u200C⁮⁪‬⁭⁭‮⁪‬‭‫‭‎⁬‭‪⁬‪⁬⁬‌‌‍‫⁫‌‪⁬‏‌‫‌​​⁯⁭⁮‬⁪⁭‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u206C⁬‬⁬‍‭‎‮‭‏‮‍‏‍‫‬⁯⁪⁪‫‬‌‫​​​⁪⁭‌⁭⁮⁪‍‬‪​⁯‪‮⁫‮() => Cursor.Position;

    static DialogResult \u206E⁮⁫⁭​‌⁫⁯‫⁮‪‌​‌⁫⁮⁫⁬​⁫⁫‎‪‎⁯‬⁯‏‏⁭‍​⁯⁭⁫‬‌‍⁭⁯‮([In] Form obj0) => obj0.ShowDialog();

    static void \u206D‪⁯⁭‍‪⁬‬‌‭‮‮⁮‏‫‭⁪‬‌‭‏‪⁫‍⁪‌⁯‫‎⁫⁭​‏⁬​‪‎​‭⁯‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200D‮‏‮‬⁯⁪‍‪‮‏⁫​⁪‪‎⁯‭‍⁫‮⁮⁪⁬⁭​‌⁪‎‌⁬‏​⁯‪‭‬‍‫‏‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u200C‍⁭‎‫⁪⁭​‏⁯⁬‌⁬‬​‬⁭‍‭⁮⁪‎⁪⁬‭​‏⁭‬‫‍‏⁪⁬⁯⁯‪⁯‪‬‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202B‭⁭⁮‫⁬​‏⁬‎‍‬⁮⁮​‬⁮⁭⁯‎‎⁫‪‭​‬⁬⁯‬‏⁪‪⁪⁪‎‭⁬‍‪⁯‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202B‮‮⁫‍⁮⁬⁫⁮⁮⁮‬‎‍‬⁪⁫‏⁪⁬⁬‏‎⁪⁯‌‪​⁫‪⁬‭‎⁮‎‬‍‏‭‍‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202E⁮‭⁫‌‎‮⁬⁮​‏⁫‌⁯⁭‬‎⁭‮‌⁯‮‭‍‬⁯⁮‍⁮‎‍‭‎‮‍⁬‪‭‏‮‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u200F‮‏‏‪​⁫⁪⁪‎⁯⁭‎⁮‎⁫‮‍⁯‫⁭⁬‪⁪⁭‏‌‏‪⁬‬⁬⁬‬⁭⁯‎‌‌⁬‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206E⁬‬‮​‫‎‪‬‍⁬‌‪​‎‌‬⁬‎‭⁯⁭​​‌⁫‪⁪‭‍‬⁬⁪‪⁫⁪‌‮‍⁮‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u206C‪‏⁫‫⁪⁭⁯‌‌⁯​‫‮‬‏⁯⁭‭‫⁯‮‎‫‍⁫‬‮‎‬⁯‪⁫⁫‪‭‎‏⁮⁭‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206F⁯‬​⁬‬‪⁪‬⁯‌‍⁫‏‌‬‬‭⁬⁬⁬‎​‮​​‮‌‫⁪⁮⁯⁯‏‫⁯‪⁯⁬‪‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
