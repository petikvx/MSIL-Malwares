// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONNode
// Assembly: ContractHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E915048-53CD-4869-AA6D-7821BA258ED2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-226153caf46a7078970ce7ca5feb4aac6882ecb128e89ec40abb3be26166dd41.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONNode
  {
    public virtual void Add(string aKey, JSONNode aItem)
    {
    }

    public virtual JSONNode this[int aIndex]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) null;
label_1:
        int num1 = -1292835611;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1855633627)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 332925139 ^ -916861928;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
      }
    }

    public virtual JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -1689955125;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -275669596)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1809798461 ^ -2145399705;
              continue;
            case 3:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -1054855014 ^ -1794345137;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return jsonNode;
      }
      set
      {
      }
    }

    public virtual string Value
    {
      get => "";
      set
      {
      }
    }

    public virtual int Count
    {
      get
      {
label_1:
        int num1 = 739055850;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1687216622)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              count = 0;
              num1 = (int) num2 * -921228268 ^ 318427669;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public virtual void Add(JSONNode aItem) => this.Add("", aItem);

    public virtual JSONNode Remove(string aKey) => (JSONNode) null;

    public virtual JSONNode Remove(int aIndex)
    {
      JSONNode jsonNode = (JSONNode) null;
label_1:
      int num1 = -1786575674;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1633700903)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 1421460716 ^ 631381102;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return jsonNode;
    }

    public virtual JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode = aNode;
label_1:
      int num1 = -1171770827;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -951055241)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1051319800 ^ 1011948796;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return jsonNode;
    }

    public virtual IEnumerable<JSONNode> Childs
    {
      get
      {
        JSONNode.\u003Cget_Childs\u003Ed__17 getChildsD17 = new JSONNode.\u003Cget_Childs\u003Ed__17(-2);
        getChildsD17.\u003C\u003E4__this = this;
label_1:
        int num1 = 577644978;
        IEnumerable<JSONNode> childs;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1981925059)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              childs = (IEnumerable<JSONNode>) getChildsD17;
              num1 = (int) num2 * -614979663 ^ 5966486;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return childs;
      }
    }

    public IEnumerable<JSONNode> DeepChilds
    {
      get
      {
        JSONNode.\u003Cget_DeepChilds\u003Ed__19 getDeepChildsD19 = new JSONNode.\u003Cget_DeepChilds\u003Ed__19(-2);
label_1:
        int num1 = 1931818804;
        IEnumerable<JSONNode> deepChilds;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 47573349)) % 4U)
          {
            case 1:
              getDeepChildsD19.\u003C\u003E4__this = this;
              num1 = (int) num2 * 990911537 ^ -236560622;
              continue;
            case 2:
              deepChilds = (IEnumerable<JSONNode>) getDeepChildsD19;
              num1 = (int) num2 * 686078801 ^ -547273389;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return deepChilds;
      }
    }

    public override string ToString()
    {
label_1:
      int num1 = -1458256286;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -912578748)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = nameof (JSONNode);
            num1 = (int) num2 * 2140947256 ^ 1816450273;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public virtual string ToString(string aPrefix)
    {
label_1:
      int num1 = 2114519923;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1893489310)) % 4U)
        {
          case 1:
            str = nameof (JSONNode);
            num1 = (int) num2 * -1171555405 ^ 490205483;
            continue;
          case 2:
            num1 = (int) num2 * -1175494682 ^ 1042244870;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public virtual int AsInt
    {
      get
      {
        int result = 0;
        bool flag = int.TryParse(this.Value, out result);
label_1:
        int num1 = 138724501;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 112306367)) % 6U)
          {
            case 0:
              asInt = result;
              num1 = (int) num2 * 1726908783 ^ 1152156810;
              continue;
            case 1:
              asInt = 0;
              num1 = 883238534;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -61082927 ^ -525974249;
              continue;
            case 4:
              int num3 = !flag ? 1129027026 : (num3 = 1399766067);
              num1 = num3 ^ (int) num2 * -1546119456;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asInt;
      }
      set
      {
label_1:
        int num1 = -2143834617;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1412202904)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 1540477717 ^ 143268205;
              continue;
            case 1:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              this.Value = value.ToString();
              num1 = (int) num2 * -1490524909 ^ 660173573;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public virtual float AsFloat
    {
      get
      {
        float result = 0.0f;
label_1:
        int num1 = 1579917883;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2000698860)) % 6U)
          {
            case 0:
              asFloat = result;
              num1 = (int) num2 * 365720381 ^ 767884362;
              continue;
            case 1:
              asFloat = 0.0f;
              num1 = 50752322;
              continue;
            case 2:
              num1 = (int) num2 * -629998224 ^ 182429516;
              continue;
            case 3:
              int num3 = !float.TryParse(this.Value, NumberStyles.Float, (IFormatProvider) JSONNode.\u206C‭⁫‎‎‪​⁬⁬⁯‬​‫‫⁮‏⁫‪⁯‍⁫‭‬⁮⁯‌‮​⁭‮‌⁭​‏​⁯⁭⁯‏‪‮(), out result) ? -1783755655 : (num3 = -1646714086);
              num1 = num3 ^ (int) num2 * -291867816;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_7:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = -694870002;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1232020777)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Value = value.ToString();
              num1 = (int) num2 * -342593559 ^ -1809547691;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -716970568 ^ 1259506875;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public virtual double AsDouble
    {
      get
      {
label_1:
        int num1 = 110404618;
        double result;
        double asDouble;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1522490973)) % 7U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 942442501 ^ 1658997551;
              continue;
            case 2:
              asDouble = result;
              num1 = (int) num2 * 357752936 ^ 1291411956;
              continue;
            case 3:
              asDouble = 0.0;
              num1 = 957720682;
              continue;
            case 4:
              int num3 = flag ? 1175344478 : (num3 = 1512925584);
              num1 = num3 ^ (int) num2 * -1868018626;
              continue;
            case 5:
              result = 0.0;
              flag = double.TryParse(this.Value, out result);
              num1 = (int) num2 * -1292662956 ^ -1769588448;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return asDouble;
      }
      set => this.Value = value.ToString();
    }

    public virtual bool AsBool
    {
      get
      {
        bool result = false;
        if (!bool.TryParse(this.Value, out result))
          goto label_4;
label_1:
        int num1 = 1869595265;
label_2:
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 188693811)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 578991945 ^ 838820169;
              continue;
            case 3:
              asBool = result;
              num1 = (int) num2 * 772929872 ^ 370667271;
              continue;
            case 4:
              goto label_4;
            default:
              goto label_6;
          }
        }
label_6:
        return asBool;
label_4:
        asBool = !JSONNode.\u206B‪‭​‏⁬⁭‌‎​‬⁯⁭⁪‏‌⁪⁪⁪⁮​⁬⁮‬‭‌⁮‪‌‫⁮‮⁪‮⁪⁬​‍‫‮(this.Value);
        num1 = 1010043005;
        goto label_2;
      }
      set => this.Value = value ? "true" : "false";
    }

    public virtual JSONArray AsArray => this as JSONArray;

    public virtual JSONClass AsObject => this as JSONClass;

    public static implicit operator JSONNode(string s)
    {
label_1:
      int num1 = -581217731;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -70704185)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 1747579060 ^ 334954011;
            continue;
          case 2:
            jsonNode = (JSONNode) new JSONData(s);
            num1 = (int) num2 * 502602434 ^ 907913526;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return jsonNode;
    }

    public static implicit operator string(JSONNode d)
    {
label_1:
      int num1 = 521826197;
      string str1;
      while (true)
      {
        uint num2;
        string str2;
        switch ((num2 = (uint) (num1 ^ 543701862)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -1494044202 ^ 798077296;
            continue;
          case 2:
            str2 = d.Value;
            break;
          case 3:
            goto label_1;
          case 4:
            if (!(d == (object) null))
            {
              num1 = (int) num2 * -418439187 ^ -1804694235;
              continue;
            }
            str2 = (string) null;
            break;
          default:
            goto label_9;
        }
        str1 = str2;
        num1 = 1155722609;
      }
label_9:
      return str1;
    }

    public static bool operator ==(JSONNode a, object b)
    {
      if (b != null)
        goto label_7;
label_1:
      int num1 = -320769941;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1361973905)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            flag1 = (object) a == b;
            num1 = -1032400863;
            continue;
          case 3:
            goto label_6;
          case 4:
            int num3 = !flag2 ? 1180165881 : (num3 = 633274028);
            num1 = num3 ^ (int) num2 * 1677821392;
            continue;
          case 5:
            num1 = (int) num2 * 487301136 ^ 405788225;
            continue;
          case 6:
            flag1 = true;
            num1 = (int) num2 * 1584138353 ^ -1396267174;
            continue;
          default:
            goto label_10;
        }
      }
label_6:
      int num4 = a is JSONLazyCreator ? 1 : 0;
      goto label_8;
label_10:
      return flag1;
label_7:
      num4 = 0;
label_8:
      flag2 = num4 != 0;
      num1 = -1658958797;
      goto label_2;
    }

    public static bool operator !=(JSONNode a, object b) => !(a == b);

    public override bool Equals(object obj) => (object) this == obj;

    public override int GetHashCode() => this.\u202D⁪‭⁭‎‍‫‬⁫⁬‍⁬​⁫‭‪‮‎‮⁪‏‍⁮⁬⁭⁭‏‍⁪‮⁬‏‫⁫​⁭⁭‌‏‍‮();

    internal static string Escape(string aText)
    {
      string str1 = "";
label_1:
      int num1 = -579114470;
      int num2;
      string str2;
      char ch1;
      char ch2;
      char ch3;
      string str3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1191064839)) % 28U)
        {
          case 0:
            goto label_1;
          case 1:
label_25:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, ch3.ToString());
            num1 = -776001645;
            continue;
          case 2:
            ++num2;
            num1 = (int) num3 * -1924966202 ^ 1246882752;
            continue;
          case 3:
label_8:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, "\\f");
            num1 = -1648531664;
            continue;
          case 4:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, "\\\\");
            num1 = -1676557619;
            continue;
          case 5:
            str3 = str1;
            num1 = (int) num3 * -287441418 ^ -135024045;
            continue;
          case 6:
label_29:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, "\\n");
            num1 = -2098962610;
            continue;
          case 7:
            str2 = aText;
            num1 = (int) num3 * 1858892762 ^ -1234223320;
            continue;
          case 8:
            num1 = (int) num3 * 1088127722 ^ 1535063796;
            continue;
          case 9:
            int num4;
            num1 = num4 = num2 < JSONNode.\u202D​⁫‎‬⁫​‪‮⁬⁮⁯‭‎‎‌⁭⁭⁯‮⁪‫‫⁬⁫‫⁯‬‮‫‮⁭‪⁮⁭⁬⁭‫⁯⁬‮(str2) ? -125090170 : (num4 = -2052143332);
            continue;
          case 10:
            ch2 = ch3;
            num1 = (int) num3 * -1480620913 ^ -1650706409;
            continue;
          case 11:
label_10:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, "\\t");
            num1 = -2098962610;
            continue;
          case 13:
            num1 = (int) num3 * 2076616661 ^ 172627137;
            continue;
          case 14:
            int num5;
            num1 = num5 = ch1 != '"' ? -1897383064 : (num5 = -1916627379);
            continue;
          case 15:
            num1 = -558545029;
            continue;
          case 16:
            ch1 = ch2;
            num1 = (int) num3 * -1637625832 ^ 1212616838;
            continue;
          case 17:
            num1 = (int) num3 * 1180031257 ^ -1382218001;
            continue;
          case 18:
            num1 = (int) num3 * 1687195172 ^ 1007366043;
            continue;
          case 19:
            switch (ch1)
            {
              case '\b':
                goto label_23;
              case '\t':
                goto label_10;
              case '\n':
                goto label_29;
              case '\v':
                goto label_25;
              case '\f':
                goto label_8;
              case '\r':
                goto label_7;
              default:
                num1 = (int) num3 * -502544157 ^ 778098994;
                continue;
            }
          case 20:
            num1 = (int) num3 * 1225139240 ^ -1845180562;
            continue;
          case 21:
            int num6;
            num1 = num6 = ch1 == '\\' ? -1634749463 : (num6 = -2039761719);
            continue;
          case 22:
label_23:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, "\\b");
            num1 = -2098962610;
            continue;
          case 23:
            num2 = 0;
            num1 = (int) num3 * -615619267 ^ -2118731089;
            continue;
          case 24:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, "\\\"");
            num1 = -2098962610;
            continue;
          case 25:
label_7:
            str1 = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, "\\r");
            num1 = -2098962610;
            continue;
          case 26:
            num1 = (int) num3 * 1815570950 ^ -1100403918;
            continue;
          case 27:
            ch3 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(str2, num2);
            num1 = -762700149;
            continue;
          default:
            goto label_30;
        }
      }
label_30:
      return str3;
    }

    public static JSONNode Parse(string aJSON)
    {
      Stack<JSONNode> jsonNodeStack = new Stack<JSONNode>();
      JSONNode jsonNode1 = (JSONNode) null;
      int num1 = 0;
label_1:
      int num2 = 257575166;
      string aItem;
      bool flag1;
      bool flag2;
      bool flag3;
      char ch1;
      bool flag4;
      string aKey;
      bool flag5;
      bool flag6;
      bool flag7;
      bool flag8;
      bool flag9;
      char ch2;
      JSONNode jsonNode2;
      bool flag10;
      bool flag11;
      bool flag12;
      bool flag13;
      char ch3;
      bool flag14;
      bool flag15;
      char ch4;
      bool flag16;
      bool flag17;
      string s;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 1624644391)) % 148U)
        {
          case 0:
            jsonNode1.Add((JSONNode) aItem);
            num2 = (int) num3 * -295812918 ^ 1859739782;
            continue;
          case 1:
            string str1 = aItem;
            ch2 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            string str2 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str1, str2);
            num2 = (int) num3 * -1391917874 ^ -990422302;
            continue;
          case 2:
            jsonNode1 = jsonNodeStack.Peek();
            num2 = (int) num3 * 1115176939 ^ -1675426390;
            continue;
          case 3:
            num2 = (int) num3 * 1303689222 ^ 741667982;
            continue;
          case 4:
            num2 = (int) num3 * 888739596 ^ 2106747044;
            continue;
          case 5:
            num2 = (int) num3 * 472332160 ^ 603135715;
            continue;
          case 6:
            s = JSONNode.\u202C‪⁯⁮​⁭⁪⁬‫‭‫⁮⁫⁭⁮⁫⁫⁬⁯‬⁮‏‍‪‪‫​‏‭‮‮⁪‬⁮⁮‍‬⁭‬‌‮(aJSON, num1 + 1, 4);
            num2 = (int) num3 * 659960283 ^ 1247390674;
            continue;
          case 7:
            flag1 = JSONNode.\u200C⁬‫⁯⁯⁬‪‪‌‏⁪‫⁭‍‬⁫‏⁪⁬⁫⁬⁭⁮⁪​⁮​‬⁫​‎​‍‪⁬​​⁯‮‭‮(aItem, "");
            num2 = 1415973005;
            continue;
          case 8:
            jsonNode1.Add(jsonNodeStack.Peek());
            num2 = (int) num3 * -168985876 ^ 927110631;
            continue;
          case 9:
            int num4 = !flag10 ? 2111262742 : (num4 = 1574786287);
            num2 = num4 ^ (int) num3 * -109952487;
            continue;
          case 10:
            flag2 = !flag2;
            num2 = 1210671108;
            continue;
          case 11:
            aKey = JSONNode.\u200C⁬‮‬‫‎‫⁬⁬‍​⁮‌‎⁬‭⁯⁭‫‎⁫‮⁮⁫‎‍‫‌‮‌⁮⁯⁫‏⁭⁬‫‬⁭⁫‮(aKey);
            num2 = (int) num3 * -1389803852 ^ 83120156;
            continue;
          case 12:
            int num5 = !flag8 ? -1552776352 : (num5 = -1273284778);
            num2 = num5 ^ (int) num3 * -1836221706;
            continue;
          case 13:
            num2 = (int) num3 * -1307762199 ^ -441289442;
            continue;
          case 14:
            jsonNode1.Add(aKey, (JSONNode) aItem);
            num2 = (int) num3 * -349130562 ^ -15347873;
            continue;
          case 15:
          case 24:
          case 64:
          case 67:
          case 146:
label_58:
            ++num1;
            num2 = 378026062;
            continue;
          case 16:
            string str3 = aItem;
            ch2 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            string str4 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str3, str4);
            num2 = (int) num3 * 162203939 ^ -1835577572;
            continue;
          case 17:
label_86:
            num2 = 1610907321;
            continue;
          case 18:
            int num6 = !flag11 ? 290796473 : (num6 = 137871579);
            num2 = num6 ^ (int) num3 * -468774464;
            continue;
          case 19:
            jsonNode2 = jsonNode1;
            num2 = 1748303077;
            continue;
          case 20:
            flag8 = num1 < JSONNode.\u202D​⁫‎‬⁫​‪‮⁬⁮⁯‭‎‎‌⁭⁭⁯‮⁪‫‫⁬⁫‫⁯‬‮‫‮⁭‪⁮⁭⁬⁭‫⁯⁬‮(aJSON);
            num2 = 205696439;
            continue;
          case 21:
            num2 = 291679344;
            continue;
          case 22:
            int num7 = !flag5 ? -1348622986 : (num7 = -1945660207);
            num2 = num7 ^ (int) num3 * -1670546261;
            continue;
          case 23:
            num2 = (int) num3 * -1788601814 ^ 1985772724;
            continue;
          case 25:
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(aItem, "\f");
            num2 = 2039429443;
            continue;
          case 26:
            jsonNodeStack.Push((JSONNode) new JSONArray());
            num2 = 1938440394;
            continue;
          case 27:
            aKey = "";
            aItem = "";
            num2 = 2050291118;
            continue;
          case 28:
            goto label_1;
          case 29:
            num2 = (int) num3 * -1434734570 ^ 761671841;
            continue;
          case 30:
            num2 = (int) num3 * 1545777852 ^ 293572451;
            continue;
          case 31:
            aKey = "";
            num2 = 1106307378;
            continue;
          case 32:
            num2 = (int) num3 * 1764107070 ^ 1069381542;
            continue;
          case 33:
            int num8 = !flag9 ? -492249710 : (num8 = -1803017492);
            num2 = num8 ^ (int) num3 * -1358328294;
            continue;
          case 34:
            int num9 = flag1 ? 740311892 : (num9 = 2034805896);
            num2 = num9 ^ (int) num3 * -849272692;
            continue;
          case 35:
            num2 = (int) num3 * -208806490 ^ -2053909319;
            continue;
          case 36:
label_76:
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(aItem, ch4.ToString());
            num2 = 90459275;
            continue;
          case 37:
            int num10 = ch3 != 'b' ? -923263123 : (num10 = -2006451427);
            num2 = num10 ^ (int) num3 * -1286820012;
            continue;
          case 38:
            num2 = (int) num3 * 1860250650 ^ -1567550569;
            continue;
          case 39:
            jsonNode1.Add(aKey, jsonNodeStack.Peek());
            num2 = (int) num3 * -397917757 ^ -1261101641;
            continue;
          case 40:
            ch4 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            ch3 = ch4;
            num2 = (int) num3 * 820976446 ^ -975908351;
            continue;
          case 41:
            aItem = "";
            num2 = (int) num3 * 329621503 ^ -1132124805;
            continue;
          case 42:
            int num11;
            num2 = num11 = flag2 ? 378075478 : (num11 = 1593697656);
            continue;
          case 43:
            flag13 = JSONNode.\u200C⁬‫⁯⁯⁬‪‪‌‏⁪‫⁭‍‬⁫‏⁪⁬⁫⁬⁭⁮⁪​⁮​‬⁫​‎​‍‪⁬​​⁯‮‭‮(aKey, "");
            num2 = 650173660;
            continue;
          case 44:
            num2 = 1601486649;
            continue;
          case 45:
            aKey = "";
            num2 = 722171501;
            continue;
          case 46:
            int num12 = ch3 <= 'f' ? 1611520242 : (num12 = 433654985);
            num2 = num12 ^ (int) num3 * -1012825002;
            continue;
          case 47:
            aKey = "";
            aItem = "";
            num2 = 199427997;
            continue;
          case 48:
            switch (ch1)
            {
              case '\t':
                goto label_111;
              case '\n':
              case '\r':
                goto label_58;
              case '\v':
              case '\f':
                goto label_53;
              default:
                num2 = (int) num3 * -1255039113 ^ 1302291918;
                continue;
            }
          case 49:
            int num13;
            num2 = num13 = ch1 == '"' ? 294071033 : (num13 = 1969836534);
            continue;
          case 50:
            aKey = aItem;
            aItem = "";
            num2 = 1793770618;
            continue;
          case 51:
            flag12 = jsonNode1 is JSONArray;
            num2 = (int) num3 * -1589054837 ^ -895484034;
            continue;
          case 52:
            int num14 = !flag12 ? 1367660716 : (num14 = 1854464907);
            num2 = num14 ^ (int) num3 * 919082944;
            continue;
          case 53:
            goto label_133;
          case 54:
            num2 = (int) num3 * -1475161151 ^ 1454673989;
            continue;
          case 55:
            int num15 = flag2 ? 678131780 : (num15 = 237487608);
            num2 = num15 ^ (int) num3 * -584457624;
            continue;
          case 56:
            num2 = (int) num3 * -1092048128 ^ 378098998;
            continue;
          case 57:
            flag16 = jsonNode1 != (object) null;
            num2 = (int) num3 * -1987080053 ^ -62122284;
            continue;
          case 58:
            int num16 = jsonNodeStack.Count <= 0 ? -568480575 : (num16 = -2001513729);
            num2 = num16 ^ (int) num3 * 1852198355;
            continue;
          case 59:
            num2 = (int) num3 * 1937850753 ^ 368943000;
            continue;
          case 60:
label_53:
            string str5 = aItem;
            ch2 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            string str6 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str5, str6);
            num2 = 2107953227;
            continue;
          case 61:
            int num17 = !flag15 ? -1326526633 : (num17 = -1937146911);
            num2 = num17 ^ (int) num3 * 973016913;
            continue;
          case 62:
            num2 = (int) num3 * -298507744 ^ 2040385281;
            continue;
          case 63:
            flag4 = JSONNode.\u200C⁬‫⁯⁯⁬‪‪‌‏⁪‫⁭‍‬⁫‏⁪⁬⁫⁬⁭⁮⁪​⁮​‬⁫​‎​‍‪⁬​​⁯‮‭‮(aKey, "");
            num2 = 16918836;
            continue;
          case 65:
            num2 = (int) num3 * 1881095258 ^ -2111889767;
            continue;
          case 66:
            jsonNode1 = jsonNodeStack.Peek();
            num2 = (int) num3 * -131826373 ^ 1341817117;
            continue;
          case 68:
            flag11 = flag2;
            num2 = (int) num3 * -1283155421 ^ 598519109;
            continue;
          case 69:
            num2 = 1268123976;
            continue;
          case 70:
            int num18;
            num2 = num18 = ch1 != ' ' ? 563765784 : (num18 = 1454076186);
            continue;
          case 71:
            int num19 = !flag13 ? 202208658 : (num19 = 1710024332);
            num2 = num19 ^ (int) num3 * -1039591968;
            continue;
          case 72:
label_52:
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(aItem, "\r");
            num2 = 790381417;
            continue;
          case 73:
            string str7 = aItem;
            ch2 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            string str8 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str7, str8);
            num2 = (int) num3 * -1427131247 ^ -177034671;
            continue;
          case 74:
            int num20;
            num2 = num20 = ch1 > ']' ? 135066723 : (num20 = 1722190167);
            continue;
          case 75:
            num2 = (int) num3 * 694157927 ^ -921027419;
            continue;
          case 76:
            int num21 = ch1 != ':' ? 2031853842 : (num21 = 589852783);
            num2 = num21 ^ (int) num3 * 1052009807;
            continue;
          case 77:
            num2 = 895615002;
            continue;
          case 78:
label_80:
            int num22;
            num2 = num22 = !flag2 ? 810819429 : (num22 = 1396861578);
            continue;
          case 79:
            string str9 = aItem;
            ch2 = (char) int.Parse(s, NumberStyles.AllowHexSpecifier);
            string str10 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str9, str10);
            num2 = (int) num3 * 1637199604 ^ -1639997467;
            continue;
          case 80:
            int num23;
            num2 = num23 = ch1 == '}' ? 945126661 : (num23 = 704516734);
            continue;
          case 81:
            aItem = "";
            aKey = "";
            num2 = (int) num3 * -1786685483 ^ 64053784;
            continue;
          case 82:
            int num24;
            num2 = num24 = ch3 == 'f' ? 700496782 : (num24 = 662662340);
            continue;
          case 83:
            int num25 = !flag4 ? -1508745611 : (num25 = -502000101);
            num2 = num25 ^ (int) num3 * 340487746;
            continue;
          case 84:
            num2 = (int) num3 * 1120878855 ^ -1301300057;
            continue;
          case 85:
            num2 = (int) num3 * 1408138402 ^ 40332248;
            continue;
          case 86:
            num1 += 4;
            num2 = (int) num3 * 1490896741 ^ -749002553;
            continue;
          case 87:
            flag17 = jsonNode1 is JSONArray;
            num2 = (int) num3 * -305540145 ^ -1241457086;
            continue;
          case 88:
            num2 = (int) num3 * -28845548 ^ 786675396;
            continue;
          case 89:
            jsonNode1 = jsonNodeStack.Peek();
            num2 = (int) num3 * 557473178 ^ 421274478;
            continue;
          case 90:
            aKey = JSONNode.\u200C⁬‮‬‫‎‫⁬⁬‍​⁮‌‎⁬‭⁯⁭‫‎⁫‮⁮⁫‎‍‫‌‮‌⁮⁯⁫‏⁭⁬‫‬⁭⁫‮(aKey);
            num2 = (int) num3 * 1371541411 ^ 735666794;
            continue;
          case 91:
            goto label_26;
          case 92:
            num2 = 300693000;
            continue;
          case 93:
            num2 = (int) num3 * -1874098807 ^ -2015646534;
            continue;
          case 94:
            string str11 = aItem;
            ch2 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            string str12 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str11, str12);
            num2 = (int) num3 * -66751850 ^ 1377522304;
            continue;
          case 95:
            int num26 = ch1 <= ' ' ? -1039833895 : (num26 = -51430428);
            num2 = num26 ^ (int) num3 * 1008242562;
            continue;
          case 96:
            int num27;
            num2 = num27 = ch1 == '{' ? 2122987447 : (num27 = 2006550352);
            continue;
          case 97:
            string str13 = aItem;
            ch2 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            string str14 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str13, str14);
            num2 = (int) num3 * -1728520454 ^ 1971675493;
            continue;
          case 99:
            num2 = (int) num3 * 1187947025 ^ -1258799676;
            continue;
          case 100:
label_115:
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(aItem, "\t");
            num2 = 90459275;
            continue;
          case 101:
            num2 = (int) num3 * 311764957 ^ -274882995;
            continue;
          case 102:
            int num28 = !flag6 ? -1160461712 : (num28 = -1876026087);
            num2 = num28 ^ (int) num3 * 441496790;
            continue;
          case 103:
            num2 = (int) num3 * -1075416463 ^ 1185925448;
            continue;
          case 104:
            flag10 = flag2;
            num2 = 1004645962;
            continue;
          case 105:
            int num29 = !flag7 ? -1472681691 : (num29 = -578346145);
            num2 = num29 ^ (int) num3 * 1902762715;
            continue;
          case 106:
            int num30;
            num2 = num30 = ch3 != 'n' ? 1044761604 : (num30 = 633133372);
            continue;
          case 107:
            jsonNode1.Add(aKey, jsonNodeStack.Peek());
            num2 = (int) num3 * 1116362354 ^ -489460344;
            continue;
          case 108:
            switch (ch3)
            {
              case 'r':
                goto label_52;
              case 's':
                goto label_76;
              case 't':
                goto label_115;
              case 'u':
                goto label_86;
              default:
                num2 = 1942525289;
                continue;
            }
          case 109:
            num2 = (int) num3 * 1078933947 ^ -1589770208;
            continue;
          case 110:
            num2 = (int) num3 * 1948408557 ^ 1992720580;
            continue;
          case 111:
            num2 = (int) num3 * 2107674074 ^ -686512595;
            continue;
          case 112:
            num2 = (int) num3 * 993077896 ^ 103721316;
            continue;
          case 113:
label_111:
            int num31;
            num2 = num31 = !flag2 ? 1222746108 : (num31 = 856862813);
            continue;
          case 114:
            jsonNodeStack.Pop();
            flag9 = JSONNode.\u200C⁬‫⁯⁯⁬‪‪‌‏⁪‫⁭‍‬⁫‏⁪⁬⁫⁬⁭⁮⁪​⁮​‬⁫​‎​‍‪⁬​​⁯‮‭‮(aItem, "");
            num2 = 1772528358;
            continue;
          case 115:
            flag7 = JSONNode.\u200C⁬‫⁯⁯⁬‪‪‌‏⁪‫⁭‍‬⁫‏⁪⁬⁫⁬⁭⁮⁪​⁮​‬⁫​‎​‍‪⁬​​⁯‮‭‮(aKey, "");
            num2 = 1296311822;
            continue;
          case 116:
            int num32;
            num2 = num32 = ch1 != ',' ? 1385417052 : (num32 = 986633869);
            continue;
          case 117:
            ch1 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            int num33;
            num2 = num33 = ch1 <= ',' ? 1117968152 : (num33 = 747218089);
            continue;
          case 118:
            aItem = "";
            num2 = (int) num3 * 1530739619 ^ -1895754121;
            continue;
          case 119:
            flag6 = jsonNode1 is JSONArray;
            num2 = (int) num3 * 1652081724 ^ -1658641143;
            continue;
          case 120:
            switch (ch1)
            {
              case '[':
                goto label_80;
              case '\\':
                goto label_8;
              case ']':
                goto label_136;
              default:
                num2 = 1876399862;
                continue;
            }
          case 121:
            aKey = JSONNode.\u200C⁬‮‬‫‎‫⁬⁬‍​⁮‌‎⁬‭⁯⁭‫‎⁫‮⁮⁫‎‍‫‌‮‌⁮⁯⁫‏⁭⁬‫‬⁭⁫‮(aKey);
            flag5 = jsonNode1 is JSONArray;
            num2 = (int) num3 * 1050321818 ^ 522965695;
            continue;
          case 122:
label_136:
            int num34;
            num2 = num34 = !flag2 ? 391019989 : (num34 = 34186154);
            continue;
          case 123:
            num2 = (int) num3 * -193314720 ^ 1058530328;
            continue;
          case 124:
            num2 = (int) num3 * 174991140 ^ -690332005;
            continue;
          case 125:
            num2 = (int) num3 * -1218691086 ^ -1912835269;
            continue;
          case 126:
            flag3 = jsonNodeStack.Count == 0;
            num2 = 696550126;
            continue;
          case (uint) sbyte.MaxValue:
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(aItem, "\n");
            num2 = 793420534;
            continue;
          case 128:
            int num35 = flag17 ? -174240315 : (num35 = -588211860);
            num2 = num35 ^ (int) num3 * -975041341;
            continue;
          case 129:
            string str15 = aItem;
            ch2 = JSONNode.\u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮(aJSON, num1);
            string str16 = ch2.ToString();
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(str15, str16);
            num2 = (int) num3 * 2045087810 ^ -1825709891;
            continue;
          case 130:
            aItem = JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮(aItem, "\b");
            num2 = 90459275;
            continue;
          case 131:
            jsonNode1.Add(aKey, (JSONNode) aItem);
            num2 = (int) num3 * -2117812456 ^ 2044186145;
            continue;
          case 132:
            int num36 = !flag16 ? 1150296910 : (num36 = 411409971);
            num2 = num36 ^ (int) num3 * 1072514291;
            continue;
          case 133:
            num2 = (int) num3 * 217910279 ^ 1682344404;
            continue;
          case 134:
            flag2 = false;
            num2 = (int) num3 * 767240867 ^ -863476187;
            continue;
          case 135:
            int num37 = !flag14 ? -383393209 : (num37 = -797404017);
            num2 = num37 ^ (int) num3 * -840879835;
            continue;
          case 136:
            int num38;
            num2 = num38 = !flag2 ? 75480345 : (num38 = 2138129970);
            continue;
          case 137:
            int num39 = flag3 ? 1438123901 : (num39 = 587227366);
            num2 = num39 ^ (int) num3 * 780360619;
            continue;
          case 138:
            jsonNode1.Add(jsonNodeStack.Peek());
            num2 = (int) num3 * -258832767 ^ -659559564;
            continue;
          case 139:
            flag15 = JSONNode.\u200C⁬‫⁯⁯⁬‪‪‌‏⁪‫⁭‍‬⁫‏⁪⁬⁫⁬⁭⁮⁪​⁮​‬⁫​‎​‍‪⁬​​⁯‮‭‮(aKey, "");
            num2 = 731035734;
            continue;
          case 140:
            num2 = (int) num3 * 1220272152 ^ 792116336;
            continue;
          case 141:
            num2 = (int) num3 * -296333849 ^ 1614156060;
            continue;
          case 142:
            jsonNode1.Add((JSONNode) aItem);
            num2 = (int) num3 * 1697020012 ^ -7019165;
            continue;
          case 143:
            num2 = (int) num3 * -552936830 ^ -1506608786;
            continue;
          case 144:
            jsonNodeStack.Push((JSONNode) new JSONClass());
            flag14 = jsonNode1 != (object) null;
            num2 = 1945922564;
            continue;
          case 145:
            num2 = (int) num3 * 1192348518 ^ 1506298747;
            continue;
          case 147:
label_8:
            ++num1;
            num2 = 2075043795;
            continue;
          default:
            goto label_148;
        }
      }
label_26:
      throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("JSON Parse: Quotation marks seems to be messed up.");
label_133:
      throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("JSON Parse: Too many closing brackets");
label_148:
      return jsonNode2;
    }

    public virtual void Serialize(BinaryWriter aWriter)
    {
    }

    public void SaveToStream(Stream aData)
    {
label_1:
      int num1 = 5547526;
      BinaryWriter aWriter;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 217607609)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            aWriter = JSONNode.\u206A⁭‭‭‎‍‮⁬‎⁬‪⁮​‏⁪‭‬‏‬​⁭‭​‬‪‪‮‭‌⁫⁯‪⁪​⁭‍⁮‎⁬‌‮(aData);
            num1 = (int) num2 * 1049298168 ^ -360377082;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.Serialize(aWriter);
    }

    public void SaveToCompressedStream(Stream aData) => throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public void SaveToCompressedFile(string aFileName) => throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public string SaveToCompressedBase64() => throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public void SaveToFile(string aFileName)
    {
label_1:
      int num1 = -1125254426;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2027779884)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            JSONNode.\u206E⁫⁮‪⁬⁮⁬‎​‎‏‍‎⁬‏‬⁯‫⁯‎‏‏‏⁭‍⁭‍⁮‌⁭​⁭​​‌‌⁬⁬‮⁫‮(JSONNode.\u206E⁯⁯⁮⁫⁭⁫‪‮‭‏‍⁫‌⁫‏⁭‭​​‪⁬‏‎‎‬​‬‎‬⁪⁮‬‍⁪⁫‬‫⁮‬‮((FileSystemInfo) JSONNode.\u206A⁮‫⁯‏‭‎​‌⁯‭​⁪‫‎⁬‎‮⁪‫⁯⁭‭‪⁬‫⁭‪⁬‍‭‬‭‭‍⁮‏⁭‮‏‮(JSONNode.\u206A⁬‬‬⁮⁯​⁬⁪⁪‭⁯‬‭‎‭‮‬⁪⁮‏‌‌⁪⁫‭‎⁯‭⁭⁬⁬⁯⁬‪⁮⁬‭⁫‏‮(aFileName))));
            num1 = (int) num2 * -2072943648 ^ 584279222;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      FileStream aData = JSONNode.\u206D‏‍‪‏⁯‪‌⁫⁮‌⁫⁭‏‌‮‮‍​‪⁮⁫⁯‪‍‮‫⁫‌‍‍‭⁬‬‭⁭‫‏⁬‭‮(aFileName);
      try
      {
        this.SaveToStream((Stream) aData);
      }
      finally
      {
        if (aData != null)
        {
label_7:
          int num3 = -1327408975;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ -2027779884)) % 4U)
            {
              case 1:
                JSONNode.\u200E‌‬‫‫⁮⁮​⁬​‮‭⁪‭‏‫‮⁬⁭‎‭‪‌‏⁬‏‮‌‎‫⁬⁭​⁬‌‎​⁭⁭‍‮((IDisposable) aData);
                num3 = (int) num4 * 1608419369 ^ -2027290749;
                continue;
              case 2:
                num3 = (int) num4 * 1359053682 ^ -950248844;
                continue;
              case 3:
                goto label_7;
              default:
                goto label_11;
            }
          }
        }
label_11:;
      }
    }

    public string SaveToBase64()
    {
      MemoryStream aData = JSONNode.\u200C‍‏⁫‍‪⁫⁫‪‫‌⁮‎‭⁮‎⁬‫‌⁪⁪‍​⁯​⁪⁯⁫⁬‪⁬‏‮‏⁫​⁭‌‌‏‮();
      string base64;
      try
      {
        this.SaveToStream((Stream) aData);
label_2:
        int num1 = -1386451483;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -358853502)) % 6U)
          {
            case 0:
              goto label_2;
            case 1:
              JSONNode.\u200D⁬‏⁭‌⁪⁮⁮‬‭⁫‬‫‎⁯⁯⁪⁬‮⁪‌‪‍⁮‫⁫⁭⁪⁬‌‍‍‪⁬⁭‭⁮‪⁯‫‮((Stream) aData, 0L);
              num1 = (int) num2 * 362196561 ^ 1856513535;
              continue;
            case 3:
              num1 = (int) num2 * 1878642746 ^ 1632074597;
              continue;
            case 4:
              num1 = (int) num2 * 582827033 ^ 1744659267;
              continue;
            case 5:
              base64 = JSONNode.\u206D‬⁫⁭⁪‭‎‎‬​‭‮‎‬‌⁪‌‫‍​⁬⁫‬⁭‬‍‭‮‏‭‎⁪‭‬⁭⁯‪⁪⁭‏‮(JSONNode.\u202E⁬⁭‌‫​‎‭⁭⁯‌‪⁫‏⁬⁫‮⁬⁫‎‭⁬‎‮‍‬⁫‪⁮‭⁪‭‎‎⁭⁭​‎⁬‮‮(aData));
              num1 = (int) num2 * 932058002 ^ -1156699946;
              continue;
            default:
              goto label_13;
          }
        }
      }
      finally
      {
        if (aData != null)
        {
label_9:
          int num3 = -1879910435;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ -358853502)) % 3U)
            {
              case 0:
                goto label_9;
              case 2:
                JSONNode.\u200E‌‬‫‫⁮⁮​⁬​‮‭⁪‭‏‫‮⁬⁭‎‭‪‌‏⁬‏‮‌‎‫⁬⁭​⁬‌‎​⁭⁭‍‮((IDisposable) aData);
                num3 = (int) num4 * -773014385 ^ -718858027;
                continue;
              default:
                goto label_12;
            }
          }
        }
label_12:;
      }
label_13:
      return base64;
    }

    public static JSONNode Deserialize(BinaryReader aReader)
    {
label_1:
      int num1 = -435455069;
      int num2;
      int num3;
      JSONArray jsonArray;
      string aKey;
      JSONBinaryTag jsonBinaryTag1;
      int num4;
      bool flag1;
      JSONNode jsonNode;
      JSONBinaryTag jsonBinaryTag2;
      JSONClass jsonClass;
      bool flag2;
      int num5;
      JSONBinaryTag jsonBinaryTag3;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -585959410)) % 42U)
        {
          case 0:
            num1 = (int) num6 * 1527790528 ^ -747732125;
            continue;
          case 1:
            jsonBinaryTag2 = (JSONBinaryTag) JSONNode.\u200D‎​‮⁬‏⁭⁬⁪‌⁭⁮⁯‪⁬⁭‭⁫‏⁬‫‎‌‌‎⁪‪‪⁯‎‍‪‭⁯⁫⁭‪⁭‫‏‮(aReader);
            num1 = (int) num6 * -1571367004 ^ -1538760849;
            continue;
          case 2:
label_17:
            num1 = -261075268;
            continue;
          case 3:
label_4:
            num3 = JSONNode.\u206B‫‪⁮⁫‫⁬⁬​‮‬​⁯‫⁪​‬⁯‭‏⁮⁪⁯⁬⁭‮‏⁯‭‪‎‭⁪‪‌​‬‭‍⁫‮(aReader);
            num1 = -891472605;
            continue;
          case 4:
            flag2 = num2 < num4;
            num1 = -273951703;
            continue;
          case 5:
            switch (jsonBinaryTag1)
            {
              case JSONBinaryTag.Array:
                goto label_4;
              case JSONBinaryTag.Class:
                goto label_19;
              case JSONBinaryTag.Value:
                goto label_22;
              case JSONBinaryTag.IntValue:
                goto label_12;
              case JSONBinaryTag.DoubleValue:
                goto label_11;
              case JSONBinaryTag.BoolValue:
                goto label_21;
              case JSONBinaryTag.FloatValue:
                goto label_17;
              default:
                num1 = (int) num6 * 591274725 ^ -662690546;
                continue;
            }
          case 6:
            num5 = 0;
            num1 = (int) num6 * 916009422 ^ 471243968;
            continue;
          case 7:
            num1 = -1801293840;
            continue;
          case 8:
            num1 = (int) num6 * -183316685 ^ 11178556;
            continue;
          case 9:
            num4 = JSONNode.\u206B‫‪⁮⁫‫⁬⁬​‮‬​⁯‫⁪​‬⁯‭‏⁮⁪⁯⁬⁭‮‏⁯‭‪‎‭⁪‪‌​‬‭‍⁫‮(aReader);
            num1 = (int) num6 * -58441220 ^ 552299825;
            continue;
          case 10:
            num1 = (int) num6 * 1405789022 ^ 227800727;
            continue;
          case 11:
label_12:
            num1 = -918202655;
            continue;
          case 12:
            int num7 = !flag1 ? -1890800470 : (num7 = -1437887040);
            num1 = num7 ^ (int) num6 * 2074124187;
            continue;
          case 14:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u202A⁪‎​⁭‮‫‏‫⁫⁪‎​⁬⁬‬‎‪‫​⁭‌‬⁫‬‬‎‌‏⁮‮⁮⁬‍‪‎‮‎‪‬‮(aReader));
            num1 = (int) num6 * -680413622 ^ -186003008;
            continue;
          case 15:
label_22:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u200C⁬⁭‏‭⁯‏‮​‮‍‎‮‬⁫‮‎‌‭‌⁮‫⁫‫‍‌‏⁯‍​‭​‮​⁮⁮‮⁯‪‎‮(aReader));
            num1 = -214474432;
            continue;
          case 16:
            num1 = -1162200527;
            continue;
          case 17:
            jsonNode = (JSONNode) jsonClass;
            num1 = (int) num6 * -1264500157 ^ 292315067;
            continue;
          case 18:
            flag1 = num5 < num3;
            num1 = -728956822;
            continue;
          case 19:
label_21:
            num1 = -1144105654;
            continue;
          case 20:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u206F⁬​⁮‏‪‍​⁯‌‌⁪‏⁯‪‮⁪‮‪⁬⁮⁭⁯⁮‪⁮‌‭​‏⁮⁬⁬‍‏‮⁯⁪‌‭‮(aReader));
            num1 = (int) num6 * -1461488713 ^ 1633646301;
            continue;
          case 21:
            jsonArray = new JSONArray();
            num1 = (int) num6 * 1999250747 ^ -1918144017;
            continue;
          case 22:
            num1 = (int) num6 * -136992053 ^ 1717673475;
            continue;
          case 23:
            jsonClass = new JSONClass();
            num1 = (int) num6 * 198440307 ^ -1580281221;
            continue;
          case 24:
            JSONNode aItem = JSONNode.Deserialize(aReader);
            jsonClass.Add(aKey, aItem);
            num1 = (int) num6 * -1493964836 ^ -798375978;
            continue;
          case 25:
            jsonBinaryTag1 = jsonBinaryTag3;
            num1 = (int) num6 * -112726642 ^ 1821791547;
            continue;
          case 26:
            num1 = (int) num6 * 202857081 ^ -1920264131;
            continue;
          case 27:
            jsonBinaryTag3 = jsonBinaryTag2;
            num1 = (int) num6 * -1547683175 ^ -2015610094;
            continue;
          case 28:
label_19:
            num1 = -1944603627;
            continue;
          case 29:
            ++num2;
            num1 = (int) num6 * 838373560 ^ -1993807948;
            continue;
          case 30:
            goto label_25;
          case 31:
            num1 = (int) num6 * 463963318 ^ 1200775239;
            continue;
          case 32:
            ++num5;
            num1 = (int) num6 * -322913183 ^ 1998464954;
            continue;
          case 33:
            int num8 = !flag2 ? -465018940 : (num8 = -1095681655);
            num1 = num8 ^ (int) num6 * 1636729853;
            continue;
          case 34:
            jsonNode = (JSONNode) jsonArray;
            num1 = (int) num6 * 848804894 ^ 55035219;
            continue;
          case 35:
label_11:
            num1 = -693974085;
            continue;
          case 36:
            goto label_1;
          case 37:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u206B‫‪⁮⁫‫⁬⁬​‮‬​⁯‫⁪​‬⁯‭‏⁮⁪⁯⁬⁭‮‏⁯‭‪‎‭⁪‪‌​‬‭‍⁫‮(aReader));
            num1 = (int) num6 * 1121488780 ^ -1435184553;
            continue;
          case 38:
            num2 = 0;
            num1 = (int) num6 * 1778440487 ^ -22437374;
            continue;
          case 39:
            aKey = JSONNode.\u200C⁬⁭‏‭⁯‏‮​‮‍‎‮‬⁫‮‎‌‭‌⁮‫⁫‫‍‌‏⁯‍​‭​‮​⁮⁮‮⁯‪‎‮(aReader);
            num1 = (int) num6 * -1319301219 ^ 977112007;
            continue;
          case 40:
            jsonArray.Add(JSONNode.Deserialize(aReader));
            num1 = -774453168;
            continue;
          case 41:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u206B‭⁬‬⁭‏‬⁪⁮‫⁯‏‮‫‬‍⁯⁬‏‮⁬‎⁮⁪⁪⁮‪⁮‪⁯⁫⁯⁪‎⁬⁭‮‎‫⁮‮(aReader));
            num1 = (int) num6 * 429440982 ^ 1685110189;
            continue;
          default:
            goto label_44;
        }
      }
label_25:
      throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮(JSONNode.\u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮("Error deserializing JSON. Unknown tag: ", jsonBinaryTag2.ToString()));
label_44:
      return jsonNode;
    }

    public static JSONNode LoadFromCompressedFile(string aFileName) => throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public static JSONNode LoadFromCompressedStream(Stream aData) => throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public static JSONNode LoadFromCompressedBase64(string aBase64) => throw JSONNode.\u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public static JSONNode LoadFromStream(Stream aData)
    {
      BinaryReader aReader = JSONNode.\u200F‎‏‎‬‎‎‍‬‮‌‎‪‌⁫‬‬⁪​⁭‪​‫⁮​‮⁯‭⁭⁫‎⁯‌⁯‫⁪⁭‪‎‭‮(aData);
      try
      {
        return JSONNode.Deserialize(aReader);
      }
      finally
      {
        if (aReader != null)
        {
label_3:
          int num1 = 1410126097;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 410670458)) % 4U)
            {
              case 0:
                goto label_3;
              case 1:
                num1 = (int) num2 * -1527280400 ^ -1449238676;
                continue;
              case 3:
                JSONNode.\u200E‌‬‫‫⁮⁮​⁬​‮‭⁪‭‏‫‮⁬⁭‎‭‪‌‏⁬‏‮‌‎‫⁬⁭​⁬‌‎​⁭⁭‍‮((IDisposable) aReader);
                num1 = (int) num2 * 146478720 ^ 1358007763;
                continue;
              default:
                goto label_7;
            }
          }
        }
label_7:;
      }
    }

    public static JSONNode LoadFromFile(string aFileName)
    {
      FileStream aData = JSONNode.\u200C⁯‌⁮‌​‫‎‌⁫‎‎‎⁪‪‬⁭‏⁫‍⁯‍​⁯⁬⁫‎​⁬‍⁫⁮​‪‬‪​‍⁮‎‮(aFileName);
      try
      {
        return JSONNode.LoadFromStream((Stream) aData);
      }
      finally
      {
        if (aData != null)
        {
label_3:
          int num1 = -2060970226;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1761293243)) % 4U)
            {
              case 0:
                num1 = (int) num2 * 703859454 ^ 820348320;
                continue;
              case 2:
                goto label_3;
              case 3:
                JSONNode.\u200E‌‬‫‫⁮⁮​⁬​‮‭⁪‭‏‫‮⁬⁭‎‭‪‌‏⁬‏‮‌‎‫⁬⁭​⁬‌‎​⁭⁭‍‮((IDisposable) aData);
                num1 = (int) num2 * -636966421 ^ -440091608;
                continue;
              default:
                goto label_7;
            }
          }
        }
label_7:;
      }
    }

    public static JSONNode LoadFromBase64(string aBase64)
    {
      byte[] numArray = JSONNode.\u206B‎⁭⁯‪‌‪⁫⁪⁪⁮‏‭‪‭‌‫‭‫‎‪‭⁯⁫‎⁬⁪‮‫‮‏‮⁭‫‪‌‌⁬‮‌‮(aBase64);
label_1:
      int num1 = 2093434811;
      MemoryStream aData;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 274108436)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -1971097320 ^ -2119237463;
            continue;
          case 1:
            jsonNode = JSONNode.LoadFromStream((Stream) aData);
            num1 = (int) num2 * -71121839 ^ -1350162750;
            continue;
          case 2:
            goto label_1;
          case 3:
            aData = JSONNode.\u206C⁬‌​‍⁭‎⁭⁬⁮⁬⁯⁯‭‫⁪⁭⁫‏‮​‭⁯‬‌⁫‍‭⁬‪⁫⁫‏‫⁬‍‏⁬⁯⁫‮(numArray);
            JSONNode.\u200D⁬‏⁭‌⁪⁮⁮‬‭⁫‬‫‎⁯⁯⁪⁬‮⁪‌‪‍⁮‫⁫⁭⁪⁬‌‍‍‪⁬⁭‭⁮‪⁯‫‮((Stream) aData, 0L);
            num1 = (int) num2 * -272839939 ^ 267656980;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return jsonNode;
    }

    public JSONNode()
    {
label_1:
      int num1 = -126067223;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1167112408)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 39864120 ^ -1990522296;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static CultureInfo \u206C‭⁫‎‎‪​⁬⁬⁯‬​‫‫⁮‏⁫‪⁯‍⁫‭‬⁮⁯‌‮​⁭‮‌⁭​‏​⁯⁭⁯‏‪‮() => CultureInfo.InvariantCulture;

    static bool \u206B‪‭​‏⁬⁭‌‎​‬⁯⁭⁪‏‌⁪⁪⁪⁮​⁬⁮‬‭‌⁮‪‌‫⁮‮⁪‮⁪⁬​‍‫‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    int \u202D⁪‭⁭‎‍‫‬⁫⁬‍⁬​⁫‭‪‮‎‮⁪‏‍⁮⁬⁭⁭‏‍⁪‮⁬‏‫⁫​⁭⁭‌‏‍‮() => base.GetHashCode();

    static char \u202C‎‌⁫⁯⁮⁫‎‍⁯⁮‌​⁪‏⁯⁯‏‬‏‍⁬⁯‍⁯‏⁪‎⁭⁯⁫⁬‫⁪‫‎‭‍‌‌‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u200B⁪‭‪⁬⁫‭‏‎⁯‍‎⁭⁯⁯⁭‎‬⁯⁫‌‏⁬⁬‏‮‮​⁭‏⁮‬‫‍‏⁪‌⁭⁮⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202D​⁫‎‬⁫​‪‮⁬⁮⁯‭‎‎‌⁭⁭⁯‮⁪‫‫⁬⁫‫⁯‬‮‫‮⁭‪⁮⁭⁬⁭‫⁯⁬‮([In] string obj0) => obj0.Length;

    static string \u200C⁬‮‬‫‎‫⁬⁬‍​⁮‌‎⁬‭⁯⁭‫‎⁫‮⁮⁫‎‍‫‌‮‌⁮⁯⁫‏⁭⁬‫‬⁭⁫‮([In] string obj0) => obj0.Trim();

    static bool \u200C⁬‫⁯⁯⁬‪‪‌‏⁪‫⁭‍‬⁫‏⁪⁬⁫⁬⁭⁮⁪​⁮​‬⁫​‎​‍‪⁬​​⁯‮‭‮([In] string obj0, [In] string obj1) => obj0 != obj1;

    static Exception \u200D‎‪⁭‏⁫‪⁮⁯‍‏⁭​​‪⁯‭‌‬⁬⁯⁯‪⁬‏‎‮‮​⁭‬‌⁪‭‬​‮⁫‭⁬‮([In] string obj0) => new Exception(obj0);

    static string \u202C‪⁯⁮​⁭⁪⁬‫‭‫⁮⁫⁭⁮⁫⁫⁬⁯‬⁮‏‍‪‪‫​‏‭‮‮⁪‬⁮⁮‍‬⁭‬‌‮([In] string obj0, [In] int obj1, [In] int obj2) => obj0.Substring(obj1, obj2);

    static BinaryWriter \u206A⁭‭‭‎‍‮⁬‎⁬‪⁮​‏⁪‭‬‏‬​⁭‭​‬‪‪‮‭‌⁫⁯‪⁪​⁭‍⁮‎⁬‌‮([In] Stream obj0) => new BinaryWriter(obj0);

    static FileInfo \u206A⁬‬‬⁮⁯​⁬⁪⁪‭⁯‬‭‎‭‮‬⁪⁮‏‌‌⁪⁫‭‎⁯‭⁭⁬⁬⁯⁬‪⁮⁬‭⁫‏‮([In] string obj0) => new FileInfo(obj0);

    static DirectoryInfo \u206A⁮‫⁯‏‭‎​‌⁯‭​⁪‫‎⁬‎‮⁪‫⁯⁭‭‪⁬‫⁭‪⁬‍‭‬‭‭‍⁮‏⁭‮‏‮([In] FileInfo obj0) => obj0.Directory;

    static string \u206E⁯⁯⁮⁫⁭⁫‪‮‭‏‍⁫‌⁫‏⁭‭​​‪⁬‏‎‎‬​‬‎‬⁪⁮‬‍⁪⁫‬‫⁮‬‮([In] FileSystemInfo obj0) => obj0.FullName;

    static DirectoryInfo \u206E⁫⁮‪⁬⁮⁬‎​‎‏‍‎⁬‏‬⁯‫⁯‎‏‏‏⁭‍⁭‍⁮‌⁭​⁭​​‌‌⁬⁬‮⁫‮([In] string obj0) => Directory.CreateDirectory(obj0);

    static FileStream \u206D‏‍‪‏⁯‪‌⁫⁮‌⁫⁭‏‌‮‮‍​‪⁮⁫⁯‪‍‮‫⁫‌‍‍‭⁬‬‭⁭‫‏⁬‭‮([In] string obj0) => File.OpenWrite(obj0);

    static void \u200E‌‬‫‫⁮⁮​⁬​‮‭⁪‭‏‫‮⁬⁭‎‭‪‌‏⁬‏‮‌‎‫⁬⁭​⁬‌‎​⁭⁭‍‮([In] IDisposable obj0) => obj0.Dispose();

    static MemoryStream \u200C‍‏⁫‍‪⁫⁫‪‫‌⁮‎‭⁮‎⁬‫‌⁪⁪‍​⁯​⁪⁯⁫⁬‪⁬‏‮‏⁫​⁭‌‌‏‮() => new MemoryStream();

    static void \u200D⁬‏⁭‌⁪⁮⁮‬‭⁫‬‫‎⁯⁯⁪⁬‮⁪‌‪‍⁮‫⁫⁭⁪⁬‌‍‍‪⁬⁭‭⁮‪⁯‫‮([In] Stream obj0, [In] long obj1) => obj0.Position = obj1;

    static byte[] \u202E⁬⁭‌‫​‎‭⁭⁯‌‪⁫‏⁬⁫‮⁬⁫‎‭⁬‎‮‍‬⁫‪⁮‭⁪‭‎‎⁭⁭​‎⁬‮‮([In] MemoryStream obj0) => obj0.ToArray();

    static string \u206D‬⁫⁭⁪‭‎‎‬​‭‮‎‬‌⁪‌‫‍​⁬⁫‬⁭‬‍‭‮‏‭‎⁪‭‬⁭⁯‪⁪⁭‏‮([In] byte[] obj0) => Convert.ToBase64String(obj0);

    static byte \u200D‎​‮⁬‏⁭⁬⁪‌⁭⁮⁯‪⁬⁭‭⁫‏⁬‫‎‌‌‎⁪‪‪⁯‎‍‪‭⁯⁫⁭‪⁭‫‏‮([In] BinaryReader obj0) => obj0.ReadByte();

    static int \u206B‫‪⁮⁫‫⁬⁬​‮‬​⁯‫⁪​‬⁯‭‏⁮⁪⁯⁬⁭‮‏⁯‭‪‎‭⁪‪‌​‬‭‍⁫‮([In] BinaryReader obj0) => obj0.ReadInt32();

    static string \u200C⁬⁭‏‭⁯‏‮​‮‍‎‮‬⁫‮‎‌‭‌⁮‫⁫‫‍‌‏⁯‍​‭​‮​⁮⁮‮⁯‪‎‮([In] BinaryReader obj0) => obj0.ReadString();

    static double \u206B‭⁬‬⁭‏‬⁪⁮‫⁯‏‮‫‬‍⁯⁬‏‮⁬‎⁮⁪⁪⁮‪⁮‪⁯⁫⁯⁪‎⁬⁭‮‎‫⁮‮([In] BinaryReader obj0) => obj0.ReadDouble();

    static bool \u202A⁪‎​⁭‮‫‏‫⁫⁪‎​⁬⁬‬‎‪‫​⁭‌‬⁫‬‬‎‌‏⁮‮⁮⁬‍‪‎‮‎‪‬‮([In] BinaryReader obj0) => obj0.ReadBoolean();

    static float \u206F⁬​⁮‏‪‍​⁯‌‌⁪‏⁯‪‮⁪‮‪⁬⁮⁭⁯⁮‪⁮‌‭​‏⁮⁬⁬‍‏‮⁯⁪‌‭‮([In] BinaryReader obj0) => obj0.ReadSingle();

    static BinaryReader \u200F‎‏‎‬‎‎‍‬‮‌‎‪‌⁫‬‬⁪​⁭‪​‫⁮​‮⁯‭⁭⁫‎⁯‌⁯‫⁪⁭‪‎‭‮([In] Stream obj0) => new BinaryReader(obj0);

    static FileStream \u200C⁯‌⁮‌​‫‎‌⁫‎‎‎⁪‪‬⁭‏⁫‍⁯‍​⁯⁬⁫‎​⁬‍⁫⁮​‪‬‪​‍⁮‎‮([In] string obj0) => File.OpenRead(obj0);

    static byte[] \u206B‎⁭⁯‪‌‪⁫⁪⁪⁮‏‭‪‭‌‫‭‫‎‪‭⁯⁫‎⁬⁪‮‫‮‏‮⁭‫‪‌‌⁬‮‌‮([In] string obj0) => Convert.FromBase64String(obj0);

    static MemoryStream \u206C⁬‌​‍⁭‎⁭⁬⁮⁬⁯⁯‭‫⁪⁭⁫‏‮​‭⁯‬‌⁫‍‭⁬‪⁫⁫‏‫⁬‍‏⁬⁯⁫‮([In] byte[] obj0) => new MemoryStream(obj0);
  }
}
