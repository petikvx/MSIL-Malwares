// Decompiled with JetBrains decompiler
// Type: AppClient.BazSocket
// Assembly: AppClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 40D3B218-45AF-4713-B3C6-786D65AE1018
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.qe-710c3e02ba2956aa9af7f425e418218917e2c44f55f619222b605ff80f0dd9b9.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace AppClient
{
  public class BazSocket
  {
    private const int BACKLOG = 8;
    private int m_RecvSize;
    private byte[] m_RecvBuffer;
    private int m_SendSize;
    private byte[] m_SendBuffer;
    private ISynchronizeInvoke m_Sync;
    private Socket m_Socket;
    private NetworkStream m_Stream;
    private BazSocketState m_State;
    private IPEndPoint m_LocalEP;
    private IPEndPoint m_RemoteEP;
    private int m_RemotePort;
    private bool m_Init;
    private bool m_AsyncEvent;
    private bool m_AlwaysRaiseClose;
    private object AcceptSync;
    private object SendSync;
    private object RecvSync;
    private BazSocket._StateChanged CallStateChanged;
    private BazSocket._Connected CallConnected;
    private BazSocket._ConnectionFailed CallConnectionFailed;
    private BazSocket._Listening CallListening;
    private BazSocket._ListenFailed CallListenFailed;
    private BazSocket._Accepted CallAccepted;
    private BazSocket._AcceptFailed CallAcceptFailed;
    private BazSocket._DataArrival CallDataArrival;
    private BazSocket._SendProgress CallSendProgress;
    private BazSocket._SendComplete CallSendComplete;
    private BazSocket._Close CallClose;
    private BazSocket._ThreadException CallThreadException;

    public BazSocket()
    {
      ISynchronizeInvoke Sync = (ISynchronizeInvoke) null;
      // ISSUE: explicit constructor call
      this.\u002Ector(ref Sync);
    }

    public BazSocket(ref ISynchronizeInvoke Sync)
    {
      this.m_Sync = Sync;
      this.InitInvoke();
      this.m_AlwaysRaiseClose = false;
      this.m_AsyncEvent = true;
      this.AcceptSync = RuntimeHelpers.GetObjectValue(new object());
      this.SendSync = RuntimeHelpers.GetObjectValue(new object());
      this.RecvSync = RuntimeHelpers.GetObjectValue(new object());
      this.CreateSocket();
      this.InitBuffers();
      this.OnStateChanged(BazSocketState.Disconnected);
    }

    public BazSocket(ref ISynchronizeInvoke Sync, ref AcceptRequest Request)
    {
      if (Request.Sock == null || !Request.Sock.Connected || Request.Stream == null)
      {
        this.m_Init = false;
      }
      else
      {
        this.m_Sync = Sync;
        this.InitInvoke();
        this.m_AlwaysRaiseClose = false;
        this.m_AsyncEvent = true;
        this.m_Socket = Request.Sock;
        this.m_Stream = Request.Stream;
        this.m_State = BazSocketState.Connected;
        this.InitBuffers();
        this.AcceptSync = RuntimeHelpers.GetObjectValue(new object());
        this.SendSync = RuntimeHelpers.GetObjectValue(new object());
        this.RecvSync = RuntimeHelpers.GetObjectValue(new object());
        this.m_Init = true;
        this.OnStateChanged(BazSocketState.Connected);
        this.m_Stream.BeginRead(this.m_RecvBuffer, 0, this.m_RecvSize, new AsyncCallback(this.Receive_CallBack), (object) this.m_Socket);
      }
    }

    public event StateChangedEventHandler StateChanged;

    public event EventHandler Connected;

    public event ErrorEventHandler ConnectionFailed;

    public event EventHandler Listening;

    public event ErrorEventHandler ListenFailed;

    public event AcceptedEventHandler Accepted;

    public event ErrorEventHandler AcceptFailed;

    public event DataArrivalEventHandler DataArrival;

    public event SendProgressEventHandler SendProgress;

    public event SendCompleteEventHandler SendComplete;

    public event EventHandler Closed;

    public event ErrorEventHandler ThreadException;

    private void InitInvoke()
    {
      this.CallStateChanged = new BazSocket._StateChanged(this.Sync_StateChanged);
      this.CallConnected = new BazSocket._Connected(this.Sync_Connected);
      this.CallConnectionFailed = new BazSocket._ConnectionFailed(this.Sync_ConnectionFailed);
      this.CallListening = new BazSocket._Listening(this.Sync_Listening);
      this.CallListenFailed = new BazSocket._ListenFailed(this.Sync_ListenFailed);
      this.CallAccepted = new BazSocket._Accepted(this.Sync_Accepted);
      this.CallAcceptFailed = new BazSocket._AcceptFailed(this.Sync_AcceptFailed);
      this.CallDataArrival = new BazSocket._DataArrival(this.Sync_DataArrival);
      this.CallSendProgress = new BazSocket._SendProgress(this.Sync_SendProgress);
      this.CallSendComplete = new BazSocket._SendComplete(this.Sync_SendComplete);
      this.CallClose = new BazSocket._Close(this.Sync_Closed);
      this.CallThreadException = new BazSocket._ThreadException(this.Sync_ThreadException);
    }

    private bool InvokeRequired() => this.m_Sync != null && this.m_Sync.InvokeRequired;

    private void OnStateChanged(BazSocketState state)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallStateChanged, new object[1]
            {
              (object) state
            });
          else
            this.m_Sync.Invoke((Delegate) this.CallStateChanged, new object[1]
            {
              (object) state
            });
        }
        else
          this.Sync_StateChanged(state);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnConnected()
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallConnected, (object[]) null);
          else
            this.m_Sync.Invoke((Delegate) this.CallConnected, (object[]) null);
        }
        else
          this.Sync_Connected();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnConnectionFailed(Exception ex)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallConnectionFailed, new object[1]
            {
              (object) ex
            });
          else
            this.m_Sync.Invoke((Delegate) this.CallConnectionFailed, new object[1]
            {
              (object) ex
            });
        }
        else
          this.Sync_ConnectionFailed(ex);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        this.OnThreadException(ex1);
        ProjectData.ClearProjectError();
      }
    }

    private void OnListening()
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallListening, (object[]) null);
          else
            this.m_Sync.Invoke((Delegate) this.CallListening, (object[]) null);
        }
        else
          this.Sync_Listening();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnListenFailed(Exception ex)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallListenFailed, new object[1]
            {
              (object) ex
            });
          else
            this.m_Sync.Invoke((Delegate) this.CallListenFailed, new object[1]
            {
              (object) ex
            });
        }
        else
          this.Sync_ListenFailed(ex);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        this.OnThreadException(ex1);
        ProjectData.ClearProjectError();
      }
    }

    private void OnAccepted(AcceptRequest Request)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallAccepted, new object[1]
            {
              (object) Request
            });
          else
            this.m_Sync.Invoke((Delegate) this.CallAccepted, new object[1]
            {
              (object) Request
            });
        }
        else
          this.Sync_Accepted(Request);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnAcceptFailed(Exception ex)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallAcceptFailed, new object[1]
            {
              (object) ex
            });
          else
            this.m_Sync.BeginInvoke((Delegate) this.CallAcceptFailed, new object[1]
            {
              (object) ex
            });
        }
        else
          this.Sync_AcceptFailed(ex);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        this.OnThreadException(ex1);
        ProjectData.ClearProjectError();
      }
    }

    private void OnDataArrival(byte[] data)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallDataArrival, new object[1]
            {
              (object) data
            });
          else
            this.m_Sync.Invoke((Delegate) this.CallDataArrival, new object[1]
            {
              (object) data
            });
        }
        else
          this.Sync_DataArrival(data);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnSendProgress(int current, int total)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallSendProgress, new object[2]
            {
              (object) current,
              (object) total
            });
          else
            this.m_Sync.Invoke((Delegate) this.CallSendProgress, new object[2]
            {
              (object) current,
              (object) total
            });
        }
        else
          this.Sync_SendProgress(current, total);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnSendComplete(int total)
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallSendComplete, new object[1]
            {
              (object) total
            });
          else
            this.m_Sync.Invoke((Delegate) this.CallSendComplete, new object[1]
            {
              (object) total
            });
        }
        else
          this.Sync_SendComplete(total);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnClosed()
    {
      try
      {
        if (this.InvokeRequired())
        {
          if (this.m_AsyncEvent)
            this.m_Sync.BeginInvoke((Delegate) this.CallClose, (object[]) null);
          else
            this.m_Sync.Invoke((Delegate) this.CallClose, (object[]) null);
        }
        else
          this.Sync_Closed();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnThreadException(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OnThreadException(Exception ex)
    {
      if (this.InvokeRequired())
      {
        if (this.m_AsyncEvent)
          this.m_Sync.BeginInvoke((Delegate) this.CallThreadException, new object[1]
          {
            (object) ex
          });
        else
          this.m_Sync.Invoke((Delegate) this.CallThreadException, new object[1]
          {
            (object) ex
          });
      }
      else
        this.Sync_ThreadException(ex);
    }

    private void Sync_StateChanged(BazSocketState state)
    {
      StateChangedEventHandler stateChangedEvent = this.StateChangedEvent;
      if (stateChangedEvent == null)
        return;
      stateChangedEvent((object) this, state);
    }

    private void Sync_Connected()
    {
      EventHandler connectedEvent = this.ConnectedEvent;
      if (connectedEvent == null)
        return;
      connectedEvent((object) this, EventArgs.Empty);
    }

    private void Sync_ConnectionFailed(Exception ex)
    {
      ErrorEventHandler connectionFailedEvent = this.ConnectionFailedEvent;
      if (connectionFailedEvent == null)
        return;
      connectionFailedEvent((object) this, ex);
    }

    private void Sync_Listening()
    {
      EventHandler listeningEvent = this.ListeningEvent;
      if (listeningEvent == null)
        return;
      listeningEvent((object) this, EventArgs.Empty);
    }

    private void Sync_ListenFailed(Exception ex)
    {
      ErrorEventHandler listenFailedEvent = this.ListenFailedEvent;
      if (listenFailedEvent == null)
        return;
      listenFailedEvent((object) this, ex);
    }

    private void Sync_Accepted(AcceptRequest Request)
    {
      AcceptedEventHandler acceptedEvent = this.AcceptedEvent;
      if (acceptedEvent == null)
        return;
      acceptedEvent((object) this, Request);
    }

    private void Sync_AcceptFailed(Exception ex)
    {
      ErrorEventHandler acceptFailedEvent = this.AcceptFailedEvent;
      if (acceptFailedEvent == null)
        return;
      acceptFailedEvent((object) this, ex);
    }

    private void Sync_DataArrival(byte[] data)
    {
      DataArrivalEventHandler dataArrivalEvent = this.DataArrivalEvent;
      if (dataArrivalEvent == null)
        return;
      dataArrivalEvent((object) this, data);
    }

    private void Sync_SendProgress(int current, int total)
    {
      SendProgressEventHandler sendProgressEvent = this.SendProgressEvent;
      if (sendProgressEvent == null)
        return;
      sendProgressEvent((object) this, current, total);
    }

    private void Sync_SendComplete(int total)
    {
      SendCompleteEventHandler sendCompleteEvent = this.SendCompleteEvent;
      if (sendCompleteEvent == null)
        return;
      sendCompleteEvent((object) this, total);
    }

    private void Sync_Closed()
    {
      EventHandler closedEvent = this.ClosedEvent;
      if (closedEvent == null)
        return;
      closedEvent((object) this, EventArgs.Empty);
    }

    private void Sync_ThreadException(Exception ex)
    {
      ErrorEventHandler threadExceptionEvent = this.ThreadExceptionEvent;
      if (threadExceptionEvent == null)
        return;
      threadExceptionEvent((object) this, ex);
    }

    public bool Initialised => this.m_Init;

    public BazSocketState State => this.m_State;

    public IPEndPoint LocalEP
    {
      get => this.m_State != BazSocketState.Disconnected ? (IPEndPoint) this.m_Socket.LocalEndPoint : this.m_LocalEP;
      set
      {
        if (this.m_State != BazSocketState.Disconnected)
          return;
        this.m_LocalEP = value;
      }
    }

    public IPEndPoint RemoteEP
    {
      get => this.m_State == BazSocketState.Connected || this.m_State == BazSocketState.Connecting ? (IPEndPoint) this.m_Socket.RemoteEndPoint : this.m_RemoteEP;
      set
      {
        if (this.m_State != BazSocketState.Disconnected)
          return;
        this.m_RemoteEP = value;
      }
    }

    public bool AlwaysRaiseClose
    {
      get => this.m_AlwaysRaiseClose;
      set => this.m_AlwaysRaiseClose = value;
    }

    public bool AsyncEvent
    {
      get => this.m_AsyncEvent;
      set => this.m_AsyncEvent = value;
    }

    public int SendBufferSize
    {
      get => this.m_SendSize;
      set
      {
        if (!this.m_Init || this.m_State != BazSocketState.Disconnected)
          return;
        this.m_SendSize = value;
        this.m_Socket.SendBufferSize = this.m_SendSize;
        this.m_SendBuffer = new byte[checked (this.m_SendSize - 1 + 1)];
      }
    }

    public int ReceiveBufferSize
    {
      get => this.m_RecvSize;
      set
      {
        if (!this.m_Init || this.m_State != BazSocketState.Disconnected)
          return;
        this.m_RecvSize = value;
        this.m_Socket.ReceiveBufferSize = this.m_RecvSize;
        this.m_RecvBuffer = new byte[checked (this.m_RecvSize - 1 + 1)];
      }
    }

    public ISynchronizeInvoke SynchronizingObject
    {
      get => this.m_Sync;
      set => this.m_Sync = value;
    }

    public void Connect(string RemoteHost, int RemotePort)
    {
      if (this.m_State != BazSocketState.Disconnected)
        return;
      if (!this.m_Init)
        return;
      try
      {
        this.m_RemotePort = RemotePort;
        IPAddress address = new IPAddress(0L);
        if (IPAddress.TryParse(RemoteHost, out address))
        {
          this.Connect((IPEndPoint) null, new IPEndPoint(address, RemotePort));
        }
        else
        {
          this.m_State = BazSocketState.Resolving;
          this.OnStateChanged(BazSocketState.Resolving);
          Dns.BeginGetHostEntry(RemoteHost, new AsyncCallback(this.GetHostEntry_CallBack), (object) this.m_Socket);
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        this.m_State = BazSocketState.Disconnected;
        this.OnStateChanged(BazSocketState.Disconnected);
        this.OnConnectionFailed(ex2);
        ProjectData.ClearProjectError();
      }
    }

    public void Connect() => this.Connect(this.m_LocalEP, this.m_RemoteEP);

    public void Connect(IPEndPoint RemoteEP) => this.Connect((IPEndPoint) null, RemoteEP);

    public void Connect(IPEndPoint LocalEP, IPEndPoint RemoteEP)
    {
      if (this.m_State != BazSocketState.Disconnected || !this.m_Init)
        return;
      if (RemoteEP == null)
        return;
      try
      {
        this.m_RemoteEP = RemoteEP;
        this.m_LocalEP = LocalEP;
        this.m_State = BazSocketState.Connecting;
        this.OnStateChanged(BazSocketState.Connecting);
        if (this.m_LocalEP != null)
          this.m_Socket.Bind((EndPoint) this.m_LocalEP);
        this.m_Socket.BeginConnect((EndPoint) this.m_RemoteEP, new AsyncCallback(this.Connect_CallBack), (object) this.m_Socket);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        this.m_State = BazSocketState.Disconnected;
        this.OnStateChanged(BazSocketState.Disconnected);
        this.OnConnectionFailed(ex2);
        ProjectData.ClearProjectError();
      }
    }

    public void Disconnect()
    {
      if (this.m_State == BazSocketState.Disconnected)
        return;
      if (this.m_AlwaysRaiseClose)
        this.DisconnectSocket(true);
      else
        this.DisconnectSocket(false);
    }

    public void Close()
    {
      if (this.m_State != BazSocketState.Disconnected && this.m_AlwaysRaiseClose)
      {
        this.CloseSocket();
        this.OnClosed();
      }
      else
        this.CloseSocket();
    }

    public void Listen() => this.Listen(this.m_LocalEP);

    public void Listen(string LocalIP, int LocalPort)
    {
      try
      {
        this.m_LocalEP = new IPEndPoint(IPAddress.Parse(LocalIP), LocalPort);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnListenFailed(ex);
        ProjectData.ClearProjectError();
        return;
      }
      this.Listen(this.m_LocalEP);
    }

    public void Listen(int LocalPort)
    {
      try
      {
        this.m_LocalEP = new IPEndPoint(IPAddress.Any, LocalPort);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.OnListenFailed(ex);
        ProjectData.ClearProjectError();
        return;
      }
      this.Listen(this.m_LocalEP);
    }

    public void Listen(IPEndPoint LocalEP)
    {
      if (this.m_State != BazSocketState.Disconnected)
        return;
      if (!this.m_Init)
        return;
      try
      {
        this.m_Socket.Bind((EndPoint) LocalEP);
        this.m_Socket.Listen(8);
        this.m_Socket.BeginAccept(new AsyncCallback(this.Accept_CallBack), (object) this.m_Socket);
        this.m_State = BazSocketState.Listening;
        this.OnStateChanged(BazSocketState.Listening);
        this.OnListening();
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        this.m_State = BazSocketState.Disconnected;
        this.OnStateChanged(BazSocketState.Disconnected);
        this.OnListenFailed(ex2);
        ProjectData.ClearProjectError();
      }
    }

    public void Send(byte[] data)
    {
      if (data == null || data.Length == 0 || this.m_State != BazSocketState.Connected)
        return;
      this.m_Stream.BeginWrite(data, 0, data.Length, new AsyncCallback(this.Send_CallBack), (object) this.m_Socket);
    }

    public void Send(string data)
    {
      if (this.m_State != BazSocketState.Connected)
        return;
      this.Send(Encoding.Default.GetBytes(data));
    }

    private void GetHostEntry_CallBack(IAsyncResult Ar)
    {
      if (!object.ReferenceEquals((object) (Socket) Ar.AsyncState, (object) this.m_Socket))
        return;
      try
      {
        IPAddress[] addressList = Dns.EndGetHostEntry(Ar).AddressList;
        int index = 0;
        while (index < addressList.Length)
        {
          IPAddress address = addressList[index];
          if (address.AddressFamily == AddressFamily.InterNetwork)
          {
            this.m_RemoteEP = new IPEndPoint(address, this.m_RemotePort);
            this.m_State = BazSocketState.Disconnected;
            this.Connect(this.m_LocalEP, this.m_RemoteEP);
            return;
          }
          checked { ++index; }
        }
        this.m_State = BazSocketState.Disconnected;
        this.OnStateChanged(BazSocketState.Disconnected);
        this.OnConnectionFailed((Exception) new SocketException(11001));
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        this.m_State = BazSocketState.Disconnected;
        this.OnStateChanged(BazSocketState.Disconnected);
        this.OnConnectionFailed(ex2);
        ProjectData.ClearProjectError();
      }
    }

    private void Connect_CallBack(IAsyncResult Ar)
    {
      if (!object.ReferenceEquals((object) (Socket) Ar.AsyncState, (object) this.m_Socket))
        return;
      try
      {
        this.m_Socket.EndConnect(Ar);
        this.m_Stream = this.m_Socket.Connected ? new NetworkStream(this.m_Socket) : throw new Exception();
        this.m_State = BazSocketState.Connected;
        this.OnStateChanged(BazSocketState.Connected);
        this.OnConnected();
        this.m_Stream.BeginRead(this.m_RecvBuffer, 0, this.m_RecvSize, new AsyncCallback(this.Receive_CallBack), (object) this.m_Socket);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        this.m_State = BazSocketState.Disconnected;
        this.OnStateChanged(BazSocketState.Disconnected);
        this.OnConnectionFailed(ex2);
        ProjectData.ClearProjectError();
      }
    }

    private void Accept_CallBack(IAsyncResult Ar)
    {
      Socket asyncState = (Socket) Ar.AsyncState;
      object acceptSync = this.AcceptSync;
      ObjectFlowControl.CheckForSyncLockOnValueType(acceptSync);
      Monitor.Enter(acceptSync);
      try
      {
        if (!object.ReferenceEquals((object) asyncState, (object) this.m_Socket))
          return;
        try
        {
          Socket socket = this.m_Socket.EndAccept(Ar);
          if (!socket.Connected)
          {
            socket.Close();
            throw new Exception();
          }
          NetworkStream stream = new NetworkStream(socket);
          this.OnAccepted(new AcceptRequest(socket, stream));
          this.m_Socket.BeginAccept(new AsyncCallback(this.Accept_CallBack), (object) this.m_Socket);
        }
        catch (Exception ex1)
        {
          ProjectData.SetProjectError(ex1);
          Exception ex2 = ex1;
          this.m_State = BazSocketState.Disconnected;
          this.OnStateChanged(BazSocketState.Disconnected);
          this.OnAcceptFailed(ex2);
          ProjectData.ClearProjectError();
        }
      }
      finally
      {
        Monitor.Exit(acceptSync);
      }
    }

    private void Receive_CallBack(IAsyncResult Ar)
    {
      Socket asyncState = (Socket) Ar.AsyncState;
      object recvSync = this.RecvSync;
      ObjectFlowControl.CheckForSyncLockOnValueType(recvSync);
      Monitor.Enter(recvSync);
      try
      {
        if (!object.ReferenceEquals((object) asyncState, (object) this.m_Socket))
          return;
        try
        {
          int length = this.m_Stream.EndRead(Ar);
          if (length != 0)
          {
            byte[] numArray = new byte[checked (length - 1 + 1)];
            Array.Copy((Array) this.m_RecvBuffer, (Array) numArray, length);
            this.OnDataArrival(numArray);
            if (this.m_Stream.CanRead)
              this.m_Stream.BeginRead(this.m_RecvBuffer, 0, this.m_RecvSize, new AsyncCallback(this.Receive_CallBack), (object) this.m_Socket);
            else
              this.DisconnectSocket(true);
          }
          else
            this.DisconnectSocket(true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.DisconnectSocket(true);
          ProjectData.ClearProjectError();
        }
      }
      finally
      {
        Monitor.Exit(recvSync);
      }
    }

    private void Send_CallBack(IAsyncResult Ar)
    {
      Socket asyncState = (Socket) Ar.AsyncState;
      object sendSync = this.SendSync;
      ObjectFlowControl.CheckForSyncLockOnValueType(sendSync);
      Monitor.Enter(sendSync);
      try
      {
        if (!object.ReferenceEquals((object) asyncState, (object) this.m_Socket))
          return;
        try
        {
          this.m_Stream.EndWrite(Ar);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.DisconnectSocket(true);
          ProjectData.ClearProjectError();
        }
      }
      finally
      {
        Monitor.Exit(sendSync);
      }
    }

    private void DisconnectSocket(bool RaiseClose)
    {
      this.CloseSocket();
      this.CreateSocket();
      this.OnStateChanged(BazSocketState.Disconnected);
      if (!RaiseClose)
        return;
      this.OnClosed();
    }

    private void CloseSocket()
    {
      if (this.m_Socket == null)
        return;
      if (this.m_Socket.Connected)
      {
        this.m_Socket.Shutdown(SocketShutdown.Both);
        if (this.m_Stream != null)
          this.m_Stream.Close();
      }
      if (this.m_Init)
      {
        this.m_Socket.Close();
        this.m_Socket = (Socket) null;
        this.m_Init = false;
      }
      this.m_State = BazSocketState.Disconnected;
    }

    private void CreateSocket()
    {
      try
      {
        this.m_Socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        this.m_State = BazSocketState.Disconnected;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.m_Init = false;
        ProjectData.ClearProjectError();
        return;
      }
      if (this.m_Socket == null)
        this.m_Init = false;
      else
        this.m_Init = true;
    }

    private void InitBuffers()
    {
      if (this.m_Socket == null)
        return;
      this.m_RecvSize = this.m_Socket.ReceiveBufferSize;
      this.m_RecvBuffer = new byte[checked (this.m_RecvSize - 1 + 1)];
      this.m_SendSize = this.m_Socket.SendBufferSize;
      this.m_SendBuffer = new byte[checked (this.m_RecvSize - 1 + 1)];
    }

    private delegate void _StateChanged(BazSocketState state);

    private delegate void _Connected();

    private delegate void _ConnectionFailed(Exception ex);

    private delegate void _Listening();

    private delegate void _ListenFailed(Exception ex);

    private delegate void _Accepted(AcceptRequest Request);

    private delegate void _AcceptFailed(Exception ex);

    private delegate void _DataArrival(byte[] data);

    private delegate void _SendProgress(int current, int total);

    private delegate void _SendComplete(int total);

    private delegate void _Close();

    private delegate void _ThreadException(Exception ex);
  }
}
