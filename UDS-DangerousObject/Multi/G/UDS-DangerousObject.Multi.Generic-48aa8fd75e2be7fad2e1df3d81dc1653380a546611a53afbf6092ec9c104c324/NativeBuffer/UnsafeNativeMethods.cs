// Decompiled with JetBrains decompiler
// Type: NativeBuffer.UnsafeNativeMethods
// Assembly: RegistrySecurity, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CE443B41-988D-4319-9971-B451F2F12365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-48aa8fd75e2be7fad2e1df3d81dc1653380a546611a53afbf6092ec9c104c324.exe

using HijriCalendar;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using ObjRef;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using YieldAwaitable;

namespace NativeBuffer
{
  [StandardModule]
  internal sealed class UnsafeNativeMethods
  {
    internal class VideoSequenceHD
    {
      private bool Render;
      private bool Interlaced;
      private double _Width;
      private double _Height;
      private string VideoName;
      internal static string DirRes = "E:\\Eetrigraafika\\bug\\_res\\";
      private DirectoryInfo dInfo;

      internal string DirHome { get; set; }

      internal string DirExmpl { get; set; }

      internal string DirHD { get; set; }

      internal List<Store.IndexedFile> Files { get; set; }

      internal static string FnBack { get; set; }

      internal VideoSequenceHD(
        string src,
        bool example,
        UnsafeNativeMethods.VideoSequenceHD.RenderMode mode,
        bool fields)
      {
        this.DirExmpl = string.Empty;
        this.DirHD = string.Empty;
        if (!src.EndsWith("\\"))
          src += "\\";
        this.DirHome = src;
        this.dInfo = new DirectoryInfo(this.DirHome);
        this.VideoName = mode == UnsafeNativeMethods.VideoSequenceHD.RenderMode.logo ? Func.ActiveChannel.dirResVid + this.dInfo.Name : Func.ActiveChannel.dirResBug + this.dInfo.Name;
        this.DirHD = src + "hd\\";
        this.Cleanup();
        if (mode > UnsafeNativeMethods.VideoSequenceHD.RenderMode.None)
        {
          Directory.CreateDirectory(this.DirHD);
          this.Render = true;
        }
        this.Interlaced = fields;
        if (example)
        {
          this.DirExmpl = string.Format("{0}temp\\{1:yyMMddHHmmss}\\", (object) UnsafeNativeMethods.VideoSequenceHD.DirRes, (object) DateAndTime.Now);
          Directory.CreateDirectory(this.DirExmpl);
        }
        List<string> stringList1 = new List<string>();
        List<string> stringList2 = new List<string>()
        {
          ".png",
          ".tga"
        };
        FileInfo[] files = this.dInfo.GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (stringList2.Contains(fileInfo.Extension.ToLower()))
            stringList1.Add(fileInfo.Name);
          checked { ++index; }
        }
        stringList1.Sort();
        // ISSUE: reference to a compiler-generated field
        this._Files = new List<Store.IndexedFile>();
        try
        {
          foreach (string fn in stringList1)
          {
            int i;
            // ISSUE: reference to a compiler-generated field
            this._Files.Add(new Store.IndexedFile(i, fn));
            checked { ++i; }
          }
        }
        finally
        {
          List<string>.Enumerator enumerator;
          enumerator.Dispose();
        }
        this.GetSize();
      }

      internal VideoSequenceHD(string src, bool fields)
      {
        this.DirExmpl = string.Empty;
        this.DirHD = string.Empty;
        if (!src.EndsWith("\\"))
          src += "\\";
        this.DirHome = src;
        this.dInfo = new DirectoryInfo(this.DirHome);
        this.VideoName = Func.ActiveChannel.dirResVid + "\\" + this.dInfo.Name.ToLower();
        this.DirHD = src + "hd\\";
        this.Cleanup();
        Directory.CreateDirectory(this.DirHD);
        this.Render = true;
        this.Interlaced = fields;
        List<string> stringList1 = new List<string>();
        List<string> stringList2 = new List<string>()
        {
          ".png",
          ".tga"
        };
        FileInfo[] files = this.dInfo.GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (stringList2.Contains(fileInfo.Extension.ToLower()))
            stringList1.Add(fileInfo.Name);
          checked { ++index; }
        }
        stringList1.Sort();
        // ISSUE: reference to a compiler-generated field
        this._Files = new List<Store.IndexedFile>();
        try
        {
          foreach (string fn in stringList1)
          {
            int i;
            // ISSUE: reference to a compiler-generated field
            this._Files.Add(new Store.IndexedFile(i, fn));
            checked { ++i; }
          }
        }
        finally
        {
          List<string>.Enumerator enumerator;
          enumerator.Dispose();
        }
        this.GetSize();
      }

      private void GetSize()
      {
        // ISSUE: reference to a compiler-generated field
        if (this._Files.Count == 0)
          return;
        object obj = RuntimeHelpers.GetObjectValue(new object());
        obj = (object) null;
      }

      internal double Width => this._Width;

      internal double Height => this._Height;

      internal string Name => this.dInfo.Name;

      internal int Duration => checked (this._Files.Count + 2);

      internal void Proccess(string id)
      {
        UnsafeNativeMethods.FrameProcessorHD frameProcessorHd = UnsafeNativeMethods.FrameProcessorHD.Create(this, id);
        try
        {
          // ISSUE: reference to a compiler-generated field
          Parallel.ForEach<Store.IndexedFile>((IEnumerable<Store.IndexedFile>) this._Files, new Action<Store.IndexedFile>(frameProcessorHd.proccess));
          List<Task> taskList = new List<Task>();
          if (this.Render)
            taskList.Add(Task.Factory.StartNew(new Action(this.MakeHdVideo)));
          if (this.DirExmpl.Length > 0)
            taskList.Add(Task.Factory.StartNew(new Action(this.MakeVideo)));
          Task.WaitAll(taskList.ToArray());
          this.Cleanup();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private void MakeVideo()
      {
        try
        {
          // ISSUE: reference to a compiler-generated field
          int count = this._Files.Count;
          // ISSUE: reference to a compiler-generated field
          int num1 = checked (this._Files.Count + 8);
          int num2 = count;
          while (num2 <= num1)
          {
            // ISSUE: reference to a compiler-generated field
            string destFileName = string.Format("{0}frame{1:0000}.png", (object) this._DirExmpl, (object) num2);
            try
            {
              File.Copy(UnsafeNativeMethods.VideoSequenceHD.FnBack, destFileName, false);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++num2; }
          }
          new Store.VideoFile(this.DirExmpl, new DirectoryInfo(this.DirHome).Name, string.Empty).encode();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
        try
        {
          if (Directory.Exists(this.DirExmpl))
            Directory.Delete(this.DirExmpl, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private void MakeHdVideo()
      {
        try
        {
          new Store.VideoFile(this.DirHD, this.VideoName, this.Interlaced ? "proResF" : "png").encode();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num = (int) Interaction.MsgBox((object) ex.Message);
          ProjectData.ClearProjectError();
        }
      }

      internal void Cleanup()
      {
        try
        {
          if (Directory.Exists(this.DirExmpl))
            Directory.Delete(this.DirExmpl, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          if (!Directory.Exists(this.DirHD))
            return;
          Directory.Delete(this.DirHD, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      internal enum RenderMode
      {
        None,
        Bug,
        logo,
      }
    }

    internal abstract class FrameProcessorHD
    {
      protected static Size sizePal = new Size(720, 576);
      protected static Size size43 = new Size(768, 576);
      protected static Size size169 = new Size(1024, 576);
      protected static Size sizeHD = new Size(1920, 1080);

      internal FrameProcessorHD(string init)
      {
      }

      internal static UnsafeNativeMethods.FrameProcessorHD Create(
        UnsafeNativeMethods.VideoSequenceHD video,
        string id)
      {
        string[] xywh = id.Split('_');
        string Left = xywh[0];
        UnsafeNativeMethods.FrameProcessorHD frameProcessorHd = Operators.CompareString(Left, "draw", false) == 0 ? (UnsafeNativeMethods.FrameProcessorHD) new UnsafeNativeMethods.FrameProcessorHD_Draw(xywh) : (Operators.CompareString(Left, "matte", false) == 0 ? (UnsafeNativeMethods.FrameProcessorHD) new UnsafeNativeMethods.FrameProcessorHD_Matte() : (Operators.CompareString(Left, "mask", false) == 0 ? (UnsafeNativeMethods.FrameProcessorHD) new UnsafeNativeMethods.FrameProcessorHD_Mask() : (UnsafeNativeMethods.FrameProcessorHD) new UnsafeNativeMethods.FrameProcessorHD_Full()));
        frameProcessorHd.Parent = video;
        return frameProcessorHd;
      }

      protected UnsafeNativeMethods.VideoSequenceHD Parent { get; set; }

      internal abstract void proccess(Store.IndexedFile ifn);

      internal void Example(Bitmap b, int index)
      {
        if (this.Parent.DirExmpl.Length == 0)
          return;
        string filename = string.Format("{0}frame{1:0000}.png", (object) this.Parent.DirExmpl, (object) index);
        Bitmap bitmap = new Bitmap(UnsafeNativeMethods.VideoSequenceHD.FnBack);
        Graphics graphics = Graphics.FromImage((Image) bitmap);
        graphics.DrawImageUnscaled((Image) b, 0, 0);
        bitmap.Save(filename);
        graphics.Dispose();
        bitmap.Dispose();
      }

      protected static Bitmap Resize(Bitmap b, Size s)
      {
        Bitmap bitmap = new Bitmap((Image) b, s);
        b.Dispose();
        return bitmap;
      }

      protected Bitmap GetBitmap(Store.IndexedFile ifn)
      {
        FileInfo fileInfo = new FileInfo(this.Parent.DirHome + ifn.Name);
        try
        {
          return new Bitmap(fileInfo.FullName);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        if (Operators.CompareString(fileInfo.Extension.ToLower(), ".png", false) != 0)
        {
          try
          {
            object obj = RuntimeHelpers.GetObjectValue(new object());
            ifn.Name = fileInfo.Name.Replace(fileInfo.Extension, ".png");
            obj = (object) null;
            fileInfo.Delete();
            return new Bitmap(this.Parent.DirHome + ifn.Name);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        return new Bitmap(1, 1);
      }

      protected void MultiplyAlpha(Bitmap b)
      {
        int num1 = checked (b.Width - 1);
        int x = 0;
        while (x <= num1)
        {
          int num2 = checked (b.Height - 1);
          int y = 0;
          while (y <= num2)
          {
            Color color1 = b.GetPixel(x, y);
            double num3 = (double) color1.A / (double) byte.MaxValue;
            Color color2 = Color.FromArgb((int) color1.A, checked ((int) Math.Round(unchecked (num3 * (double) color1.R))), checked ((int) Math.Round(unchecked (num3 * (double) color1.G))), checked ((int) Math.Round(unchecked (num3 * (double) color1.B))));
            b.SetPixel(x, y, color2);
            color1 = new Color();
            checked { ++y; }
          }
          checked { ++x; }
        }
      }
    }

    internal class FrameProcessorHD_Full : UnsafeNativeMethods.FrameProcessorHD
    {
      internal FrameProcessorHD_Full()
        : base("")
      {
      }

      internal override void proccess(Store.IndexedFile ifn)
      {
        Bitmap bitmap = this.GetBitmap(ifn);
        bitmap.SetResolution(96f, 96f);
        if (bitmap.Width != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Width || bitmap.Height != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Height)
          bitmap = UnsafeNativeMethods.FrameProcessorHD.Resize(bitmap, UnsafeNativeMethods.FrameProcessorHD.sizeHD);
        TypeLibFuncAttribute.SaveAsTarga(string.Format("{0}fr{1:00000}.tga", (object) this.Parent.DirHD, (object) ifn.Index), bitmap);
        Bitmap b = UnsafeNativeMethods.FrameProcessorHD.Resize(bitmap, UnsafeNativeMethods.FrameProcessorHD.sizePal);
        this.Example(b, ifn.Index);
        b.Dispose();
      }
    }

    internal class FrameProcessorHD_Mask : UnsafeNativeMethods.FrameProcessorHD
    {
      private static string mFn;

      internal static void SetMask(string maskFn) => UnsafeNativeMethods.FrameProcessorHD_Mask.mFn = maskFn;

      internal FrameProcessorHD_Mask()
        : base("")
      {
      }

      internal override void proccess(Store.IndexedFile ifn)
      {
        Bitmap bitmap1 = this.GetBitmap(ifn);
        bitmap1.SetResolution(96f, 96f);
        if (bitmap1.Width != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Width || bitmap1.Height != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Height)
          bitmap1 = UnsafeNativeMethods.FrameProcessorHD.Resize(bitmap1, UnsafeNativeMethods.FrameProcessorHD.sizeHD);
        Bitmap bitmap2 = new Bitmap(UnsafeNativeMethods.FrameProcessorHD.sizeHD.Width, UnsafeNativeMethods.FrameProcessorHD.sizeHD.Height, PixelFormat.Format24bppRgb);
        bitmap2.SetResolution(96f, 96f);
        this.MakeMask(bitmap1, bitmap2);
        bitmap2.SetResolution(96f, 96f);
        bitmap2.Save(this.Parent.DirHD + ifn.Name);
        Bitmap b = UnsafeNativeMethods.FrameProcessorHD.Resize(bitmap2, UnsafeNativeMethods.FrameProcessorHD.sizePal);
        this.Example(b, ifn.Index);
        bitmap1.Dispose();
        b.Dispose();
      }

      private void MakeMask(Bitmap bIn, Bitmap bOut)
      {
        Bitmap b = new Bitmap(UnsafeNativeMethods.FrameProcessorHD_Mask.mFn);
        b.SetResolution(96f, 96f);
        if (b.Width != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Width || b.Height != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Height)
          b = UnsafeNativeMethods.FrameProcessorHD.Resize(b, UnsafeNativeMethods.FrameProcessorHD.sizeHD);
        int num1 = checked (bIn.Width - 1);
        int x = 0;
        while (x <= num1)
        {
          int num2 = checked (bIn.Height - 1);
          int y = 0;
          while (y <= num2)
          {
            byte num3 = Math.Min(b.GetPixel(x, y).R, bIn.GetPixel(x, y).A);
            bOut.SetPixel(x, y, Color.FromArgb((int) num3, (int) num3, (int) num3));
            checked { ++y; }
          }
          checked { ++x; }
        }
        b.Dispose();
      }
    }

    internal class FrameProcessorHD_Matte : UnsafeNativeMethods.FrameProcessorHD
    {
      private static string mFn;

      internal static void SetMask(string maskFn) => UnsafeNativeMethods.FrameProcessorHD_Matte.mFn = maskFn;

      internal FrameProcessorHD_Matte()
        : base("")
      {
      }

      internal override void proccess(Store.IndexedFile ifn)
      {
        Bitmap bitmap1 = this.GetBitmap(ifn);
        bitmap1.SetResolution(96f, 96f);
        if (bitmap1.Width != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Width || bitmap1.Height != UnsafeNativeMethods.FrameProcessorHD.sizeHD.Height)
          bitmap1 = UnsafeNativeMethods.FrameProcessorHD.Resize(bitmap1, UnsafeNativeMethods.FrameProcessorHD.sizeHD);
        Bitmap bitmap2 = new Bitmap(UnsafeNativeMethods.FrameProcessorHD.sizeHD.Width, UnsafeNativeMethods.FrameProcessorHD.sizeHD.Height, PixelFormat.Format24bppRgb);
        bitmap2.SetResolution(96f, 96f);
        this.MakeMask(bitmap1, bitmap2);
        bitmap2.SetResolution(96f, 96f);
        bitmap2.Save(this.Parent.DirHD + ifn.Name);
        Bitmap b = UnsafeNativeMethods.FrameProcessorHD.Resize(bitmap2, UnsafeNativeMethods.FrameProcessorHD.sizePal);
        this.Example(b, ifn.Index);
        bitmap1.Dispose();
        b.Dispose();
      }

      private void MakeMask(Bitmap bIn, Bitmap bOut)
      {
        int num1 = checked (bIn.Width - 1);
        int x = 0;
        while (x <= num1)
        {
          int num2 = checked (bIn.Height - 1);
          int y = 0;
          while (y <= num2)
          {
            byte a = bIn.GetPixel(x, y).A;
            bOut.SetPixel(x, y, Color.FromArgb((int) a, (int) a, (int) a));
            checked { ++y; }
          }
          checked { ++x; }
        }
      }
    }

    internal class FrameProcessorHD_Draw : UnsafeNativeMethods.FrameProcessorHD
    {
      private int xPos;
      private int yPos;
      private Size sizeLogo;
      private char rightSide;

      internal FrameProcessorHD_Draw(string[] xywh)
        : base(xywh[0])
      {
        this.xPos = int.Parse(xywh[1]);
        this.yPos = int.Parse(xywh[2]);
        try
        {
          this.sizeLogo = new Size(int.Parse(xywh[3]), int.Parse(xywh[4]));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.sizeLogo = new Size(450, 300);
          ProjectData.ClearProjectError();
        }
        try
        {
          this.rightSide = xywh[5].ToLower().First<char>();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      internal override void proccess(Store.IndexedFile ifn)
      {
        Bitmap b1 = this.GetBitmap(ifn);
        b1.SetResolution(96f, 96f);
        if (!(b1.Size == this.sizeLogo))
          b1 = UnsafeNativeMethods.FrameProcessorHD.Resize(b1, this.sizeLogo);
        Bitmap bitmap = new Bitmap(UnsafeNativeMethods.FrameProcessorHD.sizeHD.Width, UnsafeNativeMethods.FrameProcessorHD.sizeHD.Height);
        bitmap.SetResolution(96f, 96f);
        int x;
        switch (this.rightSide)
        {
          case 'c':
            x = checked ((int) Math.Round(unchecked (0.5 * (double) checked (bitmap.Width - b1.Width))));
            break;
          case 'r':
            x = checked (bitmap.Width - b1.Width - this.xPos);
            break;
          default:
            x = this.xPos;
            break;
        }
        Graphics graphics = Graphics.FromImage((Image) bitmap);
        graphics.DrawImageUnscaled((Image) b1, x, this.yPos);
        graphics.Dispose();
        TypeLibFuncAttribute.SaveAsTarga(string.Format("{0}fr{1:00000}.tga", (object) this.Parent.DirHD, (object) ifn.Index), bitmap);
        Bitmap b2 = UnsafeNativeMethods.FrameProcessorHD.Resize(bitmap, UnsafeNativeMethods.FrameProcessorHD.sizePal);
        this.Example(b2, ifn.Index);
        b2.Dispose();
        b1.Dispose();
      }
    }
  }
}
