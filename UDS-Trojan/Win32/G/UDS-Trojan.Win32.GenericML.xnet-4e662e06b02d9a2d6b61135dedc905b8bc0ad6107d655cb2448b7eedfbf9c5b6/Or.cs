// Decompiled with JetBrains decompiler
// Type: jd.Or
// Assembly: RuntimeFieldI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3177D6BF-0678-437F-AD25-445C5521A270
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4e662e06b02d9a2d6b61135dedc905b8bc0ad6107d655cb2448b7eedfbf9c5b6.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace jd
{
  public class Or
  {
    private xg NvI;
    private Dy uvP;
    private xg Nvo;
    private Stack<int> xvX;
    private int tvd;
    private double DvB;
    internal static Or xN7;

    public Or(double[,] _param1, double[] _param2, double _param3)
    {
      Or.qN8();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.DvB = _param3;
      this.tvd = _param2.Length;
      this.uvP = new Dy(_param1);
      this.NvI = new xg(_param2);
      this.Nvo = new xg(this.tvd);
      int num1 = 2;
      if (false)
        goto label_4;
label_1:
      while (true)
      {
        switch (num1)
        {
          case 1:
            if (this.tvd * this.tvd != _param1.Length)
            {
              int num2;
              num1 = true ? 0 : num2;
              continue;
            }
            goto label_2;
          case 2:
            this.xvX = new Stack<int>();
            num1 = false ? 1 : 1;
            continue;
          default:
            goto label_3;
        }
      }
label_3:
      throw new Exception("try to solve different dimension!");
label_2:
      return;
label_4:
      num1 = 1;
      goto label_1;
    }

    public Or(Dy _param1, xg _param2, double _param3)
    {
      gs.JD3Ei4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num1 = 2;
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_7;
          case 2:
            this.DvB = _param3;
            this.tvd = (int) _param1.m4p();
            this.uvP = new Dy(_param1);
            this.NvI = new xg(_param2);
            this.Nvo = new xg(this.tvd);
            this.xvX = new Stack<int>();
            if (true)
            {
              num1 = 0;
              continue;
            }
            break;
          default:
            flag = this.tvd != (int) Or.YNV((object) _param1);
            if (true)
            {
              num1 = 1;
              continue;
            }
            break;
        }
        int num2;
        num1 = num2;
      }
label_7:
      if (flag)
        throw new Exception("try to solve different dimension!");
    }

    public xg nvJ()
    {
      this.nvv();
      if (!this.gv4())
        goto label_7;
      else
        goto label_6;
label_4:
      xg xg;
      return xg;
label_6:
      xg = this.Nvo;
      goto label_4;
label_7:
      Console.WriteLine("");
      Console.ReadKey();
      int num1 = 0;
      if (Or.dNc())
        goto label_2;
label_1:
      int num2;
      num1 = num2;
label_2:
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
            goto label_4;
          default:
            Or.VND(1);
            xg = (xg) null;
            if (Or.QNo() == null)
            {
              num1 = 1;
              continue;
            }
            goto label_1;
        }
      }
    }

    private bool gv4()
    {
      bool flag1 = true;
      int num1 = 0;
      bool flag2;
      while (true)
      {
        if (num1 < this.tvd)
          goto label_8;
        else
          goto label_4;
label_1:
        int num2;
        int num3 = num2;
label_2:
        while (true)
        {
          switch (num3)
          {
            case 1:
              flag1 = false;
              num3 = 2;
              continue;
            case 2:
              goto label_3;
            case 3:
              goto label_5;
            default:
              if (false)
              {
                if (Or.QNo() == null)
                {
                  num3 = 1;
                  continue;
                }
                goto label_1;
              }
              else
                goto label_3;
          }
        }
label_3:
        ++num1;
        continue;
label_4:
        flag2 = flag1;
        if (Or.dNc())
        {
          num3 = 3;
          goto label_2;
        }
        else
          goto label_1;
label_8:
        this.Nvo.Qvc(num1);
        num3 = 0;
        if (Or.dNc())
        {
          num3 = 0;
          goto label_2;
        }
        else
          goto label_2;
      }
label_5:
      return flag2;
    }

    private void nvv()
    {
      int num1 = 0;
      Stack<int>.Enumerator enumerator;
      int num2;
      while (true)
      {
        bool flag1 = num1 < this.tvd;
        int num3 = 6;
        while (true)
        {
          int num4;
          double num5;
          int num6;
          int num7;
          double num8;
          int num9;
          bool flag2;
          switch (num3)
          {
            case 1:
              if (flag2)
              {
                num5 += this.Nvo.Qvc(num6) * this.uvP.t4F(num4, num6);
                --num6;
                goto case 10;
              }
              else
              {
                num3 = Or.QNo() != null ? 1 : 2;
                continue;
              }
            case 2:
              Or.ENa((object) this.Nvo, num4, (this.NvI.Qvc(num4) - num5) / Or.ENt((object) this.uvP, num4, num4));
              num3 = 4;
              continue;
            case 3:
              goto label_27;
            case 4:
            case 7:
              --num4;
              num3 = 9;
              continue;
            case 5:
              if (num9 >= this.tvd)
              {
                this.NvI.evT(num7, this.NvI.Qvc(num7) - num8 * this.NvI.Qvc(num1));
                num3 = Or.QNo() != null ? 4 : 11;
                continue;
              }
              Or.uNr((object) this.uvP, num7, num9, this.uvP.t4F(num7, num9) - num8 * this.uvP.t4F(num1, num9));
              int num10;
              num3 = Or.dNc() ? 0 : num10;
              continue;
            case 6:
              if (flag1)
              {
                num3 = 8;
                continue;
              }
              num4 = this.tvd - 1;
              goto case 9;
            case 8:
              this.Svf(num1, num1);
              num7 = num1 + 1;
              break;
            case 9:
              if (num4 <= -1)
              {
                num2 = this.tvd - 1;
                enumerator = this.xvX.GetEnumerator();
                num3 = 3;
                continue;
              }
              if (num4 != this.tvd - 1)
              {
                num5 = 0.0;
                num6 = this.tvd - 1;
                num3 = 10;
                continue;
              }
              Or.ENa((object) this.Nvo, num4, this.NvI.Qvc(num4) / this.uvP.t4F(num4, num4));
              num3 = 7;
              continue;
            case 10:
              flag2 = num6 > num4;
              num3 = Or.dNc() ? 1 : 0;
              continue;
            case 11:
              ++num7;
              break;
            case 12:
              goto label_24;
            default:
              ++num9;
              goto case 5;
          }
          if (num7 >= this.tvd)
          {
            num3 = 12;
          }
          else
          {
            num8 = this.uvP.t4F(num7, num1) / this.uvP.t4F(num1, num1);
            num9 = num1;
            num3 = 5;
          }
        }
label_24:
        ++num1;
      }
label_27:
      try
      {
        while (true)
        {
          if (enumerator.MoveNext())
            goto label_34;
          else
            goto label_33;
label_28:
          int num11;
          int num12 = num11;
label_29:
          int current;
          bool flag;
          while (true)
          {
            switch (num12)
            {
              case 0:
                goto label_37;
              case 1:
                goto label_30;
              case 2:
                if (flag)
                {
                  double num13 = Or.FNb((object) this.Nvo, num2);
                  this.Nvo.evT(num2, Or.FNb((object) this.Nvo, current));
                  Or.ENa((object) this.Nvo, current, num13);
                  if (Or.QNo() == null)
                  {
                    num12 = 1;
                    continue;
                  }
                  goto label_28;
                }
                else
                  goto label_30;
              default:
                goto label_36;
            }
          }
label_30:
          --num2;
          continue;
label_33:
          num12 = Or.QNo() != null ? 0 : 0;
          goto label_29;
label_34:
          current = enumerator.Current;
          flag = current != -1;
          num11 = 2;
          goto label_28;
        }
label_37:
        return;
label_36:;
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    private void Svf(int _param1, int _param2)
    {
      int num1 = _param1;
      int num2 = _param2;
      int num3 = 6;
      while (true)
      {
        int num4;
        int num5;
        bool flag1;
        bool flag2;
        int num6;
        switch (num3)
        {
          case 1:
            goto label_10;
          case 2:
            flag2 = _param1 == num1;
            num3 = 3;
            continue;
          case 3:
            if (!flag2)
            {
              this.Dv9(_param1, num1);
              this.EvG(_param2, num2);
              if (Or.dNc())
              {
                num3 = 7;
                continue;
              }
              break;
            }
            if (_param2 != num2)
            {
              this.EvG(_param2, num2);
              this.xvX.Push(num2);
              if (Or.dNc())
              {
                num3 = 1;
                continue;
              }
              break;
            }
            goto label_22;
          case 4:
            num2 = num5;
            num3 = 8;
            continue;
          case 5:
            if (num6 < this.tvd)
            {
              num5 = _param2;
              goto label_3;
            }
            else
            {
              num3 = 2;
              continue;
            }
          case 6:
            num6 = _param1;
            if (Or.QNo() == null)
            {
              num3 = 5;
              continue;
            }
            break;
          case 7:
            goto label_17;
          case 8:
            ++num5;
            goto label_3;
          default:
            if (!flag1)
            {
              ++num6;
              goto case 5;
            }
            else
            {
              if (Math.Abs(this.uvP.t4F(num6, num5)) > Math.Abs(this.uvP.t4F(num1, num2)))
              {
                num1 = num6;
                num4 = 4;
                break;
              }
              goto case 8;
            }
        }
label_1:
        num3 = num4;
        continue;
label_3:
        flag1 = num5 < this.tvd;
        if (Or.QNo() == null)
          num3 = 0;
        else
          goto label_1;
      }
label_10:
      return;
label_17:
      this.xvX.Push(num2);
      return;
label_22:
      this.xvX.Push(-1);
    }

    private void Dv9(int _param1, int _param2)
    {
      int num1 = 3;
label_1:
      int num2 = num1;
      while (true)
      {
        double num3;
        int num4;
        double num5;
        switch (num2)
        {
          case 1:
            Or.uNr((object) this.uvP, _param1, num4, this.uvP.t4F(_param2, num4));
            this.uvP.P4h(_param2, num4, num5);
            if (Or.dNc())
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          case 2:
            Or.ENa((object) this.NvI, _param1, this.NvI.Qvc(_param2));
            this.NvI.evT(_param2, num3);
            num4 = 0;
            break;
          case 3:
            num3 = this.NvI.Qvc(_param1);
            num2 = 2;
            continue;
          default:
            ++num4;
            break;
        }
        if (num4 < this.tvd)
        {
          num5 = this.uvP.t4F(_param1, num4);
          if (Or.dNc())
            num2 = 1;
          else
            goto label_1;
        }
        else
          break;
      }
    }

    private void EvG(int _param1, int _param2)
    {
      int num1 = 0;
      while (num1 < this.tvd)
      {
label_4:
        double num2 = this.uvP.t4F(num1, _param1);
        this.uvP.P4h(num1, _param1, this.uvP.t4F(num1, _param2));
        Or.uNr((object) this.uvP, num1, _param2, num2);
        ++num1;
        int num3 = 1;
        if (Or.QNo() != null)
          goto label_3;
label_1:
        switch (num3)
        {
          case 1:
            continue;
          default:
            goto label_4;
        }
label_3:
        int num4;
        num3 = num4;
        goto label_1;
      }
    }

    public string JvN(int _param1)
    {
      string str1;
      try
      {
        string str2 = "";
        int num1 = 1;
        if (Or.dNc())
          num1 = 4;
        while (true)
        {
          int num2;
          int num3;
          string str3;
          bool flag1;
          bool flag2;
          bool flag3;
          int num4;
          int num5;
          switch (num1)
          {
            case 1:
              num3 = 0;
              goto label_19;
            case 2:
              goto label_1;
            case 3:
              if (flag1)
              {
                str2 += "\t";
                ++num5;
                goto label_16;
              }
              else
              {
                str3 = "";
                num1 = Or.QNo() == null ? 1 : 0;
                continue;
              }
            case 4:
              num5 = 0;
              goto label_16;
            case 5:
              if (flag2)
                goto label_15;
label_13:
              ++num4;
              goto label_20;
label_15:
              str3 += string.Format("|{0,15:0.00000000}", (object) this.NvI.Qvc(num3));
              goto label_13;
            case 6:
              ++num3;
              goto label_19;
            case 7:
              if (!flag3)
              {
                if (Or.QNo() == null)
                {
                  num1 = 0;
                  continue;
                }
                break;
              }
              str3 += string.Format("{0,20:0.00000000}   ", (object) this.uvP.t4F(num3, num4));
              flag2 = num4 == this.tvd - 1;
              num1 = 5;
              continue;
            default:
              str3 += "\n";
              num2 = 6;
              break;
          }
          num1 = num2;
          continue;
label_16:
          flag1 = num5 < _param1 + 1;
          num1 = Or.QNo() != null ? 0 : 3;
          continue;
label_19:
          if (num3 < this.tvd)
          {
            str3 = (string) Or.JNi((object) str3, (object) str2);
            num4 = 0;
          }
          else
          {
            str1 = str3;
            num1 = 2;
            continue;
          }
label_20:
          flag3 = num4 < this.tvd;
          num1 = 7;
        }
      }
      catch (NullReferenceException ex)
      {
        Console.WriteLine("Empty some massive!");
        int num = 0;
        if (!Or.dNc())
          goto label_27;
label_25:
        switch (num)
        {
          default:
            str1 = (string) null;
            goto label_1;
        }
label_27:
        num = 0;
        goto label_25;
      }
label_1:
      return str1;
    }

    public void Ovg()
    {
      try
      {
      }
      catch (NullReferenceException ex)
      {
        Or.KNH((object) "Empty some massive!");
      }
    }

    internal static void qN8() => gs.JD3Ei4();

    internal static bool dNc() => Or.xN7 == null;

    internal static Or QNo() => Or.xN7;

    internal static short YNV([In] object obj0) => ((Dy) obj0).m4p();

    internal static void VND([In] int obj0) => Environment.Exit(obj0);

    internal static void uNr([In] object obj0, int _param1, int _param2, double _param3) => ((Dy) obj0).P4h(_param1, _param2, _param3);

    internal static void ENa([In] object obj0, int _param1, double _param2) => ((xg) obj0).evT(_param1, _param2);

    internal static double ENt([In] object obj0, int _param1, int _param2) => ((Dy) obj0).t4F(_param1, _param2);

    internal static double FNb([In] object obj0, int _param1) => ((xg) obj0).Qvc(_param1);

    internal static object JNi([In] object obj0, [In] object obj1) => (object) ((string) obj0 + (string) obj1);

    internal static void KNH([In] object obj0) => Console.WriteLine((string) obj0);
  }
}
