// Decompiled with JetBrains decompiler
// Type: .
// Assembly: file, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71f2cf7c2509b8fe
// MVID: 1F473243-1123-401F-8099-7648B7C34C41
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.deqx-3dcf304237ebec8756d9362ccf0259126c1c62ff5c0b09096876be2cdc64ae5a.exe

using \u0001;
using \u0008;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal static class \u0003
  {
    public static void \u0002([In] Type obj0)
    {
      FieldInfo[] fieldInfoArray;
      int index1;
      FieldInfo fieldInfo1;
      Type[] typeArray1;
      DynamicMethod dynamicMethod1;
      ILGenerator ilGenerator1;
      MethodInfo[] methods;
      int index2;
      MethodInfo meth;
      try
      {
        do
        {
          FieldInfo[] fields = obj0.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
          if (true)
            goto label_28;
label_1:
          if (true)
            goto label_29;
label_2:
          continue;
label_29:
          index1 = 0;
          goto label_2;
label_28:
          fieldInfoArray = fields;
          goto label_1;
        }
        while (false);
        for (; index1 < fieldInfoArray.Length; ++index1)
        {
          FieldInfo fieldInfo2 = fieldInfoArray[index1];
          if (true)
            goto label_30;
label_4:
          try
          {
            while ((object) fieldInfo1.FieldType == (object) typeof (\u0001.\u0001))
            {
              string empty = string.Empty;
              Type returnType = typeof (string);
              Type[] typeArray2 = new Type[1];
              if (true)
                goto label_22;
label_6:
              typeArray1[0] = typeof (int);
              Type[] parameterTypes = typeArray1;
              Type owner = obj0;
              DynamicMethod dynamicMethod2 = new DynamicMethod(empty, returnType, parameterTypes, owner, true);
              if (true)
                goto label_23;
label_7:
              ILGenerator ilGenerator2 = dynamicMethod1.GetILGenerator();
              if (true)
                goto label_24;
label_8:
              ilGenerator1.Emit(OpCodes.Ldarg_0);
              methods = typeof (\u0005).GetMethods(BindingFlags.Static | BindingFlags.Public);
              index2 = 0;
              while (true)
              {
                int num1 = index2;
                int num2;
                while (true)
                {
                  int num3 = methods.Length;
                  int num4;
                  while (true)
                  {
                    num4 = num3;
                    if (false)
                      num3 = num4;
                    else
                      break;
                  }
                  if (num1 < num4)
                  {
                    meth = methods[index2];
                    if ((object) meth.ReturnType != (object) typeof (string))
                    {
                      int num5 = index2;
                      while (true)
                      {
                        num2 = num5 + 1;
                        if (true)
                        {
                          if (false)
                            num5 = num2;
                          else
                            goto label_15;
                        }
                        else
                          break;
                      }
                      num1 = num2;
                    }
                    else
                      goto label_10;
                  }
                  else
                    goto label_20;
                }
label_15:
                index2 = num2;
              }
label_10:
              if (true)
              {
                ilGenerator1.Emit(OpCodes.Ldc_I4, fieldInfo1.MetadataToken & 16777215);
                ilGenerator1.Emit(OpCodes.Sub);
                ilGenerator1.Emit(OpCodes.Call, meth);
              }
              else
                continue;
label_20:
              ilGenerator1.Emit(OpCodes.Ret);
              fieldInfo1.SetValue((object) null, (object) dynamicMethod1.CreateDelegate(typeof (\u0001.\u0001)));
              return;
label_24:
              ilGenerator1 = ilGenerator2;
              goto label_8;
label_23:
              dynamicMethod1 = dynamicMethod2;
              goto label_7;
label_22:
              typeArray1 = typeArray2;
              goto label_6;
            }
            continue;
          }
          catch
          {
            continue;
          }
label_30:
          fieldInfo1 = fieldInfo2;
          goto label_4;
        }
      }
      catch (Exception ex)
      {
        FieldInfo o1 = fieldInfo1;
        DynamicMethod o2 = dynamicMethod1;
        ILGenerator o3 = ilGenerator1;
        MethodInfo o4 = meth;
        FieldInfo[] o5 = fieldInfoArray;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) index1;
        Type[] o7 = typeArray1;
        MethodInfo[] o8 = methods;
        // ISSUE: variable of a boxed type
        __Boxed<int> o9 = (ValueType) index2;
        Type o10 = obj0;
        \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9, (object) o10);
        throw;
      }
    }
  }
}
