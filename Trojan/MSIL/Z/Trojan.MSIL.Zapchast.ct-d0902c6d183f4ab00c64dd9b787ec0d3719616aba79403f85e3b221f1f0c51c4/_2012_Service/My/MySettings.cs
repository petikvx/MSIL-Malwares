// Decompiled with JetBrains decompiler
// Type: _2012_Service.My.MySettings
// Assembly: 2012 Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 39F51609-4E86-4D72-B969-2F751869AD90
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.ct-d0902c6d183f4ab00c64dd9b787ec0d3719616aba79403f85e3b221f1f0c51c4.exe

using \u0006;
using \u0007;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace _2012_Service.My
{
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \u0001 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool \u0001;
    private static object \u0001 = RuntimeHelpers.GetObjectValue(new object());

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void \u0001(object sender, EventArgs e)
    {
      if (!\u0001.Application.SaveMySettingsOnExit)
        return;
      \u0002.Settings.Save();
    }

    public static MySettings Default
    {
      get
      {
        object Expression;
        if (true)
        {
          if (!MySettings.\u0001)
          {
            Expression = MySettings.\u0001;
            goto label_10;
          }
        }
        else
          goto label_10;
label_9:
        return MySettings.\u0001;
label_10:
        ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
        bool lockTaken = false;
        try
        {
          Monitor.Enter(Expression, ref lockTaken);
          if (!MySettings.\u0001)
          {
            \u0001.Application.Shutdown += (ShutdownEventHandler) ((sender, e) =>
            {
              if (!\u0001.Application.SaveMySettingsOnExit)
                return;
              \u0002.Settings.Save();
            });
            MySettings.\u0001 = true;
            goto label_9;
          }
          else
            goto label_9;
        }
        finally
        {
          do
          {
            if (lockTaken)
              Monitor.Exit(Expression);
          }
          while (false);
        }
      }
    }
  }
}
