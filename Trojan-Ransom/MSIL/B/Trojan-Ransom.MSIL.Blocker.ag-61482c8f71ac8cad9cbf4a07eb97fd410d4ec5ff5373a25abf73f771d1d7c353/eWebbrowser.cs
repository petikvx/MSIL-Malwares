// Decompiled with JetBrains decompiler
// Type: FileiceRansomware.eWebbrowser
// Assembly: FileiceRansomware, Version=1.0.3.9, Culture=neutral, PublicKeyToken=null
// MVID: D842FFB8-D8DE-4178-93F9-A1A5D7AA56CC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.MSIL.Blocker.ag-61482c8f71ac8cad9cbf4a07eb97fd410d4ec5ff5373a25abf73f771d1d7c353.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Windows.Forms;

namespace FileiceRansomware
{
  [ComVisible(true)]
  [PermissionSet(SecurityAction.Demand, Name = "FullTrust")]
  public class eWebbrowser : WebBrowser
  {
    private Guid cmdGUID;
    private AxHost.ConnectionPointCookie cookie;
    private eWebbrowser.WebBrowserExtendedEvents wevents;

    public string CurrentURL => this.Document.Url.ToString();

    public eWebbrowser() => this.cmdGUID = new Guid(-318674624, (short) -17061, (short) 4559, (byte) 186, (byte) 78, (byte) 0, (byte) 192, (byte) 79, (byte) 215, (byte) 8, (byte) 22);

    public void ShowOpen()
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      try
      {
        openFileDialog.Filter = "HTML Files (*.htm)|*.htm|HTML Files (*.html)|*.html|TextFiles(*.txt)|*.txt|Gif Files (*.gif)|*.gif|JPEG Files (*.jpg)|*.jpeg|PNG Files (*.png)|*.png|Art Files (*.art)|*.art|AU Fles (*.au)|*.au|AIFF Files (*.aif|*.aiff|XBM Files (*.xbm)|*.xbm|All Files (*.*)|*.*";
        openFileDialog.Title = " Open File ";
        int num = (int) openFileDialog.ShowDialog();
        if (Operators.CompareString(openFileDialog.FileName, (string) null, false) <= 0)
          return;
        this.Navigate(openFileDialog.FileName);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw new Exception(ex.Message.ToString());
      }
    }

    public void ShowSource()
    {
      object obj = (object) null;
      try
      {
        ((eWebbrowser.IOleCommandTarget) this.Document.DomDocument).Exec(ref this.cmdGUID, 2L, 1L, ref obj, ref obj);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        throw new Exception(exception.Message.ToString(), exception.InnerException);
      }
      finally
      {
      }
    }

    public void ShowFindDialog()
    {
      object obj = (object) null;
      try
      {
        ((eWebbrowser.IOleCommandTarget) this.Document.DomDocument).Exec(ref this.cmdGUID, 1L, 0L, ref obj, ref obj);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        throw new Exception(exception.Message.ToString(), exception.InnerException);
      }
      finally
      {
      }
    }

    public void AddToFavorites(string strURL = "", string strTitle = "")
    {
      object Instance;
      try
      {
        Instance = (object) new eWebbrowser.ShellUIHelper();
        NewLateBinding.LateCall(Instance, (System.Type) null, "AddFavorite", new object[2]
        {
          (object) this.Document.Url.ToString(),
          (object) this.DocumentTitle.ToString()
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw new Exception(ex.Message.ToString());
      }
      if (Instance == null || !Marshal.IsComObject(RuntimeHelpers.GetObjectValue(Instance)))
        return;
      Marshal.ReleaseComObject(RuntimeHelpers.GetObjectValue(Instance));
    }

    public void ShowOrganizeFavorites()
    {
      object Instance = (object) null;
      try
      {
        Instance = (object) new eWebbrowser.ShellUIHelper();
        NewLateBinding.LateCall(Instance, (System.Type) null, "ShowBrowserUI", new object[2]
        {
          (object) "OrganizeFavorites",
          (object) 0
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      finally
      {
        if (Instance != null && Marshal.IsComObject(RuntimeHelpers.GetObjectValue(Instance)))
          Marshal.ReleaseComObject(RuntimeHelpers.GetObjectValue(Instance));
      }
    }

    public void SendToDesktop()
    {
      object Instance = (object) null;
      try
      {
        Instance = (object) new eWebbrowser.ShellUIHelper();
        NewLateBinding.LateCall(Instance, (System.Type) null, "AddDesktopComponent", new object[2]
        {
          (object) this.Document.Url.ToString(),
          (object) "website"
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      finally
      {
        if (Instance != null && Marshal.IsComObject(RuntimeHelpers.GetObjectValue(Instance)))
          Marshal.ReleaseComObject(RuntimeHelpers.GetObjectValue(Instance));
      }
    }

    public void ShowInternetOptions() => Interaction.Shell("rundll32.exe shell32.dll,Control_RunDLL inetcpl.cpl,,0", AppWinStyle.NormalFocus);

    public void ShowPrivacyReport() => Interaction.Shell("rundll32.exe shell32.dll,Control_RunDLL inetcpl.cpl,,2", AppWinStyle.NormalFocus);

    protected override void CreateSink()
    {
      base.CreateSink();
      this.wevents = new eWebbrowser.WebBrowserExtendedEvents(this);
      this.cookie = new AxHost.ConnectionPointCookie(RuntimeHelpers.GetObjectValue(this.ActiveXInstance), (object) this.wevents, typeof (eWebbrowser.DWebBrowserEvents2));
    }

    protected override void DetachSink()
    {
      if (this.cookie != null)
      {
        this.cookie.Disconnect();
        this.cookie = (AxHost.ConnectionPointCookie) null;
      }
      base.DetachSink();
    }

    public event eWebbrowser.WebBrowserNavigatingExtendedEventHandler NavigatingExtended;

    public event eWebbrowser.WebBrowserNewWindowExtendedEventHandler NewWindowExtended;

    protected internal void OnNavigatingExtended(
      string Url,
      string Frame,
      byte[] Postdata,
      string Headers,
      ref bool Cancel)
    {
      eWebbrowser.WebBrowserNavigatingExtendedEventArgs e = new eWebbrowser.WebBrowserNavigatingExtendedEventArgs(Url, Frame, Postdata, Headers);
      eWebbrowser.WebBrowserNavigatingExtendedEventHandler navigatingExtendedEvent = this.NavigatingExtendedEvent;
      if (navigatingExtendedEvent != null)
        navigatingExtendedEvent((object) this, e);
      Cancel = e.Cancel;
    }

    protected internal void OnNewWindowExtended(
      string Url,
      ref bool Cancel,
      eWebbrowser.NWMF Flags,
      string UrlContext)
    {
      eWebbrowser.WebBrowserNewWindowExtendedEventArgs e = new eWebbrowser.WebBrowserNewWindowExtendedEventArgs(Url, UrlContext, Flags);
      eWebbrowser.WebBrowserNewWindowExtendedEventHandler windowExtendedEvent = this.NewWindowExtendedEvent;
      if (windowExtendedEvent != null)
        windowExtendedEvent((object) this, e);
      Cancel = e.Cancel;
    }

    public void Navigate2(string URL) => this.Navigate(URL);

    public struct OLECMDTEXT
    {
      public uint cmdtextf;
      public uint cwActual;
      public uint cwBuf;
      public char rgwz;
    }

    public struct OLECMD
    {
      public long cmdID;
      public ulong cmdf;
    }

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    [Guid("b722bccb-4e68-101b-a2bc-00aa00404770")]
    [ComImport]
    public interface IOleCommandTarget
    {
      void QueryStatus(
        ref Guid pguidCmdGroup,
        uint cCmds,
        [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] eWebbrowser.OLECMD prgCmds,
        ref eWebbrowser.OLECMDTEXT pCmdText);

      void Exec(
        ref Guid pguidCmdGroup,
        long nCmdId,
        long nCmdExecOpt,
        ref object pvaIn,
        ref object pvaOut);
    }

    public enum oCommands : long
    {
      DLCTL_OFFLINEIFNOTCONNECTED = -2147483648, // 0xFFFFFFFF80000000
      Options = 0,
      Find = 1,
      ViewSource = 2,
      DLCTL_DLIMAGES = 16, // 0x0000000000000010
      DLCTL_VIDEOS = 32, // 0x0000000000000020
      DLCTL_BGSOUNDS = 64, // 0x0000000000000040
      DLCTL_NO_SCRIPTS = 128, // 0x0000000000000080
      DLCTL_NO_JAVA = 256, // 0x0000000000000100
      DLCTL_NO_RUNACTIVEXCTLS = 512, // 0x0000000000000200
      DLCTL_NO_DLACTIVEXCTLS = 1024, // 0x0000000000000400
      DLCTL_DOWNLOADONLY = 2048, // 0x0000000000000800
      DLCTL_NO_BEHAVIORS = 2048, // 0x0000000000000800
      DLCTL_NO_FRAMEDOWNLOAD = 4096, // 0x0000000000001000
      DLCTL_RESYNCHRONIZE = 8192, // 0x0000000000002000
      DLCTL_PRAGMA_NO_CACHE = 16384, // 0x0000000000004000
      ID_FILE_SAVEAS = 32771, // 0x0000000000008003
      ID_FILE_PAGESETUP = 32772, // 0x0000000000008004
      ID_FILE_IMPORTEXPORT = 32774, // 0x0000000000008006
      ID_FILE_PRINTPREVIEW = 32776, // 0x0000000000008008
      ID_FILE_NEWIE = 32779, // 0x000000000000800B
      ID_FILE_NEWMAIL = 32780, // 0x000000000000800C
      PID_FILE_NEWINTERNETCALL = 32781, // 0x000000000000800D
      ID_FILE_ADDTRUST = 32782, // 0x000000000000800E
      ID_FILE_ADDLOCAL = 32783, // 0x000000000000800F
      DLCTL_NO_METACHARSET = 65536, // 0x0000000000010000
      DLCTL_URL_ENCODING_DISABLE_UTF8 = 131072, // 0x0000000000020000
      DLCTL_URL_ENCODING_ENABLE_UTF8 = 262144, // 0x0000000000040000
      DLCTL_FORCEOFFLINE = 268435456, // 0x0000000010000000
      DLCTL_NO_CLIENTPULL = 536870912, // 0x0000000020000000
      DLCTL_SILENT = 1073741824, // 0x0000000040000000
    }

    [Guid("34A715A0-6587-11D0-924A-0020AFC7AC4D")]
    [TypeLibType(TypeLibTypeFlags.FHidden)]
    [InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
    [ComImport]
    public interface DWebBrowserEvents2
    {
      [DispId(250)]
      void BeforeNavigate2(
        [MarshalAs(UnmanagedType.IDispatch), In] object pDisp,
        [MarshalAs(UnmanagedType.BStr), In] ref string URL,
        [In] ref object flags,
        [MarshalAs(UnmanagedType.BStr), In] ref string targetFrameName,
        [In] ref object postdata,
        [MarshalAs(UnmanagedType.BStr), In] ref string headers,
        [In, Out] ref bool cancel);

      [DispId(273)]
      void NewWindow3(
        [MarshalAs(UnmanagedType.IDispatch), In] object pDisp,
        [In, Out] ref bool cancel,
        [In] ref object Flags,
        [MarshalAs(UnmanagedType.BStr), In] ref string UrlContext,
        [MarshalAs(UnmanagedType.BStr), In] ref string Url);
    }

    public enum NWMF
    {
      NWMF_UNLOADING = 1,
      NWMF_USERINITED = 2,
      NWMF_FIRST_USERINITED = 4,
      NWMF_OVERRIDEKEY = 8,
      NWMF_SHOWHELP = 16, // 0x00000010
      NWMF_HTMLDIALOG = 32, // 0x00000020
      NWMF_FROMPROXY = 64, // 0x00000040
    }

    public delegate void WebBrowserNavigatingExtendedEventHandler(
      object sender,
      eWebbrowser.WebBrowserNavigatingExtendedEventArgs e);

    public delegate void WebBrowserNewWindowExtendedEventHandler(
      object sender,
      eWebbrowser.WebBrowserNewWindowExtendedEventArgs e);

    internal class WebBrowserExtendedEvents : 
      StandardOleMarshalObject,
      eWebbrowser.DWebBrowserEvents2
    {
      private eWebbrowser m_Browser;

      public WebBrowserExtendedEvents(eWebbrowser browser) => this.m_Browser = browser;

      public void BeforeNavigate2(
        object pDisp,
        ref string URL,
        ref object flags,
        ref string targetFrameName,
        ref object postData,
        ref string headers,
        ref bool cancel)
      {
        this.m_Browser.OnNavigatingExtended(URL, targetFrameName, (byte[]) postData, headers, ref cancel);
      }

      public void NewWindow3(
        object pDisp,
        ref bool Cancel,
        ref object Flags,
        ref string UrlContext,
        ref string Url)
      {
        this.m_Browser.OnNewWindowExtended(Url, ref Cancel, (eWebbrowser.NWMF) Conversions.ToInteger(Flags), UrlContext);
      }
    }

    public class WebBrowserNewWindowExtendedEventArgs : CancelEventArgs
    {
      private string m_Url;
      private string m_UrlContext;
      private eWebbrowser.NWMF m_Flags;

      public string Url => this.m_Url;

      public string UrlContext => this.m_UrlContext;

      public eWebbrowser.NWMF Flags => this.m_Flags;

      public WebBrowserNewWindowExtendedEventArgs(
        string url,
        string urlcontext,
        eWebbrowser.NWMF flags)
      {
        this.m_Url = url;
        this.m_UrlContext = urlcontext;
        this.m_Flags = flags;
      }
    }

    public class WebBrowserNavigatingExtendedEventArgs : CancelEventArgs
    {
      private string m_Url;
      private string m_Frame;
      private byte[] m_Postdata;
      private string m_Headers;

      public string Url => this.m_Url;

      public string Frame => this.m_Frame;

      public string Headers => this.m_Headers;

      public string Postdata => this.PostdataToString(this.m_Postdata);

      public byte[] PostdataByte => this.m_Postdata;

      public WebBrowserNavigatingExtendedEventArgs(
        string url,
        string frame,
        byte[] postdata,
        string headers)
      {
        this.m_Url = url;
        this.m_Frame = frame;
        this.m_Postdata = postdata;
        this.m_Headers = headers;
      }

      private string PostdataToString(byte[] p)
      {
        string Expression = "";
        byte[] numArray = p;
        if (numArray == null || numArray.Length == 0)
          return "";
        int num = checked (numArray.Length - 1);
        int index = 0;
        while (index <= num)
        {
          Expression += Conversions.ToString(Strings.ChrW((int) numArray[index]));
          checked { ++index; }
        }
        string Left = Strings.Replace(Strings.Replace(Strings.Replace(Expression, "\r", ""), "\n", ""), "\0", "");
        return Operators.CompareString(Left, (string) null, false) == 0 ? "" : Left;
      }
    }

    [Guid("64AB4BB7-111E-11D1-8F79-00C04FC2FBE1")]
    [ComImport]
    public class ShellUIHelper
    {
      [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
      public extern ShellUIHelper();
    }
  }
}
