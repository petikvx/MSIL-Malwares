// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: q是, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A217F07-6E26-47B2-8CBC-BCC0D26AE04B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-566554b534a53102dd67fc20bd07ca49241b51616d73619e383e80bdfc4fe08a.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = -2060438758;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -633072728)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.ChessBoard = b;
            num1 = (int) num2 * -2060768056 ^ 1750387079;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags();
            num1 = (int) num2 * -2061240439 ^ 1719424139;
            continue;
          case 4:
            num1 = (int) num2 * 1988583406 ^ 926779021;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
      this.resetFlags();
      this.ChessBoard.Restart();
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = 1777086880;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 30024668)) % 7U)
        {
          case 0:
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * -1155665915 ^ -62702724;
            continue;
          case 1:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * 1180433470 ^ 1489795189;
            continue;
          case 2:
            this.TurnId = 1;
            num1 = (int) num2 * 327126968 ^ -609798861;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          case 5:
            this.DisableTurn = turn;
            num1 = (int) num2 * 1422359447 ^ -436772175;
            continue;
          case 6:
            this.Turns.Clear();
            num1 = (int) num2 * -1981245361 ^ 1219636813;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void TestPassant()
    {
      new DebugChess(this.ChessBoard).TestPassant();
      this.resetFlags(true);
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -2144665289;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1576156932)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 1669878661 ^ 641221645;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            num1 = (int) num2 * -190099925 ^ -1452432593;
            continue;
          case 4:
            this.resetFlags(true);
            num1 = (int) num2 * -995450349 ^ 7817839;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCastling()
    {
      new DebugChess(this.ChessBoard).TestCastling();
label_1:
      int num1 = 1199513897;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1352321228)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -430062075 ^ 588104910;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 273023170 ^ -816476972;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCheck()
    {
      new DebugChess(this.ChessBoard).TestCheck();
      this.resetFlags(true);
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = 1561074321;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 139282536)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1592750366 ^ -1670490131;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 309429283 ^ -367610781;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 8087394;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 990424899)) % 4U)
        {
          case 1:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * 1488945455 ^ -635851478;
            continue;
          case 2:
            num1 = (int) num2 * -524733596 ^ -372906853;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.resetFlags(true);
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 1463623400;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 633363701)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1047687561 ^ -1553664457;
            continue;
          case 2:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * -1706422771 ^ 116790384;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 925318287 ^ -70734125;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }
  }
}
