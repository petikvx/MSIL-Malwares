// Decompiled with JetBrains decompiler
// Type: ‭‬‌‌⁯​⁬⁭‭‭⁫⁬⁪‮⁭‪‍​‫‮‌‍⁭‍‌‬⁭‬‫‎‍‍‪⁭⁮⁫⁯​‮‫‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u202D‬‌‌⁯​⁬⁭‭‭⁫⁬⁪‮⁭‪‍​‫‮‌‍⁭‍‌‬⁭‬‫‎‍‍‪⁭⁮⁫⁯​‮‫‮ : 
  \u206F⁪‍⁯‬‌‮‏⁬​⁮‫⁮⁬‬‭‪⁫⁪⁪⁯⁮⁮‎‌‭‮‎​‌⁫‭⁮⁬‮‌⁫​⁯⁪‮
{
  private \u202A⁯⁯⁭⁪⁯‪‎‮‬‮⁮‍⁯‫‎⁫‪‪​⁭⁬‌⁯⁮‏‍⁪⁪‎‏⁫⁭⁯‮⁮⁭‏‏‍‮ \u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮;
  private \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ \u200E‏‫‍‎‫⁯⁮⁬​‮‌‭⁪‍⁪‎‍‬⁬⁪⁪‎⁫‎​​‭⁭‏⁭‮​‌‫‭‪⁮‫⁮‮;
  private \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮ \u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮;
  private byte[] \u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮;
  private bool \u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮;
  private \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮ \u202A​‎‮‎‌⁭​⁮​⁬‪​⁮⁬⁭‬⁭⁫⁭‍⁬‮‎‮‌‬‏⁫‮⁮⁬‪‭‏⁯⁮​⁯‪‮;
  private static readonly byte[] \u200C‫‏‎‏⁪⁭⁮‏‮‏​⁬⁬‬⁭⁯‭⁮‬‎⁭⁪‌‫⁯⁪⁪‬⁬‮‫⁭⁭​⁫‫‬‬‮‮ = new byte[8]
  {
    (byte) 74,
    (byte) 221,
    (byte) 162,
    (byte) 44,
    (byte) 121,
    (byte) 232,
    (byte) 33,
    (byte) 5
  };
  private \u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮ \u202D⁮‫‏⁬‬⁪‍‏‍⁬⁪‎‭‫⁫⁭⁪‌⁪⁮⁫‍⁯‪⁯‬‬⁫‮‮⁮⁭‮⁮‍⁭‪‎‪‮ = (\u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮) new \u202B‌⁯​⁯⁯‭‮⁮‪‎⁫‌‫‮⁭‌‎‌⁬‮‎‌⁫⁯‭‍‏‏‬‎‌⁪‏⁫‮‌‌‍⁭‮();
  private byte[] \u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮ = new byte[20];

  public virtual void \u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(
    bool _param1,
    \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ _param2)
  {
    this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮ = _param1;
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮ = new \u202A⁯⁯⁭⁪⁯‪‎‮‬‮⁮‍⁯‫‎⁫‪‪​⁭⁬‌⁯⁮‏‍⁪⁪‎‏⁫⁭⁯‮⁮⁭‏‏‍‮((\u206F‮‪⁭⁮‮‏⁭⁮⁫‏‬‫‏‬‍‪‫⁯⁪‏⁫⁯‫⁫‮‪‮‌‌⁭‪‪‌⁮‫‭⁪⁭‪‮) new \u200C‎‍‌⁪⁬⁪‬⁫​⁮⁬⁯‎⁪‍⁭‎⁯​⁪⁯⁬‬‬‌‭‭⁯⁬‫‮‬⁭⁬⁭⁪⁯⁭‏‮());
    if (_param2 is \u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮)
    {
      \u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮ obj = (\u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮) _param2;
      this.\u202A​‎‮‎‌⁭​⁮​⁬‪​⁮⁬⁭‬⁭⁫⁭‍⁬‮‎‮‌‬‏⁫‮⁮⁬‪‭‏⁯⁮​⁯‪‮ = obj.\u206A‫⁯‭⁯⁭‫‌‍​⁭‬‮‪⁭⁭⁬⁯‍​‌‮‪⁪‬⁮⁭‬‌⁬⁬⁬‌‭‏‏⁭⁬​‏‮;
      _param2 = obj.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮;
    }
    else
      this.\u202A​‎‮‎‌⁭​⁮​⁬‪​⁮⁬⁭‬⁭⁫⁭‍⁬‮‎‮‌‬‏⁫‮⁮⁬‪‭‏⁯⁮​⁯‪‮ = new \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮();
    if (_param2 is \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮)
    {
      if (!_param1)
        throw new ArgumentException("You should not supply an IV for unwrapping");
      this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮ = (\u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮) _param2;
      this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮ = this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮.\u202A‌⁭‍‪‭‍‍⁪⁭⁫‮⁬‍⁪⁪‪⁬‏⁭⁫⁫⁬‫⁬‪‏⁯‍⁪‍‮‫⁪‏‬⁯‭‏‪‮();
      this.\u200E‏‫‍‎‫⁯⁮⁬​‮‌‭⁪‍⁪‎‍‬⁬⁪⁪‎⁫‎​​‭⁭‏⁭‮​‌‫‭‪⁮‫⁮‮ = this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮;
      if (this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length != 8)
        throw new ArgumentException("IV is not 8 octets");
    }
    else
    {
      this.\u200E‏‫‍‎‫⁯⁮⁬​‮‌‭⁪‍⁪‎‍‬⁬⁪⁪‎⁫‎​​‭⁭‏⁭‮​‌‫‭‪⁮‫⁮‮ = _param2;
      if (!this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
        return;
      this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮ = new byte[8];
      ((Random) this.\u202A​‎‮‎‌⁭​⁮​⁬‪​⁮⁬⁭‬⁭⁫⁭‍⁬‮‎‮‌‬‏⁫‮⁮⁬‪‭‏⁯⁮​⁯‪‮).NextBytes(this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮);
      this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮ = new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮(this.\u200E‏‫‍‎‫⁯⁮⁬​‮‌‭⁪‍⁪‎‍‬⁬⁪⁪‎⁫‎​​‭⁭‏⁭‮​‌‫‭‪⁮‫⁮‮, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮);
    }
  }

  public virtual string \u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ => "RC2";

  public virtual byte[] \u202B⁯‏⁮​‏⁭⁯⁯⁯‭​⁪⁮⁫‎‌‮‪‫⁮‏‭⁬⁬⁯⁫‍⁪‮‏‌‍‌‬‪‎⁭‬⁭‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (!this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
      throw new InvalidOperationException("Not initialized for wrapping");
    int length = _param3 + 1;
    if (length % 8 != 0)
      length += 8 - length % 8;
    byte[] numArray1 = new byte[length];
    numArray1[0] = (byte) _param3;
    Array.Copy((Array) _param1, _param2, (Array) numArray1, 1, _param3);
    byte[] numArray2 = new byte[numArray1.Length - _param3 - 1];
    if (numArray2.Length != 0)
    {
      ((Random) this.\u202A​‎‮‎‌⁭​⁮​⁬‪​⁮⁬⁭‬⁭⁫⁭‍⁬‮‎‮‌‬‏⁫‮⁮⁬‪‭‏⁯⁮​⁯‪‮).NextBytes(numArray2);
      Array.Copy((Array) numArray2, 0, (Array) numArray1, _param3 + 1, numArray2.Length);
    }
    byte[] sourceArray = this.\u200E‌‪⁭⁭‬‮⁬‬‍⁯⁯‬⁭⁪⁬⁪‫⁯‫‏⁬⁪⁬‬‪‭‌‌⁬‬‭‬⁯‎‎⁭⁪⁪⁬‮(numArray1);
    byte[] numArray3 = new byte[numArray1.Length + sourceArray.Length];
    Array.Copy((Array) numArray1, 0, (Array) numArray3, 0, numArray1.Length);
    Array.Copy((Array) sourceArray, 0, (Array) numArray3, numArray1.Length, sourceArray.Length);
    byte[] numArray4 = new byte[numArray3.Length];
    Array.Copy((Array) numArray3, 0, (Array) numArray4, 0, numArray3.Length);
    int num1 = numArray3.Length / this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
    if (numArray3.Length % this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮() != 0)
      throw new InvalidOperationException("Not multiple of block length");
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(true, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮);
    for (int index = 0; index < num1; ++index)
    {
      int num2 = index * this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(numArray4, num2, numArray4, num2);
    }
    byte[] destinationArray = new byte[this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length + numArray4.Length];
    Array.Copy((Array) this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮, 0, (Array) destinationArray, 0, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length);
    Array.Copy((Array) numArray4, 0, (Array) destinationArray, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length, numArray4.Length);
    byte[] numArray5 = new byte[destinationArray.Length];
    for (int index = 0; index < destinationArray.Length; ++index)
      numArray5[index] = destinationArray[destinationArray.Length - (index + 1)];
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(true, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮(this.\u200E‏‫‍‎‫⁯⁮⁬​‮‌‭⁪‍⁪‎‍‬⁬⁪⁪‎⁫‎​​‭⁭‏⁭‮​‌‫‭‪⁮‫⁮‮, \u202D‬‌‌⁯​⁬⁭‭‭⁫⁬⁪‮⁭‪‍​‫‮‌‍⁭‍‌‬⁭‬‫‎‍‍‪⁭⁮⁫⁯​‮‫‮.\u200C‫‏‎‏⁪⁭⁮‏‮‏​⁬⁬‬⁭⁯‭⁮‬‎⁭⁪‌‫⁯⁪⁪‬⁬‮‫⁭⁭​⁫‫‬‬‮‮));
    for (int index = 0; index < num1 + 1; ++index)
    {
      int num3 = index * this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(numArray5, num3, numArray5, num3);
    }
    return numArray5;
  }

  public virtual byte[] \u206D‬‍⁫⁯‮‮​‌​‍‎‏‫⁪‬⁬⁪‪​⁬​⁫​‫‫⁬​⁫‭⁯‪⁪⁪⁭‍⁮​‬‍‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
      throw new InvalidOperationException("Not set for unwrapping");
    if (_param1 == null)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("Null pointer as ciphertext");
    if (_param3 % this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮() != 0)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("Ciphertext not multiple of " + this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮().ToString());
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(false, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮(this.\u200E‏‫‍‎‫⁯⁮⁬​‮‌‭⁪‍⁪‎‍‬⁬⁪⁪‎⁫‎​​‭⁭‏⁭‮​‌‫‭‪⁮‫⁮‮, \u202D‬‌‌⁯​⁬⁭‭‭⁫⁬⁪‮⁭‪‍​‫‮‌‍⁭‍‌‬⁭‬‫‎‍‍‪⁭⁮⁫⁯​‮‫‮.\u200C‫‏‎‏⁪⁭⁮‏‮‏​⁬⁬‬⁭⁯‭⁮‬‎⁭⁪‌‫⁯⁪⁪‬⁬‮‫⁭⁭​⁫‫‬‬‮‮));
    byte[] destinationArray1 = new byte[_param3];
    Array.Copy((Array) _param1, _param2, (Array) destinationArray1, 0, _param3);
    for (int index = 0; index < destinationArray1.Length / this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮(); ++index)
    {
      int num = index * this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(destinationArray1, num, destinationArray1, num);
    }
    byte[] sourceArray = new byte[destinationArray1.Length];
    for (int index = 0; index < destinationArray1.Length; ++index)
      sourceArray[index] = destinationArray1[destinationArray1.Length - (index + 1)];
    this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮ = new byte[8];
    byte[] numArray1 = new byte[sourceArray.Length - 8];
    Array.Copy((Array) sourceArray, 0, (Array) this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮, 0, 8);
    Array.Copy((Array) sourceArray, 8, (Array) numArray1, 0, sourceArray.Length - 8);
    this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮ = new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮(this.\u200E‏‫‍‎‫⁯⁮⁬​‮‌‭⁪‍⁪‎‍‬⁬⁪⁪‎⁫‎​​‭⁭‏⁭‮​‌‫‭‪⁮‫⁮‮, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮);
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(false, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮);
    byte[] numArray2 = new byte[numArray1.Length];
    Array.Copy((Array) numArray1, 0, (Array) numArray2, 0, numArray1.Length);
    for (int index = 0; index < numArray2.Length / this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮(); ++index)
    {
      int num = index * this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(numArray2, num, numArray2, num);
    }
    byte[] numArray3 = new byte[numArray2.Length - 8];
    byte[] destinationArray2 = new byte[8];
    Array.Copy((Array) numArray2, 0, (Array) numArray3, 0, numArray2.Length - 8);
    Array.Copy((Array) numArray2, numArray2.Length - 8, (Array) destinationArray2, 0, 8);
    if (!this.\u206C‮‏⁫‫‍⁭‮⁯⁮⁯‮⁫‪‭‬‪‭⁭‎⁭‎⁯⁪‮‪⁭⁮⁯⁮⁯​⁪⁯⁮⁮​‎​⁪‮(numArray3, destinationArray2))
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("Checksum inside ciphertext is corrupted");
    byte[] destinationArray3 = numArray3.Length - (((int) numArray3[0] & (int) byte.MaxValue) + 1) <= 7 ? new byte[(int) numArray3[0]] : throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("too many pad bytes (" + (numArray3.Length - (((int) numArray3[0] & (int) byte.MaxValue) + 1)).ToString() + ")");
    Array.Copy((Array) numArray3, 1, (Array) destinationArray3, 0, destinationArray3.Length);
    return destinationArray3;
  }

  private byte[] \u200E‌‪⁭⁭‬‮⁬‬‍⁯⁯‬⁭⁪⁬⁪‫⁯‫‏⁬⁪⁬‬‪‭‌‌⁬‬‭‬⁯‎‎⁭⁪⁪⁬‮(byte[] _param1)
  {
    this.\u202D⁮‫‏⁬‬⁪‍‏‍⁬⁪‎‭‫⁫⁭⁪‌⁪⁮⁫‍⁯‪⁯‬‬⁫‮‮⁮⁭‮⁮‍⁭‪‎‪‮.\u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(_param1, 0, _param1.Length);
    this.\u202D⁮‫‏⁬‬⁪‍‏‍⁬⁪‎‭‫⁫⁭⁪‌⁪⁮⁫‍⁯‪⁯‬‬⁫‮‮⁮⁭‮⁮‍⁭‪‎‪‮.\u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮, 0);
    byte[] destinationArray = new byte[8];
    Array.Copy((Array) this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮, 0, (Array) destinationArray, 0, 8);
    return destinationArray;
  }

  private bool \u206C‮‏⁫‫‍⁭‮⁯⁮⁯‮⁫‪‭‬‪‭⁭‎⁭‎⁯⁪‮‪⁭⁮⁯⁮⁯​⁪⁯⁮⁮​‎​⁪‮(byte[] _param1, byte[] _param2) => \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u200F⁬‌‬⁭⁪⁪‏‫⁮⁭‪⁮‎​‍⁬‭⁪⁯⁬‭‌⁬⁬‬‫‮⁫⁯‏⁫⁪‌⁬⁫⁫‬‬‬‮(this.\u200E‌‪⁭⁭‬‮⁬‬‍⁯⁯‬⁭⁪⁬⁪‫⁯‫‏⁬⁪⁬‬‪‭‌‌⁬‬‭‬⁯‎‎⁭⁪⁪⁬‮(_param1), _param2);
}
