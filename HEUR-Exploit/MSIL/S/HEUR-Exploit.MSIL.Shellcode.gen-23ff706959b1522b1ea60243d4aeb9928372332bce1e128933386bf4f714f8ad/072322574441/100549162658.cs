// Decompiled with JetBrains decompiler
// Type: 072322574441.100549162658
// Assembly: 569990687827, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 58118FF0-4F0E-4F7B-A626-B24D4B565FEB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-23ff706959b1522b1ea60243d4aeb9928372332bce1e128933386bf4f714f8ad.exe

using \u003072322574441;
using \u003325449573288;
using \u003802679321319;
using \u003823387107881;
using System;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Cache;
using System.Runtime.CompilerServices;
using System.Runtime.ExceptionServices;
using System.Security;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Threading;
using System.Threading.Tasks;

namespace \u003072322574441
{
  internal sealed class \u003100549162658 : IRemoteControlHTTPRequestor
  {
    private const string \u003931729189627 = ".errormarker";
    private const string \u003587664512801 = "Age";
    private const string \u003759874867676 = "Download was cancelled by caller";
    private const string \u003526009703379 = "Reading HTTP response stream throws an WebException";
    private const int \u003251265648728 = 2;
    private const int \u003787808673322 = 32;
    private const int \u003693418738017 = 1000;
    private static readonly string \u003813208045899 = Path.Combine(Path.GetTempPath(), "VSRemoteControl");
    private static readonly System.Threading.Semaphore \u003780697815267 = new System.Threading.Semaphore(1, 1);
    private static readonly HttpRequestCachePolicy \u003286854953271 = new HttpRequestCachePolicy(HttpRequestCacheLevel.CacheOnly);
    private static readonly HttpRequestCachePolicy \u003474347457871 = new HttpRequestCachePolicy(HttpRequestCacheLevel.Revalidate);
    private readonly string \u003874447518642;
    private readonly string \u003452253389359;
    private readonly int \u003583127530357;
    private readonly CancellationTokenSource \u003979218222933 = new CancellationTokenSource();

    internal \u003100549162658(string url, int httpRequestTimeoutMillis)
      : this()
    {
      url = url.TrimEnd('/');
      this.\u003874447518642 = !url.EndsWith(".errormarker", StringComparison.OrdinalIgnoreCase) ? url : throw new ArgumentException(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "url '{0}' is not allowed. url argument must not end with {1}", new object[2]
      {
        (object) url,
        (object) ".errormarker"
      }));
      this.\u003452253389359 = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}{1}", new object[2]
      {
        (object) url,
        (object) ".errormarker"
      });
      this.\u003583127530357 = httpRequestTimeoutMillis;
    }

    private \u003100549162658()
    {
    }

    Task<\u003083528900411> IRemoteControlHTTPRequestor.\u003498983678087()
    {
      // ISSUE: variable of a compiler-generated type
      \u003100549162658.\u003074774331811 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003037058053464 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003904555702489 = AsyncTaskMethodBuilder<\u003083528900411>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003796840840385.\u003658183332233&) ref stateMachine).\u003427078500255 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003904555702489.Start<\u003100549162658.\u003074774331811>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003904555702489.Task;
    }

    Task<\u003083528900411> IRemoteControlHTTPRequestor.\u003265857959721()
    {
      // ISSUE: variable of a compiler-generated type
      \u003100549162658.\u003985771832997 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003038982415771 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003687076574569 = AsyncTaskMethodBuilder<\u003083528900411>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003100549162658.\u003074774331811&) ref stateMachine).\u003235804303207 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003687076574569.Start<\u003100549162658.\u003985771832997>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003687076574569.Task;
    }

    Task<int> IRemoteControlHTTPRequestor.\u003311577084755()
    {
      // ISSUE: variable of a compiler-generated type
      \u003100549162658.\u003486909867179 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003799918363614 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003103389808063 = AsyncTaskMethodBuilder<int>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003100549162658.\u003985771832997&) ref stateMachine).\u003884986973109 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003103389808063.Start<\u003100549162658.\u003486909867179>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003103389808063.Task;
    }

    void IRemoteControlHTTPRequestor.\u003496358951142() => this.\u003979218222933.Cancel();

    private static int? \u003635570491018(HttpWebResponse _param0)
    {
      string[] values = _param0.Headers.GetValues("Age");
      if (values != null && values.Length != 0 && !string.IsNullOrEmpty(values[0]))
      {
        int result = 0;
        if (int.TryParse(values[0], out result))
          return new int?(result);
      }
      return new int?();
    }

    private static void \u003535947630862() => Task.Run((Action) (() =>
    {
      if (!\u003100549162658.\u003780697815267.WaitOne(0, false))
        return;
      try
      {
        string[] files;
        try
        {
          files = Directory.GetFiles(\u003100549162658.\u003813208045899, "*", SearchOption.AllDirectories);
        }
        catch (IOException ex)
        {
          return;
        }
        catch (UnauthorizedAccessException ex)
        {
          return;
        }
        DateTime dateTime = DateTime.Now.AddMinutes(-5.0);
        foreach (string path in files)
        {
          try
          {
            if (System.IO.File.GetLastAccessTime(path) < dateTime)
              System.IO.File.Delete(path);
          }
          catch (IOException ex)
          {
          }
          catch (UnauthorizedAccessException ex)
          {
          }
        }
      }
      finally
      {
        try
        {
          \u003100549162658.\u003780697815267.Release();
        }
        catch (SemaphoreFullException ex)
        {
        }
      }
    }));

    [SecurityCritical]
    [HandleProcessCorruptedStateExceptions]
    private static HttpWebRequest \u003514666304649(string _param0)
    {
      try
      {
        return (HttpWebRequest) WebRequest.Create(_param0);
      }
      catch (ConfigurationErrorsException ex)
      {
        return (HttpWebRequest) null;
      }
    }

    private Task<\u003083528900411> \u003605022107509(
      string _param1,
      int _param2,
      HttpRequestCachePolicy _param3)
    {
      // ISSUE: variable of a compiler-generated type
      \u003100549162658.\u003437465946526 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003140821035675 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003313492820403 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003157861885769 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003842427389489 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003316800242710 = AsyncTaskMethodBuilder<\u003083528900411>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003100549162658.\u003992611655667&) ref stateMachine).\u003487161484151 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003316800242710.Start<\u003100549162658.\u003437465946526>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003316800242710.Task;
    }

    private FileStream \u003534366679841(Stream _param1)
    {
      DirectoryInfo directory = Directory.CreateDirectory(\u003100549162658.\u003813208045899);
      try
      {
        DirectorySecurity accessControl = directory.GetAccessControl();
        SecurityIdentifier identity = new SecurityIdentifier(WellKnownSidType.WorldSid, (SecurityIdentifier) null);
        accessControl.AddAccessRule(new FileSystemAccessRule((IdentityReference) identity, FileSystemRights.FullControl, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Allow));
        directory.SetAccessControl(accessControl);
      }
      catch
      {
      }
      try
      {
        DirectorySecurity accessControl = directory.GetAccessControl();
        SecurityIdentifier identity = new SecurityIdentifier("S-1-15-2-1");
        accessControl.AddAccessRule(new FileSystemAccessRule((IdentityReference) identity, FileSystemRights.FullControl, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Allow));
        directory.SetAccessControl(accessControl);
      }
      catch
      {
      }
      FileStream fileStream = System.IO.File.Create(Path.Combine(\u003100549162658.\u003813208045899, Guid.NewGuid().ToString("N", (IFormatProvider) CultureInfo.InvariantCulture)));
      try
      {
        byte[] buffer = new byte[10000];
        int count;
        do
        {
          this.\u003979218222933.Token.ThrowIfCancellationRequested();
          count = _param1.Read(buffer, 0, buffer.Length);
          fileStream.Write(buffer, 0, count);
        }
        while (count != 0);
        fileStream.Position = 0L;
        return fileStream;
      }
      catch
      {
        fileStream.Dispose();
        throw;
      }
      finally
      {
        \u003100549162658.\u003535947630862();
      }
    }
  }
}
