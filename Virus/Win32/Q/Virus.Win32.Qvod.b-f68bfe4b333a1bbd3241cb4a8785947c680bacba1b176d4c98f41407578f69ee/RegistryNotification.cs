// Decompiled with JetBrains decompiler
// Type: ATI.ACE.MOM.InstallProxy.RegistryNotification
// Assembly: MOM.InstallProxy, Version=2.0.0.0, Culture=neutral, PublicKeyToken=90ba9c70f846762e
// MVID: 5446EB96-4C55-42A7-ABE4-31FC19F3A149
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Virus.Win32.Qvod.b-f68bfe4b333a1bbd3241cb4a8785947c680bacba1b176d4c98f41407578f69ee.exe

using System;
using System.Runtime.InteropServices;

namespace ATI.ACE.MOM.InstallProxy
{
  internal class RegistryNotification
  {
    private const int INFINITE = -1;
    private const long HKEY_LOCAL_MACHINE = 2147483650;
    private const long REG_NOTIFY_CHANGE_LAST_SET = 4;
    private string key;

    [DllImport("kernel32.dll")]
    private static extern IntPtr CreateEvent(
      IntPtr eventAttributes,
      bool manualReset,
      bool initialState,
      string name);

    [DllImport("advapi32.dll")]
    private static extern IntPtr RegOpenKey(
      IntPtr key,
      string subKey,
      out IntPtr resultSubKey);

    [DllImport("advapi32.dll")]
    private static extern long RegNotifyChangeKeyValue(
      IntPtr key,
      bool watchSubTree,
      int notifyFilter,
      IntPtr regEvent,
      bool async);

    [DllImport("kernel32.dll")]
    private static extern long WaitForSingleObject(IntPtr handle, int timeOut);

    [DllImport("kernel32.dll")]
    private static extern IntPtr CloseHandle(IntPtr handle);

    public event EventHandler RegistryKeyChanged;

    public RegistryNotification(string key_) => this.key = key_;

    public unsafe void WaitForKeyChange()
    {
      IntPtr num = RegistryNotification.CreateEvent((IntPtr) (void*) null, false, false, (string) null);
      IntPtr resultSubKey;
      RegistryNotification.RegOpenKey(new IntPtr(-2147483646), this.key, out resultSubKey);
      RegistryNotification.RegNotifyChangeKeyValue(resultSubKey, true, 4, num, true);
      RegistryNotification.WaitForSingleObject(num, -1);
      RegistryNotification.CloseHandle(num);
      EventHandler registryKeyChanged = this.RegistryKeyChanged;
      if (registryKeyChanged == null)
        return;
      registryKeyChanged((object) this, EventArgs.Empty);
    }
  }
}
