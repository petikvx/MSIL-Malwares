// Decompiled with JetBrains decompiler
// Type: DefaultPackage.PlanetWars
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using PlanetDebug;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace DefaultPackage
{
  public class PlanetWars
  {
    private botDebugBase Debugger;
    private List<Planet> planets;
    private List<Fleet> fleets;

    public PlanetWars(string gameStatestring, botDebugBase debugger)
    {
label_1:
      int num1 = -604728050;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -402516402)) % 5U)
        {
          case 0:
            this.fleets = new List<Fleet>();
            this.ParseGameState(gameStatestring);
            num1 = (int) num2 * -255773252 ^ -2087091517;
            continue;
          case 1:
            this.Debugger = debugger;
            this.planets = new List<Planet>();
            num1 = (int) num2 * 1296685046 ^ 767916223;
            continue;
          case 2:
            num1 = (int) num2 * -1331685003 ^ 1682750796;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public int NumPlanets()
    {
label_1:
      int num1 = -799879018;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -166983131)) % 3U)
        {
          case 1:
            count = this.planets.Count;
            num1 = (int) num2 * -1566055392 ^ -1183205161;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return count;
    }

    public Planet GetPlanet(int planetID)
    {
label_1:
      int num1 = -1540680236;
      Planet planet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1356319277)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            planet = this.planets[planetID];
            num1 = (int) num2 * -1120561563 ^ 562356607;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return planet;
    }

    public int NumFleets()
    {
      int count = this.fleets.Count;
label_1:
      int num1 = -118419962;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -927160910)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -2035192513 ^ 1529708322;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return count;
    }

    public Fleet GetFleet(int fleetID)
    {
label_1:
      int num1 = -2031159048;
      Fleet fleet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1764486822)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            fleet = this.fleets[fleetID];
            num1 = (int) num2 * 234089242 ^ 1904112330;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return fleet;
    }

    public List<Planet> Planets()
    {
      List<Planet> planets = this.planets;
label_1:
      int num1 = 2132091371;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 832724591)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 187835592 ^ -1621168082;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return planets;
    }

    public List<Planet> MyPlanets()
    {
label_1:
      int num1 = 1893209067;
      List<Planet> planetList1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 815865637)) % 3U)
        {
          case 1:
            planetList1 = new List<Planet>();
            num1 = (int) num2 * -282902343 ^ -2020528285;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      using (List<Planet>.Enumerator enumerator = this.planets.GetEnumerator())
      {
label_13:
        int num3 = enumerator.MoveNext() ? 868404126 : (num3 = 456185594);
        Planet current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 815865637)) % 10U)
          {
            case 0:
              num3 = 2039502344;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = 579717042;
              continue;
            case 2:
              num3 = (int) num4 * 1419886539 ^ 1707190487;
              continue;
            case 3:
              num3 = (int) num4 * -756040609 ^ 1242901628;
              continue;
            case 4:
              num3 = 868404126;
              continue;
            case 5:
              goto label_13;
            case 6:
              planetList1.Add(current);
              num3 = (int) num4 * 2066377106 ^ 625983548;
              continue;
            case 8:
              int num5 = current.Owner() == 1 ? -1299187613 : (num5 = -799392981);
              num3 = num5 ^ (int) num4 * -65504398;
              continue;
            case 9:
              num3 = (int) num4 * -2053890058 ^ -2057227337;
              continue;
            default:
              goto label_17;
          }
        }
      }
label_17:
      List<Planet> planetList2 = planetList1;
label_18:
      int num6 = 651416259;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ 815865637)) % 3U)
        {
          case 1:
            num6 = (int) num7 * -1684622949 ^ -2080985803;
            continue;
          case 2:
            goto label_18;
          default:
            goto label_21;
        }
      }
label_21:
      return planetList2;
    }

    public List<Planet> NeutralPlanets()
    {
      List<Planet> planetList = new List<Planet>();
      using (List<Planet>.Enumerator enumerator = this.planets.GetEnumerator())
      {
label_8:
        int num1 = enumerator.MoveNext() ? -1616803637 : (num1 = -97061576);
        Planet current;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -143849618)) % 9U)
          {
            case 0:
              planetList.Add(current);
              num1 = (int) num2 * -308325553 ^ -675809788;
              continue;
            case 1:
              current = enumerator.Current;
              num1 = -956705900;
              continue;
            case 2:
              num1 = -1616803637;
              continue;
            case 4:
              goto label_8;
            case 5:
              flag = current.Owner() == 0;
              num1 = (int) num2 * 1022950252 ^ 159326219;
              continue;
            case 6:
              int num3 = flag ? -2106697428 : (num3 = -1197372167);
              num1 = num3 ^ (int) num2 * 275911960;
              continue;
            case 7:
              num1 = -1349846436;
              continue;
            case 8:
              num1 = (int) num2 * -172212222 ^ 782356953;
              continue;
            default:
              goto label_12;
          }
        }
      }
label_12:
      return planetList;
    }

    public List<Planet> EnemyPlanets()
    {
label_1:
      int num1 = 1502484363;
      List<Planet> planetList1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1605372540)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1025092699 ^ 826405609;
            continue;
          case 2:
            goto label_1;
          case 3:
            planetList1 = new List<Planet>();
            num1 = (int) num2 * 963366664 ^ -336940116;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      using (List<Planet>.Enumerator enumerator = this.planets.GetEnumerator())
      {
label_12:
        int num3 = enumerator.MoveNext() ? 2111075201 : (num3 = 1422640847);
        Planet current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1605372540)) % 10U)
          {
            case 0:
              num3 = (int) num4 * 1508124331 ^ -2080211398;
              continue;
            case 1:
              int num5 = !flag ? 1997234323 : (num5 = 602944672);
              num3 = num5 ^ (int) num4 * 877246727;
              continue;
            case 2:
              goto label_12;
            case 3:
              current = enumerator.Current;
              num3 = 862255274;
              continue;
            case 4:
              num3 = 995755910;
              continue;
            case 5:
              planetList1.Add(current);
              num3 = (int) num4 * -1570740985 ^ 1771761039;
              continue;
            case 6:
              flag = current.Owner() >= 2;
              num3 = (int) num4 * -1742057298 ^ 1030311989;
              continue;
            case 8:
              num3 = 2111075201;
              continue;
            case 9:
              num3 = (int) num4 * 1899926350 ^ 1301650973;
              continue;
            default:
              goto label_18;
          }
        }
      }
label_18:
      List<Planet> planetList2 = planetList1;
label_19:
      int num6 = 1323723107;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ 1605372540)) % 3U)
        {
          case 0:
            goto label_19;
          case 2:
            num6 = (int) num7 * -768758199 ^ -1520502183;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return planetList2;
    }

    public List<Planet> NotMyPlanets()
    {
label_1:
      int num1 = -2120475563;
      List<Planet> planetList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -555249817)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            planetList = new List<Planet>();
            num1 = (int) num2 * -1514088862 ^ -952616530;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      List<Planet>.Enumerator enumerator = this.planets.GetEnumerator();
      try
      {
label_10:
        int num3 = enumerator.MoveNext() ? -1525802702 : (num3 = -1294306460);
        Planet current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -555249817)) % 10U)
          {
            case 0:
              num3 = (int) num4 * 1839555894 ^ -26277456;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -1165790945;
              continue;
            case 2:
              planetList.Add(current);
              num3 = (int) num4 * 1336297231 ^ 688889722;
              continue;
            case 3:
              num3 = -808493509;
              continue;
            case 4:
              int num5 = current.Owner() == 1 ? -1367152804 : (num5 = -809975271);
              num3 = num5 ^ (int) num4 * 99028388;
              continue;
            case 5:
              num3 = (int) num4 * 1883628936 ^ 2075224125;
              continue;
            case 6:
              num3 = (int) num4 * 2125435237 ^ 1879597353;
              continue;
            case 7:
              num3 = -1525802702;
              continue;
            case 8:
              goto label_10;
            default:
              goto label_21;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_17:
        int num6 = -1371490268;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -555249817)) % 3U)
          {
            case 0:
              goto label_17;
            case 2:
              num6 = (int) num7 * 57561270 ^ 1290422432;
              continue;
            default:
              goto label_20;
          }
        }
label_20:;
      }
label_21:
      return planetList;
    }

    public List<Fleet> Fleets()
    {
label_1:
      int num1 = -1000741761;
      List<Fleet> fleetList1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1454656735)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            fleetList1 = new List<Fleet>();
            num1 = (int) num2 * 179055453 ^ -936933302;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (List<Fleet>.Enumerator enumerator = this.fleets.GetEnumerator())
      {
label_11:
        int num3 = !enumerator.MoveNext() ? -259083725 : (num3 = -981494204);
        Fleet current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1454656735)) % 7U)
          {
            case 0:
              num3 = -981494204;
              continue;
            case 2:
              fleetList1.Add(current);
              num3 = (int) num4 * -943992329 ^ 2053480472;
              continue;
            case 3:
              goto label_11;
            case 4:
              num3 = (int) num4 * 811416157 ^ 538880661;
              continue;
            case 5:
              num3 = (int) num4 * 475893139 ^ -2916466;
              continue;
            case 6:
              current = enumerator.Current;
              num3 = -1505940954;
              continue;
            default:
              goto label_14;
          }
        }
      }
label_14:
      List<Fleet> fleetList2 = fleetList1;
label_15:
      int num5 = -1801435504;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num5 ^ -1454656735)) % 3U)
        {
          case 1:
            num5 = (int) num6 * -700793027 ^ -416120535;
            continue;
          case 2:
            goto label_15;
          default:
            goto label_18;
        }
      }
label_18:
      return fleetList2;
    }

    public List<Fleet> MyFleets()
    {
      List<Fleet> fleetList1 = new List<Fleet>();
      List<Fleet>.Enumerator enumerator = this.fleets.GetEnumerator();
      try
      {
label_8:
        int num1 = enumerator.MoveNext() ? 983055816 : (num1 = 1398924366);
        Fleet current;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 945590992)) % 10U)
          {
            case 0:
              num1 = 983055816;
              continue;
            case 1:
              num1 = 323936051;
              continue;
            case 2:
              current = enumerator.Current;
              num1 = 1305205755;
              continue;
            case 3:
              num1 = (int) num2 * -706053330 ^ 1592251842;
              continue;
            case 5:
              goto label_8;
            case 6:
              fleetList1.Add(current);
              num1 = (int) num2 * 575289820 ^ -1975540743;
              continue;
            case 7:
              num1 = (int) num2 * 757579064 ^ -697356099;
              continue;
            case 8:
              int num3 = flag ? -963916941 : (num3 = -251210757);
              num1 = num3 ^ (int) num2 * -1273618499;
              continue;
            case 9:
              flag = current.Owner() == 1;
              num1 = (int) num2 * -1863453478 ^ 801079640;
              continue;
            default:
              goto label_17;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_13:
        int num4 = 524758727;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ 945590992)) % 3U)
          {
            case 0:
              goto label_13;
            case 1:
              num4 = (int) num5 * 1314307400 ^ -1784037992;
              continue;
            default:
              goto label_16;
          }
        }
label_16:;
      }
label_17:
      List<Fleet> fleetList2 = fleetList1;
label_18:
      int num6 = 917243727;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ 945590992)) % 3U)
        {
          case 0:
            goto label_18;
          case 1:
            num6 = (int) num7 * 694038560 ^ 899881619;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return fleetList2;
    }

    public List<Fleet> EnemyFleets()
    {
label_1:
      int num1 = 2029260567;
      List<Fleet> fleetList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 249263064)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -619921561 ^ 1680450489;
            continue;
          case 2:
            goto label_1;
          case 3:
            fleetList = new List<Fleet>();
            num1 = (int) num2 * -425798814 ^ 1031715022;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      List<Fleet>.Enumerator enumerator = this.fleets.GetEnumerator();
      try
      {
label_11:
        int num3 = enumerator.MoveNext() ? 1884739355 : (num3 = 1948298466);
        bool flag;
        Fleet current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 249263064)) % 10U)
          {
            case 0:
              num3 = (int) num4 * 911583570 ^ 679860662;
              continue;
            case 1:
              current = enumerator.Current;
              flag = current.Owner() != 1;
              num3 = 1063734226;
              continue;
            case 2:
              num3 = (int) num4 * 644985416 ^ -1270399989;
              continue;
            case 3:
              num3 = 1884739355;
              continue;
            case 5:
              num3 = (int) num4 * -1820455731 ^ -39738077;
              continue;
            case 6:
              fleetList.Add(current);
              num3 = (int) num4 * 2087613322 ^ 1549256539;
              continue;
            case 7:
              num3 = 1908515433;
              continue;
            case 8:
              int num5 = flag ? -348040128 : (num5 = -1119248907);
              num3 = num5 ^ (int) num4 * -1894540045;
              continue;
            case 9:
              goto label_11;
            default:
              goto label_22;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_18:
        int num6 = 682740384;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ 249263064)) % 3U)
          {
            case 0:
              goto label_18;
            case 2:
              num6 = (int) num7 * -1869662327 ^ -114544078;
              continue;
            default:
              goto label_21;
          }
        }
label_21:;
      }
label_22:
      return fleetList;
    }

    public int Distance(int sourcePlanet, int destinationPlanet)
    {
      Planet planet1 = this.planets[sourcePlanet];
label_1:
      int num1 = 745735511;
      Planet planet2;
      double num2;
      double num3;
      int num4;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num1 ^ 940721742)) % 7U)
        {
          case 0:
            num1 = (int) num5 * 36211578 ^ 1524322436;
            continue;
          case 1:
            num3 = planet1.Y() - planet2.Y();
            num1 = (int) num5 * -1372868000 ^ -1886608729;
            continue;
          case 2:
            num4 = (int) PlanetWars.\u200F‏‌⁯​⁭⁯‎⁬‬⁬‬⁯⁫‏‭⁬⁫‮‍‎‌⁮‎‬⁪⁬‬‌⁫⁭⁯⁫‮‎‪⁪‌⁭⁮‮(PlanetWars.\u202B⁯‬‏⁭‏‏⁪‭‬‍‎⁫⁭‭⁮‭‭⁭⁮⁮‫‍‭⁮‭⁫‫‎⁬‌‪‍⁪⁯⁯‬‭‬‮‮(num2 * num2 + num3 * num3));
            num1 = (int) num5 * -1484772088 ^ -1976504434;
            continue;
          case 3:
            planet2 = this.planets[destinationPlanet];
            num1 = (int) num5 * 1683410092 ^ -700776218;
            continue;
          case 4:
            goto label_1;
          case 5:
            num2 = planet1.X() - planet2.X();
            num1 = (int) num5 * 1371125037 ^ 2089182357;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return num4;
    }

    public void IssueOrder(int sourcePlanet, int destinationPlanet, int numShips)
    {
label_1:
      int num1 = -472943820;
      string command;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1929129207)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 1046267535 ^ 1155542651;
            continue;
          case 1:
            command = PlanetWars.\u202E⁫‭‌‍⁯​⁪‪‭⁫‍‌⁭⁭‭‮‪‌⁫⁪‎‭⁬‬⁮‫⁫⁪⁪‮⁭⁯⁯‭⁯‬‫⁭‮‮(new string[5]
            {
              sourcePlanet.ToString(),
              " ",
              destinationPlanet.ToString(),
              " ",
              numShips.ToString()
            });
            num1 = (int) num2 * -748623435 ^ 45235873;
            continue;
          case 2:
            PlanetWars.\u200C‮‫‮⁭​‌⁪‫⁮‭‏⁮‫‪⁭⁪⁬‭⁭‮‍⁫‫⁭‏‎⁭​⁭‪⁯⁯‏‪‌‬‭‍‍‮(command);
            num1 = (int) num2 * -635000152 ^ 26597982;
            continue;
          case 3:
            this.Debugger.IssueOrder(command);
            num1 = (int) num2 * 110707565 ^ 905687229;
            continue;
          case 4:
            num1 = (int) num2 * 1518693653 ^ -1397520214;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * -742214699 ^ -2042322837;
            continue;
          case 7:
            flag = this.Debugger != null;
            num1 = (int) num2 * 1976071291 ^ 915020173;
            continue;
          case 8:
            int num3 = !flag ? 1047491465 : (num3 = 2101468196);
            num1 = num3 ^ (int) num2 * -881727158;
            continue;
          case 9:
            goto label_3;
          case 10:
            PlanetWars.\u200F‭‌‭⁮‌‬‌​‭‌‫‌‮⁬⁭‍‪​⁮‍⁬‬⁪‏‌⁮⁮⁯⁯⁫⁬‬⁮‍⁯‍‪⁬⁭‮(PlanetWars.\u202B​⁫⁭⁮‭⁬‬⁯⁫‍‌‌‮‌⁫‎‎‮⁭‭‮⁪‫‎​‎⁮⁪‏​‍⁮​‏‎⁮‮⁬⁬‮());
            num1 = (int) num2 * 527286354 ^ 834073690;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    public void IssueOrder(Planet source, Planet dest, int numShips)
    {
label_1:
      int num1 = 1002525471;
      string command;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1476345593)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 297452767 ^ -1241392560;
            continue;
          case 1:
            PlanetWars.\u200C‮‫‮⁭​‌⁪‫⁮‭‏⁮‫‪⁭⁪⁬‭⁭‮‍⁫‫⁭‏‎⁭​⁭‪⁯⁯‏‪‌‬‭‍‍‮(command);
            num1 = (int) num2 * 1560234820 ^ -298867869;
            continue;
          case 2:
            command = PlanetWars.\u202E⁫‭‌‍⁯​⁪‪‭⁫‍‌⁭⁭‭‮‪‌⁫⁪‎‭⁬‬⁮‫⁫⁪⁪‮⁭⁯⁯‭⁯‬‫⁭‮‮(new string[5]
            {
              source.PlanetID().ToString(),
              " ",
              dest.PlanetID().ToString(),
              " ",
              numShips.ToString()
            });
            num1 = (int) num2 * -618504445 ^ -1016451237;
            continue;
          case 3:
            this.Debugger.IssueOrder(command);
            num1 = (int) num2 * 1462500536 ^ 308325250;
            continue;
          case 4:
            int num3 = this.Debugger == null ? -781359485 : (num3 = -1647648337);
            num1 = num3 ^ (int) num2 * 1791494414;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 283579588 ^ -1986771260;
            continue;
          case 7:
            PlanetWars.\u200F‭‌‭⁮‌‬‌​‭‌‫‌‮⁬⁭‍‪​⁮‍⁬‬⁪‏‌⁮⁮⁯⁯⁫⁬‬⁮‍⁯‍‪⁬⁭‮(PlanetWars.\u202B​⁫⁭⁮‭⁬‬⁯⁫‍‌‌‮‌⁫‎‎‮⁭‭‮⁪‫‎​‎⁮⁪‏​‍⁮​‏‎⁮‮⁬⁬‮());
            num1 = (int) num2 * 1529975531 ^ 798855443;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void FinishTurn()
    {
label_1:
      int num1 = -2090617304;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -795788784)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1082266872 ^ 235155288;
            continue;
          case 2:
            this.Debugger.IssueOrder("go");
            num1 = (int) num2 * 2074665003 ^ -695529632;
            continue;
          case 3:
            int num3 = flag ? -1385224718 : (num3 = -1733655596);
            num1 = num3 ^ (int) num2 * 1906580564;
            continue;
          case 4:
            num1 = (int) num2 * -607432189 ^ -1784099057;
            continue;
          case 5:
            goto label_3;
          case 6:
            PlanetWars.\u200F‭‌‭⁮‌‬‌​‭‌‫‌‮⁬⁭‍‪​⁮‍⁬‬⁪‏‌⁮⁮⁯⁯⁫⁬‬⁮‍⁯‍‪⁬⁭‮(PlanetWars.\u202B​⁫⁭⁮‭⁬‬⁯⁫‍‌‌‮‌⁫‎‎‮⁭‭‮⁪‫‎​‎⁮⁪‏​‍⁮​‏‎⁮‮⁬⁬‮());
            num1 = (int) num2 * 1707192404 ^ -680354017;
            continue;
          case 7:
            flag = this.Debugger != null;
            num1 = (int) num2 * 751411573 ^ -1971776004;
            continue;
          case 8:
            PlanetWars.\u200C‮‫‮⁭​‌⁪‫⁮‭‏⁮‫‪⁭⁪⁬‭⁭‮‍⁫‫⁭‏‎⁭​⁭‪⁯⁯‏‪‌‬‭‍‍‮("go");
            num1 = (int) num2 * -1409834897 ^ 1068152050;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public bool IsAlive(int playerID)
    {
      using (List<Planet>.Enumerator enumerator = this.planets.GetEnumerator())
      {
label_8:
        int num1 = enumerator.MoveNext() ? 1182819734 : (num1 = 2078571531);
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1149270730)) % 7U)
          {
            case 0:
              int num3 = !flag ? -1621810470 : (num3 = -1594349889);
              num1 = num3 ^ (int) num2 * 1298371004;
              continue;
            case 1:
              flag = enumerator.Current.Owner() == playerID;
              num1 = 1696222626;
              continue;
            case 2:
              goto label_8;
            case 3:
              num1 = 1182819734;
              continue;
            case 5:
              num1 = 2035539602;
              continue;
            case 6:
              goto label_5;
            default:
              goto label_10;
          }
        }
label_5:
        return true;
      }
label_10:
      using (List<Fleet>.Enumerator enumerator = this.fleets.GetEnumerator())
      {
label_15:
        int num4 = enumerator.MoveNext() ? 1768037615 : (num4 = 367771437);
        Fleet current;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ 1149270730)) % 9U)
          {
            case 0:
              num4 = 1768037615;
              continue;
            case 1:
              goto label_19;
            case 2:
              current = enumerator.Current;
              num4 = 76909510;
              continue;
            case 3:
              num4 = 814772750;
              continue;
            case 5:
              int num6 = current.Owner() == playerID ? 922326247 : (num6 = 1781095931);
              num4 = num6 ^ (int) num5 * 798554781;
              continue;
            case 6:
              goto label_15;
            case 7:
              num4 = (int) num5 * -2043818812 ^ 1379351222;
              continue;
            case 8:
              num4 = (int) num5 * -1138580628 ^ -875618945;
              continue;
            default:
              goto label_22;
          }
        }
label_19:
        return true;
      }
label_22:
      return false;
    }

    public int Winner()
    {
label_1:
      int num1 = 1794608964;
      List<int> intList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 994447125)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1257563007 ^ 1834801490;
            continue;
          case 1:
            intList = new List<int>();
            num1 = (int) num2 * -1963665537 ^ -419433922;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      using (List<Planet>.Enumerator enumerator = this.planets.GetEnumerator())
      {
label_9:
        int num3 = !enumerator.MoveNext() ? 393515565 : (num3 = 1371114607);
        Planet current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 994447125)) % 10U)
          {
            case 0:
              flag = !intList.Contains(current.Owner());
              num3 = (int) num4 * 70481816 ^ 60485958;
              continue;
            case 1:
              int num5 = flag ? -1272805962 : (num5 = -1273519191);
              num3 = num5 ^ (int) num4 * -1220232253;
              continue;
            case 3:
              num3 = (int) num4 * -155734469 ^ -1631107563;
              continue;
            case 4:
              current = enumerator.Current;
              num3 = 474215355;
              continue;
            case 5:
              num3 = 430444827;
              continue;
            case 6:
              goto label_9;
            case 7:
              num3 = 1371114607;
              continue;
            case 8:
              num3 = (int) num4 * -1652571427 ^ -65065542;
              continue;
            case 9:
              intList.Add(current.Owner());
              num3 = (int) num4 * -519522132 ^ -717456730;
              continue;
            default:
              goto label_18;
          }
        }
      }
label_18:
      List<Fleet>.Enumerator enumerator1 = this.fleets.GetEnumerator();
      try
      {
label_25:
        int num6 = !enumerator1.MoveNext() ? 989906141 : (num6 = 188110074);
        Fleet current;
        bool flag;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ 994447125)) % 9U)
          {
            case 0:
              intList.Add(current.Owner());
              num6 = (int) num7 * -204997761 ^ 555579231;
              continue;
            case 1:
              num6 = (int) num7 * -1838477297 ^ 917002049;
              continue;
            case 2:
              num6 = 188110074;
              continue;
            case 3:
              num6 = 983332389;
              continue;
            case 4:
              current = enumerator1.Current;
              num6 = 1048098807;
              continue;
            case 5:
              int num8 = !flag ? -1702763476 : (num8 = -213278814);
              num6 = num8 ^ (int) num7 * -1902028776;
              continue;
            case 6:
              flag = !intList.Contains(current.Owner());
              num6 = (int) num7 * -2013677510 ^ 1368301664;
              continue;
            case 7:
              goto label_25;
            default:
              goto label_34;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_30:
        int num9 = 429717428;
        while (true)
        {
          uint num10;
          switch ((num10 = (uint) (num9 ^ 994447125)) % 3U)
          {
            case 0:
              goto label_30;
            case 1:
              num9 = (int) num10 * -451989828 ^ -2124060962;
              continue;
            default:
              goto label_33;
          }
        }
label_33:;
      }
label_34:
      int count = intList.Count;
label_35:
      int num11 = 117560637;
      int num12;
      while (true)
      {
        uint num13;
        switch ((num13 = (uint) (num11 ^ 994447125)) % 10U)
        {
          case 0:
            goto label_35;
          case 1:
            num11 = (int) num13 * -266669504 ^ -268251280;
            continue;
          case 2:
            num12 = -1;
            num11 = 1893559728;
            continue;
          case 4:
            int num14 = count == 0 ? -1524423450 : (num14 = -423379573);
            num11 = num14 ^ (int) num13 * -1663585064;
            continue;
          case 5:
            num11 = (int) num13 * -1239200020 ^ -1884982821;
            continue;
          case 6:
            num11 = (int) num13 * -1989278604 ^ -793669562;
            continue;
          case 7:
            int num15;
            num11 = num15 = count != 1 ? 1093787086 : (num15 = 814051479);
            continue;
          case 8:
            num12 = intList[0];
            num11 = 90412710;
            continue;
          case 9:
            num12 = 0;
            num11 = 1893559728;
            continue;
          default:
            goto label_45;
        }
      }
label_45:
      return num12;
    }

    public int NumShips(int playerID)
    {
      int num1 = 0;
      using (List<Planet>.Enumerator enumerator = this.planets.GetEnumerator())
      {
label_5:
        int num2 = enumerator.MoveNext() ? 422336153 : (num2 = 317146933);
        Planet current;
        bool flag;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 1048890741)) % 8U)
          {
            case 1:
              num1 += current.NumShips();
              num2 = (int) num3 * 464175230 ^ -1209694267;
              continue;
            case 2:
              int num4 = !flag ? -873332147 : (num4 = -1979826574);
              num2 = num4 ^ (int) num3 * 829633991;
              continue;
            case 3:
              flag = current.Owner() == playerID;
              num2 = (int) num3 * -807925728 ^ 1033417711;
              continue;
            case 4:
              current = enumerator.Current;
              num2 = 713927430;
              continue;
            case 5:
              num2 = 422336153;
              continue;
            case 6:
              num2 = 1801872098;
              continue;
            case 7:
              goto label_5;
            default:
              goto label_11;
          }
        }
      }
label_11:
      using (List<Fleet>.Enumerator enumerator = this.fleets.GetEnumerator())
      {
label_15:
        int num5 = enumerator.MoveNext() ? 140874086 : (num5 = 591973484);
        bool flag;
        Fleet current;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1048890741)) % 11U)
          {
            case 0:
              num5 = 892285622;
              continue;
            case 1:
              num5 = (int) num6 * 1863688619 ^ 807811916;
              continue;
            case 2:
              goto label_15;
            case 3:
              num5 = 140874086;
              continue;
            case 4:
              num5 = (int) num6 * 903086928 ^ -1001154368;
              continue;
            case 5:
              current = enumerator.Current;
              num5 = 1916912687;
              continue;
            case 6:
              int num7 = flag ? -804977568 : (num7 = -1676245535);
              num5 = num7 ^ (int) num6 * 1558569504;
              continue;
            case 8:
              num1 += current.NumShips();
              num5 = (int) num6 * -838612077 ^ -366880767;
              continue;
            case 9:
              num5 = (int) num6 * 31864971 ^ 562005211;
              continue;
            case 10:
              flag = current.Owner() == playerID;
              num5 = (int) num6 * -932893431 ^ 268108159;
              continue;
            default:
              goto label_25;
          }
        }
      }
label_25:
      return num1;
    }

    private int ParseGameState(string s)
    {
label_1:
      int num1 = 1181936361;
      bool flag1;
      int num2;
      int owner1;
      int numShips1;
      int growthRate;
      double x;
      double y;
      Planet planet;
      string[] strArray1;
      int owner2;
      string[] strArray2;
      int index;
      string str;
      int num3;
      int numShips2;
      int sourcePlanet;
      int destinationPlanet;
      int totalTripLength;
      int turnsRemaining;
      bool flag2;
      bool flag3;
      int gameState;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ 85364472)) % 52U)
        {
          case 0:
            int num5;
            num1 = num5 = !PlanetWars.\u200D‎‫⁪⁬‮⁪‭‍‏⁯‪⁮‬⁫‎⁬‍⁬‎‫‌‏⁫⁭⁫‌‍‮⁬⁮⁫‫‌‬‬‍⁫‏‮(strArray1[0], "P") ? 1543143040 : (num5 = 486327500);
            continue;
          case 1:
            gameState = 0;
            num1 = (int) num4 * 128063620 ^ 1657246644;
            continue;
          case 2:
            gameState = 0;
            num1 = (int) num4 * -1738650324 ^ 1585886570;
            continue;
          case 3:
            x = double.Parse(strArray1[1]);
            num1 = 1849461001;
            continue;
          case 5:
            num1 = (int) num4 * 1394787039 ^ 1994891530;
            continue;
          case 6:
            int num6 = !flag2 ? -326339374 : (num6 = -1537351650);
            num1 = num6 ^ (int) num4 * -1736865131;
            continue;
          case 7:
            owner1 = int.Parse(strArray1[3]);
            numShips1 = int.Parse(strArray1[4]);
            num1 = (int) num4 * -1123031342 ^ 1153034979;
            continue;
          case 8:
            num1 = 1095707842;
            continue;
          case 9:
            this.fleets.Add(new Fleet(owner2, numShips2, sourcePlanet, destinationPlanet, totalTripLength, turnsRemaining));
            num1 = (int) num4 * 1543922326 ^ 1491096216;
            continue;
          case 10:
            int num7 = flag1 ? -1936473036 : (num7 = -1480797049);
            num1 = num7 ^ (int) num4 * -254837772;
            continue;
          case 11:
            num1 = (int) num4 * -1832175888 ^ 1214153406;
            continue;
          case 12:
            int num8 = strArray1.Length == 6 ? -1947131845 : (num8 = -307281687);
            num1 = num8 ^ (int) num4 * -1138528920;
            continue;
          case 13:
            int num9 = flag3 ? -54181802 : (num9 = -976498987);
            num1 = num9 ^ (int) num4 * 42326520;
            continue;
          case 14:
            num1 = (int) num4 * -1662212393 ^ 87751122;
            continue;
          case 15:
            str = PlanetWars.\u200C⁬‫⁬‎‪⁬⁯‭⁯‎⁬‪⁯‫⁪‏‭⁭⁬⁫‌‏‬‎⁯‮‫⁬⁪‫⁯‮‍‏‏⁯‮⁫‪‮(str, 0, num3);
            num1 = (int) num4 * 712082054 ^ -748004369;
            continue;
          case 16:
            flag1 = index < strArray2.Length;
            num1 = 737708898;
            continue;
          case 17:
            y = double.Parse(strArray1[2]);
            num1 = (int) num4 * -427858248 ^ 807402011;
            continue;
          case 18:
            str = strArray2[index];
            num3 = PlanetWars.\u200B‪‍⁭‮‫⁮‍‫⁪‎‮‪⁬‌​⁬‬⁯​‮⁬⁭⁯⁬‮⁯‭‌‬‎⁫⁮‫‪⁫⁬⁭‌‌‮(str, '#');
            flag3 = num3 >= 0;
            num1 = (int) num4 * 1944923970 ^ 1598696473;
            continue;
          case 19:
            this.fleets.Clear();
            num2 = 0;
            num1 = (int) num4 * 1332179134 ^ 942924232;
            continue;
          case 20:
            num1 = (int) num4 * 1220319355 ^ -970562325;
            continue;
          case 21:
            planet = new Planet(num2++, owner1, numShips1, growthRate, x, y);
            num1 = (int) num4 * -51391480 ^ 388124567;
            continue;
          case 22:
            num1 = (int) num4 * -76342604 ^ 1017542523;
            continue;
          case 23:
            gameState = 1;
            num1 = (int) num4 * -711420757 ^ 320731522;
            continue;
          case 24:
            totalTripLength = int.Parse(strArray1[5]);
            num1 = (int) num4 * -1068705001 ^ -424862173;
            continue;
          case 25:
            growthRate = int.Parse(strArray1[5]);
            num1 = (int) num4 * -1536553696 ^ -688617739;
            continue;
          case 26:
            strArray2 = PlanetWars.\u202A‍​‌‫‪⁭‏‎⁫‭⁪⁪⁮‪‍​⁬⁬‪⁪‌‭⁫‍⁯‌‎‏​‬‬‌‎⁫⁬‏‬‪‌‮(s, new char[1]
            {
              '\n'
            });
            index = 0;
            num1 = (int) num4 * 1898242636 ^ -1479422728;
            continue;
          case 27:
            destinationPlanet = int.Parse(strArray1[4]);
            num1 = (int) num4 * 107432929 ^ -1502059933;
            continue;
          case 28:
            num1 = (int) num4 * 958059077 ^ 1137961124;
            continue;
          case 29:
            owner2 = int.Parse(strArray1[1]);
            num1 = 1994728232;
            continue;
          case 30:
            int num10 = strArray1.Length != 7 ? 424159088 : (num10 = 2114509161);
            num1 = num10 ^ (int) num4 * 589810056;
            continue;
          case 31:
            num1 = (int) num4 * -414607913 ^ 1512408749;
            continue;
          case 32:
            num1 = (int) num4 * -896764748 ^ 1774993644;
            continue;
          case 33:
            num1 = (int) num4 * 545834922 ^ 2080546848;
            continue;
          case 34:
            num1 = (int) num4 * -1659843581 ^ -173279172;
            continue;
          case 35:
            gameState = 0;
            num1 = (int) num4 * 692795616 ^ 746479242;
            continue;
          case 36:
            flag2 = strArray1.Length == 0;
            num1 = (int) num4 * 1258481051 ^ 1096062290;
            continue;
          case 37:
            num1 = 885994255;
            continue;
          case 38:
            num1 = (int) num4 * 543411834 ^ 2686792;
            continue;
          case 39:
            goto label_1;
          case 40:
            int num11;
            num1 = num11 = PlanetWars.\u200D‎‫⁪⁬‮⁪‭‍‏⁯‪⁮‬⁫‎⁬‍⁬‎‫‌‏⁫⁭⁫‌‍‮⁬⁮⁫‫‌‬‬‍⁫‏‮(strArray1[0], "F") ? 1041650 : (num11 = 2140686989);
            continue;
          case 41:
            int num12;
            num1 = num12 = PlanetWars.\u206E‍‪⁪‫‭​​​​‌‎‎⁪‎‭⁬⁭⁯⁯⁫⁭‬‬⁮‪‬⁯⁯⁯⁫‎⁭‫⁯‪‍‭‎‪‮(PlanetWars.\u206D‌⁭‪‬‍‌‪⁮​⁬‬⁭⁪‎‮‏⁪‪‭⁪‭⁫⁮⁪⁮​⁯⁮⁮‌⁬⁬‭⁮‫‏‮⁬⁫‮(str)) == 0 ? 1747056382 : (num12 = 87020931);
            continue;
          case 42:
            num1 = (int) num4 * -343864948 ^ 942118730;
            continue;
          case 43:
            this.planets.Add(planet);
            num1 = (int) num4 * 148897548 ^ 542864413;
            continue;
          case 44:
            num1 = (int) num4 * -1228253652 ^ 901036349;
            continue;
          case 45:
            num1 = (int) num4 * -1669165435 ^ -1479981713;
            continue;
          case 46:
            num1 = 1543555118;
            continue;
          case 47:
            strArray1 = PlanetWars.\u202A‍​‌‫‪⁭‏‎⁫‭⁪⁪⁮‪‍​⁬⁬‪⁪‌‭⁫‍⁯‌‎‏​‬‬‌‎⁫⁬‏‬‪‌‮(str, new char[1]
            {
              ' '
            });
            num1 = 403769296;
            continue;
          case 48:
            numShips2 = int.Parse(strArray1[2]);
            sourcePlanet = int.Parse(strArray1[3]);
            num1 = (int) num4 * -1654483608 ^ 1110552291;
            continue;
          case 49:
            this.planets.Clear();
            num1 = (int) num4 * 1648230801 ^ 55662418;
            continue;
          case 50:
            ++index;
            num1 = 2072918848;
            continue;
          case 51:
            turnsRemaining = int.Parse(strArray1[6]);
            num1 = (int) num4 * 328167803 ^ 1303532164;
            continue;
          default:
            goto label_53;
        }
      }
label_53:
      return gameState;
    }

    public int Production(int playerID)
    {
      int num1 = 0;
      List<Planet>.Enumerator enumerator = this.planets.GetEnumerator();
      try
      {
label_6:
        int num2 = !enumerator.MoveNext() ? 1925621988 : (num2 = 522979824);
        Planet current;
        bool flag;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 1110694167)) % 10U)
          {
            case 0:
              num1 += current.GrowthRate();
              num2 = (int) num3 * -1275430210 ^ 367085192;
              continue;
            case 1:
              num2 = (int) num3 * -733895952 ^ 545033789;
              continue;
            case 2:
              goto label_6;
            case 3:
              current = enumerator.Current;
              num2 = 1355304806;
              continue;
            case 4:
              num2 = 1627506613;
              continue;
            case 5:
              num2 = (int) num3 * 735959275 ^ -953555204;
              continue;
            case 6:
              num2 = 522979824;
              continue;
            case 7:
              flag = current.Owner() == playerID;
              num2 = (int) num3 * -267758621 ^ 1986194074;
              continue;
            case 8:
              int num4 = flag ? 134711246 : (num4 = 160610631);
              num2 = num4 ^ (int) num3 * 512679099;
              continue;
            default:
              goto label_17;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_13:
        int num5 = 2004565519;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1110694167)) % 3U)
          {
            case 0:
              goto label_13;
            case 2:
              num5 = (int) num6 * 1152761956 ^ 1436545543;
              continue;
            default:
              goto label_16;
          }
        }
label_16:;
      }
label_17:
      int num7 = num1;
label_18:
      int num8 = 454785191;
      while (true)
      {
        uint num9;
        switch ((num9 = (uint) (num8 ^ 1110694167)) % 3U)
        {
          case 1:
            num8 = (int) num9 * 16858826 ^ -182372385;
            continue;
          case 2:
            goto label_18;
          default:
            goto label_21;
        }
      }
label_21:
      return num7;
    }

    static double \u202B⁯‬‏⁭‏‏⁪‭‬‍‎⁫⁭‭⁮‭‭⁭⁮⁮‫‍‭⁮‭⁫‫‎⁬‌‪‍⁪⁯⁯‬‭‬‮‮([In] double obj0) => Math.Sqrt(obj0);

    static double \u200F‏‌⁯​⁭⁯‎⁬‬⁬‬⁯⁫‏‭⁬⁫‮‍‎‌⁮‎‬⁪⁬‬‌⁫⁭⁯⁫‮‎‪⁪‌⁭⁮‮([In] double obj0) => Math.Ceiling(obj0);

    static string \u202E⁫‭‌‍⁯​⁪‪‭⁫‍‌⁭⁭‭‮‪‌⁫⁪‎‭⁬‬⁮‫⁫⁪⁪‮⁭⁯⁯‭⁯‬‫⁭‮‮([In] string[] obj0) => string.Concat(obj0);

    static void \u200C‮‫‮⁭​‌⁪‫⁮‭‏⁮‫‪⁭⁪⁬‭⁭‮‍⁫‫⁭‏‎⁭​⁭‪⁯⁯‏‪‌‬‭‍‍‮([In] string obj0) => Console.WriteLine(obj0);

    static TextWriter \u202B​⁫⁭⁮‭⁬‬⁯⁫‍‌‌‮‌⁫‎‎‮⁭‭‮⁪‫‎​‎⁮⁪‏​‍⁮​‏‎⁮‮⁬⁬‮() => Console.Out;

    static void \u200F‭‌‭⁮‌‬‌​‭‌‫‌‮⁬⁭‍‪​⁮‍⁬‬⁪‏‌⁮⁮⁯⁯⁫⁬‬⁮‍⁯‍‪⁬⁭‮([In] TextWriter obj0) => obj0.Flush();

    static string[] \u202A‍​‌‫‪⁭‏‎⁫‭⁪⁪⁮‪‍​⁬⁬‪⁪‌‭⁫‍⁯‌‎‏​‬‬‌‎⁫⁬‏‬‪‌‮([In] string obj0, [In] char[] obj1) => obj0.Split(obj1);

    static int \u200B‪‍⁭‮‫⁮‍‫⁪‎‮‪⁬‌​⁬‬⁯​‮⁬⁭⁯⁬‮⁯‭‌‬‎⁫⁮‫‪⁫⁬⁭‌‌‮([In] string obj0, [In] char obj1) => obj0.IndexOf(obj1);

    static string \u200C⁬‫⁬‎‪⁬⁯‭⁯‎⁬‪⁯‫⁪‏‭⁭⁬⁫‌‏‬‎⁯‮‫⁬⁪‫⁯‮‍‏‏⁯‮⁫‪‮([In] string obj0, [In] int obj1, [In] int obj2) => obj0.Substring(obj1, obj2);

    static string \u206D‌⁭‪‬‍‌‪⁮​⁬‬⁭⁪‎‮‏⁪‪‭⁪‭⁫⁮⁪⁮​⁯⁮⁮‌⁬⁬‭⁮‫‏‮⁬⁫‮([In] string obj0) => obj0.Trim();

    static int \u206E‍‪⁪‫‭​​​​‌‎‎⁪‎‭⁬⁭⁯⁯⁫⁭‬‬⁮‪‬⁯⁯⁯⁫‎⁭‫⁯‪‍‭‎‪‮([In] string obj0) => obj0.Length;

    static bool \u200D‎‫⁪⁬‮⁪‭‍‏⁯‪⁮‬⁫‎⁬‍⁬‎‫‌‏⁫⁭⁫‌‍‮⁬⁮⁫‫‌‬‬‍⁫‏‮([In] string obj0, [In] string obj1) => obj0.Equals(obj1);
  }
}
