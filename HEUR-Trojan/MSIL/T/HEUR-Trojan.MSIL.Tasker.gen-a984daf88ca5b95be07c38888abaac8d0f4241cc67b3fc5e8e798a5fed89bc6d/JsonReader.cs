// Decompiled with JetBrains decompiler
// Type: JsonReader
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.Globalization;
using System.IO;
using System.Text;

public sealed class JsonReader
{
  private TextScanner scanner;

  private JsonReader(TextReader reader) => this.scanner = new TextScanner(reader);

  private string ReadJsonKey() => this.ReadString();

  private JsonValue ReadJsonValue()
  {
    this.scanner.SkipWhitespace();
    char c = this.scanner.Peek();
    if (char.IsNumber(c))
      return this.ReadNumber();
    switch (c)
    {
      case '"':
        return (JsonValue) this.ReadString();
      case '-':
        return this.ReadNumber();
      case '[':
        return (JsonValue) this.ReadArray();
      case 'f':
      case 't':
        return this.ReadBoolean();
      case 'n':
        return this.ReadNull();
      case '{':
        return (JsonValue) this.ReadObject();
      default:
        throw new JsonParseException(JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.scanner.Position);
    }
  }

  private JsonValue ReadNull()
  {
    this.scanner.Assert("null");
    return JsonValue.Null;
  }

  private JsonValue ReadBoolean()
  {
    switch (this.scanner.Peek())
    {
      case 'f':
        this.scanner.Assert("false");
        return (JsonValue) new bool?(false);
      case 't':
        this.scanner.Assert("true");
        return (JsonValue) new bool?(true);
      default:
        throw new JsonParseException(JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.scanner.Position);
    }
  }

  private void ReadDigits(StringBuilder builder)
  {
    while (this.scanner.CanRead && char.IsDigit(this.scanner.Peek()))
      builder.Append(this.scanner.Read());
  }

  private JsonValue ReadNumber()
  {
    StringBuilder builder = new StringBuilder();
    if (this.scanner.Peek() == '-')
      builder.Append(this.scanner.Read());
    if (this.scanner.Peek() == '0')
      builder.Append(this.scanner.Read());
    else
      this.ReadDigits(builder);
    if (this.scanner.CanRead && this.scanner.Peek() == '.')
    {
      builder.Append(this.scanner.Read());
      this.ReadDigits(builder);
    }
    if (this.scanner.CanRead && char.ToLowerInvariant(this.scanner.Peek()) == 'e')
    {
      builder.Append(this.scanner.Read());
      switch (this.scanner.Peek())
      {
        case '+':
        case '-':
          builder.Append(this.scanner.Read());
          break;
      }
      this.ReadDigits(builder);
    }
    return (JsonValue) new double?(double.Parse(builder.ToString(), (IFormatProvider) CultureInfo.InvariantCulture));
  }

  private string ReadString()
  {
    StringBuilder stringBuilder = new StringBuilder();
    this.scanner.Assert('"');
    while (true)
    {
      char ch = this.scanner.Read();
      switch (ch)
      {
        case '"':
          goto label_14;
        case '\\':
          char c = this.scanner.Read();
          switch (char.ToLower(c))
          {
            case '"':
            case '/':
            case '\\':
              stringBuilder.Append(c);
              continue;
            case 'b':
              stringBuilder.Append('\b');
              continue;
            case 'f':
              stringBuilder.Append('\f');
              continue;
            case 'n':
              stringBuilder.Append('\n');
              continue;
            case 'r':
              stringBuilder.Append('\r');
              continue;
            case 't':
              stringBuilder.Append('\t');
              continue;
            case 'u':
              stringBuilder.Append(this.ReadUnicodeLiteral());
              continue;
            default:
              goto label_10;
          }
        default:
          if (ch >= ' ')
          {
            stringBuilder.Append(ch);
            continue;
          }
          goto label_12;
      }
    }
label_10:
    throw new JsonParseException(JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.scanner.Position);
label_12:
    throw new JsonParseException(JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.scanner.Position);
label_14:
    return stringBuilder.ToString();
  }

  private int ReadHexDigit()
  {
    switch (char.ToUpper(this.scanner.Read()))
    {
      case '0':
        return 0;
      case '1':
        return 1;
      case '2':
        return 2;
      case '3':
        return 3;
      case '4':
        return 4;
      case '5':
        return 5;
      case '6':
        return 6;
      case '7':
        return 7;
      case '8':
        return 8;
      case '9':
        return 9;
      case 'A':
        return 10;
      case 'B':
        return 11;
      case 'C':
        return 12;
      case 'D':
        return 13;
      case 'E':
        return 14;
      case 'F':
        return 15;
      default:
        throw new JsonParseException(JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.scanner.Position);
    }
  }

  private char ReadUnicodeLiteral() => (char) (this.ReadHexDigit() * 4096 + this.ReadHexDigit() * 256 + this.ReadHexDigit() * 16 + this.ReadHexDigit());

  private JsonObject ReadObject() => this.ReadObject(new JsonObject());

  private JsonObject ReadObject(JsonObject jsonObject)
  {
    this.scanner.Assert('{');
    this.scanner.SkipWhitespace();
    if (this.scanner.Peek() == '}')
    {
      int num = (int) this.scanner.Read();
    }
    else
    {
label_2:
      this.scanner.SkipWhitespace();
      string key = this.ReadJsonKey();
      if (jsonObject.ContainsKey(key))
        throw new JsonParseException(JsonParseException.ErrorType.DuplicateObjectKeys, this.scanner.Position);
      this.scanner.SkipWhitespace();
      this.scanner.Assert(':');
      this.scanner.SkipWhitespace();
      JsonValue jsonValue = this.ReadJsonValue();
      jsonObject.Add(key, jsonValue);
      this.scanner.SkipWhitespace();
      switch (this.scanner.Read())
      {
        case ',':
          goto label_2;
        case '}':
          break;
        default:
          throw new JsonParseException(JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.scanner.Position);
      }
    }
    return jsonObject;
  }

  private JsonArray ReadArray() => this.ReadArray(new JsonArray());

  private JsonArray ReadArray(JsonArray jsonArray)
  {
    this.scanner.Assert('[');
    this.scanner.SkipWhitespace();
    if (this.scanner.Peek() == ']')
    {
      int num = (int) this.scanner.Read();
    }
    else
    {
      char ch;
      do
      {
        this.scanner.SkipWhitespace();
        JsonValue jsonValue = this.ReadJsonValue();
        jsonArray.Add(jsonValue);
        this.scanner.SkipWhitespace();
        ch = this.scanner.Read();
        if (ch == ']')
          goto label_5;
      }
      while (ch == ',');
      throw new JsonParseException(JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.scanner.Position);
    }
label_5:
    return jsonArray;
  }

  private JsonValue Parse()
  {
    this.scanner.SkipWhitespace();
    return this.ReadJsonValue();
  }

  public static JsonValue Parse(TextReader reader) => reader != null ? new JsonReader(reader).Parse() : throw new ArgumentNullException(nameof (reader));

  public static JsonValue Parse(string source)
  {
    if (source == null)
      throw new ArgumentNullException(nameof (source));
    using (StringReader reader = new StringReader(source))
      return new JsonReader((TextReader) reader).Parse();
  }

  public static JsonValue ParseFile(string path)
  {
    if (path == null)
      throw new ArgumentNullException(nameof (path));
    using (StreamReader reader = new StreamReader(path))
      return new JsonReader((TextReader) reader).Parse();
  }
}
