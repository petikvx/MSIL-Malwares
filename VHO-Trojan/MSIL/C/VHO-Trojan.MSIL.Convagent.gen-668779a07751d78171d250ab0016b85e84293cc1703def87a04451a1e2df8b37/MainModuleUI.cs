// Decompiled with JetBrains decompiler
// Type: ModuleNameSpace.MainModuleUI
// Assembly: installer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE36CCF7-21FD-4261-9C31-8B7F15D1A5A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\VHO-Trojan.MSIL.Convagent.gen-668779a07751d78171d250ab0016b85e84293cc1703def87a04451a1e2df8b37.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Management.Automation;
using System.Management.Automation.Host;
using System.Reflection;
using System.Security;
using System.Windows.Forms;

namespace ModuleNameSpace
{
  internal class MainModuleUI : PSHostUserInterface
  {
    private MainModuleRawUI rawUI;
    public ConsoleColor ErrorForegroundColor = ConsoleColor.Red;
    public ConsoleColor ErrorBackgroundColor;
    public ConsoleColor WarningForegroundColor = ConsoleColor.Yellow;
    public ConsoleColor WarningBackgroundColor;
    public ConsoleColor DebugForegroundColor = ConsoleColor.Yellow;
    public ConsoleColor DebugBackgroundColor;
    public ConsoleColor VerboseForegroundColor = ConsoleColor.Yellow;
    public ConsoleColor VerboseBackgroundColor;
    public ConsoleColor ProgressForegroundColor = ConsoleColor.DarkCyan;
    public ConsoleColor ProgressBackgroundColor = ConsoleColor.DarkCyan;
    private string ib_caption;
    private string ib_message;
    public Progress_Form pf;

    public MainModuleUI() => this.rawUI = new MainModuleRawUI();

    public override Dictionary<string, PSObject> Prompt(
      string caption,
      string message,
      Collection<FieldDescription> descriptions)
    {
      if (!string.IsNullOrEmpty(caption) || !string.IsNullOrEmpty(message))
      {
        string caption1 = AppDomain.CurrentDomain.FriendlyName;
        string text = "";
        if (!string.IsNullOrEmpty(caption))
          caption1 = caption;
        if (!string.IsNullOrEmpty(message))
          text = message;
        int num = (int) MessageBox.Show(text, caption1);
      }
      this.ib_caption = "";
      this.ib_message = "";
      Dictionary<string, PSObject> dictionary = new Dictionary<string, PSObject>();
      foreach (FieldDescription description in descriptions)
      {
        System.Type conversionType = !string.IsNullOrEmpty(description.ParameterAssemblyFullName) ? System.Type.GetType(description.ParameterAssemblyFullName) : typeof (string);
        if (conversionType.IsArray)
        {
          System.Type elementType = conversionType.GetElementType();
          System.Type type = System.Type.GetType("System.Collections.Generic.List" + '`'.ToString() + "1").MakeGenericType(elementType);
          object target = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.CreateInstance, (Binder) null, System.Type.EmptyTypes, (ParameterModifier[]) null).Invoke((object[]) null);
          int num = 0;
          while (true)
          {
            try
            {
              if (!string.IsNullOrEmpty(description.Name))
                this.ib_message = string.Format("{0}[{1}]: ", (object) description.Name, (object) num);
              string str = this.ReadLine();
              if (!string.IsNullOrEmpty(str))
              {
                object obj = Convert.ChangeType((object) str, elementType);
                type.InvokeMember("Add", BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod, (Binder) null, target, new object[1]
                {
                  obj
                });
              }
              else
                break;
            }
            catch (Exception ex)
            {
              throw ex;
            }
            ++num;
          }
          Array array = (Array) type.InvokeMember("ToArray", BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod, (Binder) null, target, (object[]) null);
          dictionary.Add(description.Name, new PSObject((object) array));
        }
        else
        {
          object obj = (object) null;
          try
          {
            if (conversionType != typeof (SecureString))
            {
              if (conversionType != typeof (PSCredential))
              {
                if (!string.IsNullOrEmpty(description.Name))
                  this.ib_message = string.Format("{0}: ", (object) description.Name);
                if (!string.IsNullOrEmpty(description.HelpMessage))
                  this.ib_message += "\n(Type !? for help.)";
                string str;
                do
                {
                  str = this.ReadLine();
                  if (str == "!?")
                  {
                    this.WriteLine(description.HelpMessage);
                  }
                  else
                  {
                    if (string.IsNullOrEmpty(str))
                      obj = (object) description.DefaultValue;
                    if (obj == null)
                    {
                      try
                      {
                        obj = Convert.ChangeType((object) str, conversionType);
                      }
                      catch
                      {
                        this.Write("Wrong format, please repeat input: ");
                        str = "!?";
                      }
                    }
                  }
                }
                while (str == "!?");
              }
              else
                obj = (object) this.PromptForCredential("", "", "", "");
            }
            else
            {
              if (!string.IsNullOrEmpty(description.Name))
                this.ib_message = string.Format("{0}: ", (object) description.Name);
              obj = (object) this.ReadLineAsSecureString();
            }
            dictionary.Add(description.Name, new PSObject(obj));
          }
          catch (Exception ex)
          {
            throw ex;
          }
        }
      }
      this.ib_caption = "";
      this.ib_message = "";
      return dictionary;
    }

    public override int PromptForChoice(
      string caption,
      string message,
      Collection<ChoiceDescription> choices,
      int defaultChoice)
    {
      int num = Choice_Box.Show(choices, defaultChoice, caption, message);
      if (num == -1)
        num = defaultChoice;
      return num;
    }

    public override PSCredential PromptForCredential(
      string caption,
      string message,
      string userName,
      string targetName,
      PSCredentialTypes allowedCredentialTypes,
      PSCredentialUIOptions options)
    {
      Credential_Form.User_Pwd userPwd = Credential_Form.PromptForPassword(caption, message, targetName, userName, allowedCredentialTypes, options);
      if (userPwd == null)
        return (PSCredential) null;
      SecureString password = new SecureString();
      foreach (char c in userPwd.Password.ToCharArray())
        password.AppendChar(c);
      return new PSCredential(userPwd.User, password);
    }

    public override PSCredential PromptForCredential(
      string caption,
      string message,
      string userName,
      string targetName)
    {
      Credential_Form.User_Pwd userPwd = Credential_Form.PromptForPassword(caption, message, targetName, userName, PSCredentialTypes.Default, PSCredentialUIOptions.Default);
      if (userPwd == null)
        return (PSCredential) null;
      SecureString password = new SecureString();
      foreach (char c in userPwd.Password.ToCharArray())
        password.AppendChar(c);
      return new PSCredential(userPwd.User, password);
    }

    public override PSHostRawUserInterface RawUI => (PSHostRawUserInterface) this.rawUI;

    public override string ReadLine()
    {
      string strVal = "";
      return Input_Box.Show(this.ib_caption, this.ib_message, ref strVal) == DialogResult.OK ? strVal : "";
    }

    private SecureString getPassword()
    {
      SecureString password = new SecureString();
      while (true)
      {
        ConsoleKeyInfo consoleKeyInfo;
        do
        {
          consoleKeyInfo = Console.ReadKey(true);
          if (consoleKeyInfo.Key == ConsoleKey.Enter)
          {
            Console.WriteLine();
            return password;
          }
          if (consoleKeyInfo.Key == ConsoleKey.Backspace)
          {
            if (password.Length > 0)
            {
              password.RemoveAt(password.Length - 1);
              Console.Write("\b \b");
            }
          }
        }
        while (consoleKeyInfo.KeyChar == char.MinValue);
        password.AppendChar(consoleKeyInfo.KeyChar);
        Console.Write("*");
      }
    }

    public override SecureString ReadLineAsSecureString()
    {
      SecureString secureString = new SecureString();
      string strVal = "";
      if (Input_Box.Show(this.ib_caption, this.ib_message, ref strVal, true) == DialogResult.OK)
      {
        foreach (char c in strVal)
          secureString.AppendChar(c);
      }
      return secureString;
    }

    public override void Write(
      ConsoleColor foregroundColor,
      ConsoleColor backgroundColor,
      string value)
    {
    }

    public override void Write(string value)
    {
    }

    public override void WriteDebugLine(string message)
    {
    }

    public override void WriteErrorLine(string value)
    {
    }

    public override void WriteLine()
    {
    }

    public override void WriteLine(
      ConsoleColor foregroundColor,
      ConsoleColor backgroundColor,
      string value)
    {
    }

    public override void WriteLine(string value)
    {
    }

    public override void WriteProgress(long sourceId, ProgressRecord record)
    {
      if (this.pf == null)
      {
        if (record.RecordType == ProgressRecordType.Completed)
          return;
        this.pf = new Progress_Form(this.ProgressForegroundColor);
        this.pf.Show();
      }
      this.pf.Update(record);
      if (record.RecordType != ProgressRecordType.Completed || this.pf.GetCount() != 0)
        return;
      this.pf = (Progress_Form) null;
    }

    public override void WriteVerboseLine(string message)
    {
    }

    public override void WriteWarningLine(string message)
    {
    }
  }
}
