// Decompiled with JetBrains decompiler
// Type: eg2012.ChannelPlan
// Assembly: SinkStack, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A02AD0B4-EB98-42A4-95E2-E2AB11E6E27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-1dfce723a17d9979985d027a8b4bf09a943153bb9ff23d082b21825c41104f96.exe

using eg2012.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Timers;
using System.Windows.Forms;
using System.Xml.Linq;

namespace eg2012
{
  internal class ChannelPlan
  {
    private XDocument xPlan;
    private List<channelClasses.PlanRule> Rules;
    private List<string> PriorityOrder;
    private channelClasses.ChannelSetup ThisChannel;
    private XElement CurrentRoot;
    private bool SaveFlag;
    private System.Timers.Timer SaveTrigger;

    internal ChannelPlan(channelClasses.ChannelSetup ch)
    {
      this.Rules = new List<channelClasses.PlanRule>();
      this.PriorityOrder = new List<string>();
      this.ThisChannel = ch;
      int num = 0;
      FileInfo fileInfo1 = new FileInfo(this.ThisChannel.PlanLocalFn);
      if (fileInfo1.Exists)
      {
        num = 1;
      }
      else
      {
        try
        {
          if (!fileInfo1.Directory.Exists)
            fileInfo1.Directory.Create();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      FileInfo fileInfo2 = new FileInfo(this.ThisChannel.PlanFn);
      if (fileInfo2.Exists && DateTime.Compare(fileInfo2.LastWriteTimeUtc, fileInfo1.LastWriteTimeUtc) > 0)
        num = 2;
      switch (num)
      {
        case 1:
          this.xPlan = XDocument.Load(this.ThisChannel.PlanLocalFn);
          break;
        case 2:
          this.xPlan = XDocument.Load(this.ThisChannel.PlanFn);
          break;
        default:
          XDocument xdocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), (object[]) null);
          xdocument.Add((object) new XElement(XName.Get("rules", "")));
          this.xPlan = xdocument;
          break;
      }
      this.SaveTrigger = new System.Timers.Timer(30000.0);
      System.Timers.Timer saveTrigger = this.SaveTrigger;
      saveTrigger.SynchronizingObject = (ISynchronizeInvoke) MyProject.Forms.Form1;
      saveTrigger.Enabled = false;
      saveTrigger.AutoReset = false;
      saveTrigger.Elapsed += new ElapsedEventHandler(this.triggerFired);
      if (this.ThisChannel.Virtual)
      {
        this.CurrentRoot = this.xPlan.Root.Elements().Any<XElement>() ? this.xPlan.Elements().First<XElement>() : this.xPlan.Root;
      }
      else
      {
        this.CurrentRoot = this.xPlan.Root;
        this.GetRules();
      }
    }

    private void triggerFired(object sender, ElapsedEventArgs e) => this.SavePlan();

    private void SavePlan()
    {
      FileInfo fileInfo = new FileInfo(this.ThisChannel.PlanLocalFn);
      string str = this.ThisChannel.PlanFn.Replace(".", "_.");
      fileInfo.CopyTo(str, true);
      if (File.Exists(this.ThisChannel.PlanFn))
        File.Delete(this.ThisChannel.PlanFn);
      File.Move(str, this.ThisChannel.PlanFn);
      this.SaveFlag = false;
    }

    internal void SetRoot(string id, ComboBox c)
    {
      if (this.xPlan.Root.Element((XName) id) == null)
      {
        XElement content = new XElement((XName) id);
        content.SetAttributeValue((XName) "next", (object) '1');
        this.xPlan.Root.Add((object) content);
      }
      this.CurrentRoot = this.xPlan.Root.Elements((XName) id).First<XElement>();
      this.Rules.Clear();
      this.PriorityOrder.Clear();
      this.GetRules();
      HashSet<string> stringSet = new HashSet<string>();
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
          stringSet.Add(rule.Value);
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
      c.Items.Clear();
      c.Items.Add((object) string.Empty);
      try
      {
        foreach (string str in stringSet)
          c.Items.Add((object) str);
      }
      finally
      {
        HashSet<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      c.SelectedIndex = 0;
    }

    internal void RemoveRoot(ComboBox c)
    {
      string text = c.Text;
      if (string.IsNullOrWhiteSpace(text))
        return;
      XElement xelement = this.xPlan.Root.Element((XName) text);
      if (xelement != null)
      {
        if (xelement.Elements().Any<XElement>())
          return;
        xelement.Remove();
        this.xPlan.Save(this.ThisChannel.PlanLocalFn);
      }
      if (c.Items.Contains((object) text))
      {
        int num = c.SelectedIndex;
        c.SelectedIndex = -1;
        c.Items.Remove((object) text);
        if (num >= c.Items.Count)
          num = checked (c.Items.Count - 1);
        c.SelectedIndex = num;
      }
    }

    private void GetRules()
    {
      // ISSUE: reference to a compiler-generated method
      IEnumerable<XElement> source = this.CurrentRoot.Elements().Where<XElement>((Func<XElement, bool>) (el => this.OldElem(eg2012.My.InternalXmlHelper.get_AttributeValue(el, XName.Get("date", "")))));
      Func<XElement, XElement> selector;
      // ISSUE: reference to a compiler-generated field
      if (ChannelPlan._Closure\u0024__.\u0024I12\u002D1 != null)
      {
        // ISSUE: reference to a compiler-generated field
        selector = ChannelPlan._Closure\u0024__.\u0024I12\u002D1;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        ChannelPlan._Closure\u0024__.\u0024I12\u002D1 = selector = (Func<XElement, XElement>) (el => el);
      }
      source.Select<XElement, XElement>(selector).Remove<XElement>();
      // ISSUE: reference to a compiler-generated method
      string str1 = eg2012.My.InternalXmlHelper.get_AttributeValue(this.CurrentRoot, XName.Get("order", ""));
      HashSet<string> stringSet1 = new HashSet<string>();
      HashSet<string> stringSet2 = new HashSet<string>();
      if (!string.IsNullOrWhiteSpace(str1))
        this.PriorityOrder = ((IEnumerable<string>) str1.Split(',')).ToList<string>();
      try
      {
        foreach (XElement element in this.CurrentRoot.Elements())
        {
          this.Rules.Add(new channelClasses.PlanRule(element));
          // ISSUE: reference to a compiler-generated method
          stringSet1.Add(eg2012.My.InternalXmlHelper.get_AttributeValue(element, XName.Get("file", "")));
        }
      }
      finally
      {
        IEnumerator<XElement> enumerator;
        enumerator?.Dispose();
      }
      try
      {
        foreach (string str2 in this.PriorityOrder)
        {
          if (!stringSet1.Contains(str2))
            stringSet2.Add(str2);
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (string str3 in stringSet2)
          this.PriorityOrder.Remove(str3);
      }
      finally
      {
        HashSet<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (string str4 in stringSet1)
        {
          if (!this.PriorityOrder.Contains(str4) && !str4.StartsWith("["))
            this.PriorityOrder.Add(str4);
        }
      }
      finally
      {
        HashSet<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      // ISSUE: reference to a compiler-generated method
      eg2012.My.InternalXmlHelper.set_AttributeValue(this.CurrentRoot, XName.Get("order", ""), string.Join(",", (IEnumerable<string>) this.PriorityOrder));
    }

    internal void RootList(ComboBox c)
    {
      c.Items.Clear();
      try
      {
        foreach (XElement element in this.xPlan.Root.Elements())
        {
          if (Operators.CompareString(element.Name.LocalName, "rule", false) != 0)
            c.Items.Add((object) element.Name.LocalName);
        }
      }
      finally
      {
        IEnumerator<XElement> enumerator;
        enumerator?.Dispose();
      }
      if (c.Items.Count <= 0)
        return;
      c.SelectedIndex = 0;
    }

    internal void Check(ListViewItem item)
    {
      this.SetConditions((channelClasses.GuideItem) item.Tag);
      List<string> values = new List<string>();
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
        {
          string str = rule.get_Value(-1);
          if (str.Length > 0)
            values.Add(str);
        }
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (values.Count <= 0)
        return;
      item.SubItems.Add(string.Join(", ", (IEnumerable<string>) values));
      item.BackColor = values.Count <= 1 ? Color.LightGray : Color.Gray;
    }

    internal void RemoveActiveFiles(HashSet<string> fileset)
    {
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
        {
          string str = rule.Value;
          if (str.Length > 0 && fileset.Contains(str))
            fileset.Remove(str);
        }
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    internal HashSet<string> ActiveFiles()
    {
      HashSet<string> stringSet = new HashSet<string>();
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
        {
          string str = rule.Value;
          if (str.Length > 0)
            stringSet.Add(str);
        }
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringSet;
    }

    internal string RuleInfo(string id)
    {
      // ISSUE: variable of a compiler-generated type
      ChannelPlan._Closure\u0024__17\u002D0 closure170_1;
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      ChannelPlan._Closure\u0024__17\u002D0 closure170_2 = new ChannelPlan._Closure\u0024__17\u002D0(closure170_1);
      // ISSUE: reference to a compiler-generated field
      closure170_2.\u0024VB\u0024Local_id = id;
      string empty = string.Empty;
      // ISSUE: reference to a compiler-generated field
      if (string.IsNullOrWhiteSpace(closure170_2.\u0024VB\u0024Local_id))
        return empty;
      // ISSUE: reference to a compiler-generated method
      IEnumerable<channelClasses.PlanRule> source1 = this.Rules.Where<channelClasses.PlanRule>(new Func<channelClasses.PlanRule, bool>(closure170_2._Lambda\u0024__0));
      Func<channelClasses.PlanRule, channelClasses.PlanRule> selector;
      // ISSUE: reference to a compiler-generated field
      if (ChannelPlan._Closure\u0024__.\u0024I17\u002D1 != null)
      {
        // ISSUE: reference to a compiler-generated field
        selector = ChannelPlan._Closure\u0024__.\u0024I17\u002D1;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        ChannelPlan._Closure\u0024__.\u0024I17\u002D1 = selector = (Func<channelClasses.PlanRule, channelClasses.PlanRule>) (rule => rule);
      }
      IEnumerable<channelClasses.PlanRule> source2 = source1.Select<channelClasses.PlanRule, channelClasses.PlanRule>(selector);
      if (!source2.Any<channelClasses.PlanRule>())
        return empty;
      DateTime dateTime1 = DateTime.MaxValue;
      DateTime dateTime2 = DateTime.MinValue;
      try
      {
        foreach (channelClasses.PlanRule planRule in source2)
        {
          // ISSUE: reference to a compiler-generated method
          string[] strArray1 = eg2012.My.InternalXmlHelper.get_AttributeValue(planRule.Source, XName.Get("date", "")).Split('-');
          // ISSUE: reference to a compiler-generated method
          string str = eg2012.My.InternalXmlHelper.get_AttributeValue(planRule.Source, XName.Get("time", ""));
          if (string.IsNullOrWhiteSpace(str))
            str = "6-5";
          string[] strArray2 = str.Split('-');
          DateTime t1_1 = this.datefromstring(strArray1[0], strArray2[0]);
          if (DateTime.Compare(t1_1, dateTime1) < 0)
            dateTime1 = t1_1;
          DateTime t1_2 = this.datefromstring(strArray1[1], strArray2[1]);
          if (DateTime.Compare(t1_2, dateTime2) > 0)
            dateTime2 = t1_2;
        }
      }
      finally
      {
        IEnumerator<channelClasses.PlanRule> enumerator;
        enumerator?.Dispose();
      }
      string str1 = DateTime.Compare(dateTime2, DateAndTime.Now) >= 0 ? (DateTime.Compare(dateTime1, DateAndTime.Now) <= 0 ? "!!!" : ">>>") : "<<<";
      return string.Format("{0}: {1:dd.MM.yy} - {2:dd.MM.yy} ", (object) source2.Count<channelClasses.PlanRule>(), (object) dateTime1, (object) dateTime2) + str1;
    }

    private DateTime datefromstring(string d, string t)
    {
      DateTime result;
      if (DateTime.TryParse(d, out result))
      {
        int num = int.Parse(t);
        if (num < 6)
          checked { num += 24; }
        result = result.AddHours((double) num);
      }
      return result;
    }

    internal void Fill()
    {
      MyProject.Forms.Dialog1.lRules.Items.Clear();
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
          this.GetEditor(rule);
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.Dialog();
    }

    internal void Fill(string id)
    {
      // ISSUE: variable of a compiler-generated type
      ChannelPlan._Closure\u0024__20\u002D0 closure200_1;
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      ChannelPlan._Closure\u0024__20\u002D0 closure200_2 = new ChannelPlan._Closure\u0024__20\u002D0(closure200_1);
      // ISSUE: reference to a compiler-generated field
      closure200_2.\u0024VB\u0024Local_id = id;
      MyProject.Forms.Dialog1.lRules.Items.Clear();
      try
      {
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated method
        // ISSUE: reference to a compiler-generated field
        IEnumerable<channelClasses.PlanRule> source = this.Rules.Where<channelClasses.PlanRule>(closure200_2.\u0024I0 == null ? (closure200_2.\u0024I0 = new Func<channelClasses.PlanRule, bool>(closure200_2._Lambda\u0024__0)) : closure200_2.\u0024I0);
        Func<channelClasses.PlanRule, channelClasses.PlanRule> selector;
        // ISSUE: reference to a compiler-generated field
        if (ChannelPlan._Closure\u0024__.\u0024I20\u002D1 != null)
        {
          // ISSUE: reference to a compiler-generated field
          selector = ChannelPlan._Closure\u0024__.\u0024I20\u002D1;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          ChannelPlan._Closure\u0024__.\u0024I20\u002D1 = selector = (Func<channelClasses.PlanRule, channelClasses.PlanRule>) (rule => rule);
        }
        foreach (channelClasses.PlanRule r in source.Select<channelClasses.PlanRule, channelClasses.PlanRule>(selector))
          this.GetEditor(r);
      }
      finally
      {
        IEnumerator<channelClasses.PlanRule> enumerator;
        enumerator?.Dispose();
      }
      this.Dialog();
    }

    internal void Fill(DateTime d)
    {
      MyProject.Forms.Dialog1.lRules.Items.Clear();
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
          ;
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.Dialog();
    }

    internal void Fill(ComboBox c, ListView items, bool forceNew)
    {
      List<channelClasses.GuideItem> guideItemList = new List<channelClasses.GuideItem>();
      try
      {
        foreach (ListViewItem selectedItem in items.SelectedItems)
          guideItemList.Add((channelClasses.GuideItem) selectedItem.Tag);
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      this.SetConditions(guideItemList.First<channelClasses.GuideItem>());
      List<string> stringList = new List<string>();
      MyProject.Forms.Dialog1.lRules.Items.Clear();
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
        {
          string str = rule.get_Value(-1);
          if (str.Length > 0)
          {
            this.GetEditor(rule);
            stringList.Add(str);
          }
        }
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (c.Text.Length > 0)
      {
        if (!this.PriorityOrder.Contains(c.Text) && !c.Text.StartsWith("["))
          this.PriorityOrder.Add(c.Text);
        if (!stringList.Contains(c.Text) || forceNew)
          MyProject.Forms.Dialog1.lRules.Items.Add((object) new channelClasses.PlanRuleEditor(this.Create(c.Text, guideItemList), true));
      }
      this.Dialog();
    }

    private void GetEditor(channelClasses.PlanRule r)
    {
      if (!this.PriorityOrder.Contains(r.Value) && !r.Value.StartsWith("["))
        this.PriorityOrder.Add(r.Value);
      MyProject.Forms.Dialog1.lRules.Items.Add((object) new channelClasses.PlanRuleEditor(r, false));
    }

    private void Dialog()
    {
      if (MyProject.Forms.Dialog1.lRules.Items.Count == 0)
        return;
      MyProject.Forms.Dialog1.FillPriority(this.PriorityOrder);
      if (MyProject.Forms.Dialog1.ShowDialog() == DialogResult.OK)
      {
        try
        {
          foreach (channelClasses.PlanRuleEditor planRuleEditor in MyProject.Forms.Dialog1.lRules.Items)
          {
            planRuleEditor.Sync();
            if (planRuleEditor.Register)
            {
              this.Rules.Add(planRuleEditor.Rule);
              this.CurrentRoot.Add((object) planRuleEditor.Rule.Source);
            }
            else if (!planRuleEditor.Rule.Activated)
            {
              try
              {
                planRuleEditor.Rule.Source.Remove();
                if (this.Rules.Contains(planRuleEditor.Rule))
                  this.Rules.Remove(planRuleEditor.Rule);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
          }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        if (this.ThisChannel.Virtual)
        {
          char ch = '1';
          // ISSUE: reference to a compiler-generated method
          if (this.CurrentRoot.Elements().Any<XElement>() && eg2012.My.InternalXmlHelper.get_AttributeValue(this.CurrentRoot.Elements().Last<XElement>(), XName.Get("choose", "")) == null)
            ch = '0';
          // ISSUE: reference to a compiler-generated method
          eg2012.My.InternalXmlHelper.set_AttributeValue(this.CurrentRoot, XName.Get("next", ""), Conversions.ToString(ch));
        }
        else
        {
          try
          {
            foreach (XElement element in this.CurrentRoot.Elements())
            {
              try
              {
                // ISSUE: reference to a compiler-generated method
                // ISSUE: reference to a compiler-generated method
                eg2012.My.InternalXmlHelper.set_AttributeValue(element, XName.Get("dur", ""), this.ThisChannel.BugDur[eg2012.My.InternalXmlHelper.get_AttributeValue(element, XName.Get("file", ""))].ToString());
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
          }
          finally
          {
            IEnumerator<XElement> enumerator;
            enumerator?.Dispose();
          }
          this.FindManualFiles();
        }
        MyProject.Forms.Dialog1.GetPriorities(this.PriorityOrder);
        this.SetPriority();
        this.xPlan.Save(this.ThisChannel.PlanLocalFn);
        this.SaveFlag = true;
        this.SaveTrigger.Stop();
        this.SaveTrigger.Start();
        Form1 form1 = MyProject.Forms.Form1;
        channelClasses.Guide.Fill(((IEnumerable<string>) form1.cDates.Text.Split(' ')).Last<string>(), form1.LstProgr);
      }
    }

    private void FindManualFiles()
    {
      HashSet<string> values = new HashSet<string>();
      try
      {
        foreach (XElement element in this.CurrentRoot.Elements())
        {
          // ISSUE: reference to a compiler-generated method
          string[] source = eg2012.My.InternalXmlHelper.get_AttributeValue(element, XName.Get("slot", "")).Split(',');
          if (((IEnumerable<string>) source).Contains<string>("1") || ((IEnumerable<string>) source).Contains<string>("31"))
          {
            // ISSUE: reference to a compiler-generated method
            string str = eg2012.My.InternalXmlHelper.get_AttributeValue(element, XName.Get("file", ""));
            if (!str.StartsWith("["))
              values.Add(str);
          }
        }
      }
      finally
      {
        IEnumerator<XElement> enumerator;
        enumerator?.Dispose();
      }
      // ISSUE: reference to a compiler-generated method
      eg2012.My.InternalXmlHelper.set_AttributeValue(this.CurrentRoot, XName.Get("manual", ""), string.Join(",", (IEnumerable<string>) values));
    }

    internal channelClasses.PlanRule Create(
      string title,
      List<channelClasses.GuideItem> items)
    {
      DateTime dateTime1 = items.First<channelClasses.GuideItem>().Date_Time;
      DateTime dateTime2 = items.Last<channelClasses.GuideItem>().Date_Time;
      HashSet<string> values = new HashSet<string>();
      try
      {
        foreach (channelClasses.GuideItem guideItem in items)
          values.Add(guideItem.ID);
      }
      finally
      {
        List<channelClasses.GuideItem>.Enumerator enumerator;
        enumerator.Dispose();
      }
      XElement xelement = new XElement(XName.Get("rule", ""));
      // ISSUE: reference to a compiler-generated method
      xelement.Add((object) eg2012.My.InternalXmlHelper.CreateAttribute(XName.Get("pr", ""), (object) string.Join(",", (IEnumerable<string>) values)));
      // ISSUE: reference to a compiler-generated method
      xelement.Add((object) eg2012.My.InternalXmlHelper.CreateAttribute(XName.Get(nameof (title), ""), (object) items.First<channelClasses.GuideItem>().Title));
      xelement.Add((object) new XAttribute(XName.Get("priority", ""), (object) "0"));
      // ISSUE: reference to a compiler-generated method
      xelement.Add((object) eg2012.My.InternalXmlHelper.CreateAttribute(XName.Get("date", ""), (object) channelClasses.PlanRule.DateString(dateTime1, dateTime2)));
      // ISSUE: reference to a compiler-generated method
      xelement.Add((object) eg2012.My.InternalXmlHelper.CreateAttribute(XName.Get("time", ""), (object) channelClasses.PlanRule.TimeString(dateTime1, dateTime2)));
      XElement xRule = xelement;
      if (this.ThisChannel.Virtual)
      {
        // ISSUE: reference to a compiler-generated method
        if (Operators.CompareString(eg2012.My.InternalXmlHelper.get_AttributeValue(this.CurrentRoot, XName.Get("next", "")), "1", false) == 0)
        {
          xRule.SetAttributeValue((XName) "timeselect", (object) "next");
          xRule.SetAttributeValue((XName) "choose", (object) "nextsk");
        }
      }
      else
        xRule.SetAttributeValue((XName) "slot", (object) "38");
      xRule.SetAttributeValue((XName) "file", (object) title);
      xRule.SetAttributeValue((XName) "created", (object) DateAndTime.Now);
      xRule.SetAttributeValue((XName) "modified", (object) DateAndTime.Now);
      return new channelClasses.PlanRule(xRule);
    }

    private void SetConditions(channelClasses.GuideItem guide)
    {
    }

    private bool OldElem(string d)
    {
      if (!d.Contains("-"))
        return false;
      return (DateAndTime.Now.Date - DateTime.Parse(d.Split('-')[1])).TotalDays > 5.0;
    }

    private void SetPriority()
    {
      try
      {
        foreach (channelClasses.PlanRule rule in this.Rules)
        {
          if (string.IsNullOrWhiteSpace(rule.Value) || rule.Value.StartsWith("["))
          {
            // ISSUE: reference to a compiler-generated method
            eg2012.My.InternalXmlHelper.set_AttributeValue(rule.Source, XName.Get("priority", ""), "0");
          }
          else
          {
            if (!this.PriorityOrder.Contains(rule.Value))
              this.PriorityOrder.Add(rule.Value);
            // ISSUE: reference to a compiler-generated method
            eg2012.My.InternalXmlHelper.set_AttributeValue(rule.Source, XName.Get("priority", ""), checked (this.PriorityOrder.IndexOf(rule.Value) + 1).ToString());
          }
        }
      }
      finally
      {
        List<channelClasses.PlanRule>.Enumerator enumerator;
        enumerator.Dispose();
      }
      // ISSUE: reference to a compiler-generated method
      eg2012.My.InternalXmlHelper.set_AttributeValue(this.CurrentRoot, XName.Get("order", ""), string.Join(",", (IEnumerable<string>) this.PriorityOrder));
    }

    ~ChannelPlan()
    {
      // ISSUE: explicit finalizer call
      base.Finalize();
      this.SaveTrigger.Stop();
      if (this.SaveFlag)
        this.SavePlan();
      this.SaveTrigger.Dispose();
    }
  }
}
