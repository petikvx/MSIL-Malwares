// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.WebSocket4Net.Command.BadRequest
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.Models.WebSocket4Net.Command
{
  public class BadRequest : WebSocketCommandBase
  {
    private const string m_WebSocketVersion = "Sec-WebSocket-Version";
    private static readonly string[] m_ValueSeparator = new string[1]
    {
      ", "
    };

    public override void ExecuteCommand(WebSocket session, WebSocketCommandInfo commandInfo)
    {
      Dictionary<string, object> valueContainer = new Dictionary<string, object>((IEqualityComparer<string>) StringComparer.OrdinalIgnoreCase);
      string verbLine = string.Empty;
      commandInfo.Text.ParseMimeHeader((IDictionary<string, object>) valueContainer, out verbLine);
      string str = valueContainer.GetValue<string>("Sec-WebSocket-Version", string.Empty);
      if (!session.NotSpecifiedVersion)
      {
        if (string.IsNullOrEmpty(str))
          session.FireError(new Exception("the server doesn't support the websocket protocol version your client was using"));
        else
          session.FireError(new Exception(string.Format("the server(version: {0}) doesn't support the websocket protocol version your client was using", (object) str)));
        session.CloseWithoutHandshake();
      }
      else if (string.IsNullOrEmpty(str))
      {
        session.FireError(new Exception("unknown server protocol version"));
        session.CloseWithoutHandshake();
      }
      else
      {
        string[] strArray = str.Split(BadRequest.m_ValueSeparator, StringSplitOptions.RemoveEmptyEntries);
        int[] availableVersions = new int[strArray.Length];
        for (int index = 0; index < strArray.Length; ++index)
        {
          int result;
          if (!int.TryParse(strArray[index], out result))
          {
            session.FireError(new Exception("invalid websocket version"));
            session.CloseWithoutHandshake();
            return;
          }
          availableVersions[index] = result;
        }
        if (!session.GetAvailableProcessor(availableVersions))
        {
          session.FireError(new Exception("unknown server protocol version"));
          session.CloseWithoutHandshake();
        }
        else
          session.ProtocolProcessor.SendHandshake(session);
      }
    }

    public override string Name => 400.ToString();
  }
}
