// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.ComAdminWrapper
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal static class ComAdminWrapper
  {
    private const string ListenerWSUName = "ServiceModelInitializer";
    internal const string Wcf30RegistryKey = "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.0\\Setup\\Windows Communication Foundation";
    internal const string Runtime30InstallPathName = "RuntimeInstallPath";
    private const string fileName = "ServiceMonikerSupport.dll";
    private static readonly string ListenerApplicationName = Microsoft.Tools.ServiceModel.SR.GetString("WebServiceAppName");
    private static Assembly ListenerAssembly = typeof (Message).Assembly;
    private static string ListenerComponentDescription = Microsoft.Tools.ServiceModel.SR.GetString("ListenerCompDescription");

    private static bool FindApplication(
      string appidOrName,
      out ICatalogObject targetAppObj,
      out ICatalogCollection appColl)
    {
      targetAppObj = (ICatalogObject) null;
      appColl = (ICatalogCollection) null;
      bool application = false;
      ICatalog2 catalog = ComAdminWrapper.GetCatalog();
      string idForApplication = ComAdminWrapper.GetPartitionIdForApplication(catalog, appidOrName, true);
      if (!string.IsNullOrEmpty(idForApplication))
        ComAdminWrapper.SetCurrentPartition(catalog, idForApplication);
      appColl = (ICatalogCollection) catalog.GetCollection(CollectionName.Applications);
      appColl.Populate();
      for (int lIndex = 0; lIndex < appColl.Count(); ++lIndex)
      {
        ICatalogObject catalogObject = (ICatalogObject) appColl.Item(lIndex);
        string lowerInvariant1 = ((string) catalogObject.Key()).ToLowerInvariant();
        string lowerInvariant2 = ((string) catalogObject.Name()).ToLowerInvariant();
        appidOrName = appidOrName.ToLowerInvariant();
        if (!application)
        {
          if (appidOrName == lowerInvariant1 || appidOrName == lowerInvariant2)
          {
            application = true;
            targetAppObj = catalogObject;
          }
        }
        else if (appidOrName == lowerInvariant1 || appidOrName == lowerInvariant2)
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("AmbiguousApplicationName", (object) appidOrName), (Exception) null);
      }
      return application;
    }

    private static bool FindListener(Guid appid, out Guid clsid, out string progid)
    {
      clsid = Guid.Empty;
      progid = (string) null;
      ICatalogObject targetAppObj = (ICatalogObject) null;
      ICatalogCollection appColl = (ICatalogCollection) null;
      if (!ComAdminWrapper.FindApplication(appid.ToString("B"), out targetAppObj, out appColl))
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) appid.ToString("B")), (Exception) null);
      ICatalogCollection collection = (ICatalogCollection) appColl.GetCollection(CollectionName.Components, targetAppObj.Key());
      collection.Populate();
      for (int lIndex = 0; lIndex < collection.Count(); ++lIndex)
      {
        ICatalogObject compObj = (ICatalogObject) collection.Item(lIndex);
        if (ComAdminWrapper.IsListenerComponent(compObj))
        {
          clsid = new Guid((string) compObj.Key());
          progid = (string) compObj.Name();
          return true;
        }
      }
      return false;
    }

    private static bool SetComponentProperty(
      string appIdOrName,
      string compIdOrName,
      string property,
      object value)
    {
      ICatalogObject targetAppObj = (ICatalogObject) null;
      ICatalogCollection appColl = (ICatalogCollection) null;
      if (!ComAdminWrapper.FindApplication(appIdOrName, out targetAppObj, out appColl))
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) appIdOrName), (Exception) null);
      ICatalogCollection collection = (ICatalogCollection) appColl.GetCollection(CollectionName.Components, targetAppObj.Key());
      collection.Populate();
      compIdOrName = compIdOrName.ToLowerInvariant();
      for (int lIndex = 0; lIndex < collection.Count(); ++lIndex)
      {
        ICatalogObject catalogObject = (ICatalogObject) collection.Item(lIndex);
        string lowerInvariant1 = ((string) catalogObject.Name()).ToLowerInvariant();
        string lowerInvariant2 = ((string) catalogObject.Key()).ToLowerInvariant();
        if (lowerInvariant1 == compIdOrName || lowerInvariant2 == compIdOrName)
        {
          catalogObject.SetValue(property, value);
          collection.SaveChanges();
          return true;
        }
      }
      return false;
    }

    public static ComAdminAppInfo GetAppInfo(string appidOrName)
    {
      ICatalogObject targetAppObj = (ICatalogObject) null;
      ICatalogCollection appColl = (ICatalogCollection) null;
      if (!ComAdminWrapper.FindApplication(appidOrName, out targetAppObj, out appColl))
        return (ComAdminAppInfo) null;
      ComAdminAppInfo appInfo = (ComAdminAppInfo) null;
      try
      {
        appInfo = new ComAdminAppInfo(targetAppObj, appColl);
      }
      catch (COMException ex)
      {
        ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("FailedToFetchApplicationInformationFromCatalog", (object) appidOrName, (object) ex.ErrorCode, (object) ex.Message));
      }
      return appInfo;
    }

    public static Guid[] GetApplicationIds()
    {
      ICatalog2 catalog = ComAdminWrapper.GetCatalog();
      List<Guid> guidList = new List<Guid>();
      ICatalogCollection collection1 = (ICatalogCollection) catalog.GetCollection(CollectionName.Partitions);
      collection1.Populate();
      for (int lIndex1 = 0; lIndex1 < collection1.Count(); ++lIndex1)
      {
        ICatalogObject catalogObject1 = (ICatalogObject) collection1.Item(lIndex1);
        ICatalogCollection collection2 = (ICatalogCollection) collection1.GetCollection(CollectionName.Applications, catalogObject1.Key());
        collection2.Populate();
        for (int lIndex2 = 0; lIndex2 < collection2.Count(); ++lIndex2)
        {
          ICatalogObject catalogObject2 = (ICatalogObject) collection2.Item(lIndex2);
          guidList.Add(new Guid((string) catalogObject2.Key()));
        }
      }
      return guidList.ToArray();
    }

    private static ICatalog2 GetCatalog() => (ICatalog2) new xCatalog();

    public static string GetPartitionIdForApplication(Guid appId) => ComAdminWrapper.GetPartitionIdForApplication(ComAdminWrapper.GetCatalog(), appId.ToString("B"), true);

    public static string GetGlobalPartitionID() => ComAdminWrapper.GetCatalog().GlobalPartitionID();

    private static string GetPartitionIdForApplication(
      ICatalog2 catalog,
      string appId,
      bool notThrow)
    {
      try
      {
        return catalog.GetPartitionID(appId);
      }
      catch (COMException ex)
      {
        if (!notThrow)
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CouldNotGetPartition"), (Exception) ex);
        if (ex.ErrorCode == HR.COMADMIN_E_OBJECT_DOES_NOT_EXIST)
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) appId));
        else
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CouldnotGetPartitionForApplication", (object) appId, (object) ex.ErrorCode, (object) ex.Message));
        return (string) null;
      }
    }

    public static bool GetApplicationBitness(
      ICatalog2 catalog,
      string partitionID,
      string applicationID)
    {
      ICatalogCollection collection1 = (ICatalogCollection) ((ICatalogCollection) catalog.GetCollection(CollectionName.Partitions)).GetCollection(CollectionName.Applications, (object) partitionID);
      collection1.Populate();
      ICatalogCollection collection2 = (ICatalogCollection) collection1.GetCollection(CollectionName.Components, (object) applicationID);
      try
      {
        collection2.Populate();
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw ex;
          default:
            throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("FailedToDetermineTheBitnessOfApplication", (object) applicationID), ex);
        }
      }
      return ComAdminWrapper.IsBitness64bit((ICatalogObject) collection2.Item(0));
    }

    public static string GetAppropriateBitnessModuleModulePath(
      bool is64bit,
      RuntimeVersions runtimeVersion)
    {
      if (RuntimeVersions.V40 == runtimeVersion)
      {
        using (RegistryHandle bitnessHklmSubkey = RegistryHandle.GetCorrectBitnessHKLMSubkey(is64bit, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Client"))
          return bitnessHklmSubkey.GetStringValue("InstallPath").TrimEnd(new char[1]) + "\\ServiceMonikerSupport.dll";
      }
      else
      {
        RegistryHandle regHandle = (RegistryHandle) null;
        try
        {
          if (RegistryHandle.TryGetCorrectBitnessHKLMSubkey(is64bit, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.0\\Setup\\Windows Communication Foundation", out regHandle) == 0)
            return regHandle.GetStringValue("RuntimeInstallPath").TrimEnd(new char[1]) + "\\ServiceMonikerSupport.dll";
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("FailedToGetRegistryKey", (object) "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.0\\Setup\\Windows Communication Foundation", (object) "3.0"), (Exception) null);
        }
        finally
        {
          regHandle?.Dispose();
        }
      }
    }

    public static void CreateTypeLib(string fileName, Guid clsid)
    {
      try
      {
        ICreateTypeLib typeLib = SafeNativeMethods.CreateTypeLib(fileName);
        typeLib.SetGuid(Guid.NewGuid());
        typeLib.SetName("ServiceModelInitializer");
        typeLib.SetDocString("ServiceModelInitializer");
        ICreateTypeInfo typeInfo = typeLib.CreateTypeInfo("ServiceModelInitializer", System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS);
        typeInfo.SetGuid(clsid);
        typeInfo.SetDocString("ServiceModelInitializer");
        ICreateTypeInfo2 createTypeInfo2 = (ICreateTypeInfo2) typeInfo;
        createTypeInfo2.SetName("ServiceModelInitializerComponent");
        createTypeInfo2.SetTypeFlags(2);
        typeInfo.LayOut();
        typeLib.SaveAllChanges();
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw ex;
          default:
            throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("FailedToCreateTypeLibrary"), ex);
        }
      }
    }

    public static void CreateRegistryKey(bool is64bit, Guid clsid, string module)
    {
      using (RegistryHandle bitnessHkcr = RegistryHandle.GetBitnessHKCR(is64bit))
      {
        using (RegistryHandle subKey1 = bitnessHkcr.CreateSubKey("clsid\\" + clsid.ToString("B")))
        {
          subKey1.SetValue("", "ServiceModelInitializer");
          using (RegistryHandle subKey2 = subKey1.CreateSubKey("InprocServer32"))
          {
            subKey2.SetValue("", module);
            subKey2.SetValue("ThreadingModel", "Both");
          }
          using (RegistryHandle subKey3 = subKey1.CreateSubKey("ProgID"))
            subKey3.SetValue("", "ServiceModelInitializer");
        }
      }
    }

    public static bool IsApplicationWow(Guid appid)
    {
      if (IntPtr.Size != 8)
        return false;
      string str = appid.ToString("B");
      ICatalog2 catalog = ComAdminWrapper.GetCatalog();
      string idForApplication = ComAdminWrapper.GetPartitionIdForApplication(catalog, str, false);
      return !ComAdminWrapper.GetApplicationBitness(catalog, idForApplication, str);
    }

    public static void InstallListener(Guid appid, string path, RuntimeVersions runtimeVersion)
    {
      string str1 = appid.ToString("B");
      ICatalog2 catalog = ComAdminWrapper.GetCatalog();
      string idForApplication = ComAdminWrapper.GetPartitionIdForApplication(catalog, str1, false);
      bool applicationBitness = ComAdminWrapper.GetApplicationBitness(catalog, idForApplication, str1);
      Guid clsid = Guid.NewGuid();
      string str2 = clsid.ToString("B");
      string str3 = Path.Combine(path, str1 + "." + str2 + ".tlb");
      try
      {
        AtomicFile.SafeDeleteFile(str3);
        string moduleModulePath = ComAdminWrapper.GetAppropriateBitnessModuleModulePath(applicationBitness, runtimeVersion);
        if (string.IsNullOrEmpty(moduleModulePath))
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindServiceInitializerModuleInRegistry"), (Exception) null);
        ComAdminWrapper.CreateTypeLib(str3, clsid);
        ComAdminWrapper.CreateRegistryKey(applicationBitness, clsid, moduleModulePath);
        catalog.InstallComponent(str1, moduleModulePath, str3, (string) null);
        ComAdminWrapper.MarkComponentAsPrivate(catalog, idForApplication, str1, "ServiceModelInitializer");
        if (!ComAdminWrapper.SetComponentProperty(str1, "ServiceModelInitializer", PropertyName.Description, (object) ComAdminWrapper.ListenerComponentDescription))
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotSetComponentDescription", (object) str2, (object) appid.ToString("B")));
        if (!ComAdminWrapper.SetComponentProperty(str1, "ServiceModelInitializer", PropertyName.InitializesServerApplication, (object) "1"))
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotSetComponentInitializerProperty", (object) "ServiceModelInitializer", (object) appid.ToString("B")));
        if (ComAdminWrapper.SetComponentProperty(str1, "ServiceModelInitializer", PropertyName.ComponentAccessChecksEnabled, (object) "0"))
          return;
        ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotDisableAccessChecksOnInitializer", (object) "ServiceModelInitializer", (object) appid.ToString("B")));
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw ex;
          default:
            throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CouldNotInstallListener"), ex);
        }
      }
      finally
      {
        AtomicFile.SafeDeleteFile(str3);
      }
    }

    private static void MarkComponentAsPrivate(
      ICatalog2 catalog,
      string partitionID,
      string applicationID,
      string progid)
    {
      ICatalogCollection collection1 = (ICatalogCollection) ((ICatalogCollection) catalog.GetCollection(CollectionName.Partitions)).GetCollection(CollectionName.Applications, (object) partitionID);
      collection1.Populate();
      ICatalogCollection collection2 = (ICatalogCollection) collection1.GetCollection(CollectionName.Components, (object) applicationID);
      try
      {
        collection2.Populate();
        for (int lIndex = 0; lIndex < collection2.Count(); ++lIndex)
        {
          ICatalogObject catalogObject = (ICatalogObject) collection2.Item(lIndex);
          if ((string) catalogObject.Name() == progid)
          {
            catalogObject.SetValue(PropertyName.IsPrivateComponent, (object) true);
            collection2.SaveChanges();
            break;
          }
        }
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw ex;
          default:
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("FailedToMarkListenerComponentAsPrivateForApplication", (object) progid, (object) applicationID));
            break;
        }
      }
    }

    private static bool IsBitness64bit(ICatalogObject component) => (int) component.GetValue(PropertyName.Bitness) != 1;

    internal static bool IsListenerComponent(ICatalogObject compObj) => ((string) compObj.Name()).ToUpperInvariant() == "ServiceModelInitializer".ToUpperInvariant();

    private static void RemoveClsidFromRegistry(bool is64bit, string clsid)
    {
      RegistryHandle bitnessHkcr = RegistryHandle.GetBitnessHKCR(is64bit);
      string key = "Clsid\\" + clsid;
      bitnessHkcr.DeleteKey(key + "\\InprocServer32");
      bitnessHkcr.DeleteKey(key + "\\ProgID");
      bitnessHkcr.DeleteKey(key);
    }

    private static bool RemoveComponent(
      ICatalog2 catalog,
      string partitionId,
      string applicationId,
      string progid)
    {
      int lIndex1 = -1;
      ICatalogCollection collection1 = (ICatalogCollection) catalog.GetCollection(CollectionName.Partitions);
      collection1.Populate();
      ICatalogCollection collection2 = (ICatalogCollection) collection1.GetCollection(CollectionName.Applications, (object) partitionId);
      collection2.Populate();
      ICatalogCollection collection3 = (ICatalogCollection) collection2.GetCollection(CollectionName.Components, (object) applicationId);
      try
      {
        collection3.Populate();
        bool is64bit = false;
        string clsid = (string) null;
        for (int lIndex2 = 0; lIndex2 < collection3.Count(); ++lIndex2)
        {
          ICatalogObject component = (ICatalogObject) collection3.Item(lIndex2);
          if (((string) component.Name()).ToLowerInvariant() == progid.ToLowerInvariant())
          {
            clsid = ((string) component.Key()).ToLowerInvariant();
            is64bit = ComAdminWrapper.IsBitness64bit(component);
            lIndex1 = lIndex2;
            break;
          }
        }
        if (lIndex1 == -1)
          return false;
        collection3.Remove(lIndex1);
        collection3.SaveChanges();
        ComAdminWrapper.RemoveClsidFromRegistry(is64bit, clsid);
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw ex;
          default:
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("FailedToRemoveListenerComponentFromApplication", (object) applicationId, (object) progid));
            break;
        }
      }
      return true;
    }

    public static bool RemoveListener(Guid appid)
    {
      string str = appid.ToString("B");
      ICatalog2 catalog = ComAdminWrapper.GetCatalog();
      string idForApplication = ComAdminWrapper.GetPartitionIdForApplication(catalog, str, false);
      ComAdminWrapper.GetApplicationBitness(catalog, idForApplication, str);
      string progid;
      return ComAdminWrapper.FindListener(appid, out Guid _, out progid) && ComAdminWrapper.RemoveComponent(catalog, idForApplication, str, progid);
    }

    public static bool ResolveApplicationId(string appidOrName, out Guid appId)
    {
      ICatalogObject targetAppObj = (ICatalogObject) null;
      ICatalogCollection appColl = (ICatalogCollection) null;
      appId = Guid.Empty;
      if (!ComAdminWrapper.FindApplication(appidOrName, out targetAppObj, out appColl))
        return false;
      appId = new Guid((string) targetAppObj.Key());
      return true;
    }

    private static void SetCurrentPartition(ICatalog2 catalog, string partitionId)
    {
      try
      {
        catalog.CurrentPartition(partitionId);
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw ex;
          default:
            throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CouldNotSetPartition"), ex);
        }
      }
    }

    public static void SetAppDir(string appidOrName, string path)
    {
      ICatalogObject targetAppObj = (ICatalogObject) null;
      ICatalogCollection appColl = (ICatalogCollection) null;
      if (!ComAdminWrapper.FindApplication(appidOrName, out targetAppObj, out appColl))
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) appidOrName), (Exception) null);
      targetAppObj.SetValue(PropertyName.ApplicationDirectory, (object) path);
      appColl.SaveChanges();
    }
  }
}
