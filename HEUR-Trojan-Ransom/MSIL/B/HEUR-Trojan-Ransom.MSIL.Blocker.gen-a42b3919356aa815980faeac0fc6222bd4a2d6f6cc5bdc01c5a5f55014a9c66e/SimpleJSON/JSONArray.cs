// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONArray
// Assembly: ILegacyEvidenceAdapt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C8AEC27-D027-41D5-B71C-E99019A8E594
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a42b3919356aa815980faeac0fc6222bd4a2d6f6cc5bdc01c5a5f55014a9c66e.exe

using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONArray : JSONNode, IEnumerable
  {
    private List<JSONNode> m_List = new List<JSONNode>();

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = -1242602312;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -633982765)) % 8U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = this.m_List[aIndex];
              num1 = -647408553;
              continue;
            case 2:
              num3 = aIndex >= this.m_List.Count ? 1 : 0;
              break;
            case 3:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * -1426859025 ^ 1153555860;
              continue;
            case 5:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * 1807805385 ^ 622128664;
              continue;
            case 6:
              num1 = (int) num2 * 695295215 ^ -762924811;
              continue;
            case 7:
              int num4 = !flag ? -1634003334 : (num4 = -796696634);
              num1 = num4 ^ (int) num2 * -1949581272;
              continue;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = -322229372;
        }
label_12:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -725150945;
        while (true)
        {
          uint num2;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1478482337)) % 9U)
          {
            case 0:
              this.m_List[aIndex] = value;
              num1 = -696250453;
              continue;
            case 1:
              num3 = aIndex >= this.m_List.Count ? 1 : 0;
              break;
            case 2:
              num1 = (int) num2 * 1817512884 ^ -815336421;
              continue;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * -337097803 ^ -312176493;
              continue;
            case 5:
              num1 = (int) num2 * -1534088211 ^ 2080119827;
              continue;
            case 6:
              goto label_3;
            case 7:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * 1728053826 ^ 1314624551;
                continue;
              }
              num3 = 1;
              break;
            case 8:
              this.m_List.Add(value);
              num1 = (int) num2 * 163933768 ^ -854097597;
              continue;
            default:
              goto label_14;
          }
          int num4;
          num1 = num4 = num3 == 0 ? -719322097 : (num4 = -2098536146);
        }
label_3:
        return;
label_14:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
label_1:
        int num1 = 1060644280;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1220726961)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -1884067391 ^ -734683333;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -957986595;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -234769491)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.m_List.Add(value);
              num1 = (int) num2 * 417687399 ^ -1838961667;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = 1616331427;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 865847898)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              count = this.m_List.Count;
              num1 = (int) num2 * 1882601386 ^ 660853995;
              continue;
            case 3:
              num1 = (int) num2 * -1605445061 ^ -1730366027;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem) => this.m_List.Add(aItem);

    public override JSONNode Remove(int aIndex)
    {
      if (aIndex < 0)
        goto label_8;
label_1:
      int num1 = 304890847;
label_2:
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1163613630)) % 8U)
        {
          case 0:
            int num3 = flag ? -1061177860 : (num3 = -1430972303);
            num1 = num3 ^ (int) num2 * 126762700;
            continue;
          case 1:
            goto label_7;
          case 2:
            jsonNode2 = (JSONNode) null;
            num1 = (int) num2 * 1244888702 ^ 814374094;
            continue;
          case 3:
            num1 = (int) num2 * -2113172376 ^ -1638647990;
            continue;
          case 5:
            goto label_1;
          case 6:
            jsonNode2 = jsonNode1;
            num1 = (int) num2 * -2018797959 ^ -263400205;
            continue;
          case 7:
            jsonNode1 = this.m_List[aIndex];
            this.m_List.RemoveAt(aIndex);
            num1 = 647300136;
            continue;
          default:
            goto label_11;
        }
      }
label_7:
      int num4 = aIndex >= this.m_List.Count ? 1 : 0;
      goto label_9;
label_11:
      return jsonNode2;
label_8:
      num4 = 1;
label_9:
      flag = num4 != 0;
      num1 = 131394766;
      goto label_2;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
label_1:
      int num1 = 1925333447;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 510746366)) % 4U)
        {
          case 1:
            this.m_List.Remove(aNode);
            jsonNode = aNode;
            num1 = (int) num2 * -932278093 ^ -1402523829;
            continue;
          case 2:
            num1 = (int) num2 * 1285907064 ^ 1217608142;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        JSONArray.\u003Cget_Childs\u003Ed__13 childs = new JSONArray.\u003Cget_Childs\u003Ed__13(-2);
label_1:
        int num1 = -589872505;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -150626935)) % 3U)
          {
            case 1:
              childs.\u003C\u003E4__this = this;
              num1 = (int) num2 * -653139899 ^ -185360490;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return (IEnumerable<JSONNode>) childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONArray.\u003CGetEnumerator\u003Ed__14(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
label_1:
      int num1 = 1647954501;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 702373466)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1840779759 ^ -1753035661;
            continue;
          case 2:
            goto label_1;
          case 3:
            str1 = "[ ";
            num1 = (int) num2 * 1000181156 ^ -923558514;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      List<JSONNode>.Enumerator enumerator = this.m_List.GetEnumerator();
      try
      {
label_12:
        int num3 = !enumerator.MoveNext() ? 1634336551 : (num3 = 460411659);
        JSONNode current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 702373466)) % 8U)
          {
            case 0:
              str1 = JSONArray.\u206A‭⁫‏‫⁯‪⁭⁯‫‍‭‪‏​‎⁮⁬⁭‪‏‮‍‍⁭⁫⁯⁫‎‮⁮‭‮‬⁮⁪⁭​‍‮(str1, ", ");
              num3 = (int) num4 * 1486725191 ^ 995799500;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = 1252624848;
              continue;
            case 2:
              flag = JSONArray.\u206D‮‌‎‮‭‌⁭⁮​​⁫⁮‏​‍‪⁯‪⁪‫⁯‬‭‫‬‫⁬‏‌⁪⁭‌‏​⁬‫​‬‏‮(str1) > 2;
              num3 = (int) num4 * -1896637954 ^ -318628487;
              continue;
            case 3:
              goto label_12;
            case 4:
              num3 = 460411659;
              continue;
            case 6:
              str1 = JSONArray.\u206A‭⁫‏‫⁯‪⁭⁯‫‍‭‪‏​‎⁮⁬⁭‪‏‮‍‍⁭⁫⁯⁫‎‮⁮‭‮‬⁮⁪⁭​‍‮(str1, JSONArray.\u200F‌‮⁯‏‌⁬‭‎⁮‏⁬⁬⁫⁪‍‪‎‌​‭‏‏‎‍​‏⁯⁮‏‍‭‍‮‫‏​‍⁯‎‮((object) current));
              num3 = 730889113;
              continue;
            case 7:
              int num5 = flag ? 69243459 : (num5 = 316373861);
              num3 = num5 ^ (int) num4 * -131422145;
              continue;
            default:
              goto label_20;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_16:
        int num6 = 1230160046;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ 702373466)) % 3U)
          {
            case 0:
              goto label_16;
            case 2:
              num6 = (int) num7 * 736961943 ^ -376761508;
              continue;
            default:
              goto label_19;
          }
        }
label_19:;
      }
label_20:
      string str2 = JSONArray.\u206A‭⁫‏‫⁯‪⁭⁯‫‍‭‪‏​‎⁮⁬⁭‪‏‮‍‍⁭⁫⁯⁫‎‮⁮‭‮‬⁮⁪⁭​‍‮(str1, " ]");
label_21:
      int num8 = 641419610;
      string str3;
      while (true)
      {
        uint num9;
        switch ((num9 = (uint) (num8 ^ 702373466)) % 3U)
        {
          case 0:
            goto label_21;
          case 1:
            str3 = str2;
            num8 = (int) num9 * -1252584259 ^ -1130440669;
            continue;
          default:
            goto label_24;
        }
      }
label_24:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "[ ";
      using (List<JSONNode>.Enumerator enumerator = this.m_List.GetEnumerator())
      {
label_5:
        int num1 = enumerator.MoveNext() ? -377326719 : (num1 = -1512961164);
        JSONNode current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1946645846)) % 7U)
          {
            case 1:
              num1 = (int) num2 * 1784932568 ^ 817148193;
              continue;
            case 2:
              current = enumerator.Current;
              int num3;
              num1 = num3 = JSONArray.\u206D‮‌‎‮‭‌⁭⁮​​⁫⁮‏​‍‪⁯‪⁪‫⁯‬‭‫‬‫⁬‏‌⁪⁭‌‏​⁬‫​‬‏‮(str1) > 3 ? -1422086403 : (num3 = -701779191);
              continue;
            case 3:
              str1 = JSONArray.\u202D‮‏‍‭⁯⁪‮⁫⁮⁯⁯‬​‌‪‌‌⁮‌‏‌‌⁫⁯​⁯‬‌‌‫‫‍‫‬‮‌‌‪⁯‮(str1, "\n", aPrefix, "   ");
              str1 = JSONArray.\u206A‭⁫‏‫⁯‪⁭⁯‫‍‭‪‏​‎⁮⁬⁭‪‏‮‍‍⁭⁫⁯⁫‎‮⁮‭‮‬⁮⁪⁭​‍‮(str1, current.ToString(JSONArray.\u206A‭⁫‏‫⁯‪⁭⁯‫‍‭‪‏​‎⁮⁬⁭‪‏‮‍‍⁭⁫⁯⁫‎‮⁮‭‮‬⁮⁪⁭​‍‮(aPrefix, "   ")));
              num1 = -1770540547;
              continue;
            case 4:
              str1 = JSONArray.\u206A‭⁫‏‫⁯‪⁭⁯‫‍‭‪‏​‎⁮⁬⁭‪‏‮‍‍⁭⁫⁯⁫‎‮⁮‭‮‬⁮⁪⁭​‍‮(str1, ", ");
              num1 = (int) num2 * 966858995 ^ 1634080156;
              continue;
            case 5:
              goto label_5;
            case 6:
              num1 = -377326719;
              continue;
            default:
              goto label_10;
          }
        }
      }
label_10:
      string str2 = JSONArray.\u202D‮‏‍‭⁯⁪‮⁫⁮⁯⁯‬​‌‪‌‌⁮‌‏‌‌⁫⁯​⁯‬‌‌‫‫‍‫‬‮‌‌‪⁯‮(str1, "\n", aPrefix, "]");
label_11:
      int num4 = -2140341874;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ -1946645846)) % 3U)
        {
          case 1:
            num4 = (int) num5 * -1425325351 ^ -2041319745;
            continue;
          case 2:
            goto label_11;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -1274479335;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1031032003)) % 9U)
        {
          case 0:
            int num3;
            num1 = num3 = index < this.m_List.Count ? -1794212812 : (num3 = -47163637);
            continue;
          case 1:
            this.m_List[index].Serialize(aWriter);
            num1 = -103767350;
            continue;
          case 2:
            index = 0;
            num1 = (int) num2 * 990230614 ^ 1397678613;
            continue;
          case 3:
            num1 = (int) num2 * 663827783 ^ -832764230;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * 1176629025 ^ -1386212589;
            continue;
          case 5:
            JSONArray.\u206E⁫‭​⁯⁯‮‭⁪‪⁯‏⁬‪‍‭‍‬⁬⁭‮⁫⁮‬⁬‌⁫‎‌‬‍⁭⁯‫⁯‭‮⁬⁫‍‮(aWriter, this.m_List.Count);
            num1 = (int) num2 * 1468330692 ^ -524661003;
            continue;
          case 6:
            JSONArray.\u202E⁭‫‫‎‏‪‬‪‭⁪⁫‍‪⁫‬‍⁮⁯‍‭⁫​‫⁮‏‬‎⁫‍⁯‮‍‬‍‭‎⁭‮⁬‮(aWriter, (byte) 1);
            num1 = (int) num2 * -38945305 ^ -1313778789;
            continue;
          case 7:
            goto label_3;
          case 8:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public JSONArray()
    {
label_1:
      int num1 = 2139006114;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1450436869)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 590341782 ^ 556475599;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static int \u206D‮‌‎‮‭‌⁭⁮​​⁫⁮‏​‍‪⁯‪⁪‫⁯‬‭‫‬‫⁬‏‌⁪⁭‌‏​⁬‫​‬‏‮([In] string obj0) => obj0.Length;

    static string \u206A‭⁫‏‫⁯‪⁭⁯‫‍‭‪‏​‎⁮⁬⁭‪‏‮‍‍⁭⁫⁯⁫‎‮⁮‭‮‬⁮⁪⁭​‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200F‌‮⁯‏‌⁬‭‎⁮‏⁬⁬⁫⁪‍‪‎‌​‭‏‏‎‍​‏⁯⁮‏‍‭‍‮‫‏​‍⁯‎‮([In] object obj0) => obj0.ToString();

    static string \u202D‮‏‍‭⁯⁪‮⁫⁮⁯⁯‬​‌‪‌‌⁮‌‏‌‌⁫⁯​⁯‬‌‌‫‫‍‫‬‮‌‌‪⁯‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u202E⁭‫‫‎‏‪‬‪‭⁪⁫‍‪⁫‬‍⁮⁯‍‭⁫​‫⁮‏‬‎⁫‍⁯‮‍‬‍‭‎⁭‮⁬‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206E⁫‭​⁯⁯‮‭⁪‪⁯‏⁬‪‍‭‍‬⁬⁭‮⁫⁮‬⁬‌⁫‎‌‬‍⁭⁯‫⁯‭‮⁬⁫‍‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);
  }
}
