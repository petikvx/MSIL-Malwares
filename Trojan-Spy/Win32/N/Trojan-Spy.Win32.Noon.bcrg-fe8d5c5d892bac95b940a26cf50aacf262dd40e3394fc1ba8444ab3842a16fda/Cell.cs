// Decompiled with JetBrains decompiler
// Type: ChessBoard.Cell
// Assembly: IArraySortHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B08900B5-C53F-4995-B311-D7E8DC4113C6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcrg-fe8d5c5d892bac95b940a26cf50aacf262dd40e3394fc1ba8444ab3842a16fda.exe

using System;
using System.Runtime.InteropServices;

namespace ChessBoard
{
  public class Cell
  {
    public int Row { get; set; }

    public int Column { get; set; }

    public Cell()
    {
    }

    public Cell(int row, int column)
    {
label_1:
      int num1 = -491676220;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1068251837)) % 5U)
        {
          case 1:
            num1 = (int) num2 * -1577938624 ^ 1406772186;
            continue;
          case 2:
            this.Row = row;
            num1 = (int) num2 * 2046385901 ^ -842672136;
            continue;
          case 3:
            num1 = (int) num2 * 1694426837 ^ 1233431829;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      this.Column = column;
    }

    public override bool Equals(object obj)
    {
      Cell cell = obj as Cell;
label_1:
      int num1 = 1761160250;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1229235911)) % 9U)
        {
          case 0:
            flag1 = false;
            num1 = (int) num2 * 275542827 ^ -1798225539;
            continue;
          case 1:
            flag2 = cell == null;
            num1 = (int) num2 * -821277545 ^ 352521058;
            continue;
          case 3:
            num1 = (int) num2 * 336971598 ^ -1031323498;
            continue;
          case 4:
            num3 = this.Column == cell.Column ? 1 : 0;
            break;
          case 5:
            int num4 = flag2 ? -1782040469 : (num4 = -466151829);
            num1 = num4 ^ (int) num2 * 1991447726;
            continue;
          case 6:
            num1 = (int) num2 * -1172321004 ^ -627416852;
            continue;
          case 7:
            if (this.Row == cell.Row)
            {
              num1 = 809694247;
              continue;
            }
            num3 = 0;
            break;
          case 8:
            goto label_1;
          default:
            goto label_13;
        }
        flag1 = num3 != 0;
        num1 = 100775848;
      }
label_13:
      return flag1;
    }

    public override int GetHashCode()
    {
      int num1 = 17;
label_1:
      int num2 = -660153496;
      int hashCode;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -1825414728)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = num1 * 23 + this.Column.GetHashCode();
            num2 = (int) num3 * -1252350559 ^ 1802044867;
            continue;
          case 2:
            num1 = num1 * 23 + this.Row.GetHashCode();
            num2 = (int) num3 * 665141111 ^ 460221247;
            continue;
          case 3:
            hashCode = num1;
            num2 = (int) num3 * 471755967 ^ -965511816;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = -786688715;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -868810630)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1432598179 ^ -1598351541;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = Cell.\u206F⁮‬‬‮‮⁪‪⁭⁭‍​‫‎⁯⁯⁮‌‫‏‌⁪⁬‎‍‎‮‫‭‎⁪⁭​‌⁭⁭‫‌⁭⁯‮(\u003CModule\u003E.\u206A‎⁪‌‎​⁪⁫⁪‎‎‌⁮‌⁭‌⁫​​‪‭⁫⁬‫⁮‍⁫‪⁪‎‫‬⁪‎‬‬⁯​‍‮‮<string>(2878475569U), (object) this.Row, (object) this.Column);
            num1 = (int) num2 * 1716770608 ^ -43414938;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public bool IsNextTo(Cell cell)
    {
label_1:
      int num1 = -1129923392;
      bool flag1;
      int num2;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1974170749)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            flag2 = false;
            num1 = (int) num3 * -95843025 ^ 1505265792;
            continue;
          case 2:
            num1 = (int) num3 * -1927371865 ^ -1551848954;
            continue;
          case 3:
            int num4 = flag1 ? -856416225 : (num4 = -678883817);
            num1 = num4 ^ (int) num3 * -235191222;
            continue;
          case 4:
            flag2 = false;
            num1 = (int) num3 * 1317717086 ^ -1231077556;
            continue;
          case 5:
            flag3 = num2 > 1;
            num1 = (int) num3 * -1801966206 ^ -972804098;
            continue;
          case 6:
            flag1 = Cell.\u200B‪‬⁬‏‮‬‏⁫​⁮⁯‮⁭​‮‪‌⁮⁮⁬⁫‮⁬⁬‎‮⁬⁭​⁫⁭⁫⁮⁪‌⁮‫⁬‎‮(this.Column - cell.Column) > 1;
            num1 = -2062713578;
            continue;
          case 7:
            num2 = Cell.\u200B‪‬⁬‏‮‬‏⁫​⁮⁯‮⁭​‮‪‌⁮⁮⁬⁫‮⁬⁬‎‮⁬⁭​⁫⁭⁫⁮⁪‌⁮‫⁬‎‮(this.Row - cell.Row);
            num1 = (int) num3 * -900632879 ^ -1521680572;
            continue;
          case 8:
            flag2 = true;
            num1 = -242535576;
            continue;
          case 9:
            int num5 = !flag3 ? -1107544465 : (num5 = -946668610);
            num1 = num5 ^ (int) num3 * 1119563274;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return flag2;
    }

    static string \u206F⁮‬‬‮‮⁪‪⁭⁭‍​‫‎⁯⁯⁮‌‫‏‌⁪⁬‎‍‎‮‫‭‎⁪⁭​‌⁭⁭‫‌⁭⁯‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2)
    {
      return string.Format(obj0, obj1, obj2);
    }

    static int \u200B‪‬⁬‏‮‬‏⁫​⁮⁯‮⁭​‮‪‌⁮⁮⁬⁫‮⁬⁬‎‮⁬⁭​⁫⁭⁫⁮⁪‌⁮‫⁬‎‮([In] int obj0) => Math.Abs(obj0);
  }
}
