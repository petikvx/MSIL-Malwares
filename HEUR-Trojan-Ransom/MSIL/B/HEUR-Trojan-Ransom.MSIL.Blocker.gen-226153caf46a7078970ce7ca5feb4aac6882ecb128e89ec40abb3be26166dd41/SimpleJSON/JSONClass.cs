// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: ContractHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E915048-53CD-4869-AA6D-7821BA258ED2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-226153caf46a7078970ce7ca5feb4aac6882ecb128e89ec40abb3be26166dd41.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
        bool flag = this.m_Dict.ContainsKey(aKey);
label_1:
        int num1 = -1424422179;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1288436532)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              int num3 = !flag ? -714336205 : (num3 = -966733528);
              num1 = num3 ^ (int) num2 * -2135580738;
              continue;
            case 3:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = -467726916;
              continue;
            case 4:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * -803896417 ^ 598744653;
              continue;
            case 5:
              num1 = (int) num2 * 586676569 ^ -1390200557;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return jsonNode;
      }
      set
      {
        if (!this.m_Dict.ContainsKey(aKey))
          goto label_4;
label_1:
        int num1 = 1452256905;
label_2:
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2043400699)) % 6U)
          {
            case 0:
              num1 = (int) num2 * 169806688 ^ 1322132291;
              continue;
            case 1:
              goto label_4;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -1698868632 ^ -2107093536;
              continue;
            case 3:
              num1 = (int) num2 * -1141181059 ^ -1659377956;
              continue;
            case 4:
              goto label_3;
            case 5:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:
        return;
label_4:
        this.m_Dict.Add(aKey, value);
        num1 = 629256155;
        goto label_2;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 688376739;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 1327626999)) % 8U)
          {
            case 0:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 716877339 ^ 457202562;
              continue;
            case 2:
              goto label_1;
            case 3:
              int num4 = flag ? -1472485622 : (num4 = -1300830890);
              num1 = num4 ^ (int) num2 * 24397764;
              continue;
            case 4:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -594936967 ^ 939429203;
                continue;
              }
              num3 = 1;
              break;
            case 5:
              jsonNode = (JSONNode) null;
              num1 = 586116872;
              continue;
            case 6:
              num1 = (int) num2 * 1061346835 ^ 2004531442;
              continue;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = 1009275284;
        }
label_12:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1791700272;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1950520187)) % 6U)
          {
            case 0:
              int num4 = !flag ? -1982237741 : (num4 = -2142286078);
              num1 = num4 ^ (int) num2 * -670004133;
              continue;
            case 1:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * 300318890 ^ 66635290;
              continue;
            case 2:
              goto label_3;
            case 3:
              num1 = (int) num2 * -376249847 ^ -328718260;
              continue;
            case 4:
              goto label_1;
            case 5:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            default:
              goto label_11;
          }
          flag = num3 != 0;
          num1 = -134441463;
        }
label_3:
        return;
label_11:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = 1715042997;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 74490905)) % 3U)
          {
            case 1:
              count = this.m_Dict.Count;
              num1 = (int) num2 * -1199002135 ^ 623299365;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 931425611;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 739020706)) % 11U)
        {
          case 0:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 540168106 ^ -817656765;
            continue;
          case 1:
            this.m_Dict.Add(aKey, aItem);
            num1 = 1108456104;
            continue;
          case 2:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 1248834720;
            continue;
          case 3:
            num1 = (int) num2 * 1137596235 ^ -320576736;
            continue;
          case 4:
            int num3 = !JSONClass.\u206F⁫‬‭⁪‍⁪⁮‭⁪⁯‪‏‫⁯‎⁮‫‌⁮‮⁯‮‌‌‬‎‬‫‪⁪‎‍​‪‫⁯‍‌‏‮(aKey) ? -192708096 : (num3 = -140232087);
            num1 = num3 ^ (int) num2 * 2006291274;
            continue;
          case 5:
            int num4 = this.m_Dict.ContainsKey(aKey) ? 2132117384 : (num4 = 1427671884);
            num1 = num4 ^ (int) num2 * -681046983;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * -1428545027 ^ -468103945;
            continue;
          case 8:
            num1 = (int) num2 * -2023479316 ^ -1111446894;
            continue;
          case 9:
            num1 = 1786371597;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    public override JSONNode Remove(string aKey)
    {
      if (this.m_Dict.ContainsKey(aKey))
        goto label_7;
label_1:
      int num1 = -1993816788;
label_2:
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -123443363)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 1744077448 ^ -760586450;
            continue;
          case 1:
            jsonNode2 = (JSONNode) null;
            num1 = (int) num2 * -1484494304 ^ 1615920725;
            continue;
          case 2:
            this.m_Dict.Remove(aKey);
            num1 = (int) num2 * -1737156257 ^ -643900929;
            continue;
          case 4:
            jsonNode2 = jsonNode1;
            num1 = (int) num2 * 479704120 ^ 1858207056;
            continue;
          case 5:
            num1 = (int) num2 * 53435031 ^ -1385438619;
            continue;
          case 6:
            goto label_7;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return jsonNode2;
label_7:
      jsonNode1 = this.m_Dict[aKey];
      num1 = -866282161;
      goto label_2;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -1797419599;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -147776163)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 956752855 ^ 5256032;
            continue;
          case 1:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -1396608933 ^ -902711621;
            continue;
          case 2:
            goto label_1;
          case 3:
            jsonNode = (JSONNode) null;
            num1 = -1660290875;
            continue;
          case 4:
            if (aIndex >= 0)
            {
              num1 = (int) num2 * -2004785791 ^ -1860569041;
              continue;
            }
            num3 = 1;
            break;
          case 6:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 7:
            int num4 = flag ? -1862977759 : (num4 = -567354893);
            num1 = num4 ^ (int) num2 * 1278542091;
            continue;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = -642773406;
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode;
      try
      {
label_2:
        int num1 = 880262844;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 637344006)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 811614412 ^ 2028084003;
              continue;
            case 2:
              goto label_2;
            default:
              goto label_6;
          }
        }
      }
      catch
      {
        jsonNode = (JSONNode) null;
      }
label_6:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = -519791271;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ -1718254329)) % 24U)
            {
              case 0:
                enumerator = new Dictionary<string, JSONNode>.Enumerator();
                num2 = (int) num3 * -1794716850 ^ -1765299175;
                continue;
              case 1:
                num2 = (int) num3 * 1805537025 ^ -42693546;
                continue;
              case 2:
              case 3:
                this.\u003C\u003E1__state = -3;
                N = new KeyValuePair<string, JSONNode>();
                num2 = -1669347682;
                continue;
              case 4:
              case 19:
                this.\u003C\u003E1__state = -1;
                num2 = -927233510;
                continue;
              case 5:
                enumerator = this.m_Dict.GetEnumerator();
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * -136324514 ^ -1691850617;
                continue;
              case 6:
                childs = false;
                num2 = (int) num3 * 1688515584 ^ -182358198;
                continue;
              case 7:
                N = enumerator.Current;
                num2 = -1599947581;
                continue;
              case 8:
                goto label_1;
              case 9:
                int num4;
                num2 = num4 = enumerator.MoveNext() ? -1326860728 : (num4 = -475160243);
                continue;
              case 10:
                num2 = (int) num3 * 1415949021 ^ 1970010073;
                continue;
              case 11:
                num2 = (int) num3 * 412237041 ^ 535283732;
                continue;
              case 12:
                goto label_3;
              case 14:
                int num5 = num1 == 0 ? 1970700077 : (num5 = 154028226);
                num2 = num5 ^ (int) num3 * -1632737451;
                continue;
              case 15:
                num2 = (int) num3 * 87909211 ^ 1599378015;
                continue;
              case 16:
                int num6;
                num2 = num6 = num1 != 1 ? -189633571 : (num6 = -2052739852);
                continue;
              case 18:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * 788900156 ^ -939041522;
                continue;
              case 20:
                this.\u003C\u003E2__current = N.Value;
                num2 = (int) num3 * 1357949895 ^ 205882908;
                continue;
              case 21:
                num2 = (int) num3 * 1754921009 ^ 1582588973;
                continue;
              case 22:
                num2 = (int) num3 * 935022506 ^ -1598559870;
                continue;
              case 23:
                this.\u003C\u003E1__state = 1;
                childs = true;
                num2 = (int) num3 * 810747626 ^ 17591424;
                continue;
              default:
                goto label_23;
            }
          }
label_3:
          childs = false;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_23:
        return childs;
      }
    }

    public IEnumerator GetEnumerator()
    {
      bool enumerator1;
      // ISSUE: fault handler
      try
      {
        // ISSUE: reference to a compiler-generated field
        int num1 = this.\u003C\u003E1__state;
        if (num1 == 0)
          goto label_14;
label_1:
        int num2 = 2111797614;
label_2:
        Dictionary<string, JSONNode>.Enumerator enumerator;
        KeyValuePair<string, JSONNode> N;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 1518630374)) % 23U)
          {
            case 1:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = (int) num3 * -1887288168 ^ -553706885;
              continue;
            case 2:
              num2 = (int) num3 * -371033769 ^ 549380108;
              continue;
            case 3:
              N = enumerator.Current;
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E2__current = (object) N;
              num2 = 1903130595;
              continue;
            case 4:
              int num4;
              num2 = num4 = enumerator.MoveNext() ? 281824556 : (num4 = 1610783138);
              continue;
            case 5:
              enumerator = new Dictionary<string, JSONNode>.Enumerator();
              num2 = (int) num3 * -824247244 ^ -2075646265;
              continue;
            case 6:
              // ISSUE: reference to a compiler-generated method
              this.\u003C\u003Em__Finally1();
              num2 = (int) num3 * -1091160099 ^ 8019660;
              continue;
            case 8:
            case 14:
              goto label_14;
            case 9:
              enumerator = this.m_Dict.GetEnumerator();
              num2 = (int) num3 * -65786363 ^ -2129573237;
              continue;
            case 10:
              int num5;
              num2 = num5 = num1 != 1 ? 834980264 : (num5 = 1099328525);
              continue;
            case 11:
              enumerator1 = true;
              num2 = (int) num3 * 1771067572 ^ -1627977267;
              continue;
            case 12:
              enumerator1 = false;
              num2 = (int) num3 * -667628495 ^ 294299042;
              continue;
            case 13:
              num2 = (int) num3 * 1872687259 ^ -1186107591;
              continue;
            case 15:
              N = new KeyValuePair<string, JSONNode>();
              num2 = (int) num3 * -235131989 ^ 2138708312;
              continue;
            case 16:
              goto label_20;
            case 17:
            case 22:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = 1352962811;
              continue;
            case 18:
              goto label_1;
            case 19:
              num2 = (int) num3 * -1018666509 ^ -1476047977;
              continue;
            case 20:
              num2 = (int) num3 * 243975702 ^ -80823236;
              continue;
            case 21:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = 1;
              num2 = (int) num3 * -1868702545 ^ 1180151094;
              continue;
            default:
              goto label_22;
          }
        }
label_20:
        enumerator1 = false;
        goto label_22;
label_14:
        // ISSUE: reference to a compiler-generated field
        this.\u003C\u003E1__state = -1;
        num2 = 796338909;
        goto label_2;
      }
      __fault
      {
        // ISSUE: reference to a compiler-generated method
        this.System\u002EIDisposable\u002EDispose();
      }
label_22:
      return enumerator1;
    }

    public override string ToString()
    {
      string str = "{";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_8:
        int num1 = !enumerator.MoveNext() ? -1972918585 : (num1 = -1681022964);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -408684733)) % 9U)
          {
            case 0:
              num1 = -1681022964;
              continue;
            case 1:
              num1 = (int) num2 * 1446020134 ^ 1723522929;
              continue;
            case 3:
              flag = JSONClass.\u202C⁭​‍‮‭​⁯‪⁮⁮⁪‬⁪⁭‪‎⁬‫⁪‌⁭​‭‍‌⁫‫‮‬‎‎‌‍‌‪⁫⁭‏‮‮(str) > 2;
              num1 = (int) num2 * -416037235 ^ -711717837;
              continue;
            case 4:
              goto label_8;
            case 5:
              str = JSONClass.\u206F⁯⁯‍‫‭‭⁫‍​‮‮⁪‮‬‍⁭‏‍‭​⁪‭​‮⁯‫⁯​⁫‭‫⁫‍⁫‮⁯⁮‌⁫‮(str, ", ");
              num1 = (int) num2 * -1172788710 ^ -423179078;
              continue;
            case 6:
              str = JSONClass.\u202B⁭⁪‌‬‫‌‪⁯⁪​‏​‬⁭‫⁪‫‬‭‬‮⁯‪‮‬⁬‫‮‭‫‏‏⁬​⁫⁪​⁬⁬‮(new string[5]
              {
                str,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u206B‮‮‬‌‬​⁯‍⁬⁬‎⁬​‮‎⁭‬⁪⁬‎‪‍⁫⁯​⁫‬⁫‬⁪⁮⁪​⁮⁬⁮‫‌⁬‮((object) current.Value)
              });
              num1 = -389449769;
              continue;
            case 7:
              current = enumerator.Current;
              num1 = -1543648784;
              continue;
            case 8:
              int num3 = !flag ? -958460298 : (num3 = -1367845691);
              num1 = num3 ^ (int) num2 * -1708467057;
              continue;
            default:
              goto label_12;
          }
        }
      }
label_12:
      return JSONClass.\u206F⁯⁯‍‫‭‭⁫‍​‮‮⁪‮‬‍⁭‏‍‭​⁪‭​‮⁯‫⁯​⁫‭‫⁫‍⁫‮⁯⁮‌⁫‮(str, "}");
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_11:
        int num1 = enumerator.MoveNext() ? -1241508391 : (num1 = -1675140804);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2028075870)) % 10U)
          {
            case 0:
              flag = JSONClass.\u202C⁭​‍‮‭​⁯‪⁮⁮⁪‬⁪⁭‪‎⁬‫⁪‌⁭​‭‍‌⁫‫‮‬‎‎‌‍‌‪⁫⁭‏‮‮(str1) > 3;
              num1 = (int) num2 * 461026524 ^ -746105007;
              continue;
            case 1:
              str1 = JSONClass.\u200D⁪‬‪⁭⁬‪⁭⁯⁫‍‌‮‬‪‬‪‬‫⁭⁮⁫⁭‭‮‭⁮‍⁪⁮‍​‌⁮‎‭‮​⁯‬‮(str1, "\n", aPrefix, "   ");
              num1 = -1433274343;
              continue;
            case 2:
              num1 = (int) num2 * -890045038 ^ -989233661;
              continue;
            case 3:
              goto label_11;
            case 4:
              str1 = JSONClass.\u206F⁯⁯‍‫‭‭⁫‍​‮‮⁪‮‬‍⁭‏‍‭​⁪‭​‮⁯‫⁯​⁫‭‫⁫‍⁫‮⁯⁮‌⁫‮(str1, ", ");
              num1 = (int) num2 * -1865101391 ^ 1652252725;
              continue;
            case 5:
              int num3 = !flag ? -1074199936 : (num3 = -113525097);
              num1 = num3 ^ (int) num2 * -1595866689;
              continue;
            case 6:
              num1 = -1241508391;
              continue;
            case 7:
              str1 = JSONClass.\u202B⁭⁪‌‬‫‌‪⁯⁪​‏​‬⁭‫⁪‫‬‭‬‮⁯‪‮‬⁬‫‮‭‫‏‏⁬​⁫⁪​⁬⁬‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u206F⁯⁯‍‫‭‭⁫‍​‮‮⁪‮‬‍⁭‏‍‭​⁪‭​‮⁯‫⁯​⁫‭‫⁫‍⁫‮⁯⁮‌⁫‮(aPrefix, "   "))
              });
              num1 = (int) num2 * 1563605237 ^ -911031539;
              continue;
            case 9:
              current = enumerator.Current;
              num1 = -189814934;
              continue;
            default:
              goto label_13;
          }
        }
      }
label_13:
      string str2 = JSONClass.\u200D⁪‬‪⁭⁬‪⁭⁯⁫‍‌‮‬‪‬‪‬‫⁭⁮⁫⁭‭‮‭⁮‍⁪⁮‍​‌⁮‎‭‮​⁯‬‮(str1, "\n", aPrefix, "}");
label_14:
      int num4 = -535939233;
      string str3;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ -2028075870)) % 4U)
        {
          case 0:
            goto label_14;
          case 1:
            str3 = str2;
            num4 = (int) num5 * 516803751 ^ -1240221989;
            continue;
          case 2:
            num4 = (int) num5 * 1918793920 ^ -1427429727;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -814488187;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1853356034)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            JSONClass.\u200E‫⁪⁫‮​​⁯⁭⁭⁭⁫⁭​‎​‮‎⁬‬‎‎⁯⁯⁯‬⁬⁯‪‏⁬⁭⁯⁭⁯‫⁬‎‎‬‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -518611454 ^ -1808741681;
            continue;
          case 3:
            JSONClass.\u206C⁪‎‮⁭‬⁫⁭‏‪⁯⁬⁬‬‎‫⁬‭⁭⁫‏​‫‮‭‌‍‏⁭⁬​⁪‎‏‬‮⁮‍‫⁫‮(aWriter, (byte) 2);
            num1 = (int) num2 * -230000139 ^ 2134610831;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_12:
        int num3 = !enumerator.MoveNext() ? -1780344805 : (num3 = -1052691075);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1853356034)) % 7U)
          {
            case 0:
              num3 = (int) num4 * 519595900 ^ 2043824851;
              continue;
            case 1:
              current = enumerator.Current;
              JSONClass.\u206F⁪‮⁮⁬⁭‌⁪⁭⁭‎‎‍‮‎‬⁯‫⁪‏‪‎⁯‬‎⁭‌⁭‬⁬⁮⁭‍​⁫‬⁭‍‌‏‮(aWriter, current);
              num3 = -315050287;
              continue;
            case 2:
              goto label_15;
            case 3:
              num3 = -1052691075;
              continue;
            case 4:
              goto label_12;
            case 5:
              num3 = (int) num4 * -1133198160 ^ 1464121745;
              continue;
            case 6:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -2117960056 ^ -985770383;
              continue;
            default:
              goto label_9;
          }
        }
label_15:
        return;
label_9:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = -993552500;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -627720838)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1447344781 ^ 1882289445;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u206F⁫‬‭⁪‍⁪⁮‭⁪⁯‪‏‫⁯‎⁮‫‌⁮‮⁯‮‌‌‬‎‬‫‪⁪‎‍​‪‫⁯‍‌‏‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u202C⁭​‍‮‭​⁯‪⁮⁮⁪‬⁪⁭‪‎⁬‫⁪‌⁭​‭‍‌⁫‫‮‬‎‎‌‍‌‪⁫⁭‏‮‮([In] string obj0) => obj0.Length;

    static string \u206F⁯⁯‍‫‭‭⁫‍​‮‮⁪‮‬‍⁭‏‍‭​⁪‭​‮⁯‫⁯​⁫‭‫⁫‍⁫‮⁯⁮‌⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206B‮‮‬‌‬​⁯‍⁬⁬‎⁬​‮‎⁭‬⁪⁬‎‪‍⁫⁯​⁫‬⁫‬⁪⁮⁪​⁮⁬⁮‫‌⁬‮([In] object obj0) => obj0.ToString();

    static string \u202B⁭⁪‌‬‫‌‪⁯⁪​‏​‬⁭‫⁪‫‬‭‬‮⁯‪‮‬⁬‫‮‭‫‏‏⁬​⁫⁪​⁬⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200D⁪‬‪⁭⁬‪⁭⁯⁫‍‌‮‬‪‬‪‬‫⁭⁮⁫⁭‭‮‭⁮‍⁪⁮‍​‌⁮‎‭‮​⁯‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206C⁪‎‮⁭‬⁫⁭‏‪⁯⁬⁬‬‎‫⁬‭⁭⁫‏​‫‮‭‌‍‏⁭⁬​⁪‎‏‬‮⁮‍‫⁫‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200E‫⁪⁫‮​​⁯⁭⁭⁭⁫⁭​‎​‮‎⁬‬‎‎⁯⁯⁯‬⁬⁯‪‏⁬⁭⁯⁭⁯‫⁬‎‎‬‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u206F⁪‮⁮⁬⁭‌⁪⁭⁭‎‎‍‮‎‬⁯‫⁪‏‪‎⁯‬‎⁭‌⁭‬⁬⁮⁭‍​⁫‬⁭‍‌‏‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
