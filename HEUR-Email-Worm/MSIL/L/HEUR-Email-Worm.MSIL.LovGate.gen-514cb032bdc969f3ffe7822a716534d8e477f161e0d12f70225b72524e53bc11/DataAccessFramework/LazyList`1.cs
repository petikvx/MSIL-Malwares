// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.LazyList`1
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System;
using System.Collections;
using System.Collections.Generic;

namespace DataAccessFramework
{
  [Serializable]
  public class LazyList<T> : ICollection<T>, IEnumerable<T>, IList<T>, IEnumerable
  {
    [NonSerialized]
    private readonly IEnumerable<T> _enumerable;
    private System.Collections.Generic.List<T> _list;

    public LazyList(IEnumerable<T> enumerable) => this._enumerable = enumerable;

    private IList<T> List => (IList<T>) (this._list ?? (this._list = new System.Collections.Generic.List<T>(this._enumerable)));

    public IEnumerator<T> GetEnumerator()
    {
      IEnumerator<T> enumerator = this.List.GetEnumerator();
label_1:
      int num1 = -2057557531;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1605891986)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 413914621 ^ 661697995;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return enumerator;
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      IEnumerator enumerator = (IEnumerator) this.GetEnumerator();
label_1:
      int num1 = -434617327;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -344285708)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 719350544 ^ -805951719;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return enumerator;
    }

    public void Add(T item) => this.List.Add(item);

    public void Clear()
    {
label_1:
      int num1 = 1595796395;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1136864454)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.List.Clear();
            num1 = (int) num2 * -674511393 ^ 1952937515;
            continue;
          case 2:
            num1 = (int) num2 * -1555255441 ^ 347852167;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public bool Contains(T item)
    {
label_1:
      int num1 = 714388821;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1253095723)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            flag = this.List.Contains(item);
            num1 = (int) num2 * 2087642255 ^ 1225842774;
            continue;
          case 3:
            num1 = (int) num2 * 75594369 ^ 688060709;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    public void CopyTo(T[] array, int arrayIndex) => this.List.CopyTo(array, arrayIndex);

    public bool Remove(T item)
    {
label_1:
      int num1 = 1351850867;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 377968477)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 2105602673 ^ -2051001444;
            continue;
          case 2:
            flag = this.List.Remove(item);
            num1 = (int) num2 * 2053902746 ^ -594693384;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    public int Count
    {
      get
      {
        int count = this.List.Count;
label_1:
        int num1 = -1805265608;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -195109317)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1043051986 ^ -1225692733;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public bool IsReadOnly
    {
      get
      {
label_1:
        int num1 = -1987631105;
        bool isReadOnly;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1414565614)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              isReadOnly = this.List.IsReadOnly;
              num1 = (int) num2 * 208685667 ^ -1936109713;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return isReadOnly;
      }
    }

    public int IndexOf(T item)
    {
label_1:
      int num1 = 746791984;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1892436001)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num2 = this.List.IndexOf(item);
            num1 = (int) num3 * -610037600 ^ -1313966716;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return num2;
    }

    public void Insert(int index, T item) => this.List.Insert(index, item);

    public void RemoveAt(int index)
    {
label_1:
      int num1 = 1353371241;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1724593159)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.List.RemoveAt(index);
            num1 = (int) num2 * -1766427576 ^ 77589009;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public T this[int index]
    {
      get
      {
        T obj = this.List[index];
label_1:
        int num1 = -1742770051;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -101418770)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -1740407848 ^ -1886338629;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return obj;
      }
      set
      {
label_1:
        int num1 = -1773009326;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1314580876)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.List[index] = value;
              num1 = (int) num2 * -1406174777 ^ -389712594;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }
  }
}
