// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.UI.ViewModel.VpnDataViewModel
// Assembly: CompilerMarshalOverr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 887C44A2-E14E-47D6-B77E-29DEF9E8CB8C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-cd6f56158196fbf736ea4b7487025de6e7a628d7f1f508a39879631018dcc9e0.exe

using CiscoAnyconnectControl.Model;
using CiscoAnyconnectControl.UI.Command;
using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Security;

namespace CiscoAnyconnectControl.UI.ViewModel
{
  internal class VpnDataViewModel : INotifyPropertyChanged
  {
    private string _address = "vpn.example.com";
    private string _username = "username";
    private string _password = "";
    private string _group = (string) null;
    private int _groupId = 0;

    public VpnDataViewModel()
    {
      this.Address = this.Model.Address;
      this.Username = this.Model.Username;
      this.Password = this.Model.Password;
      this.Group = this.Model.Group;
      this.GroupId = this.Model.GroupId;
      this.Model.PropertyChanged += new PropertyChangedEventHandler(this.Model_PropertyChanged);
      this.SetupCommands();
    }

    private void Model_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
    }

    private VpnDataModel Model { get; set; }

    public string Address
    {
      get => this._address;
      set
      {
        if (this._address == value)
          return;
        this._address = value;
        this.OnPropertyChanged();
      }
    }

    public string Username
    {
      get => this._username;
      set
      {
        if (this._username == value)
          return;
        this._username = value;
        this.OnPropertyChanged();
      }
    }

    public string Password
    {
      get => this._password;
      set
      {
        if (this._password == value)
          return;
        this._password = value;
        this.OnPropertyChanged();
      }
    }

    public string Group
    {
      get => string.Format("({0}) {1}", (object) this._groupId, (object) this._group);
      set
      {
        if (this._group == value)
          return;
        this._group = value;
        this.OnPropertyChanged();
      }
    }

    public int GroupId
    {
      get => this._groupId;
      set
      {
        if (this._groupId == value)
          return;
        this._groupId = value;
        this.OnPropertyChanged("Group");
        this.OnPropertyChanged();
      }
    }

    public SecureString SecurePassword
    {
      set
      {
        string str = "";
        if (value != null)
        {
          using (SecureString s = value)
          {
            IntPtr bstr = Marshal.SecureStringToBSTR(s);
            try
            {
              str = Marshal.PtrToStringBSTR(bstr);
            }
            finally
            {
              Marshal.ZeroFreeBSTR(bstr);
            }
          }
        }
        this.Password = str;
      }
    }

    public RelayCommand SaveToModel { get; private set; }

    public RelayCommand RemoveGroup { get; private set; }

    public bool IsRemoveProfileButtonEnabled => this.Group != null;

    private void SetupCommands()
    {
      this.SaveToModel = new RelayCommand(new Func<bool>(this.DataChanged), (Action) (() =>
      {
        this.Model.Address = this.Address;
        this.Model.Username = this._username;
        this.Model.Group = this._group;
        this.Model.GroupId = this._groupId;
      }));
      this.RemoveGroup = new RelayCommand((Func<bool>) (() => this.IsRemoveProfileButtonEnabled), (Action) (() =>
      {
        this.Group = (string) null;
        this.Model.GroupId = 0;
        this.Model.Group = (string) null;
      }));
    }

    private bool DataChanged() => true;

    public event PropertyChangedEventHandler PropertyChanged;

    [NotifyPropertyChangedInvocator]
    protected virtual void OnPropertyChanged(string propertyName = null)
    {
      PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
      if (propertyChanged == null)
        return;
      propertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }
  }
}
