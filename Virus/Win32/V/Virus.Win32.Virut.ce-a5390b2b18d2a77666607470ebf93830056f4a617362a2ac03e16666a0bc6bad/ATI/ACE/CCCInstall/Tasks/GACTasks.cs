// Decompiled with JetBrains decompiler
// Type: ATI.ACE.CCCInstall.Tasks.GACTasks
// Assembly: CCCInstall, Version=2.0.3163.17516, Culture=neutral, PublicKeyToken=null
// MVID: FB1048F0-5C3B-4430-944F-CD20B70875CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Virut.ce-a5390b2b18d2a77666607470ebf93830056f4a617362a2ac03e16666a0bc6bad.exe

using System;
using System.EnterpriseServices.Internal;
using System.IO;
using System.Reflection;
using System.Xml;

namespace ATI.ACE.CCCInstall.Tasks
{
  internal class GACTasks : BaseTask, ITask
  {
    private const string ARG_BRANDING = "Branding";
    private Publish pub;
    private ATI.ACE.CCCInstall.Action action;

    public GACTasks(CCCInstallLog log, ATI.ACE.CCCInstall.Action action)
      : base(log)
    {
      this.pub = new Publish();
      this.action = action;
    }

    public void Run(string filePath)
    {
      try
      {
        string path = this.MassagePath(filePath);
        string directoryName = Path.GetDirectoryName(path);
        XmlDocument xmlDocument = this.LoadXmlDocument(path);
        if (xmlDocument == null)
          return;
        this.Logger.LogMessage("Successfully loaded XML file " + path);
        foreach (XmlNode selectNode in xmlDocument.SelectNodes("Package/Include"))
        {
          try
          {
            XmlAttributeCollection attributes = selectNode.Attributes;
            string innerText1 = attributes["file"].InnerText;
            string innerText2 = attributes["extension"].InnerText;
            bool flag = bool.Parse(attributes["GAC"].InnerText);
            string str = directoryName + "\\" + innerText1 + "." + innerText2;
            if (flag)
            {
              try
              {
                Assembly.ReflectionOnlyLoadFrom(str);
                if (this.action == ATI.ACE.CCCInstall.Action.InstallGAC)
                {
                  this.pub.GacInstall(str);
                  this.Logger.LogMessage(innerText1 + "." + innerText2 + " successfully installed into the GAC");
                }
                else if (this.action == ATI.ACE.CCCInstall.Action.UninstallGAC)
                {
                  this.pub.GacRemove(str);
                  this.Logger.LogMessage(innerText1 + "." + innerText2 + " successfully removed from the GAC");
                }
                else
                  this.Logger.LogMessage("Debug: Wrong parameter passed");
              }
              catch (Exception ex)
              {
                this.Logger.LogException(ex, innerText1 + "." + innerText2);
              }
            }
          }
          catch (Exception ex)
          {
            this.Logger.LogException(ex);
          }
        }
      }
      catch (Exception ex)
      {
        this.Logger.LogException(ex);
      }
    }
  }
}
