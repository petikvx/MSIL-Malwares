// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.ArithmeticBinaryExpression
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using AjScript.Language;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace AjScript.Expressions
{
  public class ArithmeticBinaryExpression : BinaryExpression
  {
    private Func<object, object, object> function;
    private ArithmeticOperator operation;

    public ArithmeticBinaryExpression(
      ArithmeticOperator operation,
      IExpression left,
      IExpression right)
      : base(left, right)
    {
      this.operation = operation;
      switch (operation)
      {
        case ArithmeticOperator.Add:
          this.function = new Func<object, object, object>(ArithmeticBinaryExpression.AddOrConcatenateObjects);
          break;
        case ArithmeticOperator.Subtract:
          this.function = new Func<object, object, object>(Operators.SubtractObject);
          break;
        case ArithmeticOperator.Multiply:
          this.function = new Func<object, object, object>(Operators.MultiplyObject);
          break;
        case ArithmeticOperator.Divide:
          this.function = new Func<object, object, object>(Operators.DivideObject);
          break;
        case ArithmeticOperator.IntegerDivide:
          this.function = new Func<object, object, object>(Operators.IntDivideObject);
          break;
        case ArithmeticOperator.Modulo:
          this.function = new Func<object, object, object>(Operators.ModObject);
          break;
        default:
          throw new ArgumentException("Invalid operator");
      }
    }

    public ArithmeticOperator Operation => this.operation;

    public override object Apply(object leftValue, object rightValue)
    {
      if (this.operation == ArithmeticOperator.Add)
      {
        if (leftValue == null && ObjectUtilities.IsNumber(rightValue))
          leftValue = (object) 0;
        if (rightValue == null && ObjectUtilities.IsNumber(leftValue))
          rightValue = (object) 0;
      }
      else
      {
        if (leftValue == null)
          leftValue = (object) 0;
        if (rightValue == null)
          rightValue = (object) 0;
      }
      return this.function(leftValue, rightValue);
    }

    private static object AddOrConcatenateObjects(object left, object right)
    {
      if (ObjectUtilities.IsNumber(left) && ObjectUtilities.IsNumber(right))
        return Operators.AddObject(left, right);
      if (left == null)
        left = (object) string.Empty;
      if (right == null)
        right = (object) string.Empty;
      return Operators.ConcatenateObject((object) left.ToString(), (object) right.ToString());
    }
  }
}
