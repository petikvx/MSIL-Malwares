// Decompiled with JetBrains decompiler
// Type: C3904355907.C2746444292
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using C3554254475;
using System;
using System.Collections;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Threading;
using System.Windows.Forms;

namespace C3904355907
{
  public sealed class C2746444292
  {
    private C3554254475.C3110715001 C3554254475 = new C3554254475.C3110715001(true, new byte[64]);
    private RNGCryptoServiceProvider C3554254475 = new RNGCryptoServiceProvider();
    private ulong C3554254475;
    private ulong C3904355907 = 0;
    private static readonly object C3554254475 = new object();
    private readonly object C3904355907 = new object();
    private static C2746444292 C3554254475 = (C2746444292) null;
    private static int C3554254475 = 0;

    [SpecialName]
    public static C2746444292 C3554254475()
    {
      C2746444292 c2746444292;
      lock (C2746444292.C3554254475)
      {
        c2746444292 = C2746444292.C3554254475;
        if (c2746444292 == null)
        {
          c2746444292 = new C2746444292();
          C2746444292.C3554254475 = c2746444292;
        }
      }
      return c2746444292;
    }

    [SpecialName]
    public ulong C3904355907()
    {
      ulong c3904355907;
      lock (this.C3904355907)
        c3904355907 = this.C3904355907;
      return c3904355907;
    }

    [CompilerGenerated]
    [SpecialName]
    public void C3554254475([In] EventHandler obj0)
    {
      // ISSUE: reference to a compiler-generated field
      EventHandler eventHandler = this.C3554254475;
      EventHandler comparand;
      do
      {
        comparand = eventHandler;
        // ISSUE: reference to a compiler-generated field
        eventHandler = Interlocked.CompareExchange<EventHandler>(ref this.C3554254475, comparand + obj0, comparand);
      }
      while (eventHandler != comparand);
    }

    [CompilerGenerated]
    [SpecialName]
    public void C3904355907([In] EventHandler obj0)
    {
      // ISSUE: reference to a compiler-generated field
      EventHandler eventHandler = this.C3554254475;
      EventHandler comparand;
      do
      {
        comparand = eventHandler;
        // ISSUE: reference to a compiler-generated field
        eventHandler = Interlocked.CompareExchange<EventHandler>(ref this.C3554254475, comparand - obj0, comparand);
      }
      while (eventHandler != comparand);
    }

    private C2746444292()
    {
      this.C3554254475 = (ulong) DateTime.UtcNow.ToBinary();
      byte[] numArray = this.C1255198513();
      this.C3554254475(numArray);
      C3554254475.C2137352139.C3904355907(numArray);
    }

    public void C3554254475([In] byte[] obj0)
    {
      if (obj0 == null)
        Debug.Assert(false);
      else if (obj0.Length == 0)
      {
        Debug.Assert(false);
      }
      else
      {
        byte[] sourceArray1 = obj0;
        if (obj0.Length > 64)
        {
          using (SHA512Managed shA512Managed = new SHA512Managed())
            sourceArray1 = shA512Managed.ComputeHash(obj0);
        }
        lock (this.C3904355907)
        {
          byte[] sourceArray2 = this.C3554254475.C2746444292();
          int length1 = sourceArray2.Length;
          int length2 = sourceArray1.Length;
          byte[] numArray = new byte[length1 + length2];
          Array.Copy((Array) sourceArray2, (Array) numArray, length1);
          Array.Copy((Array) sourceArray1, 0, (Array) numArray, length1, length2);
          using (SHA512Managed shA512Managed = new SHA512Managed())
          {
            byte[] hash = shA512Managed.ComputeHash(numArray);
            this.C3554254475 = new C3554254475.C3110715001(true, hash);
            C3554254475.C2137352139.C3904355907(hash);
          }
          C3554254475.C2137352139.C3904355907(numArray);
          C3554254475.C2137352139.C3904355907(sourceArray2);
        }
        if (sourceArray1 == obj0)
          return;
        C3554254475.C2137352139.C3904355907(sourceArray1);
      }
    }

    private byte[] C1255198513()
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      C2746444292.C3554254475 c3554254475 = new C2746444292.C3554254475()
      {
        C3554254475 = new SHA512Managed(),
        C3554254475 = new byte[4],
        C3904355907 = new byte[8]
      };
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      c3554254475.C3554254475 = new C3081909835<byte[], bool>(c3554254475.C3554254475);
      // ISSUE: reference to a compiler-generated method
      Action<int> action1 = new Action<int>(c3554254475.C3554254475);
      // ISSUE: reference to a compiler-generated method
      Action<long> action2 = new Action<long>(c3554254475.C3554254475);
      // ISSUE: reference to a compiler-generated method
      Action<string> action3 = new Action<string>(c3554254475.C3554254475);
      action1(Environment.TickCount);
      action2(DateTime.UtcNow.ToBinary());
      try
      {
        Point position = Cursor.Position;
        action1(position.X);
        action1(position.Y);
      }
      catch (Exception ex)
      {
        Debug.Assert(C3554254475.C1812594589.C1908338681());
      }
      try
      {
        action1((int) C3554254475.C1812594589.C1037565863());
        action3(Environment.OSVersion.VersionString);
        action1(Environment.ProcessorCount);
        action3(Environment.CommandLine);
        action2(Environment.WorkingSet);
      }
      catch (Exception ex)
      {
        Debug.Assert(false);
      }
      try
      {
        foreach (DictionaryEntry environmentVariable in Environment.GetEnvironmentVariables())
        {
          action3(environmentVariable.Key as string);
          action3(environmentVariable.Value as string);
        }
      }
      catch (Exception ex)
      {
        Debug.Assert(false);
      }
      try
      {
        using (Process currentProcess = Process.GetCurrentProcess())
        {
          action2(currentProcess.Handle.ToInt64());
          action1(currentProcess.HandleCount);
          action1(currentProcess.Id);
          action2(currentProcess.NonpagedSystemMemorySize64);
          action2(currentProcess.PagedMemorySize64);
          action2(currentProcess.PagedSystemMemorySize64);
          action2(currentProcess.PeakPagedMemorySize64);
          action2(currentProcess.PeakVirtualMemorySize64);
          action2(currentProcess.PeakWorkingSet64);
          action2(currentProcess.PrivateMemorySize64);
          action2(currentProcess.StartTime.ToBinary());
          action2(currentProcess.VirtualMemorySize64);
          action2(currentProcess.WorkingSet64);
        }
      }
      catch (Exception ex)
      {
        Debug.Assert(C3554254475.C1812594589.C1908338681());
      }
      try
      {
        CultureInfo currentCulture = CultureInfo.CurrentCulture;
        if (currentCulture != null)
          action1(currentCulture.GetHashCode());
        else
          Debug.Assert(false);
      }
      catch (Exception ex)
      {
        Debug.Assert(false);
      }
      // ISSUE: reference to a compiler-generated field
      c3554254475.C3554254475(Guid.NewGuid().ToByteArray(), false);
      // ISSUE: reference to a compiler-generated field
      c3554254475.C3554254475(this.C1908338681(), true);
      // ISSUE: reference to a compiler-generated field
      c3554254475.C3554254475.TransformFinalBlock(C3554254475.C2137352139.C3554254475, 0, 0);
      // ISSUE: reference to a compiler-generated field
      byte[] hash = c3554254475.C3554254475.Hash;
      // ISSUE: reference to a compiler-generated field
      c3554254475.C3554254475.Clear();
      // ISSUE: reference to a compiler-generated field
      C3554254475.C2137352139.C3904355907(c3554254475.C3554254475);
      // ISSUE: reference to a compiler-generated field
      C3554254475.C2137352139.C3904355907(c3554254475.C3904355907);
      return hash;
    }

    private byte[] C1908338681()
    {
      byte[] data = new byte[32];
      try
      {
        this.C3554254475.GetBytes(data);
      }
      catch (Exception ex)
      {
        Debug.Assert(false);
        C3554254475.C2137352139.C3554254475(DateTime.UtcNow.ToBinary(), data, 0);
      }
      return data;
    }

    private byte[] C1037565863()
    {
      // ISSUE: reference to a compiler-generated field
      if (this.C3554254475 != null)
      {
        // ISSUE: reference to a compiler-generated field
        this.C3554254475((object) this, EventArgs.Empty);
      }
      byte[] destinationArray;
      lock (this.C3904355907)
      {
        this.C3554254475 += 8419675896339292513UL;
        byte[] sourceArray1 = C3554254475.C2137352139.C3554254475(this.C3554254475);
        byte[] sourceArray2 = this.C1908338681();
        byte[] sourceArray3 = this.C3554254475.C2746444292();
        int length1 = sourceArray3.Length;
        int length2 = sourceArray1.Length;
        int length3 = sourceArray2.Length;
        destinationArray = new byte[length1 + length2 + length3];
        Array.Copy((Array) sourceArray3, (Array) destinationArray, length1);
        Array.Copy((Array) sourceArray1, 0, (Array) destinationArray, length1, length2);
        Array.Copy((Array) sourceArray2, 0, (Array) destinationArray, length1 + length2, length3);
        C3554254475.C2137352139.C3904355907(sourceArray2);
        C3554254475.C2137352139.C3904355907(sourceArray3);
        this.C3904355907 += 32UL;
      }
      byte[] numArray = C1304234792.C3554254475(destinationArray);
      C3554254475.C2137352139.C3904355907(destinationArray);
      return numArray;
    }

    public byte[] C3554254475([In] uint obj0)
    {
      if (obj0 == 0U)
        return C3554254475.C2137352139.C3554254475;
      if (obj0 > (uint) int.MaxValue)
      {
        Debug.Assert(false);
        throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Cz());
      }
      int val1 = (int) obj0;
      byte[] destinationArray = new byte[val1];
      int destinationIndex = 0;
      int length;
      for (; val1 != 0; val1 -= length)
      {
        byte[] sourceArray = this.C1037565863();
        Debug.Assert(sourceArray.Length == 32);
        length = Math.Min(val1, sourceArray.Length);
        Array.Copy((Array) sourceArray, 0, (Array) destinationArray, destinationIndex, length);
        C3554254475.C2137352139.C3904355907(sourceArray);
        destinationIndex += length;
      }
      Debug.Assert(destinationIndex == destinationArray.Length);
      return destinationArray;
    }

    public static Random C112844655()
    {
      long binary = DateTime.UtcNow.ToBinary();
      int Seed = (int) (binary >> 32 ^ binary);
      lock (C2746444292.C3554254475)
      {
        C2746444292.C3554254475 += 2024326327;
        Seed ^= C2746444292.C3554254475;
      }
      if (Seed == int.MinValue)
        Seed = int.MaxValue;
      return new Random(Seed);
    }
  }
}
