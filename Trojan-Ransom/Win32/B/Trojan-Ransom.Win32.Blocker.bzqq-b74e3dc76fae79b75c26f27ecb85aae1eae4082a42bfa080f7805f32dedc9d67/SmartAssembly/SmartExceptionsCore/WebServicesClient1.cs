// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.WebServicesClient1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.Net;

namespace SmartAssembly.SmartExceptionsCore
{
  internal class WebServicesClient1
  {
    internal static readonly string UploadReportServer;
    private string licenseID;
    private string m_ServerURL;
    private IWebProxy proxy;

    public void SetProxy(IWebProxy proxy)
    {
      try
      {
        this.proxy = proxy;
      }
      catch (Exception ex)
      {
        IWebProxy o2 = proxy;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    public void LoginToServer(StringCallback1 whenDone)
    {
      UploadReportLoginService1 reportLoginService1;
      try
      {
        if (this.m_ServerURL == null)
        {
          try
          {
            reportLoginService1 = new UploadReportLoginService1();
            if (this.proxy != null)
              reportLoginService1.Proxy = this.proxy;
            this.m_ServerURL = reportLoginService1.GetServerURL(this.licenseID);
            if (this.m_ServerURL.Length == 0)
              throw new ApplicationException("Cannot connect to webservice");
            if (this.m_ServerURL == "ditto")
              this.m_ServerURL = WebServicesClient1.UploadReportServer;
          }
          catch (Exception ex)
          {
            whenDone("ERR 2001: " + ex.Message);
            return;
          }
        }
        whenDone(this.m_ServerURL.StartsWith("ERR") ? this.m_ServerURL : "OK");
      }
      catch (Exception ex)
      {
        UploadReportLoginService1 o1 = reportLoginService1;
        Exception o2 = ex;
        StringCallback1 o4 = whenDone;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
        throw;
      }
    }

    public void Upload(
      byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber,
      StringCallback1 whenDone)
    {
      ReportingService1 reportingService1;
      try
      {
        try
        {
          reportingService1 = new ReportingService1(this.m_ServerURL);
          if (this.proxy != null)
            reportingService1.Proxy = this.proxy;
          whenDone(reportingService1.UploadReport2(this.licenseID, data, email, appFriendlyName, buildFriendlyNumber));
        }
        catch (Exception ex)
        {
          whenDone("ERR 2002: " + ex.Message);
        }
      }
      catch (Exception ex)
      {
        ReportingService1 o1 = reportingService1;
        Exception o2 = ex;
        byte[] o4 = data;
        string o5 = email;
        string o6 = appFriendlyName;
        string o7 = buildFriendlyNumber;
        StringCallback1 o8 = whenDone;
        StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8);
        throw;
      }
    }

    public WebServicesClient1(string licenseID)
    {
      try
      {
        this.licenseID = licenseID;
      }
      catch (Exception ex)
      {
        string o2 = licenseID;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    static WebServicesClient1()
    {
      try
      {
        WebServicesClient1.UploadReportServer = "http://sawebservice.red-gate.com/";
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }
  }
}
