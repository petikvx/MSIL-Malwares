// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.W2dParser
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using dotXMLToolsWPF.W2d.Opcodes;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace dotXMLToolsWPF
{
  public class W2dParser
  {
    public const int w2d_header_length = 12;

    public static W2dParser.W2dParserResults GetParsedData(string fileName) => new W2dParser.W2dParserResults((IEnumerable<IOpcode>) W2dParser.GetParsedIterator(fileName).ToList<IOpcode>());

    public static IEnumerable<IOpcode> GetParsedIterator(string fileName)
    {
      FileStream fileStream = File.OpenRead(fileName);
      fileStream.Position = 12L;
      return W2dParser.GetParsedIteratorIterable((Stream) fileStream);
    }

    private static IEnumerable<IOpcode> GetParsedIteratorIterable(Stream stream)
    {
      while (stream.Position < stream.Length)
      {
        IOpcode opcode = W2dParser.ParseNextOpcode(stream);
        if (opcode is EndOfDwf)
          break;
        yield return opcode;
        opcode = (IOpcode) null;
      }
    }

    public static IOpcode ParseNextOpcode(Stream stream)
    {
      int opcodeId = stream.ReadByte();
      switch (opcodeId)
      {
        case 40:
          return OpcodeFactory.ReadExtendedAsciiOpcode(stream);
        case 123:
          return OpcodeFactory.ReadExtendedBinaryOpcode(stream);
        default:
          return OpcodeFactory.ParseSingleByteOpcode(opcodeId, stream);
      }
    }

    public class W2dParserResults : List<IOpcode>
    {
      public W2dParserResults(IEnumerable<IOpcode> collection)
        : base(collection)
      {
      }

      public W2dParserResults()
      {
      }

      public W2dParserResults(int capacity)
        : base(capacity)
      {
      }
    }
  }
}
