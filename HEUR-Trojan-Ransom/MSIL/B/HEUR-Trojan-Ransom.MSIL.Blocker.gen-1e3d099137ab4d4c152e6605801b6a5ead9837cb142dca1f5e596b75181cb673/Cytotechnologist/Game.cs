// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: CMSCOMSERVERFL, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: BC3392BE-E240-40FB-9209-64A3FA8E63B6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1e3d099137ab4d4c152e6605801b6a5ead9837cb142dca1f5e596b75181cb673.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u200C‫‭‬‌‬‍‭⁪‫‏‫​⁯‌‭⁫⁪‬‮‬‮‪‭‮‍⁯‎‪‌‬‬‮‪‫‌‌‬​‍‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        if (!this._finished)
          goto label_9;
label_1:
        int num1 = 701518508;
label_2:
        bool finished;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1889903688)) % 15U)
          {
            case 0:
              int num3 = flag ? -1374566329 : (num3 = -687422802);
              num1 = num3 ^ (int) num2 * -1920180489;
              continue;
            case 1:
              playerState = playerStates[index];
              num1 = 2004184768;
              continue;
            case 2:
              num1 = (int) num2 * -84545904 ^ 111844222;
              continue;
            case 3:
              num1 = (int) num2 * 1306150719 ^ 1361232583;
              continue;
            case 4:
              goto label_1;
            case 5:
              finished = true;
              num1 = (int) num2 * -863772494 ^ 1504445813;
              continue;
            case 6:
              int num4;
              num1 = num4 = index < playerStates.Length ? 1678511906 : (num4 = 1928778078);
              continue;
            case 7:
              num1 = (int) num2 * -1539217840 ^ -1598950466;
              continue;
            case 9:
              ++index;
              num1 = 888350338;
              continue;
            case 10:
              finished = false;
              num1 = (int) num2 * -1939253501 ^ -1960280387;
              continue;
            case 11:
              goto label_9;
            case 12:
              index = 0;
              num1 = (int) num2 * 892727682 ^ -860778641;
              continue;
            case 13:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * 1488122813 ^ -743078254;
              continue;
            case 14:
              finished = true;
              num1 = (int) num2 * -1429643676 ^ 1539861005;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return finished;
label_9:
        playerStates = this._playerStates;
        num1 = 1753149414;
        goto label_2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 1441026815;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 601983152)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * -200139790 ^ -201283496;
            continue;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * 2105187129 ^ 1594215589;
            continue;
          case 3:
            num1 = (int) num2 * -2083358205 ^ -2084130152;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.Winners.Clear();
            num1 = (int) num2 * -60510707 ^ -989315590;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * -260128051 ^ 520853622;
            continue;
          case 7:
            this._finished = false;
            num1 = (int) num2 * -2023956886 ^ -796498299;
            continue;
          case 8:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 1232079335 ^ 1572246630;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 920297173;
      int index;
      PlayerState playerState;
      bool flag1;
      int num2;
      bool flag2;
      Player player;
      bool morePlanningSprint;
      int planningCardsCount;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 2039516799)) % 28U)
        {
          case 0:
            playerState.Sprint = 0;
            num1 = (int) num3 * -422685799 ^ 2045495673;
            continue;
          case 1:
            playerState.State = State.Playing;
            num1 = (int) num3 * -1669540539 ^ 1292078848;
            continue;
          case 2:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 972971562 ^ -1318506278;
            continue;
          case 3:
            num2 = 0;
            num1 = 1438088;
            continue;
          case 4:
            int num4 = !flag2 ? 1980162930 : (num4 = 181570922);
            num1 = num4 ^ (int) num3 * 345102858;
            continue;
          case 5:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 354987964 ^ -446913244;
            continue;
          case 6:
            index = 0;
            num1 = (int) num3 * -1889231449 ^ -948988997;
            continue;
          case 7:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 1175308087;
            continue;
          case 8:
            int num5 = !flag3 ? -2069701476 : (num5 = -461049965);
            num1 = num5 ^ (int) num3 * -74928834;
            continue;
          case 9:
            int num6 = !morePlanningSprint ? -862211437 : (num6 = -1348369865);
            num1 = num6 ^ (int) num3 * 1397172551;
            continue;
          case 10:
            goto label_1;
          case 11:
            int num7 = !flag1 ? 828580644 : (num7 = 1112233177);
            num1 = num7 ^ (int) num3 * -689700140;
            continue;
          case 12:
            num1 = (int) num3 * 824659191 ^ 431255758;
            continue;
          case 13:
            num1 = (int) num3 * 2083690450 ^ 2109696298;
            continue;
          case 14:
            player = this.Players[index];
            num1 = (int) num3 * -158177024 ^ 1267530735;
            continue;
          case 15:
            num1 = 364376526;
            continue;
          case 16:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1238570183 ^ -1353956814;
            continue;
          case 17:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 406724916;
            continue;
          case 18:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * -1609537891 ^ -2033157062;
            continue;
          case 19:
            num1 = (int) num3 * 845583129 ^ 711755125;
            continue;
          case 20:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 121708910 ^ 1040564694;
            continue;
          case 21:
            num1 = 1271790901;
            continue;
          case 22:
            playerState.Sprint = 1;
            num1 = (int) num3 * 267648318 ^ 1967317971;
            continue;
          case 23:
            ++index;
            num1 = (int) num3 * 1943043643 ^ -1041767660;
            continue;
          case 24:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 1151278403 ^ 1308738315;
            continue;
          case 25:
            goto label_3;
          case 26:
            flag2 = index < this.Players.Length;
            num1 = 1973378319;
            continue;
          case 27:
            flag3 = num2 > 0;
            num1 = 983687731;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      bool flag = this._currentPlayer >= this.Players.Length;
label_1:
      int num1 = -719709234;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1086021617)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 431694791 ^ 951644605;
            continue;
          case 1:
            this.Print((object) Game.\u202D⁬‌⁬‬‫‮‏⁮‍‍‫‎⁪⁭‫⁯​‪‭‮‮‮⁪⁬‭⁯‪‏‬​‎‎⁮‫⁪⁪⁪‭⁯‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1344730357 ^ -1372206902;
            continue;
          case 2:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1219209239 ^ 1686178818;
            continue;
          case 3:
            num1 = (int) num2 * 1310073567 ^ 859371089;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_1;
          case 6:
            this._currentPlayer = 0;
            num1 = (int) num2 * 4366001 ^ -882588472;
            continue;
          case 7:
            int num3 = flag ? -453689173 : (num3 = -736902805);
            num1 = num3 ^ (int) num2 * 1799466432;
            continue;
          case 8:
            this.PlayerTurn(this._currentPlayer);
            num1 = -1623400384;
            continue;
          case 9:
            int num4 = this._currentTurn > 0 ? 1111107403 : (num4 = 1787617504);
            num1 = num4 ^ (int) num2 * 872490023;
            continue;
          case 10:
            this.Print((object) Game.\u202C‎‪⁪‫‍⁮‬‮​⁬‏⁯‮‭⁪⁮‪​⁪⁫⁯‏‭‬‎⁯‬⁬​‏‏⁫‌‍⁬⁯‬⁭‏‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = -532290644;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
      PlayerState playerState1 = this._playerStates[playerIndex];
label_1:
      int num1 = 22272067;
      while (true)
      {
        uint num2;
        int num3;
        bool flag1;
        Card card;
        int num4;
        bool flag2;
        bool flag3;
        PlayerState playerState2;
        int index;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool onlyOneWinner;
        bool flag9;
        bool flag10;
        int num5;
        int num6;
        switch ((num2 = (uint) (num1 ^ 827575989)) % 81U)
        {
          case 0:
            num1 = 1160599174;
            continue;
          case 1:
            num1 = 407840282;
            continue;
          case 2:
            int num7 = !flag3 ? 336807354 : (num7 = 2093465880);
            num1 = num7 ^ (int) num2 * -2090940235;
            continue;
          case 3:
            num1 = 1389316574;
            continue;
          case 4:
            flag7 = index < this._playerStates.Length;
            num1 = 1563699472;
            continue;
          case 5:
            int num8;
            num1 = num8 = num3 == playerIndex ? 2030286820 : (num8 = 1122671455);
            continue;
          case 6:
            num1 = (int) num2 * -113892690 ^ -1317214199;
            continue;
          case 7:
            index = 0;
            num1 = 812889647;
            continue;
          case 8:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -997475935 ^ 563606806;
            continue;
          case 9:
            num1 = (int) num2 * -142629513 ^ 1303324012;
            continue;
          case 10:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag2 ? (object) "ALL " : (object) "", flag9 ? (object) "receives" : (object) "pays", (object) Game.\u206B⁯‍‍‏⁪‪⁪‍‏‪‍⁫‏‏‌‎⁮⁬⁫‭​‏‏⁬​‮‎‮‌‍⁪‪‫⁫⁮⁯⁯​‭‮(num4), flag6 ? (object) "advance" : (object) "stay");
            num1 = 329809274;
            continue;
          case 11:
            num1 = (int) num2 * 267246338 ^ 1485996328;
            continue;
          case 12:
            num1 = 1194479998;
            continue;
          case 13:
            num1 = (int) num2 * 326543229 ^ -2109241144;
            continue;
          case 14:
            num1 = (int) num2 * -1385665126 ^ 969506605;
            continue;
          case 15:
            num1 = 1677474165;
            continue;
          case 16:
            num3 = 0;
            num1 = (int) num2 * -1453366786 ^ 195858914;
            continue;
          case 17:
            flag10 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 1010319770;
            continue;
          case 18:
            num1 = (int) num2 * -649111955 ^ -196281497;
            continue;
          case 19:
            flag6 = true;
            num1 = (int) num2 * -319518798 ^ -1215679547;
            continue;
          case 20:
            int num9 = playerState1.State == 0 ? -902201060 : (num9 = -1391470272);
            num1 = num9 ^ (int) num2 * 1369291143;
            continue;
          case 21:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * 835645057 ^ 1611166315;
            continue;
          case 22:
            num1 = (int) num2 * 1194967253 ^ -1221068850;
            continue;
          case 23:
            int num10 = !flag1 ? 29538900 : (num10 = 1674201463);
            num1 = num10 ^ (int) num2 * 822376706;
            continue;
          case 24:
            num4 = card.Impact;
            num1 = (int) num2 * -128831596 ^ -2039776819;
            continue;
          case 25:
            num1 = (int) num2 * 318725403 ^ 67934706;
            continue;
          case 26:
            num1 = (int) num2 * -1136244859 ^ 1119800459;
            continue;
          case 27:
            num1 = (int) num2 * -1409511449 ^ 131607767;
            continue;
          case 28:
            int num11 = !flag7 ? 1292721959 : (num11 = 1395337798);
            num1 = num11 ^ (int) num2 * 2146567269;
            continue;
          case 29:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 30:
            num1 = (int) num2 * -794882336 ^ -49043009;
            continue;
          case 31:
            int num12 = flag10 ? 1019067177 : (num12 = 1489804107);
            num1 = num12 ^ (int) num2 * -1591406376;
            continue;
          case 32:
            playerState2.State = State.Lose;
            flag4 = !this.Losers.Contains(index);
            num1 = 1784530755;
            continue;
          case 33:
            int num13 = onlyOneWinner ? 1593918526 : (num13 = 781890936);
            num1 = num13 ^ (int) num2 * 447986934;
            continue;
          case 34:
            int num14 = !flag5 ? 192060318 : (num14 = 118611224);
            num1 = num14 ^ (int) num2 * -1882378387;
            continue;
          case 35:
            flag6 = false;
            num1 = 824382468;
            continue;
          case 36:
            goto label_3;
          case 37:
            ++playerState1.Sprint;
            num1 = (int) num2 * -215368464 ^ -833187243;
            continue;
          case 38:
            ++playerState1.Sprint;
            num1 = (int) num2 * -148048438 ^ 1448952005;
            continue;
          case 39:
            flag6 = num5 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u200E‬‫⁮‎‍‎‭‬⁫⁪‎‮‮‏​‌‌‍​‮⁮‬⁯‭‎⁫⁮⁯‪‌‫⁮⁭⁪‪‫‬‬‎‮(0, num5);
            num1 = (int) num2 * 310283012 ^ 2119059554;
            continue;
          case 40:
            this.Print((object) Game.\u202D⁬‌⁬‬‫‮‏⁮‍‍‫‎⁪⁭‫⁯​‪‭‮‮‮⁪⁬‭⁯‪‏‬​‎‎⁮‫⁪⁪⁪‭⁯‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -1487353357 ^ 234950190;
            continue;
          case 41:
            flag3 = !flag2;
            num1 = (int) num2 * -1037063151 ^ 1601504274;
            continue;
          case 42:
            num1 = (int) num2 * -400802397 ^ -2107205839;
            continue;
          case 43:
            num1 = (int) num2 * 305175728 ^ -2055057924;
            continue;
          case 44:
            num1 = (int) num2 * 1122576552 ^ -1699828325;
            continue;
          case 45:
            int num15 = !flag8 ? -54419081 : (num15 = -2006845188);
            num1 = num15 ^ (int) num2 * 1827469167;
            continue;
          case 46:
            this._finished = true;
            num1 = (int) num2 * -1743423511 ^ 2069959511;
            continue;
          case 47:
            card = this.DrawCard();
            flag9 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 132884770 ^ 1008994636;
              continue;
            }
            num6 = 0;
            break;
          case 48:
            num1 = 1214032464;
            continue;
          case 49:
            num1 = (int) num2 * -1183390237 ^ 61058563;
            continue;
          case 50:
            this.Losers.Add(index);
            num1 = (int) num2 * -1689923146 ^ 207631377;
            continue;
          case 51:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202D⁬‌⁬‬‫‮‏⁮‍‍‫‎⁪⁭‫⁯​‪‭‮‮‮⁪⁬‭⁯‪‏‬​‎‎⁮‫⁪⁪⁪‭⁯‮("\t", playerState3 != null ? Game.\u202E⁫⁭‮‫⁫⁯⁫⁭⁮​‬‏⁯⁭‌⁮⁯⁪‫⁪⁮‬‎⁭‏⁮⁫‭‮‎‌‭⁫‬⁬⁪⁪⁬⁫‮((object) playerState3) : (string) null));
            num1 = 167854861;
            continue;
          case 52:
            int num16 = playerState1.Resources < 0 ? -1958751523 : (num16 = -1128696391);
            num1 = num16 ^ (int) num2 * -1551226817;
            continue;
          case 53:
            num1 = 347219171;
            continue;
          case 54:
            flag6 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1028491637 ^ -263692345;
            continue;
          case 55:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 326686784 ^ -1342836356;
            continue;
          case 56:
            ++index;
            num1 = 812889647;
            continue;
          case 57:
            num1 = (int) num2 * -211835424 ^ -1295952319;
            continue;
          case 58:
            int num17;
            num1 = num17 = this.Losers.Contains(num3) ? 158090396 : (num17 = 1874318112);
            continue;
          case 59:
            int num18;
            num1 = num18 = num3 >= this._playerStates.Length ? 1643078798 : (num18 = 2099420851);
            continue;
          case 60:
            playerState2.Resources -= Game.\u200E‬‫⁮‎‍‎‭‬⁫⁪‎‮‮‏​‌‌‍​‮⁮‬⁯‭‎⁫⁮⁯‪‌‫⁮⁭⁪‪‫‬‬‎‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -1725316379 ^ -1848443361;
            continue;
          case 61:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1604245771 ^ 1052741397;
            continue;
          case 62:
            flag1 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1971975025 ^ 36259817;
            continue;
          case 63:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 995404591 ^ 1589683232;
            continue;
          case 64:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 677431445 ^ -1985281291;
            continue;
          case 65:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1868232670 ^ -1792159402;
            continue;
          case 66:
            num1 = (int) num2 * 1192993116 ^ 1231945422;
            continue;
          case 67:
            num1 = 820481307;
            continue;
          case 68:
            flag8 = playerState2.Resources >= 0;
            num1 = (int) num2 * -959387539 ^ 2003328209;
            continue;
          case 69:
            num1 = (int) num2 * 810126895 ^ 1885193659;
            continue;
          case 70:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -1787149697 ^ 1976216581;
            continue;
          case 71:
            ++num3;
            num1 = 1095203775;
            continue;
          case 72:
            num1 = (int) num2 * 737158142 ^ -1965813258;
            continue;
          case 73:
            num1 = (int) num2 * 991414096 ^ -180136744;
            continue;
          case 74:
            int num19;
            num1 = num19 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? 1866266663 : (num19 = 95159544);
            continue;
          case 75:
            int num20 = flag4 ? -1969966302 : (num20 = -77778968);
            num1 = num20 ^ (int) num2 * 333172659;
            continue;
          case 76:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1408559184 ^ 1146986801;
            continue;
          case 77:
            int num21;
            num1 = num21 = playerState1.Sprint < 0 ? 191944811 : (num21 = 92841871);
            continue;
          case 78:
            goto label_1;
          case 79:
            flag5 = flag6;
            num1 = 2009724894;
            continue;
          case 80:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 1103207093 ^ 871658352;
            continue;
          default:
            goto label_86;
        }
        flag2 = num6 != 0;
        int num22;
        num1 = num22 = flag9 ? 274793745 : (num22 = 48566777);
      }
label_3:
      return;
label_86:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1486750100;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -483693408)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = !flag ? 10320746 : (num3 = 1915400930);
            num1 = num3 ^ (int) num2 * -1026263073;
            continue;
          case 2:
            num1 = (int) num2 * -2069058106 ^ -1593570696;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * 350664469 ^ 896917875;
            continue;
          case 4:
            card1 = this._deck[0];
            num1 = -374538243;
            continue;
          case 6:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 314290543 ^ 1320127744;
            continue;
          case 7:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1821197323 ^ 2027572213;
            continue;
          case 8:
            card2 = card1;
            num1 = (int) num2 * -577542293 ^ -1683509683;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -1549485212;
      int index;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -86711149)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -1873803984 ^ 1585933658;
            continue;
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202E⁫⁭‮‫⁫⁯⁫⁭⁮​‬‏⁯⁭‌⁮⁯⁪‫⁪⁮‬‎⁭‏⁮⁫‭‮‎‌‭⁫‬⁬⁪⁪⁬⁫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202A⁯⁪⁬⁬‮‎⁭⁬⁫‬‮⁯‏⁫‬⁫‎‫‌‪⁫⁪⁮‍‏⁭⁬‏‌‌⁮‏⁭‌‎⁯‭‍‬‮(strArray);
            ++index;
            num1 = -792910385;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * 1218287546 ^ -1594820099;
            continue;
          case 3:
            flag = index < this._playerStates.Length;
            num1 = -1490811123;
            continue;
          case 4:
            int num3 = flag ? -414295391 : (num3 = -146217674);
            num1 = num3 ^ (int) num2 * 817661316;
            continue;
          case 6:
            str1 = "";
            num1 = (int) num2 * -111026115 ^ -1220843844;
            continue;
          case 7:
            goto label_1;
          case 8:
            index = 0;
            num1 = (int) num2 * -1624543774 ^ 1806105767;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1635501220;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1600550459)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = this.ToString(false);
            num1 = (int) num2 * -1016345113 ^ -345536635;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u202C⁫‫‍‫‬‏‌‭⁭‪⁬‌‭​⁮​⁫‮‪‫‭⁯‎‮‭⁮⁯‌‎‎‏​‫⁮‬⁬⁯‌‪‮(this._buffer, Game.\u200F‌‬⁬‮⁯⁫⁫‌‬‮‏​⁪⁮‌‭⁬‎‌‮⁫⁭⁮‌‌‮‫‎‪⁫‫‬‫‬‏‌‍⁭⁪‮(Game.\u202E⁫⁭‮‫⁫⁯⁫⁭⁮​‬‏⁯⁭‌⁮⁯⁪‫⁪⁮‬‎⁭‏⁮⁫‭‮‎‌‭⁫‬⁬⁪⁪⁬⁫‮(text), more));

    static Random \u200C‫‭‬‌‬‍‭⁪‫‏‫​⁯‌‭⁫⁪‬‮‬‮‪‭‮‍⁯‎‪‌‬‬‮‪‫‌‌‬​‍‮([In] int obj0) => new Random(obj0);

    static string \u202C‎‪⁪‫‍⁮‬‮​⁬‏⁯‮‭⁪⁮‪​⁪⁫⁯‏‭‬‎⁯‬⁬​‏‏⁫‌‍⁬⁯‬⁭‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202D⁬‌⁬‬‫‮‏⁮‍‍‫‎⁪⁭‫⁯​‪‭‮‮‮⁪⁬‭⁯‪‏‬​‎‎⁮‫⁪⁪⁪‭⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200E‬‫⁮‎‍‎‭‬⁫⁪‎‮‮‏​‌‌‍​‮⁮‬⁯‭‎⁫⁮⁯‪‌‫⁮⁭⁪‪‫‬‬‎‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206B⁯‍‍‏⁪‪⁪‍‏‪‍⁫‏‏‌‎⁮⁬⁫‭​‏‏⁬​‮‎‮‌‍⁪‪‫⁫⁮⁯⁯​‭‮([In] int obj0) => Math.Abs(obj0);

    static string \u202E⁫⁭‮‫⁫⁯⁫⁭⁮​‬‏⁯⁭‌⁮⁯⁪‫⁪⁮‬‎⁭‏⁮⁫‭‮‎‌‭⁫‬⁬⁪⁪⁬⁫‮([In] object obj0) => obj0.ToString();

    static string \u202A⁯⁪⁬⁬‮‎⁭⁬⁫‬‮⁯‏⁫‬⁫‎‫‌‪⁫⁪⁮‍‏⁭⁬‏‌‌⁮‏⁭‌‎⁯‭‍‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F‌‬⁬‮⁯⁫⁫‌‬‮‏​⁪⁮‌‭⁬‎‌‮⁫⁭⁮‌‌‮‫‎‪⁫‫‬‫‬‏‌‍⁭⁪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202C⁫‫‍‫‬‏‌‭⁭‪⁬‌‭​⁮​⁫‮‪‫‭⁯‎‮‭⁮⁯‌‎‎‏​‫⁮‬⁬⁯‌‪‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
