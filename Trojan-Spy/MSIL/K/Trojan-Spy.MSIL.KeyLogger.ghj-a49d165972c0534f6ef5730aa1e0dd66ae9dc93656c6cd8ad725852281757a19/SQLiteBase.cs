// Decompiled with JetBrains decompiler
// Type: Roy.SQLiteBase
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace Roy
{
  public class SQLiteBase
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr database;

    [DllImport("kernel32")]
    private static extern IntPtr HeapAlloc(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32")]
    private static extern IntPtr GetProcessHeap();

    [DllImport("kernel32")]
    private static extern int lstrlen(IntPtr str);

    [DllImport("sqlite3")]
    private static extern int sqlite3_open(IntPtr fileName, ref IntPtr database);

    [DllImport("sqlite3")]
    private static extern int sqlite3_close(IntPtr database);

    [DllImport("sqlite3")]
    private static extern int sqlite3_exec(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      ref IntPtr error);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_errmsg(IntPtr database);

    [DllImport("sqlite3")]
    private static extern int sqlite3_prepare_v2(
      IntPtr database,
      IntPtr query,
      int length,
      ref IntPtr statement,
      ref IntPtr tail);

    [DllImport("sqlite3")]
    private static extern int sqlite3_step(IntPtr statement);

    [DllImport("sqlite3")]
    private static extern int sqlite3_column_count(IntPtr statement);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_name(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern int sqlite3_column_type(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern int sqlite3_column_int(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern double sqlite3_column_double(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_text(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_blob(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern IntPtr sqlite3_column_table_name(IntPtr statement, int columnNumber);

    [DllImport("sqlite3")]
    private static extern int sqlite3_finalize(IntPtr handle);

    public SQLiteBase() => this.database = IntPtr.Zero;

    public SQLiteBase(string baseName) => this.OpenDatabase(baseName);

    public void OpenDatabase(string baseName)
    {
      if (SQLiteBase.sqlite3_open(this.StringToPointer(baseName), ref this.database) != 0)
      {
        this.database = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void CloseDatabase()
    {
      if (!(this.database != IntPtr.Zero))
        return;
      SQLiteBase.sqlite3_close(this.database);
    }

    public ArrayList GetTables()
    {
      DataTable dataTable = this.ExecuteQuery("SELECT name FROM sqlite_master WHERE type IN (");
      ArrayList tables = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          tables.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return tables;
    }

    public void ExecuteNonQuery(string query)
    {
      IntPtr error;
      SQLiteBase.sqlite3_exec(this.database, this.StringToPointer(query), IntPtr.Zero, IntPtr.Zero, ref error);
      if (error != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.PointerToString(SQLiteBase.sqlite3_errmsg(error)));
    }

    public DataTable ExecuteQuery(string query)
    {
      IntPtr statement;
      IntPtr tail;
      SQLiteBase.sqlite3_prepare_v2(this.database, this.StringToPointer(query), this.GetPointerLenght(this.StringToPointer(query)), ref statement, ref tail);
      DataTable table = new DataTable();
      int num = this.ReadFirstRow(statement, ref table);
      while (num == 100)
        num = this.ReadNextRow(statement, ref table);
      SQLiteBase.sqlite3_finalize(statement);
      return table;
    }

    private int ReadFirstRow(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (SQLiteBase.sqlite3_step(statement) == 100)
      {
        int num1 = SQLiteBase.sqlite3_column_count(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.PointerToString(SQLiteBase.sqlite3_column_name(statement, columnNumber));
          switch (SQLiteBase.sqlite3_column_type(statement, columnNumber))
          {
            case 1:
              table.Columns.Add(columnName, Type.GetType("System.Int32"));
              objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_int(statement, columnNumber);
              break;
            case 2:
              table.Columns.Add(columnName, Type.GetType("System.Single"));
              objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_double(statement, columnNumber);
              break;
            case 3:
              table.Columns.Add(columnName, Type.GetType("System.String"));
              objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_text(statement, columnNumber));
              break;
            case 4:
              table.Columns.Add(columnName, Type.GetType("System.String"));
              objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_blob(statement, columnNumber));
              break;
            default:
              table.Columns.Add(columnName, Type.GetType("System.String"));
              objArray[columnNumber] = (object) "";
              break;
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return SQLiteBase.sqlite3_step(statement);
    }

    private int ReadNextRow(IntPtr statement, ref DataTable table)
    {
      int num1 = SQLiteBase.sqlite3_column_count(statement);
      object[] objArray = new object[checked (num1 - 1 + 1)];
      int num2 = checked (num1 - 1);
      int columnNumber = 0;
      while (columnNumber <= num2)
      {
        switch (SQLiteBase.sqlite3_column_type(statement, columnNumber))
        {
          case 1:
            objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_int(statement, columnNumber);
            break;
          case 2:
            objArray[columnNumber] = (object) SQLiteBase.sqlite3_column_double(statement, columnNumber);
            break;
          case 3:
            objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_text(statement, columnNumber));
            break;
          case 4:
            objArray[columnNumber] = (object) this.PointerToString(SQLiteBase.sqlite3_column_blob(statement, columnNumber));
            break;
          default:
            objArray[columnNumber] = (object) "";
            break;
        }
        checked { ++columnNumber; }
      }
      table.Rows.Add(objArray);
      return SQLiteBase.sqlite3_step(statement);
    }

    private IntPtr StringToPointer(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr pointer = SQLiteBase.HeapAlloc(SQLiteBase.GetProcessHeap(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, pointer, bytes1.Length);
      Marshal.WriteByte(pointer, bytes1.Length, (byte) 0);
      return pointer;
    }

    private string PointerToString(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int pointerLenght = this.GetPointerLenght(ptr);
      byte[] numArray = new byte[checked (pointerLenght - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, pointerLenght);
      return utF8.GetString(numArray, 0, pointerLenght);
    }

    private int GetPointerLenght(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : SQLiteBase.lstrlen(ptr);

    public enum SQLiteDataTypes
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
