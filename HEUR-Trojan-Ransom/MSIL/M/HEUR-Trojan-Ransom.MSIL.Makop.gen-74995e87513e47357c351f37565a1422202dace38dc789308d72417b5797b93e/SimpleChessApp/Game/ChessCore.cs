// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: هx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 374CAC08-464B-4E84-B463-5CFD524FF26C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-74995e87513e47357c351f37565a1422202dace38dc789308d72417b5797b93e.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = -671599549;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1422828646)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -2054024024 ^ -16760488;
            continue;
          case 1:
            this.ChessBoard = b;
            this.resetFlags();
            num1 = (int) num2 * 1967106003 ^ 370384965;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
label_1:
      int num1 = 2006036694;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 117902167)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -1385010472 ^ 1481377964;
            continue;
          case 1:
            num1 = (int) num2 * 772797786 ^ 1068945127;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.ChessBoard.Restart();
            num1 = (int) num2 * 2086110787 ^ 660227913;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.resetFlags();
            num1 = (int) num2 * -559355026 ^ -396700793;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = -146681972;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1471445049)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * -1344184025 ^ -203013812;
            continue;
          case 3:
            this.DisableTurn = turn;
            num1 = (int) num2 * 1250887621 ^ -1794183854;
            continue;
          case 4:
            num1 = (int) num2 * 1447304133 ^ -481349630;
            continue;
          case 5:
            this.TurnId = 1;
            num1 = (int) num2 * 701575984 ^ 623883601;
            continue;
          case 6:
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * -614856189 ^ 514747498;
            continue;
          case 7:
            this.Turns.Clear();
            num1 = (int) num2 * 1903413319 ^ -240100950;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 545296359;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 273616208)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -1435176913 ^ 1794045750;
            continue;
          case 3:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * 1831706440 ^ -1648634035;
            continue;
          case 4:
            num1 = (int) num2 * -1918404988 ^ 1734792319;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -1366388579;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1254900858)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 732869216 ^ -147400893;
            continue;
          case 3:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            this.resetFlags(true);
            num1 = (int) num2 * -728027591 ^ 176260531;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = -747897591;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2096237107)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 862606189 ^ -1337587899;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).TestCastling();
            num1 = (int) num2 * 1644937112 ^ -567429212;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            this.resetFlags(true);
            num1 = (int) num2 * 1473686872 ^ -351790189;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 156477047;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 589259430)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * -967908145 ^ 1686476610;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.resetFlags(true);
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = -73574452;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1220674430)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 531740967 ^ 404365415;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -552597620 ^ 416923135;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPromotion()
    {
      new DebugChess(this.ChessBoard).TestPromotion();
label_1:
      int num1 = -395907157;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1493964019)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1573875992 ^ -926650310;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 488073100;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1915803900)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -1595184868 ^ -1338046918;
            continue;
          case 3:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * 30438282 ^ -1123087304;
            continue;
          case 4:
            num1 = (int) num2 * 309840225 ^ -725371957;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }
  }
}
