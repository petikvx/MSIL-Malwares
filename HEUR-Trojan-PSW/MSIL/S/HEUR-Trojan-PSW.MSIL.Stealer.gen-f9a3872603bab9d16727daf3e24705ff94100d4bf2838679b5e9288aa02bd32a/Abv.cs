// Decompiled with JetBrains decompiler
// Type: ib.Abv
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using BinaryFileSchemaGUI.Properties;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace ib
{
  public class Abv : Form
  {
    private string AMT;
    private IContainer FMR;
    private ToolStrip EMG;
    private ToolStripButton XMa;
    private ybT xM4;
    private SaveFileDialog lMx;
    private static Abv rKs;

    public Abv(string _param1, string _param2)
    {
      Jnb.vbPcO4();
      this.AMT = "Parser";
      this.FMR = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.YLz();
      this.xM4.Text = _param1;
      this.AMT = _param2;
      int num1 = 0;
      if (false)
        goto label_3;
label_1:
      switch (num1)
      {
        case 0:
          return;
        default:
          return;
      }
label_3:
      int num2;
      num1 = num2;
      goto label_1;
    }

    private void OL3(object _param1, EventArgs _param2)
    {
      this.lMx.FileName = (string) Abv.sKY((object) this.AMT, (object) "Parser.cs");
      if (this.lMx.ShowDialog() != DialogResult.OK)
        return;
      int num1 = 0;
      if (Abv.dKf() != null)
        goto label_4;
label_1:
      switch (num1)
      {
        default:
          this.xM4.SaveFile((string) Abv.rKe((object) this.lMx), RichTextBoxStreamType.PlainText);
          return;
      }
label_4:
      int num2;
      num1 = num2;
      goto label_1;
    }

    protected override void Dispose(bool _param1)
    {
      if (_param1 && this.FMR != null)
        goto label_5;
label_3:
      base.Dispose(_param1);
      int num = 0;
      if (!Abv.EKT())
        goto label_4;
label_1:
      switch (num)
      {
        case 0:
          return;
        default:
          return;
      }
label_4:
      num = 0;
      goto label_1;
label_5:
      this.FMR.Dispose();
      goto label_3;
    }

    private void YLz()
    {
      this.EMG = new ToolStrip();
      this.XMa = new ToolStripButton();
      this.xM4 = new ybT();
      this.lMx = new SaveFileDialog();
      this.EMG.SuspendLayout();
      this.SuspendLayout();
      int num1 = 2;
      if (!Abv.EKT())
        goto label_9;
label_2:
      while (true)
      {
        switch (num1)
        {
          case 1:
            Abv.hKn((object) this.EMG, (object) "toolStrip1");
            this.EMG.Size = new Size(783, 25);
            this.EMG.TabIndex = 0;
            num1 = Abv.EKT() ? 0 : 0;
            continue;
          case 2:
            this.EMG.Items.AddRange(new ToolStripItem[1]
            {
              (ToolStripItem) this.XMa
            });
            this.EMG.Location = new Point(0, 0);
            if (Abv.EKT())
            {
              num1 = 1;
              continue;
            }
            break;
          case 3:
            this.XMa.Text = "Save code";
            this.XMa.Click += new EventHandler(this.OL3);
            this.xM4.AcceptsTab = true;
            this.xM4.IMh(true);
            this.xM4.Dock = DockStyle.Fill;
            this.xM4.Font = new Font("Courier New", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
            this.xM4.Location = new Point(0, 25);
            this.xM4.Name = "richEditSourceCode";
            if (Abv.dKf() == null)
            {
              num1 = 4;
              continue;
            }
            break;
          case 4:
            this.xM4.Size = new Size(783, 445);
            this.xM4.TabIndex = 1;
            this.xM4.Text = "";
            num1 = Abv.dKf() == null ? 5 : 3;
            continue;
          case 5:
            this.lMx.DefaultExt = "cs";
            Abv.fKb((object) this.lMx, (object) "C# files|*.cs|All files|*.*");
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(783, 470);
            Abv.eK9((object) this.Controls, (object) this.xM4);
            this.Controls.Add((Control) this.EMG);
            this.Name = "CodeOutput";
            this.Text = "Code Output";
            this.EMG.ResumeLayout(false);
            num1 = 6;
            continue;
          case 6:
            this.EMG.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();
            num1 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            this.EMG.Text = "toolStrip1";
            // ISSUE: reference to a compiler-generated method
            this.XMa.Image = (Image) Resources.QMX();
            this.XMa.ImageTransparentColor = Color.Magenta;
            this.XMa.Name = "toolStripSave";
            this.XMa.Size = new Size(80, 22);
            if (Abv.EKT())
            {
              num1 = 3;
              continue;
            }
            break;
        }
        int num2;
        num1 = num2;
      }
label_3:
      return;
label_9:
      num1 = 0;
      goto label_2;
    }

    internal static bool EKT() => Abv.rKs == null;

    internal static Abv dKf() => Abv.rKs;

    internal static object sKY([In] object obj0, [In] object obj1) => (object) ((string) obj0 + (string) obj1);

    internal static object rKe([In] object obj0) => (object) ((FileDialog) obj0).FileName;

    internal static void hKn([In] object obj0, [In] object obj1) => ((Control) obj0).Name = (string) obj1;

    internal static void fKb([In] object obj0, [In] object obj1) => ((FileDialog) obj0).Filter = (string) obj1;

    internal static void eK9([In] object obj0, [In] object obj1) => ((Control.ControlCollection) obj0).Add((Control) obj1);
  }
}
