// Decompiled with JetBrains decompiler
// Type: Catfood.Shapefile.Header
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System;

namespace Catfood.Shapefile
{
  internal class Header
  {
    public const int HeaderLength = 100;
    private const int ExpectedFileCode = 9994;
    private const int ExpectedVersion = 1000;
    private int _fileCode;
    private int _fileLength;
    private int _version;
    private ShapeType _shapeType;
    private double _xMin;
    private double _yMin;
    private double _xMax;
    private double _yMax;
    private double _zMin;
    private double _zMax;
    private double _mMin;
    private double _mMax;

    public Header(byte[] headerBytes)
    {
      if (headerBytes == null)
        throw new ArgumentNullException(nameof (headerBytes));
      this._fileCode = headerBytes.Length == 100 ? EndianBitConverter.ToInt32(headerBytes, 0, ProvidedOrder.Big) : throw new InvalidOperationException(string.Format("headerBytes must be {0} bytes long", (object) 100));
      if (this._fileCode != 9994)
        throw new InvalidOperationException(string.Format("Header File code is {0}, expected {1}", (object) this._fileCode, (object) 9994));
      this._version = EndianBitConverter.ToInt32(headerBytes, 28, ProvidedOrder.Little);
      if (this._version != 1000)
        throw new InvalidOperationException(string.Format("Header version is {0}, expected {1}", (object) this._version, (object) 1000));
      this._fileLength = EndianBitConverter.ToInt32(headerBytes, 24, ProvidedOrder.Big);
      this._shapeType = (ShapeType) EndianBitConverter.ToInt32(headerBytes, 32, ProvidedOrder.Little);
      this._xMin = EndianBitConverter.ToDouble(headerBytes, 36, ProvidedOrder.Little);
      this._yMin = EndianBitConverter.ToDouble(headerBytes, 44, ProvidedOrder.Little);
      this._xMax = EndianBitConverter.ToDouble(headerBytes, 52, ProvidedOrder.Little);
      this._yMax = EndianBitConverter.ToDouble(headerBytes, 60, ProvidedOrder.Little);
      this._zMin = EndianBitConverter.ToDouble(headerBytes, 68, ProvidedOrder.Little);
      this._zMax = EndianBitConverter.ToDouble(headerBytes, 76, ProvidedOrder.Little);
      this._mMin = EndianBitConverter.ToDouble(headerBytes, 84, ProvidedOrder.Little);
      this._mMax = EndianBitConverter.ToDouble(headerBytes, 92, ProvidedOrder.Little);
    }

    public int FileCode => this._fileCode;

    public int FileLength => this._fileLength;

    public int Version => this._version;

    public ShapeType ShapeType => this._shapeType;

    public double XMin => this._xMin;

    public double YMin => this._yMin;

    public double XMax => this._xMax;

    public double YMax => this._yMax;

    public double ZMin => this._zMin;

    public double ZMax => this._zMax;

    public double MMin => this._mMin;

    public double MMax => this._mMax;
  }
}
