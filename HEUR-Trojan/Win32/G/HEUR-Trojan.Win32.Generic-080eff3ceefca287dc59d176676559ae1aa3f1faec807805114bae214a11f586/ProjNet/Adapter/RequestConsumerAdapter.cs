// Decompiled with JetBrains decompiler
// Type: ProjNet.Adapter.RequestConsumerAdapter
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Identifiers;
using TYPELIBA.Wrappers;

namespace ProjNet.Adapter
{
  internal class RequestConsumerAdapter
  {
    private ValidationState _Decorator;
    private TextReader _Context;
    private string _Comparator;
    private bool _Identifier;
    private int manager;
    private int _Indexer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public RequestConsumerAdapter(TextReader def, bool containsselection)
    {
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            ManagerParamsID.NewExpression();
            if (!RequestConsumerAdapter.CancelDispatcher())
            {
              num = 4;
              continue;
            }
            goto case 6;
          case 1:
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            if (def != null)
            {
              this._Context = def;
              num = 6;
              continue;
            }
            goto label_5;
          case 4:
            this._Identifier = false;
            if (RequestConsumerAdapter.RestartDispatcher())
            {
              num = 5;
              continue;
            }
            goto case 0;
          case 5:
            this.manager = 1;
            this._Indexer = 1;
            goto case 1;
          case 6:
            this._Identifier = containsselection;
            if (RequestConsumerAdapter.RestartDispatcher())
            {
              num = 7;
              continue;
            }
            goto case 1;
          case 7:
            goto label_11;
          default:
            num = 1;
            continue;
        }
      }
label_5:
      throw new ArgumentNullException("reader");
label_11:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int MoveObject() => this.manager;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int ConcatObject() => this._Indexer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public double WriteObject()
    {
      int num1 = 4;
      string s;
      double num2;
      while (true)
      {
        int num3 = num1;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              goto label_6;
            case 1:
            case 3:
              goto label_1;
            case 4:
              s = this.CalculateObject();
              num3 = 3;
              continue;
            case 5:
              goto label_9;
            default:
              num3 = 0;
              continue;
          }
        }
label_1:
        bool flag = this.CustomizeObject() == (ValidationState) 1;
label_6:
        if (flag)
        {
          num2 = double.Parse(s, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat);
          num1 = 5;
        }
        else
          break;
      }
      throw new ArgumentException(string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "The token '{0}' is not a number at line {1} column {2}.", new object[3]
      {
        (object) s,
        (object) this.MoveObject(),
        (object) this.ConcatObject()
      }));
label_9:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CalculateObject() => this._Comparator;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ValidationState CustomizeObject() => this._Decorator;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ValidationState InvokeObject(bool isparam)
    {
      int num1 = 5;
      if (true)
        goto label_9;
label_1:
      bool flag;
      int num2;
      ValidationState validationState1;
      if (flag)
      {
        num2 = 0;
        goto label_8;
      }
      else
        validationState1 = this.PostObject();
label_4:
label_5:
      ValidationState validationState2 = validationState1;
      num2 = 6;
label_8:
      num1 = num2;
label_9:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_6;
          case 1:
          case 2:
            goto label_1;
          case 3:
          case 4:
            goto label_4;
          case 5:
            goto label_3;
          case 6:
            goto label_11;
          default:
            num1 = 4;
            continue;
        }
      }
label_3:
      flag = isparam;
      num2 = 2;
      goto label_8;
label_6:
      validationState1 = this.TestObject();
      goto label_5;
label_11:
      return validationState2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ValidationState ReadObject() => this.InvokeObject(this._Identifier);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private ValidationState PostObject()
    {
      int num1 = 6;
      ValidationState decorator;
      while (true)
      {
        int num2 = num1;
        char first1;
        char first2;
        bool flag1;
        ValidationState validationState;
        bool flag2;
        int num3;
        char[] buffer;
        char[] chArray;
        ASCIIEncoding asciiEncoding;
        while (true)
        {
          int num4;
          switch (num2)
          {
            case 0:
              if (this._Decorator != validationState)
              {
                num3 = 0;
                goto case 13;
              }
              else
              {
                if (this._Decorator != (ValidationState) 5)
                {
                  num4 = 0;
                  break;
                }
                num2 = 14;
                continue;
              }
            case 1:
              goto label_21;
            case 2:
            case 11:
              flag1 = false;
              flag2 = false;
              asciiEncoding = new ASCIIEncoding();
              chArray = (char[]) null;
              goto label_44;
            case 3:
              first2 = chArray[0];
              this._Decorator = RequestConsumerAdapter.FlushObject(first1);
              validationState = RequestConsumerAdapter.FlushObject(first2);
              if (flag2 && first1 == '_')
                this._Decorator = (ValidationState) 0;
              if (flag2 && this._Decorator == (ValidationState) 1)
                this._Decorator = (ValidationState) 0;
              if (this._Decorator == (ValidationState) 0 && first2 == '_')
              {
                validationState = (ValidationState) 0;
                if (RequestConsumerAdapter.RestartDispatcher())
                {
                  num2 = 15;
                  continue;
                }
                goto case 5;
              }
              else
                goto case 10;
            case 4:
              goto label_33;
            case 5:
              flag1 = true;
              num2 = 7;
              continue;
            case 6:
              validationState = (ValidationState) 3;
              if (!RequestConsumerAdapter.CancelDispatcher())
              {
                num2 = 9;
                continue;
              }
              goto case 3;
            case 7:
              goto label_15;
            case 8:
            case 17:
              validationState = (ValidationState) 1;
              goto case 5;
            case 9:
              goto label_24;
            case 10:
              if (this._Decorator == (ValidationState) 0 && validationState == (ValidationState) 1)
              {
                validationState = (ValidationState) 0;
                flag2 = true;
              }
              if (first1 != '-' || validationState != (ValidationState) 1 || flag1)
                goto case 16;
              else
                goto label_20;
            case 12:
              goto label_5;
            case 13:
label_43:
              goto label_44;
            case 14:
              num4 = first1 != '-' ? 1 : 0;
              break;
            case 15:
              goto label_35;
            case 16:
              if (flag1 && validationState == (ValidationState) 1)
              {
                if (true)
                {
                  num2 = 12;
                  continue;
                }
                goto label_24;
              }
              else
                goto label_6;
            case 18:
              goto label_46;
            default:
              goto label_14;
          }
          if (num4 == 0)
          {
            num3 = this._Context.Read(buffer, 0, 1);
            goto label_43;
          }
          else
            break;
label_44:
          if (num3 == 0)
          {
            decorator = this._Decorator;
            num2 = 18;
          }
          else
            goto label_37;
        }
        num1 = 1;
        continue;
label_5:
        int num5 = first1 == '.' ? 1 : 0;
        goto label_7;
label_6:
        num5 = 0;
label_7:
        if (num5 != 0)
          this._Decorator = (ValidationState) 1;
        if (this._Decorator == (ValidationState) 1 && first2 == '.' && !flag1)
        {
          num1 = 17;
          continue;
        }
        goto label_15;
label_14:
        num1 = 5;
        continue;
label_15:
        ++this._Indexer;
        if (this._Decorator == (ValidationState) 2)
        {
          num1 = 4;
          continue;
        }
        goto label_34;
label_20:
        this._Decorator = (ValidationState) 1;
        validationState = (ValidationState) 1;
        num1 = 16;
        continue;
label_21:
        num3 = 0;
        num1 = 13;
        continue;
label_24:
        buffer = new char[1];
        this._Comparator = "";
        this._Decorator = (ValidationState) 3;
        num3 = this._Context.Read(buffer, 0, 1);
        num1 = 11;
        continue;
label_33:
        ++this.manager;
        this._Indexer = 1;
label_34:
        this._Comparator += first1.ToString();
        num1 = 0;
        continue;
label_35:
        flag2 = true;
        num1 = 10;
        continue;
label_37:
        byte[] bytes = new byte[1]
        {
          (byte) this._Context.Peek()
        };
        chArray = asciiEncoding.GetChars(bytes);
        first1 = buffer[0];
        num1 = 3;
      }
label_46:
      return decorator;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static ValidationState FlushObject(char first)
    {
      int num1 = 5;
      if (true)
        goto label_11;
label_1:
      bool flag;
      ValidationState validationState;
      int num2;
      if (flag)
      {
        validationState = (ValidationState) 1;
        num2 = 4;
        goto label_10;
      }
      else if (char.IsLetter(first))
      {
        validationState = (ValidationState) 0;
        goto label_14;
      }
      else if (first == '\n')
      {
        validationState = (ValidationState) 2;
        goto label_14;
      }
      else if (!char.IsWhiteSpace(first) && !char.IsControl(first))
      {
        validationState = (ValidationState) 5;
        num2 = 7;
        goto label_10;
      }
label_4:
      validationState = (ValidationState) 4;
      num2 = 6;
label_10:
      num1 = num2;
label_11:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_4;
          case 1:
          case 3:
            goto label_1;
          case 2:
          case 4:
          case 6:
          case 7:
            goto label_14;
          case 5:
            goto label_13;
          default:
            num1 = 0;
            continue;
        }
      }
label_13:
      flag = char.IsDigit(first);
      num2 = 3;
      goto label_10;
label_14:
      return validationState;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private ValidationState TestObject()
    {
      int num1 = 5;
      if (true)
        goto label_9;
label_1:
      ValidationState validationState1 = this.PostObject();
      if (!RequestConsumerAdapter.CancelDispatcher())
      {
        num1 = 2;
        goto label_9;
      }
label_2:
      int num2 = validationState1 == (ValidationState) 2 ? 1 : 0;
label_4:
      ValidationState validationState2;
      int num3;
      if (num2 == 0)
      {
        validationState2 = validationState1;
        num3 = 6;
      }
      else
      {
        validationState1 = this.PostObject();
        int num4 = 4;
        num1 = RequestConsumerAdapter.CancelDispatcher() ? num4 : num4;
        goto label_9;
      }
label_8:
      num1 = num3;
label_9:
      switch (num1)
      {
        case 0:
        case 3:
          goto label_2;
        case 1:
        case 2:
        case 4:
          if (validationState1 == (ValidationState) 4)
          {
            num2 = 1;
            goto label_4;
          }
          else
            goto label_2;
        case 5:
          goto label_1;
        case 6:
          return validationState2;
        default:
          num3 = 0;
          goto label_8;
      }
    }

    internal static bool RestartDispatcher() => true;

    internal static bool CancelDispatcher() => false;
  }
}
