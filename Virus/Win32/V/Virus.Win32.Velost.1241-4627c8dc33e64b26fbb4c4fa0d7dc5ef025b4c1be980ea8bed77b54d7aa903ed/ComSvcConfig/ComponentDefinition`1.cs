// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.ComponentDefinition`1
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class ComponentDefinition<T>
  {
    private bool allInterfaces;
    private T component;
    private List<InterfaceDefination<T>> interfaces;

    public bool AllInterfaces => this.allInterfaces;

    public T Component => this.component;

    public IList<InterfaceDefination<T>> Interfaces => (IList<InterfaceDefination<T>>) this.interfaces;

    public ComponentDefinition(T component)
    {
      this.allInterfaces = false;
      this.component = component;
      this.interfaces = (List<InterfaceDefination<T>>) null;
    }

    public void AddInterface(T itf, List<string> methods)
    {
      if (this.AllInterfaces)
        throw Tool.CreateArgumentException("contract", this.component.ToString() + "," + itf.ToString(), Microsoft.Tools.ServiceModel.SR.GetString("AllInterfacesAlreadySelected", (object) this.component.ToString()), (Exception) null);
      if (this.interfaces == null)
        this.interfaces = new List<InterfaceDefination<T>>();
      this.interfaces.Add(new InterfaceDefination<T>(itf, methods));
    }

    public void SetAllInterfaces() => this.allInterfaces = this.interfaces == null && !this.allInterfaces ? true : throw Tool.CreateArgumentException("contract", this.component.ToString() + ",*", Microsoft.Tools.ServiceModel.SR.GetString("CannotSpecifyAllInterfaces"), (Exception) null);
  }
}
