// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.UsageReporter
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.Threading;

namespace SmartAssembly.SmartUsageCore
{
  public abstract class UsageReporter
  {
    private static bool s_SessionStarted;
    private SendingReportFeedbackEventHandler SendingReportFeedback;
    private static readonly object s_RecordFeatureUsedLock = new object();

    public event SendingReportFeedbackEventHandler SendingReportFeedback
    {
      add
      {
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        if (true)
        {
          if (true)
            feedbackEventHandler1 = this.SendingReportFeedback;
        }
        else
          goto label_5;
label_2:
        SendingReportFeedbackEventHandler comparand;
        if (true)
        {
          SendingReportFeedbackEventHandler feedbackEventHandler2 = feedbackEventHandler1;
          if (true)
          {
            comparand = feedbackEventHandler2;
            goto label_9;
          }
          else
            goto label_9;
        }
label_4:
        if (feedbackEventHandler1 != comparand)
          goto label_2;
label_5:
        if (true)
          return;
label_9:
        feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.SendingReportFeedback, comparand + value, comparand);
        goto label_4;
      }
      remove
      {
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        if (true)
        {
          if (true)
            feedbackEventHandler1 = this.SendingReportFeedback;
        }
        else
          goto label_5;
label_2:
        SendingReportFeedbackEventHandler comparand;
        if (true)
        {
          SendingReportFeedbackEventHandler feedbackEventHandler2 = feedbackEventHandler1;
          if (true)
          {
            comparand = feedbackEventHandler2;
            goto label_9;
          }
          else
            goto label_9;
        }
label_4:
        if (feedbackEventHandler1 != comparand)
          goto label_2;
label_5:
        if (true)
          return;
label_9:
        feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.SendingReportFeedback, comparand - value, comparand);
        goto label_4;
      }
    }

    protected void RecordFeatureUsed(uint featureId)
    {
      try
      {
        lock (UsageReporter.s_RecordFeatureUsedLock)
        {
          do
          {
            if (true)
              this.ReportUsageIfNewSession();
            do
            {
              UsageCountStore.IncrementUsage(featureId);
            }
            while (false);
          }
          while (false);
        }
      }
      catch
      {
      }
    }

    protected void RecordFeatureUsed(string featureName)
    {
      try
      {
        lock (UsageReporter.s_RecordFeatureUsedLock)
        {
          do
          {
            if (true)
              this.ReportUsageIfNewSession();
            do
            {
              UsageCountStore.IncrementUsage(featureName);
            }
            while (false);
          }
          while (false);
        }
      }
      catch
      {
      }
    }

    private void ReportUsageIfNewSession()
    {
      int num1 = UsageReporter.s_SessionStarted ? 1 : 0;
      while (true)
      {
        if (num1 != 0)
          goto label_10;
        else
          goto label_11;
label_6:
        AppDomain.CurrentDomain.ProcessExit += new EventHandler(this.CurrentDomainOnProcessExit);
        if (true)
        {
          int num2 = 1;
          if (num2 == 0)
          {
            num1 = num2;
            continue;
          }
          if (num2 == 0)
          {
            num1 = num2;
            continue;
          }
          UsageReporter.s_SessionStarted = num2 != 0;
        }
label_10:
        if (false)
          goto label_6;
        else
          break;
label_11:
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: variable of a compiler-generated type
        UsageReporter.\u003C\u003Ec__DisplayClass1 cDisplayClass1 = new UsageReporter.\u003C\u003Ec__DisplayClass1();
        // ISSUE: reference to a compiler-generated field
        cDisplayClass1.\u003C\u003E4__this = this;
        Thread thread;
        do
        {
          // ISSUE: reference to a compiler-generated field
          cDisplayClass1.prevUsageCounts = UsageCountStore.GetAllUsageCountsAndReset();
          // ISSUE: method pointer
          thread = new Thread(new ThreadStart((object) cDisplayClass1, __methodptr(\u003CReportUsageIfNewSession\u003Eb__0)));
          thread.IsBackground = true;
          thread.SetApartmentState(ApartmentState.STA);
        }
        while (false);
        thread.Start();
        goto label_6;
      }
    }

    private void CurrentDomainOnProcessExit(object sender, EventArgs eventArgs)
    {
      if (false)
        goto label_4;
      else
        goto label_7;
label_1:
      if (true)
        goto label_11;
label_3:
      UsageReportSender sender1;
      this.ReportUsage(sender1);
      goto label_4;
label_11:
      // ISSUE: method pointer
      sender1.SendingReportFeedback += new SendingReportFeedbackEventHandler((object) this, __methodptr(InvokeSendingReportFeedback));
      if (!this.CanReportUsage())
        goto label_6;
      else
        goto label_3;
label_4:
      if (true)
        UsageCountStore.Reset();
      else
        goto label_10;
label_6:
      if (true)
        return;
      goto label_1;
label_7:
      UsageCounts allUsageCounts = UsageCountStore.GetAllUsageCounts();
      UsageCounts usageCounts;
      if (true)
        usageCounts = allUsageCounts;
      if (usageCounts.IsEmpty)
        goto label_6;
label_10:
      sender1 = new UsageReportSender(usageCounts);
      goto label_1;
    }

    protected abstract void ReportUsage(UsageReportSender sender);

    protected abstract bool CanReportUsage();

    private void OnSessionStart(UsageCounts usageCounts)
    {
      if (true)
        goto label_4;
label_2:
      UsageReportSender sender;
      this.ReportUsage(sender);
label_3:
      PlatformUsageCounter.CountPlatformUsages();
      if (true)
        return;
      goto label_5;
label_4:
      sender = new UsageReportSender(usageCounts);
label_5:
      // ISSUE: method pointer
      sender.SendingReportFeedback += new SendingReportFeedbackEventHandler((object) this, __methodptr(InvokeSendingReportFeedback));
      if (this.CanReportUsage())
      {
        Thread.CurrentThread.IsBackground = false;
        goto label_2;
      }
      else
        goto label_3;
    }

    private void InvokeSendingReportFeedback(
      object sender,
      SendingReportFeedbackEventArgs sendingReportFeedbackEventArgs)
    {
      SendingReportFeedbackEventHandler sendingReportFeedback = this.SendingReportFeedback;
      if (sendingReportFeedback == null)
        return;
      sendingReportFeedback(sender, sendingReportFeedbackEventArgs);
    }
  }
}
