// Decompiled with JetBrains decompiler
// Type: Meebey.SmartIrc4net.IrcClient
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text.RegularExpressions;

namespace Meebey.SmartIrc4net
{
  public class IrcClient : IrcCommands
  {
    private string \uE053 = string.Empty;
    private string[] \uE052;
    private int \uE051;
    private string \uE050 = string.Empty;
    private string \uE04F = string.Empty;
    private int \uE04E;
    private string \uE04D = string.Empty;
    private string \uE04C = string.Empty;
    private bool \uE04B;
    private string \uE04A;
    private bool \uE049;
    private bool \uE048;
    private bool \uE047;
    private bool \uE046;
    private StringDictionary \uE045 = new StringDictionary();
    private bool \uE044;
    private bool \uE043;
    private bool \uE042;
    private bool \uE041 = true;
    private bool \uE040;
    private bool \uE03F;
    private StringCollection \uE03E = new StringCollection();
    private bool \uE03D;
    private Array \uE03C = Enum.GetValues(typeof (ReplyCode));
    private StringCollection \uE03B = new StringCollection();
    private Hashtable \uE03A = Hashtable.Synchronized(new Hashtable((IHashCodeProvider) new CaseInsensitiveHashCodeProvider(), (IComparer) new CaseInsensitiveComparer()));
    private Hashtable \uE039 = Hashtable.Synchronized(new Hashtable((IHashCodeProvider) new CaseInsensitiveHashCodeProvider(), (IComparer) new CaseInsensitiveComparer()));
    private static Regex \uE038 = new Regex(\uE01B.\uE000("\uF788\uF7EC\uF78D\uF788\uF7F6\uF78B\uF7FD\uF7E9\uF7F6\uF7FE\uF78D\uF7E6\uF7FB\uF7EF\uF78B\uF7AD\uF7E5\uF7AB\uF7FF\uF7F6\uF7F8\uF7FD\uF7F2", 63446), RegexOptions.Compiled);
    private static Regex \uE037 = new Regex(\uE01B.\uE000("\uE406\uE408\uE411\uE416\uE41F\uE478\uE462\uE476\uE472", 58456), RegexOptions.Compiled);
    private static Regex \uE036 = new Regex(\uE01B.\uE000("\uE542\uE559\uE54E\uE54E\uE553\uE54E\uE53C\uE526\uE532\uE536", 58652), RegexOptions.Compiled);
    private static Regex \uE035 = new Regex(\uE01B.\uE000("\uECEC\uEC88\uEC9C\uEC98\uEC8D\uEC92\uECE2\uECE0\uECFB\uECE4\uECFF\uECE1\uECF5\uEC92\uEC9A\uEC9C\uEC9B\uEC9C\uEC98\uEC92\uEC88\uECB3\uECF3\uECF1\uECE6\uECFB\uECFD\uECFC\uEC92\uEC9C\uEC98\uECB3\uEC96", 60594), RegexOptions.Compiled);
    private static Regex \uE034 = new Regex(\uE01B.\uE000("\uF7A3\uF7C7\uF7D3\uF7D7\uF7C2\uF7DD\uF7AD\uF7AF\uF7B4\uF7AB\uF7B0\uF7AE\uF7BA\uF7DD\uF7D3\uF7D7\uF7DD\uF7C7\uF7FC\uF7D3\uF7D7\uF7FC\uF7D9", 63485), RegexOptions.Compiled);
    private static Regex \uE033 = new Regex(\uE01B.\uE000("\uE5C2\uE5A6\uE5B2\uE5B6\uE5A3\uE5BC\uE5CC\uE5CE\uE5D5\uE5CA\uE5D1\uE5CF\uE5DB\uE5BC\uE5B4\uE5B2\uE5B5\uE5B2\uE5B6\uE5BC\uE5A6\uE5B2\uE5B6\uE5B8", 58780), RegexOptions.Compiled);
    private static Regex \uE032 = new Regex(\uE01B.\uE000("\uF2A3\uF2C7\uF2D3\uF2D7\uF2C2\uF2DD\uF2B3\uF2B2\uF2A9\uF2B4\uF2BE\uF2B8\uF2DD\uF2D3\uF2D7\uF2DD\uF2C7\uF2FC\uF2D3\uF2D7\uF2FC\uF2D9", 62205), RegexOptions.Compiled);
    private static Regex \uE031 = new Regex(\uE01B.\uE000("\uE243\uE227\uE233\uE237\uE222\uE23D\uE253\uE252\uE249\uE254\uE25E\uE258\uE23D\uE235\uE233\uE234\uE233\uE237\uE23D\uE227\uE233\uE237\uE239", 57885), RegexOptions.Compiled);
    private static Regex \uE030 = new Regex(\uE01B.\uE000("\uF6AE\uF6CA\uF6DE\uF6DA\uF6CF\uF6D0\uF6B9\uF6BE\uF6A6\uF6B9\uF6A4\uF6B5\uF6D0\uF6DE\uF6DA\uF6D0\uF6DE\uF6DA\uF6D4", 63216), RegexOptions.Compiled);
    private static Regex \uE02F = new Regex(\uE01B.\uE000("\uF791\uF7F5\uF7E1\uF7E5\uF7F0\uF7EF\uF785\uF780\uF786\uF781\uF7EF\uF7E1\uF7E5\uF7EB", 63439), RegexOptions.Compiled);
    private static Regex \uE02E = new Regex(\uE01B.\uE000("\uE716\uE772\uE766\uE762\uE777\uE768\uE71C\uE707\uE718\uE701\uE70B\uE768\uE766\uE762\uE768\uE772\uE766\uE762\uE76C", 59208), RegexOptions.Compiled);
    private static Regex \uE02D = new Regex(\uE01B.\uE000("\uE04B\uE02F\uE03B\uE03F\uE02A\uE035\uE05B\uE05C\uE056\uE05E\uE035\uE03B\uE03F\uE031", 57365), RegexOptions.Compiled);
    private static Regex \uE02C = new Regex(\uE01B.\uE000("\uED80\uEDE4\uEDF0\uEDF4\uEDE1\uEDFE\uED95\uED97\uED9D\uED95\uEDFE\uEDF0\uEDF4\uEDFE\uEDF0\uEDF4\uEDFA", 60894), RegexOptions.Compiled);
    private static Regex \uE02B = new Regex(\uE01B.\uE000("\uE79A\uE7FE\uE7EA\uE7EE\uE7FB\uE7E4\uE794\uE785\uE796\uE790\uE7E4\uE7EA\uE7EE\uE7E0", 59332), RegexOptions.Compiled);
    private static Regex \uE02A = new Regex(\uE01B.\uE000("\uE85B\uE83F\uE82B\uE82F\uE83A\uE825\uE848\uE84A\uE841\uE840\uE825\uE82D\uE82B\uE82F\uE82C\uE825\uE82B\uE82F\uE821", 59397), RegexOptions.Compiled);
    private static Regex \uE029 = new Regex(\uE01B.\uE000("\uF699\uF6FD\uF6E9\uF6ED\uF6F8\uF6E7\uF696\uF692\uF68E\uF693\uF6E7\uF6FD\uF6E9\uF6ED\uF6E3", 63175), RegexOptions.Compiled);

    public event EventHandler OnRegistered;

    public event PingEventHandler OnPing;

    public event PongEventHandler OnPong;

    public event IrcEventHandler OnRawMessage;

    public event ErrorEventHandler OnError;

    public event IrcEventHandler OnErrorMessage;

    public event JoinEventHandler OnJoin;

    public event NamesEventHandler OnNames;

    public event PartEventHandler OnPart;

    public event QuitEventHandler OnQuit;

    public event KickEventHandler OnKick;

    public event AwayEventHandler OnAway;

    public event IrcEventHandler OnUnAway;

    public event IrcEventHandler OnNowAway;

    public event InviteEventHandler OnInvite;

    public event BanEventHandler OnBan;

    public event UnbanEventHandler OnUnban;

    public event OpEventHandler OnOp;

    public event DeopEventHandler OnDeop;

    public event HalfopEventHandler OnHalfop;

    public event DehalfopEventHandler OnDehalfop;

    public event VoiceEventHandler OnVoice;

    public event DevoiceEventHandler OnDevoice;

    public event WhoEventHandler OnWho;

    public event MotdEventHandler OnMotd;

    public event TopicEventHandler OnTopic;

    public event TopicChangeEventHandler OnTopicChange;

    public event NickChangeEventHandler OnNickChange;

    public event IrcEventHandler OnModeChange;

    public event IrcEventHandler OnUserModeChange;

    public event IrcEventHandler OnChannelModeChange;

    public event IrcEventHandler OnChannelMessage;

    public event ActionEventHandler OnChannelAction;

    public event IrcEventHandler OnChannelNotice;

    public event IrcEventHandler OnChannelActiveSynced;

    public event IrcEventHandler OnChannelPassiveSynced;

    public event IrcEventHandler OnQueryMessage;

    public event ActionEventHandler OnQueryAction;

    public event IrcEventHandler OnQueryNotice;

    public event CtcpEventHandler OnCtcpRequest;

    public event CtcpEventHandler OnCtcpReply;

    public bool ActiveChannelSyncing
    {
      get => this.\uE049;
      set => this.\uE049 = value;
    }

    public bool PassiveChannelSyncing => this.\uE048;

    public string CtcpVersion
    {
      get => this.\uE04A;
      set => this.\uE04A = value;
    }

    public bool AutoJoinOnInvite
    {
      get => this.\uE047;
      set => this.\uE047 = value;
    }

    public bool AutoRejoin
    {
      get => this.\uE046;
      set => this.\uE046 = value;
    }

    public bool AutoRejoinOnKick
    {
      get => this.\uE043;
      set => this.\uE043 = value;
    }

    public bool AutoRelogin
    {
      get => this.\uE042;
      set => this.\uE042 = value;
    }

    public bool AutoNickHandling
    {
      get => this.\uE041;
      set => this.\uE041 = value;
    }

    public bool SupportNonRfc
    {
      get => this.\uE040;
      set
      {
        if (this.\uE03F)
          return;
        this.\uE040 = value;
      }
    }

    public string Nickname => this.\uE053;

    public string[] NicknameList => this.\uE052;

    public string Realname => this.\uE050;

    public string Username => this.\uE04D;

    public string Usermode => this.\uE04F;

    public int IUsermode => this.\uE04E;

    public bool IsAway => this.\uE04B;

    public string Password => this.\uE04C;

    public StringCollection JoinedChannels => this.\uE03B;

    public StringCollection Motd => this.\uE03E;

    public IrcClient()
    {
      this.OnReadLine += new ReadLineEventHandler(this.\uE000);
      this.OnDisconnected += new EventHandler(this.\uE020);
      this.OnConnectionError += new EventHandler(this.\uE000);
    }

    public new void Connect(string[] addresslist, int port)
    {
      this.\uE03F = true;
      base.Connect(addresslist, port);
    }

    public void Reconnect(bool login, bool channels)
    {
      if (channels)
        this.\uE01F();
      this.Reconnect();
      if (login)
      {
        this.\uE051 = 0;
        this.Login(this.\uE052, this.Realname, this.IUsermode, this.Username, this.Password);
      }
      if (!channels)
        return;
      this.\uE01E();
    }

    public void Reconnect(bool login) => this.Reconnect(login, true);

    public void Login(
      string[] nicklist,
      string realname,
      int usermode,
      string username,
      string password)
    {
      this.\uE052 = (string[]) nicklist.Clone();
      this.\uE053 = this.\uE052[0].Replace(\uE01B.\uE000("\uE372", 58194), "");
      this.\uE050 = realname;
      this.\uE04E = usermode;
      switch (username)
      {
        case null:
          this.\uE04D = Environment.UserName.Replace(\uE01B.\uE000("\uE372", 58194), "");
          break;
        default:
          if (username.Length > 0)
          {
            this.\uE04D = username.Replace(\uE01B.\uE000("\uE372", 58194), "");
            break;
          }
          goto case null;
      }
      if (password != null && password.Length > 0)
      {
        this.\uE04C = password;
        this.RfcPass(this.Password, Priority.Critical);
      }
      this.RfcNick(this.Nickname, Priority.Critical);
      this.RfcUser(this.Username, this.IUsermode, this.Realname, Priority.Critical);
    }

    public void Login(string[] nicklist, string realname, int usermode, string username) => this.Login(nicklist, realname, usermode, username, "");

    public void Login(string[] nicklist, string realname, int usermode) => this.Login(nicklist, realname, usermode, "", "");

    public void Login(string[] nicklist, string realname) => this.Login(nicklist, realname, 0, "", "");

    public void Login(
      string nick,
      string realname,
      int usermode,
      string username,
      string password)
    {
      this.Login(new string[3]
      {
        nick,
        nick + \uE01B.\uE000("\uEE0F", 61008),
        nick + \uE01B.\uE000("\uF7DB\uF7DB", 63364)
      }, realname, usermode, username, password);
    }

    public void Login(string nick, string realname, int usermode, string username) => this.Login(new string[3]
    {
      nick,
      nick + \uE01B.\uE000("\uEE0F", 61008),
      nick + \uE01B.\uE000("\uF7DB\uF7DB", 63364)
    }, realname, usermode, username, "");

    public void Login(string nick, string realname, int usermode) => this.Login(new string[3]
    {
      nick,
      nick + \uE01B.\uE000("\uEE0F", 61008),
      nick + \uE01B.\uE000("\uF7DB\uF7DB", 63364)
    }, realname, usermode, "", "");

    public void Login(string nick, string realname) => this.Login(new string[3]
    {
      nick,
      nick + \uE01B.\uE000("\uEE0F", 61008),
      nick + \uE01B.\uE000("\uF7DB\uF7DB", 63364)
    }, realname, 0, "", "");

    public bool IsMe(string nickname) => this.Nickname == nickname;

    public bool IsJoined(string channelname) => this.IsJoined(channelname, this.Nickname);

    public bool IsJoined(string channelname, string nickname)
    {
      switch (channelname)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uF12A\uF121\uF128\uF127\uF127\uF12C\uF125\uF127\uF128\uF124\uF12C", 61769));
        default:
          switch (nickname)
          {
            case null:
              throw new ArgumentNullException(\uE01B.\uE000("\uF3BF\uF3B8\uF3B2\uF3BA\uF3BF\uF3B0\uF3BC\uF3B4", 62417));
            default:
              Channel channel = this.GetChannel(channelname);
              return channel != null && channel.\uE002 != null && channel.\uE002.ContainsKey((object) nickname);
          }
      }
    }

    public IrcUser GetIrcUser(string nickname)
    {
      switch (nickname)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uF3BF\uF3B8\uF3B2\uF3BA\uF3BF\uF3B0\uF3BC\uF3B4", 62417));
        default:
          return (IrcUser) this.\uE039[(object) nickname];
      }
    }

    public ChannelUser GetChannelUser(string channelname, string nickname)
    {
      switch (channelname)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE540\uE54B\uE542\uE54D\uE54D\uE546\uE54F", 58659));
        default:
          switch (nickname)
          {
            case null:
              throw new ArgumentNullException(\uE01B.\uE000("\uF3BF\uF3B8\uF3B2\uF3BA\uF3BF\uF3B0\uF3BC\uF3B4", 62417));
            default:
              Channel channel = this.GetChannel(channelname);
              return channel != null ? (ChannelUser) channel.\uE002[(object) nickname] : (ChannelUser) null;
          }
      }
    }

    public Channel GetChannel(string channelname)
    {
      switch (channelname)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uF12A\uF121\uF128\uF127\uF127\uF12C\uF125\uF127\uF128\uF124\uF12C", 61769));
        default:
          return (Channel) this.\uE03A[(object) channelname];
      }
    }

    public string[] GetChannels()
    {
      string[] channels = new string[this.\uE03A.Values.Count];
      int num = 0;
      foreach (Channel channel in (IEnumerable) this.\uE03A.Values)
        channels[num++] = channel.Name;
      return channels;
    }

    public IrcMessageData MessageParser(string rawline)
    {
      string nick = (string) null;
      string ident = (string) null;
      string host = (string) null;
      string channel = (string) null;
      string message = (string) null;
      string str = rawline[0] != ':' ? rawline : rawline.Substring(1);
      string[] strArray = str.Split(' ');
      string from = strArray[0];
      string s = strArray[1];
      int length = from.IndexOf(\uE01B.\uE000("\uE2DA", 58107));
      int num1 = from.IndexOf(\uE01B.\uE000("\uF41A", 62554));
      int num2 = str.IndexOf(\uE01B.\uE000("\uE8F8\uE8E2", 59608));
      if (num2 != -1)
        ++num2;
      if (length != -1)
        nick = from.Substring(0, length);
      if (num1 != -1 && length != -1)
        ident = from.Substring(length + 1, num1 - length - 1);
      if (num1 != -1)
        host = from.Substring(num1 + 1);
      ReplyCode replycode;
      try
      {
        replycode = (ReplyCode) int.Parse(s);
      }
      catch (FormatException ex)
      {
        replycode = ReplyCode.Null;
      }
      ReceiveType type = this.\uE000(rawline);
      if (num2 != -1)
        message = str.Substring(num2 + 1);
      switch (type)
      {
        case ReceiveType.Join:
        case ReceiveType.Kick:
        case ReceiveType.Part:
        case ReceiveType.TopicChange:
        case ReceiveType.ChannelModeChange:
        case ReceiveType.ChannelMessage:
        case ReceiveType.ChannelAction:
        case ReceiveType.ChannelNotice:
          channel = strArray[2];
          break;
        case ReceiveType.Invite:
        case ReceiveType.Who:
        case ReceiveType.Topic:
        case ReceiveType.BanList:
        case ReceiveType.ChannelMode:
          channel = strArray[3];
          break;
        case ReceiveType.Name:
          channel = strArray[4];
          break;
      }
      if (channel != null && channel[0] == ':')
        channel = channel.Substring(1);
      return new IrcMessageData(this, from, nick, ident, host, channel, message, rawline, type, replycode);
    }

    private void \uE000(object _param1, ReadLineEventArgs _param2) => this.\uE01D(this.MessageParser(_param2.Line));

    private void \uE020(object _param1, EventArgs _param2)
    {
      if (this.AutoRejoin)
        this.\uE01F();
      this.\uE000();
    }

    private void \uE000(object _param1, EventArgs _param2)
    {
      if (this.AutoRelogin)
        this.Login(this.\uE052, this.Realname, this.IUsermode, this.Username, this.Password);
      if (!this.AutoRejoin)
        return;
      this.\uE01E();
    }

    private void \uE01F()
    {
      if (this.ActiveChannelSyncing || this.PassiveChannelSyncing)
      {
        foreach (Channel channel in (IEnumerable) this.\uE03A.Values)
        {
          if (channel.Key.Length > 0)
          {
            this.\uE045.Add(channel.Name, channel.Key);
            this.\uE044 = true;
          }
          else
            this.\uE045.Add(channel.Name, \uE01B.\uE000("\uEC71\uEC70\uEC74\uEC7A\uEC66", 60447));
        }
      }
      else
      {
        foreach (string key in this.\uE03B)
          this.\uE045.Add(key, \uE01B.\uE000("\uEC71\uEC70\uEC74\uEC7A\uEC66", 60447));
      }
    }

    private void \uE01E()
    {
      int count = this.\uE045.Count;
      string[] channels = new string[count];
      this.\uE045.Keys.CopyTo((Array) channels, 0);
      if (this.\uE044)
      {
        string[] keys = new string[count];
        this.\uE045.Values.CopyTo((Array) keys, 0);
        this.RfcJoin(channels, keys, Priority.High);
      }
      else
        this.RfcJoin(channels, Priority.High);
      this.\uE044 = false;
      this.\uE045.Clear();
    }

    private void \uE000()
    {
      this.\uE03B.Clear();
      if (this.ActiveChannelSyncing)
      {
        this.\uE03A.Clear();
        this.\uE039.Clear();
      }
      this.\uE04B = false;
      this.\uE03D = false;
      this.\uE03E.Clear();
    }

    private string \uE000()
    {
      this.\uE051++;
      if (this.\uE051 >= this.\uE052.Length)
        --this.\uE051;
      return this.NicknameList[this.\uE051];
    }

    private ReceiveType \uE000(string _param1)
    {
      Match match1 = IrcClient.\uE038.Match(_param1);
      if (match1.Success)
      {
        ReplyCode replyCode = (ReplyCode) int.Parse(match1.Groups[1].Value);
        if (Array.IndexOf(this.\uE03C, (object) replyCode) == -1)
          return ReceiveType.Unknown;
        switch (replyCode)
        {
          case ReplyCode.Welcome:
          case ReplyCode.YourHost:
          case ReplyCode.Created:
          case ReplyCode.MyInfo:
          case ReplyCode.Bounce:
            return ReceiveType.Login;
          case ReplyCode.UserModeIs:
            return ReceiveType.UserMode;
          case ReplyCode.LuserClient:
          case ReplyCode.LuserOp:
          case ReplyCode.LuserUnknown:
          case ReplyCode.LuserChannels:
          case ReplyCode.LuserMe:
            return ReceiveType.Info;
          case ReplyCode.WhoIsUser:
          case ReplyCode.WhoIsServer:
          case ReplyCode.WhoIsOperator:
          case ReplyCode.WhoIsIdle:
          case ReplyCode.EndOfWhoIs:
          case ReplyCode.WhoIsChannels:
            return ReceiveType.WhoIs;
          case ReplyCode.WhoWasUser:
          case ReplyCode.EndOfWhoWas:
            return ReceiveType.WhoWas;
          case ReplyCode.EndOfWho:
          case ReplyCode.WhoReply:
            return ReceiveType.Who;
          case ReplyCode.ListStart:
          case ReplyCode.List:
          case ReplyCode.ListEnd:
            return ReceiveType.List;
          case ReplyCode.ChannelModeIs:
            return ReceiveType.ChannelMode;
          case ReplyCode.NoTopic:
          case ReplyCode.Topic:
            return ReceiveType.Topic;
          case ReplyCode.NamesReply:
          case ReplyCode.EndOfNames:
            return ReceiveType.Name;
          case ReplyCode.BanList:
          case ReplyCode.EndOfBanList:
            return ReceiveType.BanList;
          case ReplyCode.Motd:
          case ReplyCode.MotdStart:
          case ReplyCode.EndOfMotd:
            return ReceiveType.Motd;
          default:
            return replyCode >= (ReplyCode) 400 && replyCode <= (ReplyCode) 599 ? ReceiveType.ErrorMessage : ReceiveType.Unknown;
        }
      }
      else
      {
        if (IrcClient.\uE037.Match(_param1).Success)
          return ReceiveType.Unknown;
        if (IrcClient.\uE036.Match(_param1).Success)
          return ReceiveType.Error;
        Match match2 = IrcClient.\uE035.Match(_param1);
        if (match2.Success)
        {
          string str;
          return (str = match2.Groups[1].Value) != null && (str == \uE01B.\uE000("\uEB02", 60193) || str == \uE01B.\uE000("\uE2DA", 58107) || str == \uE01B.\uE000("\uE7FA", 59356) || str == \uE01B.\uE000("\uF83B", 63504)) ? ReceiveType.ChannelAction : ReceiveType.QueryAction;
        }
        if (IrcClient.\uE034.Match(_param1).Success)
          return ReceiveType.CtcpRequest;
        Match match3 = IrcClient.\uE033.Match(_param1);
        if (match3.Success)
        {
          string str;
          return (str = match3.Groups[1].Value) != null && (str == \uE01B.\uE000("\uEB02", 60193) || str == \uE01B.\uE000("\uE2DA", 58107) || str == \uE01B.\uE000("\uE7FA", 59356) || str == \uE01B.\uE000("\uF83B", 63504)) ? ReceiveType.ChannelMessage : ReceiveType.QueryMessage;
        }
        if (IrcClient.\uE032.Match(_param1).Success)
          return ReceiveType.CtcpReply;
        Match match4 = IrcClient.\uE031.Match(_param1);
        if (match4.Success)
        {
          string str;
          return (str = match4.Groups[1].Value) != null && (str == \uE01B.\uE000("\uEB02", 60193) || str == \uE01B.\uE000("\uE2DA", 58107) || str == \uE01B.\uE000("\uE7FA", 59356) || str == \uE01B.\uE000("\uF83B", 63504)) ? ReceiveType.ChannelNotice : ReceiveType.QueryNotice;
        }
        if (IrcClient.\uE030.Match(_param1).Success)
          return ReceiveType.Invite;
        if (IrcClient.\uE02F.Match(_param1).Success)
          return ReceiveType.Join;
        if (IrcClient.\uE02E.Match(_param1).Success)
          return ReceiveType.TopicChange;
        if (IrcClient.\uE02D.Match(_param1).Success)
          return ReceiveType.NickChange;
        if (IrcClient.\uE02C.Match(_param1).Success)
          return ReceiveType.Kick;
        if (IrcClient.\uE02B.Match(_param1).Success)
          return ReceiveType.Part;
        Match match5 = IrcClient.\uE02A.Match(_param1);
        return match5.Success ? (match5.Groups[1].Value == this.\uE053 ? ReceiveType.UserModeChange : ReceiveType.ChannelModeChange) : (IrcClient.\uE029.Match(_param1).Success ? ReceiveType.Quit : ReceiveType.Unknown);
      }
    }

    private void \uE01D(IrcMessageData _param1)
    {
      if (this.\uE025 != null)
        this.\uE025((object) this, new IrcEventArgs(_param1));
      string rawMessage1 = _param1.RawMessageArray[0];
      string str;
      if ((str = rawMessage1) != null)
      {
        if (!(str == \uE01B.\uE000("\uF2EC\uF2F5\uF2F2\uF2FB", 62140)))
        {
          if (str == \uE01B.\uE000("\uE7C5\uE7D2\uE7D2\uE7CF\uE7D2", 59264))
            this.\uE01A(_param1);
        }
        else
          this.\uE01C(_param1);
      }
      IrcMessageData ircMessageData = _param1;
      string rawMessage2;
      if ((rawMessage2 = ircMessageData.RawMessageArray[1]) != null)
      {
        // ISSUE: reference to a compiler-generated field
        if (\uE01A.\uE00B == null)
        {
          // ISSUE: reference to a compiler-generated field
          \uE01A.\uE00B = new Dictionary<string, int>(11)
          {
            {
              \uE01B.\uE000("\uE7CA\uE7C8\uE7D3\uE7CC\uE7D7\uE7C9\uE7DD", 59290),
              0
            },
            {
              \uE01B.\uE000("\uF2F2\uF2F3\uF2E8\uF2F5\uF2FF\uF2F9", 62140),
              1
            },
            {
              \uE01B.\uE000("\uEA62\uEA67\uEA61\uEA66", 59944),
              2
            },
            {
              \uE01B.\uE000("\uF50C\uF51D\uF50E\uF508", 62812),
              3
            },
            {
              \uE01B.\uE000("\uEC65\uEC67\uEC6D\uEC65", 60462),
              4
            },
            {
              \uE01B.\uE000("\uE8A2\uE8A6\uE8BA\uE8A7", 59635),
              5
            },
            {
              \uE01B.\uE000("\uE996\uE98D\uE992\uE98B\uE981", 59842),
              6
            },
            {
              \uE01B.\uE000("\uF557\uF550\uF55A\uF552", 62745),
              7
            },
            {
              \uE01B.\uE000("\uE08D\uE08A\uE092\uE08D\uE090\uE081", 57540),
              8
            },
            {
              \uE01B.\uE000("\uEF4B\uEF49\uEF42\uEF43", 61190),
              9
            },
            {
              \uE01B.\uE000("\uF05F\uF040\uF041\uF048", 61455),
              10
            }
          };
        }
        int num;
        // ISSUE: reference to a compiler-generated field
        // ISSUE: explicit non-virtual call
        if (__nonvirtual (\uE01A.\uE00B.TryGetValue(rawMessage2, out num)))
        {
          switch (num)
          {
            case 0:
              this.\uE015(_param1);
              break;
            case 1:
              this.\uE014(_param1);
              break;
            case 2:
              this.\uE019(_param1);
              break;
            case 3:
              this.\uE018(_param1);
              break;
            case 4:
              this.\uE017(_param1);
              break;
            case 5:
              this.\uE016(_param1);
              break;
            case 6:
              this.\uE013(_param1);
              break;
            case 7:
              this.\uE012(_param1);
              break;
            case 8:
              this.\uE011(_param1);
              break;
            case 9:
              this.\uE010(_param1);
              break;
            case 10:
              this.\uE01B(_param1);
              break;
          }
        }
      }
      if (_param1.ReplyCode != ReplyCode.Null)
      {
        switch (_param1.ReplyCode)
        {
          case ReplyCode.Welcome:
            this.\uE00E(_param1);
            break;
          case ReplyCode.Away:
            this.\uE009(_param1);
            break;
          case ReplyCode.UnAway:
            this.\uE008(_param1);
            break;
          case ReplyCode.NowAway:
            this.\uE007(_param1);
            break;
          case ReplyCode.ChannelModeIs:
            this.\uE00F(_param1);
            break;
          case ReplyCode.NoTopic:
            this.\uE00C(_param1);
            break;
          case ReplyCode.Topic:
            this.\uE00D(_param1);
            break;
          case ReplyCode.WhoReply:
            this.\uE006(_param1);
            break;
          case ReplyCode.NamesReply:
            this.\uE00B(_param1);
            break;
          case ReplyCode.EndOfNames:
            this.\uE00A(_param1);
            break;
          case ReplyCode.BanList:
            this.\uE003(_param1);
            break;
          case ReplyCode.EndOfBanList:
            this.\uE002(_param1);
            break;
          case ReplyCode.Motd:
            this.\uE005(_param1);
            break;
          case ReplyCode.EndOfMotd:
            this.\uE004(_param1);
            break;
          case ReplyCode.ErrorNicknameInUse:
            this.\uE000(_param1);
            break;
        }
      }
      if (_param1.Type != ReceiveType.ErrorMessage)
        return;
      this.\uE001(_param1);
    }

    private bool \uE000(string _param1)
    {
      if (this.GetIrcUser(_param1).JoinedChannels.Length != 0)
        return false;
      this.\uE039.Remove((object) _param1);
      return true;
    }

    private void \uE000(string _param1, string _param2)
    {
      Channel channel = this.GetChannel(_param1);
      channel.\uE002.Remove((object) _param2);
      channel.\uE001.Remove((object) _param2);
      channel.\uE000.Remove((object) _param2);
      if (!this.SupportNonRfc)
        return;
      ((NonRfcChannel) channel).\uE000.Remove((object) _param2);
    }

    private void \uE000(IrcMessageData _param1, string _param2, string _param3)
    {
      string[] strArray = _param3.Split(' ');
      bool flag1 = false;
      bool flag2 = false;
      int length = _param2.Length;
      Channel channel = (Channel) null;
      if (this.ActiveChannelSyncing)
        channel = this.GetChannel(_param1.Channel);
      IEnumerator enumerator = strArray.GetEnumerator();
      enumerator.MoveNext();
      for (int index = 0; index < length; ++index)
      {
        switch (_param2[index])
        {
          case '+':
            flag1 = true;
            flag2 = false;
            break;
          case '-':
            flag1 = false;
            flag2 = true;
            break;
          case 'b':
            string current1 = (string) enumerator.Current;
            enumerator.MoveNext();
            if (flag1)
            {
              if (this.ActiveChannelSyncing)
              {
                try
                {
                  channel.Bans.Add(current1);
                }
                catch (ArgumentException ex)
                {
                }
              }
              if (this.\uE019 != null)
                this.\uE019((object) this, new BanEventArgs(_param1, _param1.Channel, _param1.Nick, current1));
            }
            if (flag2)
            {
              if (this.ActiveChannelSyncing)
                channel.Bans.Remove(current1);
              if (this.\uE018 != null)
              {
                this.\uE018((object) this, new UnbanEventArgs(_param1, _param1.Channel, _param1.Nick, current1));
                break;
              }
              break;
            }
            break;
          case 'h':
            if (this.SupportNonRfc)
            {
              string current2 = (string) enumerator.Current;
              enumerator.MoveNext();
              if (flag1)
              {
                if (this.ActiveChannelSyncing)
                {
                  if (this.GetChannelUser(_param1.Channel, current2) != null)
                  {
                    try
                    {
                      ((NonRfcChannel) channel).\uE000.Add((object) current2, (object) this.GetIrcUser(current2));
                    }
                    catch (ArgumentException ex)
                    {
                    }
                    ((NonRfcChannelUser) this.GetChannelUser(_param1.Channel, current2)).IsHalfop = true;
                  }
                }
                if (this.\uE015 != null)
                  this.\uE015((object) this, new HalfopEventArgs(_param1, _param1.Channel, _param1.Nick, current2));
              }
              if (flag2)
              {
                if (this.ActiveChannelSyncing && this.GetChannelUser(_param1.Channel, current2) != null)
                {
                  ((NonRfcChannel) channel).\uE000.Remove((object) current2);
                  ((NonRfcChannelUser) this.GetChannelUser(_param1.Channel, current2)).IsHalfop = false;
                }
                if (this.\uE014 != null)
                {
                  this.\uE014((object) this, new DehalfopEventArgs(_param1, _param1.Channel, _param1.Nick, current2));
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 'k':
            string current3 = (string) enumerator.Current;
            enumerator.MoveNext();
            if (flag1 && this.ActiveChannelSyncing)
              channel.Key = current3;
            if (flag2 && this.ActiveChannelSyncing)
            {
              channel.Key = "";
              break;
            }
            break;
          case 'l':
            string current4 = (string) enumerator.Current;
            enumerator.MoveNext();
            if (flag1)
            {
              if (this.ActiveChannelSyncing)
              {
                try
                {
                  channel.UserLimit = int.Parse(current4);
                }
                catch (FormatException ex)
                {
                }
              }
            }
            if (flag2 && this.ActiveChannelSyncing)
            {
              channel.UserLimit = 0;
              break;
            }
            break;
          case 'o':
            string current5 = (string) enumerator.Current;
            enumerator.MoveNext();
            if (flag1)
            {
              if (this.ActiveChannelSyncing)
              {
                if (this.GetChannelUser(_param1.Channel, current5) != null)
                {
                  try
                  {
                    channel.\uE001.Add((object) current5, (object) this.GetIrcUser(current5));
                  }
                  catch (ArgumentException ex)
                  {
                  }
                  this.GetChannelUser(_param1.Channel, current5).IsOp = true;
                }
              }
              if (this.\uE017 != null)
                this.\uE017((object) this, new OpEventArgs(_param1, _param1.Channel, _param1.Nick, current5));
            }
            if (flag2)
            {
              if (this.ActiveChannelSyncing && this.GetChannelUser(_param1.Channel, current5) != null)
              {
                channel.\uE001.Remove((object) current5);
                this.GetChannelUser(_param1.Channel, current5).IsOp = false;
              }
              if (this.\uE016 != null)
              {
                this.\uE016((object) this, new DeopEventArgs(_param1, _param1.Channel, _param1.Nick, current5));
                break;
              }
              break;
            }
            break;
          case 'v':
            string current6 = (string) enumerator.Current;
            enumerator.MoveNext();
            if (flag1)
            {
              if (this.ActiveChannelSyncing)
              {
                if (this.GetChannelUser(_param1.Channel, current6) != null)
                {
                  try
                  {
                    channel.\uE000.Add((object) current6, (object) this.GetIrcUser(current6));
                  }
                  catch (ArgumentException ex)
                  {
                  }
                  this.GetChannelUser(_param1.Channel, current6).IsVoice = true;
                }
              }
              if (this.\uE013 != null)
                this.\uE013((object) this, new VoiceEventArgs(_param1, _param1.Channel, _param1.Nick, current6));
            }
            if (flag2)
            {
              if (this.ActiveChannelSyncing && this.GetChannelUser(_param1.Channel, current6) != null)
              {
                channel.\uE000.Remove((object) current6);
                this.GetChannelUser(_param1.Channel, current6).IsVoice = false;
              }
              if (this.\uE012 != null)
              {
                this.\uE012((object) this, new DevoiceEventArgs(_param1, _param1.Channel, _param1.Nick, current6));
                break;
              }
              break;
            }
            break;
          default:
            if (flag1 && this.ActiveChannelSyncing)
              channel.Mode += (string) (object) _param2[index];
            if (flag2 && this.ActiveChannelSyncing)
            {
              channel.Mode = channel.Mode.Replace(_param2[index], char.MinValue);
              break;
            }
            break;
        }
      }
    }

    private void \uE01C(IrcMessageData _param1)
    {
      string server = _param1.RawMessageArray[1].Substring(1);
      this.RfcPong(server, Priority.Critical);
      if (this.\uE027 == null)
        return;
      this.\uE027((object) this, new PingEventArgs(_param1, server));
    }

    private void \uE01B(IrcMessageData _param1)
    {
      if (this.\uE026 == null)
        return;
      this.\uE026((object) this, new PongEventArgs(_param1, _param1.Irc.Lag));
    }

    private void \uE01A(IrcMessageData _param1)
    {
      string message = _param1.Message;
      if (this.\uE024 == null)
        return;
      this.\uE024((object) this, new ErrorEventArgs(_param1, message));
    }

    private void \uE019(IrcMessageData _param1)
    {
      string nick = _param1.Nick;
      string channel1 = _param1.Channel;
      if (this.IsMe(nick))
        this.\uE03B.Add(channel1);
      if (this.ActiveChannelSyncing)
      {
        if (this.IsMe(nick))
        {
          Channel channel2 = !this.SupportNonRfc ? new Channel(channel1) : (Channel) new NonRfcChannel(channel1);
          this.\uE03A.Add((object) channel1, (object) channel2);
          this.RfcMode(channel1);
          this.RfcWho(channel1);
          this.Ban(channel1);
        }
        else
          this.RfcWho(nick);
        Channel channel3 = this.GetChannel(channel1);
        IrcUser ircUser = this.GetIrcUser(nick);
        if (ircUser == null)
        {
          ircUser = new IrcUser(nick, this);
          ircUser.Ident = _param1.Ident;
          ircUser.Host = _param1.Host;
          this.\uE039.Add((object) nick, (object) ircUser);
        }
        ChannelUser channelUser = !this.SupportNonRfc ? new ChannelUser(channel1, ircUser) : (ChannelUser) new NonRfcChannelUser(channel1, ircUser);
        channel3.\uE002.Add((object) nick, (object) channelUser);
      }
      if (this.\uE022 == null)
        return;
      this.\uE022((object) this, new JoinEventArgs(_param1, channel1, nick));
    }

    private void \uE018(IrcMessageData _param1)
    {
      string nick = _param1.Nick;
      string channel = _param1.Channel;
      string message = _param1.Message;
      if (this.IsMe(nick))
        this.\uE03B.Remove(channel);
      if (this.ActiveChannelSyncing)
      {
        if (this.IsMe(nick))
        {
          this.\uE03A.Remove((object) channel);
        }
        else
        {
          this.\uE000(channel, nick);
          this.\uE000(nick);
        }
      }
      if (this.\uE020 == null)
        return;
      this.\uE020((object) this, new PartEventArgs(_param1, channel, nick, message));
    }

    private void \uE017(IrcMessageData _param1)
    {
      string channel1 = _param1.Channel;
      string nick = _param1.Nick;
      string rawMessage = _param1.RawMessageArray[3];
      string message = _param1.Message;
      bool flag = this.IsMe(rawMessage);
      if (flag)
        this.\uE03B.Remove(channel1);
      if (this.ActiveChannelSyncing)
      {
        if (flag)
        {
          Channel channel2 = this.GetChannel(channel1);
          this.\uE03A.Remove((object) channel1);
          if (this.\uE043)
            this.RfcJoin(channel2.Name, channel2.Key);
        }
        else
        {
          this.\uE000(channel1, rawMessage);
          this.\uE000(rawMessage);
        }
      }
      else if (flag && this.AutoRejoinOnKick)
        this.RfcJoin(channel1);
      if (this.\uE01E == null)
        return;
      this.\uE01E((object) this, new KickEventArgs(_param1, channel1, nick, rawMessage, message));
    }

    private void \uE016(IrcMessageData _param1)
    {
      string nick = _param1.Nick;
      string message = _param1.Message;
      if (this.ActiveChannelSyncing)
      {
        IrcUser ircUser = this.GetIrcUser(nick);
        if (ircUser != null)
        {
          string[] joinedChannels = ircUser.JoinedChannels;
          if (joinedChannels != null)
          {
            foreach (string str in joinedChannels)
              this.\uE000(str, nick);
            this.\uE000(nick);
          }
        }
      }
      if (this.\uE01F == null)
        return;
      this.\uE01F((object) this, new QuitEventArgs(_param1, nick, message));
    }

    private void \uE015(IrcMessageData _param1)
    {
      if (_param1.Type == ReceiveType.CtcpRequest)
      {
        if (_param1.Message.StartsWith(\uE01B.\uE000("\uF6C7\uF696\uF68F\uF688\uF681", 63174)))
        {
          if (_param1.Message.Length > 7)
            this.SendMessage(SendType.CtcpReply, _param1.Nick, \uE01B.\uE000("\uF584\uF59D\uF59A\uF593\uF5F4", 62932) + _param1.Message.Substring(6, _param1.Message.Length - 7));
          else
            this.SendMessage(SendType.CtcpReply, _param1.Nick, \uE01B.\uE000("\uF2EC\uF2F5\uF2F2\uF2FB", 62140));
        }
        else if (_param1.Message.StartsWith(\uE01B.\uE000("\uEF09\uEF5E\uEF4D\uEF5A\uEF5B\uEF41\uEF47\uEF46", 61192)))
        {
          string str = this.\uE04A != null ? this.\uE04A : this.VersionString;
          this.SendMessage(SendType.CtcpReply, _param1.Nick, \uE01B.\uE000("\uE5E9\uE5FA\uE5ED\uE5EC\uE5F6\uE5F0\uE5F1\uE59F", 58815) + str);
        }
        else if (_param1.Message.StartsWith(\uE01B.\uE000("\uE0EE\uE0AC\uE0A3\uE0A6\uE0AA\uE0A1\uE0BB\uE0A6\uE0A1\uE0A9\uE0A0", 57583)))
          this.SendMessage(SendType.CtcpReply, _param1.Nick, \uE01B.\uE000("\uF021\uF02E\uF02B\uF027\uF02C\uF036\uF02B\uF02C\uF024\uF02D\uF042\uF032\uF02B\uF02C\uF025\uF042\uF034\uF027\uF030\uF031\uF02B\uF02D\uF02C\uF042\uF021\uF02E\uF02B\uF027\uF02C\uF036\uF02B\uF02C\uF024\uF02D", 61538));
      }
      switch (_param1.Type)
      {
        case ReceiveType.ChannelMessage:
          if (this.\uE009 == null)
            break;
          this.\uE009((object) this, new IrcEventArgs(_param1));
          break;
        case ReceiveType.ChannelAction:
          if (this.\uE008 == null)
            break;
          string str1 = _param1.Message.Substring(7, _param1.Message.Length - 8);
          this.\uE008((object) this, new ActionEventArgs(_param1, str1));
          break;
        case ReceiveType.QueryMessage:
          if (this.\uE004 == null)
            break;
          this.\uE004((object) this, new IrcEventArgs(_param1));
          break;
        case ReceiveType.QueryAction:
          if (this.\uE003 == null)
            break;
          string str2 = _param1.Message.Substring(7, _param1.Message.Length - 8);
          this.\uE003((object) this, new ActionEventArgs(_param1, str2));
          break;
        case ReceiveType.CtcpRequest:
          if (this.\uE001 == null)
            break;
          int num = _param1.Message.IndexOf(' ');
          string str3 = "";
          string str4;
          if (num != -1)
          {
            str4 = _param1.Message.Substring(1, num - 1);
            str3 = _param1.Message.Substring(num + 1, _param1.Message.Length - num - 2);
          }
          else
            str4 = _param1.Message.Substring(1, _param1.Message.Length - 2);
          this.\uE001((object) this, new CtcpEventArgs(_param1, str4, str3));
          break;
      }
    }

    private void \uE014(IrcMessageData _param1)
    {
      switch (_param1.Type)
      {
        case ReceiveType.ChannelNotice:
          if (this.\uE007 == null)
            break;
          this.\uE007((object) this, new IrcEventArgs(_param1));
          break;
        case ReceiveType.QueryNotice:
          if (this.\uE002 == null)
            break;
          this.\uE002((object) this, new IrcEventArgs(_param1));
          break;
        case ReceiveType.CtcpReply:
          if (this.\uE000 == null)
            break;
          int num = _param1.Message.IndexOf(' ');
          string str1 = "";
          string str2;
          if (num != -1)
          {
            str2 = _param1.Message.Substring(1, num - 1);
            str1 = _param1.Message.Substring(num + 1, _param1.Message.Length - num - 2);
          }
          else
            str2 = _param1.Message.Substring(1, _param1.Message.Length - 2);
          this.\uE000((object) this, new CtcpEventArgs(_param1, str2, str1));
          break;
      }
    }

    private void \uE013(IrcMessageData _param1)
    {
      string nick = _param1.Nick;
      string channel = _param1.Channel;
      string message = _param1.Message;
      if (this.ActiveChannelSyncing && this.IsJoined(channel))
        this.GetChannel(channel).Topic = message;
      if (this.\uE00E == null)
        return;
      this.\uE00E((object) this, new TopicChangeEventArgs(_param1, channel, nick, message));
    }

    private void \uE012(IrcMessageData _param1)
    {
      string nick = _param1.Nick;
      string message = _param1.Message;
      if (this.IsMe(_param1.Nick))
        this.\uE053 = message;
      if (this.ActiveChannelSyncing)
      {
        IrcUser ircUser = this.GetIrcUser(nick);
        if (ircUser != null)
        {
          string[] joinedChannels = ircUser.JoinedChannels;
          ircUser.Nick = message;
          this.\uE039.Remove((object) nick);
          this.\uE039.Add((object) message, (object) ircUser);
          foreach (string channelname in joinedChannels)
          {
            Channel channel = this.GetChannel(channelname);
            ChannelUser channelUser = this.GetChannelUser(channelname, nick);
            channel.\uE002.Remove((object) nick);
            channel.\uE002.Add((object) message, (object) channelUser);
            if (channelUser.IsOp)
            {
              channel.\uE001.Remove((object) nick);
              channel.\uE001.Add((object) message, (object) channelUser);
            }
            if (this.SupportNonRfc && ((NonRfcChannelUser) channelUser).IsHalfop)
            {
              NonRfcChannel nonRfcChannel = (NonRfcChannel) channel;
              nonRfcChannel.\uE000.Remove((object) nick);
              nonRfcChannel.\uE000.Add((object) message, (object) channelUser);
            }
            if (channelUser.IsVoice)
            {
              channel.\uE000.Remove((object) nick);
              channel.\uE000.Add((object) message, (object) channelUser);
            }
          }
        }
      }
      if (this.\uE00D == null)
        return;
      this.\uE00D((object) this, new NickChangeEventArgs(_param1, nick, message));
    }

    private void \uE011(IrcMessageData _param1)
    {
      string channel = _param1.Channel;
      string nick = _param1.Nick;
      if (this.AutoJoinOnInvite && channel.Trim() != \uE01B.\uE000("\uF8F8", 63688))
        this.RfcJoin(channel);
      if (this.\uE01A == null)
        return;
      this.\uE01A((object) this, new InviteEventArgs(_param1, channel, nick));
    }

    private void \uE010(IrcMessageData _param1)
    {
      if (this.IsMe(_param1.RawMessageArray[2]))
      {
        this.\uE04F = _param1.RawMessageArray[3].Substring(1);
      }
      else
      {
        string rawMessage = _param1.RawMessageArray[3];
        string str = string.Join(\uE01B.\uE000("\uE372", 58194), _param1.RawMessageArray, 4, _param1.RawMessageArray.Length - 4);
        this.\uE000(_param1, rawMessage, str);
      }
      if (_param1.Type == ReceiveType.UserModeChange && this.\uE00B != null)
        this.\uE00B((object) this, new IrcEventArgs(_param1));
      if (_param1.Type == ReceiveType.ChannelModeChange && this.\uE00A != null)
        this.\uE00A((object) this, new IrcEventArgs(_param1));
      if (this.\uE00C == null)
        return;
      this.\uE00C((object) this, new IrcEventArgs(_param1));
    }

    private void \uE00F(IrcMessageData _param1)
    {
      if (!this.ActiveChannelSyncing || !this.IsJoined(_param1.Channel))
        return;
      string rawMessage = _param1.RawMessageArray[4];
      string str = string.Join(\uE01B.\uE000("\uE372", 58194), _param1.RawMessageArray, 5, _param1.RawMessageArray.Length - 5);
      this.\uE000(_param1, rawMessage, str);
    }

    private void \uE00E(IrcMessageData _param1)
    {
      this.\uE053 = _param1.RawMessageArray[2];
      if (this.\uE028 == null)
        return;
      this.\uE028((object) this, EventArgs.Empty);
    }

    private void \uE00D(IrcMessageData _param1)
    {
      string message = _param1.Message;
      string channel = _param1.Channel;
      if (this.ActiveChannelSyncing && this.IsJoined(channel))
        this.GetChannel(channel).Topic = message;
      if (this.\uE00F == null)
        return;
      this.\uE00F((object) this, new TopicEventArgs(_param1, channel, message));
    }

    private void \uE00C(IrcMessageData _param1)
    {
      string channel = _param1.Channel;
      if (this.ActiveChannelSyncing && this.IsJoined(channel))
        this.GetChannel(channel).Topic = "";
      if (this.\uE00F == null)
        return;
      this.\uE00F((object) this, new TopicEventArgs(_param1, channel, ""));
    }

    private void \uE00B(IrcMessageData _param1)
    {
      string channel1 = _param1.Channel;
      string[] messageArray = _param1.MessageArray;
      if (this.ActiveChannelSyncing && this.IsJoined(channel1))
      {
        foreach (string str1 in messageArray)
        {
          if (str1.Length > 0)
          {
            bool flag1 = false;
            bool flag2 = false;
            bool flag3 = false;
            string str2;
            switch (str1[0])
            {
              case '%':
                flag2 = true;
                str2 = str1.Substring(1);
                break;
              case '&':
                str2 = str1.Substring(1);
                break;
              case '+':
                flag3 = true;
                str2 = str1.Substring(1);
                break;
              case '@':
                flag1 = true;
                str2 = str1.Substring(1);
                break;
              case '~':
                str2 = str1.Substring(1);
                break;
              default:
                str2 = str1;
                break;
            }
            IrcUser ircUser = this.GetIrcUser(str2);
            ChannelUser channelUser = this.GetChannelUser(channel1, str2);
            if (ircUser == null)
            {
              ircUser = new IrcUser(str2, this);
              this.\uE039.Add((object) str2, (object) ircUser);
            }
            if (channelUser == null)
            {
              channelUser = !this.SupportNonRfc ? new ChannelUser(channel1, ircUser) : (ChannelUser) new NonRfcChannelUser(channel1, ircUser);
              Channel channel2 = this.GetChannel(channel1);
              channel2.\uE002.Add((object) str2, (object) channelUser);
              if (flag1)
                channel2.\uE001.Add((object) str2, (object) channelUser);
              if (this.SupportNonRfc && flag2)
                ((NonRfcChannel) channel2).\uE000.Add((object) str2, (object) channelUser);
              if (flag3)
                channel2.\uE000.Add((object) str2, (object) channelUser);
            }
            channelUser.IsOp = flag1;
            channelUser.IsVoice = flag3;
            if (this.SupportNonRfc)
              ((NonRfcChannelUser) channelUser).IsHalfop = flag2;
          }
        }
      }
      if (this.\uE021 == null)
        return;
      this.\uE021((object) this, new NamesEventArgs(_param1, channel1, messageArray));
    }

    private void \uE00A(IrcMessageData _param1)
    {
      string rawMessage = _param1.RawMessageArray[3];
      if (!this.ActiveChannelSyncing || !this.IsJoined(rawMessage) || this.\uE005 == null)
        return;
      this.\uE005((object) this, new IrcEventArgs(_param1));
    }

    private void \uE009(IrcMessageData _param1)
    {
      string rawMessage = _param1.RawMessageArray[3];
      string message = _param1.Message;
      if (this.ActiveChannelSyncing)
      {
        IrcUser ircUser = this.GetIrcUser(rawMessage);
        if (ircUser != null)
          ircUser.IsAway = true;
      }
      if (this.\uE01D == null)
        return;
      this.\uE01D((object) this, new AwayEventArgs(_param1, rawMessage, message));
    }

    private void \uE008(IrcMessageData _param1)
    {
      this.\uE04B = false;
      if (this.\uE01C == null)
        return;
      this.\uE01C((object) this, new IrcEventArgs(_param1));
    }

    private void \uE007(IrcMessageData _param1)
    {
      this.\uE04B = true;
      if (this.\uE01B == null)
        return;
      this.\uE01B((object) this, new IrcEventArgs(_param1));
    }

    private void \uE006(IrcMessageData _param1)
    {
      string channel = _param1.Channel;
      string rawMessage1 = _param1.RawMessageArray[4];
      string rawMessage2 = _param1.RawMessageArray[5];
      string rawMessage3 = _param1.RawMessageArray[6];
      string rawMessage4 = _param1.RawMessageArray[7];
      string rawMessage5 = _param1.RawMessageArray[8];
      string str = _param1.Message.Substring(2);
      int num = 0;
      string s = _param1.RawMessageArray[9].Substring(1);
      try
      {
        num = int.Parse(s);
      }
      catch (FormatException ex)
      {
      }
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      bool flag4 = false;
      int length = rawMessage5.Length;
      for (int index = 0; index < length; ++index)
      {
        switch (rawMessage5[index])
        {
          case '*':
            flag3 = true;
            break;
          case '+':
            flag2 = true;
            break;
          case '@':
            flag1 = true;
            break;
          case 'G':
            flag4 = true;
            break;
          case 'H':
            flag4 = false;
            break;
        }
      }
      if (this.ActiveChannelSyncing && this.IsJoined(channel))
      {
        IrcUser ircUser = this.GetIrcUser(rawMessage4);
        ChannelUser channelUser = this.GetChannelUser(channel, rawMessage4);
        if (ircUser != null)
        {
          ircUser.Ident = rawMessage1;
          ircUser.Host = rawMessage2;
          ircUser.Server = rawMessage3;
          ircUser.Nick = rawMessage4;
          ircUser.HopCount = num;
          ircUser.Realname = str;
          ircUser.IsAway = flag4;
          ircUser.IsIrcOp = flag3;
          switch (channel[0])
          {
            case '!':
            case '#':
            case '&':
            case '+':
              if (channelUser != null)
              {
                channelUser.IsOp = flag1;
                channelUser.IsVoice = flag2;
                break;
              }
              break;
          }
        }
      }
      if (this.\uE011 == null)
        return;
      this.\uE011((object) this, new WhoEventArgs(_param1, channel, rawMessage4, rawMessage1, rawMessage2, str, flag4, flag1, flag2, flag3, rawMessage3, num));
    }

    private void \uE005(IrcMessageData _param1)
    {
      if (!this.\uE03D)
        this.\uE03E.Add(_param1.Message);
      if (this.\uE010 == null)
        return;
      this.\uE010((object) this, new MotdEventArgs(_param1, _param1.Message));
    }

    private void \uE004(IrcMessageData _param1) => this.\uE03D = true;

    private void \uE003(IrcMessageData _param1)
    {
    }

    private void \uE002(IrcMessageData _param1)
    {
      string channel = _param1.Channel;
      if (!this.ActiveChannelSyncing || !this.IsJoined(channel))
        return;
      this.GetChannel(channel).ActiveSyncStop = DateTime.Now;
      if (this.\uE006 == null)
        return;
      this.\uE006((object) this, new IrcEventArgs(_param1));
    }

    private void \uE001(IrcMessageData _param1)
    {
      if (this.\uE023 == null)
        return;
      this.\uE023((object) this, new IrcEventArgs(_param1));
    }

    private void \uE000(IrcMessageData _param1)
    {
      if (!this.AutoNickHandling)
        return;
      string newnickname;
      if (this.\uE051 == this.NicknameList.Length - 1)
      {
        int num = new Random().Next(999);
        newnickname = this.Nickname.Length <= 5 ? this.Nickname.Substring(0, this.Nickname.Length - 1) + (object) num : this.Nickname.Substring(0, 5) + (object) num;
      }
      else
        newnickname = this.\uE000();
      this.RfcNick(newnickname, Priority.Critical);
    }
  }
}
