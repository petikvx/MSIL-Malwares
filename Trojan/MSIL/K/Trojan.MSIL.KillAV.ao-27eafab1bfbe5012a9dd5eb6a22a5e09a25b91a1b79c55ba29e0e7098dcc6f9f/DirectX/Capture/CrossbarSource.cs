// Decompiled with JetBrains decompiler
// Type: DirectX.Capture.CrossbarSource
// Assembly: p, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 91D63E37-42E0-404C-97F4-07116ACD2D57
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.KillAV.ao-27eafab1bfbe5012a9dd5eb6a22a5e09a25b91a1b79c55ba29e0e7098dcc6f9f.exe

using DShowNET;
using System.Runtime.InteropServices;

namespace DirectX.Capture
{
  public class CrossbarSource : Source
  {
    internal IAMCrossbar Crossbar;
    internal int OutputPin;
    internal int InputPin;
    internal PhysicalConnectorType ConnectorType;

    public override bool Enabled
    {
      get
      {
        int InputPinIndex;
        return this.Crossbar.get_IsRoutedTo(this.OutputPin, out InputPinIndex) == 0 && this.InputPin == InputPinIndex;
      }
      set
      {
        int num;
        if (value)
          num = this.Crossbar.Route(this.OutputPin, this.InputPin);
        else
          num = this.Crossbar.Route(this.OutputPin, -1);
      }
    }

    internal CrossbarSource(
      IAMCrossbar crossbar,
      int outputPin,
      int inputPin,
      PhysicalConnectorType connectorType)
    {
      this.Crossbar = crossbar;
      this.OutputPin = outputPin;
      this.InputPin = inputPin;
      this.ConnectorType = connectorType;
      this.name = this.getName(connectorType);
    }

    private string getName(PhysicalConnectorType connectorType)
    {
      string name;
      switch (connectorType)
      {
        case PhysicalConnectorType.Video_Tuner:
          name = "Video Tuner";
          break;
        case PhysicalConnectorType.Video_Composite:
          name = "Video Composite";
          break;
        case PhysicalConnectorType.Video_SVideo:
          name = "Video S-Video";
          break;
        case PhysicalConnectorType.Video_RGB:
          name = "Video RGB";
          break;
        case PhysicalConnectorType.Video_YRYBY:
          name = "Video YRYBY";
          break;
        case PhysicalConnectorType.Video_SerialDigital:
          name = "Video Serial Digital";
          break;
        case PhysicalConnectorType.Video_ParallelDigital:
          name = "Video Parallel Digital";
          break;
        case PhysicalConnectorType.Video_SCSI:
          name = "Video SCSI";
          break;
        case PhysicalConnectorType.Video_AUX:
          name = "Video AUX";
          break;
        case PhysicalConnectorType.Video_1394:
          name = "Video Firewire";
          break;
        case PhysicalConnectorType.Video_USB:
          name = "Video USB";
          break;
        case PhysicalConnectorType.Video_VideoDecoder:
          name = "Video Decoder";
          break;
        case PhysicalConnectorType.Video_VideoEncoder:
          name = "Video Encoder";
          break;
        case PhysicalConnectorType.Video_SCART:
          name = "Video SCART";
          break;
        case PhysicalConnectorType.Audio_Tuner:
          name = "Audio Tuner";
          break;
        case PhysicalConnectorType.Audio_Line:
          name = "Audio Line In";
          break;
        case PhysicalConnectorType.Audio_Mic:
          name = "Audio Mic";
          break;
        case PhysicalConnectorType.Audio_AESDigital:
          name = "Audio AES Digital";
          break;
        case PhysicalConnectorType.Audio_SPDIFDigital:
          name = "Audio SPDIF Digital";
          break;
        case PhysicalConnectorType.Audio_SCSI:
          name = "Audio SCSI";
          break;
        case PhysicalConnectorType.Audio_AUX:
          name = "Audio AUX";
          break;
        case PhysicalConnectorType.Audio_1394:
          name = "Audio Firewire";
          break;
        case PhysicalConnectorType.Audio_USB:
          name = "Audio USB";
          break;
        case PhysicalConnectorType.Audio_AudioDecoder:
          name = "Audio Decoder";
          break;
        default:
          name = "Unknown Connector";
          break;
      }
      return name;
    }

    public override void Dispose()
    {
      if (this.Crossbar != null)
        Marshal.ReleaseComObject((object) this.Crossbar);
      this.Crossbar = (IAMCrossbar) null;
      base.Dispose();
    }
  }
}
