// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEDayOfMonth
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;
using System.Runtime.InteropServices;
using TemporalToolkit.Extensions;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEDayOfMonth : TemporalExpression
  {
    public DayOfWeek Day { get; set; }

    public int Occurrence { get; set; }

    public TEDayOfMonth(DateTime date)
    {
      this.Day = date.DayOfWeek;
      this.Occurrence = date.OccurrenceOfDayInMonth();
    }

    public TEDayOfMonth(DayOfWeek day, int occurrence)
    {
      this.Day = day;
      this.Occurrence = occurrence;
    }

    public override bool Includes(DateTime aDate)
    {
      bool flag1 = this.Occurrence < 0;
label_1:
      int num1 = -521212567;
      bool flag2;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -1051573439)) % 11U)
        {
          case 0:
            if (aDate.DayOfWeek == this.Day)
            {
              num1 = -1855280106;
              continue;
            }
            num4 = 0;
            goto label_17;
          case 1:
            num1 = (int) num2 * -928353998 ^ 1251716700;
            continue;
          case 2:
            num1 = (int) num2 * -1606259184 ^ -400379578;
            continue;
          case 3:
            num4 = aDate.OccurrenceOfDayInMonth() == this.Occurrence ? 1 : 0;
            goto label_17;
          case 5:
            if (aDate.DayOfWeek == this.Day)
            {
              num1 = (int) num2 * -1594022315 ^ -830329328;
              continue;
            }
            num5 = 0;
            break;
          case 6:
            num5 = num3 == TEDayOfMonth.\u206A⁬‫​​⁬‮‮⁫⁭‍⁮‭⁬⁭⁬⁯‬‭‮‎​​‬​‏‮‏‭‪‬⁮⁪‪⁪⁯⁯‭⁪⁫‮(this.Occurrence) ? 1 : 0;
            break;
          case 7:
            num3 = (num3 - 1) / 7 + 1;
            num1 = (int) num2 * -7968493 ^ 1747559598;
            continue;
          case 8:
            num3 = DateTime.DaysInMonth(aDate.Year, aDate.Month) - aDate.Day + 1;
            num1 = (int) num2 * 1427675591 ^ -1533020077;
            continue;
          case 9:
            goto label_1;
          case 10:
            int num6 = !flag1 ? -532413947 : (num6 = -1265435170);
            num1 = num6 ^ (int) num2 * 496347905;
            continue;
          default:
            goto label_18;
        }
        flag2 = num5 != 0;
        num1 = -2108833668;
        continue;
label_17:
        flag2 = num4 != 0;
        num1 = -1727258442;
      }
label_18:
      return flag2;
    }

    static int \u206A⁬‫​​⁬‮‮⁫⁭‍⁮‭⁬⁭⁬⁯‬‭‮‎​​‬​‏‮‏‭‪‬⁮⁪‪⁪⁯⁯‭⁪⁫‮([In] int obj0) => Math.Abs(obj0);
  }
}
