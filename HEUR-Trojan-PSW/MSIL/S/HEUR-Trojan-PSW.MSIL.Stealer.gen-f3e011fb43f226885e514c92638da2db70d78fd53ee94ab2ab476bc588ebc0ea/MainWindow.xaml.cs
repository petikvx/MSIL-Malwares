// Decompiled with JetBrains decompiler
// Type: RemnantSaveManager.MainWindow
// Assembly: RemnantSaveManager, Version=1.99.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E1F1E8C4-E528-4D7B-AF51-D8C10E64558F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f3e011fb43f226885e514c92638da2db70d78fd53ee94ab2ab476bc588ebc0ea.exe

using Microsoft.Win32;
using RemnantSaveManager.Properties;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Threading;
using System.Timers;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;

namespace RemnantSaveManager
{
  public partial class MainWindow : Window, IComponentConnector
  {
    private static string defaultBackupFolder = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Remnant\\Saved\\Backups";
    private static string backupDirPath;
    private static string defaultSaveFolder = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Remnant\\Saved\\SaveGames";
    private static string defaultWgsSaveFolder = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Packages\\PerfectWorldEntertainment.RemnantFromtheAshes_jrajkyc4tsa6w\\SystemAppData\\wgs";
    private static string saveDirPath;
    private static string gameDirPath;
    private List<SaveBackup> listBackups;
    private bool suppressLog;
    private FileSystemWatcher saveWatcher;
    private Process gameProcess;
    private RemnantSave activeSave;
    private SaveAnalyzer activeSaveAnalyzer;
    private List<SaveAnalyzer> backupSaveAnalyzers;
    private RestoreDialog restoreDialog;
    private System.Timers.Timer saveTimer;
    private DateTime lastUpdateCheck;
    private int saveCount;
    internal RowDefinition ForToolbar;
    internal RowDefinition ForBackups;
    internal RowDefinition ForStatusbar;
    internal System.Windows.Controls.Button btnAnalyzeCurrent;
    internal System.Windows.Controls.Button btnOpenFolder;
    internal System.Windows.Controls.Button btnStartGame;
    internal TabItem tabBackups;
    internal System.Windows.Controls.DataGrid dataBackups;
    internal System.Windows.Controls.MenuItem backupCMStart;
    internal TabItem tabSettings;
    internal System.Windows.Controls.CheckBox chkAutoBackup;
    internal System.Windows.Controls.TextBox txtBackupMins;
    internal System.Windows.Controls.TextBox txtBackupLimit;
    internal System.Windows.Controls.TextBox txtBackupFolder;
    internal System.Windows.Controls.Button btnBackupFolder;
    internal System.Windows.Controls.Button btnGameInfoUpdate;
    internal System.Windows.Controls.CheckBox chkCreateLogFile;
    internal System.Windows.Controls.ComboBox cmbMissingItemColor;
    internal System.Windows.Controls.CheckBox chkShowPossibleItems;
    internal System.Windows.Controls.CheckBox chkAutoCheckUpdate;
    internal System.Windows.Controls.Button btnSaveFolder;
    internal System.Windows.Controls.TextBox txtSaveFolder;
    internal System.Windows.Controls.Button btnGameFolder;
    internal System.Windows.Controls.TextBox txtGameFolder;
    internal System.Windows.Controls.Button btnFindGameFolder;
    internal TabItem tabLog;
    internal System.Windows.Controls.TextBox txtLog;
    internal System.Windows.Controls.Label lblStatus;
    internal System.Windows.Controls.Button btnBackup;
    internal System.Windows.Controls.Label lblLastMessage;
    private bool _contentLoaded;

    private bool ActiveSaveIsBackedUp
    {
      get
      {
        DateTime lastWriteTime = System.IO.File.GetLastWriteTime(this.activeSave.SaveProfilePath);
        for (int index = 0; index < this.listBackups.Count; ++index)
        {
          DateTime saveDate = this.listBackups.ToArray()[index].SaveDate;
          if (lastWriteTime.Equals(saveDate))
            return true;
        }
        return false;
      }
      set
      {
        if (value)
        {
          this.lblStatus.ToolTip = (object) "Backed Up";
          this.lblStatus.Content = this.FindResource((object) "StatusOK");
          this.btnBackup.IsEnabled = false;
          this.btnBackup.Content = this.FindResource((object) "SaveGrey");
        }
        else
        {
          this.lblStatus.ToolTip = (object) "Not Backed Up";
          this.lblStatus.Content = this.FindResource((object) "StatusNo");
          this.btnBackup.IsEnabled = true;
          this.btnBackup.Content = this.FindResource((object) "Save");
        }
      }
    }

    public MainWindow()
    {
      this.InitializeComponent();
      this.suppressLog = false;
      this.txtLog.Text = "Version " + (object) typeof (MainWindow).Assembly.GetName().Version;
      if (Settings.Default.CreateLogFile)
        System.IO.File.WriteAllText("log.txt", DateTime.Now.ToString() + ": Version " + (object) typeof (MainWindow).Assembly.GetName().Version + "\r\n");
      this.logMessage("Loading...");
      if (Settings.Default.UpgradeRequired)
      {
        Settings.Default.Upgrade();
        Settings.Default.UpgradeRequired = false;
        Settings.Default.Save();
      }
      if (Settings.Default.SaveFolder.Length == 0)
      {
        this.logMessage("Save folder not set; reverting to default.");
        Settings.Default.SaveFolder = MainWindow.defaultSaveFolder;
        if (!Directory.Exists(MainWindow.defaultSaveFolder) && Directory.Exists(MainWindow.defaultWgsSaveFolder))
        {
          foreach (string directory in Directory.GetDirectories(MainWindow.defaultWgsSaveFolder))
          {
            if (directory != "t" && Directory.GetDirectories(directory).Length != 0)
              Settings.Default.SaveFolder = Directory.GetDirectories(directory)[0];
          }
        }
        Settings.Default.Save();
      }
      else if (!Directory.Exists(Settings.Default.SaveFolder) && !Settings.Default.SaveFolder.Equals(MainWindow.defaultSaveFolder))
      {
        this.logMessage("Save folder (" + Settings.Default.SaveFolder + ") not found; reverting to default.");
        Settings.Default.SaveFolder = MainWindow.defaultSaveFolder;
        Settings.Default.Save();
      }
      if (Settings.Default.BackupFolder.Length == 0)
      {
        this.logMessage("Backup folder not set; reverting to default.");
        Settings.Default.BackupFolder = MainWindow.defaultBackupFolder;
        Settings.Default.Save();
      }
      else if (!Directory.Exists(Settings.Default.BackupFolder) && !Settings.Default.BackupFolder.Equals(MainWindow.defaultBackupFolder))
      {
        this.logMessage("Backup folder (" + Settings.Default.BackupFolder + ") not found; reverting to default.");
        Settings.Default.BackupFolder = MainWindow.defaultBackupFolder;
        Settings.Default.Save();
      }
      MainWindow.saveDirPath = Settings.Default.SaveFolder;
      if (!Directory.Exists(MainWindow.saveDirPath))
      {
        this.logMessage("Save folder not found, creating...");
        Directory.CreateDirectory(MainWindow.saveDirPath);
      }
      this.txtSaveFolder.Text = MainWindow.saveDirPath;
      MainWindow.gameDirPath = Settings.Default.GameFolder;
      this.txtGameFolder.Text = MainWindow.gameDirPath;
      if (!Directory.Exists(MainWindow.gameDirPath))
      {
        this.logMessage("Game folder not found...");
        this.btnStartGame.IsEnabled = false;
        this.btnStartGame.Content = this.FindResource((object) "PlayGrey");
        this.backupCMStart.IsEnabled = false;
        this.backupCMStart.Icon = this.FindResource((object) "PlayGrey");
        if (MainWindow.gameDirPath == "")
          this.TryFindGameFolder();
      }
      MainWindow.backupDirPath = Settings.Default.BackupFolder;
      this.txtBackupFolder.Text = MainWindow.backupDirPath;
      this.chkCreateLogFile.IsChecked = new bool?(Settings.Default.CreateLogFile);
      this.saveTimer = new System.Timers.Timer();
      this.saveTimer.Interval = 2000.0;
      this.saveTimer.AutoReset = false;
      this.saveTimer.Elapsed += new ElapsedEventHandler(this.OnSaveTimerElapsed);
      this.saveWatcher = new FileSystemWatcher();
      this.saveWatcher.Path = MainWindow.saveDirPath;
      this.saveWatcher.NotifyFilter = NotifyFilters.LastWrite;
      this.saveWatcher.Filter = this.activeSave.SaveType != RemnantSaveType.Normal ? "container.*" : "profile.sav";
      this.saveWatcher.Changed += new FileSystemEventHandler(this.OnSaveFileChanged);
      this.saveWatcher.Created += new FileSystemEventHandler(this.OnSaveFileChanged);
      this.saveWatcher.Deleted += new FileSystemEventHandler(this.OnSaveFileChanged);
      this.listBackups = new List<SaveBackup>();
      SaveAnalyzer saveAnalyzer = new SaveAnalyzer(this);
      saveAnalyzer.ActiveSave = true;
      saveAnalyzer.Title = "Active Save World Analyzer";
      this.activeSaveAnalyzer = saveAnalyzer;
      this.backupSaveAnalyzers = new List<SaveAnalyzer>();
      GameInfo.GameInfoUpdate += new EventHandler<GameInfoUpdateEventArgs>(this.OnGameInfoUpdate);
      this.dataBackups.CanUserDeleteRows = false;
      this.saveCount = 0;
    }

    private void Window_Loaded(object sender, RoutedEventArgs e)
    {
      this.txtLog.IsReadOnly = true;
      this.logMessage("Current save date: " + System.IO.File.GetLastWriteTime(this.activeSave.SaveProfilePath).ToString());
      this.loadBackups();
      this.chkAutoBackup.IsChecked = new bool?(Settings.Default.AutoBackup);
      this.txtBackupMins.Text = Settings.Default.BackupMinutes.ToString();
      this.txtBackupLimit.Text = Settings.Default.BackupLimit.ToString();
      this.chkShowPossibleItems.IsChecked = new bool?(Settings.Default.ShowPossibleItems);
      this.chkAutoCheckUpdate.IsChecked = new bool?(Settings.Default.AutoCheckUpdate);
      this.cmbMissingItemColor.Items.Add((object) "Red");
      this.cmbMissingItemColor.Items.Add((object) "White");
      if (Settings.Default.MissingItemColor.ToString().Equals("Red"))
        this.cmbMissingItemColor.SelectedIndex = 0;
      else
        this.cmbMissingItemColor.SelectedIndex = 1;
      this.cmbMissingItemColor.SelectionChanged += new SelectionChangedEventHandler(this.cmbMissingItemColorSelectionChanged);
      this.saveWatcher.EnableRaisingEvents = true;
      this.updateCurrentWorldAnalyzer();
      if (!Settings.Default.AutoCheckUpdate)
        return;
      this.checkForUpdate();
    }

    private void loadBackups()
    {
      if (!Directory.Exists(MainWindow.backupDirPath))
      {
        this.logMessage("Backups folder not found, creating...");
        Directory.CreateDirectory(MainWindow.backupDirPath);
      }
      this.dataBackups.ItemsSource = (IEnumerable) null;
      this.listBackups.Clear();
      Dictionary<long, string> savedBackupNames = this.getSavedBackupNames();
      Dictionary<long, bool> savedBackupKeeps = this.getSavedBackupKeeps();
      string[] directories = Directory.GetDirectories(MainWindow.backupDirPath);
      SaveBackup saveBackup1 = (SaveBackup) null;
      for (int index = 0; index < directories.Length; ++index)
      {
        if (RemnantSave.ValidSaveFolder(directories[index]))
        {
          SaveBackup saveBackup2 = new SaveBackup(directories[index]);
          if (savedBackupNames.ContainsKey(saveBackup2.SaveDate.Ticks))
            saveBackup2.Name = savedBackupNames[saveBackup2.SaveDate.Ticks];
          if (savedBackupKeeps.ContainsKey(saveBackup2.SaveDate.Ticks))
            saveBackup2.Keep = savedBackupKeeps[saveBackup2.SaveDate.Ticks];
          if (this.backupActive(saveBackup2))
          {
            saveBackup2.Active = true;
            saveBackup1 = saveBackup2;
          }
          saveBackup2.Updated += new EventHandler<UpdatedEventArgs>(this.saveUpdated);
          this.listBackups.Add(saveBackup2);
        }
      }
      this.dataBackups.ItemsSource = (IEnumerable) this.listBackups;
      this.logMessage("Backups found: " + (object) this.listBackups.Count);
      if (this.listBackups.Count > 0)
        this.logMessage("Last backup save date: " + this.listBackups[this.listBackups.Count - 1].SaveDate.ToString());
      if (saveBackup1 != null)
        this.dataBackups.SelectedItem = (object) saveBackup1;
      this.ActiveSaveIsBackedUp = saveBackup1 != null;
    }

    private void saveUpdated(object sender, UpdatedEventArgs args)
    {
      if (args.FieldName.Equals("Name"))
      {
        this.updateSavedNames();
      }
      else
      {
        if (!args.FieldName.Equals("Keep"))
          return;
        this.updateSavedKeeps();
      }
    }

    private void loadBackups(bool verbose)
    {
      bool suppressLog = this.suppressLog;
      this.suppressLog = !verbose;
      this.loadBackups();
      this.suppressLog = suppressLog;
    }

    private bool backupActive(SaveBackup saveBackup) => DateTime.Compare(saveBackup.SaveDate, System.IO.File.GetLastWriteTime(this.activeSave.SaveProfilePath)) == 0;

    public void logMessage(string msg) => this.logMessage(msg, Colors.White);

    public void logMessage(string msg, MainWindow.LogType lt)
    {
      System.Windows.Media.Color color = Colors.White;
      switch (lt)
      {
        case MainWindow.LogType.Success:
          color = System.Windows.Media.Color.FromRgb((byte) 0, (byte) 200, (byte) 0);
          break;
        case MainWindow.LogType.Error:
          color = System.Windows.Media.Color.FromRgb((byte) 200, (byte) 0, (byte) 0);
          break;
      }
      this.logMessage(msg, color);
    }

    public void logMessage(string msg, System.Windows.Media.Color color)
    {
      if (!this.suppressLog)
      {
        this.txtLog.Text = this.txtLog.Text + Environment.NewLine + DateTime.Now.ToString() + ": " + msg;
        this.lblLastMessage.Content = (object) msg;
        this.lblLastMessage.Foreground = (Brush) new SolidColorBrush(color);
        if (color.Equals(Colors.White))
          this.lblLastMessage.FontWeight = FontWeights.Normal;
        else
          this.lblLastMessage.FontWeight = FontWeights.Bold;
      }
      if (!Settings.Default.CreateLogFile)
        return;
      StreamWriter streamWriter = System.IO.File.AppendText("log.txt");
      streamWriter.WriteLine(DateTime.Now.ToString() + ": " + msg);
      streamWriter.Close();
    }

    private void BtnBackup_Click(object sender, RoutedEventArgs e) => this.doBackup();

    private void doBackup()
    {
      try
      {
        if (!this.activeSave.Valid)
        {
          this.logMessage("Active save is not valid; backup skipped.");
        }
        else
        {
          int index1 = -1;
          DateTime lastWriteTime = System.IO.File.GetLastWriteTime(this.activeSave.SaveProfilePath);
          string str1 = MainWindow.backupDirPath + "\\" + (object) lastWriteTime.Ticks;
          DateTime saveDate;
          if (!Directory.Exists(str1))
            Directory.CreateDirectory(str1);
          else if (RemnantSave.ValidSaveFolder(str1))
          {
            for (int index2 = this.listBackups.Count - 1; index2 >= 0; --index2)
            {
              saveDate = this.listBackups[index2].SaveDate;
              if (saveDate.Ticks == lastWriteTime.Ticks)
              {
                index1 = index2;
                break;
              }
            }
          }
          foreach (string file in Directory.GetFiles(MainWindow.saveDirPath))
            System.IO.File.Copy(file, str1 + "\\" + Path.GetFileName(file), true);
          if (RemnantSave.ValidSaveFolder(str1))
          {
            Dictionary<long, string> savedBackupNames = this.getSavedBackupNames();
            Dictionary<long, bool> savedBackupKeeps = this.getSavedBackupKeeps();
            SaveBackup saveBackup1 = new SaveBackup(str1);
            Dictionary<long, string> dictionary1 = savedBackupNames;
            saveDate = saveBackup1.SaveDate;
            long ticks1 = saveDate.Ticks;
            if (dictionary1.ContainsKey(ticks1))
            {
              SaveBackup saveBackup2 = saveBackup1;
              Dictionary<long, string> dictionary2 = savedBackupNames;
              saveDate = saveBackup1.SaveDate;
              long ticks2 = saveDate.Ticks;
              string str2 = dictionary2[ticks2];
              saveBackup2.Name = str2;
            }
            Dictionary<long, bool> dictionary3 = savedBackupKeeps;
            saveDate = saveBackup1.SaveDate;
            long ticks3 = saveDate.Ticks;
            if (dictionary3.ContainsKey(ticks3))
            {
              SaveBackup saveBackup3 = saveBackup1;
              Dictionary<long, bool> dictionary4 = savedBackupKeeps;
              saveDate = saveBackup1.SaveDate;
              long ticks4 = saveDate.Ticks;
              int num = dictionary4[ticks4] ? 1 : 0;
              saveBackup3.Keep = num != 0;
            }
            foreach (SaveBackup listBackup in this.listBackups)
              listBackup.Active = false;
            saveBackup1.Active = true;
            saveBackup1.Updated += new EventHandler<UpdatedEventArgs>(this.saveUpdated);
            if (index1 > -1)
              this.listBackups[index1] = saveBackup1;
            else
              this.listBackups.Add(saveBackup1);
          }
          this.checkBackupLimit();
          this.dataBackups.Items.Refresh();
          this.ActiveSaveIsBackedUp = true;
          this.logMessage(string.Format("Backup completed ({0})!", (object) lastWriteTime.ToString()), MainWindow.LogType.Success);
        }
      }
      catch (IOException ex)
      {
        if (!ex.Message.Contains("being used by another process"))
          return;
        this.logMessage("Save file in use; waiting 0.5 seconds and retrying.");
        Thread.Sleep(500);
        this.doBackup();
      }
    }

    private bool isRemnantRunning() => Process.GetProcessesByName("Remnant").Length != 0;

    private void BtnRestoreStart_Click(object sender, RoutedEventArgs e)
    {
      if (this.isRemnantRunning())
        this.logMessage("Exit the game before restoring a save backup.", MainWindow.LogType.Error);
      else if (this.dataBackups.SelectedItem == null)
      {
        this.logMessage("Choose a backup to restore from the list!", MainWindow.LogType.Error);
      }
      else
      {
        SaveBackup selectedItem = (SaveBackup) this.dataBackups.SelectedItem;
        this.restoreDialog = new RestoreDialog(this, selectedItem, this.activeSave);
        this.restoreDialog.Owner = (Window) this;
        bool? nullable = this.restoreDialog.ShowDialog();
        if (nullable.HasValue && !nullable.Value)
          return;
        string result = this.restoreDialog.Result;
        this.RestoreBackup(selectedItem, result, true);
      }
    }

    private void RestoreBackup(SaveBackup backup, string type = "All", bool startGame = false)
    {
      if (!this.ActiveSaveIsBackedUp)
        this.doBackup();
      this.saveWatcher.EnableRaisingEvents = false;
      DirectoryInfo directoryInfo1 = new DirectoryInfo(MainWindow.saveDirPath);
      DirectoryInfo directoryInfo2 = new DirectoryInfo(MainWindow.backupDirPath + "\\" + (object) backup.SaveDate.Ticks);
      string str = type;
      if (!(str == "All"))
      {
        if (!(str == "Character"))
        {
          if (str == "World")
          {
            foreach (FileInfo file in directoryInfo2.GetFiles("save_?.sav"))
            {
              FileInfo fileInfo = new FileInfo(string.Format("{0}\\{1}", (object) directoryInfo1.FullName, (object) file.Name));
              if (fileInfo.Exists)
                fileInfo.Delete();
              file.CopyTo(string.Format("{0}\\{1}", (object) MainWindow.saveDirPath, (object) file.Name));
            }
          }
          else
          {
            this.logMessage("Something went wrong!", MainWindow.LogType.Error);
            return;
          }
        }
        else
        {
          foreach (FileInfo file in directoryInfo2.GetFiles("profile.sav"))
          {
            FileInfo fileInfo = new FileInfo(string.Format("{0}\\{1}", (object) directoryInfo1.FullName, (object) file.Name));
            if (fileInfo.Exists)
              fileInfo.Delete();
            file.CopyTo(string.Format("{0}\\{1}", (object) MainWindow.saveDirPath, (object) file.Name));
          }
        }
      }
      else
      {
        foreach (FileSystemInfo file in directoryInfo1.GetFiles())
          file.Delete();
        foreach (FileInfo file in directoryInfo2.GetFiles())
          file.CopyTo(string.Format("{0}\\{1}", (object) MainWindow.saveDirPath, (object) file.Name));
      }
      foreach (SaveBackup listBackup in this.listBackups)
        listBackup.Active = false;
      if (type != "Character")
        backup.Active = true;
      this.updateCurrentWorldAnalyzer();
      this.dataBackups.Items.Refresh();
      this.logMessage("Backup restored!", MainWindow.LogType.Success);
      this.saveWatcher.EnableRaisingEvents = Settings.Default.AutoBackup;
      if (!startGame)
        return;
      this.LaunchGame();
    }

    private void BtnRestore_Click(object sender, RoutedEventArgs e)
    {
      if (this.isRemnantRunning())
        this.logMessage("Exit the game before restoring a save backup.", MainWindow.LogType.Error);
      else if (this.dataBackups.SelectedItem == null)
      {
        this.logMessage("Choose a backup to restore from the list!", MainWindow.LogType.Error);
      }
      else
      {
        SaveBackup selectedItem = (SaveBackup) this.dataBackups.SelectedItem;
        this.restoreDialog = new RestoreDialog(this, selectedItem, this.activeSave);
        this.restoreDialog.Owner = (Window) this;
        bool? nullable = this.restoreDialog.ShowDialog();
        if (nullable.HasValue && !nullable.Value)
          return;
        string result = this.restoreDialog.Result;
        this.RestoreBackup(selectedItem, result);
      }
    }

    private void ChkAutoBackup_Click(object sender, RoutedEventArgs e)
    {
      Settings.Default.AutoBackup = this.chkAutoBackup.IsChecked.HasValue && this.chkAutoBackup.IsChecked.Value;
      Settings.Default.Save();
    }

    private void OnSaveFileChanged(object source, FileSystemEventArgs e)
    {
      if (this.activeSave.SaveType == RemnantSaveType.WindowsStore)
        return;
      this.Dispatcher.Invoke((Action) (() =>
      {
        try
        {
          this.saveTimer.Interval = 10000.0;
          this.saveTimer.Enabled = true;
          ++this.saveCount;
          if (this.saveCount != 4)
            return;
          this.updateCurrentWorldAnalyzer();
          this.saveCount = 0;
        }
        catch (Exception ex)
        {
          this.logMessage(ex.GetType().ToString() + " setting save file timer: " + ex.Message + "(" + ex.StackTrace + ")");
        }
      }));
    }

    private void OnSaveTimerElapsed(object source, ElapsedEventArgs e) => this.Dispatcher.Invoke((Action) (() =>
    {
      try
      {
        if (Settings.Default.AutoBackup)
        {
          DateTime t2;
          if (this.listBackups.Count > 0)
          {
            t2 = this.listBackups[this.listBackups.Count - 1].SaveDate.AddMinutes((double) Settings.Default.BackupMinutes);
          }
          else
          {
            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0);
            t2 = new DateTime(1970, 1, 1, 0, 0, 0, 0);
          }
          if (DateTime.Compare(DateTime.Now, t2) >= 0)
          {
            this.doBackup();
          }
          else
          {
            this.ActiveSaveIsBackedUp = false;
            foreach (SaveBackup listBackup in this.listBackups)
            {
              if (listBackup.Active)
                listBackup.Active = false;
            }
            this.dataBackups.Items.Refresh();
            TimeSpan timeSpan = t2 - DateTime.Now;
            this.logMessage(string.Format("Save change detected, but {0} minutes, left until next backup", (object) ((double) timeSpan.Minutes + Math.Round((double) timeSpan.Seconds / 60.0, 2))));
          }
        }
        if (this.saveCount != 0)
        {
          this.updateCurrentWorldAnalyzer();
          this.saveCount = 0;
        }
        if (this.gameProcess != null && !this.gameProcess.HasExited)
          return;
        Process[] processesByName = Process.GetProcessesByName("Remnant");
        if (processesByName.Length != 0)
        {
          this.gameProcess = processesByName[0];
          this.gameProcess.EnableRaisingEvents = true;
          this.gameProcess.Exited += (EventHandler) ((s, eargs) => this.Dispatcher.Invoke((Action) (() => this.doBackup())));
        }
      }
      catch (Exception ex)
      {
        this.logMessage(ex.GetType().ToString() + " processing save file change: " + ex.Message + "(" + ex.StackTrace + ")");
      }
    }));

    private void TxtBackupMins_LostFocus(object sender, RoutedEventArgs e) => this.updateBackupMins();

    private void TxtBackupMins_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
    {
      if (e.Key != Key.Return)
        return;
      this.updateBackupMins();
    }

    private void updateBackupMins()
    {
      string text = this.txtBackupMins.Text;
      bool flag = false;
      int result;
      if (text.Length > 0)
      {
        if (int.TryParse(text, out result))
          flag = true;
        else
          result = Settings.Default.BackupMinutes;
      }
      else
        result = Settings.Default.BackupMinutes;
      if (result != Settings.Default.BackupMinutes)
      {
        Settings.Default.BackupMinutes = result;
        Settings.Default.Save();
      }
      if (flag)
        return;
      this.txtBackupMins.Text = Settings.Default.BackupMinutes.ToString();
    }

    private void TxtBackupLimit_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
    {
      if (e.Key != Key.Return)
        return;
      this.updateBackupLimit();
    }

    private void TxtBackupLimit_LostFocus(object sender, RoutedEventArgs e) => this.updateBackupLimit();

    private void updateBackupLimit()
    {
      string text = this.txtBackupLimit.Text;
      bool flag = false;
      int result;
      if (text.Length > 0)
      {
        if (int.TryParse(text, out result))
          flag = true;
        else
          result = Settings.Default.BackupLimit;
      }
      else
        result = 0;
      if (result != Settings.Default.BackupLimit)
      {
        Settings.Default.BackupLimit = result;
        Settings.Default.Save();
      }
      if (flag)
        return;
      this.txtBackupLimit.Text = Settings.Default.BackupLimit.ToString();
    }

    private void checkBackupLimit()
    {
      if (this.listBackups.Count <= Settings.Default.BackupLimit || Settings.Default.BackupLimit <= 0)
        return;
      List<SaveBackup> saveBackupList = new List<SaveBackup>();
      int num = this.listBackups.Count - Settings.Default.BackupLimit;
      for (int index = 0; index < this.listBackups.Count && num > 0; ++index)
      {
        if (!this.listBackups[index].Keep && !this.listBackups[index].Active)
        {
          this.logMessage("Deleting excess backup " + this.listBackups[index].Name + " (" + (object) this.listBackups[index].SaveDate + ")");
          Directory.Delete(MainWindow.backupDirPath + "\\" + (object) this.listBackups[index].SaveDate.Ticks, true);
          saveBackupList.Add(this.listBackups[index]);
          --num;
        }
      }
      for (int index = 0; index < saveBackupList.Count; ++index)
        this.listBackups.Remove(saveBackupList[index]);
    }

    private void BtnOpenFolder_Click(object sender, RoutedEventArgs e)
    {
      if (!Directory.Exists(MainWindow.backupDirPath))
      {
        this.logMessage("Backups folder not found, creating...");
        Directory.CreateDirectory(MainWindow.backupDirPath);
      }
      Process.Start(MainWindow.backupDirPath + "\\");
    }

    private Dictionary<long, string> getSavedBackupNames()
    {
      Dictionary<long, string> savedBackupNames = new Dictionary<long, string>();
      string backupName = Settings.Default.BackupName;
      char[] chArray1 = new char[1]{ ',' };
      foreach (string str in backupName.Split(chArray1))
      {
        char[] chArray2 = new char[1]{ '=' };
        string[] strArray = str.Split(chArray2);
        if (strArray.Length == 2)
          savedBackupNames.Add(long.Parse(strArray[0]), WebUtility.UrlDecode(strArray[1]));
      }
      return savedBackupNames;
    }

    private Dictionary<long, bool> getSavedBackupKeeps()
    {
      Dictionary<long, bool> savedBackupKeeps = new Dictionary<long, bool>();
      string backupKeep = Settings.Default.BackupKeep;
      char[] chArray1 = new char[1]{ ',' };
      foreach (string str in backupKeep.Split(chArray1))
      {
        char[] chArray2 = new char[1]{ '=' };
        string[] strArray = str.Split(chArray2);
        if (strArray.Length == 2)
          savedBackupKeeps.Add(long.Parse(strArray[0]), bool.Parse(strArray[1]));
      }
      return savedBackupKeeps;
    }

    private void DataBackups_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
    {
      if (!e.Column.Header.ToString().Equals("SaveDate") && !e.Column.Header.ToString().Equals("Active"))
        return;
      e.Cancel = true;
    }

    private void DataBackups_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
    {
      if (!e.Column.Header.ToString().Equals("Name") || e.EditAction != DataGridEditAction.Commit)
        return;
      SaveBackup saveBackup = (SaveBackup) e.Row.Item;
      if (saveBackup.Name.Equals(""))
        saveBackup.Name = saveBackup.SaveDate.Ticks.ToString();
    }

    private void updateSavedNames()
    {
      List<string> stringList1 = new List<string>();
      for (int index = 0; index < this.listBackups.Count; ++index)
      {
        SaveBackup listBackup = this.listBackups[index];
        string name = listBackup.Name;
        DateTime saveDate = listBackup.SaveDate;
        string str1 = saveDate.Ticks.ToString();
        if (!name.Equals(str1))
        {
          List<string> stringList2 = stringList1;
          saveDate = listBackup.SaveDate;
          string str2 = saveDate.Ticks.ToString() + "=" + WebUtility.UrlEncode(listBackup.Name);
          stringList2.Add(str2);
        }
      }
      Settings.Default.BackupName = stringList1.Count <= 0 ? "" : string.Join(",", stringList1.ToArray());
      Settings.Default.Save();
    }

    private void updateSavedKeeps()
    {
      List<string> stringList = new List<string>();
      for (int index = 0; index < this.listBackups.Count; ++index)
      {
        SaveBackup listBackup = this.listBackups[index];
        if (listBackup.Keep)
          stringList.Add(listBackup.SaveDate.Ticks.ToString() + "=True");
      }
      Settings.Default.BackupKeep = stringList.Count <= 0 ? "" : string.Join(",", stringList.ToArray());
      Settings.Default.Save();
    }

    private void DataBackups_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      System.Windows.Controls.MenuItem menuItem1 = (System.Windows.Controls.MenuItem) this.dataBackups.ContextMenu.Items[0];
      System.Windows.Controls.MenuItem menuItem2 = (System.Windows.Controls.MenuItem) this.dataBackups.ContextMenu.Items[1];
      if (e.AddedItems.Count > 0)
      {
        SaveBackup selectedItem = (SaveBackup) this.dataBackups.SelectedItem;
        menuItem1.IsEnabled = true;
        menuItem2.IsEnabled = true;
      }
      else
      {
        menuItem1.IsEnabled = false;
        menuItem2.IsEnabled = false;
      }
    }

    private void analyzeMenuItem_Click(object sender, EventArgs e)
    {
      SaveBackup selectedItem = (SaveBackup) this.dataBackups.SelectedItem;
      this.logMessage("Showing backup save (" + selectedItem.Name + ") world analyzer...");
      SaveAnalyzer saveAnalyzer = new SaveAnalyzer(this);
      saveAnalyzer.Title = "Backup Save (" + selectedItem.Name + ") World Analyzer";
      saveAnalyzer.Closing += new CancelEventHandler(this.Backup_Analyzer_Closing);
      List<RemnantCharacter> characters = selectedItem.Save.Characters;
      for (int index = 0; index < characters.Count; ++index)
        characters[index].LoadWorldData(index);
      saveAnalyzer.LoadData(characters);
      this.backupSaveAnalyzers.Add(saveAnalyzer);
      saveAnalyzer.Show();
    }

    private void Backup_Analyzer_Closing(object sender, CancelEventArgs e) => this.backupSaveAnalyzers.Remove((SaveAnalyzer) sender);

    private void openFolderMenuItem_Click(object sender, EventArgs e)
    {
      SaveBackup selectedItem = (SaveBackup) this.dataBackups.SelectedItem;
      Process.Start(MainWindow.backupDirPath + "\\" + (object) selectedItem.SaveDate.Ticks);
    }

    private void deleteMenuItem_Click(object sender, EventArgs e)
    {
      SaveBackup selectedItem = (SaveBackup) this.dataBackups.SelectedItem;
      if (System.Windows.MessageBox.Show("Are you sure to delete backup \"" + selectedItem.Name + "\" (" + selectedItem.SaveDate.ToString() + ")?", "Confirm Delete", MessageBoxButton.YesNo, MessageBoxImage.Exclamation, MessageBoxResult.No) != MessageBoxResult.Yes)
        return;
      if (selectedItem.Keep)
      {
        if (System.Windows.MessageBox.Show("This backup is marked for keeping. Are you SURE to delete backup \"" + selectedItem.Name + "\" (" + selectedItem.SaveDate.ToString() + ")?", "Confirm Delete", MessageBoxButton.YesNo, MessageBoxImage.Exclamation, MessageBoxResult.No) != MessageBoxResult.Yes)
          return;
      }
      if (selectedItem.Active)
        this.ActiveSaveIsBackedUp = false;
      string backupDirPath1 = MainWindow.backupDirPath;
      DateTime saveDate = selectedItem.SaveDate;
      // ISSUE: variable of a boxed type
      __Boxed<long> ticks1 = (ValueType) saveDate.Ticks;
      if (Directory.Exists(backupDirPath1 + "\\" + (object) ticks1))
      {
        string backupDirPath2 = MainWindow.backupDirPath;
        saveDate = selectedItem.SaveDate;
        // ISSUE: variable of a boxed type
        __Boxed<long> ticks2 = (ValueType) saveDate.Ticks;
        Directory.Delete(backupDirPath2 + "\\" + (object) ticks2, true);
      }
      this.listBackups.Remove(selectedItem);
      this.dataBackups.Items.Refresh();
      this.logMessage("Backup \"" + selectedItem.Name + "\" (" + (object) selectedItem.SaveDate + ") deleted.");
    }

    private void BtnAnalyzeCurrent_Click(object sender, RoutedEventArgs e)
    {
      this.logMessage("Showing current save world analyzer...");
      this.activeSaveAnalyzer.Show();
    }

    private void updateCurrentWorldAnalyzer()
    {
      this.activeSave.UpdateCharacters();
      this.activeSaveAnalyzer.LoadData(this.activeSave.Characters);
    }

    private void OnGameInfoUpdate(object source, GameInfoUpdateEventArgs e) => this.Dispatcher.Invoke((Action) (() =>
    {
      this.logMessage(e.Message);
      if (e.Result != GameInfoUpdateResult.Updated)
        return;
      this.updateCurrentWorldAnalyzer();
    }));

    private void checkForUpdate()
    {
      new Thread((ThreadStart) (() =>
      {
        Thread.CurrentThread.IsBackground = true;
        GameInfo.CheckForNewGameInfo();
      })).Start();
      new Thread((ThreadStart) (() =>
      {
        Thread.CurrentThread.IsBackground = true;
        try
        {
          string input = new WebClient().DownloadString("https://github.com/Razzmatazzz/RemnantSaveManager/releases/latest");
          string str = Regex.Match(input, "\\<title\\b[^>]*\\>\\s*(?<Title>[\\s\\S]*?)\\</title\\>", RegexOptions.IgnoreCase).Groups["Title"].Value;
          Version remoteVersion = new Version(Regex.Match(input, "Remnant Save Manager (?<Version>([\\d.]+)?)", RegexOptions.IgnoreCase).Groups["Version"].Value);
          Version localVersion = typeof (MainWindow).Assembly.GetName().Version;
          this.Dispatcher.Invoke((Action) (() =>
          {
            if (localVersion.CompareTo(remoteVersion) != -1 || System.Windows.MessageBox.Show("There is a new version available. Would you like to open the download page?", "Update Available", MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.No) != MessageBoxResult.Yes)
              return;
            Process.Start("https://github.com/Razzmatazzz/RemnantSaveManager/releases/latest");
            Environment.Exit(1);
          }));
        }
        catch (Exception ex)
        {
          this.Dispatcher.Invoke((Action) (() => this.logMessage("Error checking for new version: " + ex.Message, MainWindow.LogType.Error)));
        }
      })).Start();
      this.lastUpdateCheck = DateTime.Now;
    }

    private void Window_Closing(object sender, CancelEventArgs e)
    {
    }

    private void Window_Closed(object sender, EventArgs e) => Environment.Exit(1);

    private void BtnBackupFolder_Click(object sender, RoutedEventArgs e)
    {
      FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
      folderBrowserDialog.SelectedPath = MainWindow.backupDirPath;
      folderBrowserDialog.Description = "Select the folder where you want your backup saves kept.";
      if (folderBrowserDialog.ShowDialog() != DialogResult.OK)
        return;
      string selectedPath = folderBrowserDialog.SelectedPath;
      if (selectedPath.Equals(MainWindow.saveDirPath))
      {
        int num = (int) System.Windows.MessageBox.Show("Please select a folder other than the game's save folder.", "Invalid Folder", MessageBoxButton.OK, MessageBoxImage.Exclamation, MessageBoxResult.OK);
      }
      else
      {
        if (selectedPath.Equals(MainWindow.backupDirPath))
          return;
        if (this.listBackups.Count > 0 && System.Windows.MessageBox.Show("Do you want to move your backups to this new folder?", "Move Backups", MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.No) == MessageBoxResult.Yes)
        {
          foreach (string path in ((IEnumerable<string>) Directory.GetDirectories(MainWindow.backupDirPath)).ToList<string>())
          {
            string str = path.Substring(path.LastIndexOf("\\"));
            Directory.CreateDirectory(selectedPath + str);
            Directory.SetCreationTime(selectedPath + str, Directory.GetCreationTime(path));
            Directory.SetLastWriteTime(selectedPath + str, Directory.GetCreationTime(path));
            foreach (string file in Directory.GetFiles(path))
              System.IO.File.Copy(file, file.Replace(MainWindow.backupDirPath, selectedPath));
            Directory.Delete(path, true);
          }
        }
        this.txtBackupFolder.Text = selectedPath;
        MainWindow.backupDirPath = selectedPath;
        Settings.Default.BackupFolder = selectedPath;
        Settings.Default.Save();
        this.loadBackups();
      }
    }

    private void DataBackups_AutoGeneratingColumn(
      object sender,
      DataGridAutoGeneratingColumnEventArgs e)
    {
      if (!e.Column.Header.Equals((object) "Save"))
        return;
      e.Cancel = true;
    }

    private void btnGameInfoUpdate_Click(object sender, RoutedEventArgs e)
    {
      if (this.lastUpdateCheck.AddMinutes(10.0) < DateTime.Now)
      {
        this.checkForUpdate();
      }
      else
      {
        TimeSpan timeSpan = this.lastUpdateCheck.AddMinutes(10.0) - DateTime.Now;
        this.logMessage("Please wait " + (object) timeSpan.Minutes + " minutes, " + (object) timeSpan.Seconds + " seconds before checking for update.");
      }
    }

    private void Window_Deactivated(object sender, EventArgs e)
    {
      this.dataBackups.CancelEdit();
      this.dataBackups.CancelEdit();
    }

    private void chkCreateLogFile_Click(object sender, RoutedEventArgs e)
    {
      bool flag = this.chkCreateLogFile.IsChecked.HasValue && this.chkCreateLogFile.IsChecked.Value;
      if (flag & !Settings.Default.CreateLogFile)
        System.IO.File.WriteAllText("log.txt", DateTime.Now.ToString() + ": Version " + (object) typeof (MainWindow).Assembly.GetName().Version + "\r\n");
      Settings.Default.CreateLogFile = flag;
      Settings.Default.Save();
    }

    private void cmbMissingItemColorSelectionChanged(object sender, RoutedEventArgs e)
    {
      Settings.Default.MissingItemColor = this.cmbMissingItemColor.SelectedItem.ToString();
      Settings.Default.Save();
      this.updateCurrentWorldAnalyzer();
    }

    private void chkShowPossibleItems_Click(object sender, RoutedEventArgs e)
    {
      Settings.Default.ShowPossibleItems = this.chkShowPossibleItems.IsChecked.HasValue && this.chkShowPossibleItems.IsChecked.Value;
      Settings.Default.Save();
      this.updateCurrentWorldAnalyzer();
    }

    private void chkAutoCheckUpdate_Click(object sender, RoutedEventArgs e)
    {
      Settings.Default.AutoCheckUpdate = this.chkAutoCheckUpdate.IsChecked.HasValue && this.chkAutoCheckUpdate.IsChecked.Value;
      Settings.Default.Save();
    }

    private void btnSaveFolder_Click(object sender, RoutedEventArgs e)
    {
      FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
      folderBrowserDialog.SelectedPath = MainWindow.saveDirPath;
      folderBrowserDialog.Description = "Select where your Remnant saves are stored.";
      if (folderBrowserDialog.ShowDialog() != DialogResult.OK)
        return;
      string selectedPath = folderBrowserDialog.SelectedPath;
      if (selectedPath.Equals(MainWindow.backupDirPath))
      {
        int num1 = (int) System.Windows.MessageBox.Show("Please select a folder other than the backup folder.", "Invalid Folder", MessageBoxButton.OK, MessageBoxImage.Exclamation, MessageBoxResult.OK);
      }
      else
      {
        if (selectedPath.Equals(MainWindow.saveDirPath))
          return;
        if (!RemnantSave.ValidSaveFolder(selectedPath))
        {
          int num2 = (int) System.Windows.MessageBox.Show("Please select the folder containing your Remnant save.", "Invalid Folder", MessageBoxButton.OK, MessageBoxImage.Exclamation, MessageBoxResult.OK);
        }
        else
        {
          this.txtSaveFolder.Text = selectedPath;
          MainWindow.saveDirPath = selectedPath;
          Settings.Default.SaveFolder = selectedPath;
          Settings.Default.Save();
        }
      }
    }

    private void TryFindGameFolder()
    {
      if (System.IO.File.Exists(MainWindow.gameDirPath + "\\Remnant.exe"))
        return;
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Valve\\Steam\\Apps\\617290", false);
      if (registryKey != null)
      {
        bool? nullable = new bool?();
        object obj = registryKey.GetValue("Installed");
        if (obj != null)
          nullable = new bool?(Convert.ToBoolean(obj));
        if (nullable.HasValue && nullable.Value)
        {
          DirectoryInfo directoryInfo = new DirectoryInfo(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Valve\\Steam", false)?.GetValue("SteamPath") as string);
          if (directoryInfo.Exists)
          {
            string[] strArray1 = System.IO.File.ReadAllLines(new FileInfo(directoryInfo.FullName + "\\steamapps\\libraryfolders.vdf").FullName);
            int count = Array.IndexOf<string>(strArray1, ((IEnumerable<string>) strArray1).FirstOrDefault<string>((Func<string, bool>) (t => t.Contains("\"617290\""))));
            string str1 = ((IEnumerable<string>) ((IEnumerable<string>) strArray1).Take<string>(count).ToArray<string>()).LastOrDefault<string>((Func<string, bool>) (t => t.Contains("\"path\"")));
            string[] strArray2;
            if (str1 == null)
              strArray2 = (string[]) null;
            else
              strArray2 = str1.Split('"');
            string str2 = string.Format("{0}\\steamapps\\common\\Remnant", (object) strArray2?[3]?.Replace("\\\\", "\\"));
            if (Directory.Exists(str2) && System.IO.File.Exists(str2 + "\\Remnant.exe"))
            {
              this.SetGameFolder(str2);
              return;
            }
          }
        }
      }
      DirectoryInfo directoryInfo1 = new DirectoryInfo("C:\\ProgramData\\Epic\\EpicGamesLauncher\\Data\\Manifests");
      if (directoryInfo1.Exists)
      {
        foreach (FileSystemInfo file in directoryInfo1.GetFiles("*.item"))
        {
          string[] source = System.IO.File.ReadAllLines(file.FullName);
          if (!((IEnumerable<string>) source).All<string>((Func<string, bool>) (t => !t.Contains("Remnant: From the Ashes"))))
          {
            string str3 = ((IEnumerable<string>) source).FirstOrDefault<string>((Func<string, bool>) (t => t.Contains("\"InstallLocation\"")));
            string[] strArray;
            if (str3 == null)
              strArray = (string[]) null;
            else
              strArray = str3.Split('"');
            string str4 = strArray?[3].Replace("\\\\", "\\");
            if (Directory.Exists(str4) && System.IO.File.Exists(string.Format("{0}\\Remnant.exe", (object) str4)))
            {
              this.SetGameFolder(str4);
              return;
            }
            break;
          }
        }
      }
      MainWindow.gameDirPath = "";
      this.txtGameFolder.Text = "";
      this.btnStartGame.IsEnabled = false;
      this.btnStartGame.Content = this.FindResource((object) "PlayGrey");
      this.backupCMStart.IsEnabled = false;
      this.backupCMStart.Icon = this.FindResource((object) "PlayGrey");
      Settings.Default.GameFolder = "";
      Settings.Default.Save();
    }

    private void SetGameFolder(string folderPath)
    {
      if (!Directory.Exists(folderPath))
        return;
      MainWindow.gameDirPath = folderPath;
      this.txtGameFolder.Text = folderPath;
      this.btnStartGame.IsEnabled = true;
      this.btnStartGame.Content = this.FindResource((object) "Play");
      this.backupCMStart.IsEnabled = true;
      this.backupCMStart.Icon = this.FindResource((object) "Play");
      Settings.Default.GameFolder = folderPath;
      Settings.Default.Save();
    }

    private void BtnStartGame_Click(object sender, RoutedEventArgs e) => this.LaunchGame();

    private void LaunchGame()
    {
      if (!Directory.Exists(MainWindow.gameDirPath))
        return;
      FileInfo fileInfo1 = new FileInfo(MainWindow.gameDirPath + "\\Remnant.exe");
      FileInfo fileInfo2 = new FileInfo(MainWindow.gameDirPath + "\\Remnant\\Binaries\\Win64\\Remnant-Win64-Shipping.exe");
      if (!fileInfo2.Exists && !fileInfo1.Exists)
        return;
      Process.Start(!fileInfo2.Exists || !Environment.Is64BitOperatingSystem ? fileInfo1.FullName : fileInfo2.FullName);
    }

    private void btnGameFolder_Click(object sender, RoutedEventArgs e)
    {
      FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
      folderBrowserDialog.SelectedPath = MainWindow.gameDirPath;
      folderBrowserDialog.Description = "Select where your Remnant game is installed.";
      if (folderBrowserDialog.ShowDialog() != DialogResult.OK)
        return;
      string selectedPath = folderBrowserDialog.SelectedPath;
      if (!System.IO.File.Exists(selectedPath + "\\Remnant.exe"))
      {
        int num = (int) System.Windows.MessageBox.Show("Please select the folder containing your Remnant game.", "Invalid Folder", MessageBoxButton.OK, MessageBoxImage.Exclamation, MessageBoxResult.OK);
      }
      else
      {
        if (selectedPath.Equals(MainWindow.gameDirPath))
          return;
        this.SetGameFolder(selectedPath);
      }
    }

    private void btnFindGameFolder_Click(object sender, RoutedEventArgs e) => this.TryFindGameFolder();

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      System.Windows.Application.LoadComponent((object) this, new Uri("/RemnantSaveManager;component/mainwindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          ((Window) target).Closing += new CancelEventHandler(this.Window_Closing);
          ((Window) target).Closed += new EventHandler(this.Window_Closed);
          ((Window) target).Deactivated += new EventHandler(this.Window_Deactivated);
          break;
        case 2:
          this.ForToolbar = (RowDefinition) target;
          break;
        case 3:
          this.ForBackups = (RowDefinition) target;
          break;
        case 4:
          this.ForStatusbar = (RowDefinition) target;
          break;
        case 5:
          this.btnAnalyzeCurrent = (System.Windows.Controls.Button) target;
          this.btnAnalyzeCurrent.Click += new RoutedEventHandler(this.BtnAnalyzeCurrent_Click);
          break;
        case 6:
          this.btnOpenFolder = (System.Windows.Controls.Button) target;
          this.btnOpenFolder.Click += new RoutedEventHandler(this.BtnOpenFolder_Click);
          break;
        case 7:
          this.btnStartGame = (System.Windows.Controls.Button) target;
          this.btnStartGame.Click += new RoutedEventHandler(this.BtnStartGame_Click);
          break;
        case 8:
          this.tabBackups = (TabItem) target;
          break;
        case 9:
          this.dataBackups = (System.Windows.Controls.DataGrid) target;
          this.dataBackups.BeginningEdit += new EventHandler<DataGridBeginningEditEventArgs>(this.DataBackups_BeginningEdit);
          this.dataBackups.CellEditEnding += new EventHandler<DataGridCellEditEndingEventArgs>(this.DataBackups_CellEditEnding);
          this.dataBackups.SelectionChanged += new SelectionChangedEventHandler(this.DataBackups_SelectionChanged);
          this.dataBackups.AutoGeneratingColumn += new EventHandler<DataGridAutoGeneratingColumnEventArgs>(this.DataBackups_AutoGeneratingColumn);
          break;
        case 10:
          ((System.Windows.Controls.MenuItem) target).Click += new RoutedEventHandler(this.BtnRestore_Click);
          break;
        case 11:
          this.backupCMStart = (System.Windows.Controls.MenuItem) target;
          this.backupCMStart.Click += new RoutedEventHandler(this.BtnRestoreStart_Click);
          break;
        case 12:
          ((System.Windows.Controls.MenuItem) target).Click += new RoutedEventHandler(this.analyzeMenuItem_Click);
          break;
        case 13:
          ((System.Windows.Controls.MenuItem) target).Click += new RoutedEventHandler(this.openFolderMenuItem_Click);
          break;
        case 14:
          ((System.Windows.Controls.MenuItem) target).Click += new RoutedEventHandler(this.deleteMenuItem_Click);
          break;
        case 15:
          this.tabSettings = (TabItem) target;
          break;
        case 16:
          this.chkAutoBackup = (System.Windows.Controls.CheckBox) target;
          this.chkAutoBackup.Click += new RoutedEventHandler(this.ChkAutoBackup_Click);
          break;
        case 17:
          this.txtBackupMins = (System.Windows.Controls.TextBox) target;
          this.txtBackupMins.LostFocus += new RoutedEventHandler(this.TxtBackupMins_LostFocus);
          this.txtBackupMins.KeyUp += new System.Windows.Input.KeyEventHandler(this.TxtBackupMins_KeyUp);
          break;
        case 18:
          this.txtBackupLimit = (System.Windows.Controls.TextBox) target;
          this.txtBackupLimit.KeyUp += new System.Windows.Input.KeyEventHandler(this.TxtBackupLimit_KeyUp);
          this.txtBackupLimit.LostFocus += new RoutedEventHandler(this.TxtBackupLimit_LostFocus);
          break;
        case 19:
          this.txtBackupFolder = (System.Windows.Controls.TextBox) target;
          break;
        case 20:
          this.btnBackupFolder = (System.Windows.Controls.Button) target;
          this.btnBackupFolder.Click += new RoutedEventHandler(this.BtnBackupFolder_Click);
          break;
        case 21:
          this.btnGameInfoUpdate = (System.Windows.Controls.Button) target;
          this.btnGameInfoUpdate.Click += new RoutedEventHandler(this.btnGameInfoUpdate_Click);
          break;
        case 22:
          this.chkCreateLogFile = (System.Windows.Controls.CheckBox) target;
          this.chkCreateLogFile.Click += new RoutedEventHandler(this.chkCreateLogFile_Click);
          break;
        case 23:
          this.cmbMissingItemColor = (System.Windows.Controls.ComboBox) target;
          break;
        case 24:
          this.chkShowPossibleItems = (System.Windows.Controls.CheckBox) target;
          this.chkShowPossibleItems.Click += new RoutedEventHandler(this.chkShowPossibleItems_Click);
          break;
        case 25:
          this.chkAutoCheckUpdate = (System.Windows.Controls.CheckBox) target;
          this.chkAutoCheckUpdate.Click += new RoutedEventHandler(this.chkAutoCheckUpdate_Click);
          break;
        case 26:
          this.btnSaveFolder = (System.Windows.Controls.Button) target;
          this.btnSaveFolder.Click += new RoutedEventHandler(this.btnSaveFolder_Click);
          break;
        case 27:
          this.txtSaveFolder = (System.Windows.Controls.TextBox) target;
          break;
        case 28:
          this.btnGameFolder = (System.Windows.Controls.Button) target;
          this.btnGameFolder.Click += new RoutedEventHandler(this.btnGameFolder_Click);
          break;
        case 29:
          this.txtGameFolder = (System.Windows.Controls.TextBox) target;
          break;
        case 30:
          this.btnFindGameFolder = (System.Windows.Controls.Button) target;
          this.btnFindGameFolder.Click += new RoutedEventHandler(this.btnFindGameFolder_Click);
          break;
        case 31:
          this.tabLog = (TabItem) target;
          break;
        case 32:
          this.txtLog = (System.Windows.Controls.TextBox) target;
          break;
        case 33:
          this.lblStatus = (System.Windows.Controls.Label) target;
          break;
        case 34:
          this.btnBackup = (System.Windows.Controls.Button) target;
          this.btnBackup.Click += new RoutedEventHandler(this.BtnBackup_Click);
          break;
        case 35:
          this.lblLastMessage = (System.Windows.Controls.Label) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    public enum LogType
    {
      Normal,
      Success,
      Error,
    }
  }
}
