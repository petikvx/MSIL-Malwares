// Decompiled with JetBrains decompiler
// Type: Envoy.ScrollablePanel
// Assembly: ManifestRunn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4340E416-8599-4A73-B291-89371197E3DA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Worm.MSIL.FFAuto.gen-c26350de480859838a7d758ce891d049c78844695c6f7e33f9ea2fecc4b4a4a9.exe

using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace Envoy
{
  public class ScrollablePanel : Panel
  {
    private const int MIN_RADIAL_MOVEMENT = 30;
    private Point StartLocation;
    private bool Started;
    private Thread ScrollThread;
    private Point MouseLocation;

    protected override void OnMouseClick(MouseEventArgs e)
    {
      base.OnMouseClick(e);
      if (ScrollablePanel.\u200B⁭‭‫⁪‬⁬‭‪‏‫‏‮⁮‎‌‎⁮‮⁫‍⁯‫⁭⁮‫‍‬‬‫⁪⁭‫⁫‬‎‫⁬⁪⁮‮(e) != MouseButtons.Middle)
        return;
      this.MiddleMouseClicked(ScrollablePanel.\u206C‮‪‪⁬‏‎⁫‎​⁫⁯‌​‮⁮‍​​‮⁬⁯⁫⁫‍⁬‌‪⁯⁬⁪⁯⁮⁬​⁮​⁭⁪⁫‮(e));
    }

    protected override void OnMouseDoubleClick(MouseEventArgs e)
    {
      base.OnMouseDoubleClick(e);
      if (ScrollablePanel.\u200B⁭‭‫⁪‬⁬‭‪‏‫‏‮⁮‎‌‎⁮‮⁫‍⁯‫⁭⁮‫‍‬‬‫⁪⁭‫⁫‬‎‫⁬⁪⁮‮(e) != MouseButtons.Middle)
        return;
      this.MiddleMouseClicked(ScrollablePanel.\u206C‮‪‪⁬‏‎⁫‎​⁫⁯‌​‮⁮‍​​‮⁬⁯⁫⁫‍⁬‌‪⁯⁬⁪⁯⁮⁬​⁮​⁭⁪⁫‮(e));
    }

    public void MiddleMouseClicked(Point location)
    {
      if (this.Started)
      {
        this.Started = false;
        ScrollablePanel.\u200C‭‭‌⁭‬⁮⁭‬‏⁪‌‬‍‮‍⁪‪⁪‪⁬⁫⁫⁫‍‪‬‪⁬‎‍‬‫⁮⁪⁬‬‭‏⁬‮((Control) this, ScrollablePanel.\u206D​⁫⁫‮‍‪‮‭‎⁯‍⁪⁭⁮⁭‮​‌‌‮‬‮⁬⁭‌‏‬⁮⁫⁬‎⁪‭⁫⁯‏‏‭⁪‮());
      }
      else
      {
        this.Started = true;
        ScrollablePanel.\u200C‭‭‌⁭‬⁮⁭‬‏⁪‌‬‍‮‍⁪‪⁪‪⁬⁫⁫⁫‍‪‬‪⁬‎‍‬‫⁮⁪⁬‬‭‏⁬‮((Control) this, ScrollablePanel.\u202B‪‭‮‎⁫‫‎‮‪‏⁪‮⁪⁫‌‮‬‪‫⁬‬⁮⁬⁯‪‏⁫‌‮‮⁫‎‌‍⁭⁯‪‬⁭‮());
        this.StartLocation = this.GetRelativeLocation(location);
        this.MouseLocation = this.GetRelativeLocation(location);
        this.ScrollThread = ScrollablePanel.\u200F⁮‪‍⁯⁫⁯⁪‍‌⁪‪‍‌‭⁯‍‮‌⁬‮​⁮‍⁪‫⁬‫​⁮‫‍‬‫‌‬⁫⁯‌⁯‮(new ThreadStart(this.Scroller));
        ScrollablePanel.\u206A​⁬‌‫‭⁪‍‬⁬‮‮⁭⁯‭‪‬‭‏‮‏‍‎‌​⁫⁫​‍‎‍⁮⁫‏‮⁭‏‏‍‍‮(this.ScrollThread);
      }
    }

    protected override void OnMouseMove(MouseEventArgs e)
    {
      base.OnMouseMove(e);
      this.MouseMoved(ScrollablePanel.\u206C‮‪‪⁬‏‎⁫‎​⁫⁯‌​‮⁮‍​​‮⁬⁯⁫⁫‍⁬‌‪⁯⁬⁪⁯⁮⁬​⁮​⁭⁪⁫‮(e));
    }

    public void MouseMoved(Point location)
    {
      if (!this.Started)
        return;
      this.MouseLocation = this.GetRelativeLocation(location);
    }

    private Point GetRelativeLocation(Point location) => new Point(location.X - ScrollablePanel.\u206E‭⁯‍⁮‎‌‏‭‫‏​‫⁮⁬‌‏‍‌‏‏⁯‭‍⁯‬⁪⁯‪⁯‮‍⁭⁭‎‍‪‎⁪‮((ScrollProperties) ScrollablePanel.\u206D⁮⁮​​⁮‌‫‌‎‫‏‌‏‌‫‭‏‌⁪‪‏‍‪‌‬‍‍​‮⁯‍⁪‍⁮⁭‏‍‭‮((ScrollableControl) this)), location.Y - ScrollablePanel.\u206E‭⁯‍⁮‎‌‏‭‫‏​‫⁮⁬‌‏‍‌‏‏⁯‭‍⁯‬⁪⁯‪⁯‮‍⁭⁭‎‍‪‎⁪‮((ScrollProperties) ScrollablePanel.\u202C​⁪‌⁫⁪​⁭⁬‌​‪‍⁪⁮‫⁪⁮‫‬‫‮⁮‏‎‭​‍‍‬⁪⁫⁬‫⁮⁮⁭‪‍‎‮((ScrollableControl) this)));

    private double Distance(Point location1, Point location2) => ScrollablePanel.\u202B‍⁪⁭‪⁯⁯⁯⁮⁯‫‌‮​‬​‍⁮​‌‌⁯‫‌⁫‍​‌‍‏‭‭⁬‍⁮‫⁯⁭‌‎‮(ScrollablePanel.\u200F⁬⁪⁭‮⁮⁮‏‪‬‬‫⁬⁯‏⁭‏‌‬⁫‪⁭​⁮​​‭‭‪‬⁫‍‪⁮⁯⁮⁯‏⁫‬‮((double) (location1.X - location2.X), 2.0) + ScrollablePanel.\u200F⁬⁪⁭‮⁮⁮‏‪‬‬‫⁬⁯‏⁭‏‌‬⁫‪⁭​⁮​​‭‭‪‬⁫‍‪⁮⁯⁮⁯‏⁫‬‮((double) (location1.Y - location2.Y), 2.0));

    private void SetScrollValues(int verticalScroll, int horizontalScroll)
    {
      if (this.\u206F‫⁮‎‮‎⁬‬‫‍‎⁯⁪⁫⁭‪‍‎‪⁪‌‮‬⁮‌⁬⁫‌‫​⁯⁭‫‏‌‎‪⁭⁭⁪‮())
      {
        this.\u202C⁭⁭‫⁮⁭⁯⁬⁪‭⁭⁬​‬⁭⁯⁭‏‬‪⁭⁫‌‏⁪‏‫‪‭⁬‪⁬​‏‭‮‍⁭‪⁫‮((Delegate) new ScrollablePanel.SetScrollValuesDelegate(this.SetScrollValues), new object[2]
        {
          (object) verticalScroll,
          (object) horizontalScroll
        });
      }
      else
      {
        ScrollablePanel.\u206C⁭‌⁯⁫‮⁫‭‭‏​‎‪‬‍‏⁫‎‫​⁬⁫⁭‎⁪⁭⁬‌‌‭‏⁫​‪⁪‬‭‭⁪‮‮((ScrollProperties) ScrollablePanel.\u202C​⁪‌⁫⁪​⁭⁬‌​‪‍⁪⁮‫⁪⁮‫‬‫‮⁮‏‎‭​‍‍‬⁪⁫⁬‫⁮⁮⁭‪‍‎‮((ScrollableControl) this), ScrollablePanel.\u200C⁮‍⁪⁬⁪‭⁮‭‌​‫‭​‭‫‫‏‬‬‪⁪‏⁪​⁮‎‪‏‭‌⁫⁬‬‎‮‎⁯‫‭‮(ScrollablePanel.\u200F⁪‌‪‍​‮‮‌⁮⁮‭‍‭‌‫‍‮‬‮⁯⁫‎⁯⁬‫‮​⁯​⁯⁪‮‭‫‭‮⁫⁮‬‮((ScrollProperties) ScrollablePanel.\u202C​⁪‌⁫⁪​⁭⁬‌​‪‍⁪⁮‫⁪⁮‫‬‫‮⁮‏‎‭​‍‍‬⁪⁫⁬‫⁮⁮⁭‪‍‎‮((ScrollableControl) this)), ScrollablePanel.\u206C⁫‏⁬⁬‫‎​‏⁭⁬⁪‍⁬​‍‫‎‬​⁪⁮‮⁮⁭⁯‏⁬‮⁬‫‪‪⁬⁬‭⁪‮⁭‪‮(ScrollablePanel.\u200E‍⁫‪⁭‭⁭⁫⁯⁫‌​⁫⁮‎‬‬⁯‮⁬⁪⁬‭⁪‪⁬‫‭‭⁭⁮‬⁭⁯⁪‎‫​‫⁬‮((ScrollProperties) ScrollablePanel.\u202C​⁪‌⁫⁪​⁭⁬‌​‪‍⁪⁮‫⁪⁮‫‬‫‮⁮‏‎‭​‍‍‬⁪⁫⁬‫⁮⁮⁭‪‍‎‮((ScrollableControl) this)), verticalScroll)));
        ScrollablePanel.\u206C⁭‌⁯⁫‮⁫‭‭‏​‎‪‬‍‏⁫‎‫​⁬⁫⁭‎⁪⁭⁬‌‌‭‏⁫​‪⁪‬‭‭⁪‮‮((ScrollProperties) ScrollablePanel.\u206D⁮⁮​​⁮‌‫‌‎‫‏‌‏‌‫‭‏‌⁪‪‏‍‪‌‬‍‍​‮⁯‍⁪‍⁮⁭‏‍‭‮((ScrollableControl) this), ScrollablePanel.\u200C⁮‍⁪⁬⁪‭⁮‭‌​‫‭​‭‫‫‏‬‬‪⁪‏⁪​⁮‎‪‏‭‌⁫⁬‬‎‮‎⁯‫‭‮(ScrollablePanel.\u200F⁪‌‪‍​‮‮‌⁮⁮‭‍‭‌‫‍‮‬‮⁯⁫‎⁯⁬‫‮​⁯​⁯⁪‮‭‫‭‮⁫⁮‬‮((ScrollProperties) ScrollablePanel.\u206D⁮⁮​​⁮‌‫‌‎‫‏‌‏‌‫‭‏‌⁪‪‏‍‪‌‬‍‍​‮⁯‍⁪‍⁮⁭‏‍‭‮((ScrollableControl) this)), ScrollablePanel.\u206C⁫‏⁬⁬‫‎​‏⁭⁬⁪‍⁬​‍‫‎‬​⁪⁮‮⁮⁭⁯‏⁬‮⁬‫‪‪⁬⁬‭⁪‮⁭‪‮(ScrollablePanel.\u200E‍⁫‪⁭‭⁭⁫⁯⁫‌​⁫⁮‎‬‬⁯‮⁬⁪⁬‭⁪‪⁬‫‭‭⁭⁮‬⁭⁯⁪‎‫​‫⁬‮((ScrollProperties) ScrollablePanel.\u206D⁮⁮​​⁮‌‫‌‎‫‏‌‏‌‫‭‏‌⁪‪‏‍‪‌‬‍‍​‮⁯‍⁪‍⁮⁭‏‍‭‮((ScrollableControl) this)), horizontalScroll)));
      }
    }

    private void SetCursor(Cursor cursor)
    {
      if (this.\u206F‫⁮‎‮‎⁬‬‫‍‎⁯⁪⁫⁭‪‍‎‪⁪‌‮‬⁮‌⁬⁫‌‫​⁯⁭‫‏‌‎‪⁭⁭⁪‮())
        this.\u202C⁭⁭‫⁮⁭⁯⁬⁪‭⁭⁬​‬⁭⁯⁭‏‬‪⁭⁫‌‏⁪‏‫‪‭⁬‪⁬​‏‭‮‍⁭‪⁫‮((Delegate) new ScrollablePanel.SetCursorDelegate(this.SetCursor), new object[1]
        {
          (object) cursor
        });
      else
        ScrollablePanel.\u200C‭‭‌⁭‬⁮⁭‬‏⁪‌‬‍‮‍⁪‪⁪‪⁬⁫⁫⁫‍‪‬‪⁬‎‍‬‫⁮⁪⁬‬‭‏⁬‮((Control) this, cursor);
    }

    private void Scroller()
    {
      while (this.Started)
      {
        ScrollablePanel.ScrollDirection scrollDirection = this.FindScrollDirection(this.StartLocation, this.MouseLocation);
        this.SetCursor(this.GetCursorForScrollDirection(scrollDirection));
        if (scrollDirection != ScrollablePanel.ScrollDirection.None)
          this.SetScroll(scrollDirection);
        ScrollablePanel.\u200F⁫‭‪‭​​‎‍⁫‭‏‏‭‬‮⁬‌⁬‎‮‫‏⁪‮‌​‭‪‎‫‫‫‬⁭⁬‮⁭‎⁭‮(10);
      }
    }

    private void SetScroll(ScrollablePanel.ScrollDirection scrollDirection)
    {
      int num1 = this.MouseLocation.X - this.StartLocation.X;
      int num2 = this.MouseLocation.Y - this.StartLocation.Y;
      int num3 = 0;
      int num4 = 0;
      this.SetScrollValues(ScrollablePanel.\u206E‭⁯‍⁮‎‌‏‭‫‏​‫⁮⁬‌‏‍‌‏‏⁯‭‍⁯‬⁪⁯‪⁯‮‍⁭⁭‎‍‪‎⁪‮((ScrollProperties) ScrollablePanel.\u202C​⁪‌⁫⁪​⁭⁬‌​‪‍⁪⁮‫⁪⁮‫‬‫‮⁮‏‎‭​‍‍‬⁪⁫⁬‫⁮⁮⁭‪‍‎‮((ScrollableControl) this)) + num4, ScrollablePanel.\u206E‭⁯‍⁮‎‌‏‭‫‏​‫⁮⁬‌‏‍‌‏‏⁯‭‍⁯‬⁪⁯‪⁯‮‍⁭⁭‎‍‪‎⁪‮((ScrollProperties) ScrollablePanel.\u206D⁮⁮​​⁮‌‫‌‎‫‏‌‏‌‫‭‏‌⁪‪‏‍‪‌‬‍‍​‮⁯‍⁪‍⁮⁭‏‍‭‮((ScrollableControl) this)) + num3);
    }

    private Cursor GetCursorForScrollDirection(ScrollablePanel.ScrollDirection scrollDirection)
    {
      switch (scrollDirection)
      {
        case ScrollablePanel.ScrollDirection.North:
          return ScrollablePanel.\u202B‎‌‏‌⁬⁮⁮⁪⁮‎‭⁬‬⁮‎⁪‪‫‬​​⁭‌‎‍‭‏‫‎⁪⁭​‭‪‎‏​‬‏‮();
        case ScrollablePanel.ScrollDirection.NorthEast:
          return ScrollablePanel.\u202C‌‍⁭⁪‏⁮‮‬⁮⁮‬‬‌​‏⁫⁫⁮‬‎⁪‪⁯​⁪⁪‪‏​‌⁫⁮‌⁫‫​⁫⁭‭‮();
        case ScrollablePanel.ScrollDirection.East:
          return ScrollablePanel.\u206D‍⁪⁮‬‎‏‭‍​⁪⁪‭⁪⁯⁬‫⁭‏‫⁭⁮‫‍⁪‍‫‬⁪‭‏⁭⁪‭‪⁪‏⁭‪‪‮();
        case ScrollablePanel.ScrollDirection.SouthEast:
          return ScrollablePanel.\u200B⁭⁬‍‭‎⁬‫‫‭​‍‎‍⁭⁯⁫‏‬⁯‬‍⁫‪‪‌​‬⁪‏‬‌‪‎‭⁯‭⁭⁭‏‮();
        case ScrollablePanel.ScrollDirection.South:
          return ScrollablePanel.\u206C‪‎​⁭‭⁬⁪‪⁮‫⁮‫​‮‏⁫‮⁪‭‍‏⁬⁯‪‏‭⁮‫⁪‏‌‭‏‮‏⁫‌⁪⁫‮();
        case ScrollablePanel.ScrollDirection.SouthWest:
          return ScrollablePanel.\u206B‭⁬‍‏‬‬⁪⁮⁫‌⁬​‍‬⁭‏‏‍‎‏‏‫⁬⁭⁫‏​⁯‌‍​⁮‫⁬⁯⁮⁫‫‭‮();
        case ScrollablePanel.ScrollDirection.West:
          return ScrollablePanel.\u206E‮⁮‍‮‍‏‎‍‏⁪⁮⁭⁫‌‭⁮⁫‮⁬‎‪⁯​⁪⁫⁮⁬‌‮‫⁫​‮⁫⁯‎‪​‮‮();
        case ScrollablePanel.ScrollDirection.NorthWest:
          return ScrollablePanel.\u202E⁫‬‮‮‏​‫‬‭⁫‬‎‫‪‫‫‫‬⁬‪‭‮‍‍‌‬⁬‌⁮‌⁯‫‌⁮‪‎⁮‍‬‮();
        default:
          return ScrollablePanel.\u202B‪‭‮‎⁫‫‎‮‪‏⁪‮⁪⁫‌‮‬‪‫⁬‬⁮⁬⁯‪‏⁫‌‮‮⁫‎‌‍⁭⁯‪‬⁭‮();
      }
    }

    private ScrollablePanel.ScrollDirection FindScrollDirection(
      Point start,
      Point current)
    {
      if ((int) this.Distance(this.StartLocation, this.MouseLocation) > 30)
      {
        int num1 = current.X - start.X;
        int num2 = current.Y - start.Y;
        if (num1 > 30 && num2 > 30)
          return ScrollablePanel.ScrollDirection.SouthEast;
        if (num1 > 30 && num2 <= -30)
          return ScrollablePanel.ScrollDirection.NorthEast;
        if (num1 <= -30 && num2 > 30)
          return ScrollablePanel.ScrollDirection.SouthWest;
        if (num1 <= -30 && num2 <= -30)
          return ScrollablePanel.ScrollDirection.NorthWest;
        if (num1 > 30)
          return ScrollablePanel.ScrollDirection.East;
        if (num1 <= -30)
          return ScrollablePanel.ScrollDirection.West;
        if (num2 > 30)
          return ScrollablePanel.ScrollDirection.South;
        if (num2 <= -30)
          return ScrollablePanel.ScrollDirection.North;
      }
      return ScrollablePanel.ScrollDirection.None;
    }

    static MouseButtons \u200B⁭‭‫⁪‬⁬‭‪‏‫‏‮⁮‎‌‎⁮‮⁫‍⁯‫⁭⁮‫‍‬‬‫⁪⁭‫⁫‬‎‫⁬⁪⁮‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static Point \u206C‮‪‪⁬‏‎⁫‎​⁫⁯‌​‮⁮‍​​‮⁬⁯⁫⁫‍⁬‌‪⁯⁬⁪⁯⁮⁬​⁮​⁭⁪⁫‮([In] MouseEventArgs obj0) => obj0.Location;

    static Cursor \u206D​⁫⁫‮‍‪‮‭‎⁯‍⁪⁭⁮⁭‮​‌‌‮‬‮⁬⁭‌‏‬⁮⁫⁬‎⁪‭⁫⁯‏‏‭⁪‮() => Cursors.Default;

    static void \u200C‭‭‌⁭‬⁮⁭‬‏⁪‌‬‍‮‍⁪‪⁪‪⁬⁫⁫⁫‍‪‬‪⁬‎‍‬‫⁮⁪⁬‬‭‏⁬‮([In] Control obj0, [In] Cursor obj1) => obj0.Cursor = obj1;

    static Cursor \u202B‪‭‮‎⁫‫‎‮‪‏⁪‮⁪⁫‌‮‬‪‫⁬‬⁮⁬⁯‪‏⁫‌‮‮⁫‎‌‍⁭⁯‪‬⁭‮() => Cursors.NoMove2D;

    static Thread \u200F⁮‪‍⁯⁫⁯⁪‍‌⁪‪‍‌‭⁯‍‮‌⁬‮​⁮‍⁪‫⁬‫​⁮‫‍‬‫‌‬⁫⁯‌⁯‮([In] ThreadStart obj0) => new Thread(obj0);

    static void \u206A​⁬‌‫‭⁪‍‬⁬‮‮⁭⁯‭‪‬‭‏‮‏‍‎‌​⁫⁫​‍‎‍⁮⁫‏‮⁭‏‏‍‍‮([In] Thread obj0) => obj0.Start();

    static HScrollProperties \u206D⁮⁮​​⁮‌‫‌‎‫‏‌‏‌‫‭‏‌⁪‪‏‍‪‌‬‍‍​‮⁯‍⁪‍⁮⁭‏‍‭‮(
      [In] ScrollableControl obj0)
    {
      return obj0.HorizontalScroll;
    }

    static int \u206E‭⁯‍⁮‎‌‏‭‫‏​‫⁮⁬‌‏‍‌‏‏⁯‭‍⁯‬⁪⁯‪⁯‮‍⁭⁭‎‍‪‎⁪‮([In] ScrollProperties obj0) => obj0.Value;

    static VScrollProperties \u202C​⁪‌⁫⁪​⁭⁬‌​‪‍⁪⁮‫⁪⁮‫‬‫‮⁮‏‎‭​‍‍‬⁪⁫⁬‫⁮⁮⁭‪‍‎‮(
      [In] ScrollableControl obj0)
    {
      return obj0.VerticalScroll;
    }

    static double \u200F⁬⁪⁭‮⁮⁮‏‪‬‬‫⁬⁯‏⁭‏‌‬⁫‪⁭​⁮​​‭‭‪‬⁫‍‪⁮⁯⁮⁯‏⁫‬‮([In] double obj0, [In] double obj1) => Math.Pow(obj0, obj1);

    static double \u202B‍⁪⁭‪⁯⁯⁯⁮⁯‫‌‮​‬​‍⁮​‌‌⁯‫‌⁫‍​‌‍‏‭‭⁬‍⁮‫⁯⁭‌‎‮([In] double obj0) => Math.Sqrt(obj0);

    bool \u206F‫⁮‎‮‎⁬‬‫‍‎⁯⁪⁫⁭‪‍‎‪⁪‌‮‬⁮‌⁬⁫‌‫​⁯⁭‫‏‌‎‪⁭⁭⁪‮() => this.InvokeRequired;

    object \u202C⁭⁭‫⁮⁭⁯⁬⁪‭⁭⁬​‬⁭⁯⁭‏‬‪⁭⁫‌‏⁪‏‫‪‭⁬‪⁬​‏‭‮‍⁭‪⁫‮([In] Delegate obj0, [In] object[] obj1) => this.Invoke(obj0, obj1);

    static int \u200F⁪‌‪‍​‮‮‌⁮⁮‭‍‭‌‫‍‮‬‮⁯⁫‎⁯⁬‫‮​⁯​⁯⁪‮‭‫‭‮⁫⁮‬‮([In] ScrollProperties obj0) => obj0.Maximum;

    static int \u200E‍⁫‪⁭‭⁭⁫⁯⁫‌​⁫⁮‎‬‬⁯‮⁬⁪⁬‭⁪‪⁬‫‭‭⁭⁮‬⁭⁯⁪‎‫​‫⁬‮([In] ScrollProperties obj0) => obj0.Minimum;

    static int \u206C⁫‏⁬⁬‫‎​‏⁭⁬⁪‍⁬​‍‫‎‬​⁪⁮‮⁮⁭⁯‏⁬‮⁬‫‪‪⁬⁬‭⁪‮⁭‪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200C⁮‍⁪⁬⁪‭⁮‭‌​‫‭​‭‫‫‏‬‬‪⁪‏⁪​⁮‎‪‏‭‌⁫⁬‬‎‮‎⁯‫‭‮([In] int obj0, [In] int obj1) => Math.Min(obj0, obj1);

    static void \u206C⁭‌⁯⁫‮⁫‭‭‏​‎‪‬‍‏⁫‎‫​⁬⁫⁭‎⁪⁭⁬‌‌‭‏⁫​‪⁪‬‭‭⁪‮‮([In] ScrollProperties obj0, [In] int obj1) => obj0.Value = obj1;

    static void \u200F⁫‭‪‭​​‎‍⁫‭‏‏‭‬‮⁬‌⁬‎‮‫‏⁪‮‌​‭‪‎‫‫‫‬⁭⁬‮⁭‎⁭‮([In] int obj0) => Thread.Sleep(obj0);

    static Cursor \u202B‎‌‏‌⁬⁮⁮⁪⁮‎‭⁬‬⁮‎⁪‪‫‬​​⁭‌‎‍‭‏‫‎⁪⁭​‭‪‎‏​‬‏‮() => Cursors.PanNorth;

    static Cursor \u202C‌‍⁭⁪‏⁮‮‬⁮⁮‬‬‌​‏⁫⁫⁮‬‎⁪‪⁯​⁪⁪‪‏​‌⁫⁮‌⁫‫​⁫⁭‭‮() => Cursors.PanNE;

    static Cursor \u206D‍⁪⁮‬‎‏‭‍​⁪⁪‭⁪⁯⁬‫⁭‏‫⁭⁮‫‍⁪‍‫‬⁪‭‏⁭⁪‭‪⁪‏⁭‪‪‮() => Cursors.PanEast;

    static Cursor \u200B⁭⁬‍‭‎⁬‫‫‭​‍‎‍⁭⁯⁫‏‬⁯‬‍⁫‪‪‌​‬⁪‏‬‌‪‎‭⁯‭⁭⁭‏‮() => Cursors.PanSE;

    static Cursor \u206C‪‎​⁭‭⁬⁪‪⁮‫⁮‫​‮‏⁫‮⁪‭‍‏⁬⁯‪‏‭⁮‫⁪‏‌‭‏‮‏⁫‌⁪⁫‮() => Cursors.PanSouth;

    static Cursor \u206B‭⁬‍‏‬‬⁪⁮⁫‌⁬​‍‬⁭‏‏‍‎‏‏‫⁬⁭⁫‏​⁯‌‍​⁮‫⁬⁯⁮⁫‫‭‮() => Cursors.PanSW;

    static Cursor \u206E‮⁮‍‮‍‏‎‍‏⁪⁮⁭⁫‌‭⁮⁫‮⁬‎‪⁯​⁪⁫⁮⁬‌‮‫⁫​‮⁫⁯‎‪​‮‮() => Cursors.PanWest;

    static Cursor \u202E⁫‬‮‮‏​‫‬‭⁫‬‎‫‪‫‫‫‬⁬‪‭‮‍‍‌‬⁬‌⁮‌⁯‫‌⁮‪‎⁮‍‬‮() => Cursors.PanNW;

    private enum ScrollDirection
    {
      North,
      NorthEast,
      East,
      SouthEast,
      South,
      SouthWest,
      West,
      NorthWest,
      None,
    }

    private delegate void SetScrollValuesDelegate(int verticalScroll, int horizontalScroll);

    private delegate void SetCursorDelegate(Cursor cursor);
  }
}
