// Decompiled with JetBrains decompiler
// Type: TpYKYTfgCViUMx5.s6AjXpKLF6SRsJ0nv60
// Assembly: svhost, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 488210DB-980C-40D1-8F52-4ED9B3368E64
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-72d67a9418a8ae6ecb4aa980009f4c0f516a44234e76186ce3d638928e8e7284.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace TpYKYTfgCViUMx5
{
  public class s6AjXpKLF6SRsJ0nv60
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr EZBQmKqZfKzuqVNkJ183;

    public s6AjXpKLF6SRsJ0nv60() => this.EZBQmKqZfKzuqVNkJ183 = IntPtr.Zero;

    public s6AjXpKLF6SRsJ0nv60(string baseName) => this.Gyg16vlgOlQbPcAG5258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr \u0038wN7TWtP8DZuFRIzZ239(
      IntPtr heap,
      uint flags,
      uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr \u0032VqPqtQLAoWTiLzda240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int B68hza6uOMLgZeait241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int H4XGH3XlixxVQSqhv242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int fCqHsLjkCG5uAaLBP243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int \u0034uftU2bVgDyyXUlZu244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr ZxRLejDl4mSQHnLk1245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int OV11lzfLc8KMFMJv5246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int beJ3PaC8PGj4zgNeW247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int \u0036pYtDYCZ2bSzpA8lB248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr cxBXYKoSvTVGDSXxI249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int FkwCxg64NZJyq6bJX250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int \u0034fDY8EzA74GipiV1G251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double UNPZEhuTaLFk5NKXF252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr OHUKxFW2qbpLoGOwJ253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr bnTXpY85YTUg1hVkJ254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr ud7Vn8SXe547L4RNm255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr Bn3HoILFzM1LoTtrF256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int bApNOf10bT4XcP3sF257(IntPtr handle);

    public void Gyg16vlgOlQbPcAG5258(string baseName)
    {
      if (s6AjXpKLF6SRsJ0nv60.H4XGH3XlixxVQSqhv242(this.oHEuD9z7ALS3fKzUB265(baseName), out this.EZBQmKqZfKzuqVNkJ183) != 0)
      {
        this.EZBQmKqZfKzuqVNkJ183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void SgnyN82HdPHHmXYjJ259()
    {
      if (!(this.EZBQmKqZfKzuqVNkJ183 != IntPtr.Zero))
        return;
      s6AjXpKLF6SRsJ0nv60.fCqHsLjkCG5uAaLBP243(this.EZBQmKqZfKzuqVNkJ183);
    }

    public ArrayList dVaE554x0TaPlGth7260()
    {
      DataTable dataTable = this.YFvrMbj1NfRRR8epe262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void XM47SpekTFDzroSS6261(string query)
    {
      IntPtr errorr;
      s6AjXpKLF6SRsJ0nv60.\u0034uftU2bVgDyyXUlZu244(this.EZBQmKqZfKzuqVNkJ183, this.oHEuD9z7ALS3fKzUB265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.qqDyPzswflzRaT1Nl266(s6AjXpKLF6SRsJ0nv60.ZxRLejDl4mSQHnLk1245(errorr)));
    }

    public DataTable YFvrMbj1NfRRR8epe262(string query)
    {
      IntPtr statement;
      s6AjXpKLF6SRsJ0nv60.OV11lzfLc8KMFMJv5246(this.EZBQmKqZfKzuqVNkJ183, this.oHEuD9z7ALS3fKzUB265(query), this.\u0036ZwEy7bYoN0fqSQfU268(this.oHEuD9z7ALS3fKzUB265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.\u0030beCkvWkcpqXyuiXf263(statement, ref table);
      while (num == 100)
        num = this.IOMGaBL55ams2wp9d264(statement, ref table);
      s6AjXpKLF6SRsJ0nv60.bApNOf10bT4XcP3sF257(statement);
      return table;
    }

    private int \u0030beCkvWkcpqXyuiXf263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (s6AjXpKLF6SRsJ0nv60.beJ3PaC8PGj4zgNeW247(statement) == 100)
      {
        int num1 = s6AjXpKLF6SRsJ0nv60.\u0036pYtDYCZ2bSzpA8lB248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.qqDyPzswflzRaT1Nl266(s6AjXpKLF6SRsJ0nv60.cxBXYKoSvTVGDSXxI249(statement, columnNumber));
          int num3 = s6AjXpKLF6SRsJ0nv60.FkwCxg64NZJyq6bJX250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) s6AjXpKLF6SRsJ0nv60.\u0034fDY8EzA74GipiV1G251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) s6AjXpKLF6SRsJ0nv60.UNPZEhuTaLFk5NKXF252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.qqDyPzswflzRaT1Nl266(s6AjXpKLF6SRsJ0nv60.OHUKxFW2qbpLoGOwJ253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) s6AjXpKLF6SRsJ0nv60.ud7Vn8SXe547L4RNm255(statement, columnNumber);
            objArray[columnNumber] = (object) this.\u0036AjK4FczzPT2PpMxq267(s6AjXpKLF6SRsJ0nv60.bnTXpY85YTUg1hVkJ254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return s6AjXpKLF6SRsJ0nv60.beJ3PaC8PGj4zgNeW247(statement);
    }

    private int IOMGaBL55ams2wp9d264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = s6AjXpKLF6SRsJ0nv60.\u0036pYtDYCZ2bSzpA8lB248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = s6AjXpKLF6SRsJ0nv60.FkwCxg64NZJyq6bJX250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) s6AjXpKLF6SRsJ0nv60.\u0034fDY8EzA74GipiV1G251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) s6AjXpKLF6SRsJ0nv60.UNPZEhuTaLFk5NKXF252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.qqDyPzswflzRaT1Nl266(s6AjXpKLF6SRsJ0nv60.OHUKxFW2qbpLoGOwJ253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) s6AjXpKLF6SRsJ0nv60.ud7Vn8SXe547L4RNm255(statement, columnNumber);
            objArray[columnNumber] = (object) this.\u0036AjK4FczzPT2PpMxq267(s6AjXpKLF6SRsJ0nv60.bnTXpY85YTUg1hVkJ254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = s6AjXpKLF6SRsJ0nv60.beJ3PaC8PGj4zgNeW247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr oHEuD9z7ALS3fKzUB265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = s6AjXpKLF6SRsJ0nv60.\u0038wN7TWtP8DZuFRIzZ239(s6AjXpKLF6SRsJ0nv60.\u0032VqPqtQLAoWTiLzda240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string qqDyPzswflzRaT1Nl266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.\u0036ZwEy7bYoN0fqSQfU268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array \u0036AjK4FczzPT2PpMxq267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.\u0036ZwEy7bYoN0fqSQfU268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int \u0036ZwEy7bYoN0fqSQfU268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : s6AjXpKLF6SRsJ0nv60.B68hza6uOMLgZeait241(ptr);

    public enum M2hGxt7MGRck9X2MV61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
