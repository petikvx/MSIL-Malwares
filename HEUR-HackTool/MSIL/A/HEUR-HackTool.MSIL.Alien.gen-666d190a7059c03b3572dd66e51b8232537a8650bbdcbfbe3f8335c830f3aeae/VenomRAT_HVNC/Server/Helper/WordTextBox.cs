// Decompiled with JetBrains decompiler
// Type: VenomRAT_HVNC.Server.Helper.WordTextBox
// Assembly: VenomRAT_HVNC, Version=5.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 364FC72B-4DB8-403E-BB7F-732199A12380
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-666d190a7059c03b3572dd66e51b8232537a8650bbdcbfbe3f8335c830f3aeae.exe

using System;
using System.ComponentModel;
using System.Globalization;
using System.Windows.Forms;

namespace VenomRAT_HVNC.Server.Helper
{
  public class WordTextBox : TextBox
  {
    private bool isHexNumber;
    private WordTextBox.WordType type;
    private IContainer components;

    public override int MaxLength
    {
      get => base.MaxLength;
      set
      {
      }
    }

    public bool IsHexNumber
    {
      get => this.isHexNumber;
      set
      {
        if (this.isHexNumber == value)
          return;
        if (value)
        {
          if (this.Type == WordTextBox.WordType.DWORD)
            this.Text = this.UIntValue.ToString("x");
          else
            this.Text = this.ULongValue.ToString("x");
        }
        else if (this.Type == WordTextBox.WordType.DWORD)
          this.Text = this.UIntValue.ToString();
        else
          this.Text = this.ULongValue.ToString();
        this.isHexNumber = value;
        this.UpdateMaxLength();
      }
    }

    public WordTextBox.WordType Type
    {
      get => this.type;
      set
      {
        if (this.type == value)
          return;
        this.type = value;
        this.UpdateMaxLength();
      }
    }

    public uint UIntValue
    {
      get
      {
        uint uintValue;
        try
        {
          uintValue = !string.IsNullOrEmpty(this.Text) ? (!this.IsHexNumber ? uint.Parse(this.Text) : uint.Parse(this.Text, NumberStyles.HexNumber)) : 0U;
        }
        catch (Exception ex)
        {
          uintValue = uint.MaxValue;
        }
        return uintValue;
      }
    }

    public ulong ULongValue
    {
      get
      {
        ulong ulongValue;
        try
        {
          ulongValue = !string.IsNullOrEmpty(this.Text) ? (!this.IsHexNumber ? ulong.Parse(this.Text) : ulong.Parse(this.Text, NumberStyles.HexNumber)) : 0UL;
        }
        catch (Exception ex)
        {
          ulongValue = ulong.MaxValue;
        }
        return ulongValue;
      }
    }

    public bool IsConversionValid() => string.IsNullOrEmpty(this.Text) || this.IsHexNumber || this.ConvertToHex();

    public WordTextBox()
    {
      this.InitializeComponent();
      base.MaxLength = 8;
    }

    protected override void OnKeyPress(KeyPressEventArgs e)
    {
      base.OnKeyPress(e);
      e.Handled = !this.IsValidChar(e.KeyChar);
    }

    private bool IsValidChar(char ch) => char.IsControl(ch) || char.IsDigit(ch) || this.IsHexNumber && char.IsLetter(ch) && char.ToLower(ch) <= 'f';

    private new void UpdateMaxLength()
    {
      if (this.Type == WordTextBox.WordType.DWORD)
      {
        if (this.IsHexNumber)
          base.MaxLength = 8;
        else
          base.MaxLength = 10;
      }
      else if (this.IsHexNumber)
        base.MaxLength = 16;
      else
        base.MaxLength = 20;
    }

    private bool ConvertToHex()
    {
      bool hex;
      try
      {
        if (this.Type == WordTextBox.WordType.DWORD)
        {
          int num1 = (int) uint.Parse(this.Text);
        }
        else
        {
          long num2 = (long) ulong.Parse(this.Text);
        }
        hex = true;
      }
      catch (Exception ex)
      {
        hex = false;
      }
      return hex;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent() => this.components = (IContainer) new Container();

    public enum WordType
    {
      DWORD,
      QWORD,
    }
  }
}
