// Decompiled with JetBrains decompiler
// Type: ⁫⁮‏‬⁭⁫‪‌‭‍‫‏‎‍⁯‏‪‏‌‎⁮‍‬‌‭⁭‫‪⁪‎​⁭⁭⁮‬⁭⁯‪⁫⁪‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public abstract class \u206B⁮‏‬⁭⁫‪‌‭‍‫‏‎‍⁯‏‪‏‌‎⁮‍‬‌‭⁭‫‪⁪‎​⁭⁭⁮‬⁭⁯‪⁫⁪‮
{
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200F‬‭‏⁫⁪⁯‍⁬‮‮⁮⁮‮⁬‍‍‎‏‪⁮‫⁮‍⁮‬‏⁫⁫​⁭​‫‏‮‮⁮‏‍⁫‮ = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
  public static readonly \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202E‎‍⁪‍‌‍‫‏‭⁮‍‏⁭⁪⁭‭⁬‍‏‮‫​‪⁪⁯⁫⁪‬⁯‭‎‪⁮​⁪⁫⁬⁬⁪‮ = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One;
  private const int \u206B⁬‭‫⁬⁫​‭‌‍‍‏‫⁭‮‪⁫‎‭‬‌‮⁬⁭‎‍‪‬‏‌‍‫⁭‬⁯⁮‏‫⁭⁬‮ = 1000;

  public static byte[] \u206A‭‎⁬​‫‫‭⁬‪⁭⁯‪⁬‍‫⁬⁭‫‭‍‍⁪⁬‭‏⁭⁪⁫‌⁬⁮​⁮⁮‌⁮​⁮‌‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0)
  {
    return _param0.\u206D‬​⁪⁭​​⁬‍⁪⁫⁬‫‫⁪‌‬‬⁯‮‌‏‮⁬⁮‎‎‬‭‮‫⁪‪⁯‎⁬‏⁯⁯‮‮();
  }

  public static byte[] \u206A‭‎⁬​‫‫‭⁬‪⁭⁯‪⁬‍‫⁬⁭‫‭‍‍⁪⁬‭‏⁭⁪⁫‌⁬⁮​⁮⁮‌⁮​⁮‌‮(
    int _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    byte[] sourceArray = _param1.\u206D‬​⁪⁭​​⁬‍⁪⁫⁬‫‫⁪‌‬‬⁯‮‌‏‮⁬⁮‎‎‬‭‮‫⁪‪⁯‎⁬‏⁯⁯‮‮();
    if (sourceArray.Length > _param0)
      throw new ArgumentException("standard length exceeded", "n");
    if (sourceArray.Length == _param0)
      return sourceArray;
    byte[] destinationArray = new byte[_param0];
    Array.Copy((Array) sourceArray, 0, (Array) destinationArray, destinationArray.Length - sourceArray.Length, sourceArray.Length);
    return destinationArray;
  }

  public static void \u206A‭‎⁬​‫‫‭⁬‪⁭⁯‪⁬‍‫⁬⁭‫‭‍‍⁪⁬‭‏⁭⁪⁫‌⁬⁮​⁮⁮‌⁮​⁮‌‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    byte[] _param1,
    int _param2,
    int _param3)
  {
    byte[] sourceArray = _param0.\u206D‬​⁪⁭​​⁬‍⁪⁫⁬‫‫⁪‌‬‬⁯‮‌‏‮⁬⁮‎‎‬‭‮‫⁪‪⁯‎⁬‏⁯⁯‮‮();
    if (sourceArray.Length == _param3)
    {
      Array.Copy((Array) sourceArray, 0, (Array) _param1, _param2, _param3);
    }
    else
    {
      int sourceIndex = sourceArray[0] == (byte) 0 ? 1 : 0;
      int length = sourceArray.Length - sourceIndex;
      if (length > _param3)
        throw new ArgumentException("standard length exceeded for value");
      int num = _param3 - length;
      \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u202E‫⁭‬‌⁫‮‏‫‮‪⁬‫‫⁬⁪⁪⁭‬‏⁫⁮‏⁪‫‬‭‮⁬‪‍‫⁭‪‍⁯‫‭‍‫‮(_param1, _param2, _param2 + num, (byte) 0);
      Array.Copy((Array) sourceArray, sourceIndex, (Array) _param1, _param2 + num, length);
    }
  }

  public static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202B⁫⁯⁭‭⁬‫‬​‍​‭‭⁫‫‌⁪​⁪⁫‮‍‎‏⁪‪⁪‭⁭‮‮‍⁯‪‬⁯‭⁫‪‭‮(
    int _param0,
    \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮ _param1)
  {
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(_param0, (Random) _param1);
  }

  public static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u202B‭‭‏⁬⁫‫⁪‭‍‭⁮‍‌⁭‎‫​‮‮⁯‭‫⁮‫⁬⁫‬​⁫⁪‮‎‪⁪‪‬⁯‍⁪‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1,
    \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮ _param2)
  {
    int num = _param0.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param1);
    if (num >= 0)
    {
      if (num > 0)
        throw new ArgumentException("'min' may not be greater than 'max'");
      return _param0;
    }
    if (_param0.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ > _param1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ / 2)
      return \u206B⁮‏‬⁭⁫‪‌‭‍‫‏‎‍⁯‏‪‏‌‎⁮‍‬‌‭⁭‫‪⁪‎​⁭⁭⁮‬⁭⁯‪⁫⁪‮.\u202B‭‭‏⁬⁫‫⁪‭‍‭⁮‍‌⁭‎‫​‮‮⁯‭‫⁮‫⁬⁫‬​⁫⁪‮‎‪⁪‪‬⁯‍⁪‮(\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero, _param1.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(_param0), _param2).\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(_param0);
    for (int index = 0; index < 1000; ++index)
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(_param1.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮, (Random) _param2);
      if (obj.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param0) >= 0 && obj.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param1) <= 0)
        return obj;
    }
    return new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(_param1.\u206D⁮‮‌‌‭‏‭‭⁪‮⁯⁮​‫⁯‍⁬​‍‌‮‌⁯⁭‏⁫‏​‪⁪‪‎‭‎‍‪‫⁮⁫‮(_param0).\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ - 1, (Random) _param2).\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(_param0);
  }

  public static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200E‭‌‫‬‬⁪‫‫⁫⁭⁬⁭‏‌⁬‬‏⁯⁮‫‪‫‬‫⁯‬‏‌‎‪​​​‌⁫‌⁯⁪⁯‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (!_param0.\u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(0))
      throw new ArgumentException("must be odd", "M");
    if (_param0.\u202C⁪⁮‬⁭‌‍‍⁫‍‌⁪⁮⁫‭‏⁫‎‭​‪⁪‏‍‎‮⁫‫⁬‭⁫⁬‭⁪⁫‮‮‌⁭⁭‮ != 1)
      throw new ArithmeticException("BigInteger: modulus not positive");
    if (_param1.\u202C⁪⁮‬⁭‌‍‍⁫‍‌⁪⁮⁫‭‏⁫‎‭​‪⁪‏‍‎‮⁫‫⁬‭⁫⁬‭⁪⁫‮‮‌⁭⁭‮ < 0 || _param1.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param0) >= 0)
      _param1 = _param1.\u206A‎‏⁫⁪‫‪‎⁭‮‮‭⁬⁮⁪⁬‮‍‫‏‮‎⁯‏‏‭⁯‭⁯‍‪⁮‬⁭‏⁬‎‍‭⁮‮(_param0);
    int num = _param0.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
    uint[] numArray1 = \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u202E⁪⁮⁮⁬‏‭​‎⁭‎‮⁮⁭‪‬‬‬‏‎​‫‫‍‪​⁮⁫‬⁬‏⁬‍‎⁫⁬‪⁬‍‍‮(num, _param0);
    uint[] numArray2 = \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u202E⁪⁮⁮⁬‏‭​‎⁭‎‮⁮⁭‪‬‬‬‏‎​‫‫‍‪​⁮⁫‬⁬‏⁬‍‎⁫⁬‪⁬‍‍‮(num, _param1);
    int length = numArray1.Length;
    uint[] numArray3 = \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u202C⁪‮⁬​​⁯⁯​‏‎⁭⁯‭‪​‍‏‍‎⁬⁫⁮⁮‬⁭⁫⁭‪⁮​​‏‫‍‮‬‮‌‬‮(length);
    if (\u200C‮⁮⁬‮⁯‬‏​‬‎‭‭⁯‍⁮‮⁪⁭⁭⁪‭⁯‫‬⁪⁮‏‏⁬‭‪⁭​‪‬‍⁪‪‌‮.\u200E‭‌‫‬‬⁪‫‫⁫⁭⁬⁭‏‌⁬‬‏⁯⁮‫‪‫‬‫⁯‬‏‌‎‪​​​‌⁫‌⁯⁪⁯‮(numArray1, numArray2, numArray3) == 0U)
      throw new ArithmeticException("BigInteger not invertible");
    return \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u200F⁭⁬‬‏‫⁭‫⁪‬⁬⁭⁯‭‎‫‭⁪‌​⁫‍⁬‎⁭⁯‪‌‬‭‎‌‮‭⁬‍​‬​‮‮(length, numArray3);
  }

  public static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u200F‏‭‎​‮⁯​‬‮‭⁭⁮⁮‏⁭‌⁯‍⁯‬⁫‫‍‬‎⁮⁬​⁭⁯‎‬‌‍⁫‎‎⁪⁬‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0,
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    if (!_param0.\u202B‫‏‮‬⁫‌‬⁬⁯‪‬‏‬‎‏‭‪⁭⁬‬‫⁯​⁬‍‍​⁪⁮⁯‏⁮‎⁬​⁯‫‎‍‮(0))
      throw new ArgumentException("must be odd", "M");
    if (_param0.\u202C⁪⁮‬⁭‌‍‍⁫‍‌⁪⁮⁫‭‏⁫‎‭​‪⁪‏‍‎‮⁫‫⁬‭⁫⁬‭⁪⁫‮‮‌⁭⁭‮ != 1)
      throw new ArithmeticException("BigInteger: modulus not positive");
    if (((object) _param0).Equals((object) \u206B⁮‏‬⁭⁫‪‌‭‍‫‏‎‍⁯‏‪‏‌‎⁮‍‬‌‭⁭‫‪⁪‎​⁭⁭⁮‬⁭⁯‪⁫⁪‮.\u202E‎‍⁪‍‌‍‫‏‭⁮‍‏⁭⁪⁭‭⁬‍‏‮‫​‪⁪⁯⁫⁪‬⁯‭‎‪⁮​⁪⁫⁬⁬⁪‮))
      return \u206B⁮‏‬⁭⁫‪‌‭‍‫‏‎‍⁯‏‪‏‌‎⁮‍‬‌‭⁭‫‪⁪‎​⁭⁭⁮‬⁭⁯‪⁫⁪‮.\u200F‬‭‏⁫⁪⁯‍⁬‮‮⁮⁮‮⁬‍‍‎‏‪⁮‫⁮‍⁮‬‏⁫⁫​⁭​‫‏‮‮⁮‏‍⁫‮;
    if (_param1.\u202C⁪⁮‬⁭‌‍‍⁫‍‌⁪⁮⁫‭‏⁫‎‭​‪⁪‏‍‎‮⁫‫⁬‭⁫⁬‭⁪⁫‮‮‌⁭⁭‮ < 0 || _param1.\u202B‎⁬⁪‏⁪‏‎⁮‌‮‌‭‎⁮⁭⁬‬‌‭⁪⁮‌‌⁯⁫‭‏⁫‮‬‭⁫​‍‍‍⁪‮⁭‮(_param0) >= 0)
      _param1 = _param1.\u206A‎‏⁫⁪‫‪‎⁭‮‮‭⁬⁮⁪⁬‮‍‫‏‮‎⁯‏‏‭⁯‭⁯‍‪⁮‬⁭‏⁬‎‍‭⁮‮(_param0);
    if (((object) _param1).Equals((object) \u206B⁮‏‬⁭⁫‪‌‭‍‫‏‎‍⁯‏‪‏‌‎⁮‍‬‌‭⁭‫‪⁪‎​⁭⁭⁮‬⁭⁯‪⁫⁪‮.\u202E‎‍⁪‍‌‍‫‏‭⁮‍‏⁭⁪⁭‭⁬‍‏‮‫​‪⁪⁯⁫⁪‬⁯‭‎‪⁮​⁪⁫⁬⁬⁪‮))
      return \u206B⁮‏‬⁭⁫‪‌‭‍‫‏‎‍⁯‏‪‏‌‎⁮‍‬‌‭⁭‫‪⁪‎​⁭⁭⁮‬⁭⁯‪⁫⁪‮.\u202E‎‍⁪‍‌‍‫‏‭⁮‍‏⁭⁪⁭‭⁬‍‏‮‫​‪⁪⁯⁫⁪‬⁯‭‎‪⁮​⁪⁫⁬⁬⁪‮;
    int num = _param0.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
    uint[] numArray1 = \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u202E⁪⁮⁮⁬‏‭​‎⁭‎‮⁮⁭‪‬‬‬‏‎​‫‫‍‪​⁮⁫‬⁬‏⁬‍‎⁫⁬‪⁬‍‍‮(num, _param0);
    uint[] numArray2 = \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u202E⁪⁮⁮⁬‏‭​‎⁭‎‮⁮⁭‪‬‬‬‏‎​‫‫‍‪​⁮⁫‬⁬‏⁬‍‎⁫⁬‪⁬‍‍‮(num, _param1);
    int length = numArray1.Length;
    uint[] numArray3 = \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u202C⁪‮⁬​​⁯⁯​‏‎⁭⁯‭‪​‍‏‍‎⁬⁫⁮⁮‬⁭⁫⁭‪⁮​​‏‫‍‮‬‮‌‬‮(length);
    if (!\u200C‮⁮⁬‮⁯‬‏​‬‎‭‭⁯‍⁮‮⁪⁭⁭⁪‭⁯‫‬⁪⁮‏‏⁬‭‪⁭​‪‬‍⁪‪‌‮.\u200F‏‭‎​‮⁯​‬‮‭⁭⁮⁮‏⁭‌⁯‍⁯‬⁫‫‍‬‎⁮⁬​⁭⁯‎‬‌‍⁫‎‎⁪⁬‮(numArray1, numArray2, numArray3))
      throw new ArithmeticException("BigInteger not invertible");
    return \u206A‪‪⁫‬⁯‪‏‫⁬⁬⁮‮⁬⁪‎‌⁫‮‏⁭⁪⁯​‮‍⁭‏​⁪⁯‎‏‪‬⁮⁪‏‫‏‮.\u200F⁭⁬‬‏‫⁭‫⁪‬⁬⁭⁯‭‎‫‭⁪‌​⁫‍⁬‎⁭⁯‪‌‬‭‎‌‮‭⁬‍​‬​‮‮(length, numArray3);
  }

  public static int \u206A⁮⁪⁭⁭‭‍⁯⁯‌‬⁯‬⁭⁬‎⁯​‏⁬​‍‮‪‫​⁫​⁮⁫‮‪‏⁬‭‏⁫​⁯‮‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param0)
  {
    return (_param0.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ + 7) / 8;
  }
}
