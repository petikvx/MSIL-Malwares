// Decompiled with JetBrains decompiler
// Type: MemeoBackgroundService.ProjectInstaller
// Assembly: MemeoBackgroundService, Version=2.0.0.1, Culture=neutral, PublicKeyToken=null
// MVID: CEE04D16-EE80-4DF1-BC73-2B3D265B7030
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.Win32.Patched.mf-7baf9cb6986a2764176ef57b9ea6985a0cc189acc05703abad9996ef80e59ac1.exe

using System;
using System.Collections;
using System.ComponentModel;
using System.Configuration.Install;
using System.ServiceProcess;

namespace MemeoBackgroundService
{
  [RunInstaller(true)]
  public class ProjectInstaller : Installer
  {
    private IContainer components = (IContainer) null;
    private ServiceProcessInstaller serviceProcessInstaller;
    private ServiceInstaller serviceInstaller;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.serviceProcessInstaller = new ServiceProcessInstaller();
      this.serviceInstaller = new ServiceInstaller();
      this.serviceProcessInstaller.Account = ServiceAccount.LocalSystem;
      this.serviceProcessInstaller.Password = (string) null;
      this.serviceProcessInstaller.Username = (string) null;
      this.serviceInstaller.DisplayName = "Memeo Background Service";
      this.serviceInstaller.ServiceName = "MemeoBackgroundService";
      this.serviceInstaller.StartType = ServiceStartMode.Automatic;
      this.Installers.AddRange(new Installer[2]
      {
        (Installer) this.serviceProcessInstaller,
        (Installer) this.serviceInstaller
      });
    }

    public ProjectInstaller() => this.InitializeComponent();

    protected override void OnCommitted(IDictionary savedState)
    {
      base.OnCommitted(savedState);
      try
      {
        new ServiceController("MemeoBackgroundService").Start();
      }
      catch (Exception ex)
      {
        throw new InstallException("Failed to start the service!");
      }
    }

    public override void Uninstall(IDictionary savedState) => base.Uninstall(savedState);

    protected override void OnCommitting(IDictionary savedState) => base.OnCommitting(savedState);

    protected override void OnBeforeInstall(IDictionary savedState) => base.OnBeforeInstall(savedState);

    public override void Install(IDictionary stateSaver) => base.Install(stateSaver);
  }
}
