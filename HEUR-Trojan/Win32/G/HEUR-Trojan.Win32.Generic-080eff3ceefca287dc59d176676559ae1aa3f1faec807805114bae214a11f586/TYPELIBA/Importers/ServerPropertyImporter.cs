// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Importers.ServerPropertyImporter
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Roles;
using ProjNet.Rules;
using ProjNet.Shared;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;

namespace TYPELIBA.Importers
{
  internal class ServerPropertyImporter : MerchantEventRole
  {
    private double m_CandidateProcess;
    private double m_FilterProcess;
    private double _InfoProcess;
    private double _AuthenticationProcess;
    private double strategyProcess;
    private double _ResolverProcess;
    private double m_WatcherProcess;
    private double m_RuleProcess;
    private double _HelperProcess;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ServerPropertyImporter(List<Interceptor> config)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(config, false);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ServerPropertyImporter(List<Interceptor> var1, bool isattr)
    {
      ManagerParamsID.NewExpression();
      this._InfoProcess = 0.0;
      this._AuthenticationProcess = 0.0;
      this.strategyProcess = 0.0;
      this._ResolverProcess = 0.0;
      this.m_WatcherProcess = 0.0;
      this.m_RuleProcess = 0.0;
      this._HelperProcess = 0.0;
      // ISSUE: explicit constructor call
      base.\u002Ector(var1, isattr);
      this.Name = "Lambert_Conformal_Conic_2SP";
      this.ConnectConsumer("EPSG");
      this.CountConsumer(9802L);
      Interceptor interceptor1 = this.VisitConfiguration("latitude_of_origin");
      Interceptor interceptor2 = this.VisitConfiguration("central_meridian");
      Interceptor interceptor3 = this.VisitConfiguration("standard_parallel_1");
      Interceptor interceptor4 = this.VisitConfiguration("standard_parallel_2");
      Interceptor interceptor5 = this.VisitConfiguration("false_easting");
      Interceptor interceptor6 = this.VisitConfiguration("false_northing");
      if (interceptor1 == null)
        throw new ArgumentException("Missing projection parameter 'latitude_of_origin'");
      if (interceptor2 == null)
        throw new ArgumentException("Missing projection parameter 'central_meridian'");
      if (interceptor3 == null)
        throw new ArgumentException("Missing projection parameter 'standard_parallel_1'");
      if (interceptor4 == null)
        throw new ArgumentException("Missing projection parameter 'standard_parallel_2'");
      if (interceptor5 == null)
        throw new ArgumentException("Missing projection parameter 'false_easting'");
      if (interceptor6 == null)
        throw new ArgumentException("Missing projection parameter 'false_northing'");
      double num1 = StateProcess.PopConsumer(interceptor1.LoginProcess());
      double num2 = StateProcess.PopConsumer(interceptor2.LoginProcess());
      double num3 = StateProcess.PopConsumer(interceptor3.LoginProcess());
      double num4 = StateProcess.PopConsumer(interceptor4.LoginProcess());
      this.m_CandidateProcess = interceptor5.LoginProcess() * this.m_ServerProcess;
      this.m_FilterProcess = interceptor6.LoginProcess() * this.m_ServerProcess;
      if (Math.Abs(num3 + num4) < 1E-10)
        throw new ArgumentException("Equal latitudes for St. Parallels on opposite sides of equator.");
      this._InfoProcess = 1.0 - Math.Pow(this._AnnotationProcess / this.proxyProcess, 2.0);
      this._AuthenticationProcess = Math.Sqrt(this._InfoProcess);
      this.strategyProcess = num2;
      this._ResolverProcess = num1;
      double cfg;
      double state;
      MerchantEventRole.ReadConsumer(num3, out cfg, out state);
      double num5 = cfg;
      double num6 = MerchantEventRole.CustomizeConsumer(this._AuthenticationProcess, cfg, state);
      double x1 = MerchantEventRole.PostConsumer(this._AuthenticationProcess, num3, cfg);
      MerchantEventRole.ReadConsumer(num4, out cfg, out state);
      double num7 = MerchantEventRole.CustomizeConsumer(this._AuthenticationProcess, cfg, state);
      double num8 = MerchantEventRole.PostConsumer(this._AuthenticationProcess, num4, cfg);
      double x2 = MerchantEventRole.PostConsumer(this._AuthenticationProcess, this._ResolverProcess, Math.Sin(this._ResolverProcess));
      this.m_WatcherProcess = Math.Abs(num3 - num4) <= 1E-10 ? num5 : Math.Log(num6 / num7) / Math.Log(x1 / num8);
      this.m_RuleProcess = num6 / (this.m_WatcherProcess * Math.Pow(x1, this.m_WatcherProcess));
      this._HelperProcess = this.proxyProcess * this.m_RuleProcess * Math.Pow(x2, this.m_WatcherProcess);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] InvokeConfiguration(double[] config)
    {
      int num1 = 1;
      double num2;
      double num3;
      double[] numArray;
      while (true)
      {
        double num4;
        int num5;
        double num6;
        switch (num1)
        {
          case 0:
          case 1:
            num2 = StateProcess.PopConsumer(config[0]);
            num5 = 2;
            break;
          case 2:
            num3 = StateProcess.PopConsumer(config[1]);
            num6 = Math.Abs(Math.Abs(num3) - Math.PI / 2.0);
            num5 = 5;
            break;
          case 3:
            double res = Math.Sin(num3);
            num4 = this.proxyProcess * this.m_RuleProcess * Math.Pow(MerchantEventRole.PostConsumer(this._AuthenticationProcess, num3, res), this.m_WatcherProcess);
            goto case 8;
          case 4:
          case 6:
            if (num6 > 0.0)
            {
              num4 = 0.0;
              if (true)
              {
                num1 = 8;
                continue;
              }
              goto case 2;
            }
            else
              goto label_11;
          case 5:
            if (num6 <= 1E-10)
            {
              num6 = num3 * this.m_WatcherProcess;
              goto case 4;
            }
            else
            {
              num5 = 3;
              break;
            }
          case 7:
            goto label_3;
          case 8:
            double num7 = this.m_WatcherProcess * MerchantEventRole.CalculateConsumer(num2 - this.strategyProcess);
            num2 = num4 * Math.Sin(num7) + this.m_CandidateProcess;
            num3 = this._HelperProcess - num4 * Math.Cos(num7) + this.m_FilterProcess;
            if (config.Length == 2)
            {
              if (true)
              {
                num1 = 7;
                continue;
              }
              goto label_3;
            }
            else
            {
              numArray = new double[3]
              {
                num2 / this.m_ServerProcess,
                num3 / this.m_ServerProcess,
                config[2]
              };
              num5 = 9;
              break;
            }
          case 9:
            goto label_17;
          default:
            num5 = 6;
            break;
        }
        num1 = num5;
      }
label_3:
      numArray = new double[2]
      {
        num2 / this.m_ServerProcess,
        num3 / this.m_ServerProcess
      };
      goto label_17;
label_11:
      throw new ArgumentException();
label_17:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] ReadConfiguration(double[] first)
    {
      int num1 = 0;
      if (ServerPropertyImporter.ChangeCreator())
        goto label_15;
label_1:
      int num2 = 6;
label_14:
      num1 = num2;
label_15:
      double num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_11;
          case 2:
            goto label_7;
          case 3:
            num3 = this._HelperProcess - first[1] * this.m_ServerProcess + this.m_FilterProcess;
            if (this.m_WatcherProcess > 0.0)
            {
              if (true)
              {
                num1 = 1;
                continue;
              }
              goto label_7;
            }
            else
              goto label_12;
          case 4:
            goto label_4;
          case 5:
          case 9:
            goto label_17;
          case 6:
            goto label_10;
          case 7:
          case 8:
            goto label_19;
          case 10:
            goto label_2;
          case 11:
            goto label_24;
          default:
            if (true)
            {
              num1 = 9;
              continue;
            }
            goto label_17;
        }
      }
label_2:
      long consumer1;
      if (consumer1 != 0L)
      {
        num2 = 7;
        goto label_14;
      }
      else
        goto label_21;
label_4:
      consumer1 = 0L;
      double num4 = first[0] * this.m_ServerProcess - this.m_CandidateProcess;
      num2 = 3;
      goto label_14;
label_7:
      double y;
      double num5 = Math.Atan2(y * num4, y * num3);
label_8:
      double num6;
      double instance;
      if (num6 != 0.0 || this.m_WatcherProcess > 0.0)
      {
        y = 1.0 / this.m_WatcherProcess;
        instance = MerchantEventRole.MoveConsumer(this._AuthenticationProcess, Math.Pow(num6 / (this.proxyProcess * this.m_RuleProcess), y), out consumer1);
        num2 = 10;
        goto label_14;
      }
      else
      {
        instance = -1.0 * Math.PI / 2.0;
        goto label_21;
      }
label_10:
      instance = double.NaN;
      num2 = 4;
      goto label_14;
label_11:
      num6 = Math.Sqrt(num4 * num4 + num3 * num3);
      y = 1.0;
      goto label_13;
label_12:
      num6 = -Math.Sqrt(num4 * num4 + num3 * num3);
      y = -1.0;
label_13:
      num5 = 0.0;
      bool flag = num6 != 0.0;
label_17:
      if (flag)
      {
        num2 = 2;
        goto label_14;
      }
      else
        goto label_8;
label_19:
      throw new ArgumentException();
label_21:
      double consumer2 = MerchantEventRole.CalculateConsumer(num5 / this.m_WatcherProcess + this.strategyProcess);
      double[] numArray;
      if (first.Length == 2)
      {
        numArray = new double[2]
        {
          StateProcess.CheckConsumer(consumer2),
          StateProcess.CheckConsumer(instance)
        };
      }
      else
      {
        numArray = new double[3]
        {
          StateProcess.CheckConsumer(consumer2),
          StateProcess.CheckConsumer(instance),
          first[2]
        };
        num2 = 11;
        goto label_14;
      }
label_24:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override RepositoryProcess CreateState()
    {
      int num1 = 4;
      RepositoryProcess tagProcess;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_5;
            case 1:
            case 3:
              goto label_1;
            case 2:
              goto label_6;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_5;
          }
        }
label_1:
        bool flag;
        if (!flag)
          goto label_7;
        else
          goto label_6;
label_5:
        flag = this.tagProcess == null;
        num1 = 3;
        continue;
label_6:
        this.tagProcess = (StateProcess) new ServerPropertyImporter(this._IteratorProcess, !this._ReaderProcess);
label_7:
        tagProcess = (RepositoryProcess) this.tagProcess;
        num1 = 5;
      }
label_8:
      return tagProcess;
    }

    internal static bool ChangeCreator() => true;

    internal static bool PopCreator() => false;
  }
}
