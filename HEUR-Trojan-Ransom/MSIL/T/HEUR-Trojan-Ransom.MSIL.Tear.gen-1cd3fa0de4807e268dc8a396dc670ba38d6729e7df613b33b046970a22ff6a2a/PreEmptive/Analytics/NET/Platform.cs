// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.NET.Platform
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Messages;
using PreEmptive.Analytics.Common.Utilities;
using PreEmptive.Analytics.NET.Common;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Threading;

namespace PreEmptive.Analytics.NET
{
  public class Platform : CommonNetPlatform
  {
    public Platform(Configuration config, [Optional] ILogger logger)
      : base(config, logger)
    {
    }

    public override AgentInfo GetAgentInfo()
    {
      int A_1 = 12;
      int num;
      AgentInfo agentInfo;
      switch (0)
      {
        case 0:
label_2:
          agentInfo = base.GetAgentInfo();
          agentInfo.Name = Utils.a("\uEEBF賁臃鋅\uE8C7觉ꃋ꿍ꏏꇑ뷓뗕", A_1);
          num = 0;
          goto default;
        default:
          while (true)
          {
            switch (num)
            {
              case 0:
                if (NetUtilities.RunningInMono())
                {
                  switch (true ? 1 : 0)
                  {
                    case 0:
                    case 2:
                      goto label_9;
                    default:
                      if (false)
                        ;
                      if (true)
                        ;
                      num = 2;
                      continue;
                  }
                }
                else
                  goto label_9;
              case 1:
                goto label_9;
              case 2:
                agentInfo.Name += Utils.a("\uE0BF\uEAC1觃꧅ꛇꗉ\uE5CB", A_1);
                num = 1;
                continue;
              default:
                goto label_2;
            }
          }
label_9:
          return agentInfo;
      }
    }

    public override OSInfo GetOSInfo()
    {
      int A_1 = 2;
      OSInfo osInfo = new OSInfo();
      try
      {
        int num1 = 26482;
        switch (26482 == num1 ? 1 : 0)
        {
          case 0:
          case 2:
            break;
          default:
            num1 = 0;
            if (num1 == 0)
              ;
            IEnumerator<ManagementBaseObject> enumerator = Utils.a("\uE5B5ﶷ\uF6B9僚ﶽ钿\uE2C1跃\uA8C5믇뻉귋ꋍ볏雑뗓ꋕ뷗\uF6D9ﳛ鷝臟鋡郣迥蟧蓩샫컭ꏯ韱蛳\u9FF5駷雹닻诽淿态愃琅␇⨉弋欍戏搑紓甕紗䨙紛紝䬟漡䔣䰥䜧堩稫䬭䈯䄱崳夵嘷ᘹ᰻洽┿ぁ㉃⽅⭇⽉\u1C4B⽍㍏㥑ᥓ㽕㙗㕙\u2E5B\u085D՟ၡᝣཥݧѩ䱫⡭≯㵱㥳噵⽷\u1379ቻ䵽뉿\uDD81쮃\uF685\uED87\uF889\uED8B揄憐ﲑ\uF393얕\uE197\uE999\uE89Bﮝ춟", A_1).a().GetEnumerator();
            try
            {
              num1 = 2;
              int num2 = num1;
              while (true)
              {
                switch (num2)
                {
                  case 0:
                    goto label_21;
                  case 2:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 3:
                    num1 = 0;
                    num2 = num1;
                    continue;
                  case 4:
                    if (enumerator.MoveNext())
                    {
                      ManagementBaseObject current = enumerator.Current;
                      osInfo.InstallDate = ManagementDateTimeConverter.ToDateTime(current.b(Utils.a("ﾵ횷즹좻\uDFBD겿껁胃\uA7C5볇꿉", A_1))).ToISOFormat();
                      osInfo.Language = CultureInfo.InstalledUICulture.Name;
                      osInfo.Name = current.b(Utils.a("\uF5B5\uD9B7쪹좻ힽ꾿곁", A_1));
                      osInfo.ProductCode = CommonNetPlatform.a(current.b(Utils.a("\uE5B5\uDDB7좹햻\uDFBD겿賁뇃ꯅ\uAAC7꿉뻋", A_1)));
                      osInfo.ServicePackVersionMajor = (ulong) current.a<ushort>(Utils.a("\uE5B5\uDDB7좹쪻ힽꎿ\uA7C1铃\uA7C5ꯇꇉ臋꿍뫏뷑ꛓ胕뷗꣙꿛럝迟賡", A_1));
                      osInfo.ServicePackVersionMinor = (ulong) current.a<ushort>(Utils.a("\uE5B5\uDDB7좹쪻ힽꎿ\uA7C1铃\uA7C5ꯇꇉ臋\uA7CD뻏뷑ꛓ胕뷗꣙꿛럝迟賡", A_1));
                      num1 = 1;
                      num2 = num1;
                      continue;
                    }
                    num1 = 3;
                    num2 = num1;
                    continue;
                }
                num1 = 4;
                num2 = num1;
              }
            }
            finally
            {
              int num3 = 0;
              while (true)
              {
                int num4 = 1;
                if (num4 == 0)
                  ;
                switch (num3)
                {
                  case 0:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 1:
                    goto label_19;
                  case 2:
                    enumerator.Dispose();
                    num4 = 1;
                    num3 = num4;
                    continue;
                }
                if (enumerator != null)
                {
                  num4 = 2;
                  num3 = num4;
                }
                else
                  break;
              }
label_19:;
            }
        }
      }
      catch
      {
      }
label_21:
      return osInfo;
    }

    public override UserInfo GetUserInfo()
    {
      int A_1 = 15;
      switch (0)
      {
        default:
          UserInfo userInfo = new UserInfo();
          string A_0 = "";
          try
          {
            if (false)
              ;
            A_0 = Environment.UserDomainName + Utils.a("鿂", A_1) + Environment.UserName;
          }
          catch
          {
          }
          try
          {
            int num1 = -32658;
            switch (-32658 == num1 ? 1 : 0)
            {
              case 0:
              case 2:
                break;
              default:
                num1 = 0;
                if (num1 == 0)
                  ;
                IEnumerator<ManagementBaseObject> enumerator = (Utils.a("郂胄识賈裊駌\uEFCE蓐ꃒ냔ꗖ韘뫚냜뫞쇠ꗢ럤꣦ꓨ쯪뫬蛮\u9FF0샲쟴ꣶ뫸铺郼迾琀眂怄甆娈爊縌笎琐縒㔔䀖儘帚伜娞Ġ洢䐤䨦䰨ᘪਬ", A_1) + Environment.MachineName + Utils.a("\uE4C2", A_1)).a().GetEnumerator();
                try
                {
                  num1 = 2;
                  int num2 = num1;
                  while (true)
                  {
                    ManagementBaseObject current;
                    string str1;
                    switch (num2)
                    {
                      case 1:
                        goto label_2;
                      case 2:
                        switch (0)
                        {
                          case 0:
                            goto label_17;
                          default:
                            continue;
                        }
                      case 3:
                        str1 = A_0;
                        break;
                      case 4:
                        string str2 = current.b(Utils.a("雂뛄ꋆ믈藊곌ꋎ듐", A_1));
                        if (str2 == null)
                        {
                          num1 = 3;
                          num2 = num1;
                          continue;
                        }
                        str1 = str2;
                        break;
                      case 5:
                        num1 = 1;
                        num2 = num1;
                        continue;
                      case 6:
                        if (enumerator.MoveNext())
                        {
                          current = enumerator.Current;
                          num1 = 4;
                          num2 = num1;
                          continue;
                        }
                        num1 = 5;
                        num2 = num1;
                        continue;
                      default:
label_17:
                        num1 = 6;
                        num2 = num1;
                        continue;
                    }
                    A_0 = str1;
                    num1 = 0;
                    num2 = num1;
                  }
                }
                finally
                {
                  int num3 = 0;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                        switch (0)
                        {
                          case 0:
                            break;
                          default:
                            continue;
                        }
                        break;
                      case 1:
                        goto label_27;
                      case 2:
                        enumerator.Dispose();
                        num3 = 1;
                        continue;
                    }
                    if (enumerator != null)
                      num3 = 2;
                    else
                      break;
                  }
label_27:;
                }
            }
          }
          catch
          {
          }
label_2:
          userInfo.HashedName = string.IsNullOrEmpty(A_0) ? "" : CommonNetPlatform.a(A_0);
          userInfo.IsAdmin = new bool?(new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator));
          return userInfo;
      }
    }

    public override SystemInfo GetSystemInfo(bool fulldata)
    {
      int num1 = 7615;
      int num2 = num1;
      num1 = 7615;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          return SystemInfoPopulator.GetNewSystemInfo(fulldata);
        default:
          goto case 1;
      }
    }

    public override PerformanceInfo GetPerformanceInfo(bool fulldata)
    {
      int A_1 = 16;
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = -7533;
      int num2 = num1;
      num1 = -7533;
      int num3 = num1;
      PerformanceInfo performanceInfo;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_12:
          return performanceInfo;
        default:
          num1 = 0;
          if (num1 == 0)
            ;
          performanceInfo = new PerformanceInfo();
          try
          {
            int num4;
            switch (0)
            {
              case 0:
label_6:
                PerformanceCounter performanceCounter1 = new PerformanceCounter(Utils.a("觃ꏅꗇꗉ뻋럍", A_1), Utils.a("藃냅꧇ꏉꃋ꿍닏뻑뇓\uF6D5闗飙ꗛꫝ藟釡", A_1));
                performanceInfo.UsedMemory = new int?((int) (Process.GetCurrentProcess().WorkingSet64 / 1048576L));
                performanceInfo.TotalMemory = new int?((int) performanceCounter1.NextValue());
                num1 = 1;
                num4 = num1;
                goto default;
              default:
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                      PerformanceCounter performanceCounter2 = new PerformanceCounter(Utils.a("铃듅\uA7C7꧉꧋뷍ꏏ", A_1), Utils.a("\uE1C3\uE6C5飇룉ꏋ귍뗏ꇑ\uA7D3맕\uAAD7龎裛럝跟蟡", A_1), Process.GetCurrentProcess().ProcessName, true);
                      double num5 = (double) performanceCounter2.NextValue();
                      Thread.Sleep(100);
                      performanceInfo.CpuUtilization = new int?(Math.Min((int) performanceCounter2.NextValue() / Environment.ProcessorCount, 100));
                      num1 = 3;
                      num4 = num1;
                      continue;
                    case 1:
                      if (fulldata)
                      {
                        num1 = 0;
                        num4 = num1;
                        continue;
                      }
                      goto case 3;
                    case 2:
                      goto label_12;
                    case 3:
                      num1 = 2;
                      num4 = num1;
                      continue;
                    default:
                      goto label_6;
                  }
                }
            }
          }
          catch
          {
            goto case 0;
          }
      }
    }
  }
}
