// Decompiled with JetBrains decompiler
// Type: SmartAssembly.Shared.AppRegistryKeys
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.Win32;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using Ⴈ;

namespace SmartAssembly.Shared
{
  public sealed class AppRegistryKeys
  {
    public static string SubkeyApplication
    {
      get
      {
        try
        {
          return ႷႭ.ႰႨ(Ⴈ.Ⴀ.Ⴐ(1468303696, 4), AppNameFinder.AppName, 941, 927);
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
      }
    }

    public static string WowSubkeyApplication
    {
      get
      {
        try
        {
          return ႷႭ.ႰႨ(ႷႭ.ႥႳ(1491049055, 0), AppNameFinder.AppName, 314, 264);
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
      }
    }

    public static object GetRegistryEntry(string valueName, object defaultValue)
    {
      RegistryKey registryKey;
      int num1;
      object registryEntry1;
      object registryEntry2;
      int num2;
      try
      {
        registryKey = SmartAssembly.SmartExceptionsCore.DoNotObfuscateAttribute.Ⴍ(Registry.LocalMachine, AppRegistryKeys.SubkeyApplication, 978, 959);
        try
        {
          num1 = 4;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_13;
              case 1:
                goto label_4;
              case 2:
              case 3:
                goto label_11;
              case 5:
                goto label_5;
              default:
                num1 = registryKey != null ? 5 : 1;
                continue;
            }
          }
label_4:
          registryEntry1 = defaultValue;
          goto label_13;
label_5:
          registryEntry2 = DoNotPruneTypeAttribute.Ⴃ(registryKey, valueName, defaultValue, 341, 365);
        }
        finally
        {
          num2 = 0;
          while (true)
          {
            switch (num2)
            {
              case 2:
                goto label_9;
              case 3:
              case 4:
              case 5:
                goto label_10;
              default:
                num2 = registryKey == null ? 3 : 2;
                continue;
            }
          }
label_9:
          registryKey.Dispose();
label_10:;
        }
label_11:
        switch (4)
        {
          case 0:
          case 1:
            break;
          default:
            return registryEntry2;
        }
label_13:
        return registryEntry1;
      }
      catch (Exception ex)
      {
        object o1 = registryEntry2;
        RegistryKey o2 = registryKey;
        object o3 = registryEntry1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num2;
        int num4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) num4;
        string o8 = valueName;
        object o9 = defaultValue;
        StackFrameHelper.CreateException9(ex, o1, (object) o2, o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, o9);
        throw;
      }
    }

    private AppRegistryKeys()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static AppRegistryKeys()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static byte[] Ⴀ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 40:
            num2 = 3;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 5;
              continue;
            case 1:
            case 3:
              goto label_8;
            case 4:
            case 6:
              num1 = 5;
              continue;
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (AppRegistryKeys.Ⴀ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return Convert.FromBase64String(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void Ⴄ([In] Thread obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_8;
            case 1:
              goto label_7;
            case 5:
              num1 = 4;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 47:
                  num2 = 1;
                  break;
                default:
                  num2 = 5;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Start(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Thread o3 = obj0;
        object o4 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static void Ⴅ([In] Thread obj0, [In] CultureInfo obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              goto label_7;
            case 1:
              goto label_8;
            case 4:
              num1 = 5;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 1:
                  num2 = 0;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.CurrentUICulture = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Thread o3 = obj0;
        CultureInfo o4 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static bool Ⴐ([In] FieldInfo obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 116:
            num2 = 0;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              goto label_8;
            case 3:
            case 4:
              num1 = 7;
              continue;
            case 5:
              num1 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (AppRegistryKeys.Ⴐ);
              num1 = 7;
              continue;
          }
        }
label_8:
        return obj0.IsStatic;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        FieldInfo o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static string[] Ⴓ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      try
      {
        switch ((obj2 ^ obj1) - 79)
        {
          case 0:
            return obj0.GetManifestResourceNames();
          default:
            goto label_0;
        }
      }
      catch (Exception ex)
      {
        Assembly o1 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj2;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }
  }
}
