// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Core;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip
{
  public class MemoryArchiveStorage : BaseArchiveStorage
  {
    private MemoryStream \uE001;
    private MemoryStream \uE000;

    public MemoryArchiveStorage()
      : base(FileUpdateMode.Direct)
    {
    }

    public MemoryArchiveStorage(FileUpdateMode updateMode)
      : base(updateMode)
    {
    }

    public MemoryStream FinalStream => this.\uE000;

    public override Stream GetTemporaryOutput()
    {
      this.\uE001 = new MemoryStream();
      return (Stream) this.\uE001;
    }

    public override Stream ConvertTemporaryToFinal()
    {
      this.\uE000 = this.\uE001 != null ? new MemoryStream(this.\uE001.ToArray()) : throw new ZipException(\uE01B.\uE000("\uEFD7\uEFF6\uEFB9\uEFED\uEFFC\uEFF4\uEFE9\uEFF6\uEFEB\uEFF8\uEFEB\uEFE0\uEFB9\uEFEA\uEFED\uEFEB\uEFFC\uEFF8\uEFF4\uEFB9\uEFF1\uEFF8\uEFEA\uEFB9\uEFFB\uEFFC\uEFFC\uEFF7\uEFB9\uEFFA\uEFEB\uEFFC\uEFF8\uEFED\uEFFC\uEFFD", 61337));
      return (Stream) this.\uE000;
    }

    public override Stream MakeTemporaryCopy(Stream stream)
    {
      this.\uE001 = new MemoryStream();
      stream.Position = 0L;
      StreamUtils.Copy(stream, (Stream) this.\uE001, new byte[4096]);
      return (Stream) this.\uE001;
    }

    public override Stream OpenForDirectUpdate(Stream stream)
    {
      Stream destination;
      if (stream == null || !stream.CanWrite)
      {
        destination = (Stream) new MemoryStream();
        if (stream != null)
        {
          stream.Position = 0L;
          StreamUtils.Copy(stream, destination, new byte[4096]);
          stream.Close();
        }
      }
      else
        destination = stream;
      return destination;
    }

    public override void Dispose()
    {
      if (this.\uE001 == null)
        return;
      this.\uE001.Close();
    }
  }
}
