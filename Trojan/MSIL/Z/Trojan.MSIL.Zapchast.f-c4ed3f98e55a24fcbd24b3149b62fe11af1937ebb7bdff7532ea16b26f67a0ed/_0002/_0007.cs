// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ShockService, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 734F9505-CACA-4A59-B5D4-1A5D344BA700
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.f-c4ed3f98e55a24fcbd24b3149b62fe11af1937ebb7bdff7532ea16b26f67a0ed.exe

using \u0002;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0002
{
  internal sealed class \u0007
  {
    private static Assembly \u0001 = (Assembly) null;
    private static string[] \u0001 = new string[0];

    internal static void \u0001()
    {
      try
      {
        AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0007.\u0001);
      }
      catch (Exception ex)
      {
      }
    }

    private static Assembly \u0001([In] object obj0, [In] ResolveEventArgs obj1)
    {
label_0:
      if ((object) \u0007.\u0001 == null)
      {
        lock (\u0007.\u0001)
        {
          \u0007.\u0001 = Assembly.Load("{ea480595-18cb-4d80-8307-ff04e34d4d5e}, PublicKeyToken=3e56350693f7355e");
          if ((object) \u0007.\u0001 != null)
            \u0007.\u0001 = \u0007.\u0001.GetManifestResourceNames();
        }
      }
      string name = obj1.Name;
      int index = 0;
      while (true)
      {
        int num1 = index;
        if (true)
          goto label_18;
label_9:
        if (true)
        {
          if (num1 == 0)
            num1 = index;
          else
            break;
        }
        int num2 = 1;
label_16:
        index = num1 + num2;
        continue;
label_18:
        int num3 = \u0007.\u0001.Length;
        while (true)
        {
          if (false)
          {
            num2 = num3;
            goto label_16;
          }
          else
          {
            int num4 = num3;
            if (false)
              num3 = num4;
            else if (num1 < num4)
            {
              num1 = \u0007.\u0001[index] == name ? 1 : 0;
              goto label_9;
            }
            else
            {
              if (true)
                return (Assembly) null;
              goto label_0;
            }
          }
        }
        num2 = num3;
        goto label_16;
      }
      return !\u0007.\u0001() ? (Assembly) null : \u0007.\u0001;
    }

    private static bool \u0001()
    {
      bool flag;
      try
      {
        StackFrame[] frames = new StackTrace().GetFrames();
        int num1 = 2;
        int num2;
        int num3;
        while (true)
        {
          int index = num1;
          while (true)
          {
            int num4 = index;
            if (true)
              goto label_8;
label_6:
            index = num4;
            continue;
label_8:
            int num5 = frames.Length;
            if (true)
              num5 = num5;
            if (num4 < num5)
            {
              if ((object) frames[index].GetMethod().Module.Assembly != (object) Assembly.GetExecutingAssembly())
              {
                num2 = index;
                if (true)
                {
                  num4 = num2 + 1;
                  goto label_6;
                }
                else
                  goto label_12;
              }
              else
                break;
            }
            else
              goto label_11;
          }
          num3 = 1;
          if (num3 == 0)
            num1 = num3;
          else
            break;
        }
        flag = num3 != 0;
        goto label_17;
label_11:
        num2 = 0;
label_12:
        flag = num2 != 0;
      }
      catch
      {
        do
        {
          flag = true;
        }
        while (false);
      }
label_17:
      return flag;
    }
  }
}
