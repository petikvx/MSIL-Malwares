// Decompiled with JetBrains decompiler
// Type: Dio.DioLabel
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace Dio
{
  public class DioLabel : Label
  {
    public DioLabel()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.DoubleBuffer | ControlStyles.OptimizedDoubleBuffer, true);
      this.Font = new Font(DioDefaults.DefaultFont.FontFamily, 14f);
      this.BackColor = DioDefaults.DefaultBackColor;
      this.ForeColor = DioDefaults.DefaultDarkForeColor;
      this.TitleFont = DioDefaults.DefaultFont;
      this.DrawSide = true;
      this.HandleCreated += (EventHandler) ((sender, args) => this.DoubleBuffered = true);
    }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public string Title { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public Font TitleFont { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public bool DrawSide { get; set; }

    public override bool AutoSize => false;

    protected override void OnPaint(PaintEventArgs pevent)
    {
      Graphics graphics = pevent.Graphics;
      graphics.Clear(this.Parent.BackColor);
      graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
      using (SolidBrush solidBrush1 = new SolidBrush(this.BackColor))
      {
        using (SolidBrush solidBrush2 = new SolidBrush(this.ForeColor))
        {
          int x;
          if (this.DrawSide)
          {
            graphics.FillRectangle((Brush) solidBrush1, 0, 0, 4, this.Height);
            x = 8;
          }
          else
            x = 0;
          SizeF sizeF1 = new SizeF(0.0f, 0.0f);
          if (!string.IsNullOrEmpty(this.Title))
          {
            sizeF1 = graphics.MeasureString(this.Title, this.TitleFont);
            graphics.DrawString(this.Title, this.TitleFont, (Brush) solidBrush2, (float) x, 0.0f);
          }
          SizeF sizeF2 = graphics.MeasureString(this.Text, this.Font);
          graphics.DrawString(this.Text, this.Font, (Brush) solidBrush2, (float) x, (float) (((double) this.Height - (double) sizeF2.Height - (double) sizeF1.Height) / 2.0) + sizeF1.Height);
        }
      }
    }
  }
}
