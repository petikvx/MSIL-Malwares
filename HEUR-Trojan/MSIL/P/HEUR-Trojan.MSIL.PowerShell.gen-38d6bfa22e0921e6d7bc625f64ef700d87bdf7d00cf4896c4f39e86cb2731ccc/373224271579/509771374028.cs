// Decompiled with JetBrains decompiler
// Type: 373224271579.509771374028
// Assembly: 373224271579, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: F1AD5918-0B7E-492E-9A94-09EF01F479FE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-38d6bfa22e0921e6d7bc625f64ef700d87bdf7d00cf4896c4f39e86cb2731ccc.exe

using \u003373224271579;
using \u003471715637057;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace \u003373224271579
{
  public class \u003509771374028
  {
    private \u003097350320562 \u003389196612784;

    public \u003509771374028(\u003097350320562 settings) => this.\u003389196612784 = settings;

    public \u003378195034476 \u003578775342974(string _param1)
    {
      \u003378195034476 obj = this.\u003966300741127(_param1);
      if (obj == null)
        return (\u003378195034476) null;
      List<\u003457960348794> objList = this.\u003241551195916(obj);
      obj.\u003050415372819 = objList.ToArray();
      long totalSeconds = (long) (DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds;
      string directoryName = Path.GetDirectoryName(_param1);
      string withoutExtension = Path.GetFileNameWithoutExtension(_param1);
      string extension = Path.GetExtension(_param1);
      string destFileName = Path.Combine(directoryName, withoutExtension + "_" + totalSeconds.ToString() + extension);
      File.Move(_param1, destFileName);
      string contents = JsonConvert.SerializeObject((object) obj, (Formatting) 1);
      File.WriteAllText(_param1, contents);
      return obj;
    }

    public \u003378195034476 \u003966300741127(string _param1)
    {
      using (StreamReader streamReader = new StreamReader(_param1))
        return JsonConvert.DeserializeObject<\u003378195034476>(streamReader.ReadToEnd());
    }

    public List<\u003457960348794> \u003241551195916(\u003378195034476 _param1)
    {
      List<\u003457960348794> objList = new List<\u003457960348794>();
      if (this.\u003389196612784.\u003604185552945)
        this.\u003377558825462(_param1, objList);
      if (this.\u003389196612784.\u003347584479853)
        this.\u003978368626441(_param1, objList);
      if (((\u003722910809127) this.\u003389196612784).\u003619699106880)
        this.\u003555294726506(_param1, objList);
      this.\u003989807037256(objList);
      return objList;
    }

    private void \u003989807037256(List<\u003457960348794> _param1)
    {
      _param1.Add(new \u003457960348794(0.0, 12, this.\u003389196612784.\u003781278745043));
      _param1.Add(new \u003457960348794(0.0, 13, this.\u003389196612784.\u003781278745043));
    }

    private void \u003377558825462(\u003378195034476 _param1_1, List<\u003457960348794> _param2)
    {
      double num = ((IEnumerable<\u003460765135433>) _param1_1.\u003024356928920).Max<\u003460765135433>((Func<\u003460765135433, double>) (_param1_2 => _param1_2.\u003414104447973));
      double? nullable = this.\u003944398735526((IEnumerable<\u003457960348794>) _param1_1.\u003050415372819);
      if (!nullable.HasValue)
        return;
      bool flag = true;
      for (double time = nullable.Value; time <= num; time += this.\u003389196612784.\u003262269765185)
      {
        if (num - time < this.\u003389196612784.\u003262269765185)
        {
          if (flag)
            _param2.Add(new \u003457960348794(time, 1, 7));
          else
            _param2.Add(new \u003457960348794(time, 1, 3));
        }
        else if (flag)
        {
          _param2.Add(new \u003457960348794(time, 1, 5));
          if (this.\u003389196612784.\u003651098224098 && time >= 1.0)
            _param2.Add(new \u003457960348794(time - 2.0, 1, 3));
        }
        else
        {
          _param2.Add(new \u003457960348794(time, 1, 1));
          if (this.\u003389196612784.\u003651098224098 && time >= 1.0)
            _param2.Add(new \u003457960348794(time - 2.0, 1, 7));
        }
        flag = !flag;
      }
    }

    private void \u003978368626441(\u003378195034476 _param1_1, List<\u003457960348794> _param2)
    {
      double num = ((IEnumerable<\u003460765135433>) _param1_1.\u003024356928920).Max<\u003460765135433>((Func<\u003460765135433, double>) (_param1_2 => _param1_2.\u003414104447973));
      double? nullable = this.\u003944398735526((IEnumerable<\u003457960348794>) _param1_1.\u003050415372819);
      if (!nullable.HasValue)
        return;
      for (double time = nullable.Value; time <= num; time += this.\u003389196612784.\u003262269765185)
        _param2.Add(new \u003457960348794(time, 8, 0));
    }

    private double? \u003944398735526(IEnumerable<\u003457960348794> _param1)
    {
      if (_param1 == null)
        return new double?();
      List<double> doubleList = new List<double>();
      foreach (\u003457960348794 obj in _param1)
      {
        if (obj.\u003439270454661 == 0)
          doubleList.Add(obj.\u003893533171494);
      }
      Dictionary<double, int> dictionary = this.\u003892716359435((IEnumerable<double>) doubleList);
      if (dictionary.Count == 0)
        return new double?();
      List<double> source = new List<double>();
      foreach (KeyValuePair<double, int> keyValuePair in dictionary)
      {
        if (keyValuePair.Value == 7)
          source.Add(keyValuePair.Key);
      }
      return source.Count == 0 ? new double?() : new double?(source.Min());
    }

    private Dictionary<double, int> \u003892716359435(IEnumerable<double> _param1)
    {
      Dictionary<double, int> dictionary = new Dictionary<double, int>();
      foreach (double key in _param1)
      {
        if (!dictionary.ContainsKey(key))
          dictionary[key] = 0;
        ++dictionary[key];
      }
      return dictionary;
    }

    private void \u003555294726506(\u003378195034476 _param1, List<\u003457960348794> _param2)
    {
      \u003460765135433[] objArray = _param1.\u003024356928920;
      if (this.\u003389196612784.\u003951653492361)
        objArray = this.\u003269999281477((IEnumerable<\u003460765135433>) _param1.\u003024356928920);
      foreach (\u003460765135433 obj in objArray)
      {
        Tuple<int, int> tuple = this.\u003243048369427(obj.\u003923449074978, obj.\u003215165304155);
        _param2.Add(new \u003457960348794(obj.\u003414104447973, tuple.Item1, tuple.Item2));
      }
    }

    private Tuple<int, int> \u003243048369427(int _param1, int _param2)
    {
      int num1 = 0;
      int num2 = 0;
      switch (_param1)
      {
        case 0:
        case 2:
        case 4:
        case 6:
          num1 = 7;
          break;
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
          num1 = 3;
          break;
      }
      switch (_param2)
      {
        case 0:
          num2 = 2;
          break;
        case 2:
          num2 = 3;
          break;
        case 3:
          num2 = 4;
          break;
      }
      return Tuple.Create<int, int>(num2, num1);
    }

    private \u003460765135433[] \u003269999281477(
      IEnumerable<\u003460765135433> _param1_1)
    {
      return _param1_1.GroupBy<\u003460765135433, int>((Func<\u003460765135433, int>) (_param1_2 => this.\u003477250600970(_param1_2.\u003414104447973, 2))).OrderByDescending<IGrouping<int, \u003460765135433>, int>((Func<IGrouping<int, \u003460765135433>, int>) (_param1_3 => _param1_3.Count<\u003460765135433>())).FirstOrDefault<IGrouping<int, \u003460765135433>>().ToArray<\u003460765135433>();
    }

    private int \u003477250600970(double _param1, int _param2)
    {
      Decimal num = (Decimal) _param1 % 1M;
      for (int index = 0; index < _param2; ++index)
        num *= 10M;
      return (int) num;
    }
  }
}
