// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.VarTable
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace fLaSh.Dissembler
{
  public class VarTable : ResourceTable
  {
    private Dictionary<ushort, ushort> PnYyXSGDt;

    public Dictionary<ushort, ushort> Languages
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.PnYyXSGDt;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public VarTable(IntPtr lpRes)
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Read(lpRes);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override IntPtr Read(IntPtr lpRes)
    {
      this.PnYyXSGDt = new Dictionary<ushort, ushort>();
      Kernel32.VAR_HEADER structure;
      for (IntPtr ptr = base.Read(lpRes); ptr.ToInt32() < lpRes.ToInt32() + (int) this._header.wLength; ptr = new IntPtr(ptr.ToInt32() + Marshal.SizeOf((object) structure)))
      {
        structure = (Kernel32.VAR_HEADER) Marshal.PtrToStructure(ptr, typeof (Kernel32.VAR_HEADER));
        this.PnYyXSGDt.Add(structure.wLanguageIDMS, structure.wCodePageIBM);
      }
      return new IntPtr(lpRes.ToInt32() + (int) this._header.wLength);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void Write(BinaryWriter w)
    {
      long position1 = w.BaseStream.Position;
      base.Write(w);
      Dictionary<ushort, ushort>.Enumerator enumerator = this.PnYyXSGDt.GetEnumerator();
      long position2 = w.BaseStream.Position;
      while (enumerator.MoveNext())
      {
        w.Write(enumerator.Current.Key);
        w.Write(enumerator.Current.Value);
      }
      ResourceUtil.WriteAt(w, w.BaseStream.Position - position2, position1 + 2L);
      ResourceUtil.PadToDWORD(w);
      ResourceUtil.WriteAt(w, w.BaseStream.Position - position1, position1);
    }

    public ushort this[ushort key]
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.PnYyXSGDt[key];
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.PnYyXSGDt[key] = value;
    }
  }
}
