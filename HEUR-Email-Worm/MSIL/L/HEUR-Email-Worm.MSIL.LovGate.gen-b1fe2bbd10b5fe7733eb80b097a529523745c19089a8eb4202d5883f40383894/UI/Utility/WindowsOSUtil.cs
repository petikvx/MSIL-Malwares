// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.UI.Utility.WindowsOSUtil
// Assembly: PermissionSetEntryFiel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE7870A8-3D72-435A-B1B6-C43A7BD9D85D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-b1fe2bbd10b5fe7733eb80b097a529523745c19089a8eb4202d5883f40383894.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Security;
using System.Windows.Forms;

namespace CiscoAnyconnectControl.UI.Utility
{
  internal class WindowsOSUtil : OSUtil
  {
    private const string AutostartKeyName = "CiscoAnyconnectControl";
    private NotifyIcon _trayIcon;

    private string CiscoAutostartKeyName => "Cisco AnyConnect Secure Mobility Agent for Windows";

    private string RegistryAutostartKey => "Software\\Microsoft\\Windows\\CurrentVersion\\Run";

    private string RegistryDisabledAutostartKey => "AutorunsDisabled";

    public override bool AddUiToSystemStart()
    {
      try
      {
        using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(this.RegistryAutostartKey, true))
        {
          if (registryKey != null)
          {
            registryKey.SetValue("CiscoAnyconnectControl", (object) ("\"" + CiscoAnyconnectControl.Utility.Util.FullAssemblyPath + "\" -tray -unsafeRunAsUser"));
            return true;
          }
          Trace.TraceError("Autostart key couldn't be opened!");
        }
      }
      catch (SecurityException ex)
      {
        CiscoAnyconnectControl.Utility.Util.TraceException("SecuriyException in AddUiToSystemStart:", (Exception) ex);
      }
      return false;
    }

    public override bool RemoveUiFromSystemStart()
    {
      try
      {
        using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(this.RegistryAutostartKey, true))
        {
          if (registryKey != null)
          {
            if (registryKey.GetValue("CiscoAnyconnectControl") != null)
              registryKey.DeleteValue("CiscoAnyconnectControl");
            return true;
          }
          Trace.TraceError("Autostart key couldn't be opened!");
        }
      }
      catch (SecurityException ex)
      {
        CiscoAnyconnectControl.Utility.Util.TraceException("SecuriyException in RemoveUiFromSystemStart:", (Exception) ex);
      }
      return false;
    }

    public override void ShowTrayIcon()
    {
      if (this._trayIcon == null)
        this._trayIcon = this.CreateTrayIcon();
      this._trayIcon.Visible = true;
    }

    private void _trayIcon_DoubleClick(object sender, EventArgs e) => this.OnTrayIconDoubleClick(sender, e);

    public override void HideTrayIcon()
    {
      if (this._trayIcon == null)
        return;
      this._trayIcon.Visible = false;
    }

    public override void DisableCiscoAutostart()
    {
      try
      {
        using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(this.RegistryAutostartKey, true))
        {
          if (registryKey != null)
          {
            if (registryKey.GetValue(this.CiscoAutostartKeyName) == null)
              ;
          }
          else
            Trace.TraceError("Autostart key couldn't be opened!");
        }
      }
      catch (SecurityException ex)
      {
        CiscoAnyconnectControl.Utility.Util.TraceException("SecuriyException in DisableCiscoAutostart:", (Exception) ex);
      }
    }

    public override void RestoreCiscoAutostart()
    {
      try
      {
        using (RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(this.RegistryAutostartKey, true))
        {
          if (registryKey1 != null)
          {
            using (RegistryKey registryKey2 = registryKey1.OpenSubKey(this.RegistryDisabledAutostartKey, true))
            {
              if (registryKey2 != null)
              {
                object obj = registryKey2.GetValue(this.CiscoAutostartKeyName);
                if (obj != null)
                {
                  registryKey1.SetValue(this.CiscoAutostartKeyName, obj);
                  registryKey2.DeleteValue(this.CiscoAutostartKeyName);
                }
                else
                  Trace.TraceError("Cannot find backup key. Nothing to restore from.");
              }
              else
                Trace.TraceError("Backup key couldn't be opened!");
            }
          }
          else
            Trace.TraceError("Autostart key couldn't be opened!");
        }
      }
      catch (SecurityException ex)
      {
        CiscoAnyconnectControl.Utility.Util.TraceException("SecuriyException in DisableCiscoAutostart:", (Exception) ex);
      }
    }

    public override bool IsCiscoAutostartEnabled()
    {
      try
      {
        using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(this.RegistryAutostartKey, true))
        {
          if (registryKey != null)
            return registryKey.GetValue(this.CiscoAutostartKeyName) != null;
          Trace.TraceError("Autostart key couldn't be opened!");
          return false;
        }
      }
      catch (SecurityException ex)
      {
        CiscoAnyconnectControl.Utility.Util.TraceException("SecuriyException in DisableCiscoAutostart:", (Exception) ex);
      }
      throw new Exception("Windows:IsCiscoAutostartEnabled ran to end without reaching a return.");
    }

    public override bool IsElevatedProcess()
    {
      try
      {
        using (Registry.LocalMachine.OpenSubKey("Software", true))
          return true;
      }
      catch (SecurityException ex)
      {
        CiscoAnyconnectControl.Utility.Util.TraceException("SecuriyException in DisableCiscoAutostart:", (Exception) ex);
        return false;
      }
    }

    private NotifyIcon CreateTrayIcon()
    {
      this._trayIcon = new NotifyIcon();
      this._trayIcon.DoubleClick += new EventHandler(this._trayIcon_DoubleClick);
      try
      {
        NotifyIcon trayIcon = this._trayIcon;
        Icon icon = new Icon(Assembly.GetExecutingAssembly().GetManifestResourceStream("CiscoAnyconnectControl.UI.Resources.trayIcon.ico") ?? throw new InvalidOperationException());
        trayIcon.Icon = icon;
      }
      catch (Exception ex)
      {
        CiscoAnyconnectControl.Utility.Util.TraceException("Error loading trayIcon:", ex);
      }
      ContextMenu contextMenu = new ContextMenu();
      contextMenu.MenuItems.Add(new MenuItem("Exit", new EventHandler(((OSUtil) this).OnTrayExitClick)));
      this._trayIcon.ContextMenu = contextMenu;
      return this._trayIcon;
    }
  }
}
