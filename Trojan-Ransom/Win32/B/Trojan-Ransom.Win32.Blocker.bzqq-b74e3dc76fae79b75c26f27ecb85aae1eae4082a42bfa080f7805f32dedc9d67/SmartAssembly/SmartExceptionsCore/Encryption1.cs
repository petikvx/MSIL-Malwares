// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.Encryption1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.IO;
using System.Security.Cryptography;

namespace SmartAssembly.SmartExceptionsCore
{
  internal class Encryption1
  {
    public static string ExceptionMessage;

    public static byte[] Encrypt(byte[] data, string xmlPublicKey)
    {
      RijndaelManaged rijndaelManaged;
      RSACryptoServiceProvider cryptoServiceProvider;
      MemoryStream memoryStream;
      CryptoStream cryptoStream;
      byte[] numArray1;
      byte[] buffer1;
      byte[] numArray2;
      byte[] numArray3;
      byte[] buffer2;
      byte[] buffer3;
      byte[] buffer4;
      byte[] numArray4;
      try
      {
        if (xmlPublicKey.StartsWith("{"))
        {
          Encryption1.ExceptionMessage = "ERR 2006: This template was not properly processed by SmartAssembly";
          return (byte[]) null;
        }
        rijndaelManaged = (RijndaelManaged) null;
        cryptoServiceProvider = (RSACryptoServiceProvider) null;
        memoryStream = (MemoryStream) null;
        cryptoStream = (CryptoStream) null;
        try
        {
          rijndaelManaged = new RijndaelManaged();
          cryptoServiceProvider = new RSACryptoServiceProvider();
          cryptoServiceProvider.FromXmlString(xmlPublicKey);
          rijndaelManaged.GenerateKey();
          rijndaelManaged.GenerateIV();
          numArray1 = new byte[48];
          Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray1, 0, 32);
          Buffer.BlockCopy((Array) rijndaelManaged.IV, 0, (Array) numArray1, 32, 16);
          memoryStream = new MemoryStream();
          try
          {
            buffer1 = cryptoServiceProvider.Encrypt(numArray1, false);
            memoryStream.WriteByte((byte) 1);
            memoryStream.WriteByte(Convert.ToByte(buffer1.Length / 8));
            memoryStream.Write(buffer1, 0, buffer1.Length);
          }
          catch (CryptographicException ex1)
          {
            try
            {
              numArray2 = new byte[16];
              numArray3 = new byte[16];
              Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray2, 0, 16);
              Buffer.BlockCopy((Array) rijndaelManaged.Key, 16, (Array) numArray3, 0, 16);
              buffer2 = cryptoServiceProvider.Encrypt(numArray2, false);
              buffer3 = cryptoServiceProvider.Encrypt(numArray3, false);
              buffer4 = cryptoServiceProvider.Encrypt(rijndaelManaged.IV, false);
              memoryStream.WriteByte((byte) 2);
              memoryStream.WriteByte(Convert.ToByte(buffer2.Length / 8));
              memoryStream.Write(buffer2, 0, buffer2.Length);
              memoryStream.Write(buffer3, 0, buffer3.Length);
              memoryStream.Write(buffer4, 0, buffer4.Length);
            }
            catch (CryptographicException ex2)
            {
              Encryption1.ExceptionMessage = "ERR 2005: The 128-bit encryption is not available on this computer. You need to install the High Encryption Pack in order to use the reporting feature.";
              numArray4 = (byte[]) null;
              goto label_19;
            }
          }
          cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
          cryptoStream.Write(data, 0, data.Length);
          cryptoStream.FlushFinalBlock();
          numArray4 = memoryStream.ToArray();
        }
        catch (Exception ex)
        {
          Encryption1.ExceptionMessage = "ERR 2004: " + ex.Message;
          numArray4 = (byte[]) null;
        }
        finally
        {
          rijndaelManaged?.Clear();
          cryptoServiceProvider?.Clear();
          memoryStream?.Close();
          cryptoStream?.Close();
        }
label_19:
        return numArray4;
      }
      catch (Exception ex)
      {
        object[] objects = new object[15]
        {
          (object) rijndaelManaged,
          (object) cryptoServiceProvider,
          (object) memoryStream,
          (object) cryptoStream,
          (object) numArray1,
          (object) buffer1,
          (object) numArray2,
          (object) numArray3,
          (object) buffer2,
          (object) buffer3,
          (object) buffer4,
          (object) ex,
          (object) numArray4,
          (object) data,
          (object) xmlPublicKey
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }
  }
}
