// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.Mazes
// Assembly: yDseEhTG5bnen4G, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C5C9DF7-D67E-851A-F932-4F9F562A97E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-a9fcf50b626f7a735761798ddff08a65e037fbde2ef6e57f066150543ebcb249.exe

using System;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class Mazes
  {
    public static bool[] Empty()
    {
label_4:
      int num1 = 31;
      int num2 = -25;
      bool[] flagArray1;
      while (true)
      {
        switch ((num2 ^ 51) + 47)
        {
          case 0:
            goto label_4;
          case 1:
            bool[] flagArray2;
            switch (num1)
            {
              case 47:
                flagArray1 = flagArray2;
                num1 = 28;
                goto label_1;
              case 48:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Empty);
                num1 = 30;
                goto label_1;
              case 49:
                flagArray2 = new bool[checked (Console.WindowWidth * Console.WindowHeight + 1)];
                num1 = 1;
                goto label_1;
              case 50:
              case 51:
                goto label_11;
              default:
                num2 = -30;
                continue;
            }
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6C9);
            num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(45);
            continue;
          case 3:
label_1:
            num1 ^= 46;
            break;
        }
        num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(53);
      }
label_11:
      return flagArray1;
    }

    public static bool[] Corners()
    {
label_7:
      int num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(44);
      int num2 = 6;
      bool[] flagArray1;
      while (true)
      {
        switch (num2 ^ 49)
        {
          case 52:
            int windowHeight;
            int num3;
            int windowWidth;
            int num4;
            bool[] flagArray2;
            int num5;
            int num6;
            switch (num1 + 47)
            {
              case 0:
                windowHeight = Console.WindowHeight;
                num1 = -24;
                goto label_1;
              case 1:
                num3 = checked ((int) Math.Round(unchecked ((double) windowHeight / 8.0)));
                num1 = -18;
                goto label_1;
              case 2:
                num4 = checked ((int) Math.Round(unchecked ((double) windowWidth / 12.0)));
                num1 = -48;
                goto label_1;
              case 3:
                num1 = -23;
                goto label_1;
              case 4:
              case 18:
                goto label_25;
              case 5:
                flagArray1 = flagArray2;
                num1 = -28;
                goto label_1;
              case 6:
                num1 = -45;
                goto label_1;
              case 7:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CB(flagArray2, true, num4, checked (windowHeight - num3 - num5 - 1), num6, num3);
                num1 = -26;
                goto label_1;
              case 8:
                flagArray2 = new bool[checked (windowWidth * windowHeight - 1 + 1)];
                num1 = -30;
                goto label_1;
              case 9:
                num6 = checked ((int) Math.Round(unchecked ((double) windowWidth / 8.0)));
                num1 = -29;
                goto label_1;
              case 10:
                num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(17);
                goto label_1;
              case 11:
                num1 = -47;
                goto label_1;
              case 12:
                windowWidth = Console.WindowWidth;
                num1 = -32;
                goto label_1;
              case 13:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Stars);
                num1 = -17;
                goto label_1;
              case 14:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CB(flagArray2, true, num4, num5, num6, num3);
                num1 = -19;
                goto label_1;
              case 15:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CB(flagArray2, true, checked (windowWidth - num6 - num4), num5, num6, num3);
                num1 = -27;
                goto label_1;
              case 16:
                num5 = checked ((int) Math.Round(unchecked ((double) windowHeight / 12.0)));
                num1 = -21;
                goto label_1;
              case 17:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CB(flagArray2, true, checked (windowWidth - num6 - num4), checked (windowHeight - num3 - num5 - 1), num6, num3);
                num1 = -22;
                goto label_1;
              default:
                num2 = 7;
                continue;
            }
          case 53:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.Empty);
            num2 = 4;
            continue;
          case 54:
            goto label_7;
          case 55:
label_1:
            num1 ^= 49;
            break;
        }
        num2 = 5;
      }
label_25:
      return flagArray1;
    }

    public static bool[] Boxes1()
    {
label_2:
      int num1 = 5;
label_1:
      bool[] flagArray1;
      int num2;
      int num3;
      int windowWidth;
      int windowHeight;
      bool[] flagArray2;
      while (true)
      {
        num1 ^= 53;
        switch (num1)
        {
          case 46:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (num2 * 2), num3, checked (num2 * 2), checked (num3 * 2));
            num1 = 7;
            continue;
          case 47:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (windowWidth - num2 * 2), num3, checked (windowWidth - num2 * 2), checked (num3 * 2));
            num1 = 14;
            continue;
          case 48:
            windowWidth = Console.WindowWidth;
            windowHeight = Console.WindowHeight;
            num1 = 2;
            continue;
          case 49:
            num3 = checked ((int) Math.Round(unchecked ((double) windowHeight / 5.0)));
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, num2, num3, checked (num2 * 2), num3);
            num1 = 1;
            continue;
          case 50:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (windowWidth - num2), num3, checked (windowWidth - num2 * 2), num3);
            num1 = 0;
            continue;
          case 51:
            goto label_9;
          case 52:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, num2, num3, num2, checked (num3 * 2));
            num1 = 27;
            continue;
          case 53:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (windowWidth - num2), num3, checked (windowWidth - num2), checked (num3 * 2));
            num1 = 26;
            continue;
          case 54:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (windowWidth - num2), checked (windowHeight - num3), checked (windowWidth - num2 * 2), checked (windowHeight - num3));
            num1 = 13;
            continue;
          case 55:
            flagArray1 = new bool[checked (windowWidth * windowHeight - 1 + 1)];
            num2 = checked ((int) Math.Round(unchecked ((double) windowWidth / 5.0)));
            num1 = 4;
            continue;
          case 56:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (windowWidth - num2), checked (windowHeight - num3), checked (windowWidth - num2), checked (windowHeight - num3 * 2));
            num1 = 6;
            continue;
          case 57:
            flagArray2 = flagArray1;
            num1 = 11;
            continue;
          case 58:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA);
            num1 = 15;
            continue;
          case 59:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, num2, checked (windowHeight - num3), checked (num2 * 2), checked (windowHeight - num3));
            num1 = 8;
            continue;
          case 60:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (num2 * 2), checked (windowHeight - num3), checked (num2 * 2), checked (windowHeight - num3 * 2));
            num1 = 3;
            continue;
          case 61:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, num2, checked (windowHeight - num3), num2, checked (windowHeight - num3 * 2));
            num1 = 9;
            continue;
          case 62:
            goto label_23;
          default:
            goto label_2;
        }
      }
label_9:
      int num4 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(23);
      while (true)
      {
        switch ((num4 ^ 51) + 44)
        {
          case 0:
            num1 = 12;
            num4 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(14);
            continue;
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Boxes1);
            num4 = -26;
            continue;
          case 2:
            Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (windowWidth - num2 * 2), checked (windowHeight - num3), checked (windowWidth - num2 * 2), checked (windowHeight - num3 * 2));
            num4 = -25;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_23:
      return flagArray2;
    }

    public static bool[] Boxes2()
    {
label_5:
      int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(16);
      int num2 = 2;
      bool[] flagArray1;
      while (true)
      {
        switch (num2 ^ 48)
        {
          case 47:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.\u002Ector);
            num2 = 31;
            continue;
          case 48:
            goto label_5;
          case 49:
            int windowHeight;
            int num3;
            bool[] flagArray2;
            int windowWidth;
            int num4;
            switch (num1 + 50)
            {
              case 0:
              case 12:
                goto label_19;
              case 1:
                num3 = checked ((int) Math.Round(unchecked ((double) windowHeight / 5.0)));
                num1 = -21;
                goto label_1;
              case 2:
                flagArray2 = Mazes.Boxes1();
                num1 = -25;
                goto label_1;
              case 3:
                flagArray1 = flagArray2;
                num1 = -3;
                goto label_1;
              case 4:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.Corners);
                num1 = -31;
                goto label_1;
              case 5:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray2, true, checked ((int) Math.Round(unchecked ((double) checked (windowWidth - num4) - (double) num4 / 2.0))), checked (num3 - 1), checked ((int) Math.Round(unchecked ((double) checked (windowWidth - num4) - (double) num4 / 2.0))), checked (windowHeight - num3 + 1));
                num1 = -28;
                goto label_1;
              case 6:
                num4 = checked ((int) Math.Round(unchecked ((double) windowWidth / 5.0)));
                num1 = -4;
                goto label_1;
              case 7:
                windowHeight = Console.WindowHeight;
                num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(29);
                goto label_1;
              case 8:
                num1 = -32;
                goto label_1;
              case 9:
                num1 = -30;
                goto label_1;
              case 10:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray2, true, checked ((int) Math.Round(unchecked ((double) num4 + (double) num4 / 2.0))), checked (num3 - 1), checked ((int) Math.Round(unchecked ((double) num4 + (double) num4 / 2.0))), checked (windowHeight - num3 + 1));
                num1 = -27;
                goto label_1;
              case 11:
                windowWidth = Console.WindowWidth;
                num1 = -26;
                goto label_1;
              default:
                num2 = 0;
                continue;
            }
          case 50:
label_1:
            num1 ^= 51;
            break;
        }
        num2 = 1;
      }
label_19:
      return flagArray1;
    }

    public static bool[] Stars()
    {
label_2:
      int num1 = 25;
      bool[] flagArray1;
      while (true)
      {
        int num2;
        int windowHeight;
        int windowWidth;
        int num3;
        int num4;
        switch (num1 ^ 52)
        {
          case 44:
label_3:
            if ((double) num2 >= (double) windowHeight / 2.0 - 1.0)
            {
              num1 = 1;
              continue;
            }
            num4 = 0;
            break;
          case 45:
            windowWidth = Console.WindowWidth;
            num1 = 27;
            continue;
          case 46:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Stars);
            num1 = 26;
            continue;
          case 47:
            windowHeight = Console.WindowHeight;
            num1 = 5;
            continue;
          case 48:
            if (num2 == 0)
            {
              num1 = 24;
              continue;
            }
            goto label_28;
          case 49:
            flagArray1 = new bool[checked (windowWidth * windowHeight - 1 + 1)];
            num1 = 6;
            continue;
          case 50:
            bool[] flagArray2 = new bool[9]
            {
              false,
              true,
              false,
              true,
              true,
              true,
              false,
              true,
              false
            };
            num1 = 0;
            continue;
          case 51:
            num2 = 6;
            num1 = 4;
            continue;
          case 52:
            num3 = checked (windowHeight - 6);
            num1 = 7;
            continue;
          case 53:
            num4 = (double) num2 <= (double) windowHeight / 2.0 + 1.0 ? 1 : 0;
            break;
          default:
            goto label_2;
        }
        if ((num4 == 0 ? 1 : 0) != 0)
        {
          int num5 = checked (windowWidth - 6);
          int num6 = 6;
          if (num6 != 0)
            goto label_26;
label_18:
          Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, checked (num6 - 1), num2, checked (num6 + 1), num2);
label_20:
          int num7 = 30;
          while (true)
          {
            switch (num7 ^ 45)
            {
              case 48:
                num7 = 25;
                continue;
              case 49:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA);
                num7 = 28;
                continue;
              case 50:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(flagArray1, true, num6, checked (num2 - 1), num6, checked (num2 + 1));
                num7 = 29;
                continue;
              case 51:
                num7 = 31;
                continue;
              case 52:
                goto label_25;
              default:
                goto label_20;
            }
          }
label_25:
          checked { num6 += 12; }
label_26:
          if (num6 <= num5)
            goto label_18;
        }
        checked { num2 += 12; }
label_28:
        if (num2 <= num3)
          goto label_3;
        else
          break;
      }
      return flagArray1;
    }

    private static void \uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6C9(
      bool[] _param0,
      bool _param1,
      int _param2,
      int _param3)
    {
      _param0[checked (_param3 * Console.WindowWidth + _param2)] = _param1;
    }

    private static void \uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(
      bool[] _param0,
      bool _param1,
      int _param2,
      int _param3,
      int _param4,
      int _param5)
    {
label_6:
      int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(17);
      int num2 = -3;
      while (true)
      {
        switch ((num2 ^ 46) + 48)
        {
          case 0:
            int num3;
            int num4;
            int num5;
            int x;
            int y;
            double a;
            switch (num1 + 50)
            {
              case 0:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.\u002Ector);
                num1 = -3;
                goto label_1;
              case 1:
                num1 = -21;
                goto label_1;
              case 2:
                num4 = num3;
                num1 = -26;
                goto label_1;
              case 3:
                if (num5 != 0)
                {
                  num1 = -27;
                  goto label_1;
                }
                else
                  break;
              case 4:
                num3 = checked ((int) Math.Round(Math.Sqrt(unchecked ((double) checked (x * x + y * y)))));
                num1 = -28;
                goto label_1;
              case 5:
                y = checked (_param5 - _param3);
                num1 = -31;
                goto label_1;
              case 6:
                x = checked (_param4 - _param2);
                num1 = -32;
                goto label_1;
              case 7:
                num5 = 0;
                num1 = -30;
                goto label_1;
              case 8:
label_17:
                Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6C9(_param0, _param1, checked ((int) Math.Round(unchecked ((double) _param2 + (double) num5 * Math.Cos(-a)))), checked ((int) Math.Round(unchecked ((double) _param3 + (double) num5 * Math.Sin(a)))));
                num1 = -4;
                goto label_1;
              case 9:
                a = Math.Atan2((double) y, (double) x);
                num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(29);
                goto label_1;
              case 10:
                checked { ++num5; }
                break;
              default:
                num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(7);
                continue;
            }
            if (num5 <= num4)
              goto label_17;
            else
              goto label_19;
          case 1:
            goto label_6;
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.Boxes2);
            num2 = -4;
            continue;
          case 3:
label_1:
            num1 ^= 51;
            break;
        }
        num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(43);
      }
label_19:;
    }

    private static void \uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CB(
      bool[] _param0,
      bool _param1,
      int _param2,
      int _param3,
      int _param4,
      int _param5)
    {
label_7:
      int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(19);
      int num2 = -29;
      int num3;
      int num4;
      while (true)
      {
        switch ((num2 ^ 51) + 51)
        {
          case 0:
            int num5;
            switch (num1 + 53)
            {
              case 0:
                num3 = num5;
                num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(45);
                goto label_1;
              case 1:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Boxes1);
                num1 = -29;
                goto label_1;
              case 2:
                num5 = _param3;
                num1 = -31;
                goto label_1;
              case 3:
                num4 = checked (_param3 + _param5);
                num1 = -28;
                goto label_1;
              case 4:
                goto label_14;
              default:
                num2 = -4;
                continue;
            }
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CB);
            num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(20);
            continue;
          case 2:
            goto label_7;
          case 3:
label_1:
            num1 ^= 47;
            break;
        }
        num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(43);
      }
label_14:
      while (num3 <= num4)
      {
        Mazes.\uE742\uF215\uECD3\uEF94\uEA43\uEED4\uEE56\uEED0\uF157\uF63C\uECD4\uF6CA(_param0, _param1, _param2, num3, checked (_param2 + _param4), num3);
        checked { ++num3; }
      }
    }
  }
}
