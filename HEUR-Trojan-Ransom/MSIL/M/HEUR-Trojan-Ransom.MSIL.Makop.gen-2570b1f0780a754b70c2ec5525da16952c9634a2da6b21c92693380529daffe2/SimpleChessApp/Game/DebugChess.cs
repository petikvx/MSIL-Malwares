// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: 生ث, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8221468-4DC3-4423-BEC3-5B04CD1AB276
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2570b1f0780a754b70c2ec5525da16952c9634a2da6b21c92693380529daffe2.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -1535011145;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -10327889)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -1169368557 ^ 1254590874;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * -1484069293 ^ -828788007;
            continue;
          case 2:
            this.b.WhiteCanCastleKingSide = false;
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1502604242 ^ -1209473971;
            continue;
          case 3:
            flag = x == Pieces.King;
            num1 = (int) num2 * 1117805153 ^ -341849467;
            continue;
          case 4:
            num1 = (int) num2 * 1335031580 ^ -1597917144;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * -1726223294 ^ -89232353;
            continue;
          case 7:
            this.b.DisableTurns = true;
            num1 = -225431678;
            continue;
          case 8:
            num1 = (int) num2 * 1937723541 ^ 82035935;
            continue;
          case 9:
            num1 = (int) num2 * 1158936249 ^ 121790424;
            continue;
          case 10:
            int num3 = !flag ? 942600733 : (num3 = 1043996072);
            num1 = num3 ^ (int) num2 * 2079394063;
            continue;
          case 11:
            goto label_1;
          case 12:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -996795826 ^ 706661468;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 298284986;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1644804238)) % 13U)
        {
          case 0:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 1173672155 ^ 1416767334;
            continue;
          case 1:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1196092512 ^ -149817241;
            continue;
          case 2:
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 49560286 ^ -1631432154;
            continue;
          case 3:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1518355051 ^ 201834780;
            continue;
          case 6:
            num1 = (int) num2 * 942954713 ^ -788778594;
            continue;
          case 7:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * -1072017821 ^ 1133985667;
            continue;
          case 8:
            num1 = (int) num2 * -787153076 ^ -389607294;
            continue;
          case 9:
            this.b.ClearBoard();
            num1 = (int) num2 * 569320058 ^ -226135338;
            continue;
          case 10:
            num1 = (int) num2 * 287617649 ^ -1911495986;
            continue;
          case 11:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 2049878747 ^ 504452402;
            continue;
          case 12:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -595949603 ^ -2081242176;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      this.b.lights.FindAllMoves();
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -473779326;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1701170245)) % 11U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1436400640 ^ 1558746821;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * 2096234277 ^ -1891823317;
            continue;
          case 2:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 1343387127 ^ -1026598180;
            continue;
          case 3:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -875900397 ^ -457810632;
            continue;
          case 4:
            num1 = (int) num2 * 1323264230 ^ -1086871325;
            continue;
          case 5:
            num1 = (int) num2 * -1299438469 ^ 1753150340;
            continue;
          case 6:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * -558137864 ^ -1160692525;
            continue;
          case 7:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 1129393173 ^ 792748164;
            continue;
          case 8:
            goto label_3;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * 107998303 ^ 1915671654;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = -1569202930;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -54435597)) % 12U)
        {
          case 0:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -287574639 ^ 339641753;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * -949206613 ^ -1827931279;
            continue;
          case 2:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 2105760595 ^ -1759687483;
            continue;
          case 3:
            num1 = (int) num2 * 2125106767 ^ 1333375132;
            continue;
          case 4:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1443337262 ^ -1093872624;
            continue;
          case 5:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -1336964589 ^ -1050580728;
            continue;
          case 6:
            this.b.addWhite(7, 0, Pieces.Rook);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1020779881 ^ -1159822326;
            continue;
          case 7:
            goto label_3;
          case 8:
            goto label_1;
          case 9:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1898898303 ^ 1240994664;
            continue;
          case 10:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1122764524 ^ 1434877548;
            continue;
          case 11:
            num1 = (int) num2 * 782634783 ^ -1761125545;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = -1742052615;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1116069427)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 1880457490 ^ -780578219;
            continue;
          case 1:
            num1 = (int) num2 * 612095484 ^ 801360726;
            continue;
          case 2:
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 1949399441 ^ 894998357;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.b.addBlack(0, 4, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1344095378 ^ -548319301;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.ClearBoard();
            num1 = (int) num2 * -1599918356 ^ -1785593380;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 318168497;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1082432462)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 1196146780 ^ -1358825452;
            continue;
          case 1:
            num1 = (int) num2 * 2094244812 ^ 1472659607;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 642368810 ^ 1248731020;
            continue;
          case 4:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * 812807972 ^ 1831197535;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.b.lights.FindAllMoves();
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 2071754516;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 479298580)) % 14U)
        {
          case 0:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 845013711 ^ 286327473;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * -1241287134 ^ 1930523099;
            continue;
          case 3:
            num1 = (int) num2 * 771790583 ^ 471647942;
            continue;
          case 4:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * 1662763246 ^ -885542919;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1685984133 ^ 1179273715;
            continue;
          case 7:
            num1 = (int) num2 * -837595941 ^ 1925390619;
            continue;
          case 8:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1007288353 ^ -1322764705;
            continue;
          case 9:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 1969765949 ^ -1707241643;
            continue;
          case 10:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 2141384832 ^ -33606462;
            continue;
          case 11:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 2139603653 ^ 876284675;
            continue;
          case 12:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -2128364187 ^ -1634025708;
            continue;
          case 13:
            this.b.addWhite(0, 0, Pieces.Rook);
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 91969119 ^ -1511839953;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }
  }
}
