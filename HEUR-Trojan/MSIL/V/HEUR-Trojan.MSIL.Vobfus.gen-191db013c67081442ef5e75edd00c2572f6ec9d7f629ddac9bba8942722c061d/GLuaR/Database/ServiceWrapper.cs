// Decompiled with JetBrains decompiler
// Type: GLuaR.Database.ServiceWrapper
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.States;
using Fireball.Docking;
using GLuaR.Importers;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace GLuaR.Database
{
  public class ServiceWrapper : DockableWindow
  {
    public static readonly Color composerWrapper;
    public static readonly Color m_DescriptorWrapper;
    public static readonly Color m_ErrorWrapper;
    public static readonly Color m_AdapterWrapper;
    public static readonly Color publisherWrapper;
    public static readonly Color _PoolWrapper;
    public static readonly Color _EventWrapper;
    public Control _AttributeWrapper;
    private IContainer m_ProcessWrapper;
    private ListStateStatus m_SpecificationWrapper;
    private ListStateStatus m_RegistryWrapper;
    private ListStateStatus setterWrapper;
    private ListStateStatus _TagWrapper;
    private ListStateStatus m_ServerWrapper;
    private ListStateStatus m_ProducerWrapper;
    private Label _RepositoryWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ServiceWrapper()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              ImporterMapper.InitAccount();
              num2 = 2;
              continue;
            case 1:
            case 2:
              goto label_7;
            case 3:
              this.IncludeRule();
              ((Control) this).BackColor = ServiceWrapper.composerWrapper;
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 5;
            case 5:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 3;
            case 6:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 3;
        continue;
label_7:
        this._AttributeWrapper = (Control) null;
        this.m_ProcessWrapper = (IContainer) null;
        num1 = 5;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PostRule(object spec, EventArgs attr) => this._AttributeWrapper = (Control) this;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalculateRule(ListStateStatus v)
    {
      this._RepositoryWrapper.Text = "Active Derma Control: " + v.Name;
      this._AttributeWrapper = (Control) v;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void Dispose(bool isdef)
    {
      int num1 = 3;
      if (ServiceWrapper.PushRegistry())
        goto label_7;
label_1:
      this.m_ProcessWrapper.Dispose();
label_2:
      // ISSUE: explicit non-virtual call
      __nonvirtual (((Form) this).Dispose(isdef));
      num1 = 5;
label_7:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            if (isdef)
            {
              if (!ServiceWrapper.QueryRegistry())
              {
                num1 = 4;
                continue;
              }
              goto label_11;
            }
            else
              goto label_4;
          case 1:
          case 4:
            goto label_3;
          case 2:
            goto label_1;
          case 5:
            goto label_6;
          default:
            num1 = 2;
            continue;
        }
      }
label_3:
      int num2 = this.m_ProcessWrapper != null ? 1 : 0;
      goto label_5;
label_4:
      num2 = 0;
label_5:
      if (num2 == 0)
        goto label_2;
      else
        goto label_1;
label_6:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IncludeRule()
    {
      int num1 = 13;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this._RepositoryWrapper.Size = new Size(336, 29);
            this._RepositoryWrapper.TabIndex = 6;
            this._RepositoryWrapper.Text = "Active Derma Control: None";
            ((ContainerControl) this).AutoScaleDimensions = new SizeF(6f, 13f);
            ((ContainerControl) this).AutoScaleMode = AutoScaleMode.Font;
            ((Form) this).ClientSize = new Size(678, 381);
            ((Control) this).Controls.Add((Control) this._RepositoryWrapper);
            ((Control) this).Controls.Add((Control) this.m_ProducerWrapper);
            ((Control) this).Controls.Add((Control) this.m_ServerWrapper);
            ((Control) this).Controls.Add((Control) this.setterWrapper);
            ((Control) this).Controls.Add((Control) this.m_RegistryWrapper);
            ((Control) this).Controls.Add((Control) this._TagWrapper);
            num2 = 11;
            break;
          case 1:
            this.m_SpecificationWrapper.BorderStyle = BorderStyle.Fixed3D;
            this.m_SpecificationWrapper.Location = new Point(206, 174);
            this.m_SpecificationWrapper.Name = "baseDermaControl2";
            this.m_SpecificationWrapper.Size = new Size(130, 33);
            this.m_SpecificationWrapper.TabIndex = 1;
            this.m_RegistryWrapper.BorderStyle = BorderStyle.Fixed3D;
            this.m_RegistryWrapper.Location = new Point(342, 213);
            this.m_RegistryWrapper.Name = "baseDermaControl3";
            num2 = 16;
            break;
          case 2:
          case 10:
            this.setterWrapper = new ListStateStatus();
            this._TagWrapper = new ListStateStatus();
            this.m_ServerWrapper = new ListStateStatus();
            this.m_ProducerWrapper = new ListStateStatus();
            this._RepositoryWrapper = new Label();
            ((Control) this).SuspendLayout();
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto case 18;
          case 3:
            this.m_ProducerWrapper.TabIndex = 5;
            num2 = 18;
            break;
          case 4:
            this.m_ServerWrapper.BorderStyle = BorderStyle.Fixed3D;
            this.m_ServerWrapper.Location = new Point(342, 252);
            this.m_ServerWrapper.Name = "baseDermaControl5";
            this.m_ServerWrapper.Size = new Size(130, 33);
            num1 = 9;
            continue;
          case 5:
            this.m_RegistryWrapper = new ListStateStatus();
            int num3 = 10;
            num1 = ServiceWrapper.QueryRegistry() ? num3 : num3;
            continue;
          case 6:
            this._TagWrapper.TabIndex = 1;
            num1 = 4;
            continue;
          case 7:
            ((Form) this).ShowIcon = false;
            ((Form) this).ShowInTaskbar = false;
            this.TabText = "[ Design ]";
            ((Control) this).Text = "[ Design ]";
            ((Form) this).Activated += new EventHandler(this.PostRule);
            ((Control) this).ResumeLayout(false);
            num2 = 17;
            break;
          case 8:
          case 9:
            this.m_ServerWrapper.TabIndex = 4;
            goto case 14;
          case 11:
            ((Control) this).Controls.Add((Control) this.m_SpecificationWrapper);
            this.DockableAreas = (DockAreas) 32;
            ((Control) this).DoubleBuffered = true;
            ((Form) this).FormBorderStyle = FormBorderStyle.FixedSingle;
            ((Control) this).Name = "Design";
            num2 = 7;
            break;
          case 12:
            this.setterWrapper.BorderStyle = BorderStyle.Fixed3D;
            this.setterWrapper.Location = new Point(342, 174);
            this.setterWrapper.Name = "baseDermaControl4";
            this.setterWrapper.Size = new Size(130, 33);
            this.setterWrapper.TabIndex = 3;
            this._TagWrapper.BorderStyle = BorderStyle.Fixed3D;
            this._TagWrapper.Location = new Point(206, 135);
            this._TagWrapper.Name = "baseDermaControl1";
            this._TagWrapper.Size = new Size(130, 33);
            num2 = 6;
            break;
          case 13:
            this.m_SpecificationWrapper = new ListStateStatus();
            num1 = 5;
            continue;
          case 14:
            this.m_ProducerWrapper.BorderStyle = BorderStyle.Fixed3D;
            this.m_ProducerWrapper.Location = new Point(206, 96);
            this.m_ProducerWrapper.Name = "baseDermaControl6";
            this.m_ProducerWrapper.Size = new Size(130, 33);
            num2 = 3;
            break;
          case 15:
            this._RepositoryWrapper.Location = new Point(12, 9);
            this._RepositoryWrapper.Name = "label1";
            num2 = 0;
            break;
          case 16:
            this.m_RegistryWrapper.Size = new Size(130, 33);
            this.m_RegistryWrapper.TabIndex = 2;
            num1 = 12;
            continue;
          case 17:
            ((Control) this).PerformLayout();
            num2 = 19;
            break;
          case 18:
            this._RepositoryWrapper.AutoSize = true;
            this._RepositoryWrapper.Font = new Font("Microsoft Sans Serif", 18f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
            num2 = 15;
            break;
          case 19:
            goto label_7;
          default:
            num2 = 14;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ServiceWrapper()
    {
      int num1 = 1;
      if (ServiceWrapper.PushRegistry())
        goto label_3;
label_1:
      ServiceWrapper.publisherWrapper = Color.FromArgb((int) byte.MaxValue, 130, 130, 130);
      goto label_7;
label_3:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            ImporterMapper.InitAccount();
            num2 = 5;
            break;
          case 2:
          case 3:
            goto label_7;
          case 4:
            goto label_1;
          case 5:
            ServiceWrapper.composerWrapper = Color.FromArgb((int) byte.MaxValue, 90, 90, 90);
            ServiceWrapper.m_DescriptorWrapper = Color.FromArgb(240, 60, 60, 60);
            ServiceWrapper.m_ErrorWrapper = Color.FromArgb((int) byte.MaxValue, 50, 50, 50);
            ServiceWrapper.m_AdapterWrapper = Color.FromArgb((int) byte.MaxValue, 110, 110, 110);
            num1 = 4;
            continue;
          case 6:
            goto label_9;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_9:
      return;
label_7:
      ServiceWrapper._PoolWrapper = Color.FromArgb((int) byte.MaxValue, 110, 150, 200);
      ServiceWrapper._EventWrapper = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, 200, 100);
      if (false)
        return;
      num1 = 6;
      goto label_3;
    }

    internal static bool PushRegistry() => true;

    internal static bool QueryRegistry() => false;
  }
}
