// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessPiece
// Assembly: 0的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D533F7C-4FE9-47C1-AE3D-12E223DC01C7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7b4b43d22be88ed3b2054ef7090ebb7b44ecc03dffa6c32e578002c9a12cbea8.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class ChessPiece
  {
    public int Id;
    public Pieces Kind;
    public PieceColor Color;
    public Square Home;
    public bool Passant;
    public Square Current;
    private static int idd = 0;

    public ChessPiece(Square h, Pieces p, PieceColor c)
    {
label_1:
      int num1 = -162846176;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -963213329)) % 6U)
        {
          case 0:
            this.Kind = p;
            this.Color = c;
            num1 = (int) num2 * -1632500237 ^ -862121369;
            continue;
          case 1:
            num1 = (int) num2 * -692868685 ^ -189512137;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.Id = ChessPiece.idd++;
            num1 = (int) num2 * 1319852667 ^ -584122672;
            continue;
          case 5:
            num1 = (int) num2 * -896648763 ^ -1470770377;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.Current = this.Home = h;
    }

    public ChessPiece(Pieces p, PieceColor c)
    {
label_1:
      int num1 = -1409611412;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1063576467)) % 4U)
        {
          case 0:
            this.Kind = p;
            num1 = (int) num2 * 505179036 ^ -351769245;
            continue;
          case 1:
            this.Id = ChessPiece.idd++;
            num1 = (int) num2 * 45124601 ^ -852996892;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.Color = c;
    }

    public string SpecialName
    {
      get
      {
        string specialName = ChessPiece.\u200E‎‎‮‭⁬‍⁫⁯‪⁭‍‌‮​‪‏⁪‬‫⁯⁫‬⁬⁫⁯⁮‫‪⁯‏⁮‎‌‎‎‍⁬⁬‪‮(\u003CModule\u003E.\u200E‫​⁯⁮‎⁬‎⁬⁪‍⁪‬⁫‬‌‮⁮‍⁪⁮⁮‎⁭‌⁮​⁭‌⁭⁭⁬⁮‎⁯‭⁭‍‏⁫‮<string>(1547588633U), (object) this.Current.Name, (object) this.Kind);
label_1:
        int num1 = -909530472;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -413733891)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 2142556904 ^ 1238530289;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    static string \u200E‎‎‮‭⁬‍⁫⁯‪⁭‍‌‮​‪‏⁪‬‫⁯⁫‬⁬⁫⁯⁮‫‪⁯‏⁮‎‌‎‎‍⁬⁬‪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2)
    {
      return string.Format(obj0, obj1, obj2);
    }
  }
}
