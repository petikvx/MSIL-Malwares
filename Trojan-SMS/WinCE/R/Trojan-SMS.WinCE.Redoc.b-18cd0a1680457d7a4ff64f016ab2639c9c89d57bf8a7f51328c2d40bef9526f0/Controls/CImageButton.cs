// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CImageButton
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CImageButton : CControls
  {
    public CImageButton(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedImageButton control = (CEnhancedImageButton) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "image":
          if (assign)
          {
            RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn.place;
            control.MyBitmap = runReturn.vString.Length != 0 ? this.CRunner.BitmapFromString(runReturn.vString) : (Bitmap) null;
            control.Refresh();
            return new MethodReturn(place);
          }
          this.CRunner.returnObject = (object) control.ReturnImage;
          return new MethodReturn(place, "~" + control.name + ".", 0.0);
        case "mode":
          if (!assign)
            return new MethodReturn(place, control.imageMode, 0.0);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          control.imageMode = runReturn1.vString;
          control.Refresh();
          return new MethodReturn(place);
        case "transparent":
          if (!assign)
            return new MethodReturn(place, control.Transparent.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn2.place;
          control.Transparent = bool.Parse(runReturn2.vString.ToLower(CRunner.cul));
          control.Refresh();
          return new MethodReturn(place);
        case "text":
          if (!assign)
            return new MethodReturn(place, control.Text, 0.0);
          RunReturn runReturn3 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn3.place;
          control.Text = runReturn3.vString;
          control.Refresh();
          return new MethodReturn(place);
        default:
          return this.CRunner.htSharedProperties.Contains((object) str) ? this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals) : new MethodReturn(place);
      }
    }

    private void AddEvents(CEnhancedImageButton btn)
    {
      if (this.CRunner.htSubs.Contains((object) (btn.name + "_click")))
        btn.Click += new EventHandler(this.Click);
      if (this.CRunner.htSubs.Contains((object) (btn.name + "_buttondown")))
        btn.MouseDown += new MouseEventHandler(this._MouseDown);
      if (!this.CRunner.htSubs.Contains((object) (btn.name + "_buttonup")))
        return;
      btn.MouseUp += new MouseEventHandler(this._MouseUp);
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedImageButton cenhancedImageButton = (CEnhancedImageButton) sender;
      switch (eventName)
      {
        case "click":
          cenhancedImageButton.Click += new EventHandler(this.Click);
          break;
      }
    }

    private void _MouseDown(object sender, MouseEventArgs e)
    {
      CEnhancedImageButton cenhancedImageButton = (CEnhancedImageButton) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedImageButton.name + "_buttondown")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedImageButton.name
        }
      });
    }

    private void _MouseUp(object sender, MouseEventArgs e)
    {
      CEnhancedImageButton cenhancedImageButton = (CEnhancedImageButton) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedImageButton.name + "_buttonup")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedImageButton.name
        }
      });
    }

    private void Click(object sender, EventArgs e)
    {
      CEnhancedImageButton cenhancedImageButton = (CEnhancedImageButton) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedImageButton.name + "_click")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedImageButton.name
        }
      });
    }

    public void ShortAdd(string s)
    {
      CEnhancedImageButton cenhancedImageButton = new CEnhancedImageButton();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      string Text;
      Color BackColor;
      Color ForeColor;
      string ImageMode;
      string picFile;
      bool transparent;
      bool myEnabled;
      bool myVisible;
      float FontSize;
      CBuildDesigner.ImageButtonGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out Text, out BackColor, out ForeColor, out ImageMode, out picFile, out transparent, out myEnabled, out myVisible, out FontSize);
      cenhancedImageButton.name = Name.ToLower(CRunner.cul);
      cenhancedImageButton.Left = Left;
      cenhancedImageButton.Top = Top;
      cenhancedImageButton.Width = Width;
      cenhancedImageButton.Height = Height;
      cenhancedImageButton.Text = Text;
      cenhancedImageButton.BackColor = BackColor;
      cenhancedImageButton.ForeColor = ForeColor;
      cenhancedImageButton.Enabled = myEnabled;
      cenhancedImageButton.Visible = myVisible;
      cenhancedImageButton.imageMode = ImageMode;
      cenhancedImageButton.Transparent = transparent;
      if (picFile.Length > 0)
        cenhancedImageButton.MyBitmap = this.CRunner.BitmapFromString(picFile);
      cenhancedImageButton.Font = new Font(cenhancedImageButton.Font.Name, FontSize, cenhancedImageButton.Font.Style);
      this.CRunner.htControls.Add((object) cenhancedImageButton.name, (object) new WrapControl((object) cenhancedImageButton, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedImageButton);
      this.AddEvents(cenhancedImageButton);
    }

    public MethodReturn addImageButton(Place place, ref Locals locals)
    {
      Color black = Color.Black;
      ++place.WordI;
      Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string lower2 = runReturn1.vString.ToLower(CRunner.cul);
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble1 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble3 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble4 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn2.place;
      string vString = runReturn2.vString;
      Color color = Color.FromArgb(-2830136);
      ++place.WordI;
      CEnhancedImageButton cenhancedImageButton = new CEnhancedImageButton();
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) cenhancedImageButton, (CControls) this));
      cenhancedImageButton.name = lower2;
      cenhancedImageButton.Left = vDouble1;
      cenhancedImageButton.Top = vDouble2;
      cenhancedImageButton.Height = vDouble4;
      cenhancedImageButton.Width = vDouble3;
      cenhancedImageButton.Text = vString;
      cenhancedImageButton.BackColor = color;
      cenhancedImageButton.ForeColor = black;
      cenhancedImageButton.Visible = true;
      cenhancedImageButton.imageMode = "cnormalimage";
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) cenhancedImageButton);
      this.AddEvents(cenhancedImageButton);
      return new MethodReturn(place);
    }
  }
}
