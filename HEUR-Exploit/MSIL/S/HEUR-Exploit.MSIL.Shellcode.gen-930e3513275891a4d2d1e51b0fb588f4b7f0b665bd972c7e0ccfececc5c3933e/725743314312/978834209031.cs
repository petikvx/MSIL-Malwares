// Decompiled with JetBrains decompiler
// Type: 725743314312.978834209031
// Assembly: 903211523809, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 9299602E-5CAC-472E-8784-954A0E70F0DC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-930e3513275891a4d2d1e51b0fb588f4b7f0b665bd972c7e0ccfececc5c3933e.exe

using \u003112706448168;
using \u003118884264626;
using \u003384559060729;
using \u003725743314312;
using \u003748518633509;
using \u003794378439523;
using \u003911478404797;
using Microsoft.VisualStudio.Shell.TableManager;
using Microsoft.VisualStudio.TaskRunnerExplorer;
using Microsoft.WebTools.Shared.VS.Services;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;

namespace \u003725743314312
{
  internal abstract class \u003978834209031 : ITaskRunnerOutputListener, IDisposable
  {
    private readonly \u003437254268646 \u003002224114314;
    private Stopwatch \u003688949809243;
    private ITaskRunnerOutputParser \u003607961956989;

    private IErrorListProvider \u003544930715724 { get; set; }

    protected internal \u003978834209031(
      IErrorListProvider errorProvider,
      IProjectEventServices ProjectEventServices,
      ITaskRunnerOutputParser outputParser)
    {
      ProjectEventServices.ProjectLoaded += new EventHandler<ProjectEventArgs>(this.\u003197311512743);
      ProjectEventServices.ProjectClosing += new EventHandler<ProjectEventArgs>(this.\u003109523542965);
      ProjectEventServices.SolutionClosing += new EventHandler(this.\u003137092064427);
      this.\u003544930715724 = errorProvider;
      this.\u003002224114314 = new \u003437254268646(this.\u003544930715724);
      this.\u003607961956989 = outputParser;
      this.\u003688949809243 = new Stopwatch();
      this.\u003448163805464();
    }

    private void \u003137092064427(object _param1, EventArgs _param2) => this.\u003633352895234();

    private void \u003197311512743(object _param1, ProjectEventArgs _param2) => this.\u003448163805464();

    private void \u003109523542965(object _param1, ProjectEventArgs _param2) => this.\u003633352895234();

    public void \u003448163805464()
    {
      this.\u003544930715724.AddErrorListFactory((ITableEntriesSnapshotFactory) this.\u003002224114314);
      this.\u003688949809243.Start();
    }

    internal void \u003286359863635() => this.\u003544930715724.UpdateAllSinks((ITableEntriesSnapshotFactory) this.\u003002224114314);

    public IEnumerable<string> \u003344389715989(
      ITaskRunnerNode _param1,
      string _param2,
      IEnumerable<string> _param3)
    {
      bool flag = false;
      if (this.\u003688949809243.ElapsedMilliseconds > 1000L)
      {
        this.\u003002224114314.\u003336906427504(_param1);
        flag = true;
      }
      \u003787271880604 output = this.\u003607961956989.ParseOutput(_param3);
      if (output != null && output.\u003336514195501.Count > 0)
      {
        \u003570865666525 obj = this.\u003002224114314.\u003253781145785 as \u003570865666525;
        List<IErrorListItem> errorListItemList = \u003978834209031.\u003194846674866(_param1, _param2, output, obj);
        if (errorListItemList.Count > 0)
        {
          this.\u003002224114314.\u003688767803003(errorListItemList);
          flag = true;
        }
      }
      if (flag)
        this.\u003286359863635();
      this.\u003688949809243.Reset();
      this.\u003688949809243.Start();
      return output.\u003051045864808;
    }

    private static List<IErrorListItem> \u003194846674866(
      ITaskRunnerNode _param0,
      string _param1,
      \u003787271880604 _param2,
      \u003570865666525 _param3)
    {
      List<IErrorListItem> errorListItemList = new List<IErrorListItem>();
      foreach (IErrorListItem errorListItem in _param2.\u003336514195501)
      {
        errorListItem.ProjectName = _param1;
        errorListItem.ErrorSource = (object) _param0.Name;
        errorListItem.Filename = Path.Combine(_param0.Command.WorkingDirectory, errorListItem.Filename);
        errorListItem.Command = _param0.Command;
        if (!_param3.\u003329942715561.Contains(errorListItem))
          errorListItemList.Add(errorListItem);
      }
      return errorListItemList;
    }

    public void \u003633352895234() => this.\u003002224114314.\u003552970296991();

    public void \u003415364993441()
    {
      if (this.\u003544930715724 != null)
        this.\u003544930715724.RemoveErrorListFactory((ITableEntriesSnapshotFactory) this.\u003002224114314);
      this.\u003002224114314.Dispose();
    }
  }
}
