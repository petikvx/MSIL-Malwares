// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.SystemProfileTags.DomainInfoTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.SystemProfileInfo;
using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags.SystemProfileTags
{
  public class DomainInfoTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 9;
        int num1 = -2810;
        int num2 = num1;
        num1 = -2810;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("\uD9BC킾곀ꋂ계꧆", A_1);
          default:
            goto case 1;
        }
      }
    }

    public DomainInfo Domain
    {
      get
      {
        int num1 = -26432;
        int num2 = num1;
        num1 = -26432;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 99;
        int num2 = num1;
        num1 = 99;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public DomainInfoTag(DomainInfo domain, bool omitpii)
    {
      int A_1 = 16;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (omitpii)
      {
        domain.Name = (string) null;
        domain.Role = (string) null;
      }
      this.AddOptionalAttribute(Utils.a("\uAAC3\uA7C5ꗇ꿉", A_1), domain.Name);
      this.AddOptionalAttribute(Utils.a("뛃꧅\uA4C7꿉", A_1), domain.Role);
      this.AddAttribute(Utils.a("꧃ꏅꗇ\uA8C9꧋볍", A_1), domain.MemberOf.ToString().ToLowerInvariant());
      this.Domain = domain;
    }
  }
}
