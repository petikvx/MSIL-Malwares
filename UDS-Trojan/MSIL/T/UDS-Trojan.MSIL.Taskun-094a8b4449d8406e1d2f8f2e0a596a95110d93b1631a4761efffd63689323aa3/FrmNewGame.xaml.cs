// Decompiled with JetBrains decompiler
// Type: SpiritIslandCompanion.FrmNewGame
// Assembly: ToBase64Transf, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6B961B69-7A46-441C-8970-EA733FFAA49A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan.MSIL.Taskun-094a8b4449d8406e1d2f8f2e0a596a95110d93b1631a4761efffd63689323aa3.exe

using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;

namespace SpiritIslandCompanion
{
  public partial class FrmNewGame : Window, INotifyPropertyChanged, IComponentConnector
  {
    private ObservableCollection<AdversaryCard> _adversaries = new ObservableCollection<AdversaryCard>();
    private AdversaryCard _selectedAdversary;
    internal ComboBox lbAdversaries;
    internal Label lblAdvLevel;
    internal Slider slAdversaryLevel;
    internal Button btnOK;
    internal Button btnCancel;
    internal Slider slPlayers;
    internal Label lbPlayers;
    private bool _contentLoaded;

    public event PropertyChangedEventHandler PropertyChanged;

    private void NotifyPropertyChanged(string propertyName = null)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    public int PlayerCount => (int) this.slPlayers.Value;

    public AdversaryCard ChosenAdversary => this.SelectedAdversary;

    public int AdversaryLevel => (int) this.slAdversaryLevel.Value;

    public ObservableCollection<AdversaryCard> MyAdversaryList
    {
      get => this._adversaries;
      set => this._adversaries = value;
    }

    public AdversaryCard SelectedAdversary
    {
      get => this._selectedAdversary;
      set
      {
        this._selectedAdversary = value;
        this.NotifyPropertyChanged();
      }
    }

    public FrmNewGame()
    {
      this.InitializeComponent();
      this.DataContext = (object) this;
    }

    private void PopulateAdversaryList()
    {
      foreach (AdversaryCard myAdversary in (Collection<AdversaryCard>) this.MyAdversaryList)
        this.lbAdversaries.Items.Add((object) myAdversary.Kingdom);
    }

    private void btnCancel_Click(object sender, RoutedEventArgs e) => this.Close();

    private void btnOK_Click(object sender, RoutedEventArgs e) => this.DialogResult = new bool?(true);

    private void lbAdversaries_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      if (this.lbAdversaries.SelectedIndex < 0 || this.lbAdversaries.SelectedIndex >= this.MyAdversaryList.Count)
        return;
      this.SelectedAdversary = this.MyAdversaryList[this.lbAdversaries.SelectedIndex];
      if (this.lbAdversaries.SelectedIndex == 0)
        this.slAdversaryLevel.IsEnabled = false;
      else
        this.slAdversaryLevel.IsEnabled = true;
    }

    private void Image_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
    {
      if (e.ChangedButton != MouseButton.Left || e.ClickCount != 2 || this.SelectedAdversary == null)
        return;
      new FrmCardView()
      {
        ShowCard = this.SelectedAdversary.Source
      }.ShowDialog();
    }

    private void Window_Loaded(object sender, RoutedEventArgs e)
    {
      this.PopulateAdversaryList();
      this.lbAdversaries.SelectedIndex = 0;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ToBase64Transf;component/frmnewgame.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          this.lbAdversaries = (ComboBox) target;
          this.lbAdversaries.SelectionChanged += new SelectionChangedEventHandler(this.lbAdversaries_SelectionChanged);
          break;
        case 3:
          this.lblAdvLevel = (Label) target;
          break;
        case 4:
          this.slAdversaryLevel = (Slider) target;
          break;
        case 5:
          ((UIElement) target).MouseLeftButtonDown += new MouseButtonEventHandler(this.Image_MouseLeftButtonDown);
          break;
        case 6:
          this.btnOK = (Button) target;
          this.btnOK.Click += new RoutedEventHandler(this.btnOK_Click);
          break;
        case 7:
          this.btnCancel = (Button) target;
          this.btnCancel.Click += new RoutedEventHandler(this.btnCancel_Click);
          break;
        case 8:
          this.slPlayers = (Slider) target;
          break;
        case 9:
          this.lbPlayers = (Label) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
