// Decompiled with JetBrains decompiler
// Type: Path_Finder.DataTypes.Coordinates
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using System;

namespace Path_Finder.DataTypes
{
  public class Coordinates
  {
    private int xCoord;
    private int yCoord;

    public Coordinates()
    {
      this.xCoord = -1;
      this.yCoord = -1;
    }

    public Coordinates(int newXCoord, int newYCoord)
    {
      if (newXCoord >= 0 && newXCoord <= 800)
      {
        this.xCoord = newXCoord;
      }
      else
      {
        this.xCoord = -1;
        Console.WriteLine("ERROR! Coordinate X must be in the range [0, 800]. X coordinate is initialized with value -1.");
      }
      if (newYCoord >= 0 && newYCoord <= 800)
      {
        this.yCoord = newYCoord;
      }
      else
      {
        this.yCoord = -1;
        Console.WriteLine("ERROR! Coordinate Y must be in the range [0, 800]. Y coordinate is initialized with value -1.");
      }
    }

    public Coordinates(Coordinates coordinates)
    {
      this.xCoord = coordinates.getX();
      this.yCoord = coordinates.getY();
    }

    public int getX() => this.xCoord;

    public int getY() => this.yCoord;

    public void setX(int newXCoord)
    {
      if (newXCoord >= 0 && newXCoord <= 800)
        this.xCoord = newXCoord;
      else
        Console.WriteLine("ERROR! Coordinate X must be in the range [0, 800].");
    }

    public void setY(int newYCoord)
    {
      if (newYCoord >= 0 && newYCoord <= 800)
        this.yCoord = newYCoord;
      else
        Console.WriteLine("ERROR! Coordinate Y must be in the range [0, 800].");
    }

    public override int GetHashCode() => this.xCoord.GetHashCode() ^ this.yCoord.GetHashCode();

    public override bool Equals(object obj) => this.Equals(obj as Coordinates);

    public bool Equals(Coordinates coord) => coord != null && this.xCoord == coord.xCoord && this.yCoord == coord.yCoord;

    public override string ToString() => string.Format("X = {0}, Y = {1}", (object) this.xCoord, (object) this.yCoord);
  }
}
