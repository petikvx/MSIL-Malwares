// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: cDisplayClass1, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 0E93EC79-9513-4BD1-8651-98C7CADA4D7F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a7264014555068294029d5d9ceb9ee717c4d2bf523330c30cee18f18e55a0b5b.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = -1964725166;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -469331987)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 102190235 ^ 58615178;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -2008293393;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -530389439)) % 5U)
        {
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * 394203925 ^ 1071344007;
            continue;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 1970245558 ^ -1476300666;
            continue;
          case 3:
            num1 = (int) num2 * 1272303565 ^ 1245103865;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1921723078;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 380778620)) % 10U)
        {
          case 1:
            flag = aIndex < numArray.Length;
            num1 = 1820100376;
            continue;
          case 2:
            num1 = (int) num2 * 857011728 ^ 248105921;
            continue;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * -24601448 ^ -1535150073;
            continue;
          case 4:
            int num3 = !flag ? 818611527 : (num3 = 306552853);
            num1 = num3 ^ (int) num2 * 382662304;
            continue;
          case 5:
            num1 = (int) num2 * 1505395374 ^ 1771161962;
            continue;
          case 6:
            aIndex = 0;
            num1 = (int) num2 * -364592049 ^ -1347025838;
            continue;
          case 7:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 459621378;
            continue;
          case 8:
            ++aIndex;
            num1 = (int) num2 * 96998583 ^ 31619411;
            continue;
          case 9:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_11:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -76899520;
      int num2;
      List<Card> cardList;
      int aIndex1;
      int aIndex2;
      bool flag1;
      bool flag2;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1371093850)) % 21U)
        {
          case 0:
            jsonNode = json[aIndex1];
            aIndex2 = 0;
            num1 = (int) num3 * -443959906 ^ -434797637;
            continue;
          case 1:
            flag1 = aIndex2 < maxImpact * 2;
            num1 = -907942842;
            continue;
          case 2:
            num1 = (int) num3 * 1744208052 ^ 333386814;
            continue;
          case 3:
            ++num2;
            num1 = (int) num3 * -1248825848 ^ 1776252883;
            continue;
          case 4:
            int num4;
            num1 = num4 = aIndex1 < count ? -2060849842 : (num4 = -44263091);
            continue;
          case 5:
            int num5;
            num1 = num5 = num2 >= jsonNode[aIndex2].AsInt ? -697414361 : (num5 = -1241548817);
            continue;
          case 6:
            num1 = (int) num3 * 1173905656 ^ -1592567438;
            continue;
          case 7:
            ++aIndex1;
            num1 = (int) num3 * -1888433940 ^ 1370969600;
            continue;
          case 9:
            num1 = (int) num3 * -458883699 ^ 1684985626;
            continue;
          case 10:
            num1 = -1611393445;
            continue;
          case 11:
            num1 = (int) num3 * 145167969 ^ -1284590357;
            continue;
          case 12:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -975225429;
            continue;
          case 13:
            cardList = new List<Card>();
            aIndex1 = 0;
            num1 = (int) num3 * 800322432 ^ 2047340861;
            continue;
          case 14:
            array = cardList.ToArray();
            num1 = (int) num3 * -1372966765 ^ 259739927;
            continue;
          case 15:
            num1 = (int) num3 * 1339449775 ^ -106021503;
            continue;
          case 16:
            goto label_1;
          case 17:
            flag2 = aIndex2 < maxImpact;
            num1 = -761713040;
            continue;
          case 18:
            num2 = 0;
            num1 = -1055419917;
            continue;
          case 19:
            int num6 = !flag1 ? -1174487685 : (num6 = -192796649);
            num1 = num6 ^ (int) num3 * -568842529;
            continue;
          case 20:
            ++aIndex2;
            num1 = (int) num3 * -915814887 ^ 1725767955;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 232840229;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1732800952)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Rules.\u202C⁮‬‎⁯‌‍‮​‌‍‎⁭⁫‌‍⁬​‪⁮‭⁫‌⁬⁯⁯‭‭‬⁮‪⁫⁬⁬‪‬⁬⁯‍‏‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 651699077 ^ 1478221583;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 1187455246;
      string str1;
      string str2;
      Card[] cards;
      int index;
      int num2;
      Card card1;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1272804658)) % 16U)
        {
          case 0:
            card1 = cards[index];
            num1 = 1665250822;
            continue;
          case 1:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202D⁯‌‍‪‫‮⁭‪‪⁫⁭‌⁪⁫​‍⁫⁫‌‬‪‍‪‮⁪‮⁬‍​⁪⁭‮⁯⁯‫⁯‌‭‮((object) card2) : (string) null;
            str1 = Rules.\u202E​‎‏⁫‬‭‫​‪‪‫‪‪⁬‭‭‮⁯⁪⁪‍⁬‏‫⁬‌‎‏⁮‭‬‏⁭‍‪⁬⁭‭‮(str3, str4, " ");
            num1 = 1532808189;
            continue;
          case 2:
            goto label_1;
          case 3:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1927120669 ^ -1807018543;
            continue;
          case 4:
            num1 = (int) num3 * -1467670865 ^ -517967914;
            continue;
          case 5:
            num1 = (int) num3 * 827162837 ^ -353623338;
            continue;
          case 6:
            int num4;
            num1 = num4 = index >= cards.Length ? 2031965877 : (num4 = 750037778);
            continue;
          case 7:
            str2 = Rules.\u202E‏‫‬‌‭⁪‬⁯‪​‏‭⁪‭⁬‭‍‬‭‮⁯‏⁭‫‭⁯‌⁫‭⁯‌‭⁫⁬‮‏‍⁫⁮‮(str1, "\n]");
            num1 = (int) num3 * -1508727266 ^ -1906973739;
            continue;
          case 8:
            int num5 = num2 == card1.Type ? 899224307 : (num5 = 1208270924);
            num1 = num5 ^ (int) num3 * -1613218596;
            continue;
          case 9:
            num2 = 0;
            num1 = (int) num3 * 1556798221 ^ -1478312124;
            continue;
          case 10:
            num1 = (int) num3 * -995456998 ^ -610174672;
            continue;
          case 11:
            num1 = (int) num3 * 1724488467 ^ 928787570;
            continue;
          case 12:
            str1 = "[\n\t";
            num1 = (int) num3 * 1585867115 ^ 1819083119;
            continue;
          case 14:
            str1 = Rules.\u202E‏‫‬‌‭⁪‬⁯‪​‏‭⁪‭⁬‭‍‬‭‮⁯‏⁭‫‭⁯‌⁫‭⁯‌‭⁫⁬‮‏‍⁫⁮‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * 1170862221 ^ -1051287025;
            continue;
          case 15:
            ++index;
            num1 = (int) num3 * -1198700661 ^ -486615727;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 450548112;
      string str1;
      string str2;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1587860398)) % 8U)
        {
          case 1:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? 735820395 : (num3 = 742271564);
            continue;
          case 2:
            str1 = Rules.\u202E​‎‏⁫‬‭‫​‪‪‫‪‪⁬‭‭‮⁯⁪⁪‍⁬‏‫⁬‌‎‏⁮‭‬‏⁭‍‪⁬⁭‭‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206F​⁬⁮⁯⁮⁯‬⁪‏⁯‎⁬‎‭‎‌⁫⁯​⁬⁮⁯⁮⁯‬⁪‎⁪⁭‮⁭‪‎‮‍‏‍⁪‌‮()));
            ++index;
            num1 = 316150135;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1495133184 ^ 1657003198;
            continue;
          case 5:
            str2 = Rules.\u202E‏‫‬‌‭⁪‬⁯‪​‏‭⁪‭⁬‭‍‬‭‮⁯‏⁭‫‭⁯‌⁫‭⁯‌‭⁫⁬‮‏‍⁫⁮‮(str1, " ]");
            num1 = (int) num2 * 149407562 ^ -304508968;
            continue;
          case 6:
            str1 = Rules.\u202E‏‫‬‌‭⁪‬⁯‪​‏‭⁪‭⁬‭‍‬‭‮⁯‏⁭‫‭⁯‌⁫‭⁯‌‭⁫⁬‮‏‍⁫⁮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206F​⁬⁮⁯⁮⁯‬⁪‏⁯‎⁬‎‭‎‌⁫⁯​⁬⁮⁯⁮⁯‬⁪‎⁪⁭‮⁭‪‎‮‍‏‍⁪‌‮()));
            num1 = (int) num2 * -136925142 ^ -129428179;
            continue;
          case 7:
            index = 1;
            num1 = (int) num2 * -857747228 ^ -1967801685;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u202C⁮‬‎⁯‌‍‮​‌‍‎⁭⁫‌‍⁬​‪⁮‭⁫‌⁬⁯⁯‭‭‬⁮‪⁫⁬⁬‪‬⁬⁯‍‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202E‏‫‬‌‭⁪‬⁯‪​‏‭⁪‭⁬‭‍‬‭‮⁯‏⁭‫‭⁯‌⁫‭⁯‌‭⁫⁬‮‏‍⁫⁮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202D⁯‌‍‪‫‮⁭‪‪⁫⁭‌⁪⁫​‍⁫⁫‌‬‪‍‪‮⁪‮⁬‍​⁪⁭‮⁯⁯‫⁯‌‭‮([In] object obj0) => obj0.ToString();

    static string \u202E​‎‏⁫‬‭‫​‪‪‫‪‪⁬‭‭‮⁯⁪⁪‍⁬‏‫⁬‌‎‏⁮‭‬‏⁭‍‪⁬⁭‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206F​⁬⁮⁯⁮⁯‬⁪‏⁯‎⁬‎‭‎‌⁫⁯​⁬⁮⁯⁮⁯‬⁪‎⁪⁭‮⁭‪‎‮‍‏‍⁪‌‮() => CultureInfo.InvariantCulture;
  }
}
