// Decompiled with JetBrains decompiler
// Type: s158708423978940.s141330826619026
// Assembly: s968508024776124, Version=2.0.47.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: E3596912-35E7-405B-A05A-F5F12AB5E292
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-b1729c7ae8423cc844b16aa10ca8ddd2b2331adbfb6646d80d73381fbc73a109.exe

using s206683195330003;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Security.Cryptography;

namespace s158708423978940
{
  public abstract class s141330826619026
  {
    protected byte[] _hash;
    protected HashAlgorithm _hashAlgorithm;
    protected s389047933096245 _symbolModule;
    protected string _filePath;
    private bool s006225696679879;
    private bool s798462147142384;

    public string s166608229115699 { get; protected set; }

    public virtual string s743717365192849 => this._symbolModule.s476717391864204(this.s166608229115699);

    public virtual string s064268333044864(bool s947905178212514 = false)
    {
      if (!this.s006225696679879)
      {
        this.s006225696679879 = true;
        if (this.s166608229115699 == null)
        {
          this.s130590313137244.WriteLine("No BuildTimeFilePath, giving up looking for source file");
          return (string) null;
        }
        if (this.s204235424210301(this.s166608229115699))
          return this._filePath;
        this.s130590313137244.WriteLine("Looking up {0} in the source server (or URL)", (object) this.s166608229115699);
        string sourceFromSrcServer = this.GetSourceFromSrcServer();
        if (sourceFromSrcServer != null)
        {
          if (this.s204235424210301(sourceFromSrcServer))
            return this._filePath;
          this.s130590313137244.WriteLine("Warning. Source file from source server {0} did not match checksum", (object) sourceFromSrcServer);
        }
        List<string> s265005195981961 = this._symbolModule.s606395693751712.s265005195981961;
        this.s130590313137244.WriteLine("Not present on source server, looking on NT_SOURCE_PATH.");
        this.s130590313137244.WriteLine("_NT_SOURCE_PATH={0}", (object) this._symbolModule.s606395693751712.s185486578165193);
        if (this._symbolModule.s560808724730221 != null)
        {
          string directoryName = Path.GetDirectoryName(this._symbolModule.s560808724730221);
          if (Directory.Exists(directoryName))
          {
            s265005195981961.Insert(0, directoryName);
            this.s130590313137244.WriteLine("Adding Exe directory to source search path {0}", (object) directoryName);
          }
        }
        int startIndex1 = 0;
        char[] anyOf = new char[2]{ '\\', '/' };
label_13:
        int startIndex2 = this.s166608229115699.IndexOfAny(anyOf, startIndex1);
        if (startIndex2 >= 0)
        {
          startIndex1 = startIndex2 + 1;
          string str = this.s166608229115699.Substring(startIndex2);
          this.s130590313137244.WriteLine("Probing Path Tail {0}", (object) str);
          using (List<string>.Enumerator enumerator = s265005195981961.GetEnumerator())
          {
            while (enumerator.MoveNext())
            {
              if (this.s204235424210301(enumerator.Current + str))
                return this._filePath;
            }
            goto label_13;
          }
        }
      }
      return s947905178212514 && !this.s798462147142384 ? (string) null : this._filePath;
    }

    public bool s947566892873719 => this._hashAlgorithm != null;

    public bool s956219833685408 => this.s798462147142384;

    protected s141330826619026(s389047933096245 symbolModule) => this._symbolModule = symbolModule;

    protected TextWriter s130590313137244 => this._symbolModule.s067303396426305;

    protected virtual string GetSourceFromSrcServer()
    {
      string s743717365192849 = this.s743717365192849;
      if (s743717365192849 != null)
      {
        HttpResponseMessage result1 = new HttpClient().GetAsync(s743717365192849).Result;
        result1.EnsureSuccessStatusCode();
        Stream result2 = result1.Content.ReadAsStreamAsync().Result;
        string path = this.s020534304708251(s743717365192849);
        if (path != null)
        {
          Directory.CreateDirectory(Path.GetDirectoryName(path));
          using (FileStream destination = File.Create(path))
            result2.CopyTo((Stream) destination);
          return path;
        }
        this.s130590313137244.WriteLine("Warning: SourceCache not set, giving up fetching source from the network.");
      }
      return (string) null;
    }

    private bool s204235424210301(string s189521751456972)
    {
      if (this._filePath != null && this.s798462147142384)
        return false;
      if (s189521751456972 == null || !File.Exists(s189521751456972))
      {
        this.s130590313137244.WriteLine("  Probe failed, file does not exist {0}", (object) s189521751456972);
        return false;
      }
      if (this.s469712530025549(s189521751456972))
      {
        this.s798462147142384 = true;
        this._filePath = s189521751456972;
        this.s130590313137244.WriteLine("Checksum matches for {0}", (object) s189521751456972);
        return true;
      }
      if (this._filePath == null)
      {
        this._filePath = s189521751456972;
        this.s130590313137244.WriteLine("Checksum does NOT match for {0}, but it is our best guess.", (object) s189521751456972);
      }
      else
        this.s130590313137244.WriteLine("Checksum does NOT match for {0} but we already have a non-ideal match so discarding this probe.", (object) s189521751456972);
      return false;
    }

    private bool s469712530025549(string s236190397200387)
    {
      if (this._hashAlgorithm == null && this._hash == null)
        return true;
      using (FileStream inputStream = File.OpenRead(s236190397200387))
        return s141330826619026.s694751704577180(this._hashAlgorithm.ComputeHash((Stream) inputStream), this._hash);
    }

    private string s020534304708251(string s379424935638893) => Path.Combine(this._symbolModule.s606395693751712.s395526091369185, new Uri(s379424935638893).AbsolutePath.TrimStart('/').Replace('/', '\\'));

    private static bool s694751704577180(byte[] s579932619009668, byte[] s382231954896068)
    {
      if (s579932619009668.Length != s579932619009668.Length)
        return false;
      for (int index = 0; index < s579932619009668.Length; ++index)
      {
        if ((int) s579932619009668[index] != (int) s382231954896068[index])
          return false;
      }
      return true;
    }
  }
}
