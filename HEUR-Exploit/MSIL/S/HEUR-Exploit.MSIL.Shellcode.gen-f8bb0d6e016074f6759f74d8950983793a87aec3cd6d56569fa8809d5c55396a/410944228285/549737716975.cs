// Decompiled with JetBrains decompiler
// Type: 410944228285.549737716975
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003254501269877;
using \u003281657960314;
using \u003410944228285;
using Microsoft.PythonTools;
using Microsoft.PythonTools.Analysis;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.XPath;

namespace \u003410944228285
{
  internal static class \u003549737716975
  {
    internal static bool \u003328768774063(IRunContext _param0)
    {
      XPathNodeIterator xpathNodeIterator = \u003549737716975.\u003064885521224(((IDiscoveryContext) _param0).RunSettings.SettingsXml).CreateNavigator().Select("/RunSettings/Python/EnableCoverage");
      bool result;
      return xpathNodeIterator.MoveNext() && bool.TryParse(xpathNodeIterator.Current.Value, out result) && result;
    }

    internal static void \u003099152921219(IFrameworkHandle _param0, string _param1)
    {
      if (File.Exists(_param1 + ".xml"))
      {
        AttachmentSet attachmentSet = new AttachmentSet(\u003991852471700.\u003513441060365, nameof (\u003549737716975));
        ((ICollection<UriDataAttachment>) attachmentSet.Attachments).Add(new UriDataAttachment(new Uri(_param1 + ".xml"), "Coverage Data"));
        ((ITestExecutionRecorder) _param0).RecordAttachments((IList<AttachmentSet>) new AttachmentSet[1]
        {
          attachmentSet
        });
        File.Delete(_param1);
      }
      else
        ((IMessageLogger) _param0).SendMessage((TestMessageLevel) 1, Strings.Test_NoCoverageProduced);
    }

    internal static string \u003198178833960(string _param0, string _param1)
    {
      if (_param0 == null || _param0 == _param1)
        _param0 = _param1;
      else if (!string.IsNullOrEmpty(_param0))
      {
        int length = 0;
        for (int index = 0; index < _param0.Length && index < _param1.Length; ++index)
        {
          if ((int) _param0[index] != (int) _param1[index])
          {
            _param0 = _param0.Substring(0, length);
            break;
          }
          if (_param0[index] == '\\' || _param0[index] == '/')
            length = index;
        }
      }
      return _param0;
    }

    internal static string \u003592782547770(IEnumerable<TestCase> _param0)
    {
      string path = (string) null;
      string str1 = (string) null;
      string str2 = (string) null;
      foreach (TestCase testCase in _param0)
      {
        string str3;
        string str4;
        \u003022174816886.\u003603374317585(testCase.FullyQualifiedName, out string _, out str3, out str4);
        path = \u003549737716975.\u003198178833960(path, testCase.CodeFilePath);
        if (path != testCase.CodeFilePath)
          str1 = str2 = "";
        str1 = \u003549737716975.\u003572862143755(str1, str3);
        str2 = \u003549737716975.\u003572862143755(str2, str4);
      }
      string str5;
      if (!string.IsNullOrWhiteSpace(path))
      {
        if (ModulePath.IsPythonSourceFile(path))
        {
          ModulePath modulePath = ModulePath.FromFullPath(path);
          str5 = ((ModulePath) ref modulePath).ModuleName;
        }
        else
          str5 = Path.GetFileName(path);
      }
      else
        str5 = "pycov";
      if (!string.IsNullOrWhiteSpace(str1))
        str5 = str5 + "_" + str1;
      if (!string.IsNullOrWhiteSpace(str2))
        str5 = str5 + "_" + str2;
      string path2 = str5 + "_" + DateTime.Now.ToString("s").Replace(':', '_');
      return Path.Combine(Path.GetTempPath(), path2);
    }

    private static string \u003572862143755(string _param0, string _param1)
    {
      if (_param0 == null || _param0 == _param1)
        _param0 = _param1;
      else if (!string.IsNullOrEmpty(_param0))
        _param0 = "";
      return _param0;
    }

    private static XPathDocument \u003064885521224(string _param0) => new XPathDocument(XmlReader.Create((TextReader) new StringReader(_param0), new XmlReaderSettings()
    {
      XmlResolver = (XmlResolver) null
    }));
  }
}
