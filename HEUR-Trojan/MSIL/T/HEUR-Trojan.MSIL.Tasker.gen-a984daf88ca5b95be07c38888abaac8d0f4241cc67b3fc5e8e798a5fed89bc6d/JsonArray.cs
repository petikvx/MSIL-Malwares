// Decompiled with JetBrains decompiler
// Type: JsonArray
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;

[DebuggerDisplay("Count = {Count}")]
[DebuggerTypeProxy(typeof (JsonArray.JsonArrayDebugView))]
public sealed class JsonArray : IEnumerable<JsonValue>, IEnumerable
{
  private IList<JsonValue> items;

  public int Count => this.items.Count;

  public JsonValue this[int index]
  {
    get => index >= 0 && index < this.items.Count ? this.items[index] : JsonValue.Null;
    set => this.items[index] = value;
  }

  public JsonArray() => this.items = (IList<JsonValue>) new List<JsonValue>();

  public JsonArray(params JsonValue[] values)
    : this()
  {
    if (values == null)
      throw new ArgumentNullException(nameof (values));
    foreach (JsonValue jsonValue in values)
      this.items.Add(jsonValue);
  }

  public JsonArray Add(JsonValue value)
  {
    this.items.Add(value);
    return this;
  }

  public JsonArray AddIfNotNull(JsonValue value)
  {
    if (!value.IsNull)
      this.Add(value);
    return this;
  }

  public JsonArray Insert(int index, JsonValue value)
  {
    this.items.Insert(index, value);
    return this;
  }

  public JsonArray InsertIfNotNull(int index, JsonValue value)
  {
    if (!value.IsNull)
      this.Insert(index, value);
    return this;
  }

  public JsonArray Remove(int index)
  {
    this.items.RemoveAt(index);
    return this;
  }

  public JsonArray Clear()
  {
    this.items.Clear();
    return this;
  }

  public bool Contains(JsonValue item) => this.items.Contains(item);

  public int IndexOf(JsonValue item) => this.items.IndexOf(item);

  public IEnumerator<JsonValue> GetEnumerator() => this.items.GetEnumerator();

  IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this.GetEnumerator();

  public override string ToString() => this.ToString(false);

  public string ToString(bool pretty) => JsonWriter.Serialize((JsonValue) this, pretty);

  private class JsonArrayDebugView
  {
    private JsonArray jsonArray;

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public JsonValue[] Items
    {
      get
      {
        JsonValue[] items = new JsonValue[this.jsonArray.Count];
        for (int index = 0; index < this.jsonArray.Count; ++index)
          items[index] = this.jsonArray[index];
        return items;
      }
    }

    public JsonArrayDebugView(JsonArray jsonArray) => this.jsonArray = jsonArray;
  }
}
