// Decompiled with JetBrains decompiler
// Type: MiniGames_Team9.Snake
// Assembly: IdentityRefere, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9F5D51E6-71BD-43F4-AA35-8F19B20FF789
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-3cda0e34cd6f8adaabeeeb6e8bd08d80ba8d758bb3218c8058cd88353d253b61.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace MiniGames_Team9
{
  public class Snake : Form
  {
    private List<Circle> snake = new List<Circle>();
    private Circle food = new Circle();
    private IContainer components = (IContainer) null;
    private Label lblScore;
    private Timer gameTimer;
    private Label lblGameOver;
    private PictureBox pbCanvas;
    private Panel panel1;
    private PictureBox pictureBox2;
    private Label label1;
    private PictureBox pictureBox1;

    public Snake()
    {
      this.InitializeComponent();
      Settings settings = new Settings();
      this.gameTimer.Interval = 1000 / Settings.Speed;
      this.gameTimer.Tick += new EventHandler(this.UpdateScreen);
      this.gameTimer.Start();
      this.StartGame();
    }

    private void StartGame()
    {
      this.lblGameOver.Visible = false;
      Settings settings = new Settings();
      this.snake.Clear();
      this.snake.Add(new Circle() { X = 10, Y = 5 });
      this.lblScore.Text = Settings.Score.ToString();
      this.GenerateFood();
    }

    private void GenerateFood()
    {
      int maxValue1 = this.pbCanvas.Size.Width / Settings.Width;
      int maxValue2 = this.pbCanvas.Size.Height / Settings.Height;
      Random random = new Random();
      this.food = new Circle()
      {
        X = random.Next(0, maxValue1),
        Y = random.Next(0, maxValue2)
      };
    }

    private void UpdateScreen(object sender, EventArgs e)
    {
      if (Settings.GameOver)
      {
        if (Input.KeyPressed(Keys.Return))
          this.StartGame();
      }
      else
      {
        if (Input.KeyPressed(Keys.Right) && Settings.direction != Directionn.Left)
          Settings.direction = Directionn.Right;
        else if (Input.KeyPressed(Keys.Left) && Settings.direction != Directionn.Right)
          Settings.direction = Directionn.Left;
        else if (Input.KeyPressed(Keys.Up) && Settings.direction != Directionn.Down)
          Settings.direction = Directionn.Up;
        else if (Input.KeyPressed(Keys.Down) && Settings.direction != 0)
          Settings.direction = Directionn.Down;
        this.MovePlayer();
      }
      this.pbCanvas.Invalidate();
    }

    private void pbCanvas_Paint(object sender, PaintEventArgs e)
    {
      Graphics graphics = e.Graphics;
      if (!Settings.GameOver)
      {
        for (int index = 0; index < this.snake.Count; ++index)
        {
          Brush brush = index != 0 ? Brushes.Green : Brushes.Black;
          graphics.FillEllipse(brush, new Rectangle(this.snake[index].X * Settings.Width, this.snake[index].Y * Settings.Height, Settings.Width, Settings.Height));
          graphics.FillEllipse(Brushes.Red, new Rectangle(this.food.X * Settings.Width, this.food.Y * Settings.Height, Settings.Width, Settings.Height));
        }
      }
      else
      {
        this.lblGameOver.Text = "Game over \nYour final score is: " + Settings.Score.ToString() + "\nPress Enter to try again";
        this.lblGameOver.Visible = true;
      }
    }

    private void MovePlayer()
    {
      for (int index1 = this.snake.Count - 1; index1 >= 0; --index1)
      {
        if (index1 == 0)
        {
          switch (Settings.direction)
          {
            case Directionn.Up:
              --this.snake[index1].Y;
              break;
            case Directionn.Down:
              ++this.snake[index1].Y;
              break;
            case Directionn.Left:
              --this.snake[index1].X;
              break;
            case Directionn.Right:
              ++this.snake[index1].X;
              break;
          }
          int num1 = this.pbCanvas.Size.Width / Settings.Width;
          int num2 = this.pbCanvas.Size.Height / Settings.Height;
          if (this.snake[index1].X < 0 || this.snake[index1].Y < 0 || this.snake[index1].X >= num1 || this.snake[index1].Y >= num2)
            this.Die();
          for (int index2 = 1; index2 < this.snake.Count; ++index2)
          {
            if (this.snake[index1].X == this.snake[index2].X && this.snake[index1].Y == this.snake[index2].Y)
              this.Die();
          }
          if (this.snake[0].X == this.food.X && this.snake[0].Y == this.food.Y)
            this.Eat();
        }
        else
        {
          this.snake[index1].X = this.snake[index1 - 1].X;
          this.snake[index1].Y = this.snake[index1 - 1].Y;
        }
      }
    }

    private void Eat()
    {
      this.snake.Add(new Circle()
      {
        X = this.snake[this.snake.Count - 1].X,
        Y = this.snake[this.snake.Count - 1].Y
      });
      Settings.Score += Settings.Points;
      this.lblScore.Text = Settings.Score.ToString();
      this.GenerateFood();
    }

    private void Die() => Settings.GameOver = true;

    private void Snake_KeyDown(object sender, KeyEventArgs e) => Input.ChangeState(e.KeyCode, true);

    private void Snake_KeyUp(object sender, KeyEventArgs e) => Input.ChangeState(e.KeyCode, false);

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.lblScore = new Label();
      this.gameTimer = new Timer(this.components);
      this.lblGameOver = new Label();
      this.panel1 = new Panel();
      this.pictureBox2 = new PictureBox();
      this.label1 = new Label();
      this.pictureBox1 = new PictureBox();
      this.pbCanvas = new PictureBox();
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.pictureBox2).BeginInit();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      ((ISupportInitialize) this.pbCanvas).BeginInit();
      this.SuspendLayout();
      this.lblScore.AutoSize = true;
      this.lblScore.Font = new Font("Microsoft Sans Serif", 24f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblScore.Location = new Point(726, 6);
      this.lblScore.Name = "lblScore";
      this.lblScore.Size = new Size(0, 37);
      this.lblScore.TabIndex = 6;
      this.lblGameOver.AutoSize = true;
      this.lblGameOver.Font = new Font("Monotype Corsiva", 20.25f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.lblGameOver.Location = new Point(-4, 105);
      this.lblGameOver.Name = "lblGameOver";
      this.lblGameOver.Size = new Size(76, 33);
      this.lblGameOver.TabIndex = 1;
      this.lblGameOver.Text = "label2";
      this.lblGameOver.Visible = false;
      this.panel1.BackColor = Color.FromArgb(64, 64, 64);
      this.panel1.Controls.Add((Control) this.pictureBox2);
      this.panel1.Controls.Add((Control) this.label1);
      this.panel1.Controls.Add((Control) this.pictureBox1);
      this.panel1.Dock = DockStyle.Right;
      this.panel1.Location = new Point(259, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(194, 368);
      this.panel1.TabIndex = 13;
      this.pictureBox2.BackColor = Color.FromArgb(64, 64, 64);
      this.pictureBox2.Location = new Point(43, 139);
      this.pictureBox2.Margin = new Padding(2);
      this.pictureBox2.Name = "pictureBox2";
      this.pictureBox2.Size = new Size(104, 66);
      this.pictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
      this.pictureBox2.TabIndex = 7;
      this.pictureBox2.TabStop = false;
      this.label1.AutoSize = true;
      this.label1.BackColor = Color.FromArgb(64, 64, 64);
      this.label1.Font = new Font("Monotype Corsiva", 20.25f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label1.ForeColor = Color.White;
      this.label1.Location = new Point(25, 217);
      this.label1.Margin = new Padding(2, 0, 2, 0);
      this.label1.Name = "label1";
      this.label1.Size = new Size(141, 33);
      this.label1.TabIndex = 45;
      this.label1.Text = "Game Snake";
      this.pictureBox1.Location = new Point(-21, -2);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(242, 112);
      this.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
      this.pictureBox1.TabIndex = 44;
      this.pictureBox1.TabStop = false;
      this.pbCanvas.BackColor = SystemColors.ScrollBar;
      this.pbCanvas.Location = new Point(2, 6);
      this.pbCanvas.Name = "pbCanvas";
      this.pbCanvas.Size = new Size(260, 362);
      this.pbCanvas.TabIndex = 8;
      this.pbCanvas.TabStop = false;
      this.pbCanvas.Paint += new PaintEventHandler(this.pbCanvas_Paint);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(453, 368);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.lblGameOver);
      this.Controls.Add((Control) this.pbCanvas);
      this.Controls.Add((Control) this.lblScore);
      this.Name = nameof (Snake);
      this.Text = nameof (Snake);
      this.KeyDown += new KeyEventHandler(this.Snake_KeyDown);
      this.KeyUp += new KeyEventHandler(this.Snake_KeyUp);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      ((ISupportInitialize) this.pictureBox2).EndInit();
      ((ISupportInitialize) this.pictureBox1).EndInit();
      ((ISupportInitialize) this.pbCanvas).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
