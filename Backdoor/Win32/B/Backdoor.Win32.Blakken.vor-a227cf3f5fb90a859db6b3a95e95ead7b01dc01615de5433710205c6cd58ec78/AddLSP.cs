// Decompiled with JetBrains decompiler
// Type: ManagerMarket.AddLSP
// Assembly: cDisplayClass310, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8C7A4461-A171-4409-B75B-AB5BE5ABB986
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\Backdoor.Win32.Blakken.vor-a227cf3f5fb90a859db6b3a95e95ead7b01dc01615de5433710205c6cd58ec78.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ManagerMarket
{
  [DesignerGenerated]
  public class AddLSP : Form
  {
    private IContainer components;
    private DataBaseAccess dataaccess;

    public AddLSP()
    {
      this.dataaccess = new DataBaseAccess();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.Label1 = new Label();
      this.Label2 = new Label();
      this.txtMaLSP = new TextBox();
      this.txtTenLSP = new TextBox();
      this.btnAdd = new Button();
      this.btnCan = new Button();
      this.SuspendLayout();
      this.Label1.AutoSize = true;
      this.Label1.Location = new Point(13, 38);
      this.Label1.Name = "Label1";
      this.Label1.Size = new Size(45, 13);
      this.Label1.TabIndex = 0;
      this.Label1.Text = "Ma LSP";
      this.Label2.AutoSize = true;
      this.Label2.Location = new Point(13, 94);
      this.Label2.Name = "Label2";
      this.Label2.Size = new Size(49, 13);
      this.Label2.TabIndex = 1;
      this.Label2.Text = "Ten LSP";
      this.txtMaLSP.Location = new Point(89, 35);
      this.txtMaLSP.Name = "txtMaLSP";
      this.txtMaLSP.Size = new Size(150, 20);
      this.txtMaLSP.TabIndex = 2;
      this.txtTenLSP.Location = new Point(89, 91);
      this.txtTenLSP.Name = "txtTenLSP";
      this.txtTenLSP.Size = new Size(150, 20);
      this.txtTenLSP.TabIndex = 3;
      this.btnAdd.Location = new Point(36, 133);
      this.btnAdd.Name = "btnAdd";
      this.btnAdd.Size = new Size(75, 23);
      this.btnAdd.TabIndex = 4;
      this.btnAdd.Text = "Ok";
      this.btnAdd.UseVisualStyleBackColor = true;
      this.btnCan.Location = new Point(150, 133);
      this.btnCan.Name = "btnCan";
      this.btnCan.Size = new Size(75, 23);
      this.btnCan.TabIndex = 5;
      this.btnCan.Text = "Cancel";
      this.btnCan.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(276, 168);
      this.Controls.Add((Control) this.btnCan);
      this.Controls.Add((Control) this.btnAdd);
      this.Controls.Add((Control) this.txtTenLSP);
      this.Controls.Add((Control) this.txtMaLSP);
      this.Controls.Add((Control) this.Label2);
      this.Controls.Add((Control) this.Label1);
      this.Name = nameof (AddLSP);
      this.Text = nameof (AddLSP);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("Label1")]
    internal virtual Label Label1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label2")]
    internal virtual Label Label2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtMaLSP")]
    internal virtual TextBox txtMaLSP { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtTenLSP")]
    internal virtual TextBox txtTenLSP { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button btnAdd
    {
      get => this._btnAdd;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnAdd_Click);
        Button btnAdd1 = this._btnAdd;
        if (btnAdd1 != null)
          btnAdd1.Click -= eventHandler;
        this._btnAdd = value;
        Button btnAdd2 = this._btnAdd;
        if (btnAdd2 == null)
          return;
        btnAdd2.Click += eventHandler;
      }
    }

    internal virtual Button btnCan
    {
      get => this._btnCan;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnCan_Click);
        Button btnCan1 = this._btnCan;
        if (btnCan1 != null)
          btnCan1.Click -= eventHandler;
        this._btnCan = value;
        Button btnCan2 = this._btnCan;
        if (btnCan2 == null)
          return;
        btnCan2.Click += eventHandler;
      }
    }

    private object AddStudent() => (object) this.dataaccess.ExecuteNoneQuery("INSERT INTO LoaiSP (MaLSP,TenLSP)" + string.Format("VALUES ('{0}','{1}')", (object) this.txtMaLSP.Text, (object) this.txtTenLSP.Text));

    private object IsEmpty() => (object) (bool) (string.IsNullOrEmpty(this.txtMaLSP.Text) ? 1 : (string.IsNullOrEmpty(this.txtTenLSP.Text) ? 1 : 0));

    private void btnAdd_Click(object sender, EventArgs e)
    {
      if (Conversions.ToBoolean(this.IsEmpty()))
      {
        int num1 = (int) MessageBox.Show("Chua nhap gia tri", "Error", MessageBoxButtons.OK);
      }
      else
      {
        if (Conversions.ToBoolean(this.AddStudent()))
        {
          int num2 = (int) MessageBox.Show("Them thanh cong", "Success", MessageBoxButtons.OK);
          this.DialogResult = DialogResult.OK;
        }
        else
        {
          int num3 = (int) MessageBox.Show("Them that bai", "Error", MessageBoxButtons.OK);
          this.DialogResult = DialogResult.No;
        }
        this.Close();
      }
    }

    private void btnCan_Click(object sender, EventArgs e) => this.Close();
  }
}
