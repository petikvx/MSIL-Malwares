// Decompiled with JetBrains decompiler
// Type: Dark_RAT.Encryption
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Dark_RAT
{
  [StandardModule]
  internal sealed class Encryption
  {
    public static string HashData(string s) => BitConverter.ToString(new MD5CryptoServiceProvider().ComputeHash(new UnicodeEncoding().GetBytes(s)));

    public static string SHA1(string strToHash)
    {
      byte[] hash = new SHA1CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(strToHash));
      string str = "";
      byte[] numArray = hash;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        str += num.ToString("x2");
        checked { ++index; }
      }
      return str;
    }

    public static string getMD5Hash(string strToHash)
    {
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(strToHash));
      string md5Hash = "";
      byte[] numArray = hash;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        md5Hash += num.ToString("x2");
        checked { ++index; }
      }
      return md5Hash;
    }

    public class RijndaelSimple
    {
      [DebuggerNonUserCode]
      public RijndaelSimple()
      {
      }

      public static string RijndaelEncrypt(string plainText, string passPhrase)
      {
label_1:
        int num1;
        string str1;
        int num2;
        try
        {
          ProjectData.ClearProjectError();
          num1 = -2;
label_2:
          int num3 = 2;
          string s1 = "DarkRAT HWID";
label_3:
          num3 = 3;
          string strHashName = "SHA1";
label_4:
          num3 = 4;
          int iterations = 2;
label_5:
          num3 = 5;
          string s2 = "@1B2c3D4e5F6g7H8";
label_6:
          num3 = 6;
          int num4 = 256;
label_7:
          num3 = 7;
          byte[] bytes1 = Encoding.ASCII.GetBytes(s2);
label_8:
          num3 = 8;
          byte[] bytes2 = Encoding.ASCII.GetBytes(s1);
label_9:
          num3 = 9;
          byte[] bytes3 = Encoding.UTF8.GetBytes(plainText);
label_10:
          num3 = 10;
          PasswordDeriveBytes passwordDeriveBytes = new PasswordDeriveBytes(passPhrase, bytes2, strHashName, iterations);
label_11:
          num3 = 11;
          byte[] bytes4 = passwordDeriveBytes.GetBytes(checked ((int) Math.Round(unchecked ((double) num4 / 8.0))));
label_12:
          num3 = 12;
          RijndaelManaged rijndaelManaged = new RijndaelManaged();
label_13:
          num3 = 13;
          rijndaelManaged.Mode = CipherMode.CBC;
label_14:
          num3 = 14;
          ICryptoTransform encryptor = rijndaelManaged.CreateEncryptor(bytes4, bytes1);
label_15:
          num3 = 15;
          MemoryStream memoryStream = new MemoryStream();
label_16:
          num3 = 16;
          CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, encryptor, CryptoStreamMode.Write);
label_17:
          num3 = 17;
          cryptoStream.Write(bytes3, 0, bytes3.Length);
label_18:
          num3 = 18;
          cryptoStream.FlushFinalBlock();
label_19:
          num3 = 19;
          byte[] array = memoryStream.ToArray();
label_20:
          num3 = 20;
          memoryStream.Close();
label_21:
          num3 = 21;
          cryptoStream.Close();
label_22:
          num3 = 22;
          string base64String = Convert.ToBase64String(array);
label_23:
          str1 = base64String;
          goto label_30;
label_25:
          num2 = num3;
          switch (num1 > -2 ? num1 : 1)
          {
            case 1:
              int num5 = num2 + 1;
              num2 = 0;
              switch (num5)
              {
                case 1:
                  goto label_1;
                case 2:
                  goto label_2;
                case 3:
                  goto label_3;
                case 4:
                  goto label_4;
                case 5:
                  goto label_5;
                case 6:
                  goto label_6;
                case 7:
                  goto label_7;
                case 8:
                  goto label_8;
                case 9:
                  goto label_9;
                case 10:
                  goto label_10;
                case 11:
                  goto label_11;
                case 12:
                  goto label_12;
                case 13:
                  goto label_13;
                case 14:
                  goto label_14;
                case 15:
                  goto label_15;
                case 16:
                  goto label_16;
                case 17:
                  goto label_17;
                case 18:
                  goto label_18;
                case 19:
                  goto label_19;
                case 20:
                  goto label_20;
                case 21:
                  goto label_21;
                case 22:
                  goto label_22;
                case 23:
                  goto label_23;
                case 24:
                  goto label_30;
              }
              break;
          }
        }
        catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
        {
          ProjectData.SetProjectError(ex);
          goto label_25;
        }
        throw ProjectData.CreateProjectError(-2146828237);
label_30:
        string str2 = str1;
        if (num2 == 0)
          return str2;
        ProjectData.ClearProjectError();
        return str2;
      }

      public static string RijndaelDecrypt(string cipherText, string passPhrase)
      {
label_1:
        int num1;
        string str1;
        int num2;
        try
        {
          ProjectData.ClearProjectError();
          num1 = -2;
label_2:
          int num3 = 2;
          string s1 = "DarkRAT HWID";
label_3:
          num3 = 3;
          string strHashName = "SHA1";
label_4:
          num3 = 4;
          int iterations = 2;
label_5:
          num3 = 5;
          string s2 = "@1B2c3D4e5F6g7H8";
label_6:
          num3 = 6;
          int num4 = 256;
label_7:
          num3 = 7;
          byte[] bytes1 = Encoding.ASCII.GetBytes(s2);
label_8:
          num3 = 8;
          byte[] bytes2 = Encoding.ASCII.GetBytes(s1);
label_9:
          num3 = 9;
          byte[] buffer = Convert.FromBase64String(cipherText);
label_10:
          num3 = 10;
          PasswordDeriveBytes passwordDeriveBytes = new PasswordDeriveBytes(passPhrase, bytes2, strHashName, iterations);
label_11:
          num3 = 11;
          byte[] bytes3 = passwordDeriveBytes.GetBytes(checked ((int) Math.Round(unchecked ((double) num4 / 8.0))));
label_12:
          num3 = 12;
          RijndaelManaged rijndaelManaged = new RijndaelManaged();
label_13:
          num3 = 13;
          rijndaelManaged.Mode = CipherMode.CBC;
label_14:
          num3 = 14;
          ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor(bytes3, bytes1);
label_15:
          num3 = 15;
          MemoryStream memoryStream = new MemoryStream(buffer);
label_16:
          num3 = 16;
          CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read);
label_17:
          num3 = 17;
          byte[] numArray = new byte[checked (buffer.Length + 1)];
label_18:
          num3 = 20;
          int count = cryptoStream.Read(numArray, 0, numArray.Length);
label_19:
          num3 = 21;
          memoryStream.Close();
label_20:
          num3 = 22;
          cryptoStream.Close();
label_21:
          num3 = 23;
          string str2 = Encoding.UTF8.GetString(numArray, 0, count);
label_22:
          str1 = str2;
          goto label_29;
label_24:
          num2 = num3;
          switch (num1 > -2 ? num1 : 1)
          {
            case 1:
              int num5 = num2 + 1;
              num2 = 0;
              switch (num5)
              {
                case 1:
                  goto label_1;
                case 2:
                  goto label_2;
                case 3:
                  goto label_3;
                case 4:
                  goto label_4;
                case 5:
                  goto label_5;
                case 6:
                  goto label_6;
                case 7:
                  goto label_7;
                case 8:
                  goto label_8;
                case 9:
                  goto label_9;
                case 10:
                  goto label_10;
                case 11:
                  goto label_11;
                case 12:
                  goto label_12;
                case 13:
                  goto label_13;
                case 14:
                  goto label_14;
                case 15:
                  goto label_15;
                case 16:
                  goto label_16;
                case 17:
                  goto label_17;
                case 18:
                case 20:
                  goto label_18;
                case 21:
                  goto label_19;
                case 22:
                  goto label_20;
                case 23:
                  goto label_21;
                case 24:
                  goto label_22;
                case 25:
                  goto label_29;
              }
              break;
          }
        }
        catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
        {
          ProjectData.SetProjectError(ex);
          goto label_24;
        }
        throw ProjectData.CreateProjectError(-2146828237);
label_29:
        string str3 = str1;
        if (num2 == 0)
          return str3;
        ProjectData.ClearProjectError();
        return str3;
      }
    }
  }
}
