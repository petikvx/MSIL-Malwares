// Decompiled with JetBrains decompiler
// Type: XML2List.ElementAttributeValueSelector
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using PathLibrary;
using System;
using System.Collections.Generic;
using System.Xml.Linq;

namespace XML2List
{
  public class ElementAttributeValueSelector : IItemSelect
  {
    private PathAttributeValueGroup[] pavgArray;
    private string elementPath;

    public ElementAttributeValueSelector(string elemPath, PathAttributeValueGroup[] listPAVG)
    {
      this.elementPath = PathTools.RemoveAttributes(elemPath);
      this.pavgArray = listPAVG;
    }

    public XElement SelectItem(XElement item)
    {
      IEnumerable<XElement> collectionUsingPath = PathElementsTools.GetCollectionUsingPath(item, this.elementPath);
      try
      {
        foreach (XElement xelement in collectionUsingPath)
        {
          foreach (PathAttributeValueGroup pavg in this.pavgArray)
          {
            if (xelement.Attribute((XName) pavg.Attribute) != null && xelement.Attribute((XName) pavg.Attribute).Value == pavg.Value)
              return xelement;
          }
        }
        return (XElement) null;
      }
      catch (ArgumentException ex)
      {
        return (XElement) null;
      }
    }

    public string Name
    {
      get
      {
        string str = "[";
        foreach (PathAttributeValueGroup pavg in this.pavgArray)
          str += pavg.ToString();
        return string.Format("{0}{1}", (object) this.elementPath, (object) (str + "]"));
      }
    }
  }
}
