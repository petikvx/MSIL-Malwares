// Decompiled with JetBrains decompiler
// Type: 433898465903.604162322746
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003172091972983;
using \u003208825527781;
using \u003433898465903;
using \u003776591164401;
using \u003782432075136;
using \u003830680403346;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

namespace \u003433898465903
{
  internal static class \u003604162322746
  {
    private static readonly \u003991605103082<Type, \u003384997559785<string, string>> \u003367977266961 = new \u003991605103082<Type, \u003384997559785<string, string>>(new Func<Type, \u003384997559785<string, string>>(\u003604162322746.\u003788252216818));

    private static \u003384997559785<string, string> \u003788252216818(Type _param0)
    {
      \u003384997559785<string, string> obj = new \u003384997559785<string, string>((IEqualityComparer<string>) StringComparer.Ordinal, (IEqualityComparer<string>) StringComparer.Ordinal);
      foreach (FieldInfo field in _param0.GetFields(BindingFlags.Static | BindingFlags.Public))
      {
        string name = field.Name;
        string str1 = field.GetCustomAttributes(typeof (EnumMemberAttribute), true).Cast<EnumMemberAttribute>().Select<EnumMemberAttribute, string>((Func<EnumMemberAttribute, string>) (_param1 => _param1.Value)).SingleOrDefault<string>() ?? field.Name;
        string str2;
        if (obj.TryGetBySecond(str1, ref str2))
          throw new InvalidOperationException("Enum name '{0}' already exists on enum '{1}'.".\u003937370926224((IFormatProvider) CultureInfo.InvariantCulture, (object) str1, (object) _param0.Name));
        obj.Set(name, str1);
      }
      return obj;
    }

    public static IList<T> \u003265613293589<T>(T _param0) where T : struct
    {
      Type type = typeof (T);
      if (!type.IsDefined(typeof (FlagsAttribute), false))
        throw new ArgumentException("Enum type {0} is not a set of flags.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) type));
      Type underlyingType = Enum.GetUnderlyingType(_param0.GetType());
      ulong uint64 = Convert.ToUInt64((object) _param0, (IFormatProvider) CultureInfo.InvariantCulture);
      IList<\u003380613666179<ulong>> source = \u003604162322746.\u003527363167364<T>();
      IList<T> objList = (IList<T>) new List<T>();
      foreach (\u003380613666179<ulong> obj in (IEnumerable<\u003380613666179<ulong>>) source)
      {
        if (((long) uint64 & (long) obj.\u003884373427105) == (long) obj.\u003884373427105 && obj.\u003884373427105 != 0UL)
          objList.Add((T) Convert.ChangeType((object) obj.\u003884373427105, underlyingType, (IFormatProvider) CultureInfo.CurrentCulture));
      }
      if (objList.Count == 0 && source.SingleOrDefault<\u003380613666179<ulong>>((Func<\u003380613666179<ulong>, bool>) delegate); //unable to render the statement
      return objList;
    }

    public static IList<\u003380613666179<ulong>> \u003527363167364<T>() where T : struct => \u003604162322746.\u003220434200150<ulong>(typeof (T));

    public static IList<\u003380613666179<TUnderlyingType>> \u003220434200150<TUnderlyingType>(
      Type _param0)
      where TUnderlyingType : struct
    {
      if (_param0 == (Type) null)
        throw new ArgumentNullException("enumType");
      IList<object> objectList = _param0.\u003958885632862() ? \u003604162322746.\u003329175122900(_param0) : throw new ArgumentException("Type {0} is not an enum.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.Name), "enumType");
      IList<string> stringList = \u003604162322746.\u003428097596648(_param0);
      IList<\u003380613666179<TUnderlyingType>> objList = (IList<\u003380613666179<TUnderlyingType>>) new List<\u003380613666179<TUnderlyingType>>();
      for (int index = 0; index < objectList.Count; ++index)
      {
        try
        {
          objList.Add(new \u003380613666179<TUnderlyingType>(stringList[index], (TUnderlyingType) Convert.ChangeType(objectList[index], typeof (TUnderlyingType), (IFormatProvider) CultureInfo.CurrentCulture)));
        }
        catch (OverflowException ex)
        {
          throw new InvalidOperationException("Value from enum with the underlying type of {0} cannot be added to dictionary with a value type of {1}. Value was too large: {2}".\u003263699582926((IFormatProvider) CultureInfo.InvariantCulture, (object) Enum.GetUnderlyingType(_param0), (object) typeof (TUnderlyingType), (object) Convert.ToUInt64(objectList[index], (IFormatProvider) CultureInfo.InvariantCulture)), (Exception) ex);
        }
      }
      return objList;
    }

    public static IList<object> \u003329175122900(Type _param0)
    {
      if (!_param0.\u003958885632862())
        throw new ArgumentException("Type {0} is not an enum.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.Name), "enumType");
      List<object> objectList = new List<object>();
      foreach (FieldInfo field in _param0.GetFields(BindingFlags.Static | BindingFlags.Public))
      {
        object obj = field.GetValue((object) _param0);
        objectList.Add(obj);
      }
      return (IList<object>) objectList;
    }

    public static IList<string> \u003428097596648(Type _param0)
    {
      if (!_param0.\u003958885632862())
        throw new ArgumentException("Type {0} is not an enum.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.Name), "enumType");
      List<string> stringList = new List<string>();
      foreach (FieldInfo field in _param0.GetFields(BindingFlags.Static | BindingFlags.Public))
        stringList.Add(field.Name);
      return (IList<string>) stringList;
    }

    public static object \u003185458270169(
      string _param0,
      bool _param1,
      bool _param2,
      Type _param3)
    {
      if (_param0 == string.Empty & _param1)
        return (object) null;
      \u003384997559785<string, string> obj = \u003604162322746.\u003367977266961.Get(_param3);
      string str1;
      string str2;
      if (\u003604162322746.\u003115193595302(obj, _param0, out str1))
        str2 = str1;
      else if (_param0.IndexOf(',') != -1)
      {
        string[] strArray = _param0.Split(',');
        for (int index = 0; index < strArray.Length; ++index)
        {
          string str3 = strArray[index].Trim();
          strArray[index] = \u003604162322746.\u003115193595302(obj, str3, out str1) ? str1 : str3;
        }
        str2 = string.Join(", ", strArray);
      }
      else
      {
        str2 = _param0;
        if (_param2)
        {
          bool flag = true;
          for (int index = 0; index < str2.Length; ++index)
          {
            if (!char.IsNumber(str2[index]))
            {
              flag = false;
              break;
            }
          }
          if (flag)
            throw new FormatException("Integer string '{0}' is not allowed.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0));
        }
      }
      return Enum.Parse(_param3, str2, true);
    }

    public static string \u003475943504297(Type _param0, string _param1, bool _param2)
    {
      \u003384997559785<string, string> obj = \u003604162322746.\u003367977266961.Get(_param0);
      string[] strArray = _param1.Split(',');
      for (int index = 0; index < strArray.Length; ++index)
      {
        string str1 = strArray[index].Trim();
        string str2;
        obj.TryGetByFirst(str1, ref str2);
        str2 = str2 ?? str1;
        if (_param2)
          str2 = \u003591722725384.\u003882463081985(str2);
        strArray[index] = str2;
      }
      return string.Join(", ", strArray);
    }

    private static bool \u003115193595302(
      \u003384997559785<string, string> _param0,
      string _param1,
      out string _param2)
    {
      if (_param0.TryGetBySecond(_param1, ref _param2))
        return true;
      _param2 = (string) null;
      return false;
    }
  }
}
