// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.ExceptionTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags
{
  public class ExceptionTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 5;
        int num1 = 23066;
        int num2 = num1;
        num1 = 23066;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("\uDCB8쎺\uDEBC\uDABE뇀럂계\uA8C6\uA7C8", A_1);
          default:
            goto case 1;
        }
      }
    }

    public ExceptionTag(string type, string message)
      : this(0, type, message)
    {
    }

    public ExceptionTag(int sequence, string type, string message)
    {
      int A_1 = 18;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.AddAttribute(Utils.a("뗅귇믉", A_1), sequence.ToString());
      this.AddAttribute(Utils.a("ꏅ냇꧉꧋뻍\uA4CF믑믓룕賗ꏙ곛믝", A_1), type);
      this.AddOptionalAttribute(Utils.a("ꯅ귇막뿋꿍럏럑", A_1), message);
    }
  }
}
