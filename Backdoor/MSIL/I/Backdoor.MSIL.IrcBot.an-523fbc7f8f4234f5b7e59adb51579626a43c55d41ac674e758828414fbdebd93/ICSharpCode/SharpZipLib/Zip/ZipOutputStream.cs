// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.ZipOutputStream
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Checksums;
using ICSharpCode.SharpZipLib.Zip.Compression;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using System;
using System.Collections;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip
{
  public class ZipOutputStream : DeflaterOutputStream
  {
    private ArrayList \uE00B = new ArrayList();
    private Crc32 \uE00A = new Crc32();
    private ZipEntry \uE009;
    private int \uE008 = -1;
    private CompressionMethod \uE007 = CompressionMethod.Deflated;
    private long \uE006;
    private long \uE005;
    private byte[] \uE004 = new byte[0];
    private bool \uE003;
    private long \uE002 = -1;
    private long \uE001 = -1;
    private UseZip64 \uE000 = UseZip64.Dynamic;

    public ZipOutputStream(Stream baseOutputStream)
      : base(baseOutputStream, new Deflater(-1, true))
    {
    }

    public bool IsFinished => this.\uE00B == null;

    public void SetComment(string comment)
    {
      byte[] array = ZipConstants.ConvertToArray(comment);
      this.\uE004 = array.Length <= (int) ushort.MaxValue ? array : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEF96\uEF9A\uEF98\uEF98\uEF90\uEF9B\uEF81", 61429));
    }

    public void SetLevel(int level)
    {
      this.deflater_.SetLevel(level);
      this.\uE008 = level;
    }

    public int GetLevel() => this.deflater_.GetLevel();

    public UseZip64 UseZip64
    {
      get => this.\uE000;
      set => this.\uE000 = value;
    }

    private void \uE003(int _param1)
    {
      this.baseOutputStream_.WriteByte((byte) (_param1 & (int) byte.MaxValue));
      this.baseOutputStream_.WriteByte((byte) (_param1 >> 8 & (int) byte.MaxValue));
    }

    private void \uE002(int _param1)
    {
      this.\uE003(_param1);
      this.\uE003(_param1 >> 16);
    }

    private void \uE001(long _param1)
    {
      this.\uE002((int) _param1);
      this.\uE002((int) (_param1 >> 32));
    }

    public void PutNextEntry(ZipEntry entry)
    {
      if (entry == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEEB7\uEEBC\uEEA6\uEEA0\uEEAB", 61138));
      if (this.\uE00B == null)
        throw new InvalidOperationException(\uE01B.\uE000("\uE631\uE602\uE61B\uE624\uE61E\uE61F\uE61B\uE61E\uE61F\uE638\uE61F\uE619\uE60E\uE60A\uE606\uE64B\uE61C\uE60A\uE618\uE64B\uE60D\uE602\uE605\uE602\uE618\uE603\uE60E\uE60F", 58987));
      if (this.\uE009 != null)
        this.CloseEntry();
      if (this.\uE00B.Count == int.MaxValue)
        throw new ZipException(\uE01B.\uE000("\uF627\uF61C\uF61C\uF653\uF61E\uF612\uF61D\uF60A\uF653\uF616\uF61D\uF607\uF601\uF61A\uF616\uF600\uF653\uF615\uF61C\uF601\uF653\uF629\uF61A\uF603\uF653\uF615\uF61A\uF61F\uF616", 63091));
      CompressionMethod compressionMethod = entry.CompressionMethod;
      int level = this.\uE008;
      entry.Flags &= 2048;
      this.\uE003 = false;
      bool flag;
      if (entry.Size == 0L)
      {
        entry.CompressedSize = entry.Size;
        entry.Crc = 0L;
        compressionMethod = CompressionMethod.Stored;
        flag = true;
      }
      else
      {
        flag = entry.Size >= 0L && entry.HasCrc;
        if (compressionMethod == CompressionMethod.Stored)
        {
          if (!flag)
          {
            if (!this.CanPatchEntries)
            {
              compressionMethod = CompressionMethod.Deflated;
              level = 0;
            }
          }
          else
          {
            entry.CompressedSize = entry.Size;
            flag = entry.HasCrc;
          }
        }
      }
      if (!flag)
      {
        if (!this.CanPatchEntries)
          entry.Flags |= 8;
        else
          this.\uE003 = true;
      }
      if (this.Password != null)
      {
        entry.IsCrypted = true;
        if (entry.Crc < 0L)
          entry.Flags |= 8;
      }
      entry.Offset = this.\uE005;
      entry.CompressionMethod = compressionMethod;
      this.\uE007 = compressionMethod;
      this.\uE001 = -1L;
      if (this.\uE000 == UseZip64.On || entry.Size < 0L && this.\uE000 == UseZip64.Dynamic)
        entry.ForceZip64();
      this.\uE002(67324752);
      this.\uE003(entry.Version);
      this.\uE003(entry.Flags);
      this.\uE003((int) (byte) compressionMethod);
      this.\uE002((int) entry.DosTime);
      if (flag)
      {
        this.\uE002((int) entry.Crc);
        if (entry.LocalHeaderRequiresZip64)
        {
          this.\uE002(-1);
          this.\uE002(-1);
        }
        else
        {
          this.\uE002(entry.IsCrypted ? (int) entry.CompressedSize + 12 : (int) entry.CompressedSize);
          this.\uE002((int) entry.Size);
        }
      }
      else
      {
        if (this.\uE003)
          this.\uE002 = this.baseOutputStream_.Position;
        this.\uE002(0);
        if (this.\uE003)
          this.\uE001 = this.baseOutputStream_.Position;
        if (entry.LocalHeaderRequiresZip64 || this.\uE003)
        {
          this.\uE002(-1);
          this.\uE002(-1);
        }
        else
        {
          this.\uE002(0);
          this.\uE002(0);
        }
      }
      byte[] array = ZipConstants.ConvertToArray(entry.Flags, entry.Name);
      if (array.Length > (int) ushort.MaxValue)
        throw new ZipException(\uE01B.\uE000("\uF179\uF152\uF148\uF14E\uF145\uF11C\uF152\uF15D\uF151\uF159\uF11C\uF148\uF153\uF153\uF11C\uF150\uF153\uF152\uF15B\uF112", 61756));
      ZipExtraData zipExtraData = new ZipExtraData(entry.ExtraData);
      if (entry.LocalHeaderRequiresZip64)
      {
        zipExtraData.StartNewEntry();
        if (flag)
        {
          zipExtraData.AddLeLong(entry.Size);
          zipExtraData.AddLeLong(entry.CompressedSize);
        }
        else
        {
          zipExtraData.AddLeLong(-1L);
          zipExtraData.AddLeLong(-1L);
        }
        zipExtraData.AddNewEntry(1);
        if (!zipExtraData.Find(1))
          throw new ZipException(\uE01B.\uE000("\uE2ED\uE2CA\uE2D0\uE2C1\uE2D6\uE2CA\uE2C5\uE2C8\uE284\uE2C1\uE2D6\uE2D6\uE2CB\uE2D6\uE284\uE2C7\uE2C5\uE2CA\uE2D0\uE284\uE2C2\uE2CD\uE2CA\uE2C0\uE284\uE2C1\uE2DC\uE2D0\uE2D6\uE2C5\uE284\uE2C0\uE2C5\uE2D0\uE2C5", 58020));
        if (this.\uE003)
          this.\uE001 = (long) zipExtraData.CurrentReadIndex;
      }
      else
        zipExtraData.Delete(1);
      byte[] entryData = zipExtraData.GetEntryData();
      this.\uE003(array.Length);
      this.\uE003(entryData.Length);
      if (array.Length > 0)
        this.baseOutputStream_.Write(array, 0, array.Length);
      if (entry.LocalHeaderRequiresZip64 && this.\uE003)
        this.\uE001 += this.baseOutputStream_.Position;
      if (entryData.Length > 0)
        this.baseOutputStream_.Write(entryData, 0, entryData.Length);
      this.\uE005 += (long) (30 + array.Length + entryData.Length);
      this.\uE009 = entry;
      this.\uE00A.Reset();
      if (compressionMethod == CompressionMethod.Deflated)
      {
        this.deflater_.Reset();
        this.deflater_.SetLevel(level);
      }
      this.\uE006 = 0L;
      if (!entry.IsCrypted)
        return;
      if (entry.Crc < 0L)
        this.\uE000(entry.DosTime << 16);
      else
        this.\uE000(entry.Crc);
    }

    public void CloseEntry()
    {
      if (this.\uE009 == null)
        throw new InvalidOperationException(\uE01B.\uE000("\uE1E8\uE1C9\uE186\uE1C9\uE1D6\uE1C3\uE1C8\uE186\uE1C3\uE1C8\uE1D2\uE1D4\uE1DF", 57766));
      long totalOut = this.\uE006;
      if (this.\uE007 == CompressionMethod.Deflated)
      {
        if (this.\uE006 > 0L)
        {
          base.Finish();
          totalOut = this.deflater_.TotalOut;
        }
        else
          this.deflater_.Reset();
      }
      if (this.\uE009.Size < 0L)
        this.\uE009.Size = this.\uE006;
      else if (this.\uE009.Size != this.\uE006)
        throw new ZipException(\uE01B.\uE000("\uE14F\uE155\uE146\uE159\uE11C\uE14B\uE15D\uE14F\uE11C", 57660) + (object) this.\uE006 + \uE01B.\uE000("\uE4ED\uE4E1\uE4A3\uE4B4\uE4B5\uE4E1\uE488\uE4E1\uE4A4\uE4B9\uE4B1\uE4A4\uE4A2\uE4B5\uE4A4\uE4A5\uE4E1", 58561) + (object) this.\uE009.Size);
      if (this.\uE009.CompressedSize < 0L)
        this.\uE009.CompressedSize = totalOut;
      else if (this.\uE009.CompressedSize != totalOut)
        throw new ZipException(\uE01B.\uE000("\uF78D\uF781\uF783\uF79E\uF79C\uF78B\uF79D\uF79D\uF78B\uF78A\uF7CE\uF79D\uF787\uF794\uF78B\uF7CE\uF799\uF78F\uF79D\uF7CE", 63470) + (object) totalOut + \uE01B.\uE000("\uE4ED\uE4E1\uE4A3\uE4B4\uE4B5\uE4E1\uE488\uE4E1\uE4A4\uE4B9\uE4B1\uE4A4\uE4A2\uE4B5\uE4A4\uE4A5\uE4E1", 58561) + (object) this.\uE009.CompressedSize);
      if (this.\uE009.Crc < 0L)
        this.\uE009.Crc = this.\uE00A.Value;
      else if (this.\uE009.Crc != this.\uE00A.Value)
        throw new ZipException(\uE01B.\uE000("\uE458\uE449\uE458\uE41B\uE44C\uE45A\uE448\uE41B", 58427) + (object) this.\uE00A.Value + \uE01B.\uE000("\uE4ED\uE4E1\uE4A3\uE4B4\uE4B5\uE4E1\uE488\uE4E1\uE4A4\uE4B9\uE4B1\uE4A4\uE4A2\uE4B5\uE4A4\uE4A5\uE4E1", 58561) + (object) this.\uE009.Crc);
      this.\uE005 += totalOut;
      if (this.\uE009.IsCrypted)
        this.\uE009.CompressedSize += 12L;
      if (this.\uE003)
      {
        this.\uE003 = false;
        long position = this.baseOutputStream_.Position;
        this.baseOutputStream_.Seek(this.\uE002, SeekOrigin.Begin);
        this.\uE002((int) this.\uE009.Crc);
        if (this.\uE009.LocalHeaderRequiresZip64)
        {
          if (this.\uE001 == -1L)
            throw new ZipException(\uE01B.\uE000("\uE23C\uE217\uE20D\uE20B\uE200\uE259\uE20B\uE21C\uE208\uE20C\uE210\uE20B\uE21C\uE20A\uE259\uE203\uE210\uE209\uE24F\uE24D\uE259\uE21B\uE20C\uE20D\uE259\uE20D\uE211\uE210\uE20A\uE259\uE211\uE218\uE20A\uE259\uE21B\uE21C\uE21C\uE217\uE259\uE20D\uE20C\uE20B\uE217\uE21C\uE21D\uE259\uE216\uE21F\uE21F", 57977));
          this.baseOutputStream_.Seek(this.\uE001, SeekOrigin.Begin);
          this.\uE001(this.\uE009.Size);
          this.\uE001(this.\uE009.CompressedSize);
        }
        else
        {
          this.\uE002((int) this.\uE009.CompressedSize);
          this.\uE002((int) this.\uE009.Size);
        }
        this.baseOutputStream_.Seek(position, SeekOrigin.Begin);
      }
      if ((this.\uE009.Flags & 8) != 0)
      {
        this.\uE002(134695760);
        this.\uE002((int) this.\uE009.Crc);
        if (this.\uE009.LocalHeaderRequiresZip64)
        {
          this.\uE001(this.\uE009.CompressedSize);
          this.\uE001(this.\uE009.Size);
          this.\uE005 += 24L;
        }
        else
        {
          this.\uE002((int) this.\uE009.CompressedSize);
          this.\uE002((int) this.\uE009.Size);
          this.\uE005 += 16L;
        }
      }
      this.\uE00B.Add((object) this.\uE009);
      this.\uE009 = (ZipEntry) null;
    }

    private void \uE000(long _param1)
    {
      this.\uE005 += 12L;
      this.InitializePassword(this.Password);
      byte[] buffer = new byte[12];
      new Random().NextBytes(buffer);
      buffer[11] = (byte) (_param1 >> 24);
      this.EncryptBlock(buffer, 0, buffer.Length);
      this.baseOutputStream_.Write(buffer, 0, buffer.Length);
    }

    public override void Write(byte[] buffer, int offset, int count)
    {
      if (this.\uE009 == null)
        throw new InvalidOperationException(\uE01B.\uE000("\uF7D4\uF7F5\uF7BA\uF7F5\uF7EA\uF7FF\uF7F4\uF7BA\uF7FF\uF7F4\uF7EE\uF7E8\uF7E3\uF7B4", 63386));
      if (buffer == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEDC8\uEDDF\uEDCC\uEDCC\uEDCF\uEDD8", 60842));
      if (offset < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uF201\uF208\uF208\uF21D\uF20B\uF21A", 62062), \uE01B.\uE000("\uF4AA\uF488\uF487\uF487\uF486\uF49D\uF4C9\uF48B\uF48C\uF4C9\uF487\uF48C\uF48E\uF488\uF49D\uF480\uF49F\uF48C", 62697));
      if (count < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uED5B\uED57\uED4D\uED56\uED4C", 60728), \uE01B.\uE000("\uF4AA\uF488\uF487\uF487\uF486\uF49D\uF4C9\uF48B\uF48C\uF4C9\uF487\uF48C\uF48E\uF488\uF49D\uF480\uF49F\uF48C", 62697));
      if (buffer.Length - offset < count)
        throw new ArgumentException(\uE01B.\uE000("\uE3CD\uE3EA\uE3F2\uE3E5\uE3E8\uE3ED\uE3E0\uE3A4\uE3EB\uE3E2\uE3E2\uE3F7\uE3E1\uE3F0\uE3AB\uE3E7\uE3EB\uE3F1\uE3EA\uE3F0\uE3A4\uE3E7\uE3EB\uE3E9\uE3E6\uE3ED\uE3EA\uE3E5\uE3F0\uE3ED\uE3EB\uE3EA", 58244));
      this.\uE00A.Update(buffer, offset, count);
      this.\uE006 += (long) count;
      switch (this.\uE007)
      {
        case CompressionMethod.Stored:
          if (this.Password != null)
          {
            this.\uE000(buffer, offset, count);
            break;
          }
          this.baseOutputStream_.Write(buffer, offset, count);
          break;
        case CompressionMethod.Deflated:
          base.Write(buffer, offset, count);
          break;
      }
    }

    private void \uE000(byte[] _param1, int _param2, int _param3)
    {
      byte[] numArray = new byte[4096];
      while (_param3 > 0)
      {
        int num = _param3 < 4096 ? _param3 : 4096;
        Array.Copy((Array) _param1, _param2, (Array) numArray, 0, num);
        this.EncryptBlock(numArray, 0, num);
        this.baseOutputStream_.Write(numArray, 0, num);
        _param3 -= num;
        _param2 += num;
      }
    }

    public override void Finish()
    {
      if (this.\uE00B == null)
        return;
      if (this.\uE009 != null)
        this.CloseEntry();
      long count = (long) this.\uE00B.Count;
      long num = 0;
      foreach (ZipEntry zipEntry in this.\uE00B)
      {
        this.\uE002(33639248);
        this.\uE003(45);
        this.\uE003(zipEntry.Version);
        this.\uE003(zipEntry.Flags);
        this.\uE003((int) (short) zipEntry.CompressionMethod);
        this.\uE002((int) zipEntry.DosTime);
        this.\uE002((int) zipEntry.Crc);
        if (zipEntry.IsZip64Forced() || zipEntry.CompressedSize >= (long) uint.MaxValue)
          this.\uE002(-1);
        else
          this.\uE002((int) zipEntry.CompressedSize);
        if (zipEntry.IsZip64Forced() || zipEntry.Size >= (long) uint.MaxValue)
          this.\uE002(-1);
        else
          this.\uE002((int) zipEntry.Size);
        byte[] array = ZipConstants.ConvertToArray(zipEntry.Flags, zipEntry.Name);
        if (array.Length > (int) ushort.MaxValue)
          throw new ZipException(\uE01B.\uE000("\uE897\uE8B8\uE8B4\uE8BC\uE8F9\uE8AD\uE8B6\uE8B6\uE8F9\uE8B5\uE8B6\uE8B7\uE8BE\uE8F7", 59609));
        ZipExtraData zipExtraData = new ZipExtraData(zipEntry.ExtraData);
        if (zipEntry.CentralHeaderRequiresZip64)
        {
          zipExtraData.StartNewEntry();
          if (zipEntry.IsZip64Forced() || zipEntry.Size >= (long) uint.MaxValue)
            zipExtraData.AddLeLong(zipEntry.Size);
          if (zipEntry.IsZip64Forced() || zipEntry.CompressedSize >= (long) uint.MaxValue)
            zipExtraData.AddLeLong(zipEntry.CompressedSize);
          if (zipEntry.Offset >= (long) uint.MaxValue)
            zipExtraData.AddLeLong(zipEntry.Offset);
          zipExtraData.AddNewEntry(1);
        }
        else
          zipExtraData.Delete(1);
        byte[] entryData = zipExtraData.GetEntryData();
        byte[] buffer = zipEntry.Comment != null ? ZipConstants.ConvertToArray(zipEntry.Flags, zipEntry.Comment) : new byte[0];
        if (buffer.Length > (int) ushort.MaxValue)
          throw new ZipException(\uE01B.\uE000("\uF38C\uF3A0\uF3A2\uF3A2\uF3AA\uF3A1\uF3BB\uF3EF\uF3BB\uF3A0\uF3A0\uF3EF\uF3A3\uF3A0\uF3A1\uF3A8\uF3E1", 62415));
        this.\uE003(array.Length);
        this.\uE003(entryData.Length);
        this.\uE003(buffer.Length);
        this.\uE003(0);
        this.\uE003(0);
        if (zipEntry.ExternalFileAttributes != -1)
          this.\uE002(zipEntry.ExternalFileAttributes);
        else if (zipEntry.IsDirectory)
          this.\uE002(16);
        else
          this.\uE002(0);
        if (zipEntry.Offset >= (long) uint.MaxValue)
          this.\uE002(-1);
        else
          this.\uE002((int) zipEntry.Offset);
        if (array.Length > 0)
          this.baseOutputStream_.Write(array, 0, array.Length);
        if (entryData.Length > 0)
          this.baseOutputStream_.Write(entryData, 0, entryData.Length);
        if (buffer.Length > 0)
          this.baseOutputStream_.Write(buffer, 0, buffer.Length);
        num += (long) (46 + array.Length + entryData.Length + buffer.Length);
      }
      using (\uE00B obj = new \uE00B(this.baseOutputStream_))
        obj.\uE000(count, num, this.\uE005, this.\uE004);
      this.\uE00B = (ArrayList) null;
    }
  }
}
