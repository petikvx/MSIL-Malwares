// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ErrorReportSender
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.Shared;
using SmartAssembly.Zip;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

namespace SmartAssembly.SmartExceptionsCore
{
  internal class ErrorReportSender : ReportSender2
  {
    private const string CryptoPublicKey = "{bf13b64c-b3d2-4165-b3f5-7f852d4744cf}";
    private const string ExcludeFieldCaptureNamespaces = "{07572d6f-5375-47d5-8a8c-b5f0cbe5bad0}";
    private const string RenamingScheme = "{6d3806d4-1193-4601-a7df-2249c7f0014b}";
    private const string EmailToBeNotified = "{d316c294-ed40-4778-8b7b-29800a2dcbc3}";
    private const string ProductFriendlyName = "{a9035fc5-7ed1-4e0c-8962-dfcb1d508afc}";
    private const string BuildFriendlyNumber = "{73fbfb9b-41e7-4744-bf74-74b7c6c117c1}";
    private const string SmartAssemblyExe = "SmartAssembly.exe";
    private readonly Exception m_CurrentException;
    private readonly Guid m_UserId;
    private readonly char[] m_ObfuscationChars = new char[0];
    private readonly Dictionary<string, object> m_CustomProperties = new Dictionary<string, object>();
    private readonly Dictionary<string, ErrorReportSender.AttachedFile> m_AttachedFiles = new Dictionary<string, ErrorReportSender.AttachedFile>();
    private readonly XmlWriter m_XmlWriter;
    private readonly List<ObjectAndType> m_ExceptionObjects = new List<ObjectAndType>();
    private readonly List<string> m_TypeNames = new List<string>();
    private readonly Dictionary<string, int> m_TypeNamesCache = new Dictionary<string, int>();
    private readonly List<ErrorReportSender.AssemblyInformation> m_AssemblyIDs = new List<ErrorReportSender.AssemblyInformation>();
    private readonly Dictionary<string, int> m_AssemblyIDsCache = new Dictionary<string, int>();
    private readonly MemoryStream m_MemoryStream;
    private byte[] m_ReportData;

    public ErrorReportSender(Guid userId, Exception currentException, IWebProxy proxy)
    {
      this.m_UserId = userId;
      this.m_CurrentException = currentException;
      this.m_MemoryStream = new MemoryStream();
      this.m_XmlWriter = (XmlWriter) new XmlTextWriter((Stream) this.m_MemoryStream, (Encoding) new UTF8Encoding(false));
      this.SetProxy(proxy);
      switch ("UNICODE".ToUpper())
      {
        case "ASCII":
          this.m_ObfuscationChars = new char[62]
          {
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't',
            'u',
            'v',
            'w',
            'x',
            'y',
            'z',
            'A',
            'B',
            'C',
            'D',
            'E',
            'F',
            'G',
            'H',
            'I',
            'J',
            'K',
            'L',
            'M',
            'N',
            'O',
            'P',
            'Q',
            'R',
            'S',
            'T',
            'U',
            'V',
            'W',
            'X',
            'Y',
            'Z',
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9'
          };
          break;
        case "UNICODE":
          this.m_ObfuscationChars = new char[58]
          {
            '\u0001',
            '\u0002',
            '\u0003',
            '\u0004',
            '\u0005',
            '\u0006',
            '\a',
            '\b',
            '\u000E',
            '\u000F',
            '\u0010',
            '\u0011',
            '\u0012',
            '\u0013',
            '\u0014',
            '\u0015',
            '\u0016',
            '\u0017',
            '\u0018',
            '\u0019',
            '\u001A',
            '\u001B',
            '\u001C',
            '\u001D',
            '\u001E',
            '\u001F',
            '\u007F',
            '\u0080',
            '\u0081',
            '\u0082',
            '\u0083',
            '\u0084',
            '\u0086',
            '\u0087',
            '\u0088',
            '\u0089',
            '\u008A',
            '\u008B',
            '\u008C',
            '\u008D',
            '\u008E',
            '\u008F',
            '\u0090',
            '\u0091',
            '\u0092',
            '\u0093',
            '\u0094',
            '\u0095',
            '\u0096',
            '\u0097',
            '\u0098',
            '\u0099',
            '\u009A',
            '\u009B',
            '\u009C',
            '\u009D',
            '\u009E',
            '\u009F'
          };
          break;
      }
    }

    private static string GetHexValue(object o)
    {
      try
      {
        switch (o)
        {
          case null:
            return string.Empty;
          case int num1:
            return num1.ToString("x");
          case long num2:
            return num2.ToString("x");
          case short num3:
            return num3.ToString("x");
          case uint num4:
            return num4.ToString("x");
          case ulong num5:
            return num5.ToString("x");
          case ushort num6:
            return num6.ToString("x");
          case byte num7:
            return num7.ToString("x");
          case sbyte num8:
            return num8.ToString("x");
          case IntPtr num9:
            return num9.ToInt64().ToString("x");
          case UIntPtr num10:
            return num10.ToUInt64().ToString("x");
        }
      }
      catch
      {
      }
      return string.Empty;
    }

    private static string GetValidatedInformation(string value) => value.StartsWith("\"<RSAKeyValue>") && value.EndsWith("</RSAKeyValue>\"") ? "*** Information not reported for security reasons ***" : value;

    private void SaveObjectInformation(ObjectAndType objectAndType, FieldInfo fieldType)
    {
      string name1 = (object) fieldType == null ? (string) null : fieldType.Name;
      string name2 = (object) fieldType == null ? "Object" : "Field";
      object o = objectAndType.GetObject();
      if (o == null)
      {
        using (new XmlElementSpanner(this.m_XmlWriter, name2))
        {
          if ((object) fieldType != null)
          {
            if (fieldType.IsStatic)
              this.m_XmlWriter.WriteAttributeString("Static", "1");
            System.Type fieldType1 = fieldType.FieldType;
            if ((object) fieldType1 != null && fieldType1.HasElementType)
            {
              this.AddObjectTypeAttribute(fieldType1.GetElementType());
              if (fieldType1.IsByRef)
                this.m_XmlWriter.WriteAttributeString("ByRef", "1");
              if (fieldType1.IsPointer)
                this.m_XmlWriter.WriteAttributeString("Pointer", "1");
              if (fieldType1.IsArray)
                this.m_XmlWriter.WriteAttributeString("Rank", fieldType1.GetArrayRank().ToString());
            }
            else
              this.AddObjectTypeAttribute(fieldType1);
          }
          if (name1 != null)
            this.AddNameAttribute(name1);
          this.m_XmlWriter.WriteAttributeString("Null", "1");
        }
      }
      else
      {
        System.Type type = objectAndType.GetObject().GetType();
        string str1 = (string) null;
        string str2 = (string) null;
        if (o is string)
          str1 = "System.String";
        if (str1 == null)
        {
          if (type.IsPrimitive || o is IntPtr || o is UIntPtr)
          {
            str1 = type.FullName;
            if (o is char ch)
            {
              int num = (int) ch;
              StringBuilder stringBuilder = new StringBuilder();
              if (num >= 32)
              {
                stringBuilder.Append('\'');
                stringBuilder.Append((char) o);
                stringBuilder.Append("' ");
              }
              stringBuilder.Append("(0x");
              stringBuilder.Append(num.ToString("x"));
              stringBuilder.Append(')');
              str2 = stringBuilder.ToString();
            }
            if (o is bool)
              str2 = o.ToString().ToLower();
            if (str2 == null)
            {
              string hexValue = ErrorReportSender.GetHexValue(o);
              if (hexValue.Length > 0)
              {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.Append(o.ToString());
                stringBuilder.Append(" (0x");
                stringBuilder.Append(hexValue);
                stringBuilder.Append(')');
                str2 = stringBuilder.ToString();
              }
              else
                str2 = o.ToString();
            }
          }
          else if (type.IsValueType && (object) type.Module != (object) this.GetType().Module)
            str1 = type.FullName;
        }
        using (new XmlElementSpanner(this.m_XmlWriter, name2))
        {
          if ((object) fieldType != null && fieldType.IsStatic)
            this.m_XmlWriter.WriteAttributeString("Static", "1");
          if (str1 != null)
          {
            this.AddObjectTypeAttribute(type);
            if (name1 != null)
              this.AddNameAttribute(name1);
            if (type.IsEnum)
              str2 = o.ToString();
            if (o is Guid)
              str2 = "{" + o + "}";
            if (str2 == null)
              str2 = "\"" + o + "\"";
            this.m_XmlWriter.WriteAttributeString("Value", ErrorReportSender.GetValidatedInformation(str2));
          }
          else
          {
            if ((object) fieldType != null)
              this.AddObjectTypeAttribute(fieldType.FieldType);
            this.SaveObjectAndWriteIDAttribute(objectAndType);
            if (name1 == null)
              return;
            this.AddNameAttribute(name1);
          }
        }
      }
    }

    private void SaveObjectAndWriteIDAttribute(ObjectAndType objectAndType)
    {
      object objB = objectAndType.GetObject();
      int num = -1;
      for (int index = 0; index < this.m_ExceptionObjects.Count; ++index)
      {
        if (object.ReferenceEquals(this.m_ExceptionObjects[index].GetObject(), objB))
        {
          num = index;
          break;
        }
      }
      if (num == -1)
      {
        num = this.m_ExceptionObjects.Count;
        this.m_ExceptionObjects.Add(objectAndType);
      }
      this.m_XmlWriter.WriteAttributeString("ID", num.ToString());
    }

    private void AddNameAttribute(string name)
    {
      int fromObfuscatedName = this.GetIDFromObfuscatedName(name);
      if (fromObfuscatedName != -1)
        this.m_XmlWriter.WriteAttributeString("NameID", fromObfuscatedName.ToString());
      else
        this.m_XmlWriter.WriteAttributeString("Name", name);
    }

    private static ErrorReportSender.TypeInformation GetTypeInformation(
      System.Type objectType)
    {
      ErrorReportSender.TypeInformation empty = ErrorReportSender.TypeInformation.Empty;
      if ((object) objectType != null && (object) objectType.Assembly.GetType("SmartAssembly.Attributes.PoweredByAttribute") != null)
      {
        empty.ID = ((objectType.MetadataToken & 16777215) - 1).ToString();
        Assembly assembly = objectType.Assembly;
        empty.AssemblyInformation = new ErrorReportSender.AssemblyInformation(assembly.ManifestModule.ModuleVersionId.ToString("B"), assembly.FullName);
      }
      return empty;
    }

    private int GetIndexForAssemblyID(ErrorReportSender.TypeInformation typeInformation)
    {
      string upper = typeInformation.AssemblyInformation.AssemblyId.ToUpper();
      if (this.m_AssemblyIDsCache.ContainsKey(upper))
        return this.m_AssemblyIDsCache[upper];
      int count = this.m_AssemblyIDs.Count;
      this.m_AssemblyIDs.Add(typeInformation.AssemblyInformation);
      this.m_AssemblyIDsCache.Add(upper, count);
      return count;
    }

    private void AddObjectTypeAttribute(System.Type objectType)
    {
      if ((object) objectType == null)
        return;
      try
      {
        ErrorReportSender.TypeInformation typeInformation = ErrorReportSender.GetTypeInformation(objectType);
        if (!typeInformation.IsEmpty)
        {
          this.m_XmlWriter.WriteAttributeString("TypeDefID", typeInformation.ID);
          int indexForAssemblyId = this.GetIndexForAssemblyID(typeInformation);
          if (indexForAssemblyId <= 0)
            return;
          this.m_XmlWriter.WriteAttributeString("Assembly", indexForAssemblyId.ToString());
        }
        else
        {
          string fullName = objectType.FullName;
          int count;
          if (this.m_TypeNamesCache.ContainsKey(fullName))
          {
            count = this.m_TypeNamesCache[fullName];
          }
          else
          {
            StringBuilder stringBuilder = new StringBuilder();
            string name = objectType.Assembly.GetName().Name;
            if (name.Length > 0 && name != "mscorlib")
            {
              stringBuilder.Append('[');
              stringBuilder.Append(name);
              stringBuilder.Append(']');
            }
            string str1 = objectType.Namespace;
            if (str1.Length > 0)
            {
              stringBuilder.Append(str1);
              stringBuilder.Append('.');
            }
            if (objectType.HasElementType)
              objectType = objectType.GetElementType();
            int num = fullName.LastIndexOf("+");
            if (num > 0)
            {
              string str2 = fullName.Substring(str1.Length + 1, num - str1.Length).Replace("+", "/");
              stringBuilder.Append(str2);
            }
            stringBuilder.Append(objectType.Name);
            count = this.m_TypeNames.Count;
            this.m_TypeNames.Add(stringBuilder.ToString());
            this.m_TypeNamesCache.Add(fullName, count);
          }
          this.m_XmlWriter.WriteAttributeString("TypeName", count.ToString());
        }
      }
      catch
      {
      }
    }

    private int GetIDFromObfuscatedName(string obfuscatedName)
    {
      try
      {
        bool flag1 = this.m_ObfuscationChars[0] == '\u0001';
        switch (obfuscatedName)
        {
          case "":
          case null:
            return -1;
          default:
            if ((!flag1 || obfuscatedName.Length <= 4) && (flag1 || obfuscatedName[0] == '#'))
            {
              int fromObfuscatedName = 0;
              for (int index1 = obfuscatedName.Length - 1; index1 >= 0 && (flag1 || index1 != 0); --index1)
              {
                char ch = obfuscatedName[index1];
                bool flag2 = false;
                for (int index2 = 0; index2 < this.m_ObfuscationChars.Length; ++index2)
                {
                  if ((int) this.m_ObfuscationChars[index2] == (int) ch)
                  {
                    fromObfuscatedName = fromObfuscatedName * this.m_ObfuscationChars.Length + index2;
                    flag2 = true;
                    break;
                  }
                }
                if (!flag2)
                  return -1;
              }
              return fromObfuscatedName;
            }
            goto case "";
        }
      }
      catch
      {
        return -1;
      }
    }

    private static string GetExecutablePath()
    {
      try
      {
        return Application.ExecutablePath;
      }
      catch
      {
        return "N/A";
      }
    }

    private Assembly[] GetAssemblies()
    {
      try
      {
        return AppDomain.CurrentDomain.GetAssemblies();
      }
      catch
      {
        return new Assembly[1]
        {
          ErrorReportSender.GetCurrentAssembly()
        };
      }
    }

    private static Assembly GetCurrentAssembly()
    {
      try
      {
        return Assembly.GetExecutingAssembly();
      }
      catch
      {
        return (Assembly) null;
      }
    }

    internal byte[] GetReportRawData() => this.GetReportData();

    private byte[] GetReportData()
    {
      if (this.m_ReportData != null)
        return this.m_ReportData;
      this.m_XmlWriter.WriteStartDocument();
      using (new XmlElementSpanner(this.m_XmlWriter, "UnhandledExceptionReport"))
      {
        this.m_XmlWriter.WriteAttributeString("AssemblyID", "{FA0844EB-EF82-404C-B76C-C092ABDB9392}".ToUpper());
        this.m_XmlWriter.WriteAttributeString("DateTime", DateTime.Now.ToString("s"));
        this.m_XmlWriter.WriteAttributeString("Path", ErrorReportSender.GetExecutablePath());
        if (this.m_UserId != Guid.Empty)
          this.m_XmlWriter.WriteAttributeString("UserID", this.m_UserId.ToString("B"));
        this.m_XmlWriter.WriteAttributeString("ReportID", Guid.NewGuid().ToString("B"));
        if (this.m_AssemblyIDs.Count > 0)
          this.m_AssemblyIDs.Clear();
        this.m_AssemblyIDs.Add(new ErrorReportSender.AssemblyInformation("{FA0844EB-EF82-404C-B76C-C092ABDB9392}", string.Empty));
        if (this.m_AssemblyIDsCache.Count > 0)
          this.m_AssemblyIDsCache.Clear();
        this.m_AssemblyIDsCache.Add("{FA0844EB-EF82-404C-B76C-C092ABDB9392}", 0);
        using (new XmlElementSpanner(this.m_XmlWriter, "Assemblies"))
        {
          Assembly currentAssembly = ErrorReportSender.GetCurrentAssembly();
          foreach (Assembly assembly in this.GetAssemblies())
          {
            if ((object) assembly != null)
            {
              using (new XmlElementSpanner(this.m_XmlWriter, "Assembly"))
              {
                try
                {
                  this.m_XmlWriter.WriteAttributeString("Name", assembly.FullName);
                  this.m_XmlWriter.WriteAttributeString("CodeBase", assembly.CodeBase);
                  if ((object) assembly == (object) currentAssembly)
                    this.m_XmlWriter.WriteAttributeString("This", "1");
                }
                catch
                {
                }
              }
            }
          }
        }
        using (new XmlElementSpanner(this.m_XmlWriter, "CustomProperties"))
        {
          if (this.m_CustomProperties != null)
          {
            if (this.m_CustomProperties.Count > 0)
            {
              foreach (string key in this.m_CustomProperties.Keys)
              {
                using (new XmlElementSpanner(this.m_XmlWriter, "CustomProperty"))
                {
                  this.m_XmlWriter.WriteAttributeString("Name", key);
                  string customProperty = (string) this.m_CustomProperties[key];
                  if (customProperty == null)
                    this.m_XmlWriter.WriteAttributeString("Null", "1");
                  else
                    this.m_XmlWriter.WriteAttributeString("Value", "\"" + customProperty + "\"");
                }
              }
            }
          }
        }
        if (this.m_AttachedFiles != null && this.m_AttachedFiles.Count > 0)
        {
          using (new XmlElementSpanner(this.m_XmlWriter, "AttachedFiles"))
          {
            foreach (string key in this.m_AttachedFiles.Keys)
            {
              using (new XmlElementSpanner(this.m_XmlWriter, "AttachedFile"))
              {
                this.m_XmlWriter.WriteAttributeString("Key", key);
                ErrorReportSender.AttachedFile attachedFile = this.m_AttachedFiles[key];
                this.m_XmlWriter.WriteAttributeString("FileName", attachedFile.FileName);
                this.m_XmlWriter.WriteAttributeString("Length", attachedFile.Length.ToString());
                if (attachedFile.Error.Length > 0)
                  this.m_XmlWriter.WriteAttributeString("Error", attachedFile.Error);
                else
                  this.m_XmlWriter.WriteAttributeString("Data", attachedFile.Data);
              }
            }
          }
        }
        using (new XmlElementSpanner(this.m_XmlWriter, "SystemInformation"))
        {
          try
          {
            this.m_XmlWriter.WriteElementString("NETVersion", Environment.Version.ToString());
            this.m_XmlWriter.WriteElementString("OSVersion", Environment.OSVersion.Version.ToString());
            this.m_XmlWriter.WriteElementString("OSPlatformID", Environment.OSVersion.Platform.ToString());
            this.m_XmlWriter.WriteElementString("ServicePack", Win321.ServicePack);
            this.m_XmlWriter.WriteElementString("ServerR2", Win321.IsServerR2 ? "1" : "0");
            this.m_XmlWriter.WriteElementString("X64", Win321.IsX64 ? "1" : "0");
            this.m_XmlWriter.WriteElementString("Workstation", Win321.IsWorkstation ? "1" : "0");
          }
          catch
          {
          }
        }
        List<Exception> exceptionList = new List<Exception>();
        for (Exception exception = this.m_CurrentException; exception != null; exception = exception.InnerException)
          exceptionList.Add(exception);
        exceptionList.Reverse();
        using (new XmlElementSpanner(this.m_XmlWriter, "StackTrace"))
        {
          foreach (Exception exceptionToWrite in exceptionList)
          {
            try
            {
              this.WriteException(exceptionToWrite);
              if (exceptionToWrite.Data.Contains((object) "SmartStackFrames"))
              {
                ICollection collection = (ICollection) exceptionToWrite.Data[(object) "SmartStackFrames"];
                int count = collection.Count;
                int num1 = 0;
                foreach (object obj in (IEnumerable) collection)
                {
                  try
                  {
                    System.Type type = obj.GetType();
                    ++num1;
                    if (num1 > 100 && num1 == count - 100)
                    {
                      using (new XmlElementSpanner(this.m_XmlWriter, "RemovedFrames"))
                        this.m_XmlWriter.WriteAttributeString("TotalFramesCount", count.ToString());
                    }
                    else
                    {
                      if (num1 > 100)
                      {
                        if (num1 <= count - 100)
                          continue;
                      }
                      int num2 = (int) type.GetField("MethodID").GetValue(obj);
                      int num3 = (int) type.GetField("ILOffset").GetValue(obj);
                      int num4 = (int) type.GetField("ExceptionStackDepth").GetValue(obj);
                      object[] objArray = (object[]) type.GetField("Objects").GetValue(obj);
                      ErrorReportSender.TypeInformation typeInformation = ErrorReportSender.GetTypeInformation(type);
                      if (!typeInformation.IsEmpty)
                      {
                        using (new XmlElementSpanner(this.m_XmlWriter, "StackFrame"))
                        {
                          this.m_XmlWriter.WriteAttributeString("MethodID", num2.ToString());
                          this.m_XmlWriter.WriteAttributeString("ExceptionStackDepth", num4.ToString());
                          int indexForAssemblyId = this.GetIndexForAssemblyID(typeInformation);
                          if (indexForAssemblyId > 0)
                            this.m_XmlWriter.WriteAttributeString("Assembly", indexForAssemblyId.ToString());
                          if (num3 != -1)
                            this.m_XmlWriter.WriteAttributeString("ILOffset", num3.ToString());
                          foreach (object o in objArray)
                          {
                            try
                            {
                              this.SaveObjectInformation(new ObjectAndType(o, true), (FieldInfo) null);
                            }
                            catch
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                  catch
                  {
                  }
                }
              }
            }
            catch
            {
            }
          }
        }
        this.WriteObjects();
        using (new XmlElementSpanner(this.m_XmlWriter, "TypeNames"))
        {
          this.m_XmlWriter.WriteAttributeString("Count", this.m_TypeNames.Count.ToString());
          for (int index = 0; index < this.m_TypeNames.Count; ++index)
          {
            string str;
            try
            {
              str = this.m_TypeNames[index].ToString();
            }
            catch (Exception ex)
            {
              str = '"'.ToString() + ex.Message + (object) '"';
            }
            this.m_XmlWriter.WriteElementString("TypeName", str);
          }
        }
        using (new XmlElementSpanner(this.m_XmlWriter, "AssemblyIDs"))
        {
          this.m_XmlWriter.WriteAttributeString("Count", this.m_AssemblyIDs.Count.ToString());
          for (int index = 0; index < this.m_AssemblyIDs.Count; ++index)
          {
            using (new XmlElementSpanner(this.m_XmlWriter, "AssemblyID"))
            {
              ErrorReportSender.AssemblyInformation assemblyId = this.m_AssemblyIDs[index];
              this.m_XmlWriter.WriteAttributeString("ID", assemblyId.AssemblyId);
              if (assemblyId.AssemblyFullName.Length > 0)
                this.m_XmlWriter.WriteAttributeString("FullName", assemblyId.AssemblyFullName);
            }
          }
        }
      }
      this.m_XmlWriter.WriteEndDocument();
      this.m_XmlWriter.Flush();
      this.m_MemoryStream.Flush();
      this.m_ReportData = this.m_MemoryStream.ToArray();
      return this.m_ReportData;
    }

    private void WriteObjects()
    {
      using (new XmlElementSpanner(this.m_XmlWriter, "Objects"))
      {
        for (int index1 = 0; index1 < this.m_ExceptionObjects.Count; ++index1)
        {
          ObjectAndType exceptionObject = this.m_ExceptionObjects[index1];
          object obj = exceptionObject.GetObject();
          System.Type type = exceptionObject.GetType();
          using (new XmlElementSpanner(this.m_XmlWriter, "ObjectDef"))
          {
            this.m_XmlWriter.WriteAttributeString("ID", index1.ToString());
            string str1 = (string) null;
            bool flag = true;
            char[] chArray = new char[1]{ ',' };
            foreach (string str2 in "".Split(chArray))
            {
              if (str2 != "" && type.FullName.StartsWith(str2))
              {
                flag = false;
                break;
              }
            }
            foreach (Attribute customAttribute in type.GetCustomAttributes(true))
            {
              string name = customAttribute.GetType().Name;
              if (!(name != "DoNotCaptureFieldsAttribute") || !(name != "DoNotCaptureAttribute"))
              {
                flag = false;
                break;
              }
            }
            if (flag)
            {
              try
              {
                str1 = obj.ToString();
                str1 = !(str1 == type.FullName) ? (!type.IsEnum ? (!(obj is Guid) ? "\"" + str1 + "\"" : "{" + str1 + "}") : System.Enum.Format(type, obj, "d")) : (string) null;
              }
              catch
              {
              }
              if (str1 != null)
                this.m_XmlWriter.WriteAttributeString("Value", ErrorReportSender.GetValidatedInformation(str1));
            }
            if (type.HasElementType)
            {
              this.AddObjectTypeAttribute(type.GetElementType());
              if (type.IsByRef)
                this.m_XmlWriter.WriteAttributeString("ByRef", "1");
              if (type.IsPointer)
                this.m_XmlWriter.WriteAttributeString("Pointer", "1");
              if (type.IsArray)
              {
                Array array = (Array) obj;
                this.m_XmlWriter.WriteAttributeString("Rank", array.Rank.ToString());
                StringBuilder stringBuilder = new StringBuilder();
                for (int dimension = 0; dimension < array.Rank; ++dimension)
                {
                  if (dimension > 0)
                    stringBuilder.Append(',');
                  stringBuilder.Append(array.GetLength(dimension));
                }
                this.m_XmlWriter.WriteAttributeString("Length", stringBuilder.ToString());
                if (array.Rank == 1)
                {
                  int length = array.Length;
                  for (int index2 = 0; index2 < length; ++index2)
                  {
                    if (index2 == 10)
                    {
                      if (length > 16)
                        index2 = length - 5;
                    }
                    try
                    {
                      this.SaveObjectInformation(new ObjectAndType(array.GetValue(index2), false), (FieldInfo) null);
                    }
                    catch
                    {
                    }
                  }
                }
              }
            }
            else
            {
              this.AddObjectTypeAttribute(type);
              if (exceptionObject.FirstLevel)
              {
                if (flag)
                {
                  try
                  {
                    if (obj is IEnumerable)
                    {
                      using (new XmlElementSpanner(this.m_XmlWriter, "IEnumerable"))
                      {
                        int num = 0;
                        foreach (object o in (IEnumerable) obj)
                        {
                          if (num > 20)
                          {
                            this.m_XmlWriter.WriteElementString("More", string.Empty);
                            break;
                          }
                          this.SaveObjectInformation(new ObjectAndType(o, false), (FieldInfo) null);
                          ++num;
                        }
                      }
                    }
                  }
                  catch
                  {
                  }
                  this.WriteObjectFields(exceptionObject);
                }
              }
            }
          }
        }
      }
    }

    private void WriteObjectFields(ObjectAndType objectToWrite)
    {
      foreach (FieldInfo field in objectToWrite.GetType().GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))
      {
        try
        {
          if (!field.IsLiteral)
          {
            if (field.IsStatic)
            {
              if (field.IsInitOnly)
                continue;
            }
            bool flag = true;
            foreach (Attribute customAttribute in field.GetCustomAttributes(true))
            {
              if (customAttribute.GetType().Name == "DoNotCaptureAttribute")
              {
                flag = false;
                break;
              }
            }
            if (flag)
              this.SaveObjectInformation(new ObjectAndType(field.GetValue(objectToWrite.GetObject()), false), field);
          }
        }
        catch
        {
        }
      }
      objectToWrite = new ObjectAndType(objectToWrite.GetObject(), objectToWrite.GetType().BaseType, objectToWrite.FirstLevel);
      if ((object) objectToWrite.GetType() == null)
        return;
      using (new XmlElementSpanner(this.m_XmlWriter, "Field"))
      {
        this.AddNameAttribute("__base");
        this.m_XmlWriter.WriteAttributeString("ID", this.m_ExceptionObjects.Count.ToString());
      }
      this.m_ExceptionObjects.Add(objectToWrite);
    }

    private void WriteException(Exception exceptionToWrite)
    {
      using (new XmlElementSpanner(this.m_XmlWriter, "Exception"))
      {
        try
        {
          this.AddObjectTypeAttribute(exceptionToWrite.GetType());
          string str1 = "N/A";
          try
          {
            str1 = exceptionToWrite.Message;
          }
          catch
          {
          }
          this.m_XmlWriter.WriteAttributeString("Message", str1);
          string str2 = exceptionToWrite.StackTrace.Trim();
          this.m_XmlWriter.WriteAttributeString("ExceptionStackTrace", str2);
          int num = str2.IndexOf(' ');
          string str3 = str2.Substring(num + 1);
          int length = str3.IndexOf("\r\n");
          if (length != -1)
            str3 = str3.Substring(0, length);
          this.m_XmlWriter.WriteAttributeString("Method", str3);
          this.SaveObjectAndWriteIDAttribute(new ObjectAndType((object) exceptionToWrite, true));
        }
        catch
        {
        }
      }
    }

    internal void AddCustomProperty(string name, object value) => this.m_CustomProperties.Add(name, value);

    internal void AttachFile(string name, string fileName)
    {
      if (!System.IO.File.Exists(fileName))
        return;
      ErrorReportSender.AttachedFile attachedFile = new ErrorReportSender.AttachedFile(fileName);
      this.m_AttachedFiles.Add(name, attachedFile);
    }

    [ReportUsageAttribute1("Unhandled Exception Report Sent")]
    internal bool SendReport()
    {
      try
      {
        this.InvokeSendingReportFeedback(SendingReportStep2.PreparingReport);
        byte[] reportData;
        try
        {
          reportData = this.GetReportData();
        }
        catch (Exception ex)
        {
          int num = -1;
          try
          {
            StackTrace stackTrace = new StackTrace(ex);
            if (stackTrace.FrameCount > 0)
              num = stackTrace.GetFrame(stackTrace.FrameCount - 1).GetILOffset();
          }
          catch
          {
          }
          this.InvokeSendingReportFeedback(SendingReportStep2.PreparingReport, string.Format("ERR 2006: {0} @ 0x{1:x4}", (object) ex.Message, (object) num));
          return false;
        }
        ReportSender2.NotificationEmailSettings notificationEmailSettings = new ReportSender2.NotificationEmailSettings("", "server2", "v0.0.0.0 from 08/08/2013 05:49:45 ص");
        return this.SendReport(reportData, notificationEmailSettings);
      }
      catch (ThreadAbortException ex)
      {
        return false;
      }
      catch (Exception ex)
      {
        this.InvokeFatalException(new FatalExceptionEventArgs1(ex));
        return false;
      }
    }

    public event FatalExceptionEventHandler1 FatalException;

    public void InvokeFatalException(FatalExceptionEventArgs1 e)
    {
      FatalExceptionEventHandler1 fatalException = this.FatalException;
      if (fatalException == null)
        return;
      fatalException((object) this, e);
    }

    public event EventHandler DebuggerLaunched;

    private void InvokeDebuggerLaunched()
    {
      EventHandler debuggerLaunched = this.DebuggerLaunched;
      if (debuggerLaunched == null)
        return;
      debuggerLaunched((object) this, EventArgs.Empty);
    }

    internal void LaunchDebugger()
    {
      try
      {
        string tempFileName = Path.GetTempFileName();
        this.SaveEncryptedReport(tempFileName);
        Process.Start(Path.Combine(AppPathFinder1.ReadInstalledSaPath(), "SmartAssembly.exe"), "/AddExceptionReport \"" + tempFileName + "\"");
        if (this.DebuggerLaunched == null)
          return;
        this.DebuggerLaunched((object) this, EventArgs.Empty);
      }
      catch (ThreadAbortException ex)
      {
      }
      catch (Exception ex)
      {
        this.InvokeFatalException(new FatalExceptionEventArgs1(ex));
      }
    }

    internal bool SaveEncryptedReport(string fileName)
    {
      try
      {
        byte[] reportData = this.GetReportData();
        byte[] data;
        try
        {
          data = SimpleZip1.Zip(reportData);
        }
        catch
        {
          data = (byte[]) null;
        }
        byte[] buffer = Encryption.Encrypt(data, "<RSAKeyValue><Modulus>ouQsWoWBnmOqk5oiU2jtlbq5pjqf+VMkxyeAMax4XhYx/73DvmvK2hM6oHyJMzG9z4q2g6iVzseYCR9G25/HguU2hRhyjPcloCXUrQo5yBoVCQzTNnnc5XXeKzLqKuEpkrNRSRyWRB9eh4a6BtuxveEOfBxiHIIXzo0+ffdbu90=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>");
        FileStream fileStream = System.IO.File.OpenWrite(fileName);
        byte[] bytes = Encoding.ASCII.GetBytes("{FA0844EB-EF82-404C-B76C-C092ABDB9392}");
        fileStream.Write(bytes, 0, bytes.Length);
        fileStream.Write(buffer, 0, buffer.Length);
        fileStream.Close();
        return true;
      }
      catch (ThreadAbortException ex)
      {
        return false;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    private struct AttachedFile
    {
      public readonly string FileName;
      public readonly string Data;
      public readonly string Error;
      public readonly int Length;

      public AttachedFile(string fileName)
      {
        this.FileName = string.Empty;
        this.Data = string.Empty;
        this.Error = string.Empty;
        this.Length = 0;
        try
        {
          FileInfo fileInfo = new FileInfo(fileName);
          this.FileName = Path.GetFileName(fileName);
          this.Length = (int) fileInfo.Length;
          byte[] buffer = new byte[this.Length];
          using (FileStream fileStream = System.IO.File.Open(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
          {
            fileStream.Read(buffer, 0, this.Length);
            fileStream.Close();
          }
          byte[] inArray;
          try
          {
            inArray = SimpleZip1.Zip(buffer);
          }
          catch
          {
            inArray = (byte[]) null;
          }
          this.Data = Convert.ToBase64String(inArray);
        }
        catch (Exception ex)
        {
          this.Error = ex.Message;
        }
      }
    }

    private struct AssemblyInformation
    {
      public readonly string AssemblyId;
      public readonly string AssemblyFullName;

      public AssemblyInformation(string assemblyID, string assemblyFullName)
      {
        this.AssemblyId = assemblyID;
        this.AssemblyFullName = assemblyFullName;
      }
    }

    private struct TypeInformation
    {
      public string ID;
      public ErrorReportSender.AssemblyInformation AssemblyInformation;

      public bool IsEmpty => this.ID.Length == 0;

      public static ErrorReportSender.TypeInformation Empty => new ErrorReportSender.TypeInformation(string.Empty, string.Empty, string.Empty);

      private TypeInformation(string id, string assemblyID, string assemblyFullName)
      {
        this.ID = id;
        this.AssemblyInformation = new ErrorReportSender.AssemblyInformation(assemblyID, assemblyFullName);
      }
    }
  }
}
