// Decompiled with JetBrains decompiler
// Type: Standard_Sales.ExcelImport.CellCoordinateParser
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.InteropServices;

namespace Standard_Sales.ExcelImport
{
  public class CellCoordinateParser : ICellCoordinateParser
  {
    public ExcelCellCoordinates ParseCoordinates(string cellReference)
    {
label_1:
      int num1 = -1215936214;
      bool flag1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1045408013)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 507229224 ^ 1854525893;
            continue;
          case 3:
            flag1 = CellCoordinateParser.\u202B‭⁮⁭⁬⁯‏⁯‪‭‍‬‍‏‮‍⁭⁪⁭‫⁬‫‪⁪‮⁯​⁫‪⁮‏⁪​⁬⁫‭​‏‍⁪‮(cellReference);
            num1 = (int) num2 * -576375278 ^ 1726179758;
            continue;
          case 4:
            goto label_6;
          case 5:
            int num3 = flag1 ? -2065718117 : (num3 = -542201120);
            num1 = num3 ^ (int) num2 * -1316284397;
            continue;
          default:
            goto label_7;
        }
      }
label_6:
      throw CellCoordinateParser.\u200C‌‫⁪‪‪⁬‌‌‏‌‬⁫⁮‬‮‪‫​⁮‮⁮‎⁪‎‭‫‎‮‍‪‎⁫⁭⁫‏‎⁪‌⁮‮(\u003CModule\u003E.\u200B‫‫‫⁯⁫‫‫⁬‪‪​‫⁮⁪⁪⁭‬‮⁬​‪‍‎‏⁫‬⁫‫‬‬⁫‭‍‏⁯‪⁪‫‮‮<string>(2164028208U));
label_7:
      int num4 = 0;
      try
      {
label_9:
        int num5 = -1076056662;
        bool flag2;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -1045408013)) % 8U)
          {
            case 0:
              int num7 = !flag2 ? 594927304 : (num7 = 933922389);
              num5 = num7 ^ (int) num6 * 2094314378;
              continue;
            case 1:
              num5 = (int) num6 * 19772709 ^ 2090860171;
              continue;
            case 2:
              goto label_9;
            case 4:
              ++num4;
              num5 = (int) num6 * -1221368535 ^ -1138445064;
              continue;
            case 5:
              flag2 = char.IsLetter(CellCoordinateParser.\u206D‭‌⁪‪⁫⁫‮‎⁬‏‮⁯‭⁬‫‮‪‪‌⁬‍⁪⁪‫‎‭⁯‬‬‭​⁬‭⁭‪‏⁭‮‬‮(cellReference, num4));
              num5 = -1391362077;
              continue;
            case 6:
              num5 = -260273977;
              continue;
            case 7:
              num5 = (int) num6 * 1024672013 ^ -251198075;
              continue;
            default:
              goto label_18;
          }
        }
      }
      catch (IndexOutOfRangeException ex)
      {
        throw CellCoordinateParser.\u206A‌⁭⁬‌‮⁭‌​‫‎‍‍​‭‬​‪⁯‌⁫⁮⁪‮‮⁬‎⁪‬‪⁮⁫‌⁬‍⁯⁯​‭⁫‮();
      }
label_18:
      string columnString1 = CellCoordinateParser.\u200B‬‏‏‏‎‍‍‏⁬‪​‍⁪‫‬‭​⁪‪⁭‌‬⁮⁭‏‪‍⁫⁭‫⁯‍‎⁫‫‍‬‎‍‮(CellCoordinateParser.\u202E‭⁫‍⁮⁭‏‭‪‪‭‫⁪​‮⁯‎⁯⁮⁯‫‪‎​‏​⁫‌‭⁫‮‍‏‎‪⁬‬‪‮⁯‮(cellReference, 0, num4), CellCoordinateParser.\u206F‭​‮⁫‫‪⁫⁭⁯⁯‏​⁫‍⁯‌‏⁬⁮‎⁮‮‬‮⁪⁫​⁮⁬⁮⁮‪‮⁫‎‏⁯⁫‮‮());
label_19:
      int num8 = -1591972748;
      string str;
      int columnString2;
      int row;
      ExcelCellCoordinates coordinates;
      while (true)
      {
        uint num9;
        switch ((num9 = (uint) (num8 ^ -1045408013)) % 8U)
        {
          case 0:
            goto label_19;
          case 1:
            num8 = (int) num9 * 1214017407 ^ -1999484424;
            continue;
          case 2:
            coordinates = new ExcelCellCoordinates(row, columnString2);
            num8 = (int) num9 * 805162900 ^ -1869706610;
            continue;
          case 3:
            columnString2 = CellCoordinateParser.ParseColumnString(columnString1);
            num8 = (int) num9 * -988162558 ^ 1478447611;
            continue;
          case 4:
            str = CellCoordinateParser.\u202C⁪⁪​‪‬⁬‎​⁭​‌⁫‭‪⁮‬‏​⁭‍‍‭⁭‌‎⁬⁯​​⁪⁪⁯‏⁯‪‍⁫‏⁮‮(cellReference, num4);
            CellCoordinateParser.CheckRowString(str);
            num8 = (int) num9 * 1974815589 ^ 1541053900;
            continue;
          case 6:
            row = int.Parse(str) - 1;
            num8 = (int) num9 * -603940670 ^ 910867469;
            continue;
          case 7:
            CellCoordinateParser.CheckColumnString(columnString1);
            num8 = (int) num9 * 1052002858 ^ -104683300;
            continue;
          default:
            goto label_27;
        }
      }
label_27:
      return coordinates;
    }

    private static int ParseColumnString(string value)
    {
label_1:
      int num1 = 755039702;
      int num2;
      int num3;
      int num4;
      char[] chArray;
      bool flag;
      int columnString;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num1 ^ 398275685)) % 15U)
        {
          case 0:
            int num6 = num4 * (int) CellCoordinateParser.\u206B⁪‍‭‫‬‍​⁯‫‪‫⁭‌⁬‏‭⁪⁮‏‭‫‌‍‫⁯⁫‬⁫⁫‪⁫‮‪​⁭⁭‪⁯‪‮(26.0, (double) (chArray.Length - num3 - 1));
            num2 += num6;
            num1 = (int) num5 * 541056605 ^ -1377667687;
            continue;
          case 2:
            columnString = num2;
            num1 = (int) num5 * 149218692 ^ 2111132442;
            continue;
          case 3:
            num1 = (int) num5 * -2014065493 ^ -985256398;
            continue;
          case 4:
            num4 = (int) CellCoordinateParser.\u206D‭‌⁪‪⁫⁫‮‎⁬‏‮⁯‭⁬‫‮‪‪‌⁬‍⁪⁪‫‎‭⁯‬‬‭​⁬‭⁭‪‏⁭‮‬‮(value, num3) - 64;
            num1 = 1642035060;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num5 * 992466804 ^ -1156767936;
            continue;
          case 7:
            int num7 = flag ? -258134806 : (num7 = -1906151058);
            num1 = num7 ^ (int) num5 * -829177584;
            continue;
          case 8:
            --num2;
            num1 = (int) num5 * -2074796331 ^ 2103615031;
            continue;
          case 9:
            num1 = (int) num5 * 1217869867 ^ -183648967;
            continue;
          case 10:
            ++num3;
            num1 = (int) num5 * 391693208 ^ 307927440;
            continue;
          case 11:
            flag = num3 < chArray.Length;
            num1 = 911284911;
            continue;
          case 12:
            num2 = 0;
            num1 = (int) num5 * -1274813591 ^ -1525101424;
            continue;
          case 13:
            chArray = CellCoordinateParser.\u200C‬‪‬⁬‏‏‫​‭‬‌‫‏‍⁮‭⁭‭⁮‬‪‪‫⁬⁭‎‫⁮⁫‏‬⁫⁬⁫‪‬⁬‭‎‮(value);
            num1 = (int) num5 * 454895981 ^ -1153521089;
            continue;
          case 14:
            num3 = 0;
            num1 = (int) num5 * -1750193918 ^ -1320331407;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return columnString;
    }

    private static void CheckColumnString(string columnString)
    {
      if (!CellCoordinateParser.\u202B‭⁮⁭⁬⁯‏⁯‪‭‍‬‍‏‮‍⁭⁪⁭‫⁬‫‪⁪‮⁯​⁫‪⁮‏⁪​⁬⁫‭​‏‍⁪‮(columnString))
        goto label_6;
label_1:
      int num1 = -141994656;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1701323253)) % 7U)
        {
          case 0:
            int num3 = flag ? -443477947 : (num3 = -2007464913);
            num1 = num3 ^ (int) num2 * 1720331198;
            continue;
          case 1:
            goto label_6;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            goto label_7;
          case 5:
            num1 = (int) num2 * 1551796063 ^ 722417453;
            continue;
          case 6:
            goto label_4;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:
      return;
label_4:
      throw CellCoordinateParser.\u206A‌⁭⁬‌‮⁭‌​‫‎‍‍​‭‬​‪⁯‌⁫⁮⁪‮‮⁬‎⁪‬‪⁮⁫‌⁬‍⁯⁯​‭⁫‮();
label_7:
      throw CellCoordinateParser.\u206A‌⁭⁬‌‮⁭‌​‫‎‍‍​‭‬​‪⁯‌⁫⁮⁪‮‮⁬‎⁪‬‪⁮⁫‌⁬‍⁯⁯​‭⁫‮();
label_6:
      flag = ((IEnumerable<char>) CellCoordinateParser.\u200C‬‪‬⁬‏‏‫​‭‬‌‫‏‍⁮‭⁭‭⁮‬‪‪‫⁬⁭‎‫⁮⁫‏‬⁫⁬⁫‪‬⁬‭‎‮(columnString)).Any<char>((Func<char, bool>) (c =>
      {
        if (char.IsLetter(c))
        {
label_1:
          int num4 = 1084251573;
          while (true)
          {
            uint num5;
            switch ((num5 = (uint) (num4 ^ 1096209472)) % 3U)
            {
              case 0:
                goto label_1;
              case 2:
                if (c >= 'A')
                {
                  num4 = (int) num5 * 1865269209 ^ 327571958;
                  continue;
                }
                goto label_6;
              default:
                goto label_5;
            }
          }
label_5:
          return c > 'Z';
        }
label_6:
        return true;
      }));
      num1 = -128081948;
      goto label_2;
    }

    private static void CheckRowString(string rowString)
    {
label_1:
      int num1 = 452938194;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1295506266)) % 13U)
        {
          case 0:
            int num3 = !flag2 ? -1873963372 : (num3 = -671999100);
            num1 = num3 ^ (int) num2 * 579181375;
            continue;
          case 1:
            int num4 = !flag1 ? -622703931 : (num4 = -1633539241);
            num1 = num4 ^ (int) num2 * -983472595;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_13;
          case 4:
            goto label_1;
          case 5:
            flag1 = CellCoordinateParser.\u202B‭⁮⁭⁬⁯‏⁯‪‭‍‬‍‏‮‍⁭⁪⁭‫⁬‫‪⁪‮⁯​⁫‪⁮‏⁪​⁬⁫‭​‏‍⁪‮(rowString);
            num1 = (int) num2 * 965698856 ^ -1809760857;
            continue;
          case 6:
            num1 = (int) num2 * -1232610072 ^ -79672582;
            continue;
          case 7:
            goto label_5;
          case 8:
            int num5;
            num1 = num5 = !((IEnumerable<char>) CellCoordinateParser.\u200C‬‪‬⁬‏‏‫​‭‬‌‫‏‍⁮‭⁭‭⁮‬‪‪‫⁬⁭‎‫⁮⁫‏‬⁫⁬⁫‪‬⁬‭‎‮(rowString)).Any<char>((Func<char, bool>) (c => !char.IsNumber(c))) ? 212327601 : (num5 = 114876481);
            continue;
          case 9:
            num1 = (int) num2 * 203344042 ^ -1925738497;
            continue;
          case 10:
            goto label_7;
          case 11:
            num1 = (int) num2 * 562831736 ^ 1144951685;
            continue;
          case 12:
            flag2 = CellCoordinateParser.\u206D‭‌⁪‪⁫⁫‮‎⁬‏‮⁯‭⁬‫‮‪‪‌⁬‍⁪⁪‫‎‭⁯‬‬‭​⁬‭⁭‪‏⁭‮‬‮(rowString, 0) == '0';
            num1 = 865490331;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:
      return;
label_5:
      throw CellCoordinateParser.\u206A‭⁭‫‎⁭‎‭‍⁪‍‮⁮‬⁫‪‌⁮‫⁪‫⁮⁫​‮‎‪‏‍⁭⁭⁮‏⁫​​‭‪‫‌‮(rowString);
label_7:
      throw CellCoordinateParser.\u206A‌⁭⁬‌‮⁭‌​‫‎‍‍​‭‬​‪⁯‌⁫⁮⁪‮‮⁬‎⁪‬‪⁮⁫‌⁬‍⁯⁯​‭⁫‮();
label_13:
      throw CellCoordinateParser.\u206A‌⁭⁬‌‮⁭‌​‫‎‍‍​‭‬​‪⁯‌⁫⁮⁪‮‮⁬‎⁪‬‪⁮⁫‌⁬‍⁯⁯​‭⁫‮();
    }

    static bool \u202B‭⁮⁭⁬⁯‏⁯‪‭‍‬‍‏‮‍⁭⁪⁭‫⁬‫‪⁪‮⁯​⁫‪⁮‏⁪​⁬⁫‭​‏‍⁪‮([In] string obj0) => string.IsNullOrWhiteSpace(obj0);

    static ArgumentNullException \u200C‌‫⁪‪‪⁬‌‌‏‌‬⁫⁮‬‮‪‫​⁮‮⁮‎⁪‎‭‫‎‮‍‪‎⁫⁭⁫‏‎⁪‌⁮‮(
      [In] string obj0)
    {
      return new ArgumentNullException(obj0);
    }

    static char \u206D‭‌⁪‪⁫⁫‮‎⁬‏‮⁯‭⁬‫‮‪‪‌⁬‍⁪⁪‫‎‭⁯‬‬‭​⁬‭⁭‪‏⁭‮‬‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static FormatException \u206A‌⁭⁬‌‮⁭‌​‫‎‍‍​‭‬​‪⁯‌⁫⁮⁪‮‮⁬‎⁪‬‪⁮⁫‌⁬‍⁯⁯​‭⁫‮() => new FormatException();

    static string \u202E‭⁫‍⁮⁭‏‭‪‪‭‫⁪​‮⁯‎⁯⁮⁯‫‪‎​‏​⁫‌‭⁫‮‍‏‎‪⁬‬‪‮⁯‮([In] string obj0, [In] int obj1, [In] int obj2) => obj0.Substring(obj1, obj2);

    static CultureInfo \u206F‭​‮⁫‫‪⁫⁭⁯⁯‏​⁫‍⁯‌‏⁬⁮‎⁮‮‬‮⁪⁫​⁮⁬⁮⁮‪‮⁫‎‏⁯⁫‮‮() => CultureInfo.InvariantCulture;

    static string \u200B‬‏‏‏‎‍‍‏⁬‪​‍⁪‫‬‭​⁪‪⁭‌‬⁮⁭‏‪‍⁫⁭‫⁯‍‎⁫‫‍‬‎‍‮([In] string obj0, [In] CultureInfo obj1) => obj0.ToUpper(obj1);

    static string \u202C⁪⁪​‪‬⁬‎​⁭​‌⁫‭‪⁮‬‏​⁭‍‍‭⁭‌‎⁬⁯​​⁪⁪⁯‏⁯‪‍⁫‏⁮‮([In] string obj0, [In] int obj1) => obj0.Substring(obj1);

    static char[] \u200C‬‪‬⁬‏‏‫​‭‬‌‫‏‍⁮‭⁭‭⁮‬‪‪‫⁬⁭‎‫⁮⁫‏‬⁫⁬⁫‪‬⁬‭‎‮([In] string obj0) => obj0.ToCharArray();

    static double \u206B⁪‍‭‫‬‍​⁯‫‪‫⁭‌⁬‏‭⁪⁮‏‭‫‌‍‫⁯⁫‬⁫⁫‪⁫‮‪​⁭⁭‪⁯‪‮([In] double obj0, [In] double obj1) => Math.Pow(obj0, obj1);

    static FormatException \u206A‭⁭‫‎⁭‎‭‍⁪‍‮⁮‬⁫‪‌⁮‫⁪‫⁮⁫​‮‎‪‏‍⁭⁭⁮‏⁫​​‭‪‫‌‮([In] string obj0) => new FormatException(obj0);
  }
}
