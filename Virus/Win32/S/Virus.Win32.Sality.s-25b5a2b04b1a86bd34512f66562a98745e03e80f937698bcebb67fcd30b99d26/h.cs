// Decompiled with JetBrains decompiler
// Type: h
// Assembly: dotfuscator, Version=3.0.2005.16153, Culture=neutral, PublicKeyToken=0a50e0ef4ca013fe
// MVID: 72779447-C025-4F94-94C1-F3AAFA6402C6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Sality.s-25b5a2b04b1a86bd34512f66562a98745e03e80f937698bcebb67fcd30b99d26.exe

using System;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Resources;

public sealed class h
{
  private static c2 a;
  private static ResourceManager a = fw.a();
  internal static string a;
  internal static bool a;
  internal static bool b;
  internal static string b;
  internal static bool c;
  internal static bool d;
  internal static bool e;

  internal static bool a(string[] A_0)
  {
    if (A_0.Length == 0)
      return true;
    foreach (string str in A_0)
    {
      if (str.StartsWith("-g") || str.StartsWith("/g"))
        return true;
    }
    return false;
  }

  internal static c2 a(string[] A_0, ee A_1, Hashtable A_2)
  {
    Hashtable A_1_1 = new Hashtable();
    bool flag = false;
    global::h.a = (c2) A_1.a();
    if (A_0.Length == 0)
    {
      global::h.a = true;
      global::h.a(A_2, A_1.a());
      return (c2) null;
    }
    foreach (string A_0_1 in A_0)
    {
      if (!A_0_1.StartsWith("-") && !A_0_1.StartsWith("/"))
      {
        if (flag)
          throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_MULTIPLE_CONFIGFILES"), new object[2]
          {
            (object) global::h.a,
            (object) A_0_1
          }));
        global::h.a = A_0_1;
        flag = true;
      }
      else
      {
        if (A_0_1.Length == 2 && A_0_1[1] == '?')
        {
          global::h.b = true;
          return (c2) null;
        }
        if (A_0_1.Length == 2 && A_0_1[1] == 'g')
          global::h.a = true;
        else if (A_0_1.Length >= 2)
        {
          string A_1_2 = (string) null;
          string A_2_1 = (string) null;
          global::h.a(A_0_1, ref A_1_2, ref A_2_1);
          if (A_1_2.Equals("p"))
            A_2 = global::h.a(A_2_1, A_2);
          else if (A_1_2.Equals("make"))
            global::h.d(A_2_1);
        }
      }
    }
    global::h.a(A_2, A_1.a());
    global::h.a.a(A_2);
    if (flag)
    {
      global::h.a.m(Path.GetFullPath(global::h.a));
      global::h.a(A_1.a(""));
    }
    else
      global::h.a(global::h.a);
    foreach (string str in A_0)
    {
      if (str.StartsWith("-") || str.StartsWith("/"))
      {
        if (str.Length == 2)
        {
          if (A_1_1[(object) str] != null)
            throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_DUPLICATE_ARG"), new object[1]
            {
              (object) str
            }));
          switch (str[1])
          {
            case '?':
            case 'g':
            case 'n':
              A_1_1[(object) str] = (object) str;
              break;
            case 'e':
              global::h.a.h(true);
              global::h.d = true;
              goto case '?';
            case 'i':
              global::h.a.f(true);
              goto case '?';
            case 'q':
              global::h.a.g(true);
              global::h.a.d(false);
              global::h.c = false;
              goto case '?';
            case 'v':
              global::h.a.d(true);
              global::h.a.g(false);
              global::h.c = true;
              goto case '?';
            default:
              throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_BAD_ARGUMENT"), new object[1]
              {
                (object) str
              }));
          }
        }
        if (str.Length > 2)
        {
          string A_1_3 = (string) null;
          string A_2_2 = (string) null;
          global::h.a(str, ref A_1_3, ref A_2_2);
          if (A_1_1[(object) A_1_3] != null && !A_1_3.ToLower(CultureInfo.InvariantCulture).EndsWith("link"))
            throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_DUPLICATE_ARG"), new object[1]
            {
              (object) str
            }));
          if (!A_1_3.Equals("p") && !A_1_3.Equals("c"))
          {
            if (A_1_3.Equals("appl"))
              global::h.j(A_1_3);
            else if (A_1_3.Equals("clob"))
              global::h.h(A_2_2);
            else if (A_1_3.Equals("rena"))
              global::h.i(A_2_2);
            else if (A_1_3.Equals("in"))
              global::h.g(A_2_2);
            else if (A_1_3.Equals("out"))
              global::h.f(A_2_2);
            else if (A_1_3.Equals("mapo"))
              global::h.e(A_2_2);
            else if (!A_1_3.Equals("make"))
            {
              if (A_1_3.Equals("keep"))
                global::h.c(A_2_2);
              else if (A_1_3.Equals("disa"))
                global::h.b(A_2_2);
              else if (A_1_3.Equals("cont"))
                global::h.a(str);
              else if (A_1_3.Equals("encr"))
                global::h.a(str);
              else if (A_1_3.Equals("prun"))
                global::h.a(str);
              else if (A_1_3.Equals("enha"))
                global::h.a(str);
              else if (A_1_3.Equals("mapi"))
                global::h.a(str);
              else if (A_1_3.Equals("nami"))
                global::h.a(str);
              else if (A_1_3.Equals("brea"))
                global::h.a(str);
              else if (A_1_3.Equals("debu"))
                global::h.a(str);
              else if (A_1_3.Equals("pref"))
                global::h.a(str);
              else if (A_1_3.Equals("inpl"))
                global::h.a(str);
              else if (A_1_3.Equals("link"))
                global::h.a(str);
              else if (A_1_3.Equals("prem"))
                global::h.a(str);
              else if (A_1_3.Equals("wate"))
                global::h.a(str);
              else if (A_1_3.Equals("pass"))
                global::h.a(str);
              else if (A_1_3.Equals("char"))
                global::h.a(str);
              else
                throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_BAD_ARGUMENT"), new object[1]
                {
                  (object) str
                }));
            }
          }
          A_1_1[(object) A_1_3] = (object) A_1_3;
        }
      }
    }
    if (flag)
      global::h.a(global::h.a, A_1_1);
    global::h.a.g();
    if (global::h.b != null)
      global::h.a();
    return global::h.a;
  }

  private static void a(string A_0, ref string A_1, ref string A_2)
  {
    A_0 = A_0.Substring(1);
    int num1 = A_0.IndexOf("=");
    int num2 = A_0.IndexOf(":");
    int length = num1 <= -1 || num2 <= -1 ? (num1 != -1 ? num1 : num2) : (num1 > num2 ? num2 : num1);
    if (length >= 0)
    {
      A_1 = A_0.Substring(0, length);
      if (length < A_0.Length - 1)
        A_2 = A_0.Substring(length + 1);
    }
    else
      A_1 = A_0;
    if (A_1.Length <= 4)
      return;
    A_1 = A_1.Substring(0, 4);
  }

  private static bool a(string A_0)
  {
    if (A_0.Equals("off"))
      return true;
    if (A_0.Equals("on"))
      return false;
    throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_INVALID_SUBARG"), new object[1]
    {
      (object) A_0
    }));
  }

  private static string a(string A_0)
  {
    string directoryName = Path.GetDirectoryName(A_0);
    if (directoryName == null || directoryName.Length == 0)
      A_0 = "." + (object) Path.DirectorySeparatorChar + A_0;
    return A_0;
  }

  private static void k(string A_0)
  {
    if (A_0 == null)
      throw new ApplicationException(global::h.a.GetString("MSG_CLI_ARG_INCOMPLETE"));
  }

  private static void j(string A_0) => Console.WriteLine(fw.a(global::h.a.GetString("MSG_ARG_DEPRECATED"), new object[1]
  {
    (object) A_0
  }));

  private static Hashtable a(string A_0, Hashtable A_1)
  {
    string str1 = A_0 != null ? A_0 : throw new ApplicationException(fw.a(global::h.a.GetString("MSG_PROPERTY_PARSE_BAD_ARGUMENT"), new object[1]
    {
      (object) A_0
    }));
    char[] chArray = new char[1]{ ',' };
    foreach (string str2 in str1.Split(chArray))
    {
      int length = str2.IndexOf("=");
      string key = length > 0 ? str2.Substring(0, length).Trim() : throw new ApplicationException(fw.a(global::h.a.GetString("MSG_PROPERTY_PARSE_MISSING_VALUE"), new object[1]
      {
        (object) str2
      }));
      string str3 = str2.Substring(length + 1).Trim();
      if (key.Length == 0)
        throw new ApplicationException(fw.a(global::h.a.GetString("MSG_PROPERTY_PARSE_MISSING_NAME"), new object[1]
        {
          (object) str2
        }));
      if (A_1[(object) key] == null)
        A_1.Add((object) key, (object) str3);
    }
    return A_1;
  }

  private static void i(string A_0)
  {
    global::h.k(A_0);
    if (global::h.e)
      return;
    global::h.a.j(global::h.a(A_0));
  }

  private static void h(string A_0)
  {
    global::h.k(A_0);
    global::h.a.b(!global::h.a(A_0));
  }

  private static void g(string A_0)
  {
    global::h.k(A_0);
    string[] strArray = A_0.Split(',');
    ArrayList arrayList = global::h.a.e();
    bool flag = false;
    for (int index = 0; index < strArray.Length; ++index)
    {
      string A_0_1 = strArray[index].Trim();
      if (A_0_1 != null && A_0_1.Length != 0)
      {
        if (A_0_1[0] == '"' && A_0_1[A_0_1.Length - 1] == '"')
          A_0_1 = A_0_1.Substring(1, A_0_1.Length - 2);
        flag |= !A_0_1.ToLower().EndsWith(".exe");
        string path = global::h.a(A_0_1);
        b6 b6 = new b6(Path.GetFileName(path), Path.GetDirectoryName(path));
        arrayList.Add((object) b6);
      }
    }
    foreach (b6 b6 in arrayList)
      b6.c(flag);
  }

  private static void f(string A_0)
  {
    global::h.k(A_0);
    global::h.a.l(global::h.a(A_0));
  }

  private static void e(string A_0)
  {
    global::h.k(A_0);
    global::h.a.k(global::h.a(A_0));
  }

  private static void d(string A_0)
  {
    global::h.k(A_0);
    global::h.b = A_0;
  }

  private static void c(string A_0)
  {
    global::h.k(A_0);
    string lower = A_0.ToLower(CultureInfo.InvariantCulture);
    if (lower.Equals("namespace"))
    {
      global::h.a.a(true);
      global::h.a.m(false);
    }
    else if (lower.Equals("hierarchy"))
    {
      global::h.a.a(false);
      global::h.a.m(true);
    }
    else if (lower.Equals("none"))
    {
      global::h.a.a(false);
      global::h.a.m(false);
    }
    else
      throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_INVALID_SUBARG"), new object[1]
      {
        (object) A_0
      }));
  }

  private static void b(string A_0)
  {
    global::h.e = true;
    global::h.a.j(true);
  }

  public static void a(string A_0) => throw new ApplicationException(fw.a(global::h.a.GetString("MSG_CLI_PRO_ONLY"), new object[1]
  {
    (object) A_0
  }));

  private static void a(c2 A_0)
  {
    A_0.h("2.1");
    A_0.f(false);
    A_0.d(false);
    A_0.g(false);
    A_0.h(false);
    A_0.c(true);
    A_0.l(Environment.CurrentDirectory + (object) Path.DirectorySeparatorChar + "Dotfuscated");
    A_0.k(Environment.CurrentDirectory + (object) Path.DirectorySeparatorChar + "Dotfuscated" + (object) Path.DirectorySeparatorChar + "map.xml");
    A_0.b(false);
    A_0.j(false);
    A_0.m(false);
    A_0.a(false);
  }

  private static void a(c2 A_0, Hashtable A_1)
  {
    if (A_1[(object) "out"] == null && A_0.c() == null)
      A_0.l(Environment.CurrentDirectory + (object) Path.DirectorySeparatorChar + "Dotfuscated");
    if (A_1[(object) "mapo"] != null || A_0.i() != null)
      return;
    A_0.k(Environment.CurrentDirectory + (object) Path.DirectorySeparatorChar + "Dotfuscated" + (object) Path.DirectorySeparatorChar + "map.xml");
  }

  private static void a(cv A_0)
  {
    FileStream fileStream = new FileStream(global::h.a.b(), FileMode.Open, FileAccess.Read);
    bool flag = !global::h.a;
    A_0.a((ei) global::h.a, (Stream) fileStream, flag);
  }

  private static void a(Hashtable A_0, c6 A_1)
  {
    if (A_0[(object) "applicationdir"] == null)
      A_0.Add((object) "applicationdir", (object) A_1.f());
    if (global::h.b != null)
    {
      if (A_0[(object) "configdir"] == null)
        A_0.Add((object) "configdir", (object) Path.GetDirectoryName(Path.GetFullPath(global::h.b)));
    }
    else if (global::h.a != null && A_0[(object) "configdir"] == null)
      A_0.Add((object) "configdir", (object) Path.GetDirectoryName(Path.GetFullPath(global::h.a)));
    if (A_0[(object) "appdatadir"] != null)
      return;
    A_0.Add((object) "appdatadir", (object) Path.GetFullPath(dp.a(false)));
  }

  private static void a()
  {
    FileStream fileStream = (FileStream) null;
    try
    {
      fileStream = new FileStream(global::h.b, FileMode.Create, FileAccess.Write);
      new y(Console.Out).a((ei) global::h.a, (Stream) fileStream);
      global::h.a.m(global::h.b);
    }
    finally
    {
      fileStream?.Close();
    }
  }
}
