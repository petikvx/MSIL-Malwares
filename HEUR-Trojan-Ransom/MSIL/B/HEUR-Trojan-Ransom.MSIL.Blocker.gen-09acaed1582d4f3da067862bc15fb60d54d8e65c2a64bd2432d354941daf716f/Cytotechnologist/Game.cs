// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: PEFileEvidenceFacto, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 33D8CF26-6BC9-4426-B954-9C7650E72B0A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-09acaed1582d4f3da067862bc15fb60d54d8e65c2a64bd2432d354941daf716f.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 1474685004;
      int count;
      int index;
      bool flag1;
      int aIndex;
      JSONNode jsonNode;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1073984877)) % 18U)
        {
          case 0:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 294705801 ^ -804401977;
            continue;
          case 1:
            int num3 = flag2 ? 1125616788 : (num3 = 1555982587);
            num1 = num3 ^ (int) num2 * -1264029390;
            continue;
          case 2:
            this._playerStates[index] = new PlayerState();
            num1 = 145274320;
            continue;
          case 3:
            this._dice = new Dice();
            jsonNode = json["players"];
            num1 = (int) num2 * 38979067 ^ 538034540;
            continue;
          case 4:
            flag2 = aIndex < count;
            num1 = 801927176;
            continue;
          case 5:
            goto label_1;
          case 6:
            flag1 = index < count;
            num1 = 1643471983;
            continue;
          case 7:
            this._random = Game.\u200C⁪‮⁬‫‪⁭‏‭‌‎‍⁮⁯‍⁮‏⁮⁯⁯⁭⁭‮⁬‍⁫‍‏‎‬‬‪​‎​‭‭‌‪‫‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * 1518881848 ^ 412270756;
            continue;
          case 8:
            this.Players = new Player[count];
            num1 = (int) num2 * 773775030 ^ -50964046;
            continue;
          case 9:
            ++index;
            num1 = (int) num2 * 733375649 ^ 29016382;
            continue;
          case 10:
            int num4 = !flag1 ? 1061490074 : (num4 = 2055017005);
            num1 = num4 ^ (int) num2 * -1512572987;
            continue;
          case 11:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = 1523626589;
            continue;
          case 12:
            num1 = (int) num2 * 147421199 ^ -458903335;
            continue;
          case 13:
            num1 = (int) num2 * 805529655 ^ -153352156;
            continue;
          case 14:
            count = jsonNode.Count;
            num1 = (int) num2 * 1441479488 ^ -1193106285;
            continue;
          case 15:
            goto label_3;
          case 16:
            this._buffer = buffer;
            num1 = (int) num2 * 1717092034 ^ -2037210016;
            continue;
          case 17:
            aIndex = 0;
            num1 = (int) num2 * -371549902 ^ 611048955;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -372593334;
        PlayerState[] playerStates;
        int index;
        bool flag;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1617995627)) % 14U)
          {
            case 0:
              finished2 = true;
              num1 = (int) num2 * 1123950815 ^ 251334250;
              continue;
            case 1:
              int num3 = flag ? 140331518 : (num3 = 1084332156);
              num1 = num3 ^ (int) num2 * 1441824683;
              continue;
            case 2:
              index = 0;
              num1 = (int) num2 * -547733778 ^ 92103464;
              continue;
            case 3:
              int num4 = !finished1 ? -2091427387 : (num4 = -1659810454);
              num1 = num4 ^ (int) num2 * -1837138201;
              continue;
            case 4:
              flag = playerStates[index].State == State.Playing;
              num1 = -1045858334;
              continue;
            case 6:
              ++index;
              num1 = -748911596;
              continue;
            case 7:
              num1 = -1186791712;
              continue;
            case 8:
              finished2 = false;
              num1 = (int) num2 * -1259205404 ^ -1260960562;
              continue;
            case 9:
              int num5;
              num1 = num5 = index < playerStates.Length ? -1574546661 : (num5 = -1483651881);
              continue;
            case 10:
              goto label_1;
            case 11:
              playerStates = this._playerStates;
              num1 = (int) num2 * 745001722 ^ 980429829;
              continue;
            case 12:
              finished2 = true;
              num1 = (int) num2 * -1694943123 ^ -1792615400;
              continue;
            case 13:
              num1 = (int) num2 * -774450028 ^ -294619710;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
      this.Winners.Clear();
label_1:
      int num1 = 1091602280;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1606776453)) % 5U)
        {
          case 0:
            this._currentTurn = 0;
            num1 = (int) num2 * -1931679056 ^ 676042977;
            continue;
          case 1:
            this.Losers.Clear();
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 581748737 ^ 2092436723;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            this._finished = false;
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -1250323382 ^ 1677605255;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = -546655186;
      int num2;
      int planningCardsCount;
      bool flag1;
      PlayerState playerState;
      Player player;
      bool morePlanningSprint;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1837193573)) % 27U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = -624677358;
            continue;
          case 2:
            num1 = (int) num3 * 2040806984 ^ -564996767;
            continue;
          case 3:
            int num4 = flag1 ? 1791795988 : (num4 = 802036821);
            num1 = num4 ^ (int) num3 * 1724601348;
            continue;
          case 4:
            playerState.Sprint = -1;
            num1 = (int) num3 * 681440967 ^ -1676877350;
            continue;
          case 5:
            num2 = 0;
            num1 = -1157261320;
            continue;
          case 6:
            num1 = -1517370051;
            continue;
          case 7:
            int num5 = flag2 ? 1079044914 : (num5 = 1897645064);
            num1 = num5 ^ (int) num3 * 955854606;
            continue;
          case 8:
            goto label_3;
          case 9:
            num1 = -724637331;
            continue;
          case 10:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 1948951145 ^ -1903789853;
            continue;
          case 11:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * -372242754 ^ -894660540;
            continue;
          case 12:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * -851208793 ^ -1095190608;
            continue;
          case 13:
            ++index;
            num1 = (int) num3 * -1674774917 ^ 278465933;
            continue;
          case 14:
            playerState.State = State.Playing;
            num1 = (int) num3 * 2131898106 ^ -291443044;
            continue;
          case 15:
            num1 = (int) num3 * 166455151 ^ -1376527366;
            continue;
          case 16:
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * 233507104 ^ 447694508;
            continue;
          case 17:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 935825634 ^ 862547352;
            continue;
          case 18:
            num1 = (int) num3 * -73516382 ^ -744557393;
            continue;
          case 19:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -477068201;
            continue;
          case 20:
            flag2 = index < this.Players.Length;
            num1 = -29966647;
            continue;
          case 21:
            int num6 = morePlanningSprint ? -749607975 : (num6 = -1166541956);
            num1 = num6 ^ (int) num3 * -1952225239;
            continue;
          case 22:
            int num7;
            num1 = num7 = num2 > 0 ? -524431701 : (num7 = -1647470402);
            continue;
          case 23:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 1333309917 ^ -1363380770;
            continue;
          case 24:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * 957707093 ^ 1617087922;
            continue;
          case 25:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -1267228851 ^ 1420606873;
            continue;
          case 26:
            playerState.Sprint = 1;
            num1 = (int) num3 * -45380905 ^ -1340312897;
            continue;
          default:
            goto label_29;
        }
      }
label_3:
      return;
label_29:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      bool flag1 = this._currentPlayer >= this.Players.Length;
label_1:
      int num1 = -951333515;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1982425873)) % 11U)
        {
          case 0:
            this.Print((object) Game.\u206E⁮‮​‭‫‬‌‪⁫‏‮‮‫‌‍‍‍⁪⁯‭‍‬‏​​‪‬‮‪‮‮⁬‌‎‏‪‮‌⁪‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -922166786 ^ -1835949422;
            continue;
          case 2:
            int num3 = !flag1 ? -2143535539 : (num3 = -2113726811);
            num1 = num3 ^ (int) num2 * 1389311636;
            continue;
          case 3:
            this.Print((object) Game.\u202D‍‬‭⁭‮​⁫‪⁪‪⁭‫‭‬‬‎‪‏‏⁯‌⁭‪⁯‫‮⁫⁯‮⁬‪‎‫​‌‏‌‌‌‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1789524486;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -750379495 ^ 882778450;
            continue;
          case 6:
            this._currentPlayer = 0;
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * -1943821567 ^ 1214042404;
            continue;
          case 7:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -260633161 ^ 1758543801;
            continue;
          case 8:
            int num4 = flag2 ? -313914363 : (num4 = -2045291617);
            num1 = num4 ^ (int) num2 * 857343881;
            continue;
          case 9:
            num1 = (int) num2 * 1103513459 ^ 2076277222;
            continue;
          case 10:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1636919286 ^ -1774514730;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this.PlayerTurn(this._currentPlayer);
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 986038966;
      while (true)
      {
        uint num2;
        bool flag1;
        Card card;
        int num3;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num4;
        PlayerState playerState1;
        bool flag6;
        Player player;
        int num5;
        bool flag7;
        bool flag8;
        bool flag9;
        PlayerState playerState2;
        int index;
        bool flag10;
        bool flag11;
        int num6;
        switch ((num2 = (uint) (num1 ^ 945134861)) % 81U)
        {
          case 0:
            int num7 = !this.Rules.OnlyOneWinner ? -444356133 : (num7 = -966564409);
            num1 = num7 ^ (int) num2 * -404741511;
            continue;
          case 1:
            num1 = (int) num2 * -1245537249 ^ -1306846947;
            continue;
          case 2:
            ++num4;
            num1 = 1678229780;
            continue;
          case 3:
            flag10 = index < this._playerStates.Length;
            num1 = 1404593215;
            continue;
          case 4:
            num1 = 104989534;
            continue;
          case 5:
            playerState1.State = State.Won;
            num1 = (int) num2 * 1549941875 ^ 194291228;
            continue;
          case 6:
            num1 = (int) num2 * -427980055 ^ 1437418627;
            continue;
          case 7:
            num1 = (int) num2 * -946589642 ^ -438516108;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1880277244 ^ -971608432;
            continue;
          case 10:
            int num8 = playerState1.State == 0 ? 202047794 : (num8 = 1085849213);
            num1 = num8 ^ (int) num2 * 680250549;
            continue;
          case 11:
            index = 0;
            num1 = (int) num2 * 1590848375 ^ -558884568;
            continue;
          case 12:
            playerState2.State = State.Lose;
            num1 = 1092902047;
            continue;
          case 13:
            flag6 = playerState1.Sprint < 0;
            num1 = 1892324378;
            continue;
          case 14:
            ++playerState1.Sprint;
            num1 = (int) num2 * -170955101 ^ 935593741;
            continue;
          case 15:
            num1 = 1695718208;
            continue;
          case 16:
            int num9 = flag3 ? -1326714568 : (num9 = -1990055012);
            num1 = num9 ^ (int) num2 * -1663245;
            continue;
          case 17:
            playerState2 = this._playerStates[index];
            num1 = 1982453637;
            continue;
          case 18:
            flag9 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 2111178433;
            continue;
          case 19:
            int num10 = !flag9 ? -99421826 : (num10 = -167576544);
            num1 = num10 ^ (int) num2 * 377768028;
            continue;
          case 20:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * -112846554 ^ -1361027175;
            continue;
          case 21:
            playerState1.Resources -= num3;
            int num11 = playerState1.Resources >= 0 ? -2137987211 : (num11 = -1624541078);
            num1 = num11 ^ (int) num2 * -449321377;
            continue;
          case 22:
            int num12 = !flag10 ? 815481785 : (num12 = 1723894188);
            num1 = num12 ^ (int) num2 * -58455848;
            continue;
          case 23:
            num1 = (int) num2 * -1511415384 ^ 1413811058;
            continue;
          case 24:
            num1 = (int) num2 * 316768866 ^ -999555508;
            continue;
          case 25:
            flag2 = num4 == playerIndex;
            num1 = 25256835;
            continue;
          case 26:
            this.Print((object) Game.\u206E⁮‮​‭‫‬‌‪⁫‏‮‮‫‌‍‍‍⁪⁯‭‍‬‏​​‪‬‮‪‮‮⁬‌‎‏‪‮‌⁪‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 734409752 ^ 495478079;
            continue;
          case 27:
            num1 = (int) num2 * -615313480 ^ -620694501;
            continue;
          case 28:
            int num13 = !this.Losers.Contains(playerIndex) ? 937007038 : (num13 = 1767074405);
            num1 = num13 ^ (int) num2 * 1938698704;
            continue;
          case 29:
            int num14 = flag6 ? 1497844594 : (num14 = 391812874);
            num1 = num14 ^ (int) num2 * -848309818;
            continue;
          case 30:
            ++index;
            num1 = 1100257892;
            continue;
          case 31:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -828732144 ^ 1443543685;
            continue;
          case 32:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -647874334 ^ -852274907;
            continue;
          case 33:
            this.Losers.Add(index);
            num1 = (int) num2 * 1148806034 ^ 527272524;
            continue;
          case 34:
            num1 = 465937836;
            continue;
          case 35:
            int num15 = !flag8 ? -1414995608 : (num15 = -280180958);
            num1 = num15 ^ (int) num2 * 644599842;
            continue;
          case 36:
            num1 = (int) num2 * 1274702447 ^ 704029245;
            continue;
          case 37:
            num1 = 195940121;
            continue;
          case 38:
            num1 = (int) num2 * 1889569008 ^ -1184318117;
            continue;
          case 39:
            flag1 = !this.Losers.Contains(index);
            num1 = (int) num2 * -414885931 ^ -101841587;
            continue;
          case 40:
            num1 = (int) num2 * 1509661042 ^ 36838679;
            continue;
          case 41:
            num1 = (int) num2 * -1139904225 ^ -177281919;
            continue;
          case 42:
            int num16;
            num1 = num16 = num4 >= this._playerStates.Length ? 1027393226 : (num16 = 2024224702);
            continue;
          case 43:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206E⁮‮​‭‫‬‌‪⁫‏‮‮‫‌‍‍‍⁪⁯‭‍‬‏​​‪‬‮‪‮‮⁬‌‎‏‪‮‌⁪‮("\t", playerState3 != null ? Game.\u206B‎‎⁭⁭⁪‭‎‌‏‏⁮‪‍‫⁮⁭‬‮‬‭‏⁬‌⁭⁯‮⁭​‬⁯‌⁮‪⁭⁭‌‌⁭‏‮((object) playerState3) : (string) null));
            num1 = 245937476;
            continue;
          case 44:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag7 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 330825255 ^ 1679235763;
            continue;
          case 45:
            int num17;
            num1 = num17 = this.Losers.Contains(num4) ? 1433662068 : (num17 = 714287285);
            continue;
          case 46:
            int num18 = flag4 ? 1265197576 : (num18 = 1325591023);
            num1 = num18 ^ (int) num2 * 490294341;
            continue;
          case 47:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 1010603937 ^ 1953705722;
            continue;
          case 48:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 49:
            num1 = (int) num2 * -702993318 ^ 218876632;
            continue;
          case 50:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag4 ? (object) "ALL " : (object) "", flag5 ? (object) "receives" : (object) "pays", (object) Game.\u202D‎‫‎‮​⁫⁯​​⁫​​⁬⁬⁬‍‎⁮⁮‏‬⁫‪⁫‌‏​⁫⁮‪‍‏‌‪⁮⁭‎⁬‮(num3), flag7 ? (object) "advance" : (object) "stay");
            num1 = 1413184818;
            continue;
          case 51:
            flag7 = true;
            num1 = 2130246569;
            continue;
          case 52:
            num1 = (int) num2 * 119528516 ^ 1176930520;
            continue;
          case 53:
            this.Losers.Add(num4);
            num1 = (int) num2 * -1317274655 ^ -1991578420;
            continue;
          case 54:
            flag3 = playerState2.Resources >= 0;
            num1 = (int) num2 * -394417075 ^ 2091626405;
            continue;
          case 55:
            this._finished = true;
            num1 = (int) num2 * -427928978 ^ -800615995;
            continue;
          case 56:
            num4 = 0;
            num1 = (int) num2 * 1887965215 ^ 224050672;
            continue;
          case 57:
            num1 = (int) num2 * 1054860798 ^ 1879365369;
            continue;
          case 58:
            flag8 = flag7;
            num1 = 554935136;
            continue;
          case 59:
            int num19 = !flag1 ? -1813409734 : (num19 = -34703232);
            num1 = num19 ^ (int) num2 * 475080066;
            continue;
          case 60:
            num1 = 1638953386;
            continue;
          case 61:
            num1 = (int) num2 * -1170604247 ^ -369984585;
            continue;
          case 62:
            num1 = (int) num2 * 807539615 ^ 766249855;
            continue;
          case 63:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1099096161 ^ 377088758;
            continue;
          case 64:
            flag11 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 1185893141;
            continue;
          case 65:
            int num20 = !flag11 ? 1027691896 : (num20 = 882698485);
            num1 = num20 ^ (int) num2 * -869069651;
            continue;
          case 66:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -593197918 ^ -230506300;
            continue;
          case 67:
            num3 = Game.\u200E⁭‎​⁬‭‫​‎⁯⁬‏‎⁬‫​​‬⁮⁭‏⁮​⁯‬⁭‫‌‪‍​⁮‌‭⁫‬⁮‭‪⁭‮(0, num5);
            num1 = (int) num2 * -1652949886 ^ 56303855;
            continue;
          case 68:
            num1 = 636592206;
            continue;
          case 69:
            goto label_3;
          case 70:
            num1 = 1600461286;
            continue;
          case 71:
            int num21 = flag2 ? -2058699134 : (num21 = -1052274625);
            num1 = num21 ^ (int) num2 * -99887287;
            continue;
          case 72:
            int num22 = flag5 ? -1494819663 : (num22 = -771355914);
            num1 = num22 ^ (int) num2 * -788463640;
            continue;
          case 73:
            playerState2.Resources -= Game.\u200E⁭‎​⁬‭‫​‎⁯⁬‏‎⁬‫​​‬⁮⁭‏⁮​⁯‬⁭‫‌‪‍​⁮‌‭⁫‬⁮‭‪⁭‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 548296293 ^ 2026052502;
            continue;
          case 74:
            flag7 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1808155435 ^ -173070589;
            continue;
          case 75:
            flag7 = false;
            num1 = 1332642044;
            continue;
          case 76:
            num1 = (int) num2 * 1739163789 ^ -1549313850;
            continue;
          case 77:
            card = this.DrawCard();
            flag5 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -806742597 ^ -1202045589;
              continue;
            }
            num6 = 0;
            break;
          case 78:
            num1 = (int) num2 * 1247380856 ^ 1449217702;
            continue;
          case 79:
            num1 = (int) num2 * 570896988 ^ 1994083438;
            continue;
          case 80:
            num3 = card.Impact;
            num1 = (int) num2 * -1390295866 ^ 298119819;
            continue;
          default:
            goto label_86;
        }
        flag4 = num6 != 0;
        num1 = 549964305;
      }
label_3:
      return;
label_86:;
    }

    private Card DrawCard()
    {
      if (this._deck.Count > 0)
        goto label_6;
label_1:
      int num1 = 1683443248;
label_2:
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1303497574)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_6;
          case 2:
            num1 = (int) num2 * -1582369120 ^ 113553811;
            continue;
          case 3:
            this._deck.RemoveAt(0);
            card2 = card1;
            num1 = (int) num2 * -706890290 ^ -1837671030;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -2015693781 ^ -1798032051;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return card2;
label_6:
      card1 = this._deck[0];
      num1 = 1638088231;
      goto label_2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -1614945668;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -861798767)) % 8U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206B‎‎⁭⁭⁪‭‎‌‏‏⁮‪‍‫⁮⁭‬‮‬‭‏⁬‌⁭⁯‮⁭​‬⁯‌⁮‪⁭⁭‌‌⁭‏‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206F⁬​⁬‍‌‏⁭‪‌⁭⁮⁫‭‬‬‭⁪‪‬⁭⁮‫‭‎⁫⁪⁯⁮⁮‭‌⁬⁭‭‪​‫⁪‌‮(strArray);
            ++index;
            num1 = -1324726465;
            continue;
          case 1:
            str2 = str1;
            num1 = (int) num2 * 591179035 ^ 1300460584;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * -494809284 ^ -1338000646;
            continue;
          case 4:
            goto label_1;
          case 5:
            str1 = "";
            num1 = (int) num2 * -444334063 ^ -1184491201;
            continue;
          case 6:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? -895325080 : (num3 = -760988647);
            continue;
          case 7:
            num1 = (int) num2 * -180665006 ^ 1858312657;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1379210655;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 621433343)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * -1673743889 ^ -1725388514;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 1909413947;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 308894003)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            Game.\u202C⁫‎⁬‎‬‏‌⁬‏⁯⁬⁬‬⁪‎​‏⁯‪⁫‭⁪‭​‫⁯‭‏‫‭‍⁪‭‬⁯⁮⁬‬‌‮(this._buffer, Game.\u200C⁯‎⁯⁯​⁮⁪‫⁫‏‬⁭‫‎‌⁮‬⁫‌‫⁯​‫‍‫‫⁬‫⁭⁫​⁫‬⁯⁫‎⁬‮⁭‮(Game.\u206B‎‎⁭⁭⁪‭‎‌‏‏⁮‪‍‫⁮⁭‬‮‬‭‏⁬‌⁭⁯‮⁭​‬⁯‌⁮‪⁭⁭‌‌⁭‏‮(text), more));
            num1 = (int) num2 * 687456642 ^ 2058095400;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u200C⁪‮⁬‫‪⁭‏‭‌‎‍⁮⁯‍⁮‏⁮⁯⁯⁭⁭‮⁬‍⁫‍‏‎‬‬‪​‎​‭‭‌‪‫‮([In] int obj0) => new Random(obj0);

    static string \u202D‍‬‭⁭‮​⁫‪⁪‪⁭‫‭‬‬‎‪‏‏⁯‌⁭‪⁯‫‮⁫⁯‮⁬‪‎‫​‌‏‌‌‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206E⁮‮​‭‫‬‌‪⁫‏‮‮‫‌‍‍‍⁪⁯‭‍‬‏​​‪‬‮‪‮‮⁬‌‎‏‪‮‌⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200E⁭‎​⁬‭‫​‎⁯⁬‏‎⁬‫​​‬⁮⁭‏⁮​⁯‬⁭‫‌‪‍​⁮‌‭⁫‬⁮‭‪⁭‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202D‎‫‎‮​⁫⁯​​⁫​​⁬⁬⁬‍‎⁮⁮‏‬⁫‪⁫‌‏​⁫⁮‪‍‏‌‪⁮⁭‎⁬‮([In] int obj0) => Math.Abs(obj0);

    static string \u206B‎‎⁭⁭⁪‭‎‌‏‏⁮‪‍‫⁮⁭‬‮‬‭‏⁬‌⁭⁯‮⁭​‬⁯‌⁮‪⁭⁭‌‌⁭‏‮([In] object obj0) => obj0.ToString();

    static string \u206F⁬​⁬‍‌‏⁭‪‌⁭⁮⁫‭‬‬‭⁪‪‬⁭⁮‫‭‎⁫⁪⁯⁮⁮‭‌⁬⁭‭‪​‫⁪‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C⁯‎⁯⁯​⁮⁪‫⁫‏‬⁭‫‎‌⁮‬⁫‌‫⁯​‫‍‫‫⁬‫⁭⁫​⁫‬⁯⁫‎⁬‮⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202C⁫‎⁬‎‬‏‌⁬‏⁯⁬⁬‬⁪‎​‏⁯‪⁫‭⁪‭​‫⁯‭‏‫‭‍⁪‭‬⁯⁮⁬‬‌‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
