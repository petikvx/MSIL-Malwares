// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: fC, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2BFFC2A0-BEF7-47FD-8B55-B5339EE53E65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-a1558391914f4235dfdcdddcdf0de915a800541a4271feb4aff34af82b83a935.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
      this.ChessBoard = b;
      this.resetFlags();
    }

    public ChessCore()
    {
label_1:
      int num1 = 222313220;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 706068181)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -2137196162 ^ 1279953594;
            continue;
          case 1:
            num1 = (int) num2 * -414128179 ^ 390865808;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void RestartGame()
    {
label_1:
      int num1 = 537798447;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1446128269)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            this.resetFlags();
            num1 = (int) num2 * 1638534961 ^ -811309036;
            continue;
          case 3:
            num1 = (int) num2 * 529239812 ^ 174811112;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.ChessBoard.Restart();
    }

    private void resetFlags(bool turn = false)
    {
      this.DisableTurn = turn;
label_1:
      int num1 = -1671501850;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1638449427)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * 726398286 ^ 607010709;
            continue;
          case 3:
            this.TurnId = 1;
            num1 = (int) num2 * -2047764458 ^ 808289399;
            continue;
          case 4:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * -1053970001 ^ 1816699456;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.Turns.Clear();
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 1052803154;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 810146465)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 1956779573 ^ 1673545212;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * -1092008751 ^ 521592810;
            continue;
          case 2:
            num1 = (int) num2 * 1707093597 ^ 1891191203;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -547588631 ^ 464766974;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 189284666;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 625519767)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            num1 = (int) num2 * 1673725644 ^ -684145383;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -1925640755 ^ 720129437;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
      new DebugChess(this.ChessBoard).TestCastling();
label_1:
      int num1 = -760631436;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -325969700)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -707348597 ^ 810220332;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -944944611;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -84003258)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 528973200 ^ -1244301585;
            continue;
          case 2:
            goto label_1;
          case 3:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * -127726901 ^ -1922021585;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.resetFlags(true);
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = 1717051674;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 607991081)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -1639828299 ^ 2005307520;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 614821475;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1569518364)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * -803995516 ^ -441746457;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1574710122 ^ -623422313;
            continue;
          case 4:
            this.resetFlags(true);
            num1 = (int) num2 * 2058626181 ^ 1061762922;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 1358125585;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 909964531)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            this.resetFlags(true);
            num1 = (int) num2 * -1271933979 ^ 245561213;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }
  }
}
