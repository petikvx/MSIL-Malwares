// Decompiled with JetBrains decompiler
// Type: GLuaR.Maps.PropertyPredicateMapping
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using Fireball.Docking;
using Fireball.Syntax;
using Fireball.Windows.Forms;
using Fireball.Windows.Forms.CodeEditor;
using Fireball.Windows.Forms.CodeEditor.TextDraw;
using GLuaR.Importers;
using GLuaR.Shared;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace GLuaR.Maps
{
  internal class PropertyPredicateMapping : DockableWindow
  {
    private IContainer m_RulesField;
    public SyntaxDocument m_AnnotationField;
    public CodeEditorControl m_QueueField;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PropertyPredicateMapping(Page reference)
    {
      int num = 5;
      string str;
      while (true)
      {
        switch (num)
        {
          case 0:
            if (str == "txt")
              goto case 2;
            else
              goto case 2;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.AwakeRule();
            str = PropertyPredicateMapping.VerifyRule(reference.m_Reg);
            num = 0;
            continue;
          case 2:
          case 3:
            this.m_QueueField.Open(reference.m_Worker);
            ((Control) this).Tag = (object) reference;
            num = 6;
            continue;
          case 5:
            ImporterMapper.InitAccount();
            num = 4;
            continue;
          case 6:
            goto label_6;
          default:
            num = 2;
            continue;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static string VerifyRule(string last) => last.Substring(last.Length - 3, 3).ToLower();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void AwakeRule()
    {
      int num1 = 7;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              this.m_RulesField = (IContainer) new Container();
              if (PropertyPredicateMapping.CancelRegistry())
              {
                num2 = 12;
                continue;
              }
              goto case 14;
            case 1:
              this.m_QueueField.LockCursorUpdate = false;
              ((Control) this.m_QueueField).Name = "editor";
              this.m_QueueField.ParseOnPaste = true;
              this.m_QueueField.Saved = false;
              this.m_QueueField.ShowScopeIndicator = false;
              if (!PropertyPredicateMapping.ConnectRegistry())
              {
                num2 = 8;
                continue;
              }
              goto label_15;
            case 2:
              ((Control) this).Name = "CodeTab";
              ((Form) this).ShowIcon = false;
              ((Form) this).ShowInTaskbar = false;
              this.TabText = "[ Document ]";
              ((Control) this).Text = "[ Document ]";
              if (true)
              {
                num2 = 15;
                continue;
              }
              goto case 1;
            case 3:
              goto label_1;
            case 4:
              this.m_QueueField.FontName = "Courier New";
              num2 = 10;
              continue;
            case 5:
              goto label_6;
            case 6:
              goto label_15;
            case 8:
              this.m_QueueField.ShowTabGuides = true;
              ((Control) this.m_QueueField).Size = new Size(680, 383);
              num2 = 3;
              continue;
            case 9:
            case 13:
              ((Control) this.m_QueueField).TextChanged += new EventHandler(this.CollectRule);
              num2 = 4;
              continue;
            case 10:
              this.m_QueueField.FontSize = 10f;
              this.m_AnnotationField.Lines = new string[1]
              {
                ""
              };
              this.m_AnnotationField.MaxUndoBufferSize = 1000;
              this.m_AnnotationField.Modified = false;
              this.m_AnnotationField.UndoStep = 0;
              ((Form) this).ClientSize = new Size(680, 383);
              ((Control) this).Controls.Add((Control) this.m_QueueField);
              this.DockableAreas = (DockAreas) 32;
              ((Control) this).DoubleBuffered = true;
              if (PropertyPredicateMapping.CancelRegistry())
              {
                num2 = 16;
                continue;
              }
              goto case 9;
            case 11:
              goto label_12;
            case 12:
              goto label_8;
            case 14:
              this.m_QueueField = new CodeEditorControl();
              this.m_AnnotationField = new SyntaxDocument(this.m_RulesField);
              ((Control) this).SuspendLayout();
              this.m_QueueField.ActiveView = (ActiveView) 3;
              this.m_QueueField.AllowBreakPoints = false;
              this.m_QueueField.AutoListPosition = (TextPoint) null;
              this.m_QueueField.AutoListSelectedText = "a123";
              this.m_QueueField.AutoListVisible = false;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 8;
            case 15:
              goto label_5;
            case 16:
              goto label_7;
            case 17:
              goto label_20;
            default:
              goto label_4;
          }
        }
label_1:
        this.m_QueueField.SmoothScroll = true;
        this.m_QueueField.SplitView = false;
        this.m_QueueField.SplitviewH = -4;
        this.m_QueueField.SplitviewV = -4;
        goto label_12;
label_4:
        num1 = 11;
        continue;
label_5:
        ((Form) this).Load += new EventHandler(this.ListRule);
        ((Control) this).ResumeLayout(false);
        num1 = 17;
        continue;
label_6:
        this.m_QueueField.ChildBorderStyle = (ControlBorderStyle) 0;
        this.m_QueueField.CopyAsRTF = false;
        ((Control) this.m_QueueField).Dock = DockStyle.Fill;
        this.m_QueueField.Document = this.m_AnnotationField;
        this.m_QueueField.InfoTipCount = 1;
        num1 = 6;
        continue;
label_7:
        ((Form) this).FormBorderStyle = FormBorderStyle.FixedSingle;
        num1 = 2;
        continue;
label_8:
        LineMarginRender lineMarginRender = new LineMarginRender();
        num1 = 14;
        continue;
label_12:
        this.m_QueueField.TabGuideColor = Color.FromArgb(244, 243, 234);
        ((Control) this.m_QueueField).TabIndex = 0;
        this.m_QueueField.TextDrawStyle = (TextDrawType) 3;
        this.m_QueueField.WhitespaceColor = SystemColors.ControlDark;
        ((Control) this.m_QueueField).Click += new EventHandler(this.InsertRule);
        num1 = 13;
        continue;
label_15:
        this.m_QueueField.InfoTipPosition = (TextPoint) null;
        this.m_QueueField.InfoTipSelectedIndex = 1;
        this.m_QueueField.InfoTipVisible = false;
        lineMarginRender.Bounds = new Rectangle(19, 0, 19, 16);
        this.m_QueueField.LineMarginRender = lineMarginRender;
        ((Control) this.m_QueueField).Location = new Point(0, 0);
        num1 = 1;
      }
label_20:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ListRule(object config, EventArgs cust)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CollectRule(object instance, EventArgs ord) => this.TabText = this.m_QueueField.FileName + "*";

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InsertRule(object asset, EventArgs cont)
    {
    }

    internal static bool CancelRegistry() => true;

    internal static bool ConnectRegistry() => false;
  }
}
