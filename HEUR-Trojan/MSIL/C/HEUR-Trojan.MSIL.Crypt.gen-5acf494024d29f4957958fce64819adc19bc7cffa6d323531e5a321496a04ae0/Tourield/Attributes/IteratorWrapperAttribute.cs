// Decompiled with JetBrains decompiler
// Type: Tourield.Attributes.IteratorWrapperAttribute
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Collections;
using DebuggerTypeProxyAttrib.Maps;
using DebuggerTypeProxyAttrib.Pages;
using DebuggerTypeProxyAttrib.Templates;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Markup;
using Tourield.Specifications;

namespace Tourield.Attributes
{
  public class IteratorWrapperAttribute : Window, IComponentConnector
  {
    public GlobalErrorCollection expression;
    internal System.Windows.Controls.Button cmdStart;
    private bool m_Schema;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public IteratorWrapperAttribute()
    {
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 0:
            RegistryPagePage.ListMethod();
            if (IteratorWrapperAttribute.CalculateAttribute())
            {
              num = 3;
              continue;
            }
            goto case 1;
          case 1:
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 2;
          case 2:
          case 4:
            this.expression = new GlobalErrorCollection();
            this.InitializeComponent();
            num = 5;
            continue;
          case 5:
            goto label_7;
          default:
            num = 4;
            continue;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void QueryOrder(object first, RoutedEventArgs map)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        DebuggerTypeProxyAttrib.States.Listener listener;
        DateTime dateTime1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_2;
            case 1:
            case 2:
              dateTime1 = dateTime1.AddMilliseconds(500.0);
              num2 = 5;
              continue;
            case 3:
            case 5:
              goto label_18;
            case 4:
              goto label_5;
            case 6:
              listener = new DebuggerTypeProxyAttrib.States.Listener();
              num2 = 7;
              continue;
            case 7:
              goto label_1;
            case 8:
              goto label_19;
            default:
              goto label_22;
          }
        }
label_1:
        listener.Show();
        DateTime dateTime2 = new DateTime();
        DateTime dateTime3 = new DateTime();
        dateTime1 = DateTime.Now;
        num1 = 1;
        continue;
label_2:
        bool flag;
        if (flag)
        {
          num1 = 4;
          continue;
        }
        goto label_16;
label_5:
        if (this.expression.m_Broadcaster["SpaceRocks"] != null)
        {
          using (List<PrinterPrototypeSpec>.Enumerator enumerator = this.expression.m_Broadcaster["SpaceRocks"].GetEnumerator())
          {
label_13:
            while (enumerator.MoveNext())
            {
              PrinterPrototypeSpec current = enumerator.Current;
              int num3 = 3;
              while (true)
              {
                switch (num3)
                {
                  case 0:
                  case 3:
                    current._Reg._Candidate = ServiceRulesTemplate.PushOrder();
                    goto case 1;
                  case 1:
                  case 2:
                    TagAttributeMapping.RegisterOrder(ref current._Reg, ref current.message, this.expression);
                    num3 = 4;
                    continue;
                  case 4:
                    goto label_13;
                  default:
                    num3 = 2;
                    continue;
                }
              }
            }
          }
        }
        dateTime1 = dateTime1.AddMilliseconds(500.0);
label_16:
        num1 = 8;
        continue;
label_18:
        dateTime3 = DateTime.Now;
label_19:
        System.Windows.Forms.Application.DoEvents();
        flag = DateTime.Now >= dateTime1;
        goto label_2;
label_22:
        num1 = 0;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 0;
      if (false)
        return;
      while (true)
      {
        Uri resourceLocator;
        int num2;
        bool schema;
        switch (num1)
        {
          case 0:
            schema = this.m_Schema;
            num1 = 1;
            continue;
          case 1:
            if (!schema)
            {
              this.m_Schema = true;
              resourceLocator = new Uri("/DebuggerTypeProxyAttrib;component/mainloop.xaml", UriKind.Relative);
              goto case 3;
            }
            else
            {
              num1 = 5;
              continue;
            }
          case 2:
            goto label_11;
          case 3:
          case 4:
            System.Windows.Application.LoadComponent((object) this, resourceLocator);
            num2 = 6;
            break;
          case 5:
            goto label_12;
          case 6:
            goto label_10;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_11:
      return;
label_12:
      return;
label_10:;
    }

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int idxinit, object ord)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_6;
            case 1:
            case 4:
              if (num3 != 1)
              {
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto case 5;
              }
              else
                goto label_1;
            case 2:
              goto label_5;
            case 3:
              goto label_11;
            case 5:
              num3 = idxinit;
              if (IteratorWrapperAttribute.CalculateAttribute())
              {
                num2 = 4;
                continue;
              }
              goto label_10;
            case 6:
              goto label_12;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 2;
        continue;
label_6:
        this.m_Schema = true;
        num1 = 6;
      }
label_1:
      this.cmdStart = (System.Windows.Controls.Button) ord;
      this.cmdStart.Click += new RoutedEventHandler(this.QueryOrder);
      return;
label_5:
      return;
label_11:
      return;
label_12:
      return;
label_10:;
    }

    internal static bool CalculateAttribute() => true;

    internal static bool CallAttribute() => false;
  }
}
