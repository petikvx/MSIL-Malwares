// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteCommandBuilder
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.ComponentModel;
using System.Data.Common;
using System.Globalization;

namespace System.Data.SQLite
{
  public sealed class SQLiteCommandBuilder : DbCommandBuilder
  {
    public SQLiteCommandBuilder()
      : this((SQLiteDataAdapter) null)
    {
    }

    public SQLiteCommandBuilder(SQLiteDataAdapter adp)
    {
      this.QuotePrefix = "[";
      this.QuoteSuffix = "]";
      this.DataAdapter = adp;
    }

    protected override void ApplyParameterInfo(
      DbParameter parameter,
      DataRow row,
      StatementType statementType,
      bool whereClause)
    {
      parameter.DbType = (DbType) row[SchemaTableColumn.ProviderType];
    }

    protected override string GetParameterName(string parameterName) => string.Format((IFormatProvider) CultureInfo.InvariantCulture, "@{0}", new object[1]
    {
      (object) parameterName
    });

    protected override string GetParameterName(int parameterOrdinal) => string.Format((IFormatProvider) CultureInfo.InvariantCulture, "@param{0}", new object[1]
    {
      (object) parameterOrdinal
    });

    protected override string GetParameterPlaceholder(int parameterOrdinal) => this.GetParameterName(parameterOrdinal);

    protected override void SetRowUpdatingHandler(DbDataAdapter adapter)
    {
      if (adapter == base.DataAdapter)
        ((SQLiteDataAdapter) adapter).RowUpdating -= new EventHandler<RowUpdatingEventArgs>(this.RowUpdatingEventHandler);
      else
        ((SQLiteDataAdapter) adapter).RowUpdating += new EventHandler<RowUpdatingEventArgs>(this.RowUpdatingEventHandler);
    }

    private void RowUpdatingEventHandler(object sender, RowUpdatingEventArgs e) => this.RowUpdatingHandler(e);

    public SQLiteDataAdapter DataAdapter
    {
      get => (SQLiteDataAdapter) base.DataAdapter;
      set => this.DataAdapter = (DbDataAdapter) value;
    }

    public SQLiteCommand GetDeleteCommand() => (SQLiteCommand) base.GetDeleteCommand();

    public SQLiteCommand GetDeleteCommand(bool useColumnsForParameterNames) => (SQLiteCommand) base.GetDeleteCommand(useColumnsForParameterNames);

    public SQLiteCommand GetUpdateCommand() => (SQLiteCommand) base.GetUpdateCommand();

    public SQLiteCommand GetUpdateCommand(bool useColumnsForParameterNames) => (SQLiteCommand) base.GetUpdateCommand(useColumnsForParameterNames);

    public SQLiteCommand GetInsertCommand() => (SQLiteCommand) base.GetInsertCommand();

    public SQLiteCommand GetInsertCommand(bool useColumnsForParameterNames) => (SQLiteCommand) base.GetInsertCommand(useColumnsForParameterNames);

    [Browsable(false)]
    public override CatalogLocation CatalogLocation
    {
      get => base.CatalogLocation;
      set => base.CatalogLocation = value;
    }

    [Browsable(false)]
    public override string CatalogSeparator
    {
      get => base.CatalogSeparator;
      set => base.CatalogSeparator = value;
    }

    [Browsable(false)]
    [DefaultValue("[")]
    public override string QuotePrefix
    {
      get => base.QuotePrefix;
      set => base.QuotePrefix = value;
    }

    [Browsable(false)]
    public override string QuoteSuffix
    {
      get => base.QuoteSuffix;
      set => base.QuoteSuffix = value;
    }

    public override string QuoteIdentifier(string unquotedIdentifier) => string.IsNullOrEmpty(this.QuotePrefix) || string.IsNullOrEmpty(this.QuoteSuffix) || string.IsNullOrEmpty(unquotedIdentifier) ? unquotedIdentifier : this.QuotePrefix + unquotedIdentifier.Replace(this.QuoteSuffix, this.QuoteSuffix + this.QuoteSuffix) + this.QuoteSuffix;

    public override string UnquoteIdentifier(string quotedIdentifier) => string.IsNullOrEmpty(this.QuotePrefix) || string.IsNullOrEmpty(this.QuoteSuffix) || string.IsNullOrEmpty(quotedIdentifier) || !quotedIdentifier.StartsWith(this.QuotePrefix, StringComparison.OrdinalIgnoreCase) || !quotedIdentifier.EndsWith(this.QuoteSuffix, StringComparison.OrdinalIgnoreCase) ? quotedIdentifier : quotedIdentifier.Substring(this.QuotePrefix.Length, quotedIdentifier.Length - (this.QuotePrefix.Length + this.QuoteSuffix.Length)).Replace(this.QuoteSuffix + this.QuoteSuffix, this.QuoteSuffix);

    [Browsable(false)]
    public override string SchemaSeparator
    {
      get => base.SchemaSeparator;
      set => base.SchemaSeparator = value;
    }

    protected override DataTable GetSchemaTable(DbCommand sourceCommand)
    {
      using (IDataReader dataReader = (IDataReader) sourceCommand.ExecuteReader(CommandBehavior.SchemaOnly | CommandBehavior.KeyInfo))
      {
        DataTable schemaTable = dataReader.GetSchemaTable();
        if (this.HasSchemaPrimaryKey(schemaTable))
          this.ResetIsUniqueSchemaColumn(schemaTable);
        return schemaTable;
      }
    }

    private bool HasSchemaPrimaryKey(DataTable schema)
    {
      DataColumn column = schema.Columns[SchemaTableColumn.IsKey];
      foreach (DataRow row in (InternalDataCollectionBase) schema.Rows)
      {
        if ((bool) row[column])
          return true;
      }
      return false;
    }

    private void ResetIsUniqueSchemaColumn(DataTable schema)
    {
      DataColumn column1 = schema.Columns[SchemaTableColumn.IsUnique];
      DataColumn column2 = schema.Columns[SchemaTableColumn.IsKey];
      foreach (DataRow row in (InternalDataCollectionBase) schema.Rows)
      {
        if (!(bool) row[column2])
          row[column1] = (object) false;
      }
      schema.AcceptChanges();
    }
  }
}
