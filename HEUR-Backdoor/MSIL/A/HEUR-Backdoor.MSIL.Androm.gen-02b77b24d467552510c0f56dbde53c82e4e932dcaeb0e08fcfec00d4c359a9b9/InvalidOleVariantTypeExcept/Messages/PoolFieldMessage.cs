// Decompiled with JetBrains decompiler
// Type: InvalidOleVariantTypeExcept.Messages.PoolFieldMessage
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using InvalidOleVariantTypeExcept.Filters;
using System;
using System.Runtime.CompilerServices;
using TGL.Licensing;

namespace InvalidOleVariantTypeExcept.Messages
{
  [Serializable]
  public class PoolFieldMessage
  {
    private string _State;
    private string token;
    private int _Reader;
    private int _List;
    [NonSerialized]
    private int _Mock;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PoolFieldMessage(string setup)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              int num3 = 4;
              num2 = PoolFieldMessage.PostInfo() ? num3 : num3;
              continue;
            case 2:
            case 4:
              goto label_6;
            case 3:
              goto label_2;
            case 5:
              goto label_3;
            case 6:
              goto label_1;
            case 7:
              goto label_5;
            default:
              if (!PoolFieldMessage.PostInfo())
              {
                num2 = 3;
                continue;
              }
              goto label_10;
          }
        }
label_1:
        UtilsContextLicense.ListWorker();
        num1 = 0;
        continue;
label_2:
        this.Points = 0;
        num1 = 5;
        continue;
label_3:
        this.CancelRecord(0);
        num1 = 7;
        continue;
label_6:
        this.PublishRecord(setup);
        goto label_2;
      }
label_5:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PoolFieldMessage(string param, string connection)
    {
      int num1 = 0;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            UtilsContextLicense.ListWorker();
            num2 = 7;
            break;
          case 1:
          case 7:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            if (PoolFieldMessage.ReadInfo())
            {
              num1 = 2;
              continue;
            }
            goto case 2;
          case 2:
            this.PublishRecord(param);
            if (PoolFieldMessage.ReadInfo())
            {
              num1 = 6;
              continue;
            }
            goto case 5;
          case 3:
          case 6:
            this.token = connection;
            goto case 5;
          case 4:
            this.CancelRecord(0);
            num2 = 8;
            break;
          case 5:
            this.Points = 0;
            num2 = 4;
            break;
          case 8:
            goto label_10;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PoolFieldMessage()
    {
      UtilsContextLicense.ListWorker();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SelectRecord() => this._Reader += 3;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void MapRecord() => ++this._Reader;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RunRecord() => ++this._List;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string StartRecord() => this._State;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PublishRecord(string value) => this._State = value;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string VerifyRecord() => this.token;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ExcludeRecord(string res) => this.token = res;

    public int Points
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Reader;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._Reader = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CloneRecord() => this._List;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CancelRecord(int taskoffset) => this._List = taskoffset;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int LogoutRecord() => this._Mock;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void QueryRecord(int value_size) => this._Mock = value_size;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool Equals(object task)
    {
      int num = 2;
      if (true)
        goto label_5;
label_1:
      bool flag1;
      bool flag2;
      if (flag1)
      {
        num = 5;
      }
      else
      {
        flag2 = this._State.Equals(((PoolFieldMessage) task).StartRecord());
        num = 6;
      }
label_5:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            flag1 = task == null;
            if (true)
            {
              num = 1;
              continue;
            }
            goto label_4;
          case 1:
            goto label_1;
          case 3:
          case 4:
          case 6:
            goto label_9;
          case 5:
            goto label_4;
          default:
            if (true)
            {
              num = 4;
              continue;
            }
            goto label_9;
        }
      }
label_4:
      flag2 = false;
label_9:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override int GetHashCode() => this._State.GetHashCode();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString() => this._State + RoleValueFilter.RestartVisitor(850) + this._Reader.ToString() + RoleValueFilter.RestartVisitor(878) + this._List.ToString() + RoleValueFilter.RestartVisitor(912);

    internal static bool ReadInfo() => true;

    internal static bool PostInfo() => false;
  }
}
