// Decompiled with JetBrains decompiler
// Type: ProjNet.Common.Rule
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Producers;
using ProjNet.Structs;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.Common
{
  public abstract class Rule : CodeObjectProducer
  {
    private string m_Worker;
    private string m_Customer;
    private long broadcaster;
    private string code;
    private string m_Composer;
    private string m_Getter;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Rule(
      string config,
      string ivk,
      long insertTAGAt,
      string setup2,
      string connection3,
      string attr4)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              PageAdvisorStructBuilder.PrepareCreator();
              if (!Rule.DisableWrapper())
              {
                num2 = 5;
                continue;
              }
              goto case 2;
            case 2:
              this.broadcaster = insertTAGAt;
              this.code = setup2;
              this.m_Composer = connection3;
              goto case 3;
            case 3:
            case 4:
              this.m_Getter = attr4;
              if (Rule.ViewWrapper())
              {
                num2 = 6;
                continue;
              }
              goto label_2;
            case 5:
              goto label_2;
            case 6:
              goto label_9;
            default:
              goto label_7;
          }
        }
label_2:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.m_Worker = config;
        this.m_Customer = ivk;
        num1 = 2;
        continue;
label_7:
        num1 = 4;
      }
label_9:;
    }

    public string Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Worker;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.m_Worker = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CountItem() => this.m_Customer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalcRegistry(string spec) => this.m_Customer = spec;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public long SelectItem() => this.broadcaster;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CloneRegistry(long lengthtask) => this.broadcaster = lengthtask;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string OrderItem() => this.code;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void GetRegistry(string last) => this.code = last;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string RestartItem() => this.m_Composer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CompareRegistry(string task) => this.m_Composer = task;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string EnableItem() => this.m_Getter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LoginRegistry(string info) => this.m_Getter = info;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString() => this.RevertStatus();

    [SpecialName]
    public abstract string RevertStatus();

    [SpecialName]
    public abstract string AssetItem();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal string ListRegistry()
    {
      int num1 = 4;
      if (true)
        goto label_5;
label_1:
      StringBuilder stringBuilder;
      if (!string.IsNullOrEmpty(this.RestartItem()))
        stringBuilder.AppendFormat(" Abbreviation=\"{0}\"", (object) this.RestartItem());
      bool flag1 = !string.IsNullOrEmpty(this.CountItem());
      goto label_11;
label_4:
      int num2;
      num1 = num2;
label_5:
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_13;
          case 1:
          case 3:
            goto label_1;
          case 2:
          case 5:
            if (flag2)
            {
              stringBuilder.AppendFormat(" AuthorityCode=\"{0}\"", (object) this.SelectItem());
              if (true)
              {
                num1 = 1;
                continue;
              }
              goto label_11;
            }
            else
              goto label_1;
          case 4:
            stringBuilder = new StringBuilder();
            num1 = 7;
            continue;
          case 6:
            goto label_11;
          case 7:
            goto label_7;
          case 8:
            goto label_17;
          default:
            goto label_6;
        }
      }
label_6:
      num2 = 6;
      goto label_4;
label_7:
      stringBuilder.AppendFormat("<CS_Info");
      flag2 = this.SelectItem() > 0L;
      num2 = 5;
      goto label_4;
label_13:
      stringBuilder.AppendFormat(" Authority=\"{0}\"", (object) this.CountItem());
      goto label_14;
label_17:
      string str;
      return str;
label_11:
      if (flag1)
      {
        num2 = 0;
        goto label_4;
      }
label_14:
      if (!string.IsNullOrEmpty(this.Name))
        stringBuilder.AppendFormat(" Name=\"{0}\"", (object) this.Name);
      stringBuilder.Append("/>");
      str = stringBuilder.ToString();
      num2 = 8;
      goto label_4;
    }

    public abstract bool InvokeItem(object setup);

    internal static bool ViewWrapper() => true;

    internal static bool DisableWrapper() => false;
  }
}
