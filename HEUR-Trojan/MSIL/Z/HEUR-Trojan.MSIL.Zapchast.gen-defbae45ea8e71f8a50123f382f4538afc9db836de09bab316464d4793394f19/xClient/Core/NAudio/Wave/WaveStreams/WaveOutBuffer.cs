// Decompiled with JetBrains decompiler
// Type: xClient.Core.NAudio.Wave.WaveStreams.WaveOutBuffer
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using System;
using System.Runtime.InteropServices;

namespace xClient.Core.NAudio.Wave.WaveStreams
{
  internal class WaveOutBuffer : IDisposable
  {
    private readonly 㛚殰Ὀ璟ᵟ뽏\uE205虡\uAAD7\u1B4F谰\uA62E\uF60Eㄻ\uF8D0䵬㯗뎁稍\u0087 header;
    private readonly int bufferSize;
    private readonly byte[] buffer;
    private readonly 魂盹聱्\u2731ꚕ\u3294㝮氎\u9FE9\uFFFDḼ\uEAEB\u309Bﭤ祖᷇葙\uEF8C詭 waveStream;
    private readonly object waveOutLock;
    private GCHandle hBuffer;
    private IntPtr hWaveOut;
    private GCHandle hHeader;
    private GCHandle hThis;

    public WaveOutBuffer(
      IntPtr hWaveOut,
      int bufferSize,
      魂盹聱्\u2731ꚕ\u3294㝮氎\u9FE9\uFFFDḼ\uEAEB\u309Bﭤ祖᷇葙\uEF8C詭 bufferFillStream,
      object waveOutLock)
    {
      this.bufferSize = bufferSize;
      this.buffer = new byte[bufferSize];
      this.hBuffer = GCHandle.Alloc((object) this.buffer, GCHandleType.Pinned);
      this.hWaveOut = hWaveOut;
      this.waveStream = bufferFillStream;
      this.waveOutLock = waveOutLock;
      this.header = new 㛚殰Ὀ璟ᵟ뽏\uE205虡\uAAD7\u1B4F谰\uA62E\uF60Eㄻ\uF8D0䵬㯗뎁稍\u0087();
      this.hHeader = GCHandle.Alloc((object) this.header, GCHandleType.Pinned);
      this.header.䖇顜緪\u259F딜薔\uE37F輀募\u32B6흷ḉ鍶ྠᘭ㟞\u26E2뷆\uE51B䌪 = this.hBuffer.AddrOfPinnedObject();
      this.header.萢틟갽똕뻵\u2F92\uF358\uE7BD群뱜䯰蔕袆샸\uFFFD\uF004\u18FE\uE270飃\uE234 = bufferSize;
      this.header.맷侃㣒\uFFFD飼䔀\u0530ҧ浰\uF2B5幧ᥝ뤿楾态叜胏侷\u038Bㆉ = 1;
      this.hThis = GCHandle.Alloc((object) this);
      this.header.芪\u227D鳓ܡ虜\u0FDA\uE58Cꌛ\uE3CD\uFFFD\uE2EE妜疸\uF002ﰣ痝긑䅳鱾\u2E6C = (IntPtr) this.hThis;
      lock (waveOutLock)
        ᔦ\uF14B̔촮\u2743븮浘蓧ꡆ烋枿䨿\u269E逇埓뼌붬额\uFFFD鬊.嘐颋뇶鯿쏃輊\uF479ذ\uE5DB媩\uE8D4\uFFFDጘ\u20A3냪䊏ᆶ\uF4DF\uF761\uF74B(巛퀝폳\uF0DE\uE025晱舘헸\u201D橑䭫ඏﭓ\u135C퉺㥵哸睎絳잧.\uF2FA반\uFFFD\uED23夒\uE8C5뻈\uE0FC硗睪鋁凐\u2309\u291A彖秥姽諜呰텧(hWaveOut, this.header, Marshal.SizeOf((object) this.header)), "waveOutPrepareHeader");
    }

    ~WaveOutBuffer() => this.Dispose(false);

    public void Dispose()
    {
      GC.SuppressFinalize((object) this);
      this.Dispose(true);
    }

    protected void Dispose(bool disposing)
    {
      int num1 = disposing ? 1 : 0;
      if (this.hHeader.IsAllocated)
        this.hHeader.Free();
      if (this.hBuffer.IsAllocated)
        this.hBuffer.Free();
      if (this.hThis.IsAllocated)
        this.hThis.Free();
      if (!(this.hWaveOut != IntPtr.Zero))
        return;
      lock (this.waveOutLock)
      {
        int num2 = (int) 巛퀝폳\uF0DE\uE025晱舘헸\u201D橑䭫ඏﭓ\u135C퉺㥵哸睎絳잧.\uF5CF嫭쿼ȃ袌䜓ᗽᐞ歛ꞇ绺\u098E紛輦袧佷䮿䬯㗧垓(this.hWaveOut, this.header, Marshal.SizeOf((object) this.header));
      }
      this.hWaveOut = IntPtr.Zero;
    }

    internal bool OnDone()
    {
      int num;
      lock (this.waveStream)
        num = this.waveStream.Read(this.buffer, 0, this.buffer.Length);
      if (num == 0)
        return false;
      for (int index = num; index < this.buffer.Length; ++index)
        this.buffer[index] = (byte) 0;
      this.WriteToWaveOut();
      return true;
    }

    public bool InQueue => (this.header.귆垶츖竞ᰢ痹\u3396ථǏ옂\uFFFDꔺ䰳窓ᴨᵟ鄀䊘젽됥 & 饻䴥苗ꯋ䯫\u2806\uE5B4\u24EE\uF362橅\uFFFD\uF5CF딂ᓼ\uF159䧡ᖍ昸\u2F0C茆.\uEB06\u02F1閻Ҏꮬ䑔ᝀ\u20F2뼥䊧蔦ӄ㢇켜廳Ꝑ쑚햳\uE206\uF1E4) == 饻䴥苗ꯋ䯫\u2806\uE5B4\u24EE\uF362橅\uFFFD\uF5CF딂ᓼ\uF159䧡ᖍ昸\u2F0C茆.\uEB06\u02F1閻Ҏꮬ䑔ᝀ\u20F2뼥䊧蔦ӄ㢇켜廳Ꝑ쑚햳\uE206\uF1E4;

    public int BufferSize => this.bufferSize;

    private void WriteToWaveOut()
    {
      燱뚋踷\u336D꿾\u0E60Ѝ\uAB6A艬\uA4CB饼\u3239꽱箴껩趃梗饱㴊줧 result;
      lock (this.waveOutLock)
        result = 巛퀝폳\uF0DE\uE025晱舘헸\u201D橑䭫ඏﭓ\u135C퉺㥵哸睎絳잧.峸ۗ\uFE4A刟躊㦐\uFFFD췈皤율囆굗ﷂ\u2704躌ꨚ\u252A㖇鐆\u2F6E(this.hWaveOut, this.header, Marshal.SizeOf((object) this.header));
      if (result != 燱뚋踷\u336D꿾\u0E60Ѝ\uAB6A艬\uA4CB饼\u3239꽱箴껩趃梗饱㴊줧.\uE19C\uEF16훻\uFFFD긪\uF36B\u2EC1펒雠햺\uE096쟕\uFDD3\u1806潕嚥殑ᗌ墭磗)
        throw new ᔦ\uF14B̔촮\u2743븮浘蓧ꡆ烋枿䨿\u269E逇埓뼌붬额\uFFFD鬊(result, "waveOutWrite");
      GC.KeepAlive((object) this);
    }
  }
}
