// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.Runtime
// Assembly: W2E901dpqsgg43z, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E3EDE543-33A5-3966-9367-08505E2DD4BA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-9a55287be3d6c8a74a0aa6ee3a5ea4e288ba968e44c271c9ea5d2293c8300d07.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class Runtime
  {
    private static Runtime.Platforms? mPlatform;
    private static char? mPathSeparator;

    public static Runtime.Platforms Platform
    {
      get
      {
        if ((Runtime.mPlatform.HasValue ? 1 : 0) == 0)
          Runtime.\uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62C();
        return Runtime.mPlatform.Value;
      }
    }

    public static char PathSeparator
    {
      get
      {
        if ((Runtime.mPathSeparator.HasValue ? 1 : 0) == 0)
          Runtime.\uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62C();
        return Runtime.mPathSeparator.Value;
      }
    }

    private static void \uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62C()
    {
label_2:
      int num1 = 116;
      PlatformID platform;
      while (true)
      {
        switch (num1 ^ 52)
        {
          case 62:
            num1 = 117;
            continue;
          case 63:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Runtime.\uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62C);
            num1 = 11;
            continue;
          case 64:
            Runtime.mPathSeparator = new char?(Conversions.ToChar("/"));
            num1 = 10;
            continue;
          case 65:
            platform = Environment.OSVersion.Platform;
            num1 = 118;
            continue;
          case 66:
            switch (platform)
            {
              case PlatformID.Win32S:
              case PlatformID.Win32Windows:
              case PlatformID.Win32NT:
              case PlatformID.WinCE:
              case PlatformID.Xbox:
                goto label_9;
              case PlatformID.Unix:
                goto label_11;
              case PlatformID.MacOSX:
                goto label_10;
              default:
                num1 = 119;
                continue;
            }
          case 67:
            goto label_11;
          default:
            goto label_2;
        }
      }
label_9:
      Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Windows);
      Runtime.mPathSeparator = new char?(Conversions.ToChar("\\"));
      return;
label_10:
      Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Mac);
      return;
label_11:
      if (((!Directory.Exists("/Applications") ? 1 : 0) != 0 || (!Directory.Exists("/System") ? 1 : 0) != 0 || (!Directory.Exists("/Users") ? 1 : 0) != 0 || !Directory.Exists("/Volumes") ? 1 : 0) == 0)
      {
        Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Mac);
      }
      else
      {
label_14:
        int num2 = AsciiSnake.\uE408\uF03E\uE1B2\uF83C\uE1B5\uEB23\uF0B7\uEA31\uF287\uEA34\uE6A2\uF14E(48);
        bool flag;
        string lower;
        while (true)
        {
          switch ((num2 ^ 49) + 60)
          {
            case 0:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Runtime.get_Platform);
              num2 = -11;
              continue;
            case 1:
              Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Linux);
              num2 = -7;
              continue;
            case 2:
              if (flag)
              {
                num2 = -8;
                continue;
              }
              goto label_22;
            case 3:
              flag = lower.Contains("raspberrypi");
              num2 = \uE847\uECAC\uE5EA\uE594\uE61D\uF865\uF65E\uF025\uEE4F\uF357\uE1B2\uE961.\uEC90\uE830\uED92\uEA5B\uF4EC\uE676\uF441\uE7AB\uE952\uF03A\uEEBD\uEFF1.\uEEF5\uEA0C\uEADA\uE1C9\uE289\uEDEB\uE9AB\uE1F5\uE72E\uE67B\uF500\uE550(35);
              continue;
            case 4:
              lower = Runtime.\uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62D().ToLower();
              num2 = -10;
              continue;
            case 5:
              goto label_21;
            default:
              goto label_14;
          }
        }
label_21:
        int num3 = 0;
        goto label_23;
label_22:
        num3 = 1;
label_23:
        if (num3 == 0)
        {
          Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.ARMSoft);
          if ((!lower.Contains("armv7l") ? 1 : 0) == 0)
            Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.ARMHard);
        }
      }
    }

    private static string \uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62D()
    {
label_2:
      int num1 = AsciiSnake.\uE408\uF03E\uE1B2\uF83C\uE1B5\uEB23\uF0B7\uEA31\uF287\uEA34\uE6A2\uF14E(59);
      Process process;
      ProcessStartInfo processStartInfo;
      // ISSUE: variable of a compiler-generated type
      Runtime.\uE636\uE694\uF8E7\uEB67\uE89A\uF653\uE515\uF839\uEB29\uF3E5\uEE8F\uE67B obj;
      while (true)
      {
        switch ((num1 ^ 53) + 52)
        {
          case 0:
            process = new Process();
            num1 = -30;
            continue;
          case 1:
            num1 = -25;
            continue;
          case 2:
            processStartInfo = (ProcessStartInfo) null;
            num1 = -27;
            continue;
          case 3:
            processStartInfo.Arguments = "-a";
            num1 = -17;
            continue;
          case 4:
            // ISSUE: reference to a compiler-generated method
            process.OutputDataReceived += new DataReceivedEventHandler(obj._Lambda\u0024__0);
            num1 = -42;
            continue;
          case 5:
            processStartInfo.RedirectStandardOutput = true;
            num1 = -22;
            continue;
          case 6:
            processStartInfo.RedirectStandardInput = false;
            num1 = -43;
            continue;
          case 7:
            processStartInfo.UseShellExecute = false;
            num1 = -23;
            continue;
          case 8:
            num1 = -26;
            continue;
          case 9:
            // ISSUE: reference to a compiler-generated field
            obj.\u0024VB\u0024Local_lines = new List<string>();
            num1 = -7;
            continue;
          case 10:
            num1 = -6;
            continue;
          case 11:
            num1 = -20;
            continue;
          case 12:
            // ISSUE: object of a compiler-generated type is created
            obj = new Runtime.\uE636\uE694\uF8E7\uEB67\uE89A\uF653\uE515\uF839\uEB29\uF3E5\uEE8F\uE67B();
            num1 = -32;
            continue;
          case 13:
            processStartInfo = process.StartInfo;
            num1 = -24;
            continue;
          case 14:
            num1 = -21;
            continue;
          case 15:
            processStartInfo.RedirectStandardError = true;
            num1 = -8;
            continue;
          case 16:
            num1 = -28;
            continue;
          case 17:
            processStartInfo.FileName = "uname";
            num1 = -29;
            continue;
          case 18:
            processStartInfo.CreateNoWindow = true;
            num1 = -31;
            continue;
          case 19:
            num1 = -18;
            continue;
          case 20:
            num1 = Level.\uF445\uECD1\uEEF4\uE532\uF4BA\uF682\uE473\uEA2E\uF56A\uF26A\uE5BB\uEAF4(62);
            continue;
          case 21:
            num1 = -5;
            continue;
          case 22:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Runtime.\uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62D);
            num1 = -41;
            continue;
          case 23:
            goto label_26;
          default:
            goto label_2;
        }
      }
label_26:
      string str;
      try
      {
        process.Start();
label_28:
        int num2 = 115;
        while (true)
        {
          switch (num2 ^ 48)
          {
            case 61:
              num2 = 113;
              continue;
            case 62:
              num2 = 114;
              continue;
            case 63:
              num2 = 116;
              continue;
            case 64:
              num2 = 118;
              continue;
            case 65:
              process.WaitForExit();
              num2 = 14;
              continue;
            case 66:
              process.Dispose();
              num2 = 15;
              continue;
            case 67:
              process.BeginOutputReadLine();
              num2 = 13;
              continue;
            case 68:
              Thread.Sleep(500);
              num2 = 112;
              continue;
            case 69:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Runtime.\uF457\uF49D\uEAA1\uE900\uECF1\uF548\uF26F\uE63D\uEA21\uE0B2\uE20C\uE62D);
              num2 = 117;
              continue;
            case 70:
              goto label_39;
            default:
              goto label_28;
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = Environment.OSVersion.Platform.ToString();
        ProjectData.ClearProjectError();
      }
label_39:
      return str;
    }

    public enum Platforms
    {
      Windows,
      Linux,
      Mac,
      ARMSoft,
      ARMHard,
    }
  }
}
