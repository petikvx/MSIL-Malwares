// Decompiled with JetBrains decompiler
// Type: PCMightyMax2009.Core.ScanSection
// Assembly: Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3F47A863-2C3E-450E-BD40-DE96FBBFDAD1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-FakeAV.MSIL.PCMightyMax.a-54ccacccf15d45ddcef8735bed4b4eef914134904670eb29390bfe43669a88fa.exe

using System;
using System.Collections.Generic;

namespace PCMightyMax2009.Core
{
  [Serializable]
  public class ScanSection
  {
    private int _Timeout = 180;

    public ScanSection()
    {
      this.Errors = new List<Error>();
      this.Name = "";
      this.Description = "";
      this.Data = "";
      this.Cancel = false;
    }

    public virtual void Run() => this.Errors = new List<Error>();

    public virtual void OnNewError(Error Error)
    {
      lock (this.Errors)
        this.Errors.Add(Error);
      if (this.NewError == null)
        return;
      this.NewError(Error);
    }

    public override bool Equals(object obj)
    {
      try
      {
        Guid id = ((ScanSection) obj).ID;
        string str1 = id.ToString();
        id = this.ID;
        string str2 = id.ToString();
        return str1 == str2;
      }
      catch
      {
        return false;
      }
    }

    public bool IsOnIgnoreList(Error Error)
    {
      foreach (Error ignoredError in ConfigurationManager.Instance.Store.IgnoredErrors)
      {
        if (Error.Equals((object) ignoredError))
          return true;
      }
      return false;
    }

    [field: NonSerialized]
    public virtual event ScanSection.NewErrorEventHandler NewError;

    public string Name { get; set; }

    public string Description { get; set; }

    public Guid ID { get; set; }

    public string Data { get; set; }

    public List<Error> Errors { get; set; }

    public virtual int Timeout
    {
      get => this._Timeout;
      set => this._Timeout = value;
    }

    public bool Cancel { get; set; }

    public override int GetHashCode() => this.ID.GetHashCode();

    public delegate void NewErrorEventHandler(Error NewError);
  }
}
