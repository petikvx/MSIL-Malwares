// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: cDisplayClass1, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 0E93EC79-9513-4BD1-8651-98C7CADA4D7F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a7264014555068294029d5d9ceb9ee717c4d2bf523330c30cee18f18e55a0b5b.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -2032211355;
      int aIndex;
      JSONNode jsonNode;
      int count;
      int index;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1300361762)) % 18U)
        {
          case 0:
            flag2 = aIndex < count;
            num1 = -928610053;
            continue;
          case 1:
            flag1 = index < count;
            num1 = -544471154;
            continue;
          case 2:
            this._random = Game.\u202E‬‏‍⁯‮⁪⁪⁮‎‎‭⁬‍⁯⁪⁭‮⁫‪‬‏‬‬⁭​⁮⁯⁪⁭‍‍⁯‮‎‬⁪‍‭‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            num1 = (int) num2 * 1553617411 ^ -1290105120;
            continue;
          case 3:
            goto label_3;
          case 4:
            this._playerStates[index] = new PlayerState();
            num1 = -1839046279;
            continue;
          case 5:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -611239464;
            continue;
          case 6:
            int num3 = flag1 ? 850026096 : (num3 = 1939173305);
            num1 = num3 ^ (int) num2 * 481392948;
            continue;
          case 7:
            int num4 = flag2 ? -1767525633 : (num4 = -654160499);
            num1 = num4 ^ (int) num2 * 1765090340;
            continue;
          case 8:
            this._buffer = buffer;
            num1 = (int) num2 * -1194469066 ^ -1153301254;
            continue;
          case 9:
            num1 = (int) num2 * 643585118 ^ -1707786951;
            continue;
          case 10:
            goto label_1;
          case 11:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 563629987 ^ -369882364;
            continue;
          case 12:
            ++aIndex;
            num1 = (int) num2 * -776149042 ^ -945689160;
            continue;
          case 13:
            aIndex = 0;
            num1 = (int) num2 * -1888227351 ^ -753511389;
            continue;
          case 14:
            this.Players = new Player[count];
            num1 = (int) num2 * -509279130 ^ 792575669;
            continue;
          case 15:
            num1 = (int) num2 * 354767135 ^ -1445716413;
            continue;
          case 16:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * 79044524 ^ -1143352516;
            continue;
          case 17:
            ++index;
            num1 = (int) num2 * -1684529504 ^ -283476901;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -1593491830;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -505303913)) % 16U)
          {
            case 0:
              finished2 = true;
              num1 = (int) num2 * -782990910 ^ -467555919;
              continue;
            case 1:
              num1 = -507903909;
              continue;
            case 2:
              goto label_1;
            case 3:
              int num3 = playerState.State == State.Playing ? -450369912 : (num3 = -1777099794);
              num1 = num3 ^ (int) num2 * -1215919696;
              continue;
            case 4:
              num1 = (int) num2 * 218964140 ^ 2106440012;
              continue;
            case 5:
              finished2 = true;
              num1 = (int) num2 * -343430488 ^ 622035515;
              continue;
            case 6:
              num1 = (int) num2 * 626080436 ^ -1315210172;
              continue;
            case 7:
              int num4;
              num1 = num4 = index < playerStates.Length ? -2040588499 : (num4 = -1441684462);
              continue;
            case 8:
              num1 = (int) num2 * 163071269 ^ 157945444;
              continue;
            case 9:
              ++index;
              num1 = -538889072;
              continue;
            case 10:
              playerState = playerStates[index];
              num1 = -1541270700;
              continue;
            case 12:
              playerStates = this._playerStates;
              num1 = (int) num2 * 1423358109 ^ -303069243;
              continue;
            case 13:
              int num5 = finished1 ? 18186806 : (num5 = 278367767);
              num1 = num5 ^ (int) num2 * 7563557;
              continue;
            case 14:
              index = 0;
              num1 = (int) num2 * -830378720 ^ -569488560;
              continue;
            case 15:
              finished2 = false;
              num1 = (int) num2 * -955656092 ^ -32716941;
              continue;
            default:
              goto label_17;
          }
        }
label_17:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -227453744;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -146489358)) % 10U)
        {
          case 0:
            this._currentTurn = 0;
            num1 = (int) num2 * -88838115 ^ -1941367704;
            continue;
          case 2:
            num1 = (int) num2 * -1206756701 ^ -1982873081;
            continue;
          case 3:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1313307217 ^ 148457709;
            continue;
          case 4:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -2098556013 ^ -1358964519;
            continue;
          case 5:
            this.Winners.Clear();
            num1 = (int) num2 * -1657429617 ^ 67313089;
            continue;
          case 6:
            this.Losers.Clear();
            num1 = (int) num2 * -354668862 ^ 1112983691;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * -1167139622 ^ -1173090488;
            continue;
          case 9:
            num1 = (int) num2 * -333143082 ^ -1141257743;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_14:
      bool flag1 = index < this.Players.Length;
      int num1 = -1198015005;
      Player player;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      bool morePlanningSprint;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1195006500)) % 25U)
        {
          case 0:
            int num4 = flag3 ? -815573405 : (num4 = -2092096515);
            num1 = num4 ^ (int) num3 * -1590530833;
            continue;
          case 1:
            num1 = (int) num3 * 85225331 ^ 1239511664;
            continue;
          case 2:
            num1 = -2032923275;
            continue;
          case 3:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = -2129676128;
            continue;
          case 4:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -1279701948 ^ 452976778;
            continue;
          case 5:
            goto label_14;
          case 6:
            num1 = -681381527;
            continue;
          case 7:
            int num5 = morePlanningSprint ? 339202399 : (num5 = 1215264082);
            num1 = num5 ^ (int) num3 * 912929545;
            continue;
          case 8:
            ++index;
            num1 = (int) num3 * 288669922 ^ 89775142;
            continue;
          case 9:
            int num6 = !flag1 ? 1388242016 : (num6 = 1973083672);
            num1 = num6 ^ (int) num3 * -2038871725;
            continue;
          case 10:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 1292305354 ^ 907557837;
            continue;
          case 11:
            int num7 = flag2 ? 587488950 : (num7 = 1295435334);
            num1 = num7 ^ (int) num3 * -166161043;
            continue;
          case 12:
            num1 = (int) num3 * 740953009 ^ 491998620;
            continue;
          case 13:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1773217401 ^ 811434018;
            continue;
          case 14:
            num1 = -1898042106;
            continue;
          case 15:
            playerState.Sprint = 1;
            num1 = (int) num3 * 626536465 ^ 1891686327;
            continue;
          case 16:
            flag3 = num2 > 0;
            num1 = -1363538772;
            continue;
          case 17:
            num2 = 0;
            num1 = -842271834;
            continue;
          case 18:
            goto label_3;
          case 19:
            playerState.Sprint = -1;
            num1 = (int) num3 * 275369429 ^ -1157739473;
            continue;
          case 20:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -2003129552;
            continue;
          case 21:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 214995038 ^ -1091937844;
            continue;
          case 22:
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1649732988 ^ -630255709;
            continue;
          case 23:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * 1781144829 ^ -317264596;
            continue;
          case 24:
            num1 = (int) num3 * -1162517501 ^ -792605580;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 619501891;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 320722048)) % 12U)
        {
          case 0:
            this.Print((object) Game.\u202E​‬⁯‎⁭‍‫‌‬⁮⁫⁭⁬⁯‏‏‪‮⁬‍‮‬⁫‎‏⁭‎‪⁭‏‭‎‎‪⁪‌‎‭‫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 571110462;
            continue;
          case 1:
            int num3 = flag2 ? 857708642 : (num3 = 439450423);
            num1 = num3 ^ (int) num2 * 2535020;
            continue;
          case 2:
            num1 = (int) num2 * -1287019399 ^ 1300939647;
            continue;
          case 3:
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -738164101 ^ -858522196;
            continue;
          case 4:
            num1 = (int) num2 * -180004049 ^ -632025389;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1083858395 ^ 633934994;
            continue;
          case 7:
            this.PlayerTurn(this._currentPlayer);
            num1 = 622903329;
            continue;
          case 8:
            goto label_1;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206D⁮⁭‎‭⁮⁫⁮‬⁭⁪‪‭‍⁪‫‪‫⁫‍⁪⁭⁭‫‬‭‏‍⁮‪⁮⁫‬‪⁭⁭⁫‪‭‮‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -794404624 ^ -41669416;
            continue;
          case 10:
            this._currentPlayer = 0;
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * -332250135 ^ -1590892503;
            continue;
          case 11:
            int num4 = flag1 ? 1638346179 : (num4 = 1136252585);
            num1 = num4 ^ (int) num2 * 698877327;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1330956397;
      while (true)
      {
        uint num2;
        int index;
        bool flag1;
        PlayerState playerState1;
        bool flag2;
        PlayerState playerState2;
        bool flag3;
        Card card;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        bool flag6;
        bool flag7;
        bool flag8;
        Player player;
        int num5;
        bool onlyOneWinner;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1792431202)) % 91U)
        {
          case 0:
            num1 = (int) num2 * -900342640 ^ 530838703;
            continue;
          case 1:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 298057058 ^ 1811565293;
            continue;
          case 2:
            playerState2.State = State.Lose;
            int num7 = this.Losers.Contains(playerIndex) ? 1747705023 : (num7 = 249313558);
            num1 = num7 ^ (int) num2 * 1566180291;
            continue;
          case 3:
            num1 = (int) num2 * 924837983 ^ -839733840;
            continue;
          case 4:
            num1 = (int) num2 * -1858975372 ^ -946496756;
            continue;
          case 5:
            playerState1.State = State.Lose;
            flag2 = !this.Losers.Contains(index);
            num1 = -875947080;
            continue;
          case 6:
            int num8 = !flag12 ? 1181331347 : (num8 = 511930952);
            num1 = num8 ^ (int) num2 * -1477491084;
            continue;
          case 7:
            card = this.DrawCard();
            flag4 = card.Impact < 0;
            num1 = (int) num2 * -2135914447 ^ -1158662220;
            continue;
          case 8:
            num1 = (int) num2 * 1902047946 ^ -1854264864;
            continue;
          case 9:
            num1 = -311121875;
            continue;
          case 10:
            num1 = -1283418898;
            continue;
          case 11:
            playerState2.Resources -= num4;
            num1 = (int) num2 * -394049001 ^ -2026291231;
            continue;
          case 12:
            num1 = -1692825930;
            continue;
          case 13:
            num1 = (int) num2 * -1308977802 ^ -583870584;
            continue;
          case 14:
            this.Losers.Add(num3);
            num1 = (int) num2 * -63179919 ^ -1993516385;
            continue;
          case 15:
            int num9 = flag10 ? -1173732039 : (num9 = -1576468056);
            num1 = num9 ^ (int) num2 * -2051027110;
            continue;
          case 16:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -1752222736 ^ 696771592;
            continue;
          case 17:
            int num10 = !flag4 ? -2022357749 : (num10 = -1780762879);
            num1 = num10 ^ (int) num2 * -1448622564;
            continue;
          case 18:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -1314522931 ^ 589557554;
            continue;
          case 19:
            num1 = (int) num2 * 1117513028 ^ 1682617980;
            continue;
          case 20:
            num1 = (int) num2 * 987527212 ^ 1248165324;
            continue;
          case 21:
            flag10 = !this.Losers.Contains(num3);
            num1 = -618852550;
            continue;
          case 22:
            num1 = (int) num2 * 1787407279 ^ 922795654;
            continue;
          case 23:
            num1 = (int) num2 * -51780080 ^ -1267982698;
            continue;
          case 24:
            player = this.Players[playerIndex];
            playerState2 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206D⁮⁭‎‭⁮⁫⁮‬⁭⁪‪‭‍⁪‫‪‫⁫‍⁪⁭⁭‫‬‭‏‍⁮‪⁮⁫‬‪⁭⁭⁫‪‭‮‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -725160238 ^ 1420330588;
            continue;
          case 25:
            num1 = (int) num2 * -762186025 ^ 62732706;
            continue;
          case 26:
            num1 = -1989891008;
            continue;
          case 27:
            num1 = (int) num2 * -1697454353 ^ 1867192962;
            continue;
          case 28:
            int num11 = !flag8 ? -1740504046 : (num11 = -2144101461);
            num1 = num11 ^ (int) num2 * 559234175;
            continue;
          case 29:
            this.Losers.Add(index);
            num1 = (int) num2 * -663909944 ^ -635063536;
            continue;
          case 30:
            num1 = (int) num2 * -1445109299 ^ 1522119798;
            continue;
          case 31:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * 911094692 ^ -1556052034;
            continue;
          case 32:
            num1 = -343314583;
            continue;
          case 33:
            num1 = (int) num2 * -1264039793 ^ 1801357094;
            continue;
          case 34:
            num1 = (int) num2 * 1604876611 ^ -289235754;
            continue;
          case 35:
            flag12 = playerState2.State != 0;
            num1 = (int) num2 * -1452463452 ^ 719442307;
            continue;
          case 36:
            num1 = -1824909539;
            continue;
          case 37:
            int num12 = onlyOneWinner ? 1917046145 : (num12 = 1444628268);
            num1 = num12 ^ (int) num2 * -1251351045;
            continue;
          case 38:
            num1 = -1766865610;
            continue;
          case 39:
            int num13 = !flag9 ? 1029998456 : (num13 = 1149311875);
            num1 = num13 ^ (int) num2 * 1701341753;
            continue;
          case 40:
            flag6 = playerState2.Sprint > this.Rules.SprintCount;
            num1 = -1247985986;
            continue;
          case 41:
            num1 = (int) num2 * 1680010328 ^ 300825726;
            continue;
          case 42:
            flag8 = num3 == playerIndex;
            num1 = (int) num2 * 325398198 ^ -1518178985;
            continue;
          case 43:
            this._finished = true;
            num1 = (int) num2 * -2093831336 ^ 900073525;
            continue;
          case 44:
            int num14 = !flag2 ? -254059081 : (num14 = -730753050);
            num1 = num14 ^ (int) num2 * -1762779881;
            continue;
          case 45:
            num1 = -2094620613;
            continue;
          case 46:
            int num15 = flag1 ? 1026701632 : (num15 = 926818945);
            num1 = num15 ^ (int) num2 * 553485969;
            continue;
          case 47:
            int num16 = !flag6 ? 601545120 : (num16 = 550207762);
            num1 = num16 ^ (int) num2 * 1128510615;
            continue;
          case 48:
            num1 = (int) num2 * -503916492 ^ 1167721028;
            continue;
          case 49:
            num1 = (int) num2 * -420374783 ^ 628696083;
            continue;
          case 50:
            ++playerState2.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 264278094 ^ -283787672;
            continue;
          case 51:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 52:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -671072724 ^ 608364814;
            continue;
          case 53:
            num1 = (int) num2 * 749808650 ^ 617599729;
            continue;
          case 54:
            ++num3;
            num1 = -1863115664;
            continue;
          case 55:
            num1 = (int) num2 * -170032022 ^ 209976819;
            continue;
          case 56:
            flag3 = flag7;
            num1 = -1577049082;
            continue;
          case 57:
            ++index;
            num1 = -1249009559;
            continue;
          case 58:
            flag7 = true;
            num4 = card.Impact;
            num1 = (int) num2 * 311718092 ^ -2060892720;
            continue;
          case 59:
            int num17;
            num1 = num17 = playerState2.Sprint < 0 ? -1349655530 : (num17 = -1048569696);
            continue;
          case 60:
            num1 = (int) num2 * -352646555 ^ -1528657307;
            continue;
          case 61:
            num1 = -1804447735;
            continue;
          case 62:
            flag11 = !flag5;
            num1 = (int) num2 * -1844595417 ^ -406990506;
            continue;
          case 63:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag5 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u206B​‏‪‪⁮‮‮‎⁭⁪‌⁬⁯‍‌‍⁮‮‏‏‮‪‏⁭‬‭‎‭‏‫‬‪‎‎‍‏‪‏⁪‮(num4), flag7 ? (object) "advance" : (object) "stay");
            num1 = -880077238;
            continue;
          case 64:
            num1 = (int) num2 * 842834479 ^ -47243997;
            continue;
          case 65:
            num1 = (int) num2 * 1201496099 ^ -175409556;
            continue;
          case 66:
            num1 = (int) num2 * 1315936643 ^ 1557087533;
            continue;
          case 67:
            num1 = (int) num2 * -2076011201 ^ -1873763433;
            continue;
          case 68:
            goto label_3;
          case 69:
            flag7 = true;
            num1 = (int) num2 * 1842369213 ^ 1385174770;
            continue;
          case 70:
            int num18 = flag3 ? -335944971 : (num18 = -644677802);
            num1 = num18 ^ (int) num2 * 1485975502;
            continue;
          case 71:
            index = 0;
            num1 = (int) num2 * -776616985 ^ -246917367;
            continue;
          case 72:
            num1 = -1335201496;
            continue;
          case 73:
            ++playerState2.Sprint;
            num1 = (int) num2 * 1228764296 ^ 45271134;
            continue;
          case 74:
            int num19;
            num1 = num19 = num3 < this._playerStates.Length ? -1376227548 : (num19 = -48417628);
            continue;
          case 75:
            num1 = (int) num2 * -2126331538 ^ 1216606182;
            continue;
          case 76:
            playerState1.Resources -= Game.\u202E‮‬⁮‌⁬​⁯‫‌⁬⁬⁯​‏⁮‭‌⁫‬‬⁪‪​⁮‏‬⁯‪‍‬‎⁮‮⁪​‫‭⁪⁮‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            flag9 = playerState1.Resources >= 0;
            num1 = (int) num2 * -1008507342 ^ 474178976;
            continue;
          case 77:
            int num20;
            num1 = num20 = index >= this._playerStates.Length ? -415492768 : (num20 = -38874752);
            continue;
          case 78:
            flag7 = num5 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u202E‮‬⁮‌⁬​⁯‫‌⁬⁬⁯​‏⁮‭‌⁫‬‬⁪‪​⁮‏‬⁯‪‍‬‎⁮‮⁪​‫‭⁪⁮‮(0, num5);
            num1 = (int) num2 * -1363898957 ^ 953436797;
            continue;
          case 79:
            flag7 = false;
            num1 = -536660201;
            continue;
          case 80:
            int num21;
            num1 = num21 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? -629742514 : (num21 = -1743829075);
            continue;
          case 81:
            playerState1 = this._playerStates[index];
            num1 = (int) num2 * -832259878 ^ -1269442831;
            continue;
          case 82:
            num1 = (int) num2 * 1425923096 ^ 2111617406;
            continue;
          case 83:
            num3 = 0;
            num1 = (int) num2 * -1819078677 ^ -572528114;
            continue;
          case 84:
            flag1 = playerState2.Resources < 0;
            num1 = (int) num2 * -431371604 ^ -961750472;
            continue;
          case 85:
            int num22 = !flag11 ? -848659508 : (num22 = -502422220);
            num1 = num22 ^ (int) num2 * 2055887565;
            continue;
          case 86:
            num1 = (int) num2 * 594263902 ^ -1541624246;
            continue;
          case 87:
            playerState2.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1248329012 ^ 754590152;
            continue;
          case 88:
            goto label_1;
          case 89:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u206D⁮⁭‎‭⁮⁫⁮‬⁭⁪‪‭‍⁪‫‪‫⁫‍⁪⁭⁭‫‬‭‏‍⁮‪⁮⁫‬‪⁭⁭⁫‪‭‮‮("\t", playerState3 != null ? Game.\u206C⁯‮‏‪⁭⁫⁫⁫⁮⁯‏⁮⁯‏‮​‏​‌‭‮‬​⁭⁫⁮⁬⁪‬‍⁮‎‪⁭⁪⁯⁭​‍‮((object) playerState3) : (string) null));
            num1 = -609310295;
            continue;
          case 90:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 89536324 ^ -2004267358;
            continue;
          default:
            goto label_96;
        }
        flag5 = num6 != 0;
        num1 = -1528218374;
      }
label_3:
      return;
label_96:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 816798038;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 712603786)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 1065325313 ^ 625648034;
            continue;
          case 1:
            card1 = this._deck[0];
            num1 = 291143283;
            continue;
          case 2:
            num1 = (int) num2 * -1575915575 ^ -1625230813;
            continue;
          case 3:
            num1 = (int) num2 * 310905454 ^ 1813333873;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * 1603401154 ^ 741343940;
            continue;
          case 6:
            card2 = card1;
            num1 = (int) num2 * 1799773408 ^ -715699817;
            continue;
          case 7:
            goto label_1;
          case 8:
            int num3 = this._deck.Count <= 0 ? -1799928004 : (num3 = -1063684299);
            num1 = num3 ^ (int) num2 * 413847721;
            continue;
          case 9:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 454148975 ^ 1125264587;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
      int index = 0;
label_4:
      bool flag = index < this._playerStates.Length;
      int num1 = -2139687110;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1793171102)) % 6U)
        {
          case 0:
            int num3 = flag ? 771938805 : (num3 = 1419503233);
            num1 = num3 ^ (int) num2 * 219596487;
            continue;
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206C⁯‮‏‪⁭⁫⁫⁫⁮⁯‏⁮⁯‏‮​‏​‌‭‮‬​⁭⁫⁮⁬⁪‬‍⁮‎‪⁭⁪⁯⁭​‍‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200E⁫⁬⁭⁫⁪​⁭‌‍⁮‍⁮⁫‬‭‭​‎‬‪⁪⁭‎⁭​⁯‍‌‪‏‌‎⁫‮‮‌‮‍‎‮(strArray);
            ++index;
            num1 = -1215423865;
            continue;
          case 2:
            num1 = -1037682787;
            continue;
          case 3:
            str2 = str1;
            num1 = (int) num2 * 349660671 ^ 620338603;
            continue;
          case 5:
            goto label_4;
          default:
            goto label_7;
        }
      }
label_7:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1758994343;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1285408272)) % 3U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * -25941449 ^ 1725371071;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -1036166058;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -92455821)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Game.\u200F⁮⁬⁭‏‮‎⁪⁪‫⁪⁮‏‬⁭‌‌⁫‮‌‎⁮‍⁯⁫⁯‪‍⁮‍⁫‌‌​⁪‮⁮‌‫⁫‮(Game.\u206C⁯‮‏‪⁭⁫⁫⁫⁮⁯‏⁮⁯‏‮​‏​‌‭‮‬​⁭⁫⁮⁬⁪‬‍⁮‎‪⁭⁪⁯⁭​‍‮(text), more);
            num1 = (int) num2 * 1248749393 ^ 1500572068;
            continue;
          case 2:
            Game.\u206F‬⁪‪‍‌‌⁯‌‪‬‌⁬‭⁮⁭‬‪‏⁪‪⁭⁮⁯⁭⁮⁯‍⁯‌‎‍‫⁮‏⁪⁫‎‫‪‮(this._buffer, str);
            num1 = (int) num2 * 2086138995 ^ 1211652398;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u202E‬‏‍⁯‮⁪⁪⁮‎‎‭⁬‍⁯⁪⁭‮⁫‪‬‏‬‬⁭​⁮⁯⁪⁭‍‍⁯‮‎‬⁪‍‭‮([In] int obj0) => new Random(obj0);

    static string \u202E​‬⁯‎⁭‍‫‌‬⁮⁫⁭⁬⁯‏‏‪‮⁬‍‮‬⁫‎‏⁭‎‪⁭‏‭‎‎‪⁪‌‎‭‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206D⁮⁭‎‭⁮⁫⁮‬⁭⁪‪‭‍⁪‫‪‫⁫‍⁪⁭⁭‫‬‭‏‍⁮‪⁮⁫‬‪⁭⁭⁫‪‭‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202E‮‬⁮‌⁬​⁯‫‌⁬⁬⁯​‏⁮‭‌⁫‬‬⁪‪​⁮‏‬⁯‪‍‬‎⁮‮⁪​‫‭⁪⁮‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206B​‏‪‪⁮‮‮‎⁭⁪‌⁬⁯‍‌‍⁮‮‏‏‮‪‏⁭‬‭‎‭‏‫‬‪‎‎‍‏‪‏⁪‮([In] int obj0) => Math.Abs(obj0);

    static string \u206C⁯‮‏‪⁭⁫⁫⁫⁮⁯‏⁮⁯‏‮​‏​‌‭‮‬​⁭⁫⁮⁬⁪‬‍⁮‎‪⁭⁪⁯⁭​‍‮([In] object obj0) => obj0.ToString();

    static string \u200E⁫⁬⁭⁫⁪​⁭‌‍⁮‍⁮⁫‬‭‭​‎‬‪⁪⁭‎⁭​⁯‍‌‪‏‌‎⁫‮‮‌‮‍‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F⁮⁬⁭‏‮‎⁪⁪‫⁪⁮‏‬⁭‌‌⁫‮‌‎⁮‍⁯⁫⁯‪‍⁮‍⁫‌‌​⁪‮⁮‌‫⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206F‬⁪‪‍‌‌⁯‌‪‬‌⁬‭⁮⁭‬‪‏⁪‪⁭⁮⁯⁭⁮⁯‍⁯‌‎‍‫⁮‏⁪⁫‎‫‪‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
