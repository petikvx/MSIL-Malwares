// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: DataCollect, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 42D7E59F-0880-4460-A28E-6C718E130DF7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-35125b1dd360a1a6c3644dee373860f7e3c26660cb7cd8de4718b4ac8e4b4353.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 2090802970;
      int count;
      bool flag;
      int index;
      int aIndex;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2063640486)) % 18U)
        {
          case 0:
            count = jsonNode.Count;
            num1 = (int) num2 * -1408754806 ^ -2062801204;
            continue;
          case 1:
            int num3 = flag ? 491337679 : (num3 = 1607470);
            num1 = num3 ^ (int) num2 * 736760538;
            continue;
          case 2:
            int num4;
            num1 = num4 = aIndex >= count ? 1305359013 : (num4 = 993168194);
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * 798664282 ^ 34193001;
            continue;
          case 4:
            num1 = (int) num2 * 1479025075 ^ -1073069573;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_3;
          case 7:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * -1848356107 ^ -655943553;
            continue;
          case 8:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = 1266066958;
            continue;
          case 9:
            flag = index < count;
            num1 = 1399846855;
            continue;
          case 10:
            num1 = (int) num2 * 1908180059 ^ -1878691214;
            continue;
          case 11:
            num1 = (int) num2 * -732146194 ^ -1503711768;
            continue;
          case 12:
            this._buffer = buffer;
            num1 = (int) num2 * -414400898 ^ 1385207310;
            continue;
          case 13:
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            jsonNode = json["players"];
            num1 = (int) num2 * 1377480679 ^ -116850457;
            continue;
          case 14:
            this._random = Game.\u206F‍⁯‎⁫‮​‬‎⁮‫⁪‮⁮⁮⁮​‬‍⁯‎⁫‮‬‎‮⁮‌‏​‎‏⁭‍‌​‮⁬‎‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * -607055615 ^ 234666805;
            continue;
          case 15:
            this._playerStates[index] = new PlayerState();
            num1 = 369833305;
            continue;
          case 16:
            this.Players = new Player[count];
            num1 = (int) num2 * -1443229145 ^ 420147761;
            continue;
          case 17:
            ++index;
            num1 = (int) num2 * 602627147 ^ -1809579652;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1849763719;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool finished1;
        bool flag;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1962896977)) % 17U)
          {
            case 0:
              finished1 = true;
              num1 = (int) num2 * 1059201300 ^ -2108079491;
              continue;
            case 1:
              num1 = 366133230;
              continue;
            case 3:
              num1 = (int) num2 * -1111199573 ^ 874880167;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * 883354513 ^ -2115733413;
              continue;
            case 6:
              int num3 = !flag ? 782808681 : (num3 = 1250116455);
              num1 = num3 ^ (int) num2 * 1865470809;
              continue;
            case 7:
              playerState = playerStates[index];
              num1 = 316132587;
              continue;
            case 8:
              int num4;
              num1 = num4 = index < playerStates.Length ? 1344272943 : (num4 = 1957801048);
              continue;
            case 9:
              finished1 = true;
              num1 = (int) num2 * -1439926908 ^ 1455606915;
              continue;
            case 10:
              finished2 = this._finished;
              num1 = (int) num2 * 1079438391 ^ 1334555755;
              continue;
            case 11:
              finished1 = false;
              num1 = (int) num2 * 1398171574 ^ 647317867;
              continue;
            case 12:
              ++index;
              num1 = 1350839770;
              continue;
            case 13:
              int num5 = finished2 ? 1376768766 : (num5 = 242725324);
              num1 = num5 ^ (int) num2 * -1468011348;
              continue;
            case 14:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * -314938892 ^ 2019170110;
              continue;
            case 15:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * -1761520934 ^ -898148368;
              continue;
            case 16:
              num1 = (int) num2 * -632559516 ^ 232156006;
              continue;
            default:
              goto label_18;
          }
        }
label_18:
        return finished1;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = 1941560086;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1063962634)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -1501363427 ^ 1554895378;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = 1692731911;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1729643669)) % 7U)
        {
          case 0:
            this.Losers.Clear();
            num1 = (int) num2 * -2081567786 ^ -880496384;
            continue;
          case 1:
            this.Winners.Clear();
            num1 = (int) num2 * -268089603 ^ -449823997;
            continue;
          case 2:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -1212921014 ^ -1724333367;
            continue;
          case 3:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1593675726 ^ 444888137;
            continue;
          case 4:
            this._currentTurn = 0;
            num1 = (int) num2 * 2012148160 ^ -622538017;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = 555916036;
      int planningCardsCount;
      int num2;
      PlayerState playerState;
      bool flag1;
      bool flag2;
      Player player;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 777949749)) % 29U)
        {
          case 0:
            playerState.Sprint = -1;
            num1 = (int) num3 * -1098482772 ^ -1138074572;
            continue;
          case 1:
            int num4 = planningCardsCount == 0 ? -922931961 : (num4 = -131316427);
            num1 = num4 ^ (int) num3 * -104539697;
            continue;
          case 2:
            num1 = 1894687479;
            continue;
          case 3:
            num1 = (int) num3 * 835745896 ^ 15924910;
            continue;
          case 4:
            int num5 = !player.UseOneMorePlanningSprint ? 1596404462 : (num5 = 357507762);
            num1 = num5 ^ (int) num3 * 318441415;
            continue;
          case 5:
            player = this.Players[index];
            num1 = (int) num3 * 1084369441 ^ -1018216901;
            continue;
          case 6:
            num2 = 0;
            num1 = 1483378641;
            continue;
          case 7:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -812333706 ^ -1791797587;
            continue;
          case 8:
            num1 = (int) num3 * 1476939955 ^ 148350593;
            continue;
          case 9:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -440746961 ^ 640092061;
            continue;
          case 10:
            ++index;
            num1 = (int) num3 * 892503139 ^ 1531592295;
            continue;
          case 11:
            num1 = (int) num3 * -917291752 ^ 318138126;
            continue;
          case 12:
            playerState.Sprint = 0;
            num1 = (int) num3 * 1848580344 ^ 448452403;
            continue;
          case 13:
            flag2 = num2 > 0;
            num1 = 1251172798;
            continue;
          case 14:
            int num6 = !flag1 ? -1732843712 : (num6 = -895471357);
            num1 = num6 ^ (int) num3 * -1430188243;
            continue;
          case 15:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 484699741 ^ 1530008401;
            continue;
          case 16:
            num1 = (int) num3 * 587760582 ^ 1287978126;
            continue;
          case 17:
            int num7 = !flag2 ? 376775876 : (num7 = 637199689);
            num1 = num7 ^ (int) num3 * 908469920;
            continue;
          case 18:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 163725353;
            continue;
          case 19:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -383889460 ^ 1891643499;
            continue;
          case 20:
            num1 = 764588460;
            continue;
          case 21:
            flag1 = index < this.Players.Length;
            num1 = 915719581;
            continue;
          case 22:
            playerState.State = State.Playing;
            num1 = (int) num3 * -633907401 ^ -286185442;
            continue;
          case 23:
            goto label_1;
          case 24:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -276841534 ^ -1347941531;
            continue;
          case 25:
            goto label_3;
          case 26:
            num1 = (int) num3 * -816246572 ^ -1459780147;
            continue;
          case 27:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1543681980 ^ -218569657;
            continue;
          case 28:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 532057941;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 1878287923;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1247169128)) % 12U)
        {
          case 0:
            goto label_3;
          case 1:
            int num3 = this._currentTurn <= 0 ? -1993333092 : (num3 = -874102938);
            num1 = num3 ^ (int) num2 * 1164916537;
            continue;
          case 2:
            this._currentPlayer = 0;
            num1 = (int) num2 * 611605567 ^ -1271599453;
            continue;
          case 3:
            num1 = (int) num2 * -1343024526 ^ -1570022418;
            continue;
          case 4:
            this.PlayerTurn(this._currentPlayer);
            num1 = 795852848;
            continue;
          case 5:
            this.Print((object) Game.\u202A‮‏⁪‏‪⁬⁬⁮⁮⁭⁫‪‌​‫⁯‫‮​‭⁯‪‭​‪⁮‬‬⁭⁫‌‍⁫‫‪‍‬⁬‬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 1733432833;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num4 = this._currentPlayer >= this.Players.Length ? -1739159704 : (num4 = -878153782);
            num1 = num4 ^ (int) num2 * -1816118154;
            continue;
          case 8:
            num1 = (int) num2 * 366953495 ^ 1869415136;
            continue;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u202D⁪‏‮‌‌⁯‫⁪⁯‏‍‭‍‌‭‏​‌⁪‬‎⁫⁮‏‮⁬‌⁯‮‭​‮⁯⁮‏‍‮‍⁪‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 654307235 ^ 711327964;
            continue;
          case 10:
            num1 = (int) num2 * 1410274538 ^ 1762266621;
            continue;
          case 11:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 488161818 ^ -418170656;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -512381149;
      while (true)
      {
        uint num2;
        int num3;
        bool flag1;
        bool flag2;
        Card card;
        int num4;
        bool flag3;
        bool flag4;
        bool flag5;
        PlayerState playerState1;
        bool flag6;
        PlayerState playerState2;
        bool flag7;
        int index;
        bool flag8;
        bool flag9;
        bool flag10;
        Player player;
        bool flag11;
        bool flag12;
        bool flag13;
        int num5;
        switch ((num2 = (uint) (num1 ^ -1733683313)) % 94U)
        {
          case 0:
            playerState1.Resources -= num4;
            int num6 = playerState1.Resources >= 0 ? 7862147 : (num6 = 1275108443);
            num1 = num6 ^ (int) num2 * 537727855;
            continue;
          case 1:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -958579514 ^ -1284292637;
            continue;
          case 2:
            num1 = (int) num2 * 1126942810 ^ 1319866084;
            continue;
          case 3:
            num1 = -1997064234;
            continue;
          case 4:
            ++playerState1.Sprint;
            num1 = (int) num2 * 873069523 ^ 871956917;
            continue;
          case 5:
            int num7 = flag6 ? -1338511628 : (num7 = -18025306);
            num1 = num7 ^ (int) num2 * -995657633;
            continue;
          case 6:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 820814352 ^ 104750717;
            continue;
          case 7:
            flag3 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -323702679;
            continue;
          case 8:
            int num8 = !flag7 ? -1382912037 : (num8 = -1399640075);
            num1 = num8 ^ (int) num2 * -1988759540;
            continue;
          case 9:
            int num9 = this.Rules.OnlyOneWinner ? -2023603696 : (num9 = -528081712);
            num1 = num9 ^ (int) num2 * -178023632;
            continue;
          case 10:
            num1 = (int) num2 * -1062705187 ^ 1004180395;
            continue;
          case 11:
            flag10 = index < this._playerStates.Length;
            num1 = -709283171;
            continue;
          case 12:
            num1 = (int) num2 * -1456027653 ^ 447455739;
            continue;
          case 13:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * -1612084293 ^ 1187564795;
            continue;
          case 14:
            this.Losers.Add(index);
            num1 = (int) num2 * -1461961340 ^ -1329351405;
            continue;
          case 15:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1844955038 ^ -2043982898;
            continue;
          case 16:
            ++index;
            num1 = -764618964;
            continue;
          case 17:
            flag13 = !this.Losers.Contains(index);
            num1 = (int) num2 * -490755837 ^ 782869829;
            continue;
          case 18:
            num1 = (int) num2 * 24122848 ^ -1721854051;
            continue;
          case 19:
            flag8 = playerState2.Resources >= 0;
            num1 = (int) num2 * -368034257 ^ 1895829355;
            continue;
          case 20:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -1198863948 ^ 1782070448;
            continue;
          case 21:
            num1 = (int) num2 * 1270842985 ^ -1274864590;
            continue;
          case 22:
            int num10 = flag10 ? -96699906 : (num10 = -258127635);
            num1 = num10 ^ (int) num2 * -313855602;
            continue;
          case 23:
            flag9 = num3 == playerIndex;
            num1 = (int) num2 * -1508445274 ^ -747852061;
            continue;
          case 24:
            num1 = (int) num2 * 390254745 ^ -982430374;
            continue;
          case 25:
            num3 = 0;
            num1 = (int) num2 * 946893435 ^ 1367713674;
            continue;
          case 26:
            int num11 = flag9 ? -1214144905 : (num11 = -685418111);
            num1 = num11 ^ (int) num2 * -2114884622;
            continue;
          case 27:
            index = 0;
            num1 = -1949276841;
            continue;
          case 28:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 691518403 ^ 1978344025;
            continue;
          case 29:
            num1 = (int) num2 * -2007087117 ^ -490632932;
            continue;
          case 30:
            num1 = (int) num2 * -631351973 ^ -1842540748;
            continue;
          case 31:
            int num12 = !flag8 ? -1912919783 : (num12 = -1238629780);
            num1 = num12 ^ (int) num2 * 805209008;
            continue;
          case 32:
            num1 = (int) num2 * 422994008 ^ 1697839344;
            continue;
          case 33:
            num1 = (int) num2 * -1743145439 ^ -159473610;
            continue;
          case 34:
            flag1 = true;
            num1 = (int) num2 * -308340315 ^ -1064300949;
            continue;
          case 35:
            int num13 = !flag12 ? 1542333316 : (num13 = 1895986132);
            num1 = num13 ^ (int) num2 * 557106824;
            continue;
          case 36:
            flag1 = false;
            num1 = -1589183762;
            continue;
          case 37:
            this.Print((object) Game.\u202D⁪‏‮‌‌⁯‫⁪⁯‏‍‭‍‌‭‏​‌⁪‬‎⁫⁮‏‮⁬‌⁯‮‭​‮⁯⁮‏‍‮‍⁪‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 729899605 ^ -280532209;
            continue;
          case 38:
            num1 = (int) num2 * 265186631 ^ 540689821;
            continue;
          case 39:
            int num14 = !flag13 ? 1542575856 : (num14 = 650283562);
            num1 = num14 ^ (int) num2 * -793367715;
            continue;
          case 40:
            num1 = (int) num2 * 1381657607 ^ -831003203;
            continue;
          case 41:
            int num15;
            num1 = num15 = !flag1 ? -1501893056 : (num15 = -1283060116);
            continue;
          case 42:
            num1 = -77559206;
            continue;
          case 43:
            num1 = (int) num2 * -1439874078 ^ 1215825257;
            continue;
          case 44:
            int num16 = !flag3 ? -1816062994 : (num16 = -517615031);
            num1 = num16 ^ (int) num2 * 550205652;
            continue;
          case 45:
            int num17;
            num1 = num17 = playerState1.Sprint > this.Rules.SprintCount ? -121482143 : (num17 = -1822199725);
            continue;
          case 46:
            card = this.DrawCard();
            num1 = (int) num2 * 1555432989 ^ -1675582176;
            continue;
          case 47:
            goto label_3;
          case 48:
            flag12 = playerState1.Sprint < 0;
            num1 = -677098272;
            continue;
          case 49:
            playerState1.State = State.Won;
            num1 = (int) num2 * 707405491 ^ -294854005;
            continue;
          case 50:
            num1 = (int) num2 * -1359588569 ^ 69161412;
            continue;
          case 51:
            num1 = -1185894679;
            continue;
          case 52:
            num1 = (int) num2 * -428590450 ^ -2122000256;
            continue;
          case 53:
            int num18 = card.Impact - player.PlannedForCard(card.Type);
            flag1 = num18 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u202A‏⁮⁬‏⁭‍​‭‏‬‭‭⁮‫⁭​‏⁫‏⁭‭‬‫‏⁮‫‫⁫⁭⁯‪⁯‮‎‏‍‎‪⁪‮(0, num18);
            num1 = (int) num2 * -1063943235 ^ 2020541100;
            continue;
          case 54:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202D⁪‏‮‌‌⁯‫⁪⁯‏‍‭‍‌‭‏​‌⁪‬‎⁫⁮‏‮⁬‌⁯‮‭​‮⁯⁮‏‍‮‍⁪‮("\t", playerState3 != null ? Game.\u206C‪⁪⁪​⁬​‍‮‫⁯⁭‌‬⁪‪​‍⁭‎‍⁪‪‫⁭‎‫‬⁯‎⁫⁬‪⁯⁬⁪‬‫‮⁮‮((object) playerState3) : (string) null));
            num1 = -1172563996;
            continue;
          case 55:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1926615604 ^ 991602951;
            continue;
          case 56:
            ++num3;
            num1 = -1060222049;
            continue;
          case 57:
            num1 = (int) num2 * 186986928 ^ -1184612009;
            continue;
          case 58:
            flag2 = !flag5;
            num1 = (int) num2 * 1135559619 ^ 1449750676;
            continue;
          case 59:
            flag1 = true;
            num4 = card.Impact;
            num1 = (int) num2 * -1111511295 ^ 1450205347;
            continue;
          case 60:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1683445182 ^ -1334773032;
            continue;
          case 61:
            goto label_1;
          case 62:
            num1 = (int) num2 * -175191528 ^ -182003916;
            continue;
          case 63:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u202A‏⁮⁬‏⁭‍​‭‏‬‭‭⁮‫⁭​‏⁫‏⁭‭‬‫‏⁮‫‫⁫⁭⁯‪⁯‮‎‏‍‎‪⁪‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = -1764732078;
            continue;
          case 64:
            num1 = (int) num2 * -1965968472 ^ -2104880293;
            continue;
          case 65:
            num1 = -1030363717;
            continue;
          case 66:
            int num19;
            num1 = num19 = !this.Losers.Contains(num3) ? -269252830 : (num19 = -1675773740);
            continue;
          case 67:
            num1 = (int) num2 * 1361430872 ^ 894473112;
            continue;
          case 68:
            num1 = -1866752551;
            continue;
          case 69:
            num1 = -1013169488;
            continue;
          case 70:
            int num20;
            num1 = num20 = num3 < this._playerStates.Length ? -381026792 : (num20 = -1083361228);
            continue;
          case 71:
            flag11 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * -787036798 ^ -627443987;
            continue;
          case 72:
            int num21 = flag4 ? -1790034912 : (num21 = -2071624989);
            num1 = num21 ^ (int) num2 * 963307267;
            continue;
          case 73:
            int num22 = flag2 ? -1351712357 : (num22 = -1021160358);
            num1 = num22 ^ (int) num2 * 71816812;
            continue;
          case 74:
            flag6 = playerState1.State != 0;
            num1 = (int) num2 * 1151314643 ^ 113188496;
            continue;
          case 75:
            num1 = (int) num2 * -662432113 ^ 894434263;
            continue;
          case 76:
            num1 = (int) num2 * -203265642 ^ -1275095708;
            continue;
          case 77:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1898686739 ^ -281976893;
            continue;
          case 78:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 79:
            ++playerState1.Sprint;
            num1 = (int) num2 * 2141175631 ^ 1284748365;
            continue;
          case 80:
            num1 = (int) num2 * 1906403959 ^ 43578973;
            continue;
          case 81:
            num1 = (int) num2 * -757039687 ^ -689740205;
            continue;
          case 82:
            num1 = -1018174295;
            continue;
          case 83:
            num1 = (int) num2 * 982746205 ^ -2054814246;
            continue;
          case 84:
            flag7 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -651937647 ^ 1174408147;
            continue;
          case 85:
            flag4 = !flag11;
            num1 = (int) num2 * 9975172 ^ 519485155;
            continue;
          case 86:
            this._finished = true;
            num1 = (int) num2 * 650084486 ^ 51793656;
            continue;
          case 87:
            num1 = (int) num2 * -21056783 ^ 588923819;
            continue;
          case 88:
            playerState2.State = State.Lose;
            num1 = -586289950;
            continue;
          case 89:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag5 ? (object) "ALL " : (object) "", flag11 ? (object) "receives" : (object) "pays", (object) Game.\u206F‎⁬‬​‫​‮‬‬‬⁪‍‏⁪⁫⁫‍​⁭‬‪‬⁭‎‍​⁫‎⁫‬‮⁬‎⁮⁬‪‫⁪‬‮(num4), flag1 ? (object) "advance" : (object) "stay");
            num1 = -398646984;
            continue;
          case 90:
            num1 = (int) num2 * -826767347 ^ 1952265932;
            continue;
          case 91:
            num1 = (int) num2 * 894056467 ^ 2121835158;
            continue;
          case 92:
            num1 = (int) num2 * -1000393181 ^ -1314554734;
            continue;
          case 93:
            num1 = -1822199725;
            continue;
          default:
            goto label_99;
        }
        flag5 = num5 != 0;
        num1 = -265061792;
      }
label_3:
      return;
label_99:;
    }

    private Card DrawCard()
    {
      if (this._deck.Count > 0)
        goto label_7;
label_1:
      int num1 = 1220912065;
label_2:
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1683262094)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1042108146 ^ -2035685264;
            continue;
          case 2:
            goto label_7;
          case 4:
            num1 = (int) num2 * 770461029 ^ -99731705;
            continue;
          case 5:
            card2 = card1;
            num1 = (int) num2 * 1133373427 ^ 1685913034;
            continue;
          case 6:
            num1 = (int) num2 * -734249372 ^ 1867733252;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * 2043801034 ^ -716222570;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
label_7:
      card1 = this._deck[0];
      num1 = 1265356311;
      goto label_2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -891150931;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1194485171)) % 9U)
        {
          case 0:
            flag = index < this._playerStates.Length;
            num1 = -1514906219;
            continue;
          case 1:
            str1 = "";
            num1 = (int) num2 * -1405181792 ^ -1721419395;
            continue;
          case 2:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206C‪⁪⁪​⁬​‍‮‫⁯⁭‌‬⁪‪​‍⁭‎‍⁪‪‫⁭‎‫‬⁯‎⁫⁬‪⁯⁬⁪‬‫‮⁮‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206E​‪‬‏⁭⁭‎⁬⁮‪⁭‎​⁮⁯‎⁯⁬⁪⁫‪‪⁬‪⁫‬‍‍‪‪‪⁮‬‭‭⁯‍‪‮(strArray);
            ++index;
            num1 = -1801827784;
            continue;
          case 3:
            num1 = (int) num2 * -1473344221 ^ 371583813;
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * -1892719285 ^ 195520808;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * -698240117 ^ 1240843813;
            continue;
          case 7:
            int num3 = flag ? 1484647744 : (num3 = 1039487501);
            num1 = num3 ^ (int) num2 * -619384481;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1393452893;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2033478964)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1050438667 ^ 188385079;
            continue;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * -727136492 ^ 766302928;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u206E‮‮‪‎‬⁫⁮⁯⁫⁫⁮‬‬‎‎‭‌‫‎⁯⁬‏‌⁭⁫⁮‌​‍‏​‏‫​⁭‌‏⁮‫‮(this._buffer, Game.\u202C⁫⁪⁪‍‏‍⁬⁬‮⁪⁫‭‭‮‬‫⁮⁯‎‫‌⁫‮‫‎⁮‫‍⁪‭⁬⁫‏⁮⁪⁬‫⁮⁯‮(Game.\u206C‪⁪⁪​⁬​‍‮‫⁯⁭‌‬⁪‪​‍⁭‎‍⁪‪‫⁭‎‫‬⁯‎⁫⁬‪⁯⁬⁪‬‫‮⁮‮(text), more));

    static Random \u206F‍⁯‎⁫‮​‬‎⁮‫⁪‮⁮⁮⁮​‬‍⁯‎⁫‮‬‎‮⁮‌‏​‎‏⁭‍‌​‮⁬‎‮([In] int obj0) => new Random(obj0);

    static string \u202A‮‏⁪‏‪⁬⁬⁮⁮⁭⁫‪‌​‫⁯‫‮​‭⁯‪‭​‪⁮‬‬⁭⁫‌‍⁫‫‪‍‬⁬‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202D⁪‏‮‌‌⁯‫⁪⁯‏‍‭‍‌‭‏​‌⁪‬‎⁫⁮‏‮⁬‌⁯‮‭​‮⁯⁮‏‍‮‍⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202A‏⁮⁬‏⁭‍​‭‏‬‭‭⁮‫⁭​‏⁫‏⁭‭‬‫‏⁮‫‫⁫⁭⁯‪⁯‮‎‏‍‎‪⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206F‎⁬‬​‫​‮‬‬‬⁪‍‏⁪⁫⁫‍​⁭‬‪‬⁭‎‍​⁫‎⁫‬‮⁬‎⁮⁬‪‫⁪‬‮([In] int obj0) => Math.Abs(obj0);

    static string \u206C‪⁪⁪​⁬​‍‮‫⁯⁭‌‬⁪‪​‍⁭‎‍⁪‪‫⁭‎‫‬⁯‎⁫⁬‪⁯⁬⁪‬‫‮⁮‮([In] object obj0) => obj0.ToString();

    static string \u206E​‪‬‏⁭⁭‎⁬⁮‪⁭‎​⁮⁯‎⁯⁬⁪⁫‪‪⁬‪⁫‬‍‍‪‪‪⁮‬‭‭⁯‍‪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202C⁫⁪⁪‍‏‍⁬⁬‮⁪⁫‭‭‮‬‫⁮⁯‎‫‌⁫‮‫‎⁮‫‍⁪‭⁬⁫‏⁮⁪⁬‫⁮⁯‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206E‮‮‪‎‬⁫⁮⁯⁫⁫⁮‬‬‎‎‭‌‫‎⁯⁬‏‌⁭⁫⁮‌​‍‏​‏‫​⁭‌‏⁮‫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
