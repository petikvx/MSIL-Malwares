// Decompiled with JetBrains decompiler
// Type: 550712635264.413725445140
// Assembly: 903211523809, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 9299602E-5CAC-472E-8784-954A0E70F0DC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-930e3513275891a4d2d1e51b0fb588f4b7f0b665bd972c7e0ccfececc5c3933e.exe

using \u003550712635264;
using \u003629351514649;
using \u003883241009814;
using Microsoft.VisualStudio.TaskRunnerExplorer;
using Microsoft.WebTools.Shared;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml;

namespace \u003550712635264
{
  internal static class \u003413725445140
  {
    internal const string \u003600221480714 = "vs-grunt-task-reader";
    internal const string \u003861174514600 = "task";
    internal const string \u003492281085164 = "name";
    internal const string \u003746921670018 = "alias";
    internal const string \u003243196334089 = "info";
    internal const string \u003425216765744 = "target";
    internal const string \u003095492348550 = "\\u001b\\[\\d+m";

    internal static string \u003109075988821 => Path.GetDirectoryName(Uri.UnescapeDataString(new UriBuilder(Assembly.GetExecutingAssembly().CodeBase).Path));

    internal static Task<IEnumerable<\u003969070247281>> \u003376272585913(
      ITaskRunnerCommandContext _param0,
      string _param1)
    {
      // ISSUE: variable of a compiler-generated type
      \u003413725445140.\u003136663856775 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003493311764766 = _param0;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003948527077972 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003139165158862 = AsyncTaskMethodBuilder<IEnumerable<\u003969070247281>>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      (^(\u003008836054940.\u003719795519998&) ref stateMachine).\u003420683870372 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003139165158862.Start<\u003413725445140.\u003136663856775>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003139165158862.Task;
    }

    private static string \u003979279347047(string _param0)
    {
      string str1 = (string) null;
      string str2 = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "Running \"{0}\" task", (object) "vs-grunt-task-reader");
      if (new Regex("^\\s*Loading .+ tasks\\.\\.\\.\\u001b\\[\\d+mERROR", RegexOptions.IgnoreCase).Match(_param0).Success)
      {
        string str3 = new Regex("\\u001b\\[\\d+m").Replace(_param0, "");
        str1 = str3.Substring(0, str3.IndexOf(str2, StringComparison.Ordinal));
      }
      return str1;
    }

    private static void \u003843573223746(
      string _param0,
      out string _param1,
      out string _param2,
      out string _param3)
    {
      _param1 = Path.GetDirectoryName(_param0);
      string str = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}\\Scripts", (object) \u003413725445140.\u003109075988821);
      _param2 = "cmd.exe";
      _param3 = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "/c grunt -b \"{0}\" --gruntfile \"{1}\" --tasks \"{2}\" {3}", (object) _param1, (object) _param0, (object) str, (object) "vs-grunt-task-reader");
    }

    private static ICollection<\u003969070247281> \u003640458481101(
      string _param0)
    {
      List<\u003969070247281> objList = new List<\u003969070247281>();
      string str1 = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "<{0}>", (object) "vs-grunt-task-reader");
      string str2 = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "</{0}>", (object) "vs-grunt-task-reader");
      int num = _param0.IndexOf(str1, StringComparison.Ordinal);
      if (num >= 0)
      {
        _param0 = _param0.Substring(num + str1.Length);
        int length = _param0.IndexOf(str2, StringComparison.Ordinal);
        if (length >= 0)
        {
          _param0 = _param0.Substring(0, length);
          XmlDocument safeDocument = XmlExtensions.CreateSafeDocument();
          using (StringReader stringReader = new StringReader(_param0))
          {
            XmlTextReader safeTextReader = XmlExtensions.CreateSafeTextReader((TextReader) stringReader);
            safeDocument.Load((XmlReader) safeTextReader);
          }
          XmlElement documentElement = safeDocument.DocumentElement;
          if (documentElement.HasChildNodes)
          {
            foreach (XmlNode xmlNode1 in documentElement.GetElementsByTagName("task"))
            {
              \u003969070247281 obj = new \u003969070247281();
              XmlNode xmlNode2 = xmlNode1.SelectSingleNode("name");
              if (xmlNode2 != null)
              {
                obj.\u003032362452874 = xmlNode2.InnerText;
                XmlNodeList xmlNodeList = xmlNode1.SelectNodes(string.Format((IFormatProvider) CultureInfo.InvariantCulture, ".//{0}", (object) "target"));
                List<string> stringList = new List<string>();
                foreach (XmlNode xmlNode3 in xmlNodeList)
                  stringList.Add(xmlNode3.InnerText);
                obj.\u003361418396284 = stringList;
                XmlNode xmlNode4 = xmlNode1.SelectSingleNode("info");
                if (xmlNode4 != null)
                  obj.\u003862901152077 = xmlNode4.InnerText;
                XmlNode xmlNode5 = xmlNode1.SelectSingleNode("alias");
                if (xmlNode5 != null)
                  obj.\u003605761686311 = bool.Parse(xmlNode5.InnerText);
                objList.Add(obj);
              }
            }
          }
        }
      }
      return (ICollection<\u003969070247281>) objList;
    }
  }
}
