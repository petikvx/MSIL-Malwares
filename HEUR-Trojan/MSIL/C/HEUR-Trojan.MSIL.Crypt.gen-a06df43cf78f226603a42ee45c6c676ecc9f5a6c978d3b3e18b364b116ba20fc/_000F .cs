// Decompiled with JetBrains decompiler
// Type:  
// Assembly: MutexAccessR, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DA13C32E-33A8-4023-B103-9D3C73114D71
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-a06df43cf78f226603a42ee45c6c676ecc9f5a6c978d3b3e18b364b116ba20fc.exe

using DomainObjects;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

[Table(Name = "dbo.[Set]")]
public sealed class \u000F\u2006 : 
  INotifyPropertyChanging,
  INotifyPropertyChanged,
  ISet,
  \u000E\u2006
{
  private static PropertyChangingEventArgs \u0002 = new PropertyChangingEventArgs(string.Empty);
  private Guid _SetId;
  private short? _SetNumber;
  private bool _Encore;
  private string _Notes;
  private DateTime _CreatedDate;
  private DateTime? _UpdatedDate;
  private DateTime? _DeletedDate;
  private bool _Deleted;
  private Guid? _ShowId;
  private EntitySet<\u0002\u2007> _SetSongs;
  private EntityRef<\u0003\u2007> _Show;

  public \u000F\u2006()
  {
    this._SetSongs = new EntitySet<\u0002\u2007>(new Action<\u0002\u2007>(this.\u0002), new Action<\u0002\u2007>(this.\u0003));
    this._Show = new EntityRef<\u0003\u2007>();
  }

  [Column(DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true, Storage = "_SetId")]
  public Guid SetId
  {
    get => this._SetId;
    set
    {
      if (!(this._SetId != value))
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._SetId = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141734));
    }
  }

  [Column(DbType = "SmallInt", Storage = "_SetNumber")]
  public short? SetNumber
  {
    get => this._SetNumber;
    set
    {
      short? setNumber = this._SetNumber;
      int? nullable1 = setNumber.HasValue ? new int?((int) setNumber.GetValueOrDefault()) : new int?();
      short? nullable2 = value;
      int? nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
      if (nullable1.GetValueOrDefault() == nullable3.GetValueOrDefault() & nullable1.HasValue == nullable3.HasValue)
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._SetNumber = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141714));
    }
  }

  [Column(DbType = "Bit NOT NULL", Storage = "_Encore")]
  public bool Encore
  {
    get => this._Encore;
    set
    {
      if (this._Encore == value)
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._Encore = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141698));
    }
  }

  [Column(DbType = "NVarChar(MAX)", Storage = "_Notes")]
  public string Notes
  {
    get => this._Notes;
    set
    {
      if (!(this._Notes != value))
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._Notes = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141811));
    }
  }

  [Column(DbType = "DateTime NOT NULL", Storage = "_CreatedDate")]
  public DateTime CreatedDate
  {
    get => this._CreatedDate;
    set
    {
      if (!(this._CreatedDate != value))
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._CreatedDate = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141823));
    }
  }

  [Column(DbType = "DateTime", Storage = "_UpdatedDate")]
  public DateTime? UpdatedDate
  {
    get => this._UpdatedDate;
    set
    {
      DateTime? updatedDate = this._UpdatedDate;
      DateTime? nullable = value;
      if ((updatedDate.HasValue == nullable.HasValue ? (updatedDate.HasValue ? (updatedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._UpdatedDate = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141805));
    }
  }

  [Column(DbType = "DateTime", Storage = "_DeletedDate")]
  public DateTime? DeletedDate
  {
    get => this._DeletedDate;
    set
    {
      DateTime? deletedDate = this._DeletedDate;
      DateTime? nullable = value;
      if ((deletedDate.HasValue == nullable.HasValue ? (deletedDate.HasValue ? (deletedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._DeletedDate = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141763));
    }
  }

  [Column(DbType = "Bit NOT NULL", Storage = "_Deleted")]
  public bool Deleted
  {
    get => this._Deleted;
    set
    {
      if (this._Deleted == value)
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._Deleted = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141617));
    }
  }

  [Column(DbType = "UniqueIdentifier", Storage = "_ShowId")]
  public Guid? ShowId
  {
    get => this._ShowId;
    set
    {
      Guid? showId = this._ShowId;
      Guid? nullable = value;
      if ((showId.HasValue == nullable.HasValue ? (showId.HasValue ? (showId.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
        return;
      if (this._Show.HasLoadedOrAssignedValue)
        throw new ForeignKeyReferenceAlreadyHasValueException();
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      this._ShowId = value;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141603));
    }
  }

  [Association(Name = "Set_SetSong", OtherKey = "SetId", Storage = "_SetSongs", ThisKey = "SetId")]
  public EntitySet<\u0002\u2007> SetSongs
  {
    get => this._SetSongs;
    set => this._SetSongs.Assign((IEnumerable<\u0002\u2007>) value);
  }

  [Association(IsForeignKey = true, Name = "Show_Set", OtherKey = "ShowId", Storage = "_Show", ThisKey = "ShowId")]
  public \u0003\u2007 Show
  {
    get => this._Show.Entity;
    set
    {
      \u0003\u2007 entity = this._Show.Entity;
      if (entity == value && this._Show.HasLoadedOrAssignedValue)
        return;
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
      if (entity != null)
      {
        this._Show.Entity = (\u0003\u2007) null;
        entity.Sets.Remove(this);
      }
      this._Show.Entity = value;
      if (value != null)
      {
        value.Sets.Add(this);
        this._ShowId = new Guid?(value.ShowId);
      }
      else
        this._ShowId = new Guid?();
      this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002(\u0008\u200A.\u0002(-1494141616));
    }
  }

  public event PropertyChangingEventHandler PropertyChanging;

  public event PropertyChangedEventHandler PropertyChanged;

  protected virtual void \u000F\u2006\u2004\u200A\u2003\u2000\u0002()
  {
    if (this.\u0003 == null)
      return;
    this.\u0003((object) this, \u000F\u2006.\u0002);
  }

  protected virtual void \u000F\u2006\u2004\u200A\u2003\u2000\u0002(string _param1)
  {
    if (this.\u0005 == null)
      return;
    this.\u0005((object) this, new PropertyChangedEventArgs(_param1));
  }

  private void \u0002(\u0002\u2007 _param1)
  {
    this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
    _param1.Set = this;
  }

  private void \u0003(\u0002\u2007 _param1)
  {
    this.\u000F\u2006\u2004\u200A\u2003\u2000\u0002();
    _param1.Set = (\u000F\u2006) null;
  }
}
