// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsWithUI.ExceptionReportingForm
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartExceptionsCore.UI;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

namespace SmartAssembly.SmartExceptionsWithUI
{
  [DesignerCategory("Code")]
  internal class ExceptionReportingForm : Form
  {
    private ReportExceptionEventArgs1 reportExceptionEventArgs;
    private Thread workingThread;
    private CheckBox continueCheckBox = new CheckBox();
    private Label pleaseTellTitle = new Label();
    private Button dontSendReport = new Button();
    private Button sendReport = new Button();
    private Label pleaseTellMessage = new Label();
    private AutoHeightLabel1 errorMessage = new AutoHeightLabel1();
    private Panel panelInformation = new Panel();
    private Panel panelSending = new Panel();
    private Button cancelSending = new Button();
    private WaitSendingReportControl1 waitSendingReport = new WaitSendingReportControl1();
    private FeedbackControl1 preparingFeedback = new FeedbackControl1("Preparing the error report.");
    private FeedbackControl1 connectingFeedback = new FeedbackControl1("Connecting to server.");
    private FeedbackControl1 transferingFeedback = new FeedbackControl1("Transferring report.");
    private FeedbackControl1 completedFeedback = new FeedbackControl1("Error reporting completed. Thank you.");
    private Button ok = new Button();
    private Button retrySending = new Button();
    private Button saveReport = new Button();
    private HeaderControl1 headerControl1 = new HeaderControl1(string.Format("{0} has encountered a problem.\nWe are sorry for the inconvenience.", (object) "server2"));
    private HeaderControl1 headerControl2 = new HeaderControl1(string.Format("Please wait while {0} is sending the report to {1} through the Internet.", (object) "server2", (object) "[Unknown company]"));
    private PoweredBy1 powered = new PoweredBy1();
    private Button debug = new Button();
    private bool alreadyRetried;

    private void InitializeComponent()
    {
      this.panelInformation.SuspendLayout();
      this.panelSending.SuspendLayout();
      this.SuspendLayout();
      this.headerControl1.IconState = IconState1.Error;
      this.headerControl2.IconState = IconState1.Error;
      this.continueCheckBox.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.continueCheckBox.FlatStyle = FlatStyle.System;
      this.continueCheckBox.Location = new Point(22, 98);
      this.continueCheckBox.Size = new Size(226, 16);
      this.continueCheckBox.TabIndex = 13;
      this.continueCheckBox.Text = "Ignore this error and attempt to &continue.";
      this.continueCheckBox.CheckedChanged += new EventHandler(this.OnContinueCheckedChanged);
      this.pleaseTellTitle.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.pleaseTellTitle.FlatStyle = FlatStyle.System;
      this.pleaseTellTitle.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.pleaseTellTitle.Location = new Point(20, 124);
      this.pleaseTellTitle.Size = new Size(381, 16);
      this.pleaseTellTitle.Text = string.Format("Please tell {0} about this problem.", (object) "[Unknown company]");
      this.dontSendReport.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.dontSendReport.FlatStyle = FlatStyle.System;
      this.dontSendReport.Size = new Size(75, 24);
      this.dontSendReport.Location = new Point(400 - this.dontSendReport.Width, 205);
      this.dontSendReport.TabIndex = 4;
      this.dontSendReport.Text = "&Don't Send";
      this.dontSendReport.Click += new EventHandler(this.OnDontSendReportClick);
      this.sendReport.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.sendReport.FlatStyle = FlatStyle.System;
      this.sendReport.Size = new Size(105, 24);
      this.sendReport.Location = new Point(this.dontSendReport.Left - this.sendReport.Width - 6, 205);
      this.sendReport.TabIndex = 3;
      this.sendReport.Text = "&Send Error Report";
      this.sendReport.Click += new EventHandler(this.OnSendReportClick);
      this.debug.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.debug.FlatStyle = FlatStyle.System;
      this.debug.Size = new Size(64, 24);
      this.debug.Location = new Point(this.sendReport.Left - this.debug.Width - 6, 205);
      this.debug.TabIndex = 14;
      this.debug.Text = "De&bug";
      this.debug.Visible = false;
      this.debug.Click += new EventHandler(this.OnDebugClick);
      this.pleaseTellMessage.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.pleaseTellMessage.FlatStyle = FlatStyle.System;
      this.pleaseTellMessage.Location = new Point(20, 140);
      this.pleaseTellMessage.Size = new Size(381, 55);
      this.pleaseTellMessage.Text = string.Format("To help improve the software you use, {0} is interested in learning more about this error. We have created a report about the error for you to send to us.", (object) "[Unknown company]");
      this.errorMessage.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.errorMessage.Location = new Point(20, 69);
      this.errorMessage.Size = new Size(381, 13);
      this.cancelSending.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.cancelSending.FlatStyle = FlatStyle.System;
      this.cancelSending.Size = new Size(80, 24);
      this.cancelSending.Location = new Point(400 - this.cancelSending.Width, 205);
      this.cancelSending.TabIndex = 7;
      this.cancelSending.Text = "&Cancel";
      this.cancelSending.Click += new EventHandler(this.OnCancelSending);
      this.ok.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.ok.Enabled = false;
      this.ok.FlatStyle = FlatStyle.System;
      this.ok.Size = new Size(105, 24);
      this.ok.Location = new Point(this.cancelSending.Left - this.ok.Width - 6, 205);
      this.ok.TabIndex = 6;
      this.ok.Text = "&OK";
      this.ok.Click += new EventHandler(this.OnOK);
      this.retrySending.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.retrySending.FlatStyle = FlatStyle.System;
      this.retrySending.Location = this.ok.Location;
      this.retrySending.Size = this.ok.Size;
      this.retrySending.TabIndex = 5;
      this.retrySending.Text = "&Retry";
      this.retrySending.Visible = false;
      this.retrySending.Click += new EventHandler(this.OnRetry);
      this.saveReport.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.saveReport.FlatStyle = FlatStyle.System;
      this.saveReport.Location = this.ok.Location;
      this.saveReport.Size = this.ok.Size;
      this.saveReport.TabIndex = 5;
      this.saveReport.Text = "Save Report";
      this.saveReport.Visible = false;
      this.saveReport.Click += new EventHandler(this.OnSaveReport);
      this.waitSendingReport.Location = new Point(87, 146);
      this.waitSendingReport.Visible = false;
      this.preparingFeedback.SetBounds(24, 72, 368, 16);
      this.connectingFeedback.SetBounds(24, 96, 368, 16);
      this.transferingFeedback.SetBounds(24, 120, 368, 16);
      this.completedFeedback.SetBounds(24, 144, 368, 16);
      this.powered.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.powered.SetBounds(20, 444, 120, 32);
      this.panelInformation.Controls.AddRange(new Control[8]
      {
        (Control) this.debug,
        (Control) this.continueCheckBox,
        (Control) this.pleaseTellTitle,
        (Control) this.dontSendReport,
        (Control) this.sendReport,
        (Control) this.pleaseTellMessage,
        (Control) this.errorMessage,
        (Control) this.headerControl1
      });
      this.panelInformation.Size = new Size(413, 240);
      this.panelInformation.TabIndex = 0;
      this.panelSending.Controls.AddRange(new Control[10]
      {
        (Control) this.cancelSending,
        (Control) this.ok,
        (Control) this.retrySending,
        (Control) this.saveReport,
        (Control) this.waitSendingReport,
        (Control) this.headerControl2,
        (Control) this.preparingFeedback,
        (Control) this.connectingFeedback,
        (Control) this.transferingFeedback,
        (Control) this.completedFeedback
      });
      this.panelSending.Size = new Size(413, 240);
      this.panelSending.TabIndex = 2;
      this.panelSending.Visible = false;
      this.AutoScaleBaseSize = new Size(5, 13);
      this.ClientSize = new Size(434, 488);
      this.ControlBox = false;
      this.Controls.AddRange(new Control[3]
      {
        (Control) this.powered,
        (Control) this.panelInformation,
        (Control) this.panelSending
      });
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.ShowInTaskbar = false;
      this.MinimizeBox = false;
      this.MaximizeBox = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "server2";
      if (this.Text.Length == 0)
        this.Text = "Error Reporting";
      try
      {
        this.TopMost = true;
      }
      catch
      {
      }
      this.panelInformation.ResumeLayout(false);
      this.panelSending.ResumeLayout(false);
      this.ResumeLayout(false);
      this.retrySending.BringToFront();
      this.saveReport.BringToFront();
      this.Size = new Size(419, 264);
      this.panelSending.Dock = DockStyle.Fill;
      this.panelInformation.Dock = DockStyle.Fill;
    }

    private void OnSaveReport(object server, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Title = "Save Report";
      saveFileDialog.DefaultExt = "saencryptedreport";
      saveFileDialog.Filter = "SmartAssembly Encrypted Exception Report|*.saencryptedreport";
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.reportExceptionEventArgs.SaveEncryptedReport(saveFileDialog.FileName);
      this.Close();
    }

    private void OnSendReportClick(object sender, EventArgs e)
    {
      try
      {
        this.panelInformation.Visible = false;
        this.panelSending.Visible = true;
        this.powered.Visible = true;
        if (this.reportExceptionEventArgs == null)
          return;
        this.StartWorkingThread(new ThreadStart(this.StartSendReport));
      }
      catch
      {
      }
    }

    private void StartWorkingThread(ThreadStart start)
    {
      this.workingThread = new Thread(start);
      this.workingThread.Start();
    }

    private void OnDontSendReportClick(object sender, EventArgs e) => this.Close();

    private void OnCancelSending(object sender, EventArgs e)
    {
      try
      {
        if (this.workingThread != null)
          this.workingThread.Abort();
      }
      catch
      {
      }
      this.Close();
    }

    private void OnOK(object sender, EventArgs e) => this.Close();

    private void OnContinueCheckedChanged(object sender, EventArgs e) => this.reportExceptionEventArgs.TryToContinue = this.continueCheckBox.Checked;

    private void OnFeedback(object sender, SendingReportFeedbackEventArgs2 e)
    {
      try
      {
        this.Invoke((Delegate) new SendingReportFeedbackEventHandler2(this.Feedback), sender, (object) e);
      }
      catch (InvalidOperationException ex)
      {
      }
    }

    private void OnDebuggerLaunched(object sender, EventArgs e)
    {
      try
      {
        this.Invoke((Delegate) new EventHandler(this.DebuggerLaunched), sender, (object) e);
      }
      catch (InvalidOperationException ex)
      {
      }
    }

    protected override void OnClosing(CancelEventArgs e)
    {
      if (this.workingThread != null && this.workingThread.IsAlive)
        this.workingThread.Abort();
      base.OnClosing(e);
    }

    private void Feedback(object sender, SendingReportFeedbackEventArgs2 e)
    {
      Button button = !this.alreadyRetried || Thread.CurrentThread.ApartmentState != ApartmentState.STA ? this.retrySending : this.saveReport;
      switch (e.Step)
      {
        case SendingReportStep2.PreparingReport:
          if (e.Failed)
          {
            this.preparingFeedback.Stop(e.ErrorMessage);
            button.Visible = true;
            button.Focus();
            break;
          }
          this.preparingFeedback.Start();
          break;
        case SendingReportStep2.ConnectingToServer:
          if (e.Failed)
          {
            this.connectingFeedback.Stop(e.ErrorMessage);
            button.Visible = true;
            button.Focus();
            break;
          }
          this.preparingFeedback.Stop();
          this.connectingFeedback.Start();
          break;
        case SendingReportStep2.Transfering:
          if (e.Failed)
          {
            this.waitSendingReport.Visible = false;
            this.transferingFeedback.Stop(e.ErrorMessage);
            button.Visible = true;
            button.Focus();
            break;
          }
          this.connectingFeedback.Stop();
          this.transferingFeedback.Start();
          this.waitSendingReport.Visible = true;
          break;
        case SendingReportStep2.Finished:
          this.waitSendingReport.Visible = false;
          this.transferingFeedback.Stop();
          this.completedFeedback.Stop();
          this.ok.Enabled = true;
          this.ok.Focus();
          this.cancelSending.Enabled = false;
          break;
      }
    }

    private void DebuggerLaunched(object sender, EventArgs e) => this.Close();

    private void OnRetry(object sender, EventArgs e)
    {
      this.alreadyRetried = true;
      this.retrySending.Visible = false;
      this.preparingFeedback.Init();
      this.connectingFeedback.Init();
      this.transferingFeedback.Init();
      if (this.reportExceptionEventArgs == null)
        return;
      this.StartWorkingThread(new ThreadStart(this.StartSendReport));
    }

    private void StartSendReport() => this.reportExceptionEventArgs.SendReport();

    private void OnDebugClick(object sender, EventArgs e)
    {
      if (this.reportExceptionEventArgs == null)
        return;
      this.StartWorkingThread(new ThreadStart(this.reportExceptionEventArgs.LaunchDebugger));
    }

    public ExceptionReportingForm(
      UnhandledExceptionHandler1 unhandledExceptionHandler,
      ReportExceptionEventArgs1 reportExceptionEventArgs)
    {
      this.InitializeComponent();
      int height = this.Height;
      this.reportExceptionEventArgs = reportExceptionEventArgs;
      this.errorMessage.Text = reportExceptionEventArgs.Exception.Message;
      int num = height + (this.errorMessage.Height - this.FontHeight);
      if (!reportExceptionEventArgs.ShowContinueCheckbox)
      {
        this.continueCheckBox.Visible = false;
        num -= this.continueCheckBox.Height;
      }
      if (num > this.Height)
        this.Height = num;
      if (reportExceptionEventArgs.CanDebug)
      {
        unhandledExceptionHandler.DebuggerLaunched += new EventHandler(this.OnDebuggerLaunched);
        this.debug.Visible = true;
        if (this.debug.Left < this.powered.Right)
          this.powered.Visible = false;
      }
      if (!reportExceptionEventArgs.CanSendReport)
      {
        this.sendReport.Enabled = false;
        if (this.dontSendReport.CanFocus)
          this.dontSendReport.Focus();
      }
      unhandledExceptionHandler.SendingReportFeedback += new SendingReportFeedbackEventHandler2(this.OnFeedback);
    }
  }
}
