// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Output, Version=1.1.0.0, Culture=neutral, PublicKeyToken=ed61553e989492b3
// MVID: C7CC9454-F663-4E88-B488-D89A8E8A2020
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Foreign.dee-7b2f429bcd0936ae802edc4bf60d2431ff2f87ffc6d1c3c3879ec6651f92b519.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0003
{
  internal class \u0004
  {
    private string \u0001;
    private string \u0002;
    private int \u0001;
    private char[] \u0001;
    private char[] \u0002;

    [SpecialName]
    protected internal void \u0001([In] string obj0) => this.\u0001 = obj0;

    [SpecialName]
    protected internal void \u0002([In] string obj0) => this.\u0002 = obj0;

    [SpecialName]
    protected internal void \u0001([In] int obj0) => this.\u0001 = obj0;

    public unsafe string \u0001()
    {
      void* voidPtr1;
      StringBuilder stringBuilder1;
      if (true)
      {
        // ISSUE: untyped stack allocation
        voidPtr1 = (void*) __untypedstackalloc(14);
        StringBuilder stringBuilder2 = new StringBuilder();
        if (true)
          stringBuilder1 = stringBuilder2;
        this.\u0001 = \u0015\u0002.\u007E\u0083\u0003((object) this.\u0001);
        this.\u0002 = \u0015\u0002.\u007E\u0083\u0003((object) this.\u0002);
        void* voidPtr2 = voidPtr1;
        *(int*) ((IntPtr) voidPtr1 + 8) = this.\u0001;
        *(int*) voidPtr2 = 1;
        goto label_14;
      }
label_2:
      \u001C.\u001D\u0002();
      *(float*) ((IntPtr) voidPtr1 + 4) = \u0016\u0002.\u0084\u0003();
      *(short*) ((IntPtr) voidPtr1 + 12) = (short) -1;
      double num = \u0017\u0002.\u0086\u0003((double) (*(float*) ((IntPtr) voidPtr1 + 4) * 111f));
      string str1;
      if (true)
      {
        if (checked ((int) num) % 2 == 0)
        {
          while (*(short*) ((IntPtr) voidPtr1 + 12) < (short) 0)
            *(short*) ((IntPtr) voidPtr1 + 12) = \u0019\u0002.\u0088\u0003((float) \u0018\u0002.\u007E\u0087\u0003((object) this.\u0001, 0) * *(float*) ((IntPtr) voidPtr1 + 4));
          str1 = \u001A\u0002.\u0089\u0003(this.\u0001[(int) *(short*) ((IntPtr) voidPtr1 + 12)]);
          num = \u0017\u0002.\u0086\u0003((double) *(short*) ((IntPtr) voidPtr1 + 12) * (double) *(float*) ((IntPtr) voidPtr1 + 4) * 99.0);
        }
        else
        {
          while (*(short*) ((IntPtr) voidPtr1 + 12) < (short) 0)
            *(short*) ((IntPtr) voidPtr1 + 12) = \u0019\u0002.\u0088\u0003((float) \u0018\u0002.\u007E\u0087\u0003((object) this.\u0002, 0) * *(float*) ((IntPtr) voidPtr1 + 4));
          StringBuilder stringBuilder3 = \u001C\u0002.\u007E\u008B\u0003((object) stringBuilder1, this.\u0002[(int) *(short*) ((IntPtr) voidPtr1 + 12)]);
          goto label_13;
        }
      }
      if (checked ((int) num) % 2 != 0)
      {
        string str2 = this.\u0001[(int) *(short*) ((IntPtr) voidPtr1 + 12)].ToString();
        str1 = \u0010.\u007E\u0095((object) str2);
      }
      StringBuilder stringBuilder4 = \u001B\u0002.\u007E\u008A\u0003((object) stringBuilder1, str1);
label_13:
      *(int*) voidPtr1 = checked (*(int*) voidPtr1 + 1);
label_14:
      if (*(int*) voidPtr1 > *(int*) ((IntPtr) voidPtr1 + 8))
        return \u0010.\u007E\u0096((object) stringBuilder1);
      goto label_2;
    }
  }
}
