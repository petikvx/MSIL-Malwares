// Decompiled with JetBrains decompiler
// Type: BeamDesign.SRBPartialDesign
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using System;

namespace BeamDesign
{
  public class SRBPartialDesign : SingleReinforcement
  {
    public SRBPartialDesign(double Mu, double B, double H, double A, double Fy, double Fc)
      : base(Mu, B, H, A, Fy, Fc)
    {
      if (H - A <= 0.0)
        throw new Exception("α should be less than h");
      this.AsCalc();
    }

    protected double AlphaMaxCalc() => 0.5 * this.Beta1Calc() * (630.0 / (630.0 + this.Fy));

    protected double AsMinCalc() => 0.9 / this.Fy * this.B * this.D;

    protected override double AzeroCalc() => this.Mu / (0.765 * this.Fc * this.B * this.D * this.D);

    protected override double AlphaCalc() => 1.0 - Math.Sqrt(1.0 - 2.0 * this.AzeroCalc());

    protected override void AsCalc()
    {
      if (this.AlphaCalc() > this.AlphaMaxCalc())
        throw new Exception("Double reinforcement Needed");
      double num = this.Mu / (0.9 * this.GammazeroCalc() * this.D * this.Fy);
      this.AreaS = num < this.AsMinCalc() ? this.AsMinCalc() : num;
    }
  }
}
