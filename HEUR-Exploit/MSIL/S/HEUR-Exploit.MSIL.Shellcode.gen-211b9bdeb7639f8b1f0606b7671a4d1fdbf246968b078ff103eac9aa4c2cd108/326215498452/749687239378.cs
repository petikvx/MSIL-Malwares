// Decompiled with JetBrains decompiler
// Type: 326215498452.749687239378
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003041130631579;
using \u003193754076629;
using \u003326215498452;
using \u003369449654927;
using \u003522274766650;
using Microsoft.ProgramSynthesis.Utils;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace \u003326215498452
{
  internal class \u003749687239378 : \u003134945228346
  {
    private const int \u003900006426658 = 16;

    internal virtual int \u003950139034676 => 0;

    internal virtual IEnumerable<\u003197692273545> \u003213395845312 => Seq.Of<\u003197692273545>(new \u003197692273545[1]
    {
      \u003197692273545.JsonLines
    });

    internal virtual IEnumerable<string> \u003199824471025 => Seq.Of<string>(new string[2]
    {
      "json",
      "jsonl"
    });

    private static string \u003338389172548(string _param0)
    {
      int index = _param0.Length - 1;
      while (index >= 0 && _param0[index] != '}' && _param0[index] != ']')
        --index;
      if (index < 0)
        return string.Empty;
      int num = 0;
      while (num < _param0.Length && _param0[num] != '{' && _param0[num] != '[')
        ++num;
      return num == _param0.Length || index <= num ? string.Empty : _param0.Substring(num, index - num + 1);
    }

    internal virtual \u003197692273545 \u003778654886735(
      \u003388950121399 _param1,
      string _param2,
      string _param3)
    {
      List<string> list = ((IEnumerable<string>) _param2.Split('\n')).Take<string>(16).ToList<string>();
      if (list.Count < 2)
        return \u003197692273545.Unknown;
      bool flag = true;
      foreach (string str1 in list)
      {
        if (!string.IsNullOrEmpty(str1) && !string.IsNullOrWhiteSpace(str1))
        {
          string str2 = \u003749687239378.\u003338389172548(str1);
          if (string.IsNullOrEmpty(str2) && !string.IsNullOrEmpty(str1))
            return \u003197692273545.Unknown;
          flag = false;
          \u003749687239378.\u003871936369480.\u003103100409162.\u003414740119209();
          JsonConvert.DeserializeObject(str2, (JsonSerializerSettings) \u003749687239378.\u003871936369480.\u003103100409162);
          // ISSUE: reference to a compiler-generated method
          if (((\u003388950121399.\u003900612618424) \u003749687239378.\u003871936369480.\u003103100409162).get_ErrorEncountered())
            return \u003197692273545.Unknown;
        }
      }
      return !flag ? \u003197692273545.JsonLines : \u003197692273545.Unknown;
    }

    private class \u003871936369480 : JsonSerializerSettings
    {
      public IEncodingDetector \u003644710490770;

      public bool \u003009035073963
      {
        [CompilerGenerated, SpecialName] get => this.\u003320500084670;
        private set => ((\u003388950121399.\u003900612618424) this).\u003320500084670 = value;
      }

      public void \u003414740119209() => this.\u003009035073963 = false;

      private \u003871936369480()
      {
        this.DateParseHandling = (DateParseHandling) 0;
        this.Error = new EventHandler<ErrorEventArgs>(this.\u003462446744414);
      }

      private void \u003462446744414(object _param1, ErrorEventArgs _param2)
      {
        this.\u003009035073963 = true;
        _param2.ErrorContext.Handled = true;
      }

      public static \u003749687239378.\u003871936369480 \u003103100409162 { get; } = new \u003749687239378.\u003871936369480();

      public \u003871936369480()
        : this()
      {
      }
    }
  }
}
