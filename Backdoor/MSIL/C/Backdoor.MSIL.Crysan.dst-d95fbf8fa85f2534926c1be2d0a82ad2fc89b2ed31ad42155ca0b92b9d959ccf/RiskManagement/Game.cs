// Decompiled with JetBrains decompiler
// Type: RiskManagement.Game
// Assembly: MemberAccessExcepti, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 46220647-D1CE-4792-A51F-9B328C1E60FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.MSIL.Crysan.dst-d95fbf8fa85f2534926c1be2d0a82ad2fc89b2ed31ad42155ca0b92b9d959ccf.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace RiskManagement
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202E⁪‭‏‪⁪⁮⁯⁭‍⁫⁬‌‍‭‪⁭⁪‏‏​‎⁪⁯‬‫‬⁮⁮⁮‌⁪​‍⁯‬⁭‭‮⁬‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json[\u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(1972328969U)]);
      this._dice = new Dice();
      JSONNode jsonNode = json[\u003CModule\u003E.\u206C⁭⁭⁪‫⁮‭‍⁮‏⁬‫⁬‎⁯⁭⁬​⁯‌‮‪‫‎⁫⁪​‏‌⁮⁯​⁫‮‌⁮‍‫‪⁭‮<string>(4117204915U)];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        if (!this._finished)
          goto label_4;
label_1:
        int num1 = 196907023;
label_2:
        PlayerState[] playerStates;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1683691069)) % 9U)
          {
            case 0:
              goto label_4;
            case 1:
              goto label_9;
            case 2:
              int num3;
              num1 = num3 = playerStates[index].State != State.Playing ? 1071422381 : (num3 = 1188969937);
              continue;
            case 3:
              index = 0;
              num1 = (int) num2 * -1495727331 ^ 2027937735;
              continue;
            case 4:
              int num4;
              num1 = num4 = index >= playerStates.Length ? 1972725174 : (num4 = 408922828);
              continue;
            case 5:
              goto label_3;
            case 7:
              ++index;
              num1 = 729693420;
              continue;
            case 8:
              goto label_1;
            default:
              goto label_10;
          }
        }
label_3:
        return false;
label_9:
        return true;
label_10:
        return true;
label_4:
        playerStates = this._playerStates;
        num1 = 1287336666;
        goto label_2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = 886830975;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1961971744)) % 7U)
        {
          case 0:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * -1885689718 ^ 351448089;
            continue;
          case 1:
            this.Winners.Clear();
            this.Losers.Clear();
            num1 = (int) num2 * -125386767 ^ -1816673227;
            continue;
          case 2:
            this._finished = false;
            num1 = (int) num2 * 1237372084 ^ 770674977;
            continue;
          case 3:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 969612703 ^ 445043991;
            continue;
          case 4:
            goto label_1;
          case 5:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -1493685456 ^ 922835899;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void PlanningState()
    {
      int index = 0;
label_7:
      int num1 = index >= this.Players.Length ? 1655999159 : (num1 = 963484483);
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      Player player;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1609351254)) % 19U)
        {
          case 0:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1051524531 ^ 1909507096;
            continue;
          case 1:
            num1 = (int) num3 * -1795712302 ^ -5142749;
            continue;
          case 2:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num4;
            num1 = num4 = !player.UseOneMorePlanningSprint ? 1049048993 : (num4 = 1399418044);
            continue;
          case 3:
            num1 = (int) num3 * -2073792607 ^ 940902461;
            continue;
          case 4:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1708627770 ^ 1704546868;
            continue;
          case 5:
            num1 = (int) num3 * 1601871932 ^ 1720939443;
            continue;
          case 6:
            playerState.State = State.Playing;
            num1 = (int) num3 * -1142807802 ^ 1462370532;
            continue;
          case 7:
            int num5 = planningCardsCount != 0 ? 915060819 : (num5 = 1542819007);
            num1 = num5 ^ (int) num3 * -1884852720;
            continue;
          case 8:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -2143017517 ^ 1230175235;
            continue;
          case 9:
            num1 = 963484483;
            continue;
          case 10:
            goto label_3;
          case 11:
            num2 = 0;
            num1 = 820359963;
            continue;
          case 12:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1946524530 ^ 940870198;
            continue;
          case 13:
            playerState.Sprint = 1;
            num1 = (int) num3 * 2006805447 ^ 1272724213;
            continue;
          case 14:
            player = this.Players[index];
            num1 = 1036780768;
            continue;
          case 15:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = 516529475;
            continue;
          case 16:
            goto label_7;
          case 17:
            int num6;
            num1 = num6 = num2 <= 0 ? 2100422241 : (num6 = 1994022654);
            continue;
          case 18:
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            num1 = (int) num3 * -593439536 ^ 1879194936;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      if (this._currentPlayer < this.Players.Length)
        goto label_8;
label_1:
      int num1 = -1378073445;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1430643304)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Print((object) Game.\u202D‏⁪‭‏‍‪‏‎‫‎‌‮‮⁭​​‌‏‭‌⁭⁫​‫​‌‬‎‍​⁬‫⁬‫‌‬​⁯⁬‮(\u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(143266458U), (++this._currentTurn).ToString(), \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(4281109858U)));
            num1 = -1879935092;
            continue;
          case 2:
            int num3 = this._currentTurn <= 0 ? -1059889033 : (num3 = -1450045605);
            num1 = num3 ^ (int) num2 * 1222611187;
            continue;
          case 3:
            this._currentPlayer = 0;
            num1 = (int) num2 * 319852091 ^ -1581509997;
            continue;
          case 4:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206E‌‮⁫​⁬‪⁯‭⁫⁭⁭‭⁫⁪⁪‌⁮‎‭‭⁭‬‏⁮⁮‌​‮‮⁮⁫⁮⁫‭‎‍‍⁯⁪‮(\u003CModule\u003E.\u200C​‏⁮‪⁪‍‍‎‎‌‎‎‫‌‬⁫⁮‮‌⁮‌‎⁭‮‌‌‬⁪⁬‭⁮‮‪⁭⁪‭‬‏‬‮<string>(308552591U), this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -120565012 ^ -1289731841;
            continue;
          case 5:
            this.Print((object) \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(3062764630U), (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 646198777 ^ -1856280292;
            continue;
          case 6:
            goto label_3;
          case 7:
            goto label_8;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:
      return;
label_8:
      this.PlayerTurn(this._currentPlayer);
      num1 = -87607202;
      goto label_2;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
      PlayerState playerState1 = this._playerStates[playerIndex];
label_1:
      int num1 = 1095757641;
      while (true)
      {
        uint num2;
        int num3;
        Card card;
        int num4;
        int index;
        bool flag1;
        PlayerState playerState2;
        bool flag2;
        bool flag3;
        int num5;
        int num6;
        switch ((num2 = (uint) (num1 ^ 1505638419)) % 50U)
        {
          case 0:
            card = this.DrawCard();
            num1 = 799843964;
            continue;
          case 1:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 576951660 ^ 2036709534;
            continue;
          case 2:
            int num7 = playerState2.Resources >= 0 ? -133526231 : (num7 = -1941985673);
            num1 = num7 ^ (int) num2 * 238009170;
            continue;
          case 3:
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u200B‪⁬‍⁮‍⁭⁮⁯‍‎‏‫​‪‮⁪‭⁪⁯‮‌‬​⁬‮⁯‌⁬‬‌⁪‫⁯‫⁪‪‬⁫⁬‮(0, num5);
            num1 = (int) num2 * -128410753 ^ -2122117810;
            continue;
          case 4:
            playerState1.State = State.Won;
            num1 = (int) num2 * -1042494555 ^ -1881216784;
            continue;
          case 5:
            goto label_54;
          case 6:
            this.Losers.Add(num3);
            num1 = (int) num2 * -577467473 ^ -591364197;
            continue;
          case 7:
            int num8 = !this.Rules.OnlyOneWinner ? 897072495 : (num8 = 1233114190);
            num1 = num8 ^ (int) num2 * 1309156234;
            continue;
          case 8:
            num4 = card.Impact;
            num1 = (int) num2 * 395343510 ^ 1754335320;
            continue;
          case 9:
            int num9 = this.Losers.Contains(playerIndex) ? -1088886585 : (num9 = -320669333);
            num1 = num9 ^ (int) num2 * -421012577;
            continue;
          case 10:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 2003706858 ^ 636893244;
            continue;
          case 11:
            playerState2 = this._playerStates[index];
            num1 = 1958613946;
            continue;
          case 12:
            goto label_12;
          case 13:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -1955104177 ^ 928116239;
            continue;
          case 14:
            ++num3;
            num1 = 1055352311;
            continue;
          case 15:
            int num10;
            num1 = num10 = playerState1.Sprint < 0 ? 1746270960 : (num10 = 2041724751);
            continue;
          case 16:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 1603294586 ^ -1208339556;
              continue;
            }
            num6 = 0;
            break;
          case 17:
            this._finished = true;
            num1 = (int) num2 * -1689288655 ^ -24874150;
            continue;
          case 18:
            flag1 = true;
            num1 = (int) num2 * -1027350298 ^ 1848963405;
            continue;
          case 19:
            this.Print((object) \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(1565925646U), (object) card, flag3 ? (object) \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(1982452872U) : (object) "", flag2 ? (object) \u003CModule\u003E.\u200B⁫⁯⁫⁪‏‪⁯⁬‏‍‮‭⁯‎⁬‍⁫⁮⁪‌‮‏‬⁮‭⁮⁯⁬‭‎‍‪​⁭‎‬⁮⁮‎‮<string>(3367064903U) : (object) \u003CModule\u003E.\u206C⁭⁭⁪‫⁮‭‍⁮‏⁬‫⁬‎⁯⁭⁬​⁯‌‮‪‫‎⁫⁪​‏‌⁮⁯​⁫‮‌⁮‍‫‪⁭‮<string>(3130708729U), (object) Game.\u202B‭‭⁪‬‭‮⁬⁮⁬​‭‭‮‫‭‬⁮‍⁮‪⁭⁮⁫⁮⁬‬⁪‬​⁭‍‭‏‍⁪‍⁪‬‍‮(num4), flag1 ? (object) \u003CModule\u003E.\u200C​‏⁮‪⁪‍‍‎‎‌‎‎‫‌‬⁫⁮‮‌⁮‌‎⁭‮‌‌‬⁪⁬‭⁮‮‪⁭⁪‭‬‏‬‮<string>(1480649770U) : (object) \u003CModule\u003E.\u200B⁫⁯⁫⁪‏‪⁯⁬‏‍‮‭⁯‎⁬‍⁫⁮⁪‌‮‏‬⁮‭⁮⁯⁬‭‎‍‪​⁭‎‬⁮⁮‎‮<string>(2795833746U));
            int num11;
            num1 = num11 = !flag3 ? 1950879202 : (num11 = 1976435101);
            continue;
          case 20:
            index = 0;
            num1 = 115330071;
            continue;
          case 21:
            flag1 = true;
            num1 = 1742089955;
            continue;
          case 22:
            int num12;
            num1 = num12 = flag1 ? 1720670468 : (num12 = 1821348823);
            continue;
          case 23:
            int num13 = playerState1.Resources >= 0 ? 838560769 : (num13 = 532781858);
            num1 = num13 ^ (int) num2 * 1147343530;
            continue;
          case 24:
            playerState2.State = State.Lose;
            num1 = (int) num2 * -1300397410 ^ -1032647197;
            continue;
          case 25:
            num1 = (int) num2 * -1183877294 ^ 1437561173;
            continue;
          case 26:
            this.Print((object) \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(3484164440U));
            num1 = (int) num2 * -683830192 ^ 1200779067;
            continue;
          case 27:
            ++playerState1.Sprint;
            num1 = (int) num2 * -364787338 ^ -27567027;
            continue;
          case 28:
            int num14;
            num1 = num14 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? 274275883 : (num14 = 726404313);
            continue;
          case 29:
            int num15 = this.Losers.Contains(num3) ? -1981866100 : (num15 = -393476748);
            num1 = num15 ^ (int) num2 * -484004981;
            continue;
          case 30:
            int num16;
            num1 = num16 = index < this._playerStates.Length ? 741756918 : (num16 = 1320788827);
            continue;
          case 31:
            ++playerState1.Sprint;
            this.Print((object) \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(788861039U));
            num1 = (int) num2 * -1352172767 ^ -1883505667;
            continue;
          case 32:
            num3 = 0;
            num1 = (int) num2 * 904878064 ^ 1054673498;
            continue;
          case 33:
            goto label_1;
          case 34:
            int num17;
            num1 = num17 = playerState1.Sprint > this.Rules.SprintCount ? 1012489575 : (num17 = 866175573);
            continue;
          case 35:
            playerState1.Resources -= num4;
            num1 = (int) num2 * -2068939365 ^ -1885411071;
            continue;
          case 36:
            num1 = (int) num2 * 1511328238 ^ 720638488;
            continue;
          case 37:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1711875309 ^ 1695056211;
            continue;
          case 38:
            int num18;
            num1 = num18 = num3 >= this._playerStates.Length ? 866175573 : (num18 = 1985324050);
            continue;
          case 39:
            flag1 = false;
            num1 = 1320788827;
            continue;
          case 40:
            this.Print((object) Game.\u206E‌‮⁫​⁬‪⁯‭⁫⁭⁭‭⁫⁪⁪‌⁮‎‭‭⁭‬‏⁮⁮‌​‮‮⁮⁫⁮⁫‭‎‍‍⁯⁪‮(\u003CModule\u003E.\u206C⁭⁭⁪‫⁮‭‍⁮‏⁬‫⁬‎⁯⁭⁬​⁯‌‮‪‫‎⁫⁪​‏‌⁮⁯​⁫‮‌⁮‍‫‪⁭‮<string>(1416070472U), playerIndex.ToString()));
            int num19 = playerState1.State != State.Playing ? -2067055630 : (num19 = -13902022);
            num1 = num19 ^ (int) num2 * -2100531222;
            continue;
          case 41:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 42:
            this.Losers.Add(index);
            num1 = (int) num2 * -497085524 ^ -759110435;
            continue;
          case 43:
            goto label_3;
          case 44:
            ++index;
            num1 = 115330071;
            continue;
          case 45:
            flag2 = card.Impact < 0;
            num1 = (int) num2 * -1975376143 ^ -2131096540;
            continue;
          case 46:
            int num20 = !this.Losers.Contains(index) ? 1646966955 : (num20 = 578865133);
            num1 = num20 ^ (int) num2 * 1789655969;
            continue;
          case 47:
            playerState2.Resources -= Game.\u200B‪⁬‍⁮‍⁭⁮⁯‍‎‏‫​‪‮⁪‭⁪⁯‮‌‬​⁬‮⁯‌⁬‬‌⁪‫⁯‫⁪‪‬⁫⁬‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -1925800510 ^ 1762288891;
            continue;
          case 48:
            string str1 = \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(3789256054U);
            PlayerState playerState3 = playerState1;
            string str2 = playerState3 != null ? Game.\u206D‪‍‬⁬⁬‮‪‏‮⁬‫​⁭⁭⁮‪‪‌‍‫‌⁬⁪‫⁭‏‮‎‫⁯⁯⁬⁯‬‪‎⁪‬⁮‮((object) playerState3) : (string) null;
            this.Print((object) Game.\u206E‌‮⁫​⁬‪⁯‭⁫⁭⁭‭⁫⁪⁪‌⁮‎‭‭⁭‬‏⁮⁮‌​‮‮⁮⁫⁮⁫‭‎‍‍⁯⁪‮(str1, str2));
            num1 = 458729167;
            continue;
          case 49:
            int num21;
            num1 = num21 = num3 != playerIndex ? 1174124094 : (num21 = 1488281315);
            continue;
          default:
            goto label_55;
        }
        flag3 = num6 != 0;
        int num22;
        num1 = num22 = flag2 ? 573409648 : (num22 = 2146281605);
      }
label_12:
      return;
label_3:
      return;
label_55:
      return;
label_54:
      this.Print((object) playerState1.State);
    }

    private Card DrawCard()
    {
      if (this._deck.Count <= 0)
      {
label_1:
        int num1 = 1442428618;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1360242150)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.ShuffleCards();
              num1 = (int) num2 * 1225875286 ^ 865474833;
              continue;
            default:
              goto label_4;
          }
        }
      }
label_4:
      Card card = this._deck[0];
      this._deck.RemoveAt(0);
      return card;
    }

    public string ToString(bool initial)
    {
      string str = "";
      int index = 0;
label_3:
      int num1 = index >= this._playerStates.Length ? -1995092333 : (num1 = -2014526375);
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1433754343)) % 5U)
        {
          case 0:
            num1 = -2014526375;
            continue;
          case 1:
            goto label_3;
          case 3:
            string[] strArray = new string[5]
            {
              str,
              index.ToString(),
              \u003CModule\u003E.\u200B⁫⁯⁫⁪‏‪⁯⁬‏‍‮‭⁯‎⁬‍⁫⁮⁪‌‮‏‬⁮‭⁮⁯⁬‭‎‍‪​⁭‎‬⁮⁮‎‮<string>(1033245439U),
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206D‪‍‬⁬⁬‮‪‏‮⁬‫​⁭⁭⁮‪‪‌‍‫‌⁬⁪‫⁭‏‮‎‫⁯⁯⁬⁯‬‪‎⁪‬⁮‮((object) playerState) : (string) null;
            strArray[4] = \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(1014669426U);
            str = Game.\u200D⁯⁭‍‪‫⁫‍⁪⁫‏‎⁯‌​‎⁪⁭⁪​‫‪​​‍⁯⁬⁯‬‎‌‫‫‫‮‌‮⁪⁫‬‮(strArray);
            num1 = -186033689;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * 1781391192 ^ -1764175982;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return str;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more) => Game.\u200C‌⁫​‫‏⁭‮‎‬​⁮‮⁪‬‮‎‭⁯‫⁮⁬‮⁭⁬‍⁭⁭‌‫⁯⁯‎⁪‭‫⁮‭⁭‮(this._buffer, Game.\u206F‪‏‍⁬⁯‏‭⁯‫‎‫‎⁪‌‬⁪‍‏‮‎‫‍‍⁭⁭‮​‎‌⁭⁯‏⁫⁮‍​‌⁪‭‮(Game.\u206D‪‍‬⁬⁬‮‪‏‮⁬‫​⁭⁭⁮‪‪‌‍‫‌⁬⁪‫⁭‏‮‎‫⁯⁯⁬⁯‬‪‎⁪‬⁮‮(text), more));

    static Random \u202E⁪‭‏‪⁪⁮⁯⁭‍⁫⁬‌‍‭‪⁭⁪‏‏​‎⁪⁯‬‫‬⁮⁮⁮‌⁪​‍⁯‬⁭‭‮⁬‮([In] int obj0) => new Random(obj0);

    static string \u202D‏⁪‭‏‍‪‏‎‫‎‌‮‮⁭​​‌‏‭‌⁭⁫​‫​‌‬‎‍​⁬‫⁬‫‌‬​⁯⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206E‌‮⁫​⁬‪⁯‭⁫⁭⁭‭⁫⁪⁪‌⁮‎‭‭⁭‬‏⁮⁮‌​‮‮⁮⁫⁮⁫‭‎‍‍⁯⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200B‪⁬‍⁮‍⁭⁮⁯‍‎‏‫​‪‮⁪‭⁪⁯‮‌‬​⁬‮⁯‌⁬‬‌⁪‫⁯‫⁪‪‬⁫⁬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202B‭‭⁪‬‭‮⁬⁮⁬​‭‭‮‫‭‬⁮‍⁮‪⁭⁮⁫⁮⁬‬⁪‬​⁭‍‭‏‍⁪‍⁪‬‍‮([In] int obj0) => Math.Abs(obj0);

    static string \u206D‪‍‬⁬⁬‮‪‏‮⁬‫​⁭⁭⁮‪‪‌‍‫‌⁬⁪‫⁭‏‮‎‫⁯⁯⁬⁯‬‪‎⁪‬⁮‮([In] object obj0) => obj0.ToString();

    static string \u200D⁯⁭‍‪‫⁫‍⁪⁫‏‎⁯‌​‎⁪⁭⁪​‫‪​​‍⁯⁬⁯‬‎‌‫‫‫‮‌‮⁪⁫‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F‪‏‍⁬⁯‏‭⁯‫‎‫‎⁪‌‬⁪‍‏‮‎‫‍‍⁭⁭‮​‎‌⁭⁯‏⁫⁮‍​‌⁪‭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200C‌⁫​‫‏⁭‮‎‬​⁮‮⁪‬‮‎‭⁯‫⁮⁬‮⁭⁬‍⁭⁭‌‫⁯⁯‎⁪‭‫⁮‭⁭‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
