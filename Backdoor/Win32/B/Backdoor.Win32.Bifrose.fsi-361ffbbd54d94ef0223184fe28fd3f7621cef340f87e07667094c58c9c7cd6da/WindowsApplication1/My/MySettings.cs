// Decompiled with JetBrains decompiler
// Type: WindowsApplication1.My.MySettings
// Assembly: stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BBFEB6F2-8CB8-471E-8522-33E9235F0EA4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.Bifrose.fsi-361ffbbd54d94ef0223184fe28fd3f7621cef340f87e07667094c58c9c7cd6da.exe

using A;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace WindowsApplication1.My
{
  [CompilerGenerated]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    public MySettings()
    {
    }

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!cefdf2caac6b50ede5dba5ef40a30ea9a.c8675976345c7cb9d0559b13fd7ad6478.SaveMySettingsOnExit)
        return;
      cdd92d344ba1be8c00ab795f73a978090.Settings.Save();
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.addedHandler)
        {
          object handlerLockObject = MySettings.addedHandlerLockObject;
          ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
          Monitor.Enter(handlerLockObject);
          try
          {
            if (!MySettings.addedHandler)
            {
              cefdf2caac6b50ede5dba5ef40a30ea9a.c8675976345c7cb9d0559b13fd7ad6478.Shutdown += (ShutdownEventHandler) ((sender, e) =>
              {
                if (!cefdf2caac6b50ede5dba5ef40a30ea9a.c8675976345c7cb9d0559b13fd7ad6478.SaveMySettingsOnExit)
                  return;
                cdd92d344ba1be8c00ab795f73a978090.Settings.Save();
              });
              MySettings.addedHandler = true;
            }
          }
          finally
          {
            Monitor.Exit(handlerLockObject);
          }
        }
        return MySettings.defaultInstance;
      }
    }
  }
}
