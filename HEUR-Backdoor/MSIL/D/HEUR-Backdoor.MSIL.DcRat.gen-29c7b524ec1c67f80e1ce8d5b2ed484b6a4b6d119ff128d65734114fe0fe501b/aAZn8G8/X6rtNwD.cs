// Decompiled with JetBrains decompiler
// Type: aAZn8G8.X6rtNwD
// Assembly: jmZGgwW, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 3D70FD3D-7EEC-4701-9107-04233FCFD67F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.DcRat.gen-29c7b524ec1c67f80e1ce8d5b2ed484b6a4b6d119ff128d65734114fe0fe501b.exe

using Microsoft;
using Newtonsoft.Json;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace aAZn8G8
{
  internal sealed class X6rtNwD
  {
    public string ur6pL6P { get; internal set; }

    public string[] GEZFpoc { get; internal set; }

    public IReadOnlyDictionary<string, string> CGwRNHk { get; internal set; }

    public string[] v7LffeV { get; internal set; }

    public string \u0037vR2djt { get; internal set; }

    [JsonConstructor]
    public X6rtNwD(
      string executable,
      string[] args,
      IDictionary<string, string> additionalEnvironmentVariables = null,
      string[] contextEnvironmentVariables = null)
    {
      Requires.NotNullOrEmpty(executable, nameof (executable));
      Requires.NotNullOrEmpty((IEnumerable) args, nameof (args));
      this.ur6pL6P = executable;
      this.GEZFpoc = args;
      this.CGwRNHk = additionalEnvironmentVariables != null ? (IReadOnlyDictionary<string, string>) new ReadOnlyDictionary<string, string>(additionalEnvironmentVariables) : (IReadOnlyDictionary<string, string>) null;
      this.v7LffeV = contextEnvironmentVariables;
    }
  }
}
