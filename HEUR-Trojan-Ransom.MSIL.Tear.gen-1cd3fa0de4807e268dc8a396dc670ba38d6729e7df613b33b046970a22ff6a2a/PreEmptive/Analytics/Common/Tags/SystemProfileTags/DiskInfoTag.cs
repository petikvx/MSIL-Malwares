// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.SystemProfileTags.DiskInfoTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.SystemProfileInfo;
using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags.SystemProfileTags
{
  public class DiskInfoTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 6;
        int num1 = 1704;
        int num2 = num1;
        num1 = 1704;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (true)
              ;
            if (false)
              ;
            return Utils.a("\uDEB9햻춽ꮿ", A_1);
          default:
            goto case 1;
        }
      }
    }

    public DiskInfo Disk
    {
      get
      {
        int num1 = 16189;
        int num2 = num1;
        num1 = 16189;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -12395;
        int num2 = num1;
        num1 = -12395;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public DiskInfoTag(DiskInfo disk)
    {
      int A_1 = 7;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.AddOptionalAttribute<int?>(Utils.a("좺풼얾꓀", A_1), disk.Size);
      this.AddOptionalAttribute<int?>(Utils.a("\uDDBA쾼\uDABE꓀", A_1), disk.Free);
      this.AddOptionalAttribute(Utils.a("햺\uDCBC튾꓀", A_1), disk.Name);
      this.AddOptionalAttribute(Utils.a("\uDDBA캼쮾룀돂ꃄ", A_1), disk.Filesystem);
      this.AddOptionalAttribute(Utils.a("좺\uD8BC춾ꣀꋂ꧄", A_1), disk.Serial);
      this.Disk = disk;
    }
  }
}
