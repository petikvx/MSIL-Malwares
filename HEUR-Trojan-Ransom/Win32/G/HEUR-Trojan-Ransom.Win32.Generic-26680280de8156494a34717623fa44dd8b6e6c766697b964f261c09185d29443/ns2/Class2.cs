// Decompiled with JetBrains decompiler
// Type: ns2.Class2
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: AA83BB74-0A66-4BAC-8184-D7E3DA7EFE4C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-26680280de8156494a34717623fa44dd8b6e6c766697b964f261c09185d29443.exe

using ns0;
using ns1;
using ns7;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace ns2
{
  internal sealed class Class2 : Class0
  {
    private Dictionary<ushort, string> dictionary_0 = new Dictionary<ushort, string>();

    public string this[ushort ushort_1]
    {
      get => this.dictionary_0[ushort_1];
      set => this.dictionary_0[ushort_1] = value;
    }

    public Class2()
      : base(IntPtr.Zero, IntPtr.Zero, new Class40(Class38.Enum6.const_5), (Class40) null, Class15.smethod_7(), 0)
    {
    }

    public Class2(
      IntPtr intptr_2,
      IntPtr intptr_3,
      Class40 class40_2,
      Class40 class40_3,
      ushort ushort_1,
      int int_1)
      : base(intptr_2, intptr_3, class40_2, class40_3, ushort_1, int_1)
    {
    }

    [SpecialName]
    public ushort method_4() => (ushort) this.method_0().method_0().ToInt32();

    internal override IntPtr vmethod_0(IntPtr intptr_2, IntPtr intptr_3)
    {
      for (int index = 0; index < 16; ++index)
      {
        ushort len = (ushort) Marshal.ReadInt16(intptr_3);
        if (len != (ushort) 0)
          this.dictionary_0.Add((ushort) (((int) this.method_4() - 1) * 16 + index), Marshal.PtrToStringUni(new IntPtr(intptr_3.ToInt32() + 2), (int) len));
        intptr_3 = new IntPtr(intptr_3.ToInt32() + 2 + (int) len * Marshal.SystemDefaultCharSize);
      }
      return intptr_3;
    }

    internal override void vmethod_1(BinaryWriter binaryWriter_0)
    {
      for (int index = 0; index < 16; ++index)
      {
        ushort key = (ushort) (((int) this.method_4() - 1) * 16 + index);
        string s = (string) null;
        if (this.dictionary_0.TryGetValue(key, out s))
        {
          binaryWriter_0.Write((ushort) s.Length);
          binaryWriter_0.Write(Encoding.Unicode.GetBytes(s));
        }
        else
          binaryWriter_0.Write((ushort) 0);
      }
    }

    string object.ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("STRINGTABLE");
      stringBuilder.AppendLine("BEGIN");
      Dictionary<ushort, string>.Enumerator enumerator = this.dictionary_0.GetEnumerator();
      while (enumerator.MoveNext())
        stringBuilder.AppendLine(string.Format(" {0} {1}", (object) enumerator.Current.Key, (object) enumerator.Current.Value));
      stringBuilder.AppendLine("END");
      return stringBuilder.ToString();
    }
  }
}
