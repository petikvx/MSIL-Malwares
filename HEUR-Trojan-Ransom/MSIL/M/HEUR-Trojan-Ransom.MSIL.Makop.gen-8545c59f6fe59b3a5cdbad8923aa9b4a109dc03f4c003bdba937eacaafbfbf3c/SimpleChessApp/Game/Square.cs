// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: NU, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FD10F56-6E8A-4A54-94FE-02843CD215B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-8545c59f6fe59b3a5cdbad8923aa9b4a109dc03f4c003bdba937eacaafbfbf3c.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 979182145;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 371735519)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              EventHandler comparand = eventHandler1;
              EventHandler eventHandler2 = (EventHandler) Square.\u206B​‎‪⁫‪‌‏‮⁫‎⁭⁯⁭​⁯⁫‌‬‭⁬⁪‮‍‬‎‫‬⁪⁭‍‏‭⁭⁫‮⁪‭⁬‏‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3;
              num1 = num3 = eventHandler1 == comparand ? 1309710210 : (num3 = 979182145);
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 814442028;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1836816673)) % 5U)
          {
            case 0:
              int num3 = eventHandler1 != comparand ? -310759798 : (num3 = -1678176873);
              num1 = num3 ^ (int) num2 * -406796157;
              continue;
            case 1:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler) Square.\u206A‭⁯‎‍⁪‍‬⁮​‌⁪‎‫‌‮‍⁮‮‪⁯⁮‭‏⁫‮‎‮‬⁮​⁫⁬⁬⁭‌⁬‪‎⁪‮((Delegate) comparand, (Delegate) value);
              num1 = 1636914483;
              continue;
            case 2:
              goto label_1;
            case 3:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -215201243 ^ -1328104359;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName => Square.\u202B⁯⁬⁯‏⁪⁯‫​⁮‬⁫‎‍‮⁪‪‏‫⁫‪‮‏‫‎‍‭​⁫‭⁯​‎⁪⁯‬‌‬‮⁯‮(this.CurrentSquare, \u003CModule\u003E.\u202D‮​‎‎⁬⁭‮⁪‫​⁫‮‎‪⁭⁫‪⁯‫‬‫‎‮‎‪⁪‪⁫⁪‪‭‫‮⁯‫‮‭‪⁭‮<string>(3802331598U), Square.\u206B‭‌⁭⁫⁯‪⁭‏⁯‭‎‎‬‍‏⁬⁯⁫‫‪⁫‏‎⁮‬⁯‪‮​⁯‫‏‮‫⁪⁮⁬⁬‭‮((object) this.Piece));

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = 1872534576;
        char ch;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 625478629)) % 4U)
          {
            case 1:
              ch = Square.\u200C‬‭‬‭⁫‍‮‎‏‏⁬‮⁪⁭‌‬⁫‭⁪‬‬⁮‫​⁫⁫‍‏⁬​‬⁪‎⁭​‍‮‏‭‮(\u003CModule\u003E.\u200C‎⁯⁬⁬​⁭‬⁯‎⁬⁯‎⁬‪‎‎‬⁮​​‎‍⁬‎‍​‮⁬‫‪⁮⁬‏⁫‫‪‌‭‏‮<string>(2477319069U), this.File);
              num1 = (int) num2 * -1320785538 ^ -548839872;
              continue;
            case 2:
              goto label_1;
            case 3:
              currentSquare = Square.\u200D‍⁪‪⁮‪⁫⁭⁭‬‪⁪‌‫‎‎⁮‏‏​‌​​⁪‍⁭⁯⁬‮‎⁭‬‏‮‮‎⁮⁬‮⁪‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -911464293 ^ 1624347312;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
      EventHandler action = Square.Action;
      if (action == null)
        return;
      action((object) msg, (EventArgs) null);
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = -626008666;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1535974187)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -31339739 ^ 1987690716;
            continue;
          case 1:
            this.Board = Board;
            this.File = file;
            num1 = (int) num2 * -1705955218 ^ 743490546;
            continue;
          case 2:
            goto label_1;
          case 4:
            num1 = (int) num2 * -404856013 ^ -1942997393;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.Rank = rank;
      this.Name = Square.\u200D‍⁪‪⁮‪⁫⁭⁭‬‪⁪‌‫‎‎⁮‏‏​‌​​⁪‍⁭⁯⁬‮‎⁭‬‏‮‮‎⁮⁬‮⁪‮(Square.\u200C‬‭‬‭⁫‍‮‎‏‏⁬‮⁪⁭‌‬⁫‭⁪‬‬⁮‫​⁫⁫‍‏⁬​‬⁪‎⁭​‍‮‏‭‮(\u003CModule\u003E.\u202D‮​‎‎⁬⁭‮⁪‫​⁫‮‎‪⁭⁫‪⁯‫‬‫‎‮‎‪⁪‪⁫⁪‪‭‫‮⁯‫‮‭‪⁭‮<string>(452499513U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = -281194813;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -904650075)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            int num3 = this.Board.WhosPlaying == PieceColor.White ? -790232384 : (num3 = -62463725);
            num1 = num3 ^ (int) num2 * 621175881;
            continue;
          case 3:
            num1 = -1000123260;
            continue;
          case 4:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1949110778;
            continue;
          case 5:
            int num4 = flag ? 166319515 : (num4 = 1258894576);
            num1 = num4 ^ (int) num2 * 858221892;
            continue;
          case 6:
            flag = !this.Board.DisableTurns;
            num1 = (int) num2 * -1090673456 ^ 554216776;
            continue;
          case 7:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 1910569357 ^ -1408506123;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = -2116149165;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1570320648)) % 4U)
        {
          case 0:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          case 2:
            goto label_1;
          case 3:
            if (!this.Board.DisableTurns)
            {
              num1 = (int) num2 * -451831660 ^ -775963324;
              continue;
            }
            num3 = 1;
            break;
          default:
            goto label_8;
        }
        side = num3 != 0;
        num1 = -1185396547;
      }
label_8:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      bool flag1 = Square.\u206C⁬‫‍⁯‬‌‌​⁪‌‮‮‪‮​‏‮‎‍‮⁫‪⁮⁫‌‪‌‍⁭⁬⁪⁪⁫‮⁯‍‌‌‌‮(e) == MouseButtons.Left;
label_1:
      int num1 = -131990393;
      while (true)
      {
        uint num2;
        List<PossibleMoves> move;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool side;
        bool flag7;
        bool flag8;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ -1878064497)) % 81U)
        {
          case 0:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1177293270 ^ -1024799218;
            continue;
          case 1:
            num1 = -361087445;
            continue;
          case 2:
            this.msg = \u003CModule\u003E.\u202D‮​‎‎⁬⁭‮⁪‫​⁫‮‎‪⁭⁫‪⁯‫‬‫‎‮‎‪⁪‪⁫⁪‪‭‫‮⁯‫‮‭‪⁭‮<string>(1006598459U);
            flag8 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -1012107800 ^ 718273632;
            continue;
          case 3:
            num1 = (int) num2 * -1781419075 ^ -176159023;
            continue;
          case 4:
            this.msg = \u003CModule\u003E.\u200C‎⁯⁬⁬​⁭‬⁯‎⁬⁯‎⁬‪‎‎‬⁮​​‎‍⁬‎‍​‮⁬‫‪⁮⁬‏⁫‫‪‌‭‏‮<string>(1458581940U);
            num1 = (int) num2 * -1736353135 ^ 1902118825;
            continue;
          case 5:
            num3 = this.getSide(to) ? 1 : 0;
            goto label_31;
          case 6:
            int num5 = side ? -976232559 : (num5 = -555916211);
            num1 = num5 ^ (int) num2 * 17013870;
            continue;
          case 7:
            num1 = (int) num2 * -76208028 ^ 2037878409;
            continue;
          case 8:
            num1 = (int) num2 * -1471627089 ^ -1873020193;
            continue;
          case 9:
            num1 = (int) num2 * 1146064474 ^ 140438320;
            continue;
          case 10:
            int num6;
            num1 = num6 = !flag3 ? -1173658614 : (num6 = -1669150780);
            continue;
          case 11:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1051521513 ^ -2046170692;
            continue;
          case 12:
            flag7 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * 916995975 ^ 199178420;
            continue;
          case 13:
            num1 = (int) num2 * -259562571 ^ -160628884;
            continue;
          case 14:
            this.msg = \u003CModule\u003E.\u202B‪​⁬⁪‏⁯⁮‍⁫⁯⁮‏​⁭‮⁫‮‫‬‪‌‮‫⁯‏‭‌‪‏⁬‎⁭⁬‎‬⁭‎⁭⁯‮<string>(3067803159U);
            num1 = (int) num2 * 301204141 ^ -50035541;
            continue;
          case 15:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -2057119735 ^ 281396389;
            continue;
          case 16:
            num1 = (int) num2 * 23629534 ^ -1352711195;
            continue;
          case 17:
            num1 = (int) num2 * -1197377479 ^ -802538306;
            continue;
          case 18:
            int num7 = this.Board.lights.MoveList[this.Board.From.Piece.Id].Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -1010648216 : (num7 = -1362816192);
            num1 = num7 ^ (int) num2 * 1018949894;
            continue;
          case 19:
            num1 = (int) num2 * -418804154 ^ 880367049;
            continue;
          case 20:
            flag4 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = -1831378718;
            continue;
          case 21:
            to.HighLight();
            num1 = (int) num2 * 1004449960 ^ 564452285;
            continue;
          case 22:
            num1 = (int) num2 * 191041923 ^ -1230940842;
            continue;
          case 23:
            this.Board.From = to;
            num1 = (int) num2 * 1011500286 ^ -1576516306;
            continue;
          case 24:
            int num8 = flag2 ? 638543491 : (num8 = 656725831);
            num1 = num8 ^ (int) num2 * 1618230634;
            continue;
          case 25:
            num1 = (int) num2 * 1814641526 ^ -419871541;
            continue;
          case 26:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206B⁬‪⁪‎⁭⁪⁯‎⁪⁬⁪⁬‭‎⁮​⁯​‍⁫⁭⁪⁬⁯⁪‭​⁮‪⁮‏‪‮‪​‭⁫‭‪‮<string>(2411029983U);
            num1 = (int) num2 * 24771436 ^ -626166859;
            continue;
          case 27:
            num1 = -400577569;
            continue;
          case 28:
            num1 = (int) num2 * -497969244 ^ -996259976;
            continue;
          case 29:
            goto label_3;
          case 30:
            flag5 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * -1827906039 ^ 1334295035;
            continue;
          case 31:
            to.HighLight();
            num1 = (int) num2 * -870352856 ^ 710796445;
            continue;
          case 32:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1904786031 ^ 304612901;
            continue;
          case 33:
            move = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u202E⁪‫‭⁭⁪‭⁭​‪‫‌​⁪‫‎​‌⁪⁫⁮‫‪‬‏‎⁪⁭‍‬⁪‮‌⁪⁪⁯‬‏‪‪‮(\u003CModule\u003E.\u206B⁬‪⁪‎⁭⁪⁯‎⁪⁬⁪⁬‭‎⁮​⁯​‍⁫⁭⁪⁬⁯⁪‭​⁮‪⁮‏‪‮‪​‭⁫‭‪‮<string>(2605952995U), (object) move.Count);
            num1 = (int) num2 * 1069161246 ^ -1728031649;
            continue;
          case 34:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * 1630572705 ^ -46116449;
            continue;
          case 35:
            goto label_1;
          case 36:
            num1 = (int) num2 * -1855264223 ^ 383323302;
            continue;
          case 37:
            num1 = (int) num2 * -2056776338 ^ -1168009232;
            continue;
          case 38:
            num1 = -2019063001;
            continue;
          case 39:
            num1 = -1167766147;
            continue;
          case 40:
            num1 = (int) num2 * -712194809 ^ -1893098902;
            continue;
          case 41:
            to.MovePawn(this.Board.From);
            num1 = -1061397359;
            continue;
          case 42:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            break;
          case 43:
            side = this.getSide(this.Board.From);
            num1 = -630061401;
            continue;
          case 44:
            if (to.Piece == null)
            {
              num3 = 0;
              goto label_31;
            }
            else
            {
              num1 = -871764709;
              continue;
            }
          case 45:
            num1 = (int) num2 * -1124360321 ^ -976273496;
            continue;
          case 46:
            to = this;
            if (this.Board.From != null)
            {
              num1 = (int) num2 * 898632366 ^ -902913043;
              continue;
            }
            num4 = 0;
            break;
          case 47:
            this.msg = \u003CModule\u003E.\u202D‮​‎‎⁬⁭‮⁪‫​⁫‮‎‪⁭⁫‪⁯‫‬‫‎‮‎‪⁪‪⁫⁪‪‭‫‮⁯‫‮‭‪⁭‮<string>(4279229429U);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 2110625848 ^ -1822437886;
            continue;
          case 48:
            num1 = (int) num2 * 1325362137 ^ 1598884366;
            continue;
          case 49:
            flag2 = move.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * -407899113 ^ 682886615;
            continue;
          case 50:
            int num9;
            num1 = num9 = this.Board.DisableTurns ? -97435050 : (num9 = -1462974296);
            continue;
          case 51:
            int num10 = flag5 ? -868585821 : (num10 = -402627431);
            num1 = num10 ^ (int) num2 * 2029575543;
            continue;
          case 52:
            num1 = (int) num2 * 1434217846 ^ -1017776311;
            continue;
          case 53:
            num1 = (int) num2 * 379376073 ^ -1852518418;
            continue;
          case 54:
            num1 = -1629605530;
            continue;
          case 55:
            int num11 = flag1 ? -72753480 : (num11 = -650691499);
            num1 = num11 ^ (int) num2 * 1622181342;
            continue;
          case 56:
            int num12 = !flag6 ? 727630516 : (num12 = 1702891009);
            num1 = num12 ^ (int) num2 * -239785524;
            continue;
          case 57:
            num1 = (int) num2 * -1145772152 ^ 654216639;
            continue;
          case 58:
            int num13 = flag8 ? -438377706 : (num13 = -1071604235);
            num1 = num13 ^ (int) num2 * -1580419088;
            continue;
          case 59:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1531000912 ^ -852054010;
            continue;
          case 60:
            num1 = (int) num2 * 1232427458 ^ -2131620252;
            continue;
          case 61:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -406412217 ^ 1392341053;
            continue;
          case 62:
            int num14 = flag7 ? -2120041822 : (num14 = -121330696);
            num1 = num14 ^ (int) num2 * -489600676;
            continue;
          case 63:
            this.msg = \u003CModule\u003E.\u202B‪​⁬⁪‏⁯⁮‍⁫⁯⁮‏​⁭‮⁫‮‫‬‪‌‮‫⁯‏‭‌‪‏⁬‎⁭⁬‎‬⁭‎⁭⁯‮<string>(1344371190U);
            num1 = -361087445;
            continue;
          case 64:
            to.HighLight();
            num1 = (int) num2 * 502747523 ^ -1666667602;
            continue;
          case 65:
            num1 = (int) num2 * 1804226810 ^ -582685621;
            continue;
          case 66:
            num1 = (int) num2 * 641943902 ^ -38899857;
            continue;
          case 67:
            num1 = -1324527963;
            continue;
          case 68:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1461324397 ^ -1237101252;
            continue;
          case 69:
            num1 = (int) num2 * 1866542456 ^ 1463551813;
            continue;
          case 70:
            this.msg = \u003CModule\u003E.\u202D‮​‎‎⁬⁭‮⁪‫​⁫‮‎‪⁭⁫‪⁯‫‬‫‎‮‎‪⁪‪⁫⁪‪‭‫‮⁯‫‮‭‪⁭‮<string>(2166016113U);
            num1 = (int) num2 * -1933040016 ^ -1368769158;
            continue;
          case 71:
            num1 = (int) num2 * -1746343083 ^ 1970200508;
            continue;
          case 72:
            this.Board.From = (Square) null;
            num1 = (int) num2 * 1084261897 ^ -206211484;
            continue;
          case 73:
            to.HighLight();
            num1 = (int) num2 * -1088410908 ^ -1357075899;
            continue;
          case 74:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1454824744 ^ 655349933;
            continue;
          case 75:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200F⁫​⁫⁫⁯⁭‭‮⁯‍⁭⁮‪⁭‍‫‫⁪⁬⁮‮‫⁫‏⁮‬‬⁫‬‭‍⁬‫⁮‌⁬⁫⁮⁮‮<string>(973058461U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1888571699 ^ -1131635274;
            continue;
          case 76:
            int num15 = to.Piece == null & flag3 ? -395013536 : (num15 = -1091980311);
            num1 = num15 ^ (int) num2 * 1931726059;
            continue;
          case 77:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 429095794 ^ 1886380299;
            continue;
          case 78:
            Square.action(this.msg);
            num1 = -2109638992;
            continue;
          case 79:
            num1 = (int) num2 * 436995652 ^ 298655600;
            continue;
          case 80:
            int num16 = !flag4 ? 488079893 : (num16 = 1234759359);
            num1 = num16 ^ (int) num2 * 240753087;
            continue;
          default:
            goto label_89;
        }
        flag3 = num4 != 0;
        num1 = -1272653099;
        continue;
label_31:
        flag6 = num3 != 0;
        num1 = -345201884;
      }
label_3:
      return;
label_89:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = -1412792302;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -154854021)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -330418260 ^ 710880510;
            continue;
          case 1:
            int num3 = this.Board.From != null ? 482495810 : (num3 = 152899891);
            num1 = num3 ^ (int) num2 * 1834727338;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1139724791 ^ 76613758;
            continue;
          case 4:
            num1 = (int) num2 * -1053667560 ^ 2011288169;
            continue;
          case 5:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -1572918221 ^ -1683969573;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -727040066 ^ -375870483;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = -2146512269;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -336623130)) % 29U)
        {
          case 0:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 1:
            flag1 = true;
            num1 = (int) num2 * 657569747 ^ 325381249;
            continue;
          case 2:
            if (flag4)
            {
              num1 = (int) num2 * 1106654750 ^ 112986632;
              continue;
            }
            goto label_58;
          case 3:
            from.Piece = (ChessPiece) null;
            num1 = -342327467;
            continue;
          case 4:
            num1 = -871038324;
            continue;
          case 5:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = -190498638;
            continue;
          case 6:
            int num5 = this.Piece.Color != PieceColor.White ? 509111200 : (num5 = 833846039);
            num1 = num5 ^ (int) num2 * 977433627;
            continue;
          case 7:
            this.handleWhiteCastling();
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -696153467 ^ 1877778100;
              continue;
            }
            num4 = 0;
            goto label_34;
          case 8:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 132478357 ^ 68808052;
            continue;
          case 9:
            int num6 = !flag3 ? 1306019590 : (num6 = 361373706);
            num1 = num6 ^ (int) num2 * -354576249;
            continue;
          case 10:
            flag4 = flag1;
            num1 = (int) num2 * -777873054 ^ -1970640419;
            continue;
          case 11:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            this.handleBlackCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1982701206 ^ 912974921;
            continue;
          case 12:
            flag2 = this.Piece.Color == PieceColor.Black;
            num1 = -49349235;
            continue;
          case 13:
            num1 = (int) num2 * -220408125 ^ -1853995171;
            continue;
          case 15:
            num1 = (int) num2 * 1846355850 ^ 1004446070;
            continue;
          case 16:
            this.Piece = from.Piece;
            flag1 = false;
            num1 = -1238483976;
            continue;
          case 17:
            goto label_1;
          case 18:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = -250981243;
            continue;
          case 19:
            int num7;
            num1 = num7 = from.Piece.Color != PieceColor.White ? -794613723 : (num7 = -1118835709);
            continue;
          case 20:
            flag1 = true;
            num1 = (int) num2 * 668615266 ^ 1768900460;
            continue;
          case 21:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * 1216060004 ^ 1684270056;
            continue;
          case 22:
            num1 = (int) num2 * 916193479 ^ 1198545824;
            continue;
          case 23:
            num1 = -948281319;
            continue;
          case 24:
            int num8 = !flag2 ? 2011559894 : (num8 = 96759303);
            num1 = num8 ^ (int) num2 * -579885426;
            continue;
          case 25:
            flag3 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 808769268 ^ -1731589161;
            continue;
          case 26:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 2013318034 ^ -1964852864;
            continue;
          case 27:
            num1 = (int) num2 * 1830353703 ^ 1205166723;
            continue;
          case 28:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_34;
          default:
            goto label_37;
        }
        int num9;
        num1 = num9 = num3 != 0 ? -1681335767 : (num9 = -1870646190);
        continue;
label_34:
        int num10;
        num1 = num10 = num4 != 0 ? -531426587 : (num10 = -1934555912);
      }
label_37:
      Promotion promotion = new Promotion(Square.\u202A​⁭‭‎‌‮‍‏⁪‍⁯‫⁭⁫‮⁭‍​​​‬⁬⁯⁯‪⁬‪‎‎⁬‌⁬⁬​⁮​⁬‮⁯‮());
      try
      {
label_39:
        int num11 = -543458372;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -336623130)) % 6U)
          {
            case 0:
              goto label_39;
            case 1:
              num11 = (int) num12 * -683895059 ^ -909913468;
              continue;
            case 2:
              int num13 = (int) Square.\u202A‫​⁫‬⁮‏⁪‮‫‏⁮⁭‭⁭‏‬‎‌⁯‌‬‫‭⁯⁯​⁫‏‪‫‏‬⁭‬‭‏⁯‭‎‮((Form) promotion);
              num11 = (int) num12 * 2104015900 ^ -237163785;
              continue;
            case 3:
              num11 = (int) num12 * -144306066 ^ -732109738;
              continue;
            case 5:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -1337656254 ^ 366198359;
              continue;
            default:
              goto label_52;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_46:
          int num14 = -2082538219;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -336623130)) % 4U)
            {
              case 0:
                goto label_46;
              case 1:
                num14 = (int) num15 * 1169572976 ^ 799329888;
                continue;
              case 3:
                Square.\u202D‍‌‎‮⁬‍‮‭‭‬‎⁮⁪‫‎⁮‏‮​‪‌⁫⁭‎⁪‪⁪‍‫‌⁫‌⁫⁫‎⁪‫⁮‎‮((IDisposable) promotion);
                num14 = (int) num15 * -2039742490 ^ 1659331909;
                continue;
              default:
                goto label_51;
            }
          }
        }
label_51:;
      }
label_52:
label_53:
      int num16 = -329137647;
label_54:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ -336623130)) % 5U)
        {
          case 0:
            goto label_55;
          case 1:
            goto label_58;
          case 2:
            goto label_53;
          case 3:
            num16 = (int) num17 * 472395728 ^ -1885939744;
            continue;
          case 4:
            PlaySound.Play();
            this.SwitchPlayer();
            num16 = (int) num17 * 530374726 ^ -537494894;
            continue;
          default:
            goto label_48;
        }
      }
label_55:
      return;
label_48:
      return;
label_58:
      this.Board.lights.FindAllMoves();
      num16 = -827416013;
      goto label_54;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = -389045211;
      ChessPiece chessPiece;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -402536292)) % 36U)
        {
          case 0:
            flag4 = false;
            num1 = -326989189;
            continue;
          case 1:
            int num6 = flag6 ? 246618483 : (num6 = 1778722898);
            num1 = num6 ^ (int) num2 * 1091228570;
            continue;
          case 2:
            flag4 = true;
            num1 = (int) num2 * 756398407 ^ 796092634;
            continue;
          case 3:
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 122485554 ^ 131762039;
            continue;
          case 4:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 87580660 ^ -1248783085;
            continue;
          case 5:
            num1 = (int) num2 * -1953416268 ^ 1477555749;
            continue;
          case 6:
            flag6 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -1096425424 ^ 1020356089;
            continue;
          case 7:
            num1 = (int) num2 * 1320388203 ^ 540629443;
            continue;
          case 8:
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * 611117155 ^ 1057987278;
            continue;
          case 9:
            num1 = -1822978077;
            continue;
          case 10:
            flag4 = true;
            num1 = (int) num2 * 95587561 ^ 1662539911;
            continue;
          case 11:
            from.Piece = (ChessPiece) null;
            num1 = -110914743;
            continue;
          case 12:
            this.Piece = from.Piece;
            num1 = (int) num2 * 584076260 ^ -415124501;
            continue;
          case 13:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 14:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1362918072 ^ 890095988;
            continue;
          case 15:
            int num7 = !flag2 ? 1906596092 : (num7 = 1574906390);
            num1 = num7 ^ (int) num2 * 18081968;
            continue;
          case 16:
            int num8 = !flag7 ? 2002735497 : (num8 = 145114498);
            num1 = num8 ^ (int) num2 * -810129183;
            continue;
          case 17:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * 882829041 ^ -728958211;
              continue;
            }
            num4 = 1;
            goto label_34;
          case 18:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 573651362 ^ 1462459814;
              continue;
            }
            num5 = 0;
            goto label_40;
          case 19:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1882576110 ^ 55505387;
            continue;
          case 20:
            num1 = -1822978077;
            continue;
          case 21:
            int num9 = !flag3 ? 1985733540 : (num9 = 377613947);
            num1 = num9 ^ (int) num2 * 1037452763;
            continue;
          case 22:
            num5 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_40;
          case 23:
            num1 = -145938864;
            continue;
          case 24:
            num1 = (int) num2 * 1007269799 ^ -366119353;
            continue;
          case 25:
            chessPiece = (ChessPiece) null;
            num1 = (int) num2 * -1635379652 ^ -436417720;
            continue;
          case 26:
            goto label_1;
          case 28:
            num4 = this.Rank == 4 ? 1 : 0;
            goto label_34;
          case 29:
            if (flag4)
            {
              num1 = (int) num2 * -688302762 ^ 1349844822;
              continue;
            }
            goto label_112;
          case 30:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * 1181981057 ^ 736098545;
            continue;
          case 31:
            num1 = -1187960130;
            continue;
          case 32:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -191159691 ^ 321664082;
            continue;
          case 33:
            flag5 = flag1;
            num1 = (int) num2 * -1805327623 ^ 1755097202;
            continue;
          case 34:
            this.Board.lastPassantPawn = (ChessPiece) null;
            num1 = (int) num2 * -486040089 ^ 1575430208;
            continue;
          case 35:
            int num10 = flag5 ? -1776812005 : (num10 = -1354742752);
            num1 = num10 ^ (int) num2 * 387865305;
            continue;
          default:
            goto label_47;
        }
        flag2 = num3 != 0;
        num1 = -1691897541;
        continue;
label_34:
        flag3 = num4 != 0;
        num1 = -2004999799;
        continue;
label_40:
        flag7 = num5 != 0;
        num1 = -1534863640;
      }
label_47:
      Promotion promotion = new Promotion(Square.\u202A​⁭‭‎‌‮‍‏⁪‍⁯‫⁭⁫‮⁭‍​​​‬⁬⁯⁯‪⁬‪‎‎⁬‌⁬⁬​⁮​⁬‮⁯‮());
      try
      {
label_49:
        int num11 = -627801466;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -402536292)) % 4U)
          {
            case 0:
              goto label_49;
            case 2:
              int num13 = (int) Square.\u202A‫​⁫‬⁮‏⁪‮‫‏⁮⁭‭⁭‏‬‎‌⁯‌‬‫‭⁯⁯​⁫‏‪‫‏‬⁭‬‭‏⁯‭‎‮((Form) promotion);
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -1709245505 ^ -699789635;
              continue;
            case 3:
              num11 = (int) num12 * -565104802 ^ -1276351541;
              continue;
            default:
              goto label_59;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_54:
          int num14 = -2060575205;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -402536292)) % 3U)
            {
              case 1:
                Square.\u202D‍‌‎‮⁬‍‮‭‭‬‎⁮⁪‫‎⁮‏‮​‪‌⁫⁭‎⁪‪⁪‍‫‌⁫‌⁫⁫‎⁪‫⁮‎‮((IDisposable) promotion);
                num14 = (int) num15 * 943490328 ^ 280253552;
                continue;
              case 2:
                goto label_54;
              default:
                goto label_58;
            }
          }
        }
label_58:;
      }
label_59:
label_60:
      int num16 = -1297478770;
label_61:
      while (true)
      {
        uint num17;
        Square square1;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool isOnCheck;
        bool flag12;
        int rank;
        int file;
        Square square2;
        switch ((num17 = (uint) (num16 ^ -402536292)) % 56U)
        {
          case 0:
            int num18 = !flag12 ? -1745307086 : (num18 = -1213835166);
            num16 = num18 ^ (int) num17 * 1122574687;
            continue;
          case 1:
            goto label_62;
          case 2:
            int num19;
            num16 = num19 = chessPiece == null ? -1278611654 : (num19 = -1523235997);
            continue;
          case 3:
            PlaySound.Play();
            num16 = -1916452738;
            continue;
          case 4:
            num16 = (int) num17 * -258836368 ^ 1153412035;
            continue;
          case 5:
            num16 = (int) num17 * -525828245 ^ -1222840454;
            continue;
          case 6:
            flag9 = true;
            num16 = (int) num17 * 218614178 ^ -22123392;
            continue;
          case 7:
            this.Board.BlackCanCastleQueenSide = true;
            num16 = (int) num17 * -1426527806 ^ 1271399109;
            continue;
          case 8:
            flag12 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * 2031758728 ^ -281801652;
            continue;
          case 9:
            num16 = (int) num17 * 1417283503 ^ -1519475246;
            continue;
          case 10:
            num16 = (int) num17 * -1144549329 ^ 743575099;
            continue;
          case 11:
            rank = chessPiece.Current.Rank;
            num16 = (int) num17 * -1293284965 ^ -197271840;
            continue;
          case 12:
            int num20 = flag11 ? -412971176 : (num20 = -1278808425);
            num16 = num20 ^ (int) num17 * -1660627278;
            continue;
          case 13:
            num16 = (int) num17 * 108012605 ^ -1663129076;
            continue;
          case 14:
            flag8 = flag1;
            num16 = (int) num17 * 1041406209 ^ 2105303464;
            continue;
          case 15:
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * 1450180674 ^ -1682286577;
            continue;
          case 16:
            goto label_60;
          case 17:
            this.SwitchPlayer();
            num16 = (int) num17 * 737704676 ^ -1881385047;
            continue;
          case 18:
            num16 = -2029069687;
            continue;
          case 19:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -2112014773 ^ -496622823;
            continue;
          case 20:
            int num21 = !flag10 ? 76561580 : (num21 = 432136711);
            num16 = num21 ^ (int) num17 * 853723350;
            continue;
          case 21:
            from.Piece = this.Piece;
            num16 = (int) num17 * -1460377201 ^ -581458493;
            continue;
          case 22:
            this.Board.lights.FindAllMoves();
            num16 = -335899623;
            continue;
          case 23:
            square1.Piece = chessPiece;
            num16 = (int) num17 * 1003552040 ^ -263068758;
            continue;
          case 24:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = -702771346;
            continue;
          case 25:
            this.msg = \u003CModule\u003E.\u200C‎⁯⁬⁬​⁭‬⁯‎⁬⁯‎⁬‪‎‎‬⁮​​‎‍⁬‎‍​‮⁬‫‪⁮⁬‏⁫‫‪‌‭‏‮<string>(863083396U);
            num16 = (int) num17 * 333891445 ^ 816117124;
            continue;
          case 26:
            goto label_112;
          case 27:
            num16 = (int) num17 * -1415310297 ^ 1444953399;
            continue;
          case 28:
            num16 = (int) num17 * -1471033007 ^ -172640582;
            continue;
          case 29:
            flag10 = flag1;
            num16 = (int) num17 * -1098027962 ^ 1448034702;
            continue;
          case 30:
            int num22;
            num16 = num22 = flag9 ? -712906928 : (num22 = -209860954);
            continue;
          case 31:
            num16 = (int) num17 * 1420673665 ^ -1811553898;
            continue;
          case 32:
            num16 = (int) num17 * 766713353 ^ 1495856924;
            continue;
          case 33:
            num16 = (int) num17 * 972742836 ^ -267708967;
            continue;
          case 34:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * 721146107 ^ -762502515;
            continue;
          case 35:
            this.msg = \u003CModule\u003E.\u202D‮​‎‎⁬⁭‮⁪‫​⁫‮‎‪⁭⁫‪⁯‫‬‫‎‮‎‪⁪‪⁫⁪‪‭‫‮⁯‫‮‭‪⁭‮<string>(1346414962U);
            num16 = -1773220588;
            continue;
          case 36:
            this.Board.WhiteCanCastleQueenSide = true;
            num16 = (int) num17 * 1761422846 ^ -1623335474;
            continue;
          case 37:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -292876443 ^ 5011833;
            continue;
          case 38:
            int num23 = !isOnCheck ? 1272054991 : (num23 = 1451815805);
            num16 = num23 ^ (int) num17 * -1110886096;
            continue;
          case 39:
            file = chessPiece.Current.File;
            num16 = (int) num17 * -487990922 ^ 983674149;
            continue;
          case 40:
            num16 = (int) num17 * 843775083 ^ -1244624921;
            continue;
          case 41:
            flag11 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num16 = (int) num17 * -1451743940 ^ -76775436;
            continue;
          case 42:
            int num24 = !flag8 ? 1794376579 : (num24 = 40217959);
            num16 = num24 ^ (int) num17 * -1420789902;
            continue;
          case 43:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = -635728841;
            continue;
          case 44:
            num16 = (int) num17 * 1162060727 ^ -612371843;
            continue;
          case 45:
            num16 = (int) num17 * 1251889091 ^ -330592789;
            continue;
          case 46:
            square2 = this.Board[0, rank];
            break;
          case 47:
            num16 = (int) num17 * 1667741427 ^ 1652626974;
            continue;
          case 48:
            num16 = -1058481681;
            continue;
          case 49:
            isOnCheck = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * 326305867 ^ 1317152449;
            continue;
          case 50:
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * -1281435646 ^ 1863105464;
            continue;
          case 51:
            num16 = -449725778;
            continue;
          case 52:
            num16 = (int) num17 * -2045423733 ^ 98367806;
            continue;
          case 53:
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * 1836279096 ^ 1514719226;
            continue;
          case 54:
            flag9 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -961091780 ^ -815465014;
            continue;
          case 55:
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * -1895249459 ^ -1050964260;
            continue;
          default:
            goto label_56;
        }
        square1 = square2;
        num16 = -114906101;
      }
label_62:
      return;
label_56:
      return;
label_112:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      num16 = -353499635;
      goto label_61;
    }

    private ChessPiece handleBlackCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = -1448099541;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        Square square1;
        Square square2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -308968509)) % 35U)
        {
          case 0:
            num1 = -1724917289;
            continue;
          case 1:
            num1 = (int) num2 * -1392747349 ^ -178063574;
            continue;
          case 2:
            num1 = -1938176493;
            continue;
          case 3:
            num1 = (int) num2 * -2044737869 ^ 1438187736;
            continue;
          case 5:
            int num5 = flag2 ? -1664804372 : (num5 = -656131255);
            num1 = num5 ^ (int) num2 * 42817297;
            continue;
          case 6:
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * -277895056 ^ 988976794;
            continue;
          case 7:
            flag1 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 1094968469 ^ 245127114;
            continue;
          case 8:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 1338081732 ^ 11726343;
              continue;
            }
            num3 = 1;
            break;
          case 9:
            int num6 = !Square.\u200E‬⁫⁪‌‪‌⁮‎‮‮⁫⁮‬⁯‭‍⁭⁯‌‫‪‫‫⁪‮‬⁬‌⁬‏‌‫⁮‍‮‌⁮‎‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u206B⁬‪⁪‎⁭⁪⁯‎⁪⁬⁪⁬‭‎⁮​⁯​‍⁫⁭⁪⁬⁯⁪‭​⁮‪⁮‏‪‮‪​‭⁫‭‪‮<string>(1516337644U)) ? 1455055473 : (num6 = 628790861);
            num1 = num6 ^ (int) num2 * -738385051;
            continue;
          case 10:
            num1 = -448883273;
            continue;
          case 11:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            goto label_40;
          case 12:
            this.Board.BlackCanCastleKingSide = false;
            num1 = -178397440;
            continue;
          case 13:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 1040906746 ^ 474010196;
            continue;
          case 14:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -2008655560 ^ 463054881;
            continue;
          case 15:
            this.Board[0, 7].Piece = (ChessPiece) null;
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * -1656294900 ^ -186931239;
            continue;
          case 16:
            num1 = (int) num2 * 233307198 ^ -1601639233;
            continue;
          case 17:
            num1 = (int) num2 * -1570235130 ^ -831196420;
            continue;
          case 18:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * 1112859492 ^ 75712277;
            continue;
          case 19:
            goto label_1;
          case 20:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * -966184396 ^ 1432928976;
            continue;
          case 21:
            num1 = -752287438;
            continue;
          case 22:
            chessPiece2 = chessPiece1;
            num1 = -1776210836;
            continue;
          case 23:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 24:
            square2 = this.Board[5, 7];
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -1069855348 ^ 614230752;
            continue;
          case 25:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = -297212026;
            continue;
          case 26:
            flag3 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * 1523248571 ^ 601094528;
            continue;
          case 27:
            square1 = this.Board[3, 7];
            num1 = (int) num2 * -382585719 ^ -856416949;
            continue;
          case 28:
            num1 = (int) num2 * 425837935 ^ -1610317712;
            continue;
          case 29:
            if (!this.Board.BlackCanCastleKingSide)
            {
              num1 = (int) num2 * 406068117 ^ -1171238542;
              continue;
            }
            num4 = 1;
            goto label_40;
          case 30:
            square1.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1907294693 ^ 1969620063;
            continue;
          case 31:
            int num7 = flag3 ? -575431112 : (num7 = -1353791952);
            num1 = num7 ^ (int) num2 * 1050509361;
            continue;
          case 32:
            int num8;
            num1 = num8 = this.Piece.Current.File == 6 ? -939071866 : (num8 = -1699219744);
            continue;
          case 33:
            int num9 = flag1 ? -1889922834 : (num9 = -540757648);
            num1 = num9 ^ (int) num2 * -1235457870;
            continue;
          case 34:
            num1 = (int) num2 * 32669522 ^ -42019685;
            continue;
          default:
            goto label_42;
        }
        flag2 = num3 != 0;
        num1 = -1213560711;
        continue;
label_40:
        int num10;
        num1 = num10 = num4 == 0 ? -448883273 : (num10 = -265398468);
      }
label_42:
      return chessPiece2;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = 1400495765;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        ChessPiece chessPiece2;
        bool flag1;
        bool flag2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 958885142)) % 34U)
        {
          case 0:
            num1 = (int) num2 * -669371565 ^ 871059617;
            continue;
          case 1:
            num1 = 1402329752;
            continue;
          case 3:
            num1 = (int) num2 * 350846851 ^ 1261445602;
            continue;
          case 4:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 1709151958;
            continue;
          case 5:
            int num5 = flag2 ? -886805258 : (num5 = -1696743821);
            num1 = num5 ^ (int) num2 * -1774159139;
            continue;
          case 6:
            num1 = 196297019;
            continue;
          case 7:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 1147590766 ^ 49271060;
            continue;
          case 8:
            chessPiece1 = chessPiece2;
            num1 = 231884432;
            continue;
          case 9:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            goto label_21;
          case 10:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -239241828 ^ -1325019445;
            continue;
          case 11:
            square1 = this.Board[3, 0];
            square1.Piece = this.Board[0, 0].Piece;
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1810102646 ^ 1577762586;
            continue;
          case 12:
            num1 = (int) num2 * -1450208830 ^ -789385819;
            continue;
          case 13:
            goto label_1;
          case 14:
            num1 = 1537599988;
            continue;
          case 15:
            int num6 = this.Piece.Current.File != 2 ? -918183673 : (num6 = -38687544);
            num1 = num6 ^ (int) num2 * 501404196;
            continue;
          case 16:
            num1 = (int) num2 * -2016539578 ^ 631605776;
            continue;
          case 17:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * 1814177132 ^ -531668717;
            continue;
          case 18:
            num1 = 1979623349;
            continue;
          case 19:
            int num7;
            num1 = num7 = this.Piece.Current.File != 6 ? 1698645350 : (num7 = 1499460010);
            continue;
          case 20:
            num1 = (int) num2 * 273844761 ^ -682471284;
            continue;
          case 21:
            flag2 = Square.\u200E‬⁫⁪‌‪‌⁮‎‮‮⁫⁮‬⁯‭‍⁭⁯‌‫‪‫‫⁪‮‬⁬‌⁬‏‌‫⁮‍‮‌⁮‎‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u202B‪​⁬⁪‏⁯⁮‍⁫⁯⁮‏​⁭‮⁫‮‫‬‪‌‮‫⁯‏‭‌‪‏⁬‎⁭⁬‎‬⁭‎⁭⁯‮<string>(2703542468U));
            num1 = (int) num2 * -2085719920 ^ 1841570363;
            continue;
          case 22:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 23:
            if (this.Board.WhiteCanCastleKingSide)
            {
              num3 = 1;
              goto label_21;
            }
            else
            {
              num1 = (int) num2 * -1626029389 ^ 410333314;
              continue;
            }
          case 24:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 162122495 ^ 2088771789;
            continue;
          case 25:
            num1 = (int) num2 * 1824073573 ^ -632789438;
            continue;
          case 26:
            square2 = this.Board[5, 0];
            square2.Piece = this.Board[7, 0].Piece;
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -295350429 ^ -91666507;
            continue;
          case 27:
            int num8 = flag1 ? -1201747878 : (num8 = -1155894508);
            num1 = num8 ^ (int) num2 * 105941216;
            continue;
          case 28:
            if (this.Piece.Kind == Pieces.King)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * 845468812 ^ 1424655506;
            continue;
          case 29:
            num1 = (int) num2 * -134225136 ^ 1642443267;
            continue;
          case 30:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = 1124778028;
            continue;
          case 31:
            int num9 = this.Piece.Kind != Pieces.Rook ? -1172994540 : (num9 = -1537521978);
            num1 = num9 ^ (int) num2 * -1070895168;
            continue;
          case 32:
            num1 = (int) num2 * -1918386349 ^ 1988603310;
            continue;
          case 33:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 416505694 ^ -1795120808;
            continue;
          default:
            goto label_41;
        }
        int num10;
        num1 = num10 = num4 == 0 ? 1402329752 : (num10 = 497059077);
        continue;
label_21:
        flag1 = num3 != 0;
        num1 = 775075815;
      }
label_41:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove() => Square.\u202B‎​‏‮‪⁫⁫‮‌‪‪⁪‏‍⁮⁬‍‍⁪‫‎‪⁬‭⁮⁮⁭‏​⁫‬⁪⁯⁭‌⁯‭⁯‌‮((Control) this.panel1, (Image) null);

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = 1080506851;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 164225341)) % 9U)
        {
          case 0:
            goto label_3;
          case 1:
            if (disposing)
            {
              num1 = (int) num2 * 36081084 ^ 1696463788;
              continue;
            }
            num3 = 0;
            break;
          case 2:
            num3 = this.components != null ? 1 : 0;
            break;
          case 3:
            int num4 = !flag ? -404689072 : (num4 = -1868178877);
            num1 = num4 ^ (int) num2 * 2017836651;
            continue;
          case 4:
            base.Dispose(disposing);
            num1 = 1730561573;
            continue;
          case 5:
            Square.\u202D‍‌‎‮⁬‍‮‭‭‬‎⁮⁪‫‎⁮‏‮​‪‌⁫⁭‎⁪‪⁪‍‫‌⁫‌⁫⁫‎⁪‫⁮‎‮((IDisposable) this.components);
            num1 = (int) num2 * -878976929 ^ -307180432;
            continue;
          case 6:
            num1 = (int) num2 * 1411049481 ^ -1304164144;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * 1367977058 ^ -732959345;
            continue;
          default:
            goto label_14;
        }
        flag = num3 != 0;
        num1 = 800508118;
      }
label_3:
      return;
label_14:;
    }

    private void InitializeComponent()
    {
      Square.\u202E⁯‎‍‏‎‮⁫‮‫⁯‏‎⁭⁪​⁭⁪‮‌⁮⁬‎‬‏‎⁯⁭‎⁬‌​⁭​‬‌⁬⁪‍⁬‮((Control) this);
label_1:
      int num1 = 1092661611;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1950454090)) % 8U)
        {
          case 0:
            Square.\u200B‏⁪‌⁬⁯‏⁪​‫‬​⁫⁮‍‏‍‌‌⁬‌⁫⁫‏‎‌‏⁮⁭⁫‎‬‍​‮‎⁮⁯⁪⁫‮((ContainerControl) this, AutoScaleMode.Font);
            Square.\u206E‫⁯‏‫‫⁮​‌‭​⁫‬‭‏‪‪⁫‬⁬⁭‭‬⁭​⁯‎⁮‎​⁮‫⁮‎​⁬‪⁮‬⁯‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 944006954 ^ 1346931609;
            continue;
          case 1:
            Square.\u206C‏‫‏‏‫⁬⁯⁮‫⁭⁯‮‪‮‪⁫⁫‎⁬‏⁪⁪⁫​‏⁮⁫‍‮‌​‮‫‌‬⁪​⁭‌‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -867896490 ^ -2053792180;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1731556279 ^ 1111923512;
            continue;
          case 4:
            Square.\u200B⁫‭‬‪​⁫⁭‍‫⁪⁭‌⁬⁮⁪⁭⁯‪‎⁯‍‬⁯⁮⁭⁬⁪⁬‬⁬⁪‪‍⁮‮​‎‏‏‮((Control) this, false);
            num1 = (int) num2 * 633962869 ^ 674790200;
            continue;
          case 5:
            Square.\u202B‫⁯‍‎⁪‏‏⁮‮‬⁪​⁬‫⁪‮⁭‎⁬⁪‪‏⁯‌‭⁮⁫‍​​⁭‮‭⁯⁭‍⁫⁬‍‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -1777670308 ^ -480831726;
            continue;
          case 6:
            goto label_3;
          case 7:
            Square.\u206C‭‪‌‍‏⁯⁬‏‌⁬‏‍‎‪‍‭​⁪⁬‫⁬​‍⁬⁫⁬‪⁮⁯⁫‭⁮⁮⁫‫⁬‪‍‮((Control) this, new Padding(0));
            this.Name = \u003CModule\u003E.\u200F⁫​⁫⁫⁯⁭‭‮⁯‍⁭⁮‪⁭‍‫‫⁪⁬⁮‮‫⁫‏⁮‬‬⁫‬‭‍⁬‫⁮‌⁬⁫⁮⁮‮<string>(3427087178U);
            num1 = (int) num2 * -2068158344 ^ -2030187529;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    static Delegate \u206B​‎‪⁫‪‌‏‮⁫‎⁭⁯⁭​⁯⁫‌‬‭⁬⁪‮‍‬‎‫‬⁪⁭‍‏‭⁭⁫‮⁪‭⁬‏‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206A‭⁯‎‍⁪‍‬⁮​‌⁪‎‫‌‮‍⁮‮‪⁯⁮‭‏⁫‮‎‮‬⁮​⁫⁬⁬⁭‌⁬‪‎⁪‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206B‭‌⁭⁫⁯‪⁭‏⁯‭‎‎‬‍‏⁬⁯⁫‫‪⁫‏‎⁮‬⁯‪‮​⁯‫‏‮‫⁪⁮⁬⁬‭‮([In] object obj0) => obj0.ToString();

    static string \u202B⁯⁬⁯‏⁪⁯‫​⁮‬⁫‎‍‮⁪‪‏‫⁫‪‮‏‫‎‍‭​⁫‭⁯​‎⁪⁯‬‌‬‮⁯‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u200C‬‭‬‭⁫‍‮‎‏‏⁬‮⁪⁭‌‬⁫‭⁪‬‬⁮‫​⁫⁫‍‏⁬​‬⁪‎⁭​‍‮‏‭‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u200D‍⁪‪⁮‪⁫⁭⁭‬‪⁪‌‫‎‎⁮‏‏​‌​​⁪‍⁭⁯⁬‮‎⁭‬‏‮‮‎⁮⁬‮⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206C⁬‫‍⁯‬‌‌​⁪‌‮‮‪‮​‏‮‎‍‮⁫‪⁮⁫‌‪‌‍⁭⁬⁪⁪⁫‮⁯‍‌‌‌‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u202E⁪‫‭⁭⁪‭⁭​‪‫‌​⁪‫‎​‌⁪⁫⁮‫‪‬‏‎⁪⁭‍‬⁪‮‌⁪⁪⁯‬‏‪‪‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u202A​⁭‭‎‌‮‍‏⁪‍⁯‫⁭⁫‮⁭‍​​​‬⁬⁯⁯‪⁬‪‎‎⁬‌⁬⁬​⁮​⁬‮⁯‮() => Cursor.Position;

    static DialogResult \u202A‫​⁫‬⁮‏⁪‮‫‏⁮⁭‭⁭‏‬‎‌⁯‌‬‫‭⁯⁯​⁫‏‪‫‏‬⁭‬‭‏⁯‭‎‮([In] Form obj0) => obj0.ShowDialog();

    static void \u202D‍‌‎‮⁬‍‮‭‭‬‎⁮⁪‫‎⁮‏‮​‪‌⁫⁭‎⁪‪⁪‍‫‌⁫‌⁫⁫‎⁪‫⁮‎‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200E‬⁫⁪‌‪‌⁮‎‮‮⁫⁮‬⁯‭‍⁭⁯‌‫‪‫‫⁪‮‬⁬‌⁬‏‌‫⁮‍‮‌⁮‎‏‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u202B‎​‏‮‪⁫⁫‮‌‪‪⁪‏‍⁮⁬‍‍⁪‫‎‪⁬‭⁮⁮⁭‏​⁫‬⁪⁯⁭‌⁯‭⁯‌‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202E⁯‎‍‏‎‮⁫‮‫⁯‏‎⁭⁪​⁭⁪‮‌⁮⁬‎‬‏‎⁯⁭‎⁬‌​⁭​‬‌⁬⁪‍⁬‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206C‏‫‏‏‫⁬⁯⁮‫⁭⁯‮‪‮‪⁫⁫‎⁬‏⁪⁪⁫​‏⁮⁫‍‮‌​‮‫‌‬⁪​⁭‌‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200B‏⁪‌⁬⁯‏⁪​‫‬​⁫⁮‍‏‍‌‌⁬‌⁫⁫‏‎‌‏⁮⁭⁫‎‬‍​‮‎⁮⁯⁪⁫‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u206E‫⁯‏‫‫⁮​‌‭​⁫‬‭‏‪‪⁫‬⁬⁭‭‬⁭​⁯‎⁮‎​⁮‫⁮‎​⁬‪⁮‬⁯‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206C‭‪‌‍‏⁯⁬‏‌⁬‏‍‎‪‍‭​⁪⁬‫⁬​‍⁬⁫⁬‪⁮⁯⁫‭⁮⁮⁫‫⁬‪‍‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202B‫⁯‍‎⁪‏‏⁮‮‬⁪​⁬‫⁪‮⁭‎⁬⁪‪‏⁯‌‭⁮⁫‍​​⁭‮‭⁯⁭‍⁫⁬‍‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200B⁫‭‬‪​⁫⁭‍‫⁪⁭‌⁬⁮⁪⁭⁯‪‎⁯‍‬⁯⁮⁭⁬⁪⁬‬⁬⁪‪‍⁮‮​‎‏‏‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
