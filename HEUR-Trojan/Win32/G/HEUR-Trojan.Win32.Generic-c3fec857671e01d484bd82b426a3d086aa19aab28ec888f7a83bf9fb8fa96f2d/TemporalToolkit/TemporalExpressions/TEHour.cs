// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEHour
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEHour : TemporalExpression
  {
    public int Start { get; set; }

    public int? End { get; set; }

    public TEHour(int hour)
    {
      this.Start = hour;
      this.End = new int?();
    }

    public TEHour(int startHour, int endHour)
    {
      this.Start = startHour;
      this.End = new int?(endHour);
    }

    public override bool Includes(DateTime aDate)
    {
      if (!this.End.HasValue)
        goto label_9;
label_1:
      int num1 = -1250370218;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -272786299)) % 12U)
        {
          case 0:
            if (aDate.Hour >= this.Start)
            {
              num3 = 1;
              break;
            }
            num1 = -1067642382;
            continue;
          case 2:
            flag2 = flag1;
            num1 = -1032008798;
            continue;
          case 3:
            num3 = aDate.Hour <= this.End.Value ? 1 : 0;
            break;
          case 4:
            goto label_1;
          case 5:
            goto label_9;
          case 6:
            num1 = -31381329;
            continue;
          case 7:
            num1 = (int) num2 * 1489624872 ^ -1825407424;
            continue;
          case 8:
            num4 = aDate.Hour <= this.End.Value ? 1 : 0;
            goto label_16;
          case 9:
            if (aDate.Hour >= this.Start)
            {
              num1 = (int) num2 * 1894362655 ^ 1589848026;
              continue;
            }
            num4 = 0;
            goto label_16;
          case 10:
            int num5 = !flag3 ? -1615814455 : (num5 = -1277371452);
            num1 = num5 ^ (int) num2 * 1878944938;
            continue;
          case 11:
            flag3 = this.End.Value > this.Start;
            num1 = (int) num2 * 696292101 ^ 839965120;
            continue;
          default:
            goto label_19;
        }
        flag1 = num3 != 0;
        num1 = -631563621;
        continue;
label_16:
        flag1 = num4 != 0;
        num1 = -631563621;
      }
label_19:
      return flag2;
label_9:
      flag1 = this.Start == aDate.Hour;
      num1 = -31381329;
      goto label_2;
    }
  }
}
