// Decompiled with JetBrains decompiler
// Type: A.cdb8d91e430d4f6b7ff8b34efb1ef2573
// Assembly: qfpxK, Version=2.5.4.7, Culture=neutral, PublicKeyToken=null
// MVID: 361ECBAB-70B9-4DF3-85CB-6EE9889776D8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.cavk-847dea3068a77ef664bb3e6a572fbc090428c048080fb7d8d1c6a0541b13ec59.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace A
{
  internal class cdb8d91e430d4f6b7ff8b34efb1ef2573
  {
    private static readonly int ca441cdf3d5b4a36e69c33c3cf845ec0b;
    private static readonly int c9b5b5fec27b377a58411f9ed56b2b5d5;
    private static readonly int c6727710e021b873fff9b280f18fb8dc4;
    private static readonly int cdf0fcb10df727debd4bc0ee022868534;
    private static readonly int cb79adead62142238fcc165c53fe84088;
    private static readonly int c2b02e83fb2e28388dc22c4dd57311414;
    private static readonly int c0d2c322ea079fdc3c776d872e2bd6164;
    private static readonly int c5cac3493c9f5e0821a12c44c4da9e953;
    private static readonly int c417a08eacb8772e0719ff69f6666a6ce;
    private static readonly int cc9237c0a3ef8af42e2c758f8e093baec;
    private static readonly int c74346adf872f5ccbf5687ceabab31df2;
    private static readonly int cfcb883566827787a82012b03aed11e1d;
    private static readonly int cf5281827a2883dafed1981682817c267;
    private static readonly int cea8cd0dd477a27997a216abb4da71eab;
    private static readonly ModuleHandle c59492339d16cf65678469a44c7a81966;

    static cdb8d91e430d4f6b7ff8b34efb1ef2573()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
label_1:
      switch (3)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (cdb8d91e430d4f6b7ff8b34efb1ef2573.\u002Ecctor);
          }
          cdb8d91e430d4f6b7ff8b34efb1ef2573.c59492339d16cf65678469a44c7a81966 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          break;
      }
    }

    private int cd711c141b85f413c76f640726fd3df0b => 1;

    public static void ce84bec81c32dcd2e38695a350558bde1(
      int cf482c59f73393f0e875e2b06378f9431,
      int c1ae9860d2712f5fe29e775e314fbd526,
      int cefac8362c0ca9033ba345f96e412b830)
    {
      Type typeFromHandle;
      MethodInfo method;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(cdb8d91e430d4f6b7ff8b34efb1ef2573.c59492339d16cf65678469a44c7a81966.ResolveTypeHandle(cf482c59f73393f0e875e2b06378f9431));
        method = cefac8362c0ca9033ba345f96e412b830 != 16777215 ? (MethodInfo) (object) MethodBase.GetMethodFromHandle(cdb8d91e430d4f6b7ff8b34efb1ef2573.c59492339d16cf65678469a44c7a81966.ResolveMethodHandle(c1ae9860d2712f5fe29e775e314fbd526), cdb8d91e430d4f6b7ff8b34efb1ef2573.c59492339d16cf65678469a44c7a81966.ResolveTypeHandle(cefac8362c0ca9033ba345f96e412b830)) : (MethodInfo) (object) MethodBase.GetMethodFromHandle(cdb8d91e430d4f6b7ff8b34efb1ef2573.c59492339d16cf65678469a44c7a81966.ResolveMethodHandle(c1ae9860d2712f5fe29e775e314fbd526));
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          Delegate @delegate;
          if (method.IsStatic)
          {
label_5:
            switch (6)
            {
              case 0:
                goto label_5;
              default:
                if (false)
                {
                  // ISSUE: method reference
                  RuntimeMethodHandle runtimeMethodHandle = __methodref (cdb8d91e430d4f6b7ff8b34efb1ef2573.ce84bec81c32dcd2e38695a350558bde1);
                }
                @delegate = Delegate.CreateDelegate(field.FieldType, method);
                break;
            }
          }
          else
          {
            ParameterInfo[] parameters = method.GetParameters();
            int length = parameters.Length + 1;
            Type[] parameterTypes = new Type[length];
            if (method.DeclaringType.IsValueType)
            {
label_10:
              switch (3)
              {
                case 0:
                  goto label_10;
                default:
                  parameterTypes[0] = method.DeclaringType.MakeByRefType();
                  break;
              }
            }
            else
              parameterTypes[0] = typeof (object);
            for (int index = 1; index < length; ++index)
              parameterTypes[index] = parameters[index - 1].ParameterType;
label_16:
            switch (5)
            {
              case 0:
                goto label_16;
              default:
                DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, method.ReturnType, parameterTypes, typeFromHandle, true);
                ILGenerator ilGenerator1 = dynamicMethod.GetILGenerator();
                ilGenerator1.Emit(OpCodes.Ldarg_0);
                if (length > 1)
                {
label_18:
                  switch (3)
                  {
                    case 0:
                      goto label_18;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_1);
                      break;
                  }
                }
                if (length > 2)
                {
label_21:
                  switch (2)
                  {
                    case 0:
                      goto label_21;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_2);
                      break;
                  }
                }
                if (length > 3)
                  ilGenerator1.Emit(OpCodes.Ldarg_3);
                if (length > 4)
                {
label_26:
                  switch (3)
                  {
                    case 0:
                      goto label_26;
                    default:
                      for (int index = 4; index < length; ++index)
                        ilGenerator1.Emit(OpCodes.Ldarg_S, index);
label_30:
                      switch (7)
                      {
                        case 0:
                          goto label_30;
                      }
                      break;
                  }
                }
                ILGenerator ilGenerator2 = ilGenerator1;
                OpCode opcode;
                if (!field.IsFamilyOrAssembly)
                {
label_32:
                  switch (2)
                  {
                    case 0:
                      goto label_32;
                    default:
                      opcode = OpCodes.Call;
                      break;
                  }
                }
                else
                  opcode = OpCodes.Callvirt;
                MethodInfo meth = method;
                ilGenerator2.Emit(opcode, meth);
                ilGenerator1.Emit(OpCodes.Ret);
                @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
                break;
            }
          }
          field.SetValue((object) null, (object) @delegate);
        }
        catch (Exception ex)
        {
        }
      }
label_40:
      switch (6)
      {
        case 0:
          goto label_40;
      }
    }
  }
}
