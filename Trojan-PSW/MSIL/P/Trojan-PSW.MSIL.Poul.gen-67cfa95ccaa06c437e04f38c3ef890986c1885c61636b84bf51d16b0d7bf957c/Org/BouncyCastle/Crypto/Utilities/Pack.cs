// Decompiled with JetBrains decompiler
// Type: Org.BouncyCastle.Crypto.Utilities.Pack
// Assembly: Poullight, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A9555FC6-4E86-4D22-9A29-AD3955B2BC52
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Trojan-PSW.MSIL.Poul.gen-67cfa95ccaa06c437e04f38c3ef890986c1885c61636b84bf51d16b0d7bf957c.exe

namespace Org.BouncyCastle.Crypto.Utilities
{
  internal sealed class Pack
  {
    private Pack()
    {
    }

    internal static void UInt32_To_BE(uint n, byte[] bs, int off)
    {
      bs[off] = (byte) (n >> 24);
      bs[off + 1] = (byte) (n >> 16);
      bs[off + 2] = (byte) (n >> 8);
      bs[off + 3] = (byte) n;
    }

    internal static void UInt32_To_BE(uint[] ns, byte[] bs, int off)
    {
      for (int index = 0; index < ns.Length; ++index)
      {
        Pack.UInt32_To_BE(ns[index], bs, off);
        off += 4;
      }
    }

    internal static uint BE_To_UInt32(byte[] bs, int off) => (uint) ((int) bs[off] << 24 | (int) bs[off + 1] << 16 | (int) bs[off + 2] << 8) | (uint) bs[off + 3];

    internal static void BE_To_UInt32(byte[] bs, int off, uint[] ns)
    {
      for (int index = 0; index < ns.Length; ++index)
      {
        ns[index] = Pack.BE_To_UInt32(bs, off);
        off += 4;
      }
    }

    internal static void UInt64_To_BE(ulong n, byte[] bs, int off)
    {
      Pack.UInt32_To_BE((uint) (n >> 32), bs, off);
      Pack.UInt32_To_BE((uint) n, bs, off + 4);
    }

    internal static void UInt32_To_LE(uint n, byte[] bs)
    {
      bs[0] = (byte) n;
      bs[1] = (byte) (n >> 8);
      bs[2] = (byte) (n >> 16);
      bs[3] = (byte) (n >> 24);
    }

    internal static void UInt32_To_LE(uint n, byte[] bs, int off)
    {
      bs[off] = (byte) n;
      bs[off + 1] = (byte) (n >> 8);
      bs[off + 2] = (byte) (n >> 16);
      bs[off + 3] = (byte) (n >> 24);
    }

    internal static uint LE_To_UInt32(byte[] bs, int off) => (uint) ((int) bs[off] | (int) bs[off + 1] << 8 | (int) bs[off + 2] << 16 | (int) bs[off + 3] << 24);

    internal static void UInt64_To_LE(ulong n, byte[] bs)
    {
      Pack.UInt32_To_LE((uint) n, bs);
      Pack.UInt32_To_LE((uint) (n >> 32), bs, 4);
    }
  }
}
