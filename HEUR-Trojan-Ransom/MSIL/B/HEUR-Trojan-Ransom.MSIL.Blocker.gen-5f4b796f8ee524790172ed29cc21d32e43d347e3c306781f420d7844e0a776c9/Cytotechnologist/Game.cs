// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: LoadHi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 984E9D2E-DA60-4984-B27B-15EC3C1BAA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5f4b796f8ee524790172ed29cc21d32e43d347e3c306781f420d7844e0a776c9.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 1289386164;
      JSONNode jsonNode;
      int count;
      int aIndex;
      int index;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1614412880)) % 19U)
        {
          case 0:
            jsonNode = json["players"];
            num1 = (int) num2 * 1222777906 ^ -970514346;
            continue;
          case 1:
            num1 = (int) num2 * -1813735850 ^ 1381955850;
            continue;
          case 2:
            flag1 = index < count;
            num1 = 987534470;
            continue;
          case 3:
            this._dice = new Dice();
            num1 = (int) num2 * -915048180 ^ 42960585;
            continue;
          case 4:
            this._playerStates[index] = new PlayerState();
            num1 = 1934192592;
            continue;
          case 5:
            count = jsonNode.Count;
            num1 = (int) num2 * -1130129197 ^ -1169675051;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num3 = !flag2 ? 2145500688 : (num3 = 1376846978);
            num1 = num3 ^ (int) num2 * -1637324061;
            continue;
          case 8:
            flag2 = aIndex < count;
            num1 = 408661727;
            continue;
          case 9:
            this._buffer = buffer;
            num1 = (int) num2 * 836705607 ^ -878030463;
            continue;
          case 10:
            this.Players = new Player[count];
            num1 = (int) num2 * -667981036 ^ 2052740902;
            continue;
          case 11:
            goto label_3;
          case 12:
            this._random = Game.\u200C⁪‍‬⁪⁬‌​⁬‮‍‎‎⁭‭‌⁯⁪⁬‏‭‏⁬​⁫‮‏‏⁬‏‍⁫⁪​⁯⁬‪‪‬⁬‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * 707022126 ^ -1114096086;
            continue;
          case 13:
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -443205370 ^ -612856853;
            continue;
          case 14:
            aIndex = 0;
            num1 = (int) num2 * 919310665 ^ 294308310;
            continue;
          case 15:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 1218582951 ^ 1609812762;
            continue;
          case 16:
            ++index;
            num1 = (int) num2 * 1498074065 ^ 266410081;
            continue;
          case 17:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = 710433778;
            continue;
          case 18:
            int num4 = !flag1 ? -997397494 : (num4 = -118312769);
            num1 = num4 ^ (int) num2 * 916990250;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1041786291;
        int index;
        PlayerState[] playerStates;
        PlayerState playerState;
        bool finished1;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 68898611)) % 13U)
          {
            case 0:
              finished2 = false;
              num1 = (int) num2 * 1820688006 ^ -98590156;
              continue;
            case 1:
              finished1 = this._finished;
              num1 = (int) num2 * 1271326018 ^ 252420209;
              continue;
            case 2:
              finished2 = true;
              num1 = (int) num2 * -1911538829 ^ 1898169792;
              continue;
            case 3:
              ++index;
              num1 = 1168881245;
              continue;
            case 4:
              num1 = (int) num2 * -958939001 ^ 95699646;
              continue;
            case 5:
              goto label_1;
            case 6:
              int num3;
              num1 = num3 = index >= playerStates.Length ? 133975878 : (num3 = 172257858);
              continue;
            case 7:
              finished2 = true;
              num1 = (int) num2 * -981656762 ^ -310340670;
              continue;
            case 8:
              int num4 = playerState.State != State.Playing ? 1432738441 : (num4 = 836077651);
              num1 = num4 ^ (int) num2 * -66504902;
              continue;
            case 9:
              playerStates = this._playerStates;
              index = 0;
              num1 = 575554806;
              continue;
            case 11:
              int num5 = finished1 ? -1729721781 : (num5 = -2110610791);
              num1 = num5 ^ (int) num2 * -1420448778;
              continue;
            case 12:
              playerState = playerStates[index];
              num1 = 1578145133;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
      this.Winners.Clear();
label_1:
      int num1 = 1114046260;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1185314097)) % 10U)
        {
          case 0:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 299644401 ^ -1758726149;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -334688335 ^ 1162133692;
            continue;
          case 4:
            this.Losers.Clear();
            num1 = (int) num2 * -2085325384 ^ 454894640;
            continue;
          case 5:
            this._currentTurn = 0;
            num1 = (int) num2 * 1390974251 ^ 1820930081;
            continue;
          case 6:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 819837572 ^ 142327736;
            continue;
          case 7:
            this._finished = false;
            num1 = (int) num2 * -1962038060 ^ 2074308429;
            continue;
          case 8:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -499259773 ^ -355477112;
            continue;
          case 9:
            num1 = (int) num2 * -423307485 ^ -828410670;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 425307854;
      Player player;
      int planningCardsCount;
      int index;
      int num2;
      bool flag;
      PlayerState playerState;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 284994309)) % 29U)
        {
          case 0:
            num1 = (int) num3 * -741380482 ^ 2034942271;
            continue;
          case 1:
            num1 = 28926919;
            continue;
          case 2:
            int num4 = !flag ? -1856990682 : (num4 = -194275416);
            num1 = num4 ^ (int) num3 * -225362277;
            continue;
          case 3:
            num1 = 24795327;
            continue;
          case 4:
            goto label_1;
          case 5:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -339529813 ^ 1399530686;
            continue;
          case 6:
            num2 = 0;
            num1 = (int) num3 * -737523495 ^ -1812103019;
            continue;
          case 7:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1447401925 ^ -2010424575;
            continue;
          case 8:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -1781415648 ^ 1068542238;
            continue;
          case 9:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1514244733 ^ 750251677;
            continue;
          case 10:
            player = this.Players[index];
            num1 = 1556557259;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * -1616720087 ^ 1048901480;
            continue;
          case 12:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 1532378500 ^ -1135146968;
            continue;
          case 13:
            num1 = (int) num3 * -1414710911 ^ -817665955;
            continue;
          case 14:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1930547640 ^ -1469262302;
            continue;
          case 15:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * 622589035 ^ 1811087419;
            continue;
          case 16:
            int num5 = planningCardsCount != 0 ? -523736538 : (num5 = -1165756290);
            num1 = num5 ^ (int) num3 * -677036585;
            continue;
          case 17:
            index = 0;
            num1 = (int) num3 * -1635337082 ^ -409841890;
            continue;
          case 18:
            int num6 = player.UseOneMorePlanningSprint ? 987299872 : (num6 = 217199993);
            num1 = num6 ^ (int) num3 * 226089621;
            continue;
          case 19:
            num1 = (int) num3 * 1497619796 ^ 1357291989;
            continue;
          case 20:
            goto label_3;
          case 21:
            flag = index < this.Players.Length;
            num1 = 281501530;
            continue;
          case 22:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 52731564;
            continue;
          case 23:
            playerState.Sprint = -1;
            num1 = (int) num3 * -615195278 ^ -2087656360;
            continue;
          case 24:
            playerState.Sprint = 0;
            num1 = (int) num3 * 1217814874 ^ -1352197365;
            continue;
          case 25:
            num2 = 0;
            num1 = 1383178221;
            continue;
          case 26:
            num1 = (int) num3 * 2055413758 ^ 1227805773;
            continue;
          case 27:
            int num7;
            num1 = num7 = num2 <= 0 ? 1786472722 : (num7 = 956021715);
            continue;
          case 28:
            num1 = (int) num3 * 1804827646 ^ -1747161501;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -1844383301;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1992323828)) % 12U)
        {
          case 0:
            flag = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 1237290942 ^ 622316398;
            continue;
          case 1:
            this.PlayerTurn(this._currentPlayer);
            num1 = -2044367797;
            continue;
          case 2:
            goto label_1;
          case 3:
            ++this._currentPlayer;
            num1 = (int) num2 * -1944191514 ^ 1127195774;
            continue;
          case 4:
            num1 = (int) num2 * 1003483960 ^ 157087255;
            continue;
          case 5:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1877245721 ^ -284963789;
            continue;
          case 6:
            int num3 = flag ? 69256247 : (num3 = 1446863079);
            num1 = num3 ^ (int) num2 * -1572024309;
            continue;
          case 7:
            goto label_3;
          case 8:
            int num4 = this._currentTurn > 0 ? -801662867 : (num4 = -421612765);
            num1 = num4 ^ (int) num2 * -746619735;
            continue;
          case 9:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 860904889 ^ 1768163569;
            continue;
          case 10:
            num1 = (int) num2 * -322659315 ^ -1356043785;
            continue;
          case 11:
            this.Print((object) Game.\u200F‍⁮‭‮⁭‭⁯‌⁬​⁮‭⁫‍⁮⁬⁮⁬⁮‬‍​‮⁬⁮‎‮‏‫⁬‍‬⁭⁫‏‍‎‏‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206D‍⁮⁬‍⁫‪‬⁪‭‌⁮‪‬​‬‍‭⁯‭‍⁬‬⁬‪⁫‭‍⁬‬‎‫⁯‌‪‪⁬‭‭⁬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = -2057971710;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = -2125782015;
      while (true)
      {
        uint num2;
        int num3;
        PlayerState playerState1;
        bool flag1;
        int num4;
        int num5;
        int index;
        PlayerState playerState2;
        bool flag2;
        bool flag3;
        bool flag4;
        Card card;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool onlyOneWinner;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1732576773)) % 83U)
        {
          case 0:
            num1 = (int) num2 * 25321667 ^ -1229903418;
            continue;
          case 1:
            int num7 = flag1 ? -713859294 : (num7 = -1439530301);
            num1 = num7 ^ (int) num2 * -1153518185;
            continue;
          case 2:
            num1 = -1052232914;
            continue;
          case 3:
            num1 = (int) num2 * 288875453 ^ -1787024790;
            continue;
          case 4:
            num1 = (int) num2 * -297272691 ^ 1219028060;
            continue;
          case 5:
            int num8 = flag9 ? -218564582 : (num8 = -1273939107);
            num1 = num8 ^ (int) num2 * 1628944645;
            continue;
          case 6:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 1980409813 ^ 1271340243;
            continue;
          case 7:
            num1 = (int) num2 * -107337851 ^ -310132640;
            continue;
          case 8:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 1541669777 ^ -1547311371;
            continue;
          case 9:
            num1 = -848496344;
            continue;
          case 10:
            this.Losers.Add(index);
            num1 = (int) num2 * -1209012965 ^ -979215007;
            continue;
          case 11:
            playerState1.Resources -= num5;
            flag9 = playerState1.Resources < 0;
            num1 = (int) num2 * 495376536 ^ 1065380679;
            continue;
          case 12:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * -1295688771 ^ 1621567665;
            continue;
          case 13:
            goto label_1;
          case 14:
            num1 = -1657938770;
            continue;
          case 15:
            flag6 = true;
            num5 = card.Impact;
            num1 = (int) num2 * -1032863385 ^ 1487018603;
            continue;
          case 16:
            flag11 = num3 < this._playerStates.Length;
            num1 = -1749714093;
            continue;
          case 17:
            playerState2.State = State.Lose;
            flag3 = !this.Losers.Contains(index);
            num1 = -19069639;
            continue;
          case 18:
            card = this.DrawCard();
            flag5 = card.Impact < 0;
            num1 = -1407288746;
            continue;
          case 19:
            flag8 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1975771271;
            continue;
          case 20:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * -1967016541 ^ 2062819706;
            continue;
          case 21:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206D‍⁮⁬‍⁫‪‬⁪‭‌⁮‪‬​‬‍‭⁯‭‍⁬‬⁬‪⁫‭‍⁬‬‎‫⁯‌‪‪⁬‭‭⁬‮("\t", playerState3 != null ? Game.\u206B⁮⁬⁮‮⁫‫‏‌‎‫⁫⁫‍⁭‭‏‭⁬​‍⁪⁮‏⁫​⁭⁯⁫‫‮⁯⁬​⁫⁯‎‫‫‏‮((object) playerState3) : (string) null));
            num1 = -2005362724;
            continue;
          case 22:
            flag7 = flag6;
            num1 = -151823021;
            continue;
          case 23:
            num1 = (int) num2 * 2126549283 ^ 1326900413;
            continue;
          case 24:
            int num9 = !flag2 ? -1862568848 : (num9 = -952590928);
            num1 = num9 ^ (int) num2 * 1053614144;
            continue;
          case 25:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1778139671 ^ -1701113902;
            continue;
          case 26:
            int num10 = playerState1.State == 0 ? -197261501 : (num10 = -473956108);
            num1 = num10 ^ (int) num2 * 1217424406;
            continue;
          case 27:
            flag13 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1361166426 ^ -992450958;
            continue;
          case 28:
            int num11 = !flag13 ? 1266289829 : (num11 = 324630593);
            num1 = num11 ^ (int) num2 * 1318650254;
            continue;
          case 29:
            flag6 = false;
            num1 = -1469989071;
            continue;
          case 30:
            flag12 = index < this._playerStates.Length;
            num1 = -1925435286;
            continue;
          case 31:
            flag2 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 939874760 ^ -2027201807;
            continue;
          case 32:
            num1 = (int) num2 * 1187116936 ^ -136219034;
            continue;
          case 33:
            num1 = (int) num2 * 1152716142 ^ -1670847643;
            continue;
          case 34:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1420625780 ^ 1880047191;
            continue;
          case 35:
            num1 = -5645346;
            continue;
          case 36:
            ++playerState1.Sprint;
            num1 = (int) num2 * 147684249 ^ 1937938168;
            continue;
          case 37:
            goto label_3;
          case 38:
            int num12 = flag8 ? -1200137213 : (num12 = -836194475);
            num1 = num12 ^ (int) num2 * 63823707;
            continue;
          case 39:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag4 ? (object) "ALL " : (object) "", flag5 ? (object) "receives" : (object) "pays", (object) Game.\u202D‪⁮⁮⁮‏⁬‬‬​‭⁮⁫‭‮⁪‮‬‏‫‭‎‭⁪‪‫⁬⁫‍‌‏⁭‭⁮⁭‭⁭‬‎‮‮(num5), flag6 ? (object) "advance" : (object) "stay");
            num1 = -319960531;
            continue;
          case 40:
            int num13 = onlyOneWinner ? -1636276065 : (num13 = -1096331057);
            num1 = num13 ^ (int) num2 * 984682723;
            continue;
          case 41:
            flag6 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1158305189 ^ 2112166566;
            continue;
          case 42:
            num5 = Game.\u202C‌​‬⁬⁫​‌⁮‪‪‎⁭⁫⁭‏‏⁯⁮‎‌‍‭‎‮⁬‮⁭⁪⁬‎⁫⁭‪‫⁫‏⁫‬‌‮(0, num4);
            num1 = (int) num2 * 1935253331 ^ -1599474854;
            continue;
          case 43:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 44:
            int num14 = flag7 ? 2020108460 : (num14 = 1406807367);
            num1 = num14 ^ (int) num2 * 1670304588;
            continue;
          case 45:
            playerState2.Resources -= Game.\u202C‌​‬⁬⁫​‌⁮‪‪‎⁭⁫⁭‏‏⁯⁮‎‌‍‭‎‮⁬‮⁭⁪⁬‎⁫⁭‪‫⁫‏⁫‬‌‮(0, num5 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 543420480 ^ -1065795789;
            continue;
          case 46:
            num1 = -462582789;
            continue;
          case 47:
            int num15 = num3 == playerIndex ? -1616258393 : (num15 = -1041603669);
            num1 = num15 ^ (int) num2 * -1360793040;
            continue;
          case 48:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            flag6 = num4 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -812874821 ^ -555226510;
            continue;
          case 49:
            int num16 = !flag12 ? 1690673385 : (num16 = 552995931);
            num1 = num16 ^ (int) num2 * -1811828065;
            continue;
          case 50:
            num1 = -1627664260;
            continue;
          case 51:
            int num17 = !flag4 ? 449742557 : (num17 = 456971571);
            num1 = num17 ^ (int) num2 * 1731495973;
            continue;
          case 52:
            num1 = (int) num2 * 1488194364 ^ -2063870049;
            continue;
          case 53:
            num1 = (int) num2 * -2092814165 ^ 978917047;
            continue;
          case 54:
            this.Print((object) Game.\u206D‍⁮⁬‍⁫‪‬⁪‭‌⁮‪‬​‬‍‭⁯‭‍⁬‬⁬‪⁫‭‍⁬‬‎‫⁯‌‪‪⁬‭‭⁬‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 836758991 ^ -1132387520;
            continue;
          case 55:
            num1 = (int) num2 * 983519000 ^ 1219727530;
            continue;
          case 56:
            ++num3;
            num1 = -1794875083;
            continue;
          case 57:
            num1 = (int) num2 * 1268039185 ^ -1750217132;
            continue;
          case 58:
            num1 = (int) num2 * 415745043 ^ -1645586389;
            continue;
          case 59:
            num1 = (int) num2 * 2137314951 ^ 588729734;
            continue;
          case 60:
            int num18;
            num1 = num18 = this.Losers.Contains(num3) ? -342672998 : (num18 = -1146588642);
            continue;
          case 61:
            num1 = (int) num2 * -1723271375 ^ -764622071;
            continue;
          case 62:
            this.Losers.Add(num3);
            num1 = (int) num2 * 849669270 ^ 354037172;
            continue;
          case 63:
            num1 = (int) num2 * 1996128580 ^ -2014839891;
            continue;
          case 64:
            num1 = (int) num2 * -1852508641 ^ -261513017;
            continue;
          case 65:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * -1601457811 ^ 1735378521;
            continue;
          case 66:
            num1 = (int) num2 * 1637428776 ^ 2133489356;
            continue;
          case 67:
            num1 = -2136143828;
            continue;
          case 68:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -493443027 ^ -1779684319;
            continue;
          case 69:
            int num19 = !flag11 ? -653849439 : (num19 = -1644908547);
            num1 = num19 ^ (int) num2 * -1130119323;
            continue;
          case 70:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -763372323 ^ -488549630;
              continue;
            }
            num6 = 0;
            break;
          case 71:
            num1 = -585557498;
            continue;
          case 72:
            flag10 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -2031050026;
            continue;
          case 73:
            int num20 = flag10 ? -424053711 : (num20 = -2022957331);
            num1 = num20 ^ (int) num2 * -265908363;
            continue;
          case 74:
            num1 = (int) num2 * 1928855241 ^ -1748770280;
            continue;
          case 75:
            num1 = (int) num2 * 11297555 ^ 711029775;
            continue;
          case 76:
            int num21 = flag3 ? -1059814075 : (num21 = -325869564);
            num1 = num21 ^ (int) num2 * 1588612430;
            continue;
          case 77:
            num1 = (int) num2 * 765949269 ^ -2100092482;
            continue;
          case 78:
            flag1 = playerState1.Sprint < 0;
            num1 = -69578324;
            continue;
          case 79:
            index = 0;
            num1 = (int) num2 * -996958268 ^ 763838212;
            continue;
          case 80:
            num1 = (int) num2 * 710479872 ^ -1130042549;
            continue;
          case 81:
            ++index;
            num1 = -1062663780;
            continue;
          case 82:
            num1 = -900002529;
            continue;
          default:
            goto label_88;
        }
        flag4 = num6 != 0;
        int num22;
        num1 = num22 = flag5 ? -1490535887 : (num22 = -2039142528);
      }
label_3:
      return;
label_88:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 314791188;
      Card card1;
      Card card2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 235061959)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 784878847 ^ 1376679768;
            continue;
          case 2:
            num1 = (int) num2 * -1979983734 ^ 746996633;
            continue;
          case 3:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -785985030 ^ -89211794;
            continue;
          case 4:
            card1 = this._deck[0];
            num1 = 205546728;
            continue;
          case 5:
            this.ShuffleCards();
            num1 = (int) num2 * -1584198048 ^ 1981827117;
            continue;
          case 6:
            num1 = (int) num2 * 1700157690 ^ -726673038;
            continue;
          case 7:
            int num3 = !flag ? -519887190 : (num3 = -1777083945);
            num1 = num3 ^ (int) num2 * -750551679;
            continue;
          case 9:
            card2 = card1;
            num1 = (int) num2 * 474541650 ^ 1387854053;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 831515000;
      bool flag;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 344971188)) % 9U)
        {
          case 0:
            int num3 = !flag ? -751225868 : (num3 = -541720686);
            num1 = num3 ^ (int) num2 * 1722729594;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * -1129641843 ^ -2094595015;
            continue;
          case 2:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206B⁮⁬⁮‮⁫‫‏‌‎‫⁫⁫‍⁭‭‏‭⁬​‍⁪⁮‏⁫​⁭⁯⁫‫‮⁯⁬​⁫⁯‎‫‫‏‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200B‌‬‪‌‍‏‫⁫⁯⁪‌⁭​⁮‪‎⁪⁬‎⁪⁫⁬⁯‮‫‭‭‬⁭‪‬‫⁫‏‭‏‌‮‪‮(strArray);
            ++index;
            num1 = 424791298;
            continue;
          case 3:
            str1 = "";
            num1 = (int) num2 * 1451639722 ^ 1331912819;
            continue;
          case 4:
            num1 = (int) num2 * 516528455 ^ 829771184;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * -1160769450 ^ 977929626;
            continue;
          case 7:
            goto label_1;
          case 8:
            flag = index < this._playerStates.Length;
            num1 = 336851177;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = 210281439;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 656005309)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 951512345 ^ 1773337275;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 1391450841;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 554547248)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Game.\u202C‌⁭⁪⁬‫⁬‍‎‎⁮‪⁭‌⁬‍‌⁫‮⁬⁯⁬⁭‏‏‏‭‏‏‭⁯⁭‪‍‪‬⁪⁮‮‌‮(Game.\u206B⁮⁬⁮‮⁫‫‏‌‎‫⁫⁫‍⁭‭‏‭⁬​‍⁪⁮‏⁫​⁭⁯⁫‫‮⁯⁬​⁫⁯‎‫‫‏‮(text), more);
            num1 = (int) num2 * -1519059744 ^ 599287570;
            continue;
          case 2:
            Game.\u202B⁬⁮⁫‪⁮‌⁯‬⁫​‍⁭⁮‏‪‌‮⁭‏‭‭‌⁭⁪‫‬⁭‎‌‫‭‫‪‬‪⁭⁮‭‎‮(this._buffer, str);
            num1 = (int) num2 * -656708017 ^ -758967563;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u200C⁪‍‬⁪⁬‌​⁬‮‍‎‎⁭‭‌⁯⁪⁬‏‭‏⁬​⁫‮‏‏⁬‏‍⁫⁪​⁯⁬‪‪‬⁬‮([In] int obj0) => new Random(obj0);

    static string \u200F‍⁮‭‮⁭‭⁯‌⁬​⁮‭⁫‍⁮⁬⁮⁬⁮‬‍​‮⁬⁮‎‮‏‫⁬‍‬⁭⁫‏‍‎‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206D‍⁮⁬‍⁫‪‬⁪‭‌⁮‪‬​‬‍‭⁯‭‍⁬‬⁬‪⁫‭‍⁬‬‎‫⁯‌‪‪⁬‭‭⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202C‌​‬⁬⁫​‌⁮‪‪‎⁭⁫⁭‏‏⁯⁮‎‌‍‭‎‮⁬‮⁭⁪⁬‎⁫⁭‪‫⁫‏⁫‬‌‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202D‪⁮⁮⁮‏⁬‬‬​‭⁮⁫‭‮⁪‮‬‏‫‭‎‭⁪‪‫⁬⁫‍‌‏⁭‭⁮⁭‭⁭‬‎‮‮([In] int obj0) => Math.Abs(obj0);

    static string \u206B⁮⁬⁮‮⁫‫‏‌‎‫⁫⁫‍⁭‭‏‭⁬​‍⁪⁮‏⁫​⁭⁯⁫‫‮⁯⁬​⁫⁯‎‫‫‏‮([In] object obj0) => obj0.ToString();

    static string \u200B‌‬‪‌‍‏‫⁫⁯⁪‌⁭​⁮‪‎⁪⁬‎⁪⁫⁬⁯‮‫‭‭‬⁭‪‬‫⁫‏‭‏‌‮‪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202C‌⁭⁪⁬‫⁬‍‎‎⁮‪⁭‌⁬‍‌⁫‮⁬⁯⁬⁭‏‏‏‭‏‏‭⁯⁭‪‍‪‬⁪⁮‮‌‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202B⁬⁮⁫‪⁮‌⁯‬⁫​‍⁭⁮‏‪‌‮⁭‏‭‭‌⁭⁪‫‬⁭‎‌‫‭‫‪‬‪⁭⁮‭‎‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
