// Decompiled with JetBrains decompiler
// Type: ProjNet.Common.Collection
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Composer;
using IRefl.Pools;
using IRefl.Producers;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace ProjNet.Common
{
  public abstract class Collection : Rule, Reg, CodeObjectProducer
  {
    private List<Strategy> specification;
    private double[] system;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Collection(
      string spec,
      string second,
      long rule,
      string vis2,
      string cfg3,
      string setup4)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector(spec, second, rule, vis2, cfg3, setup4);
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int InsertItem() => this.specification.Count;

    public abstract Candidate WriteItem(int position_setup);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal List<Strategy> ForgotProcess() => this.specification;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void CallProcess(List<Strategy> task) => this.specification = task;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Strategy ChangeItem(int asset_length)
    {
      int num1 = 1;
      Strategy strategy;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              if (asset_length < this.specification.Count)
              {
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_2;
            case 2:
            case 4:
              goto label_10;
            case 3:
              goto label_1;
            case 5:
              goto label_12;
            default:
              goto label_7;
          }
        }
label_1:
        int num3 = asset_length < 0 ? 1 : 0;
        goto label_3;
label_2:
        num3 = 1;
label_3:
        if (num3 == 0)
        {
          strategy = this.specification[asset_length];
          num1 = 5;
          continue;
        }
        break;
label_7:
        num1 = 4;
      }
label_10:
      throw new ArgumentException("AxisInfo not available for dimension " + asset_length.ToString((IFormatProvider) CultureInfo.InvariantCulture));
label_12:
      return strategy;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double[] PushItem() => this.system;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CreateProcess(double[] ident) => this.system = ident;

    internal static bool InterruptList() => true;

    internal static bool CallList() => false;
  }
}
