// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.PrecisionTimer
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System;
using System.Runtime.InteropServices;

namespace BlackNET_Builder
{
  internal class PrecisionTimer : IDisposable
  {
    private bool _Enabled;
    private IntPtr Handle;
    private PrecisionTimer.TimerDelegate TimerCallback;

    public bool Enabled => this._Enabled;

    [DllImport("kernel32.dll")]
    private static extern bool CreateTimerQueueTimer(
      ref IntPtr handle,
      IntPtr queue,
      PrecisionTimer.TimerDelegate callback,
      IntPtr state,
      uint dueTime,
      uint period,
      uint flags);

    [DllImport("kernel32.dll")]
    private static extern bool DeleteTimerQueueTimer(IntPtr queue, IntPtr handle, IntPtr callback);

    public void Create(uint dueTime, uint period, PrecisionTimer.TimerDelegate callback)
    {
      if (this._Enabled)
        return;
      this.TimerCallback = callback;
      bool timerQueueTimer = PrecisionTimer.CreateTimerQueueTimer(ref this.Handle, IntPtr.Zero, this.TimerCallback, IntPtr.Zero, dueTime, period, 0U);
      if (!timerQueueTimer)
        this.ThrowNewException("CreateTimerQueueTimer");
      this._Enabled = timerQueueTimer;
    }

    public void Delete()
    {
      if (!this._Enabled)
        return;
      bool flag = PrecisionTimer.DeleteTimerQueueTimer(IntPtr.Zero, this.Handle, IntPtr.Zero);
      if (!flag && Marshal.GetLastWin32Error() != 997)
        this.ThrowNewException("DeleteTimerQueueTimer");
      this._Enabled = !flag;
    }

    private void ThrowNewException(string name) => throw new Exception(string.Format("{0} failed. Win32Error: {1}", (object) name, (object) Marshal.GetLastWin32Error()));

    public void Dispose() => this.Delete();

    public delegate void TimerDelegate(IntPtr r1, bool r2);
  }
}
