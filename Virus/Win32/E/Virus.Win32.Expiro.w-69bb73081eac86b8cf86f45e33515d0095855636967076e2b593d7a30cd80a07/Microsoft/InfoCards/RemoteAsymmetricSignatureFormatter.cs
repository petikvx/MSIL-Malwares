// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.RemoteAsymmetricSignatureFormatter
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 516D8B44-4448-4D2C-8B8E-FFBB3FFE472B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Virus.Win32.Expiro.w-69bb73081eac86b8cf86f45e33515d0095855636967076e2b593d7a30cd80a07.exe

using Microsoft.InfoCards.Diagnostics;
using System;
using System.Security.Cryptography;

namespace Microsoft.InfoCards
{
  internal class RemoteAsymmetricSignatureFormatter : AsymmetricSignatureFormatter
  {
    private RemoteCryptoRsaServiceProvider m_rsa;
    private string m_hashOidString;
    private int m_nativeHashType;

    public override byte[] CreateSignature(byte[] rgbHash)
    {
      if (this.m_rsa == null)
        throw InfoCardTrace.ThrowHelperError((Exception) new ArgumentException("m_rsa"));
      if (string.IsNullOrEmpty(this.m_hashOidString))
        throw InfoCardTrace.ThrowHelperError((Exception) new ArgumentException("m_hashOidString"));
      if (rgbHash == null)
        throw InfoCardTrace.ThrowHelperError((Exception) new ArgumentNullException(nameof (rgbHash)));
      return this.m_rsa.SignHash(this.m_nativeHashType, rgbHash);
    }

    public override void SetHashAlgorithm(string strName)
    {
      this.m_hashOidString = CryptoConfig.MapNameToOID(strName);
      this.m_nativeHashType = NativeMcppMethods.CryptAlgIdFromOid(this.m_hashOidString);
    }

    public override void SetKey(AsymmetricAlgorithm key)
    {
      this.m_rsa = key as RemoteCryptoRsaServiceProvider;
      if (this.m_rsa == null)
        throw InfoCardTrace.ThrowHelperError((Exception) new NotSupportedException());
    }
  }
}
