// Decompiled with JetBrains decompiler
// Type: Alero.DataTool
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using Alero.Querying;
using System;
using System.Data;
using System.IO;
using System.Linq;

namespace Alero
{
  public abstract class DataTool : IDisposable
  {
    private bool _isDisposed;

    protected abstract IDbConnection GetConnection();

    protected abstract IDbTransaction GetTransaction();

    protected abstract IDbCommand CreateCommand();

    public int ExecuteNonQuery(string spName, params IDataParameter[] parameters) => this.ExecuteNonQuery(spName, CommandType.StoredProcedure, parameters);

    public int ExecuteSqlNonQuery(string sql, params IDataParameter[] parameters)
    {
      try
      {
        return this.ExecuteNonQuery(sql, CommandType.Text, parameters);
      }
      catch (Exception ex)
      {
        throw new DataToolException("Error executing sql query: " + sql, ex);
      }
    }

    private int ExecuteNonQuery(
      string commandText,
      CommandType commandType,
      params IDataParameter[] parameters)
    {
      this.AssertNotDisposed();
      using (IDbCommand command = this.CreateCommand())
      {
        command.Connection = this.GetConnection();
        command.Transaction = this.GetTransaction();
        command.CommandText = commandText;
        command.CommandType = commandType;
        foreach (IDataParameter parameter in parameters)
          command.Parameters.Add((object) parameter);
        return command.ExecuteNonQuery();
      }
    }

    public object ExecuteScalar(string spName, params IDataParameter[] parameters) => this.ExecuteScalar(spName, CommandType.StoredProcedure, parameters);

    private object ExecuteScalar(
      string commandText,
      CommandType commandType,
      params IDataParameter[] parameters)
    {
      this.AssertNotDisposed();
      using (IDbCommand command = this.CreateCommand())
      {
        command.Connection = this.GetConnection();
        command.Transaction = this.GetTransaction();
        command.CommandText = commandText;
        command.CommandType = commandType;
        foreach (IDataParameter parameter in parameters)
          command.Parameters.Add((object) parameter);
        object obj = command.ExecuteScalar();
        return obj == DBNull.Value ? (object) null : obj;
      }
    }

    public object ExecuteSqlScalar(string sql, params IDataParameter[] parameters) => this.ExecuteScalar(sql, CommandType.Text, parameters);

    public virtual IDataReader ExecuteSqlReader(
      string sql,
      params IDataParameter[] parameters)
    {
      return this.ExecuteReader(sql, CommandType.Text, CommandBehavior.SingleResult, parameters);
    }

    public virtual IDataReader ExecuteSqlReaderSingleRow(
      string sql,
      params IDataParameter[] parameters)
    {
      return this.ExecuteReader(sql, CommandType.Text, CommandBehavior.SingleRow, parameters);
    }

    public IDataReader ExecuteReader(string spName, params IDataParameter[] parameters) => this.ExecuteReader(spName, CommandType.StoredProcedure, CommandBehavior.SingleResult | CommandBehavior.SequentialAccess, parameters);

    public IDataReader ExecuteReaderSingleRow(
      string spName,
      params IDataParameter[] parameters)
    {
      return this.ExecuteReader(spName, CommandType.StoredProcedure, CommandBehavior.SingleRow | CommandBehavior.SequentialAccess, parameters);
    }

    private IDataReader ExecuteReader(
      string sql,
      CommandType commandType,
      CommandBehavior behavior,
      params IDataParameter[] parameters)
    {
      this.AssertNotDisposed();
      using (IDbCommand command = this.CreateCommand())
      {
        command.Connection = this.GetConnection();
        command.Transaction = this.GetTransaction();
        command.CommandType = commandType;
        command.CommandText = sql;
        foreach (IDataParameter parameter in parameters)
          command.Parameters.Add((object) parameter);
        return command.ExecuteReader(behavior);
      }
    }

    public abstract IDataParameter CreateStringParameter(
      string parameterName,
      string value,
      int? length);

    public abstract IDataParameter CreateDecimalParameter(
      string parameterName,
      Decimal? value);

    public abstract IDataParameter CreateIntParameter(
      string parameterName,
      int? value);

    public abstract IDataParameter CreateGuidParameter(
      string parameterName,
      Guid? value);

    public virtual IDataParameter CreateIntParameter(string parameterName, int value) => this.CreateIntParameter(parameterName, new int?(value));

    public abstract IDataParameter CreateLongParameter(
      string parameterName,
      long? value);

    public abstract IDataParameter CreateStampParameter(
      string parameterName,
      object stamp);

    public abstract IDataParameter CreateBoolParameter(
      string parameterName,
      bool value);

    public abstract IDataParameter CreateBinaryParameter(
      string parameterName,
      byte[] value,
      int? length);

    public virtual IDataParameter CreateBinaryParameter(
      string parameterName,
      Stream dataStream)
    {
      using (MemoryStream memoryStream = new MemoryStream())
      {
        byte[] buffer = new byte[1024];
        int count;
        while (0 < (count = dataStream.Read(buffer, 0, 1024)))
          memoryStream.Write(buffer, 0, count);
        return this.CreateBinaryParameter(parameterName, memoryStream.ToArray(), new int?());
      }
    }

    public abstract IDataParameter CreateDateTimeParameter(
      string parameterName,
      DateTime? value);

    public virtual IDataParameter CreateDateTimeParameter(
      string parameterName,
      DateTime value)
    {
      return this.CreateDateTimeParameter(parameterName, new DateTime?(value));
    }

    public abstract IDataParameter CreateMoneyParameter(
      string parameterName,
      Decimal value);

    public void Dispose() => this.Dispose(true);

    protected virtual void Dispose(bool disposing) => this._isDisposed = true;

    public abstract void BeginTransaction();

    public abstract void CommitTransaction();

    public abstract void RollbackTransaction();

    protected void AssertNotDisposed()
    {
      if (this._isDisposed)
        throw new ObjectDisposedException(this.GetType().Name);
    }

    public IDataReader ExecuteQuery(Query query)
    {
      Query.ParseResult parseResult = query != null ? query.Parse(this) : throw new ArgumentNullException(nameof (query));
      return this.ExecuteSqlReader(parseResult.Sql, parseResult.Parameters.ToArray<IDataParameter>());
    }
  }
}
