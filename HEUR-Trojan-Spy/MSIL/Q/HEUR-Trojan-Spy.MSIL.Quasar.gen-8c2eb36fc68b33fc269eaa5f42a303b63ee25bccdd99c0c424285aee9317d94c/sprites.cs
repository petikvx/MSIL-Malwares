// Decompiled with JetBrains decompiler
// Type: Mario_KS.sprites
// Assembly: OnSerializingAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F72B5184-77D9-4DBB-B29C-2F3B04C48CCD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-8c2eb36fc68b33fc269eaa5f42a303b63ee25bccdd99c0c424285aee9317d94c.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.Drawing.Imaging;

namespace Mario_KS
{
  [StandardModule]
  public sealed class sprites
  {
    public static sprites.sprite mario;
    public static int delay;
    public static bool alternate;
    public static sprites.sprite[] badguys = new sprites.sprite[11];
    public static sprites.sprite dino;
    public const int gravity = 1;
    public static ImageAttributes imageAttr = new ImageAttributes();
    public const int NORMAL = 0;
    public const int DEAD = 1;
    public const int REVIVE = 2;
    public const int numbadguys = 10;
    public static int numMovingBadGuys;
    public const int FLIP = 3;
    public static bool reborn;
    public static bool startflying;

    public static void loadmario()
    {
      sprites.mario.cellcount = 24;
      sprites.mario.cellheight = checked ((int) Math.Round(unchecked ((double) sprites.mario.picture.Height / (double) sprites.mario.cellcount)));
      sprites.mario.cellwidth = sprites.mario.picture.Width;
      sprites.mario.startposition.X = 200;
      sprites.mario.startposition.Y = 350;
      sprites.mario.position.X = sprites.mario.startposition.X;
      sprites.mario.position.Y = sprites.mario.startposition.Y;
      sprites.mario.startspeed.Y = 16;
      sprites.mario.startspeed.X = 5;
      sprites.mario.speed.Y = 0;
      sprites.mario.speed.X = 0;
      sprites.mario.MRectangle.Width = sprites.mario.cellwidth;
      sprites.mario.MRectangle.Height = sprites.mario.cellheight;
    }

    public static void loaddino()
    {
      sprites.dino.cellcount = 3;
      sprites.dino.cellheight = checked ((int) Math.Round(unchecked ((double) sprites.dino.picture.Width / (double) sprites.dino.cellcount)));
      sprites.dino.cellwidth = sprites.dino.picture.Height;
      sprites.dino.startposition.X = 200;
      sprites.dino.startposition.Y = 350;
      sprites.dino.position.X = sprites.dino.startposition.X;
      sprites.dino.position.Y = sprites.dino.startposition.Y;
      sprites.dino.startspeed.Y = 0;
      sprites.dino.startspeed.X = 0;
      sprites.dino.speed.Y = 0;
      sprites.dino.speed.X = 0;
      sprites.dino.MRectangle.Width = sprites.dino.cellwidth;
      sprites.dino.MRectangle.Height = sprites.dino.cellheight;
    }

    public static void loadbadguys()
    {
      int index = 0;
      do
      {
        sprites.badguys[index].cellcount = 19;
        sprites.badguys[index].cellheight = checked ((int) Math.Round(unchecked ((double) sprites.badguys[index].picture.Width / (double) sprites.badguys[index].cellcount)));
        sprites.badguys[index].cellwidth = sprites.badguys[index].picture.Height;
        sprites.badguys[index].MRectangle.Width = sprites.badguys[index].cellwidth;
        sprites.badguys[index].MRectangle.Height = sprites.badguys[index].cellheight;
        if (!sprites.alternate)
        {
          sprites.badguys[index].startposition.X = 68;
          sprites.badguys[index].startposition.Y = 30;
          sprites.badguys[index].speed.Y = 0;
          sprites.badguys[index].speed.X = 5;
          sprites.alternate = true;
        }
        else
        {
          sprites.badguys[index].startposition.X = -(sprites.badguys[index].startposition.Y == 30 ? 1 : 0);
          sprites.badguys[index].speed.Y = 0;
          sprites.badguys[index].speed.X = -5;
          sprites.alternate = false;
        }
        sprites.badguys[index].position.X = sprites.badguys[index].startposition.X;
        sprites.badguys[index].position.Y = sprites.badguys[index].startposition.Y;
        checked { ++index; }
      }
      while (index <= 10);
    }

    public static void movemario()
    {
      ref sprites.sprite local1 = ref sprites.mario;
      object speed = sprites.marioGetSpeed();
      Point point = speed != null ? (Point) speed : new Point();
      local1.speed = point;
      // ISSUE: variable of a reference type
      Point& local2;
      // ISSUE: explicit reference operation
      int num1 = checked ((^(local2 = ref sprites.mario.position)).Y + sprites.mario.speed.Y);
      local2.Y = num1;
      // ISSUE: variable of a reference type
      Point& local3;
      // ISSUE: explicit reference operation
      int num2 = checked ((^(local3 = ref sprites.mario.position)).X + sprites.mario.speed.X);
      local3.X = num2;
      if (sprites.startflying && sprites.mario.state == 2 & sprites.mario.position.Y < 140)
        sprites.startflying = false;
      if (sprites.mario.state == 2 & sprites.mario.position.Y > 150)
      {
        sprites.mario.speed.Y = 0;
        sprites.startflying = true;
      }
      if (sprites.mario.position.X > background.backdrop.width)
        sprites.mario.position.X = 0;
      if (sprites.mario.position.X < 0)
        sprites.mario.position.X = background.backdrop.width;
      sprites.mario.MRectangle.X = sprites.mario.position.X;
      sprites.mario.MRectangle.Y = sprites.mario.position.Y;
    }

    public static void movedino()
    {
      // ISSUE: variable of a reference type
      Point& local1;
      // ISSUE: explicit reference operation
      int num1 = checked ((^(local1 = ref sprites.dino.position)).Y + sprites.dino.speed.Y);
      local1.Y = num1;
      // ISSUE: variable of a reference type
      Point& local2;
      // ISSUE: explicit reference operation
      int num2 = checked ((^(local2 = ref sprites.dino.position)).X + sprites.dino.speed.X);
      local2.X = num2;
      if (!sprites.reborn)
      {
        sprites.dino.MRectangle.X = checked (sprites.mario.position.X - 4);
        sprites.dino.MRectangle.Y = checked (sprites.mario.position.Y - sprites.dino.cellheight + 3);
      }
      else
      {
        sprites.dino.speed.Y = -5;
        sprites.dino.MRectangle.X = sprites.dino.position.X;
        sprites.dino.MRectangle.Y = sprites.dino.position.Y;
      }
    }

    public static void mariodraw() => background.offG.DrawImage((Image) sprites.mario.picture, sprites.mario.MRectangle, 0, sprites.mario.celltop, sprites.mario.cellwidth, sprites.mario.cellheight, GraphicsUnit.Pixel, sprites.imageAttr);

    public static void badguydraw()
    {
      int numMovingBadGuys = sprites.numMovingBadGuys;
      int index = 0;
      while (index <= numMovingBadGuys)
      {
        background.offG.DrawImage((Image) sprites.badguys[index].picture, sprites.badguys[index].MRectangle, sprites.badguys[index].celltop, 0, sprites.badguys[index].cellwidth, sprites.badguys[index].cellheight, GraphicsUnit.Pixel, sprites.imageAttr);
        checked { ++index; }
      }
    }

    public static void dinodraw()
    {
      if (!(sprites.mario.state == 2 | sprites.reborn))
        return;
      background.offG.DrawImage((Image) sprites.dino.picture, sprites.dino.MRectangle, sprites.dino.celltop, 0, sprites.dino.cellwidth, sprites.dino.cellheight, GraphicsUnit.Pixel, sprites.imageAttr);
    }

    public static object marioGetSpeed()
    {
      sprites.mario.onfloor = false;
      Point speed;
      speed.Y = sprites.startflying ? checked (sprites.mario.speed.Y - 1) : checked (sprites.mario.speed.Y + 1);
      speed.X = sprites.mario.speed.X;
      if (sprites.mario.state == 0)
      {
        sprites.mario.onfloor = false;
        int index = 0;
        do
        {
          if (checked (sprites.mario.position.X + sprites.mario.cellwidth) > background.floors[index].left & sprites.mario.position.X < background.floors[index].right)
          {
            if (speed.Y > 0 && checked (sprites.mario.position.Y + sprites.mario.cellheight) <= background.floors[index].top && checked (sprites.mario.position.Y + sprites.mario.cellheight + speed.Y) > background.floors[index].top)
            {
              speed.Y = checked (background.floors[index].top - sprites.mario.position.Y + sprites.mario.cellheight);
              sprites.mario.onfloor = true;
            }
            if (speed.Y <= 0 && sprites.mario.position.Y >= background.floors[index].bottom && checked (sprites.mario.position.Y + speed.Y) < background.floors[index].bottom)
              speed.Y = checked (background.floors[index].bottom - sprites.mario.position.Y);
          }
          if (checked (sprites.mario.position.Y + sprites.mario.cellheight) > background.floors[index].top & sprites.mario.position.Y < background.floors[index].bottom)
          {
            if (speed.X > 0 && checked (sprites.mario.position.X + sprites.mario.cellwidth) <= background.floors[index].left && checked (sprites.mario.position.X + sprites.mario.cellwidth + speed.X) >= background.floors[index].left)
              speed.X = checked (background.floors[index].left - sprites.mario.position.X + sprites.mario.cellwidth);
            if (speed.X <= 0 && sprites.mario.position.X >= background.floors[index].right && checked (sprites.mario.position.X + speed.X) < background.floors[index].right)
              speed.X = checked (background.floors[index].right - sprites.mario.position.X);
          }
          checked { ++index; }
        }
        while (index <= 7);
      }
      return (object) speed;
    }

    public static object badguysGetSpeed(int idx)
    {
      sprites.badguys[idx].onfloor = false;
      Point speed;
      if (sprites.badguys[idx].position.Y < background.backdrop.height)
      {
        speed.Y = checked (sprites.badguys[idx].speed.Y + 1);
        speed.X = sprites.badguys[idx].speed.X;
      }
      if (sprites.badguys[idx].state != 1)
      {
        int index = 0;
        do
        {
          if (checked (sprites.badguys[idx].position.X + sprites.badguys[idx].cellwidth) > background.floors[index].left & sprites.badguys[idx].position.X < background.floors[index].right && speed.Y > 0 && checked (sprites.badguys[idx].position.Y + sprites.badguys[idx].cellheight) <= background.floors[index].top && checked (sprites.badguys[idx].position.Y + sprites.badguys[idx].cellheight + speed.Y) > background.floors[index].top)
          {
            speed.Y = checked (background.floors[index].top - sprites.badguys[idx].position.Y + sprites.badguys[idx].cellheight);
            sprites.badguys[idx].onfloor = true;
          }
          checked { ++index; }
        }
        while (index <= 7);
      }
      return (object) speed;
    }

    public static object animateMario()
    {
      int num = checked (sprites.mario.celltop + sprites.mario.cellheight);
      if (sprites.mario.state == 0)
      {
        if (sprites.mario.speed.X > 0)
        {
          sprites.mario.facingRight = true;
          if (sprites.mario.onfloor)
          {
            if (num < checked (sprites.mario.cellheight * 16) | num > checked (sprites.mario.cellheight * 23))
              num = checked (sprites.mario.cellheight * 16);
          }
          else if (sprites.mario.speed.Y < 0)
            num = checked (sprites.mario.cellheight * 5);
          else if (sprites.mario.speed.Y > 0)
            num = checked (sprites.mario.cellheight * 4);
        }
        if (sprites.mario.speed.X < 0)
        {
          sprites.mario.facingRight = false;
          if (sprites.mario.onfloor)
          {
            if (num < checked (sprites.mario.cellheight * 7) | num > checked (sprites.mario.cellheight * 13))
              num = checked (sprites.mario.cellheight * 7);
          }
          else if (sprites.mario.speed.Y < 0)
            num = checked (sprites.mario.cellheight * 15);
          else if (sprites.mario.speed.Y > 0)
            num = checked (sprites.mario.cellheight * 14);
        }
        if (sprites.mario.speed.X == 0)
        {
          if (sprites.mario.facingRight)
          {
            if (sprites.mario.onfloor)
              num = checked (sprites.mario.cellheight * 23);
            else if (sprites.mario.speed.Y < 0)
              num = checked (sprites.mario.cellheight * 5);
            else if (sprites.mario.speed.Y > 0)
              num = checked (sprites.mario.cellheight * 4);
          }
          else if (sprites.mario.onfloor)
            num = checked (sprites.mario.cellheight * 13);
          else if (sprites.mario.speed.Y < 0)
            num = checked (sprites.mario.cellheight * 15);
          else if (sprites.mario.speed.Y > 0)
            num = checked (sprites.mario.cellheight * 14);
        }
      }
      else if (sprites.mario.state == 1)
      {
        if (num > checked (sprites.mario.cellheight * 3))
          num = checked (sprites.mario.cellheight * 0);
      }
      else if (sprites.mario.state == 2 && num > checked (sprites.mario.cellheight * 4))
        num = checked (sprites.mario.cellheight * 4);
      return (object) num;
    }

    public static void movebadguys(int numMoving)
    {
      int num1 = numMoving;
      int idx = 0;
      while (idx <= num1)
      {
        ref sprites.sprite local1 = ref sprites.badguys[idx];
        object speed = sprites.badguysGetSpeed(idx);
        Point point = speed != null ? (Point) speed : new Point();
        local1.speed = point;
        // ISSUE: variable of a reference type
        Point& local2;
        // ISSUE: explicit reference operation
        int num2 = checked ((^(local2 = ref sprites.badguys[idx].position)).X + sprites.badguys[idx].speed.X);
        local2.X = num2;
        // ISSUE: variable of a reference type
        Point& local3;
        // ISSUE: explicit reference operation
        int num3 = checked ((^(local3 = ref sprites.badguys[idx].position)).Y + sprites.badguys[idx].speed.Y);
        local3.Y = num3;
        if (sprites.badguys[idx].position.X > background.backdrop.width)
          sprites.badguys[idx].position.X = 0;
        if (sprites.badguys[idx].position.X < 0)
          sprites.badguys[idx].position.X = background.backdrop.width;
        if (sprites.badguys[idx].position.X < 0 & sprites.badguys[idx].position.Y > 300)
        {
          sprites.badguys[idx].position.X = background.backdrop.width;
          sprites.badguys[idx].position.Y = 0;
        }
        if (sprites.badguys[idx].position.X < 0 & sprites.badguys[idx].position.Y > 1)
        {
          sprites.badguys[idx].position.X = background.backdrop.width;
          sprites.badguys[idx].position.Y = 0;
        }
        sprites.badguys[idx].MRectangle.X = sprites.badguys[idx].position.X;
        sprites.badguys[idx].MRectangle.Y = sprites.badguys[idx].position.Y;
        checked { ++idx; }
      }
    }

    public static object animatebadguys(int idx)
    {
      int num = checked (sprites.badguys[idx].celltop + sprites.badguys[idx].cellheight);
      if (sprites.badguys[idx].state == 0)
      {
        if (sprites.badguys[idx].speed.X < 0)
        {
          sprites.badguys[idx].facingRight = false;
          if (num > checked (sprites.badguys[idx].cellheight * 4))
            num = 0;
        }
        if (sprites.badguys[idx].speed.X > 0)
        {
          sprites.badguys[idx].facingRight = true;
          if (num < checked (sprites.badguys[idx].cellheight * 5) | num > checked (sprites.badguys[idx].cellheight * 9))
            num = checked (sprites.badguys[idx].cellheight * 5);
        }
      }
      else if (sprites.badguys[idx].state == 3)
      {
        if (!sprites.badguys[idx].onfloor)
        {
          if (num < checked (sprites.badguys[idx].cellheight * 14) | num > checked (sprites.badguys[idx].cellheight * 18))
            num = checked (sprites.badguys[idx].cellheight * 14);
        }
        else if (num < checked (sprites.badguys[idx].cellheight * 10) | num > checked (sprites.badguys[idx].cellheight * 13))
          num = checked (sprites.badguys[idx].cellheight * 10);
      }
      else if (sprites.badguys[idx].state == 1 && num < checked (sprites.badguys[idx].cellheight * 14) | num > checked (sprites.badguys[idx].cellheight * 18))
        num = checked (sprites.badguys[idx].cellheight * 14);
      return (object) num;
    }

    public static object animatedino()
    {
      int num = sprites.dino.celltop;
      if (sprites.delay == 3)
      {
        checked { num += sprites.dino.cellheight; }
        sprites.delay = 0;
        if (num > checked (sprites.dino.cellheight * 2))
          num = checked (sprites.dino.cellheight * 0);
      }
      return (object) num;
    }

    public static object touching(sprites.sprite guy1, sprites.sprite guy2)
    {
      double num1 = guy1.cellwidth >= guy1.cellheight ? (double) guy1.cellheight / 2.0 : (double) guy1.cellwidth / 2.0;
      double num2 = guy2.cellwidth >= guy2.cellheight ? (double) guy2.cellheight / 2.0 : (double) guy2.cellwidth / 2.0;
      int num3 = checked (guy1.position.Y - guy2.position.Y);
      int num4 = checked (guy1.position.X - guy2.position.X);
      return Math.Sqrt((double) checked (num3 * num3 + num4 * num4)) < num1 + num1 ? (object) true : (object) false;
    }

    public static void killmario()
    {
      int numMovingBadGuys = sprites.numMovingBadGuys;
      int index = 0;
      while (index <= numMovingBadGuys)
      {
        if (sprites.mario.state == 0 && sprites.badguys[index].state == 0 && Operators.ConditionalCompareObjectEqual(sprites.touching(sprites.mario, sprites.badguys[index]), (object) true, false))
        {
          sprites.mario.state = 1;
          sprites.mario.speed.X = 0;
          sprites.mario.speed.Y = -20;
        }
        checked { ++index; }
      }
    }

    public static void revival()
    {
      if (!(sprites.mario.state == 1 & sprites.mario.position.Y >= background.backdrop.height))
        return;
      sprites.mario.state = 2;
      sprites.dino.position = sprites.mario.position;
      sprites.mario.position.Y = checked (-sprites.mario.cellheight);
      sprites.mario.position.X = checked ((int) Math.Round(unchecked ((double) background.backdrop.width / 2.0 - (double) sprites.mario.cellwidth / 2.0)));
      sprites.mario.speed.Y = 0;
    }

    public static void killbadguys()
    {
      sprites.sprite mario = sprites.mario;
      // ISSUE: variable of a reference type
      Point& local;
      // ISSUE: explicit reference operation
      int num = checked ((^(local = ref mario.position)).Y - 40);
      local.Y = num;
      int numMovingBadGuys1 = sprites.numMovingBadGuys;
      int index1 = 0;
      while (index1 <= numMovingBadGuys1)
      {
        int numMovingBadGuys2 = sprites.numMovingBadGuys;
        int index2 = 0;
        while (index2 <= numMovingBadGuys2)
        {
          if (sprites.badguys[index1].onfloor & sprites.badguys[index1].state != 1 && Conversions.ToBoolean(Operators.OrObject(Operators.AndObject((object) (sprites.mario.state == 0), sprites.touching(mario, sprites.badguys[index1])), Operators.AndObject((object) (sprites.badguys[index2].state == 1), sprites.touching(sprites.badguys[index2], sprites.badguys[index1])))) && index2 != index1)
          {
            sprites.badguys[index1].state = 3;
            sprites.badguys[index1].speed.Y = -20;
            sprites.badguys[index1].speed.X = 0;
          }
          if (sprites.mario.state == 0 & sprites.badguys[index1].state == 3 && Conversions.ToBoolean(sprites.touching(sprites.mario, sprites.badguys[index1])))
          {
            sprites.badguys[index1].state = 1;
            sprites.badguys[index1].speed.Y = -20;
            sprites.badguys[index1].speed.X = sprites.mario.speed.X;
          }
          checked { ++index2; }
        }
        checked { ++index1; }
      }
    }

    public struct sprite
    {
      public int cellheight;
      public int cellwidth;
      public int cellcount;
      public Bitmap picture;
      public Point startposition;
      public Point position;
      public Point speed;
      public Point startspeed;
      public Rectangle MRectangle;
      public int celltop;
      public bool facingRight;
      public bool onfloor;
      public int state;
    }
  }
}
