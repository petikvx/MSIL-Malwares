// Decompiled with JetBrains decompiler
// Type: .
// Assembly: LLB, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 273A448B-459A-4DB6-844A-AD8F16DBC137
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00030-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-34f6b3bc39d40e01d57013b70665df0b46afaccf0ad5f6f6022f2d1256915b88.exe.exe

using \u000E;
using \u0015;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u000E
{
  internal class \u0008
  {
    private static readonly string \u0001 = "1";
    private static readonly string \u0002 = "149";
    private static readonly byte[] \u0003 = (byte[]) null;
    private static readonly Hashtable \u0004 = (Hashtable) null;
    private static readonly bool \u0005 = false;
    private static readonly int \u0006 = 0;

    [\u000F]
    [\u0010]
    public static string \u0007([In] int obj0)
    {
      obj0 -= \u0008.\u0006;
      if (\u0008.\u0005)
      {
        string str = (string) \u0096.\u007E\u0008\u0002((object) \u0008.\u0004, (object) obj0);
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] numArray1 = \u0008.\u0003;
      int index1 = num1;
      int num2 = index1 + 1;
      int num3 = (int) numArray1[index1];
      int num4;
      if ((num3 & 128) == 0)
      {
        num4 = num3;
        if (num4 == 0)
          return string.Empty;
      }
      else if ((num3 & 64) == 0)
      {
        num4 = ((num3 & 63) << 8) + (int) \u0008.\u0003[num2++];
      }
      else
      {
        int num5 = (num3 & 31) << 24;
        byte[] numArray2 = \u0008.\u0003;
        int index2 = num2;
        int num6 = index2 + 1;
        int num7 = (int) numArray2[index2] << 16;
        int num8 = num5 + num7;
        byte[] numArray3 = \u0008.\u0003;
        int index3 = num6;
        int num9 = index3 + 1;
        int num10 = (int) numArray3[index3] << 8;
        int num11 = num8 + num10;
        byte[] numArray4 = \u0008.\u0003;
        int index4 = num9;
        num2 = index4 + 1;
        int num12 = (int) numArray4[index4];
        num4 = num11 + num12;
      }
      try
      {
        byte[] numArray5 = \u0012.\u0018(\u0092.\u007E\u0004\u0002((object) \u0011.\u0015(), \u0008.\u0003, num2, num4));
        string str = \u0097.\u000E\u0002(\u0092.\u007E\u0004\u0002((object) \u0011.\u0015(), numArray5, 0, numArray5.Length));
        if (\u0008.\u0005)
        {
          try
          {
            \u0098.\u007E\u000F\u0002((object) \u0008.\u0004, (object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0008()
    {
      if (\u0099.\u0010\u0002(\u0008.\u0001, "1"))
      {
        \u0008.\u0005 = true;
        \u0008.\u0004 = new Hashtable();
      }
      \u0008.\u0006 = \u008C.\u009C(\u0008.\u0002);
      Assembly assembly = \u0082.\u0092();
      Stream stream = \u009A.\u007E\u0011\u0002((object) assembly, "{daad95b5-1c05-4dca-9e9a-2c5f95e97bc8}");
      try
      {
        int length = \u009C.\u0013\u0002(\u009B.\u007E\u0012\u0002((object) stream));
        byte[] numArray = new byte[length];
        int num = \u0091.\u007E\u0003\u0002((object) stream, numArray, 0, length);
        \u0008.\u0003 = \u001A.\u0019(numArray);
        \u0018.\u007E\u0080((object) stream);
      }
      finally
      {
        if (stream != null)
          \u0018.\u007E\u001F((object) stream);
      }
    }
  }
}
