// Decompiled with JetBrains decompiler
// Type: Ratchet.Math.mat3
// Assembly: FirstMatchCodeGr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F6EA4DA3-79DC-4E24-BB6F-C97A77DCC118
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ece28a4229d41e763203acb8c66af294e5461b01de2c4e25daddab193dfe554.exe

namespace Ratchet.Math
{
  public struct mat3
  {
    public float m11;
    public float m12;
    public float m13;
    public float m21;
    public float m22;
    public float m23;
    public float m31;
    public float m32;
    public float m33;

    public mat3(
      float m11,
      float m21,
      float m31,
      float m12,
      float m22,
      float m32,
      float m13,
      float m23,
      float m33)
    {
      this.m11 = m11;
      this.m21 = m21;
      this.m31 = m31;
      this.m12 = m12;
      this.m22 = m22;
      this.m32 = m32;
      this.m13 = m13;
      this.m23 = m23;
      this.m33 = m33;
    }

    public mat3 Transpose() => new mat3(this.m11, this.m12, this.m13, this.m21, this.m22, this.m23, this.m31, this.m32, this.m33);

    public mat3 Translation(float x, float y) => new mat3(1f, 0.0f, x, 0.0f, 1f, y, 0.0f, 0.0f, 1f);

    public mat3 Scale(float x, float y, float z) => new mat3(x, 0.0f, 0.0f, 0.0f, y, 0.0f, 0.0f, 0.0f, z);

    public static mat3 Identity() => new mat3(1f, 0.0f, 0.0f, 0.0f, 1f, 0.0f, 0.0f, 0.0f, 1f);

    public static vec3 operator *(mat3 a, vec3 b) => new vec3((float) ((double) a.m11 * (double) b.x + (double) a.m21 * (double) b.y + (double) a.m31 * (double) b.z), (float) ((double) a.m12 * (double) b.x + (double) a.m22 * (double) b.y + (double) a.m32 * (double) b.z), (float) ((double) a.m13 * (double) b.x + (double) a.m23 * (double) b.y + (double) a.m33 * (double) b.z));

    public static mat3 operator *(mat3 a, mat3 b) => new mat3((float) ((double) a.m11 * (double) b.m11 + (double) a.m21 * (double) b.m12 + (double) a.m31 * (double) b.m13), (float) ((double) a.m11 * (double) b.m21 + (double) a.m21 * (double) b.m22 + (double) a.m31 * (double) b.m23), (float) ((double) a.m11 * (double) b.m31 + (double) a.m21 * (double) b.m32 + (double) a.m31 * (double) b.m33), (float) ((double) a.m12 * (double) b.m11 + (double) a.m22 * (double) b.m12 + (double) a.m32 * (double) b.m13), (float) ((double) a.m12 * (double) b.m21 + (double) a.m22 * (double) b.m22 + (double) a.m32 * (double) b.m23), (float) ((double) a.m12 * (double) b.m31 + (double) a.m22 * (double) b.m32 + (double) a.m32 * (double) b.m33), (float) ((double) a.m13 * (double) b.m11 + (double) a.m23 * (double) b.m12 + (double) a.m33 * (double) b.m13), (float) ((double) a.m13 * (double) b.m21 + (double) a.m23 * (double) b.m22 + (double) a.m33 * (double) b.m23), (float) ((double) a.m13 * (double) b.m31 + (double) a.m23 * (double) b.m32 + (double) a.m33 * (double) b.m33));
  }
}
