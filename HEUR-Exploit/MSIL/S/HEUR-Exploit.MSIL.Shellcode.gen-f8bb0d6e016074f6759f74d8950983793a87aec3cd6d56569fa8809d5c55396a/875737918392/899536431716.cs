// Decompiled with JetBrains decompiler
// Type: 875737918392.899536431716
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003085429892392;
using \u003281657960314;
using \u003484267871453;
using \u003867543137528;
using \u003875737918392;
using Microsoft.PythonTools;
using Microsoft.PythonTools.Infrastructure;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using System;
using System.Collections.Generic;
using System.IO;

namespace \u003875737918392
{
  internal static class \u003899536431716
  {
    public static (string, int) \u003819947501503(this \u003747053286813 _param0)
    {
      int result = 0;
      string[] strArray = _param0.\u003361323991080.Replace(".\\", "").Split(':');
      return strArray.Length == 2 && int.TryParse(strArray[1], out result) ? (strArray[0], result) : throw new FormatException(StringExtensions.FormatUI(Strings.PytestInvalidTestSource, (object) _param0.ToString()));
    }

    public static TestCase \u003287243072360(this \u003747053286813 _param0, string _param1)
    {
      if (string.IsNullOrWhiteSpace(_param1))
        throw new ArgumentException("projectHome");
      if (string.IsNullOrWhiteSpace(_param0.\u003553337727148) || string.IsNullOrWhiteSpace(_param0.\u003526443896411))
        throw new FormatException(_param0.ToString());
      (string path, int num) = _param0.\u003819947501503();
      string str1 = Path.IsPathRooted(path) ? path : PathUtils.GetAbsoluteFilePath(_param1, path);
      if (string.IsNullOrWhiteSpace(str1))
        throw new FormatException("sourceFullPath " + _param0.ToString());
      string str2 = \u003899536431716.\u003224928540438(str1, _param1, _param0.\u003526443896411);
      TestCase testCase = new TestCase(\u003899536431716.\u003852519885046(str1, str2), \u003991852471700.\u003599289945402, str1)
      {
        DisplayName = \u003899536431716.\u003518394511523(_param0.\u003553337727148),
        LineNumber = num,
        CodeFilePath = str1
      };
      ((TestObject) testCase).SetPropertyValue<string>(\u003492676733657.\u003490125617522, str2);
      foreach (object obj in EnumerableExtensions.MaybeEnumerate<object>((IEnumerable<object>) _param0.\u003377392628143))
        ((TestObject) testCase).Traits.Add(new Trait(obj.ToString(), string.Empty));
      return testCase;
    }

    internal static string \u003224928540438(string _param0, string _param1, string _param2)
    {
      string[] strArray = _param2.Split(new string[1]
      {
        "::"
      }, StringSplitOptions.None);
      strArray[0] = ".\\" + PathUtils.CreateFriendlyFilePath(_param1, _param0);
      return string.Join("::", strArray);
    }

    internal static string \u003772668717916(
      \u003747053286813 _param0,
      Dictionary<string, \u003000792929470> _param1)
    {
      List<string> values = new List<string>();
      \u003000792929470 obj;
      for (string key = _param0.\u003613801157879; _param1.TryGetValue(key, out obj); key = obj.\u003469575866968)
      {
        if (string.Compare(obj.\u003350118727888, "function", StringComparison.OrdinalIgnoreCase) != 0)
          values.Add(Path.GetFileNameWithoutExtension(obj.\u003292780050623));
      }
      values.Reverse();
      return string.Join(".", (IEnumerable<string>) values);
    }

    internal static string \u003852519885046(string _param0, string _param1)
    {
      string str = _param1.Replace(".\\", "");
      string[] strArray = str.Split(new string[1]{ "::" }, StringSplitOptions.None);
      if (strArray.Length == 2)
      {
        string withoutExtension = Path.GetFileNameWithoutExtension(strArray[0]);
        str = strArray[0] + "::" + withoutExtension + "::" + strArray[1];
      }
      return \u003899536431716.\u003518394511523(str);
    }

    internal static string \u003518394511523(string _param0)
    {
      if (!string.IsNullOrEmpty(_param0))
      {
        int startIndex = _param0.IndexOf('[');
        if (startIndex != -1)
        {
          string oldValue = _param0.Substring(startIndex);
          return _param0.Replace(oldValue, oldValue.Replace(".", "_"));
        }
      }
      return _param0;
    }

    internal static string \u003339183546156(string _param0, string _param1)
    {
      string fileName = Path.GetFileName(_param0);
      int num = _param1.LastIndexOf(fileName);
      string str1;
      if (num != -1)
      {
        string str2 = _param1.Substring(num + fileName.Length);
        str1 = _param0 + str2;
      }
      else
        str1 = Path.Combine(Path.GetDirectoryName(_param0), _param1.TrimStart('.'));
      return str1;
    }
  }
}
