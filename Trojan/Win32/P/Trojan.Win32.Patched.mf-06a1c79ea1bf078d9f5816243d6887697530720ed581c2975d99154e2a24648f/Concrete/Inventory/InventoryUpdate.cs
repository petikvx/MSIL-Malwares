// Decompiled with JetBrains decompiler
// Type: VMS.OSService.Concrete.Inventory.InventoryUpdate
// Assembly: VMS.OSP.Service, Version=1.4.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 7B29B897-26BF-407B-B0D0-14253383A174
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.Win32.Patched.mf-06a1c79ea1bf078d9f5816243d6887697530720ed581c2975d99154e2a24648f.exe

using System;
using System.Configuration;
using System.Threading;
using VMS.OSP.Inventory;
using VMS.OSP.Inventory.Common;
using VMS.OSP.Services.Logging;
using VMS.OSService.Abstract;

namespace VMS.OSService.Concrete.Inventory
{
  public class InventoryUpdate : AbstractService
  {
    private const int cPendingUpdateInterval = 3000;
    private const int cStartUpdateDelay = 5000;
    private const string cSysLogCategory = "InventoryUpdateComponent";
    private long cSlowUpdateInterval = 604800000;
    private Timer _timer;
    private DateTime _lastUpdateRequested = DateTime.MaxValue;

    public InventoryUpdate() => this._timer = new Timer(new TimerCallback(this.OnTimer), (object) null, -1, -1);

    protected void OnTimer(object o)
    {
      lock (this)
        this.UpdateClientInventory();
    }

    internal override void OnCustomEvent(int command)
    {
    }

    internal override void OnStart(string[] args)
    {
      this.WriteSysLog((OSP_SEVERITY) 6, "InventoryUpdateComponent", "Inventory Operating System and Hotfix Component started");
      AppSettingsReader appSettingsReader = new AppSettingsReader();
      try
      {
        this.cSlowUpdateInterval = (long) (int) appSettingsReader.GetValue("InventoryUpdateInterval", typeof (int));
      }
      catch
      {
      }
      this._timer.Change(this.cSlowUpdateInterval, this.cSlowUpdateInterval);
    }

    internal override void OnStop()
    {
      this.WriteSysLog((OSP_SEVERITY) 6, "InventoryUpdateComponent", "Inventory Operating System and Hotfix Component stopped");
      this._timer.Change(-1, -1);
    }

    private void UpdateClientInventory()
    {
      string fileLocationVer3 = InventoryConstants.ClientInventoryFileLocationVer3;
      VMSInventory vmsInventory = new VMSInventory();
      try
      {
        vmsInventory.UpdateInventory(true);
        this.WriteSysLog((OSP_SEVERITY) 6, "InventoryUpdateComponent", "Successfully updated operating system and hotfix details to client inventory.");
      }
      catch (Exception ex)
      {
        this.WriteSysLog((OSP_SEVERITY) 3, "InventoryUpdateComponent", "" + "Error occurd while updating operating systems and hotfix details to client inventory.\r\n" + ex.Message + "\r\n" + "\r\n------- Details ----------\r\n" + "Type\t\t: " + ex.GetType().ToString() + "Source\t\t: " + ex.Source + "\r\n" + "XmlFile\t\t: " + fileLocationVer3 + "\r\n");
      }
    }

    private enum TState
    {
      cUpdatePeriodic,
      cUpdateAfterChanges,
    }
  }
}
