// Decompiled with JetBrains decompiler
// Type: Cradiator.Audio.VoiceSelector
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Extensions;
using System;
using System.Linq;

namespace Cradiator.Audio
{
  public class VoiceSelector
  {
    private readonly ISpeechSynthesizer _speechSynth;

    public VoiceSelector(ISpeechSynthesizer speechSynth) => this._speechSynth = speechSynth;

    public void SelectInstalledVoice(string voiceName) => this._speechSynth.SelectVoice(this.GetClosestMatchingInstalledVoice(voiceName).Name);

    public CradiatorInstalledVoice GetClosestMatchingInstalledVoice(
      string voiceName)
    {
      if (voiceName.IsEmpty())
        return this._speechSynth.SelectedVoice;
      IOrderedEnumerable<CradiatorInstalledVoice> source = this._speechSynth.GetInstalledVoices().Where<CradiatorInstalledVoice>((Func<CradiatorInstalledVoice, bool>) (voice => voice.Name.ContainsIgnoreCase(voiceName))).OrderBy<CradiatorInstalledVoice, string>((Func<CradiatorInstalledVoice, string>) (voice => voice.Name));
      return source.Any<CradiatorInstalledVoice>() ? source.First<CradiatorInstalledVoice>() : this._speechSynth.SelectedVoice;
    }
  }
}
