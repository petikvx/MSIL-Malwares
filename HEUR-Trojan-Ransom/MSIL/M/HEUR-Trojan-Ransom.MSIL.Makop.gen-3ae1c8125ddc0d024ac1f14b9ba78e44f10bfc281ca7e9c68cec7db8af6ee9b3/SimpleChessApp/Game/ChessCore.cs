// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: Yx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 400FF0AC-C9F5-4D3D-92AD-97AFF85F6668
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-3ae1c8125ddc0d024ac1f14b9ba78e44f10bfc281ca7e9c68cec7db8af6ee9b3.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
      this.ChessBoard = b;
      this.resetFlags();
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
      this.resetFlags();
      this.ChessBoard.Restart();
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = -1698331263;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -647939725)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.DisableTurn = turn;
            this.WhosPlaying = PieceColor.White;
            this.TurnId = 1;
            this.lastCheckPiece = (Square) null;
            this.Turns.Clear();
            num1 = (int) num2 * -2040299364 ^ -623277243;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 1580087800;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 678208229)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1416125036 ^ -820815422;
            continue;
          case 2:
            num1 = (int) num2 * -1458127367 ^ -1131872404;
            continue;
          case 3:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * -319075181 ^ 1404708572;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestSinglePiece(Pieces x)
    {
      new DebugChess(this.ChessBoard).TestSinglePiece(x);
label_1:
      int num1 = 1597725179;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 256349612)) % 4U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * -2061886102 ^ 1498925541;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1720816239 ^ -770347777;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
      new DebugChess(this.ChessBoard).TestCastling();
label_1:
      int num1 = -1967137971;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -69485544)) % 4U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * 921743398 ^ 1053656174;
            continue;
          case 1:
            num1 = (int) num2 * 792760324 ^ 773399328;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 1987094182;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 822441001)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 1665124040 ^ 2133336564;
            continue;
          case 3:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * 397685116 ^ 657963639;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = -635054924;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1716591699)) % 5U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * -110557155 ^ 635571892;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).TestDiscoverCheck();
            num1 = (int) num2 * -197100800 ^ -7954057;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1910332198 ^ 1772155347;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestPromotion()
    {
      new DebugChess(this.ChessBoard).TestPromotion();
label_1:
      int num1 = 1202947932;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 863530765)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 699293398 ^ 1734315730;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 386334387;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1268140501)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * 1120899312 ^ -1976819522;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -1338703661 ^ -1320868522;
            continue;
          case 3:
            num1 = (int) num2 * -65195552 ^ 1796859138;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }
  }
}
