// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteDataReader
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Collections;
using System.Data.Common;
using System.Globalization;

namespace System.Data.SQLite
{
  public sealed class SQLiteDataReader : DbDataReader
  {
    private SQLiteCommand _command;
    private int _activeStatementIndex;
    private SQLiteStatement _activeStatement;
    private int _readingState;
    private int _rowsAffected;
    private int _fieldCount;
    private SQLiteType[] _fieldTypeArray;
    private CommandBehavior _commandBehavior;
    internal bool _disposeCommand;
    private SQLiteKeyReader _keyInfo;
    internal long _version;

    internal SQLiteDataReader(SQLiteCommand cmd, CommandBehavior behave)
    {
      this._command = cmd;
      this._version = this._command.Connection._version;
      this._commandBehavior = behave;
      this._activeStatementIndex = -1;
      this._rowsAffected = -1;
      if (this._command == null)
        return;
      this.NextResult();
    }

    internal void Cancel() => this._version = 0L;

    public override void Close()
    {
      try
      {
        if (this._command != null)
        {
          try
          {
            try
            {
              if (this._version != 0L)
              {
                try
                {
                  do
                    ;
                  while (this.NextResult());
                }
                catch (SQLiteException ex)
                {
                }
              }
              this._command.ClearDataReader();
            }
            finally
            {
              if ((this._commandBehavior & CommandBehavior.CloseConnection) != CommandBehavior.Default && this._command.Connection != null)
                this._command.Connection.Close();
            }
          }
          finally
          {
            if (this._disposeCommand)
              this._command.Dispose();
          }
        }
        this._command = (SQLiteCommand) null;
        this._activeStatement = (SQLiteStatement) null;
        this._fieldTypeArray = (SQLiteType[]) null;
      }
      finally
      {
        if (this._keyInfo != null)
        {
          this._keyInfo.Dispose();
          this._keyInfo = (SQLiteKeyReader) null;
        }
      }
    }

    private void CheckClosed()
    {
      if (this._command == null)
        throw new InvalidOperationException("DataReader has been closed");
      if (this._version == 0L)
        throw new SQLiteException(4, "Execution was aborted by the user");
      if (this._command.Connection.State != ConnectionState.Open || this._command.Connection._version != this._version)
        throw new InvalidOperationException("Connection was closed, statement was terminated");
    }

    private void CheckValidRow()
    {
      if (this._readingState != 0)
        throw new InvalidOperationException("No current row");
    }

    public override IEnumerator GetEnumerator() => (IEnumerator) new DbEnumerator((IDataReader) this, (this._commandBehavior & CommandBehavior.CloseConnection) == CommandBehavior.CloseConnection);

    public override int Depth
    {
      get
      {
        this.CheckClosed();
        return 0;
      }
    }

    public override int FieldCount
    {
      get
      {
        this.CheckClosed();
        return this._keyInfo == null ? this._fieldCount : this._fieldCount + this._keyInfo.Count;
      }
    }

    public override int VisibleFieldCount
    {
      get
      {
        this.CheckClosed();
        return this._fieldCount;
      }
    }

    private TypeAffinity VerifyType(int i, DbType typ)
    {
      this.CheckClosed();
      this.CheckValidRow();
      TypeAffinity affinity = this.GetSQLiteType(i).Affinity;
      switch (affinity)
      {
        case TypeAffinity.Int64:
          if (typ == DbType.Int16 || typ == DbType.Int32 || typ == DbType.Int64 || typ == DbType.Boolean || typ == DbType.Byte || typ == DbType.DateTime || typ == DbType.Single || typ == DbType.Double || typ == DbType.Decimal)
            return affinity;
          break;
        case TypeAffinity.Double:
          if (typ == DbType.Single || typ == DbType.Double || typ == DbType.Decimal || typ == DbType.DateTime)
            return affinity;
          break;
        case TypeAffinity.Text:
          if (typ == DbType.SByte || typ == DbType.String || typ == DbType.SByte || typ == DbType.Guid || typ == DbType.DateTime || typ == DbType.Decimal)
            return affinity;
          break;
        case TypeAffinity.Blob:
          if (typ == DbType.Guid || typ == DbType.String || typ == DbType.Binary)
            return affinity;
          break;
      }
      throw new InvalidCastException();
    }

    public override bool GetBoolean(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetBoolean(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Boolean);
      return Convert.ToBoolean(this.GetValue(i), (IFormatProvider) CultureInfo.CurrentCulture);
    }

    public override byte GetByte(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetByte(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Byte);
      return Convert.ToByte(this._activeStatement._sql.GetInt32(this._activeStatement, i));
    }

    public override long GetBytes(
      int i,
      long fieldOffset,
      byte[] buffer,
      int bufferoffset,
      int length)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetBytes(i - this.VisibleFieldCount, fieldOffset, buffer, bufferoffset, length);
      int num = (int) this.VerifyType(i, DbType.Binary);
      return this._activeStatement._sql.GetBytes(this._activeStatement, i, (int) fieldOffset, buffer, bufferoffset, length);
    }

    public override char GetChar(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetChar(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.SByte);
      return Convert.ToChar(this._activeStatement._sql.GetInt32(this._activeStatement, i));
    }

    public override long GetChars(
      int i,
      long fieldoffset,
      char[] buffer,
      int bufferoffset,
      int length)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetChars(i - this.VisibleFieldCount, fieldoffset, buffer, bufferoffset, length);
      int num = (int) this.VerifyType(i, DbType.String);
      return this._activeStatement._sql.GetChars(this._activeStatement, i, (int) fieldoffset, buffer, bufferoffset, length);
    }

    public override string GetDataTypeName(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetDataTypeName(i - this.VisibleFieldCount);
      SQLiteType sqLiteType = this.GetSQLiteType(i);
      return sqLiteType.Type == DbType.Object ? SQLiteConvert.SQLiteTypeToType(sqLiteType).Name : this._activeStatement._sql.ColumnType(this._activeStatement, i, out sqLiteType.Affinity);
    }

    public override DateTime GetDateTime(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetDateTime(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.DateTime);
      return this._activeStatement._sql.GetDateTime(this._activeStatement, i);
    }

    public override Decimal GetDecimal(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetDecimal(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Decimal);
      return Decimal.Parse(this._activeStatement._sql.GetText(this._activeStatement, i), NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent, (IFormatProvider) CultureInfo.InvariantCulture);
    }

    public override double GetDouble(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetDouble(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Double);
      return this._activeStatement._sql.GetDouble(this._activeStatement, i);
    }

    public override Type GetFieldType(int i) => i >= this.VisibleFieldCount && this._keyInfo != null ? this._keyInfo.GetFieldType(i - this.VisibleFieldCount) : SQLiteConvert.SQLiteTypeToType(this.GetSQLiteType(i));

    public override float GetFloat(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetFloat(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Single);
      return Convert.ToSingle(this._activeStatement._sql.GetDouble(this._activeStatement, i));
    }

    public override Guid GetGuid(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetGuid(i - this.VisibleFieldCount);
      if (this.VerifyType(i, DbType.Guid) != TypeAffinity.Blob)
        return new Guid(this._activeStatement._sql.GetText(this._activeStatement, i));
      byte[] numArray = new byte[16];
      this._activeStatement._sql.GetBytes(this._activeStatement, i, 0, numArray, 0, 16);
      return new Guid(numArray);
    }

    public override short GetInt16(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetInt16(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Int16);
      return Convert.ToInt16(this._activeStatement._sql.GetInt32(this._activeStatement, i));
    }

    public override int GetInt32(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetInt32(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Int32);
      return this._activeStatement._sql.GetInt32(this._activeStatement, i);
    }

    public override long GetInt64(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetInt64(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.Int64);
      return this._activeStatement._sql.GetInt64(this._activeStatement, i);
    }

    public override string GetName(int i) => i >= this.VisibleFieldCount && this._keyInfo != null ? this._keyInfo.GetName(i - this.VisibleFieldCount) : this._activeStatement._sql.ColumnName(this._activeStatement, i);

    public override int GetOrdinal(string name)
    {
      this.CheckClosed();
      int ordinal = this._activeStatement._sql.ColumnIndex(this._activeStatement, name);
      if (ordinal == -1 && this._keyInfo != null)
      {
        ordinal = this._keyInfo.GetOrdinal(name);
        if (ordinal > -1)
          ordinal += this.VisibleFieldCount;
      }
      return ordinal;
    }

    public override DataTable GetSchemaTable() => this.GetSchemaTable(true, false);

    internal DataTable GetSchemaTable(bool wantUniqueInfo, bool wantDefaultValue)
    {
      this.CheckClosed();
      DataTable tbl = new DataTable("SchemaTable");
      DataTable dataTable = (DataTable) null;
      string str1 = "";
      string str2 = "";
      tbl.Locale = CultureInfo.InvariantCulture;
      tbl.Columns.Add(SchemaTableColumn.ColumnName, typeof (string));
      tbl.Columns.Add(SchemaTableColumn.ColumnOrdinal, typeof (int));
      tbl.Columns.Add(SchemaTableColumn.ColumnSize, typeof (int));
      tbl.Columns.Add(SchemaTableColumn.NumericPrecision, typeof (short));
      tbl.Columns.Add(SchemaTableColumn.NumericScale, typeof (short));
      tbl.Columns.Add(SchemaTableColumn.IsUnique, typeof (bool));
      tbl.Columns.Add(SchemaTableColumn.IsKey, typeof (bool));
      tbl.Columns.Add(SchemaTableOptionalColumn.BaseServerName, typeof (string));
      tbl.Columns.Add(SchemaTableOptionalColumn.BaseCatalogName, typeof (string));
      tbl.Columns.Add(SchemaTableColumn.BaseColumnName, typeof (string));
      tbl.Columns.Add(SchemaTableColumn.BaseSchemaName, typeof (string));
      tbl.Columns.Add(SchemaTableColumn.BaseTableName, typeof (string));
      tbl.Columns.Add(SchemaTableColumn.DataType, typeof (Type));
      tbl.Columns.Add(SchemaTableColumn.AllowDBNull, typeof (bool));
      tbl.Columns.Add(SchemaTableColumn.ProviderType, typeof (int));
      tbl.Columns.Add(SchemaTableColumn.IsAliased, typeof (bool));
      tbl.Columns.Add(SchemaTableColumn.IsExpression, typeof (bool));
      tbl.Columns.Add(SchemaTableOptionalColumn.IsAutoIncrement, typeof (bool));
      tbl.Columns.Add(SchemaTableOptionalColumn.IsRowVersion, typeof (bool));
      tbl.Columns.Add(SchemaTableOptionalColumn.IsHidden, typeof (bool));
      tbl.Columns.Add(SchemaTableColumn.IsLong, typeof (bool));
      tbl.Columns.Add(SchemaTableOptionalColumn.IsReadOnly, typeof (bool));
      tbl.Columns.Add(SchemaTableOptionalColumn.ProviderSpecificDataType, typeof (Type));
      tbl.Columns.Add(SchemaTableOptionalColumn.DefaultValue, typeof (object));
      tbl.Columns.Add("DataTypeName", typeof (string));
      tbl.Columns.Add("CollationType", typeof (string));
      tbl.BeginLoadData();
      for (int index = 0; index < this._fieldCount; ++index)
      {
        DataRow row1 = tbl.NewRow();
        DbType type = this.GetSQLiteType(index).Type;
        row1[SchemaTableColumn.ColumnName] = (object) this.GetName(index);
        row1[SchemaTableColumn.ColumnOrdinal] = (object) index;
        row1[SchemaTableColumn.ColumnSize] = (object) SQLiteConvert.DbTypeToColumnSize(type);
        row1[SchemaTableColumn.NumericPrecision] = SQLiteConvert.DbTypeToNumericPrecision(type);
        row1[SchemaTableColumn.NumericScale] = SQLiteConvert.DbTypeToNumericScale(type);
        row1[SchemaTableColumn.ProviderType] = (object) this.GetSQLiteType(index).Type;
        row1[SchemaTableColumn.IsLong] = (object) false;
        row1[SchemaTableColumn.AllowDBNull] = (object) true;
        row1[SchemaTableOptionalColumn.IsReadOnly] = (object) false;
        row1[SchemaTableOptionalColumn.IsRowVersion] = (object) false;
        row1[SchemaTableColumn.IsUnique] = (object) false;
        row1[SchemaTableColumn.IsKey] = (object) false;
        row1[SchemaTableOptionalColumn.IsAutoIncrement] = (object) false;
        row1[SchemaTableColumn.DataType] = (object) this.GetFieldType(index);
        row1[SchemaTableOptionalColumn.IsHidden] = (object) false;
        string str3 = this._command.Connection._sql.ColumnOriginalName(this._activeStatement, index);
        if (!string.IsNullOrEmpty(str3))
          row1[SchemaTableColumn.BaseColumnName] = (object) str3;
        row1[SchemaTableColumn.IsExpression] = (object) string.IsNullOrEmpty(str3);
        row1[SchemaTableColumn.IsAliased] = (object) (string.Compare(this.GetName(index), str3, StringComparison.OrdinalIgnoreCase) != 0);
        string str4 = this._command.Connection._sql.ColumnTableName(this._activeStatement, index);
        if (!string.IsNullOrEmpty(str4))
          row1[SchemaTableColumn.BaseTableName] = (object) str4;
        string str5 = this._command.Connection._sql.ColumnDatabaseName(this._activeStatement, index);
        if (!string.IsNullOrEmpty(str5))
          row1[SchemaTableOptionalColumn.BaseCatalogName] = (object) str5;
        string dataType = (string) null;
        if (!string.IsNullOrEmpty(str3))
        {
          string collateSequence;
          bool notNull;
          bool primaryKey;
          bool autoIncrement;
          this._command.Connection._sql.ColumnMetaData((string) row1[SchemaTableOptionalColumn.BaseCatalogName], (string) row1[SchemaTableColumn.BaseTableName], str3, out dataType, out collateSequence, out notNull, out primaryKey, out autoIncrement);
          if (notNull || primaryKey)
            row1[SchemaTableColumn.AllowDBNull] = (object) false;
          row1[SchemaTableColumn.IsKey] = (object) primaryKey;
          row1[SchemaTableOptionalColumn.IsAutoIncrement] = (object) autoIncrement;
          row1["CollationType"] = (object) collateSequence;
          string[] strArray1 = dataType.Split('(');
          if (strArray1.Length > 1)
          {
            dataType = strArray1[0];
            string[] strArray2 = strArray1[1].Split(')');
            if (strArray2.Length > 1)
            {
              string[] strArray3 = strArray2[0].Split(',', '.');
              if (this.GetSQLiteType(index).Type == DbType.String || this.GetSQLiteType(index).Type == DbType.Binary)
              {
                row1[SchemaTableColumn.ColumnSize] = (object) Convert.ToInt32(strArray3[0], (IFormatProvider) CultureInfo.InvariantCulture);
              }
              else
              {
                row1[SchemaTableColumn.NumericPrecision] = (object) Convert.ToInt32(strArray3[0], (IFormatProvider) CultureInfo.InvariantCulture);
                if (strArray3.Length > 1)
                  row1[SchemaTableColumn.NumericScale] = (object) Convert.ToInt32(strArray3[1], (IFormatProvider) CultureInfo.InvariantCulture);
              }
            }
          }
          if (wantDefaultValue)
          {
            using (SQLiteCommand sqLiteCommand = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA [{0}].TABLE_INFO([{1}])", new object[2]
            {
              row1[SchemaTableOptionalColumn.BaseCatalogName],
              row1[SchemaTableColumn.BaseTableName]
            }), this._command.Connection))
            {
              using (DbDataReader dbDataReader = (DbDataReader) sqLiteCommand.ExecuteReader())
              {
                while (dbDataReader.Read())
                {
                  if (string.Compare((string) row1[SchemaTableColumn.BaseColumnName], dbDataReader.GetString(1), StringComparison.OrdinalIgnoreCase) == 0)
                  {
                    if (!dbDataReader.IsDBNull(4))
                    {
                      row1[SchemaTableOptionalColumn.DefaultValue] = dbDataReader[4];
                      break;
                    }
                    break;
                  }
                }
              }
            }
          }
          if (wantUniqueInfo)
          {
            if ((string) row1[SchemaTableOptionalColumn.BaseCatalogName] != str1 || (string) row1[SchemaTableColumn.BaseTableName] != str2)
            {
              str1 = (string) row1[SchemaTableOptionalColumn.BaseCatalogName];
              str2 = (string) row1[SchemaTableColumn.BaseTableName];
              dataTable = this._command.Connection.GetSchema("Indexes", new string[4]
              {
                (string) row1[SchemaTableOptionalColumn.BaseCatalogName],
                null,
                (string) row1[SchemaTableColumn.BaseTableName],
                null
              });
            }
            foreach (DataRow row2 in (InternalDataCollectionBase) dataTable.Rows)
            {
              DataTable schema = this._command.Connection.GetSchema("IndexColumns", new string[5]
              {
                (string) row1[SchemaTableOptionalColumn.BaseCatalogName],
                null,
                (string) row1[SchemaTableColumn.BaseTableName],
                (string) row2["INDEX_NAME"],
                null
              });
              foreach (DataRow row3 in (InternalDataCollectionBase) schema.Rows)
              {
                if (string.Compare((string) row3["COLUMN_NAME"], str3, StringComparison.OrdinalIgnoreCase) == 0)
                {
                  if (schema.Rows.Count == 1 && !(bool) row1[SchemaTableColumn.AllowDBNull])
                    row1[SchemaTableColumn.IsUnique] = row2["UNIQUE"];
                  if (schema.Rows.Count == 1)
                  {
                    if ((bool) row2["PRIMARY_KEY"])
                    {
                      if (!string.IsNullOrEmpty(dataType))
                      {
                        if (string.Compare(dataType, "integer", StringComparison.OrdinalIgnoreCase) != 0)
                          break;
                        break;
                      }
                      break;
                    }
                    break;
                  }
                  break;
                }
              }
            }
          }
          if (string.IsNullOrEmpty(dataType))
            dataType = this._activeStatement._sql.ColumnType(this._activeStatement, index, out TypeAffinity _);
          if (!string.IsNullOrEmpty(dataType))
            row1["DataTypeName"] = (object) dataType;
        }
        tbl.Rows.Add(row1);
      }
      if (this._keyInfo != null)
        this._keyInfo.AppendSchemaTable(tbl);
      tbl.AcceptChanges();
      tbl.EndLoadData();
      return tbl;
    }

    public override string GetString(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetString(i - this.VisibleFieldCount);
      int num = (int) this.VerifyType(i, DbType.String);
      return this._activeStatement._sql.GetText(this._activeStatement, i);
    }

    public override object GetValue(int i)
    {
      if (i >= this.VisibleFieldCount && this._keyInfo != null)
        return this._keyInfo.GetValue(i - this.VisibleFieldCount);
      SQLiteType sqLiteType = this.GetSQLiteType(i);
      return this._activeStatement._sql.GetValue(this._activeStatement, i, sqLiteType);
    }

    public override int GetValues(object[] values)
    {
      int values1 = this.FieldCount;
      if (values.Length < values1)
        values1 = values.Length;
      for (int ordinal = 0; ordinal < values1; ++ordinal)
        values[ordinal] = this.GetValue(ordinal);
      return values1;
    }

    public override bool HasRows
    {
      get
      {
        this.CheckClosed();
        return this._readingState != 1;
      }
    }

    public override bool IsClosed => this._command == null;

    public override bool IsDBNull(int i) => i >= this.VisibleFieldCount && this._keyInfo != null ? this._keyInfo.IsDBNull(i - this.VisibleFieldCount) : this._activeStatement._sql.IsNull(this._activeStatement, i);

    public override bool NextResult()
    {
      this.CheckClosed();
      SQLiteStatement stmt = (SQLiteStatement) null;
      int num;
      while (true)
      {
        if (this._activeStatement != null && stmt == null)
        {
          this._activeStatement._sql.Reset(this._activeStatement);
          if ((this._commandBehavior & CommandBehavior.SingleResult) != CommandBehavior.Default)
            break;
        }
        stmt = this._command.GetStatement(this._activeStatementIndex + 1);
        if (stmt != null)
        {
          if (this._readingState < 1)
            this._readingState = 1;
          ++this._activeStatementIndex;
          num = stmt._sql.ColumnCount(stmt);
          if ((this._commandBehavior & CommandBehavior.SchemaOnly) == CommandBehavior.Default || num == 0)
          {
            if (!stmt._sql.Step(stmt))
            {
              if (num == 0)
              {
                if (this._rowsAffected == -1)
                  this._rowsAffected = 0;
                this._rowsAffected += stmt._sql.Changes;
                stmt._sql.Reset(stmt);
              }
              else
                goto label_21;
            }
            else
              goto label_16;
          }
          else
            goto label_22;
        }
        else
          goto label_11;
      }
      while (true)
      {
        SQLiteStatement statement = this._command.GetStatement(this._activeStatementIndex + 1);
        if (statement != null)
        {
          ++this._activeStatementIndex;
          statement._sql.Step(statement);
          if (statement._sql.ColumnCount(statement) == 0)
          {
            if (this._rowsAffected == -1)
              this._rowsAffected = 0;
            this._rowsAffected += statement._sql.Changes;
          }
          statement._sql.Reset(statement);
        }
        else
          break;
      }
      return false;
label_11:
      return false;
label_16:
      this._readingState = -1;
      goto label_22;
label_21:
      this._readingState = 1;
label_22:
      this._activeStatement = stmt;
      this._fieldCount = num;
      this._fieldTypeArray = (SQLiteType[]) null;
      if ((this._commandBehavior & CommandBehavior.KeyInfo) != CommandBehavior.Default)
        this.LoadKeyInfo();
      return true;
    }

    private SQLiteType GetSQLiteType(int i)
    {
      if (this._fieldTypeArray == null)
        this._fieldTypeArray = new SQLiteType[this.VisibleFieldCount];
      if (this._fieldTypeArray[i] == null)
        this._fieldTypeArray[i] = new SQLiteType();
      SQLiteType fieldType = this._fieldTypeArray[i];
      if (fieldType.Affinity == TypeAffinity.Uninitialized)
        fieldType.Type = SQLiteConvert.TypeNameToDbType(this._activeStatement._sql.ColumnType(this._activeStatement, i, out fieldType.Affinity));
      else
        fieldType.Affinity = this._activeStatement._sql.ColumnAffinity(this._activeStatement, i);
      return fieldType;
    }

    public override bool Read()
    {
      this.CheckClosed();
      if (this._readingState == -1)
      {
        this._readingState = 0;
        return true;
      }
      if (this._readingState == 0)
      {
        if ((this._commandBehavior & CommandBehavior.SingleRow) == CommandBehavior.Default && this._activeStatement._sql.Step(this._activeStatement))
        {
          if (this._keyInfo != null)
            this._keyInfo.Reset();
          return true;
        }
        this._readingState = 1;
      }
      return false;
    }

    public override int RecordsAffected => this._rowsAffected >= 0 ? this._rowsAffected : 0;

    public override object this[string name] => this.GetValue(this.GetOrdinal(name));

    public override object this[int i] => this.GetValue(i);

    private void LoadKeyInfo()
    {
      if (this._keyInfo != null)
        this._keyInfo.Dispose();
      this._keyInfo = new SQLiteKeyReader(this._command.Connection, this, this._activeStatement);
    }
  }
}
