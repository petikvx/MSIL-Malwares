// Decompiled with JetBrains decompiler
// Type: KnownAce.IEqualityComparer
// Assembly: RegistrySecurity, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CE443B41-988D-4319-9971-B451F2F12365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-48aa8fd75e2be7fad2e1df3d81dc1653380a546611a53afbf6092ec9c104c324.exe

using InternalRM;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace KnownAce
{
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [CompilerGenerated]
  internal sealed class IEqualityComparer : ApplicationSettingsBase
  {
    private static IEqualityComparer defaultInstance = (IEqualityComparer) SettingsBase.Synchronized((SettingsBase) new IEqualityComparer());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!AssemblyFileVersionAttribute.Application.SaveMySettingsOnExit)
        return;
      UnmanagedMemoryStream.LocalDataStoreElement.Settings.Save();
    }

    public static IEqualityComparer Default
    {
      get
      {
        if (!IEqualityComparer.addedHandler)
        {
          object handlerLockObject = IEqualityComparer.addedHandlerLockObject;
          ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
          bool lockTaken = false;
          try
          {
            Monitor.Enter(handlerLockObject, ref lockTaken);
            if (!IEqualityComparer.addedHandler)
            {
              AssemblyFileVersionAttribute.Application.Shutdown += (ShutdownEventHandler) ((sender, e) =>
              {
                if (!AssemblyFileVersionAttribute.Application.SaveMySettingsOnExit)
                  return;
                UnmanagedMemoryStream.LocalDataStoreElement.Settings.Save();
              });
              IEqualityComparer.addedHandler = true;
            }
          }
          finally
          {
            if (lockTaken)
              Monitor.Exit(handlerLockObject);
          }
        }
        IEqualityComparer defaultInstance = IEqualityComparer.defaultInstance;
        return defaultInstance;
      }
    }
  }
}
