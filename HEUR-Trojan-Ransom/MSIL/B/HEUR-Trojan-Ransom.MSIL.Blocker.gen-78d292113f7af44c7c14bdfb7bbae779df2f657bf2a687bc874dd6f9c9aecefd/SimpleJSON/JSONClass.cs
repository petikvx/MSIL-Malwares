// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: CustomA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ABC0B0F-8965-48BE-A39F-300B4A85D17D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-78d292113f7af44c7c14bdfb7bbae779df2f657bf2a687bc874dd6f9c9aecefd.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
        if (!this.m_Dict.ContainsKey(aKey))
          goto label_5;
label_1:
        int num1 = -918552333;
label_2:
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1431087507)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 441491631 ^ 465647648;
              continue;
            case 2:
              num1 = (int) num2 * -2014862718 ^ 255155274;
              continue;
            case 3:
              goto label_5;
            default:
              goto label_6;
          }
        }
label_6:
        return jsonNode;
label_5:
        jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
        num1 = -836395431;
        goto label_2;
      }
      set
      {
label_1:
        int num1 = -174730161;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -269744005)) % 8U)
          {
            case 0:
              int num3 = !flag ? 1480217277 : (num3 = 1078635642);
              num1 = num3 ^ (int) num2 * -1937578642;
              continue;
            case 1:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -826638162 ^ -1809649278;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            case 4:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -1650571102 ^ 608324139;
              continue;
            case 5:
              num1 = (int) num2 * -1467642055 ^ -1436818251;
              continue;
            case 6:
              this.m_Dict.Add(aKey, value);
              num1 = -197070010;
              continue;
            case 7:
              num1 = (int) num2 * -1904258449 ^ 1419877049;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        if (aIndex < 0)
          goto label_8;
label_1:
        int num1 = 1454794340;
label_2:
        bool flag;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1885239941)) % 7U)
          {
            case 0:
              jsonNode = (JSONNode) null;
              num1 = 1890928019;
              continue;
            case 1:
              int num3 = flag ? -2108016618 : (num3 = -713371610);
              num1 = num3 ^ (int) num2 * -1602149210;
              continue;
            case 3:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 711563476 ^ 1714295021;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -1223654435 ^ -2088679689;
              continue;
            case 6:
              goto label_7;
            default:
              goto label_10;
          }
        }
label_7:
        int num4 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_9;
label_10:
        return jsonNode;
label_8:
        num4 = 1;
label_9:
        flag = num4 != 0;
        num1 = 1863629593;
        goto label_2;
      }
      set
      {
label_1:
        int num1 = -1657269134;
        while (true)
        {
          uint num2;
          int num3;
          switch ((num2 = (uint) (num1 ^ -660733507)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * -708033293 ^ 107618253;
              continue;
            case 3:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -1562868198 ^ -1556145760;
                continue;
              }
              num3 = 1;
              break;
            case 4:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            default:
              goto label_10;
          }
          int num4;
          num1 = num4 = num3 != 0 ? -1430602164 : (num4 = -1837094386);
        }
label_3:
        return;
label_10:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = -1738992522;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -494377235)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1522869165 ^ 1808849920;
              continue;
            case 3:
              count = this.m_Dict.Count;
              num1 = (int) num2 * -856927317 ^ -530551119;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      if (JSONClass.\u206D​⁬‪‏​‍‬⁫⁭‎‌‌‌‬‪‪‪⁯⁬⁭⁫⁬⁬‪‏‭⁯‪⁪‪⁫‌⁫‏‍‎⁫‍‍‮(aKey))
        goto label_5;
label_1:
      int num1 = 1732332864;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1339676075)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 43824734 ^ 1749597796;
            continue;
          case 1:
            num1 = (int) num2 * -1071159967 ^ 466866048;
            continue;
          case 2:
            int num3 = !flag ? -269739329 : (num3 = -337020666);
            num1 = num3 ^ (int) num2 * -1803255672;
            continue;
          case 3:
            num1 = 1039394638;
            continue;
          case 4:
            flag = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -328557150 ^ 935142097;
            continue;
          case 5:
            num1 = (int) num2 * -1732076612 ^ -980303648;
            continue;
          case 6:
            goto label_5;
          case 7:
            goto label_3;
          case 8:
            goto label_1;
          case 9:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * -891384099 ^ -1828553559;
            continue;
          case 10:
            this.m_Dict.Add(aKey, aItem);
            num1 = 1689876384;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:
      return;
label_5:
      this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
      num1 = 2125686480;
      goto label_2;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = 1375383781;
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 6903258)) % 8U)
        {
          case 0:
            jsonNode2 = (JSONNode) null;
            num1 = (int) num2 * -1937479714 ^ 487991163;
            continue;
          case 2:
            jsonNode2 = jsonNode1;
            num1 = (int) num2 * -1506114767 ^ 902764877;
            continue;
          case 3:
            goto label_1;
          case 4:
            jsonNode1 = this.m_Dict[aKey];
            num1 = 5439100;
            continue;
          case 5:
            num1 = (int) num2 * 1581000675 ^ 641939932;
            continue;
          case 6:
            this.m_Dict.Remove(aKey);
            num1 = (int) num2 * -842601080 ^ 430535040;
            continue;
          case 7:
            int num3 = this.m_Dict.ContainsKey(aKey) ? 639366082 : (num3 = 957842758);
            num1 = num3 ^ (int) num2 * -2143709124;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return jsonNode2;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -163874369;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1174080455)) % 8U)
        {
          case 0:
            int num4 = flag ? -44761362 : (num4 = -1383512509);
            num1 = num4 ^ (int) num2 * -262876001;
            continue;
          case 2:
            jsonNode = (JSONNode) null;
            num1 = -359419339;
            continue;
          case 3:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 4:
            num1 = (int) num2 * -1524067304 ^ 2117101808;
            continue;
          case 5:
            goto label_1;
          case 6:
            if (aIndex < 0)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -234173852 ^ -1784932702;
            continue;
          case 7:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -1737393412 ^ -926347756;
            continue;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = -332889263;
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = 1848720721;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ 1340784385)) % 22U)
            {
              case 0:
                num2 = (int) num3 * -354906375 ^ -1746927332;
                continue;
              case 1:
              case 4:
                this.\u003C\u003E1__state = -3;
                num2 = 846102980;
                continue;
              case 2:
              case 3:
                this.\u003C\u003E1__state = -1;
                num2 = 509788169;
                continue;
              case 5:
                childs = false;
                num2 = 1093783078;
                continue;
              case 7:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * -14425666 ^ 1217322502;
                continue;
              case 8:
                N = enumerator.Current;
                this.\u003C\u003E2__current = N.Value;
                this.\u003C\u003E1__state = 1;
                childs = true;
                num2 = 545036766;
                continue;
              case 10:
                int num4 = num1 == 0 ? -2084754497 : (num4 = -2133073341);
                num2 = num4 ^ (int) num3 * 1215214998;
                continue;
              case 11:
                int num5;
                num2 = num5 = !enumerator.MoveNext() ? 1848572791 : (num5 = 1261385441);
                continue;
              case 12:
                int num6;
                num2 = num6 = num1 != 1 ? 1894179860 : (num6 = 295072850);
                continue;
              case 13:
                num2 = (int) num3 * 1689624806 ^ -875581296;
                continue;
              case 14:
                goto label_1;
              case 15:
                enumerator = this.m_Dict.GetEnumerator();
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * -1231413521 ^ 772215256;
                continue;
              case 16:
                num2 = (int) num3 * -1407833709 ^ -656098206;
                continue;
              case 17:
                enumerator = new Dictionary<string, JSONNode>.Enumerator();
                num2 = (int) num3 * -1176856472 ^ 573624668;
                continue;
              case 18:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * -866386970 ^ 539385146;
                continue;
              case 19:
                childs = false;
                num2 = (int) num3 * -1650240537 ^ -559133298;
                continue;
              case 20:
                num2 = (int) num3 * -1073905623 ^ -1376368857;
                continue;
              default:
                goto label_20;
            }
          }
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_20:
        return childs;
      }
    }

    public IEnumerator GetEnumerator()
    {
      bool enumerator1;
      // ISSUE: fault handler
      try
      {
        // ISSUE: reference to a compiler-generated field
        int num1 = this.\u003C\u003E1__state;
        if (num1 == 0)
          goto label_10;
label_1:
        int num2 = -1882231103;
label_2:
        Dictionary<string, JSONNode>.Enumerator enumerator;
        KeyValuePair<string, JSONNode> N;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ -915933097)) % 21U)
          {
            case 0:
            case 9:
              goto label_10;
            case 1:
              num2 = (int) num3 * 358388607 ^ -656087754;
              continue;
            case 2:
              N = enumerator.Current;
              num2 = -1689002423;
              continue;
            case 4:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E2__current = (object) N;
              num2 = (int) num3 * 559231881 ^ 1096330714;
              continue;
            case 5:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = 1;
              num2 = (int) num3 * -244047340 ^ 139801125;
              continue;
            case 6:
            case 13:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = -786900451;
              continue;
            case 7:
              int num4;
              num2 = num4 = enumerator.MoveNext() ? -1506128127 : (num4 = -1066009293);
              continue;
            case 8:
              goto label_21;
            case 10:
              enumerator = new Dictionary<string, JSONNode>.Enumerator();
              num2 = (int) num3 * 1307069761 ^ 961450631;
              continue;
            case 11:
              enumerator1 = false;
              num2 = -1564912301;
              continue;
            case 12:
              goto label_3;
            case 14:
              goto label_1;
            case 15:
              int num5;
              num2 = num5 = num1 != 1 ? -1552296816 : (num5 = -148780604);
              continue;
            case 16:
              num2 = (int) num3 * -686109955 ^ -866575073;
              continue;
            case 17:
              enumerator = this.m_Dict.GetEnumerator();
              num2 = (int) num3 * -580150530 ^ -1739005148;
              continue;
            case 18:
              // ISSUE: reference to a compiler-generated method
              this.\u003C\u003Em__Finally1();
              num2 = (int) num3 * 690723916 ^ 726095264;
              continue;
            case 19:
              N = new KeyValuePair<string, JSONNode>();
              num2 = (int) num3 * -539638338 ^ -1236599806;
              continue;
            case 20:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = (int) num3 * -456176831 ^ 2069903609;
              continue;
            default:
              goto label_19;
          }
        }
label_3:
        enumerator1 = true;
        goto label_21;
label_19:
        enumerator1 = false;
        goto label_21;
label_10:
        // ISSUE: reference to a compiler-generated field
        this.\u003C\u003E1__state = -1;
        num2 = -1220355655;
        goto label_2;
      }
      __fault
      {
        // ISSUE: reference to a compiler-generated method
        this.System\u002EIDisposable\u002EDispose();
      }
label_21:
      return enumerator1;
    }

    public override string ToString()
    {
      string str1 = "{";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_6:
        int num1 = enumerator.MoveNext() ? 1394168430 : (num1 = 235458905);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1036386991)) % 10U)
          {
            case 0:
              num1 = (int) num2 * -656404522 ^ -244576098;
              continue;
            case 1:
              current = enumerator.Current;
              num1 = 1031339086;
              continue;
            case 2:
              int num3 = flag ? -445194322 : (num3 = -153743375);
              num1 = num3 ^ (int) num2 * 319651613;
              continue;
            case 3:
              str1 = JSONClass.\u202E‏‪‪⁯⁭⁭​‏‏⁬⁫⁭‫‎⁪‎‌⁪‎⁬‭‮‍⁪‌‏⁭‮‬‪‎‬​⁪​⁪‬⁯⁪‮(str1, ", ");
              num1 = (int) num2 * 773625056 ^ 315550851;
              continue;
            case 5:
              goto label_6;
            case 6:
              flag = JSONClass.\u200E⁭‪‏⁫⁫‬‬⁮‬‭‭‌⁫⁫‪‫‫⁮‫⁯‫⁯‪⁯⁪‪⁭⁬⁮‎⁬⁬‪‪⁭‭⁭‮⁬‮(str1) > 2;
              num1 = (int) num2 * -1629768770 ^ 1359766197;
              continue;
            case 7:
              num1 = 1394168430;
              continue;
            case 8:
              str1 = JSONClass.\u206A⁫​‭‍‪⁭‮‭‪‬‮⁮⁭‎⁪‪​‌‫‬⁬‌⁯‫⁪‮‬⁭‍‏‭⁮⁯⁬‌‌⁬⁪‭‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u206F‎‭‫‏‏⁭‏‫‏‭‏‮⁮‏⁮‌‭‮​‍‎‪⁬⁯‬‎‎‌‫‪⁭⁪‪‌⁪‪⁬​⁮‮((object) current.Value)
              });
              num1 = 754961817;
              continue;
            case 9:
              num1 = (int) num2 * 746079235 ^ -1704916516;
              continue;
            default:
              goto label_13;
          }
        }
      }
label_13:
      string str2 = JSONClass.\u202E‏‪‪⁯⁭⁭​‏‏⁬⁫⁭‫‎⁪‎‌⁪‎⁬‭‮‍⁪‌‏⁭‮‬‪‎‬​⁪​⁪‬⁯⁪‮(str1, "}");
label_14:
      int num4 = 1293500098;
      string str3;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ 1036386991)) % 4U)
        {
          case 0:
            num4 = (int) num5 * -1131823532 ^ -1741752875;
            continue;
          case 1:
            str3 = str2;
            num4 = (int) num5 * -1927622547 ^ -1098111426;
            continue;
          case 3:
            goto label_14;
          default:
            goto label_18;
        }
      }
label_18:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
      string str = "{ ";
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_10:
        int num1 = !enumerator.MoveNext() ? -549818723 : (num1 = -1023495446);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -535739677)) % 9U)
          {
            case 1:
              num1 = (int) num2 * -1151509203 ^ 1544604435;
              continue;
            case 2:
              int num3 = JSONClass.\u200E⁭‪‏⁫⁫‬‬⁮‬‭‭‌⁫⁫‪‫‫⁮‫⁯‫⁯‪⁯⁪‪⁭⁬⁮‎⁬⁬‪‪⁭‭⁭‮⁬‮(str) > 3 ? 657805969 : (num3 = 571928932);
              num1 = num3 ^ (int) num2 * -166679444;
              continue;
            case 3:
              current = enumerator.Current;
              num1 = -2077759110;
              continue;
            case 4:
              str = JSONClass.\u202E‏‪‪⁯⁭⁭​‏‏⁬⁫⁭‫‎⁪‎‌⁪‎⁬‭‮‍⁪‌‏⁭‮‬‪‎‬​⁪​⁪‬⁯⁪‮(str, ", ");
              num1 = (int) num2 * -865619501 ^ 1625988306;
              continue;
            case 5:
              num1 = -1023495446;
              continue;
            case 6:
              goto label_10;
            case 7:
              str = JSONClass.\u200C⁫‏‬‎‮⁭⁭‌‬‬⁮⁫‭‫⁭‮⁫⁮‪‫⁭⁫⁪⁬⁬‍‬‍⁪‬⁫‍⁪‬‬‌⁬‏‭‮(str, "\n", aPrefix, "   ");
              num1 = -1848076782;
              continue;
            case 8:
              str = JSONClass.\u206A⁫​‭‍‪⁭‮‭‪‬‮⁮⁭‎⁪‪​‌‫‬⁬‌⁯‫⁪‮‬⁭‍‏‭⁮⁯⁬‌‌⁬⁪‭‮(new string[5]
              {
                str,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u202E‏‪‪⁯⁭⁭​‏‏⁬⁫⁭‫‎⁪‎‌⁪‎⁬‭‮‍⁪‌‏⁭‮‬‪‎‬​⁪​⁪‬⁯⁪‮(aPrefix, "   "))
              });
              num1 = (int) num2 * 482645660 ^ 1182494925;
              continue;
            default:
              goto label_16;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_12:
        int num4 = -59283778;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ -535739677)) % 3U)
          {
            case 0:
              goto label_12;
            case 1:
              num4 = (int) num5 * 235008969 ^ -2096478498;
              continue;
            default:
              goto label_15;
          }
        }
label_15:;
      }
label_16:
      return JSONClass.\u200C⁫‏‬‎‮⁭⁭‌‬‬⁮⁫‭‫⁭‮⁫⁮‪‫⁭⁫⁪⁬⁬‍‬‍⁪‬⁫‍⁪‬‬‌⁬‏‭‮(str, "\n", aPrefix, "}");
    }

    public override void Serialize(BinaryWriter aWriter)
    {
      JSONClass.\u200C‌‮⁬‍‫⁮⁪‍⁫⁫‌‏‫‮⁬⁯‍⁯⁫⁮‮⁪‪⁫‬⁮‬‍‮‍‍⁬​⁮⁪‭⁬⁬‎‮(aWriter, (byte) 2);
label_1:
      int num1 = 100202199;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 59208485)) % 5U)
        {
          case 1:
            num1 = (int) num2 * 1360718143 ^ -1462461932;
            continue;
          case 2:
            num1 = (int) num2 * 1301097136 ^ 732288673;
            continue;
          case 3:
            JSONClass.\u200E⁭‪‭​‏‭​‭‌‍‍‏‎‌⁯‌‎‬‭‪‮‫⁭‎‌‌⁪‫⁫‎‪‎‌‪‍​‭‫‍‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * 258066766 ^ 1924908254;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator();
      try
      {
label_10:
        int num3 = enumerator.MoveNext() ? 914849515 : (num3 = 1946875347);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 59208485)) % 9U)
          {
            case 0:
              goto label_10;
            case 1:
              num3 = (int) num4 * 1391015240 ^ -1878994408;
              continue;
            case 2:
              num3 = (int) num4 * -1247872441 ^ 1210057798;
              continue;
            case 3:
              num3 = 914849515;
              continue;
            case 4:
              JSONClass.\u202A⁯‏⁯⁪⁫‬​​⁮‬‬⁭‎​‎‪‏‪‪‭⁮‭⁫‫‬‭⁫‪‪‏‏‮⁯‎‫‬‍‪‌‮(aWriter, current);
              num3 = (int) num4 * -2088283262 ^ 327111188;
              continue;
            case 5:
              current = enumerator.Current;
              num3 = 2084023701;
              continue;
            case 6:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -488347816 ^ 838978714;
              continue;
            case 7:
              goto label_21;
            case 8:
              num3 = (int) num4 * 570937661 ^ 1605555908;
              continue;
            default:
              goto label_17;
          }
        }
label_21:
        return;
label_17:;
      }
      finally
      {
        enumerator.Dispose();
label_19:
        int num5 = 752510161;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 59208485)) % 3U)
          {
            case 0:
              goto label_19;
            case 2:
              num5 = (int) num6 * 1199636618 ^ 20899904;
              continue;
            default:
              goto label_23;
          }
        }
label_23:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = -1362135352;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -979202864)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1694918923 ^ -1064419472;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u206D​⁬‪‏​‍‬⁫⁭‎‌‌‌‬‪‪‪⁯⁬⁭⁫⁬⁬‪‏‭⁯‪⁪‪⁫‌⁫‏‍‎⁫‍‍‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u200E⁭‪‏⁫⁫‬‬⁮‬‭‭‌⁫⁫‪‫‫⁮‫⁯‫⁯‪⁯⁪‪⁭⁬⁮‎⁬⁬‪‪⁭‭⁭‮⁬‮([In] string obj0) => obj0.Length;

    static string \u202E‏‪‪⁯⁭⁭​‏‏⁬⁫⁭‫‎⁪‎‌⁪‎⁬‭‮‍⁪‌‏⁭‮‬‪‎‬​⁪​⁪‬⁯⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206F‎‭‫‏‏⁭‏‫‏‭‏‮⁮‏⁮‌‭‮​‍‎‪⁬⁯‬‎‎‌‫‪⁭⁪‪‌⁪‪⁬​⁮‮([In] object obj0) => obj0.ToString();

    static string \u206A⁫​‭‍‪⁭‮‭‪‬‮⁮⁭‎⁪‪​‌‫‬⁬‌⁯‫⁪‮‬⁭‍‏‭⁮⁯⁬‌‌⁬⁪‭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C⁫‏‬‎‮⁭⁭‌‬‬⁮⁫‭‫⁭‮⁫⁮‪‫⁭⁫⁪⁬⁬‍‬‍⁪‬⁫‍⁪‬‬‌⁬‏‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u200C‌‮⁬‍‫⁮⁪‍⁫⁫‌‏‫‮⁬⁯‍⁯⁫⁮‮⁪‪⁫‬⁮‬‍‮‍‍⁬​⁮⁪‭⁬⁬‎‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200E⁭‪‭​‏‭​‭‌‍‍‏‎‌⁯‌‎‬‭‪‮‫⁭‎‌‌⁪‫⁫‎‪‎‌‪‍​‭‫‍‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202A⁯‏⁯⁪⁫‬​​⁮‬‬⁭‎​‎‪‏‪‪‭⁮‭⁫‫‬‭⁫‪‪‏‏‮⁯‎‫‬‍‪‌‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
