// Decompiled with JetBrains decompiler
// Type: WatsonDialog.RegistryInteractor
// Assembly: SQLWTSN, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91
// MVID: B7E612C0-B21E-4017-B4A7-EBA59D4A8946
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Sality.s-1b4b3cfe8e30ba88e06785f2da286fa3cef5ee32740497f600b5bc50478fe6c6.exe

using Microsoft.Win32;
using System;
using System.Globalization;

namespace WatsonDialog
{
  internal static class RegistryInteractor
  {
    internal static bool SetRegKeyValue(
      RegistryKey baseKey,
      string keyStr,
      string keyNameStr,
      object value,
      string settingsType,
      string component)
    {
      return RegistryInteractor.SetRegKeyValue(baseKey, keyStr, keyNameStr, value, string.Format((IFormatProvider) CultureInfo.InvariantCulture, Constants.UPDATE_ERROR_SPECIFIC, new object[2]
      {
        (object) settingsType,
        (object) component
      }));
    }

    internal static bool SetRegKeyValue(
      RegistryKey baseKey,
      string keyStr,
      string keyNameStr,
      object value,
      string errorMsg)
    {
      RegistryKey regKey = RegistryInteractor.GetRegKey(baseKey, keyStr, errorMsg, true);
      if (regKey == null)
        return false;
      regKey.SetValue(keyNameStr, value);
      return true;
    }

    internal static object GetRegKeyValue(
      RegistryKey baseKey,
      string keyStr,
      string keyNameStr,
      string settingsType,
      string component)
    {
      return RegistryInteractor.GetRegKeyValue(baseKey, keyStr, keyNameStr, string.Format((IFormatProvider) CultureInfo.InvariantCulture, Constants.ACCESS_ERROR_SPECIFIC, new object[2]
      {
        (object) settingsType,
        (object) component
      }));
    }

    internal static object GetRegKeyValue(
      RegistryKey baseKey,
      string keyStr,
      string keyNameStr,
      string errorMsg)
    {
      return RegistryInteractor.GetRegKey(baseKey, keyStr, errorMsg)?.GetValue(keyNameStr);
    }

    internal static object GetRegKeyValue(RegistryKey baseKey, string keyStr, string keyNameStr) => RegistryInteractor.GetRegKey(baseKey, keyStr, (string) null, false)?.GetValue(keyNameStr);

    internal static RegistryKey GetRegKey(
      RegistryKey baseKey,
      string keyStr,
      string errorMsg)
    {
      return RegistryInteractor.GetRegKey(baseKey, keyStr, errorMsg, true);
    }

    internal static RegistryKey GetRegKey(
      RegistryKey baseKey,
      string keyStr,
      string errorMsg,
      bool showError)
    {
      RegistryKey regKey = baseKey.OpenSubKey(keyStr, true);
      if (regKey == null && showError)
      {
        int num = (int) ErrorHandler.Error(errorMsg);
      }
      return regKey;
    }

    internal static bool KeyExists(RegistryKey baseKey, string keyName) => baseKey.OpenSubKey(keyName, true) != null;

    internal static RegistryKey[] GetSubRegKeys(RegistryKey baseKey)
    {
      string[] subKeyNames = baseKey.GetSubKeyNames();
      RegistryKey[] subRegKeys = new RegistryKey[subKeyNames.Length];
      int index = 0;
      foreach (string name in subKeyNames)
      {
        RegistryKey registryKey = baseKey.OpenSubKey(name);
        if (registryKey == null)
        {
          string str = Constants.UNKNOWN_SERVICE;
          switch (name)
          {
            case "OLAP":
              str = Constants.COMPONENT_ANALYSIS_SERVER_STRING;
              break;
            case "RS":
              str = Constants.COMPONENT_REPORT_SERVER_STRING;
              break;
            case "SQL":
              str = Constants.COMPONENT_SQL_SERVER_STRING;
              break;
          }
          int num = (int) ErrorHandler.Error(string.Format((IFormatProvider) CultureInfo.InvariantCulture, Constants.ACCESS_ERROR, new object[1]
          {
            (object) str
          }));
        }
        else
        {
          subRegKeys[index] = registryKey;
          ++index;
        }
      }
      return subRegKeys;
    }
  }
}
