// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.Querying.OperatorClause
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace DataAccessFramework.Querying
{
  public class OperatorClause : WherePart
  {
    private readonly string _operatorName;
    private readonly List<WherePart> _parts;

    private IEnumerable<WherePart> ActiveParts
    {
      get
      {
label_1:
        int num1 = 229722154;
        IEnumerable<WherePart> activeParts;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1351802083)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              activeParts = this._parts.Where<WherePart>((Func<WherePart, bool>) (x => x.Active));
              num1 = 1865363069;
              continue;
            case 2:
              num1 = (int) num2 * 1516298044 ^ -451643384;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return activeParts;
      }
    }

    public override bool Active
    {
      get
      {
label_1:
        int num1 = 805757941;
        bool active;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 574748154)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -1322585653 ^ 1948865699;
              continue;
            case 2:
              goto label_1;
            case 3:
              active = this._parts.Exists((Predicate<WherePart>) (x => x.Active));
              num1 = 1067154438;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return active;
      }
    }

    public OperatorClause(string operatorName, params WherePart[] parts)
    {
label_1:
      int num1 = -434851598;
      int index;
      WherePart[] wherePartArray;
      WherePart clause;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1286118185)) % 11U)
        {
          case 0:
            wherePartArray = parts;
            index = 0;
            num1 = (int) num2 * 1264922313 ^ 1791356704;
            continue;
          case 1:
            this._parts = new List<WherePart>();
            num1 = (int) num2 * 31464444 ^ 1970430212;
            continue;
          case 2:
            this._operatorName = operatorName;
            num1 = (int) num2 * 586137330 ^ -268956224;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num3;
            num1 = num3 = index >= wherePartArray.Length ? -1184777498 : (num3 = -1960830233);
            continue;
          case 5:
            num1 = (int) num2 * 1307748260 ^ -947533015;
            continue;
          case 6:
            clause = wherePartArray[index];
            num1 = -390376019;
            continue;
          case 7:
            num1 = (int) num2 * -649292214 ^ 637330910;
            continue;
          case 8:
            goto label_3;
          case 9:
            ++index;
            num1 = (int) num2 * 61952453 ^ -518867448;
            continue;
          case 10:
            this.AddPart(clause);
            num1 = (int) num2 * -20974644 ^ -1353521052;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal override void BuildSql(BuildSqlContext context)
    {
label_1:
      int num1 = -462596192;
      List<WherePart> wherePartList;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1932736416)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -1717834512 ^ -1783943581;
            continue;
          case 1:
            num1 = (int) num2 * 1042591483 ^ -2108226516;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_8;
          case 4:
            int num3 = !flag2 ? 958213683 : (num3 = 1877185331);
            num1 = num3 ^ (int) num2 * -618292164;
            continue;
          case 6:
            wherePartList = new List<WherePart>(this.ActiveParts);
            flag2 = wherePartList.Count == 0;
            num1 = (int) num2 * -1797853138 ^ 926010038;
            continue;
          case 7:
            goto label_9;
          case 8:
            flag1 = false;
            OperatorClause.\u206F⁬‬‮⁪‫⁮‏‫⁮‍‫⁭⁮‏⁯‪‎‭⁭‮⁮‍⁮‌​‬‪⁯⁮‮​‭⁭‪⁬‌⁮⁭‫‮(context.Builder, \u003CModule\u003E.\u200B‫‫‫⁯⁫‫‫⁬‪‪​‫⁮⁪⁪⁭‬‮⁬​‪‍‎‏⁫‬⁫‫‬‬⁫‭‍‏⁯‪⁪‫‮‮<string>(3534038246U));
            num1 = -1630449455;
            continue;
          case 9:
            int num4;
            num1 = num4 = wherePartList.Count == 1 ? -1135976568 : (num4 = -559926150);
            continue;
          default:
            goto label_11;
        }
      }
label_9:
      return;
label_8:
      wherePartList[0].BuildSql(context);
      return;
label_11:
      using (List<WherePart>.Enumerator enumerator = wherePartList.GetEnumerator())
      {
label_16:
        int num5 = !enumerator.MoveNext() ? -1859549768 : (num5 = -1884104325);
        WherePart current;
        bool flag3;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -1932736416)) % 12U)
          {
            case 0:
              goto label_16;
            case 1:
              num5 = (int) num6 * -198868793 ^ 1346098445;
              continue;
            case 2:
              num5 = (int) num6 * 595183198 ^ 1788191405;
              continue;
            case 3:
              current.BuildSql(context);
              num5 = -2022259335;
              continue;
            case 4:
              int num7 = flag3 ? -261309242 : (num7 = -982433149);
              num5 = num7 ^ (int) num6 * 236766027;
              continue;
            case 5:
              OperatorClause.\u206F⁬‬‮⁪‫⁮‏‫⁮‍‫⁭⁮‏⁯‪‎‭⁭‮⁮‍⁮‌​‬‪⁯⁮‮​‭⁭‪⁬‌⁮⁭‫‮(context.Builder, \u003CModule\u003E.\u200B‫‫‫⁯⁫‫‫⁬‪‪​‫⁮⁪⁪⁭‬‮⁬​‪‍‎‏⁫‬⁫‫‬‬⁫‭‍‏⁯‪⁪‫‮‮<string>(3299337640U));
              num5 = (int) num6 * -329650865 ^ 1856514000;
              continue;
            case 6:
              flag1 = true;
              num5 = (int) num6 * 2101911651 ^ 636013366;
              continue;
            case 7:
              num5 = -1884104325;
              continue;
            case 9:
              OperatorClause.\u206F⁬‬‮⁪‫⁮‏‫⁮‍‫⁭⁮‏⁯‪‎‭⁭‮⁮‍⁮‌​‬‪⁯⁮‮​‭⁭‪⁬‌⁮⁭‫‮(context.Builder, \u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(2644259901U));
              OperatorClause.\u206F⁬‬‮⁪‫⁮‏‫⁮‍‫⁭⁮‏⁯‪‎‭⁭‮⁮‍⁮‌​‬‪⁯⁮‮​‭⁭‪⁬‌⁮⁭‫‮(context.Builder, this._operatorName);
              num5 = (int) num6 * -1680174708 ^ 541608261;
              continue;
            case 10:
              flag3 = flag1;
              num5 = (int) num6 * -1664184712 ^ -2065829012;
              continue;
            case 11:
              current = enumerator.Current;
              num5 = -1066180322;
              continue;
            default:
              goto label_26;
          }
        }
      }
label_26:
      OperatorClause.\u206F⁬‬‮⁪‫⁮‏‫⁮‍‫⁭⁮‏⁯‪‎‭⁭‮⁮‍⁮‌​‬‪⁯⁮‮​‭⁭‪⁬‌⁮⁭‫‮(context.Builder, \u003CModule\u003E.\u200B‫‫‫⁯⁫‫‫⁬‪‪​‫⁮⁪⁪⁭‬‮⁬​‪‍‎‏⁫‬⁫‫‬‬⁫‭‍‏⁯‪⁪‫‮‮<string>(2994280646U));
    }

    public void AddPart(WherePart clause)
    {
label_1:
      int num1 = 1176953092;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 267319853)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            int num3 = clause != null ? -966346821 : (num3 = -1814235865);
            num1 = num3 ^ (int) num2 * 647866131;
            continue;
          case 2:
            num1 = (int) num2 * 1499281965 ^ -136942019;
            continue;
          case 3:
            goto label_1;
          case 4:
            this._parts.Add(clause);
            num1 = (int) num2 * 636363943 ^ 1923731891;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public int Count
    {
      get
      {
label_1:
        int num1 = -817336651;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2018492580)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              count = this._parts.Count;
              num1 = (int) num2 * -1733413198 ^ -890299059;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public bool Empty
    {
      get
      {
label_1:
        int num1 = -1841004583;
        bool empty;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1397890686)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -797370747 ^ 1124424505;
              continue;
            case 3:
              empty = this._parts.Count == 0;
              num1 = (int) num2 * 1694231538 ^ 185432790;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return empty;
      }
    }

    public ReadOnlyCollection<WherePart> Parts
    {
      get
      {
        ReadOnlyCollection<WherePart> parts = this._parts.AsReadOnly();
label_1:
        int num1 = -1139999808;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1121042568)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -234556928 ^ 2087607158;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return parts;
      }
    }

    static StringBuilder \u206F⁬‬‮⁪‫⁮‏‫⁮‍‫⁭⁮‏⁯‪‎‭⁭‮⁮‍⁮‌​‬‪⁯⁮‮​‭⁭‪⁬‌⁮⁭‫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.Append(obj1);
    }
  }
}
