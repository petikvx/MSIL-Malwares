// Decompiled with JetBrains decompiler
// Type: RemnantSaveManager.SaveBackup
// Assembly: RemnantSaveManager, Version=1.99.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E1F1E8C4-E528-4D7B-AF51-D8C10E64558F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f3e011fb43f226885e514c92638da2db70d78fd53ee94ab2ab476bc588ebc0ea.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;

namespace RemnantSaveManager
{
  public class SaveBackup : IEditableObject
  {
    private SaveBackup.SaveData saveData;
    private SaveBackup.SaveData backupData;
    private bool inTxn = false;
    private RemnantSave save;

    public event EventHandler<UpdatedEventArgs> Updated;

    public string Name
    {
      get => this.saveData.name;
      set
      {
        if (value.Equals(""))
          this.saveData.name = this.saveData.date.Ticks.ToString();
        else
          this.saveData.name = value;
      }
    }

    public DateTime SaveDate
    {
      get => this.saveData.date;
      set => this.saveData.date = value;
    }

    public string Progression => string.Join<RemnantCharacter>(",", (IEnumerable<RemnantCharacter>) this.save.Characters);

    public bool Keep
    {
      get => this.saveData.keep;
      set => this.saveData.keep = value;
    }

    public bool Active
    {
      get => this.saveData.active;
      set => this.saveData.active = value;
    }

    public RemnantSave Save => this.save;

    public SaveBackup(string savePath)
    {
      this.saveData = new SaveBackup.SaveData();
      this.saveData.name = this.SaveDateTime.Ticks.ToString();
      this.saveData.date = this.SaveDateTime;
      this.saveData.keep = false;
    }

    void IEditableObject.BeginEdit()
    {
      if (this.inTxn)
        return;
      this.backupData = this.saveData;
      this.inTxn = true;
    }

    void IEditableObject.CancelEdit()
    {
      if (!this.inTxn)
        return;
      this.saveData = this.backupData;
      this.inTxn = false;
    }

    void IEditableObject.EndEdit()
    {
      if (!this.inTxn)
        return;
      if (!this.backupData.name.Equals(this.saveData.name))
        this.OnUpdated(new UpdatedEventArgs("Name"));
      if (!this.backupData.date.Equals(this.saveData.date))
        this.OnUpdated(new UpdatedEventArgs("SaveDate"));
      if (!this.backupData.keep.Equals(this.saveData.keep))
        this.OnUpdated(new UpdatedEventArgs("Keep"));
      if (!this.backupData.active.Equals(this.saveData.active))
        this.OnUpdated(new UpdatedEventArgs("Active"));
      this.backupData = new SaveBackup.SaveData();
      this.inTxn = false;
    }

    public void OnUpdated(UpdatedEventArgs args)
    {
      EventHandler<UpdatedEventArgs> updated = this.Updated;
      if (updated == null)
        return;
      updated((object) this, args);
    }

    private DateTime SaveDateTime => File.GetLastWriteTime(this.save.SaveProfilePath);

    private struct SaveData
    {
      internal string name;
      internal DateTime date;
      internal bool keep;
      internal bool active;
    }
  }
}
