// Decompiled with JetBrains decompiler
// Type: Core.Services.ShowService
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Helpers;
using DomainObjects;
using Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace Core.Services
{
  public class ShowService : IShowService
  {
    private readonly IShowRepository _ShowRepository;
    private readonly ISetRepository _SetRepository;
    private readonly ISetSongRepository _SetSongRepository;

    public ShowService(
      IShowRepository showRepository,
      ISetRepository setRepository,
      ISetSongRepository setSongRepository)
    {
      Checks.Argument.IsNotNull((object) showRepository, nameof (showRepository));
      Checks.Argument.IsNotNull((object) setRepository, nameof (setRepository));
      Checks.Argument.IsNotNull((object) setSongRepository, nameof (setSongRepository));
      this._ShowRepository = showRepository;
      this._SetRepository = setRepository;
      this._SetSongRepository = setSongRepository;
    }

    public IList<ISetSong> GetSetList(DateTime showDate)
    {
      IShow byShowDate = this._ShowRepository.FindByShowDate(showDate);
      if (byShowDate == null)
        return (IList<ISetSong>) null;
      List<ISet> list = this._SetRepository.FindByShowId(byShowDate.ShowId).OrderBy<ISet, short>((Expression<Func<ISet, short>>) (x => x.SetNumber.Value)).ToList<ISet>();
      List<ISetSong> setList = new List<ISetSong>();
      Action<ISet> action = (Action<ISet>) (set => setList.AddRange((IEnumerable<ISetSong>) this._SetSongRepository.FindBySetId(set.SetId)));
      list.ForEach(action);
      return (IList<ISetSong>) setList;
    }
  }
}
