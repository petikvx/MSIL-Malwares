// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: 生ث, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8221468-4DC3-4423-BEC3-5B04CD1AB276
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2570b1f0780a754b70c2ec5525da16952c9634a2da6b21c92693380529daffe2.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1782214993;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1273992475)) % 6U)
          {
            case 0:
              goto label_3;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -927349493 ^ -994228692;
              continue;
            case 2:
              comparand = eventHandler1;
              num1 = 1632432446;
              continue;
            case 3:
              eventHandler2 = (EventHandler) Square.\u206F‬‪‎‫‌⁯‎‍‍‏‎‬‮‪⁬⁫‍⁮⁭‭‮⁭​‭‫​‎‭‮‌⁯⁮‎‍‏‌​‬⁬‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * 1265873483 ^ -1217002957;
              continue;
            case 4:
              int num3 = eventHandler1 == comparand ? 850063173 : (num3 = 1075770745);
              num1 = num3 ^ (int) num2 * -1510326124;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -681281488;
        EventHandler eventHandler2;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1435464480)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 != comparand ? 270098018 : (num3 = 1960948983);
              num1 = num3 ^ (int) num2 * -842829598;
              continue;
            case 2:
              comparand = eventHandler1;
              num1 = -684593614;
              continue;
            case 3:
              eventHandler2 = (EventHandler) Square.\u206F​‍⁬‎‪‬‮‫⁫⁯⁮‏⁪⁫​‌⁮⁮‭‏‏​‮‪‫⁫‬⁬‮‎‪⁫⁯⁭⁫‏⁯⁯‪‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -1669909689 ^ 2056589543;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = -651650392;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1007855017)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              specialName = Square.\u200D‏​⁬‍‏‪⁭‌‍⁪‍⁮‍‮⁪‭‍⁭‏‬‌‏‫⁯‌‏‮‍‫⁭​⁮‍‍‮‬⁫⁮‏‮(this.CurrentSquare, \u003CModule\u003E.\u200F​‬⁬‎‭⁮​‌‮‭⁮‌⁭⁮​‏‮⁮‫‍​​‭⁪‬‬‪⁮⁯‬​​⁬‌‫⁯‍⁪⁯‮<string>(1403358123U), Square.\u202D‍‌‪​‬⁭‭⁭⁬‬‎⁫⁫​⁭‫‭⁯⁮⁮‌⁯⁫‪​‮‫‪‎⁪‮⁪‪‪‬⁮⁪⁫‫‮((object) this.Piece));
              num1 = (int) num2 * -965489043 ^ -381169431;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = 805092699;
        char ch;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 913185218)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1351455982 ^ -1565534539;
              continue;
            case 2:
              currentSquare = Square.\u202E⁪⁪⁬‪‌‬‭‮‏‮⁮​‏⁭‬‬‫⁫‭‪‬‌‪⁯‪‎‎‏⁪⁬⁭‎‫‏‪⁪‭⁯⁭‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -1941563320 ^ -279599258;
              continue;
            case 3:
              ch = Square.\u206D⁭‮‫‫‌‍⁪‭⁭‮⁫​⁭‭‌⁯⁭⁯⁬‭⁪⁪‭‍⁬⁯‬‫‪‏‮⁯‫⁬⁭‪‍‏⁪‮(\u003CModule\u003E.\u200F​‬⁬‎‭⁮​‌‮‭⁮‌⁭⁮​‏‮⁮‫‍​​‭⁪‬‬‪⁮⁯‬​​⁬‌‫⁯‍⁪⁯‮<string>(62814464U), this.File);
              num1 = (int) num2 * -1675644715 ^ 329445503;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = -1381664736;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -885458669)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * 1003103605 ^ -802328087;
              continue;
            }
            goto label_5;
          case 2:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
      this.Board = Board;
      this.File = file;
      this.Rank = rank;
      this.Name = Square.\u202E⁪⁪⁬‪‌‬‭‮‏‮⁮​‏⁭‬‬‫⁫‭‪‬‌‪⁯‪‎‎‏⁪⁬⁭‎‫‏‪⁪‭⁯⁭‮(Square.\u206D⁭‮‫‫‌‍⁪‭⁭‮⁫​⁭‭‌⁯⁭⁯⁬‭⁪⁪‭‍⁬⁯‬‫‪‏‮⁯‫⁬⁭‪‍‏⁪‮(\u003CModule\u003E.\u200E‏‪‮‫‌‮⁭⁬⁯⁯‌‪​⁭‌⁬‍⁮‏‬⁫​⁬⁬​​‎‮‪‎‏‫​‪⁮​‭‫‬‮<string>(466258835U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
label_1:
      int num1 = 711092657;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 152634222)) % 6U)
        {
          case 0:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * 156426572 ^ 1194963498;
            continue;
          case 1:
            this.InitializeComponent();
            num1 = (int) num2 * -540434236 ^ 1346596785;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1802191082 ^ -1898175520;
            continue;
          case 4:
            num1 = (int) num2 * -1095971865 ^ -264025859;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void SwitchPlayer()
    {
      if (this.Board.DisableTurns)
        return;
label_1:
      int num1 = -26129203;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1344328106)) % 9U)
        {
          case 0:
            num1 = -1024164535;
            continue;
          case 1:
            num1 = (int) num2 * -1163365811 ^ 250771833;
            continue;
          case 2:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -846793883;
            continue;
          case 3:
            int num3 = flag ? -1824255453 : (num3 = -356401771);
            num1 = num3 ^ (int) num2 * -969614553;
            continue;
          case 4:
            flag = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * 1986281646 ^ -1247296414;
            continue;
          case 5:
            num1 = (int) num2 * 525232955 ^ -1133514744;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * -1227490050 ^ -2035017169;
            continue;
          case 8:
            goto label_11;
          default:
            goto label_12;
        }
      }
label_11:
      return;
label_12:;
    }

    private bool getSide(Square x)
    {
      if (this.Board.DisableTurns)
        goto label_4;
label_1:
      int num1 = -1131409881;
label_2:
      uint num2;
      bool side;
      int num3;
      switch ((num2 = (uint) (num1 ^ -657346445)) % 3U)
      {
        case 0:
          goto label_1;
        case 1:
          num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
          goto label_5;
        default:
          return side;
      }
label_4:
      num3 = 1;
label_5:
      side = num3 != 0;
      num1 = -913862385;
      goto label_2;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = -919589710;
      while (true)
      {
        uint num2;
        bool side;
        List<PossibleMoves> move1;
        bool flag1;
        bool flag2;
        bool disableTurns;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        List<PossibleMoves> move2;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ -281760492)) % 81U)
        {
          case 0:
            this.msg = \u003CModule\u003E.\u202C‍‌⁪‍⁭‭⁮‌‬‫​​⁫⁫‬⁭‎‍⁬⁮‌‬‭⁫⁮‫⁮⁮‌‫‪⁯‌⁮⁮⁫‭⁯‬‮<string>(271462670U);
            num1 = (int) num2 * 1360277427 ^ -1341425550;
            continue;
          case 1:
            flag4 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * 1456504097 ^ -1393011108;
            continue;
          case 2:
            num1 = (int) num2 * 2004771109 ^ -287812923;
            continue;
          case 3:
            side = this.getSide(this.Board.From);
            num1 = -911974077;
            continue;
          case 4:
            num1 = (int) num2 * -208081708 ^ -130515846;
            continue;
          case 5:
            num1 = (int) num2 * -2105690340 ^ -1289843121;
            continue;
          case 6:
            num1 = (int) num2 * -530672624 ^ -281273711;
            continue;
          case 7:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1419575007 ^ 1300065037;
            continue;
          case 8:
            int num5 = !flag2 ? -556795176 : (num5 = -1632055196);
            num1 = num5 ^ (int) num2 * -1136767369;
            continue;
          case 9:
            num1 = (int) num2 * -1509525326 ^ 1959168681;
            continue;
          case 10:
            to.MovePawn(this.Board.From);
            num1 = -867927980;
            continue;
          case 11:
            int num6 = flag5 ? 1070517602 : (num6 = 186491481);
            num1 = num6 ^ (int) num2 * 9591856;
            continue;
          case 12:
            num1 = -1690774736;
            continue;
          case 13:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200F​‬⁬‎‭⁮​‌‮‭⁮‌⁭⁮​‏‮⁮‫‍​​‭⁪‬‬‪⁮⁯‬​​⁬‌‫⁯‍⁪⁯‮<string>(1715548809U);
            num1 = (int) num2 * 368907295 ^ -866471030;
            continue;
          case 14:
            disableTurns = this.Board.DisableTurns;
            num1 = -833512882;
            continue;
          case 15:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -645788739 ^ 1678994494;
            continue;
          case 16:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1905066525 ^ 716607568;
            continue;
          case 17:
            num1 = (int) num2 * 2075900101 ^ 2007808513;
            continue;
          case 18:
            this.Board.From = to;
            num1 = (int) num2 * 512478819 ^ -17441312;
            continue;
          case 19:
            num1 = (int) num2 * -1111498331 ^ -1207550884;
            continue;
          case 20:
            flag3 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = -812158263;
            continue;
          case 21:
            int num7 = to.Piece.Color != this.Board.From.Piece.Color ? 2009785210 : (num7 = 985255869);
            num1 = num7 ^ (int) num2 * 1201654397;
            continue;
          case 22:
            num1 = (int) num2 * 1184296358 ^ -486905988;
            continue;
          case 23:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 2128623036 ^ 1727031250;
            continue;
          case 24:
            num1 = -76606944;
            continue;
          case 25:
            this.Board.From = (Square) null;
            num1 = (int) num2 * 656973080 ^ -370287674;
            continue;
          case 26:
            this.Board.From = to;
            num1 = (int) num2 * -1456070426 ^ -1224817895;
            continue;
          case 27:
            int num8 = move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -113076826 : (num8 = -62936983);
            num1 = num8 ^ (int) num2 * 1910913057;
            continue;
          case 28:
            num1 = -76606944;
            continue;
          case 29:
            this.msg = \u003CModule\u003E.\u200B‎‍⁭‏⁭⁯‍‮‪⁫‌⁫⁪‍⁮‎⁬⁯‪⁮​‌⁯⁮⁬⁮‬⁯‪‬‌‭‪‮‎‏‪‌‮<string>(4293706769U);
            num1 = (int) num2 * 1366188817 ^ -938663447;
            continue;
          case 30:
            num1 = (int) num2 * -780096080 ^ 776685707;
            continue;
          case 31:
            num1 = (int) num2 * 1124818133 ^ 427196941;
            continue;
          case 32:
            int num9 = flag4 ? -577867236 : (num9 = -642266998);
            num1 = num9 ^ (int) num2 * -116602323;
            continue;
          case 33:
            num1 = (int) num2 * -408521113 ^ 1299204778;
            continue;
          case 34:
            num1 = -1302215189;
            continue;
          case 35:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1651703166 ^ 1086043317;
            continue;
          case 36:
            int num10;
            num1 = num10 = !flag6 ? -69279300 : (num10 = -1227972047);
            continue;
          case 37:
            num1 = (int) num2 * 465471879 ^ -425308244;
            continue;
          case 38:
            int num11 = !flag1 ? 1423836882 : (num11 = 147927472);
            num1 = num11 ^ (int) num2 * -1901861641;
            continue;
          case 39:
            num1 = (int) num2 * -2011315028 ^ 594332119;
            continue;
          case 40:
            goto label_3;
          case 41:
            this.msg = \u003CModule\u003E.\u202E‎‏⁯⁭⁯‌⁫⁬‌⁯‏‎⁯‪‬‎⁯‌⁯‫‫⁪‬⁯‭⁫‮​⁬​⁫⁫‏‬⁫‭⁪‫‮<string>(3764898005U);
            num1 = -1115058703;
            continue;
          case 42:
            num1 = (int) num2 * 1743320455 ^ -1531873598;
            continue;
          case 43:
            to = this;
            if (this.Board.From != null)
            {
              num1 = (int) num2 * 69624461 ^ 1780826359;
              continue;
            }
            num3 = 0;
            goto label_81;
          case 44:
            this.msg = \u003CModule\u003E.\u200E‏‪‮‫‌‮⁭⁬⁯⁯‌‪​⁭‌⁬‍⁮‏‬⁫​⁬⁬​​‎‮‪‎‏‫​‪⁮​‭‫‬‮<string>(1131895064U);
            num1 = (int) num2 * 1107401948 ^ -965843623;
            continue;
          case 45:
            int num12 = flag3 ? 212102064 : (num12 = 1743426109);
            num1 = num12 ^ (int) num2 * -1410267148;
            continue;
          case 46:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            goto label_81;
          case 47:
            num1 = (int) num2 * -241934443 ^ -2049661171;
            continue;
          case 48:
            num1 = (int) num2 * -1171450636 ^ -1515929872;
            continue;
          case 49:
            goto label_1;
          case 50:
            num1 = (int) num2 * -954928249 ^ -1609585733;
            continue;
          case 51:
            num1 = -18420743;
            continue;
          case 52:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = -1210571918;
            continue;
          case 53:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 912004448 ^ 293142283;
            continue;
          case 54:
            Square.action(this.msg);
            num1 = -1508439002;
            continue;
          case 55:
            int num13 = this.Board.From.Piece.Kind != Pieces.Pawn ? -1525617255 : (num13 = -972594315);
            num1 = num13 ^ (int) num2 * -815069186;
            continue;
          case 56:
            num1 = (int) num2 * 1576277162 ^ -1668334633;
            continue;
          case 57:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -1065663248 ^ 452457856;
            continue;
          case 58:
            num1 = (int) num2 * -1926711222 ^ -294696076;
            continue;
          case 59:
            to.HighLight();
            num1 = (int) num2 * -484514075 ^ 268572481;
            continue;
          case 60:
            int num14 = !disableTurns ? 77307675 : (num14 = 1505948160);
            num1 = num14 ^ (int) num2 * 1031531644;
            continue;
          case 61:
            to.HighLight();
            num1 = (int) num2 * 1524257548 ^ -1374991247;
            continue;
          case 62:
            num1 = (int) num2 * 366869575 ^ 273303900;
            continue;
          case 63:
            to.HighLight();
            this.msg = \u003CModule\u003E.\u200F​‬⁬‎‭⁮​‌‮‭⁮‌⁭⁮​‏‮⁮‫‍​​‭⁪‬‬‪⁮⁯‬​​⁬‌‫⁯‍⁪⁯‮<string>(2616167693U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 948658455 ^ -1348536961;
            continue;
          case 64:
            flag2 = Square.\u200D⁫‮‫‍⁪‏‍⁬‮‎⁯⁫‪⁭⁫‏‮‌‍‌‪‮‭‫‮‭‭‭‫⁭‫‫‫‪⁮⁬‫‬‬‮(e) == MouseButtons.Left;
            num1 = (int) num2 * -194024455 ^ -1521186489;
            continue;
          case 65:
            num1 = (int) num2 * 1136132069 ^ 1018383317;
            continue;
          case 66:
            num1 = (int) num2 * 1462397467 ^ 363633578;
            continue;
          case 67:
            this.msg = \u003CModule\u003E.\u200F​‬⁬‎‭⁮​‌‮‭⁮‌⁭⁮​‏‮⁮‫‍​​‭⁪‬‬‪⁮⁯‬​​⁬‌‫⁯‍⁪⁯‮<string>(3256627672U);
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * -1731021872 ^ -1472958902;
            continue;
          case 68:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -40873455 ^ -1869450928;
            continue;
          case 69:
            to.HighLight();
            num1 = (int) num2 * -1771109008 ^ -388258244;
            continue;
          case 70:
            this.msg = \u003CModule\u003E.\u202E‎‏⁯⁭⁯‌⁫⁬‌⁯‏‎⁯‪‬‎⁯‌⁯‫‫⁪‬⁯‭⁫‮​⁬​⁫⁫‏‬⁫‭⁪‫‮<string>(3219185214U);
            num1 = (int) num2 * -452116864 ^ -419244246;
            continue;
          case 71:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u200F‎‏⁭‭‪⁪⁫‍⁯‏‫⁮‍‪‮‍⁭⁮‮⁮⁮⁮‎⁮‎‭⁮‍‮⁬‭⁪‌‍‍‮⁮‏‏‮(\u003CModule\u003E.\u200E‏‪‮‫‌‮⁭⁬⁯⁯‌‪​⁭‌⁬‍⁮‏‬⁫​⁬⁬​​‎‮‪‎‏‫​‪⁮​‭‫‬‮<string>(471687668U), (object) move1.Count);
            num1 = (int) num2 * -99054917 ^ 1956798531;
            continue;
          case 72:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 784363599 ^ 1896129900;
            continue;
          case 73:
            num1 = (int) num2 * -2051369633 ^ -889159742;
            continue;
          case 74:
            num4 = this.getSide(to) ? 1 : 0;
            break;
          case 75:
            flag5 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * -2106155460 ^ -140968681;
            continue;
          case 76:
            num1 = (int) num2 * 1378724577 ^ -1833570532;
            continue;
          case 77:
            int num15 = side ? -1903446931 : (num15 = -1101371511);
            num1 = num15 ^ (int) num2 * 1950518783;
            continue;
          case 78:
            if (to.Piece == null)
            {
              num4 = 0;
              break;
            }
            num1 = -456822135;
            continue;
          case 79:
            num1 = (int) num2 * -1390723502 ^ -429143502;
            continue;
          case 80:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 122324988 ^ -964452837;
            continue;
          default:
            goto label_89;
        }
        int num16;
        num1 = num16 = num4 == 0 ? -1041850071 : (num16 = -949442955);
        continue;
label_81:
        flag6 = num3 != 0;
        flag1 = to.Piece == null & flag6;
        num1 = -1043731668;
      }
label_3:
      return;
label_89:;
    }

    private void hideMoves(Square to)
    {
      if (this.Board.From == null)
        return;
label_1:
      int num1 = -109376984;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2089531062)) % 5U)
        {
          case 0:
            goto label_7;
          case 1:
            num1 = (int) num2 * 64518252 ^ 1413779341;
            continue;
          case 2:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1366575157 ^ 1040406455;
            continue;
          case 3:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -1420459356 ^ -1560002399;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_7:
      return;
label_8:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = -1329145962;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -49225988)) % 31U)
        {
          case 0:
            num1 = (int) num2 * 1615837403 ^ 641135838;
            continue;
          case 1:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 1238215082 ^ 1628739211;
            continue;
          case 2:
            this.Piece = from.Piece;
            num1 = -1134981895;
            continue;
          case 3:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_29;
          case 4:
            flag2 = true;
            num1 = (int) num2 * -682332424 ^ -988912522;
            continue;
          case 5:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1999464726 ^ 1933398536;
            continue;
          case 6:
            int num5 = !flag3 ? 1704678746 : (num5 = 794766289);
            num1 = num5 ^ (int) num2 * 1326499078;
            continue;
          case 7:
            num1 = (int) num2 * 374720082 ^ -430234211;
            continue;
          case 8:
            from.Piece = (ChessPiece) null;
            num1 = -668043452;
            continue;
          case 9:
            int num6 = this.Piece.Color != PieceColor.White ? 1086913415 : (num6 = 1595015890);
            num1 = num6 ^ (int) num2 * 827184149;
            continue;
          case 10:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 11:
            num1 = -1114673794;
            continue;
          case 12:
            num1 = -1179543674;
            continue;
          case 13:
            num1 = (int) num2 * 1708055928 ^ 861197189;
            continue;
          case 14:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            this.handleWhiteCastling();
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 102934177 ^ -1680263514;
              continue;
            }
            num3 = 0;
            goto label_29;
          case 15:
            this.handleBlackCastling();
            num1 = (int) num2 * -1069383126 ^ 176045973;
            continue;
          case 17:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = -2021716053;
            continue;
          case 18:
            num1 = (int) num2 * 2063611688 ^ -1976120959;
            continue;
          case 19:
            flag3 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1791957082 ^ -757430814;
            continue;
          case 20:
            flag1 = flag2;
            num1 = (int) num2 * -1277752977 ^ 793564793;
            continue;
          case 21:
            int num7;
            num1 = num7 = this.Piece.Color == PieceColor.Black ? -1423464576 : (num7 = -1179543674);
            continue;
          case 22:
            flag2 = true;
            num1 = (int) num2 * -1104025678 ^ -115761648;
            continue;
          case 23:
            num1 = (int) num2 * 64682563 ^ 727242903;
            continue;
          case 24:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -298073964 ^ -1833763522;
            continue;
          case 25:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = -1540798155;
            continue;
          case 26:
            goto label_1;
          case 27:
            int num8;
            num1 = num8 = from.Piece.Color == PieceColor.White ? -2070795178 : (num8 = -1890734991);
            continue;
          case 28:
            if (flag1)
            {
              num1 = (int) num2 * -763580984 ^ -1148127932;
              continue;
            }
            goto label_56;
          case 29:
            flag2 = false;
            num1 = (int) num2 * 1557932798 ^ -1773817554;
            continue;
          case 30:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -98358513 ^ 989339727;
              continue;
            }
            num4 = 0;
            break;
          default:
            goto label_39;
        }
        int num9;
        num1 = num9 = num4 == 0 ? -1544693690 : (num9 = -1418641825);
        continue;
label_29:
        int num10;
        num1 = num10 = num3 == 0 ? -1230889002 : (num10 = -1114314256);
      }
label_39:
      Promotion promotion = new Promotion(Square.\u202A‪‍‫⁮‌⁭⁮‏⁯⁫‪‏‫‬⁫⁯⁭‬⁪⁫‎‪‬⁪‭⁭​⁪‏‌‭‍⁭⁫⁭‪⁯‍⁭‮());
      try
      {
label_41:
        int num11 = -563189366;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -49225988)) % 5U)
          {
            case 0:
              goto label_41;
            case 1:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -585473503 ^ 1727861524;
              continue;
            case 2:
              int num13 = (int) Square.\u200B​⁮‏‍⁪​‭‭⁪⁯⁭‬⁬⁭⁪‬⁪⁬‭‌⁬‏⁮⁫⁬‫‭⁪⁮⁪⁮⁬‌⁬⁫⁮‭⁫⁪‮((Form) promotion);
              num11 = (int) num12 * 333183688 ^ -568912053;
              continue;
            case 4:
              num11 = (int) num12 * 560726323 ^ -164073312;
              continue;
            default:
              goto label_52;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_47:
          int num14 = -442617565;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -49225988)) % 3U)
            {
              case 0:
                goto label_47;
              case 1:
                Square.\u206F‎⁪⁬⁮‭⁬‎‌‎‮‮‍‏⁪‬⁫‍⁫⁭‮‪‍​‍⁯‮‌‍‪⁭‌⁭⁭‪‫‏⁫⁮⁯‮((IDisposable) promotion);
                num14 = (int) num15 * -1406892011 ^ 514167518;
                continue;
              default:
                goto label_51;
            }
          }
        }
label_51:;
      }
label_52:
label_53:
      int num16 = -1792435824;
label_54:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ -49225988)) % 6U)
        {
          case 0:
            this.SwitchPlayer();
            num16 = (int) num17 * 466983657 ^ 1571418604;
            continue;
          case 1:
            PlaySound.Play();
            num16 = (int) num17 * 1632387773 ^ -2055972841;
            continue;
          case 2:
            num16 = (int) num17 * -608737455 ^ 164612359;
            continue;
          case 3:
            goto label_53;
          case 4:
            goto label_56;
          case 5:
            goto label_55;
          default:
            goto label_49;
        }
      }
label_55:
      return;
label_49:
      return;
label_56:
      this.Board.lights.FindAllMoves();
      num16 = -1643652277;
      goto label_54;
    }

    private void MovePawn(Square from)
    {
      ChessPiece chessPiece = (ChessPiece) null;
      this.Piece = from.Piece;
label_1:
      int num1 = 698972306;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 1446091468)) % 30U)
        {
          case 0:
            num1 = 1295604993;
            continue;
          case 1:
            from.Piece = (ChessPiece) null;
            num1 = 2045296270;
            continue;
          case 2:
            num3 = this.Rank == 4 ? 1 : 0;
            goto label_35;
          case 3:
            flag2 = true;
            num1 = (int) num2 * 395446624 ^ -1633668966;
            continue;
          case 4:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -411248693 ^ 1303616776;
            continue;
          case 5:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * -1732736908 ^ -1524937204;
            continue;
          case 6:
            num1 = (int) num2 * -1160461664 ^ 531882917;
            continue;
          case 7:
            flag3 = flag1;
            num1 = (int) num2 * -1101870791 ^ 2019789929;
            continue;
          case 8:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * -234769058 ^ 172226664;
              continue;
            }
            num3 = 1;
            goto label_35;
          case 9:
            goto label_1;
          case 10:
            num1 = 2027330956;
            continue;
          case 11:
            num1 = 331366901;
            continue;
          case 12:
            num5 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_18;
          case 13:
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 98902154 ^ 1565825011;
            continue;
          case 14:
            num1 = (int) num2 * -1978040904 ^ 1631408337;
            continue;
          case 15:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * -129514928 ^ 85900196;
            continue;
          case 16:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * -697786024 ^ 1849661482;
            continue;
          case 17:
            this.Board.lastPassantPawn = (ChessPiece) null;
            num1 = (int) num2 * 1067142355 ^ 173908652;
            continue;
          case 18:
            flag2 = false;
            num1 = 122528337;
            continue;
          case 19:
            num1 = (int) num2 * -939578797 ^ -2028787582;
            continue;
          case 20:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num5 = 0;
              goto label_18;
            }
            else
            {
              num1 = (int) num2 * -293029712 ^ 468306716;
              continue;
            }
          case 21:
            if (flag2)
            {
              num1 = (int) num2 * -531839605 ^ -164389828;
              continue;
            }
            goto label_109;
          case 22:
            flag2 = true;
            num1 = (int) num2 * -1283104362 ^ -1699765653;
            continue;
          case 23:
            num1 = 2117205211;
            continue;
          case 24:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 26:
            num1 = (int) num2 * 2103767815 ^ 614300452;
            continue;
          case 27:
            int num6 = this.Piece.Kind != Pieces.Pawn ? 1635417376 : (num6 = 806949014);
            num1 = num6 ^ (int) num2 * 644767028;
            continue;
          case 28:
            int num7 = flag3 ? 647243533 : (num7 = 1126432279);
            num1 = num7 ^ (int) num2 * -1824049000;
            continue;
          case 29:
            num1 = (int) num2 * -1969628751 ^ -1158602071;
            continue;
          default:
            goto label_41;
        }
        int num8;
        num1 = num8 = num4 == 0 ? 287414227 : (num8 = 673192920);
        continue;
label_18:
        int num9;
        num1 = num9 = num5 != 0 ? 1944463259 : (num9 = 227360570);
        continue;
label_35:
        int num10;
        num1 = num10 = num3 != 0 ? 2057447593 : (num10 = 2136028104);
      }
label_41:
      Promotion promotion = new Promotion(Square.\u202A‪‍‫⁮‌⁭⁮‏⁯⁫‪‏‫‬⁫⁯⁭‬⁪⁫‎‪‬⁪‭⁭​⁪‏‌‭‍⁭⁫⁭‪⁯‍⁭‮());
      try
      {
label_43:
        int num11 = 437131907;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 1446091468)) % 5U)
          {
            case 0:
              goto label_43;
            case 1:
              int num13 = (int) Square.\u200B​⁮‏‍⁪​‭‭⁪⁯⁭‬⁬⁭⁪‬⁪⁬‭‌⁬‏⁮⁫⁬‫‭⁪⁮⁪⁮⁬‌⁬⁫⁮‭⁫⁪‮((Form) promotion);
              num11 = (int) num12 * 724798537 ^ 1888369101;
              continue;
            case 3:
              num11 = (int) num12 * -892008963 ^ 1911637248;
              continue;
            case 4:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 1094632319 ^ -319198928;
              continue;
            default:
              goto label_55;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_49:
          int num14 = 378295989;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1446091468)) % 4U)
            {
              case 0:
                goto label_49;
              case 1:
                Square.\u206F‎⁪⁬⁮‭⁬‎‌‎‮‮‍‏⁪‬⁫‍⁫⁭‮‪‍​‍⁯‮‌‍‪⁭‌⁭⁭‪‫‏⁫⁮⁯‮((IDisposable) promotion);
                num14 = (int) num15 * 209110939 ^ -1826037120;
                continue;
              case 3:
                num14 = (int) num15 * -1443612792 ^ -1608036578;
                continue;
              default:
                goto label_54;
            }
          }
        }
label_54:;
      }
label_55:
label_56:
      int num16 = 1985851119;
label_57:
      while (true)
      {
        uint num17;
        int rank;
        int file;
        bool flag4;
        bool flag5;
        bool flag6;
        Square square1;
        bool flag7;
        bool flag8;
        bool flag9;
        Square square2;
        switch ((num17 = (uint) (num16 ^ 1446091468)) % 54U)
        {
          case 0:
            goto label_56;
          case 1:
            num16 = (int) num17 * 846411519 ^ 539629180;
            continue;
          case 2:
            num16 = (int) num17 * -1763306575 ^ -1388152596;
            continue;
          case 3:
            num16 = (int) num17 * 1022939748 ^ -1379118913;
            continue;
          case 4:
            num16 = (int) num17 * 368427623 ^ 643494013;
            continue;
          case 5:
            goto label_109;
          case 6:
            int num18 = !flag8 ? -164139333 : (num18 = -39668285);
            num16 = num18 ^ (int) num17 * -1924563821;
            continue;
          case 7:
            file = chessPiece.Current.File;
            num16 = (int) num17 * -958636682 ^ -1084602467;
            continue;
          case 8:
            goto label_58;
          case 9:
            rank = chessPiece.Current.Rank;
            if (file != 5)
            {
              num16 = (int) num17 * -1120606438 ^ -282988517;
              continue;
            }
            square2 = this.Board[7, rank];
            break;
          case 10:
            num16 = 879658300;
            continue;
          case 11:
            this.Board.lights.FindAllMoves();
            num16 = 854906985;
            continue;
          case 12:
            num16 = (int) num17 * -299353472 ^ -1921949530;
            continue;
          case 13:
            this.SwitchPlayer();
            num16 = (int) num17 * 42931253 ^ -1922034659;
            continue;
          case 14:
            int num19 = flag6 ? 640423285 : (num19 = 1657614013);
            num16 = num19 ^ (int) num17 * -1663794073;
            continue;
          case 15:
            int num20 = flag9 ? 458341768 : (num20 = 725183628);
            num16 = num20 ^ (int) num17 * 1711029391;
            continue;
          case 16:
            flag4 = true;
            num16 = (int) num17 * 1041345640 ^ -893178870;
            continue;
          case 17:
            square1.Piece = chessPiece;
            num16 = (int) num17 * -1002131575 ^ 758866325;
            continue;
          case 18:
            num16 = (int) num17 * 1902943974 ^ -926432420;
            continue;
          case 19:
            int num21 = this.Board.lights.IsOnCheck ? 227528742 : (num21 = 426415758);
            num16 = num21 ^ (int) num17 * 2136212640;
            continue;
          case 20:
            this.msg = \u003CModule\u003E.\u200E‏‪‮‫‌‮⁭⁬⁯⁯‌‪​⁭‌⁬‍⁮‏‬⁫​⁬⁬​​‎‮‪‎‏‫​‪⁮​‭‫‬‮<string>(1595487930U);
            num16 = (int) num17 * 2049650818 ^ -872559030;
            continue;
          case 21:
            flag8 = chessPiece != null;
            num16 = 1325412496;
            continue;
          case 22:
            num16 = (int) num17 * -1789959914 ^ -1181548292;
            continue;
          case 23:
            from.Piece = this.Piece;
            num16 = (int) num17 * -891794546 ^ 974065667;
            continue;
          case 24:
            flag4 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -109840907 ^ 2068165188;
            continue;
          case 25:
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * -1621477160 ^ -1482984893;
            continue;
          case 26:
            flag7 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num16 = (int) num17 * -802825723 ^ 2106570337;
            continue;
          case 27:
            num16 = (int) num17 * -50612089 ^ -791838443;
            continue;
          case 28:
            this.msg = \u003CModule\u003E.\u200F​‬⁬‎‭⁮​‌‮‭⁮‌⁭⁮​‏‮⁮‫‍​​‭⁪‬‬‪⁮⁯‬​​⁬‌‫⁯‍⁪⁯‮<string>(4209278337U);
            num16 = (int) num17 * -237970112 ^ 703542909;
            continue;
          case 29:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * 180474501 ^ 1540367456;
            continue;
          case 30:
            num16 = (int) num17 * 1409056743 ^ 1917371773;
            continue;
          case 31:
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * 1863953527 ^ 1998757761;
            continue;
          case 32:
            num16 = (int) num17 * 497584225 ^ 252370484;
            continue;
          case 33:
            this.Board.WhiteCanCastleQueenSide = true;
            num16 = (int) num17 * -1349443852 ^ 1806481450;
            continue;
          case 34:
            flag9 = flag4;
            num16 = 1582772125;
            continue;
          case 35:
            num16 = 1942163090;
            continue;
          case 36:
            PlaySound.Play();
            num16 = 1379864837;
            continue;
          case 37:
            num16 = (int) num17 * -1762597762 ^ -1177945416;
            continue;
          case 38:
            flag6 = flag1;
            num16 = (int) num17 * 1015464010 ^ -1635590286;
            continue;
          case 39:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = 1380306642;
            continue;
          case 40:
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * -1154653956 ^ -664982819;
            continue;
          case 41:
            num16 = 1641027677;
            continue;
          case 42:
            int num22 = !flag5 ? -1099404672 : (num22 = -1171273237);
            num16 = num22 ^ (int) num17 * 445194664;
            continue;
          case 43:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -439156423 ^ -1791150008;
            continue;
          case 44:
            num16 = 428052910;
            continue;
          case 45:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -904992645 ^ -755847028;
            continue;
          case 46:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = 100214775;
            continue;
          case 47:
            num16 = (int) num17 * 1163100277 ^ -500595508;
            continue;
          case 48:
            num16 = (int) num17 * 1633474163 ^ 395185096;
            continue;
          case 49:
            square2 = this.Board[0, rank];
            break;
          case 50:
            int num23 = this.Piece.Kind == Pieces.King ? 793381912 : (num23 = 1788028352);
            num16 = num23 ^ (int) num17 * 1236216916;
            continue;
          case 51:
            int num24 = flag7 ? 1482460900 : (num24 = 654538162);
            num16 = num24 ^ (int) num17 * 1280720140;
            continue;
          case 52:
            num16 = (int) num17 * -1275535132 ^ -1287092918;
            continue;
          case 53:
            flag5 = flag1;
            num16 = (int) num17 * -14359511 ^ 1169555253;
            continue;
          default:
            goto label_51;
        }
        square1 = square2;
        num16 = 1918453717;
      }
label_58:
      return;
label_51:
      return;
label_109:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      num16 = 2050927433;
      goto label_57;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = 1255359514;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        ChessPiece chessPiece2;
        Square square1;
        bool flag1;
        bool flag2;
        Square square2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1321173075)) % 38U)
        {
          case 0:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 92034403 ^ -1436138508;
            continue;
          case 1:
            chessPiece1 = chessPiece2;
            num1 = 1382592446;
            continue;
          case 2:
            num1 = 2119493824;
            continue;
          case 3:
            num1 = (int) num2 * 490619107 ^ 1838248416;
            continue;
          case 4:
            num1 = (int) num2 * -743744837 ^ 745346252;
            continue;
          case 5:
            flag2 = Square.\u202C⁭‍‬⁯​‬‫‍⁭‎‭⁫⁮⁭⁯‬⁯‪‎‫⁮⁪‭⁬‭‭‏‬​⁮‍⁪⁪⁯⁫‭‫‏‌‮(this.Piece.Home.Name, \u003CModule\u003E.\u200B‎‍⁭‏⁭⁯‍‮‪⁫‌⁫⁪‍⁮‎⁬⁯‪⁮​‌⁯⁮⁬⁮‬⁯‪‬‌‭‪‮‎‏‪‌‮<string>(1758321499U));
            num1 = (int) num2 * 1901465856 ^ 773611546;
            continue;
          case 6:
            num3 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            goto label_26;
          case 7:
            int num5 = flag2 ? 1045775087 : (num5 = 48080942);
            num1 = num5 ^ (int) num2 * 322301963;
            continue;
          case 8:
            num1 = (int) num2 * -1378786512 ^ -1316688800;
            continue;
          case 9:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -2058599270 ^ 630923941;
            continue;
          case 10:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * -1480828973 ^ 1438723097;
            continue;
          case 11:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * -1734968799 ^ -1231175236;
            continue;
          case 12:
            num1 = (int) num2 * -1566091171 ^ 713403528;
            continue;
          case 13:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * -1899667702 ^ -698581453;
            continue;
          case 14:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1939143240 ^ -165774222;
            continue;
          case 15:
            num1 = 1672687260;
            continue;
          case 16:
            num1 = 1979203722;
            continue;
          case 17:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 18:
            square2 = this.Board[3, 7];
            num1 = (int) num2 * 722947763 ^ -2294166;
            continue;
          case 19:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = 1393720155;
            continue;
          case 20:
            int num6;
            num1 = num6 = this.Piece.Current.File != 2 ? 516807842 : (num6 = 630979305);
            continue;
          case 21:
            square1 = this.Board[5, 7];
            num1 = (int) num2 * 634998368 ^ 1613648910;
            continue;
          case 22:
            int num7 = this.Piece.Kind == Pieces.Rook ? -1359472640 : (num7 = -710173501);
            num1 = num7 ^ (int) num2 * -490290934;
            continue;
          case 23:
            goto label_1;
          case 24:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1642005741;
            continue;
          case 25:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * 1029702293 ^ -81688965;
            continue;
          case 26:
            int num8 = !flag1 ? -20142148 : (num8 = -673148233);
            num1 = num8 ^ (int) num2 * 239516396;
            continue;
          case 27:
            square2.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1101747779 ^ -1298610288;
            continue;
          case 28:
            num1 = (int) num2 * -1655165075 ^ -1546301351;
            continue;
          case 29:
            num1 = (int) num2 * -1747396775 ^ -622435430;
            continue;
          case 30:
            if (this.Piece.Kind == Pieces.King)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * -1572641151 ^ -432154050;
            continue;
          case 32:
            if (!this.Board.BlackCanCastleKingSide)
            {
              num1 = (int) num2 * 2074502945 ^ -825604251;
              continue;
            }
            num3 = 1;
            goto label_26;
          case 33:
            flag1 = this.Piece.Current.File == 6;
            num1 = 26830749;
            continue;
          case 34:
            num1 = (int) num2 * -49454494 ^ -21421085;
            continue;
          case 35:
            square1.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * 1553060928 ^ 2005471910;
            continue;
          case 36:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1858184274 ^ -1292744233;
            continue;
          case 37:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * -1853871512 ^ -1619500427;
            continue;
          default:
            goto label_45;
        }
        int num9;
        num1 = num9 = num4 == 0 ? 1979203722 : (num9 = 230229045);
        continue;
label_26:
        int num10;
        num1 = num10 = num3 != 0 ? 1862090607 : (num10 = 1672687260);
      }
label_45:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = 1320590039;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        ChessPiece chessPiece2;
        bool flag2;
        Square square2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 659136746)) % 34U)
        {
          case 0:
            int num5 = this.Piece.Kind != Pieces.Rook ? 1026794964 : (num5 = 20663503);
            num1 = num5 ^ (int) num2 * -383562881;
            continue;
          case 1:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 2121059216 ^ 365549359;
            continue;
          case 2:
            num1 = 1029526267;
            continue;
          case 3:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * -1202280800 ^ 1691367678;
            continue;
          case 4:
            int num6;
            num1 = num6 = this.Piece.Current.File == 2 ? 360256220 : (num6 = 2052200405);
            continue;
          case 5:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 1809616274;
            continue;
          case 6:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * -1738251474 ^ 880506797;
            continue;
          case 7:
            flag3 = Square.\u202C⁭‍‬⁯​‬‫‍⁭‎‭⁫⁮⁭⁯‬⁯‪‎‫⁮⁪‭⁬‭‭‏‬​⁮‍⁪⁪⁯⁫‭‫‏‌‮(this.Piece.Home.Name, \u003CModule\u003E.\u200B‎‍⁭‏⁭⁯‍‮‪⁫‌⁫⁪‍⁮‎⁬⁯‪⁮​‌⁯⁮⁬⁮‬⁯‪‬‌‭‪‮‎‏‪‌‮<string>(3682811389U));
            num1 = (int) num2 * 1537339518 ^ 82942045;
            continue;
          case 8:
            num1 = 1538475134;
            continue;
          case 9:
            int num7;
            num1 = num7 = this.Piece.Current.File == 6 ? 216371049 : (num7 = 1234046303);
            continue;
          case 10:
            num1 = (int) num2 * 583061807 ^ -649413960;
            continue;
          case 11:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -1484714721 ^ -1286811226;
            continue;
          case 12:
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * -1331523960 ^ -1416580010;
              continue;
            }
            num3 = 1;
            break;
          case 13:
            int num8 = !flag3 ? 475612923 : (num8 = 1315758485);
            num1 = num8 ^ (int) num2 * 454284408;
            continue;
          case 14:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 15:
            square2 = this.Board[5, 0];
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -1047520550 ^ 1003796668;
            continue;
          case 16:
            num1 = 297210224;
            continue;
          case 17:
            this.Board.WhiteCanCastleQueenSide = false;
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 1269027106;
            continue;
          case 18:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 328227543 ^ -2107796386;
            continue;
          case 19:
            num1 = (int) num2 * 952679239 ^ -452124360;
            continue;
          case 20:
            num1 = (int) num2 * 964822667 ^ -1399185984;
            continue;
          case 21:
            num1 = (int) num2 * 833625792 ^ -82220309;
            continue;
          case 22:
            int num9 = flag2 ? 1796005492 : (num9 = 245808786);
            num1 = num9 ^ (int) num2 * 429891465;
            continue;
          case 23:
            int num10 = !flag1 ? 180567660 : (num10 = 651531335);
            num1 = num10 ^ (int) num2 * 269684899;
            continue;
          case 24:
            square1 = this.Board[3, 0];
            square1.Piece = this.Board[0, 0].Piece;
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -894962957 ^ -1358291579;
            continue;
          case 25:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1695714783 ^ 862709797;
            continue;
          case 26:
            num1 = (int) num2 * -2091375119 ^ -1444091210;
            continue;
          case 27:
            goto label_1;
          case 28:
            num1 = (int) num2 * -1951889811 ^ -2111638306;
            continue;
          case 29:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_40;
          case 30:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -1877462667 ^ 1944374701;
              continue;
            }
            num4 = 1;
            goto label_40;
          case 32:
            num1 = (int) num2 * 1290621262 ^ 776029926;
            continue;
          case 33:
            chessPiece1 = chessPiece2;
            num1 = 1030108967;
            continue;
          default:
            goto label_41;
        }
        flag1 = num3 != 0;
        num1 = 1537666967;
        continue;
label_40:
        flag2 = num4 != 0;
        num1 = 245398630;
      }
label_41:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove() => Square.\u202B‭​⁮⁭⁪⁬⁭‬​​‏‪‏⁮‏‮‍‌‎⁬⁬⁬⁪⁬‏‏⁯‭​‏⁪​⁭⁮‏‬⁫⁮‍‮((Control) this.panel1, (Image) null);

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = 309385036;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 696090823)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            base.Dispose(disposing);
            num1 = 1791615639;
            continue;
          case 2:
            Square.\u206F‎⁪⁬⁮‭⁬‎‌‎‮‮‍‏⁪‬⁫‍⁫⁭‮‪‍​‍⁯‮‌‍‪⁭‌⁭⁭‪‫‏⁫⁮⁯‮((IDisposable) this.components);
            num1 = (int) num2 * -1683461513 ^ 321250015;
            continue;
          case 3:
            if (disposing)
            {
              num1 = (int) num2 * 253820798 ^ 290972512;
              continue;
            }
            num3 = 0;
            break;
          case 4:
            int num4 = !flag ? 1837296522 : (num4 = 2052240841);
            num1 = num4 ^ (int) num2 * -780754105;
            continue;
          case 5:
            num3 = this.components != null ? 1 : 0;
            break;
          case 6:
            num1 = (int) num2 * 1625272258 ^ -1242905910;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = 306553971;
      }
label_3:
      return;
label_13:;
    }

    private void InitializeComponent()
    {
      Square.\u202C‬‌⁭‌‮⁬​⁮⁬‮⁮‬‭⁫⁪⁮⁭‫‍‪‏⁪⁬‎‬‮‭⁮‌⁭‮⁫‬‎⁯​⁬‏‏‮((Control) this);
      Square.\u206A⁯‮⁮‍‮⁪⁮‎⁬‌‮‬‬‏‎‪​‌‎⁭⁮​‌​⁪‬​‍‎‏‪‬⁮‏‌‌‎⁬⁮‮((ContainerControl) this, new SizeF(6f, 13f));
label_1:
      int num1 = -771553919;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -447020916)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 1600362397 ^ 1136945393;
            continue;
          case 1:
            Square.\u202C⁮⁯⁪⁮⁫​‫‎⁫⁮​‎⁫⁪⁮⁬⁮‬⁭‮‎⁮‭⁮‪‎‪‎‫⁪⁪‏‮⁪‏‎⁪‮‏‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 1538401607 ^ -663015379;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.Name = \u003CModule\u003E.\u200E‏‪‮‫‌‮⁭⁬⁯⁯‌‪​⁭‌⁬‍⁮‏‬⁫​⁬⁬​​‎‮‪‎‏‫​‪⁮​‭‫‬‮<string>(3908023427U);
            num1 = (int) num2 * -210621655 ^ -817789532;
            continue;
          case 4:
            Square.\u206B‪‪‬‎‌‪⁯⁯‭⁯‫‭‬‍‏‏‎‮‌‮‫‍‌‫⁮⁫‏⁪‍⁯⁪‏‪⁪​⁫‍‫‎‮((Control) this, new Padding(0));
            num1 = (int) num2 * -747025050 ^ -1314125339;
            continue;
          case 5:
            Square.\u200B​​‬‭​​⁫‍⁯‬‬‭⁬‪​‏⁯‍⁯‍‍‏‏‍‭‪⁪⁮⁪‭⁬‭‌‪‏⁬‪⁫‎‮((Control) this, false);
            num1 = (int) num2 * 1247050159 ^ 404663187;
            continue;
          case 6:
            goto label_3;
          case 7:
            Square.\u202D‭‍‮‪‎‬‌⁪⁮‮‫‬⁮⁫⁫⁮‬‫⁭‌‮‬⁭⁭‏​‫​⁯‭⁯‮⁪⁭​⁪‏⁬‮‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 843895045 ^ 720472075;
            continue;
          case 8:
            num1 = (int) num2 * -296986170 ^ -456168177;
            continue;
          case 9:
            Square.\u206C‪‮‎⁭‮‍​⁮⁪‎⁪⁬‎⁫‪‌‫‍‍⁭‬​⁯‌⁫⁭‎⁭⁬‭​⁬‬‎⁪‬⁬‌‬‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 1324724974 ^ -1597978370;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    static Delegate \u206F‬‪‎‫‌⁯‎‍‍‏‎‬‮‪⁬⁫‍⁮⁭‭‮⁭​‭‫​‎‭‮‌⁯⁮‎‍‏‌​‬⁬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206F​‍⁬‎‪‬‮‫⁫⁯⁮‏⁪⁫​‌⁮⁮‭‏‏​‮‪‫⁫‬⁬‮‎‪⁫⁯⁭⁫‏⁯⁯‪‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u202D‍‌‪​‬⁭‭⁭⁬‬‎⁫⁫​⁭‫‭⁯⁮⁮‌⁯⁫‪​‮‫‪‎⁪‮⁪‪‪‬⁮⁪⁫‫‮([In] object obj0) => obj0.ToString();

    static string \u200D‏​⁬‍‏‪⁭‌‍⁪‍⁮‍‮⁪‭‍⁭‏‬‌‏‫⁯‌‏‮‍‫⁭​⁮‍‍‮‬⁫⁮‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206D⁭‮‫‫‌‍⁪‭⁭‮⁫​⁭‭‌⁯⁭⁯⁬‭⁪⁪‭‍⁬⁯‬‫‪‏‮⁯‫⁬⁭‪‍‏⁪‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u202E⁪⁪⁬‪‌‬‭‮‏‮⁮​‏⁭‬‬‫⁫‭‪‬‌‪⁯‪‎‎‏⁪⁬⁭‎‫‏‪⁪‭⁯⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u200D⁫‮‫‍⁪‏‍⁬‮‎⁯⁫‪⁭⁫‏‮‌‍‌‪‮‭‫‮‭‭‭‫⁭‫‫‫‪⁮⁬‫‬‬‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u200F‎‏⁭‭‪⁪⁫‍⁯‏‫⁮‍‪‮‍⁭⁮‮⁮⁮⁮‎⁮‎‭⁮‍‮⁬‭⁪‌‍‍‮⁮‏‏‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u202A‪‍‫⁮‌⁭⁮‏⁯⁫‪‏‫‬⁫⁯⁭‬⁪⁫‎‪‬⁪‭⁭​⁪‏‌‭‍⁭⁫⁭‪⁯‍⁭‮() => Cursor.Position;

    static DialogResult \u200B​⁮‏‍⁪​‭‭⁪⁯⁭‬⁬⁭⁪‬⁪⁬‭‌⁬‏⁮⁫⁬‫‭⁪⁮⁪⁮⁬‌⁬⁫⁮‭⁫⁪‮([In] Form obj0) => obj0.ShowDialog();

    static void \u206F‎⁪⁬⁮‭⁬‎‌‎‮‮‍‏⁪‬⁫‍⁫⁭‮‪‍​‍⁯‮‌‍‪⁭‌⁭⁭‪‫‏⁫⁮⁯‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u202C⁭‍‬⁯​‬‫‍⁭‎‭⁫⁮⁭⁯‬⁯‪‎‫⁮⁪‭⁬‭‭‏‬​⁮‍⁪⁪⁯⁫‭‫‏‌‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u202B‭​⁮⁭⁪⁬⁭‬​​‏‪‏⁮‏‮‍‌‎⁬⁬⁬⁪⁬‏‏⁯‭​‏⁪​⁭⁮‏‬⁫⁮‍‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202C‬‌⁭‌‮⁬​⁮⁬‮⁮‬‭⁫⁪⁮⁭‫‍‪‏⁪⁬‎‬‮‭⁮‌⁭‮⁫‬‎⁯​⁬‏‏‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206A⁯‮⁮‍‮⁪⁮‎⁬‌‮‬‬‏‎‪​‌‎⁭⁮​‌​⁪‬​‍‎‏‪‬⁮‏‌‌‎⁬⁮‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202C⁮⁯⁪⁮⁫​‫‎⁫⁮​‎⁫⁪⁮⁬⁮‬⁭‮‎⁮‭⁮‪‎‪‎‫⁪⁪‏‮⁪‏‎⁪‮‏‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u206C‪‮‎⁭‮‍​⁮⁪‎⁪⁬‎⁫‪‌‫‍‍⁭‬​⁯‌⁫⁭‎⁭⁬‭​⁬‬‎⁪‬⁬‌‬‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206B‪‪‬‎‌‪⁯⁯‭⁯‫‭‬‍‏‏‎‮‌‮‫‍‌‫⁮⁫‏⁪‍⁯⁪‏‪⁪​⁫‍‫‎‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202D‭‍‮‪‎‬‌⁪⁮‮‫‬⁮⁫⁫⁮‬‫⁭‌‮‬⁭⁭‏​‫​⁯‭⁯‮⁪⁭​⁪‏⁬‮‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200B​​‬‭​​⁫‍⁯‬‬‭⁬‪​‏⁯‍⁯‍‍‏‏‍‭‪⁪⁮⁪‭⁬‭‌‪‏⁬‪⁫‎‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
