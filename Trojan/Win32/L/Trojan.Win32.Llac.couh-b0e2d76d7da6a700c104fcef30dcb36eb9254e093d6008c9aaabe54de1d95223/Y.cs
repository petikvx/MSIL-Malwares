// Decompiled with JetBrains decompiler
// Type: Y
// Assembly: invasion protector, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A166DB7-8FFF-4DF4-A22B-1A32627F3BD3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Llac.couh-b0e2d76d7da6a700c104fcef30dcb36eb9254e093d6008c9aaabe54de1d95223.exe

using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;

internal class Y : Stream
{
  uint[] \u000A;
  byte[] \u000A;
  long \u000A;
  long \u000A;
  int \u000A;
  int \u000A;
  bool \u000A;
  Stream \u000A;
  MemoryStream \u000A;
  byte \u000A;
  bool \u000A;
  int \u000A;
  uint[] \u000A;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public Y(Stream stm);

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void Dispose(bool disposing);

  public override bool CanRead { [MethodImpl(MethodImplOptions.NoInlining)] get; }

  public override bool CanSeek { [MethodImpl(MethodImplOptions.NoInlining)] get; }

  public override bool CanTimeout { [MethodImpl(MethodImplOptions.NoInlining)] get; }

  public override bool CanWrite { [MethodImpl(MethodImplOptions.NoInlining)] get; }

  public uint[] T { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

  public override long Length { [MethodImpl(MethodImplOptions.NoInlining)] get; }

  public override long Position { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override void Flush();

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override long Seek(long offset, SeekOrigin origin);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override void SetLength(long value);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override int Read(byte[] buffer, int offset, int count);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override void Write(byte[] buffer, int offset, int count);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static bool T(Stream _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static Stream T(Assembly _param0, string _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static Stream T(Assembly _param0, Type _param1, string _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void T(uint[] _param1, uint[] _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void T();

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void U();
}
