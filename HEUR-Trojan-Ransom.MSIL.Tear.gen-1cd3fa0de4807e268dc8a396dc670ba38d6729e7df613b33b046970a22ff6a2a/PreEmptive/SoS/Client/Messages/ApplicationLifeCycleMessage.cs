// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Messages.ApplicationLifeCycleMessage
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using PreEmptive.SoS.Client.Cache;
using PreEmptive.SoS.Client.MessageProxies;
using System;

namespace PreEmptive.SoS.Client.Messages
{
  public class ApplicationLifeCycleMessage : Message
  {
    public override void Send(CacheService cache, PlatformClient paclient)
    {
      int A_1 = 16;
      int num1 = 0;
      switch (num1)
      {
        default:
          BinaryInfo binary;
          ExtendedKeys keys;
          bool flag;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              binary = Message.ConvertBinaryInfo(this.Binary);
              keys = Message.ConvertExtendedKeys(this.GetExtendedKeys());
              flag = false;
              num2 = 1;
              if (num2 == 0)
                ;
              num2 = 2;
              num1 = num2;
              goto default;
            default:
              string code;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    num2 = 3;
                    num1 = num2;
                    continue;
                  case 1:
                    goto label_29;
                  case 2:
                    if (this.Event.PrivacySetting == PrivacySettings.AlwaysSend)
                    {
                      num2 = 10;
                      num1 = num2;
                      continue;
                    }
                    goto case 18;
                  case 3:
                    paclient.FeatureTick(this.Event.Code, keys, new Guid?(), binary);
                    num2 = 16;
                    num1 = num2;
                    continue;
                  case 4:
                    if (flag)
                    {
                      num2 = 19;
                      num1 = num2;
                      continue;
                    }
                    goto label_35;
                  case 5:
                  case 7:
                  case 11:
                  case 16:
label_12:
                    num2 = 4;
                    num1 = num2;
                    continue;
                  case 6:
                    if (!paclient.Core.AppStarted)
                    {
                      num2 = 14;
                      num1 = num2;
                      continue;
                    }
                    goto case 18;
                  case 8:
                    num2 = 15;
                    num1 = num2;
                    continue;
                  case 9:
                    if (code == Utils.a("韃껅귇ꛉ\uAACB苍맏듑뇓\uF8D5迗믙껛냝觟賡菣", A_1))
                    {
                      paclient.ReportExpirationWarning(Guid.Parse(keys.Map[Utils.a("跃苅", A_1)].Value), keys, new Guid?(), binary);
                      num2 = 11;
                      num1 = num2;
                      continue;
                    }
                    num2 = 20696;
                    int num3 = num2;
                    num2 = 20696;
                    int num4 = num2;
                    switch (num3 == num4 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_12;
                      default:
                        num2 = 0;
                        if (num2 == 0)
                          ;
                        num2 = 8;
                        num1 = num2;
                        continue;
                    }
                  case 10:
                    num2 = 6;
                    num1 = num2;
                    continue;
                  case 12:
                    num2 = 9;
                    num1 = num2;
                    continue;
                  case 13:
                    if ((code = this.Event.Code) != null)
                    {
                      num2 = 17;
                      num1 = num2;
                      continue;
                    }
                    goto case 3;
                  case 14:
                    flag = paclient.ApplicationStart((ExtendedKeys) null, (BinaryInfo) null, (PreEmptive.Analytics.Common.IFlowController) null);
                    num2 = 18;
                    num1 = num2;
                    continue;
                  case 15:
                    if (code == Utils.a("韃껅귇ꛉ\uAACB苍맏듑뇓\uF8D5鷗ꋙ곛럝鋟菡郣迥蟧蓩", A_1))
                    {
                      paclient.ReportExpiration(Guid.Parse(keys.Map[Utils.a("跃苅", A_1)].Value), keys, new Guid?(), binary);
                      num2 = 5;
                      num1 = num2;
                      continue;
                    }
                    num2 = 0;
                    num1 = num2;
                    continue;
                  case 17:
                    num2 = 20;
                    num1 = num2;
                    continue;
                  case 18:
                    num2 = 13;
                    num1 = num2;
                    continue;
                  case 19:
                    paclient.ApplicationStop((ExtendedKeys) null, (BinaryInfo) null, false);
                    num2 = 1;
                    num1 = num2;
                    continue;
                  case 20:
                    if (!(code == Utils.a("韃껅귇ꛉ\uAACB苍맏듑뇓\uF8D5诗동믛냝꿟蓡꣣迥軧迩", A_1)))
                    {
                      num2 = 12;
                      num1 = num2;
                      continue;
                    }
                    paclient.FeatureTick(Utils.a("韃껅귇ꛉ\uAACB苍맏듑뇓\uF8D5诗동믛냝꿟蓡꣣迥軧迩", A_1), keys, new Guid?(), binary);
                    num2 = 7;
                    num1 = num2;
                    continue;
                  default:
                    goto label_3;
                }
              }
label_29:
              return;
label_35:
              return;
          }
      }
    }
  }
}
