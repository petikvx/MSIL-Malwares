// Decompiled with JetBrains decompiler
// Type: _darkcomet_crypter_stub.My.MySettings
// Assembly: stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AC9AC2DB-F571-4006-AB5A-F6838C776154
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Cryptos.cvsk-e3902b62c8d77fcc9078ccc4a4aefa8cfe54ab9753603ad7928af939615801a4.exe

using \u008D;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace _darkcomet_crypter_stub.My
{
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \u0001 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool \u0002;
    private static object \u0003 = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void \u0091\u0002(object sender, EventArgs e)
    {
      if (!\u008F.Application.SaveMySettingsOnExit)
        return;
      \u0097.Settings.Save();
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.\u0002)
        {
          object Expression = MySettings.\u0003;
          ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
          bool lockTaken = false;
          try
          {
            Monitor.Enter(Expression, ref lockTaken);
            if (!MySettings.\u0002)
            {
              \u008F.Application.Shutdown += (ShutdownEventHandler) ((sender, e) =>
              {
                if (!\u008F.Application.SaveMySettingsOnExit)
                  return;
                \u0097.Settings.Save();
              });
              MySettings.\u0002 = true;
            }
          }
          finally
          {
            if (lockTaken)
              Monitor.Exit(Expression);
          }
        }
        return MySettings.\u0001;
      }
    }
  }
}
