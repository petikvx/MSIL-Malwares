// Decompiled with JetBrains decompiler
// Type: NuGet.Common.9Cinr8QmyZ
// Assembly: Ty6CWyxFEL, Version=5.0.0.2, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 271E2DAF-741A-443A-8BCF-B62C509DDC38
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Purgen.gen-185fafbeb00cd8238fdabee088763e27012dd3a0076e04dddca6266f129f0430.exe

using System;
using System.IO;
using System.Runtime.InteropServices;

namespace NuGet.Common
{
  public static class \u0039Cinr8QmyZ
  {
    private const int tAjlbVY8Fq = 511;

    public static void \u00384vHHOeo02(string mdBXGykHG9)
    {
      if (l6BkPTcFbv.ooEPhgvzVK)
      {
        Directory.CreateDirectory(mdBXGykHG9);
      }
      else
      {
        mdBXGykHG9 = Path.GetFullPath(mdBXGykHG9);
        if (Directory.Exists(mdBXGykHG9))
          return;
        int length = Path.GetPathRoot(mdBXGykHG9).Length - 1;
        do
        {
          length = mdBXGykHG9.IndexOf(Path.DirectorySeparatorChar, length + 1);
          string str = length == -1 ? mdBXGykHG9 : mdBXGykHG9.Substring(0, length);
          if (!Directory.Exists(str))
            \u0039Cinr8QmyZ.b9CdavmxgG(str);
        }
        while (length != -1);
      }
    }

    private static void b9CdavmxgG(string rPt4XckjH8)
    {
      string str = Path.Combine(Path.GetDirectoryName(rPt4XckjH8), Guid.NewGuid().ToString());
      Directory.CreateDirectory(str);
      if (\u0039Cinr8QmyZ.rb9lKewweG(str, 511) == -1)
      {
        \u0039Cinr8QmyZ.k7hecNmDxf(str);
        int lastWin32Error = Marshal.GetLastWin32Error();
        throw new InvalidOperationException(string.Format("Unable to set permission while creating {0}, errno={1}.", (object) rPt4XckjH8, (object) lastWin32Error));
      }
      try
      {
        Directory.Move(str, rPt4XckjH8);
      }
      catch
      {
        \u0039Cinr8QmyZ.k7hecNmDxf(str);
        if (Directory.Exists(rPt4XckjH8))
          return;
        throw;
      }
    }

    private static void k7hecNmDxf(string _param0)
    {
      try
      {
        Directory.Delete(_param0);
      }
      catch
      {
      }
    }

    [DllImport("libc", EntryPoint = "chmod", SetLastError = true)]
    private static extern int rb9lKewweG(string oJ8WW9CXnd, int _param1);
  }
}
