// Decompiled with JetBrains decompiler
// Type: 545704640419.560732527318
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003152517786898;
using \u003208825527781;
using \u003355087276409;
using \u003462605226301;
using \u003519320077417;
using \u003545704640419;
using \u003830680403346;
using \u003896877406398;
using \u003965968889669;
using \u003991227119410;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Numerics;
using System.Reflection;
using System.Text;

namespace \u003545704640419
{
  internal static class \u003560732527318
  {
    public static readonly Type[] \u003883915469891 = Type.EmptyTypes;

    public static bool \u003166235308468(this PropertyInfo _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "propertyInfo");
      MethodInfo getMethod = _param0.GetGetMethod(true);
      if (getMethod != (MethodInfo) null && getMethod.IsVirtual)
        return true;
      MethodInfo setMethod = _param0.GetSetMethod(true);
      return setMethod != (MethodInfo) null && setMethod.IsVirtual;
    }

    public static MethodInfo \u003209608365568(this PropertyInfo _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "propertyInfo");
      MethodInfo getMethod = _param0.GetGetMethod(true);
      if (getMethod != (MethodInfo) null)
        return getMethod.GetBaseDefinition();
      return _param0.GetSetMethod(true)?.GetBaseDefinition();
    }

    public static bool \u003519791024737(PropertyInfo _param0) => _param0.GetGetMethod() != (MethodInfo) null && _param0.GetGetMethod().IsPublic || _param0.GetSetMethod() != (MethodInfo) null && _param0.GetSetMethod().IsPublic;

    public static Type \u003502467942885(object _param0) => _param0?.GetType();

    public static string \u003842604663075(
      Type _param0,
      \u003292304869916 _param1,
      ISerializationBinder _param2)
    {
      string str = \u003560732527318.\u003941078392448(_param0, _param2);
      if (_param1 == \u003292304869916.Simple)
        return \u003560732527318.\u003301563774917(str);
      if (_param1 == \u003292304869916.Full)
        return str;
      throw new ArgumentOutOfRangeException();
    }

    private static string \u003941078392448(Type _param0, ISerializationBinder _param1)
    {
      if (_param1 == null)
        return _param0.AssemblyQualifiedName;
      string assemblyName;
      string typeName;
      _param1.BindToName(_param0, out assemblyName, out typeName);
      return typeName + (assemblyName == null ? "" : ", " + assemblyName);
    }

    private static string \u003301563774917(string _param0)
    {
      StringBuilder stringBuilder = new StringBuilder();
      bool flag1 = false;
      bool flag2 = false;
      for (int index = 0; index < _param0.Length; ++index)
      {
        char ch = _param0[index];
        switch (ch)
        {
          case ',':
            if (!flag1)
            {
              flag1 = true;
              stringBuilder.Append(ch);
              break;
            }
            flag2 = true;
            break;
          case '[':
            flag1 = false;
            flag2 = false;
            stringBuilder.Append(ch);
            break;
          case ']':
            flag1 = false;
            flag2 = false;
            stringBuilder.Append(ch);
            break;
          default:
            if (!flag2)
            {
              stringBuilder.Append(ch);
              break;
            }
            break;
        }
      }
      return stringBuilder.ToString();
    }

    public static bool \u003221282300418(Type _param0, bool _param1)
    {
      \u003821784578685.\u003260732825936((object) _param0, "t");
      return _param0.\u003465247563459() || \u003560732527318.\u003509244410547(_param0, _param1) != (ConstructorInfo) null;
    }

    public static ConstructorInfo \u003274123742560(Type _param0) => \u003560732527318.\u003509244410547(_param0, false);

    public static ConstructorInfo \u003509244410547(Type _param0, bool _param1_1)
    {
      BindingFlags bindingAttr = BindingFlags.Instance | BindingFlags.Public;
      if (_param1_1)
        bindingAttr |= BindingFlags.NonPublic;
      return ((IEnumerable<ConstructorInfo>) _param0.GetConstructors(bindingAttr)).SingleOrDefault<ConstructorInfo>((Func<ConstructorInfo, bool>) (_param1_2 => !((IEnumerable<ParameterInfo>) _param1_2.GetParameters()).Any<ParameterInfo>()));
    }

    public static bool \u003645351876055(Type _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "t");
      return !_param0.\u003465247563459() || \u003560732527318.\u003876583190049(_param0);
    }

    public static bool \u003876583190049(Type _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "t");
      return _param0.\u003457523078059() && _param0.GetGenericTypeDefinition() == typeof (Nullable<>);
    }

    public static Type \u003067165560517(Type _param0) => !\u003560732527318.\u003876583190049(_param0) ? _param0 : Nullable.GetUnderlyingType(_param0);

    public static bool \u003413136198838(Type _param0, Type _param1) => _param0.\u003457523078059() && _param0.GetGenericTypeDefinition() == _param1;

    public static bool \u003695199970905(Type _param0, Type _param1) => \u003560732527318.\u003256319689428(_param0, _param1, out Type _);

    public static bool \u003256319689428(Type _param0, Type _param1, out Type _param2)
    {
      \u003821784578685.\u003260732825936((object) _param0, "type");
      \u003821784578685.\u003260732825936((object) _param1, "genericInterfaceDefinition");
      if (!_param1.\u003777956360344() || !_param1.\u003422531313394())
        throw new ArgumentNullException("'{0}' is not a generic interface definition.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1));
      if (_param0.\u003777956360344() && _param0.\u003457523078059())
      {
        Type genericTypeDefinition = _param0.GetGenericTypeDefinition();
        if (_param1 == genericTypeDefinition)
        {
          _param2 = _param0;
          return true;
        }
      }
      foreach (Type type in _param0.GetInterfaces())
      {
        if (type.\u003457523078059())
        {
          Type genericTypeDefinition = type.GetGenericTypeDefinition();
          if (_param1 == genericTypeDefinition)
          {
            _param2 = type;
            return true;
          }
        }
      }
      _param2 = (Type) null;
      return false;
    }

    public static bool \u003805969235920(Type _param0, Type _param1) => \u003560732527318.\u003619089028181(_param0, _param1, out Type _);

    public static bool \u003619089028181(Type _param0, Type _param1, out Type _param2)
    {
      \u003821784578685.\u003260732825936((object) _param0, "type");
      \u003821784578685.\u003260732825936((object) _param1, "genericClassDefinition");
      return _param1.\u003234216988932() && _param1.\u003422531313394() ? \u003560732527318.\u003960883404760(_param0, _param1, out _param2) : throw new ArgumentNullException("'{0}' is not a generic class definition.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1));
    }

    private static bool \u003960883404760(Type _param0, Type _param1, out Type _param2)
    {
      if (_param0.\u003457523078059())
      {
        Type genericTypeDefinition = _param0.GetGenericTypeDefinition();
        if (_param1 == genericTypeDefinition)
        {
          _param2 = _param0;
          return true;
        }
      }
      if (!(_param0.\u003952740036882() == (Type) null))
        return \u003560732527318.\u003960883404760(_param0.\u003952740036882(), _param1, out _param2);
      _param2 = (Type) null;
      return false;
    }

    public static Type \u003989617356751(Type _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "type");
      if (_param0.IsArray)
        return _param0.GetElementType();
      Type type;
      if (\u003560732527318.\u003256319689428(_param0, typeof (IEnumerable<>), out type))
        return !type.\u003422531313394() ? type.GetGenericArguments()[0] : throw new Exception("Type {0} is not a collection.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0));
      if (typeof (IEnumerable).IsAssignableFrom(_param0))
        return (Type) null;
      throw new Exception("Type {0} is not a collection.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0));
    }

    public static void \u003410580278555(Type _param0, out Type _param1, out Type _param2)
    {
      \u003821784578685.\u003260732825936((object) _param0, "dictionaryType");
      Type type;
      if (\u003560732527318.\u003256319689428(_param0, typeof (IDictionary<,>), out type))
      {
        Type[] typeArray = !type.\u003422531313394() ? type.GetGenericArguments() : throw new Exception("Type {0} is not a dictionary.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0));
        _param1 = typeArray[0];
        _param2 = typeArray[1];
      }
      else
      {
        if (!typeof (IDictionary).IsAssignableFrom(_param0))
          throw new Exception("Type {0} is not a dictionary.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0));
        _param1 = (Type) null;
        _param2 = (Type) null;
      }
    }

    public static Type \u003241775712865(MemberInfo _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "member");
      switch (_param0.\u003032693546788())
      {
        case MemberTypes.Event:
          return ((EventInfo) _param0).EventHandlerType;
        case MemberTypes.Field:
          return ((FieldInfo) _param0).FieldType;
        case MemberTypes.Method:
          return ((MethodInfo) _param0).ReturnType;
        case MemberTypes.Property:
          return ((PropertyInfo) _param0).PropertyType;
        default:
          throw new ArgumentException("MemberInfo must be of type FieldInfo, PropertyInfo, EventInfo or MethodInfo", "member");
      }
    }

    public static bool \u003532268035060(MemberInfo _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "member");
      PropertyInfo propertyInfo = _param0 as PropertyInfo;
      return propertyInfo != (PropertyInfo) null && \u003560732527318.\u003029826307258(propertyInfo);
    }

    public static bool \u003029826307258(PropertyInfo _param0)
    {
      \u003821784578685.\u003260732825936((object) _param0, "property");
      return _param0.GetIndexParameters().Length != 0;
    }

    public static object \u003750994888745(MemberInfo _param0, object _param1)
    {
      \u003821784578685.\u003260732825936((object) _param0, "member");
      \u003821784578685.\u003260732825936(_param1, "target");
      switch (_param0.\u003032693546788())
      {
        case MemberTypes.Field:
          return ((FieldInfo) _param0).GetValue(_param1);
        case MemberTypes.Property:
          try
          {
            return ((PropertyInfo) _param0).GetValue(_param1, (object[]) null);
          }
          catch (TargetParameterCountException ex)
          {
            throw new ArgumentException("MemberInfo '{0}' has index parameters".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.Name), (Exception) ex);
          }
        default:
          throw new ArgumentException("MemberInfo '{0}' is not of type FieldInfo or PropertyInfo".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.Name), "member");
      }
    }

    public static void \u003929623250334(MemberInfo _param0, object _param1, object _param2)
    {
      \u003821784578685.\u003260732825936((object) _param0, "member");
      \u003821784578685.\u003260732825936(_param1, "target");
      switch (_param0.\u003032693546788())
      {
        case MemberTypes.Field:
          ((FieldInfo) _param0).SetValue(_param1, _param2);
          break;
        case MemberTypes.Property:
          ((PropertyInfo) _param0).SetValue(_param1, _param2, (object[]) null);
          break;
        default:
          throw new ArgumentException("MemberInfo '{0}' must be of type FieldInfo or PropertyInfo".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.Name), "member");
      }
    }

    public static bool \u003748471418175(MemberInfo _param0, bool _param1)
    {
      switch (_param0.\u003032693546788())
      {
        case MemberTypes.Field:
          FieldInfo fieldInfo = (FieldInfo) _param0;
          return _param1 || fieldInfo.IsPublic;
        case MemberTypes.Property:
          PropertyInfo propertyInfo = (PropertyInfo) _param0;
          if (!propertyInfo.CanRead)
            return false;
          return _param1 || propertyInfo.GetGetMethod(_param1) != (MethodInfo) null;
        default:
          return false;
      }
    }

    public static bool \u003169673371892(MemberInfo _param0, bool _param1, bool _param2)
    {
      switch (_param0.\u003032693546788())
      {
        case MemberTypes.Field:
          FieldInfo fieldInfo = (FieldInfo) _param0;
          return !fieldInfo.IsLiteral && (!fieldInfo.IsInitOnly || _param2) && (_param1 || fieldInfo.IsPublic);
        case MemberTypes.Property:
          PropertyInfo propertyInfo = (PropertyInfo) _param0;
          if (!propertyInfo.CanWrite)
            return false;
          return _param1 || propertyInfo.GetSetMethod(_param1) != (MethodInfo) null;
        default:
          return false;
      }
    }

    public static List<MemberInfo> \u003987395790875(
      Type _param0,
      BindingFlags _param1_1)
    {
      List<MemberInfo> source1 = new List<MemberInfo>();
      source1.AddRange((IEnumerable<MemberInfo>) \u003560732527318.\u003566937757837(_param0, _param1_1));
      source1.AddRange((IEnumerable<MemberInfo>) \u003560732527318.\u003672002102720(_param0, _param1_1));
      List<MemberInfo> memberInfoList = new List<MemberInfo>(source1.Count);
      foreach (IGrouping<string, MemberInfo> source2 in source1.GroupBy<MemberInfo, string>((Func<MemberInfo, string>) (_param1_2 => _param1_2.Name)))
      {
        if (source2.Count<MemberInfo>() == 1)
        {
          memberInfoList.Add(source2.First<MemberInfo>());
        }
        else
        {
          IList<MemberInfo> collection = (IList<MemberInfo>) new List<MemberInfo>();
          foreach (MemberInfo memberInfo in (IEnumerable<MemberInfo>) source2)
          {
            if (collection.Count == 0)
              collection.Add(memberInfo);
            else if (!\u003560732527318.\u003307477507693(memberInfo, _param1_1) || memberInfo.Name == "Item")
              collection.Add(memberInfo);
          }
          memberInfoList.AddRange((IEnumerable<MemberInfo>) collection);
        }
      }
      return memberInfoList;
    }

    private static bool \u003307477507693(MemberInfo _param0, BindingFlags _param1)
    {
      if (_param0.\u003032693546788() != MemberTypes.Property)
        return false;
      PropertyInfo propertyInfo = (PropertyInfo) _param0;
      if (!propertyInfo.\u003166235308468())
        return false;
      Type declaringType = propertyInfo.DeclaringType;
      if (!declaringType.\u003457523078059())
        return false;
      Type genericTypeDefinition = declaringType.GetGenericTypeDefinition();
      if (genericTypeDefinition == (Type) null)
        return false;
      MemberInfo[] member = genericTypeDefinition.GetMember(propertyInfo.Name, _param1);
      return member.Length != 0 && \u003560732527318.\u003241775712865(member[0]).IsGenericParameter;
    }

    public static T \u003258222600890<T>(object _param0) where T : Attribute => \u003560732527318.\u003145473834976<T>(_param0, true);

    public static T \u003145473834976<T>(object _param0, bool _param1) where T : Attribute
    {
      T[] source = \u003560732527318.\u003103981391378<T>(_param0, _param1);
      return source == null ? default (T) : ((IEnumerable<T>) source).FirstOrDefault<T>();
    }

    public static T[] \u003103981391378<T>(object _param0, bool _param1) where T : Attribute
    {
      Attribute[] source = \u003560732527318.\u003866978407552(_param0, typeof (T), _param1);
      return source is T[] objArray ? objArray : source.Cast<T>().ToArray<T>();
    }

    public static Attribute[] \u003866978407552(
      object _param0,
      Type _param1,
      bool _param2)
    {
      \u003821784578685.\u003260732825936(_param0, "attributeProvider");
      object obj = _param0;
      Type type = obj as Type;
      if (type != (Type) null)
        return (_param1 != (Type) null ? (IEnumerable) type.GetCustomAttributes(_param1, _param2) : (IEnumerable) type.GetCustomAttributes(_param2)).Cast<Attribute>().ToArray<Attribute>();
      Assembly element1 = obj as Assembly;
      if (element1 != (Assembly) null)
        return !(_param1 != (Type) null) ? Attribute.GetCustomAttributes(element1) : Attribute.GetCustomAttributes(element1, _param1);
      MemberInfo element2 = obj as MemberInfo;
      if (element2 != (MemberInfo) null)
        return !(_param1 != (Type) null) ? Attribute.GetCustomAttributes(element2, _param2) : Attribute.GetCustomAttributes(element2, _param1, _param2);
      Module element3 = obj as Module;
      if (element3 != (Module) null)
        return !(_param1 != (Type) null) ? Attribute.GetCustomAttributes(element3, _param2) : Attribute.GetCustomAttributes(element3, _param1, _param2);
      if (obj is ParameterInfo element4)
        return !(_param1 != (Type) null) ? Attribute.GetCustomAttributes(element4, _param2) : Attribute.GetCustomAttributes(element4, _param1, _param2);
      ICustomAttributeProvider attributeProvider = (ICustomAttributeProvider) _param0;
      return _param1 != (Type) null ? (Attribute[]) attributeProvider.GetCustomAttributes(_param1, _param2) : (Attribute[]) attributeProvider.GetCustomAttributes(_param2);
    }

    public static \u003934567152648 \u003698077723905(string _param0)
    {
      int? nullable = \u003560732527318.\u003599549665799(_param0);
      string typeName;
      string assemblyName;
      if (nullable.HasValue)
      {
        typeName = _param0.\u003340121954393(0, nullable.GetValueOrDefault());
        assemblyName = _param0.\u003340121954393(nullable.GetValueOrDefault() + 1, _param0.Length - nullable.GetValueOrDefault() - 1);
      }
      else
      {
        typeName = _param0;
        assemblyName = (string) null;
      }
      return new \u003934567152648(assemblyName, typeName);
    }

    private static int? \u003599549665799(string _param0)
    {
      int num = 0;
      for (int index = 0; index < _param0.Length; ++index)
      {
        switch (_param0[index])
        {
          case ',':
            if (num == 0)
              return new int?(index);
            break;
          case '[':
            ++num;
            break;
          case ']':
            --num;
            break;
        }
      }
      return new int?();
    }

    public static MemberInfo \u003230239719420(Type _param0, MemberInfo _param1_1)
    {
      if (_param1_1.\u003032693546788() != MemberTypes.Property)
        return ((IEnumerable<MemberInfo>) _param0.GetMember(_param1_1.Name, _param1_1.\u003032693546788(), BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)).SingleOrDefault<MemberInfo>();
      PropertyInfo propertyInfo = (PropertyInfo) _param1_1;
      Type[] array = ((IEnumerable<ParameterInfo>) propertyInfo.GetIndexParameters()).Select<ParameterInfo, Type>((Func<ParameterInfo, Type>) (_param1_2 => _param1_2.ParameterType)).ToArray<Type>();
      return (MemberInfo) _param0.GetProperty(propertyInfo.Name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, (Binder) null, propertyInfo.PropertyType, array, (ParameterModifier[]) null);
    }

    public static IEnumerable<FieldInfo> \u003566937757837(
      Type _param0,
      BindingFlags _param1)
    {
      \u003821784578685.\u003260732825936((object) _param0, "targetType");
      List<MemberInfo> source = new List<MemberInfo>((IEnumerable<MemberInfo>) _param0.GetFields(_param1));
      \u003560732527318.\u003679511105034((IList<MemberInfo>) source, _param0, _param1);
      return source.Cast<FieldInfo>();
    }

    private static void \u003679511105034(
      IList<MemberInfo> _param0,
      Type _param1_1,
      BindingFlags _param2)
    {
      if ((_param2 & BindingFlags.NonPublic) == BindingFlags.Default)
        return;
      BindingFlags bindingAttr = _param2.\u003172758618227(BindingFlags.Public);
      while ((_param1_1 = _param1_1.\u003952740036882()) != (Type) null)
      {
        IEnumerable<FieldInfo> fieldInfos = ((IEnumerable<FieldInfo>) _param1_1.GetFields(bindingAttr)).Where<FieldInfo>((Func<FieldInfo, bool>) (_param1_2 => _param1_2.IsPrivate));
        _param0.\u003555166478378<MemberInfo>((IEnumerable<MemberInfo>) fieldInfos);
      }
    }

    public static IEnumerable<PropertyInfo> \u003672002102720(
      Type _param0,
      BindingFlags _param1)
    {
      \u003821784578685.\u003260732825936((object) _param0, "targetType");
      List<PropertyInfo> propertyInfoList = new List<PropertyInfo>((IEnumerable<PropertyInfo>) _param0.GetProperties(_param1));
      if (_param0.\u003777956360344())
      {
        foreach (Type type in _param0.GetInterfaces())
          propertyInfoList.AddRange((IEnumerable<PropertyInfo>) type.GetProperties(_param1));
      }
      \u003560732527318.\u003169554656271((IList<PropertyInfo>) propertyInfoList, _param0, _param1);
      for (int index = 0; index < propertyInfoList.Count; ++index)
      {
        PropertyInfo propertyInfo1 = propertyInfoList[index];
        if (propertyInfo1.DeclaringType != _param0)
        {
          PropertyInfo propertyInfo2 = (PropertyInfo) \u003560732527318.\u003230239719420(propertyInfo1.DeclaringType, (MemberInfo) propertyInfo1);
          propertyInfoList[index] = propertyInfo2;
        }
      }
      return (IEnumerable<PropertyInfo>) propertyInfoList;
    }

    public static BindingFlags \u003172758618227(
      this BindingFlags _param0,
      BindingFlags _param1)
    {
      return (_param0 & _param1) != _param1 ? _param0 : _param0 ^ _param1;
    }

    private static void \u003169554656271(
      IList<PropertyInfo> _param0,
      Type _param1,
      BindingFlags _param2)
    {
      while ((_param1 = _param1.\u003952740036882()) != (Type) null)
      {
        foreach (PropertyInfo property in _param1.GetProperties(_param2))
        {
          // ISSUE: object of a compiler-generated type is created
          // ISSUE: variable of a compiler-generated type
          \u003560732527318.\u003009264103939 obj1 = (\u003560732527318.\u003009264103939) new \u003560732527318.\u003149233119145();
          // ISSUE: reference to a compiler-generated field
          ((\u003560732527318.\u003149233119145) obj1).\u003789113007652 = property;
          // ISSUE: reference to a compiler-generated field
          if (!((\u003560732527318.\u003149233119145) obj1).\u003789113007652.\u003166235308468())
          {
            // ISSUE: reference to a compiler-generated field
            if (!\u003560732527318.\u003519791024737(((\u003560732527318.\u003149233119145) obj1).\u003789113007652))
            {
              // ISSUE: reference to a compiler-generated method
              int index = _param0.\u003723489693319<PropertyInfo>(new Func<PropertyInfo, bool>(obj1.\u003600527578914));
              if (index == -1)
              {
                // ISSUE: reference to a compiler-generated field
                _param0.Add(((\u003560732527318.\u003149233119145) obj1).\u003789113007652);
              }
              else if (!\u003560732527318.\u003519791024737(_param0[index]))
              {
                // ISSUE: reference to a compiler-generated field
                _param0[index] = ((\u003560732527318.\u003149233119145) obj1).\u003789113007652;
              }
            }
            else
            {
              // ISSUE: reference to a compiler-generated method
              if (_param0.\u003723489693319<PropertyInfo>(new Func<PropertyInfo, bool>(obj1.\u003515459862267)) == -1)
              {
                // ISSUE: reference to a compiler-generated field
                _param0.Add(((\u003560732527318.\u003149233119145) obj1).\u003789113007652);
              }
            }
          }
          else
          {
            // ISSUE: object of a compiler-generated type is created
            // ISSUE: variable of a compiler-generated type
            \u003560732527318.\u003852616989616 obj2 = (\u003560732527318.\u003852616989616) new \u003560732527318.\u003009264103939();
            // ISSUE: reference to a compiler-generated field
            obj2.\u003306916778907 = obj1;
            // ISSUE: variable of a compiler-generated type
            \u003560732527318.\u003852616989616 obj3 = obj2;
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            Type declaringType = ((\u003560732527318.\u003149233119145) obj2.\u003306916778907).\u003789113007652.\u003209608365568()?.DeclaringType;
            if ((object) declaringType == null)
            {
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              declaringType = ((\u003560732527318.\u003149233119145) obj2.\u003306916778907).\u003789113007652.DeclaringType;
            }
            // ISSUE: reference to a compiler-generated field
            ((\u003560732527318.\u003009264103939) obj3).\u003698540585907 = declaringType;
            // ISSUE: reference to a compiler-generated method
            if (_param0.\u003723489693319<PropertyInfo>(new Func<PropertyInfo, bool>(obj2.\u003188002055670)) == -1)
            {
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              _param0.Add(((\u003560732527318.\u003149233119145) obj2.\u003306916778907).\u003789113007652);
            }
          }
        }
      }
    }

    public static bool \u003253432110709(Type _param0, Type _param1, string _param2)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003560732527318.\u003846820640913 obj = (\u003560732527318.\u003846820640913) new \u003560732527318.\u003852616989616();
      // ISSUE: reference to a compiler-generated field
      ((\u003560732527318.\u003852616989616) obj).\u003096784550614 = _param2;
      // ISSUE: reference to a compiler-generated field
      obj.\u003897323449011 = _param1;
      // ISSUE: reference to a compiler-generated method
      return ((IEnumerable<MethodInfo>) _param0.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)).Any<MethodInfo>(new Func<MethodInfo, bool>(obj.\u003677448443691));
    }

    public static object \u003127656215892(Type _param0)
    {
      if (!_param0.\u003465247563459())
        return (object) null;
      switch (\u003594264013390.\u003425916151308(_param0))
      {
        case \u003204086749104.Char:
        case \u003204086749104.SByte:
        case \u003204086749104.Int16:
        case \u003204086749104.UInt16:
        case \u003204086749104.Int32:
        case \u003204086749104.Byte:
        case \u003204086749104.UInt32:
          return (object) 0;
        case \u003204086749104.Boolean:
          return (object) false;
        case \u003204086749104.Int64:
        case \u003204086749104.UInt64:
          return (object) 0L;
        case \u003204086749104.Single:
          return (object) 0.0f;
        case \u003204086749104.Double:
          return (object) 0.0;
        case \u003204086749104.DateTime:
          return (object) new DateTime();
        case \u003204086749104.DateTimeOffset:
          return (object) new DateTimeOffset();
        case \u003204086749104.Decimal:
          return (object) 0M;
        case \u003204086749104.Guid:
          return (object) new Guid();
        case \u003204086749104.BigInteger:
          return (object) new BigInteger();
        default:
          return \u003560732527318.\u003645351876055(_param0) ? (object) null : Activator.CreateInstance(_param0);
      }
    }
  }
}
