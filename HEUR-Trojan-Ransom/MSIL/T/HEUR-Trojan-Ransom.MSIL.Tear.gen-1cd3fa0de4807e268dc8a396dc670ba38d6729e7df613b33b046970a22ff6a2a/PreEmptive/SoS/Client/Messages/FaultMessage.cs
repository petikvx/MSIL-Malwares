// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Messages.FaultMessage
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using PreEmptive.SoS.Client.Cache;
using PreEmptive.SoS.Client.MessageProxies;
using System;
using System.Diagnostics;

namespace PreEmptive.SoS.Client.Messages
{
  public class FaultMessage : Message
  {
    public FaultMessage(Exception e, StackTrace st, int skip)
      : this(e)
    {
    }

    public FaultMessage(Exception e) => this.Exception = e;

    public string Contact
    {
      get
      {
        int num1 = -10888;
        int num2 = num1;
        num1 = -10888;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 23616;
        int num2 = num1;
        num1 = 23616;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Comment
    {
      get
      {
        int num1 = -24080;
        int num2 = num1;
        num1 = -24080;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 12838;
        int num2 = num1;
        num1 = 12838;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public FaultEventType FaultEvent
    {
      get
      {
        int num1 = 19587;
        int num2 = num1;
        num1 = 19587;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -24380;
        int num2 = num1;
        num1 = -24380;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Exception Exception
    {
      get
      {
        int num1 = 429;
        int num2 = num1;
        num1 = 429;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -2512;
        int num2 = num1;
        num1 = -2512;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public override void Send(CacheService cache, PlatformClient paclient)
    {
      int A_1 = 6;
      int num1 = -5140;
      int num2 = num1;
      num1 = -5140;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (false)
            ;
          if (true)
            ;
          BinaryInfo binary = Message.ConvertBinaryInfo(this.Binary);
          ExtendedKeys keys = Message.ConvertExtendedKeys(this.GetExtendedKeys());
          bool optInOverride = this.Event.PrivacySetting == PrivacySettings.AlwaysSend;
          paclient.ReportException(new ExceptionInfo(this.a(this.FaultEvent), this.Exception, this.Contact, this.Comment, this.Exception.Data[(object) Utils.a("ﾹ쒻\uDDBDꖿ닁냃꿅\uA7C7\uA4C9臋ꯍꏏꇑ뗓뇕뷗", A_1)] as string), optInOverride, keys, new Guid?(), binary);
          break;
        default:
          goto case 1;
      }
    }

    private ExceptionType a(FaultEventType A_0)
    {
      int num1;
      int num2;
      FaultEventType faultEventType;
      switch (0)
      {
        case 0:
label_3:
          num1 = 12027;
          int num3 = num1;
          num1 = 12027;
          int num4 = num1;
          switch (num3 == num4 ? 1 : 0)
          {
            case 0:
            case 2:
              break;
            default:
              num1 = 0;
              if (num1 == 0)
                ;
              faultEventType = A_0;
              num1 = 1;
              num2 = num1;
              goto label_1;
          }
          break;
        default:
label_1:
          while (true)
          {
            num1 = 1;
            if (num1 == 0)
              ;
            switch (num2)
            {
              case 0:
                goto label_12;
              case 1:
                switch (faultEventType)
                {
                  case FaultEventType.Thrown:
                    goto label_8;
                  case FaultEventType.Caught:
                    goto label_9;
                  case FaultEventType.Uncaught:
                    goto label_11;
                  default:
                    num1 = 2;
                    num2 = num1;
                    continue;
                }
              case 2:
                num1 = 0;
                num2 = num1;
                continue;
              default:
                goto label_3;
            }
          }
label_9:
          return ExceptionType.Caught;
label_11:
          return ExceptionType.Uncaught;
label_12:
          return ExceptionType.Uncaught;
      }
label_8:
      return ExceptionType.Thrown;
    }
  }
}
