// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Description.WebScriptClientGenerator
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Globalization;
using System.Net;
using System.ServiceModel.Activation;
using System.ServiceModel.Channels;
using System.ServiceModel.Dispatcher;
using System.Web;

namespace System.ServiceModel.Description
{
  internal class WebScriptClientGenerator : ServiceMetadataExtension.IHttpGetMetadata
  {
    internal const string DebugMetadataEndpointSuffix = "jsdebug";
    internal const string MetadataEndpointSuffix = "js";
    private bool debugMode;
    private ServiceEndpoint endpoint;
    private NameValueCache<string> proxyCache;
    private DateTime serviceLastModified;
    private string serviceLastModifiedRfc1123String;
    private bool crossDomainScriptAccessEnabled;

    public WebScriptClientGenerator(
      ServiceEndpoint endpoint,
      bool debugMode,
      bool crossDomainScriptAccessEnabled)
    {
      this.endpoint = endpoint;
      this.debugMode = debugMode;
      this.serviceLastModified = DateTime.UtcNow;
      this.serviceLastModified = new DateTime(this.serviceLastModified.Year, this.serviceLastModified.Month, this.serviceLastModified.Day, this.serviceLastModified.Hour, this.serviceLastModified.Minute, this.serviceLastModified.Second, DateTimeKind.Utc);
      this.proxyCache = new NameValueCache<string>();
      this.crossDomainScriptAccessEnabled = crossDomainScriptAccessEnabled;
    }

    private string GetProxyContent(Uri baseUri)
    {
      string proxyContent = this.proxyCache.Lookup(baseUri.Authority);
      if (string.IsNullOrEmpty(proxyContent))
      {
        proxyContent = WCFServiceClientProxyGenerator.GetClientProxyScript(this.endpoint.Contract.ContractType, baseUri.AbsoluteUri, this.debugMode, this.endpoint);
        this.proxyCache.AddOrUpdate(baseUri.Authority, proxyContent);
      }
      return proxyContent;
    }

    private string ServiceLastModifiedRfc1123String
    {
      get
      {
        if (this.serviceLastModifiedRfc1123String == null)
          this.serviceLastModifiedRfc1123String = this.serviceLastModified.ToString("R", (IFormatProvider) DateTimeFormatInfo.InvariantInfo);
        return this.serviceLastModifiedRfc1123String;
      }
    }

    public Message Get(Message message)
    {
      HttpRequestMessageProperty property1 = (HttpRequestMessageProperty) message.Properties[HttpRequestMessageProperty.Name];
      HttpResponseMessageProperty property2 = new HttpResponseMessageProperty();
      if (property1 != null && this.IsServiceUnchanged(property1.Headers["If-Modified-Since"]))
      {
        Message message1 = Message.CreateMessage(MessageVersion.None, string.Empty);
        property2.StatusCode = HttpStatusCode.NotModified;
        message1.Properties.Add(HttpResponseMessageProperty.Name, (object) property2);
        return message1;
      }
      string proxyContent = this.GetProxyContent(UriTemplate.RewriteUri(this.endpoint.Address.Uri, property1.Headers[HttpRequestHeader.Host]));
      Message message2 = (Message) new WebScriptMetadataMessage(string.Empty, proxyContent);
      property2.Headers.Add("Last-Modified", this.ServiceLastModifiedRfc1123String);
      property2.Headers.Add("Expires", this.ServiceLastModifiedRfc1123String);
      if (AspNetEnvironment.Current.AspNetCompatibilityEnabled)
        HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.Public);
      else
        property2.Headers.Add("Cache-Control", "public");
      message2.Properties.Add(HttpResponseMessageProperty.Name, (object) property2);
      return message2;
    }

    internal static string GetMetadataEndpointSuffix(bool debugMode) => debugMode ? "jsdebug" : "js";

    private bool IsServiceUnchanged(string ifModifiedSinceHeaderValue)
    {
      DateTime result;
      return !string.IsNullOrEmpty(ifModifiedSinceHeaderValue) && DateTime.TryParse(ifModifiedSinceHeaderValue, (IFormatProvider) DateTimeFormatInfo.InvariantInfo, DateTimeStyles.AdjustToUniversal, out result) && result >= this.serviceLastModified;
    }
  }
}
