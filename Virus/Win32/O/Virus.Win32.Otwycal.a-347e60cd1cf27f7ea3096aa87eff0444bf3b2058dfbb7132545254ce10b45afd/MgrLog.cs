// Decompiled with JetBrains decompiler
// Type: ATI.ACE.LOG.EXE.MgrLog
// Assembly: LOG, Version=2.0.4330.39118, Culture=neutral, PublicKeyToken=90ba9c70f846762e
// MVID: D948BFF4-3013-456D-9998-1C1F0C6DA164
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Otwycal.a-347e60cd1cf27f7ea3096aa87eff0444bf3b2058dfbb7132545254ce10b45afd.exe

using ATI.ACE.LOG.Foundation;
using ATI.ACE.LOG.Foundation.Implementation.Private;
using System;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace ATI.ACE.LOG.EXE
{
  public sealed class MgrLog
  {
    private const string SEARCH = "<Search";
    private const int MAX_FILE_SIZE = 10000000;
    private const string ACE_LOG_FILE_NAME = "ACELog.";
    private const string ACE_LOG_FILE_EXT = ".txt";
    private const string SYS_LOG_NAME = "ACEEventLog";
    private StreamWriter logFile;
    private string logFileName;
    private string fullFileName;
    private int maxFileSize = 10000000;

    public string FileName => this.logFileName;

    public string FullPathFileName => this.fullFileName;

    public int FileSize => (int) new FileInfo(this.FullPathFileName).Length;

    public int MaxFileSize
    {
      get => this.maxFileSize;
      set => this.maxFileSize = value;
    }

    public MgrLog() => this.InitLogFile();

    public void ClearWndsEvtLog()
    {
      try
      {
        if (!EventLog.Exists("ACEEventLog"))
          return;
        EventLog.Delete("ACEEventLog");
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    public bool MatchesFilter(
      SLog log,
      string domainName,
      string assemblyName,
      string namespc,
      string messageText)
    {
      if (!domainName.StartsWith("<Search") && !domainName.Equals(log.DomainName) || !assemblyName.StartsWith("<Search") && !assemblyName.Equals(log.AssemblyName) || namespc.Length != 0 && !namespc.StartsWith("<Search") && log.ClassName.IndexOf(namespc) < 0)
        return false;
      return messageText.Length == 0 || messageText.StartsWith("<Search") || log.Message.IndexOf(messageText) >= 0;
    }

    public void SaveLogMessage(string message)
    {
      this.logFile.WriteLine(message);
      this.logFile.Flush();
    }

    public void CloseLogFile()
    {
      try
      {
        this.logFile.Close();
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    private void InitLogFile()
    {
      DateTime now = DateTime.Now;
      int year = now.Year;
      int month = now.Month;
      int day = now.Day;
      int hour = now.Hour;
      int minute = now.Minute;
      int second = now.Second;
      StringBuilder stringBuilder = new StringBuilder(now.Year.ToString());
      if (month < 10)
        stringBuilder.Append("0");
      stringBuilder.Append(month.ToString());
      if (day < 10)
        stringBuilder.Append("0");
      stringBuilder.Append(day.ToString());
      stringBuilder.Append("-");
      if (hour < 10)
        stringBuilder.Append("0");
      stringBuilder.Append(hour.ToString());
      if (minute < 10)
        stringBuilder.Append("0");
      stringBuilder.Append(minute.ToString());
      if (second < 10)
        stringBuilder.Append("0");
      stringBuilder.Append(second.ToString());
      this.logFileName = new StringBuilder("ACELog.", 64).Append(stringBuilder.ToString()).Append(".txt").ToString();
      this.fullFileName = new StringBuilder(Services.LocalAppDataPath, 256).Append(this.logFileName).ToString();
      this.logFile = new StreamWriter((Stream) new FileStream(this.fullFileName, FileMode.CreateNew, FileAccess.ReadWrite, FileShare.ReadWrite));
    }
  }
}
