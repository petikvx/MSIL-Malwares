// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSRadioButton
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("CheckedChanged")]
  internal class NSRadioButton : Control
  {
    private bool _Checked;
    private GraphicsPath GP1;
    private SizeF SZ1;
    private PointF PT1;
    private Pen P1;
    private Pen P2;
    private PathGradientBrush PB1;

    public event NSRadioButton.CheckedChangedEventHandler CheckedChanged;

    public NSRadioButton()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.P1 = new Pen(Color.FromArgb(55, 55, 55));
      this.P2 = new Pen(Color.FromArgb(24, 24, 24));
    }

    public bool Checked
    {
      get => this._Checked;
      set
      {
        this._Checked = value;
        if (this._Checked)
          this.InvalidateParent();
        NSRadioButton.CheckedChangedEventHandler checkedChangedEvent = this.CheckedChangedEvent;
        if (checkedChangedEvent != null)
          checkedChangedEvent((object) this);
        this.Invalidate();
      }
    }

    private void InvalidateParent()
    {
      if (this.Parent == null)
        return;
      try
      {
        foreach (Control control in this.Parent.Controls)
        {
          if (control != this && control is NSRadioButton)
            ((NSRadioButton) control).Checked = false;
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = new GraphicsPath();
      this.GP1.AddEllipse(0, 2, checked (this.Height - 5), checked (this.Height - 5));
      this.PB1 = new PathGradientBrush(this.GP1);
      this.PB1.CenterColor = Color.FromArgb(50, 50, 50);
      this.PB1.SurroundColors = new Color[1]
      {
        Color.FromArgb(45, 45, 45)
      };
      this.PB1.FocusScales = new PointF(0.3f, 0.3f);
      ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
      ThemeModule.G.DrawEllipse(this.P1, 0, 2, checked (this.Height - 5), checked (this.Height - 5));
      ThemeModule.G.DrawEllipse(this.P2, 1, 3, checked (this.Height - 7), checked (this.Height - 7));
      if (this._Checked)
      {
        ThemeModule.G.FillEllipse(Brushes.Black, 6, 8, checked (this.Height - 15), checked (this.Height - 15));
        ThemeModule.G.FillEllipse(Brushes.WhiteSmoke, 5, 7, checked (this.Height - 15), checked (this.Height - 15));
      }
      this.SZ1 = ThemeModule.G.MeasureString(this.Text, this.Font);
      this.PT1 = new PointF((float) checked (this.Height - 3), (float) (this.Height / 2) - this.SZ1.Height / 2f);
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.Black, this.PT1.X + 1f, this.PT1.Y + 1f);
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.WhiteSmoke, this.PT1);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.Checked = true;
      base.OnMouseDown(e);
    }

    public delegate void CheckedChangedEventHandler(object sender);
  }
}
