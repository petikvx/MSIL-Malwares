// Decompiled with JetBrains decompiler
// Type: Dark_RAT.UpdateF
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class UpdateF : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("SaveFileDialog1")]
    private SaveFileDialog _SaveFileDialog1;

    [DebuggerNonUserCode]
    static UpdateF()
    {
    }

    [DebuggerNonUserCode]
    public UpdateF()
    {
      this.Load += new EventHandler(this.Update_Load);
      UpdateF.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (UpdateF.__ENCList)
      {
        if (UpdateF.__ENCList.Count == UpdateF.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (UpdateF.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (UpdateF.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                UpdateF.__ENCList[index1] = UpdateF.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          UpdateF.__ENCList.RemoveRange(index1, checked (UpdateF.__ENCList.Count - index1));
          UpdateF.__ENCList.Capacity = UpdateF.__ENCList.Count;
        }
        UpdateF.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (UpdateF));
      this.Button1 = new Button();
      this.SaveFileDialog1 = new SaveFileDialog();
      this.SuspendLayout();
      this.Button1.Image = (Image) componentResourceManager.GetObject("Button1.Image");
      this.Button1.ImageAlign = ContentAlignment.MiddleLeft;
      this.Button1.Location = new Point(12, 12);
      this.Button1.Name = "Button1";
      Button button1 = this.Button1;
      Size size1 = new Size(225, 23);
      Size size2 = size1;
      button1.Size = size2;
      this.Button1.TabIndex = 0;
      this.Button1.Text = "Download update";
      this.Button1.UseVisualStyleBackColor = true;
      this.SaveFileDialog1.InitialDirectory = "Desktop";
      this.SaveFileDialog1.RestoreDirectory = true;
      this.SaveFileDialog1.Title = "Where to download the update?";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.FromArgb(64, 64, 64);
      size1 = new Size(249, 46);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Button1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MaximizeBox = false;
      this.Name = nameof (UpdateF);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "A update was found";
      this.ResumeLayout(false);
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual SaveFileDialog SaveFileDialog1
    {
      [DebuggerNonUserCode] get => this._SaveFileDialog1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._SaveFileDialog1 = value;
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      this.SaveFileDialog1.Title = "DarkRAT Update";
      this.SaveFileDialog1.Filter = "RAR Files (*.rar)|*.rar";
      int num1 = (int) this.SaveFileDialog1.ShowDialog();
      try
      {
        Network network = MyProject.Computer.Network;
        object[] objArray1 = new object[7];
        objArray1[0] = RuntimeHelpers.GetObjectValue(LoginSystem.GetSource("http://darkrat.info/update.php"));
        object[] objArray2 = objArray1;
        SaveFileDialog saveFileDialog1 = this.SaveFileDialog1;
        string fileName = saveFileDialog1.FileName;
        objArray2[1] = (object) fileName;
        objArray1[2] = (object) "update";
        objArray1[3] = (object) ".rar";
        objArray1[4] = (object) true;
        objArray1[5] = (object) 100;
        objArray1[6] = (object) true;
        object[] objArray3 = objArray1;
        object[] Arguments = objArray3;
        bool[] flagArray = new bool[7]
        {
          false,
          true,
          false,
          false,
          false,
          false,
          false
        };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall((object) network, (System.Type) null, "DownloadFile", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
        if (flagArray[1])
          saveFileDialog1.FileName = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[1]), typeof (string));
        int num2 = (int) MessageBox.Show("Download was successful!", "Successful", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num3 = (int) MessageBox.Show("Error downloading!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        ProjectData.ClearProjectError();
      }
    }

    private void Update_Load(object sender, EventArgs e)
    {
      MyProject.Forms.LoginForm.Close();
      MyProject.Forms.LoginForm.Enabled = true;
    }
  }
}
