// Decompiled with JetBrains decompiler
// Type: N0_Crypter.My.MySettings
// Assembly: N0$Crypter, Version=3.0.7.1, Culture=neutral, PublicKeyToken=null
// MVID: FD276B3A-BCAA-4176-AE7A-13B114112E73
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hae-91602cc2011b8768f677252d0fce055cd9e20323cd9c86736de5f27b67249290.exe

using A;
using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace N0_Crypter.My
{
  [CompilerGenerated]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) UT.A((SettingsBase) VT.A());
    private static bool addedHandler;
    private static object addedHandlerLockObject = PD.A(TT.A());

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!YT.A((object) F.A))
        return;
label_1:
      switch (3)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MySettings.AutoSaveSettings);
          }
          WT.A((object) XT.A());
          break;
      }
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.addedHandler)
        {
label_1:
          switch (7)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (MySettings.get_Default);
              }
              object handlerLockObject = MySettings.addedHandlerLockObject;
              CU.A(handlerLockObject);
              BU.A(handlerLockObject);
              try
              {
                if (!MySettings.addedHandler)
                {
label_6:
                  switch (2)
                  {
                    case 0:
                      goto label_6;
                    default:
                      AU.A((object) F.A, (ShutdownEventHandler) ((sender, e) =>
                      {
                        if (!YT.A((object) F.A))
                          return;
label_1:
                        switch (3)
                        {
                          case 0:
                            goto label_1;
                          default:
                            if (false)
                            {
                              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (MySettings.AutoSaveSettings);
                            }
                            WT.A((object) XT.A());
                            break;
                        }
                      }));
                      MySettings.addedHandler = true;
                      break;
                  }
                }
                else
                  break;
              }
              finally
              {
                ZT.A(handlerLockObject);
              }
              break;
          }
        }
        MySettings defaultInstance = MySettings.defaultInstance;
        return defaultInstance;
      }
    }
  }
}
