// Decompiled with JetBrains decompiler
// Type: SQLite.Orm
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace SQLite
{
  public static class Orm
  {
    public const int DefaultMaxStringLength = 140;
    public const string ImplicitPkName = "Id";
    public const string ImplicitIndexSuffix = "Id";

    public static string SqlDecl(TableMapping.Column p, bool storeDateTimeAsTicks)
    {
      string str = "\"" + p.Name + "\" " + Orm.SqlType(p, storeDateTimeAsTicks) + " ";
      if (p.IsPK)
        str += "primary key ";
      if (p.IsAutoInc)
        str += "autoincrement ";
      if (!p.IsNullable)
        str += "not null ";
      if (!string.IsNullOrEmpty(p.Collation))
        str = str + "collate " + p.Collation + " ";
      return str;
    }

    public static string SqlType(TableMapping.Column p, bool storeDateTimeAsTicks)
    {
      Type columnType = p.ColumnType;
      if ((object) columnType == (object) typeof (bool) || (object) columnType == (object) typeof (byte) || (object) columnType == (object) typeof (ushort) || (object) columnType == (object) typeof (sbyte) || (object) columnType == (object) typeof (short) || (object) columnType == (object) typeof (int))
        return "integer";
      if ((object) columnType == (object) typeof (uint) || (object) columnType == (object) typeof (long))
        return "bigint";
      if ((object) columnType == (object) typeof (float) || (object) columnType == (object) typeof (double) || (object) columnType == (object) typeof (Decimal))
        return "float";
      if ((object) columnType == (object) typeof (string))
        return "varchar(" + (object) p.MaxStringLength + ")";
      if ((object) columnType == (object) typeof (DateTime))
        return !storeDateTimeAsTicks ? "datetime" : "bigint";
      if (columnType.IsEnum)
        return "integer";
      if ((object) columnType == (object) typeof (byte[]))
        return "blob";
      if ((object) columnType == (object) typeof (Guid))
        return "varchar(36)";
      throw new NotSupportedException("Don't know about " + (object) columnType);
    }

    public static bool IsPK(MemberInfo p) => p.GetCustomAttributes(typeof (PrimaryKeyAttribute), true).Length != 0;

    public static string Collation(MemberInfo p)
    {
      object[] customAttributes = p.GetCustomAttributes(typeof (CollationAttribute), true);
      return customAttributes.Length != 0 ? ((CollationAttribute) customAttributes[0]).Value : string.Empty;
    }

    public static bool IsAutoInc(MemberInfo p) => p.GetCustomAttributes(typeof (AutoIncrementAttribute), true).Length != 0;

    public static IEnumerable<IndexedAttribute> GetIndices(MemberInfo p) => p.GetCustomAttributes(typeof (IndexedAttribute), true).Cast<IndexedAttribute>();

    public static int MaxStringLength(PropertyInfo p)
    {
      object[] customAttributes = p.GetCustomAttributes(typeof (MaxLengthAttribute), true);
      return customAttributes.Length != 0 ? ((MaxLengthAttribute) customAttributes[0]).Value : 140;
    }
  }
}
