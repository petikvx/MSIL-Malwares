// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;

namespace ICSharpCode.SharpZipLib.Zip.Compression.Streams
{
  public class OutputWindow
  {
    private const int \uE004 = 32768;
    private const int \uE003 = 32767;
    private byte[] \uE002 = new byte[32768];
    private int \uE001;
    private int \uE000;

    public void Write(int value)
    {
      OutputWindow outputWindow1 = this;
      int num1;
      int num2 = num1 = outputWindow1.\uE000;
      outputWindow1.\uE000 = num1 + 1;
      if (num2 == 32768)
        throw new InvalidOperationException(\uE01B.\uE000("\uE6B5\uE68B\uE68C\uE686\uE68D\uE695\uE6C2\uE684\uE697\uE68E\uE68E", 59106));
      byte[] numArray = this.\uE002;
      OutputWindow outputWindow2 = this;
      int num3;
      int num4 = num3 = outputWindow2.\uE001;
      outputWindow2.\uE001 = num3 + 1;
      int index = num4;
      int num5 = (int) (byte) value;
      numArray[index] = (byte) num5;
      this.\uE001 &= (int) short.MaxValue;
    }

    private void \uE000(int _param1, int _param2, int _param3)
    {
      while (_param2-- > 0)
      {
        byte[] numArray = this.\uE002;
        OutputWindow outputWindow = this;
        int num1;
        int num2 = num1 = outputWindow.\uE001;
        outputWindow.\uE001 = num1 + 1;
        int index = num2;
        int num3 = (int) this.\uE002[_param1++];
        numArray[index] = (byte) num3;
        this.\uE001 &= (int) short.MaxValue;
        _param1 &= (int) short.MaxValue;
      }
    }

    public void Repeat(int length, int distance)
    {
      OutputWindow outputWindow = this;
      int num1 = outputWindow.\uE000;
      int num2 = length;
      int num3;
      int num4 = num3 = num1 + num2;
      outputWindow.\uE000 = num3;
      if (num4 > 32768)
        throw new InvalidOperationException(\uE01B.\uE000("\uE6B5\uE68B\uE68C\uE686\uE68D\uE695\uE6C2\uE684\uE697\uE68E\uE68E", 59106));
      int sourceIndex = this.\uE001 - distance & (int) short.MaxValue;
      int num5 = 32768 - length;
      if (sourceIndex <= num5 && this.\uE001 < num5)
      {
        if (length <= distance)
        {
          Array.Copy((Array) this.\uE002, sourceIndex, (Array) this.\uE002, this.\uE001, length);
          this.\uE001 += length;
        }
        else
        {
          while (length-- > 0)
            this.\uE002[this.\uE001++] = this.\uE002[sourceIndex++];
        }
      }
      else
        this.\uE000(sourceIndex, length, distance);
    }

    public int CopyStored(StreamManipulator input, int length)
    {
      length = Math.Min(Math.Min(length, 32768 - this.\uE000), input.AvailableBytes);
      int length1 = 32768 - this.\uE001;
      int num;
      if (length > length1)
      {
        num = input.CopyBytes(this.\uE002, this.\uE001, length1);
        if (num == length1)
          num += input.CopyBytes(this.\uE002, 0, length - length1);
      }
      else
        num = input.CopyBytes(this.\uE002, this.\uE001, length);
      this.\uE001 = this.\uE001 + num & (int) short.MaxValue;
      this.\uE000 += num;
      return num;
    }

    public void CopyDict(byte[] dictionary, int offset, int length)
    {
      if (dictionary == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uE021\uE02C\uE026\uE031\uE02C\uE02A\uE02B\uE024\uE037\uE03C", 57413));
      if (this.\uE000 > 0)
        throw new InvalidOperationException();
      if (length > 32768)
      {
        offset += length - 32768;
        length = 32768;
      }
      Array.Copy((Array) dictionary, offset, (Array) this.\uE002, 0, length);
      this.\uE001 = length & (int) short.MaxValue;
    }

    public int GetFreeSpace() => 32768 - this.\uE000;

    public int GetAvailable() => this.\uE000;

    public int CopyOutput(byte[] output, int offset, int len)
    {
      int num1 = this.\uE001;
      if (len > this.\uE000)
        len = this.\uE000;
      else
        num1 = this.\uE001 - this.\uE000 + len & (int) short.MaxValue;
      int num2 = len;
      int length = len - num1;
      if (length > 0)
      {
        Array.Copy((Array) this.\uE002, 32768 - length, (Array) output, offset, length);
        offset += length;
        len = num1;
      }
      Array.Copy((Array) this.\uE002, num1 - len, (Array) output, offset, len);
      this.\uE000 -= num2;
      if (this.\uE000 < 0)
        throw new InvalidOperationException();
      return num2;
    }

    public void Reset() => this.\uE000 = this.\uE001 = 0;
  }
}
