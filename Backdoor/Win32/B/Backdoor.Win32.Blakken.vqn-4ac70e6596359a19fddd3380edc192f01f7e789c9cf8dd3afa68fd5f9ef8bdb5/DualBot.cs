// Decompiled with JetBrains decompiler
// Type: DualBot
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using DefaultPackage;
using System.Collections.Generic;

public class DualBot
{
  public static void DoTurn(PlanetWars pw)
  {
label_1:
    int num1 = 47868526;
    Planet source;
    double num2;
    int num3;
    bool flag1;
    bool flag2;
    bool flag3;
    while (true)
    {
      uint num4;
      switch ((num4 = (uint) (num1 ^ 514328686)) % 28U)
      {
        case 0:
          num1 = 1029497595;
          continue;
        case 1:
          flag2 = true;
          num1 = (int) num4 * 540082630 ^ -1735160991;
          continue;
        case 2:
          int num5 = pw.NumShips(1) > pw.NumShips(2) ? 133033421 : (num5 = 1309984245);
          num1 = num5 ^ (int) num4 * -275246944;
          continue;
        case 3:
          flag3 = pw.Production(1) > pw.Production(2);
          num1 = (int) num4 * 444108109 ^ 1433197101;
          continue;
        case 4:
          num3 = 1;
          num1 = (int) num4 * -168197214 ^ -1181458459;
          continue;
        case 5:
          num3 = 5;
          num1 = (int) num4 * 173190561 ^ 810700439;
          continue;
        case 6:
          num1 = 2105197825;
          continue;
        case 7:
          num1 = 237010182;
          continue;
        case 8:
          num1 = 413308088;
          continue;
        case 9:
          num1 = (int) num4 * -402213629 ^ -1469309528;
          continue;
        case 10:
          flag1 = pw.MyFleets().Count >= num3;
          num1 = 2056244806;
          continue;
        case 11:
          flag2 = false;
          num1 = (int) num4 * -395692810 ^ -1313801038;
          continue;
        case 12:
          int num6 = flag3 ? 1467190688 : (num6 = 92565328);
          num1 = num6 ^ (int) num4 * 1984144675;
          continue;
        case 13:
          num1 = (int) num4 * 401504895 ^ -1281177150;
          continue;
        case 14:
          goto label_68;
        case 15:
          num3 = 3;
          num1 = (int) num4 * 65379646 ^ -1053632225;
          continue;
        case 16:
          int num7 = flag1 ? 1665396571 : (num7 = 97018448);
          num1 = num7 ^ (int) num4 * -451325327;
          continue;
        case 17:
          num1 = (int) num4 * 155496297 ^ 1207468438;
          continue;
        case 19:
          int num8;
          num1 = num8 = pw.Production(1) <= pw.Production(2) ? 1981176146 : (num8 = 371301718);
          continue;
        case 20:
          num1 = (int) num4 * 1079557983 ^ 1432272160;
          continue;
        case 21:
          num1 = (int) num4 * 1629423708 ^ -1627696972;
          continue;
        case 22:
          source = (Planet) null;
          num2 = double.MinValue;
          num1 = 745992912;
          continue;
        case 23:
          num3 = 1;
          num1 = (int) num4 * 40299529 ^ -1328952544;
          continue;
        case 24:
          num3 = 1;
          num1 = (int) num4 * 446337456 ^ 36293899;
          continue;
        case 25:
          num1 = (int) num4 * 1593730516 ^ -482278954;
          continue;
        case 26:
          num1 = (int) num4 * -1363931279 ^ 1039378687;
          continue;
        case 27:
          goto label_1;
        default:
          goto label_28;
      }
    }
label_68:
    return;
label_28:
    List<Planet>.Enumerator enumerator1 = pw.MyPlanets().GetEnumerator();
    try
    {
label_32:
      int num9 = enumerator1.MoveNext() ? 918656827 : (num9 = 954433647);
      double num10;
      Planet current;
      while (true)
      {
        uint num11;
        switch ((num11 = (uint) (num9 ^ 514328686)) % 9U)
        {
          case 0:
            goto label_32;
          case 2:
            current = enumerator1.Current;
            num10 = (double) current.NumShips() / (double) (1 + current.GrowthRate());
            int num12;
            num9 = num12 = num10 > num2 ? 1027690355 : (num12 = 1932899552);
            continue;
          case 3:
            source = current;
            num9 = (int) num11 * 448473576 ^ -1588065353;
            continue;
          case 4:
            num2 = num10;
            num9 = (int) num11 * -1582962852 ^ 383378320;
            continue;
          case 5:
            num9 = 460635931;
            continue;
          case 6:
            num9 = (int) num11 * -1821000143 ^ 947484185;
            continue;
          case 7:
            num9 = 918656827;
            continue;
          case 8:
            num9 = (int) num11 * 1478567325 ^ -1436588608;
            continue;
          default:
            goto label_44;
        }
      }
    }
    finally
    {
      enumerator1.Dispose();
label_40:
      int num13 = 834896639;
      while (true)
      {
        uint num14;
        switch ((num14 = (uint) (num13 ^ 514328686)) % 3U)
        {
          case 0:
            goto label_40;
          case 2:
            num13 = (int) num14 * 1109643321 ^ 2005998449;
            continue;
          default:
            goto label_43;
        }
      }
label_43:;
    }
label_44:
    Planet dest = (Planet) null;
    double num15 = double.MinValue;
label_45:
    int num16 = 357791783;
    List<Planet> planetList;
    bool flag4;
    while (true)
    {
      uint num17;
      switch ((num17 = (uint) (num16 ^ 514328686)) % 6U)
      {
        case 1:
          num16 = (int) num17 * -181611083 ^ -2043488713;
          continue;
        case 2:
          goto label_45;
        case 3:
          planetList = pw.NotMyPlanets();
          flag4 = flag2;
          num16 = (int) num17 * -1463462663 ^ 421064584;
          continue;
        case 4:
          planetList = pw.EnemyPlanets();
          num16 = (int) num17 * -1749353914 ^ -423805486;
          continue;
        case 5:
          int num18 = !flag4 ? 507314235 : (num18 = 1928714694);
          num16 = num18 ^ (int) num17 * 730240967;
          continue;
        default:
          goto label_51;
      }
    }
label_51:
    List<Planet>.Enumerator enumerator2 = planetList.GetEnumerator();
    try
    {
label_59:
      int num19 = enumerator2.MoveNext() ? 1975615612 : (num19 = 1908503959);
      double num20;
      Planet current;
      bool flag5;
      while (true)
      {
        uint num21;
        switch ((num21 = (uint) (num19 ^ 514328686)) % 11U)
        {
          case 0:
            goto label_59;
          case 2:
            num19 = 399319665;
            continue;
          case 3:
            current = enumerator2.Current;
            num19 = 593829012;
            continue;
          case 4:
            int num22 = !flag5 ? -1795330738 : (num22 = -2073659428);
            num19 = num22 ^ (int) num21 * -428494261;
            continue;
          case 5:
            num19 = 1975615612;
            continue;
          case 6:
            num19 = (int) num21 * -1176657708 ^ 483881442;
            continue;
          case 7:
            num20 = (double) (1 + current.GrowthRate()) / (double) current.NumShips();
            flag5 = num20 > num15;
            num19 = (int) num21 * -1091203120 ^ 2068190102;
            continue;
          case 8:
            dest = current;
            num19 = (int) num21 * -1724673796 ^ -1291498245;
            continue;
          case 9:
            num15 = num20;
            num19 = (int) num21 * -666979408 ^ -1028967466;
            continue;
          case 10:
            num19 = (int) num21 * 286809103 ^ -385825712;
            continue;
          default:
            goto label_71;
        }
      }
    }
    finally
    {
      enumerator2.Dispose();
label_66:
      int num23 = 736205709;
      while (true)
      {
        uint num24;
        switch ((num24 = (uint) (num23 ^ 514328686)) % 3U)
        {
          case 0:
            goto label_66;
          case 2:
            num23 = (int) num24 * -1305260681 ^ 912471794;
            continue;
          default:
            goto label_70;
        }
      }
label_70:;
    }
label_71:
    if (source == null)
      goto label_76;
label_72:
    int num25 = 794106118;
label_73:
    bool flag6;
    while (true)
    {
      uint num26;
      switch ((num26 = (uint) (num25 ^ 514328686)) % 7U)
      {
        case 0:
          num25 = (int) num26 * -1661309024 ^ 830354930;
          continue;
        case 1:
          num25 = (int) num26 * -524107635 ^ 111229576;
          continue;
        case 2:
          goto label_72;
        case 3:
          goto label_74;
        case 4:
          int numShips = source.NumShips() / 2;
          pw.IssueOrder(source, dest, numShips);
          num25 = (int) num26 * -1596080364 ^ 267712607;
          continue;
        case 5:
          int num27 = flag6 ? -2098952029 : (num27 = -930110742);
          num25 = num27 ^ (int) num26 * 1799749756;
          continue;
        case 6:
          goto label_75;
        default:
          goto label_64;
      }
    }
label_74:
    return;
label_64:
    return;
label_75:
    int num28 = dest != null ? 1 : 0;
    goto label_77;
label_76:
    num28 = 0;
label_77:
    flag6 = num28 != 0;
    num25 = 1076206812;
    goto label_73;
  }
}
