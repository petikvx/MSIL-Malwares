// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.MessageQueueProcessor
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Threading;

namespace PreEmptive.Analytics.Common
{
  public abstract class MessageQueueProcessor : IQueueProcessor
  {
    private object a;
    private volatile bool b;
    private object c;
    private int d;
    protected IFlowController flowController;
    protected ILogger logger;
    protected IAsyncProvider AsyncProvider;
    private AutoResetEvent e = new AutoResetEvent(false);
    private volatile bool f;

    public bool Running
    {
      get
      {
        int num1 = 30302;
        int num2 = num1;
        num1 = 30302;
        int num3 = num1;
        bool b;
        switch (num2 == num3 ? 1 : 0)
        {
          case 0:
          case 2:
            return b;
          default:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            bool lockTaken = false;
            object a;
            try
            {
              Monitor.Enter(a = this.a, ref lockTaken);
              b = this.b;
              goto case 0;
            }
            finally
            {
              int num5 = 1;
              int num6 = num5;
              while (true)
              {
                switch (num6)
                {
                  case 0:
                    Monitor.Exit(a);
                    num5 = 2;
                    num6 = num5;
                    continue;
                  case 1:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 2:
                    goto label_11;
                }
                if (lockTaken)
                {
                  num5 = 0;
                  num6 = num5;
                }
                else
                  break;
              }
label_11:;
            }
        }
      }
      set
      {
        int num1 = -17638;
        int num2 = num1;
        num1 = -17638;
        int num3 = num1;
        switch (num2 == num3 ? 1 : 0)
        {
          case 0:
            break;
          case 2:
            break;
          default:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            bool lockTaken = false;
            object a;
            try
            {
              Monitor.Enter(a = this.a, ref lockTaken);
              this.b = value;
              break;
            }
            finally
            {
              int num5 = 1;
              int num6 = num5;
              while (true)
              {
                switch (num6)
                {
                  case 0:
                    Monitor.Exit(a);
                    num5 = 2;
                    num6 = num5;
                    continue;
                  case 1:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 2:
                    goto label_13;
                }
                if (lockTaken)
                {
                  num5 = 0;
                  num6 = num5;
                }
                else
                  break;
              }
label_13:;
            }
        }
      }
    }

    protected MessageQueueProcessor(
      IFlowController flowController,
      ILogger logger,
      IAsyncProvider asyncprovider)
    {
      this.a = new object();
      this.c = new object();
      this.flowController = flowController;
      this.logger = logger;
      this.AsyncProvider = asyncprovider;
      this.Running = false;
    }

    private void b()
    {
      int A_1 = 18;
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 0;
      int num2 = num1;
      switch (num2)
      {
        default:
          bool flag1;
          bool flag2;
          switch (0)
          {
            case 0:
label_4:
              this.d = this.flowController.GetInterval(0);
              flag1 = true;
              flag2 = true;
              num1 = 3;
              num2 = num1;
              goto default;
            default:
              while (true)
              {
                switch (num2)
                {
                  case 0:
                    if (!flag1)
                    {
                      num1 = 5;
                      num2 = num1;
                      continue;
                    }
                    try
                    {
                      num1 = 12;
                      int num3 = num1;
                      while (true)
                      {
                        bool lockTaken;
                        switch (num3)
                        {
                          case 0:
                            num1 = 11;
                            num3 = num1;
                            continue;
                          case 1:
                            num1 = 8;
                            num3 = num1;
                            continue;
                          case 2:
                            flag2 = false;
                            num1 = 14;
                            num3 = num1;
                            continue;
                          case 3:
label_22:
                            object a;
                            try
                            {
                              Monitor.Enter(a = this.a, ref lockTaken);
                              flag1 = this.Running;
                            }
                            finally
                            {
                              int num4 = 1;
                              while (true)
                              {
                                int num5;
                                switch (num4)
                                {
                                  case 0:
                                    Monitor.Exit(a);
                                    num5 = 2;
                                    num4 = num5;
                                    continue;
                                  case 1:
                                    switch (0)
                                    {
                                      case 0:
                                        break;
                                      default:
                                        continue;
                                    }
                                    break;
                                  case 2:
                                    goto label_29;
                                }
                                if (lockTaken)
                                {
                                  num5 = 0;
                                  num4 = num5;
                                }
                                else
                                  break;
                              }
label_29:;
                            }
                            num1 = 9;
                            num3 = num1;
                            continue;
                          case 4:
                          case 11:
                            goto label_8;
                          case 5:
                            if (this.f)
                            {
                              num1 = 0;
                              num3 = num1;
                              continue;
                            }
                            lockTaken = false;
                            num1 = 3;
                            num3 = num1;
                            continue;
                          case 6:
                          case 13:
                            num1 = 4;
                            num3 = num1;
                            continue;
                          case 7:
                            this.d = this.flowController.GetInterval(0);
                            num1 = 13;
                            num3 = num1;
                            continue;
                          case 8:
                            if (this.flowController.SendDisabled)
                            {
                              num1 = 7;
                              num3 = num1;
                              continue;
                            }
                            break;
                          case 9:
                            if (flag1)
                            {
                              num1 = 1;
                              num3 = num1;
                              continue;
                            }
                            break;
                          case 10:
                          case 14:
                            num1 = 5;
                            num3 = num1;
                            continue;
                          case 12:
                            num1 = 22613;
                            int num6 = num1;
                            num1 = 22613;
                            int num7 = num1;
                            switch (num6 == num7 ? 1 : 0)
                            {
                              case 0:
                              case 2:
                                goto label_22;
                              default:
                                num1 = 0;
                                if (num1 == 0)
                                  ;
                                switch (0)
                                {
                                  case 0:
                                    goto label_16;
                                  default:
                                    continue;
                                }
                            }
                          default:
label_16:
                            if (flag2)
                            {
                              num1 = 2;
                              num3 = num1;
                              continue;
                            }
                            this.e.WaitOne(this.d);
                            num1 = 10;
                            num3 = num1;
                            continue;
                        }
                        this.ProcessQueueBatches();
                        num1 = 6;
                        num3 = num1;
                      }
                    }
                    catch (Exception ex)
                    {
                      this.logger.LogError(Utils.a("鋅ꃇ꿉\uECCB껍苏\uA7D1뫓뛕\uF8D7껙듛곝藟菡胣웥蟧賩쳫짭", A_1) + this.GetType().Name + Utils.a("\uE1C5\uE8C7뻉\uA4CB볍뗏ꗑ\uF4D3럕뛗龎맛ꛝ菟蟡铣鋥臧藩苫퓭탯헱", A_1) + ex.Message + Utils.a("\uE1C5\uE6C7\uEAC9迋ꇍ뻏ꛑ뷓룕귗동닛망샟雡诣웥髧\u9FE9苫컭胯胱鯳闵鷷觹迻釽狿Ⰱ⨃⠅⠇", A_1));
                      goto case 3;
                    }
                  case 1:
                    if (!this.flowController.SendDisabled)
                    {
                      num1 = 4;
                      num2 = num1;
                      continue;
                    }
                    goto label_45;
                  case 2:
                    goto label_42;
                  case 3:
label_8:
                    num2 = 0;
                    continue;
                  case 4:
                    this.ProcessQueueBatches();
                    num1 = 2;
                    num2 = num1;
                    continue;
                  case 5:
                    num1 = 1;
                    num2 = num1;
                    continue;
                  default:
                    goto label_4;
                }
              }
label_42:
              return;
label_45:
              return;
          }
      }
    }

    public void ProcessQueue()
    {
label_0:
      int num1 = 1;
      if (num1 == 0)
        ;
      if (this.Running)
      {
        this.e.Set();
      }
      else
      {
        num1 = -26865;
        int num2 = num1;
        num1 = -26865;
        int num3 = num1;
        switch (num2 == num3 ? 1 : 0)
        {
          case 0:
          case 2:
            goto label_0;
          default:
            num1 = 0;
            if (num1 == 0)
              ;
            this.ProcessQueueBatches();
            break;
        }
      }
    }

    public void ProcessQueueBatches()
    {
      int A_1 = 8;
label_1:
      int num1 = 0;
      int num2 = num1;
      switch (num2)
      {
        default:
          bool lockTaken;
          switch (0)
          {
            case 0:
label_4:
              lockTaken = false;
              num1 = 3;
              num2 = num1;
              goto default;
            default:
              MessageBatch messageBatch;
              int count1;
              int count2;
              while (true)
              {
                switch (num2)
                {
                  case 0:
                    if (count2 > 0)
                    {
                      num1 = 5;
                      num2 = num1;
                      continue;
                    }
                    goto label_23;
                  case 1:
                    if (count1 > 0)
                    {
                      num1 = 4;
                      num2 = num1;
                      continue;
                    }
                    goto label_23;
                  case 2:
                    goto label_23;
                  case 3:
                    object c;
                    try
                    {
                      Monitor.Enter(c = this.c, ref lockTaken);
                      messageBatch = this.GetMessageBatch();
                    }
                    finally
                    {
                      int num3 = 1;
                      while (true)
                      {
                        switch (num3)
                        {
                          case 0:
                            Monitor.Exit(c);
                            num3 = 2;
                            continue;
                          case 1:
                            switch (0)
                            {
                              case 0:
                                break;
                              default:
                                continue;
                            }
                            break;
                          case 2:
                            goto label_20;
                        }
                        if (lockTaken)
                          num3 = 0;
                        else
                          break;
                      }
label_20:;
                    }
                    count2 = messageBatch.Messages.Count;
                    num1 = 0;
                    num2 = num1;
                    continue;
                  case 4:
                    num1 = 1;
                    if (num1 == 0)
                      ;
                    this.logger.LogInfo(string.Format(Utils.a("잻躽붿\uE2C1꧃ꏅ믇막귋꧍뗏ꇑ\uF4D3럕\uAAD7뿙ﳛ볝藟诡諣臥죧髩黫臭鏯韱蟳藵鷷黹틻", A_1), new object[1]
                    {
                      (object) count1
                    }));
                    this.ProcessBatch(messageBatch);
                    num1 = 2;
                    num2 = num1;
                    continue;
                  case 5:
                    count1 = messageBatch.Messages.Count;
                    num1 = -29809;
                    int num4 = num1;
                    num1 = -29809;
                    int num5 = num1;
                    switch (num4 == num5 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_1;
                      default:
                        num1 = 0;
                        if (num1 == 0)
                          ;
                        num1 = 1;
                        num2 = num1;
                        continue;
                    }
                  default:
                    goto label_4;
                }
              }
label_23:
              this.d = this.flowController.GetInterval(count2);
              return;
          }
      }
    }

    public virtual void Start()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 0;
      int num2 = num1;
      switch (num2)
      {
        default:
          bool flag;
          bool lockTaken;
          switch (0)
          {
            case 0:
label_4:
              flag = true;
              lockTaken = false;
              num1 = 2;
              num2 = num1;
              goto default;
            default:
              while (true)
              {
                switch (num2)
                {
                  case 0:
                    num1 = 4;
                    num2 = num1;
                    continue;
                  case 1:
                    goto label_27;
                  case 2:
                    object a;
                    try
                    {
                      switch (0)
                      {
                        case 0:
label_7:
                          Monitor.Enter(a = this.a, ref lockTaken);
                          break;
                        default:
label_6:
                          while (true)
                          {
                            switch (num2)
                            {
                              case 0:
                                goto label_22;
                              case 1:
                                if (!this.Running)
                                {
                                  num1 = 2;
                                  num2 = num1;
                                  continue;
                                }
                                break;
                              case 2:
                                this.Running = true;
                                flag = false;
                                num1 = 3;
                                num2 = num1;
                                continue;
                              case 3:
                                num1 = 23993;
                                int num3 = num1;
                                num1 = 23993;
                                int num4 = num1;
                                switch (num3 == num4 ? 1 : 0)
                                {
                                  case 0:
                                  case 2:
                                    goto label_8;
                                  default:
                                    num1 = 0;
                                    if (num1 == 0)
                                      break;
                                    break;
                                }
                                break;
                              default:
                                goto label_7;
                            }
                            num1 = 0;
                            num2 = num1;
                          }
                      }
label_8:
                      num1 = 1;
                      num2 = num1;
                      goto label_6;
                    }
                    finally
                    {
                      int num5 = 1;
                      int num6 = num5;
                      while (true)
                      {
                        switch (num6)
                        {
                          case 0:
                            Monitor.Exit(a);
                            num5 = 2;
                            num6 = num5;
                            continue;
                          case 1:
                            switch (0)
                            {
                              case 0:
                                break;
                              default:
                                continue;
                            }
                            break;
                          case 2:
                            goto label_21;
                        }
                        if (lockTaken)
                        {
                          num5 = 0;
                          num6 = num5;
                        }
                        else
                          break;
                      }
label_21:;
                    }
label_22:
                    num1 = 3;
                    num2 = num1;
                    continue;
                  case 3:
                    if (!flag)
                    {
                      num1 = 0;
                      num2 = num1;
                      continue;
                    }
                    goto label_28;
                  case 4:
                    this.AsyncProvider.ExecuteAsync<object>((Func<object>) (() =>
                    {
                      int num7 = 1;
                      if (num7 == 0)
                        ;
                      num7 = -30164;
                      int num8 = num7;
                      num7 = -30164;
                      int num9 = num7;
                      switch (num8 == num9)
                      {
                        case true:
                          num7 = 0;
                          if (num7 == 0)
                            ;
                          this.b();
                          return (object) null;
                        default:
                          goto case 1;
                      }
                    }));
                    num1 = 1;
                    num2 = num1;
                    continue;
                  default:
                    goto label_4;
                }
              }
label_27:
              return;
label_28:
              return;
          }
      }
    }

    public void Stop()
    {
      bool lockTaken = false;
      object a;
      try
      {
        int num1;
        int num2;
        switch (0)
        {
          case 0:
label_3:
            Monitor.Enter(a = this.a, ref lockTaken);
            break;
          default:
label_2:
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_18;
                case 1:
                  num2 = 1;
                  if (num2 == 0)
                    ;
                  if (this.Running)
                  {
                    num2 = 2;
                    num1 = num2;
                    continue;
                  }
                  break;
                case 2:
                  this.Running = false;
                  this.ProcessQueueBatches();
                  num2 = 3;
                  num1 = num2;
                  continue;
                case 3:
                  num2 = 428;
                  int num3 = num2;
                  num2 = 428;
                  int num4 = num2;
                  switch (num3 == num4 ? 1 : 0)
                  {
                    case 0:
                    case 2:
                      goto label_4;
                    default:
                      num2 = 0;
                      if (num2 == 0)
                        break;
                      break;
                  }
                  break;
                default:
                  goto label_3;
              }
              num2 = 0;
              num1 = num2;
            }
label_18:
            return;
        }
label_4:
        num2 = 1;
        num1 = num2;
        goto label_2;
      }
      finally
      {
        int num5 = 1;
        int num6 = num5;
        while (true)
        {
          switch (num6)
          {
            case 0:
              Monitor.Exit(a);
              num5 = 2;
              num6 = num5;
              continue;
            case 1:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
            case 2:
              goto label_19;
          }
          if (lockTaken)
          {
            num5 = 0;
            num6 = num5;
          }
          else
            break;
        }
label_19:;
      }
    }

    public void ProcessQueueNow()
    {
      int num1 = 1;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            this.ProcessQueue();
            num2 = 2;
            num1 = num2;
            continue;
          case 1:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 2:
            num2 = -1797;
            int num3 = num2;
            num2 = -1797;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                break;
              default:
                goto label_9;
            }
            break;
          default:
label_3:
            if (!this.Running)
              goto case 2;
            else
              break;
        }
        num2 = 0;
        num1 = num2;
      }
label_9:
      num2 = 0;
      if (num2 == 0)
        ;
      num2 = 1;
      if (num2 == 0)
        ;
    }

    public virtual void ProcessBatch(MessageBatch batch)
    {
      int num1 = -3428;
      int num2 = num1;
      num1 = -3428;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            break;
          break;
        default:
          goto case 1;
      }
    }

    public virtual MessageBatch GetMessageBatch()
    {
      int num1 = -9539;
      int num2 = num1;
      num1 = -9539;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return new MessageBatch(new AgentInfo(), new Configuration(), (IList<Message>) new List<Message>());
        default:
          goto case 1;
      }
    }
  }
}
