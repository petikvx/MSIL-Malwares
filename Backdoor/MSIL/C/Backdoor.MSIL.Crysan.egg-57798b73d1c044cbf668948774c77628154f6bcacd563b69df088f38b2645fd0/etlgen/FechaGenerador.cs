// Decompiled with JetBrains decompiler
// Type: etlgen.FechaGenerador
// Assembly: UCOMIEnumConnecti, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5D827560-3619-4F41-B7F7-70598092DF43
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.egg-57798b73d1c044cbf668948774c77628154f6bcacd563b69df088f38b2645fd0.exe

using System;
using System.Collections;
using System.IO;
using System.Xml;

namespace etlgen
{
  public class FechaGenerador : ObjGenerador
  {
    private string file;
    private Hashtable fechas;

    public FechaGenerador()
    {
      this.entidad = this.id = "da_smart_key";
      this.fechas = new Hashtable();
    }

    public override object Generar(Random random) => this.fechas[(object) random.Next(this.fechas.Count)];

    public override ObjGenerador Clonar()
    {
      FechaGenerador fechaGenerador = new FechaGenerador();
      fechaGenerador.entidad = this.entidad;
      fechaGenerador.id = this.id;
      fechaGenerador.fechas = (Hashtable) this.fechas.Clone();
      return (ObjGenerador) fechaGenerador;
    }

    public override void Cargar(XmlTextReader reader, ETLConfig configuracion)
    {
      if (reader.NodeType != XmlNodeType.Element || reader.Name != this.entidad)
        this.ErrorEntidad(this.entidad);
      string id = (string) null;
      string str = (string) null;
      while (reader.MoveToNextAttribute())
      {
        string name = reader.Name;
        if (!(name == "id"))
        {
          if (name == "file")
            str = reader.Value;
          else
            this.ErrorAtributo(this.entidad, reader.Name, reader.Value, reader.LineNumber);
        }
        else
          id = reader.Value;
      }
      if (id != null)
        this.id = id;
      if (str != null)
        this.file = str;
      else
        this.ErrorValor(this.entidad, id, "file", "");
      this.CargarFechas();
    }

    private void CargarFechas()
    {
      StreamReader streamReader;
      try
      {
        streamReader = new StreamReader(this.file);
      }
      catch
      {
        throw new Exception("El archivo " + this.file + " no se puede abrir.");
      }
      string s;
      while ((s = streamReader.ReadLine()) != null)
      {
        try
        {
          this.fechas.Add((object) this.fechas.Count, (object) long.Parse(s));
        }
        catch (FormatException ex)
        {
        }
      }
    }

    public override string ToString() => "<" + this.entidad + " id=\"" + this.id + "\" file=\"" + this.file + "\" ";
  }
}
