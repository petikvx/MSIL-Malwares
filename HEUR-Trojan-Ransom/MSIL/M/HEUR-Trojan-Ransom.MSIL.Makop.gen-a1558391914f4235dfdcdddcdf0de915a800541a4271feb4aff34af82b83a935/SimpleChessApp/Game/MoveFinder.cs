// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: fC, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2BFFC2A0-BEF7-47FD-8B55-B5339EE53E65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-a1558391914f4235dfdcdddcdf0de915a800541a4271feb4aff34af82b83a935.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = -1824944801;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2059716158)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 482515104 ^ -1040839655;
            continue;
          case 3:
            num1 = (int) num2 * 1582858329 ^ -1862229237;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.board = b;
    }

    public void FindAllMoves()
    {
label_1:
      int num1 = -1596991999;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -37830362)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Clear();
            num1 = (int) num2 * 1417761432 ^ -32660849;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_10:
        int num3 = !enumerator.MoveNext() ? -1033708541 : (num3 = -785853606);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -37830362)) % 5U)
          {
            case 0:
              num3 = -785853606;
              continue;
            case 1:
              this.FindMoveFrom(enumerator.Current.Current);
              num3 = -1691662001;
              continue;
            case 2:
              num3 = (int) num4 * 1144750768 ^ 613355411;
              continue;
            case 3:
              goto label_10;
            default:
              goto label_12;
          }
        }
      }
label_12:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.BlackPieces.Values.GetEnumerator())
      {
label_18:
        int num5 = !enumerator.MoveNext() ? -1407676779 : (num5 = -1234264576);
        ChessPiece current;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -37830362)) % 6U)
          {
            case 0:
              num5 = -1234264576;
              continue;
            case 2:
              current = enumerator.Current;
              num5 = -349789475;
              continue;
            case 3:
              goto label_18;
            case 4:
              num5 = (int) num6 * 211367931 ^ 301641923;
              continue;
            case 5:
              this.FindMoveFrom(current.Current);
              num5 = (int) num6 * 1023543082 ^ -1914863032;
              continue;
            default:
              goto label_22;
          }
        }
      }
label_22:
      bool showAllMoves = this.board.ShowAllMoves;
label_23:
      int num7 = -490033397;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ -37830362)) % 5U)
        {
          case 0:
            goto label_23;
          case 1:
            num7 = (int) num8 * 2001312151 ^ 565664250;
            continue;
          case 2:
            int num9 = !showAllMoves ? 1728611759 : (num9 = 627498778);
            num7 = num9 ^ (int) num8 * 1603985300;
            continue;
          case 3:
            goto label_25;
          case 4:
            this.HighLightMoveStyle();
            num7 = (int) num8 * 352886360 ^ 1589984049;
            continue;
          default:
            goto label_20;
        }
      }
label_25:
      return;
label_20:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = 524755421;
      Pieces kind;
      Pieces pieces;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1511966297)) % 19U)
        {
          case 0:
            num1 = (int) num2 * -1708568488 ^ -963682597;
            continue;
          case 1:
label_5:
            this.handleKnight(x);
            num1 = 484408691;
            continue;
          case 2:
label_6:
            this.handleBishop(x);
            num1 = 1463659114;
            continue;
          case 3:
label_13:
            this.handlePawn(x);
            num1 = 1154165530;
            continue;
          case 4:
            kind = x.Piece.Kind;
            num1 = (int) num2 * -1725965126 ^ -1668319092;
            continue;
          case 5:
            switch (pieces)
            {
              case Pieces.Pawn:
                goto label_13;
              case Pieces.Knight:
                goto label_5;
              case Pieces.Bishop:
                goto label_6;
              case Pieces.Rook:
                goto label_9;
              case Pieces.King:
                goto label_8;
              case Pieces.Queen:
                goto label_7;
              default:
                num1 = (int) num2 * -685761440 ^ -2005279226;
                continue;
            }
          case 6:
label_8:
            this.handleKing(x);
            num1 = 1854321177;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * 1757813308 ^ 1482249783;
            continue;
          case 9:
            num1 = (int) num2 * -288785563 ^ -844782128;
            continue;
          case 10:
            goto label_1;
          case 11:
            pieces = kind;
            num1 = (int) num2 * 1516025133 ^ -361450846;
            continue;
          case 12:
label_9:
            this.handleRook(x);
            num1 = 468335997;
            continue;
          case 13:
            num1 = (int) num2 * 499284741 ^ 200264435;
            continue;
          case 14:
label_7:
            this.handleQueen(x);
            num1 = 161471782;
            continue;
          case 15:
            num1 = (int) num2 * 472731680 ^ -659762093;
            continue;
          case 16:
            num1 = (int) num2 * -1556083932 ^ -121760417;
            continue;
          case 17:
            num1 = (int) num2 * 64247541 ^ -1204556180;
            continue;
          case 18:
            num1 = (int) num2 * -1751873121 ^ 397314181;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
label_1:
      int num2 = 1319417594;
      while (true)
      {
        uint num3;
        bool flag1;
        int num4;
        bool flag2;
        int num5;
        Square square;
        int b;
        int num6;
        bool flag3;
        int num7;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        int num8;
        bool flag11;
        bool flag12;
        bool flag13;
        bool isEmpty;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num3 = (uint) (num2 ^ 656408167)) % 69U)
        {
          case 0:
            num5 = x.Rank + 2 * num7;
            num2 = (int) num3 * -421306840 ^ 102101995;
            continue;
          case 1:
            num1 = x.File - 1;
            num2 = 580276964;
            continue;
          case 2:
            if (x.Rank == 4)
            {
              num2 = 1468009876;
              continue;
            }
            num9 = 0;
            goto label_48;
          case 3:
            num2 = (int) num3 * -1621005956 ^ 2094180944;
            continue;
          case 4:
            flag12 = flag6 | flag11;
            num2 = (int) num3 * -355760426 ^ -776980702;
            continue;
          case 5:
            num10 = this.board[num4, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_43;
          case 6:
            int num19 = !flag1 ? 617415148 : (num19 = 530549272);
            num2 = num19 ^ (int) num3 * -658357468;
            continue;
          case 7:
            int num20 = !flag5 ? 1522720208 : (num20 = 1318439927);
            num2 = num20 ^ (int) num3 * -1778036308;
            continue;
          case 8:
            flag13 = this.board[num6, x.Rank].Piece != null;
            num2 = (int) num3 * -1181458726 ^ -611956293;
            continue;
          case 9:
            int num21 = flag13 ? 2032406796 : (num21 = 1397584811);
            num2 = num21 ^ (int) num3 * -1812693104;
            continue;
          case 10:
            num1 = x.File + 1;
            num5 = x.Rank + num7;
            if (num1 < 8)
            {
              num2 = 221507446;
              continue;
            }
            goto label_23;
          case 11:
            num2 = 1697708183;
            continue;
          case 12:
            num11 = num5 < 8 ? 1 : 0;
            goto label_24;
          case 13:
            square = this.board[num1, num5];
            num2 = (int) num3 * -1602425169 ^ -1443859408;
            continue;
          case 14:
            int num22 = flag10 ? 1638387594 : (num22 = 90276192);
            num2 = num22 ^ (int) num3 * -853079870;
            continue;
          case 15:
            num2 = (int) num3 * -1952701615 ^ 1443749459;
            continue;
          case 16:
            int num23 = flag8 ? -1746620646 : (num23 = -209801346);
            num2 = num23 ^ (int) num3 * -1556061115;
            continue;
          case 17:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * 603196046 ^ -1692443071;
            continue;
          case 18:
            if (x.Piece.Color != PieceColor.White)
            {
              num2 = (int) num3 * -638872017 ^ 114683658;
              continue;
            }
            num12 = 1;
            goto label_95;
          case 19:
            int num24 = flag12 ? 895509918 : (num24 = 1638927061);
            num2 = num24 ^ (int) num3 * -2885682;
            continue;
          case 20:
            flag2 = this.board[num4, x.Rank].Piece != null;
            num2 = (int) num3 * 1864387417 ^ -451872559;
            continue;
          case 21:
            num2 = 1407923859;
            continue;
          case 22:
            num9 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_48;
          case 23:
            num6 = x.File - 1;
            num2 = (int) num3 * -1960700693 ^ 648542070;
            continue;
          case 24:
            num13 = num5 < 8 ? 1 : 0;
            goto label_72;
          case 25:
            if (x.Piece.Color != PieceColor.White)
            {
              num2 = (int) num3 * -1526209145 ^ 38749775;
              continue;
            }
            num14 = 1;
            goto label_38;
          case 26:
            num2 = 82447530;
            continue;
          case 27:
            int num25 = !flag4 ? -6476551 : (num25 = -1572865527);
            num2 = num25 ^ (int) num3 * 1034169934;
            continue;
          case 28:
            num12 = 6;
            goto label_95;
          case 29:
            flag9 = this.board.lastPassantPawn == this.board[num6, x.Rank].Piece;
            num2 = (int) num3 * -1544076331 ^ 255562711;
            continue;
          case 30:
            goto label_1;
          case 31:
            if (this.board[num6, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num15 = 0;
              goto label_18;
            }
            else
            {
              num2 = (int) num3 * -349632640 ^ 290988195;
              continue;
            }
          case 32:
            flag10 = num4 < 8;
            num2 = 1345060717;
            continue;
          case 33:
            flag1 = this.board.lastPassantPawn == this.board[num4, x.Rank].Piece;
            num2 = (int) num3 * -1631396913 ^ -1419858179;
            continue;
          case 34:
            int num26 = flag2 ? -190879729 : (num26 = -1480225153);
            num2 = num26 ^ (int) num3 * -1944878467;
            continue;
          case 35:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * 2010991553 ^ -1856310269;
            continue;
          case 36:
            this.addCapture(num6, b, x, this.board[num6, x.Rank].Piece);
            num2 = (int) num3 * -1661814139 ^ 137291719;
            continue;
          case 37:
            num5 = x.Rank + num7;
            if (num1 >= 0)
            {
              num2 = (int) num3 * -1078563446 ^ -137729557;
              continue;
            }
            goto label_71;
          case 38:
            num5 = 0;
            num2 = (int) num3 * 434565841 ^ -1989143657;
            continue;
          case 39:
            num16 = num5 < 8 ? 1 : 0;
            goto label_21;
          case 40:
            num4 = x.File + 1;
            flag4 = num6 >= 0;
            num2 = (int) num3 * 1855323597 ^ -1177542176;
            continue;
          case 41:
            int num27 = square.IsEmpty ? -603317099 : (num27 = -68118849);
            num2 = num27 ^ (int) num3 * 1644793579;
            continue;
          case 42:
            num2 = 2108987612;
            continue;
          case 43:
            num1 = x.File;
            num5 = x.Rank + num7;
            if (num5 < 0)
            {
              num16 = 0;
              goto label_21;
            }
            else
            {
              num2 = (int) num3 * -2030610798 ^ 1994392699;
              continue;
            }
          case 44:
            int num28 = !flag9 ? -1360984228 : (num28 = -656925716);
            num2 = num28 ^ (int) num3 * -1621213765;
            continue;
          case 45:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * -707095045 ^ -1020829195;
            continue;
          case 46:
            goto label_3;
          case 47:
            int num29 = flag3 ? 819241924 : (num29 = 1236959048);
            num2 = num29 ^ (int) num3 * -1184186993;
            continue;
          case 48:
            int num30 = !isEmpty ? -718331204 : (num30 = -1095916008);
            num2 = num30 ^ (int) num3 * 163753241;
            continue;
          case 49:
            this.addCapture(num4, b, x, this.board[num4, x.Rank].Piece);
            num2 = (int) num3 * -396653621 ^ -633022915;
            continue;
          case 50:
            square = this.board[num1, num5];
            num2 = (int) num3 * -1952124712 ^ 466179792;
            continue;
          case 51:
            flag8 = !square.IsEmpty;
            num2 = (int) num3 * -280901501 ^ -2141309423;
            continue;
          case 52:
            if (this.board[num4, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num10 = 0;
              goto label_43;
            }
            else
            {
              num2 = (int) num3 * -1459533630 ^ -1436336537;
              continue;
            }
          case 53:
            num2 = (int) num3 * 678921657 ^ 1362809478;
            continue;
          case 54:
            flag7 = x.Rank == num8;
            num2 = 240120575;
            continue;
          case 55:
            num2 = (int) num3 * 819045688 ^ 2026770290;
            continue;
          case 56:
            num15 = this.board[num6, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_18;
          case 57:
            if (num5 >= 0)
            {
              num2 = (int) num3 * -1867386258 ^ 430211236;
              continue;
            }
            goto label_23;
          case 58:
            num17 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_90;
          case 59:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * -707728254 ^ 1743386363;
            continue;
          case 60:
            int num31 = flag7 ? 1962427022 : (num31 = 47607410);
            num2 = num31 ^ (int) num3 * -1360109338;
            continue;
          case 61:
            square = this.board[num1, num5];
            num2 = (int) num3 * 1957866071 ^ 1614149962;
            continue;
          case 62:
            num14 = -1;
            goto label_38;
          case 63:
            num2 = (int) num3 * -845568784 ^ -1351263908;
            continue;
          case 64:
            if (x.Rank == 3)
            {
              num2 = (int) num3 * -92180825 ^ 294431163;
              continue;
            }
            num17 = 0;
            goto label_90;
          case 65:
            num2 = (int) num3 * 1135736690 ^ -723468961;
            continue;
          case 66:
            isEmpty = square.IsEmpty;
            num2 = (int) num3 * -1431720604 ^ 925616511;
            continue;
          case 67:
            if (num5 >= 0)
            {
              num2 = (int) num3 * -350356784 ^ 880756422;
              continue;
            }
            goto label_71;
          case 68:
            num18 = 2;
            break;
          default:
            goto label_103;
        }
label_11:
        b = num18;
        num2 = 426297815;
        continue;
label_18:
        int num32;
        num2 = num32 = num15 != 0 ? 1758814102 : (num32 = 1669190123);
        continue;
label_21:
        int num33;
        num2 = num33 = num16 != 0 ? 2115173207 : (num33 = 1697708183);
        continue;
label_23:
        num11 = 0;
label_24:
        flag3 = num11 != 0;
        num2 = 381616971;
        continue;
label_38:
        num7 = num14;
        num2 = 1212471036;
        continue;
label_43:
        flag5 = num10 != 0;
        num2 = 936509564;
        continue;
label_48:
        flag6 = num9 != 0;
        num2 = 622588796;
        continue;
label_71:
        num13 = 0;
label_72:
        int num34;
        num2 = num34 = num13 != 0 ? 361659704 : (num34 = 82447530);
        continue;
label_90:
        flag11 = num17 != 0;
        if (flag6)
        {
          num18 = 5;
          goto label_11;
        }
        else
        {
          num2 = 1095607912;
          continue;
        }
label_95:
        num8 = num12;
        num2 = 424372473;
      }
label_3:
      return;
label_103:;
    }

    private void handleQueen(Square x)
    {
      this.handleRook(x);
label_1:
      int num1 = -237890767;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -279369928)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 9207256 ^ -1799598386;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.handleBishop(x);
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
label_1:
      int num1 = 1838529383;
      bool canCastleKingSide;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 326763806)) % 20U)
        {
          case 0:
            num1 = (int) num2 * 1072874123 ^ 2042406988;
            continue;
          case 1:
            this.addMove(x.File + 1, x.Rank - 1, x);
            this.addMove(x.File - 1, x.Rank + 1, x);
            this.addMove(x.File - 1, x.Rank - 1, x);
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            int num3 = x.Piece.Color != PieceColor.White ? -496115061 : (num3 = -612680612);
            num1 = num3 ^ (int) num2 * -1403496108;
            continue;
          case 2:
            canCastleKingSide = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * 1780410450 ^ 1996650828;
            continue;
          case 3:
            num1 = 655847999;
            continue;
          case 4:
            int num4 = this.board.WhiteCanCastleKingSide ? 950180895 : (num4 = 1079908304);
            num1 = num4 ^ (int) num2 * 883250322;
            continue;
          case 5:
            int num5 = !flag ? 1051634944 : (num5 = 1278068662);
            num1 = num5 ^ (int) num2 * -1473219876;
            continue;
          case 6:
            num1 = (int) num2 * -986950327 ^ 731339516;
            continue;
          case 7:
            num1 = (int) num2 * 64982363 ^ -777681532;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 1971398449 ^ -1477301407;
            continue;
          case 10:
            goto label_3;
          case 11:
            num1 = 1789967388;
            continue;
          case 12:
            num1 = (int) num2 * -1051355094 ^ -1174956867;
            continue;
          case 13:
            flag = x.Piece.Color == PieceColor.Black;
            num1 = 1420124655;
            continue;
          case 14:
            int num6 = canCastleKingSide ? -1592788817 : (num6 = -1445211503);
            num1 = num6 ^ (int) num2 * 1342553798;
            continue;
          case 15:
            this.handleBigCastling(x);
            num1 = (int) num2 * 647461674 ^ -1226744973;
            continue;
          case 16:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1302455533 ^ -1155967203;
            continue;
          case 17:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 1637571705 ^ 837316303;
            continue;
          case 18:
            int num7;
            num1 = num7 = this.board.WhiteCanCastleQueenSide ? 176145498 : (num7 = 640344017);
            continue;
          case 19:
            int num8;
            num1 = num8 = this.board.BlackCanCastleQueenSide ? 454788805 : (num8 = 879198621);
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = 1187435363;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1743610475)) % 9U)
        {
          case 0:
            if (square3.IsEmpty)
            {
              num1 = (int) num2 * -1285226329 ^ 1740434388;
              continue;
            }
            break;
          case 1:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -492275623 ^ -1125434059;
            continue;
          case 2:
            int num4 = flag ? -1105004034 : (num4 = -1605442600);
            num1 = num4 ^ (int) num2 * 1425195596;
            continue;
          case 3:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -784383069 ^ -1352298212;
              continue;
            }
            break;
          case 4:
            goto label_1;
          case 5:
            num3 = square2.IsEmpty ? 1 : 0;
            goto label_7;
          case 6:
            square1 = this.board[x.File - 1, x.Rank];
            num1 = (int) num2 * 1624392008 ^ -466434010;
            continue;
          case 7:
            goto label_3;
          case 8:
            square3 = this.board[x.File - 2, x.Rank];
            square2 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * -1734972921 ^ 1660513445;
            continue;
          default:
            goto label_15;
        }
        num3 = 0;
label_7:
        flag = num3 != 0;
        num1 = 1599821375;
      }
label_3:
      return;
label_15:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = -1132001897;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1368525968)) % 8U)
        {
          case 0:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * 1734316304 ^ -2014787471;
            continue;
          case 1:
            goto label_3;
          case 2:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          case 3:
            int num4 = flag ? -203891384 : (num4 = -678191367);
            num1 = num4 ^ (int) num2 * -624204392;
            continue;
          case 4:
            goto label_1;
          case 5:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -1326613967 ^ -1523021105;
              continue;
            }
            num3 = 0;
            break;
          case 6:
            square2 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * 1938756339 ^ -787568465;
            continue;
          case 7:
            square1 = this.board[x.File + 1, x.Rank];
            num1 = (int) num2 * 1309838485 ^ -1773013803;
            continue;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = -1120495749;
      }
label_3:
      return;
label_13:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = -1926908130;
      int b1;
      bool flag1;
      int num2;
      int num3;
      bool flag2;
      int num4;
      bool flag3;
      bool flag4;
      int num5;
      bool flag5;
      bool flag6;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1936672062)) % 39U)
        {
          case 0:
            num1 = -2146160878;
            continue;
          case 1:
            b1 = x.Rank + num2;
            num1 = (int) num6 * -1852852970 ^ 1714844597;
            continue;
          case 2:
            flag4 = num3 < 8;
            num1 = -999523939;
            continue;
          case 3:
            num1 = -469289109;
            continue;
          case 4:
            num1 = -1891859954;
            continue;
          case 5:
            num1 = (int) num6 * 166031536 ^ -1657289318;
            continue;
          case 6:
            flag6 = this.addMove(x.File - num4, x.Rank, x);
            num1 = (int) num6 * -749123405 ^ -1761914026;
            continue;
          case 7:
            int b2 = x.Rank - num3;
            flag2 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * -877778436 ^ -991868237;
            continue;
          case 8:
            num1 = (int) num6 * 828599249 ^ 1207983054;
            continue;
          case 9:
            num1 = (int) num6 * -1383941731 ^ 1661841247;
            continue;
          case 10:
            num2 = 1;
            num1 = (int) num6 * -1011281030 ^ 1877333101;
            continue;
          case 11:
            num1 = (int) num6 * 1002961012 ^ 1789381200;
            continue;
          case 12:
            int num7 = !flag2 ? 993546504 : (num7 = 322147899);
            num1 = num7 ^ (int) num6 * 250775524;
            continue;
          case 13:
            num1 = -1950955289;
            continue;
          case 14:
            flag5 = num5 < 8;
            num1 = -1620694052;
            continue;
          case 15:
            ++num3;
            num1 = (int) num6 * 1066750854 ^ 856265236;
            continue;
          case 16:
            int num8 = !flag1 ? 695687388 : (num8 = 1776746433);
            num1 = num8 ^ (int) num6 * -735058407;
            continue;
          case 17:
            num3 = 1;
            num1 = -1296908043;
            continue;
          case 18:
            ++num4;
            num1 = (int) num6 * -168678561 ^ -969692580;
            continue;
          case 19:
            ++num5;
            num1 = (int) num6 * -1405972763 ^ 1666652226;
            continue;
          case 20:
            flag3 = num4 < 8;
            num1 = -121601287;
            continue;
          case 21:
            num1 = -1608437628;
            continue;
          case 22:
            flag1 = this.addMove(x.File + num5, x.Rank, x);
            num1 = (int) num6 * 898681909 ^ -1867889447;
            continue;
          case 23:
            int num9;
            num1 = num9 = num2 < 8 ? -1952294937 : (num9 = -1577505341);
            continue;
          case 24:
            num1 = (int) num6 * -313489918 ^ -1163315653;
            continue;
          case 25:
            num1 = -1996680522;
            continue;
          case 26:
            int num10 = !flag4 ? 1747745781 : (num10 = 1143017623);
            num1 = num10 ^ (int) num6 * -1424404031;
            continue;
          case 27:
            int num11 = !flag6 ? 1847359883 : (num11 = 150561902);
            num1 = num11 ^ (int) num6 * 642163479;
            continue;
          case 28:
            int num12 = this.addMove(x.File, b1, x) ? -989339792 : (num12 = -1163560808);
            num1 = num12 ^ (int) num6 * -1912106962;
            continue;
          case 29:
            num4 = 1;
            num1 = -243728920;
            continue;
          case 30:
            num1 = (int) num6 * -61363765 ^ 775862317;
            continue;
          case 31:
            num1 = -1707519383;
            continue;
          case 32:
            goto label_1;
          case 33:
            ++num2;
            num1 = (int) num6 * -1591668533 ^ -319680999;
            continue;
          case 34:
            goto label_3;
          case 35:
            int num13 = flag3 ? 1698714866 : (num13 = 1649148228);
            num1 = num13 ^ (int) num6 * 622972104;
            continue;
          case 36:
            num5 = 1;
            num1 = -1267700113;
            continue;
          case 37:
            num1 = -1617198102;
            continue;
          case 38:
            int num14 = flag5 ? 1937624887 : (num14 = 240555653);
            num1 = num14 ^ (int) num6 * -1726341259;
            continue;
          default:
            goto label_41;
        }
      }
label_3:
      return;
label_41:;
    }

    private void handleBishop(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = -992706183;
      int num3;
      int a1;
      int num4;
      int a2;
      bool flag1;
      int num5;
      int a3;
      bool flag2;
      int b1;
      bool flag3;
      int a4;
      bool flag4;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ -2005768674)) % 40U)
        {
          case 0:
            ++num1;
            num2 = (int) num6 * 651603194 ^ 1590891117;
            continue;
          case 1:
            flag4 = this.addMove(a4, b1, x);
            num2 = (int) num6 * -1974381877 ^ -1970250761;
            continue;
          case 2:
            num2 = (int) num6 * -1131447886 ^ 901272097;
            continue;
          case 3:
            num2 = -1924693016;
            continue;
          case 4:
            a4 = x.File + num5;
            num2 = (int) num6 * 1540682915 ^ 1876189555;
            continue;
          case 5:
            num5 = 1;
            num2 = -2031676052;
            continue;
          case 6:
            flag1 = num4 < 8;
            num2 = -1513756991;
            continue;
          case 7:
            int b2 = x.Rank + num1;
            int num7 = this.addMove(a3, b2, x) ? -2051711003 : (num7 = -923610391);
            num2 = num7 ^ (int) num6 * 473990097;
            continue;
          case 8:
            int b3 = x.Rank + num4;
            flag2 = this.addMove(a2, b3, x);
            num2 = (int) num6 * 527905906 ^ 1434445653;
            continue;
          case 9:
            num2 = (int) num6 * -731002087 ^ -1566818486;
            continue;
          case 10:
            int num8;
            num2 = num8 = num3 >= 8 ? -1729275659 : (num8 = -1321316608);
            continue;
          case 11:
            int num9 = !flag2 ? -1852741461 : (num9 = -1367469407);
            num2 = num9 ^ (int) num6 * -1904900102;
            continue;
          case 12:
            num2 = (int) num6 * -439670179 ^ -231701774;
            continue;
          case 13:
            num2 = (int) num6 * 595492430 ^ -302345046;
            continue;
          case 14:
            a1 = x.File - num3;
            num2 = -1171185041;
            continue;
          case 15:
            goto label_1;
          case 16:
            num3 = 1;
            num2 = -1440406197;
            continue;
          case 17:
            ++num3;
            num2 = (int) num6 * -243170581 ^ -1919193033;
            continue;
          case 18:
            a3 = x.File + num1;
            num2 = -1002953431;
            continue;
          case 19:
            int num10;
            num2 = num10 = num5 >= 8 ? -177791498 : (num10 = -1616383500);
            continue;
          case 20:
            num2 = (int) num6 * -1674873360 ^ 344524725;
            continue;
          case 21:
            num2 = -429150000;
            continue;
          case 22:
            ++num5;
            num2 = (int) num6 * 501364670 ^ -2144125759;
            continue;
          case 23:
            num2 = -1212394640;
            continue;
          case 24:
            num2 = -755495505;
            continue;
          case 25:
            b1 = x.Rank - num5;
            num2 = (int) num6 * 76085627 ^ -110363724;
            continue;
          case 26:
            num2 = -755643542;
            continue;
          case 27:
            num4 = 1;
            num2 = -643033045;
            continue;
          case 28:
            num2 = (int) num6 * 2055210632 ^ -1320557693;
            continue;
          case 29:
            goto label_3;
          case 30:
            a2 = x.File - num4;
            num2 = (int) num6 * -1511225740 ^ -971520058;
            continue;
          case 31:
            num2 = (int) num6 * 1687756365 ^ -1459663386;
            continue;
          case 32:
            num2 = -1772894586;
            continue;
          case 33:
            int b4 = x.Rank - num3;
            int num11 = !this.addMove(a1, b4, x) ? 554947188 : (num11 = 1420701912);
            num2 = num11 ^ (int) num6 * 1705170410;
            continue;
          case 34:
            int num12 = !flag4 ? -521547231 : (num12 = -632489502);
            num2 = num12 ^ (int) num6 * 95451156;
            continue;
          case 35:
            flag3 = num1 < 8;
            num2 = -41247294;
            continue;
          case 36:
            int num13 = !flag3 ? 1669637787 : (num13 = 283206324);
            num2 = num13 ^ (int) num6 * -245785742;
            continue;
          case 37:
            num2 = (int) num6 * 1516871940 ^ 688792708;
            continue;
          case 38:
            ++num4;
            num2 = (int) num6 * 1991161248 ^ -1109209456;
            continue;
          case 39:
            int num14 = !flag1 ? 980905470 : (num14 = 906951678);
            num2 = num14 ^ (int) num6 * 2077604211;
            continue;
          default:
            goto label_42;
        }
      }
label_3:
      return;
label_42:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = -202378446;
      while (true)
      {
        uint num2;
        int Rank;
        ChessPiece piece;
        int[] numArray1;
        bool flag;
        Square sq;
        int File;
        int index;
        bool isEmpty;
        int[] numArray2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -154551409)) % 22U)
        {
          case 0:
            goto label_3;
          case 1:
            int num4 = !flag ? -816740984 : (num4 = -1516036996);
            num1 = num4 ^ (int) num2 * -1512043458;
            continue;
          case 2:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u200D⁭⁮‏‫⁫‎⁪⁫‎‎‫⁯‮‫‭‎⁪‪‭‬‮⁫‌‪⁪⁬⁪⁭‪​⁮⁬‫‫⁭⁭​‌‭‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray2 = numArray3;
            index = 0;
            num1 = (int) num2 * -1677765549 ^ -709812686;
            continue;
          case 3:
            num3 = Rank > 7 ? 1 : 0;
            goto label_10;
          case 4:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * 2005753377 ^ 1563061237;
            continue;
          case 5:
            num1 = (int) num2 * -1725831147 ^ -507587733;
            continue;
          case 6:
            Rank = x.Rank + numArray2[index];
            if (File >= 0)
            {
              num1 = (int) num2 * -548499589 ^ -801882553;
              continue;
            }
            break;
          case 7:
            int num5;
            num1 = num5 = index < 8 ? -1068602106 : (num5 = -140816597);
            continue;
          case 8:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 689554990 ^ -1577703802;
            continue;
          case 9:
            File = x.File + numArray1[index];
            num1 = -1376800311;
            continue;
          case 10:
            int num6 = !isEmpty ? -668447815 : (num6 = -1128397689);
            num1 = num6 ^ (int) num2 * 2030277382;
            continue;
          case 11:
            ++index;
            num1 = -233504572;
            continue;
          case 12:
            num1 = -1401110116;
            continue;
          case 13:
            piece = x.Piece;
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u200D⁭⁮‏‫⁫‎⁪⁫‎‎‫⁯‮‫‭‎⁪‪‭‬‮⁫‌‪⁪⁬⁪⁭‪​⁮⁬‫‫⁭⁭​‌‭‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray1 = numArray4;
            num1 = (int) num2 * 1218722190 ^ -1096161373;
            continue;
          case 14:
            int num7;
            num1 = num7 = sq.Piece.Color != x.Piece.Color ? -978560199 : (num7 = -2100105597);
            continue;
          case 15:
            sq = this.board[File, Rank];
            num1 = -404983987;
            continue;
          case 16:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 1102833429 ^ 46351981;
            continue;
          case 17:
            num1 = (int) num2 * -1588070802 ^ 1433635442;
            continue;
          case 18:
            if (File <= 7)
            {
              num1 = (int) num2 * -883765846 ^ 2141620588;
              continue;
            }
            break;
          case 19:
            num1 = (int) num2 * -147036738 ^ 2067085965;
            continue;
          case 20:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -1074279931 ^ -1894921985;
              continue;
            }
            break;
          case 21:
            goto label_1;
          default:
            goto label_29;
        }
        num3 = 1;
label_10:
        flag = num3 != 0;
        num1 = -1744953592;
      }
label_3:
      return;
label_29:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = 222513657;
      ChessPiece piece;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1525740112)) % 4U)
        {
          case 1:
            piece = x.Piece;
            sq = this.board[a, b];
            num1 = (int) num2 * 620062338 ^ -217311944;
            continue;
          case 2:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * -335532999 ^ 237961818;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_17;
label_1:
      int num1 = -270628765;
label_2:
      bool flag1;
      while (true)
      {
        uint num2;
        UserAction kind;
        Square sq;
        ChessPiece piece;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        switch ((num2 = (uint) (num1 ^ -2075986543)) % 31U)
        {
          case 1:
            num1 = (int) num2 * -2119279126 ^ -1092523505;
            continue;
          case 2:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = -1963500514;
            continue;
          case 3:
            flag2 = sq.Piece.Color != x.Piece.Color;
            num1 = -1782334110;
            continue;
          case 4:
            num1 = (int) num2 * -1147679945 ^ 1800725518;
            continue;
          case 5:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 6:
            this.IsOnCheck = true;
            num1 = (int) num2 * -1604734893 ^ -1491637957;
            continue;
          case 7:
            flag1 = true;
            num1 = (int) num2 * -699716844 ^ 1195420208;
            continue;
          case 8:
            flag3 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * 247675955 ^ 566709607;
            continue;
          case 9:
            goto label_16;
          case 10:
            int num4 = flag3 ? 493306641 : (num4 = 259312858);
            num1 = num4 ^ (int) num2 * 46001450;
            continue;
          case 11:
            if (a <= 7)
            {
              num1 = (int) num2 * -1159598672 ^ -433215000;
              continue;
            }
            goto label_17;
          case 12:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 730818825 ^ 1274672795;
            continue;
          case 13:
            flag1 = true;
            num1 = -1167411563;
            continue;
          case 14:
            num1 = (int) num2 * -1469766785 ^ 1825630607;
            continue;
          case 15:
            if (x.Piece.Kind == Pieces.King)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1522292325 ^ 233962141;
            continue;
          case 16:
            int num5 = !flag2 ? -1040641823 : (num5 = -1879385109);
            num1 = num5 ^ (int) num2 * 2001573501;
            continue;
          case 17:
            if (b >= 0)
            {
              num1 = (int) num2 * 2123461577 ^ -965870348;
              continue;
            }
            goto label_17;
          case 18:
            this.KingColorOnCheck = sq.Piece.Color;
            num1 = (int) num2 * -204630142 ^ 1257423433;
            continue;
          case 19:
            flag1 = true;
            num1 = (int) num2 * 607007555 ^ -828224052;
            continue;
          case 20:
            kind = UserAction.Capture;
            num1 = (int) num2 * -1233984864 ^ 443511086;
            continue;
          case 21:
            goto label_1;
          case 22:
            num1 = -461701324;
            continue;
          case 23:
            num1 = (int) num2 * -741501022 ^ -1147795242;
            continue;
          case 24:
            num1 = (int) num2 * -381229121 ^ 917567065;
            continue;
          case 25:
            int num6 = !sq.IsEmpty ? -1020804992 : (num6 = -1454238266);
            num1 = num6 ^ (int) num2 * 893742835;
            continue;
          case 26:
            int num7 = flag4 ? -1893961139 : (num7 = -1049732853);
            num1 = num7 ^ (int) num2 * -912730033;
            continue;
          case 27:
            num1 = (int) num2 * -1534153838 ^ 1063253595;
            continue;
          case 28:
            flag1 = false;
            num1 = -1167411563;
            continue;
          case 29:
            sq = this.board[a, b];
            num1 = (int) num2 * -1788687527 ^ 1999257155;
            continue;
          case 30:
            piece = x.Piece;
            num1 = -717618526;
            continue;
          default:
            goto label_39;
        }
        flag4 = num3 != 0;
        num1 = -2027797582;
      }
label_16:
      int num8 = b > 7 ? 1 : 0;
      goto label_18;
label_39:
      return flag1;
label_17:
      num8 = 1;
label_18:
      num1 = num8 != 0 ? -2040150833 : (num1 = -376255196);
      goto label_2;
    }

    static void \u200D⁭⁮‏‫⁫‎⁪⁫‎‎‫⁯‮‫‭‎⁪‪‭‬‮⁫‌‪⁪⁬⁪⁭‪​⁮⁬‫‫⁭⁭​‌‭‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
