// Decompiled with JetBrains decompiler
// Type: Mooreming.UtilityDroid
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.Threading;

namespace Mooreming
{
  internal class UtilityDroid : Droid
  {
    protected bool hasToolbox;
    protected bool hasComputerConnection;
    protected bool hasArm;
    protected const Decimal COST_PER_OPTION = 35.00M;

    public UtilityDroid(
      string Material,
      string Model,
      string Color,
      bool HasToolbox,
      bool HasComputerConnection,
      bool HasArm)
      : base(Material, Model, Color)
    {
      this.hasToolbox = HasToolbox;
      this.hasComputerConnection = HasComputerConnection;
      this.hasArm = HasArm;
    }

    public UtilityDroid()
    {
      this.model = "Utility";
      this.hasToolbox = this.RandomToolBox();
      this.hasComputerConnection = this.RandomComputerConnection();
      this.hasArm = this.RandomArm();
      this.CalculateTotalCost();
    }

    protected virtual Decimal CalculateCostOfOptions()
    {
      Decimal costOfOptions = 0M;
      if (this.hasToolbox)
        costOfOptions += 35.00M;
      if (this.hasComputerConnection)
        costOfOptions += 35.00M;
      if (this.hasArm)
        costOfOptions += 35.00M;
      return costOfOptions;
    }

    public override void CalculateTotalCost()
    {
      this.CalculateBaseCost();
      this.totalCost = this.baseCost + this.CalculateCostOfOptions();
    }

    public override string ToString() => base.ToString() + "Has Tool Box: " + this.hasToolbox.ToString() + Environment.NewLine + "Has Computer Connection: " + this.hasComputerConnection.ToString() + Environment.NewLine + "Has Arm: " + this.hasArm.ToString() + Environment.NewLine;

    private bool RandomToolBox()
    {
      Random random = new Random();
      Thread.Sleep(5);
      return random.Next(0, 2) == 0;
    }

    private bool RandomComputerConnection()
    {
      Random random = new Random();
      Thread.Sleep(5);
      return random.Next(0, 2) == 0;
    }

    private bool RandomArm()
    {
      Random random = new Random();
      Thread.Sleep(5);
      return random.Next(0, 2) == 0;
    }
  }
}
