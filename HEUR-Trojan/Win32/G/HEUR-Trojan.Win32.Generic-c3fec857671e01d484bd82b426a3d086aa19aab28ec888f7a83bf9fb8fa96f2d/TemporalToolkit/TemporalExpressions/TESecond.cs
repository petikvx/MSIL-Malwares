// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TESecond
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TESecond : TemporalExpression
  {
    public int Start { get; set; }

    public int? End { get; set; }

    public TESecond(int second)
    {
      this.Start = second;
      this.End = new int?();
    }

    public TESecond(int start, int end)
    {
      this.Start = start;
      this.End = new int?(end);
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = 820224161;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        int? end;
        bool hasValue;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 475969952)) % 15U)
        {
          case 0:
            if (aDate.Second >= this.Start)
            {
              num1 = (int) num2 * 1362909707 ^ 57293397;
              continue;
            }
            num3 = 0;
            goto label_17;
          case 1:
          case 6:
            flag1 = flag2;
            num1 = 224241212;
            continue;
          case 2:
            int second1 = aDate.Second;
            end = this.End;
            int num5 = end.Value;
            num3 = second1 <= num5 ? 1 : 0;
            goto label_17;
          case 3:
            int num6 = hasValue ? 1832925836 : (num6 = 1537155785);
            num1 = num6 ^ (int) num2 * -1015362972;
            continue;
          case 4:
            end = this.End;
            num1 = (int) num2 * 838042680 ^ 1999016913;
            continue;
          case 5:
            hasValue = end.HasValue;
            num1 = (int) num2 * 2008870070 ^ -1724872066;
            continue;
          case 7:
            end = this.End;
            flag3 = end.Value > this.Start;
            num1 = (int) num2 * 721380466 ^ -647727918;
            continue;
          case 8:
            flag2 = this.Start == aDate.Second;
            num1 = 1310377585;
            continue;
          case 9:
            int second2 = aDate.Second;
            end = this.End;
            int num7 = end.Value;
            num4 = second2 <= num7 ? 1 : 0;
            break;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num2 * -2044799301 ^ -222178922;
            continue;
          case 13:
            if (aDate.Second >= this.Start)
            {
              num4 = 1;
              break;
            }
            num1 = 1516489435;
            continue;
          case 14:
            int num8 = !flag3 ? -1168780627 : (num8 = -1273405988);
            num1 = num8 ^ (int) num2 * 2045321627;
            continue;
          default:
            goto label_21;
        }
        flag2 = num4 != 0;
        num1 = 2141263789;
        continue;
label_17:
        flag2 = num3 != 0;
        num1 = 1449209633;
      }
label_21:
      return flag1;
    }
  }
}
