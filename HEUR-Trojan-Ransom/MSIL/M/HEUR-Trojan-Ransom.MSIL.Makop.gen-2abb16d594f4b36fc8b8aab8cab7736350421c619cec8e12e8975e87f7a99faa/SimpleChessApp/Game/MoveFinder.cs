// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: طv, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8DDF840D-AD0E-4D2F-A03C-7E334C2C97A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2abb16d594f4b36fc8b8aab8cab7736350421c619cec8e12e8975e87f7a99faa.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
      this.Clear();
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_6:
        int num1 = !enumerator.MoveNext() ? 248835866 : (num1 = 1611221663);
        ChessPiece current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1801379958)) % 6U)
          {
            case 0:
              num1 = 1611221663;
              continue;
            case 1:
              this.FindMoveFrom(current.Current);
              num1 = (int) num2 * 1871819888 ^ 350044925;
              continue;
            case 3:
              current = enumerator.Current;
              num1 = 526765185;
              continue;
            case 4:
              goto label_6;
            case 5:
              num1 = (int) num2 * -1550543633 ^ -1258524689;
              continue;
            default:
              goto label_9;
          }
        }
      }
label_9:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_14:
        int num3 = enumerator1.MoveNext() ? 985562744 : (num3 = 1930299634);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1801379958)) % 4U)
          {
            case 1:
              goto label_14;
            case 2:
              this.FindMoveFrom(enumerator1.Current.Current);
              num3 = 1317875215;
              continue;
            case 3:
              num3 = 985562744;
              continue;
            default:
              goto label_22;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_17:
        int num5 = 1773673617;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1801379958)) % 3U)
          {
            case 0:
              goto label_17;
            case 1:
              num5 = (int) num6 * 399688130 ^ -383152328;
              continue;
            default:
              goto label_21;
          }
        }
label_21:;
      }
label_22:
      if (!this.board.ShowAllMoves)
        return;
label_23:
      int num7 = 1319290191;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ 1801379958)) % 4U)
        {
          case 0:
            num7 = (int) num8 * 1436498078 ^ -416993100;
            continue;
          case 1:
            this.HighLightMoveStyle();
            num7 = (int) num8 * 439996061 ^ 15420663;
            continue;
          case 2:
            goto label_19;
          case 3:
            goto label_23;
          default:
            goto label_15;
        }
      }
label_19:
      return;
label_15:;
    }

    public void FindMoveFrom(Square x)
    {
      Pieces kind = x.Piece.Kind;
label_1:
      int num1 = -377406818;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -397011957)) % 19U)
        {
          case 0:
            num1 = (int) num2 * -1488116561 ^ 2105810229;
            continue;
          case 1:
label_7:
            this.handleKing(x);
            num1 = -851523538;
            continue;
          case 2:
label_12:
            this.handleKnight(x);
            num1 = -1244309922;
            continue;
          case 3:
            num1 = (int) num2 * 1940066791 ^ 1197507159;
            continue;
          case 4:
label_17:
            this.handleBishop(x);
            num1 = -1363311350;
            continue;
          case 5:
            num1 = (int) num2 * 1745858499 ^ -277448321;
            continue;
          case 6:
            num1 = (int) num2 * 1190018885 ^ 934131905;
            continue;
          case 7:
            num1 = (int) num2 * 1142456043 ^ 793192067;
            continue;
          case 8:
            num1 = (int) num2 * -592812977 ^ 564472233;
            continue;
          case 9:
            num1 = (int) num2 * -784314715 ^ -1440426675;
            continue;
          case 10:
label_18:
            this.handleQueen(x);
            num1 = -1938446812;
            continue;
          case 11:
            switch (kind)
            {
              case Pieces.Pawn:
                goto label_21;
              case Pieces.Knight:
                goto label_12;
              case Pieces.Bishop:
                goto label_17;
              case Pieces.Rook:
                goto label_11;
              case Pieces.King:
                goto label_7;
              case Pieces.Queen:
                goto label_18;
              default:
                num1 = (int) num2 * 29572476 ^ -1709530755;
                continue;
            }
          case 12:
label_11:
            this.handleRook(x);
            num1 = -1390484350;
            continue;
          case 13:
label_21:
            this.handlePawn(x);
            num1 = -1383332606;
            continue;
          case 14:
            num1 = (int) num2 * 327660020 ^ 722065416;
            continue;
          case 15:
            num1 = (int) num2 * 1600367880 ^ -1750183180;
            continue;
          case 16:
            goto label_3;
          case 17:
            num1 = (int) num2 * 998333243 ^ -458222383;
            continue;
          case 18:
            goto label_1;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
label_1:
      int num1 = 985827011;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        int num5;
        Square square;
        int num6;
        int b;
        int num7;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num8;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num2 = (uint) (num1 ^ 865104698)) % 67U)
        {
          case 0:
            goto label_1;
          case 1:
            num9 = 2;
            goto label_71;
          case 2:
            num1 = (int) num2 * 58987455 ^ -1480406255;
            continue;
          case 3:
            num1 = (int) num2 * 1490910306 ^ -1782066866;
            continue;
          case 4:
            int num19 = !flag5 ? 23487203 : (num19 = 958924675);
            num1 = num19 ^ (int) num2 * -1627706030;
            continue;
          case 5:
            if (!flag2)
            {
              num1 = (int) num2 * 455969240 ^ 1178737690;
              continue;
            }
            num9 = 5;
            goto label_71;
          case 6:
            num1 = 1934091876;
            continue;
          case 7:
            num10 = this.board[num7, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_93;
          case 8:
            int num20 = flag8 ? -422959847 : (num20 = -611563185);
            num1 = num20 ^ (int) num2 * -626709055;
            continue;
          case 9:
            flag10 = x.Rank == num8;
            num1 = 508781033;
            continue;
          case 10:
            int num21 = flag4 ? 183898537 : (num21 = 273240017);
            num1 = num21 ^ (int) num2 * 341110078;
            continue;
          case 11:
            num11 = num4 < 8 ? 1 : 0;
            goto label_50;
          case 12:
            if (x.Rank != 4)
            {
              num12 = 0;
              goto label_84;
            }
            else
            {
              num1 = 888719512;
              continue;
            }
          case 13:
            if (num4 >= 0)
            {
              num1 = (int) num2 * 1605839600 ^ -1311578174;
              continue;
            }
            goto label_87;
          case 14:
            square = this.board[num5, num4];
            num1 = (int) num2 * -939137201 ^ -275504545;
            continue;
          case 15:
            num4 = x.Rank + 2 * num3;
            num1 = (int) num2 * -1038225376 ^ -1829484112;
            continue;
          case 16:
            if (x.Piece.Color == PieceColor.White)
            {
              num15 = 1;
              goto label_42;
            }
            else
            {
              num1 = (int) num2 * 471105010 ^ 18856374;
              continue;
            }
          case 17:
            num1 = 576880638;
            continue;
          case 18:
            num1 = (int) num2 * 637424983 ^ 1514251772;
            continue;
          case 19:
            this.addCapture(num6, b, x, this.board[num6, x.Rank].Piece);
            num1 = (int) num2 * 414687014 ^ 600003741;
            continue;
          case 20:
            if (this.board[num7, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -70092596 ^ -423692574;
              continue;
            }
            num10 = 0;
            goto label_93;
          case 21:
            num1 = (int) num2 * 160421475 ^ 2070437472;
            continue;
          case 22:
            int num22 = !square.IsEmpty ? -1343524453 : (num22 = -1252739494);
            num1 = num22 ^ (int) num2 * 1372092483;
            continue;
          case 23:
            num4 = x.Rank + num3;
            num1 = (int) num2 * 1156579128 ^ 1492076158;
            continue;
          case 24:
            flag8 = this.board[num6, x.Rank].Piece != null;
            num1 = (int) num2 * 870468753 ^ 277686862;
            continue;
          case 25:
            flag9 = num6 < 8;
            num1 = 1280700467;
            continue;
          case 26:
            num16 = -1;
            goto label_68;
          case 27:
            num1 = (int) num2 * 1672259630 ^ 1970697160;
            continue;
          case 28:
            int num23 = !flag7 ? 1384823198 : (num23 = 1296748077);
            num1 = num23 ^ (int) num2 * 1424053582;
            continue;
          case 29:
            int num24 = !flag10 ? -968700830 : (num24 = -1357978467);
            num1 = num24 ^ (int) num2 * 490889506;
            continue;
          case 30:
            num5 = x.File + 1;
            num1 = 693321141;
            continue;
          case 31:
            if (num5 >= 0)
            {
              num1 = (int) num2 * 1723157484 ^ -92669837;
              continue;
            }
            goto label_87;
          case 32:
            flag6 = this.board.lastPassantPawn == this.board[num6, x.Rank].Piece;
            num1 = (int) num2 * -100992131 ^ -796156539;
            continue;
          case 33:
            num7 = x.File - 1;
            num6 = x.File + 1;
            num1 = (int) num2 * 758620530 ^ -811163761;
            continue;
          case 34:
            num5 = x.File - 1;
            num1 = 155042522;
            continue;
          case 35:
            num15 = 6;
            goto label_42;
          case 36:
            this.addCapture(num7, b, x, this.board[num7, x.Rank].Piece);
            num1 = (int) num2 * -1250029786 ^ -1706359979;
            continue;
          case 37:
            int num25 = num7 < 0 ? 900909367 : (num25 = 934689411);
            num1 = num25 ^ (int) num2 * 668128120;
            continue;
          case 38:
            num1 = 689036076;
            continue;
          case 39:
            num4 = x.Rank + num3;
            num1 = (int) num2 * -1960837294 ^ -1303038824;
            continue;
          case 40:
            int num26 = flag1 ? 201771914 : (num26 = 654404743);
            num1 = num26 ^ (int) num2 * 1064439162;
            continue;
          case 41:
            int num27 = !flag9 ? 418629853 : (num27 = 366799404);
            num1 = num27 ^ (int) num2 * -885259253;
            continue;
          case 42:
            this.addMove(num5, num4, x);
            num1 = (int) num2 * -1808796713 ^ -268995949;
            continue;
          case 43:
            int num28 = this.board[num7, x.Rank].Piece != null ? 856153818 : (num28 = 1457066344);
            num1 = num28 ^ (int) num2 * 1147768967;
            continue;
          case 44:
            if (this.board[num6, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num17 = 0;
              break;
            }
            num1 = (int) num2 * -1459988157 ^ 228475243;
            continue;
          case 45:
            this.addMove(num5, num4, x);
            num1 = (int) num2 * -702861979 ^ 495330911;
            continue;
          case 46:
            flag1 = !square.IsEmpty;
            num1 = (int) num2 * -1166579494 ^ 111922045;
            continue;
          case 47:
            num4 = x.Rank + num3;
            if (num5 < 8)
            {
              num1 = (int) num2 * -999737349 ^ -1105661723;
              continue;
            }
            goto label_49;
          case 48:
            num14 = num4 < 8 ? 1 : 0;
            goto label_88;
          case 49:
            num4 = 0;
            num1 = (int) num2 * -469541630 ^ -460727619;
            continue;
          case 50:
            int num29 = flag2 | flag3 ? -2115142953 : (num29 = -597089555);
            num1 = num29 ^ (int) num2 * -1720398104;
            continue;
          case 51:
            num18 = num4 < 8 ? 1 : 0;
            goto label_34;
          case 52:
            if (num4 >= 0)
            {
              num1 = (int) num2 * -1499760852 ^ -454768166;
              continue;
            }
            num18 = 0;
            goto label_34;
          case 53:
            num1 = (int) num2 * -450958434 ^ -824524319;
            continue;
          case 54:
            flag4 = this.board.lastPassantPawn == this.board[num7, x.Rank].Piece;
            num1 = (int) num2 * 1718940356 ^ 1194442439;
            continue;
          case 55:
            num13 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_63;
          case 56:
            square = this.board[num5, num4];
            int num30 = !square.IsEmpty ? -1194651505 : (num30 = -573928770);
            num1 = num30 ^ (int) num2 * 1040741253;
            continue;
          case 57:
            this.addMove(num5, num4, x);
            num1 = (int) num2 * -725839744 ^ -44524956;
            continue;
          case 58:
            int num31 = flag6 ? -837217959 : (num31 = -397415996);
            num1 = num31 ^ (int) num2 * 179676498;
            continue;
          case 59:
            num17 = this.board[num6, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            break;
          case 60:
            if (num4 >= 0)
            {
              num1 = (int) num2 * 1139505154 ^ 727699954;
              continue;
            }
            goto label_49;
          case 61:
            num12 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_84;
          case 62:
            goto label_3;
          case 63:
            num1 = 1623395141;
            continue;
          case 64:
            num5 = 0;
            num1 = (int) num2 * 1290130096 ^ 306004018;
            continue;
          case 65:
            this.addMove(num5, num4, x);
            num1 = (int) num2 * -1238774681 ^ -1697017765;
            continue;
          case 66:
            square = this.board[num5, num4];
            num1 = (int) num2 * 1746923459 ^ -1996139213;
            continue;
          default:
            goto label_101;
        }
        int num32;
        num1 = num32 = num17 == 0 ? 1951862206 : (num32 = 760735784);
        continue;
label_34:
        int num33;
        num1 = num33 = num18 == 0 ? 1934091876 : (num33 = 1417202417);
        continue;
label_42:
        num8 = num15;
        if (x.Piece.Color != PieceColor.White)
        {
          num1 = 2100489319;
          continue;
        }
        num16 = 1;
        goto label_68;
label_49:
        num11 = 0;
label_50:
        flag7 = num11 != 0;
        num1 = 1050030277;
        continue;
label_63:
        flag3 = num13 != 0;
        num1 = 667230915;
        continue;
label_68:
        num3 = num16;
        num5 = x.File;
        num1 = 815066591;
        continue;
label_71:
        b = num9;
        num1 = 878455811;
        continue;
label_84:
        flag2 = num12 != 0;
        if (x.Rank != 3)
        {
          num13 = 0;
          goto label_63;
        }
        else
        {
          num1 = 366059842;
          continue;
        }
label_87:
        num14 = 0;
label_88:
        int num34;
        num1 = num34 = num14 == 0 ? 576880638 : (num34 = 1431088465);
        continue;
label_93:
        flag5 = num10 != 0;
        num1 = 1707895428;
      }
label_3:
      return;
label_101:;
    }

    private void handleQueen(Square x)
    {
      this.handleRook(x);
      this.handleBishop(x);
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
label_1:
      int num1 = 371492553;
      bool flag1;
      bool flag2;
      bool canCastleQueenSide1;
      bool canCastleKingSide;
      bool canCastleQueenSide2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1130831384)) % 27U)
        {
          case 0:
            goto label_1;
          case 1:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1663761885 ^ 1848063254;
            continue;
          case 2:
            num1 = (int) num2 * -1859144207 ^ -1708054620;
            continue;
          case 3:
            int num3 = canCastleQueenSide2 ? 475530299 : (num3 = 766351601);
            num1 = num3 ^ (int) num2 * 1793121183;
            continue;
          case 4:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1324627894 ^ -699488714;
            continue;
          case 5:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1878087575 ^ 1930055740;
            continue;
          case 6:
            this.addMove(x.File - 1, x.Rank - 1, x);
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * 1104184263 ^ -1019597696;
            continue;
          case 7:
            canCastleKingSide = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * -2050126607 ^ 877547525;
            continue;
          case 8:
            canCastleQueenSide1 = this.board.BlackCanCastleQueenSide;
            num1 = 505099085;
            continue;
          case 9:
            int num4 = !canCastleKingSide ? 1388665226 : (num4 = 999021497);
            num1 = num4 ^ (int) num2 * -1924900246;
            continue;
          case 10:
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * -1641116860 ^ 668281384;
            continue;
          case 11:
            int num5 = canCastleQueenSide1 ? 592629385 : (num5 = 899546379);
            num1 = num5 ^ (int) num2 * 501902010;
            continue;
          case 12:
            int num6 = !flag1 ? 361095636 : (num6 = 1688837414);
            num1 = num6 ^ (int) num2 * -61418254;
            continue;
          case 13:
            flag1 = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -891750417 ^ -202650763;
            continue;
          case 14:
            int num7 = this.board.WhiteCanCastleKingSide ? 442291974 : (num7 = 1860199174);
            num1 = num7 ^ (int) num2 * -1209541832;
            continue;
          case 15:
            flag2 = x.Piece.Color == PieceColor.Black;
            num1 = 1922403137;
            continue;
          case 16:
            this.addMove(x.File, x.Rank + 1, x);
            num1 = (int) num2 * -998092512 ^ -2004418090;
            continue;
          case 17:
            num1 = 862531647;
            continue;
          case 18:
            num1 = 1268035346;
            continue;
          case 19:
            goto label_3;
          case 20:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1689240374 ^ -348547059;
            continue;
          case 21:
            this.addMove(x.File + 1, x.Rank - 1, x);
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * -115160645 ^ -1186177796;
            continue;
          case 22:
            canCastleQueenSide2 = this.board.WhiteCanCastleQueenSide;
            num1 = 1243270686;
            continue;
          case 23:
            num1 = (int) num2 * 1195856272 ^ -661395866;
            continue;
          case 24:
            num1 = (int) num2 * -166307619 ^ 487590147;
            continue;
          case 25:
            int num8 = flag2 ? -1050006671 : (num8 = -1983590976);
            num1 = num8 ^ (int) num2 * -42087657;
            continue;
          case 26:
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 39836680 ^ 210282210;
            continue;
          default:
            goto label_29;
        }
      }
label_3:
      return;
label_29:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = -2116047408;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -119112847)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            int num4 = !flag ? 1324860393 : (num4 = 1110021385);
            num1 = num4 ^ (int) num2 * -491418967;
            continue;
          case 2:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * 2096428765 ^ -1806382235;
            continue;
          case 3:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1300440128 ^ 1904512229;
              continue;
            }
            break;
          case 4:
            num3 = square2.IsEmpty ? 1 : 0;
            goto label_10;
          case 5:
            square2 = this.board[x.File - 3, x.Rank];
            if (square3.IsEmpty)
            {
              num1 = (int) num2 * 400523562 ^ 807072044;
              continue;
            }
            break;
          case 6:
            square1 = this.board[x.File - 2, x.Rank];
            num1 = (int) num2 * -1632157043 ^ 256524162;
            continue;
          case 7:
            square3 = this.board[x.File - 1, x.Rank];
            num1 = (int) num2 * -1654772003 ^ 1356103430;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_15;
        }
        num3 = 0;
label_10:
        flag = num3 != 0;
        num1 = -1460996342;
      }
label_3:
      return;
label_15:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = 1828992568;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1334425202)) % 6U)
        {
          case 0:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -1558995988 ^ 1836028517;
            continue;
          case 1:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          case 2:
            square1 = this.board[x.File + 1, x.Rank];
            square2 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * 853289289 ^ 1957523097;
            continue;
          case 3:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 381394707 ^ -523812464;
              continue;
            }
            num3 = 0;
            break;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          default:
            goto label_11;
        }
        int num4;
        num1 = num4 = num3 == 0 ? 1204427669 : (num4 = 1077049542);
      }
label_3:
      return;
label_11:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = 529428620;
      int num2;
      bool flag1;
      bool flag2;
      bool flag3;
      int num3;
      int a;
      bool flag4;
      int num4;
      int num5;
      bool flag5;
      bool flag6;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 469204393)) % 36U)
        {
          case 0:
            int num7 = !flag3 ? -1537210538 : (num7 = -464100207);
            num1 = num7 ^ (int) num6 * 886314066;
            continue;
          case 1:
            num1 = (int) num6 * -2022143919 ^ -691961907;
            continue;
          case 2:
            ++num5;
            num1 = (int) num6 * 581072204 ^ 188423615;
            continue;
          case 3:
            num1 = 1707140139;
            continue;
          case 4:
            int num8 = !flag5 ? -1012043922 : (num8 = -990282113);
            num1 = num8 ^ (int) num6 * 285551377;
            continue;
          case 5:
            num1 = 203560196;
            continue;
          case 6:
            int num9;
            num1 = num9 = num5 >= 8 ? 1698904784 : (num9 = 517223196);
            continue;
          case 7:
            a = x.File + num4;
            num1 = 1848035035;
            continue;
          case 8:
            num1 = 944256107;
            continue;
          case 9:
            num3 = 1;
            num1 = 1506558000;
            continue;
          case 10:
            int num10 = !flag4 ? 826758765 : (num10 = 176989828);
            num1 = num10 ^ (int) num6 * -1348799236;
            continue;
          case 11:
            goto label_3;
          case 12:
            num1 = 1137792794;
            continue;
          case 13:
            num5 = 1;
            num1 = (int) num6 * 296291526 ^ 108791737;
            continue;
          case 14:
            int num11 = !flag2 ? -306353854 : (num11 = -935814500);
            num1 = num11 ^ (int) num6 * -1542439407;
            continue;
          case 15:
            goto label_1;
          case 16:
            num1 = (int) num6 * 86879858 ^ 2114673339;
            continue;
          case 17:
            int num12 = !flag1 ? -630652392 : (num12 = -562504445);
            num1 = num12 ^ (int) num6 * 1046858714;
            continue;
          case 18:
            flag2 = num4 < 8;
            num1 = 2141995539;
            continue;
          case 19:
            num4 = 1;
            num1 = 341613601;
            continue;
          case 20:
            num1 = 1890201401;
            continue;
          case 21:
            flag3 = num3 < 8;
            num1 = 723455609;
            continue;
          case 22:
            int b1 = x.Rank - num3;
            flag6 = this.addMove(x.File, b1, x);
            num1 = (int) num6 * -1359091585 ^ -951873611;
            continue;
          case 23:
            ++num3;
            num1 = 1506558000;
            continue;
          case 24:
            ++num4;
            num1 = (int) num6 * -1867292391 ^ -140368837;
            continue;
          case 25:
            num2 = 1;
            num1 = 1841269737;
            continue;
          case 26:
            int num13 = !flag6 ? 740161814 : (num13 = 1324922842);
            num1 = num13 ^ (int) num6 * 700211782;
            continue;
          case 27:
            ++num2;
            num1 = 145212700;
            continue;
          case 28:
            num1 = (int) num6 * -1217828507 ^ -964768822;
            continue;
          case 29:
            int num14;
            num1 = num14 = num2 < 8 ? 812706421 : (num14 = 253056810);
            continue;
          case 30:
            flag4 = this.addMove(a, x.Rank, x);
            num1 = (int) num6 * -670482610 ^ 1287062707;
            continue;
          case 31:
            num1 = (int) num6 * -1053131003 ^ -1557980979;
            continue;
          case 32:
            num1 = (int) num6 * -1023239083 ^ 1617888860;
            continue;
          case 33:
            int b2 = x.Rank + num5;
            flag5 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * 1288983653 ^ 1719323364;
            continue;
          case 34:
            num1 = (int) num6 * -983438756 ^ -971942008;
            continue;
          case 35:
            flag1 = this.addMove(x.File - num2, x.Rank, x);
            num1 = (int) num6 * -801852221 ^ 2140704553;
            continue;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    private void handleBishop(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = 755991824;
      bool flag1;
      bool flag2;
      bool flag3;
      int num3;
      bool flag4;
      int a1;
      int b1;
      int a2;
      int b2;
      bool flag5;
      int num4;
      bool flag6;
      int a3;
      int b3;
      int num5;
      int b4;
      bool flag7;
      int a4;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ 316167147)) % 42U)
        {
          case 0:
            num2 = 1975102932;
            continue;
          case 1:
            int num7 = !flag5 ? -1908487004 : (num7 = -1698210202);
            num2 = num7 ^ (int) num6 * 431447774;
            continue;
          case 2:
            a1 = x.File - num3;
            num2 = (int) num6 * 2049165221 ^ -863272283;
            continue;
          case 3:
            num2 = (int) num6 * 620455795 ^ -777246714;
            continue;
          case 4:
            num4 = 1;
            num2 = 1404126494;
            continue;
          case 5:
            b2 = x.Rank - num4;
            num2 = (int) num6 * -1405552260 ^ 2145107243;
            continue;
          case 6:
            b1 = x.Rank + num3;
            num2 = (int) num6 * -609455877 ^ 341740753;
            continue;
          case 7:
            num2 = 208548728;
            continue;
          case 8:
            num2 = (int) num6 * 1692364489 ^ -1476551766;
            continue;
          case 9:
            num2 = (int) num6 * -585057970 ^ -1202679419;
            continue;
          case 10:
            int num8 = flag6 ? 1041136534 : (num8 = 1698764819);
            num2 = num8 ^ (int) num6 * 766959981;
            continue;
          case 11:
            num2 = (int) num6 * 1971982249 ^ 1787778094;
            continue;
          case 12:
            int num9 = !flag3 ? 1378844027 : (num9 = 702770736);
            num2 = num9 ^ (int) num6 * 182690762;
            continue;
          case 13:
            flag4 = num3 < 8;
            num2 = 1260625606;
            continue;
          case 14:
            b4 = x.Rank - num5;
            num2 = (int) num6 * 1176209328 ^ -1373060502;
            continue;
          case 15:
            flag2 = this.addMove(a3, b3, x);
            num2 = (int) num6 * -500408648 ^ -844219815;
            continue;
          case 16:
            ++num1;
            num2 = (int) num6 * 1155735646 ^ 199541885;
            continue;
          case 17:
            int num10 = !flag7 ? 1029756710 : (num10 = 1431627045);
            num2 = num10 ^ (int) num6 * -55536519;
            continue;
          case 18:
            int num11 = !flag2 ? -21924039 : (num11 = -61377791);
            num2 = num11 ^ (int) num6 * 1090794758;
            continue;
          case 19:
            a4 = x.File + num5;
            num2 = 1389999227;
            continue;
          case 20:
            num2 = 1644638587;
            continue;
          case 21:
            goto label_1;
          case 22:
            ++num4;
            num2 = (int) num6 * 412788795 ^ -1889393638;
            continue;
          case 23:
            num2 = 323393527;
            continue;
          case 24:
            goto label_3;
          case 25:
            ++num5;
            num2 = (int) num6 * -1492020337 ^ -1163586043;
            continue;
          case 26:
            int num12 = this.addMove(a1, b1, x) ? -1843954061 : (num12 = -2028464059);
            num2 = num12 ^ (int) num6 * -979602229;
            continue;
          case 27:
            num2 = 491029799;
            continue;
          case 28:
            a3 = x.File + num1;
            b3 = x.Rank + num1;
            num2 = 534438310;
            continue;
          case 29:
            a2 = x.File - num4;
            num2 = (int) num6 * 33517503 ^ -1745770725;
            continue;
          case 30:
            flag1 = num1 < 8;
            num2 = 543569038;
            continue;
          case 31:
            flag7 = num5 < 8;
            num2 = 1062036310;
            continue;
          case 32:
            flag5 = this.addMove(a2, b2, x);
            num2 = (int) num6 * -408834782 ^ -371884816;
            continue;
          case 33:
            int num13 = flag1 ? -213532159 : (num13 = -782078638);
            num2 = num13 ^ (int) num6 * 1621255270;
            continue;
          case 34:
            ++num3;
            num2 = 2096080894;
            continue;
          case 35:
            int num14 = !flag4 ? 805589625 : (num14 = 1454261374);
            num2 = num14 ^ (int) num6 * 919810900;
            continue;
          case 36:
            num2 = (int) num6 * -1665097645 ^ 869913478;
            continue;
          case 37:
            flag6 = this.addMove(a4, b4, x);
            num2 = (int) num6 * -1626573725 ^ -1408120838;
            continue;
          case 38:
            num3 = 1;
            num2 = 2096080894;
            continue;
          case 39:
            num5 = 1;
            num2 = 720398509;
            continue;
          case 40:
            num2 = (int) num6 * -603972801 ^ -1453050407;
            continue;
          case 41:
            flag3 = num4 < 8;
            num2 = 93940045;
            continue;
          default:
            goto label_44;
        }
      }
label_3:
      return;
label_44:;
    }

    private void handleKnight(Square x)
    {
      ChessPiece piece = x.Piece;
      int[] numArray1 = new int[8];
      // ISSUE: field reference
      MoveFinder.\u206E⁫‬⁬‏⁬‌⁫‍⁬‌⁬‫‎⁫​‭⁯⁬⁬‏‏⁭⁯‍⁭​⁯‎‭​‫⁭⁫‪‮​⁪‭‍‮((Array) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
      int[] numArray2 = numArray1;
label_1:
      int num1 = -833055923;
      while (true)
      {
        uint num2;
        int File;
        int Rank;
        Square sq;
        bool isEmpty;
        int index;
        int[] numArray3;
        bool flag1;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -2034633896)) % 25U)
        {
          case 0:
            if (File >= 0)
            {
              num1 = (int) num2 * 1225506410 ^ -1927146358;
              continue;
            }
            break;
          case 1:
            File = x.File + numArray2[index];
            num1 = (int) num2 * -804896562 ^ -1411589675;
            continue;
          case 2:
            num1 = -1004218101;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = -332682871;
            continue;
          case 5:
            int num4 = !flag2 ? 1101000407 : (num4 = 1375829254);
            num1 = num4 ^ (int) num2 * -1947713319;
            continue;
          case 6:
            flag2 = sq.Piece.Color != x.Piece.Color;
            num1 = -883773260;
            continue;
          case 7:
            Rank = x.Rank + numArray3[index];
            num1 = (int) num2 * -2078872312 ^ -1794077356;
            continue;
          case 8:
            sq = this.board[File, Rank];
            num1 = -1934265381;
            continue;
          case 9:
            int num5;
            num1 = num5 = index < 8 ? -461957038 : (num5 = -495657325);
            continue;
          case 10:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -969640119 ^ -1935077918;
              continue;
            }
            break;
          case 11:
            num1 = (int) num2 * -1552140550 ^ 957918779;
            continue;
          case 12:
            int num6 = flag1 ? -1673796452 : (num6 = -2051821754);
            num1 = num6 ^ (int) num2 * 925384834;
            continue;
          case 13:
            num1 = (int) num2 * 1536697006 ^ -75350079;
            continue;
          case 14:
            num1 = (int) num2 * 1884224203 ^ 1021114826;
            continue;
          case 15:
            if (File <= 7)
            {
              num1 = (int) num2 * -344292426 ^ -1387958957;
              continue;
            }
            break;
          case 16:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * 1785687390 ^ 2094623482;
            continue;
          case 17:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 402092591 ^ -1905475515;
            continue;
          case 18:
            ++index;
            num1 = -1445152983;
            continue;
          case 19:
            index = 0;
            num1 = (int) num2 * 1266369673 ^ -1643244064;
            continue;
          case 20:
            num3 = Rank > 7 ? 1 : 0;
            goto label_23;
          case 21:
            goto label_1;
          case 22:
            int num7 = isEmpty ? 1278051988 : (num7 = 2059754399);
            num1 = num7 ^ (int) num2 * 943905783;
            continue;
          case 23:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 841555413 ^ -915107849;
            continue;
          case 24:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206E⁫‬⁬‏⁬‌⁫‍⁬‌⁬‫‎⁫​‭⁯⁬⁬‏‏⁭⁯‍⁭​⁯‎‭​‫⁭⁫‪‮​⁪‭‍‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray3 = numArray4;
            num1 = (int) num2 * -1682082733 ^ -1680341546;
            continue;
          default:
            goto label_32;
        }
        num3 = 1;
label_23:
        flag1 = num3 != 0;
        num1 = -1679546746;
      }
label_3:
      return;
label_32:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = -1780699023;
      ChessPiece piece;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1128458006)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * 1944160782 ^ -563925765;
            continue;
          case 3:
            piece = x.Piece;
            Square sq = this.board[a, b];
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * -428042232 ^ -26153200;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = -532957037;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool isEmpty;
        Square sq;
        bool flag5;
        ChessPiece piece;
        UserAction kind;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1820360662)) % 30U)
        {
          case 0:
            num3 = b > 7 ? 1 : 0;
            goto label_17;
          case 2:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -513752921 ^ 2079602215;
            continue;
          case 3:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = -1711166764;
            continue;
          case 4:
            int num5 = flag4 ? 689940171 : (num5 = 969114431);
            num1 = num5 ^ (int) num2 * -1502090575;
            continue;
          case 5:
            flag1 = false;
            num1 = -689260329;
            continue;
          case 6:
            int num6 = !isEmpty ? -1699748946 : (num6 = -1198555904);
            num1 = num6 ^ (int) num2 * -1080251906;
            continue;
          case 7:
            int num7 = !flag2 ? -958185674 : (num7 = -440798772);
            num1 = num7 ^ (int) num2 * -1522938804;
            continue;
          case 8:
            num1 = -1043840991;
            continue;
          case 9:
            num1 = (int) num2 * -831097423 ^ -2006675646;
            continue;
          case 10:
            if (b >= 0)
            {
              num1 = (int) num2 * 1940825941 ^ 1283783540;
              continue;
            }
            break;
          case 11:
            num1 = (int) num2 * 305911864 ^ -679802676;
            continue;
          case 12:
            int num8 = !flag5 ? 28174746 : (num8 = 359166127);
            num1 = num8 ^ (int) num2 * -1980741290;
            continue;
          case 13:
            int num9 = !flag3 ? 1589403020 : (num9 = 702863788);
            num1 = num9 ^ (int) num2 * -1904659419;
            continue;
          case 14:
            this.IsOnCheck = true;
            num1 = (int) num2 * 635971504 ^ -1400550918;
            continue;
          case 15:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * -889031309 ^ 624759237;
            continue;
          case 16:
            num4 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            goto label_29;
          case 17:
            num1 = (int) num2 * 913676722 ^ 621609185;
            continue;
          case 18:
            piece = x.Piece;
            sq = this.board[a, b];
            num1 = -1626263651;
            continue;
          case 19:
            if (a >= 0)
            {
              num1 = (int) num2 * -1772011307 ^ 331260078;
              continue;
            }
            break;
          case 20:
            flag3 = sq.Piece.Color != x.Piece.Color;
            num1 = -753694235;
            continue;
          case 21:
            num1 = (int) num2 * -916455015 ^ 929823770;
            continue;
          case 22:
            goto label_1;
          case 23:
            flag1 = true;
            num1 = -545467381;
            continue;
          case 24:
            kind = UserAction.Capture;
            flag4 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * -523848534 ^ 40638328;
            continue;
          case 25:
            flag1 = true;
            num1 = (int) num2 * -500678663 ^ -1801890342;
            continue;
          case 26:
            flag1 = true;
            num1 = (int) num2 * -1257823820 ^ 1182766507;
            continue;
          case 27:
            if (x.Piece.Kind == Pieces.King)
            {
              num4 = 0;
              goto label_29;
            }
            else
            {
              num1 = (int) num2 * -285823272 ^ -1414214826;
              continue;
            }
          case 28:
            this.KingColorOnCheck = sq.Piece.Color;
            num1 = (int) num2 * -709097795 ^ 839612522;
            continue;
          case 29:
            if (a <= 7)
            {
              num1 = (int) num2 * 1115429012 ^ -743760652;
              continue;
            }
            break;
          default:
            goto label_39;
        }
        num3 = 1;
label_17:
        flag5 = num3 != 0;
        num1 = -1061896812;
        continue;
label_29:
        flag2 = num4 != 0;
        num1 = -1537940765;
      }
label_39:
      return flag1;
    }

    static void \u206E⁫‬⁬‏⁬‌⁫‍⁬‌⁬‫‎⁫​‭⁯⁬⁬‏‏⁭⁯‍⁭​⁯‎‭​‫⁭⁫‪‮​⁪‭‍‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
