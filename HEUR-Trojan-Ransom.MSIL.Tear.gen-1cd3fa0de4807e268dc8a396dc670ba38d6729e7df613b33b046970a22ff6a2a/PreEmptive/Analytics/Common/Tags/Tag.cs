// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.Tag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml;

namespace PreEmptive.Analytics.Common.Tags
{
  public class Tag
  {
    private string a;
    private string b;
    public AttributeList Attributes;

    public virtual string TagName
    {
      get
      {
        int num1 = -5078;
        int num2 = num1;
        num1 = -5078;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
    }

    public virtual string TagDescription
    {
      get
      {
        int num1 = -29335;
        int num2 = num1;
        num1 = -29335;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
    }

    public List<Tag> InnerTags
    {
      get
      {
        int num1 = 7784;
        int num2 = num1;
        num1 = 7784;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -16593;
        int num2 = num1;
        num1 = -16593;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Tag()
    {
      int A_1 = 11;
      this.a = Utils.a("잾곀꿂", A_1);
      this.b = Utils.a("﮾꓀ꗂ꓄닆ꗈ뿊\uEDCC鯎냐듒", A_1);
      this.Attributes = new AttributeList();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.InnerTags = new List<Tag>();
    }

    public Tag(string tagName)
      : this()
    {
      this.a = tagName;
    }

    public virtual string ToString(IAttributeLimiter limits)
    {
      int num1 = 17515;
      int num2 = num1;
      num1 = 17515;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          StringBuilder sb = new StringBuilder();
          this.AppendToStringBuilder(sb, limits);
          return sb.ToString();
        default:
          goto case 1;
      }
    }

    public override string ToString()
    {
      int num1 = -23554;
      int num2 = num1;
      num1 = -23554;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return this.ToString((IAttributeLimiter) null);
        default:
          goto case 1;
      }
    }

    public virtual void AppendToStringBuilder(StringBuilder sb, IAttributeLimiter limits)
    {
      int A_1 = 1;
      int num1 = 0;
      switch (num1)
      {
        default:
          int num2;
          List<Attribute>.Enumerator enumerator;
          switch (0)
          {
            case 0:
label_3:
              num2 = 1;
              if (num2 == 0)
                ;
              sb.Append(Utils.a("覴", A_1)).Append(this.TagName);
              enumerator = this.Attributes.GetEnumerator();
              num2 = 2;
              num1 = num2;
              goto default;
            default:
              int length;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    if (length == sb.Length)
                    {
                      num2 = 1;
                      num1 = num2;
                      continue;
                    }
                    goto label_29;
                  case 1:
                    goto label_28;
                  case 2:
                    try
                    {
                      num2 = 9;
                      int num3 = num2;
                      while (true)
                      {
                        Attribute current;
                        string s;
                        int? maxLength;
                        string str;
                        switch (num3)
                        {
                          case 0:
                            str = current.Value;
                            if (str == null)
                            {
                              num2 = 6;
                              num3 = num2;
                              continue;
                            }
                            break;
                          case 1:
                            if (enumerator.MoveNext())
                            {
                              current = enumerator.Current;
                              num2 = 0;
                              num3 = num2;
                              continue;
                            }
                            num2 = 7;
                            num3 = num2;
                            continue;
                          case 2:
                            maxLength = limits.MaxSize(this.TagName, current.Name);
                            num2 = 4;
                            num3 = num2;
                            continue;
                          case 4:
                            Tag.AppendEscape(sb, s, maxLength);
                            sb.Append(Utils.a("鞴", A_1));
                            num2 = 3;
                            num3 = num2;
                            continue;
                          case 5:
                            if (limits != null)
                            {
                              num2 = 2;
                              num3 = num2;
                              continue;
                            }
                            goto case 4;
                          case 6:
                            str = "";
                            break;
                          case 7:
                            num2 = 13644;
                            int num4 = num2;
                            num2 = 13644;
                            int num5 = num2;
                            switch (num4 == num5 ? 1 : 0)
                            {
                              case 0:
                              case 2:
                                goto label_18;
                              default:
                                num2 = 0;
                                if (num2 == 0)
                                  ;
                                num2 = 8;
                                num3 = num2;
                                continue;
                            }
                          case 8:
                            goto label_5;
                          case 9:
                            switch (0)
                            {
                              case 0:
                                goto label_14;
                              default:
                                continue;
                            }
                          default:
label_14:
                            num2 = 1;
                            num3 = num2;
                            continue;
                        }
                        s = str;
                        sb.Append(Utils.a("閴", A_1));
                        Tag.AppendEscape(sb, current.Name);
                        sb.Append(Utils.a("袴閶", A_1));
                        maxLength = new int?();
label_18:
                        num2 = 5;
                        num3 = num2;
                      }
                    }
                    finally
                    {
                      enumerator.Dispose();
                    }
label_5:
                    sb.Append(Utils.a("讴", A_1));
                    length = sb.Length;
                    this.AppendSerializedInnerTags(sb, limits);
                    num2 = 0;
                    num1 = num2;
                    continue;
                  default:
                    goto label_3;
                }
              }
label_28:
              sb.Insert(length - 1, Utils.a("骴", A_1));
              return;
label_29:
              sb.AppendFormat(Utils.a("覴颶슸论삼膾", A_1), new object[1]
              {
                (object) this.TagName
              });
              return;
          }
      }
    }

    public static Tag FromString(string str)
    {
      StringReader reader = new StringReader(str);
      try
      {
        return Tag.FromReader((TextReader) reader);
      }
      finally
      {
        int num1 = 2;
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              reader.Dispose();
              num1 = 1;
              num2 = num1;
              continue;
            case 1:
              goto label_11;
            case 2:
              num1 = 14559;
              int num3 = num1;
              num1 = 14559;
              int num4 = num1;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  break;
                default:
                  num1 = 1;
                  if (num1 == 0)
                    ;
                  num1 = 0;
                  if (num1 == 0)
                    ;
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
              }
              break;
          }
          if (reader != null)
          {
            num1 = 0;
            num2 = num1;
          }
          else
            break;
        }
label_11:;
      }
    }

    public static Tag FromReader(TextReader reader)
    {
      int num1 = 0;
      switch (num1)
      {
        default:
          Tag tag1 = (Tag) null;
          try
          {
            XmlReader xmlReader;
            Tag tag2;
            Stack<Tag> tagStack;
            int num2;
            switch (0)
            {
              case 0:
label_4:
                xmlReader = XmlReader.Create(reader, new XmlReaderSettings()
                {
                  CheckCharacters = false
                });
                tag2 = (Tag) null;
                tagStack = new Stack<Tag>();
                num2 = 20;
                num1 = num2;
                goto default;
              default:
                XmlNodeType nodeType;
                while (true)
                {
                  switch (num1)
                  {
                    case 0:
                      num2 = 4;
                      num1 = num2;
                      continue;
                    case 1:
                    case 6:
                    case 18:
                    case 20:
                      num2 = 3;
                      num1 = num2;
                      continue;
                    case 2:
                      if (nodeType == XmlNodeType.Element)
                      {
                        tag2 = new Tag(xmlReader.Name);
                        num2 = 25;
                        num1 = num2;
                        continue;
                      }
                      num2 = 21;
                      num1 = num2;
                      continue;
                    case 3:
                      if (!xmlReader.Read())
                      {
                        num2 = 22;
                        num1 = num2;
                        continue;
                      }
                      nodeType = xmlReader.NodeType;
                      num2 = 2;
                      num1 = num2;
                      continue;
                    case 4:
                      if (xmlReader.HasAttributes)
                      {
                        num2 = 10;
                        num1 = num2;
                        continue;
                      }
                      goto case 5;
                    case 5:
                      num2 = 16;
                      num1 = num2;
                      continue;
                    case 7:
                    case 11:
                      num2 = 13;
                      num1 = num2;
                      continue;
                    case 8:
                      num2 = 23;
                      num1 = num2;
                      continue;
                    case 9:
                      num2 = 6;
                      num1 = num2;
                      continue;
                    case 10:
                      num2 = 11;
                      num1 = num2;
                      continue;
                    case 12:
                      tag1 = tag2;
                      num2 = 0;
                      num1 = num2;
                      continue;
                    case 13:
                      if (!xmlReader.MoveToNextAttribute())
                      {
                        num2 = 15;
                        num1 = num2;
                        continue;
                      }
                      tag2.AddAttribute(xmlReader.Name, xmlReader.Value);
                      num2 = 7;
                      num1 = num2;
                      continue;
                    case 14:
                      tagStack.Peek().InnerTags.Add(tag2);
                      num2 = 8;
                      num1 = num2;
                      continue;
                    case 15:
                      xmlReader.MoveToElement();
                      num2 = 5;
                      num1 = num2;
                      continue;
                    case 16:
                      if (tagStack.Count > 0)
                      {
                        num2 = 14;
                        num1 = num2;
                        continue;
                      }
                      goto case 8;
                    case 17:
                      if (nodeType != XmlNodeType.EndElement)
                      {
                        num2 = 9;
                        num1 = num2;
                        continue;
                      }
                      tagStack.Pop();
                      num2 = -13283;
                      int num3 = num2;
                      num2 = -13283;
                      int num4 = num2;
                      switch (num3 == num4 ? 1 : 0)
                      {
                        case 0:
                        case 2:
                          goto label_9;
                        default:
                          num2 = 0;
                          if (num2 == 0)
                            ;
                          num2 = 1;
                          num1 = num2;
                          continue;
                      }
                    case 19:
                      tagStack.Push(tag2);
                      num2 = 18;
                      num1 = num2;
                      continue;
                    case 21:
label_9:
                      num2 = 17;
                      num1 = num2;
                      continue;
                    case 22:
                      num2 = 24;
                      num1 = num2;
                      continue;
                    case 23:
                      if (!xmlReader.IsEmptyElement)
                      {
                        num2 = 19;
                        num1 = num2;
                        continue;
                      }
                      goto case 1;
                    case 24:
                      goto label_41;
                    case 25:
                      if (tag1 == null)
                      {
                        num2 = 12;
                        num1 = num2;
                        continue;
                      }
                      goto case 0;
                    default:
                      goto label_4;
                  }
                }
            }
          }
          catch (Exception ex)
          {
            tag1 = (Tag) null;
          }
label_41:
          if (false)
            ;
          return tag1;
      }
    }

    protected virtual void AppendSerializedInnerTags(StringBuilder sb, IAttributeLimiter limits)
    {
      using (List<Tag>.Enumerator enumerator = this.InnerTags.GetEnumerator())
      {
        int num1 = 4;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
              num2 = 3;
              num1 = num2;
              continue;
            case 1:
              num2 = 2498;
              int num3 = num2;
              num2 = 2498;
              int num4 = num2;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  break;
                default:
                  num2 = 0;
                  if (num2 == 0)
                    ;
                  if (enumerator.MoveNext())
                  {
                    enumerator.Current.AppendToStringBuilder(sb, limits);
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    num2 = 2;
                    num1 = num2;
                    continue;
                  }
                  num2 = 0;
                  num1 = num2;
                  continue;
              }
              break;
            case 3:
              goto label_12;
            case 4:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
          }
          num2 = 1;
          num1 = num2;
        }
label_12:;
      }
    }

    public void AddAttribute(string name, string value)
    {
      int num1 = 7799;
      int num2 = num1;
      num1 = 7799;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.Attributes.Add(new Attribute(name, value));
          break;
        default:
          goto case 1;
      }
    }

    public void AddOptionalAttribute(string name, string value)
    {
      int num = 2;
      while (true)
      {
        if (false)
          ;
        switch (num)
        {
          case 0:
            this.AddAttribute(name, value);
            num = 1;
            continue;
          case 1:
            goto label_8;
          case 2:
            switch (true ? 1 : 0)
            {
              case 0:
              case 2:
                break;
              default:
                if (true)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
            break;
        }
        if (!string.IsNullOrEmpty(value))
          num = 0;
        else
          goto label_10;
      }
label_8:
      return;
label_10:;
    }

    protected static void AppendEscape(StringBuilder sb, string s, [Optional] int? maxLength)
    {
      int A_1 = 14;
      int num1 = 0;
      switch (num1)
      {
        default:
          int num2;
          int num3;
          switch (0)
          {
            case 0:
label_3:
              sb.EnsureCapacity(sb.Length + s.Length);
              num2 = 0;
              num3 = 1;
              if (num3 == 0)
                ;
              num3 = 18;
              num1 = num3;
              goto default;
            default:
              while (true)
              {
                char A_0;
                int index;
                char ch;
                string str;
                switch (num1)
                {
                  case 0:
                    num3 = 21;
                    num1 = num3;
                    continue;
                  case 1:
                  case 8:
                  case 9:
                  case 14:
                  case 17:
                  case 22:
                    ++index;
                    num3 = 29;
                    num1 = num3;
                    continue;
                  case 2:
                    str = s;
                    index = 0;
                    num3 = 28;
                    num1 = num3;
                    continue;
                  case 3:
                    if (ch != '"')
                    {
                      num3 = 0;
                      num1 = num3;
                      continue;
                    }
                    sb.Append(Utils.a("\uE4C1뗃독\uA7C7뻉\uF7CB", A_1));
                    num3 = 14;
                    num1 = num3;
                    continue;
                  case 4:
                    num3 = 27;
                    num1 = num3;
                    continue;
                  case 5:
                    goto label_46;
                  case 6:
                    sb.Append(string.Format(Utils.a("\uE4C1\uE7C3뻅돇韛\uF6CB雍\uE4CF꿑\uEFD3", A_1), new object[1]
                    {
                      (object) (long) A_0
                    }));
                    num3 = 8;
                    num1 = num3;
                    continue;
                  case 7:
                    goto label_44;
                  case 10:
                    num3 = 26;
                    num1 = num3;
                    continue;
                  case 11:
                    if (A_0 >= ' ')
                    {
                      num3 = 10;
                      num1 = num3;
                      continue;
                    }
                    break;
                  case 12:
                    num3 = 16;
                    num1 = num3;
                    continue;
                  case 13:
                    sb.Append(A_0);
                    num3 = 1;
                    num1 = num3;
                    continue;
                  case 15:
                    if (index >= str.Length)
                    {
                      num3 = 5;
                      num1 = num3;
                      continue;
                    }
                    A_0 = str[index];
                    num3 = 24;
                    num1 = num3;
                    continue;
                  case 16:
                    if (num2 >= maxLength.Value)
                    {
                      num3 = 19;
                      num1 = num3;
                      continue;
                    }
                    goto label_25;
                  case 18:
                    if (!string.IsNullOrEmpty(s))
                    {
                      num3 = 2;
                      num1 = num3;
                      continue;
                    }
                    goto label_48;
                  case 19:
                    num3 = 7;
                    num1 = num3;
                    continue;
                  case 20:
label_15:
                    if (Tag.h((int) A_0))
                    {
                      num3 = 6;
                      num1 = num3;
                      continue;
                    }
                    goto case 1;
                  case 21:
                    if (ch != '&')
                    {
                      num3 = 4;
                      num1 = num3;
                      continue;
                    }
                    sb.Append(Utils.a("\uE4C1ꗃꯅ룇\uF1C9", A_1));
                    num3 = 17;
                    num1 = num3;
                    continue;
                  case 23:
                    num3 = 25;
                    num1 = num3;
                    continue;
                  case 24:
                    if (maxLength.HasValue)
                    {
                      num3 = 12;
                      num1 = num3;
                      continue;
                    }
                    goto label_25;
                  case 25:
label_20:
                    num3 = 11;
                    num1 = num3;
                    continue;
                  case 26:
                    if (A_0 < '\u007F')
                    {
                      num3 = 13;
                      num1 = num3;
                      continue;
                    }
                    break;
                  case 27:
                    switch (ch)
                    {
                      case '<':
                        sb.Append(Utils.a("\uE4C1ꣃ닅\uF3C7", A_1));
                        num3 = 9;
                        num1 = num3;
                        continue;
                      case '=':
                        goto label_20;
                      case '>':
                        num3 = 30676;
                        int num4 = num3;
                        num3 = 30676;
                        int num5 = num3;
                        switch (num4 == num5 ? 1 : 0)
                        {
                          case 0:
                          case 2:
                            goto label_15;
                          default:
                            num3 = 0;
                            if (num3 == 0)
                              ;
                            sb.Append(Utils.a("\uE4C1ꏃ닅\uF3C7", A_1));
                            num3 = 22;
                            num1 = num3;
                            continue;
                        }
                      default:
                        num3 = 23;
                        num1 = num3;
                        continue;
                    }
                  case 28:
                  case 29:
                    num3 = 15;
                    num1 = num3;
                    continue;
                  default:
                    goto label_3;
                }
                num3 = 20;
                num1 = num3;
                continue;
label_25:
                ++num2;
                ch = A_0;
                num3 = 3;
                num1 = num3;
              }
label_46:
              return;
label_44:
              return;
label_48:
              return;
          }
      }
    }

    private static bool h(int A_0)
    {
      int num = 8;
      while (true)
      {
        switch (num)
        {
          case 0:
            if (A_0 > 55295)
            {
              num = 11;
              continue;
            }
            goto label_25;
          case 1:
            if (A_0 >= 57344)
            {
              num = 2;
              continue;
            }
            goto label_16;
          case 2:
            goto label_21;
          case 3:
            num = 7;
            continue;
          case 4:
            num = 10;
            continue;
          case 5:
            num = 0;
            continue;
          case 6:
            if (false)
              ;
            num = 9;
            continue;
          case 7:
            if (A_0 >= 32)
            {
              num = 5;
              continue;
            }
            goto case 11;
          case 8:
            switch (true ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_14;
              default:
                if (true)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
          case 9:
label_14:
            if (A_0 != 13)
            {
              num = 3;
              continue;
            }
            goto label_25;
          case 10:
            if (A_0 != 10)
            {
              num = 6;
              continue;
            }
            goto label_25;
          case 11:
            num = 1;
            continue;
        }
        if (A_0 != 9)
          num = 4;
        else
          goto label_25;
      }
label_16:
      return false;
label_21:
      return A_0 <= 65533;
label_25:
      return true;
    }

    protected string Escape(string s, [Optional] int? maxLength)
    {
      int num1 = 6116;
      int num2 = num1;
      num1 = 6116;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          StringBuilder sb = new StringBuilder(s.Length);
          Tag.AppendEscape(sb, s);
          return sb.ToString();
        default:
          goto case 1;
      }
    }

    protected internal void AddOptionalAttribute<T>(string name, T value)
    {
      int num1;
      int num2;
      string str;
      switch (0)
      {
        case 0:
label_4:
          str = Tag.h<T>(value);
          num1 = 0;
          num2 = num1;
          goto default;
        default:
          while (true)
          {
            num1 = 16183;
            int num3 = num1;
            num1 = 16183;
            int num4 = num1;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_4;
              default:
                num1 = 0;
                if (num1 == 0)
                  ;
                switch (num2)
                {
                  case 0:
                    if (str != null)
                    {
                      num1 = 2;
                      num2 = num1;
                      continue;
                    }
                    goto label_10;
                  case 1:
                    goto label_10;
                  case 2:
                    this.AddOptionalAttribute(name, str);
                    num1 = 1;
                    num2 = num1;
                    continue;
                  default:
                    goto label_4;
                }
            }
          }
label_10:
          num1 = 1;
          if (num1 == 0)
            break;
          break;
      }
    }

    private static string h<a>(a A_0)
    {
      int num1 = 0;
      switch (num1)
      {
        default:
          int? nullable1;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              nullable1 = (object) A_0 as int?;
              num2 = 8;
              num1 = num2;
              goto default;
            default:
              ulong? nullable2;
              long? nullable3;
              bool? nullable4;
              Guid? nullable5;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    if (nullable3.HasValue)
                    {
                      num2 = 11;
                      num1 = num2;
                      continue;
                    }
                    break;
                  case 1:
                    if (nullable2.HasValue)
                    {
                      num2 = 2;
                      num1 = num2;
                      continue;
                    }
                    num2 = 10;
                    num1 = num2;
                    continue;
                  case 2:
                    goto label_22;
                  case 3:
                    goto label_25;
                  case 4:
                    goto label_21;
                  case 5:
                    goto label_24;
                  case 6:
                    goto label_23;
                  case 7:
                    if (!nullable5.HasValue)
                    {
                      nullable3 = (object) A_0 as long?;
                      num2 = -13716;
                      int num3 = num2;
                      num2 = -13716;
                      int num4 = num2;
                      switch (num3 == num4 ? 1 : 0)
                      {
                        case 0:
                        case 2:
                          break;
                        default:
                          num2 = 0;
                          if (num2 == 0)
                            ;
                          num2 = 0;
                          num1 = num2;
                          continue;
                      }
                    }
                    else
                    {
                      num2 = 5;
                      num1 = num2;
                      continue;
                    }
                    break;
                  case 8:
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    if (nullable1.HasValue)
                    {
                      num2 = 4;
                      num1 = num2;
                      continue;
                    }
                    nullable4 = (object) A_0 as bool?;
                    num2 = 9;
                    num1 = num2;
                    continue;
                  case 9:
                    if (nullable4.HasValue)
                    {
                      num2 = 3;
                      num1 = num2;
                      continue;
                    }
                    nullable5 = (object) A_0 as Guid?;
                    num2 = 7;
                    num1 = num2;
                    continue;
                  case 10:
                    if ((object) A_0 is string)
                    {
                      num2 = 6;
                      num1 = num2;
                      continue;
                    }
                    goto label_30;
                  case 11:
                    goto label_26;
                  default:
                    goto label_3;
                }
                nullable2 = (object) A_0 as ulong?;
                num2 = 1;
                num1 = num2;
              }
label_21:
              return nullable1.Value.ToString();
label_22:
              return nullable2.Value.ToString();
label_23:
              return (object) A_0 as string;
label_24:
              return nullable5.Value.ToString();
label_25:
              return nullable4.Value.ToString().ToLowerInvariant();
label_26:
              return nullable3.Value.ToString();
label_30:
              return (string) null;
          }
      }
    }
  }
}
