// Decompiled with JetBrains decompiler
// Type: Coache.Business.CuponManager
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Data;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;

namespace Coache.Business
{
  public class CuponManager
  {
    public BindingList<Cupon> GetAll(Proveedor proveedor)
    {
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetCuponesProveedor", SqlDataAccessArgs.CreateWith("@ID_Proveedor", (object) proveedor.UserID).Arguments);
      BindingList<Cupon> all = new BindingList<Cupon>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          all.Add(new Cupon()
          {
            ID = int.Parse(row["ID"].ToString()),
            Precio = double.Parse(row["Precio"].ToString()),
            PrecioOriginal = double.Parse(row["PrecioOriginal"].ToString()),
            FechaPublicacion = Convert.ToDateTime(row["FechaPublicacion"]),
            FechaVencimientoConsumo = Convert.ToDateTime(row["FechaVencimiento"]),
            FechaVencimientoOferta = Convert.ToDateTime(row["FechaVigencia"]),
            Cantidad = int.Parse(row["Stock"].ToString()),
            CantidadPorUsuario = int.Parse(row["CantidadPorUsuario"].ToString()),
            Descripcion = row["Descripcion"].ToString(),
            Codigo = row["Codigo"].ToString(),
            Proveedor = proveedor,
            Ciudades = this.GetCiudades(int.Parse(row["ID"].ToString())),
            Publicado = Convert.ToBoolean(row["Publicado"])
          });
      }
      return all;
    }

    public BindingList<Cupon> GetAll(Cliente cliente)
    {
      DateTime dateTime = Convert.ToDateTime(ConfigurationManager.AppSettings["FechaSistema"]);
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetCuponesCliente", SqlDataAccessArgs.CreateWith("@ID_Cliente", (object) cliente.UserID).And("@Fecha_Publicacion", (object) new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 23, 59, 59)).Arguments);
      BindingList<Cupon> all = new BindingList<Cupon>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
        {
          if (int.Parse(row["Stock"].ToString()) != 0)
            all.Add(new Cupon()
            {
              ID = int.Parse(row["ID"].ToString()),
              Precio = double.Parse(row["Precio"].ToString()),
              PrecioOriginal = double.Parse(row["PrecioOriginal"].ToString()),
              FechaPublicacion = Convert.ToDateTime(row["FechaPublicacion"]),
              FechaVencimientoConsumo = Convert.ToDateTime(row["FechaVencimiento"]),
              FechaVencimientoOferta = Convert.ToDateTime(row["FechaVigencia"]),
              Cantidad = int.Parse(row["Stock"].ToString()),
              CantidadPorUsuario = int.Parse(row["CantidadPorUsuario"].ToString()),
              Descripcion = row["Descripcion"].ToString(),
              Codigo = row["Codigo"].ToString()
            });
        }
      }
      return all;
    }

    public BindingList<Cupon> GetAllToPublish()
    {
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetCuponesParaPublicar", SqlDataAccessArgs.CreateWith("@Fecha_Publicacion", (object) Convert.ToDateTime(ConfigurationManager.AppSettings["FechaSistema"])).Arguments);
      BindingList<Cupon> allToPublish = new BindingList<Cupon>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
        {
          BindingList<Cupon> bindingList = allToPublish;
          Cupon cupon = new Cupon();
          cupon.ID = int.Parse(row["ID"].ToString());
          cupon.FechaVencimientoOferta = Convert.ToDateTime(row["FechaVigencia"]);
          cupon.Descripcion = row["Descripcion"].ToString();
          cupon.Codigo = row["Codigo"].ToString();
          Proveedor proveedor = new Proveedor();
          proveedor.UserID = int.Parse(row["ID_Proveedor"].ToString());
          proveedor.RazonSocial = row["RazonSocial"].ToString();
          cupon.Proveedor = proveedor;
          bindingList.Add(cupon);
        }
      }
      return allToPublish;
    }

    public int Add(Cupon cupon)
    {
      int num = SqlDataAccess.ExecuteScalarQuery<int>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.InsertCupon", SqlDataAccessArgs.CreateWith("@Precio", (object) cupon.Precio).And("@PrecioOriginal", (object) cupon.PrecioOriginal).And("@FechaPublicacion", (object) cupon.FechaPublicacion).And("@FechaVigencia", (object) cupon.FechaVencimientoOferta).And("@FechaVencimiento", (object) cupon.FechaVencimientoConsumo).And("@Stock", (object) cupon.Cantidad).And("@Descripcion", (object) cupon.Descripcion).And("@ID_Proveedor", (object) cupon.Proveedor.UserID).And("@CantidadPorUsuario", (object) cupon.CantidadPorUsuario).And("@Publicado", (object) 0).And("@Codigo", (object) cupon.Codigo).Arguments);
      foreach (City ciudade in cupon.Ciudades)
        SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.InsertCuponCiudad", SqlDataAccessArgs.CreateWith("@ID_Cupon", (object) num).And("@ID_Ciudad", (object) ciudade.ID).Arguments);
      return num;
    }

    public void Publish(Cupon cupon) => SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.PublicarCupon", SqlDataAccessArgs.CreateWith("@ID", (object) cupon.ID).Arguments);

    public static string GetCodigo()
    {
      string empty = string.Empty;
      string codigo;
      do
      {
        char[] chArray = new char[10];
        Random random = new Random();
        for (int index = 0; index < 10; ++index)
          chArray[index] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[random.Next(0, "ABCDEFGHIJKLMNOPQRSTUVWXYZ".Length)];
        codigo = new string(chArray);
      }
      while (CuponManager.CodigoExists(codigo));
      return codigo;
    }

    public int ComprarCupon(Cupon cupon, Cliente cliente) => int.Parse((SqlDataAccess.ExecuteScalarQuery<object>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.ComprarCuponCliente", SqlDataAccessArgs.CreateWith("@ID_Cupon", (object) cupon.ID).And("@ID_Cliente", (object) cliente.UserID).And("@Fecha", (object) DateTime.Now).Arguments) ?? throw new Exception("Ha superado la cantidad de cupones permitidos por persona")).ToString());

    private static bool CodigoExists(string codigo) => SqlDataAccess.ExecuteScalarQuery<object>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetCodigoCuponExists", SqlDataAccessArgs.CreateWith("@Codigo", (object) codigo).Arguments) != null;

    private List<City> GetCiudades(int id)
    {
      List<City> ciudades = new List<City>();
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetCiudadesCupon", SqlDataAccessArgs.CreateWith("@ID_Cupon", (object) id).Arguments);
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          ciudades.Add(new City()
          {
            ID = int.Parse(row["ID"].ToString()),
            Name = row["Descripcion"].ToString()
          });
      }
      return ciudades;
    }
  }
}
