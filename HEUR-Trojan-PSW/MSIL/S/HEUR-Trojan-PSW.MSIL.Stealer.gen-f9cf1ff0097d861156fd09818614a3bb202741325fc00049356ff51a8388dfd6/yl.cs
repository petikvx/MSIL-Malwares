// Decompiled with JetBrains decompiler
// Type: rw.yl
// Assembly: DynamicMet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AF763EB9-8CE5-4C8D-A157-180B851AA721
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9cf1ff0097d861156fd09818614a3bb202741325fc00049356ff51a8388dfd6.exe

namespace rw
{
  public enum yl
  {
    bfschema = 1,
    S = 2,
    whitespace = 3,
    comment = 4,
    singleline_comment = 5,
    multiline_comment = 6,
    valid_item_name = 7,
    byteorder = 8,
    littleendian = 9,
    bigendian = 10, // 0x0000000A
    skip = 11, // 0x0000000B
    conditional = 12, // 0x0000000C
    formatspecifier = 13, // 0x0000000D
    datablocks = 14, // 0x0000000E
    datablock = 15, // 0x0000000F
    field = 16, // 0x00000010
    localfield = 17, // 0x00000011
    localassignment = 18, // 0x00000012
    type = 19, // 0x00000013
    primitivetype = 20, // 0x00000014
    namedtype = 21, // 0x00000015
    functiontype = 22, // 0x00000016
    functionname = 23, // 0x00000017
    action_list = 24, // 0x00000018
    actions = 25, // 0x00000019
    action = 26, // 0x0000001A
    assignment = 27, // 0x0000001B
    output = 28, // 0x0000001C
    blockname = 29, // 0x0000001D
    p_string = 30, // 0x0000001E
    hex = 31, // 0x0000001F
    hexbyte = 32, // 0x00000020
    EOF = 33, // 0x00000021
    fieldname = 34, // 0x00000022
    arrayknown = 35, // 0x00000023
    arrayunknown = 36, // 0x00000024
    stoplist = 37, // 0x00000025
    or_keyword = 38, // 0x00000026
    stopcase = 39, // 0x00000027
    stopword = 40, // 0x00000028
    inclusion = 41, // 0x00000029
    p_struct = 42, // 0x0000002A
    rel_offset = 43, // 0x0000002B
    abs_offset = 44, // 0x0000002C
    p_enum = 45, // 0x0000002D
    bitfield = 46, // 0x0000002E
    compression = 47, // 0x0000002F
    compressionmethod = 48, // 0x00000030
    enumfield = 49, // 0x00000031
    p_else = 50, // 0x00000032
    enumrange = 51, // 0x00000033
    enumname = 52, // 0x00000034
    nameoractions = 53, // 0x00000035
    bitname = 54, // 0x00000036
    bit = 55, // 0x00000037
    expression = 56, // 0x00000038
    logical = 57, // 0x00000039
    bitwise = 58, // 0x0000003A
    comp = 59, // 0x0000003B
    shift = 60, // 0x0000003C
    sum = 61, // 0x0000003D
    prod = 62, // 0x0000003E
    value = 63, // 0x0000003F
    call = 64, // 0x00000040
    number = 65, // 0x00000041
    invoke_name = 66, // 0x00000042
    named_value = 67, // 0x00000043
    namelist = 68, // 0x00000044
    varname = 69, // 0x00000045
  }
}
