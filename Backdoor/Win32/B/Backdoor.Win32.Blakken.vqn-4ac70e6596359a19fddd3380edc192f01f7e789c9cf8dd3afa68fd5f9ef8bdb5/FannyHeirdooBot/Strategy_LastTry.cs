// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.Strategy_LastTry
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot
{
  public class Strategy_LastTry : IBotStrategy
  {
    private List<AttackPlan> attackQueue = new List<AttackPlan>();
    private Universe currentUniverse;
    private PlanetTurnPredictions TurnPrediction = new PlanetTurnPredictions(40);
    private Random rnd = Strategy_LastTry.\u206B‮⁬⁮‮⁭‬​⁭⁯‮‎‎⁪⁭⁬‫⁯‎‬⁮‭⁪⁯‫‬‏‍⁯⁯⁮‪⁯⁯⁬⁭‭‍‪⁫‮();

    protected void ProcessAttackQueue()
    {
label_1:
      int num1 = 1120183108;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 620507870)) % 5U)
        {
          case 1:
            num1 = (int) num2 * -1282797094 ^ 82605213;
            continue;
          case 2:
            this.DefendOnwedPlanets();
            num1 = (int) num2 * 1420550506 ^ -353588933;
            continue;
          case 3:
            this.DefendNeutralPlanets(30);
            num1 = (int) num2 * -2071326119 ^ -824368975;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      Dictionary<int, Planet>.ValueCollection.Enumerator enumerator1 = this.currentUniverse.Planets.Values.GetEnumerator();
      try
      {
label_13:
        int num3 = !enumerator1.MoveNext() ? 2072089575 : (num3 = 477796276);
        Planet current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 620507870)) % 8U)
          {
            case 0:
              num3 = 477796276;
              continue;
            case 2:
              current = enumerator1.Current;
              num3 = 1525390443;
              continue;
            case 3:
              current.IsInAttackQueue = false;
              num3 = (int) num4 * -968616087 ^ -1206202751;
              continue;
            case 4:
              num3 = (int) num4 * 913912766 ^ 2143710440;
              continue;
            case 5:
              num3 = (int) num4 * -1260866198 ^ -218110481;
              continue;
            case 6:
              num3 = (int) num4 * 18238799 ^ 888277019;
              continue;
            case 7:
              goto label_13;
            default:
              goto label_21;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_17:
        int num5 = 1907446753;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 620507870)) % 3U)
          {
            case 1:
              num5 = (int) num6 * -2040111908 ^ -1238857195;
              continue;
            case 2:
              goto label_17;
            default:
              goto label_20;
          }
        }
label_20:;
      }
label_21:
      using (List<AttackPlan>.Enumerator enumerator2 = this.attackQueue.ToList<AttackPlan>().GetEnumerator())
      {
label_28:
        int num7 = enumerator2.MoveNext() ? 1623098991 : (num7 = 995680707);
        AttackPlan current;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ 620507870)) % 6U)
          {
            case 0:
              num7 = 1623098991;
              continue;
            case 1:
              this.ExecutePlans(current);
              num7 = (int) num8 * -1025506625 ^ 1759511991;
              continue;
            case 2:
              num7 = (int) num8 * 495684825 ^ -1775030668;
              continue;
            case 3:
              goto label_30;
            case 4:
              goto label_28;
            case 5:
              current = enumerator2.Current;
              num7 = 717810381;
              continue;
            default:
              goto label_25;
          }
        }
label_30:
        return;
label_25:;
      }
    }

    protected bool ExecutePlans(AttackPlan sweetPlan)
    {
label_1:
      int num1 = 1388017526;
      bool flag1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1412176059)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 20985728 ^ -1801989099;
            continue;
          case 1:
            flag1 = false;
            num1 = (int) num2 * 206686144 ^ -528545053;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      using (List<AttackPlanParticipant>.Enumerator enumerator = sweetPlan.Participants.GetEnumerator())
      {
label_28:
        int num3 = enumerator.MoveNext() ? 198722175 : (num3 = 1509059120);
        while (true)
        {
          uint num4;
          AttackPlanParticipant current;
          bool flag2;
          bool flag3;
          bool flag4;
          int shipCount;
          Planet source;
          int num5;
          switch ((num4 = (uint) (num3 ^ 1412176059)) % 30U)
          {
            case 0:
              int num6 = !flag4 ? 614535502 : (num6 = 1310082585);
              num3 = num6 ^ (int) num4 * 1402340086;
              continue;
            case 1:
              flag4 = current.ScheduledTurn <= 0;
              num3 = (int) num4 * -1730294487 ^ -2041696024;
              continue;
            case 2:
              num3 = (int) num4 * -646745710 ^ -2083721671;
              continue;
            case 3:
              source.CreateTurnPredictions();
              num3 = (int) num4 * 1397656615 ^ 467898126;
              continue;
            case 4:
              num5 = sweetPlan.DominationMove ? 1 : 0;
              break;
            case 5:
              this.currentUniverse.MakeMove(source, sweetPlan.Target, shipCount);
              num3 = (int) num4 * 1318212774 ^ -1947495995;
              continue;
            case 6:
              num3 = 31219991;
              continue;
            case 7:
              source = current.Source;
              num3 = (int) num4 * 1683165003 ^ -37645491;
              continue;
            case 8:
              num3 = (int) num4 * -2049216141 ^ -1755233466;
              continue;
            case 9:
              goto label_28;
            case 10:
              current = enumerator.Current;
              num3 = 1130959250;
              continue;
            case 11:
              num3 = 198722175;
              continue;
            case 12:
              shipCount = current.AttackersTurn.NumShips;
              flag3 = !sweetPlan.Target.IsMine;
              num3 = (int) num4 * 1876312599 ^ -857359608;
              continue;
            case 13:
              int num7 = !source.IsMine ? 1749089995 : (num7 = 1104069825);
              num3 = num7 ^ (int) num4 * -1981857878;
              continue;
            case 14:
              num3 = (int) num4 * 767850842 ^ 464748468;
              continue;
            case 15:
              num3 = 207885769;
              continue;
            case 16:
              flag1 = true;
              num3 = (int) num4 * -1988444510 ^ -178411854;
              continue;
            case 17:
              num3 = (int) num4 * -2003066294 ^ 133887191;
              continue;
            case 18:
              num3 = 1971103871;
              continue;
            case 19:
              int num8 = flag3 ? 1353580322 : (num8 = 151383707);
              num3 = num8 ^ (int) num4 * 453981122;
              continue;
            case 20:
              num3 = (int) num4 * 523461476 ^ 2048707501;
              continue;
            case 21:
              source.IsInAttackQueue = current.ScheduledTurn > 0;
              num3 = (int) num4 * 679815009 ^ -1642494300;
              continue;
            case 22:
              shipCount = Strategy_LastTry.\u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮(shipCount, source.AttackForce);
              num3 = 79863930;
              continue;
            case 24:
              --current.ScheduledTurn;
              num3 = 1642472454;
              continue;
            case 25:
              if (current.DefendersTurn.Owner == 1)
              {
                num3 = (int) num4 * -1647698732 ^ -34805815;
                continue;
              }
              num5 = 1;
              break;
            case 26:
              num3 = (int) num4 * -1562471986 ^ 401381701;
              continue;
            case 27:
              shipCount = Strategy_LastTry.\u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮(current.DefendersTurn.NumShips + 1, shipCount);
              num3 = (int) num4 * -1303111816 ^ 15755954;
              continue;
            case 28:
              num3 = (int) num4 * 882293919 ^ 730435249;
              continue;
            case 29:
              int num9 = !flag2 ? 114697629 : (num9 = 1617946400);
              num3 = num9 ^ (int) num4 * -43960474;
              continue;
            default:
              goto label_41;
          }
          flag2 = num5 != 0;
          num3 = 67368604;
        }
      }
label_41:
      if (sweetPlan.Target.IsMine)
        goto label_45;
label_42:
      int num10 = 425356522;
label_43:
      bool flag5;
      while (true)
      {
        uint num11;
        switch ((num11 = (uint) (num10 ^ 1412176059)) % 6U)
        {
          case 0:
            if (flag5)
            {
              num10 = (int) num11 * -2110903171 ^ -1022906284;
              continue;
            }
            goto label_64;
          case 2:
            num10 = (int) num11 * -614571177 ^ -1305369998;
            continue;
          case 3:
            num10 = (int) num11 * -1215126504 ^ 1955133327;
            continue;
          case 4:
            goto label_42;
          case 5:
            goto label_44;
          default:
            goto label_51;
        }
      }
label_44:
      int num12 = sweetPlan.Participants.Count == 0 ? 1 : 0;
      goto label_46;
label_51:
      using (List<AttackPlanParticipant>.Enumerator enumerator = sweetPlan.Participants.GetEnumerator())
      {
label_57:
        int num13 = enumerator.MoveNext() ? 1480001122 : (num13 = 1993886239);
        while (true)
        {
          uint num14;
          switch ((num14 = (uint) (num13 ^ 1412176059)) % 5U)
          {
            case 0:
              num13 = 1480001122;
              continue;
            case 1:
              enumerator.Current.Source.IsInAttackQueue = false;
              num13 = 1638665374;
              continue;
            case 2:
              goto label_57;
            case 3:
              num13 = (int) num14 * 2047088605 ^ -1977117707;
              continue;
            default:
              goto label_59;
          }
        }
      }
label_59:
      this.attackQueue.Remove(sweetPlan);
label_60:
      int num15 = 687638893;
label_61:
      bool flag6;
      while (true)
      {
        uint num16;
        switch ((num16 = (uint) (num15 ^ 1412176059)) % 5U)
        {
          case 0:
            flag6 = flag1;
            num15 = (int) num16 * 603578657 ^ -215111456;
            continue;
          case 1:
            goto label_64;
          case 3:
            num15 = (int) num16 * -1579308832 ^ -435903194;
            continue;
          case 4:
            goto label_60;
          default:
            goto label_65;
        }
      }
label_65:
      return flag6;
label_64:
      sweetPlan.Target.AttackMovesAllowed = false;
      num15 = 1706218345;
      goto label_61;
label_45:
      num12 = 1;
label_46:
      flag5 = num12 != 0;
      num10 = 1492281431;
      goto label_43;
    }

    protected IEnumerable<Planet> CanUseInAtttack() => (IEnumerable<Planet>) new Strategy_LastTry.\u003CCanUseInAtttack\u003Ed__4(-2)
    {
      \u003C\u003E4__this = this
    };

    protected bool IsNotEventuallyMine(Planet subject)
    {
label_1:
      int num1 = 677257726;
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1679631671)) % 8U)
        {
          case 0:
            flag = true;
            num1 = 913271915;
            continue;
          case 1:
            if (!subject.IsMine)
            {
              num1 = (int) num2 * -1374080301 ^ 626161121;
              continue;
            }
            num3 = 1;
            break;
          case 2:
            num1 = (int) num2 * -884210495 ^ -550881834;
            continue;
          case 3:
            flag = false;
            num1 = (int) num2 * 993389264 ^ -1284161080;
            continue;
          case 5:
            num3 = subject.WinningArmadaIsMine ? 1 : 0;
            break;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 410706744 ^ -367317981;
            continue;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 != 0 ? 958232669 : (num4 = 2023506079);
      }
label_12:
      return flag;
    }

    public void DoTurn(Universe uni)
    {
label_1:
      int num1 = -1242920712;
      int num2;
      List<AttackPlan> source;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -955018534)) % 7U)
        {
          case 0:
            num1 = (int) num3 * 938109691 ^ -95905169;
            continue;
          case 1:
            this.currentUniverse = uni;
            num1 = (int) num3 * 1885779608 ^ 191724317;
            continue;
          case 3:
            goto label_1;
          case 4:
            num2 = 0;
            source = new List<AttackPlan>();
            num1 = (int) num3 * -790058586 ^ 473931945;
            continue;
          case 5:
            num1 = (int) num3 * -728629709 ^ -27023986;
            continue;
          case 6:
            this.ProcessAttackQueue();
            num1 = (int) num3 * 1767057076 ^ -2042499716;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      IEnumerator<Planet> enumerator1 = this.CanUseInAtttack().GetEnumerator();
      uint num4;
      try
      {
label_69:
        if (Strategy_LastTry.\u200C⁯‌⁫⁭​⁭‍‎⁭‬​⁭⁯‭‮⁭​‮⁭‎​‭‮‪‮⁪⁫⁮‍⁯⁪⁬‪⁫‮‎‌⁬‮‮((IEnumerator) enumerator1))
        {
label_14:
          Planet current1 = enumerator1.Current;
          int num5 = -1072714182;
          PlanetTurn planetTurn1;
          PlanetTurn planetTurn2;
          while (true)
          {
            uint num6;
            switch ((num6 = (uint) (num5 ^ -955018534)) % 7U)
            {
              case 0:
                num5 = -807627365;
                continue;
              case 1:
                planetTurn2 = current1.TurnPrediction[0];
                num5 = (int) num6 * 7442670 ^ 1573799356;
                continue;
              case 2:
                num5 = (int) num6 * 728696172 ^ 1117557123;
                continue;
              case 3:
                num2 += current1.AttackForce;
                num5 = (int) num6 * 1256045601 ^ 1268125724;
                continue;
              case 4:
                goto label_14;
              case 6:
                planetTurn1 = new PlanetTurn(0);
                num5 = (int) num6 * -1449503921 ^ 1466356900;
                continue;
              default:
                goto label_17;
            }
          }
label_17:
          IEnumerator<Route> enumerator2 = current1.Routes.Where<Route>((Func<Route, bool>) (target => this.IsNotEventuallyMine(target.Destination) && target.Destination.GrowthRate > 0)).GetEnumerator();
          try
          {
label_49:
            int num7 = !Strategy_LastTry.\u200C⁯‌⁫⁭​⁭‍‎⁭‬​⁭⁯‭‮⁭​‮⁭‎​‭‮‪‮⁪⁫⁮‍⁯⁪⁬‪⁫‮‎‌⁬‮‮((IEnumerator) enumerator2) ? -1380090078 : (num7 = -970345695);
            while (true)
            {
              uint num8;
              PlanetTurn turn;
              bool enabled;
              PlanetTurn defendersTurn;
              AttackPlan attackPlan;
              bool flag;
              Route current2;
              PlanetTurn planetTurn3;
              int num9;
              switch ((num8 = (uint) (num7 ^ -955018534)) % 38U)
              {
                case 0:
                  num7 = (int) num8 * -286510698 ^ 1595463365;
                  continue;
                case 1:
                  planetTurn3 = current2.Destination.CalcMaxGainUsingThisManyShips(current1, defendersTurn.TurnsFromNow, turn.NumShips);
                  num7 = (int) num8 * -762924523 ^ 394026023;
                  continue;
                case 2:
                  num7 = (int) num8 * -1974803652 ^ 531661855;
                  continue;
                case 3:
                  num7 = -970345695;
                  continue;
                case 4:
                  num7 = (int) num8 * -1286353856 ^ -2400645;
                  continue;
                case 5:
                  source.Add(attackPlan);
                  num7 = (int) num8 * 470814399 ^ -1850486361;
                  continue;
                case 6:
                  num7 = (int) num8 * -49145063 ^ -1216635357;
                  continue;
                case 7:
                  num7 = (int) num8 * 1016241519 ^ 1245793594;
                  continue;
                case 8:
                  attackPlan.Enabled = true;
                  num7 = (int) num8 * -720824807 ^ 1837589926;
                  continue;
                case 9:
                  current2 = enumerator2.Current;
                  num7 = -1920106810;
                  continue;
                case 10:
                  attackPlan.Sweetness = (double) planetTurn3.NumShips;
                  num7 = (int) num8 * 1040494743 ^ 313168203;
                  continue;
                case 11:
                  attackPlan.Target = current2.Destination;
                  num7 = (int) num8 * 1931616997 ^ -969961211;
                  continue;
                case 12:
                  num7 = -862428681;
                  continue;
                case 13:
                  num7 = -1417173157;
                  continue;
                case 14:
                  if (defendersTurn == null)
                  {
                    num9 = 0;
                    break;
                  }
                  num7 = (int) num8 * -1045135966 ^ -2097381294;
                  continue;
                case 15:
                  planetTurn3 = (PlanetTurn) null;
                  num7 = (int) num8 * 757495328 ^ 60341688;
                  continue;
                case 16:
                  num7 = (int) num8 * -1639480363 ^ -1957096727;
                  continue;
                case 17:
                  num7 = (int) num8 * -905180513 ^ -1592271312;
                  continue;
                case 18:
                  num9 = turn.NumShips < defendersTurn.NumShips ? 1 : 0;
                  break;
                case 19:
                  turn = planetTurn2;
                  num7 = (int) num8 * 1691331989 ^ 1359497505;
                  continue;
                case 20:
                  goto label_49;
                case 21:
                  enabled = attackPlan.Enabled;
                  num7 = -739256055;
                  continue;
                case 23:
                  attackPlan.AddParticipant(current1, turn, defendersTurn);
                  num7 = (int) num8 * -1160728947 ^ 1385640295;
                  continue;
                case 24:
                  planetTurn3 = current2.Destination.CalcMaxGainUsingThisManyShips(current1, current2.DistanceInTurns, defendersTurn.NumShips + 5);
                  attackPlan.Enabled = true;
                  num7 = (int) num8 * -1555338702 ^ 292148346;
                  continue;
                case 25:
                  int num10 = !enabled ? 1256435528 : (num10 = 654366043);
                  num7 = num10 ^ (int) num8 * 147806221;
                  continue;
                case 26:
                  num7 = (int) num8 * 960401354 ^ -101043096;
                  continue;
                case 27:
                  attackPlan = new AttackPlan();
                  flag = current1.AttackForce > defendersTurn.NumShips;
                  num7 = (int) num8 * -1502349032 ^ -1427285506;
                  continue;
                case 28:
                  planetTurn1 = planetTurn3;
                  num7 = (int) num8 * 967813098 ^ -2130112593;
                  continue;
                case 29:
                  attackPlan.Enabled = defendersTurn != null && turn != null;
                  num7 = -390057060;
                  continue;
                case 30:
                  defendersTurn = current2.DestinationStateOnArrival;
                  num7 = (int) num8 * -1374703195 ^ 1633183951;
                  continue;
                case 31:
                  defendersTurn = defendersTurn.Next;
                  num7 = -975786573;
                  continue;
                case 32:
                  int num11 = defendersTurn.IsMine ? -758120767 : (num11 = -1597767460);
                  num7 = num11 ^ (int) num8 * -1225090057;
                  continue;
                case 33:
                  num7 = -870436818;
                  continue;
                case 34:
                  int num12 = attackPlan.Enabled ? -2098126411 : (num12 = -810526136);
                  num7 = num12 ^ (int) num8 * -565039998;
                  continue;
                case 35:
                  num7 = -1539903663;
                  continue;
                case 36:
                  int num13 = !flag ? -2013253197 : (num13 = -1864621482);
                  num7 = num13 ^ (int) num8 * 1592763683;
                  continue;
                case 37:
                  turn = turn.Next;
                  num7 = (int) num8 * 876067709 ^ -54609841;
                  continue;
                default:
                  goto label_66;
              }
              int num14;
              num7 = num14 = num9 == 0 ? -1525171675 : (num14 = -1417173157);
            }
          }
          finally
          {
            if (enumerator2 != null)
            {
label_61:
              int num15 = -2134219651;
              while (true)
              {
                uint num16;
                switch ((num16 = (uint) (num15 ^ -955018534)) % 4U)
                {
                  case 0:
                    goto label_61;
                  case 2:
                    num15 = (int) num16 * 1962464635 ^ 2131619541;
                    continue;
                  case 3:
                    Strategy_LastTry.\u200D‮⁫⁯‬⁮‎⁬‍⁯‪‍‏‌‮⁮‎⁭⁬‪⁭‪⁭‬‌⁮‎‍⁮‪‫‍⁬‭⁯⁫‮‭⁬‪‮((IDisposable) enumerator2);
                    num15 = (int) num16 * 934367515 ^ 1343068549;
                    continue;
                  default:
                    goto label_65;
                }
              }
            }
label_65:;
          }
label_66:;
        }
        else
          goto label_70;
label_67:
        int num17 = -491950441;
label_68:
        switch ((num4 = (uint) (num17 ^ -955018534)) % 3U)
        {
          case 1:
            goto label_69;
          case 2:
            goto label_67;
          default:
            goto label_76;
        }
label_70:
        num17 = -2102573128;
        goto label_68;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_72:
          int num18 = -2056414700;
          while (true)
          {
            uint num19;
            switch ((num19 = (uint) (num18 ^ -955018534)) % 3U)
            {
              case 1:
                Strategy_LastTry.\u200D‮⁫⁯‬⁮‎⁬‍⁯‪‍‏‌‮⁮‎⁭⁬‪⁭‪⁭‬‌⁮‎‍⁮‪‫‍⁬‭⁯⁫‮‭⁬‪‮((IDisposable) enumerator1);
                num18 = (int) num19 * 1797257549 ^ 788804740;
                continue;
              case 2:
                goto label_72;
              default:
                goto label_75;
            }
          }
        }
label_75:;
      }
label_76:
      IEnumerator<AttackPlan> enumerator3 = source.OrderBy<AttackPlan, double>((Func<AttackPlan, double>) (item => -item.Sweetness)).Take<AttackPlan>(10).GetEnumerator();
      try
      {
label_81:
        int num20 = Strategy_LastTry.\u200C⁯‌⁫⁭​⁭‍‎⁭‬​⁭⁯‭‮⁭​‮⁭‎​‭‮‪‮⁪⁫⁮‍⁯⁪⁬‪⁫‮‎‌⁬‮‮((IEnumerator) enumerator3) ? -1578519939 : (num20 = -9266985);
        while (true)
        {
          switch ((num4 = (uint) (num20 ^ -955018534)) % 4U)
          {
            case 0:
              goto label_81;
            case 2:
              num20 = -1578519939;
              continue;
            case 3:
              this.ExecutePlans(enumerator3.Current);
              num20 = -2109192078;
              continue;
            default:
              goto label_87;
          }
        }
      }
      finally
      {
        if (enumerator3 != null)
        {
label_83:
          int num21 = -824298452;
          while (true)
          {
            uint num22;
            switch ((num22 = (uint) (num21 ^ -955018534)) % 3U)
            {
              case 0:
                goto label_83;
              case 2:
                Strategy_LastTry.\u200D‮⁫⁯‬⁮‎⁬‍⁯‪‍‏‌‮⁮‎⁭⁬‪⁭‪⁭‬‌⁮‎‍⁮‪‫‍⁬‭⁯⁫‮‭⁬‪‮((IDisposable) enumerator3);
                num21 = (int) num22 * 283680490 ^ 567035447;
                continue;
              default:
                goto label_86;
            }
          }
        }
label_86:;
      }
label_87:
      Planet target1 = this.currentUniverse.Me.Planets.OrderBy<Planet, double>((Func<Planet, double>) (item => Universe.Center.Delta(item))).FirstOrDefault<Planet>();
      if (target1 == null)
        return;
      int num23 = 0;
      IEnumerator<Planet> enumerator4 = this.CanUseInAtttack().GetEnumerator();
      try
      {
label_99:
        int num24 = Strategy_LastTry.\u200C⁯‌⁫⁭​⁭‍‎⁭‬​⁭⁯‭‮⁭​‮⁭‎​‭‮‪‮⁪⁫⁮‍⁯⁪⁬‪⁫‮‎‌⁬‮‮((IEnumerator) enumerator4) ? -2023983601 : (num24 = -227846307);
        bool flag;
        Planet current;
        while (true)
        {
          uint num25;
          switch ((num25 = (uint) (num24 ^ -955018534)) % 10U)
          {
            case 0:
              num24 = -900440613;
              continue;
            case 1:
              this.currentUniverse.MakeMove(current, target1, Strategy_LastTry.\u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮(current.AttackForce, 2));
              num24 = (int) num25 * -1942304448 ^ 421377906;
              continue;
            case 2:
              num24 = (int) num25 * 828327500 ^ -649935320;
              continue;
            case 3:
              num24 = -2023983601;
              continue;
            case 4:
              int num26 = !flag ? -1490806444 : (num26 = -821673060);
              num24 = num26 ^ (int) num25 * 646909282;
              continue;
            case 6:
              flag = target1 != current;
              num24 = (int) num25 * 1384517265 ^ -1729881076;
              continue;
            case 7:
              goto label_99;
            case 8:
              ++num23;
              num24 = (int) num25 * 76184536 ^ -796414437;
              continue;
            case 9:
              current = enumerator4.Current;
              num24 = -2020336734;
              continue;
            default:
              goto label_107;
          }
        }
      }
      finally
      {
        if (enumerator4 != null)
        {
label_101:
          int num27 = -734490157;
          while (true)
          {
            uint num28;
            switch ((num28 = (uint) (num27 ^ -955018534)) % 4U)
            {
              case 0:
                goto label_101;
              case 1:
                Strategy_LastTry.\u200D‮⁫⁯‬⁮‎⁬‍⁯‪‍‏‌‮⁮‎⁭⁬‪⁭‪⁭‬‌⁮‎‍⁮‪‫‍⁬‭⁯⁫‮‭⁬‪‮((IDisposable) enumerator4);
                num27 = (int) num28 * -1807519734 ^ 1913087199;
                continue;
              case 3:
                num27 = (int) num28 * 1008628553 ^ -66486049;
                continue;
              default:
                goto label_106;
            }
          }
        }
label_106:;
      }
label_107:;
    }

    protected IEnumerable<Planet> OrderedListOfAttackedPlanets(int playerId)
    {
label_1:
      int num1 = 2093588490;
      IEnumerable<Planet> planets;
      int playerId1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 891406599)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -625412225 ^ -591451668;
            continue;
          case 1:
            num1 = (int) num2 * 141637722 ^ -1548129543;
            continue;
          case 2:
            goto label_1;
          case 3:
            playerId1 = playerId;
            num1 = (int) num2 * 675734037 ^ -1133187528;
            continue;
          case 5:
            planets = (IEnumerable<Planet>) this.currentUniverse.All.Planets.Where<Planet>((Func<Planet, bool>) (planet =>
            {
              if (!planet.IsUnderAttack)
                return false;
label_1:
              int num3 = 679481752;
              while (true)
              {
                uint num4;
                switch ((num4 = (uint) (num3 ^ 1173073172)) % 3U)
                {
                  case 0:
                    goto label_1;
                  case 1:
                    if (planet.Owner != playerId1)
                    {
                      num3 = (int) num4 * -1883457419 ^ 2110967583;
                      continue;
                    }
                    goto label_6;
                  default:
                    goto label_5;
                }
              }
label_5:
              return planet.WinningArmadaIsMine;
label_6:
              return true;
            })).OrderBy<Planet, int>((Func<Planet, int>) (planet => -planet.LastAttackTurn.TurnsFromNow));
            num1 = 2123559782;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return planets;
    }

    protected void DefendNeutralPlanets(int maxTurnLookahead)
    {
      IEnumerator<Planet> enumerator1 = this.OrderedListOfAttackedPlanets(0).GetEnumerator();
      try
      {
label_38:
        if (Strategy_LastTry.\u200C⁯‌⁫⁭​⁭‍‎⁭‬​⁭⁯‭‮⁭​‮⁭‎​‭‮‪‮⁪⁫⁮‍⁯⁪⁬‪⁫‮‎‌⁬‮‮((IEnumerator) enumerator1))
        {
label_8:
          Planet current1 = enumerator1.Current;
          int num1 = -206778099;
          AttackPlan attackPlan;
          while (true)
          {
            uint num2;
            bool flag1;
            bool flag2;
            int num3;
            switch ((num2 = (uint) (num1 ^ -560406731)) % 12U)
            {
              case 0:
                if (flag1)
                {
                  num1 = (int) num2 * 2145424370 ^ -380035602;
                  continue;
                }
                goto label_36;
              case 1:
                attackPlan = this.BuildDefensePlan(current1, maxTurnLookahead);
                flag1 = !current1.IsLost;
                num1 = (int) num2 * 1863597080 ^ -1229237687;
                continue;
              case 2:
                goto label_8;
              case 3:
                num1 = -225278621;
                continue;
              case 4:
                num3 = !current1.DoesNotChangeOwner ? 1 : 0;
                goto label_14;
              case 5:
                if (flag2)
                {
                  num1 = (int) num2 * 1732700692 ^ 203388519;
                  continue;
                }
                goto label_35;
              case 6:
                num1 = (int) num2 * -804942688 ^ 1973686996;
                continue;
              case 7:
                num1 = (int) num2 * -1216518128 ^ 1017108256;
                continue;
              case 8:
                num1 = (int) num2 * -2132623116 ^ 973998155;
                continue;
              case 10:
                if (current1.IsUnderAttack)
                {
                  num1 = (int) num2 * 1008860398 ^ -840967802;
                  continue;
                }
                break;
              case 11:
                if (!current1.WinningArmadaIsMine)
                {
                  num1 = (int) num2 * -1530866028 ^ 1294694981;
                  continue;
                }
                break;
              default:
                goto label_20;
            }
            num3 = 0;
label_14:
            flag2 = num3 != 0;
            num1 = -1947553596;
          }
label_20:
          List<AttackPlanParticipant>.Enumerator enumerator2 = attackPlan.Participants.GetEnumerator();
          try
          {
label_26:
            int num4 = enumerator2.MoveNext() ? -5714229 : (num4 = -1098440413);
            while (true)
            {
              uint num5;
              switch ((num5 = (uint) (num4 ^ -560406731)) % 5U)
              {
                case 0:
                  goto label_26;
                case 1:
                  num4 = (int) num5 * 652514206 ^ 612186072;
                  continue;
                case 2:
                  AttackPlanParticipant current2 = enumerator2.Current;
                  this.currentUniverse.MakeMove(current2.Source, attackPlan.Target, current2.Source.AttackForce);
                  num4 = -1656430736;
                  continue;
                case 4:
                  num4 = -5714229;
                  continue;
                default:
                  goto label_32;
              }
            }
          }
          finally
          {
            enumerator2.Dispose();
label_28:
            int num6 = -1570791954;
            while (true)
            {
              uint num7;
              switch ((num7 = (uint) (num6 ^ -560406731)) % 3U)
              {
                case 0:
                  goto label_28;
                case 2:
                  num6 = (int) num7 * -10059413 ^ -1461897767;
                  continue;
                default:
                  goto label_31;
              }
            }
label_31:;
          }
label_32:
          current1.AttackMovesAllowed = false;
        }
        else
          goto label_39;
label_33:
        int num8 = -1053606428;
label_34:
        while (true)
        {
          uint num9;
          switch ((num9 = (uint) (num8 ^ -560406731)) % 6U)
          {
            case 0:
              goto label_36;
            case 1:
              num8 = (int) num9 * 818023644 ^ -843443041;
              continue;
            case 2:
              goto label_35;
            case 3:
              goto label_44;
            case 4:
              goto label_38;
            case 5:
              goto label_33;
            default:
              goto label_40;
          }
        }
label_44:
        return;
label_40:
        return;
label_35:
        num8 = -1407192183;
        goto label_34;
label_36:
        num8 = -1915304001;
        goto label_34;
label_39:
        num8 = -62087362;
        goto label_34;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_42:
          int num10 = -178807408;
          while (true)
          {
            uint num11;
            switch ((num11 = (uint) (num10 ^ -560406731)) % 3U)
            {
              case 0:
                goto label_42;
              case 1:
                Strategy_LastTry.\u200D‮⁫⁯‬⁮‎⁬‍⁯‪‍‏‌‮⁮‎⁭⁬‪⁭‪⁭‬‌⁮‎‍⁮‪‫‍⁬‭⁯⁫‮‭⁬‪‮((IDisposable) enumerator1);
                num10 = (int) num11 * 788382649 ^ -571401324;
                continue;
              default:
                goto label_46;
            }
          }
        }
label_46:;
      }
    }

    protected void DefendOnwedPlanets()
    {
label_1:
      int num1 = 1264310450;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1380719835)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1596687588 ^ -770922450;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      IEnumerator<Planet> enumerator1 = this.OrderedListOfAttackedPlanets(1).GetEnumerator();
      try
      {
label_75:
        if (Strategy_LastTry.\u200C⁯‌⁫⁭​⁭‍‎⁭‬​⁭⁯‭‮⁭​‮⁭‎​‭‮‪‮⁪⁫⁮‍⁯⁪⁬‪⁫‮‎‌⁬‮‮((IEnumerator) enumerator1))
        {
label_17:
          Planet current1 = enumerator1.Current;
          int num3 = 1427370085;
          AttackPlan attackPlan;
          while (true)
          {
            uint num4;
            bool isLost;
            bool flag;
            int num5;
            switch ((num4 = (uint) (num3 ^ 1380719835)) % 11U)
            {
              case 0:
                if (isLost)
                {
                  num3 = (int) num4 * -213695506 ^ -652749257;
                  continue;
                }
                goto label_50;
              case 1:
                num5 = !current1.WinningArmadaIsMine ? 1 : 0;
                break;
              case 2:
                attackPlan = this.BuildDefensePlan(current1, 1000);
                num3 = (int) num4 * -190296150 ^ 515307541;
                continue;
              case 4:
                num3 = (int) num4 * 395798981 ^ -683743375;
                continue;
              case 5:
                if (!current1.IsUnderAttack)
                {
                  num5 = 0;
                  break;
                }
                num3 = (int) num4 * 584804011 ^ -1085179175;
                continue;
              case 6:
                num3 = (int) num4 * 759644259 ^ -2122913904;
                continue;
              case 7:
                num3 = 668490263;
                continue;
              case 8:
                isLost = current1.IsLost;
                num3 = (int) num4 * 1492123877 ^ -443278949;
                continue;
              case 9:
                if (flag)
                {
                  num3 = (int) num4 * 671088305 ^ -1395977859;
                  continue;
                }
                goto label_74;
              case 10:
                goto label_17;
              default:
                goto label_22;
            }
            flag = num5 != 0;
            num3 = 1810604378;
          }
label_22:
          using (List<Route>.Enumerator enumerator2 = current1.Routes.GetEnumerator())
          {
label_41:
            int num6 = enumerator2.MoveNext() ? 702246690 : (num6 = 1002372216);
            while (true)
            {
              uint num7;
              Route current2;
              Planet destination;
              int num8;
              switch ((num7 = (uint) (num6 ^ 1380719835)) % 16U)
              {
                case 0:
                  num8 = destination.MaxDesertersAllowed < current1.NumShips ? 1 : 0;
                  break;
                case 1:
                  this.currentUniverse.MakeMove(current1, destination, current1.NumShips);
                  num6 = (int) num7 * 374196408 ^ -706094789;
                  continue;
                case 2:
                  num6 = 478992261;
                  continue;
                case 4:
                  num6 = (int) num7 * -57015666 ^ 1778670382;
                  continue;
                case 5:
                  num6 = 702246690;
                  continue;
                case 6:
                  num6 = 1148512204;
                  continue;
                case 7:
                  goto label_41;
                case 8:
                  num6 = (int) num7 * -189285201 ^ 869438672;
                  continue;
                case 9:
                  current2 = enumerator2.Current;
                  num6 = 97600656;
                  continue;
                case 10:
                  num6 = (int) num7 * -1003720701 ^ 917894884;
                  continue;
                case 11:
                  int num9 = current2.DistanceInTurns <= current1.LastAttackTurn.TurnsFromNow ? -1255875264 : (num9 = -1547378069);
                  num6 = num9 ^ (int) num7 * -981681427;
                  continue;
                case 12:
                  num6 = (int) num7 * -1491626515 ^ -106352380;
                  continue;
                case 13:
                  destination = current2.Destination;
                  if (destination.IsNeutral)
                  {
                    num6 = (int) num7 * 2089433733 ^ -27700710;
                    continue;
                  }
                  num8 = 0;
                  break;
                case 14:
                  num6 = (int) num7 * 1696129521 ^ -161909325;
                  continue;
                case 15:
                  num6 = 867241783;
                  continue;
                default:
                  goto label_44;
              }
              int num10;
              num6 = num10 = num8 == 0 ? 1196236649 : (num10 = 434658337);
            }
          }
label_44:
          bool flag1 = current1.GrowthRate > 2;
label_45:
          int num11 = 1406835824;
label_46:
          while (true)
          {
            uint num12;
            switch ((num12 = (uint) (num11 ^ 1380719835)) % 10U)
            {
              case 0:
                num11 = 52655759;
                continue;
              case 1:
                this.currentUniverse.AddToWishList(current1);
                num11 = (int) num12 * -1284665180 ^ 485379372;
                continue;
              case 2:
                goto label_77;
              case 3:
                num11 = (int) num12 * 373735122 ^ 480651654;
                continue;
              case 4:
                num11 = (int) num12 * -1788808523 ^ 2019402586;
                continue;
              case 5:
                int num13 = !flag1 ? -379580093 : (num13 = -1238465443);
                num11 = num13 ^ (int) num12 * 754675786;
                continue;
              case 6:
                goto label_45;
              case 7:
                goto label_50;
              case 9:
                num11 = (int) num12 * 145227962 ^ -670680877;
                continue;
              default:
                goto label_54;
            }
          }
label_54:
          List<AttackPlanParticipant>.Enumerator enumerator3 = attackPlan.Participants.GetEnumerator();
          try
          {
label_63:
            int num14 = enumerator3.MoveNext() ? 163398461 : (num14 = 2104053207);
            AttackPlanParticipant current3;
            while (true)
            {
              uint num15;
              switch ((num15 = (uint) (num14 ^ 1380719835)) % 8U)
              {
                case 0:
                  num14 = 163398461;
                  continue;
                case 1:
                  current3.Source.AttackMovesAllowed = false;
                  num14 = (int) num15 * 463820489 ^ -1432934487;
                  continue;
                case 2:
                  goto label_63;
                case 3:
                  current3.Source.CreateTurnPredictions();
                  num14 = (int) num15 * -754414185 ^ -671239343;
                  continue;
                case 5:
                  this.currentUniverse.MakeMove(current3.Source, attackPlan.Target, current3.Source.AttackForce);
                  num14 = (int) num15 * 445287794 ^ 172596432;
                  continue;
                case 6:
                  current3 = enumerator3.Current;
                  num14 = 1187348062;
                  continue;
                case 7:
                  num14 = (int) num15 * -957649791 ^ -1447882546;
                  continue;
                default:
                  goto label_69;
              }
            }
          }
          finally
          {
            enumerator3.Dispose();
label_65:
            int num16 = 974526453;
            while (true)
            {
              uint num17;
              switch ((num17 = (uint) (num16 ^ 1380719835)) % 3U)
              {
                case 0:
                  goto label_65;
                case 2:
                  num16 = (int) num17 * -1218677254 ^ -1174140091;
                  continue;
                default:
                  goto label_68;
              }
            }
label_68:;
          }
label_69:
          current1.AttackMovesAllowed = false;
          current1.CreateTurnPredictions();
          goto label_70;
label_50:
          num11 = 1376241445;
          goto label_46;
        }
        else
          goto label_76;
label_70:
        int num18 = 1250431295;
label_71:
        while (true)
        {
          uint num19;
          switch ((num19 = (uint) (num18 ^ 1380719835)) % 8U)
          {
            case 0:
              goto label_75;
            case 1:
              goto label_74;
            case 2:
              goto label_70;
            case 3:
              num18 = 2043495195;
              continue;
            case 4:
              goto label_77;
            case 5:
              num18 = (int) num19 * 1185319022 ^ -1364911234;
              continue;
            case 6:
              num18 = (int) num19 * -1377972727 ^ 2136185918;
              continue;
            case 7:
              goto label_83;
            default:
              goto label_79;
          }
        }
label_83:
        return;
label_79:
        return;
label_74:
        num18 = 1956856454;
        goto label_71;
label_76:
        num18 = 1060262652;
        goto label_71;
label_77:
        num18 = 1779671133;
        goto label_71;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_81:
          int num20 = 1736818062;
          while (true)
          {
            uint num21;
            switch ((num21 = (uint) (num20 ^ 1380719835)) % 3U)
            {
              case 0:
                goto label_81;
              case 2:
                Strategy_LastTry.\u200D‮⁫⁯‬⁮‎⁬‍⁯‪‍‏‌‮⁮‎⁭⁬‪⁭‪⁭‬‌⁮‎‍⁮‪‫‍⁬‭⁯⁫‮‭⁬‪‮((IDisposable) enumerator1);
                num20 = (int) num21 * -995084410 ^ 504423707;
                continue;
              default:
                goto label_85;
            }
          }
        }
label_85:;
      }
    }

    private AttackPlan BuildDefensePlan(Planet planetUnderAttack, int maxTurnLookAhead)
    {
label_1:
      int num1 = 97473728;
      bool winningArmadaIsMine;
      PlanetTurn firstTurn;
      int num2;
      int num3;
      int growthRate;
      AttackPlan attackPlan1;
      int turnsFromNow;
      AttackPlan attackPlan2;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ 590931796)) % 29U)
        {
          case 0:
            num1 = (int) num4 * -810331625 ^ 1319382048;
            continue;
          case 1:
            num2 = 25;
            num1 = 1869948708;
            continue;
          case 2:
            growthRate = planetUnderAttack.GrowthRate;
            num1 = (int) num4 * -837774239 ^ 852098564;
            continue;
          case 4:
            num1 = (int) num4 * 536016590 ^ 1538329349;
            continue;
          case 5:
            attackPlan1.Target = planetUnderAttack;
            attackPlan1.Reason = "Defense";
            num1 = (int) num4 * 1803503171 ^ -389755636;
            continue;
          case 6:
            int num5 = winningArmadaIsMine ? -2032482366 : (num5 = -319317235);
            num1 = num5 ^ (int) num4 * 1257971336;
            continue;
          case 7:
            int num6 = firstTurn == null ? 810211831 : (num6 = 1041275329);
            num1 = num6 ^ (int) num4 * -1981631869;
            continue;
          case 8:
            num1 = (int) num4 * 418544401 ^ 586101415;
            continue;
          case 9:
            num1 = (int) num4 * -88146020 ^ -1391461702;
            continue;
          case 10:
            planetUnderAttack.IsLost = !planetUnderAttack.WinningArmadaIsMine;
            firstTurn = planetUnderAttack.TurnPrediction.FirstTurn;
            num1 = (int) num4 * 959326817 ^ 1985114030;
            continue;
          case 11:
            attackPlan1 = new AttackPlan();
            num1 = (int) num4 * -886899850 ^ 407389383;
            continue;
          case 12:
            firstTurn = planetUnderAttack.TurnPrediction.FirstTurn;
            num1 = 899328815;
            continue;
          case 13:
            num1 = (int) num4 * -1109467719 ^ 239752548;
            continue;
          case 14:
label_11:
            num2 = 10;
            num1 = 1053257891;
            continue;
          case 15:
            num3 = planetUnderAttack.TurnPrediction[firstTurn.TurnsFromNow + 1].NumShips + 1;
            num1 = 1485543939;
            continue;
          case 16:
            num1 = (int) num4 * -2120788936 ^ 1414037950;
            continue;
          case 17:
            num1 = (int) num4 * -877507918 ^ 235384038;
            continue;
          case 18:
            num3 = 0;
            num1 = (int) num4 * 1694012835 ^ -2094285621;
            continue;
          case 19:
            winningArmadaIsMine = planetUnderAttack.WinningArmadaIsMine;
            num1 = (int) num4 * -646994719 ^ 1139884272;
            continue;
          case 20:
label_18:
            num2 = 5;
            num1 = 988355526;
            continue;
          case 21:
            attackPlan2 = attackPlan1;
            num1 = (int) num4 * 1840525236 ^ -920364859;
            continue;
          case 22:
            goto label_1;
          case 23:
            goto label_93;
          case 24:
            turnsFromNow = firstTurn.TurnsFromNow;
            num1 = 1550540820;
            continue;
          case 25:
            num1 = (int) num4 * -207379803 ^ -18642590;
            continue;
          case 26:
label_14:
            num2 = 15;
            num1 = 680741752;
            continue;
          case 27:
            switch (growthRate)
            {
              case 0:
              case 1:
                goto label_18;
              case 2:
                goto label_11;
              case 3:
              case 4:
                goto label_14;
              default:
                num1 = (int) num4 * 2033623886 ^ 1843257113;
                continue;
            }
          case 28:
            num3 = firstTurn.NumShips;
            num1 = (int) num4 * -1662451011 ^ -1931506601;
            continue;
          default:
            goto label_30;
        }
      }
label_30:
      List<Route>.Enumerator enumerator = planetUnderAttack.Routes.GetEnumerator();
      try
      {
label_72:
        int num7 = enumerator.MoveNext() ? 1619942595 : (num7 = 1723318906);
        while (true)
        {
          uint num8;
          Planet destination;
          bool doesNotChangeOwner;
          Route current;
          int num9;
          int num10;
          bool flag1;
          int num11;
          int index;
          bool flag2;
          bool flag3;
          bool flag4;
          bool flag5;
          int num12;
          switch ((num8 = (uint) (num7 ^ 590931796)) % 40U)
          {
            case 0:
              num7 = 51952894;
              continue;
            case 1:
              flag3 = destination.NumShips > 0;
              num7 = (int) num8 * -1278717318 ^ 735088275;
              continue;
            case 2:
              num7 = 1553592938;
              continue;
            case 3:
              num7 = (int) num8 * -858887925 ^ 2065796562;
              continue;
            case 4:
              num7 = (int) num8 * 1846836215 ^ 192683929;
              continue;
            case 5:
              int num13 = !flag3 ? -470040669 : (num13 = -387506013);
              num7 = num13 ^ (int) num8 * 521204151;
              continue;
            case 6:
              num7 = 2057212967;
              continue;
            case 7:
              current = enumerator.Current;
              flag5 = current.DistanceInTurns <= Strategy_LastTry.\u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮(maxTurnLookAhead, num2);
              num7 = 1741046244;
              continue;
            case 8:
              num11 = destination.TurnPrediction[index].NumShips;
              num7 = (int) num8 * -20396201 ^ -188768006;
              continue;
            case 9:
              num7 = (int) num8 * 298974892 ^ 1476438933;
              continue;
            case 10:
              num7 = 1264992230;
              continue;
            case 11:
              num7 = 1619942595;
              continue;
            case 12:
              int num14 = flag4 ? -1799924207 : (num14 = -567576894);
              num7 = num14 ^ (int) num8 * 907996486;
              continue;
            case 13:
              flag4 = num3 > -1;
              num7 = (int) num8 * 1606010473 ^ -39143179;
              continue;
            case 14:
              num7 = 1089229670;
              continue;
            case 15:
              index = Strategy_LastTry.\u206F‪⁬⁬⁪⁯‭‌‮⁯‫⁮⁯​​⁭‎‭‬‎⁪​‭​‭‬‫‮⁬⁫‭‭​‬​‍⁫‭‬‎‮(turnsFromNow - num9, 0);
              num7 = (int) num8 * 914382267 ^ -1094625847;
              continue;
            case 16:
              int num15 = !doesNotChangeOwner ? 577604339 : (num15 = 957755300);
              num7 = num15 ^ (int) num8 * 1185764344;
              continue;
            case 17:
              num7 = (int) num8 * -1395729244 ^ -1236342725;
              continue;
            case 18:
              int num16 = !flag2 ? -1890483128 : (num16 = -819892856);
              num7 = num16 ^ (int) num8 * -121024125;
              continue;
            case 19:
              num7 = (int) num8 * -1754821462 ^ 915187060;
              continue;
            case 20:
              num7 = 1141253836;
              continue;
            case 21:
              num9 = current.DistanceInTurns - 1;
              int num17 = num9 <= turnsFromNow + 1 ? 204585963 : (num17 = 253371606);
              num7 = num17 ^ (int) num8 * 1117960392;
              continue;
            case 22:
              destination = current.Destination;
              if (destination.IsMine)
              {
                num7 = (int) num8 * -661062283 ^ -1192048626;
                continue;
              }
              num12 = 0;
              break;
            case 23:
              num7 = (int) num8 * -1055968983 ^ 1885013312;
              continue;
            case 24:
              int num18 = flag5 ? 1979883450 : (num18 = 1218590746);
              num7 = num18 ^ (int) num8 * -1365852747;
              continue;
            case 25:
              int num19 = !flag1 ? -1199835189 : (num19 = -81767384);
              num7 = num19 ^ (int) num8 * 1616859071;
              continue;
            case 26:
              int scheduledTurn1 = Strategy_LastTry.\u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮(Strategy_LastTry.\u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮(destination.AttackForce, destination.NumShips), num10);
              attackPlan1.AddParticipant(destination, (PlanetTurn) null, scheduledTurn1);
              num7 = (int) num8 * 710284741 ^ 1531474551;
              continue;
            case 27:
              num11 = destination.AttackForce;
              num7 = (int) num8 * -1307919749 ^ 669327601;
              continue;
            case 28:
              num12 = planetUnderAttack.PlanetID != destination.PlanetID ? 1 : 0;
              break;
            case 29:
              num7 = 1115496376;
              continue;
            case 31:
              num10 = num3;
              num3 -= num11;
              num7 = (int) num8 * 1242578459 ^ 868218624;
              continue;
            case 32:
              num7 = (int) num8 * -411957845 ^ 2107356435;
              continue;
            case 33:
              attackPlan1.Enabled = true;
              num7 = (int) num8 * 1795839096 ^ -934234839;
              continue;
            case 34:
              num7 = (int) num8 * -2091794159 ^ 1760782603;
              continue;
            case 35:
              goto label_72;
            case 36:
              doesNotChangeOwner = destination.DoesNotChangeOwner;
              num7 = (int) num8 * -1924880292 ^ 1078011020;
              continue;
            case 37:
              int scheduledTurn2 = Strategy_LastTry.\u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮(destination.AttackForce, destination.NumShips);
              attackPlan1.AddParticipant(destination, (PlanetTurn) null, scheduledTurn2);
              num7 = (int) num8 * -1607905794 ^ -2086119917;
              continue;
            case 38:
              num7 = (int) num8 * 863399399 ^ -731615647;
              continue;
            case 39:
              flag1 = num11 > 0;
              num7 = 781596653;
              continue;
            default:
              goto label_80;
          }
          flag2 = num12 != 0;
          num7 = 1783663470;
        }
      }
      finally
      {
        enumerator.Dispose();
label_76:
        int num20 = 56273404;
        while (true)
        {
          uint num21;
          switch ((num21 = (uint) (num20 ^ 590931796)) % 3U)
          {
            case 0:
              goto label_76;
            case 1:
              num20 = (int) num21 * 1088172403 ^ -1470156627;
              continue;
            default:
              goto label_79;
          }
        }
label_79:;
      }
label_80:
      if (num3 >= 0)
        goto label_83;
label_81:
      int num22 = 746727378;
label_82:
      bool isLost;
      while (true)
      {
        uint num23;
        switch ((num23 = (uint) (num22 ^ 590931796)) % 12U)
        {
          case 0:
            goto label_81;
          case 1:
            attackPlan2 = attackPlan1;
            num22 = 919288607;
            continue;
          case 2:
            num22 = (int) num23 * 425653000 ^ -367590060;
            continue;
          case 3:
            num22 = (int) num23 * -1804765219 ^ 1005723006;
            continue;
          case 4:
            int num24 = isLost ? -1430268598 : (num24 = -780033307);
            num22 = num24 ^ (int) num23 * 1630123654;
            continue;
          case 5:
            goto label_83;
          case 6:
            num22 = (int) num23 * -379229238 ^ -290953691;
            continue;
          case 7:
            num22 = (int) num23 * -1203766241 ^ -477513813;
            continue;
          case 8:
            planetUnderAttack.DoesNotChangeOwner = true;
            num22 = (int) num23 * 622489413 ^ 624095895;
            continue;
          case 9:
            attackPlan1.Participants.Clear();
            num22 = (int) num23 * -1389499781 ^ 766259628;
            continue;
          case 11:
            planetUnderAttack.AttackMovesAllowed = false;
            planetUnderAttack.IsLost = false;
            num22 = (int) num23 * -645610071 ^ 1265881774;
            continue;
          default:
            goto label_93;
        }
      }
label_83:
      isLost = planetUnderAttack.IsLost;
      num22 = 288862420;
      goto label_82;
label_93:
      return attackPlan2;
    }

    public Strategy_LastTry()
    {
label_1:
      int num1 = 1656056913;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 751666672)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1311178693 ^ -1844079967;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static int \u206E‭⁫‎‮‌‪‪‫⁮⁭‏⁭​‪​‍⁬‪‍⁪‭‪⁬‬‪⁫‮‏‏‪‌⁫⁪‬‌‍‬⁫⁮‮([In] int obj0, [In] int obj1) => Math.Min(obj0, obj1);

    static bool \u200C⁯‌⁫⁭​⁭‍‎⁭‬​⁭⁯‭‮⁭​‮⁭‎​‭‮‪‮⁪⁫⁮‍⁯⁪⁬‪⁫‮‎‌⁬‮‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u200D‮⁫⁯‬⁮‎⁬‍⁯‪‍‏‌‮⁮‎⁭⁬‪⁭‪⁭‬‌⁮‎‍⁮‪‫‍⁬‭⁯⁫‮‭⁬‪‮([In] IDisposable obj0) => obj0.Dispose();

    static int \u206F‪⁬⁬⁪⁯‭‌‮⁯‫⁮⁯​​⁭‎‭‬‎⁪​‭​‭‬‫‮⁬⁫‭‭​‬​‍⁫‭‬‎‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static Random \u206B‮⁬⁮‮⁭‬​⁭⁯‮‎‎⁪⁭⁬‫⁯‎‬⁮‭⁪⁯‫‬‏‍⁯⁯⁮‪⁯⁯⁬⁭‭‍‪⁫‮() => new Random();
  }
}
