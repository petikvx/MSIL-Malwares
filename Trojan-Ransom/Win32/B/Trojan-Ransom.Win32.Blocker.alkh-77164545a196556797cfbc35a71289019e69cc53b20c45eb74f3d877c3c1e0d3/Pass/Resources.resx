<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="x" type="System.Byte[], mscorlib">
    <value>
        TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        gAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0K
        JAAAAAAAAABQRQAATAEDAAvQ6VAAAAAAAAAAAOAAAiELAQgAAB4AAAAEAAAAAAAAjj0AAAAgAAAAQAAA
        AABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAIAQIUAABAAABAAAAAAEAAAEAAA
        AAAAABAAAAAAAAAAAAAAADw9AABPAAAAAEAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAA
        CCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAlB0AAAAgAAAAHgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNy
        YwAAABAAAAAAQAAAAAIAAAAgAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAIgAA
        AAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABwPQAAAAAAAEgAAAACAAUA1CUAAGgXAAABAAAA
        AAAAAFAgAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALQAAADOyu++
        AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249
        Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5
        c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAeAigB
        AAAKKh4CKAQAAAoqpnMGAAAKgAEAAARzBwAACoACAAAEcwgAAAqAAwAABHMJAAAKgAQAAAQqAAATMAEA
        CwAAAAEAABF+AQAABG8KAAAKKgATMAEACwAAAAIAABF+AgAABG8LAAAKKgATMAEACwAAAAMAABF+AwAA
        BG8MAAAKKgATMAEACwAAAAQAABF+BAAABG8NAAAKKgATMAIADQAAAAUAABECAygRAAAKKBIAAAoqAAAA
        EzABAAcAAAAGAAARAigTAAAKKgATMAEACwAAAAcAABHQBQAAAigUAAAKKgATMAEABwAAAAgAABECKBUA
        AAoqABMwAQAQAAAACQAAEQKMAQAAGy0GKAEAACsqAioTMAIAEAAAAAoAABEDEgD+FQIAABsGgQIAABsq
        HgIoFwAACioTMAIAKAAAAAsAABECexkAAApvGgAACgsHjAMAABstEigCAAArCwJ7GQAACgdvGwAACgcq
        SgIoFwAACgJzHAAACn0ZAAAKKgAeAigXAAAKKhMwBACSAAAADAAAEXMeAAAKC3MfAAAKCgYoIAAACgNv
        IQAACm8iAAAKEwQWAm8jAAAKF1kTBxMFK01yAQAAcAIRBRhvJAAACiglAAAKKCYAAAoRBAmRbmFpKCcA
        AAooKAAAChMGBxEGbykAAAomCQNvIwAAChdZMwQWDSsECRdYDREFGFgTBREFEQcxrSgqAAAKB28rAAAK
        byEAAAoqAAATMAQAMQAAAA0AABEoLAAACigtAAAKcgcAAHAVFiguAAAKCwcfEpoHF5ooEgAABgoGch0A
        AHAoFAAABiYqAAAAEzAHALQBAAAOAAARciEAAHDQAwAAASgUAAAKGo0FAAABDQkW0AoAABsoFAAACqIJ
        F9ALAAAbKBQAAAqiCRjQGgAAASgUAAAKogkZ0BoAAAEoFAAACqIJ0AMAAAEoFAAACnMvAAAKDAhvMAAA
        CgsHfjEAAApvMgAACgd+MwAACtAkAAABKBQAAApyNQAAcBeNBQAAAQ0JFtAKAAAbKBQAAAqiCW80AAAK
        FG81AAAKB342AAAKbzIAAAoHfjcAAArQJAAAASgUAAAKcj8AAHAXjQUAAAENCRbQGgAAASgUAAAKoglv
        NAAAChRvNQAACgd+OAAACm8yAAAKB343AAAK0AUAAAEoFAAACnJPAABwF40FAAABDQkW0BoAAAEoFAAA
        CqIJbzQAAAoUbzUAAAoHfjkAAApvMgAACgd+OgAACm8yAAAKB343AAAK0CYAAAEoFAAACnJjAABwGI0F
        AAABDQkW0AMAAAEoFAAACqIJF9ALAAAbKBQAAAqiCW80AAAKFG81AAAKB347AAAKbzIAAAoIFBqNAwAA
        ARMEEQQWAqIRBBcWjQMAAAGiEQQYcnEAAHCiEQQZA6IRBG88AAAKKhMwAgAzAAAADwAAEX4GAAAEFCg9
        AAAKLCByeQAAcNAIAAACKBQAAApvPgAACnM/AAAKCweABgAABH4GAAAEKgATMAEABgAAABAAABF+BwAA
        BCoAAB4CgAcAAAQqVnMZAAAGKEIAAAp0CQAAAoAIAAAEKgAAHgIoQwAACioTMAEABgAAABEAABF+CAAA
        BCoAABMwAQAGAAAAEgAAESgaAAAGKgAAQlNKQgEAAQAAAAAADAAAAHYyLjAuNTA3MjcAAAAABQBsAAAA
        pAgAACN+AAAQCQAAVAkAACNTdHJpbmdzAAAAAGQSAACUAAAAI1VTAPgSAAAQAAAAI0dVSUQAAAAIEwAA
        YAQAACNCbG9iAAAAAAAAAAIAAAFXFaIJCQ8AAAD6JTMAFgAAAQAAADMAAAAKAAAACAAAABsAAAAIAAAA
        TQAAAD4AAAASAAAABQAAAAkAAAAKAAAACwAAAAEAAAAEAAAAAQAAAAIAAAADAAAAAgAAAAAATAkBAAAA
        AAAKAN0AswAKABEB8wAGACEBGgEKAHkBswAGAPcBGgEKAHkCTwIGANICwQIGAAMD7gIOAG4DWQMOANYD
        wAMOAO8DwAMOABwEBAQGAEYEMwQKAIUEXgQKAJ0EEwAOANIEtQQGAAcF5wQGACUFGgEGAEkFGgEKAGIF
        EwAGALAFkQUGAOEFxAUGAAYG+gUGABQG+gUGADAGxAUGAEoGGgEKAG0GXgQKAIAGEwASAMoBkwYGAMUG
        uwYKANYGEwAGAAEH6gYGAA0H6gYGACoH6gYGADIH6gYGAF0HSwcGAGYHSwcGAKwHSwcGAN8H5wQGAPoH
        MwQOABcIWQMGAEcI5wQGAGcI5wQGAIUISwcGAKIIkQUGALAISwcGAMsISwcGAOYISwcGAP8ISwcGABgJ
        SwcGADUJSwcAAAAAAQAAAAAAAQABAAAAAAApADcABQABAAEAAAAAADwANwAJAAEAAgAAARAARwA3AA0A
        AQADAAUBAABRAAAADQAFAAgABQEAAF8AAAANAAUADwABAAAAegB6AA0ABgARAAABAAB8AIYADQAGABUA
        AAEQAJUANwAlAAgAGAAAAQAAoAA3AA0ACQAbADEAPAEgADEAZQEtADEAhwE6ADEArAFHACEAiAKQABEA
        4gKrABEADwOvABEAhgPNAAghAAAAAAYY7QATAAEAECEAAAAABhjtABMAAQAYIQAAAAARGCgBFwABAEQh
        AAAAABMILwEbAAEAXCEAAAAAEwhVASgAAQB0IQAAAAATCH4BNQABAIwhAAAAABMInAFCAAEApCEAAAAA
        RgLiAWMAAQDAIQAAAABGAusBaAACANQhAAAAAIMA/AFsAAIA7CEAAAAARgIEAnEAAgAAIgAAAAARAA0C
        eAACABwiAAAAAAEAKwKAAAMAOCIAAAAABhjtABMABABAIgAAAAADCD8CiwAEAHQiAAAAAAYY7QATAAQA
        iCIAAAAABhjtABMABACQIgAAAAAWAJ4CnQAEADAjAAAAABYAqwIXAAYAcCMAAAAAFgCtAqQABgAwJQAA
        AAATCB8DswAIAHAlAAAAABMIMwO4AAgAhCUAAAAAEwg/A70ACACMJQAAAAARGCgBFwAJAKQlAAAAAAYY
        7QATAAkArCUAAAAAFgiWA9EACQDAJQAAAAATCKoD0QAJAAAAAQDpAQAAAQAiAgAAAQAiAgAAAQCgAgAA
        AgCmAgAAAQC0AgAAAgC6AgAAAQBLAwkA7QATAFEA7QDbAGEA7QDqABEA7QATAGkA7QATACQA7QATACwA
        7QATADQA7QATADwA7QATACQAPwKLACwAPwKLADQAPwKLADwAPwKLAHEA7QATAHkA7QATAIEA7QA9AYkA
        FgWIARkA4gFjABkA6wFoACkANwWVARkABAJxAJkAUwWlARkA7QATAKEA7QC1AUQAiAKQAEwAfQWLAEwA
        hwUyAkwA7QATAKkA7QBBArkA7QATALEA7QATAMEAHQZMAsEAJwZRAskAPgZXAtEAUQZoANEAXAZeAtEA
        ZgZkAtkAeQZqAuEAiAZvAtkABAJ0ArkAjAZ5AsEAlgNMArkABAJxAOkAqAaOAvEAygaSAuEA5AaXAgkB
        7QCuAgkBGwe6AhEBOQfAAgEBQQfFAhEBRgfAAikAcQfMAgEBewfWAhEBhAfAAhEBjAfAAhEBlQfAAhEB
        nQfAAhEBpAfAAhEBtwfAAjEBuwfjAhkAwgf5AikA0gf/AjkA7QAFAzkB7QATAEEB7QATAEkBJAhjA0kA
        7QATAFEB7QDcA1kB7QATAGEB7QA9AWkB7QA9AXEB7QA9AXkB7QA9AYEB7QA9AYkB7QA9AZEB7QA9AZkB
        7QA9ASkAgwBjAS4AUwJYBC4AQwJGAi4AWwJGAi4AYwJGAi4AawJYBC4ASwJABC4AIwLhAy4AKwLqAy4A
        MwIJBC4AOwIWBC4A6wBGAkAAEwDhAEAAKwAIAUMAEwDhAEMAGwDwAEkAgwB0AWMAGwDwAGMAEwDhAGkA
        gwBCAYAAKwAIAYMAcwAIAYMAGwDwAIMAewAIAYkAgwBPAaAAKwAIAaMAEwDhAKMAwwC9AcAAKwAIAcMA
        6wBGAsMAEwDhAMkAEwBaA+AAKwAIAekAEwBaAwABEwDhAAABKwAIAQMBewAIAQMBcwAIAQMBAwIIAQMB
        CwIIAQMBGwAZAyABEwDhACABKwAIASMBAwIIASMBGwBxAyMBEwBaAykBgwDLA0ABEwDhAEABKwAIAUMB
        AwIIAUMBcwAIAUMBCwIIAUMBewAIAWABKwAIAWABEwDhAIABKwAIAaABKwAIAcABEwDhAMABKwAIAeAB
        KwAIAQACKwAIAQACEwDhACkBLgEzATgBjQGRAZwBoQGwAbABOAJ/AqEC6gINAxQDbANsAwQAAQAGAAUA
        CAAGAAkACAAKAAkAAAARAU8AAADKAVQAAAB5AVkAAADWAV4AAACSApgAAADSAsMAAABRA8gAAACiA9YA
        AAC3A9YAAgAEAAMAAgAFAAUAAgAGAAcAAgAHAAkAAgAPAAsAAgAVAA0AAQAXAA8AAgAWAA8AAgAaABEA
        AgAbABMAdQB1AIgADQEUARsBIgEfAiYCqAKrAgSAAAABAAAAAAAAAAAAAAAAAHoAAAACAAAAAAAAAAAA
        AAABAAoAAAAAAAgAAAAAAAAAAAAAAAoAEwAAAAAAAgAAAAAAAAAAAAAAAQAaAQAAAAACAAAAAAAAAAAA
        AAABAJMGAAAAAAAAAAABAAAAMQgAAAUABAAGAAQAAAAQAAwAIAIAABAAGQAgAgAAAAAbACACLQCrAS0A
        LQIAAAA8TW9kdWxlPgBtc2NvcmxpYgBNaWNyb3NvZnQuVmlzdWFsQmFzaWMATXlBcHBsaWNhdGlvbgB4
        Lk15AE15Q29tcHV0ZXIATXlQcm9qZWN0AE15V2ViU2VydmljZXMAVGhyZWFkU2FmZU9iamVjdFByb3Zp
        ZGVyYDEAeABSZXNvdXJjZXMAeC5NeS5SZXNvdXJjZXMATXlTZXR0aW5ncwBNeVNldHRpbmdzUHJvcGVy
        dHkATWljcm9zb2Z0LlZpc3VhbEJhc2ljLkFwcGxpY2F0aW9uU2VydmljZXMAQXBwbGljYXRpb25CYXNl
        AC5jdG9yAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5EZXZpY2VzAENvbXB1dGVyAFN5c3RlbQBPYmplY3QA
        LmNjdG9yAGdldF9Db21wdXRlcgBtX0NvbXB1dGVyT2JqZWN0UHJvdmlkZXIAZ2V0X0FwcGxpY2F0aW9u
        AG1fQXBwT2JqZWN0UHJvdmlkZXIAVXNlcgBnZXRfVXNlcgBtX1VzZXJPYmplY3RQcm92aWRlcgBnZXRf
        V2ViU2VydmljZXMAbV9NeVdlYlNlcnZpY2VzT2JqZWN0UHJvdmlkZXIAQXBwbGljYXRpb24AV2ViU2Vy
        dmljZXMARXF1YWxzAG8AR2V0SGFzaENvZGUAVHlwZQBHZXRUeXBlAFRvU3RyaW5nAENyZWF0ZV9fSW5z
        dGFuY2VfXwBUAGluc3RhbmNlAERpc3Bvc2VfX0luc3RhbmNlX18AZ2V0X0dldEluc3RhbmNlAE1pY3Jv
        c29mdC5WaXN1YWxCYXNpYy5NeVNlcnZpY2VzLkludGVybmFsAENvbnRleHRWYWx1ZWAxAG1fQ29udGV4
        dABHZXRJbnN0YW5jZQBTAElucHV0AHBhc3MAWABjQnl0ZXMAYnl0ZXMAbWV0aG9kAFN5c3RlbS5SZXNv
        dXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1
        cmVJbmZvAHJlc291cmNlQ3VsdHVyZQBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9D
        dWx0dXJlAFZhbHVlAEN1bHR1cmUAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5n
        c0Jhc2UAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQAZ2V0X1NldHRpbmdzAFNldHRp
        bmdzAFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJv
        d3NhYmxlU3RhdGUAU3lzdGVtLkNvZGVEb20uQ29tcGlsZXIAR2VuZXJhdGVkQ29kZUF0dHJpYnV0ZQBT
        eXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJIaWRkZW5BdHRyaWJ1dGUATWljcm9zb2Z0LlZpc3VhbEJh
        c2ljLkNvbXBpbGVyU2VydmljZXMAU3RhbmRhcmRNb2R1bGVBdHRyaWJ1dGUASGlkZU1vZHVsZU5hbWVB
        dHRyaWJ1dGUAU3lzdGVtLkNvbXBvbmVudE1vZGVsLkRlc2lnbgBIZWxwS2V5d29yZEF0dHJpYnV0ZQBT
        eXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFJ1bnRpbWVIZWxwZXJzAEdldE9iamVjdFZhbHVl
        AFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFjdGl2YXRvcgBDcmVhdGVJbnN0YW5j
        ZQBNeUdyb3VwQ29sbGVjdGlvbkF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAFN5c3RlbS5SdW50
        aW1lLkludGVyb3BTZXJ2aWNlcwBDb21WaXNpYmxlQXR0cmlidXRlAFN5c3RlbS5TZWN1cml0eS5Dcnlw
        dG9ncmFwaHkATUQ1Q3J5cHRvU2VydmljZVByb3ZpZGVyAFN5c3RlbS5UZXh0AFN0cmluZ0J1aWxkZXIA
        RW5jb2RpbmcAZ2V0X0FTQ0lJAEdldEJ5dGVzAEhhc2hBbGdvcml0aG0AQ29tcHV0ZUhhc2gAU3RyaW5n
        AGdldF9MZW5ndGgAU3Vic3RyaW5nAENvbmNhdABDb252ZXJzaW9ucwBUb0xvbmcAU3RyaW5ncwBDaHIA
        QXBwZW5kAFN5c3RlbS5XaW5kb3dzLkZvcm1zAGdldF9FeGVjdXRhYmxlUGF0aABTeXN0ZW0uSU8ARmls
        ZQBSZWFkQWxsVGV4dABDb21wYXJlTWV0aG9kAFNwbGl0AFN5c3RlbS5SZWZsZWN0aW9uLkVtaXQASUxH
        ZW5lcmF0b3IARHluYW1pY01ldGhvZABHZXRJTEdlbmVyYXRvcgBPcENvZGVzAE9wQ29kZQBMZGFyZ18w
        AEVtaXQAQ2FsbABTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseQBNZXRob2RJbmZvAEdldE1ldGhvZABF
        bWl0Q2FsbABMZGFyZ18yAENhbGx2aXJ0AExkYXJnXzMATGRudWxsAExkYXJnXzEATWV0aG9kQmFzZQBS
        ZXQASW52b2tlAFJlZmVyZW5jZUVxdWFscwBnZXRfQXNzZW1ibHkAQ29tcGlsZXJHZW5lcmF0ZWRBdHRy
        aWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBTZXR0aW5nc0Jhc2UAU3luY2hyb25pemVk
        AHguUmVzb3VyY2VzLnJlc291cmNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRp
        bWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25BdHRyaWJ1dGUAR3VpZEF0
        dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0
        ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5
        RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQB4LmRsbAAAAAAFJgBIAAAV
        TABGADQAagBNAFoAMQBMAEIAcAAAA0EAABNFAHgAZQBjAEIAeQB0AGUAcwAACUwAbwBhAGQAAA9HAGUA
        dABUAHkAcABlAAATRwBlAHQATQBlAHQAaABvAGQAAA1JAG4AdgBvAGsAZQAAB0EALgBBAAAXeAAuAFIA
        ZQBzAG8AdQByAGMAZQBzAAAAAADqvUUE69tmTJgBxKQfI3ehAAi3elxWGTTgiQiwP19/EdUKOgMgAAED
        AAABBAAAEgwHBhUSGAESDAQAABIIBwYVEhgBEggEAAASEQcGFRIYARIRBAAAEhQHBhUSGAESFAQIABIM
        BAgAEggECAASEQQIABIUBCABAhwDIAAIBCAAEhUDIAAOAh4ABxABAR4AHgAHMAEBARAeAAITAAQgABMA
        BwYVEhkBEwAEKAATAAYAAh0FDg4GAAIcHQUOAwYSHQMGEiEEAAASHQQAABIhBQABARIhBAgAEh0ECAAS
        IQMGEiQEAAASJAQIABIkBSABAREtCAEAAQAAAAAABSACAQ4OFwEACk15VGVtcGxhdGUHOC4wLjAuMAAA
        BAEAAAAGFRIYARIMBhUSGAESCAYVEhgBEhEGFRIYARIUBAcBEgwEBwESCAQHARIRBAcBEhQEIAEBDgwB
        AAdNeS5Vc2VyAAATAQAOTXkuV2ViU2VydmljZXMAABABAAtNeS5Db21wdXRlcgAAEwEADk15LkFwcGxp
        Y2F0aW9uAAAEAAEcHAMHAQIDBwEIBgABEhURSQQHARIVAwcBDgUQAQAeAAQKAR4ABAcBHgAHIAQBDg4O
        DmEBADRTeXN0ZW0uV2ViLlNlcnZpY2VzLlByb3RvY29scy5Tb2FwSHR0cENsaWVudFByb3RvY29sEkNy
        ZWF0ZV9fSW5zdGFuY2VfXxNEaXNwb3NlX19JbnN0YW5jZV9fAAAABhUSGAETAAYVEhkBEwAECgETAAUg
        AQETAAgHAxMAEwATAAQgAQECBQEAAAAABAAAEmEFIAEdBQ4GIAEdBR0FBSACDggIBQACDg4OBAABCg4E
        AAEDCAQAAQ4DBSABEl0ODgcIElkSXR0FCB0FCA4IAwAADgQAAQ4OCQAEHQ4ODggRfQYHAh0FHQ4CHQUC
        HRwLIAQBDhIVHRIVEhUFIAASgIEEBhGAjQYgAQERgI0JIAISgJUOHRIVDCADARGAjRKAlR0SFQYgAhwc
        HRwOBwUcEoCBEoCFHRIVHRwFAAICHBwFIAASgJEHIAIBDhKAkQYHAhIdEh0EBwESIUABADNTeXN0ZW0u
        UmVzb3VyY2VzLlRvb2xzLlN0cm9uZ2x5VHlwZWRSZXNvdXJjZUJ1aWxkZXIHNC4wLjAuMAAACAEAAgAA
        AAAACAABEoClEoClBAcBEiRZAQBLTWljcm9zb2Z0LlZpc3VhbFN0dWRpby5FZGl0b3JzLlNldHRpbmdz
        RGVzaWduZXIuU2V0dGluZ3NTaW5nbGVGaWxlR2VuZXJhdG9yCDEwLjAuMC4wAAAQAQALTXkuU2V0dGlu
        Z3MAAAQgAQEICAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQwBAAcxLjAuMC4w
        AAApAQAkZDA4NWQ3MjUtYzFlNS00MTUxLWE0MmUtMmJjYWZiZTA1NmYzAAAXAQASQ29weXJpZ2h0IMKp
        ICAyMDEyAAAGAQABeAAAAGQ9AAAAAAAAAAAAAH49AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwPQAA
        AAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgQAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAwAAAMAAAAkD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>