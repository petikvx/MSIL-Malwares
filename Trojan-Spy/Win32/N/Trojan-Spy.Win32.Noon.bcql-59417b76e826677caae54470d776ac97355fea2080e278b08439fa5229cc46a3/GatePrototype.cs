// Decompiled with JetBrains decompiler
// Type: mmxAH.GatePrototype
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.IO;

namespace mmxAH
{
  public class GatePrototype : Card
  {
    private byte owindex;
    private byte dsindex;
    private short ArchemLoc = -1;
    private GameEngine en;

    public GatePrototype(GameEngine eng)
    {
      this.en = eng;
      this.ID = this.en.gates.GetCountOfCards();
    }

    public byte GetOW() => this.owindex;

    public short GetArchemLoc() => this.ArchemLoc;

    public override string ToString() => "Gate to " + ((OWLoc) this.en.locs[(int) this.owindex]).GetDescripthionToGate() + " DS: " + this.en.ds.GetTitle(this.dsindex);

    public bool FromText(TextFileParser prs)
    {
      string token1 = prs.GetToken();
      int num;
      if (token1 == "" || (num = this.en.ows.Index(token1)) == -1)
        return false;
      this.owindex = (byte) num;
      string token2 = prs.GetToken();
      if (token2 == "" || (num = this.en.ds.GetIndex(token2)) == -1)
        return false;
      this.dsindex = (byte) num;
      return true;
    }

    public string GetShortDiscripthion() => this.en.sysstr.GetString(SSType.GateTo) + "  " + this.en.locs[(int) this.owindex].GetMoveToTitle();

    public string GetLongDiscripthion() => this.en.sysstr.GetString(SSType.GateTo) + "  " + ((OWLoc) this.en.locs[(int) this.owindex]).GetDescripthionToGate() + " " + this.en.sysstr.GetString(SSType.DS) + " : " + this.en.ds.GetTitle(this.dsindex);

    public string GetMediumDiscripthion() => this.en.sysstr.GetString(SSType.GateTo) + "  " + ((OWLoc) this.en.locs[(int) this.owindex]).GetShortDescripthionToGate() + " " + this.en.sysstr.GetString(SSType.DS) + " : " + this.en.ds.GetTitle(this.dsindex);

    public override void ToBin(BinaryWriter wr)
    {
      wr.Write(this.owindex);
      wr.Write(this.dsindex);
    }

    public override void FromBin(BinaryReader rd)
    {
      this.owindex = rd.ReadByte();
      this.dsindex = rd.ReadByte();
    }

    public void Open(short LocIndex, bool isPrint = true)
    {
      this.ArchemLoc = LocIndex;
      this.en.openGates.Add(this);
      if (!isPrint)
        return;
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.GateTo) + "  ");
      this.en.io.PrintToLog(this.en.locs[(int) this.owindex].GetTitle(), isBold: true);
      this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.GateOpenVerb));
      this.en.io.PrintToLog("  " + ((ArchemArea) this.en.locs[(int) this.ArchemLoc]).GetGateAndClueTitle() + ".", isItalic: true);
    }

    public void MoveTo(byte invnum, bool isDelayed)
    {
      this.en.ActiveInvistigators[(int) invnum].SetLocathion((short) this.owindex);
      this.en.ActiveInvistigators[(int) invnum].isCanMove = false;
      this.en.io.PrintToLog(this.en.ActiveInvistigators[(int) invnum].GetTitle(), isItalic: true);
      if (isDelayed)
      {
        this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.GateDrawn) + " ");
        this.en.io.PrintToLog(this.en.locs[(int) this.owindex].GetTitle() + ".  " + Environment.NewLine, isBold: true);
        this.en.ActiveInvistigators[(int) invnum].Delayed();
      }
      else
      {
        this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.PassThoughGate) + " ");
        this.en.io.PrintToLog(this.en.locs[(int) this.owindex].GetTitle() + ".  " + Environment.NewLine, isBold: true);
      }
    }

    public void ClosedCheck(short isLore)
    {
      short gateModif = ((OWLoc) this.en.locs[(int) this.owindex]).GetGateModif();
      byte gateDif = ((OWLoc) this.en.locs[(int) this.owindex]).GetGateDif();
      SkillTest skillTest = new SkillTest(this.en, isLore != (short) 1 ? SkillTestType.Fight : SkillTestType.Lore, gateModif, new FuncWithParam(this.ClosedAfterCheck), gateDif);
    }

    private void ClosedAfterCheck(short succeses)
    {
      if ((int) succeses >= (int) ((OWLoc) this.en.locs[(int) this.owindex]).GetGateDif())
      {
        short archemLoc = this.ArchemLoc;
        ((ArchemUnstableLoc) this.en.locs[(int) this.ArchemLoc]).CloseGate();
        ((ArchemUnstableLoc) this.en.locs[(int) archemLoc]).SealedChoose();
      }
      else
        this.en.clock.NextPlayer();
    }

    public void Close()
    {
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.GateTo) + " ");
      this.en.io.PrintToLog(this.en.locs[(int) this.owindex].GetMoveToTitle(), isBold: true);
      this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.GateClosedFact));
      this.en.status.ClosedGate();
      byte index1 = 0;
      while ((int) index1 < this.en.ActiveMonsters.Count)
      {
        MonsterIndivid activeMonster = this.en.ActiveMonsters[(int) index1];
        if ((int) activeMonster.GetDs() == (int) this.dsindex)
        {
          activeMonster.Discard(true);
          index1 = (byte) 0;
        }
        else
          ++index1;
      }
      byte index2 = 0;
      while ((int) index2 < this.en.Outscirts.Count)
      {
        MonsterIndivid outscirt = this.en.Outscirts[(int) index2];
        if ((int) outscirt.GetDs() == (int) this.dsindex)
        {
          index2 = (byte) 0;
          this.en.MonstersCup.Add(outscirt);
          this.en.Outscirts.Remove(outscirt);
          this.en.status.RemoveFromOut();
          this.en.io.PrintToLog(outscirt.GetTitle(), isBold: true, isItalic: true);
          this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.From) + "  ");
          this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.Outscirts), isItalic: true);
          this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.ReturnToTheCup) + Environment.NewLine);
        }
        else
          ++index2;
      }
      this.en.status.PrintMonserCountServer();
      this.en.status.PrintMonserCountInOutServer();
      this.ArchemLoc = (short) -1;
      this.en.openGates.Remove(this);
    }
  }
}
