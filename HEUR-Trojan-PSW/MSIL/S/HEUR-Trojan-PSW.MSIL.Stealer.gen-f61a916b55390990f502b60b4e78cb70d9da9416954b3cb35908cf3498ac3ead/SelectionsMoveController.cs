// Decompiled with JetBrains decompiler
// Type: SimpleVideoCutter.SelectionsMoveController
// Assembly: SimpleVideoCutter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC3F1699-ABA1-43FB-A799-9F64138760E7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f61a916b55390990f502b60b4e78cb70d9da9416954b3cb35908cf3498ac3ead.exe

using System;
using System.Windows.Forms;

namespace SimpleVideoCutter
{
  public class SelectionsMoveController
  {
    protected VideoCutterTimeline ctrl;
    protected Selections selections;
    protected int? indexDraggedStartOfSelection;
    protected int? indexDraggedEndOfSelection;

    protected bool DragInProgress => this.indexDraggedStartOfSelection.HasValue || this.indexDraggedEndOfSelection.HasValue;

    public SelectionsMoveController(VideoCutterTimeline ctrl, Selections selections)
    {
      this.ctrl = ctrl;
      this.selections = selections;
    }

    public bool IsDragInProgress() => this.DragInProgress;

    public void ProcessMouseMoveFrame(long newPos)
    {
      if (this.DragInProgress)
      {
        this.ctrl.Cursor = Cursors.SizeWE;
        if (this.indexDraggedStartOfSelection.HasValue)
        {
          this.selections.SetSelectionStart(this.indexDraggedStartOfSelection.Value, newPos);
        }
        else
        {
          if (!this.indexDraggedEndOfSelection.HasValue)
            return;
          this.selections.SetSelectionEnd(this.indexDraggedEndOfSelection.Value, newPos);
        }
      }
      else
      {
        int index1 = this.selections.AllSelections.FindIndex((Predicate<Selection>) (sel => this.IsInDragSizeByFrame(newPos, new long?(sel.Start))));
        int index2 = this.selections.AllSelections.FindIndex((Predicate<Selection>) (sel => this.IsInDragSizeByFrame(newPos, new long?(sel.End))));
        if (index1 >= 0 || index2 >= 0)
          this.ctrl.Cursor = Cursors.SizeWE;
      }
    }

    public void ProcessMouseLeaveFrame()
    {
      this.indexDraggedStartOfSelection = new int?();
      this.indexDraggedEndOfSelection = new int?();
    }

    public void ProcessMouseDownFrame(long frame, MouseButtons button, int clicks)
    {
      if (button != MouseButtons.Left || clicks != 1)
        return;
      int index1 = this.selections.AllSelections.FindIndex((Predicate<Selection>) (sel => this.IsInDragSizeByFrame(frame, new long?(sel.Start))));
      int index2 = this.selections.AllSelections.FindIndex((Predicate<Selection>) (sel => this.IsInDragSizeByFrame(frame, new long?(sel.End))));
      if (index1 >= 0)
        this.indexDraggedStartOfSelection = new int?(index1);
      else if (index2 >= 0)
        this.indexDraggedEndOfSelection = new int?(index2);
    }

    public void ProcessMouseUpFrame(long frame)
    {
      if (!this.DragInProgress)
        return;
      this.indexDraggedStartOfSelection = new int?();
      this.indexDraggedEndOfSelection = new int?();
      this.ctrl.OnPositionChangeRequest(frame);
    }

    private bool IsInDragSizeByFrame(long testedFrame, long? refFrame)
    {
      if (!refFrame.HasValue)
        return false;
      int pixel = this.ctrl.PositionToPixel(new long?(refFrame.Value));
      return Math.Abs(this.ctrl.PositionToPixel(new long?(testedFrame)) - pixel) < SystemInformation.DragSize.Width;
    }

    public bool IsDragStartPossibleFrame(long frame) => this.selections.AllSelections.FindIndex((Predicate<Selection>) (sel => this.IsInDragSizeByFrame(frame, new long?(sel.Start)))) >= 0;

    public bool IsDragEndPossibleFrame(long frame) => this.selections.AllSelections.FindIndex((Predicate<Selection>) (sel => this.IsInDragSizeByFrame(frame, new long?(sel.End)))) >= 0;
  }
}
