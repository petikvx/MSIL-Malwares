// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: CORINFOEHCLAU, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CA1C166-25B8-418F-B14D-0C0D6D66CCB2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d9c043de55bafb7aba07942d6de18a86edfe7c52f87ce7a8c852068014a73ab2.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
      this.m_Node = aNode;
      this.m_Key = (string) null;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
      this.m_Node = aNode;
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = 1609601913;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1107452183)) % 10U)
        {
          case 0:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = 2012292521;
            continue;
          case 1:
            num1 = (int) num2 * 51647615 ^ 42902064;
            continue;
          case 2:
            num1 = (int) num2 * -1360209356 ^ -317977984;
            continue;
          case 3:
            this.m_Node = (JSONNode) null;
            num1 = 986866496;
            continue;
          case 4:
            num1 = (int) num2 * 711232549 ^ -421023826;
            continue;
          case 5:
            num1 = (int) num2 * -167023657 ^ 462284299;
            continue;
          case 6:
            goto label_1;
          case 7:
            goto label_3;
          case 8:
            int num3 = this.m_Key == null ? -1949536284 : (num3 = -1489354469);
            num1 = num3 ^ (int) num2 * -1558827716;
            continue;
          case 9:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * 1011338572 ^ -1101565602;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public override JSONNode this[int aIndex]
    {
      get => (JSONNode) new JSONLazyCreator((JSONNode) this);
      set
      {
label_1:
        int num1 = -2053421677;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1857293896)) % 5U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1725836116 ^ -98987922;
              continue;
            case 1:
              aVal = new JSONArray();
              num1 = (int) num2 * 1350140474 ^ -645916400;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            case 4:
              aVal.Add(value);
              num1 = (int) num2 * -1510065645 ^ 1647255345;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -1134983236;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1710191978)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1299843585 ^ -299065598;
              continue;
            case 2:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * -1771524742 ^ 1399608371;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1811081137;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1331924148)) % 6U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 770475781 ^ -944684735;
              continue;
            case 2:
              aVal.Add(aKey, value);
              num1 = (int) num2 * 1828455652 ^ 1021260248;
              continue;
            case 3:
              aVal = new JSONClass();
              num1 = (int) num2 * 79245612 ^ -1725858964;
              continue;
            case 4:
              num1 = (int) num2 * 913789008 ^ 95754447;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
      aVal.Add(aItem);
label_1:
      int num1 = 316450417;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 877852995)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 918506025 ^ -618348096;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.Set((JSONNode) aVal);
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = -1755340620;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1103299475)) % 4U)
        {
          case 0:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 958979062 ^ -297554665;
            continue;
          case 1:
            aVal = new JSONClass();
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -990137422 ^ -1017840881;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = -1230848445;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1246437385)) % 6U)
        {
          case 0:
            goto label_1;
          case 2:
            int num3 = b != null ? -394811021 : (num3 = -1433558442);
            num1 = num3 ^ (int) num2 * -214097475;
            continue;
          case 3:
            flag = true;
            num1 = (int) num2 * -546391314 ^ 1677783612;
            continue;
          case 4:
            flag = (object) a == b;
            num1 = -701912740;
            continue;
          case 5:
            num1 = (int) num2 * -312114203 ^ 1559021549;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return flag;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = 479957686;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1420418484)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            flag = !(a == b);
            num1 = (int) num2 * 896854313 ^ -2016533086;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
      bool flag1 = obj == null;
label_1:
      int num1 = -2050335725;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -131193995)) % 7U)
        {
          case 1:
            int num3 = !flag1 ? 815926083 : (num3 = 1072523428);
            num1 = num3 ^ (int) num2 * -806491375;
            continue;
          case 2:
            num1 = (int) num2 * -2088082730 ^ -1156275538;
            continue;
          case 3:
            flag2 = true;
            num1 = (int) num2 * -738231239 ^ -1789822185;
            continue;
          case 4:
            num1 = (int) num2 * -241001766 ^ 742788808;
            continue;
          case 5:
            flag2 = (object) this == obj;
            num1 = -1077796407;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    public override int GetHashCode() => base.GetHashCode();

    public override string ToString()
    {
      string str = "";
label_1:
      int num1 = 1024883271;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 6069794)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -1632868645 ^ 17468861;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = -1357588172;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1048462135)) % 4U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * -978617407 ^ 128053459;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1959620881 ^ 213075016;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override int AsInt
    {
      get
      {
        JSONData aVal = new JSONData(0);
label_1:
        int num1 = 1253849215;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 357872831)) % 6U)
          {
            case 0:
              num1 = (int) num2 * 2000058718 ^ -1241441868;
              continue;
            case 1:
              num1 = (int) num2 * -212722556 ^ -1629184119;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1001351575 ^ -715628180;
              continue;
            case 4:
              asInt = 0;
              num1 = (int) num2 * 2004299058 ^ 1941124011;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_7:
        return asInt;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = -1142809550;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1099642607)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              asFloat = 0.0f;
              num1 = (int) num2 * 183772424 ^ 47075615;
              continue;
            case 2:
              num1 = (int) num2 * -1142876487 ^ 796433716;
              continue;
            case 3:
              this.Set((JSONNode) new JSONData(0.0f));
              num1 = (int) num2 * -1017382394 ^ 291504900;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = -1590668563;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1941769168)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 1276006020 ^ 1971566939;
              continue;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 1474481993 ^ -1522757579;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override double AsDouble
    {
      get
      {
        JSONData aVal = new JSONData(0.0);
label_1:
        int num1 = -1403213777;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -755285475)) % 6U)
          {
            case 1:
              num1 = (int) num2 * 1518053284 ^ -505294499;
              continue;
            case 2:
              num1 = (int) num2 * -1446316383 ^ 1011439906;
              continue;
            case 3:
              goto label_1;
            case 4:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 187641039 ^ -1609434107;
              continue;
            case 5:
              asDouble = 0.0;
              num1 = (int) num2 * -2070019875 ^ 311458677;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asDouble;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = -2086025592;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1183310885)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1780987673 ^ -889436887;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = -1020946156;
        JSONData aVal;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1583203611)) % 6U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1096836294 ^ -1704330795;
              continue;
            case 1:
              aVal = new JSONData(false);
              num1 = (int) num2 * -1098071881 ^ 891491928;
              continue;
            case 2:
              num1 = (int) num2 * 1069152245 ^ 1477162040;
              continue;
            case 4:
              asBool = false;
              num1 = (int) num2 * -217135752 ^ 731257065;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_7:
        return asBool;
      }
      set
      {
label_1:
        int num1 = -222580728;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1202157437)) % 5U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 395132655 ^ 25293489;
              continue;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -1474128067 ^ 1783799340;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -405346926 ^ -824941471;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
        this.Set((JSONNode) aVal);
label_1:
        int num1 = -1354942348;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1061307303)) % 5U)
          {
            case 0:
              asArray = aVal;
              num1 = (int) num2 * -228307473 ^ -1959893278;
              continue;
            case 1:
              num1 = (int) num2 * -532263001 ^ 558937354;
              continue;
            case 2:
              num1 = (int) num2 * -428163178 ^ 1281092794;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_6:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
label_1:
        int num1 = 1676657824;
        JSONClass aVal;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1743770713)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1550564339 ^ 1738213397;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              asObject = aVal;
              num1 = (int) num2 * -1951866624 ^ 2017824767;
              continue;
            case 4:
              aVal = new JSONClass();
              num1 = (int) num2 * -880529518 ^ 1423164191;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asObject;
      }
    }
  }
}
