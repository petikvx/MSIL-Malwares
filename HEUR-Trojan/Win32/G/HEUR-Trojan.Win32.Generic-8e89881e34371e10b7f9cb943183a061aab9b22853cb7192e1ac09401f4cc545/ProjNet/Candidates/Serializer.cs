// Decompiled with JetBrains decompiler
// Type: ProjNet.Candidates.Serializer
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Adapter;
using IRefl.Collections;
using IRefl.Composer;
using IRefl.Definitions;
using IRefl.Lists;
using IRefl.Managers;
using IRefl.Objects;
using IRefl.Pools;
using IRefl.Producers;
using IRefl.Wrappers;
using ProjNet.Bridges;
using ProjNet.Services;
using ProjNet.States;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace ProjNet.Candidates
{
  public class Serializer : Issuer
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Reg FindItem(string res) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Reg SearchItem(string item) => ServerObjectProducer.GetProcess(item) as Reg;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public MockStatusService ReadItem(string first, Reg connection, Reg filter) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Role ConnectItem(string task, Reg second, string control, List<Strategy> last2) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExpressionStatusService AddItem(
      string setup,
      Reader caller,
      Candidate serv,
      List<Strategy> param2)
    {
      throw new NotImplementedException();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Page PostItem(string res, double b, double pool, TagStatusService selection2)
    {
      int num1 = 3;
      Page page;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_2;
            case 1:
            case 2:
              flag = b != pool;
              num2 = 5;
              continue;
            case 4:
              goto label_1;
            case 5:
              goto label_3;
            case 6:
              goto label_9;
            default:
              goto label_7;
          }
        }
label_1:
        double pool1;
        page = (Page) new ExporterTemplate(b, pool, pool1, false, selection2, res, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
        num1 = 6;
        continue;
label_2:
        pool1 = 0.0;
        num1 = 2;
        continue;
label_3:
        if (flag)
        {
          pool1 = b / (b - pool);
          goto label_1;
        }
        else
          goto label_1;
label_7:
        num1 = 4;
      }
label_9:
      return page;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Page CollectItem(
      string asset,
      double counter,
      double serv,
      TagStatusService visitor2)
    {
      int num = 4;
      bool flag;
      Page page;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_5;
          case 1:
          case 3:
            if (!flag)
            {
              page = (Page) new ExporterTemplate(counter, -1.0, serv, true, visitor2, asset, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
              num = 5;
              continue;
            }
            goto label_5;
          case 4:
            flag = string.IsNullOrEmpty(asset);
            num = 3;
            continue;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_5:
      throw new ArgumentException("Invalid name");
label_7:
      return page;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Instance StartItem(
      string instance,
      ReaderItemState ord,
      GlobalPrototypeAdapter dic,
      TagStatusService def2,
      Strategy connection3,
      Strategy first4)
    {
      int num1 = 3;
      Instance nstance;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        List<Strategy> reference3;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag2 = string.IsNullOrEmpty(instance);
              if (Serializer.OrderList())
              {
                num2 = 1;
                continue;
              }
              goto label_18;
            case 1:
              if (!flag2)
              {
                if (ord != null)
                {
                  if (dic != null)
                  {
                    flag1 = def2 == null;
                    goto case 6;
                  }
                  else
                    goto label_6;
                }
                else
                  goto label_15;
              }
              else
                goto label_13;
            case 2:
              goto label_4;
            case 4:
            case 5:
              goto label_11;
            case 6:
              if (!flag1)
              {
                reference3 = new List<Strategy>(2);
                reference3.Add(connection3);
                reference3.Add(first4);
                int num3 = 5;
                num2 = Serializer.VerifyList() ? num3 : num3;
                continue;
              }
              goto label_2;
            case 7:
              goto label_18;
            default:
              goto label_10;
          }
        }
label_10:
        num1 = 6;
        continue;
label_11:
        nstance = (Instance) new Visitor((Initializer) null, ord, def2, dic, reference3, instance, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
        num1 = 7;
        continue;
label_15:
        num1 = 2;
      }
label_2:
      throw new ArgumentException("Linear unit was null");
label_4:
      throw new ArgumentException("Geographic coordinate system was null");
label_6:
      throw new ArgumentException("Projection was null");
label_13:
      throw new ArgumentException("Invalid name");
label_18:
      return nstance;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public GlobalPrototypeAdapter LogoutItem(
      string var1,
      string result,
      List<Config> control)
    {
      if (string.IsNullOrEmpty(var1))
        throw new ArgumentException("Invalid name");
      if (control == null || control.Count == 0)
        throw new ArgumentException("Invalid projection parameters");
      return (GlobalPrototypeAdapter) new Params(result, control, var1, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Initializer IncludeItem(
      string spec,
      TestPageOption second,
      Page template,
      FieldTemplate task2)
    {
      int num = 4;
      if (Serializer.OrderList())
        goto label_2;
label_1:
      bool flag1;
      Initializer nitializer;
      if (!flag1)
      {
        nitializer = (Initializer) new Token(template, task2, second, spec, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
        if (true)
          num = 6;
        else
          goto label_11;
      }
      else
        goto label_8;
label_2:
      bool flag2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            if (!flag2)
            {
              flag1 = template == null;
              if (Serializer.OrderList())
              {
                num = 5;
                continue;
              }
              goto label_8;
            }
            else
              goto label_6;
          case 2:
          case 3:
            goto label_8;
          case 4:
            flag2 = string.IsNullOrEmpty(spec);
            num = 0;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_11;
          default:
            if (true)
            {
              num = 2;
              continue;
            }
            goto case 4;
        }
      }
label_6:
      throw new ArgumentException("Invalid name");
label_8:
      throw new ArgumentException("Ellipsoid was null");
label_11:
      return nitializer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DispatcherValueManager PublishItem(
      string reference,
      StructTokenizerDef map,
      double dic)
    {
      int num1 = 1;
      DispatcherValueManager dispatcherValueManager;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_7;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_3;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
          }
        }
label_3:
        bool flag;
        if (!flag)
        {
          dispatcherValueManager = (DispatcherValueManager) new HelperValueManager(dic, map, reference, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
          num1 = 5;
          continue;
        }
        break;
label_7:
        flag = string.IsNullOrEmpty(reference);
        num1 = 3;
      }
label_1:
      throw new ArgumentException("Invalid name");
label_8:
      return dispatcherValueManager;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReaderItemState FlushItem(
      string item,
      StructTokenizerDef col,
      Initializer proc,
      DispatcherValueManager task2,
      Strategy col3,
      Strategy pol4)
    {
      int num = 5;
      List<Strategy> cont2;
      ReaderItemState readerItemState;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            if (!flag)
            {
              cont2 = new List<Strategy>(2);
              goto case 3;
            }
            else
            {
              if (Serializer.OrderList())
              {
                num = 4;
                continue;
              }
              goto label_9;
            }
          case 2:
          case 4:
            goto label_3;
          case 3:
            cont2.Add(col3);
            cont2.Add(pol4);
            readerItemState = (ReaderItemState) new InitializerItemState(col, proc, task2, cont2, item, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
            num = 6;
            continue;
          case 5:
            flag = string.IsNullOrEmpty(item);
            num = 0;
            continue;
          case 6:
            goto label_9;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto case 0;
        }
      }
label_3:
      throw new ArgumentException("Invalid name");
label_9:
      return readerItemState;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Reader CalcItem(string first, TestPageOption vis) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Consumer CloneItem(string instance, TestPageOption result) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Mapper GetItem(
      string param,
      Consumer visitor,
      TagStatusService field,
      Strategy second2)
    {
      throw new NotImplementedException();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CreatorMerchantCandidate InstantiateProcess(
      string res,
      Initializer vis,
      TagStatusService util,
      DispatcherValueManager col2)
    {
      int num1 = 2;
      CreatorMerchantCandidate merchantCandidate;
      while (true)
      {
        int num2 = num1;
        List<Strategy> visitor2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_5;
            case 1:
            case 3:
              goto label_6;
            case 4:
              merchantCandidate = (CreatorMerchantCandidate) new ListenerTemplate(vis, util, col2, visitor2, res, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
              if (Serializer.OrderList())
              {
                num2 = 6;
                continue;
              }
              goto label_10;
            case 5:
              visitor2.Add(new Strategy("X", ElementNameStyle.Other));
              visitor2.Add(new Strategy("Y", ElementNameStyle.Other));
              visitor2.Add(new Strategy("Z", ElementNameStyle.Other));
              goto case 4;
            case 6:
              goto label_10;
            default:
              if (Serializer.OrderList())
              {
                num2 = 4;
                continue;
              }
              goto label_5;
          }
        }
label_5:
        bool flag = string.IsNullOrEmpty(res);
        num1 = 3;
        continue;
label_6:
        if (!flag)
        {
          visitor2 = new List<Strategy>(3);
          num1 = 5;
        }
        else
          break;
      }
      throw new ArgumentException("Invalid name");
label_10:
      return merchantCandidate;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Serializer()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool OrderList() => true;

    internal static bool VerifyList() => false;
  }
}
