// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.SvcUtil.CommandParser
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Globalization;

namespace Microsoft.Tools.ServiceModel.SvcUtil
{
  internal static class CommandParser
  {
    internal static ArgumentDictionary ParseCommand(
      string[] cmd,
      CommandSwitch[] switches)
    {
      ArgumentDictionary command = new ArgumentDictionary(cmd.Length);
      foreach (string str1 in cmd)
      {
        bool flag = true;
        if (str1[0] != '/' && str1[0] != '-')
        {
          command.Add(string.Empty, str1);
        }
        else
        {
          string str2 = str1.Length != 1 ? str1.Substring(1) : throw new ArgumentException(Microsoft.Tools.ServiceModel.SR.GetString("ErrSwitchMissing", (object) str1));
          int length = str2.IndexOfAny(new char[2]
          {
            ':',
            '='
          });
          string str3;
          switch (length)
          {
            case -1:
              str3 = string.Empty;
              break;
            case 0:
              throw new ArgumentException(Microsoft.Tools.ServiceModel.SR.GetString("ErrUnexpectedDelimiter"));
            default:
              str3 = str2.Substring(length + 1);
              str2 = str2.Substring(0, length);
              flag = false;
              break;
          }
          CommandSwitch commandSwitch = CommandSwitch.FindSwitch(str2.ToLower(CultureInfo.InvariantCulture), switches);
          if (commandSwitch == null)
            throw new ArgumentException(Microsoft.Tools.ServiceModel.SR.GetString("ErrUnknownSwitch", (object) str2.ToLower(CultureInfo.InvariantCulture)));
          if (commandSwitch.SwitchType == SwitchType.Flag)
          {
            if (!flag)
              throw new ArgumentException(Microsoft.Tools.ServiceModel.SR.GetString("ErrUnexpectedValue", (object) str2.ToLower(CultureInfo.InvariantCulture)));
          }
          else if (flag)
            throw new ArgumentException(Microsoft.Tools.ServiceModel.SR.GetString("ErrExpectedValue", (object) str2.ToLower(CultureInfo.InvariantCulture)));
          if (commandSwitch.SwitchType != SwitchType.ValueList && command.ContainsArgument(commandSwitch.Name))
            throw new ArgumentException(Microsoft.Tools.ServiceModel.SR.GetString("ErrSingleUseSwitch", (object) str2.ToLower(CultureInfo.InvariantCulture)));
          command.Add(commandSwitch.Name, str3);
        }
      }
      return command;
    }
  }
}
