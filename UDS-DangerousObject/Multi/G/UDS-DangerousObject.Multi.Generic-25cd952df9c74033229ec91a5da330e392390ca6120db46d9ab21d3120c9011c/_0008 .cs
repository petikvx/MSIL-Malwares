// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Ud, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6115513F-7820-43EE-DF09-7993E64971BD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\UDS-DangerousObject.Multi.Generic-25cd952df9c74033229ec91a5da330e392390ca6120db46d9ab21d3120c9011c.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

internal static class \u0008\u2006
{
  private static byte[] \u000E;
  private static \u0008\u2006.\u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001 \u0003\u2000;
  private static byte[] \u0005;
  private static \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007 \u0002;
  private static \u0008\u2006.\u0006\u2009​\u2004\u2005\u2007\u2001\u2009\u2004\u2008\u2005\u2004\u2002\u2009\u2009\u2001\u200A\u2009\u2003\u2008\u2008\u2001 \u0003;
  private static short \u0008;
  private static int \u0006;
  private static int \u0002\u2000;
  private static int \u000F;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0008\u2006()
  {
    int num1 = 750446711;
    int num2 = -336326780 - num1;
    \u0008\u2006.\u0002 = new \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007(num1 + 336326953 + num2);
    int skipFrames = 2;
    StackTrace stackTrace = new StackTrace(skipFrames, false);
    int index1 = skipFrames - 2;
    StackFrame frame = stackTrace.GetFrame(index1);
    int index2 = index1;
    if (frame == null)
    {
      stackTrace = new StackTrace();
      index2 = 1;
      frame = stackTrace.GetFrame(index2);
    }
    int num3 = -~-~-~~-~(561942111 - num1 - num2) ^ ~-~--~~-~((45519739 ^ num1) + num2);
    MethodBase method = frame?.GetMethod();
    if (frame != null)
      num3 ^= -~-~-~~--~~(-650506362 - num1 - num2);
    Type declaringType = method?.DeclaringType;
    int num4;
    if ((object) declaringType == (object) typeof (RuntimeMethodHandle))
    {
      \u0008\u2006.\u0003\u2000 |= (\u0008\u2006.\u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001) 4;
      num4 = num3 ^ (1820079213 ^ num1) + num2 + index1;
    }
    else if ((object) declaringType == null)
    {
      if (\u0008\u2006.\u0002(stackTrace, index2))
      {
        num4 = num3 ^ -~-~-~~-~(num1 - 1837244237 - num2) - index1;
        \u0008\u2006.\u0003\u2000 |= (\u0008\u2006.\u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001) 16;
      }
      else
      {
        \u0008\u2006.\u0003\u2000 = (\u0008\u2006.\u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001) 1 | \u0008\u2006.\u0003\u2000;
        num4 = num3 ^ -~-~~--~~-~(1837183166 - num1 ^ num2);
      }
    }
    else
    {
      num4 = num3 ^ ~--~~-~-~((num1 ^ -1820188335) - num2) - index1;
      \u0008\u2006.\u0003\u2000 |= (\u0008\u2006.\u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001) 16;
    }
    \u0008\u2006.\u0002\u2000 += num4;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static string \u0002(int _param0)
  {
    lock (\u0008\u2006.\u0002)
      return \u0008\u2006.\u0002.\u0002(_param0) ?? \u0008\u2006.\u0002(_param0, true);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static string \u0002(int _param0, bool _param1)
  {
    int num1 = 672218727;
    int num2 = -163370788 ^ num1;
    string str1;
    byte[] numArray1;
    int num3;
    do
    {
      int num4;
      if (\u0008\u2006.\u0003 == null)
      {
        Assembly executingAssembly = Assembly.GetExecutingAssembly();
        Assembly.GetCallingAssembly();
        \u0008\u2006.\u0006 |= 1238874670 - num1 + num2;
        Assembly assembly = executingAssembly;
        StringBuilder stringBuilder = new StringBuilder();
        int num5 = num1 - 700385195 ^ num2;
        stringBuilder.Append((char) num5).Append((char) (num5 >> 16));
        int num6 = 1774208940 - num1 + num2;
        stringBuilder.Append((char) num6).Append((char) (num6 >> 16));
        int num7 = num1 - 700057508 - num2;
        stringBuilder.Append((char) num7).Append((char) (num7 >> 16));
        int num8 = 644052255 - num1 ^ num2;
        stringBuilder.Append((char) num8).Append((char) (num8 >> 16));
        int num9 = (num1 ^ 1772566317) + num2;
        stringBuilder.Append((char) (num9 >> 16)).Append((char) num9);
        int num10 = 107181337 - num1 ^ num2;
        stringBuilder.Append((char) num10);
        string name = stringBuilder.ToString();
        Stream manifestResourceStream = assembly.GetManifestResourceStream(name);
        int skipFrames = 2;
        StackTrace stackTrace = new StackTrace(skipFrames, false);
        \u0008\u2006.\u0006 ^= num1 - 1237257830 - num2 | skipFrames;
        int index1 = skipFrames - 2;
        StackFrame frame = stackTrace.GetFrame(index1);
        int index2 = index1;
        if (frame == null)
        {
          stackTrace = new StackTrace();
          index2 = 1;
          frame = stackTrace.GetFrame(index2);
        }
        MethodBase method = frame?.GetMethod();
        \u0008\u2006.\u0006 ^= index1 + (1237264428 - num1 + num2);
        Type declaringType = method?.DeclaringType;
        if (frame == null)
          \u0008\u2006.\u0006 ^= -163549073 ^ num1 ^ num2;
        bool flag = (object) declaringType == (object) typeof (RuntimeMethodHandle);
        \u0008\u2006.\u0006 ^= 1237264460 - num1 + num2;
        if (!flag)
        {
          flag = (object) declaringType == null;
          if (flag)
          {
            if (\u0008\u2006.\u0002(stackTrace, index2))
              flag = false;
            else
              \u0008\u2006.\u0006 ^= num1 ^ -163549105 ^ num2;
          }
        }
        if (flag == (stackTrace != null))
          \u0008\u2006.\u0006 = 32 ^ \u0008\u2006.\u0006;
        \u0008\u2006.\u0006 ^= num1 - 107166652 + num2 | index1 + 1;
        \u0008\u2006.\u0003 = new \u0008\u2006.\u0006\u2009​\u2004\u2005\u2007\u2001\u2009\u2004\u2008\u2005\u2004\u2002\u2009\u2009\u2001\u200A\u2009\u2003\u2008\u2008\u2001(manifestResourceStream);
        short num11 = (short) ((int) \u0008\u2006.\u0003.\u0002() ^ (int) (short) ~-~--~-~~-~(1237258822 - num1 ^ num2));
        if (num11 == (short) 0)
          \u0008\u2006.\u0008 = (short) ((int) \u0008\u2006.\u0003.\u0002() ^ (int) (short) -~-~-~-~~-~(num1 - 107155644 + num2));
        else
          \u0008\u2006.\u0005 = \u0008\u2006.\u0003.\u0002((int) num11);
        \u0008\u2006.\u000E = \u0008\u2006.\u0002(\u0008\u2006.\u0002(executingAssembly));
        int num12 = \u0008\u2006.\u0002\u2000 ^ -1391221602 - num1 ^ num2;
        \u0008\u2006.\u0002\u2000 = 0;
        long num13 = \u000E\u2006.\u0002();
        int num14 = num12 ^ (int) (uint) num13 ^ 632534166 + num1 - num2 ^ (-1169956189 ^ num1) + num2;
        int num15 = num14;
        int num16 = 0;
        int num17 = num15;
        \u000E<int> obj = ((\u0005<int>) new \u0002.\u0002(num1 - 107173154 ^ num2)
        {
          \u0006 = num17
        }).\u0003\u2009\u2006\u2006\u2003\u0002();
        try
        {
          while (obj.\u0008\u2009\u2006\u2006\u2003\u0002())
          {
            int num18 = obj.\u0008\u2009\u2006\u2006\u2003\u0002();
            num15 ^= num16 + num18;
            num16 += num15 >> 3;
          }
        }
        finally
        {
          obj?.\u0006\u2009\u2006\u2006\u2003\u0002();
        }
        num4 = (num15 ^ (1930537373 ^ num1) - num2) * (num1 - 107167861 + num2) % (134914831 - num1 - num2) + (num14 ^ -~~-~-~-~((591518394 ^ num1) + num2));
        \u0008\u2006.\u000F = num4;
        \u0008\u2006.\u0006 = \u0008\u2006.\u0006 & (-104912848 - num1 ^ num2) ^ (163528110 ^ num1) + num2;
        if ((\u0008\u2006.\u0003\u2000 & (\u0008\u2006.\u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001) ~--~-~~--~~(num1 - 1237264316 - num2)) == (\u0008\u2006.\u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001) 0)
          \u0008\u2006.\u0006 = 1237308262 - num1 + num2;
      }
      else
        num4 = \u0008\u2006.\u000F;
      if (\u0008\u2006.\u0006 == (num1 - 1237221734 ^ num2))
        return new string(new char[3]
        {
          (char) ((num1 ^ 163371002) + num2),
          '0',
          (char) (num1 - 1237264212 - num2)
        });
      int num19 = _param0 ^ (num1 ^ -649771072) + num2 ^ num4 ^ 627887475 + num1 - num2;
      \u0008\u2006.\u0003.\u0002().Position = (long) num19;
      if (\u0008\u2006.\u0005 != null)
      {
        numArray1 = \u0008\u2006.\u0005;
      }
      else
      {
        short num20 = \u0008\u2006.\u0008 != (short) -1 ? \u0008\u2006.\u0008 : (short) ((int) \u0008\u2006.\u0003.\u0002() ^ 1237247190 - num1 + num2 ^ num19);
        if (num20 == (short) 0)
        {
          numArray1 = (byte[]) null;
        }
        else
        {
          numArray1 = \u0008\u2006.\u0003.\u0002((int) num20);
          for (int index = 0; index != numArray1.Length; index = 1 + index)
            numArray1[index] ^= (byte) (\u0008\u2006.\u000F >> ((3 & index) << 3));
        }
      }
      num3 = \u0008\u2006.\u0003.\u0002() ^ num19 ^ ~-~--~~-~((num1 ^ -57895689) - num2) ^ num4;
      if (num3 == num1 - 107173156 + num2)
      {
        byte[] numArray2 = \u0008\u2006.\u0003.\u0002(4);
        _param0 = 269992266 - num1 - num2 ^ num4;
        _param0 = ((int) numArray2[2] | (int) numArray2[3] << 16 | (int) numArray2[0] << 8 | (int) numArray2[1] << 24) ^ -_param0;
        str1 = \u0008\u2006.\u0002.\u0002(_param0);
      }
      else
        goto label_38;
    }
    while (str1 == null);
    return str1;
label_38:
    bool flag1 = (num3 & (num1 ^ -700241700 ^ num2)) != 0;
    bool flag2 = (num3 & -1983961172 - num1 + num2) != 0;
    bool flag3 = (num3 & (1984112860 ^ num1 ^ num2)) != 0;
    int num21 = num3 & 375608609 - num1 - num2;
    byte[] numArray3 = numArray1;
    byte[] numArray4 = \u0008\u2006.\u0003.\u0002(num21);
    byte[] numArray5 = numArray3;
    byte num22 = numArray5[1];
    int length1 = numArray4.Length;
    byte num23 = (byte) (length1 + 11 ^ (int) num22 + 7);
    uint num24 = (uint) (((int) numArray5[0] | (int) numArray5[2] << 8) + ((int) num23 << 3));
    int index3 = 0;
    ushort num25 = 0;
    for (; index3 < length1; ++index3)
    {
      if ((1 & index3) == 0)
      {
        num24 = (uint) ((int) num24 * (num1 - 1237313825 ^ num2) + ((-160855271 ^ num1) - num2));
        num25 = (ushort) (num24 >> 16);
      }
      byte num26 = (byte) num25;
      num25 >>= 8;
      byte num27 = numArray4[index3];
      numArray4[index3] = (byte) ((uint) ((int) num22 ^ (int) num27 ^ 3 + (int) num23) ^ (uint) num26);
      num23 = num27;
    }
    byte[] numArray6 = numArray4;
    if (\u0008\u2006.\u000E != null != (\u0008\u2006.\u0006 != (106683556 - num1 ^ num2)))
    {
      for (int index4 = 0; index4 < num21; index4 = 1 + index4)
      {
        byte num28 = \u0008\u2006.\u000E[index4 & 7];
        byte num29 = (byte) ((int) num28 << 3 | (int) num28 >> 5);
        numArray6[index4] = (byte) ((uint) numArray6[index4] ^ (uint) num29);
      }
    }
    int num30 = \u0008\u2006.\u0006 - 12;
    int length2;
    byte[] bytes;
    if (!flag2)
    {
      length2 = num21;
      bytes = numArray6;
    }
    else
    {
      length2 = (int) numArray6[2] | (int) numArray6[0] << 16 | (int) numArray6[3] << 8 | (int) numArray6[1] << 24;
      bytes = new byte[length2];
      \u0008\u2006.\u0002(numArray6, 4, bytes);
    }
    string str2;
    if (flag1 && num30 == (num1 ^ -159669934) - num2)
    {
      char[] chArray = new char[length2];
      for (int index5 = 0; index5 < length2; ++index5)
        chArray[index5] = (char) bytes[index5];
      str2 = new string(chArray);
    }
    else
      str2 = Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    int num31 = num30 + ((107173163 - num1 ^ num2) + (3 & num30) << 5);
    if (num31 != (165134264 ^ num1) + num2)
    {
      int num32 = _param0 + num21 ^ num1 - 1236327732 - num2 ^ num31 & (num1 ^ -163369519 ^ num2);
      ref int local = ref num32;
      StringBuilder stringBuilder = new StringBuilder();
      int num33 = 107173242 - num1 - num2;
      stringBuilder.Append((char) (byte) num33);
      string format = stringBuilder.ToString();
      str2 = local.ToString(format);
    }
    if (!flag3 & _param1)
    {
      str2 = string.Intern(str2);
      \u0008\u2006.\u0002.\u0002(_param0, str2);
      if (\u0008\u2006.\u0002.\u0002() == (num1 - 1237264465 ^ num2))
      {
        \u0008\u2006.\u0003.\u0003();
        \u0008\u2006.\u0003 = (\u0008\u2006.\u0006\u2009​\u2004\u2005\u2007\u2001\u2009\u2004\u2008\u2005\u2004\u2002\u2009\u2009\u2001\u200A\u2009\u2003\u2008\u2008\u2001) null;
        \u0008\u2006.\u0005 = (byte[]) null;
        \u0008\u2006.\u000E = (byte[]) null;
      }
    }
    return str2;
  }

  private static AssemblyName \u0002(Assembly _param0)
  {
    try
    {
      return _param0.GetName();
    }
    catch
    {
      return new AssemblyName(_param0.FullName);
    }
  }

  private static byte[] \u0002(AssemblyName _param0)
  {
    byte[] numArray = _param0.GetPublicKeyToken();
    if (numArray != null && numArray.Length == 0)
      numArray = (byte[]) null;
    return numArray;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0002(StackTrace _param0, int _param1)
  {
    Assembly assembly = _param0.GetFrame(_param1 + 1)?.GetMethod()?.DeclaringType?.Assembly;
    if ((object) assembly != null)
    {
      byte[] numArray = \u0008\u2006.\u0002(\u0008\u2006.\u0002(assembly));
      if (numArray != null && numArray.Length == 8 && numArray[0] == (byte) 183 && numArray[7] == (byte) 137)
        return true;
    }
    return false;
  }

  private static void \u0002(byte[] _param0, int _param1, byte[] _param2)
  {
    int num1 = 0;
    int num2 = 0;
    int num3 = 128;
    int length = _param2.Length;
label_10:
    while (num1 < length)
    {
      if ((num3 <<= 1) == 256)
      {
        num3 = 1;
        num2 = (int) _param0[_param1++];
      }
      if ((num2 & num3) != 0)
      {
        int num4 = ((int) _param0[_param1] >> 2) + 3;
        int num5 = ((int) _param0[_param1] << 8 | (int) _param0[_param1 + 1]) & 1023;
        _param1 += 2;
        int num6 = num1 - num5;
        if (num6 < 0)
          break;
        while (true)
        {
          if (--num4 >= 0 && num1 < length)
            _param2[num1++] = _param2[num6++];
          else
            goto label_10;
        }
      }
      else
        _param2[num1++] = _param0[_param1++];
    }
  }

  private enum \u0003\u2006\u2000\u2002\u2001\u2006\u2008\u2002\u2001\u2002\u2001\u2002\u2006\u2005\u200A\u2007\u200A\u2007\u2001
  {
  }

  private sealed class \u0006\u2009​\u2004\u2005\u2007\u2001\u2009\u2004\u2008\u2005\u2004\u2002\u2009\u2009\u2001\u200A\u2009\u2003\u2008\u2008\u2001
  {
    private Stream \u0002;
    private byte[] \u0003;

    public \u0006\u2009​\u2004\u2005\u2007\u2001\u2009\u2004\u2008\u2005\u2004\u2002\u2009\u2009\u2001\u200A\u2009\u2003\u2008\u2008\u2001(
      Stream _param1)
    {
      this.\u0002 = _param1;
      this.\u0003 = new byte[4];
    }

    public Stream \u0002() => this.\u0002;

    public short \u0002()
    {
      this.\u0002(2);
      return (short) ((int) this.\u0003[0] | (int) this.\u0003[1] << 8);
    }

    public int \u0002()
    {
      this.\u0002(4);
      return (int) this.\u0003[0] | (int) this.\u0003[1] << 8 | (int) this.\u0003[2] << 16 | (int) this.\u0003[3] << 24;
    }

    private void \u0002() => throw new EndOfStreamException();

    private void \u0002(int _param1)
    {
      int offset = 0;
      if (_param1 == 1)
      {
        int num = this.\u0002.ReadByte();
        if (num == -1)
          this.\u0002();
        this.\u0003[0] = (byte) num;
      }
      else
      {
        do
        {
          int num = this.\u0002.Read(this.\u0003, offset, _param1 - offset);
          if (num == 0)
            this.\u0002();
          offset += num;
        }
        while (offset < _param1);
      }
    }

    public void \u0003()
    {
      Stream stream = this.\u0002;
      this.\u0002 = (Stream) null;
      stream?.Close();
      this.\u0003 = (byte[]) null;
    }

    public byte[] \u0002(int _param1)
    {
      byte[] numArray = _param1 >= 0 ? new byte[_param1] : throw new ArgumentOutOfRangeException();
      int length = 0;
      do
      {
        int num = this.\u0002.Read(numArray, length, _param1);
        if (num != 0)
        {
          length += num;
          _param1 -= num;
        }
        else
          break;
      }
      while (_param1 > 0);
      if (length != numArray.Length)
      {
        byte[] dst = new byte[length];
        Buffer.BlockCopy((Array) numArray, 0, (Array) dst, 0, length);
        numArray = dst;
      }
      return numArray;
    }
  }

  internal sealed class \u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007
  {
    private \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[] \u0002;
    private int \u0003;

    public \u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007() => this.\u0002 = new \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[16];

    public \u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007(
      int _param1)
    {
      int length = 16;
      _param1 <<= 1;
      while (length < _param1 && length > 0)
        length <<= 1;
      if (length < 0)
        length = 16;
      this.\u0002 = new \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[length];
    }

    public int \u0002() => this.\u0003;

    private void \u0002()
    {
      \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[] objArray1 = this.\u0002;
      int length1 = objArray1.Length;
      int length2 = length1 * 2;
      if (length2 <= 0)
        return;
      \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[] objArray2 = new \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[length2];
      int num1 = 0;
      for (int index1 = 0; index1 < length1; ++index1)
      {
        string str = objArray1[index1].\u0003;
        if (str != null)
        {
          int num2 = objArray1[index1].\u0002;
          int index2 = num2 & length2 - 1;
          while (objArray2[index2].\u0003 != null)
          {
            ++index2;
            if (index2 >= length2)
              index2 = 0;
          }
          objArray2[index2].\u0003 = str;
          objArray2[index2].\u0002 = num2;
          ++num1;
        }
      }
      this.\u0002 = objArray2;
      this.\u0003 = num1;
    }

    public string \u0002(int _param1)
    {
      \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[] objArray = this.\u0002;
      int length = objArray.Length;
      int index = _param1 & length - 1;
      string str = (string) null;
      while (objArray[index].\u0002 != _param1)
      {
        if (objArray[index].\u0003 != null)
        {
          ++index;
          if (index >= length)
            index = 0;
        }
        else
          goto label_6;
      }
      str = objArray[index].\u0003;
label_6:
      return str;
    }

    public void \u0002(int _param1, string _param2)
    {
      \u0008\u2006.\u000E\u2005\u2007\u2003\u2009\u2000\u2005\u2008\u2001\u2008\u2007\u2006\u2005\u2001\u2007\u2009\u2000\u2008\u2007\u2001\u200A\u2000\u2005\u2000\u2007.\u0002[] objArray = this.\u0002;
      int length = objArray.Length;
      int num1 = length >> 1;
      int index = _param1 & length - 1;
      while (true)
      {
        do
        {
          int num2 = objArray[index].\u0002;
          bool flag = objArray[index].\u0003 == null;
          if (num2 == _param1 | flag)
          {
            objArray[index].\u0003 = _param2;
            if (!flag)
              return;
            objArray[index].\u0002 = _param1;
            ++this.\u0003;
            if (this.\u0003 <= num1)
              return;
            this.\u0002();
            return;
          }
          ++index;
        }
        while (index < length);
        index = 0;
      }
    }

    private struct \u0002
    {
      public int \u0002;
      public string \u0003;
    }
  }
}
