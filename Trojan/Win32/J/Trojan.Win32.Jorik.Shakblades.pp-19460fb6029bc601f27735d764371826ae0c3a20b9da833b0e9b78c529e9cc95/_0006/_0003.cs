// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Public Service, Version=6.0.240.7, Culture=neutral, PublicKeyToken=null
// MVID: FB6DF727-9CD8-4F53-ACDF-580EE570059D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Jorik.Shakblades.pp-19460fb6029bc601f27735d764371826ae0c3a20b9da833b0e9b78c529e9cc95.exe

using \u0006;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Xml.Linq;

namespace \u0006
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal sealed class \u0003
  {
    [EditorBrowsable(EditorBrowsableState.Never)]
    private \u0003()
    {
      try
      {
      }
      catch (Exception ex)
      {
        throw UnhandledException.\u0003(ex, (object) this);
      }
    }

    public static string \u0003(IEnumerable<XElement> source)
    {
      IEnumerator<XElement> enumerator1;
      bool flag;
      XElement current;
      string str1;
      try
      {
        try
        {
          enumerator1 = source.GetEnumerator();
          flag = \u000F\u0006.\u007E\u0098\u0002((object) enumerator1);
          if (flag)
          {
            current = enumerator1.Current;
            str1 = \u0013\u0006.\u007E\u001D((object) current);
            goto label_7;
          }
        }
        finally
        {
          flag = enumerator1 != null;
          if (flag)
            \u0090\u0004.\u007E\u009A\u0002((object) enumerator1);
        }
        str1 = (string) null;
label_7:
        return str1;
      }
      catch (Exception ex)
      {
        string str2 = str1;
        XElement xelement = current;
        IEnumerator<XElement> enumerator2 = (object) enumerator1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        IEnumerable<XElement> xelements = (object) source;
        throw UnhandledException.\u0003(ex, (object) str2, (object) xelement, (object) enumerator2, (object) local, (object) xelements);
      }
    }

    public static void \u0003(IEnumerable<XElement> source, string value)
    {
      IEnumerator<XElement> enumerator1;
      bool flag;
      XElement current;
      try
      {
        try
        {
          enumerator1 = source.GetEnumerator();
          flag = \u000F\u0006.\u007E\u0098\u0002((object) enumerator1);
          if (!flag)
            return;
          current = enumerator1.Current;
          \u0093\u0004.\u007E\u001E((object) current, value);
        }
        finally
        {
          flag = enumerator1 != null;
          if (flag)
            \u0090\u0004.\u007E\u009A\u0002((object) enumerator1);
        }
      }
      catch (Exception ex)
      {
        XElement xelement = current;
        IEnumerator<XElement> enumerator2 = (object) enumerator1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        IEnumerable<XElement> xelements = (object) source;
        string str = value;
        throw UnhandledException.\u0003(ex, (object) xelement, (object) enumerator2, (object) local, (object) xelements, (object) str);
      }
    }

    public static string \u0003(IEnumerable<XElement> source, XName name)
    {
      string str1;
      IEnumerator<XElement> enumerator1;
      bool flag;
      XElement current;
      try
      {
        try
        {
          enumerator1 = source.GetEnumerator();
          flag = \u000F\u0006.\u007E\u0098\u0002((object) enumerator1);
          if (flag)
          {
            current = enumerator1.Current;
            str1 = \u009F\u0003.\u0084(\u008C\u0005.\u007E\u001F((object) current, name));
            goto label_7;
          }
        }
        finally
        {
          flag = enumerator1 != null;
          if (flag)
            \u0090\u0004.\u007E\u009A\u0002((object) enumerator1);
        }
        str1 = (string) null;
label_7:
        return str1;
      }
      catch (Exception ex)
      {
        string str2 = str1;
        XElement xelement = current;
        IEnumerator<XElement> enumerator2 = (object) enumerator1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        IEnumerable<XElement> xelements = (object) source;
        XName xname = name;
        throw UnhandledException.\u0003(ex, (object) str2, (object) xelement, (object) enumerator2, (object) local, (object) xelements, (object) xname);
      }
    }

    public static void \u0003(IEnumerable<XElement> source, XName name, string value)
    {
      IEnumerator<XElement> enumerator1;
      bool flag;
      XElement current;
      try
      {
        try
        {
          enumerator1 = source.GetEnumerator();
          flag = \u000F\u0006.\u007E\u0098\u0002((object) enumerator1);
          if (!flag)
            return;
          current = enumerator1.Current;
          \u0092\u0003.\u007E\u007F((object) current, name, (object) value);
        }
        finally
        {
          flag = enumerator1 != null;
          if (flag)
            \u0090\u0004.\u007E\u009A\u0002((object) enumerator1);
        }
      }
      catch (Exception ex)
      {
        XElement xelement = current;
        IEnumerator<XElement> enumerator2 = (object) enumerator1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        IEnumerable<XElement> xelements = (object) source;
        XName xname = name;
        string str = value;
        throw UnhandledException.\u0003(ex, (object) xelement, (object) enumerator2, (object) local, (object) xelements, (object) xname, (object) str);
      }
    }

    public static string \u0003(XElement source, XName name)
    {
      try
      {
        return \u009F\u0003.\u0084(\u008C\u0005.\u007E\u001F((object) source, name));
      }
      catch (Exception ex)
      {
        string str1;
        string str2 = str1;
        XElement xelement = source;
        XName xname = name;
        throw UnhandledException.\u0003(ex, (object) str2, (object) xelement, (object) xname);
      }
    }

    public static void \u0003(XElement source, XName name, string value)
    {
      try
      {
        \u0092\u0003.\u007E\u007F((object) source, name, (object) value);
      }
      catch (Exception ex)
      {
        XElement xelement = source;
        XName xname = name;
        string str = value;
        throw UnhandledException.\u0003(ex, (object) xelement, (object) xname, (object) str);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute \u0003(XName name, object value)
    {
      bool flag;
      try
      {
        flag = value == null;
        return !flag ? new XAttribute(name, \u000E\u0005.\u0013\u0007(value)) : (XAttribute) null;
      }
      catch (Exception ex)
      {
        XAttribute xattribute1;
        XAttribute xattribute2 = xattribute1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        XName xname = name;
        object obj = value;
        throw UnhandledException.\u0003(ex, (object) xattribute2, (object) local, (object) xname, obj);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute \u0003(XName name, XNamespace ns)
    {
      XAttribute xattribute1;
      try
      {
        xattribute1 = new XAttribute(name, (object) \u0013\u0006.\u007E\u0017((object) ns));
        \u008E\u0002.\u007E\u001A((object) xattribute1, (object) ns);
        return xattribute1;
      }
      catch (Exception ex)
      {
        XAttribute xattribute2 = xattribute1;
        XAttribute xattribute3;
        XAttribute xattribute4 = xattribute3;
        XName xname = name;
        XNamespace xnamespace = ns;
        throw UnhandledException.\u0003(ex, (object) xattribute2, (object) xattribute4, (object) xname, (object) xnamespace);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static object \u0003(XNamespace[] ns, object obj)
    {
      XElement e;
      IEnumerable enumerable1;
      bool flag;
      try
      {
        flag = ns != null && obj != null;
        if (flag)
          goto label_6;
label_4:
        object obj1 = obj;
label_5:
        return obj1;
label_6:
        e = obj as XElement;
        flag = e != null;
        if (flag)
        {
          // ISSUE: reference to a compiler-generated method
          obj1 = (object) \u0003.\u0003(ns, e);
          goto label_5;
        }
        else
        {
          enumerable1 = obj as IEnumerable;
          flag = enumerable1 != null;
          if (flag)
          {
            // ISSUE: reference to a compiler-generated method
            obj1 = (object) \u0003.\u0003(ns, enumerable1);
            goto label_5;
          }
          else
            goto label_4;
        }
      }
      catch (Exception ex)
      {
        object obj2;
        object obj3 = obj2;
        XElement xelement = e;
        IEnumerable enumerable2 = enumerable1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        XNamespace[] xnamespaceArray = ns;
        object obj4 = obj;
        throw UnhandledException.\u0003(ex, obj3, (object) xelement, (object) enumerable2, (object) local, (object) xnamespaceArray, obj4);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static IEnumerable \u0003(XNamespace[] ns, IEnumerable obj)
    {
      IEnumerable<XElement> source;
      bool flag;
      try
      {
        flag = ns != null && obj != null;
        IEnumerable enumerable;
        if (!flag)
          enumerable = obj;
        else
          goto label_3;
label_2:
        return enumerable;
label_3:
        source = obj as IEnumerable<XElement>;
        flag = source != null;
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: reference to a compiler-generated method
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: reference to a compiler-generated method
        enumerable = !flag ? (IEnumerable) obj.Cast<object>().Select<object, object>(new Func<object, object>(new \u0003.\u0001(ns).\u0003)) : (IEnumerable) source.Select<XElement, XElement>(new Func<XElement, XElement>(new \u0003.\u0001(ns).\u0003));
        goto label_2;
      }
      catch (Exception ex)
      {
        IEnumerable enumerable1;
        IEnumerable enumerable2 = enumerable1;
        IEnumerable<XElement> xelements = (object) source;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        XNamespace[] xnamespaceArray = ns;
        IEnumerable enumerable3 = obj;
        throw UnhandledException.\u0003(ex, (object) enumerable2, (object) xelements, (object) local, (object) xnamespaceArray, (object) enumerable3);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XElement \u0003(XNamespace[] ns, XElement e)
    {
      XAttribute xattribute1;
      XAttribute xattribute2;
      bool flag;
      XNamespace xnamespace;
      int num1;
      int num2;
      int index;
      int num3;
      try
      {
        flag = ns != null && e != null;
        if (flag)
        {
          xattribute2 = \u0093\u0003.\u007E\u001C((object) e);
          while (true)
          {
            flag = xattribute2 != null;
            if (flag)
            {
              xattribute1 = \u0093\u0003.\u007E\u0082((object) xattribute2);
              flag = \u000F\u0006.\u007E\u0081((object) xattribute2);
              if (flag)
              {
                xnamespace = xattribute2.Annotation<XNamespace>();
                flag = (object) xnamespace != null;
                if (flag)
                {
                  num1 = checked (ns.Length - 1);
                  num2 = num1;
                  index = 0;
                  while (true)
                  {
                    int num4 = index;
                    num3 = num2;
                    int num5 = num3;
                    if (num4 <= num5)
                    {
                      flag = \u0087\u0005.\u0019(xnamespace, ns[index]);
                      if (!flag)
                        checked { ++index; }
                      else
                        break;
                    }
                    else
                      goto label_9;
                  }
                  \u0090\u0004.\u007E\u0083((object) xattribute2);
                }
label_9:;
              }
              xattribute2 = xattribute1;
            }
            else
              break;
          }
        }
        return e;
      }
      catch (Exception ex)
      {
        XElement xelement;
        object[] objArray = new object[11]
        {
          (object) xelement,
          (object) xattribute2,
          (object) xattribute1,
          (object) xnamespace,
          (object) num1,
          (object) index,
          (object) num2,
          (object) flag,
          (object) num3,
          (object) ns,
          (object) e
        };
        throw UnhandledException.\u0003(ex, objArray);
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XNamespace \u0003(ref XNamespace xns, string ns)
    {
      bool flag;
      try
      {
        flag = (object) xns == null;
        if (flag)
          xns = \u0016\u0006.\u0018(ns);
        return xns;
      }
      catch (Exception ex)
      {
        XNamespace xnamespace1;
        XNamespace xnamespace2 = xnamespace1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        XNamespace xnamespace3 = xns;
        string str = ns;
        throw UnhandledException.\u0003(ex, (object) xnamespace2, (object) local, (object) xnamespace3, (object) str);
      }
    }
  }
}
