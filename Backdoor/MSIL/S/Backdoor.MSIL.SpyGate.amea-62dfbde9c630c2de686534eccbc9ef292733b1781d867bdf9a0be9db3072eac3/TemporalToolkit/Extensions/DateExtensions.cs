// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.Extensions.DateExtensions
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;
using System.Runtime.InteropServices;

namespace TemporalToolkit.Extensions
{
  public static class DateExtensions
  {
    public static int OccurrenceOfDayInMonth(this DateTime aDate)
    {
      int num1 = (aDate.Day - 1) / 7 + 1;
label_1:
      int num2 = 583384564;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 1487994457)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num2 = (int) num3 * 1773494022 ^ 346005723;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return num1;
    }

    public static DateTime StartOfWeek(this DateTime aDate)
    {
label_1:
      int num1 = 795376938;
      int num2;
      DateTime dateTime1;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1310289830)) % 5U)
        {
          case 0:
            DateTime dateTime2 = aDate.AddDays((double) num2);
            dateTime1 = new DateTime(dateTime2.Year, dateTime2.Month, dateTime2.Day);
            num1 = (int) num3 * 280764383 ^ -869389740;
            continue;
          case 1:
            num1 = (int) num3 * -1654976837 ^ 1457245556;
            continue;
          case 3:
            num2 = (int) aDate.DayOfWeek * -1;
            num1 = (int) num3 * -565295268 ^ 1801404651;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return dateTime1;
    }

    public static DateTime EndOfWeek(this DateTime aDate)
    {
label_1:
      int num1 = -1108412222;
      DateTime dateTime1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1325959963)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = (int) (6 - aDate.DayOfWeek);
            DateTime dateTime2 = aDate.AddDays((double) num3);
            dateTime1 = new DateTime(dateTime2.Year, dateTime2.Month, dateTime2.Day);
            num1 = (int) num2 * 1975766356 ^ -1609277754;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return dateTime1;
    }

    public static TemporalToolkit.Quarter Quarter(this DateTime aDate)
    {
label_1:
      int num1 = 1072492384;
      TemporalToolkit.Quarter quarter;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 366477962)) % 3U)
        {
          case 1:
            quarter = aDate.Quarter(Month.January);
            num1 = (int) num2 * -764583371 ^ 2121394851;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return quarter;
    }

    public static TemporalToolkit.Quarter Quarter(this DateTime aDate, Month startOfYear)
    {
label_1:
      int num1 = 856336194;
      bool flag;
      int num2;
      TemporalToolkit.Quarter quarter;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 71789037)) % 7U)
        {
          case 1:
            quarter = (TemporalToolkit.Quarter) DateExtensions.\u202D​‎‎⁮‏‭⁫‍‎‪‎‬‎‪‌‪⁫‎⁯⁮⁯⁮⁬⁭⁬⁯⁫⁭⁮‎⁬‭‮‌⁫‭⁫‪⁭‮((double) ((Decimal) num2 / 3M));
            num1 = 1343903205;
            continue;
          case 2:
            int num4 = !flag ? 1025307227 : (num4 = 1066593318);
            num1 = num4 ^ (int) num3 * 278445506;
            continue;
          case 3:
            goto label_1;
          case 4:
            num2 = (int) (startOfYear - 1) * -1 + aDate.Month;
            num1 = (int) num3 * -1093409972 ^ -1674770040;
            continue;
          case 5:
            num2 = 12 - DateExtensions.\u206F‎‭⁪⁬‏‪‬⁫​‫‮⁬⁭⁫⁭​‏⁫⁬‭‫⁭⁬⁪⁮⁪⁫‌​⁭⁬⁬⁬⁮​⁬‌‏‮(num2);
            num1 = (int) num3 * 1120052533 ^ 1800230028;
            continue;
          case 6:
            flag = num2 <= 0;
            num1 = (int) num3 * 1724937625 ^ 104114384;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return quarter;
    }

    static int \u206F‎‭⁪⁬‏‪‬⁫​‫‮⁬⁭⁫⁭​‏⁫⁬‭‫⁭⁬⁪⁮⁪⁫‌​⁭⁬⁬⁬⁮​⁬‌‏‮([In] int obj0) => Math.Abs(obj0);

    static double \u202D​‎‎⁮‏‭⁫‍‎‪‎‬‎‪‌‪⁫‎⁯⁮⁯⁮⁬⁭⁬⁯⁫⁭⁮‎⁬‭‮‌⁫‭⁫‪⁭‮([In] double obj0) => Math.Ceiling(obj0);
  }
}
