// Decompiled with JetBrains decompiler
// Type: DirectX.Capture.AudioCapabilities
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan.MSIL.KillAV.ao-bc0c15043485dde908fef22878901941295e9096cd86dde81e043e0a083e1c6c.exe

using DShowNET;
using System;
using System.Runtime.InteropServices;

namespace DirectX.Capture
{
  public class AudioCapabilities
  {
    public int MinimumChannels;
    public int MaximumChannels;
    public int ChannelsGranularity;
    public int MinimumSampleSize;
    public int MaximumSampleSize;
    public int SampleSizeGranularity;
    public int MinimumSamplingRate;
    public int MaximumSamplingRate;
    public int SamplingRateGranularity;

    internal AudioCapabilities(IAMStreamConfig audioStreamConfig)
    {
      if (audioStreamConfig == null)
        throw new ArgumentNullException(nameof (audioStreamConfig));
      AMMediaType mediaType = (AMMediaType) null;
      IntPtr num = IntPtr.Zero;
      try
      {
        int piCount;
        int piSize;
        int numberOfCapabilities = audioStreamConfig.GetNumberOfCapabilities(out piCount, out piSize);
        if (numberOfCapabilities != 0)
          Marshal.ThrowExceptionForHR(numberOfCapabilities);
        if (piCount <= 0)
          throw new NotSupportedException("This audio device does not report capabilities.");
        if (piSize > Marshal.SizeOf(typeof (AudioStreamConfigCaps)))
          throw new NotSupportedException("Unable to retrieve audio device capabilities. This audio device requires a larger AudioStreamConfigCaps structure.");
        if (piCount <= 1)
          ;
        num = Marshal.AllocCoTaskMem(Marshal.SizeOf(typeof (AudioStreamConfigCaps)));
        IntPtr pmt;
        int streamCaps = audioStreamConfig.GetStreamCaps(0, out pmt, num);
        if (streamCaps != 0)
          Marshal.ThrowExceptionForHR(streamCaps);
        mediaType = (AMMediaType) Marshal.PtrToStructure(pmt, typeof (AMMediaType));
        AudioStreamConfigCaps structure = (AudioStreamConfigCaps) Marshal.PtrToStructure(num, typeof (AudioStreamConfigCaps));
        this.MinimumChannels = structure.MinimumChannels;
        this.MaximumChannels = structure.MaximumChannels;
        this.ChannelsGranularity = structure.ChannelsGranularity;
        this.MinimumSampleSize = structure.MinimumBitsPerSample;
        this.MaximumSampleSize = structure.MaximumBitsPerSample;
        this.SampleSizeGranularity = structure.BitsPerSampleGranularity;
        this.MinimumSamplingRate = structure.MinimumSampleFrequency;
        this.MaximumSamplingRate = structure.MaximumSampleFrequency;
        this.SamplingRateGranularity = structure.SampleFrequencyGranularity;
      }
      finally
      {
        if (num != IntPtr.Zero)
          Marshal.FreeCoTaskMem(num);
        IntPtr zero = IntPtr.Zero;
        if (mediaType != null)
          DsUtils.FreeAMMediaType(mediaType);
      }
    }
  }
}
