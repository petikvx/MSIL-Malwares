// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Microsoft, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 812CF5F4-80B3-4F9B-A390-E995C930E6CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-1f1acdf902ef68a02ea937e0ad033eb0cbf7b87bf124bfc1e2a141153c50cf4d.exe

using \u0006;
using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace \u0006
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal sealed class \u0001 : WindowsFormsApplicationBase
  {
    private static List<WeakReference> \u0001 = new List<WeakReference>();

    [DebuggerNonUserCode]
    static \u0001()
    {
    }

    [DebuggerNonUserCode]
    private static unsafe void \u0001([In] object obj0)
    {
      void* voidPtr;
      List<WeakReference> weakReferenceList1;
      do
      {
        if (true)
        {
          // ISSUE: untyped stack allocation
          voidPtr = (void*) __untypedstackalloc(18);
        }
        List<WeakReference> weakReferenceList2 = \u0001.\u0001;
        if (true)
          goto label_19;
label_3:
        \u0001.\u0001((object) weakReferenceList1);
        continue;
label_19:
        weakReferenceList1 = weakReferenceList2;
        goto label_3;
      }
      while (false);
      try
      {
        *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) (\u0001.\u0001.Count == \u0001.\u0001.Capacity);
        if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0)
          goto label_15;
label_14:
        \u0001.\u0001.Add(new WeakReference(\u0003.\u0008(obj0)));
        return;
label_15:
        *(int*) voidPtr = 0;
        IntPtr num1 = (IntPtr) voidPtr + 4;
        *(int*) ((IntPtr) voidPtr + 8) = checked (\u0001.\u0001.Count - 1);
        *(int*) num1 = 0;
        while (true)
        {
          int num2 = *(int*) ((IntPtr) voidPtr + 4);
          int num3;
          while (true)
          {
            *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 8);
            int num4 = *(int*) ((IntPtr) voidPtr + 12);
            if (num2 <= num4)
            {
              WeakReference weakReference = \u0001.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
              *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) global::\u0002.\u007E\u0004((object) weakReference);
              if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0)
              {
                *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) (*(int*) ((IntPtr) voidPtr + 4) != *(int*) voidPtr);
                num3 = (int) *(sbyte*) ((IntPtr) voidPtr + 17);
                if (false)
                  num2 = num3;
                else
                  break;
              }
              else
                goto label_10;
            }
            else
              goto label_13;
          }
          if (num3 != 0)
            \u0001.\u0001[*(int*) voidPtr] = \u0001.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
          *(int*) voidPtr = checked (*(int*) voidPtr + 1);
label_10:
          *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
        }
label_13:
        \u0001.\u0001.RemoveRange(*(int*) voidPtr, checked (\u0001.\u0001.Count - *(int*) voidPtr));
        \u0001.\u0001.Capacity = \u0001.\u0001.Count;
        goto label_14;
      }
      finally
      {
        if (true)
          \u0001.\u0002((object) weakReferenceList1);
      }
    }

    [STAThread]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void \u0001([In] string[] obj0)
    {
      \u000F.\u0001();
      do
      {
        try
        {
          if (true)
            \u0005.\u000F(\u0004.\u000E());
        }
        finally
        {
        }
      }
      while (false);
      global::\u0006.\u007E\u0010((object) \u0002.\u0002.\u0001(), obj0);
    }

    public \u0001()
      : base(AuthenticationMode.Windows)
    {
      \u0001.\u0001((object) this);
      this.IsSingleInstance = true;
      this.EnableVisualStyles = true;
      this.SaveMySettingsOnExit = true;
      this.ShutdownStyle = ShutdownMode.AfterMainFormCloses;
    }

    void WindowsFormsApplicationBase.\u0001() => \u0007.\u007E\u0011((object) this, (Form) \u0002.\u0002.\u0001().\u0001());
  }
}
