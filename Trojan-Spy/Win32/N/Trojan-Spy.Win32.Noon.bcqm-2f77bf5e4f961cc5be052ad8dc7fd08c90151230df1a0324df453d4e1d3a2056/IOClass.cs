// Decompiled with JetBrains decompiler
// Type: mmxAH.IOClass
// Assembly: PermissionTokenFact, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 0E8B010F-DA1B-42FA-9C31-C1DCAF557A03
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqm-2f77bf5e4f961cc5be052ad8dc7fd08c90151230df1a0324df453d4e1d3a2056.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace mmxAH
{
  public class IOClass
  {
    private List<IOOption> options;
    private List<MultiChooseOpthion> MCOpts;
    private Func FAfterPause;
    private Func FYes;
    private Func FNo;
    private FuncMulthiChooseRet MCRet;
    private WorkForm frm;
    private FormMode frmMode;
    private List<IOClass.LogEntry> log;
    private List<IOClass.LogEntry> curModeToPrint;
    private GameEngine en;
    private MainMenuForm mmFrm;

    public IOClass(WorkForm frmp, GameEngine eng, MainMenuForm frmMM)
    {
      this.frmMode = FormMode.Log;
      this.frm = frmp;
      this.log = new List<IOClass.LogEntry>();
      this.en = eng;
      this.mmFrm = frmMM;
    }

    public void Pause(Func f, string title = "Next")
    {
      this.FAfterPause = f;
      this.UpdateForm();
      this.frm.StartPause(title);
    }

    public void YesNoStart(string q, string aYes, string aNo, Func y, Func n)
    {
      this.FYes = y;
      this.FNo = n;
      this.UpdateForm();
      this.frm.StartYesNo(q, aYes, aNo);
    }

    public void PauseEnd() => this.FAfterPause();

    public void Answer(bool a)
    {
      if (a)
        this.FYes();
      else
        this.FNo();
    }

    public void StartChoose(List<IOOption> opts, string question = "Select acthion", string buttonName = "Confirm")
    {
      this.options = opts;
      this.UpdateForm();
      List<string> chooses = new List<string>();
      foreach (IOOption opt in opts)
        chooses.Add(opt.Title);
      this.frm.StartChoose(question, chooses, buttonName);
    }

    public void ChooseEnd(int selectedOption) => this.options[selectedOption].Execute();

    public void StandAloneStart(Func f) => this.FYes.BeginInvoke((AsyncCallback) null, (object) null);

    public void MulthiChooceStart(
      List<MultiChooseOpthion> opts,
      string promt,
      byte neededCount,
      FuncMulthiChooseRet rp,
      string ButtonCapiton = "Choose")
    {
      this.MCOpts = opts;
      this.MCRet = rp;
      List<string> chooses = new List<string>();
      foreach (MultiChooseOpthion opt in opts)
        chooses.Add(opt.title);
      this.UpdateForm();
      this.frm.StartMultiChoose(promt, chooses, neededCount, ButtonCapiton);
    }

    public void MultiChooseEnd(List<short> outherCodes)
    {
      List<short> InCodes = new List<short>();
      foreach (short outherCode in outherCodes)
        InCodes.Add(this.MCOpts[(int) outherCode].InnerCode);
      this.MCRet(InCodes);
    }

    public void Print(
      string Text,
      byte fontsize = 12,
      bool isBold = false,
      bool isItalic = false,
      byte label = 1,
      string ChooseColor = "Black")
    {
      IOClass.LogEntry logEntry = new IOClass.LogEntry(Text, fontsize, isBold, isItalic, label, ChooseColor);
      if (this.frmMode == FormMode.Log)
        this.log.Add(logEntry);
      else
        this.curModeToPrint.Add(logEntry);
    }

    public void PrintToLog(
      string Text,
      byte fontsize = 12,
      bool isBold = false,
      bool isItalic = false,
      byte label = 1,
      string ChooseColor = "Black")
    {
      this.log.Add(new IOClass.LogEntry(Text, fontsize, isBold, isItalic, label, ChooseColor));
      this.frmMode = FormMode.Log;
    }

    private void ShowLog()
    {
      this.frm.mapMode(false);
      foreach (IOClass.LogEntry logEntry in this.log)
        this.frm.ShowLabelText(logEntry.Text, logEntry.size, logEntry.isBold, logEntry.isItalic, logEntry.label, logEntry.cl);
      this.frmMode = FormMode.Log;
    }

    private void ShowNonLogMode()
    {
      foreach (IOClass.LogEntry logEntry in this.curModeToPrint)
        this.frm.ShowLabelText(logEntry.Text, logEntry.size, logEntry.isBold, logEntry.isItalic, logEntry.label, logEntry.cl);
    }

    public void SetFormMode(FormMode md)
    {
      this.frmMode = md;
      if (this.frmMode == FormMode.Log)
        return;
      this.curModeToPrint = new List<IOClass.LogEntry>();
    }

    public void UpdateForm()
    {
      switch (this.frmMode)
      {
        case FormMode.Log:
          this.ShowLog();
          break;
        case FormMode.Map:
          this.en.map.Print();
          this.ShowNonLogMode();
          break;
        case FormMode.Status:
          this.frm.mapMode(false);
          this.en.status.Print();
          this.ShowNonLogMode();
          break;
        case FormMode.Monsters:
          this.PrintMonsters();
          break;
        case FormMode.Investigators:
          this.PrintInvist();
          break;
        case FormMode.Ow:
          this.en.ows.Print();
          this.frm.mapMode(false);
          this.ShowNonLogMode();
          break;
      }
    }

    public void Set3LabelView()
    {
      this.frmMode = FormMode.Map;
      this.frm.mapMode(true);
    }

    public void ArrengeLabels() => this.frm.ArrengeLabels();

    private void PrintInvist()
    {
      byte index = this.en.clock.GetCurPlayer();
      do
      {
        this.en.ActiveInvistigators[(int) index].Print();
        this.Print(Environment.NewLine);
        this.Print(Environment.NewLine);
        ++index;
        if ((int) index == (int) this.en.GetPlayersNumber())
          index = (byte) 0;
      }
      while ((int) index != (int) this.en.clock.GetCurPlayer());
      this.frm.mapMode(false);
      this.ShowNonLogMode();
    }

    private void PrintMonsters()
    {
      foreach (MonsterPrototype monsterPrototype in this.en.MonsterPrototypes)
        monsterPrototype.isPrinted = false;
      foreach (MonsterIndivid activeMonster in this.en.ActiveMonsters)
        activeMonster.Print();
      this.frm.mapMode(false);
      this.ShowNonLogMode();
    }

    public void SetSaveEnable(bool mode) => this.mmFrm.SaveEnabled(mode);

    public void CreateSaveFile(string SaveName = "")
    {
      short num = 0;
      DirectoryInfo directoryInfo = new DirectoryInfo(TextFileParser.CreatePath("Saves"));
      if (!directoryInfo.Exists)
      {
        directoryInfo.Create();
        if (SaveName == "")
          SaveName = "AH_save_1";
      }
      else if (SaveName == "")
      {
        foreach (FileInfo file in directoryInfo.GetFiles())
        {
          if (file.Name.StartsWith("AH_save_"))
          {
            string str = file.Name.Substring(8);
            short result;
            if (short.TryParse(str.Substring(0, str.Length - 4), out result) && (int) result > (int) num)
              num = result;
          }
        }
        SaveName = "AH_save_" + ((int) num + 1).ToString();
      }
      SaveName = Path.Combine("Saves", SaveName + ".xge");
      new BinaryWorker(this.en, SaveName).ToSave();
    }

    public bool LoadSaveFile(string SaveName)
    {
      SaveName = Path.Combine("Saves", SaveName + ".xge");
      if (!new BinaryWorker(this.en, SaveName).FromSave())
        return false;
      this.frm.Show();
      this.en.clock.ResumeFromSave();
      return true;
    }

    public void ShowMainMenu() => this.mmFrm.Show();

    public void PrintTag(string str)
    {
      do
      {
        int length1 = str.IndexOf("{b}");
        int length2 = str.IndexOf("{i}");
        if (length1 == length2)
        {
          this.Print(str);
          str = "";
        }
        else if (length1 != -1 && length2 != -1)
        {
          if (length1 > length2)
          {
            this.Print(str.Substring(0, length2));
            str = str.Substring(length2 + 3);
            int length3 = str.IndexOf("{i}");
            this.Print(str.Substring(0, length3), isItalic: true);
            str = str.Substring(length3 + 3);
          }
          else
          {
            this.Print(str.Substring(0, length1));
            str = str.Substring(length1 + 3);
            int length4 = str.IndexOf("{b}");
            this.Print(str.Substring(0, length4), isBold: true);
            str = str.Substring(length4 + 3);
          }
        }
        else if (length1 != -1)
        {
          this.Print(str.Substring(0, length1));
          str = str.Substring(length1 + 3);
          int length5 = str.IndexOf("{b}");
          this.Print(str.Substring(0, length5), isBold: true);
          str = str.Substring(length5 + 3);
        }
        else
        {
          this.Print(str.Substring(0, length2));
          str = str.Substring(length2 + 3);
          int length6 = str.IndexOf("{i}");
          this.Print(str.Substring(0, length6), isItalic: true);
          str = str.Substring(length6 + 3);
        }
      }
      while (str != "");
    }

    private struct LogEntry
    {
      public string Text;
      public byte size;
      public bool isBold;
      public bool isItalic;
      public byte label;
      public string cl;

      public LogEntry(string t, byte s, bool ib, bool ii, byte l, string c)
      {
        this.Text = t;
        this.size = s;
        this.isBold = ib;
        this.isItalic = ii;
        this.label = l;
        this.cl = c;
      }
    }
  }
}
