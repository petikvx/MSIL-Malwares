// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSListView
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  internal class NSListView : Control
  {
    private List<NSListView.NSListViewItem> _Items;
    private List<NSListView.NSListViewItem> _SelectedItems;
    private List<NSListView.NSListViewColumnHeader> _Columns;
    private bool _MultiSelect;
    private int ItemHeight;
    private NSVScrollBar VS;
    private int[] ColumnOffsets;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private SolidBrush B1;
    private SolidBrush B2;
    private SolidBrush B3;
    private SolidBrush B4;
    private LinearGradientBrush GB1;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public NSListView.NSListViewItem[] Items
    {
      get => this._Items.ToArray();
      set
      {
        this._Items = new List<NSListView.NSListViewItem>((IEnumerable<NSListView.NSListViewItem>) value);
        this.InvalidateScroll();
      }
    }

    public NSListView.NSListViewItem[] SelectedItems => this._SelectedItems.ToArray();

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public NSListView.NSListViewColumnHeader[] Columns
    {
      get => this._Columns.ToArray();
      set
      {
        this._Columns = new List<NSListView.NSListViewColumnHeader>((IEnumerable<NSListView.NSListViewColumnHeader>) value);
        this.InvalidateColumns();
      }
    }

    public bool MultiSelect
    {
      get => this._MultiSelect;
      set
      {
        this._MultiSelect = value;
        if (this._SelectedItems.Count > 1)
          this._SelectedItems.RemoveRange(1, checked (this._SelectedItems.Count - 1));
        this.Invalidate();
      }
    }

    public override Font Font
    {
      get => base.Font;
      set
      {
        this.ItemHeight = checked ((int) Math.Round((double) Graphics.FromHwnd(this.Handle).MeasureString("@", this.Font).Height) + 6);
        if (this.VS != null)
        {
          this.VS.SmallChange = this.ItemHeight;
          this.VS.LargeChange = this.ItemHeight;
        }
        base.Font = value;
        this.InvalidateLayout();
      }
    }

    public void AddItem(string text, params string[] subItems)
    {
      List<NSListView.NSListViewSubItem> nsListViewSubItemList = new List<NSListView.NSListViewSubItem>();
      string[] strArray = subItems;
      int index = 0;
      while (index < strArray.Length)
      {
        string str = strArray[index];
        nsListViewSubItemList.Add(new NSListView.NSListViewSubItem()
        {
          Text = str
        });
        checked { ++index; }
      }
      this._Items.Add(new NSListView.NSListViewItem()
      {
        Text = text,
        SubItems = nsListViewSubItemList
      });
      this.InvalidateScroll();
    }

    public void RemoveItemAt(int index)
    {
      this._Items.RemoveAt(index);
      this.InvalidateScroll();
    }

    public void RemoveItem(NSListView.NSListViewItem item)
    {
      this._Items.Remove(item);
      this.InvalidateScroll();
    }

    public void RemoveItems(NSListView.NSListViewItem[] items)
    {
      NSListView.NSListViewItem[] nsListViewItemArray = items;
      int index = 0;
      while (index < nsListViewItemArray.Length)
      {
        this._Items.Remove(nsListViewItemArray[index]);
        checked { ++index; }
      }
      this.InvalidateScroll();
    }

    public NSListView()
    {
      this._Items = new List<NSListView.NSListViewItem>();
      this._SelectedItems = new List<NSListView.NSListViewItem>();
      this._Columns = new List<NSListView.NSListViewColumnHeader>();
      this._MultiSelect = true;
      this.ItemHeight = 24;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, true);
      this.P1 = new Pen(Color.FromArgb(55, 55, 55));
      this.P2 = new Pen(Color.FromArgb(24, 24, 24));
      this.P3 = new Pen(Color.FromArgb(65, 65, 65));
      this.B1 = new SolidBrush(Color.FromArgb(62, 62, 62));
      this.B2 = new SolidBrush(Color.FromArgb(65, 65, 65));
      this.B3 = new SolidBrush(Color.FromArgb(47, 47, 47));
      this.B4 = new SolidBrush(Color.FromArgb(50, 50, 50));
      this.VS = new NSVScrollBar();
      this.VS.SmallChange = this.ItemHeight;
      this.VS.LargeChange = this.ItemHeight;
      this.VS.Scroll += new NSVScrollBar.ScrollEventHandler(this.HandleScroll);
      this.VS.MouseDown += new MouseEventHandler(this.VS_MouseDown);
      this.Controls.Add((Control) this.VS);
      this.InvalidateLayout();
    }

    protected override void OnSizeChanged(EventArgs e)
    {
      this.InvalidateLayout();
      base.OnSizeChanged(e);
    }

    private void HandleScroll(object sender) => this.Invalidate();

    private void InvalidateScroll()
    {
      this.VS.Maximum = checked (this._Items.Count * this.ItemHeight);
      this.Invalidate();
    }

    private void InvalidateLayout()
    {
      this.VS.Location = new Point(checked (this.Width - this.VS.Width - 1), 1);
      this.VS.Size = new Size(18, checked (this.Height - 2));
      this.Invalidate();
    }

    private void InvalidateColumns()
    {
      int num1 = 3;
      this.ColumnOffsets = new int[checked (this._Columns.Count - 1 + 1)];
      int num2 = checked (this._Columns.Count - 1);
      int index = 0;
      while (index <= num2)
      {
        this.ColumnOffsets[index] = num1;
        checked { num1 += this.Columns[index].Width; }
        checked { ++index; }
      }
      this.Invalidate();
    }

    private void VS_MouseDown(object sender, MouseEventArgs e) => this.Focus();

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.Focus();
      if (e.Button == MouseButtons.Left)
      {
        int num = checked ((int) Math.Round(unchecked (this.VS.Percent * (double) checked (this.VS.Maximum - this.Height - this.ItemHeight * 2))));
        int index = checked (e.Y + num - this.ItemHeight) / this.ItemHeight;
        if (index > checked (this._Items.Count - 1))
          index = -1;
        if (index != -1)
        {
          if (Control.ModifierKeys == Keys.Control && this._MultiSelect)
          {
            if (this._SelectedItems.Contains(this._Items[index]))
              this._SelectedItems.Remove(this._Items[index]);
            else
              this._SelectedItems.Add(this._Items[index]);
          }
          else
          {
            this._SelectedItems.Clear();
            this._SelectedItems.Add(this._Items[index]);
          }
        }
        this.Invalidate();
      }
      base.OnMouseDown(e);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.DrawRectangle(this.P1, 1, 1, checked (this.Width - 3), checked (this.Height - 3));
      int num1 = checked ((int) Math.Round(unchecked (this.VS.Percent * (double) checked (this.VS.Maximum - this.Height - this.ItemHeight * 2))));
      int num2 = num1 != 0 ? num1 / this.ItemHeight : 0;
      int num3 = Math.Min(checked (num2 + unchecked (this.Height / this.ItemHeight)), checked (this._Items.Count - 1));
      int num4 = num2;
      int num5 = num3;
      int index1 = num4;
      Rectangle rect;
      while (index1 <= num5)
      {
        NSListView.NSListViewItem nsListViewItem = this.Items[index1];
        rect = new Rectangle(0, checked (this.ItemHeight + index1 * this.ItemHeight + 1 - num1), this.Width, checked (this.ItemHeight - 1));
        float height = ThemeModule.G.MeasureString(nsListViewItem.Text, this.Font).Height;
        int y = checked (rect.Y + (int) Math.Round(unchecked ((double) this.ItemHeight / 2.0 - (double) height / 2.0)));
        if (this._SelectedItems.Contains(nsListViewItem))
        {
          if (index1 % 2 == 0)
            ThemeModule.G.FillRectangle((Brush) this.B1, rect);
          else
            ThemeModule.G.FillRectangle((Brush) this.B2, rect);
        }
        else if (index1 % 2 == 0)
          ThemeModule.G.FillRectangle((Brush) this.B3, rect);
        else
          ThemeModule.G.FillRectangle((Brush) this.B4, rect);
        ThemeModule.G.DrawLine(this.P2, 0, rect.Bottom, this.Width, rect.Bottom);
        if (this.Columns.Length > 0)
        {
          rect.Width = this.Columns[0].Width;
          ThemeModule.G.SetClip(rect);
        }
        ThemeModule.G.DrawString(nsListViewItem.Text, this.Font, Brushes.Black, 10f, (float) checked (y + 1));
        ThemeModule.G.DrawString(nsListViewItem.Text, this.Font, Brushes.WhiteSmoke, 9f, (float) y);
        if (nsListViewItem.SubItems != null)
        {
          int num6 = checked (Math.Min(nsListViewItem.SubItems.Count, this._Columns.Count) - 1);
          int index2 = 0;
          while (index2 <= num6)
          {
            int x = checked (this.ColumnOffsets[index2 + 1] + 4);
            rect.X = x;
            rect.Width = this.Columns[index2].Width;
            ThemeModule.G.SetClip(rect);
            ThemeModule.G.DrawString(nsListViewItem.SubItems[index2].Text, this.Font, Brushes.Black, (float) checked (x + 1), (float) checked (y + 1));
            ThemeModule.G.DrawString(nsListViewItem.SubItems[index2].Text, this.Font, Brushes.WhiteSmoke, (float) x, (float) y);
            checked { ++index2; }
          }
        }
        ThemeModule.G.ResetClip();
        checked { ++index1; }
      }
      rect = new Rectangle(0, 0, this.Width, this.ItemHeight);
      this.GB1 = new LinearGradientBrush(rect, Color.FromArgb(60, 60, 60), Color.FromArgb(55, 55, 55), 90f);
      ThemeModule.G.FillRectangle((Brush) this.GB1, rect);
      ThemeModule.G.DrawRectangle(this.P3, 1, 1, checked (this.Width - 22), checked (this.ItemHeight - 2));
      int y2 = Math.Min(checked (this.VS.Maximum + this.ItemHeight - num1), this.Height);
      int num7 = checked (this._Columns.Count - 1);
      int index3 = 0;
      while (index3 <= num7)
      {
        NSListView.NSListViewColumnHeader column = this.Columns[index3];
        int y = checked ((int) Math.Round(unchecked ((double) this.ItemHeight / 2.0 - (double) ThemeModule.G.MeasureString(column.Text, this.Font).Height / 2.0)));
        int columnOffset = this.ColumnOffsets[index3];
        ThemeModule.G.DrawString(column.Text, this.Font, Brushes.Black, (float) checked (columnOffset + 1), (float) checked (y + 1));
        ThemeModule.G.DrawString(column.Text, this.Font, Brushes.WhiteSmoke, (float) columnOffset, (float) y);
        ThemeModule.G.DrawLine(this.P2, checked (columnOffset - 3), 0, checked (columnOffset - 3), y2);
        ThemeModule.G.DrawLine(this.P3, checked (columnOffset - 2), 0, checked (columnOffset - 2), this.ItemHeight);
        checked { ++index3; }
      }
      ThemeModule.G.DrawRectangle(this.P2, 0, 0, checked (this.Width - 1), checked (this.Height - 1));
      ThemeModule.G.DrawLine(this.P2, 0, this.ItemHeight, this.Width, this.ItemHeight);
      ThemeModule.G.DrawLine(this.P2, checked (this.VS.Location.X - 1), 0, checked (this.VS.Location.X - 1), this.Height);
    }

    protected override void OnMouseWheel(MouseEventArgs e)
    {
      this.VS.Value = Math.Max(Math.Min(checked (this.VS.Value + -(unchecked (checked (e.Delta * SystemInformation.MouseWheelScrollLines) / 120) * unchecked (this.ItemHeight / 2))), this.VS.Maximum), this.VS.Minimum);
      base.OnMouseWheel(e);
    }

    public class NSListViewItem
    {
      protected Guid UniqueId;

      public string Text { get; set; }

      [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
      public List<NSListView.NSListViewSubItem> SubItems { get; set; }

      public NSListViewItem()
      {
        this.SubItems = new List<NSListView.NSListViewSubItem>();
        this.UniqueId = Guid.NewGuid();
      }

      public override string ToString() => this.Text;

      public override bool Equals(object obj) => obj is NSListView.NSListViewItem && ((NSListView.NSListViewItem) obj).UniqueId == this.UniqueId;
    }

    public class NSListViewSubItem
    {
      public string Text { get; set; }

      public override string ToString() => this.Text;
    }

    public class NSListViewColumnHeader
    {
      public NSListViewColumnHeader() => this.Width = 60;

      public string Text { get; set; }

      public int Width { get; set; }

      public override string ToString() => this.Text;
    }
  }
}
