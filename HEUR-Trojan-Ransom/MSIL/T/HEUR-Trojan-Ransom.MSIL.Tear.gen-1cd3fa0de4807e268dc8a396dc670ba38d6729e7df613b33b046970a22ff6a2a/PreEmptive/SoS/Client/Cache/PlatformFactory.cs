// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Cache.PlatformFactory
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using PreEmptive.Analytics.NET;
using System;

namespace PreEmptive.SoS.Client.Cache
{
  public static class PlatformFactory
  {
    public static PlatformClient GetPlatformClient(
      Configuration apiConfiguration,
      bool useLogging)
    {
      int A_1 = 7;
      int num1 = -30998;
      int num2 = num1;
      num1 = -30998;
      int num3 = num1;
      PlatformClient platformClient;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_15:
          return platformClient;
        default:
          if (true)
            ;
          if (false)
            ;
          platformClient = (PlatformClient) null;
          try
          {
            int num4 = 1;
            while (true)
            {
              int num5;
              PAClient paClient;
              switch (num4)
              {
                case 0:
                  paClient = new PAClient(apiConfiguration);
                  break;
                case 1:
                  switch (0)
                  {
                    case 0:
                      goto label_7;
                    default:
                      continue;
                  }
                case 2:
                  goto label_15;
                case 3:
                  num5 = 0;
                  num4 = num5;
                  continue;
                case 4:
                  paClient = new PAClient(apiConfiguration, (ILogger) new Logger(LoggingLevel.Info));
                  break;
                default:
label_7:
                  if (!useLogging)
                  {
                    num5 = 3;
                    num4 = num5;
                    continue;
                  }
                  num5 = 4;
                  num4 = num5;
                  continue;
              }
              platformClient = (PlatformClient) paClient;
              num5 = 2;
              num4 = num5;
            }
          }
          catch (Exception ex)
          {
            throw new PlatformNotSupportedException(Utils.a("\uF8BA튼쪾귀\uA7C2\uE5C4꧆ꛈ뿊\uEDCC곎ꏐ뛒듔ꏖ볘ﯚ跜點ꋠ迢賤苦蟨\u9FEA췬觮黰臲헴菶釸鋺軼\uDFFE焀漂搄猆漈搊缌戎㼐", A_1), ex);
          }
      }
    }
  }
}
