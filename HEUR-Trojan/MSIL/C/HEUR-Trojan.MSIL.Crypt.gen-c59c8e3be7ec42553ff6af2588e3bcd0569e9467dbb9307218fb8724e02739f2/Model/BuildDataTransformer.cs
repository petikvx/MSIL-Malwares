// Decompiled with JetBrains decompiler
// Type: Cradiator.Model.BuildDataTransformer
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Config;
using Cradiator.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;

namespace Cradiator.Model
{
  public class BuildDataTransformer : IConfigObserver
  {
    private Regex _projectNameRegEx;
    private Regex _categoryRegEx;
    private Regex _serverNameRegEx;

    public BuildDataTransformer(IConfigSettings configSettings)
    {
      this.SetLocalValuesFromConfig(configSettings);
      configSettings.AddObserver((IConfigObserver) this);
    }

    public IEnumerable<ProjectStatus> Transform(string xml) => xml.IsEmpty() ? (IEnumerable<ProjectStatus>) new List<ProjectStatus>() : (IEnumerable<ProjectStatus>) XDocument.Parse(xml.Replace('\n', ' ').Trim()).Elements((XName) "Projects").Elements<XElement>((XName) "Project").Select(project => new
    {
      project = project,
      name = project.Attribute((XName) "name").GetValue()
    }).Select(_param1 => new
    {
      \u003C\u003Eh__TransparentIdentifier0 = _param1,
      category = _param1.project.Attribute((XName) "category").GetValue()
    }).Select(_param1 => new
    {
      \u003C\u003Eh__TransparentIdentifier1 = _param1,
      serverName = _param1.\u003C\u003Eh__TransparentIdentifier0.project.Attribute((XName) "serverName").GetValue()
    }).Where(_param1 => this._projectNameRegEx.Match(_param1.\u003C\u003Eh__TransparentIdentifier1.\u003C\u003Eh__TransparentIdentifier0.name).Success).Where(_param1 => this._categoryRegEx.Match(_param1.\u003C\u003Eh__TransparentIdentifier1.category).Success).Where(_param1 => this._serverNameRegEx.Match(_param1.serverName).Success).Select(_param1 => new ProjectStatus(_param1.\u003C\u003Eh__TransparentIdentifier1.\u003C\u003Eh__TransparentIdentifier0.name)
    {
      CurrentMessage = _param1.\u003C\u003Eh__TransparentIdentifier1.\u003C\u003Eh__TransparentIdentifier0.project.Attribute((XName) "CurrentMessage").GetValue(),
      LastBuildStatus = _param1.\u003C\u003Eh__TransparentIdentifier1.\u003C\u003Eh__TransparentIdentifier0.project.Attribute((XName) "lastBuildStatus").GetValue(),
      ProjectActivity = new ProjectActivity(_param1.\u003C\u003Eh__TransparentIdentifier1.\u003C\u003Eh__TransparentIdentifier0.project.Attribute((XName) "activity").GetValue()),
      ServerName = _param1.\u003C\u003Eh__TransparentIdentifier1.\u003C\u003Eh__TransparentIdentifier0.project.Attribute((XName) "serverName").GetValue(),
      LastBuildTime = XmlConvert.ToDateTime(_param1.\u003C\u003Eh__TransparentIdentifier1.\u003C\u003Eh__TransparentIdentifier0.project.Attribute((XName) "lastBuildTime").GetValue(), XmlDateTimeSerializationMode.Local)
    }).GroupJoin(XDocument.Parse(xml).Elements((XName) "Projects").Elements<XElement>((XName) "Project").Elements<XElement>((XName) "messages").Elements<XElement>((XName) "message").Where<XElement>((Func<XElement, bool>) (message => message.Attribute((XName) "kind").GetValue() == "Breakers")).Select(message => new
    {
      Message = message.Attribute((XName) "text").GetValue(),
      ProjectName = message.Parent.Parent.Attribute((XName) "name").GetValue()
    }), (Func<ProjectStatus, string>) (p => p.Name), m => m.ProjectName, (p, j) => new
    {
      p = p,
      j = j
    }).SelectMany(_param1 => _param1.j.DefaultIfEmpty(), (_param1, m) => new ProjectStatus(_param1.p.Name)
    {
      CurrentMessage = m != null ? m.Message : _param1.p.CurrentMessage,
      LastBuildStatus = _param1.p.LastBuildStatus,
      ProjectActivity = _param1.p.ProjectActivity,
      ServerName = _param1.p.ServerName,
      LastBuildTime = _param1.p.LastBuildTime
    }).ToArray<ProjectStatus>();

    public void ConfigUpdated(ConfigSettings newSettings) => this.SetLocalValuesFromConfig((IConfigSettings) newSettings);

    private void SetLocalValuesFromConfig(IConfigSettings newSettings)
    {
      this._projectNameRegEx = new Regex(newSettings.ProjectNameRegEx);
      this._categoryRegEx = new Regex(newSettings.CategoryRegEx);
      this._serverNameRegEx = new Regex(newSettings.ServerNameRegEx);
    }
  }
}
