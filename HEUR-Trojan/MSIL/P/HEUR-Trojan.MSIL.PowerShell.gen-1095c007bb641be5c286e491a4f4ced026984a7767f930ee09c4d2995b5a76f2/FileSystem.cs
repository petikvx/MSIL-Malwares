// Decompiled with JetBrains decompiler
// Type: HeavyDuck.FileSystem
// Assembly: RemotingFieldCachedD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EDD4CF72-357A-47DC-BB8E-50FC31FC092E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-1095c007bb641be5c286e491a4f4ced026984a7767f930ee09c4d2995b5a76f2.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Permissions;

namespace HeavyDuck
{
  public static class FileSystem
  {
    private static FileSystemInfo CreateInfo(string path)
    {
      path = !string.IsNullOrEmpty(path) ? Path.GetFullPath(path) : throw new ArgumentNullException(nameof (path));
      return !File.Exists(path) && Directory.Exists(path) ? (FileSystemInfo) new DirectoryInfo(path) : (FileSystemInfo) new FileInfo(path);
    }

    public static IList<AlternateDataStreamInfo> ListAlternateDataStreams(
      this FileSystemInfo file)
    {
      if (file == null)
        throw new ArgumentNullException(nameof (file));
      string path = file.Exists ? file.FullName : throw new FileNotFoundException((string) null, file.FullName);
      new FileIOPermission(FileIOPermissionAccess.Read, path).Demand();
      return (IList<AlternateDataStreamInfo>) SafeNativeMethods.ListStreams(path).Select<SafeNativeMethods.Win32StreamInfo, AlternateDataStreamInfo>((Func<SafeNativeMethods.Win32StreamInfo, AlternateDataStreamInfo>) (s => new AlternateDataStreamInfo(path, s))).ToList<AlternateDataStreamInfo>().AsReadOnly();
    }

    public static IList<AlternateDataStreamInfo> ListAlternateDataStreams(
      string filePath)
    {
      return !string.IsNullOrEmpty(filePath) ? FileSystem.CreateInfo(filePath).ListAlternateDataStreams() : throw new ArgumentNullException(nameof (filePath));
    }

    public static bool AlternateDataStreamExists(this FileSystemInfo file, string streamName)
    {
      if (file == null)
        throw new ArgumentNullException(nameof (file));
      SafeNativeMethods.ValidateStreamName(streamName);
      return -1 != SafeNativeMethods.SafeGetFileAttributes(SafeNativeMethods.BuildStreamPath(file.FullName, streamName));
    }

    public static bool AlternateDataStreamExists(string filePath, string streamName) => !string.IsNullOrEmpty(filePath) ? FileSystem.CreateInfo(filePath).AlternateDataStreamExists(streamName) : throw new ArgumentNullException(nameof (filePath));

    public static AlternateDataStreamInfo GetAlternateDataStream(
      this FileSystemInfo file,
      string streamName,
      FileMode mode)
    {
      if (file == null)
        throw new ArgumentNullException(nameof (file));
      if (!file.Exists)
        throw new FileNotFoundException((string) null, file.FullName);
      SafeNativeMethods.ValidateStreamName(streamName);
      new FileIOPermission(FileMode.Open == mode ? FileIOPermissionAccess.Read : FileIOPermissionAccess.Read | FileIOPermissionAccess.Write, file.FullName).Demand();
      string str = SafeNativeMethods.BuildStreamPath(file.FullName, streamName);
      bool exists = -1 != SafeNativeMethods.SafeGetFileAttributes(str);
      return new AlternateDataStreamInfo(file.FullName, streamName, str, exists);
    }

    public static AlternateDataStreamInfo GetAlternateDataStream(
      this FileSystemInfo file,
      string streamName)
    {
      return file.GetAlternateDataStream(streamName, FileMode.OpenOrCreate);
    }

    public static AlternateDataStreamInfo GetAlternateDataStream(
      string filePath,
      string streamName,
      FileMode mode)
    {
      if (string.IsNullOrEmpty(filePath))
        throw new ArgumentNullException(nameof (filePath));
      return FileSystem.CreateInfo(filePath).GetAlternateDataStream(streamName, mode);
    }

    public static AlternateDataStreamInfo GetAlternateDataStream(
      string filePath,
      string streamName)
    {
      return FileSystem.GetAlternateDataStream(filePath, streamName, FileMode.OpenOrCreate);
    }

    public static bool DeleteAlternateDataStream(this FileSystemInfo file, string streamName)
    {
      if (file == null)
        throw new ArgumentNullException(nameof (file));
      SafeNativeMethods.ValidateStreamName(streamName);
      new FileIOPermission(FileIOPermissionAccess.Write, file.FullName).Demand();
      bool flag = false;
      if (file.Exists)
      {
        string name = SafeNativeMethods.BuildStreamPath(file.FullName, streamName);
        if (-1 != SafeNativeMethods.SafeGetFileAttributes(name))
          flag = SafeNativeMethods.SafeDeleteFile(name);
      }
      return flag;
    }

    public static bool DeleteAlternateDataStream(string filePath, string streamName) => !string.IsNullOrEmpty(filePath) ? FileSystem.CreateInfo(filePath).DeleteAlternateDataStream(streamName) : throw new ArgumentNullException(nameof (filePath));
  }
}
