// Decompiled with JetBrains decompiler
// Type: 咟㾏简㥍륤ꑏ＝
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79CC5886-3FF3-4BA2-A3E6-9E50089A921D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-5a26181f2f36991d9055db38b70c0df2d166b99d1714fb7a14978e2e0420b71d.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

internal static class \uEB82咟㾏简㥍륤ꑏ\uFF1D
{
  [DllImport("ntdll.dll", EntryPoint = "NtQueryInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  private static extern int Ḁ푨䌋\uE7ABᤀ闼绳\u20AD(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength,
    out int ReturnLength);

  [DllImport("ntdll.dll", EntryPoint = "NtSetInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  private static extern uint 믦굢㲎ீ㖵尶渌ᅑ(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength);

  [DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
  private static extern bool \uF63C\uE87Aꭖദ돹쒇\uFAF5鴔(IntPtr hObject);

  [DllImport("kernel32.dll", EntryPoint = "IsDebuggerPresent")]
  private static extern bool 琥\u28AF\uEAE7심㪎撶똁ᐸ();

  [DllImport("kernel32.dll", EntryPoint = "OutputDebugString")]
  private static extern int \uE6FAᘤᶞﻢ隨\uED75輢홱(string str);

  public static void ԅ녫쨘ᄅૃ\uF5E2蜎脞()
  {
    if (Environment.GetEnvironmentVariable("COR_ENABLE_PROFILING") != null || Environment.GetEnvironmentVariable("COR_PROFILER") != null)
      Environment.FailFast("Profiler detected");
    Thread thread = new Thread(new ParameterizedThreadStart(\uEB82咟㾏简㥍륤ꑏ\uFF1D.\u1AF9曆\uF8B5\u0FC9얙ⴟ珞볮));
    thread.IsBackground = true;
    int num = 7 + 8 + (5 - 6) - 13;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_5;
        case 1:
          thread.Start((object) null);
          num = ~-8 - 7;
          continue;
        default:
          goto label_6;
      }
    }
label_5:
    return;
label_6:;
  }

  private static void \u1AF9曆\uF8B5\u0FC9얙ⴟ珞볮(object thread)
  {
    if (!(thread is Thread thread1))
    {
      thread1 = new Thread(new ParameterizedThreadStart(\uEB82咟㾏简㥍륤ꑏ\uFF1D.\u1AF9曆\uF8B5\u0FC9얙ⴟ珞볮));
      thread1.IsBackground = true;
      thread1.Start((object) Thread.CurrentThread);
      Thread.Sleep(500);
    }
label_2:
    int num1;
    if (Debugger.IsAttached || Debugger.IsLogging())
    {
      Environment.FailFast("Debugger detected (Managed)");
      num1 = ~-9 - 8;
    }
    else
      goto label_5;
label_4:
    while (true)
    {
      switch (num1)
      {
        case 1:
          Thread.Sleep(1000);
          num1 = ~---4;
          continue;
        case 2:
          Environment.FailFast("Loop broken");
          num1 = --(14 + ~(4 + 8));
          continue;
        case 3:
          goto label_2;
        default:
          goto label_5;
      }
    }
label_5:
    int num2 = thread1.IsAlive ? 1 : 0;
    num1 = ~(--2 - (9 - 5));
    if (num2 == 0)
    {
      num1 = -~~-2;
      goto label_4;
    }
    else
      goto label_4;
  }
}
