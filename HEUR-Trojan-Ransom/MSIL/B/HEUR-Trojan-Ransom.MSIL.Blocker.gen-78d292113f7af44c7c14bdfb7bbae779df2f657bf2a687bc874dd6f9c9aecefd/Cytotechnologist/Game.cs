// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: CustomA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ABC0B0F-8965-48BE-A39F-300B4A85D17D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-78d292113f7af44c7c14bdfb7bbae779df2f657bf2a687bc874dd6f9c9aecefd.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206D⁮⁪⁭⁫​⁪‮‏‏‍⁫‭‫‍‎⁮⁪‪‫‮‏‫‮⁯​‬⁫‪‪⁯‭‏‏‎​‍‬⁫‭‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 736110319;
        int index;
        PlayerState[] playerStates;
        bool finished2;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 252519488)) % 14U)
          {
            case 0:
              playerState = playerStates[index];
              num1 = 2066851950;
              continue;
            case 1:
              num1 = (int) num2 * 251281381 ^ 1911400516;
              continue;
            case 2:
              int num3 = playerState.State != State.Playing ? 1435617278 : (num3 = 1709480684);
              num1 = num3 ^ (int) num2 * -1040505923;
              continue;
            case 3:
              index = 0;
              num1 = (int) num2 * 896464123 ^ 2113887312;
              continue;
            case 4:
              num1 = (int) num2 * -1858032839 ^ -2066337491;
              continue;
            case 6:
              ++index;
              num1 = 535052807;
              continue;
            case 7:
              int num4 = !finished1 ? -1148958197 : (num4 = -2018995252);
              num1 = num4 ^ (int) num2 * 136917355;
              continue;
            case 8:
              playerStates = this._playerStates;
              num1 = 962836437;
              continue;
            case 9:
              int num5;
              num1 = num5 = index < playerStates.Length ? 288423794 : (num5 = 33786932);
              continue;
            case 10:
              finished2 = true;
              num1 = (int) num2 * 329335123 ^ -1952206330;
              continue;
            case 11:
              goto label_1;
            case 12:
              finished2 = false;
              num1 = (int) num2 * 1720366294 ^ -2112465509;
              continue;
            case 13:
              finished2 = true;
              num1 = (int) num2 * -251625272 ^ 409723055;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -814841675;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1869082276)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -1045501952 ^ -701979845;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = -1922576518;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -24594615)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -947315151 ^ 1232781423;
            continue;
          case 1:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -1781520949 ^ 442800653;
            continue;
          case 2:
            this.Winners.Clear();
            num1 = (int) num2 * -1375075214 ^ -1914157171;
            continue;
          case 3:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 1970043105 ^ -867877435;
            continue;
          case 4:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 507577689 ^ -1946298280;
            continue;
          case 5:
            this.ShuffleCards();
            num1 = (int) num2 * -328426853 ^ 816964736;
            continue;
          case 6:
            goto label_1;
          case 7:
            goto label_3;
          case 8:
            this.Losers.Clear();
            num1 = (int) num2 * 1351372677 ^ -411414820;
            continue;
          case 9:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1708869905 ^ -799717644;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = -1327162452;
      int planningCardsCount;
      int num2;
      bool flag1;
      Player player;
      PlayerState playerState;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1430833505)) % 26U)
        {
          case 0:
            flag2 = num2 > 0;
            num1 = -52577449;
            continue;
          case 1:
            playerState.Sprint = 0;
            num1 = (int) num3 * 1881988551 ^ -1490987479;
            continue;
          case 2:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * 1031504438 ^ -606379583;
            continue;
          case 3:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -975295121 ^ -60687877;
            continue;
          case 4:
            num2 = 0;
            num1 = -1244239142;
            continue;
          case 5:
            goto label_3;
          case 6:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -289758285 ^ 749591218;
            continue;
          case 7:
            goto label_1;
          case 8:
            ++index;
            num1 = (int) num3 * -1545814378 ^ -1539102406;
            continue;
          case 9:
            num1 = (int) num3 * 1793090595 ^ -618566825;
            continue;
          case 10:
            int num4 = !player.UseOneMorePlanningSprint ? -668068957 : (num4 = -1587172383);
            num1 = num4 ^ (int) num3 * -1920411195;
            continue;
          case 11:
            flag1 = index < this.Players.Length;
            num1 = -1823247132;
            continue;
          case 12:
            playerState.Sprint = 1;
            num1 = (int) num3 * 496333447 ^ 780042215;
            continue;
          case 13:
            num1 = (int) num3 * 1017383930 ^ -465303844;
            continue;
          case 14:
            int num5 = !flag2 ? 1578279389 : (num5 = 1662396790);
            num1 = num5 ^ (int) num3 * 1429243531;
            continue;
          case 15:
            int num6 = flag1 ? 1011649231 : (num6 = 1755768206);
            num1 = num6 ^ (int) num3 * 1499553032;
            continue;
          case 16:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * -1516012932 ^ -1158922600;
            continue;
          case 17:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = -2019005929;
            continue;
          case 18:
            playerState.State = State.Playing;
            num1 = (int) num3 * 1917241617 ^ 1739587223;
            continue;
          case 19:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -1138454877;
            continue;
          case 20:
            num1 = -1855932955;
            continue;
          case 21:
            num1 = (int) num3 * 306694299 ^ 1216900355;
            continue;
          case 22:
            num1 = (int) num3 * 410619160 ^ 1667620308;
            continue;
          case 23:
            num1 = -306055724;
            continue;
          case 24:
            int num7 = planningCardsCount != 0 ? -720834044 : (num7 = -192670121);
            num1 = num7 ^ (int) num3 * 831905920;
            continue;
          case 25:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 52607316 ^ 2094198639;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 1223819520;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1904505782)) % 12U)
        {
          case 0:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 810466403 ^ 128089218;
            continue;
          case 1:
            this.Print((object) Game.\u200B⁯‎‏‪⁮‪‭‮‮​‭‌‍‍‫‍⁭‌⁬‍⁬‫‍‮​‎⁯‫‪‌⁪‎⁫‮​‫‍⁬‮‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 2077478797;
            continue;
          case 3:
            this._currentPlayer = 0;
            flag = this._currentTurn > 0;
            num1 = (int) num2 * -1460911409 ^ 386783278;
            continue;
          case 4:
            num1 = (int) num2 * -1941938178 ^ 567875795;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3 = this._currentPlayer < this.Players.Length ? 415282270 : (num3 = 2015926402);
            num1 = num3 ^ (int) num2 * -624285629;
            continue;
          case 7:
            num1 = (int) num2 * -1842102739 ^ 277743571;
            continue;
          case 8:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u200D‍‎‮⁭‎⁯‌⁬‏‮⁬‬⁪⁪⁬⁬‫⁮‬‪​‎‎⁭‏⁪‮⁯⁭‍‎⁪‎⁪‫​‎⁫⁬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -2130679869 ^ -275298927;
            continue;
          case 9:
            int num4 = !flag ? -280829359 : (num4 = -1635255560);
            num1 = num4 ^ (int) num2 * -1566625678;
            continue;
          case 10:
            num1 = (int) num2 * -1529882955 ^ 1415918807;
            continue;
          case 11:
            num1 = (int) num2 * -433765342 ^ -377267644;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      this.PlayerTurn(this._currentPlayer);
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1121338502;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        Player player;
        bool flag1;
        bool flag2;
        Card card;
        int num3;
        int index;
        int num4;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        PlayerState playerState2;
        bool flag8;
        bool flag9;
        bool flag10;
        int num5;
        switch ((num2 = (uint) (num1 ^ -456640031)) % 80U)
        {
          case 0:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u200B⁫⁭⁪‎⁬⁪⁯⁪⁯​‮⁭⁭​⁬‏‮​‪‭‮‌⁫‏‎⁬⁫⁪‭‌⁮‪‫‫⁪‌⁫‮⁫‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -242833812 ^ -1912344934;
            continue;
          case 1:
            flag5 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -271027485;
            continue;
          case 2:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * -650531562 ^ -914464648;
            continue;
          case 3:
            num1 = (int) num2 * -1370457850 ^ -187447316;
            continue;
          case 4:
            num1 = -1927376195;
            continue;
          case 5:
            playerState1.State = State.Lose;
            flag8 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1435699992 ^ -167626795;
            continue;
          case 6:
            num4 = 0;
            num1 = (int) num2 * -2087261919 ^ 138423512;
            continue;
          case 7:
            num1 = (int) num2 * 397176628 ^ -1852135710;
            continue;
          case 8:
            flag7 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1449135232;
            continue;
          case 9:
            int num6 = flag6 ? -1790337332 : (num6 = -32525597);
            num1 = num6 ^ (int) num2 * -1022916514;
            continue;
          case 10:
            num1 = -1521661001;
            continue;
          case 11:
            int num7 = card.Impact - player.PlannedForCard(card.Type);
            flag1 = num7 < this.Rules.StayOnSprintMinDiff;
            num3 = Game.\u200B⁫⁭⁪‎⁬⁪⁯⁪⁯​‮⁭⁭​⁬‏‮​‪‭‮‌⁫‏‎⁬⁫⁪‭‌⁮‪‫‫⁪‌⁫‮⁫‮(0, num7);
            num1 = (int) num2 * -1147148794 ^ -759523920;
            continue;
          case 12:
            ++index;
            num1 = -888382631;
            continue;
          case 13:
            num1 = (int) num2 * 1953638303 ^ -10956084;
            continue;
          case 14:
            ++num4;
            num1 = -49642423;
            continue;
          case 15:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag6 ? (object) "ALL " : (object) "", flag9 ? (object) "receives" : (object) "pays", (object) Game.\u202E‭‫‏⁯‭‌‫‌⁪⁫‎‬⁮‍⁬‮⁮⁭‎‭‌‫‎‌⁫​⁬‭⁬‏⁪⁯⁮‪⁬⁭​‭⁬‮(num3), flag1 ? (object) "advance" : (object) "stay");
            num1 = -42209307;
            continue;
          case 16:
            int num8 = flag3 ? -1780212112 : (num8 = -578426953);
            num1 = num8 ^ (int) num2 * -541929472;
            continue;
          case 17:
            num1 = (int) num2 * -1897639864 ^ 54063262;
            continue;
          case 18:
            this.Losers.Add(index);
            num1 = (int) num2 * 1541214198 ^ -370552727;
            continue;
          case 19:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1564705663 ^ -349835015;
            continue;
          case 20:
            int num9 = !this.Rules.OnlyOneWinner ? -437536745 : (num9 = -1183859385);
            num1 = num9 ^ (int) num2 * 59081099;
            continue;
          case 21:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 22:
            playerState2.State = State.Lose;
            int num10;
            num1 = num10 = !this.Losers.Contains(index) ? -833444221 : (num10 = -2073283003);
            continue;
          case 23:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1979638255 ^ -155279358;
            continue;
          case 24:
            num1 = -1054079519;
            continue;
          case 25:
            flag2 = flag1;
            num1 = -1721055766;
            continue;
          case 26:
            num1 = (int) num2 * -1051962100 ^ 1386315610;
            continue;
          case 27:
            flag3 = playerState2.Resources >= 0;
            num1 = (int) num2 * -951187130 ^ -476103021;
            continue;
          case 28:
            num1 = (int) num2 * -399783936 ^ 1119218486;
            continue;
          case 29:
            int num11 = playerState1.Resources < 0 ? 313973746 : (num11 = 118696379);
            num1 = num11 ^ (int) num2 * -2032288159;
            continue;
          case 30:
            int num12 = !flag10 ? 999992438 : (num12 = 1114251614);
            num1 = num12 ^ (int) num2 * 1502144174;
            continue;
          case 31:
            num1 = (int) num2 * 486812116 ^ 206256869;
            continue;
          case 32:
            num1 = (int) num2 * -1654566862 ^ -407918948;
            continue;
          case 33:
            int num13 = !flag7 ? -1729407855 : (num13 = -1895726754);
            num1 = num13 ^ (int) num2 * 1369500093;
            continue;
          case 34:
            int num14 = !flag5 ? -1453891261 : (num14 = -1452792567);
            num1 = num14 ^ (int) num2 * -2143144326;
            continue;
          case 35:
            flag1 = true;
            num1 = -1784121268;
            continue;
          case 36:
            goto label_1;
          case 37:
            num1 = (int) num2 * -1857112720 ^ 960098520;
            continue;
          case 38:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200D‍‎‮⁭‎⁯‌⁬‏‮⁬‬⁪⁪⁬⁬‫⁮‬‪​‎‎⁭‏⁪‮⁯⁭‍‎⁪‎⁪‫​‎⁫⁬‮("\t", playerState3 != null ? Game.\u200B‭‬‏⁯‪⁯‭⁪⁫‎‬⁮‏​‏⁪⁫‮‮​‍‍‍⁯‮‍⁫⁬⁫⁯‬‬‌‮‮‮​⁭‫‮((object) playerState3) : (string) null));
            num1 = -1757715096;
            continue;
          case 39:
            num1 = -1802124160;
            continue;
          case 40:
            int num15;
            num1 = num15 = index < this._playerStates.Length ? -745131383 : (num15 = -523731600);
            continue;
          case 41:
            int num16;
            num1 = num16 = playerState1.Sprint >= 0 ? -194997959 : (num16 = -248916794);
            continue;
          case 42:
            card = this.DrawCard();
            flag9 = card.Impact < 0;
            num1 = (int) num2 * -1249877694 ^ 1469220231;
            continue;
          case 43:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u200D‍‎‮⁭‎⁯‌⁬‏‮⁬‬⁪⁪⁬⁬‫⁮‬‪​‎‎⁭‏⁪‮⁯⁭‍‎⁪‎⁪‫​‎⁫⁬‮("\nPLAYER ", playerIndex.ToString()));
            int num17 = playerState1.State == 0 ? 228507877 : (num17 = 1102114142);
            num1 = num17 ^ (int) num2 * -1430484569;
            continue;
          case 44:
            int num18 = flag8 ? -1909455199 : (num18 = -978095746);
            num1 = num18 ^ (int) num2 * -459831524;
            continue;
          case 45:
            num1 = (int) num2 * 732194015 ^ 412490283;
            continue;
          case 46:
            int num19 = num4 == playerIndex ? -594801660 : (num19 = -217164589);
            num1 = num19 ^ (int) num2 * 1597736332;
            continue;
          case 47:
            flag1 = false;
            num1 = -1783722330;
            continue;
          case 48:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1702850822 ^ 1589031061;
            continue;
          case 49:
            num1 = (int) num2 * 917817913 ^ 1989979124;
            continue;
          case 50:
            flag1 = true;
            num1 = (int) num2 * -1218493649 ^ 519550207;
            continue;
          case 51:
            num1 = -448954081;
            continue;
          case 52:
            num1 = (int) num2 * 791090117 ^ -925294068;
            continue;
          case 53:
            this._finished = true;
            num1 = (int) num2 * 975780577 ^ -1097334286;
            continue;
          case 54:
            num1 = (int) num2 * -1752986049 ^ 883097252;
            continue;
          case 55:
            num1 = (int) num2 * -965200649 ^ -1163510854;
            continue;
          case 56:
            flag4 = num4 < this._playerStates.Length;
            num1 = -281345297;
            continue;
          case 57:
            goto label_3;
          case 58:
            int num20;
            num1 = num20 = this.Losers.Contains(num4) ? -1656535262 : (num20 = -162413538);
            continue;
          case 59:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -1786205668 ^ -559789906;
            continue;
          case 60:
            num1 = -1106696145;
            continue;
          case 61:
            num1 = -1693282325;
            continue;
          case 62:
            int num21 = !flag4 ? -1377758868 : (num21 = -397833065);
            num1 = num21 ^ (int) num2 * -1030361021;
            continue;
          case 63:
            ++playerState1.Sprint;
            num1 = (int) num2 * -127636095 ^ -2121859619;
            continue;
          case 64:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -695517883 ^ -955301148;
            continue;
          case 65:
            num1 = (int) num2 * -1800912815 ^ -551484441;
            continue;
          case 66:
            num1 = (int) num2 * -1286017300 ^ -1595312769;
            continue;
          case 67:
            index = 0;
            num1 = -888382631;
            continue;
          case 68:
            num1 = (int) num2 * -1729684423 ^ 1605560492;
            continue;
          case 69:
            num1 = (int) num2 * 1967982930 ^ 1105455700;
            continue;
          case 70:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 295016313 ^ 385916615;
            continue;
          case 71:
            num1 = -57173064;
            continue;
          case 72:
            ++playerState1.Sprint;
            num1 = (int) num2 * -676934642 ^ 1019516576;
            continue;
          case 73:
            num1 = (int) num2 * -803043834 ^ 1557334366;
            continue;
          case 74:
            num1 = (int) num2 * 1946769666 ^ -1991450848;
            continue;
          case 75:
            int num22 = flag2 ? 1961627429 : (num22 = 149649228);
            num1 = num22 ^ (int) num2 * 415842932;
            continue;
          case 76:
            playerState1.Resources -= num3;
            num1 = (int) num2 * -2096239572 ^ 1995555148;
            continue;
          case 77:
            num3 = card.Impact;
            num1 = (int) num2 * 904611548 ^ 1801109579;
            continue;
          case 78:
            num1 = (int) num2 * -1804589426 ^ -1169768992;
            continue;
          case 79:
            this.Losers.Add(num4);
            num1 = (int) num2 * 1186832933 ^ -1440800080;
            continue;
          default:
            goto label_85;
        }
        flag6 = num5 != 0;
        flag10 = !flag9;
        num1 = -1300962929;
      }
label_3:
      return;
label_85:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1530948412;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2090666152)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -312074657 ^ -270731872;
            continue;
          case 1:
            card1 = this._deck[0];
            num1 = 1034244225;
            continue;
          case 3:
            num1 = (int) num2 * 1921632187 ^ 38012934;
            continue;
          case 4:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -2079618608 ^ 40259275;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3 = this._deck.Count <= 0 ? -1006596245 : (num3 = -91237099);
            num1 = num3 ^ (int) num2 * -2053589624;
            continue;
          case 7:
            card2 = card1;
            num1 = (int) num2 * 808367086 ^ 463461129;
            continue;
          case 8:
            this.ShuffleCards();
            num1 = (int) num2 * -743644813 ^ 1891785164;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 1983978575;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 597162313)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 1694203211 ^ 2049502664;
            continue;
          case 1:
            str2 = str1;
            num1 = (int) num2 * 2053210602 ^ -688868617;
            continue;
          case 2:
            goto label_1;
          case 3:
            ++index;
            num1 = (int) num2 * -1410358029 ^ 1723265765;
            continue;
          case 4:
            str1 = "";
            num1 = (int) num2 * -1766134924 ^ 1692425619;
            continue;
          case 5:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? 809336348 : (num3 = 1592761644);
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * -1819235166 ^ 1015543769;
            continue;
          case 8:
            num1 = (int) num2 * 1886601812 ^ 434738934;
            continue;
          case 9:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200B‭‬‏⁯‪⁯‭⁪⁫‎‬⁮‏​‏⁪⁫‮‮​‍‍‍⁯‮‍⁫⁬⁫⁯‬‬‌‮‮‮​⁭‫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200F‪⁯​⁮‬⁯​‮‍⁫⁮‏‍⁭⁭‮⁭​‏⁪‫⁭​⁪⁯‫⁯‍‫‎‍‎‬⁬‫‍⁯⁮‫‮(strArray);
            num1 = 554850168;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = 1806949026;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1213599247)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -40026551 ^ 1419874684;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u200B⁪‭‬‍‫‮‌⁬‌‎⁪‎⁯‮⁪‏⁫⁭⁮‍‫‎‍‌⁮‍​‭⁪​⁪‌⁮‬⁬‫‬⁫‌‮(this._buffer, Game.\u200E‍⁫‎​‫‫⁯‍⁮‪‌‫‌‌⁭‏‪‭‎⁬⁯‭⁯⁮‏⁫⁬‪⁮‪⁭‎⁯‎⁫⁫‌‬⁮‮(Game.\u200B‭‬‏⁯‪⁯‭⁪⁫‎‬⁮‏​‏⁪⁫‮‮​‍‍‍⁯‮‍⁫⁬⁫⁯‬‬‌‮‮‮​⁭‫‮(text), more));

    static Random \u206D⁮⁪⁭⁫​⁪‮‏‏‍⁫‭‫‍‎⁮⁪‪‫‮‏‫‮⁯​‬⁫‪‪⁯‭‏‏‎​‍‬⁫‭‮([In] int obj0) => new Random(obj0);

    static string \u200B⁯‎‏‪⁮‪‭‮‮​‭‌‍‍‫‍⁭‌⁬‍⁬‫‍‮​‎⁯‫‪‌⁪‎⁫‮​‫‍⁬‮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200D‍‎‮⁭‎⁯‌⁬‏‮⁬‬⁪⁪⁬⁬‫⁮‬‪​‎‎⁭‏⁪‮⁯⁭‍‎⁪‎⁪‫​‎⁫⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200B⁫⁭⁪‎⁬⁪⁯⁪⁯​‮⁭⁭​⁬‏‮​‪‭‮‌⁫‏‎⁬⁫⁪‭‌⁮‪‫‫⁪‌⁫‮⁫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202E‭‫‏⁯‭‌‫‌⁪⁫‎‬⁮‍⁬‮⁮⁭‎‭‌‫‎‌⁫​⁬‭⁬‏⁪⁯⁮‪⁬⁭​‭⁬‮([In] int obj0) => Math.Abs(obj0);

    static string \u200B‭‬‏⁯‪⁯‭⁪⁫‎‬⁮‏​‏⁪⁫‮‮​‍‍‍⁯‮‍⁫⁬⁫⁯‬‬‌‮‮‮​⁭‫‮([In] object obj0) => obj0.ToString();

    static string \u200F‪⁯​⁮‬⁯​‮‍⁫⁮‏‍⁭⁭‮⁭​‏⁪‫⁭​⁪⁯‫⁯‍‫‎‍‎‬⁬‫‍⁯⁮‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‍⁫‎​‫‫⁯‍⁮‪‌‫‌‌⁭‏‪‭‎⁬⁯‭⁯⁮‏⁫⁬‪⁮‪⁭‎⁯‎⁫⁫‌‬⁮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200B⁪‭‬‍‫‮‌⁬‌‎⁪‎⁯‮⁪‏⁫⁭⁮‍‫‎‍‌⁮‍​‭⁪​⁪‌⁮‬⁬‫‬⁫‌‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
