// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ByteTokenEncodi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 9BCE2B70-1A4C-43FA-BCC8-8DBBEE1C54F3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0d4b7a493ffb322f46927f4d290740e9157c549cdb50db1ce746065332ed317c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202D‮⁭​‮‏‬‪‏‏​‬​‮⁫⁪‬‮‭‫‌‪⁬‎‍‌‫⁭⁭⁫⁮‌⁫‬⁪⁮⁫‎‪‬‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1503598109;
        bool finished1;
        PlayerState[] playerStates;
        int index;
        bool flag;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1036262917)) % 14U)
          {
            case 0:
              int num3;
              num1 = num3 = index >= playerStates.Length ? 1518205376 : (num3 = 1452334313);
              continue;
            case 1:
              int num4 = !flag ? 1343417002 : (num4 = 595241437);
              num1 = num4 ^ (int) num2 * 532842687;
              continue;
            case 2:
              finished2 = this._finished;
              num1 = (int) num2 * 546408319 ^ 1777233138;
              continue;
            case 3:
              index = 0;
              num1 = (int) num2 * 1341611729 ^ 1030356026;
              continue;
            case 4:
              num1 = (int) num2 * -103962553 ^ -254072061;
              continue;
            case 5:
              finished1 = true;
              num1 = (int) num2 * -1932043532 ^ -72928180;
              continue;
            case 6:
              flag = playerStates[index].State == State.Playing;
              num1 = 576870060;
              continue;
            case 7:
              finished1 = false;
              num1 = (int) num2 * 2043427349 ^ 1873014387;
              continue;
            case 8:
              playerStates = this._playerStates;
              num1 = 959540470;
              continue;
            case 9:
              int num5 = !finished2 ? 679803387 : (num5 = 41723947);
              num1 = num5 ^ (int) num2 * -873212036;
              continue;
            case 10:
              ++index;
              num1 = 1322263175;
              continue;
            case 12:
              finished1 = true;
              num1 = (int) num2 * -753990430 ^ 127896732;
              continue;
            case 13:
              goto label_1;
            default:
              goto label_15;
          }
        }
label_15:
        return finished1;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -370250332;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1914323498)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            this.Losers.Clear();
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * -1334573076 ^ -551560675;
            continue;
          case 3:
            this.ShuffleCards();
            this.Winners.Clear();
            num1 = (int) num2 * -1422401170 ^ -1580490885;
            continue;
          case 4:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -997481152 ^ -1706913719;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = 1987969063;
      int num2;
      PlayerState playerState;
      int planningCardsCount;
      bool flag;
      Player player;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1514878699)) % 21U)
        {
          case 0:
            int num4;
            num1 = num4 = index < this.Players.Length ? 1416181260 : (num4 = 1611135584);
            continue;
          case 1:
            ++index;
            num1 = (int) num3 * 575274409 ^ -304324604;
            continue;
          case 2:
            int num5;
            num1 = num5 = num2 <= 0 ? 187129570 : (num5 = 1697858560);
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num3 * -512433388 ^ 400715184;
            continue;
          case 5:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 1857843720;
            continue;
          case 6:
            goto label_1;
          case 7:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1120554703 ^ 616981484;
            continue;
          case 8:
            num2 = 0;
            num1 = 499986328;
            continue;
          case 9:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1137128727 ^ 1032653801;
            continue;
          case 10:
            num1 = (int) num3 * -1378860744 ^ -196568178;
            continue;
          case 11:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1625605873;
            continue;
          case 12:
            player = this.Players[index];
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = 200024539;
            continue;
          case 13:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 11748816 ^ 436337045;
            continue;
          case 14:
            num1 = (int) num3 * 615443068 ^ -1863674286;
            continue;
          case 15:
            num1 = 2045784242;
            continue;
          case 16:
            flag = planningCardsCount == 0;
            num1 = (int) num3 * -2026043699 ^ 89100173;
            continue;
          case 17:
            int num6 = morePlanningSprint ? 1663279061 : (num6 = 2004453017);
            num1 = num6 ^ (int) num3 * 1649564741;
            continue;
          case 18:
            num1 = (int) num3 * -1194022962 ^ 808181468;
            continue;
          case 19:
            int num7 = flag ? 1416531008 : (num7 = 1525424323);
            num1 = num7 ^ (int) num3 * 633743602;
            continue;
          case 20:
            playerState.Sprint = 1;
            num1 = (int) num3 * -425329492 ^ 687150231;
            continue;
          default:
            goto label_23;
        }
      }
label_3:
      return;
label_23:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -935521868;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1051378559)) % 16U)
        {
          case 0:
            int num3 = !flag2 ? 308462028 : (num3 = 1418461959);
            num1 = num3 ^ (int) num2 * -1848188276;
            continue;
          case 1:
            num1 = (int) num2 * 1022049029 ^ -1131603816;
            continue;
          case 2:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1787839838 ^ -1807456302;
            continue;
          case 3:
            num1 = (int) num2 * -2086900843 ^ -1540342081;
            continue;
          case 4:
            goto label_1;
          case 5:
            ++this._currentPlayer;
            num1 = (int) num2 * -1718116861 ^ 1808731447;
            continue;
          case 6:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1894850751 ^ 956704202;
            continue;
          case 7:
            goto label_3;
          case 8:
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * -1393882347 ^ -1702561671;
            continue;
          case 9:
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -1010767453 ^ -268292127;
            continue;
          case 10:
            num1 = (int) num2 * -1789864289 ^ 192499904;
            continue;
          case 11:
            int num4 = !flag1 ? -1924990156 : (num4 = -1800908122);
            num1 = num4 ^ (int) num2 * 832912379;
            continue;
          case 12:
            this.PlayerTurn(this._currentPlayer);
            num1 = -678461397;
            continue;
          case 13:
            this.Print((object) Game.\u206B⁪‮‮‭‌‏⁭‪​‪‭⁭‬‎⁬‪​‫‌⁯⁮‌⁮‌⁭⁪‬‍‭‭⁭‏​‏‎⁮⁪⁪‍‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -505973837;
            continue;
          case 14:
            this._currentPlayer = 0;
            num1 = (int) num2 * -773501363 ^ -381810081;
            continue;
          case 15:
            this.Print((object) Game.\u200C‭‌‌‮⁭‎⁪‎‌‌‫⁯⁪⁮‏⁭‎⁮‌⁯⁯​‪‮‬⁪​‭‬‫‌⁯⁪⁬⁮‭‮‌⁫‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 284636526 ^ -447015520;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1513778733;
      while (true)
      {
        uint num2;
        Player player;
        PlayerState playerState1;
        bool flag1;
        int num3;
        Card card;
        bool flag2;
        bool flag3;
        bool flag4;
        PlayerState playerState2;
        int index;
        bool flag5;
        bool flag6;
        bool flag7;
        bool onlyOneWinner;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        int num4;
        bool flag12;
        int num5;
        bool flag13;
        bool flag14;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1727672970)) % 82U)
        {
          case 0:
            num1 = (int) num2 * -691045791 ^ 753586604;
            continue;
          case 1:
            playerState1.State = State.Lose;
            int num7 = !this.Losers.Contains(playerIndex) ? 1217303512 : (num7 = 1953779516);
            num1 = num7 ^ (int) num2 * -1232697396;
            continue;
          case 2:
            int num8 = !flag12 ? -1060969971 : (num8 = -1885619781);
            num1 = num8 ^ (int) num2 * -2094227074;
            continue;
          case 3:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1692775230 ^ 244389214;
            continue;
          case 4:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u200D‏‍‫⁬‏‬‬⁯‌⁭⁭⁬‪‌‏⁪‎‮⁮‍‎‪⁭‬‌‮‮‪‬⁫⁬‪‬‎‏‮‍⁮‪‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            flag12 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1323760903 ^ -2111674430;
            continue;
          case 5:
            flag8 = num3 == playerIndex;
            num1 = -360636181;
            continue;
          case 6:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1453617313 ^ -1210878972;
            continue;
          case 7:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -1770956451 ^ 1085543202;
            continue;
          case 8:
            int num9 = flag4 ? -414750535 : (num9 = -1140714387);
            num1 = num9 ^ (int) num2 * -481388938;
            continue;
          case 9:
            int num10 = flag3 ? -1084777293 : (num10 = -458844019);
            num1 = num10 ^ (int) num2 * -54125251;
            continue;
          case 10:
            num1 = -2029519973;
            continue;
          case 11:
            num1 = -281931516;
            continue;
          case 12:
            int num11;
            num1 = num11 = this.Losers.Contains(num3) ? -1444003254 : (num11 = -1972724116);
            continue;
          case 13:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * -292292366 ^ -271648542;
            continue;
          case 14:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 989828061 ^ 50617173;
            continue;
          case 15:
            flag11 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 2141099895 ^ 2003710171;
            continue;
          case 16:
            int num12 = !flag2 ? -775603211 : (num12 = -1541484647);
            num1 = num12 ^ (int) num2 * -1450081474;
            continue;
          case 17:
            num1 = (int) num2 * 1846124246 ^ -252436522;
            continue;
          case 18:
            int num13 = flag14 ? 173599858 : (num13 = 356548196);
            num1 = num13 ^ (int) num2 * 1802249364;
            continue;
          case 19:
            int num14 = !flag8 ? 2031407788 : (num14 = 1074310307);
            num1 = num14 ^ (int) num2 * -87398176;
            continue;
          case 20:
            num1 = -970375488;
            continue;
          case 21:
            num1 = (int) num2 * 191706062 ^ 1213315420;
            continue;
          case 22:
            int num15 = !flag6 ? -343443837 : (num15 = -456749801);
            num1 = num15 ^ (int) num2 * -489518784;
            continue;
          case 23:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 24:
            card = this.DrawCard();
            flag2 = card.Impact < 0;
            num1 = (int) num2 * -1216853560 ^ -871970308;
            continue;
          case 25:
            num1 = (int) num2 * 785960952 ^ 544390320;
            continue;
          case 26:
            flag13 = flag11;
            num1 = -1792374226;
            continue;
          case 27:
            num1 = (int) num2 * -1135209546 ^ 664184322;
            continue;
          case 28:
            num1 = (int) num2 * -1435133174 ^ 107916653;
            continue;
          case 29:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200C‭‌‌‮⁭‎⁪‎‌‌‫⁯⁪⁮‏⁭‎⁮‌⁯⁯​‪‮‬⁪​‭‬‫‌⁯⁪⁬⁮‭‮‌⁫‮("\t", playerState3 != null ? Game.\u206E⁭‫‎‬‍⁯‫​⁮‮⁯‍⁯⁫⁫‌‬⁯⁪‪‌‮‎‫⁫‪⁯⁯‌‎⁫⁮⁭‮⁮⁬‫‍⁬‮((object) playerState3) : (string) null));
            num1 = -1494971989;
            continue;
          case 30:
            flag4 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -1039230356;
            continue;
          case 31:
            playerState1.Resources -= num4;
            flag7 = playerState1.Resources < 0;
            num1 = (int) num2 * 1815359255 ^ 1060159207;
            continue;
          case 32:
            int num16 = !flag13 ? -631668836 : (num16 = -308607104);
            num1 = num16 ^ (int) num2 * 557557562;
            continue;
          case 33:
            goto label_1;
          case 34:
            flag9 = num3 < this._playerStates.Length;
            num1 = -745725354;
            continue;
          case 35:
            flag11 = true;
            num1 = -1860284829;
            continue;
          case 36:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -1908026440 ^ -1259708171;
              continue;
            }
            num6 = 0;
            break;
          case 37:
            this._finished = true;
            num1 = (int) num2 * -412500330 ^ -1923559814;
            continue;
          case 38:
            flag10 = playerState1.State != 0;
            num1 = (int) num2 * -1190353739 ^ -572159978;
            continue;
          case 39:
            num1 = (int) num2 * -900667849 ^ 1202651798;
            continue;
          case 40:
            ++playerState1.Sprint;
            num1 = (int) num2 * 184040440 ^ 1470325180;
            continue;
          case 41:
            num1 = -1311235123;
            continue;
          case 42:
            this.Losers.Add(num3);
            num1 = (int) num2 * 419908661 ^ 1266921000;
            continue;
          case 43:
            num4 = Game.\u200D‏‍‫⁬‏‬‬⁯‌⁭⁭⁬‪‌‏⁪‎‮⁮‍‎‪⁭‬‌‮‮‪‬⁫⁬‪‬‎‏‮‍⁮‪‮(0, num5);
            num1 = (int) num2 * 351703471 ^ -1859910180;
            continue;
          case 44:
            num1 = -1708715740;
            continue;
          case 45:
            flag11 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -583153075 ^ -1790691358;
            continue;
          case 46:
            num1 = (int) num2 * -789001486 ^ -1727327848;
            continue;
          case 47:
            playerState2.State = State.Lose;
            flag5 = !this.Losers.Contains(index);
            num1 = -2067780500;
            continue;
          case 48:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1622902901 ^ 1191634567;
            continue;
          case 49:
            num1 = (int) num2 * -2106927058 ^ -1994389519;
            continue;
          case 50:
            int num17 = flag7 ? -447851781 : (num17 = -1147747867);
            num1 = num17 ^ (int) num2 * -900809928;
            continue;
          case 51:
            num1 = (int) num2 * -1360973039 ^ 459805698;
            continue;
          case 52:
            int num18 = !flag10 ? -873243950 : (num18 = -2130044439);
            num1 = num18 ^ (int) num2 * 585004193;
            continue;
          case 53:
            num1 = (int) num2 * -205070697 ^ 1019829601;
            continue;
          case 54:
            int num19 = flag5 ? 129770677 : (num19 = 1255627622);
            num1 = num19 ^ (int) num2 * 952433613;
            continue;
          case 55:
            goto label_3;
          case 56:
            num1 = (int) num2 * -275842593 ^ -1473001750;
            continue;
          case 57:
            num1 = -931845558;
            continue;
          case 58:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 1323511955 ^ -1455289509;
            continue;
          case 59:
            num4 = card.Impact;
            num1 = (int) num2 * 2074051981 ^ -1655094268;
            continue;
          case 60:
            num1 = (int) num2 * -1747823310 ^ 1826526552;
            continue;
          case 61:
            num1 = (int) num2 * -16307133 ^ -381434184;
            continue;
          case 62:
            this.Print((object) Game.\u200C‭‌‌‮⁭‎⁪‎‌‌‫⁯⁪⁮‏⁭‎⁮‌⁯⁯​‪‮‬⁪​‭‬‫‌⁯⁪⁬⁮‭‮‌⁫‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 2030090047 ^ -1416264014;
            continue;
          case 63:
            ++num3;
            num1 = -466298918;
            continue;
          case 64:
            flag3 = playerState1.Sprint < 0;
            num1 = -1693381403;
            continue;
          case 65:
            int num20 = flag1 ? 843617505 : (num20 = 856945631);
            num1 = num20 ^ (int) num2 * -665124908;
            continue;
          case 66:
            num3 = 0;
            num1 = (int) num2 * 1247171565 ^ 775054060;
            continue;
          case 67:
            index = 0;
            num1 = -591005479;
            continue;
          case 68:
            int num21 = !flag9 ? -944135721 : (num21 = -427254645);
            num1 = num21 ^ (int) num2 * 1856075251;
            continue;
          case 69:
            int num22 = !onlyOneWinner ? -2121814361 : (num22 = -1737355420);
            num1 = num22 ^ (int) num2 * -1264838127;
            continue;
          case 70:
            flag14 = index < this._playerStates.Length;
            num1 = -816417908;
            continue;
          case 71:
            num1 = (int) num2 * -478749372 ^ -1073477449;
            continue;
          case 72:
            ++index;
            num1 = -201196132;
            continue;
          case 73:
            num1 = (int) num2 * -963179851 ^ -2080909538;
            continue;
          case 74:
            num1 = (int) num2 * 264848568 ^ -1305164283;
            continue;
          case 75:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -360521876 ^ -1639454711;
            continue;
          case 76:
            num1 = -2010286703;
            continue;
          case 77:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag6 ? (object) "ALL " : (object) "", flag2 ? (object) "receives" : (object) "pays", (object) Game.\u202C‪⁪⁪‌‎⁭‎​‭‎‍‏‫‪⁭⁭⁭‌‏‫‏‍⁫‮⁪‌‏⁫⁬‬‎‫⁭‏⁫‏⁫​⁯‮(num4), flag11 ? (object) "advance" : (object) "stay");
            num1 = -1805760798;
            continue;
          case 78:
            flag11 = false;
            num1 = -1086156445;
            continue;
          case 79:
            this.Losers.Add(index);
            num1 = (int) num2 * 816850716 ^ 384885864;
            continue;
          case 80:
            flag1 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -488927359;
            continue;
          case 81:
            num1 = (int) num2 * 1062475752 ^ -1241080685;
            continue;
          default:
            goto label_87;
        }
        flag6 = num6 != 0;
        num1 = -938619408;
      }
label_3:
      return;
label_87:;
    }

    private Card DrawCard()
    {
      bool flag = this._deck.Count <= 0;
label_1:
      int num1 = 38705767;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1247595542)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            card1 = this._deck[0];
            num1 = 2195549;
            continue;
          case 3:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1029770464 ^ -1681454928;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -1821905134 ^ 1928652081;
            continue;
          case 5:
            int num3 = !flag ? 1268182356 : (num3 = 119417750);
            num1 = num3 ^ (int) num2 * -728237277;
            continue;
          case 6:
            card2 = card1;
            num1 = (int) num2 * -530642305 ^ 998001045;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 1055358354;
      int index;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1226817632)) % 10U)
        {
          case 0:
            index = 0;
            num1 = (int) num2 * -566792958 ^ 947504029;
            continue;
          case 2:
            int num3 = flag ? 1308578295 : (num3 = 1435053558);
            num1 = num3 ^ (int) num2 * -1896509686;
            continue;
          case 3:
            flag = index < this._playerStates.Length;
            num1 = 1981560704;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * -1826001866 ^ 1070560197;
            continue;
          case 5:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206E⁭‫‎‬‍⁯‫​⁮‮⁯‍⁯⁫⁫‌‬⁯⁪‪‌‮‎‫⁫‪⁯⁯‌‎⁫⁮⁭‮⁮⁬‫‍⁬‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206A⁯⁯‌⁯⁪‌⁯‫‌⁭​‫​‎‬⁭⁮‪‮‍⁯‪‫‪‎‌‎⁮‫⁯⁯⁫‏​⁪‭‌⁬⁭‮(strArray);
            num1 = 472674690;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * -1909581816 ^ -861518085;
            continue;
          case 7:
            goto label_1;
          case 8:
            str1 = "";
            num1 = (int) num2 * 1814087259 ^ -1869149028;
            continue;
          case 9:
            num1 = (int) num2 * -377941923 ^ 1816369014;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1845528190;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -209775524)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -1696212866 ^ 1190092934;
            continue;
          case 2:
            str = this.ToString(false);
            num1 = (int) num2 * 1026731042 ^ 661554169;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -2105818253;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1095934599)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Game.\u206E‬⁪⁬‍⁯‎‍‭⁬⁮‌‬‎‎⁬‪​⁯​‎‍‏​⁭⁯⁭‬​⁬‫⁯‭⁮‏⁯‌⁮⁫‪‮(Game.\u206E⁭‫‎‬‍⁯‫​⁮‮⁯‍⁯⁫⁫‌‬⁯⁪‪‌‮‎‫⁫‪⁯⁯‌‎⁫⁮⁭‮⁮⁬‫‍⁬‮(text), more);
            num1 = (int) num2 * -1820347208 ^ 2106849592;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      Game.\u202E‭⁫​⁬⁬⁪‫⁬‬⁮‮‏‏‮‭‍⁬​⁪‎‏‌⁮​‏​⁫‬‌‮⁯⁬‭⁭‏‮‭‌‬‮(this._buffer, str);
    }

    static Random \u202D‮⁭​‮‏‬‪‏‏​‬​‮⁫⁪‬‮‭‫‌‪⁬‎‍‌‫⁭⁭⁫⁮‌⁫‬⁪⁮⁫‎‪‬‮([In] int obj0) => new Random(obj0);

    static string \u206B⁪‮‮‭‌‏⁭‪​‪‭⁭‬‎⁬‪​‫‌⁯⁮‌⁮‌⁭⁪‬‍‭‭⁭‏​‏‎⁮⁪⁪‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200C‭‌‌‮⁭‎⁪‎‌‌‫⁯⁪⁮‏⁭‎⁮‌⁯⁯​‪‮‬⁪​‭‬‫‌⁯⁪⁬⁮‭‮‌⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200D‏‍‫⁬‏‬‬⁯‌⁭⁭⁬‪‌‏⁪‎‮⁮‍‎‪⁭‬‌‮‮‪‬⁫⁬‪‬‎‏‮‍⁮‪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202C‪⁪⁪‌‎⁭‎​‭‎‍‏‫‪⁭⁭⁭‌‏‫‏‍⁫‮⁪‌‏⁫⁬‬‎‫⁭‏⁫‏⁫​⁯‮([In] int obj0) => Math.Abs(obj0);

    static string \u206E⁭‫‎‬‍⁯‫​⁮‮⁯‍⁯⁫⁫‌‬⁯⁪‪‌‮‎‫⁫‪⁯⁯‌‎⁫⁮⁭‮⁮⁬‫‍⁬‮([In] object obj0) => obj0.ToString();

    static string \u206A⁯⁯‌⁯⁪‌⁯‫‌⁭​‫​‎‬⁭⁮‪‮‍⁯‪‫‪‎‌‎⁮‫⁯⁯⁫‏​⁪‭‌⁬⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206E‬⁪⁬‍⁯‎‍‭⁬⁮‌‬‎‎⁬‪​⁯​‎‍‏​⁭⁯⁭‬​⁬‫⁯‭⁮‏⁯‌⁮⁫‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202E‭⁫​⁬⁬⁪‫⁬‬⁮‮‏‏‮‭‍⁬​⁪‎‏‌⁮​‏​⁫‬‌‮⁯⁬‭⁭‏‮‭‌‬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
