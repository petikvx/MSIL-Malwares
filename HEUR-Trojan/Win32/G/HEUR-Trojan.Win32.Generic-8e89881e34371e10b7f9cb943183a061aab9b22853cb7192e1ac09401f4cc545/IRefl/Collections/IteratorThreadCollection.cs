// Decompiled with JetBrains decompiler
// Type: IRefl.Collections.IteratorThreadCollection
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Objects;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.CompilerServices;
using System.Threading;

namespace IRefl.Collections
{
  [Table(Name = "dbo.Authors")]
  public class IteratorThreadCollection : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs writerRegistry;
    private int _AuthorID;
    private string _FirstName;
    private string _LastName;
    private EntitySet<ManagerObserverObject> _AuthorISBNs;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public IteratorThreadCollection()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 2;
            case 2:
            case 3:
              this._AuthorISBNs = new EntitySet<ManagerObserverObject>(new Action<ManagerObserverObject>(this.AddFacade), new Action<ManagerObserverObject>(this.PostFacade));
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 4:
              goto label_2;
            case 5:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_2:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 0;
        continue;
label_6:
        num1 = 3;
      }
label_8:;
    }

    [Column(AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true, Storage = "_AuthorID")]
    public int AuthorID
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorID;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        if (!IteratorThreadCollection.CalcModel())
          goto label_3;
label_1:
        this._AuthorID = value;
        goto label_8;
label_2:
        int num2;
        num1 = num2;
label_3:
        bool flag;
        switch (num1)
        {
          case 0:
            break;
          case 1:
          case 4:
            if (!flag)
              return;
            this.SendPropertyChanging();
            num2 = 5;
            goto label_2;
          case 2:
          case 5:
            goto label_1;
          case 3:
            flag = this._AuthorID != value;
            num2 = 4;
            goto label_2;
          case 6:
            return;
          default:
            num2 = 0;
            goto label_2;
        }
label_8:
        this.SendPropertyChanged(nameof (AuthorID));
        num2 = 6;
        goto label_2;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(30) NOT NULL", Storage = "_FirstName")]
    public string FirstName
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._FirstName;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_1;
              case 1:
              case 4:
                goto label_6;
              case 3:
                flag = this._FirstName != value;
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_9;
              case 5:
                goto label_5;
              case 6:
                goto label_9;
              default:
                goto label_4;
            }
          }
label_1:
          this.SendPropertyChanging();
          this._FirstName = value;
          goto label_5;
label_4:
          num1 = 5;
          continue;
label_5:
          this.SendPropertyChanged(nameof (FirstName));
          num1 = 6;
          continue;
label_6:
          if (flag)
            num1 = 0;
          else
            break;
        }
        return;
label_9:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(30) NOT NULL", Storage = "_LastName")]
    public string LastName
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._LastName;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 2;
        while (true)
        {
          int num2;
          bool flag;
          switch (num1)
          {
            case 0:
            case 2:
              flag = this._LastName != value;
              num1 = 5;
              continue;
            case 1:
            case 5:
              if (flag)
              {
                num2 = 4;
                break;
              }
              goto label_10;
            case 3:
              this._LastName = value;
              this.SendPropertyChanged(nameof (LastName));
              if (IteratorThreadCollection.LoginModel())
              {
                num1 = 6;
                continue;
              }
              goto case 4;
            case 4:
              this.SendPropertyChanging();
              goto case 3;
            case 6:
              goto label_9;
            default:
              num2 = 3;
              break;
          }
          num1 = num2;
        }
label_10:
        return;
label_9:;
      }
    }

    [Association(Name = "Author_AuthorISBN", OtherKey = "AuthorID", Storage = "_AuthorISBNs", ThisKey = "AuthorID")]
    public EntitySet<ManagerObserverObject> AuthorISBNs
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorISBNs;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._AuthorISBNs.Assign((IEnumerable<ManagerObserverObject>) value);
    }

    public event PropertyChangingEventHandler PropertyChanging
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 0;
        if (IteratorThreadCollection.CalcModel())
          ;
        while (true)
        {
          PropertyChangingEventHandler changingEventHandler1;
          PropertyChangingEventHandler comparand;
          PropertyChangingEventHandler changingEventHandler2;
          int num2;
          switch (num1)
          {
            case 0:
              changingEventHandler1 = this.m_StateRegistry;
              num2 = 4;
              break;
            case 1:
            case 4:
              comparand = changingEventHandler1;
              changingEventHandler2 = comparand + value;
              if (IteratorThreadCollection.LoginModel())
              {
                num1 = 3;
                continue;
              }
              goto case 2;
            case 2:
            case 3:
              changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.m_StateRegistry, changingEventHandler2, comparand);
              goto case 5;
            case 5:
              if (changingEventHandler1 == comparand)
              {
                num2 = 6;
                break;
              }
              goto case 1;
            case 6:
              goto label_1;
            default:
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto case 0;
          }
          num1 = num2;
        }
label_1:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 4;
        if (IteratorThreadCollection.LoginModel())
          goto label_3;
label_1:
        PropertyChangingEventHandler comparand;
        PropertyChangingEventHandler changingEventHandler1 = comparand - value;
        goto label_7;
label_3:
        PropertyChangingEventHandler changingEventHandler2;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
              goto label_1;
            case 1:
            case 5:
              goto label_6;
            case 2:
            case 3:
              goto label_7;
            case 4:
              changingEventHandler2 = this.m_StateRegistry;
              num2 = 5;
              break;
            case 6:
              goto label_10;
            default:
              num2 = 2;
              break;
          }
          num1 = num2;
        }
label_10:
        return;
label_6:
        comparand = changingEventHandler2;
        num1 = 0;
        goto label_3;
label_7:
        changingEventHandler2 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.m_StateRegistry, changingEventHandler1, comparand);
        if (changingEventHandler2 == comparand)
        {
          if (!IteratorThreadCollection.LoginModel())
            return;
          num1 = 6;
          goto label_3;
        }
        else
          goto label_6;
      }
    }

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 0;
        if (IteratorThreadCollection.LoginModel())
          goto label_3;
label_1:
        PropertyChangedEventHandler comparand;
        PropertyChangedEventHandler changedEventHandler = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.filterRegistry, comparand + value, comparand);
        goto label_5;
label_2:
        int num2;
        num1 = num2;
label_3:
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
          case 2:
            goto label_7;
          case 3:
          case 4:
            break;
          case 5:
            goto label_1;
          case 6:
            return;
          default:
            num2 = 4;
            goto label_2;
        }
label_5:
        if (changedEventHandler == comparand)
        {
          if (IteratorThreadCollection.LoginModel())
          {
            num1 = 6;
            goto label_3;
          }
        }
label_7:
        comparand = changedEventHandler;
        if (IteratorThreadCollection.LoginModel())
        {
          num1 = 5;
          goto label_3;
        }
label_8:
        changedEventHandler = this.filterRegistry;
        num2 = 2;
        goto label_2;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 0;
        while (true)
        {
          PropertyChangedEventHandler changedEventHandler1;
          PropertyChangedEventHandler comparand;
          int num2;
          PropertyChangedEventHandler changedEventHandler2;
          switch (num1)
          {
            case 0:
              changedEventHandler1 = this.filterRegistry;
              num2 = 1;
              break;
            case 1:
              comparand = changedEventHandler1;
              changedEventHandler2 = comparand - value;
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto label_9;
            case 2:
            case 5:
              changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.filterRegistry, changedEventHandler2, comparand);
              goto case 3;
            case 3:
            case 4:
              if (changedEventHandler1 == comparand)
              {
                if (IteratorThreadCollection.LoginModel())
                {
                  num1 = 6;
                  continue;
                }
                goto case 0;
              }
              else
                goto case 1;
            case 6:
              goto label_10;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
        }
label_10:
        return;
label_9:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanging()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_1;
            case 1:
            case 2:
              if (!flag)
                goto label_3;
              else
                goto case 3;
            case 3:
              // ISSUE: reference to a compiler-generated field
              this.m_StateRegistry((object) this, IteratorThreadCollection.writerRegistry);
              num2 = 5;
              continue;
            case 5:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated field
        flag = this.m_StateRegistry != null;
        num1 = 2;
        continue;
label_6:
        num1 = 3;
      }
label_3:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanged(string config)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_6;
            case 1:
            case 3:
              if (!flag)
                goto label_2;
              else
                goto case 2;
            case 2:
              // ISSUE: reference to a compiler-generated field
              this.filterRegistry((object) this, new PropertyChangedEventArgs(config));
              if (IteratorThreadCollection.LoginModel())
              {
                num2 = 5;
                continue;
              }
              goto label_8;
            case 5:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 2;
        continue;
label_6:
        // ISSUE: reference to a compiler-generated field
        flag = this.filterRegistry != null;
        num1 = 3;
      }
label_2:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AddFacade(ManagerObserverObject value)
    {
      this.SendPropertyChanging();
      value.Author = this;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PostFacade(ManagerObserverObject value)
    {
      this.SendPropertyChanging();
      value.Author = (IteratorThreadCollection) null;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static IteratorThreadCollection()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      IteratorThreadCollection.writerRegistry = new PropertyChangingEventArgs(string.Empty);
    }

    internal static bool LoginModel() => true;

    internal static bool CalcModel() => false;
  }
}
