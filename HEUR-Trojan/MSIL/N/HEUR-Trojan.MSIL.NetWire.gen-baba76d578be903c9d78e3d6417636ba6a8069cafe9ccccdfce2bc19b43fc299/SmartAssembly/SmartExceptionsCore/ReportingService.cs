// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportingService
// Assembly: u1rug, Version=0.0.0.0, Culture=neutral, PublicKeyToken=dbb94034cbd6bbd6
// MVID: C8A082E9-30A2-423A-BCDF-59565BB76FBE
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.NetWire.gen-baba76d578be903c9d78e3d6417636ba6a8069cafe9ccccdfce2bc19b43fc299.exe

using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Net;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [WebServiceBinding(Name = "ReportingServiceSoap", Namespace = "http://www.smartassembly.com/webservices/Reporting/")]
  internal sealed class ReportingService : SoapHttpClientProtocol
  {
    [NonSerialized]
    internal static GetString \u0094;

    public ReportingService(string serverUrl)
    {
      this.Url = serverUrl + ReportingService.\u0094(2090);
      this.Timeout = 180000;
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/Reporting/UploadReport2")]
    public string UploadReport2(
      string licenseID,
      [XmlElement(DataType = "base64Binary")] byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber)
    {
      return (string) \u008D.\u0093((object) this, ReportingService.\u0094(2111), new object[5]
      {
        (object) licenseID,
        (object) data,
        (object) email,
        (object) appFriendlyName,
        (object) buildFriendlyNumber
      })[0];
    }

    protected override WebRequest GetWebRequest(Uri uri)
    {
      WebRequest webRequest = \u008E.\u0094((object) this, uri);
      if (webRequest is HttpWebRequest httpWebRequest)
        \u0090.\u007E\u0096((object) \u008F.\u007E\u0095((object) httpWebRequest), false);
      return webRequest;
    }

    static ReportingService() => Strings.CreateGetStringDelegate(typeof (ReportingService));
  }
}
