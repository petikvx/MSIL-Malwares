// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ModuleBuild, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 89F10113-88CA-4804-9B17-4A5288FD99D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2e269df5f1ed94bc3f07c434a6d33a1e48ce04fd0feb953bba71e2a8ced82875.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206D⁬⁪⁫⁫‎⁭​⁮‮‏⁮⁫‏‭‬⁪‮‭‌‫⁪‬‎⁪⁯‮‪‮⁪⁬‏⁪‫‭⁪⁭⁯‪⁯‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -1297758011;
        int index;
        bool finished;
        bool flag;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -43295045)) % 14U)
          {
            case 0:
              goto label_1;
            case 1:
              finished = true;
              num1 = (int) num2 * 371052105 ^ 1240412011;
              continue;
            case 2:
              flag = playerStates[index].State == State.Playing;
              num1 = -1332128827;
              continue;
            case 3:
              finished = false;
              num1 = (int) num2 * 1954831680 ^ -698771004;
              continue;
            case 4:
              int num3 = !flag ? 486390 : (num3 = 1519165700);
              num1 = num3 ^ (int) num2 * -1312113844;
              continue;
            case 5:
              int num4;
              num1 = num4 = index >= playerStates.Length ? -1781020631 : (num4 = -1064057405);
              continue;
            case 6:
              int num5 = this._finished ? -1885672736 : (num5 = -1448277313);
              num1 = num5 ^ (int) num2 * 604113198;
              continue;
            case 7:
              num1 = (int) num2 * 851880079 ^ 809395935;
              continue;
            case 8:
              finished = true;
              num1 = (int) num2 * -970509885 ^ 1586220152;
              continue;
            case 10:
              index = 0;
              num1 = (int) num2 * 1262716329 ^ -780084440;
              continue;
            case 11:
              num1 = (int) num2 * 1997117087 ^ 1418456061;
              continue;
            case 12:
              playerStates = this._playerStates;
              num1 = -10107625;
              continue;
            case 13:
              ++index;
              num1 = -989201500;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 105853119;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1422009419)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * 250935642 ^ 912003621;
            continue;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * 628669338 ^ -1800947464;
            continue;
          case 3:
            this.Winners.Clear();
            num1 = (int) num2 * 697240871 ^ -887559342;
            continue;
          case 4:
            num1 = (int) num2 * -1018299775 ^ -1695655425;
            continue;
          case 5:
            this._finished = false;
            num1 = (int) num2 * -1786307148 ^ 928798452;
            continue;
          case 6:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 561553706 ^ 609193443;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * 1370571661 ^ 1900280795;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_18:
      int num1 = index < this.Players.Length ? 944577959 : (num1 = 1188677053);
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      bool flag1;
      Player player;
      bool morePlanningSprint;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 294630506)) % 24U)
        {
          case 0:
            num2 = 0;
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * -908406419 ^ -124866699;
            continue;
          case 1:
            playerState.Sprint = 1;
            num1 = (int) num3 * -63615173 ^ -1224671731;
            continue;
          case 2:
            num1 = 1029021895;
            continue;
          case 3:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1865550113 ^ -704824276;
            continue;
          case 4:
            int num4 = !morePlanningSprint ? -161028609 : (num4 = -1824790224);
            num1 = num4 ^ (int) num3 * 718785521;
            continue;
          case 5:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * -650182787 ^ -1923843261;
            continue;
          case 6:
            num1 = (int) num3 * -1205794841 ^ 114920243;
            continue;
          case 7:
            int num5 = flag1 ? -230069371 : (num5 = -62386114);
            num1 = num5 ^ (int) num3 * 161970266;
            continue;
          case 8:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -741799926 ^ -1412225658;
            continue;
          case 9:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * -1855799810 ^ 1948977710;
            continue;
          case 10:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 1114120002 ^ 551703342;
            continue;
          case 11:
            num1 = (int) num3 * 968109793 ^ 1154657795;
            continue;
          case 12:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -221996305 ^ 478727645;
            continue;
          case 13:
            num1 = (int) num3 * 696021499 ^ -339762921;
            continue;
          case 14:
            num1 = 944577959;
            continue;
          case 15:
            goto label_3;
          case 16:
            num2 = 0;
            num1 = 1188895760;
            continue;
          case 17:
            flag2 = num2 > 0;
            num1 = 1477660764;
            continue;
          case 18:
            num1 = 2058566885;
            continue;
          case 19:
            goto label_18;
          case 20:
            num1 = (int) num3 * 2133542023 ^ -113947415;
            continue;
          case 21:
            player = this.Players[index];
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            num1 = 252554163;
            continue;
          case 22:
            int num6 = !flag2 ? -1285064280 : (num6 = -2034951956);
            num1 = num6 ^ (int) num3 * -1241944889;
            continue;
          case 23:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = 315526497;
            continue;
          default:
            goto label_26;
        }
      }
label_3:
      return;
label_26:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      if (this._currentPlayer < this.Players.Length)
        goto label_5;
label_1:
      int num1 = 1267121648;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 474392132)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -769189448 ^ -2072453192;
            continue;
          case 1:
            this.Print((object) Game.\u206D‏‌‮‏⁪⁬⁯‫⁮‭‪⁫‌‍‫‪⁪⁯⁬‮⁫⁭‪‫⁭⁯‍⁯‌‫⁭‏⁭⁫‏⁮‮‬‫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 909093050;
            continue;
          case 2:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206D‏‎⁬⁪⁮‎⁪⁫⁮​⁪‌⁬‌‍‏‏‎‮‎‎⁫‮‭⁮‭‌⁮‪‭‬​‏​⁯‬⁯‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1142208528 ^ 572865862;
            continue;
          case 3:
            goto label_5;
          case 4:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1255561606 ^ 2080686723;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -432013609 ^ -151384723;
            continue;
          case 7:
            flag = this._currentTurn > 0;
            num1 = (int) num2 * 1205915996 ^ -1144576061;
            continue;
          case 8:
            int num3 = !flag ? -70250047 : (num3 = -30567868);
            num1 = num3 ^ (int) num2 * 1040383094;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * 1518285375 ^ -114818351;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:
      return;
label_5:
      this.PlayerTurn(this._currentPlayer);
      num1 = 1046834474;
      goto label_2;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 1930643570;
      while (true)
      {
        uint num2;
        int num3;
        bool flag1;
        int index;
        bool flag2;
        bool flag3;
        bool flag4;
        PlayerState playerState1;
        bool flag5;
        Card card;
        bool flag6;
        bool flag7;
        int num4;
        Player player;
        bool flag8;
        PlayerState playerState2;
        bool flag9;
        int num5;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool flag14;
        bool flag15;
        int num6;
        switch ((num2 = (uint) (num1 ^ 851657296)) % 88U)
        {
          case 0:
            this.Winners.Add(playerIndex);
            int num7 = this.Rules.OnlyOneWinner ? -1860614962 : (num7 = -660951478);
            num1 = num7 ^ (int) num2 * 1850905664;
            continue;
          case 1:
            num1 = 1791085714;
            continue;
          case 2:
            flag11 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 557880100;
            continue;
          case 3:
            int num8 = !flag4 ? 709599312 : (num8 = 1683575684);
            num1 = num8 ^ (int) num2 * -467882568;
            continue;
          case 4:
            int num9 = !flag11 ? 1203009676 : (num9 = 1109826792);
            num1 = num9 ^ (int) num2 * 417219228;
            continue;
          case 5:
            int num10 = flag9 ? -4285007 : (num10 = -1106130578);
            num1 = num10 ^ (int) num2 * -1635519132;
            continue;
          case 6:
            num1 = (int) num2 * 1636055604 ^ 1997946085;
            continue;
          case 7:
            index = 0;
            num1 = (int) num2 * -559472490 ^ 35705779;
            continue;
          case 8:
            int num11 = !flag1 ? -419852623 : (num11 = -1511470651);
            num1 = num11 ^ (int) num2 * -1949441122;
            continue;
          case 9:
            goto label_3;
          case 10:
            flag14 = playerState1.Resources < 0;
            num1 = (int) num2 * 1085081824 ^ -1444865031;
            continue;
          case 11:
            num1 = 901117796;
            continue;
          case 12:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -205610059 ^ 421603412;
            continue;
          case 13:
            flag10 = playerState1.Sprint < 0;
            num1 = 933058662;
            continue;
          case 14:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u200C⁯⁭‬‭‭‮⁭⁪‭⁭‍‌‎‪​⁫‪⁭‬‎⁫⁪⁫​⁪⁮‎‎‬⁭‫⁮‪⁭‮⁯‎‬‪‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = 1568642922;
            continue;
          case 15:
            flag8 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 55729827;
            continue;
          case 16:
            num1 = (int) num2 * 567820495 ^ -178511463;
            continue;
          case 17:
            num1 = (int) num2 * -948662967 ^ 1798880998;
            continue;
          case 18:
            flag9 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1843107130 ^ 84173753;
            continue;
          case 19:
            int num12 = flag12 ? -1881550835 : (num12 = -284362747);
            num1 = num12 ^ (int) num2 * -768737256;
            continue;
          case 20:
            ++index;
            num1 = 1125178167;
            continue;
          case 21:
            num1 = 1938567123;
            continue;
          case 22:
            flag13 = !flag6;
            num1 = (int) num2 * -1253311676 ^ 1329285663;
            continue;
          case 23:
            flag15 = index < this._playerStates.Length;
            num1 = 1385220021;
            continue;
          case 24:
            num1 = (int) num2 * 379806958 ^ -658245754;
            continue;
          case 25:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag6 ? (object) "ALL " : (object) "", flag7 ? (object) "receives" : (object) "pays", (object) Game.\u200F‪‏‌​‮​‍‭​⁬​‌⁯⁪‫⁮‬​​⁮‎⁪⁪⁭‪⁬‏‎‪⁭⁬‮‫‍‮⁭​‪‮‮(num4), flag3 ? (object) "advance" : (object) "stay");
            num1 = 383423374;
            continue;
          case 26:
            num4 = card.Impact;
            num1 = (int) num2 * -1197532580 ^ 596295501;
            continue;
          case 27:
            num1 = (int) num2 * 1886783796 ^ 697762120;
            continue;
          case 28:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 1317164484 ^ 1851952706;
            continue;
          case 29:
            int num13 = flag15 ? 191014085 : (num13 = 2147232672);
            num1 = num13 ^ (int) num2 * 1130815759;
            continue;
          case 30:
            num1 = 159264727;
            continue;
          case 31:
            num1 = (int) num2 * 507095016 ^ 1395419161;
            continue;
          case 32:
            num1 = (int) num2 * -61522169 ^ -2004314209;
            continue;
          case 33:
            num1 = 664877335;
            continue;
          case 34:
            flag4 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -258567057 ^ -818890915;
            continue;
          case 35:
            num1 = (int) num2 * -1207374180 ^ -1231193093;
            continue;
          case 36:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 903166942 ^ -1422676640;
            continue;
          case 37:
            playerState1.State = State.Won;
            num1 = (int) num2 * -873330080 ^ -1475279232;
            continue;
          case 38:
            flag12 = num3 < this._playerStates.Length;
            num1 = 2098473363;
            continue;
          case 39:
            num1 = 266715919;
            continue;
          case 40:
            int num14 = !flag5 ? -689152125 : (num14 = -1440808142);
            num1 = num14 ^ (int) num2 * 1236551750;
            continue;
          case 41:
            num1 = (int) num2 * -718904545 ^ -2099608569;
            continue;
          case 42:
            this.Losers.Add(index);
            num1 = (int) num2 * 1646169174 ^ -823870353;
            continue;
          case 43:
            flag2 = !flag7;
            num1 = (int) num2 * -1741904545 ^ -512062165;
            continue;
          case 44:
            int num15 = playerState1.State != 0 ? -805480009 : (num15 = -1598430915);
            num1 = num15 ^ (int) num2 * -1750216846;
            continue;
          case 45:
            num4 = Game.\u200C⁯⁭‬‭‭‮⁭⁪‭⁭‍‌‎‪​⁫‪⁭‬‎⁫⁪⁫​⁪⁮‎‎‬⁭‫⁮‪⁭‮⁯‎‬‪‮(0, num5);
            num1 = (int) num2 * -1879624423 ^ 779187502;
            continue;
          case 46:
            int num16 = !flag10 ? 1611073454 : (num16 = 30123964);
            num1 = num16 ^ (int) num2 * -985933630;
            continue;
          case 47:
            int num17 = flag13 ? -330244149 : (num17 = -399150974);
            num1 = num17 ^ (int) num2 * -418457045;
            continue;
          case 48:
            num1 = (int) num2 * -1130867903 ^ 770931134;
            continue;
          case 49:
            num1 = (int) num2 * -1395073905 ^ 211380577;
            continue;
          case 50:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 1774774829 ^ -889936490;
            continue;
          case 51:
            int num18 = !flag8 ? -891475029 : (num18 = -1250042055);
            num1 = num18 ^ (int) num2 * 1166091452;
            continue;
          case 52:
            ++playerState1.Sprint;
            num1 = (int) num2 * -853964722 ^ -683186905;
            continue;
          case 53:
            num1 = (int) num2 * 878481975 ^ 553064391;
            continue;
          case 54:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 55:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1160023864 ^ -1901300444;
            continue;
          case 56:
            int num19;
            num1 = num19 = flag3 ? 1771784532 : (num19 = 894836255);
            continue;
          case 57:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -2027607369 ^ -200001311;
            continue;
          case 58:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -2075387266 ^ -1642603875;
            continue;
          case 59:
            num1 = (int) num2 * 193487802 ^ -422672823;
            continue;
          case 60:
            num1 = (int) num2 * -55233704 ^ 377442385;
            continue;
          case 61:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * 930451925 ^ -307905839;
            continue;
          case 62:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 279728357 ^ 1934326116;
            continue;
          case 63:
            ++num3;
            num1 = 1118890958;
            continue;
          case 64:
            flag3 = false;
            num1 = 2067559849;
            continue;
          case 65:
            int num20 = !flag14 ? 693588188 : (num20 = 1099947017);
            num1 = num20 ^ (int) num2 * 1314774298;
            continue;
          case 66:
            flag3 = true;
            num1 = (int) num2 * -1319310959 ^ -202656184;
            continue;
          case 67:
            flag5 = !this.Losers.Contains(index);
            num1 = (int) num2 * 1699953963 ^ 846871873;
            continue;
          case 68:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206D‏‎⁬⁪⁮‎⁪⁫⁮​⁪‌⁬‌‍‏‏‎‮‎‎⁫‮‭⁮‭‌⁮‪‭‬​‏​⁯‬⁯‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -1842147922 ^ 859176180;
            continue;
          case 69:
            num1 = (int) num2 * 1894447881 ^ -1442287025;
            continue;
          case 70:
            flag3 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -892504933 ^ -2117433393;
            continue;
          case 71:
            num1 = 369197704;
            continue;
          case 72:
            num1 = (int) num2 * 1008348406 ^ 907242668;
            continue;
          case 73:
            flag3 = true;
            num1 = (int) num2 * 1745656205 ^ -224181497;
            continue;
          case 74:
            playerState2.State = State.Lose;
            num1 = 2104686691;
            continue;
          case 75:
            int num21 = num3 != playerIndex ? -1834817035 : (num21 = -1839877183);
            num1 = num21 ^ (int) num2 * 1852318563;
            continue;
          case 76:
            card = this.DrawCard();
            flag7 = card.Impact < 0;
            num1 = 263747161;
            continue;
          case 77:
            num1 = (int) num2 * -1812736164 ^ -1380240179;
            continue;
          case 78:
            num1 = (int) num2 * 558383857 ^ -2134926313;
            continue;
          case 79:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206D‏‎⁬⁪⁮‎⁪⁫⁮​⁪‌⁬‌‍‏‏‎‮‎‎⁫‮‭⁮‭‌⁮‪‭‬​‏​⁯‬⁯‮("\t", playerState3 != null ? Game.\u202D‍‏‬‫‪⁭‫⁫‌⁫‏​⁬​‏‪⁭‬⁬​‏‬​‏‏‎⁮‎‬⁭‪‬⁮​‬⁬‎⁭⁫‮((object) playerState3) : (string) null));
            num1 = 1159403976;
            continue;
          case 80:
            num1 = (int) num2 * 1124639306 ^ 400310361;
            continue;
          case 81:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -1853223227 ^ 14668803;
            continue;
          case 82:
            num1 = 785073631;
            continue;
          case 83:
            goto label_1;
          case 84:
            flag1 = !this.Losers.Contains(num3);
            num1 = 1112482760;
            continue;
          case 85:
            this.Losers.Add(num3);
            num1 = (int) num2 * 825724579 ^ 1633191054;
            continue;
          case 86:
            int num22 = !flag2 ? -762597573 : (num22 = -1688388003);
            num1 = num22 ^ (int) num2 * 601354451;
            continue;
          case 87:
            num1 = (int) num2 * -1756522326 ^ 645287719;
            continue;
          default:
            goto label_93;
        }
        flag6 = num6 != 0;
        num1 = 37336099;
      }
label_3:
      return;
label_93:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 507494662;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 548833447)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -549592537 ^ -1013929163;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * -996942835 ^ 1222550766;
            continue;
          case 3:
            card1 = this._deck[0];
            num1 = 118040200;
            continue;
          case 4:
            card2 = card1;
            num1 = (int) num2 * 1600157527 ^ 184805813;
            continue;
          case 5:
            int num3 = !flag ? -1486664156 : (num3 = -1786044811);
            num1 = num3 ^ (int) num2 * -1297739120;
            continue;
          case 7:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -194240694 ^ -148971155;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = 824758065;
      bool flag;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 563597215)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202D‍‏‬‫‪⁭‫⁫‌⁫‏​⁬​‏‪⁭‬⁬​‏‬​‏‏‎⁮‎‬⁭‪‬⁮​‬⁬‎⁭⁫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206D​‍‮‌‌⁪‭​⁫‮⁪⁮‪⁫‮‎‮‎‮⁭‭‌‎‫⁫‏‮‎⁪⁫⁯‏‍‬‍‮​​‮‮(strArray);
            num1 = 815873427;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * -1508604558 ^ -1183272667;
            continue;
          case 3:
            num1 = (int) num2 * 1451450280 ^ -564974575;
            continue;
          case 5:
            flag = index < this._playerStates.Length;
            num1 = 944126179;
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * 179291417 ^ -484993246;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -1285793832 ^ -1863897092;
            continue;
          case 8:
            int num3 = !flag ? -1697751586 : (num3 = -1235204089);
            num1 = num3 ^ (int) num2 * -329950238;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1161407238;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1725737257)) % 4U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * -1479054434 ^ -1800888221;
            continue;
          case 2:
            num1 = (int) num2 * 730983506 ^ -1506335997;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u206C⁪⁪‬‭‎‭⁫‍‪​‬⁮‮⁫‪⁫⁯‍​‮⁭‎‎‏⁬‌‫‮⁪‭‍‫⁮‪‎⁭‭‮⁫‮(this._buffer, Game.\u202D‌⁯⁯⁭⁫⁫‮⁭‪⁯⁬‌‫‮‍⁭‌⁮⁯⁫​⁪‎‍‬‏‪‍‍⁯‎⁬‏‍‪‏⁪⁭‎‮(Game.\u202D‍‏‬‫‪⁭‫⁫‌⁫‏​⁬​‏‪⁭‬⁬​‏‬​‏‏‎⁮‎‬⁭‪‬⁮​‬⁬‎⁭⁫‮(text), more));

    static Random \u206D⁬⁪⁫⁫‎⁭​⁮‮‏⁮⁫‏‭‬⁪‮‭‌‫⁪‬‎⁪⁯‮‪‮⁪⁬‏⁪‫‭⁪⁭⁯‪⁯‮([In] int obj0) => new Random(obj0);

    static string \u206D‏‌‮‏⁪⁬⁯‫⁮‭‪⁫‌‍‫‪⁪⁯⁬‮⁫⁭‪‫⁭⁯‍⁯‌‫⁭‏⁭⁫‏⁮‮‬‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206D‏‎⁬⁪⁮‎⁪⁫⁮​⁪‌⁬‌‍‏‏‎‮‎‎⁫‮‭⁮‭‌⁮‪‭‬​‏​⁯‬⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200C⁯⁭‬‭‭‮⁭⁪‭⁭‍‌‎‪​⁫‪⁭‬‎⁫⁪⁫​⁪⁮‎‎‬⁭‫⁮‪⁭‮⁯‎‬‪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200F‪‏‌​‮​‍‭​⁬​‌⁯⁪‫⁮‬​​⁮‎⁪⁪⁭‪⁬‏‎‪⁭⁬‮‫‍‮⁭​‪‮‮([In] int obj0) => Math.Abs(obj0);

    static string \u202D‍‏‬‫‪⁭‫⁫‌⁫‏​⁬​‏‪⁭‬⁬​‏‬​‏‏‎⁮‎‬⁭‪‬⁮​‬⁬‎⁭⁫‮([In] object obj0) => obj0.ToString();

    static string \u206D​‍‮‌‌⁪‭​⁫‮⁪⁮‪⁫‮‎‮‎‮⁭‭‌‎‫⁫‏‮‎⁪⁫⁯‏‍‬‍‮​​‮‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202D‌⁯⁯⁭⁫⁫‮⁭‪⁯⁬‌‫‮‍⁭‌⁮⁯⁫​⁪‎‍‬‏‪‍‍⁯‎⁬‏‍‪‏⁪⁭‎‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206C⁪⁪‬‭‎‭⁫‍‪​‬⁮‮⁫‪⁫⁯‍​‮⁭‎‎‏⁬‌‫‮⁪‭‍‫⁮‪‎⁭‭‮⁫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
