// Decompiled with JetBrains decompiler
// Type: BlockGameApp.GameTools
// Assembly: FormatterAssemblySt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 877C36BA-E94F-4F44-80EE-D68074F87B8D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqs-8ed13e4fb92eef7aee7b0a64e9a77c702327206d71ea5cb0806d987f1b14ea9c.exe

using System;
using System.Drawing;

namespace BlockGameApp
{
  public class GameTools
  {
    private static Random _random;

    public static int GetRandomNumber(int lowestPossible, int highestPossible, bool zeroIsValid = false)
    {
      if (GameTools._random == null)
        GameTools._random = new Random();
      int num = GameTools._random.Next(lowestPossible, highestPossible + 1);
      return zeroIsValid ? num : (num == 0 ? GameTools.GetRandomNumber(lowestPossible, highestPossible, zeroIsValid) : num);
    }

    public static Color GetRandomColor() => Color.FromArgb(GameTools.GetRandomNumber(0, (int) byte.MaxValue), GameTools.GetRandomNumber(0, (int) byte.MaxValue), GameTools.GetRandomNumber(0, (int) byte.MaxValue));

    public static Color GetRandomAlphaColor()
    {
      int randomNumber1 = GameTools.GetRandomNumber(0, (int) byte.MaxValue);
      int randomNumber2 = GameTools.GetRandomNumber(0, (int) byte.MaxValue);
      int randomNumber3 = GameTools.GetRandomNumber(0, (int) byte.MaxValue);
      int randomNumber4 = GameTools.GetRandomNumber(0, (int) byte.MaxValue);
      return Color.FromArgb(randomNumber1, randomNumber2, randomNumber4, randomNumber3);
    }

    public static GameTools.Direction GetRandomDirection() => (GameTools.Direction) GameTools.GetRandomNumber(0, 4, true);

    public enum Direction
    {
      None,
      Up,
      Right,
      Down,
      Left,
    }
  }
}
