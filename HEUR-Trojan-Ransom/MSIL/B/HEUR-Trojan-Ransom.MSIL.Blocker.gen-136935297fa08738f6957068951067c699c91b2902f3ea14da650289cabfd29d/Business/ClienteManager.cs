// Decompiled with JetBrains decompiler
// Type: Coache.Business.ClienteManager
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Data;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

namespace Coache.Business
{
  public class ClienteManager
  {
    private UsersManager _usersManager = new UsersManager();

    public BindingList<Cliente> GetAll()
    {
      if (SessionData.Contains("Clients"))
        return SessionData.Get<BindingList<Cliente>>("Clients");
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetClientes");
      BindingList<Cliente> all = new BindingList<Cliente>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
        {
          BindingList<Cliente> bindingList = all;
          Cliente cliente = new Cliente();
          cliente.Apellido = row["Apellido"].ToString();
          cliente.Nombre = row["Nombre"].ToString();
          cliente.UserID = int.Parse(row["ID"].ToString());
          cliente.UserName = row["UserName"].ToString();
          cliente.RoleID = int.Parse(row["ID_Rol"].ToString());
          cliente.FechaNacimiento = Convert.ToDateTime(row["FechaNacimiento"]);
          cliente.DNI = long.Parse(row["DNI"].ToString());
          cliente.Ciudades = this.GetCiudades(int.Parse(row["ID"].ToString()));
          cliente.DetalleEntidad = new DetalleEntidad()
          {
            Email = row["Email"].ToString(),
            Direccion = row["Direccion"].ToString(),
            CP = row["CP"].ToString(),
            Telefono = long.Parse(row["Telefono"].ToString()),
            Ciudad = new City()
            {
              ID = int.Parse(row["ID_Ciudad"].ToString())
            }
          };
          bindingList.Add(cliente);
        }
      }
      SessionData.Set("Clients", (object) all);
      return all;
    }

    public void GuardarCliente(Cliente cliente, string password)
    {
      UsersManager usersManager = new UsersManager();
      DetalleEntidadManager detalleEntidadManager = new DetalleEntidadManager();
      if (cliente.UserID == 0)
      {
        SqlTransaction transaction = SqlDataAccess.OpenTransaction(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString());
        try
        {
          SessionData.Set("Transaction", (object) transaction);
          cliente.UserID = usersManager.CreateProfileAccount((User) cliente, Cliente.Profile, password);
          detalleEntidadManager.AddDetalleEntidad((User) cliente);
          SqlDataAccess.ExecuteNonQuery("GRUPO_N.InsertCliente", SqlDataAccessArgs.CreateWith("@DNI", (object) cliente.DNI).And("@ID", (object) cliente.UserID).And("@Nombre", (object) cliente.Nombre).And("@Apellido", (object) cliente.Apellido).And("@FechaNacimiento", (object) cliente.FechaNacimiento).Arguments, transaction);
          SessionData.Remove("Transaction");
          SqlDataAccess.Commit(transaction);
        }
        catch
        {
          SqlDataAccess.Rollback(transaction);
          cliente.UserID = 0;
          throw;
        }
      }
      else
      {
        detalleEntidadManager.UpdateDetalleEntidad((User) cliente);
        SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.UpdateCliente", SqlDataAccessArgs.CreateWith("@DNI", (object) cliente.DNI).And("@ID", (object) cliente.UserID).And("@Nombre", (object) cliente.Nombre).And("@Apellido", (object) cliente.Apellido).And("@FechaNacimiento", (object) cliente.FechaNacimiento).Arguments);
      }
      this.AddCiudades(cliente);
      SessionData.Remove("Clients");
    }

    private void AddCiudades(Cliente cliente)
    {
      SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.DeleteCiudadesCliente", SqlDataAccessArgs.CreateWith("@ID_Cliente", (object) cliente.UserID).Arguments);
      foreach (City ciudade in cliente.Ciudades)
        SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.InsertCiudadCliente", SqlDataAccessArgs.CreateWith("@ID_Cliente", (object) cliente.UserID).And("@ID_Ciudad", (object) ciudade.ID).Arguments);
    }

    private List<City> GetCiudades(int id)
    {
      List<City> ciudades = new List<City>();
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetCiudadesCliente", SqlDataAccessArgs.CreateWith("@ID_Cliente", (object) id).Arguments);
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          ciudades.Add(new City()
          {
            ID = int.Parse(row["ID_Ciudad"].ToString())
          });
      }
      return ciudades;
    }

    public void Delete(Cliente cliente)
    {
      this._usersManager.DeleteAccount((User) cliente);
      SessionData.Remove("Clients");
    }
  }
}
