// Decompiled with JetBrains decompiler
// Type: InterpLexer
// Assembly: AuthorizationR, Version=1.0.0.6, Culture=neutral, PublicKeyToken=null
// MVID: 1A6D3D94-D71A-457A-A906-C73E898919CA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.NanoBot.gen-8d4069f952ab15494c3be7c5cdf0fa161641dcc5fe3a1aab978726ea585f0076.exe

using Antlr.Runtime;

public class InterpLexer : Lexer
{
  public const int INT_LITERAL = 7;
  public const int VARIABLE = 6;
  public const int T__12 = 12;
  public const int T__14 = 14;
  public const int T__13 = 13;
  public const int WHITESPACE = 11;
  public const int PLUS = 8;
  public const int ASSIGNMENT = 4;
  public const int MULT = 9;
  public const int EOF = -1;
  public const int MAT_DATA = 10;
  public const int END_OF_STATEMENT = 5;
  protected InterpLexer.DFA6 dfa6;
  protected InterpLexer.DFA3 dfa3;
  protected InterpLexer.DFA4 dfa4;
  protected InterpLexer.DFA8 dfa8;
  private const string DFA6_eotS = "\u0005\uFFFF";
  private const string DFA6_eofS = "\u0005\uFFFF";
  private const string DFA6_minS = "\u00010\u0001,\u0003\uFFFF";
  private const string DFA6_maxS = "\u0001[\u0001]\u0003\uFFFF";
  private const string DFA6_acceptS = "\u0002\uFFFF\u0001\u0003\u0001\u0001\u0001\u0002";
  private const string DFA6_specialS = "\u0005\uFFFF}>";
  private static readonly string[] DFA6_transitionS = new string[5]
  {
    "\n\u0001!\uFFFF\u0001\u0002",
    "\u0001\u0004\u0003\uFFFF\n\u0001#\uFFFF\u0001\u0003",
    "",
    "",
    ""
  };
  private static readonly short[] DFA6_eot = DFA.UnpackEncodedString("\u0005\uFFFF");
  private static readonly short[] DFA6_eof = DFA.UnpackEncodedString("\u0005\uFFFF");
  private static readonly char[] DFA6_min = DFA.UnpackEncodedStringToUnsignedChars("\u00010\u0001,\u0003\uFFFF");
  private static readonly char[] DFA6_max = DFA.UnpackEncodedStringToUnsignedChars("\u0001[\u0001]\u0003\uFFFF");
  private static readonly short[] DFA6_accept = DFA.UnpackEncodedString("\u0002\uFFFF\u0001\u0003\u0001\u0001\u0001\u0002");
  private static readonly short[] DFA6_special = DFA.UnpackEncodedString("\u0005\uFFFF}>");
  private static readonly short[][] DFA6_transition = DFA.UnpackEncodedStringArray(InterpLexer.DFA6_transitionS);
  private const string DFA3_eotS = "\u0004\uFFFF";
  private const string DFA3_eofS = "\u0004\uFFFF";
  private const string DFA3_minS = "\u00010\u0001,\u0002\uFFFF";
  private const string DFA3_maxS = "\u00019\u0001]\u0002\uFFFF";
  private const string DFA3_acceptS = "\u0002\uFFFF\u0001\u0001\u0001\u0002";
  private const string DFA3_specialS = "\u0004\uFFFF}>";
  private static readonly string[] DFA3_transitionS = new string[4]
  {
    "\n\u0001",
    "\u0001\u0002\u0003\uFFFF\n\u0001#\uFFFF\u0001\u0003",
    "",
    ""
  };
  private static readonly short[] DFA3_eot = DFA.UnpackEncodedString("\u0004\uFFFF");
  private static readonly short[] DFA3_eof = DFA.UnpackEncodedString("\u0004\uFFFF");
  private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars("\u00010\u0001,\u0002\uFFFF");
  private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars("\u00019\u0001]\u0002\uFFFF");
  private static readonly short[] DFA3_accept = DFA.UnpackEncodedString("\u0002\uFFFF\u0001\u0001\u0001\u0002");
  private static readonly short[] DFA3_special = DFA.UnpackEncodedString("\u0004\uFFFF}>");
  private static readonly short[][] DFA3_transition = DFA.UnpackEncodedStringArray(InterpLexer.DFA3_transitionS);
  private const string DFA4_eotS = "\u0004\uFFFF";
  private const string DFA4_eofS = "\u0004\uFFFF";
  private const string DFA4_minS = "\u00010\u0001,\u0002\uFFFF";
  private const string DFA4_maxS = "\u00019\u0001]\u0002\uFFFF";
  private const string DFA4_acceptS = "\u0002\uFFFF\u0001\u0001\u0001\u0002";
  private const string DFA4_specialS = "\u0004\uFFFF}>";
  private static readonly string[] DFA4_transitionS = new string[4]
  {
    "\n\u0001",
    "\u0001\u0002\u0003\uFFFF\n\u0001#\uFFFF\u0001\u0003",
    "",
    ""
  };
  private static readonly short[] DFA4_eot = DFA.UnpackEncodedString("\u0004\uFFFF");
  private static readonly short[] DFA4_eof = DFA.UnpackEncodedString("\u0004\uFFFF");
  private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars("\u00010\u0001,\u0002\uFFFF");
  private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars("\u00019\u0001]\u0002\uFFFF");
  private static readonly short[] DFA4_accept = DFA.UnpackEncodedString("\u0002\uFFFF\u0001\u0001\u0001\u0002");
  private static readonly short[] DFA4_special = DFA.UnpackEncodedString("\u0004\uFFFF}>");
  private static readonly short[][] DFA4_transition = DFA.UnpackEncodedStringArray(InterpLexer.DFA4_transitionS);
  private const string DFA8_eotS = "\u0001\uFFFF\u0002\a\b\uFFFF\u0003\a\u0001\u0010\u0001\a\u0001\uFFFF\u0001\u0013\u0002\uFFFF";
  private const string DFA8_eofS = "\u0014\uFFFF";
  private const string DFA8_minS = "\u0001\t\u0001r\u0001a\b\uFFFF\u0001i\u0001t\u0001n\u0001A\u0001t\u0001\uFFFF\u0001A\u0002\uFFFF";
  private const string DFA8_maxS = "\u0001z\u0001r\u0001a\b\uFFFF\u0001i\u0001t\u0001n\u0001z\u0001t\u0001\uFFFF\u0001z\u0002\uFFFF";
  private const string DFA8_acceptS = "\u0003\uFFFF\u0001\u0004\u0001\u0005\u0001\u0006\u0001\a\u0001\b\u0001\t\u0001\n\u0001\v\u0005\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0003\u0001\u0001";
  private const string DFA8_specialS = "\u0014\uFFFF}>";
  private static readonly string[] DFA8_transitionS = new string[20]
  {
    "\u0002\n\u0002\uFFFF\u0001\n\u0012\uFFFF\u0001\n\t\uFFFF\u0001\u0006\u0001\u0005\u0004\uFFFF\n\b\u0001\uFFFF\u0001\u0003\u0001\uFFFF\u0001\u0004\u0003\uFFFF\u001A\a\u0001\t\u0005\uFFFF\f\a\u0001\u0002\u0002\a\u0001\u0001\n\a",
    "\u0001\v",
    "\u0001\f",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\u0001\r",
    "\u0001\u000E",
    "\u0001\u000F",
    "\u001A\a\u0006\uFFFF\u001A\a",
    "\u0001\u0011",
    "",
    "\u001A\a\u0004\uFFFF\u0001\u0012\u0001\uFFFF\u001A\a",
    "",
    ""
  };
  private static readonly short[] DFA8_eot = DFA.UnpackEncodedString("\u0001\uFFFF\u0002\a\b\uFFFF\u0003\a\u0001\u0010\u0001\a\u0001\uFFFF\u0001\u0013\u0002\uFFFF");
  private static readonly short[] DFA8_eof = DFA.UnpackEncodedString("\u0014\uFFFF");
  private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars("\u0001\t\u0001r\u0001a\b\uFFFF\u0001i\u0001t\u0001n\u0001A\u0001t\u0001\uFFFF\u0001A\u0002\uFFFF");
  private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars("\u0001z\u0001r\u0001a\b\uFFFF\u0001i\u0001t\u0001n\u0001z\u0001t\u0001\uFFFF\u0001z\u0002\uFFFF");
  private static readonly short[] DFA8_accept = DFA.UnpackEncodedString("\u0003\uFFFF\u0001\u0004\u0001\u0005\u0001\u0006\u0001\a\u0001\b\u0001\t\u0001\n\u0001\v\u0005\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0003\u0001\u0001");
  private static readonly short[] DFA8_special = DFA.UnpackEncodedString("\u0014\uFFFF}>");
  private static readonly short[][] DFA8_transition = DFA.UnpackEncodedStringArray(InterpLexer.DFA8_transitionS);

  public InterpLexer() => this.InitializeCyclicDFAs();

  public InterpLexer(ICharStream input)
    : this(input, (RecognizerSharedState) null)
  {
  }

  public InterpLexer(ICharStream input, RecognizerSharedState state)
    : base(input, state)
  {
    this.InitializeCyclicDFAs();
  }

  public virtual string GrammarFileName => "Interp.g";

  public void mT__12()
  {
    try
    {
      int num1 = 12;
      int num2 = 0;
      this.Match("print");
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mT__13()
  {
    try
    {
      int num1 = 13;
      int num2 = 0;
      this.Match("mat");
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mT__14()
  {
    try
    {
      int num1 = 14;
      int num2 = 0;
      this.Match("print_mat");
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mEND_OF_STATEMENT()
  {
    try
    {
      int num1 = 5;
      int num2 = 0;
      this.Match(59);
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mASSIGNMENT()
  {
    try
    {
      int num1 = 4;
      int num2 = 0;
      this.Match(61);
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mPLUS()
  {
    try
    {
      int num1 = 8;
      int num2 = 0;
      this.Match(43);
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mMULT()
  {
    try
    {
      int num1 = 9;
      int num2 = 0;
      this.Match(42);
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mVARIABLE()
  {
    try
    {
      int num1 = 6;
      int num2 = 0;
      int num3 = 0;
      while (true)
      {
        int num4 = 2;
        int num5 = ((IIntStream) this.input).LA(1);
        if (num5 >= 65 && num5 <= 90 || num5 >= 97 && num5 <= 122)
          num4 = 1;
        if (num4 == 1)
        {
          if (((IIntStream) this.input).LA(1) >= 65 && ((IIntStream) this.input).LA(1) <= 90 || ((IIntStream) this.input).LA(1) >= 97 && ((IIntStream) this.input).LA(1) <= 122)
          {
            ((IIntStream) this.input).Consume();
            ++num3;
          }
          else
            break;
        }
        else
          goto label_8;
      }
      MismatchedSetException mismatchedSetException = new MismatchedSetException((BitSet) null, (IIntStream) this.input);
      this.Recover((RecognitionException) mismatchedSetException);
      throw mismatchedSetException;
label_8:
      if (num3 < 1)
        throw new EarlyExitException(1, (IIntStream) this.input);
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mINT_LITERAL()
  {
    try
    {
      int num1 = 7;
      int num2 = 0;
      int num3 = 0;
      while (true)
      {
        int num4 = 2;
        int num5 = ((IIntStream) this.input).LA(1);
        if (num5 >= 48 && num5 <= 57)
          num4 = 1;
        if (num4 == 1)
        {
          this.MatchRange(48, 57);
          ++num3;
        }
        else
          break;
      }
      if (num3 < 1)
        throw new EarlyExitException(2, (IIntStream) this.input);
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mMAT_DATA()
  {
    try
    {
      int num1 = 10;
      int num2 = 0;
      this.Match(91);
      switch (this.dfa6.Predict((IIntStream) this.input))
      {
        case 1:
          this.mINT_LITERAL();
          break;
        case 2:
          int num3 = 0;
          while (true)
          {
            if (this.dfa3.Predict((IIntStream) this.input) == 1)
            {
              this.mINT_LITERAL();
              this.Match(44);
              ++num3;
            }
            else
              break;
          }
          if (num3 < 1)
            throw new EarlyExitException(3, (IIntStream) this.input);
          this.mINT_LITERAL();
          break;
        case 3:
          int num4 = 0;
          while (true)
          {
            int num5 = 2;
            if (((IIntStream) this.input).LA(1) == 91)
              num5 = 1;
            if (num5 == 1)
            {
              this.Match(91);
              int num6 = 0;
              while (true)
              {
                if (this.dfa4.Predict((IIntStream) this.input) == 1)
                {
                  this.mINT_LITERAL();
                  this.Match(44);
                  ++num6;
                }
                else
                  break;
              }
              if (num6 >= 1)
              {
                this.mINT_LITERAL();
                this.Match(93);
                ++num4;
              }
              else
                break;
            }
            else
              goto label_19;
          }
          throw new EarlyExitException(4, (IIntStream) this.input);
label_19:
          if (num4 < 1)
            throw new EarlyExitException(5, (IIntStream) this.input);
          break;
      }
      this.Match(93);
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num2;
    }
    finally
    {
    }
  }

  public void mWHITESPACE()
  {
    try
    {
      int num1 = 11;
      int num2 = 0;
      while (true)
      {
        int num3 = 2;
        int num4 = ((IIntStream) this.input).LA(1);
        if (num4 >= 9 && num4 <= 10 || num4 == 13 || num4 == 32)
          num3 = 1;
        if (num3 == 1)
        {
          if (((IIntStream) this.input).LA(1) >= 9 && ((IIntStream) this.input).LA(1) <= 10 || ((IIntStream) this.input).LA(1) == 13 || ((IIntStream) this.input).LA(1) == 32)
          {
            ((IIntStream) this.input).Consume();
            ++num2;
          }
          else
            break;
        }
        else
          goto label_8;
      }
      MismatchedSetException mismatchedSetException = new MismatchedSetException((BitSet) null, (IIntStream) this.input);
      this.Recover((RecognitionException) mismatchedSetException);
      throw mismatchedSetException;
label_8:
      if (num2 < 1)
        throw new EarlyExitException(7, (IIntStream) this.input);
      int num5 = 99;
      ((BaseRecognizer) this).state.type = num1;
      ((BaseRecognizer) this).state.channel = num5;
    }
    finally
    {
    }
  }

  public virtual void mTokens()
  {
    switch (this.dfa8.Predict((IIntStream) this.input))
    {
      case 1:
        this.mT__12();
        break;
      case 2:
        this.mT__13();
        break;
      case 3:
        this.mT__14();
        break;
      case 4:
        this.mEND_OF_STATEMENT();
        break;
      case 5:
        this.mASSIGNMENT();
        break;
      case 6:
        this.mPLUS();
        break;
      case 7:
        this.mMULT();
        break;
      case 8:
        this.mVARIABLE();
        break;
      case 9:
        this.mINT_LITERAL();
        break;
      case 10:
        this.mMAT_DATA();
        break;
      case 11:
        this.mWHITESPACE();
        break;
    }
  }

  private void InitializeCyclicDFAs()
  {
    this.dfa6 = new InterpLexer.DFA6((BaseRecognizer) this);
    this.dfa3 = new InterpLexer.DFA3((BaseRecognizer) this);
    this.dfa4 = new InterpLexer.DFA4((BaseRecognizer) this);
    this.dfa8 = new InterpLexer.DFA8((BaseRecognizer) this);
  }

  protected class DFA6 : DFA
  {
    public DFA6(BaseRecognizer recognizer)
    {
      this.recognizer = recognizer;
      this.decisionNumber = 6;
      this.eot = InterpLexer.DFA6_eot;
      this.eof = InterpLexer.DFA6_eof;
      this.min = InterpLexer.DFA6_min;
      this.max = InterpLexer.DFA6_max;
      this.accept = InterpLexer.DFA6_accept;
      this.special = InterpLexer.DFA6_special;
      this.transition = InterpLexer.DFA6_transition;
    }

    public virtual string Description => "159:17: ( ( INT_LITERAL ) | ( ( INT_LITERAL ',' )+ INT_LITERAL ) | ( ( '[' ( INT_LITERAL ',' )+ INT_LITERAL ']' )+ ) )";
  }

  protected class DFA3 : DFA
  {
    public DFA3(BaseRecognizer recognizer)
    {
      this.recognizer = recognizer;
      this.decisionNumber = 3;
      this.eot = InterpLexer.DFA3_eot;
      this.eof = InterpLexer.DFA3_eof;
      this.min = InterpLexer.DFA3_min;
      this.max = InterpLexer.DFA3_max;
      this.accept = InterpLexer.DFA3_accept;
      this.special = InterpLexer.DFA3_special;
      this.transition = InterpLexer.DFA3_transition;
    }

    public virtual string Description => "()+ loopback of 159:36: ( INT_LITERAL ',' )+";
  }

  protected class DFA4 : DFA
  {
    public DFA4(BaseRecognizer recognizer)
    {
      this.recognizer = recognizer;
      this.decisionNumber = 4;
      this.eot = InterpLexer.DFA4_eot;
      this.eof = InterpLexer.DFA4_eof;
      this.min = InterpLexer.DFA4_min;
      this.max = InterpLexer.DFA4_max;
      this.accept = InterpLexer.DFA4_accept;
      this.special = InterpLexer.DFA4_special;
      this.transition = InterpLexer.DFA4_transition;
    }

    public virtual string Description => "()+ loopback of 159:76: ( INT_LITERAL ',' )+";
  }

  protected class DFA8 : DFA
  {
    public DFA8(BaseRecognizer recognizer)
    {
      this.recognizer = recognizer;
      this.decisionNumber = 8;
      this.eot = InterpLexer.DFA8_eot;
      this.eof = InterpLexer.DFA8_eof;
      this.min = InterpLexer.DFA8_min;
      this.max = InterpLexer.DFA8_max;
      this.accept = InterpLexer.DFA8_accept;
      this.special = InterpLexer.DFA8_special;
      this.transition = InterpLexer.DFA8_transition;
    }

    public virtual string Description => "1:1: Tokens : ( T__12 | T__13 | T__14 | END_OF_STATEMENT | ASSIGNMENT | PLUS | MULT | VARIABLE | INT_LITERAL | MAT_DATA | WHITESPACE );";
  }
}
