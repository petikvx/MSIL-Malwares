// Decompiled with JetBrains decompiler
// Type: jd.qT
// Assembly: RuntimeFieldI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3177D6BF-0678-437F-AD25-445C5521A270
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4e662e06b02d9a2d6b61135dedc905b8bc0ad6107d655cb2448b7eedfbf9c5b6.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace jd
{
  public class qT : UM
  {
    private double vv8;
    private double Uvm;
    private double WvV;
    internal static qT cNW;

    public qT()
    {
      qT.lNM();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.vv8 = 0.0;
      int num1 = 0;
      if (false)
        goto label_3;
label_1:
      switch (num1)
      {
        default:
          this.Uvm = 0.0;
          this.WvV = 0.0;
          return;
      }
label_3:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public qT(double _param1, double _param2, double _param3)
    {
      gs.JD3Ei4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num1 = 0;
      if (false)
      {
        int num2;
        num1 = num2;
      }
      switch (num1)
      {
        default:
          this.vv8 = _param1;
          this.Uvm = _param2;
          this.WvV = _param3;
          break;
      }
    }

    public qT(UM _param1)
    {
      gs.JD3Ei4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num1 = 2;
      while (true)
      {
        bool flag;
        switch (num1)
        {
          case 1:
            goto label_7;
          case 2:
            flag = _param1.afb() == 3;
            if (true)
            {
              num1 = 0;
              continue;
            }
            break;
          default:
            if (!flag)
            {
              Console.WriteLine("Error while creating Vector3: amount of params isnot 3!");
              if (true)
              {
                num1 = 1;
                continue;
              }
              break;
            }
            goto label_5;
        }
        int num2;
        num1 = num2;
      }
label_5:
      this.vv8 = _param1.zfZ(0);
      this.Uvm = qT.fNX((object) _param1, 1);
      this.WvV = qT.fNX((object) _param1, 2);
      return;
label_7:;
    }

    double UM.this[int _param1]
    {
      get
      {
        double num1;
        int num2;
        switch (_param1)
        {
          case 0:
            num1 = this.vv8;
            num2 = 1;
            if ((object) qT.UNw() != null)
            {
              int num3;
              num2 = num3;
              break;
            }
            break;
          case 1:
            num1 = this.Uvm;
            goto label_2;
          case 2:
label_6:
            num1 = this.WvV;
            goto label_2;
          default:
            num1 = 0.0;
            num2 = 3;
            break;
        }
        switch (num2)
        {
          case 2:
            goto label_6;
        }
label_2:
        return num1;
      }
      set
      {
        int num1;
        switch (_param1)
        {
          case 0:
            this.vv8 = value;
            num1 = 1;
            if ((object) qT.UNw() != null)
            {
              int num2;
              num1 = num2;
              break;
            }
            break;
          case 1:
            this.Uvm = value;
            return;
          case 2:
            this.WvV = value;
            num1 = 2;
            break;
          default:
            num1 = qT.xNS() ? 0 : 0;
            break;
        }
        switch (num1)
        {
        }
      }
    }

    void UM.DfQ()
    {
      try
      {
        Console.WriteLine("Vector3: [{0}, {1}, {2}]", (object) this.vv8, (object) this.Uvm, (object) this.WvV);
      }
      catch (NullReferenceException ex)
      {
        Console.WriteLine("Empty Vector3!");
      }
    }

    int UM.Diploma\u002Eentity\u002EIVector\u002Elength => 3;

    double UM.JfU() => qT.fNQ(this.vv8 * this.vv8 + this.Uvm * this.Uvm + this.WvV * this.WvV);

    [SpecialName]
    public double Vvn() => this.vv8;

    [SpecialName]
    public void Avy(double _param1) => this.vv8 = _param1;

    public double Y
    {
      get => this.Uvm;
      set => this.Uvm = value;
    }

    [SpecialName]
    public double Bvh() => this.WvV;

    [SpecialName]
    public void zvx(double _param1) => this.WvV = _param1;

    public double hvD() => Math.Sqrt(this.vv8 * this.vv8 + this.Uvm * this.Uvm + this.WvV * this.WvV);

    public static qT operator +(qT _param0, qT _param1) => new qT(_param0.vv8 + _param1.vv8, _param0.Uvm + _param1.Uvm, _param0.WvV + _param1.WvV);

    public static qT operator -(qT _param0, qT _param1) => new qT(_param0.vv8 - _param1.vv8, _param0.Uvm - _param1.Uvm, _param0.WvV - _param1.WvV);

    public static qT operator *(double _param0, qT _param1) => new qT(_param0 * _param1.vv8, _param0 * _param1.Uvm, _param0 * _param1.WvV);

    public static qT operator *(int _param0, qT _param1) => new qT((double) _param0 * _param1.vv8, (double) _param0 * _param1.Uvm, (double) _param0 * _param1.WvV);

    public static double operator *(qT _param0, qT _param1) => _param0.vv8 * _param1.vv8 + _param0.Uvm * _param1.Uvm + _param0.WvV * _param1.WvV;

    public static qT operator %(qT _param0, qT _param1) => new qT(_param0.Uvm * _param1.WvV - _param0.WvV * _param1.Uvm, _param0.WvV * _param1.vv8 - _param0.vv8 * _param1.WvV, _param0.vv8 * _param1.Uvm - _param0.Uvm * _param1.vv8);

    public static bool operator ==(qT _param0, qT _param1)
    {
      if ((object) _param0 != (object) _param1)
        goto label_10;
      else
        goto label_8;
label_1:
      int num1;
      int num2 = num1;
label_2:
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_13;
          case 2:
            goto label_5;
          case 3:
            goto label_14;
          case 4:
            goto label_9;
          default:
            if (_param0.Uvm == _param1.Uvm)
            {
              if (qT.xNS())
              {
                num2 = 3;
                continue;
              }
              goto label_1;
            }
            else
              goto label_18;
        }
      }
label_9:
      int num3 = (object) _param1 == null ? 1 : 0;
      goto label_17;
label_14:
      int num4 = _param0.WvV == _param1.WvV ? 1 : 0;
      goto label_19;
label_5:
      if (_param0.vv8 == _param1.vv8)
      {
        num2 = 0;
        if ((object) qT.UNw() == null)
        {
          num2 = 0;
          goto label_2;
        }
        else
          goto label_2;
      }
      else
        goto label_18;
label_8:
      bool flag = true;
      if (qT.xNS())
      {
        num2 = 1;
        goto label_2;
      }
      else
        goto label_1;
label_10:
      if ((object) _param0 != null)
      {
        num2 = 4;
        goto label_2;
      }
      else
      {
        num3 = 1;
        goto label_17;
      }
label_13:
      return flag;
label_17:
      if (num3 != 0)
      {
        flag = false;
        goto label_13;
      }
      else
        goto label_5;
label_18:
      num4 = 0;
label_19:
      flag = num4 != 0;
      goto label_13;
    }

    public static bool operator !=(qT _param0, qT _param1) => !(_param0 == _param1);

    public bool Tv1(qT _param1)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 1:
            if (this.vv8 == _param1.vv8)
            {
              num1 = (object) qT.UNw() == null ? 0 : 0;
              continue;
            }
            goto label_6;
          default:
            goto label_2;
        }
      }
label_2:
      int num2;
      if (this.Uvm == _param1.Uvm)
      {
        num2 = this.WvV == _param1.WvV ? 1 : 0;
        goto label_7;
      }
label_6:
      num2 = 0;
label_7:
      return num2 != 0;
    }

    public override int GetHashCode()
    {
      int num1 = 31 * 0 + this.vv8.GetHashCode();
      int num2 = 0;
      if (qT.xNS())
        goto label_2;
label_1:
      int num3;
      num2 = num3;
label_2:
      int hashCode;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_4;
          default:
            num1 = 31 * (31 * num1 + this.Uvm.GetHashCode()) + this.WvV.GetHashCode();
            hashCode = num1;
            if (qT.xNS())
            {
              num2 = 1;
              continue;
            }
            goto label_1;
        }
      }
label_4:
      return hashCode;
    }

    internal static void lNM() => gs.JD3Ei4();

    internal static bool xNS() => (object) qT.cNW == null;

    internal static qT UNw() => qT.cNW;

    internal static double fNX([In] object obj0, int _param1) => ((UM) obj0).zfZ(_param1);

    internal static double fNQ([In] double obj0) => Math.Sqrt(obj0);
  }
}
