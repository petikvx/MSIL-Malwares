// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.WebOperationContext
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.IO;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;
using System.ServiceModel.Syndication;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace System.ServiceModel.Web
{
  [ComVisible(false)]
  public class WebOperationContext : IExtension<OperationContext>
  {
    internal static readonly string DefaultTextMediaType = "text/plain";
    internal static readonly string DefaultJsonMediaType = "application/json";
    internal static readonly string DefaultXmlMediaType = "application/xml";
    internal static readonly string DefaultAtomMediaType = "application/atom+xml";
    internal static readonly string DefaultStreamMediaType = WebHttpBehavior.defaultStreamContentType;
    private OperationContext operationContext;

    public WebOperationContext(OperationContext operationContext)
    {
      this.operationContext = operationContext != null ? operationContext : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (operationContext));
      if (operationContext.Extensions.Find<WebOperationContext>() != null)
        return;
      operationContext.Extensions.Add((IExtension<OperationContext>) this);
    }

    public static WebOperationContext Current => OperationContext.Current == null ? (WebOperationContext) null : OperationContext.Current.Extensions.Find<WebOperationContext>() ?? new WebOperationContext(OperationContext.Current);

    public IncomingWebRequestContext IncomingRequest => new IncomingWebRequestContext(this.operationContext);

    public IncomingWebResponseContext IncomingResponse => new IncomingWebResponseContext(this.operationContext);

    public OutgoingWebRequestContext OutgoingRequest => new OutgoingWebRequestContext(this.operationContext);

    public OutgoingWebResponseContext OutgoingResponse => new OutgoingWebResponseContext(this.operationContext);

    public void Attach(OperationContext owner)
    {
    }

    public void Detach(OperationContext owner)
    {
    }

    public Message CreateJsonResponse<T>(T instance)
    {
      DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof (T));
      return this.CreateJsonResponse<T>(instance, serializer);
    }

    public Message CreateJsonResponse<T>(T instance, DataContractJsonSerializer serializer)
    {
      if (serializer == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (serializer));
      Message message = Message.CreateMessage(MessageVersion.None, (string) null, (object) instance, (XmlObjectSerializer) serializer);
      message.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.JsonProperty);
      this.AddContentType(WebOperationContext.DefaultJsonMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return message;
    }

    public Message CreateXmlResponse<T>(T instance)
    {
      DataContractSerializer serializer = new DataContractSerializer(typeof (T));
      return this.CreateXmlResponse<T>(instance, (XmlObjectSerializer) serializer);
    }

    public Message CreateXmlResponse<T>(T instance, XmlObjectSerializer serializer)
    {
      if (serializer == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (serializer));
      Message message = Message.CreateMessage(MessageVersion.None, (string) null, (object) instance, serializer);
      message.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.XmlProperty);
      this.AddContentType(WebOperationContext.DefaultXmlMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return message;
    }

    public Message CreateXmlResponse<T>(T instance, XmlSerializer serializer)
    {
      if (serializer == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (serializer));
      Message message = Message.CreateMessage(MessageVersion.None, (string) null, (BodyWriter) new WebOperationContext.XmlSerializerBodyWriter((object) instance, serializer));
      message.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.XmlProperty);
      this.AddContentType(WebOperationContext.DefaultXmlMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return message;
    }

    public Message CreateXmlResponse(XDocument document)
    {
      if (document == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (document));
      Message xmlResponse = document.FirstNode != null ? Message.CreateMessage(MessageVersion.None, (string) null, document.CreateReader()) : Message.CreateMessage(MessageVersion.None, (string) null);
      xmlResponse.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.XmlProperty);
      this.AddContentType(WebOperationContext.DefaultXmlMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return xmlResponse;
    }

    public Message CreateXmlResponse(XElement element)
    {
      Message xmlResponse = element != null ? Message.CreateMessage(MessageVersion.None, (string) null, element.CreateReader()) : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (element));
      xmlResponse.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.XmlProperty);
      this.AddContentType(WebOperationContext.DefaultXmlMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return xmlResponse;
    }

    public Message CreateAtom10Response(SyndicationItem item)
    {
      Message atom10Response = item != null ? Message.CreateMessage(MessageVersion.None, (string) null, (object) item.GetAtom10Formatter()) : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (item));
      atom10Response.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.XmlProperty);
      this.AddContentType(WebOperationContext.DefaultAtomMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return atom10Response;
    }

    public Message CreateAtom10Response(SyndicationFeed feed)
    {
      Message atom10Response = feed != null ? Message.CreateMessage(MessageVersion.None, (string) null, (object) feed.GetAtom10Formatter()) : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (feed));
      atom10Response.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.XmlProperty);
      this.AddContentType(WebOperationContext.DefaultAtomMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return atom10Response;
    }

    public Message CreateAtom10Response(ServiceDocument document)
    {
      Message atom10Response = document != null ? Message.CreateMessage(MessageVersion.None, (string) null, (object) document.GetFormatter()) : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (document));
      atom10Response.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.XmlProperty);
      this.AddContentType(WebOperationContext.DefaultAtomMediaType, this.OutgoingResponse.BindingWriteEncoding);
      return atom10Response;
    }

    public Message CreateTextResponse(string text) => this.CreateTextResponse(text, WebOperationContext.DefaultTextMediaType, Encoding.UTF8);

    public Message CreateTextResponse(string text, string contentType) => this.CreateTextResponse(text, contentType, Encoding.UTF8);

    public Message CreateTextResponse(string text, string contentType, Encoding encoding)
    {
      if (text == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (text));
      if (contentType == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (contentType));
      if (encoding == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (encoding));
      Message textResponse = (Message) new HttpStreamMessage((BodyWriter) StreamBodyWriter.CreateStreamBodyWriter((Action<Stream>) (stream =>
      {
        byte[] preamble = encoding.GetPreamble();
        if (preamble.Length != 0)
          stream.Write(preamble, 0, preamble.Length);
        byte[] bytes = encoding.GetBytes(text);
        stream.Write(bytes, 0, bytes.Length);
        stream.Flush();
      })));
      textResponse.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.RawProperty);
      this.AddContentType(contentType, (Encoding) null);
      return textResponse;
    }

    public Message CreateTextResponse(Action<TextWriter> textWriter, string contentType)
    {
      Encoding encoding = this.OutgoingResponse.BindingWriteEncoding ?? Encoding.UTF8;
      return this.CreateTextResponse(textWriter, contentType, encoding);
    }

    public Message CreateTextResponse(
      Action<TextWriter> textWriter,
      string contentType,
      Encoding encoding)
    {
      if (textWriter == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (textWriter));
      if (contentType == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (contentType));
      if (encoding == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (encoding));
      Message textResponse = (Message) new HttpStreamMessage((BodyWriter) StreamBodyWriter.CreateStreamBodyWriter((Action<Stream>) (stream =>
      {
        using (TextWriter textWriter1 = (TextWriter) new StreamWriter(stream, encoding))
          textWriter(textWriter1);
      })));
      textResponse.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.RawProperty);
      this.AddContentType(contentType, (Encoding) null);
      return textResponse;
    }

    public Message CreateStreamResponse(Stream stream, string contentType)
    {
      if (stream == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (stream));
      if (contentType == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (contentType));
      Message message = ByteStreamMessage.CreateMessage(stream);
      message.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.RawProperty);
      this.AddContentType(contentType, (Encoding) null);
      return message;
    }

    public Message CreateStreamResponse(StreamBodyWriter bodyWriter, string contentType)
    {
      if (bodyWriter == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (bodyWriter));
      if (contentType == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (contentType));
      Message streamResponse = (Message) new HttpStreamMessage((BodyWriter) bodyWriter);
      streamResponse.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.RawProperty);
      this.AddContentType(contentType, (Encoding) null);
      return streamResponse;
    }

    public Message CreateStreamResponse(Action<Stream> streamWriter, string contentType)
    {
      if (streamWriter == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (streamWriter));
      if (contentType == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (contentType));
      Message streamResponse = (Message) new HttpStreamMessage((BodyWriter) StreamBodyWriter.CreateStreamBodyWriter(streamWriter));
      streamResponse.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.RawProperty);
      this.AddContentType(contentType, (Encoding) null);
      return streamResponse;
    }

    public UriTemplate GetUriTemplate(string operationName)
    {
      if (string.IsNullOrEmpty(operationName))
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (operationName));
      if (!(OperationContext.Current.EndpointDispatcher.DispatchRuntime.OperationSelector is WebHttpDispatchOperationSelector operationSelector))
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.OperationSelectorNotWebSelector, (object) typeof (WebHttpDispatchOperationSelector))));
      }
      return operationSelector.GetUriTemplate(operationName);
    }

    private void AddContentType(string contentType, Encoding encoding)
    {
      if (!string.IsNullOrEmpty(this.OutgoingResponse.ContentType))
        return;
      if (encoding != null)
        contentType = WebMessageEncoderFactory.GetContentType(contentType, encoding);
      this.OutgoingResponse.ContentType = contentType;
    }

    private class XmlSerializerBodyWriter : BodyWriter
    {
      private object instance;
      private XmlSerializer serializer;

      public XmlSerializerBodyWriter(object instance, XmlSerializer serializer)
        : base(false)
      {
        if (instance == null)
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (instance));
        if (serializer == null)
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (serializer));
        this.instance = instance;
        this.serializer = serializer;
      }

      protected override void OnWriteBodyContents(XmlDictionaryWriter writer) => this.serializer.Serialize((XmlWriter) writer, this.instance);
    }
  }
}
