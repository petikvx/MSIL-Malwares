// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: CustomQueryInterfaceMo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B293447-7555-427F-9A9F-AB127E35E000
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d42aac0420fddf3828862d0a9a1e79708beccbc282bf11d5b45daa35c47ba73f.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -709650902;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -390366048)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1093366003 ^ -1759021258;
            continue;
          case 2:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * 1629445025 ^ -1063274201;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -81980732;
      bool flag;
      float[] numArray;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -432155631)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1509701880 ^ 60136723;
            continue;
          case 2:
            flag = aIndex < numArray.Length;
            num1 = -2079189432;
            continue;
          case 3:
            int num3 = !flag ? 471975098 : (num3 = 1155757349);
            num1 = num3 ^ (int) num2 * 935541672;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = -949756129;
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * -260356288 ^ -1642934289;
            continue;
          case 6:
            num1 = (int) num2 * -1884761884 ^ -439242201;
            continue;
          case 7:
            numArray = new float[json.Count];
            num1 = (int) num2 * 501186825 ^ 603727185;
            continue;
          case 9:
            riskChances = numArray;
            num1 = (int) num2 * -233734264 ^ -1004023010;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 1533437072;
      int num2;
      int aIndex1;
      int aIndex2;
      int count;
      bool flag1;
      List<Card> cardList;
      Card[] array;
      JSONNode jsonNode;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 257173674)) % 25U)
        {
          case 0:
            num2 = 0;
            num1 = (int) num3 * -469233567 ^ -1222874796;
            continue;
          case 1:
            ++aIndex2;
            num1 = (int) num3 * 1755430060 ^ -1647695540;
            continue;
          case 2:
            num1 = (int) num3 * 965225742 ^ -1622999093;
            continue;
          case 3:
            num1 = 567740442;
            continue;
          case 4:
            ++num2;
            num1 = (int) num3 * 1186140685 ^ -175447823;
            continue;
          case 5:
            num1 = 17590766;
            continue;
          case 6:
            int num4 = !flag1 ? 1632070 : (num4 = 820848698);
            num1 = num4 ^ (int) num3 * 739594745;
            continue;
          case 7:
            bool flag3 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 194445045;
            continue;
          case 8:
            count = json.Count;
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * -2055064410 ^ -682524808;
            continue;
          case 9:
            int num5;
            num1 = num5 = aIndex1 < maxImpact * 2 ? 15348502 : (num5 = 1485344568);
            continue;
          case 10:
            num1 = (int) num3 * -271360777 ^ 376870146;
            continue;
          case 11:
            int num6 = !flag2 ? 1880612529 : (num6 = 729938814);
            num1 = num6 ^ (int) num3 * 1691262708;
            continue;
          case 12:
            array = cardList.ToArray();
            num1 = (int) num3 * -868247818 ^ -703529984;
            continue;
          case 13:
            num1 = (int) num3 * -1235092630 ^ 957049174;
            continue;
          case 14:
            ++aIndex1;
            num1 = (int) num3 * -815512365 ^ -972200408;
            continue;
          case 16:
            goto label_1;
          case 17:
            num1 = (int) num3 * -1183804043 ^ -1558457605;
            continue;
          case 18:
            flag1 = aIndex2 < count;
            num1 = 1507144133;
            continue;
          case 19:
            num1 = (int) num3 * -617847287 ^ 1003468474;
            continue;
          case 20:
            jsonNode = json[aIndex2];
            aIndex1 = 0;
            num1 = (int) num3 * 439721623 ^ 2023730614;
            continue;
          case 21:
            num1 = 1808040245;
            continue;
          case 22:
            flag2 = num2 < jsonNode[aIndex1].AsInt;
            num1 = 428124904;
            continue;
          case 23:
            num1 = (int) num3 * 1270226434 ^ 1982667769;
            continue;
          case 24:
            num1 = (int) num3 * -1694127182 ^ 2067419295;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString() => Rules.\u200E⁪‌⁮⁮‫‮‏⁭‎⁪⁬‌‭‮‬‬‭‏⁯‏‭⁪‬⁮‭​⁮‫‮⁬⁬⁫‪‍⁯‭‍‏‫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
    {
      (object) this.SprintCount,
      (object) this.MaxImpact,
      (object) this.CardsToString(),
      (object) this.InitialResources,
      (object) this.NormalPlanningCount,
      (object) this.NormalPlanningCost,
      (object) this.OverPlanningCost,
      (object) this.SprintsWonWithoutPlanning,
      (object) this.RiskChancesToString(),
      (object) this.EconomicsAffectsAll,
      (object) this.StayOnSprintMinDiff,
      (object) this.OnlyOneWinner
    });

    private string CardsToString()
    {
label_1:
      int num1 = -784868538;
      int index;
      Card[] cards;
      int num2;
      string str1;
      Card card1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1490354487)) % 18U)
        {
          case 0:
            num1 = (int) num3 * -716977289 ^ -1586113986;
            continue;
          case 1:
            num2 = card1.Type;
            num1 = (int) num3 * -1705866345 ^ -596223516;
            continue;
          case 2:
            int num4;
            num1 = num4 = index < cards.Length ? -1292707460 : (num4 = -1432704049);
            continue;
          case 3:
            str1 = Rules.\u202A​⁭‪⁪​⁪‪‍⁬⁮⁬‍⁬⁫⁬‬⁫⁪‫‍‎⁪⁪‪‏‏⁬‎‭​​‬‮⁭⁪‌‬⁫‭‮(str1, "\n\t");
            num1 = (int) num3 * -1604333662 ^ -1688205096;
            continue;
          case 4:
            index = 0;
            num1 = (int) num3 * -1305401531 ^ 2101179475;
            continue;
          case 5:
            num1 = (int) num3 * -704907206 ^ 725622418;
            continue;
          case 6:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202B⁮‫‪‌⁮‮‌⁪‍‪⁭⁪‭⁯‬⁮​‍⁪‌​⁬⁭⁯⁫‏⁮⁫⁯‭‭‬‪⁭‌‌⁫‎‫‮((object) card2) : (string) null;
            str1 = Rules.\u206F‎⁭⁯‌‪‫⁯‬‍‍‍‫‭⁮⁭⁬‎‭‮⁫‎‌⁮‮⁬⁭‮⁭⁫‬⁮⁫⁬‬‬‪⁪⁭‮‮(str3, str4, " ");
            num1 = -32335562;
            continue;
          case 7:
            card1 = cards[index];
            num1 = -1837783532;
            continue;
          case 8:
            num2 = 0;
            num1 = (int) num3 * 972733964 ^ -71343232;
            continue;
          case 9:
            str1 = "[\n\t";
            num1 = (int) num3 * -1391545625 ^ 1629919392;
            continue;
          case 10:
            num1 = (int) num3 * 1912587993 ^ -118226480;
            continue;
          case 11:
            cards = this.Cards;
            num1 = (int) num3 * 116269052 ^ 676881543;
            continue;
          case 12:
            num1 = (int) num3 * -1208530883 ^ -1410107345;
            continue;
          case 13:
            int num5 = num2 != card1.Type ? -484995155 : (num5 = -614048543);
            num1 = num5 ^ (int) num3 * -1829372226;
            continue;
          case 14:
            goto label_1;
          case 16:
            str2 = Rules.\u202A​⁭‪⁪​⁪‪‍⁬⁮⁬‍⁬⁫⁬‬⁫⁪‫‍‎⁪⁪‪‏‏⁬‎‭​​‬‮⁭⁪‌‬⁫‭‮(str1, "\n]");
            num1 = (int) num3 * 1996878571 ^ 1790476427;
            continue;
          case 17:
            ++index;
            num1 = (int) num3 * 1632066944 ^ 1479601289;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 138808810;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1242534804)) % 9U)
        {
          case 0:
            str2 = Rules.\u202A​⁭‪⁪​⁪‪‍⁬⁮⁬‍⁬⁫⁬‬⁫⁪‫‍‎⁪⁪‪‏‏⁬‎‭​​‬‮⁭⁪‌‬⁫‭‮(str1, " ]");
            num1 = (int) num2 * -1540785682 ^ -1003534391;
            continue;
          case 1:
            str1 = Rules.\u206F‎⁭⁯‌‪‫⁯‬‍‍‍‫‭⁮⁭⁬‎‭‮⁫‎‌⁮‮⁬⁭‮⁭⁫‬⁮⁫⁬‬‬‪⁪⁭‮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200E‏​⁬‬‎⁬‍⁫​‭‪‍​‬‮⁮⁬‏‬‮⁬‍‬‪‏⁬⁬‪‫‏‏‌‌‭‏‏⁯⁬‍‮()));
            num1 = 1938058081;
            continue;
          case 2:
            num1 = (int) num2 * 357179520 ^ -1433247126;
            continue;
          case 3:
            str1 = Rules.\u202A​⁭‪⁪​⁪‪‍⁬⁮⁬‍⁬⁫⁬‬⁫⁪‫‍‎⁪⁪‪‏‏⁬‎‭​​‬‮⁭⁪‌‬⁫‭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200E‏​⁬‬‎⁬‍⁫​‭‪‍​‬‮⁮⁬‏‬‮⁬‍‬‪‏⁬⁬‪‫‏‏‌‌‭‏‏⁯⁬‍‮()));
            num1 = (int) num2 * -749604383 ^ -1828225031;
            continue;
          case 4:
            index = 1;
            num1 = (int) num2 * 865013003 ^ 516782887;
            continue;
          case 5:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? 1536380418 : (num3 = 115276386);
            continue;
          case 7:
            goto label_1;
          case 8:
            ++index;
            num1 = (int) num2 * 418643474 ^ 1354034700;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200E⁪‌⁮⁮‫‮‏⁭‎⁪⁬‌‭‮‬‬‭‏⁯‏‭⁪‬⁮‭​⁮‫‮⁬⁬⁫‪‍⁯‭‍‏‫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202A​⁭‪⁪​⁪‪‍⁬⁮⁬‍⁬⁫⁬‬⁫⁪‫‍‎⁪⁪‪‏‏⁬‎‭​​‬‮⁭⁪‌‬⁫‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202B⁮‫‪‌⁮‮‌⁪‍‪⁭⁪‭⁯‬⁮​‍⁪‌​⁬⁭⁯⁫‏⁮⁫⁯‭‭‬‪⁭‌‌⁫‎‫‮([In] object obj0) => obj0.ToString();

    static string \u206F‎⁭⁯‌‪‫⁯‬‍‍‍‫‭⁮⁭⁬‎‭‮⁫‎‌⁮‮⁬⁭‮⁭⁫‬⁮⁫⁬‬‬‪⁪⁭‮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200E‏​⁬‬‎⁬‍⁫​‭‪‍​‬‮⁮⁬‏‬‮⁬‍‬‪‏⁬⁬‪‫‏‏‌‌‭‏‏⁯⁬‍‮() => CultureInfo.InvariantCulture;
  }
}
