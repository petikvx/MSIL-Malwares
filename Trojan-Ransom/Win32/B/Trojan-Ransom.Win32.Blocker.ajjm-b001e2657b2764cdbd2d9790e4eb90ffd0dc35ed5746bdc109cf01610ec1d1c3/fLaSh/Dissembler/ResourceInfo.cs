// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.ResourceInfo
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace fLaSh.Dissembler
{
  public class ResourceInfo : IDisposable
  {
    private IntPtr TLV4XXtFmV;
    private Dictionary<string, List<Resource>> xbE44J6WKe;
    private List<string> aLo4Kso2DC;

    public Dictionary<string, List<Resource>> Resources
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.xbE44J6WKe;
    }

    public List<string> ResourceTypes
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.aLo4Kso2DC;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ResourceInfo()
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this.TLV4XXtFmV = IntPtr.Zero;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Unload()
    {
      if (!(this.TLV4XXtFmV != IntPtr.Zero))
        return;
      Kernel32.FreeLibrary(this.TLV4XXtFmV);
      this.TLV4XXtFmV = IntPtr.Zero;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Load(string filename)
    {
      this.Unload();
      this.aLo4Kso2DC = new List<string>();
      this.xbE44J6WKe = new Dictionary<string, List<Resource>>();
      this.TLV4XXtFmV = Kernel32.LoadLibraryEx(filename, IntPtr.Zero, 3U);
      if (IntPtr.Zero == this.TLV4XXtFmV)
        throw new Win32Exception(Marshal.GetLastWin32Error());
      if (!Kernel32.EnumResourceTypes(this.TLV4XXtFmV, new Kernel32.EnumResourceTypesDelegate(this.jVGaTWLmY), IntPtr.Zero))
        throw new Win32Exception(Marshal.GetLastWin32Error());
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool jVGaTWLmY([In] IntPtr obj0, [In] IntPtr obj1, [In] IntPtr obj2)
    {
      this.aLo4Kso2DC.Add(ResourceUtil.GetResourceName(obj1));
      if (!Kernel32.EnumResourceNames(obj0, obj1, new Kernel32.EnumResourceNamesDelegate(this.sX1oUu67E), IntPtr.Zero))
        throw new Win32Exception(Marshal.GetLastWin32Error());
      return true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool sX1oUu67E([In] IntPtr obj0, [In] IntPtr obj1, [In] IntPtr obj2, [In] IntPtr obj3)
    {
      if (!Kernel32.EnumResourceLanguages(obj0, obj1, obj2, new Kernel32.EnumResourceLanguagesDelegate(this.JbozQe9bg), IntPtr.Zero))
        throw new Win32Exception(Marshal.GetLastWin32Error());
      return true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool JbozQe9bg([In] IntPtr obj0, [In] IntPtr obj1, [In] IntPtr obj2, [In] ushort obj3, [In] IntPtr obj4)
    {
      string resourceName = ResourceUtil.GetResourceName(obj1);
      List<Resource> resourceList = (List<Resource>) null;
      if (!this.xbE44J6WKe.TryGetValue(resourceName, out resourceList))
      {
        resourceList = new List<Resource>();
        this.xbE44J6WKe[resourceName] = resourceList;
      }
      IntPtr resourceEx = Kernel32.FindResourceEx(obj0, obj1, obj2, (long) obj3);
      IntPtr hResource = Kernel32.LoadResource(obj0, resourceEx);
      int size = Kernel32.SizeofResource(obj0, resourceEx);
      Resource resource;
      switch (ResourceUtil.GetResourceName(obj1))
      {
        case "16":
          resource = (Resource) new VersionResource(obj0, hResource, obj1, obj2, obj3, size);
          break;
        case "14":
          resource = (Resource) new GroupIconResource(obj0, hResource, obj1, obj2, obj3, size);
          break;
        default:
          resource = new Resource(obj0, hResource, obj1, obj2, obj3, size);
          break;
      }
      resourceList.Add(resource);
      return true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Save(string filename) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Dispose() => this.Unload();
  }
}
