// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.Diagnostics.Application.TD
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Globalization;
using System.Resources;
using System.Runtime;
using System.Runtime.Diagnostics;
using System.Security;
using System.Threading;

namespace System.ServiceModel.Web.Diagnostics.Application
{
  internal class TD
  {
    private static ResourceManager resourceManager;
    private static CultureInfo resourceCulture;
    [SecurityCritical]
    private static EventDescriptor[] eventDescriptors;
    private static object syncLock = new object();
    private static volatile bool eventDescriptorsCreated;

    private TD()
    {
    }

    private static ResourceManager ResourceManager
    {
      get
      {
        if (TD.resourceManager == null)
          TD.resourceManager = new ResourceManager("System.ServiceModel.Web.Diagnostics.Application.TD", typeof (TD).Assembly);
        return TD.resourceManager;
      }
    }

    internal static CultureInfo Culture
    {
      get => TD.resourceCulture;
      set => TD.resourceCulture = value;
    }

    internal static bool JsonMessageDecodingStartIsEnabled() => System.ServiceModel.Web.FxTrace.ShouldTraceVerbose && TD.IsEtwEventEnabled(0);

    internal static void JsonMessageDecodingStart()
    {
      TracePayload serializedPayload = System.ServiceModel.Web.FxTrace.Trace.GetSerializedPayload((object) null, (TraceRecord) null, (Exception) null);
      if (!TD.IsEtwEventEnabled(0))
        return;
      TD.WriteEtwEvent(0, (EventTraceActivity) null, serializedPayload.AppDomainFriendlyName);
    }

    internal static bool JsonMessageEncodingStartIsEnabled() => System.ServiceModel.Web.FxTrace.ShouldTraceVerbose && TD.IsEtwEventEnabled(1);

    internal static void JsonMessageEncodingStart(EventTraceActivity eventTraceActivity)
    {
      TracePayload serializedPayload = System.ServiceModel.Web.FxTrace.Trace.GetSerializedPayload((object) null, (TraceRecord) null, (Exception) null);
      if (!TD.IsEtwEventEnabled(1))
        return;
      TD.WriteEtwEvent(1, eventTraceActivity, serializedPayload.AppDomainFriendlyName);
    }

    [SecuritySafeCritical]
    private static void CreateEventDescriptors()
    {
      EventDescriptor[] eventDescriptors = new EventDescriptor[2]
      {
        new EventDescriptor(5203, (byte) 0, (byte) 19, (byte) 5, (byte) 1, 2555, 1152921504606851072L),
        new EventDescriptor(5204, (byte) 0, (byte) 19, (byte) 5, (byte) 1, 2556, 1152921504606851072L)
      };
      ushort[] end2EndEvents = new ushort[1]
      {
        (ushort) 5204
      };
      System.ServiceModel.Web.FxTrace.UpdateEventDefinitions(eventDescriptors, end2EndEvents);
      TD.eventDescriptors = eventDescriptors;
    }

    private static void EnsureEventDescriptors()
    {
      if (TD.eventDescriptorsCreated)
        return;
      Monitor.Enter(TD.syncLock);
      try
      {
        if (TD.eventDescriptorsCreated)
          return;
        TD.CreateEventDescriptors();
        TD.eventDescriptorsCreated = true;
      }
      finally
      {
        Monitor.Exit(TD.syncLock);
      }
    }

    private static bool IsEtwEventEnabled(int eventIndex)
    {
      if (!System.ServiceModel.Web.FxTrace.Trace.IsEtwProviderEnabled)
        return false;
      TD.EnsureEventDescriptors();
      return System.ServiceModel.Web.FxTrace.IsEventEnabled(eventIndex);
    }

    [SecuritySafeCritical]
    private static bool WriteEtwEvent(
      int eventIndex,
      EventTraceActivity eventParam0,
      string eventParam1)
    {
      TD.EnsureEventDescriptors();
      return System.ServiceModel.Web.FxTrace.Trace.EtwProvider.WriteEvent(ref TD.eventDescriptors[eventIndex], eventParam0, eventParam1);
    }
  }
}
