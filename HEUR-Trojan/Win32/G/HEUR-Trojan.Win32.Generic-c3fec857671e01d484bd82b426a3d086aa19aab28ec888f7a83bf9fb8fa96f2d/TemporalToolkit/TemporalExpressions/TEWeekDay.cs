// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEWeekDay
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEWeekDay : TemporalExpression
  {
    public DayOfWeek Start { get; set; }

    public DayOfWeek? End { get; set; }

    public TEWeekDay(DateTime date)
    {
      this.Start = date.DayOfWeek;
      this.End = new DayOfWeek?();
    }

    public TEWeekDay(DayOfWeek day)
    {
label_1:
      int num1 = 1128684874;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1790884526)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Start = day;
            num1 = (int) num2 * -1911219709 ^ -2060688388;
            continue;
          case 2:
            this.End = new DayOfWeek?();
            num1 = (int) num2 * -1063443588 ^ -1252534774;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -619389116 ^ 1246606993;
            continue;
          case 5:
            num1 = (int) num2 * 1056750098 ^ 1952092564;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public TEWeekDay(DayOfWeek start, DayOfWeek end)
    {
      this.Start = start;
      this.End = new DayOfWeek?(end);
    }

    public override bool Includes(DateTime aDate)
    {
      if (!this.End.HasValue)
        goto label_3;
label_1:
      int num1 = 93784574;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1105507191)) % 13U)
        {
          case 0:
            num3 = aDate.DayOfWeek >= this.Start ? 1 : 0;
            goto label_19;
          case 1:
            flag3 = this.End.Value >= this.Start;
            num1 = (int) num2 * -1971413410 ^ 2082431870;
            continue;
          case 2:
            num1 = (int) num2 * 1716708720 ^ 958582187;
            continue;
          case 3:
            flag2 = flag1;
            num1 = 1746523394;
            continue;
          case 5:
            num1 = 1332223603;
            continue;
          case 6:
            num1 = (int) num2 * 1162700403 ^ -1796096166;
            continue;
          case 7:
            if (aDate.DayOfWeek > this.End.Value)
            {
              num1 = 740376822;
              continue;
            }
            num3 = 1;
            goto label_19;
          case 8:
            num4 = aDate.DayOfWeek >= this.Start ? 1 : 0;
            break;
          case 9:
            if (aDate.DayOfWeek <= this.End.Value)
            {
              num1 = (int) num2 * 1095016922 ^ 1485975047;
              continue;
            }
            num4 = 0;
            break;
          case 10:
            goto label_1;
          case 11:
            int num5 = flag3 ? -1150091439 : (num5 = -950488809);
            num1 = num5 ^ (int) num2 * -297813914;
            continue;
          case 12:
            goto label_3;
          default:
            goto label_20;
        }
        flag1 = num4 != 0;
        num1 = 1736625133;
        continue;
label_19:
        flag1 = num3 != 0;
        num1 = 1736625133;
      }
label_20:
      return flag2;
label_3:
      flag1 = this.Start == aDate.DayOfWeek;
      num1 = 547680150;
      goto label_2;
    }
  }
}
