// Decompiled with JetBrains decompiler
// Type: Cradiator.Audio.SpeechMaker
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Config;
using Cradiator.Extensions;
using Cradiator.Model;
using System;
using System.Collections.Generic;
using System.Speech.Synthesis;

namespace Cradiator.Audio
{
  public class SpeechMaker : IConfigObserver
  {
    private readonly TimeSpan OneSecond = new TimeSpan(0, 0, 1);
    private readonly ISpeechTextParser _speechTextParser;
    private string _brokenBuildText;
    private string _fixedBuildText;

    public SpeechMaker(IConfigSettings configSettings, ISpeechTextParser speechTextParser)
    {
      this._speechTextParser = speechTextParser;
      this._brokenBuildText = configSettings.BrokenBuildText;
      this._fixedBuildText = configSettings.FixedBuildText;
      configSettings.AddObserver((IConfigObserver) this);
    }

    public PromptBuilder BuildIsBroken(IEnumerable<ProjectStatus> projects) => this.MakeSpeech(projects, this._brokenBuildText);

    public PromptBuilder BuildIsFixed(IEnumerable<ProjectStatus> projects) => this.MakeSpeech(projects, this._fixedBuildText);

    private PromptBuilder MakeSpeech(
      IEnumerable<ProjectStatus> projects,
      string rawSentence)
    {
      PromptBuilder promptBuilder = new PromptBuilder();
      if (rawSentence.IsEmpty())
        return promptBuilder;
      promptBuilder.AppendBreak(this.OneSecond);
      foreach (ProjectStatus project in projects)
      {
        promptBuilder.AppendBreak(this.OneSecond);
        promptBuilder.AppendText(this._speechTextParser.Parse(rawSentence, project));
      }
      return promptBuilder;
    }

    public void ConfigUpdated(ConfigSettings newSettings)
    {
      this._brokenBuildText = newSettings.BrokenBuildText;
      this._fixedBuildText = newSettings.FixedBuildText;
    }
  }
}
