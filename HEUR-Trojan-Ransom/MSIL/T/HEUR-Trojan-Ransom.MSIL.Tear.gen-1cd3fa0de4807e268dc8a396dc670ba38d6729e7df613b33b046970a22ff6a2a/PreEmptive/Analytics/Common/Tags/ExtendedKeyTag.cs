// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.ExtendedKeyTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common.Tags
{
  public class ExtendedKeyTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 13;
        int num1 = -13029;
        int num2 = num1;
        num1 = -13029;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("뇀뇂\uAAC4럆곈맊만뛎", A_1);
          default:
            goto case 1;
        }
      }
    }

    public ExtendedKeyTag(string name, string value, [Optional] bool isNumeric)
    {
      int A_1 = 9;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Name = name;
      this.Value = value;
      this.AddAttribute(Utils.a("펼\uDEBE곀ꛂ", A_1), this.Name);
      this.AddAttribute(Utils.a("쮼\uDEBE귀뛂ꃄ", A_1), this.Value);
      if (!isNumeric)
        return;
      this.AddAttribute(Utils.a("즼욾뇀ꛂ", A_1), Utils.a("\uD9BC\uDABEꋀꫂ꣄ꛆꗈ", A_1));
    }

    public string Name
    {
      get
      {
        int num1 = 12458;
        int num2 = num1;
        num1 = 12458;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -18453;
        int num2 = num1;
        num1 = -18453;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Value
    {
      get
      {
        int num1 = 27314;
        int num2 = num1;
        num1 = 27314;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -28040;
        int num2 = num1;
        num1 = -28040;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }
  }
}
