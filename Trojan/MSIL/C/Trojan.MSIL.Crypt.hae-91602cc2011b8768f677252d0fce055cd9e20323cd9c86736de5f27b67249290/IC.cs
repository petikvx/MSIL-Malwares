// Decompiled with JetBrains decompiler
// Type: A.IC
// Assembly: N0$Crypter, Version=3.0.7.1, Culture=neutral, PublicKeyToken=null
// MVID: FD276B3A-BCAA-4176-AE7A-13B114112E73
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hae-91602cc2011b8768f677252d0fce055cd9e20323cd9c86736de5f27b67249290.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace A
{
  internal sealed class IC
  {
    private static ModuleHandle A;

    static IC()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
label_1:
      switch (7)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (IC.\u002Ecctor);
          }
          IC.A = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          break;
      }
    }

    public static void A(int _param0, int _param1, int _param2)
    {
      Type typeFromHandle;
      ConstructorInfo con;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(IC.A.ResolveTypeHandle(_param0));
        object methodFromHandle;
        if (_param2 == 16777215)
        {
label_1:
          switch (4)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (IC.A);
              }
              methodFromHandle = (object) MethodBase.GetMethodFromHandle(IC.A.ResolveMethodHandle(_param1));
              break;
          }
        }
        else
          methodFromHandle = (object) MethodBase.GetMethodFromHandle(IC.A.ResolveMethodHandle(_param1), IC.A.ResolveTypeHandle(_param2));
        con = (ConstructorInfo) methodFromHandle;
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          ParameterInfo[] parameters = con.GetParameters();
          int length = parameters.Length + 1;
          Type[] parameterTypes = new Type[length];
          parameterTypes[0] = con.DeclaringType.MakeByRefType();
          for (int index = 1; index < length; ++index)
            parameterTypes[index] = parameters[index - 1].ParameterType;
label_13:
          switch (4)
          {
            case 0:
              goto label_13;
            default:
              DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, (Type) null, parameterTypes, typeFromHandle, true);
              ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
              if (length > 0)
              {
label_15:
                switch (7)
                {
                  case 0:
                    goto label_15;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_0);
                    break;
                }
              }
              if (length > 1)
              {
label_18:
                switch (1)
                {
                  case 0:
                    goto label_18;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_1);
                    break;
                }
              }
              if (length > 2)
              {
label_21:
                switch (1)
                {
                  case 0:
                    goto label_21;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_2);
                    break;
                }
              }
              if (length > 3)
              {
label_24:
                switch (7)
                {
                  case 0:
                    goto label_24;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_3);
                    break;
                }
              }
              if (length > 4)
              {
label_27:
                switch (1)
                {
                  case 0:
                    goto label_27;
                  default:
                    for (int index = 4; index < length; ++index)
                      ilGenerator.Emit(OpCodes.Ldarg_S, index);
label_31:
                    switch (7)
                    {
                      case 0:
                        goto label_31;
                    }
                    break;
                }
              }
              ilGenerator.Emit(OpCodes.Call, con);
              ilGenerator.Emit(OpCodes.Ret);
              Delegate @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
              field.SetValue((object) null, (object) @delegate);
              continue;
          }
        }
        catch (Exception ex)
        {
        }
      }
label_36:
      switch (2)
      {
        case 0:
          goto label_36;
      }
    }
  }
}
