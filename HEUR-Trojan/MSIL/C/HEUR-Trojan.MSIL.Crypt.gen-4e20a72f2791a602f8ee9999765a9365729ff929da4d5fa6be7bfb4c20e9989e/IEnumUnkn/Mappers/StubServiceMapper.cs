// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Mappers.StubServiceMapper
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Collections;
using IEnumUnkn.Definitions;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using RiskGame.Listeners;
using RiskGame.Maps;
using RiskGame.Windows;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;

namespace IEnumUnkn.Mappers
{
  public class StubServiceMapper : Application, IComponentConnector, IStyleConnector
  {
    private bool order;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnStartup(StartupEventArgs def)
    {
      try
      {
        base.OnStartup(def);
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          PageVisitorStruct pageVisitorStruct;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                Task.Factory.StartNew((Action) (() =>
                {
                  int num3 = 1;
                  if (true)
                    goto label_8;
label_1:
                  int num4 = 1;
                  int num5 = 3;
label_7:
                  num3 = num5;
label_8:
                  bool flag;
                  switch (num3)
                  {
                    case 0:
                    case 1:
                      goto label_1;
                    case 2:
                    case 3:
                    case 4:
                      flag = num4 <= 110;
                      goto case 5;
                    case 5:
                      if (!flag)
                      {
                        num5 = 6;
                        goto label_7;
                      }
                      else
                      {
                        Thread.Sleep(10);
                        ++num4;
                        num5 = 4;
                        goto label_7;
                      }
                    case 6:
                      break;
                    default:
                      num5 = 5;
                      goto label_7;
                  }
                }));
                if (!StubServiceMapper.ViewObject())
                {
                  num2 = 5;
                  continue;
                }
                goto label_8;
              case 1:
              case 4:
                this.MainWindow = (Window) pageVisitorStruct;
                pageVisitorStruct.Show();
                goto case 0;
              case 3:
                goto label_6;
              case 5:
                goto label_11;
              default:
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_6;
            }
          }
label_6:
          pageVisitorStruct = new PageVisitorStruct();
          num1 = 4;
        }
label_11:
        return;
label_8:;
      }
      catch (TaskCanceledException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CancelRequest(object reference, KeyEventArgs pred)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        Window window;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              window = (Window) reference;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_14;
            case 1:
              if (!flag)
              {
                this.NewRequest(window);
                if (StubServiceMapper.PatchObject())
                {
                  num2 = 7;
                  continue;
                }
                goto label_3;
              }
              else
                goto case 3;
            case 2:
              goto label_3;
            case 3:
              this.ConnectRequest(window);
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_13;
            case 4:
            case 5:
              goto label_14;
            case 7:
              goto label_13;
            default:
              num2 = 3;
              continue;
          }
        }
label_3:
        if (pred.Key == Key.F11)
          this.ConnectRequest(window);
        if (pred.Key == Key.Escape)
        {
          flag = this.VisitRequest(window);
          num1 = 1;
        }
        else
          break;
      }
      return;
label_13:
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalcRequest(object ident, EventArgs map) => this.InitRequest((Window) ident);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitRequest(Window key)
    {
      try
      {
        bool flag = key == null;
        int num1 = 3;
        CheckBox name;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                if (!flag)
                {
                  name = (CheckBox) key.FindName("chkFullscreen");
                  if (!this.VisitRequest(key))
                  {
                    name.IsChecked = new bool?(false);
                    int num3 = 5;
                    num2 = StubServiceMapper.ViewObject() ? num3 : num3;
                    continue;
                  }
                  goto label_9;
                }
                else
                {
                  if (true)
                  {
                    num2 = 1;
                    continue;
                  }
                  goto label_9;
                }
              case 1:
                goto label_2;
              case 2:
              case 4:
                goto label_9;
              case 5:
                goto label_11;
              default:
                goto label_6;
            }
          }
label_6:
          num1 = 4;
        }
label_2:
        throw new NullReferenceException();
label_9:
        name.IsChecked = new bool?(true);
        return;
label_11:;
      }
      catch (Exception ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteRequest(object first, RoutedEventArgs counter) => this.ConnectRequest(this.StopRequest());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ConnectRequest(Window info)
    {
      try
      {
        bool flag = this.VisitRequest(info);
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_13;
              case 1:
                goto label_4;
              case 2:
                goto label_14;
              case 3:
              case 5:
                goto label_10;
              case 4:
                if (!flag)
                {
                  info.ResizeMode = ResizeMode.NoResize;
                  if (StubServiceMapper.PatchObject())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto label_10;
                }
                else
                  goto label_3;
              case 6:
                goto label_11;
              default:
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_8;
            }
          }
label_3:
          info.ResizeMode = ResizeMode.CanResize;
          info.WindowState = WindowState.Normal;
          num1 = 1;
          continue;
label_10:
          info.WindowState = WindowState.Normal;
          info.WindowStyle = WindowStyle.None;
          info.WindowState = WindowState.Maximized;
          num1 = 6;
        }
label_4:
        info.WindowStyle = WindowStyle.SingleBorderWindow;
        return;
label_13:
        return;
label_14:
        return;
label_8:
        return;
label_11:;
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private Window StopRequest() => Application.Current.MainWindow;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool VisitRequest(Window config)
    {
      int num1 = 4;
      if (true)
        goto label_5;
label_1:
      bool flag1 = config.WindowState == WindowState.Maximized;
      int num2 = 3;
label_4:
      num1 = num2;
label_5:
      bool flag2;
      switch (num1)
      {
        case 0:
        case 2:
        case 5:
          return flag2;
        case 1:
        case 3:
          if (flag1)
          {
            flag2 = true;
            goto case 0;
          }
          else
          {
            flag2 = false;
            num2 = 5;
            goto label_4;
          }
        case 4:
          goto label_1;
        default:
          num2 = 0;
          goto label_4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintRequest(object res, RoutedEventArgs map)
    {
      try
      {
        Window instance = this.StopRequest();
        int num = 2;
        if (StubServiceMapper.PatchObject())
          goto label_6;
label_2:
        bool flag;
        if (flag)
          throw new NullReferenceException();
        this.NewRequest(instance);
        if (StubServiceMapper.PatchObject())
        {
          num = 4;
          goto label_6;
        }
label_5:
        flag = instance == null;
        goto label_2;
label_6:
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_5;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_10;
            default:
              num = 3;
              continue;
          }
        }
label_10:;
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void NewRequest(Window instance)
    {
      int num1 = 5;
      StackPanel name1;
      UIElement name2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              if (!(instance is Candidate))
              {
                num2 = 1;
                continue;
              }
              goto label_3;
            case 1:
              goto label_2;
            case 2:
            case 4:
              name2 = (UIElement) instance.FindName("panel_Settings");
              if (name1.Visibility != Visibility.Visible)
              {
                this.Return(name1, name2);
                num2 = 6;
                continue;
              }
              goto label_7;
            case 3:
              goto label_14;
            case 6:
              goto label_13;
            default:
              goto label_10;
          }
        }
label_2:
        int num3 = instance is Tutorial ? 1 : 0;
        goto label_4;
label_3:
        num3 = 1;
label_4:
        if (num3 == 0)
        {
          name1 = (StackPanel) instance.FindName("panel_MainUI");
          num1 = 4;
          continue;
        }
        break;
label_10:
        num1 = 3;
      }
      return;
label_7:
      this.Settings(name1, name2);
      return;
label_14:
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Settings(StackPanel panel_MainUI, UIElement panel_Settings)
    {
      panel_MainUI.Visibility = Visibility.Collapsed;
      panel_Settings.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Return(StackPanel panel_MainUI, UIElement panel_Settings)
    {
      panel_MainUI.Visibility = Visibility.Visible;
      panel_Settings.Visibility = Visibility.Collapsed;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetRequest(object reference, TextChangedEventArgs cont)
    {
      int num = 5;
      Window window;
      PasswordBox passwordBox;
      TextBox textBox;
      string name;
      while (true)
      {
        switch (num)
        {
          case 0:
            passwordBox.Password = textBox.Text;
            if (!StubServiceMapper.ViewObject())
            {
              num = 8;
              continue;
            }
            goto case 1;
          case 1:
          case 2:
            if (!(name == "txtNewPassShow") && !(name == "txtNewPassConfShow"))
            {
              if (true)
              {
                num = 7;
                continue;
              }
              goto case 6;
            }
            else
              goto label_8;
          case 3:
          case 7:
            if (name == "txtRegPassShow")
            {
              passwordBox = (PasswordBox) window.FindName("txtRegPass");
              num = 0;
              continue;
            }
            if (name == "txtRegPassConfShow")
            {
              passwordBox = (PasswordBox) window.FindName("txtRegPassConf");
              goto case 0;
            }
            else
              goto case 6;
          case 4:
            window = this.StopRequest();
            passwordBox = new PasswordBox();
            name = textBox.Name;
            if (!(name == "txtPassShow"))
            {
              num = 1;
              continue;
            }
            goto label_9;
          case 5:
            textBox = (TextBox) reference;
            num = 4;
            continue;
          case 6:
            if (name == "txtLogPassShow")
            {
              passwordBox = (PasswordBox) window.FindName("txtLogPass");
              goto case 0;
            }
            else
              goto case 0;
          case 8:
            goto label_18;
          default:
            if (true)
            {
              num = 6;
              continue;
            }
            goto case 4;
        }
      }
label_8:
      return;
label_9:
      return;
label_18:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PrepareRequest(object item, RoutedEventArgs cust)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        Tutorial tutorial;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_6;
            case 2:
              if (flag1)
              {
                tutorial = new Tutorial();
                goto case 3;
              }
              else
                goto label_16;
            case 3:
            case 4:
              tutorial.Show();
              if (StubServiceMapper.PatchObject())
              {
                num2 = 6;
                continue;
              }
              goto label_22;
            case 5:
              IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
              try
              {
label_15:
                while (enumerator.MoveNext())
                {
                  Window current = (Window) enumerator.Current;
                  int num3 = 3;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 3:
                        if (!(current is Tutorial))
                          goto label_15;
                        else
                          goto case 1;
                      case 1:
                      case 2:
                        flag2 = true;
                        num3 = 4;
                        continue;
                      case 4:
                        goto label_20;
                      default:
                        int num4 = 2;
                        num3 = StubServiceMapper.ViewObject() ? num4 : num4;
                        continue;
                    }
                  }
                }
              }
              finally
              {
                if (enumerator is IDisposable disposable)
                  disposable.Dispose();
              }
label_20:
              flag1 = !flag2;
              num2 = 2;
              continue;
            case 6:
              goto label_22;
            default:
              num2 = 4;
              continue;
          }
        }
label_6:
        flag2 = false;
        num1 = 5;
      }
label_16:
      return;
label_22:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ForgotRequest(object last, RoutedPropertyChangedEventArgs<double> attr) => this.RunRequest().Volume = ((RangeBase) last).Value;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReadRequest(object reference, RoutedEventArgs ord)
    {
      int num = 4;
      if (true)
        goto label_4;
label_1:
      this.SearchRequest((MediaElement) reference);
      return;
label_4:
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            flag = reference is MediaElement;
            num = 3;
            continue;
          case 1:
          case 3:
            goto label_3;
          case 2:
            goto label_1;
          case 5:
            goto label_7;
          default:
            num = 2;
            continue;
        }
      }
label_3:
      while (!flag)
      {
        this.FillRequest();
        if (true)
        {
          num = 5;
          goto label_4;
        }
      }
      goto label_1;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StartRequest(object v, RoutedEventArgs result)
    {
      int num1 = 0;
      if (StubServiceMapper.ViewObject())
        ;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
            flag = v is MediaElement;
            num2 = 3;
            break;
          case 1:
          case 3:
            if (!flag)
            {
              this.FillRequest();
              num2 = 5;
              break;
            }
            goto label_5;
          case 2:
          case 4:
            goto label_5;
          case 5:
            goto label_8;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_5:
      this.SearchRequest((MediaElement) v);
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DestroyRequest(object instance, RoutedEventArgs col)
    {
      int num = 4;
      Window window;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            window = this.StopRequest();
            num = 3;
            continue;
          case 1:
          case 2:
            this.ListRequest(window).Pause();
            num = 5;
            continue;
          case 3:
            if (!this.WriteRequest(window))
              goto label_3;
            else
              goto case 1;
          case 5:
            goto label_7;
          default:
            num = 1;
            continue;
        }
      }
label_3:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PatchRequest(object info, RoutedEventArgs pol)
    {
      int num1 = 4;
      if (StubServiceMapper.ViewObject())
        ;
      while (true)
      {
        Window window;
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 4:
            window = this.StopRequest();
            num2 = 3;
            break;
          case 1:
          case 3:
            flag = this.WriteRequest(window);
            goto case 2;
          case 2:
            if (flag)
            {
              this.ListRequest(window).Play();
              num2 = 5;
              break;
            }
            goto label_1;
          case 5:
            goto label_9;
          default:
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto label_9;
        }
        num1 = num2;
      }
label_1:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InterruptRequest(object spec, RoutedEventArgs map) => this.StartRequest(spec, map);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void EnableRequest(object i, RoutedEventArgs cust)
    {
      try
      {
        Window window = this.StopRequest();
        this.CloneRequest((MediaElement) i, (Label) window.FindName("lblMediaDetails"));
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool WriteRequest(Window v)
    {
      int num1 = 6;
      bool flag1;
      if (StubServiceMapper.PatchObject())
      {
        while (true)
        {
          bool flag2;
          int num2;
          switch (num1)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:
            case 7:
              goto label_12;
            case 4:
              if (!flag2)
              {
                switch (v)
                {
                  case MessageBridgeRule _:
                    goto label_5;
                  case ParamsMapperListener _:
                    goto label_6;
                  case StateCallbackCollection _:
                    flag1 = (v as StateCallbackCollection).Music_enabled;
                    num1 = 0;
                    continue;
                  default:
                    flag1 = false;
                    num2 = 7;
                    break;
                }
              }
              else
              {
                flag1 = (v as CreatorStructDef).Music_enabled;
                num2 = 5;
                break;
              }
              break;
            case 6:
              flag2 = v is CreatorStructDef;
              if (!StubServiceMapper.ViewObject())
              {
                num1 = 4;
                continue;
              }
              goto label_12;
            default:
              num2 = 1;
              break;
          }
          num1 = num2;
        }
label_5:
        flag1 = (v as MessageBridgeRule).Music_enabled;
        goto label_12;
label_6:
        flag1 = (v as ParamsMapperListener).Music_enabled;
      }
label_12:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CloneRequest(MediaElement v, Label second) => second.Content = (object) v.Source.ToString().Substring(30);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConcatRequest(Window info, object selection)
    {
      try
      {
        this.CloneRequest((MediaElement) selection, (Label) info.FindName("lblMediaDetails"));
      }
      catch (Exception ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private MediaElement RunRequest() => this.ListRequest(this.StopRequest());

    [MethodImpl(MethodImplOptions.NoInlining)]
    private MediaElement ListRequest(Window info)
    {
      MediaElement mediaElement;
      try
      {
        MediaElement name = (MediaElement) info.FindName("mediaplayer");
        int num = 3;
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 3:
              flag = name != null;
              goto case 1;
            case 1:
            case 2:
              if (flag)
              {
                mediaElement = name;
                num = 4;
                continue;
              }
              goto label_7;
            case 4:
              goto label_9;
            default:
              num = 2;
              continue;
          }
        }
label_7:
        throw new NullReferenceException();
      }
      catch
      {
        mediaElement = new MediaElement();
      }
label_9:
      return mediaElement;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FillRequest() => this.SearchRequest(this.RunRequest());

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SearchRequest(MediaElement asset)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Window v;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_1;
            case 1:
            case 2:
              flag = this.WriteRequest(v);
              goto case 3;
            case 3:
              if (flag)
              {
                asset.Play();
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto case 1;
              }
              else
                goto label_9;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_8;
          }
        }
label_1:
        v = this.StopRequest();
        num1 = 2;
      }
label_9:
      return;
label_8:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num = 5;
      Uri resourceLocator;
      bool order;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 5:
            order = this.order;
            num = 3;
            continue;
          case 1:
            goto label_9;
          case 2:
            goto label_10;
          case 3:
            if (!order)
            {
              this.order = true;
              resourceLocator = new Uri("/IEnumUnkn;component/app.xaml", UriKind.Relative);
              goto case 4;
            }
            else
            {
              num = 1;
              continue;
            }
          case 4:
            Application.LoadComponent((object) this, resourceLocator);
            num = 6;
            continue;
          case 6:
            goto label_8;
          default:
            num = 4;
            continue;
        }
      }
label_9:
      return;
label_10:
      return;
label_8:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int v_counter, object caller) => this.order = true;

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int indexspec, object selection)
    {
      int num1 = 8;
      EventSetter eventSetter;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              eventSetter.Handler = (Delegate) new RoutedEventHandler(this.EnableRequest);
              ((Style) selection).Setters.Add((SetterBase) eventSetter);
              if (true)
              {
                num2 = 17;
                continue;
              }
              goto label_22;
            case 1:
              goto label_11;
            case 2:
              goto label_31;
            case 3:
              switch (num3)
              {
                case 1:
                  goto label_8;
                case 2:
                  eventSetter = new EventSetter();
                  num2 = 4;
                  continue;
                case 3:
                  goto label_23;
                case 4:
                  goto label_5;
                case 5:
                  eventSetter = new EventSetter();
                  eventSetter.Event = ButtonBase.ClickEvent;
                  eventSetter.Handler = (Delegate) new RoutedEventHandler(this.ReadRequest);
                  ((Style) selection).Setters.Add((SetterBase) eventSetter);
                  if (!StubServiceMapper.ViewObject())
                  {
                    num2 = 14;
                    continue;
                  }
                  goto label_7;
                case 6:
                  eventSetter = new EventSetter();
                  eventSetter.Event = ButtonBase.ClickEvent;
                  eventSetter.Handler = (Delegate) new RoutedEventHandler(this.DestroyRequest);
                  num2 = 1;
                  continue;
                case 7:
                  goto label_12;
                case 8:
                  goto label_13;
                case 9:
                  goto label_14;
                case 10:
                  goto label_18;
                case 11:
                  eventSetter = new EventSetter();
                  eventSetter.Event = TextBoxBase.TextChangedEvent;
                  if (StubServiceMapper.PatchObject())
                  {
                    num2 = 16;
                    continue;
                  }
                  goto label_20;
                case 12:
                  goto label_2;
                default:
                  num2 = 10;
                  continue;
              }
            case 4:
              goto label_24;
            case 5:
              goto label_15;
            case 6:
              goto label_32;
            case 7:
            case 11:
              goto label_25;
            case 8:
              goto label_9;
            case 9:
              goto label_17;
            case 10:
              goto label_33;
            case 12:
              goto label_34;
            case 13:
              goto label_20;
            case 14:
              goto label_35;
            case 15:
              goto label_36;
            case 16:
              goto label_1;
            case 17:
              goto label_37;
            default:
              if (true)
              {
                num2 = 12;
                continue;
              }
              goto label_29;
          }
        }
label_2:
        ((Style) selection).Setters.Add((SetterBase) new EventSetter()
        {
          Event = MediaElement.MediaEndedEvent,
          Handler = (Delegate) new RoutedEventHandler(this.InterruptRequest)
        });
        eventSetter = new EventSetter();
        eventSetter.Event = MediaElement.MediaOpenedEvent;
        num1 = 0;
        continue;
label_8:
        eventSetter = new EventSetter();
        num1 = 13;
        continue;
label_9:
        num3 = indexspec;
        num1 = 3;
        continue;
label_14:
        eventSetter = new EventSetter();
        num1 = 9;
        continue;
label_18:
        eventSetter = new EventSetter();
        eventSetter.Event = RangeBase.ValueChangedEvent;
        eventSetter.Handler = (Delegate) new RoutedPropertyChangedEventHandler<double>(this.ForgotRequest);
        ((Style) selection).Setters.Add((SetterBase) eventSetter);
        num1 = 2;
        continue;
label_20:
        eventSetter.Event = UIElement.KeyDownEvent;
        eventSetter.Handler = (Delegate) new KeyEventHandler(this.CancelRequest);
        num1 = 5;
        continue;
label_23:
        eventSetter = new EventSetter();
        eventSetter.Event = ButtonBase.ClickEvent;
        eventSetter.Handler = (Delegate) new RoutedEventHandler(this.PrintRequest);
        num1 = 11;
        continue;
label_24:
        eventSetter.Event = ButtonBase.ClickEvent;
        eventSetter.Handler = (Delegate) new RoutedEventHandler(this.PrintRequest);
        ((Style) selection).Setters.Add((SetterBase) eventSetter);
        num1 = 15;
      }
label_1:
      eventSetter.Handler = (Delegate) new TextChangedEventHandler(this.ResetRequest);
      ((Style) selection).Setters.Add((SetterBase) eventSetter);
      return;
label_5:
      ((Style) selection).Setters.Add((SetterBase) new EventSetter()
      {
        Event = ButtonBase.ClickEvent,
        Handler = (Delegate) new RoutedEventHandler(this.PrepareRequest)
      });
      return;
label_7:
      return;
label_11:
      ((Style) selection).Setters.Add((SetterBase) eventSetter);
      return;
label_12:
      ((Style) selection).Setters.Add((SetterBase) new EventSetter()
      {
        Event = ButtonBase.ClickEvent,
        Handler = (Delegate) new RoutedEventHandler(this.PatchRequest)
      });
      return;
label_13:
      ((Style) selection).Setters.Add((SetterBase) new EventSetter()
      {
        Event = ButtonBase.ClickEvent,
        Handler = (Delegate) new RoutedEventHandler(this.StartRequest)
      });
      return;
label_15:
      ((Style) selection).Setters.Add((SetterBase) eventSetter);
      return;
label_17:
      eventSetter.Event = ButtonBase.ClickEvent;
      eventSetter.Handler = (Delegate) new RoutedEventHandler(this.DeleteRequest);
      ((Style) selection).Setters.Add((SetterBase) eventSetter);
      return;
label_22:
      return;
label_25:
      ((Style) selection).Setters.Add((SetterBase) eventSetter);
      return;
label_37:
      return;
label_35:
      return;
label_34:
      return;
label_33:
      return;
label_32:
      return;
label_31:
      return;
label_36:
      return;
label_29:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StubServiceMapper()
    {
    }

    internal static bool PatchObject() => true;

    internal static bool ViewObject() => false;
  }
}
