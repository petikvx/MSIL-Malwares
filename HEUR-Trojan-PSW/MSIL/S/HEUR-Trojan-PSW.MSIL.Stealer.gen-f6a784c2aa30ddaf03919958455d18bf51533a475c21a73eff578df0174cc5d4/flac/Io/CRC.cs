// Decompiled with JetBrains decompiler
// Type: flac.Io.CRC
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using flac.Utils;

namespace flac.Io
{
  public class CRC
  {
    private byte crc8_;
    private short crc16_;
    private int crcData_;
    private int bitsInCrc_;
    private bool crc16Running_;
    private bool crc8Running_;
    private static readonly byte[] byteMask = new byte[8]
    {
      (byte) 1,
      (byte) 3,
      (byte) 7,
      (byte) 15,
      (byte) 31,
      (byte) 63,
      (byte) 127,
      byte.MaxValue
    };

    public bool Running => this.crc8Running_ || this.crc16Running_;

    public void Start()
    {
      this.crc8_ = (byte) 0;
      this.crc16_ = (short) 0;
      this.crcData_ = 0;
      this.bitsInCrc_ = 0;
      this.crc8Running_ = true;
      this.crc16Running_ = true;
    }

    private void UpdateCRC()
    {
      if (this.bitsInCrc_ < 8)
        return;
      int num = this.bitsInCrc_ - 8;
      byte data = (byte) (this.crcData_ >> num & (int) byte.MaxValue);
      if (this.crc8Running_)
        this.crc8_ = CRC8.update(data, this.crc8_);
      if (this.crc16Running_)
        this.crc16_ = CRC16.update(data, this.crc16_);
      this.bitsInCrc_ -= 8;
      if (this.bitsInCrc_ > 0)
        this.crcData_ &= (int) CRC.byteMask[num - 1];
      else
        this.crcData_ >>= 8;
    }

    public void AddBit(sbyte b)
    {
      this.crcData_ = this.crcData_ << 1 | (int) (byte) b;
      ++this.bitsInCrc_;
      this.UpdateCRC();
    }

    public void AddByte(byte b)
    {
      this.crcData_ = this.crcData_ << 8 | (int) b;
      this.bitsInCrc_ += 8;
      this.UpdateCRC();
    }

    public byte GetCRC8()
    {
      Debug.Assert(this.bitsInCrc_ == 0);
      this.crc8Running_ = false;
      return this.crc8_;
    }

    public ushort GetCRC16()
    {
      Debug.Assert(this.bitsInCrc_ == 0);
      this.crc16Running_ = false;
      return (ushort) this.crc16_;
    }
  }
}
