// Decompiled with JetBrains decompiler
// Type: JsonValue
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;

[DebuggerDisplay("{ToString(),nq}", Type = "JsonValue({Type})")]
[DebuggerTypeProxy(typeof (JsonValue.JsonValueDebugView))]
public struct JsonValue
{
  private readonly JsonValueType type;
  private readonly object reference;
  private readonly double value;
  public static readonly JsonValue Null = new JsonValue(JsonValueType.Null, 0.0, (object) null);

  public JsonValueType Type => this.type;

  public bool IsNull => this.Type == JsonValueType.Null;

  public bool IsBoolean => this.Type == JsonValueType.Boolean;

  public bool IsInteger
  {
    get
    {
      if (!this.IsNumber)
        return false;
      double num = this.value;
      return num >= (double) int.MinValue && num <= (double) int.MaxValue && (double) (int) num == num;
    }
  }

  public bool IsNumber => this.Type == JsonValueType.Number;

  public bool IsString => this.Type == JsonValueType.String;

  public bool IsJsonObject => this.Type == JsonValueType.Object;

  public bool IsJsonArray => this.Type == JsonValueType.Array;

  public bool IsDateTime => this.AsDateTime.HasValue;

  public bool AsBoolean
  {
    get
    {
      switch (this.Type)
      {
        case JsonValueType.Boolean:
          return this.value == 1.0;
        case JsonValueType.Number:
          return this.value != 0.0;
        case JsonValueType.String:
          return (string) this.reference != "";
        case JsonValueType.Object:
        case JsonValueType.Array:
          return true;
        default:
          return false;
      }
    }
  }

  public int AsInteger
  {
    get
    {
      double asNumber = this.AsNumber;
      if (asNumber >= (double) int.MaxValue)
        return int.MaxValue;
      return asNumber <= (double) int.MinValue ? int.MinValue : (int) asNumber;
    }
  }

  public double AsNumber
  {
    get
    {
      switch (this.Type)
      {
        case JsonValueType.Boolean:
          return this.value == 1.0 ? 1.0 : 0.0;
        case JsonValueType.Number:
          return this.value;
        case JsonValueType.String:
          double result;
          if (double.TryParse((string) this.reference, out result))
            return result;
          break;
      }
      return 0.0;
    }
  }

  public string AsString
  {
    get
    {
      switch (this.Type)
      {
        case JsonValueType.Boolean:
          return this.value != 1.0 ? "false" : "true";
        case JsonValueType.Number:
          return this.value.ToString();
        case JsonValueType.String:
          return (string) this.reference;
        default:
          return (string) null;
      }
    }
  }

  public JsonObject AsJsonObject => !this.IsJsonObject ? (JsonObject) null : (JsonObject) this.reference;

  public JsonArray AsJsonArray => !this.IsJsonArray ? (JsonArray) null : (JsonArray) this.reference;

  public DateTime? AsDateTime
  {
    get
    {
      DateTime result;
      return this.IsString && DateTime.TryParse((string) this.reference, out result) ? new DateTime?(result) : new DateTime?();
    }
  }

  public object AsObject
  {
    get
    {
      switch (this.Type)
      {
        case JsonValueType.Boolean:
        case JsonValueType.Number:
          return (object) this.value;
        case JsonValueType.String:
        case JsonValueType.Object:
        case JsonValueType.Array:
          return this.reference;
        default:
          return (object) null;
      }
    }
  }

  public JsonValue this[string key]
  {
    get
    {
      if (this.IsJsonObject)
        return ((JsonObject) this.reference)[key];
      throw new InvalidOperationException("This value does not represent a JsonObject.");
    }
    set
    {
      if (!this.IsJsonObject)
        throw new InvalidOperationException("This value does not represent a JsonObject.");
      ((JsonObject) this.reference)[key] = value;
    }
  }

  public JsonValue this[int index]
  {
    get
    {
      if (this.IsJsonArray)
        return ((JsonArray) this.reference)[index];
      throw new InvalidOperationException("This value does not represent a JsonArray.");
    }
    set
    {
      if (!this.IsJsonArray)
        throw new InvalidOperationException("This value does not represent a JsonArray.");
      ((JsonArray) this.reference)[index] = value;
    }
  }

  private JsonValue(JsonValueType type, double value, object reference)
  {
    this.type = type;
    this.value = value;
    this.reference = reference;
  }

  public JsonValue(bool? value)
  {
    if (value.HasValue)
    {
      this.reference = (object) null;
      this.type = JsonValueType.Boolean;
      this.value = value.Value ? 1.0 : 0.0;
    }
    else
      this = JsonValue.Null;
  }

  public JsonValue(double? value)
  {
    if (value.HasValue)
    {
      this.reference = (object) null;
      this.type = JsonValueType.Number;
      this.value = value.Value;
    }
    else
      this = JsonValue.Null;
  }

  public JsonValue(string value)
  {
    if (value != null)
    {
      this.value = 0.0;
      this.type = JsonValueType.String;
      this.reference = (object) value;
    }
    else
      this = JsonValue.Null;
  }

  public JsonValue(JsonObject value)
  {
    if (value != null)
    {
      this.value = 0.0;
      this.type = JsonValueType.Object;
      this.reference = (object) value;
    }
    else
      this = JsonValue.Null;
  }

  public JsonValue(JsonArray value)
  {
    if (value != null)
    {
      this.value = 0.0;
      this.type = JsonValueType.Array;
      this.reference = (object) value;
    }
    else
      this = JsonValue.Null;
  }

  public static implicit operator JsonValue(bool? value) => new JsonValue(value);

  public static implicit operator JsonValue(double? value) => new JsonValue(value);

  public static implicit operator JsonValue(string value) => new JsonValue(value);

  public static implicit operator JsonValue(JsonObject value) => new JsonValue(value);

  public static implicit operator JsonValue(JsonArray value) => new JsonValue(value);

  public static implicit operator JsonValue(DateTime? value) => !value.HasValue ? JsonValue.Null : new JsonValue(value.Value.ToString("o"));

  public static implicit operator int(JsonValue jsonValue) => jsonValue.IsInteger ? jsonValue.AsInteger : 0;

  public static implicit operator int?(JsonValue jsonValue) => jsonValue.IsNull ? new int?() : (int?) jsonValue;

  public static implicit operator bool(JsonValue jsonValue) => jsonValue.IsBoolean && jsonValue.value == 1.0;

  public static implicit operator bool?(JsonValue jsonValue) => jsonValue.IsNull ? new bool?() : (bool?) jsonValue;

  public static implicit operator double(JsonValue jsonValue) => jsonValue.IsNumber ? jsonValue.value : double.NaN;

  public static implicit operator double?(JsonValue jsonValue) => jsonValue.IsNull ? new double?() : (double?) jsonValue;

  public static implicit operator string(JsonValue jsonValue) => jsonValue.IsString || jsonValue.IsNull ? jsonValue.reference as string : (string) null;

  public static implicit operator JsonObject(JsonValue jsonValue) => jsonValue.IsJsonObject || jsonValue.IsNull ? jsonValue.reference as JsonObject : (JsonObject) null;

  public static implicit operator JsonArray(JsonValue jsonValue) => jsonValue.IsJsonArray || jsonValue.IsNull ? jsonValue.reference as JsonArray : (JsonArray) null;

  public static implicit operator DateTime(JsonValue jsonValue)
  {
    DateTime? asDateTime = jsonValue.AsDateTime;
    return asDateTime.HasValue ? asDateTime.Value : DateTime.MinValue;
  }

  public static implicit operator DateTime?(JsonValue jsonValue) => jsonValue.IsDateTime || jsonValue.IsNull ? jsonValue.AsDateTime : new DateTime?();

  public static bool operator ==(JsonValue a, JsonValue b) => a.Type == b.Type && a.value == b.value && object.Equals(a.reference, b.reference);

  public static bool operator !=(JsonValue a, JsonValue b) => !(a == b);

  public static JsonValue Parse(string text) => JsonReader.Parse(text);

  public override bool Equals(object obj)
  {
    if (obj == null)
      return this.IsNull;
    JsonValue? nullable = obj as JsonValue?;
    return nullable.HasValue && this == nullable.Value;
  }

  public override int GetHashCode() => this.IsNull ? this.Type.GetHashCode() : this.Type.GetHashCode() ^ this.value.GetHashCode() ^ EqualityComparer<object>.Default.GetHashCode(this.reference);

  public override string ToString() => this.ToString(false);

  public string ToString(bool pretty) => JsonWriter.Serialize(this, pretty);

  private class JsonValueDebugView
  {
    private JsonValue jsonValue;

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public JsonObject ObjectView => this.jsonValue.IsJsonObject ? (JsonObject) this.jsonValue.reference : (JsonObject) null;

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public JsonArray ArrayView => this.jsonValue.IsJsonArray ? (JsonArray) this.jsonValue.reference : (JsonArray) null;

    public JsonValueType Type => this.jsonValue.Type;

    public object Value
    {
      get
      {
        if (this.jsonValue.IsJsonObject)
          return (object) (JsonObject) this.jsonValue.reference;
        return this.jsonValue.IsJsonArray ? (object) (JsonArray) this.jsonValue.reference : (object) this.jsonValue;
      }
    }

    public JsonValueDebugView(JsonValue jsonValue) => this.jsonValue = jsonValue;
  }
}
