// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Crypter, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B731B599-442F-4A0A-B652-36FDF3199CF1
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Zapchast.ctbt-4d7f60f5f9cd63e753868459d0468b2925cdad0dc9dd53f889e662aa428efebf.exe

using \u0005;
using \u0007;
using Microsoft.Win32;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using SmartAssembly.SmartUsageCore;
using System;
using System.Runtime.InteropServices;

namespace \u0006
{
  internal static class \u0006
  {
    [NonSerialized]
    internal static GetString \u008F;

    public static void \u0001()
    {
      int num1;
      int num2;
      int num3;
      try
      {
        try
        {
          int num4;
          for (int index = \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3490)) ? 1 : 0; index == 0; index = num4)
          {
            num4 = \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3536)) ? 1 : 0;
            if (true)
            {
              if (num4 != 0)
              {
                if (true)
                {
                  \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3545));
                  goto label_14;
                }
                else
                  goto label_28;
              }
              else if (\u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3586)))
              {
                \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3595));
                goto label_14;
              }
              else
                goto label_9;
            }
          }
          \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3495));
          goto label_14;
label_9:
          if (!\u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3636)))
          {
            if (\u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3694)))
            {
              if (true)
              {
                \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3707));
                goto label_14;
              }
              else
                goto label_30;
            }
            else
              goto label_14;
          }
label_10:
          \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3653));
label_14:
          num1 = \u001C.\u007E\u009A((object) \u000F\u0002.\u007E\u001F\u0003((object) \u000E\u0002.\u001E\u0003()));
          switch (num1)
          {
            case 5:
              int num5 = \u001C.\u007E\u0004\u0002((object) \u000F\u0002.\u007E\u001F\u0003((object) \u000E\u0002.\u001E\u0003()));
              int num6;
              while (true)
              {
                num2 = num5;
                num6 = num2;
                if (false)
                  num5 = num6;
                else
                  break;
              }
              switch (num6)
              {
                case 0:
                  if (true)
                  {
                    \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3748));
                    goto label_30;
                  }
                  else
                    goto label_9;
                case 1:
                  \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3781));
                  goto label_30;
                case 2:
                  \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3810));
                  goto label_30;
                default:
                  if (false)
                    break;
                  goto label_30;
              }
              break;
            case 6:
              num3 = \u001C.\u007E\u0004\u0002((object) \u000F\u0002.\u007E\u001F\u0003((object) \u000E\u0002.\u001E\u0003()));
              break;
            default:
              goto label_30;
          }
          switch (num3)
          {
            case 0:
              \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3843));
              goto label_30;
            case 1:
              break;
            case 2:
              \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3921));
              goto label_30;
            default:
              if (false)
                goto label_10;
              else
                goto label_30;
          }
label_28:
          \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(3884));
label_30:
          \u0006.\u0006.\u0002();
          \u0006.\u0006.\u0003();
          \u0006.\u0006.\u0004();
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num3;
        \u0003.\u0001(ex, (object) local1, (object) local2, (object) local3);
        throw;
      }
    }

    public static void \u0002()
    {
      try
      {
        try
        {
          \u0006.\u0006.\u0001(\u009A\u0002.\u0015\u0004((object) \u0006.\u0006.\u008F(3950), (object) \u0099\u0002.\u0013\u0004()));
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex);
        throw;
      }
    }

    public static void \u0003()
    {
      try
      {
        try
        {
          do
          {
            string str = \u000E.\u0011(\u0006.\u0006.\u008F(3979), \u008F.\u007E\u008D\u0002((object) \u009B\u0002.\u0016\u0004()));
            if (true)
              goto label_3;
label_1:
            continue;
label_3:
            \u0006.\u0006.\u0001(str);
            goto label_1;
          }
          while (false);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex);
        throw;
      }
    }

    public static void \u0004()
    {
      try
      {
        try
        {
          \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(4012) + (object) (\u0006.\u0006.\u0001() ? 64 : 32));
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex);
        throw;
      }
    }

    private static bool \u0001()
    {
      bool flag1;
      bool flag2;
      try
      {
        if (\u0099\u0002.\u0014\u0004() != 8)
          goto label_2;
label_1:
        int num1 = 1;
        int num2;
        if (num1 == 0)
        {
          num2 = num1;
          goto label_3;
        }
        else
        {
          flag2 = num1 != 0;
          if (false)
            goto label_11;
          else
            goto label_14;
        }
label_2:
        num2 = \u0006.\u0006.\u0001(\u0006.\u0006.\u008F(4041), \u0006.\u0006.\u008F(4058)) ? 1 : 0;
label_3:
        int num3;
        if (num2 != 0)
          num3 = \u0006.\u0006.\u0001(\u0006.\u0006.\u0001(), out flag1) ? 1 : 0;
        else
          goto label_8;
label_4:
        if (true)
        {
          if (num3 == 0)
            goto label_8;
          else
            goto label_11;
        }
label_6:
        if (true)
        {
          flag2 = num3 != 0;
          if (false)
            goto label_1;
          else
            goto label_14;
        }
        else
          goto label_4;
label_8:
        flag2 = false;
        goto label_14;
label_11:
        num3 = flag1 ? 1 : 0;
        goto label_6;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag1;
        \u0003.\u0001(ex, (object) local);
        throw;
      }
label_14:
      return flag2;
    }

    private static bool \u0001([In] string obj0, [In] string obj1)
    {
      bool flag;
      IntPtr num1;
      try
      {
        if (true)
        {
          num1 = \u0006.\u0006.\u0001(obj0);
          int num2;
          for (int index = \u009C\u0002.\u0017\u0004(num1, IntPtr.Zero) ? 1 : 0; index == 0; index = num2)
          {
            num2 = \u009C\u0002.\u0018\u0004(\u0006.\u0006.\u0001(num1, obj1), IntPtr.Zero) ? 1 : 0;
            if (true)
            {
              flag = num2 != 0;
              goto label_8;
            }
          }
          flag = false;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local = (ValueType) num1;
        string str1 = obj0;
        string str2 = obj1;
        \u0003.\u0001(ex, (object) local, (object) str1, (object) str2);
        throw;
      }
label_8:
      return flag;
    }

    [DllImport("kernel32.dll", EntryPoint = "GetCurrentProcess")]
    private static extern IntPtr \u0001();

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle", CharSet = CharSet.Auto)]
    private static extern IntPtr \u0001([In] string obj0);

    [DllImport("kernel32", EntryPoint = "GetProcAddress", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr \u0001(IntPtr _param0, [MarshalAs(UnmanagedType.LPStr)] string _param1);

    [DllImport("kernel32.dll", EntryPoint = "IsWow64Process", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001(IntPtr _param0, out bool _param1);

    private static bool \u0001([In] string obj0)
    {
      RegistryKey registryKey1;
      bool flag;
      try
      {
        registryKey1 = (RegistryKey) null;
        try
        {
          registryKey1 = \u001D.\u007E\u0005\u0002((object) Registry.LocalMachine, \u000E.\u0011(\u0006.\u0006.\u008F(4079), obj0)) ?? \u001D.\u007E\u0005\u0002((object) Registry.LocalMachine, \u000E.\u0011(\u0006.\u0006.\u008F(4140), obj0));
          flag = registryKey1 != null;
        }
        finally
        {
          if (registryKey1 != null)
            \u0015.\u007E\u0019((object) registryKey1);
        }
        return flag;
      }
      catch (Exception ex)
      {
        RegistryKey registryKey2 = registryKey1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        string str = obj0;
        \u0003.\u0001(ex, (object) registryKey2, (object) local, (object) str);
        throw;
      }
    }

    public static void \u0001([FeatureName] string _param0) => \u0008.\u0001(_param0);

    static \u0006() => Strings.CreateGetStringDelegate(typeof (\u0006.\u0006));
  }
}
