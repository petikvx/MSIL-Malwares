// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.PlanetTurn
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

namespace FannyHeirdooBot
{
  public class PlanetTurn
  {
    public int Owner;
    public int NumShips;
    public PlanetTurn Next;
    public PlanetTurn Prior;

    public int TurnsFromNow { get; private set; }

    public PlanetTurn(int turnsFromNow)
    {
label_1:
      int num1 = 560365338;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1838450651)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -542234519 ^ 1978482320;
            continue;
          case 3:
            this.TurnsFromNow = turnsFromNow;
            num1 = (int) num2 * 1542164711 ^ -885741083;
            continue;
          case 4:
            num1 = (int) num2 * 1651162611 ^ 550667710;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void SetValues(int owner, int numShips)
    {
      this.Owner = owner;
label_1:
      int num1 = 1979556169;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1031437799)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.IsMine = this.Owner == 1;
            num1 = (int) num2 * -1055350456 ^ -1771164457;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.NumShips = numShips;
            num1 = (int) num2 * -1470127169 ^ -287248530;
            continue;
          case 4:
            num1 = (int) num2 * 183804749 ^ -1371397345;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public bool IsMine { get; private set; }

    internal PlanetTurn Clone()
    {
label_1:
      int num1 = 587967985;
      PlanetTurn planetTurn1;
      PlanetTurn planetTurn2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1464896975)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -1541464498 ^ 882401139;
            continue;
          case 1:
            planetTurn1 = new PlanetTurn(this.TurnsFromNow);
            planetTurn1.SetValues(this.Owner, this.NumShips);
            num1 = (int) num2 * -770527003 ^ -379519742;
            continue;
          case 3:
            goto label_1;
          case 4:
            planetTurn2 = planetTurn1;
            num1 = (int) num2 * -1870278532 ^ -1564932755;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return planetTurn2;
    }

    public void Grow(int numberOfShipsToGrow)
    {
      if (this.Owner <= 0)
        return;
label_1:
      int num1 = -116320724;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -708493027)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 718111221 ^ -530707612;
            continue;
          case 1:
            this.NumShips += numberOfShipsToGrow;
            num1 = (int) num2 * 1967772265 ^ 1937349234;
            continue;
          case 2:
            num1 = (int) num2 * -928969446 ^ -182953546;
            continue;
          case 3:
            goto label_7;
          case 4:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_7:
      return;
label_8:;
    }
  }
}
