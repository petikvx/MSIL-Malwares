// Decompiled with JetBrains decompiler
// Type: 198751382746.933976457753
// Assembly: 069511259246, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 6D0FD131-484D-4146-B8A3-FCA5C0E4E111
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-e7ff83830fd4bf4e75004c85a34aa787b5c6b7dedba3c5ff9843edd5e688f2d5.exe

using \u003002826585632;
using \u003067450546472;
using \u003198751382746;
using \u003401690358263;
using Microsoft.VisualStudio.Shell;
using Microsoft.Win32.SafeHandles;
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u003198751382746
{
  internal class \u003933976457753
  {
    private readonly IVsCommonMessagePump \u003586384241866;

    private \u003933976457753(string text)
    {
      // ISSUE: variable of a compiler-generated type
      IVsCommonMessagePumpFactory globalService = (IVsCommonMessagePumpFactory) Package.GetGlobalService(typeof (SVsCommonMessagePumpFactory));
      // ISSUE: variable of a compiler-generated type
      IVsCommonMessagePump ppIVsCommonMessagePump;
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      if (globalService == null || globalService.CreateInstance(out ppIVsCommonMessagePump) != 0 || ppIVsCommonMessagePump.SetAllowCancel(true) != 0 || ppIVsCommonMessagePump.SetWaitText(text) != 0 || ppIVsCommonMessagePump.SetStatusBarText(string.Empty) != 0)
        return;
      this.\u003586384241866 = ppIVsCommonMessagePump;
    }

    public static \u003933976457753 \u003724011676433(string _param0)
    {
      \u003933976457753 obj = new \u003933976457753(_param0);
      return obj.\u003586384241866 == null ? (\u003933976457753) null : obj;
    }

    public void \u003277178345898(WaitHandle _param1, CancellationTokenSource _param2)
    {
      SafeWaitHandle safeWaitHandle = _param1.SafeWaitHandle;
      bool success = false;
      try
      {
        safeWaitHandle.DangerousAddRef(ref success);
        if (!success)
          throw new ObjectDisposedException("launchCompleteHandle");
        IntPtr[] rgHandles = new IntPtr[1]
        {
          safeWaitHandle.DangerousGetHandle()
        };
        // ISSUE: reference to a compiler-generated method
        int errorCode = this.\u003586384241866.ModalWaitForObjects(rgHandles, (uint) rgHandles.Length, out uint _);
        switch (errorCode)
        {
          case -2147483638:
          case -2147467260:
            _param2.Cancel();
            throw new OperationCanceledException();
          case 0:
            break;
          default:
            Marshal.ThrowExceptionForHR(errorCode);
            break;
        }
      }
      finally
      {
        if (success)
          safeWaitHandle.DangerousRelease();
      }
    }

    public void \u003917467434366(int _param1, int _param2, string _param3) => this.\u003586384241866.SetProgressInfo(_param1, _param2, _param3);

    public void \u003619428559002(string _param1) => this.\u003586384241866.SetWaitText(_param1);
  }
}
