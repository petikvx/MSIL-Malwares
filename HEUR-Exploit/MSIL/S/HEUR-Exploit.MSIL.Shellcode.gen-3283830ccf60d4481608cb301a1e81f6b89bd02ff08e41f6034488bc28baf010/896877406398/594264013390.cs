// Decompiled with JetBrains decompiler
// Type: 896877406398.594264013390
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003129284013536;
using \u003152517786898;
using \u003172091972983;
using \u003208825527781;
using \u003288975932346;
using \u003504423198486;
using \u003545704640419;
using \u003721396290897;
using \u003830680403346;
using \u003896877406398;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.SqlTypes;
using System.Globalization;
using System.Numerics;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace \u003896877406398
{
  internal static class \u003594264013390
  {
    private static readonly Dictionary<Type, \u003204086749104> \u003797353754867 = new Dictionary<Type, \u003204086749104>()
    {
      {
        typeof (char),
        \u003204086749104.Char
      },
      {
        typeof (char?),
        \u003204086749104.CharNullable
      },
      {
        typeof (bool),
        \u003204086749104.Boolean
      },
      {
        typeof (bool?),
        \u003204086749104.BooleanNullable
      },
      {
        typeof (sbyte),
        \u003204086749104.SByte
      },
      {
        typeof (sbyte?),
        \u003204086749104.SByteNullable
      },
      {
        typeof (short),
        \u003204086749104.Int16
      },
      {
        typeof (short?),
        \u003204086749104.Int16Nullable
      },
      {
        typeof (ushort),
        \u003204086749104.UInt16
      },
      {
        typeof (ushort?),
        \u003204086749104.UInt16Nullable
      },
      {
        typeof (int),
        \u003204086749104.Int32
      },
      {
        typeof (int?),
        \u003204086749104.Int32Nullable
      },
      {
        typeof (byte),
        \u003204086749104.Byte
      },
      {
        typeof (byte?),
        \u003204086749104.ByteNullable
      },
      {
        typeof (uint),
        \u003204086749104.UInt32
      },
      {
        typeof (uint?),
        \u003204086749104.UInt32Nullable
      },
      {
        typeof (long),
        \u003204086749104.Int64
      },
      {
        typeof (long?),
        \u003204086749104.Int64Nullable
      },
      {
        typeof (ulong),
        \u003204086749104.UInt64
      },
      {
        typeof (ulong?),
        \u003204086749104.UInt64Nullable
      },
      {
        typeof (float),
        \u003204086749104.Single
      },
      {
        typeof (float?),
        \u003204086749104.SingleNullable
      },
      {
        typeof (double),
        \u003204086749104.Double
      },
      {
        typeof (double?),
        \u003204086749104.DoubleNullable
      },
      {
        typeof (DateTime),
        \u003204086749104.DateTime
      },
      {
        typeof (DateTime?),
        \u003204086749104.DateTimeNullable
      },
      {
        typeof (DateTimeOffset),
        \u003204086749104.DateTimeOffset
      },
      {
        typeof (DateTimeOffset?),
        \u003204086749104.DateTimeOffsetNullable
      },
      {
        typeof (Decimal),
        \u003204086749104.Decimal
      },
      {
        typeof (Decimal?),
        \u003204086749104.DecimalNullable
      },
      {
        typeof (Guid),
        \u003204086749104.Guid
      },
      {
        typeof (Guid?),
        \u003204086749104.GuidNullable
      },
      {
        typeof (TimeSpan),
        \u003204086749104.TimeSpan
      },
      {
        typeof (TimeSpan?),
        \u003204086749104.TimeSpanNullable
      },
      {
        typeof (BigInteger),
        \u003204086749104.BigInteger
      },
      {
        typeof (BigInteger?),
        \u003204086749104.BigIntegerNullable
      },
      {
        typeof (Uri),
        \u003204086749104.Uri
      },
      {
        typeof (string),
        \u003204086749104.String
      },
      {
        typeof (byte[]),
        \u003204086749104.Bytes
      },
      {
        typeof (DBNull),
        \u003204086749104.DBNull
      }
    };
    private static readonly \u003442131075574[] \u003260535740568 = new \u003442131075574[19]
    {
      new \u003442131075574()
      {
        \u003828453618417 = typeof (object),
        \u003342784374602 = \u003204086749104.Empty
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (object),
        \u003342784374602 = \u003204086749104.Object
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (object),
        \u003342784374602 = \u003204086749104.DBNull
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (bool),
        \u003342784374602 = \u003204086749104.Boolean
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (char),
        \u003342784374602 = \u003204086749104.Char
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (sbyte),
        \u003342784374602 = \u003204086749104.SByte
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (byte),
        \u003342784374602 = \u003204086749104.Byte
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (short),
        \u003342784374602 = \u003204086749104.Int16
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (ushort),
        \u003342784374602 = \u003204086749104.UInt16
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (int),
        \u003342784374602 = \u003204086749104.Int32
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (uint),
        \u003342784374602 = \u003204086749104.UInt32
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (long),
        \u003342784374602 = \u003204086749104.Int64
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (ulong),
        \u003342784374602 = \u003204086749104.UInt64
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (float),
        \u003342784374602 = \u003204086749104.Single
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (double),
        \u003342784374602 = \u003204086749104.Double
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (Decimal),
        \u003342784374602 = \u003204086749104.Decimal
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (DateTime),
        \u003342784374602 = \u003204086749104.DateTime
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (object),
        \u003342784374602 = \u003204086749104.Empty
      },
      new \u003442131075574()
      {
        \u003828453618417 = typeof (string),
        \u003342784374602 = \u003204086749104.String
      }
    };
    private static readonly \u003991605103082<\u003594264013390.\u003476023541442, Func<object, object>> \u003272516541367 = new \u003991605103082<\u003594264013390.\u003476023541442, Func<object, object>>(new Func<\u003594264013390.\u003476023541442, Func<object, object>>(\u003594264013390.\u003382981690291));
    private static Decimal[] \u003618347472098;

    public static \u003204086749104 \u003425916151308(Type _param0) => \u003594264013390.\u003766681930576(_param0, out bool _);

    public static \u003204086749104 \u003766681930576(
      Type _param0,
      out bool _param1)
    {
      \u003204086749104 obj;
      if (\u003594264013390.\u003797353754867.TryGetValue(_param0, out obj))
      {
        _param1 = false;
        return obj;
      }
      if (_param0.\u003958885632862())
      {
        _param1 = true;
        return \u003594264013390.\u003425916151308(Enum.GetUnderlyingType(_param0));
      }
      if (\u003560732527318.\u003876583190049(_param0))
      {
        Type underlyingType = Nullable.GetUnderlyingType(_param0);
        if (underlyingType.\u003958885632862())
        {
          Type type = typeof (Nullable<>).MakeGenericType(Enum.GetUnderlyingType(underlyingType));
          _param1 = true;
          return \u003594264013390.\u003425916151308(type);
        }
      }
      _param1 = false;
      return \u003204086749104.Object;
    }

    public static \u003442131075574 \u003960597759723(IConvertible _param0) => \u003594264013390.\u003260535740568[(int) _param0.GetTypeCode()];

    public static bool \u003356016118806(Type _param0) => typeof (IConvertible).IsAssignableFrom(_param0);

    public static TimeSpan \u003272896403240(string _param0) => TimeSpan.Parse(_param0, (IFormatProvider) CultureInfo.InvariantCulture);

    private static Func<object, object> \u003382981690291(
      \u003594264013390.\u003476023541442 _param0)
    {
      // ISSUE: variable of a compiler-generated type
      \u003594264013390.\u003769697081389 obj = (\u003594264013390.\u003769697081389) new \u003594264013390.\u003476023541442();
      // ISSUE: reference to a compiler-generated method
      MethodInfo method = _param0.\u003881448079483.GetMethod("op_Implicit", new Type[1]
      {
        _param0.get_InitialType()
      });
      if (method == (MethodInfo) null)
      {
        // ISSUE: reference to a compiler-generated method
        method = _param0.\u003881448079483.GetMethod("op_Explicit", new Type[1]
        {
          _param0.get_InitialType()
        });
      }
      if (method == (MethodInfo) null)
        return (Func<object, object>) null;
      ((\u003594264013390.\u003804636599688) obj).\u003581792529643 = \u003502658244085.\u003056461731906.\u003644698299950<object>((MethodBase) method);
      // ISSUE: reference to a compiler-generated method
      return new Func<object, object>(obj.\u003311979842311);
    }

    internal static BigInteger \u003865914954511(object _param0)
    {
      switch (_param0)
      {
        case BigInteger bigInteger:
          return bigInteger;
        case string str:
          return BigInteger.Parse(str, (IFormatProvider) CultureInfo.InvariantCulture);
        case float num1:
          return new BigInteger(num1);
        case double num2:
          return new BigInteger(num2);
        case Decimal num3:
          return new BigInteger(num3);
        case int num4:
          return new BigInteger(num4);
        case long num5:
          return new BigInteger(num5);
        case uint num6:
          return new BigInteger(num6);
        case ulong num7:
          return new BigInteger(num7);
        case byte[] numArray:
          return new BigInteger(numArray);
        default:
          throw new InvalidCastException("Cannot convert {0} to BigInteger.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.GetType()));
      }
    }

    public static object \u003594016804611(BigInteger _param0, Type _param1)
    {
      if (_param1 == typeof (Decimal))
        return (object) (Decimal) _param0;
      if (_param1 == typeof (double))
        return (object) (double) _param0;
      if (_param1 == typeof (float))
        return (object) (float) _param0;
      if (_param1 == typeof (ulong))
        return (object) (ulong) _param0;
      if (_param1 == typeof (bool))
        return (object) (_param0 != 0L);
      try
      {
        return Convert.ChangeType((object) (long) _param0, _param1, (IFormatProvider) CultureInfo.InvariantCulture);
      }
      catch (Exception ex)
      {
        throw new InvalidOperationException("Can not convert from BigInteger to {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1), ex);
      }
    }

    public static object \u003446006378185(object _param0, CultureInfo _param1, Type _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    private static bool \u003494638348267(
      object _param0,
      CultureInfo _param1,
      Type _param2,
      out object _param3)
    {
      // ISSUE: unable to decompile the method.
    }

    private static \u003594264013390.\u003804636599688 \u003971217199981(
      object _param0,
      CultureInfo _param1,
      Type _param2,
      out object _param3)
    {
      if (_param0 == null)
        throw new ArgumentNullException("initialValue");
      if (\u003560732527318.\u003876583190049(_param2))
        _param2 = Nullable.GetUnderlyingType(_param2);
      Type type = _param0.GetType();
      if (_param2 == type)
      {
        _param3 = _param0;
        return (\u003594264013390.\u003804636599688) 0;
      }
      if (\u003594264013390.\u003356016118806(_param0.GetType()) && \u003594264013390.\u003356016118806(_param2))
      {
        if (_param2.\u003958885632862())
        {
          if (_param0 is string)
          {
            _param3 = Enum.Parse(_param2, _param0.ToString(), true);
            return (\u003594264013390.\u003804636599688) 0;
          }
          if (\u003594264013390.\u003940287128905(_param0))
          {
            _param3 = Enum.ToObject(_param2, _param0);
            return (\u003594264013390.\u003804636599688) 0;
          }
        }
        _param3 = Convert.ChangeType(_param0, _param2, (IFormatProvider) _param1);
        return (\u003594264013390.\u003804636599688) 0;
      }
      switch (_param0)
      {
        case DateTime _ when _param2 == typeof (DateTimeOffset):
          _param3 = (object) new DateTimeOffset((DateTime) _param0);
          return (\u003594264013390.\u003804636599688) 0;
        case byte[] b when _param2 == typeof (Guid):
          _param3 = (object) new Guid(b);
          return (\u003594264013390.\u003804636599688) 0;
        case Guid _ when _param2 == typeof (byte[]):
          _param3 = (object) ((Guid) _param0).ToByteArray();
          return (\u003594264013390.\u003804636599688) 0;
        case string str:
          if (_param2 == typeof (Guid))
          {
            _param3 = (object) new Guid(str);
            return (\u003594264013390.\u003804636599688) 0;
          }
          if (_param2 == typeof (Uri))
          {
            _param3 = (object) new Uri(str, UriKind.RelativeOrAbsolute);
            return (\u003594264013390.\u003804636599688) 0;
          }
          if (_param2 == typeof (TimeSpan))
          {
            _param3 = (object) \u003594264013390.\u003272896403240(str);
            return (\u003594264013390.\u003804636599688) 0;
          }
          if (_param2 == typeof (byte[]))
          {
            _param3 = (object) Convert.FromBase64String(str);
            return (\u003594264013390.\u003804636599688) 0;
          }
          if (_param2 == typeof (Version))
          {
            Version version;
            if (\u003594264013390.\u003345500235196(str, out version))
            {
              _param3 = (object) version;
              return (\u003594264013390.\u003804636599688) 0;
            }
            _param3 = (object) null;
            return (\u003594264013390.\u003804636599688) 3;
          }
          if (typeof (Type).IsAssignableFrom(_param2))
          {
            _param3 = (object) Type.GetType(str, true);
            return (\u003594264013390.\u003804636599688) 0;
          }
          break;
      }
      if (_param2 == typeof (BigInteger))
      {
        _param3 = (object) \u003594264013390.\u003865914954511(_param0);
        return (\u003594264013390.\u003804636599688) 0;
      }
      if (_param0 is BigInteger bigInteger)
      {
        _param3 = \u003594264013390.\u003594016804611(bigInteger, _param2);
        return (\u003594264013390.\u003804636599688) 0;
      }
      TypeConverter converter1 = TypeDescriptor.GetConverter(type);
      if (converter1 != null && converter1.CanConvertTo(_param2))
      {
        _param3 = converter1.ConvertTo((ITypeDescriptorContext) null, _param1, _param0, _param2);
        return (\u003594264013390.\u003804636599688) 0;
      }
      TypeConverter converter2 = TypeDescriptor.GetConverter(_param2);
      if (converter2 != null && converter2.CanConvertFrom(type))
      {
        _param3 = converter2.ConvertFrom((ITypeDescriptorContext) null, _param1, _param0);
        return (\u003594264013390.\u003804636599688) 0;
      }
      if (_param0 == DBNull.Value)
      {
        if (\u003560732527318.\u003645351876055(_param2))
        {
          _param3 = \u003594264013390.\u003645247022333((object) null, type, _param2);
          return (\u003594264013390.\u003804636599688) 0;
        }
        _param3 = (object) null;
        return (\u003594264013390.\u003804636599688) 1;
      }
      if (_param0 is INullable nullable)
      {
        _param3 = \u003594264013390.\u003645247022333(\u003594264013390.\u003434287379035(nullable), type, _param2);
        return (\u003594264013390.\u003804636599688) 0;
      }
      if (_param2.\u003777956360344() || _param2.\u003422531313394() || _param2.\u003207444793174())
      {
        _param3 = (object) null;
        return (\u003594264013390.\u003804636599688) 2;
      }
      _param3 = (object) null;
      return (\u003594264013390.\u003804636599688) 3;
    }

    public static object \u003215874589107(object _param0, CultureInfo _param1, Type _param2)
    {
      if (_param2 == typeof (object))
        return _param0;
      if (_param0 == null && \u003560732527318.\u003645351876055(_param2))
        return (object) null;
      object obj;
      return \u003594264013390.\u003494638348267(_param0, _param1, _param2, out obj) ? obj : \u003594264013390.\u003645247022333(_param0, \u003560732527318.\u003502467942885(_param0), _param2);
    }

    private static object \u003645247022333(object _param0, Type _param1, Type _param2)
    {
      Type type = _param0?.GetType();
      if (_param0 != null)
      {
        if (_param2.IsAssignableFrom(type))
          return _param0;
        Func<object, object> func = \u003594264013390.\u003272516541367.Get(new \u003594264013390.\u003476023541442(type, _param2));
        if (func != null)
          return func(_param0);
      }
      else if (\u003560732527318.\u003645351876055(_param2))
        return (object) null;
      throw new ArgumentException("Could not cast or convert from {0} to {1}.".\u003937370926224((IFormatProvider) CultureInfo.InvariantCulture, (object) (_param1?.ToString() ?? "{null}"), (object) _param2));
    }

    public static object \u003434287379035(INullable _param0)
    {
      switch (_param0)
      {
        case null:
          return (object) null;
        case SqlInt32 sqlInt32:
          return \u003594264013390.\u003434287379035((INullable) sqlInt32);
        case SqlInt64 sqlInt64:
          return \u003594264013390.\u003434287379035((INullable) sqlInt64);
        case SqlBoolean sqlBoolean:
          return \u003594264013390.\u003434287379035((INullable) sqlBoolean);
        case SqlString sqlString:
          return \u003594264013390.\u003434287379035((INullable) sqlString);
        case SqlDateTime sqlDateTime:
          return \u003594264013390.\u003434287379035((INullable) sqlDateTime);
        default:
          throw new ArgumentException("Unsupported INullable type: {0}".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0.GetType()));
      }
    }

    public static bool \u003345500235196(string _param0, out Version _param1) => Version.TryParse(_param0, out _param1);

    public static bool \u003940287128905(object _param0)
    {
      switch (\u003594264013390.\u003425916151308(_param0.GetType()))
      {
        case \u003204086749104.SByte:
        case \u003204086749104.Int16:
        case \u003204086749104.UInt16:
        case \u003204086749104.Int32:
        case \u003204086749104.Byte:
        case \u003204086749104.UInt32:
        case \u003204086749104.Int64:
        case \u003204086749104.UInt64:
          return true;
        default:
          return false;
      }
    }

    public static \u003574970756994 \u003011807937998(
      char[] _param0,
      int _param1,
      int _param2,
      out int _param3)
    {
      _param3 = 0;
      if (_param2 == 0)
        return \u003574970756994.Invalid;
      bool flag = _param0[_param1] == '-';
      if (flag)
      {
        if (_param2 == 1)
          return \u003574970756994.Invalid;
        ++_param1;
        --_param2;
      }
      int num1 = _param1 + _param2;
      if (_param2 > 10 || _param2 == 10 && (int) _param0[_param1] - 48 > 2)
      {
        for (int index = _param1; index < num1; ++index)
        {
          int num2 = (int) _param0[index] - 48;
          if (num2 < 0 || num2 > 9)
            return \u003574970756994.Invalid;
        }
        return \u003574970756994.Overflow;
      }
      for (int index1 = _param1; index1 < num1; ++index1)
      {
        int num3 = (int) _param0[index1] - 48;
        if (num3 < 0 || num3 > 9)
          return \u003574970756994.Invalid;
        int num4 = 10 * _param3 - num3;
        if (num4 > _param3)
        {
          for (int index2 = index1 + 1; index2 < num1; ++index2)
          {
            int num5 = (int) _param0[index2] - 48;
            if (num5 < 0 || num5 > 9)
              return \u003574970756994.Invalid;
          }
          return \u003574970756994.Overflow;
        }
        _param3 = num4;
      }
      if (!flag)
      {
        if (_param3 == int.MinValue)
          return \u003574970756994.Overflow;
        _param3 = -_param3;
      }
      return \u003574970756994.Success;
    }

    public static \u003574970756994 \u003996050494539(
      char[] _param0,
      int _param1,
      int _param2,
      out long _param3)
    {
      _param3 = 0L;
      if (_param2 == 0)
        return \u003574970756994.Invalid;
      bool flag = _param0[_param1] == '-';
      if (flag)
      {
        if (_param2 == 1)
          return \u003574970756994.Invalid;
        ++_param1;
        --_param2;
      }
      int num1 = _param1 + _param2;
      if (_param2 > 19)
      {
        for (int index = _param1; index < num1; ++index)
        {
          int num2 = (int) _param0[index] - 48;
          if (num2 < 0 || num2 > 9)
            return \u003574970756994.Invalid;
        }
        return \u003574970756994.Overflow;
      }
      for (int index1 = _param1; index1 < num1; ++index1)
      {
        int num3 = (int) _param0[index1] - 48;
        if (num3 < 0 || num3 > 9)
          return \u003574970756994.Invalid;
        long num4 = 10L * _param3 - (long) num3;
        if (num4 > _param3)
        {
          for (int index2 = index1 + 1; index2 < num1; ++index2)
          {
            int num5 = (int) _param0[index2] - 48;
            if (num5 < 0 || num5 > 9)
              return \u003574970756994.Invalid;
          }
          return \u003574970756994.Overflow;
        }
        _param3 = num4;
      }
      if (!flag)
      {
        if (_param3 == long.MinValue)
          return \u003574970756994.Overflow;
        _param3 = -_param3;
      }
      return \u003574970756994.Success;
    }

    public static \u003574970756994 \u003974468698969(
      char[] _param0,
      int _param1,
      int _param2,
      out Decimal _param3)
    {
      _param3 = 0M;
      if (_param2 == 0)
        return \u003574970756994.Invalid;
      bool flag1 = _param0[_param1] == '-';
      if (flag1)
      {
        if (_param2 == 1)
          return \u003574970756994.Invalid;
        ++_param1;
        --_param2;
      }
      int index = _param1;
      int num1 = _param1 + _param2;
      int num2 = num1;
      int num3 = num1;
      int num4 = 0;
      ulong num5 = 0;
      ulong num6 = 0;
      int num7 = 0;
      int num8 = 0;
      bool? nullable1 = new bool?();
      bool? nullable2 = new bool?();
      for (; index < num1; ++index)
      {
        char ch1 = _param0[index];
        if (ch1 != '.')
        {
          if (ch1 != 'E' && ch1 != 'e')
            goto label_29;
label_12:
          if (index == _param1 || index == num2)
            return \u003574970756994.Invalid;
          ++index;
          if (index == num1)
            return \u003574970756994.Invalid;
          if (num2 < num1)
            num3 = index - 1;
          char ch2 = _param0[index];
          bool flag2 = false;
          switch (ch2)
          {
            case '+':
              ++index;
              break;
            case '-':
              flag2 = true;
              ++index;
              break;
          }
          for (; index < num1; ++index)
          {
            char ch3 = _param0[index];
            if (ch3 < '0' || ch3 > '9')
              return \u003574970756994.Invalid;
            int num9 = 10 * num4 + ((int) ch3 - 48);
            if (num4 < num9)
              num4 = num9;
          }
          if (flag2)
          {
            num4 = -num4;
            continue;
          }
          continue;
label_29:
          if (ch1 < '0' || ch1 > '9')
            return \u003574970756994.Invalid;
          if (index == _param1 && ch1 == '0')
          {
            ++index;
            if (index != num1)
            {
              switch (_param0[index])
              {
                case '.':
                  goto label_9;
                case 'E':
                case 'e':
                  goto label_12;
                default:
                  return \u003574970756994.Invalid;
              }
            }
          }
          if (num7 < 29)
          {
            if (num7 == 28)
            {
              bool? nullable3 = nullable2;
              int num10;
              if (!nullable3.HasValue)
              {
                nullable2 = new bool?(num5 > 7922816251426433759UL || num5 == 7922816251426433759UL && (num6 > 354395033UL || num6 == 354395033UL && ch1 > '5'));
                num10 = nullable2.GetValueOrDefault() ? 1 : 0;
              }
              else
                num10 = nullable3.GetValueOrDefault() ? 1 : 0;
              if (num10 != 0)
                goto label_45;
            }
            if (num7 < 19)
              num5 = num5 * 10UL + (ulong) ((int) ch1 - 48);
            else
              num6 = num6 * 10UL + (ulong) ((int) ch1 - 48);
            ++num7;
            continue;
          }
label_45:
          if (!nullable1.HasValue)
            nullable1 = new bool?(ch1 >= '5');
          ++num8;
          continue;
        }
label_9:
        if (index == _param1 || index + 1 == num1 || num2 != num1)
          return \u003574970756994.Invalid;
        num2 = index + 1;
      }
      int num11 = num4 + num8 - (num3 - num2);
      _param3 = num7 > 19 ? (Decimal) num5 * \u003594264013390.\u003451468165593[num7 - 20] + (Decimal) num6 : (Decimal) num5;
      if (num11 > 0)
      {
        int num12 = num7 + num11;
        if (num12 > 29)
          return \u003574970756994.Overflow;
        if (num12 == 29)
        {
          if (num11 > 1)
          {
            _param3 *= \u003594264013390.\u003451468165593[num11 - 2];
            if (_param3 > 7922816251426433759354395033M)
              return \u003574970756994.Overflow;
          }
          _param3 *= 10M;
        }
        else
          _param3 *= \u003594264013390.\u003451468165593[num11 - 1];
      }
      else
      {
        bool? nullable4 = nullable1;
        bool flag3 = true;
        if ((nullable4.GetValueOrDefault() == flag3 ? (nullable4.HasValue ? 1 : 0) : 0) != 0 && num11 >= -28)
          ++_param3;
        if (num11 < 0)
        {
          if (num7 + num11 + 28 <= 0)
          {
            _param3 = 0M;
            return \u003574970756994.Success;
          }
          if (num11 >= -28)
          {
            _param3 /= \u003594264013390.\u003451468165593[-num11 - 1];
          }
          else
          {
            Decimal[] numArray = \u003594264013390.\u003451468165593;
            _param3 /= numArray[27];
            _param3 /= numArray[-num11 - 29];
          }
        }
      }
      if (flag1)
        _param3 = -_param3;
      return \u003574970756994.Success;
    }

    private static Decimal[] \u003451468165593
    {
      get
      {
        Decimal[] decimalFactors = \u003594264013390.\u003618347472098;
        if (decimalFactors == null)
        {
          decimalFactors = new Decimal[28];
          Decimal num = 1M;
          for (int index = 0; index < decimalFactors.Length; ++index)
            decimalFactors[index] = (num *= 10M);
          \u003594264013390.\u003618347472098 = decimalFactors;
        }
        return decimalFactors;
      }
    }

    public static bool \u003099556565138(string _param0, out Guid _param1) => Guid.TryParseExact(_param0, "D", out _param1);

    public static bool \u003003160880101(
      char[] _param0,
      int _param1,
      int _param2,
      out int _param3)
    {
      _param3 = 0;
      for (int index = _param1; index < _param2; ++index)
      {
        char ch = _param0[index];
        int num;
        if (ch <= '9' && ch >= '0')
          num = (int) ch - 48;
        else if (ch <= 'F' && ch >= 'A')
          num = (int) ch - 55;
        else if (ch <= 'f' && ch >= 'a')
        {
          num = (int) ch - 87;
        }
        else
        {
          _param3 = 0;
          return false;
        }
        _param3 += num << (_param2 - 1 - index) * 4;
      }
      return true;
    }

    internal struct \u003476023541442 : IEquatable<\u003594264013390.\u003476023541442>
    {
      private readonly Type \u003304816964896;
      [SpecialName]
      public int value__;

      public Type \u003060807804844
      {
        [SpecialName] get => this.\u003392228437818;
      }

      public Type \u003881448079483 => this.\u003304816964896;

      public \u003476023541442(Type initialType, Type targetType)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: reference to a compiler-generated field
        (^(\u003251786467410.\u003426774660032&) ref this).\u003392228437818 = initialType;
        this.\u003304816964896 = targetType;
      }

      public virtual int \u003039180445725() => (^(\u003251786467410.\u003426774660032&) ref this).\u003392228437818.GetHashCode() ^ this.\u003304816964896.GetHashCode();

      public virtual bool \u003267132867500(object _param1) => _param1 is \u003594264013390.\u003476023541442 obj && this.\u003838211124807(obj);

      public bool \u003838211124807(\u003594264013390.\u003476023541442 _param1) => (^(\u003251786467410.\u003426774660032&) ref this).\u003392228437818 == _param1.\u003392228437818 && this.\u003304816964896 == _param1.\u003304816964896;

      public \u003476023541442() => ((object) ref this).\u002Ector();
    }

    internal enum \u003804636599688
    {
      Success,
      CannotConvertNull,
      NotInstantiableType,
      NoValidConversion,
    }
  }
}
