// Decompiled with JetBrains decompiler
// Type: Yntmgnmjwxmbnwlr.h
// Assembly: ConsoleApp2, Version=92.0.4515.159, Culture=neutral, PublicKeyToken=null
// MVID: D38653D3-F867-445C-918F-B56DE6FC8054
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-05c81dca5026782b10339282d62291ee4153d1e4952c6062be97481849ac1d2a.exe

using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Yntmgnmjwxmbnwlr
{
  public static class h
  {
    private static readonly HashSet<string> a;
    private static readonly Regex b;

    static h()
    {
      HashSet<string> stringSet = new HashSet<string>();
      stringSet.Add("__arglist");
      stringSet.Add("__makeref");
      stringSet.Add("__reftype");
      stringSet.Add("__refvalue");
      stringSet.Add("abstract");
      stringSet.Add("as");
      stringSet.Add("base");
      stringSet.Add("bool");
      stringSet.Add("break");
      stringSet.Add("byte");
      stringSet.Add("case");
      stringSet.Add("catch");
      stringSet.Add("char");
      stringSet.Add("checked");
      stringSet.Add("class");
      stringSet.Add("const");
      stringSet.Add("continue");
      stringSet.Add("decimal");
      stringSet.Add("default");
      stringSet.Add("delegate");
      stringSet.Add("do");
      stringSet.Add("double");
      stringSet.Add("else");
      stringSet.Add("enum");
      stringSet.Add("event");
      stringSet.Add("explicit");
      stringSet.Add("extern");
      stringSet.Add("false");
      stringSet.Add("finally");
      stringSet.Add("fixed");
      stringSet.Add("float");
      stringSet.Add("for");
      stringSet.Add("foreach");
      stringSet.Add("goto");
      stringSet.Add("if");
      stringSet.Add("implicit");
      stringSet.Add("in");
      stringSet.Add("int");
      stringSet.Add("interface");
      stringSet.Add("internal");
      stringSet.Add("is");
      stringSet.Add("lock");
      stringSet.Add("long");
      stringSet.Add("namespace");
      stringSet.Add("new");
      stringSet.Add("null");
      stringSet.Add("object");
      stringSet.Add("operator");
      stringSet.Add("out");
      stringSet.Add("override");
      stringSet.Add("params");
      stringSet.Add("private");
      stringSet.Add("protected");
      stringSet.Add("public");
      stringSet.Add("readonly");
      stringSet.Add("ref");
      stringSet.Add("return");
      stringSet.Add("sbyte");
      stringSet.Add("sealed");
      stringSet.Add("short");
      stringSet.Add("sizeof");
      stringSet.Add("stackalloc");
      stringSet.Add("static");
      stringSet.Add("string");
      stringSet.Add("struct");
      stringSet.Add("switch");
      stringSet.Add("this");
      stringSet.Add("throw");
      stringSet.Add("true");
      stringSet.Add("try");
      stringSet.Add("typeof");
      stringSet.Add("uint");
      stringSet.Add("ulong");
      stringSet.Add("unchecked");
      stringSet.Add("unsafe");
      stringSet.Add("ushort");
      stringSet.Add("using");
      stringSet.Add("virtual");
      stringSet.Add("volatile");
      stringSet.Add("void");
      stringSet.Add("while");
      if (true)
        goto label_3;
label_1:
      Regex regex = new Regex("^(\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|_)((\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\p{Nd}|\\p{Pc}|\\p{Mn}|\\p{Mc}|\\p{Cf})+)*$", RegexOptions.Compiled);
      if (false)
        return;
      h.b = regex;
      return;
label_3:
      h.a = stringSet;
      goto label_1;
    }

    public static bool a(this string a)
    {
      if (string.IsNullOrWhiteSpace(a))
        return false;
      string str = a.Normalize();
      if (true)
        goto label_4;
label_3:
      string input;
      return h.b.IsMatch(input) && !h.a.Contains(input) || input.StartsWith("@") && h.b.IsMatch(input.Substring(1));
label_4:
      input = str;
      goto label_3;
    }
  }
}
