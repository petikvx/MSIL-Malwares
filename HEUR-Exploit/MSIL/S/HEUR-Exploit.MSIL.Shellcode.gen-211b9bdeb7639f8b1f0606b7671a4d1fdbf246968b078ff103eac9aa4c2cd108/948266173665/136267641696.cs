// Decompiled with JetBrains decompiler
// Type: 948266173665.136267641696
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003056364933363;
using \u003073564145303;
using \u003398049663276;
using \u003402511475581;
using \u003463056308027;
using \u003475310219084;
using \u003534647440872;
using \u003570935125301;
using \u003715672977127;
using \u003763242632939;
using \u003948266173665;
using Microsoft.ProgramSynthesis.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace \u003948266173665
{
  internal static class \u003136267641696
  {
    public static string \u003954748566909(this IRichDataType _param0)
    {
      switch (_param0.Kind)
      {
        case \u003547566135655.Numeric:
          \u003415651442941 obj = (\u003415651442941) _param0;
          if (obj.\u003269808446558)
            return "Integer";
          if (obj.\u003758076372869)
            return "Float";
          throw new NotImplementedException("Encountered a numeric type that's neither integer nor real.");
        case \u003547566135655.Date:
          return "Date";
        case \u003547566135655.Time:
          return "Time";
        case \u003547566135655.DateTime:
          return "DateTime";
        case \u003547566135655.Boolean:
          return "Boolean";
        case \u003547566135655.String:
          return "String";
        default:
          throw new NotImplementedException(FormattableString.Invariant(FormattableStringFactory.Create("Unsupported data kind: {0}.", (object) _param0.Kind)));
      }
    }

    public static string \u003063549704997(this \u003418950873144 _param0, string _param1)
    {
      if (_param0.\u003677979328390 && !_param0.\u003780160262527)
        return FormattableString.Invariant(FormattableStringFactory.Create("{0}.date()", (object) _param1));
      if (_param0.\u003780160262527 && !_param0.\u003677979328390)
        return FormattableString.Invariant(FormattableStringFactory.Create("{0}.time()", (object) _param1));
      if (_param0.\u003780160262527 && _param0.\u003677979328390)
        return _param1;
      throw new InvalidOperationException("Unreachable code.");
    }

    public static string \u003875763543739(this IRichDataType _param0)
    {
      switch (_param0.Kind)
      {
        case \u003547566135655.Numeric:
          \u003415651442941 obj = (\u003415651442941) _param0;
          if (obj.\u003758076372869)
            return FormattableString.Invariant(FormattableStringFactory.Create("{0}.DoubleType()", (object) "pyspark.sql.types"));
          if (Optional<BigInteger>.op_Equality(obj.\u003574232386253, Optional<BigInteger>.Nothing) && Optional<BigInteger>.op_Equality(obj.\u003355410381240, Optional<BigInteger>.Nothing))
            return obj.\u003234466120767 ? FormattableString.Invariant(FormattableStringFactory.Create("{0}.DecimalType(38, 18)", (object) "pyspark.sql.types")) : FormattableString.Invariant(FormattableStringFactory.Create("{0}.DecimalType({1}, {2})", (object) "pyspark.sql.types", (object) obj.\u003065332417396.Value, (object) obj.\u003473812983398.Value));
          BigInteger bigInteger1 = obj.\u003574232386253.Value;
          BigInteger bigInteger2 = obj.\u003355410381240.Value;
          return bigInteger1 >= (long) short.MinValue && bigInteger2 <= (long) short.MaxValue ? FormattableString.Invariant(FormattableStringFactory.Create("{0}.ShortType()", (object) "pyspark.sql.types")) : (bigInteger1 >= (long) int.MinValue && bigInteger2 <= (long) int.MaxValue ? FormattableString.Invariant(FormattableStringFactory.Create("{0}.IntegerType()", (object) "pyspark.sql.types")) : (bigInteger1 >= long.MinValue && bigInteger2 <= long.MaxValue ? FormattableString.Invariant(FormattableStringFactory.Create("{0}.LongType()", (object) "pyspark.sql.types")) : FormattableString.Invariant(FormattableStringFactory.Create("{0}.DecimalType(38, 18)", (object) "pyspark.sql.types"))));
        case \u003547566135655.Date:
        case \u003547566135655.Time:
        case \u003547566135655.DateTime:
          return FormattableString.Invariant(FormattableStringFactory.Create("{0}.TimestampType()", (object) "pyspark.sql.types"));
        case \u003547566135655.Boolean:
          return FormattableString.Invariant(FormattableStringFactory.Create("{0}.BooleanType()", (object) "pyspark.sql.types"));
        default:
          return FormattableString.Invariant(FormattableStringFactory.Create("{0}.StringType()", (object) "pyspark.sql.types"));
      }
    }

    public static bool \u003029880056196(this \u003301664478184 _param0) => !_param0.\u003463227775507 && (!_param0.\u003526529034458.Any<KeyValuePair<string, string>>() || _param0.\u003213158464276 && _param0.\u003526529034458.Count == 1 && _param0.\u003526529034458.Single<KeyValuePair<string, string>>().Key == "-" && _param0.\u003049172197308);

    public static string \u003187450029110(this IEnumerable<\u003513888654302> _param0) => _param0.FirstOrDefault<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => _param1.\u003075930419454.PosixParsingFormatString != null)).\u003075930419454.PosixParsingFormatString;

    private static bool \u003516767689251(\u003415651442941 _param0) => _param0.\u003245054004157.Count<\u003301664478184>() > 1 && _param0.\u003245054004157.Any<\u003301664478184>((Func<\u003301664478184, bool>) (_param1 => !_param1.\u003029880056196()));

    private static bool \u003057173671148(\u003418950873144 _param0)
    {
      List<IEnumerable<\u003513888654302>> list = _param0.\u003237890725016.Where<IEnumerable<\u003513888654302>>((Func<IEnumerable<\u003513888654302>, bool>) (_param1 => _param1.All<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => !_param1.\u003463227775507)))).ToList<IEnumerable<\u003513888654302>>();
      IEnumerable<IEnumerable<\u003513888654302>> source = _param0.\u003237890725016.Where<IEnumerable<\u003513888654302>>((Func<IEnumerable<\u003513888654302>, bool>) (_param1 => _param1.Any<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => _param1.\u003463227775507))));
      return list.Count > 1 || source.Any<IEnumerable<\u003513888654302>>();
    }

    private static bool \u003918987599124(\u003477499562484 _param0) => _param0.\u003304071846640.Count<string>() > 1 || _param0.\u003263248571856.Count<string>() > 1 || _param0.\u003176549319498 > 0;

    private static bool \u003576586485922(this IRichDataType _param0)
    {
      if (_param0 == null || _param0 is \u003804667841946)
        return false;
      if (_param0.EmptyStringsExpectedInData || _param0.NormalizableStringsExpectedInData || _param0.NullsExpectedInData)
        return true;
      switch (_param0)
      {
        case \u003415651442941 obj1:
          return \u003136267641696.\u003516767689251(obj1);
        case \u003418950873144 obj2:
          return \u003136267641696.\u003057173671148(obj2);
        case \u003477499562484 obj3:
          return \u003136267641696.\u003918987599124(obj3);
        default:
          return true;
      }
    }

    public static bool \u003430501951709(
      this IRichDataType _param0,
      IPythonColumnInfo _param1_1,
      \u003392131492675 _param2)
    {
      if (_param2 == \u003392131492675.PysparkDataFrame && _param0 is \u003418950873144 obj1 && obj1.\u003780160262527 && !obj1.\u003677979328390)
        return true;
      switch (_param0)
      {
        case \u003804667841946 _:
          return false;
        case \u003415651442941 obj2:
          if (!obj2.\u003576586485922())
            return false;
          if (!_param1_1.FixPandasNaNBug)
            return true;
          List<\u003301664478184> list = obj2.\u003245054004157.ToList<\u003301664478184>();
          return list.Count<\u003301664478184>((Func<\u003301664478184, bool>) (_param1_2 => _param1_2.\u003241991174453)) > 1 || list.Where<\u003301664478184>((Func<\u003301664478184, bool>) (_param1_3 => !_param1_3.\u003241991174453)).Any<\u003301664478184>((Func<\u003301664478184, bool>) (_param1_4 => !_param1_4.\u003029880056196()));
        default:
          return _param0.\u003576586485922();
      }
    }
  }
}
