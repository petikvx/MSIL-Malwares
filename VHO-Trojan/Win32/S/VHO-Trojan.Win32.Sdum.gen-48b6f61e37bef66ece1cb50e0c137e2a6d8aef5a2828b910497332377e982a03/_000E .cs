// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Sdevmxl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F0B5D56E-2738-4851-005E-7CC3B980D8C1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-48b6f61e37bef66ece1cb50e0c137e2a6d8aef5a2828b910497332377e982a03.exe

using System;

internal static class \u000E\u2008
{
  private static volatile int \u0002;
  private static volatile int \u0003;

  public static void \u0002(ref byte _param0)
  {
    ref byte local1 = ref _param0;
    if (true)
      ;
    int num = (int) (byte) \u000E\u2008.\u0002;
    local1 = (byte) num;
    ref byte local2 = ref _param0;
    if (true)
      ;
    \u000E\u2008.\u0003 = (int) local2;
  }

  public static void \u0002(ref int _param0)
  {
    ref int local1 = ref _param0;
    if (true)
      ;
    int num = \u000E\u2008.\u0002;
    local1 = num;
    ref int local2 = ref _param0;
    if (true)
      ;
    \u000E\u2008.\u0003 = local2;
  }

  public static void \u0002(ref long _param0)
  {
    ref long local1 = ref _param0;
    if (true)
      ;
    long num = (long) \u000E\u2008.\u0002;
    local1 = num;
    ref long local2 = ref _param0;
    if (true)
      ;
    \u000E\u2008.\u0003 = (int) local2;
  }

  public static void \u0002(ref char _param0)
  {
    ref char local1 = ref _param0;
    if (true)
      ;
    int num = (int) (ushort) \u000E\u2008.\u0002;
    local1 = (char) num;
    ref char local2 = ref _param0;
    if (true)
      ;
    \u000E\u2008.\u0003 = (int) local2;
  }

  public static void \u0002(Array _param0, int _param1, int _param2)
  {
    Array array = _param0;
    int index = _param1;
    int length = _param2;
    if (false)
      return;
    Array.Clear(array, index, length);
  }

  public static void \u0002(Array _param0)
  {
    Array array = _param0;
    int length = _param0.GetLength(0);
    if (false)
      return;
    \u000E\u2008.\u0002(array, 0, length);
  }
}
