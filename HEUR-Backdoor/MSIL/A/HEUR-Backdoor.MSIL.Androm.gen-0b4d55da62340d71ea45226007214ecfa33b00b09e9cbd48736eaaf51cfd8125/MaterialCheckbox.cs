// Decompiled with JetBrains decompiler
// Type: MaterialSurface.MaterialCheckbox
// Assembly: Func, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EFD38B4B-EBC7-4ADC-A92E-3AF74F6197CA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0b4d55da62340d71ea45226007214ecfa33b00b09e9cbd48736eaaf51cfd8125.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MaterialSurface
{
  public class MaterialCheckbox : CheckBox, IMaterialControl
  {
    private readonly Timer animationDirector1 = new Timer()
    {
      Interval = 1
    };
    private readonly Timer animationDirector2 = new Timer()
    {
      Interval = 1
    };
    private Rectangle textArea;
    private readonly StringFormat textAglignment = new StringFormat()
    {
      Alignment = StringAlignment.Near,
      LineAlignment = StringAlignment.Near
    };
    private Color borderColor = Color.Gray;
    private Color primaryColor = Color.BlueViolet;
    private Color markColor = Color.White;
    private int aniAlpha;
    private int aniAlpha2 = 0;
    private int aniSize;
    private int aniLocation;
    private int incLocation;
    private int incSize;

    [Category("Appearance Material")]
    [Description("Color of the mark.")]
    public Color MarkColor
    {
      get => this.markColor;
      set
      {
        this.markColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Color on checked.")]
    public Color PrimaryColor
    {
      get => this.primaryColor;
      set
      {
        this.primaryColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Yub, as the name.")]
    public Color BorderColor
    {
      get => this.borderColor;
      set
      {
        this.borderColor = value;
        this.Invalidate();
      }
    }

    public MouseState MouseState { get; set; }

    public MaterialCheckbox()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.MinimumSize = new Size(25, 24);
      this.AutoSize = false;
      this.Size = new Size(165, 25);
      this.Font = new Font("Segoe UI", 11f, FontStyle.Regular);
      this.MouseState = MouseState.OUT;
      this.aniSize = 0;
      this.aniLocation = this.Height / 2;
      this.incLocation = this.Height / 24;
      this.incSize = this.Height / 12;
      this.textArea = new Rectangle(this.Height, 0, this.Width - this.Height / 2, this.Height);
      this.animationDirector1.Tick += new EventHandler(this.OnAnimate1);
      this.animationDirector2.Tick += new EventHandler(this.OnAnimate2);
    }

    private void OnAnimate1(object sender, EventArgs e)
    {
      if (this.Checked)
      {
        if (this.aniAlpha < 240)
          this.aniAlpha += 24;
        if (this.aniLocation > 0)
        {
          this.aniLocation -= this.incLocation;
          this.aniSize += this.incSize;
        }
        else
        {
          this.aniAlpha = 240;
          this.animationDirector1.Stop();
        }
      }
      else
      {
        if (this.aniAlpha > 0)
          this.aniAlpha -= 24;
        if (this.aniLocation < Convert.ToInt32(Math.Round((double) this.Height / 2.0, 0)))
        {
          this.aniLocation += this.incLocation;
          this.aniSize -= this.incSize;
        }
        else
        {
          this.aniSize = 0;
          this.aniLocation = this.Height / 2;
          this.aniAlpha = 0;
          this.animationDirector1.Stop();
        }
      }
      this.Invalidate();
    }

    private void OnAnimate2(object sender, EventArgs e)
    {
      if (this.aniAlpha2 > 0)
        this.aniAlpha2 -= 5;
      else
        this.animationDirector2.Stop();
      if (this.animationDirector1.Enabled)
        return;
      this.Invalidate();
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      base.OnPaint(pevent);
      Graphics graphics = pevent.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      if (this.Parent is IMaterialControl)
        graphics.Clear(((MaterialCard) this.Parent).CardColor);
      else
        graphics.Clear(this.Parent.BackColor);
      GraphicsPath roundedRectangle = GraphicHelper.GetRoundedRectangle(5f, 5f, (float) (this.Height - 10), (float) (this.Height - 10), 1);
      graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(this.aniAlpha2, Color.Gray)), 0, 0, this.Height, this.Height);
      Region region = new Region(roundedRectangle);
      if (this.Enabled)
      {
        if (this.Focused || this.MouseState == MouseState.HOVER)
        {
          if (!this.Checked)
            graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(90, Color.Gray)), 0, 0, this.Height, this.Height);
          else
            graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(90, this.primaryColor)), 0, 0, this.Height, this.Height);
        }
        if (!this.Checked && !this.animationDirector1.Enabled)
          graphics.DrawPath(new Pen((Brush) new SolidBrush(this.borderColor), 2f), roundedRectangle);
        else
          graphics.DrawPath(new Pen((Brush) new SolidBrush(this.primaryColor), 2f), roundedRectangle);
        graphics.SetClip(region, CombineMode.Replace);
        graphics.FillRectangle((Brush) new SolidBrush(this.primaryColor), this.aniLocation, this.aniLocation, this.aniSize, this.aniSize);
        graphics.ResetClip();
        if (this.Checked)
        {
          switch (this.CheckState)
          {
            case CheckState.Checked:
              GraphicHelper.DrawSymbolMark(graphics, new Pen(Color.FromArgb(this.aniAlpha, this.markColor), 2f), 0.0f, 0.0f, (float) this.Height, (float) this.Height, 8);
              break;
            case CheckState.Indeterminate:
              graphics.DrawLine(new Pen(Color.FromArgb(this.aniAlpha, this.markColor), 2f), 5 + this.Height / 12, this.Height / 2, this.Height - 7, this.Height / 2);
              break;
          }
        }
        graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(this.ForeColor), (RectangleF) this.textArea, this.textAglignment);
      }
      else
      {
        graphics.DrawPath(new Pen((Brush) new SolidBrush(Color.Silver), 2f), roundedRectangle);
        graphics.SetClip(region, CombineMode.Replace);
        graphics.FillRectangle((Brush) new SolidBrush(Color.Silver), this.aniLocation, this.aniLocation, this.aniSize, this.aniSize);
        graphics.ResetClip();
        if (this.Checked)
        {
          switch (this.CheckState)
          {
            case CheckState.Checked:
              GraphicHelper.DrawSymbolMark(graphics, new Pen(Color.White, 2f), 0.0f, 0.0f, (float) this.Height, (float) this.Height, 7);
              break;
            case CheckState.Indeterminate:
              graphics.DrawLine(new Pen(Color.White, 2f), 5 + this.Height / 12, this.Height / 2, this.Height - 7, this.Height / 2);
              break;
          }
        }
        graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(Color.Silver), (RectangleF) this.textArea, this.textAglignment);
      }
      roundedRectangle.Dispose();
      region.Dispose();
    }

    protected override void OnClick(EventArgs e)
    {
      base.OnClick(e);
      this.aniAlpha2 = 200;
      this.animationDirector2.Start();
    }

    protected override void OnCheckedChanged(EventArgs e)
    {
      base.OnCheckedChanged(e);
      this.animationDirector1.Start();
    }

    protected override void OnSizeChanged(EventArgs e)
    {
      base.OnSizeChanged(e);
      if (!this.Checked)
      {
        this.aniSize = 0;
        this.aniLocation = this.Height / 2;
      }
      else
      {
        this.aniSize = this.Height - 10;
        this.aniLocation = 5;
      }
      this.incLocation = this.Height / 24;
      this.incSize = this.Height / 12;
      this.textArea = new Rectangle(this.Height, 0, this.Width - this.Height / 2, this.Height);
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      base.OnMouseEnter(e);
      this.MouseState = MouseState.HOVER;
      this.Invalidate();
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      base.OnMouseLeave(e);
      if (!this.Focused)
        this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    protected override void OnGotFocus(EventArgs e)
    {
      base.OnGotFocus(e);
      this.Invalidate();
    }

    protected override void OnLostFocus(EventArgs e)
    {
      base.OnLostFocus(e);
      this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    protected override void OnTextChanged(EventArgs e)
    {
      base.OnTextChanged(e);
      this.Invalidate();
    }
  }
}
