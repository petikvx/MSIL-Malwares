// Decompiled with JetBrains decompiler
// Type: SimpleVideoCutter.VideoCutterSettings
// Assembly: SimpleVideoCutter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC3F1699-ABA1-43FB-A799-9F64138760E7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f61a916b55390990f502b60b4e78cb70d9da9416954b3cb35908cf3498ac3ead.exe

using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace SimpleVideoCutter
{
  public class VideoCutterSettings
  {
    private const string configFile = "config.json";

    public string DefaultInitialDirectory { get; set; } = "{UserVideos}";

    public string OutputDirectory { get; set; } = "{UserVideos}";

    public string OutputFilePattern { get; set; } = "{FileDate}-{FileNameWithoutExtension}.{Timestamp}{FileExtension}";

    public string FFmpegPath { get; set; } = (string) null;

    public string[] VideoFilesExtensions { get; set; } = new string[8]
    {
      ".mov",
      ".avi",
      ".mp4",
      ".wmv",
      ".rm",
      ".mpg",
      ".mkv",
      ".webm"
    };

    public bool Mute { get; set; } = false;

    public bool ShowPreview { get; set; } = true;

    public bool KeepSelectionAfterCut { get; set; } = false;

    public bool Autostart { get; set; } = true;

    public bool ShowTaskWindow { get; set; } = true;

    public Rectangle MainWindowLocation { get; set; } = Rectangle.Empty;

    public bool MainWindowMaximized { get; set; } = false;

    public bool RestoreToolbarsLayout { get; set; } = true;

    public string ConfigVersion { get; set; } = "0.0.0";

    public string Language { get; set; }

    public PreviewSize PreviewSize { get; set; } = PreviewSize.L;

    public string ConfigFolder { get; set; } = AppDomain.CurrentDomain.BaseDirectory;

    public static VideoCutterSettings Instance { get; } = new VideoCutterSettings()
    {
      ConfigVersion = Utils.GetCurrentRelease()
    };

    protected VideoCutterSettings()
    {
    }

    public string ConfigPath => Path.Combine(Path.Combine(this.ConfigFolder, "config.json"));

    public void LoadSettings()
    {
      if (File.Exists(this.ConfigPath))
      {
        File.ReadAllText(this.ConfigPath);
        try
        {
        }
        catch (Exception ex)
        {
        }
      }
      if (!(new Version(this.ConfigVersion) != new Version(Utils.GetCurrentRelease())))
        return;
      this.RestoreToolbarsLayout = false;
    }

    public void StoreSettings()
    {
      try
      {
        string directoryName = Path.GetDirectoryName(this.ConfigPath);
        if (Directory.Exists(directoryName))
          return;
        Directory.CreateDirectory(directoryName);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Not possible to save settings. Please check whether folder is writable", "Config cannot be saved", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }
  }
}
