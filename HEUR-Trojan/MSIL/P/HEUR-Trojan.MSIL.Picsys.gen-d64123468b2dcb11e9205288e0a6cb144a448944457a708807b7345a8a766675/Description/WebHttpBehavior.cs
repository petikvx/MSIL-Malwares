// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Description.WebHttpBehavior
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.ServiceModel.Administration;
using System.ServiceModel.Channels;
using System.ServiceModel.Dispatcher;
using System.ServiceModel.Web;

namespace System.ServiceModel.Description
{
  [ComVisible(false)]
  public class WebHttpBehavior : IEndpointBehavior, IWmiInstanceProvider
  {
    internal const string GET = "GET";
    internal const string POST = "POST";
    internal const string WildcardAction = "*";
    internal const string WildcardMethod = "*";
    internal static readonly string defaultStreamContentType = "application/octet-stream";
    internal static readonly string defaultCallbackParameterName = "callback";
    private const string AddressPropertyName = "Address";
    private WebMessageBodyStyle defaultBodyStyle;
    private WebMessageFormat defaultOutgoingReplyFormat;
    private WebMessageFormat defaultOutgoingRequestFormat;
    private XmlSerializerOperationBehavior.Reflector reflector;
    private UnwrappedTypesXmlSerializerManager xmlSerializerManager;

    public WebHttpBehavior()
    {
      this.defaultOutgoingRequestFormat = WebMessageFormat.Xml;
      this.defaultOutgoingReplyFormat = WebMessageFormat.Xml;
      this.defaultBodyStyle = WebMessageBodyStyle.Bare;
      this.xmlSerializerManager = new UnwrappedTypesXmlSerializerManager();
    }

    public virtual WebMessageBodyStyle DefaultBodyStyle
    {
      get => this.defaultBodyStyle;
      set => this.defaultBodyStyle = WebMessageBodyStyleHelper.IsDefined(value) ? value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value)));
    }

    public virtual WebMessageFormat DefaultOutgoingRequestFormat
    {
      get => this.defaultOutgoingRequestFormat;
      set => this.defaultOutgoingRequestFormat = WebMessageFormatHelper.IsDefined(value) ? value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value)));
    }

    public virtual WebMessageFormat DefaultOutgoingResponseFormat
    {
      get => this.defaultOutgoingReplyFormat;
      set => this.defaultOutgoingReplyFormat = WebMessageFormatHelper.IsDefined(value) ? value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value)));
    }

    public virtual bool HelpEnabled { get; set; }

    public virtual bool AutomaticFormatSelectionEnabled { get; set; }

    public virtual bool FaultExceptionEnabled { get; set; }

    internal Uri HelpUri { get; set; }

    protected internal string JavascriptCallbackParameterName { get; set; }

    public virtual void AddBindingParameters(
      ServiceEndpoint endpoint,
      BindingParameterCollection bindingParameters)
    {
    }

    public virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)
    {
      if (endpoint == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (endpoint));
      if (clientRuntime == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (clientRuntime));
      WebMessageEncodingBindingElement encodingBindingElement = endpoint.Binding.CreateBindingElements().Find<WebMessageEncodingBindingElement>();
      if (encodingBindingElement != null && encodingBindingElement.CrossDomainScriptAccessEnabled)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.CrossDomainJavascriptNotsupported));
      this.reflector = new XmlSerializerOperationBehavior.Reflector(endpoint.Contract.Namespace, (System.Type) null);
      foreach (OperationDescription operation1 in (Collection<OperationDescription>) endpoint.Contract.Operations)
      {
        if (clientRuntime.Operations.Contains(operation1.Name))
        {
          ClientOperation operation2 = clientRuntime.Operations[operation1.Name];
          IClientMessageFormatter requestClientFormatter = this.GetRequestClientFormatter(operation1, endpoint);
          IClientMessageFormatter replyClientFormatter = this.GetReplyClientFormatter(operation1, endpoint);
          operation2.Formatter = (IClientMessageFormatter) new CompositeClientFormatter(requestClientFormatter, replyClientFormatter);
          operation2.SerializeRequest = true;
          operation2.DeserializeReply = operation1.Messages.Count > 1 && !WebHttpBehavior.IsUntypedMessage(operation1.Messages[1]);
        }
      }
      this.AddClientErrorInspector(endpoint, clientRuntime);
    }

    public virtual void ApplyDispatchBehavior(
      ServiceEndpoint endpoint,
      EndpointDispatcher endpointDispatcher)
    {
      if (endpoint == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (endpoint));
      if (endpointDispatcher == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (endpointDispatcher));
      WebMessageEncodingBindingElement encodingBindingElement = endpoint.Binding.CreateBindingElements().Find<WebMessageEncodingBindingElement>();
      if (encodingBindingElement != null && encodingBindingElement.CrossDomainScriptAccessEnabled)
      {
        if (endpoint.Binding.GetProperty<ISecurityCapabilities>(new BindingParameterCollection()).SupportsClientAuthentication)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.CrossDomainJavascriptAuthNotSupported));
        this.JavascriptCallbackParameterName = !endpoint.Contract.Behaviors.Contains(typeof (JavascriptCallbackBehaviorAttribute)) ? WebHttpBehavior.defaultCallbackParameterName : (endpoint.Contract.Behaviors[typeof (JavascriptCallbackBehaviorAttribute)] as JavascriptCallbackBehaviorAttribute).UrlParameterName;
        endpointDispatcher.DispatchRuntime.MessageInspectors.Add((IDispatchMessageInspector) new JavascriptCallbackMessageInspector(this.JavascriptCallbackParameterName));
      }
      if (this.HelpEnabled)
        this.HelpUri = new UriTemplate("help").BindByPosition(endpoint.ListenUri);
      this.reflector = new XmlSerializerOperationBehavior.Reflector(endpoint.Contract.Namespace, (System.Type) null);
      endpointDispatcher.AddressFilter = (MessageFilter) new PrefixEndpointAddressMessageFilter(endpoint.Address);
      endpointDispatcher.ContractFilter = (MessageFilter) new MatchAllMessageFilter();
      endpointDispatcher.DispatchRuntime.OperationSelector = (IDispatchOperationSelector) this.GetOperationSelector(endpoint);
      string str = (string) null;
      foreach (OperationDescription operation in (Collection<OperationDescription>) endpoint.Contract.Operations)
      {
        if (operation.Messages[0].Direction == MessageDirection.Input && operation.Messages[0].Action == "*")
        {
          str = operation.Name;
          break;
        }
      }
      if (str != null)
        endpointDispatcher.DispatchRuntime.Operations.Add(endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation);
      FormatSelectingMessageInspector messageInspector = (FormatSelectingMessageInspector) null;
      string contentType1;
      string contentType2;
      if (encodingBindingElement != null)
      {
        XmlFormatMapping xmlFormatMapping = new XmlFormatMapping(encodingBindingElement.WriteEncoding, encodingBindingElement.ContentTypeMapper);
        JsonFormatMapping jsonFormatMapping = new JsonFormatMapping(encodingBindingElement.WriteEncoding, encodingBindingElement.ContentTypeMapper);
        contentType1 = xmlFormatMapping.DefaultContentType.ToString();
        contentType2 = jsonFormatMapping.DefaultContentType.ToString();
        if (this.AutomaticFormatSelectionEnabled)
        {
          messageInspector = new FormatSelectingMessageInspector(this, new List<MultiplexingFormatMapping>()
          {
            (MultiplexingFormatMapping) xmlFormatMapping,
            (MultiplexingFormatMapping) jsonFormatMapping
          });
          endpointDispatcher.DispatchRuntime.MessageInspectors.Add((IDispatchMessageInspector) messageInspector);
        }
      }
      else
      {
        contentType1 = TextMessageEncoderFactory.GetContentType(XmlFormatMapping.defaultMediaType, TextEncoderDefaults.Encoding);
        contentType2 = JsonMessageEncoderFactory.GetContentType((WebMessageEncodingBindingElement) null);
      }
      endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation = new DispatchOperation(endpointDispatcher.DispatchRuntime, "*", "*", "*");
      endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation.DeserializeRequest = false;
      endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation.SerializeReply = false;
      endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation.Invoker = (IOperationInvoker) new HttpUnhandledOperationInvoker()
      {
        HelpUri = this.HelpUri
      };
      foreach (OperationDescription operation in (Collection<OperationDescription>) endpoint.Contract.Operations)
      {
        DispatchOperation dispatchOperation = (DispatchOperation) null;
        if (endpointDispatcher.DispatchRuntime.Operations.Contains(operation.Name))
          dispatchOperation = endpointDispatcher.DispatchRuntime.Operations[operation.Name];
        else if (endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation.Name == operation.Name)
          dispatchOperation = endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation;
        if (dispatchOperation != null)
        {
          IDispatchMessageFormatter dispatchFormatter1 = this.GetRequestDispatchFormatter(operation, endpoint);
          IDispatchMessageFormatter dispatchFormatter2 = this.GetReplyDispatchFormatter(operation, endpoint);
          if (dispatchFormatter2 is MultiplexingDispatchMessageFormatter formatter)
          {
            formatter.DefaultContentTypes.Add(WebMessageFormat.Xml, contentType1);
            formatter.DefaultContentTypes.Add(WebMessageFormat.Json, contentType2);
            messageInspector?.RegisterOperation(operation.Name, formatter);
          }
          dispatchOperation.Formatter = (IDispatchMessageFormatter) new CompositeDispatchFormatter(dispatchFormatter1, dispatchFormatter2);
          dispatchOperation.FaultFormatter = (IDispatchFaultFormatter) new WebFaultFormatter(dispatchOperation.FaultFormatter);
          dispatchOperation.DeserializeRequest = dispatchFormatter1 != null;
          dispatchOperation.SerializeReply = operation.Messages.Count > 1 && dispatchFormatter2 != null;
        }
      }
      if (this.HelpEnabled)
      {
        HelpPage helpPage = new HelpPage(this, endpoint.Contract);
        DispatchOperation dispatchOperation = new DispatchOperation(endpointDispatcher.DispatchRuntime, "HelpPageInvoke", (string) null, (string) null)
        {
          DeserializeRequest = false,
          SerializeReply = false,
          Invoker = (IOperationInvoker) new HelpOperationInvoker(helpPage, endpointDispatcher.DispatchRuntime.UnhandledDispatchOperation.Invoker)
        };
        endpointDispatcher.DispatchRuntime.Operations.Add(dispatchOperation);
      }
      this.AddServerErrorHandlers(endpoint, endpointDispatcher);
    }

    internal virtual Dictionary<string, string> GetWmiProperties() => new Dictionary<string, string>()
    {
      {
        "DefaultBodyStyle",
        this.DefaultBodyStyle.ToString()
      },
      {
        "DefaultOutgoingRequestFormat",
        this.DefaultOutgoingRequestFormat.ToString()
      },
      {
        "DefaultOutgoingResponseFormat",
        this.DefaultOutgoingResponseFormat.ToString()
      }
    };

    internal virtual string GetWmiTypeName() => nameof (WebHttpBehavior);

    void IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance)
    {
      if (wmiInstance == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument(nameof (wmiInstance));
      Dictionary<string, string> wmiProperties = this.GetWmiProperties();
      foreach (string key in wmiProperties.Keys)
        wmiInstance.SetProperty(key, (object) wmiProperties[key]);
    }

    string IWmiInstanceProvider.GetInstanceType() => this.GetWmiTypeName();

    public virtual void Validate(ServiceEndpoint endpoint)
    {
      if (endpoint == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (endpoint));
      this.ValidateNoMessageHeadersPresent(endpoint);
      this.ValidateBinding(endpoint);
      this.ValidateContract(endpoint);
    }

    private void ValidateNoMessageHeadersPresent(ServiceEndpoint endpoint)
    {
      if (endpoint == null || endpoint.Address == (EndpointAddress) null)
        return;
      EndpointAddress address = endpoint.Address;
      if (address.Headers.Count > 0)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebHttpServiceEndpointCannotHaveMessageHeaders, (object) address)));
      }
    }

    protected virtual void ValidateBinding(ServiceEndpoint endpoint) => WebHttpBehavior.ValidateIsWebHttpBinding(endpoint, this.GetType().ToString());

    internal static string GetWebMethod(OperationDescription od)
    {
      WebGetAttribute wga = od.Behaviors.Find<WebGetAttribute>();
      WebInvokeAttribute wia = od.Behaviors.Find<WebInvokeAttribute>();
      WebHttpBehavior.EnsureOk(wga, wia, od);
      if (wga != null)
        return "GET";
      return wia != null ? wia.Method ?? "POST" : "POST";
    }

    internal static string GetWebUriTemplate(OperationDescription od)
    {
      WebGetAttribute wga = od.Behaviors.Find<WebGetAttribute>();
      WebInvokeAttribute wia = od.Behaviors.Find<WebInvokeAttribute>();
      WebHttpBehavior.EnsureOk(wga, wia, od);
      if (wga != null)
        return wga.UriTemplate;
      return wia?.UriTemplate;
    }

    internal static string GetDescription(OperationDescription od)
    {
      object[] objArray = (object[]) null;
      if (od.SyncMethod != (MethodInfo) null)
        objArray = od.SyncMethod.GetCustomAttributes(typeof (DescriptionAttribute), true);
      else if (od.BeginMethod != (MethodInfo) null)
        objArray = od.BeginMethod.GetCustomAttributes(typeof (DescriptionAttribute), true);
      else if (od.TaskMethod != (MethodInfo) null)
        objArray = od.TaskMethod.GetCustomAttributes(typeof (DescriptionAttribute), true);
      return objArray != null && objArray.Length != 0 ? ((DescriptionAttribute) objArray[0]).Description : string.Empty;
    }

    internal static bool IsTypedMessage(MessageDescription message) => message != null && message.MessageType != (System.Type) null;

    internal static bool IsUntypedMessage(MessageDescription message)
    {
      if (message == null)
        return false;
      if (message.Body.ReturnValue != null && message.Body.Parts.Count == 0 && message.Body.ReturnValue.Type == typeof (Message))
        return true;
      return message.Body.ReturnValue == null && message.Body.Parts.Count == 1 && message.Body.Parts[0].Type == typeof (Message);
    }

    internal static MessageDescription MakeDummyMessageDescription(
      MessageDirection direction)
    {
      return new MessageDescription("urn:dummyAction", direction);
    }

    internal static bool SupportsJsonFormat(OperationDescription od) => od.Behaviors.Find<DataContractSerializerOperationBehavior>() != null;

    internal static void ValidateIsWebHttpBinding(
      ServiceEndpoint serviceEndpoint,
      string behaviorName)
    {
      Binding binding = serviceEndpoint.Binding;
      if (binding.Scheme != "http" && binding.Scheme != "https")
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WCFBindingCannotBeUsedWithUriOperationSelectorBehaviorBadScheme, (object) serviceEndpoint.Contract.Name, (object) behaviorName)));
      }
      if (binding.MessageVersion != MessageVersion.None)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WCFBindingCannotBeUsedWithUriOperationSelectorBehaviorBadMessageVersion, (object) serviceEndpoint.Address.Uri.AbsoluteUri, (object) behaviorName)));
      }
      TransportBindingElement transportBindingElement = binding.CreateBindingElements().Find<TransportBindingElement>();
      if (transportBindingElement != null && !transportBindingElement.ManualAddressing)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.ManualAddressingCannotBeFalseWithTransportBindingElement, (object) serviceEndpoint.Address.Uri.AbsoluteUri, (object) behaviorName, (object) transportBindingElement.GetType().Name)));
      }
    }

    internal WebMessageBodyStyle GetBodyStyle(OperationDescription od)
    {
      WebGetAttribute wga = od.Behaviors.Find<WebGetAttribute>();
      WebInvokeAttribute wia = od.Behaviors.Find<WebInvokeAttribute>();
      WebHttpBehavior.EnsureOk(wga, wia, od);
      if (wga != null)
        return wga.GetBodyStyleOrDefault(this.DefaultBodyStyle);
      return wia != null ? wia.GetBodyStyleOrDefault(this.DefaultBodyStyle) : this.DefaultBodyStyle;
    }

    internal IClientMessageFormatter GetDefaultClientFormatter(
      OperationDescription od,
      bool useJson,
      bool isWrapped)
    {
      DataContractSerializerOperationBehavior dcsob = od.Behaviors.Find<DataContractSerializerOperationBehavior>();
      if (useJson)
      {
        if (dcsob == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.JsonFormatRequiresDataContract, (object) od.Name, (object) od.DeclaringContract.Name, (object) od.DeclaringContract.Namespace)));
        }
        return (IClientMessageFormatter) this.CreateDataContractJsonSerializerOperationFormatter(od, dcsob, isWrapped);
      }
      ClientOperation clientOperation = new ClientOperation(new ClientRuntime("name", ""), "dummyClient", "urn:dummy");
      clientOperation.Formatter = (IClientMessageFormatter) null;
      if (dcsob != null)
      {
        ((IOperationBehavior) dcsob).ApplyClientBehavior(od, clientOperation);
        return clientOperation.Formatter;
      }
      XmlSerializerOperationBehavior operationBehavior = od.Behaviors.Find<XmlSerializerOperationBehavior>();
      if (operationBehavior == null)
        return (IClientMessageFormatter) null;
      ((IOperationBehavior) new XmlSerializerOperationBehavior(od, operationBehavior.XmlSerializerFormatAttribute, this.reflector)).ApplyClientBehavior(od, clientOperation);
      return clientOperation.Formatter;
    }

    protected virtual void AddClientErrorInspector(
      ServiceEndpoint endpoint,
      ClientRuntime clientRuntime)
    {
      if (!this.FaultExceptionEnabled)
        clientRuntime.MessageInspectors.Add((IClientMessageInspector) new WebFaultClientMessageInspector());
      else
        clientRuntime.MessageVersionNoneFaultsEnabled = true;
    }

    protected virtual void AddServerErrorHandlers(
      ServiceEndpoint endpoint,
      EndpointDispatcher endpointDispatcher)
    {
      if (this.FaultExceptionEnabled)
        return;
      WebErrorHandler webErrorHandler = new WebErrorHandler(this, endpoint.Contract, endpointDispatcher.DispatchRuntime.ChannelDispatcher.IncludeExceptionDetailInFaults);
      endpointDispatcher.DispatchRuntime.ChannelDispatcher.ErrorHandlers.Add((IErrorHandler) webErrorHandler);
    }

    protected virtual WebHttpDispatchOperationSelector GetOperationSelector(
      ServiceEndpoint endpoint)
    {
      return new WebHttpDispatchOperationSelector(endpoint);
    }

    protected virtual QueryStringConverter GetQueryStringConverter(
      OperationDescription operationDescription)
    {
      return new QueryStringConverter();
    }

    protected virtual IClientMessageFormatter GetReplyClientFormatter(
      OperationDescription operationDescription,
      ServiceEndpoint endpoint)
    {
      if (operationDescription.Messages.Count < 2)
        return (IClientMessageFormatter) null;
      this.ValidateBodyParameters(operationDescription, false);
      if (WebHttpBehavior.TryGetStreamParameterType(operationDescription.Messages[1], operationDescription, false, out System.Type _))
        return (IClientMessageFormatter) new HttpStreamFormatter(operationDescription);
      if (WebHttpBehavior.IsUntypedMessage(operationDescription.Messages[1]))
        return (IClientMessageFormatter) new WebHttpBehavior.MessagePassthroughFormatter();
      WebMessageBodyStyle bodyStyle = this.GetBodyStyle(operationDescription);
      System.Type parameterType;
      if (this.UseBareReplyFormatter(bodyStyle, operationDescription, this.GetResponseFormat(operationDescription), out parameterType))
        return SingleBodyParameterMessageFormatter.CreateXmlAndJsonClientFormatter(operationDescription, parameterType, false, this.xmlSerializerManager);
      MessageDescription message = operationDescription.Messages[0];
      operationDescription.Messages[0] = WebHttpBehavior.MakeDummyMessageDescription(MessageDirection.Input);
      IClientMessageFormatter jsonClientFormatter = this.GetDefaultXmlAndJsonClientFormatter(operationDescription, !WebHttpBehavior.IsBareResponse(bodyStyle));
      operationDescription.Messages[0] = message;
      return jsonClientFormatter;
    }

    internal virtual bool UseBareReplyFormatter(
      WebMessageBodyStyle style,
      OperationDescription operationDescription,
      WebMessageFormat responseFormat,
      out System.Type parameterType)
    {
      parameterType = (System.Type) null;
      return WebHttpBehavior.IsBareResponse(style) && WebHttpBehavior.TryGetNonMessageParameterType(operationDescription.Messages[1], operationDescription, false, out parameterType);
    }

    protected virtual IDispatchMessageFormatter GetReplyDispatchFormatter(
      OperationDescription operationDescription,
      ServiceEndpoint endpoint)
    {
      if (operationDescription.Messages.Count < 2)
        return (IDispatchMessageFormatter) null;
      this.ValidateBodyParameters(operationDescription, false);
      WebMessageFormat responseFormat = this.GetResponseFormat(operationDescription);
      bool flag = responseFormat == WebMessageFormat.Json || WebHttpBehavior.SupportsJsonFormat(operationDescription);
      IDispatchMessageFormatter dispatchFormatter;
      if (WebHttpBehavior.TryGetStreamParameterType(operationDescription.Messages[1], operationDescription, false, out System.Type _))
        dispatchFormatter = (IDispatchMessageFormatter) new ContentTypeSettingDispatchMessageFormatter(WebHttpBehavior.defaultStreamContentType, (IDispatchMessageFormatter) new HttpStreamFormatter(operationDescription));
      else if (WebHttpBehavior.IsUntypedMessage(operationDescription.Messages[1]))
      {
        dispatchFormatter = (IDispatchMessageFormatter) new WebHttpBehavior.MessagePassthroughFormatter();
      }
      else
      {
        WebMessageBodyStyle bodyStyle = this.GetBodyStyle(operationDescription);
        Dictionary<WebMessageFormat, IDispatchMessageFormatter> formatters = new Dictionary<WebMessageFormat, IDispatchMessageFormatter>();
        System.Type parameterType;
        if (this.UseBareReplyFormatter(bodyStyle, operationDescription, responseFormat, out parameterType))
        {
          formatters.Add(WebMessageFormat.Xml, SingleBodyParameterMessageFormatter.CreateDispatchFormatter(operationDescription, parameterType, false, false, this.xmlSerializerManager, (string) null));
          if (flag)
            formatters.Add(WebMessageFormat.Json, SingleBodyParameterMessageFormatter.CreateDispatchFormatter(operationDescription, parameterType, false, true, this.xmlSerializerManager, this.JavascriptCallbackParameterName));
        }
        else
        {
          MessageDescription message = operationDescription.Messages[0];
          operationDescription.Messages[0] = WebHttpBehavior.MakeDummyMessageDescription(MessageDirection.Input);
          formatters.Add(WebMessageFormat.Xml, this.GetDefaultDispatchFormatter(operationDescription, false, !WebHttpBehavior.IsBareResponse(bodyStyle)));
          if (flag)
            formatters.Add(WebMessageFormat.Json, this.GetDefaultDispatchFormatter(operationDescription, true, !WebHttpBehavior.IsBareResponse(bodyStyle)));
          operationDescription.Messages[0] = message;
        }
        dispatchFormatter = (IDispatchMessageFormatter) new MultiplexingDispatchMessageFormatter(formatters, responseFormat);
      }
      return dispatchFormatter;
    }

    protected virtual IClientMessageFormatter GetRequestClientFormatter(
      OperationDescription operationDescription,
      ServiceEndpoint endpoint)
    {
      bool useJson = this.GetRequestFormat(operationDescription) == WebMessageFormat.Json;
      WebMessageEncodingBindingElement webEncoding = useJson ? endpoint.Binding.CreateBindingElements().Find<WebMessageEncodingBindingElement>() : (WebMessageEncodingBindingElement) null;
      IClientMessageFormatter innerFormatter = (IClientMessageFormatter) null;
      if (endpoint.Address == (EndpointAddress) null)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.ServiceEndpointMustHaveNonNullAddress, (object) typeof (ServiceEndpoint), (object) typeof (ChannelFactory), (object) typeof (WebHttpEndpoint), (object) "Address", (object) typeof (ServiceEndpoint))));
      }
      UriTemplateClientFormatter throwAway = new UriTemplateClientFormatter(operationDescription, (IClientMessageFormatter) null, this.GetQueryStringConverter(operationDescription), endpoint.Address.Uri, false, endpoint.Contract.Name);
      int numUriVariables = throwAway.pathMapping.Count + throwAway.queryMapping.Count;
      bool isStream = false;
      WebHttpBehavior.HideReplyMessage(operationDescription, (WebHttpBehavior.Effect) (() =>
      {
        WebMessageBodyStyle style = this.GetBodyStyle(operationDescription);
        bool isUntypedWhenUriParamsNotConsidered = false;
        WebHttpBehavior.Effect doBodyFormatter = (WebHttpBehavior.Effect) (() =>
        {
          if (numUriVariables != 0)
            WebHttpBehavior.EnsureNotUntypedMessageNorMessageContract(operationDescription);
          this.ValidateBodyParameters(operationDescription, true);
          System.Type type;
          IClientMessageFormatter messageFormatter;
          if (WebHttpBehavior.TryGetStreamParameterType(operationDescription.Messages[0], operationDescription, true, out type))
          {
            isStream = true;
            messageFormatter = (IClientMessageFormatter) new HttpStreamFormatter(operationDescription);
          }
          else
            messageFormatter = !this.UseBareRequestFormatter(style, operationDescription, out type) ? this.GetDefaultClientFormatter(operationDescription, useJson, !WebHttpBehavior.IsBareRequest(style)) : SingleBodyParameterMessageFormatter.CreateClientFormatter(operationDescription, type, true, useJson, this.xmlSerializerManager);
          innerFormatter = messageFormatter;
          isUntypedWhenUriParamsNotConsidered = WebHttpBehavior.IsUntypedMessage(operationDescription.Messages[0]);
        });
        if (numUriVariables == 0)
        {
          if (WebHttpBehavior.IsUntypedMessage(operationDescription.Messages[0]))
          {
            this.ValidateBodyParameters(operationDescription, true);
            innerFormatter = (IClientMessageFormatter) new WebHttpBehavior.MessagePassthroughFormatter();
            isUntypedWhenUriParamsNotConsidered = true;
          }
          else if (WebHttpBehavior.IsTypedMessage(operationDescription.Messages[0]))
          {
            this.ValidateBodyParameters(operationDescription, true);
            innerFormatter = this.GetDefaultClientFormatter(operationDescription, useJson, !WebHttpBehavior.IsBareRequest(style));
          }
          else
            doBodyFormatter();
        }
        else
          WebHttpBehavior.HideRequestUriTemplateParameters(operationDescription, throwAway, (WebHttpBehavior.Effect) (() => WebHttpBehavior.CloneMessageDescriptionsBeforeActing(operationDescription, (WebHttpBehavior.Effect) (() => doBodyFormatter()))));
        innerFormatter = (IClientMessageFormatter) new UriTemplateClientFormatter(operationDescription, innerFormatter, this.GetQueryStringConverter(operationDescription), endpoint.Address.Uri, isUntypedWhenUriParamsNotConsidered, endpoint.Contract.Name);
      }));
      string defaultContentType = this.GetDefaultContentType(isStream, useJson, webEncoding);
      if (!string.IsNullOrEmpty(defaultContentType))
        innerFormatter = (IClientMessageFormatter) new ContentTypeSettingClientMessageFormatter(defaultContentType, innerFormatter);
      return innerFormatter;
    }

    protected virtual IDispatchMessageFormatter GetRequestDispatchFormatter(
      OperationDescription operationDescription,
      ServiceEndpoint endpoint)
    {
      IDispatchMessageFormatter result = (IDispatchMessageFormatter) null;
      UriTemplateDispatchFormatter throwAway = new UriTemplateDispatchFormatter(operationDescription, (IDispatchMessageFormatter) null, this.GetQueryStringConverter(operationDescription), endpoint.Contract.Name, endpoint.Address.Uri);
      int numUriVariables = throwAway.pathMapping.Count + throwAway.queryMapping.Count;
      WebHttpBehavior.HideReplyMessage(operationDescription, (WebHttpBehavior.Effect) (() =>
      {
        WebMessageBodyStyle style = this.GetBodyStyle(operationDescription);
        WebHttpBehavior.Effect doBodyFormatter = (WebHttpBehavior.Effect) (() =>
        {
          if (numUriVariables != 0)
            WebHttpBehavior.EnsureNotUntypedMessageNorMessageContract(operationDescription);
          this.ValidateBodyParameters(operationDescription, true);
          if (WebHttpBehavior.TryGetStreamParameterType(operationDescription.Messages[0], operationDescription, true, out System.Type _))
          {
            result = (IDispatchMessageFormatter) new HttpStreamFormatter(operationDescription);
          }
          else
          {
            System.Type parameterType;
            if (this.UseBareRequestFormatter(style, operationDescription, out parameterType))
              result = SingleBodyParameterMessageFormatter.CreateXmlAndJsonDispatchFormatter(operationDescription, parameterType, true, this.xmlSerializerManager, this.JavascriptCallbackParameterName);
            else
              result = this.GetDefaultXmlAndJsonDispatchFormatter(operationDescription, !WebHttpBehavior.IsBareRequest(style));
          }
        });
        if (numUriVariables == 0)
        {
          if (WebHttpBehavior.IsUntypedMessage(operationDescription.Messages[0]))
          {
            this.ValidateBodyParameters(operationDescription, true);
            result = (IDispatchMessageFormatter) new WebHttpBehavior.MessagePassthroughFormatter();
          }
          else if (WebHttpBehavior.IsTypedMessage(operationDescription.Messages[0]))
          {
            this.ValidateBodyParameters(operationDescription, true);
            result = this.GetDefaultXmlAndJsonDispatchFormatter(operationDescription, !WebHttpBehavior.IsBareRequest(style));
          }
          else
            doBodyFormatter();
        }
        else
          WebHttpBehavior.HideRequestUriTemplateParameters(operationDescription, throwAway, (WebHttpBehavior.Effect) (() => WebHttpBehavior.CloneMessageDescriptionsBeforeActing(operationDescription, (WebHttpBehavior.Effect) (() => doBodyFormatter()))));
        result = (IDispatchMessageFormatter) new UriTemplateDispatchFormatter(operationDescription, result, this.GetQueryStringConverter(operationDescription), endpoint.Contract.Name, endpoint.Address.Uri);
      }));
      return result;
    }

    private static void CloneMessageDescriptionsBeforeActing(
      OperationDescription operationDescription,
      WebHttpBehavior.Effect effect)
    {
      MessageDescription message = operationDescription.Messages[0];
      bool flag = operationDescription.Messages.Count > 1;
      MessageDescription messageDescription = flag ? operationDescription.Messages[1] : (MessageDescription) null;
      operationDescription.Messages[0] = message.Clone();
      if (flag)
        operationDescription.Messages[1] = messageDescription.Clone();
      effect();
      operationDescription.Messages[0] = message;
      if (!flag)
        return;
      operationDescription.Messages[1] = messageDescription;
    }

    internal virtual bool UseBareRequestFormatter(
      WebMessageBodyStyle style,
      OperationDescription operationDescription,
      out System.Type parameterType)
    {
      parameterType = (System.Type) null;
      return WebHttpBehavior.IsBareRequest(style) && WebHttpBehavior.TryGetNonMessageParameterType(operationDescription.Messages[0], operationDescription, true, out parameterType);
    }

    private static Collection<MessagePartDescription> CloneParts(
      MessageDescription md)
    {
      MessagePartDescriptionCollection parts = md.Body.Parts;
      Collection<MessagePartDescription> collection = new Collection<MessagePartDescription>();
      for (int index = 0; index < parts.Count; ++index)
      {
        MessagePartDescription messagePartDescription = parts[index].Clone();
        collection.Add(messagePartDescription);
      }
      return collection;
    }

    private static void EnsureNotUntypedMessageNorMessageContract(
      OperationDescription operationDescription)
    {
      bool flag = false;
      if (WebHttpBehavior.GetWebMethod(operationDescription) == "GET" && WebHttpBehavior.GetWebUriTemplate(operationDescription) == null)
        flag = true;
      if (WebHttpBehavior.IsTypedMessage(operationDescription.Messages[0]))
      {
        if (flag)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.GETCannotHaveMCParameter, (object) operationDescription.Name, (object) operationDescription.DeclaringContract.Name, (object) operationDescription.Messages[0].MessageType.Name)));
        }
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.UTParamsDoNotComposeWithMessageContract, (object) operationDescription.Name, (object) operationDescription.DeclaringContract.Name)));
      }
      if (WebHttpBehavior.IsUntypedMessage(operationDescription.Messages[0]))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.UTParamsDoNotComposeWithMessage, (object) operationDescription.Name, (object) operationDescription.DeclaringContract.Name)));
      }
    }

    private static void EnsureOk(
      WebGetAttribute wga,
      WebInvokeAttribute wia,
      OperationDescription od)
    {
      if (wga != null && wia != null)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.MultipleWebAttributes, (object) od.Name, (object) od.DeclaringContract.Name)));
      }
    }

    private static void HideReplyMessage(
      OperationDescription operationDescription,
      WebHttpBehavior.Effect effect)
    {
      MessageDescription messageDescription = (MessageDescription) null;
      if (operationDescription.Messages.Count > 1)
      {
        messageDescription = operationDescription.Messages[1];
        operationDescription.Messages[1] = WebHttpBehavior.MakeDummyMessageDescription(MessageDirection.Output);
      }
      effect();
      if (operationDescription.Messages.Count <= 1)
        return;
      operationDescription.Messages[1] = messageDescription;
    }

    private static void HideRequestUriTemplateParameters(
      OperationDescription operationDescription,
      UriTemplateClientFormatter throwAway,
      WebHttpBehavior.Effect effect)
    {
      WebHttpBehavior.HideRequestUriTemplateParameters(operationDescription, throwAway.pathMapping, throwAway.queryMapping, effect);
    }

    internal static void HideRequestUriTemplateParameters(
      OperationDescription operationDescription,
      UriTemplateDispatchFormatter throwAway,
      WebHttpBehavior.Effect effect)
    {
      WebHttpBehavior.HideRequestUriTemplateParameters(operationDescription, throwAway.pathMapping, throwAway.queryMapping, effect);
    }

    private static void HideRequestUriTemplateParameters(
      OperationDescription operationDescription,
      Dictionary<int, string> pathMapping,
      Dictionary<int, KeyValuePair<string, System.Type>> queryMapping,
      WebHttpBehavior.Effect effect)
    {
      Collection<MessagePartDescription> collection1 = WebHttpBehavior.CloneParts(operationDescription.Messages[0]);
      Collection<MessagePartDescription> collection2 = WebHttpBehavior.CloneParts(operationDescription.Messages[0]);
      operationDescription.Messages[0].Body.Parts.Clear();
      int num = 0;
      for (int index = 0; index < collection2.Count; ++index)
      {
        if (!pathMapping.ContainsKey(index) && !queryMapping.ContainsKey(index))
        {
          operationDescription.Messages[0].Body.Parts.Add(collection2[index]);
          collection2[index].Index = num++;
        }
      }
      effect();
      operationDescription.Messages[0].Body.Parts.Clear();
      for (int index = 0; index < collection1.Count; ++index)
        operationDescription.Messages[0].Body.Parts.Add(collection1[index]);
    }

    private static bool IsBareRequest(WebMessageBodyStyle style) => style == WebMessageBodyStyle.Bare || style == WebMessageBodyStyle.WrappedResponse;

    private static bool IsBareResponse(WebMessageBodyStyle style) => style == WebMessageBodyStyle.Bare || style == WebMessageBodyStyle.WrappedRequest;

    internal static bool TryGetNonMessageParameterType(
      MessageDescription message,
      OperationDescription declaringOperation,
      bool isRequest,
      out System.Type type)
    {
      type = (System.Type) null;
      if (message == null)
        return true;
      if (WebHttpBehavior.IsTypedMessage(message) || WebHttpBehavior.IsUntypedMessage(message))
        return false;
      if (isRequest)
      {
        if (message.Body.Parts.Count > 1)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.AtMostOneRequestBodyParameterAllowedForUnwrappedMessages, (object) declaringOperation.Name, (object) declaringOperation.DeclaringContract.Name)));
        }
        if (message.Body.Parts.Count == 1 && message.Body.Parts[0].Type != typeof (void))
          type = message.Body.Parts[0].Type;
        return true;
      }
      if (message.Body.Parts.Count > 0)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.OnlyReturnValueBodyParameterAllowedForUnwrappedMessages, (object) declaringOperation.Name, (object) declaringOperation.DeclaringContract.Name)));
      }
      if (message.Body.ReturnValue != null && message.Body.ReturnValue.Type != typeof (void))
        type = message.Body.ReturnValue.Type;
      return true;
    }

    private static bool TryGetStreamParameterType(
      MessageDescription message,
      OperationDescription declaringOperation,
      bool isRequest,
      out System.Type type)
    {
      type = (System.Type) null;
      if (message == null || WebHttpBehavior.IsTypedMessage(message) || WebHttpBehavior.IsUntypedMessage(message))
        return false;
      if (isRequest)
      {
        bool streamParameterType = false;
        for (int index = 0; index < message.Body.Parts.Count; ++index)
        {
          if (typeof (Stream) == message.Body.Parts[index].Type)
          {
            type = message.Body.Parts[index].Type;
            streamParameterType = true;
            break;
          }
        }
        if (streamParameterType && message.Body.Parts.Count > 1)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentException(SR2.GetString(SR2.AtMostOneRequestBodyParameterAllowedForStream, (object) declaringOperation.Name, (object) declaringOperation.DeclaringContract.Name)));
        }
        return streamParameterType;
      }
      for (int index = 0; index < message.Body.Parts.Count; ++index)
      {
        if (typeof (Stream) == message.Body.Parts[index].Type)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentException(SR2.GetString(SR2.NoOutOrRefStreamParametersAllowed, (object) message.Body.Parts[index].Name, (object) declaringOperation.Name, (object) declaringOperation.DeclaringContract.Name)));
        }
      }
      if (message.Body.ReturnValue == null || !(typeof (Stream) == message.Body.ReturnValue.Type))
        return false;
      if (message.Body.Parts.Count > 0)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentException(SR2.GetString(SR2.NoOutOrRefParametersAllowedWithStreamResult, (object) declaringOperation.Name, (object) declaringOperation.DeclaringContract.Name)));
      }
      type = message.Body.ReturnValue.Type;
      return true;
    }

    private static void ValidateAtMostOneStreamParameter(
      OperationDescription operation,
      bool request)
    {
      System.Type type;
      if (request)
      {
        WebHttpBehavior.TryGetStreamParameterType(operation.Messages[0], operation, true, out type);
      }
      else
      {
        if (operation.Messages.Count <= 1)
          return;
        WebHttpBehavior.TryGetStreamParameterType(operation.Messages[1], operation, false, out type);
      }
    }

    private string GetDefaultContentType(
      bool isStream,
      bool useJson,
      WebMessageEncodingBindingElement webEncoding)
    {
      if (isStream)
        return WebHttpBehavior.defaultStreamContentType;
      return useJson ? JsonMessageEncoderFactory.GetContentType(webEncoding) : (string) null;
    }

    private IDispatchMessageFormatter GetDefaultDispatchFormatter(
      OperationDescription od,
      bool useJson,
      bool isWrapped)
    {
      DataContractSerializerOperationBehavior dcsob = od.Behaviors.Find<DataContractSerializerOperationBehavior>();
      if (useJson)
      {
        if (dcsob == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.JsonFormatRequiresDataContract, (object) od.Name, (object) od.DeclaringContract.Name, (object) od.DeclaringContract.Namespace)));
        }
        return (IDispatchMessageFormatter) this.CreateDataContractJsonSerializerOperationFormatter(od, dcsob, isWrapped);
      }
      DispatchOperation dispatchOperation = new DispatchOperation(new EndpointDispatcher(new EndpointAddress("http://localhost/"), "name", "").DispatchRuntime, "dummyDispatch", "urn:dummy");
      dispatchOperation.Formatter = (IDispatchMessageFormatter) null;
      if (dcsob != null)
      {
        ((IOperationBehavior) dcsob).ApplyDispatchBehavior(od, dispatchOperation);
        return dispatchOperation.Formatter;
      }
      XmlSerializerOperationBehavior operationBehavior = od.Behaviors.Find<XmlSerializerOperationBehavior>();
      if (operationBehavior == null)
        return (IDispatchMessageFormatter) null;
      ((IOperationBehavior) new XmlSerializerOperationBehavior(od, operationBehavior.XmlSerializerFormatAttribute, this.reflector)).ApplyDispatchBehavior(od, dispatchOperation);
      return dispatchOperation.Formatter;
    }

    internal virtual DataContractJsonSerializerOperationFormatter CreateDataContractJsonSerializerOperationFormatter(
      OperationDescription od,
      DataContractSerializerOperationBehavior dcsob,
      bool isWrapped)
    {
      return new DataContractJsonSerializerOperationFormatter(od, dcsob.MaxItemsInObjectGraph, dcsob.IgnoreExtensionDataObject, dcsob.DataContractSurrogate, isWrapped, false, this.JavascriptCallbackParameterName);
    }

    private IClientMessageFormatter GetDefaultXmlAndJsonClientFormatter(
      OperationDescription od,
      bool isWrapped)
    {
      IClientMessageFormatter defaultClientFormatter1 = this.GetDefaultClientFormatter(od, false, isWrapped);
      if (!WebHttpBehavior.SupportsJsonFormat(od))
        return defaultClientFormatter1;
      IClientMessageFormatter defaultClientFormatter2 = this.GetDefaultClientFormatter(od, true, isWrapped);
      return (IClientMessageFormatter) new DemultiplexingClientMessageFormatter((IDictionary<WebContentFormat, IClientMessageFormatter>) new Dictionary<WebContentFormat, IClientMessageFormatter>()
      {
        {
          WebContentFormat.Xml,
          defaultClientFormatter1
        },
        {
          WebContentFormat.Json,
          defaultClientFormatter2
        }
      }, defaultClientFormatter1);
    }

    private IDispatchMessageFormatter GetDefaultXmlAndJsonDispatchFormatter(
      OperationDescription od,
      bool isWrapped)
    {
      IDispatchMessageFormatter dispatchFormatter1 = this.GetDefaultDispatchFormatter(od, false, isWrapped);
      if (!WebHttpBehavior.SupportsJsonFormat(od))
        return dispatchFormatter1;
      IDispatchMessageFormatter dispatchFormatter2 = this.GetDefaultDispatchFormatter(od, true, isWrapped);
      return (IDispatchMessageFormatter) new DemultiplexingDispatchMessageFormatter((IDictionary<WebContentFormat, IDispatchMessageFormatter>) new Dictionary<WebContentFormat, IDispatchMessageFormatter>()
      {
        {
          WebContentFormat.Xml,
          dispatchFormatter1
        },
        {
          WebContentFormat.Json,
          dispatchFormatter2
        }
      }, dispatchFormatter1);
    }

    internal WebMessageFormat GetRequestFormat(OperationDescription od)
    {
      WebGetAttribute wga = od.Behaviors.Find<WebGetAttribute>();
      WebInvokeAttribute wia = od.Behaviors.Find<WebInvokeAttribute>();
      WebHttpBehavior.EnsureOk(wga, wia, od);
      return wga != null ? (!wga.IsRequestFormatSetExplicitly ? this.DefaultOutgoingRequestFormat : wga.RequestFormat) : (wia != null && wia.IsRequestFormatSetExplicitly ? wia.RequestFormat : this.DefaultOutgoingRequestFormat);
    }

    internal WebMessageFormat GetResponseFormat(OperationDescription od)
    {
      WebGetAttribute wga = od.Behaviors.Find<WebGetAttribute>();
      WebInvokeAttribute wia = od.Behaviors.Find<WebInvokeAttribute>();
      WebHttpBehavior.EnsureOk(wga, wia, od);
      return wga != null ? (!wga.IsResponseFormatSetExplicitly ? this.DefaultOutgoingResponseFormat : wga.ResponseFormat) : (wia != null && wia.IsResponseFormatSetExplicitly ? wia.ResponseFormat : this.DefaultOutgoingResponseFormat);
    }

    private void ValidateBodyParameters(OperationDescription operation, bool request)
    {
      string webMethod = WebHttpBehavior.GetWebMethod(operation);
      if (request)
        this.ValidateGETHasNoBody(operation, webMethod);
      this.ValidateBodyStyle(operation, request);
      WebHttpBehavior.ValidateAtMostOneStreamParameter(operation, request);
    }

    private void ValidateBodyStyle(OperationDescription operation, bool request)
    {
      WebMessageBodyStyle bodyStyle = this.GetBodyStyle(operation);
      System.Type type;
      if (request && WebHttpBehavior.IsBareRequest(bodyStyle))
        WebHttpBehavior.TryGetNonMessageParameterType(operation.Messages[0], operation, true, out type);
      if (request || operation.Messages.Count <= 1 || !WebHttpBehavior.IsBareResponse(bodyStyle))
        return;
      WebHttpBehavior.TryGetNonMessageParameterType(operation.Messages[1], operation, false, out type);
    }

    private void ValidateGETHasNoBody(OperationDescription operation, string method)
    {
      if (!(method == "GET") || WebHttpBehavior.IsUntypedMessage(operation.Messages[0]) || operation.Messages[0].Body.Parts.Count == 0)
        return;
      if (!WebHttpBehavior.IsTypedMessage(operation.Messages[0]))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.GETCannotHaveBody, (object) operation.Name, (object) operation.DeclaringContract.Name, (object) operation.Messages[0].Body.Parts[0].Name)));
      }
      // ISSUE: reference to a compiler-generated method
      throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.GETCannotHaveMCParameter, (object) operation.Name, (object) operation.DeclaringContract.Name, (object) operation.Messages[0].MessageType.Name)));
    }

    private void ValidateContract(ServiceEndpoint endpoint)
    {
      foreach (OperationDescription operation in (Collection<OperationDescription>) endpoint.Contract.Operations)
      {
        this.ValidateNoOperationHasEncodedXmlSerializer(operation);
        this.ValidateNoMessageContractHeaders(operation.Messages[0], operation.Name, endpoint.Contract.Name);
        this.ValidateNoBareMessageContractWithMultipleParts(operation.Messages[0], operation.Name, endpoint.Contract.Name);
        this.ValidateNoMessageContractWithStream(operation.Messages[0], operation.Name, endpoint.Contract.Name);
        if (operation.Messages.Count > 1)
        {
          this.ValidateNoMessageContractHeaders(operation.Messages[1], operation.Name, endpoint.Contract.Name);
          this.ValidateNoBareMessageContractWithMultipleParts(operation.Messages[1], operation.Name, endpoint.Contract.Name);
          this.ValidateNoMessageContractWithStream(operation.Messages[1], operation.Name, endpoint.Contract.Name);
        }
      }
    }

    internal static bool IsXmlSerializerFaultFormat(OperationDescription operationDescription)
    {
      XmlSerializerOperationBehavior operationBehavior = operationDescription.Behaviors.Find<XmlSerializerOperationBehavior>();
      return operationBehavior != null && operationBehavior.XmlSerializerFormatAttribute.SupportFaults;
    }

    private void ValidateNoMessageContractWithStream(
      MessageDescription md,
      string opName,
      string contractName)
    {
      if (!WebHttpBehavior.IsTypedMessage(md))
        return;
      foreach (MessagePartDescription part in (Collection<MessagePartDescription>) md.Body.Parts)
      {
        if (part.Type == typeof (Stream))
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.StreamBodyMemberNotSupported, (object) this.GetType().ToString(), (object) contractName, (object) opName, (object) md.MessageType.ToString(), (object) part.Name)));
        }
      }
    }

    private void ValidateNoOperationHasEncodedXmlSerializer(OperationDescription od)
    {
      XmlSerializerOperationBehavior operationBehavior = od.Behaviors.Find<XmlSerializerOperationBehavior>();
      if (operationBehavior != null && (operationBehavior.XmlSerializerFormatAttribute.Style == OperationFormatStyle.Rpc || operationBehavior.XmlSerializerFormatAttribute.IsEncoded))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.RpcEncodedNotSupportedForNoneMessageVersion, (object) od.Name, (object) od.DeclaringContract.Name, (object) od.DeclaringContract.Namespace)));
      }
    }

    private void ValidateNoBareMessageContractWithMultipleParts(
      MessageDescription md,
      string opName,
      string contractName)
    {
      if (!WebHttpBehavior.IsTypedMessage(md) || md.Body.WrapperName != null)
        return;
      if (md.Body.Parts.Count > 1)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.InvalidMessageContractWithoutWrapperName, (object) opName, (object) contractName, (object) md.MessageType)));
      }
      if (md.Body.Parts.Count == 1 && md.Body.Parts[0].Multiple)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.MCAtMostOneRequestBodyParameterAllowedForUnwrappedMessages, (object) opName, (object) contractName, (object) md.MessageType)));
      }
    }

    private void ValidateNoMessageContractHeaders(
      MessageDescription md,
      string opName,
      string contractName)
    {
      if (md.Headers.Count != 0)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.InvalidMethodWithSOAPHeaders, (object) opName, (object) contractName)));
      }
    }

    internal static JavascriptCallbackResponseMessageProperty TrySetupJavascriptCallback(
      string callbackParameterName)
    {
      JavascriptCallbackResponseMessageProperty property = (JavascriptCallbackResponseMessageProperty) null;
      if (!string.IsNullOrEmpty(callbackParameterName) && !OperationContext.Current.OutgoingMessageProperties.TryGetValue<JavascriptCallbackResponseMessageProperty>(JavascriptCallbackResponseMessageProperty.Name, out property))
      {
        UriTemplateMatch uriTemplateMatch = WebOperationContext.Current.IncomingRequest.UriTemplateMatch;
        if (uriTemplateMatch != null && ((IEnumerable<string>) uriTemplateMatch.QueryParameters.AllKeys).Contains<string>(callbackParameterName))
        {
          string queryParameter = uriTemplateMatch.QueryParameters[callbackParameterName];
          if (!string.IsNullOrEmpty(queryParameter))
          {
            property = new JavascriptCallbackResponseMessageProperty()
            {
              CallbackFunctionName = queryParameter
            };
            OperationContext.Current.OutgoingMessageProperties.Add(JavascriptCallbackResponseMessageProperty.Name, (object) property);
          }
        }
      }
      return property;
    }

    internal delegate void Effect();

    internal class MessagePassthroughFormatter : IClientMessageFormatter, IDispatchMessageFormatter
    {
      public object DeserializeReply(Message message, object[] parameters) => (object) message;

      public void DeserializeRequest(Message message, object[] parameters) => parameters[0] = (object) message;

      public Message SerializeReply(
        MessageVersion messageVersion,
        object[] parameters,
        object result)
      {
        return result as Message;
      }

      public Message SerializeRequest(MessageVersion messageVersion, object[] parameters) => parameters[0] as Message;
    }
  }
}
