// Decompiled with JetBrains decompiler
// Type: MiniGames_Team9.Bullet
// Assembly: DependentHan, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A86A1B94-F21E-4DD9-9B87-E146CFB070D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-3c000108374c842e22e4bf480441d013e260c170c6d87defb15c322a4d136adb.exe

using System;
using System.Drawing;
using System.Windows.Forms;

namespace MiniGames_Team9
{
  internal abstract class Bullet
  {
    public int speed = 5;
    protected Direction direction;
    protected Timer tm = new Timer();
    protected PictureBox pictureCurrent;
    protected string color;

    public Bullet() => this.direction = Direction.left;

    public Bullet(Direction direct, PictureBox ptb, string color)
    {
      this.direction = direct;
      this.pictureCurrent = ptb;
      this.color = color;
    }

    protected void CreateBullet(PictureBox bullet, PictureBox Map)
    {
      Point point = this.SetLocationBullet(this.direction, this.pictureCurrent);
      if (this.color == "Red")
        bullet.BackColor = Color.Red;
      else
        bullet.BackColor = Color.Yellow;
      bullet.Size = new Size(8, 8);
      bullet.Tag = (object) (nameof (bullet) + this.color);
      bullet.Left = point.X;
      bullet.Top = point.Y;
      Map.Controls.Add((Control) bullet);
      bullet.BringToFront();
    }

    public virtual void BulletControl(PictureBox Map)
    {
      this.tm.Interval = this.speed;
      this.tm.Tick += new EventHandler(this.tm_Tick);
      this.tm.Start();
    }

    private Point SetLocationBullet(Direction direct, PictureBox Avatar)
    {
      Point point = new Point();
      switch (direct)
      {
        case Direction.up:
          point.X = Avatar.Left + Avatar.Width / 2 - 4;
          point.Y = Avatar.Top - 4;
          break;
        case Direction.down:
          point.X = Avatar.Left + Avatar.Width / 2 - 4;
          point.Y = Avatar.Top + Avatar.Height - 4;
          break;
        case Direction.left:
          point.X = Avatar.Left - 4;
          point.Y = Avatar.Top + Avatar.Height / 2 - 4;
          break;
        default:
          point.X = Avatar.Left + Avatar.Width - 4;
          point.Y = Avatar.Top + Avatar.Height / 2 - 4;
          break;
      }
      return point;
    }

    protected void tm_Tick(object sender, EventArgs e) => this.MoveBullet();

    protected abstract void MoveBullet();
  }
}
