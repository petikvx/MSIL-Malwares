// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: InternalSi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: F44F14A9-876B-4F73-A898-F3E4E8A5FAFC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-054cde86997158b8d0515e30ca53b657ef96d212987a89f7eb3b76e7fe727d62.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1122923974;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1101822818)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 2046050476 ^ 1367479895;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1808584621;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -516478540)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -49507097 ^ -1900913023;
            continue;
          case 2:
            goto label_1;
          case 3:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -180334686 ^ 567063550;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -1457971186;
      int aIndex;
      float[] numArray;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1999616968)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            riskChances = numArray;
            num1 = (int) num2 * 1109878086 ^ 1181181166;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * 618819542 ^ -2053594626;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -153328956;
            continue;
          case 4:
            numArray = new float[json.Count];
            num1 = (int) num2 * 1960148963 ^ 1833990887;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex >= numArray.Length ? -310354235 : (num3 = -1376382399);
            continue;
          case 7:
            num1 = (int) num2 * 1957477884 ^ 226438538;
            continue;
          case 8:
            aIndex = 0;
            num1 = (int) num2 * 2105533555 ^ -670637674;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
      List<Card> cardList = new List<Card>();
label_1:
      int num1 = -1660365533;
      int aIndex1;
      bool flag1;
      int aIndex2;
      Card[] array;
      int num2;
      bool flag2;
      JSONNode jsonNode;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -731822110)) % 22U)
        {
          case 0:
            ++aIndex1;
            num1 = (int) num3 * -126651433 ^ 673926743;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * 1951405982 ^ 2036928462;
            continue;
          case 2:
            ++num2;
            num1 = (int) num3 * 1012010316 ^ 1436722620;
            continue;
          case 3:
            flag1 = aIndex1 < count;
            num1 = -1742967177;
            continue;
          case 4:
            num1 = (int) num3 * -601515408 ^ 780154232;
            continue;
          case 5:
            aIndex1 = 0;
            num1 = (int) num3 * 1649115308 ^ 1663323865;
            continue;
          case 6:
            flag2 = num2 < jsonNode[aIndex2].AsInt;
            num1 = -1393531986;
            continue;
          case 7:
            num1 = -736866307;
            continue;
          case 8:
            num1 = -1516757919;
            continue;
          case 9:
            bool flag3 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -1447303237;
            continue;
          case 10:
            int num4 = flag2 ? 1476338508 : (num4 = 1358396074);
            num1 = num4 ^ (int) num3 * -1645877562;
            continue;
          case 11:
            num1 = -1926207783;
            continue;
          case 12:
            num1 = (int) num3 * 521664811 ^ 1223328549;
            continue;
          case 13:
            ++aIndex2;
            num1 = (int) num3 * -416509100 ^ -2086494466;
            continue;
          case 15:
            goto label_1;
          case 16:
            int num5;
            num1 = num5 = aIndex2 >= maxImpact * 2 ? -149846658 : (num5 = -654970865);
            continue;
          case 17:
            int num6 = flag1 ? -489958122 : (num6 = -1117587011);
            num1 = num6 ^ (int) num3 * -305602623;
            continue;
          case 18:
            num1 = (int) num3 * 1455014760 ^ -238268628;
            continue;
          case 19:
            jsonNode = json[aIndex1];
            aIndex2 = 0;
            num1 = (int) num3 * -911858510 ^ -1142174916;
            continue;
          case 20:
            array = cardList.ToArray();
            num1 = (int) num3 * -1875417574 ^ -156364258;
            continue;
          case 21:
            num1 = (int) num3 * -916497291 ^ -1159287379;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1487809942;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 158686624)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u202E‌‬​⁪‏‫⁫‪‌​⁬‏⁫‍‫⁬‎‏‫⁫⁬‭‪⁯‌‏​‮⁬⁪⁬⁭⁮⁯⁫‌⁬⁫‏‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -246798192 ^ -1581869685;
            continue;
          case 3:
            num1 = (int) num2 * -1710824731 ^ -114946670;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
      int num1 = 0;
      Card[] cards = this.Cards;
label_1:
      int num2 = -1173911687;
      int index;
      Card card1;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -442403691)) % 15U)
        {
          case 0:
            flag = num1 != card1.Type;
            num2 = (int) num3 * -173647108 ^ 1334075222;
            continue;
          case 1:
            num2 = (int) num3 * 1552898923 ^ -1814847494;
            continue;
          case 2:
            ++index;
            num2 = (int) num3 * -1829741536 ^ 1060322517;
            continue;
          case 3:
            card1 = cards[index];
            num2 = -453680571;
            continue;
          case 4:
            goto label_1;
          case 5:
            index = 0;
            num2 = (int) num3 * -1810334249 ^ -299563278;
            continue;
          case 6:
            str1 = Rules.\u202A‮⁬⁪‬⁮⁪‌‭⁮​‪⁬⁪‫‌‎⁭‌⁫⁫‌⁮‏⁮‏⁬​‏⁮‏‮⁭‮⁭‏‌‍⁭‌‮(str1, "\n\t");
            num1 = card1.Type;
            num2 = (int) num3 * 361372809 ^ 1276779142;
            continue;
          case 7:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206D​​​‭‎‎​⁬⁯‮‏⁮‏‭⁯‪‎‎‏‭‍⁮⁬​⁭⁫‭‫⁬‬⁯‍⁭⁫‬‏‬‍⁬‮((object) card2) : (string) null;
            str1 = Rules.\u202A⁭‪⁬‭⁪‫⁫⁫‍⁮‬‫‫‏⁪‭⁭‌‪⁭‎⁫‍‮‎⁯‎‬⁪⁭⁫⁮⁯‬⁮‎‏⁮‮(str3, str4, " ");
            num2 = -890357963;
            continue;
          case 8:
            num2 = (int) num3 * -1186029488 ^ 1855160282;
            continue;
          case 10:
            int num4 = !flag ? -1489894153 : (num4 = -1490262271);
            num2 = num4 ^ (int) num3 * -340917816;
            continue;
          case 11:
            str2 = Rules.\u202A‮⁬⁪‬⁮⁪‌‭⁮​‪⁬⁪‫‌‎⁭‌⁫⁫‌⁮‏⁮‏⁬​‏⁮‏‮⁭‮⁭‏‌‍⁭‌‮(str1, "\n]");
            num2 = (int) num3 * 922196169 ^ 1482900919;
            continue;
          case 12:
            num2 = (int) num3 * 1251062133 ^ 8513406;
            continue;
          case 13:
            int num5;
            num2 = num5 = index >= cards.Length ? -947133078 : (num5 = -1845384649);
            continue;
          case 14:
            num2 = (int) num3 * -1266042365 ^ -1718104884;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 1272572812;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 800948100)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = Rules.\u202A⁭‪⁬‭⁪‫⁫⁫‍⁮‬‫‫‏⁪‭⁭‌‪⁭‎⁫‍‮‎⁯‎‬⁪⁭⁫⁮⁯‬⁮‎‏⁮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202D‬‍⁮⁬‍‬‫‌⁬⁫‫‪​‪‎‎‫‏‭⁪‌‍‫‏‮⁯‭⁭⁯⁫⁯‭⁪‪‌⁯⁫⁯‬‮()));
            num1 = 110614950;
            continue;
          case 2:
            num1 = (int) num2 * 99604280 ^ 1169294070;
            continue;
          case 3:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? 1523226166 : (num3 = 1639029169);
            continue;
          case 4:
            index = 1;
            num1 = (int) num2 * -1277746115 ^ -169316391;
            continue;
          case 5:
            str1 = Rules.\u202A‮⁬⁪‬⁮⁪‌‭⁮​‪⁬⁪‫‌‎⁭‌⁫⁫‌⁮‏⁮‏⁬​‏⁮‏‮⁭‮⁭‏‌‍⁭‌‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202D‬‍⁮⁬‍‬‫‌⁬⁫‫‪​‪‎‎‫‏‭⁪‌‍‫‏‮⁯‭⁭⁯⁫⁯‭⁪‪‌⁯⁫⁯‬‮()));
            num1 = (int) num2 * 984426063 ^ -1296613007;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * 863952948 ^ 1245660328;
            continue;
          case 8:
            str2 = Rules.\u202A‮⁬⁪‬⁮⁪‌‭⁮​‪⁬⁪‫‌‎⁭‌⁫⁫‌⁮‏⁮‏⁬​‏⁮‏‮⁭‮⁭‏‌‍⁭‌‮(str1, " ]");
            num1 = (int) num2 * -1581267626 ^ 1966434597;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u202E‌‬​⁪‏‫⁫‪‌​⁬‏⁫‍‫⁬‎‏‫⁫⁬‭‪⁯‌‏​‮⁬⁪⁬⁭⁮⁯⁫‌⁬⁫‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202A‮⁬⁪‬⁮⁪‌‭⁮​‪⁬⁪‫‌‎⁭‌⁫⁫‌⁮‏⁮‏⁬​‏⁮‏‮⁭‮⁭‏‌‍⁭‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206D​​​‭‎‎​⁬⁯‮‏⁮‏‭⁯‪‎‎‏‭‍⁮⁬​⁭⁫‭‫⁬‬⁯‍⁭⁫‬‏‬‍⁬‮([In] object obj0) => obj0.ToString();

    static string \u202A⁭‪⁬‭⁪‫⁫⁫‍⁮‬‫‫‏⁪‭⁭‌‪⁭‎⁫‍‮‎⁯‎‬⁪⁭⁫⁮⁯‬⁮‎‏⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202D‬‍⁮⁬‍‬‫‌⁬⁫‫‪​‪‎‎‫‏‭⁪‌‍‫‏‮⁯‭⁭⁯⁫⁯‭⁪‪‌⁯⁫⁯‬‮() => CultureInfo.InvariantCulture;
  }
}
