// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONData
// Assembly: cDisplayClass1, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 0E93EC79-9513-4BD1-8651-98C7CADA4D7F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a7264014555068294029d5d9ceb9ee717c4d2bf523330c30cee18f18e55a0b5b.exe

using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONData : JSONNode
  {
    private string m_Data;

    public override string Value
    {
      get
      {
label_1:
        int num1 = -1722116170;
        string data;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2102171497)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              data = this.m_Data;
              num1 = (int) num2 * -1209871426 ^ -1198104362;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return data;
      }
      set
      {
label_1:
        int num1 = 859528895;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 77554986)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.m_Data = value;
              num1 = (int) num2 * -1693327706 ^ -1923991870;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public JSONData(string aData)
    {
label_1:
      int num1 = -2134934249;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -783828986)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -991703249 ^ 191025382;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 491163431 ^ -1566598589;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.m_Data = aData;
    }

    public JSONData(float aData) => this.AsFloat = aData;

    public JSONData(double aData) => this.AsDouble = aData;

    public JSONData(bool aData) => this.AsBool = aData;

    public JSONData(int aData) => this.AsInt = aData;

    public override string ToString()
    {
label_1:
      int num1 = 425910866;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 65428333)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1602098514 ^ 1943931576;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = JSONData.\u200E‌⁭⁪‫‪‬⁭⁪‎⁫⁭⁮​‏‮⁭⁮‪‍‮‌⁫‌‍⁫⁯​⁪‫⁬‎⁬‍‪‮‍‌‌‬‮("\"", JSONNode.Escape(this.m_Data), "\"");
            num1 = (int) num2 * -744687289 ^ 760158340;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override string ToString(string aPrefix)
    {
      string str = JSONData.\u200E‌⁭⁪‫‪‬⁭⁪‎⁫⁭⁮​‏‮⁭⁮‪‍‮‌⁫‌‍⁫⁯​⁪‫⁬‎⁬‍‪‮‍‌‌‬‮("\"", JSONNode.Escape(this.m_Data), "\"");
label_1:
      int num1 = 1723085272;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2087680229)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 645014237 ^ -1212378575;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
      JSONData jsonData = new JSONData("");
label_1:
      int num1 = 568195069;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 202073236)) % 36U)
        {
          case 0:
            flag2 = JSONData.\u200B‏‫‍⁯⁯⁭⁯⁪⁬​‬‍⁭​‬​‍⁬⁫‌⁮⁪‎‌‪‮‌⁮‭‮​⁮‭‮⁭⁮⁬⁮‮(jsonData.m_Data, this.m_Data);
            num1 = (int) num2 * -513739835 ^ -1697613722;
            continue;
          case 1:
            num1 = (int) num2 * 62109386 ^ -1272017611;
            continue;
          case 2:
            flag1 = JSONData.\u200B‏‫‍⁯⁯⁭⁯⁪⁬​‬‍⁭​‬​‍⁬⁫‌⁮⁪‎‌‪‮‌⁮‭‮​⁮‭‮⁭⁮⁬⁮‮(jsonData.m_Data, this.m_Data);
            num1 = (int) num2 * -46612308 ^ 1492575385;
            continue;
          case 3:
            JSONData.\u200F‮‭⁪‮‬‎⁯‍⁪⁫‏‭‮⁭⁭‏‪‎⁮​⁪‌‎⁯⁯‬⁯‫⁮⁪⁫‪⁯‮‮⁮‍‍‮‮(aWriter, (byte) 6);
            num1 = (int) num2 * -1421286311 ^ 400646010;
            continue;
          case 4:
            num1 = (int) num2 * -1079373327 ^ 1996140939;
            continue;
          case 5:
            JSONData.\u200F‏‪‭⁯⁬‬‫⁪‌⁫​‬⁮⁭‬‮⁬⁫‎​⁯⁪‏‍⁭‎⁭‍⁪⁬‍‍​‍‫‏‮‍‪‮(aWriter, this.AsBool);
            num1 = (int) num2 * -1695646705 ^ -102769853;
            continue;
          case 6:
            JSONData.\u200F‮‭⁪‮‬‎⁯‍⁪⁫‏‭‮⁭⁭‏‪‎⁮​⁪‌‎⁯⁯‬⁯‫⁮⁪⁫‪⁯‮‮⁮‍‍‮‮(aWriter, (byte) 3);
            num1 = 1163703598;
            continue;
          case 7:
            num1 = (int) num2 * -1888863045 ^ 754777214;
            continue;
          case 8:
            JSONData.\u200C‎⁯‭‍⁯‍⁪‭⁭⁯​⁯⁬‭‭‎⁯‬​‫‍​⁭‮⁬‌‭‭‍‭‪⁬‮‎⁪⁫‌⁬‪‮(aWriter, this.AsFloat);
            num1 = (int) num2 * 1604257147 ^ 1898151685;
            continue;
          case 9:
            num1 = (int) num2 * -1864795816 ^ 145914055;
            continue;
          case 10:
            JSONData.\u200F‮‭⁪‮‬‎⁯‍⁪⁫‏‭‮⁭⁭‏‪‎⁮​⁪‌‎⁯⁯‬⁯‫⁮⁪⁫‪⁯‮‮⁮‍‍‮‮(aWriter, (byte) 7);
            num1 = (int) num2 * -848131440 ^ -868234998;
            continue;
          case 11:
            num1 = (int) num2 * -2145470613 ^ -1083710163;
            continue;
          case 12:
            goto label_1;
          case 13:
            jsonData.AsInt = this.AsInt;
            int num3 = JSONData.\u200B‏‫‍⁯⁯⁭⁯⁪⁬​‬‍⁭​‬​‍⁬⁫‌⁮⁪‎‌‪‮‌⁮‭‮​⁮‭‮⁭⁮⁬⁮‮(jsonData.m_Data, this.m_Data) ? -758926829 : (num3 = -1890931492);
            num1 = num3 ^ (int) num2 * -1352557253;
            continue;
          case 14:
            JSONData.\u200F‮‭⁪‮‬‎⁯‍⁪⁫‏‭‮⁭⁭‏‪‎⁮​⁪‌‎⁯⁯‬⁯‫⁮⁪⁫‪⁯‮‮⁮‍‍‮‮(aWriter, (byte) 5);
            num1 = (int) num2 * -1033104101 ^ 1342870961;
            continue;
          case 15:
            jsonData.AsDouble = this.AsDouble;
            num1 = 122692396;
            continue;
          case 16:
            JSONData.\u200D⁪‏‍‎‍‮‌‫⁭‍‏⁬‌⁬‌⁫‍⁮‭‌⁯⁬⁮⁫⁪⁬‫⁭‌‪⁬‮‏‫⁮⁫⁫⁯‬‮(aWriter, this.m_Data);
            num1 = (int) num2 * -988296486 ^ -418477441;
            continue;
          case 17:
            jsonData.AsBool = this.AsBool;
            num1 = 1508018538;
            continue;
          case 18:
            num1 = (int) num2 * 1990137123 ^ -530120242;
            continue;
          case 19:
            JSONData.\u202C⁪⁫‭​​​⁫‮⁫⁪‭‫‪⁭⁬⁮⁮⁬‭⁫‌⁮⁫‭‭‪⁫‪‍‫⁯​‏⁫⁮⁪‏‎⁪‮(aWriter, this.AsInt);
            num1 = (int) num2 * -1586951957 ^ 751177622;
            continue;
          case 20:
            int num4 = flag3 ? 1447826530 : (num4 = 1429264327);
            num1 = num4 ^ (int) num2 * 1203864407;
            continue;
          case 21:
            num1 = (int) num2 * -490663024 ^ 561518258;
            continue;
          case 22:
            num1 = (int) num2 * 118610132 ^ 719193838;
            continue;
          case 23:
            jsonData.AsFloat = this.AsFloat;
            num1 = 735332795;
            continue;
          case 24:
            num1 = (int) num2 * 442188128 ^ 1632438000;
            continue;
          case 25:
            num1 = (int) num2 * -1547045502 ^ -954183647;
            continue;
          case 26:
            int num5 = flag2 ? -593187599 : (num5 = -345746727);
            num1 = num5 ^ (int) num2 * -1117575350;
            continue;
          case 27:
            flag3 = JSONData.\u200B‏‫‍⁯⁯⁭⁯⁪⁬​‬‍⁭​‬​‍⁬⁫‌⁮⁪‎‌‪‮‌⁮‭‮​⁮‭‮⁭⁮⁬⁮‮(jsonData.m_Data, this.m_Data);
            num1 = (int) num2 * 1351990172 ^ 72386008;
            continue;
          case 28:
            num1 = (int) num2 * 54926391 ^ 1718486323;
            continue;
          case 29:
            num1 = (int) num2 * 1466676760 ^ -1288526751;
            continue;
          case 30:
            num1 = (int) num2 * -473245989 ^ -1300226906;
            continue;
          case 31:
            JSONData.\u200D‍⁪‫⁬​⁯⁮‪​‏‎⁭⁭⁭‫‬⁭⁫‪‏⁪⁬⁮‏‍‭‌‬‭‌‌⁭‏‭‭‎‏⁮‭‮(aWriter, this.AsDouble);
            num1 = (int) num2 * -1807287452 ^ 690462298;
            continue;
          case 32:
            JSONData.\u200F‮‭⁪‮‬‎⁯‍⁪⁫‏‭‮⁭⁭‏‪‎⁮​⁪‌‎⁯⁯‬⁯‫⁮⁪⁫‪⁯‮‮⁮‍‍‮‮(aWriter, (byte) 4);
            num1 = (int) num2 * 993745818 ^ -581953663;
            continue;
          case 33:
            int num6 = !flag1 ? -342697025 : (num6 = -1686704962);
            num1 = num6 ^ (int) num2 * 421829545;
            continue;
          case 34:
            num1 = (int) num2 * 1949134909 ^ -138301009;
            continue;
          case 35:
            goto label_3;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    static string \u200E‌⁭⁪‫‪‬⁭⁪‎⁫⁭⁮​‏‮⁭⁮‪‍‮‌⁫‌‍⁫⁯​⁪‫⁬‎⁬‍‪‮‍‌‌‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static bool \u200B‏‫‍⁯⁯⁭⁯⁪⁬​‬‍⁭​‬​‍⁬⁫‌⁮⁪‎‌‪‮‌⁮‭‮​⁮‭‮⁭⁮⁬⁮‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u200F‮‭⁪‮‬‎⁯‍⁪⁫‏‭‮⁭⁭‏‪‎⁮​⁪‌‎⁯⁯‬⁯‫⁮⁪⁫‪⁯‮‮⁮‍‍‮‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u202C⁪⁫‭​​​⁫‮⁫⁪‭‫‪⁭⁬⁮⁮⁬‭⁫‌⁮⁫‭‭‪⁫‪‍‫⁯​‏⁫⁮⁪‏‎⁪‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u200C‎⁯‭‍⁯‍⁪‭⁭⁯​⁯⁬‭‭‎⁯‬​‫‍​⁭‮⁬‌‭‭‍‭‪⁬‮‎⁪⁫‌⁬‪‮([In] BinaryWriter obj0, [In] float obj1) => obj0.Write(obj1);

    static void \u200D‍⁪‫⁬​⁯⁮‪​‏‎⁭⁭⁭‫‬⁭⁫‪‏⁪⁬⁮‏‍‭‌‬‭‌‌⁭‏‭‭‎‏⁮‭‮([In] BinaryWriter obj0, [In] double obj1) => obj0.Write(obj1);

    static void \u200F‏‪‭⁯⁬‬‫⁪‌⁫​‬⁮⁭‬‮⁬⁫‎​⁯⁪‏‍⁭‎⁭‍⁪⁬‍‍​‍‫‏‮‍‪‮([In] BinaryWriter obj0, [In] bool obj1) => obj0.Write(obj1);

    static void \u200D⁪‏‍‎‍‮‌‫⁭‍‏⁬‌⁬‌⁫‍⁮‭‌⁯⁬⁮⁫⁪⁬‫⁭‌‪⁬‮‏‫⁮⁫⁫⁯‬‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
