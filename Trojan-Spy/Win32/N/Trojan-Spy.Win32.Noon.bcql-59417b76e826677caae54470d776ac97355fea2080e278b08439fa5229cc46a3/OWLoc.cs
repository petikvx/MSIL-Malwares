// Decompiled with JetBrains decompiler
// Type: mmxAH.OWLoc
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace mmxAH
{
  public class OWLoc : Locathion
  {
    private List<byte> colors;
    private List<byte> investigatorsArea2;
    private short GateModif = 0;
    private byte GateDif = 1;

    public OWLoc(GameEngine eng)
    {
      this.en = eng;
      this.colors = new List<byte>();
      this.investigatorsArea2 = new List<byte>();
      this.type = LocathionType.OW;
    }

    public void SetGateDif(byte dif) => this.GateDif = dif;

    public byte GetGateDif() => this.GateDif;

    public short GetGateModif() => this.GateModif;

    public override void Move()
    {
      byte curPlayer = this.en.clock.GetCurPlayer();
      this.en.io.SetFormMode(FormMode.Ow);
      if (!this.en.ActiveInvistigators[(int) curPlayer].isCanMove)
      {
        this.en.clock.NextPlayer();
      }
      else
      {
        if (this.investigatorsArea2.IndexOf(curPlayer) != -1)
        {
          this.investigatorsArea2.Remove(curPlayer);
          this.en.ga.ReturnToArchem(this.LocathionIndex, new Func(this.en.ActiveInvistigators[(int) curPlayer].MoveChicle));
        }
        if (this.investigators.IndexOf(curPlayer) == -1)
          return;
        this.investigators.Remove(curPlayer);
        this.investigatorsArea2.Add(curPlayer);
        this.en.io.PrintToLog(this.en.ActiveInvistigators[(int) curPlayer].GetTitle(), isItalic: true);
        this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.MoveToFact) + " ");
        this.en.io.PrintToLog(this.displayName + "  " + this.en.sysstr.GetString(SSType.OWArea) + "  2.", isBold: true);
        this.en.clock.NextPlayer();
      }
    }

    public string GetDescripthionToGate()
    {
      string descripthionToGate = this.GetShortDescripthionToGate();
      string str = descripthionToGate.Remove(descripthionToGate.Length - 1);
      foreach (byte color in this.colors)
        str = str + "," + this.en.colors.GetTitle(color);
      return str + ")";
    }

    public string GetShortDescripthionToGate()
    {
      string str1 = this.MoveToTitle + "(";
      if (this.GateModif > (short) 0)
        str1 += "+";
      string str2 = str1 + this.GateModif.ToString();
      if (this.GateDif != (byte) 1)
        str2 = str2 + ",dif " + this.GateDif.ToString();
      return str2 + ")";
    }

    public override bool FromText(TextFileParser prs, TextFileParser text)
    {
      byte result;
      if (!this.FromText3(prs, text) || !byte.TryParse(prs.GetToken(), out result))
        return false;
      for (int index1 = 0; index1 < (int) result; ++index1)
      {
        int index2 = this.en.colors.GetIndex(prs.GetToken());
        if (index2 == -1)
          return false;
        this.colors.Add((byte) index2);
      }
      return short.TryParse(prs.GetToken(), out this.GateModif);
    }

    public override void Print(byte label)
    {
      string str = this.displayName + " ( ";
      for (byte index = 0; (int) index < this.colors.Count; ++index)
      {
        if (index > (byte) 0)
          str += " , ";
        str += this.en.colors.GetTitle(this.colors[(int) index]);
      }
      this.en.io.Print(str + ")", (byte) 14, true, label: label);
      string Text1 = Environment.NewLine + this.en.sysstr.GetString(SSType.OWArea) + " 1: ";
      if (this.investigators.Count == 0)
      {
        Text1 += "-";
      }
      else
      {
        foreach (byte investigator in this.investigators)
          Text1 = Text1 + "  " + this.en.ActiveInvistigators[(int) investigator].PrintToMap();
      }
      this.en.io.Print(Text1, label: label);
      string Text2 = Environment.NewLine + this.en.sysstr.GetString(SSType.OWArea) + " 2: ";
      if (this.investigatorsArea2.Count == 0)
      {
        Text2 += "-";
      }
      else
      {
        foreach (byte index in this.investigatorsArea2)
          Text2 = Text2 + "  " + this.en.ActiveInvistigators[(int) index].GetTitle();
      }
      this.en.io.Print(Text2, label: label);
      this.en.io.Print(Environment.NewLine, label: label);
    }

    public override void ToBin(BinaryWriter wr)
    {
      this.ToBin1(wr);
      wr.Write(this.GateModif);
      wr.Write(this.colors.Count);
      foreach (byte color in this.colors)
        wr.Write(color);
    }

    public override void FromBin(BinaryReader rd)
    {
      this.FromBin1(rd);
      this.GateModif = (short) rd.ReadSByte();
      int num = rd.ReadInt32();
      for (int index = 0; index < num; ++index)
        this.colors.Add(rd.ReadByte());
    }

    public override void Reset()
    {
      base.Reset();
      this.investigatorsArea2.Clear();
    }

    public override void Encounter() => this.en.clock.NextPlayer();

    public override void WriteToSave(BinaryWriter wr)
    {
      wr.Write(this.investigators.Count);
      foreach (byte investigator in this.investigators)
        wr.Write(investigator);
      wr.Write(this.investigatorsArea2.Count);
      foreach (byte num in this.investigatorsArea2)
        wr.Write(num);
    }

    public override void ReadFromSave(BinaryReader rd)
    {
      int num1 = rd.ReadInt32();
      for (int index = 0; index < num1; ++index)
        this.investigators.Add(rd.ReadByte());
      int num2 = rd.ReadInt32();
      for (int index = 0; index < num2; ++index)
        this.investigatorsArea2.Add(rd.ReadByte());
    }
  }
}
