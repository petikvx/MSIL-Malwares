// Decompiled with JetBrains decompiler
// Type: 918559986353.332438495006
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003036381570747;
using \u003055158674733;
using \u003077314997907;
using \u003133004791854;
using \u003208825527781;
using \u003226094756440;
using \u003233524418126;
using \u003247133111683;
using \u003305316230596;
using \u003489227910893;
using \u003564524145687;
using \u003573940117928;
using \u003772444843072;
using \u003918559986353;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace \u003918559986353
{
  [Obsolete("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
  internal class \u003332438495006
  {
    private readonly IList<\u003063117452251> \u003891391339245;
    private readonly \u003954832273555 \u003704656311908;
    private readonly IDictionary<string, \u003063117452251> \u003388212712789;
    private \u003063117452251 \u003441945976787;
    private \u003728419014961 \u003339204925240;

    public \u003332438495006(\u003954832273555 resolver)
    {
      this.\u003891391339245 = (IList<\u003063117452251>) new List<\u003063117452251>();
      this.\u003388212712789 = (IDictionary<string, \u003063117452251>) new Dictionary<string, \u003063117452251>();
      this.\u003704656311908 = resolver;
    }

    private void \u003913679369080(\u003063117452251 _param1)
    {
      this.\u003441945976787 = _param1;
      this.\u003891391339245.Add(_param1);
      this.\u003704656311908.\u003220902941596.Add(_param1);
      this.\u003388212712789.Add(_param1.\u003764079019070, _param1);
    }

    private \u003063117452251 \u003315585874753()
    {
      \u003063117452251 obj = this.\u003441945976787;
      this.\u003891391339245.RemoveAt(this.\u003891391339245.Count - 1);
      this.\u003441945976787 = this.\u003891391339245.LastOrDefault<\u003063117452251>();
      return obj;
    }

    private \u003063117452251 \u003889100562898 => this.\u003441945976787;

    internal \u003063117452251 \u003233869012899(\u003250925846196 _param1)
    {
      \u003057567207975 obj1 = \u003057567207975.\u003072692422595(_param1);
      this.\u003339204925240 = obj1 as \u003728419014961;
      \u003063117452251 obj2 = this.\u003965775062935(obj1);
      this.\u003538325635522(obj2);
      return obj2;
    }

    private string \u003877878068389(string _param1) => Uri.UnescapeDataString(_param1).Replace("~1", "/").Replace("~0", "~");

    private \u003063117452251 \u003538325635522(\u003063117452251 _param1)
    {
      if (_param1.\u003468677792700 != null)
      {
        string str1 = _param1.\u003468677792700;
        bool flag = str1.StartsWith("#", StringComparison.Ordinal);
        if (flag)
          str1 = this.\u003877878068389(str1);
        \u003063117452251 obj = this.\u003704656311908.\u003183965402733(str1);
        if (obj == null)
        {
          if (flag)
          {
            string[] strArray = _param1.\u003468677792700.TrimStart('#').Split(new char[1]
            {
              '/'
            }, StringSplitOptions.RemoveEmptyEntries);
            \u003057567207975 source = (\u003057567207975) this.\u003339204925240;
            foreach (string str2 in strArray)
            {
              string str3 = this.\u003877878068389(str2);
              if (source.\u003626381970874 == \u003205973939318.Object)
                source = source.get_Item((object) str3);
              else if (source.\u003626381970874 == \u003205973939318.Array || source.\u003626381970874 == \u003205973939318.Constructor)
              {
                int result;
                source = !int.TryParse(str3, out result) || result < 0 || result >= source.Count<\u003057567207975>() ? (\u003057567207975) null : source.get_Item((object) result);
              }
              if (source == null)
                break;
            }
            if (source != null)
              obj = this.\u003965775062935(source);
          }
          if (obj == null)
            throw new \u003215302783352("Could not resolve schema reference '{0}'.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003468677792700));
        }
        _param1 = obj;
      }
      if (_param1.\u003186296273118)
        return _param1;
      _param1.\u003186296273118 = true;
      if (_param1.\u003871833612035 != null)
      {
        for (int index = 0; index < _param1.\u003871833612035.Count; ++index)
          _param1.\u003871833612035[index] = this.\u003538325635522(_param1.\u003871833612035[index]);
      }
      if (_param1.\u003630523770172 != null)
      {
        for (int index = 0; index < _param1.\u003630523770172.Count; ++index)
          _param1.\u003630523770172[index] = this.\u003538325635522(_param1.\u003630523770172[index]);
      }
      if (_param1.\u003420449488853 != null)
        _param1.\u003420449488853 = this.\u003538325635522(_param1.\u003420449488853);
      if (_param1.\u003523185738257 != null)
      {
        foreach (KeyValuePair<string, \u003063117452251> keyValuePair in _param1.\u003523185738257.ToList<KeyValuePair<string, \u003063117452251>>())
          _param1.\u003523185738257[keyValuePair.Key] = this.\u003538325635522(keyValuePair.Value);
      }
      if (_param1.\u003519841164558 != null)
      {
        foreach (KeyValuePair<string, \u003063117452251> keyValuePair in _param1.\u003519841164558.ToList<KeyValuePair<string, \u003063117452251>>())
          _param1.\u003519841164558[keyValuePair.Key] = this.\u003538325635522(keyValuePair.Value);
      }
      if (_param1.\u003001528407186 != null)
        _param1.\u003001528407186 = this.\u003538325635522(_param1.\u003001528407186);
      return _param1;
    }

    private \u003063117452251 \u003965775062935(\u003057567207975 _param1)
    {
      if (!(_param1 is \u003728419014961 obj1))
        throw \u003215302783352.\u003617279552816((IJsonLineInfo) _param1, _param1.\u003440107432240, "Expected object while parsing schema object, got {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003626381970874));
      \u003057567207975 obj2;
      if (obj1.\u003957208266544("$ref", out obj2))
        return new \u003063117452251()
        {
          \u003468677792700 = (string) obj2
        };
      string str = _param1.\u003440107432240.Replace(".", "/").Replace("[", "/").Replace("]", string.Empty);
      if (!string.IsNullOrEmpty(str))
        str = "/" + str;
      string key = "#" + str;
      \u003063117452251 obj3;
      if (this.\u003388212712789.TryGetValue(key, out obj3))
        return obj3;
      this.\u003913679369080(new \u003063117452251()
      {
        \u003764079019070 = key
      });
      this.\u003232445478966(obj1);
      return this.\u003315585874753();
    }

    private void \u003232445478966(\u003728419014961 _param1)
    {
      using (IEnumerator<KeyValuePair<string, \u003057567207975>> enumerator = _param1.\u003387677634876())
      {
        while (enumerator.MoveNext())
        {
          KeyValuePair<string, \u003057567207975> current = enumerator.Current;
          string key = current.Key;
          // ISSUE: reference to a compiler-generated method
          switch (\u003887184690213.\u003497108463000(key))
          {
            case 299789532:
              if (key == "properties")
              {
                this.\u003889100562898.\u003519841164558 = this.\u003889867880293(current.Value);
                continue;
              }
              continue;
            case 334560121:
              if (key == "minItems")
              {
                this.\u003889100562898.\u003499941683391 = new int?((int) current.Value);
                continue;
              }
              continue;
            case 353304077:
              if (key == "divisibleBy")
              {
                this.\u003889100562898.\u003075275363324 = new double?((double) current.Value);
                continue;
              }
              continue;
            case 479998177:
              if (key == "additionalProperties")
              {
                this.\u003486033545505(current.Value);
                continue;
              }
              continue;
            case 879704937:
              if (key == "description")
              {
                this.\u003889100562898.\u003603816988638 = (string) current.Value;
                continue;
              }
              continue;
            case 926444256:
              if (key == "id")
              {
                this.\u003889100562898.\u003617992922424 = (string) current.Value;
                continue;
              }
              continue;
            case 981021583:
              if (key == "items")
              {
                this.\u003354168973345(current.Value);
                continue;
              }
              continue;
            case 1361572173:
              if (key == "type")
              {
                this.\u003889100562898.\u003844495765970 = this.\u003666215692897(current.Value);
                continue;
              }
              continue;
            case 1542649473:
              if (key == "maximum")
              {
                this.\u003889100562898.\u003362492107222 = new double?((double) current.Value);
                continue;
              }
              continue;
            case 1693958795:
              if (key == "exclusiveMaximum")
              {
                this.\u003889100562898.\u003702359313138 = new bool?((bool) current.Value);
                continue;
              }
              continue;
            case 1913005517:
              if (key == "exclusiveMinimum")
              {
                this.\u003889100562898.\u003450982662155 = new bool?((bool) current.Value);
                continue;
              }
              continue;
            case 2051482624:
              if (key == "additionalItems")
              {
                this.\u003307327052860(current.Value);
                continue;
              }
              continue;
            case 2171383808:
              if (key == "enum")
              {
                this.\u003162920889659(current.Value);
                continue;
              }
              continue;
            case 2223801888:
              if (key == "required")
              {
                this.\u003889100562898.\u003810706635609 = new bool?((bool) current.Value);
                continue;
              }
              continue;
            case 2268922153:
              if (key == "pattern")
              {
                this.\u003889100562898.\u003354415667112 = (string) current.Value;
                continue;
              }
              continue;
            case 2470140894:
              if (key == "default")
              {
                this.\u003889100562898.\u003947177422810 = current.Value.\u003557711116151();
                continue;
              }
              continue;
            case 2474713847:
              if (key == "minimum")
              {
                this.\u003889100562898.\u003425688549824 = new double?((double) current.Value);
                continue;
              }
              continue;
            case 2556802313:
              if (key == "title")
              {
                this.\u003889100562898.\u003535843999977 = (string) current.Value;
                continue;
              }
              continue;
            case 2609687125:
              if (key == "requires")
              {
                this.\u003889100562898.\u003087226265926 = (string) current.Value;
                continue;
              }
              continue;
            case 2642794062:
              if (key == "extends")
              {
                this.\u003424125220583(current.Value);
                continue;
              }
              continue;
            case 2692244416:
              if (key == "disallow")
              {
                this.\u003889100562898.\u003347047529744 = this.\u003666215692897(current.Value);
                continue;
              }
              continue;
            case 2957261815:
              if (key == "minLength")
              {
                this.\u003889100562898.\u003189175829165 = new int?((int) current.Value);
                continue;
              }
              continue;
            case 3114108242:
              if (key == "format")
              {
                this.\u003889100562898.\u003000540733404 = (string) current.Value;
                continue;
              }
              continue;
            case 3456888823:
              if (key == "readonly")
              {
                this.\u003889100562898.\u003936789515863 = new bool?((bool) current.Value);
                continue;
              }
              continue;
            case 3522602594:
              if (key == "uniqueItems")
              {
                this.\u003889100562898.\u003410704869238 = (bool) current.Value;
                continue;
              }
              continue;
            case 3526559937:
              if (key == "maxLength")
              {
                this.\u003889100562898.\u003086429212991 = new int?((int) current.Value);
                continue;
              }
              continue;
            case 3947606640:
              if (key == "patternProperties")
              {
                this.\u003889100562898.\u003523185738257 = this.\u003889867880293(current.Value);
                continue;
              }
              continue;
            case 4128829753:
              if (key == "hidden")
              {
                this.\u003889100562898.\u003880086258742 = new bool?((bool) current.Value);
                continue;
              }
              continue;
            case 4244322099:
              if (key == "maxItems")
              {
                this.\u003889100562898.\u003175239216484 = new int?((int) current.Value);
                continue;
              }
              continue;
            default:
              continue;
          }
        }
      }
    }

    private void \u003424125220583(\u003057567207975 _param1)
    {
      IList<\u003063117452251> objList = (IList<\u003063117452251>) new List<\u003063117452251>();
      if (_param1.\u003626381970874 == \u003205973939318.Array)
      {
        foreach (\u003057567207975 obj in (IEnumerable<\u003057567207975>) _param1)
          objList.Add(this.\u003965775062935(obj));
      }
      else
      {
        \u003063117452251 obj = this.\u003965775062935(_param1);
        if (obj != null)
          objList.Add(obj);
      }
      if (objList.Count <= 0)
        return;
      this.\u003889100562898.\u003871833612035 = objList;
    }

    private void \u003162920889659(\u003057567207975 _param1)
    {
      if (_param1.\u003626381970874 != \u003205973939318.Array)
        throw \u003215302783352.\u003617279552816((IJsonLineInfo) _param1, _param1.\u003440107432240, "Expected Array token while parsing enum values, got {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003626381970874));
      this.\u003889100562898.\u003769410061688 = (IList<\u003057567207975>) new List<\u003057567207975>();
      foreach (\u003057567207975 obj in (IEnumerable<\u003057567207975>) _param1)
        this.\u003889100562898.\u003769410061688.Add(obj.\u003557711116151());
    }

    private void \u003486033545505(\u003057567207975 _param1)
    {
      if (_param1.\u003626381970874 == \u003205973939318.Boolean)
        this.\u003889100562898.\u003969765243710 = (bool) _param1;
      else
        this.\u003889100562898.\u003001528407186 = this.\u003965775062935(_param1);
    }

    private void \u003307327052860(\u003057567207975 _param1)
    {
      if (_param1.\u003626381970874 == \u003205973939318.Boolean)
        this.\u003889100562898.\u003395794137783 = (bool) _param1;
      else
        this.\u003889100562898.\u003420449488853 = this.\u003965775062935(_param1);
    }

    private IDictionary<string, \u003063117452251> \u003889867880293(
      \u003057567207975 _param1)
    {
      IDictionary<string, \u003063117452251> dictionary = (IDictionary<string, \u003063117452251>) new Dictionary<string, \u003063117452251>();
      if (_param1.\u003626381970874 != \u003205973939318.Object)
        throw \u003215302783352.\u003617279552816((IJsonLineInfo) _param1, _param1.\u003440107432240, "Expected Object token while parsing schema properties, got {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003626381970874));
      foreach (\u003165411198507 obj in (IEnumerable<\u003057567207975>) _param1)
      {
        if (dictionary.ContainsKey(obj.\u003046499699023))
          throw new \u003215302783352("Property {0} has already been defined in schema.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) obj.\u003046499699023));
        dictionary.Add(obj.\u003046499699023, this.\u003965775062935(obj.\u003019890020644));
      }
      return dictionary;
    }

    private void \u003354168973345(\u003057567207975 _param1)
    {
      this.\u003889100562898.\u003630523770172 = (IList<\u003063117452251>) new List<\u003063117452251>();
      switch (_param1.\u003626381970874)
      {
        case \u003205973939318.Object:
          this.\u003889100562898.\u003630523770172.Add(this.\u003965775062935(_param1));
          this.\u003889100562898.\u003691210761761 = false;
          break;
        case \u003205973939318.Array:
          this.\u003889100562898.\u003691210761761 = true;
          using (IEnumerator<\u003057567207975> enumerator = ((IEnumerable<\u003057567207975>) _param1).GetEnumerator())
          {
            while (enumerator.MoveNext())
              this.\u003889100562898.\u003630523770172.Add(this.\u003965775062935(enumerator.Current));
            break;
          }
        default:
          throw \u003215302783352.\u003617279552816((IJsonLineInfo) _param1, _param1.\u003440107432240, "Expected array or JSON schema object, got {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003626381970874));
      }
    }

    private \u003499429179258? \u003666215692897(\u003057567207975 _param1)
    {
      switch (_param1.\u003626381970874)
      {
        case \u003205973939318.Array:
          \u003499429179258? nullable1 = new \u003499429179258?(\u003499429179258.None);
          foreach (\u003057567207975 obj1 in (IEnumerable<\u003057567207975>) _param1)
          {
            if (obj1.\u003626381970874 != \u003205973939318.String)
              throw \u003215302783352.\u003617279552816((IJsonLineInfo) obj1, obj1.\u003440107432240, "Expected JSON schema type string token, got {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003626381970874));
            \u003499429179258? nullable2 = nullable1;
            \u003499429179258 obj2 = \u003332438495006.\u003063907951446((string) obj1);
            nullable1 = nullable2.HasValue ? new \u003499429179258?(nullable2.GetValueOrDefault() | obj2) : new \u003499429179258?();
          }
          return nullable1;
        case \u003205973939318.String:
          return new \u003499429179258?(\u003332438495006.\u003063907951446((string) _param1));
        default:
          throw \u003215302783352.\u003617279552816((IJsonLineInfo) _param1, _param1.\u003440107432240, "Expected array or JSON schema type string token, got {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003626381970874));
      }
    }

    internal static \u003499429179258 \u003063907951446(string _param0)
    {
      \u003499429179258 obj;
      if (!\u003069489906335.\u003994134859569.TryGetValue(_param0, out obj))
        throw new \u003215302783352("Invalid JSON schema type: {0}".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param0));
      return obj;
    }

    internal static string \u003513576906869(\u003499429179258 _param0)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003332438495006.\u003008047392147 obj = (\u003332438495006.\u003008047392147) new \u003351561221647.\u003544141920647();
      // ISSUE: reference to a compiler-generated field
      ((\u003351561221647.\u003544141920647) obj).\u003377849376280 = _param0;
      // ISSUE: reference to a compiler-generated method
      return \u003069489906335.\u003994134859569.Single<KeyValuePair<string, \u003499429179258>>(new Func<KeyValuePair<string, \u003499429179258>, bool>(obj.\u003805283571675)).Key;
    }
  }
}
