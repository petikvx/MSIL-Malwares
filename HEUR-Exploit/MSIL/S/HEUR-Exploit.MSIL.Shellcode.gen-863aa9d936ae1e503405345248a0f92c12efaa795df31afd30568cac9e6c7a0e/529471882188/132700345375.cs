// Decompiled with JetBrains decompiler
// Type: 529471882188.132700345375
// Assembly: 052709057542, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 359C9CB9-9F6B-407E-806A-B212EE061A4B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-863aa9d936ae1e503405345248a0f92c12efaa795df31afd30568cac9e6c7a0e.exe

using \u003529471882188;
using \u003541631571021;
using \u003774977010890;
using \u003879009196560;
using Microsoft.AspNet.Scaffolding.Core.Metadata;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web.DynamicData;
using System.Web.DynamicData.ModelProviders;

namespace \u003529471882188
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  public class \u003132700345375
  {
    private readonly string \u003505068977788;

    public \u003132700345375(string projectTypeGuid) => this.\u003505068977788 = projectTypeGuid != null ? projectTypeGuid : throw new ArgumentNullException(nameof (projectTypeGuid));

    public ModelMetadata \u003023121341388(MetaTable _param1_1)
    {
      PropertyMetadata[] source = this.\u003895820956814(_param1_1);
      ModelMetadata modelMetadata = new ModelMetadata()
      {
        EntitySetName = _param1_1.DataContextPropertyName,
        Properties = ((IEnumerable<PropertyMetadata>) source).ToArray<PropertyMetadata>(),
        PrimaryKeys = ((IEnumerable<PropertyMetadata>) source).Where<PropertyMetadata>((Func<PropertyMetadata, bool>) (_param1_2 => _param1_2.IsPrimaryKey)).ToArray<PropertyMetadata>()
      };
      modelMetadata.RelatedEntities = this.\u003419251925999(modelMetadata);
      return modelMetadata;
    }

    private RelatedModelMetadata[] \u003419251925999(ModelMetadata _param1_1) => ((IEnumerable<PropertyMetadata>) _param1_1.Properties).Where<PropertyMetadata>((Func<PropertyMetadata, bool>) (_param1_2 => !_param1_2.IsIndependentAssociation && _param1_2.RelatedModel != null)).Select<PropertyMetadata, RelatedModelMetadata>((Func<PropertyMetadata, RelatedModelMetadata>) (_param1_3 => _param1_3.RelatedModel)).ToArray<RelatedModelMetadata>();

    private RelatedModelMetadata \u003787525958043(MetaColumn _param1_1)
    {
      switch (_param1_1)
      {
        case MetaForeignKeyColumn foreignKeyColumn when foreignKeyColumn.ForeignKeyNames.Any<string>():
          MetaTable parentTable = foreignKeyColumn.ParentTable;
          return new RelatedModelMetadata()
          {
            EntitySetName = parentTable.DataContextPropertyName,
            AssociationPropertyName = _param1_1.Name,
            TypeName = parentTable.EntityType.FullName,
            ShortTypeName = \u003393711416104.\u003802778839031(parentTable.EntityType, this.\u003505068977788),
            DisplayPropertyName = parentTable.DisplayColumn.Name,
            PrimaryKeyNames = parentTable.PrimaryKeyColumns.Select<MetaColumn, string>((Func<MetaColumn, string>) (_param1_2 => _param1_2.EntityTypeProperty.Name)).ToArray<string>(),
            ForeignKeyPropertyNames = foreignKeyColumn.ForeignKeyNames.ToArray<string>()
          };
        case MetaChildrenColumn metaChildrenColumn:
          MetaTable childTable = metaChildrenColumn.ChildTable;
          return new RelatedModelMetadata()
          {
            EntitySetName = childTable.DataContextPropertyName,
            AssociationPropertyName = _param1_1.Name,
            TypeName = childTable.EntityType.FullName,
            ShortTypeName = \u003393711416104.\u003802778839031(childTable.EntityType, this.\u003505068977788),
            DisplayPropertyName = childTable.DisplayColumn.Name,
            PrimaryKeyNames = childTable.PrimaryKeyColumns.Select<MetaColumn, string>((Func<MetaColumn, string>) (_param1_3 => _param1_3.EntityTypeProperty.Name)).ToArray<string>(),
            ForeignKeyPropertyNames = Array.Empty<string>()
          };
        default:
          return (RelatedModelMetadata) null;
      }
    }

    private PropertyMetadata[] \u003895820956814(MetaTable _param1)
    {
      List<PropertyMetadata> propertyMetadataList = new List<PropertyMetadata>();
      foreach (MetaColumn column in _param1.Columns)
      {
        PropertyMetadata propertyMetadata = new PropertyMetadata()
        {
          PropertyName = column.Name,
          TypeName = column.ColumnType.FullName,
          IsReadOnly = column.IsReadOnly,
          IsPrimaryKey = column.IsPrimaryKey,
          IsForeignKey = column.IsForeignKeyComponent,
          IsAutoGenerated = column.IsGenerated,
          IsAssociation = column.Provider.Association != null,
          ShortTypeName = \u003393711416104.\u003802778839031(column.ColumnType, this.\u003505068977788),
          DefaultValue = \u003393711416104.\u003339171776829(column.ColumnType, this.\u003505068977788)
        };
        ScaffoldColumnAttribute scaffoldColumnAttribute = column.Attributes.OfType<ScaffoldColumnAttribute>().FirstOrDefault<ScaffoldColumnAttribute>();
        propertyMetadata.Scaffold = scaffoldColumnAttribute == null || scaffoldColumnAttribute.Scaffold;
        if (propertyMetadata.IsAssociation)
        {
          propertyMetadata.AssociationDirection = this.\u003827887954439(column.Provider.Association.Direction);
          propertyMetadata.IsIndependentAssociation = this.\u003848033695463(column);
        }
        if (column.Provider is IEFColumnPropertiesProvider provider)
        {
          propertyMetadata.IsComplexType = provider.ColumnProperties.HasFlag((Enum) \u003815752760993.IsComplexType);
          propertyMetadata.IsConcurrencyProperty = provider.ColumnProperties.HasFlag((Enum) \u003815752760993.IsConcurrencyProperty);
          propertyMetadata.IsEnum = provider.ColumnProperties.HasFlag((Enum) \u003815752760993.IsEnum);
          propertyMetadata.IsEnumFlags = provider.ColumnProperties.HasFlag((Enum) \u003815752760993.IsEnumFlags);
        }
        propertyMetadata.RelatedModel = this.\u003787525958043(column);
        propertyMetadataList.Add(propertyMetadata);
      }
      return propertyMetadataList.ToArray();
    }

    private bool \u003848033695463(MetaColumn _param1)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003132700345375.\u003145030892059 obj = (\u003132700345375.\u003145030892059) new \u003132700345375.\u003741691280136();
      // ISSUE: reference to a compiler-generated field
      ((\u003132700345375.\u003741691280136) obj).\u003302490384388 = _param1 as MetaForeignKeyColumn;
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      if (((\u003132700345375.\u003741691280136) obj).\u003302490384388 != null && ((\u003132700345375.\u003741691280136) obj).\u003302490384388.ForeignKeyNames.Any<string>())
      {
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated method
        return !((\u003132700345375.\u003741691280136) obj).\u003302490384388.ForeignKeyNames.All<string>(new Func<string, bool>(obj.\u003730816409963));
      }
      return _param1 is MetaChildrenColumn;
    }

    internal AssociationDirection \u003827887954439(AssociationDirection _param1)
    {
      switch (_param1)
      {
        case AssociationDirection.OneToOne:
          return (AssociationDirection) 1;
        case AssociationDirection.OneToMany:
          return (AssociationDirection) 2;
        case AssociationDirection.ManyToOne:
          return (AssociationDirection) 3;
        case AssociationDirection.ManyToMany:
          return (AssociationDirection) 4;
        default:
          return (AssociationDirection) 0;
      }
    }
  }
}
