// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: WhenAllPromi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: EC39505B-F84A-4834-9FA9-F8C42A2FB5BC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-fabdc6de70c953d03389a8cd60eaa852c968c6328b070b4049f01954433e9324.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206E‭⁬‭⁭‪‏⁫⁯‍‎⁬‎⁫⁬⁮‌⁬⁬‌‎‎‏‮‭⁪‏⁫‮‫⁪‍⁮‌⁭⁯⁬⁭‭‪‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -708935829;
        bool finished1;
        bool flag;
        bool finished2;
        int index;
        PlayerState[] playerStates;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -910188992)) % 17U)
          {
            case 0:
              finished1 = true;
              num1 = (int) num2 * -1672306149 ^ 1258765696;
              continue;
            case 1:
              finished1 = true;
              num1 = (int) num2 * 176204268 ^ 182371521;
              continue;
            case 2:
              int num3;
              num1 = num3 = index >= playerStates.Length ? -1384777978 : (num3 = -568237774);
              continue;
            case 3:
              num1 = (int) num2 * -2013484227 ^ -1772066558;
              continue;
            case 4:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * 582343200 ^ -59515353;
              continue;
            case 5:
              int num4 = !finished2 ? -1076592346 : (num4 = -1050607222);
              num1 = num4 ^ (int) num2 * 809256300;
              continue;
            case 6:
              playerState = playerStates[index];
              num1 = -1398672855;
              continue;
            case 7:
              ++index;
              num1 = -1579604005;
              continue;
            case 8:
              finished2 = this._finished;
              num1 = (int) num2 * -328918879 ^ -668946042;
              continue;
            case 9:
              num1 = (int) num2 * 1169394000 ^ -1085151902;
              continue;
            case 10:
              finished1 = false;
              num1 = (int) num2 * -352820156 ^ -199822128;
              continue;
            case 11:
              index = 0;
              num1 = (int) num2 * 1626879675 ^ -1638216226;
              continue;
            case 12:
              goto label_1;
            case 13:
              num1 = (int) num2 * 781845534 ^ 174808889;
              continue;
            case 14:
              int num5 = !flag ? -1305551344 : (num5 = -963091144);
              num1 = num5 ^ (int) num2 * -1516152320;
              continue;
            case 16:
              playerStates = this._playerStates;
              num1 = -767074477;
              continue;
            default:
              goto label_18;
          }
        }
label_18:
        return finished1;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -964889560;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1415246392)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * 843689407 ^ -1129544879;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = 919668521;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 299042337)) % 9U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * -1797932276 ^ 1294250450;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * 1207064852 ^ -1780570507;
            continue;
          case 3:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 868226760 ^ -2102385115;
            continue;
          case 4:
            this.Winners.Clear();
            num1 = (int) num2 * -101222548 ^ 1109377858;
            continue;
          case 5:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1814582129 ^ 1057408396;
            continue;
          case 6:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 269362199 ^ 956270;
            continue;
          case 7:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 1812825431 ^ 514102259;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1856477958;
      int planningCardsCount;
      bool flag1;
      PlayerState playerState;
      int num2;
      int index;
      Player player;
      bool flag2;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1679823491)) % 28U)
        {
          case 0:
            playerState.Sprint = -1;
            num1 = (int) num3 * 988552404 ^ 2017084506;
            continue;
          case 1:
            playerState.Sprint = 0;
            num1 = (int) num3 * -57212854 ^ -967103886;
            continue;
          case 2:
            num1 = 901384828;
            continue;
          case 3:
            playerState.State = State.Playing;
            num1 = (int) num3 * -117898003 ^ -448246511;
            continue;
          case 4:
            goto label_1;
          case 5:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1346946566 ^ -1305009512;
            continue;
          case 6:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 624580128 ^ 995226961;
            continue;
          case 7:
            int num4;
            num1 = num4 = index < this.Players.Length ? 827953857 : (num4 = 1044583993);
            continue;
          case 8:
            num1 = (int) num3 * -1300288747 ^ -849131569;
            continue;
          case 9:
            index = 0;
            num1 = (int) num3 * 1993013586 ^ 1044940144;
            continue;
          case 10:
            int num5 = !flag2 ? -1312129649 : (num5 = -414091968);
            num1 = num5 ^ (int) num3 * 737450468;
            continue;
          case 11:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 1528881846 ^ -1722813442;
            continue;
          case 12:
            int num6 = flag1 ? -1521300875 : (num6 = -277423973);
            num1 = num6 ^ (int) num3 * -1093490663;
            continue;
          case 13:
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * -1092099762 ^ -289768799;
            continue;
          case 14:
            goto label_3;
          case 15:
            num1 = (int) num3 * 1933408012 ^ 1405402937;
            continue;
          case 16:
            num2 = 0;
            num1 = 499239133;
            continue;
          case 17:
            num1 = (int) num3 * 250949172 ^ -777390724;
            continue;
          case 18:
            num1 = 2115953147;
            continue;
          case 19:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * 1209158726 ^ -2147233500;
            continue;
          case 20:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 455030673;
            continue;
          case 21:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1543193480 ^ -1205582315;
            continue;
          case 22:
            int num7 = !morePlanningSprint ? 1131758548 : (num7 = 662727211);
            num1 = num7 ^ (int) num3 * 1609283516;
            continue;
          case 23:
            flag2 = num2 > 0;
            num1 = 1888497233;
            continue;
          case 24:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1542126674;
            continue;
          case 25:
            ++index;
            num1 = (int) num3 * -1900647700 ^ -1552233340;
            continue;
          case 26:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1335839887 ^ 1011349149;
            continue;
          case 27:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 868449907 ^ -74056671;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      bool flag = this._currentPlayer >= this.Players.Length;
label_1:
      int num1 = -694986607;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -713909397)) % 14U)
        {
          case 0:
            num1 = (int) num2 * -1843191588 ^ -780329358;
            continue;
          case 1:
            num1 = (int) num2 * 1830874562 ^ 1463732609;
            continue;
          case 2:
            num1 = (int) num2 * 1175051727 ^ 549197291;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.Print((object) Game.\u206D⁫⁬⁪⁮‮⁬⁬‪​‬‌‪‮⁭‭⁫‭⁮⁮⁪⁯⁫⁬‭⁮⁯‪‪⁮⁭⁫⁫‎‭‭‬‬‬⁪‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1128186169;
            continue;
          case 5:
            goto label_3;
          case 6:
            int num3 = flag ? 1194944148 : (num3 = 314737723);
            num1 = num3 ^ (int) num2 * 2088597834;
            continue;
          case 7:
            this.Print((object) Game.\u200D⁮⁫‭‏‌⁬‍⁯‮‪‌‏⁮‫‬‎⁪⁭​‌‎​⁯⁪‪⁪‍‪‌‎‏‮‭⁮⁫‮‪‪⁭‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1729647023 ^ 371478875;
            continue;
          case 8:
            num1 = (int) num2 * 684083206 ^ 135660042;
            continue;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1033747691 ^ 449212457;
            continue;
          case 10:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1278675603 ^ 1705461459;
            continue;
          case 11:
            int num4 = this._currentTurn <= 0 ? 352474510 : (num4 = 240668690);
            num1 = num4 ^ (int) num2 * -833489691;
            continue;
          case 12:
            this.PlayerTurn(this._currentPlayer);
            num1 = -745679837;
            continue;
          case 13:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1830017402 ^ -664799162;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1442770292;
      while (true)
      {
        uint num2;
        Player player;
        PlayerState playerState1;
        int index;
        bool flag1;
        bool onlyOneWinner;
        bool flag2;
        PlayerState playerState2;
        bool flag3;
        int num3;
        Card card;
        bool flag4;
        int num4;
        int num5;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num6;
        switch ((num2 = (uint) (num1 ^ -2021954260)) % 86U)
        {
          case 0:
            flag5 = index < this._playerStates.Length;
            num1 = -524798358;
            continue;
          case 1:
            int num7;
            num1 = num7 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? -376960470 : (num7 = -993199890);
            continue;
          case 2:
            num1 = -2141187644;
            continue;
          case 3:
            int num8 = !flag4 ? -1030780751 : (num8 = -1886959459);
            num1 = num8 ^ (int) num2 * 1310656816;
            continue;
          case 4:
            num1 = (int) num2 * -958374201 ^ 1642143169;
            continue;
          case 5:
            flag2 = flag6;
            num1 = -1284639700;
            continue;
          case 6:
            num1 = -1408891552;
            continue;
          case 7:
            this._finished = true;
            num1 = (int) num2 * 229870638 ^ 1182671396;
            continue;
          case 8:
            num1 = (int) num2 * 1494495948 ^ -472732171;
            continue;
          case 9:
            flag6 = true;
            num1 = (int) num2 * -485110816 ^ 1514422829;
            continue;
          case 10:
            num1 = -678121884;
            continue;
          case 11:
            num1 = (int) num2 * 289099527 ^ 1972271678;
            continue;
          case 12:
            num1 = (int) num2 * 1758116878 ^ 2104265748;
            continue;
          case 13:
            num1 = (int) num2 * -1668347023 ^ -1210415844;
            continue;
          case 14:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag9 ? (object) "ALL " : (object) "", flag10 ? (object) "receives" : (object) "pays", (object) Game.\u200F‭‍​​⁫​‪‏⁪‭‫⁮⁬⁭⁫‭‬⁯​‮‏‬‌⁭⁯⁯⁬⁬‍‬⁯⁫⁮⁬‎⁮‬‪‍‮(num3), flag6 ? (object) "advance" : (object) "stay");
            flag3 = !flag9;
            num1 = -671718131;
            continue;
          case 15:
            playerState2.State = State.Lose;
            int num9;
            num1 = num9 = this.Losers.Contains(index) ? -1037548129 : (num9 = -1792262001);
            continue;
          case 16:
            int num10 = flag5 ? 22863313 : (num10 = 1553589312);
            num1 = num10 ^ (int) num2 * 1371047904;
            continue;
          case 17:
            goto label_3;
          case 18:
            ++index;
            num1 = -164850932;
            continue;
          case 19:
            this.Losers.Add(index);
            num1 = (int) num2 * 648452927 ^ -854059544;
            continue;
          case 20:
            num1 = (int) num2 * -2060833954 ^ 499274024;
            continue;
          case 21:
            int num11 = !flag12 ? 1341248417 : (num11 = 1794452400);
            num1 = num11 ^ (int) num2 * 922744530;
            continue;
          case 22:
            num1 = (int) num2 * -888348863 ^ -1563879072;
            continue;
          case 23:
            index = 0;
            num1 = (int) num2 * 725838449 ^ 1533407169;
            continue;
          case 24:
            card = this.DrawCard();
            num1 = (int) num2 * 2115086595 ^ 327040818;
            continue;
          case 25:
            int num12 = !flag11 ? -1727461172 : (num12 = -1071226626);
            num1 = num12 ^ (int) num2 * -751437718;
            continue;
          case 26:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 900641642 ^ -751546960;
            continue;
          case 27:
            int num13 = flag3 ? -769448078 : (num13 = -376261347);
            num1 = num13 ^ (int) num2 * -418736562;
            continue;
          case 28:
            int num14 = flag10 ? -623664532 : (num14 = -505561174);
            num1 = num14 ^ (int) num2 * 1309170176;
            continue;
          case 29:
            num1 = -1864736839;
            continue;
          case 30:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1878207093 ^ 119308271;
            continue;
          case 31:
            num3 = Game.\u206B⁫‪‪⁫⁬‬‌‍⁪⁬‬⁬‮⁭⁮‬‮‌⁫‏​‍‫⁫⁮⁯⁮​‍​‪⁫‎‏⁫‮⁭‍‫‮(0, num4);
            num1 = (int) num2 * 870888377 ^ -941573945;
            continue;
          case 32:
            num1 = -622457577;
            continue;
          case 33:
            num1 = (int) num2 * -477728085 ^ -1445503956;
            continue;
          case 34:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 270255252 ^ 1092996934;
            continue;
          case 35:
            int num15 = !flag1 ? 1150522641 : (num15 = 866792390);
            num1 = num15 ^ (int) num2 * -2056777846;
            continue;
          case 36:
            num1 = -1318018761;
            continue;
          case 37:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * 1673650902 ^ -1654165100;
            continue;
          case 38:
            num5 = 0;
            num1 = (int) num2 * -857699371 ^ 1304592002;
            continue;
          case 39:
            int num16 = !flag7 ? -1600636179 : (num16 = -129896271);
            num1 = num16 ^ (int) num2 * 2006325743;
            continue;
          case 40:
            flag8 = num5 < this._playerStates.Length;
            num1 = -1199703666;
            continue;
          case 41:
            playerState1.State = State.Won;
            num1 = (int) num2 * 771263673 ^ -1382417370;
            continue;
          case 42:
            this.Losers.Add(num5);
            num1 = (int) num2 * -993250272 ^ 1145632747;
            continue;
          case 43:
            num1 = (int) num2 * -1011751547 ^ -1453035745;
            continue;
          case 44:
            playerState1.State = State.Lose;
            flag12 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1251824891 ^ -219257895;
            continue;
          case 45:
            num1 = -1006063974;
            continue;
          case 46:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            flag6 = num4 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -1947116151 ^ 484434165;
            continue;
          case 47:
            num3 = card.Impact;
            num1 = (int) num2 * -1629172151 ^ 75889857;
            continue;
          case 48:
            num1 = (int) num2 * -1725096715 ^ -1227256540;
            continue;
          case 49:
            num1 = (int) num2 * -1881014104 ^ -470605448;
            continue;
          case 50:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1325105990 ^ 1675874011;
            continue;
          case 51:
            num1 = -218423088;
            continue;
          case 52:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -2107591798 ^ -1805741387;
            continue;
          case 53:
            flag6 = false;
            num1 = -1482328030;
            continue;
          case 54:
            int num17 = flag2 ? -2023259297 : (num17 = -1030563026);
            num1 = num17 ^ (int) num2 * -123708128;
            continue;
          case 55:
            num1 = -1656707361;
            continue;
          case 56:
            int num18;
            num1 = num18 = playerState1.Sprint < 0 ? -1285303284 : (num18 = -1295171077);
            continue;
          case 57:
            this.Winners.Add(playerIndex);
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -475432309 ^ 1937693572;
            continue;
          case 58:
            num1 = (int) num2 * 2114820264 ^ -568463257;
            continue;
          case 59:
            int num19 = onlyOneWinner ? 140039595 : (num19 = 30155009);
            num1 = num19 ^ (int) num2 * 1104364084;
            continue;
          case 60:
            ++num5;
            num1 = -88921632;
            continue;
          case 61:
            playerState1.Resources -= num3;
            flag7 = playerState1.Resources < 0;
            num1 = (int) num2 * 1614069845 ^ -1885894456;
            continue;
          case 62:
            this.Print((object) Game.\u200D⁮⁫‭‏‌⁬‍⁯‮‪‌‏⁮‫‬‎⁪⁭​‌‎​⁯⁪‪⁪‍‪‌‎‏‮‭⁮⁫‮‪‪⁭‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -1685035155 ^ -1792789353;
            continue;
          case 63:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1689246129 ^ 108377174;
            continue;
          case 64:
            num1 = (int) num2 * 1856965528 ^ -1051428777;
            continue;
          case 65:
            ++playerState1.Sprint;
            num1 = (int) num2 * -878005239 ^ 475587877;
            continue;
          case 66:
            goto label_1;
          case 67:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 68:
            playerState2.Resources -= Game.\u206B⁫‪‪⁫⁬‬‌‍⁪⁬‬⁬‮⁭⁮‬‮‌⁫‏​‍‫⁫⁮⁯⁮​‍​‪⁫‎‏⁫‮⁭‍‫‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            flag4 = playerState2.Resources >= 0;
            num1 = (int) num2 * 508451090 ^ -287234301;
            continue;
          case 69:
            num1 = -1999833063;
            continue;
          case 70:
            num1 = (int) num2 * -462415155 ^ -1321860872;
            continue;
          case 71:
            num1 = (int) num2 * -1263228544 ^ 988835345;
            continue;
          case 72:
            int num20;
            num1 = num20 = playerState1.Sprint <= this.Rules.SprintCount ? -1864736839 : (num20 = -658847789);
            continue;
          case 73:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 700530464 ^ -1216858625;
            continue;
          case 74:
            int num21 = !flag8 ? 9566963 : (num21 = 454130116);
            num1 = num21 ^ (int) num2 * -1020106214;
            continue;
          case 75:
            num1 = (int) num2 * 639649160 ^ 1048958423;
            continue;
          case 76:
            flag1 = !this.Losers.Contains(num5);
            num1 = -1627310987;
            continue;
          case 77:
            flag11 = playerState1.State != 0;
            num1 = (int) num2 * 1202724024 ^ -1493236153;
            continue;
          case 78:
            num1 = (int) num2 * -266996365 ^ 1501561453;
            continue;
          case 79:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200D⁮⁫‭‏‌⁬‍⁯‮‪‌‏⁮‫‬‎⁪⁭​‌‎​⁯⁪‪⁪‍‪‌‎‏‮‭⁮⁫‮‪‪⁭‮("\t", playerState3 != null ? Game.\u200C‎‬​⁬‎‫⁯⁪‭‍⁮‮‍⁮‎⁯⁮⁪‌‌⁫⁯‎⁪‬‬⁭⁬‏‍‭‏‮⁫​⁪‍​‭‮((object) playerState3) : (string) null));
            num1 = -1399059776;
            continue;
          case 80:
            num1 = (int) num2 * 1666255421 ^ -1790534108;
            continue;
          case 81:
            num1 = (int) num2 * -144167604 ^ 1100631849;
            continue;
          case 82:
            flag10 = card.Impact < 0;
            num1 = (int) num2 * 200288008 ^ 1625310574;
            continue;
          case 83:
            num1 = (int) num2 * -1009368829 ^ -630375063;
            continue;
          case 84:
            int num22 = num5 == playerIndex ? 166042053 : (num22 = 2018743708);
            num1 = num22 ^ (int) num2 * -569225537;
            continue;
          case 85:
            flag6 = true;
            num1 = (int) num2 * -1492235738 ^ 567633515;
            continue;
          default:
            goto label_91;
        }
        flag9 = num6 != 0;
        num1 = -1617465836;
      }
label_3:
      return;
label_91:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1922592265;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1492844864)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 429303553 ^ -62994728;
            continue;
          case 1:
            int num3 = this._deck.Count <= 0 ? 1919418545 : (num3 = 995536290);
            num1 = num3 ^ (int) num2 * 1725438634;
            continue;
          case 2:
            this._deck.RemoveAt(0);
            card2 = card1;
            num1 = (int) num2 * 1509070020 ^ -1123887746;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * -981080725 ^ 911184321;
            continue;
          case 4:
            goto label_1;
          case 5:
            card1 = this._deck[0];
            num1 = 1659747908;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -1785119244;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1808808723)) % 8U)
        {
          case 0:
            flag = index < this._playerStates.Length;
            num1 = -48508442;
            continue;
          case 1:
            str1 = "";
            index = 0;
            num1 = (int) num2 * -39698996 ^ -550787479;
            continue;
          case 3:
            int num3 = flag ? 466100751 : (num3 = 841609460);
            num1 = num3 ^ (int) num2 * -1457830171;
            continue;
          case 4:
            goto label_1;
          case 5:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200C‎‬​⁬‎‫⁯⁪‭‍⁮‮‍⁮‎⁯⁮⁪‌‌⁫⁯‎⁪‬‬⁭⁬‏‍‭‏‮⁫​⁪‍​‭‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200D‪‏‭⁫⁪⁯‭⁭‏‬‎‬‎‭⁫‎‪‏‪⁯⁪‏‬⁯‪‮‍⁯‬‬‭‪⁪⁮⁪‌‫‮⁪‮(strArray);
            num1 = -868786214;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * -1531437325 ^ -28514859;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -57854230 ^ -900290365;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more) => Game.\u206F‍⁫‫‮‎‍⁪‭⁪‬‌⁫⁬‌‬⁭‎‫‫‎⁪‏‌⁯‪‎‏​⁭‌‬‎⁮‫‮‪‍⁭⁭‮(this._buffer, Game.\u202E⁭‫​​‌‬‬‪‭‪‪‬‭‏⁬⁪⁫⁯⁬⁪‭⁬‬⁭‍⁯‭‌‭⁭‌‫‎​⁯⁯‍‫⁫‮(Game.\u200C‎‬​⁬‎‫⁯⁪‭‍⁮‮‍⁮‎⁯⁮⁪‌‌⁫⁯‎⁪‬‬⁭⁬‏‍‭‏‮⁫​⁪‍​‭‮(text), more));

    static Random \u206E‭⁬‭⁭‪‏⁫⁯‍‎⁬‎⁫⁬⁮‌⁬⁬‌‎‎‏‮‭⁪‏⁫‮‫⁪‍⁮‌⁭⁯⁬⁭‭‪‮([In] int obj0) => new Random(obj0);

    static string \u206D⁫⁬⁪⁮‮⁬⁬‪​‬‌‪‮⁭‭⁫‭⁮⁮⁪⁯⁫⁬‭⁮⁯‪‪⁮⁭⁫⁫‎‭‭‬‬‬⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200D⁮⁫‭‏‌⁬‍⁯‮‪‌‏⁮‫‬‎⁪⁭​‌‎​⁯⁪‪⁪‍‪‌‎‏‮‭⁮⁫‮‪‪⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206B⁫‪‪⁫⁬‬‌‍⁪⁬‬⁬‮⁭⁮‬‮‌⁫‏​‍‫⁫⁮⁯⁮​‍​‪⁫‎‏⁫‮⁭‍‫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200F‭‍​​⁫​‪‏⁪‭‫⁮⁬⁭⁫‭‬⁯​‮‏‬‌⁭⁯⁯⁬⁬‍‬⁯⁫⁮⁬‎⁮‬‪‍‮([In] int obj0) => Math.Abs(obj0);

    static string \u200C‎‬​⁬‎‫⁯⁪‭‍⁮‮‍⁮‎⁯⁮⁪‌‌⁫⁯‎⁪‬‬⁭⁬‏‍‭‏‮⁫​⁪‍​‭‮([In] object obj0) => obj0.ToString();

    static string \u200D‪‏‭⁫⁪⁯‭⁭‏‬‎‬‎‭⁫‎‪‏‪⁯⁪‏‬⁯‪‮‍⁯‬‬‭‪⁪⁮⁪‌‫‮⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202E⁭‫​​‌‬‬‪‭‪‪‬‭‏⁬⁪⁫⁯⁬⁪‭⁬‬⁭‍⁯‭‌‭⁭‌‫‎​⁯⁯‍‫⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206F‍⁫‫‮‎‍⁪‭⁪‬‌⁫⁬‌‬⁭‎‫‫‎⁪‏‌⁯‪‎‏​⁭‌‬‎⁮‫‮‪‍⁭⁭‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
