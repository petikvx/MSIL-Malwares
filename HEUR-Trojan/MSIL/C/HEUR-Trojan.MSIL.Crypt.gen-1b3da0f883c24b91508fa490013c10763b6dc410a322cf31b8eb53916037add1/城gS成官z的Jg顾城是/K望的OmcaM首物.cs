// Decompiled with JetBrains decompiler
// Type: 城gS成官z的Jg顾城是.K望的OmcaM首物
// Assembly: zr太顾DDP izGC氏官, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3E60E20-DA1E-427E-85AF-7B8FBB134143
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b3da0f883c24b91508fa490013c10763b6dc410a322cf31b8eb53916037add1.exe

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace 城gS成官z的Jg顾城是
{
  [ToolboxItem(true)]
  [DesignerCategory("code")]
  [HelpKeyword("vs.data.DataSet")]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("Database1DataSet")]
  [Serializable]
  public class K望的OmcaM首物 : DataSet
  {
    private K望的OmcaM首物.ItemDataTable lZp执TzI城是Hh;
    private K望的OmcaM首物.OrderDataTable Fs家SN城P希JS商I族;
    private K望的OmcaM首物.OrderDetailDataTable FsoS商wEy顾Q;
    private DataRelation nphh顾zmcH;
    private DataRelation Wj商的BW成商顾PD的;
    private SchemaSerializationMode QQ太L物lEHYJ = SchemaSerializationMode.IncludeSchema;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public K望的OmcaM首物()
    {
      this.BeginInit();
      this.的物h的Opysp商商();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.RE的V公行l希mQv官);
      this.Tables.CollectionChanged += changeEventHandler;
      this.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    protected K望的OmcaM首物(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.lf顾P太PLI太U生顾泽(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.RE的V公行l希mQv官);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (Item)] != null)
            this.Tables.Add((DataTable) new K望的OmcaM首物.ItemDataTable(dataSet.Tables[nameof (Item)]));
          if (dataSet.Tables[nameof (Order)] != null)
            this.Tables.Add((DataTable) new K望的OmcaM首物.OrderDataTable(dataSet.Tables[nameof (Order)]));
          if (dataSet.Tables[nameof (OrderDetail)] != null)
            this.Tables.Add((DataTable) new K望的OmcaM首物.OrderDetailDataTable(dataSet.Tables[nameof (OrderDetail)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.家她IUzOy的P();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.RE的V公行l希mQv官);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [Browsable(false)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public K望的OmcaM首物.ItemDataTable Item => this.lZp执TzI城是Hh;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public K望的OmcaM首物.OrderDataTable Order => this.Fs家SN城P希JS商I族;

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public K望的OmcaM首物.OrderDetailDataTable OrderDetail => this.FsoS商wEy顾Q;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this.QQ太L物lEHYJ;
      set => this.QQ太L物lEHYJ = value;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [DebuggerNonUserCode]
    public new DataTableCollection Tables => this.Tables;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [DebuggerNonUserCode]
    public new DataRelationCollection Relations => this.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    protected virtual void 族太vZH城z氏太A望a()
    {
      this.BeginInit();
      this.的物h的Opysp商商();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public virtual DataSet rS商PPZuHQWKr()
    {
      K望的OmcaM首物 k望的OmcaM首物 = (K望的OmcaM首物) this.Clone();
      k望的OmcaM首物.家她IUzOy的P();
      k望的OmcaM首物.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) k望的OmcaM首物;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected virtual bool I商首O生k生太的() => false;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected virtual bool K泽f望qBc物家席官S() => false;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected virtual void 首c孙qM物JVIi望Zq(XmlReader d家KAEmkVIjC的成)
    {
      if (this.DetermineSchemaSerializationMode(d家KAEmkVIjC的成) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(d家KAEmkVIjC的成);
        if (dataSet.Tables["Item"] != null)
          this.Tables.Add((DataTable) new K望的OmcaM首物.ItemDataTable(dataSet.Tables["Item"]));
        if (dataSet.Tables["Order"] != null)
          this.Tables.Add((DataTable) new K望的OmcaM首物.OrderDataTable(dataSet.Tables["Order"]));
        if (dataSet.Tables["OrderDetail"] != null)
          this.Tables.Add((DataTable) new K望的OmcaM首物.OrderDetailDataTable(dataSet.Tables["OrderDetail"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.家她IUzOy的P();
      }
      else
      {
        int num = (int) this.ReadXml(d家KAEmkVIjC的成);
        this.家她IUzOy的P();
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected virtual XmlSchema 望Hcup执zmytkuS()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    internal void 家她IUzOy的P() => this.lf顾P太PLI太U生顾泽(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    internal void lf顾P太PLI太U生顾泽(bool kaor的QQJ太Y)
    {
      this.lZp执TzI城是Hh = (K望的OmcaM首物.ItemDataTable) this.Tables["Item"];
      if (kaor的QQJ太Y && this.lZp执TzI城是Hh != null)
        this.lZp执TzI城是Hh.InitVars();
      this.Fs家SN城P希JS商I族 = (K望的OmcaM首物.OrderDataTable) this.Tables["Order"];
      if (kaor的QQJ太Y && this.Fs家SN城P希JS商I族 != null)
        this.Fs家SN城P希JS商I族.InitVars();
      this.FsoS商wEy顾Q = (K望的OmcaM首物.OrderDetailDataTable) this.Tables["OrderDetail"];
      if (kaor的QQJ太Y && this.FsoS商wEy顾Q != null)
        this.FsoS商wEy顾Q.InitVars();
      this.nphh顾zmcH = this.Relations["FK_OrderDetail_Item"];
      this.Wj商的BW成商顾PD的 = this.Relations["FK_OrderDetail_Order"];
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    private void 的物h的Opysp商商()
    {
      this.DataSetName = "Database1DataSet";
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/Database1DataSet.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.lZp执TzI城是Hh = new K望的OmcaM首物.ItemDataTable();
      this.Tables.Add((DataTable) this.lZp执TzI城是Hh);
      this.Fs家SN城P希JS商I族 = new K望的OmcaM首物.OrderDataTable();
      this.Tables.Add((DataTable) this.Fs家SN城P希JS商I族);
      this.FsoS商wEy顾Q = new K望的OmcaM首物.OrderDetailDataTable();
      this.Tables.Add((DataTable) this.FsoS商wEy顾Q);
      this.nphh顾zmcH = new DataRelation("FK_OrderDetail_Item", new DataColumn[1]
      {
        this.lZp执TzI城是Hh.itemIDColumn
      }, new DataColumn[1]{ this.FsoS商wEy顾Q.itemIDColumn }, false);
      this.Relations.Add(this.nphh顾zmcH);
      this.Wj商的BW成商顾PD的 = new DataRelation("FK_OrderDetail_Order", new DataColumn[1]
      {
        this.Fs家SN城P希JS商I族.orderIDColumn
      }, new DataColumn[1]{ this.FsoS商wEy顾Q.orderIDColumn }, false);
      this.Relations.Add(this.Wj商的BW成商顾PD的);
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    private bool GSFF物Yxl家() => false;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    private bool 商k的Z是太z希物L() => false;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    private bool x泽行eEdf孙顾执官() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    private void RE的V公行l希mQv官(object foictThUYJL行a, CollectionChangeEventArgs u官Iu氏q商e太hWn的)
    {
      if (u官Iu氏q商e太hWn的.Action != CollectionChangeAction.Remove)
        return;
      this.家她IUzOy的P();
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public static XmlSchemaComplexType 官UE城yhYpxW首(XmlSchemaSet I泽tvkEH望q的AV)
    {
      K望的OmcaM首物 k望的OmcaM首物 = new K望的OmcaM首物();
      XmlSchemaComplexType schemaComplexType = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = k望的OmcaM首物.Namespace
      });
      schemaComplexType.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = k望的OmcaM首物.GetSchemaSerializable();
      if (I泽tvkEH望q的AV.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = I泽tvkEH望q的AV.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return schemaComplexType;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      I泽tvkEH望q的AV.Add(schemaSerializable);
      return schemaComplexType;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public delegate void ItemRowChangeEventHandler(object sender, K望的OmcaM首物.ItemRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public delegate void OrderRowChangeEventHandler(object sender, K望的OmcaM首物.OrderRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public delegate void OrderDetailRowChangeEventHandler(
      object sender,
      K望的OmcaM首物.OrderDetailRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ItemDataTable : TypedTableBase<K望的OmcaM首物.ItemRow>
    {
      private DataColumn columnitemID;
      private DataColumn columnitemName;
      private DataColumn columnitemPrice;
      private DataColumn columnitemType;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public ItemDataTable()
      {
        this.TableName = nameof (Item);
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      internal ItemDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected ItemDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataColumn itemIDColumn => this.columnitemID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn itemNameColumn => this.columnitemName;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataColumn itemPriceColumn => this.columnitemPrice;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn itemTypeColumn => this.columnitemType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public K望的OmcaM首物.ItemRow this[int index] => (K望的OmcaM首物.ItemRow) this.Rows[index];

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.ItemRowChangeEventHandler ItemRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.ItemRowChangeEventHandler ItemRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.ItemRowChangeEventHandler ItemRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.ItemRowChangeEventHandler ItemRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void AddItemRow(K望的OmcaM首物.ItemRow row) => this.Rows.Add((DataRow) row);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.ItemRow AddItemRow(
        int itemID,
        string itemName,
        Decimal itemPrice,
        string itemType)
      {
        K望的OmcaM首物.ItemRow row = (K望的OmcaM首物.ItemRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) itemID,
          (object) itemName,
          (object) itemPrice,
          (object) itemType
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public K望的OmcaM首物.ItemRow FindByitemID(int itemID) => (K望的OmcaM首物.ItemRow) this.Rows.Find(new object[1]
      {
        (object) itemID
      });

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        K望的OmcaM首物.ItemDataTable itemDataTable = (K望的OmcaM首物.ItemDataTable) base.Clone();
        itemDataTable.InitVars();
        return (DataTable) itemDataTable;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override DataTable CreateInstance() => (DataTable) new K望的OmcaM首物.ItemDataTable();

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnitemID = this.Columns["itemID"];
        this.columnitemName = this.Columns["itemName"];
        this.columnitemPrice = this.Columns["itemPrice"];
        this.columnitemType = this.Columns["itemType"];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnitemID = new DataColumn("itemID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnitemID);
        this.columnitemName = new DataColumn("itemName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnitemName);
        this.columnitemPrice = new DataColumn("itemPrice", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnitemPrice);
        this.columnitemType = new DataColumn("itemType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnitemType);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnitemID
        }, true));
        this.columnitemID.AllowDBNull = false;
        this.columnitemID.Unique = true;
        this.columnitemName.MaxLength = 50;
        this.columnitemType.MaxLength = 50;
        this.ExtendedProperties.Add((object) "Generator_RowClassName", (object) "ItemRow");
        this.ExtendedProperties.Add((object) "Generator_RowEvArgName", (object) "ItemRowChangeEvent");
        this.ExtendedProperties.Add((object) "Generator_RowEvHandlerName", (object) "ItemRowChangeEventHandler");
        this.ExtendedProperties.Add((object) "Generator_TableClassName", (object) nameof (ItemDataTable));
        this.ExtendedProperties.Add((object) "Generator_TablePropName", (object) "Item");
        this.ExtendedProperties.Add((object) "Generator_TableVarName", (object) "tableItem");
        this.ExtendedProperties.Add((object) "Generator_UserTableName", (object) "Item");
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.ItemRow NewItemRow() => (K望的OmcaM首物.ItemRow) this.NewRow();

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new K望的OmcaM首物.ItemRow(builder);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (K望的OmcaM首物.ItemRow);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ItemRowChanged == null)
          return;
        this.ItemRowChanged((object) this, new K望的OmcaM首物.ItemRowChangeEvent((K望的OmcaM首物.ItemRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ItemRowChanging == null)
          return;
        this.ItemRowChanging((object) this, new K望的OmcaM首物.ItemRowChangeEvent((K望的OmcaM首物.ItemRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ItemRowDeleted == null)
          return;
        this.ItemRowDeleted((object) this, new K望的OmcaM首物.ItemRowChangeEvent((K望的OmcaM首物.ItemRow) e.Row, e.Action));
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ItemRowDeleting == null)
          return;
        this.ItemRowDeleting((object) this, new K望的OmcaM首物.ItemRowChangeEvent((K望的OmcaM首物.ItemRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void RemoveItemRow(K望的OmcaM首物.ItemRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        K望的OmcaM首物 k望的OmcaM首物 = new K望的OmcaM首物();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = k望的OmcaM首物.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ItemDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = k望的OmcaM首物.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class OrderDataTable : TypedTableBase<K望的OmcaM首物.OrderRow>
    {
      private DataColumn columnorderID;
      private DataColumn columntableNo;
      private DataColumn columndate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public OrderDataTable()
      {
        this.TableName = "Order";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal OrderDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected OrderDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn orderIDColumn => this.columnorderID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn tableNoColumn => this.columntableNo;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataColumn dateColumn => this.columndate;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public K望的OmcaM首物.OrderRow this[int index] => (K望的OmcaM首物.OrderRow) this.Rows[index];

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderRowChangeEventHandler OrderRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderRowChangeEventHandler OrderRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderRowChangeEventHandler OrderRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderRowChangeEventHandler OrderRowDeleted;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void AddOrderRow(K望的OmcaM首物.OrderRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public K望的OmcaM首物.OrderRow AddOrderRow(int orderID, int tableNo, DateTime date)
      {
        K望的OmcaM首物.OrderRow row = (K望的OmcaM首物.OrderRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) orderID,
          (object) tableNo,
          (object) date
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderRow FindByorderID(int orderID) => (K望的OmcaM首物.OrderRow) this.Rows.Find(new object[1]
      {
        (object) orderID
      });

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public override DataTable Clone()
      {
        K望的OmcaM首物.OrderDataTable orderDataTable = (K望的OmcaM首物.OrderDataTable) base.Clone();
        orderDataTable.InitVars();
        return (DataTable) orderDataTable;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override DataTable CreateInstance() => (DataTable) new K望的OmcaM首物.OrderDataTable();

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnorderID = this.Columns["orderID"];
        this.columntableNo = this.Columns["tableNo"];
        this.columndate = this.Columns["date"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      private void InitClass()
      {
        this.columnorderID = new DataColumn("orderID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnorderID);
        this.columntableNo = new DataColumn("tableNo", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columntableNo);
        this.columndate = new DataColumn("date", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columndate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnorderID
        }, true));
        this.columnorderID.AllowDBNull = false;
        this.columnorderID.Unique = true;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderRow NewOrderRow() => (K望的OmcaM首物.OrderRow) this.NewRow();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new K望的OmcaM首物.OrderRow(builder);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override Type GetRowType() => typeof (K望的OmcaM首物.OrderRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.OrderRowChanged == null)
          return;
        this.OrderRowChanged((object) this, new K望的OmcaM首物.OrderRowChangeEvent((K望的OmcaM首物.OrderRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.OrderRowChanging == null)
          return;
        this.OrderRowChanging((object) this, new K望的OmcaM首物.OrderRowChangeEvent((K望的OmcaM首物.OrderRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.OrderRowDeleted == null)
          return;
        this.OrderRowDeleted((object) this, new K望的OmcaM首物.OrderRowChangeEvent((K望的OmcaM首物.OrderRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.OrderRowDeleting == null)
          return;
        this.OrderRowDeleting((object) this, new K望的OmcaM首物.OrderRowChangeEvent((K望的OmcaM首物.OrderRow) e.Row, e.Action));
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void RemoveOrderRow(K望的OmcaM首物.OrderRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        K望的OmcaM首物 k望的OmcaM首物 = new K望的OmcaM首物();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = k望的OmcaM首物.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (OrderDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = k望的OmcaM首物.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class OrderDetailDataTable : TypedTableBase<K望的OmcaM首物.OrderDetailRow>
    {
      private DataColumn columnorderID;
      private DataColumn columnitemID;
      private DataColumn columnquantity;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public OrderDetailDataTable()
      {
        this.TableName = "OrderDetail";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal OrderDetailDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected OrderDetailDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn orderIDColumn => this.columnorderID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn itemIDColumn => this.columnitemID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn quantityColumn => this.columnquantity;

      [DebuggerNonUserCode]
      [Browsable(false)]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public K望的OmcaM首物.OrderDetailRow this[int index] => (K望的OmcaM首物.OrderDetailRow) this.Rows[index];

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderDetailRowChangeEventHandler OrderDetailRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderDetailRowChangeEventHandler OrderDetailRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderDetailRowChangeEventHandler OrderDetailRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event K望的OmcaM首物.OrderDetailRowChangeEventHandler OrderDetailRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void AddOrderDetailRow(K望的OmcaM首物.OrderDetailRow row) => this.Rows.Add((DataRow) row);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderDetailRow AddOrderDetailRow(
        K望的OmcaM首物.OrderRow parentOrderRowByFK_OrderDetail_Order,
        K望的OmcaM首物.ItemRow parentItemRowByFK_OrderDetail_Item,
        int quantity)
      {
        K望的OmcaM首物.OrderDetailRow row = (K望的OmcaM首物.OrderDetailRow) this.NewRow();
        object[] objArray = new object[3]
        {
          null,
          null,
          (object) quantity
        };
        if (parentOrderRowByFK_OrderDetail_Order != null)
          objArray[0] = parentOrderRowByFK_OrderDetail_Order[0];
        if (parentItemRowByFK_OrderDetail_Item != null)
          objArray[1] = parentItemRowByFK_OrderDetail_Item[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderDetailRow FindByorderIDitemID(int orderID, int itemID) => (K望的OmcaM首物.OrderDetailRow) this.Rows.Find(new object[2]
      {
        (object) orderID,
        (object) itemID
      });

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public override DataTable Clone()
      {
        K望的OmcaM首物.OrderDetailDataTable orderDetailDataTable = (K望的OmcaM首物.OrderDetailDataTable) base.Clone();
        orderDetailDataTable.InitVars();
        return (DataTable) orderDetailDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new K望的OmcaM首物.OrderDetailDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal void InitVars()
      {
        this.columnorderID = this.Columns["orderID"];
        this.columnitemID = this.Columns["itemID"];
        this.columnquantity = this.Columns["quantity"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      private void InitClass()
      {
        this.columnorderID = new DataColumn("orderID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnorderID);
        this.columnitemID = new DataColumn("itemID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnitemID);
        this.columnquantity = new DataColumn("quantity", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnquantity);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnorderID,
          this.columnitemID
        }, true));
        this.columnorderID.AllowDBNull = false;
        this.columnitemID.AllowDBNull = false;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderDetailRow NewOrderDetailRow() => (K望的OmcaM首物.OrderDetailRow) this.NewRow();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder) => (DataRow) new K望的OmcaM首物.OrderDetailRow(builder);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (K望的OmcaM首物.OrderDetailRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.OrderDetailRowChanged == null)
          return;
        this.OrderDetailRowChanged((object) this, new K望的OmcaM首物.OrderDetailRowChangeEvent((K望的OmcaM首物.OrderDetailRow) e.Row, e.Action));
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.OrderDetailRowChanging == null)
          return;
        this.OrderDetailRowChanging((object) this, new K望的OmcaM首物.OrderDetailRowChangeEvent((K望的OmcaM首物.OrderDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.OrderDetailRowDeleted == null)
          return;
        this.OrderDetailRowDeleted((object) this, new K望的OmcaM首物.OrderDetailRowChangeEvent((K望的OmcaM首物.OrderDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.OrderDetailRowDeleting == null)
          return;
        this.OrderDetailRowDeleting((object) this, new K望的OmcaM首物.OrderDetailRowChangeEvent((K望的OmcaM首物.OrderDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void RemoveOrderDetailRow(K望的OmcaM首物.OrderDetailRow row) => this.Rows.Remove((DataRow) row);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        K望的OmcaM首物 k望的OmcaM首物 = new K望的OmcaM首物();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = k望的OmcaM首物.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (OrderDetailDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = k望的OmcaM首物.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class ItemRow : DataRow
    {
      private K望的OmcaM首物.ItemDataTable tableItem;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal ItemRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableItem = (K望的OmcaM首物.ItemDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public int itemID
      {
        get => (int) this[this.tableItem.itemIDColumn];
        set => this[this.tableItem.itemIDColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public string itemName
      {
        get
        {
          try
          {
            return (string) this[this.tableItem.itemNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'itemName' in table 'Item' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableItem.itemNameColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public Decimal itemPrice
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableItem.itemPriceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'itemPrice' in table 'Item' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableItem.itemPriceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public string itemType
      {
        get
        {
          try
          {
            return (string) this[this.tableItem.itemTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'itemType' in table 'Item' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableItem.itemTypeColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public bool IsitemNameNull() => this.IsNull(this.tableItem.itemNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetitemNameNull() => this[this.tableItem.itemNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public bool IsitemPriceNull() => this.IsNull(this.tableItem.itemPriceColumn);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void SetitemPriceNull() => this[this.tableItem.itemPriceColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public bool IsitemTypeNull() => this.IsNull(this.tableItem.itemTypeColumn);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void SetitemTypeNull() => this[this.tableItem.itemTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public K望的OmcaM首物.OrderDetailRow[] GetOrderDetailRows() => this.Table.ChildRelations["FK_OrderDetail_Item"] == null ? new K望的OmcaM首物.OrderDetailRow[0] : (K望的OmcaM首物.OrderDetailRow[]) this.GetChildRows(this.Table.ChildRelations["FK_OrderDetail_Item"]);
    }

    public class OrderRow : DataRow
    {
      private K望的OmcaM首物.OrderDataTable tableOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal OrderRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableOrder = (K望的OmcaM首物.OrderDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public int orderID
      {
        get => (int) this[this.tableOrder.orderIDColumn];
        set => this[this.tableOrder.orderIDColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public int tableNo
      {
        get
        {
          try
          {
            return (int) this[this.tableOrder.tableNoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'tableNo' in table 'Order' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOrder.tableNoColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DateTime date
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableOrder.dateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'date' in table 'Order' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOrder.dateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public bool IstableNoNull() => this.IsNull(this.tableOrder.tableNoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SettableNoNull() => this[this.tableOrder.tableNoColumn] = Convert.DBNull;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public bool IsdateNull() => this.IsNull(this.tableOrder.dateColumn);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void SetdateNull() => this[this.tableOrder.dateColumn] = Convert.DBNull;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderDetailRow[] GetOrderDetailRows() => this.Table.ChildRelations["FK_OrderDetail_Order"] == null ? new K望的OmcaM首物.OrderDetailRow[0] : (K望的OmcaM首物.OrderDetailRow[]) this.GetChildRows(this.Table.ChildRelations["FK_OrderDetail_Order"]);
    }

    public class OrderDetailRow : DataRow
    {
      private K望的OmcaM首物.OrderDetailDataTable tableOrderDetail;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal OrderDetailRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableOrderDetail = (K望的OmcaM首物.OrderDetailDataTable) this.Table;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public int orderID
      {
        get => (int) this[this.tableOrderDetail.orderIDColumn];
        set => this[this.tableOrderDetail.orderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public int itemID
      {
        get => (int) this[this.tableOrderDetail.itemIDColumn];
        set => this[this.tableOrderDetail.itemIDColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public int quantity
      {
        get
        {
          try
          {
            return (int) this[this.tableOrderDetail.quantityColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'quantity' in table 'OrderDetail' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOrderDetail.quantityColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.ItemRow ItemRow
      {
        get => (K望的OmcaM首物.ItemRow) this.GetParentRow(this.Table.ParentRelations["FK_OrderDetail_Item"]);
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["FK_OrderDetail_Item"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public K望的OmcaM首物.OrderRow OrderRow
      {
        get => (K望的OmcaM首物.OrderRow) this.GetParentRow(this.Table.ParentRelations["FK_OrderDetail_Order"]);
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["FK_OrderDetail_Order"]);
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public bool IsquantityNull() => this.IsNull(this.tableOrderDetail.quantityColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetquantityNull() => this[this.tableOrderDetail.quantityColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public class ItemRowChangeEvent : EventArgs
    {
      private K望的OmcaM首物.ItemRow eventRow;
      private DataRowAction eventAction;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public ItemRowChangeEvent(K望的OmcaM首物.ItemRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.ItemRow Row => this.eventRow;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public class OrderRowChangeEvent : EventArgs
    {
      private K望的OmcaM首物.OrderRow eventRow;
      private DataRowAction eventAction;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public OrderRowChangeEvent(K望的OmcaM首物.OrderRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public class OrderDetailRowChangeEvent : EventArgs
    {
      private K望的OmcaM首物.OrderDetailRow eventRow;
      private DataRowAction eventAction;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public OrderDetailRowChangeEvent(K望的OmcaM首物.OrderDetailRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public K望的OmcaM首物.OrderDetailRow Row => this.eventRow;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }
  }
}
