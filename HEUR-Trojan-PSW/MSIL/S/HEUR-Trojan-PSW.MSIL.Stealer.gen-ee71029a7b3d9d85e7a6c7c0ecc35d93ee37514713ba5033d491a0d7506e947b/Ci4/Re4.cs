// Decompiled with JetBrains decompiler
// Type: Ci4.Re4
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using An9;
using k5FS;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Pz9;
using System;
using System.Collections;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;
using System.Windows.Forms;
using w7H;
using x7X;
using z0R5;

namespace Ci4
{
  [DesignerGenerated]
  public class Re4 : Form
  {
    private IContainer ႥႨ;
    [AccessedThroughProperty("Ⴍ")]
    private GroupBox ႥႥ;
    [AccessedThroughProperty("Ⴐ")]
    private Label ႥႳ;
    [AccessedThroughProperty("Ⴄ")]
    private MonthCalendar ႥႤ;
    [AccessedThroughProperty("Ⴀ")]
    private Button ႥႣ;
    [AccessedThroughProperty("Ⴜ")]
    private Label ႷႨ;
    private Gy8k.Ft4p Ⴈ;

    public Re4()
    {
      this.Load += new EventHandler(this.Cs0);
      this.Shown += new EventHandler(this.Fp9);
      this.n4D();
    }

    protected virtual void Rc1([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.ႥႨ == null)
          return;
        this.ႥႨ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void n4D()
    {
      this.ႥႨ = (IContainer) new System.ComponentModel.Container();
      this.Ⴍ = new GroupBox();
      this.Ⴜ = new Label();
      this.Ⴓ = new ComboBox();
      this.Ⴈ = new Label();
      this.Ⴐ = new Label();
      this.Ⴄ = new MonthCalendar();
      this.Ⴃ = new TextBox();
      this.Ⴀ = new Button();
      this.Ⴅ = new Button();
      this.Ⴗ = new ErrorProvider(this.ႥႨ);
      this.Ⴍ.SuspendLayout();
      ((ISupportInitialize) this.Ⴗ).BeginInit();
      this.SuspendLayout();
      this.Ⴍ.Controls.Add((Control) this.Ⴜ);
      this.Ⴍ.Controls.Add((Control) this.Ⴓ);
      this.Ⴍ.Controls.Add((Control) this.Ⴈ);
      this.Ⴍ.Controls.Add((Control) this.Ⴐ);
      this.Ⴍ.Controls.Add((Control) this.Ⴄ);
      this.Ⴍ.Controls.Add((Control) this.Ⴃ);
      this.Ⴍ.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴍ.Location = new Point(32, 72);
      this.Ⴍ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴍ.Name = "GroupBox1";
      this.Ⴍ.Padding = new Padding(3, 4, 3, 4);
      this.Ⴍ.Size = new Size(712, 425);
      this.Ⴍ.TabIndex = 11;
      this.Ⴍ.TabStop = false;
      this.Ⴍ.Text = "Leave Details";
      this.Ⴜ.AutoSize = true;
      this.Ⴜ.Location = new Point(10, 39);
      this.Ⴜ.Name = "Label1";
      this.Ⴜ.Size = new Size(103, 22);
      this.Ⴜ.TabIndex = 5;
      this.Ⴜ.Text = "Welcome !";
      this.Ⴓ.DropDownStyle = ComboBoxStyle.DropDownList;
      this.Ⴓ.FormattingEnabled = true;
      this.Ⴓ.Items.AddRange(new object[5]
      {
        (object) "1",
        (object) "2",
        (object) "3",
        (object) "4",
        (object) "5"
      });
      this.Ⴓ.Location = new Point(387, 71);
      this.Ⴓ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴓ.Name = "cboDuration";
      this.Ⴓ.Size = new Size(136, 30);
      this.Ⴓ.TabIndex = 1;
      this.Ⴈ.BackColor = SystemColors.InactiveCaption;
      this.Ⴈ.BorderStyle = BorderStyle.FixedSingle;
      this.Ⴈ.Location = new Point(12, 71);
      this.Ⴈ.Name = "lbl_People_ID";
      this.Ⴈ.Size = new Size(160, 28);
      this.Ⴈ.TabIndex = 0;
      this.Ⴐ.BackColor = SystemColors.InactiveCaption;
      this.Ⴐ.BorderStyle = BorderStyle.FixedSingle;
      this.Ⴐ.Location = new Point(204, 71);
      this.Ⴐ.Name = "lbl_Leave_ID";
      this.Ⴐ.Size = new Size(150, 28);
      this.Ⴐ.TabIndex = 1;
      this.Ⴄ.Location = new Point(14, 124);
      this.Ⴄ.Margin = new Padding(10, 11, 10, 11);
      this.Ⴄ.Name = "chooseDate";
      this.Ⴄ.TabIndex = 2;
      this.Ⴃ.BorderStyle = BorderStyle.FixedSingle;
      this.Ⴃ.Location = new Point(387, 124);
      this.Ⴃ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴃ.MaxLength = 50;
      this.Ⴃ.Multiline = true;
      this.Ⴃ.Name = "txtReason";
      this.Ⴃ.Size = new Size(319, 173);
      this.Ⴃ.TabIndex = 3;
      this.Ⴀ.BackColor = Color.IndianRed;
      this.Ⴀ.Cursor = Cursors.Hand;
      this.Ⴀ.DialogResult = DialogResult.Cancel;
      this.Ⴀ.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴀ.ForeColor = SystemColors.ControlLightLight;
      this.Ⴀ.Location = new Point(608, 518);
      this.Ⴀ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴀ.Name = "btnCancel";
      this.Ⴀ.Size = new Size(136, 44);
      this.Ⴀ.TabIndex = 5;
      this.Ⴀ.Text = "&Cancel";
      this.Ⴀ.UseVisualStyleBackColor = false;
      this.Ⴅ.BackColor = Color.MediumSeaGreen;
      this.Ⴅ.Cursor = Cursors.Hand;
      this.Ⴅ.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴅ.ForeColor = SystemColors.ControlLightLight;
      this.Ⴅ.Location = new Point(451, 518);
      this.Ⴅ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴅ.Name = "btnSubmit";
      this.Ⴅ.Size = new Size(151, 44);
      this.Ⴅ.TabIndex = 4;
      this.Ⴅ.Text = "&Submit";
      this.Ⴅ.UseVisualStyleBackColor = false;
      this.Ⴗ.BlinkStyle = ErrorBlinkStyle.NeverBlink;
      this.Ⴗ.ContainerControl = (ContainerControl) this;
      this.AcceptButton = (IButtonControl) this.Ⴅ;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.GradientActiveCaption;
      this.CancelButton = (IButtonControl) this.Ⴀ;
      this.ClientSize = new Size(1070, 658);
      this.Controls.Add((Control) this.Ⴍ);
      this.Controls.Add((Control) this.Ⴀ);
      this.Controls.Add((Control) this.Ⴅ);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Margin = new Padding(3, 2, 3, 2);
      this.Name = "ႭႷ";
      this.Text = "Submit Leave";
      this.Ⴍ.ResumeLayout(false);
      this.Ⴍ.PerformLayout();
      ((ISupportInitialize) this.Ⴗ).EndInit();
      this.ResumeLayout(false);
    }

    internal virtual GroupBox Ⴍ
    {
      get => this.ႥႥ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.k0X);
        Control ⴅⴅ1 = (Control) this.ႥႥ;
        if (ⴅⴅ1 is GroupBox)
          ⴅⴅ1.RightToLeftChanged -= multicastDelegate as EventHandler;
        this.ႥႥ = value;
        Control ⴅⴅ2 = (Control) this.ႥႥ;
        if (!(ⴅⴅ2 is GroupBox))
          return;
        (ⴅⴅ2 as GroupBox).RightToLeftChanged += (EventHandler) multicastDelegate;
      }
    }

    internal virtual ComboBox Ⴓ
    {
      get => this.Ⴈ.Ⴀ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.k2Q);
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.k0X);
        ListControl ⴀ1 = (ListControl) this.Ⴈ.Ⴀ;
        if ((ComboBox) ⴀ1 != null)
        {
          (ⴀ1 as ComboBox).SelectedIndexChanged -= obj as EventHandler;
          ⴀ1.RightToLeftChanged -= (EventHandler) multicastDelegate;
        }
        this.Ⴈ.Ⴀ = (object) value as ComboBox;
        ListControl ⴀ2 = (ListControl) this.Ⴈ.Ⴀ;
        if (!(ⴀ2 is ComboBox))
          return;
        ((ComboBox) ⴀ2).SelectedIndexChanged += obj as EventHandler;
        ⴀ2.RightToLeftChanged += multicastDelegate as EventHandler;
      }
    }

    internal virtual Label Ⴈ
    {
      get => this.Ⴈ.Ⴈ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.k0X);
        Control ⴈ1 = (Control) this.Ⴈ.Ⴈ;
        if (ⴈ1 is Label)
          ⴈ1.RightToLeftChanged -= multicastDelegate as EventHandler;
        this.Ⴈ.Ⴈ = (object) value as Label;
        Control ⴈ2 = (Control) this.Ⴈ.Ⴈ;
        if ((Label) ⴈ2 == null)
          return;
        (ⴈ2 as Label).RightToLeftChanged += (EventHandler) multicastDelegate;
      }
    }

    internal virtual Label Ⴐ
    {
      get => this.ႥႳ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.k0X);
        Control ⴅⴓ1 = (Control) this.ႥႳ;
        if ((Label) ⴅⴓ1 != null)
          ⴅⴓ1.RightToLeftChanged -= multicastDelegate as EventHandler;
        this.ႥႳ = value;
        Control ⴅⴓ2 = (Control) this.ႥႳ;
        if ((Label) ⴅⴓ2 == null)
          return;
        (ⴅⴓ2 as Label).RightToLeftChanged += multicastDelegate as EventHandler;
      }
    }

    internal virtual MonthCalendar Ⴄ
    {
      get => this.ႥႤ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.k0X);
        Control ⴅⴄ1 = (Control) this.ႥႤ;
        if ((MonthCalendar) ⴅⴄ1 != null)
          (ⴅⴄ1 as MonthCalendar).RightToLeftChanged -= (EventHandler) obj;
        this.ႥႤ = value;
        Control ⴅⴄ2 = (Control) this.ႥႤ;
        if (!(ⴅⴄ2 is MonthCalendar))
          return;
        (ⴅⴄ2 as MonthCalendar).RightToLeftChanged += (EventHandler) obj;
      }
    }

    internal virtual TextBox Ⴃ
    {
      get => this.Ⴈ.Ⴓ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.q1A);
        object obj = (object) new EventHandler(this.k0X);
        TextBoxBase ⴓ1 = (TextBoxBase) this.Ⴈ.Ⴓ;
        if ((TextBox) ⴓ1 != null)
        {
          (ⴓ1 as TextBox).TextChanged -= multicastDelegate as EventHandler;
          (ⴓ1 as TextBox).RightToLeftChanged -= obj as EventHandler;
        }
        this.Ⴈ.Ⴓ = value;
        TextBoxBase ⴓ2 = (TextBoxBase) this.Ⴈ.Ⴓ;
        if ((TextBox) ⴓ2 == null)
          return;
        ⴓ2.TextChanged += multicastDelegate as EventHandler;
        ⴓ2.RightToLeftChanged += (EventHandler) obj;
      }
    }

    internal virtual Button Ⴀ
    {
      get => this.ႥႣ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.Ra9);
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.k0X);
        object ⴅⴃ1 = (object) this.ႥႣ;
        if ((Button) ⴅⴃ1 != null)
        {
          ((Control) ⴅⴃ1).Click -= (EventHandler) obj;
          ((Control) ⴅⴃ1).RightToLeftChanged -= (EventHandler) multicastDelegate;
        }
        this.ႥႣ = value;
        object ⴅⴃ2 = (object) this.ႥႣ;
        if ((Button) ⴅⴃ2 == null)
          return;
        (ⴅⴃ2 as Button).Click += obj as EventHandler;
        (ⴅⴃ2 as Button).RightToLeftChanged += multicastDelegate as EventHandler;
      }
    }

    internal virtual Button Ⴅ
    {
      get => this.Ⴈ.Ⴍ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate1 = (MulticastDelegate) new EventHandler(this.De4);
        MulticastDelegate multicastDelegate2 = (MulticastDelegate) new EventHandler(this.k0X);
        IButtonControl ⴍ1 = (IButtonControl) this.Ⴈ.Ⴍ;
        if (ⴍ1 is Button)
        {
          (ⴍ1 as Button).Click -= (EventHandler) multicastDelegate1;
          (ⴍ1 as Button).RightToLeftChanged -= (EventHandler) multicastDelegate2;
        }
        this.Ⴈ.Ⴍ = value;
        IButtonControl ⴍ2 = (IButtonControl) this.Ⴈ.Ⴍ;
        if ((Button) ⴍ2 == null)
          return;
        ((Control) ⴍ2).Click += (EventHandler) multicastDelegate1;
        ((Control) ⴍ2).RightToLeftChanged += (EventHandler) multicastDelegate2;
      }
    }

    internal virtual ErrorProvider Ⴗ
    {
      get => this.Ⴈ.Ⴗ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.k0X);
        ISupportInitialize ⴗ1 = (ISupportInitialize) this.Ⴈ.Ⴗ;
        if (ⴗ1 is ErrorProvider)
          (ⴗ1 as ErrorProvider).RightToLeftChanged -= multicastDelegate as EventHandler;
        this.Ⴈ.Ⴗ = value;
        ISupportInitialize ⴗ2 = (ISupportInitialize) this.Ⴈ.Ⴗ;
        if (!(ⴗ2 is ErrorProvider))
          return;
        ((ErrorProvider) ⴗ2).RightToLeftChanged += multicastDelegate as EventHandler;
      }
    }

    internal virtual Label Ⴜ
    {
      get => this.ႷႨ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႷႨ = value;
    }

    private void p6W([In] object obj0, [In] EventArgs obj1)
    {
      int num = (int) En6.Ⴈ.Ⴃ.ShowDialog();
    }

    private void De4([In] object obj0, [In] EventArgs obj1)
    {
      IComparable<string> text1;
      object text2;
      DateTime date1;
      DateTime date2;
      int num1;
      ICloneable text3;
      IConvertible convertible;
      try
      {
        text1 = (IComparable<string>) this.Ⴈ.Text;
        text2 = (object) this.Ⴐ.Text;
        date1 = Conversions.ToDate(DateAndTime.Today.ToShortDateString());
        date2 = Conversions.ToDate(this.Ⴄ.SelectionRange.Start.ToShortDateString());
        num1 = int.Parse(this.Ⴓ.Text);
        text3 = (ICloneable) this.Ⴃ.Text;
        convertible = (IConvertible) "Pending";
        ISerializable serializable = (ISerializable) new StringBuilder();
        IBindableComponent bindableComponent = (IBindableComponent) null;
        if (Operators.CompareString(this.Ⴃ.Text, "", false) == 0)
        {
          ((StringBuilder) serializable).AppendLine("-Reason empty");
          bindableComponent = (IBindableComponent) ((Control) bindableComponent ?? (Control) this.Ⴃ);
        }
        if (this.Ⴓ.SelectedIndex < 0)
        {
          ((StringBuilder) serializable).AppendLine("-No duration selected");
          bindableComponent = (IBindableComponent) ((Control) bindableComponent ?? (Control) this.Ⴓ);
        }
        if (DateTime.Compare(date1, date2) > 0)
        {
          ((StringBuilder) serializable).Append("-Choose a leave after today");
          if (!(bindableComponent is Control control))
            control = (Control) this.Ⴄ;
          bindableComponent = (IBindableComponent) control;
        }
        if (((StringBuilder) serializable).Length > 0)
        {
          int num2 = (int) MessageBox.Show(((StringBuilder) serializable).ToString(), "Input error");
          (bindableComponent as Control).Focus();
          return;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Ⴃ.Select();
        ProjectData.ClearProjectError();
      }
      object entity = (object) new w2M();
      (entity as w2M).Ⴍ = (string) text2;
      ((w2M) entity).Ⴐ = (string) text1;
      ((w2M) entity).Ⴀ = date1;
      ((w2M) entity).Ⴈ = date2;
      ((w2M) entity).Ⴅ = (string) text3;
      ((w2M) entity).Ⴃ = (string) convertible;
      ((w2M) entity).Ⴀ = num1;
      DataContext dataContext = (DataContext) new Tt1();
      ((Tt1) dataContext).Ⴍ.InsertOnSubmit((w2M) entity);
      try
      {
        (dataContext as Tt1).SubmitChanges();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num3 = (int) MessageBox.Show("Error: " + ((object) ex as Exception).Message, "Error");
        ProjectData.ClearProjectError();
      }
      int num4 = (int) MessageBox.Show("Leave " + (string) text2 + " submitted", "Submit");
      this.Close();
    }

    private void Ra9([In] object obj0, [In] EventArgs obj1) => En6.Ⴈ.Ⴅ.Mx6s((Form) En6.Ⴈ.Ⴐ);

    private void Cs0([In] object obj0, [In] EventArgs obj1)
    {
      this.Ⴓ.SelectedIndex = 0;
      this.Ⴐ.Text = Lt2.m8L();
      this.Ⴈ.Text = Ec63.Ⴅ.ToString();
      En6.Ⴈ.Ⴅ.Text = "Human Resource Management System (Employee) - Apply Leave";
    }

    private void Fp9([In] object obj0, [In] EventArgs obj1)
    {
      this.Ⴓ.SelectedIndex = 0;
      this.Ⴐ.Text = Lt2.m8L();
      this.Ⴈ.Text = Ec63.Ⴅ.ToString();
    }

    private void q1A([In] object obj0, [In] EventArgs obj1)
    {
      if (Operators.CompareString(this.Ⴃ.Text, "", false) == 0)
        this.Ⴗ.SetError((Control) this.Ⴃ, "Please Give Reason");
      else
        this.Ⴗ.SetError((Control) this.Ⴃ, (string) null);
    }

    private void k2Q([In] object obj0, [In] EventArgs obj1)
    {
      IEnumerable enumerable = (IEnumerable) this.Ⴓ.SelectedIndex.ToString();
      int.Parse((string) enumerable);
      if (Operators.CompareString((string) enumerable, "", false) == 0)
        this.Ⴗ.SetError((Control) this.Ⴓ, "Please Select Duration");
      else
        this.Ⴗ.SetError((Control) this.Ⴓ, (string) null);
    }

    private void Lg7([In] object obj0, [In] EventArgs obj1)
    {
      int num = (int) En6.Ⴈ.Ⴅ.ShowDialog();
    }

    private void k0X([In] object obj0, [In] EventArgs obj1)
    {
    }

    internal sealed class Tx0
    {
      internal IContainer Ⴗ;
      internal Button Ⴈ;
      internal Button Ⴃ;
      internal Button Ⴓ;

      internal Tx0()
      {
      }
    }
  }
}
