// Decompiled with JetBrains decompiler
// Type: Dbasic.EnhancedControls.DayPickerPopup
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using System;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.EnhancedControls
{
  public class DayPickerPopup : Control
  {
    private Bitmap m_bmp;
    private Graphics m_graphics;
    private Font m_font;
    private SolidBrush m_brushCur;
    private SolidBrush m_brushOther;
    private SolidBrush m_brushSelBack;
    private SolidBrush m_brushSelText;
    private Pen m_penHoverBox;
    private Font m_fontCaption;
    private SolidBrush m_brushCaptionBack;
    private SolidBrush m_brushCaptionText;
    private SolidBrush m_brushBack;
    private Pen m_penBack;
    private SolidBrush m_brushFrame;
    private Pen m_penFrame;
    private DateTime m_today = DateTime.Today;
    private DateTime m_curSel = DateTime.Today;
    private DateTime m_hoverSel = DateTime.Today;
    private DateTime m_firstDate;
    public string todayString = "Today";
    private bool m_captureMouse = false;
    private int m_curMonth = -1;
    private int m_curYear = -1;
    private DateTime[] m_days = new DateTime[42];
    private ContextMenu m_monthMenu;
    private NumericUpDown m_yearUpDown;
    private Rectangle m_rcLeftButton = Rectangle.Empty;
    private Rectangle m_rcRightButton = Rectangle.Empty;
    private Rectangle m_rcMonth = Rectangle.Empty;
    private Rectangle m_rcYear = Rectangle.Empty;
    private Point[] m_leftArrowPoints = new Point[3];
    private Point[] m_rightArrowPoints = new Point[3];
    public string dow = "SMTWTFS";
    public int firstDay = 0;

    public event EventHandler CloseUp;

    public event EventHandler ValueChanged;

    public DateTime Value
    {
      get => this.m_curSel;
      set
      {
        if (!(value != this.m_curSel))
          return;
        this.UpdateCurSel(value);
      }
    }

    public DayPickerPopup()
    {
      this.InitMonthContextMenu();
      this.InitYearUpDown();
      this.Visible = false;
      this.Location = new Point(0, 0);
      this.Size = new Size(164, DayPickerPopup.Const.BottomLabelsPos.Y + 12 + 5);
    }

    public void Display(bool visible, int x, int y, Color backColor, Color foreColor)
    {
      if (visible)
      {
        this.m_captureMouse = false;
        this.m_yearUpDown.Hide();
        this.BackColor = backColor;
        this.ForeColor = foreColor;
        this.Left = x;
        this.Top = y;
        this.BringToFront();
        this.Focus();
        this.m_hoverSel = this.m_curSel;
      }
      this.Visible = visible;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      this.CreateMemoryBitmap();
      this.CreateGdiObjects();
      this.CalculateFirstDate();
      this.m_graphics.Clear(this.BackColor);
      this.DrawCaption(this.m_graphics);
      this.DrawDaysOfWeek(this.m_graphics);
      this.DrawDays(this.m_graphics);
      this.DrawCurSelection(this.m_graphics);
      this.DrawHoverSelection(this.m_graphics, this.m_hoverSel, true);
      this.DrawTodaySelection(this.m_graphics);
      this.DrawBottomLabels(this.m_graphics);
      this.m_graphics.DrawRectangle(this.m_penFrame, 0, 0, this.Width - 1, this.Height - 1);
      e.Graphics.DrawImage((Image) this.m_bmp, 0, 0);
    }

    protected override void OnPaintBackground(PaintEventArgs e)
    {
    }

    private void DrawCaption(Graphics g)
    {
      g.FillRectangle((Brush) this.m_brushCaptionBack, 0, 0, this.Width, 28);
      string str = this.m_curSel.ToString("MMMM yyyy");
      Size size1 = g.MeasureString(str, this.m_fontCaption).ToSize();
      int x = (this.Width - size1.Width) / 2;
      int y = (28 - size1.Height) / 2;
      g.DrawString(str, this.m_fontCaption, (Brush) this.m_brushCaptionText, (float) x, (float) y);
      string text1 = this.m_curSel.ToString("MMMM");
      Size size2 = g.MeasureString(text1, this.m_fontCaption).ToSize();
      this.m_rcMonth.X = x;
      this.m_rcMonth.Y = y;
      this.m_rcMonth.Width = size2.Width;
      this.m_rcMonth.Height = size2.Height;
      string text2 = this.m_curSel.ToString("yyyy");
      Size size3 = g.MeasureString(text2, this.m_fontCaption).ToSize();
      this.m_rcYear.X = x + size1.Width - size3.Width;
      this.m_rcYear.Y = y;
      this.m_rcYear.Width = size3.Width;
      this.m_rcYear.Height = size3.Height;
      g.FillRectangle((Brush) this.m_brushBack, this.m_rcLeftButton);
      g.DrawRectangle(this.m_penFrame, this.m_rcLeftButton);
      g.FillPolygon((Brush) this.m_brushFrame, this.m_leftArrowPoints);
      g.FillRectangle((Brush) this.m_brushBack, this.m_rcRightButton);
      g.DrawRectangle(this.m_penFrame, this.m_rcRightButton);
      g.FillPolygon((Brush) this.m_brushFrame, this.m_rightArrowPoints);
    }

    private void DrawDaysOfWeek(Graphics g)
    {
      Point point = new Point(DayPickerPopup.Const.DaysGrid.X + 3, 28);
      foreach (char ch in this.dow)
      {
        g.DrawString(ch.ToString(), this.m_fontCaption, (Brush) this.m_brushCaptionBack, (float) point.X, (float) point.Y);
        point.X += DayPickerPopup.Const.DaysCell.Width;
      }
      g.DrawLine(this.m_penFrame, DayPickerPopup.Const.DaysGrid.X, DayPickerPopup.Const.DaysGrid.Y - 1, this.Width - DayPickerPopup.Const.DaysGrid.X, DayPickerPopup.Const.DaysGrid.Y - 1);
    }

    private void DrawDays(Graphics g)
    {
      if (this.m_curSel.Month != this.m_curMonth || this.m_curSel.Year != this.m_curYear)
      {
        this.CalculateDays();
        this.m_curMonth = this.m_curSel.Month;
        this.m_curYear = this.m_curSel.Year;
      }
      Point daysGrid = DayPickerPopup.Const.DaysGrid;
      for (int index1 = 0; index1 < 6; ++index1)
      {
        for (int index2 = 0; index2 < 7; ++index2)
        {
          DateTime day = this.m_days[index1 * 7 + index2];
          int num = day.Day < 10 ? 4 : 0;
          g.DrawString(day.Day.ToString(), this.m_font, day.Month == this.m_curMonth ? (Brush) this.m_brushCur : (Brush) this.m_brushOther, (float) (daysGrid.X + num), (float) daysGrid.Y);
          daysGrid.X += DayPickerPopup.Const.DaysCell.Width;
        }
        daysGrid.X = DayPickerPopup.Const.DaysGrid.X;
        daysGrid.Y += DayPickerPopup.Const.DaysCell.Height + 1;
      }
    }

    private void DrawDay(Graphics g, DateTime day, bool selected)
    {
      Point dayCellPosition = this.GetDayCellPosition(this.GetDayIndex(day));
      g.FillRectangle(selected ? (Brush) this.m_brushSelBack : (Brush) this.m_brushBack, dayCellPosition.X - 5, dayCellPosition.Y, DayPickerPopup.Const.DaysCell.Width, DayPickerPopup.Const.DaysCell.Height);
      if (day.Day < 10)
        dayCellPosition.X += 4;
      g.DrawString(day.Day.ToString(), this.m_font, selected ? (Brush) this.m_brushSelText : (Brush) this.m_brushCur, (float) dayCellPosition.X, (float) dayCellPosition.Y);
    }

    private void DrawCurSelection(Graphics g)
    {
      Point dayCellPosition = this.GetDayCellPosition(this.GetDayIndex(this.m_curSel));
      this.m_graphics.FillRectangle((Brush) this.m_brushSelBack, dayCellPosition.X - 5, dayCellPosition.Y, DayPickerPopup.Const.DaysCell.Width, DayPickerPopup.Const.DaysCell.Height);
      if (this.m_curSel.Day < 10)
        dayCellPosition.X += 4;
      this.m_graphics.DrawString(this.m_curSel.Day.ToString(), this.m_font, (Brush) this.m_brushSelText, (float) dayCellPosition.X, (float) dayCellPosition.Y);
    }

    private void DrawHoverSelection(Graphics g, DateTime date, bool draw)
    {
      int dayIndex = this.GetDayIndex(date);
      if (dayIndex < 0 || dayIndex >= this.m_days.Length)
        return;
      Point dayCellPosition = this.GetDayCellPosition(dayIndex);
      g.DrawRectangle(draw ? this.m_penHoverBox : this.m_penBack, dayCellPosition.X - 5, dayCellPosition.Y, DayPickerPopup.Const.DaysCell.Width, DayPickerPopup.Const.DaysCell.Height);
    }

    private void DrawTodaySelection(Graphics g)
    {
      int dayIndex = this.GetDayIndex(this.m_today);
      if (dayIndex < 0 || dayIndex >= this.m_days.Length || this.m_today.Month != this.m_curSel.Month)
        return;
      Point dayCellPosition = this.GetDayCellPosition(dayIndex);
      g.DrawRectangle(this.m_penFrame, dayCellPosition.X - 5, dayCellPosition.Y, DayPickerPopup.Const.DaysCell.Width, DayPickerPopup.Const.DaysCell.Height);
      g.DrawRectangle(this.m_penFrame, dayCellPosition.X - 4, dayCellPosition.Y + 1, DayPickerPopup.Const.DaysCell.Width - 2, DayPickerPopup.Const.DaysCell.Height - 2);
    }

    private void DrawBottomLabels(Graphics g)
    {
      string s = string.Format(this.todayString + ": {0}", (object) this.m_today.ToShortDateString());
      g.DrawString(s, this.m_fontCaption, (Brush) this.m_brushCur, (float) DayPickerPopup.Const.BottomLabelsPos.X, (float) DayPickerPopup.Const.BottomLabelsPos.Y);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      base.OnMouseDown(e);
      if (this.m_yearUpDown.Visible && !this.m_yearUpDown.Bounds.Contains(e.X, e.Y))
      {
        this.OnYearUpDownValueChanged((object) null, EventArgs.Empty);
        this.m_yearUpDown.Hide();
        this.Focus();
      }
      if (this.m_rcLeftButton.Contains(e.X, e.Y))
        this.UpdateCurSel(this.m_curSel.AddMonths(-1));
      else if (this.m_rcRightButton.Contains(e.X, e.Y))
        this.UpdateCurSel(this.m_curSel.AddMonths(1));
      else if (this.m_rcMonth.Contains(e.X, e.Y))
        this.DisplayMonthMenu(e.X, e.Y);
      else if (this.m_rcYear.Contains(e.X, e.Y))
        this.DisplayYearUpDown(e.X, e.Y);
      else if (e.Y >= DayPickerPopup.Const.BottomLabelsPos.Y)
      {
        this.UpdateCurSel(this.m_today);
        this.Close();
      }
      else
      {
        this.m_captureMouse = true;
        this.UpdateHoverCell(e.X, e.Y);
      }
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      base.OnMouseUp(e);
      if (!this.m_captureMouse)
        return;
      this.m_captureMouse = false;
      int dayIndex = this.GetDayIndex(this.m_hoverSel);
      if (dayIndex >= 0 && dayIndex < this.m_days.Length)
      {
        this.UpdateCurSel(this.m_hoverSel);
        this.Close();
      }
      else
        this.UpdateCurSel(this.m_curSel);
    }

    protected override void OnMouseMove(MouseEventArgs e)
    {
      base.OnMouseMove(e);
      if (!this.m_captureMouse)
        return;
      this.UpdateHoverCell(e.X, e.Y);
    }

    protected override void OnKeyUp(KeyEventArgs e)
    {
      int num = 0;
      switch (e.KeyCode)
      {
        case Keys.Return:
          this.Close();
          break;
        case Keys.Left:
          num = -1;
          break;
        case Keys.Up:
          num = -7;
          break;
        case Keys.Right:
          num = 1;
          break;
        case Keys.Down:
          num = 7;
          break;
      }
      if (num == 0)
        return;
      DateTime dateTime = this.m_curSel.AddDays((double) num);
      if (this.m_curSel.Month != dateTime.Month)
      {
        this.UpdateCurSel(dateTime);
      }
      else
      {
        Graphics graphics = this.CreateGraphics();
        this.DrawDay(graphics, this.m_curSel, false);
        this.DrawDay(graphics, dateTime, true);
        graphics.Dispose();
        this.m_curSel = dateTime;
        this.UpdateHoverCell(this.GetDayIndex(this.m_curSel));
        if (this.ValueChanged == null)
          return;
        this.ValueChanged((object) this, EventArgs.Empty);
      }
    }

    private void OnMonthMenuPopup(object sender, EventArgs e)
    {
      foreach (MenuItem menuItem in this.m_monthMenu.MenuItems)
        menuItem.Checked = false;
      if (this.m_curMonth <= 0 || this.m_curMonth > 12)
        return;
      this.m_monthMenu.MenuItems[this.m_curMonth - 1].Checked = true;
    }

    private void OnMonthMenuClick(object sender, EventArgs e)
    {
      try
      {
        if (!(sender is MenuItem menuItem))
          return;
        this.UpdateCurSel(DateTime.Parse(string.Format("{0}, {1} {2}", (object) menuItem.Text, (object) this.m_curSel.Day, (object) this.m_curSel.Year)));
      }
      catch
      {
      }
    }

    private void OnYearUpDownValueChanged(object sender, EventArgs e)
    {
      try
      {
        if (!this.m_yearUpDown.Visible)
          return;
        this.UpdateCurSel(new DateTime((int) this.m_yearUpDown.Value, this.m_curSel.Month, this.m_curSel.Day));
      }
      catch
      {
        this.m_yearUpDown.Value = (Decimal) this.m_curSel.Year;
      }
    }

    private void InitYearUpDown()
    {
      this.m_yearUpDown = new NumericUpDown();
      this.Controls.Add((Control) this.m_yearUpDown);
      this.m_yearUpDown.Minimum = (Decimal) DateTime.MinValue.Year;
      this.m_yearUpDown.Maximum = (Decimal) DateTime.MaxValue.Year;
      this.m_yearUpDown.Visible = false;
      this.m_yearUpDown.ValueChanged += new EventHandler(this.OnYearUpDownValueChanged);
    }

    private void DisplayYearUpDown(int x, int y)
    {
      this.m_yearUpDown.Text = this.m_curSel.Year.ToString();
      this.m_yearUpDown.Left = this.m_rcYear.Left - 3;
      this.m_yearUpDown.Top = this.m_rcYear.Top - 3;
      this.m_yearUpDown.Width = this.m_rcYear.Width + 30;
      this.m_yearUpDown.Height = this.m_rcYear.Height + 6;
      this.m_yearUpDown.Show();
    }

    private void InitMonthContextMenu()
    {
      this.m_monthMenu = new ContextMenu();
      for (int index = 1; index <= 12; ++index)
      {
        MenuItem menuItem = new MenuItem();
        this.m_monthMenu.MenuItems.Add(menuItem);
        menuItem.Click += new EventHandler(this.OnMonthMenuClick);
        menuItem.Text = DateTime.Parse(string.Format("{0}/1/2000", (object) index), (IFormatProvider) CRunner.cul).ToString("MMMM");
      }
      this.m_monthMenu.Popup += new EventHandler(this.OnMonthMenuPopup);
    }

    private void DisplayMonthMenu(int x, int y) => this.m_monthMenu.Show((Control) this, new Point(x, y));

    private void CalculateFirstDate()
    {
      this.m_firstDate = new DateTime(this.m_curSel.Year, this.m_curSel.Month, 1);
      int num = (int) (-this.firstDay + this.m_firstDate.DayOfWeek);
      if (num <= 0)
        num += 7;
      this.m_firstDate = this.m_firstDate.AddDays((double) -num);
    }

    private void CalculateDays()
    {
      for (int index = 0; index < this.m_days.Length; ++index)
        this.m_days[index] = this.m_firstDate.AddDays((double) index);
    }

    private Point GetDayCellPosition(int index) => new Point(DayPickerPopup.Const.DaysGrid.X + index % 7 * DayPickerPopup.Const.DaysCell.Width, DayPickerPopup.Const.DaysGrid.Y + index / 7 * (DayPickerPopup.Const.DaysCell.Height + 1));

    private void CreateMemoryBitmap()
    {
      if (this.m_bmp != null && this.m_bmp.Width == this.Width && this.m_bmp.Height == this.Height)
        return;
      this.m_bmp = new Bitmap(this.Width, this.Height);
      this.m_graphics = Graphics.FromImage((Image) this.m_bmp);
      this.m_rcLeftButton = new Rectangle(DayPickerPopup.Const.ArrowButtonOffset.Width, DayPickerPopup.Const.ArrowButtonOffset.Height, DayPickerPopup.Const.ArrowButtonSize.Width, DayPickerPopup.Const.ArrowButtonSize.Height);
      this.m_rcRightButton = new Rectangle(this.Width - DayPickerPopup.Const.ArrowButtonOffset.Width - DayPickerPopup.Const.ArrowButtonSize.Width - 1, DayPickerPopup.Const.ArrowButtonOffset.Height, DayPickerPopup.Const.ArrowButtonSize.Width, DayPickerPopup.Const.ArrowButtonSize.Height);
      this.m_leftArrowPoints[0].X = DayPickerPopup.Const.ArrowPointsOffset.Width;
      this.m_leftArrowPoints[0].Y = DayPickerPopup.Const.ArrowPointsOffset.Height + DayPickerPopup.Const.ArrowPointsSize.Height / 2;
      this.m_leftArrowPoints[1].X = this.m_leftArrowPoints[0].X + DayPickerPopup.Const.ArrowPointsSize.Width;
      this.m_leftArrowPoints[1].Y = DayPickerPopup.Const.ArrowPointsOffset.Height;
      this.m_leftArrowPoints[2].X = this.m_leftArrowPoints[1].X;
      this.m_leftArrowPoints[2].Y = this.m_leftArrowPoints[1].Y + DayPickerPopup.Const.ArrowPointsSize.Height;
      this.m_rightArrowPoints = (Point[]) this.m_leftArrowPoints.Clone();
      this.m_rightArrowPoints[0].X = this.Width - DayPickerPopup.Const.ArrowPointsOffset.Width;
      this.m_rightArrowPoints[1].X = this.m_rightArrowPoints[2].X = this.m_rightArrowPoints[0].X - DayPickerPopup.Const.ArrowPointsSize.Width;
    }

    private void CreateGdiObjects()
    {
      if (this.m_font == null)
        this.m_font = new Font("Arial", 9f, FontStyle.Regular);
      if (this.m_brushCur == null || this.m_brushCur.Color != this.ForeColor)
        this.m_brushCur = new SolidBrush(this.ForeColor);
      if (this.m_brushOther == null)
        this.m_brushOther = new SolidBrush(SystemColors.GrayText);
      if (this.m_brushSelBack == null)
        this.m_brushSelBack = new SolidBrush(SystemColors.Highlight);
      if (this.m_brushSelText == null)
        this.m_brushSelText = new SolidBrush(SystemColors.HighlightText);
      if (this.m_penHoverBox == null)
        this.m_penHoverBox = new Pen(SystemColors.GrayText);
      if (this.m_brushCaptionBack == null)
        this.m_brushCaptionBack = new SolidBrush(SystemColors.ActiveCaption);
      if (this.m_brushCaptionText == null)
        this.m_brushCaptionText = new SolidBrush(SystemColors.ActiveCaptionText);
      if (this.m_fontCaption == null)
        this.m_fontCaption = new Font("Arial", 9f, FontStyle.Bold);
      if (this.m_brushBack == null || this.m_brushBack.Color != this.BackColor)
        this.m_brushBack = new SolidBrush(this.BackColor);
      if (this.m_penBack == null || this.m_penBack.Color != this.BackColor)
        this.m_penBack = new Pen(this.BackColor);
      if (this.m_brushFrame == null)
        this.m_brushFrame = new SolidBrush(SystemColors.WindowFrame);
      if (this.m_penFrame != null)
        return;
      this.m_penFrame = new Pen(SystemColors.WindowFrame);
    }

    private void UpdateCurSel(DateTime newDate)
    {
      bool flag = this.m_curSel != newDate;
      this.m_curSel = newDate;
      this.m_hoverSel = this.m_curSel;
      this.Invalidate();
      this.Update();
      if (this.ValueChanged == null || !flag)
        return;
      this.ValueChanged((object) this, EventArgs.Empty);
    }

    private int GetDayIndex(DateTime date) => (int) date.Subtract(this.m_firstDate).TotalDays;

    private int GetDayIndex(int x, int y) => !new Rectangle(0, DayPickerPopup.Const.DaysGrid.Y, 7 * DayPickerPopup.Const.DaysCell.Width, DayPickerPopup.Const.BottomLabelsPos.Y).Contains(x, y) ? -1 : x / DayPickerPopup.Const.DaysCell.Width + (y - DayPickerPopup.Const.DaysGrid.Y) / (DayPickerPopup.Const.DaysCell.Height + 1) * 7;

    private void UpdateHoverCell(int x, int y) => this.UpdateHoverCell(this.GetDayIndex(x, y));

    private void UpdateHoverCell(int newIndex)
    {
      if (newIndex < 0 || newIndex >= this.m_days.Length)
      {
        Graphics graphics = this.CreateGraphics();
        this.DrawHoverSelection(graphics, this.m_hoverSel, false);
        this.DrawTodaySelection(graphics);
        graphics.Dispose();
        this.m_hoverSel = DateTime.MinValue;
      }
      else
      {
        if (!(this.m_hoverSel != this.m_days[newIndex]))
          return;
        Graphics graphics = this.CreateGraphics();
        this.DrawHoverSelection(graphics, this.m_hoverSel, false);
        this.DrawHoverSelection(graphics, this.m_days[newIndex], true);
        this.DrawTodaySelection(graphics);
        graphics.Dispose();
        this.m_hoverSel = this.m_days[newIndex];
      }
    }

    private void Close()
    {
      this.Hide();
      if (this.CloseUp == null)
        return;
      this.CloseUp((object) this, EventArgs.Empty);
    }

    private class Const
    {
      public const string FontName = "Arial";
      public const int FontSize = 9;
      public const int ControlWidth = 164;
      public const int CaptionHeight = 28;
      public const int NumCols = 7;
      public const int NumRows = 6;
      public const int BottomLabelHeight = 12;
      public static Point DaysGrid = new Point(6, 43);
      public static Size DaysCell = new Size(23, 14);
      public static Size ArrowButtonOffset = new Size(6, 6);
      public static Size ArrowButtonSize = new Size(20, 15);
      public static Size ArrowPointsOffset = new Size(13, 9);
      public static Size ArrowPointsSize = new Size(5, 10);
      public static Point BottomLabelsPos = new Point(6, 135);
    }
  }
}
