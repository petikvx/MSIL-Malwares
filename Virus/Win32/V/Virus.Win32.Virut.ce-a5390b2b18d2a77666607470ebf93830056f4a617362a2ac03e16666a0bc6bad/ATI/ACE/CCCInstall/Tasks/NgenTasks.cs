// Decompiled with JetBrains decompiler
// Type: ATI.ACE.CCCInstall.Tasks.NgenTasks
// Assembly: CCCInstall, Version=2.0.3163.17516, Culture=neutral, PublicKeyToken=null
// MVID: FB1048F0-5C3B-4430-944F-CD20B70875CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Virut.ce-a5390b2b18d2a77666607470ebf93830056f4a617362a2ac03e16666a0bc6bad.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Xml;

namespace ATI.ACE.CCCInstall.Tasks
{
  internal class NgenTasks : BaseTask, ITask
  {
    private ATI.ACE.CCCInstall.Action action;

    public NgenTasks(CCCInstallLog log, ATI.ACE.CCCInstall.Action action)
      : base(log)
    {
      this.action = action;
    }

    public void Run(string filePath)
    {
      if (this.action == ATI.ACE.CCCInstall.Action.UpdateNgen)
      {
        Process process = (Process) null;
        StreamWriter streamWriter = (StreamWriter) null;
        try
        {
          process = new Process();
          process.StartInfo.FileName = "cmd.exe";
          process.StartInfo.CreateNoWindow = true;
          process.StartInfo.Arguments = "/E:ON";
          process.StartInfo.RedirectStandardInput = true;
          process.StartInfo.UseShellExecute = false;
          process.Start();
          streamWriter = process.StandardInput;
          string message = Environment.GetEnvironmentVariable("windir") + "\\Microsoft.NET\\Framework\\v2.0.50727\\ngen update";
          streamWriter.WriteLine(message);
          streamWriter.Flush();
          this.Logger.LogMessage(message);
        }
        catch (Exception ex)
        {
          this.Logger.LogException(ex);
        }
        finally
        {
          streamWriter?.Close();
          process?.Close();
        }
      }
      else
      {
        try
        {
          string path1 = this.MassagePath(filePath);
          string directoryName = Path.GetDirectoryName(path1);
          XmlDocument xmlDocument = this.LoadXmlDocument(path1);
          if (xmlDocument == null)
            return;
          Process process = (Process) null;
          StreamWriter streamWriter = (StreamWriter) null;
          try
          {
            this.Logger.LogMessage("Successfully loaded XML file " + path1);
            XmlNodeList xmlNodeList = xmlDocument.SelectNodes("Package/Include");
            process = new Process();
            process.StartInfo.FileName = "cmd.exe";
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.Arguments = "/E:ON";
            process.StartInfo.RedirectStandardInput = true;
            process.StartInfo.UseShellExecute = false;
            process.Start();
            streamWriter = process.StandardInput;
            foreach (XmlNode xmlNode in xmlNodeList)
            {
              XmlAttributeCollection attributes = xmlNode.Attributes;
              string innerText1 = attributes["file"].InnerText;
              string innerText2 = attributes["extension"].InnerText;
              string path2 = directoryName + "\\" + innerText1 + "." + innerText2;
              if (bool.Parse(attributes["nGen"].InnerText))
              {
                if (File.Exists(path2))
                {
                  string empty = string.Empty;
                  if (this.action == ATI.ACE.CCCInstall.Action.InstallNGen)
                  {
                    string message = Environment.GetEnvironmentVariable("windir") + "\\Microsoft.NET\\Framework\\v2.0.50727\\ngen install \"" + directoryName + "\\" + innerText1 + "." + innerText2 + "\"";
                    streamWriter.WriteLine(message);
                    this.Logger.LogMessage(message);
                  }
                  else if (this.action == ATI.ACE.CCCInstall.Action.UninstallNGen)
                  {
                    string message = Environment.GetEnvironmentVariable("windir") + "\\Microsoft.NET\\Framework\\v2.0.50727\\ngen uninstall \"" + directoryName + "\\" + innerText1 + "." + innerText2 + "\"";
                    streamWriter.WriteLine(message);
                    this.Logger.LogMessage(message);
                  }
                  else
                    this.Logger.LogMessage("Debug: Wrong parameter passed");
                  streamWriter.Flush();
                }
                else
                  this.Logger.LogMessage("Assembly not found: " + path2);
              }
            }
          }
          catch (Exception ex)
          {
            this.Logger.LogException(ex);
          }
          finally
          {
            streamWriter?.Close();
            process?.Close();
          }
        }
        catch (Exception ex)
        {
          this.Logger.LogException(ex);
        }
      }
    }
  }
}
