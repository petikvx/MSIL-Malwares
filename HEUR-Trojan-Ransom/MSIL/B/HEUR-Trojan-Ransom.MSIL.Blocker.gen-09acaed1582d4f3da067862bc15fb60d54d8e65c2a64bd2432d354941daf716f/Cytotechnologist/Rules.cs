// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: PEFileEvidenceFacto, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 33D8CF26-6BC9-4426-B954-9C7650E72B0A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-09acaed1582d4f3da067862bc15fb60d54d8e65c2a64bd2432d354941daf716f.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 111582815;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 720774035)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -150291672 ^ 687528382;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1102681170;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2009379156)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1240701469 ^ 1030874813;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
      int aIndex = 0;
label_4:
      int num1 = aIndex >= numArray.Length ? -1447870000 : (num1 = -153326044);
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1518062387)) % 6U)
        {
          case 0:
            num1 = -153326044;
            continue;
          case 1:
            num1 = (int) num2 * -12485508 ^ 1539018685;
            continue;
          case 2:
            goto label_4;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * 1141423143 ^ 941318429;
            continue;
          case 5:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = -1031706161;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -13776006;
      int aIndex1;
      List<Card> cardList;
      bool flag1;
      int aIndex2;
      Card[] array;
      int num2;
      JSONNode jsonNode;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -2140303809)) % 24U)
        {
          case 0:
            int num4;
            num1 = num4 = aIndex1 < count ? -87136530 : (num4 = -1210621524);
            continue;
          case 1:
            num1 = (int) num3 * 1138719859 ^ 2013820024;
            continue;
          case 2:
            num1 = (int) num3 * 840617432 ^ 1401361456;
            continue;
          case 3:
            array = cardList.ToArray();
            num1 = (int) num3 * 267989393 ^ 1225710244;
            continue;
          case 4:
            ++aIndex1;
            num1 = (int) num3 * 518205084 ^ -1222532537;
            continue;
          case 5:
            cardList = new List<Card>();
            aIndex1 = 0;
            num1 = (int) num3 * -239284304 ^ -67515744;
            continue;
          case 6:
            flag3 = aIndex2 < maxImpact * 2;
            num1 = -1685747511;
            continue;
          case 7:
            ++num2;
            num1 = (int) num3 * -1415848496 ^ -50545170;
            continue;
          case 8:
            jsonNode = json[aIndex1];
            num1 = (int) num3 * -1502923011 ^ -297883511;
            continue;
          case 9:
            num1 = -1116971857;
            continue;
          case 10:
            int num5 = !flag2 ? -1273073040 : (num5 = -104873404);
            num1 = num5 ^ (int) num3 * 1698329831;
            continue;
          case 12:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -1915371091;
            continue;
          case 13:
            num1 = (int) num3 * 1545108982 ^ 411569695;
            continue;
          case 14:
            aIndex2 = 0;
            num1 = (int) num3 * -1268904639 ^ 662874044;
            continue;
          case 15:
            num2 = 0;
            num1 = -1161954338;
            continue;
          case 16:
            num1 = (int) num3 * 813671164 ^ -1996937148;
            continue;
          case 17:
            flag2 = num2 < jsonNode[aIndex2].AsInt;
            num1 = -372599515;
            continue;
          case 18:
            goto label_1;
          case 19:
            flag1 = aIndex2 < maxImpact;
            num1 = (int) num3 * -1944403591 ^ 300032952;
            continue;
          case 20:
            ++aIndex2;
            num1 = (int) num3 * -681140442 ^ -1084184647;
            continue;
          case 21:
            num1 = -330634604;
            continue;
          case 22:
            int num6 = !flag3 ? 727871917 : (num6 = 236728598);
            num1 = num6 ^ (int) num3 * 542415561;
            continue;
          case 23:
            num1 = (int) num3 * 1545396423 ^ 1726753854;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1720279958;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 97746252)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u200F⁭‬‮⁬‏⁮⁭⁪‭⁪‍⁮⁬‬⁯‪‌‫‬⁫‏‎‏‪‪‌‏⁫‎‍‪‫⁮‭‫⁯⁮‎⁭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 326803721 ^ 1677874722;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -332445195;
      int num2;
      Card[] cards;
      int index;
      Card card1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1255818503)) % 16U)
        {
          case 0:
            num1 = (int) num3 * 2113474695 ^ -1376278313;
            continue;
          case 1:
            num2 = card1.Type;
            num1 = (int) num3 * 538261675 ^ -1437764713;
            continue;
          case 2:
            num1 = (int) num3 * -1795063648 ^ 1949692244;
            continue;
          case 3:
            card1 = cards[index];
            num1 = -1599618510;
            continue;
          case 4:
            goto label_1;
          case 5:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202C‬⁯​‬⁫⁫​⁪‏⁪‎⁮⁫‭⁬‫⁭⁮⁯‎‫‍⁭‭⁯‮​⁫‍‭‍⁯‬‍‎⁪‍⁪‎‮((object) card2) : (string) null;
            str1 = Rules.\u202B⁫‭‭⁫⁮‬‍‪‮‭‏‬‬‭‏‎‬‏⁫⁬‮‭⁯‬‏⁭‬⁬⁯⁭‭​‎‬‪‎⁯⁬‮(str3, str4, " ");
            num1 = -1739132639;
            continue;
          case 6:
            str2 = Rules.\u206E⁬⁯⁫⁫⁫⁪⁪⁬‫‭​⁬⁪⁭‍⁬​‏‭‌‭‍⁫‎⁪‪⁬‪‏⁪‌‪⁭⁯⁯⁮‎‎‮‮(str1, "\n]");
            num1 = (int) num3 * 771968020 ^ 777403587;
            continue;
          case 7:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -2000226295 ^ 1919376374;
            continue;
          case 8:
            num1 = (int) num3 * -1539657280 ^ -302967744;
            continue;
          case 9:
            ++index;
            num1 = (int) num3 * 1260833664 ^ -1699450489;
            continue;
          case 10:
            str1 = Rules.\u206E⁬⁯⁫⁫⁫⁪⁪⁬‫‭​⁬⁪⁭‍⁬​‏‭‌‭‍⁫‎⁪‪⁬‪‏⁪‌‪⁭⁯⁯⁮‎‎‮‮(str1, "\n\t");
            num1 = (int) num3 * 590346598 ^ 1893568740;
            continue;
          case 11:
            num1 = (int) num3 * -763614928 ^ 18057462;
            continue;
          case 12:
            num2 = 0;
            num1 = (int) num3 * -433041317 ^ -1535316934;
            continue;
          case 14:
            int num4;
            num1 = num4 = index < cards.Length ? -1698816502 : (num4 = -2120094689);
            continue;
          case 15:
            int num5 = num2 != card1.Type ? -2085196344 : (num5 = -1774743929);
            num1 = num5 ^ (int) num3 * -1455880699;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 1904874014;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2133443765)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -1736290697 ^ -260984193;
            continue;
          case 1:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? 1657505147 : (num3 = 378353353);
            continue;
          case 3:
            str1 = Rules.\u206E⁬⁯⁫⁫⁫⁪⁪⁬‫‭​⁬⁪⁭‍⁬​‏‭‌‭‍⁫‎⁪‪⁬‪‏⁪‌‪⁭⁯⁯⁮‎‎‮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206F⁯​‫⁫⁭‭⁫⁫‏‪‍⁪‪‫‎⁫⁬‎⁯⁪⁫‮⁯‭‪‬‏‌⁪‌‪‎⁮‎⁪⁪⁮​‪‮()));
            index = 1;
            num1 = (int) num2 * -1202550584 ^ 1546517588;
            continue;
          case 4:
            str2 = Rules.\u206E⁬⁯⁫⁫⁫⁪⁪⁬‫‭​⁬⁪⁭‍⁬​‏‭‌‭‍⁫‎⁪‪⁬‪‏⁪‌‪⁭⁯⁯⁮‎‎‮‮(str1, " ]");
            num1 = (int) num2 * 2110627013 ^ -424916095;
            continue;
          case 5:
            ++index;
            num1 = (int) num2 * -1545587181 ^ 2100294315;
            continue;
          case 6:
            str1 = Rules.\u202B⁫‭‭⁫⁮‬‍‪‮‭‏‬‬‭‏‎‬‏⁫⁬‮‭⁯‬‏⁭‬⁬⁯⁭‭​‎‬‪‎⁯⁬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206F⁯​‫⁫⁭‭⁫⁫‏‪‍⁪‪‫‎⁫⁬‎⁯⁪⁫‮⁯‭‪‬‏‌⁪‌‪‎⁮‎⁪⁪⁮​‪‮()));
            num1 = 475181928;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u200F⁭‬‮⁬‏⁮⁭⁪‭⁪‍⁮⁬‬⁯‪‌‫‬⁫‏‎‏‪‪‌‏⁫‎‍‪‫⁮‭‫⁯⁮‎⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206E⁬⁯⁫⁫⁫⁪⁪⁬‫‭​⁬⁪⁭‍⁬​‏‭‌‭‍⁫‎⁪‪⁬‪‏⁪‌‪⁭⁯⁯⁮‎‎‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202C‬⁯​‬⁫⁫​⁪‏⁪‎⁮⁫‭⁬‫⁭⁮⁯‎‫‍⁭‭⁯‮​⁫‍‭‍⁯‬‍‎⁪‍⁪‎‮([In] object obj0) => obj0.ToString();

    static string \u202B⁫‭‭⁫⁮‬‍‪‮‭‏‬‬‭‏‎‬‏⁫⁬‮‭⁯‬‏⁭‬⁬⁯⁭‭​‎‬‪‎⁯⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206F⁯​‫⁫⁭‭⁫⁫‏‪‍⁪‪‫‎⁫⁬‎⁯⁪⁫‮⁯‭‪‬‏‌⁪‌‪‎⁮‎⁪⁪⁮​‪‮() => CultureInfo.InvariantCulture;
  }
}
