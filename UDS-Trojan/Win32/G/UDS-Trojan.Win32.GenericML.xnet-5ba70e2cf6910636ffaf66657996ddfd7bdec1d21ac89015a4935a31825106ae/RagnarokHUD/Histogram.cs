// Decompiled with JetBrains decompiler
// Type: RagnarokHUD.Histogram
// Assembly: BinaryAssem, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3D41CFC-8277-4BEE-9AD4-AC67F2756AFC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-5ba70e2cf6910636ffaf66657996ddfd7bdec1d21ac89015a4935a31825106ae.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Windows.Forms;

namespace RagnarokHUD
{
  internal class Histogram : ContainerControl
  {
    private Pen HistogramBorderPen = new Pen(Color.FromArgb(192, 0, 0, 0));
    private Pen HistogramBorderPen2 = new Pen(Color.FromArgb((int) byte.MaxValue, 0, 0, 0));
    private Brush HistogramBodyBrush = (Brush) new SolidBrush(Color.FromArgb(128, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue));
    private Pen HistogramValuePen = new Pen(Color.FromArgb(192, 196, 0, 12));
    private Brush HistogramTextBrush = (Brush) new SolidBrush(Color.FromArgb((int) byte.MaxValue, 128, 128, 0));
    private Font Courier7 = new Font("Courier", 7f);
    private List<Tuple<DateTime, double>> AverageHistorie = new List<Tuple<DateTime, double>>();
    public double[] HistogramData = new double[4000];
    public int HistogramCount = 0;

    public Histogram.HistogramType Type { get; set; }

    public Histogram(Histogram.HistogramType type)
    {
      this.Type = type;
      this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
    }

    public void Reset()
    {
      this.HistogramData = new double[4000];
      this.HistogramCount = 0;
      this.AverageHistorie = new List<Tuple<DateTime, double>>();
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      this.SuspendLayout();
      e.Graphics.DrawRectangle(this.HistogramBorderPen, 0, 0, this.Width - 80 + 1, this.Height - 1);
      e.Graphics.FillRectangle(this.HistogramBodyBrush, 1, 1, this.Width - 80, this.Height - 2);
      e.Graphics.DrawString(this.Text, this.Courier7, Brushes.Black, 1f, -1f);
      if (this.HistogramCount <= 0)
        return;
      double num1 = this.HistogramData[0];
      for (int index = 1; index < this.Width - 80; ++index)
      {
        double num2 = this.HistogramData[index];
        if (num2 > num1)
          num1 = num2;
      }
      double num3 = (double) (this.Height - 2) / num1;
      for (int index = 0; index < this.Width - 80; ++index)
      {
        double num4 = this.HistogramData[index];
        if (num4 != 0.0)
        {
          int num5 = 1 + index + (this.Width - 80 - this.HistogramCount);
          float num6 = (float) (num4 * num3);
          e.Graphics.DrawLine(this.HistogramValuePen, (float) num5, (float) (this.Height - 1) - num6, (float) num5, (float) (this.Height - 2));
        }
      }
      double num7 = num1 / 1000.0;
      string str1 = num7.ToString("#,0.0K/s max", (IFormatProvider) CultureInfo.InvariantCulture);
      num7 = this.HistogramData[this.HistogramCount - 1] / 1000.0;
      string str2 = num7.ToString("#,0.0K/s last", (IFormatProvider) CultureInfo.InvariantCulture);
      string s = str1 + "\n" + str2;
      e.Graphics.DrawString(s, this.Courier7, this.HistogramTextBrush, (float) (this.Width - 80 + 3), 2f);
    }

    public void AddValue(double value)
    {
      switch (this.Type)
      {
        case Histogram.HistogramType.Value:
          if (this.HistogramCount < this.Width - 80)
          {
            this.HistogramData[this.HistogramCount] = value;
            ++this.HistogramCount;
            break;
          }
          Array.Copy((Array) this.HistogramData, 1, (Array) this.HistogramData, 0, this.HistogramCount - 1);
          this.HistogramData[this.HistogramCount - 1] = value;
          break;
        case Histogram.HistogramType.Average:
          this.AverageHistorie.Add(new Tuple<DateTime, double>(DateTime.UtcNow, value));
          IEnumerable<Tuple<DateTime, double>> tuples = this.AverageHistorie.Where<Tuple<DateTime, double>>((Func<Tuple<DateTime, double>, bool>) (avg => avg.Item1.AddMinutes(1.0) > DateTime.UtcNow));
          value = 0.0;
          foreach (Tuple<DateTime, double> tuple in tuples)
            value += tuple.Item2;
          value *= 60.0;
          this.AverageHistorie.RemoveAll((Predicate<Tuple<DateTime, double>>) (x => x.Item1.AddMinutes(1.0) < DateTime.UtcNow));
          if (this.HistogramCount < this.Width - 80)
          {
            this.HistogramData[this.HistogramCount] = value;
            ++this.HistogramCount;
            break;
          }
          Array.Copy((Array) this.HistogramData, 1, (Array) this.HistogramData, 0, this.HistogramCount - 1);
          this.HistogramData[this.HistogramCount - 1] = value;
          break;
      }
      this.Invalidate();
    }

    public enum HistogramType
    {
      Value,
      Average,
    }
  }
}
