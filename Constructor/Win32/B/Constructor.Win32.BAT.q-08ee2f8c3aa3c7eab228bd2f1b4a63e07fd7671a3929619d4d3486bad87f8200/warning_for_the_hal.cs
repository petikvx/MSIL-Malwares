// Decompiled with JetBrains decompiler
// Type: blue_batch_virus_maker_v_2._4.warning_for_the_hal
// Assembly: blue batch virus maker v 2.4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2DAFA7DD-2FE8-4FC2-9A4A-71538C37F4F9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Constructor.Win32.BAT.q-08ee2f8c3aa3c7eab228bd2f1b4a63e07fd7671a3929619d4d3486bad87f8200.exe

using blue_batch_virus_maker_v_2._4.My;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace blue_batch_virus_maker_v_2._4
{
  [DesignerGenerated]
  public class warning_for_the_hal : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("RichTextBox1")]
    private RichTextBox _RichTextBox1;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;

    [DebuggerNonUserCode]
    static warning_for_the_hal()
    {
    }

    [DebuggerNonUserCode]
    public warning_for_the_hal()
    {
      this.Load += new EventHandler(this.warning_for_the_hal_Load);
      warning_for_the_hal.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (warning_for_the_hal.__ENCList)
      {
        if (warning_for_the_hal.__ENCList.Count == warning_for_the_hal.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (warning_for_the_hal.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (warning_for_the_hal.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                warning_for_the_hal.__ENCList[index1] = warning_for_the_hal.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          warning_for_the_hal.__ENCList.RemoveRange(index1, checked (warning_for_the_hal.__ENCList.Count - index1));
          warning_for_the_hal.__ENCList.Capacity = warning_for_the_hal.__ENCList.Count;
        }
        warning_for_the_hal.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (warning_for_the_hal));
      this.RichTextBox1 = new RichTextBox();
      this.Button1 = new Button();
      this.Button2 = new Button();
      this.SuspendLayout();
      this.RichTextBox1.BackColor = Color.Black;
      this.RichTextBox1.ForeColor = Color.Lime;
      RichTextBox richTextBox1_1 = this.RichTextBox1;
      Point point1 = new Point(12, 12);
      Point point2 = point1;
      richTextBox1_1.Location = point2;
      this.RichTextBox1.Name = "RichTextBox1";
      RichTextBox richTextBox1_2 = this.RichTextBox1;
      Size size1 = new Size(290, 139);
      Size size2 = size1;
      richTextBox1_2.Size = size2;
      this.RichTextBox1.TabIndex = 1;
      this.RichTextBox1.Text = componentResourceManager.GetString("RichTextBox1.Text");
      this.Button1.ForeColor = Color.Lime;
      Button button1_1 = this.Button1;
      point1 = new Point(131, 108);
      Point point3 = point1;
      button1_1.Location = point3;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(159, 36);
      Size size3 = size1;
      button1_2.Size = size3;
      this.Button1.TabIndex = 2;
      this.Button1.Text = "You Understand";
      this.Button1.UseVisualStyleBackColor = true;
      this.Button2.ForeColor = Color.Red;
      Button button2_1 = this.Button2;
      point1 = new Point(23, 121);
      Point point4 = point1;
      button2_1.Location = point4;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(85, 23);
      Size size4 = size1;
      button2_2.Size = size4;
      this.Button2.TabIndex = 3;
      this.Button2.Text = "exit";
      this.Button2.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Black;
      size1 = new Size(314, 155);
      this.ClientSize = size1;
      this.ControlBox = false;
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.RichTextBox1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (warning_for_the_hal);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "warning for the hal.dll batch script";
      this.ResumeLayout(false);
    }

    internal virtual RichTextBox RichTextBox1
    {
      [DebuggerNonUserCode] get => this._RichTextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._RichTextBox1 = value;
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual Button Button2
    {
      [DebuggerNonUserCode] get => this._Button2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        if (this._Button2 != null)
          this._Button2.Click -= eventHandler;
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += eventHandler;
      }
    }

    private void warning_for_the_hal_Load(object sender, EventArgs e)
    {
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      MyProject.Forms.batch_maker.Show();
      this.Hide();
    }

    private void Timer2_Tick(object sender, EventArgs e)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Button2_Click(object sender, EventArgs e) => ProjectData.EndApp();

    private void ProgressBar2_Click(object sender, EventArgs e)
    {
    }

    private void ProgressBar1_Click(object sender, EventArgs e)
    {
    }
  }
}
