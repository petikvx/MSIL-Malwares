// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0006;
using \u0015;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.InteropServices;

namespace \u0006
{
  internal sealed class \u0004 : KeyedCollection<string, JsonProperty>
  {
    private readonly Type \u0001;
    internal readonly List<JsonProperty> \u0001;
    [NonSerialized]
    internal static GetString \u0098;

    public \u0004([In] Type obj0)
      : base((IEqualityComparer<string>) StringComparer.Ordinal)
    {
      \u0014.\u0006.\u0001((object) obj0, \u0004.\u0098(4773));
      this.\u0001 = obj0;
      this.\u0001 = (List<JsonProperty>) this.Items;
    }

    string KeyedCollection<string, JsonProperty>.\u0001([In] JsonProperty obj0) => obj0.\u0001;

    public void \u0001([In] JsonProperty obj0)
    {
      if (this.Contains(obj0.\u0001))
        goto label_20;
label_19:
      this.Add(obj0);
      return;
label_20:
      while (!obj0.\u0001())
      {
        JsonProperty jsonProperty = this[obj0.\u0001];
        bool flag = true;
        if (jsonProperty.\u0001())
          this.Remove(jsonProperty);
        else
          goto label_6;
label_4:
        int num = 0;
        if (num == 0)
        {
          flag = num != 0;
          goto label_15;
        }
        else
          goto label_11;
label_6:
        if (true)
        {
          if ((object) obj0.\u0001() != null && (object) jsonProperty.\u0001() != null)
          {
            if (!\u0093\u0002.\u007E\u0013\u0006((object) obj0.\u0001(), jsonProperty.\u0001()))
            {
              if (\u000E.\u0002(jsonProperty.\u0001()))
                num = \u000E.\u0001(obj0.\u0001(), jsonProperty.\u0001()) ? 1 : 0;
              else
                goto label_14;
            }
            else
              goto label_12;
          }
          else
            goto label_15;
        }
        else
          continue;
label_11:
        if (num == 0)
          goto label_14;
label_12:
        this.Remove(jsonProperty);
label_13:
        flag = false;
label_14:
        if (\u0093\u0002.\u007E\u0013\u0006((object) jsonProperty.\u0001(), obj0.\u0001()) || \u000E.\u0002(obj0.\u0001()) && \u000E.\u0001(jsonProperty.\u0001(), obj0.\u0001()))
          break;
label_15:
        if (true)
        {
          if (flag)
          {
            if (true)
              throw new JsonSerializationException(\u0002.\u0002.\u0001(\u0004.\u0098(24869), (IFormatProvider) \u0098.\u0002\u0004(), (object) obj0.\u0001, (object) this.\u0001));
            goto label_4;
          }
          else
            goto label_19;
        }
        else
          goto label_13;
      }
    }

    internal bool \u0001(string _param1, out JsonProperty _param2)
    {
      if (this.Dictionary == null)
      {
        _param2 = (JsonProperty) null;
        if (true)
        {
          int num = 0;
          return num != 0 ? num != 0 : num != 0;
        }
      }
      return this.Dictionary.TryGetValue(_param1, out _param2);
    }

    static \u0004() => Strings.CreateGetStringDelegate(typeof (\u0004));
  }
}
