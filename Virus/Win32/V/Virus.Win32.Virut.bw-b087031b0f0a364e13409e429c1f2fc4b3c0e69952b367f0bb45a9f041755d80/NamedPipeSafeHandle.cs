// Decompiled with JetBrains decompiler
// Type: Microsoft.Windows.PowerShell.GuiExe.Internal.NamedPipeSafeHandle
// Assembly: powershell_ise, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 5499B90E-CC84-4F8A-83FB-13A3A8C58354
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Virut.bw-b087031b0f0a364e13409e429c1f2fc4b3c0e69952b367f0bb45a9f041755d80.exe

using Microsoft.Win32.SafeHandles;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;

namespace Microsoft.Windows.PowerShell.GuiExe.Internal
{
  internal class NamedPipeSafeHandle : SafeHandleZeroOrMinusOneIsInvalid
  {
    private NamedPipeSafeHandle()
      : base(true)
    {
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]
    protected override bool ReleaseHandle()
    {
      bool flag = NativeMethods.CloseHandle(this.handle);
      if (!flag)
      {
        int lastWin32Error = Marshal.GetLastWin32Error();
        NamedPipeServer.Tracer.TraceError("Server: Could not release handle. Error: {0}", (object) lastWin32Error);
      }
      return flag;
    }
  }
}
