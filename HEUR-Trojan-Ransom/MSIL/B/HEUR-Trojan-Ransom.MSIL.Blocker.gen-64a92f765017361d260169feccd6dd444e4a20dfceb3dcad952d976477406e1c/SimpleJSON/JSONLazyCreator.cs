// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: EncoderExceptionFallbackBuff, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A176EC6-F8F7-4000-B7C0-CE79157CC27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-64a92f765017361d260169feccd6dd444e4a20dfceb3dcad952d976477406e1c.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
      this.m_Node = aNode;
      this.m_Key = (string) null;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
      this.m_Node = aNode;
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = 479591832;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1325221708)) % 13U)
        {
          case 0:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * -1292554715 ^ 1848330673;
            continue;
          case 1:
            num1 = (int) num2 * -571677417 ^ -50938345;
            continue;
          case 2:
            num1 = (int) num2 * -1062143057 ^ -99276055;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -2113868444 ^ 533751465;
            continue;
          case 5:
            flag = this.m_Key == null;
            num1 = (int) num2 * -461968395 ^ -309699084;
            continue;
          case 6:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = (int) num2 * 1361586267 ^ -79034185;
            continue;
          case 7:
            num1 = (int) num2 * -846877008 ^ -1426869448;
            continue;
          case 8:
            this.m_Node = (JSONNode) null;
            num1 = 352209806;
            continue;
          case 9:
            num1 = 1962853285;
            continue;
          case 10:
            int num3 = flag ? 17613582 : (num3 = 1298492410);
            num1 = num3 ^ (int) num2 * 765748393;
            continue;
          case 11:
            goto label_3;
          case 12:
            num1 = (int) num2 * -774802970 ^ -2123467078;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 1459245424;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2098925142)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * 213633208 ^ -1515719784;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
        JSONArray aVal = new JSONArray();
        aVal.Add(value);
label_1:
        int num1 = -1156298887;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1825820289)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1884970499 ^ -1493172858;
              continue;
            case 3:
              num1 = (int) num2 * -464345868 ^ 1469191790;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 55827156;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 615692472)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * 1025580212 ^ 777364633;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1830808082;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2110236822)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -321245818 ^ -216138323;
              continue;
            case 3:
              num1 = (int) num2 * 19323659 ^ -1367373391;
              continue;
            case 4:
              aVal = new JSONClass();
              num1 = (int) num2 * -103287965 ^ 1718999353;
              continue;
            case 5:
              aVal.Add(aKey, value);
              num1 = (int) num2 * -1093027286 ^ -1777187865;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
      aVal.Add(aItem);
label_1:
      int num1 = 958308683;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1599827380)) % 4U)
        {
          case 0:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 1097778761 ^ -1684368391;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1306163358 ^ 647850050;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      JSONClass aVal = new JSONClass();
      aVal.Add(aKey, aItem);
label_1:
      int num1 = -1588195546;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -753845417)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1789578734 ^ -429040446;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -143961237 ^ 866094648;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      if (b != null)
        goto label_4;
label_1:
      int num1 = -1491549555;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -568855212)) % 5U)
        {
          case 1:
            goto label_4;
          case 2:
            num1 = (int) num2 * -1094036533 ^ 783870049;
            continue;
          case 3:
            flag = true;
            num1 = (int) num2 * 872607068 ^ -466807914;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return flag;
label_4:
      flag = (object) a == b;
      num1 = -1882123445;
      goto label_2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
      bool flag = !(a == b);
label_1:
      int num1 = 809394081;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1057962849)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1846231206 ^ 118512320;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
      bool flag1 = obj == null;
label_1:
      int num1 = -1969708718;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -911821604)) % 5U)
        {
          case 1:
            flag2 = (object) this == obj;
            num1 = -1671640111;
            continue;
          case 2:
            int num3 = !flag1 ? -1804442276 : (num3 = -1001696832);
            num1 = num3 ^ (int) num2 * 110182195;
            continue;
          case 3:
            flag2 = true;
            num1 = (int) num2 * 1709918149 ^ -67657729;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return flag2;
    }

    public override int GetHashCode()
    {
      int hashCode = base.GetHashCode();
label_1:
      int num1 = 699098621;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1862115029)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 37541899 ^ -1291918175;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1931013324;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1097299021)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 807390658 ^ 1362498574;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = "";
            num1 = (int) num2 * 678845784 ^ -1754439929;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override string ToString(string aPrefix)
    {
      string str = "";
label_1:
      int num1 = -1951401613;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -863719033)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1587471344 ^ -45313887;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override int AsInt
    {
      get
      {
label_1:
        int num1 = -949618279;
        JSONData aVal;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -604812970)) % 6U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -124036547 ^ 700697669;
              continue;
            case 1:
              num1 = (int) num2 * 732413530 ^ 616640451;
              continue;
            case 2:
              goto label_1;
            case 3:
              aVal = new JSONData(0);
              num1 = (int) num2 * -1293898985 ^ 1079529341;
              continue;
            case 5:
              asInt = 0;
              num1 = (int) num2 * 1191485020 ^ 1018101082;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asInt;
      }
      set
      {
label_1:
        int num1 = 807079901;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1022046722)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -614096745 ^ -1383303877;
              continue;
            case 2:
              num1 = (int) num2 * -1866919209 ^ 1060467679;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 134685497 ^ 117063316;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = 95358453;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2034844466)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) new JSONData(0.0f));
              num1 = (int) num2 * -400516642 ^ 2006224832;
              continue;
            case 2:
              num1 = (int) num2 * 156635873 ^ 1168553029;
              continue;
            case 4:
              num1 = (int) num2 * 1112341332 ^ 1356657147;
              continue;
            case 5:
              asFloat = 0.0f;
              num1 = (int) num2 * -1650642215 ^ -1000918255;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = 1994529297;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1938531788)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -1591617751 ^ 233565695;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1732154789 ^ -1602501695;
              continue;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override double AsDouble
    {
      get
      {
        this.Set((JSONNode) new JSONData(0.0));
        return 0.0;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = 1517737785;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1698436171)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 693496195 ^ -1372400802;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = 229909922;
        JSONData aVal;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 506204240)) % 6U)
          {
            case 0:
              asBool = false;
              num1 = (int) num2 * 731547352 ^ 966628011;
              continue;
            case 1:
              num1 = (int) num2 * -579973719 ^ 358537680;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -256776323 ^ -2106978969;
              continue;
            case 4:
              aVal = new JSONData(false);
              num1 = (int) num2 * 332238300 ^ -400409869;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asBool;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override JSONArray AsArray
    {
      get
      {
label_1:
        int num1 = -1282975749;
        JSONArray aVal;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1165233631)) % 6U)
          {
            case 0:
              num1 = (int) num2 * -1014148497 ^ -771403002;
              continue;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 314551524 ^ 1930475323;
              continue;
            case 2:
              aVal = new JSONArray();
              num1 = (int) num2 * 1686517600 ^ -1377578716;
              continue;
            case 4:
              goto label_1;
            case 5:
              asArray = aVal;
              num1 = (int) num2 * -696664797 ^ 918023275;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
label_1:
        int num1 = -928660354;
        JSONClass aVal;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1205306573)) % 7U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1780227304 ^ 1464991095;
              continue;
            case 2:
              asObject = aVal;
              num1 = (int) num2 * -658502624 ^ -1978399384;
              continue;
            case 3:
              aVal = new JSONClass();
              num1 = (int) num2 * 46843220 ^ 1575242562;
              continue;
            case 5:
              num1 = (int) num2 * -755898536 ^ 1865042944;
              continue;
            case 6:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -360288197 ^ 769252945;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return asObject;
      }
    }
  }
}
