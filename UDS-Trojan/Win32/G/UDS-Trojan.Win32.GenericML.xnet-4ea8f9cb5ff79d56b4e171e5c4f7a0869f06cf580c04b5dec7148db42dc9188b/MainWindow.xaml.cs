// Decompiled with JetBrains decompiler
// Type: Path_Finder.MainWindow
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using Microsoft.Windows.Controls.Ribbon;
using Path_Finder.DataTypes;
using Path_Finder.Source.Managers;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;
using WPFExtensions.Controls;

namespace Path_Finder
{
  public partial class MainWindow : Microsoft.Windows.Controls.Ribbon.RibbonWindow, IComponentConnector, IStyleConnector
  {
    private LogicManager logicManager;
    private bool EventIsHandeled;
    internal MainWindow RibbonWindow;
    internal Grid LayoutRoot;
    internal Microsoft.Windows.Controls.Ribbon.Ribbon Ribbon;
    internal RibbonTab HomeTab;
    internal RibbonGroup GroupFile;
    internal RibbonButton ButtonOpen;
    internal RibbonGroup GroupGraph;
    internal RibbonButton ButtonReset;
    internal RibbonButton ButtonDefault;
    internal RibbonButton ButtonClean;
    internal RibbonGroup GroupFindPath;
    internal RibbonButton ButtonStart;
    internal RibbonButton ButtonStop;
    internal RibbonGroup GroupSpeed;
    internal RibbonRadioButton RadioButtonStep;
    internal RibbonRadioButton RadioButtonNormal;
    internal RibbonRadioButton RadioButtonFast;
    internal RibbonGroup GroupHeuristic;
    internal RibbonRadioButton RadioButtonDistance;
    internal RibbonRadioButton RadioButtonHops;
    internal RibbonGroup GroupMisc;
    internal RibbonButton ButtonHelp;
    internal RibbonButton ButtonExit;
    internal ZoomControl zoomControl;
    internal GraphLayoutCity graphLayout;
    internal TextBox richTextBoxLog;
    internal Label labelLog;
    private bool _contentLoaded;

    public GraphCity GraphToVisualize => this.logicManager.graphToVisualize;

    public MainWindow()
    {
      this.logicManager = new LogicManager(this);
      this.InitializeComponent();
    }

    private void ButtonOpen_Click(object sender, RoutedEventArgs e)
    {
      this.zoomControl.Mode = (ZoomControlModes) 0;
      this.logicManager.LoadGraphFromFile(ref this.graphLayout);
    }

    private void ButtonExit_Click(object sender, RoutedEventArgs e) => this.logicManager.Exit();

    private void ButtonStart_Click(object sender, RoutedEventArgs e)
    {
      if (this.logicManager.ReadyToStart())
      {
        this.logicManager.StartAlgorithm(ref this.graphLayout, ref this.richTextBoxLog, this);
      }
      else
      {
        int num = (int) MessageBox.Show("Cannot start A-star algorithm. Not all required data has been provided.", "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
      }
    }

    private void ButtonStop_Click(object sender, RoutedEventArgs e)
    {
      this.logicManager.StopAlgorithm();
      ((UIElement) this.graphLayout).IsEnabled = true;
      ((UIElement) this.ButtonOpen).IsEnabled = true;
      ((UIElement) this.ButtonReset).IsEnabled = true;
      ((UIElement) this.ButtonDefault).IsEnabled = true;
      ((UIElement) this.RadioButtonDistance).IsEnabled = true;
      ((UIElement) this.RadioButtonHops).IsEnabled = true;
      ((UIElement) this.RadioButtonStep).IsEnabled = true;
      ((UIElement) this.RadioButtonNormal).IsEnabled = true;
      ((UIElement) this.RadioButtonFast).IsEnabled = true;
      ((UIElement) this.ButtonClean).IsEnabled = true;
    }

    private void ButtonReset_Click(object sender, RoutedEventArgs e) => this.logicManager.ResetGraph(ref this.graphLayout);

    private void ButtonBack_Click(object sender, RoutedEventArgs e) => this.logicManager.ResetGraphToDefault(ref this.graphLayout);

    private void ButtonHelp_Click(object sender, RoutedEventArgs e) => this.logicManager.OpenHelp();

    private void ButtonClean_Click(object sender, RoutedEventArgs e)
    {
      this.logicManager.CleanGraph(ref this.graphLayout);
      this.richTextBoxLog.Text = "";
    }

    private void ButtonStep_Checked(object sender, RoutedEventArgs e)
    {
      this.logicManager.algSpeed = Alg_Speed.Steps;
      int num = (int) MessageBox.Show("Using step-by-step mode, press Start each time when you want to start the next step", "Path Finder", MessageBoxButton.OK, MessageBoxImage.Asterisk);
    }

    private void ButtonNormal_Checked(object sender, RoutedEventArgs e) => this.logicManager.algSpeed = Alg_Speed.Slow;

    private void ButtonFast_Checked(object sender, RoutedEventArgs e) => this.logicManager.algSpeed = Alg_Speed.Fast;

    private void RadioButtonDistance_Checked(object sender, RoutedEventArgs e) => this.logicManager.algHeuristic = Heuristic.Distance;

    private void RadioButtonHops_Checked(object sender, RoutedEventArgs e) => this.logicManager.algHeuristic = Heuristic.Hops;

    private void EdgeControl_MouseLeave(object sender, MouseEventArgs e) => this.EventIsHandeled = true;

    private void graphLayout_MouseLeave(object sender, MouseEventArgs e)
    {
      if (this.EventIsHandeled)
        return;
      this.logicManager.EstablishGraphCoordinates(ref this.graphLayout);
    }

    private void StackPanel_MouseLeave(object sender, MouseEventArgs e) => this.logicManager.UpdateVertexInfo((VertexCity) ((FrameworkElement) sender).DataContext, ref this.graphLayout);

    private void graphLayout_MouseEnter(object sender, MouseEventArgs e) => this.EventIsHandeled = false;

    private void StartCityItem_Click(object sender, RoutedEventArgs e) => this.logicManager.MarkStartCity((VertexCity) ((FrameworkElement) sender).DataContext, ref this.graphLayout);

    private void FinalCityItem_Click(object sender, RoutedEventArgs e) => this.logicManager.MarkFinalCity((VertexCity) ((FrameworkElement) sender).DataContext, ref this.graphLayout);

    private void DeleteItem_Click(object sender, RoutedEventArgs e) => this.logicManager.DeleteCity((VertexCity) ((FrameworkElement) sender).DataContext, ref this.graphLayout);

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/TypeDelega;component/mainwindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    internal Delegate _CreateDelegate(Type delegateType, string handler) => Delegate.CreateDelegate(delegateType, (object) this, handler);

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.RibbonWindow = (MainWindow) target;
          break;
        case 7:
          this.LayoutRoot = (Grid) target;
          break;
        case 8:
          this.Ribbon = (Microsoft.Windows.Controls.Ribbon.Ribbon) target;
          break;
        case 9:
          this.HomeTab = (RibbonTab) target;
          break;
        case 10:
          this.GroupFile = (RibbonGroup) target;
          break;
        case 11:
          this.ButtonOpen = (RibbonButton) target;
          ((ButtonBase) this.ButtonOpen).Click += new RoutedEventHandler(this.ButtonOpen_Click);
          break;
        case 12:
          this.GroupGraph = (RibbonGroup) target;
          break;
        case 13:
          this.ButtonReset = (RibbonButton) target;
          ((ButtonBase) this.ButtonReset).Click += new RoutedEventHandler(this.ButtonReset_Click);
          break;
        case 14:
          this.ButtonDefault = (RibbonButton) target;
          ((ButtonBase) this.ButtonDefault).Click += new RoutedEventHandler(this.ButtonBack_Click);
          break;
        case 15:
          this.ButtonClean = (RibbonButton) target;
          ((ButtonBase) this.ButtonClean).Click += new RoutedEventHandler(this.ButtonClean_Click);
          break;
        case 16:
          this.GroupFindPath = (RibbonGroup) target;
          break;
        case 17:
          this.ButtonStart = (RibbonButton) target;
          ((ButtonBase) this.ButtonStart).Click += new RoutedEventHandler(this.ButtonStart_Click);
          break;
        case 18:
          this.ButtonStop = (RibbonButton) target;
          ((ButtonBase) this.ButtonStop).Click += new RoutedEventHandler(this.ButtonStop_Click);
          break;
        case 19:
          this.GroupSpeed = (RibbonGroup) target;
          break;
        case 20:
          this.RadioButtonStep = (RibbonRadioButton) target;
          ((ToggleButton) this.RadioButtonStep).Checked += new RoutedEventHandler(this.ButtonStep_Checked);
          break;
        case 21:
          this.RadioButtonNormal = (RibbonRadioButton) target;
          ((ToggleButton) this.RadioButtonNormal).Checked += new RoutedEventHandler(this.ButtonNormal_Checked);
          break;
        case 22:
          this.RadioButtonFast = (RibbonRadioButton) target;
          ((ToggleButton) this.RadioButtonFast).Checked += new RoutedEventHandler(this.ButtonFast_Checked);
          break;
        case 23:
          this.GroupHeuristic = (RibbonGroup) target;
          break;
        case 24:
          this.RadioButtonDistance = (RibbonRadioButton) target;
          ((ToggleButton) this.RadioButtonDistance).Checked += new RoutedEventHandler(this.RadioButtonDistance_Checked);
          break;
        case 25:
          this.RadioButtonHops = (RibbonRadioButton) target;
          ((ToggleButton) this.RadioButtonHops).Checked += new RoutedEventHandler(this.RadioButtonHops_Checked);
          break;
        case 26:
          this.GroupMisc = (RibbonGroup) target;
          break;
        case 27:
          this.ButtonHelp = (RibbonButton) target;
          ((ButtonBase) this.ButtonHelp).Click += new RoutedEventHandler(this.ButtonHelp_Click);
          break;
        case 28:
          this.ButtonExit = (RibbonButton) target;
          ((ButtonBase) this.ButtonExit).Click += new RoutedEventHandler(this.ButtonExit_Click);
          break;
        case 29:
          this.zoomControl = (ZoomControl) target;
          break;
        case 30:
          this.graphLayout = (GraphLayoutCity) target;
          break;
        case 31:
          this.richTextBoxLog = (TextBox) target;
          break;
        case 32:
          this.labelLog = (Label) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IStyleConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 2:
          ((UIElement) target).MouseLeave += new MouseEventHandler(this.StackPanel_MouseLeave);
          break;
        case 3:
          ((MenuItem) target).Click += new RoutedEventHandler(this.StartCityItem_Click);
          break;
        case 4:
          ((MenuItem) target).Click += new RoutedEventHandler(this.FinalCityItem_Click);
          break;
        case 5:
          ((MenuItem) target).Click += new RoutedEventHandler(this.DeleteItem_Click);
          break;
        case 6:
          ((Style) target).Setters.Add((SetterBase) new EventSetter()
          {
            Event = UIElement.MouseLeaveEvent,
            Handler = (Delegate) new MouseEventHandler(this.EdgeControl_MouseLeave)
          });
          break;
      }
    }
  }
}
