// Decompiled with JetBrains decompiler
// Type: Microsoft.Exchange.OMA.Unsupported.OmaBrowseInstall.ErrorStrings
// Assembly: OmaBrowseInstall, Version=6.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 1551535E-661F-42F0-81A3-B6A9484A2B9D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Virus.Win32.Small.l-663b3b2e6b8cbb3371ba997be0422b59723f4a920b855a82c21bc407dd6b0ec4.exe

using System;
using System.Globalization;
using System.Resources;
using System.Threading;

namespace Microsoft.Exchange.OMA.Unsupported.OmaBrowseInstall
{
  public class ErrorStrings
  {
    private static CultureInfo m_Culture = (CultureInfo) null;
    private static bool loading = false;
    private static ErrorStrings loader = (ErrorStrings) null;
    private ResourceManager resources;

    public static CultureInfo Culture
    {
      get => ErrorStrings.m_Culture == null ? Thread.CurrentThread.CurrentUICulture : ErrorStrings.m_Culture;
      set => ErrorStrings.m_Culture = value;
    }

    public static string CounterCreationSuccessful => ErrorStrings.GetString(ErrorStrings.Culture, nameof (CounterCreationSuccessful));

    public static string CounterCreationFailed(object arg, object arg1) => ErrorStrings.GetString(ErrorStrings.Culture, nameof (CounterCreationFailed), arg, arg1);

    public static string CounterDeletionSuccessful => ErrorStrings.GetString(ErrorStrings.Culture, nameof (CounterDeletionSuccessful));

    public static string CounterDeletionFailed(object arg, object arg1) => ErrorStrings.GetString(ErrorStrings.Culture, nameof (CounterDeletionFailed), arg, arg1);

    public static string EventCreationSuccessful => ErrorStrings.GetString(ErrorStrings.Culture, nameof (EventCreationSuccessful));

    public static string EventCreationFailed(object arg, object arg1) => ErrorStrings.GetString(ErrorStrings.Culture, nameof (EventCreationFailed), arg, arg1);

    public static string EventDeletionSuccessful => ErrorStrings.GetString(ErrorStrings.Culture, nameof (EventDeletionSuccessful));

    public static string EventDeletionFailed(object arg, object arg1) => ErrorStrings.GetString(ErrorStrings.Culture, nameof (EventDeletionFailed), arg, arg1);

    public static string ServerLanguageNotFound(object arg, object arg1, object arg2) => ErrorStrings.GetString(ErrorStrings.Culture, nameof (ServerLanguageNotFound), arg, arg1, arg2);

    protected ErrorStrings() => this.resources = new ResourceManager(nameof (ErrorStrings), this.GetType().Module.Assembly);

    private static ErrorStrings GetLoader()
    {
      if (ErrorStrings.loader == null && !ErrorStrings.loading)
      {
        lock (typeof (ErrorStrings))
        {
          if (ErrorStrings.loader == null)
          {
            if (!ErrorStrings.loading)
            {
              ErrorStrings.loading = true;
              try
              {
                ErrorStrings.loader = new ErrorStrings();
              }
              finally
              {
                ErrorStrings.loading = false;
              }
            }
          }
        }
      }
      return ErrorStrings.loader;
    }

    public static string GetString(string name, params object[] args) => ErrorStrings.GetString(ErrorStrings.Culture, name, args);

    public static string GetString(CultureInfo culture, string name, params object[] args)
    {
      ErrorStrings loader = ErrorStrings.GetLoader();
      if (loader == null)
        return (string) null;
      string format = loader.resources.GetString(name, culture);
      return args != null && args.Length > 0 ? string.Format((IFormatProvider) culture, format, args) : format;
    }

    public static string GetString(string name) => ErrorStrings.GetString(ErrorStrings.Culture, name);

    public static string GetString(CultureInfo culture, string name) => ErrorStrings.GetLoader()?.resources.GetString(name, culture);
  }
}
