// Decompiled with JetBrains decompiler
// Type: Repository.ShowRepository
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Exceptions;
using Core.Helpers;
using Core.Infrastructure.Logging;
using DomainObjects;
using System;
using System.Linq;
using System.Linq.Expressions;

namespace Repository
{
  public class ShowRepository : BaseRepository<IShow, Show>, IShowRepository
  {
    private LogWriter writer = new LogWriter();

    public ShowRepository(IDatabase database)
      : base(database)
    {
    }

    public ShowRepository(IDatabaseFactory factory)
      : base(factory)
    {
    }

    private IQueryable<IShow> GetAll() => this.Database.ShowDataSource.Where<IShow>((Expression<Func<IShow, bool>>) (x => x.Deleted == false));

    public IQueryable<IShow> FindAll() => (IQueryable<IShow>) this.GetAll().OrderBy<IShow, DateTime?>((Expression<Func<IShow, DateTime?>>) (s => s.ShowDate));

    public IShow FindByShowId(Guid id) => this.GetAll().SingleOrDefault<IShow>((Expression<Func<IShow, bool>>) (show => show.ShowId == id));

    public IQueryable<IShow> FindShowsBeforeDate(DateTime date) => (IQueryable<IShow>) this.GetAll().Where<IShow>((Expression<Func<IShow, bool>>) (shows => shows.ShowDate <= (DateTime?) date)).OrderBy<IShow, int?>((Expression<Func<IShow, int?>>) (s => s.Order));

    public IQueryable<IShow> FindShowsAfterDate(DateTime date) => (IQueryable<IShow>) this.GetAll().Where<IShow>((Expression<Func<IShow, bool>>) (shows => shows.ShowDate >= (DateTime?) date)).OrderBy<IShow, int?>((Expression<Func<IShow, int?>>) (s => s.Order));

    public IShow FindByShowDate(DateTime date) => this.GetAll().SingleOrDefault<IShow>((Expression<Func<IShow, bool>>) (show => show.ShowDate == (DateTime?) date));

    public override void Add(IShow entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      entity.CreatedDate = DateTime.Now;
      if (this.GetAll().Any<IShow>((Expression<Func<IShow, bool>>) (show => show.ShowId == entity.ShowId)))
      {
        this.writer.WriteLine("A Show with an id={0}".FormatWith((object) entity.ShowId));
        throw new AlreadyExistsException("A Show with an id={0}".FormatWith((object) entity.ShowId));
      }
      base.Add(entity);
    }

    public override void Remove(IShow entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      base.Remove(entity);
    }
  }
}
