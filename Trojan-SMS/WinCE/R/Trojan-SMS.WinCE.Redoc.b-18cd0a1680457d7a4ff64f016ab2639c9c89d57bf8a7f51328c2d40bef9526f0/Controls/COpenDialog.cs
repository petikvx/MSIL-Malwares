// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.COpenDialog
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using System;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class COpenDialog : CControls
  {
    public COpenDialog(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      OpenFileDialog control = (OpenFileDialog) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "file":
          if (!assign)
            return new MethodReturn(place, control.FileName, 0.0);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          control.FileName = runReturn1.vString;
          return new MethodReturn(place);
        case "filter":
          if (!assign)
            return new MethodReturn(place, control.Filter, 0.0);
          RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn2.place;
          control.Filter = runReturn2.vString;
          return new MethodReturn(place);
        case "show":
          DialogResult dialogResult = control.ShowDialog();
          return new MethodReturn(place, ((int) dialogResult).ToString((IFormatProvider) CRunner.cul), 0.0);
        default:
          return new MethodReturn(place);
      }
    }

    public void ShortAdd(string s)
    {
      CEnhancedOpenDialog cenhancedOpenDialog = new CEnhancedOpenDialog();
      string Name;
      string Filter;
      CBuildDesigner.OpenDialogGetProperties(s, out string _, out Name, out int _, out int _, out Filter);
      cenhancedOpenDialog.name = Name.ToLower(CRunner.cul);
      cenhancedOpenDialog.control.Filter = Filter;
      this.CRunner.htControls.Add((object) cenhancedOpenDialog.name, (object) new WrapControl((object) cenhancedOpenDialog.control, (CControls) this));
    }

    public override void AddRunTimeEvent(object sender, string name)
    {
    }
  }
}
