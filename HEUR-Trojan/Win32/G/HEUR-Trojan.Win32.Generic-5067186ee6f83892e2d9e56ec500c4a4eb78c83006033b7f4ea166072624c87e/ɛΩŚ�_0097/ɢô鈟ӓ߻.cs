// Decompiled with JetBrains decompiler
// Type: ɛΩŚ�.ɢô鈟ӓ߻
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-5067186ee6f83892e2d9e56ec500c4a4eb78c83006033b7f4ea166072624c87e.exe

using ɛΩŚ\uFFFD\u0097;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;

namespace ɛΩŚ\uFFFD\u0097
{
  [StandardModule]
  public sealed class ɢô鈟ӓ\u07FB
  {
    public const uint Օ\uF0B9ɇę\u005E = 0;
    public const uint 䇹\uFFFDڿ꾯Ś = 8;
    public const uint \u003B恁̲Ң\uFFFD = 4;
    public static byte[] 퓜\uFFFDݝ\uFFFDג = BitConverter.GetBytes(1296188491);
    public static string \u00BEm\uFFFDۨ\uFFFD = "ObjectLength";
    public static string \uFFFD\uFFFDԜ\u00AB\uFFFD = "ChainingModeGCM";
    public static string מ鈟ɮ퓜鈇 = "AuthTagLength";
    public static string œթ\uFFFDzϘ = "ChainingMode";
    public static string 恁Oӛבҏ = "KeyDataBlob";
    public static string \u06E8Αۚ\uFFFD\uFFFD = "AES";
    public static string ЮՄ\uFFFDɇݝ = "Microsoft Primitive Provider";
    public static int ݝ\uFFFDޤ\u0385븤 = 1;
    public static int \uFFFDB\u0097\uFFFDΑ = 1;
    public static uint ΩƉş̧\uFFFD = 3221266434;

    [DllImport("bcrypt.dll", EntryPoint = "BCryptOpenAlgorithmProvider", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint ˤ\uFFFDc\uFFFDƉ(
      out IntPtr _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      [MarshalAs(UnmanagedType.LPWStr)] string _param2,
      uint _param3);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptCloseAlgorithmProvider", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint ɮƉٗ\uFFFDܣ(IntPtr _param0, uint _param1);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptGetProperty", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint \u032Eֵٕ㠰̱(
      IntPtr _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      byte[] _param2,
      int _param3,
      ref int _param4,
      uint _param5);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptSetProperty", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern uint 䇹2丐ʤŎ(
      IntPtr _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      byte[] _param2,
      int _param3,
      int _param4);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptImportKey", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint מ\u07FBzﾭߟ(
      IntPtr _param0,
      IntPtr _param1,
      [MarshalAs(UnmanagedType.LPWStr)] string _param2,
      out IntPtr _param3,
      IntPtr _param4,
      int _param5,
      byte[] _param6,
      int _param7,
      uint _param8);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptDestroyKey", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint ɛÒşşҏ(IntPtr _param0);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptEncrypt", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint \u0327ӛ\uFFFDӥk(
      IntPtr _param0,
      byte[] _param1,
      int _param2,
      ref ɢô鈟ӓ\u07FB.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO _param3,
      byte[] _param4,
      int _param5,
      byte[] _param6,
      int _param7,
      ref int _param8,
      uint _param9);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptDecrypt", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern uint R\u07B4\uFFFDŔ̲(
      IntPtr éɛʓƌϱ,
      byte[] _param1,
      int _param2,
      ref ɢô鈟ӓ\u07FB.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO _param3,
      byte[] _param4,
      int _param5,
      byte[] _param6,
      int גӚ㠰tɛ,
      ref int _param8,
      int _param9);

    public struct BCRYPT_PSS_PADDING_INFO
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string pszAlgId;
      public int cbSalt;

      public BCRYPT_PSS_PADDING_INFO(string pszAlgId, int cbSalt)
        : this()
      {
        this.pszAlgId = pszAlgId;
        this.cbSalt = cbSalt;
      }
    }

    public struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO : IDisposable
    {
      public int cbSize;
      public int dwInfoVersion;
      public IntPtr pbNonce;
      public int cbNonce;
      public IntPtr pbAuthData;
      public int cbAuthData;
      public IntPtr pbTag;
      public int cbTag;
      public IntPtr pbMacContext;
      public int cbMacContext;
      public int cbAAD;
      public long cbData;
      public int dwFlags;

      public BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(byte[] iv, byte[] aad, byte[] tag)
        : this()
      {
        this.dwInfoVersion = ɢô鈟ӓ\u07FB.\uFFFDB\u0097\uFFFDΑ;
        this.cbSize = Marshal.SizeOf(typeof (ɢô鈟ӓ\u07FB.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO));
        if (iv != null)
        {
          this.cbNonce = iv.Length;
          this.pbNonce = Marshal.AllocHGlobal(this.cbNonce);
          Marshal.Copy(iv, 0, this.pbNonce, this.cbNonce);
        }
        if (aad != null)
        {
          this.cbAuthData = aad.Length;
          this.pbAuthData = Marshal.AllocHGlobal(this.cbAuthData);
          Marshal.Copy(aad, 0, this.pbAuthData, this.cbAuthData);
        }
        if (tag == null)
          return;
        this.cbTag = tag.Length;
        this.pbTag = Marshal.AllocHGlobal(this.cbTag);
        Marshal.Copy(tag, 0, this.pbTag, this.cbTag);
        this.cbMacContext = tag.Length;
        this.pbMacContext = Marshal.AllocHGlobal(this.cbMacContext);
      }

      public void Dispose()
      {
        if (this.pbNonce != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbNonce);
        if (this.pbTag != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbTag);
        if (this.pbAuthData != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbAuthData);
        if (!(this.pbMacContext != IntPtr.Zero))
          return;
        Marshal.FreeHGlobal(this.pbMacContext);
      }
    }

    public struct BCRYPT_KEY_LENGTHS_STRUCT
    {
      public int dwMinLength;
      public int dwMaxLength;
      public int dwIncrement;
    }

    public struct BCRYPT_OAEP_PADDING_INFO
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string pszAlgId;
      public IntPtr pbLabel;
      public int cbLabel;

      public BCRYPT_OAEP_PADDING_INFO(string alg)
        : this()
      {
        this.pszAlgId = alg;
        this.pbLabel = IntPtr.Zero;
        this.cbLabel = 0;
      }
    }
  }
}
