// Decompiled with JetBrains decompiler
// Type: BatchRunner.Fleet
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

namespace BatchRunner
{
  public class Fleet
  {
    private int owner;
    private int numShips;
    private int sourcePlanet;
    private int destinationPlanet;
    private int totalTripLength;
    private int turnsRemaining;

    public Fleet(
      int owner,
      int numShips,
      int sourcePlanet,
      int destinationPlanet,
      int totalTripLength,
      int turnsRemaining)
    {
label_1:
      int num1 = -604074460;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1604624755)) % 8U)
        {
          case 0:
            this.owner = owner;
            num1 = (int) num2 * -1300712641 ^ -1215096233;
            continue;
          case 1:
            num1 = (int) num2 * -143346640 ^ -107712771;
            continue;
          case 2:
            this.numShips = numShips;
            num1 = (int) num2 * 538179511 ^ -712499994;
            continue;
          case 3:
            this.totalTripLength = totalTripLength;
            num1 = (int) num2 * 836003821 ^ 1845339420;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.sourcePlanet = sourcePlanet;
            this.destinationPlanet = destinationPlanet;
            num1 = (int) num2 * 287841534 ^ 398990248;
            continue;
          case 6:
            this.turnsRemaining = turnsRemaining;
            num1 = (int) num2 * 1020508522 ^ -990841083;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public Fleet(int owner, int numShips)
    {
      this.owner = owner;
      this.numShips = numShips;
      this.sourcePlanet = -1;
      this.destinationPlanet = -1;
      this.totalTripLength = -1;
      this.turnsRemaining = -1;
    }

    public int Owner
    {
      get
      {
label_1:
        int num1 = -1279641845;
        int owner;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1666036975)) % 3U)
          {
            case 1:
              owner = this.owner;
              num1 = (int) num2 * -492944111 ^ 1542067538;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return owner;
      }
    }

    public int NumShips
    {
      get
      {
label_1:
        int num1 = -155711475;
        int numShips;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -401745866)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -29133296 ^ 375593652;
              continue;
            case 3:
              numShips = this.numShips;
              num1 = (int) num2 * 1655039931 ^ -531822986;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return numShips;
      }
    }

    public int SourcePlanet
    {
      get
      {
label_1:
        int num1 = 619608739;
        int sourcePlanet;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 699980856)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1297257453 ^ 1888175085;
              continue;
            case 3:
              sourcePlanet = this.sourcePlanet;
              num1 = (int) num2 * 1549662192 ^ 1752591449;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return sourcePlanet;
      }
    }

    public int DestinationPlanet
    {
      get
      {
label_1:
        int num1 = 85239812;
        int destinationPlanet;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 666895165)) % 4U)
          {
            case 1:
              destinationPlanet = this.destinationPlanet;
              num1 = (int) num2 * 284830408 ^ -1594986661;
              continue;
            case 2:
              num1 = (int) num2 * -546905999 ^ -847263813;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return destinationPlanet;
      }
    }

    public int TotalTripLength
    {
      get
      {
label_1:
        int num1 = -1970904024;
        int totalTripLength;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1219512743)) % 4U)
          {
            case 1:
              totalTripLength = this.totalTripLength;
              num1 = (int) num2 * -784646291 ^ 1357430478;
              continue;
            case 2:
              num1 = (int) num2 * -255071241 ^ 1117854359;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return totalTripLength;
      }
    }

    public int TurnsRemaining
    {
      get
      {
label_1:
        int num1 = -927649895;
        int turnsRemaining;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -820414828)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              turnsRemaining = this.turnsRemaining;
              num1 = (int) num2 * -324435669 ^ 616388149;
              continue;
            case 2:
              num1 = (int) num2 * 1312403134 ^ -544676425;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return turnsRemaining;
      }
    }

    public void RemoveShips(int amount) => this.numShips -= amount;

    public void TimeStep()
    {
label_1:
      int num1 = -1675040910;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -163380966)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 723021811 ^ 546819458;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 495872111 ^ -1510466473;
            continue;
          case 3:
            num1 = (int) num2 * -1491643973 ^ -1518679374;
            continue;
          case 4:
            num1 = -1758838652;
            continue;
          case 5:
            goto label_1;
          case 6:
            --this.turnsRemaining;
            num1 = (int) num2 * 456967645 ^ 1148559971;
            continue;
          case 7:
            int num3 = this.turnsRemaining <= 0 ? -1053380085 : (num3 = -143521123);
            num1 = num3 ^ (int) num2 * 2115913756;
            continue;
          case 8:
            this.turnsRemaining = 0;
            num1 = (int) num2 * -1668505113 ^ -605386267;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private Fleet(Fleet _f)
    {
      this.owner = _f.owner;
      this.numShips = _f.numShips;
      this.sourcePlanet = _f.sourcePlanet;
      this.destinationPlanet = _f.destinationPlanet;
      this.totalTripLength = _f.totalTripLength;
      this.turnsRemaining = _f.turnsRemaining;
    }

    public void Kill()
    {
      this.owner = 0;
      this.numShips = 0;
      this.turnsRemaining = 0;
    }

    internal Fleet clone()
    {
label_1:
      int num1 = 490504266;
      Fleet fleet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1501502124)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 1325124870 ^ -1489803042;
            continue;
          case 2:
            fleet = new Fleet(this);
            num1 = (int) num2 * 1472268324 ^ -694422487;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return fleet;
    }
  }
}
