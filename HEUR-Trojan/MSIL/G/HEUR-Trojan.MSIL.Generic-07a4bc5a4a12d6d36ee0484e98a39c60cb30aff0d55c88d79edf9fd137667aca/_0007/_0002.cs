// Decompiled with JetBrains decompiler
// Type: .
// Assembly: derver, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 76892F40-3DAD-430C-AF53-E7AE49BEB72F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Generic-07a4bc5a4a12d6d36ee0484e98a39c60cb30aff0d55c88d79edf9fd137667aca.exe

using \u0003;
using \u0006;
using \u0007;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0007
{
  internal sealed class \u0002
  {
    private static readonly uint \u0001;
    private uint \u0002;
    [NonSerialized]
    internal static \u0004 \u0095;

    [SpecialName]
    public long \u0001() => (long) this.\u0002;

    public \u0002() => this.\u0001();

    public void \u0001() => this.\u0002 = 1U;

    public void \u0001([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      if (false)
        goto label_21;
      else
        goto label_23;
label_12:
      int num1;
      int num2;
      int num3;
      if (num1 > num2)
        num3 = obj2;
      else
        goto label_15;
label_14:
      int num4 = num3;
label_15:
      int num5 = obj2;
      int num6 = num4;
      if (true)
      {
        obj2 = num5 - num6;
        goto label_19;
      }
label_18:
      uint num7 = (uint) (num5 + num6);
      uint num8;
      num8 += num7;
label_19:
      if (--num4 >= 0)
      {
        int num9 = (int) num7;
        num6 = (int) obj0[obj1++] & (int) byte.MaxValue;
        num5 = num9;
        goto label_18;
      }
      else
      {
        num7 %= \u0002.\u0001;
        num8 %= \u0002.\u0001;
      }
label_21:
      if (obj2 > 0)
      {
        if (true)
          num4 = 3800;
        num1 = num4;
        num2 = obj2;
        goto label_12;
      }
      else
      {
        this.\u0002 = num8 << 16 | num7;
        return;
      }
label_23:
      if (obj0 == null)
        throw new ArgumentNullException(\u0002.\u0095(955));
      if (obj1 >= 0 && obj2 >= 0)
      {
        int num10 = obj1;
        int num11 = obj2;
        if (true)
        {
          if (num10 + num11 <= obj0.Length)
          {
            num7 = this.\u0002 & (uint) ushort.MaxValue;
            int num12 = (int) this.\u0002;
            num11 = 16;
            num10 = num12;
          }
          else
            goto label_26;
        }
        if (num11 != 0)
        {
          int num13 = (int) ((uint) num10 >> num11);
          if (true)
          {
            num8 = (uint) num13;
            goto label_21;
          }
          else
          {
            num3 = num13;
            goto label_14;
          }
        }
        else
        {
          num2 = num11;
          num1 = num10;
          goto label_12;
        }
      }
label_26:
      throw new ArgumentOutOfRangeException();
    }

    static \u0002()
    {
      \u0002.\u0001(typeof (\u0002));
      \u0002.\u0001 = 65521U;
    }
  }
}
