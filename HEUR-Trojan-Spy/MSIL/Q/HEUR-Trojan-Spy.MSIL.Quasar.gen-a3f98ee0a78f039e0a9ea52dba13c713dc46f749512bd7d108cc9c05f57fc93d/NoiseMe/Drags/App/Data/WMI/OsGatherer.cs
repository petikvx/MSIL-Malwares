// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.WMI.OsGatherer
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;

namespace NoiseMe.Drags.App.Data.WMI
{
  public static class OsGatherer
  {
    private static string ClearEmpties(string input) => string.Join(" ", input.Trim().Split(new char[1]
    {
      ' '
    }, StringSplitOptions.RemoveEmptyEntries));

    private static string ClearRussian(string input)
    {
      string empty = string.Empty;
      foreach (char ch in input)
      {
        if (!"йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ".Contains(ch.ToString()))
          empty += ch.ToString();
      }
      return OsGatherer.ClearEmpties(empty);
    }

    public static string GetCaption() => OsGatherer.ClearRussian(WmiInstance.PropertyQuery<string>("Win32_OperatingSystem", "Caption"));

    public static string GetOSArchitecture() => !PlatformHelper.Is64Bit ? "x32 Bit" : "x64 Bit";

    public static string GetSerialNumber() => WmiInstance.PropertyQuery<string>("Win32_OperatingSystem", "SerialNumber");

    public static DateTime? GetInstallDate() => WmiInstance.PropertyQuery<DateTime?>("Win32_OperatingSystem", "InstallDate");

    public static DateTime? GetLastBootUpTime() => WmiInstance.PropertyQuery<DateTime?>("Win32_OperatingSystem", "LastBootUpTime");

    public static DateTime? GetLocalDateTime() => WmiInstance.PropertyQuery<DateTime?>("Win32_OperatingSystem", "LocalDateTime");

    public static string GetBootDevice() => WmiInstance.PropertyQuery<string>("Win32_OperatingSystem", "BootDevice");

    public static string GetSystemDevice() => WmiInstance.PropertyQuery<string>("Win32_OperatingSystem", "SystemDevice");

    public static string GetSystemDrive() => WmiInstance.PropertyQuery<string>("Win32_OperatingSystem", "SystemDrive");

    public static string GetSystemDirectory() => WmiInstance.PropertyQuery<string>("Win32_OperatingSystem", "SystemDirectory");

    public static string GetWindowsDirectory() => WmiInstance.PropertyQuery<string>("Win32_OperatingSystem", "WindowsDirectory");

    public static uint? GetNumberOfUsers() => WmiInstance.PropertyQuery<uint?>("Win32_OperatingSystem", "NumberOfUsers");

    public static uint? GetNumberOfProcesses() => WmiInstance.PropertyQuery<uint?>("Win32_OperatingSystem", "NumberOfProcesses");
  }
}
