// Decompiled with JetBrains decompiler
// Type: 011358233412.642099997269
// Assembly: 069511259246, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 6D0FD131-484D-4146-B8A3-FCA5C0E4E111
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-e7ff83830fd4bf4e75004c85a34aa787b5c6b7dedba3c5ff9843edd5e688f2d5.exe

using \u003293834666503;
using \u003329453495694;
using \u003643705690276;
using \u003699552618750;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace \u003011358233412
{
  public sealed class \u003642099997269
  {
    private const string \u003299335771458 = "Debugger";
    private const string \u003508770506746 = "MILaunchers";
    private string \u003992314950910;
    private string \u003689403722955;
    private RegistryKey \u003928551026551;

    public \u003642099997269(string registryRoot)
    {
      if (string.IsNullOrEmpty(registryRoot))
        throw new ArgumentNullException(nameof (registryRoot));
      if (string.IsNullOrEmpty("engineId"))
        throw new ArgumentNullException("engineId");
      this.\u003689403722955 = registryRoot;
      this.\u003928551026551 = Registry.LocalMachine.OpenSubKey(registryRoot);
      if (this.\u003928551026551 == null)
        throw new \u003509392879404(registryRoot);
    }

    public void \u003839783518564(Guid _param1) => this.\u003992314950910 = this.\u003992314950910 == null ? _param1.ToString("B", (IFormatProvider) CultureInfo.InvariantCulture) : throw new InvalidOperationException();

    public string \u003163286481197 => this.\u003689403722955;

    public object \u003751238602491(string _param1) => this.\u003992314950910 != null ? this.\u003733399897349("AD7Metrics\\Engine\\" + this.\u003992314950910, _param1) : throw new InvalidOperationException();

    public void \u003994688902709(Guid _param1, out \u003354497461219 _param2, out string _param3)
    {
      string name = "AD7Metrics\\Exception\\" + _param1.ToString("B", (IFormatProvider) CultureInfo.InvariantCulture);
      RegistryKey key = this.\u003928551026551.OpenSubKey(name);
      _param2 = key != null ? new \u003354497461219(key) : throw new \u003509392879404("$RegRoot$\\" + name);
      _param3 = ((IEnumerable<string>) key.GetSubKeyNames()).Single<string>();
    }

    public \u003973557032412 \u003518743550236(string _param1, string _param2)
    {
      if (string.IsNullOrEmpty(_param2))
        throw new ArgumentNullException("logFileName");
      object obj = string.IsNullOrEmpty(_param1) ? this.\u003751238602491("EnableLogging") : this.\u003733399897349("Debugger", _param1);
      return obj == null || !(obj is int num) || num == 0 ? (\u003973557032412) null : new \u003973557032412(\u003973557032412.\u003286458845972(_param2, false));
    }

    public T \u003836797751416<T>(string _param1, T _param2) => this.\u003856495650041<T>("Debugger", _param1, _param2);

    public object \u003885966629091(string _param1)
    {
      Guid guid = new Guid(this.\u003856495650041<string>("MILaunchers", _param1, Guid.Empty.ToString()));
      return guid == Guid.Empty ? (object) null : \u003677273786078.\u003475582798406(this, guid);
    }

    private T \u003856495650041<T>(string _param1, string _param2, T _param3)
    {
      object obj = this.\u003733399897349(_param1, _param2);
      if (obj == null)
        return _param3;
      try
      {
        return (T) obj;
      }
      catch (InvalidCastException ex)
      {
        return _param3;
      }
    }

    private object \u003733399897349(string _param1, string _param2)
    {
      using (RegistryKey registryKey = this.\u003928551026551.OpenSubKey(_param1))
        return registryKey?.GetValue(_param2);
    }
  }
}
