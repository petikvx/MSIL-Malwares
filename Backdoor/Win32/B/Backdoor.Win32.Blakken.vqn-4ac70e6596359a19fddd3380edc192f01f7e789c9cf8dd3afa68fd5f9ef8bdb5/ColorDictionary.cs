// Decompiled with JetBrains decompiler
// Type: ColorDictionary
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;

public class ColorDictionary : Dictionary<RenderColor, Color>
{
  private Dictionary<RenderColor, Pen> MyPencils = new Dictionary<RenderColor, Pen>();
  private Dictionary<RenderColor, Brush> MyBrushes = new Dictionary<RenderColor, Brush>();
  private bool PensAndBrushesCreated;

  public void CreatePensAndBrushes()
  {
label_1:
    int num1 = 715763360;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ 82076233)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          if (!this.PensAndBrushesCreated)
          {
            num1 = (int) num2 * 1869084714 ^ 1094502296;
            continue;
          }
          goto label_24;
        default:
          goto label_5;
      }
    }
label_5:
    Dictionary<RenderColor, Color>.Enumerator enumerator = this.GetEnumerator();
    try
    {
label_9:
      int num3 = !enumerator.MoveNext() ? 612042801 : (num3 = 1524865507);
      KeyValuePair<RenderColor, Color> current;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num3 ^ 82076233)) % 7U)
        {
          case 0:
            num3 = (int) num4 * -620416496 ^ 767551549;
            continue;
          case 1:
            current = enumerator.Current;
            num3 = 11768924;
            continue;
          case 2:
            num3 = 1524865507;
            continue;
          case 3:
            goto label_9;
          case 4:
            num3 = (int) num4 * 1576561896 ^ -812378966;
            continue;
          case 6:
            SolidBrush solidBrush = ColorDictionary.\u200D​‍‎‫‬‌‫‍⁫⁯‭‎⁪‍⁮‭⁪‌‫‍⁮⁫‭⁫‫⁭‫⁬‏‮⁬‍⁯​⁫‪‫‮‮(current.Value);
            this.MyBrushes.Add(current.Key, (Brush) solidBrush);
            this.MyPencils.Add(current.Key, ColorDictionary.\u200B‍‍⁪‪⁭‪⁭⁮‌‬⁪‍⁬⁯⁪⁪​‪‍​⁯⁫⁮‫⁫‍​‭‬‏​‭⁮‬‪⁬⁫​⁬‮((Brush) solidBrush));
            num3 = (int) num4 * 1325061755 ^ -2005664817;
            continue;
          default:
            goto label_20;
        }
      }
    }
    finally
    {
      enumerator.Dispose();
label_15:
      int num5 = 995414091;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num5 ^ 82076233)) % 3U)
        {
          case 0:
            goto label_15;
          case 2:
            num5 = (int) num6 * 549320356 ^ 363847307;
            continue;
          default:
            goto label_19;
        }
      }
label_19:;
    }
label_20:
label_21:
    int num7 = 146478826;
label_22:
    uint num8;
    switch ((num8 = (uint) (num7 ^ 82076233)) % 3U)
    {
      case 0:
        goto label_21;
      case 1:
        return;
      case 2:
        break;
      default:
        return;
    }
label_24:
    this.PensAndBrushesCreated = true;
    num7 = 749555334;
    goto label_22;
  }

  public void ResetClear()
  {
label_1:
    int num1 = 905164585;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ 1161783770)) % 3U)
      {
        case 0:
          goto label_1;
        case 1:
          num1 = (int) num2 * -20144258 ^ -1265111454;
          continue;
        default:
          goto label_4;
      }
    }
label_4:
    Dictionary<RenderColor, Pen>.ValueCollection.Enumerator enumerator1 = this.MyPencils.Values.GetEnumerator();
    try
    {
label_9:
      int num3 = !enumerator1.MoveNext() ? 495276584 : (num3 = 169608410);
      Pen current;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num3 ^ 1161783770)) % 5U)
        {
          case 1:
            ColorDictionary.\u200B‭‎‍‫‌⁫‎‭‫⁮⁯‬⁬⁫‭‎‍‫⁬‪‏⁯⁭‌⁮‬‪⁫‍‏‪‎‏‭‬⁭⁬⁫‪‮(current);
            num3 = (int) num4 * 1694895089 ^ 449316353;
            continue;
          case 2:
            goto label_9;
          case 3:
            current = enumerator1.Current;
            num3 = 640966826;
            continue;
          case 4:
            num3 = 169608410;
            continue;
          default:
            goto label_16;
        }
      }
    }
    finally
    {
      enumerator1.Dispose();
label_12:
      int num5 = 1011611124;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num5 ^ 1161783770)) % 3U)
        {
          case 1:
            num5 = (int) num6 * -584008248 ^ -9999187;
            continue;
          case 2:
            goto label_12;
          default:
            goto label_15;
        }
      }
label_15:;
    }
label_16:
    using (Dictionary<RenderColor, Brush>.ValueCollection.Enumerator enumerator2 = this.MyBrushes.Values.GetEnumerator())
    {
label_21:
      int num7 = !enumerator2.MoveNext() ? 1477524803 : (num7 = 1382000694);
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ 1161783770)) % 5U)
        {
          case 0:
            num7 = (int) num8 * 497444833 ^ -145667150;
            continue;
          case 1:
            goto label_21;
          case 3:
            ColorDictionary.\u202C‏‍⁭‪‎‮⁫‫‎‮⁬⁮‭⁬⁫⁯⁬⁪‌‪⁪⁯⁭‍‬‎⁬‮‪⁪⁮⁪‬⁫‬​⁬‌‮(enumerator2.Current);
            num7 = 1242517402;
            continue;
          case 4:
            num7 = 1382000694;
            continue;
          default:
            goto label_25;
        }
      }
    }
label_25:
    this.MyBrushes.Clear();
label_26:
    int num9 = 1422851894;
    while (true)
    {
      uint num10;
      switch ((num10 = (uint) (num9 ^ 1161783770)) % 6U)
      {
        case 0:
          this.PensAndBrushesCreated = false;
          num9 = (int) num10 * -431535212 ^ 1289705437;
          continue;
        case 1:
          this.Clear();
          num9 = (int) num10 * -436311923 ^ -409181045;
          continue;
        case 2:
          this.MyPencils.Clear();
          num9 = (int) num10 * -1001851289 ^ -1810615325;
          continue;
        case 3:
          goto label_26;
        case 4:
          goto label_28;
        case 5:
          num9 = (int) num10 * -835228929 ^ -1629560089;
          continue;
        default:
          goto label_23;
      }
    }
label_28:
    return;
label_23:;
  }

  public Pen GetPen(RenderColor color)
  {
label_1:
    int num1 = -1148215675;
    Pen pencil;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ -1518929608)) % 5U)
      {
        case 0:
          pencil = this.MyPencils[color];
          num1 = (int) num2 * -1428901763 ^ -843065905;
          continue;
        case 1:
          this.CreatePensAndBrushes();
          num1 = (int) num2 * 933314538 ^ 207157928;
          continue;
        case 3:
          goto label_1;
        case 4:
          num1 = (int) num2 * -557544720 ^ 426772691;
          continue;
        default:
          goto label_6;
      }
    }
label_6:
    return pencil;
  }

  public Brush GetBrush(RenderColor color)
  {
label_1:
    int num1 = -544590648;
    Brush brush;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ -2027034206)) % 5U)
      {
        case 0:
          goto label_1;
        case 2:
          this.CreatePensAndBrushes();
          num1 = (int) num2 * 1184557499 ^ 1511318325;
          continue;
        case 3:
          brush = this.MyBrushes[color];
          num1 = (int) num2 * 126679983 ^ 885095004;
          continue;
        case 4:
          num1 = (int) num2 * -613666962 ^ 1527683789;
          continue;
        default:
          goto label_6;
      }
    }
label_6:
    return brush;
  }

  internal RenderColor GetDarkColor(int player)
  {
    RenderColor darkColor = (RenderColor) (player + 3);
label_1:
    int num1 = -773899960;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ -1016265103)) % 3U)
      {
        case 1:
          num1 = (int) num2 * 1564348776 ^ -1247242247;
          continue;
        case 2:
          goto label_1;
        default:
          goto label_4;
      }
    }
label_4:
    return darkColor;
  }

  internal RenderColor GetLightColor(int player)
  {
    RenderColor lightColor = (RenderColor) player;
label_1:
    int num1 = 1132496947;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ 1721061764)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          num1 = (int) num2 * 594355656 ^ -1320595160;
          continue;
        default:
          goto label_4;
      }
    }
label_4:
    return lightColor;
  }

  internal Brush GetDarkBrush(int player)
  {
label_1:
    int num1 = -878040358;
    Brush brush;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ -1411703619)) % 4U)
      {
        case 0:
          num1 = (int) num2 * -1117264500 ^ -1101511572;
          continue;
        case 2:
          goto label_1;
        case 3:
          brush = this.GetBrush(this.GetDarkColor(player));
          num1 = (int) num2 * 869025244 ^ -123696867;
          continue;
        default:
          goto label_5;
      }
    }
label_5:
    return brush;
  }

  internal Brush GetLightBrush(int player)
  {
    Brush brush = this.GetBrush(this.GetLightColor(player));
label_1:
    int num1 = 1086741970;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ 2097838852)) % 3U)
      {
        case 0:
          goto label_1;
        case 1:
          num1 = (int) num2 * -1805616619 ^ -2044971588;
          continue;
        default:
          goto label_4;
      }
    }
label_4:
    return brush;
  }

  internal Pen GetDarkPen(int player) => this.GetPen(this.GetDarkColor(player));

  internal Pen GetLightPen(int player)
  {
    Pen pen = this.GetPen(this.GetLightColor(player));
label_1:
    int num1 = 192302675;
    while (true)
    {
      uint num2;
      switch ((num2 = (uint) (num1 ^ 1135452146)) % 3U)
      {
        case 1:
          num1 = (int) num2 * 1034249996 ^ 138304628;
          continue;
        case 2:
          goto label_1;
        default:
          goto label_4;
      }
    }
label_4:
    return pen;
  }

  static SolidBrush \u200D​‍‎‫‬‌‫‍⁫⁯‭‎⁪‍⁮‭⁪‌‫‍⁮⁫‭⁫‫⁭‫⁬‏‮⁬‍⁯​⁫‪‫‮‮([In] Color obj0) => new SolidBrush(obj0);

  static Pen \u200B‍‍⁪‪⁭‪⁭⁮‌‬⁪‍⁬⁯⁪⁪​‪‍​⁯⁫⁮‫⁫‍​‭‬‏​‭⁮‬‪⁬⁫​⁬‮([In] Brush obj0) => new Pen(obj0);

  static void \u200B‭‎‍‫‌⁫‎‭‫⁮⁯‬⁬⁫‭‎‍‫⁬‪‏⁯⁭‌⁮‬‪⁫‍‏‪‎‏‭‬⁭⁬⁫‪‮([In] Pen obj0) => obj0.Dispose();

  static void \u202C‏‍⁭‪‎‮⁫‫‎‮⁬⁮‭⁬⁫⁯⁬⁪‌‪⁪⁯⁭‍‬‎⁬‮‪⁪⁮⁪‬⁫‬​⁬‌‮([In] Brush obj0) => obj0.Dispose();
}
