// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: ByteTokenEncodi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 9BCE2B70-1A4C-43FA-BCC8-8DBBEE1C54F3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0d4b7a493ffb322f46927f4d290740e9157c549cdb50db1ce746065332ed317c.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = -909639993;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1856966961)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1190529708 ^ -525422250;
            continue;
          case 2:
            num1 = (int) num2 * -115773858 ^ 1290016290;
            continue;
          case 3:
            this.m_Node = aNode;
            num1 = (int) num2 * -1768737982 ^ 188858293;
            continue;
          case 4:
            this.m_Key = (string) null;
            num1 = (int) num2 * -1575964812 ^ 1719566751;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = -961897272;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1128874332)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * -1600211468 ^ 1400070902;
            continue;
          case 2:
            this.m_Key = aKey;
            num1 = (int) num2 * -1438656073 ^ 1398793693;
            continue;
          case 3:
            num1 = (int) num2 * -239321169 ^ 1768423062;
            continue;
          case 4:
            num1 = (int) num2 * 567965845 ^ -1049139687;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = 1299711991;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1617692891)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -166954721 ^ -1260410525;
            continue;
          case 1:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * -56445646 ^ -1340287357;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = (int) num2 * -988846971 ^ -1970147270;
            continue;
          case 4:
            num1 = (int) num2 * -1604248952 ^ -1624804944;
            continue;
          case 5:
            num1 = 1704519750;
            continue;
          case 6:
            int num3 = flag ? -2126391568 : (num3 = -2050661982);
            num1 = num3 ^ (int) num2 * -231837524;
            continue;
          case 8:
            num1 = (int) num2 * 2107609115 ^ 741782021;
            continue;
          case 9:
            num1 = (int) num2 * 425064670 ^ 294950041;
            continue;
          case 10:
            flag = this.m_Key == null;
            num1 = (int) num2 * 720737759 ^ -484310334;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this.m_Node = (JSONNode) null;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 1230218656;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1851925)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * -719048938 ^ 918846952;
              continue;
            case 3:
              num1 = (int) num2 * 1809495406 ^ 1840295857;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 205609832;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 511393124)) % 6U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 423345047 ^ 1119095173;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 1422530600 ^ 473046217;
              continue;
            case 4:
              aVal = new JSONArray();
              num1 = (int) num2 * -963437211 ^ -31546877;
              continue;
            case 5:
              aVal.Add(value);
              num1 = (int) num2 * -1871981825 ^ 745051402;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1832953310;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1315019741)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * 1879747416 ^ 1050869524;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1978012762;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 657077145)) % 6U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1060259829 ^ 2058623913;
              continue;
            case 1:
              aVal = new JSONClass();
              num1 = (int) num2 * -580098538 ^ -679996846;
              continue;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * 1623763186 ^ 1094831263;
              continue;
            case 5:
              aVal.Add(aKey, value);
              num1 = (int) num2 * -1309683595 ^ -1485731118;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
      aVal.Add(aItem);
label_1:
      int num1 = 45017758;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1503247078)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1083175608 ^ -1264474027;
            continue;
          case 2:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 929914340 ^ 237150620;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -716156431 ^ 207945108;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 503217501;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1199539385)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            aVal = new JSONClass();
            num1 = (int) num2 * 2028082249 ^ 1900471353;
            continue;
          case 2:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -2114118167 ^ 232420278;
            continue;
          case 3:
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -300531950 ^ -1318788473;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      bool flag1 = b == null;
label_1:
      int num1 = -987492071;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -923309910)) % 6U)
        {
          case 0:
            flag2 = true;
            num1 = (int) num2 * 813059569 ^ 1359821531;
            continue;
          case 1:
            num1 = (int) num2 * -527256742 ^ 2098345557;
            continue;
          case 2:
            goto label_1;
          case 4:
            flag2 = (object) a == b;
            num1 = -1853562837;
            continue;
          case 5:
            int num3 = flag1 ? -2012323000 : (num3 = -824988862);
            num1 = num3 ^ (int) num2 * -1058434254;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = -1741413874;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1443692266)) % 3U)
        {
          case 1:
            flag = !(a == b);
            num1 = (int) num2 * 576066852 ^ -261177462;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
      if (obj != null)
        goto label_4;
label_1:
      int num1 = -551835329;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1851493486)) % 4U)
        {
          case 0:
            goto label_4;
          case 1:
            flag = true;
            num1 = (int) num2 * 2010655931 ^ -423698433;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
label_4:
      flag = (object) this == obj;
      num1 = -1978882144;
      goto label_2;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = -1325591900;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -24558985)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1146243408 ^ 698925833;
            continue;
          case 3:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * -1762136192 ^ -1086746406;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = -809742326;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1201916035)) % 3U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * 646017437 ^ -1550496650;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = 1128701465;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1508050823)) % 3U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * -2054960797 ^ 1637247507;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override int AsInt
    {
      get
      {
label_1:
        int num1 = -521581870;
        JSONData aVal;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1070814046)) % 5U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              asInt = 0;
              num1 = (int) num2 * 41993679 ^ 1317494979;
              continue;
            case 1:
              aVal = new JSONData(0);
              num1 = (int) num2 * -1830034760 ^ 1605632486;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -411554393 ^ 1636403784;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asInt;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = 23529047;
        JSONData aVal;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 186429683)) % 5U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1661501814 ^ -1417078622;
              continue;
            case 2:
              goto label_1;
            case 3:
              asFloat = 0.0f;
              num1 = (int) num2 * -886185094 ^ -1681502253;
              continue;
            case 4:
              aVal = new JSONData(0.0f);
              num1 = (int) num2 * -795570711 ^ -1104565944;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = 968978074;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 130039211)) % 4U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1545864122 ^ 1147696929;
              continue;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -397546471 ^ -896456866;
              continue;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override double AsDouble
    {
      get
      {
label_1:
        int num1 = 2134226340;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 147468863)) % 5U)
          {
            case 0:
              goto label_1;
            case 2:
              asDouble = 0.0;
              num1 = (int) num2 * 1530442864 ^ -733854611;
              continue;
            case 3:
              num1 = (int) num2 * 494901559 ^ -1794402066;
              continue;
            case 4:
              this.Set((JSONNode) new JSONData(0.0));
              num1 = (int) num2 * -1345108153 ^ -768881818;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asDouble;
      }
      set
      {
        this.Set((JSONNode) new JSONData(value));
label_1:
        int num1 = 313521576;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1297979407)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 688838717 ^ 1706295574;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = -2019691122;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1863559777)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) new JSONData(false));
              num1 = (int) num2 * -1126346367 ^ -1326230259;
              continue;
            case 3:
              asBool = false;
              num1 = (int) num2 * -1687088893 ^ 2063681508;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asBool;
      }
      set
      {
label_1:
        int num1 = -1678079880;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -231614017)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 350831720 ^ 2069144669;
              continue;
            case 2:
              goto label_3;
            case 3:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 1966813788 ^ 213486130;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
label_1:
        int num1 = -1075336600;
        JSONArray aVal;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1114440296)) % 5U)
          {
            case 0:
              asArray = aVal;
              num1 = (int) num2 * -1414203361 ^ 1597480701;
              continue;
            case 1:
              aVal = new JSONArray();
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -707284367 ^ -965666126;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 188293696 ^ 1187139356;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
label_1:
        int num1 = 1619174794;
        JSONClass aVal;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 360547196)) % 5U)
          {
            case 1:
              aVal = new JSONClass();
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1036846524 ^ 1808124571;
              continue;
            case 2:
              asObject = aVal;
              num1 = (int) num2 * -981291081 ^ -1951270705;
              continue;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * -967224980 ^ 1357850001;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asObject;
      }
    }
  }
}
