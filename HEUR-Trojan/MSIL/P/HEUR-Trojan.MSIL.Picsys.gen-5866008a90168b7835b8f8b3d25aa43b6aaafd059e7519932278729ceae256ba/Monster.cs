// Decompiled with JetBrains decompiler
// Type: OOP_TeamWork.Monster
// Assembly: OOP-TeamWork, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 78E60F07-1B9F-418F-8C6F-A1FA2CABDF45
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-5866008a90168b7835b8f8b3d25aa43b6aaafd059e7519932278729ceae256ba.exe

using System;

namespace OOP_TeamWork
{
  public abstract class Monster : Unit
  {
    private static Random random = new Random();
    private static int direction = Monster.random.Next(1, 5);
    private bool hasConflict = false;

    public Monster(int x, int y, int width, int height, int health, int atack, int defense)
      : base(x, y, 50, 50, health, atack, defense)
    {
    }

    public void MonsterRandomMovement()
    {
      if (this.hasConflict)
        return;
      Monster.direction = Monster.random.Next(1, 5);
      switch (Monster.direction)
      {
        case 1:
          this.MoveMonsterRight();
          if (this.hasWall)
          {
            this.hasConflict = true;
            this.hasConflict = false;
            break;
          }
          break;
        case 2:
          this.MoveMonsterDown();
          if (this.hasWall)
          {
            this.hasConflict = true;
            this.hasConflict = false;
            break;
          }
          break;
        case 3:
          this.MoveMonsterLeft();
          if (this.hasWall)
          {
            this.hasConflict = true;
            this.hasConflict = false;
            break;
          }
          break;
        case 4:
          this.MoveMonsterUp();
          if (this.hasWall)
          {
            this.hasConflict = true;
            this.hasConflict = false;
          }
          break;
      }
    }

    private void MoveMonsterRight() => this.Move(10, 0);

    private void MoveMonsterDown() => this.Move(0, 10);

    private void MoveMonsterUp() => this.Move(0, -10);

    private void MoveMonsterLeft() => this.Move(-10, 0);
  }
}
