// Decompiled with JetBrains decompiler
// Type: ProjNet.Services.ProducerStatusService
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.Services
{
  public class ProducerStatusService : Form
  {
    private IContainer _UtilsAdvisor;
    private Button broadcasterAdvisor;
    private Label m_ServerAdvisor;
    private Label _CodeAdvisor;
    private TextBox composerAdvisor;
    private TextBox m_GetterAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ProducerStatusService()
    {
      int num1 = 2;
      if (true)
        goto label_3;
label_1:
      this._UtilsAdvisor = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_6;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_5;
          case 1:
          case 3:
            goto label_1;
          case 4:
            goto label_6;
          case 5:
            goto label_7;
          default:
            num1 = 4;
            continue;
        }
      }
label_7:
      return;
label_5:
      PageAdvisorStructBuilder.PrepareCreator();
      num2 = 3;
      goto label_2;
label_6:
      this.ChangeStatus();
      num2 = 5;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void WriteStatus(object res, EventArgs counter)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        string text1;
        string text2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              text2 = this.m_GetterAdvisor.Text;
              if (text1.Length <= 0 || text2.Length <= 0)
              {
                int num3 = (int) MessageBox.Show("Invalid entry, try again.");
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_11;
              }
              else
                goto label_3;
            case 1:
              goto label_4;
            case 2:
            case 5:
              goto label_5;
            case 3:
              goto label_9;
            case 4:
              goto label_13;
            case 6:
              text1 = this.composerAdvisor.Text;
              num2 = 0;
              continue;
            case 7:
              goto label_14;
            default:
              num2 = 1;
              continue;
          }
        }
label_3:
        CallbackRegistry.EnableAdvisor(text1, text2);
        num1 = 5;
        continue;
label_4:
        this.composerAdvisor.Text = "";
        this.m_GetterAdvisor.Text = "";
        num1 = 3;
        continue;
label_5:
        int num4 = (int) MessageBox.Show("Author updated!");
        goto label_4;
      }
label_9:
      return;
label_13:
      return;
label_14:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool iskey)
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            if (!iskey)
            {
              num2 = 0;
              break;
            }
            num1 = 3;
            continue;
          case 1:
          case 2:
label_7:
            goto label_8;
          case 3:
            num2 = this._UtilsAdvisor != null ? 1 : 0;
            break;
          case 5:
            goto label_11;
          default:
            num1 = 1;
            continue;
        }
        if (num2 != 0)
        {
          this._UtilsAdvisor.Dispose();
          goto label_7;
        }
label_8:
        base.Dispose(iskey);
        num1 = 5;
      }
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeStatus()
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_4;
            case 1:
              this.broadcasterAdvisor.TabIndex = 0;
              this.broadcasterAdvisor.Text = "Update";
              this.broadcasterAdvisor.UseVisualStyleBackColor = true;
              if (ProducerStatusService.LogoutModel())
              {
                num2 = 11;
                continue;
              }
              goto case 6;
            case 2:
            case 9:
              goto label_1;
            case 3:
              goto label_3;
            case 4:
              this.m_ServerAdvisor.Name = "label2";
              this.m_ServerAdvisor.Size = new Size(60, 13);
              this.m_ServerAdvisor.TabIndex = 2;
              goto case 6;
            case 5:
              goto label_2;
            case 6:
              this.m_ServerAdvisor.Text = "First Name:";
              this._CodeAdvisor.AutoSize = true;
              this._CodeAdvisor.Location = new Point(12, 40);
              this._CodeAdvisor.Name = "label3";
              this._CodeAdvisor.Size = new Size(61, 13);
              this._CodeAdvisor.TabIndex = 3;
              if (true)
              {
                num2 = 13;
                continue;
              }
              goto case 14;
            case 7:
              goto label_8;
            case 8:
            case 12:
              goto label_5;
            case 10:
              this.m_ServerAdvisor = new Label();
              this._CodeAdvisor = new Label();
              this.composerAdvisor = new TextBox();
              this.m_GetterAdvisor = new TextBox();
              this.SuspendLayout();
              this.broadcasterAdvisor.Location = new Point(78, 66);
              this.broadcasterAdvisor.Name = "updateButton";
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto label_8;
            case 11:
              goto label_6;
            case 13:
              this._CodeAdvisor.Text = "Last Name:";
              this.composerAdvisor.Location = new Point(78, 9);
              this.composerAdvisor.Name = "firstNameTextBox";
              this.composerAdvisor.Size = new Size(100, 20);
              num2 = 3;
              continue;
            case 14:
              this.m_ServerAdvisor.AutoSize = true;
              this.m_ServerAdvisor.Location = new Point(12, 9);
              int num3 = 4;
              num2 = ProducerStatusService.CreateModel() ? num3 : num3;
              continue;
            case 15:
              goto label_13;
            default:
              goto label_17;
          }
        }
label_1:
        this.broadcasterAdvisor.Size = new Size(75, 23);
        num1 = 1;
        continue;
label_2:
        this.Controls.Add((Control) this.m_GetterAdvisor);
        this.Controls.Add((Control) this.composerAdvisor);
        this.Controls.Add((Control) this._CodeAdvisor);
        this.Controls.Add((Control) this.m_ServerAdvisor);
        this.Controls.Add((Control) this.broadcasterAdvisor);
        this.Name = "UpdateAuthor";
        num1 = 7;
        continue;
label_3:
        this.composerAdvisor.TabIndex = 5;
        this.m_GetterAdvisor.Location = new Point(78, 40);
        this.m_GetterAdvisor.Name = "lastNameTextBox";
        this.m_GetterAdvisor.Size = new Size(100, 20);
        this.m_GetterAdvisor.TabIndex = 6;
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(199, 102);
        num1 = 5;
        continue;
label_4:
        this.broadcasterAdvisor = new Button();
        num1 = 10;
        continue;
label_5:
        this.PerformLayout();
        num1 = 15;
        continue;
label_6:
        this.broadcasterAdvisor.Click += new EventHandler(this.WriteStatus);
        num1 = 14;
        continue;
label_8:
        this.Text = "UpdateAuthor";
        this.ResumeLayout(false);
        num1 = 8;
        continue;
label_17:
        num1 = 6;
      }
label_13:;
    }

    internal static bool LogoutModel() => true;

    internal static bool CreateModel() => false;
  }
}
