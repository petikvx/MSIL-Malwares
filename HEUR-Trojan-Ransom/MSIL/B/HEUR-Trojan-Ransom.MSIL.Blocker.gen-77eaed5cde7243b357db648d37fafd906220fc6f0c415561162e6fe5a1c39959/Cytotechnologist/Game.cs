// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: IMuiResourceTypeIdIntEnt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 108B0C51-A542-4D1F-972B-8772D9255CD7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-77eaed5cde7243b357db648d37fafd906220fc6f0c415561162e6fe5a1c39959.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -1602709576;
      int index;
      int count;
      int aIndex;
      JSONNode jsonNode;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -116673934)) % 19U)
        {
          case 0:
            flag = aIndex < count;
            num1 = -1626043149;
            continue;
          case 1:
            goto label_3;
          case 2:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * 66571321 ^ -230120329;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 843823064 ^ -467559389;
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * -1384016193 ^ -363660466;
            continue;
          case 6:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * 977577514 ^ 1358713027;
            continue;
          case 7:
            this._buffer = buffer;
            num1 = (int) num2 * 32655203 ^ 2010354262;
            continue;
          case 8:
            int num3;
            num1 = num3 = index < count ? -1567995075 : (num3 = -396039927);
            continue;
          case 9:
            this.Players = new Player[count];
            num1 = (int) num2 * -1065025117 ^ -1900330925;
            continue;
          case 10:
            num1 = (int) num2 * 1769976568 ^ -763577290;
            continue;
          case 11:
            this._playerStates[index] = new PlayerState();
            ++index;
            num1 = -1763368113;
            continue;
          case 12:
            num1 = (int) num2 * 514000673 ^ 1780728850;
            continue;
          case 13:
            aIndex = 0;
            num1 = (int) num2 * 699163462 ^ 816718278;
            continue;
          case 14:
            this._random = Game.\u202A‏⁬⁫⁫‎​​‪⁬‌‫‫‭​‭‎‭⁯⁮‌⁭⁫‏​⁬⁪‏‬‭‍‍​⁪‏‌⁮‮‬⁫‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -2147299855 ^ 1848600255;
            continue;
          case 15:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -720097285;
            continue;
          case 16:
            this._dice = new Dice();
            num1 = (int) num2 * 1151064129 ^ -1992778915;
            continue;
          case 17:
            int num4 = !flag ? 1224369743 : (num4 = 678887071);
            num1 = num4 ^ (int) num2 * -1842633801;
            continue;
          case 18:
            ++aIndex;
            num1 = (int) num2 * 534220832 ^ -1426152878;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -48460448;
        int index;
        bool finished2;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1660034125)) % 12U)
          {
            case 0:
              int num3;
              num1 = num3 = playerStates[index].State != State.Playing ? -909880373 : (num3 = -2057622571);
              continue;
            case 1:
              finished2 = true;
              num1 = (int) num2 * 647204181 ^ 467759049;
              continue;
            case 2:
              finished2 = true;
              num1 = (int) num2 * 563852562 ^ -645446196;
              continue;
            case 3:
              index = 0;
              num1 = (int) num2 * 861310005 ^ -1428328083;
              continue;
            case 4:
              playerStates = this._playerStates;
              num1 = (int) num2 * 1234882352 ^ 1282422164;
              continue;
            case 5:
              int num4;
              num1 = num4 = index >= playerStates.Length ? -1628789266 : (num4 = -1063610693);
              continue;
            case 6:
              goto label_1;
            case 8:
              ++index;
              num1 = -609307778;
              continue;
            case 9:
              num1 = -870578381;
              continue;
            case 10:
              finished2 = false;
              num1 = (int) num2 * -462509431 ^ 1649082558;
              continue;
            case 11:
              int num5 = !finished1 ? 1830422438 : (num5 = 726821273);
              num1 = num5 ^ (int) num2 * 229923352;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -1979828761;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -567011044)) % 11U)
        {
          case 0:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1064583496 ^ -1136025028;
            continue;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * -315494372 ^ -1894599773;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.Winners.Clear();
            num1 = (int) num2 * 383308177 ^ -1494999664;
            continue;
          case 4:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1004714284 ^ 765979075;
            continue;
          case 5:
            this._currentTurn = 0;
            num1 = (int) num2 * -1056095822 ^ -287034596;
            continue;
          case 6:
            this._finished = false;
            num1 = (int) num2 * 396846804 ^ -1876584175;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * -753186116 ^ 893040695;
            continue;
          case 8:
            num1 = (int) num2 * -477186421 ^ 2146279624;
            continue;
          case 9:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 1162748473 ^ 910598017;
            continue;
          case 10:
            goto label_3;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = -38520923;
      PlayerState playerState;
      Player player;
      int planningCardsCount;
      bool flag1;
      int num2;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1997844876)) % 28U)
        {
          case 0:
            num2 = 0;
            num1 = -2021376103;
            continue;
          case 1:
            num1 = (int) num3 * -1763016346 ^ 1136644205;
            continue;
          case 2:
            int num4 = flag2 ? -1098379823 : (num4 = -1897989355);
            num1 = num4 ^ (int) num3 * -1661150913;
            continue;
          case 3:
            num1 = (int) num3 * -529281724 ^ -1980326831;
            continue;
          case 4:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -607057871 ^ 1004419546;
            continue;
          case 5:
            player = this.Players[index];
            num1 = (int) num3 * -980407342 ^ 889420039;
            continue;
          case 6:
            flag1 = num2 > 0;
            num1 = -1137818216;
            continue;
          case 7:
            num2 = 0;
            num1 = (int) num3 * -821012910 ^ 982738262;
            continue;
          case 8:
            num1 = -685588439;
            continue;
          case 9:
            num1 = -116907442;
            continue;
          case 10:
            num1 = (int) num3 * 248427057 ^ -837936857;
            continue;
          case 11:
            playerState.Sprint = -1;
            num1 = (int) num3 * -186283033 ^ -694656809;
            continue;
          case 12:
            int num5 = !flag1 ? -1731608888 : (num5 = -1587143112);
            num1 = num5 ^ (int) num3 * -138698419;
            continue;
          case 13:
            num1 = (int) num3 * -652553932 ^ -1718471750;
            continue;
          case 14:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -28552493;
            continue;
          case 15:
            playerState.Sprint = 1;
            num1 = (int) num3 * 783452457 ^ 426203529;
            continue;
          case 16:
            playerState.Sprint = 0;
            num1 = (int) num3 * 1523931396 ^ 1406010426;
            continue;
          case 17:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num6 = player.UseOneMorePlanningSprint ? 739977491 : (num6 = 1793328160);
            num1 = num6 ^ (int) num3 * -1645118582;
            continue;
          case 18:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 687020930 ^ -1427734979;
            continue;
          case 19:
            goto label_1;
          case 20:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -401860684 ^ 905409855;
            continue;
          case 21:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 145845728 ^ -426840200;
            continue;
          case 22:
            flag2 = index < this.Players.Length;
            num1 = -926339234;
            continue;
          case 23:
            num1 = -1046860411;
            continue;
          case 24:
            int num7 = planningCardsCount != 0 ? -1610415052 : (num7 = -2086463293);
            num1 = num7 ^ (int) num3 * -1069236314;
            continue;
          case 25:
            ++index;
            num1 = (int) num3 * -731671225 ^ 433069377;
            continue;
          case 26:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * -772071849 ^ 1443257918;
            continue;
          case 27:
            goto label_3;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 175840412;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 968201918)) % 16U)
        {
          case 0:
            this.PlayerTurn(this._currentPlayer);
            num1 = 896744996;
            continue;
          case 1:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1799884979 ^ -1787333328;
            continue;
          case 2:
            ++this._currentPlayer;
            num1 = (int) num2 * -1749087246 ^ -661160097;
            continue;
          case 3:
            num1 = (int) num2 * 2080191565 ^ 1650202226;
            continue;
          case 4:
            int num3 = flag1 ? 696528487 : (num3 = 1530075149);
            num1 = num3 ^ (int) num2 * 1954981910;
            continue;
          case 5:
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -2100205224 ^ -603035464;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -87854152 ^ -1478193090;
            continue;
          case 8:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1144587234 ^ -1563539657;
            continue;
          case 9:
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * 572841004 ^ -2003260554;
            continue;
          case 10:
            goto label_3;
          case 11:
            this.Print((object) Game.\u202A⁮‮‪⁭‍‪‎⁪⁯‏⁪‬‫‍‫‪⁮⁪⁪‮​‮⁭‭‌‍‪‎⁫⁭‫‬‎⁯‬‪⁬‍‭‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 1435172785;
            continue;
          case 12:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206F​‍‏‪‭⁫⁮‭‮‫‏‭‌⁮⁪⁮‪⁭‪⁪⁫‭‌‎⁬‬‪‬⁭⁪‭⁯⁯‌⁪​⁭‫⁬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1585155446 ^ 339542843;
            continue;
          case 13:
            num1 = (int) num2 * 1975693343 ^ 1379476269;
            continue;
          case 14:
            int num4 = flag2 ? 1285336815 : (num4 = 1319059384);
            num1 = num4 ^ (int) num2 * -1001734803;
            continue;
          case 15:
            num1 = (int) num2 * 1944555738 ^ 404285892;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -758562459;
      while (true)
      {
        uint num2;
        bool flag1;
        PlayerState playerState1;
        int num3;
        bool flag2;
        int index;
        bool flag3;
        int num4;
        bool flag4;
        bool flag5;
        int num5;
        Player player;
        bool onlyOneWinner;
        bool flag6;
        Card card;
        bool flag7;
        PlayerState playerState2;
        bool flag8;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1731066430)) % 82U)
        {
          case 0:
            num1 = -1758076639;
            continue;
          case 1:
            num1 = (int) num2 * 2060252168 ^ -1470829895;
            continue;
          case 2:
            num1 = (int) num2 * 1108210955 ^ 695247927;
            continue;
          case 3:
            num1 = -1639158327;
            continue;
          case 4:
            num1 = -2120034081;
            continue;
          case 5:
            ++index;
            num1 = -413114061;
            continue;
          case 6:
            num1 = (int) num2 * -1275122940 ^ 1041139881;
            continue;
          case 7:
            int num7;
            num1 = num7 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? -421536620 : (num7 = -1487630960);
            continue;
          case 8:
            num1 = (int) num2 * -604029242 ^ -1727419372;
            continue;
          case 9:
            flag3 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 120124373 ^ -754324549;
            continue;
          case 10:
            this.Losers.Add(num3);
            num1 = (int) num2 * -260553321 ^ 1378249957;
            continue;
          case 11:
            num1 = (int) num2 * 1015576116 ^ 1323568254;
            continue;
          case 12:
            num3 = 0;
            num1 = (int) num2 * 1481678467 ^ 475158679;
            continue;
          case 13:
            num1 = (int) num2 * 211409431 ^ 1610433973;
            continue;
          case 14:
            num1 = (int) num2 * 1139954418 ^ 1971383367;
            continue;
          case 15:
            int num8 = flag7 ? -759377684 : (num8 = -1159824412);
            num1 = num8 ^ (int) num2 * 165164091;
            continue;
          case 16:
            num1 = (int) num2 * -205940369 ^ -547330479;
            continue;
          case 17:
            int num9;
            num1 = num9 = !flag3 ? -1321736758 : (num9 = -1539002236);
            continue;
          case 18:
            int num10 = playerState1.State != 0 ? 1050998170 : (num10 = 1216361470);
            num1 = num10 ^ (int) num2 * -556834199;
            continue;
          case 19:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206F​‍‏‪‭⁫⁮‭‮‫‏‭‌⁮⁪⁮‪⁭‪⁪⁫‭‌‎⁬‬‪‬⁭⁪‭⁯⁯‌⁪​⁭‫⁬‮("\t", playerState3 != null ? Game.\u200C⁭‪⁬⁫⁪⁪‮⁮‎‍‬⁭⁮‬​⁫⁫‫⁫‏‍⁮‮​⁫‮‌‍‍⁬‪‎‭‮⁯‭‎⁯⁫‮((object) playerState3) : (string) null));
            num1 = -170046270;
            continue;
          case 20:
            num1 = (int) num2 * -1592886866 ^ 1588125444;
            continue;
          case 21:
            num1 = (int) num2 * 1534249243 ^ 1795148295;
            continue;
          case 22:
            int num11;
            num1 = num11 = playerState1.Sprint >= 0 ? -1982257739 : (num11 = -1215923598);
            continue;
          case 23:
            this._finished = true;
            num1 = (int) num2 * -1219329121 ^ -679920419;
            continue;
          case 24:
            num1 = (int) num2 * 2127845523 ^ 1998307617;
            continue;
          case 25:
            int num12 = !flag5 ? 1053526278 : (num12 = 1246108421);
            num1 = num12 ^ (int) num2 * 746137159;
            continue;
          case 26:
            num1 = -473117743;
            continue;
          case 27:
            num1 = -632494240;
            continue;
          case 28:
            int num13 = flag1 ? -1904593568 : (num13 = -1991824555);
            num1 = num13 ^ (int) num2 * -753587721;
            continue;
          case 29:
            num1 = (int) num2 * -570936773 ^ 1290938029;
            continue;
          case 30:
            int num14 = num3 == playerIndex ? -1479764550 : (num14 = -1563001480);
            num1 = num14 ^ (int) num2 * 1137464590;
            continue;
          case 31:
            num1 = (int) num2 * 1132587280 ^ -1725305304;
            continue;
          case 32:
            int num15 = !this.Losers.Contains(index) ? -935616097 : (num15 = -1461875690);
            num1 = num15 ^ (int) num2 * -1040967905;
            continue;
          case 33:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206F​‍‏‪‭⁫⁮‭‮‫‏‭‌⁮⁪⁮‪⁭‪⁪⁫‭‌‎⁬‬‪‬⁭⁪‭⁯⁯‌⁪​⁭‫⁬‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -519183585 ^ -904409105;
            continue;
          case 34:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 172740219 ^ 660382180;
            continue;
          case 35:
            num1 = (int) num2 * -1850028663 ^ 565696780;
            continue;
          case 36:
            num1 = -1029941189;
            continue;
          case 37:
            num1 = (int) num2 * 134251670 ^ -1528996378;
            continue;
          case 38:
            goto label_3;
          case 39:
            num1 = (int) num2 * -823571252 ^ 1234442074;
            continue;
          case 40:
            num1 = -893069738;
            continue;
          case 41:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 42:
            int num16 = playerState1.Resources < 0 ? -71902403 : (num16 = -1445939099);
            num1 = num16 ^ (int) num2 * 948984239;
            continue;
          case 43:
            int num17 = !flag6 ? 1236972775 : (num17 = 1647897931);
            num1 = num17 ^ (int) num2 * -1485439184;
            continue;
          case 44:
            goto label_1;
          case 45:
            num1 = (int) num2 * -1361612382 ^ -234256018;
            continue;
          case 46:
            ++playerState1.Sprint;
            num1 = (int) num2 * 27709035 ^ -612893304;
            continue;
          case 47:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -143124069 ^ 711133140;
            continue;
          case 48:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -525874930 ^ 950529688;
            continue;
          case 49:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1343173316 ^ -413103093;
            continue;
          case 50:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag7 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u202E‬‍​‪⁬‏‎⁯‌⁬‬⁮‫⁮​⁪⁬‎‭‫‬‪⁫⁪‭‌⁭‬‍‭​‫‫⁭⁮‍‬‫‏‮(num4), flag3 ? (object) "advance" : (object) "stay");
            num1 = -193167329;
            continue;
          case 51:
            num1 = -584005337;
            continue;
          case 52:
            playerState2.State = State.Lose;
            num1 = -61445362;
            continue;
          case 53:
            int num18 = !flag4 ? 1176555495 : (num18 = 2043388066);
            num1 = num18 ^ (int) num2 * 1323582359;
            continue;
          case 54:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1370706919 ^ -2056766388;
            continue;
          case 55:
            flag3 = true;
            num4 = card.Impact;
            num1 = (int) num2 * -1561467237 ^ 18462464;
            continue;
          case 56:
            int num19;
            num1 = num19 = playerState1.Sprint > this.Rules.SprintCount ? -1972987880 : (num19 = -1404568967);
            continue;
          case 57:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 1752677233 ^ -1800779410;
            continue;
          case 58:
            num1 = (int) num2 * -1731370435 ^ 1009194679;
            continue;
          case 59:
            playerState1.State = State.Lose;
            flag6 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1191760777 ^ -440431360;
            continue;
          case 60:
            flag2 = !this.Losers.Contains(num3);
            num1 = -1867423932;
            continue;
          case 61:
            index = 0;
            num1 = (int) num2 * 855019380 ^ 1727637202;
            continue;
          case 62:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1995332586 ^ 646027771;
            continue;
          case 63:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u206C‌‪​‬⁯‌‪‌⁪​‪⁭⁮‏​‬​⁬‎‏‮‍‬⁫⁬‬‪‪‬‪‏‬⁯‫⁪⁮‮‬‏‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            flag8 = playerState2.Resources >= 0;
            num1 = (int) num2 * -1191162839 ^ 408329409;
            continue;
          case 64:
            num1 = (int) num2 * 458661905 ^ 2020820913;
            continue;
          case 65:
            this.Losers.Add(index);
            num1 = (int) num2 * 1641200844 ^ 312586045;
            continue;
          case 66:
            flag5 = num3 < this._playerStates.Length;
            num1 = -2137804815;
            continue;
          case 67:
            num1 = (int) num2 * -1180812044 ^ 1490884110;
            continue;
          case 68:
            num1 = (int) num2 * -2051308875 ^ 1839018062;
            continue;
          case 69:
            flag3 = false;
            num1 = -2122456678;
            continue;
          case 70:
            num1 = (int) num2 * -1166228713 ^ -9525349;
            continue;
          case 71:
            num4 = Game.\u206C‌‪​‬⁯‌‪‌⁪​‪⁭⁮‏​‬​⁬‎‏‮‍‬⁫⁬‬‪‪‬‪‏‬⁯‫⁪⁮‮‬‏‮(0, num5);
            num1 = (int) num2 * 1974313281 ^ 62187614;
            continue;
          case 72:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -2057397336 ^ 1530060135;
            continue;
          case 73:
            int num20 = !onlyOneWinner ? 1096936642 : (num20 = 60225569);
            num1 = num20 ^ (int) num2 * 1112813140;
            continue;
          case 74:
            int num21 = !flag2 ? 223387614 : (num21 = 1634224220);
            num1 = num21 ^ (int) num2 * -497778783;
            continue;
          case 75:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag3 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -413991303 ^ 251836888;
            continue;
          case 76:
            num1 = -1404568967;
            continue;
          case 77:
            ++num3;
            num1 = -1060806086;
            continue;
          case 78:
            card = this.DrawCard();
            flag4 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = -974273791;
              continue;
            }
            num6 = 0;
            break;
          case 79:
            num1 = (int) num2 * 540449922 ^ -1430920876;
            continue;
          case 80:
            int num22 = flag8 ? -1432603750 : (num22 = -801069478);
            num1 = num22 ^ (int) num2 * -1437409974;
            continue;
          case 81:
            flag1 = index < this._playerStates.Length;
            num1 = -1618077262;
            continue;
          default:
            goto label_87;
        }
        flag7 = num6 != 0;
        num1 = -690725453;
      }
label_3:
      return;
label_87:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1014201749;
      Card card1;
      Card card2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1348854547)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 799796956 ^ -1021097862;
            continue;
          case 2:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -304211904 ^ -886313509;
            continue;
          case 3:
            card2 = card1;
            num1 = (int) num2 * 993378546 ^ -66188315;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -442844898 ^ 1018429528;
            continue;
          case 6:
            card1 = this._deck[0];
            num1 = 403389940;
            continue;
          case 7:
            int num3 = !flag ? -1123756572 : (num3 = -2106951831);
            num1 = num3 ^ (int) num2 * 1919995546;
            continue;
          case 8:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -1959859204 ^ -215092033;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
      int index = 0;
label_5:
      bool flag = index < this._playerStates.Length;
      int num1 = 1934967954;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 222828204)) % 7U)
        {
          case 0:
            int num3 = !flag ? 1969895811 : (num3 = 449667233);
            num1 = num3 ^ (int) num2 * 562820706;
            continue;
          case 2:
            goto label_5;
          case 3:
            ++index;
            num1 = (int) num2 * -621611120 ^ -2088259268;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 338597450 ^ 810588253;
            continue;
          case 5:
            num1 = 52850461;
            continue;
          case 6:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200C⁭‪⁬⁫⁪⁪‮⁮‎‍‬⁭⁮‬​⁫⁫‫⁫‏‍⁮‮​⁫‮‌‍‍⁬‪‎‭‮⁯‭‎⁯⁫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202C‫⁫‎⁮⁭‭‬‪‫‍‭⁪‪‫​‎⁬‏‭⁬⁮⁮⁫‎‎‌​‫‌‎‭⁯‎‮⁫‍‮‏‎‮(strArray);
            num1 = 936664452;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1565105666;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 294726737)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1364327154 ^ -1665524448;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = this.ToString(false);
            num1 = (int) num2 * 785887685 ^ -755737042;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u202D⁬⁯⁭⁫‬⁫⁫‮‫⁭⁬‎‍‫‮​⁯‭⁪‫‍‬⁫⁯‫​​‮‌⁬‪​‮⁯‍⁪⁫​⁮‮(this._buffer, Game.\u206E⁮⁯⁫⁯⁬⁮‫‎‏‫⁫⁫‮⁭⁯‫‌‌‍‮‮‏⁯‌⁪⁫‏‪⁪⁭‍​​⁪​‌​‎‪‮(Game.\u200C⁭‪⁬⁫⁪⁪‮⁮‎‍‬⁭⁮‬​⁫⁫‫⁫‏‍⁮‮​⁫‮‌‍‍⁬‪‎‭‮⁯‭‎⁯⁫‮(text), more));

    static Random \u202A‏⁬⁫⁫‎​​‪⁬‌‫‫‭​‭‎‭⁯⁮‌⁭⁫‏​⁬⁪‏‬‭‍‍​⁪‏‌⁮‮‬⁫‮([In] int obj0) => new Random(obj0);

    static string \u202A⁮‮‪⁭‍‪‎⁪⁯‏⁪‬‫‍‫‪⁮⁪⁪‮​‮⁭‭‌‍‪‎⁫⁭‫‬‎⁯‬‪⁬‍‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206F​‍‏‪‭⁫⁮‭‮‫‏‭‌⁮⁪⁮‪⁭‪⁪⁫‭‌‎⁬‬‪‬⁭⁪‭⁯⁯‌⁪​⁭‫⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206C‌‪​‬⁯‌‪‌⁪​‪⁭⁮‏​‬​⁬‎‏‮‍‬⁫⁬‬‪‪‬‪‏‬⁯‫⁪⁮‮‬‏‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202E‬‍​‪⁬‏‎⁯‌⁬‬⁮‫⁮​⁪⁬‎‭‫‬‪⁫⁪‭‌⁭‬‍‭​‫‫⁭⁮‍‬‫‏‮([In] int obj0) => Math.Abs(obj0);

    static string \u200C⁭‪⁬⁫⁪⁪‮⁮‎‍‬⁭⁮‬​⁫⁫‫⁫‏‍⁮‮​⁫‮‌‍‍⁬‪‎‭‮⁯‭‎⁯⁫‮([In] object obj0) => obj0.ToString();

    static string \u202C‫⁫‎⁮⁭‭‬‪‫‍‭⁪‪‫​‎⁬‏‭⁬⁮⁮⁫‎‎‌​‫‌‎‭⁯‎‮⁫‍‮‏‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206E⁮⁯⁫⁯⁬⁮‫‎‏‫⁫⁫‮⁭⁯‫‌‌‍‮‮‏⁯‌⁪⁫‏‪⁪⁭‍​​⁪​‌​‎‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202D⁬⁯⁭⁫‬⁫⁫‮‫⁭⁬‎‍‫‮​⁯‭⁪‫‍‬⁫⁯‫​​‮‌⁬‪​‮⁯‍⁪⁫​⁮‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
