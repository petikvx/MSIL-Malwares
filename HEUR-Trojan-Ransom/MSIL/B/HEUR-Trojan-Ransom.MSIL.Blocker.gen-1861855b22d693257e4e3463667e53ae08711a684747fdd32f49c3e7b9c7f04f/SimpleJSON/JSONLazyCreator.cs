// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: VersioningHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A8C08E3E-24A1-4DAA-9E0F-F1F4BE4809FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1861855b22d693257e4e3463667e53ae08711a684747fdd32f49c3e7b9c7f04f.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = 1333360930;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2106232543)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * -1126977204 ^ 371872149;
            continue;
          case 2:
            this.m_Key = (string) null;
            num1 = (int) num2 * -560398747 ^ 1508143657;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = 1243209540;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 514451965)) % 4U)
        {
          case 0:
            this.m_Key = aKey;
            num1 = (int) num2 * 17453716 ^ 1430093135;
            continue;
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * 1778802774 ^ 333517203;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = -420069622;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1389484738)) % 10U)
        {
          case 0:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * 670195788 ^ 1057005777;
            continue;
          case 1:
            num1 = (int) num2 * 934532821 ^ -1232149946;
            continue;
          case 2:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = -2081293649;
            continue;
          case 3:
            goto label_1;
          case 4:
            flag = this.m_Key == null;
            num1 = (int) num2 * -2028152277 ^ -142479510;
            continue;
          case 5:
            num1 = (int) num2 * -1502595520 ^ -179032419;
            continue;
          case 6:
            int num3 = flag ? 455331476 : (num3 = 622659250);
            num1 = num3 ^ (int) num2 * -1925958778;
            continue;
          case 7:
            num1 = (int) num2 * 873600851 ^ -176145057;
            continue;
          case 8:
            num1 = (int) num2 * 1537597967 ^ -2128612185;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this.m_Node = (JSONNode) null;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 470450990;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1027879756)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * -51316894 ^ -886349276;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 785060367;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 931724502)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONArray();
              num1 = (int) num2 * 405114193 ^ 910734156;
              continue;
            case 2:
              goto label_3;
            case 3:
              aVal.Add(value);
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1973927280 ^ 827428088;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1433543852;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1401968553)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * 422365293 ^ 51157439;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1711020840;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1447508945)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1293171570 ^ -1054290360;
              continue;
            case 2:
              num1 = (int) num2 * -597776822 ^ 524373089;
              continue;
            case 3:
              aVal = new JSONClass();
              aVal.Add(aKey, value);
              num1 = (int) num2 * 145242609 ^ -967276943;
              continue;
            case 4:
              goto label_3;
            case 5:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 530472621 ^ 551998524;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
      aVal.Add(aItem);
      this.Set((JSONNode) aVal);
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = -649104383;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -540753372)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            aVal = new JSONClass();
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -46973517 ^ 525141140;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 152308778 ^ -763099176;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      bool flag1 = b == null;
label_1:
      int num1 = -1055454905;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2035141631)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 47619943 ^ -1425075151;
            continue;
          case 1:
            int num3 = flag1 ? -623552520 : (num3 = -1230934486);
            num1 = num3 ^ (int) num2 * -56794533;
            continue;
          case 2:
            flag2 = true;
            num1 = (int) num2 * -43041294 ^ -488900331;
            continue;
          case 3:
            num1 = (int) num2 * 308865692 ^ 275767453;
            continue;
          case 4:
            goto label_1;
          case 5:
            flag2 = (object) a == b;
            num1 = -1790921587;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
      bool flag = !(a == b);
label_1:
      int num1 = 1727383042;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 148388809)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -280883523 ^ -806371702;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
label_1:
      int num1 = 1671788768;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 733920796)) % 7U)
        {
          case 0:
            flag1 = true;
            num1 = (int) num2 * -1119015636 ^ -564091239;
            continue;
          case 1:
            flag2 = obj == null;
            num1 = (int) num2 * 92034858 ^ -2125181199;
            continue;
          case 2:
            int num3 = flag2 ? -858107122 : (num3 = -933150937);
            num1 = num3 ^ (int) num2 * -712914429;
            continue;
          case 4:
            flag1 = (object) this == obj;
            num1 = 155408687;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * -1756102577 ^ -678725832;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return flag1;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = 2083538675;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 300407608)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -774760346 ^ -722179647;
            continue;
          case 3:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * 1198106101 ^ 306797245;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1610881638;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1480898338)) % 3U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * -1046376936 ^ 458105090;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix) => "";

    public override int AsInt
    {
      get
      {
label_1:
        int num1 = 1023237660;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 458103983)) % 6U)
          {
            case 0:
              num1 = (int) num2 * -1485980626 ^ 1478523561;
              continue;
            case 1:
              this.Set((JSONNode) new JSONData(0));
              num1 = (int) num2 * 415554204 ^ -1955219020;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 250719181 ^ -446127111;
              continue;
            case 5:
              asInt = 0;
              num1 = (int) num2 * 1010660454 ^ -429209299;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asInt;
      }
      set
      {
label_1:
        int num1 = 874513905;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 823251423)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -654421937 ^ -1116559154;
              continue;
            case 2:
              aVal = new JSONData(value);
              num1 = (int) num2 * 89719094 ^ -891893846;
              continue;
            case 3:
              goto label_3;
            case 4:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 23825499 ^ -334794177;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = 1640723330;
        JSONData aVal;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 136177064)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1630190524 ^ -325122333;
              continue;
            case 3:
              asFloat = 0.0f;
              num1 = (int) num2 * -1056899229 ^ -1996535546;
              continue;
            case 4:
              aVal = new JSONData(0.0f);
              num1 = (int) num2 * 39493951 ^ 1246133245;
              continue;
            case 5:
              num1 = (int) num2 * 1353258000 ^ 2101517044;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asFloat;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override double AsDouble
    {
      get
      {
        this.Set((JSONNode) new JSONData(0.0));
label_1:
        int num1 = 341051132;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 656726184)) % 3U)
          {
            case 1:
              asDouble = 0.0;
              num1 = (int) num2 * -1619347648 ^ -846639467;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = -567827877;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -972330983)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -1967294267 ^ 1344509380;
              continue;
            case 3:
              num1 = (int) num2 * 110729384 ^ 1394223604;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = 1759833760;
        JSONData aVal;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1493056701)) % 7U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 397945473 ^ 1595877202;
              continue;
            case 1:
              asBool = false;
              num1 = (int) num2 * -1988544192 ^ 413272069;
              continue;
            case 3:
              aVal = new JSONData(false);
              num1 = (int) num2 * 1232410541 ^ 1322288906;
              continue;
            case 4:
              num1 = (int) num2 * 1154605189 ^ -1379790372;
              continue;
            case 5:
              num1 = (int) num2 * -1429396777 ^ 573230732;
              continue;
            case 6:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_8:
        return asBool;
      }
      set
      {
label_1:
        int num1 = 486880993;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1388887507)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -1095628615 ^ -33770437;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = 1640083973;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1667756825)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -1399932056 ^ 1672865915;
              continue;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 694234596 ^ -720185822;
              continue;
            case 3:
              goto label_1;
            case 4:
              asArray = aVal;
              num1 = (int) num2 * -1918774943 ^ 1615679457;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
        this.Set((JSONNode) aVal);
label_1:
        int num1 = 86905962;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 741524965)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 442736262 ^ 1382290284;
              continue;
            case 2:
              goto label_1;
            case 3:
              asObject = aVal;
              num1 = (int) num2 * -1163285330 ^ -673997485;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asObject;
      }
    }
  }
}
