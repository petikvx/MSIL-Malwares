// Decompiled with JetBrains decompiler
// Type: Ⴃ.Ⴅ
// Assembly: Final, Version=3.19.0.1745, Culture=neutral, PublicKeyToken=null
// MVID: 912F5519-7248-44E3-B098-F33E871EBECC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aitk-30127cc094a284d2b7badec68076f9f82c11bf424936b29e96d1d35a5ad4f898.exe

using Final;
using Final.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace Ⴃ
{
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [HideModuleName]
  [StandardModule]
  internal sealed class Ⴅ
  {
    private static ResourceManager Ⴗ;
    private static CultureInfo Ⴐ;

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static ResourceManager Ⴅ
    {
      get
      {
label_3:
        int num = !Form1.Ⴍ((object) Ⴃ.Ⴅ.Ⴗ, (object) null, 873, 890) ? 1 : 6;
        ResourceManager resourceManager;
        while (true)
        {
          switch (num)
          {
            case 1:
              goto label_6;
            case 2:
            case 7:
              goto label_3;
            case 3:
            case 5:
              Ⴃ.Ⴅ.Ⴗ = resourceManager;
              num = 1;
              continue;
            case 4:
            case 6:
              resourceManager = new ResourceManager("Ⴃ.Ⴅ", MyApplication.Ⴀ(Form1.Ⴀ(__typeref (Ⴃ.Ⴅ), 1008, 940), 604, 558));
              num = 3;
              continue;
            default:
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴅ.Ⴗ);
              num = 2;
              continue;
          }
        }
label_6:
        return Ⴃ.Ⴅ.Ⴗ;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static CultureInfo Ⴗ
    {
      get => Ⴃ.Ⴅ.Ⴐ;
      set => Ⴃ.Ⴅ.Ⴐ = value;
    }

    [SpecialName]
    internal static byte[] Ⴃ()
    {
label_3:
      object obj = Ⴃ.Ⴈ.Ⴓ.Ⴈ(MyComputer.Ⴃ(Ⴃ.Ⴅ.Ⴅ, MyComputer.Ⴈ(307275464, 6), Ⴃ.Ⴅ.Ⴐ, 996, 946), 402, 461);
      int num = 5;
      while (true)
      {
        switch (num)
        {
          case 2:
          case 4:
            goto label_3;
          case 5:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴅ.Ⴃ);
            num = 4;
            continue;
        }
      }
label_4:
      return (byte[]) obj;
    }

    static Ⴅ() => MyComputer.ႨႨ();

    internal static void Ⴓ([In] bool obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
          case 3:
            num1 = 5;
            continue;
          case 1:
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 88:
                num2 = 1;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Application.SetCompatibleTextRenderingDefault(obj0);
    }

    internal static void Ⴈ([In] object obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
          case 5:
            goto label_7;
          case 1:
          case 3:
            num1 = 4;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 44:
                num2 = 5;
                break;
              case 45:
                goto label_8;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      ObjectFlowControl.CheckForSyncLockOnValueType(obj0);
      return;
label_8:
      Monitor.Enter(obj0);
    }

    internal static string Ⴄ([In] string obj0, [In] string[] obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 41:
          num1 = 2;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 3:
            goto label_8;
          case 1:
            num2 = 5;
            continue;
          case 4:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴅ.Ⴄ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return Utils.GetResourceString(obj0, obj1);
    }

    internal static void Ⴀ([In] Hashtable obj0, [In] object obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
          case 2:
          case 5:
            goto label_7;
          case 3:
            num1 = 4;
            continue;
          default:
            int num2;
            switch (obj4 ^ obj3)
            {
              case 120:
                num2 = 1;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Add(obj1, obj2);
    }

    internal static System.Type[] Ⴜ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 27:
          num1 = 3;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_3;
          case 1:
          case 5:
          case 6:
            num2 = 2;
            continue;
          case 3:
            goto label_8;
          case 4:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴅ.Ⴜ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0.GetTypes();
    }

    internal static void ႳႳ([In] Control obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
            num1 = 0;
            continue;
          case 2:
            goto label_8;
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 58:
                num2 = 5;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.SuspendLayout();
    }

    internal static void ႳႨ([In] Control obj0, [In] Size obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            num1 = 4;
            continue;
          case 1:
            goto label_8;
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 93:
                num2 = 5;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Size = obj1;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct ႳႥ
    {
      internal IContainer Ⴀ;
      internal ProgressBar Ⴍ;
      internal Label Ⴅ;
    }
  }
}
