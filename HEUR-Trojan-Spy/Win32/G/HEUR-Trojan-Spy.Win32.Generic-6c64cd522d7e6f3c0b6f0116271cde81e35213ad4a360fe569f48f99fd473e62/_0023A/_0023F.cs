// Decompiled with JetBrains decompiler
// Type: #A.#F
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023A;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;

namespace \u0023A
{
  [StandardModule]
  internal sealed class \u0023F
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    static \u0023F()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        Assembly executingAssembly;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              if (!flag)
                goto label_12;
              else
                goto case 3;
            case 1:
              flag = false;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_9;
            case 3:
            case 4:
              if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
              {
                if (!\u0023F.C31fDebDEJkuxmwZ06())
                {
                  num2 = 6;
                  continue;
                }
                goto case 1;
              }
              else
                goto label_12;
            case 5:
              goto label_9;
            case 6:
              goto label_11;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_9:
        executingAssembly = Assembly.GetExecutingAssembly();
        if (\u0023\u0023.\u0023xj(executingAssembly.Location, true, out flag))
          num1 = 0;
        else
          goto label_12;
      }
label_11:
      return;
label_12:
      throw new SecurityException("Assembly has been tampered");
    }

    internal static bool OIkWc47LPK6lZRxd0K() => true;

    internal static bool C31fDebDEJkuxmwZ06() => false;

    private class \u0023G
    {
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023G()
      {
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023G()
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          Assembly executingAssembly;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_2;
              case 1:
              case 4:
                executingAssembly = Assembly.GetExecutingAssembly();
                num2 = 2;
                continue;
              case 2:
                if (!\u0023\u0023.\u0023Bk(executingAssembly.Location, true, out flag) || !flag)
                  goto label_10;
                else
                  goto case 5;
              case 5:
                if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
                {
                  num2 = 6;
                  continue;
                }
                goto label_10;
              case 6:
                goto label_9;
              default:
                num2 = 5;
                continue;
            }
          }
label_2:
          flag = false;
          num1 = 4;
        }
label_9:
        return;
label_10:
        throw new SecurityException("Assembly has been tampered");
      }

      internal static bool aan8mry3bUguV9g2ih() => true;

      internal static bool mFIsgPQQSY7EhvJbHZ() => false;
    }

    private class \u0023H
    {
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023H()
      {
      }
    }

    private class \u0023I
    {
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023I()
      {
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023I()
      {
        int num1 = 5;
        while (true)
        {
          int num2 = num1;
          Assembly executingAssembly;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 5:
                goto label_6;
              case 1:
              case 2:
                if (!\u0023\u0023.\u00231h(executingAssembly.Location, true, out flag) || !flag)
                  goto label_11;
                else
                  goto case 3;
              case 3:
                if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
                {
                  if (true)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_9;
                }
                else
                  goto label_11;
              case 4:
                goto label_5;
              case 6:
                goto label_10;
              default:
                goto label_4;
            }
          }
label_4:
          num1 = 3;
          continue;
label_5:
          executingAssembly = Assembly.GetExecutingAssembly();
          num1 = 1;
          continue;
label_6:
          flag = false;
          num1 = 4;
        }
label_10:
        return;
label_9:
        return;
label_11:
        throw new SecurityException("Assembly has been tampered");
      }

      internal static bool RrkUKRfPiQN7ZTPwQs() => true;

      internal static bool DGBApMcpRJKBstmdKe() => false;
    }

    public class \u0023K
    {
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023K()
      {
      }

      [STAThread]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public static void \u0023J()
      {
        \u0023F.\u0023L l;
        try
        {
          if (!\u0023\u0023.\u0023Xk())
            return;
          l = new \u0023F.\u0023L();
          \u0023\u0023.\u0023ek((\u0023F.\u0023M) l);
        }
        catch (Exception ex)
        {
          \u0023\u0023.\u0023sk(new object[1]
          {
            (object) l
          }, ex);
        }
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023K()
      {
        int num1 = 3;
        if (\u0023F.\u0023K.yXbot6u6St7bFY8mYS())
          goto label_7;
label_1:
        Assembly executingAssembly;
        int num2;
        if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
          num2 = 6;
        else
          goto label_11;
label_6:
        num1 = num2;
label_7:
        bool flag;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              flag = false;
              if (\u0023F.\u0023K.yXbot6u6St7bFY8mYS())
              {
                num1 = 4;
                continue;
              }
              goto label_5;
            case 1:
            case 4:
              goto label_3;
            case 2:
              goto label_1;
            case 5:
              goto label_5;
            case 6:
              goto label_10;
            default:
              if (!\u0023F.\u0023K.ddnE2s0rU4THqDet4Y())
              {
                num1 = 2;
                continue;
              }
              goto label_9;
          }
        }
label_3:
        executingAssembly = Assembly.GetExecutingAssembly();
        num2 = 5;
        goto label_6;
label_5:
        if (!\u0023\u0023.\u0023kl(executingAssembly.Location, true, out flag) || !flag)
          goto label_11;
        else
          goto label_1;
label_10:
        return;
label_9:
        return;
label_11:
        throw new SecurityException("Assembly has been tampered");
      }

      internal static bool yXbot6u6St7bFY8mYS() => true;

      internal static bool ddnE2s0rU4THqDet4Y() => false;
    }

    public class \u0023L : \u0023F.\u0023M
    {
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023L()
      {
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023L()
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          bool flag;
          Assembly executingAssembly;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                if (!flag)
                  goto label_11;
                else
                  goto case 3;
              case 1:
              case 5:
                executingAssembly = Assembly.GetExecutingAssembly();
                if (\u0023\u0023.\u0023xk(executingAssembly.Location, true, out flag))
                {
                  int num3 = 0;
                  num2 = \u0023F.\u0023L.V5NSSyvtiFX0T0GqsA() ? num3 : num3;
                  continue;
                }
                goto label_11;
              case 3:
                if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
                {
                  num2 = 6;
                  continue;
                }
                goto label_11;
              case 4:
                goto label_1;
              case 6:
                goto label_10;
              default:
                goto label_7;
            }
          }
label_1:
          flag = false;
          num1 = 5;
          continue;
label_7:
          num1 = 3;
        }
label_10:
        return;
label_11:
        throw new SecurityException("Assembly has been tampered");
      }

      internal static bool RpvNW74Ty7bMFajrxs() => true;

      internal static bool V5NSSyvtiFX0T0GqsA() => false;
    }

    public class \u0023M
    {
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023M()
      {
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023M()
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          Assembly executingAssembly;
          while (true)
          {
            switch (num2)
            {
              case 0:
                executingAssembly = Assembly.GetExecutingAssembly();
                if (\u0023F.\u0023M.PHNpwCOvocSL02SYnL())
                {
                  num2 = 5;
                  continue;
                }
                goto label_9;
              case 1:
              case 3:
                goto label_1;
              case 2:
              case 5:
                goto label_3;
              case 4:
                goto label_7;
              case 6:
                goto label_10;
              default:
                num2 = 1;
                continue;
            }
          }
label_1:
          bool flag;
          if (flag && executingAssembly.FullName.EndsWith("34256fcd934ca661"))
          {
            num1 = 6;
            continue;
          }
          goto label_11;
label_3:
          if (!\u0023\u0023.\u0023Pj(executingAssembly.Location, true, out flag))
            goto label_11;
          else
            goto label_1;
label_7:
          flag = false;
          num1 = 0;
        }
label_10:
        return;
label_9:
        return;
label_11:
        throw new SecurityException("Assembly has been tampered");
      }

      internal static bool PHNpwCOvocSL02SYnL() => true;

      internal static bool lJ2xKC9Osp7l8MnoFa() => false;
    }
  }
}
