// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.OutgoingWebRequestContext
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Globalization;
using System.Net;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;

namespace System.ServiceModel.Web
{
  [ComVisible(false)]
  public class OutgoingWebRequestContext
  {
    private OperationContext operationContext;

    internal OutgoingWebRequestContext(OperationContext operationContext) => this.operationContext = operationContext;

    public string Accept
    {
      get => this.MessageProperty.Headers[HttpRequestHeader.Accept];
      set => this.MessageProperty.Headers[HttpRequestHeader.Accept] = value;
    }

    public long ContentLength
    {
      get => long.Parse(this.MessageProperty.Headers[HttpRequestHeader.ContentLength], (IFormatProvider) CultureInfo.InvariantCulture);
      set => this.MessageProperty.Headers[HttpRequestHeader.ContentLength] = value.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    }

    public string ContentType
    {
      get => this.MessageProperty.Headers[HttpRequestHeader.ContentType];
      set => this.MessageProperty.Headers[HttpRequestHeader.ContentType] = value;
    }

    public WebHeaderCollection Headers => this.MessageProperty.Headers;

    public string IfMatch
    {
      get => this.MessageProperty.Headers[HttpRequestHeader.IfMatch];
      set => this.MessageProperty.Headers[HttpRequestHeader.IfMatch] = value;
    }

    public string IfModifiedSince
    {
      get => this.MessageProperty.Headers[HttpRequestHeader.IfModifiedSince];
      set => this.MessageProperty.Headers[HttpRequestHeader.IfModifiedSince] = value;
    }

    public string IfNoneMatch
    {
      get => this.MessageProperty.Headers[HttpRequestHeader.IfNoneMatch];
      set => this.MessageProperty.Headers[HttpRequestHeader.IfNoneMatch] = value;
    }

    public string IfUnmodifiedSince
    {
      get => this.MessageProperty.Headers[HttpRequestHeader.IfUnmodifiedSince];
      set => this.MessageProperty.Headers[HttpRequestHeader.IfUnmodifiedSince] = value;
    }

    public string Method
    {
      get => this.MessageProperty.Method;
      set => this.MessageProperty.Method = value;
    }

    public bool SuppressEntityBody
    {
      get => this.MessageProperty.SuppressEntityBody;
      set => this.MessageProperty.SuppressEntityBody = value;
    }

    public string UserAgent
    {
      get => this.MessageProperty.Headers[HttpRequestHeader.UserAgent];
      set => this.MessageProperty.Headers[HttpRequestHeader.UserAgent] = value;
    }

    private HttpRequestMessageProperty MessageProperty
    {
      get
      {
        if (!this.operationContext.OutgoingMessageProperties.ContainsKey(HttpRequestMessageProperty.Name))
          this.operationContext.OutgoingMessageProperties.Add(HttpRequestMessageProperty.Name, (object) new HttpRequestMessageProperty());
        return this.operationContext.OutgoingMessageProperties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
      }
    }
  }
}
