// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: Gز, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19F72CF4-8E17-4C69-9694-AAB2F68A841C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-315cc7a49fb61eb58200e4b8294fb4a7c58ef16bdf813f48fa8d114a9804258a.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = -2009070817;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1299685940)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b = board;
            num1 = (int) num2 * -488637906 ^ 1935872108;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 322274187 ^ 1387447220;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestSinglePiece(Pieces x)
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1672315524;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1020042890)) % 11U)
        {
          case 0:
            int num3 = !flag ? -749946062 : (num3 = -1246608619);
            num1 = num3 ^ (int) num2 * -38895544;
            continue;
          case 1:
            flag = x == Pieces.King;
            num1 = (int) num2 * 850739838 ^ 1482105623;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 924910565 ^ 2013412919;
            continue;
          case 4:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -1064521396 ^ -681438110;
            continue;
          case 5:
            num1 = (int) num2 * 1272346794 ^ 2104823567;
            continue;
          case 6:
            this.b.DisableTurns = true;
            this.b.addWhite(4, 4, x);
            num1 = -769111346;
            continue;
          case 7:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1205238126 ^ 631085655;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -30494584 ^ -1412073410;
            continue;
          case 9:
            goto label_3;
          case 10:
            num1 = (int) num2 * -1792267248 ^ 1303984778;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 1273937938;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1413936980)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 557857158 ^ -986205203;
            continue;
          case 3:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 1682050642 ^ 1438779583;
            continue;
          case 4:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -1028568546 ^ -2051218081;
            continue;
          case 5:
            num1 = (int) num2 * 1362460069 ^ -2053675893;
            continue;
          case 6:
            this.b.ClearBoard();
            num1 = (int) num2 * 1395249006 ^ 1558733751;
            continue;
          case 7:
            num1 = (int) num2 * -695540695 ^ -417485106;
            continue;
          case 8:
            num1 = (int) num2 * -1075452579 ^ 473405916;
            continue;
          case 9:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 1207385951 ^ 1588899782;
            continue;
          case 10:
            this.b.addWhite(1, 1, Pieces.Pawn);
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 412810336 ^ -1381644380;
            continue;
          case 11:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -1561288969 ^ -1946958169;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      this.b.lights.FindAllMoves();
    }

    internal void TestPromotion()
    {
      this.b.ClearBoard();
      this.b.addBlack(4, 1, Pieces.Pawn);
label_1:
      int num1 = 526694724;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1550145622)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 998666947 ^ -559173063;
            continue;
          case 1:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -322527409 ^ -872668073;
            continue;
          case 2:
            num1 = (int) num2 * -1853170309 ^ 940015465;
            continue;
          case 3:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * -832389245 ^ -1182825085;
            continue;
          case 4:
            this.b.addWhite(3, 0, Pieces.King);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1642926202 ^ -1404632618;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 1396826526 ^ 358089281;
            continue;
          case 7:
            goto label_3;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -86983839;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -645427125)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -261725915 ^ -209981652;
            continue;
          case 1:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 2105745 ^ 437487134;
            continue;
          case 2:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 596498850 ^ -274569865;
            continue;
          case 3:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -747201489 ^ 1846364194;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 1789335602 ^ 1104945211;
            continue;
          case 6:
            num1 = (int) num2 * -1287011636 ^ -205299300;
            continue;
          case 7:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -2065121095 ^ 2115305762;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -514289261 ^ 1070335602;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * -993540127 ^ 1246765015;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = -990147928;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -942121410)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -270862864 ^ 891428841;
            continue;
          case 2:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -354919389 ^ 2146005880;
            continue;
          case 3:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -1750812768 ^ -48149820;
            continue;
          case 4:
            this.b.ClearBoard();
            num1 = (int) num2 * -1540620632 ^ -452421446;
            continue;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1301076031 ^ -50967320;
            continue;
          case 6:
            num1 = (int) num2 * -2104156737 ^ -561976471;
            continue;
          case 7:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * -1813855441 ^ -2006307441;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 970365421;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1839095381)) % 7U)
        {
          case 0:
            num1 = (int) num2 * -2007252045 ^ 1759389090;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 140680742 ^ 2141099593;
            continue;
          case 3:
            num1 = (int) num2 * 2097787979 ^ -1263533521;
            continue;
          case 4:
            this.b.ClearBoard();
            num1 = (int) num2 * 32179558 ^ 1374278309;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.b.addWhite(3, 0, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 777622218 ^ -663418446;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1867656583;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1985250394)) % 16U)
        {
          case 0:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1669145188 ^ -1725710057;
            continue;
          case 1:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 2131809648 ^ 260250258;
            continue;
          case 2:
            num1 = (int) num2 * 659176197 ^ -753348859;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 1562900993 ^ -538735524;
            continue;
          case 5:
            num1 = (int) num2 * 1744258348 ^ -1212009872;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -2028074228 ^ -511170527;
            continue;
          case 8:
            num1 = (int) num2 * 917439859 ^ -1000755227;
            continue;
          case 9:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 1439758704 ^ -2135174621;
            continue;
          case 10:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * 1799159642 ^ 338986847;
            continue;
          case 11:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1304433461 ^ -142214570;
            continue;
          case 12:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1084377425 ^ -2078012536;
            continue;
          case 13:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * -157544614 ^ 629332316;
            continue;
          case 14:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -195518185 ^ -1226019688;
            continue;
          case 15:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 1488506054 ^ -1047625844;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }
  }
}
