// Decompiled with JetBrains decompiler
// Type: PrivilegeManager
// Assembly: server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D9BFCB67-87B6-49D4-9C1D-51C6F6CFCB00
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Foxhiex.vls-a8cbc600c1a4ef2d82e46e7eb0e7f4b73edf16bcee8fca585424032476f41055.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using v7fD6EIE0CLV2tv7w0;

public class PrivilegeManager
{
  public const string SE_ASSIGNPRIMARYTOKEN_NAME = "SeAssignPrimaryTokenPrivilege";
  public const string SE_AUDIT_NAME = "SeAuditPrivilege";
  public const string SE_BACKUP_NAME = "SeBackupPrivilege";
  public const string SE_CHANGE_NOTIFY_NAME = "SeChangeNotifyPrivilege";
  public const string SE_CREATE_GLOBAL_NAME = "SeCreateGlobalPrivilege";
  public const string SE_CREATE_PAGEFILE_NAME = "SeCreatePagefilePrivilege";
  public const string SE_CREATE_PERMANENT_NAME = "SeCreatePermanentPrivilege";
  public const string SE_CREATE_SYMBOLIC_LINK_NAME = "SeCreateSymbolicLinkPrivilege";
  public const string SE_CREATE_TOKEN_NAME = "SeCreateTokenPrivilege";
  public const string SE_DEBUG_NAME = "SeDebugPrivilege";
  public const string SE_ENABLE_DELEGATION_NAME = "SeEnableDelegationPrivilege";
  public const string SE_IMPERSONATE_NAME = "SeImpersonatePrivilege";
  public const string SE_INC_BASE_PRIORITY_NAME = "SeIncreaseBasePriorityPrivilege";
  public const string SE_INCREASE_QUOTA_NAME = "SeIncreaseQuotaPrivilege";
  public const string SE_INC_WORKING_SET_NAME = "SeIncreaseWorkingSetPrivilege";
  public const string SE_LOAD_DRIVER_NAME = "SeLoadDriverPrivilege";
  public const string SE_LOCK_MEMORY_NAME = "SeLockMemoryPrivilege";
  public const string SE_MACHINE_ACCOUNT_NAME = "SeMachineAccountPrivilege";
  public const string SE_MANAGE_VOLUME_NAME = "SeManageVolumePrivilege";
  public const string SE_PROF_SINGLE_PROCESS_NAME = "SeProfileSingleProcessPrivilege";
  public const string SE_RELABEL_NAME = "SeRelabelPrivilege";
  public const string SE_REMOTE_SHUTDOWN_NAME = "SeRemoteShutdownPrivilege";
  public const string SE_RESTORE_NAME = "SeRestorePrivilege";
  public const string SE_SECURITY_NAME = "SeSecurityPrivilege";
  public const string SE_SHUTDOWN_NAME = "SeShutdownPrivilege";
  public const string SE_SYNC_AGENT_NAME = "SeSyncAgentPrivilege";
  public const string SE_SYSTEM_ENVIRONMENT_NAME = "SeSystemEnvironmentPrivilege";
  public const string SE_SYSTEM_PROFILE_NAME = "SeSystemProfilePrivilege";
  public const string SE_SYSTEMTIME_NAME = "SeSystemtimePrivilege";
  public const string SE_TAKE_OWNERSHIP_NAME = "SeTakeOwnershipPrivilege";
  public const string SE_TCB_NAME = "SeTcbPrivilege";
  public const string SE_TIME_ZONE_NAME = "SeTimeZonePrivilege";
  public const string SE_TRUSTED_CREDMAN_ACCESS_NAME = "SeTrustedCredManAccessPrivilege";
  public const string SE_UNDOCK_NAME = "SeUndockPrivilege";
  public const string SE_UNSOLICITED_INPUT_NAME = "SeUnsolicitedInputPrivilege";
  public const uint SE_PRIVILEGE_ENABLED_BY_DEFAULT = 1;
  public const uint SE_PRIVILEGE_ENABLED = 2;
  public const uint SE_PRIVILEGE_REMOVED = 4;
  public const uint SE_PRIVILEGE_USED_FOR_ACCESS = 2147483648;
  private static uint mtIJrSrntC;
  private static uint V76JE99iB4;
  private static uint AeOJhWipVO;
  private static uint hbxJN7tOlt;
  private static uint j03JPnOK2X;
  private static uint QCiJHKet69;
  private static uint Ob2J0MfP7h;
  private static uint eIpJQWaQhy;
  private static uint GJmJ5h7cXZ;
  private static uint REyJX3RoxS;
  private static uint crmJoBxlHS;
  private static uint OOeJFa7mLe;
  private static uint mZxJd46Nih;

  [DllImport("advapi32.dll", EntryPoint = "OpenProcessToken", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool gNAJmCdgn2([In] IntPtr obj0, [In] uint obj1, out IntPtr _param2);

  [DllImport("kernel32.dll", SetLastError = true)]
  public static extern IntPtr GetCurrentProcess();

  [DllImport("advapi32.dll", EntryPoint = "LookupPrivilegeValue", CharSet = CharSet.Auto, SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool vJ7JK3CQDQ(
    [In] string obj0,
    [In] string obj1,
    out PrivilegeManager.LUID _param2);

  [DllImport("kernel32.dll", EntryPoint = "CloseHandle", SetLastError = true)]
  private static extern bool yS4JIX3QQX([In] IntPtr obj0);

  [DllImport("advapi32.dll", EntryPoint = "AdjustTokenPrivileges", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool qm6JSEyADa(
    [In] IntPtr obj0,
    [MarshalAs(UnmanagedType.Bool)] bool _param1,
    [In] ref PrivilegeManager.TOKEN_PRIVILEGES obj2,
    [In] uint obj3,
    [In] IntPtr obj4,
    [In] IntPtr obj5);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static void SetPrivilege(IntPtr PID, string privilege)
  {
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public PrivilegeManager()
  {
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static PrivilegeManager()
  {
    xEj40EK8q77x8PNMOE.nIRekAVryQ();
    int num1 = 3;
    if (PrivilegeManager.p2mHYHYt0sDl7HZtTId())
      ;
    while (true)
    {
      switch (num1)
      {
        case 0:
          PrivilegeManager.GJmJ5h7cXZ = 64U;
          num1 = 4;
          continue;
        case 1:
          PrivilegeManager.OOeJFa7mLe = PrivilegeManager.V76JE99iB4 | PrivilegeManager.QCiJHKet69;
          goto case 10;
        case 2:
          PrivilegeManager.j03JPnOK2X = 4U;
          if (PrivilegeManager.p2mHYHYt0sDl7HZtTId())
          {
            int num2 = 10;
            num1 = PrivilegeManager.p2mHYHYt0sDl7HZtTId() ? num2 : num2;
            continue;
          }
          num1 = 15;
          continue;
        case 3:
          PrivilegeManager.WFlGvYYouTieDvIh5yt();
          if (true)
          {
            num1 = 12;
            continue;
          }
          goto case 12;
        case 4:
          PrivilegeManager.REyJX3RoxS = 128U;
          num1 = 11;
          continue;
        case 5:
          PrivilegeManager.V76JE99iB4 = 131072U;
          num1 = 8;
          continue;
        case 6:
        case 15:
          PrivilegeManager.QCiJHKet69 = 8U;
          int num3 = 7;
          num1 = PrivilegeManager.p2mHYHYt0sDl7HZtTId() ? num3 : num3;
          continue;
        case 7:
          PrivilegeManager.Ob2J0MfP7h = 16U;
          goto case 9;
        case 8:
          PrivilegeManager.AeOJhWipVO = 1U;
          if (PrivilegeManager.l14CRMY2gxPrV523TS9())
          {
            num1 = 14;
            continue;
          }
          goto label_20;
        case 9:
          PrivilegeManager.eIpJQWaQhy = 32U;
          if (true)
          {
            num1 = 0;
            continue;
          }
          goto case 11;
        case 10:
        case 13:
          PrivilegeManager.mZxJd46Nih = PrivilegeManager.mtIJrSrntC | PrivilegeManager.AeOJhWipVO | PrivilegeManager.hbxJN7tOlt | PrivilegeManager.j03JPnOK2X | PrivilegeManager.QCiJHKet69 | PrivilegeManager.Ob2J0MfP7h | PrivilegeManager.eIpJQWaQhy | PrivilegeManager.GJmJ5h7cXZ | PrivilegeManager.REyJX3RoxS | PrivilegeManager.crmJoBxlHS;
          num1 = 16;
          continue;
        case 11:
          PrivilegeManager.crmJoBxlHS = 256U;
          if (true)
          {
            num1 = 1;
            continue;
          }
          goto case 4;
        case 12:
          PrivilegeManager.mtIJrSrntC = 983040U;
          num1 = 5;
          continue;
        case 14:
          PrivilegeManager.hbxJN7tOlt = 2U;
          num1 = 2;
          continue;
        case 16:
          goto label_5;
        default:
          if (true)
          {
            num1 = 9;
            continue;
          }
          goto case 0;
      }
    }
label_5:
    return;
label_20:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool l14CRMY2gxPrV523TS9() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool p2mHYHYt0sDl7HZtTId() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void WFlGvYYouTieDvIh5yt()
  {
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void k10kffYwmfiEoNBhoY9([In] object obj0)
  {
  }

  public struct LUID
  {
    public uint LowPart;
    public int HighPart;

    static LUID() => xEj40EK8q77x8PNMOE.nIRekAVryQ();
  }

  public struct TOKEN_PRIVILEGES
  {
    public uint PrivilegeCount;
    public PrivilegeManager.LUID Luid;
    public uint Attributes;

    static TOKEN_PRIVILEGES() => xEj40EK8q77x8PNMOE.nIRekAVryQ();
  }

  public struct LUID_AND_ATTRIBUTES
  {
    public PrivilegeManager.LUID Luid;
    public uint Attributes;

    static LUID_AND_ATTRIBUTES() => xEj40EK8q77x8PNMOE.nIRekAVryQ();
  }
}
