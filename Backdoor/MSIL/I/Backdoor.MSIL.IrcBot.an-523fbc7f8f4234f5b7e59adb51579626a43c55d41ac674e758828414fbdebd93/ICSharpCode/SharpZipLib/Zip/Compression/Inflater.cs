// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.Compression.Inflater
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Checksums;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using System;

namespace ICSharpCode.SharpZipLib.Zip.Compression
{
  public class Inflater
  {
    private const int \uE020 = 0;
    private const int \uE01F = 1;
    private const int \uE01E = 2;
    private const int \uE01D = 3;
    private const int \uE01C = 4;
    private const int \uE01B = 5;
    private const int \uE01A = 6;
    private const int \uE019 = 7;
    private const int \uE018 = 8;
    private const int \uE017 = 9;
    private const int \uE016 = 10;
    private const int \uE015 = 11;
    private const int \uE014 = 12;
    private static readonly int[] \uE013 = new int[29]
    {
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258
    };
    private static readonly int[] \uE012 = new int[29]
    {
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0
    };
    private static readonly int[] \uE011 = new int[30]
    {
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577
    };
    private static readonly int[] \uE010 = new int[30]
    {
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13
    };
    private int \uE00F;
    private int \uE00E;
    private int \uE00D;
    private int \uE00C;
    private int \uE00B;
    private int \uE00A;
    private bool \uE009;
    private long \uE008;
    private long \uE007;
    private bool \uE006;
    private StreamManipulator \uE005;
    private OutputWindow \uE004;
    private \uE017 \uE003;
    private InflaterHuffmanTree \uE002;
    private InflaterHuffmanTree \uE001;
    private Adler32 \uE000;

    public Inflater()
      : this(false)
    {
    }

    public Inflater(bool noHeader)
    {
      this.\uE006 = noHeader;
      this.\uE000 = new Adler32();
      this.\uE005 = new StreamManipulator();
      this.\uE004 = new OutputWindow();
      this.\uE00F = noHeader ? 2 : 0;
    }

    public void Reset()
    {
      this.\uE00F = this.\uE006 ? 2 : 0;
      this.\uE007 = 0L;
      this.\uE008 = 0L;
      this.\uE005.Reset();
      this.\uE004.Reset();
      this.\uE003 = (\uE017) null;
      this.\uE002 = (InflaterHuffmanTree) null;
      this.\uE001 = (InflaterHuffmanTree) null;
      this.\uE009 = false;
      this.\uE000.Reset();
    }

    private bool \uE004()
    {
      int num1 = this.\uE005.PeekBits(16);
      if (num1 < 0)
        return false;
      this.\uE005.DropBits(16);
      int num2 = (num1 << 8 | num1 >> 8) & (int) ushort.MaxValue;
      if (num2 % 31 != 0)
        throw new SharpZipBaseException(\uE01B.\uE000("\uEE75\uEE58\uEE5C\uEE59\uEE58\uEE4F\uEE1D\uEE5E\uEE55\uEE58\uEE5E\uEE56\uEE4E\uEE48\uEE50\uEE1D\uEE54\uEE51\uEE51\uEE58\uEE5A\uEE5C\uEE51", 60989));
      if ((num2 & 3840) != 2048)
        throw new SharpZipBaseException(\uE01B.\uE000("\uEA60\uEA4C\uEA4E\uEA53\uEA51\uEA46\uEA50\uEA50\uEA4A\uEA4C\uEA4D\uEA03\uEA6E\uEA46\uEA57\uEA4B\uEA4C\uEA47\uEA03\uEA56\uEA4D\uEA48\uEA4D\uEA4C\uEA54\uEA4D", 59939));
      if ((num2 & 32) == 0)
      {
        this.\uE00F = 2;
      }
      else
      {
        this.\uE00F = 1;
        this.\uE00D = 32;
      }
      return true;
    }

    private bool \uE003()
    {
      for (; this.\uE00D > 0; this.\uE00D -= 8)
      {
        int num = this.\uE005.PeekBits(8);
        if (num < 0)
          return false;
        this.\uE005.DropBits(8);
        this.\uE00E = this.\uE00E << 8 | num;
      }
      return false;
    }

    private bool \uE002()
    {
      int freeSpace = this.\uE004.GetFreeSpace();
      while (freeSpace >= 258)
      {
        switch (this.\uE00F)
        {
          case 7:
            int symbol1;
            while (((symbol1 = this.\uE002.GetSymbol(this.\uE005)) & -256) == 0)
            {
              this.\uE004.Write(symbol1);
              if (--freeSpace < 258)
                return true;
            }
            if (symbol1 < 257)
            {
              if (symbol1 < 0)
                return false;
              this.\uE001 = (InflaterHuffmanTree) null;
              this.\uE002 = (InflaterHuffmanTree) null;
              this.\uE00F = 2;
              return true;
            }
            try
            {
              this.\uE00C = Inflater.\uE013[symbol1 - 257];
              this.\uE00D = Inflater.\uE012[symbol1 - 257];
              goto case 8;
            }
            catch (Exception ex)
            {
              throw new SharpZipBaseException(\uE01B.\uE000("\uE230\uE215\uE215\uE21C\uE21E\uE218\uE215\uE259\uE20B\uE21C\uE209\uE259\uE215\uE21C\uE217\uE21E\uE20D\uE211\uE259\uE21A\uE216\uE21D\uE21C", 57977));
            }
          case 8:
            if (this.\uE00D > 0)
            {
              this.\uE00F = 8;
              int num = this.\uE005.PeekBits(this.\uE00D);
              if (num < 0)
                return false;
              this.\uE005.DropBits(this.\uE00D);
              this.\uE00C += num;
            }
            this.\uE00F = 9;
            goto case 9;
          case 9:
            int symbol2 = this.\uE001.GetSymbol(this.\uE005);
            if (symbol2 < 0)
              return false;
            try
            {
              this.\uE00B = Inflater.\uE011[symbol2];
              this.\uE00D = Inflater.\uE010[symbol2];
              goto case 10;
            }
            catch (Exception ex)
            {
              throw new SharpZipBaseException(\uE01B.\uE000("\uF54A\uF56F\uF56F\uF566\uF564\uF562\uF56F\uF523\uF571\uF566\uF573\uF523\uF567\uF56A\uF570\uF577\uF523\uF560\uF56C\uF567\uF566", 62723));
            }
          case 10:
            if (this.\uE00D > 0)
            {
              this.\uE00F = 10;
              int num = this.\uE005.PeekBits(this.\uE00D);
              if (num < 0)
                return false;
              this.\uE005.DropBits(this.\uE00D);
              this.\uE00B += num;
            }
            this.\uE004.Repeat(this.\uE00C, this.\uE00B);
            freeSpace -= this.\uE00C;
            this.\uE00F = 7;
            continue;
          default:
            throw new SharpZipBaseException(\uE01B.\uE000("\uEBAC\uEB8B\uEB83\uEB89\uEB84\uEB91\uEB80\uEB97\uEBC5\uEB90\uEB8B\uEB8E\uEB8B\uEB8A\uEB92\uEB8B\uEBC5\uEB88\uEB8A\uEB81\uEB80", 60389));
        }
      }
      return true;
    }

    private bool \uE001()
    {
      for (; this.\uE00D > 0; this.\uE00D -= 8)
      {
        int num = this.\uE005.PeekBits(8);
        if (num < 0)
          return false;
        this.\uE005.DropBits(8);
        this.\uE00E = this.\uE00E << 8 | num;
      }
      if ((int) this.\uE000.Value != this.\uE00E)
        throw new SharpZipBaseException(\uE01B.\uE000("\uE700\uE725\uE72D\uE724\uE733\uE761\uE722\uE729\uE72A\uE732\uE734\uE72C\uE761\uE725\uE72E\uE724\uE732\uE72F\uE766\uE735\uE761\uE72C\uE720\uE735\uE722\uE729\uE77B\uE761", 59201) + (object) (int) this.\uE000.Value + \uE01B.\uE000("\uEEE0\uEEB6\uEEB3\uEEEE\uEEE0", 61120) + (object) this.\uE00E);
      this.\uE00F = 12;
      return false;
    }

    private bool \uE000()
    {
      switch (this.\uE00F)
      {
        case 0:
          return this.\uE004();
        case 1:
          return this.\uE003();
        case 2:
          if (this.\uE009)
          {
            if (this.\uE006)
            {
              this.\uE00F = 12;
              return false;
            }
            this.\uE005.SkipToByteBoundary();
            this.\uE00D = 32;
            this.\uE00F = 11;
            return true;
          }
          int num1 = this.\uE005.PeekBits(3);
          if (num1 < 0)
            return false;
          this.\uE005.DropBits(3);
          if ((num1 & 1) != 0)
            this.\uE009 = true;
          switch (num1 >> 1)
          {
            case 0:
              this.\uE005.SkipToByteBoundary();
              this.\uE00F = 3;
              break;
            case 1:
              this.\uE002 = InflaterHuffmanTree.defLitLenTree;
              this.\uE001 = InflaterHuffmanTree.defDistTree;
              this.\uE00F = 7;
              break;
            case 2:
              this.\uE003 = new \uE017();
              this.\uE00F = 6;
              break;
            default:
              throw new SharpZipBaseException(\uE01B.\uE000("\uF85E\uF865\uF860\uF865\uF864\uF87C\uF865\uF82B\uF869\uF867\uF864\uF868\uF860\uF82B\uF87F\uF872\uF87B\uF86E\uF82B", 63499) + (object) num1);
          }
          return true;
        case 3:
          if ((this.\uE00A = this.\uE005.PeekBits(16)) < 0)
            return false;
          this.\uE005.DropBits(16);
          this.\uE00F = 4;
          goto case 4;
        case 4:
          int num2 = this.\uE005.PeekBits(16);
          if (num2 < 0)
            return false;
          this.\uE005.DropBits(16);
          if (num2 != (this.\uE00A ^ (int) ushort.MaxValue))
            throw new SharpZipBaseException(\uE01B.\uE000("\uEABC\uEAAC\uEAB1\uEAB5\uEABB\uEAB0\uEAFE\uEAAB\uEAB0\uEABD\uEAB1\uEAB3\uEAAE\uEAAC\uEABB\uEAAD\uEAAD\uEABB\uEABA\uEAFE\uEABC\uEAB2\uEAB1\uEABD\uEAB5", 60126));
          this.\uE00F = 5;
          goto case 5;
        case 5:
          this.\uE00A -= this.\uE004.CopyStored(this.\uE005, this.\uE00A);
          if (this.\uE00A != 0)
            return !this.\uE005.IsNeedingInput;
          this.\uE00F = 2;
          return true;
        case 6:
          if (!this.\uE003.\uE000(this.\uE005))
            return false;
          this.\uE002 = this.\uE003.\uE001();
          this.\uE001 = this.\uE003.\uE000();
          this.\uE00F = 7;
          goto case 7;
        case 7:
        case 8:
        case 9:
        case 10:
          return this.\uE002();
        case 11:
          return this.\uE001();
        case 12:
          return false;
        default:
          throw new SharpZipBaseException(\uE01B.\uE000("\uF38B\uF3AC\uF3A4\uF3AE\uF3A3\uF3B6\uF3A7\uF3B0\uF3EC\uF386\uF3A7\uF3A1\uF3AD\uF3A6\uF3A7\uF3E2\uF3B7\uF3AC\uF3A9\uF3AC\uF3AD\uF3B5\uF3AC\uF3E2\uF3AF\uF3AD\uF3A6\uF3A7", 62402));
      }
    }

    public void SetDictionary(byte[] buffer) => this.SetDictionary(buffer, 0, buffer.Length);

    public void SetDictionary(byte[] buffer, int index, int count)
    {
      if (buffer == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEDC8\uEDDF\uEDCC\uEDCC\uEDCF\uEDD8", 60842));
      if (index < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uF4A6\uF4A1\uF4AB\uF4AA\uF4B7", 62671));
      if (count < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uED5B\uED57\uED4D\uED56\uED4C", 60728));
      if (!this.IsNeedingDictionary)
        throw new InvalidOperationException(\uE01B.\uE000("\uE8DF\uE8F2\uE8F8\uE8EF\uE8F2\uE8F4\uE8F5\uE8FA\uE8E9\uE8E2\uE8BB\uE8F2\uE8E8\uE8BB\uE8F5\uE8F4\uE8EF\uE8BB\uE8F5\uE8FE\uE8FE\uE8FF\uE8FE\uE8FF", 59547));
      this.\uE000.Update(buffer, index, count);
      if ((int) this.\uE000.Value != this.\uE00E)
        throw new SharpZipBaseException(\uE01B.\uE000("\uF1D2\uF1F7\uF1EA\uF1EB\uF1E2\uF1A5\uF1E4\uF1E1\uF1E9\uF1E0\uF1F7\uF1A5\uF1E6\uF1ED\uF1E0\uF1E6\uF1EE\uF1F6\uF1F0\uF1E8", 61829));
      this.\uE000.Reset();
      this.\uE004.CopyDict(buffer, index, count);
      this.\uE00F = 2;
    }

    public void SetInput(byte[] buffer) => this.SetInput(buffer, 0, buffer.Length);

    public void SetInput(byte[] buffer, int index, int count)
    {
      this.\uE005.SetInput(buffer, index, count);
      this.\uE007 += (long) count;
    }

    public int Inflate(byte[] buffer) => buffer != null ? this.Inflate(buffer, 0, buffer.Length) : throw new ArgumentNullException(\uE01B.\uE000("\uEDC8\uEDDF\uEDCC\uEDCC\uEDCF\uEDD8", 60842));

    public int Inflate(byte[] buffer, int offset, int count)
    {
      if (buffer == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEDC8\uEDDF\uEDCC\uEDCC\uEDCF\uEDD8", 60842));
      if (count < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uED5B\uED57\uED4D\uED56\uED4C", 60728), \uE01B.\uE000("\uE504\uE508\uE512\uE509\uE513\uE547\uE504\uE506\uE509\uE509\uE508\uE513\uE547\uE505\uE502\uE547\uE509\uE502\uE500\uE506\uE513\uE50E\uE511\uE502", 58727));
      if (offset < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uF201\uF208\uF208\uF21D\uF20B\uF21A", 62062), \uE01B.\uE000("\uE351\uE358\uE358\uE34D\uE35B\uE34A\uE31E\uE35D\uE35F\uE350\uE350\uE351\uE34A\uE31E\uE35C\uE35B\uE31E\uE350\uE35B\uE359\uE35F\uE34A\uE357\uE348\uE35B", 58174));
      if (offset + count > buffer.Length)
        throw new ArgumentException(\uE01B.\uE000("\uF555\uF559\uF543\uF558\uF542\uF516\uF553\uF54E\uF555\uF553\uF553\uF552\uF545\uF516\uF554\uF543\uF550\uF550\uF553\uF544\uF516\uF554\uF559\uF543\uF558\uF552\uF545", 62774));
      if (count == 0)
      {
        if (!this.IsFinished)
          this.\uE000();
        return 0;
      }
      int num = 0;
      do
      {
        if (this.\uE00F != 11)
        {
          int count1 = this.\uE004.CopyOutput(buffer, offset, count);
          if (count1 > 0)
          {
            this.\uE000.Update(buffer, offset, count1);
            offset += count1;
            num += count1;
            this.\uE008 += (long) count1;
            count -= count1;
            if (count == 0)
              return num;
          }
        }
      }
      while (this.\uE000() || this.\uE004.GetAvailable() > 0 && this.\uE00F != 11);
      return num;
    }

    public bool IsNeedingInput => this.\uE005.IsNeedingInput;

    public bool IsNeedingDictionary => this.\uE00F == 1 && this.\uE00D == 0;

    public bool IsFinished => this.\uE00F == 12 && this.\uE004.GetAvailable() == 0;

    public int Adler => !this.IsNeedingDictionary ? (int) this.\uE000.Value : this.\uE00E;

    public long TotalOut => this.\uE008;

    public long TotalIn => this.\uE007 - (long) this.RemainingInput;

    public int RemainingInput => this.\uE005.AvailableBytes;
  }
}
