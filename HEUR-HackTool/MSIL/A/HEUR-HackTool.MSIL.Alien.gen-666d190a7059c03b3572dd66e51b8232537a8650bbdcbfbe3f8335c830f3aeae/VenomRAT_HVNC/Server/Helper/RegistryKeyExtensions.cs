// Decompiled with JetBrains decompiler
// Type: VenomRAT_HVNC.Server.Helper.RegistryKeyExtensions
// Assembly: VenomRAT_HVNC, Version=5.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 364FC72B-4DB8-403E-BB7F-732199A12380
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-666d190a7059c03b3572dd66e51b8232537a8650bbdcbfbe3f8335c830f3aeae.exe

using Microsoft.Win32;
using System;

namespace VenomRAT_HVNC.Server.Helper
{
  public static class RegistryKeyExtensions
  {
    public static string RegistryTypeToString(this RegistryValueKind valueKind, object valueData)
    {
      if (valueData == null)
        return "(value not set)";
      switch (valueKind)
      {
        case RegistryValueKind.String:
        case RegistryValueKind.ExpandString:
          return valueData.ToString();
        case RegistryValueKind.Binary:
          return ((byte[]) valueData).Length == 0 ? "(zero-length binary value)" : BitConverter.ToString((byte[]) valueData).Replace("-", " ").ToLower();
        case RegistryValueKind.DWord:
          uint num1 = (uint) (int) valueData;
          string str1 = num1.ToString("x8");
          num1 = (uint) (int) valueData;
          string str2 = num1.ToString();
          return string.Format("0x{0} ({1})", (object) str1, (object) str2);
        case RegistryValueKind.MultiString:
          return string.Join(" ", (string[]) valueData);
        case RegistryValueKind.QWord:
          ulong num2 = (ulong) (long) valueData;
          string str3 = num2.ToString("x8");
          num2 = (ulong) (long) valueData;
          string str4 = num2.ToString();
          return string.Format("0x{0} ({1})", (object) str3, (object) str4);
        default:
          return string.Empty;
      }
    }

    public static RegistryKey OpenReadonlySubKeySafe(this RegistryKey key, string name)
    {
      RegistryKey registryKey;
      try
      {
        registryKey = key.OpenSubKey(name, false);
      }
      catch
      {
        registryKey = (RegistryKey) null;
      }
      return registryKey;
    }

    public static RegistryKey OpenWritableSubKeySafe(this RegistryKey key, string name)
    {
      RegistryKey registryKey;
      try
      {
        registryKey = key.OpenSubKey(name, true);
      }
      catch
      {
        registryKey = (RegistryKey) null;
      }
      return registryKey;
    }

    public static string RegistryTypeToString(this RegistryValueKind valueKind)
    {
      switch (valueKind)
      {
        case RegistryValueKind.Unknown:
          return "(Unknown)";
        case RegistryValueKind.String:
          return "REG_SZ";
        case RegistryValueKind.ExpandString:
          return "REG_EXPAND_SZ";
        case RegistryValueKind.Binary:
          return "REG_BINARY";
        case RegistryValueKind.DWord:
          return "REG_DWORD";
        case RegistryValueKind.MultiString:
          return "REG_MULTI_SZ";
        case RegistryValueKind.QWord:
          return "REG_QWORD";
        default:
          return "REG_NONE";
      }
    }
  }
}
