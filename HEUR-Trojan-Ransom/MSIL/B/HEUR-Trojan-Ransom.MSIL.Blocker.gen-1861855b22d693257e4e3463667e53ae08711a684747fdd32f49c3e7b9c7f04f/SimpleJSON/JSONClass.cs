// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: VersioningHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A8C08E3E-24A1-4DAA-9E0F-F1F4BE4809FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1861855b22d693257e4e3463667e53ae08711a684747fdd32f49c3e7b9c7f04f.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1607259396;
        JSONNode jsonNode;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 640259370)) % 8U)
          {
            case 0:
              num1 = (int) num2 * 852405078 ^ -668641722;
              continue;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = 226137689;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 612552730 ^ -1124691528;
              continue;
            case 5:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * -1014944838 ^ -1935383904;
              continue;
            case 6:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -200076819 ^ -1859475029;
              continue;
            case 7:
              int num3 = flag ? 875817479 : (num3 = 432084819);
              num1 = num3 ^ (int) num2 * -242077280;
              continue;
            default:
              goto label_9;
          }
        }
label_9:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1789770358;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1423659986)) % 7U)
          {
            case 0:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -430316264 ^ -1573506349;
              continue;
            case 1:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -2005264618 ^ 2105432799;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            case 4:
              num1 = (int) num2 * 2008073456 ^ 547925787;
              continue;
            case 5:
              this.m_Dict.Add(aKey, value);
              num1 = -1737813418;
              continue;
            case 6:
              int num3 = !flag ? -97315823 : (num3 = -174032594);
              num1 = num3 ^ (int) num2 * -413734325;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 1952810316;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 393571638)) % 9U)
          {
            case 0:
              jsonNode = (JSONNode) null;
              num1 = 1835918133;
              continue;
            case 1:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * -1990264576 ^ 1297948771;
              continue;
            case 2:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 1604083293 ^ 135725662;
              continue;
            case 3:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 4:
              int num4 = !flag ? -1960552527 : (num4 = -1587877334);
              num1 = num4 ^ (int) num2 * 461381799;
              continue;
            case 5:
              num1 = (int) num2 * -385294382 ^ 2088539506;
              continue;
            case 6:
              num1 = (int) num2 * 195904124 ^ -722976280;
              continue;
            case 8:
              goto label_1;
            default:
              goto label_13;
          }
          flag = num3 != 0;
          num1 = 107456415;
        }
label_13:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1825663924;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1575467857)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * 2050259346 ^ 2089676614;
                continue;
              }
              num3 = 1;
              break;
            case 2:
              num1 = (int) num2 * 344654888 ^ -1975557216;
              continue;
            case 3:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 4:
              int num4 = flag ? -1874071001 : (num4 = -653501696);
              num1 = num4 ^ (int) num2 * 1293126104;
              continue;
            case 5:
              goto label_3;
            default:
              goto label_11;
          }
          flag = num3 != 0;
          num1 = -589579461;
        }
label_3:
        return;
label_11:;
      }
    }

    public override int Count
    {
      get
      {
        int count = this.m_Dict.Count;
label_1:
        int num1 = 381119877;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1278870747)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -1896925769 ^ -997843245;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 2039802826;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 301085105)) % 12U)
        {
          case 0:
            num1 = 11245261;
            continue;
          case 1:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 11245261;
            continue;
          case 2:
            num1 = (int) num2 * 1254585799 ^ 652183959;
            continue;
          case 3:
            int num3 = this.m_Dict.ContainsKey(aKey) ? 1738757329 : (num3 = 1764459795);
            num1 = num3 ^ (int) num2 * -747748540;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * 1217005251 ^ -1067774816;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num4 = JSONClass.\u206D‭​‫‭⁫‎⁯‮⁫⁯​‬⁬​‮‫‪‭⁪⁪‪​⁬‍‍⁯⁮‌⁪‮‌‎​⁯⁬⁫⁮‏‎‮(aKey) ? 131668700 : (num4 = 1818948646);
            num1 = num4 ^ (int) num2 * -333338808;
            continue;
          case 8:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * -1149539298 ^ 600633816;
            continue;
          case 9:
            num1 = (int) num2 * -192232070 ^ 1871776755;
            continue;
          case 10:
            this.m_Dict.Add(aKey, aItem);
            num1 = 163943184;
            continue;
          case 11:
            num1 = (int) num2 * 618044838 ^ -1722121052;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = 161469541;
      JSONNode jsonNode1;
      bool flag;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2000353545)) % 8U)
        {
          case 0:
            int num3 = flag ? -344528873 : (num3 = -991089142);
            num1 = num3 ^ (int) num2 * 58277712;
            continue;
          case 1:
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = (int) num2 * 1049776591 ^ -65565812;
            continue;
          case 3:
            jsonNode2 = this.m_Dict[aKey];
            num1 = 788524264;
            continue;
          case 4:
            flag = !this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -1043622671 ^ 317688773;
            continue;
          case 5:
            num1 = (int) num2 * -2093693030 ^ 67717713;
            continue;
          case 6:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * -850688136 ^ 1811396708;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return jsonNode1;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = 149312213;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 742531062)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -449373233 ^ -1043298708;
            continue;
          case 1:
            int num4 = flag ? 230944634 : (num4 = 333943934);
            num1 = num4 ^ (int) num2 * 612907322;
            continue;
          case 3:
            jsonNode = (JSONNode) null;
            num1 = 1073764070;
            continue;
          case 4:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -1903026369 ^ -579592535;
            continue;
          case 5:
            num1 = (int) num2 * -943200985 ^ 513836523;
            continue;
          case 6:
            if (aIndex < 0)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 287231142 ^ 514299540;
            continue;
          case 7:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 8:
            goto label_1;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = 64547457;
      }
label_13:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode;
      try
      {
label_2:
        int num1 = -2088046921;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1378354788)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 304673036 ^ -1603712044;
              continue;
            case 2:
              goto label_2;
            default:
              goto label_10;
          }
        }
      }
      catch
      {
label_6:
        int num3 = -1242166904;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1378354788)) % 3U)
          {
            case 0:
              goto label_6;
            case 2:
              num3 = (int) num4 * 1190484042 ^ 1359616558;
              continue;
            default:
              goto label_9;
          }
        }
label_9:
        jsonNode = (JSONNode) null;
      }
label_10:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs => (IEnumerable<JSONNode>) new JSONClass.\u003Cget_Childs\u003Ed__14(-2)
    {
      \u003C\u003E4__this = this
    };

    public IEnumerator GetEnumerator()
    {
      bool enumerator1;
      // ISSUE: fault handler
      try
      {
        // ISSUE: reference to a compiler-generated field
        int num1 = this.\u003C\u003E1__state;
label_1:
        int num2 = 76690128;
        Dictionary<string, JSONNode>.Enumerator enumerator;
        KeyValuePair<string, JSONNode> N;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 413282702)) % 23U)
          {
            case 0:
            case 18:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = 649765925;
              continue;
            case 1:
              N = new KeyValuePair<string, JSONNode>();
              num2 = (int) num3 * -517302614 ^ 1240062649;
              continue;
            case 3:
              int num4 = num1 == 0 ? 275160958 : (num4 = 327120009);
              num2 = num4 ^ (int) num3 * 1873252019;
              continue;
            case 4:
              num2 = (int) num3 * 2053393438 ^ 2123410363;
              continue;
            case 5:
              enumerator1 = false;
              num2 = 1954466820;
              continue;
            case 6:
            case 8:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -1;
              enumerator = this.m_Dict.GetEnumerator();
              num2 = 417055404;
              continue;
            case 7:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E2__current = (object) N;
              num2 = (int) num3 * -363075136 ^ 1237306893;
              continue;
            case 9:
              num2 = (int) num3 * 716895696 ^ -350895321;
              continue;
            case 10:
              // ISSUE: reference to a compiler-generated method
              this.\u003C\u003Em__Finally1();
              num2 = (int) num3 * 316621429 ^ 2082734348;
              continue;
            case 11:
              num2 = (int) num3 * -2084030816 ^ -687250377;
              continue;
            case 12:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = (int) num3 * 1668068596 ^ -1238696162;
              continue;
            case 13:
              int num5;
              num2 = num5 = enumerator.MoveNext() ? 14841160 : (num5 = 1995506949);
              continue;
            case 14:
              goto label_18;
            case 15:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = 1;
              num2 = (int) num3 * 1090615716 ^ 1221893858;
              continue;
            case 16:
              N = enumerator.Current;
              num2 = 1166942328;
              continue;
            case 17:
              int num6;
              num2 = num6 = num1 == 1 ? 507942860 : (num6 = 428600945);
              continue;
            case 19:
              enumerator = new Dictionary<string, JSONNode>.Enumerator();
              num2 = (int) num3 * -1108168558 ^ -11151111;
              continue;
            case 20:
              goto label_23;
            case 21:
              goto label_1;
            case 22:
              num2 = (int) num3 * 1302381592 ^ 1556277446;
              continue;
            default:
              goto label_21;
          }
        }
label_18:
        enumerator1 = true;
        goto label_23;
label_21:
        enumerator1 = false;
      }
      __fault
      {
        // ISSUE: reference to a compiler-generated method
        this.System\u002EIDisposable\u002EDispose();
      }
label_23:
      return enumerator1;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1609332303;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1241078064)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = "{";
            num1 = (int) num2 * -1873137743 ^ -1783331085;
            continue;
          case 2:
            num1 = (int) num2 * -1887692737 ^ -1361322555;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_11:
        int num3 = !enumerator.MoveNext() ? -1114137593 : (num3 = -792637632);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1241078064)) % 7U)
          {
            case 0:
              str = JSONClass.\u202E⁬‮⁪‍‍‎⁪‮⁯⁫‭⁬​​⁯‪​⁮‌‭‌‭‫‭⁯⁯‍⁪⁬‫‭‫‍‫‏⁯‫‌‬‮(str, ", ");
              num3 = (int) num4 * 224615653 ^ -2107974804;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -1126988563;
              continue;
            case 2:
              num3 = -792637632;
              continue;
            case 3:
              int num5 = JSONClass.\u206E‮⁪‏‌‫⁪⁫⁬‌⁬​⁯‬‎⁭‬‌⁭⁭‭⁯‪⁮⁭⁭‎‎‍​⁪‮​⁭‌⁫‌⁮‎⁭‮(str) <= 2 ? -1648520090 : (num5 = -2064071510);
              num3 = num5 ^ (int) num4 * -557136370;
              continue;
            case 4:
              goto label_11;
            case 5:
              str = JSONClass.\u200B⁮‌⁪​‪⁯⁫⁭‎⁬‎‌⁭‬‫‏‎⁬⁪⁯‮⁮‌⁯‬‭‎​‌​‎‎‍‮‫⁯‏‍⁫‮(new string[5]
              {
                str,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u202D‌‌⁯‫⁯⁯‭​‬‭⁬‬‏⁬‫‌‏⁭‎‏‪⁬⁭‏‏‍‍‬⁪‬‭‬⁪‪⁯‌‫‎⁫‮((object) current.Value)
              });
              num3 = -667852001;
              continue;
            default:
              goto label_19;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_15:
        int num6 = -1981615843;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -1241078064)) % 3U)
          {
            case 0:
              goto label_15;
            case 1:
              num6 = (int) num7 * 125765949 ^ -1698756093;
              continue;
            default:
              goto label_18;
          }
        }
label_18:;
      }
label_19:
      return JSONClass.\u202E⁬‮⁪‍‍‎⁪‮⁯⁫‭⁬​​⁯‪​⁮‌‭‌‭‫‭⁯⁯‍⁪⁬‫‭‫‍‫‏⁯‫‌‬‮(str, "}");
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = -145516904;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -631030876)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str1 = "{ ";
            num1 = (int) num2 * -1972040908 ^ 796607496;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_8:
        int num3 = !enumerator.MoveNext() ? -1312708861 : (num3 = -319004196);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -631030876)) % 10U)
          {
            case 0:
              num3 = -319004196;
              continue;
            case 1:
              flag = JSONClass.\u206E‮⁪‏‌‫⁪⁫⁬‌⁬​⁯‬‎⁭‬‌⁭⁭‭⁯‪⁮⁭⁭‎‎‍​⁪‮​⁭‌⁫‌⁮‎⁭‮(str1) > 3;
              num3 = (int) num4 * 236421521 ^ -195107979;
              continue;
            case 2:
              str1 = JSONClass.\u202E⁬‮⁪‍‍‎⁪‮⁯⁫‭⁬​​⁯‪​⁮‌‭‌‭‫‭⁯⁯‍⁪⁬‫‭‫‍‫‏⁯‫‌‬‮(str1, ", ");
              num3 = (int) num4 * 361883870 ^ 1431903513;
              continue;
            case 3:
              goto label_8;
            case 4:
              int num5 = flag ? -1476118452 : (num5 = -1811250807);
              num3 = num5 ^ (int) num4 * -1216990266;
              continue;
            case 5:
              str1 = JSONClass.\u200B⁮‌⁪​‪⁯⁫⁭‎⁬‎‌⁭‬‫‏‎⁬⁪⁯‮⁮‌⁯‬‭‎​‌​‎‎‍‮‫⁯‏‍⁫‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u202E⁬‮⁪‍‍‎⁪‮⁯⁫‭⁬​​⁯‪​⁮‌‭‌‭‫‭⁯⁯‍⁪⁬‫‭‫‍‫‏⁯‫‌‬‮(aPrefix, "   "))
              });
              num3 = (int) num4 * 1724854785 ^ 1588736715;
              continue;
            case 6:
              num3 = (int) num4 * -228493429 ^ 413781199;
              continue;
            case 8:
              current = enumerator.Current;
              num3 = -1367529707;
              continue;
            case 9:
              str1 = JSONClass.\u206E⁭⁯‫⁯‪⁮‫‫​⁮‭‏⁭‏‍⁫‏⁮‍‪⁮‫‭​⁭‬​⁮⁭​⁬‎‭⁯​⁫⁫⁮‍‮(str1, "\n", aPrefix, "   ");
              num3 = -49258917;
              continue;
            default:
              goto label_17;
          }
        }
      }
label_17:
      string str2 = JSONClass.\u206E⁭⁯‫⁯‪⁮‫‫​⁮‭‏⁭‏‍⁫‏⁮‍‪⁮‫‭​⁭‬​⁮⁭​⁬‎‭⁯​⁫⁫⁮‍‮(str1, "\n", aPrefix, "}");
label_18:
      int num6 = -46257057;
      string str3;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -631030876)) % 3U)
        {
          case 0:
            goto label_18;
          case 1:
            str3 = str2;
            num6 = (int) num7 * 202081689 ^ 1243429522;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
      JSONClass.\u202B‍⁯‎‏⁬⁪⁯‌⁯‌⁯‫‎‍‎‭‍‌⁪‍⁪‎⁭‌‭‏‏⁯‭⁬‫​‭‬‎‭‏‌‌‮(aWriter, (byte) 2);
label_1:
      int num1 = -856502184;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -418198806)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -2077742892 ^ 34019466;
            continue;
          case 2:
            JSONClass.\u206D‫‏⁭​⁬‮⁮⁪‬‮‪⁮‮‮‮‭‭⁮‮‫‍‪‫‫‭⁫‬⁮⁭‬‏‏‭⁮‎‫‬‏⁮‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * 64872092 ^ -701690145;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator();
      try
      {
label_9:
        int num3 = enumerator.MoveNext() ? -2096713097 : (num3 = -1138881492);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -418198806)) % 6U)
          {
            case 0:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -567319611 ^ 1649189636;
              continue;
            case 1:
              current = enumerator.Current;
              JSONClass.\u206C⁮⁪‍​‏‌​‪​‬⁪​⁪⁭⁫‫‮‎​⁫​⁫⁫⁮‭⁭⁭‪‏‫⁮‪‌​‍‫‌‍‎‮(aWriter, current);
              num3 = -2074752749;
              continue;
            case 2:
              goto label_9;
            case 3:
              num3 = -2096713097;
              continue;
            case 4:
              goto label_17;
            case 5:
              num3 = (int) num4 * 1741220697 ^ 690311583;
              continue;
            default:
              goto label_13;
          }
        }
label_17:
        return;
label_13:;
      }
      finally
      {
        enumerator.Dispose();
label_15:
        int num5 = -794985949;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -418198806)) % 3U)
          {
            case 0:
              goto label_15;
            case 2:
              num5 = (int) num6 * 808626863 ^ 2074561594;
              continue;
            default:
              goto label_19;
          }
        }
label_19:;
      }
    }

    static bool \u206D‭​‫‭⁫‎⁯‮⁫⁯​‬⁬​‮‫‪‭⁪⁪‪​⁬‍‍⁯⁮‌⁪‮‌‎​⁯⁬⁫⁮‏‎‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206E‮⁪‏‌‫⁪⁫⁬‌⁬​⁯‬‎⁭‬‌⁭⁭‭⁯‪⁮⁭⁭‎‎‍​⁪‮​⁭‌⁫‌⁮‎⁭‮([In] string obj0) => obj0.Length;

    static string \u202E⁬‮⁪‍‍‎⁪‮⁯⁫‭⁬​​⁯‪​⁮‌‭‌‭‫‭⁯⁯‍⁪⁬‫‭‫‍‫‏⁯‫‌‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202D‌‌⁯‫⁯⁯‭​‬‭⁬‬‏⁬‫‌‏⁭‎‏‪⁬⁭‏‏‍‍‬⁪‬‭‬⁪‪⁯‌‫‎⁫‮([In] object obj0) => obj0.ToString();

    static string \u200B⁮‌⁪​‪⁯⁫⁭‎⁬‎‌⁭‬‫‏‎⁬⁪⁯‮⁮‌⁯‬‭‎​‌​‎‎‍‮‫⁯‏‍⁫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206E⁭⁯‫⁯‪⁮‫‫​⁮‭‏⁭‏‍⁫‏⁮‍‪⁮‫‭​⁭‬​⁮⁭​⁬‎‭⁯​⁫⁫⁮‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u202B‍⁯‎‏⁬⁪⁯‌⁯‌⁯‫‎‍‎‭‍‌⁪‍⁪‎⁭‌‭‏‏⁯‭⁬‫​‭‬‎‭‏‌‌‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206D‫‏⁭​⁬‮⁮⁪‬‮‪⁮‮‮‮‭‭⁮‮‫‍‪‫‫‭⁫‬⁮⁭‬‏‏‭⁮‎‫‬‏⁮‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u206C⁮⁪‍​‏‌​‪​‬⁪​⁪⁭⁫‫‮‎​⁫​⁫⁫⁮‭⁭⁭‪‏‫⁮‪‌​‍‫‌‍‎‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
