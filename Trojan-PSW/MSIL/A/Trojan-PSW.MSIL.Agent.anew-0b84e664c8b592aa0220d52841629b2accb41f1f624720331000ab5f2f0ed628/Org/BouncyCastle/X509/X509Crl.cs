// Decompiled with JetBrains decompiler
// Type: Org.BouncyCastle.X509.X509Crl
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Utilities.Collections;
using Org.BouncyCastle.Utilities.Date;
using System;

namespace Org.BouncyCastle.X509
{
  internal class X509Crl : X509ExtensionBase
  {
    private readonly CertificateList c;
    private readonly string sigAlgName;
    private readonly byte[] sigAlgParams;
    private readonly bool isIndirect;
    private volatile bool hashValueSet;
    private volatile int hashValue;
    public X509Crl(CertificateList c);
    protected new override X509Extensions GetX509Extensions();
    public virtual byte[] GetEncoded();
    public virtual void Verify(AsymmetricKeyParameter publicKey);
    public virtual void Verify(IVerifierFactoryProvider verifierProvider);
    protected virtual void CheckSignature(IVerifierFactory verifier);
    public virtual int Version { get; }
    public virtual X509Name IssuerDN { get; }
    public virtual DateTime ThisUpdate { get; }
    public virtual DateTimeObject NextUpdate { get; }
    private ISet LoadCrlEntries();
    public virtual X509CrlEntry GetRevokedCertificate(BigInteger serialNumber);
    public virtual ISet GetRevokedCertificates();
    public virtual byte[] GetTbsCertList();
    public virtual byte[] GetSignature();
    public virtual string SigAlgName { get; }
    public virtual string SigAlgOid { get; }
    public virtual byte[] GetSigAlgParams();
    public override bool Equals(object other);
    public override int GetHashCode();
    public override string ToString();
    public virtual bool IsRevoked(X509Certificate cert);
    protected virtual bool IsIndirectCrl { get; }
  }
}
