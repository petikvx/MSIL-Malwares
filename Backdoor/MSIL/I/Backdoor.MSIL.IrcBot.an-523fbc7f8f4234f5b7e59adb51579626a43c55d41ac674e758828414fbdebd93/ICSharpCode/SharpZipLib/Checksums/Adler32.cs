// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Checksums.Adler32
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;

namespace ICSharpCode.SharpZipLib.Checksums
{
  public sealed class Adler32 : IChecksum
  {
    private const uint \uE001 = 65521;
    private uint \uE000;

    public long Value => (long) this.\uE000;

    public Adler32() => this.Reset();

    public void Reset() => this.\uE000 = 1U;

    public void Update(int value)
    {
      uint num1 = this.\uE000 & (uint) ushort.MaxValue;
      uint num2 = this.\uE000 >> 16;
      uint num3 = (num1 + (uint) (value & (int) byte.MaxValue)) % 65521U;
      this.\uE000 = ((num3 + num2) % 65521U << 16) + num3;
    }

    public void Update(byte[] buffer)
    {
      if (buffer == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEDC8\uEDDF\uEDCC\uEDCC\uEDCF\uEDD8", 60842));
      this.Update(buffer, 0, buffer.Length);
    }

    public void Update(byte[] buffer, int offset, int count)
    {
      if (buffer == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEDC8\uEDDF\uEDCC\uEDCC\uEDCF\uEDD8", 60842));
      if (offset < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uF201\uF208\uF208\uF21D\uF20B\uF21A", 62062), \uE01B.\uE000("\uF8E6\uF8E4\uF8EB\uF8EB\uF8EA\uF8F1\uF8A5\uF8E7\uF8E0\uF8A5\uF8EB\uF8E0\uF8E2\uF8E4\uF8F1\uF8EC\uF8F3\uF8E0", 63621));
      if (count < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uED5B\uED57\uED4D\uED56\uED4C", 60728), \uE01B.\uE000("\uF8E6\uF8E4\uF8EB\uF8EB\uF8EA\uF8F1\uF8A5\uF8E7\uF8E0\uF8A5\uF8EB\uF8E0\uF8E2\uF8E4\uF8F1\uF8EC\uF8F3\uF8E0", 63621));
      if (offset >= buffer.Length)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uF201\uF208\uF208\uF21D\uF20B\uF21A", 62062), \uE01B.\uE000("\uE445\uE444\uE45F\uE40B\uE44A\uE40B\uE45D\uE44A\uE447\uE442\uE44F\uE40B\uE442\uE445\uE44F\uE44E\uE453\uE40B\uE442\uE445\uE45F\uE444\uE40B\uE449\uE45E\uE44D\uE44D\uE44E\uE459", 58411));
      if (offset + count > buffer.Length)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uED5B\uED57\uED4D\uED56\uED4C", 60728), \uE01B.\uE000("\uE01D\uE000\uE01B\uE01D\uE01D\uE01C\uE00B\uE058\uE01A\uE00D\uE01E\uE01E\uE01D\uE00A\uE058\uE00B\uE011\uE002\uE01D", 57464));
      uint num1 = this.\uE000 & (uint) ushort.MaxValue;
      uint num2 = this.\uE000 >> 16;
      while (count > 0)
      {
        int num3 = 3800;
        if (num3 > count)
          num3 = count;
        count -= num3;
        while (--num3 >= 0)
        {
          num1 += (uint) buffer[offset++] & (uint) byte.MaxValue;
          num2 += num1;
        }
        num1 %= 65521U;
        num2 %= 65521U;
      }
      this.\uE000 = num2 << 16 | num1;
    }
  }
}
