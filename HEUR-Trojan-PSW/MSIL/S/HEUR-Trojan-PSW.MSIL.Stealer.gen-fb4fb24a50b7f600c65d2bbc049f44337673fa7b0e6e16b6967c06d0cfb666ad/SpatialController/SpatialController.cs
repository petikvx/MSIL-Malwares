// Decompiled with JetBrains decompiler
// Type: SpatialController.SpatialController
// Assembly: Rea, Version=1.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 014AEBFB-7EE8-4B39-A7D6-AE7A18313427
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-fb4fb24a50b7f600c65d2bbc049f44337673fa7b0e6e16b6967c06d0cfb666ad.exe

using OpenNI;
using SpeechLib;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Speech.Synthesis;
using System.Threading;
using System.Windows.Media.Media3D;

namespace SpatialController
{
  internal class SpatialController
  {
    public const string CALIBRATION_DATA_FILE = "calibration.txt";
    private const int CALIBRATION_SEC = 9;
    private const int CALIBRATION_OFFSET_SEC = 4;
    private const int STEADY_SEC = 3;
    private const int SEC_FOR_RELOCATION = 5;
    private const int SEC_BETWEEN_CALIBRATIONS = 2;
    private const int SAMPLES_PER_SEC = 4;
    private const double MAX_DIMMING_HAND_OFFSET_Y = 150.0;
    private const double TOTAL_DIMMING_DISTANCE = 400.0;
    private bool calibrated;
    private UserGenerator userGenerator;
    private Device[] devices;
    private object animationLock;
    private Ray3D[] raysToBeAnimated;
    private SpeechSynthesizer synth;
    private SpSharedRecoContext objRecoContext = (SpSharedRecoContext) null;
    private ISpeechRecoGrammar grammar = (ISpeechRecoGrammar) null;
    private ISpeechGrammarRule menuRule = (ISpeechGrammarRule) null;
    private bool dimmingDown;
    private bool dimmingUp;
    private double dimmingStartY;

    public event RecalibrateEventHandler RecalibrateCommand;

    public Ray3D[] RaysToBeAnimated
    {
      get
      {
        lock (this.animationLock)
          return this.raysToBeAnimated;
      }
    }

    public SpatialController(ControllerStartup startupType, UserGenerator userGenerator)
    {
      this.raysToBeAnimated = new Ray3D[2];
      this.userGenerator = userGenerator;
      this.animationLock = new object();
      this.calibrated = false;
      this.devices = new Device[Device.getNodes().Count];
      for (int index = 0; index < this.devices.Length; ++index)
        this.devices[index] = this.devices[index];
      this.synth = new SpeechSynthesizer();
      this.synth.SelectVoice("Microsoft Anna");
      this.SpeakAndWriteToPrompt("Starting SpatialController!");
      switch (startupType)
      {
        case ControllerStartup.FromFile:
          this.calibrated = true;
          this.initFromFile();
          break;
      }
      this.dimmingDown = false;
      this.dimmingUp = false;
      this.dimmingStartY = -1000.0;
      this.VoiceCalibration();
    }

    private void calibrate(int user)
    {
      List<byte> nodes = Device.getNodes();
      Ray3D[] ray3DArray = new Ray3D[nodes.Count];
      Device.turnOffAll();
      this.SpeakAndWriteToPrompt("Please stand about 10 feet away from the kinect on the right side of the field of view, but leave room for pointing off to the right.");
      this.SpeakAndWriteToPrompt("When a light turns on, please point to it until it turns off.");
      for (int index = 0; index < nodes.Count; ++index)
        ray3DArray[index] = this.calibrateDeviceOnePosition(user, nodes[index]);
      this.SpeakAndWriteToPrompt("Please stand about 5 feet away from the kinect on the left side of the field of view, but leave room for pointing off to the left.");
      this.SpeakAndWriteToPrompt("Once again, when a light turns on, please point to it until it turns off.");
      for (int index = 0; index < nodes.Count; ++index)
        this.devices[index] = new Device(ray3DArray[index].intersectionWith(this.calibrateDeviceOnePosition(user, nodes[index])), nodes[index]);
      this.saveCalibrationToFile(this.devices);
      this.calibrated = true;
      this.SpeakAndWriteToPrompt("Calibration has been completed. After a few seconds, you should be able to point to lights to turn them on!");
    }

    private void SpeakAndWriteToPrompt(string s)
    {
      UserPrompt.Write(s);
      this.synth.Speak(s);
    }

    private Ray3D calibrateDeviceOnePosition(int user, byte device)
    {
      UserPrompt.Write("Turning on device " + device.ToString());
      Device.turnOn(device);
      Thread.Sleep(4000);
      Vector3D[] source1 = new Vector3D[12];
      Vector3D[] source2 = new Vector3D[12];
      SkeletonJointPosition skeletonJointPosition1 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition2 = new SkeletonJointPosition();
      for (int index1 = 0; index1 < 12; ++index1)
      {
        SkeletonJointPosition skeletonJointPosition3 = this.userGenerator.SkeletonCapability.GetSkeletonJointPosition(user, (SkeletonJoint) 1);
        SkeletonJointPosition skeletonJointPosition4 = this.userGenerator.SkeletonCapability.GetSkeletonJointPosition(user, (SkeletonJoint) 15);
        Vector3D[] vector3DArray1 = source1;
        int index2 = index1;
        Point3D position = ((SkeletonJointPosition) ref skeletonJointPosition3).Position;
        double x1 = (double) ((Point3D) ref position).X;
        position = ((SkeletonJointPosition) ref skeletonJointPosition3).Position;
        double y1 = (double) ((Point3D) ref position).Y;
        position = ((SkeletonJointPosition) ref skeletonJointPosition3).Position;
        double z1 = (double) ((Point3D) ref position).Z;
        Vector3D vector3D1 = new Vector3D(x1, y1, z1);
        vector3DArray1[index2] = vector3D1;
        Vector3D[] vector3DArray2 = source2;
        int index3 = index1;
        position = ((SkeletonJointPosition) ref skeletonJointPosition4).Position;
        double x2 = (double) ((Point3D) ref position).X;
        position = ((SkeletonJointPosition) ref skeletonJointPosition4).Position;
        double y2 = (double) ((Point3D) ref position).Y;
        position = ((SkeletonJointPosition) ref skeletonJointPosition4).Position;
        double z2 = (double) ((Point3D) ref position).Z;
        Vector3D vector3D2 = new Vector3D(x2, y2, z2);
        vector3DArray2[index3] = vector3D2;
      }
      Thread.Sleep(2000);
      Vector3D point0 = new Vector3D(((IEnumerable<Vector3D>) source1).Average<Vector3D>((Func<Vector3D, double>) (x => x.X)), ((IEnumerable<Vector3D>) source1).Average<Vector3D>((Func<Vector3D, double>) (x => x.Y)), ((IEnumerable<Vector3D>) source1).Average<Vector3D>((Func<Vector3D, double>) (x => x.Z)));
      Vector3D point1 = new Vector3D(((IEnumerable<Vector3D>) source2).Average<Vector3D>((Func<Vector3D, double>) (x => x.X)), ((IEnumerable<Vector3D>) source2).Average<Vector3D>((Func<Vector3D, double>) (x => x.Y)), ((IEnumerable<Vector3D>) source2).Average<Vector3D>((Func<Vector3D, double>) (x => x.Z)));
      UserPrompt.Write("Turning off device " + device.ToString());
      Device.turnOff(device);
      return new Ray3D(point0, point1);
    }

    private void saveCalibrationToFile(Device[] devices)
    {
      TextWriter textWriter = (TextWriter) new StreamWriter("calibration.txt");
      for (int index = 0; index < devices.Length; ++index)
      {
        textWriter.WriteLine((int) devices[index].deviceId);
        textWriter.WriteLine(devices[index].position.X);
        textWriter.WriteLine(devices[index].position.Y);
        textWriter.WriteLine(devices[index].position.Z);
      }
      textWriter.Close();
    }

    private void initFromFile()
    {
      TextReader textReader = (TextReader) new StreamReader("calibration.txt");
      List<byte> nodes = Device.getNodes();
      int index = 0;
      while (textReader.Peek() > -1)
      {
        byte deviceId = Convert.ToByte(textReader.ReadLine());
        if (!nodes.Contains(deviceId))
        {
          this.calibrated = false;
          return;
        }
        this.devices[index] = new Device(new Vector3D(Convert.ToDouble(textReader.ReadLine()), Convert.ToDouble(textReader.ReadLine()), Convert.ToDouble(textReader.ReadLine())), deviceId);
        ++index;
      }
      textReader.Close();
    }

    public void checkGestures()
    {
      Console.Write("Called checkGestures().");
      foreach (int user in this.userGenerator.GetUsers())
      {
        if (this.userGenerator.SkeletonCapability.IsTracking(user))
        {
          if (!this.calibrated)
          {
            this.calibrate(user);
            break;
          }
          this.checkUserGestures(user);
        }
        else
        {
          for (int index = 0; index < this.raysToBeAnimated.Length; ++index)
            this.raysToBeAnimated[index] = (Ray3D) null;
        }
      }
    }

    private void checkUserGestures(int id)
    {
      SkeletonJointPosition skeletonJointPosition1 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition2 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition3 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition4 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition5 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition6 = this.userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 1);
      SkeletonJointPosition skeletonJointPosition7 = this.userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 9);
      SkeletonJointPosition skeletonJointPosition8 = this.userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 15);
      SkeletonJointPosition skeletonJointPosition9 = this.userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 6);
      SkeletonJointPosition skeletonJointPosition10 = this.userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 12);
      Point3D position1 = ((SkeletonJointPosition) ref skeletonJointPosition6).Position;
      Point3D position2 = ((SkeletonJointPosition) ref skeletonJointPosition7).Position;
      Point3D position3 = ((SkeletonJointPosition) ref skeletonJointPosition8).Position;
      Ray3D ray3D1 = new Ray3D((double) ((Point3D) ref position1).X, (double) ((Point3D) ref position1).Y, (double) ((Point3D) ref position1).Z, (double) ((Point3D) ref position2).X, (double) ((Point3D) ref position2).Y, (double) ((Point3D) ref position2).Z);
      Ray3D ray3D2 = new Ray3D((double) ((Point3D) ref position1).X, (double) ((Point3D) ref position1).Y, (double) ((Point3D) ref position1).Z, (double) ((Point3D) ref position3).X, (double) ((Point3D) ref position3).Y, (double) ((Point3D) ref position3).Z);
      lock (this.animationLock)
      {
        this.raysToBeAnimated[0] = ray3D1;
        this.raysToBeAnimated[1] = ray3D2;
      }
      Console.Write("Left vector: " + ray3D1?.ToString());
      Console.Write("Right vector: " + ray3D2?.ToString());
      if (this.VerticallyClose(position2, position3))
      {
        if (this.FirstAboveSecond(position2, position1) && this.FirstAboveSecond(position3, position1))
        {
          Console.Write("Beginning dim down!");
          this.dimmingDown = true;
          this.dimmingStartY = (double) ((Point3D) ref position2).Y;
        }
        else if (this.dimmingDown)
        {
          int percent = (int) ((this.dimmingStartY - (double) ((Point3D) ref position2).Y) / 400.0);
          if (percent < 0)
            percent = 0;
          else if (percent > 100)
            percent = 100;
          Device.dimAllToPercent(percent);
        }
        else if (this.VerticallyClose(position2, ((SkeletonJointPosition) ref skeletonJointPosition9).Position) && this.VerticallyClose(((SkeletonJointPosition) ref skeletonJointPosition9).Position, ((SkeletonJointPosition) ref skeletonJointPosition10).Position) && this.VerticallyClose(((SkeletonJointPosition) ref skeletonJointPosition10).Position, position3))
        {
          Console.Write("Beginning dim up!");
          this.dimmingUp = true;
          this.dimmingStartY = (double) ((Point3D) ref position2).Y;
        }
        else if (this.dimmingUp)
        {
          int percent = (int) (((double) ((Point3D) ref position2).Y - this.dimmingStartY) / 400.0);
          if (percent < 0)
            percent = 0;
          else if (percent > 100)
            percent = 100;
          Device.dimAllToPercent(percent);
        }
      }
      else
      {
        this.dimmingDown = false;
        this.dimmingUp = false;
      }
      if (!this.dimmingUp && !this.dimmingDown)
      {
        foreach (Device device in this.devices)
        {
          if (ray3D1.closeTo(device.position) || ray3D2.closeTo(device.position))
            device.isInFocus();
        }
      }
      Console.Write("=============================");
    }

    private bool VerticallyClose(Point3D p0, Point3D p1) => (double) Math.Abs(((Point3D) ref p0).Y - ((Point3D) ref p1).Y) < 150.0;

    private bool FirstAboveSecond(Point3D p0, Point3D p1) => (double) ((Point3D) ref p0).Y - (double) ((Point3D) ref p1).Y > 0.0;

    private void Reco_Event(
      int StreamNumber,
      object StreamPosition,
      SpeechRecognitionType RecognitionType,
      ISpeechRecoResult Result)
    {
      // ISSUE: reference to a compiler-generated method
      string text = Result.PhraseInfo.GetText();
      this.synth.Speak("Recognition: " + text);
      this.DoActionFromVoiceCommand(text);
    }

    private void Hypo_Event(int StreamNumber, object StreamPosition, ISpeechRecoResult Result) => this.synth.Speak("Hypothesis: " + Result.PhraseInfo.GetText());

    private void DoActionFromVoiceCommand(string command)
    {
      command = command.ToLower();
      if (command.Contains("light "))
      {
        int index = -1;
        if (command.Contains("first"))
          index = 1;
        else if (command.Contains("second"))
          index = 2;
        else if (command.Contains("third"))
          index = 3;
        if (index <= 0 || this.devices.Length >= index)
          return;
        if (command.Contains("on"))
          Device.turnOn(this.devices[index].deviceId);
        else if (command.Contains("off"))
          Device.turnOff(this.devices[index].deviceId);
      }
      else if (command.Contains("all lights"))
      {
        if (command.Contains("on"))
        {
          Device.turnOnAll();
        }
        else
        {
          if (!command.Contains("off"))
            return;
          Device.turnOffAll();
        }
      }
      else
      {
        if (!command.Contains("recalibrate") || this.RecalibrateCommand == null)
          return;
        this.RecalibrateCommand((object) this, EventArgs.Empty);
      }
    }

    private void VoiceCalibration()
    {
      this.objRecoContext = (SpSharedRecoContext) Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("47206204-5ECA-11D2-960F-00C04F8EE628")));
      // ISSUE: method pointer
      // ISSUE: object of a compiler-generated type is created
      new ComAwareEventInfo(typeof (_ISpeechRecoContextEvents_Event), "Hypothesis").AddEventHandler((object) this.objRecoContext, (Delegate) new _ISpeechRecoContextEvents_HypothesisEventHandler((object) this, (UIntPtr) __methodptr(Hypo_Event)));
      // ISSUE: method pointer
      // ISSUE: object of a compiler-generated type is created
      new ComAwareEventInfo(typeof (_ISpeechRecoContextEvents_Event), "Recognition").AddEventHandler((object) this.objRecoContext, (Delegate) new _ISpeechRecoContextEvents_RecognitionEventHandler((object) this, (UIntPtr) __methodptr(Reco_Event)));
      // ISSUE: reference to a compiler-generated method
      this.grammar = this.objRecoContext.CreateGrammar();
      // ISSUE: reference to a compiler-generated method
      this.menuRule = this.grammar.Rules.Add("MenuCommands", SpeechRuleAttributes.SRATopLevel | SpeechRuleAttributes.SRADynamic, 1);
      object obj = (object) "";
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "Cancel", PropertyName: "Cancel", PropertyId: 1, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "Yes", PropertyName: "Yes", PropertyId: 2, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "No", PropertyName: "No", PropertyId: 3, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "All Lights Off", PropertyName: "All Lights Off", PropertyId: 4, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "All Lights On", PropertyName: "All Lights On", PropertyId: 5, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "First Light On", PropertyName: "First Light On", PropertyId: 6, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "Second Light On", PropertyName: "Second Light On", PropertyId: 7, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "Third Light On", PropertyName: "Third Light On", PropertyId: 8, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "First Light Off", PropertyName: "First Light Off", PropertyId: 9, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "Second Light Off", PropertyName: "Second Light Off", PropertyId: 10, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "Third Light Off", PropertyName: "Third Light Off", PropertyId: 11, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.menuRule.InitialState.AddWordTransition((ISpeechGrammarRuleState) null, "Recalibrate", PropertyName: "Recalibrate", PropertyId: 12, PropertyValue: (ref obj));
      // ISSUE: reference to a compiler-generated method
      this.grammar.Rules.Commit();
      // ISSUE: reference to a compiler-generated method
      this.grammar.CmdSetRuleState("MenuCommands", SpeechRuleState.SGDSActive);
    }
  }
}
