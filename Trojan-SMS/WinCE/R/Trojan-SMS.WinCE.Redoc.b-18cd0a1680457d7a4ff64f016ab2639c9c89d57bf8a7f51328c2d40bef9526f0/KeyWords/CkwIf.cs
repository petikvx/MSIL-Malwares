// Decompiled with JetBrains decompiler
// Type: Dbasic.KeyWords.CkwIf
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using System;

namespace Dbasic.KeyWords
{
  public class CkwIf : CkeyWords
  {
    public CkwIf(CRunner CRunner)
      : base(CRunner)
    {
    }

    public override MethodReturn Method(Place place, ref Locals locals)
    {
      if (this.CRunner.GetWord(place.LineI, 1).sugMila == Word.SugMila.Klali)
      {
        ++place.WordI;
        if (this.CRunner.Condition(ref place, ref locals))
        {
          place.WordI = this.CRunner.GetWord(place.LineI, 1).Level;
          place = this.CRunner.RunCode(place, true, true, ref locals).place;
          place.WordI = -1;
          ++place.LineI;
        }
        else
        {
          int num = -this.CRunner.GetWord(place.LineI, 1).KeyWord;
          if (num > 0)
          {
            place.WordI = num;
            place = this.CRunner.RunCode(place, true, true, ref locals).place;
          }
          else
          {
            ++place.LineI;
            place.WordI = -1;
          }
        }
        return new MethodReturn(place);
      }
      int level = this.CRunner.GetWord(place.LineI, place.WordI).Level;
      int alGotoWord1 = (int) this.CRunner.alGotoWords[level];
      bool flag1 = this.CRunner.Condition(ref place, ref locals);
      ++place.WordI;
      if (flag1)
      {
        place.WordI = -1;
        ++place.LineI;
        RunReturn runReturn = this.CRunner.RunCode(place, true, false, ref locals);
        place = (Place) this.CRunner.alGotoWords[level + alGotoWord1];
        if (runReturn.word.sugMila != Word.SugMila.Klali && !this.CRunner.blnExitFlag && !this.CRunner.blnReturnFlag)
          this.CRunner.ThrowError("Syntax error.", runReturn.place.LineI);
        return new MethodReturn(place);
      }
      int num1 = 1;
      while (num1 < alGotoWord1)
      {
        string alGotoWord2 = (string) this.CRunner.alGotoWords[level + num1];
        place = (Place) this.CRunner.alGotoWords[level + num1 + 1];
        num1 += 2;
        switch (alGotoWord2)
        {
          case "else if":
            bool flag2 = this.CRunner.Condition(ref place, ref locals);
            place.WordI = -1;
            ++place.LineI;
            if (!flag2)
              continue;
            goto case "else";
          case "else":
            RunReturn runReturn = this.CRunner.RunCode(place, true, false, ref locals);
            place = (Place) this.CRunner.alGotoWords[level + alGotoWord1];
            if (runReturn.word.sugMila != Word.SugMila.Klali && !this.CRunner.blnExitFlag && !this.CRunner.blnReturnFlag)
              this.CRunner.ThrowError("Syntax error.", runReturn.place.LineI);
            return new MethodReturn(place);
          case "end if":
            return new MethodReturn(place);
          default:
            throw new Exception("Syntax error.");
        }
      }
      return new MethodReturn(place);
    }
  }
}
