// Decompiled with JetBrains decompiler
// Type: _7Wonders.MasterForm
// Assembly: No, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A0F00D95-9767-4554-B865-5A1BEBFA378F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan.MSIL.Taskun.am-5fabf5c9fcceb520d7023eaf53122959f42bdb4b1c82bc916baa4bbb94f787ae.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace _7Wonders
{
  public class MasterForm : Form
  {
    public GameMaster master;
    private Playerboard[] boards;
    private int currentPlayer;
    public ResultForm Neighbourhood;
    private int phase;
    private int phaseCounter;
    private int age;
    private int nP;
    private int[] score;
    public bool lastCard;
    private IContainer components = (IContainer) null;
    private Button button1;
    private Label label1;

    public MasterForm(GameMaster m)
    {
      this.master = m;
      this.currentPlayer = 0;
      this.phaseCounter = 0;
      this.age = 1;
      this.nP = this.master.nPlayers;
      this.lastCard = false;
      this.InitializeComponent();
      this.boards = new Playerboard[this.nP];
      this.score = new int[this.nP];
      this.phase = this.master.version < 1 ? 2 : 0;
      for (int index = 0; index < this.nP; ++index)
      {
        this.score[index] = 0;
        this.boards[index] = new Playerboard(this, this.master.Players[index]);
        this.master.Players[index].board = this.boards[index];
        this.boards[index].Hide();
      }
      this.label1.Text = this.master.Players[this.currentPlayer].wonder;
      this.Neighbourhood = new ResultForm(this, "Neighborhood");
      this.Neighbourhood.Show();
    }

    public void nextPlayer()
    {
      ++this.currentPlayer;
      this.currentPlayer %= this.nP;
      this.label1.Text = this.master.Players[this.currentPlayer].wonder;
      bool flag = false;
      if (this.currentPlayer == 0)
      {
        int index;
        for (index = 0; index < this.nP; ++index)
        {
          if (this.master.Players[index].decisions[4] > 0)
          {
            flag = true;
            break;
          }
          if (this.master.Players[index].rome)
          {
            flag = true;
            break;
          }
        }
        if (flag)
        {
          new DecisionForm(this.master.Players[index], this.master, this).Show();
        }
        else
        {
          this.Show();
          this.endOfHand();
        }
      }
      else
        this.Show();
    }

    public void AfterHalikarnassos()
    {
      bool flag = false;
      int index;
      for (index = 0; index < this.nP; ++index)
      {
        if (this.master.Players[index].decisions[4] > 0)
        {
          flag = true;
          break;
        }
        if (this.master.Players[index].rome)
        {
          flag = true;
          break;
        }
      }
      if (flag)
      {
        new DecisionForm(this.master.Players[index], this.master, this).Show();
      }
      else
      {
        this.endOfHand();
        this.Show();
      }
    }

    private void endOfHand()
    {
      if (this.phase == 0)
      {
        ++this.phaseCounter;
        if (this.phaseCounter < 4)
        {
          this.SendHands();
        }
        else
        {
          for (int index = 0; index < this.nP; ++index)
            this.master.Players[index].leaderHand = this.master.Players[index].tempLeaderHand;
          ++this.phase;
          this.phaseCounter = 0;
        }
      }
      else if (this.phase == 1)
      {
        ++this.phase;
      }
      else
      {
        if (this.phase != 2)
          return;
        int num = this.master.version != 2 ? 7 : 8;
        if (this.phaseCounter < num - 2)
        {
          if (this.phaseCounter == num - 3)
            this.lastCard = true;
          ++this.phaseCounter;
          for (int index = 0; index < this.nP; ++index)
          {
            if (this.master.Players[index].haveLeader[6] && this.master.Players[index].berenice2)
              ++this.master.Players[index].resources[0];
            this.master.Players[index].berenice2 = false;
            this.master.Players[(index + this.nP - 1) % this.nP].resources[0] += this.master.Players[index].moneyEast;
            this.master.Players[(index + 1) % this.nP].resources[0] += this.master.Players[index].moneyWest;
            this.master.Players[index].resources[0] -= this.master.Players[index].moneyEast + this.master.Players[index].moneyWest;
            this.master.Players[index].moneyEast = 0;
            this.master.Players[index].moneyWest = 0;
            this.master.Players[index].resources[0] -= this.master.Players[index].imminentLoss;
            this.master.Players[index].imminentLoss = 0;
            if (this.master.Players[index].resources[0] < 0)
            {
              this.master.Players[index].debt -= this.master.Players[index].resources[0];
              this.master.Players[index].resources[0] = 0;
            }
          }
          this.SendHands();
        }
        else
        {
          this.lastCard = false;
          this.WarResolution();
          if (this.age < 3)
          {
            if (this.master.version > 0)
              --this.phase;
            this.phaseCounter = 0;
            int length = 7;
            if (this.master.version >= 2)
              length = 8;
            for (int index = 0; index < this.nP; ++index)
              this.master.Players[index].hand = new Card[length];
            for (int index1 = 0; index1 < length; ++index1)
            {
              for (int index2 = 0; index2 < this.nP; ++index2)
                this.master.Players[index2].dealCard(this.master.AgeDecks[this.age][index1 * this.nP + index2], index1);
            }
            for (int index = 0; index < this.nP; ++index)
              this.master.Players[index].haveLeader[8] = true;
            ++this.age;
          }
          else
          {
            this.Hide();
            this.scoring1();
          }
        }
        if (!this.Neighbourhood.IsDisposed)
          this.Neighbourhood.neighbourUpdate();
      }
    }

    private void SendHands()
    {
      if (this.phase == 0)
      {
        Card[] leaderHand = this.master.Players[0].leaderHand;
        for (int index = 0; index < this.nP - 1; ++index)
          this.master.Players[index].leaderHand = this.master.Players[index + 1].leaderHand;
        this.master.Players[this.master.nPlayers - 1].leaderHand = leaderHand;
      }
      else if (this.age % 2 == 0)
      {
        Card[] hand = this.master.Players[0].hand;
        for (int index = 0; index < this.nP - 1; ++index)
          this.master.Players[index].hand = this.master.Players[index + 1].hand;
        this.master.Players[this.nP - 1].hand = hand;
      }
      else
      {
        Card[] hand = this.master.Players[this.nP - 1].hand;
        for (int index = this.nP - 1; index > 0; --index)
          this.master.Players[index].hand = this.master.Players[index - 1].hand;
        this.master.Players[0].hand = hand;
      }
    }

    public void AddDiscard(Card aCard)
    {
    }

    private void WarResolution()
    {
      int nPlayers = this.master.nPlayers;
      int[] numArray1 = new int[nPlayers];
      int index1 = 0;
      for (int index2 = 0; index2 < nPlayers; ++index2)
      {
        if (this.master.Players[index2].diplomacy > 0)
        {
          --this.master.Players[index2].diplomacy;
        }
        else
        {
          numArray1[index1] = index2;
          ++index1;
        }
      }
      int num = index1;
      if (index1 == 2)
        num = 1;
      if (index1 == 1)
        num = 0;
      int[] numArray2 = new int[nPlayers];
      int[] numArray3 = new int[nPlayers];
      for (int index3 = 0; index3 < nPlayers; ++index3)
      {
        numArray2[index3] = 0;
        numArray3[index3] = 0;
      }
      for (int index4 = 0; index4 < num; ++index4)
      {
        if (this.master.Players[numArray1[index4]].militaryStrength < this.master.Players[numArray1[(index4 + 1) % index1]].militaryStrength)
        {
          ++numArray2[numArray1[(index4 + 1) % index1]];
          ++numArray3[numArray1[index4]];
          ++this.master.Players[numArray1[(index4 + 1) % index1]].wins;
          this.master.Players[numArray1[(index4 + 1) % index1]].winScore += 2 * this.age - 1;
          if (this.master.Players[numArray1[index4]].haveLeader[1])
          {
            ++this.master.Players[numArray1[(index4 + 1) % index1]].losses;
            --this.master.Players[numArray1[(index4 + 1) % index1]].winScore;
          }
          else
          {
            ++this.master.Players[numArray1[index4]].losses;
            --this.master.Players[numArray1[index4]].winScore;
          }
        }
        else if (this.master.Players[numArray1[index4]].militaryStrength > this.master.Players[numArray1[(index4 + 1) % index1]].militaryStrength)
        {
          ++numArray3[numArray1[(index4 + 1) % index1]];
          ++numArray2[numArray1[index4]];
          ++this.master.Players[numArray1[index4]].wins;
          this.master.Players[numArray1[index4]].winScore += 2 * this.age - 1;
          if (this.master.Players[numArray1[(index4 + 1) % index1]].haveLeader[1])
          {
            ++this.master.Players[numArray1[index4]].losses;
            --this.master.Players[numArray1[index4]].winScore;
          }
          else
          {
            ++this.master.Players[numArray1[(index4 + 1) % index1]].losses;
            --this.master.Players[numArray1[(index4 + 1) % index1]].winScore;
          }
        }
      }
      for (int index5 = 0; index5 < nPlayers; ++index5)
      {
        if (this.master.Players[index5].haveLeader[3] && numArray2[index5] > 0)
        {
          this.master.Players[index5].resources[0] += 2 * numArray2[index5];
          if (this.master.Players[index5].haveLeader[6])
            ++this.master.Players[index5].resources[0];
        }
        if (this.master.Players[index5].haveLeader[9])
          this.master.Players[index5].militaryStrength += numArray3[index5];
      }
    }

    private void scoring1()
    {
      for (int index1 = 0; index1 < this.nP; ++index1)
      {
        Player player = this.master.Players[index1];
        int[] totalScore = player.totalScore;
        totalScore[0] += player.winScore;
        totalScore[1] += player.resources[0] / 3 - player.debt;
        for (int index2 = 0; index2 < 5; ++index2)
        {
          if (player.builtCards[index2].scoring != 0)
            CardEffects.scoreEffects(player.builtCards[index2].scoring, player, this.master, player.builtCards[index2]);
        }
      }
      bool flag = false;
      int index = 0;
      while (index < this.nP)
        ++index;
      if (flag)
        new DecisionForm(this.master.Players[index], this.master, this).Show();
      else
        this.scoring2();
    }

    public void AfterDecision()
    {
      bool flag = false;
      int index = 0;
      while (index < this.nP)
        ++index;
      if (flag)
        new DecisionForm(this.master.Players[index], this.master, this).Show();
      else
        this.scoring2();
    }

    private void scoring2()
    {
      for (int index = 0; index < this.nP; ++index)
      {
        Player player = this.master.Players[index];
        int[] totalScore = player.totalScore;
        totalScore[5] += player.sciences[0] * player.sciences[0] + player.sciences[1] * player.sciences[1] + player.sciences[2] * player.sciences[2];
        int num = 10;
        if (num > player.sciences[0])
          num = player.sciences[0];
        if (num > player.sciences[1])
          num = player.sciences[1];
        if (num > player.sciences[2])
          num = player.sciences[2];
        totalScore[5] += num * player.scienceSetScore;
      }
      new ResultForm(this, "Result").Show();
      this.button1.Text = "Restart";
      this.label1.Text = "or Quit";
      this.Show();
    }

    private void button1_Click(object sender, EventArgs e)
    {
      if (this.button1.Text == "Restart")
      {
        this.master.restart = true;
        this.Close();
      }
      else
      {
        this.Hide();
        if (this.boards[this.currentPlayer].IsDisposed)
        {
          this.boards[this.currentPlayer] = new Playerboard(this, this.master.Players[this.currentPlayer]);
          this.master.Players[this.currentPlayer].board = this.boards[this.currentPlayer];
        }
        this.boards[this.currentPlayer].phase = this.phase;
        if (this.phase < 2)
          this.boards[this.currentPlayer].showLeaderHand();
        else
          this.boards[this.currentPlayer].showHand();
        this.boards[this.currentPlayer].UpdateGold();
        this.boards[this.currentPlayer].DisplayMessage("");
        this.boards[this.currentPlayer].Show();
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.button1 = new Button();
      this.label1 = new Label();
      this.SuspendLayout();
      this.button1.Location = new Point(12, 12);
      this.button1.Name = "button1";
      this.button1.Size = new Size(75, 23);
      this.button1.TabIndex = 0;
      this.button1.Text = "Next Player";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.button1_Click);
      this.label1.AutoSize = true;
      this.label1.Location = new Point(93, 17);
      this.label1.Name = "label1";
      this.label1.Size = new Size(35, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "label1";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(209, 50);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.button1);
      this.Name = nameof (MasterForm);
      this.Text = nameof (MasterForm);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
