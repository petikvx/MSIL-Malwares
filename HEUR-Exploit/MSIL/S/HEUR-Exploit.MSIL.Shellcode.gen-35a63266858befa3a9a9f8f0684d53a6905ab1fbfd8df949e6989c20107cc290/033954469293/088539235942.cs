// Decompiled with JetBrains decompiler
// Type: 033954469293.088539235942
// Assembly: 582573968022, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 22949299-4A50-46F6-851E-C2A296093D37
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-35a63266858befa3a9a9f8f0684d53a6905ab1fbfd8df949e6989c20107cc290.exe

using \u003033954469293;
using \u003138676380795;
using \u003515313451822;
using \u003584374234978;
using \u003816901792918;
using Microsoft.VisualStudio.TestPlatform.CommunicationUtilities;
using Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces;
using Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing;
using Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Client;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace \u003033954469293
{
  internal class \u003088539235942 : 
    ITranslationLayerRequestSender,
    IDisposable,
    ITranslationLayerRequestSenderAsync
  {
    private readonly ICommunicationManager \u003916059367076;
    private readonly IDataSerializer \u003605972716349;
    private readonly ITestPlatformEventSource \u003112846922604;
    private readonly ManualResetEvent \u003070142719045 = new ManualResetEvent(false);
    private bool \u003702637470480;
    private int \u003533871275360 = 2;
    private CancellationTokenSource \u003113888560269;

    public \u003088539235942()
      : this((ICommunicationManager) new SocketCommunicationManager(), (IDataSerializer) JsonDataSerializer.Instance, TestPlatformEventSource.Instance)
    {
    }

    internal \u003088539235942(
      ICommunicationManager communicationManager,
      IDataSerializer dataSerializer,
      ITestPlatformEventSource testPlatformEventSource)
    {
      this.\u003916059367076 = communicationManager;
      this.\u003605972716349 = dataSerializer;
      this.\u003112846922604 = testPlatformEventSource;
    }

    public int \u003598429719326()
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.InitializeCommunication: Started.");
      this.\u003113888560269 = new CancellationTokenSource();
      this.\u003702637470480 = false;
      this.\u003070142719045.Reset();
      int num = -1;
      try
      {
        num = this.\u003916059367076.HostServer(new IPEndPoint(IPAddress.Loopback, 0)).Port;
        this.\u003916059367076.AcceptClientAsync();
        Task.Run((Action) (() =>
        {
          this.\u003916059367076.WaitForClientConnection(-1);
          this.\u003702637470480 = this.\u003778384847896();
          this.\u003070142719045.Set();
        }));
      }
      catch (Exception ex)
      {
        EqtTrace.Error("088539235942.InitializeCommunication: Error initializing communication with VstestConsole: {0}", new object[1]
        {
          (object) ex
        });
        this.\u003070142719045.Set();
      }
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.InitializeCommunication: Ended.");
      return num;
    }

    public bool \u003401204465585(int _param1) => this.\u003070142719045.WaitOne(_param1) && this.\u003702637470480;

    public Task<int> \u003129231034890(int _param1)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003028876633943 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003305661713883 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003629314944427 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003047308261208 = AsyncTaskMethodBuilder<int>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003451385565438&) ref stateMachine).\u003918466689818 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003047308261208.Start<\u003088539235942.\u003028876633943>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003047308261208.Task;
    }

    public void \u003777838631657(IEnumerable<string> _param1)
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.InitializeExtensions: Initializing extensions with additional extensions path " + string.Join(",", (IEnumerable<string>) _param1.ToList<string>()) + ".");
      this.\u003916059367076.SendMessage("Extensions.Initialize", (object) _param1, this.\u003533871275360);
    }

    public void \u003205649342623(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestDiscoveryEventsHandler2 _param4)
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.DiscoverTests: Starting test discovery.");
      this.\u003690886109121(_param1, _param2, _param3, _param4);
    }

    public Task \u003033650087650(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestDiscoveryEventsHandler2 _param4)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003134087089558 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003195256925122 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003181758211986 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003065350619377 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003677701777806 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003776197234260 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003701010938338 = AsyncTaskMethodBuilder.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003028876633943&) ref stateMachine).\u003299068278734 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003701010938338.Start<\u003088539235942.\u003134087089558>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003701010938338.Task;
    }

    public void \u003536607093543(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4)
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.StartTestRun: Starting test run.");
      this.\u003648711937083("TestExecution.RunAllWithDefaultHost", (object) new TestRunRequestPayload()
      {
        Sources = _param1.ToList<string>(),
        RunSettings = _param2,
        TestPlatformOptions = _param3
      }, _param4, (ITestHostLauncher) null);
    }

    public Task \u003302287024106(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003224044196443 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003236872190127 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003758115293360 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003802688450636 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003092036136346 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003952774058073 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003889658775780 = AsyncTaskMethodBuilder.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003134087089558&) ref stateMachine).\u003560603215530 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003889658775780.Start<\u003088539235942.\u003224044196443>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003889658775780.Task;
    }

    public void \u003763749770254(
      IEnumerable<TestCase> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4)
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.StartTestRun: Starting test run.");
      this.\u003648711937083("TestExecution.RunAllWithDefaultHost", (object) new TestRunRequestPayload()
      {
        TestCases = _param1.ToList<TestCase>(),
        RunSettings = _param2,
        TestPlatformOptions = _param3
      }, _param4, (ITestHostLauncher) null);
    }

    public Task \u003253473957742(
      IEnumerable<TestCase> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003493149784706 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003284376131405 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003707910789066 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003690877135958 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003587580842354 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003946120940392 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003278604626956 = AsyncTaskMethodBuilder.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003224044196443&) ref stateMachine).\u003387818829862 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003278604626956.Start<\u003088539235942.\u003493149784706>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003278604626956.Task;
    }

    public void \u003093222940038(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4,
      ITestHostLauncher _param5)
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.StartTestRunWithCustomHost: Starting test run.");
      this.\u003648711937083("TestExecution.GetTestRunnerProcessStartInfoForRunAll", (object) new TestRunRequestPayload()
      {
        Sources = _param1.ToList<string>(),
        RunSettings = _param2,
        DebuggingEnabled = _param5.IsDebug,
        TestPlatformOptions = _param3
      }, _param4, _param5);
    }

    public Task \u003441707630354(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4,
      ITestHostLauncher _param5)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003828789507768 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003710809265353 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003021130862322 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003326531173786 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003897240297005 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003169082355852 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003492624527647 = _param5;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003098360663345 = AsyncTaskMethodBuilder.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003493149784706&) ref stateMachine).\u003526167661765 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003098360663345.Start<\u003088539235942.\u003828789507768>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003098360663345.Task;
    }

    public void \u003792958389773(
      IEnumerable<TestCase> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4,
      ITestHostLauncher _param5)
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.StartTestRunWithCustomHost: Starting test run.");
      this.\u003648711937083("TestExecution.GetTestRunnerProcessStartInfoForRunSelected", (object) new TestRunRequestPayload()
      {
        TestCases = _param1.ToList<TestCase>(),
        RunSettings = _param2,
        DebuggingEnabled = _param5.IsDebug,
        TestPlatformOptions = _param3
      }, _param4, _param5);
    }

    public Task \u003793965743526(
      IEnumerable<TestCase> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestRunEventsHandler _param4,
      ITestHostLauncher _param5)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003681072310672 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003658358087136 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003412696303488 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003582554502681 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003263163584867 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003450038049724 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003918176217495 = _param5;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003746331213484 = AsyncTaskMethodBuilder.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003828789507768&) ref stateMachine).\u003900334247852 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003746331213484.Start<\u003088539235942.\u003681072310672>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003746331213484.Task;
    }

    public void \u003737480514157()
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.CancelTestRun: Canceling test run.");
      this.\u003916059367076.SendMessage("TestExecution.Cancel");
    }

    public void \u003484413884665()
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.AbortTestRun: Aborting test run.");
      this.\u003916059367076.SendMessage("TestExecution.Abort");
    }

    public void \u003450077991215()
    {
      if (EqtTrace.IsInfoEnabled)
        EqtTrace.Info("088539235942.CancelDiscovery: Canceling test discovery.");
      this.\u003916059367076.SendMessage("TestDiscovery.Cancel");
    }

    public void \u003488353170714() => this.\u003113888560269.Cancel();

    public void \u003782608304702() => this.\u003054613495763();

    public void \u003075584268456() => this.\u003916059367076.SendMessage("TestSession.Terminate");

    public void \u003054613495763() => this.\u003916059367076?.StopServer();

    private bool \u003778384847896()
    {
      bool flag = false;
      Message message1 = this.\u003916059367076.ReceiveMessage();
      if (message1.MessageType == "TestSession.Connected")
      {
        this.\u003916059367076.SendMessage("ProtocolVersion", (object) this.\u003533871275360);
        Message message2 = this.\u003916059367076.ReceiveMessage();
        if (message2.MessageType == "ProtocolVersion")
        {
          this.\u003533871275360 = this.\u003605972716349.DeserializePayload<int>(message2);
          flag = true;
        }
        else if (message2.MessageType == "ProtocolError")
          EqtTrace.Error("088539235942.HandShakeWithVsTestConsole: Version Check failed. ProtolError was received from the runner");
        else
          EqtTrace.Error("088539235942.HandShakeWithVsTestConsole: VersionCheck Message Expected but different message received: Received MessageType: {0}", new object[1]
          {
            (object) message2.MessageType
          });
      }
      else
        EqtTrace.Error("088539235942.HandShakeWithVsTestConsole: SessionConnected Message Expected but different message received: Received MessageType: {0}", new object[1]
        {
          (object) message1.MessageType
        });
      return flag;
    }

    private Task<bool> \u003307347259411()
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003018662634180 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003894876678119 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003809875997156 = AsyncTaskMethodBuilder<bool>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003681072310672&) ref stateMachine).\u003119381233945 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003809875997156.Start<\u003088539235942.\u003018662634180>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003809875997156.Task;
    }

    private void \u003690886109121(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestDiscoveryEventsHandler2 _param4)
    {
      try
      {
        ICommunicationManager icommunicationManager = this.\u003916059367076;
        DiscoveryRequestPayload discoveryRequestPayload = new DiscoveryRequestPayload();
        discoveryRequestPayload.Sources = _param1;
        discoveryRequestPayload.RunSettings = _param2;
        discoveryRequestPayload.TestPlatformOptions = _param3;
        int num = this.\u003533871275360;
        icommunicationManager.SendMessage("TestDiscovery.Start", (object) discoveryRequestPayload, num);
        bool flag = false;
        while (!flag)
        {
          Message message = this.\u003669681502940();
          if (string.Equals("TestDiscovery.TestFound", message.MessageType))
          {
            IEnumerable<TestCase> testCases = this.\u003605972716349.DeserializePayload<IEnumerable<TestCase>>(message);
            _param4.HandleDiscoveredTests(testCases);
          }
          else if (string.Equals("TestDiscovery.Completed", message.MessageType))
          {
            if (EqtTrace.IsInfoEnabled)
              EqtTrace.Info("088539235942.SendMessageAndListenAndReportTestCases: Discovery complete.");
            DiscoveryCompletePayload discoveryCompletePayload = this.\u003605972716349.DeserializePayload<DiscoveryCompletePayload>(message);
            _param4.HandleDiscoveryComplete(new DiscoveryCompleteEventArgs(discoveryCompletePayload.TotalTests, discoveryCompletePayload.IsAborted)
            {
              Metrics = discoveryCompletePayload.Metrics
            }, discoveryCompletePayload.LastDiscoveredTests);
            flag = true;
          }
          else if (string.Equals("TestSession.Message", message.MessageType))
          {
            TestMessagePayload testMessagePayload = this.\u003605972716349.DeserializePayload<TestMessagePayload>(message);
            ((ITestMessageEventHandler) _param4).HandleLogMessage(testMessagePayload.MessageLevel, testMessagePayload.Message);
          }
        }
      }
      catch (Exception ex)
      {
        EqtTrace.Error("Aborting Test Discovery Operation: {0}", new object[1]
        {
          (object) ex
        });
        ((ITestMessageEventHandler) _param4).HandleLogMessage((TestMessageLevel) 2, \u003749496994964.\u003588691458097);
        DiscoveryCompleteEventArgs completeEventArgs = new DiscoveryCompleteEventArgs(-1L, true);
        _param4.HandleDiscoveryComplete(completeEventArgs, (IEnumerable<TestCase>) null);
      }
      this.\u003112846922604.TranslationLayerDiscoveryStop();
    }

    private Task \u003828106941353(
      IEnumerable<string> _param1,
      string _param2,
      TestPlatformOptions _param3,
      ITestDiscoveryEventsHandler2 _param4)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003874778240516 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003767733835421 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003656564770292 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003568690037556 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003897483150905 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003142313748921 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003810992252292 = AsyncTaskMethodBuilder.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003018662634180&) ref stateMachine).\u003007628038895 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003810992252292.Start<\u003088539235942.\u003874778240516>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003810992252292.Task;
    }

    private void \u003648711937083(
      string _param1,
      object _param2,
      ITestRunEventsHandler _param3,
      ITestHostLauncher _param4)
    {
      try
      {
        this.\u003916059367076.SendMessage(_param1, _param2, this.\u003533871275360);
        bool flag = false;
        while (!flag)
        {
          Message message = this.\u003669681502940();
          if (string.Equals("TestExecution.StatsChange", message.MessageType))
          {
            TestRunChangedEventArgs changedEventArgs = this.\u003605972716349.DeserializePayload<TestRunChangedEventArgs>(message);
            _param3.HandleTestRunStatsChange(changedEventArgs);
          }
          else if (string.Equals("TestExecution.Completed", message.MessageType))
          {
            if (EqtTrace.IsInfoEnabled)
              EqtTrace.Info("088539235942.SendMessageAndListenAndReportTestResults: Execution complete.");
            TestRunCompletePayload runCompletePayload = this.\u003605972716349.DeserializePayload<TestRunCompletePayload>(message);
            _param3.HandleTestRunComplete(runCompletePayload.TestRunCompleteArgs, runCompletePayload.LastRunTests, runCompletePayload.RunAttachments, runCompletePayload.ExecutorUris);
            flag = true;
          }
          else if (string.Equals("TestSession.Message", message.MessageType))
          {
            TestMessagePayload testMessagePayload = this.\u003605972716349.DeserializePayload<TestMessagePayload>(message);
            ((ITestMessageEventHandler) _param3).HandleLogMessage(testMessagePayload.MessageLevel, testMessagePayload.Message);
          }
          else if (string.Equals("TestExecution.CustomTestHostLaunch", message.MessageType))
            this.\u003539657312945(_param4, message);
        }
      }
      catch (Exception ex)
      {
        EqtTrace.Error("Aborting Test Run Operation: {0}", new object[1]
        {
          (object) ex
        });
        ((ITestMessageEventHandler) _param3).HandleLogMessage((TestMessageLevel) 2, \u003749496994964.\u003779884671827);
        TestRunCompleteEventArgs completeEventArgs = new TestRunCompleteEventArgs((ITestRunStatistics) null, false, true, ex, (Collection<AttachmentSet>) null, TimeSpan.Zero);
        _param3.HandleTestRunComplete(completeEventArgs, (TestRunChangedEventArgs) null, (ICollection<AttachmentSet>) null, (ICollection<string>) null);
      }
      this.\u003112846922604.TranslationLayerExecutionStop();
    }

    private Task \u003041965223750(
      string _param1,
      object _param2,
      ITestRunEventsHandler _param3,
      ITestHostLauncher _param4)
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003391828332400 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003876352092097 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003017655740384 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003008244277346 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003012157955649 = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003715656371505 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003734451921983 = AsyncTaskMethodBuilder.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003874778240516&) ref stateMachine).\u003784493015079 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003734451921983.Start<\u003088539235942.\u003391828332400>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003734451921983.Task;
    }

    private Message \u003669681502940()
    {
      Task<Message> messageAsync = this.\u003916059367076.ReceiveMessageAsync(this.\u003113888560269.Token);
      messageAsync.Wait();
      return messageAsync.Result ?? throw new \u003105248700764(\u003749496994964.\u003419154281123);
    }

    private Task<Message> \u003064802158730()
    {
      // ISSUE: variable of a compiler-generated type
      \u003088539235942.\u003710819148308 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003684574012930 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003544867582707 = AsyncTaskMethodBuilder<Message>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003088539235942.\u003391828332400&) ref stateMachine).\u003347355355057 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003544867582707.Start<\u003088539235942.\u003710819148308>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003544867582707.Task;
    }

    private void \u003539657312945(ITestHostLauncher _param1, Message _param2)
    {
      CustomHostLaunchAckPayload launchAckPayload = new CustomHostLaunchAckPayload()
      {
        HostProcessId = -1,
        ErrorMessage = (string) null
      };
      try
      {
        TestProcessStartInfo processStartInfo = this.\u003605972716349.DeserializePayload<TestProcessStartInfo>(_param2);
        launchAckPayload.HostProcessId = _param1 != null ? _param1.LaunchTestHost(processStartInfo) : -1;
      }
      catch (Exception ex)
      {
        EqtTrace.Error("Error while launching custom host: {0}", new object[1]
        {
          (object) ex
        });
        launchAckPayload.ErrorMessage = ex.Message;
      }
      finally
      {
        this.\u003916059367076.SendMessage("TestExecution.CustomTestHostLaunchCallback", (object) launchAckPayload, this.\u003533871275360);
      }
    }
  }
}
