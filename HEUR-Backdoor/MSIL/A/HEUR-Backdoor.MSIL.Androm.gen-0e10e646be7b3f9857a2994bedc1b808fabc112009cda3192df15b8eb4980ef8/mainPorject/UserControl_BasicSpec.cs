// Decompiled with JetBrains decompiler
// Type: mainPorject.UserControl_BasicSpec
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace mainPorject
{
  public class UserControl_BasicSpec : UserControl
  {
    private IContainer components = (IContainer) null;
    private Label label12;
    private Label label11;
    private Label label10;
    private Label labelWidth;
    private Label labelLength;
    private Label labelHeight;
    private TextBox textBoxWidth;
    private TextBox textBoxLength;
    private TextBox textBoxHieght;
    private NumericUpDown numericUpDownCount;
    private Label label15;
    private Label label8;
    private Label labelDiameter;
    private TextBox textBoxDiameter;
    private TextBox textBoxWeight;
    private Label label2;
    private TableLayoutPanel tableLayoutPanelBasic;
    private Label label1;
    private Label label3;
    private Label label4;
    private Panel panelBasicSpec;
    private ErrorProvider errorProviderHeight;
    private ErrorProvider errorProviderLenght;
    private ErrorProvider errorProviderWidth;
    private ErrorProvider errorProviderDiameter;
    private ErrorProvider errorProviderCount;
    private ErrorProvider errorProviderWeight;
    private TextBox textBoxDiameter2;
    private NumericUpDown numericUpDownCount2;
    private Label label6;
    private Label label7;
    private Label label9;
    private Label label5;
    private ErrorProvider errorProviderDiameter2;
    private ErrorProvider errorProviderCount2;
    private Label labelWeight;
    private CheckBox checkBoxDouble;

    public UserControl_BasicSpec()
    {
      this.InitializeComponent();
      this.initializeHandling();
      this.initializeValues();
    }

    public event UserControl_BasicSpec.NumberChangedHandler HeightChanged;

    protected virtual void OnHeightChanged(Control sender, double number)
    {
      if (this.HeightChanged == null)
        return;
      this.HeightChanged(sender, number);
    }

    public event UserControl_BasicSpec.NumberChangedHandler WidthChanged;

    protected virtual void OnWidthChanged(Control sender, double number)
    {
      if (this.WidthChanged == null)
        return;
      this.WidthChanged(sender, number);
    }

    public event UserControl_BasicSpec.NumberChangedHandler LengthChanged;

    protected virtual void OnLengthChanged(Control sender, double number)
    {
      if (this.LengthChanged == null)
        return;
      this.LengthChanged(sender, number);
    }

    public event UserControl_BasicSpec.NumberChangedHandler DiameterChanged;

    protected virtual void OnDiameterChanged(Control sender, double number)
    {
      if (this.DiameterChanged == null)
        return;
      this.DiameterChanged(sender, number);
    }

    public event UserControl_BasicSpec.NumberChangedHandler CountChanged;

    protected virtual void OnCountChanged(Control sender, double number)
    {
      if (this.CountChanged == null)
        return;
      this.CountChanged(sender, number);
    }

    public event UserControl_BasicSpec.NumberChangedHandler Diameter2Changed;

    protected virtual void OnDiameter2Changed(Control sender, double number)
    {
      if (this.Diameter2Changed == null)
        return;
      this.Diameter2Changed(sender, number);
    }

    public event UserControl_BasicSpec.NumberChangedHandler Count2Changed;

    protected virtual void OnCount2Changed(Control sender, double number)
    {
      if (this.Count2Changed == null)
        return;
      this.Count2Changed(sender, number);
    }

    public event UserControl_BasicSpec.NumberChangedHandler WeightChanged;

    protected virtual void OnWeightChanged(Control sender, double number)
    {
      if (this.WeightChanged == null)
        return;
      this.WeightChanged(sender, number);
    }

    public event EventHandler DoubleCheckedChanged;

    private void HandleNumberedEntry(object sender, KeyPressEventArgs e)
    {
      TextBox textBox = sender as TextBox;
      if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.')
        e.Handled = true;
      if (e.KeyChar == '.' && textBox.Text.IndexOf('.') > -1)
      {
        e.Handled = true;
      }
      else
      {
        if (e.KeyChar != '0')
          return;
        double result1;
        double result2;
        if (double.TryParse(textBox.SelectedText, out result1) && double.TryParse(textBox.Text, out result2))
        {
          if (result2 == result1)
            e.Handled = true;
        }
        else if (string.IsNullOrWhiteSpace(textBox.Text))
          e.Handled = true;
      }
    }

    private void HandleEnterEntry_KeyDown(object sender, KeyEventArgs e)
    {
      TextBox textBox = sender as TextBox;
      if (e.KeyCode != Keys.Return)
        return;
      this.SelectNextControl(sender as Control, true, true, true, true);
      e.Handled = true;
      e.SuppressKeyPress = true;
    }

    private void initializeHandling()
    {
      this.HeightChanged = new UserControl_BasicSpec.NumberChangedHandler(this.textBoxHieght_NumberChanged);
      this.LengthChanged = new UserControl_BasicSpec.NumberChangedHandler(this.textBoxLength_NumberChanged);
      this.WidthChanged = new UserControl_BasicSpec.NumberChangedHandler(this.textBoxWidth_NumberChanged);
      this.CountChanged = new UserControl_BasicSpec.NumberChangedHandler(this.numericUpDownCount_NumberChanged);
      this.DiameterChanged = new UserControl_BasicSpec.NumberChangedHandler(this.textBoxDiameter_NumberChanged);
      this.WeightChanged = new UserControl_BasicSpec.NumberChangedHandler(this.textBoxWeight_NumberChanged);
      this.Diameter2Changed = new UserControl_BasicSpec.NumberChangedHandler(this.textBoxDiameter2_NumberChanged);
      this.Count2Changed = new UserControl_BasicSpec.NumberChangedHandler(this.numericUpDownCount2_NumberChanged);
    }

    private void initializeValues()
    {
      this.textBoxDiameter.Text = "25";
      this.textBoxHieght.Text = "550";
      this.textBoxLength.Text = "2";
      this.textBoxWeight.Text = "1000";
      this.textBoxWidth.Text = "250";
      this.numericUpDownCount.Value = 3M;
      this.textBoxDiameter2.Text = "25";
      this.numericUpDownCount2.Value = 3M;
    }

    private void textBoxFocus_Enter(object sender, EventArgs e) => (sender as TextBox).SelectAll();

    public double Height { get; private set; }

    public double Length { get; private set; }

    public double Width { get; private set; }

    public double Diameter { get; private set; }

    public double Diameter2 { get; private set; }

    public double Weight { get; private set; }

    public int Count { get; private set; }

    public int Count2 { get; private set; }

    public bool DoubleChecked => this.checkBoxDouble.Checked;

    public bool IsErrorFree() => this.errorProviderWeight.GetError((Control) this.textBoxWeight) == "" && this.errorProviderWidth.GetError((Control) this.textBoxWidth) == "" && this.errorProviderHeight.GetError((Control) this.textBoxHieght) == "" && this.errorProviderLenght.GetError((Control) this.textBoxLength) == "" && this.errorProviderCount.GetError((Control) this.numericUpDownCount) == "" && this.errorProviderDiameter.GetError((Control) this.textBoxDiameter) == "" && this.errorProviderDiameter2.GetError((Control) this.textBoxDiameter2) == "" && this.errorProviderCount2.GetError((Control) this.numericUpDownCount2) == "";

    public void setErrorWidth(string error) => this.setError(this.errorProviderWidth, (Control) this.textBoxWidth, error);

    public void setErrorLength(string error) => this.setError(this.errorProviderLenght, (Control) this.textBoxLength, error);

    public void setErrorHeight(string error) => this.setError(this.errorProviderHeight, (Control) this.textBoxHieght, error);

    public void setErrorCount(string error) => this.setError(this.errorProviderCount, (Control) this.numericUpDownCount, error);

    public void setErrorDiameter(string error) => this.setError(this.errorProviderDiameter, (Control) this.textBoxDiameter, error);

    public void setErrorCount2(string error) => this.setError(this.errorProviderCount, (Control) this.numericUpDownCount, error);

    public void setErrorDiameter2(string error) => this.setError(this.errorProviderDiameter, (Control) this.textBoxDiameter, error);

    public void setErrorWeight(string error) => this.setError(this.errorProviderWeight, (Control) this.textBoxWeight, error);

    private void setError(ErrorProvider ep, Control control, string error)
    {
      if (error == null)
        ep.Clear();
      else
        ep.SetError(control, error);
    }

    public void setRecText(double width, double height, double length)
    {
      this.textBoxWidth.Text = width.ToString();
      this.textBoxHieght.Text = height.ToString();
      this.textBoxLength.Text = length.ToString();
    }

    public void setRenSText(double diameter, int count)
    {
      this.textBoxDiameter.Text = diameter.ToString();
      this.numericUpDownCount.Value = (Decimal) count;
    }

    public void setRenDText(double diameter, int count)
    {
      this.textBoxDiameter2.Text = diameter.ToString();
      this.numericUpDownCount2.Value = (Decimal) count;
    }

    public void setSingelOrDouble(bool sod) => this.checkBoxDouble.Checked = sod;

    public void setWieghtText(double wieght) => this.textBoxWeight.Text = wieght.ToString();

    private void textBoxHieght_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnHeightChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderHeight.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxHieght_NumberChanged(Control control, double num)
    {
      this.Height = num / 10.0;
      if (!this.checkForZero(control, this.errorProviderHeight, this.Height))
        return;
      this.errorProviderHeight.Clear();
    }

    private void textBoxLength_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnLengthChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderLenght.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxLength_NumberChanged(Control control, double num)
    {
      this.Length = num;
      if (!this.checkForZero(control, this.errorProviderLenght, this.Length))
        return;
      this.errorProviderLenght.Clear();
    }

    private void textBoxWidth_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnWidthChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderWidth.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxWidth_NumberChanged(Control control, double num)
    {
      this.Width = num / 10.0;
      if (this.checkWidthDiameterCount())
      {
        this.errorProviderWidth.Clear();
        this.errorProviderDiameter.Clear();
        this.errorProviderCount.Clear();
      }
      else
      {
        if (this.checkForZero(control, this.errorProviderLenght, this.Length))
          return;
        this.errorProviderWidth.Clear();
      }
    }

    private void numericUpDownCount_ValueChanged(object sender, EventArgs e) => this.OnCountChanged((Control) this.numericUpDownCount, (double) (int) this.numericUpDownCount.Value);

    private void numericUpDownCount_NumberChanged(Control control, double num)
    {
      this.Count = (int) num;
      if (this.checkWidthDiameterCount())
      {
        this.errorProviderWidth.Clear();
        this.errorProviderDiameter.Clear();
        this.errorProviderCount.Clear();
      }
      if (!this.checkForZero(control, this.errorProviderCount, (double) this.Count))
        return;
      this.errorProviderCount.Clear();
    }

    private void numericUpDownCount2_ValueChanged(object sender, EventArgs e) => this.OnCount2Changed((Control) this.numericUpDownCount2, (double) (int) this.numericUpDownCount2.Value);

    private void numericUpDownCount2_NumberChanged(Control control, double num)
    {
      this.Count2 = (int) num;
      if (this.checkWidthDiameterCount2())
      {
        this.errorProviderWidth.Clear();
        this.errorProviderDiameter2.Clear();
        this.errorProviderCount2.Clear();
      }
      if (!this.checkForZero(control, this.errorProviderCount2, (double) this.Count2))
        return;
      this.errorProviderCount2.Clear();
    }

    private void textBoxDiameter_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnDiameterChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderDiameter.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxDiameter_NumberChanged(Control control, double num)
    {
      this.Diameter = num / 10.0;
      if (this.checkWidthDiameterCount())
      {
        this.errorProviderWidth.Clear();
        this.errorProviderDiameter.Clear();
        this.errorProviderCount.Clear();
      }
      if (!this.checkForZero(control, this.errorProviderDiameter, this.Diameter))
        return;
      this.errorProviderDiameter.Clear();
    }

    private void textBoxDiameter2_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnDiameter2Changed((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderDiameter2.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxDiameter2_NumberChanged(Control control, double num)
    {
      this.Diameter2 = num / 10.0;
      if (this.checkWidthDiameterCount2())
      {
        this.errorProviderWidth.Clear();
        this.errorProviderDiameter2.Clear();
        this.errorProviderCount2.Clear();
      }
      else
      {
        if (!this.checkForZero(control, this.errorProviderDiameter2, this.Diameter2))
          return;
        this.errorProviderDiameter2.Clear();
      }
    }

    private void textBoxWeight_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnWeightChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderWeight.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxWeight_NumberChanged(Control control, double num)
    {
      this.Weight = num;
      if (!this.checkForZero(control, this.errorProviderLenght, this.Length))
        return;
      this.errorProviderWeight.Clear();
    }

    private void checkBoxDouble_CheckedChanged(object sender, EventArgs e)
    {
      CheckBox checkBox = sender as CheckBox;
      this.textBoxDiameter2.Enabled = checkBox.Checked;
      this.numericUpDownCount2.Enabled = checkBox.Checked;
      if (!checkBox.Checked)
      {
        this.errorProviderDiameter2.Clear();
        this.errorProviderCount2.Clear();
      }
      else
      {
        this.checkWidthDiameterCount2();
        this.checkForZero((Control) this.textBoxDiameter2, this.errorProviderDiameter2, this.Diameter2);
        this.checkForZero((Control) this.numericUpDownCount2, this.errorProviderCount2, (double) this.Count2);
      }
      if (this.DoubleCheckedChanged == null)
        return;
      this.DoubleCheckedChanged(sender, e);
    }

    private bool checkWidthDiameterCount()
    {
      if (this.Diameter * (double) this.Count <= this.Width)
        return true;
      this.errorProviderWidth.SetError((Control) this.textBoxWidth, "this width can not have that much of renforcement");
      this.errorProviderDiameter.SetError((Control) this.textBoxDiameter, "this diameter is too big for this width");
      this.errorProviderCount.SetError((Control) this.numericUpDownCount, "this count is too much for this width");
      return false;
    }

    private bool checkWidthDiameterCount2()
    {
      if (this.Diameter2 * (double) this.Count2 <= this.Width)
        return true;
      this.errorProviderWidth.SetError((Control) this.textBoxWidth, "this width can not have that much of renforcement");
      this.errorProviderDiameter2.SetError((Control) this.textBoxDiameter2, "this diameter is too big for this width");
      this.errorProviderCount2.SetError((Control) this.numericUpDownCount2, "this count is too much for this width");
      return false;
    }

    private bool checkForZero(Control control, ErrorProvider ep, double num)
    {
      if (num != 0.0)
        return true;
      ep.SetError(control, "this field can not be zero");
      return false;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.label12 = new Label();
      this.label11 = new Label();
      this.label10 = new Label();
      this.labelWidth = new Label();
      this.labelLength = new Label();
      this.labelHeight = new Label();
      this.textBoxWidth = new TextBox();
      this.textBoxLength = new TextBox();
      this.textBoxHieght = new TextBox();
      this.numericUpDownCount = new NumericUpDown();
      this.label15 = new Label();
      this.label8 = new Label();
      this.labelDiameter = new Label();
      this.textBoxDiameter = new TextBox();
      this.textBoxWeight = new TextBox();
      this.label2 = new Label();
      this.tableLayoutPanelBasic = new TableLayoutPanel();
      this.label1 = new Label();
      this.label3 = new Label();
      this.numericUpDownCount2 = new NumericUpDown();
      this.textBoxDiameter2 = new TextBox();
      this.label5 = new Label();
      this.label4 = new Label();
      this.label6 = new Label();
      this.label7 = new Label();
      this.label9 = new Label();
      this.labelWeight = new Label();
      this.panelBasicSpec = new Panel();
      this.checkBoxDouble = new CheckBox();
      this.errorProviderHeight = new ErrorProvider(this.components);
      this.errorProviderLenght = new ErrorProvider(this.components);
      this.errorProviderWidth = new ErrorProvider(this.components);
      this.errorProviderDiameter = new ErrorProvider(this.components);
      this.errorProviderCount = new ErrorProvider(this.components);
      this.errorProviderWeight = new ErrorProvider(this.components);
      this.errorProviderDiameter2 = new ErrorProvider(this.components);
      this.errorProviderCount2 = new ErrorProvider(this.components);
      this.numericUpDownCount.BeginInit();
      this.tableLayoutPanelBasic.SuspendLayout();
      this.numericUpDownCount2.BeginInit();
      this.panelBasicSpec.SuspendLayout();
      ((ISupportInitialize) this.errorProviderHeight).BeginInit();
      ((ISupportInitialize) this.errorProviderLenght).BeginInit();
      ((ISupportInitialize) this.errorProviderWidth).BeginInit();
      ((ISupportInitialize) this.errorProviderDiameter).BeginInit();
      ((ISupportInitialize) this.errorProviderCount).BeginInit();
      ((ISupportInitialize) this.errorProviderWeight).BeginInit();
      ((ISupportInitialize) this.errorProviderDiameter2).BeginInit();
      ((ISupportInitialize) this.errorProviderCount2).BeginInit();
      this.SuspendLayout();
      this.label12.AutoSize = true;
      this.label12.Dock = DockStyle.Fill;
      this.label12.Location = new Point(494, 186);
      this.label12.Margin = new Padding(8, 0, 8, 0);
      this.label12.Name = "label12";
      this.label12.Size = new Size(106, 69);
      this.label12.TabIndex = 37;
      this.label12.Text = "(mm)";
      this.label12.TextAlign = ContentAlignment.MiddleCenter;
      this.label11.AutoSize = true;
      this.label11.Dock = DockStyle.Fill;
      this.label11.Location = new Point(494, 117);
      this.label11.Margin = new Padding(8, 0, 8, 0);
      this.label11.Name = "label11";
      this.label11.Size = new Size(106, 69);
      this.label11.TabIndex = 36;
      this.label11.Text = "(m)";
      this.label11.TextAlign = ContentAlignment.MiddleCenter;
      this.label10.AutoSize = true;
      this.label10.Dock = DockStyle.Fill;
      this.label10.Location = new Point(494, 48);
      this.label10.Margin = new Padding(8, 0, 8, 0);
      this.label10.Name = "label10";
      this.label10.Size = new Size(106, 69);
      this.label10.TabIndex = 35;
      this.label10.Text = "(mm)";
      this.label10.TextAlign = ContentAlignment.MiddleCenter;
      this.labelWidth.AutoSize = true;
      this.labelWidth.Dock = DockStyle.Fill;
      this.labelWidth.Location = new Point(8, 186);
      this.labelWidth.Margin = new Padding(8, 0, 8, 0);
      this.labelWidth.Name = "labelWidth";
      this.labelWidth.Size = new Size(166, 69);
      this.labelWidth.TabIndex = 34;
      this.labelWidth.Text = "Width";
      this.labelWidth.TextAlign = ContentAlignment.MiddleCenter;
      this.labelLength.AutoSize = true;
      this.labelLength.Dock = DockStyle.Fill;
      this.labelLength.Location = new Point(8, 117);
      this.labelLength.Margin = new Padding(8, 0, 8, 0);
      this.labelLength.Name = "labelLength";
      this.labelLength.Size = new Size(166, 69);
      this.labelLength.TabIndex = 33;
      this.labelLength.Text = "Lenght";
      this.labelLength.TextAlign = ContentAlignment.MiddleCenter;
      this.labelHeight.AutoSize = true;
      this.labelHeight.Dock = DockStyle.Fill;
      this.labelHeight.Location = new Point(8, 48);
      this.labelHeight.Margin = new Padding(8, 0, 8, 0);
      this.labelHeight.Name = "labelHeight";
      this.labelHeight.Size = new Size(166, 69);
      this.labelHeight.TabIndex = 32;
      this.labelHeight.Text = "Height";
      this.labelHeight.TextAlign = ContentAlignment.MiddleCenter;
      this.textBoxWidth.Dock = DockStyle.Top;
      this.textBoxWidth.Location = new Point(190, 193);
      this.textBoxWidth.Margin = new Padding(8, 7, 8, 7);
      this.textBoxWidth.Name = "textBoxWidth";
      this.textBoxWidth.Size = new Size(288, 38);
      this.textBoxWidth.TabIndex = 2;
      this.textBoxWidth.Text = "250.";
      this.textBoxWidth.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxWidth.TextChanged += new EventHandler(this.textBoxWidth_TextChanged);
      this.textBoxWidth.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxWidth.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxWidth.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.textBoxLength.Dock = DockStyle.Top;
      this.textBoxLength.Location = new Point(190, 124);
      this.textBoxLength.Margin = new Padding(8, 7, 8, 7);
      this.textBoxLength.Name = "textBoxLength";
      this.textBoxLength.Size = new Size(288, 38);
      this.textBoxLength.TabIndex = 1;
      this.textBoxLength.Text = "2.";
      this.textBoxLength.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxLength.TextChanged += new EventHandler(this.textBoxLength_TextChanged);
      this.textBoxLength.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxLength.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxLength.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.textBoxHieght.Dock = DockStyle.Top;
      this.textBoxHieght.Location = new Point(190, 55);
      this.textBoxHieght.Margin = new Padding(8, 7, 8, 7);
      this.textBoxHieght.Name = "textBoxHieght";
      this.textBoxHieght.Size = new Size(288, 38);
      this.textBoxHieght.TabIndex = 0;
      this.textBoxHieght.Text = "550.";
      this.textBoxHieght.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxHieght.TextChanged += new EventHandler(this.textBoxHieght_TextChanged);
      this.textBoxHieght.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxHieght.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxHieght.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.numericUpDownCount.Dock = DockStyle.Bottom;
      this.numericUpDownCount.Location = new Point(190, 396);
      this.numericUpDownCount.Margin = new Padding(8, 7, 8, 7);
      this.numericUpDownCount.Name = "numericUpDownCount";
      this.numericUpDownCount.Size = new Size(288, 38);
      this.numericUpDownCount.TabIndex = 4;
      this.numericUpDownCount.Value = new Decimal(new int[4]
      {
        30,
        0,
        0,
        0
      });
      this.numericUpDownCount.ValueChanged += new EventHandler(this.numericUpDownCount_ValueChanged);
      this.numericUpDownCount.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.label15.AutoSize = true;
      this.label15.Dock = DockStyle.Fill;
      this.label15.Location = new Point(494, 303);
      this.label15.Margin = new Padding(8, 0, 8, 0);
      this.label15.Name = "label15";
      this.label15.Size = new Size(106, 69);
      this.label15.TabIndex = 41;
      this.label15.Text = "(mm)";
      this.label15.TextAlign = ContentAlignment.MiddleCenter;
      this.label8.AutoSize = true;
      this.label8.Dock = DockStyle.Fill;
      this.label8.Location = new Point(8, 372);
      this.label8.Margin = new Padding(8, 0, 8, 0);
      this.label8.Name = "label8";
      this.label8.Size = new Size(166, 69);
      this.label8.TabIndex = 40;
      this.label8.Text = "Count";
      this.label8.TextAlign = ContentAlignment.MiddleCenter;
      this.labelDiameter.AutoSize = true;
      this.labelDiameter.Dock = DockStyle.Fill;
      this.labelDiameter.Location = new Point(8, 303);
      this.labelDiameter.Margin = new Padding(8, 0, 8, 0);
      this.labelDiameter.Name = "labelDiameter";
      this.labelDiameter.Size = new Size(166, 69);
      this.labelDiameter.TabIndex = 39;
      this.labelDiameter.Text = "Diameter";
      this.labelDiameter.TextAlign = ContentAlignment.MiddleCenter;
      this.textBoxDiameter.Dock = DockStyle.Top;
      this.textBoxDiameter.Location = new Point(190, 310);
      this.textBoxDiameter.Margin = new Padding(8, 7, 8, 7);
      this.textBoxDiameter.Name = "textBoxDiameter";
      this.textBoxDiameter.Size = new Size(288, 38);
      this.textBoxDiameter.TabIndex = 3;
      this.textBoxDiameter.Text = "25.";
      this.textBoxDiameter.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxDiameter.TextChanged += new EventHandler(this.textBoxDiameter_TextChanged);
      this.textBoxDiameter.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxDiameter.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxDiameter.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.textBoxWeight.Dock = DockStyle.Fill;
      this.textBoxWeight.Location = new Point(190, 496);
      this.textBoxWeight.Margin = new Padding(8, 7, 8, 7);
      this.textBoxWeight.Name = "textBoxWeight";
      this.textBoxWeight.Size = new Size(288, 38);
      this.textBoxWeight.TabIndex = 7;
      this.textBoxWeight.Text = "1000.";
      this.textBoxWeight.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxWeight.TextChanged += new EventHandler(this.textBoxWeight_TextChanged);
      this.textBoxWeight.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxWeight.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxWeight.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.label2.AutoSize = true;
      this.label2.Dock = DockStyle.Fill;
      this.label2.Location = new Point(494, 489);
      this.label2.Margin = new Padding(8, 0, 8, 0);
      this.label2.Name = "label2";
      this.label2.Size = new Size(106, 69);
      this.label2.TabIndex = 45;
      this.label2.Text = "(N)";
      this.label2.TextAlign = ContentAlignment.MiddleCenter;
      this.tableLayoutPanelBasic.ColumnCount = 3;
      this.tableLayoutPanelBasic.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 30f));
      this.tableLayoutPanelBasic.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tableLayoutPanelBasic.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 20f));
      this.tableLayoutPanelBasic.Controls.Add((Control) this.labelLength, 0, 2);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label15, 2, 5);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label12, 2, 3);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.labelWidth, 0, 3);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label11, 2, 2);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.numericUpDownCount, 1, 6);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label10, 2, 1);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.labelDiameter, 0, 5);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.textBoxDiameter, 1, 5);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label8, 0, 6);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.textBoxHieght, 1, 1);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.textBoxLength, 1, 2);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.textBoxWidth, 1, 3);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.labelHeight, 0, 1);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label1, 1, 0);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label3, 1, 4);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.numericUpDownCount2, 1, 11);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.textBoxDiameter2, 1, 10);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label5, 1, 9);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.textBoxWeight, 1, 8);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label4, 1, 7);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label6, 0, 10);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label7, 0, 11);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label9, 2, 10);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.labelWeight, 0, 8);
      this.tableLayoutPanelBasic.Controls.Add((Control) this.label2, 2, 8);
      this.tableLayoutPanelBasic.Dock = DockStyle.Top;
      this.tableLayoutPanelBasic.Location = new Point(0, 0);
      this.tableLayoutPanelBasic.Margin = new Padding(8, 7, 8, 7);
      this.tableLayoutPanelBasic.Name = "tableLayoutPanelBasic";
      this.tableLayoutPanelBasic.RowCount = 12;
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 48f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 48f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 48f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 48f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.RowStyles.Add(new RowStyle(SizeType.Absolute, 69f));
      this.tableLayoutPanelBasic.Size = new Size(608, 737);
      this.tableLayoutPanelBasic.TabIndex = 0;
      this.label1.AutoSize = true;
      this.label1.Dock = DockStyle.Fill;
      this.label1.Location = new Point(190, 0);
      this.label1.Margin = new Padding(8, 0, 8, 0);
      this.label1.Name = "label1";
      this.label1.Size = new Size(288, 48);
      this.label1.TabIndex = 0;
      this.label1.Text = "Rectangle";
      this.label3.AutoSize = true;
      this.label3.Dock = DockStyle.Fill;
      this.label3.Location = new Point(190, (int) byte.MaxValue);
      this.label3.Margin = new Padding(8, 0, 8, 0);
      this.label3.Name = "label3";
      this.label3.Size = new Size(288, 48);
      this.label3.TabIndex = 3;
      this.label3.Text = "Renforcement Down";
      this.numericUpDownCount2.Dock = DockStyle.Fill;
      this.numericUpDownCount2.Location = new Point(190, 682);
      this.numericUpDownCount2.Margin = new Padding(8, 7, 8, 7);
      this.numericUpDownCount2.Name = "numericUpDownCount2";
      this.numericUpDownCount2.Size = new Size(288, 38);
      this.numericUpDownCount2.TabIndex = 6;
      this.numericUpDownCount2.Value = new Decimal(new int[4]
      {
        10,
        0,
        0,
        0
      });
      this.numericUpDownCount2.ValueChanged += new EventHandler(this.numericUpDownCount2_ValueChanged);
      this.numericUpDownCount2.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxDiameter2.Dock = DockStyle.Fill;
      this.textBoxDiameter2.Location = new Point(190, 613);
      this.textBoxDiameter2.Margin = new Padding(8, 7, 8, 7);
      this.textBoxDiameter2.Name = "textBoxDiameter2";
      this.textBoxDiameter2.Size = new Size(288, 38);
      this.textBoxDiameter2.TabIndex = 5;
      this.textBoxDiameter2.Text = "0.0.";
      this.textBoxDiameter2.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxDiameter2.TextChanged += new EventHandler(this.textBoxDiameter2_TextChanged);
      this.textBoxDiameter2.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxDiameter2.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxDiameter2.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.label5.AutoSize = true;
      this.label5.Dock = DockStyle.Fill;
      this.label5.Location = new Point(190, 558);
      this.label5.Margin = new Padding(8, 0, 8, 0);
      this.label5.Name = "label5";
      this.label5.Size = new Size(288, 48);
      this.label5.TabIndex = 48;
      this.label5.Text = "Renforcement Up";
      this.label4.AutoSize = true;
      this.label4.Dock = DockStyle.Fill;
      this.label4.Location = new Point(190, 441);
      this.label4.Margin = new Padding(8, 0, 8, 0);
      this.label4.Name = "label4";
      this.label4.Size = new Size(288, 48);
      this.label4.TabIndex = 6;
      this.label4.Text = "Body ";
      this.label6.AutoSize = true;
      this.label6.Dock = DockStyle.Fill;
      this.label6.Location = new Point(8, 606);
      this.label6.Margin = new Padding(8, 0, 8, 0);
      this.label6.Name = "label6";
      this.label6.Size = new Size(166, 69);
      this.label6.TabIndex = 49;
      this.label6.Text = "Diameter";
      this.label6.TextAlign = ContentAlignment.MiddleCenter;
      this.label7.AutoSize = true;
      this.label7.Dock = DockStyle.Fill;
      this.label7.Location = new Point(8, 675);
      this.label7.Margin = new Padding(8, 0, 8, 0);
      this.label7.Name = "label7";
      this.label7.Size = new Size(166, 69);
      this.label7.TabIndex = 50;
      this.label7.Text = "Count";
      this.label7.TextAlign = ContentAlignment.MiddleCenter;
      this.label9.AutoSize = true;
      this.label9.Dock = DockStyle.Fill;
      this.label9.Location = new Point(494, 606);
      this.label9.Margin = new Padding(8, 0, 8, 0);
      this.label9.Name = "label9";
      this.label9.Size = new Size(106, 69);
      this.label9.TabIndex = 51;
      this.label9.Text = "(mm)";
      this.label9.TextAlign = ContentAlignment.MiddleCenter;
      this.labelWeight.AutoSize = true;
      this.labelWeight.Dock = DockStyle.Fill;
      this.labelWeight.Location = new Point(8, 489);
      this.labelWeight.Margin = new Padding(8, 0, 8, 0);
      this.labelWeight.Name = "labelWeight";
      this.labelWeight.Size = new Size(166, 69);
      this.labelWeight.TabIndex = 52;
      this.labelWeight.Text = "Total Weigth";
      this.labelWeight.TextAlign = ContentAlignment.MiddleCenter;
      this.panelBasicSpec.Controls.Add((Control) this.checkBoxDouble);
      this.panelBasicSpec.Controls.Add((Control) this.tableLayoutPanelBasic);
      this.panelBasicSpec.Dock = DockStyle.Fill;
      this.panelBasicSpec.Location = new Point(0, 0);
      this.panelBasicSpec.Margin = new Padding(8, 7, 8, 7);
      this.panelBasicSpec.Name = "panelBasicSpec";
      this.panelBasicSpec.Size = new Size(608, 980);
      this.panelBasicSpec.TabIndex = 47;
      this.checkBoxDouble.AutoSize = true;
      this.checkBoxDouble.Checked = true;
      this.checkBoxDouble.CheckState = CheckState.Checked;
      this.checkBoxDouble.Location = new Point(16, 746);
      this.checkBoxDouble.Margin = new Padding(8, 7, 8, 7);
      this.checkBoxDouble.Name = "checkBoxDouble";
      this.checkBoxDouble.Size = new Size(302, 36);
      this.checkBoxDouble.TabIndex = 1;
      this.checkBoxDouble.Text = "Double renforcemnt";
      this.checkBoxDouble.UseVisualStyleBackColor = true;
      this.checkBoxDouble.CheckedChanged += new EventHandler(this.checkBoxDouble_CheckedChanged);
      this.errorProviderHeight.ContainerControl = (ContainerControl) this;
      this.errorProviderLenght.ContainerControl = (ContainerControl) this;
      this.errorProviderWidth.ContainerControl = (ContainerControl) this;
      this.errorProviderDiameter.ContainerControl = (ContainerControl) this;
      this.errorProviderCount.ContainerControl = (ContainerControl) this;
      this.errorProviderWeight.ContainerControl = (ContainerControl) this;
      this.errorProviderDiameter2.ContainerControl = (ContainerControl) this;
      this.errorProviderCount2.ContainerControl = (ContainerControl) this;
      this.AutoScaleDimensions = new SizeF(16f, 31f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Controls.Add((Control) this.panelBasicSpec);
      this.Margin = new Padding(8, 7, 8, 7);
      this.Name = nameof (UserControl_BasicSpec);
      this.Size = new Size(608, 980);
      this.numericUpDownCount.EndInit();
      this.tableLayoutPanelBasic.ResumeLayout(false);
      this.tableLayoutPanelBasic.PerformLayout();
      this.numericUpDownCount2.EndInit();
      this.panelBasicSpec.ResumeLayout(false);
      this.panelBasicSpec.PerformLayout();
      ((ISupportInitialize) this.errorProviderHeight).EndInit();
      ((ISupportInitialize) this.errorProviderLenght).EndInit();
      ((ISupportInitialize) this.errorProviderWidth).EndInit();
      ((ISupportInitialize) this.errorProviderDiameter).EndInit();
      ((ISupportInitialize) this.errorProviderCount).EndInit();
      ((ISupportInitialize) this.errorProviderWeight).EndInit();
      ((ISupportInitialize) this.errorProviderDiameter2).EndInit();
      ((ISupportInitialize) this.errorProviderCount2).EndInit();
      this.ResumeLayout(false);
    }

    public delegate void NumberChangedHandler(Control sender, double number);
  }
}
