// Decompiled with JetBrains decompiler
// Type: �⨔퍛薨鵮䟽䂄禇
// Assembly: WebComponent, Version=2.1.4.1, Culture=neutral, PublicKeyToken=null
// MVID: F1761C1B-9AF9-47E5-B5EF-97715B8D2A85
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-cad6c5114941c484f555ea157284268bc5ecd49897836f9e16d8e85310489a43.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

internal static class \uFFFD\u2A14퍛薨鵮䟽䂄禇
{
  [DllImport("ntdll.dll", EntryPoint = "NtQueryInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true, PreserveSig = false)]
  private static extern int 혶튠뱮ᗶ\u2699쨾㵧禬(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength,
    out int ReturnLength);

  [DllImport("ntdll.dll", EntryPoint = "NtSetInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true, PreserveSig = false)]
  private static extern uint 쭟ᩂ緉욪ꉝ톷氤\uA4C6(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength);

  [DllImport("kernel32.dll", EntryPoint = "CloseHandle", PreserveSig = false)]
  private static extern bool 蕌̭줲돯\u2AA5ꝍ螮疖(IntPtr hObject);

  public static void 뚍䐆婆ﾢ\uE642\u25C8᱇ꉑ()
  {
    switch (Environment.GetEnvironmentVariable("COR_ENABLE_PROFILING"))
    {
      case null:
        switch (Environment.GetEnvironmentVariable("COR_PROFILER"))
        {
          case null:
            break;
          default:
            goto label_2;
        }
        break;
      default:
label_2:
        Environment.FailFast("Profiler detected");
        break;
    }
    Thread parameter1 = new Thread(new ParameterizedThreadStart(\uFFFD\u2A14퍛薨鵮䟽䂄禇.\u2646耈ሦ\uF4ED嚳\u25E6㒥觬));
    Thread parameter2 = new Thread(new ParameterizedThreadStart(\uFFFD\u2A14퍛薨鵮䟽䂄禇.\u2646耈ሦ\uF4ED嚳\u25E6㒥觬));
    parameter1.IsBackground = true;
    parameter2.IsBackground = true;
    parameter1.Start((object) parameter2);
    Thread.Sleep(500);
    parameter2.Start((object) parameter1);
  }

  private static void \u2646耈ሦ\uF4ED嚳\u25E6㒥觬(object thread)
  {
    Thread.Sleep(1000);
    Thread thread1 = (Thread) thread;
    while (true)
    {
      if (Debugger.IsAttached || Debugger.IsLogging())
        Environment.FailFast("Debugger detected (Managed)");
      if (!thread1.IsAlive)
        goto label_3;
label_2:
      Thread.Sleep(1000);
      continue;
label_3:
      Environment.FailFast("Loop broken");
      goto label_2;
    }
  }
}
