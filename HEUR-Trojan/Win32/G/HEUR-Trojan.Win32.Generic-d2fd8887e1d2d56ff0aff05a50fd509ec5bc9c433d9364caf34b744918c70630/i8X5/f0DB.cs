// Decompiled with JetBrains decompiler
// Type: i8X5.f0DB
// Assembly: k3KG, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A1B5D702-3CC6-48A1-A9D2-EF2C60D7D477
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-d2fd8887e1d2d56ff0aff05a50fd509ec5bc9c433d9364caf34b744918c70630.exe

using Qx50;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace i8X5
{
  [Serializable]
  public class f0DB
  {
    private int m_pkVersekeraar;
    private string m_Naam;
    private string m_Bedryfsnaam;
    private string m_Telno;
    private string m_Registrasienommer;
    private DateTime m_DateCancelled;
    private string m_Posadres;
    private string m_FisieseAdres;
    private string m_BTWNommer;
    private string m_PosVoorstad;
    private string m_PosDorp;
    private string m_FisiesVoorstad;
    private string m_FisiesDorp;
    private string m_PosPoskode;
    private string m_FisiesPoskode;
    private string m_Postaladdress;
    private string m_PhysicalAddress;
    private string m_DisFile;
    private DateTime m_DateStarted;
    private Decimal m_WaterleweKommpers;
    private object m_PadbystandKomPers;
    private object m_HuisBystandKomPers;

    [DataObjectField(false, false, false)]
    public int pkVersekeraar
    {
      get => this.m_pkVersekeraar;
      set => this.m_pkVersekeraar = value;
    }

    [DataObjectField(false, false, false)]
    public string Naam
    {
      get => this.m_Naam;
      set => this.m_Naam = value;
    }

    [DataObjectField(false, false, false)]
    public string Bedryfsnaam
    {
      get => this.m_Bedryfsnaam;
      set => this.m_Bedryfsnaam = value;
    }

    [DataObjectField(false, false, false)]
    public string Telno
    {
      get => this.m_Telno;
      set => this.m_Telno = value;
    }

    [DataObjectField(false, false, false)]
    public string Registrasienommer
    {
      get => this.m_Registrasienommer;
      set => this.m_Registrasienommer = value;
    }

    [DataObjectField(false, false, false)]
    public DateTime DateCancelled
    {
      get => this.m_DateCancelled;
      set => this.m_DateCancelled = value;
    }

    [DataObjectField(false, false, false)]
    public string Posadres
    {
      get => this.m_Posadres;
      set => this.m_Posadres = value;
    }

    [DataObjectField(false, false, false)]
    public string FisieseAdres
    {
      get => this.m_FisieseAdres;
      set => this.m_FisieseAdres = value;
    }

    [DataObjectField(false, false, false)]
    public string BTWNommer
    {
      get => this.m_BTWNommer;
      set => this.m_BTWNommer = value;
    }

    [DataObjectField(false, false, false)]
    public string PosVoorstad
    {
      get => this.m_PosVoorstad;
      set => this.m_PosVoorstad = value;
    }

    [DataObjectField(false, false, false)]
    public string PosDorp
    {
      get => this.m_PosDorp;
      set => this.m_PosDorp = value;
    }

    [DataObjectField(false, false, false)]
    public string DisFile
    {
      get => this.m_DisFile;
      set => this.m_DisFile = value;
    }

    [DataObjectField(false, false, false)]
    public string PhysicalAddress
    {
      get => this.m_PhysicalAddress;
      set => this.m_PhysicalAddress = value;
    }

    [DataObjectField(false, false, false)]
    public string FisiesPoskode
    {
      get => this.m_FisiesPoskode;
      set => this.m_FisiesPoskode = value;
    }

    [DataObjectField(false, false, false)]
    public string Postaladdress
    {
      get => this.m_Postaladdress;
      set => this.m_Postaladdress = value;
    }

    [DataObjectField(false, false, false)]
    public string FisiesVoorstad
    {
      get => this.m_FisiesVoorstad;
      set => this.m_FisiesVoorstad = value;
    }

    [DataObjectField(false, false, false)]
    public string FisiesDorp
    {
      get => this.m_FisiesDorp;
      set => this.m_FisiesDorp = value;
    }

    [DataObjectField(false, false, false)]
    public string PosPoskode
    {
      get => this.m_PosPoskode;
      set => this.m_PosPoskode = value;
    }

    [DataObjectField(false, false, false)]
    public DateTime DateStarted
    {
      get => this.m_DateStarted;
      set => this.m_DateStarted = value;
    }

    [DataObjectField(false, false, false)]
    public Decimal WaterleweKommpers
    {
      get => this.m_WaterleweKommpers;
      set => this.m_WaterleweKommpers = value;
    }

    [DataObjectField(false, false, false)]
    public object HuisBystandKomPers
    {
      get => this.m_HuisBystandKomPers;
      set => this.m_HuisBystandKomPers = RuntimeHelpers.GetObjectValue(value);
    }

    [DataObjectField(false, false, false)]
    public object PadbystandKomPers
    {
      get => this.m_PadbystandKomPers;
      set => this.m_PadbystandKomPers = RuntimeHelpers.GetObjectValue(value);
    }

    internal static void p0HL([In] List<object> obj0, [In] int obj1)
    {
      int num1 = 1;
      byte[] numArray;
      int index;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = index != 0 ? 7 : 3;
            continue;
          case 2:
            goto label_14;
          case 3:
            numArray[index] = checked ((byte) index);
            numArray[checked (index + 1)] = checked ((byte) Math.Abs(obj1));
            num1 = 13;
            continue;
          case 4:
          case 7:
            num1 = index <= 1 ? 9 : 12;
            continue;
          case 5:
            num1 = 14;
            continue;
          case 6:
            Nx48.Xw04(obj0, (byte[]) obj0[4], (int) byte.MaxValue);
            num1 = 2;
            continue;
          case 8:
            obj0.Add((object) numArray);
            goto case 6;
          case 9:
            num2 = checked (index + 1);
            num1 = index >= num2 ? 5 : 11;
            continue;
          case 10:
          case 13:
            num1 = 9;
            continue;
          case 11:
            index = num2;
            num1 = 5;
            continue;
          case 12:
            numArray[index] = checked ((byte) Math.Abs(obj1 + 101));
            num1 = 9;
            continue;
          case 14:
            num1 = index < 16 ? 0 : 8;
            continue;
          default:
            numArray = new byte[16];
            index = 0;
            num1 = 14;
            continue;
        }
      }
label_14:;
    }

    static void Pf1e()
    {
      // ISSUE: unable to decompile the method.
    }

    static void t0B7()
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
