// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportingService1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.Net;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [WebServiceBinding(Name = "ReportingServiceSoap", Namespace = "http://www.smartassembly.com/webservices/Reporting/")]
  internal class ReportingService1 : SoapHttpClientProtocol
  {
    public ReportingService1(string serverUrl)
    {
      try
      {
        this.Url = serverUrl + "Reporting.asmx";
        this.Timeout = 180000;
      }
      catch (Exception ex)
      {
        string o2 = serverUrl;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/Reporting/UploadReport2")]
    public string UploadReport2(
      string licenseID,
      [XmlElement(DataType = "base64Binary")] byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber)
    {
      object[] parameters;
      try
      {
        parameters = new object[5]
        {
          (object) licenseID,
          (object) data,
          (object) email,
          (object) appFriendlyName,
          (object) buildFriendlyNumber
        };
        return (string) this.Invoke(nameof (UploadReport2), parameters)[0];
      }
      catch (Exception ex)
      {
        object[] o1 = parameters;
        string o3 = licenseID;
        byte[] o4 = data;
        string o5 = email;
        string o6 = appFriendlyName;
        string o7 = buildFriendlyNumber;
        StackFrameHelper.CreateException7(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7);
        throw;
      }
    }

    protected override WebRequest GetWebRequest(Uri uri)
    {
      WebRequest webRequest;
      try
      {
        webRequest = base.GetWebRequest(uri);
        if (webRequest is HttpWebRequest httpWebRequest)
          httpWebRequest.ServicePoint.Expect100Continue = false;
        return webRequest;
      }
      catch (Exception ex)
      {
        WebRequest o1 = webRequest;
        HttpWebRequest o2 = httpWebRequest;
        Uri o4 = uri;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
        throw;
      }
    }
  }
}
