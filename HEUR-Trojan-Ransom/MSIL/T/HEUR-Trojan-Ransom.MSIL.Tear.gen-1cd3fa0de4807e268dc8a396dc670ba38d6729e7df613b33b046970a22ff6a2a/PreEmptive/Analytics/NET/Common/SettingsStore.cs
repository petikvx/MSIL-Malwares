// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.NET.Common.SettingsStore
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.IsolatedStorage;
using System.Linq;
using System.Threading;

namespace PreEmptive.Analytics.NET.Common
{
  public class SettingsStore : ISettingsStore
  {
    private IsolatedStorageFile a;
    private string b;
    private object c;

    public SettingsStore(string appid)
    {
      int A_1 = 14;
      this.c = new object();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (NetUtilities.RunningInMono())
        throw new NotSupportedException(Utils.a("雁곃꿅믇\uEAC9꿋ꋍ뇏ꇑ\uA7D3\uF6D5뇗꧙ﳛ볝鋟跡迣菥蛧쫩菫胭탯뿱鯳飵韷\uDBF9\uDCFB\uABFD珿朁␃䬅朇搉挋崍甏昑怓缕瘗紙漛䴝吟䴡嘣䌥ࠧ䌩䈫崭䐯圱唳刵", A_1));
      this.b = Utils.a("鋁뛃ꏅ跇\uA7C9볋뫍맏ꓑ뇓\uF8D5諗鏙\uF2DB距藟雡郣迥蛧跩\u9FEB", A_1) + (object) Path.DirectorySeparatorChar + Utils.a("鋁뛃ꏅ跇\uA7C9볋뫍맏ꓑ뇓\uF8D5諗鏙\uF2DB", A_1) + appid + (object) Path.DirectorySeparatorChar;
      try
      {
        this.a = IsolatedStorageFile.GetUserStoreForAssembly();
      }
      catch
      {
        this.a = IsolatedStorageFile.GetMachineStoreForAssembly();
      }
      try
      {
        this.a.GetDirectoryNames(this.b);
      }
      catch (DirectoryNotFoundException ex)
      {
        this.a.CreateDirectory(this.b);
      }
    }

    public string this[string key]
    {
      get
      {
        int num1 = 29341;
        int num2 = num1;
        num1 = 29341;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b(this.b + key);
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 0;
        while (true)
        {
          int num2 = 5311;
          int num3 = num2;
          num2 = 5311;
          int num4 = num2;
          switch (num3 == num4 ? 1 : 0)
          {
            case 0:
            case 2:
label_11:
              this.a(this.b + key);
              num2 = 2;
              num1 = num2;
              continue;
            default:
              num2 = 0;
              if (num2 == 0)
                ;
              switch (num1)
              {
                case 0:
                  num2 = 1;
                  if (num2 == 0)
                    ;
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  goto label_11;
                case 2:
                  if (this.Keys.Count == 0)
                  {
                    num2 = 4;
                    num1 = num2;
                    continue;
                  }
                  goto label_14;
                case 3:
                  goto label_9;
                case 4:
                  goto label_10;
              }
              if (value == null)
              {
                num2 = 1;
                num1 = num2;
                continue;
              }
              this.a(this.b + key, value);
              num2 = 3;
              num1 = num2;
              continue;
          }
        }
label_9:
        return;
label_10:
        this.a.DeleteDirectory(this.b);
        return;
label_14:;
      }
    }

    public int Count
    {
      get
      {
        int num1 = 12268;
        int num2 = num1;
        num1 = 12268;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.Keys.Count;
          default:
            goto case 1;
        }
      }
    }

    public IList<string> Keys
    {
      get
      {
        int A_1 = 14;
        int num1 = 10568;
        int num2 = num1;
        num1 = 10568;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return (IList<string>) ((IEnumerable<string>) this.a.GetFileNames(this.b + Utils.a("\uE8C1\uEAC3\uECC5", A_1))).ToList<string>();
          default:
            goto case 1;
        }
      }
    }

    public int MaxValueLength
    {
      get
      {
        int num1 = 20857;
        int num2 = num1;
        num1 = 20857;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return int.MaxValue;
          default:
            goto case 1;
        }
      }
    }

    public int MaxKeyLength
    {
      get
      {
        int num1 = -19855;
        int num2 = num1;
        num1 = -19855;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return int.MaxValue;
          default:
            goto case 1;
        }
      }
    }

    public void Flush()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 10180;
      int num2 = num1;
      num1 = 10180;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            break;
          break;
        default:
          goto case 1;
      }
    }

    private string b(string A_0)
    {
      int num1;
      int num2;
      string str1;
      string str2;
      switch (0)
      {
        case 0:
label_2:
          num2 = 1;
          if (num2 == 0)
            ;
          str1 = (string) null;
          str2 = (string) null;
          num2 = 2;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                if (!string.IsNullOrEmpty(str2))
                {
                  num2 = 1;
                  num1 = num2;
                  continue;
                }
                goto label_21;
              case 1:
                goto label_4;
              case 2:
                try
                {
                  this.a.GetFileNames(A_0);
                  str2 = ((IEnumerable<string>) this.a.GetFileNames(A_0)).FirstOrDefault<string>();
                }
                catch (Exception ex)
                {
                }
                num1 = 0;
                continue;
              default:
                goto label_2;
            }
          }
label_4:
          try
          {
            StreamReader streamReader = new StreamReader((Stream) new IsolatedStorageFileStream(A_0, FileMode.Open, FileAccess.Read, FileShare.Read, this.a));
            try
            {
              str1 = streamReader.ReadToEnd();
            }
            finally
            {
              int num3 = 2;
              while (true)
              {
                switch (num3)
                {
                  case 0:
                    streamReader.Dispose();
                    num3 = 1;
                    continue;
                  case 1:
                    goto label_12;
                  case 2:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                }
                if (streamReader != null)
                  num3 = 0;
                else
                  break;
              }
label_12:;
            }
            num2 = -28659;
            int num4 = num2;
            num2 = -28659;
            int num5 = num2;
            switch (num4 == num5 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_4;
              default:
                num2 = 0;
                if (num2 == 0)
                  break;
                break;
            }
          }
          catch
          {
          }
label_21:
          return str1;
      }
    }

    private void a(string A_0)
    {
      int num1;
      string str;
      switch (0)
      {
        case 0:
label_2:
          if (false)
            ;
          str = (string) null;
          num1 = 2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                if (!string.IsNullOrEmpty(str))
                {
                  num1 = 1;
                  continue;
                }
                goto label_13;
              case 1:
                goto label_6;
              case 2:
                int num2 = -8656;
                switch (-8656 == num2 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    goto label_6;
                  default:
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    try
                    {
                      str = ((IEnumerable<string>) this.a.GetFileNames(A_0)).FirstOrDefault<string>();
                    }
                    catch
                    {
                    }
                    num1 = 0;
                    continue;
                }
              default:
                goto label_2;
            }
          }
label_6:
          try
          {
            this.a.DeleteFile(A_0);
            break;
          }
          catch
          {
            break;
          }
label_13:
          break;
      }
    }

    private void a(string A_0, string A_1)
    {
      int A_1_1 = 15;
      switch (0)
      {
        default:
          bool lockTaken = false;
          object c;
          try
          {
            Monitor.Enter(c = this.c, ref lockTaken);
            try
            {
              IsolatedStorageFileStream storageFileStream = new IsolatedStorageFileStream(A_0, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None, this.a);
label_4:
              try
              {
                StreamWriter streamWriter = new StreamWriter((Stream) storageFileStream);
                try
                {
                  streamWriter.Write(A_1);
                  streamWriter.Close();
                }
                finally
                {
                  int num = 2;
                  while (true)
                  {
                    switch (num)
                    {
                      case 0:
                        streamWriter.Dispose();
                        num = 1;
                        continue;
                      case 1:
                        goto label_12;
                      case 2:
                        switch (0)
                        {
                          case 0:
                            break;
                          default:
                            continue;
                        }
                        break;
                    }
                    if (streamWriter != null)
                      num = 0;
                    else
                      break;
                  }
label_12:;
                }
                int num1 = -13828;
                int num2 = num1;
                num1 = -13828;
                int num3 = num1;
                switch (num2 == num3 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    goto label_4;
                  default:
                    num1 = 0;
                    if (num1 == 0)
                      ;
                    storageFileStream.Close();
                    break;
                }
              }
              finally
              {
                int num = 2;
                while (true)
                {
                  switch (num)
                  {
                    case 0:
                      storageFileStream.Dispose();
                      num = 1;
                      continue;
                    case 1:
                      goto label_22;
                    case 2:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                  }
                  if (storageFileStream != null)
                    num = 0;
                  else
                    break;
                }
label_22:;
              }
              this.a.GetFileNames(A_0.Replace(Utils.a("諂ꯄ듆뷈\uAACAꏌ곎듐髒釔", A_1_1), ""));
              this.a.GetFileNames(A_0);
              break;
            }
            catch
            {
              break;
            }
          }
          finally
          {
            int num = 2;
            while (true)
            {
              switch (num)
              {
                case 0:
                  Monitor.Exit(c);
                  num = 1;
                  continue;
                case 1:
                  goto label_32;
                case 2:
                  if (false)
                    ;
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
              }
              if (lockTaken)
                num = 0;
              else
                break;
            }
label_32:;
          }
      }
    }
  }
}
