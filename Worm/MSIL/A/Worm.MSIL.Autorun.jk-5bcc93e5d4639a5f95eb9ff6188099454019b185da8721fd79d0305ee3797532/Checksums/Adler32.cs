// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Checksums.Adler32
// Assembly: Done, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EBE6DCED-6866-44D2-B309-A0C25849858B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Worm.MSIL.Autorun.jk-5bcc93e5d4639a5f95eb9ff6188099454019b185da8721fd79d0305ee3797532.exe

using System;

namespace ICSharpCode.SharpZipLib.Checksums
{
  public sealed class Adler32 : IChecksum
  {
    private static readonly uint BASE = 65521;
    private uint checksum;

    public long Value => (long) this.checksum;

    public Adler32() => this.Reset();

    public void Reset() => this.checksum = 1U;

    public void Update(int bval)
    {
      uint num1 = this.checksum & (uint) ushort.MaxValue;
      uint num2 = this.checksum >> 16;
      uint num3 = (num1 + (uint) (bval & (int) byte.MaxValue)) % Adler32.BASE;
      this.checksum = ((num3 + num2) % Adler32.BASE << 16) + num3;
    }

    public void Update(byte[] buffer) => this.Update(buffer, 0, buffer.Length);

    public void Update(byte[] buf, int off, int len)
    {
      if (buf == null)
        throw new ArgumentNullException(nameof (buf));
      if (off < 0 || len < 0 || off + len > buf.Length)
        throw new ArgumentOutOfRangeException();
      uint num1 = this.checksum & (uint) ushort.MaxValue;
      uint num2 = this.checksum >> 16;
      while (len > 0)
      {
        int num3 = 3800;
        if (num3 > len)
          num3 = len;
        len -= num3;
        while (--num3 >= 0)
        {
          num1 += (uint) buf[off++] & (uint) byte.MaxValue;
          num2 += num1;
        }
        num1 %= Adler32.BASE;
        num2 %= Adler32.BASE;
      }
      this.checksum = num2 << 16 | num1;
    }
  }
}
