// Decompiled with JetBrains decompiler
// Type: AutoJack.Model.GameCallback
// Assembly: LSATRANSLATEDN, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 21C3335F-91C4-4C6A-BCF4-3830BBF13625
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Stealer.gen-8ab0b98e08b28d1448097020353b6e9e9910adef59b2d232175f272a7f4d76c5.exe

using AutoJack.common;
using AutoJack.Controller;
using AutoJack.Interface;
using System;
using System.Collections.Generic;
using System.Linq;

namespace AutoJack.Model
{
  internal class GameCallback
  {
    private const int BURST = 21;

    public List<Card> PrepareDeck()
    {
      List<Card> cardList = new List<Card>();
      foreach (Pip Pip in Enum.GetValues(typeof (Pip)))
      {
        foreach (Suit Suit in Enum.GetValues(typeof (Suit)))
        {
          Card card = new Card(Suit, Pip);
          cardList.Add(card);
        }
      }
      return cardList;
    }

    public List<Card> ShuffleDeck(List<Card> Deck)
    {
      Random random = new Random();
      int num = Deck.Count - 1;
      while (num != 0)
      {
        int index = random.Next(0, num--);
        Card card = Deck.ElementAt<Card>(num + 1);
        Deck[num + 1] = Deck.ElementAt<Card>(index);
        Deck[index] = card;
      }
      return Deck;
    }

    public void DealCardsSingleHand(GameController GameController)
    {
      Random random = new Random();
      bool flag = false;
      while (GameController.Game.Player.Hand1.Count != 2 || GameController.Game.Machine.Hand1.Count != 2)
      {
        Card card = GameController.Game.Deck.ElementAt<Card>(0);
        GameController.Game.Deck.RemoveAt(0);
        if (flag)
        {
          if (GameController.Game.Machine.Hand1.Count != 0)
            card.Set = false;
          GameController.Game.Machine.Hand1.Add(card);
          flag = false;
          GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Machine.Hand1Flipped);
        }
        else
        {
          if (GameController.Game.Player.Hand1.Count != 0)
            card.Set = false;
          GameController.Game.Player.Hand1.Add(card);
          flag = true;
          GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
        }
        GameController.GameView.SetLabels(GameController.Game);
      }
    }

    public void PassPlayerTurn(GameController GameController)
    {
      ++GameController.Game.TurnWho;
      GameController.GameView.SetLabels(GameController.Game);
      this.SimulateMachineRoundAsync(GameController);
    }

    public void AllowDraw1Card(GameController GameController)
    {
      if (GameController.Game.Player.Hand2.Count != 0)
      {
        int num = (int) new SelectHand(GameController).ShowDialog();
      }
      else
      {
        this.Draw1CardFor("Player", "Hand1", true, GameController);
        GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
        GameController.GameView.SetLabels(GameController.Game);
        GameController.GameView.ToogleGameButtonsState(GameController.Game);
      }
    }

    public void DrawToSelectedHand(string Hand, GameController GameController)
    {
      if (Hand == "Hand1")
      {
        GameController.UpdateLogs("Hit card Hand1;");
        this.Draw1CardFor("Player", "Hand1", true, GameController);
        GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
      }
      else
      {
        GameController.UpdateLogs("Hit card Hand2;");
        this.Draw1CardFor("Player", "Hand2", true, GameController);
        GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      }
      GameController.GameView.SetLabels(GameController.Game);
      GameController.GameView.ToogleGameButtonsState(GameController.Game);
    }

    public void DoubleBetThenFlipHands(GameController GameController)
    {
      GameController.Game.Player.Bet *= 2;
      GameController.GameView.SetLabels(GameController.Game);
      if (GameController.Game.Player.Hand2.Count == 0)
      {
        this.Draw1CardFor("Player", "Hand1", true, GameController);
        GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
        GameController.GameView.SetLabels(GameController.Game);
        if (GameController.Game.GetHandSumFor(GameController.Game.Player.Hand1) > 21)
        {
          GameController.UpdateLogs("Player burst. Game-over;");
          this.LooseBurstHand(GameController, "Player", "Hand1");
        }
        else
        {
          GameController.UpdateLogs("Flip player hand;");
          this.FlipPlayerHands(GameController);
        }
      }
      else
      {
        this.Draw1CardFor("Player", "Hand1", true, GameController);
        this.Draw1CardFor("Player", "Hand2", true, GameController);
        GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
        GameController.GameView.SetLabels(GameController.Game);
        if (GameController.Game.GetHandSumFor(GameController.Game.Player.Hand1) > 21)
        {
          GameController.UpdateLogs("Player burst Hand1;");
          this.LooseBurstHand(GameController, "Player", "Hand1");
        }
        if (GameController.Game.GetHandSumFor(GameController.Game.Player.Hand2) > 21)
        {
          GameController.UpdateLogs("Player burst Hand2;");
          this.LooseBurstHand(GameController, "Player", "Hand2");
        }
        if (!GameController.Game.Player.Hand1Flipped || !GameController.Game.Player.Hand2Flipped)
        {
          GameController.UpdateLogs("Flip player hands;");
          this.FlipPlayerHands(GameController);
        }
      }
    }

    public void SplitPlayerHandThenDraw(GameController GameController)
    {
      Card card = GameController.Game.Player.Hand1.ElementAt<Card>(1);
      GameController.Game.Player.Hand1.RemoveAt(1);
      GameController.Game.Player.Hand2.Add(card);
      this.Draw1CardFor("Player", "Hand1", true, GameController);
      this.Draw1CardFor("Player", "Hand2", true, GameController);
      GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      GameController.GameView.SetLabels(GameController.Game);
      GameController.GameView.ToogleGameButtonsState(GameController.Game);
    }

    public void FlipPlayerHands(GameController GameController)
    {
      GameController.Game.Player.Hand1Flipped = true;
      if (GameController.Game.Player.Hand2.Count != 0)
      {
        GameController.Game.Player.Hand2Flipped = true;
        GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      }
      else
        GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
      GameController.Game.Machine.Hand1Flipped = true;
      if (GameController.Game.Machine.Hand2.Count != 0)
      {
        GameController.Game.Machine.Hand2Flipped = true;
        GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      }
      else
        GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
      this.CalculateBalance(GameController.Game);
    }

    public void LooseBurstHand(GameController GameController, string Who, string Hand)
    {
      if (Who == "Player")
        this.PlayerBurstAsync(GameController, Hand);
      else
        this.MachineBurstAsync(GameController, Hand);
    }

    private void PlayerBurstAsync(GameController GameController, string Hand)
    {
      if (Hand == "Hand1")
      {
        GameController.Game.Player.Hand1Flipped = true;
        if (GameController.Game.Player.Hand2.Count == 0)
        {
          GameController.Game.Winner = "Machine";
          GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
          GameController.Game.Machine.Hand1Flipped = true;
          GameController.Game.Machine.Hand2Flipped = true;
          if (GameController.Game.Machine.Hand2.Count == 0)
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
          else
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
          this.CalculateBalance(GameController.Game);
        }
        else
        {
          GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
          if (GameController.Game.Player.Hand2Flipped)
            this.CalculateBalance(GameController.Game);
        }
      }
      else
      {
        GameController.Game.Player.Hand2Flipped = true;
        GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
        if (GameController.Game.Player.Hand1Flipped)
          this.CalculateBalance(GameController.Game);
      }
    }

    private void MachineBurstAsync(GameController GameController, string Hand)
    {
      if (Hand == "Hand1")
      {
        GameController.Game.Machine.Hand1Flipped = true;
        if (GameController.Game.Machine.Hand2.Count == 0)
        {
          GameController.Game.Winner = "Player";
          GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
          GameController.Game.Player.Hand1Flipped = true;
          GameController.Game.Player.Hand2Flipped = true;
          if (GameController.Game.Player.Hand2.Count == 0)
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
          else
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
          this.CalculateBalance(GameController.Game);
        }
        else
        {
          GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
          if (GameController.Game.Machine.Hand2Flipped)
            this.CalculateBalance(GameController.Game);
        }
      }
      else
      {
        GameController.Game.Machine.Hand2Flipped = true;
        GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
        if (GameController.Game.Machine.Hand1Flipped)
          this.CalculateBalance(GameController.Game);
      }
    }

    public void CalculateBalance(Game Game)
    {
    }

    private void SimulateMachineRoundAsync(GameController GameController)
    {
      if (GameController.Game.Machine.Hand2.Count == 0)
      {
        if (GameController.Game.CheckIdenticalHand("Machine", "Hand1"))
        {
          GameController.UpdateLogs("House split hand;");
          Card card = GameController.Game.Machine.Hand1.ElementAt<Card>(1);
          GameController.Game.Machine.Hand1.RemoveAt(1);
          GameController.Game.Machine.Hand2.Add(card);
          this.Draw1CardFor("Machine", "Hand1", false, GameController);
          this.Draw1CardFor("Machine", "Hand2", true, GameController);
          GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
          GameController.GameView.SetLabels(GameController.Game);
        }
        else
        {
          GameController.UpdateLogs("House run 1 hand;");
          this.RunGame1Hand(GameController, "Hand1", false);
        }
      }
      if (GameController.Game.Machine.Hand2.Count != 0)
      {
        GameController.UpdateLogs("House run 2 hands;");
        this.RunGame1Hand(GameController, "Hand1", true);
        this.RunGame1Hand(GameController, "Hand2", true);
      }
      ++GameController.Game.TurnWho;
      GameController.GameView.SetLabels(GameController.Game);
    }

    private void RunGame1Hand(GameController GameController, string Hand, bool RenderContext)
    {
      if (Hand == "Hand1")
        this.SimulateMachine1Hand(GameController, Hand, RenderContext);
      else
        this.SimulateMachine1Hand(GameController, Hand, RenderContext);
    }

    private void SimulateMachine1Hand(
      GameController GameController,
      string Hand,
      bool RenderContext)
    {
      while (GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) < 11)
      {
        GameController.UpdateLogs("House hit card;");
        this.Draw1CardFor("Machine", Hand, true, GameController);
        this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
      }
      if (GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) == 20)
      {
        GameController.UpdateLogs("House flip hand;");
        this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
      }
      if (GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) >= 11 && GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) <= 16)
      {
        if (Utility.RandDoubleInRange(0.4, 1.0) >= Utility.RandDoubleInRange(0.0, 0.6))
        {
          GameController.UpdateLogs("House hit card;");
          this.Draw1CardFor("Machine", Hand, true, GameController);
          this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
          this.CheckMachineBurst(GameController, Hand, RenderContext);
        }
        else
        {
          GameController.UpdateLogs("House double bet;");
          this.SimulateMachineDoubleBetAsync(GameController, Hand, RenderContext);
        }
      }
      if (GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) < 17 || GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) > 19)
        return;
      double num1 = Utility.RandDoubleInRange(0.0, 1.0);
      double num2 = Utility.RandDoubleInRange(0.0, 0.5);
      double num3 = Utility.RandDoubleInRange(0.0, 0.25);
      double num4 = Utility.RandDoubleInRange(0.0, 0.75);
      double num5 = Utility.Max(new double[4]
      {
        num1,
        num2,
        num3,
        num4
      });
      if (num5 == num1)
        GameController.UpdateLogs("House stand. Turn: Player;");
      else if (num5 == num2)
      {
        GameController.UpdateLogs("House hit card;");
        this.Draw1CardFor("Machine", Hand, true, GameController);
        this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
        this.CheckMachineBurst(GameController, Hand, RenderContext);
      }
      else if (num5 == num3)
      {
        GameController.UpdateLogs("House double bet;");
        this.SimulateMachineDoubleBetAsync(GameController, Hand, RenderContext);
      }
      else
      {
        GameController.UpdateLogs("House flip hand(s);");
        GameController.Game.Machine.Hand1Flipped = Hand == "Hand1";
        GameController.Game.Machine.Hand2Flipped = Hand == "Hand2";
        this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
      }
    }

    private void CheckMachineBurst(GameController GameController, string Hand, bool RenderContext)
    {
      if (GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) == 21)
      {
        GameController.Game.Machine.Hand1Flipped = Hand == "Hand1";
        GameController.Game.Machine.Hand2Flipped = Hand == "Hand2";
        GameController.UpdateLogs("House get Jack;");
        this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
      }
      if (GameController.Game.GetHandSumFor(Hand == "Hand1" ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) <= 21)
        return;
      GameController.UpdateLogs("House burst hand;");
      this.LooseBurstHand(GameController, "Machine", Hand);
    }

    private void RenderMachine1HandAsync(
      GameController GameController,
      string Hand,
      bool RenderContext)
    {
      if (RenderContext)
        GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      else
        GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
      GameController.GameView.SetLabels(GameController.Game);
    }

    private void SimulateMachineDoubleBetAsync(
      GameController GameController,
      string Hand,
      bool RenderContext)
    {
      GameController.Game.Machine.Bet *= 2;
      GameController.GameView.SetLabels(GameController.Game);
      this.Draw1CardFor("Machine", Hand, true, GameController);
      this.CheckMachineBurst(GameController, Hand, RenderContext);
      if (RenderContext)
        GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      else
        GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
      this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
    }

    private void SimulateMachineFlipHand(
      GameController GameController,
      string Hand,
      bool RenderContext)
    {
      GameController.Game.Machine.Hand1Flipped = Hand == "Hand1";
      GameController.Game.Machine.Hand2Flipped = Hand == "Hand2";
      if (RenderContext)
        GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      else
        GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
      GameController.Game.Player.Hand1Flipped = true;
      if (GameController.Game.Player.Hand2.Count != 0)
      {
        GameController.Game.Player.Hand2Flipped = true;
        GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
      }
      else
        GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
      this.CalculateBalance(GameController.Game);
    }

    private void Draw1CardFor(string Who, string Hand, bool Set, GameController GameController)
    {
      Card card = GameController.Game.Deck.ElementAt<Card>(0);
      GameController.Game.Deck.RemoveAt(0);
      if (Who == "Player")
      {
        if (Hand == "Hand1")
          GameController.Game.Player.Hand1.Add(card);
        else
          GameController.Game.Player.Hand2.Add(card);
      }
      else if (Hand == "Hand1")
        GameController.Game.Machine.Hand1.Add(card);
      else
        GameController.Game.Machine.Hand2.Add(card);
    }
  }
}
