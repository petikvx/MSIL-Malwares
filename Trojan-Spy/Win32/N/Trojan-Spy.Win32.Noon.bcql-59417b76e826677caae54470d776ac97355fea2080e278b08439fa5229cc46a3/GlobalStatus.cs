// Decompiled with JetBrains decompiler
// Type: mmxAH.GlobalStatus
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.IO;

namespace mmxAH
{
  public class GlobalStatus
  {
    private GameEngine en;
    private byte CurDoom;
    private byte CurMonsters;
    private byte CurOut;
    private byte CurTerror;
    private byte CurSealed;
    private byte MaxDoom;
    private byte MaxGate;
    private byte MaxMonsters;
    private byte MaxOut;
    private const byte Terror1 = 3;
    private const byte Terror2 = 6;
    private const byte Terror3 = 9;
    private const byte MaxTerror = 10;
    private const byte MaxSealed = 6;
    private short CluesToSealed;

    public GlobalStatus(GameEngine eng)
    {
      this.en = eng;
      this.Reset();
    }

    public void Print()
    {
      this.en.clock.PrintCurPhase(false);
      this.en.io.Print(this.en.sysstr.GetString(SSType.DoomTrack), isBold: true);
      this.en.io.Print(" " + this.CurDoom.ToString() + " / " + this.MaxDoom.ToString() + "." + Environment.NewLine);
      this.en.io.Print(this.en.sysstr.GetString(SSType.OpenGates), isBold: true);
      this.en.io.Print(" " + this.en.openGates.Count.ToString() + " / " + this.MaxGate.ToString() + "." + Environment.NewLine);
      this.en.io.Print(this.en.sysstr.GetString(SSType.MonsterInArchem), isBold: true);
      this.en.io.Print(" " + this.CurMonsters.ToString() + " / " + this.MaxMonsters.ToString() + "." + Environment.NewLine);
      this.en.io.Print(this.en.sysstr.GetString(SSType.MonsterInOutscirts), isBold: true);
      this.en.io.Print(" " + this.CurOut.ToString() + " / " + this.MaxOut.ToString() + "." + Environment.NewLine);
      this.en.io.Print(this.en.sysstr.GetString(SSType.TerrorTrack), isBold: true);
      this.en.io.Print(" " + this.CurTerror.ToString() + " / " + (byte) 10.ToString() + "." + Environment.NewLine);
      this.en.io.Print(Environment.NewLine + this.en.sysstr.GetString(SSType.SealedLocathion), isBold: true);
      this.en.io.Print(" " + this.CurSealed.ToString() + " / " + (byte) 6.ToString() + "." + Environment.NewLine);
    }

    public void Init(byte pMaxGate, byte pMaxMonsters, byte pMaxOut)
    {
      this.MaxGate = pMaxGate;
      this.MaxMonsters = pMaxMonsters;
      this.MaxOut = pMaxOut;
    }

    public void SetMaxDoom(byte pMaxDoom) => this.MaxDoom = pMaxDoom;

    public void Reset()
    {
      this.CurDoom = (byte) 0;
      this.CurMonsters = (byte) 0;
      this.CurOut = (byte) 0;
      this.CurTerror = (byte) 0;
      this.CurSealed = (byte) 0;
      this.MaxDoom = (byte) 0;
      this.MaxGate = (byte) 0;
      this.MaxMonsters = (byte) 0;
      this.MaxOut = (byte) 0;
      this.CluesToSealed = (short) 5;
      this.MaxDoom = (byte) 10;
    }

    public bool DoomIncrise(byte count = 1)
    {
      this.CurDoom += count;
      this.en.io.PrintToLog(this.en.sysstr.GetNumberDoomToken((short) count) + " " + this.en.sysstr.GetString(SSType.DoomInc));
      this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.DoomTrack), isBold: true);
      this.en.io.PrintToLog(" " + this.CurDoom.ToString() + " / " + this.MaxDoom.ToString() + "." + Environment.NewLine);
      if ((int) this.CurDoom < (int) this.MaxDoom)
        return true;
      this.en.ga.Awekeen();
      return false;
    }

    public void TerrorIncrise()
    {
      ++this.CurTerror;
      if (this.CurTerror > (byte) 10)
      {
        this.CurTerror = (byte) 10;
      }
      else
      {
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.TerorInc));
        this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.TerrorTrack), isBold: true);
        this.en.io.PrintToLog(" " + this.CurTerror.ToString() + " / " + (byte) 10.ToString() + "." + Environment.NewLine);
      }
    }

    public bool NewGate()
    {
      this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.OpenGates), isBold: true);
      this.en.io.PrintToLog(" " + this.en.openGates.Count.ToString() + " / " + this.MaxGate.ToString() + "." + Environment.NewLine);
      if (this.en.openGates.Count < (int) this.MaxGate)
        return true;
      this.en.ga.Awekeen();
      return false;
    }

    public bool IsMonserToPlace(MonsterIndivid m)
    {
      if ((int) this.CurMonsters == (int) this.MaxMonsters)
      {
        this.PlacedToOut(m);
        return false;
      }
      ++this.CurMonsters;
      return true;
    }

    private void PlacedToOut(MonsterIndivid m)
    {
      if ((int) this.CurOut == (int) this.MaxOut)
      {
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.OutscirtsIsClear) + Environment.NewLine);
        this.CurOut = (byte) 0;
        this.en.MonstersCup.Add(m);
        this.en.ResetOutscirts();
        this.TerrorIncrise();
      }
      else
      {
        ++this.CurOut;
        this.en.Outscirts.Add(m);
        this.en.io.PrintToLog(m.GetTitle(), isBold: true);
        this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.PlacedToOut) + " . ");
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.MonsterInOutscirts), isBold: true);
        this.en.io.PrintToLog(" " + this.CurOut.ToString() + " / " + this.MaxOut.ToString() + "." + Environment.NewLine);
      }
    }

    public bool PlacedToOutscirts()
    {
      MonsterIndivid m = this.en.MonstersCup.Draw();
      if (m == null)
      {
        this.en.ga.Awekeen();
        return false;
      }
      this.PlacedToOut(m);
      return true;
    }

    public void PrintMonserCountServer()
    {
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.MonsterInArchem), isBold: true);
      this.en.io.PrintToLog(" " + this.CurMonsters.ToString() + " / " + this.MaxMonsters.ToString() + "." + Environment.NewLine);
    }

    public void PrintMonserCountInOutServer()
    {
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.MonsterInOutscirts), isBold: true);
      this.en.io.PrintToLog(" " + this.CurOut.ToString() + " / " + this.MaxOut.ToString() + "." + Environment.NewLine);
    }

    public void AddSealed()
    {
      ++this.CurSealed;
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.SealedLocathion), isBold: true);
      this.en.io.PrintToLog(" " + this.CurSealed.ToString() + " / " + (byte) 6.ToString() + "." + Environment.NewLine);
    }

    public void ToSave(BinaryWriter wr)
    {
      wr.Write(this.CurDoom);
      wr.Write(this.CurMonsters);
      wr.Write(this.CurOut);
      wr.Write(this.CurTerror);
      wr.Write(this.CurSealed);
    }

    public void FromSave(BinaryReader rd)
    {
      this.CurDoom = rd.ReadByte();
      this.CurMonsters = rd.ReadByte();
      this.CurOut = rd.ReadByte();
      this.CurTerror = rd.ReadByte();
      this.CurSealed = rd.ReadByte();
    }

    public void CluesToSealedModif(short modif)
    {
      this.CluesToSealed += modif;
      if (this.CluesToSealed >= (short) 0)
        return;
      this.CluesToSealed = (short) 0;
    }

    public byte GetCluesToSealed() => (byte) this.CluesToSealed;

    public void ClosedGate()
    {
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.OpenGates), isBold: true);
      this.en.io.PrintToLog(" " + (this.en.openGates.Count - 1).ToString() + " / " + this.MaxGate.ToString() + "." + Environment.NewLine);
    }

    public void RemoveFromOut()
    {
      if (this.CurOut <= (byte) 0)
        return;
      --this.CurOut;
    }

    public void RemoveMonsterInArchem()
    {
      if (this.CurMonsters <= (byte) 0)
        return;
      --this.CurMonsters;
    }

    public byte MonstersCouldBePlacedBefreLim() => (byte) ((uint) this.MaxMonsters - (uint) this.CurMonsters);
  }
}
