// Decompiled with JetBrains decompiler
// Type: Newtonsoft.Json.Serialization.JsonTypeReflector
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0003;
using \u0014;
using \u0015;
using Newtonsoft.Json.Utilities;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Permissions;

namespace Newtonsoft.Json.Serialization
{
  internal static class JsonTypeReflector
  {
    private static bool? \u0001;
    private static bool? \u0002;
    internal static readonly \u0004<Type, Func<object[], \u0005.\u0005>> \u0001;
    internal static readonly \u0004<Type, Type> \u0001;
    internal static \u0007 \u0001;

    public static \u0001 \u0001<\u0001>([In] object obj0) where \u0001 : Attribute => \u0007<\u0001>.\u0001(obj0);

    private static \u0001 \u0001<\u0001>([In] Type obj0) where \u0001 : Attribute
    {
      Type type = \u0006.\u0001(obj0);
      if ((object) type != null)
        goto label_11;
label_1:
      \u0001 obj1 = ReflectionUtils.\u0001<\u0001>((object) obj0, true);
      while ((object) obj1 != null)
      {
        if (true)
          return obj1;
      }
      foreach (object obj2 in obj0.GetInterfaces())
      {
        \u0001 obj3 = ReflectionUtils.\u0001<\u0001>(obj2, true);
        if ((object) obj3 != null)
          return obj3;
      }
      return default (\u0001);
label_11:
      \u0001 obj4 = ReflectionUtils.\u0001<\u0001>((object) type, true);
      if ((object) obj4 != null)
        return obj4;
      goto label_1;
    }

    private static \u0001 \u0001<\u0001>([In] MemberInfo obj0) where \u0001 : Attribute
    {
      Type type = \u0006.\u0001(obj0.DeclaringType);
      if (false)
        goto label_16;
      else
        goto label_18;
label_4:
      \u0001 obj1;
      return obj1;
label_5:
      Type[] interfaces;
      int index;
      if ((object) obj0.DeclaringType != null)
      {
        interfaces = obj0.DeclaringType.GetInterfaces();
        index = 0;
        if (true)
          goto label_16;
      }
      else
        goto label_17;
label_9:
      MemberInfo memberInfo1;
      if ((object) memberInfo1 != null)
      {
        if (true)
        {
          obj1 = ReflectionUtils.\u0001<\u0001>((object) memberInfo1, true);
          if (true)
          {
            if ((object) obj1 != null)
              return obj1;
          }
          else
            goto label_16;
        }
        else
          goto label_5;
      }
      if (true)
        ++index;
      else
        goto label_5;
label_16:
      if (index < interfaces.Length)
      {
        if (true)
        {
          memberInfo1 = \u0006.\u0001(interfaces[index], obj0);
          goto label_9;
        }
        else
          goto label_4;
      }
label_17:
      return default (\u0001);
label_18:
      if ((object) type != null)
        goto label_19;
label_3:
      obj1 = ReflectionUtils.\u0001<\u0001>((object) obj0, true);
      if ((object) obj1 == null)
        goto label_5;
      else
        goto label_4;
label_19:
      MemberInfo memberInfo2 = \u0006.\u0001(type, obj0);
      if ((object) memberInfo2 != null)
      {
        \u0001 obj2 = ReflectionUtils.\u0001<\u0001>((object) memberInfo2, true);
        if ((object) obj2 != null)
          return obj2;
        goto label_3;
      }
      else
        goto label_3;
    }

    public static \u0001 \u0002<\u0001>([In] object obj0) where \u0001 : Attribute
    {
      if (true)
      {
        if (true)
          goto label_4;
label_2:
        Type type;
        MemberInfo memberInfo;
        if (true)
        {
          if ((object) type != null)
            return JsonTypeReflector.\u0001<\u0001>(type);
          memberInfo = obj0 as MemberInfo;
          if ((object) memberInfo == null)
            goto label_3;
        }
        return JsonTypeReflector.\u0001<\u0001>(memberInfo);
label_4:
        type = obj0 as Type;
        goto label_2;
      }
label_3:
      return ReflectionUtils.\u0001<\u0001>(obj0, true);
    }

    [SpecialName]
    public static bool \u0001()
    {
      if (true)
      {
        if (!JsonTypeReflector.\u0001.HasValue)
        {
          try
          {
            \u0011.\u001A\u0002((object) new ReflectionPermission(ReflectionPermissionFlag.MemberAccess));
            \u0011.\u001A\u0002((object) new ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess));
            \u0011.\u001A\u0002((object) new SecurityPermission(SecurityPermissionFlag.SkipVerification));
            \u0011.\u001A\u0002((object) new SecurityPermission(SecurityPermissionFlag.UnmanagedCode));
            \u0011.\u001A\u0002((object) new SecurityPermission(PermissionState.Unrestricted));
            JsonTypeReflector.\u0001 = new bool?(true);
          }
          catch (Exception ex)
          {
            JsonTypeReflector.\u0001 = new bool?(false);
          }
        }
      }
      return JsonTypeReflector.\u0001.GetValueOrDefault();
    }

    [SpecialName]
    public static bool \u0002()
    {
      if (!JsonTypeReflector.\u0002.HasValue)
      {
        try
        {
          if (true)
            \u0011.\u001A\u0002((object) new SecurityPermission(PermissionState.Unrestricted));
          JsonTypeReflector.\u0002 = new bool?(true);
        }
        catch (Exception ex)
        {
          if (true)
            JsonTypeReflector.\u0002 = new bool?(false);
        }
      }
      return JsonTypeReflector.\u0002.GetValueOrDefault();
    }

    static JsonTypeReflector()
    {
      do
      {
        do
        {
          if (true)
            JsonTypeReflector.\u0001 = new \u0004<Type, Func<object[], \u0005.\u0005>>(new Func<Type, Func<object[], \u0005.\u0005>>(\u0006.\u0001));
        }
        while (false);
        if (true)
          JsonTypeReflector.\u0001 = new \u0004<Type, Type>(new Func<Type, Type>(\u0006.\u0001));
      }
      while (false);
    }
  }
}
