// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: غج, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 646F7626-F199-493A-B5BB-FA317F4F75E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7bd25c50eebc6f91a77977f299f7080a7ba1825fe1953c76801546cc96342b39.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
      this.Clear();
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_5:
        int num1 = enumerator.MoveNext() ? -79023946 : (num1 = -589061777);
        ChessPiece current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -733127511)) % 6U)
          {
            case 1:
              current = enumerator.Current;
              num1 = -1993057017;
              continue;
            case 2:
              this.FindMoveFrom(current.Current);
              num1 = (int) num2 * 1043329940 ^ -1787164222;
              continue;
            case 3:
              goto label_5;
            case 4:
              num1 = -79023946;
              continue;
            case 5:
              num1 = (int) num2 * -838473636 ^ -1693246242;
              continue;
            default:
              goto label_9;
          }
        }
      }
label_9:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.BlackPieces.Values.GetEnumerator())
      {
label_15:
        int num3 = enumerator.MoveNext() ? -1813585282 : (num3 = -906028592);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -733127511)) % 4U)
          {
            case 0:
              goto label_15;
            case 2:
              num3 = -1813585282;
              continue;
            case 3:
              this.FindMoveFrom(enumerator.Current.Current);
              num3 = -588854275;
              continue;
            default:
              goto label_18;
          }
        }
      }
label_18:
      if (!this.board.ShowAllMoves)
        return;
label_19:
      int num5 = -1695207382;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num5 ^ -733127511)) % 4U)
        {
          case 0:
            num5 = (int) num6 * -1764627952 ^ -1125975368;
            continue;
          case 1:
            goto label_16;
          case 2:
            goto label_19;
          case 3:
            this.HighLightMoveStyle();
            num5 = (int) num6 * -1150989677 ^ -532179448;
            continue;
          default:
            goto label_13;
        }
      }
label_16:
      return;
label_13:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = -1397859217;
      Pieces kind;
      Pieces pieces;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1896051094)) % 19U)
        {
          case 0:
label_21:
            this.handleRook(x);
            num1 = -1511480109;
            continue;
          case 1:
            num1 = (int) num2 * 277452294 ^ 1679956771;
            continue;
          case 2:
label_19:
            this.handlePawn(x);
            num1 = -813508473;
            continue;
          case 3:
            num1 = (int) num2 * -1990968885 ^ -347319930;
            continue;
          case 4:
            num1 = (int) num2 * -241063554 ^ -1991387195;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = (int) num2 * 238310052 ^ -594924533;
            continue;
          case 7:
label_5:
            this.handleKing(x);
            num1 = -1295265227;
            continue;
          case 8:
            num1 = (int) num2 * 1592357144 ^ 2015275659;
            continue;
          case 9:
            num1 = (int) num2 * -556547888 ^ 1626061411;
            continue;
          case 10:
            pieces = kind;
            num1 = (int) num2 * -2011343995 ^ -622059274;
            continue;
          case 11:
label_9:
            this.handleKnight(x);
            num1 = -126996168;
            continue;
          case 12:
label_14:
            this.handleQueen(x);
            num1 = -1152247571;
            continue;
          case 13:
            num1 = (int) num2 * 1723397197 ^ 1703052409;
            continue;
          case 14:
            num1 = (int) num2 * -1121061073 ^ -1495871420;
            continue;
          case 15:
            goto label_1;
          case 16:
            kind = x.Piece.Kind;
            num1 = (int) num2 * 490724291 ^ -596111794;
            continue;
          case 17:
            switch (pieces)
            {
              case Pieces.Pawn:
                goto label_19;
              case Pieces.Knight:
                goto label_9;
              case Pieces.Bishop:
                goto label_20;
              case Pieces.Rook:
                goto label_21;
              case Pieces.King:
                goto label_5;
              case Pieces.Queen:
                goto label_14;
              default:
                num1 = (int) num2 * 887428004 ^ -2089674162;
                continue;
            }
          case 18:
label_20:
            this.handleBishop(x);
            num1 = -756074541;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
label_1:
      int num1 = -1914043977;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        int num5;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num6;
        Square square;
        bool isEmpty;
        int num7;
        bool flag5;
        bool flag6;
        bool flag7;
        int b;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        int num8;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num2 = (uint) (num1 ^ -1038897495)) % 66U)
        {
          case 0:
            int num19 = !flag5 ? -1533171120 : (num19 = -1491340805);
            num1 = num19 ^ (int) num2 * -261054544;
            continue;
          case 1:
            num5 = x.File + 1;
            num1 = (int) num2 * -93133103 ^ 1884289709;
            continue;
          case 2:
            num3 = x.Rank + 2 * num7;
            this.addMove(num6, num3, x);
            num1 = (int) num2 * -348682064 ^ 277663556;
            continue;
          case 3:
            num9 = this.board[num4, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_44;
          case 4:
            square = this.board[num6, num3];
            num1 = (int) num2 * -502078056 ^ 727385295;
            continue;
          case 5:
            int num20 = flag8 ? -923004271 : (num20 = -1357883806);
            num1 = num20 ^ (int) num2 * -1378638980;
            continue;
          case 6:
            num1 = (int) num2 * -1867948251 ^ 295499527;
            continue;
          case 7:
            int num21 = !flag4 ? 1248138539 : (num21 = 1487499198);
            num1 = num21 ^ (int) num2 * -807334457;
            continue;
          case 8:
            if (num3 < 0)
            {
              num10 = 0;
              break;
            }
            num1 = (int) num2 * -1415732475 ^ 732614001;
            continue;
          case 9:
            if (x.Piece.Color == PieceColor.White)
            {
              num11 = 1;
              goto label_74;
            }
            else
            {
              num1 = (int) num2 * 596455918 ^ 309183952;
              continue;
            }
          case 10:
            num1 = (int) num2 * 1124296581 ^ 863595906;
            continue;
          case 11:
            int num22 = this.board.lastPassantPawn != this.board[num5, x.Rank].Piece ? -1860774605 : (num22 = -1888110024);
            num1 = num22 ^ (int) num2 * -1582479367;
            continue;
          case 12:
            flag6 = !square.IsEmpty;
            num1 = (int) num2 * -1420248543 ^ -136897959;
            continue;
          case 13:
            if (x.Rank == 3)
            {
              num1 = (int) num2 * -1720531795 ^ 1529125847;
              continue;
            }
            num12 = 0;
            goto label_48;
          case 14:
            num10 = num3 < 8 ? 1 : 0;
            break;
          case 15:
            this.addMove(num6, num3, x);
            num1 = (int) num2 * 988024898 ^ -1473539757;
            continue;
          case 16:
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * -372556989 ^ 272542703;
              continue;
            }
            num13 = 1;
            goto label_78;
          case 17:
            num6 = x.File - 1;
            num1 = -426307205;
            continue;
          case 18:
            flag5 = this.board.lastPassantPawn == this.board[num4, x.Rank].Piece;
            num1 = (int) num2 * 203747029 ^ -1191558515;
            continue;
          case 19:
            this.addMove(num6, num3, x);
            num1 = (int) num2 * -2004601213 ^ -339585847;
            continue;
          case 20:
            if (num3 >= 0)
            {
              num1 = (int) num2 * 446012053 ^ 1426622801;
              continue;
            }
            goto label_70;
          case 21:
            num11 = -1;
            goto label_74;
          case 22:
            this.addMove(num6, num3, x);
            num1 = (int) num2 * 1512075880 ^ -1270597450;
            continue;
          case 23:
            if (flag2)
            {
              num15 = 5;
              goto label_32;
            }
            else
            {
              num1 = (int) num2 * -685176310 ^ -391505388;
              continue;
            }
          case 24:
            int num23 = flag1 ? -1559688600 : (num23 = -664147442);
            num1 = num23 ^ (int) num2 * 1105534397;
            continue;
          case 25:
            flag9 = num4 >= 0;
            num1 = (int) num2 * -964528634 ^ -776624378;
            continue;
          case 26:
            num16 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_96;
          case 27:
            num17 = num3 < 8 ? 1 : 0;
            goto label_89;
          case 28:
            num13 = 6;
            goto label_78;
          case 29:
            int num24 = !flag10 ? -711525164 : (num24 = -627548845);
            num1 = num24 ^ (int) num2 * 835544428;
            continue;
          case 30:
            num14 = num3 < 8 ? 1 : 0;
            goto label_71;
          case 31:
            if (this.board[num5, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1877102783 ^ 1838260336;
              continue;
            }
            num18 = 0;
            goto label_28;
          case 32:
            square = this.board[num6, num3];
            isEmpty = square.IsEmpty;
            num1 = (int) num2 * 1581436199 ^ -1417164556;
            continue;
          case 33:
            int num25 = this.board[num4, x.Rank].Piece != null ? 1274009179 : (num25 = 347461424);
            num1 = num25 ^ (int) num2 * -1266308352;
            continue;
          case 34:
            int num26 = !flag6 ? -1545471146 : (num26 = -1786707660);
            num1 = num26 ^ (int) num2 * 633184019;
            continue;
          case 35:
            int num27 = flag7 ? 323442676 : (num27 = 1734239782);
            num1 = num27 ^ (int) num2 * -364523796;
            continue;
          case 36:
            num3 = x.Rank + num7;
            if (num6 < 8)
            {
              num1 = (int) num2 * -501925923 ^ -486922943;
              continue;
            }
            goto label_70;
          case 37:
            num12 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_48;
          case 38:
            num18 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_28;
          case 39:
            int num28;
            num1 = num28 = num5 < 8 ? -1768084197 : (num28 = -1323387214);
            continue;
          case 40:
            num1 = (int) num2 * -2060889522 ^ -705535361;
            continue;
          case 41:
            int num29;
            num1 = num29 = x.Rank == num8 ? -1634824523 : (num29 = -1460084700);
            continue;
          case 42:
            num1 = -258988866;
            continue;
          case 43:
            num1 = -23866369;
            continue;
          case 44:
            num4 = x.File - 1;
            num1 = (int) num2 * -1314155388 ^ 1386052132;
            continue;
          case 45:
            num1 = (int) num2 * 915695751 ^ 544291335;
            continue;
          case 46:
            if (this.board[num4, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 182432771 ^ 2088025216;
              continue;
            }
            num9 = 0;
            goto label_44;
          case 47:
            if (num3 >= 0)
            {
              num1 = (int) num2 * 112856273 ^ -1999071965;
              continue;
            }
            goto label_88;
          case 48:
            this.addCapture(num4, b, x, this.board[num4, x.Rank].Piece);
            num1 = (int) num2 * -1533473141 ^ 2133667845;
            continue;
          case 49:
            num1 = -1004357626;
            continue;
          case 50:
            num3 = x.Rank + num7;
            if (num6 >= 0)
            {
              num1 = (int) num2 * -186050426 ^ -50028390;
              continue;
            }
            goto label_88;
          case 51:
            if (x.Rank == 4)
            {
              num1 = -1314229289;
              continue;
            }
            num16 = 0;
            goto label_96;
          case 52:
            num1 = (int) num2 * 618675610 ^ -597658591;
            continue;
          case 53:
            int num30 = flag11 ? -1747563677 : (num30 = -1943554688);
            num1 = num30 ^ (int) num2 * 1380752245;
            continue;
          case 54:
            goto label_3;
          case 55:
            int num31 = !flag9 ? -1047065585 : (num31 = -66180849);
            num1 = num31 ^ (int) num2 * 10102087;
            continue;
          case 56:
            num6 = 0;
            num3 = 0;
            num1 = (int) num2 * -1186279930 ^ -1332078733;
            continue;
          case 57:
            int num32 = !isEmpty ? -2094633655 : (num32 = -783211278);
            num1 = num32 ^ (int) num2 * 1467417164;
            continue;
          case 58:
            flag1 = this.board[num5, x.Rank].Piece != null;
            num1 = (int) num2 * 1298564311 ^ 65235387;
            continue;
          case 59:
            square = this.board[num6, num3];
            flag8 = !square.IsEmpty;
            num1 = (int) num2 * -1462365873 ^ 1472288609;
            continue;
          case 60:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num1 = (int) num2 * -713389612 ^ 171179018;
            continue;
          case 61:
            num15 = 2;
            goto label_32;
          case 62:
            goto label_1;
          case 63:
            num6 = x.File + 1;
            num1 = -1841738097;
            continue;
          case 64:
            flag4 = flag2 | flag3;
            num1 = (int) num2 * 180154109 ^ 1682493270;
            continue;
          case 65:
            num1 = -377922642;
            continue;
          default:
            goto label_100;
        }
        int num33;
        num1 = num33 = num10 != 0 ? -971621969 : (num33 = -258988866);
        continue;
label_28:
        flag7 = num18 != 0;
        num1 = -913774794;
        continue;
label_32:
        b = num15;
        num1 = -511238219;
        continue;
label_44:
        flag10 = num9 != 0;
        num1 = -629723054;
        continue;
label_48:
        flag3 = num12 != 0;
        num1 = -792292342;
        continue;
label_70:
        num14 = 0;
label_71:
        flag11 = num14 != 0;
        num1 = -2068123382;
        continue;
label_74:
        num7 = num11;
        num6 = x.File;
        num3 = x.Rank + num7;
        num1 = -1312581099;
        continue;
label_78:
        num8 = num13;
        num1 = -1765170714;
        continue;
label_88:
        num17 = 0;
label_89:
        int num34;
        num1 = num34 = num17 != 0 ? -1745016495 : (num34 = -1004357626);
        continue;
label_96:
        flag2 = num16 != 0;
        num1 = -876267108;
      }
label_3:
      return;
label_100:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = -47524010;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1169286005)) % 4U)
        {
          case 0:
            this.handleBishop(x);
            num1 = (int) num2 * -146013257 ^ 704988084;
            continue;
          case 1:
            this.handleRook(x);
            num1 = (int) num2 * 2130220206 ^ -1633599867;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
label_1:
      int num1 = -1295854694;
      bool canCastleQueenSide;
      bool flag;
      bool canCastleKingSide;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -792268433)) % 25U)
        {
          case 0:
            goto label_1;
          case 1:
            canCastleQueenSide = this.board.WhiteCanCastleQueenSide;
            num1 = -1279804986;
            continue;
          case 2:
            num1 = (int) num2 * 1909354739 ^ 1761645865;
            continue;
          case 3:
            int num3 = !canCastleQueenSide ? 2140926934 : (num3 = 1277188466);
            num1 = num3 ^ (int) num2 * -1994089196;
            continue;
          case 4:
            int num4;
            num1 = num4 = this.board.BlackCanCastleQueenSide ? -1370090943 : (num4 = -1338501449);
            continue;
          case 5:
            num1 = -687140125;
            continue;
          case 6:
            num1 = (int) num2 * 1084933918 ^ -1844401934;
            continue;
          case 7:
            num1 = -844243775;
            continue;
          case 8:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1326697888 ^ -1629764489;
            continue;
          case 9:
            int num5 = !flag ? -1332061687 : (num5 = -1994889111);
            num1 = num5 ^ (int) num2 * 358412783;
            continue;
          case 10:
            goto label_3;
          case 11:
            this.addMove(x.File + 1, x.Rank - 1, x);
            num1 = (int) num2 * 2019259375 ^ 1722421603;
            continue;
          case 12:
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 1405955375 ^ -750451390;
            continue;
          case 13:
            int num6 = !canCastleKingSide ? -427043060 : (num6 = -1091731431);
            num1 = num6 ^ (int) num2 * -2093538954;
            continue;
          case 14:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 1473459610 ^ 60027535;
            continue;
          case 15:
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * -425978846 ^ -192505669;
            continue;
          case 16:
            int num7 = !this.board.WhiteCanCastleKingSide ? 347034072 : (num7 = 14170038);
            num1 = num7 ^ (int) num2 * -1261201511;
            continue;
          case 17:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1350812475 ^ 100659669;
            continue;
          case 18:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -711859801 ^ -342118686;
            continue;
          case 19:
            flag = x.Piece.Color == PieceColor.Black;
            num1 = -694059817;
            continue;
          case 20:
            canCastleKingSide = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * 312807115 ^ -700805249;
            continue;
          case 21:
            num1 = (int) num2 * -663234145 ^ 822791667;
            continue;
          case 22:
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * -1619178148 ^ -310858455;
            continue;
          case 23:
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * 2087151282 ^ 1097541149;
            continue;
          case 24:
            int num8 = x.Piece.Color == PieceColor.White ? -649173598 : (num8 = -362404761);
            num1 = num8 ^ (int) num2 * 931548588;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
      Square square2 = this.board[x.File - 2, x.Rank];
      Square square3 = this.board[x.File - 3, x.Rank];
label_1:
      int num1 = 1594501762;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 38352523)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            int num4 = !flag ? 1766303086 : (num4 = 118888123);
            num1 = num4 ^ (int) num2 * 174792212;
            continue;
          case 2:
            goto label_1;
          case 3:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 289038264 ^ 1181605512;
              continue;
            }
            break;
          case 4:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -1624400700 ^ -1046747246;
            continue;
          case 5:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -619706636 ^ -1511895807;
              continue;
            }
            break;
          case 6:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_7;
          default:
            goto label_13;
        }
        num3 = 0;
label_7:
        flag = num3 != 0;
        num1 = 1002545452;
      }
label_3:
      return;
label_13:;
    }

    private void handleSmallCastling(Square x)
    {
      Square square1 = this.board[x.File + 1, x.Rank];
      Square square2 = this.board[x.File + 2, x.Rank];
      if (!square1.IsEmpty)
        goto label_5;
label_1:
      int num1 = -917665552;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -641549779)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_4;
          case 2:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -1211016274 ^ -1544662690;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_4:
      int num3 = square2.IsEmpty ? 1 : 0;
      goto label_6;
label_5:
      num3 = 0;
label_6:
      num1 = num3 != 0 ? -802835981 : (num1 = -1651397702);
      goto label_2;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = -159599165;
      int num2;
      bool flag1;
      int num3;
      int b1;
      int a;
      bool flag2;
      int num4;
      bool flag3;
      int num5;
      bool flag4;
      bool flag5;
      bool flag6;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -948860545)) % 38U)
        {
          case 0:
            int num7 = !flag4 ? 570054120 : (num7 = 1016570851);
            num1 = num7 ^ (int) num6 * 1432761482;
            continue;
          case 1:
            a = x.File - num4;
            num1 = -80002730;
            continue;
          case 2:
            ++num4;
            num1 = -963979932;
            continue;
          case 3:
            num1 = (int) num6 * 11058651 ^ -977090959;
            continue;
          case 4:
            ++num2;
            num1 = (int) num6 * 2137350219 ^ 1308209611;
            continue;
          case 5:
            flag6 = this.addMove(x.File, b1, x);
            num1 = (int) num6 * 626540689 ^ -1168072439;
            continue;
          case 6:
            b1 = x.Rank + num3;
            num1 = (int) num6 * 234886302 ^ -653412870;
            continue;
          case 7:
            flag5 = num5 < 8;
            num1 = -1998546432;
            continue;
          case 8:
            flag4 = num2 < 8;
            num1 = -1451121509;
            continue;
          case 9:
            flag2 = this.addMove(a, x.Rank, x);
            num1 = (int) num6 * 1345992469 ^ -581267157;
            continue;
          case 10:
            num1 = -402309537;
            continue;
          case 11:
            int num8 = !flag1 ? -127363117 : (num8 = -1150743635);
            num1 = num8 ^ (int) num6 * -1732822964;
            continue;
          case 12:
            num4 = 1;
            num1 = -175385424;
            continue;
          case 13:
            ++num5;
            num1 = (int) num6 * 1236137244 ^ 171196622;
            continue;
          case 14:
            num1 = (int) num6 * -1337742867 ^ -1131677241;
            continue;
          case 15:
            goto label_3;
          case 16:
            num2 = 1;
            num1 = -2038163541;
            continue;
          case 17:
            int num9 = flag2 ? -1490381747 : (num9 = -574998181);
            num1 = num9 ^ (int) num6 * -2014742940;
            continue;
          case 18:
            num1 = -1464472525;
            continue;
          case 19:
            num1 = -320824160;
            continue;
          case 20:
            int b2 = x.Rank - num2;
            flag1 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * 249938846 ^ 1198606684;
            continue;
          case 21:
            int num10 = flag6 ? 1282143760 : (num10 = 105460808);
            num1 = num10 ^ (int) num6 * -1770617050;
            continue;
          case 22:
            num1 = (int) num6 * 1293592276 ^ -1048513552;
            continue;
          case 23:
            ++num3;
            num1 = (int) num6 * 1146673187 ^ -644591709;
            continue;
          case 24:
            num1 = (int) num6 * 904476873 ^ -1571411546;
            continue;
          case 25:
            num1 = -679773428;
            continue;
          case 26:
            num1 = (int) num6 * -742463518 ^ 644098978;
            continue;
          case 27:
            flag3 = num4 < 8;
            num1 = -1953239244;
            continue;
          case 28:
            num1 = (int) num6 * -1831188583 ^ -1810720098;
            continue;
          case 29:
            num1 = (int) num6 * 1975163293 ^ -171445730;
            continue;
          case 30:
            num1 = -1488601225;
            continue;
          case 31:
            int num11;
            num1 = num11 = num3 < 8 ? -98627667 : (num11 = -1050251225);
            continue;
          case 32:
            goto label_1;
          case 33:
            int num12 = flag3 ? 2122792519 : (num12 = 598938775);
            num1 = num12 ^ (int) num6 * -1806964163;
            continue;
          case 34:
            num3 = 1;
            num1 = (int) num6 * -1393224486 ^ -1498833341;
            continue;
          case 35:
            num5 = 1;
            num1 = -817172677;
            continue;
          case 36:
            int num13;
            num1 = num13 = !this.addMove(x.File + num5, x.Rank, x) ? -931580428 : (num13 = -2106097693);
            continue;
          case 37:
            int num14 = flag5 ? 1212998417 : (num14 = 1142562173);
            num1 = num14 ^ (int) num6 * -598178774;
            continue;
          default:
            goto label_40;
        }
      }
label_3:
      return;
label_40:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = -247564908;
      int num2;
      int num3;
      int a1;
      int b1;
      int num4;
      bool flag1;
      int b2;
      int num5;
      int a2;
      int a3;
      bool flag2;
      int a4;
      int b3;
      bool flag3;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1910402864)) % 36U)
        {
          case 0:
            a2 = x.File - num5;
            num1 = (int) num6 * 2017003002 ^ -1992195339;
            continue;
          case 1:
            flag1 = num3 < 8;
            num1 = -1624340767;
            continue;
          case 2:
            b2 = x.Rank - num4;
            num1 = (int) num6 * 1231384893 ^ 1046704810;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = -113748981;
            continue;
          case 5:
            int b4 = x.Rank + num5;
            flag2 = this.addMove(a2, b4, x);
            num1 = (int) num6 * 644586586 ^ 1159446052;
            continue;
          case 6:
            num1 = -901926700;
            continue;
          case 7:
            ++num4;
            num1 = -1629584261;
            continue;
          case 8:
            flag3 = this.addMove(a3, b2, x);
            num1 = (int) num6 * -1636274864 ^ -1532583868;
            continue;
          case 9:
            num4 = 1;
            num1 = -1629584261;
            continue;
          case 10:
            int num7 = flag2 ? -1804973146 : (num7 = -131602921);
            num1 = num7 ^ (int) num6 * -77445117;
            continue;
          case 11:
            num3 = 1;
            num1 = -1960658639;
            continue;
          case 12:
            a1 = x.File + num3;
            b1 = x.Rank - num3;
            num1 = -1696344055;
            continue;
          case 13:
            num1 = -2026841010;
            continue;
          case 14:
            ++num5;
            num1 = (int) num6 * 1657915473 ^ -1735131205;
            continue;
          case 15:
            num1 = (int) num6 * -123734271 ^ 473066674;
            continue;
          case 16:
            num1 = (int) num6 * 1058925148 ^ -578717229;
            continue;
          case 17:
            int num8;
            num1 = num8 = num5 < 8 ? -689801706 : (num8 = -546491485);
            continue;
          case 18:
            a4 = x.File + num2;
            num1 = -593321554;
            continue;
          case 19:
            a3 = x.File - num4;
            num1 = (int) num6 * -1123480817 ^ 744913035;
            continue;
          case 20:
            int num9 = flag3 ? -927940765 : (num9 = -1872557521);
            num1 = num9 ^ (int) num6 * 271650485;
            continue;
          case 21:
            ++num2;
            num1 = -1653744186;
            continue;
          case 22:
            int num10 = !this.addMove(a4, b3, x) ? -12101355 : (num10 = -755534694);
            num1 = num10 ^ (int) num6 * 201893172;
            continue;
          case 23:
            goto label_1;
          case 24:
            num1 = (int) num6 * -913041207 ^ 722220509;
            continue;
          case 25:
            int num11 = !flag1 ? 632032667 : (num11 = 1680462854);
            num1 = num11 ^ (int) num6 * 1810669994;
            continue;
          case 26:
            int num12;
            num1 = num12 = num2 < 8 ? -1948743014 : (num12 = -302081185);
            continue;
          case 27:
            int num13;
            num1 = num13 = num4 >= 8 ? -2038436797 : (num13 = -183535648);
            continue;
          case 28:
            num1 = (int) num6 * 1326564411 ^ 530117986;
            continue;
          case 29:
            int num14 = !this.addMove(a1, b1, x) ? 249272857 : (num14 = 1591629476);
            num1 = num14 ^ (int) num6 * -1011136296;
            continue;
          case 30:
            num1 = (int) num6 * -410356318 ^ 622868091;
            continue;
          case 31:
            num5 = 1;
            num1 = -338592473;
            continue;
          case 32:
            num2 = 1;
            num1 = (int) num6 * -994902187 ^ -190600984;
            continue;
          case 33:
            ++num3;
            num1 = -1960658639;
            continue;
          case 34:
            b3 = x.Rank + num2;
            num1 = (int) num6 * -1541713078 ^ -1556304486;
            continue;
          case 35:
            num1 = (int) num6 * -993490936 ^ 1609276155;
            continue;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    private void handleKnight(Square x)
    {
      ChessPiece piece = x.Piece;
      int[] numArray1 = new int[8];
      // ISSUE: field reference
      MoveFinder.\u206B⁫‫‎⁬​‭‮⁫⁮⁭​⁮⁯‮‮‫​⁯‏‭‌⁯⁬‮‪⁯⁭‌⁬⁭‬‪⁭​⁯‎⁮‭⁯‮((Array) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
      int[] numArray2 = numArray1;
label_1:
      int num1 = 263830688;
      while (true)
      {
        uint num2;
        int Rank;
        Square sq;
        bool isEmpty;
        int File;
        int index;
        int[] numArray3;
        int num3;
        switch ((num2 = (uint) (num1 ^ 772672758)) % 22U)
        {
          case 0:
            goto label_1;
          case 1:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -651090144 ^ -1208033793;
              continue;
            }
            break;
          case 2:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -1174305186 ^ -1940107726;
            continue;
          case 3:
            if (File >= 0)
            {
              num1 = (int) num2 * 1909896197 ^ 1963551592;
              continue;
            }
            break;
          case 4:
            int num4 = isEmpty ? -1105579981 : (num4 = -1438378390);
            num1 = num4 ^ (int) num2 * 966387393;
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * -996293430 ^ 21085335;
            continue;
          case 6:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206B⁫‫‎⁬​‭‮⁫⁮⁭​⁮⁯‮‮‫​⁯‏‭‌⁯⁬‮‪⁯⁭‌⁬⁭‬‪⁭​⁯‎⁮‭⁯‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray3 = numArray4;
            num1 = (int) num2 * 2058588728 ^ 1433737581;
            continue;
          case 7:
            num1 = (int) num2 * 790705248 ^ 1246405709;
            continue;
          case 8:
            ++index;
            num1 = 249031097;
            continue;
          case 9:
            num1 = 438933164;
            continue;
          case 10:
            sq = this.board[File, Rank];
            num1 = 1210152221;
            continue;
          case 11:
            goto label_3;
          case 12:
            File = x.File + numArray2[index];
            Rank = x.Rank + numArray3[index];
            num1 = (int) num2 * 1564864522 ^ -1146024703;
            continue;
          case 13:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * -563000261 ^ 443582999;
            continue;
          case 14:
            num1 = (int) num2 * 1043459248 ^ -1677697811;
            continue;
          case 15:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -1494176230 ^ 1609558841;
            continue;
          case 16:
            num1 = 68451798;
            continue;
          case 17:
            num1 = (int) num2 * -952938974 ^ -760328202;
            continue;
          case 18:
            int num5;
            num1 = num5 = sq.Piece.Color != x.Piece.Color ? 601754874 : (num5 = 108853933);
            continue;
          case 19:
            int num6;
            num1 = num6 = index >= 8 ? 1298297677 : (num6 = 1022187836);
            continue;
          case 20:
            num3 = Rank > 7 ? 1 : 0;
            goto label_22;
          case 21:
            if (File <= 7)
            {
              num1 = (int) num2 * -497353579 ^ 1784995607;
              continue;
            }
            break;
          default:
            goto label_29;
        }
        num3 = 1;
label_22:
        int num7;
        num1 = num7 = num3 == 0 ? 2008319980 : (num7 = 505384747);
      }
label_3:
      return;
label_29:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
      ChessPiece piece = x.Piece;
label_1:
      int num1 = 1398388611;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 273768701)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            Square sq = this.board[a, b];
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * 986574908 ^ 1103581417;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 670702154 ^ -235631807;
            continue;
          case 4:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -821681616 ^ 83190914;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_32;
label_1:
      int num1 = -1991293425;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        bool flag3;
        bool flag4;
        UserAction kind;
        ChessPiece piece;
        Square sq;
        bool flag5;
        int num3;
        switch ((num2 = (uint) (num1 ^ -977360752)) % 31U)
        {
          case 0:
            int num4 = flag3 ? -1394350992 : (num4 = -1549383244);
            num1 = num4 ^ (int) num2 * -1851017775;
            continue;
          case 1:
            num1 = (int) num2 * -474129321 ^ 1377946341;
            continue;
          case 2:
            num1 = (int) num2 * -639774263 ^ -504399861;
            continue;
          case 3:
            int num5 = !flag4 ? 1379963378 : (num5 = 1948252673);
            num1 = num5 ^ (int) num2 * -1970309690;
            continue;
          case 4:
            flag1 = false;
            num1 = -1353393379;
            continue;
          case 5:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = -463367876;
            continue;
          case 6:
            if (x.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -1908195418 ^ 315299770;
              continue;
            }
            num3 = 0;
            break;
          case 7:
            int num6 = !flag5 ? 1714811858 : (num6 = 907139151);
            num1 = num6 ^ (int) num2 * 694610513;
            continue;
          case 8:
            int num7 = !flag2 ? 2097409753 : (num7 = 506485481);
            num1 = num7 ^ (int) num2 * 514411536;
            continue;
          case 9:
            num1 = -1287474574;
            continue;
          case 10:
            if (a <= 7)
            {
              num1 = (int) num2 * -943748625 ^ 586346498;
              continue;
            }
            goto label_32;
          case 12:
            num1 = (int) num2 * 1221362181 ^ -193675456;
            continue;
          case 13:
            goto label_1;
          case 14:
            int num8 = !sq.IsEmpty ? 78038095 : (num8 = 2055284657);
            num1 = num8 ^ (int) num2 * 2007949907;
            continue;
          case 15:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1021723091 ^ -190924928;
            continue;
          case 16:
            num1 = (int) num2 * 332193872 ^ 673865774;
            continue;
          case 17:
            flag5 = sq.Piece.Color != x.Piece.Color;
            num1 = -1184703443;
            continue;
          case 18:
            if (b >= 0)
            {
              num1 = (int) num2 * -232102175 ^ -988706836;
              continue;
            }
            goto label_32;
          case 19:
            num1 = (int) num2 * 575472699 ^ -726485037;
            continue;
          case 20:
            piece = x.Piece;
            sq = this.board[a, b];
            num1 = -982114445;
            continue;
          case 21:
            flag1 = true;
            num1 = (int) num2 * 1048365280 ^ 252572375;
            continue;
          case 22:
            num1 = (int) num2 * 1333771335 ^ 1093406511;
            continue;
          case 23:
            goto label_31;
          case 24:
            num1 = (int) num2 * 1213195422 ^ 658317059;
            continue;
          case 25:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * -1253001505 ^ -48938588;
            continue;
          case 26:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 27:
            kind = UserAction.Capture;
            num1 = (int) num2 * 254882787 ^ 380214746;
            continue;
          case 28:
            flag4 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * -741235975 ^ 212596748;
            continue;
          case 29:
            flag1 = true;
            num1 = -2000600090;
            continue;
          case 30:
            flag1 = true;
            num1 = (int) num2 * -1503472477 ^ -1707943050;
            continue;
          default:
            goto label_39;
        }
        flag3 = num3 != 0;
        num1 = -1478396520;
      }
label_31:
      int num9 = b > 7 ? 1 : 0;
      goto label_33;
label_39:
      return flag1;
label_32:
      num9 = 1;
label_33:
      flag2 = num9 != 0;
      num1 = -1235746985;
      goto label_2;
    }

    static void \u206B⁫‫‎⁬​‭‮⁫⁮⁭​⁮⁯‮‮‫​⁯‏‭‌⁯⁬‮‪⁯⁭‌⁬⁭‬‪⁭​⁯‎⁮‭⁯‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
