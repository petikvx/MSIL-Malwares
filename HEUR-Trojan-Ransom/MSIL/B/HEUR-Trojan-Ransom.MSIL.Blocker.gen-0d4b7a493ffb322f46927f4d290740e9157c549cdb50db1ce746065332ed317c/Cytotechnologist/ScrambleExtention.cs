// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.ScrambleExtention
// Assembly: ByteTokenEncodi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 9BCE2B70-1A4C-43FA-BCC8-8DBBEE1C54F3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0d4b7a493ffb322f46927f4d290740e9157c549cdb50db1ce746065332ed317c.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public static class ScrambleExtention
  {
    private static readonly Random Random = ScrambleExtention.\u206B⁯‮‫⁬‬‏‌‌‬⁮‪​‬⁪⁬‪‪‮‌⁬⁬‬‮⁪‍⁫⁯‪‌‬​‬⁬⁭⁭‪⁬⁯‪‮();

    public static void Shuffle<T>(IList<T> list)
    {
label_1:
      int num1 = 1745136704;
      int index;
      int count;
      T obj;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1354833032)) % 12U)
        {
          case 0:
            goto label_3;
          case 1:
            flag = count > 1;
            num1 = 986780178;
            continue;
          case 2:
            int num3 = !flag ? -1610330720 : (num3 = -1597575043);
            num1 = num3 ^ (int) num2 * -1708861292;
            continue;
          case 3:
            list[count] = obj;
            num1 = (int) num2 * 55369261 ^ -1026615834;
            continue;
          case 4:
            num1 = (int) num2 * 1039995522 ^ -1503009435;
            continue;
          case 5:
            --count;
            index = ScrambleExtention.\u202E⁮‮‬‬⁫⁮⁫‬⁫‫‭‏‏‎‏‍‪‭‫⁬⁪‌‍⁮‪⁮⁯‍‏‫‭‏‬‮⁮‮‫‪‮(ScrambleExtention.Random, count + 1);
            num1 = 1649603514;
            continue;
          case 6:
            obj = list[index];
            num1 = (int) num2 * -1237454196 ^ 953108163;
            continue;
          case 7:
            list[index] = list[count];
            num1 = (int) num2 * 1360150264 ^ 1470791683;
            continue;
          case 8:
            count = list.Count;
            num1 = (int) num2 * -447554348 ^ 817626423;
            continue;
          case 9:
            num1 = (int) num2 * -1610398480 ^ -1311511104;
            continue;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num2 * -1973939857 ^ 1705798500;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    static int \u202E⁮‮‬‬⁫⁮⁫‬⁫‫‭‏‏‎‏‍‪‭‫⁬⁪‌‍⁮‪⁮⁯‍‏‫‭‏‬‮⁮‮‫‪‮([In] Random obj0, [In] int obj1) => obj0.Next(obj1);

    static Random \u206B⁯‮‫⁬‬‏‌‌‬⁮‪​‬⁪⁬‪‪‮‌⁬⁬‬‮⁪‍⁫⁯‪‌‬​‬⁬⁭⁭‪⁬⁯‪‮() => new Random();
  }
}
