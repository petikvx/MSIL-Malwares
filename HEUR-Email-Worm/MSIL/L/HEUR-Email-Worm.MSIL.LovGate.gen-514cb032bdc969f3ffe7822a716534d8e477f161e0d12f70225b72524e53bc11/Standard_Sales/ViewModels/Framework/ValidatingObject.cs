// Decompiled with JetBrains decompiler
// Type: Standard_Sales.ViewModels.Framework.ValidatingObject
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;

namespace Standard_Sales.ViewModels.Framework
{
  public abstract class ValidatingObject : 
    ObservableObject,
    INotifyPropertyChanged,
    IDataErrorInfo,
    IObservableObject,
    IValidatingObject
  {
    public const string PROP_HAS_ERRORS = "HasErrors";
    private Dictionary<string, string> _errors = new Dictionary<string, string>();

    public virtual string Error => (string) null;

    public bool HasErrors
    {
      get
      {
        bool hasErrors = this._errors.Count != 0;
label_1:
        int num1 = -780877206;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -891906134)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -944745436 ^ -330603921;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return hasErrors;
      }
    }

    public string this[string propertyName]
    {
      get
      {
label_1:
        int num1 = 49521586;
        string str1;
        while (true)
        {
          uint num2;
          string str2;
          switch ((num2 = (uint) (num1 ^ 1301011199)) % 5U)
          {
            case 0:
              str2 = (string) null;
              break;
            case 2:
              this.RemoveError(propertyName);
              this.ValidateProperty(propertyName);
              this.RaisePropertyChanged<bool>(Expression.Lambda<Func<bool>>((Expression) ValidatingObject.\u206A⁪⁬‮‬⁬‭⁮‫‌‎‌⁭⁪‭‪‮​‎‪⁮⁮‌‪‌⁬‎⁫‭‌⁬⁪⁯⁯⁪⁪‎⁮‮⁫‮((Expression) ValidatingObject.\u200E‮‪‍⁪‬⁪‪⁫⁯‭‪‫‌⁬‫⁮​‮‏‮⁪‫⁯‍⁮⁭⁭​⁫‬⁯‪‮‬‪‭⁯‮‏‮((object) this, ValidatingObject.\u206C⁯⁬‎‍‭‎‬‌‫⁭⁬‫‌​‎‪⁫‍‍‍⁮‭⁫‌⁪‏‬‫‭⁫‮‭⁮⁮⁯⁪‪‭⁪‮(__typeref (ValidatingObject))), (MethodInfo) ValidatingObject.\u206A⁪⁭⁮‭‎‭‎‬⁬​⁬‪‏‏‭⁫‌‎‮‮⁫⁮‪‏‌‫‎‭‬‫‎‭⁮‪⁫⁪‭‬‎‮(__methodref (ValidatingObject.get_HasErrors)))));
              num1 = (int) num2 * -737914594 ^ 1563390649;
              continue;
            case 3:
              goto label_1;
            case 4:
              if (this._errors.ContainsKey(propertyName))
              {
                str2 = this._errors[propertyName];
                break;
              }
              num1 = (int) num2 * -183554005 ^ 337960164;
              continue;
            default:
              goto label_9;
          }
          str1 = str2;
          num1 = 1861814230;
        }
label_9:
        return str1;
      }
    }

    protected void AddError(string propertyName, string message)
    {
label_1:
      int num1 = -1200525950;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1653553579)) % 6U)
        {
          case 0:
            int num3 = !flag ? 838645220 : (num3 = 1190648073);
            num1 = num3 ^ (int) num2 * 2020677883;
            continue;
          case 1:
            flag = !this._errors.ContainsKey(propertyName);
            num1 = (int) num2 * 642126001 ^ 1533600920;
            continue;
          case 2:
            this._errors[propertyName] = message;
            num1 = (int) num2 * -887203535 ^ 1360348443;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1572157298 ^ -756505598;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    protected virtual void ValidateProperty(string propertyName)
    {
    }

    [System.Runtime.Serialization.OnDeserializing]
    private void OnDeserializing(StreamingContext context)
    {
label_1:
      int num1 = -1392377054;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1835328897)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this._errors = new Dictionary<string, string>();
            num1 = (int) num2 * 1576230071 ^ -1997651189;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    private void RemoveError(string propertyName)
    {
label_1:
      int num1 = -1906201033;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1377133797)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this._errors.Remove(propertyName);
            num1 = (int) num2 * 555234138 ^ 284523268;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Type \u206C⁯⁬‎‍‭‎‬‌‫⁭⁬‫‌​‎‪⁫‍‍‍⁮‭⁫‌⁪‏‬‫‭⁫‮‭⁮⁮⁯⁪‪‭⁪‮([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

    static ConstantExpression \u200E‮‪‍⁪‬⁪‪⁫⁯‭‪‫‌⁬‫⁮​‮‏‮⁪‫⁯‍⁮⁭⁭​⁫‬⁯‪‮‬‪‭⁯‮‏‮(
      [In] object obj0,
      [In] Type obj1)
    {
      return Expression.Constant(obj0, obj1);
    }

    static MethodBase \u206A⁪⁭⁮‭‎‭‎‬⁬​⁬‪‏‏‭⁫‌‎‮‮⁫⁮‪‏‌‫‎‭‬‫‎‭⁮‪⁫⁪‭‬‎‮(
      [In] RuntimeMethodHandle obj0)
    {
      return MethodBase.GetMethodFromHandle(obj0);
    }

    static MemberExpression \u206A⁪⁬‮‬⁬‭⁮‫‌‎‌⁭⁪‭‪‮​‎‪⁮⁮‌‪‌⁬‎⁫‭‌⁬⁪⁯⁯⁪⁪‎⁮‮⁫‮(
      [In] Expression obj0,
      [In] MethodInfo obj1)
    {
      return Expression.Property(obj0, obj1);
    }
  }
}
