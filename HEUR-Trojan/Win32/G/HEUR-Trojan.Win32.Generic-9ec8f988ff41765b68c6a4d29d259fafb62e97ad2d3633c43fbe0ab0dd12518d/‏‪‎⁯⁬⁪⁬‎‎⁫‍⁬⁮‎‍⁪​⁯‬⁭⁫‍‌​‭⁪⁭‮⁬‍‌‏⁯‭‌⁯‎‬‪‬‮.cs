// Decompiled with JetBrains decompiler
// Type: ‏‪‎⁯⁬⁪⁬‎‎⁫‍⁬⁮‎‍⁪​⁯‬⁭⁫‍‌​‭⁪⁭‮⁬‍‌‏⁯‭‌⁯‎‬‪‬‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Text;
using System.Windows.Forms;

public static class \u200F‪‎⁯⁬⁪⁬‎‎⁫‍⁬⁮‎‍⁪​⁯‬⁭⁫‍‌​‭⁪⁭‮⁬‍‌‏⁯‭‌⁯‎‬‪‬‮
{
  public static byte[] \u206C‭‬‮‌⁪⁪‍‮‮⁯‭‭‍‪⁯‪​‮‫‮⁯‪‌​‪‭‪‎​‫⁪‮⁬⁫‍‬‮⁬‬‮(
    string _param0,
    Encoding _param1)
  {
    return _param1.GetBytes(_param0);
  }

  public static bool \u200E‍‮‮‪‌⁬‮‎‫‌‪‏‫‎​‎‪⁮‮‭‫‮‎‌⁪‭‬⁯⁯⁪‏‍⁮​‌‌‎​⁮‮ => SystemInformation.TerminalServerSession;

  public static bool \u206E‌‬⁫‫‬‌⁪⁫‫‭‏⁮‍⁮​‏‎‮⁬⁯‏‏‫⁪‌‎‎‮⁮⁯‏‭‎​​⁭‏‏‮‮ => Process.GetProcessesByName("SbieCtrl").Length != 0 && \u200B⁯‪‮‌⁬⁯‮‌⁯‭⁫‮‮‍⁪‫‮‭⁯⁮⁭‮⁪‫⁬⁮⁮‭⁬‏‎⁯‭‮⁪‪‎‪‭‮.\u202A‍​‍⁮⁭⁮‬‍​‏‬⁭‬⁯‍‭‎‎⁪‎⁫‫⁭​‫‍‮⁭‭⁯‪⁮‫⁫⁭⁪‮⁭‪‮("SbieDll.dll") != IntPtr.Zero;

  public static bool \u200F‌‬‏​​‏‬‌‫‍‬⁭‮‭‮‪⁬⁯‮⁯‍‌⁬⁬⁪⁫⁮⁬⁭⁯‍‍⁭‪‮⁭‭‍‬‮()
  {
    List<string> stringList = new List<string>()
    {
      "virtual",
      "vmbox",
      "vmware",
      "virtualbox",
      "box",
      "thinapp",
      "VMXh",
      "innotek gmbh",
      "tpvcgateway",
      "tpautoconnsvc",
      "vbox",
      "kvm",
      "red hat"
    };
    using (List<string>.Enumerator enumerator = \u200F‪‎⁯⁬⁪⁬‎‎⁫‍⁬⁮‎‍⁪​⁯‬⁭⁫‍‌​‭⁪⁭‮⁬‍‌‏⁯‭‌⁯‎‬‪‬‮.\u200F⁬‭‫⁭⁬‪⁯‬‭‎‪‌‪⁯⁫⁫⁫​⁬‪⁫⁪‮⁮‫‎⁫‪‌‪⁪‎‫⁬‏‫⁬‌‮().GetEnumerator())
    {
      if (enumerator.MoveNext())
      {
        string current = enumerator.Current;
        return stringList.Contains(current);
      }
    }
    return false;
  }

  private static List<string> \u200F⁬‭‫⁭⁬‪⁯‬‭‎‪‌‪⁯⁫⁫⁫​⁬‪⁫⁪‮⁮‫‎⁫‪‌‪⁪‎‫⁬‏‫⁬‌‮()
  {
    List<string> stringList = new List<string>();
    try
    {
      ManagementObject managementObject = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_ComputerSystem").Get().OfType<ManagementObject>().Where<ManagementObject>((Func<ManagementObject, bool>) (_param1 => _param1 != null)).FirstOrDefault<ManagementObject>();
      stringList.Add(managementObject["Manufacturer"]?.ToString().ToLower());
      stringList.Add(managementObject["Model"]?.ToString().ToLower());
    }
    catch
    {
    }
    return stringList;
  }

  public static bool \u200E‍‮​‬⁪‏‬⁫⁭⁪‍‮​⁮‫‎⁮‬⁫​⁭‌‪‮⁫‮‮⁫‌‭‭‫‌⁮‪‫⁯‏⁭‮() => \u200F‪‎⁯⁬⁪⁬‎‎⁫‍⁬⁮‎‍⁪​⁯‬⁭⁫‍‌​‭⁪⁭‮⁬‍‌‏⁯‭‌⁯‎‬‪‬‮.\u206E‌‬⁫‫‬‌⁪⁫‫‭‏⁮‍⁮​‏‎‮⁬⁯‏‏‫⁪‌‎‎‮⁮⁯‏‭‎​​⁭‏‏‮‮ || \u200F‪‎⁯⁬⁪⁬‎‎⁫‍⁬⁮‎‍⁪​⁯‬⁭⁫‍‌​‭⁪⁭‮⁬‍‌‏⁯‭‌⁯‎‬‪‬‮.\u200E‍‮‮‪‌⁬‮‎‫‌‪‏‫‎​‎‪⁮‮‭‫‮‎‌⁪‭‬⁯⁯⁪‏‍⁮​‌‌‎​⁮‮ || \u200F‪‎⁯⁬⁪⁬‎‎⁫‍⁬⁮‎‍⁪​⁯‬⁭⁫‍‌​‭⁪⁭‮⁬‍‌‏⁯‭‌⁯‎‬‪‬‮.\u200F‌‬‏​​‏‬‌‫‍‬⁭‮‭‮‪⁬⁯‮⁯‍‌⁬⁬⁪⁫⁮⁬⁭⁯‍‍⁭‪‮⁭‭‍‬‮();
}
