// Decompiled with JetBrains decompiler
// Type: FileLocker.My.MyProject
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace FileLocker.My
{
  [HideModuleName]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [StandardModule]
  internal sealed class MyProject
  {
    private static readonly MyProject.ThreadSafeObjectProvider<MyComputer> m_ComputerObjectProvider;
    private static readonly MyProject.ThreadSafeObjectProvider<MyApplication> m_AppObjectProvider;
    private static readonly MyProject.ThreadSafeObjectProvider<User> m_UserObjectProvider;
    private static MyProject.ThreadSafeObjectProvider<MyProject.MyForms> m_MyFormsObjectProvider;
    private static readonly MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices> m_MyWebServicesObjectProvider;

    [DebuggerNonUserCode]
    static MyProject()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      MyProject.m_ComputerObjectProvider = new MyProject.ThreadSafeObjectProvider<MyComputer>();
      MyProject.m_AppObjectProvider = new MyProject.ThreadSafeObjectProvider<MyApplication>();
      MyProject.m_UserObjectProvider = new MyProject.ThreadSafeObjectProvider<User>();
      MyProject.m_MyFormsObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyForms>();
      MyProject.m_MyWebServicesObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices>();
    }

    [HelpKeyword("My.Computer")]
    internal static MyComputer Computer
    {
      [DebuggerHidden] get => MyProject.m_ComputerObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Application")]
    internal static MyApplication Application
    {
      [DebuggerHidden] get => MyProject.m_AppObjectProvider.GetInstance;
    }

    [HelpKeyword("My.User")]
    internal static User User
    {
      [DebuggerHidden] get => MyProject.m_UserObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Forms")]
    internal static MyProject.MyForms Forms
    {
      [DebuggerHidden] get => MyProject.m_MyFormsObjectProvider.GetInstance;
    }

    [HelpKeyword("My.WebServices")]
    internal static MyProject.MyWebServices WebServices
    {
      [DebuggerHidden] get => MyProject.m_MyWebServicesObjectProvider.GetInstance;
    }

    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class MyForms
    {
      public Form1 m_Form1;
      [ThreadStatic]
      private static Hashtable m_FormBeingCreated;

      public Form1 Form1
      {
        [DebuggerNonUserCode] get
        {
          this.m_Form1 = MyProject.MyForms.Create__Instance__<Form1>(this.m_Form1);
          return this.m_Form1;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_Form1)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<Form1>(ref this.m_Form1);
        }
      }

      [DebuggerHidden]
      private static T Create__Instance__<T>(T Instance) where T : Form, new()
      {
        T instance;
        if (((object) Instance == null || Instance.IsDisposed ? 1 : 0) != 0)
        {
          if (MyProject.MyForms.m_FormBeingCreated != null)
          {
            if (MyProject.MyForms.m_FormBeingCreated.ContainsKey((object) typeof (T)))
              throw new InvalidOperationException(Utils.GetResourceString("WinForms_RecursiveFormCreate"));
          }
          else
            MyProject.MyForms.m_FormBeingCreated = new Hashtable();
          MyProject.MyForms.m_FormBeingCreated.Add((object) typeof (T), (object) null);
          try
          {
            instance = new T();
          }
          catch (TargetInvocationException ex) when (
          {
            // ISSUE: unable to correctly present filter
            ProjectData.SetProjectError((Exception) ex);
            if (ex.InnerException != null)
            {
              SuccessfulFiltering;
            }
            else
              throw;
          }
          )
          {
            throw new InvalidOperationException(Utils.GetResourceString("WinForms_SeeInnerException", ex.InnerException.Message), ex.InnerException);
          }
          finally
          {
            MyProject.MyForms.m_FormBeingCreated.Remove((object) typeof (T));
          }
        }
        else
          instance = Instance;
        return instance;
      }

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T gparam_0) where T : Form
      {
        gparam_0.Dispose();
        gparam_0 = default (T);
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public MyForms()
      {
        Class0.SLV0fFIsptsZtjvFft17();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object obj) => base.Equals(RuntimeHelpers.GetObjectValue(obj));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal new System.Type GetType() => typeof (MyProject.MyForms);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();
    }

    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class MyWebServices
    {
      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object obj) => base.Equals(RuntimeHelpers.GetObjectValue(obj));

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      internal new System.Type GetType() => typeof (MyProject.MyWebServices);

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override string ToString() => base.ToString();

      [DebuggerHidden]
      private static T Create__Instance__<T>(T instance) where T : new() => (object) instance != null ? instance : new T();

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T gparam_0) => gparam_0 = default (T);

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public MyWebServices()
      {
        Class0.SLV0fFIsptsZtjvFft17();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [ComVisible(false)]
    internal sealed class ThreadSafeObjectProvider<T> where T : new()
    {
      internal T GetInstance
      {
        [DebuggerHidden] get
        {
          if ((object) MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue == null)
            MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue = new T();
          return MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue;
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public ThreadSafeObjectProvider()
      {
        Class0.SLV0fFIsptsZtjvFft17();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }
  }
}
