// Decompiled with JetBrains decompiler
// Type: eg2012.Form1
// Assembly: SinkStack, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A02AD0B4-EB98-42A4-95E2-E2AB11E6E27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-1dfce723a17d9979985d027a8b4bf09a943153bb9ff23d082b21825c41104f96.exe

using eg2012.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;
using System.Xml.Linq;

namespace eg2012
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private List<channelClasses.ChannelSetup> Setup;
    private Dictionary<Button, channelClasses.ChannelSetup> channels;
    private bool stylemode;
    private IContainer components;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.Setup = new List<channelClasses.ChannelSetup>();
      this.channels = new Dictionary<Button, channelClasses.ChannelSetup>();
      this.InitializeComponent();
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      channelClasses.ChannelSetup channelSetup1 = new channelClasses.ChannelSetup()
      {
        dirResBug = "E:\\Eetrigraafika\\bug\\_res\\hd-2-11\\",
        dirResVid = "E:\\_home_\\doc\\Saated\\eetrigraafika\\Kanal 2\\_renders\\",
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal2\\guide\\kanal2.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal2\\bugHD\\planTest.xml",
        PlanFn = "E:\\Caspar\\Eetrigraafika\\Kanal2\\bugHD\\plan.xml",
        DirLocalBug = "E:\\Eetrigraafika\\Kanal2\\bugHD\\",
        DirBug = "E:\\Caspar\\Eetrigraafika\\Kanal2\\bugHD\\",
        defVideoStyle = "left",
        HD = true
      };
      this.Setup.Add(channelSetup1);
      this.channels.Add(this.bk2test, channelSetup1);
      this.cMode.Items.Add((object) "Bugid - K2 HD TEST");
      channelClasses.ChannelSetup channelSetup2 = new channelClasses.ChannelSetup()
      {
        dirResBug = "E:\\Eetrigraafika\\bug\\_res\\via-2-11\\",
        dirResVid = "E:\\_home_\\doc\\Saated\\eetrigraafika\\Kanal 2\\_renders\\",
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal2\\guide\\kanal2.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal2\\bug\\planReal.xml",
        PlanFn = "\\\\INCA2\\eetrigraafika\\kanal2\\bug\\plan.xml",
        DirLocalBug = "E:\\Eetrigraafika\\Kanal2\\bug\\",
        DirBug = "\\\\INCA2\\eetrigraafika\\kanal2\\bug\\",
        defVideoStyle = "left"
      };
      this.Setup.Add(channelSetup2);
      this.channels.Add(this.bk2, channelSetup2);
      this.cMode.Items.Add((object) "Bugid - K2");
      channelClasses.ChannelSetup channelSetup3 = new channelClasses.ChannelSetup()
      {
        dirResBug = "E:\\Eetrigraafika\\bug\\_res\\via-2-11\\",
        dirResVid = "E:\\_home_\\doc\\Saated\\eetrigraafika\\Kanal 11\\_renders\\",
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal11\\guide\\kanal11.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal11\\bug\\plan.xml",
        PlanFn = "\\\\INCA11\\eetrigraafika11\\kanal11\\bug\\plan.xml",
        DirLocalBug = "E:\\Eetrigraafika\\Kanal11\\bug\\",
        DirBug = "\\\\INCA11\\eetrigraafika11\\kanal11\\bug\\",
        defVideoStyle = "left"
      };
      this.Setup.Add(channelSetup3);
      this.channels.Add(this.bk11, channelSetup3);
      this.cMode.Items.Add((object) "Bugid - K11");
      channelClasses.ChannelSetup channelSetup4 = new channelClasses.ChannelSetup()
      {
        dirResBug = "E:\\Eetrigraafika\\bug\\_res\\hd-12\\",
        dirResVid = "E:\\_home_\\doc\\Saated\\eetrigraafika\\Kanal 12\\_renders\\",
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal12\\guide\\kanal12.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal2\\bugHD\\planTest.xml",
        PlanFn = "\\\\CASPAR_K12-HP\\Caspar\\Eetrigraafika\\Kanal12\\bugHD\\plan.xml",
        DirLocalBug = "E:\\Caspar\\Eetrigraafika\\Kanal12\\bugHD\\",
        DirBug = "\\\\CASPAR_K12-HP\\Caspar\\Eetrigraafika\\Kanal12\\bugHD\\",
        defVideoStyle = "right",
        HD = true
      };
      this.Setup.Add(channelSetup4);
      this.channels.Add(this.bk12test, channelSetup4);
      this.cMode.Items.Add((object) "Bugid - K12 HD TEST");
      channelClasses.ChannelSetup channelSetup5 = new channelClasses.ChannelSetup()
      {
        dirResBug = "E:\\Eetrigraafika\\bug\\_res\\via-12\\",
        dirResVid = "E:\\_home_\\doc\\Saated\\eetrigraafika\\Kanal 12\\_renders\\",
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal12\\guide\\kanal12.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal12\\bug\\planReal.xml",
        PlanFn = "\\\\RTX12\\eetrigraafika12\\Kanal12\\bug\\plan.xml",
        DirLocalBug = "E:\\Eetrigraafika\\Kanal12\\bug\\",
        DirBug = "\\\\RTX12\\eetrigraafika12\\Kanal12\\bug\\",
        defVideoStyle = "right"
      };
      this.Setup.Add(channelSetup5);
      this.channels.Add(this.bk12, channelSetup5);
      this.cMode.Items.Add((object) "Bugid - K12");
      this.Setup.Add(new channelClasses.ChannelSetup()
      {
        dirResBug = string.Empty,
        dirResVid = string.Empty,
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal2\\guide\\kanal2.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal2\\styles\\testPlan.xml",
        PlanFn = "E:\\Eetrigraafika\\Kanal2\\styles\\plan.xml",
        DirLocalBug = string.Empty,
        DirBug = "\\\\K2-ALARI\\EetrigraafikaX\\Kanal2\\styles\\",
        defVideoStyle = "all",
        Virtual = true
      });
      this.cMode.Items.Add((object) "Style - K2 TEST");
      this.Setup.Add(new channelClasses.ChannelSetup()
      {
        dirResBug = string.Empty,
        dirResVid = string.Empty,
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal2\\guide\\kanal2.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal2\\styles\\planReal.xml",
        PlanFn = "\\\\INCA2\\eetrigraafika\\kanal2\\styles\\plan.xml",
        DirLocalBug = string.Empty,
        DirBug = "\\\\INCA2\\eetrigraafika\\kanal2\\styles\\",
        defVideoStyle = "all",
        Virtual = true
      });
      this.cMode.Items.Add((object) "Style - K2");
      this.Setup.Add(new channelClasses.ChannelSetup()
      {
        dirResBug = string.Empty,
        dirResVid = string.Empty,
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal11\\guide\\kanal11.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal11\\styles\\plan.xml",
        PlanFn = "\\\\INCA11\\eetrigraafika11\\kanal11\\styles\\plan.xml",
        DirLocalBug = string.Empty,
        DirBug = "\\\\INCA11\\eetrigraafika11\\kanal11\\styles\\",
        defVideoStyle = "all",
        Virtual = true
      });
      this.cMode.Items.Add((object) "Style - K11");
      this.Setup.Add(new channelClasses.ChannelSetup()
      {
        dirResBug = string.Empty,
        dirResVid = string.Empty,
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal12\\guide\\kanal12.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal12\\styles\\testplan.xml",
        PlanFn = "E:\\Eetrigraafika\\Kanal12\\styles\\plan.xml",
        DirLocalBug = string.Empty,
        DirBug = "E:\\Eetrigraafika\\Kanal12\\styles\\",
        defVideoStyle = "all",
        Virtual = true
      });
      this.cMode.Items.Add((object) "Style - K12 TEST");
      this.Setup.Add(new channelClasses.ChannelSetup()
      {
        dirResBug = string.Empty,
        dirResVid = string.Empty,
        GuideFn = "\\\\INCA2\\eetrigraafika\\kanal12\\guide\\kanal12.xml",
        PlanLocalFn = "E:\\Eetrigraafika\\Kanal12\\styles\\realplan.xml",
        PlanFn = "\\\\RTX12\\eetrigraafika12\\Kanal12\\styles\\plan.xml",
        DirLocalBug = string.Empty,
        DirBug = "\\\\RTX12\\eetrigraafika12\\Kanal12\\styles\\",
        defVideoStyle = "all",
        Virtual = true
      });
      this.cMode.Items.Add((object) "Style - K12");
      this.grStyle.Location = this.grCntrl.Location;
      this.Cleanup();
      this.cMode.SelectedIndex = 0;
    }

    private void Control()
    {
      HashSet<string> values = new HashSet<string>();
      try
      {
        foreach (string activeFile in channelClasses.Plan.ActiveFiles())
        {
          if (this.ChannelBugUpdate(activeFile))
            values.Add(activeFile);
        }
      }
      finally
      {
        HashSet<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (values.Count == 0)
        return;
      if (MessageBox.Show(string.Join(", ", (IEnumerable<string>) values), "Paigutada need failid?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return;
      try
      {
        foreach (string id in values)
        {
          if (!channelClasses.ActiveChannel.MoveBug(id))
          {
            int num = (int) MessageBox.Show(id + "kopeermine ei õnnestunud", "Kopeerimine", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
        }
      }
      finally
      {
        HashSet<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    private void Cleanup()
    {
      Dictionary<string, HashSet<string>> dictionary = new Dictionary<string, HashSet<string>>();
      try
      {
        foreach (channelClasses.ChannelSetup channelSetup in this.channels.Values)
        {
          if (!dictionary.ContainsKey(channelSetup.dirResBug))
          {
            HashSet<string> stringSet = new HashSet<string>();
            FileInfo[] files = new DirectoryInfo(channelSetup.dirResBug).GetFiles();
            int index = 0;
            while (index < files.Length)
            {
              FileInfo fileInfo = files[index];
              if ((DateTime.UtcNow - fileInfo.LastWriteTimeUtc).TotalDays > 60.0 && Operators.CompareString(fileInfo.Extension.ToLower(), channelSetup.Ext, false) == 0 && !fileInfo.Name.Contains("_w.") && !fileInfo.Name.Contains("_v."))
                stringSet.Add(fileInfo.Name.Replace(fileInfo.Extension, string.Empty));
              checked { ++index; }
            }
            dictionary[channelSetup.dirResBug] = stringSet;
          }
        }
      }
      finally
      {
        Dictionary<Button, channelClasses.ChannelSetup>.ValueCollection.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (channelClasses.ChannelSetup ch in this.channels.Values)
          new ChannelPlan(ch).RemoveActiveFiles(dictionary[ch.dirResBug]);
      }
      finally
      {
        Dictionary<Button, channelClasses.ChannelSetup>.ValueCollection.Enumerator enumerator;
        enumerator.Dispose();
      }
      string text = string.Empty;
      int num = 0;
      try
      {
        foreach (KeyValuePair<string, HashSet<string>> keyValuePair in dictionary)
        {
          if (keyValuePair.Value.Count > 0)
          {
            checked { num += keyValuePair.Value.Count; }
            text = text + new DirectoryInfo(keyValuePair.Key).Name + ":" + Environment.NewLine;
            text = text + string.Join(", ", (IEnumerable<string>) keyValuePair.Value) + Environment.NewLine + Environment.NewLine;
          }
        }
      }
      finally
      {
        Dictionary<string, HashSet<string>>.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (num == 0)
        return;
      if (MessageBox.Show(text, "Kustutada need failid?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return;
      try
      {
        foreach (channelClasses.ChannelSetup channelSetup in this.channels.Values)
        {
          try
          {
            foreach (string str in dictionary[channelSetup.dirResBug])
            {
              string path1 = channelSetup.DirBug + str + channelSetup.Ext;
              if (File.Exists(path1))
                File.Delete(path1);
              if (!channelSetup.HD)
              {
                string path2 = channelSetup.DirBug + str + "_w.via";
                if (File.Exists(path2))
                  File.Delete(path2);
              }
            }
          }
          finally
          {
            HashSet<string>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      finally
      {
        Dictionary<Button, channelClasses.ChannelSetup>.ValueCollection.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (KeyValuePair<string, HashSet<string>> keyValuePair in dictionary)
        {
          string path = keyValuePair.Key + "backup\\";
          if (!Directory.Exists(path))
            Directory.CreateDirectory(path);
          try
          {
            foreach (string str in keyValuePair.Value)
            {
              this.MoveBackupfile(keyValuePair.Key + str + ".via", path + str + ".via");
              this.MoveBackupfile(keyValuePair.Key + str + "_w.via", path + str + "_w.via");
              this.MoveBackupfile(keyValuePair.Key + str + ".mov", path + str + ".mov");
            }
          }
          finally
          {
            HashSet<string>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      finally
      {
        Dictionary<string, HashSet<string>>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    private void MoveBackupfile(string fn, string fn2)
    {
      FileInfo fileInfo = new FileInfo(fn2);
      if (fileInfo.Exists)
        fileInfo.MoveTo(fn2.Replace(fileInfo.Extension, DateAndTime.Now.ToString("_MMdd_HHmmss") + fileInfo.Extension));
      if (!File.Exists(fn))
        return;
      File.Move(fn, fn2);
    }

    private void cMode_SelectedIndexChanged(object sender, EventArgs e)
    {
      channelClasses.ActiveChannel = this.Setup[this.cMode.SelectedIndex];
      this.stylemode = false;
      int selectedIndex = this.cMode.SelectedIndex;
      switch (selectedIndex)
      {
        case 0:
          this.bk2.Enabled = true;
          this.bk11.Enabled = true;
          this.bk12test.Enabled = false;
          this.bk12.Enabled = false;
          this.bk2test.Enabled = true;
          break;
        case 1:
          this.bk2.Enabled = true;
          this.bk11.Enabled = true;
          this.bk12test.Enabled = false;
          this.bk12.Enabled = false;
          this.bk2test.Enabled = false;
          break;
        case 2:
          this.bk2.Enabled = true;
          this.bk11.Enabled = true;
          this.bk12test.Enabled = false;
          this.bk12.Enabled = false;
          this.bk2test.Enabled = false;
          break;
        case 3:
          this.bk2.Enabled = false;
          this.bk11.Enabled = false;
          this.bk12test.Enabled = true;
          this.bk12.Enabled = true;
          break;
        case 4:
          this.bk2.Enabled = false;
          this.bk11.Enabled = false;
          this.bk12test.Enabled = true;
          this.bk12.Enabled = true;
          break;
        default:
          if (selectedIndex >= 5 && selectedIndex <= 9)
          {
            this.stylemode = true;
            break;
          }
          this.grCntrl.Enabled = false;
          this.LstProgr.Enabled = false;
          this.cDates.Items.Clear();
          return;
      }
      if (channelClasses.ActiveChannel.HD)
        this.chk169only.Text = "interlaced";
      else
        this.chk169only.Text = "ainult 16:9";
      this.cVias.Visible = !this.stylemode;
      this.Tab1.TabPages.Clear();
      if (this.stylemode)
      {
        this.Tab1.TabPages.Add(this.TabPage2);
        channelClasses.Plan = new ChannelPlan(channelClasses.ActiveChannel);
        channelClasses.Plan.RootList(this.cStyleId);
      }
      else
      {
        this.Tab1.TabPages.Add(this.TabPage1);
        this.Tab1.TabPages.Add(this.TabPage3);
        this.Tab1.SelectedTab = this.Tab1.TabPages[0];
        channelClasses.ActiveChannel.ReportList(this.cReport);
        channelClasses.ActiveChannel.ViaList(this.cVias);
        if (Operators.CompareString(channelClasses.ActiveChannel.defVideoStyle, "right", false) == 0)
          this.rRight.Checked = true;
        else
          this.rLeft.Checked = true;
        this.rEtc.Checked = true;
        ComboBox cVias = MyProject.Forms.Dialog1.cVias;
        cVias.Items.Clear();
        try
        {
          foreach (object obj in this.cVias.Items)
          {
            object objectValue = RuntimeHelpers.GetObjectValue(obj);
            cVias.Items.Add(RuntimeHelpers.GetObjectValue(objectValue));
          }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        this.dRepFrom.Value = DateAndTime.Today.AddMonths(-2);
        this.dRepTo.Value = DateAndTime.Today;
        channelClasses.Plan = new ChannelPlan(channelClasses.ActiveChannel);
      }
      channelClasses.Guide = new channelClasses.ChannelGuide(this.cDates);
      this.cDates.SelectedIndex = channelClasses.Guide.TodayIndex;
    }

    private void SetTitle()
    {
      this.Text = this.cMode.Text;
      if (this.cMode.SelectedIndex >= this.cMode.Items.Count)
        return;
      try
      {
        this.Text = this.Text + " " + this.cDates.Text;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void bPlay_Click(object sender, EventArgs e)
    {
    }

    private void cmdExmpl_Click(object sender, EventArgs e)
    {
      Button button = (Button) sender;
      string str1 = this.cVias.SelectedItem.ToString();
      string str2 = VideoClasses.VideoSequence.DirRes + "example\\" + str1 + ".mp4";
      if (!File.Exists(str2))
        return;
      button.Enabled = false;
      Process process = Process.Start(str2);
      process.WaitForExit();
      process.Dispose();
      button.Enabled = true;
    }

    private void cVias_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.bk2.ForeColor = SystemColors.ControlText;
      this.bk11.ForeColor = SystemColors.ControlText;
      this.bk12.ForeColor = SystemColors.ControlText;
      this.bPlay.Enabled = this.cVias.Text.Length > 0 && !this.cVias.Text.StartsWith("[");
      this.bExmpl.Enabled = this.bPlay.Enabled;
      this.bk2.ForeColor = SystemColors.ControlText;
      this.bk11.ForeColor = SystemColors.ControlText;
      this.bk12.ForeColor = SystemColors.ControlText;
      htmlClasses.Statistics statistics;
      if (this.cVias.Text.Length > 0)
      {
        string text = this.cVias.Text;
        this.ChannelControl(text);
        statistics = new htmlClasses.Statistics(text, channelClasses.ActiveChannel.bugStat(text));
        this.bSelVia.Text = text + " reeglid";
        this.bSelVia.Enabled = true;
        this.lInf.Text = channelClasses.Plan.RuleInfo(this.cVias.Text);
      }
      else
      {
        this.bSelVia.Text = "Valitud bugi reeglid";
        this.bSelVia.Enabled = false;
        statistics = this.cReport.Items.Count <= 0 ? new htmlClasses.Statistics("pole valitud!", new XElement(XName.Get("reports", ""))) : new htmlClasses.Statistics(channelClasses.ActiveChannel.combStat(this.cReport.Items[0].ToString(), this.dRepFrom.Value, this.dRepTo.Value));
        this.lInf.Text = string.Empty;
      }
      this.wbr.DocumentText = statistics.page();
    }

    private void bMakeVia_Click(object sender, EventArgs e)
    {
      string text = this.tDir.Text;
      if (!Directory.Exists(text))
        return;
      this.bMakeVia.Enabled = false;
      if (channelClasses.ActiveChannel.HD)
      {
        if (this.rBug.Checked)
          this.MakeHDMov(text);
        else if (this.rSk.Checked)
        {
          VideoClassesHD.VideoSequenceHD videoSequenceHd = new VideoClassesHD.VideoSequenceHD(text, false);
          if (text.Contains("matte"))
            videoSequenceHd.Proccess("matte");
          else
            videoSequenceHd.Proccess(string.Empty);
        }
        else if (this.rK2.Checked)
          this.IdentFiles_K2_15(text);
        else if (this.rK11.Checked)
          this.IdentFiles_K11_15(text);
        else
          this.MakeLogoHD(text);
      }
      else if (this.rBug.Checked)
        this.MakeVia(text);
      else if (this.rSk.Checked)
        new VideoClasses.SKsequence(text).Process();
      else
        this.MakeLogo(text);
      this.bMakeVia.Enabled = true;
    }

    private void MakeVia(string dirFrames)
    {
      string str;
      if (this.rLeft.Checked)
      {
        str = "left";
        if (Operators.CompareString(channelClasses.ActiveChannel.defVideoStyle, "right", false) == 0)
          this.rRight.Checked = true;
      }
      else if (this.rRight.Checked)
      {
        str = "right";
        if (Operators.CompareString(channelClasses.ActiveChannel.defVideoStyle, "right", false) != 0)
          this.rLeft.Checked = true;
      }
      else
      {
        str = "center";
        if (Operators.CompareString(channelClasses.ActiveChannel.defVideoStyle, "right", false) == 0)
          this.rRight.Checked = true;
        else
          this.rLeft.Checked = true;
      }
      VideoClasses.VideoSequence.FnBack = Operators.CompareString(str, "right", false) == 0 ? VideoClasses.VideoSequence.DirRes + "back_r.png" : VideoClasses.VideoSequence.DirRes + "back.png";
      VideoClasses.VideoSequence videoSequence = new VideoClasses.VideoSequence(dirFrames, this.chkExample.Checked, this.chkVia.Checked, false);
      if (this.chk169only.Checked)
      {
        videoSequence.Only169 = true;
        this.chk169only.Checked = false;
      }
      if (videoSequence.Width > 0.0)
      {
        if (this.cPos.Checked || videoSequence.Height < 576.0)
        {
          MyProject.Forms.DialogResize.Init(videoSequence.Width, videoSequence.Height, this.cXy.Checked);
          if (MyProject.Forms.DialogResize.ShowDialog() == DialogResult.OK)
            videoSequence.Proccess(MyProject.Forms.DialogResize.Command(str));
          this.cXy.Checked = false;
        }
        else if (videoSequence.Width > 720.0)
          videoSequence.Proccess("1024_" + str);
        else if (this.chkWide.Checked)
          videoSequence.Proccess("720_169_" + str);
        else
          videoSequence.Proccess("720_43_" + str);
        ComboBox.ObjectCollection items = this.cVias.Items;
        if (items.Contains((object) videoSequence.Name))
          items.Remove((object) videoSequence.Name);
        items.Add((object) videoSequence.Name);
        channelClasses.ActiveChannel.BugDur[videoSequence.Name] = videoSequence.Duration;
        this.cVias.SelectedIndex = checked (items.Count - 1);
      }
      videoSequence.Cleanup();
    }

    private void MakeLogo(string dirFrames)
    {
      int Mode;
      if (dirFrames.ToLower().Contains("kanal11"))
        Mode = !dirFrames.ToLower().Contains("mask") ? 111 : 110;
      else if (dirFrames.ToLower().Contains("kanal12"))
      {
        Mode = 1;
      }
      else
      {
        Mode = 2;
        dirFrames += "\\all";
      }
      if (dirFrames.EndsWith("all"))
      {
        DirectoryInfo[] directories = new DirectoryInfo(dirFrames).GetDirectories();
        int index = 0;
        while (index < directories.Length)
        {
          new VideoClasses.VideoSequence(directories[index].FullName, false, true, false).Proccess(Mode);
          checked { ++index; }
        }
      }
      else
      {
        if (!Directory.Exists(dirFrames))
          return;
        new VideoClasses.VideoSequence(dirFrames, false, true, false).Proccess(Mode);
      }
    }

    private void MakeHDMov(string dirFrames)
    {
      string str;
      if (this.rLeft.Checked)
      {
        str = "left";
        if (Operators.CompareString(channelClasses.ActiveChannel.defVideoStyle, "right", false) == 0)
          this.rRight.Checked = true;
      }
      else if (this.rRight.Checked)
      {
        str = "right";
        if (Operators.CompareString(channelClasses.ActiveChannel.defVideoStyle, "right", false) != 0)
          this.rLeft.Checked = true;
      }
      else
      {
        str = "center";
        if (Operators.CompareString(channelClasses.ActiveChannel.defVideoStyle, "right", false) == 0)
          this.rRight.Checked = true;
        else
          this.rLeft.Checked = true;
      }
      VideoClassesHD.VideoSequenceHD.FnBack = Operators.CompareString(str, "right", false) == 0 ? VideoClassesHD.VideoSequenceHD.DirRes + "back_r.png" : VideoClassesHD.VideoSequenceHD.DirRes + "back.png";
      VideoClassesHD.VideoSequenceHD.RenderMode mode = this.chkVia.Checked ? VideoClassesHD.VideoSequenceHD.RenderMode.Bug : VideoClassesHD.VideoSequenceHD.RenderMode.None;
      VideoClassesHD.VideoSequenceHD videoSequenceHd = new VideoClassesHD.VideoSequenceHD(dirFrames, this.chkExample.Checked, mode, this.chk169only.Checked);
      if (videoSequenceHd.Width > 0.0)
      {
        if (this.cPos.Checked || videoSequenceHd.Height < 576.0)
        {
          MyProject.Forms.DialogResizeHD.Init(videoSequenceHd.Width, videoSequenceHd.Height, this.cXy.Checked);
          if (MyProject.Forms.DialogResizeHD.ShowDialog() == DialogResult.OK)
            videoSequenceHd.Proccess(MyProject.Forms.DialogResizeHD.Command(str));
          this.cXy.Checked = false;
        }
        else
          videoSequenceHd.Proccess("full");
        ComboBox.ObjectCollection items = this.cVias.Items;
        if (items.Contains((object) videoSequenceHd.Name))
          items.Remove((object) videoSequenceHd.Name);
        items.Add((object) videoSequenceHd.Name);
        channelClasses.ActiveChannel.BugDur[videoSequenceHd.Name] = videoSequenceHd.Duration;
        this.cVias.SelectedIndex = checked (items.Count - 1);
      }
      videoSequenceHd.Cleanup();
    }

    private void MakeLogoHD(string dirFrames)
    {
      string str1 = dirFrames + "\\maskdiff.png";
      string str2 = string.Empty;
      if (!File.Exists(str1))
        str1 = new DirectoryInfo(dirFrames).Parent.FullName + "\\maskdiff.png";
      if (File.Exists(str1))
      {
        str2 = "mask";
        VideoClassesHD.FrameProcessorHD_Mask.SetMask(str1);
      }
      if (dirFrames.EndsWith("all"))
      {
        DirectoryInfo[] directories = new DirectoryInfo(dirFrames).GetDirectories();
        int index = 0;
        while (index < directories.Length)
        {
          DirectoryInfo directoryInfo = directories[index];
          new VideoClassesHD.VideoSequenceHD(directoryInfo.FullName, false, VideoClassesHD.VideoSequenceHD.RenderMode.logo, this.chk169only.Checked).Proccess(directoryInfo.Name.Contains("matte") ? str2 : string.Empty);
          checked { ++index; }
        }
      }
      else
        new VideoClassesHD.VideoSequenceHD(dirFrames, false, VideoClassesHD.VideoSequenceHD.RenderMode.logo, this.chk169only.Checked).Proccess(dirFrames.Contains("matte") ? str2 : string.Empty);
    }

    private void IdentFiles_K2_15(string dir)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(dir);
      string tmpl = "\\" + ((IEnumerable<FileInfo>) new DirectoryInfo(dir).GetFiles()).First<FileInfo>().Name;
      string empty = string.Empty;
      dir += "\\all";
      if (!Directory.Exists(dir))
        Directory.CreateDirectory(dir);
      if (Operators.CompareString(directoryInfo.Name, "orange", false) == 0)
      {
        string path1 = dir + "\\2-15-logo1-on";
        if (!Directory.Exists(path1))
        {
          Directory.CreateDirectory(path1);
          int nr1 = 0;
          int nr2 = 0;
          do
          {
            File.Copy(directoryInfo.FullName + this.NumFileName(tmpl, nr2), path1 + this.NumFileName(tmpl, nr1));
            checked { ++nr1; }
            checked { ++nr2; }
          }
          while (nr2 <= 74);
        }
        string path2 = dir + "\\2-15-logo1-off";
        if (!Directory.Exists(path2))
        {
          Directory.CreateDirectory(path2);
          int nr3 = 0;
          int nr4 = 327;
          do
          {
            File.Copy(directoryInfo.FullName + this.NumFileName(tmpl, nr4), path2 + this.NumFileName(tmpl, nr3));
            checked { ++nr3; }
            checked { ++nr4; }
          }
          while (nr4 <= 376);
        }
      }
      string path3 = dir + "\\2-15-" + directoryInfo.Name + "-short";
      if (!Directory.Exists(path3))
      {
        Directory.CreateDirectory(path3);
        int nr5 = 0;
        int nr6 = 80;
        do
        {
          File.Copy(directoryInfo.FullName + this.NumFileName(tmpl, nr6), path3 + this.NumFileName(tmpl, nr5));
          checked { ++nr5; }
          checked { ++nr6; }
        }
        while (nr6 <= 318);
      }
      string path4 = dir + "\\2-15-" + directoryInfo.Name + "-long";
      if (!Directory.Exists(path4))
      {
        Directory.CreateDirectory(path4);
        int nr7 = 0;
        int nr8 = 80;
        string str1;
        do
        {
          str1 = this.NumFileName(tmpl, nr8);
          File.Copy(directoryInfo.FullName + str1, path4 + this.NumFileName(tmpl, nr7));
          checked { ++nr7; }
          checked { ++nr8; }
        }
        while (nr8 <= 200);
        int num = 0;
        do
        {
          File.Copy(directoryInfo.FullName + str1, path4 + this.NumFileName(tmpl, nr7));
          checked { ++nr7; }
          checked { ++num; }
        }
        while (num <= 124);
        int nr9 = 201;
        do
        {
          string str2 = this.NumFileName(tmpl, nr9);
          File.Copy(directoryInfo.FullName + str2, path4 + this.NumFileName(tmpl, nr7));
          checked { ++nr7; }
          checked { ++nr9; }
        }
        while (nr9 <= 318);
      }
      string path5 = dir + "\\2-15-" + directoryInfo.Name + "-on";
      if (!Directory.Exists(path5))
      {
        Directory.CreateDirectory(path5);
        int nr10 = 0;
        int nr11 = 80;
        do
        {
          File.Copy(directoryInfo.FullName + this.NumFileName(tmpl, nr11), path5 + this.NumFileName(tmpl, nr10));
          checked { ++nr10; }
          checked { ++nr11; }
        }
        while (nr11 <= 183);
      }
      string path6 = dir + "\\2-15-" + directoryInfo.Name + "-off";
      if (!Directory.Exists(path6))
      {
        Directory.CreateDirectory(path6);
        int nr12 = 0;
        int nr13 = 249;
        do
        {
          File.Copy(directoryInfo.FullName + this.NumFileName(tmpl, nr13), path6 + this.NumFileName(tmpl, nr12));
          checked { ++nr12; }
          checked { ++nr13; }
        }
        while (nr13 <= 318);
      }
      this.MakeLogoHD(dir);
    }

    private void IdentFiles_K11_15(string dir) => this.MakeLogoHD(dir);

    private string NumFileName(string tmpl, int nr) => tmpl.Replace("00000", string.Format("{0:00000}", (object) nr));

    private void ChannelControl(string id)
    {
      try
      {
        foreach (Button key in this.channels.Keys)
        {
          key.ForeColor = SystemColors.ControlText;
          if (key.Enabled && !id.StartsWith("["))
          {
            int num1 = 0;
            List<string> stringList = new List<string>();
            stringList.Add(channelClasses.ActiveChannel.Ext);
            if (!channelClasses.ActiveChannel.HD)
            {
              stringList.Add("_w.via");
              stringList.Add("_v.via");
            }
            try
            {
              foreach (string ext in stringList)
              {
                checked { num1 += this.viaUpdate(channelClasses.ActiveChannel.dirResBug, this.channels[key].DirBug, id, ext); }
                int num2 = num1;
                if (num2 == 1)
                {
                  key.ForeColor = Color.DarkRed;
                  return;
                }
                if (num2 > 1)
                {
                  key.ForeColor = Color.DarkOrange;
                  return;
                }
              }
            }
            finally
            {
              List<string>.Enumerator enumerator;
              enumerator.Dispose();
            }
            key.ForeColor = Color.Green;
          }
        }
      }
      finally
      {
        Dictionary<Button, channelClasses.ChannelSetup>.KeyCollection.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    private bool ChannelBugUpdate(string id)
    {
      if (id.StartsWith("["))
        return false;
      int num = 0;
      List<string> stringList = new List<string>();
      stringList.Add(channelClasses.ActiveChannel.Ext);
      if (!channelClasses.ActiveChannel.HD)
      {
        stringList.Add("_w.via");
        stringList.Add("_v.via");
      }
      try
      {
        foreach (string ext in stringList)
        {
          checked { num += this.viaUpdate(channelClasses.ActiveChannel.dirResBug, channelClasses.ActiveChannel.DirBug, id, ext); }
          if (num > 0)
            return true;
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return false;
    }

    private int viaUpdate(string dSrc, string dDst, string id, string ext)
    {
      FileInfo fileInfo1 = new FileInfo(dSrc + id + ext);
      if (!fileInfo1.Exists)
        return 0;
      FileInfo fileInfo2 = new FileInfo(dDst + id + ext);
      if (!fileInfo2.Exists)
        return 1;
      return DateTime.Compare(fileInfo1.LastWriteTimeUtc, fileInfo2.LastWriteTimeUtc) > 0 ? 2 : 0;
    }

    private void bk_Click(object sender, EventArgs e)
    {
      Button key = (Button) sender;
      string dirBug = this.channels[key].DirBug;
      try
      {
        if (channelClasses.ActiveChannel.MoveBug(this.cVias.SelectedItem.ToString()))
        {
          key.ForeColor = Color.Green;
          return;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      key.ForeColor = Color.Red;
    }

    private void cDates_SelectedIndexChanged(object sender, EventArgs e)
    {
      channelClasses.Guide.Fill(((IEnumerable<string>) this.cDates.Text.Split(' ')).Last<string>(), this.LstProgr);
      this.SetTitle();
      this.bSelDate.Text = this.cDates.Text + " reeglid";
      this.bSelDate2.Text = this.bSelDate.Text;
    }

    private void LstProgr_DoubleClick(object sender, EventArgs e)
    {
      if (this.LstProgr.SelectedItems.Count == 0)
        return;
      bool shiftKeyDown = MyProject.Computer.Keyboard.ShiftKeyDown;
      if (channelClasses.ActiveChannel.Virtual)
      {
        if (!this.cStyleValue.Items.Contains((object) this.cStyleValue.Text))
          this.cStyleValue.Items.Add((object) this.cStyleValue.Text);
        if (!MyProject.Forms.Dialog1.cVias.Items.Contains((object) this.cStyleValue.Text))
          MyProject.Forms.Dialog1.cVias.Items.Add((object) this.cStyleValue.Text);
        channelClasses.Plan.Fill(this.cStyleValue, this.LstProgr, shiftKeyDown);
      }
      else
      {
        channelClasses.Plan.Fill(this.cVias, this.LstProgr, shiftKeyDown);
        this.Control();
        this.lInf.Text = channelClasses.Plan.RuleInfo(this.cVias.Text);
      }
    }

    private void addMultiBug_Click(object sender, EventArgs e)
    {
      if (this.LstProgr.SelectedItems.Count == 0 || channelClasses.ActiveChannel.Virtual)
        return;
      bool shiftKeyDown = MyProject.Computer.Keyboard.ShiftKeyDown;
      channelClasses.Plan.Fill(this.cVias, this.LstProgr, shiftKeyDown);
      this.Control();
      this.lInf.Text = channelClasses.Plan.RuleInfo(this.cVias.Text);
    }

    private void addMultiStyle_Click(object sender, EventArgs e)
    {
      if (this.LstProgr.SelectedItems.Count == 0 || !channelClasses.ActiveChannel.Virtual)
        return;
      bool shiftKeyDown = MyProject.Computer.Keyboard.ShiftKeyDown;
      if (!this.cStyleValue.Items.Contains((object) this.cStyleValue.Text))
        this.cStyleValue.Items.Add((object) this.cStyleValue.Text);
      if (!MyProject.Forms.Dialog1.cVias.Items.Contains((object) this.cStyleValue.Text))
        MyProject.Forms.Dialog1.cVias.Items.Add((object) this.cStyleValue.Text);
      channelClasses.Plan.Fill(this.cStyleValue, this.LstProgr, shiftKeyDown);
    }

    private void bAll_Click(object sender, EventArgs e)
    {
      channelClasses.Plan.Fill();
      this.Control();
      this.lInf.Text = channelClasses.Plan.RuleInfo(this.cVias.Text);
    }

    private void bAll2_Click(object sender, EventArgs e) => channelClasses.Plan.Fill();

    private void bSelStyle_Click(object sender, EventArgs e) => channelClasses.Plan.Fill(this.cStyleValue.Text);

    private void bSelVia_Click(object sender, EventArgs e)
    {
      channelClasses.Plan.Fill(this.cVias.Text);
      this.Control();
      this.lInf.Text = channelClasses.Plan.RuleInfo(this.cVias.Text);
    }

    private void bSelDate_Click(object sender, EventArgs e)
    {
      DateTime result;
      if (!DateTime.TryParse(((IEnumerable<string>) this.cDates.Text.Split(' ')).Last<string>(), out result))
        return;
      channelClasses.Plan.Fill(result.AddHours(12.0));
      this.Control();
      this.lInf.Text = channelClasses.Plan.RuleInfo(this.cVias.Text);
    }

    private void bSelDate2_Click(object sender, EventArgs e)
    {
      DateTime result;
      if (!DateTime.TryParse(((IEnumerable<string>) this.cDates.Text.Split(' ')).Last<string>(), out result))
        return;
      channelClasses.Plan.Fill(result.AddHours(12.0));
    }

    private void bCopy_Click(object sender, EventArgs e)
    {
      string newLine = Environment.NewLine;
      StringBuilder stringBuilder = new StringBuilder(eg2012.My.Resources.Resources.htmlClipboardHeader);
      stringBuilder.Append(Environment.NewLine);
      stringBuilder.Append(this.wbr.DocumentText);
      string str = stringBuilder.ToString();
      string format = "D8";
      stringBuilder.Replace("<<<<<<<1", checked (str.IndexOf("<HTML>") + "<HTML>".Length).ToString(format));
      stringBuilder.Replace("<<<<<<<2", str.IndexOf("</HTML>").ToString(format));
      stringBuilder.Replace("<<<<<<<3", checked (str.IndexOf("<!--StartFragment -->") + "<!--StartFragment -->".Length).ToString(format));
      stringBuilder.Replace("<<<<<<<4", str.IndexOf("<!--EndFragment -->").ToString(format));
      Clipboard.SetText(stringBuilder.ToString(), TextDataFormat.Html);
    }

    private void bReport_Click(object sender, EventArgs e) => this.wbr.DocumentText = new htmlClasses.Statistics(channelClasses.ActiveChannel.combStat(this.cReport.Text, this.dRepFrom.Value, this.dRepTo.Value)).page();

    private void bDir_Click(object sender, EventArgs e)
    {
      if (this.FolderBrowserDialog1.ShowDialog() != DialogResult.OK)
        return;
      this.tDir.Text = this.FolderBrowserDialog1.SelectedPath;
    }

    private void cStyleId_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.cStyleId.SelectedIndex < 0)
        return;
      channelClasses.Plan.SetRoot(this.cStyleId.Text, this.cStyleValue);
      channelClasses.Guide.Fill(((IEnumerable<string>) this.cDates.Text.Split(' ')).Last<string>(), this.LstProgr);
      this.bAll2.Text = this.cStyleId.Text + " reeglid";
      this.bStyleIdDel.Enabled = this.cStyleValue.Items.Count < 2;
      channelClasses.ActiveChannel.ReportList(this.cReport);
    }

    private void cStyleValue_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.cStyleValue.SelectedIndex < 0)
        return;
      ComboBox cVias = MyProject.Forms.Dialog1.cVias;
      cVias.Items.Clear();
      try
      {
        foreach (object obj in this.cStyleValue.Items)
        {
          object objectValue = RuntimeHelpers.GetObjectValue(obj);
          cVias.Items.Add(RuntimeHelpers.GetObjectValue(objectValue));
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      this.bSelStyle.Text = this.cStyleValue.Text + " reeglid";
      string text = this.cStyleValue.Text;
      this.wbr.DocumentText = (!string.IsNullOrWhiteSpace(text) ? new htmlClasses.Statistics(text, channelClasses.ActiveChannel.bugStat(text)) : (this.cReport.Items.Count <= 0 ? new htmlClasses.Statistics("pole valitud!", new XElement(XName.Get("reports", ""))) : new htmlClasses.Statistics(channelClasses.ActiveChannel.combStat(this.cReport.Items[0].ToString(), this.dRepFrom.Value, this.dRepTo.Value)))).page();
    }

    private void bStyleIdAdd_Click(object sender, EventArgs e)
    {
      ComboBox cStyleId = this.cStyleId;
      if (!cStyleId.Items.Contains((object) cStyleId.Text))
      {
        cStyleId.Items.Add((object) cStyleId.Text);
        cStyleId.SelectedIndex = checked (cStyleId.Items.Count - 1);
      }
    }

    private void bStyleIdDel_Click(object sender, EventArgs e) => channelClasses.Plan.RemoveRoot(this.cStyleId);

    private void bStyleValueAdd_Click(object sender, EventArgs e)
    {
      ComboBox cStyleValue = this.cStyleValue;
      if (!cStyleValue.Items.Contains((object) cStyleValue.Text))
      {
        cStyleValue.Items.Add((object) cStyleValue.Text);
        cStyleValue.SelectedIndex = checked (cStyleValue.Items.Count - 1);
        this.bStyleIdDel.Enabled = false;
      }
    }

    private void bRestore_Click(object sender, EventArgs e)
    {
      if (!MyProject.Forms.DialogRestore.Init(channelClasses.ActiveChannel.dirResBug) || MyProject.Forms.DialogRestore.ShowDialog() != DialogResult.OK)
        return;
      channelClasses.ActiveChannel.ViaList(this.cVias, MyProject.Forms.DialogRestore.restored);
    }

    private void cPos_CheckedChanged(object sender, EventArgs e) => this.cXy.Visible = this.cPos.Checked;

    private void tDir_TextChanged(object sender, EventArgs e)
    {
      if (this.tDir.Text.ToLower().Contains("\\bug"))
        this.rBug.Checked = true;
      else if (this.tDir.Text.ToLower().Contains("\\sk"))
        this.rSk.Checked = true;
      else if (this.tDir.Text.ToLower().Contains("\\2ident"))
        this.rK2.Checked = true;
      else if (this.tDir.Text.ToLower().Contains("\\11ident"))
        this.rK11.Checked = true;
      else
        this.rEtc.Checked = true;
    }

    private void rSk_CheckedChanged(object sender, EventArgs e)
    {
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.FolderBrowserDialog1 = new FolderBrowserDialog();
      this.cMode = new ComboBox();
      ISectionEntry isectionEntry = new ISectionEntry(ComboBoxStyle.DropDownList, 89, 182, 92);
      this.LstProgr = new ListView();
      this.Time = new ColumnHeader();
      this.ID = new ColumnHeader();
      this.Title = new ColumnHeader();
      this.bugs = new ColumnHeader();
      this.cDates = new ComboBox();
      this.wbr = new WebBrowser();
      this.bCopy = new Button();
      this.cReport = new ComboBox();
      this.bReport = new Button();
      this.dRepFrom = new DateTimePicker();
      this.dRepTo = new DateTimePicker();
      this.Tab1 = new TabControl();
      this.TabPage1 = new TabPage();
      this.grCntrl = new GroupBox();
      this.bRestore = new Button();
      this.addMultiBug = new Button();
      this.lInf = new Label();
      this.bExmpl = new Button();
      this.bk11test = new Button();
      this.bk12test = new Button();
      this.bk2test = new Button();
      this.bSelDate = new Button();
      this.bSelVia = new Button();
      this.bAll = new Button();
      this.bPlay = new Button();
      this.Chk169 = new CheckBox();
      this.bk2 = new Button();
      this.bk11 = new Button();
      this.bk12 = new Button();
      this.TabPage2 = new TabPage();
      this.grStyle = new GroupBox();
      this.addMultiStyle = new Button();
      this.bSelDate2 = new Button();
      this.bSelStyle = new Button();
      this.bAll2 = new Button();
      this.bStyleIdDel = new Button();
      this.bStyleValueAdd = new Button();
      this.bStyleIdAdd = new Button();
      this.cStyleValue = new ComboBox();
      this.cStyleId = new ComboBox();
      this.TabPage3 = new TabPage();
      this.grBug = new GroupBox();
      this.gSelect = new GroupBox();
      this.rK11 = new RadioButton();
      this.rK2 = new RadioButton();
      this.rEtc = new RadioButton();
      this.rSk = new RadioButton();
      this.rBug = new RadioButton();
      this.cXy = new CheckBox();
      this.bExmplMaker = new Button();
      this.gAlign = new GroupBox();
      this.rRight = new RadioButton();
      this.rCenter = new RadioButton();
      this.rLeft = new RadioButton();
      this.chk169only = new CheckBox();
      this.chkVia = new CheckBox();
      this.chkExample = new CheckBox();
      this.cPos = new CheckBox();
      this.bMakeVia = new Button();
      this.chkWide = new CheckBox();
      this.tDir = new TextBox();
      this.bDir = new Button();
      this.cVias = new ComboBox();
      this.Tab1.SuspendLayout();
      this.TabPage1.SuspendLayout();
      this.grCntrl.SuspendLayout();
      this.TabPage2.SuspendLayout();
      this.grStyle.SuspendLayout();
      this.TabPage3.SuspendLayout();
      this.grBug.SuspendLayout();
      this.gSelect.SuspendLayout();
      this.gAlign.SuspendLayout();
      this.SuspendLayout();
      this.FolderBrowserDialog1.Description = "Originaalfailide asukoht";
      this.FolderBrowserDialog1.SelectedPath = "E:\\Eetrigraafika\\bug";
      this.FolderBrowserDialog1.ShowNewFolderButton = false;
      this.cMode.FormattingEnabled = true;
      this.cMode.Location = new Point(4, 12);
      this.cMode.Name = "cMode";
      this.cMode.Size = new Size(165, 21);
      this.cMode.TabIndex = 15;
      this.LstProgr.Columns.AddRange(new ColumnHeader[4]
      {
        this.Time,
        this.ID,
        this.Title,
        this.bugs
      });
      this.LstProgr.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 186);
      this.LstProgr.FullRowSelect = true;
      this.LstProgr.GridLines = true;
      this.LstProgr.HeaderStyle = ColumnHeaderStyle.Nonclickable;
      this.LstProgr.Location = new Point(505, 11);
      this.LstProgr.Margin = new Padding(2);
      this.LstProgr.Name = "LstProgr";
      this.LstProgr.Size = new Size(666, 591);
      this.LstProgr.TabIndex = 18;
      this.LstProgr.UseCompatibleStateImageBehavior = false;
      this.LstProgr.View = View.Details;
      this.Time.Text = "Aeg";
      this.Time.Width = 48;
      this.ID.Text = "ID";
      this.ID.Width = 130;
      this.Title.Text = "Saade";
      this.Title.Width = 250;
      this.bugs.Text = "Bugid";
      this.bugs.Width = 232;
      this.cDates.FormattingEnabled = true;
      this.cDates.Location = new Point(380, 12);
      this.cDates.Name = "cDates";
      this.cDates.Size = new Size(117, 21);
      this.cDates.TabIndex = 19;
      this.wbr.Location = new Point(4, 225);
      this.wbr.MinimumSize = new Size(20, 20);
      this.wbr.Name = "wbr";
      this.wbr.Size = new Size(496, 340);
      this.wbr.TabIndex = 25;
      this.bCopy.Location = new Point(451, 571);
      this.bCopy.Name = "bCopy";
      this.bCopy.Size = new Size(46, 22);
      this.bCopy.TabIndex = 26;
      this.bCopy.Text = "Copy";
      this.bCopy.UseVisualStyleBackColor = true;
      this.cReport.FormattingEnabled = true;
      this.cReport.Location = new Point(4, 573);
      this.cReport.Name = "cReport";
      this.cReport.Size = new Size(123, 21);
      this.cReport.TabIndex = 27;
      this.bReport.Location = new Point(347, 572);
      this.bReport.Name = "bReport";
      this.bReport.Size = new Size(51, 22);
      this.bReport.TabIndex = 28;
      this.bReport.Text = "Report";
      this.bReport.UseVisualStyleBackColor = true;
      this.dRepFrom.CustomFormat = "yyyy.MM.dd";
      this.dRepFrom.Format = DateTimePickerFormat.Custom;
      this.dRepFrom.Location = new Point(133, 574);
      this.dRepFrom.Name = "dRepFrom";
      this.dRepFrom.Size = new Size(101, 20);
      this.dRepFrom.TabIndex = 29;
      this.dRepTo.CustomFormat = "yyyy.MM.dd";
      this.dRepTo.Format = DateTimePickerFormat.Custom;
      this.dRepTo.Location = new Point(240, 574);
      this.dRepTo.Name = "dRepTo";
      this.dRepTo.Size = new Size(101, 20);
      this.dRepTo.TabIndex = 30;
      this.Tab1.Appearance = TabAppearance.FlatButtons;
      this.Tab1.Controls.Add((System.Windows.Forms.Control) this.TabPage1);
      this.Tab1.Controls.Add((System.Windows.Forms.Control) this.TabPage2);
      this.Tab1.Controls.Add((System.Windows.Forms.Control) this.TabPage3);
      this.Tab1.Location = new Point(4, 39);
      this.Tab1.Name = "Tab1";
      this.Tab1.SelectedIndex = 0;
      this.Tab1.Size = new Size(496, 184);
      this.Tab1.TabIndex = 32;
      this.TabPage1.Controls.Add((System.Windows.Forms.Control) this.grCntrl);
      this.TabPage1.Location = new Point(4, 25);
      this.TabPage1.Name = "TabPage1";
      this.TabPage1.Padding = new Padding(3);
      this.TabPage1.Size = new Size(488, 155);
      this.TabPage1.TabIndex = 0;
      this.TabPage1.Text = "bugmanager";
      this.TabPage1.UseVisualStyleBackColor = true;
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bRestore);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.addMultiBug);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.lInf);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bExmpl);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bk11test);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bk12test);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bk2test);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bSelDate);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bSelVia);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bAll);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bPlay);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.Chk169);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bk2);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bk11);
      this.grCntrl.Controls.Add((System.Windows.Forms.Control) this.bk12);
      this.grCntrl.Location = new Point(6, 6);
      this.grCntrl.Name = "grCntrl";
      this.grCntrl.Size = new Size(475, 143);
      this.grCntrl.TabIndex = 25;
      this.grCntrl.TabStop = false;
      this.bRestore.Location = new Point(6, 114);
      this.bRestore.Name = "bRestore";
      this.bRestore.Size = new Size(87, 23);
      this.bRestore.TabIndex = 33;
      this.bRestore.Text = "Vanad bugid";
      this.bRestore.UseVisualStyleBackColor = true;
      this.addMultiBug.Location = new Point(445, 11);
      this.addMultiBug.Name = "addMultiBug";
      this.addMultiBug.Size = new Size(23, 117);
      this.addMultiBug.TabIndex = 32;
      this.addMultiBug.Text = "------";
      this.addMultiBug.UseVisualStyleBackColor = true;
      this.lInf.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.lInf.AutoSize = true;
      this.lInf.Location = new Point(116, 92);
      this.lInf.Name = "lInf";
      this.lInf.Size = new Size(39, 13);
      this.lInf.TabIndex = 31;
      this.lInf.Text = "Label1";
      this.lInf.TextAlign = ContentAlignment.TopRight;
      this.bExmpl.Location = new Point(6, 64);
      this.bExmpl.Name = "bExmpl";
      this.bExmpl.Size = new Size(71, 21);
      this.bExmpl.TabIndex = 30;
      this.bExmpl.Text = "Näidis";
      this.bExmpl.UseVisualStyleBackColor = true;
      this.bk11test.Location = new Point(176, 46);
      this.bk11test.Name = "bk11test";
      this.bk11test.Size = new Size(52, 21);
      this.bk11test.TabIndex = 29;
      this.bk11test.Text = "test";
      this.bk11test.UseVisualStyleBackColor = true;
      this.bk11test.Visible = false;
      this.bk12test.Location = new Point(234, 46);
      this.bk12test.Name = "bk12test";
      this.bk12test.Size = new Size(52, 21);
      this.bk12test.TabIndex = 28;
      this.bk12test.Text = "test";
      this.bk12test.UseVisualStyleBackColor = true;
      this.bk2test.Location = new Point(118, 46);
      this.bk2test.Name = "bk2test";
      this.bk2test.Size = new Size(52, 21);
      this.bk2test.TabIndex = 27;
      this.bk2test.Text = "test";
      this.bk2test.UseVisualStyleBackColor = true;
      this.bSelDate.Location = new Point(328, 93);
      this.bSelDate.Name = "bSelDate";
      this.bSelDate.Size = new Size(111, 35);
      this.bSelDate.TabIndex = 22;
      this.bSelDate.Text = "valitud kuupäeva reeglid";
      this.bSelDate.UseVisualStyleBackColor = true;
      this.bSelVia.Location = new Point(328, 11);
      this.bSelVia.Name = "bSelVia";
      this.bSelVia.Size = new Size(111, 35);
      this.bSelVia.TabIndex = 21;
      this.bSelVia.Text = "valitud bugi reeglid";
      this.bSelVia.UseVisualStyleBackColor = true;
      this.bAll.Location = new Point(328, 52);
      this.bAll.Name = "bAll";
      this.bAll.Size = new Size(111, 35);
      this.bAll.TabIndex = 20;
      this.bAll.Text = "kõik reeglid";
      this.bAll.UseVisualStyleBackColor = true;
      this.bPlay.Location = new Point(6, 18);
      this.bPlay.Name = "bPlay";
      this.bPlay.Size = new Size(71, 21);
      this.bPlay.TabIndex = 10;
      this.bPlay.Text = "Ekraanile";
      this.bPlay.UseVisualStyleBackColor = true;
      this.bPlay.Visible = false;
      this.Chk169.AutoSize = true;
      this.Chk169.Location = new Point(6, 41);
      this.Chk169.Name = "Chk169";
      this.Chk169.Size = new Size(47, 17);
      this.Chk169.TabIndex = 9;
      this.Chk169.Text = "16:9";
      this.Chk169.UseVisualStyleBackColor = true;
      this.Chk169.Visible = false;
      this.bk2.Location = new Point(119, 18);
      this.bk2.Name = "bk2";
      this.bk2.Size = new Size(51, 21);
      this.bk2.TabIndex = 12;
      this.bk2.Text = "K2";
      this.bk2.UseVisualStyleBackColor = true;
      this.bk11.Location = new Point(176, 19);
      this.bk11.Name = "bk11";
      this.bk11.Size = new Size(52, 21);
      this.bk11.TabIndex = 13;
      this.bk11.Text = "K11";
      this.bk11.UseVisualStyleBackColor = true;
      this.bk12.Location = new Point(234, 19);
      this.bk12.Name = "bk12";
      this.bk12.Size = new Size(52, 21);
      this.bk12.TabIndex = 14;
      this.bk12.Text = "K12";
      this.bk12.UseVisualStyleBackColor = true;
      this.TabPage2.Controls.Add((System.Windows.Forms.Control) this.grStyle);
      this.TabPage2.Location = new Point(4, 25);
      this.TabPage2.Name = "TabPage2";
      this.TabPage2.Padding = new Padding(3);
      this.TabPage2.Size = new Size(488, 155);
      this.TabPage2.TabIndex = 1;
      this.TabPage2.Text = "stylemanager";
      this.TabPage2.UseVisualStyleBackColor = true;
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.addMultiStyle);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.bSelDate2);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.bSelStyle);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.bAll2);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.bStyleIdDel);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.bStyleValueAdd);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.bStyleIdAdd);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.cStyleValue);
      this.grStyle.Controls.Add((System.Windows.Forms.Control) this.cStyleId);
      this.grStyle.Location = new Point(6, 6);
      this.grStyle.Name = "grStyle";
      this.grStyle.Size = new Size(475, 143);
      this.grStyle.TabIndex = 32;
      this.grStyle.TabStop = false;
      this.addMultiStyle.Location = new Point(445, 11);
      this.addMultiStyle.Name = "addMultiStyle";
      this.addMultiStyle.Size = new Size(23, 117);
      this.addMultiStyle.TabIndex = 35;
      this.addMultiStyle.Text = "------";
      this.addMultiStyle.UseVisualStyleBackColor = true;
      this.bSelDate2.Location = new Point(328, 92);
      this.bSelDate2.Name = "bSelDate2";
      this.bSelDate2.Size = new Size(111, 35);
      this.bSelDate2.TabIndex = 32;
      this.bSelDate2.Text = "valitud kuupäeva reeglid";
      this.bSelDate2.UseVisualStyleBackColor = true;
      this.bSelStyle.Location = new Point(328, 51);
      this.bSelStyle.Name = "bSelStyle";
      this.bSelStyle.Size = new Size(111, 35);
      this.bSelStyle.TabIndex = 31;
      this.bSelStyle.Text = "valitud style reeglid";
      this.bSelStyle.UseVisualStyleBackColor = true;
      this.bAll2.Location = new Point(328, 11);
      this.bAll2.Name = "bAll2";
      this.bAll2.Size = new Size(111, 35);
      this.bAll2.TabIndex = 30;
      this.bAll2.Text = "kõik reeglid";
      this.bAll2.UseVisualStyleBackColor = true;
      this.bStyleIdDel.Enabled = false;
      this.bStyleIdDel.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 186);
      this.bStyleIdDel.Location = new Point(61, 16);
      this.bStyleIdDel.Name = "bStyleIdDel";
      this.bStyleIdDel.Size = new Size(25, 25);
      this.bStyleIdDel.TabIndex = 34;
      this.bStyleIdDel.Text = "-";
      this.bStyleIdDel.UseVisualStyleBackColor = true;
      this.bStyleValueAdd.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 186);
      this.bStyleValueAdd.Location = new Point(92, 57);
      this.bStyleValueAdd.Name = "bStyleValueAdd";
      this.bStyleValueAdd.Size = new Size(25, 25);
      this.bStyleValueAdd.TabIndex = 33;
      this.bStyleValueAdd.Text = "+";
      this.bStyleValueAdd.UseVisualStyleBackColor = true;
      this.bStyleIdAdd.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 186);
      this.bStyleIdAdd.Location = new Point(92, 16);
      this.bStyleIdAdd.Name = "bStyleIdAdd";
      this.bStyleIdAdd.Size = new Size(25, 25);
      this.bStyleIdAdd.TabIndex = 32;
      this.bStyleIdAdd.Text = "+";
      this.bStyleIdAdd.UseVisualStyleBackColor = true;
      this.cStyleValue.FormattingEnabled = true;
      this.cStyleValue.Location = new Point(123, 59);
      this.cStyleValue.Name = "cStyleValue";
      this.cStyleValue.Size = new Size(199, 21);
      this.cStyleValue.TabIndex = 31;
      this.cStyleId.FormattingEnabled = true;
      this.cStyleId.Location = new Point(123, 19);
      this.cStyleId.Name = "cStyleId";
      this.cStyleId.Size = new Size(199, 21);
      this.cStyleId.TabIndex = 30;
      this.TabPage3.Controls.Add((System.Windows.Forms.Control) this.grBug);
      this.TabPage3.Location = new Point(4, 25);
      this.TabPage3.Name = "TabPage3";
      this.TabPage3.Padding = new Padding(3);
      this.TabPage3.Size = new Size(488, 155);
      this.TabPage3.TabIndex = 2;
      this.TabPage3.Text = "bugmaker";
      this.TabPage3.UseVisualStyleBackColor = true;
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.gSelect);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.cXy);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.bExmplMaker);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.gAlign);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.chk169only);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.chkVia);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.chkExample);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.cPos);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.bMakeVia);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.chkWide);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.tDir);
      this.grBug.Controls.Add((System.Windows.Forms.Control) this.bDir);
      this.grBug.Location = new Point(6, 6);
      this.grBug.Name = "grBug";
      this.grBug.Size = new Size(475, 143);
      this.grBug.TabIndex = 18;
      this.grBug.TabStop = false;
      this.gSelect.Controls.Add((System.Windows.Forms.Control) this.rK11);
      this.gSelect.Controls.Add((System.Windows.Forms.Control) this.rK2);
      this.gSelect.Controls.Add((System.Windows.Forms.Control) this.rEtc);
      this.gSelect.Controls.Add((System.Windows.Forms.Control) this.rSk);
      this.gSelect.Controls.Add((System.Windows.Forms.Control) this.rBug);
      this.gSelect.Location = new Point(143, 101);
      this.gSelect.Name = "gSelect";
      this.gSelect.Size = new Size(326, 37);
      this.gSelect.TabIndex = 36;
      this.gSelect.TabStop = false;
      this.gSelect.Text = "Renderduse tüüp";
      this.rK11.AutoSize = true;
      this.rK11.Location = new Point(157, 14);
      this.rK11.Name = "rK11";
      this.rK11.Size = new Size(66, 17);
      this.rK11.TabIndex = 36;
      this.rK11.TabStop = true;
      this.rK11.Text = "k11 logo";
      this.rK11.UseVisualStyleBackColor = true;
      this.rK2.AutoSize = true;
      this.rK2.Location = new Point(101, 14);
      this.rK2.Name = "rK2";
      this.rK2.Size = new Size(60, 17);
      this.rK2.TabIndex = 35;
      this.rK2.TabStop = true;
      this.rK2.Text = "k2 logo";
      this.rK2.UseVisualStyleBackColor = true;
      this.rEtc.AutoSize = true;
      this.rEtc.Location = new Point(280, 14);
      this.rEtc.Name = "rEtc";
      this.rEtc.Size = new Size(40, 17);
      this.rEtc.TabIndex = 34;
      this.rEtc.TabStop = true;
      this.rEtc.Text = "etc";
      this.rEtc.UseVisualStyleBackColor = true;
      this.rSk.AutoSize = true;
      this.rSk.Location = new Point(56, 16);
      this.rSk.Name = "rSk";
      this.rSk.Size = new Size(39, 17);
      this.rSk.TabIndex = 33;
      this.rSk.TabStop = true;
      this.rSk.Text = "SK";
      this.rSk.UseVisualStyleBackColor = true;
      this.rBug.AutoSize = true;
      this.rBug.Location = new Point(6, 15);
      this.rBug.Name = "rBug";
      this.rBug.Size = new Size(44, 17);
      this.rBug.TabIndex = 32;
      this.rBug.TabStop = true;
      this.rBug.Text = "Bug";
      this.rBug.UseVisualStyleBackColor = true;
      this.cXy.AutoSize = true;
      this.cXy.Location = new Point(180, 61);
      this.cXy.Name = "cXy";
      this.cXy.Size = new Size(102, 17);
      this.cXy.TabIndex = 35;
      this.cXy.Text = "Ainult positsioon";
      this.cXy.UseVisualStyleBackColor = true;
      this.cXy.Visible = false;
      this.bExmplMaker.Location = new Point(6, 64);
      this.bExmplMaker.Name = "bExmplMaker";
      this.bExmplMaker.Size = new Size(71, 21);
      this.bExmplMaker.TabIndex = 34;
      this.bExmplMaker.Text = "Näidis";
      this.bExmplMaker.UseVisualStyleBackColor = true;
      this.gAlign.Controls.Add((System.Windows.Forms.Control) this.rRight);
      this.gAlign.Controls.Add((System.Windows.Forms.Control) this.rCenter);
      this.gAlign.Controls.Add((System.Windows.Forms.Control) this.rLeft);
      this.gAlign.Location = new Point(6, 101);
      this.gAlign.Name = "gAlign";
      this.gAlign.Size = new Size(132, 37);
      this.gAlign.TabIndex = 31;
      this.gAlign.TabStop = false;
      this.gAlign.Text = "4:3 Joondus";
      this.rRight.AutoSize = true;
      this.rRight.Location = new Point(95, 16);
      this.rRight.Name = "rRight";
      this.rRight.Size = new Size(36, 17);
      this.rRight.TabIndex = 34;
      this.rRight.TabStop = true;
      this.rRight.Text = "->|";
      this.rRight.UseVisualStyleBackColor = true;
      this.rCenter.AutoSize = true;
      this.rCenter.Location = new Point(48, 16);
      this.rCenter.Name = "rCenter";
      this.rCenter.Size = new Size(41, 17);
      this.rCenter.TabIndex = 33;
      this.rCenter.TabStop = true;
      this.rCenter.Text = "|<>|";
      this.rCenter.UseVisualStyleBackColor = true;
      this.rLeft.AutoSize = true;
      this.rLeft.Location = new Point(6, 16);
      this.rLeft.Name = "rLeft";
      this.rLeft.Size = new Size(36, 17);
      this.rLeft.TabIndex = 32;
      this.rLeft.TabStop = true;
      this.rLeft.Text = "|<-";
      this.rLeft.UseVisualStyleBackColor = true;
      this.chk169only.AutoSize = true;
      this.chk169only.Location = new Point(366, 80);
      this.chk169only.Name = "chk169only";
      this.chk169only.Size = new Size(75, 17);
      this.chk169only.TabIndex = 29;
      this.chk169only.Text = "ainult 16:9";
      this.chk169only.UseVisualStyleBackColor = true;
      this.chkVia.AutoSize = true;
      this.chkVia.Checked = true;
      this.chkVia.CheckState = CheckState.Checked;
      this.chkVia.Location = new Point(366, 41);
      this.chkVia.Name = "chkVia";
      this.chkVia.Size = new Size(53, 17);
      this.chkVia.TabIndex = 24;
      this.chkVia.Text = "Video";
      this.chkVia.UseVisualStyleBackColor = true;
      this.chkExample.AutoSize = true;
      this.chkExample.Checked = true;
      this.chkExample.CheckState = CheckState.Checked;
      this.chkExample.Location = new Point(366, 61);
      this.chkExample.Name = "chkExample";
      this.chkExample.Size = new Size(55, 17);
      this.chkExample.TabIndex = 23;
      this.chkExample.Text = "Näidis";
      this.chkExample.UseVisualStyleBackColor = true;
      this.cPos.AutoSize = true;
      this.cPos.Location = new Point(180, 41);
      this.cPos.Name = "cPos";
      this.cPos.Size = new Size(167, 17);
      this.cPos.TabIndex = 15;
      this.cPos.Text = "Suuruse/positsiooni muutmine";
      this.cPos.UseVisualStyleBackColor = true;
      this.bMakeVia.Location = new Point(358, 9);
      this.bMakeVia.Name = "bMakeVia";
      this.bMakeVia.Size = new Size(111, 30);
      this.bMakeVia.TabIndex = 6;
      this.bMakeVia.Text = "Render";
      this.bMakeVia.UseVisualStyleBackColor = true;
      this.chkWide.AutoSize = true;
      this.chkWide.Location = new Point(6, 41);
      this.chkWide.Name = "chkWide";
      this.chkWide.Size = new Size(168, 17);
      this.chkWide.TabIndex = 7;
      this.chkWide.Text = "originaal  on 16:9 (720 kaadril)";
      this.chkWide.UseVisualStyleBackColor = true;
      this.tDir.Location = new Point(6, 15);
      this.tDir.Name = "tDir";
      this.tDir.Size = new Size(310, 20);
      this.tDir.TabIndex = 0;
      this.bDir.Image = (Image) eg2012.My.Resources.Resources.folder_open;
      this.bDir.Location = new Point(322, 9);
      this.bDir.Name = "bDir";
      this.bDir.Size = new Size(30, 30);
      this.bDir.TabIndex = 1;
      this.bDir.UseVisualStyleBackColor = true;
      this.cVias.FormattingEnabled = true;
      this.cVias.Location = new Point(175, 12);
      this.cVias.Name = "cVias";
      this.cVias.Size = new Size(199, 21);
      this.cVias.TabIndex = 11;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1177, 607);
      this.Controls.Add((System.Windows.Forms.Control) this.Tab1);
      this.Controls.Add((System.Windows.Forms.Control) this.dRepTo);
      this.Controls.Add((System.Windows.Forms.Control) this.dRepFrom);
      this.Controls.Add((System.Windows.Forms.Control) this.bReport);
      this.Controls.Add((System.Windows.Forms.Control) this.cReport);
      this.Controls.Add((System.Windows.Forms.Control) this.bCopy);
      this.Controls.Add((System.Windows.Forms.Control) this.wbr);
      this.Controls.Add((System.Windows.Forms.Control) this.cDates);
      this.Controls.Add((System.Windows.Forms.Control) this.cVias);
      this.Controls.Add((System.Windows.Forms.Control) this.LstProgr);
      this.Controls.Add((System.Windows.Forms.Control) this.cMode);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.Text = "Bug Manager";
      this.Tab1.ResumeLayout(false);
      this.TabPage1.ResumeLayout(false);
      this.grCntrl.ResumeLayout(false);
      this.grCntrl.PerformLayout();
      this.TabPage2.ResumeLayout(false);
      this.grStyle.ResumeLayout(false);
      this.TabPage3.ResumeLayout(false);
      this.grBug.ResumeLayout(false);
      this.grBug.PerformLayout();
      this.gSelect.ResumeLayout(false);
      this.gSelect.PerformLayout();
      this.gAlign.ResumeLayout(false);
      this.gAlign.PerformLayout();
      this.ResumeLayout(false);
    }

    [field: AccessedThroughProperty("FolderBrowserDialog1")]
    internal virtual FolderBrowserDialog FolderBrowserDialog1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ComboBox cMode
    {
      get => this._cMode;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cMode_SelectedIndexChanged);
        ComboBox cMode1 = this._cMode;
        if (cMode1 != null)
          cMode1.SelectedIndexChanged -= eventHandler;
        this._cMode = value;
        ComboBox cMode2 = this._cMode;
        if (cMode2 == null)
          return;
        cMode2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual ListView LstProgr
    {
      get => this._LstProgr;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.LstProgr_DoubleClick);
        ListView lstProgr1 = this._LstProgr;
        if (lstProgr1 != null)
          lstProgr1.DoubleClick -= eventHandler;
        this._LstProgr = value;
        ListView lstProgr2 = this._LstProgr;
        if (lstProgr2 == null)
          return;
        lstProgr2.DoubleClick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Time")]
    internal virtual ColumnHeader Time { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("ID")]
    internal virtual ColumnHeader ID { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Title")]
    internal virtual ColumnHeader Title { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("bugs")]
    internal virtual ColumnHeader bugs { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ComboBox cDates
    {
      get => this._cDates;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cDates_SelectedIndexChanged);
        ComboBox cDates1 = this._cDates;
        if (cDates1 != null)
          cDates1.SelectedIndexChanged -= eventHandler;
        this._cDates = value;
        ComboBox cDates2 = this._cDates;
        if (cDates2 == null)
          return;
        cDates2.SelectedIndexChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("wbr")]
    internal virtual WebBrowser wbr { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button bCopy
    {
      get => this._bCopy;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bCopy_Click);
        Button bCopy1 = this._bCopy;
        if (bCopy1 != null)
          bCopy1.Click -= eventHandler;
        this._bCopy = value;
        Button bCopy2 = this._bCopy;
        if (bCopy2 == null)
          return;
        bCopy2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("cReport")]
    internal virtual ComboBox cReport { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button bReport
    {
      get => this._bReport;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bReport_Click);
        Button bReport1 = this._bReport;
        if (bReport1 != null)
          bReport1.Click -= eventHandler;
        this._bReport = value;
        Button bReport2 = this._bReport;
        if (bReport2 == null)
          return;
        bReport2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("dRepFrom")]
    internal virtual DateTimePicker dRepFrom { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("dRepTo")]
    internal virtual DateTimePicker dRepTo { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Tab1")]
    internal virtual TabControl Tab1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("TabPage1")]
    internal virtual TabPage TabPage1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("grCntrl")]
    internal virtual GroupBox grCntrl { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button bRestore
    {
      get => this._bRestore;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bRestore_Click);
        Button bRestore1 = this._bRestore;
        if (bRestore1 != null)
          bRestore1.Click -= eventHandler;
        this._bRestore = value;
        Button bRestore2 = this._bRestore;
        if (bRestore2 == null)
          return;
        bRestore2.Click += eventHandler;
      }
    }

    internal virtual Button addMultiBug
    {
      get => this._addMultiBug;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.addMultiBug_Click);
        Button addMultiBug1 = this._addMultiBug;
        if (addMultiBug1 != null)
          addMultiBug1.Click -= eventHandler;
        this._addMultiBug = value;
        Button addMultiBug2 = this._addMultiBug;
        if (addMultiBug2 == null)
          return;
        addMultiBug2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("lInf")]
    internal virtual Label lInf { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button bExmpl
    {
      get => this._bExmpl;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cmdExmpl_Click);
        Button bExmpl1 = this._bExmpl;
        if (bExmpl1 != null)
          bExmpl1.Click -= eventHandler;
        this._bExmpl = value;
        Button bExmpl2 = this._bExmpl;
        if (bExmpl2 == null)
          return;
        bExmpl2.Click += eventHandler;
      }
    }

    internal virtual Button bk11test
    {
      get => this._bk11test;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bk_Click);
        Button bk11test1 = this._bk11test;
        if (bk11test1 != null)
          bk11test1.Click -= eventHandler;
        this._bk11test = value;
        Button bk11test2 = this._bk11test;
        if (bk11test2 == null)
          return;
        bk11test2.Click += eventHandler;
      }
    }

    internal virtual Button bk12test
    {
      get => this._bk12test;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bk_Click);
        Button bk12test1 = this._bk12test;
        if (bk12test1 != null)
          bk12test1.Click -= eventHandler;
        this._bk12test = value;
        Button bk12test2 = this._bk12test;
        if (bk12test2 == null)
          return;
        bk12test2.Click += eventHandler;
      }
    }

    internal virtual Button bk2test
    {
      get => this._bk2test;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bk_Click);
        Button bk2test1 = this._bk2test;
        if (bk2test1 != null)
          bk2test1.Click -= eventHandler;
        this._bk2test = value;
        Button bk2test2 = this._bk2test;
        if (bk2test2 == null)
          return;
        bk2test2.Click += eventHandler;
      }
    }

    internal virtual Button bSelDate
    {
      get => this._bSelDate;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bSelDate_Click);
        Button bSelDate1 = this._bSelDate;
        if (bSelDate1 != null)
          bSelDate1.Click -= eventHandler;
        this._bSelDate = value;
        Button bSelDate2 = this._bSelDate;
        if (bSelDate2 == null)
          return;
        bSelDate2.Click += eventHandler;
      }
    }

    internal virtual ComboBox cVias
    {
      get => this._cVias;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cVias_SelectedIndexChanged);
        ComboBox cVias1 = this._cVias;
        if (cVias1 != null)
          cVias1.SelectedIndexChanged -= eventHandler;
        this._cVias = value;
        ComboBox cVias2 = this._cVias;
        if (cVias2 == null)
          return;
        cVias2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual Button bSelVia
    {
      get => this._bSelVia;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bSelVia_Click);
        Button bSelVia1 = this._bSelVia;
        if (bSelVia1 != null)
          bSelVia1.Click -= eventHandler;
        this._bSelVia = value;
        Button bSelVia2 = this._bSelVia;
        if (bSelVia2 == null)
          return;
        bSelVia2.Click += eventHandler;
      }
    }

    internal virtual Button bAll
    {
      get => this._bAll;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bAll_Click);
        Button bAll1 = this._bAll;
        if (bAll1 != null)
          bAll1.Click -= eventHandler;
        this._bAll = value;
        Button bAll2 = this._bAll;
        if (bAll2 == null)
          return;
        bAll2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("bPlay")]
    internal virtual Button bPlay { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Chk169")]
    internal virtual CheckBox Chk169 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button bk2
    {
      get => this._bk2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bk_Click);
        Button bk2_1 = this._bk2;
        if (bk2_1 != null)
          bk2_1.Click -= eventHandler;
        this._bk2 = value;
        Button bk2_2 = this._bk2;
        if (bk2_2 == null)
          return;
        bk2_2.Click += eventHandler;
      }
    }

    internal virtual Button bk11
    {
      get => this._bk11;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bk_Click);
        Button bk11_1 = this._bk11;
        if (bk11_1 != null)
          bk11_1.Click -= eventHandler;
        this._bk11 = value;
        Button bk11_2 = this._bk11;
        if (bk11_2 == null)
          return;
        bk11_2.Click += eventHandler;
      }
    }

    internal virtual Button bk12
    {
      get => this._bk12;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bk_Click);
        Button bk12_1 = this._bk12;
        if (bk12_1 != null)
          bk12_1.Click -= eventHandler;
        this._bk12 = value;
        Button bk12_2 = this._bk12;
        if (bk12_2 == null)
          return;
        bk12_2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("TabPage2")]
    internal virtual TabPage TabPage2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("grStyle")]
    internal virtual GroupBox grStyle { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button addMultiStyle
    {
      get => this._addMultiStyle;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.addMultiStyle_Click);
        Button addMultiStyle1 = this._addMultiStyle;
        if (addMultiStyle1 != null)
          addMultiStyle1.Click -= eventHandler;
        this._addMultiStyle = value;
        Button addMultiStyle2 = this._addMultiStyle;
        if (addMultiStyle2 == null)
          return;
        addMultiStyle2.Click += eventHandler;
      }
    }

    internal virtual Button bSelDate2
    {
      get => this._bSelDate2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bSelDate2_Click);
        Button bSelDate2_1 = this._bSelDate2;
        if (bSelDate2_1 != null)
          bSelDate2_1.Click -= eventHandler;
        this._bSelDate2 = value;
        Button bSelDate2_2 = this._bSelDate2;
        if (bSelDate2_2 == null)
          return;
        bSelDate2_2.Click += eventHandler;
      }
    }

    internal virtual Button bSelStyle
    {
      get => this._bSelStyle;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bSelStyle_Click);
        Button bSelStyle1 = this._bSelStyle;
        if (bSelStyle1 != null)
          bSelStyle1.Click -= eventHandler;
        this._bSelStyle = value;
        Button bSelStyle2 = this._bSelStyle;
        if (bSelStyle2 == null)
          return;
        bSelStyle2.Click += eventHandler;
      }
    }

    internal virtual Button bAll2
    {
      get => this._bAll2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bAll2_Click);
        Button bAll2_1 = this._bAll2;
        if (bAll2_1 != null)
          bAll2_1.Click -= eventHandler;
        this._bAll2 = value;
        Button bAll2_2 = this._bAll2;
        if (bAll2_2 == null)
          return;
        bAll2_2.Click += eventHandler;
      }
    }

    internal virtual Button bStyleIdDel
    {
      get => this._bStyleIdDel;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bStyleIdDel_Click);
        Button bStyleIdDel1 = this._bStyleIdDel;
        if (bStyleIdDel1 != null)
          bStyleIdDel1.Click -= eventHandler;
        this._bStyleIdDel = value;
        Button bStyleIdDel2 = this._bStyleIdDel;
        if (bStyleIdDel2 == null)
          return;
        bStyleIdDel2.Click += eventHandler;
      }
    }

    internal virtual Button bStyleValueAdd
    {
      get => this._bStyleValueAdd;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bStyleValueAdd_Click);
        Button bStyleValueAdd1 = this._bStyleValueAdd;
        if (bStyleValueAdd1 != null)
          bStyleValueAdd1.Click -= eventHandler;
        this._bStyleValueAdd = value;
        Button bStyleValueAdd2 = this._bStyleValueAdd;
        if (bStyleValueAdd2 == null)
          return;
        bStyleValueAdd2.Click += eventHandler;
      }
    }

    internal virtual Button bStyleIdAdd
    {
      get => this._bStyleIdAdd;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bStyleIdAdd_Click);
        Button bStyleIdAdd1 = this._bStyleIdAdd;
        if (bStyleIdAdd1 != null)
          bStyleIdAdd1.Click -= eventHandler;
        this._bStyleIdAdd = value;
        Button bStyleIdAdd2 = this._bStyleIdAdd;
        if (bStyleIdAdd2 == null)
          return;
        bStyleIdAdd2.Click += eventHandler;
      }
    }

    internal virtual ComboBox cStyleValue
    {
      get => this._cStyleValue;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cStyleValue_SelectedIndexChanged);
        ComboBox cStyleValue1 = this._cStyleValue;
        if (cStyleValue1 != null)
          cStyleValue1.SelectedIndexChanged -= eventHandler;
        this._cStyleValue = value;
        ComboBox cStyleValue2 = this._cStyleValue;
        if (cStyleValue2 == null)
          return;
        cStyleValue2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual ComboBox cStyleId
    {
      get => this._cStyleId;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cStyleId_SelectedIndexChanged);
        ComboBox cStyleId1 = this._cStyleId;
        if (cStyleId1 != null)
          cStyleId1.SelectedIndexChanged -= eventHandler;
        this._cStyleId = value;
        ComboBox cStyleId2 = this._cStyleId;
        if (cStyleId2 == null)
          return;
        cStyleId2.SelectedIndexChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("TabPage3")]
    internal virtual TabPage TabPage3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("grBug")]
    internal virtual GroupBox grBug { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("gAlign")]
    internal virtual GroupBox gAlign { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("rRight")]
    internal virtual RadioButton rRight { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("rCenter")]
    internal virtual RadioButton rCenter { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("rLeft")]
    internal virtual RadioButton rLeft { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chk169only")]
    internal virtual CheckBox chk169only { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkVia")]
    internal virtual CheckBox chkVia { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkExample")]
    internal virtual CheckBox chkExample { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual CheckBox cPos
    {
      get => this._cPos;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cPos_CheckedChanged);
        CheckBox cPos1 = this._cPos;
        if (cPos1 != null)
          cPos1.CheckedChanged -= eventHandler;
        this._cPos = value;
        CheckBox cPos2 = this._cPos;
        if (cPos2 == null)
          return;
        cPos2.CheckedChanged += eventHandler;
      }
    }

    internal virtual Button bMakeVia
    {
      get => this._bMakeVia;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bMakeVia_Click);
        Button bMakeVia1 = this._bMakeVia;
        if (bMakeVia1 != null)
          bMakeVia1.Click -= eventHandler;
        this._bMakeVia = value;
        Button bMakeVia2 = this._bMakeVia;
        if (bMakeVia2 == null)
          return;
        bMakeVia2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("chkWide")]
    internal virtual CheckBox chkWide { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual TextBox tDir
    {
      get => this._tDir;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tDir_TextChanged);
        TextBox tDir1 = this._tDir;
        if (tDir1 != null)
          tDir1.TextChanged -= eventHandler;
        this._tDir = value;
        TextBox tDir2 = this._tDir;
        if (tDir2 == null)
          return;
        tDir2.TextChanged += eventHandler;
      }
    }

    internal virtual Button bDir
    {
      get => this._bDir;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bDir_Click);
        Button bDir1 = this._bDir;
        if (bDir1 != null)
          bDir1.Click -= eventHandler;
        this._bDir = value;
        Button bDir2 = this._bDir;
        if (bDir2 == null)
          return;
        bDir2.Click += eventHandler;
      }
    }

    internal virtual Button bExmplMaker
    {
      get => this._bExmplMaker;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cmdExmpl_Click);
        Button bExmplMaker1 = this._bExmplMaker;
        if (bExmplMaker1 != null)
          bExmplMaker1.Click -= eventHandler;
        this._bExmplMaker = value;
        Button bExmplMaker2 = this._bExmplMaker;
        if (bExmplMaker2 == null)
          return;
        bExmplMaker2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("cXy")]
    internal virtual CheckBox cXy { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("gSelect")]
    internal virtual GroupBox gSelect { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("rEtc")]
    internal virtual RadioButton rEtc { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual RadioButton rSk
    {
      get => this._rSk;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.rSk_CheckedChanged);
        RadioButton rSk1 = this._rSk;
        if (rSk1 != null)
          rSk1.CheckedChanged -= eventHandler;
        this._rSk = value;
        RadioButton rSk2 = this._rSk;
        if (rSk2 == null)
          return;
        rSk2.CheckedChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("rBug")]
    internal virtual RadioButton rBug { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("rK2")]
    internal virtual RadioButton rK2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("rK11")]
    internal virtual RadioButton rK11 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }
  }
}
