// Decompiled with JetBrains decompiler
// Type: GUI_Class.Player
// Assembly: AssemblyHa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F582D8E5-D67F-4A37-A1B2-DD78DCA9CC78
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.Win32.Blakken.vpu-da917e6cce829452a2fefa2c4dd28bed5eefc382e7b5891dc033186e478ef6dd.exe

using System;
using System.Diagnostics;
using System.Drawing;

namespace GUI_Class
{
  public class Player
  {
    public const int INITIAL_FUEL_AMOUNT = 60;
    private string name;
    private int position;
    private Square location;
    private int fuelLeft;
    private bool hasPower;
    private bool atFinish = false;
    private Brush playerTokenColour;
    private Image playerTokenImage;

    public string Name
    {
      get => this.name;
      set => this.name = value;
    }

    public int Position
    {
      get => this.position;
      set => this.position = value;
    }

    public Square Location
    {
      get => this.location;
      set => this.location = value;
    }

    public int RocketFuel
    {
      get => this.fuelLeft;
      set => this.fuelLeft = value;
    }

    public bool HasPower
    {
      get => this.hasPower;
      set => this.hasPower = value;
    }

    public bool AtFinish
    {
      get => this.atFinish;
      set => this.atFinish = value;
    }

    public Brush PlayerTokenColour
    {
      get => this.playerTokenColour;
      set
      {
        this.playerTokenColour = value;
        this.playerTokenImage = (Image) new Bitmap(1, 1);
        using (Graphics graphics = Graphics.FromImage(this.PlayerTokenImage))
          graphics.FillRectangle(this.playerTokenColour, 0, 0, 1, 1);
      }
    }

    public Image PlayerTokenImage => this.playerTokenImage;

    public Player() => throw new ArgumentException("Parameterless constructor invalid.");

    public Player(string name)
    {
      this.Name = name;
      this.fuelLeft = 60;
    }

    public void Play(Die d1, Die d2)
    {
      d1.Roll();
      d2.Roll();
      this.Position += d1.FaceValue + d2.FaceValue;
      this.AtFinish = this.ReachedFinalSquare();
    }

    public void ConsumeFuel(int amount)
    {
      Debug.Assert(amount > 0, "amount > 0");
      if (this.fuelLeft > amount)
      {
        this.fuelLeft -= amount;
      }
      else
      {
        this.fuelLeft = 0;
        this.HasPower = false;
      }
    }

    private bool ReachedFinalSquare()
    {
      if (this.Position < 55)
        return false;
      this.Position = 55;
      return true;
    }
  }
}
