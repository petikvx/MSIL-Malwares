// Decompiled with JetBrains decompiler
// Type: ProjNet.Bridges.Params
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Adapter;
using IRefl.Producers;
using ProjNet.Common;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.Bridges
{
  public class Params : Rule, GlobalPrototypeAdapter, CodeObjectProducer
  {
    private List<Config> repository;
    private string m_Test;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Params(
      string ident,
      List<Config> cust,
      string filter,
      string second2,
      long second3_high,
      string attr4,
      string setup5,
      string caller6)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector(filter, second2, second3_high, attr4, caller6, setup5);
      this.repository = cust;
      this.m_Test = ident;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CreateItem() => this.repository.Count;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal List<Config> PatchRegistry() => this.repository;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void VisitRegistry(List<Config> info) => this.repository = info;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Config PushMerchant(int row_param) => this.repository[row_param];

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Config PushMerchant(string reference)
    {
      int num1 = 2;
      if (Params.PublishWrapper())
        ;
      List<Config>.Enumerator enumerator;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            enumerator = this.repository.GetEnumerator();
            num2 = 3;
            break;
          case 1:
          case 3:
            goto label_2;
          case 4:
            goto label_15;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_2:
      Config config;
      try
      {
        while (enumerator.MoveNext())
        {
          Config current = enumerator.Current;
          int num3 = 3;
          if (true)
            goto label_5;
label_4:
          bool flag = current.Name.Equals(reference, StringComparison.OrdinalIgnoreCase);
          goto label_7;
label_5:
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 3:
                goto label_4;
              case 1:
              case 2:
                goto label_7;
              case 4:
                goto label_15;
              default:
                num3 = 2;
                continue;
            }
          }
label_7:
          if (flag)
          {
            config = current;
            num3 = 4;
            goto label_5;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      config = (Config) null;
label_15:
      return config;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ChangeMerchant() => this.m_Test;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus()
    {
      int num1 = 4;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              stringBuilder = new StringBuilder();
              if (Params.VerifyWrapper())
              {
                num2 = 3;
                continue;
              }
              goto case 1;
            case 1:
            case 3:
              stringBuilder.AppendFormat("PROJECTION[\"{0}\"", (object) this.Name);
              num2 = 5;
              continue;
            case 2:
              goto label_3;
            case 5:
              goto label_8;
            case 6:
              goto label_13;
            default:
              if (!Params.PublishWrapper())
              {
                num2 = 2;
                continue;
              }
              goto label_13;
          }
        }
label_3:
        int num3 = this.SelectItem() > 0L ? 1 : 0;
label_5:
        if (num3 != 0)
          stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.CountItem(), (object) this.SelectItem());
        stringBuilder.Append("]");
        str = stringBuilder.ToString();
        num1 = 6;
        continue;
label_8:
        if (string.IsNullOrEmpty(this.CountItem()))
        {
          num3 = 0;
          goto label_5;
        }
        else
          goto label_3;
      }
label_13:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem()
    {
      int num1 = 5;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        List<Config>.Enumerator enumerator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_14;
            case 1:
            case 4:
              stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_Projection Classname=\"{0}\">{1}", new object[2]
              {
                (object) this.ChangeMerchant(),
                (object) this.ListRegistry()
              });
              enumerator = this.PatchRegistry().GetEnumerator();
              num2 = 2;
              continue;
            case 2:
              goto label_2;
            case 3:
              goto label_13;
            case 6:
              goto label_15;
            default:
              if (Params.VerifyWrapper())
              {
                num2 = 3;
                continue;
              }
              goto label_13;
          }
        }
label_2:
        try
        {
label_7:
          while (enumerator.MoveNext())
          {
            Config current = enumerator.Current;
            int num3 = 2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_4;
                case 1:
                case 3:
                  goto label_7;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_4:
            stringBuilder.Append(current.StopRegistry());
          }
        }
        finally
        {
          enumerator.Dispose();
        }
        stringBuilder.Append("</CS_Projection>");
label_13:
        str = stringBuilder.ToString();
        num1 = 6;
        continue;
label_14:
        stringBuilder = new StringBuilder();
        num1 = 4;
      }
label_15:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object param)
    {
      int num1 = 7;
      bool flag1;
      while (true)
      {
        int num2 = num1;
label_14:
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              flag1 = false;
              num2 = 8;
              continue;
            case 1:
            case 4:
              goto label_18;
            case 3:
              if (flag2)
              {
                int num3 = 0;
                num2 = Params.PublishWrapper() ? num3 : num3;
                continue;
              }
              goto label_10;
            case 5:
              goto label_7;
            case 6:
              goto label_16;
            case 7:
              goto label_9;
            case 8:
            case 9:
              goto label_20;
            default:
              int num4 = 1;
              num2 = Params.PublishWrapper() ? num4 : num4;
              continue;
          }
        }
label_7:
        flag1 = true;
        num1 = 9;
        continue;
label_9:
        flag2 = !(param is Params);
        num1 = 3;
        continue;
label_10:
        Params @params = param as Params;
        int row_param;
        if (@params.CreateItem() == this.CreateItem())
          row_param = 0;
        else
          break;
label_18:
        for (; row_param < this.repository.Count; ++row_param)
        {
          Config config = this.PushMerchant(@params.PushMerchant(row_param).Name);
          if (config == null)
          {
            flag1 = false;
            goto label_20;
          }
          else if (config.CountRegistry() != @params.PushMerchant(row_param).CountRegistry())
          {
            num2 = 6;
            goto label_14;
          }
        }
        num1 = 5;
      }
      flag1 = false;
      goto label_20;
label_16:
      flag1 = false;
label_20:
      return flag1;
    }

    internal static bool VerifyWrapper() => true;

    internal static bool PublishWrapper() => false;
  }
}
