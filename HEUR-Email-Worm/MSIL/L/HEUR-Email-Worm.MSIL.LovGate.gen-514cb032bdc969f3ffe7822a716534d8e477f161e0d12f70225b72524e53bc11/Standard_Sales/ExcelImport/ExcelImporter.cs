// Decompiled with JetBrains decompiler
// Type: Standard_Sales.ExcelImport.ExcelImporter
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace Standard_Sales.ExcelImport
{
  public class ExcelImporter : IExcelImporter
  {
    private readonly ICellParser _cellParser;

    public ExcelImporter(ICellParser cellParser)
    {
label_1:
      int num1 = -1318791566;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1212501034)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            flag = cellParser == null;
            num1 = (int) num2 * 430263455 ^ -243200210;
            continue;
          case 2:
            goto label_3;
          case 3:
            this._cellParser = cellParser;
            num1 = -562489724;
            continue;
          case 4:
            num1 = (int) num2 * -1943507810 ^ 428257176;
            continue;
          case 5:
            goto label_9;
          case 6:
            num1 = (int) num2 * 1590558314 ^ -1346379885;
            continue;
          case 7:
            int num3 = flag ? 575722096 : (num3 = 147032734);
            num1 = num3 ^ (int) num2 * 387237797;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:
      return;
label_9:
      throw ExcelImporter.\u200C⁪‎⁯⁪⁯⁬⁪⁫⁮⁯‬⁭‎‍⁬‍⁭⁫‬​⁫‌‌‭‮‭⁬⁮‮‭⁭⁪⁪⁮‪‭‌​⁪‮(\u003CModule\u003E.\u206F‌⁮​‫‫‮‬⁭⁬⁫⁮⁫⁭‌‮‌‏‬​⁭⁫‪​‫‮‬‫‬⁪⁬‍‍‮‬⁯‮‏‌‮‮<string>(3911260990U));
    }

    public ExcelDataSet GetCellValues(string fileName)
    {
      SpreadsheetDocument spreadsheetDocument = ExcelImporter.\u202D‮‌‌⁮‬⁭⁯‮‮‮⁪‫⁭‏‏‪‭⁪‪​‬‮⁫‪‬‭‬‏⁫‎⁬​⁭⁪⁭‬‭⁫‏‮(fileName, false);
      try
      {
label_2:
        int num1 = -807689891;
        bool flag1;
        int rowCount;
        WorkbookPart wbPart;
        Sheet sheet;
        IEnumerable<Cell> cells;
        List<ExcelSheetValue> source;
        int num2;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num1 ^ -415028163)) % 10U)
          {
            case 0:
              cells = ((OpenXmlElement) ExcelImporter.\u200F⁫‪⁯⁫‏⁬‎⁪‫‬‌⁫‪‫⁬‍⁭‍⁫‮​‪‍‬⁭‭‬‫‫​‫⁫⁮‭‫⁬​‭⁭‮((WorksheetPart) ExcelImporter.\u202B‪‍⁬⁬⁬⁬⁯‫‍⁬‭⁫⁪⁬​‌‪‬⁬‫‌​‭⁮⁭‎⁮​‍‍⁮‪‮⁪‭​‎‎⁫‮((OpenXmlPartContainer) wbPart, ExcelImporter.\u200D⁯⁪‎‍⁫​⁫‮‍​‎‏‎⁯‬⁭⁭⁮⁭⁫⁫​‏⁫‍⁫‪​‫‌​‪‫⁭‭⁯⁮‪‎‮(ExcelImporter.\u206F⁫⁮‏‭‍⁬⁫⁯⁭‭‬⁭⁫‮‮‎‭‪‫​⁯‮⁪⁮‪‎‎⁭‬‬⁬‬‌⁪‍‭‎‏⁯‮(sheet))))).Descendants<Cell>();
              source = new List<ExcelSheetValue>();
              num1 = -1657187524;
              continue;
            case 1:
              rowCount = 0;
              num1 = (int) num3 * 90461463 ^ 204066004;
              continue;
            case 2:
              goto label_2;
            case 3:
              goto label_8;
            case 4:
              wbPart = ExcelImporter.\u206F⁬​‏⁪‭‫‎⁯‌‬‍‮‌⁫‌​‪‏‭‮‏⁮‎‏‎⁬⁯⁮‎⁪‬⁮‪⁬‌⁯‪‬‬‮(spreadsheetDocument);
              num1 = (int) num3 * 2114456480 ^ 949965774;
              continue;
            case 5:
              sheet = ((OpenXmlElement) ExcelImporter.\u206D‎⁫‮‬‌⁭⁬‫‮⁯‮​‮⁪‫‏‍‌⁫‌‍‭‭‌⁯⁫‫⁪‎‎‌⁯​⁪‬‎‫‬‪‮(wbPart)).Descendants<Sheet>().FirstOrDefault<Sheet>();
              num1 = (int) num3 * -1899000436 ^ -387376856;
              continue;
            case 7:
              num2 = 0;
              num1 = (int) num3 * 1705526560 ^ -1952764250;
              continue;
            case 8:
              int num4 = flag1 ? 9679310 : (num4 = 1812235489);
              num1 = num4 ^ (int) num3 * -1662034241;
              continue;
            case 9:
              flag1 = sheet == null;
              num1 = (int) num3 * 1856810994 ^ -682657689;
              continue;
            default:
              goto label_12;
          }
        }
label_8:
        throw ExcelImporter.\u206D‫⁯‍⁬⁪‪⁬‬‮​⁫⁯‭‍⁫‮‮‎⁮⁬​‫‭‮‭‬⁭‫‎​⁭‫‫‏‫⁯⁬⁭‪‮(\u003CModule\u003E.\u202E⁫⁬⁬⁯‪‏​‍‏⁯‎⁪​‌‭⁪⁯‌‏‏​⁪‮‎‮‌​‪‍‏​‪‪⁫‬‪‮⁫‭‮<string>(3324775064U));
label_12:
        IEnumerator<Cell> enumerator1 = cells.GetEnumerator();
        try
        {
label_26:
          int num5 = !ExcelImporter.\u200C​⁬⁬⁯⁬‮​​‬‫‭‪‬⁪⁬⁮‬‫‍‭‬⁪⁫​‬‌‌⁮‎⁯‍‪‮​⁭⁭‭‭‮((IEnumerator) enumerator1) ? -280697143 : (num5 = -1623261514);
          ExcelSheetValue cell;
          bool flag2;
          Cell current;
          while (true)
          {
            uint num6;
            switch ((num6 = (uint) (num5 ^ -415028163)) % 15U)
            {
              case 0:
                rowCount = cell.Coordinates.Row;
                num5 = (int) num6 * -1479439658 ^ -1180693247;
                continue;
              case 1:
                goto label_26;
              case 2:
                num5 = (int) num6 * -278361114 ^ 1593052020;
                continue;
              case 3:
                num2 = cell.Coordinates.Column;
                num5 = (int) num6 * -1909383338 ^ 1831936541;
                continue;
              case 4:
                num5 = (int) num6 * -601267834 ^ 138292260;
                continue;
              case 5:
                int num7 = !flag2 ? -824173556 : (num7 = -1134975635);
                num5 = num7 ^ (int) num6 * 136149244;
                continue;
              case 6:
                flag2 = cell.Coordinates.Row > rowCount;
                num5 = -242928122;
                continue;
              case 7:
                num5 = (int) num6 * 1295902906 ^ 2079976060;
                continue;
              case 8:
                source.Add(cell);
                num5 = (int) num6 * 1268793289 ^ 437678653;
                continue;
              case 9:
                current = enumerator1.Current;
                num5 = -2044779890;
                continue;
              case 10:
                num5 = -1623261514;
                continue;
              case 12:
                cell = this._cellParser.ParseCell((OpenXmlPartContainer) wbPart, current);
                num5 = (int) num6 * -584133857 ^ 1999026166;
                continue;
              case 13:
                num5 = -855487767;
                continue;
              case 14:
                int num8 = cell.Coordinates.Column <= num2 ? -246758815 : (num8 = -201639035);
                num5 = num8 ^ (int) num6 * -1650222062;
                continue;
              default:
                goto label_34;
            }
          }
        }
        finally
        {
          if (enumerator1 != null)
          {
label_30:
            int num9 = -1968689739;
            while (true)
            {
              uint num10;
              switch ((num10 = (uint) (num9 ^ -415028163)) % 3U)
              {
                case 0:
                  goto label_30;
                case 1:
                  ExcelImporter.\u202C‌⁯‪‎‮⁭‎‬‏⁮‍‪​‪‫‫‍‬‏⁪‍‍‫‌‮‫⁬‎‪‌‬‌⁭​⁬‏⁭‪⁬‮((IDisposable) enumerator1);
                  num9 = (int) num10 * 325230529 ^ 351375383;
                  continue;
                default:
                  goto label_33;
              }
            }
          }
label_33:;
        }
label_34:
        ExcelDataSet cellValues = new ExcelDataSet(rowCount);
label_35:
        int num11 = -1022836181;
        while (true)
        {
          uint num12;
          ExcelDataRow excelDataRow;
          int num13;
          bool flag3;
          int num14;
          int i1;
          switch ((num12 = (uint) (num11 ^ -415028163)) % 9U)
          {
            case 0:
              num11 = (int) num12 * 1890537657 ^ 486767099;
              continue;
            case 1:
              cellValues.TrialDataRows.Add(excelDataRow);
              num11 = (int) num12 * -575657816 ^ 1888122623;
              continue;
            case 2:
              i1 = num13;
              num11 = (int) num12 * 1791534653 ^ -1818860968;
              continue;
            case 3:
label_38:
              num11 = -955334974;
              continue;
            case 4:
label_63:
              flag3 = num13 < rowCount + 1;
              num14 = -493973406;
              goto label_60;
            case 5:
              num13 = 0;
              num11 = (int) num12 * -879747654 ^ -1496624932;
              continue;
            case 6:
              excelDataRow = new ExcelDataRow(num2 + 1);
              num11 = (int) num12 * -787973129 ^ -991323733;
              continue;
            case 7:
              goto label_35;
            default:
              IEnumerator<ExcelSheetValue> enumerator2 = source.Where<ExcelSheetValue>((Func<ExcelSheetValue, bool>) (excelSheetValue => excelSheetValue.Coordinates.Row == i1)).GetEnumerator();
              try
              {
label_51:
                int num15 = ExcelImporter.\u200C​⁬⁬⁯⁬‮​​‬‫‭‪‬⁪⁬⁮‬‫‍‭‬⁪⁫​‬‌‌⁮‎⁯‍‪‮​⁭⁭‭‭‮((IEnumerator) enumerator2) ? -503739798 : (num15 = -768255142);
                ExcelSheetValue current;
                while (true)
                {
                  uint num16;
                  switch ((num16 = (uint) (num15 ^ -415028163)) % 7U)
                  {
                    case 1:
                      goto label_51;
                    case 2:
                      current = enumerator2.Current;
                      num15 = -913410555;
                      continue;
                    case 3:
                      num15 = (int) num16 * 623532303 ^ -2063245773;
                      continue;
                    case 4:
                      num15 = (int) num16 * 1824831719 ^ 120059787;
                      continue;
                    case 5:
                      excelDataRow.Values[current.Coordinates.Column] = current.Value;
                      num15 = (int) num16 * -360525803 ^ -1383232154;
                      continue;
                    case 6:
                      num15 = -503739798;
                      continue;
                    default:
                      goto label_58;
                  }
                }
              }
              finally
              {
                if (enumerator2 != null)
                {
label_53:
                  int num17 = -185338890;
                  while (true)
                  {
                    uint num18;
                    switch ((num18 = (uint) (num17 ^ -415028163)) % 4U)
                    {
                      case 0:
                        goto label_53;
                      case 2:
                        num17 = (int) num18 * 1398437407 ^ 539694482;
                        continue;
                      case 3:
                        ExcelImporter.\u202C‌⁯‪‎‮⁭‎‬‏⁮‍‪​‪‫‫‍‬‏⁪‍‍‫‌‮‫⁬‎‪‌‬‌⁭​⁬‏⁭‪⁬‮((IDisposable) enumerator2);
                        num17 = (int) num18 * -544050792 ^ -1865689601;
                        continue;
                      default:
                        goto label_57;
                    }
                  }
                }
label_57:;
              }
label_58:
              break;
          }
label_59:
          num14 = -1653018709;
label_60:
          while (true)
          {
            uint num19;
            switch ((num19 = (uint) (num14 ^ -415028163)) % 5U)
            {
              case 1:
                ++num13;
                num14 = (int) num19 * -866794740 ^ 1996926222;
                continue;
              case 2:
                goto label_63;
              case 3:
                if (!flag3)
                {
                  num14 = (int) num19 * 2098076447 ^ -782279049;
                  continue;
                }
                goto label_38;
              case 4:
                goto label_59;
              default:
                goto label_65;
            }
          }
        }
label_65:
        return cellValues;
      }
      finally
      {
        if (spreadsheetDocument != null)
        {
label_67:
          int num20 = -909766682;
          while (true)
          {
            uint num21;
            switch ((num21 = (uint) (num20 ^ -415028163)) % 3U)
            {
              case 0:
                goto label_67;
              case 1:
                ExcelImporter.\u202C‌⁯‪‎‮⁭‎‬‏⁮‍‪​‪‫‫‍‬‏⁪‍‍‫‌‮‫⁬‎‪‌‬‌⁭​⁬‏⁭‪⁬‮((IDisposable) spreadsheetDocument);
                num20 = (int) num21 * 1164906908 ^ 824815394;
                continue;
              default:
                goto label_70;
            }
          }
        }
label_70:;
      }
    }

    static ArgumentNullException \u200C⁪‎⁯⁪⁯⁬⁪⁫⁮⁯‬⁭‎‍⁬‍⁭⁫‬​⁫‌‌‭‮‭⁬⁮‮‭⁭⁪⁪⁮‪‭‌​⁪‮(
      [In] string obj0)
    {
      return new ArgumentNullException(obj0);
    }

    static SpreadsheetDocument \u202D‮‌‌⁮‬⁭⁯‮‮‮⁪‫⁭‏‏‪‭⁪‪​‬‮⁫‪‬‭‬‏⁫‎⁬​⁭⁪⁭‬‭⁫‏‮(
      [In] string obj0,
      [In] bool obj1)
    {
      return SpreadsheetDocument.Open(obj0, obj1);
    }

    static WorkbookPart \u206F⁬​‏⁪‭‫‎⁯‌‬‍‮‌⁫‌​‪‏‭‮‏⁮‎‏‎⁬⁯⁮‎⁪‬⁮‪⁬‌⁯‪‬‬‮(
      [In] SpreadsheetDocument obj0)
    {
      return obj0.WorkbookPart;
    }

    static Workbook \u206D‎⁫‮‬‌⁭⁬‫‮⁯‮​‮⁪‫‏‍‌⁫‌‍‭‭‌⁯⁫‫⁪‎‎‌⁯​⁪‬‎‫‬‪‮([In] WorkbookPart obj0) => obj0.Workbook;

    static InvalidOperationException \u206D‫⁯‍⁬⁪‪⁬‬‮​⁫⁯‭‍⁫‮‮‎⁮⁬​‫‭‮‭‬⁭‫‎​⁭‫‫‏‫⁯⁬⁭‪‮(
      [In] string obj0)
    {
      return new InvalidOperationException(obj0);
    }

    static StringValue \u206F⁫⁮‏‭‍⁬⁫⁯⁭‭‬⁭⁫‮‮‎‭‪‫​⁯‮⁪⁮‪‎‎⁭‬‬⁬‬‌⁪‍‭‎‏⁯‮([In] Sheet obj0) => obj0.Id;

    static string \u200D⁯⁪‎‍⁫​⁫‮‍​‎‏‎⁯‬⁭⁭⁮⁭⁫⁫​‏⁫‍⁫‪​‫‌​‪‫⁭‭⁯⁮‪‎‮([In] StringValue obj0) => StringValue.op_Implicit(obj0);

    static OpenXmlPart \u202B‪‍⁬⁬⁬⁬⁯‫‍⁬‭⁫⁪⁬​‌‪‬⁬‫‌​‭⁮⁭‎⁮​‍‍⁮‪‮⁪‭​‎‎⁫‮(
      [In] OpenXmlPartContainer obj0,
      [In] string obj1)
    {
      return obj0.GetPartById(obj1);
    }

    static Worksheet \u200F⁫‪⁯⁫‏⁬‎⁪‫‬‌⁫‪‫⁬‍⁭‍⁫‮​‪‍‬⁭‭‬‫‫​‫⁫⁮‭‫⁬​‭⁭‮([In] WorksheetPart obj0) => obj0.Worksheet;

    static bool \u200C​⁬⁬⁯⁬‮​​‬‫‭‪‬⁪⁬⁮‬‫‍‭‬⁪⁫​‬‌‌⁮‎⁯‍‪‮​⁭⁭‭‭‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u202C‌⁯‪‎‮⁭‎‬‏⁮‍‪​‪‫‫‍‬‏⁪‍‍‫‌‮‫⁬‎‪‌‬‌⁭​⁬‏⁭‪⁬‮([In] IDisposable obj0) => obj0.Dispose();
  }
}
