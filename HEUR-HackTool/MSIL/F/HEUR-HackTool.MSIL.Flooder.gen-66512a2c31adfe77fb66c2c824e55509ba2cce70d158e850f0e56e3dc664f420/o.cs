// Decompiled with JetBrains decompiler
// Type: Dark_RAT.o
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class o : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Label7")]
    private Label _Label7;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;

    [DebuggerNonUserCode]
    static o()
    {
    }

    [DebuggerNonUserCode]
    public o()
    {
      o.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (o.__ENCList)
      {
        if (o.__ENCList.Count == o.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (o.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (o.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                o.__ENCList[index1] = o.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          o.__ENCList.RemoveRange(index1, checked (o.__ENCList.Count - index1));
          o.__ENCList.Capacity = o.__ENCList.Count;
        }
        o.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (o));
      this.Label7 = new Label();
      this.PictureBox1 = new PictureBox();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.Label7.AutoSize = true;
      this.Label7.BackColor = Color.Transparent;
      Label label7_1 = this.Label7;
      Point point1 = new Point(12, 9);
      Point point2 = point1;
      label7_1.Location = point2;
      this.Label7.Name = "Label7";
      Label label7_2 = this.Label7;
      Size size1 = new Size(856, 377);
      Size size2 = size1;
      label7_2.Size = size2;
      this.Label7.TabIndex = 1;
      this.Label7.Text = componentResourceManager.GetString("Label7.Text");
      this.PictureBox1.Image = (Image) componentResourceManager.GetObject("PictureBox1.Image");
      PictureBox pictureBox1_1 = this.PictureBox1;
      point1 = new Point(773, 345);
      Point point3 = point1;
      pictureBox1_1.Location = point3;
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1_2 = this.PictureBox1;
      size1 = new Size(95, 31);
      Size size3 = size1;
      pictureBox1_2.Size = size3;
      this.PictureBox1.TabIndex = 2;
      this.PictureBox1.TabStop = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(881, 391);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.PictureBox1);
      this.Controls.Add((Control) this.Label7);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MaximizeBox = false;
      this.Name = nameof (o);
      this.Text = "About";
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Label7
    {
      [DebuggerNonUserCode] get => this._Label7;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Label7_Click);
        if (this._Label7 != null)
          this._Label7.Click -= eventHandler;
        this._Label7 = value;
        if (this._Label7 == null)
          return;
        this._Label7.Click += eventHandler;
      }
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.PictureBox1_Click);
        if (this._PictureBox1 != null)
          this._PictureBox1.Click -= eventHandler;
        this._PictureBox1 = value;
        if (this._PictureBox1 == null)
          return;
        this._PictureBox1.Click += eventHandler;
      }
    }

    private void PictureBox1_Click(object sender, EventArgs e) => Process.Start("http://www.gnu.org/licenses/gpl.html");

    private void Label7_Click(object sender, EventArgs e)
    {
    }
  }
}
