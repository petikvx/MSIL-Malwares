// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Lists.PoolPolicyList
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Roles;
using ProjNet.Rules;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Identifiers;

namespace TYPELIBA.Lists
{
  public class PoolPolicyList : Field, Stub, Worker
  {
    private double _Info;
    private double authentication;
    private double m_Strategy;
    private ExceptionRule resolver;
    private bool _Watcher;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal PoolPolicyList(
      double ident,
      double cust,
      double template,
      bool isord2,
      ExceptionRule pol3,
      string key4,
      string map5,
      long res6_Low,
      string attr7,
      string x8,
      string config9)
    {
      int num1 = 2;
      if (false)
        return;
      while (true)
      {
        bool flag;
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            this._Watcher = isord2;
            if (!isord2)
            {
              num3 = 0;
              break;
            }
            if (template == 0.0)
            {
              num3 = 1;
              break;
            }
            num2 = 7;
            goto label_9;
          case 1:
          case 5:
            if (!flag)
            {
              this.authentication = cust;
              num1 = 8;
              continue;
            }
            goto label_13;
          case 2:
            ManagerParamsID.NewExpression();
            num1 = 6;
            continue;
          case 3:
          case 7:
label_3:
            num3 = double.IsInfinity(template) ? 1 : 0;
            break;
          case 4:
            goto label_5;
          case 6:
            // ISSUE: explicit constructor call
            base.\u002Ector(key4, map5, res6_Low, attr7, x8, config9);
            this._Info = ident;
            this.m_Strategy = template;
            this.resolver = pol3;
            num1 = 0;
            continue;
          case 8:
            goto label_21;
          default:
            num2 = 4;
            goto label_9;
        }
        if (num3 == 0)
        {
          flag = isord2;
          if (true)
          {
            num1 = 1;
            continue;
          }
          goto label_3;
        }
        else
          break;
label_9:
        num1 = num2;
      }
      this.authentication = ident;
      return;
label_5:
      return;
label_21:
      return;
label_13:
      this.authentication = (1.0 - 1.0 / this.m_Strategy) * ident;
    }

    public static PoolPolicyList WGS84
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new PoolPolicyList(6378137.0, 0.0, 298.257223563, true, InterpreterRule.ManageProcess(), "WGS 84", "EPSG", 7030L, nameof (WGS84), "", "Inverse flattening derived from four defining parameters (semi-major axis; C20 = -484.16685*10e-6; earth's angular velocity w = 7292115e11 rad/sec; gravitational constant GM = 3986005e8 m*m*m/s/s).");
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static PoolPolicyList ForgotObject() => new PoolPolicyList(6378135.0, 0.0, 298.26, true, InterpreterRule.ManageProcess(), "WGS 72", "EPSG", 7043L, "WGS 72", string.Empty, string.Empty);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static PoolPolicyList StopObject() => new PoolPolicyList(6378137.0, 0.0, 298.257222101, true, InterpreterRule.ManageProcess(), "GRS 1980", "EPSG", 7019L, "International 1979", "", "Adopted by IUGG 1979 Canberra.  Inverse flattening is derived from geocentric gravitational constant GM = 3986005e8 m*m*m/s/s; dynamic form factor J2 = 108263e8 and Earth's angular velocity = 7292115e-11 rad/s.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static PoolPolicyList InterruptProcess() => new PoolPolicyList(6378388.0, 0.0, 297.0, true, InterpreterRule.ManageProcess(), "International 1924", "EPSG", 7022L, "Hayford 1909", string.Empty, "Described as a=6378388 m. and b=6356909 m. from which 1/f derived to be 296.95926. The figure was adopted as the International ellipsoid in 1924 but with 1/f taken as 297 exactly from which b is derived as 6356911.946m.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static PoolPolicyList IncludeProcess() => new PoolPolicyList(20926202.0, 0.0, 297.0, true, InterpreterRule.RemoveProcess(), "Clarke 1880", "EPSG", 7034L, "Clarke 1880", string.Empty, "Clarke gave a and b and also 1/f=293.465 (to 3 decimal places).  1/f derived from a and b = 293.4663077…");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static PoolPolicyList InitProcess() => new PoolPolicyList(6378206.4, 6356583.8, double.PositiveInfinity, false, InterpreterRule.ManageProcess(), "Clarke 1866", "EPSG", 7008L, "Clarke 1866", string.Empty, "Original definition a=20926062 and b=20855121 (British) feet. Uses Clarke's 1865 inch-metre ratio of 39.370432 to obtain metres. (Metric value then converted to US survey feet for use in the United States using 39.37 exactly giving a=20925832.16 ft US).");

    public static PoolPolicyList Sphere
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new PoolPolicyList(6370997.0, 6370997.0, double.PositiveInfinity, false, InterpreterRule.ManageProcess(), "GRS 1980 Authalic Sphere", "EPSG", 7048L, nameof (Sphere), "", "Authalic sphere derived from GRS 1980 ellipsoid (code 7019).  (An authalic sphere is one with a surface area equal to the surface area of the ellipsoid). 1/f is infinite.");
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double AddState() => this._Info;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void StartState(double key) => this._Info = key;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double ManageState() => this.authentication;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ListState(double asset) => this.authentication = asset;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double PopState() => this.m_Strategy;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CheckState(double def) => this.m_Strategy = def;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExceptionRule CancelState() => this.resolver;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DeleteState(ExceptionRule config) => this.resolver = config;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool AwakeState() => this._Watcher;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ReflectState(bool checkinfo) => this._Watcher = checkinfo;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 1;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              stringBuilder = new StringBuilder();
              num2 = 2;
              continue;
            case 2:
              stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "SPHEROID[\"{0}\", {1}, {2}", new object[3]
              {
                (object) this.Name,
                (object) this.AddState(),
                (object) this.PopState()
              });
              if (!string.IsNullOrEmpty(this.LoginState()) && this.RestartState() > 0L)
              {
                stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.LoginState(), (object) this.RestartState());
                if (PoolPolicyList.ConnectDispatcher())
                {
                  num2 = 5;
                  continue;
                }
                goto label_9;
              }
              else
                goto label_1;
            case 3:
            case 4:
              goto label_6;
            case 5:
              goto label_1;
            case 6:
              goto label_9;
            default:
              goto label_4;
          }
        }
label_1:
        stringBuilder.Append("]");
        goto label_6;
label_4:
        num1 = 4;
        continue;
label_6:
        str = stringBuilder.ToString();
        num1 = 6;
      }
label_9:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_Ellipsoid SemiMajorAxis=\"{0}\" SemiMinorAxis=\"{1}\" InverseFlattening=\"{2}\" IvfDefinitive=\"{3}\">{4}{5}</CS_Ellipsoid>", (object) this.AddState(), (object) this.ManageState(), (object) this.PopState(), (object) (this.AwakeState() ? 1 : 0), (object) this.AddProcess(), (object) this.CancelState().InterruptState());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object instance)
    {
      int num1 = 0;
      PoolPolicyList poolPolicyList;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              flag = !(instance is PoolPolicyList);
              if (PoolPolicyList.ConnectDispatcher())
              {
                num2 = 5;
                continue;
              }
              goto case 1;
            case 1:
            case 3:
              if (poolPolicyList.AwakeState() == this.AwakeState() && poolPolicyList.AddState() == this.AddState() && poolPolicyList.ManageState() == this.ManageState())
              {
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto label_4;
              }
              else
                goto label_12;
            case 2:
            case 4:
              goto label_4;
            case 5:
              if (!flag)
              {
                poolPolicyList = instance as PoolPolicyList;
                if (poolPolicyList.PopState() != this.PopState())
                  goto label_12;
                else
                  goto case 1;
              }
              else
              {
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_11;
              }
            case 6:
              goto label_11;
            default:
              goto label_8;
          }
        }
label_8:
        num1 = 1;
      }
label_4:
      return false;
label_11:
      int num3 = poolPolicyList.CancelState().CompareState((object) this.CancelState()) ? 1 : 0;
      goto label_13;
label_12:
      num3 = 0;
label_13:
      return num3 != 0;
    }

    internal static bool ConnectDispatcher() => true;

    internal static bool FindDispatcher() => false;
  }
}
